{"id": "364ce5e6-5d12-4ad5-9fcc-021882306453", "solution": "", "name": "", "description": "", "configspace": "", "generation": 0, "fitness": -Infinity, "feedback": "No code was extracted.", "error": "", "parent_id": null, "metadata": {}, "mutation_prompt": null}
{"id": "a29cf2bf-fbb3-4ec1-b49d-169ea5470504", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "364ce5e6-5d12-4ad5-9fcc-021882306453", "metadata": {}, "mutation_prompt": null}
{"id": "80591291-9a0b-4b38-93f2-9cbbf0256e17", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "364ce5e6-5d12-4ad5-9fcc-021882306453", "metadata": {}, "mutation_prompt": null}
{"id": "f1f69032-a66d-437a-ab5b-419f5ee45853", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "364ce5e6-5d12-4ad5-9fcc-021882306453", "metadata": {}, "mutation_prompt": null}
{"id": "55446aaa-5f63-4771-830e-096e34974467", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "364ce5e6-5d12-4ad5-9fcc-021882306453", "metadata": {}, "mutation_prompt": null}
{"id": "a4a7063a-abd2-467a-95cc-fc276fb34c37", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "364ce5e6-5d12-4ad5-9fcc-021882306453", "metadata": {}, "mutation_prompt": null}
{"id": "c943944a-0ced-4ed7-ac05-5004599aff36", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "364ce5e6-5d12-4ad5-9fcc-021882306453", "metadata": {}, "mutation_prompt": null}
{"id": "85077125-ded9-4918-89f2-1b65f0adb6d7", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "364ce5e6-5d12-4ad5-9fcc-021882306453", "metadata": {}, "mutation_prompt": null}
{"id": "f002c390-f842-41cd-9c0e-ae4554b85ba0", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "364ce5e6-5d12-4ad5-9fcc-021882306453", "metadata": {}, "mutation_prompt": null}
{"id": "bfff4ee1-0f0b-44bb-9b0a-80881664e157", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "364ce5e6-5d12-4ad5-9fcc-021882306453", "metadata": {}, "mutation_prompt": null}
{"id": "99b05757-cf53-401f-94e3-708736f8b07f", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "364ce5e6-5d12-4ad5-9fcc-021882306453", "metadata": {}, "mutation_prompt": null}
{"id": "e60824f7-a40e-49a3-867b-7bcf9fe79f37", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "364ce5e6-5d12-4ad5-9fcc-021882306453", "metadata": {}, "mutation_prompt": null}
{"id": "0f3a37e7-ac3b-4d6d-a8b5-702d50feec4c", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "364ce5e6-5d12-4ad5-9fcc-021882306453", "metadata": {}, "mutation_prompt": null}
{"id": "87d5020b-29e9-4bf2-852b-3e2dc220a0a4", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "364ce5e6-5d12-4ad5-9fcc-021882306453", "metadata": {}, "mutation_prompt": null}
{"id": "dd1d8409-5b9c-4b9c-9765-981797025e3f", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "364ce5e6-5d12-4ad5-9fcc-021882306453", "metadata": {}, "mutation_prompt": null}
{"id": "980dfa97-e041-47dd-8ca3-eeb8d1f89a5c", "solution": "import numpy as np\n\nclass DE_PSO_Optimizer:\n    def __init__(self, budget, dim, pop_size=50, c1=2.0, c2=2.0, w=0.7, f=0.5, cr=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.c1 = c1\n        self.c2 = c2\n        self.w = w\n        self.f = f\n        self.cr = cr\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(ind) for ind in population])\n\n        def clip_bounds(population):\n            return np.clip(population, -5.0, 5.0)\n\n        def mutate(population, target_idx, f):\n            candidates = list(range(len(population)))\n            candidates.remove(target_idx)\n            a, b, c = np.random.choice(candidates, 3, replace=False)\n            mutant = population[a] + f * (population[b] - population[c])\n            return clip_bounds(mutant)\n\n        def crossover(target, mutant):\n            trial = np.copy(target)\n            crossover_points = np.random.rand(self.dim) < self.cr\n            if not np.any(crossover_points):\n                crossover_points[np.random.randint(0, self.dim)] = True\n            trial[crossover_points] = mutant[crossover_points]\n            return trial\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                mutant = mutate(population, i, self.f)\n                trial = crossover(population[i], mutant)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n        return best_solution\n", "name": "DE_PSO_Optimizer", "description": "Utilizing a novel hybrid algorithm combining Differential Evolution (DE) with Particle Swarm Optimization (PSO) to enhance search and convergence capabilities.", "configspace": "", "generation": 15, "fitness": 0.38961586939502635, "feedback": "The algorithm DE_PSO_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.39 with standard deviation 0.25.", "error": "", "parent_id": "364ce5e6-5d12-4ad5-9fcc-021882306453", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6374593667227992, 0.6889401945204383, 0.6840853480293522, 0.6967349454168776, 0.6836546441420059, 0.7013571449635906, 0.6666788686750416, 0.6770639713943923, 0.6863840800439489, 0.12406593503725594, 0.12297465129273255, 0.14058632370994584, 0.1052595427488272, 0.11167461882941265, 0.13007467230320757, 0.12365019145486145, 0.11918356450990464, 0.11488744604263235, 0.10535781951712397, 0.11481994548974239, 0.09822569063089581, 0.11315686760328558, 0.095718207154741, 0.1284589936656112, 0.11755130828269289, 0.12022350325463882, 0.11584820962019216, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.5245512181825833, 0.48590193773332546, 0.4726385713433626, 0.49755790842027525, 0.44050793004714717, 0.4860225812214042, 0.48923614479716393, 0.5626004529120301, 0.5661570195281409, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.49293502300884817, 0.271219826626266, 0.19525206862626898, 0.21208489548313536, 0.28795742039245853, 0.23712476040114228, 0.26456600091702454, 0.42421509633777477, 0.24608110188436494, 0.20232704007066327, 0.3997401225652686, 0.3946916881107272, 0.3321086903701219, 0.17433639000156165, 0.34057707605230425, 0.3185375665222645, 0.44875467299607996, 0.22345913743219759, 0.47817446858601365, 0.4614805127441417, 0.4102169989000195, 0.44686108002553415, 0.43915453207298905, 0.4440057175463302, 0.44242477992667906, 0.45027983433914365, 0.45654985092748845, 0.5447193995815659, 0.587850359461022, 0.5479286276366925, 0.5932712354594567, 0.5281597245465506, 0.576369408068012, 0.5895215243182369, 0.6533175907468016, 0.5580757098786728, 0.1820234248487943, 0.10042102185966051, 0.1094458063176349, 0.18975380863799762, 0.2616899769940645, 0.2704787827836086, 0.14806365752002526, 0.16644564002240947, 0.15630378745456364, 0.3522612834402613, 0.34558762409589794, 0.30832940654158036, 0.3548320422232081, 0.36776095379850093, 0.36386973613151785, 0.32759195569500954, 0.36128975575133904, 0.3295039643056106, 0.7251247130914591, 0.7421906635710509, 0.7496270213295275, 0.7230575132501221, 0.7251778593971584, 0.755831239590211, 0.7223247260970481, 0.7243412267015438, 0.7346211765929873, 0.09425026936346892, 0.10579369271440497, 0.09773862024513658, 0.09069026109797595, 0.09873614125013352, 0.11727414971731487, 0.11161073672894872, 0.1053016798615024, 0.10926195124569171, 0.1668445090052374, 0.13100362643348562, 0.14861021678460906, 0.1597184884703442, 0.1703972777954268, 0.1536571464041484, 0.21274717756607497, 0.1577126553447179, 0.17778289692217875, 0.41067801371860546, 0.43734698273738726, 0.46862066207838815, 0.39221448766203615, 0.41783463202763027, 0.4328395179856588, 0.4438323548298344, 0.4822833501481897, 0.4826278681932962, 0.3433992730587172, 0.3441615990342961, 0.33987749587443383, 0.3503815404539863, 0.32444776412018095, 0.3406782878289202, 0.35588497881207926, 0.35848157334592856, 0.32881957612434887, 0.20687612780704456, 0.21476317805421452, 0.19118188338739683, 0.20720838202013414, 0.22689532950204405, 0.19706522310943897, 0.2048548004556734, 0.2102999473590339, 0.2048058029438542, 0.19922743430889167, 0.2137604528357705, 0.1964308170507908, 0.18742924286984874, 0.25777128882776845, 0.18928562755462075, 0.2023242721488182, 0.21173853655341168, 0.24001795766827494, 0.6726255830604337, 0.19796955755725243, 0.19251605048532705, 0.6089964619245598, 0.7234653051791861, 0.1786098411700403, 0.565304270779537, 0.17117816801315844, 0.18106701919554602, 0.6868763099660992, 0.31772736525156975, 0.710391785663764, 0.1979188806567178, 0.2012540407726643, 0.70839429766416, 0.6418310694978038, 0.15061184268873962, 0.2104471192807641, 0.1938161867954813, 0.1886171753911593, 0.21371843256686773, 0.18694601503491992, 0.2054013654456397, 0.18033810841782072, 0.1958685708189951, 0.20650369436260085, 0.1886939359094303, 0.07497160228750599, 0.08931752520059522, 0.08148000773387032, 0.07270439939139905, 0.08257615351081926, 0.08619801121010329, 0.08427141040888397, 0.07555033649169784, 0.08109924643008071]}, "mutation_prompt": null}
{"id": "ec0b3793-0769-40b8-801d-3d274e811302", "solution": "import numpy as np\n\nclass DE_PSO_Optimizer:\n    def __init__(self, budget, dim, pop_size=50, c1=2.0, c2=2.0, w=0.7, f=0.5, cr=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.c1 = c1\n        self.c2 = c2\n        self.w = w\n        self.f = f\n        self.cr = cr\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(ind) for ind in population])\n\n        def clip_bounds(population):\n            return np.clip(population, -5.0, 5.0)\n\n        def mutate(population, target_idx, f):\n            candidates = list(range(len(population)))\n            candidates.remove(target_idx)\n            a, b, c = np.random.choice(candidates, 3, replace=False)\n            mutant = population[a] + f * (population[b] - population[c])\n            return clip_bounds(mutant)\n\n        def crossover(target, mutant):\n            trial = np.copy(target)\n            crossover_points = np.random.rand(self.dim) < self.cr\n            if not np.any(crossover_points):\n                crossover_points[np.random.randint(0, self.dim)] = True\n            trial[crossover_points] = mutant[crossover_points]\n            return trial\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                mutant = mutate(population, i, self.f)\n                trial = crossover(population[i], mutant)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n        return best_solution\n", "name": "DE_PSO_Optimizer", "description": "Utilizing a novel hybrid algorithm combining Differential Evolution (DE) with Particle Swarm Optimization (PSO) to enhance search and convergence capabilities.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "980dfa97-e041-47dd-8ca3-eeb8d1f89a5c", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6374593667227992, 0.6889401945204383, 0.6840853480293522, 0.6967349454168776, 0.6836546441420059, 0.7013571449635906, 0.6666788686750416, 0.6770639713943923, 0.6863840800439489, 0.12406593503725594, 0.12297465129273255, 0.14058632370994584, 0.1052595427488272, 0.11167461882941265, 0.13007467230320757, 0.12365019145486145, 0.11918356450990464, 0.11488744604263235, 0.10535781951712397, 0.11481994548974239, 0.09822569063089581, 0.11315686760328558, 0.095718207154741, 0.1284589936656112, 0.11755130828269289, 0.12022350325463882, 0.11584820962019216, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.5245512181825833, 0.48590193773332546, 0.4726385713433626, 0.49755790842027525, 0.44050793004714717, 0.4860225812214042, 0.48923614479716393, 0.5626004529120301, 0.5661570195281409, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.49293502300884817, 0.271219826626266, 0.19525206862626898, 0.21208489548313536, 0.28795742039245853, 0.23712476040114228, 0.26456600091702454, 0.42421509633777477, 0.24608110188436494, 0.20232704007066327, 0.3997401225652686, 0.3946916881107272, 0.3321086903701219, 0.17433639000156165, 0.34057707605230425, 0.3185375665222645, 0.44875467299607996, 0.22345913743219759, 0.47817446858601365, 0.4614805127441417, 0.4102169989000195, 0.44686108002553415, 0.43915453207298905, 0.4440057175463302, 0.44242477992667906, 0.45027983433914365, 0.45654985092748845, 0.5447193995815659, 0.587850359461022, 0.5479286276366925, 0.5932712354594567, 0.5281597245465506, 0.576369408068012, 0.5895215243182369, 0.6533175907468016, 0.5580757098786728, 0.1820234248487943, 0.10042102185966051, 0.1094458063176349, 0.18975380863799762, 0.2616899769940645, 0.2704787827836086, 0.14806365752002526, 0.16644564002240947, 0.15630378745456364, 0.3522612834402613, 0.34558762409589794, 0.30832940654158036, 0.3548320422232081, 0.36776095379850093, 0.36386973613151785, 0.32759195569500954, 0.36128975575133904, 0.3295039643056106, 0.7251247130914591, 0.7421906635710509, 0.7496270213295275, 0.7230575132501221, 0.7251778593971584, 0.755831239590211, 0.7223247260970481, 0.7243412267015438, 0.7346211765929873, 0.09425026936346892, 0.10579369271440497, 0.09773862024513658, 0.09069026109797595, 0.09873614125013352, 0.11727414971731487, 0.11161073672894872, 0.1053016798615024, 0.10926195124569171, 0.1668445090052374, 0.13100362643348562, 0.14861021678460906, 0.1597184884703442, 0.1703972777954268, 0.1536571464041484, 0.21274717756607497, 0.1577126553447179, 0.17778289692217875, 0.41067801371860546, 0.43734698273738726, 0.46862066207838815, 0.39221448766203615, 0.41783463202763027, 0.4328395179856588, 0.4438323548298344, 0.4822833501481897, 0.4826278681932962, 0.3433992730587172, 0.3441615990342961, 0.33987749587443383, 0.3503815404539863, 0.32444776412018095, 0.3406782878289202, 0.35588497881207926, 0.35848157334592856, 0.32881957612434887, 0.20687612780704456, 0.21476317805421452, 0.19118188338739683, 0.20720838202013414, 0.22689532950204405, 0.19706522310943897, 0.2048548004556734, 0.2102999473590339, 0.2048058029438542, 0.19922743430889167, 0.2137604528357705, 0.1964308170507908, 0.18742924286984874, 0.25777128882776845, 0.18928562755462075, 0.2023242721488182, 0.21173853655341168, 0.24001795766827494, 0.6726255830604337, 0.19796955755725243, 0.19251605048532705, 0.6089964619245598, 0.7234653051791861, 0.1786098411700403, 0.565304270779537, 0.17117816801315844, 0.18106701919554602, 0.6868763099660992, 0.31772736525156975, 0.710391785663764, 0.1979188806567178, 0.2012540407726643, 0.70839429766416, 0.6418310694978038, 0.15061184268873962, 0.2104471192807641, 0.1938161867954813, 0.1886171753911593, 0.21371843256686773, 0.18694601503491992, 0.2054013654456397, 0.18033810841782072, 0.1958685708189951, 0.20650369436260085, 0.1886939359094303, 0.07497160228750599, 0.08931752520059522, 0.08148000773387032, 0.07270439939139905, 0.08257615351081926, 0.08619801121010329, 0.08427141040888397, 0.07555033649169784, 0.08109924643008071]}, "mutation_prompt": null}
{"id": "6da25c2b-ceb7-4cf9-b738-8e4e02b39cfc", "solution": "import numpy as np\n\nclass DE_PSO_Optimizer:\n    def __init__(self, budget, dim, pop_size=50, c1=2.0, c2=2.0, w=0.7, f=0.5, cr=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.c1 = c1\n        self.c2 = c2\n        self.w = w\n        self.f = f\n        self.cr = cr\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(ind) for ind in population])\n\n        def clip_bounds(population):\n            return np.clip(population, -5.0, 5.0)\n\n        def mutate(population, target_idx, f):\n            candidates = list(range(len(population)))\n            candidates.remove(target_idx)\n            a, b, c = np.random.choice(candidates, 3, replace=False)\n            mutant = population[a] + f * (population[b] - population[c])\n            return clip_bounds(mutant)\n\n        def crossover(target, mutant):\n            trial = np.copy(target)\n            crossover_points = np.random.rand(self.dim) < self.cr\n            if not np.any(crossover_points):\n                crossover_points[np.random.randint(0, self.dim)] = True\n            trial[crossover_points] = mutant[crossover_points]\n            return trial\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                mutant = mutate(population, i, self.f)\n                trial = crossover(population[i], mutant)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n        return best_solution\n", "name": "DE_PSO_Optimizer", "description": "Utilizing a novel hybrid algorithm combining Differential Evolution (DE) with Particle Swarm Optimization (PSO) to enhance search and convergence capabilities.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "980dfa97-e041-47dd-8ca3-eeb8d1f89a5c", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6374593667227992, 0.6889401945204383, 0.6840853480293522, 0.6967349454168776, 0.6836546441420059, 0.7013571449635906, 0.6666788686750416, 0.6770639713943923, 0.6863840800439489, 0.12406593503725594, 0.12297465129273255, 0.14058632370994584, 0.1052595427488272, 0.11167461882941265, 0.13007467230320757, 0.12365019145486145, 0.11918356450990464, 0.11488744604263235, 0.10535781951712397, 0.11481994548974239, 0.09822569063089581, 0.11315686760328558, 0.095718207154741, 0.1284589936656112, 0.11755130828269289, 0.12022350325463882, 0.11584820962019216, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.5245512181825833, 0.48590193773332546, 0.4726385713433626, 0.49755790842027525, 0.44050793004714717, 0.4860225812214042, 0.48923614479716393, 0.5626004529120301, 0.5661570195281409, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.49293502300884817, 0.271219826626266, 0.19525206862626898, 0.21208489548313536, 0.28795742039245853, 0.23712476040114228, 0.26456600091702454, 0.42421509633777477, 0.24608110188436494, 0.20232704007066327, 0.3997401225652686, 0.3946916881107272, 0.3321086903701219, 0.17433639000156165, 0.34057707605230425, 0.3185375665222645, 0.44875467299607996, 0.22345913743219759, 0.47817446858601365, 0.4614805127441417, 0.4102169989000195, 0.44686108002553415, 0.43915453207298905, 0.4440057175463302, 0.44242477992667906, 0.45027983433914365, 0.45654985092748845, 0.5447193995815659, 0.587850359461022, 0.5479286276366925, 0.5932712354594567, 0.5281597245465506, 0.576369408068012, 0.5895215243182369, 0.6533175907468016, 0.5580757098786728, 0.1820234248487943, 0.10042102185966051, 0.1094458063176349, 0.18975380863799762, 0.2616899769940645, 0.2704787827836086, 0.14806365752002526, 0.16644564002240947, 0.15630378745456364, 0.3522612834402613, 0.34558762409589794, 0.30832940654158036, 0.3548320422232081, 0.36776095379850093, 0.36386973613151785, 0.32759195569500954, 0.36128975575133904, 0.3295039643056106, 0.7251247130914591, 0.7421906635710509, 0.7496270213295275, 0.7230575132501221, 0.7251778593971584, 0.755831239590211, 0.7223247260970481, 0.7243412267015438, 0.7346211765929873, 0.09425026936346892, 0.10579369271440497, 0.09773862024513658, 0.09069026109797595, 0.09873614125013352, 0.11727414971731487, 0.11161073672894872, 0.1053016798615024, 0.10926195124569171, 0.1668445090052374, 0.13100362643348562, 0.14861021678460906, 0.1597184884703442, 0.1703972777954268, 0.1536571464041484, 0.21274717756607497, 0.1577126553447179, 0.17778289692217875, 0.41067801371860546, 0.43734698273738726, 0.46862066207838815, 0.39221448766203615, 0.41783463202763027, 0.4328395179856588, 0.4438323548298344, 0.4822833501481897, 0.4826278681932962, 0.3433992730587172, 0.3441615990342961, 0.33987749587443383, 0.3503815404539863, 0.32444776412018095, 0.3406782878289202, 0.35588497881207926, 0.35848157334592856, 0.32881957612434887, 0.20687612780704456, 0.21476317805421452, 0.19118188338739683, 0.20720838202013414, 0.22689532950204405, 0.19706522310943897, 0.2048548004556734, 0.2102999473590339, 0.2048058029438542, 0.19922743430889167, 0.2137604528357705, 0.1964308170507908, 0.18742924286984874, 0.25777128882776845, 0.18928562755462075, 0.2023242721488182, 0.21173853655341168, 0.24001795766827494, 0.6726255830604337, 0.19796955755725243, 0.19251605048532705, 0.6089964619245598, 0.7234653051791861, 0.1786098411700403, 0.565304270779537, 0.17117816801315844, 0.18106701919554602, 0.6868763099660992, 0.31772736525156975, 0.710391785663764, 0.1979188806567178, 0.2012540407726643, 0.70839429766416, 0.6418310694978038, 0.15061184268873962, 0.2104471192807641, 0.1938161867954813, 0.1886171753911593, 0.21371843256686773, 0.18694601503491992, 0.2054013654456397, 0.18033810841782072, 0.1958685708189951, 0.20650369436260085, 0.1886939359094303, 0.07497160228750599, 0.08931752520059522, 0.08148000773387032, 0.07270439939139905, 0.08257615351081926, 0.08619801121010329, 0.08427141040888397, 0.07555033649169784, 0.08109924643008071]}, "mutation_prompt": null}
{"id": "76b3c591-e486-41d4-8152-374fd3c8afa1", "solution": "import numpy as np\n\nclass DE_PSO_Optimizer:\n    def __init__(self, budget, dim, pop_size=50, c1=2.0, c2=2.0, w=0.7, f=0.5, cr=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.c1 = c1\n        self.c2 = c2\n        self.w = w\n        self.f = f\n        self.cr = cr\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(ind) for ind in population])\n\n        def clip_bounds(population):\n            return np.clip(population, -5.0, 5.0)\n\n        def mutate(population, target_idx, f):\n            candidates = list(range(len(population)))\n            candidates.remove(target_idx)\n            a, b, c = np.random.choice(candidates, 3, replace=False)\n            mutant = population[a] + f * (population[b] - population[c])\n            return clip_bounds(mutant)\n\n        def crossover(target, mutant):\n            trial = np.copy(target)\n            crossover_points = np.random.rand(self.dim) < self.cr\n            if not np.any(crossover_points):\n                crossover_points[np.random.randint(0, self.dim)] = True\n            trial[crossover_points] = mutant[crossover_points]\n            return trial\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                mutant = mutate(population, i, self.f)\n                trial = crossover(population[i], mutant)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n        return best_solution\n", "name": "DE_PSO_Optimizer", "description": "Utilizing a novel hybrid algorithm combining Differential Evolution (DE) with Particle Swarm Optimization (PSO) to enhance search and convergence capabilities.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "980dfa97-e041-47dd-8ca3-eeb8d1f89a5c", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6374593667227992, 0.6889401945204383, 0.6840853480293522, 0.6967349454168776, 0.6836546441420059, 0.7013571449635906, 0.6666788686750416, 0.6770639713943923, 0.6863840800439489, 0.12406593503725594, 0.12297465129273255, 0.14058632370994584, 0.1052595427488272, 0.11167461882941265, 0.13007467230320757, 0.12365019145486145, 0.11918356450990464, 0.11488744604263235, 0.10535781951712397, 0.11481994548974239, 0.09822569063089581, 0.11315686760328558, 0.095718207154741, 0.1284589936656112, 0.11755130828269289, 0.12022350325463882, 0.11584820962019216, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.5245512181825833, 0.48590193773332546, 0.4726385713433626, 0.49755790842027525, 0.44050793004714717, 0.4860225812214042, 0.48923614479716393, 0.5626004529120301, 0.5661570195281409, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.49293502300884817, 0.271219826626266, 0.19525206862626898, 0.21208489548313536, 0.28795742039245853, 0.23712476040114228, 0.26456600091702454, 0.42421509633777477, 0.24608110188436494, 0.20232704007066327, 0.3997401225652686, 0.3946916881107272, 0.3321086903701219, 0.17433639000156165, 0.34057707605230425, 0.3185375665222645, 0.44875467299607996, 0.22345913743219759, 0.47817446858601365, 0.4614805127441417, 0.4102169989000195, 0.44686108002553415, 0.43915453207298905, 0.4440057175463302, 0.44242477992667906, 0.45027983433914365, 0.45654985092748845, 0.5447193995815659, 0.587850359461022, 0.5479286276366925, 0.5932712354594567, 0.5281597245465506, 0.576369408068012, 0.5895215243182369, 0.6533175907468016, 0.5580757098786728, 0.1820234248487943, 0.10042102185966051, 0.1094458063176349, 0.18975380863799762, 0.2616899769940645, 0.2704787827836086, 0.14806365752002526, 0.16644564002240947, 0.15630378745456364, 0.3522612834402613, 0.34558762409589794, 0.30832940654158036, 0.3548320422232081, 0.36776095379850093, 0.36386973613151785, 0.32759195569500954, 0.36128975575133904, 0.3295039643056106, 0.7251247130914591, 0.7421906635710509, 0.7496270213295275, 0.7230575132501221, 0.7251778593971584, 0.755831239590211, 0.7223247260970481, 0.7243412267015438, 0.7346211765929873, 0.09425026936346892, 0.10579369271440497, 0.09773862024513658, 0.09069026109797595, 0.09873614125013352, 0.11727414971731487, 0.11161073672894872, 0.1053016798615024, 0.10926195124569171, 0.1668445090052374, 0.13100362643348562, 0.14861021678460906, 0.1597184884703442, 0.1703972777954268, 0.1536571464041484, 0.21274717756607497, 0.1577126553447179, 0.17778289692217875, 0.41067801371860546, 0.43734698273738726, 0.46862066207838815, 0.39221448766203615, 0.41783463202763027, 0.4328395179856588, 0.4438323548298344, 0.4822833501481897, 0.4826278681932962, 0.3433992730587172, 0.3441615990342961, 0.33987749587443383, 0.3503815404539863, 0.32444776412018095, 0.3406782878289202, 0.35588497881207926, 0.35848157334592856, 0.32881957612434887, 0.20687612780704456, 0.21476317805421452, 0.19118188338739683, 0.20720838202013414, 0.22689532950204405, 0.19706522310943897, 0.2048548004556734, 0.2102999473590339, 0.2048058029438542, 0.19922743430889167, 0.2137604528357705, 0.1964308170507908, 0.18742924286984874, 0.25777128882776845, 0.18928562755462075, 0.2023242721488182, 0.21173853655341168, 0.24001795766827494, 0.6726255830604337, 0.19796955755725243, 0.19251605048532705, 0.6089964619245598, 0.7234653051791861, 0.1786098411700403, 0.565304270779537, 0.17117816801315844, 0.18106701919554602, 0.6868763099660992, 0.31772736525156975, 0.710391785663764, 0.1979188806567178, 0.2012540407726643, 0.70839429766416, 0.6418310694978038, 0.15061184268873962, 0.2104471192807641, 0.1938161867954813, 0.1886171753911593, 0.21371843256686773, 0.18694601503491992, 0.2054013654456397, 0.18033810841782072, 0.1958685708189951, 0.20650369436260085, 0.1886939359094303, 0.07497160228750599, 0.08931752520059522, 0.08148000773387032, 0.07270439939139905, 0.08257615351081926, 0.08619801121010329, 0.08427141040888397, 0.07555033649169784, 0.08109924643008071]}, "mutation_prompt": null}
{"id": "adcf4230-e671-4cd3-9bd9-9b8c145feacc", "solution": "import numpy as np\n\nclass Adaptive_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, pop_size=50, c1=2.0, c2=2.0, w=0.7, f=0.5, cr=0.9, adapt_rate=0.1):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.c1 = c1\n        self.c2 = c2\n        self.w = w\n        self.f = f\n        self.cr = cr\n        self.adapt_rate = adapt_rate\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(ind) for ind in population])\n\n        def clip_bounds(population):\n            return np.clip(population, -5.0, 5.0)\n\n        def adapt_parameters():\n            nonlocal self.f, self.cr\n            self.f = np.clip(self.f * np.exp(self.adapt_rate * np.random.randn()), 0.1, 0.9)\n            self.cr = np.clip(self.cr * np.exp(self.adapt_rate * np.random.randn()), 0.1, 1.0)\n\n        def mutate(population, target_idx, f):\n            candidates = list(range(len(population)))\n            candidates.remove(target_idx)\n            a, b, c = np.random.choice(candidates, 3, replace=False)\n            mutant = population[a] + f * (population[b] - population[c])\n            return clip_bounds(mutant)\n\n        def crossover(target, mutant):\n            trial = np.copy(target)\n            crossover_points = np.random.rand(self.dim) < self.cr\n            if not np.any(crossover_points):\n                crossover_points[np.random.randint(0, self.dim)] = True\n            trial[crossover_points] = mutant[crossover_points]\n            return trial\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        for _ in range(self.budget - self.pop_size):\n            adapt_parameters()\n            for i in range(self.pop_size):\n                mutant = mutate(population, i, self.f)\n                trial = crossover(population[i], mutant)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n        return best_solution", "name": "Adaptive_DE_PSO_Optimizer", "description": "Enhancing the DE_PSO_Optimizer algorithm through adaptive parameter control for improved convergence and search performance.", "configspace": "", "generation": 19, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 23, 26, '            nonlocal self.f, self.cr\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 23, 26, '            nonlocal self.f, self.cr\\n'))", "parent_id": "980dfa97-e041-47dd-8ca3-eeb8d1f89a5c", "metadata": {}, "mutation_prompt": null}
{"id": "2cc0f362-4f69-4533-b101-533396f829d3", "solution": "import numpy as np\n\nclass DE_PSO_Optimizer:\n    def __init__(self, budget, dim, pop_size=50, c1=2.0, c2=2.0, w=0.7, f=0.5, cr=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.c1 = c1\n        self.c2 = c2\n        self.w = w\n        self.f = f\n        self.cr = cr\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(ind) for ind in population])\n\n        def clip_bounds(population):\n            return np.clip(population, -5.0, 5.0)\n\n        def mutate(population, target_idx, f):\n            candidates = list(range(len(population)))\n            candidates.remove(target_idx)\n            a, b, c = np.random.choice(candidates, 3, replace=False)\n            mutant = population[a] + f * (population[b] - population[c])\n            return clip_bounds(mutant)\n\n        def crossover(target, mutant):\n            trial = np.copy(target)\n            crossover_points = np.random.rand(self.dim) < self.cr\n            if not np.any(crossover_points):\n                crossover_points[np.random.randint(0, self.dim)] = True\n            trial[crossover_points] = mutant[crossover_points]\n            return trial\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                mutant = mutate(population, i, self.f)\n                trial = crossover(population[i], mutant)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n        return best_solution\n", "name": "DE_PSO_Optimizer", "description": "Utilizing a novel hybrid algorithm combining Differential Evolution (DE) with Particle Swarm Optimization (PSO) to enhance search and convergence capabilities.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "980dfa97-e041-47dd-8ca3-eeb8d1f89a5c", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6374593667227992, 0.6889401945204383, 0.6840853480293522, 0.6967349454168776, 0.6836546441420059, 0.7013571449635906, 0.6666788686750416, 0.6770639713943923, 0.6863840800439489, 0.12406593503725594, 0.12297465129273255, 0.14058632370994584, 0.1052595427488272, 0.11167461882941265, 0.13007467230320757, 0.12365019145486145, 0.11918356450990464, 0.11488744604263235, 0.10535781951712397, 0.11481994548974239, 0.09822569063089581, 0.11315686760328558, 0.095718207154741, 0.1284589936656112, 0.11755130828269289, 0.12022350325463882, 0.11584820962019216, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.5245512181825833, 0.48590193773332546, 0.4726385713433626, 0.49755790842027525, 0.44050793004714717, 0.4860225812214042, 0.48923614479716393, 0.5626004529120301, 0.5661570195281409, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.49293502300884817, 0.271219826626266, 0.19525206862626898, 0.21208489548313536, 0.28795742039245853, 0.23712476040114228, 0.26456600091702454, 0.42421509633777477, 0.24608110188436494, 0.20232704007066327, 0.3997401225652686, 0.3946916881107272, 0.3321086903701219, 0.17433639000156165, 0.34057707605230425, 0.3185375665222645, 0.44875467299607996, 0.22345913743219759, 0.47817446858601365, 0.4614805127441417, 0.4102169989000195, 0.44686108002553415, 0.43915453207298905, 0.4440057175463302, 0.44242477992667906, 0.45027983433914365, 0.45654985092748845, 0.5447193995815659, 0.587850359461022, 0.5479286276366925, 0.5932712354594567, 0.5281597245465506, 0.576369408068012, 0.5895215243182369, 0.6533175907468016, 0.5580757098786728, 0.1820234248487943, 0.10042102185966051, 0.1094458063176349, 0.18975380863799762, 0.2616899769940645, 0.2704787827836086, 0.14806365752002526, 0.16644564002240947, 0.15630378745456364, 0.3522612834402613, 0.34558762409589794, 0.30832940654158036, 0.3548320422232081, 0.36776095379850093, 0.36386973613151785, 0.32759195569500954, 0.36128975575133904, 0.3295039643056106, 0.7251247130914591, 0.7421906635710509, 0.7496270213295275, 0.7230575132501221, 0.7251778593971584, 0.755831239590211, 0.7223247260970481, 0.7243412267015438, 0.7346211765929873, 0.09425026936346892, 0.10579369271440497, 0.09773862024513658, 0.09069026109797595, 0.09873614125013352, 0.11727414971731487, 0.11161073672894872, 0.1053016798615024, 0.10926195124569171, 0.1668445090052374, 0.13100362643348562, 0.14861021678460906, 0.1597184884703442, 0.1703972777954268, 0.1536571464041484, 0.21274717756607497, 0.1577126553447179, 0.17778289692217875, 0.41067801371860546, 0.43734698273738726, 0.46862066207838815, 0.39221448766203615, 0.41783463202763027, 0.4328395179856588, 0.4438323548298344, 0.4822833501481897, 0.4826278681932962, 0.3433992730587172, 0.3441615990342961, 0.33987749587443383, 0.3503815404539863, 0.32444776412018095, 0.3406782878289202, 0.35588497881207926, 0.35848157334592856, 0.32881957612434887, 0.20687612780704456, 0.21476317805421452, 0.19118188338739683, 0.20720838202013414, 0.22689532950204405, 0.19706522310943897, 0.2048548004556734, 0.2102999473590339, 0.2048058029438542, 0.19922743430889167, 0.2137604528357705, 0.1964308170507908, 0.18742924286984874, 0.25777128882776845, 0.18928562755462075, 0.2023242721488182, 0.21173853655341168, 0.24001795766827494, 0.6726255830604337, 0.19796955755725243, 0.19251605048532705, 0.6089964619245598, 0.7234653051791861, 0.1786098411700403, 0.565304270779537, 0.17117816801315844, 0.18106701919554602, 0.6868763099660992, 0.31772736525156975, 0.710391785663764, 0.1979188806567178, 0.2012540407726643, 0.70839429766416, 0.6418310694978038, 0.15061184268873962, 0.2104471192807641, 0.1938161867954813, 0.1886171753911593, 0.21371843256686773, 0.18694601503491992, 0.2054013654456397, 0.18033810841782072, 0.1958685708189951, 0.20650369436260085, 0.1886939359094303, 0.07497160228750599, 0.08931752520059522, 0.08148000773387032, 0.07270439939139905, 0.08257615351081926, 0.08619801121010329, 0.08427141040888397, 0.07555033649169784, 0.08109924643008071]}, "mutation_prompt": null}
{"id": "98e2d021-6b4f-4e6f-a380-9a82ccf200b3", "solution": "import numpy as np\n\nclass DE_PSO_Optimizer:\n    def __init__(self, budget, dim, pop_size=50, c1=2.0, c2=2.0, w=0.7, f=0.5, cr=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.c1 = c1\n        self.c2 = c2\n        self.w = w\n        self.f = f\n        self.cr = cr\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(ind) for ind in population])\n\n        def clip_bounds(population):\n            return np.clip(population, -5.0, 5.0)\n\n        def mutate(population, target_idx, f):\n            candidates = list(range(len(population)))\n            candidates.remove(target_idx)\n            a, b, c = np.random.choice(candidates, 3, replace=False)\n            mutant = population[a] + f * (population[b] - population[c])\n            return clip_bounds(mutant)\n\n        def crossover(target, mutant):\n            trial = np.copy(target)\n            crossover_points = np.random.rand(self.dim) < self.cr\n            if not np.any(crossover_points):\n                crossover_points[np.random.randint(0, self.dim)] = True\n            trial[crossover_points] = mutant[crossover_points]\n            return trial\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                mutant = mutate(population, i, self.f)\n                trial = crossover(population[i], mutant)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n        return best_solution\n", "name": "DE_PSO_Optimizer", "description": "Utilizing a novel hybrid algorithm combining Differential Evolution (DE) with Particle Swarm Optimization (PSO) to enhance search and convergence capabilities.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "980dfa97-e041-47dd-8ca3-eeb8d1f89a5c", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6374593667227992, 0.6889401945204383, 0.6840853480293522, 0.6967349454168776, 0.6836546441420059, 0.7013571449635906, 0.6666788686750416, 0.6770639713943923, 0.6863840800439489, 0.12406593503725594, 0.12297465129273255, 0.14058632370994584, 0.1052595427488272, 0.11167461882941265, 0.13007467230320757, 0.12365019145486145, 0.11918356450990464, 0.11488744604263235, 0.10535781951712397, 0.11481994548974239, 0.09822569063089581, 0.11315686760328558, 0.095718207154741, 0.1284589936656112, 0.11755130828269289, 0.12022350325463882, 0.11584820962019216, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.5245512181825833, 0.48590193773332546, 0.4726385713433626, 0.49755790842027525, 0.44050793004714717, 0.4860225812214042, 0.48923614479716393, 0.5626004529120301, 0.5661570195281409, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.49293502300884817, 0.271219826626266, 0.19525206862626898, 0.21208489548313536, 0.28795742039245853, 0.23712476040114228, 0.26456600091702454, 0.42421509633777477, 0.24608110188436494, 0.20232704007066327, 0.3997401225652686, 0.3946916881107272, 0.3321086903701219, 0.17433639000156165, 0.34057707605230425, 0.3185375665222645, 0.44875467299607996, 0.22345913743219759, 0.47817446858601365, 0.4614805127441417, 0.4102169989000195, 0.44686108002553415, 0.43915453207298905, 0.4440057175463302, 0.44242477992667906, 0.45027983433914365, 0.45654985092748845, 0.5447193995815659, 0.587850359461022, 0.5479286276366925, 0.5932712354594567, 0.5281597245465506, 0.576369408068012, 0.5895215243182369, 0.6533175907468016, 0.5580757098786728, 0.1820234248487943, 0.10042102185966051, 0.1094458063176349, 0.18975380863799762, 0.2616899769940645, 0.2704787827836086, 0.14806365752002526, 0.16644564002240947, 0.15630378745456364, 0.3522612834402613, 0.34558762409589794, 0.30832940654158036, 0.3548320422232081, 0.36776095379850093, 0.36386973613151785, 0.32759195569500954, 0.36128975575133904, 0.3295039643056106, 0.7251247130914591, 0.7421906635710509, 0.7496270213295275, 0.7230575132501221, 0.7251778593971584, 0.755831239590211, 0.7223247260970481, 0.7243412267015438, 0.7346211765929873, 0.09425026936346892, 0.10579369271440497, 0.09773862024513658, 0.09069026109797595, 0.09873614125013352, 0.11727414971731487, 0.11161073672894872, 0.1053016798615024, 0.10926195124569171, 0.1668445090052374, 0.13100362643348562, 0.14861021678460906, 0.1597184884703442, 0.1703972777954268, 0.1536571464041484, 0.21274717756607497, 0.1577126553447179, 0.17778289692217875, 0.41067801371860546, 0.43734698273738726, 0.46862066207838815, 0.39221448766203615, 0.41783463202763027, 0.4328395179856588, 0.4438323548298344, 0.4822833501481897, 0.4826278681932962, 0.3433992730587172, 0.3441615990342961, 0.33987749587443383, 0.3503815404539863, 0.32444776412018095, 0.3406782878289202, 0.35588497881207926, 0.35848157334592856, 0.32881957612434887, 0.20687612780704456, 0.21476317805421452, 0.19118188338739683, 0.20720838202013414, 0.22689532950204405, 0.19706522310943897, 0.2048548004556734, 0.2102999473590339, 0.2048058029438542, 0.19922743430889167, 0.2137604528357705, 0.1964308170507908, 0.18742924286984874, 0.25777128882776845, 0.18928562755462075, 0.2023242721488182, 0.21173853655341168, 0.24001795766827494, 0.6726255830604337, 0.19796955755725243, 0.19251605048532705, 0.6089964619245598, 0.7234653051791861, 0.1786098411700403, 0.565304270779537, 0.17117816801315844, 0.18106701919554602, 0.6868763099660992, 0.31772736525156975, 0.710391785663764, 0.1979188806567178, 0.2012540407726643, 0.70839429766416, 0.6418310694978038, 0.15061184268873962, 0.2104471192807641, 0.1938161867954813, 0.1886171753911593, 0.21371843256686773, 0.18694601503491992, 0.2054013654456397, 0.18033810841782072, 0.1958685708189951, 0.20650369436260085, 0.1886939359094303, 0.07497160228750599, 0.08931752520059522, 0.08148000773387032, 0.07270439939139905, 0.08257615351081926, 0.08619801121010329, 0.08427141040888397, 0.07555033649169784, 0.08109924643008071]}, "mutation_prompt": null}
{"id": "ebf6b0f1-fb97-41a7-9b11-97eb0b8b7d09", "solution": "import numpy as np\n\nclass DE_PSO_Optimizer:\n    def __init__(self, budget, dim, pop_size=50, c1=2.0, c2=2.0, w=0.7, f=0.5, cr=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.c1 = c1\n        self.c2 = c2\n        self.w = w\n        self.f = f\n        self.cr = cr\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(ind) for ind in population])\n\n        def clip_bounds(population):\n            return np.clip(population, -5.0, 5.0)\n\n        def mutate(population, target_idx, f):\n            candidates = list(range(len(population)))\n            candidates.remove(target_idx)\n            a, b, c = np.random.choice(candidates, 3, replace=False)\n            mutant = population[a] + f * (population[b] - population[c])\n            return clip_bounds(mutant)\n\n        def crossover(target, mutant):\n            trial = np.copy(target)\n            crossover_points = np.random.rand(self.dim) < self.cr\n            if not np.any(crossover_points):\n                crossover_points[np.random.randint(0, self.dim)] = True\n            trial[crossover_points] = mutant[crossover_points]\n            return trial\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                mutant = mutate(population, i, self.f)\n                trial = crossover(population[i], mutant)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n        return best_solution\n", "name": "DE_PSO_Optimizer", "description": "Utilizing a novel hybrid algorithm combining Differential Evolution (DE) with Particle Swarm Optimization (PSO) to enhance search and convergence capabilities.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "980dfa97-e041-47dd-8ca3-eeb8d1f89a5c", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6374593667227992, 0.6889401945204383, 0.6840853480293522, 0.6967349454168776, 0.6836546441420059, 0.7013571449635906, 0.6666788686750416, 0.6770639713943923, 0.6863840800439489, 0.12406593503725594, 0.12297465129273255, 0.14058632370994584, 0.1052595427488272, 0.11167461882941265, 0.13007467230320757, 0.12365019145486145, 0.11918356450990464, 0.11488744604263235, 0.10535781951712397, 0.11481994548974239, 0.09822569063089581, 0.11315686760328558, 0.095718207154741, 0.1284589936656112, 0.11755130828269289, 0.12022350325463882, 0.11584820962019216, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.5245512181825833, 0.48590193773332546, 0.4726385713433626, 0.49755790842027525, 0.44050793004714717, 0.4860225812214042, 0.48923614479716393, 0.5626004529120301, 0.5661570195281409, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.49293502300884817, 0.271219826626266, 0.19525206862626898, 0.21208489548313536, 0.28795742039245853, 0.23712476040114228, 0.26456600091702454, 0.42421509633777477, 0.24608110188436494, 0.20232704007066327, 0.3997401225652686, 0.3946916881107272, 0.3321086903701219, 0.17433639000156165, 0.34057707605230425, 0.3185375665222645, 0.44875467299607996, 0.22345913743219759, 0.47817446858601365, 0.4614805127441417, 0.4102169989000195, 0.44686108002553415, 0.43915453207298905, 0.4440057175463302, 0.44242477992667906, 0.45027983433914365, 0.45654985092748845, 0.5447193995815659, 0.587850359461022, 0.5479286276366925, 0.5932712354594567, 0.5281597245465506, 0.576369408068012, 0.5895215243182369, 0.6533175907468016, 0.5580757098786728, 0.1820234248487943, 0.10042102185966051, 0.1094458063176349, 0.18975380863799762, 0.2616899769940645, 0.2704787827836086, 0.14806365752002526, 0.16644564002240947, 0.15630378745456364, 0.3522612834402613, 0.34558762409589794, 0.30832940654158036, 0.3548320422232081, 0.36776095379850093, 0.36386973613151785, 0.32759195569500954, 0.36128975575133904, 0.3295039643056106, 0.7251247130914591, 0.7421906635710509, 0.7496270213295275, 0.7230575132501221, 0.7251778593971584, 0.755831239590211, 0.7223247260970481, 0.7243412267015438, 0.7346211765929873, 0.09425026936346892, 0.10579369271440497, 0.09773862024513658, 0.09069026109797595, 0.09873614125013352, 0.11727414971731487, 0.11161073672894872, 0.1053016798615024, 0.10926195124569171, 0.1668445090052374, 0.13100362643348562, 0.14861021678460906, 0.1597184884703442, 0.1703972777954268, 0.1536571464041484, 0.21274717756607497, 0.1577126553447179, 0.17778289692217875, 0.41067801371860546, 0.43734698273738726, 0.46862066207838815, 0.39221448766203615, 0.41783463202763027, 0.4328395179856588, 0.4438323548298344, 0.4822833501481897, 0.4826278681932962, 0.3433992730587172, 0.3441615990342961, 0.33987749587443383, 0.3503815404539863, 0.32444776412018095, 0.3406782878289202, 0.35588497881207926, 0.35848157334592856, 0.32881957612434887, 0.20687612780704456, 0.21476317805421452, 0.19118188338739683, 0.20720838202013414, 0.22689532950204405, 0.19706522310943897, 0.2048548004556734, 0.2102999473590339, 0.2048058029438542, 0.19922743430889167, 0.2137604528357705, 0.1964308170507908, 0.18742924286984874, 0.25777128882776845, 0.18928562755462075, 0.2023242721488182, 0.21173853655341168, 0.24001795766827494, 0.6726255830604337, 0.19796955755725243, 0.19251605048532705, 0.6089964619245598, 0.7234653051791861, 0.1786098411700403, 0.565304270779537, 0.17117816801315844, 0.18106701919554602, 0.6868763099660992, 0.31772736525156975, 0.710391785663764, 0.1979188806567178, 0.2012540407726643, 0.70839429766416, 0.6418310694978038, 0.15061184268873962, 0.2104471192807641, 0.1938161867954813, 0.1886171753911593, 0.21371843256686773, 0.18694601503491992, 0.2054013654456397, 0.18033810841782072, 0.1958685708189951, 0.20650369436260085, 0.1886939359094303, 0.07497160228750599, 0.08931752520059522, 0.08148000773387032, 0.07270439939139905, 0.08257615351081926, 0.08619801121010329, 0.08427141040888397, 0.07555033649169784, 0.08109924643008071]}, "mutation_prompt": null}
{"id": "d59a5a52-ace4-46b1-bbae-bbb4603e013b", "solution": "import numpy as np\n\nclass DE_PSO_Optimizer:\n    def __init__(self, budget, dim, pop_size=50, c1=2.0, c2=2.0, w=0.7, f=0.5, cr=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.c1 = c1\n        self.c2 = c2\n        self.w = w\n        self.f = f\n        self.cr = cr\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(ind) for ind in population])\n\n        def clip_bounds(population):\n            return np.clip(population, -5.0, 5.0)\n\n        def mutate(population, target_idx, f):\n            candidates = list(range(len(population)))\n            candidates.remove(target_idx)\n            a, b, c = np.random.choice(candidates, 3, replace=False)\n            mutant = population[a] + f * (population[b] - population[c])\n            return clip_bounds(mutant)\n\n        def crossover(target, mutant):\n            trial = np.copy(target)\n            crossover_points = np.random.rand(self.dim) < self.cr\n            if not np.any(crossover_points):\n                crossover_points[np.random.randint(0, self.dim)] = True\n            trial[crossover_points] = mutant[crossover_points]\n            return trial\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                mutant = mutate(population, i, self.f)\n                trial = crossover(population[i], mutant)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n        return best_solution\n", "name": "DE_PSO_Optimizer", "description": "Utilizing a novel hybrid algorithm combining Differential Evolution (DE) with Particle Swarm Optimization (PSO) to enhance search and convergence capabilities.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "980dfa97-e041-47dd-8ca3-eeb8d1f89a5c", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6374593667227992, 0.6889401945204383, 0.6840853480293522, 0.6967349454168776, 0.6836546441420059, 0.7013571449635906, 0.6666788686750416, 0.6770639713943923, 0.6863840800439489, 0.12406593503725594, 0.12297465129273255, 0.14058632370994584, 0.1052595427488272, 0.11167461882941265, 0.13007467230320757, 0.12365019145486145, 0.11918356450990464, 0.11488744604263235, 0.10535781951712397, 0.11481994548974239, 0.09822569063089581, 0.11315686760328558, 0.095718207154741, 0.1284589936656112, 0.11755130828269289, 0.12022350325463882, 0.11584820962019216, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.5245512181825833, 0.48590193773332546, 0.4726385713433626, 0.49755790842027525, 0.44050793004714717, 0.4860225812214042, 0.48923614479716393, 0.5626004529120301, 0.5661570195281409, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.49293502300884817, 0.271219826626266, 0.19525206862626898, 0.21208489548313536, 0.28795742039245853, 0.23712476040114228, 0.26456600091702454, 0.42421509633777477, 0.24608110188436494, 0.20232704007066327, 0.3997401225652686, 0.3946916881107272, 0.3321086903701219, 0.17433639000156165, 0.34057707605230425, 0.3185375665222645, 0.44875467299607996, 0.22345913743219759, 0.47817446858601365, 0.4614805127441417, 0.4102169989000195, 0.44686108002553415, 0.43915453207298905, 0.4440057175463302, 0.44242477992667906, 0.45027983433914365, 0.45654985092748845, 0.5447193995815659, 0.587850359461022, 0.5479286276366925, 0.5932712354594567, 0.5281597245465506, 0.576369408068012, 0.5895215243182369, 0.6533175907468016, 0.5580757098786728, 0.1820234248487943, 0.10042102185966051, 0.1094458063176349, 0.18975380863799762, 0.2616899769940645, 0.2704787827836086, 0.14806365752002526, 0.16644564002240947, 0.15630378745456364, 0.3522612834402613, 0.34558762409589794, 0.30832940654158036, 0.3548320422232081, 0.36776095379850093, 0.36386973613151785, 0.32759195569500954, 0.36128975575133904, 0.3295039643056106, 0.7251247130914591, 0.7421906635710509, 0.7496270213295275, 0.7230575132501221, 0.7251778593971584, 0.755831239590211, 0.7223247260970481, 0.7243412267015438, 0.7346211765929873, 0.09425026936346892, 0.10579369271440497, 0.09773862024513658, 0.09069026109797595, 0.09873614125013352, 0.11727414971731487, 0.11161073672894872, 0.1053016798615024, 0.10926195124569171, 0.1668445090052374, 0.13100362643348562, 0.14861021678460906, 0.1597184884703442, 0.1703972777954268, 0.1536571464041484, 0.21274717756607497, 0.1577126553447179, 0.17778289692217875, 0.41067801371860546, 0.43734698273738726, 0.46862066207838815, 0.39221448766203615, 0.41783463202763027, 0.4328395179856588, 0.4438323548298344, 0.4822833501481897, 0.4826278681932962, 0.3433992730587172, 0.3441615990342961, 0.33987749587443383, 0.3503815404539863, 0.32444776412018095, 0.3406782878289202, 0.35588497881207926, 0.35848157334592856, 0.32881957612434887, 0.20687612780704456, 0.21476317805421452, 0.19118188338739683, 0.20720838202013414, 0.22689532950204405, 0.19706522310943897, 0.2048548004556734, 0.2102999473590339, 0.2048058029438542, 0.19922743430889167, 0.2137604528357705, 0.1964308170507908, 0.18742924286984874, 0.25777128882776845, 0.18928562755462075, 0.2023242721488182, 0.21173853655341168, 0.24001795766827494, 0.6726255830604337, 0.19796955755725243, 0.19251605048532705, 0.6089964619245598, 0.7234653051791861, 0.1786098411700403, 0.565304270779537, 0.17117816801315844, 0.18106701919554602, 0.6868763099660992, 0.31772736525156975, 0.710391785663764, 0.1979188806567178, 0.2012540407726643, 0.70839429766416, 0.6418310694978038, 0.15061184268873962, 0.2104471192807641, 0.1938161867954813, 0.1886171753911593, 0.21371843256686773, 0.18694601503491992, 0.2054013654456397, 0.18033810841782072, 0.1958685708189951, 0.20650369436260085, 0.1886939359094303, 0.07497160228750599, 0.08931752520059522, 0.08148000773387032, 0.07270439939139905, 0.08257615351081926, 0.08619801121010329, 0.08427141040888397, 0.07555033649169784, 0.08109924643008071]}, "mutation_prompt": null}
{"id": "2400b1fc-3f9a-446c-a2db-090f3f8cdc15", "solution": "import numpy as np\n\nclass DE_PSO_Optimizer:\n    def __init__(self, budget, dim, pop_size=50, c1=2.0, c2=2.0, w=0.7, f=0.5, cr=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.c1 = c1\n        self.c2 = c2\n        self.w = w\n        self.f = f\n        self.cr = cr\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(ind) for ind in population])\n\n        def clip_bounds(population):\n            return np.clip(population, -5.0, 5.0)\n\n        def mutate(population, target_idx, f):\n            candidates = list(range(len(population)))\n            candidates.remove(target_idx)\n            a, b, c = np.random.choice(candidates, 3, replace=False)\n            mutant = population[a] + f * (population[b] - population[c])\n            return clip_bounds(mutant)\n\n        def crossover(target, mutant):\n            trial = np.copy(target)\n            crossover_points = np.random.rand(self.dim) < self.cr\n            if not np.any(crossover_points):\n                crossover_points[np.random.randint(0, self.dim)] = True\n            trial[crossover_points] = mutant[crossover_points]\n            return trial\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                mutant = mutate(population, i, self.f)\n                trial = crossover(population[i], mutant)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n        return best_solution\n", "name": "DE_PSO_Optimizer", "description": "Utilizing a novel hybrid algorithm combining Differential Evolution (DE) with Particle Swarm Optimization (PSO) to enhance search and convergence capabilities.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "980dfa97-e041-47dd-8ca3-eeb8d1f89a5c", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6374593667227992, 0.6889401945204383, 0.6840853480293522, 0.6967349454168776, 0.6836546441420059, 0.7013571449635906, 0.6666788686750416, 0.6770639713943923, 0.6863840800439489, 0.12406593503725594, 0.12297465129273255, 0.14058632370994584, 0.1052595427488272, 0.11167461882941265, 0.13007467230320757, 0.12365019145486145, 0.11918356450990464, 0.11488744604263235, 0.10535781951712397, 0.11481994548974239, 0.09822569063089581, 0.11315686760328558, 0.095718207154741, 0.1284589936656112, 0.11755130828269289, 0.12022350325463882, 0.11584820962019216, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.5245512181825833, 0.48590193773332546, 0.4726385713433626, 0.49755790842027525, 0.44050793004714717, 0.4860225812214042, 0.48923614479716393, 0.5626004529120301, 0.5661570195281409, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.49293502300884817, 0.271219826626266, 0.19525206862626898, 0.21208489548313536, 0.28795742039245853, 0.23712476040114228, 0.26456600091702454, 0.42421509633777477, 0.24608110188436494, 0.20232704007066327, 0.3997401225652686, 0.3946916881107272, 0.3321086903701219, 0.17433639000156165, 0.34057707605230425, 0.3185375665222645, 0.44875467299607996, 0.22345913743219759, 0.47817446858601365, 0.4614805127441417, 0.4102169989000195, 0.44686108002553415, 0.43915453207298905, 0.4440057175463302, 0.44242477992667906, 0.45027983433914365, 0.45654985092748845, 0.5447193995815659, 0.587850359461022, 0.5479286276366925, 0.5932712354594567, 0.5281597245465506, 0.576369408068012, 0.5895215243182369, 0.6533175907468016, 0.5580757098786728, 0.1820234248487943, 0.10042102185966051, 0.1094458063176349, 0.18975380863799762, 0.2616899769940645, 0.2704787827836086, 0.14806365752002526, 0.16644564002240947, 0.15630378745456364, 0.3522612834402613, 0.34558762409589794, 0.30832940654158036, 0.3548320422232081, 0.36776095379850093, 0.36386973613151785, 0.32759195569500954, 0.36128975575133904, 0.3295039643056106, 0.7251247130914591, 0.7421906635710509, 0.7496270213295275, 0.7230575132501221, 0.7251778593971584, 0.755831239590211, 0.7223247260970481, 0.7243412267015438, 0.7346211765929873, 0.09425026936346892, 0.10579369271440497, 0.09773862024513658, 0.09069026109797595, 0.09873614125013352, 0.11727414971731487, 0.11161073672894872, 0.1053016798615024, 0.10926195124569171, 0.1668445090052374, 0.13100362643348562, 0.14861021678460906, 0.1597184884703442, 0.1703972777954268, 0.1536571464041484, 0.21274717756607497, 0.1577126553447179, 0.17778289692217875, 0.41067801371860546, 0.43734698273738726, 0.46862066207838815, 0.39221448766203615, 0.41783463202763027, 0.4328395179856588, 0.4438323548298344, 0.4822833501481897, 0.4826278681932962, 0.3433992730587172, 0.3441615990342961, 0.33987749587443383, 0.3503815404539863, 0.32444776412018095, 0.3406782878289202, 0.35588497881207926, 0.35848157334592856, 0.32881957612434887, 0.20687612780704456, 0.21476317805421452, 0.19118188338739683, 0.20720838202013414, 0.22689532950204405, 0.19706522310943897, 0.2048548004556734, 0.2102999473590339, 0.2048058029438542, 0.19922743430889167, 0.2137604528357705, 0.1964308170507908, 0.18742924286984874, 0.25777128882776845, 0.18928562755462075, 0.2023242721488182, 0.21173853655341168, 0.24001795766827494, 0.6726255830604337, 0.19796955755725243, 0.19251605048532705, 0.6089964619245598, 0.7234653051791861, 0.1786098411700403, 0.565304270779537, 0.17117816801315844, 0.18106701919554602, 0.6868763099660992, 0.31772736525156975, 0.710391785663764, 0.1979188806567178, 0.2012540407726643, 0.70839429766416, 0.6418310694978038, 0.15061184268873962, 0.2104471192807641, 0.1938161867954813, 0.1886171753911593, 0.21371843256686773, 0.18694601503491992, 0.2054013654456397, 0.18033810841782072, 0.1958685708189951, 0.20650369436260085, 0.1886939359094303, 0.07497160228750599, 0.08931752520059522, 0.08148000773387032, 0.07270439939139905, 0.08257615351081926, 0.08619801121010329, 0.08427141040888397, 0.07555033649169784, 0.08109924643008071]}, "mutation_prompt": null}
{"id": "2b2c4cc4-1981-4f1a-acdd-b95b5c6364cb", "solution": "import numpy as np\n\nclass Dynamic_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, pop_size=50, c1=2.0, c2=2.0, w=0.7, f=0.5, cr=0.9, f_min=0.2, f_max=0.8, cr_min=0.1, cr_max=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.c1 = c1\n        self.c2 = c2\n        self.w = w\n        self.f = f\n        self.cr = cr\n        self.f_min = f_min\n        self.f_max = f_max\n        self.cr_min = cr_min\n        self.cr_max = cr_max\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(ind) for ind in population])\n\n        def clip_bounds(population):\n            return np.clip(population, -5.0, 5.0)\n\n        def adapt_parameters(iteration):\n            nonlocal self.f, self.cr\n            self.f = self.f_max - (self.f_max - self.f_min) * iteration / self.budget\n            self.cr = self.cr_max - (self.cr_max - self.cr_min) * iteration / self.budget\n\n        def mutate(population, target_idx):\n            candidates = list(range(len(population)))\n            candidates.remove(target_idx)\n            a, b, c = np.random.choice(candidates, 3, replace=False)\n            f = np.random.normal(self.f, 0.1)  # Adaptive scaling of differential weight\n            mutant = population[a] + f * (population[b] - population[c])\n            return clip_bounds(mutant)\n\n        def crossover(target, mutant):\n            trial = np.copy(target)\n            crossover_points = np.random.rand(self.dim) < self.cr\n            if not np.any(crossover_points):\n                crossover_points[np.random.randint(0, self.dim)] = True\n            trial[crossover_points] = mutant[crossover_points]\n            return trial\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        for it in range(self.budget - self.pop_size):\n            adapt_parameters(it)\n            for i in range(self.pop_size):\n                mutant = mutate(population, i)\n                trial = crossover(population[i], mutant)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n        return best_solution", "name": "Dynamic_DE_PSO_Optimizer", "description": "Enhancing DE_PSO_Optimizer by incorporating a dynamic mutation strategy based on adaptive scaling of differential weight and crossover probability.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 26, 26, '            nonlocal self.f, self.cr\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 26, 26, '            nonlocal self.f, self.cr\\n'))", "parent_id": "980dfa97-e041-47dd-8ca3-eeb8d1f89a5c", "metadata": {}, "mutation_prompt": null}
{"id": "762ca915-ea6e-4e8c-b25d-c0d58f72d550", "solution": "import numpy as np\n\nclass DE_PSO_Optimizer:\n    def __init__(self, budget, dim, pop_size=50, c1=2.0, c2=2.0, w=0.7, f=0.5, cr=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.c1 = c1\n        self.c2 = c2\n        self.w = w\n        self.f = f\n        self.cr = cr\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(ind) for ind in population])\n\n        def clip_bounds(population):\n            return np.clip(population, -5.0, 5.0)\n\n        def mutate(population, target_idx, f):\n            candidates = list(range(len(population)))\n            candidates.remove(target_idx)\n            a, b, c = np.random.choice(candidates, 3, replace=False)\n            mutant = population[a] + f * (population[b] - population[c])\n            return clip_bounds(mutant)\n\n        def crossover(target, mutant):\n            trial = np.copy(target)\n            crossover_points = np.random.rand(self.dim) < self.cr\n            if not np.any(crossover_points):\n                crossover_points[np.random.randint(0, self.dim)] = True\n            trial[crossover_points] = mutant[crossover_points]\n            return trial\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                mutant = mutate(population, i, self.f)\n                trial = crossover(population[i], mutant)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n        return best_solution\n", "name": "DE_PSO_Optimizer", "description": "Utilizing a novel hybrid algorithm combining Differential Evolution (DE) with Particle Swarm Optimization (PSO) to enhance search and convergence capabilities.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "980dfa97-e041-47dd-8ca3-eeb8d1f89a5c", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6374593667227992, 0.6889401945204383, 0.6840853480293522, 0.6967349454168776, 0.6836546441420059, 0.7013571449635906, 0.6666788686750416, 0.6770639713943923, 0.6863840800439489, 0.12406593503725594, 0.12297465129273255, 0.14058632370994584, 0.1052595427488272, 0.11167461882941265, 0.13007467230320757, 0.12365019145486145, 0.11918356450990464, 0.11488744604263235, 0.10535781951712397, 0.11481994548974239, 0.09822569063089581, 0.11315686760328558, 0.095718207154741, 0.1284589936656112, 0.11755130828269289, 0.12022350325463882, 0.11584820962019216, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.5245512181825833, 0.48590193773332546, 0.4726385713433626, 0.49755790842027525, 0.44050793004714717, 0.4860225812214042, 0.48923614479716393, 0.5626004529120301, 0.5661570195281409, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.49293502300884817, 0.271219826626266, 0.19525206862626898, 0.21208489548313536, 0.28795742039245853, 0.23712476040114228, 0.26456600091702454, 0.42421509633777477, 0.24608110188436494, 0.20232704007066327, 0.3997401225652686, 0.3946916881107272, 0.3321086903701219, 0.17433639000156165, 0.34057707605230425, 0.3185375665222645, 0.44875467299607996, 0.22345913743219759, 0.47817446858601365, 0.4614805127441417, 0.4102169989000195, 0.44686108002553415, 0.43915453207298905, 0.4440057175463302, 0.44242477992667906, 0.45027983433914365, 0.45654985092748845, 0.5447193995815659, 0.587850359461022, 0.5479286276366925, 0.5932712354594567, 0.5281597245465506, 0.576369408068012, 0.5895215243182369, 0.6533175907468016, 0.5580757098786728, 0.1820234248487943, 0.10042102185966051, 0.1094458063176349, 0.18975380863799762, 0.2616899769940645, 0.2704787827836086, 0.14806365752002526, 0.16644564002240947, 0.15630378745456364, 0.3522612834402613, 0.34558762409589794, 0.30832940654158036, 0.3548320422232081, 0.36776095379850093, 0.36386973613151785, 0.32759195569500954, 0.36128975575133904, 0.3295039643056106, 0.7251247130914591, 0.7421906635710509, 0.7496270213295275, 0.7230575132501221, 0.7251778593971584, 0.755831239590211, 0.7223247260970481, 0.7243412267015438, 0.7346211765929873, 0.09425026936346892, 0.10579369271440497, 0.09773862024513658, 0.09069026109797595, 0.09873614125013352, 0.11727414971731487, 0.11161073672894872, 0.1053016798615024, 0.10926195124569171, 0.1668445090052374, 0.13100362643348562, 0.14861021678460906, 0.1597184884703442, 0.1703972777954268, 0.1536571464041484, 0.21274717756607497, 0.1577126553447179, 0.17778289692217875, 0.41067801371860546, 0.43734698273738726, 0.46862066207838815, 0.39221448766203615, 0.41783463202763027, 0.4328395179856588, 0.4438323548298344, 0.4822833501481897, 0.4826278681932962, 0.3433992730587172, 0.3441615990342961, 0.33987749587443383, 0.3503815404539863, 0.32444776412018095, 0.3406782878289202, 0.35588497881207926, 0.35848157334592856, 0.32881957612434887, 0.20687612780704456, 0.21476317805421452, 0.19118188338739683, 0.20720838202013414, 0.22689532950204405, 0.19706522310943897, 0.2048548004556734, 0.2102999473590339, 0.2048058029438542, 0.19922743430889167, 0.2137604528357705, 0.1964308170507908, 0.18742924286984874, 0.25777128882776845, 0.18928562755462075, 0.2023242721488182, 0.21173853655341168, 0.24001795766827494, 0.6726255830604337, 0.19796955755725243, 0.19251605048532705, 0.6089964619245598, 0.7234653051791861, 0.1786098411700403, 0.565304270779537, 0.17117816801315844, 0.18106701919554602, 0.6868763099660992, 0.31772736525156975, 0.710391785663764, 0.1979188806567178, 0.2012540407726643, 0.70839429766416, 0.6418310694978038, 0.15061184268873962, 0.2104471192807641, 0.1938161867954813, 0.1886171753911593, 0.21371843256686773, 0.18694601503491992, 0.2054013654456397, 0.18033810841782072, 0.1958685708189951, 0.20650369436260085, 0.1886939359094303, 0.07497160228750599, 0.08931752520059522, 0.08148000773387032, 0.07270439939139905, 0.08257615351081926, 0.08619801121010329, 0.08427141040888397, 0.07555033649169784, 0.08109924643008071]}, "mutation_prompt": null}
{"id": "db587f76-e72f-49fb-a7a7-71b57de0ba6a", "solution": "import numpy as np\n\nclass DE_PSO_Optimizer:\n    def __init__(self, budget, dim, pop_size=50, c1=2.0, c2=2.0, w=0.7, f=0.5, cr=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.c1 = c1\n        self.c2 = c2\n        self.w = w\n        self.f = f\n        self.cr = cr\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(ind) for ind in population])\n\n        def clip_bounds(population):\n            return np.clip(population, -5.0, 5.0)\n\n        def mutate(population, target_idx, f):\n            candidates = list(range(len(population)))\n            candidates.remove(target_idx)\n            a, b, c = np.random.choice(candidates, 3, replace=False)\n            mutant = population[a] + f * (population[b] - population[c])\n            return clip_bounds(mutant)\n\n        def crossover(target, mutant):\n            trial = np.copy(target)\n            crossover_points = np.random.rand(self.dim) < self.cr\n            if not np.any(crossover_points):\n                crossover_points[np.random.randint(0, self.dim)] = True\n            trial[crossover_points] = mutant[crossover_points]\n            return trial\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                mutant = mutate(population, i, self.f)\n                trial = crossover(population[i], mutant)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n        return best_solution\n", "name": "DE_PSO_Optimizer", "description": "Utilizing a novel hybrid algorithm combining Differential Evolution (DE) with Particle Swarm Optimization (PSO) to enhance search and convergence capabilities.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "980dfa97-e041-47dd-8ca3-eeb8d1f89a5c", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6374593667227992, 0.6889401945204383, 0.6840853480293522, 0.6967349454168776, 0.6836546441420059, 0.7013571449635906, 0.6666788686750416, 0.6770639713943923, 0.6863840800439489, 0.12406593503725594, 0.12297465129273255, 0.14058632370994584, 0.1052595427488272, 0.11167461882941265, 0.13007467230320757, 0.12365019145486145, 0.11918356450990464, 0.11488744604263235, 0.10535781951712397, 0.11481994548974239, 0.09822569063089581, 0.11315686760328558, 0.095718207154741, 0.1284589936656112, 0.11755130828269289, 0.12022350325463882, 0.11584820962019216, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.5245512181825833, 0.48590193773332546, 0.4726385713433626, 0.49755790842027525, 0.44050793004714717, 0.4860225812214042, 0.48923614479716393, 0.5626004529120301, 0.5661570195281409, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.49293502300884817, 0.271219826626266, 0.19525206862626898, 0.21208489548313536, 0.28795742039245853, 0.23712476040114228, 0.26456600091702454, 0.42421509633777477, 0.24608110188436494, 0.20232704007066327, 0.3997401225652686, 0.3946916881107272, 0.3321086903701219, 0.17433639000156165, 0.34057707605230425, 0.3185375665222645, 0.44875467299607996, 0.22345913743219759, 0.47817446858601365, 0.4614805127441417, 0.4102169989000195, 0.44686108002553415, 0.43915453207298905, 0.4440057175463302, 0.44242477992667906, 0.45027983433914365, 0.45654985092748845, 0.5447193995815659, 0.587850359461022, 0.5479286276366925, 0.5932712354594567, 0.5281597245465506, 0.576369408068012, 0.5895215243182369, 0.6533175907468016, 0.5580757098786728, 0.1820234248487943, 0.10042102185966051, 0.1094458063176349, 0.18975380863799762, 0.2616899769940645, 0.2704787827836086, 0.14806365752002526, 0.16644564002240947, 0.15630378745456364, 0.3522612834402613, 0.34558762409589794, 0.30832940654158036, 0.3548320422232081, 0.36776095379850093, 0.36386973613151785, 0.32759195569500954, 0.36128975575133904, 0.3295039643056106, 0.7251247130914591, 0.7421906635710509, 0.7496270213295275, 0.7230575132501221, 0.7251778593971584, 0.755831239590211, 0.7223247260970481, 0.7243412267015438, 0.7346211765929873, 0.09425026936346892, 0.10579369271440497, 0.09773862024513658, 0.09069026109797595, 0.09873614125013352, 0.11727414971731487, 0.11161073672894872, 0.1053016798615024, 0.10926195124569171, 0.1668445090052374, 0.13100362643348562, 0.14861021678460906, 0.1597184884703442, 0.1703972777954268, 0.1536571464041484, 0.21274717756607497, 0.1577126553447179, 0.17778289692217875, 0.41067801371860546, 0.43734698273738726, 0.46862066207838815, 0.39221448766203615, 0.41783463202763027, 0.4328395179856588, 0.4438323548298344, 0.4822833501481897, 0.4826278681932962, 0.3433992730587172, 0.3441615990342961, 0.33987749587443383, 0.3503815404539863, 0.32444776412018095, 0.3406782878289202, 0.35588497881207926, 0.35848157334592856, 0.32881957612434887, 0.20687612780704456, 0.21476317805421452, 0.19118188338739683, 0.20720838202013414, 0.22689532950204405, 0.19706522310943897, 0.2048548004556734, 0.2102999473590339, 0.2048058029438542, 0.19922743430889167, 0.2137604528357705, 0.1964308170507908, 0.18742924286984874, 0.25777128882776845, 0.18928562755462075, 0.2023242721488182, 0.21173853655341168, 0.24001795766827494, 0.6726255830604337, 0.19796955755725243, 0.19251605048532705, 0.6089964619245598, 0.7234653051791861, 0.1786098411700403, 0.565304270779537, 0.17117816801315844, 0.18106701919554602, 0.6868763099660992, 0.31772736525156975, 0.710391785663764, 0.1979188806567178, 0.2012540407726643, 0.70839429766416, 0.6418310694978038, 0.15061184268873962, 0.2104471192807641, 0.1938161867954813, 0.1886171753911593, 0.21371843256686773, 0.18694601503491992, 0.2054013654456397, 0.18033810841782072, 0.1958685708189951, 0.20650369436260085, 0.1886939359094303, 0.07497160228750599, 0.08931752520059522, 0.08148000773387032, 0.07270439939139905, 0.08257615351081926, 0.08619801121010329, 0.08427141040888397, 0.07555033649169784, 0.08109924643008071]}, "mutation_prompt": null}
{"id": "cb4d58b1-0595-4204-a715-b60e2900e531", "solution": "import numpy as np\n\nclass Adaptive_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, pop_size=50, c1=2.0, c2=2.0, w=0.7, f=0.5, cr=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.c1 = c1\n        self.c2 = c2\n        self.w = w\n        self.f = f\n        self.cr = cr\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(ind) for ind in population])\n\n        def clip_bounds(population):\n            return np.clip(population, -5.0, 5.0)\n\n        def mutate(population, target_idx, f):\n            candidates = list(range(len(population)))\n            candidates.remove(target_idx)\n            a, b, c = np.random.choice(candidates, 3, replace=False)\n            mutant = population[a] + f * (population[b] - population[c])\n            return clip_bounds(mutant)\n\n        def crossover(target, mutant):\n            trial = np.copy(target)\n            crossover_points = np.random.rand(self.dim) < self.cr\n            if not np.any(crossover_points):\n                crossover_points[np.random.randint(0, self.dim)] = True\n            trial[crossover_points] = mutant[crossover_points]\n            return trial\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                self.f = np.clip(np.random.normal(self.f, 0.1), 0.1, 0.9)  # Adapt F\n                self.cr = np.clip(np.random.normal(self.cr, 0.1), 0.1, 0.9)  # Adapt CR\n                mutant = mutate(population, i, self.f)\n                trial = crossover(population[i], mutant)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n        return best_solution", "name": "Adaptive_DE_PSO_Optimizer", "description": "Enhancing DE_PSO_Optimizer by incorporating a self-adaptive strategy to dynamically adjust control parameters during optimization.", "configspace": "", "generation": 28, "fitness": 0.30869011085342946, "feedback": "The algorithm Adaptive_DE_PSO_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.23.", "error": "", "parent_id": "980dfa97-e041-47dd-8ca3-eeb8d1f89a5c", "metadata": {"aucs": [0.7767982580483236, 0.7709899135698841, 0.7839159793376422, 0.7983545622176085, 0.784269074726529, 0.7769540979509082, 0.790718821886448, 0.8042901689842435, 0.7752527081021865, 0.5990030362802612, 0.6221897292067196, 0.5980887337749468, 0.597082242838977, 0.6202677681338444, 0.5993028980404722, 0.621014828581999, 0.6475357776041957, 0.5945572697814756, 0.4126981355828828, 0.4857417403313493, 0.37936231487900807, 0.3438711060785479, 0.41747796885667887, 0.3673670430103052, 0.5076008226636531, 0.4542071194086651, 0.39204130009733984, 0.16495408353565266, 0.39513842746588823, 0.3151244807451239, 0.36250097312325225, 0.33389923805430977, 0.15830391601802296, 0.30266326298723023, 0.35081742355052625, 0.27951211101506424, 0.9520486632163814, 0.9551172300174056, 0.9510028258065182, 0.9499397181818299, 0.9377284139165597, 0.9540271509322618, 0.9494790412889054, 0.964962694477815, 0.9234361250508517, 0.3027779240606102, 0.32707277776743904, 0.30728641985217386, 0.3451164756275018, 0.33073927023396366, 0.3375997992348597, 0.31396030055489277, 0.2959415074718007, 0.30602629887272836, 0.46052482483547696, 0.4689797960065246, 0.5899378455345896, 0.5663528758766454, 0.5906254192925567, 0.5723101501011598, 0.4453156352727671, 0.49411827699065525, 0.6001557926604968, 0.19262393678456224, 0.17858807277829547, 0.18611873186585204, 0.21504252177965155, 0.22479784193469032, 0.18166655900434592, 0.17189513727067263, 0.16339773745926145, 0.15009998444299677, 0.15554787744034748, 0.16524650544867803, 0.17957159862670757, 0.16089199634669016, 0.16276214378392784, 0.1796783402918123, 0.15853265801224792, 0.14959207780603478, 0.14675526148567752, 0.07852555173379039, 0.03899931498891551, 0.010090377097327297, 0.02912496236407036, 0.027770673959045977, 0.03076485653739469, 0.051495357259009, 0.05137706160366673, 0.0279239698166055, 0.17847000598530283, 0.1812019353660751, 0.14452507532561176, 0.14837360416552037, 0.16596724548152764, 0.10836396273480153, 0.19984042930182855, 0.21916245821072255, 0.165543111988385, 0.023936411905777777, 0.014746021169915746, 0.015071928276349844, 0.04455175957614954, 0.10180042063486294, 0.035390109686878723, 0.04237924702928719, 0.036765502351553514, 0.04598866156320913, 0.13907161947725488, 0.1250835600789011, 0.12999069947870323, 0.16460995221090957, 0.15854673671785002, 0.14532166237159105, 0.15048205961888483, 0.14725598539677398, 0.13150661808106545, 0.5164467495993018, 0.517586116375921, 0.5006023328621803, 0.5324153830981403, 0.5272866007885317, 0.49217067870003073, 0.5319613496760198, 0.501667162272491, 0.5405529929866345, 0.0991756916763219, 0.10610712567095615, 0.10193217430537893, 0.12780664055266466, 0.10640135115577265, 0.09216394548297613, 0.11046004086662264, 0.10746848761964412, 0.0864050659672746, 0.1532967750153792, 0.1699820655316877, 0.1517777299537183, 0.15774394330710761, 0.13550277267332345, 0.13804294452586363, 0.15692609099726162, 0.14901541102535343, 0.1778445971716457, 0.33771350977599235, 0.3323046028573191, 0.3100874961614031, 0.3065952311525255, 0.32547672423271157, 0.3006408486867479, 0.3616749375690266, 0.3733159314314677, 0.3370163361969214, 0.20023247114004794, 0.20164268673925456, 0.23907013989990655, 0.22447614346350586, 0.22584446485683185, 0.23833917787856684, 0.24932613292228434, 0.27086074345778965, 0.23088155816624267, 0.19231053173410984, 0.19485239835314982, 0.20300117976898213, 0.19720610000664096, 0.19517839170666829, 0.18911746424257325, 0.19198753604627683, 0.20033708164934794, 0.19338135761500752, 0.22570328077843105, 0.4472804729357315, 0.25371533234027444, 0.1995183972429141, 0.23126927378346385, 0.22114761473722488, 0.24970760255414348, 0.34565639791150604, 0.22187227699334633, 0.5286987965151662, 0.4658502148359668, 0.21491191402324716, 0.4281565552335831, 0.37781201394684916, 0.39318984197100926, 0.17803817027956592, 0.4700611515822183, 0.29524044141054573, 0.4471137690628474, 0.19643667807242693, 0.2894734463003883, 0.19376071780799864, 0.19616160279367023, 0.19858855294774536, 0.2762684131388671, 0.5428254107396998, 0.5476724001119886, 0.1723665764653628, 0.18787187977730824, 0.17366124508462288, 0.18359146109181002, 0.19224042242260853, 0.1812815839369809, 0.184673973346984, 0.19509878265791158, 0.23078837679635145, 0.08480516881906075, 0.07718345495719314, 0.07998497074651256, 0.07959831868521383, 0.0787944423813507, 0.07742729474816801, 0.07655974886106365, 0.08324376498328545, 0.08086985924513246]}, "mutation_prompt": null}
{"id": "3fc69ea8-9aa3-4e60-b9ca-fb212c2f1466", "solution": "import numpy as np\n\nclass DE_PSO_Optimizer:\n    def __init__(self, budget, dim, pop_size=50, c1=2.0, c2=2.0, w=0.7, f=0.5, cr=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.c1 = c1\n        self.c2 = c2\n        self.w = w\n        self.f = f\n        self.cr = cr\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(ind) for ind in population])\n\n        def clip_bounds(population):\n            return np.clip(population, -5.0, 5.0)\n\n        def mutate(population, target_idx, f):\n            candidates = list(range(len(population)))\n            candidates.remove(target_idx)\n            a, b, c = np.random.choice(candidates, 3, replace=False)\n            mutant = population[a] + f * (population[b] - population[c])\n            return clip_bounds(mutant)\n\n        def crossover(target, mutant):\n            trial = np.copy(target)\n            crossover_points = np.random.rand(self.dim) < self.cr\n            if not np.any(crossover_points):\n                crossover_points[np.random.randint(0, self.dim)] = True\n            trial[crossover_points] = mutant[crossover_points]\n            return trial\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                mutant = mutate(population, i, self.f)\n                trial = crossover(population[i], mutant)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n        return best_solution\n", "name": "DE_PSO_Optimizer", "description": "Utilizing a novel hybrid algorithm combining Differential Evolution (DE) with Particle Swarm Optimization (PSO) to enhance search and convergence capabilities.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "980dfa97-e041-47dd-8ca3-eeb8d1f89a5c", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6374593667227992, 0.6889401945204383, 0.6840853480293522, 0.6967349454168776, 0.6836546441420059, 0.7013571449635906, 0.6666788686750416, 0.6770639713943923, 0.6863840800439489, 0.12406593503725594, 0.12297465129273255, 0.14058632370994584, 0.1052595427488272, 0.11167461882941265, 0.13007467230320757, 0.12365019145486145, 0.11918356450990464, 0.11488744604263235, 0.10535781951712397, 0.11481994548974239, 0.09822569063089581, 0.11315686760328558, 0.095718207154741, 0.1284589936656112, 0.11755130828269289, 0.12022350325463882, 0.11584820962019216, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.5245512181825833, 0.48590193773332546, 0.4726385713433626, 0.49755790842027525, 0.44050793004714717, 0.4860225812214042, 0.48923614479716393, 0.5626004529120301, 0.5661570195281409, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.49293502300884817, 0.271219826626266, 0.19525206862626898, 0.21208489548313536, 0.28795742039245853, 0.23712476040114228, 0.26456600091702454, 0.42421509633777477, 0.24608110188436494, 0.20232704007066327, 0.3997401225652686, 0.3946916881107272, 0.3321086903701219, 0.17433639000156165, 0.34057707605230425, 0.3185375665222645, 0.44875467299607996, 0.22345913743219759, 0.47817446858601365, 0.4614805127441417, 0.4102169989000195, 0.44686108002553415, 0.43915453207298905, 0.4440057175463302, 0.44242477992667906, 0.45027983433914365, 0.45654985092748845, 0.5447193995815659, 0.587850359461022, 0.5479286276366925, 0.5932712354594567, 0.5281597245465506, 0.576369408068012, 0.5895215243182369, 0.6533175907468016, 0.5580757098786728, 0.1820234248487943, 0.10042102185966051, 0.1094458063176349, 0.18975380863799762, 0.2616899769940645, 0.2704787827836086, 0.14806365752002526, 0.16644564002240947, 0.15630378745456364, 0.3522612834402613, 0.34558762409589794, 0.30832940654158036, 0.3548320422232081, 0.36776095379850093, 0.36386973613151785, 0.32759195569500954, 0.36128975575133904, 0.3295039643056106, 0.7251247130914591, 0.7421906635710509, 0.7496270213295275, 0.7230575132501221, 0.7251778593971584, 0.755831239590211, 0.7223247260970481, 0.7243412267015438, 0.7346211765929873, 0.09425026936346892, 0.10579369271440497, 0.09773862024513658, 0.09069026109797595, 0.09873614125013352, 0.11727414971731487, 0.11161073672894872, 0.1053016798615024, 0.10926195124569171, 0.1668445090052374, 0.13100362643348562, 0.14861021678460906, 0.1597184884703442, 0.1703972777954268, 0.1536571464041484, 0.21274717756607497, 0.1577126553447179, 0.17778289692217875, 0.41067801371860546, 0.43734698273738726, 0.46862066207838815, 0.39221448766203615, 0.41783463202763027, 0.4328395179856588, 0.4438323548298344, 0.4822833501481897, 0.4826278681932962, 0.3433992730587172, 0.3441615990342961, 0.33987749587443383, 0.3503815404539863, 0.32444776412018095, 0.3406782878289202, 0.35588497881207926, 0.35848157334592856, 0.32881957612434887, 0.20687612780704456, 0.21476317805421452, 0.19118188338739683, 0.20720838202013414, 0.22689532950204405, 0.19706522310943897, 0.2048548004556734, 0.2102999473590339, 0.2048058029438542, 0.19922743430889167, 0.2137604528357705, 0.1964308170507908, 0.18742924286984874, 0.25777128882776845, 0.18928562755462075, 0.2023242721488182, 0.21173853655341168, 0.24001795766827494, 0.6726255830604337, 0.19796955755725243, 0.19251605048532705, 0.6089964619245598, 0.7234653051791861, 0.1786098411700403, 0.565304270779537, 0.17117816801315844, 0.18106701919554602, 0.6868763099660992, 0.31772736525156975, 0.710391785663764, 0.1979188806567178, 0.2012540407726643, 0.70839429766416, 0.6418310694978038, 0.15061184268873962, 0.2104471192807641, 0.1938161867954813, 0.1886171753911593, 0.21371843256686773, 0.18694601503491992, 0.2054013654456397, 0.18033810841782072, 0.1958685708189951, 0.20650369436260085, 0.1886939359094303, 0.07497160228750599, 0.08931752520059522, 0.08148000773387032, 0.07270439939139905, 0.08257615351081926, 0.08619801121010329, 0.08427141040888397, 0.07555033649169784, 0.08109924643008071]}, "mutation_prompt": null}
{"id": "1004258c-acfb-4179-af5a-a158cae01826", "solution": "import numpy as np\n\nclass CSDE_Optimizer:\n    def __init__(self, budget, dim, pop_size=50, c1=2.0, c2=2.0, w=0.7, f=0.5, cr=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.c1 = c1\n        self.c2 = c2\n        self.w = w\n        self.f = f\n        self.cr = cr\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(ind) for ind in population])\n\n        def clip_bounds(population):\n            return np.clip(population, -5.0, 5.0)\n\n        def mutate(population, target_idx, f):\n            candidates = list(range(len(population)))\n            candidates.remove(target_idx)\n            a, b, c = np.random.choice(candidates, 3, replace=False)\n            mutant = population[a] + f * (population[b] - population[c])\n            return clip_bounds(mutant)\n\n        def crossover(target, mutant):\n            trial = np.copy(target)\n            crossover_points = np.random.rand(self.dim) < self.cr\n            if not np.any(crossover_points):\n                crossover_points[np.random.randint(0, self.dim)] = True\n            trial[crossover_points] = mutant[crossover_points]\n            return trial\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                mutant = mutate(population, i, self.f)\n                trial = crossover(population[i], mutant)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n        return best_solution", "name": "CSDE_Optimizer", "description": "Introducing a Novel Hybrid Algorithm by Integrating Cuckoo Search with Differential Evolution (CSDE) for Enhanced Optimization Performance", "configspace": "", "generation": 30, "fitness": 0.38961586939502635, "feedback": "The algorithm CSDE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.39 with standard deviation 0.25.", "error": "", "parent_id": "980dfa97-e041-47dd-8ca3-eeb8d1f89a5c", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6374593667227992, 0.6889401945204383, 0.6840853480293522, 0.6967349454168776, 0.6836546441420059, 0.7013571449635906, 0.6666788686750416, 0.6770639713943923, 0.6863840800439489, 0.12406593503725594, 0.12297465129273255, 0.14058632370994584, 0.1052595427488272, 0.11167461882941265, 0.13007467230320757, 0.12365019145486145, 0.11918356450990464, 0.11488744604263235, 0.10535781951712397, 0.11481994548974239, 0.09822569063089581, 0.11315686760328558, 0.095718207154741, 0.1284589936656112, 0.11755130828269289, 0.12022350325463882, 0.11584820962019216, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.5245512181825833, 0.48590193773332546, 0.4726385713433626, 0.49755790842027525, 0.44050793004714717, 0.4860225812214042, 0.48923614479716393, 0.5626004529120301, 0.5661570195281409, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.49293502300884817, 0.271219826626266, 0.19525206862626898, 0.21208489548313536, 0.28795742039245853, 0.23712476040114228, 0.26456600091702454, 0.42421509633777477, 0.24608110188436494, 0.20232704007066327, 0.3997401225652686, 0.3946916881107272, 0.3321086903701219, 0.17433639000156165, 0.34057707605230425, 0.3185375665222645, 0.44875467299607996, 0.22345913743219759, 0.47817446858601365, 0.4614805127441417, 0.4102169989000195, 0.44686108002553415, 0.43915453207298905, 0.4440057175463302, 0.44242477992667906, 0.45027983433914365, 0.45654985092748845, 0.5447193995815659, 0.587850359461022, 0.5479286276366925, 0.5932712354594567, 0.5281597245465506, 0.576369408068012, 0.5895215243182369, 0.6533175907468016, 0.5580757098786728, 0.1820234248487943, 0.10042102185966051, 0.1094458063176349, 0.18975380863799762, 0.2616899769940645, 0.2704787827836086, 0.14806365752002526, 0.16644564002240947, 0.15630378745456364, 0.3522612834402613, 0.34558762409589794, 0.30832940654158036, 0.3548320422232081, 0.36776095379850093, 0.36386973613151785, 0.32759195569500954, 0.36128975575133904, 0.3295039643056106, 0.7251247130914591, 0.7421906635710509, 0.7496270213295275, 0.7230575132501221, 0.7251778593971584, 0.755831239590211, 0.7223247260970481, 0.7243412267015438, 0.7346211765929873, 0.09425026936346892, 0.10579369271440497, 0.09773862024513658, 0.09069026109797595, 0.09873614125013352, 0.11727414971731487, 0.11161073672894872, 0.1053016798615024, 0.10926195124569171, 0.1668445090052374, 0.13100362643348562, 0.14861021678460906, 0.1597184884703442, 0.1703972777954268, 0.1536571464041484, 0.21274717756607497, 0.1577126553447179, 0.17778289692217875, 0.41067801371860546, 0.43734698273738726, 0.46862066207838815, 0.39221448766203615, 0.41783463202763027, 0.4328395179856588, 0.4438323548298344, 0.4822833501481897, 0.4826278681932962, 0.3433992730587172, 0.3441615990342961, 0.33987749587443383, 0.3503815404539863, 0.32444776412018095, 0.3406782878289202, 0.35588497881207926, 0.35848157334592856, 0.32881957612434887, 0.20687612780704456, 0.21476317805421452, 0.19118188338739683, 0.20720838202013414, 0.22689532950204405, 0.19706522310943897, 0.2048548004556734, 0.2102999473590339, 0.2048058029438542, 0.19922743430889167, 0.2137604528357705, 0.1964308170507908, 0.18742924286984874, 0.25777128882776845, 0.18928562755462075, 0.2023242721488182, 0.21173853655341168, 0.24001795766827494, 0.6726255830604337, 0.19796955755725243, 0.19251605048532705, 0.6089964619245598, 0.7234653051791861, 0.1786098411700403, 0.565304270779537, 0.17117816801315844, 0.18106701919554602, 0.6868763099660992, 0.31772736525156975, 0.710391785663764, 0.1979188806567178, 0.2012540407726643, 0.70839429766416, 0.6418310694978038, 0.15061184268873962, 0.2104471192807641, 0.1938161867954813, 0.1886171753911593, 0.21371843256686773, 0.18694601503491992, 0.2054013654456397, 0.18033810841782072, 0.1958685708189951, 0.20650369436260085, 0.1886939359094303, 0.07497160228750599, 0.08931752520059522, 0.08148000773387032, 0.07270439939139905, 0.08257615351081926, 0.08619801121010329, 0.08427141040888397, 0.07555033649169784, 0.08109924643008071]}, "mutation_prompt": null}
{"id": "ba40b088-93d1-41ba-9216-67b721fb17cf", "solution": "import numpy as np\n\nclass DE_PSO_Optimizer:\n    def __init__(self, budget, dim, pop_size=50, c1=2.0, c2=2.0, w=0.7, f=0.5, cr=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.c1 = c1\n        self.c2 = c2\n        self.w = w\n        self.f = f\n        self.cr = cr\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(ind) for ind in population])\n\n        def clip_bounds(population):\n            return np.clip(population, -5.0, 5.0)\n\n        def mutate(population, target_idx, f):\n            candidates = list(range(len(population)))\n            candidates.remove(target_idx)\n            a, b, c = np.random.choice(candidates, 3, replace=False)\n            mutant = population[a] + f * (population[b] - population[c])\n            return clip_bounds(mutant)\n\n        def crossover(target, mutant):\n            trial = np.copy(target)\n            crossover_points = np.random.rand(self.dim) < self.cr\n            if not np.any(crossover_points):\n                crossover_points[np.random.randint(0, self.dim)] = True\n            trial[crossover_points] = mutant[crossover_points]\n            return trial\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                mutant = mutate(population, i, self.f)\n                trial = crossover(population[i], mutant)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n        return best_solution\n", "name": "DE_PSO_Optimizer", "description": "Utilizing a novel hybrid algorithm combining Differential Evolution (DE) with Particle Swarm Optimization (PSO) to enhance search and convergence capabilities.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "980dfa97-e041-47dd-8ca3-eeb8d1f89a5c", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6374593667227992, 0.6889401945204383, 0.6840853480293522, 0.6967349454168776, 0.6836546441420059, 0.7013571449635906, 0.6666788686750416, 0.6770639713943923, 0.6863840800439489, 0.12406593503725594, 0.12297465129273255, 0.14058632370994584, 0.1052595427488272, 0.11167461882941265, 0.13007467230320757, 0.12365019145486145, 0.11918356450990464, 0.11488744604263235, 0.10535781951712397, 0.11481994548974239, 0.09822569063089581, 0.11315686760328558, 0.095718207154741, 0.1284589936656112, 0.11755130828269289, 0.12022350325463882, 0.11584820962019216, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.5245512181825833, 0.48590193773332546, 0.4726385713433626, 0.49755790842027525, 0.44050793004714717, 0.4860225812214042, 0.48923614479716393, 0.5626004529120301, 0.5661570195281409, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.49293502300884817, 0.271219826626266, 0.19525206862626898, 0.21208489548313536, 0.28795742039245853, 0.23712476040114228, 0.26456600091702454, 0.42421509633777477, 0.24608110188436494, 0.20232704007066327, 0.3997401225652686, 0.3946916881107272, 0.3321086903701219, 0.17433639000156165, 0.34057707605230425, 0.3185375665222645, 0.44875467299607996, 0.22345913743219759, 0.47817446858601365, 0.4614805127441417, 0.4102169989000195, 0.44686108002553415, 0.43915453207298905, 0.4440057175463302, 0.44242477992667906, 0.45027983433914365, 0.45654985092748845, 0.5447193995815659, 0.587850359461022, 0.5479286276366925, 0.5932712354594567, 0.5281597245465506, 0.576369408068012, 0.5895215243182369, 0.6533175907468016, 0.5580757098786728, 0.1820234248487943, 0.10042102185966051, 0.1094458063176349, 0.18975380863799762, 0.2616899769940645, 0.2704787827836086, 0.14806365752002526, 0.16644564002240947, 0.15630378745456364, 0.3522612834402613, 0.34558762409589794, 0.30832940654158036, 0.3548320422232081, 0.36776095379850093, 0.36386973613151785, 0.32759195569500954, 0.36128975575133904, 0.3295039643056106, 0.7251247130914591, 0.7421906635710509, 0.7496270213295275, 0.7230575132501221, 0.7251778593971584, 0.755831239590211, 0.7223247260970481, 0.7243412267015438, 0.7346211765929873, 0.09425026936346892, 0.10579369271440497, 0.09773862024513658, 0.09069026109797595, 0.09873614125013352, 0.11727414971731487, 0.11161073672894872, 0.1053016798615024, 0.10926195124569171, 0.1668445090052374, 0.13100362643348562, 0.14861021678460906, 0.1597184884703442, 0.1703972777954268, 0.1536571464041484, 0.21274717756607497, 0.1577126553447179, 0.17778289692217875, 0.41067801371860546, 0.43734698273738726, 0.46862066207838815, 0.39221448766203615, 0.41783463202763027, 0.4328395179856588, 0.4438323548298344, 0.4822833501481897, 0.4826278681932962, 0.3433992730587172, 0.3441615990342961, 0.33987749587443383, 0.3503815404539863, 0.32444776412018095, 0.3406782878289202, 0.35588497881207926, 0.35848157334592856, 0.32881957612434887, 0.20687612780704456, 0.21476317805421452, 0.19118188338739683, 0.20720838202013414, 0.22689532950204405, 0.19706522310943897, 0.2048548004556734, 0.2102999473590339, 0.2048058029438542, 0.19922743430889167, 0.2137604528357705, 0.1964308170507908, 0.18742924286984874, 0.25777128882776845, 0.18928562755462075, 0.2023242721488182, 0.21173853655341168, 0.24001795766827494, 0.6726255830604337, 0.19796955755725243, 0.19251605048532705, 0.6089964619245598, 0.7234653051791861, 0.1786098411700403, 0.565304270779537, 0.17117816801315844, 0.18106701919554602, 0.6868763099660992, 0.31772736525156975, 0.710391785663764, 0.1979188806567178, 0.2012540407726643, 0.70839429766416, 0.6418310694978038, 0.15061184268873962, 0.2104471192807641, 0.1938161867954813, 0.1886171753911593, 0.21371843256686773, 0.18694601503491992, 0.2054013654456397, 0.18033810841782072, 0.1958685708189951, 0.20650369436260085, 0.1886939359094303, 0.07497160228750599, 0.08931752520059522, 0.08148000773387032, 0.07270439939139905, 0.08257615351081926, 0.08619801121010329, 0.08427141040888397, 0.07555033649169784, 0.08109924643008071]}, "mutation_prompt": null}
{"id": "d3947caf-a902-4184-8fc1-1d1a521bfcad", "solution": "import numpy as np\n\nclass DE_PSO_Optimizer:\n    def __init__(self, budget, dim, pop_size=50, c1=2.0, c2=2.0, w=0.7, f=0.5, cr=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.c1 = c1\n        self.c2 = c2\n        self.w = w\n        self.f = f\n        self.cr = cr\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(ind) for ind in population])\n\n        def clip_bounds(population):\n            return np.clip(population, -5.0, 5.0)\n\n        def mutate(population, target_idx, f):\n            candidates = list(range(len(population)))\n            candidates.remove(target_idx)\n            a, b, c = np.random.choice(candidates, 3, replace=False)\n            mutant = population[a] + f * (population[b] - population[c])\n            return clip_bounds(mutant)\n\n        def crossover(target, mutant):\n            trial = np.copy(target)\n            crossover_points = np.random.rand(self.dim) < self.cr\n            if not np.any(crossover_points):\n                crossover_points[np.random.randint(0, self.dim)] = True\n            trial[crossover_points] = mutant[crossover_points]\n            return trial\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                mutant = mutate(population, i, self.f)\n                trial = crossover(population[i], mutant)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n        return best_solution\n", "name": "DE_PSO_Optimizer", "description": "Utilizing a novel hybrid algorithm combining Differential Evolution (DE) with Particle Swarm Optimization (PSO) to enhance search and convergence capabilities.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "980dfa97-e041-47dd-8ca3-eeb8d1f89a5c", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6374593667227992, 0.6889401945204383, 0.6840853480293522, 0.6967349454168776, 0.6836546441420059, 0.7013571449635906, 0.6666788686750416, 0.6770639713943923, 0.6863840800439489, 0.12406593503725594, 0.12297465129273255, 0.14058632370994584, 0.1052595427488272, 0.11167461882941265, 0.13007467230320757, 0.12365019145486145, 0.11918356450990464, 0.11488744604263235, 0.10535781951712397, 0.11481994548974239, 0.09822569063089581, 0.11315686760328558, 0.095718207154741, 0.1284589936656112, 0.11755130828269289, 0.12022350325463882, 0.11584820962019216, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.5245512181825833, 0.48590193773332546, 0.4726385713433626, 0.49755790842027525, 0.44050793004714717, 0.4860225812214042, 0.48923614479716393, 0.5626004529120301, 0.5661570195281409, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.49293502300884817, 0.271219826626266, 0.19525206862626898, 0.21208489548313536, 0.28795742039245853, 0.23712476040114228, 0.26456600091702454, 0.42421509633777477, 0.24608110188436494, 0.20232704007066327, 0.3997401225652686, 0.3946916881107272, 0.3321086903701219, 0.17433639000156165, 0.34057707605230425, 0.3185375665222645, 0.44875467299607996, 0.22345913743219759, 0.47817446858601365, 0.4614805127441417, 0.4102169989000195, 0.44686108002553415, 0.43915453207298905, 0.4440057175463302, 0.44242477992667906, 0.45027983433914365, 0.45654985092748845, 0.5447193995815659, 0.587850359461022, 0.5479286276366925, 0.5932712354594567, 0.5281597245465506, 0.576369408068012, 0.5895215243182369, 0.6533175907468016, 0.5580757098786728, 0.1820234248487943, 0.10042102185966051, 0.1094458063176349, 0.18975380863799762, 0.2616899769940645, 0.2704787827836086, 0.14806365752002526, 0.16644564002240947, 0.15630378745456364, 0.3522612834402613, 0.34558762409589794, 0.30832940654158036, 0.3548320422232081, 0.36776095379850093, 0.36386973613151785, 0.32759195569500954, 0.36128975575133904, 0.3295039643056106, 0.7251247130914591, 0.7421906635710509, 0.7496270213295275, 0.7230575132501221, 0.7251778593971584, 0.755831239590211, 0.7223247260970481, 0.7243412267015438, 0.7346211765929873, 0.09425026936346892, 0.10579369271440497, 0.09773862024513658, 0.09069026109797595, 0.09873614125013352, 0.11727414971731487, 0.11161073672894872, 0.1053016798615024, 0.10926195124569171, 0.1668445090052374, 0.13100362643348562, 0.14861021678460906, 0.1597184884703442, 0.1703972777954268, 0.1536571464041484, 0.21274717756607497, 0.1577126553447179, 0.17778289692217875, 0.41067801371860546, 0.43734698273738726, 0.46862066207838815, 0.39221448766203615, 0.41783463202763027, 0.4328395179856588, 0.4438323548298344, 0.4822833501481897, 0.4826278681932962, 0.3433992730587172, 0.3441615990342961, 0.33987749587443383, 0.3503815404539863, 0.32444776412018095, 0.3406782878289202, 0.35588497881207926, 0.35848157334592856, 0.32881957612434887, 0.20687612780704456, 0.21476317805421452, 0.19118188338739683, 0.20720838202013414, 0.22689532950204405, 0.19706522310943897, 0.2048548004556734, 0.2102999473590339, 0.2048058029438542, 0.19922743430889167, 0.2137604528357705, 0.1964308170507908, 0.18742924286984874, 0.25777128882776845, 0.18928562755462075, 0.2023242721488182, 0.21173853655341168, 0.24001795766827494, 0.6726255830604337, 0.19796955755725243, 0.19251605048532705, 0.6089964619245598, 0.7234653051791861, 0.1786098411700403, 0.565304270779537, 0.17117816801315844, 0.18106701919554602, 0.6868763099660992, 0.31772736525156975, 0.710391785663764, 0.1979188806567178, 0.2012540407726643, 0.70839429766416, 0.6418310694978038, 0.15061184268873962, 0.2104471192807641, 0.1938161867954813, 0.1886171753911593, 0.21371843256686773, 0.18694601503491992, 0.2054013654456397, 0.18033810841782072, 0.1958685708189951, 0.20650369436260085, 0.1886939359094303, 0.07497160228750599, 0.08931752520059522, 0.08148000773387032, 0.07270439939139905, 0.08257615351081926, 0.08619801121010329, 0.08427141040888397, 0.07555033649169784, 0.08109924643008071]}, "mutation_prompt": null}
{"id": "51533aca-d21b-4e8c-9e9e-c53ad48a91d0", "solution": "import numpy as np\n\nclass DE_PSO_Optimizer:\n    def __init__(self, budget, dim, pop_size=50, c1=2.0, c2=2.0, w=0.7, f=0.5, cr=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.c1 = c1\n        self.c2 = c2\n        self.w = w\n        self.f = f\n        self.cr = cr\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(ind) for ind in population])\n\n        def clip_bounds(population):\n            return np.clip(population, -5.0, 5.0)\n\n        def mutate(population, target_idx, f):\n            candidates = list(range(len(population)))\n            candidates.remove(target_idx)\n            a, b, c = np.random.choice(candidates, 3, replace=False)\n            mutant = population[a] + f * (population[b] - population[c])\n            return clip_bounds(mutant)\n\n        def crossover(target, mutant):\n            trial = np.copy(target)\n            crossover_points = np.random.rand(self.dim) < self.cr\n            if not np.any(crossover_points):\n                crossover_points[np.random.randint(0, self.dim)] = True\n            trial[crossover_points] = mutant[crossover_points]\n            return trial\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                mutant = mutate(population, i, self.f)\n                trial = crossover(population[i], mutant)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n        return best_solution\n", "name": "DE_PSO_Optimizer", "description": "Utilizing a novel hybrid algorithm combining Differential Evolution (DE) with Particle Swarm Optimization (PSO) to enhance search and convergence capabilities.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "980dfa97-e041-47dd-8ca3-eeb8d1f89a5c", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6374593667227992, 0.6889401945204383, 0.6840853480293522, 0.6967349454168776, 0.6836546441420059, 0.7013571449635906, 0.6666788686750416, 0.6770639713943923, 0.6863840800439489, 0.12406593503725594, 0.12297465129273255, 0.14058632370994584, 0.1052595427488272, 0.11167461882941265, 0.13007467230320757, 0.12365019145486145, 0.11918356450990464, 0.11488744604263235, 0.10535781951712397, 0.11481994548974239, 0.09822569063089581, 0.11315686760328558, 0.095718207154741, 0.1284589936656112, 0.11755130828269289, 0.12022350325463882, 0.11584820962019216, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.5245512181825833, 0.48590193773332546, 0.4726385713433626, 0.49755790842027525, 0.44050793004714717, 0.4860225812214042, 0.48923614479716393, 0.5626004529120301, 0.5661570195281409, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.49293502300884817, 0.271219826626266, 0.19525206862626898, 0.21208489548313536, 0.28795742039245853, 0.23712476040114228, 0.26456600091702454, 0.42421509633777477, 0.24608110188436494, 0.20232704007066327, 0.3997401225652686, 0.3946916881107272, 0.3321086903701219, 0.17433639000156165, 0.34057707605230425, 0.3185375665222645, 0.44875467299607996, 0.22345913743219759, 0.47817446858601365, 0.4614805127441417, 0.4102169989000195, 0.44686108002553415, 0.43915453207298905, 0.4440057175463302, 0.44242477992667906, 0.45027983433914365, 0.45654985092748845, 0.5447193995815659, 0.587850359461022, 0.5479286276366925, 0.5932712354594567, 0.5281597245465506, 0.576369408068012, 0.5895215243182369, 0.6533175907468016, 0.5580757098786728, 0.1820234248487943, 0.10042102185966051, 0.1094458063176349, 0.18975380863799762, 0.2616899769940645, 0.2704787827836086, 0.14806365752002526, 0.16644564002240947, 0.15630378745456364, 0.3522612834402613, 0.34558762409589794, 0.30832940654158036, 0.3548320422232081, 0.36776095379850093, 0.36386973613151785, 0.32759195569500954, 0.36128975575133904, 0.3295039643056106, 0.7251247130914591, 0.7421906635710509, 0.7496270213295275, 0.7230575132501221, 0.7251778593971584, 0.755831239590211, 0.7223247260970481, 0.7243412267015438, 0.7346211765929873, 0.09425026936346892, 0.10579369271440497, 0.09773862024513658, 0.09069026109797595, 0.09873614125013352, 0.11727414971731487, 0.11161073672894872, 0.1053016798615024, 0.10926195124569171, 0.1668445090052374, 0.13100362643348562, 0.14861021678460906, 0.1597184884703442, 0.1703972777954268, 0.1536571464041484, 0.21274717756607497, 0.1577126553447179, 0.17778289692217875, 0.41067801371860546, 0.43734698273738726, 0.46862066207838815, 0.39221448766203615, 0.41783463202763027, 0.4328395179856588, 0.4438323548298344, 0.4822833501481897, 0.4826278681932962, 0.3433992730587172, 0.3441615990342961, 0.33987749587443383, 0.3503815404539863, 0.32444776412018095, 0.3406782878289202, 0.35588497881207926, 0.35848157334592856, 0.32881957612434887, 0.20687612780704456, 0.21476317805421452, 0.19118188338739683, 0.20720838202013414, 0.22689532950204405, 0.19706522310943897, 0.2048548004556734, 0.2102999473590339, 0.2048058029438542, 0.19922743430889167, 0.2137604528357705, 0.1964308170507908, 0.18742924286984874, 0.25777128882776845, 0.18928562755462075, 0.2023242721488182, 0.21173853655341168, 0.24001795766827494, 0.6726255830604337, 0.19796955755725243, 0.19251605048532705, 0.6089964619245598, 0.7234653051791861, 0.1786098411700403, 0.565304270779537, 0.17117816801315844, 0.18106701919554602, 0.6868763099660992, 0.31772736525156975, 0.710391785663764, 0.1979188806567178, 0.2012540407726643, 0.70839429766416, 0.6418310694978038, 0.15061184268873962, 0.2104471192807641, 0.1938161867954813, 0.1886171753911593, 0.21371843256686773, 0.18694601503491992, 0.2054013654456397, 0.18033810841782072, 0.1958685708189951, 0.20650369436260085, 0.1886939359094303, 0.07497160228750599, 0.08931752520059522, 0.08148000773387032, 0.07270439939139905, 0.08257615351081926, 0.08619801121010329, 0.08427141040888397, 0.07555033649169784, 0.08109924643008071]}, "mutation_prompt": null}
{"id": "8de4310f-78b0-4093-a426-b57ec97f9cdc", "solution": "import numpy as np\n\nclass DE_PSO_Optimizer:\n    def __init__(self, budget, dim, pop_size=50, c1=2.0, c2=2.0, w=0.7, f=0.5, cr=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.c1 = c1\n        self.c2 = c2\n        self.w = w\n        self.f = f\n        self.cr = cr\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(ind) for ind in population])\n\n        def clip_bounds(population):\n            return np.clip(population, -5.0, 5.0)\n\n        def mutate(population, target_idx, f):\n            candidates = list(range(len(population)))\n            candidates.remove(target_idx)\n            a, b, c = np.random.choice(candidates, 3, replace=False)\n            mutant = population[a] + f * (population[b] - population[c])\n            return clip_bounds(mutant)\n\n        def crossover(target, mutant):\n            trial = np.copy(target)\n            crossover_points = np.random.rand(self.dim) < self.cr\n            if not np.any(crossover_points):\n                crossover_points[np.random.randint(0, self.dim)] = True\n            trial[crossover_points] = mutant[crossover_points]\n            return trial\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                mutant = mutate(population, i, self.f)\n                trial = crossover(population[i], mutant)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n        return best_solution\n", "name": "DE_PSO_Optimizer", "description": "Utilizing a novel hybrid algorithm combining Differential Evolution (DE) with Particle Swarm Optimization (PSO) to enhance search and convergence capabilities.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "980dfa97-e041-47dd-8ca3-eeb8d1f89a5c", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6374593667227992, 0.6889401945204383, 0.6840853480293522, 0.6967349454168776, 0.6836546441420059, 0.7013571449635906, 0.6666788686750416, 0.6770639713943923, 0.6863840800439489, 0.12406593503725594, 0.12297465129273255, 0.14058632370994584, 0.1052595427488272, 0.11167461882941265, 0.13007467230320757, 0.12365019145486145, 0.11918356450990464, 0.11488744604263235, 0.10535781951712397, 0.11481994548974239, 0.09822569063089581, 0.11315686760328558, 0.095718207154741, 0.1284589936656112, 0.11755130828269289, 0.12022350325463882, 0.11584820962019216, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.5245512181825833, 0.48590193773332546, 0.4726385713433626, 0.49755790842027525, 0.44050793004714717, 0.4860225812214042, 0.48923614479716393, 0.5626004529120301, 0.5661570195281409, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.49293502300884817, 0.271219826626266, 0.19525206862626898, 0.21208489548313536, 0.28795742039245853, 0.23712476040114228, 0.26456600091702454, 0.42421509633777477, 0.24608110188436494, 0.20232704007066327, 0.3997401225652686, 0.3946916881107272, 0.3321086903701219, 0.17433639000156165, 0.34057707605230425, 0.3185375665222645, 0.44875467299607996, 0.22345913743219759, 0.47817446858601365, 0.4614805127441417, 0.4102169989000195, 0.44686108002553415, 0.43915453207298905, 0.4440057175463302, 0.44242477992667906, 0.45027983433914365, 0.45654985092748845, 0.5447193995815659, 0.587850359461022, 0.5479286276366925, 0.5932712354594567, 0.5281597245465506, 0.576369408068012, 0.5895215243182369, 0.6533175907468016, 0.5580757098786728, 0.1820234248487943, 0.10042102185966051, 0.1094458063176349, 0.18975380863799762, 0.2616899769940645, 0.2704787827836086, 0.14806365752002526, 0.16644564002240947, 0.15630378745456364, 0.3522612834402613, 0.34558762409589794, 0.30832940654158036, 0.3548320422232081, 0.36776095379850093, 0.36386973613151785, 0.32759195569500954, 0.36128975575133904, 0.3295039643056106, 0.7251247130914591, 0.7421906635710509, 0.7496270213295275, 0.7230575132501221, 0.7251778593971584, 0.755831239590211, 0.7223247260970481, 0.7243412267015438, 0.7346211765929873, 0.09425026936346892, 0.10579369271440497, 0.09773862024513658, 0.09069026109797595, 0.09873614125013352, 0.11727414971731487, 0.11161073672894872, 0.1053016798615024, 0.10926195124569171, 0.1668445090052374, 0.13100362643348562, 0.14861021678460906, 0.1597184884703442, 0.1703972777954268, 0.1536571464041484, 0.21274717756607497, 0.1577126553447179, 0.17778289692217875, 0.41067801371860546, 0.43734698273738726, 0.46862066207838815, 0.39221448766203615, 0.41783463202763027, 0.4328395179856588, 0.4438323548298344, 0.4822833501481897, 0.4826278681932962, 0.3433992730587172, 0.3441615990342961, 0.33987749587443383, 0.3503815404539863, 0.32444776412018095, 0.3406782878289202, 0.35588497881207926, 0.35848157334592856, 0.32881957612434887, 0.20687612780704456, 0.21476317805421452, 0.19118188338739683, 0.20720838202013414, 0.22689532950204405, 0.19706522310943897, 0.2048548004556734, 0.2102999473590339, 0.2048058029438542, 0.19922743430889167, 0.2137604528357705, 0.1964308170507908, 0.18742924286984874, 0.25777128882776845, 0.18928562755462075, 0.2023242721488182, 0.21173853655341168, 0.24001795766827494, 0.6726255830604337, 0.19796955755725243, 0.19251605048532705, 0.6089964619245598, 0.7234653051791861, 0.1786098411700403, 0.565304270779537, 0.17117816801315844, 0.18106701919554602, 0.6868763099660992, 0.31772736525156975, 0.710391785663764, 0.1979188806567178, 0.2012540407726643, 0.70839429766416, 0.6418310694978038, 0.15061184268873962, 0.2104471192807641, 0.1938161867954813, 0.1886171753911593, 0.21371843256686773, 0.18694601503491992, 0.2054013654456397, 0.18033810841782072, 0.1958685708189951, 0.20650369436260085, 0.1886939359094303, 0.07497160228750599, 0.08931752520059522, 0.08148000773387032, 0.07270439939139905, 0.08257615351081926, 0.08619801121010329, 0.08427141040888397, 0.07555033649169784, 0.08109924643008071]}, "mutation_prompt": null}
{"id": "a89d744a-d013-4fe7-aebe-fba8b751305d", "solution": "import numpy as np\n\nclass DE_PSO_Optimizer:\n    def __init__(self, budget, dim, pop_size=50, c1=2.0, c2=2.0, w=0.7, f=0.5, cr=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.c1 = c1\n        self.c2 = c2\n        self.w = w\n        self.f = f\n        self.cr = cr\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(ind) for ind in population])\n\n        def clip_bounds(population):\n            return np.clip(population, -5.0, 5.0)\n\n        def mutate(population, target_idx, f):\n            candidates = list(range(len(population)))\n            candidates.remove(target_idx)\n            a, b, c = np.random.choice(candidates, 3, replace=False)\n            mutant = population[a] + f * (population[b] - population[c])\n            return clip_bounds(mutant)\n\n        def crossover(target, mutant):\n            trial = np.copy(target)\n            crossover_points = np.random.rand(self.dim) < self.cr\n            if not np.any(crossover_points):\n                crossover_points[np.random.randint(0, self.dim)] = True\n            trial[crossover_points] = mutant[crossover_points]\n            return trial\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                mutant = mutate(population, i, self.f)\n                trial = crossover(population[i], mutant)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n        return best_solution\n", "name": "DE_PSO_Optimizer", "description": "Utilizing a novel hybrid algorithm combining Differential Evolution (DE) with Particle Swarm Optimization (PSO) to enhance search and convergence capabilities.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "980dfa97-e041-47dd-8ca3-eeb8d1f89a5c", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6374593667227992, 0.6889401945204383, 0.6840853480293522, 0.6967349454168776, 0.6836546441420059, 0.7013571449635906, 0.6666788686750416, 0.6770639713943923, 0.6863840800439489, 0.12406593503725594, 0.12297465129273255, 0.14058632370994584, 0.1052595427488272, 0.11167461882941265, 0.13007467230320757, 0.12365019145486145, 0.11918356450990464, 0.11488744604263235, 0.10535781951712397, 0.11481994548974239, 0.09822569063089581, 0.11315686760328558, 0.095718207154741, 0.1284589936656112, 0.11755130828269289, 0.12022350325463882, 0.11584820962019216, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.5245512181825833, 0.48590193773332546, 0.4726385713433626, 0.49755790842027525, 0.44050793004714717, 0.4860225812214042, 0.48923614479716393, 0.5626004529120301, 0.5661570195281409, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.49293502300884817, 0.271219826626266, 0.19525206862626898, 0.21208489548313536, 0.28795742039245853, 0.23712476040114228, 0.26456600091702454, 0.42421509633777477, 0.24608110188436494, 0.20232704007066327, 0.3997401225652686, 0.3946916881107272, 0.3321086903701219, 0.17433639000156165, 0.34057707605230425, 0.3185375665222645, 0.44875467299607996, 0.22345913743219759, 0.47817446858601365, 0.4614805127441417, 0.4102169989000195, 0.44686108002553415, 0.43915453207298905, 0.4440057175463302, 0.44242477992667906, 0.45027983433914365, 0.45654985092748845, 0.5447193995815659, 0.587850359461022, 0.5479286276366925, 0.5932712354594567, 0.5281597245465506, 0.576369408068012, 0.5895215243182369, 0.6533175907468016, 0.5580757098786728, 0.1820234248487943, 0.10042102185966051, 0.1094458063176349, 0.18975380863799762, 0.2616899769940645, 0.2704787827836086, 0.14806365752002526, 0.16644564002240947, 0.15630378745456364, 0.3522612834402613, 0.34558762409589794, 0.30832940654158036, 0.3548320422232081, 0.36776095379850093, 0.36386973613151785, 0.32759195569500954, 0.36128975575133904, 0.3295039643056106, 0.7251247130914591, 0.7421906635710509, 0.7496270213295275, 0.7230575132501221, 0.7251778593971584, 0.755831239590211, 0.7223247260970481, 0.7243412267015438, 0.7346211765929873, 0.09425026936346892, 0.10579369271440497, 0.09773862024513658, 0.09069026109797595, 0.09873614125013352, 0.11727414971731487, 0.11161073672894872, 0.1053016798615024, 0.10926195124569171, 0.1668445090052374, 0.13100362643348562, 0.14861021678460906, 0.1597184884703442, 0.1703972777954268, 0.1536571464041484, 0.21274717756607497, 0.1577126553447179, 0.17778289692217875, 0.41067801371860546, 0.43734698273738726, 0.46862066207838815, 0.39221448766203615, 0.41783463202763027, 0.4328395179856588, 0.4438323548298344, 0.4822833501481897, 0.4826278681932962, 0.3433992730587172, 0.3441615990342961, 0.33987749587443383, 0.3503815404539863, 0.32444776412018095, 0.3406782878289202, 0.35588497881207926, 0.35848157334592856, 0.32881957612434887, 0.20687612780704456, 0.21476317805421452, 0.19118188338739683, 0.20720838202013414, 0.22689532950204405, 0.19706522310943897, 0.2048548004556734, 0.2102999473590339, 0.2048058029438542, 0.19922743430889167, 0.2137604528357705, 0.1964308170507908, 0.18742924286984874, 0.25777128882776845, 0.18928562755462075, 0.2023242721488182, 0.21173853655341168, 0.24001795766827494, 0.6726255830604337, 0.19796955755725243, 0.19251605048532705, 0.6089964619245598, 0.7234653051791861, 0.1786098411700403, 0.565304270779537, 0.17117816801315844, 0.18106701919554602, 0.6868763099660992, 0.31772736525156975, 0.710391785663764, 0.1979188806567178, 0.2012540407726643, 0.70839429766416, 0.6418310694978038, 0.15061184268873962, 0.2104471192807641, 0.1938161867954813, 0.1886171753911593, 0.21371843256686773, 0.18694601503491992, 0.2054013654456397, 0.18033810841782072, 0.1958685708189951, 0.20650369436260085, 0.1886939359094303, 0.07497160228750599, 0.08931752520059522, 0.08148000773387032, 0.07270439939139905, 0.08257615351081926, 0.08619801121010329, 0.08427141040888397, 0.07555033649169784, 0.08109924643008071]}, "mutation_prompt": null}
{"id": "91229615-da10-4a06-901d-d078b93256f2", "solution": "import numpy as np\n\nclass DE_PSO_Optimizer:\n    def __init__(self, budget, dim, pop_size=50, c1=2.0, c2=2.0, w=0.7, f=0.5, cr=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.c1 = c1\n        self.c2 = c2\n        self.w = w\n        self.f = f\n        self.cr = cr\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(ind) for ind in population])\n\n        def clip_bounds(population):\n            return np.clip(population, -5.0, 5.0)\n\n        def mutate(population, target_idx, f):\n            candidates = list(range(len(population)))\n            candidates.remove(target_idx)\n            a, b, c = np.random.choice(candidates, 3, replace=False)\n            mutant = population[a] + f * (population[b] - population[c])\n            return clip_bounds(mutant)\n\n        def crossover(target, mutant):\n            trial = np.copy(target)\n            crossover_points = np.random.rand(self.dim) < self.cr\n            if not np.any(crossover_points):\n                crossover_points[np.random.randint(0, self.dim)] = True\n            trial[crossover_points] = mutant[crossover_points]\n            return trial\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                mutant = mutate(population, i, self.f)\n                trial = crossover(population[i], mutant)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n        return best_solution\n", "name": "DE_PSO_Optimizer", "description": "Utilizing a novel hybrid algorithm combining Differential Evolution (DE) with Particle Swarm Optimization (PSO) to enhance search and convergence capabilities.", "configspace": "", "generation": 16, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "980dfa97-e041-47dd-8ca3-eeb8d1f89a5c", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6374593667227992, 0.6889401945204383, 0.6840853480293522, 0.6967349454168776, 0.6836546441420059, 0.7013571449635906, 0.6666788686750416, 0.6770639713943923, 0.6863840800439489, 0.12406593503725594, 0.12297465129273255, 0.14058632370994584, 0.1052595427488272, 0.11167461882941265, 0.13007467230320757, 0.12365019145486145, 0.11918356450990464, 0.11488744604263235, 0.10535781951712397, 0.11481994548974239, 0.09822569063089581, 0.11315686760328558, 0.095718207154741, 0.1284589936656112, 0.11755130828269289, 0.12022350325463882, 0.11584820962019216, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.5245512181825833, 0.48590193773332546, 0.4726385713433626, 0.49755790842027525, 0.44050793004714717, 0.4860225812214042, 0.48923614479716393, 0.5626004529120301, 0.5661570195281409, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.49293502300884817, 0.271219826626266, 0.19525206862626898, 0.21208489548313536, 0.28795742039245853, 0.23712476040114228, 0.26456600091702454, 0.42421509633777477, 0.24608110188436494, 0.20232704007066327, 0.3997401225652686, 0.3946916881107272, 0.3321086903701219, 0.17433639000156165, 0.34057707605230425, 0.3185375665222645, 0.44875467299607996, 0.22345913743219759, 0.47817446858601365, 0.4614805127441417, 0.4102169989000195, 0.44686108002553415, 0.43915453207298905, 0.4440057175463302, 0.44242477992667906, 0.45027983433914365, 0.45654985092748845, 0.5447193995815659, 0.587850359461022, 0.5479286276366925, 0.5932712354594567, 0.5281597245465506, 0.576369408068012, 0.5895215243182369, 0.6533175907468016, 0.5580757098786728, 0.1820234248487943, 0.10042102185966051, 0.1094458063176349, 0.18975380863799762, 0.2616899769940645, 0.2704787827836086, 0.14806365752002526, 0.16644564002240947, 0.15630378745456364, 0.3522612834402613, 0.34558762409589794, 0.30832940654158036, 0.3548320422232081, 0.36776095379850093, 0.36386973613151785, 0.32759195569500954, 0.36128975575133904, 0.3295039643056106, 0.7251247130914591, 0.7421906635710509, 0.7496270213295275, 0.7230575132501221, 0.7251778593971584, 0.755831239590211, 0.7223247260970481, 0.7243412267015438, 0.7346211765929873, 0.09425026936346892, 0.10579369271440497, 0.09773862024513658, 0.09069026109797595, 0.09873614125013352, 0.11727414971731487, 0.11161073672894872, 0.1053016798615024, 0.10926195124569171, 0.1668445090052374, 0.13100362643348562, 0.14861021678460906, 0.1597184884703442, 0.1703972777954268, 0.1536571464041484, 0.21274717756607497, 0.1577126553447179, 0.17778289692217875, 0.41067801371860546, 0.43734698273738726, 0.46862066207838815, 0.39221448766203615, 0.41783463202763027, 0.4328395179856588, 0.4438323548298344, 0.4822833501481897, 0.4826278681932962, 0.3433992730587172, 0.3441615990342961, 0.33987749587443383, 0.3503815404539863, 0.32444776412018095, 0.3406782878289202, 0.35588497881207926, 0.35848157334592856, 0.32881957612434887, 0.20687612780704456, 0.21476317805421452, 0.19118188338739683, 0.20720838202013414, 0.22689532950204405, 0.19706522310943897, 0.2048548004556734, 0.2102999473590339, 0.2048058029438542, 0.19922743430889167, 0.2137604528357705, 0.1964308170507908, 0.18742924286984874, 0.25777128882776845, 0.18928562755462075, 0.2023242721488182, 0.21173853655341168, 0.24001795766827494, 0.6726255830604337, 0.19796955755725243, 0.19251605048532705, 0.6089964619245598, 0.7234653051791861, 0.1786098411700403, 0.565304270779537, 0.17117816801315844, 0.18106701919554602, 0.6868763099660992, 0.31772736525156975, 0.710391785663764, 0.1979188806567178, 0.2012540407726643, 0.70839429766416, 0.6418310694978038, 0.15061184268873962, 0.2104471192807641, 0.1938161867954813, 0.1886171753911593, 0.21371843256686773, 0.18694601503491992, 0.2054013654456397, 0.18033810841782072, 0.1958685708189951, 0.20650369436260085, 0.1886939359094303, 0.07497160228750599, 0.08931752520059522, 0.08148000773387032, 0.07270439939139905, 0.08257615351081926, 0.08619801121010329, 0.08427141040888397, 0.07555033649169784, 0.08109924643008071]}, "mutation_prompt": null}
{"id": "f3e8fed2-1f6c-4459-9a27-d574665fdde1", "solution": "import numpy as np\n\nclass ADE_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, pop_size=50, c1=2.0, c2=2.0, w=0.7, f=0.5, cr=0.9, p=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.c1 = c1\n        self.c2 = c2\n        self.w = w\n        self.f = f\n        self.cr = cr\n        self.p = p\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(ind) for ind in population])\n\n        def clip_bounds(population):\n            return np.clip(population, -5.0, 5.0)\n\n        def mutate(population, target_idx, f):\n            candidates = list(range(len(population)))\n            candidates.remove(target_idx)\n            a, b, c = np.random.choice(candidates, 3, replace=False)\n            mutant = population[a] + f * (population[b] - population[c])\n            return clip_bounds(mutant)\n\n        def adapt_f(population, target_idx, f):\n            if np.random.rand() < self.p:\n                f = np.random.uniform(0, 1)\n            return f\n\n        def crossover(target, mutant):\n            trial = np.copy(target)\n            crossover_points = np.random.rand(self.dim) < self.cr\n            if not np.any(crossover_points):\n                crossover_points[np.random.randint(0, self.dim)] = True\n            trial[crossover_points] = mutant[crossover_points]\n            return trial\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                f = adapt_f(population, i, self.f)\n                mutant = mutate(population, i, f)\n                trial = crossover(population[i], mutant)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n        return best_solution", "name": "ADE_DE_PSO_Optimizer", "description": "Enhancing the DE_PSO_Optimizer algorithm by incorporating Adaptive Differential Evolution (ADE) to improve exploration-exploitation balance and overcome local optima.", "configspace": "", "generation": 37, "fitness": 0.42060858601605017, "feedback": "The algorithm ADE_DE_PSO_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.42 with standard deviation 0.25.", "error": "", "parent_id": "980dfa97-e041-47dd-8ca3-eeb8d1f89a5c", "metadata": {"aucs": [0.8123214706141486, 0.8140378262087054, 0.8240844263942627, 0.803878335184801, 0.8136241886849247, 0.8183825954829442, 0.7984822932002742, 0.8151225469031844, 0.8218023670536987, 0.6385195303768835, 0.6579571580118335, 0.6820703843899064, 0.6849010113683427, 0.6961712806278039, 0.6648363918346313, 0.6698228420038996, 0.6802187949986089, 0.6725454283976227, 0.3481853186607963, 0.39028336970907196, 0.322863756188817, 0.342003462818836, 0.3538121649241105, 0.16241724483643372, 0.2596483420289927, 0.34790537648841524, 0.23289033338935528, 0.12913197346123284, 0.17462778927099776, 0.17564965082098494, 0.13455683584624845, 0.1804596587385302, 0.17809515254315123, 0.1446798283195443, 0.13187921429245908, 0.14289995374473075, 0.8555961543806561, 0.9509285951561381, 0.8813530102840721, 0.9382019791555604, 0.9099816471796325, 0.9185689039784932, 0.9361184891372755, 0.9399851727718789, 0.8257066390924963, 0.5343667500826654, 0.5503500703076449, 0.49706136463079276, 0.550893465862691, 0.47812848819416776, 0.5891759107295056, 0.5164150770884739, 0.5405451995373886, 0.5303693343748241, 0.8073146822087436, 0.7856093153368697, 0.7343397889235013, 0.7939240326436944, 0.7944938010568672, 0.8198844584549083, 0.8080952420624778, 0.7722511480153406, 0.7888982250129256, 0.23030963056532405, 0.18991077897317687, 0.23317652078816387, 0.25822098774223035, 0.31408296026532334, 0.36573025756575284, 0.2577554894076699, 0.18179026533803289, 0.3477488780125729, 0.38516876461489846, 0.1540413896999907, 0.17502424591624854, 0.3018226770760818, 0.15896841693306618, 0.5806512464014226, 0.2554721031625128, 0.24210014457104867, 0.24330753263321736, 0.45597733066582413, 0.41029160143694177, 0.4197560233280546, 0.509508645047845, 0.4689399903728426, 0.3922122762487863, 0.5065516269509481, 0.45282185589003443, 0.4719013151419489, 0.5997536978814872, 0.6113796792542265, 0.5911829253791281, 0.5979115124965446, 0.5174834093165535, 0.5623535103353778, 0.5800618054861086, 0.59741226674047, 0.6082383982061269, 0.06927766819401127, 0.1521523076443585, 0.16126209416141524, 0.2868027435711844, 0.23570704723910707, 0.28491114224786973, 0.13299934178110284, 0.18042950199685803, 0.2766417778479795, 0.3417463111121729, 0.33847997571744937, 0.3360480794679036, 0.3846837073951298, 0.353562209479902, 0.35898962760917397, 0.3455950961442713, 0.32827313223709254, 0.3214596911350788, 0.7414594026003806, 0.7110053273423895, 0.7546701229505215, 0.7226967379749013, 0.7106615236272287, 0.7091382381062472, 0.7239232040809433, 0.7186208760975241, 0.7636938842769497, 0.13473106225365827, 0.12307493964656224, 0.14243870486761256, 0.1321956842465455, 0.12781427858359584, 0.14969018920626753, 0.1517114240646521, 0.1399525984229827, 0.1426138163154954, 0.19311787950415993, 0.3985733159053185, 0.4934655458859476, 0.22827768394070003, 0.21727667783672233, 0.1833369836815757, 0.28468939321812115, 0.15350837122912142, 0.1852193206747198, 0.43528138969813945, 0.42419664508345833, 0.45694754109865576, 0.44611928364249875, 0.479068057251291, 0.4609774894404495, 0.45337847354312943, 0.5077006013278818, 0.46384237977493126, 0.3218464631676228, 0.34883938789712354, 0.3513229142502503, 0.36937473491227024, 0.3231302674890676, 0.3529834529041833, 0.39071434064014154, 0.36374479898749434, 0.40257003562480764, 0.19879211244653716, 0.2152973507693412, 0.20381968952013507, 0.20426984136687454, 0.19993034599712045, 0.2100883265886151, 0.18182073483929662, 0.21772531886693292, 0.18535712144533878, 0.3547835823183314, 0.4120553882356013, 0.2050679281278024, 0.5055214799728107, 0.3873383440376795, 0.22891263494592717, 0.5322115193347791, 0.26106410616605125, 0.2164041555983497, 0.756637749868074, 0.19871370031491697, 0.7334473655312477, 0.8071631735586942, 0.18378680842077444, 0.18449144913253557, 0.6917835291318689, 0.5843984970937546, 0.8177548342191308, 0.6627345760046397, 0.20688433201562173, 0.6557911300777555, 0.1593629018245425, 0.7529382081366355, 0.7146035469327021, 0.20794810104881456, 0.7838316696383101, 0.20679231883950566, 0.19625891214407043, 0.18373776864888003, 0.19850606673584148, 0.18922581961274676, 0.18327265727985353, 0.18776474129349818, 0.18920094673140908, 0.18060322425782527, 0.1811306322791777, 0.08198993603628402, 0.08729906478971172, 0.07459737261186272, 0.08787056998849618, 0.08546875880628246, 0.08218028917939191, 0.09287096810978024, 0.0859129223610593, 0.07707775465246636]}, "mutation_prompt": null}
{"id": "00e13760-752d-4269-8802-10d6667a5574", "solution": "import numpy as np\n\nclass ADE_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, pop_size=50, c1=2.0, c2=2.0, w=0.7, f=0.5, cr=0.9, p=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.c1 = c1\n        self.c2 = c2\n        self.w = w\n        self.f = f\n        self.cr = cr\n        self.p = p\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(ind) for ind in population])\n\n        def clip_bounds(population):\n            return np.clip(population, -5.0, 5.0)\n\n        def mutate(population, target_idx, f):\n            candidates = list(range(len(population)))\n            candidates.remove(target_idx)\n            a, b, c = np.random.choice(candidates, 3, replace=False)\n            mutant = population[a] + f * (population[b] - population[c])\n            return clip_bounds(mutant)\n\n        def adapt_f(population, target_idx, f):\n            if np.random.rand() < self.p:\n                f = np.random.uniform(0, 1)\n            return f\n\n        def crossover(target, mutant):\n            trial = np.copy(target)\n            crossover_points = np.random.rand(self.dim) < self.cr\n            if not np.any(crossover_points):\n                crossover_points[np.random.randint(0, self.dim)] = True\n            trial[crossover_points] = mutant[crossover_points]\n            return trial\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                f = adapt_f(population, i, self.f)\n                mutant = mutate(population, i, f)\n                trial = crossover(population[i], mutant)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n        return best_solution", "name": "ADE_DE_PSO_Optimizer", "description": "Enhancing the DE_PSO_Optimizer algorithm by incorporating Adaptive Differential Evolution (ADE) to improve exploration-exploitation balance and overcome local optima.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f3e8fed2-1f6c-4459-9a27-d574665fdde1", "metadata": {"aucs": [0.8123214706141486, 0.8140378262087054, 0.8240844263942627, 0.803878335184801, 0.8136241886849247, 0.8183825954829442, 0.7984822932002742, 0.8151225469031844, 0.8218023670536987, 0.6385195303768835, 0.6579571580118335, 0.6820703843899064, 0.6849010113683427, 0.6961712806278039, 0.6648363918346313, 0.6698228420038996, 0.6802187949986089, 0.6725454283976227, 0.3481853186607963, 0.39028336970907196, 0.322863756188817, 0.342003462818836, 0.3538121649241105, 0.16241724483643372, 0.2596483420289927, 0.34790537648841524, 0.23289033338935528, 0.12913197346123284, 0.17462778927099776, 0.17564965082098494, 0.13455683584624845, 0.1804596587385302, 0.17809515254315123, 0.1446798283195443, 0.13187921429245908, 0.14289995374473075, 0.8555961543806561, 0.9509285951561381, 0.8813530102840721, 0.9382019791555604, 0.9099816471796325, 0.9185689039784932, 0.9361184891372755, 0.9399851727718789, 0.8257066390924963, 0.5343667500826654, 0.5503500703076449, 0.49706136463079276, 0.550893465862691, 0.47812848819416776, 0.5891759107295056, 0.5164150770884739, 0.5405451995373886, 0.5303693343748241, 0.8073146822087436, 0.7856093153368697, 0.7343397889235013, 0.7939240326436944, 0.7944938010568672, 0.8198844584549083, 0.8080952420624778, 0.7722511480153406, 0.7888982250129256, 0.23030963056532405, 0.18991077897317687, 0.23317652078816387, 0.25822098774223035, 0.31408296026532334, 0.36573025756575284, 0.2577554894076699, 0.18179026533803289, 0.3477488780125729, 0.38516876461489846, 0.1540413896999907, 0.17502424591624854, 0.3018226770760818, 0.15896841693306618, 0.5806512464014226, 0.2554721031625128, 0.24210014457104867, 0.24330753263321736, 0.45597733066582413, 0.41029160143694177, 0.4197560233280546, 0.509508645047845, 0.4689399903728426, 0.3922122762487863, 0.5065516269509481, 0.45282185589003443, 0.4719013151419489, 0.5997536978814872, 0.6113796792542265, 0.5911829253791281, 0.5979115124965446, 0.5174834093165535, 0.5623535103353778, 0.5800618054861086, 0.59741226674047, 0.6082383982061269, 0.06927766819401127, 0.1521523076443585, 0.16126209416141524, 0.2868027435711844, 0.23570704723910707, 0.28491114224786973, 0.13299934178110284, 0.18042950199685803, 0.2766417778479795, 0.3417463111121729, 0.33847997571744937, 0.3360480794679036, 0.3846837073951298, 0.353562209479902, 0.35898962760917397, 0.3455950961442713, 0.32827313223709254, 0.3214596911350788, 0.7414594026003806, 0.7110053273423895, 0.7546701229505215, 0.7226967379749013, 0.7106615236272287, 0.7091382381062472, 0.7239232040809433, 0.7186208760975241, 0.7636938842769497, 0.13473106225365827, 0.12307493964656224, 0.14243870486761256, 0.1321956842465455, 0.12781427858359584, 0.14969018920626753, 0.1517114240646521, 0.1399525984229827, 0.1426138163154954, 0.19311787950415993, 0.3985733159053185, 0.4934655458859476, 0.22827768394070003, 0.21727667783672233, 0.1833369836815757, 0.28468939321812115, 0.15350837122912142, 0.1852193206747198, 0.43528138969813945, 0.42419664508345833, 0.45694754109865576, 0.44611928364249875, 0.479068057251291, 0.4609774894404495, 0.45337847354312943, 0.5077006013278818, 0.46384237977493126, 0.3218464631676228, 0.34883938789712354, 0.3513229142502503, 0.36937473491227024, 0.3231302674890676, 0.3529834529041833, 0.39071434064014154, 0.36374479898749434, 0.40257003562480764, 0.19879211244653716, 0.2152973507693412, 0.20381968952013507, 0.20426984136687454, 0.19993034599712045, 0.2100883265886151, 0.18182073483929662, 0.21772531886693292, 0.18535712144533878, 0.3547835823183314, 0.4120553882356013, 0.2050679281278024, 0.5055214799728107, 0.3873383440376795, 0.22891263494592717, 0.5322115193347791, 0.26106410616605125, 0.2164041555983497, 0.756637749868074, 0.19871370031491697, 0.7334473655312477, 0.8071631735586942, 0.18378680842077444, 0.18449144913253557, 0.6917835291318689, 0.5843984970937546, 0.8177548342191308, 0.6627345760046397, 0.20688433201562173, 0.6557911300777555, 0.1593629018245425, 0.7529382081366355, 0.7146035469327021, 0.20794810104881456, 0.7838316696383101, 0.20679231883950566, 0.19625891214407043, 0.18373776864888003, 0.19850606673584148, 0.18922581961274676, 0.18327265727985353, 0.18776474129349818, 0.18920094673140908, 0.18060322425782527, 0.1811306322791777, 0.08198993603628402, 0.08729906478971172, 0.07459737261186272, 0.08787056998849618, 0.08546875880628246, 0.08218028917939191, 0.09287096810978024, 0.0859129223610593, 0.07707775465246636]}, "mutation_prompt": null}
{"id": "b742edd6-ebfe-46f5-b50d-b45a1f6aad5f", "solution": "import numpy as np\n\nclass Dynamic_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, pop_size=50, c1=2.0, c2=2.0, w=0.7, f=0.5, cr=0.9, p=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.c1 = c1\n        self.c2 = c2\n        self.w = w\n        self.f = f\n        self.cr = cr\n        self.p = p\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(ind) for ind in population])\n\n        def clip_bounds(population):\n            return np.clip(population, -5.0, 5.0)\n\n        def mutate(population, target_idx, f):\n            candidates = list(range(len(population)))\n            candidates.remove(target_idx)\n            a, b, c = np.random.choice(candidates, 3, replace=False)\n            mutant = population[a] + f * (population[b] - population[c])\n            return clip_bounds(mutant)\n\n        def adapt_f(population, target_idx, f):\n            if np.random.rand() < self.p:\n                f = np.random.uniform(0, 1)\n            return f\n\n        def adjust_f(population, f):\n            diversity = np.mean(np.std(population, axis=0))\n            f = f * np.exp(-self.p * diversity)\n            return f\n\n        def crossover(target, mutant):\n            trial = np.copy(target)\n            crossover_points = np.random.rand(self.dim) < self.cr\n            if not np.any(crossover_points):\n                crossover_points[np.random.randint(0, self.dim)] = True\n            trial[crossover_points] = mutant[crossover_points]\n            return trial\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                f = adapt_f(population, i, self.f)\n                f = adjust_f(population, f)  # New line for dynamic mutation factor adaptation\n                mutant = mutate(population, i, f)\n                trial = crossover(population[i], mutant)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n        return best_solution", "name": "Dynamic_DE_PSO_Optimizer", "description": "Improving DE_PSO_Optimizer by incorporating a dynamic mechanism to adjust the mutation factor based on population diversity to enhance exploration and exploitation.", "configspace": "", "generation": 39, "fitness": 0.4297439464409878, "feedback": "The algorithm Dynamic_DE_PSO_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.43 with standard deviation 0.26.", "error": "", "parent_id": "f3e8fed2-1f6c-4459-9a27-d574665fdde1", "metadata": {"aucs": [0.8415483320083317, 0.7873734851969789, 0.8208808188951524, 0.7968317770074933, 0.8325281512880215, 0.8272777054416194, 0.8271262860501101, 0.8323831676002205, 0.8181720814009356, 0.7175307743728203, 0.72130816045329, 0.6856890470051182, 0.7013491858505024, 0.7188101000831255, 0.7058090837628903, 0.7005074414011923, 0.7166751413437723, 0.13248636011923154, 0.4481775897642457, 0.16102923138644654, 0.4367880666108337, 0.3219191331850335, 0.1509365529628116, 0.377243101950949, 0.4095006832910977, 0.44595334805735665, 0.15532262200074187, 0.13809757285034396, 0.1361915757158083, 0.11516920968260258, 0.14613427521767353, 0.22911290826525166, 0.151737800167288, 0.13880238662463684, 0.11119125394176244, 0.15544200383027185, 0.8743370348690453, 0.8867117120609392, 0.8202366863092585, 0.8639084180893842, 0.8941788249323595, 0.8082501977703898, 0.8544252756764904, 0.8543604125483817, 0.8888734804478887, 0.5744826161629303, 0.4990439103576192, 0.47197792815808515, 0.4514284564293579, 0.43521704856130194, 0.4696054848577018, 0.5437448683615151, 0.5310316375509425, 0.60035876775151, 0.22811658500048193, 0.8469526501122752, 0.8105368552861398, 0.8821213207203665, 0.2707250022530432, 0.8452292686281677, 0.7823594917233916, 0.6628786920221681, 0.7890969796028133, 0.4603532283884616, 0.3877592763404131, 0.268807891850954, 0.5132702592579393, 0.3009966760656976, 0.6399506148770595, 0.20807985059275258, 0.4445581216905875, 0.6181984321201806, 0.30942627605161355, 0.3326397968306458, 0.1608892210430629, 0.1749878119831747, 0.21524064113644759, 0.43136284441578276, 0.2842849611404469, 0.3014713077306115, 0.3247999997958966, 9.999999999998899e-05, 0.5420255724431384, 0.5167132287147271, 0.323623210693478, 0.5236202492560686, 0.03582664293776583, 0.4961863160446829, 0.5983685556635396, 0.48004169927687823, 0.5751253318349361, 0.6023216541096823, 0.6765215155203397, 0.09569981795327731, 0.1327458453878797, 0.06657917606497121, 0.3967835739020187, 0.6609248232643044, 0.39831270863378765, 0.0789125263977809, 0.25837529774824197, 0.14761951524700612, 0.26941640692550883, 0.37390483165996746, 0.22667063106565877, 0.14796595651761657, 0.1526360340075551, 0.26586715630625746, 0.401238492885285, 0.3016090297452153, 0.3927266672695702, 0.4099603080875881, 0.4161333248714256, 0.37792551322591217, 0.3724271730527302, 0.3498130471339609, 0.36362638907756284, 0.7476894586672209, 0.7643255296485678, 0.7551894266165657, 0.7664103654213383, 0.7428808778224834, 0.7324945902419097, 0.7456933441538313, 0.6885754212652295, 0.7580606973847237, 0.42811269293543086, 0.14023066925309902, 0.10670569028533317, 0.1406691271832491, 0.09772123272890199, 0.16371495763749244, 0.1326531405400656, 0.11788054082511534, 0.16773572817661409, 0.6868691877063224, 0.5713913005760239, 0.5309481753150553, 0.37953433688543214, 0.6106076061235983, 0.314816965812432, 0.1926880972945808, 0.5123652832968015, 0.5125182995620365, 0.4835676863453505, 0.4660311947908924, 0.4808107951434111, 0.5267577888222441, 0.48228727834468044, 0.503222362960514, 0.5096342561306109, 0.5134198656542641, 0.49642041101932943, 0.39478153057249354, 0.36527659798553924, 0.3749038312930758, 0.389917400507931, 0.3353589314285699, 0.3837320301256505, 0.40312839777059384, 0.391779303767258, 0.3847962728292338, 0.21026365337211628, 0.22614358433930037, 0.2218321701020638, 0.2250482954759514, 0.2030028089441399, 0.22166026096906555, 0.22894392952207965, 0.22843827879566903, 0.22141354291605542, 0.23948428157452517, 0.21788039690686845, 0.23209716514423484, 0.6323247915792307, 0.7276185432482504, 0.22753716020817816, 0.23116820489455325, 0.2095363873696986, 0.2383927323253613, 0.18727057050597484, 0.18533370685014028, 0.7980098114208879, 0.879165869841122, 0.8618013365217025, 0.1973429465049138, 0.8234543070425426, 0.8684006477823741, 0.8597041019336726, 0.7552653818676855, 0.21084529289173048, 0.7955936385588998, 0.208066081343396, 0.832113022434438, 0.16617950435428208, 0.7530512572127844, 0.7738087910020401, 0.15323970621043426, 0.19212286733565198, 0.18884072021162834, 0.18645151134852433, 0.2201990884926236, 0.1742758643179808, 0.18670923575454967, 0.1839366627946203, 0.17766393401910097, 0.1934857351664151, 0.10854033480544945, 0.07898219760305658, 0.0893484705276576, 0.10244739581337559, 0.08211042189359996, 0.08303260433089732, 0.0851538042370803, 0.09383507122744528, 0.0931642152883072]}, "mutation_prompt": null}
{"id": "0be30209-42ca-48ce-83db-5f8d194a197a", "solution": "import numpy as np\n\nclass Dynamic_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, pop_size=50, c1=2.0, c2=2.0, w=0.7, f=0.5, cr=0.9, p=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.c1 = c1\n        self.c2 = c2\n        self.w = w\n        self.f = f\n        self.cr = cr\n        self.p = p\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(ind) for ind in population])\n\n        def clip_bounds(population):\n            return np.clip(population, -5.0, 5.0)\n\n        def mutate(population, target_idx, f):\n            candidates = list(range(len(population)))\n            candidates.remove(target_idx)\n            a, b, c = np.random.choice(candidates, 3, replace=False)\n            mutant = population[a] + f * (population[b] - population[c])\n            return clip_bounds(mutant)\n\n        def adapt_f(population, target_idx, f):\n            if np.random.rand() < self.p:\n                f = np.random.uniform(0, 1)\n            return f\n\n        def adjust_f(population, f):\n            diversity = np.mean(np.std(population, axis=0))\n            f = f * np.exp(-self.p * diversity)\n            return f\n\n        def crossover(target, mutant):\n            trial = np.copy(target)\n            crossover_points = np.random.rand(self.dim) < self.cr\n            if not np.any(crossover_points):\n                crossover_points[np.random.randint(0, self.dim)] = True\n            trial[crossover_points] = mutant[crossover_points]\n            return trial\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                f = adapt_f(population, i, self.f)\n                f = adjust_f(population, f)  # New line for dynamic mutation factor adaptation\n                mutant = mutate(population, i, f)\n                trial = crossover(population[i], mutant)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n        return best_solution", "name": "Dynamic_DE_PSO_Optimizer", "description": "Improving DE_PSO_Optimizer by incorporating a dynamic mechanism to adjust the mutation factor based on population diversity to enhance exploration and exploitation.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b742edd6-ebfe-46f5-b50d-b45a1f6aad5f", "metadata": {"aucs": [0.8415483320083317, 0.7873734851969789, 0.8208808188951524, 0.7968317770074933, 0.8325281512880215, 0.8272777054416194, 0.8271262860501101, 0.8323831676002205, 0.8181720814009356, 0.7175307743728203, 0.72130816045329, 0.6856890470051182, 0.7013491858505024, 0.7188101000831255, 0.7058090837628903, 0.7005074414011923, 0.7166751413437723, 0.13248636011923154, 0.4481775897642457, 0.16102923138644654, 0.4367880666108337, 0.3219191331850335, 0.1509365529628116, 0.377243101950949, 0.4095006832910977, 0.44595334805735665, 0.15532262200074187, 0.13809757285034396, 0.1361915757158083, 0.11516920968260258, 0.14613427521767353, 0.22911290826525166, 0.151737800167288, 0.13880238662463684, 0.11119125394176244, 0.15544200383027185, 0.8743370348690453, 0.8867117120609392, 0.8202366863092585, 0.8639084180893842, 0.8941788249323595, 0.8082501977703898, 0.8544252756764904, 0.8543604125483817, 0.8888734804478887, 0.5744826161629303, 0.4990439103576192, 0.47197792815808515, 0.4514284564293579, 0.43521704856130194, 0.4696054848577018, 0.5437448683615151, 0.5310316375509425, 0.60035876775151, 0.22811658500048193, 0.8469526501122752, 0.8105368552861398, 0.8821213207203665, 0.2707250022530432, 0.8452292686281677, 0.7823594917233916, 0.6628786920221681, 0.7890969796028133, 0.4603532283884616, 0.3877592763404131, 0.268807891850954, 0.5132702592579393, 0.3009966760656976, 0.6399506148770595, 0.20807985059275258, 0.4445581216905875, 0.6181984321201806, 0.30942627605161355, 0.3326397968306458, 0.1608892210430629, 0.1749878119831747, 0.21524064113644759, 0.43136284441578276, 0.2842849611404469, 0.3014713077306115, 0.3247999997958966, 9.999999999998899e-05, 0.5420255724431384, 0.5167132287147271, 0.323623210693478, 0.5236202492560686, 0.03582664293776583, 0.4961863160446829, 0.5983685556635396, 0.48004169927687823, 0.5751253318349361, 0.6023216541096823, 0.6765215155203397, 0.09569981795327731, 0.1327458453878797, 0.06657917606497121, 0.3967835739020187, 0.6609248232643044, 0.39831270863378765, 0.0789125263977809, 0.25837529774824197, 0.14761951524700612, 0.26941640692550883, 0.37390483165996746, 0.22667063106565877, 0.14796595651761657, 0.1526360340075551, 0.26586715630625746, 0.401238492885285, 0.3016090297452153, 0.3927266672695702, 0.4099603080875881, 0.4161333248714256, 0.37792551322591217, 0.3724271730527302, 0.3498130471339609, 0.36362638907756284, 0.7476894586672209, 0.7643255296485678, 0.7551894266165657, 0.7664103654213383, 0.7428808778224834, 0.7324945902419097, 0.7456933441538313, 0.6885754212652295, 0.7580606973847237, 0.42811269293543086, 0.14023066925309902, 0.10670569028533317, 0.1406691271832491, 0.09772123272890199, 0.16371495763749244, 0.1326531405400656, 0.11788054082511534, 0.16773572817661409, 0.6868691877063224, 0.5713913005760239, 0.5309481753150553, 0.37953433688543214, 0.6106076061235983, 0.314816965812432, 0.1926880972945808, 0.5123652832968015, 0.5125182995620365, 0.4835676863453505, 0.4660311947908924, 0.4808107951434111, 0.5267577888222441, 0.48228727834468044, 0.503222362960514, 0.5096342561306109, 0.5134198656542641, 0.49642041101932943, 0.39478153057249354, 0.36527659798553924, 0.3749038312930758, 0.389917400507931, 0.3353589314285699, 0.3837320301256505, 0.40312839777059384, 0.391779303767258, 0.3847962728292338, 0.21026365337211628, 0.22614358433930037, 0.2218321701020638, 0.2250482954759514, 0.2030028089441399, 0.22166026096906555, 0.22894392952207965, 0.22843827879566903, 0.22141354291605542, 0.23948428157452517, 0.21788039690686845, 0.23209716514423484, 0.6323247915792307, 0.7276185432482504, 0.22753716020817816, 0.23116820489455325, 0.2095363873696986, 0.2383927323253613, 0.18727057050597484, 0.18533370685014028, 0.7980098114208879, 0.879165869841122, 0.8618013365217025, 0.1973429465049138, 0.8234543070425426, 0.8684006477823741, 0.8597041019336726, 0.7552653818676855, 0.21084529289173048, 0.7955936385588998, 0.208066081343396, 0.832113022434438, 0.16617950435428208, 0.7530512572127844, 0.7738087910020401, 0.15323970621043426, 0.19212286733565198, 0.18884072021162834, 0.18645151134852433, 0.2201990884926236, 0.1742758643179808, 0.18670923575454967, 0.1839366627946203, 0.17766393401910097, 0.1934857351664151, 0.10854033480544945, 0.07898219760305658, 0.0893484705276576, 0.10244739581337559, 0.08211042189359996, 0.08303260433089732, 0.0851538042370803, 0.09383507122744528, 0.0931642152883072]}, "mutation_prompt": null}
{"id": "8184b045-39c9-4d1e-9aa9-953aa22c38cd", "solution": "import numpy as np\n\nclass Dynamic_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, pop_size=50, c1=2.0, c2=2.0, w=0.7, f=0.5, cr=0.9, p=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.c1 = c1\n        self.c2 = c2\n        self.w = w\n        self.f = f\n        self.cr = cr\n        self.p = p\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(ind) for ind in population])\n\n        def clip_bounds(population):\n            return np.clip(population, -5.0, 5.0)\n\n        def mutate(population, target_idx, f):\n            candidates = list(range(len(population)))\n            candidates.remove(target_idx)\n            a, b, c = np.random.choice(candidates, 3, replace=False)\n            mutant = population[a] + f * (population[b] - population[c])\n            return clip_bounds(mutant)\n\n        def adapt_f(population, target_idx, f):\n            if np.random.rand() < self.p:\n                f = np.random.uniform(0, 1)\n            return f\n\n        def adjust_f(population, f):\n            diversity = np.mean(np.std(population, axis=0))\n            f = f * np.exp(-self.p * diversity)\n            return f\n\n        def crossover(target, mutant):\n            trial = np.copy(target)\n            crossover_points = np.random.rand(self.dim) < self.cr\n            if not np.any(crossover_points):\n                crossover_points[np.random.randint(0, self.dim)] = True\n            trial[crossover_points] = mutant[crossover_points]\n            return trial\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                f = adapt_f(population, i, self.f)\n                f = adjust_f(population, f)  # New line for dynamic mutation factor adaptation\n                mutant = mutate(population, i, f)\n                trial = crossover(population[i], mutant)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n        return best_solution", "name": "Dynamic_DE_PSO_Optimizer", "description": "Improving DE_PSO_Optimizer by incorporating a dynamic mechanism to adjust the mutation factor based on population diversity to enhance exploration and exploitation.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b742edd6-ebfe-46f5-b50d-b45a1f6aad5f", "metadata": {"aucs": [0.8415483320083317, 0.7873734851969789, 0.8208808188951524, 0.7968317770074933, 0.8325281512880215, 0.8272777054416194, 0.8271262860501101, 0.8323831676002205, 0.8181720814009356, 0.7175307743728203, 0.72130816045329, 0.6856890470051182, 0.7013491858505024, 0.7188101000831255, 0.7058090837628903, 0.7005074414011923, 0.7166751413437723, 0.13248636011923154, 0.4481775897642457, 0.16102923138644654, 0.4367880666108337, 0.3219191331850335, 0.1509365529628116, 0.377243101950949, 0.4095006832910977, 0.44595334805735665, 0.15532262200074187, 0.13809757285034396, 0.1361915757158083, 0.11516920968260258, 0.14613427521767353, 0.22911290826525166, 0.151737800167288, 0.13880238662463684, 0.11119125394176244, 0.15544200383027185, 0.8743370348690453, 0.8867117120609392, 0.8202366863092585, 0.8639084180893842, 0.8941788249323595, 0.8082501977703898, 0.8544252756764904, 0.8543604125483817, 0.8888734804478887, 0.5744826161629303, 0.4990439103576192, 0.47197792815808515, 0.4514284564293579, 0.43521704856130194, 0.4696054848577018, 0.5437448683615151, 0.5310316375509425, 0.60035876775151, 0.22811658500048193, 0.8469526501122752, 0.8105368552861398, 0.8821213207203665, 0.2707250022530432, 0.8452292686281677, 0.7823594917233916, 0.6628786920221681, 0.7890969796028133, 0.4603532283884616, 0.3877592763404131, 0.268807891850954, 0.5132702592579393, 0.3009966760656976, 0.6399506148770595, 0.20807985059275258, 0.4445581216905875, 0.6181984321201806, 0.30942627605161355, 0.3326397968306458, 0.1608892210430629, 0.1749878119831747, 0.21524064113644759, 0.43136284441578276, 0.2842849611404469, 0.3014713077306115, 0.3247999997958966, 9.999999999998899e-05, 0.5420255724431384, 0.5167132287147271, 0.323623210693478, 0.5236202492560686, 0.03582664293776583, 0.4961863160446829, 0.5983685556635396, 0.48004169927687823, 0.5751253318349361, 0.6023216541096823, 0.6765215155203397, 0.09569981795327731, 0.1327458453878797, 0.06657917606497121, 0.3967835739020187, 0.6609248232643044, 0.39831270863378765, 0.0789125263977809, 0.25837529774824197, 0.14761951524700612, 0.26941640692550883, 0.37390483165996746, 0.22667063106565877, 0.14796595651761657, 0.1526360340075551, 0.26586715630625746, 0.401238492885285, 0.3016090297452153, 0.3927266672695702, 0.4099603080875881, 0.4161333248714256, 0.37792551322591217, 0.3724271730527302, 0.3498130471339609, 0.36362638907756284, 0.7476894586672209, 0.7643255296485678, 0.7551894266165657, 0.7664103654213383, 0.7428808778224834, 0.7324945902419097, 0.7456933441538313, 0.6885754212652295, 0.7580606973847237, 0.42811269293543086, 0.14023066925309902, 0.10670569028533317, 0.1406691271832491, 0.09772123272890199, 0.16371495763749244, 0.1326531405400656, 0.11788054082511534, 0.16773572817661409, 0.6868691877063224, 0.5713913005760239, 0.5309481753150553, 0.37953433688543214, 0.6106076061235983, 0.314816965812432, 0.1926880972945808, 0.5123652832968015, 0.5125182995620365, 0.4835676863453505, 0.4660311947908924, 0.4808107951434111, 0.5267577888222441, 0.48228727834468044, 0.503222362960514, 0.5096342561306109, 0.5134198656542641, 0.49642041101932943, 0.39478153057249354, 0.36527659798553924, 0.3749038312930758, 0.389917400507931, 0.3353589314285699, 0.3837320301256505, 0.40312839777059384, 0.391779303767258, 0.3847962728292338, 0.21026365337211628, 0.22614358433930037, 0.2218321701020638, 0.2250482954759514, 0.2030028089441399, 0.22166026096906555, 0.22894392952207965, 0.22843827879566903, 0.22141354291605542, 0.23948428157452517, 0.21788039690686845, 0.23209716514423484, 0.6323247915792307, 0.7276185432482504, 0.22753716020817816, 0.23116820489455325, 0.2095363873696986, 0.2383927323253613, 0.18727057050597484, 0.18533370685014028, 0.7980098114208879, 0.879165869841122, 0.8618013365217025, 0.1973429465049138, 0.8234543070425426, 0.8684006477823741, 0.8597041019336726, 0.7552653818676855, 0.21084529289173048, 0.7955936385588998, 0.208066081343396, 0.832113022434438, 0.16617950435428208, 0.7530512572127844, 0.7738087910020401, 0.15323970621043426, 0.19212286733565198, 0.18884072021162834, 0.18645151134852433, 0.2201990884926236, 0.1742758643179808, 0.18670923575454967, 0.1839366627946203, 0.17766393401910097, 0.1934857351664151, 0.10854033480544945, 0.07898219760305658, 0.0893484705276576, 0.10244739581337559, 0.08211042189359996, 0.08303260433089732, 0.0851538042370803, 0.09383507122744528, 0.0931642152883072]}, "mutation_prompt": null}
{"id": "11f64577-6fbb-44dc-a2a1-b804432d2772", "solution": "import numpy as np\n\nclass Dynamic_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, pop_size=50, c1=2.0, c2=2.0, w=0.7, f=0.5, cr=0.9, p=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.c1 = c1\n        self.c2 = c2\n        self.w = w\n        self.f = f\n        self.cr = cr\n        self.p = p\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(ind) for ind in population])\n\n        def clip_bounds(population):\n            return np.clip(population, -5.0, 5.0)\n\n        def mutate(population, target_idx, f):\n            candidates = list(range(len(population)))\n            candidates.remove(target_idx)\n            a, b, c = np.random.choice(candidates, 3, replace=False)\n            mutant = population[a] + f * (population[b] - population[c])\n            return clip_bounds(mutant)\n\n        def adapt_f(population, target_idx, f):\n            if np.random.rand() < self.p:\n                f = np.random.uniform(0, 1)\n            return f\n\n        def adjust_f(population, f):\n            diversity = np.mean(np.std(population, axis=0))\n            f = f * np.exp(-self.p * diversity)\n            return f\n\n        def crossover(target, mutant):\n            trial = np.copy(target)\n            crossover_points = np.random.rand(self.dim) < self.cr\n            if not np.any(crossover_points):\n                crossover_points[np.random.randint(0, self.dim)] = True\n            trial[crossover_points] = mutant[crossover_points]\n            return trial\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                f = adapt_f(population, i, self.f)\n                f = adjust_f(population, f)  # New line for dynamic mutation factor adaptation\n                mutant = mutate(population, i, f)\n                trial = crossover(population[i], mutant)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n        return best_solution", "name": "Dynamic_DE_PSO_Optimizer", "description": "Improving DE_PSO_Optimizer by incorporating a dynamic mechanism to adjust the mutation factor based on population diversity to enhance exploration and exploitation.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b742edd6-ebfe-46f5-b50d-b45a1f6aad5f", "metadata": {"aucs": [0.8415483320083317, 0.7873734851969789, 0.8208808188951524, 0.7968317770074933, 0.8325281512880215, 0.8272777054416194, 0.8271262860501101, 0.8323831676002205, 0.8181720814009356, 0.7175307743728203, 0.72130816045329, 0.6856890470051182, 0.7013491858505024, 0.7188101000831255, 0.7058090837628903, 0.7005074414011923, 0.7166751413437723, 0.13248636011923154, 0.4481775897642457, 0.16102923138644654, 0.4367880666108337, 0.3219191331850335, 0.1509365529628116, 0.377243101950949, 0.4095006832910977, 0.44595334805735665, 0.15532262200074187, 0.13809757285034396, 0.1361915757158083, 0.11516920968260258, 0.14613427521767353, 0.22911290826525166, 0.151737800167288, 0.13880238662463684, 0.11119125394176244, 0.15544200383027185, 0.8743370348690453, 0.8867117120609392, 0.8202366863092585, 0.8639084180893842, 0.8941788249323595, 0.8082501977703898, 0.8544252756764904, 0.8543604125483817, 0.8888734804478887, 0.5744826161629303, 0.4990439103576192, 0.47197792815808515, 0.4514284564293579, 0.43521704856130194, 0.4696054848577018, 0.5437448683615151, 0.5310316375509425, 0.60035876775151, 0.22811658500048193, 0.8469526501122752, 0.8105368552861398, 0.8821213207203665, 0.2707250022530432, 0.8452292686281677, 0.7823594917233916, 0.6628786920221681, 0.7890969796028133, 0.4603532283884616, 0.3877592763404131, 0.268807891850954, 0.5132702592579393, 0.3009966760656976, 0.6399506148770595, 0.20807985059275258, 0.4445581216905875, 0.6181984321201806, 0.30942627605161355, 0.3326397968306458, 0.1608892210430629, 0.1749878119831747, 0.21524064113644759, 0.43136284441578276, 0.2842849611404469, 0.3014713077306115, 0.3247999997958966, 9.999999999998899e-05, 0.5420255724431384, 0.5167132287147271, 0.323623210693478, 0.5236202492560686, 0.03582664293776583, 0.4961863160446829, 0.5983685556635396, 0.48004169927687823, 0.5751253318349361, 0.6023216541096823, 0.6765215155203397, 0.09569981795327731, 0.1327458453878797, 0.06657917606497121, 0.3967835739020187, 0.6609248232643044, 0.39831270863378765, 0.0789125263977809, 0.25837529774824197, 0.14761951524700612, 0.26941640692550883, 0.37390483165996746, 0.22667063106565877, 0.14796595651761657, 0.1526360340075551, 0.26586715630625746, 0.401238492885285, 0.3016090297452153, 0.3927266672695702, 0.4099603080875881, 0.4161333248714256, 0.37792551322591217, 0.3724271730527302, 0.3498130471339609, 0.36362638907756284, 0.7476894586672209, 0.7643255296485678, 0.7551894266165657, 0.7664103654213383, 0.7428808778224834, 0.7324945902419097, 0.7456933441538313, 0.6885754212652295, 0.7580606973847237, 0.42811269293543086, 0.14023066925309902, 0.10670569028533317, 0.1406691271832491, 0.09772123272890199, 0.16371495763749244, 0.1326531405400656, 0.11788054082511534, 0.16773572817661409, 0.6868691877063224, 0.5713913005760239, 0.5309481753150553, 0.37953433688543214, 0.6106076061235983, 0.314816965812432, 0.1926880972945808, 0.5123652832968015, 0.5125182995620365, 0.4835676863453505, 0.4660311947908924, 0.4808107951434111, 0.5267577888222441, 0.48228727834468044, 0.503222362960514, 0.5096342561306109, 0.5134198656542641, 0.49642041101932943, 0.39478153057249354, 0.36527659798553924, 0.3749038312930758, 0.389917400507931, 0.3353589314285699, 0.3837320301256505, 0.40312839777059384, 0.391779303767258, 0.3847962728292338, 0.21026365337211628, 0.22614358433930037, 0.2218321701020638, 0.2250482954759514, 0.2030028089441399, 0.22166026096906555, 0.22894392952207965, 0.22843827879566903, 0.22141354291605542, 0.23948428157452517, 0.21788039690686845, 0.23209716514423484, 0.6323247915792307, 0.7276185432482504, 0.22753716020817816, 0.23116820489455325, 0.2095363873696986, 0.2383927323253613, 0.18727057050597484, 0.18533370685014028, 0.7980098114208879, 0.879165869841122, 0.8618013365217025, 0.1973429465049138, 0.8234543070425426, 0.8684006477823741, 0.8597041019336726, 0.7552653818676855, 0.21084529289173048, 0.7955936385588998, 0.208066081343396, 0.832113022434438, 0.16617950435428208, 0.7530512572127844, 0.7738087910020401, 0.15323970621043426, 0.19212286733565198, 0.18884072021162834, 0.18645151134852433, 0.2201990884926236, 0.1742758643179808, 0.18670923575454967, 0.1839366627946203, 0.17766393401910097, 0.1934857351664151, 0.10854033480544945, 0.07898219760305658, 0.0893484705276576, 0.10244739581337559, 0.08211042189359996, 0.08303260433089732, 0.0851538042370803, 0.09383507122744528, 0.0931642152883072]}, "mutation_prompt": null}
{"id": "ae01f549-d23e-407a-99fb-e45198a18bf7", "solution": "import numpy as np\n\nclass Dynamic_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, pop_size=50, c1=2.0, c2=2.0, w=0.7, f=0.5, cr=0.9, p=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.c1 = c1\n        self.c2 = c2\n        self.w = w\n        self.f = f\n        self.cr = cr\n        self.p = p\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(ind) for ind in population])\n\n        def clip_bounds(population):\n            return np.clip(population, -5.0, 5.0)\n\n        def mutate(population, target_idx, f):\n            candidates = list(range(len(population)))\n            candidates.remove(target_idx)\n            a, b, c = np.random.choice(candidates, 3, replace=False)\n            mutant = population[a] + f * (population[b] - population[c])\n            return clip_bounds(mutant)\n\n        def adapt_f(population, target_idx, f):\n            if np.random.rand() < self.p:\n                f = np.random.uniform(0, 1)\n            return f\n\n        def adjust_f(population, f):\n            diversity = np.mean(np.std(population, axis=0))\n            f = f * np.exp(-self.p * diversity)\n            return f\n\n        def crossover(target, mutant):\n            trial = np.copy(target)\n            crossover_points = np.random.rand(self.dim) < self.cr\n            if not np.any(crossover_points):\n                crossover_points[np.random.randint(0, self.dim)] = True\n            trial[crossover_points] = mutant[crossover_points]\n            return trial\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                f = adapt_f(population, i, self.f)\n                f = adjust_f(population, f)  # New line for dynamic mutation factor adaptation\n                mutant = mutate(population, i, f)\n                trial = crossover(population[i], mutant)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n        return best_solution", "name": "Dynamic_DE_PSO_Optimizer", "description": "Improving DE_PSO_Optimizer by incorporating a dynamic mechanism to adjust the mutation factor based on population diversity to enhance exploration and exploitation.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b742edd6-ebfe-46f5-b50d-b45a1f6aad5f", "metadata": {"aucs": [0.8415483320083317, 0.7873734851969789, 0.8208808188951524, 0.7968317770074933, 0.8325281512880215, 0.8272777054416194, 0.8271262860501101, 0.8323831676002205, 0.8181720814009356, 0.7175307743728203, 0.72130816045329, 0.6856890470051182, 0.7013491858505024, 0.7188101000831255, 0.7058090837628903, 0.7005074414011923, 0.7166751413437723, 0.13248636011923154, 0.4481775897642457, 0.16102923138644654, 0.4367880666108337, 0.3219191331850335, 0.1509365529628116, 0.377243101950949, 0.4095006832910977, 0.44595334805735665, 0.15532262200074187, 0.13809757285034396, 0.1361915757158083, 0.11516920968260258, 0.14613427521767353, 0.22911290826525166, 0.151737800167288, 0.13880238662463684, 0.11119125394176244, 0.15544200383027185, 0.8743370348690453, 0.8867117120609392, 0.8202366863092585, 0.8639084180893842, 0.8941788249323595, 0.8082501977703898, 0.8544252756764904, 0.8543604125483817, 0.8888734804478887, 0.5744826161629303, 0.4990439103576192, 0.47197792815808515, 0.4514284564293579, 0.43521704856130194, 0.4696054848577018, 0.5437448683615151, 0.5310316375509425, 0.60035876775151, 0.22811658500048193, 0.8469526501122752, 0.8105368552861398, 0.8821213207203665, 0.2707250022530432, 0.8452292686281677, 0.7823594917233916, 0.6628786920221681, 0.7890969796028133, 0.4603532283884616, 0.3877592763404131, 0.268807891850954, 0.5132702592579393, 0.3009966760656976, 0.6399506148770595, 0.20807985059275258, 0.4445581216905875, 0.6181984321201806, 0.30942627605161355, 0.3326397968306458, 0.1608892210430629, 0.1749878119831747, 0.21524064113644759, 0.43136284441578276, 0.2842849611404469, 0.3014713077306115, 0.3247999997958966, 9.999999999998899e-05, 0.5420255724431384, 0.5167132287147271, 0.323623210693478, 0.5236202492560686, 0.03582664293776583, 0.4961863160446829, 0.5983685556635396, 0.48004169927687823, 0.5751253318349361, 0.6023216541096823, 0.6765215155203397, 0.09569981795327731, 0.1327458453878797, 0.06657917606497121, 0.3967835739020187, 0.6609248232643044, 0.39831270863378765, 0.0789125263977809, 0.25837529774824197, 0.14761951524700612, 0.26941640692550883, 0.37390483165996746, 0.22667063106565877, 0.14796595651761657, 0.1526360340075551, 0.26586715630625746, 0.401238492885285, 0.3016090297452153, 0.3927266672695702, 0.4099603080875881, 0.4161333248714256, 0.37792551322591217, 0.3724271730527302, 0.3498130471339609, 0.36362638907756284, 0.7476894586672209, 0.7643255296485678, 0.7551894266165657, 0.7664103654213383, 0.7428808778224834, 0.7324945902419097, 0.7456933441538313, 0.6885754212652295, 0.7580606973847237, 0.42811269293543086, 0.14023066925309902, 0.10670569028533317, 0.1406691271832491, 0.09772123272890199, 0.16371495763749244, 0.1326531405400656, 0.11788054082511534, 0.16773572817661409, 0.6868691877063224, 0.5713913005760239, 0.5309481753150553, 0.37953433688543214, 0.6106076061235983, 0.314816965812432, 0.1926880972945808, 0.5123652832968015, 0.5125182995620365, 0.4835676863453505, 0.4660311947908924, 0.4808107951434111, 0.5267577888222441, 0.48228727834468044, 0.503222362960514, 0.5096342561306109, 0.5134198656542641, 0.49642041101932943, 0.39478153057249354, 0.36527659798553924, 0.3749038312930758, 0.389917400507931, 0.3353589314285699, 0.3837320301256505, 0.40312839777059384, 0.391779303767258, 0.3847962728292338, 0.21026365337211628, 0.22614358433930037, 0.2218321701020638, 0.2250482954759514, 0.2030028089441399, 0.22166026096906555, 0.22894392952207965, 0.22843827879566903, 0.22141354291605542, 0.23948428157452517, 0.21788039690686845, 0.23209716514423484, 0.6323247915792307, 0.7276185432482504, 0.22753716020817816, 0.23116820489455325, 0.2095363873696986, 0.2383927323253613, 0.18727057050597484, 0.18533370685014028, 0.7980098114208879, 0.879165869841122, 0.8618013365217025, 0.1973429465049138, 0.8234543070425426, 0.8684006477823741, 0.8597041019336726, 0.7552653818676855, 0.21084529289173048, 0.7955936385588998, 0.208066081343396, 0.832113022434438, 0.16617950435428208, 0.7530512572127844, 0.7738087910020401, 0.15323970621043426, 0.19212286733565198, 0.18884072021162834, 0.18645151134852433, 0.2201990884926236, 0.1742758643179808, 0.18670923575454967, 0.1839366627946203, 0.17766393401910097, 0.1934857351664151, 0.10854033480544945, 0.07898219760305658, 0.0893484705276576, 0.10244739581337559, 0.08211042189359996, 0.08303260433089732, 0.0851538042370803, 0.09383507122744528, 0.0931642152883072]}, "mutation_prompt": null}
{"id": "26bc945a-64dd-41d4-91c9-ebe043f5382c", "solution": "import numpy as np\n\nclass Dynamic_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, pop_size=50, c1=2.0, c2=2.0, w=0.7, f=0.5, cr=0.9, p=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.c1 = c1\n        self.c2 = c2\n        self.w = w\n        self.f = f\n        self.cr = cr\n        self.p = p\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(ind) for ind in population])\n\n        def clip_bounds(population):\n            return np.clip(population, -5.0, 5.0)\n\n        def mutate(population, target_idx, f):\n            candidates = list(range(len(population)))\n            candidates.remove(target_idx)\n            a, b, c = np.random.choice(candidates, 3, replace=False)\n            mutant = population[a] + f * (population[b] - population[c])\n            return clip_bounds(mutant)\n\n        def adapt_f(population, target_idx, f):\n            if np.random.rand() < self.p:\n                f = np.random.uniform(0, 1)\n            return f\n\n        def adjust_f(population, f):\n            diversity = np.mean(np.std(population, axis=0))\n            f = f * np.exp(-self.p * diversity)\n            return f\n\n        def crossover(target, mutant):\n            trial = np.copy(target)\n            crossover_points = np.random.rand(self.dim) < self.cr\n            if not np.any(crossover_points):\n                crossover_points[np.random.randint(0, self.dim)] = True\n            trial[crossover_points] = mutant[crossover_points]\n            return trial\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                f = adapt_f(population, i, self.f)\n                f = adjust_f(population, f)  # New line for dynamic mutation factor adaptation\n                mutant = mutate(population, i, f)\n                trial = crossover(population[i], mutant)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n        return best_solution", "name": "Dynamic_DE_PSO_Optimizer", "description": "Improving DE_PSO_Optimizer by incorporating a dynamic mechanism to adjust the mutation factor based on population diversity to enhance exploration and exploitation.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b742edd6-ebfe-46f5-b50d-b45a1f6aad5f", "metadata": {"aucs": [0.8415483320083317, 0.7873734851969789, 0.8208808188951524, 0.7968317770074933, 0.8325281512880215, 0.8272777054416194, 0.8271262860501101, 0.8323831676002205, 0.8181720814009356, 0.7175307743728203, 0.72130816045329, 0.6856890470051182, 0.7013491858505024, 0.7188101000831255, 0.7058090837628903, 0.7005074414011923, 0.7166751413437723, 0.13248636011923154, 0.4481775897642457, 0.16102923138644654, 0.4367880666108337, 0.3219191331850335, 0.1509365529628116, 0.377243101950949, 0.4095006832910977, 0.44595334805735665, 0.15532262200074187, 0.13809757285034396, 0.1361915757158083, 0.11516920968260258, 0.14613427521767353, 0.22911290826525166, 0.151737800167288, 0.13880238662463684, 0.11119125394176244, 0.15544200383027185, 0.8743370348690453, 0.8867117120609392, 0.8202366863092585, 0.8639084180893842, 0.8941788249323595, 0.8082501977703898, 0.8544252756764904, 0.8543604125483817, 0.8888734804478887, 0.5744826161629303, 0.4990439103576192, 0.47197792815808515, 0.4514284564293579, 0.43521704856130194, 0.4696054848577018, 0.5437448683615151, 0.5310316375509425, 0.60035876775151, 0.22811658500048193, 0.8469526501122752, 0.8105368552861398, 0.8821213207203665, 0.2707250022530432, 0.8452292686281677, 0.7823594917233916, 0.6628786920221681, 0.7890969796028133, 0.4603532283884616, 0.3877592763404131, 0.268807891850954, 0.5132702592579393, 0.3009966760656976, 0.6399506148770595, 0.20807985059275258, 0.4445581216905875, 0.6181984321201806, 0.30942627605161355, 0.3326397968306458, 0.1608892210430629, 0.1749878119831747, 0.21524064113644759, 0.43136284441578276, 0.2842849611404469, 0.3014713077306115, 0.3247999997958966, 9.999999999998899e-05, 0.5420255724431384, 0.5167132287147271, 0.323623210693478, 0.5236202492560686, 0.03582664293776583, 0.4961863160446829, 0.5983685556635396, 0.48004169927687823, 0.5751253318349361, 0.6023216541096823, 0.6765215155203397, 0.09569981795327731, 0.1327458453878797, 0.06657917606497121, 0.3967835739020187, 0.6609248232643044, 0.39831270863378765, 0.0789125263977809, 0.25837529774824197, 0.14761951524700612, 0.26941640692550883, 0.37390483165996746, 0.22667063106565877, 0.14796595651761657, 0.1526360340075551, 0.26586715630625746, 0.401238492885285, 0.3016090297452153, 0.3927266672695702, 0.4099603080875881, 0.4161333248714256, 0.37792551322591217, 0.3724271730527302, 0.3498130471339609, 0.36362638907756284, 0.7476894586672209, 0.7643255296485678, 0.7551894266165657, 0.7664103654213383, 0.7428808778224834, 0.7324945902419097, 0.7456933441538313, 0.6885754212652295, 0.7580606973847237, 0.42811269293543086, 0.14023066925309902, 0.10670569028533317, 0.1406691271832491, 0.09772123272890199, 0.16371495763749244, 0.1326531405400656, 0.11788054082511534, 0.16773572817661409, 0.6868691877063224, 0.5713913005760239, 0.5309481753150553, 0.37953433688543214, 0.6106076061235983, 0.314816965812432, 0.1926880972945808, 0.5123652832968015, 0.5125182995620365, 0.4835676863453505, 0.4660311947908924, 0.4808107951434111, 0.5267577888222441, 0.48228727834468044, 0.503222362960514, 0.5096342561306109, 0.5134198656542641, 0.49642041101932943, 0.39478153057249354, 0.36527659798553924, 0.3749038312930758, 0.389917400507931, 0.3353589314285699, 0.3837320301256505, 0.40312839777059384, 0.391779303767258, 0.3847962728292338, 0.21026365337211628, 0.22614358433930037, 0.2218321701020638, 0.2250482954759514, 0.2030028089441399, 0.22166026096906555, 0.22894392952207965, 0.22843827879566903, 0.22141354291605542, 0.23948428157452517, 0.21788039690686845, 0.23209716514423484, 0.6323247915792307, 0.7276185432482504, 0.22753716020817816, 0.23116820489455325, 0.2095363873696986, 0.2383927323253613, 0.18727057050597484, 0.18533370685014028, 0.7980098114208879, 0.879165869841122, 0.8618013365217025, 0.1973429465049138, 0.8234543070425426, 0.8684006477823741, 0.8597041019336726, 0.7552653818676855, 0.21084529289173048, 0.7955936385588998, 0.208066081343396, 0.832113022434438, 0.16617950435428208, 0.7530512572127844, 0.7738087910020401, 0.15323970621043426, 0.19212286733565198, 0.18884072021162834, 0.18645151134852433, 0.2201990884926236, 0.1742758643179808, 0.18670923575454967, 0.1839366627946203, 0.17766393401910097, 0.1934857351664151, 0.10854033480544945, 0.07898219760305658, 0.0893484705276576, 0.10244739581337559, 0.08211042189359996, 0.08303260433089732, 0.0851538042370803, 0.09383507122744528, 0.0931642152883072]}, "mutation_prompt": null}
{"id": "49e6a93c-0983-4075-a47a-1a1846b45f98", "solution": "import numpy as np\n\nclass Dynamic_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, pop_size=50, c1=2.0, c2=2.0, w=0.7, f=0.5, cr=0.9, p=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.c1 = c1\n        self.c2 = c2\n        self.w = w\n        self.f = f\n        self.cr = cr\n        self.p = p\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(ind) for ind in population])\n\n        def clip_bounds(population):\n            return np.clip(population, -5.0, 5.0)\n\n        def mutate(population, target_idx, f):\n            candidates = list(range(len(population)))\n            candidates.remove(target_idx)\n            a, b, c = np.random.choice(candidates, 3, replace=False)\n            mutant = population[a] + f * (population[b] - population[c])\n            return clip_bounds(mutant)\n\n        def adapt_f(population, target_idx, f):\n            if np.random.rand() < self.p:\n                f = np.random.uniform(0, 1)\n            return f\n\n        def adjust_f(population, f):\n            diversity = np.mean(np.std(population, axis=0))\n            f = f * np.exp(-self.p * diversity)\n            return f\n\n        def crossover(target, mutant):\n            trial = np.copy(target)\n            crossover_points = np.random.rand(self.dim) < self.cr\n            if not np.any(crossover_points):\n                crossover_points[np.random.randint(0, self.dim)] = True\n            trial[crossover_points] = mutant[crossover_points]\n            return trial\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                f = adapt_f(population, i, self.f)\n                f = adjust_f(population, f)  # New line for dynamic mutation factor adaptation\n                mutant = mutate(population, i, f)\n                trial = crossover(population[i], mutant)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n        return best_solution", "name": "Dynamic_DE_PSO_Optimizer", "description": "Improving DE_PSO_Optimizer by incorporating a dynamic mechanism to adjust the mutation factor based on population diversity to enhance exploration and exploitation.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b742edd6-ebfe-46f5-b50d-b45a1f6aad5f", "metadata": {"aucs": [0.8415483320083317, 0.7873734851969789, 0.8208808188951524, 0.7968317770074933, 0.8325281512880215, 0.8272777054416194, 0.8271262860501101, 0.8323831676002205, 0.8181720814009356, 0.7175307743728203, 0.72130816045329, 0.6856890470051182, 0.7013491858505024, 0.7188101000831255, 0.7058090837628903, 0.7005074414011923, 0.7166751413437723, 0.13248636011923154, 0.4481775897642457, 0.16102923138644654, 0.4367880666108337, 0.3219191331850335, 0.1509365529628116, 0.377243101950949, 0.4095006832910977, 0.44595334805735665, 0.15532262200074187, 0.13809757285034396, 0.1361915757158083, 0.11516920968260258, 0.14613427521767353, 0.22911290826525166, 0.151737800167288, 0.13880238662463684, 0.11119125394176244, 0.15544200383027185, 0.8743370348690453, 0.8867117120609392, 0.8202366863092585, 0.8639084180893842, 0.8941788249323595, 0.8082501977703898, 0.8544252756764904, 0.8543604125483817, 0.8888734804478887, 0.5744826161629303, 0.4990439103576192, 0.47197792815808515, 0.4514284564293579, 0.43521704856130194, 0.4696054848577018, 0.5437448683615151, 0.5310316375509425, 0.60035876775151, 0.22811658500048193, 0.8469526501122752, 0.8105368552861398, 0.8821213207203665, 0.2707250022530432, 0.8452292686281677, 0.7823594917233916, 0.6628786920221681, 0.7890969796028133, 0.4603532283884616, 0.3877592763404131, 0.268807891850954, 0.5132702592579393, 0.3009966760656976, 0.6399506148770595, 0.20807985059275258, 0.4445581216905875, 0.6181984321201806, 0.30942627605161355, 0.3326397968306458, 0.1608892210430629, 0.1749878119831747, 0.21524064113644759, 0.43136284441578276, 0.2842849611404469, 0.3014713077306115, 0.3247999997958966, 9.999999999998899e-05, 0.5420255724431384, 0.5167132287147271, 0.323623210693478, 0.5236202492560686, 0.03582664293776583, 0.4961863160446829, 0.5983685556635396, 0.48004169927687823, 0.5751253318349361, 0.6023216541096823, 0.6765215155203397, 0.09569981795327731, 0.1327458453878797, 0.06657917606497121, 0.3967835739020187, 0.6609248232643044, 0.39831270863378765, 0.0789125263977809, 0.25837529774824197, 0.14761951524700612, 0.26941640692550883, 0.37390483165996746, 0.22667063106565877, 0.14796595651761657, 0.1526360340075551, 0.26586715630625746, 0.401238492885285, 0.3016090297452153, 0.3927266672695702, 0.4099603080875881, 0.4161333248714256, 0.37792551322591217, 0.3724271730527302, 0.3498130471339609, 0.36362638907756284, 0.7476894586672209, 0.7643255296485678, 0.7551894266165657, 0.7664103654213383, 0.7428808778224834, 0.7324945902419097, 0.7456933441538313, 0.6885754212652295, 0.7580606973847237, 0.42811269293543086, 0.14023066925309902, 0.10670569028533317, 0.1406691271832491, 0.09772123272890199, 0.16371495763749244, 0.1326531405400656, 0.11788054082511534, 0.16773572817661409, 0.6868691877063224, 0.5713913005760239, 0.5309481753150553, 0.37953433688543214, 0.6106076061235983, 0.314816965812432, 0.1926880972945808, 0.5123652832968015, 0.5125182995620365, 0.4835676863453505, 0.4660311947908924, 0.4808107951434111, 0.5267577888222441, 0.48228727834468044, 0.503222362960514, 0.5096342561306109, 0.5134198656542641, 0.49642041101932943, 0.39478153057249354, 0.36527659798553924, 0.3749038312930758, 0.389917400507931, 0.3353589314285699, 0.3837320301256505, 0.40312839777059384, 0.391779303767258, 0.3847962728292338, 0.21026365337211628, 0.22614358433930037, 0.2218321701020638, 0.2250482954759514, 0.2030028089441399, 0.22166026096906555, 0.22894392952207965, 0.22843827879566903, 0.22141354291605542, 0.23948428157452517, 0.21788039690686845, 0.23209716514423484, 0.6323247915792307, 0.7276185432482504, 0.22753716020817816, 0.23116820489455325, 0.2095363873696986, 0.2383927323253613, 0.18727057050597484, 0.18533370685014028, 0.7980098114208879, 0.879165869841122, 0.8618013365217025, 0.1973429465049138, 0.8234543070425426, 0.8684006477823741, 0.8597041019336726, 0.7552653818676855, 0.21084529289173048, 0.7955936385588998, 0.208066081343396, 0.832113022434438, 0.16617950435428208, 0.7530512572127844, 0.7738087910020401, 0.15323970621043426, 0.19212286733565198, 0.18884072021162834, 0.18645151134852433, 0.2201990884926236, 0.1742758643179808, 0.18670923575454967, 0.1839366627946203, 0.17766393401910097, 0.1934857351664151, 0.10854033480544945, 0.07898219760305658, 0.0893484705276576, 0.10244739581337559, 0.08211042189359996, 0.08303260433089732, 0.0851538042370803, 0.09383507122744528, 0.0931642152883072]}, "mutation_prompt": null}
{"id": "253944d8-a503-479b-b3ef-5c75707f2f81", "solution": "import numpy as np\n\nclass Dynamic_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, pop_size=50, c1=2.0, c2=2.0, w=0.7, f=0.5, cr=0.9, p=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.c1 = c1\n        self.c2 = c2\n        self.w = w\n        self.f = f\n        self.cr = cr\n        self.p = p\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(ind) for ind in population])\n\n        def clip_bounds(population):\n            return np.clip(population, -5.0, 5.0)\n\n        def mutate(population, target_idx, f):\n            candidates = list(range(len(population)))\n            candidates.remove(target_idx)\n            a, b, c = np.random.choice(candidates, 3, replace=False)\n            mutant = population[a] + f * (population[b] - population[c])\n            return clip_bounds(mutant)\n\n        def adapt_f(population, target_idx, f):\n            if np.random.rand() < self.p:\n                f = np.random.uniform(0, 1)\n            return f\n\n        def adjust_f(population, f):\n            diversity = np.mean(np.std(population, axis=0))\n            f = f * np.exp(-self.p * diversity)\n            return f\n\n        def crossover(target, mutant):\n            trial = np.copy(target)\n            crossover_points = np.random.rand(self.dim) < self.cr\n            if not np.any(crossover_points):\n                crossover_points[np.random.randint(0, self.dim)] = True\n            trial[crossover_points] = mutant[crossover_points]\n            return trial\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                f = adapt_f(population, i, self.f)\n                f = adjust_f(population, f)  # New line for dynamic mutation factor adaptation\n                mutant = mutate(population, i, f)\n                trial = crossover(population[i], mutant)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n        return best_solution", "name": "Dynamic_DE_PSO_Optimizer", "description": "Improving DE_PSO_Optimizer by incorporating a dynamic mechanism to adjust the mutation factor based on population diversity to enhance exploration and exploitation.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b742edd6-ebfe-46f5-b50d-b45a1f6aad5f", "metadata": {"aucs": [0.8415483320083317, 0.7873734851969789, 0.8208808188951524, 0.7968317770074933, 0.8325281512880215, 0.8272777054416194, 0.8271262860501101, 0.8323831676002205, 0.8181720814009356, 0.7175307743728203, 0.72130816045329, 0.6856890470051182, 0.7013491858505024, 0.7188101000831255, 0.7058090837628903, 0.7005074414011923, 0.7166751413437723, 0.13248636011923154, 0.4481775897642457, 0.16102923138644654, 0.4367880666108337, 0.3219191331850335, 0.1509365529628116, 0.377243101950949, 0.4095006832910977, 0.44595334805735665, 0.15532262200074187, 0.13809757285034396, 0.1361915757158083, 0.11516920968260258, 0.14613427521767353, 0.22911290826525166, 0.151737800167288, 0.13880238662463684, 0.11119125394176244, 0.15544200383027185, 0.8743370348690453, 0.8867117120609392, 0.8202366863092585, 0.8639084180893842, 0.8941788249323595, 0.8082501977703898, 0.8544252756764904, 0.8543604125483817, 0.8888734804478887, 0.5744826161629303, 0.4990439103576192, 0.47197792815808515, 0.4514284564293579, 0.43521704856130194, 0.4696054848577018, 0.5437448683615151, 0.5310316375509425, 0.60035876775151, 0.22811658500048193, 0.8469526501122752, 0.8105368552861398, 0.8821213207203665, 0.2707250022530432, 0.8452292686281677, 0.7823594917233916, 0.6628786920221681, 0.7890969796028133, 0.4603532283884616, 0.3877592763404131, 0.268807891850954, 0.5132702592579393, 0.3009966760656976, 0.6399506148770595, 0.20807985059275258, 0.4445581216905875, 0.6181984321201806, 0.30942627605161355, 0.3326397968306458, 0.1608892210430629, 0.1749878119831747, 0.21524064113644759, 0.43136284441578276, 0.2842849611404469, 0.3014713077306115, 0.3247999997958966, 9.999999999998899e-05, 0.5420255724431384, 0.5167132287147271, 0.323623210693478, 0.5236202492560686, 0.03582664293776583, 0.4961863160446829, 0.5983685556635396, 0.48004169927687823, 0.5751253318349361, 0.6023216541096823, 0.6765215155203397, 0.09569981795327731, 0.1327458453878797, 0.06657917606497121, 0.3967835739020187, 0.6609248232643044, 0.39831270863378765, 0.0789125263977809, 0.25837529774824197, 0.14761951524700612, 0.26941640692550883, 0.37390483165996746, 0.22667063106565877, 0.14796595651761657, 0.1526360340075551, 0.26586715630625746, 0.401238492885285, 0.3016090297452153, 0.3927266672695702, 0.4099603080875881, 0.4161333248714256, 0.37792551322591217, 0.3724271730527302, 0.3498130471339609, 0.36362638907756284, 0.7476894586672209, 0.7643255296485678, 0.7551894266165657, 0.7664103654213383, 0.7428808778224834, 0.7324945902419097, 0.7456933441538313, 0.6885754212652295, 0.7580606973847237, 0.42811269293543086, 0.14023066925309902, 0.10670569028533317, 0.1406691271832491, 0.09772123272890199, 0.16371495763749244, 0.1326531405400656, 0.11788054082511534, 0.16773572817661409, 0.6868691877063224, 0.5713913005760239, 0.5309481753150553, 0.37953433688543214, 0.6106076061235983, 0.314816965812432, 0.1926880972945808, 0.5123652832968015, 0.5125182995620365, 0.4835676863453505, 0.4660311947908924, 0.4808107951434111, 0.5267577888222441, 0.48228727834468044, 0.503222362960514, 0.5096342561306109, 0.5134198656542641, 0.49642041101932943, 0.39478153057249354, 0.36527659798553924, 0.3749038312930758, 0.389917400507931, 0.3353589314285699, 0.3837320301256505, 0.40312839777059384, 0.391779303767258, 0.3847962728292338, 0.21026365337211628, 0.22614358433930037, 0.2218321701020638, 0.2250482954759514, 0.2030028089441399, 0.22166026096906555, 0.22894392952207965, 0.22843827879566903, 0.22141354291605542, 0.23948428157452517, 0.21788039690686845, 0.23209716514423484, 0.6323247915792307, 0.7276185432482504, 0.22753716020817816, 0.23116820489455325, 0.2095363873696986, 0.2383927323253613, 0.18727057050597484, 0.18533370685014028, 0.7980098114208879, 0.879165869841122, 0.8618013365217025, 0.1973429465049138, 0.8234543070425426, 0.8684006477823741, 0.8597041019336726, 0.7552653818676855, 0.21084529289173048, 0.7955936385588998, 0.208066081343396, 0.832113022434438, 0.16617950435428208, 0.7530512572127844, 0.7738087910020401, 0.15323970621043426, 0.19212286733565198, 0.18884072021162834, 0.18645151134852433, 0.2201990884926236, 0.1742758643179808, 0.18670923575454967, 0.1839366627946203, 0.17766393401910097, 0.1934857351664151, 0.10854033480544945, 0.07898219760305658, 0.0893484705276576, 0.10244739581337559, 0.08211042189359996, 0.08303260433089732, 0.0851538042370803, 0.09383507122744528, 0.0931642152883072]}, "mutation_prompt": null}
{"id": "934e02af-8c2c-40d2-8b78-6d46e2bd1835", "solution": "import numpy as np\n\nclass Dynamic_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, pop_size=50, c1=2.0, c2=2.0, w=0.7, f=0.5, cr=0.9, p=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.c1 = c1\n        self.c2 = c2\n        self.w = w\n        self.f = f\n        self.cr = cr\n        self.p = p\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(ind) for ind in population])\n\n        def clip_bounds(population):\n            return np.clip(population, -5.0, 5.0)\n\n        def mutate(population, target_idx, f):\n            candidates = list(range(len(population)))\n            candidates.remove(target_idx)\n            a, b, c = np.random.choice(candidates, 3, replace=False)\n            mutant = population[a] + f * (population[b] - population[c])\n            return clip_bounds(mutant)\n\n        def adapt_f(population, target_idx, f):\n            if np.random.rand() < self.p:\n                f = np.random.uniform(0, 1)\n            return f\n\n        def adjust_f(population, f):\n            diversity = np.mean(np.std(population, axis=0))\n            f = f * np.exp(-self.p * diversity)\n            return f\n\n        def crossover(target, mutant):\n            trial = np.copy(target)\n            crossover_points = np.random.rand(self.dim) < self.cr\n            if not np.any(crossover_points):\n                crossover_points[np.random.randint(0, self.dim)] = True\n            trial[crossover_points] = mutant[crossover_points]\n            return trial\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                f = adapt_f(population, i, self.f)\n                f = adjust_f(population, f)  # New line for dynamic mutation factor adaptation\n                mutant = mutate(population, i, f)\n                trial = crossover(population[i], mutant)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n        return best_solution", "name": "Dynamic_DE_PSO_Optimizer", "description": "Improving DE_PSO_Optimizer by incorporating a dynamic mechanism to adjust the mutation factor based on population diversity to enhance exploration and exploitation.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b742edd6-ebfe-46f5-b50d-b45a1f6aad5f", "metadata": {"aucs": [0.8415483320083317, 0.7873734851969789, 0.8208808188951524, 0.7968317770074933, 0.8325281512880215, 0.8272777054416194, 0.8271262860501101, 0.8323831676002205, 0.8181720814009356, 0.7175307743728203, 0.72130816045329, 0.6856890470051182, 0.7013491858505024, 0.7188101000831255, 0.7058090837628903, 0.7005074414011923, 0.7166751413437723, 0.13248636011923154, 0.4481775897642457, 0.16102923138644654, 0.4367880666108337, 0.3219191331850335, 0.1509365529628116, 0.377243101950949, 0.4095006832910977, 0.44595334805735665, 0.15532262200074187, 0.13809757285034396, 0.1361915757158083, 0.11516920968260258, 0.14613427521767353, 0.22911290826525166, 0.151737800167288, 0.13880238662463684, 0.11119125394176244, 0.15544200383027185, 0.8743370348690453, 0.8867117120609392, 0.8202366863092585, 0.8639084180893842, 0.8941788249323595, 0.8082501977703898, 0.8544252756764904, 0.8543604125483817, 0.8888734804478887, 0.5744826161629303, 0.4990439103576192, 0.47197792815808515, 0.4514284564293579, 0.43521704856130194, 0.4696054848577018, 0.5437448683615151, 0.5310316375509425, 0.60035876775151, 0.22811658500048193, 0.8469526501122752, 0.8105368552861398, 0.8821213207203665, 0.2707250022530432, 0.8452292686281677, 0.7823594917233916, 0.6628786920221681, 0.7890969796028133, 0.4603532283884616, 0.3877592763404131, 0.268807891850954, 0.5132702592579393, 0.3009966760656976, 0.6399506148770595, 0.20807985059275258, 0.4445581216905875, 0.6181984321201806, 0.30942627605161355, 0.3326397968306458, 0.1608892210430629, 0.1749878119831747, 0.21524064113644759, 0.43136284441578276, 0.2842849611404469, 0.3014713077306115, 0.3247999997958966, 9.999999999998899e-05, 0.5420255724431384, 0.5167132287147271, 0.323623210693478, 0.5236202492560686, 0.03582664293776583, 0.4961863160446829, 0.5983685556635396, 0.48004169927687823, 0.5751253318349361, 0.6023216541096823, 0.6765215155203397, 0.09569981795327731, 0.1327458453878797, 0.06657917606497121, 0.3967835739020187, 0.6609248232643044, 0.39831270863378765, 0.0789125263977809, 0.25837529774824197, 0.14761951524700612, 0.26941640692550883, 0.37390483165996746, 0.22667063106565877, 0.14796595651761657, 0.1526360340075551, 0.26586715630625746, 0.401238492885285, 0.3016090297452153, 0.3927266672695702, 0.4099603080875881, 0.4161333248714256, 0.37792551322591217, 0.3724271730527302, 0.3498130471339609, 0.36362638907756284, 0.7476894586672209, 0.7643255296485678, 0.7551894266165657, 0.7664103654213383, 0.7428808778224834, 0.7324945902419097, 0.7456933441538313, 0.6885754212652295, 0.7580606973847237, 0.42811269293543086, 0.14023066925309902, 0.10670569028533317, 0.1406691271832491, 0.09772123272890199, 0.16371495763749244, 0.1326531405400656, 0.11788054082511534, 0.16773572817661409, 0.6868691877063224, 0.5713913005760239, 0.5309481753150553, 0.37953433688543214, 0.6106076061235983, 0.314816965812432, 0.1926880972945808, 0.5123652832968015, 0.5125182995620365, 0.4835676863453505, 0.4660311947908924, 0.4808107951434111, 0.5267577888222441, 0.48228727834468044, 0.503222362960514, 0.5096342561306109, 0.5134198656542641, 0.49642041101932943, 0.39478153057249354, 0.36527659798553924, 0.3749038312930758, 0.389917400507931, 0.3353589314285699, 0.3837320301256505, 0.40312839777059384, 0.391779303767258, 0.3847962728292338, 0.21026365337211628, 0.22614358433930037, 0.2218321701020638, 0.2250482954759514, 0.2030028089441399, 0.22166026096906555, 0.22894392952207965, 0.22843827879566903, 0.22141354291605542, 0.23948428157452517, 0.21788039690686845, 0.23209716514423484, 0.6323247915792307, 0.7276185432482504, 0.22753716020817816, 0.23116820489455325, 0.2095363873696986, 0.2383927323253613, 0.18727057050597484, 0.18533370685014028, 0.7980098114208879, 0.879165869841122, 0.8618013365217025, 0.1973429465049138, 0.8234543070425426, 0.8684006477823741, 0.8597041019336726, 0.7552653818676855, 0.21084529289173048, 0.7955936385588998, 0.208066081343396, 0.832113022434438, 0.16617950435428208, 0.7530512572127844, 0.7738087910020401, 0.15323970621043426, 0.19212286733565198, 0.18884072021162834, 0.18645151134852433, 0.2201990884926236, 0.1742758643179808, 0.18670923575454967, 0.1839366627946203, 0.17766393401910097, 0.1934857351664151, 0.10854033480544945, 0.07898219760305658, 0.0893484705276576, 0.10244739581337559, 0.08211042189359996, 0.08303260433089732, 0.0851538042370803, 0.09383507122744528, 0.0931642152883072]}, "mutation_prompt": null}
{"id": "3bd7af85-deaf-41e4-9243-986e8901b7a3", "solution": "import numpy as np\n\nclass Dynamic_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, pop_size=50, c1=2.0, c2=2.0, w=0.7, f=0.5, cr=0.9, p=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.c1 = c1\n        self.c2 = c2\n        self.w = w\n        self.f = f\n        self.cr = cr\n        self.p = p\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(ind) for ind in population])\n\n        def clip_bounds(population):\n            return np.clip(population, -5.0, 5.0)\n\n        def mutate(population, target_idx, f):\n            candidates = list(range(len(population)))\n            candidates.remove(target_idx)\n            a, b, c = np.random.choice(candidates, 3, replace=False)\n            mutant = population[a] + f * (population[b] - population[c])\n            return clip_bounds(mutant)\n\n        def adapt_f(population, target_idx, f):\n            if np.random.rand() < self.p:\n                f = np.random.uniform(0, 1)\n            return f\n\n        def adjust_f(population, f):\n            diversity = np.mean(np.std(population, axis=0))\n            f = f * np.exp(-self.p * diversity)\n            return f\n\n        def crossover(target, mutant):\n            trial = np.copy(target)\n            crossover_points = np.random.rand(self.dim) < self.cr\n            if not np.any(crossover_points):\n                crossover_points[np.random.randint(0, self.dim)] = True\n            trial[crossover_points] = mutant[crossover_points]\n            return trial\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                f = adapt_f(population, i, self.f)\n                f = adjust_f(population, f)  # New line for dynamic mutation factor adaptation\n                mutant = mutate(population, i, f)\n                trial = crossover(population[i], mutant)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n        return best_solution", "name": "Dynamic_DE_PSO_Optimizer", "description": "Improving DE_PSO_Optimizer by incorporating a dynamic mechanism to adjust the mutation factor based on population diversity to enhance exploration and exploitation.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b742edd6-ebfe-46f5-b50d-b45a1f6aad5f", "metadata": {"aucs": [0.8415483320083317, 0.7873734851969789, 0.8208808188951524, 0.7968317770074933, 0.8325281512880215, 0.8272777054416194, 0.8271262860501101, 0.8323831676002205, 0.8181720814009356, 0.7175307743728203, 0.72130816045329, 0.6856890470051182, 0.7013491858505024, 0.7188101000831255, 0.7058090837628903, 0.7005074414011923, 0.7166751413437723, 0.13248636011923154, 0.4481775897642457, 0.16102923138644654, 0.4367880666108337, 0.3219191331850335, 0.1509365529628116, 0.377243101950949, 0.4095006832910977, 0.44595334805735665, 0.15532262200074187, 0.13809757285034396, 0.1361915757158083, 0.11516920968260258, 0.14613427521767353, 0.22911290826525166, 0.151737800167288, 0.13880238662463684, 0.11119125394176244, 0.15544200383027185, 0.8743370348690453, 0.8867117120609392, 0.8202366863092585, 0.8639084180893842, 0.8941788249323595, 0.8082501977703898, 0.8544252756764904, 0.8543604125483817, 0.8888734804478887, 0.5744826161629303, 0.4990439103576192, 0.47197792815808515, 0.4514284564293579, 0.43521704856130194, 0.4696054848577018, 0.5437448683615151, 0.5310316375509425, 0.60035876775151, 0.22811658500048193, 0.8469526501122752, 0.8105368552861398, 0.8821213207203665, 0.2707250022530432, 0.8452292686281677, 0.7823594917233916, 0.6628786920221681, 0.7890969796028133, 0.4603532283884616, 0.3877592763404131, 0.268807891850954, 0.5132702592579393, 0.3009966760656976, 0.6399506148770595, 0.20807985059275258, 0.4445581216905875, 0.6181984321201806, 0.30942627605161355, 0.3326397968306458, 0.1608892210430629, 0.1749878119831747, 0.21524064113644759, 0.43136284441578276, 0.2842849611404469, 0.3014713077306115, 0.3247999997958966, 9.999999999998899e-05, 0.5420255724431384, 0.5167132287147271, 0.323623210693478, 0.5236202492560686, 0.03582664293776583, 0.4961863160446829, 0.5983685556635396, 0.48004169927687823, 0.5751253318349361, 0.6023216541096823, 0.6765215155203397, 0.09569981795327731, 0.1327458453878797, 0.06657917606497121, 0.3967835739020187, 0.6609248232643044, 0.39831270863378765, 0.0789125263977809, 0.25837529774824197, 0.14761951524700612, 0.26941640692550883, 0.37390483165996746, 0.22667063106565877, 0.14796595651761657, 0.1526360340075551, 0.26586715630625746, 0.401238492885285, 0.3016090297452153, 0.3927266672695702, 0.4099603080875881, 0.4161333248714256, 0.37792551322591217, 0.3724271730527302, 0.3498130471339609, 0.36362638907756284, 0.7476894586672209, 0.7643255296485678, 0.7551894266165657, 0.7664103654213383, 0.7428808778224834, 0.7324945902419097, 0.7456933441538313, 0.6885754212652295, 0.7580606973847237, 0.42811269293543086, 0.14023066925309902, 0.10670569028533317, 0.1406691271832491, 0.09772123272890199, 0.16371495763749244, 0.1326531405400656, 0.11788054082511534, 0.16773572817661409, 0.6868691877063224, 0.5713913005760239, 0.5309481753150553, 0.37953433688543214, 0.6106076061235983, 0.314816965812432, 0.1926880972945808, 0.5123652832968015, 0.5125182995620365, 0.4835676863453505, 0.4660311947908924, 0.4808107951434111, 0.5267577888222441, 0.48228727834468044, 0.503222362960514, 0.5096342561306109, 0.5134198656542641, 0.49642041101932943, 0.39478153057249354, 0.36527659798553924, 0.3749038312930758, 0.389917400507931, 0.3353589314285699, 0.3837320301256505, 0.40312839777059384, 0.391779303767258, 0.3847962728292338, 0.21026365337211628, 0.22614358433930037, 0.2218321701020638, 0.2250482954759514, 0.2030028089441399, 0.22166026096906555, 0.22894392952207965, 0.22843827879566903, 0.22141354291605542, 0.23948428157452517, 0.21788039690686845, 0.23209716514423484, 0.6323247915792307, 0.7276185432482504, 0.22753716020817816, 0.23116820489455325, 0.2095363873696986, 0.2383927323253613, 0.18727057050597484, 0.18533370685014028, 0.7980098114208879, 0.879165869841122, 0.8618013365217025, 0.1973429465049138, 0.8234543070425426, 0.8684006477823741, 0.8597041019336726, 0.7552653818676855, 0.21084529289173048, 0.7955936385588998, 0.208066081343396, 0.832113022434438, 0.16617950435428208, 0.7530512572127844, 0.7738087910020401, 0.15323970621043426, 0.19212286733565198, 0.18884072021162834, 0.18645151134852433, 0.2201990884926236, 0.1742758643179808, 0.18670923575454967, 0.1839366627946203, 0.17766393401910097, 0.1934857351664151, 0.10854033480544945, 0.07898219760305658, 0.0893484705276576, 0.10244739581337559, 0.08211042189359996, 0.08303260433089732, 0.0851538042370803, 0.09383507122744528, 0.0931642152883072]}, "mutation_prompt": null}
{"id": "5cbaa42c-1511-4977-85e2-ffde97f3260a", "solution": "import numpy as np\n\nclass Dynamic_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, pop_size=50, c1=2.0, c2=2.0, w=0.7, f=0.5, cr=0.9, p=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.c1 = c1\n        self.c2 = c2\n        self.w = w\n        self.f = f\n        self.cr = cr\n        self.p = p\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(ind) for ind in population])\n\n        def clip_bounds(population):\n            return np.clip(population, -5.0, 5.0)\n\n        def mutate(population, target_idx, f):\n            candidates = list(range(len(population)))\n            candidates.remove(target_idx)\n            a, b, c = np.random.choice(candidates, 3, replace=False)\n            mutant = population[a] + f * (population[b] - population[c])\n            return clip_bounds(mutant)\n\n        def adapt_f(population, target_idx, f):\n            if np.random.rand() < self.p:\n                f = np.random.uniform(0, 1)\n            return f\n\n        def adjust_f(population, f):\n            diversity = np.mean(np.std(population, axis=0))\n            f = f * np.exp(-self.p * diversity)\n            return f\n\n        def crossover(target, mutant):\n            trial = np.copy(target)\n            crossover_points = np.random.rand(self.dim) < self.cr\n            if not np.any(crossover_points):\n                crossover_points[np.random.randint(0, self.dim)] = True\n            trial[crossover_points] = mutant[crossover_points]\n            return trial\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                f = adapt_f(population, i, self.f)\n                f = adjust_f(population, f)  # New line for dynamic mutation factor adaptation\n                mutant = mutate(population, i, f)\n                trial = crossover(population[i], mutant)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n        return best_solution", "name": "Dynamic_DE_PSO_Optimizer", "description": "Improving DE_PSO_Optimizer by incorporating a dynamic mechanism to adjust the mutation factor based on population diversity to enhance exploration and exploitation.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b742edd6-ebfe-46f5-b50d-b45a1f6aad5f", "metadata": {"aucs": [0.8415483320083317, 0.7873734851969789, 0.8208808188951524, 0.7968317770074933, 0.8325281512880215, 0.8272777054416194, 0.8271262860501101, 0.8323831676002205, 0.8181720814009356, 0.7175307743728203, 0.72130816045329, 0.6856890470051182, 0.7013491858505024, 0.7188101000831255, 0.7058090837628903, 0.7005074414011923, 0.7166751413437723, 0.13248636011923154, 0.4481775897642457, 0.16102923138644654, 0.4367880666108337, 0.3219191331850335, 0.1509365529628116, 0.377243101950949, 0.4095006832910977, 0.44595334805735665, 0.15532262200074187, 0.13809757285034396, 0.1361915757158083, 0.11516920968260258, 0.14613427521767353, 0.22911290826525166, 0.151737800167288, 0.13880238662463684, 0.11119125394176244, 0.15544200383027185, 0.8743370348690453, 0.8867117120609392, 0.8202366863092585, 0.8639084180893842, 0.8941788249323595, 0.8082501977703898, 0.8544252756764904, 0.8543604125483817, 0.8888734804478887, 0.5744826161629303, 0.4990439103576192, 0.47197792815808515, 0.4514284564293579, 0.43521704856130194, 0.4696054848577018, 0.5437448683615151, 0.5310316375509425, 0.60035876775151, 0.22811658500048193, 0.8469526501122752, 0.8105368552861398, 0.8821213207203665, 0.2707250022530432, 0.8452292686281677, 0.7823594917233916, 0.6628786920221681, 0.7890969796028133, 0.4603532283884616, 0.3877592763404131, 0.268807891850954, 0.5132702592579393, 0.3009966760656976, 0.6399506148770595, 0.20807985059275258, 0.4445581216905875, 0.6181984321201806, 0.30942627605161355, 0.3326397968306458, 0.1608892210430629, 0.1749878119831747, 0.21524064113644759, 0.43136284441578276, 0.2842849611404469, 0.3014713077306115, 0.3247999997958966, 9.999999999998899e-05, 0.5420255724431384, 0.5167132287147271, 0.323623210693478, 0.5236202492560686, 0.03582664293776583, 0.4961863160446829, 0.5983685556635396, 0.48004169927687823, 0.5751253318349361, 0.6023216541096823, 0.6765215155203397, 0.09569981795327731, 0.1327458453878797, 0.06657917606497121, 0.3967835739020187, 0.6609248232643044, 0.39831270863378765, 0.0789125263977809, 0.25837529774824197, 0.14761951524700612, 0.26941640692550883, 0.37390483165996746, 0.22667063106565877, 0.14796595651761657, 0.1526360340075551, 0.26586715630625746, 0.401238492885285, 0.3016090297452153, 0.3927266672695702, 0.4099603080875881, 0.4161333248714256, 0.37792551322591217, 0.3724271730527302, 0.3498130471339609, 0.36362638907756284, 0.7476894586672209, 0.7643255296485678, 0.7551894266165657, 0.7664103654213383, 0.7428808778224834, 0.7324945902419097, 0.7456933441538313, 0.6885754212652295, 0.7580606973847237, 0.42811269293543086, 0.14023066925309902, 0.10670569028533317, 0.1406691271832491, 0.09772123272890199, 0.16371495763749244, 0.1326531405400656, 0.11788054082511534, 0.16773572817661409, 0.6868691877063224, 0.5713913005760239, 0.5309481753150553, 0.37953433688543214, 0.6106076061235983, 0.314816965812432, 0.1926880972945808, 0.5123652832968015, 0.5125182995620365, 0.4835676863453505, 0.4660311947908924, 0.4808107951434111, 0.5267577888222441, 0.48228727834468044, 0.503222362960514, 0.5096342561306109, 0.5134198656542641, 0.49642041101932943, 0.39478153057249354, 0.36527659798553924, 0.3749038312930758, 0.389917400507931, 0.3353589314285699, 0.3837320301256505, 0.40312839777059384, 0.391779303767258, 0.3847962728292338, 0.21026365337211628, 0.22614358433930037, 0.2218321701020638, 0.2250482954759514, 0.2030028089441399, 0.22166026096906555, 0.22894392952207965, 0.22843827879566903, 0.22141354291605542, 0.23948428157452517, 0.21788039690686845, 0.23209716514423484, 0.6323247915792307, 0.7276185432482504, 0.22753716020817816, 0.23116820489455325, 0.2095363873696986, 0.2383927323253613, 0.18727057050597484, 0.18533370685014028, 0.7980098114208879, 0.879165869841122, 0.8618013365217025, 0.1973429465049138, 0.8234543070425426, 0.8684006477823741, 0.8597041019336726, 0.7552653818676855, 0.21084529289173048, 0.7955936385588998, 0.208066081343396, 0.832113022434438, 0.16617950435428208, 0.7530512572127844, 0.7738087910020401, 0.15323970621043426, 0.19212286733565198, 0.18884072021162834, 0.18645151134852433, 0.2201990884926236, 0.1742758643179808, 0.18670923575454967, 0.1839366627946203, 0.17766393401910097, 0.1934857351664151, 0.10854033480544945, 0.07898219760305658, 0.0893484705276576, 0.10244739581337559, 0.08211042189359996, 0.08303260433089732, 0.0851538042370803, 0.09383507122744528, 0.0931642152883072]}, "mutation_prompt": null}
{"id": "d68c250a-2647-4ecc-9718-ae9657019d7c", "solution": "import numpy as np\n\nclass Dynamic_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, pop_size=50, c1=2.0, c2=2.0, w=0.7, f=0.5, cr=0.9, p=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.c1 = c1\n        self.c2 = c2\n        self.w = w\n        self.f = f\n        self.cr = cr\n        self.p = p\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(ind) for ind in population])\n\n        def clip_bounds(population):\n            return np.clip(population, -5.0, 5.0)\n\n        def mutate(population, target_idx, f):\n            candidates = list(range(len(population)))\n            candidates.remove(target_idx)\n            a, b, c = np.random.choice(candidates, 3, replace=False)\n            mutant = population[a] + f * (population[b] - population[c])\n            return clip_bounds(mutant)\n\n        def adapt_f(population, target_idx, f):\n            if np.random.rand() < self.p:\n                f = np.random.uniform(0, 1)\n            return f\n\n        def adjust_f(population, f):\n            diversity = np.mean(np.std(population, axis=0))\n            f = f * np.exp(-self.p * diversity)\n            return f\n\n        def crossover(target, mutant):\n            trial = np.copy(target)\n            crossover_points = np.random.rand(self.dim) < self.cr\n            if not np.any(crossover_points):\n                crossover_points[np.random.randint(0, self.dim)] = True\n            trial[crossover_points] = mutant[crossover_points]\n            return trial\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                f = adapt_f(population, i, self.f)\n                f = adjust_f(population, f)  # New line for dynamic mutation factor adaptation\n                mutant = mutate(population, i, f)\n                trial = crossover(population[i], mutant)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n        return best_solution", "name": "Dynamic_DE_PSO_Optimizer", "description": "Improving DE_PSO_Optimizer by incorporating a dynamic mechanism to adjust the mutation factor based on population diversity to enhance exploration and exploitation.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b742edd6-ebfe-46f5-b50d-b45a1f6aad5f", "metadata": {"aucs": [0.8415483320083317, 0.7873734851969789, 0.8208808188951524, 0.7968317770074933, 0.8325281512880215, 0.8272777054416194, 0.8271262860501101, 0.8323831676002205, 0.8181720814009356, 0.7175307743728203, 0.72130816045329, 0.6856890470051182, 0.7013491858505024, 0.7188101000831255, 0.7058090837628903, 0.7005074414011923, 0.7166751413437723, 0.13248636011923154, 0.4481775897642457, 0.16102923138644654, 0.4367880666108337, 0.3219191331850335, 0.1509365529628116, 0.377243101950949, 0.4095006832910977, 0.44595334805735665, 0.15532262200074187, 0.13809757285034396, 0.1361915757158083, 0.11516920968260258, 0.14613427521767353, 0.22911290826525166, 0.151737800167288, 0.13880238662463684, 0.11119125394176244, 0.15544200383027185, 0.8743370348690453, 0.8867117120609392, 0.8202366863092585, 0.8639084180893842, 0.8941788249323595, 0.8082501977703898, 0.8544252756764904, 0.8543604125483817, 0.8888734804478887, 0.5744826161629303, 0.4990439103576192, 0.47197792815808515, 0.4514284564293579, 0.43521704856130194, 0.4696054848577018, 0.5437448683615151, 0.5310316375509425, 0.60035876775151, 0.22811658500048193, 0.8469526501122752, 0.8105368552861398, 0.8821213207203665, 0.2707250022530432, 0.8452292686281677, 0.7823594917233916, 0.6628786920221681, 0.7890969796028133, 0.4603532283884616, 0.3877592763404131, 0.268807891850954, 0.5132702592579393, 0.3009966760656976, 0.6399506148770595, 0.20807985059275258, 0.4445581216905875, 0.6181984321201806, 0.30942627605161355, 0.3326397968306458, 0.1608892210430629, 0.1749878119831747, 0.21524064113644759, 0.43136284441578276, 0.2842849611404469, 0.3014713077306115, 0.3247999997958966, 9.999999999998899e-05, 0.5420255724431384, 0.5167132287147271, 0.323623210693478, 0.5236202492560686, 0.03582664293776583, 0.4961863160446829, 0.5983685556635396, 0.48004169927687823, 0.5751253318349361, 0.6023216541096823, 0.6765215155203397, 0.09569981795327731, 0.1327458453878797, 0.06657917606497121, 0.3967835739020187, 0.6609248232643044, 0.39831270863378765, 0.0789125263977809, 0.25837529774824197, 0.14761951524700612, 0.26941640692550883, 0.37390483165996746, 0.22667063106565877, 0.14796595651761657, 0.1526360340075551, 0.26586715630625746, 0.401238492885285, 0.3016090297452153, 0.3927266672695702, 0.4099603080875881, 0.4161333248714256, 0.37792551322591217, 0.3724271730527302, 0.3498130471339609, 0.36362638907756284, 0.7476894586672209, 0.7643255296485678, 0.7551894266165657, 0.7664103654213383, 0.7428808778224834, 0.7324945902419097, 0.7456933441538313, 0.6885754212652295, 0.7580606973847237, 0.42811269293543086, 0.14023066925309902, 0.10670569028533317, 0.1406691271832491, 0.09772123272890199, 0.16371495763749244, 0.1326531405400656, 0.11788054082511534, 0.16773572817661409, 0.6868691877063224, 0.5713913005760239, 0.5309481753150553, 0.37953433688543214, 0.6106076061235983, 0.314816965812432, 0.1926880972945808, 0.5123652832968015, 0.5125182995620365, 0.4835676863453505, 0.4660311947908924, 0.4808107951434111, 0.5267577888222441, 0.48228727834468044, 0.503222362960514, 0.5096342561306109, 0.5134198656542641, 0.49642041101932943, 0.39478153057249354, 0.36527659798553924, 0.3749038312930758, 0.389917400507931, 0.3353589314285699, 0.3837320301256505, 0.40312839777059384, 0.391779303767258, 0.3847962728292338, 0.21026365337211628, 0.22614358433930037, 0.2218321701020638, 0.2250482954759514, 0.2030028089441399, 0.22166026096906555, 0.22894392952207965, 0.22843827879566903, 0.22141354291605542, 0.23948428157452517, 0.21788039690686845, 0.23209716514423484, 0.6323247915792307, 0.7276185432482504, 0.22753716020817816, 0.23116820489455325, 0.2095363873696986, 0.2383927323253613, 0.18727057050597484, 0.18533370685014028, 0.7980098114208879, 0.879165869841122, 0.8618013365217025, 0.1973429465049138, 0.8234543070425426, 0.8684006477823741, 0.8597041019336726, 0.7552653818676855, 0.21084529289173048, 0.7955936385588998, 0.208066081343396, 0.832113022434438, 0.16617950435428208, 0.7530512572127844, 0.7738087910020401, 0.15323970621043426, 0.19212286733565198, 0.18884072021162834, 0.18645151134852433, 0.2201990884926236, 0.1742758643179808, 0.18670923575454967, 0.1839366627946203, 0.17766393401910097, 0.1934857351664151, 0.10854033480544945, 0.07898219760305658, 0.0893484705276576, 0.10244739581337559, 0.08211042189359996, 0.08303260433089732, 0.0851538042370803, 0.09383507122744528, 0.0931642152883072]}, "mutation_prompt": null}
{"id": "bfd818a2-2e5d-47ce-be78-de2c9f22e3e2", "solution": "import numpy as np\n\nclass Dynamic_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, pop_size=50, c1=2.0, c2=2.0, w=0.7, f=0.5, cr=0.9, p=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.c1 = c1\n        self.c2 = c2\n        self.w = w\n        self.f = f\n        self.cr = cr\n        self.p = p\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(ind) for ind in population])\n\n        def clip_bounds(population):\n            return np.clip(population, -5.0, 5.0)\n\n        def mutate(population, target_idx, f):\n            candidates = list(range(len(population)))\n            candidates.remove(target_idx)\n            a, b, c = np.random.choice(candidates, 3, replace=False)\n            mutant = population[a] + f * (population[b] - population[c])\n            return clip_bounds(mutant)\n\n        def adapt_f(population, target_idx, f):\n            if np.random.rand() < self.p:\n                f = np.random.uniform(0, 1)\n            return f\n\n        def adjust_f(population, f):\n            diversity = np.mean(np.std(population, axis=0))\n            f = f * np.exp(-self.p * diversity)\n            return f\n\n        def crossover(target, mutant):\n            trial = np.copy(target)\n            crossover_points = np.random.rand(self.dim) < self.cr\n            if not np.any(crossover_points):\n                crossover_points[np.random.randint(0, self.dim)] = True\n            trial[crossover_points] = mutant[crossover_points]\n            return trial\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                f = adapt_f(population, i, self.f)\n                f = adjust_f(population, f)  # New line for dynamic mutation factor adaptation\n                mutant = mutate(population, i, f)\n                trial = crossover(population[i], mutant)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n        return best_solution", "name": "Dynamic_DE_PSO_Optimizer", "description": "Improving DE_PSO_Optimizer by incorporating a dynamic mechanism to adjust the mutation factor based on population diversity to enhance exploration and exploitation.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b742edd6-ebfe-46f5-b50d-b45a1f6aad5f", "metadata": {"aucs": [0.8415483320083317, 0.7873734851969789, 0.8208808188951524, 0.7968317770074933, 0.8325281512880215, 0.8272777054416194, 0.8271262860501101, 0.8323831676002205, 0.8181720814009356, 0.7175307743728203, 0.72130816045329, 0.6856890470051182, 0.7013491858505024, 0.7188101000831255, 0.7058090837628903, 0.7005074414011923, 0.7166751413437723, 0.13248636011923154, 0.4481775897642457, 0.16102923138644654, 0.4367880666108337, 0.3219191331850335, 0.1509365529628116, 0.377243101950949, 0.4095006832910977, 0.44595334805735665, 0.15532262200074187, 0.13809757285034396, 0.1361915757158083, 0.11516920968260258, 0.14613427521767353, 0.22911290826525166, 0.151737800167288, 0.13880238662463684, 0.11119125394176244, 0.15544200383027185, 0.8743370348690453, 0.8867117120609392, 0.8202366863092585, 0.8639084180893842, 0.8941788249323595, 0.8082501977703898, 0.8544252756764904, 0.8543604125483817, 0.8888734804478887, 0.5744826161629303, 0.4990439103576192, 0.47197792815808515, 0.4514284564293579, 0.43521704856130194, 0.4696054848577018, 0.5437448683615151, 0.5310316375509425, 0.60035876775151, 0.22811658500048193, 0.8469526501122752, 0.8105368552861398, 0.8821213207203665, 0.2707250022530432, 0.8452292686281677, 0.7823594917233916, 0.6628786920221681, 0.7890969796028133, 0.4603532283884616, 0.3877592763404131, 0.268807891850954, 0.5132702592579393, 0.3009966760656976, 0.6399506148770595, 0.20807985059275258, 0.4445581216905875, 0.6181984321201806, 0.30942627605161355, 0.3326397968306458, 0.1608892210430629, 0.1749878119831747, 0.21524064113644759, 0.43136284441578276, 0.2842849611404469, 0.3014713077306115, 0.3247999997958966, 9.999999999998899e-05, 0.5420255724431384, 0.5167132287147271, 0.323623210693478, 0.5236202492560686, 0.03582664293776583, 0.4961863160446829, 0.5983685556635396, 0.48004169927687823, 0.5751253318349361, 0.6023216541096823, 0.6765215155203397, 0.09569981795327731, 0.1327458453878797, 0.06657917606497121, 0.3967835739020187, 0.6609248232643044, 0.39831270863378765, 0.0789125263977809, 0.25837529774824197, 0.14761951524700612, 0.26941640692550883, 0.37390483165996746, 0.22667063106565877, 0.14796595651761657, 0.1526360340075551, 0.26586715630625746, 0.401238492885285, 0.3016090297452153, 0.3927266672695702, 0.4099603080875881, 0.4161333248714256, 0.37792551322591217, 0.3724271730527302, 0.3498130471339609, 0.36362638907756284, 0.7476894586672209, 0.7643255296485678, 0.7551894266165657, 0.7664103654213383, 0.7428808778224834, 0.7324945902419097, 0.7456933441538313, 0.6885754212652295, 0.7580606973847237, 0.42811269293543086, 0.14023066925309902, 0.10670569028533317, 0.1406691271832491, 0.09772123272890199, 0.16371495763749244, 0.1326531405400656, 0.11788054082511534, 0.16773572817661409, 0.6868691877063224, 0.5713913005760239, 0.5309481753150553, 0.37953433688543214, 0.6106076061235983, 0.314816965812432, 0.1926880972945808, 0.5123652832968015, 0.5125182995620365, 0.4835676863453505, 0.4660311947908924, 0.4808107951434111, 0.5267577888222441, 0.48228727834468044, 0.503222362960514, 0.5096342561306109, 0.5134198656542641, 0.49642041101932943, 0.39478153057249354, 0.36527659798553924, 0.3749038312930758, 0.389917400507931, 0.3353589314285699, 0.3837320301256505, 0.40312839777059384, 0.391779303767258, 0.3847962728292338, 0.21026365337211628, 0.22614358433930037, 0.2218321701020638, 0.2250482954759514, 0.2030028089441399, 0.22166026096906555, 0.22894392952207965, 0.22843827879566903, 0.22141354291605542, 0.23948428157452517, 0.21788039690686845, 0.23209716514423484, 0.6323247915792307, 0.7276185432482504, 0.22753716020817816, 0.23116820489455325, 0.2095363873696986, 0.2383927323253613, 0.18727057050597484, 0.18533370685014028, 0.7980098114208879, 0.879165869841122, 0.8618013365217025, 0.1973429465049138, 0.8234543070425426, 0.8684006477823741, 0.8597041019336726, 0.7552653818676855, 0.21084529289173048, 0.7955936385588998, 0.208066081343396, 0.832113022434438, 0.16617950435428208, 0.7530512572127844, 0.7738087910020401, 0.15323970621043426, 0.19212286733565198, 0.18884072021162834, 0.18645151134852433, 0.2201990884926236, 0.1742758643179808, 0.18670923575454967, 0.1839366627946203, 0.17766393401910097, 0.1934857351664151, 0.10854033480544945, 0.07898219760305658, 0.0893484705276576, 0.10244739581337559, 0.08211042189359996, 0.08303260433089732, 0.0851538042370803, 0.09383507122744528, 0.0931642152883072]}, "mutation_prompt": null}
{"id": "93e9a3d9-0ae0-4c12-83c4-de9cad58e691", "solution": "import numpy as np\n\nclass Dynamic_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, pop_size=50, c1=2.0, c2=2.0, w=0.7, f=0.5, cr=0.9, p=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.c1 = c1\n        self.c2 = c2\n        self.w = w\n        self.f = f\n        self.cr = cr\n        self.p = p\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(ind) for ind in population])\n\n        def clip_bounds(population):\n            return np.clip(population, -5.0, 5.0)\n\n        def mutate(population, target_idx, f):\n            candidates = list(range(len(population)))\n            candidates.remove(target_idx)\n            a, b, c = np.random.choice(candidates, 3, replace=False)\n            mutant = population[a] + f * (population[b] - population[c])\n            return clip_bounds(mutant)\n\n        def adapt_f(population, target_idx, f):\n            if np.random.rand() < self.p:\n                f = np.random.uniform(0, 1)\n            return f\n\n        def adjust_f(population, f):\n            diversity = np.mean(np.std(population, axis=0))\n            f = f * np.exp(-self.p * diversity)\n            return f\n\n        def crossover(target, mutant):\n            trial = np.copy(target)\n            crossover_points = np.random.rand(self.dim) < self.cr\n            if not np.any(crossover_points):\n                crossover_points[np.random.randint(0, self.dim)] = True\n            trial[crossover_points] = mutant[crossover_points]\n            return trial\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                f = adapt_f(population, i, self.f)\n                f = adjust_f(population, f)  # New line for dynamic mutation factor adaptation\n                mutant = mutate(population, i, f)\n                trial = crossover(population[i], mutant)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n        return best_solution", "name": "Dynamic_DE_PSO_Optimizer", "description": "Improving DE_PSO_Optimizer by incorporating a dynamic mechanism to adjust the mutation factor based on population diversity to enhance exploration and exploitation.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b742edd6-ebfe-46f5-b50d-b45a1f6aad5f", "metadata": {"aucs": [0.8415483320083317, 0.7873734851969789, 0.8208808188951524, 0.7968317770074933, 0.8325281512880215, 0.8272777054416194, 0.8271262860501101, 0.8323831676002205, 0.8181720814009356, 0.7175307743728203, 0.72130816045329, 0.6856890470051182, 0.7013491858505024, 0.7188101000831255, 0.7058090837628903, 0.7005074414011923, 0.7166751413437723, 0.13248636011923154, 0.4481775897642457, 0.16102923138644654, 0.4367880666108337, 0.3219191331850335, 0.1509365529628116, 0.377243101950949, 0.4095006832910977, 0.44595334805735665, 0.15532262200074187, 0.13809757285034396, 0.1361915757158083, 0.11516920968260258, 0.14613427521767353, 0.22911290826525166, 0.151737800167288, 0.13880238662463684, 0.11119125394176244, 0.15544200383027185, 0.8743370348690453, 0.8867117120609392, 0.8202366863092585, 0.8639084180893842, 0.8941788249323595, 0.8082501977703898, 0.8544252756764904, 0.8543604125483817, 0.8888734804478887, 0.5744826161629303, 0.4990439103576192, 0.47197792815808515, 0.4514284564293579, 0.43521704856130194, 0.4696054848577018, 0.5437448683615151, 0.5310316375509425, 0.60035876775151, 0.22811658500048193, 0.8469526501122752, 0.8105368552861398, 0.8821213207203665, 0.2707250022530432, 0.8452292686281677, 0.7823594917233916, 0.6628786920221681, 0.7890969796028133, 0.4603532283884616, 0.3877592763404131, 0.268807891850954, 0.5132702592579393, 0.3009966760656976, 0.6399506148770595, 0.20807985059275258, 0.4445581216905875, 0.6181984321201806, 0.30942627605161355, 0.3326397968306458, 0.1608892210430629, 0.1749878119831747, 0.21524064113644759, 0.43136284441578276, 0.2842849611404469, 0.3014713077306115, 0.3247999997958966, 9.999999999998899e-05, 0.5420255724431384, 0.5167132287147271, 0.323623210693478, 0.5236202492560686, 0.03582664293776583, 0.4961863160446829, 0.5983685556635396, 0.48004169927687823, 0.5751253318349361, 0.6023216541096823, 0.6765215155203397, 0.09569981795327731, 0.1327458453878797, 0.06657917606497121, 0.3967835739020187, 0.6609248232643044, 0.39831270863378765, 0.0789125263977809, 0.25837529774824197, 0.14761951524700612, 0.26941640692550883, 0.37390483165996746, 0.22667063106565877, 0.14796595651761657, 0.1526360340075551, 0.26586715630625746, 0.401238492885285, 0.3016090297452153, 0.3927266672695702, 0.4099603080875881, 0.4161333248714256, 0.37792551322591217, 0.3724271730527302, 0.3498130471339609, 0.36362638907756284, 0.7476894586672209, 0.7643255296485678, 0.7551894266165657, 0.7664103654213383, 0.7428808778224834, 0.7324945902419097, 0.7456933441538313, 0.6885754212652295, 0.7580606973847237, 0.42811269293543086, 0.14023066925309902, 0.10670569028533317, 0.1406691271832491, 0.09772123272890199, 0.16371495763749244, 0.1326531405400656, 0.11788054082511534, 0.16773572817661409, 0.6868691877063224, 0.5713913005760239, 0.5309481753150553, 0.37953433688543214, 0.6106076061235983, 0.314816965812432, 0.1926880972945808, 0.5123652832968015, 0.5125182995620365, 0.4835676863453505, 0.4660311947908924, 0.4808107951434111, 0.5267577888222441, 0.48228727834468044, 0.503222362960514, 0.5096342561306109, 0.5134198656542641, 0.49642041101932943, 0.39478153057249354, 0.36527659798553924, 0.3749038312930758, 0.389917400507931, 0.3353589314285699, 0.3837320301256505, 0.40312839777059384, 0.391779303767258, 0.3847962728292338, 0.21026365337211628, 0.22614358433930037, 0.2218321701020638, 0.2250482954759514, 0.2030028089441399, 0.22166026096906555, 0.22894392952207965, 0.22843827879566903, 0.22141354291605542, 0.23948428157452517, 0.21788039690686845, 0.23209716514423484, 0.6323247915792307, 0.7276185432482504, 0.22753716020817816, 0.23116820489455325, 0.2095363873696986, 0.2383927323253613, 0.18727057050597484, 0.18533370685014028, 0.7980098114208879, 0.879165869841122, 0.8618013365217025, 0.1973429465049138, 0.8234543070425426, 0.8684006477823741, 0.8597041019336726, 0.7552653818676855, 0.21084529289173048, 0.7955936385588998, 0.208066081343396, 0.832113022434438, 0.16617950435428208, 0.7530512572127844, 0.7738087910020401, 0.15323970621043426, 0.19212286733565198, 0.18884072021162834, 0.18645151134852433, 0.2201990884926236, 0.1742758643179808, 0.18670923575454967, 0.1839366627946203, 0.17766393401910097, 0.1934857351664151, 0.10854033480544945, 0.07898219760305658, 0.0893484705276576, 0.10244739581337559, 0.08211042189359996, 0.08303260433089732, 0.0851538042370803, 0.09383507122744528, 0.0931642152883072]}, "mutation_prompt": null}
{"id": "6f3aa197-6cd1-431b-b760-ef7b16308440", "solution": "import numpy as np\n\nclass Novel_Hybrid_Algorithm:\n    def __init__(self, budget, dim, pop_size=50, c1=2.0, c2=2.0, w=0.7, f=0.5, cr=0.9, p=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.c1 = c1\n        self.c2 = c2\n        self.w = w\n        self.f = f\n        self.cr = cr\n        self.p = p\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(ind) for ind in population])\n\n        def clip_bounds(population):\n            return np.clip(population, -5.0, 5.0)\n\n        def mutate(population, target_idx, f):\n            candidates = list(range(len(population)))\n            candidates.remove(target_idx)\n            a, b, c = np.random.choice(candidates, 3, replace=False)\n            mutant = population[a] + f * (population[b] - population[c])\n            return clip_bounds(mutant)\n\n        def adapt_f(population, target_idx, f):\n            if np.random.rand() < self.p:\n                f = np.random.uniform(0, 1)\n            return f\n\n        def adjust_f(population, f):\n            diversity = np.mean(np.std(population, axis=0))\n            f = f * np.exp(-self.p * diversity)\n            return f\n\n        def crossover(target, mutant):\n            trial = np.copy(target)\n            crossover_points = np.random.rand(self.dim) < self.cr\n            if not np.any(crossover_points):\n                crossover_points[np.random.randint(0, self.dim)] = True\n            trial[crossover_points] = mutant[crossover_points]\n            return trial\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                f = adapt_f(population, i, self.f)\n                f = adjust_f(population, f)  # Dynamic mutation factor adaptation\n                mutant = mutate(population, i, f)\n                trial = crossover(population[i], mutant)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n        return best_solution", "name": "Novel_Hybrid_Algorithm", "description": "Introducing a Novel Hybrid Algorithm: Differential Particle Swarm Optimizer with Dynamic Mutation and Crossover Strategy for Enhanced Global Optimization", "configspace": "", "generation": 53, "fitness": 0.4297439464409878, "feedback": "The algorithm Novel_Hybrid_Algorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.43 with standard deviation 0.26.", "error": "", "parent_id": "b742edd6-ebfe-46f5-b50d-b45a1f6aad5f", "metadata": {"aucs": [0.8415483320083317, 0.7873734851969789, 0.8208808188951524, 0.7968317770074933, 0.8325281512880215, 0.8272777054416194, 0.8271262860501101, 0.8323831676002205, 0.8181720814009356, 0.7175307743728203, 0.72130816045329, 0.6856890470051182, 0.7013491858505024, 0.7188101000831255, 0.7058090837628903, 0.7005074414011923, 0.7166751413437723, 0.13248636011923154, 0.4481775897642457, 0.16102923138644654, 0.4367880666108337, 0.3219191331850335, 0.1509365529628116, 0.377243101950949, 0.4095006832910977, 0.44595334805735665, 0.15532262200074187, 0.13809757285034396, 0.1361915757158083, 0.11516920968260258, 0.14613427521767353, 0.22911290826525166, 0.151737800167288, 0.13880238662463684, 0.11119125394176244, 0.15544200383027185, 0.8743370348690453, 0.8867117120609392, 0.8202366863092585, 0.8639084180893842, 0.8941788249323595, 0.8082501977703898, 0.8544252756764904, 0.8543604125483817, 0.8888734804478887, 0.5744826161629303, 0.4990439103576192, 0.47197792815808515, 0.4514284564293579, 0.43521704856130194, 0.4696054848577018, 0.5437448683615151, 0.5310316375509425, 0.60035876775151, 0.22811658500048193, 0.8469526501122752, 0.8105368552861398, 0.8821213207203665, 0.2707250022530432, 0.8452292686281677, 0.7823594917233916, 0.6628786920221681, 0.7890969796028133, 0.4603532283884616, 0.3877592763404131, 0.268807891850954, 0.5132702592579393, 0.3009966760656976, 0.6399506148770595, 0.20807985059275258, 0.4445581216905875, 0.6181984321201806, 0.30942627605161355, 0.3326397968306458, 0.1608892210430629, 0.1749878119831747, 0.21524064113644759, 0.43136284441578276, 0.2842849611404469, 0.3014713077306115, 0.3247999997958966, 9.999999999998899e-05, 0.5420255724431384, 0.5167132287147271, 0.323623210693478, 0.5236202492560686, 0.03582664293776583, 0.4961863160446829, 0.5983685556635396, 0.48004169927687823, 0.5751253318349361, 0.6023216541096823, 0.6765215155203397, 0.09569981795327731, 0.1327458453878797, 0.06657917606497121, 0.3967835739020187, 0.6609248232643044, 0.39831270863378765, 0.0789125263977809, 0.25837529774824197, 0.14761951524700612, 0.26941640692550883, 0.37390483165996746, 0.22667063106565877, 0.14796595651761657, 0.1526360340075551, 0.26586715630625746, 0.401238492885285, 0.3016090297452153, 0.3927266672695702, 0.4099603080875881, 0.4161333248714256, 0.37792551322591217, 0.3724271730527302, 0.3498130471339609, 0.36362638907756284, 0.7476894586672209, 0.7643255296485678, 0.7551894266165657, 0.7664103654213383, 0.7428808778224834, 0.7324945902419097, 0.7456933441538313, 0.6885754212652295, 0.7580606973847237, 0.42811269293543086, 0.14023066925309902, 0.10670569028533317, 0.1406691271832491, 0.09772123272890199, 0.16371495763749244, 0.1326531405400656, 0.11788054082511534, 0.16773572817661409, 0.6868691877063224, 0.5713913005760239, 0.5309481753150553, 0.37953433688543214, 0.6106076061235983, 0.314816965812432, 0.1926880972945808, 0.5123652832968015, 0.5125182995620365, 0.4835676863453505, 0.4660311947908924, 0.4808107951434111, 0.5267577888222441, 0.48228727834468044, 0.503222362960514, 0.5096342561306109, 0.5134198656542641, 0.49642041101932943, 0.39478153057249354, 0.36527659798553924, 0.3749038312930758, 0.389917400507931, 0.3353589314285699, 0.3837320301256505, 0.40312839777059384, 0.391779303767258, 0.3847962728292338, 0.21026365337211628, 0.22614358433930037, 0.2218321701020638, 0.2250482954759514, 0.2030028089441399, 0.22166026096906555, 0.22894392952207965, 0.22843827879566903, 0.22141354291605542, 0.23948428157452517, 0.21788039690686845, 0.23209716514423484, 0.6323247915792307, 0.7276185432482504, 0.22753716020817816, 0.23116820489455325, 0.2095363873696986, 0.2383927323253613, 0.18727057050597484, 0.18533370685014028, 0.7980098114208879, 0.879165869841122, 0.8618013365217025, 0.1973429465049138, 0.8234543070425426, 0.8684006477823741, 0.8597041019336726, 0.7552653818676855, 0.21084529289173048, 0.7955936385588998, 0.208066081343396, 0.832113022434438, 0.16617950435428208, 0.7530512572127844, 0.7738087910020401, 0.15323970621043426, 0.19212286733565198, 0.18884072021162834, 0.18645151134852433, 0.2201990884926236, 0.1742758643179808, 0.18670923575454967, 0.1839366627946203, 0.17766393401910097, 0.1934857351664151, 0.10854033480544945, 0.07898219760305658, 0.0893484705276576, 0.10244739581337559, 0.08211042189359996, 0.08303260433089732, 0.0851538042370803, 0.09383507122744528, 0.0931642152883072]}, "mutation_prompt": null}
{"id": "df5bbba8-fa15-4e64-90ae-3cdec9966ba1", "solution": "import numpy as np\n\nclass Dynamic_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, pop_size=50, c1=2.0, c2=2.0, w=0.7, f=0.5, cr=0.9, p=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.c1 = c1\n        self.c2 = c2\n        self.w = w\n        self.f = f\n        self.cr = cr\n        self.p = p\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(ind) for ind in population])\n\n        def clip_bounds(population):\n            return np.clip(population, -5.0, 5.0)\n\n        def mutate(population, target_idx, f):\n            candidates = list(range(len(population)))\n            candidates.remove(target_idx)\n            a, b, c = np.random.choice(candidates, 3, replace=False)\n            mutant = population[a] + f * (population[b] - population[c])\n            return clip_bounds(mutant)\n\n        def adapt_f(population, target_idx, f):\n            if np.random.rand() < self.p:\n                f = np.random.uniform(0, 1)\n            return f\n\n        def adjust_f(population, f):\n            diversity = np.mean(np.std(population, axis=0))\n            f = f * np.exp(-self.p * diversity)\n            return f\n\n        def crossover(target, mutant):\n            trial = np.copy(target)\n            crossover_points = np.random.rand(self.dim) < self.cr\n            if not np.any(crossover_points):\n                crossover_points[np.random.randint(0, self.dim)] = True\n            trial[crossover_points] = mutant[crossover_points]\n            return trial\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                f = adapt_f(population, i, self.f)\n                f = adjust_f(population, f)  # New line for dynamic mutation factor adaptation\n                mutant = mutate(population, i, f)\n                trial = crossover(population[i], mutant)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n        return best_solution", "name": "Dynamic_DE_PSO_Optimizer", "description": "Improving DE_PSO_Optimizer by incorporating a dynamic mechanism to adjust the mutation factor based on population diversity to enhance exploration and exploitation.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b742edd6-ebfe-46f5-b50d-b45a1f6aad5f", "metadata": {"aucs": [0.8415483320083317, 0.7873734851969789, 0.8208808188951524, 0.7968317770074933, 0.8325281512880215, 0.8272777054416194, 0.8271262860501101, 0.8323831676002205, 0.8181720814009356, 0.7175307743728203, 0.72130816045329, 0.6856890470051182, 0.7013491858505024, 0.7188101000831255, 0.7058090837628903, 0.7005074414011923, 0.7166751413437723, 0.13248636011923154, 0.4481775897642457, 0.16102923138644654, 0.4367880666108337, 0.3219191331850335, 0.1509365529628116, 0.377243101950949, 0.4095006832910977, 0.44595334805735665, 0.15532262200074187, 0.13809757285034396, 0.1361915757158083, 0.11516920968260258, 0.14613427521767353, 0.22911290826525166, 0.151737800167288, 0.13880238662463684, 0.11119125394176244, 0.15544200383027185, 0.8743370348690453, 0.8867117120609392, 0.8202366863092585, 0.8639084180893842, 0.8941788249323595, 0.8082501977703898, 0.8544252756764904, 0.8543604125483817, 0.8888734804478887, 0.5744826161629303, 0.4990439103576192, 0.47197792815808515, 0.4514284564293579, 0.43521704856130194, 0.4696054848577018, 0.5437448683615151, 0.5310316375509425, 0.60035876775151, 0.22811658500048193, 0.8469526501122752, 0.8105368552861398, 0.8821213207203665, 0.2707250022530432, 0.8452292686281677, 0.7823594917233916, 0.6628786920221681, 0.7890969796028133, 0.4603532283884616, 0.3877592763404131, 0.268807891850954, 0.5132702592579393, 0.3009966760656976, 0.6399506148770595, 0.20807985059275258, 0.4445581216905875, 0.6181984321201806, 0.30942627605161355, 0.3326397968306458, 0.1608892210430629, 0.1749878119831747, 0.21524064113644759, 0.43136284441578276, 0.2842849611404469, 0.3014713077306115, 0.3247999997958966, 9.999999999998899e-05, 0.5420255724431384, 0.5167132287147271, 0.323623210693478, 0.5236202492560686, 0.03582664293776583, 0.4961863160446829, 0.5983685556635396, 0.48004169927687823, 0.5751253318349361, 0.6023216541096823, 0.6765215155203397, 0.09569981795327731, 0.1327458453878797, 0.06657917606497121, 0.3967835739020187, 0.6609248232643044, 0.39831270863378765, 0.0789125263977809, 0.25837529774824197, 0.14761951524700612, 0.26941640692550883, 0.37390483165996746, 0.22667063106565877, 0.14796595651761657, 0.1526360340075551, 0.26586715630625746, 0.401238492885285, 0.3016090297452153, 0.3927266672695702, 0.4099603080875881, 0.4161333248714256, 0.37792551322591217, 0.3724271730527302, 0.3498130471339609, 0.36362638907756284, 0.7476894586672209, 0.7643255296485678, 0.7551894266165657, 0.7664103654213383, 0.7428808778224834, 0.7324945902419097, 0.7456933441538313, 0.6885754212652295, 0.7580606973847237, 0.42811269293543086, 0.14023066925309902, 0.10670569028533317, 0.1406691271832491, 0.09772123272890199, 0.16371495763749244, 0.1326531405400656, 0.11788054082511534, 0.16773572817661409, 0.6868691877063224, 0.5713913005760239, 0.5309481753150553, 0.37953433688543214, 0.6106076061235983, 0.314816965812432, 0.1926880972945808, 0.5123652832968015, 0.5125182995620365, 0.4835676863453505, 0.4660311947908924, 0.4808107951434111, 0.5267577888222441, 0.48228727834468044, 0.503222362960514, 0.5096342561306109, 0.5134198656542641, 0.49642041101932943, 0.39478153057249354, 0.36527659798553924, 0.3749038312930758, 0.389917400507931, 0.3353589314285699, 0.3837320301256505, 0.40312839777059384, 0.391779303767258, 0.3847962728292338, 0.21026365337211628, 0.22614358433930037, 0.2218321701020638, 0.2250482954759514, 0.2030028089441399, 0.22166026096906555, 0.22894392952207965, 0.22843827879566903, 0.22141354291605542, 0.23948428157452517, 0.21788039690686845, 0.23209716514423484, 0.6323247915792307, 0.7276185432482504, 0.22753716020817816, 0.23116820489455325, 0.2095363873696986, 0.2383927323253613, 0.18727057050597484, 0.18533370685014028, 0.7980098114208879, 0.879165869841122, 0.8618013365217025, 0.1973429465049138, 0.8234543070425426, 0.8684006477823741, 0.8597041019336726, 0.7552653818676855, 0.21084529289173048, 0.7955936385588998, 0.208066081343396, 0.832113022434438, 0.16617950435428208, 0.7530512572127844, 0.7738087910020401, 0.15323970621043426, 0.19212286733565198, 0.18884072021162834, 0.18645151134852433, 0.2201990884926236, 0.1742758643179808, 0.18670923575454967, 0.1839366627946203, 0.17766393401910097, 0.1934857351664151, 0.10854033480544945, 0.07898219760305658, 0.0893484705276576, 0.10244739581337559, 0.08211042189359996, 0.08303260433089732, 0.0851538042370803, 0.09383507122744528, 0.0931642152883072]}, "mutation_prompt": null}
{"id": "a271ebfa-ad0f-4441-a6ae-0cbe456cc1af", "solution": "import numpy as np\n\nclass Adaptive_DE_Optimizer:\n    def __init__(self, budget, dim, pop_size=50, c1=2.0, c2=2.0, w=0.7, f=0.5, cr=0.9, p=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.c1 = c1\n        self.c2 = c2\n        self.w = w\n        self.f = f\n        self.cr = cr\n        self.p = p\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(ind) for ind in population])\n\n        def clip_bounds(population):\n            return np.clip(population, -5.0, 5.0)\n\n        def mutate(population, target_idx, f):\n            candidates = list(range(len(population)))\n            candidates.remove(target_idx)\n            a, b, c = np.random.choice(candidates, 3, replace=False)\n            mutant = population[a] + f * (population[b] - population[c])\n            return clip_bounds(mutant)\n\n        def adapt_f(population, target_idx, f):\n            if np.random.rand() < self.p:\n                f = np.random.uniform(0, 1)\n            return f\n\n        def adjust_f(population, f):\n            diversity = np.mean(np.std(population, axis=0))\n            f = f * np.exp(-self.p * diversity)\n            return f\n\n        def crossover(target, mutant):\n            trial = np.copy(target)\n            crossover_points = np.random.rand(self.dim) < self.cr\n            if not np.any(crossover_points):\n                crossover_points[np.random.randint(0, self.dim)] = True\n            trial[crossover_points] = mutant[crossover_points]\n            return trial\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                f = adapt_f(population, i, self.f)\n                f = adjust_f(population, f)  # New line for dynamic mutation factor adaptation\n                mutant = mutate(population, i, f)\n                trial = crossover(population[i], mutant)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n        return best_solution", "name": "Adaptive_DE_Optimizer", "description": "Enhancing Differential Evolution with a novel adaptive mutation strategy based on dynamic population diversity.", "configspace": "", "generation": 55, "fitness": 0.4297439464409878, "feedback": "The algorithm Adaptive_DE_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.43 with standard deviation 0.26.", "error": "", "parent_id": "b742edd6-ebfe-46f5-b50d-b45a1f6aad5f", "metadata": {"aucs": [0.8415483320083317, 0.7873734851969789, 0.8208808188951524, 0.7968317770074933, 0.8325281512880215, 0.8272777054416194, 0.8271262860501101, 0.8323831676002205, 0.8181720814009356, 0.7175307743728203, 0.72130816045329, 0.6856890470051182, 0.7013491858505024, 0.7188101000831255, 0.7058090837628903, 0.7005074414011923, 0.7166751413437723, 0.13248636011923154, 0.4481775897642457, 0.16102923138644654, 0.4367880666108337, 0.3219191331850335, 0.1509365529628116, 0.377243101950949, 0.4095006832910977, 0.44595334805735665, 0.15532262200074187, 0.13809757285034396, 0.1361915757158083, 0.11516920968260258, 0.14613427521767353, 0.22911290826525166, 0.151737800167288, 0.13880238662463684, 0.11119125394176244, 0.15544200383027185, 0.8743370348690453, 0.8867117120609392, 0.8202366863092585, 0.8639084180893842, 0.8941788249323595, 0.8082501977703898, 0.8544252756764904, 0.8543604125483817, 0.8888734804478887, 0.5744826161629303, 0.4990439103576192, 0.47197792815808515, 0.4514284564293579, 0.43521704856130194, 0.4696054848577018, 0.5437448683615151, 0.5310316375509425, 0.60035876775151, 0.22811658500048193, 0.8469526501122752, 0.8105368552861398, 0.8821213207203665, 0.2707250022530432, 0.8452292686281677, 0.7823594917233916, 0.6628786920221681, 0.7890969796028133, 0.4603532283884616, 0.3877592763404131, 0.268807891850954, 0.5132702592579393, 0.3009966760656976, 0.6399506148770595, 0.20807985059275258, 0.4445581216905875, 0.6181984321201806, 0.30942627605161355, 0.3326397968306458, 0.1608892210430629, 0.1749878119831747, 0.21524064113644759, 0.43136284441578276, 0.2842849611404469, 0.3014713077306115, 0.3247999997958966, 9.999999999998899e-05, 0.5420255724431384, 0.5167132287147271, 0.323623210693478, 0.5236202492560686, 0.03582664293776583, 0.4961863160446829, 0.5983685556635396, 0.48004169927687823, 0.5751253318349361, 0.6023216541096823, 0.6765215155203397, 0.09569981795327731, 0.1327458453878797, 0.06657917606497121, 0.3967835739020187, 0.6609248232643044, 0.39831270863378765, 0.0789125263977809, 0.25837529774824197, 0.14761951524700612, 0.26941640692550883, 0.37390483165996746, 0.22667063106565877, 0.14796595651761657, 0.1526360340075551, 0.26586715630625746, 0.401238492885285, 0.3016090297452153, 0.3927266672695702, 0.4099603080875881, 0.4161333248714256, 0.37792551322591217, 0.3724271730527302, 0.3498130471339609, 0.36362638907756284, 0.7476894586672209, 0.7643255296485678, 0.7551894266165657, 0.7664103654213383, 0.7428808778224834, 0.7324945902419097, 0.7456933441538313, 0.6885754212652295, 0.7580606973847237, 0.42811269293543086, 0.14023066925309902, 0.10670569028533317, 0.1406691271832491, 0.09772123272890199, 0.16371495763749244, 0.1326531405400656, 0.11788054082511534, 0.16773572817661409, 0.6868691877063224, 0.5713913005760239, 0.5309481753150553, 0.37953433688543214, 0.6106076061235983, 0.314816965812432, 0.1926880972945808, 0.5123652832968015, 0.5125182995620365, 0.4835676863453505, 0.4660311947908924, 0.4808107951434111, 0.5267577888222441, 0.48228727834468044, 0.503222362960514, 0.5096342561306109, 0.5134198656542641, 0.49642041101932943, 0.39478153057249354, 0.36527659798553924, 0.3749038312930758, 0.389917400507931, 0.3353589314285699, 0.3837320301256505, 0.40312839777059384, 0.391779303767258, 0.3847962728292338, 0.21026365337211628, 0.22614358433930037, 0.2218321701020638, 0.2250482954759514, 0.2030028089441399, 0.22166026096906555, 0.22894392952207965, 0.22843827879566903, 0.22141354291605542, 0.23948428157452517, 0.21788039690686845, 0.23209716514423484, 0.6323247915792307, 0.7276185432482504, 0.22753716020817816, 0.23116820489455325, 0.2095363873696986, 0.2383927323253613, 0.18727057050597484, 0.18533370685014028, 0.7980098114208879, 0.879165869841122, 0.8618013365217025, 0.1973429465049138, 0.8234543070425426, 0.8684006477823741, 0.8597041019336726, 0.7552653818676855, 0.21084529289173048, 0.7955936385588998, 0.208066081343396, 0.832113022434438, 0.16617950435428208, 0.7530512572127844, 0.7738087910020401, 0.15323970621043426, 0.19212286733565198, 0.18884072021162834, 0.18645151134852433, 0.2201990884926236, 0.1742758643179808, 0.18670923575454967, 0.1839366627946203, 0.17766393401910097, 0.1934857351664151, 0.10854033480544945, 0.07898219760305658, 0.0893484705276576, 0.10244739581337559, 0.08211042189359996, 0.08303260433089732, 0.0851538042370803, 0.09383507122744528, 0.0931642152883072]}, "mutation_prompt": null}
{"id": "e291dcb6-81ea-4846-afa3-2a41fb8a9378", "solution": "import numpy as np\n\nclass Dynamic_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, pop_size=50, c1=2.0, c2=2.0, w=0.7, f=0.5, cr=0.9, p=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.c1 = c1\n        self.c2 = c2\n        self.w = w\n        self.f = f\n        self.cr = cr\n        self.p = p\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(ind) for ind in population])\n\n        def clip_bounds(population):\n            return np.clip(population, -5.0, 5.0)\n\n        def mutate(population, target_idx, f):\n            candidates = list(range(len(population)))\n            candidates.remove(target_idx)\n            a, b, c = np.random.choice(candidates, 3, replace=False)\n            mutant = population[a] + f * (population[b] - population[c])\n            return clip_bounds(mutant)\n\n        def adapt_f(population, target_idx, f):\n            if np.random.rand() < self.p:\n                f = np.random.uniform(0, 1)\n            return f\n\n        def adjust_f(population, f):\n            diversity = np.mean(np.std(population, axis=0))\n            f = f * np.exp(-self.p * diversity)\n            return f\n\n        def crossover(target, mutant):\n            trial = np.copy(target)\n            crossover_points = np.random.rand(self.dim) < self.cr\n            if not np.any(crossover_points):\n                crossover_points[np.random.randint(0, self.dim)] = True\n            trial[crossover_points] = mutant[crossover_points]\n            return trial\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                f = adapt_f(population, i, self.f)\n                f = adjust_f(population, f)  # New line for dynamic mutation factor adaptation\n                mutant = mutate(population, i, f)\n                trial = crossover(population[i], mutant)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n        return best_solution", "name": "Dynamic_DE_PSO_Optimizer", "description": "Improving DE_PSO_Optimizer by incorporating a dynamic mechanism to adjust the mutation factor based on population diversity to enhance exploration and exploitation.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b742edd6-ebfe-46f5-b50d-b45a1f6aad5f", "metadata": {"aucs": [0.8415483320083317, 0.7873734851969789, 0.8208808188951524, 0.7968317770074933, 0.8325281512880215, 0.8272777054416194, 0.8271262860501101, 0.8323831676002205, 0.8181720814009356, 0.7175307743728203, 0.72130816045329, 0.6856890470051182, 0.7013491858505024, 0.7188101000831255, 0.7058090837628903, 0.7005074414011923, 0.7166751413437723, 0.13248636011923154, 0.4481775897642457, 0.16102923138644654, 0.4367880666108337, 0.3219191331850335, 0.1509365529628116, 0.377243101950949, 0.4095006832910977, 0.44595334805735665, 0.15532262200074187, 0.13809757285034396, 0.1361915757158083, 0.11516920968260258, 0.14613427521767353, 0.22911290826525166, 0.151737800167288, 0.13880238662463684, 0.11119125394176244, 0.15544200383027185, 0.8743370348690453, 0.8867117120609392, 0.8202366863092585, 0.8639084180893842, 0.8941788249323595, 0.8082501977703898, 0.8544252756764904, 0.8543604125483817, 0.8888734804478887, 0.5744826161629303, 0.4990439103576192, 0.47197792815808515, 0.4514284564293579, 0.43521704856130194, 0.4696054848577018, 0.5437448683615151, 0.5310316375509425, 0.60035876775151, 0.22811658500048193, 0.8469526501122752, 0.8105368552861398, 0.8821213207203665, 0.2707250022530432, 0.8452292686281677, 0.7823594917233916, 0.6628786920221681, 0.7890969796028133, 0.4603532283884616, 0.3877592763404131, 0.268807891850954, 0.5132702592579393, 0.3009966760656976, 0.6399506148770595, 0.20807985059275258, 0.4445581216905875, 0.6181984321201806, 0.30942627605161355, 0.3326397968306458, 0.1608892210430629, 0.1749878119831747, 0.21524064113644759, 0.43136284441578276, 0.2842849611404469, 0.3014713077306115, 0.3247999997958966, 9.999999999998899e-05, 0.5420255724431384, 0.5167132287147271, 0.323623210693478, 0.5236202492560686, 0.03582664293776583, 0.4961863160446829, 0.5983685556635396, 0.48004169927687823, 0.5751253318349361, 0.6023216541096823, 0.6765215155203397, 0.09569981795327731, 0.1327458453878797, 0.06657917606497121, 0.3967835739020187, 0.6609248232643044, 0.39831270863378765, 0.0789125263977809, 0.25837529774824197, 0.14761951524700612, 0.26941640692550883, 0.37390483165996746, 0.22667063106565877, 0.14796595651761657, 0.1526360340075551, 0.26586715630625746, 0.401238492885285, 0.3016090297452153, 0.3927266672695702, 0.4099603080875881, 0.4161333248714256, 0.37792551322591217, 0.3724271730527302, 0.3498130471339609, 0.36362638907756284, 0.7476894586672209, 0.7643255296485678, 0.7551894266165657, 0.7664103654213383, 0.7428808778224834, 0.7324945902419097, 0.7456933441538313, 0.6885754212652295, 0.7580606973847237, 0.42811269293543086, 0.14023066925309902, 0.10670569028533317, 0.1406691271832491, 0.09772123272890199, 0.16371495763749244, 0.1326531405400656, 0.11788054082511534, 0.16773572817661409, 0.6868691877063224, 0.5713913005760239, 0.5309481753150553, 0.37953433688543214, 0.6106076061235983, 0.314816965812432, 0.1926880972945808, 0.5123652832968015, 0.5125182995620365, 0.4835676863453505, 0.4660311947908924, 0.4808107951434111, 0.5267577888222441, 0.48228727834468044, 0.503222362960514, 0.5096342561306109, 0.5134198656542641, 0.49642041101932943, 0.39478153057249354, 0.36527659798553924, 0.3749038312930758, 0.389917400507931, 0.3353589314285699, 0.3837320301256505, 0.40312839777059384, 0.391779303767258, 0.3847962728292338, 0.21026365337211628, 0.22614358433930037, 0.2218321701020638, 0.2250482954759514, 0.2030028089441399, 0.22166026096906555, 0.22894392952207965, 0.22843827879566903, 0.22141354291605542, 0.23948428157452517, 0.21788039690686845, 0.23209716514423484, 0.6323247915792307, 0.7276185432482504, 0.22753716020817816, 0.23116820489455325, 0.2095363873696986, 0.2383927323253613, 0.18727057050597484, 0.18533370685014028, 0.7980098114208879, 0.879165869841122, 0.8618013365217025, 0.1973429465049138, 0.8234543070425426, 0.8684006477823741, 0.8597041019336726, 0.7552653818676855, 0.21084529289173048, 0.7955936385588998, 0.208066081343396, 0.832113022434438, 0.16617950435428208, 0.7530512572127844, 0.7738087910020401, 0.15323970621043426, 0.19212286733565198, 0.18884072021162834, 0.18645151134852433, 0.2201990884926236, 0.1742758643179808, 0.18670923575454967, 0.1839366627946203, 0.17766393401910097, 0.1934857351664151, 0.10854033480544945, 0.07898219760305658, 0.0893484705276576, 0.10244739581337559, 0.08211042189359996, 0.08303260433089732, 0.0851538042370803, 0.09383507122744528, 0.0931642152883072]}, "mutation_prompt": null}
{"id": "9da4024e-edbd-442f-8676-adfff012d0ed", "solution": "import numpy as np\n\nclass Dynamic_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, pop_size=50, c1=2.0, c2=2.0, w=0.7, f=0.5, cr=0.9, p=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.c1 = c1\n        self.c2 = c2\n        self.w = w\n        self.f = f\n        self.cr = cr\n        self.p = p\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(ind) for ind in population])\n\n        def clip_bounds(population):\n            return np.clip(population, -5.0, 5.0)\n\n        def mutate(population, target_idx, f):\n            candidates = list(range(len(population)))\n            candidates.remove(target_idx)\n            a, b, c = np.random.choice(candidates, 3, replace=False)\n            mutant = population[a] + f * (population[b] - population[c])\n            return clip_bounds(mutant)\n\n        def adapt_f(population, target_idx, f):\n            if np.random.rand() < self.p:\n                f = np.random.uniform(0, 1)\n            return f\n\n        def adjust_f(population, f):\n            diversity = np.mean(np.std(population, axis=0))\n            f = f * np.exp(-self.p * diversity)\n            return f\n\n        def crossover(target, mutant):\n            trial = np.copy(target)\n            crossover_points = np.random.rand(self.dim) < self.cr\n            if not np.any(crossover_points):\n                crossover_points[np.random.randint(0, self.dim)] = True\n            trial[crossover_points] = mutant[crossover_points]\n            return trial\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                f = adapt_f(population, i, self.f)\n                f = adjust_f(population, f)  # New line for dynamic mutation factor adaptation\n                mutant = mutate(population, i, f)\n                trial = crossover(population[i], mutant)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n        return best_solution", "name": "Dynamic_DE_PSO_Optimizer", "description": "Improving DE_PSO_Optimizer by incorporating a dynamic mechanism to adjust the mutation factor based on population diversity to enhance exploration and exploitation.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b742edd6-ebfe-46f5-b50d-b45a1f6aad5f", "metadata": {"aucs": [0.8415483320083317, 0.7873734851969789, 0.8208808188951524, 0.7968317770074933, 0.8325281512880215, 0.8272777054416194, 0.8271262860501101, 0.8323831676002205, 0.8181720814009356, 0.7175307743728203, 0.72130816045329, 0.6856890470051182, 0.7013491858505024, 0.7188101000831255, 0.7058090837628903, 0.7005074414011923, 0.7166751413437723, 0.13248636011923154, 0.4481775897642457, 0.16102923138644654, 0.4367880666108337, 0.3219191331850335, 0.1509365529628116, 0.377243101950949, 0.4095006832910977, 0.44595334805735665, 0.15532262200074187, 0.13809757285034396, 0.1361915757158083, 0.11516920968260258, 0.14613427521767353, 0.22911290826525166, 0.151737800167288, 0.13880238662463684, 0.11119125394176244, 0.15544200383027185, 0.8743370348690453, 0.8867117120609392, 0.8202366863092585, 0.8639084180893842, 0.8941788249323595, 0.8082501977703898, 0.8544252756764904, 0.8543604125483817, 0.8888734804478887, 0.5744826161629303, 0.4990439103576192, 0.47197792815808515, 0.4514284564293579, 0.43521704856130194, 0.4696054848577018, 0.5437448683615151, 0.5310316375509425, 0.60035876775151, 0.22811658500048193, 0.8469526501122752, 0.8105368552861398, 0.8821213207203665, 0.2707250022530432, 0.8452292686281677, 0.7823594917233916, 0.6628786920221681, 0.7890969796028133, 0.4603532283884616, 0.3877592763404131, 0.268807891850954, 0.5132702592579393, 0.3009966760656976, 0.6399506148770595, 0.20807985059275258, 0.4445581216905875, 0.6181984321201806, 0.30942627605161355, 0.3326397968306458, 0.1608892210430629, 0.1749878119831747, 0.21524064113644759, 0.43136284441578276, 0.2842849611404469, 0.3014713077306115, 0.3247999997958966, 9.999999999998899e-05, 0.5420255724431384, 0.5167132287147271, 0.323623210693478, 0.5236202492560686, 0.03582664293776583, 0.4961863160446829, 0.5983685556635396, 0.48004169927687823, 0.5751253318349361, 0.6023216541096823, 0.6765215155203397, 0.09569981795327731, 0.1327458453878797, 0.06657917606497121, 0.3967835739020187, 0.6609248232643044, 0.39831270863378765, 0.0789125263977809, 0.25837529774824197, 0.14761951524700612, 0.26941640692550883, 0.37390483165996746, 0.22667063106565877, 0.14796595651761657, 0.1526360340075551, 0.26586715630625746, 0.401238492885285, 0.3016090297452153, 0.3927266672695702, 0.4099603080875881, 0.4161333248714256, 0.37792551322591217, 0.3724271730527302, 0.3498130471339609, 0.36362638907756284, 0.7476894586672209, 0.7643255296485678, 0.7551894266165657, 0.7664103654213383, 0.7428808778224834, 0.7324945902419097, 0.7456933441538313, 0.6885754212652295, 0.7580606973847237, 0.42811269293543086, 0.14023066925309902, 0.10670569028533317, 0.1406691271832491, 0.09772123272890199, 0.16371495763749244, 0.1326531405400656, 0.11788054082511534, 0.16773572817661409, 0.6868691877063224, 0.5713913005760239, 0.5309481753150553, 0.37953433688543214, 0.6106076061235983, 0.314816965812432, 0.1926880972945808, 0.5123652832968015, 0.5125182995620365, 0.4835676863453505, 0.4660311947908924, 0.4808107951434111, 0.5267577888222441, 0.48228727834468044, 0.503222362960514, 0.5096342561306109, 0.5134198656542641, 0.49642041101932943, 0.39478153057249354, 0.36527659798553924, 0.3749038312930758, 0.389917400507931, 0.3353589314285699, 0.3837320301256505, 0.40312839777059384, 0.391779303767258, 0.3847962728292338, 0.21026365337211628, 0.22614358433930037, 0.2218321701020638, 0.2250482954759514, 0.2030028089441399, 0.22166026096906555, 0.22894392952207965, 0.22843827879566903, 0.22141354291605542, 0.23948428157452517, 0.21788039690686845, 0.23209716514423484, 0.6323247915792307, 0.7276185432482504, 0.22753716020817816, 0.23116820489455325, 0.2095363873696986, 0.2383927323253613, 0.18727057050597484, 0.18533370685014028, 0.7980098114208879, 0.879165869841122, 0.8618013365217025, 0.1973429465049138, 0.8234543070425426, 0.8684006477823741, 0.8597041019336726, 0.7552653818676855, 0.21084529289173048, 0.7955936385588998, 0.208066081343396, 0.832113022434438, 0.16617950435428208, 0.7530512572127844, 0.7738087910020401, 0.15323970621043426, 0.19212286733565198, 0.18884072021162834, 0.18645151134852433, 0.2201990884926236, 0.1742758643179808, 0.18670923575454967, 0.1839366627946203, 0.17766393401910097, 0.1934857351664151, 0.10854033480544945, 0.07898219760305658, 0.0893484705276576, 0.10244739581337559, 0.08211042189359996, 0.08303260433089732, 0.0851538042370803, 0.09383507122744528, 0.0931642152883072]}, "mutation_prompt": null}
{"id": "83c3e868-cdcf-4c06-bf6c-2f3b34662dc0", "solution": "import numpy as np\n\nclass Enhanced_Dynamic_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, pop_size=50, c1=2.0, c2=2.0, w=0.7, f=0.5, cr=0.9, p=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.c1 = c1\n        self.c2 = c2\n        self.w = w\n        self.f = f\n        self.cr = cr\n        self.p = p\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(ind) for ind in population])\n\n        def clip_bounds(population):\n            return np.clip(population, -5.0, 5.0)\n\n        def mutate(population, target_idx, f):\n            candidates = list(range(len(population)))\n            candidates.remove(target_idx)\n            a, b, c = np.random.choice(candidates, 3, replace=False)\n            mutant = population[a] + f * (population[b] - population[c])\n            return clip_bounds(mutant)\n\n        def adapt_f(population, target_idx, f):\n            if np.random.rand() < self.p:\n                f = np.random.uniform(0, 1)\n            return f\n\n        def adjust_f(population, f):\n            diversity = np.mean(np.std(population, axis=0))\n            f = f * np.exp(-self.p * diversity)\n            return f\n\n        def crossover(target, mutant):\n            trial = np.copy(target)\n            crossover_points = np.random.rand(self.dim) < self.cr\n            if not np.any(crossover_points):\n                crossover_points[np.random.randint(0, self.dim)] = True\n            trial[crossover_points] = mutant[crossover_points]\n            return trial\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                f = adapt_f(population, i, self.f)\n                f = adjust_f(population, f)  # Diverse mutation factor adaptation strategy\n                mutant = mutate(population, i, f)\n                trial = crossover(population[i], mutant)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n        return best_solution", "name": "Enhanced_Dynamic_DE_PSO_Optimizer", "description": "Enhancing Dynamic DE PSO Optimizer by incorporating a diverse mutation factor adaptation strategy based on individual diversity to improve exploration and exploitation in optimization.", "configspace": "", "generation": 58, "fitness": 0.4297439464409878, "feedback": "The algorithm Enhanced_Dynamic_DE_PSO_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.43 with standard deviation 0.26.", "error": "", "parent_id": "b742edd6-ebfe-46f5-b50d-b45a1f6aad5f", "metadata": {"aucs": [0.8415483320083317, 0.7873734851969789, 0.8208808188951524, 0.7968317770074933, 0.8325281512880215, 0.8272777054416194, 0.8271262860501101, 0.8323831676002205, 0.8181720814009356, 0.7175307743728203, 0.72130816045329, 0.6856890470051182, 0.7013491858505024, 0.7188101000831255, 0.7058090837628903, 0.7005074414011923, 0.7166751413437723, 0.13248636011923154, 0.4481775897642457, 0.16102923138644654, 0.4367880666108337, 0.3219191331850335, 0.1509365529628116, 0.377243101950949, 0.4095006832910977, 0.44595334805735665, 0.15532262200074187, 0.13809757285034396, 0.1361915757158083, 0.11516920968260258, 0.14613427521767353, 0.22911290826525166, 0.151737800167288, 0.13880238662463684, 0.11119125394176244, 0.15544200383027185, 0.8743370348690453, 0.8867117120609392, 0.8202366863092585, 0.8639084180893842, 0.8941788249323595, 0.8082501977703898, 0.8544252756764904, 0.8543604125483817, 0.8888734804478887, 0.5744826161629303, 0.4990439103576192, 0.47197792815808515, 0.4514284564293579, 0.43521704856130194, 0.4696054848577018, 0.5437448683615151, 0.5310316375509425, 0.60035876775151, 0.22811658500048193, 0.8469526501122752, 0.8105368552861398, 0.8821213207203665, 0.2707250022530432, 0.8452292686281677, 0.7823594917233916, 0.6628786920221681, 0.7890969796028133, 0.4603532283884616, 0.3877592763404131, 0.268807891850954, 0.5132702592579393, 0.3009966760656976, 0.6399506148770595, 0.20807985059275258, 0.4445581216905875, 0.6181984321201806, 0.30942627605161355, 0.3326397968306458, 0.1608892210430629, 0.1749878119831747, 0.21524064113644759, 0.43136284441578276, 0.2842849611404469, 0.3014713077306115, 0.3247999997958966, 9.999999999998899e-05, 0.5420255724431384, 0.5167132287147271, 0.323623210693478, 0.5236202492560686, 0.03582664293776583, 0.4961863160446829, 0.5983685556635396, 0.48004169927687823, 0.5751253318349361, 0.6023216541096823, 0.6765215155203397, 0.09569981795327731, 0.1327458453878797, 0.06657917606497121, 0.3967835739020187, 0.6609248232643044, 0.39831270863378765, 0.0789125263977809, 0.25837529774824197, 0.14761951524700612, 0.26941640692550883, 0.37390483165996746, 0.22667063106565877, 0.14796595651761657, 0.1526360340075551, 0.26586715630625746, 0.401238492885285, 0.3016090297452153, 0.3927266672695702, 0.4099603080875881, 0.4161333248714256, 0.37792551322591217, 0.3724271730527302, 0.3498130471339609, 0.36362638907756284, 0.7476894586672209, 0.7643255296485678, 0.7551894266165657, 0.7664103654213383, 0.7428808778224834, 0.7324945902419097, 0.7456933441538313, 0.6885754212652295, 0.7580606973847237, 0.42811269293543086, 0.14023066925309902, 0.10670569028533317, 0.1406691271832491, 0.09772123272890199, 0.16371495763749244, 0.1326531405400656, 0.11788054082511534, 0.16773572817661409, 0.6868691877063224, 0.5713913005760239, 0.5309481753150553, 0.37953433688543214, 0.6106076061235983, 0.314816965812432, 0.1926880972945808, 0.5123652832968015, 0.5125182995620365, 0.4835676863453505, 0.4660311947908924, 0.4808107951434111, 0.5267577888222441, 0.48228727834468044, 0.503222362960514, 0.5096342561306109, 0.5134198656542641, 0.49642041101932943, 0.39478153057249354, 0.36527659798553924, 0.3749038312930758, 0.389917400507931, 0.3353589314285699, 0.3837320301256505, 0.40312839777059384, 0.391779303767258, 0.3847962728292338, 0.21026365337211628, 0.22614358433930037, 0.2218321701020638, 0.2250482954759514, 0.2030028089441399, 0.22166026096906555, 0.22894392952207965, 0.22843827879566903, 0.22141354291605542, 0.23948428157452517, 0.21788039690686845, 0.23209716514423484, 0.6323247915792307, 0.7276185432482504, 0.22753716020817816, 0.23116820489455325, 0.2095363873696986, 0.2383927323253613, 0.18727057050597484, 0.18533370685014028, 0.7980098114208879, 0.879165869841122, 0.8618013365217025, 0.1973429465049138, 0.8234543070425426, 0.8684006477823741, 0.8597041019336726, 0.7552653818676855, 0.21084529289173048, 0.7955936385588998, 0.208066081343396, 0.832113022434438, 0.16617950435428208, 0.7530512572127844, 0.7738087910020401, 0.15323970621043426, 0.19212286733565198, 0.18884072021162834, 0.18645151134852433, 0.2201990884926236, 0.1742758643179808, 0.18670923575454967, 0.1839366627946203, 0.17766393401910097, 0.1934857351664151, 0.10854033480544945, 0.07898219760305658, 0.0893484705276576, 0.10244739581337559, 0.08211042189359996, 0.08303260433089732, 0.0851538042370803, 0.09383507122744528, 0.0931642152883072]}, "mutation_prompt": null}
{"id": "faf66e22-962d-4952-816e-f8e2b86ecf3e", "solution": "import numpy as np\n\nclass Improved_Dynamic_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, pop_size=50, c1=2.0, c2=2.0, w=0.7, f=0.5, cr=0.9, p=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.c1 = c1\n        self.c2 = c2\n        self.w = w\n        self.f = f\n        self.cr = cr\n        self.p = p\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(ind) for ind in population])\n\n        def clip_bounds(population):\n            return np.clip(population, -5.0, 5.0)\n\n        def mutate(population, target_idx, f):\n            candidates = list(range(len(population)))\n            candidates.remove(target_idx)\n            a, b, c = np.random.choice(candidates, 3, replace=False)\n            mutant = population[a] + f * (population[b] - population[c])\n            return clip_bounds(mutant)\n\n        def adapt_f(population, target_idx, f):\n            if np.random.rand() < self.p:\n                f = np.random.uniform(0, 1)\n            return f\n\n        def adjust_f(population, f):\n            diversity = np.mean(np.std(population, axis=0))\n            f = f * np.exp(-self.p * diversity)\n            return f\n\n        def crossover(target, mutant):\n            trial = np.copy(target)\n            crossover_points = np.random.rand(self.dim) < self.cr\n            if not np.any(crossover_points):\n                crossover_points[np.random.randint(0, self.dim)] = True\n            trial[crossover_points] = mutant[crossover_points]\n            return trial\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                f = adapt_f(population, i, self.f)\n                f = adjust_f(population, f)  # Dynamic mutation factor adaptation\n                mutant = mutate(population, i, f)\n                trial = crossover(population[i], mutant)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n        return best_solution", "name": "Improved_Dynamic_DE_PSO_Optimizer", "description": "Enhancing the search strategy by introducing a self-adaptive mutation factor through population diversity to improve exploration and exploitation in optimization.", "configspace": "", "generation": 59, "fitness": 0.4297439464409878, "feedback": "The algorithm Improved_Dynamic_DE_PSO_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.43 with standard deviation 0.26.", "error": "", "parent_id": "b742edd6-ebfe-46f5-b50d-b45a1f6aad5f", "metadata": {"aucs": [0.8415483320083317, 0.7873734851969789, 0.8208808188951524, 0.7968317770074933, 0.8325281512880215, 0.8272777054416194, 0.8271262860501101, 0.8323831676002205, 0.8181720814009356, 0.7175307743728203, 0.72130816045329, 0.6856890470051182, 0.7013491858505024, 0.7188101000831255, 0.7058090837628903, 0.7005074414011923, 0.7166751413437723, 0.13248636011923154, 0.4481775897642457, 0.16102923138644654, 0.4367880666108337, 0.3219191331850335, 0.1509365529628116, 0.377243101950949, 0.4095006832910977, 0.44595334805735665, 0.15532262200074187, 0.13809757285034396, 0.1361915757158083, 0.11516920968260258, 0.14613427521767353, 0.22911290826525166, 0.151737800167288, 0.13880238662463684, 0.11119125394176244, 0.15544200383027185, 0.8743370348690453, 0.8867117120609392, 0.8202366863092585, 0.8639084180893842, 0.8941788249323595, 0.8082501977703898, 0.8544252756764904, 0.8543604125483817, 0.8888734804478887, 0.5744826161629303, 0.4990439103576192, 0.47197792815808515, 0.4514284564293579, 0.43521704856130194, 0.4696054848577018, 0.5437448683615151, 0.5310316375509425, 0.60035876775151, 0.22811658500048193, 0.8469526501122752, 0.8105368552861398, 0.8821213207203665, 0.2707250022530432, 0.8452292686281677, 0.7823594917233916, 0.6628786920221681, 0.7890969796028133, 0.4603532283884616, 0.3877592763404131, 0.268807891850954, 0.5132702592579393, 0.3009966760656976, 0.6399506148770595, 0.20807985059275258, 0.4445581216905875, 0.6181984321201806, 0.30942627605161355, 0.3326397968306458, 0.1608892210430629, 0.1749878119831747, 0.21524064113644759, 0.43136284441578276, 0.2842849611404469, 0.3014713077306115, 0.3247999997958966, 9.999999999998899e-05, 0.5420255724431384, 0.5167132287147271, 0.323623210693478, 0.5236202492560686, 0.03582664293776583, 0.4961863160446829, 0.5983685556635396, 0.48004169927687823, 0.5751253318349361, 0.6023216541096823, 0.6765215155203397, 0.09569981795327731, 0.1327458453878797, 0.06657917606497121, 0.3967835739020187, 0.6609248232643044, 0.39831270863378765, 0.0789125263977809, 0.25837529774824197, 0.14761951524700612, 0.26941640692550883, 0.37390483165996746, 0.22667063106565877, 0.14796595651761657, 0.1526360340075551, 0.26586715630625746, 0.401238492885285, 0.3016090297452153, 0.3927266672695702, 0.4099603080875881, 0.4161333248714256, 0.37792551322591217, 0.3724271730527302, 0.3498130471339609, 0.36362638907756284, 0.7476894586672209, 0.7643255296485678, 0.7551894266165657, 0.7664103654213383, 0.7428808778224834, 0.7324945902419097, 0.7456933441538313, 0.6885754212652295, 0.7580606973847237, 0.42811269293543086, 0.14023066925309902, 0.10670569028533317, 0.1406691271832491, 0.09772123272890199, 0.16371495763749244, 0.1326531405400656, 0.11788054082511534, 0.16773572817661409, 0.6868691877063224, 0.5713913005760239, 0.5309481753150553, 0.37953433688543214, 0.6106076061235983, 0.314816965812432, 0.1926880972945808, 0.5123652832968015, 0.5125182995620365, 0.4835676863453505, 0.4660311947908924, 0.4808107951434111, 0.5267577888222441, 0.48228727834468044, 0.503222362960514, 0.5096342561306109, 0.5134198656542641, 0.49642041101932943, 0.39478153057249354, 0.36527659798553924, 0.3749038312930758, 0.389917400507931, 0.3353589314285699, 0.3837320301256505, 0.40312839777059384, 0.391779303767258, 0.3847962728292338, 0.21026365337211628, 0.22614358433930037, 0.2218321701020638, 0.2250482954759514, 0.2030028089441399, 0.22166026096906555, 0.22894392952207965, 0.22843827879566903, 0.22141354291605542, 0.23948428157452517, 0.21788039690686845, 0.23209716514423484, 0.6323247915792307, 0.7276185432482504, 0.22753716020817816, 0.23116820489455325, 0.2095363873696986, 0.2383927323253613, 0.18727057050597484, 0.18533370685014028, 0.7980098114208879, 0.879165869841122, 0.8618013365217025, 0.1973429465049138, 0.8234543070425426, 0.8684006477823741, 0.8597041019336726, 0.7552653818676855, 0.21084529289173048, 0.7955936385588998, 0.208066081343396, 0.832113022434438, 0.16617950435428208, 0.7530512572127844, 0.7738087910020401, 0.15323970621043426, 0.19212286733565198, 0.18884072021162834, 0.18645151134852433, 0.2201990884926236, 0.1742758643179808, 0.18670923575454967, 0.1839366627946203, 0.17766393401910097, 0.1934857351664151, 0.10854033480544945, 0.07898219760305658, 0.0893484705276576, 0.10244739581337559, 0.08211042189359996, 0.08303260433089732, 0.0851538042370803, 0.09383507122744528, 0.0931642152883072]}, "mutation_prompt": null}
{"id": "20002175-1d6c-4553-9282-9b881c9f9c96", "solution": "import numpy as np\n\nclass Dynamic_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, pop_size=50, c1=2.0, c2=2.0, w=0.7, f=0.5, cr=0.9, p=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.c1 = c1\n        self.c2 = c2\n        self.w = w\n        self.f = f\n        self.cr = cr\n        self.p = p\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(ind) for ind in population])\n\n        def clip_bounds(population):\n            return np.clip(population, -5.0, 5.0)\n\n        def mutate(population, target_idx, f):\n            candidates = list(range(len(population)))\n            candidates.remove(target_idx)\n            a, b, c = np.random.choice(candidates, 3, replace=False)\n            mutant = population[a] + f * (population[b] - population[c])\n            return clip_bounds(mutant)\n\n        def adapt_f(population, target_idx, f):\n            if np.random.rand() < self.p:\n                f = np.random.uniform(0, 1)\n            return f\n\n        def adjust_f(population, f):\n            diversity = np.mean(np.std(population, axis=0))\n            f = f * np.exp(-self.p * diversity)\n            return f\n\n        def crossover(target, mutant):\n            trial = np.copy(target)\n            crossover_points = np.random.rand(self.dim) < self.cr\n            if not np.any(crossover_points):\n                crossover_points[np.random.randint(0, self.dim)] = True\n            trial[crossover_points] = mutant[crossover_points]\n            return trial\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                f = adapt_f(population, i, self.f)\n                f = adjust_f(population, f)  # New line for dynamic mutation factor adaptation\n                mutant = mutate(population, i, f)\n                trial = crossover(population[i], mutant)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n        return best_solution", "name": "Dynamic_DE_PSO_Optimizer", "description": "Improving DE_PSO_Optimizer by incorporating a dynamic mechanism to adjust the mutation factor based on population diversity to enhance exploration and exploitation.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b742edd6-ebfe-46f5-b50d-b45a1f6aad5f", "metadata": {"aucs": [0.8415483320083317, 0.7873734851969789, 0.8208808188951524, 0.7968317770074933, 0.8325281512880215, 0.8272777054416194, 0.8271262860501101, 0.8323831676002205, 0.8181720814009356, 0.7175307743728203, 0.72130816045329, 0.6856890470051182, 0.7013491858505024, 0.7188101000831255, 0.7058090837628903, 0.7005074414011923, 0.7166751413437723, 0.13248636011923154, 0.4481775897642457, 0.16102923138644654, 0.4367880666108337, 0.3219191331850335, 0.1509365529628116, 0.377243101950949, 0.4095006832910977, 0.44595334805735665, 0.15532262200074187, 0.13809757285034396, 0.1361915757158083, 0.11516920968260258, 0.14613427521767353, 0.22911290826525166, 0.151737800167288, 0.13880238662463684, 0.11119125394176244, 0.15544200383027185, 0.8743370348690453, 0.8867117120609392, 0.8202366863092585, 0.8639084180893842, 0.8941788249323595, 0.8082501977703898, 0.8544252756764904, 0.8543604125483817, 0.8888734804478887, 0.5744826161629303, 0.4990439103576192, 0.47197792815808515, 0.4514284564293579, 0.43521704856130194, 0.4696054848577018, 0.5437448683615151, 0.5310316375509425, 0.60035876775151, 0.22811658500048193, 0.8469526501122752, 0.8105368552861398, 0.8821213207203665, 0.2707250022530432, 0.8452292686281677, 0.7823594917233916, 0.6628786920221681, 0.7890969796028133, 0.4603532283884616, 0.3877592763404131, 0.268807891850954, 0.5132702592579393, 0.3009966760656976, 0.6399506148770595, 0.20807985059275258, 0.4445581216905875, 0.6181984321201806, 0.30942627605161355, 0.3326397968306458, 0.1608892210430629, 0.1749878119831747, 0.21524064113644759, 0.43136284441578276, 0.2842849611404469, 0.3014713077306115, 0.3247999997958966, 9.999999999998899e-05, 0.5420255724431384, 0.5167132287147271, 0.323623210693478, 0.5236202492560686, 0.03582664293776583, 0.4961863160446829, 0.5983685556635396, 0.48004169927687823, 0.5751253318349361, 0.6023216541096823, 0.6765215155203397, 0.09569981795327731, 0.1327458453878797, 0.06657917606497121, 0.3967835739020187, 0.6609248232643044, 0.39831270863378765, 0.0789125263977809, 0.25837529774824197, 0.14761951524700612, 0.26941640692550883, 0.37390483165996746, 0.22667063106565877, 0.14796595651761657, 0.1526360340075551, 0.26586715630625746, 0.401238492885285, 0.3016090297452153, 0.3927266672695702, 0.4099603080875881, 0.4161333248714256, 0.37792551322591217, 0.3724271730527302, 0.3498130471339609, 0.36362638907756284, 0.7476894586672209, 0.7643255296485678, 0.7551894266165657, 0.7664103654213383, 0.7428808778224834, 0.7324945902419097, 0.7456933441538313, 0.6885754212652295, 0.7580606973847237, 0.42811269293543086, 0.14023066925309902, 0.10670569028533317, 0.1406691271832491, 0.09772123272890199, 0.16371495763749244, 0.1326531405400656, 0.11788054082511534, 0.16773572817661409, 0.6868691877063224, 0.5713913005760239, 0.5309481753150553, 0.37953433688543214, 0.6106076061235983, 0.314816965812432, 0.1926880972945808, 0.5123652832968015, 0.5125182995620365, 0.4835676863453505, 0.4660311947908924, 0.4808107951434111, 0.5267577888222441, 0.48228727834468044, 0.503222362960514, 0.5096342561306109, 0.5134198656542641, 0.49642041101932943, 0.39478153057249354, 0.36527659798553924, 0.3749038312930758, 0.389917400507931, 0.3353589314285699, 0.3837320301256505, 0.40312839777059384, 0.391779303767258, 0.3847962728292338, 0.21026365337211628, 0.22614358433930037, 0.2218321701020638, 0.2250482954759514, 0.2030028089441399, 0.22166026096906555, 0.22894392952207965, 0.22843827879566903, 0.22141354291605542, 0.23948428157452517, 0.21788039690686845, 0.23209716514423484, 0.6323247915792307, 0.7276185432482504, 0.22753716020817816, 0.23116820489455325, 0.2095363873696986, 0.2383927323253613, 0.18727057050597484, 0.18533370685014028, 0.7980098114208879, 0.879165869841122, 0.8618013365217025, 0.1973429465049138, 0.8234543070425426, 0.8684006477823741, 0.8597041019336726, 0.7552653818676855, 0.21084529289173048, 0.7955936385588998, 0.208066081343396, 0.832113022434438, 0.16617950435428208, 0.7530512572127844, 0.7738087910020401, 0.15323970621043426, 0.19212286733565198, 0.18884072021162834, 0.18645151134852433, 0.2201990884926236, 0.1742758643179808, 0.18670923575454967, 0.1839366627946203, 0.17766393401910097, 0.1934857351664151, 0.10854033480544945, 0.07898219760305658, 0.0893484705276576, 0.10244739581337559, 0.08211042189359996, 0.08303260433089732, 0.0851538042370803, 0.09383507122744528, 0.0931642152883072]}, "mutation_prompt": null}
{"id": "bd09a394-0605-4218-979b-eb20d1d106be", "solution": "import numpy as np\n\nclass Novel_Metaheuristic_Optimizer:\n    def __init__(self, budget, dim, pop_size=50, c1=2.0, c2=2.0, w=0.7, f=0.5, cr=0.9, p=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.c1 = c1\n        self.c2 = c2\n        self.w = w\n        self.f = f\n        self.cr = cr\n        self.p = p\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(ind) for ind in population])\n\n        def clip_bounds(population):\n            return np.clip(population, -5.0, 5.0)\n\n        def mutate(population, target_idx, f):\n            candidates = list(range(len(population)))\n            candidates.remove(target_idx)\n            a, b, c = np.random.choice(candidates, 3, replace=False)\n            mutant = population[a] + f * (population[b] - population[c])\n            return clip_bounds(mutant)\n\n        def adapt_f(population, target_idx, f):\n            if np.random.rand() < self.p:\n                f = np.random.uniform(0, 1)\n            return f\n\n        def adjust_f(population, f):\n            diversity = np.mean(np.std(population, axis=0))\n            f = f * np.exp(-self.p * diversity)\n            return f\n\n        def crossover(target, mutant):\n            trial = np.copy(target)\n            crossover_points = np.random.rand(self.dim) < self.cr\n            if not np.any(crossover_points):\n                crossover_points[np.random.randint(0, self.dim)] = True\n            trial[crossover_points] = mutant[crossover_points]\n            return trial\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                f = adapt_f(population, i, self.f)\n                f = adjust_f(population, f)  # Dynamic mutation factor adaptation for enhanced performance\n                mutant = mutate(population, i, f)\n                trial = crossover(population[i], mutant)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n        return best_solution", "name": "Novel_Metaheuristic_Optimizer", "description": "Incorporating a novel adaptive mutation factor adjustment based on population diversity to further enhance exploration and exploitation in optimization.", "configspace": "", "generation": 61, "fitness": 0.4297439464409878, "feedback": "The algorithm Novel_Metaheuristic_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.43 with standard deviation 0.26.", "error": "", "parent_id": "b742edd6-ebfe-46f5-b50d-b45a1f6aad5f", "metadata": {"aucs": [0.8415483320083317, 0.7873734851969789, 0.8208808188951524, 0.7968317770074933, 0.8325281512880215, 0.8272777054416194, 0.8271262860501101, 0.8323831676002205, 0.8181720814009356, 0.7175307743728203, 0.72130816045329, 0.6856890470051182, 0.7013491858505024, 0.7188101000831255, 0.7058090837628903, 0.7005074414011923, 0.7166751413437723, 0.13248636011923154, 0.4481775897642457, 0.16102923138644654, 0.4367880666108337, 0.3219191331850335, 0.1509365529628116, 0.377243101950949, 0.4095006832910977, 0.44595334805735665, 0.15532262200074187, 0.13809757285034396, 0.1361915757158083, 0.11516920968260258, 0.14613427521767353, 0.22911290826525166, 0.151737800167288, 0.13880238662463684, 0.11119125394176244, 0.15544200383027185, 0.8743370348690453, 0.8867117120609392, 0.8202366863092585, 0.8639084180893842, 0.8941788249323595, 0.8082501977703898, 0.8544252756764904, 0.8543604125483817, 0.8888734804478887, 0.5744826161629303, 0.4990439103576192, 0.47197792815808515, 0.4514284564293579, 0.43521704856130194, 0.4696054848577018, 0.5437448683615151, 0.5310316375509425, 0.60035876775151, 0.22811658500048193, 0.8469526501122752, 0.8105368552861398, 0.8821213207203665, 0.2707250022530432, 0.8452292686281677, 0.7823594917233916, 0.6628786920221681, 0.7890969796028133, 0.4603532283884616, 0.3877592763404131, 0.268807891850954, 0.5132702592579393, 0.3009966760656976, 0.6399506148770595, 0.20807985059275258, 0.4445581216905875, 0.6181984321201806, 0.30942627605161355, 0.3326397968306458, 0.1608892210430629, 0.1749878119831747, 0.21524064113644759, 0.43136284441578276, 0.2842849611404469, 0.3014713077306115, 0.3247999997958966, 9.999999999998899e-05, 0.5420255724431384, 0.5167132287147271, 0.323623210693478, 0.5236202492560686, 0.03582664293776583, 0.4961863160446829, 0.5983685556635396, 0.48004169927687823, 0.5751253318349361, 0.6023216541096823, 0.6765215155203397, 0.09569981795327731, 0.1327458453878797, 0.06657917606497121, 0.3967835739020187, 0.6609248232643044, 0.39831270863378765, 0.0789125263977809, 0.25837529774824197, 0.14761951524700612, 0.26941640692550883, 0.37390483165996746, 0.22667063106565877, 0.14796595651761657, 0.1526360340075551, 0.26586715630625746, 0.401238492885285, 0.3016090297452153, 0.3927266672695702, 0.4099603080875881, 0.4161333248714256, 0.37792551322591217, 0.3724271730527302, 0.3498130471339609, 0.36362638907756284, 0.7476894586672209, 0.7643255296485678, 0.7551894266165657, 0.7664103654213383, 0.7428808778224834, 0.7324945902419097, 0.7456933441538313, 0.6885754212652295, 0.7580606973847237, 0.42811269293543086, 0.14023066925309902, 0.10670569028533317, 0.1406691271832491, 0.09772123272890199, 0.16371495763749244, 0.1326531405400656, 0.11788054082511534, 0.16773572817661409, 0.6868691877063224, 0.5713913005760239, 0.5309481753150553, 0.37953433688543214, 0.6106076061235983, 0.314816965812432, 0.1926880972945808, 0.5123652832968015, 0.5125182995620365, 0.4835676863453505, 0.4660311947908924, 0.4808107951434111, 0.5267577888222441, 0.48228727834468044, 0.503222362960514, 0.5096342561306109, 0.5134198656542641, 0.49642041101932943, 0.39478153057249354, 0.36527659798553924, 0.3749038312930758, 0.389917400507931, 0.3353589314285699, 0.3837320301256505, 0.40312839777059384, 0.391779303767258, 0.3847962728292338, 0.21026365337211628, 0.22614358433930037, 0.2218321701020638, 0.2250482954759514, 0.2030028089441399, 0.22166026096906555, 0.22894392952207965, 0.22843827879566903, 0.22141354291605542, 0.23948428157452517, 0.21788039690686845, 0.23209716514423484, 0.6323247915792307, 0.7276185432482504, 0.22753716020817816, 0.23116820489455325, 0.2095363873696986, 0.2383927323253613, 0.18727057050597484, 0.18533370685014028, 0.7980098114208879, 0.879165869841122, 0.8618013365217025, 0.1973429465049138, 0.8234543070425426, 0.8684006477823741, 0.8597041019336726, 0.7552653818676855, 0.21084529289173048, 0.7955936385588998, 0.208066081343396, 0.832113022434438, 0.16617950435428208, 0.7530512572127844, 0.7738087910020401, 0.15323970621043426, 0.19212286733565198, 0.18884072021162834, 0.18645151134852433, 0.2201990884926236, 0.1742758643179808, 0.18670923575454967, 0.1839366627946203, 0.17766393401910097, 0.1934857351664151, 0.10854033480544945, 0.07898219760305658, 0.0893484705276576, 0.10244739581337559, 0.08211042189359996, 0.08303260433089732, 0.0851538042370803, 0.09383507122744528, 0.0931642152883072]}, "mutation_prompt": null}
{"id": "e67f4a71-77fb-4e1b-8ec6-6de8e5d2401f", "solution": "import numpy as np\n\nclass Dynamic_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, pop_size=50, c1=2.0, c2=2.0, w=0.7, f=0.5, cr=0.9, p=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.c1 = c1\n        self.c2 = c2\n        self.w = w\n        self.f = f\n        self.cr = cr\n        self.p = p\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(ind) for ind in population])\n\n        def clip_bounds(population):\n            return np.clip(population, -5.0, 5.0)\n\n        def mutate(population, target_idx, f):\n            candidates = list(range(len(population)))\n            candidates.remove(target_idx)\n            a, b, c = np.random.choice(candidates, 3, replace=False)\n            mutant = population[a] + f * (population[b] - population[c])\n            return clip_bounds(mutant)\n\n        def adapt_f(population, target_idx, f):\n            if np.random.rand() < self.p:\n                f = np.random.uniform(0, 1)\n            return f\n\n        def adjust_f(population, f):\n            diversity = np.mean(np.std(population, axis=0))\n            f = f * np.exp(-self.p * diversity)\n            return f\n\n        def crossover(target, mutant):\n            trial = np.copy(target)\n            crossover_points = np.random.rand(self.dim) < self.cr\n            if not np.any(crossover_points):\n                crossover_points[np.random.randint(0, self.dim)] = True\n            trial[crossover_points] = mutant[crossover_points]\n            return trial\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                f = adapt_f(population, i, self.f)\n                f = adjust_f(population, f)  # New line for dynamic mutation factor adaptation\n                mutant = mutate(population, i, f)\n                trial = crossover(population[i], mutant)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n        return best_solution", "name": "Dynamic_DE_PSO_Optimizer", "description": "Improving DE_PSO_Optimizer by incorporating a dynamic mechanism to adjust the mutation factor based on population diversity to enhance exploration and exploitation.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b742edd6-ebfe-46f5-b50d-b45a1f6aad5f", "metadata": {"aucs": [0.8415483320083317, 0.7873734851969789, 0.8208808188951524, 0.7968317770074933, 0.8325281512880215, 0.8272777054416194, 0.8271262860501101, 0.8323831676002205, 0.8181720814009356, 0.7175307743728203, 0.72130816045329, 0.6856890470051182, 0.7013491858505024, 0.7188101000831255, 0.7058090837628903, 0.7005074414011923, 0.7166751413437723, 0.13248636011923154, 0.4481775897642457, 0.16102923138644654, 0.4367880666108337, 0.3219191331850335, 0.1509365529628116, 0.377243101950949, 0.4095006832910977, 0.44595334805735665, 0.15532262200074187, 0.13809757285034396, 0.1361915757158083, 0.11516920968260258, 0.14613427521767353, 0.22911290826525166, 0.151737800167288, 0.13880238662463684, 0.11119125394176244, 0.15544200383027185, 0.8743370348690453, 0.8867117120609392, 0.8202366863092585, 0.8639084180893842, 0.8941788249323595, 0.8082501977703898, 0.8544252756764904, 0.8543604125483817, 0.8888734804478887, 0.5744826161629303, 0.4990439103576192, 0.47197792815808515, 0.4514284564293579, 0.43521704856130194, 0.4696054848577018, 0.5437448683615151, 0.5310316375509425, 0.60035876775151, 0.22811658500048193, 0.8469526501122752, 0.8105368552861398, 0.8821213207203665, 0.2707250022530432, 0.8452292686281677, 0.7823594917233916, 0.6628786920221681, 0.7890969796028133, 0.4603532283884616, 0.3877592763404131, 0.268807891850954, 0.5132702592579393, 0.3009966760656976, 0.6399506148770595, 0.20807985059275258, 0.4445581216905875, 0.6181984321201806, 0.30942627605161355, 0.3326397968306458, 0.1608892210430629, 0.1749878119831747, 0.21524064113644759, 0.43136284441578276, 0.2842849611404469, 0.3014713077306115, 0.3247999997958966, 9.999999999998899e-05, 0.5420255724431384, 0.5167132287147271, 0.323623210693478, 0.5236202492560686, 0.03582664293776583, 0.4961863160446829, 0.5983685556635396, 0.48004169927687823, 0.5751253318349361, 0.6023216541096823, 0.6765215155203397, 0.09569981795327731, 0.1327458453878797, 0.06657917606497121, 0.3967835739020187, 0.6609248232643044, 0.39831270863378765, 0.0789125263977809, 0.25837529774824197, 0.14761951524700612, 0.26941640692550883, 0.37390483165996746, 0.22667063106565877, 0.14796595651761657, 0.1526360340075551, 0.26586715630625746, 0.401238492885285, 0.3016090297452153, 0.3927266672695702, 0.4099603080875881, 0.4161333248714256, 0.37792551322591217, 0.3724271730527302, 0.3498130471339609, 0.36362638907756284, 0.7476894586672209, 0.7643255296485678, 0.7551894266165657, 0.7664103654213383, 0.7428808778224834, 0.7324945902419097, 0.7456933441538313, 0.6885754212652295, 0.7580606973847237, 0.42811269293543086, 0.14023066925309902, 0.10670569028533317, 0.1406691271832491, 0.09772123272890199, 0.16371495763749244, 0.1326531405400656, 0.11788054082511534, 0.16773572817661409, 0.6868691877063224, 0.5713913005760239, 0.5309481753150553, 0.37953433688543214, 0.6106076061235983, 0.314816965812432, 0.1926880972945808, 0.5123652832968015, 0.5125182995620365, 0.4835676863453505, 0.4660311947908924, 0.4808107951434111, 0.5267577888222441, 0.48228727834468044, 0.503222362960514, 0.5096342561306109, 0.5134198656542641, 0.49642041101932943, 0.39478153057249354, 0.36527659798553924, 0.3749038312930758, 0.389917400507931, 0.3353589314285699, 0.3837320301256505, 0.40312839777059384, 0.391779303767258, 0.3847962728292338, 0.21026365337211628, 0.22614358433930037, 0.2218321701020638, 0.2250482954759514, 0.2030028089441399, 0.22166026096906555, 0.22894392952207965, 0.22843827879566903, 0.22141354291605542, 0.23948428157452517, 0.21788039690686845, 0.23209716514423484, 0.6323247915792307, 0.7276185432482504, 0.22753716020817816, 0.23116820489455325, 0.2095363873696986, 0.2383927323253613, 0.18727057050597484, 0.18533370685014028, 0.7980098114208879, 0.879165869841122, 0.8618013365217025, 0.1973429465049138, 0.8234543070425426, 0.8684006477823741, 0.8597041019336726, 0.7552653818676855, 0.21084529289173048, 0.7955936385588998, 0.208066081343396, 0.832113022434438, 0.16617950435428208, 0.7530512572127844, 0.7738087910020401, 0.15323970621043426, 0.19212286733565198, 0.18884072021162834, 0.18645151134852433, 0.2201990884926236, 0.1742758643179808, 0.18670923575454967, 0.1839366627946203, 0.17766393401910097, 0.1934857351664151, 0.10854033480544945, 0.07898219760305658, 0.0893484705276576, 0.10244739581337559, 0.08211042189359996, 0.08303260433089732, 0.0851538042370803, 0.09383507122744528, 0.0931642152883072]}, "mutation_prompt": null}
{"id": "aa59ffff-3607-406f-82c9-02535b8580d0", "solution": "import numpy as np\n\nclass CS_OBL_Optimizer:\n    def __init__(self, budget, dim, population_size=50, pa=0.25, alpha=1.5, beta=1.5):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = population_size\n        self.pa = pa\n        self.alpha = alpha\n        self.beta = beta\n\n    def __call__(self, func):\n        def levy_flight(dim):\n            beta = 1.5\n            sigma = (gamma(1 + beta) * np.sin(np.pi * beta / 2) / (gamma((1 + beta) / 2) * beta * 2 ** ((beta - 1) / 2))) ** (1 / beta)\n            u = np.random.normal(0, sigma, dim)\n            v = np.random.normal(0, 1, dim)\n            step = u / np.abs(v) ** (1 / beta)\n            return step\n\n        def clip_bounds(population):\n            return np.clip(population, -5.0, 5.0)\n\n        def generate_opposite(individual):\n            return -individual\n\n        population = np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        for _ in range(self.budget - self.population_size):\n            new_population = np.empty_like(population)\n            for i in range(self.population_size):\n                if np.random.rand() > self.pa:\n                    step = levy_flight(self.dim)\n                    new_individual = population[i] + step * self.alpha * (population[i] - best_solution)\n                    new_individual = clip_bounds(new_individual)\n                    if func(new_individual) < fitness[i]:\n                        new_population[i] = new_individual\n                    else:\n                        new_population[i] = population[i]\n                else:\n                    new_population[i] = generate_opposite(population[i])\n                    \n            population = new_population\n            fitness = np.array([func(ind) for ind in population])\n            best_idx = np.argmin(fitness)\n            best_solution = population[best_idx]\n\n        return best_solution", "name": "CS_OBL_Optimizer", "description": "Incorporating a hybrid cuckoo search algorithm with opposition-based learning (CS-OBL) for global optimization, enhancing exploration and exploitation.", "configspace": "", "generation": 63, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'gamma' is not defined\").", "error": "NameError(\"name 'gamma' is not defined\")", "parent_id": "b742edd6-ebfe-46f5-b50d-b45a1f6aad5f", "metadata": {}, "mutation_prompt": null}
{"id": "b1ae8daf-794e-4b75-b160-7f5f55dc67cd", "solution": "import numpy as np\n\nclass Dynamic_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, pop_size=50, c1=2.0, c2=2.0, w=0.7, f=0.5, cr=0.9, p=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.c1 = c1\n        self.c2 = c2\n        self.w = w\n        self.f = f\n        self.cr = cr\n        self.p = p\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(ind) for ind in population])\n\n        def clip_bounds(population):\n            return np.clip(population, -5.0, 5.0)\n\n        def mutate(population, target_idx, f):\n            candidates = list(range(len(population)))\n            candidates.remove(target_idx)\n            a, b, c = np.random.choice(candidates, 3, replace=False)\n            mutant = population[a] + f * (population[b] - population[c])\n            return clip_bounds(mutant)\n\n        def adapt_f(population, target_idx, f):\n            if np.random.rand() < self.p:\n                f = np.random.uniform(0, 1)\n            return f\n\n        def adjust_f(population, f):\n            diversity = np.mean(np.std(population, axis=0))\n            f = f * np.exp(-self.p * diversity)\n            return f\n\n        def crossover(target, mutant):\n            trial = np.copy(target)\n            crossover_points = np.random.rand(self.dim) < self.cr\n            if not np.any(crossover_points):\n                crossover_points[np.random.randint(0, self.dim)] = True\n            trial[crossover_points] = mutant[crossover_points]\n            return trial\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                f = adapt_f(population, i, self.f)\n                f = adjust_f(population, f)  # New line for dynamic mutation factor adaptation\n                mutant = mutate(population, i, f)\n                trial = crossover(population[i], mutant)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n        return best_solution", "name": "Dynamic_DE_PSO_Optimizer", "description": "Improving DE_PSO_Optimizer by incorporating a dynamic mechanism to adjust the mutation factor based on population diversity to enhance exploration and exploitation.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b742edd6-ebfe-46f5-b50d-b45a1f6aad5f", "metadata": {"aucs": [0.8415483320083317, 0.7873734851969789, 0.8208808188951524, 0.7968317770074933, 0.8325281512880215, 0.8272777054416194, 0.8271262860501101, 0.8323831676002205, 0.8181720814009356, 0.7175307743728203, 0.72130816045329, 0.6856890470051182, 0.7013491858505024, 0.7188101000831255, 0.7058090837628903, 0.7005074414011923, 0.7166751413437723, 0.13248636011923154, 0.4481775897642457, 0.16102923138644654, 0.4367880666108337, 0.3219191331850335, 0.1509365529628116, 0.377243101950949, 0.4095006832910977, 0.44595334805735665, 0.15532262200074187, 0.13809757285034396, 0.1361915757158083, 0.11516920968260258, 0.14613427521767353, 0.22911290826525166, 0.151737800167288, 0.13880238662463684, 0.11119125394176244, 0.15544200383027185, 0.8743370348690453, 0.8867117120609392, 0.8202366863092585, 0.8639084180893842, 0.8941788249323595, 0.8082501977703898, 0.8544252756764904, 0.8543604125483817, 0.8888734804478887, 0.5744826161629303, 0.4990439103576192, 0.47197792815808515, 0.4514284564293579, 0.43521704856130194, 0.4696054848577018, 0.5437448683615151, 0.5310316375509425, 0.60035876775151, 0.22811658500048193, 0.8469526501122752, 0.8105368552861398, 0.8821213207203665, 0.2707250022530432, 0.8452292686281677, 0.7823594917233916, 0.6628786920221681, 0.7890969796028133, 0.4603532283884616, 0.3877592763404131, 0.268807891850954, 0.5132702592579393, 0.3009966760656976, 0.6399506148770595, 0.20807985059275258, 0.4445581216905875, 0.6181984321201806, 0.30942627605161355, 0.3326397968306458, 0.1608892210430629, 0.1749878119831747, 0.21524064113644759, 0.43136284441578276, 0.2842849611404469, 0.3014713077306115, 0.3247999997958966, 9.999999999998899e-05, 0.5420255724431384, 0.5167132287147271, 0.323623210693478, 0.5236202492560686, 0.03582664293776583, 0.4961863160446829, 0.5983685556635396, 0.48004169927687823, 0.5751253318349361, 0.6023216541096823, 0.6765215155203397, 0.09569981795327731, 0.1327458453878797, 0.06657917606497121, 0.3967835739020187, 0.6609248232643044, 0.39831270863378765, 0.0789125263977809, 0.25837529774824197, 0.14761951524700612, 0.26941640692550883, 0.37390483165996746, 0.22667063106565877, 0.14796595651761657, 0.1526360340075551, 0.26586715630625746, 0.401238492885285, 0.3016090297452153, 0.3927266672695702, 0.4099603080875881, 0.4161333248714256, 0.37792551322591217, 0.3724271730527302, 0.3498130471339609, 0.36362638907756284, 0.7476894586672209, 0.7643255296485678, 0.7551894266165657, 0.7664103654213383, 0.7428808778224834, 0.7324945902419097, 0.7456933441538313, 0.6885754212652295, 0.7580606973847237, 0.42811269293543086, 0.14023066925309902, 0.10670569028533317, 0.1406691271832491, 0.09772123272890199, 0.16371495763749244, 0.1326531405400656, 0.11788054082511534, 0.16773572817661409, 0.6868691877063224, 0.5713913005760239, 0.5309481753150553, 0.37953433688543214, 0.6106076061235983, 0.314816965812432, 0.1926880972945808, 0.5123652832968015, 0.5125182995620365, 0.4835676863453505, 0.4660311947908924, 0.4808107951434111, 0.5267577888222441, 0.48228727834468044, 0.503222362960514, 0.5096342561306109, 0.5134198656542641, 0.49642041101932943, 0.39478153057249354, 0.36527659798553924, 0.3749038312930758, 0.389917400507931, 0.3353589314285699, 0.3837320301256505, 0.40312839777059384, 0.391779303767258, 0.3847962728292338, 0.21026365337211628, 0.22614358433930037, 0.2218321701020638, 0.2250482954759514, 0.2030028089441399, 0.22166026096906555, 0.22894392952207965, 0.22843827879566903, 0.22141354291605542, 0.23948428157452517, 0.21788039690686845, 0.23209716514423484, 0.6323247915792307, 0.7276185432482504, 0.22753716020817816, 0.23116820489455325, 0.2095363873696986, 0.2383927323253613, 0.18727057050597484, 0.18533370685014028, 0.7980098114208879, 0.879165869841122, 0.8618013365217025, 0.1973429465049138, 0.8234543070425426, 0.8684006477823741, 0.8597041019336726, 0.7552653818676855, 0.21084529289173048, 0.7955936385588998, 0.208066081343396, 0.832113022434438, 0.16617950435428208, 0.7530512572127844, 0.7738087910020401, 0.15323970621043426, 0.19212286733565198, 0.18884072021162834, 0.18645151134852433, 0.2201990884926236, 0.1742758643179808, 0.18670923575454967, 0.1839366627946203, 0.17766393401910097, 0.1934857351664151, 0.10854033480544945, 0.07898219760305658, 0.0893484705276576, 0.10244739581337559, 0.08211042189359996, 0.08303260433089732, 0.0851538042370803, 0.09383507122744528, 0.0931642152883072]}, "mutation_prompt": null}
{"id": "7144aaaa-aad9-4091-a54a-84994654cbc9", "solution": "import numpy as np\n\nclass Dynamic_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, pop_size=50, c1=2.0, c2=2.0, w=0.7, f=0.5, cr=0.9, p=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.c1 = c1\n        self.c2 = c2\n        self.w = w\n        self.f = f\n        self.cr = cr\n        self.p = p\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(ind) for ind in population])\n\n        def clip_bounds(population):\n            return np.clip(population, -5.0, 5.0)\n\n        def mutate(population, target_idx, f):\n            candidates = list(range(len(population)))\n            candidates.remove(target_idx)\n            a, b, c = np.random.choice(candidates, 3, replace=False)\n            mutant = population[a] + f * (population[b] - population[c])\n            return clip_bounds(mutant)\n\n        def adapt_f(population, target_idx, f):\n            if np.random.rand() < self.p:\n                f = np.random.uniform(0, 1)\n            return f\n\n        def adjust_f(population, f):\n            diversity = np.mean(np.std(population, axis=0))\n            f = f * np.exp(-self.p * diversity)\n            return f\n\n        def crossover(target, mutant):\n            trial = np.copy(target)\n            crossover_points = np.random.rand(self.dim) < self.cr\n            if not np.any(crossover_points):\n                crossover_points[np.random.randint(0, self.dim)] = True\n            trial[crossover_points] = mutant[crossover_points]\n            return trial\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                f = adapt_f(population, i, self.f)\n                f = adjust_f(population, f)  # New line for dynamic mutation factor adaptation\n                mutant = mutate(population, i, f)\n                trial = crossover(population[i], mutant)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n        return best_solution", "name": "Dynamic_DE_PSO_Optimizer", "description": "Improving DE_PSO_Optimizer by incorporating a dynamic mechanism to adjust the mutation factor based on population diversity to enhance exploration and exploitation.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b742edd6-ebfe-46f5-b50d-b45a1f6aad5f", "metadata": {"aucs": [0.8415483320083317, 0.7873734851969789, 0.8208808188951524, 0.7968317770074933, 0.8325281512880215, 0.8272777054416194, 0.8271262860501101, 0.8323831676002205, 0.8181720814009356, 0.7175307743728203, 0.72130816045329, 0.6856890470051182, 0.7013491858505024, 0.7188101000831255, 0.7058090837628903, 0.7005074414011923, 0.7166751413437723, 0.13248636011923154, 0.4481775897642457, 0.16102923138644654, 0.4367880666108337, 0.3219191331850335, 0.1509365529628116, 0.377243101950949, 0.4095006832910977, 0.44595334805735665, 0.15532262200074187, 0.13809757285034396, 0.1361915757158083, 0.11516920968260258, 0.14613427521767353, 0.22911290826525166, 0.151737800167288, 0.13880238662463684, 0.11119125394176244, 0.15544200383027185, 0.8743370348690453, 0.8867117120609392, 0.8202366863092585, 0.8639084180893842, 0.8941788249323595, 0.8082501977703898, 0.8544252756764904, 0.8543604125483817, 0.8888734804478887, 0.5744826161629303, 0.4990439103576192, 0.47197792815808515, 0.4514284564293579, 0.43521704856130194, 0.4696054848577018, 0.5437448683615151, 0.5310316375509425, 0.60035876775151, 0.22811658500048193, 0.8469526501122752, 0.8105368552861398, 0.8821213207203665, 0.2707250022530432, 0.8452292686281677, 0.7823594917233916, 0.6628786920221681, 0.7890969796028133, 0.4603532283884616, 0.3877592763404131, 0.268807891850954, 0.5132702592579393, 0.3009966760656976, 0.6399506148770595, 0.20807985059275258, 0.4445581216905875, 0.6181984321201806, 0.30942627605161355, 0.3326397968306458, 0.1608892210430629, 0.1749878119831747, 0.21524064113644759, 0.43136284441578276, 0.2842849611404469, 0.3014713077306115, 0.3247999997958966, 9.999999999998899e-05, 0.5420255724431384, 0.5167132287147271, 0.323623210693478, 0.5236202492560686, 0.03582664293776583, 0.4961863160446829, 0.5983685556635396, 0.48004169927687823, 0.5751253318349361, 0.6023216541096823, 0.6765215155203397, 0.09569981795327731, 0.1327458453878797, 0.06657917606497121, 0.3967835739020187, 0.6609248232643044, 0.39831270863378765, 0.0789125263977809, 0.25837529774824197, 0.14761951524700612, 0.26941640692550883, 0.37390483165996746, 0.22667063106565877, 0.14796595651761657, 0.1526360340075551, 0.26586715630625746, 0.401238492885285, 0.3016090297452153, 0.3927266672695702, 0.4099603080875881, 0.4161333248714256, 0.37792551322591217, 0.3724271730527302, 0.3498130471339609, 0.36362638907756284, 0.7476894586672209, 0.7643255296485678, 0.7551894266165657, 0.7664103654213383, 0.7428808778224834, 0.7324945902419097, 0.7456933441538313, 0.6885754212652295, 0.7580606973847237, 0.42811269293543086, 0.14023066925309902, 0.10670569028533317, 0.1406691271832491, 0.09772123272890199, 0.16371495763749244, 0.1326531405400656, 0.11788054082511534, 0.16773572817661409, 0.6868691877063224, 0.5713913005760239, 0.5309481753150553, 0.37953433688543214, 0.6106076061235983, 0.314816965812432, 0.1926880972945808, 0.5123652832968015, 0.5125182995620365, 0.4835676863453505, 0.4660311947908924, 0.4808107951434111, 0.5267577888222441, 0.48228727834468044, 0.503222362960514, 0.5096342561306109, 0.5134198656542641, 0.49642041101932943, 0.39478153057249354, 0.36527659798553924, 0.3749038312930758, 0.389917400507931, 0.3353589314285699, 0.3837320301256505, 0.40312839777059384, 0.391779303767258, 0.3847962728292338, 0.21026365337211628, 0.22614358433930037, 0.2218321701020638, 0.2250482954759514, 0.2030028089441399, 0.22166026096906555, 0.22894392952207965, 0.22843827879566903, 0.22141354291605542, 0.23948428157452517, 0.21788039690686845, 0.23209716514423484, 0.6323247915792307, 0.7276185432482504, 0.22753716020817816, 0.23116820489455325, 0.2095363873696986, 0.2383927323253613, 0.18727057050597484, 0.18533370685014028, 0.7980098114208879, 0.879165869841122, 0.8618013365217025, 0.1973429465049138, 0.8234543070425426, 0.8684006477823741, 0.8597041019336726, 0.7552653818676855, 0.21084529289173048, 0.7955936385588998, 0.208066081343396, 0.832113022434438, 0.16617950435428208, 0.7530512572127844, 0.7738087910020401, 0.15323970621043426, 0.19212286733565198, 0.18884072021162834, 0.18645151134852433, 0.2201990884926236, 0.1742758643179808, 0.18670923575454967, 0.1839366627946203, 0.17766393401910097, 0.1934857351664151, 0.10854033480544945, 0.07898219760305658, 0.0893484705276576, 0.10244739581337559, 0.08211042189359996, 0.08303260433089732, 0.0851538042370803, 0.09383507122744528, 0.0931642152883072]}, "mutation_prompt": null}
{"id": "bc82a062-7cc9-45a0-b06b-f686e1eea457", "solution": "import numpy as np\n\nclass Adaptive_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, pop_size=50, c1=2.0, c2=2.0, w=0.7, f=0.5, cr=0.9, p=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.c1 = c1\n        self.c2 = c2\n        self.w = w\n        self.f = f\n        self.cr = cr\n        self.p = p\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(ind) for ind in population])\n\n        def clip_bounds(population):\n            return np.clip(population, -5.0, 5.0)\n\n        def mutate(population, target_idx, f):\n            candidates = list(range(len(population)))\n            candidates.remove(target_idx)\n            a, b, c = np.random.choice(candidates, 3, replace=False)\n            mutant = population[a] + f * (population[b] - population[c])\n            return clip_bounds(mutant)\n\n        def adapt_f(population, target_idx, f, prev_best_fitness, prev_best_fitness_count):\n            if np.random.rand() < self.p:\n                f = np.random.uniform(0, 1)\n            elif prev_best_fitness_count > 0:\n                improvement_ratio = (prev_best_fitness - prev_best_fitness_count) / prev_best_fitness_count\n                f *= improvement_ratio\n            return f\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        prev_best_fitness = fitness[best_idx]\n        prev_best_fitness_count = 0\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                f = adapt_f(population, i, self.f, prev_best_fitness, prev_best_fitness_count)\n                mutant = mutate(population, i, f)\n                trial = crossover(population[i], mutant)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n                        prev_best_fitness_count += 1\n        return best_solution", "name": "Adaptive_DE_PSO_Optimizer", "description": "Enhancing Dynamic DE PSO Optimizer by incorporating a novel adaptive mutation factor adjustment based on individual improvement trends to boost convergence speed and solution quality.", "configspace": "", "generation": 66, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'crossover' is not defined\").", "error": "NameError(\"name 'crossover' is not defined\")", "parent_id": "b742edd6-ebfe-46f5-b50d-b45a1f6aad5f", "metadata": {}, "mutation_prompt": null}
{"id": "2bfac751-0be2-481e-b49a-8e5187a18498", "solution": "import numpy as np\n\nclass Dynamic_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, pop_size=50, c1=2.0, c2=2.0, w=0.7, f=0.5, cr=0.9, p=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.c1 = c1\n        self.c2 = c2\n        self.w = w\n        self.f = f\n        self.cr = cr\n        self.p = p\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(ind) for ind in population])\n\n        def clip_bounds(population):\n            return np.clip(population, -5.0, 5.0)\n\n        def mutate(population, target_idx, f):\n            candidates = list(range(len(population)))\n            candidates.remove(target_idx)\n            a, b, c = np.random.choice(candidates, 3, replace=False)\n            mutant = population[a] + f * (population[b] - population[c])\n            return clip_bounds(mutant)\n\n        def adapt_f(population, target_idx, f):\n            if np.random.rand() < self.p:\n                f = np.random.uniform(0, 1)\n            return f\n\n        def adjust_f(population, f):\n            diversity = np.mean(np.std(population, axis=0))\n            f = f * np.exp(-self.p * diversity)\n            return f\n\n        def crossover(target, mutant):\n            trial = np.copy(target)\n            crossover_points = np.random.rand(self.dim) < self.cr\n            if not np.any(crossover_points):\n                crossover_points[np.random.randint(0, self.dim)] = True\n            trial[crossover_points] = mutant[crossover_points]\n            return trial\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                f = adapt_f(population, i, self.f)\n                f = adjust_f(population, f)  # New line for dynamic mutation factor adaptation\n                mutant = mutate(population, i, f)\n                trial = crossover(population[i], mutant)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n        return best_solution", "name": "Dynamic_DE_PSO_Optimizer", "description": "Improving DE_PSO_Optimizer by incorporating a dynamic mechanism to adjust the mutation factor based on population diversity to enhance exploration and exploitation.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b742edd6-ebfe-46f5-b50d-b45a1f6aad5f", "metadata": {"aucs": [0.8415483320083317, 0.7873734851969789, 0.8208808188951524, 0.7968317770074933, 0.8325281512880215, 0.8272777054416194, 0.8271262860501101, 0.8323831676002205, 0.8181720814009356, 0.7175307743728203, 0.72130816045329, 0.6856890470051182, 0.7013491858505024, 0.7188101000831255, 0.7058090837628903, 0.7005074414011923, 0.7166751413437723, 0.13248636011923154, 0.4481775897642457, 0.16102923138644654, 0.4367880666108337, 0.3219191331850335, 0.1509365529628116, 0.377243101950949, 0.4095006832910977, 0.44595334805735665, 0.15532262200074187, 0.13809757285034396, 0.1361915757158083, 0.11516920968260258, 0.14613427521767353, 0.22911290826525166, 0.151737800167288, 0.13880238662463684, 0.11119125394176244, 0.15544200383027185, 0.8743370348690453, 0.8867117120609392, 0.8202366863092585, 0.8639084180893842, 0.8941788249323595, 0.8082501977703898, 0.8544252756764904, 0.8543604125483817, 0.8888734804478887, 0.5744826161629303, 0.4990439103576192, 0.47197792815808515, 0.4514284564293579, 0.43521704856130194, 0.4696054848577018, 0.5437448683615151, 0.5310316375509425, 0.60035876775151, 0.22811658500048193, 0.8469526501122752, 0.8105368552861398, 0.8821213207203665, 0.2707250022530432, 0.8452292686281677, 0.7823594917233916, 0.6628786920221681, 0.7890969796028133, 0.4603532283884616, 0.3877592763404131, 0.268807891850954, 0.5132702592579393, 0.3009966760656976, 0.6399506148770595, 0.20807985059275258, 0.4445581216905875, 0.6181984321201806, 0.30942627605161355, 0.3326397968306458, 0.1608892210430629, 0.1749878119831747, 0.21524064113644759, 0.43136284441578276, 0.2842849611404469, 0.3014713077306115, 0.3247999997958966, 9.999999999998899e-05, 0.5420255724431384, 0.5167132287147271, 0.323623210693478, 0.5236202492560686, 0.03582664293776583, 0.4961863160446829, 0.5983685556635396, 0.48004169927687823, 0.5751253318349361, 0.6023216541096823, 0.6765215155203397, 0.09569981795327731, 0.1327458453878797, 0.06657917606497121, 0.3967835739020187, 0.6609248232643044, 0.39831270863378765, 0.0789125263977809, 0.25837529774824197, 0.14761951524700612, 0.26941640692550883, 0.37390483165996746, 0.22667063106565877, 0.14796595651761657, 0.1526360340075551, 0.26586715630625746, 0.401238492885285, 0.3016090297452153, 0.3927266672695702, 0.4099603080875881, 0.4161333248714256, 0.37792551322591217, 0.3724271730527302, 0.3498130471339609, 0.36362638907756284, 0.7476894586672209, 0.7643255296485678, 0.7551894266165657, 0.7664103654213383, 0.7428808778224834, 0.7324945902419097, 0.7456933441538313, 0.6885754212652295, 0.7580606973847237, 0.42811269293543086, 0.14023066925309902, 0.10670569028533317, 0.1406691271832491, 0.09772123272890199, 0.16371495763749244, 0.1326531405400656, 0.11788054082511534, 0.16773572817661409, 0.6868691877063224, 0.5713913005760239, 0.5309481753150553, 0.37953433688543214, 0.6106076061235983, 0.314816965812432, 0.1926880972945808, 0.5123652832968015, 0.5125182995620365, 0.4835676863453505, 0.4660311947908924, 0.4808107951434111, 0.5267577888222441, 0.48228727834468044, 0.503222362960514, 0.5096342561306109, 0.5134198656542641, 0.49642041101932943, 0.39478153057249354, 0.36527659798553924, 0.3749038312930758, 0.389917400507931, 0.3353589314285699, 0.3837320301256505, 0.40312839777059384, 0.391779303767258, 0.3847962728292338, 0.21026365337211628, 0.22614358433930037, 0.2218321701020638, 0.2250482954759514, 0.2030028089441399, 0.22166026096906555, 0.22894392952207965, 0.22843827879566903, 0.22141354291605542, 0.23948428157452517, 0.21788039690686845, 0.23209716514423484, 0.6323247915792307, 0.7276185432482504, 0.22753716020817816, 0.23116820489455325, 0.2095363873696986, 0.2383927323253613, 0.18727057050597484, 0.18533370685014028, 0.7980098114208879, 0.879165869841122, 0.8618013365217025, 0.1973429465049138, 0.8234543070425426, 0.8684006477823741, 0.8597041019336726, 0.7552653818676855, 0.21084529289173048, 0.7955936385588998, 0.208066081343396, 0.832113022434438, 0.16617950435428208, 0.7530512572127844, 0.7738087910020401, 0.15323970621043426, 0.19212286733565198, 0.18884072021162834, 0.18645151134852433, 0.2201990884926236, 0.1742758643179808, 0.18670923575454967, 0.1839366627946203, 0.17766393401910097, 0.1934857351664151, 0.10854033480544945, 0.07898219760305658, 0.0893484705276576, 0.10244739581337559, 0.08211042189359996, 0.08303260433089732, 0.0851538042370803, 0.09383507122744528, 0.0931642152883072]}, "mutation_prompt": null}
{"id": "1571c5a1-a79a-4d4c-ae11-183e5ac3bd68", "solution": "import numpy as np\n\nclass Dynamic_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, pop_size=50, c1=2.0, c2=2.0, w=0.7, f=0.5, cr=0.9, p=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.c1 = c1\n        self.c2 = c2\n        self.w = w\n        self.f = f\n        self.cr = cr\n        self.p = p\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(ind) for ind in population])\n\n        def clip_bounds(population):\n            return np.clip(population, -5.0, 5.0)\n\n        def mutate(population, target_idx, f):\n            candidates = list(range(len(population)))\n            candidates.remove(target_idx)\n            a, b, c = np.random.choice(candidates, 3, replace=False)\n            mutant = population[a] + f * (population[b] - population[c])\n            return clip_bounds(mutant)\n\n        def adapt_f(population, target_idx, f):\n            if np.random.rand() < self.p:\n                f = np.random.uniform(0, 1)\n            return f\n\n        def adjust_f(population, f):\n            diversity = np.mean(np.std(population, axis=0))\n            f = f * np.exp(-self.p * diversity)\n            return f\n\n        def crossover(target, mutant):\n            trial = np.copy(target)\n            crossover_points = np.random.rand(self.dim) < self.cr\n            if not np.any(crossover_points):\n                crossover_points[np.random.randint(0, self.dim)] = True\n            trial[crossover_points] = mutant[crossover_points]\n            return trial\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                f = adapt_f(population, i, self.f)\n                f = adjust_f(population, f)  # New line for dynamic mutation factor adaptation\n                mutant = mutate(population, i, f)\n                trial = crossover(population[i], mutant)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n        return best_solution", "name": "Dynamic_DE_PSO_Optimizer", "description": "Improving DE_PSO_Optimizer by incorporating a dynamic mechanism to adjust the mutation factor based on population diversity to enhance exploration and exploitation.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b742edd6-ebfe-46f5-b50d-b45a1f6aad5f", "metadata": {"aucs": [0.8415483320083317, 0.7873734851969789, 0.8208808188951524, 0.7968317770074933, 0.8325281512880215, 0.8272777054416194, 0.8271262860501101, 0.8323831676002205, 0.8181720814009356, 0.7175307743728203, 0.72130816045329, 0.6856890470051182, 0.7013491858505024, 0.7188101000831255, 0.7058090837628903, 0.7005074414011923, 0.7166751413437723, 0.13248636011923154, 0.4481775897642457, 0.16102923138644654, 0.4367880666108337, 0.3219191331850335, 0.1509365529628116, 0.377243101950949, 0.4095006832910977, 0.44595334805735665, 0.15532262200074187, 0.13809757285034396, 0.1361915757158083, 0.11516920968260258, 0.14613427521767353, 0.22911290826525166, 0.151737800167288, 0.13880238662463684, 0.11119125394176244, 0.15544200383027185, 0.8743370348690453, 0.8867117120609392, 0.8202366863092585, 0.8639084180893842, 0.8941788249323595, 0.8082501977703898, 0.8544252756764904, 0.8543604125483817, 0.8888734804478887, 0.5744826161629303, 0.4990439103576192, 0.47197792815808515, 0.4514284564293579, 0.43521704856130194, 0.4696054848577018, 0.5437448683615151, 0.5310316375509425, 0.60035876775151, 0.22811658500048193, 0.8469526501122752, 0.8105368552861398, 0.8821213207203665, 0.2707250022530432, 0.8452292686281677, 0.7823594917233916, 0.6628786920221681, 0.7890969796028133, 0.4603532283884616, 0.3877592763404131, 0.268807891850954, 0.5132702592579393, 0.3009966760656976, 0.6399506148770595, 0.20807985059275258, 0.4445581216905875, 0.6181984321201806, 0.30942627605161355, 0.3326397968306458, 0.1608892210430629, 0.1749878119831747, 0.21524064113644759, 0.43136284441578276, 0.2842849611404469, 0.3014713077306115, 0.3247999997958966, 9.999999999998899e-05, 0.5420255724431384, 0.5167132287147271, 0.323623210693478, 0.5236202492560686, 0.03582664293776583, 0.4961863160446829, 0.5983685556635396, 0.48004169927687823, 0.5751253318349361, 0.6023216541096823, 0.6765215155203397, 0.09569981795327731, 0.1327458453878797, 0.06657917606497121, 0.3967835739020187, 0.6609248232643044, 0.39831270863378765, 0.0789125263977809, 0.25837529774824197, 0.14761951524700612, 0.26941640692550883, 0.37390483165996746, 0.22667063106565877, 0.14796595651761657, 0.1526360340075551, 0.26586715630625746, 0.401238492885285, 0.3016090297452153, 0.3927266672695702, 0.4099603080875881, 0.4161333248714256, 0.37792551322591217, 0.3724271730527302, 0.3498130471339609, 0.36362638907756284, 0.7476894586672209, 0.7643255296485678, 0.7551894266165657, 0.7664103654213383, 0.7428808778224834, 0.7324945902419097, 0.7456933441538313, 0.6885754212652295, 0.7580606973847237, 0.42811269293543086, 0.14023066925309902, 0.10670569028533317, 0.1406691271832491, 0.09772123272890199, 0.16371495763749244, 0.1326531405400656, 0.11788054082511534, 0.16773572817661409, 0.6868691877063224, 0.5713913005760239, 0.5309481753150553, 0.37953433688543214, 0.6106076061235983, 0.314816965812432, 0.1926880972945808, 0.5123652832968015, 0.5125182995620365, 0.4835676863453505, 0.4660311947908924, 0.4808107951434111, 0.5267577888222441, 0.48228727834468044, 0.503222362960514, 0.5096342561306109, 0.5134198656542641, 0.49642041101932943, 0.39478153057249354, 0.36527659798553924, 0.3749038312930758, 0.389917400507931, 0.3353589314285699, 0.3837320301256505, 0.40312839777059384, 0.391779303767258, 0.3847962728292338, 0.21026365337211628, 0.22614358433930037, 0.2218321701020638, 0.2250482954759514, 0.2030028089441399, 0.22166026096906555, 0.22894392952207965, 0.22843827879566903, 0.22141354291605542, 0.23948428157452517, 0.21788039690686845, 0.23209716514423484, 0.6323247915792307, 0.7276185432482504, 0.22753716020817816, 0.23116820489455325, 0.2095363873696986, 0.2383927323253613, 0.18727057050597484, 0.18533370685014028, 0.7980098114208879, 0.879165869841122, 0.8618013365217025, 0.1973429465049138, 0.8234543070425426, 0.8684006477823741, 0.8597041019336726, 0.7552653818676855, 0.21084529289173048, 0.7955936385588998, 0.208066081343396, 0.832113022434438, 0.16617950435428208, 0.7530512572127844, 0.7738087910020401, 0.15323970621043426, 0.19212286733565198, 0.18884072021162834, 0.18645151134852433, 0.2201990884926236, 0.1742758643179808, 0.18670923575454967, 0.1839366627946203, 0.17766393401910097, 0.1934857351664151, 0.10854033480544945, 0.07898219760305658, 0.0893484705276576, 0.10244739581337559, 0.08211042189359996, 0.08303260433089732, 0.0851538042370803, 0.09383507122744528, 0.0931642152883072]}, "mutation_prompt": null}
{"id": "389fe13e-c0da-4b92-82bf-a777b8830131", "solution": "import numpy as np\n\nclass Dynamic_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, pop_size=50, c1=2.0, c2=2.0, w=0.7, f=0.5, cr=0.9, p=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.c1 = c1\n        self.c2 = c2\n        self.w = w\n        self.f = f\n        self.cr = cr\n        self.p = p\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(ind) for ind in population])\n\n        def clip_bounds(population):\n            return np.clip(population, -5.0, 5.0)\n\n        def mutate(population, target_idx, f):\n            candidates = list(range(len(population)))\n            candidates.remove(target_idx)\n            a, b, c = np.random.choice(candidates, 3, replace=False)\n            mutant = population[a] + f * (population[b] - population[c])\n            return clip_bounds(mutant)\n\n        def adapt_f(population, target_idx, f):\n            if np.random.rand() < self.p:\n                f = np.random.uniform(0, 1)\n            return f\n\n        def adjust_f(population, f):\n            diversity = np.mean(np.std(population, axis=0))\n            f = f * np.exp(-self.p * diversity)\n            return f\n\n        def crossover(target, mutant):\n            trial = np.copy(target)\n            crossover_points = np.random.rand(self.dim) < self.cr\n            if not np.any(crossover_points):\n                crossover_points[np.random.randint(0, self.dim)] = True\n            trial[crossover_points] = mutant[crossover_points]\n            return trial\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                f = adapt_f(population, i, self.f)\n                f = adjust_f(population, f)  # New line for dynamic mutation factor adaptation\n                mutant = mutate(population, i, f)\n                trial = crossover(population[i], mutant)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n        return best_solution", "name": "Dynamic_DE_PSO_Optimizer", "description": "Improving DE_PSO_Optimizer by incorporating a dynamic mechanism to adjust the mutation factor based on population diversity to enhance exploration and exploitation.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b742edd6-ebfe-46f5-b50d-b45a1f6aad5f", "metadata": {"aucs": [0.8415483320083317, 0.7873734851969789, 0.8208808188951524, 0.7968317770074933, 0.8325281512880215, 0.8272777054416194, 0.8271262860501101, 0.8323831676002205, 0.8181720814009356, 0.7175307743728203, 0.72130816045329, 0.6856890470051182, 0.7013491858505024, 0.7188101000831255, 0.7058090837628903, 0.7005074414011923, 0.7166751413437723, 0.13248636011923154, 0.4481775897642457, 0.16102923138644654, 0.4367880666108337, 0.3219191331850335, 0.1509365529628116, 0.377243101950949, 0.4095006832910977, 0.44595334805735665, 0.15532262200074187, 0.13809757285034396, 0.1361915757158083, 0.11516920968260258, 0.14613427521767353, 0.22911290826525166, 0.151737800167288, 0.13880238662463684, 0.11119125394176244, 0.15544200383027185, 0.8743370348690453, 0.8867117120609392, 0.8202366863092585, 0.8639084180893842, 0.8941788249323595, 0.8082501977703898, 0.8544252756764904, 0.8543604125483817, 0.8888734804478887, 0.5744826161629303, 0.4990439103576192, 0.47197792815808515, 0.4514284564293579, 0.43521704856130194, 0.4696054848577018, 0.5437448683615151, 0.5310316375509425, 0.60035876775151, 0.22811658500048193, 0.8469526501122752, 0.8105368552861398, 0.8821213207203665, 0.2707250022530432, 0.8452292686281677, 0.7823594917233916, 0.6628786920221681, 0.7890969796028133, 0.4603532283884616, 0.3877592763404131, 0.268807891850954, 0.5132702592579393, 0.3009966760656976, 0.6399506148770595, 0.20807985059275258, 0.4445581216905875, 0.6181984321201806, 0.30942627605161355, 0.3326397968306458, 0.1608892210430629, 0.1749878119831747, 0.21524064113644759, 0.43136284441578276, 0.2842849611404469, 0.3014713077306115, 0.3247999997958966, 9.999999999998899e-05, 0.5420255724431384, 0.5167132287147271, 0.323623210693478, 0.5236202492560686, 0.03582664293776583, 0.4961863160446829, 0.5983685556635396, 0.48004169927687823, 0.5751253318349361, 0.6023216541096823, 0.6765215155203397, 0.09569981795327731, 0.1327458453878797, 0.06657917606497121, 0.3967835739020187, 0.6609248232643044, 0.39831270863378765, 0.0789125263977809, 0.25837529774824197, 0.14761951524700612, 0.26941640692550883, 0.37390483165996746, 0.22667063106565877, 0.14796595651761657, 0.1526360340075551, 0.26586715630625746, 0.401238492885285, 0.3016090297452153, 0.3927266672695702, 0.4099603080875881, 0.4161333248714256, 0.37792551322591217, 0.3724271730527302, 0.3498130471339609, 0.36362638907756284, 0.7476894586672209, 0.7643255296485678, 0.7551894266165657, 0.7664103654213383, 0.7428808778224834, 0.7324945902419097, 0.7456933441538313, 0.6885754212652295, 0.7580606973847237, 0.42811269293543086, 0.14023066925309902, 0.10670569028533317, 0.1406691271832491, 0.09772123272890199, 0.16371495763749244, 0.1326531405400656, 0.11788054082511534, 0.16773572817661409, 0.6868691877063224, 0.5713913005760239, 0.5309481753150553, 0.37953433688543214, 0.6106076061235983, 0.314816965812432, 0.1926880972945808, 0.5123652832968015, 0.5125182995620365, 0.4835676863453505, 0.4660311947908924, 0.4808107951434111, 0.5267577888222441, 0.48228727834468044, 0.503222362960514, 0.5096342561306109, 0.5134198656542641, 0.49642041101932943, 0.39478153057249354, 0.36527659798553924, 0.3749038312930758, 0.389917400507931, 0.3353589314285699, 0.3837320301256505, 0.40312839777059384, 0.391779303767258, 0.3847962728292338, 0.21026365337211628, 0.22614358433930037, 0.2218321701020638, 0.2250482954759514, 0.2030028089441399, 0.22166026096906555, 0.22894392952207965, 0.22843827879566903, 0.22141354291605542, 0.23948428157452517, 0.21788039690686845, 0.23209716514423484, 0.6323247915792307, 0.7276185432482504, 0.22753716020817816, 0.23116820489455325, 0.2095363873696986, 0.2383927323253613, 0.18727057050597484, 0.18533370685014028, 0.7980098114208879, 0.879165869841122, 0.8618013365217025, 0.1973429465049138, 0.8234543070425426, 0.8684006477823741, 0.8597041019336726, 0.7552653818676855, 0.21084529289173048, 0.7955936385588998, 0.208066081343396, 0.832113022434438, 0.16617950435428208, 0.7530512572127844, 0.7738087910020401, 0.15323970621043426, 0.19212286733565198, 0.18884072021162834, 0.18645151134852433, 0.2201990884926236, 0.1742758643179808, 0.18670923575454967, 0.1839366627946203, 0.17766393401910097, 0.1934857351664151, 0.10854033480544945, 0.07898219760305658, 0.0893484705276576, 0.10244739581337559, 0.08211042189359996, 0.08303260433089732, 0.0851538042370803, 0.09383507122744528, 0.0931642152883072]}, "mutation_prompt": null}
{"id": "bdefa998-1050-4415-a0de-56015970b1b6", "solution": "import numpy as np\n\nclass Dynamic_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, pop_size=50, c1=2.0, c2=2.0, w=0.7, f=0.5, cr=0.9, p=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.c1 = c1\n        self.c2 = c2\n        self.w = w\n        self.f = f\n        self.cr = cr\n        self.p = p\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(ind) for ind in population])\n\n        def clip_bounds(population):\n            return np.clip(population, -5.0, 5.0)\n\n        def mutate(population, target_idx, f):\n            candidates = list(range(len(population)))\n            candidates.remove(target_idx)\n            a, b, c = np.random.choice(candidates, 3, replace=False)\n            mutant = population[a] + f * (population[b] - population[c])\n            return clip_bounds(mutant)\n\n        def adapt_f(population, target_idx, f):\n            if np.random.rand() < self.p:\n                f = np.random.uniform(0, 1)\n            return f\n\n        def adjust_f(population, f):\n            diversity = np.mean(np.std(population, axis=0))\n            f = f * np.exp(-self.p * diversity)\n            return f\n\n        def crossover(target, mutant):\n            trial = np.copy(target)\n            crossover_points = np.random.rand(self.dim) < self.cr\n            if not np.any(crossover_points):\n                crossover_points[np.random.randint(0, self.dim)] = True\n            trial[crossover_points] = mutant[crossover_points]\n            return trial\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                f = adapt_f(population, i, self.f)\n                f = adjust_f(population, f)  # New line for dynamic mutation factor adaptation\n                mutant = mutate(population, i, f)\n                trial = crossover(population[i], mutant)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n        return best_solution", "name": "Dynamic_DE_PSO_Optimizer", "description": "Improving DE_PSO_Optimizer by incorporating a dynamic mechanism to adjust the mutation factor based on population diversity to enhance exploration and exploitation.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b742edd6-ebfe-46f5-b50d-b45a1f6aad5f", "metadata": {"aucs": [0.8415483320083317, 0.7873734851969789, 0.8208808188951524, 0.7968317770074933, 0.8325281512880215, 0.8272777054416194, 0.8271262860501101, 0.8323831676002205, 0.8181720814009356, 0.7175307743728203, 0.72130816045329, 0.6856890470051182, 0.7013491858505024, 0.7188101000831255, 0.7058090837628903, 0.7005074414011923, 0.7166751413437723, 0.13248636011923154, 0.4481775897642457, 0.16102923138644654, 0.4367880666108337, 0.3219191331850335, 0.1509365529628116, 0.377243101950949, 0.4095006832910977, 0.44595334805735665, 0.15532262200074187, 0.13809757285034396, 0.1361915757158083, 0.11516920968260258, 0.14613427521767353, 0.22911290826525166, 0.151737800167288, 0.13880238662463684, 0.11119125394176244, 0.15544200383027185, 0.8743370348690453, 0.8867117120609392, 0.8202366863092585, 0.8639084180893842, 0.8941788249323595, 0.8082501977703898, 0.8544252756764904, 0.8543604125483817, 0.8888734804478887, 0.5744826161629303, 0.4990439103576192, 0.47197792815808515, 0.4514284564293579, 0.43521704856130194, 0.4696054848577018, 0.5437448683615151, 0.5310316375509425, 0.60035876775151, 0.22811658500048193, 0.8469526501122752, 0.8105368552861398, 0.8821213207203665, 0.2707250022530432, 0.8452292686281677, 0.7823594917233916, 0.6628786920221681, 0.7890969796028133, 0.4603532283884616, 0.3877592763404131, 0.268807891850954, 0.5132702592579393, 0.3009966760656976, 0.6399506148770595, 0.20807985059275258, 0.4445581216905875, 0.6181984321201806, 0.30942627605161355, 0.3326397968306458, 0.1608892210430629, 0.1749878119831747, 0.21524064113644759, 0.43136284441578276, 0.2842849611404469, 0.3014713077306115, 0.3247999997958966, 9.999999999998899e-05, 0.5420255724431384, 0.5167132287147271, 0.323623210693478, 0.5236202492560686, 0.03582664293776583, 0.4961863160446829, 0.5983685556635396, 0.48004169927687823, 0.5751253318349361, 0.6023216541096823, 0.6765215155203397, 0.09569981795327731, 0.1327458453878797, 0.06657917606497121, 0.3967835739020187, 0.6609248232643044, 0.39831270863378765, 0.0789125263977809, 0.25837529774824197, 0.14761951524700612, 0.26941640692550883, 0.37390483165996746, 0.22667063106565877, 0.14796595651761657, 0.1526360340075551, 0.26586715630625746, 0.401238492885285, 0.3016090297452153, 0.3927266672695702, 0.4099603080875881, 0.4161333248714256, 0.37792551322591217, 0.3724271730527302, 0.3498130471339609, 0.36362638907756284, 0.7476894586672209, 0.7643255296485678, 0.7551894266165657, 0.7664103654213383, 0.7428808778224834, 0.7324945902419097, 0.7456933441538313, 0.6885754212652295, 0.7580606973847237, 0.42811269293543086, 0.14023066925309902, 0.10670569028533317, 0.1406691271832491, 0.09772123272890199, 0.16371495763749244, 0.1326531405400656, 0.11788054082511534, 0.16773572817661409, 0.6868691877063224, 0.5713913005760239, 0.5309481753150553, 0.37953433688543214, 0.6106076061235983, 0.314816965812432, 0.1926880972945808, 0.5123652832968015, 0.5125182995620365, 0.4835676863453505, 0.4660311947908924, 0.4808107951434111, 0.5267577888222441, 0.48228727834468044, 0.503222362960514, 0.5096342561306109, 0.5134198656542641, 0.49642041101932943, 0.39478153057249354, 0.36527659798553924, 0.3749038312930758, 0.389917400507931, 0.3353589314285699, 0.3837320301256505, 0.40312839777059384, 0.391779303767258, 0.3847962728292338, 0.21026365337211628, 0.22614358433930037, 0.2218321701020638, 0.2250482954759514, 0.2030028089441399, 0.22166026096906555, 0.22894392952207965, 0.22843827879566903, 0.22141354291605542, 0.23948428157452517, 0.21788039690686845, 0.23209716514423484, 0.6323247915792307, 0.7276185432482504, 0.22753716020817816, 0.23116820489455325, 0.2095363873696986, 0.2383927323253613, 0.18727057050597484, 0.18533370685014028, 0.7980098114208879, 0.879165869841122, 0.8618013365217025, 0.1973429465049138, 0.8234543070425426, 0.8684006477823741, 0.8597041019336726, 0.7552653818676855, 0.21084529289173048, 0.7955936385588998, 0.208066081343396, 0.832113022434438, 0.16617950435428208, 0.7530512572127844, 0.7738087910020401, 0.15323970621043426, 0.19212286733565198, 0.18884072021162834, 0.18645151134852433, 0.2201990884926236, 0.1742758643179808, 0.18670923575454967, 0.1839366627946203, 0.17766393401910097, 0.1934857351664151, 0.10854033480544945, 0.07898219760305658, 0.0893484705276576, 0.10244739581337559, 0.08211042189359996, 0.08303260433089732, 0.0851538042370803, 0.09383507122744528, 0.0931642152883072]}, "mutation_prompt": null}
{"id": "3020df6d-4021-422e-9002-95eab980bf4c", "solution": "import numpy as np\n\nclass Dynamic_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, pop_size=50, c1=2.0, c2=2.0, w=0.7, f=0.5, cr=0.9, p=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.c1 = c1\n        self.c2 = c2\n        self.w = w\n        self.f = f\n        self.cr = cr\n        self.p = p\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(ind) for ind in population])\n\n        def clip_bounds(population):\n            return np.clip(population, -5.0, 5.0)\n\n        def mutate(population, target_idx, f):\n            candidates = list(range(len(population)))\n            candidates.remove(target_idx)\n            a, b, c = np.random.choice(candidates, 3, replace=False)\n            mutant = population[a] + f * (population[b] - population[c])\n            return clip_bounds(mutant)\n\n        def adapt_f(population, target_idx, f):\n            if np.random.rand() < self.p:\n                f = np.random.uniform(0, 1)\n            return f\n\n        def adjust_f(population, f):\n            diversity = np.mean(np.std(population, axis=0))\n            f = f * np.exp(-self.p * diversity)\n            return f\n\n        def crossover(target, mutant):\n            trial = np.copy(target)\n            crossover_points = np.random.rand(self.dim) < self.cr\n            if not np.any(crossover_points):\n                crossover_points[np.random.randint(0, self.dim)] = True\n            trial[crossover_points] = mutant[crossover_points]\n            return trial\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                f = adapt_f(population, i, self.f)\n                f = adjust_f(population, f)  # New line for dynamic mutation factor adaptation\n                mutant = mutate(population, i, f)\n                trial = crossover(population[i], mutant)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n        return best_solution", "name": "Dynamic_DE_PSO_Optimizer", "description": "Improving DE_PSO_Optimizer by incorporating a dynamic mechanism to adjust the mutation factor based on population diversity to enhance exploration and exploitation.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b742edd6-ebfe-46f5-b50d-b45a1f6aad5f", "metadata": {"aucs": [0.8415483320083317, 0.7873734851969789, 0.8208808188951524, 0.7968317770074933, 0.8325281512880215, 0.8272777054416194, 0.8271262860501101, 0.8323831676002205, 0.8181720814009356, 0.7175307743728203, 0.72130816045329, 0.6856890470051182, 0.7013491858505024, 0.7188101000831255, 0.7058090837628903, 0.7005074414011923, 0.7166751413437723, 0.13248636011923154, 0.4481775897642457, 0.16102923138644654, 0.4367880666108337, 0.3219191331850335, 0.1509365529628116, 0.377243101950949, 0.4095006832910977, 0.44595334805735665, 0.15532262200074187, 0.13809757285034396, 0.1361915757158083, 0.11516920968260258, 0.14613427521767353, 0.22911290826525166, 0.151737800167288, 0.13880238662463684, 0.11119125394176244, 0.15544200383027185, 0.8743370348690453, 0.8867117120609392, 0.8202366863092585, 0.8639084180893842, 0.8941788249323595, 0.8082501977703898, 0.8544252756764904, 0.8543604125483817, 0.8888734804478887, 0.5744826161629303, 0.4990439103576192, 0.47197792815808515, 0.4514284564293579, 0.43521704856130194, 0.4696054848577018, 0.5437448683615151, 0.5310316375509425, 0.60035876775151, 0.22811658500048193, 0.8469526501122752, 0.8105368552861398, 0.8821213207203665, 0.2707250022530432, 0.8452292686281677, 0.7823594917233916, 0.6628786920221681, 0.7890969796028133, 0.4603532283884616, 0.3877592763404131, 0.268807891850954, 0.5132702592579393, 0.3009966760656976, 0.6399506148770595, 0.20807985059275258, 0.4445581216905875, 0.6181984321201806, 0.30942627605161355, 0.3326397968306458, 0.1608892210430629, 0.1749878119831747, 0.21524064113644759, 0.43136284441578276, 0.2842849611404469, 0.3014713077306115, 0.3247999997958966, 9.999999999998899e-05, 0.5420255724431384, 0.5167132287147271, 0.323623210693478, 0.5236202492560686, 0.03582664293776583, 0.4961863160446829, 0.5983685556635396, 0.48004169927687823, 0.5751253318349361, 0.6023216541096823, 0.6765215155203397, 0.09569981795327731, 0.1327458453878797, 0.06657917606497121, 0.3967835739020187, 0.6609248232643044, 0.39831270863378765, 0.0789125263977809, 0.25837529774824197, 0.14761951524700612, 0.26941640692550883, 0.37390483165996746, 0.22667063106565877, 0.14796595651761657, 0.1526360340075551, 0.26586715630625746, 0.401238492885285, 0.3016090297452153, 0.3927266672695702, 0.4099603080875881, 0.4161333248714256, 0.37792551322591217, 0.3724271730527302, 0.3498130471339609, 0.36362638907756284, 0.7476894586672209, 0.7643255296485678, 0.7551894266165657, 0.7664103654213383, 0.7428808778224834, 0.7324945902419097, 0.7456933441538313, 0.6885754212652295, 0.7580606973847237, 0.42811269293543086, 0.14023066925309902, 0.10670569028533317, 0.1406691271832491, 0.09772123272890199, 0.16371495763749244, 0.1326531405400656, 0.11788054082511534, 0.16773572817661409, 0.6868691877063224, 0.5713913005760239, 0.5309481753150553, 0.37953433688543214, 0.6106076061235983, 0.314816965812432, 0.1926880972945808, 0.5123652832968015, 0.5125182995620365, 0.4835676863453505, 0.4660311947908924, 0.4808107951434111, 0.5267577888222441, 0.48228727834468044, 0.503222362960514, 0.5096342561306109, 0.5134198656542641, 0.49642041101932943, 0.39478153057249354, 0.36527659798553924, 0.3749038312930758, 0.389917400507931, 0.3353589314285699, 0.3837320301256505, 0.40312839777059384, 0.391779303767258, 0.3847962728292338, 0.21026365337211628, 0.22614358433930037, 0.2218321701020638, 0.2250482954759514, 0.2030028089441399, 0.22166026096906555, 0.22894392952207965, 0.22843827879566903, 0.22141354291605542, 0.23948428157452517, 0.21788039690686845, 0.23209716514423484, 0.6323247915792307, 0.7276185432482504, 0.22753716020817816, 0.23116820489455325, 0.2095363873696986, 0.2383927323253613, 0.18727057050597484, 0.18533370685014028, 0.7980098114208879, 0.879165869841122, 0.8618013365217025, 0.1973429465049138, 0.8234543070425426, 0.8684006477823741, 0.8597041019336726, 0.7552653818676855, 0.21084529289173048, 0.7955936385588998, 0.208066081343396, 0.832113022434438, 0.16617950435428208, 0.7530512572127844, 0.7738087910020401, 0.15323970621043426, 0.19212286733565198, 0.18884072021162834, 0.18645151134852433, 0.2201990884926236, 0.1742758643179808, 0.18670923575454967, 0.1839366627946203, 0.17766393401910097, 0.1934857351664151, 0.10854033480544945, 0.07898219760305658, 0.0893484705276576, 0.10244739581337559, 0.08211042189359996, 0.08303260433089732, 0.0851538042370803, 0.09383507122744528, 0.0931642152883072]}, "mutation_prompt": null}
{"id": "3d607b7e-14c4-42ee-88bf-580ec1f2c546", "solution": "import numpy as np\n\nclass Dynamic_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, pop_size=50, c1=2.0, c2=2.0, w=0.7, f=0.5, cr=0.9, p=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.c1 = c1\n        self.c2 = c2\n        self.w = w\n        self.f = f\n        self.cr = cr\n        self.p = p\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(ind) for ind in population])\n\n        def clip_bounds(population):\n            return np.clip(population, -5.0, 5.0)\n\n        def mutate(population, target_idx, f):\n            candidates = list(range(len(population)))\n            candidates.remove(target_idx)\n            a, b, c = np.random.choice(candidates, 3, replace=False)\n            mutant = population[a] + f * (population[b] - population[c])\n            return clip_bounds(mutant)\n\n        def adapt_f(population, target_idx, f):\n            if np.random.rand() < self.p:\n                f = np.random.uniform(0, 1)\n            return f\n\n        def adjust_f(population, f):\n            diversity = np.mean(np.std(population, axis=0))\n            f = f * np.exp(-self.p * diversity)\n            return f\n\n        def crossover(target, mutant):\n            trial = np.copy(target)\n            crossover_points = np.random.rand(self.dim) < self.cr\n            if not np.any(crossover_points):\n                crossover_points[np.random.randint(0, self.dim)] = True\n            trial[crossover_points] = mutant[crossover_points]\n            return trial\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                f = adapt_f(population, i, self.f)\n                f = adjust_f(population, f)  # New line for dynamic mutation factor adaptation\n                mutant = mutate(population, i, f)\n                trial = crossover(population[i], mutant)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n        return best_solution", "name": "Dynamic_DE_PSO_Optimizer", "description": "Improving DE_PSO_Optimizer by incorporating a dynamic mechanism to adjust the mutation factor based on population diversity to enhance exploration and exploitation.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b742edd6-ebfe-46f5-b50d-b45a1f6aad5f", "metadata": {"aucs": [0.8415483320083317, 0.7873734851969789, 0.8208808188951524, 0.7968317770074933, 0.8325281512880215, 0.8272777054416194, 0.8271262860501101, 0.8323831676002205, 0.8181720814009356, 0.7175307743728203, 0.72130816045329, 0.6856890470051182, 0.7013491858505024, 0.7188101000831255, 0.7058090837628903, 0.7005074414011923, 0.7166751413437723, 0.13248636011923154, 0.4481775897642457, 0.16102923138644654, 0.4367880666108337, 0.3219191331850335, 0.1509365529628116, 0.377243101950949, 0.4095006832910977, 0.44595334805735665, 0.15532262200074187, 0.13809757285034396, 0.1361915757158083, 0.11516920968260258, 0.14613427521767353, 0.22911290826525166, 0.151737800167288, 0.13880238662463684, 0.11119125394176244, 0.15544200383027185, 0.8743370348690453, 0.8867117120609392, 0.8202366863092585, 0.8639084180893842, 0.8941788249323595, 0.8082501977703898, 0.8544252756764904, 0.8543604125483817, 0.8888734804478887, 0.5744826161629303, 0.4990439103576192, 0.47197792815808515, 0.4514284564293579, 0.43521704856130194, 0.4696054848577018, 0.5437448683615151, 0.5310316375509425, 0.60035876775151, 0.22811658500048193, 0.8469526501122752, 0.8105368552861398, 0.8821213207203665, 0.2707250022530432, 0.8452292686281677, 0.7823594917233916, 0.6628786920221681, 0.7890969796028133, 0.4603532283884616, 0.3877592763404131, 0.268807891850954, 0.5132702592579393, 0.3009966760656976, 0.6399506148770595, 0.20807985059275258, 0.4445581216905875, 0.6181984321201806, 0.30942627605161355, 0.3326397968306458, 0.1608892210430629, 0.1749878119831747, 0.21524064113644759, 0.43136284441578276, 0.2842849611404469, 0.3014713077306115, 0.3247999997958966, 9.999999999998899e-05, 0.5420255724431384, 0.5167132287147271, 0.323623210693478, 0.5236202492560686, 0.03582664293776583, 0.4961863160446829, 0.5983685556635396, 0.48004169927687823, 0.5751253318349361, 0.6023216541096823, 0.6765215155203397, 0.09569981795327731, 0.1327458453878797, 0.06657917606497121, 0.3967835739020187, 0.6609248232643044, 0.39831270863378765, 0.0789125263977809, 0.25837529774824197, 0.14761951524700612, 0.26941640692550883, 0.37390483165996746, 0.22667063106565877, 0.14796595651761657, 0.1526360340075551, 0.26586715630625746, 0.401238492885285, 0.3016090297452153, 0.3927266672695702, 0.4099603080875881, 0.4161333248714256, 0.37792551322591217, 0.3724271730527302, 0.3498130471339609, 0.36362638907756284, 0.7476894586672209, 0.7643255296485678, 0.7551894266165657, 0.7664103654213383, 0.7428808778224834, 0.7324945902419097, 0.7456933441538313, 0.6885754212652295, 0.7580606973847237, 0.42811269293543086, 0.14023066925309902, 0.10670569028533317, 0.1406691271832491, 0.09772123272890199, 0.16371495763749244, 0.1326531405400656, 0.11788054082511534, 0.16773572817661409, 0.6868691877063224, 0.5713913005760239, 0.5309481753150553, 0.37953433688543214, 0.6106076061235983, 0.314816965812432, 0.1926880972945808, 0.5123652832968015, 0.5125182995620365, 0.4835676863453505, 0.4660311947908924, 0.4808107951434111, 0.5267577888222441, 0.48228727834468044, 0.503222362960514, 0.5096342561306109, 0.5134198656542641, 0.49642041101932943, 0.39478153057249354, 0.36527659798553924, 0.3749038312930758, 0.389917400507931, 0.3353589314285699, 0.3837320301256505, 0.40312839777059384, 0.391779303767258, 0.3847962728292338, 0.21026365337211628, 0.22614358433930037, 0.2218321701020638, 0.2250482954759514, 0.2030028089441399, 0.22166026096906555, 0.22894392952207965, 0.22843827879566903, 0.22141354291605542, 0.23948428157452517, 0.21788039690686845, 0.23209716514423484, 0.6323247915792307, 0.7276185432482504, 0.22753716020817816, 0.23116820489455325, 0.2095363873696986, 0.2383927323253613, 0.18727057050597484, 0.18533370685014028, 0.7980098114208879, 0.879165869841122, 0.8618013365217025, 0.1973429465049138, 0.8234543070425426, 0.8684006477823741, 0.8597041019336726, 0.7552653818676855, 0.21084529289173048, 0.7955936385588998, 0.208066081343396, 0.832113022434438, 0.16617950435428208, 0.7530512572127844, 0.7738087910020401, 0.15323970621043426, 0.19212286733565198, 0.18884072021162834, 0.18645151134852433, 0.2201990884926236, 0.1742758643179808, 0.18670923575454967, 0.1839366627946203, 0.17766393401910097, 0.1934857351664151, 0.10854033480544945, 0.07898219760305658, 0.0893484705276576, 0.10244739581337559, 0.08211042189359996, 0.08303260433089732, 0.0851538042370803, 0.09383507122744528, 0.0931642152883072]}, "mutation_prompt": null}
{"id": "cce41202-9b91-4569-a7e4-ddde1bd0f57f", "solution": "import numpy as np\n\nclass Dynamic_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, pop_size=50, c1=2.0, c2=2.0, w=0.7, f=0.5, cr=0.9, p=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.c1 = c1\n        self.c2 = c2\n        self.w = w\n        self.f = f\n        self.cr = cr\n        self.p = p\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(ind) for ind in population])\n\n        def clip_bounds(population):\n            return np.clip(population, -5.0, 5.0)\n\n        def mutate(population, target_idx, f):\n            candidates = list(range(len(population)))\n            candidates.remove(target_idx)\n            a, b, c = np.random.choice(candidates, 3, replace=False)\n            mutant = population[a] + f * (population[b] - population[c])\n            return clip_bounds(mutant)\n\n        def adapt_f(population, target_idx, f):\n            if np.random.rand() < self.p:\n                f = np.random.uniform(0, 1)\n            return f\n\n        def adjust_f(population, f):\n            diversity = np.mean(np.std(population, axis=0))\n            f = f * np.exp(-self.p * diversity)\n            return f\n\n        def crossover(target, mutant):\n            trial = np.copy(target)\n            crossover_points = np.random.rand(self.dim) < self.cr\n            if not np.any(crossover_points):\n                crossover_points[np.random.randint(0, self.dim)] = True\n            trial[crossover_points] = mutant[crossover_points]\n            return trial\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                f = adapt_f(population, i, self.f)\n                f = adjust_f(population, f)  # New line for dynamic mutation factor adaptation\n                mutant = mutate(population, i, f)\n                trial = crossover(population[i], mutant)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n        return best_solution", "name": "Dynamic_DE_PSO_Optimizer", "description": "Improving DE_PSO_Optimizer by incorporating a dynamic mechanism to adjust the mutation factor based on population diversity to enhance exploration and exploitation.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b742edd6-ebfe-46f5-b50d-b45a1f6aad5f", "metadata": {"aucs": [0.8415483320083317, 0.7873734851969789, 0.8208808188951524, 0.7968317770074933, 0.8325281512880215, 0.8272777054416194, 0.8271262860501101, 0.8323831676002205, 0.8181720814009356, 0.7175307743728203, 0.72130816045329, 0.6856890470051182, 0.7013491858505024, 0.7188101000831255, 0.7058090837628903, 0.7005074414011923, 0.7166751413437723, 0.13248636011923154, 0.4481775897642457, 0.16102923138644654, 0.4367880666108337, 0.3219191331850335, 0.1509365529628116, 0.377243101950949, 0.4095006832910977, 0.44595334805735665, 0.15532262200074187, 0.13809757285034396, 0.1361915757158083, 0.11516920968260258, 0.14613427521767353, 0.22911290826525166, 0.151737800167288, 0.13880238662463684, 0.11119125394176244, 0.15544200383027185, 0.8743370348690453, 0.8867117120609392, 0.8202366863092585, 0.8639084180893842, 0.8941788249323595, 0.8082501977703898, 0.8544252756764904, 0.8543604125483817, 0.8888734804478887, 0.5744826161629303, 0.4990439103576192, 0.47197792815808515, 0.4514284564293579, 0.43521704856130194, 0.4696054848577018, 0.5437448683615151, 0.5310316375509425, 0.60035876775151, 0.22811658500048193, 0.8469526501122752, 0.8105368552861398, 0.8821213207203665, 0.2707250022530432, 0.8452292686281677, 0.7823594917233916, 0.6628786920221681, 0.7890969796028133, 0.4603532283884616, 0.3877592763404131, 0.268807891850954, 0.5132702592579393, 0.3009966760656976, 0.6399506148770595, 0.20807985059275258, 0.4445581216905875, 0.6181984321201806, 0.30942627605161355, 0.3326397968306458, 0.1608892210430629, 0.1749878119831747, 0.21524064113644759, 0.43136284441578276, 0.2842849611404469, 0.3014713077306115, 0.3247999997958966, 9.999999999998899e-05, 0.5420255724431384, 0.5167132287147271, 0.323623210693478, 0.5236202492560686, 0.03582664293776583, 0.4961863160446829, 0.5983685556635396, 0.48004169927687823, 0.5751253318349361, 0.6023216541096823, 0.6765215155203397, 0.09569981795327731, 0.1327458453878797, 0.06657917606497121, 0.3967835739020187, 0.6609248232643044, 0.39831270863378765, 0.0789125263977809, 0.25837529774824197, 0.14761951524700612, 0.26941640692550883, 0.37390483165996746, 0.22667063106565877, 0.14796595651761657, 0.1526360340075551, 0.26586715630625746, 0.401238492885285, 0.3016090297452153, 0.3927266672695702, 0.4099603080875881, 0.4161333248714256, 0.37792551322591217, 0.3724271730527302, 0.3498130471339609, 0.36362638907756284, 0.7476894586672209, 0.7643255296485678, 0.7551894266165657, 0.7664103654213383, 0.7428808778224834, 0.7324945902419097, 0.7456933441538313, 0.6885754212652295, 0.7580606973847237, 0.42811269293543086, 0.14023066925309902, 0.10670569028533317, 0.1406691271832491, 0.09772123272890199, 0.16371495763749244, 0.1326531405400656, 0.11788054082511534, 0.16773572817661409, 0.6868691877063224, 0.5713913005760239, 0.5309481753150553, 0.37953433688543214, 0.6106076061235983, 0.314816965812432, 0.1926880972945808, 0.5123652832968015, 0.5125182995620365, 0.4835676863453505, 0.4660311947908924, 0.4808107951434111, 0.5267577888222441, 0.48228727834468044, 0.503222362960514, 0.5096342561306109, 0.5134198656542641, 0.49642041101932943, 0.39478153057249354, 0.36527659798553924, 0.3749038312930758, 0.389917400507931, 0.3353589314285699, 0.3837320301256505, 0.40312839777059384, 0.391779303767258, 0.3847962728292338, 0.21026365337211628, 0.22614358433930037, 0.2218321701020638, 0.2250482954759514, 0.2030028089441399, 0.22166026096906555, 0.22894392952207965, 0.22843827879566903, 0.22141354291605542, 0.23948428157452517, 0.21788039690686845, 0.23209716514423484, 0.6323247915792307, 0.7276185432482504, 0.22753716020817816, 0.23116820489455325, 0.2095363873696986, 0.2383927323253613, 0.18727057050597484, 0.18533370685014028, 0.7980098114208879, 0.879165869841122, 0.8618013365217025, 0.1973429465049138, 0.8234543070425426, 0.8684006477823741, 0.8597041019336726, 0.7552653818676855, 0.21084529289173048, 0.7955936385588998, 0.208066081343396, 0.832113022434438, 0.16617950435428208, 0.7530512572127844, 0.7738087910020401, 0.15323970621043426, 0.19212286733565198, 0.18884072021162834, 0.18645151134852433, 0.2201990884926236, 0.1742758643179808, 0.18670923575454967, 0.1839366627946203, 0.17766393401910097, 0.1934857351664151, 0.10854033480544945, 0.07898219760305658, 0.0893484705276576, 0.10244739581337559, 0.08211042189359996, 0.08303260433089732, 0.0851538042370803, 0.09383507122744528, 0.0931642152883072]}, "mutation_prompt": null}
{"id": "91fcb6bb-7c93-4e73-8a6e-218de64e9e57", "solution": "import numpy as np\n\nclass Enhanced_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, pop_size=50, c1=2.0, c2=2.0, w=0.7, f=0.5, cr=0.9, p=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.c1 = c1\n        self.c2 = c2\n        self.w = w\n        self.f = f\n        self.cr = cr\n        self.p = p\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(ind) for ind in population])\n\n        def clip_bounds(population):\n            return np.clip(population, -5.0, 5.0)\n\n        def mutate(population, target_idx, f):\n            candidates = list(range(len(population)))\n            candidates.remove(target_idx)\n            a, b, c = np.random.choice(candidates, 3, replace=False)\n            mutant = population[a] + f * (population[b] - population[c])\n            return clip_bounds(mutant)\n\n        def adapt_f(population, target_idx, f):\n            if np.random.rand() < self.p:\n                f = np.random.uniform(0, 1)\n            return f\n\n        def adjust_f(population, f):\n            diversity = np.mean(np.std(population, axis=0))\n            f = f * np.exp(-self.p * diversity)\n            return f\n\n        def crossover(target, mutant):\n            trial = np.copy(target)\n            crossover_points = np.random.rand(self.dim) < self.cr\n            if not np.any(crossover_points):\n                crossover_points[np.random.randint(0, self.dim)] = True\n            trial[crossover_points] = mutant[crossover_points]\n            return trial\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                f = adapt_f(population, i, self.f)\n                f = adjust_f(population, f)  # Dynamic mutation factor adaptation based on population diversity\n                mutant = mutate(population, i, f)\n                trial = crossover(population[i], mutant)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n        return best_solution", "name": "Enhanced_DE_PSO_Optimizer", "description": "Enhancing the exploration and exploitation capabilities of the Differential Evolution with Particle Swarm Optimization (DE-PSO) algorithm through dynamic mutation factor adaptation based on population diversity.", "configspace": "", "generation": 74, "fitness": 0.4297439464409878, "feedback": "The algorithm Enhanced_DE_PSO_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.43 with standard deviation 0.26.", "error": "", "parent_id": "b742edd6-ebfe-46f5-b50d-b45a1f6aad5f", "metadata": {"aucs": [0.8415483320083317, 0.7873734851969789, 0.8208808188951524, 0.7968317770074933, 0.8325281512880215, 0.8272777054416194, 0.8271262860501101, 0.8323831676002205, 0.8181720814009356, 0.7175307743728203, 0.72130816045329, 0.6856890470051182, 0.7013491858505024, 0.7188101000831255, 0.7058090837628903, 0.7005074414011923, 0.7166751413437723, 0.13248636011923154, 0.4481775897642457, 0.16102923138644654, 0.4367880666108337, 0.3219191331850335, 0.1509365529628116, 0.377243101950949, 0.4095006832910977, 0.44595334805735665, 0.15532262200074187, 0.13809757285034396, 0.1361915757158083, 0.11516920968260258, 0.14613427521767353, 0.22911290826525166, 0.151737800167288, 0.13880238662463684, 0.11119125394176244, 0.15544200383027185, 0.8743370348690453, 0.8867117120609392, 0.8202366863092585, 0.8639084180893842, 0.8941788249323595, 0.8082501977703898, 0.8544252756764904, 0.8543604125483817, 0.8888734804478887, 0.5744826161629303, 0.4990439103576192, 0.47197792815808515, 0.4514284564293579, 0.43521704856130194, 0.4696054848577018, 0.5437448683615151, 0.5310316375509425, 0.60035876775151, 0.22811658500048193, 0.8469526501122752, 0.8105368552861398, 0.8821213207203665, 0.2707250022530432, 0.8452292686281677, 0.7823594917233916, 0.6628786920221681, 0.7890969796028133, 0.4603532283884616, 0.3877592763404131, 0.268807891850954, 0.5132702592579393, 0.3009966760656976, 0.6399506148770595, 0.20807985059275258, 0.4445581216905875, 0.6181984321201806, 0.30942627605161355, 0.3326397968306458, 0.1608892210430629, 0.1749878119831747, 0.21524064113644759, 0.43136284441578276, 0.2842849611404469, 0.3014713077306115, 0.3247999997958966, 9.999999999998899e-05, 0.5420255724431384, 0.5167132287147271, 0.323623210693478, 0.5236202492560686, 0.03582664293776583, 0.4961863160446829, 0.5983685556635396, 0.48004169927687823, 0.5751253318349361, 0.6023216541096823, 0.6765215155203397, 0.09569981795327731, 0.1327458453878797, 0.06657917606497121, 0.3967835739020187, 0.6609248232643044, 0.39831270863378765, 0.0789125263977809, 0.25837529774824197, 0.14761951524700612, 0.26941640692550883, 0.37390483165996746, 0.22667063106565877, 0.14796595651761657, 0.1526360340075551, 0.26586715630625746, 0.401238492885285, 0.3016090297452153, 0.3927266672695702, 0.4099603080875881, 0.4161333248714256, 0.37792551322591217, 0.3724271730527302, 0.3498130471339609, 0.36362638907756284, 0.7476894586672209, 0.7643255296485678, 0.7551894266165657, 0.7664103654213383, 0.7428808778224834, 0.7324945902419097, 0.7456933441538313, 0.6885754212652295, 0.7580606973847237, 0.42811269293543086, 0.14023066925309902, 0.10670569028533317, 0.1406691271832491, 0.09772123272890199, 0.16371495763749244, 0.1326531405400656, 0.11788054082511534, 0.16773572817661409, 0.6868691877063224, 0.5713913005760239, 0.5309481753150553, 0.37953433688543214, 0.6106076061235983, 0.314816965812432, 0.1926880972945808, 0.5123652832968015, 0.5125182995620365, 0.4835676863453505, 0.4660311947908924, 0.4808107951434111, 0.5267577888222441, 0.48228727834468044, 0.503222362960514, 0.5096342561306109, 0.5134198656542641, 0.49642041101932943, 0.39478153057249354, 0.36527659798553924, 0.3749038312930758, 0.389917400507931, 0.3353589314285699, 0.3837320301256505, 0.40312839777059384, 0.391779303767258, 0.3847962728292338, 0.21026365337211628, 0.22614358433930037, 0.2218321701020638, 0.2250482954759514, 0.2030028089441399, 0.22166026096906555, 0.22894392952207965, 0.22843827879566903, 0.22141354291605542, 0.23948428157452517, 0.21788039690686845, 0.23209716514423484, 0.6323247915792307, 0.7276185432482504, 0.22753716020817816, 0.23116820489455325, 0.2095363873696986, 0.2383927323253613, 0.18727057050597484, 0.18533370685014028, 0.7980098114208879, 0.879165869841122, 0.8618013365217025, 0.1973429465049138, 0.8234543070425426, 0.8684006477823741, 0.8597041019336726, 0.7552653818676855, 0.21084529289173048, 0.7955936385588998, 0.208066081343396, 0.832113022434438, 0.16617950435428208, 0.7530512572127844, 0.7738087910020401, 0.15323970621043426, 0.19212286733565198, 0.18884072021162834, 0.18645151134852433, 0.2201990884926236, 0.1742758643179808, 0.18670923575454967, 0.1839366627946203, 0.17766393401910097, 0.1934857351664151, 0.10854033480544945, 0.07898219760305658, 0.0893484705276576, 0.10244739581337559, 0.08211042189359996, 0.08303260433089732, 0.0851538042370803, 0.09383507122744528, 0.0931642152883072]}, "mutation_prompt": null}
{"id": "326b65bb-6413-4673-8ac9-9349a984b209", "solution": "import numpy as np\n\nclass Dynamic_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, pop_size=50, c1=2.0, c2=2.0, w=0.7, f=0.5, cr=0.9, p=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.c1 = c1\n        self.c2 = c2\n        self.w = w\n        self.f = f\n        self.cr = cr\n        self.p = p\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(ind) for ind in population])\n\n        def clip_bounds(population):\n            return np.clip(population, -5.0, 5.0)\n\n        def mutate(population, target_idx, f):\n            candidates = list(range(len(population)))\n            candidates.remove(target_idx)\n            a, b, c = np.random.choice(candidates, 3, replace=False)\n            mutant = population[a] + f * (population[b] - population[c])\n            return clip_bounds(mutant)\n\n        def adapt_f(population, target_idx, f):\n            if np.random.rand() < self.p:\n                f = np.random.uniform(0, 1)\n            return f\n\n        def adjust_f(population, f):\n            diversity = np.mean(np.std(population, axis=0))\n            f = f * np.exp(-self.p * diversity)\n            return f\n\n        def crossover(target, mutant):\n            trial = np.copy(target)\n            crossover_points = np.random.rand(self.dim) < self.cr\n            if not np.any(crossover_points):\n                crossover_points[np.random.randint(0, self.dim)] = True\n            trial[crossover_points] = mutant[crossover_points]\n            return trial\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                f = adapt_f(population, i, self.f)\n                f = adjust_f(population, f)  # New line for dynamic mutation factor adaptation\n                mutant = mutate(population, i, f)\n                trial = crossover(population[i], mutant)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n        return best_solution", "name": "Dynamic_DE_PSO_Optimizer", "description": "Improving DE_PSO_Optimizer by incorporating a dynamic mechanism to adjust the mutation factor based on population diversity to enhance exploration and exploitation.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b742edd6-ebfe-46f5-b50d-b45a1f6aad5f", "metadata": {"aucs": [0.8415483320083317, 0.7873734851969789, 0.8208808188951524, 0.7968317770074933, 0.8325281512880215, 0.8272777054416194, 0.8271262860501101, 0.8323831676002205, 0.8181720814009356, 0.7175307743728203, 0.72130816045329, 0.6856890470051182, 0.7013491858505024, 0.7188101000831255, 0.7058090837628903, 0.7005074414011923, 0.7166751413437723, 0.13248636011923154, 0.4481775897642457, 0.16102923138644654, 0.4367880666108337, 0.3219191331850335, 0.1509365529628116, 0.377243101950949, 0.4095006832910977, 0.44595334805735665, 0.15532262200074187, 0.13809757285034396, 0.1361915757158083, 0.11516920968260258, 0.14613427521767353, 0.22911290826525166, 0.151737800167288, 0.13880238662463684, 0.11119125394176244, 0.15544200383027185, 0.8743370348690453, 0.8867117120609392, 0.8202366863092585, 0.8639084180893842, 0.8941788249323595, 0.8082501977703898, 0.8544252756764904, 0.8543604125483817, 0.8888734804478887, 0.5744826161629303, 0.4990439103576192, 0.47197792815808515, 0.4514284564293579, 0.43521704856130194, 0.4696054848577018, 0.5437448683615151, 0.5310316375509425, 0.60035876775151, 0.22811658500048193, 0.8469526501122752, 0.8105368552861398, 0.8821213207203665, 0.2707250022530432, 0.8452292686281677, 0.7823594917233916, 0.6628786920221681, 0.7890969796028133, 0.4603532283884616, 0.3877592763404131, 0.268807891850954, 0.5132702592579393, 0.3009966760656976, 0.6399506148770595, 0.20807985059275258, 0.4445581216905875, 0.6181984321201806, 0.30942627605161355, 0.3326397968306458, 0.1608892210430629, 0.1749878119831747, 0.21524064113644759, 0.43136284441578276, 0.2842849611404469, 0.3014713077306115, 0.3247999997958966, 9.999999999998899e-05, 0.5420255724431384, 0.5167132287147271, 0.323623210693478, 0.5236202492560686, 0.03582664293776583, 0.4961863160446829, 0.5983685556635396, 0.48004169927687823, 0.5751253318349361, 0.6023216541096823, 0.6765215155203397, 0.09569981795327731, 0.1327458453878797, 0.06657917606497121, 0.3967835739020187, 0.6609248232643044, 0.39831270863378765, 0.0789125263977809, 0.25837529774824197, 0.14761951524700612, 0.26941640692550883, 0.37390483165996746, 0.22667063106565877, 0.14796595651761657, 0.1526360340075551, 0.26586715630625746, 0.401238492885285, 0.3016090297452153, 0.3927266672695702, 0.4099603080875881, 0.4161333248714256, 0.37792551322591217, 0.3724271730527302, 0.3498130471339609, 0.36362638907756284, 0.7476894586672209, 0.7643255296485678, 0.7551894266165657, 0.7664103654213383, 0.7428808778224834, 0.7324945902419097, 0.7456933441538313, 0.6885754212652295, 0.7580606973847237, 0.42811269293543086, 0.14023066925309902, 0.10670569028533317, 0.1406691271832491, 0.09772123272890199, 0.16371495763749244, 0.1326531405400656, 0.11788054082511534, 0.16773572817661409, 0.6868691877063224, 0.5713913005760239, 0.5309481753150553, 0.37953433688543214, 0.6106076061235983, 0.314816965812432, 0.1926880972945808, 0.5123652832968015, 0.5125182995620365, 0.4835676863453505, 0.4660311947908924, 0.4808107951434111, 0.5267577888222441, 0.48228727834468044, 0.503222362960514, 0.5096342561306109, 0.5134198656542641, 0.49642041101932943, 0.39478153057249354, 0.36527659798553924, 0.3749038312930758, 0.389917400507931, 0.3353589314285699, 0.3837320301256505, 0.40312839777059384, 0.391779303767258, 0.3847962728292338, 0.21026365337211628, 0.22614358433930037, 0.2218321701020638, 0.2250482954759514, 0.2030028089441399, 0.22166026096906555, 0.22894392952207965, 0.22843827879566903, 0.22141354291605542, 0.23948428157452517, 0.21788039690686845, 0.23209716514423484, 0.6323247915792307, 0.7276185432482504, 0.22753716020817816, 0.23116820489455325, 0.2095363873696986, 0.2383927323253613, 0.18727057050597484, 0.18533370685014028, 0.7980098114208879, 0.879165869841122, 0.8618013365217025, 0.1973429465049138, 0.8234543070425426, 0.8684006477823741, 0.8597041019336726, 0.7552653818676855, 0.21084529289173048, 0.7955936385588998, 0.208066081343396, 0.832113022434438, 0.16617950435428208, 0.7530512572127844, 0.7738087910020401, 0.15323970621043426, 0.19212286733565198, 0.18884072021162834, 0.18645151134852433, 0.2201990884926236, 0.1742758643179808, 0.18670923575454967, 0.1839366627946203, 0.17766393401910097, 0.1934857351664151, 0.10854033480544945, 0.07898219760305658, 0.0893484705276576, 0.10244739581337559, 0.08211042189359996, 0.08303260433089732, 0.0851538042370803, 0.09383507122744528, 0.0931642152883072]}, "mutation_prompt": null}
{"id": "1a80b61e-67d1-4123-9a2e-c740808a7d4c", "solution": "import numpy as np\n\nclass Dynamic_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, pop_size=50, c1=2.0, c2=2.0, w=0.7, f=0.5, cr=0.9, p=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.c1 = c1\n        self.c2 = c2\n        self.w = w\n        self.f = f\n        self.cr = cr\n        self.p = p\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(ind) for ind in population])\n\n        def clip_bounds(population):\n            return np.clip(population, -5.0, 5.0)\n\n        def mutate(population, target_idx, f):\n            candidates = list(range(len(population)))\n            candidates.remove(target_idx)\n            a, b, c = np.random.choice(candidates, 3, replace=False)\n            mutant = population[a] + f * (population[b] - population[c])\n            return clip_bounds(mutant)\n\n        def adapt_f(population, target_idx, f):\n            if np.random.rand() < self.p:\n                f = np.random.uniform(0, 1)\n            return f\n\n        def adjust_f(population, f):\n            diversity = np.mean(np.std(population, axis=0))\n            f = f * np.exp(-self.p * diversity)\n            return f\n\n        def crossover(target, mutant):\n            trial = np.copy(target)\n            crossover_points = np.random.rand(self.dim) < self.cr\n            if not np.any(crossover_points):\n                crossover_points[np.random.randint(0, self.dim)] = True\n            trial[crossover_points] = mutant[crossover_points]\n            return trial\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                f = adapt_f(population, i, self.f)\n                f = adjust_f(population, f)  # New line for dynamic mutation factor adaptation\n                mutant = mutate(population, i, f)\n                trial = crossover(population[i], mutant)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n        return best_solution", "name": "Dynamic_DE_PSO_Optimizer", "description": "Improving DE_PSO_Optimizer by incorporating a dynamic mechanism to adjust the mutation factor based on population diversity to enhance exploration and exploitation.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b742edd6-ebfe-46f5-b50d-b45a1f6aad5f", "metadata": {"aucs": [0.8415483320083317, 0.7873734851969789, 0.8208808188951524, 0.7968317770074933, 0.8325281512880215, 0.8272777054416194, 0.8271262860501101, 0.8323831676002205, 0.8181720814009356, 0.7175307743728203, 0.72130816045329, 0.6856890470051182, 0.7013491858505024, 0.7188101000831255, 0.7058090837628903, 0.7005074414011923, 0.7166751413437723, 0.13248636011923154, 0.4481775897642457, 0.16102923138644654, 0.4367880666108337, 0.3219191331850335, 0.1509365529628116, 0.377243101950949, 0.4095006832910977, 0.44595334805735665, 0.15532262200074187, 0.13809757285034396, 0.1361915757158083, 0.11516920968260258, 0.14613427521767353, 0.22911290826525166, 0.151737800167288, 0.13880238662463684, 0.11119125394176244, 0.15544200383027185, 0.8743370348690453, 0.8867117120609392, 0.8202366863092585, 0.8639084180893842, 0.8941788249323595, 0.8082501977703898, 0.8544252756764904, 0.8543604125483817, 0.8888734804478887, 0.5744826161629303, 0.4990439103576192, 0.47197792815808515, 0.4514284564293579, 0.43521704856130194, 0.4696054848577018, 0.5437448683615151, 0.5310316375509425, 0.60035876775151, 0.22811658500048193, 0.8469526501122752, 0.8105368552861398, 0.8821213207203665, 0.2707250022530432, 0.8452292686281677, 0.7823594917233916, 0.6628786920221681, 0.7890969796028133, 0.4603532283884616, 0.3877592763404131, 0.268807891850954, 0.5132702592579393, 0.3009966760656976, 0.6399506148770595, 0.20807985059275258, 0.4445581216905875, 0.6181984321201806, 0.30942627605161355, 0.3326397968306458, 0.1608892210430629, 0.1749878119831747, 0.21524064113644759, 0.43136284441578276, 0.2842849611404469, 0.3014713077306115, 0.3247999997958966, 9.999999999998899e-05, 0.5420255724431384, 0.5167132287147271, 0.323623210693478, 0.5236202492560686, 0.03582664293776583, 0.4961863160446829, 0.5983685556635396, 0.48004169927687823, 0.5751253318349361, 0.6023216541096823, 0.6765215155203397, 0.09569981795327731, 0.1327458453878797, 0.06657917606497121, 0.3967835739020187, 0.6609248232643044, 0.39831270863378765, 0.0789125263977809, 0.25837529774824197, 0.14761951524700612, 0.26941640692550883, 0.37390483165996746, 0.22667063106565877, 0.14796595651761657, 0.1526360340075551, 0.26586715630625746, 0.401238492885285, 0.3016090297452153, 0.3927266672695702, 0.4099603080875881, 0.4161333248714256, 0.37792551322591217, 0.3724271730527302, 0.3498130471339609, 0.36362638907756284, 0.7476894586672209, 0.7643255296485678, 0.7551894266165657, 0.7664103654213383, 0.7428808778224834, 0.7324945902419097, 0.7456933441538313, 0.6885754212652295, 0.7580606973847237, 0.42811269293543086, 0.14023066925309902, 0.10670569028533317, 0.1406691271832491, 0.09772123272890199, 0.16371495763749244, 0.1326531405400656, 0.11788054082511534, 0.16773572817661409, 0.6868691877063224, 0.5713913005760239, 0.5309481753150553, 0.37953433688543214, 0.6106076061235983, 0.314816965812432, 0.1926880972945808, 0.5123652832968015, 0.5125182995620365, 0.4835676863453505, 0.4660311947908924, 0.4808107951434111, 0.5267577888222441, 0.48228727834468044, 0.503222362960514, 0.5096342561306109, 0.5134198656542641, 0.49642041101932943, 0.39478153057249354, 0.36527659798553924, 0.3749038312930758, 0.389917400507931, 0.3353589314285699, 0.3837320301256505, 0.40312839777059384, 0.391779303767258, 0.3847962728292338, 0.21026365337211628, 0.22614358433930037, 0.2218321701020638, 0.2250482954759514, 0.2030028089441399, 0.22166026096906555, 0.22894392952207965, 0.22843827879566903, 0.22141354291605542, 0.23948428157452517, 0.21788039690686845, 0.23209716514423484, 0.6323247915792307, 0.7276185432482504, 0.22753716020817816, 0.23116820489455325, 0.2095363873696986, 0.2383927323253613, 0.18727057050597484, 0.18533370685014028, 0.7980098114208879, 0.879165869841122, 0.8618013365217025, 0.1973429465049138, 0.8234543070425426, 0.8684006477823741, 0.8597041019336726, 0.7552653818676855, 0.21084529289173048, 0.7955936385588998, 0.208066081343396, 0.832113022434438, 0.16617950435428208, 0.7530512572127844, 0.7738087910020401, 0.15323970621043426, 0.19212286733565198, 0.18884072021162834, 0.18645151134852433, 0.2201990884926236, 0.1742758643179808, 0.18670923575454967, 0.1839366627946203, 0.17766393401910097, 0.1934857351664151, 0.10854033480544945, 0.07898219760305658, 0.0893484705276576, 0.10244739581337559, 0.08211042189359996, 0.08303260433089732, 0.0851538042370803, 0.09383507122744528, 0.0931642152883072]}, "mutation_prompt": null}
{"id": "3da20fb9-11b0-4556-a53d-30681e8c92c3", "solution": "import numpy as np\n\nclass Refined_Dynamic_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, pop_size=50, c1=2.0, c2=2.0, w=0.7, f=0.5, cr=0.9, p=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.c1 = c1\n        self.c2 = c2\n        self.w = w\n        self.f = f\n        self.cr = cr\n        self.p = p\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(ind) for ind in population])\n\n        def clip_bounds(population):\n            return np.clip(population, -5.0, 5.0)\n\n        def mutate(population, target_idx, f):\n            candidates = list(range(len(population)))\n            candidates.remove(target_idx)\n            a, b, c = np.random.choice(candidates, 3, replace=False)\n            mutant = population[a] + f * (population[b] - population[c])\n            return clip_bounds(mutant)\n\n        def adapt_f(population, target_idx, f):\n            if np.random.rand() < self.p:\n                f = np.random.uniform(0, 1)\n            return f\n\n        def adjust_f(population, f):\n            diversity = np.mean(np.std(population, axis=0))\n            f = f * np.exp(-self.p * diversity)\n            return f\n\n        def crossover(target, mutant):\n            trial = np.copy(target)\n            crossover_points = np.random.rand(self.dim) < self.cr\n            if not np.any(crossover_points):\n                crossover_points[np.random.randint(0, self.dim)] = True\n            trial[crossover_points] = mutant[crossover_points]\n            return trial\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                f = adapt_f(population, i, self.f)\n                f = adjust_f(population, f)  # Dynamic mutation factor adaptation enhanced\n                mutant = mutate(population, i, f)\n                trial = crossover(population[i], mutant)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n        return best_solution", "name": "Refined_Dynamic_DE_PSO_Optimizer", "description": "Incorporating a dynamic adaptation of the mutation factor based on population diversity to enhance exploration and exploitation in Differential Evolution with Particle Swarm Optimization (DE_PSO).", "configspace": "", "generation": 77, "fitness": 0.4297439464409878, "feedback": "The algorithm Refined_Dynamic_DE_PSO_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.43 with standard deviation 0.26.", "error": "", "parent_id": "b742edd6-ebfe-46f5-b50d-b45a1f6aad5f", "metadata": {"aucs": [0.8415483320083317, 0.7873734851969789, 0.8208808188951524, 0.7968317770074933, 0.8325281512880215, 0.8272777054416194, 0.8271262860501101, 0.8323831676002205, 0.8181720814009356, 0.7175307743728203, 0.72130816045329, 0.6856890470051182, 0.7013491858505024, 0.7188101000831255, 0.7058090837628903, 0.7005074414011923, 0.7166751413437723, 0.13248636011923154, 0.4481775897642457, 0.16102923138644654, 0.4367880666108337, 0.3219191331850335, 0.1509365529628116, 0.377243101950949, 0.4095006832910977, 0.44595334805735665, 0.15532262200074187, 0.13809757285034396, 0.1361915757158083, 0.11516920968260258, 0.14613427521767353, 0.22911290826525166, 0.151737800167288, 0.13880238662463684, 0.11119125394176244, 0.15544200383027185, 0.8743370348690453, 0.8867117120609392, 0.8202366863092585, 0.8639084180893842, 0.8941788249323595, 0.8082501977703898, 0.8544252756764904, 0.8543604125483817, 0.8888734804478887, 0.5744826161629303, 0.4990439103576192, 0.47197792815808515, 0.4514284564293579, 0.43521704856130194, 0.4696054848577018, 0.5437448683615151, 0.5310316375509425, 0.60035876775151, 0.22811658500048193, 0.8469526501122752, 0.8105368552861398, 0.8821213207203665, 0.2707250022530432, 0.8452292686281677, 0.7823594917233916, 0.6628786920221681, 0.7890969796028133, 0.4603532283884616, 0.3877592763404131, 0.268807891850954, 0.5132702592579393, 0.3009966760656976, 0.6399506148770595, 0.20807985059275258, 0.4445581216905875, 0.6181984321201806, 0.30942627605161355, 0.3326397968306458, 0.1608892210430629, 0.1749878119831747, 0.21524064113644759, 0.43136284441578276, 0.2842849611404469, 0.3014713077306115, 0.3247999997958966, 9.999999999998899e-05, 0.5420255724431384, 0.5167132287147271, 0.323623210693478, 0.5236202492560686, 0.03582664293776583, 0.4961863160446829, 0.5983685556635396, 0.48004169927687823, 0.5751253318349361, 0.6023216541096823, 0.6765215155203397, 0.09569981795327731, 0.1327458453878797, 0.06657917606497121, 0.3967835739020187, 0.6609248232643044, 0.39831270863378765, 0.0789125263977809, 0.25837529774824197, 0.14761951524700612, 0.26941640692550883, 0.37390483165996746, 0.22667063106565877, 0.14796595651761657, 0.1526360340075551, 0.26586715630625746, 0.401238492885285, 0.3016090297452153, 0.3927266672695702, 0.4099603080875881, 0.4161333248714256, 0.37792551322591217, 0.3724271730527302, 0.3498130471339609, 0.36362638907756284, 0.7476894586672209, 0.7643255296485678, 0.7551894266165657, 0.7664103654213383, 0.7428808778224834, 0.7324945902419097, 0.7456933441538313, 0.6885754212652295, 0.7580606973847237, 0.42811269293543086, 0.14023066925309902, 0.10670569028533317, 0.1406691271832491, 0.09772123272890199, 0.16371495763749244, 0.1326531405400656, 0.11788054082511534, 0.16773572817661409, 0.6868691877063224, 0.5713913005760239, 0.5309481753150553, 0.37953433688543214, 0.6106076061235983, 0.314816965812432, 0.1926880972945808, 0.5123652832968015, 0.5125182995620365, 0.4835676863453505, 0.4660311947908924, 0.4808107951434111, 0.5267577888222441, 0.48228727834468044, 0.503222362960514, 0.5096342561306109, 0.5134198656542641, 0.49642041101932943, 0.39478153057249354, 0.36527659798553924, 0.3749038312930758, 0.389917400507931, 0.3353589314285699, 0.3837320301256505, 0.40312839777059384, 0.391779303767258, 0.3847962728292338, 0.21026365337211628, 0.22614358433930037, 0.2218321701020638, 0.2250482954759514, 0.2030028089441399, 0.22166026096906555, 0.22894392952207965, 0.22843827879566903, 0.22141354291605542, 0.23948428157452517, 0.21788039690686845, 0.23209716514423484, 0.6323247915792307, 0.7276185432482504, 0.22753716020817816, 0.23116820489455325, 0.2095363873696986, 0.2383927323253613, 0.18727057050597484, 0.18533370685014028, 0.7980098114208879, 0.879165869841122, 0.8618013365217025, 0.1973429465049138, 0.8234543070425426, 0.8684006477823741, 0.8597041019336726, 0.7552653818676855, 0.21084529289173048, 0.7955936385588998, 0.208066081343396, 0.832113022434438, 0.16617950435428208, 0.7530512572127844, 0.7738087910020401, 0.15323970621043426, 0.19212286733565198, 0.18884072021162834, 0.18645151134852433, 0.2201990884926236, 0.1742758643179808, 0.18670923575454967, 0.1839366627946203, 0.17766393401910097, 0.1934857351664151, 0.10854033480544945, 0.07898219760305658, 0.0893484705276576, 0.10244739581337559, 0.08211042189359996, 0.08303260433089732, 0.0851538042370803, 0.09383507122744528, 0.0931642152883072]}, "mutation_prompt": null}
{"id": "7fa688dd-0cb2-4b1b-86e3-6b848c27ce7a", "solution": "import numpy as np\n\nclass Dynamic_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, pop_size=50, c1=2.0, c2=2.0, w=0.7, f=0.5, cr=0.9, p=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.c1 = c1\n        self.c2 = c2\n        self.w = w\n        self.f = f\n        self.cr = cr\n        self.p = p\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(ind) for ind in population])\n\n        def clip_bounds(population):\n            return np.clip(population, -5.0, 5.0)\n\n        def mutate(population, target_idx, f):\n            candidates = list(range(len(population)))\n            candidates.remove(target_idx)\n            a, b, c = np.random.choice(candidates, 3, replace=False)\n            mutant = population[a] + f * (population[b] - population[c])\n            return clip_bounds(mutant)\n\n        def adapt_f(population, target_idx, f):\n            if np.random.rand() < self.p:\n                f = np.random.uniform(0, 1)\n            return f\n\n        def adjust_f(population, f):\n            diversity = np.mean(np.std(population, axis=0))\n            f = f * np.exp(-self.p * diversity)\n            return f\n\n        def crossover(target, mutant):\n            trial = np.copy(target)\n            crossover_points = np.random.rand(self.dim) < self.cr\n            if not np.any(crossover_points):\n                crossover_points[np.random.randint(0, self.dim)] = True\n            trial[crossover_points] = mutant[crossover_points]\n            return trial\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                f = adapt_f(population, i, self.f)\n                f = adjust_f(population, f)  # New line for dynamic mutation factor adaptation\n                mutant = mutate(population, i, f)\n                trial = crossover(population[i], mutant)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n        return best_solution", "name": "Dynamic_DE_PSO_Optimizer", "description": "Improving DE_PSO_Optimizer by incorporating a dynamic mechanism to adjust the mutation factor based on population diversity to enhance exploration and exploitation.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b742edd6-ebfe-46f5-b50d-b45a1f6aad5f", "metadata": {"aucs": [0.8415483320083317, 0.7873734851969789, 0.8208808188951524, 0.7968317770074933, 0.8325281512880215, 0.8272777054416194, 0.8271262860501101, 0.8323831676002205, 0.8181720814009356, 0.7175307743728203, 0.72130816045329, 0.6856890470051182, 0.7013491858505024, 0.7188101000831255, 0.7058090837628903, 0.7005074414011923, 0.7166751413437723, 0.13248636011923154, 0.4481775897642457, 0.16102923138644654, 0.4367880666108337, 0.3219191331850335, 0.1509365529628116, 0.377243101950949, 0.4095006832910977, 0.44595334805735665, 0.15532262200074187, 0.13809757285034396, 0.1361915757158083, 0.11516920968260258, 0.14613427521767353, 0.22911290826525166, 0.151737800167288, 0.13880238662463684, 0.11119125394176244, 0.15544200383027185, 0.8743370348690453, 0.8867117120609392, 0.8202366863092585, 0.8639084180893842, 0.8941788249323595, 0.8082501977703898, 0.8544252756764904, 0.8543604125483817, 0.8888734804478887, 0.5744826161629303, 0.4990439103576192, 0.47197792815808515, 0.4514284564293579, 0.43521704856130194, 0.4696054848577018, 0.5437448683615151, 0.5310316375509425, 0.60035876775151, 0.22811658500048193, 0.8469526501122752, 0.8105368552861398, 0.8821213207203665, 0.2707250022530432, 0.8452292686281677, 0.7823594917233916, 0.6628786920221681, 0.7890969796028133, 0.4603532283884616, 0.3877592763404131, 0.268807891850954, 0.5132702592579393, 0.3009966760656976, 0.6399506148770595, 0.20807985059275258, 0.4445581216905875, 0.6181984321201806, 0.30942627605161355, 0.3326397968306458, 0.1608892210430629, 0.1749878119831747, 0.21524064113644759, 0.43136284441578276, 0.2842849611404469, 0.3014713077306115, 0.3247999997958966, 9.999999999998899e-05, 0.5420255724431384, 0.5167132287147271, 0.323623210693478, 0.5236202492560686, 0.03582664293776583, 0.4961863160446829, 0.5983685556635396, 0.48004169927687823, 0.5751253318349361, 0.6023216541096823, 0.6765215155203397, 0.09569981795327731, 0.1327458453878797, 0.06657917606497121, 0.3967835739020187, 0.6609248232643044, 0.39831270863378765, 0.0789125263977809, 0.25837529774824197, 0.14761951524700612, 0.26941640692550883, 0.37390483165996746, 0.22667063106565877, 0.14796595651761657, 0.1526360340075551, 0.26586715630625746, 0.401238492885285, 0.3016090297452153, 0.3927266672695702, 0.4099603080875881, 0.4161333248714256, 0.37792551322591217, 0.3724271730527302, 0.3498130471339609, 0.36362638907756284, 0.7476894586672209, 0.7643255296485678, 0.7551894266165657, 0.7664103654213383, 0.7428808778224834, 0.7324945902419097, 0.7456933441538313, 0.6885754212652295, 0.7580606973847237, 0.42811269293543086, 0.14023066925309902, 0.10670569028533317, 0.1406691271832491, 0.09772123272890199, 0.16371495763749244, 0.1326531405400656, 0.11788054082511534, 0.16773572817661409, 0.6868691877063224, 0.5713913005760239, 0.5309481753150553, 0.37953433688543214, 0.6106076061235983, 0.314816965812432, 0.1926880972945808, 0.5123652832968015, 0.5125182995620365, 0.4835676863453505, 0.4660311947908924, 0.4808107951434111, 0.5267577888222441, 0.48228727834468044, 0.503222362960514, 0.5096342561306109, 0.5134198656542641, 0.49642041101932943, 0.39478153057249354, 0.36527659798553924, 0.3749038312930758, 0.389917400507931, 0.3353589314285699, 0.3837320301256505, 0.40312839777059384, 0.391779303767258, 0.3847962728292338, 0.21026365337211628, 0.22614358433930037, 0.2218321701020638, 0.2250482954759514, 0.2030028089441399, 0.22166026096906555, 0.22894392952207965, 0.22843827879566903, 0.22141354291605542, 0.23948428157452517, 0.21788039690686845, 0.23209716514423484, 0.6323247915792307, 0.7276185432482504, 0.22753716020817816, 0.23116820489455325, 0.2095363873696986, 0.2383927323253613, 0.18727057050597484, 0.18533370685014028, 0.7980098114208879, 0.879165869841122, 0.8618013365217025, 0.1973429465049138, 0.8234543070425426, 0.8684006477823741, 0.8597041019336726, 0.7552653818676855, 0.21084529289173048, 0.7955936385588998, 0.208066081343396, 0.832113022434438, 0.16617950435428208, 0.7530512572127844, 0.7738087910020401, 0.15323970621043426, 0.19212286733565198, 0.18884072021162834, 0.18645151134852433, 0.2201990884926236, 0.1742758643179808, 0.18670923575454967, 0.1839366627946203, 0.17766393401910097, 0.1934857351664151, 0.10854033480544945, 0.07898219760305658, 0.0893484705276576, 0.10244739581337559, 0.08211042189359996, 0.08303260433089732, 0.0851538042370803, 0.09383507122744528, 0.0931642152883072]}, "mutation_prompt": null}
{"id": "2eaa7656-95c9-4f61-88ea-b16941940dae", "solution": "import numpy as np\n\nclass Dynamic_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, pop_size=50, c1=2.0, c2=2.0, w=0.7, f=0.5, cr=0.9, p=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.c1 = c1\n        self.c2 = c2\n        self.w = w\n        self.f = f\n        self.cr = cr\n        self.p = p\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(ind) for ind in population])\n\n        def clip_bounds(population):\n            return np.clip(population, -5.0, 5.0)\n\n        def mutate(population, target_idx, f):\n            candidates = list(range(len(population)))\n            candidates.remove(target_idx)\n            a, b, c = np.random.choice(candidates, 3, replace=False)\n            mutant = population[a] + f * (population[b] - population[c])\n            return clip_bounds(mutant)\n\n        def adapt_f(population, target_idx, f):\n            if np.random.rand() < self.p:\n                f = np.random.uniform(0, 1)\n            return f\n\n        def adjust_f(population, f):\n            diversity = np.mean(np.std(population, axis=0))\n            f = f * np.exp(-self.p * diversity)\n            return f\n\n        def crossover(target, mutant):\n            trial = np.copy(target)\n            crossover_points = np.random.rand(self.dim) < self.cr\n            if not np.any(crossover_points):\n                crossover_points[np.random.randint(0, self.dim)] = True\n            trial[crossover_points] = mutant[crossover_points]\n            return trial\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                f = adapt_f(population, i, self.f)\n                f = adjust_f(population, f)  # New line for dynamic mutation factor adaptation\n                mutant = mutate(population, i, f)\n                trial = crossover(population[i], mutant)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n        return best_solution", "name": "Dynamic_DE_PSO_Optimizer", "description": "Improving DE_PSO_Optimizer by incorporating a dynamic mechanism to adjust the mutation factor based on population diversity to enhance exploration and exploitation.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b742edd6-ebfe-46f5-b50d-b45a1f6aad5f", "metadata": {"aucs": [0.8415483320083317, 0.7873734851969789, 0.8208808188951524, 0.7968317770074933, 0.8325281512880215, 0.8272777054416194, 0.8271262860501101, 0.8323831676002205, 0.8181720814009356, 0.7175307743728203, 0.72130816045329, 0.6856890470051182, 0.7013491858505024, 0.7188101000831255, 0.7058090837628903, 0.7005074414011923, 0.7166751413437723, 0.13248636011923154, 0.4481775897642457, 0.16102923138644654, 0.4367880666108337, 0.3219191331850335, 0.1509365529628116, 0.377243101950949, 0.4095006832910977, 0.44595334805735665, 0.15532262200074187, 0.13809757285034396, 0.1361915757158083, 0.11516920968260258, 0.14613427521767353, 0.22911290826525166, 0.151737800167288, 0.13880238662463684, 0.11119125394176244, 0.15544200383027185, 0.8743370348690453, 0.8867117120609392, 0.8202366863092585, 0.8639084180893842, 0.8941788249323595, 0.8082501977703898, 0.8544252756764904, 0.8543604125483817, 0.8888734804478887, 0.5744826161629303, 0.4990439103576192, 0.47197792815808515, 0.4514284564293579, 0.43521704856130194, 0.4696054848577018, 0.5437448683615151, 0.5310316375509425, 0.60035876775151, 0.22811658500048193, 0.8469526501122752, 0.8105368552861398, 0.8821213207203665, 0.2707250022530432, 0.8452292686281677, 0.7823594917233916, 0.6628786920221681, 0.7890969796028133, 0.4603532283884616, 0.3877592763404131, 0.268807891850954, 0.5132702592579393, 0.3009966760656976, 0.6399506148770595, 0.20807985059275258, 0.4445581216905875, 0.6181984321201806, 0.30942627605161355, 0.3326397968306458, 0.1608892210430629, 0.1749878119831747, 0.21524064113644759, 0.43136284441578276, 0.2842849611404469, 0.3014713077306115, 0.3247999997958966, 9.999999999998899e-05, 0.5420255724431384, 0.5167132287147271, 0.323623210693478, 0.5236202492560686, 0.03582664293776583, 0.4961863160446829, 0.5983685556635396, 0.48004169927687823, 0.5751253318349361, 0.6023216541096823, 0.6765215155203397, 0.09569981795327731, 0.1327458453878797, 0.06657917606497121, 0.3967835739020187, 0.6609248232643044, 0.39831270863378765, 0.0789125263977809, 0.25837529774824197, 0.14761951524700612, 0.26941640692550883, 0.37390483165996746, 0.22667063106565877, 0.14796595651761657, 0.1526360340075551, 0.26586715630625746, 0.401238492885285, 0.3016090297452153, 0.3927266672695702, 0.4099603080875881, 0.4161333248714256, 0.37792551322591217, 0.3724271730527302, 0.3498130471339609, 0.36362638907756284, 0.7476894586672209, 0.7643255296485678, 0.7551894266165657, 0.7664103654213383, 0.7428808778224834, 0.7324945902419097, 0.7456933441538313, 0.6885754212652295, 0.7580606973847237, 0.42811269293543086, 0.14023066925309902, 0.10670569028533317, 0.1406691271832491, 0.09772123272890199, 0.16371495763749244, 0.1326531405400656, 0.11788054082511534, 0.16773572817661409, 0.6868691877063224, 0.5713913005760239, 0.5309481753150553, 0.37953433688543214, 0.6106076061235983, 0.314816965812432, 0.1926880972945808, 0.5123652832968015, 0.5125182995620365, 0.4835676863453505, 0.4660311947908924, 0.4808107951434111, 0.5267577888222441, 0.48228727834468044, 0.503222362960514, 0.5096342561306109, 0.5134198656542641, 0.49642041101932943, 0.39478153057249354, 0.36527659798553924, 0.3749038312930758, 0.389917400507931, 0.3353589314285699, 0.3837320301256505, 0.40312839777059384, 0.391779303767258, 0.3847962728292338, 0.21026365337211628, 0.22614358433930037, 0.2218321701020638, 0.2250482954759514, 0.2030028089441399, 0.22166026096906555, 0.22894392952207965, 0.22843827879566903, 0.22141354291605542, 0.23948428157452517, 0.21788039690686845, 0.23209716514423484, 0.6323247915792307, 0.7276185432482504, 0.22753716020817816, 0.23116820489455325, 0.2095363873696986, 0.2383927323253613, 0.18727057050597484, 0.18533370685014028, 0.7980098114208879, 0.879165869841122, 0.8618013365217025, 0.1973429465049138, 0.8234543070425426, 0.8684006477823741, 0.8597041019336726, 0.7552653818676855, 0.21084529289173048, 0.7955936385588998, 0.208066081343396, 0.832113022434438, 0.16617950435428208, 0.7530512572127844, 0.7738087910020401, 0.15323970621043426, 0.19212286733565198, 0.18884072021162834, 0.18645151134852433, 0.2201990884926236, 0.1742758643179808, 0.18670923575454967, 0.1839366627946203, 0.17766393401910097, 0.1934857351664151, 0.10854033480544945, 0.07898219760305658, 0.0893484705276576, 0.10244739581337559, 0.08211042189359996, 0.08303260433089732, 0.0851538042370803, 0.09383507122744528, 0.0931642152883072]}, "mutation_prompt": null}
{"id": "cdd37ed9-0112-46f6-8f49-704e026f69e0", "solution": "import numpy as np\n\nclass Hybrid_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, pop_size=50, c1=2.0, c2=2.0, w=0.7, f=0.5, cr=0.9, p=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.c1 = c1\n        self.c2 = c2\n        self.w = w\n        self.f = f\n        self.cr = cr\n        self.p = p\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(ind) for ind in population])\n\n        def clip_bounds(population):\n            return np.clip(population, -5.0, 5.0)\n\n        def de_mutate(population, target_idx, f):\n            candidates = list(range(len(population)))\n            candidates.remove(target_idx)\n            a, b, c = np.random.choice(candidates, 3, replace=False)\n            mutant = population[a] + f * (population[b] - population[c])\n            return clip_bounds(mutant)\n\n        def pso_mutate(population, target_idx, f, personal_best, global_best):\n            inertia_weight = self.w\n            cognitive_component = self.c1 * np.random.rand(self.dim) * (personal_best - population[target_idx])\n            social_component = self.c2 * np.random.rand(self.dim) * (global_best - population[target_idx])\n            velocity = inertia_weight * population[target_idx] + cognitive_component + social_component\n            return clip_bounds(population[target_idx] + velocity)\n\n        def adapt_f(population, target_idx, f):\n            if np.random.rand() < self.p:\n                f = np.random.uniform(0, 1)\n            return f\n\n        def crossover(target, mutant):\n            trial = np.copy(target)\n            crossover_points = np.random.rand(self.dim) < self.cr\n            if not np.any(crossover_points):\n                crossover_points[np.random.randint(0, self.dim)] = True\n            trial[crossover_points] = mutant[crossover_points]\n            return trial\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        personal_best = population[best_idx]\n        global_best = best_solution\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                f = adapt_f(population, i, self.f)\n                if np.random.rand() < 0.5:\n                    mutant = de_mutate(population, i, f)\n                else:\n                    mutant = pso_mutate(population, i, f, personal_best, global_best)\n                trial = crossover(population[i], mutant)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n            personal_best_idx = np.argmin(fitness)\n            if fitness[personal_best_idx] < func(personal_best):\n                personal_best = population[personal_best_idx]\n            if func(personal_best) < func(global_best):\n                global_best = personal_best\n        return best_solution", "name": "Hybrid_DE_PSO_Optimizer", "description": "Enhancing DE_PSO_Optimizer by introducing a hybrid mutation strategy using Differential Evolution and Particle Swarm Optimization concepts to improve convergence and exploration in optimization problems.", "configspace": "", "generation": 80, "fitness": 0.27826383335332877, "feedback": "The algorithm Hybrid_DE_PSO_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.23.", "error": "", "parent_id": "b742edd6-ebfe-46f5-b50d-b45a1f6aad5f", "metadata": {"aucs": [0.6497111078819238, 0.5969037216630626, 0.6108040005826989, 0.6316581403349495, 0.6234280798788538, 0.6512354065300882, 0.6381995044471349, 0.38327312409690084, 0.6218471427051409, 0.2874881578148113, 0.3144454378029973, 0.3743864430416449, 0.36438931341460534, 0.35844793838127476, 0.3512523947023596, 0.2833637487605156, 0.36014215641551006, 0.3013271779040504, 0.10278314910420339, 0.1153123773802528, 0.10672893797029337, 0.1123389751981958, 0.10678463101363667, 0.10090756690782932, 0.10366044050044276, 0.10244399145388239, 0.11620203774025017, 0.08683071890921834, 0.11255699897498705, 0.10451758446787718, 0.10822127323240815, 0.10133292071392064, 0.10180595687400984, 0.10666243852029, 0.09497469934713132, 0.1102922366025354, 0.9902118132368564, 0.9898499339255887, 0.9905333230561233, 0.9878112676972266, 0.9857336761404359, 0.9762789137986218, 0.9896314860172516, 0.9904491843094257, 0.9879861205558886, 0.282850629015591, 0.2667095617464158, 0.04383142135304097, 0.275486075864931, 0.14338158258463485, 0.2756153574592568, 0.22637894952680138, 0.1945719329836284, 0.2904227135709363, 0.6212000910635228, 0.5963696043773468, 0.6291267713473723, 0.6858364959838683, 0.664696698108624, 0.5572640881289406, 0.6171837392772419, 0.6315545842647985, 0.40158912906319855, 0.15843239571238776, 0.1633130317114525, 0.13855351384496084, 0.11474977409962961, 0.12480007871641996, 0.1620504479027981, 0.16875963134752237, 0.1918318039847976, 0.137610655034756, 0.2095383786764935, 0.010001388366760566, 0.00998162246502976, 0.17010517529262292, 0.2653595109629818, 0.26411771034253084, 0.16338646737032791, 0.20848867414440186, 0.1460153733362416, 9.999999999998899e-05, 0.1403642594153094, 0.13118994002946205, 9.999999999998899e-05, 0.027213821715842967, 0.17945235996075481, 0.15283113651677305, 0.1622208931593876, 0.10868351255707198, 0.31496885312891276, 0.3274772568015485, 0.2622024976614231, 0.3075907535338833, 0.18974595569812347, 0.23562363242378015, 0.32496963992106165, 0.31968098579021575, 0.257962764502664, 0.03479288128378888, 0.03807685721147791, 0.05851514805318969, 0.08829123895992474, 0.08986709330387, 0.08319122355537512, 0.06474851153447125, 0.07926978409912788, 0.08028556562791422, 0.16882148035987032, 0.19485892847499986, 0.1864197344664753, 0.17019293466656327, 0.18684027755751687, 0.1662586572475846, 0.17255448582720456, 0.1700033626601848, 0.18300662188736272, 0.4985190232387504, 0.480505348066949, 0.5265644782871719, 0.5179321576054454, 0.48892910671954815, 0.5062743933595113, 0.5198158841714449, 0.516134700269673, 0.49989340088655587, 0.08967659977278686, 0.07665084365997066, 0.09853768191983159, 0.11305002208338066, 0.09009441112422445, 0.11182007788487447, 0.09453083583787525, 0.09587780497144727, 0.08510827451365677, 0.22319213802522186, 0.1526130722721204, 0.21921613043840749, 0.23277732855203281, 0.22351851664052913, 0.17573127928105403, 0.190281041331387, 0.17605976850684912, 0.23813907177885818, 0.28851970761195433, 0.3323760325985442, 0.28036513864204804, 0.3105113575178343, 0.29496464911572795, 0.3334225911238913, 0.3034924161914103, 0.3406913177740256, 0.318626187017781, 0.1972233463484796, 0.2331468128126607, 0.24689190104466452, 0.2725605562417127, 0.17555930206498893, 0.2046530710959299, 0.23071931237562926, 0.21955394137841455, 0.2388672357465701, 0.19121140810434678, 0.1685944477268998, 0.18445711567430512, 0.19448444730295944, 0.1833795929829225, 0.17786845305485166, 0.19427453908237236, 0.19367829679573156, 0.17686234630686626, 0.19044601063418853, 0.2040319356985678, 0.2116391981408604, 0.18168426291782813, 0.19559879553184256, 0.20257585072454964, 0.1870520312940509, 0.17936567742224774, 0.2540604378965612, 0.7428234090023446, 0.17900208490031433, 0.14841989123302068, 0.6908221190538788, 0.196058177574451, 0.17733126041979963, 0.18558765709645408, 0.6347805902188213, 0.6661679991441667, 0.6400181120926782, 0.5540427681821837, 0.2183098705827501, 0.5301506651333527, 0.16355163692987484, 0.5710792106264877, 0.20657720385728107, 0.19846519980050947, 0.5243286142954882, 0.17620520613589974, 0.17835546839562066, 0.19243840303235282, 0.15990751953765758, 0.18167863001450302, 0.17573024865856512, 0.18346310601130011, 0.19117664158897718, 0.1792847717756818, 0.07742323886887148, 0.0689081726140165, 0.07289286791999261, 0.0698459334150957, 0.07119603679876818, 0.08237063560732916, 0.07596511405475193, 0.07570651220692948, 0.07538615371237523]}, "mutation_prompt": null}
{"id": "afb7fcad-32bb-4cc3-be74-361a84859536", "solution": "import numpy as np\n\nclass Dynamic_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, pop_size=50, c1=2.0, c2=2.0, w=0.7, f=0.5, cr=0.9, p=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.c1 = c1\n        self.c2 = c2\n        self.w = w\n        self.f = f\n        self.cr = cr\n        self.p = p\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(ind) for ind in population])\n\n        def clip_bounds(population):\n            return np.clip(population, -5.0, 5.0)\n\n        def mutate(population, target_idx, f):\n            candidates = list(range(len(population)))\n            candidates.remove(target_idx)\n            a, b, c = np.random.choice(candidates, 3, replace=False)\n            mutant = population[a] + f * (population[b] - population[c])\n            return clip_bounds(mutant)\n\n        def adapt_f(population, target_idx, f):\n            if np.random.rand() < self.p:\n                f = np.random.uniform(0, 1)\n            return f\n\n        def adjust_f(population, f):\n            diversity = np.mean(np.std(population, axis=0))\n            f = f * np.exp(-self.p * diversity)\n            return f\n\n        def crossover(target, mutant):\n            trial = np.copy(target)\n            crossover_points = np.random.rand(self.dim) < self.cr\n            if not np.any(crossover_points):\n                crossover_points[np.random.randint(0, self.dim)] = True\n            trial[crossover_points] = mutant[crossover_points]\n            return trial\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                f = adapt_f(population, i, self.f)\n                f = adjust_f(population, f)  # New line for dynamic mutation factor adaptation\n                mutant = mutate(population, i, f)\n                trial = crossover(population[i], mutant)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n        return best_solution", "name": "Dynamic_DE_PSO_Optimizer", "description": "Improving DE_PSO_Optimizer by incorporating a dynamic mechanism to adjust the mutation factor based on population diversity to enhance exploration and exploitation.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b742edd6-ebfe-46f5-b50d-b45a1f6aad5f", "metadata": {"aucs": [0.8415483320083317, 0.7873734851969789, 0.8208808188951524, 0.7968317770074933, 0.8325281512880215, 0.8272777054416194, 0.8271262860501101, 0.8323831676002205, 0.8181720814009356, 0.7175307743728203, 0.72130816045329, 0.6856890470051182, 0.7013491858505024, 0.7188101000831255, 0.7058090837628903, 0.7005074414011923, 0.7166751413437723, 0.13248636011923154, 0.4481775897642457, 0.16102923138644654, 0.4367880666108337, 0.3219191331850335, 0.1509365529628116, 0.377243101950949, 0.4095006832910977, 0.44595334805735665, 0.15532262200074187, 0.13809757285034396, 0.1361915757158083, 0.11516920968260258, 0.14613427521767353, 0.22911290826525166, 0.151737800167288, 0.13880238662463684, 0.11119125394176244, 0.15544200383027185, 0.8743370348690453, 0.8867117120609392, 0.8202366863092585, 0.8639084180893842, 0.8941788249323595, 0.8082501977703898, 0.8544252756764904, 0.8543604125483817, 0.8888734804478887, 0.5744826161629303, 0.4990439103576192, 0.47197792815808515, 0.4514284564293579, 0.43521704856130194, 0.4696054848577018, 0.5437448683615151, 0.5310316375509425, 0.60035876775151, 0.22811658500048193, 0.8469526501122752, 0.8105368552861398, 0.8821213207203665, 0.2707250022530432, 0.8452292686281677, 0.7823594917233916, 0.6628786920221681, 0.7890969796028133, 0.4603532283884616, 0.3877592763404131, 0.268807891850954, 0.5132702592579393, 0.3009966760656976, 0.6399506148770595, 0.20807985059275258, 0.4445581216905875, 0.6181984321201806, 0.30942627605161355, 0.3326397968306458, 0.1608892210430629, 0.1749878119831747, 0.21524064113644759, 0.43136284441578276, 0.2842849611404469, 0.3014713077306115, 0.3247999997958966, 9.999999999998899e-05, 0.5420255724431384, 0.5167132287147271, 0.323623210693478, 0.5236202492560686, 0.03582664293776583, 0.4961863160446829, 0.5983685556635396, 0.48004169927687823, 0.5751253318349361, 0.6023216541096823, 0.6765215155203397, 0.09569981795327731, 0.1327458453878797, 0.06657917606497121, 0.3967835739020187, 0.6609248232643044, 0.39831270863378765, 0.0789125263977809, 0.25837529774824197, 0.14761951524700612, 0.26941640692550883, 0.37390483165996746, 0.22667063106565877, 0.14796595651761657, 0.1526360340075551, 0.26586715630625746, 0.401238492885285, 0.3016090297452153, 0.3927266672695702, 0.4099603080875881, 0.4161333248714256, 0.37792551322591217, 0.3724271730527302, 0.3498130471339609, 0.36362638907756284, 0.7476894586672209, 0.7643255296485678, 0.7551894266165657, 0.7664103654213383, 0.7428808778224834, 0.7324945902419097, 0.7456933441538313, 0.6885754212652295, 0.7580606973847237, 0.42811269293543086, 0.14023066925309902, 0.10670569028533317, 0.1406691271832491, 0.09772123272890199, 0.16371495763749244, 0.1326531405400656, 0.11788054082511534, 0.16773572817661409, 0.6868691877063224, 0.5713913005760239, 0.5309481753150553, 0.37953433688543214, 0.6106076061235983, 0.314816965812432, 0.1926880972945808, 0.5123652832968015, 0.5125182995620365, 0.4835676863453505, 0.4660311947908924, 0.4808107951434111, 0.5267577888222441, 0.48228727834468044, 0.503222362960514, 0.5096342561306109, 0.5134198656542641, 0.49642041101932943, 0.39478153057249354, 0.36527659798553924, 0.3749038312930758, 0.389917400507931, 0.3353589314285699, 0.3837320301256505, 0.40312839777059384, 0.391779303767258, 0.3847962728292338, 0.21026365337211628, 0.22614358433930037, 0.2218321701020638, 0.2250482954759514, 0.2030028089441399, 0.22166026096906555, 0.22894392952207965, 0.22843827879566903, 0.22141354291605542, 0.23948428157452517, 0.21788039690686845, 0.23209716514423484, 0.6323247915792307, 0.7276185432482504, 0.22753716020817816, 0.23116820489455325, 0.2095363873696986, 0.2383927323253613, 0.18727057050597484, 0.18533370685014028, 0.7980098114208879, 0.879165869841122, 0.8618013365217025, 0.1973429465049138, 0.8234543070425426, 0.8684006477823741, 0.8597041019336726, 0.7552653818676855, 0.21084529289173048, 0.7955936385588998, 0.208066081343396, 0.832113022434438, 0.16617950435428208, 0.7530512572127844, 0.7738087910020401, 0.15323970621043426, 0.19212286733565198, 0.18884072021162834, 0.18645151134852433, 0.2201990884926236, 0.1742758643179808, 0.18670923575454967, 0.1839366627946203, 0.17766393401910097, 0.1934857351664151, 0.10854033480544945, 0.07898219760305658, 0.0893484705276576, 0.10244739581337559, 0.08211042189359996, 0.08303260433089732, 0.0851538042370803, 0.09383507122744528, 0.0931642152883072]}, "mutation_prompt": null}
{"id": "ae463516-e633-49e1-b40f-43e20c293d35", "solution": "import numpy as np\n\nclass Dynamic_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, pop_size=50, c1=2.0, c2=2.0, w=0.7, f=0.5, cr=0.9, p=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.c1 = c1\n        self.c2 = c2\n        self.w = w\n        self.f = f\n        self.cr = cr\n        self.p = p\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(ind) for ind in population])\n\n        def clip_bounds(population):\n            return np.clip(population, -5.0, 5.0)\n\n        def mutate(population, target_idx, f):\n            candidates = list(range(len(population)))\n            candidates.remove(target_idx)\n            a, b, c = np.random.choice(candidates, 3, replace=False)\n            mutant = population[a] + f * (population[b] - population[c])\n            return clip_bounds(mutant)\n\n        def adapt_f(population, target_idx, f):\n            if np.random.rand() < self.p:\n                f = np.random.uniform(0, 1)\n            return f\n\n        def adjust_f(population, f):\n            diversity = np.mean(np.std(population, axis=0))\n            f = f * np.exp(-self.p * diversity)\n            return f\n\n        def crossover(target, mutant):\n            trial = np.copy(target)\n            crossover_points = np.random.rand(self.dim) < self.cr\n            if not np.any(crossover_points):\n                crossover_points[np.random.randint(0, self.dim)] = True\n            trial[crossover_points] = mutant[crossover_points]\n            return trial\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                f = adapt_f(population, i, self.f)\n                f = adjust_f(population, f)  # New line for dynamic mutation factor adaptation\n                mutant = mutate(population, i, f)\n                trial = crossover(population[i], mutant)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n        return best_solution", "name": "Dynamic_DE_PSO_Optimizer", "description": "Improving DE_PSO_Optimizer by incorporating a dynamic mechanism to adjust the mutation factor based on population diversity to enhance exploration and exploitation.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b742edd6-ebfe-46f5-b50d-b45a1f6aad5f", "metadata": {"aucs": [0.8415483320083317, 0.7873734851969789, 0.8208808188951524, 0.7968317770074933, 0.8325281512880215, 0.8272777054416194, 0.8271262860501101, 0.8323831676002205, 0.8181720814009356, 0.7175307743728203, 0.72130816045329, 0.6856890470051182, 0.7013491858505024, 0.7188101000831255, 0.7058090837628903, 0.7005074414011923, 0.7166751413437723, 0.13248636011923154, 0.4481775897642457, 0.16102923138644654, 0.4367880666108337, 0.3219191331850335, 0.1509365529628116, 0.377243101950949, 0.4095006832910977, 0.44595334805735665, 0.15532262200074187, 0.13809757285034396, 0.1361915757158083, 0.11516920968260258, 0.14613427521767353, 0.22911290826525166, 0.151737800167288, 0.13880238662463684, 0.11119125394176244, 0.15544200383027185, 0.8743370348690453, 0.8867117120609392, 0.8202366863092585, 0.8639084180893842, 0.8941788249323595, 0.8082501977703898, 0.8544252756764904, 0.8543604125483817, 0.8888734804478887, 0.5744826161629303, 0.4990439103576192, 0.47197792815808515, 0.4514284564293579, 0.43521704856130194, 0.4696054848577018, 0.5437448683615151, 0.5310316375509425, 0.60035876775151, 0.22811658500048193, 0.8469526501122752, 0.8105368552861398, 0.8821213207203665, 0.2707250022530432, 0.8452292686281677, 0.7823594917233916, 0.6628786920221681, 0.7890969796028133, 0.4603532283884616, 0.3877592763404131, 0.268807891850954, 0.5132702592579393, 0.3009966760656976, 0.6399506148770595, 0.20807985059275258, 0.4445581216905875, 0.6181984321201806, 0.30942627605161355, 0.3326397968306458, 0.1608892210430629, 0.1749878119831747, 0.21524064113644759, 0.43136284441578276, 0.2842849611404469, 0.3014713077306115, 0.3247999997958966, 9.999999999998899e-05, 0.5420255724431384, 0.5167132287147271, 0.323623210693478, 0.5236202492560686, 0.03582664293776583, 0.4961863160446829, 0.5983685556635396, 0.48004169927687823, 0.5751253318349361, 0.6023216541096823, 0.6765215155203397, 0.09569981795327731, 0.1327458453878797, 0.06657917606497121, 0.3967835739020187, 0.6609248232643044, 0.39831270863378765, 0.0789125263977809, 0.25837529774824197, 0.14761951524700612, 0.26941640692550883, 0.37390483165996746, 0.22667063106565877, 0.14796595651761657, 0.1526360340075551, 0.26586715630625746, 0.401238492885285, 0.3016090297452153, 0.3927266672695702, 0.4099603080875881, 0.4161333248714256, 0.37792551322591217, 0.3724271730527302, 0.3498130471339609, 0.36362638907756284, 0.7476894586672209, 0.7643255296485678, 0.7551894266165657, 0.7664103654213383, 0.7428808778224834, 0.7324945902419097, 0.7456933441538313, 0.6885754212652295, 0.7580606973847237, 0.42811269293543086, 0.14023066925309902, 0.10670569028533317, 0.1406691271832491, 0.09772123272890199, 0.16371495763749244, 0.1326531405400656, 0.11788054082511534, 0.16773572817661409, 0.6868691877063224, 0.5713913005760239, 0.5309481753150553, 0.37953433688543214, 0.6106076061235983, 0.314816965812432, 0.1926880972945808, 0.5123652832968015, 0.5125182995620365, 0.4835676863453505, 0.4660311947908924, 0.4808107951434111, 0.5267577888222441, 0.48228727834468044, 0.503222362960514, 0.5096342561306109, 0.5134198656542641, 0.49642041101932943, 0.39478153057249354, 0.36527659798553924, 0.3749038312930758, 0.389917400507931, 0.3353589314285699, 0.3837320301256505, 0.40312839777059384, 0.391779303767258, 0.3847962728292338, 0.21026365337211628, 0.22614358433930037, 0.2218321701020638, 0.2250482954759514, 0.2030028089441399, 0.22166026096906555, 0.22894392952207965, 0.22843827879566903, 0.22141354291605542, 0.23948428157452517, 0.21788039690686845, 0.23209716514423484, 0.6323247915792307, 0.7276185432482504, 0.22753716020817816, 0.23116820489455325, 0.2095363873696986, 0.2383927323253613, 0.18727057050597484, 0.18533370685014028, 0.7980098114208879, 0.879165869841122, 0.8618013365217025, 0.1973429465049138, 0.8234543070425426, 0.8684006477823741, 0.8597041019336726, 0.7552653818676855, 0.21084529289173048, 0.7955936385588998, 0.208066081343396, 0.832113022434438, 0.16617950435428208, 0.7530512572127844, 0.7738087910020401, 0.15323970621043426, 0.19212286733565198, 0.18884072021162834, 0.18645151134852433, 0.2201990884926236, 0.1742758643179808, 0.18670923575454967, 0.1839366627946203, 0.17766393401910097, 0.1934857351664151, 0.10854033480544945, 0.07898219760305658, 0.0893484705276576, 0.10244739581337559, 0.08211042189359996, 0.08303260433089732, 0.0851538042370803, 0.09383507122744528, 0.0931642152883072]}, "mutation_prompt": null}
{"id": "3c91b5b8-50fd-4cec-9e95-10bba31b02b2", "solution": "import numpy as np\n\nclass Dynamic_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, pop_size=50, c1=2.0, c2=2.0, w=0.7, f=0.5, cr=0.9, p=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.c1 = c1\n        self.c2 = c2\n        self.w = w\n        self.f = f\n        self.cr = cr\n        self.p = p\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(ind) for ind in population])\n\n        def clip_bounds(population):\n            return np.clip(population, -5.0, 5.0)\n\n        def mutate(population, target_idx, f):\n            candidates = list(range(len(population)))\n            candidates.remove(target_idx)\n            a, b, c = np.random.choice(candidates, 3, replace=False)\n            mutant = population[a] + f * (population[b] - population[c])\n            return clip_bounds(mutant)\n\n        def adapt_f(population, target_idx, f):\n            if np.random.rand() < self.p:\n                f = np.random.uniform(0, 1)\n            return f\n\n        def adjust_f(population, f):\n            diversity = np.mean(np.std(population, axis=0))\n            f = f * np.exp(-self.p * diversity)\n            return f\n\n        def crossover(target, mutant):\n            trial = np.copy(target)\n            crossover_points = np.random.rand(self.dim) < self.cr\n            if not np.any(crossover_points):\n                crossover_points[np.random.randint(0, self.dim)] = True\n            trial[crossover_points] = mutant[crossover_points]\n            return trial\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                f = adapt_f(population, i, self.f)\n                f = adjust_f(population, f)  # New line for dynamic mutation factor adaptation\n                mutant = mutate(population, i, f)\n                trial = crossover(population[i], mutant)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n        return best_solution", "name": "Dynamic_DE_PSO_Optimizer", "description": "Improving DE_PSO_Optimizer by incorporating a dynamic mechanism to adjust the mutation factor based on population diversity to enhance exploration and exploitation.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b742edd6-ebfe-46f5-b50d-b45a1f6aad5f", "metadata": {"aucs": [0.8415483320083317, 0.7873734851969789, 0.8208808188951524, 0.7968317770074933, 0.8325281512880215, 0.8272777054416194, 0.8271262860501101, 0.8323831676002205, 0.8181720814009356, 0.7175307743728203, 0.72130816045329, 0.6856890470051182, 0.7013491858505024, 0.7188101000831255, 0.7058090837628903, 0.7005074414011923, 0.7166751413437723, 0.13248636011923154, 0.4481775897642457, 0.16102923138644654, 0.4367880666108337, 0.3219191331850335, 0.1509365529628116, 0.377243101950949, 0.4095006832910977, 0.44595334805735665, 0.15532262200074187, 0.13809757285034396, 0.1361915757158083, 0.11516920968260258, 0.14613427521767353, 0.22911290826525166, 0.151737800167288, 0.13880238662463684, 0.11119125394176244, 0.15544200383027185, 0.8743370348690453, 0.8867117120609392, 0.8202366863092585, 0.8639084180893842, 0.8941788249323595, 0.8082501977703898, 0.8544252756764904, 0.8543604125483817, 0.8888734804478887, 0.5744826161629303, 0.4990439103576192, 0.47197792815808515, 0.4514284564293579, 0.43521704856130194, 0.4696054848577018, 0.5437448683615151, 0.5310316375509425, 0.60035876775151, 0.22811658500048193, 0.8469526501122752, 0.8105368552861398, 0.8821213207203665, 0.2707250022530432, 0.8452292686281677, 0.7823594917233916, 0.6628786920221681, 0.7890969796028133, 0.4603532283884616, 0.3877592763404131, 0.268807891850954, 0.5132702592579393, 0.3009966760656976, 0.6399506148770595, 0.20807985059275258, 0.4445581216905875, 0.6181984321201806, 0.30942627605161355, 0.3326397968306458, 0.1608892210430629, 0.1749878119831747, 0.21524064113644759, 0.43136284441578276, 0.2842849611404469, 0.3014713077306115, 0.3247999997958966, 9.999999999998899e-05, 0.5420255724431384, 0.5167132287147271, 0.323623210693478, 0.5236202492560686, 0.03582664293776583, 0.4961863160446829, 0.5983685556635396, 0.48004169927687823, 0.5751253318349361, 0.6023216541096823, 0.6765215155203397, 0.09569981795327731, 0.1327458453878797, 0.06657917606497121, 0.3967835739020187, 0.6609248232643044, 0.39831270863378765, 0.0789125263977809, 0.25837529774824197, 0.14761951524700612, 0.26941640692550883, 0.37390483165996746, 0.22667063106565877, 0.14796595651761657, 0.1526360340075551, 0.26586715630625746, 0.401238492885285, 0.3016090297452153, 0.3927266672695702, 0.4099603080875881, 0.4161333248714256, 0.37792551322591217, 0.3724271730527302, 0.3498130471339609, 0.36362638907756284, 0.7476894586672209, 0.7643255296485678, 0.7551894266165657, 0.7664103654213383, 0.7428808778224834, 0.7324945902419097, 0.7456933441538313, 0.6885754212652295, 0.7580606973847237, 0.42811269293543086, 0.14023066925309902, 0.10670569028533317, 0.1406691271832491, 0.09772123272890199, 0.16371495763749244, 0.1326531405400656, 0.11788054082511534, 0.16773572817661409, 0.6868691877063224, 0.5713913005760239, 0.5309481753150553, 0.37953433688543214, 0.6106076061235983, 0.314816965812432, 0.1926880972945808, 0.5123652832968015, 0.5125182995620365, 0.4835676863453505, 0.4660311947908924, 0.4808107951434111, 0.5267577888222441, 0.48228727834468044, 0.503222362960514, 0.5096342561306109, 0.5134198656542641, 0.49642041101932943, 0.39478153057249354, 0.36527659798553924, 0.3749038312930758, 0.389917400507931, 0.3353589314285699, 0.3837320301256505, 0.40312839777059384, 0.391779303767258, 0.3847962728292338, 0.21026365337211628, 0.22614358433930037, 0.2218321701020638, 0.2250482954759514, 0.2030028089441399, 0.22166026096906555, 0.22894392952207965, 0.22843827879566903, 0.22141354291605542, 0.23948428157452517, 0.21788039690686845, 0.23209716514423484, 0.6323247915792307, 0.7276185432482504, 0.22753716020817816, 0.23116820489455325, 0.2095363873696986, 0.2383927323253613, 0.18727057050597484, 0.18533370685014028, 0.7980098114208879, 0.879165869841122, 0.8618013365217025, 0.1973429465049138, 0.8234543070425426, 0.8684006477823741, 0.8597041019336726, 0.7552653818676855, 0.21084529289173048, 0.7955936385588998, 0.208066081343396, 0.832113022434438, 0.16617950435428208, 0.7530512572127844, 0.7738087910020401, 0.15323970621043426, 0.19212286733565198, 0.18884072021162834, 0.18645151134852433, 0.2201990884926236, 0.1742758643179808, 0.18670923575454967, 0.1839366627946203, 0.17766393401910097, 0.1934857351664151, 0.10854033480544945, 0.07898219760305658, 0.0893484705276576, 0.10244739581337559, 0.08211042189359996, 0.08303260433089732, 0.0851538042370803, 0.09383507122744528, 0.0931642152883072]}, "mutation_prompt": null}
{"id": "86468363-cee2-4d17-b261-e533daa39503", "solution": "import numpy as np\n\nclass Dynamic_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, pop_size=50, c1=2.0, c2=2.0, w=0.7, f=0.5, cr=0.9, p=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.c1 = c1\n        self.c2 = c2\n        self.w = w\n        self.f = f\n        self.cr = cr\n        self.p = p\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(ind) for ind in population])\n\n        def clip_bounds(population):\n            return np.clip(population, -5.0, 5.0)\n\n        def mutate(population, target_idx, f):\n            candidates = list(range(len(population)))\n            candidates.remove(target_idx)\n            a, b, c = np.random.choice(candidates, 3, replace=False)\n            mutant = population[a] + f * (population[b] - population[c])\n            return clip_bounds(mutant)\n\n        def adapt_f(population, target_idx, f):\n            if np.random.rand() < self.p:\n                f = np.random.uniform(0, 1)\n            return f\n\n        def adjust_f(population, f):\n            diversity = np.mean(np.std(population, axis=0))\n            f = f * np.exp(-self.p * diversity)\n            return f\n\n        def crossover(target, mutant):\n            trial = np.copy(target)\n            crossover_points = np.random.rand(self.dim) < self.cr\n            if not np.any(crossover_points):\n                crossover_points[np.random.randint(0, self.dim)] = True\n            trial[crossover_points] = mutant[crossover_points]\n            return trial\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                f = adapt_f(population, i, self.f)\n                f = adjust_f(population, f)  # New line for dynamic mutation factor adaptation\n                mutant = mutate(population, i, f)\n                trial = crossover(population[i], mutant)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n        return best_solution", "name": "Dynamic_DE_PSO_Optimizer", "description": "Improving DE_PSO_Optimizer by incorporating a dynamic mechanism to adjust the mutation factor based on population diversity to enhance exploration and exploitation.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b742edd6-ebfe-46f5-b50d-b45a1f6aad5f", "metadata": {"aucs": [0.8415483320083317, 0.7873734851969789, 0.8208808188951524, 0.7968317770074933, 0.8325281512880215, 0.8272777054416194, 0.8271262860501101, 0.8323831676002205, 0.8181720814009356, 0.7175307743728203, 0.72130816045329, 0.6856890470051182, 0.7013491858505024, 0.7188101000831255, 0.7058090837628903, 0.7005074414011923, 0.7166751413437723, 0.13248636011923154, 0.4481775897642457, 0.16102923138644654, 0.4367880666108337, 0.3219191331850335, 0.1509365529628116, 0.377243101950949, 0.4095006832910977, 0.44595334805735665, 0.15532262200074187, 0.13809757285034396, 0.1361915757158083, 0.11516920968260258, 0.14613427521767353, 0.22911290826525166, 0.151737800167288, 0.13880238662463684, 0.11119125394176244, 0.15544200383027185, 0.8743370348690453, 0.8867117120609392, 0.8202366863092585, 0.8639084180893842, 0.8941788249323595, 0.8082501977703898, 0.8544252756764904, 0.8543604125483817, 0.8888734804478887, 0.5744826161629303, 0.4990439103576192, 0.47197792815808515, 0.4514284564293579, 0.43521704856130194, 0.4696054848577018, 0.5437448683615151, 0.5310316375509425, 0.60035876775151, 0.22811658500048193, 0.8469526501122752, 0.8105368552861398, 0.8821213207203665, 0.2707250022530432, 0.8452292686281677, 0.7823594917233916, 0.6628786920221681, 0.7890969796028133, 0.4603532283884616, 0.3877592763404131, 0.268807891850954, 0.5132702592579393, 0.3009966760656976, 0.6399506148770595, 0.20807985059275258, 0.4445581216905875, 0.6181984321201806, 0.30942627605161355, 0.3326397968306458, 0.1608892210430629, 0.1749878119831747, 0.21524064113644759, 0.43136284441578276, 0.2842849611404469, 0.3014713077306115, 0.3247999997958966, 9.999999999998899e-05, 0.5420255724431384, 0.5167132287147271, 0.323623210693478, 0.5236202492560686, 0.03582664293776583, 0.4961863160446829, 0.5983685556635396, 0.48004169927687823, 0.5751253318349361, 0.6023216541096823, 0.6765215155203397, 0.09569981795327731, 0.1327458453878797, 0.06657917606497121, 0.3967835739020187, 0.6609248232643044, 0.39831270863378765, 0.0789125263977809, 0.25837529774824197, 0.14761951524700612, 0.26941640692550883, 0.37390483165996746, 0.22667063106565877, 0.14796595651761657, 0.1526360340075551, 0.26586715630625746, 0.401238492885285, 0.3016090297452153, 0.3927266672695702, 0.4099603080875881, 0.4161333248714256, 0.37792551322591217, 0.3724271730527302, 0.3498130471339609, 0.36362638907756284, 0.7476894586672209, 0.7643255296485678, 0.7551894266165657, 0.7664103654213383, 0.7428808778224834, 0.7324945902419097, 0.7456933441538313, 0.6885754212652295, 0.7580606973847237, 0.42811269293543086, 0.14023066925309902, 0.10670569028533317, 0.1406691271832491, 0.09772123272890199, 0.16371495763749244, 0.1326531405400656, 0.11788054082511534, 0.16773572817661409, 0.6868691877063224, 0.5713913005760239, 0.5309481753150553, 0.37953433688543214, 0.6106076061235983, 0.314816965812432, 0.1926880972945808, 0.5123652832968015, 0.5125182995620365, 0.4835676863453505, 0.4660311947908924, 0.4808107951434111, 0.5267577888222441, 0.48228727834468044, 0.503222362960514, 0.5096342561306109, 0.5134198656542641, 0.49642041101932943, 0.39478153057249354, 0.36527659798553924, 0.3749038312930758, 0.389917400507931, 0.3353589314285699, 0.3837320301256505, 0.40312839777059384, 0.391779303767258, 0.3847962728292338, 0.21026365337211628, 0.22614358433930037, 0.2218321701020638, 0.2250482954759514, 0.2030028089441399, 0.22166026096906555, 0.22894392952207965, 0.22843827879566903, 0.22141354291605542, 0.23948428157452517, 0.21788039690686845, 0.23209716514423484, 0.6323247915792307, 0.7276185432482504, 0.22753716020817816, 0.23116820489455325, 0.2095363873696986, 0.2383927323253613, 0.18727057050597484, 0.18533370685014028, 0.7980098114208879, 0.879165869841122, 0.8618013365217025, 0.1973429465049138, 0.8234543070425426, 0.8684006477823741, 0.8597041019336726, 0.7552653818676855, 0.21084529289173048, 0.7955936385588998, 0.208066081343396, 0.832113022434438, 0.16617950435428208, 0.7530512572127844, 0.7738087910020401, 0.15323970621043426, 0.19212286733565198, 0.18884072021162834, 0.18645151134852433, 0.2201990884926236, 0.1742758643179808, 0.18670923575454967, 0.1839366627946203, 0.17766393401910097, 0.1934857351664151, 0.10854033480544945, 0.07898219760305658, 0.0893484705276576, 0.10244739581337559, 0.08211042189359996, 0.08303260433089732, 0.0851538042370803, 0.09383507122744528, 0.0931642152883072]}, "mutation_prompt": null}
{"id": "0ef37a78-585c-4590-ac21-76f6e8c09ae3", "solution": "import numpy as np\n\nclass Dynamic_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, pop_size=50, c1=2.0, c2=2.0, w=0.7, f=0.5, cr=0.9, p=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.c1 = c1\n        self.c2 = c2\n        self.w = w\n        self.f = f\n        self.cr = cr\n        self.p = p\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(ind) for ind in population])\n\n        def clip_bounds(population):\n            return np.clip(population, -5.0, 5.0)\n\n        def mutate(population, target_idx, f):\n            candidates = list(range(len(population)))\n            candidates.remove(target_idx)\n            a, b, c = np.random.choice(candidates, 3, replace=False)\n            mutant = population[a] + f * (population[b] - population[c])\n            return clip_bounds(mutant)\n\n        def adapt_f(population, target_idx, f):\n            if np.random.rand() < self.p:\n                f = np.random.uniform(0, 1)\n            return f\n\n        def adjust_f(population, f):\n            diversity = np.mean(np.std(population, axis=0))\n            f = f * np.exp(-self.p * diversity)\n            return f\n\n        def crossover(target, mutant):\n            trial = np.copy(target)\n            crossover_points = np.random.rand(self.dim) < self.cr\n            if not np.any(crossover_points):\n                crossover_points[np.random.randint(0, self.dim)] = True\n            trial[crossover_points] = mutant[crossover_points]\n            return trial\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                f = adapt_f(population, i, self.f)\n                f = adjust_f(population, f)  # New line for dynamic mutation factor adaptation\n                mutant = mutate(population, i, f)\n                trial = crossover(population[i], mutant)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n        return best_solution", "name": "Dynamic_DE_PSO_Optimizer", "description": "Improving DE_PSO_Optimizer by incorporating a dynamic mechanism to adjust the mutation factor based on population diversity to enhance exploration and exploitation.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b742edd6-ebfe-46f5-b50d-b45a1f6aad5f", "metadata": {"aucs": [0.8415483320083317, 0.7873734851969789, 0.8208808188951524, 0.7968317770074933, 0.8325281512880215, 0.8272777054416194, 0.8271262860501101, 0.8323831676002205, 0.8181720814009356, 0.7175307743728203, 0.72130816045329, 0.6856890470051182, 0.7013491858505024, 0.7188101000831255, 0.7058090837628903, 0.7005074414011923, 0.7166751413437723, 0.13248636011923154, 0.4481775897642457, 0.16102923138644654, 0.4367880666108337, 0.3219191331850335, 0.1509365529628116, 0.377243101950949, 0.4095006832910977, 0.44595334805735665, 0.15532262200074187, 0.13809757285034396, 0.1361915757158083, 0.11516920968260258, 0.14613427521767353, 0.22911290826525166, 0.151737800167288, 0.13880238662463684, 0.11119125394176244, 0.15544200383027185, 0.8743370348690453, 0.8867117120609392, 0.8202366863092585, 0.8639084180893842, 0.8941788249323595, 0.8082501977703898, 0.8544252756764904, 0.8543604125483817, 0.8888734804478887, 0.5744826161629303, 0.4990439103576192, 0.47197792815808515, 0.4514284564293579, 0.43521704856130194, 0.4696054848577018, 0.5437448683615151, 0.5310316375509425, 0.60035876775151, 0.22811658500048193, 0.8469526501122752, 0.8105368552861398, 0.8821213207203665, 0.2707250022530432, 0.8452292686281677, 0.7823594917233916, 0.6628786920221681, 0.7890969796028133, 0.4603532283884616, 0.3877592763404131, 0.268807891850954, 0.5132702592579393, 0.3009966760656976, 0.6399506148770595, 0.20807985059275258, 0.4445581216905875, 0.6181984321201806, 0.30942627605161355, 0.3326397968306458, 0.1608892210430629, 0.1749878119831747, 0.21524064113644759, 0.43136284441578276, 0.2842849611404469, 0.3014713077306115, 0.3247999997958966, 9.999999999998899e-05, 0.5420255724431384, 0.5167132287147271, 0.323623210693478, 0.5236202492560686, 0.03582664293776583, 0.4961863160446829, 0.5983685556635396, 0.48004169927687823, 0.5751253318349361, 0.6023216541096823, 0.6765215155203397, 0.09569981795327731, 0.1327458453878797, 0.06657917606497121, 0.3967835739020187, 0.6609248232643044, 0.39831270863378765, 0.0789125263977809, 0.25837529774824197, 0.14761951524700612, 0.26941640692550883, 0.37390483165996746, 0.22667063106565877, 0.14796595651761657, 0.1526360340075551, 0.26586715630625746, 0.401238492885285, 0.3016090297452153, 0.3927266672695702, 0.4099603080875881, 0.4161333248714256, 0.37792551322591217, 0.3724271730527302, 0.3498130471339609, 0.36362638907756284, 0.7476894586672209, 0.7643255296485678, 0.7551894266165657, 0.7664103654213383, 0.7428808778224834, 0.7324945902419097, 0.7456933441538313, 0.6885754212652295, 0.7580606973847237, 0.42811269293543086, 0.14023066925309902, 0.10670569028533317, 0.1406691271832491, 0.09772123272890199, 0.16371495763749244, 0.1326531405400656, 0.11788054082511534, 0.16773572817661409, 0.6868691877063224, 0.5713913005760239, 0.5309481753150553, 0.37953433688543214, 0.6106076061235983, 0.314816965812432, 0.1926880972945808, 0.5123652832968015, 0.5125182995620365, 0.4835676863453505, 0.4660311947908924, 0.4808107951434111, 0.5267577888222441, 0.48228727834468044, 0.503222362960514, 0.5096342561306109, 0.5134198656542641, 0.49642041101932943, 0.39478153057249354, 0.36527659798553924, 0.3749038312930758, 0.389917400507931, 0.3353589314285699, 0.3837320301256505, 0.40312839777059384, 0.391779303767258, 0.3847962728292338, 0.21026365337211628, 0.22614358433930037, 0.2218321701020638, 0.2250482954759514, 0.2030028089441399, 0.22166026096906555, 0.22894392952207965, 0.22843827879566903, 0.22141354291605542, 0.23948428157452517, 0.21788039690686845, 0.23209716514423484, 0.6323247915792307, 0.7276185432482504, 0.22753716020817816, 0.23116820489455325, 0.2095363873696986, 0.2383927323253613, 0.18727057050597484, 0.18533370685014028, 0.7980098114208879, 0.879165869841122, 0.8618013365217025, 0.1973429465049138, 0.8234543070425426, 0.8684006477823741, 0.8597041019336726, 0.7552653818676855, 0.21084529289173048, 0.7955936385588998, 0.208066081343396, 0.832113022434438, 0.16617950435428208, 0.7530512572127844, 0.7738087910020401, 0.15323970621043426, 0.19212286733565198, 0.18884072021162834, 0.18645151134852433, 0.2201990884926236, 0.1742758643179808, 0.18670923575454967, 0.1839366627946203, 0.17766393401910097, 0.1934857351664151, 0.10854033480544945, 0.07898219760305658, 0.0893484705276576, 0.10244739581337559, 0.08211042189359996, 0.08303260433089732, 0.0851538042370803, 0.09383507122744528, 0.0931642152883072]}, "mutation_prompt": null}
{"id": "1967f0bc-32ab-4188-b34e-89203608700b", "solution": "import numpy as np\n\nclass Dynamic_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, pop_size=50, c1=2.0, c2=2.0, w=0.7, f=0.5, cr=0.9, p=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.c1 = c1\n        self.c2 = c2\n        self.w = w\n        self.f = f\n        self.cr = cr\n        self.p = p\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(ind) for ind in population])\n\n        def clip_bounds(population):\n            return np.clip(population, -5.0, 5.0)\n\n        def mutate(population, target_idx, f):\n            candidates = list(range(len(population)))\n            candidates.remove(target_idx)\n            a, b, c = np.random.choice(candidates, 3, replace=False)\n            mutant = population[a] + f * (population[b] - population[c])\n            return clip_bounds(mutant)\n\n        def adapt_f(population, target_idx, f):\n            if np.random.rand() < self.p:\n                f = np.random.uniform(0, 1)\n            return f\n\n        def adjust_f(population, f):\n            diversity = np.mean(np.std(population, axis=0))\n            f = f * np.exp(-self.p * diversity)\n            return f\n\n        def crossover(target, mutant):\n            trial = np.copy(target)\n            crossover_points = np.random.rand(self.dim) < self.cr\n            if not np.any(crossover_points):\n                crossover_points[np.random.randint(0, self.dim)] = True\n            trial[crossover_points] = mutant[crossover_points]\n            return trial\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                f = adapt_f(population, i, self.f)\n                f = adjust_f(population, f)  # New line for dynamic mutation factor adaptation\n                mutant = mutate(population, i, f)\n                trial = crossover(population[i], mutant)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n        return best_solution", "name": "Dynamic_DE_PSO_Optimizer", "description": "Improving DE_PSO_Optimizer by incorporating a dynamic mechanism to adjust the mutation factor based on population diversity to enhance exploration and exploitation.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b742edd6-ebfe-46f5-b50d-b45a1f6aad5f", "metadata": {"aucs": [0.8415483320083317, 0.7873734851969789, 0.8208808188951524, 0.7968317770074933, 0.8325281512880215, 0.8272777054416194, 0.8271262860501101, 0.8323831676002205, 0.8181720814009356, 0.7175307743728203, 0.72130816045329, 0.6856890470051182, 0.7013491858505024, 0.7188101000831255, 0.7058090837628903, 0.7005074414011923, 0.7166751413437723, 0.13248636011923154, 0.4481775897642457, 0.16102923138644654, 0.4367880666108337, 0.3219191331850335, 0.1509365529628116, 0.377243101950949, 0.4095006832910977, 0.44595334805735665, 0.15532262200074187, 0.13809757285034396, 0.1361915757158083, 0.11516920968260258, 0.14613427521767353, 0.22911290826525166, 0.151737800167288, 0.13880238662463684, 0.11119125394176244, 0.15544200383027185, 0.8743370348690453, 0.8867117120609392, 0.8202366863092585, 0.8639084180893842, 0.8941788249323595, 0.8082501977703898, 0.8544252756764904, 0.8543604125483817, 0.8888734804478887, 0.5744826161629303, 0.4990439103576192, 0.47197792815808515, 0.4514284564293579, 0.43521704856130194, 0.4696054848577018, 0.5437448683615151, 0.5310316375509425, 0.60035876775151, 0.22811658500048193, 0.8469526501122752, 0.8105368552861398, 0.8821213207203665, 0.2707250022530432, 0.8452292686281677, 0.7823594917233916, 0.6628786920221681, 0.7890969796028133, 0.4603532283884616, 0.3877592763404131, 0.268807891850954, 0.5132702592579393, 0.3009966760656976, 0.6399506148770595, 0.20807985059275258, 0.4445581216905875, 0.6181984321201806, 0.30942627605161355, 0.3326397968306458, 0.1608892210430629, 0.1749878119831747, 0.21524064113644759, 0.43136284441578276, 0.2842849611404469, 0.3014713077306115, 0.3247999997958966, 9.999999999998899e-05, 0.5420255724431384, 0.5167132287147271, 0.323623210693478, 0.5236202492560686, 0.03582664293776583, 0.4961863160446829, 0.5983685556635396, 0.48004169927687823, 0.5751253318349361, 0.6023216541096823, 0.6765215155203397, 0.09569981795327731, 0.1327458453878797, 0.06657917606497121, 0.3967835739020187, 0.6609248232643044, 0.39831270863378765, 0.0789125263977809, 0.25837529774824197, 0.14761951524700612, 0.26941640692550883, 0.37390483165996746, 0.22667063106565877, 0.14796595651761657, 0.1526360340075551, 0.26586715630625746, 0.401238492885285, 0.3016090297452153, 0.3927266672695702, 0.4099603080875881, 0.4161333248714256, 0.37792551322591217, 0.3724271730527302, 0.3498130471339609, 0.36362638907756284, 0.7476894586672209, 0.7643255296485678, 0.7551894266165657, 0.7664103654213383, 0.7428808778224834, 0.7324945902419097, 0.7456933441538313, 0.6885754212652295, 0.7580606973847237, 0.42811269293543086, 0.14023066925309902, 0.10670569028533317, 0.1406691271832491, 0.09772123272890199, 0.16371495763749244, 0.1326531405400656, 0.11788054082511534, 0.16773572817661409, 0.6868691877063224, 0.5713913005760239, 0.5309481753150553, 0.37953433688543214, 0.6106076061235983, 0.314816965812432, 0.1926880972945808, 0.5123652832968015, 0.5125182995620365, 0.4835676863453505, 0.4660311947908924, 0.4808107951434111, 0.5267577888222441, 0.48228727834468044, 0.503222362960514, 0.5096342561306109, 0.5134198656542641, 0.49642041101932943, 0.39478153057249354, 0.36527659798553924, 0.3749038312930758, 0.389917400507931, 0.3353589314285699, 0.3837320301256505, 0.40312839777059384, 0.391779303767258, 0.3847962728292338, 0.21026365337211628, 0.22614358433930037, 0.2218321701020638, 0.2250482954759514, 0.2030028089441399, 0.22166026096906555, 0.22894392952207965, 0.22843827879566903, 0.22141354291605542, 0.23948428157452517, 0.21788039690686845, 0.23209716514423484, 0.6323247915792307, 0.7276185432482504, 0.22753716020817816, 0.23116820489455325, 0.2095363873696986, 0.2383927323253613, 0.18727057050597484, 0.18533370685014028, 0.7980098114208879, 0.879165869841122, 0.8618013365217025, 0.1973429465049138, 0.8234543070425426, 0.8684006477823741, 0.8597041019336726, 0.7552653818676855, 0.21084529289173048, 0.7955936385588998, 0.208066081343396, 0.832113022434438, 0.16617950435428208, 0.7530512572127844, 0.7738087910020401, 0.15323970621043426, 0.19212286733565198, 0.18884072021162834, 0.18645151134852433, 0.2201990884926236, 0.1742758643179808, 0.18670923575454967, 0.1839366627946203, 0.17766393401910097, 0.1934857351664151, 0.10854033480544945, 0.07898219760305658, 0.0893484705276576, 0.10244739581337559, 0.08211042189359996, 0.08303260433089732, 0.0851538042370803, 0.09383507122744528, 0.0931642152883072]}, "mutation_prompt": null}
{"id": "0fd1c4aa-74f5-450e-a09b-265446e4cec5", "solution": "import numpy as np\n\nclass Dynamic_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, pop_size=50, c1=2.0, c2=2.0, w=0.7, f=0.5, cr=0.9, p=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.c1 = c1\n        self.c2 = c2\n        self.w = w\n        self.f = f\n        self.cr = cr\n        self.p = p\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(ind) for ind in population])\n\n        def clip_bounds(population):\n            return np.clip(population, -5.0, 5.0)\n\n        def mutate(population, target_idx, f):\n            candidates = list(range(len(population)))\n            candidates.remove(target_idx)\n            a, b, c = np.random.choice(candidates, 3, replace=False)\n            mutant = population[a] + f * (population[b] - population[c])\n            return clip_bounds(mutant)\n\n        def adapt_f(population, target_idx, f):\n            if np.random.rand() < self.p:\n                f = np.random.uniform(0, 1)\n            return f\n\n        def adjust_f(population, f):\n            diversity = np.mean(np.std(population, axis=0))\n            f = f * np.exp(-self.p * diversity)\n            return f\n\n        def crossover(target, mutant):\n            trial = np.copy(target)\n            crossover_points = np.random.rand(self.dim) < self.cr\n            if not np.any(crossover_points):\n                crossover_points[np.random.randint(0, self.dim)] = True\n            trial[crossover_points] = mutant[crossover_points]\n            return trial\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                f = adapt_f(population, i, self.f)\n                f = adjust_f(population, f)  # New line for dynamic mutation factor adaptation\n                mutant = mutate(population, i, f)\n                trial = crossover(population[i], mutant)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n        return best_solution", "name": "Dynamic_DE_PSO_Optimizer", "description": "Improving DE_PSO_Optimizer by incorporating a dynamic mechanism to adjust the mutation factor based on population diversity to enhance exploration and exploitation.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b742edd6-ebfe-46f5-b50d-b45a1f6aad5f", "metadata": {"aucs": [0.8415483320083317, 0.7873734851969789, 0.8208808188951524, 0.7968317770074933, 0.8325281512880215, 0.8272777054416194, 0.8271262860501101, 0.8323831676002205, 0.8181720814009356, 0.7175307743728203, 0.72130816045329, 0.6856890470051182, 0.7013491858505024, 0.7188101000831255, 0.7058090837628903, 0.7005074414011923, 0.7166751413437723, 0.13248636011923154, 0.4481775897642457, 0.16102923138644654, 0.4367880666108337, 0.3219191331850335, 0.1509365529628116, 0.377243101950949, 0.4095006832910977, 0.44595334805735665, 0.15532262200074187, 0.13809757285034396, 0.1361915757158083, 0.11516920968260258, 0.14613427521767353, 0.22911290826525166, 0.151737800167288, 0.13880238662463684, 0.11119125394176244, 0.15544200383027185, 0.8743370348690453, 0.8867117120609392, 0.8202366863092585, 0.8639084180893842, 0.8941788249323595, 0.8082501977703898, 0.8544252756764904, 0.8543604125483817, 0.8888734804478887, 0.5744826161629303, 0.4990439103576192, 0.47197792815808515, 0.4514284564293579, 0.43521704856130194, 0.4696054848577018, 0.5437448683615151, 0.5310316375509425, 0.60035876775151, 0.22811658500048193, 0.8469526501122752, 0.8105368552861398, 0.8821213207203665, 0.2707250022530432, 0.8452292686281677, 0.7823594917233916, 0.6628786920221681, 0.7890969796028133, 0.4603532283884616, 0.3877592763404131, 0.268807891850954, 0.5132702592579393, 0.3009966760656976, 0.6399506148770595, 0.20807985059275258, 0.4445581216905875, 0.6181984321201806, 0.30942627605161355, 0.3326397968306458, 0.1608892210430629, 0.1749878119831747, 0.21524064113644759, 0.43136284441578276, 0.2842849611404469, 0.3014713077306115, 0.3247999997958966, 9.999999999998899e-05, 0.5420255724431384, 0.5167132287147271, 0.323623210693478, 0.5236202492560686, 0.03582664293776583, 0.4961863160446829, 0.5983685556635396, 0.48004169927687823, 0.5751253318349361, 0.6023216541096823, 0.6765215155203397, 0.09569981795327731, 0.1327458453878797, 0.06657917606497121, 0.3967835739020187, 0.6609248232643044, 0.39831270863378765, 0.0789125263977809, 0.25837529774824197, 0.14761951524700612, 0.26941640692550883, 0.37390483165996746, 0.22667063106565877, 0.14796595651761657, 0.1526360340075551, 0.26586715630625746, 0.401238492885285, 0.3016090297452153, 0.3927266672695702, 0.4099603080875881, 0.4161333248714256, 0.37792551322591217, 0.3724271730527302, 0.3498130471339609, 0.36362638907756284, 0.7476894586672209, 0.7643255296485678, 0.7551894266165657, 0.7664103654213383, 0.7428808778224834, 0.7324945902419097, 0.7456933441538313, 0.6885754212652295, 0.7580606973847237, 0.42811269293543086, 0.14023066925309902, 0.10670569028533317, 0.1406691271832491, 0.09772123272890199, 0.16371495763749244, 0.1326531405400656, 0.11788054082511534, 0.16773572817661409, 0.6868691877063224, 0.5713913005760239, 0.5309481753150553, 0.37953433688543214, 0.6106076061235983, 0.314816965812432, 0.1926880972945808, 0.5123652832968015, 0.5125182995620365, 0.4835676863453505, 0.4660311947908924, 0.4808107951434111, 0.5267577888222441, 0.48228727834468044, 0.503222362960514, 0.5096342561306109, 0.5134198656542641, 0.49642041101932943, 0.39478153057249354, 0.36527659798553924, 0.3749038312930758, 0.389917400507931, 0.3353589314285699, 0.3837320301256505, 0.40312839777059384, 0.391779303767258, 0.3847962728292338, 0.21026365337211628, 0.22614358433930037, 0.2218321701020638, 0.2250482954759514, 0.2030028089441399, 0.22166026096906555, 0.22894392952207965, 0.22843827879566903, 0.22141354291605542, 0.23948428157452517, 0.21788039690686845, 0.23209716514423484, 0.6323247915792307, 0.7276185432482504, 0.22753716020817816, 0.23116820489455325, 0.2095363873696986, 0.2383927323253613, 0.18727057050597484, 0.18533370685014028, 0.7980098114208879, 0.879165869841122, 0.8618013365217025, 0.1973429465049138, 0.8234543070425426, 0.8684006477823741, 0.8597041019336726, 0.7552653818676855, 0.21084529289173048, 0.7955936385588998, 0.208066081343396, 0.832113022434438, 0.16617950435428208, 0.7530512572127844, 0.7738087910020401, 0.15323970621043426, 0.19212286733565198, 0.18884072021162834, 0.18645151134852433, 0.2201990884926236, 0.1742758643179808, 0.18670923575454967, 0.1839366627946203, 0.17766393401910097, 0.1934857351664151, 0.10854033480544945, 0.07898219760305658, 0.0893484705276576, 0.10244739581337559, 0.08211042189359996, 0.08303260433089732, 0.0851538042370803, 0.09383507122744528, 0.0931642152883072]}, "mutation_prompt": null}
{"id": "b75030df-0106-46a9-846d-dc6dfe89540f", "solution": "import numpy as np\n\nclass Dynamic_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, pop_size=50, c1=2.0, c2=2.0, w=0.7, f=0.5, cr=0.9, p=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.c1 = c1\n        self.c2 = c2\n        self.w = w\n        self.f = f\n        self.cr = cr\n        self.p = p\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(ind) for ind in population])\n\n        def clip_bounds(population):\n            return np.clip(population, -5.0, 5.0)\n\n        def mutate(population, target_idx, f):\n            candidates = list(range(len(population)))\n            candidates.remove(target_idx)\n            a, b, c = np.random.choice(candidates, 3, replace=False)\n            mutant = population[a] + f * (population[b] - population[c])\n            return clip_bounds(mutant)\n\n        def adapt_f(population, target_idx, f):\n            if np.random.rand() < self.p:\n                f = np.random.uniform(0, 1)\n            return f\n\n        def adjust_f(population, f):\n            diversity = np.mean(np.std(population, axis=0))\n            f = f * np.exp(-self.p * diversity)\n            return f\n\n        def crossover(target, mutant):\n            trial = np.copy(target)\n            crossover_points = np.random.rand(self.dim) < self.cr\n            if not np.any(crossover_points):\n                crossover_points[np.random.randint(0, self.dim)] = True\n            trial[crossover_points] = mutant[crossover_points]\n            return trial\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                f = adapt_f(population, i, self.f)\n                f = adjust_f(population, f)  # New line for dynamic mutation factor adaptation\n                mutant = mutate(population, i, f)\n                trial = crossover(population[i], mutant)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n        return best_solution", "name": "Dynamic_DE_PSO_Optimizer", "description": "Improving DE_PSO_Optimizer by incorporating a dynamic mechanism to adjust the mutation factor based on population diversity to enhance exploration and exploitation.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b742edd6-ebfe-46f5-b50d-b45a1f6aad5f", "metadata": {"aucs": [0.8415483320083317, 0.7873734851969789, 0.8208808188951524, 0.7968317770074933, 0.8325281512880215, 0.8272777054416194, 0.8271262860501101, 0.8323831676002205, 0.8181720814009356, 0.7175307743728203, 0.72130816045329, 0.6856890470051182, 0.7013491858505024, 0.7188101000831255, 0.7058090837628903, 0.7005074414011923, 0.7166751413437723, 0.13248636011923154, 0.4481775897642457, 0.16102923138644654, 0.4367880666108337, 0.3219191331850335, 0.1509365529628116, 0.377243101950949, 0.4095006832910977, 0.44595334805735665, 0.15532262200074187, 0.13809757285034396, 0.1361915757158083, 0.11516920968260258, 0.14613427521767353, 0.22911290826525166, 0.151737800167288, 0.13880238662463684, 0.11119125394176244, 0.15544200383027185, 0.8743370348690453, 0.8867117120609392, 0.8202366863092585, 0.8639084180893842, 0.8941788249323595, 0.8082501977703898, 0.8544252756764904, 0.8543604125483817, 0.8888734804478887, 0.5744826161629303, 0.4990439103576192, 0.47197792815808515, 0.4514284564293579, 0.43521704856130194, 0.4696054848577018, 0.5437448683615151, 0.5310316375509425, 0.60035876775151, 0.22811658500048193, 0.8469526501122752, 0.8105368552861398, 0.8821213207203665, 0.2707250022530432, 0.8452292686281677, 0.7823594917233916, 0.6628786920221681, 0.7890969796028133, 0.4603532283884616, 0.3877592763404131, 0.268807891850954, 0.5132702592579393, 0.3009966760656976, 0.6399506148770595, 0.20807985059275258, 0.4445581216905875, 0.6181984321201806, 0.30942627605161355, 0.3326397968306458, 0.1608892210430629, 0.1749878119831747, 0.21524064113644759, 0.43136284441578276, 0.2842849611404469, 0.3014713077306115, 0.3247999997958966, 9.999999999998899e-05, 0.5420255724431384, 0.5167132287147271, 0.323623210693478, 0.5236202492560686, 0.03582664293776583, 0.4961863160446829, 0.5983685556635396, 0.48004169927687823, 0.5751253318349361, 0.6023216541096823, 0.6765215155203397, 0.09569981795327731, 0.1327458453878797, 0.06657917606497121, 0.3967835739020187, 0.6609248232643044, 0.39831270863378765, 0.0789125263977809, 0.25837529774824197, 0.14761951524700612, 0.26941640692550883, 0.37390483165996746, 0.22667063106565877, 0.14796595651761657, 0.1526360340075551, 0.26586715630625746, 0.401238492885285, 0.3016090297452153, 0.3927266672695702, 0.4099603080875881, 0.4161333248714256, 0.37792551322591217, 0.3724271730527302, 0.3498130471339609, 0.36362638907756284, 0.7476894586672209, 0.7643255296485678, 0.7551894266165657, 0.7664103654213383, 0.7428808778224834, 0.7324945902419097, 0.7456933441538313, 0.6885754212652295, 0.7580606973847237, 0.42811269293543086, 0.14023066925309902, 0.10670569028533317, 0.1406691271832491, 0.09772123272890199, 0.16371495763749244, 0.1326531405400656, 0.11788054082511534, 0.16773572817661409, 0.6868691877063224, 0.5713913005760239, 0.5309481753150553, 0.37953433688543214, 0.6106076061235983, 0.314816965812432, 0.1926880972945808, 0.5123652832968015, 0.5125182995620365, 0.4835676863453505, 0.4660311947908924, 0.4808107951434111, 0.5267577888222441, 0.48228727834468044, 0.503222362960514, 0.5096342561306109, 0.5134198656542641, 0.49642041101932943, 0.39478153057249354, 0.36527659798553924, 0.3749038312930758, 0.389917400507931, 0.3353589314285699, 0.3837320301256505, 0.40312839777059384, 0.391779303767258, 0.3847962728292338, 0.21026365337211628, 0.22614358433930037, 0.2218321701020638, 0.2250482954759514, 0.2030028089441399, 0.22166026096906555, 0.22894392952207965, 0.22843827879566903, 0.22141354291605542, 0.23948428157452517, 0.21788039690686845, 0.23209716514423484, 0.6323247915792307, 0.7276185432482504, 0.22753716020817816, 0.23116820489455325, 0.2095363873696986, 0.2383927323253613, 0.18727057050597484, 0.18533370685014028, 0.7980098114208879, 0.879165869841122, 0.8618013365217025, 0.1973429465049138, 0.8234543070425426, 0.8684006477823741, 0.8597041019336726, 0.7552653818676855, 0.21084529289173048, 0.7955936385588998, 0.208066081343396, 0.832113022434438, 0.16617950435428208, 0.7530512572127844, 0.7738087910020401, 0.15323970621043426, 0.19212286733565198, 0.18884072021162834, 0.18645151134852433, 0.2201990884926236, 0.1742758643179808, 0.18670923575454967, 0.1839366627946203, 0.17766393401910097, 0.1934857351664151, 0.10854033480544945, 0.07898219760305658, 0.0893484705276576, 0.10244739581337559, 0.08211042189359996, 0.08303260433089732, 0.0851538042370803, 0.09383507122744528, 0.0931642152883072]}, "mutation_prompt": null}
{"id": "9142cec6-8f5c-43a4-9971-c6df9dc25a4e", "solution": "import numpy as np\n\nclass Dynamic_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, pop_size=50, c1=2.0, c2=2.0, w=0.7, f=0.5, cr=0.9, p=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.c1 = c1\n        self.c2 = c2\n        self.w = w\n        self.f = f\n        self.cr = cr\n        self.p = p\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(ind) for ind in population])\n\n        def clip_bounds(population):\n            return np.clip(population, -5.0, 5.0)\n\n        def mutate(population, target_idx, f):\n            candidates = list(range(len(population)))\n            candidates.remove(target_idx)\n            a, b, c = np.random.choice(candidates, 3, replace=False)\n            mutant = population[a] + f * (population[b] - population[c])\n            return clip_bounds(mutant)\n\n        def adapt_f(population, target_idx, f):\n            if np.random.rand() < self.p:\n                f = np.random.uniform(0, 1)\n            return f\n\n        def adjust_f(population, f):\n            diversity = np.mean(np.std(population, axis=0))\n            f = f * np.exp(-self.p * diversity)\n            return f\n\n        def crossover(target, mutant):\n            trial = np.copy(target)\n            crossover_points = np.random.rand(self.dim) < self.cr\n            if not np.any(crossover_points):\n                crossover_points[np.random.randint(0, self.dim)] = True\n            trial[crossover_points] = mutant[crossover_points]\n            return trial\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                f = adapt_f(population, i, self.f)\n                f = adjust_f(population, f)  # New line for dynamic mutation factor adaptation\n                mutant = mutate(population, i, f)\n                trial = crossover(population[i], mutant)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n        return best_solution", "name": "Dynamic_DE_PSO_Optimizer", "description": "Improving DE_PSO_Optimizer by incorporating a dynamic mechanism to adjust the mutation factor based on population diversity to enhance exploration and exploitation.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b742edd6-ebfe-46f5-b50d-b45a1f6aad5f", "metadata": {"aucs": [0.8415483320083317, 0.7873734851969789, 0.8208808188951524, 0.7968317770074933, 0.8325281512880215, 0.8272777054416194, 0.8271262860501101, 0.8323831676002205, 0.8181720814009356, 0.7175307743728203, 0.72130816045329, 0.6856890470051182, 0.7013491858505024, 0.7188101000831255, 0.7058090837628903, 0.7005074414011923, 0.7166751413437723, 0.13248636011923154, 0.4481775897642457, 0.16102923138644654, 0.4367880666108337, 0.3219191331850335, 0.1509365529628116, 0.377243101950949, 0.4095006832910977, 0.44595334805735665, 0.15532262200074187, 0.13809757285034396, 0.1361915757158083, 0.11516920968260258, 0.14613427521767353, 0.22911290826525166, 0.151737800167288, 0.13880238662463684, 0.11119125394176244, 0.15544200383027185, 0.8743370348690453, 0.8867117120609392, 0.8202366863092585, 0.8639084180893842, 0.8941788249323595, 0.8082501977703898, 0.8544252756764904, 0.8543604125483817, 0.8888734804478887, 0.5744826161629303, 0.4990439103576192, 0.47197792815808515, 0.4514284564293579, 0.43521704856130194, 0.4696054848577018, 0.5437448683615151, 0.5310316375509425, 0.60035876775151, 0.22811658500048193, 0.8469526501122752, 0.8105368552861398, 0.8821213207203665, 0.2707250022530432, 0.8452292686281677, 0.7823594917233916, 0.6628786920221681, 0.7890969796028133, 0.4603532283884616, 0.3877592763404131, 0.268807891850954, 0.5132702592579393, 0.3009966760656976, 0.6399506148770595, 0.20807985059275258, 0.4445581216905875, 0.6181984321201806, 0.30942627605161355, 0.3326397968306458, 0.1608892210430629, 0.1749878119831747, 0.21524064113644759, 0.43136284441578276, 0.2842849611404469, 0.3014713077306115, 0.3247999997958966, 9.999999999998899e-05, 0.5420255724431384, 0.5167132287147271, 0.323623210693478, 0.5236202492560686, 0.03582664293776583, 0.4961863160446829, 0.5983685556635396, 0.48004169927687823, 0.5751253318349361, 0.6023216541096823, 0.6765215155203397, 0.09569981795327731, 0.1327458453878797, 0.06657917606497121, 0.3967835739020187, 0.6609248232643044, 0.39831270863378765, 0.0789125263977809, 0.25837529774824197, 0.14761951524700612, 0.26941640692550883, 0.37390483165996746, 0.22667063106565877, 0.14796595651761657, 0.1526360340075551, 0.26586715630625746, 0.401238492885285, 0.3016090297452153, 0.3927266672695702, 0.4099603080875881, 0.4161333248714256, 0.37792551322591217, 0.3724271730527302, 0.3498130471339609, 0.36362638907756284, 0.7476894586672209, 0.7643255296485678, 0.7551894266165657, 0.7664103654213383, 0.7428808778224834, 0.7324945902419097, 0.7456933441538313, 0.6885754212652295, 0.7580606973847237, 0.42811269293543086, 0.14023066925309902, 0.10670569028533317, 0.1406691271832491, 0.09772123272890199, 0.16371495763749244, 0.1326531405400656, 0.11788054082511534, 0.16773572817661409, 0.6868691877063224, 0.5713913005760239, 0.5309481753150553, 0.37953433688543214, 0.6106076061235983, 0.314816965812432, 0.1926880972945808, 0.5123652832968015, 0.5125182995620365, 0.4835676863453505, 0.4660311947908924, 0.4808107951434111, 0.5267577888222441, 0.48228727834468044, 0.503222362960514, 0.5096342561306109, 0.5134198656542641, 0.49642041101932943, 0.39478153057249354, 0.36527659798553924, 0.3749038312930758, 0.389917400507931, 0.3353589314285699, 0.3837320301256505, 0.40312839777059384, 0.391779303767258, 0.3847962728292338, 0.21026365337211628, 0.22614358433930037, 0.2218321701020638, 0.2250482954759514, 0.2030028089441399, 0.22166026096906555, 0.22894392952207965, 0.22843827879566903, 0.22141354291605542, 0.23948428157452517, 0.21788039690686845, 0.23209716514423484, 0.6323247915792307, 0.7276185432482504, 0.22753716020817816, 0.23116820489455325, 0.2095363873696986, 0.2383927323253613, 0.18727057050597484, 0.18533370685014028, 0.7980098114208879, 0.879165869841122, 0.8618013365217025, 0.1973429465049138, 0.8234543070425426, 0.8684006477823741, 0.8597041019336726, 0.7552653818676855, 0.21084529289173048, 0.7955936385588998, 0.208066081343396, 0.832113022434438, 0.16617950435428208, 0.7530512572127844, 0.7738087910020401, 0.15323970621043426, 0.19212286733565198, 0.18884072021162834, 0.18645151134852433, 0.2201990884926236, 0.1742758643179808, 0.18670923575454967, 0.1839366627946203, 0.17766393401910097, 0.1934857351664151, 0.10854033480544945, 0.07898219760305658, 0.0893484705276576, 0.10244739581337559, 0.08211042189359996, 0.08303260433089732, 0.0851538042370803, 0.09383507122744528, 0.0931642152883072]}, "mutation_prompt": null}
{"id": "2af12b61-9c1f-4bf5-b635-d781985aff31", "solution": "import numpy as np\n\nclass Dynamic_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, pop_size=50, c1=2.0, c2=2.0, w=0.7, f=0.5, cr=0.9, p=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.c1 = c1\n        self.c2 = c2\n        self.w = w\n        self.f = f\n        self.cr = cr\n        self.p = p\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(ind) for ind in population])\n\n        def clip_bounds(population):\n            return np.clip(population, -5.0, 5.0)\n\n        def mutate(population, target_idx, f):\n            candidates = list(range(len(population)))\n            candidates.remove(target_idx)\n            a, b, c = np.random.choice(candidates, 3, replace=False)\n            mutant = population[a] + f * (population[b] - population[c])\n            return clip_bounds(mutant)\n\n        def adapt_f(population, target_idx, f):\n            if np.random.rand() < self.p:\n                f = np.random.uniform(0, 1)\n            return f\n\n        def adjust_f(population, f):\n            diversity = np.mean(np.std(population, axis=0))\n            f = f * np.exp(-self.p * diversity)\n            return f\n\n        def crossover(target, mutant):\n            trial = np.copy(target)\n            crossover_points = np.random.rand(self.dim) < self.cr\n            if not np.any(crossover_points):\n                crossover_points[np.random.randint(0, self.dim)] = True\n            trial[crossover_points] = mutant[crossover_points]\n            return trial\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                f = adapt_f(population, i, self.f)\n                f = adjust_f(population, f)  # New line for dynamic mutation factor adaptation\n                mutant = mutate(population, i, f)\n                trial = crossover(population[i], mutant)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n        return best_solution", "name": "Dynamic_DE_PSO_Optimizer", "description": "Improving DE_PSO_Optimizer by incorporating a dynamic mechanism to adjust the mutation factor based on population diversity to enhance exploration and exploitation.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b742edd6-ebfe-46f5-b50d-b45a1f6aad5f", "metadata": {"aucs": [0.8415483320083317, 0.7873734851969789, 0.8208808188951524, 0.7968317770074933, 0.8325281512880215, 0.8272777054416194, 0.8271262860501101, 0.8323831676002205, 0.8181720814009356, 0.7175307743728203, 0.72130816045329, 0.6856890470051182, 0.7013491858505024, 0.7188101000831255, 0.7058090837628903, 0.7005074414011923, 0.7166751413437723, 0.13248636011923154, 0.4481775897642457, 0.16102923138644654, 0.4367880666108337, 0.3219191331850335, 0.1509365529628116, 0.377243101950949, 0.4095006832910977, 0.44595334805735665, 0.15532262200074187, 0.13809757285034396, 0.1361915757158083, 0.11516920968260258, 0.14613427521767353, 0.22911290826525166, 0.151737800167288, 0.13880238662463684, 0.11119125394176244, 0.15544200383027185, 0.8743370348690453, 0.8867117120609392, 0.8202366863092585, 0.8639084180893842, 0.8941788249323595, 0.8082501977703898, 0.8544252756764904, 0.8543604125483817, 0.8888734804478887, 0.5744826161629303, 0.4990439103576192, 0.47197792815808515, 0.4514284564293579, 0.43521704856130194, 0.4696054848577018, 0.5437448683615151, 0.5310316375509425, 0.60035876775151, 0.22811658500048193, 0.8469526501122752, 0.8105368552861398, 0.8821213207203665, 0.2707250022530432, 0.8452292686281677, 0.7823594917233916, 0.6628786920221681, 0.7890969796028133, 0.4603532283884616, 0.3877592763404131, 0.268807891850954, 0.5132702592579393, 0.3009966760656976, 0.6399506148770595, 0.20807985059275258, 0.4445581216905875, 0.6181984321201806, 0.30942627605161355, 0.3326397968306458, 0.1608892210430629, 0.1749878119831747, 0.21524064113644759, 0.43136284441578276, 0.2842849611404469, 0.3014713077306115, 0.3247999997958966, 9.999999999998899e-05, 0.5420255724431384, 0.5167132287147271, 0.323623210693478, 0.5236202492560686, 0.03582664293776583, 0.4961863160446829, 0.5983685556635396, 0.48004169927687823, 0.5751253318349361, 0.6023216541096823, 0.6765215155203397, 0.09569981795327731, 0.1327458453878797, 0.06657917606497121, 0.3967835739020187, 0.6609248232643044, 0.39831270863378765, 0.0789125263977809, 0.25837529774824197, 0.14761951524700612, 0.26941640692550883, 0.37390483165996746, 0.22667063106565877, 0.14796595651761657, 0.1526360340075551, 0.26586715630625746, 0.401238492885285, 0.3016090297452153, 0.3927266672695702, 0.4099603080875881, 0.4161333248714256, 0.37792551322591217, 0.3724271730527302, 0.3498130471339609, 0.36362638907756284, 0.7476894586672209, 0.7643255296485678, 0.7551894266165657, 0.7664103654213383, 0.7428808778224834, 0.7324945902419097, 0.7456933441538313, 0.6885754212652295, 0.7580606973847237, 0.42811269293543086, 0.14023066925309902, 0.10670569028533317, 0.1406691271832491, 0.09772123272890199, 0.16371495763749244, 0.1326531405400656, 0.11788054082511534, 0.16773572817661409, 0.6868691877063224, 0.5713913005760239, 0.5309481753150553, 0.37953433688543214, 0.6106076061235983, 0.314816965812432, 0.1926880972945808, 0.5123652832968015, 0.5125182995620365, 0.4835676863453505, 0.4660311947908924, 0.4808107951434111, 0.5267577888222441, 0.48228727834468044, 0.503222362960514, 0.5096342561306109, 0.5134198656542641, 0.49642041101932943, 0.39478153057249354, 0.36527659798553924, 0.3749038312930758, 0.389917400507931, 0.3353589314285699, 0.3837320301256505, 0.40312839777059384, 0.391779303767258, 0.3847962728292338, 0.21026365337211628, 0.22614358433930037, 0.2218321701020638, 0.2250482954759514, 0.2030028089441399, 0.22166026096906555, 0.22894392952207965, 0.22843827879566903, 0.22141354291605542, 0.23948428157452517, 0.21788039690686845, 0.23209716514423484, 0.6323247915792307, 0.7276185432482504, 0.22753716020817816, 0.23116820489455325, 0.2095363873696986, 0.2383927323253613, 0.18727057050597484, 0.18533370685014028, 0.7980098114208879, 0.879165869841122, 0.8618013365217025, 0.1973429465049138, 0.8234543070425426, 0.8684006477823741, 0.8597041019336726, 0.7552653818676855, 0.21084529289173048, 0.7955936385588998, 0.208066081343396, 0.832113022434438, 0.16617950435428208, 0.7530512572127844, 0.7738087910020401, 0.15323970621043426, 0.19212286733565198, 0.18884072021162834, 0.18645151134852433, 0.2201990884926236, 0.1742758643179808, 0.18670923575454967, 0.1839366627946203, 0.17766393401910097, 0.1934857351664151, 0.10854033480544945, 0.07898219760305658, 0.0893484705276576, 0.10244739581337559, 0.08211042189359996, 0.08303260433089732, 0.0851538042370803, 0.09383507122744528, 0.0931642152883072]}, "mutation_prompt": null}
{"id": "d3dbf071-4f44-4d1e-afa2-3ca3380a4ee9", "solution": "import numpy as np\n\nclass Dynamic_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, pop_size=50, c1=2.0, c2=2.0, w=0.7, f=0.5, cr=0.9, p=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.c1 = c1\n        self.c2 = c2\n        self.w = w\n        self.f = f\n        self.cr = cr\n        self.p = p\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(ind) for ind in population])\n\n        def clip_bounds(population):\n            return np.clip(population, -5.0, 5.0)\n\n        def mutate(population, target_idx, f):\n            candidates = list(range(len(population)))\n            candidates.remove(target_idx)\n            a, b, c = np.random.choice(candidates, 3, replace=False)\n            mutant = population[a] + f * (population[b] - population[c])\n            return clip_bounds(mutant)\n\n        def adapt_f(population, target_idx, f):\n            if np.random.rand() < self.p:\n                f = np.random.uniform(0, 1)\n            return f\n\n        def adjust_f(population, f):\n            diversity = np.mean(np.std(population, axis=0))\n            f = f * np.exp(-self.p * diversity)\n            return f\n\n        def crossover(target, mutant):\n            trial = np.copy(target)\n            crossover_points = np.random.rand(self.dim) < self.cr\n            if not np.any(crossover_points):\n                crossover_points[np.random.randint(0, self.dim)] = True\n            trial[crossover_points] = mutant[crossover_points]\n            return trial\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                f = adapt_f(population, i, self.f)\n                f = adjust_f(population, f)  # New line for dynamic mutation factor adaptation\n                mutant = mutate(population, i, f)\n                trial = crossover(population[i], mutant)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n        return best_solution", "name": "Dynamic_DE_PSO_Optimizer", "description": "Improving DE_PSO_Optimizer by incorporating a dynamic mechanism to adjust the mutation factor based on population diversity to enhance exploration and exploitation.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b742edd6-ebfe-46f5-b50d-b45a1f6aad5f", "metadata": {"aucs": [0.8415483320083317, 0.7873734851969789, 0.8208808188951524, 0.7968317770074933, 0.8325281512880215, 0.8272777054416194, 0.8271262860501101, 0.8323831676002205, 0.8181720814009356, 0.7175307743728203, 0.72130816045329, 0.6856890470051182, 0.7013491858505024, 0.7188101000831255, 0.7058090837628903, 0.7005074414011923, 0.7166751413437723, 0.13248636011923154, 0.4481775897642457, 0.16102923138644654, 0.4367880666108337, 0.3219191331850335, 0.1509365529628116, 0.377243101950949, 0.4095006832910977, 0.44595334805735665, 0.15532262200074187, 0.13809757285034396, 0.1361915757158083, 0.11516920968260258, 0.14613427521767353, 0.22911290826525166, 0.151737800167288, 0.13880238662463684, 0.11119125394176244, 0.15544200383027185, 0.8743370348690453, 0.8867117120609392, 0.8202366863092585, 0.8639084180893842, 0.8941788249323595, 0.8082501977703898, 0.8544252756764904, 0.8543604125483817, 0.8888734804478887, 0.5744826161629303, 0.4990439103576192, 0.47197792815808515, 0.4514284564293579, 0.43521704856130194, 0.4696054848577018, 0.5437448683615151, 0.5310316375509425, 0.60035876775151, 0.22811658500048193, 0.8469526501122752, 0.8105368552861398, 0.8821213207203665, 0.2707250022530432, 0.8452292686281677, 0.7823594917233916, 0.6628786920221681, 0.7890969796028133, 0.4603532283884616, 0.3877592763404131, 0.268807891850954, 0.5132702592579393, 0.3009966760656976, 0.6399506148770595, 0.20807985059275258, 0.4445581216905875, 0.6181984321201806, 0.30942627605161355, 0.3326397968306458, 0.1608892210430629, 0.1749878119831747, 0.21524064113644759, 0.43136284441578276, 0.2842849611404469, 0.3014713077306115, 0.3247999997958966, 9.999999999998899e-05, 0.5420255724431384, 0.5167132287147271, 0.323623210693478, 0.5236202492560686, 0.03582664293776583, 0.4961863160446829, 0.5983685556635396, 0.48004169927687823, 0.5751253318349361, 0.6023216541096823, 0.6765215155203397, 0.09569981795327731, 0.1327458453878797, 0.06657917606497121, 0.3967835739020187, 0.6609248232643044, 0.39831270863378765, 0.0789125263977809, 0.25837529774824197, 0.14761951524700612, 0.26941640692550883, 0.37390483165996746, 0.22667063106565877, 0.14796595651761657, 0.1526360340075551, 0.26586715630625746, 0.401238492885285, 0.3016090297452153, 0.3927266672695702, 0.4099603080875881, 0.4161333248714256, 0.37792551322591217, 0.3724271730527302, 0.3498130471339609, 0.36362638907756284, 0.7476894586672209, 0.7643255296485678, 0.7551894266165657, 0.7664103654213383, 0.7428808778224834, 0.7324945902419097, 0.7456933441538313, 0.6885754212652295, 0.7580606973847237, 0.42811269293543086, 0.14023066925309902, 0.10670569028533317, 0.1406691271832491, 0.09772123272890199, 0.16371495763749244, 0.1326531405400656, 0.11788054082511534, 0.16773572817661409, 0.6868691877063224, 0.5713913005760239, 0.5309481753150553, 0.37953433688543214, 0.6106076061235983, 0.314816965812432, 0.1926880972945808, 0.5123652832968015, 0.5125182995620365, 0.4835676863453505, 0.4660311947908924, 0.4808107951434111, 0.5267577888222441, 0.48228727834468044, 0.503222362960514, 0.5096342561306109, 0.5134198656542641, 0.49642041101932943, 0.39478153057249354, 0.36527659798553924, 0.3749038312930758, 0.389917400507931, 0.3353589314285699, 0.3837320301256505, 0.40312839777059384, 0.391779303767258, 0.3847962728292338, 0.21026365337211628, 0.22614358433930037, 0.2218321701020638, 0.2250482954759514, 0.2030028089441399, 0.22166026096906555, 0.22894392952207965, 0.22843827879566903, 0.22141354291605542, 0.23948428157452517, 0.21788039690686845, 0.23209716514423484, 0.6323247915792307, 0.7276185432482504, 0.22753716020817816, 0.23116820489455325, 0.2095363873696986, 0.2383927323253613, 0.18727057050597484, 0.18533370685014028, 0.7980098114208879, 0.879165869841122, 0.8618013365217025, 0.1973429465049138, 0.8234543070425426, 0.8684006477823741, 0.8597041019336726, 0.7552653818676855, 0.21084529289173048, 0.7955936385588998, 0.208066081343396, 0.832113022434438, 0.16617950435428208, 0.7530512572127844, 0.7738087910020401, 0.15323970621043426, 0.19212286733565198, 0.18884072021162834, 0.18645151134852433, 0.2201990884926236, 0.1742758643179808, 0.18670923575454967, 0.1839366627946203, 0.17766393401910097, 0.1934857351664151, 0.10854033480544945, 0.07898219760305658, 0.0893484705276576, 0.10244739581337559, 0.08211042189359996, 0.08303260433089732, 0.0851538042370803, 0.09383507122744528, 0.0931642152883072]}, "mutation_prompt": null}
{"id": "3b01017b-11fc-4c16-b580-d71c0bc53048", "solution": "import numpy as np\n\nclass Dynamic_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, pop_size=50, c1=2.0, c2=2.0, w=0.7, f=0.5, cr=0.9, p=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.c1 = c1\n        self.c2 = c2\n        self.w = w\n        self.f = f\n        self.cr = cr\n        self.p = p\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(ind) for ind in population])\n\n        def clip_bounds(population):\n            return np.clip(population, -5.0, 5.0)\n\n        def mutate(population, target_idx, f):\n            candidates = list(range(len(population)))\n            candidates.remove(target_idx)\n            a, b, c = np.random.choice(candidates, 3, replace=False)\n            mutant = population[a] + f * (population[b] - population[c])\n            return clip_bounds(mutant)\n\n        def adapt_f(population, target_idx, f):\n            if np.random.rand() < self.p:\n                f = np.random.uniform(0, 1)\n            return f\n\n        def adjust_f(population, f):\n            diversity = np.mean(np.std(population, axis=0))\n            f = f * np.exp(-self.p * diversity)\n            return f\n\n        def crossover(target, mutant):\n            trial = np.copy(target)\n            crossover_points = np.random.rand(self.dim) < self.cr\n            if not np.any(crossover_points):\n                crossover_points[np.random.randint(0, self.dim)] = True\n            trial[crossover_points] = mutant[crossover_points]\n            return trial\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                f = adapt_f(population, i, self.f)\n                f = adjust_f(population, f)  # New line for dynamic mutation factor adaptation\n                mutant = mutate(population, i, f)\n                trial = crossover(population[i], mutant)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n        return best_solution", "name": "Dynamic_DE_PSO_Optimizer", "description": "Improving DE_PSO_Optimizer by incorporating a dynamic mechanism to adjust the mutation factor based on population diversity to enhance exploration and exploitation.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b742edd6-ebfe-46f5-b50d-b45a1f6aad5f", "metadata": {"aucs": [0.8415483320083317, 0.7873734851969789, 0.8208808188951524, 0.7968317770074933, 0.8325281512880215, 0.8272777054416194, 0.8271262860501101, 0.8323831676002205, 0.8181720814009356, 0.7175307743728203, 0.72130816045329, 0.6856890470051182, 0.7013491858505024, 0.7188101000831255, 0.7058090837628903, 0.7005074414011923, 0.7166751413437723, 0.13248636011923154, 0.4481775897642457, 0.16102923138644654, 0.4367880666108337, 0.3219191331850335, 0.1509365529628116, 0.377243101950949, 0.4095006832910977, 0.44595334805735665, 0.15532262200074187, 0.13809757285034396, 0.1361915757158083, 0.11516920968260258, 0.14613427521767353, 0.22911290826525166, 0.151737800167288, 0.13880238662463684, 0.11119125394176244, 0.15544200383027185, 0.8743370348690453, 0.8867117120609392, 0.8202366863092585, 0.8639084180893842, 0.8941788249323595, 0.8082501977703898, 0.8544252756764904, 0.8543604125483817, 0.8888734804478887, 0.5744826161629303, 0.4990439103576192, 0.47197792815808515, 0.4514284564293579, 0.43521704856130194, 0.4696054848577018, 0.5437448683615151, 0.5310316375509425, 0.60035876775151, 0.22811658500048193, 0.8469526501122752, 0.8105368552861398, 0.8821213207203665, 0.2707250022530432, 0.8452292686281677, 0.7823594917233916, 0.6628786920221681, 0.7890969796028133, 0.4603532283884616, 0.3877592763404131, 0.268807891850954, 0.5132702592579393, 0.3009966760656976, 0.6399506148770595, 0.20807985059275258, 0.4445581216905875, 0.6181984321201806, 0.30942627605161355, 0.3326397968306458, 0.1608892210430629, 0.1749878119831747, 0.21524064113644759, 0.43136284441578276, 0.2842849611404469, 0.3014713077306115, 0.3247999997958966, 9.999999999998899e-05, 0.5420255724431384, 0.5167132287147271, 0.323623210693478, 0.5236202492560686, 0.03582664293776583, 0.4961863160446829, 0.5983685556635396, 0.48004169927687823, 0.5751253318349361, 0.6023216541096823, 0.6765215155203397, 0.09569981795327731, 0.1327458453878797, 0.06657917606497121, 0.3967835739020187, 0.6609248232643044, 0.39831270863378765, 0.0789125263977809, 0.25837529774824197, 0.14761951524700612, 0.26941640692550883, 0.37390483165996746, 0.22667063106565877, 0.14796595651761657, 0.1526360340075551, 0.26586715630625746, 0.401238492885285, 0.3016090297452153, 0.3927266672695702, 0.4099603080875881, 0.4161333248714256, 0.37792551322591217, 0.3724271730527302, 0.3498130471339609, 0.36362638907756284, 0.7476894586672209, 0.7643255296485678, 0.7551894266165657, 0.7664103654213383, 0.7428808778224834, 0.7324945902419097, 0.7456933441538313, 0.6885754212652295, 0.7580606973847237, 0.42811269293543086, 0.14023066925309902, 0.10670569028533317, 0.1406691271832491, 0.09772123272890199, 0.16371495763749244, 0.1326531405400656, 0.11788054082511534, 0.16773572817661409, 0.6868691877063224, 0.5713913005760239, 0.5309481753150553, 0.37953433688543214, 0.6106076061235983, 0.314816965812432, 0.1926880972945808, 0.5123652832968015, 0.5125182995620365, 0.4835676863453505, 0.4660311947908924, 0.4808107951434111, 0.5267577888222441, 0.48228727834468044, 0.503222362960514, 0.5096342561306109, 0.5134198656542641, 0.49642041101932943, 0.39478153057249354, 0.36527659798553924, 0.3749038312930758, 0.389917400507931, 0.3353589314285699, 0.3837320301256505, 0.40312839777059384, 0.391779303767258, 0.3847962728292338, 0.21026365337211628, 0.22614358433930037, 0.2218321701020638, 0.2250482954759514, 0.2030028089441399, 0.22166026096906555, 0.22894392952207965, 0.22843827879566903, 0.22141354291605542, 0.23948428157452517, 0.21788039690686845, 0.23209716514423484, 0.6323247915792307, 0.7276185432482504, 0.22753716020817816, 0.23116820489455325, 0.2095363873696986, 0.2383927323253613, 0.18727057050597484, 0.18533370685014028, 0.7980098114208879, 0.879165869841122, 0.8618013365217025, 0.1973429465049138, 0.8234543070425426, 0.8684006477823741, 0.8597041019336726, 0.7552653818676855, 0.21084529289173048, 0.7955936385588998, 0.208066081343396, 0.832113022434438, 0.16617950435428208, 0.7530512572127844, 0.7738087910020401, 0.15323970621043426, 0.19212286733565198, 0.18884072021162834, 0.18645151134852433, 0.2201990884926236, 0.1742758643179808, 0.18670923575454967, 0.1839366627946203, 0.17766393401910097, 0.1934857351664151, 0.10854033480544945, 0.07898219760305658, 0.0893484705276576, 0.10244739581337559, 0.08211042189359996, 0.08303260433089732, 0.0851538042370803, 0.09383507122744528, 0.0931642152883072]}, "mutation_prompt": null}
{"id": "8f0fe16a-29ef-42ea-88e6-4c3359552f5e", "solution": "import numpy as np\n\nclass Dynamic_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, pop_size=50, c1=2.0, c2=2.0, w=0.7, f=0.5, cr=0.9, p=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.c1 = c1\n        self.c2 = c2\n        self.w = w\n        self.f = f\n        self.cr = cr\n        self.p = p\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(ind) for ind in population])\n\n        def clip_bounds(population):\n            return np.clip(population, -5.0, 5.0)\n\n        def mutate(population, target_idx, f):\n            candidates = list(range(len(population)))\n            candidates.remove(target_idx)\n            a, b, c = np.random.choice(candidates, 3, replace=False)\n            mutant = population[a] + f * (population[b] - population[c])\n            return clip_bounds(mutant)\n\n        def adapt_f(population, target_idx, f):\n            if np.random.rand() < self.p:\n                f = np.random.uniform(0, 1)\n            return f\n\n        def adjust_f(population, f):\n            diversity = np.mean(np.std(population, axis=0))\n            f = f * np.exp(-self.p * diversity)\n            return f\n\n        def crossover(target, mutant):\n            trial = np.copy(target)\n            crossover_points = np.random.rand(self.dim) < self.cr\n            if not np.any(crossover_points):\n                crossover_points[np.random.randint(0, self.dim)] = True\n            trial[crossover_points] = mutant[crossover_points]\n            return trial\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                f = adapt_f(population, i, self.f)\n                f = adjust_f(population, f)  # New line for dynamic mutation factor adaptation\n                mutant = mutate(population, i, f)\n                trial = crossover(population[i], mutant)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n        return best_solution", "name": "Dynamic_DE_PSO_Optimizer", "description": "Improving DE_PSO_Optimizer by incorporating a dynamic mechanism to adjust the mutation factor based on population diversity to enhance exploration and exploitation.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b742edd6-ebfe-46f5-b50d-b45a1f6aad5f", "metadata": {"aucs": [0.8415483320083317, 0.7873734851969789, 0.8208808188951524, 0.7968317770074933, 0.8325281512880215, 0.8272777054416194, 0.8271262860501101, 0.8323831676002205, 0.8181720814009356, 0.7175307743728203, 0.72130816045329, 0.6856890470051182, 0.7013491858505024, 0.7188101000831255, 0.7058090837628903, 0.7005074414011923, 0.7166751413437723, 0.13248636011923154, 0.4481775897642457, 0.16102923138644654, 0.4367880666108337, 0.3219191331850335, 0.1509365529628116, 0.377243101950949, 0.4095006832910977, 0.44595334805735665, 0.15532262200074187, 0.13809757285034396, 0.1361915757158083, 0.11516920968260258, 0.14613427521767353, 0.22911290826525166, 0.151737800167288, 0.13880238662463684, 0.11119125394176244, 0.15544200383027185, 0.8743370348690453, 0.8867117120609392, 0.8202366863092585, 0.8639084180893842, 0.8941788249323595, 0.8082501977703898, 0.8544252756764904, 0.8543604125483817, 0.8888734804478887, 0.5744826161629303, 0.4990439103576192, 0.47197792815808515, 0.4514284564293579, 0.43521704856130194, 0.4696054848577018, 0.5437448683615151, 0.5310316375509425, 0.60035876775151, 0.22811658500048193, 0.8469526501122752, 0.8105368552861398, 0.8821213207203665, 0.2707250022530432, 0.8452292686281677, 0.7823594917233916, 0.6628786920221681, 0.7890969796028133, 0.4603532283884616, 0.3877592763404131, 0.268807891850954, 0.5132702592579393, 0.3009966760656976, 0.6399506148770595, 0.20807985059275258, 0.4445581216905875, 0.6181984321201806, 0.30942627605161355, 0.3326397968306458, 0.1608892210430629, 0.1749878119831747, 0.21524064113644759, 0.43136284441578276, 0.2842849611404469, 0.3014713077306115, 0.3247999997958966, 9.999999999998899e-05, 0.5420255724431384, 0.5167132287147271, 0.323623210693478, 0.5236202492560686, 0.03582664293776583, 0.4961863160446829, 0.5983685556635396, 0.48004169927687823, 0.5751253318349361, 0.6023216541096823, 0.6765215155203397, 0.09569981795327731, 0.1327458453878797, 0.06657917606497121, 0.3967835739020187, 0.6609248232643044, 0.39831270863378765, 0.0789125263977809, 0.25837529774824197, 0.14761951524700612, 0.26941640692550883, 0.37390483165996746, 0.22667063106565877, 0.14796595651761657, 0.1526360340075551, 0.26586715630625746, 0.401238492885285, 0.3016090297452153, 0.3927266672695702, 0.4099603080875881, 0.4161333248714256, 0.37792551322591217, 0.3724271730527302, 0.3498130471339609, 0.36362638907756284, 0.7476894586672209, 0.7643255296485678, 0.7551894266165657, 0.7664103654213383, 0.7428808778224834, 0.7324945902419097, 0.7456933441538313, 0.6885754212652295, 0.7580606973847237, 0.42811269293543086, 0.14023066925309902, 0.10670569028533317, 0.1406691271832491, 0.09772123272890199, 0.16371495763749244, 0.1326531405400656, 0.11788054082511534, 0.16773572817661409, 0.6868691877063224, 0.5713913005760239, 0.5309481753150553, 0.37953433688543214, 0.6106076061235983, 0.314816965812432, 0.1926880972945808, 0.5123652832968015, 0.5125182995620365, 0.4835676863453505, 0.4660311947908924, 0.4808107951434111, 0.5267577888222441, 0.48228727834468044, 0.503222362960514, 0.5096342561306109, 0.5134198656542641, 0.49642041101932943, 0.39478153057249354, 0.36527659798553924, 0.3749038312930758, 0.389917400507931, 0.3353589314285699, 0.3837320301256505, 0.40312839777059384, 0.391779303767258, 0.3847962728292338, 0.21026365337211628, 0.22614358433930037, 0.2218321701020638, 0.2250482954759514, 0.2030028089441399, 0.22166026096906555, 0.22894392952207965, 0.22843827879566903, 0.22141354291605542, 0.23948428157452517, 0.21788039690686845, 0.23209716514423484, 0.6323247915792307, 0.7276185432482504, 0.22753716020817816, 0.23116820489455325, 0.2095363873696986, 0.2383927323253613, 0.18727057050597484, 0.18533370685014028, 0.7980098114208879, 0.879165869841122, 0.8618013365217025, 0.1973429465049138, 0.8234543070425426, 0.8684006477823741, 0.8597041019336726, 0.7552653818676855, 0.21084529289173048, 0.7955936385588998, 0.208066081343396, 0.832113022434438, 0.16617950435428208, 0.7530512572127844, 0.7738087910020401, 0.15323970621043426, 0.19212286733565198, 0.18884072021162834, 0.18645151134852433, 0.2201990884926236, 0.1742758643179808, 0.18670923575454967, 0.1839366627946203, 0.17766393401910097, 0.1934857351664151, 0.10854033480544945, 0.07898219760305658, 0.0893484705276576, 0.10244739581337559, 0.08211042189359996, 0.08303260433089732, 0.0851538042370803, 0.09383507122744528, 0.0931642152883072]}, "mutation_prompt": null}
{"id": "c2bee5dc-2048-4f31-a01a-39669b40e5c2", "solution": "import numpy as np\n\nclass Dynamic_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, pop_size=50, c1=2.0, c2=2.0, w=0.7, f=0.5, cr=0.9, p=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.c1 = c1\n        self.c2 = c2\n        self.w = w\n        self.f = f\n        self.cr = cr\n        self.p = p\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(ind) for ind in population])\n\n        def clip_bounds(population):\n            return np.clip(population, -5.0, 5.0)\n\n        def mutate(population, target_idx, f):\n            candidates = list(range(len(population)))\n            candidates.remove(target_idx)\n            a, b, c = np.random.choice(candidates, 3, replace=False)\n            mutant = population[a] + f * (population[b] - population[c])\n            return clip_bounds(mutant)\n\n        def adapt_f(population, target_idx, f):\n            if np.random.rand() < self.p:\n                f = np.random.uniform(0, 1)\n            return f\n\n        def adjust_f(population, f):\n            diversity = np.mean(np.std(population, axis=0))\n            f = f * np.exp(-self.p * diversity)\n            return f\n\n        def crossover(target, mutant):\n            trial = np.copy(target)\n            crossover_points = np.random.rand(self.dim) < self.cr\n            if not np.any(crossover_points):\n                crossover_points[np.random.randint(0, self.dim)] = True\n            trial[crossover_points] = mutant[crossover_points]\n            return trial\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                f = adapt_f(population, i, self.f)\n                f = adjust_f(population, f)  # New line for dynamic mutation factor adaptation\n                mutant = mutate(population, i, f)\n                trial = crossover(population[i], mutant)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n        return best_solution", "name": "Dynamic_DE_PSO_Optimizer", "description": "Improving DE_PSO_Optimizer by incorporating a dynamic mechanism to adjust the mutation factor based on population diversity to enhance exploration and exploitation.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b742edd6-ebfe-46f5-b50d-b45a1f6aad5f", "metadata": {"aucs": [0.8415483320083317, 0.7873734851969789, 0.8208808188951524, 0.7968317770074933, 0.8325281512880215, 0.8272777054416194, 0.8271262860501101, 0.8323831676002205, 0.8181720814009356, 0.7175307743728203, 0.72130816045329, 0.6856890470051182, 0.7013491858505024, 0.7188101000831255, 0.7058090837628903, 0.7005074414011923, 0.7166751413437723, 0.13248636011923154, 0.4481775897642457, 0.16102923138644654, 0.4367880666108337, 0.3219191331850335, 0.1509365529628116, 0.377243101950949, 0.4095006832910977, 0.44595334805735665, 0.15532262200074187, 0.13809757285034396, 0.1361915757158083, 0.11516920968260258, 0.14613427521767353, 0.22911290826525166, 0.151737800167288, 0.13880238662463684, 0.11119125394176244, 0.15544200383027185, 0.8743370348690453, 0.8867117120609392, 0.8202366863092585, 0.8639084180893842, 0.8941788249323595, 0.8082501977703898, 0.8544252756764904, 0.8543604125483817, 0.8888734804478887, 0.5744826161629303, 0.4990439103576192, 0.47197792815808515, 0.4514284564293579, 0.43521704856130194, 0.4696054848577018, 0.5437448683615151, 0.5310316375509425, 0.60035876775151, 0.22811658500048193, 0.8469526501122752, 0.8105368552861398, 0.8821213207203665, 0.2707250022530432, 0.8452292686281677, 0.7823594917233916, 0.6628786920221681, 0.7890969796028133, 0.4603532283884616, 0.3877592763404131, 0.268807891850954, 0.5132702592579393, 0.3009966760656976, 0.6399506148770595, 0.20807985059275258, 0.4445581216905875, 0.6181984321201806, 0.30942627605161355, 0.3326397968306458, 0.1608892210430629, 0.1749878119831747, 0.21524064113644759, 0.43136284441578276, 0.2842849611404469, 0.3014713077306115, 0.3247999997958966, 9.999999999998899e-05, 0.5420255724431384, 0.5167132287147271, 0.323623210693478, 0.5236202492560686, 0.03582664293776583, 0.4961863160446829, 0.5983685556635396, 0.48004169927687823, 0.5751253318349361, 0.6023216541096823, 0.6765215155203397, 0.09569981795327731, 0.1327458453878797, 0.06657917606497121, 0.3967835739020187, 0.6609248232643044, 0.39831270863378765, 0.0789125263977809, 0.25837529774824197, 0.14761951524700612, 0.26941640692550883, 0.37390483165996746, 0.22667063106565877, 0.14796595651761657, 0.1526360340075551, 0.26586715630625746, 0.401238492885285, 0.3016090297452153, 0.3927266672695702, 0.4099603080875881, 0.4161333248714256, 0.37792551322591217, 0.3724271730527302, 0.3498130471339609, 0.36362638907756284, 0.7476894586672209, 0.7643255296485678, 0.7551894266165657, 0.7664103654213383, 0.7428808778224834, 0.7324945902419097, 0.7456933441538313, 0.6885754212652295, 0.7580606973847237, 0.42811269293543086, 0.14023066925309902, 0.10670569028533317, 0.1406691271832491, 0.09772123272890199, 0.16371495763749244, 0.1326531405400656, 0.11788054082511534, 0.16773572817661409, 0.6868691877063224, 0.5713913005760239, 0.5309481753150553, 0.37953433688543214, 0.6106076061235983, 0.314816965812432, 0.1926880972945808, 0.5123652832968015, 0.5125182995620365, 0.4835676863453505, 0.4660311947908924, 0.4808107951434111, 0.5267577888222441, 0.48228727834468044, 0.503222362960514, 0.5096342561306109, 0.5134198656542641, 0.49642041101932943, 0.39478153057249354, 0.36527659798553924, 0.3749038312930758, 0.389917400507931, 0.3353589314285699, 0.3837320301256505, 0.40312839777059384, 0.391779303767258, 0.3847962728292338, 0.21026365337211628, 0.22614358433930037, 0.2218321701020638, 0.2250482954759514, 0.2030028089441399, 0.22166026096906555, 0.22894392952207965, 0.22843827879566903, 0.22141354291605542, 0.23948428157452517, 0.21788039690686845, 0.23209716514423484, 0.6323247915792307, 0.7276185432482504, 0.22753716020817816, 0.23116820489455325, 0.2095363873696986, 0.2383927323253613, 0.18727057050597484, 0.18533370685014028, 0.7980098114208879, 0.879165869841122, 0.8618013365217025, 0.1973429465049138, 0.8234543070425426, 0.8684006477823741, 0.8597041019336726, 0.7552653818676855, 0.21084529289173048, 0.7955936385588998, 0.208066081343396, 0.832113022434438, 0.16617950435428208, 0.7530512572127844, 0.7738087910020401, 0.15323970621043426, 0.19212286733565198, 0.18884072021162834, 0.18645151134852433, 0.2201990884926236, 0.1742758643179808, 0.18670923575454967, 0.1839366627946203, 0.17766393401910097, 0.1934857351664151, 0.10854033480544945, 0.07898219760305658, 0.0893484705276576, 0.10244739581337559, 0.08211042189359996, 0.08303260433089732, 0.0851538042370803, 0.09383507122744528, 0.0931642152883072]}, "mutation_prompt": null}
{"id": "111d846e-8db8-4367-a102-46f00cd43b14", "solution": "import numpy as np\n\nclass Dynamic_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, pop_size=50, c1=2.0, c2=2.0, w=0.7, f=0.5, cr=0.9, p=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.c1 = c1\n        self.c2 = c2\n        self.w = w\n        self.f = f\n        self.cr = cr\n        self.p = p\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(ind) for ind in population])\n\n        def clip_bounds(population):\n            return np.clip(population, -5.0, 5.0)\n\n        def mutate(population, target_idx, f):\n            candidates = list(range(len(population)))\n            candidates.remove(target_idx)\n            a, b, c = np.random.choice(candidates, 3, replace=False)\n            mutant = population[a] + f * (population[b] - population[c])\n            return clip_bounds(mutant)\n\n        def adapt_f(population, target_idx, f):\n            if np.random.rand() < self.p:\n                f = np.random.uniform(0, 1)\n            return f\n\n        def adjust_f(population, f):\n            diversity = np.mean(np.std(population, axis=0))\n            f = f * np.exp(-self.p * diversity)\n            return f\n\n        def crossover(target, mutant):\n            trial = np.copy(target)\n            crossover_points = np.random.rand(self.dim) < self.cr\n            if not np.any(crossover_points):\n                crossover_points[np.random.randint(0, self.dim)] = True\n            trial[crossover_points] = mutant[crossover_points]\n            return trial\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                f = adapt_f(population, i, self.f)\n                f = adjust_f(population, f)  # New line for dynamic mutation factor adaptation\n                mutant = mutate(population, i, f)\n                trial = crossover(population[i], mutant)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n        return best_solution", "name": "Dynamic_DE_PSO_Optimizer", "description": "Improving DE_PSO_Optimizer by incorporating a dynamic mechanism to adjust the mutation factor based on population diversity to enhance exploration and exploitation.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b742edd6-ebfe-46f5-b50d-b45a1f6aad5f", "metadata": {"aucs": [0.8415483320083317, 0.7873734851969789, 0.8208808188951524, 0.7968317770074933, 0.8325281512880215, 0.8272777054416194, 0.8271262860501101, 0.8323831676002205, 0.8181720814009356, 0.7175307743728203, 0.72130816045329, 0.6856890470051182, 0.7013491858505024, 0.7188101000831255, 0.7058090837628903, 0.7005074414011923, 0.7166751413437723, 0.13248636011923154, 0.4481775897642457, 0.16102923138644654, 0.4367880666108337, 0.3219191331850335, 0.1509365529628116, 0.377243101950949, 0.4095006832910977, 0.44595334805735665, 0.15532262200074187, 0.13809757285034396, 0.1361915757158083, 0.11516920968260258, 0.14613427521767353, 0.22911290826525166, 0.151737800167288, 0.13880238662463684, 0.11119125394176244, 0.15544200383027185, 0.8743370348690453, 0.8867117120609392, 0.8202366863092585, 0.8639084180893842, 0.8941788249323595, 0.8082501977703898, 0.8544252756764904, 0.8543604125483817, 0.8888734804478887, 0.5744826161629303, 0.4990439103576192, 0.47197792815808515, 0.4514284564293579, 0.43521704856130194, 0.4696054848577018, 0.5437448683615151, 0.5310316375509425, 0.60035876775151, 0.22811658500048193, 0.8469526501122752, 0.8105368552861398, 0.8821213207203665, 0.2707250022530432, 0.8452292686281677, 0.7823594917233916, 0.6628786920221681, 0.7890969796028133, 0.4603532283884616, 0.3877592763404131, 0.268807891850954, 0.5132702592579393, 0.3009966760656976, 0.6399506148770595, 0.20807985059275258, 0.4445581216905875, 0.6181984321201806, 0.30942627605161355, 0.3326397968306458, 0.1608892210430629, 0.1749878119831747, 0.21524064113644759, 0.43136284441578276, 0.2842849611404469, 0.3014713077306115, 0.3247999997958966, 9.999999999998899e-05, 0.5420255724431384, 0.5167132287147271, 0.323623210693478, 0.5236202492560686, 0.03582664293776583, 0.4961863160446829, 0.5983685556635396, 0.48004169927687823, 0.5751253318349361, 0.6023216541096823, 0.6765215155203397, 0.09569981795327731, 0.1327458453878797, 0.06657917606497121, 0.3967835739020187, 0.6609248232643044, 0.39831270863378765, 0.0789125263977809, 0.25837529774824197, 0.14761951524700612, 0.26941640692550883, 0.37390483165996746, 0.22667063106565877, 0.14796595651761657, 0.1526360340075551, 0.26586715630625746, 0.401238492885285, 0.3016090297452153, 0.3927266672695702, 0.4099603080875881, 0.4161333248714256, 0.37792551322591217, 0.3724271730527302, 0.3498130471339609, 0.36362638907756284, 0.7476894586672209, 0.7643255296485678, 0.7551894266165657, 0.7664103654213383, 0.7428808778224834, 0.7324945902419097, 0.7456933441538313, 0.6885754212652295, 0.7580606973847237, 0.42811269293543086, 0.14023066925309902, 0.10670569028533317, 0.1406691271832491, 0.09772123272890199, 0.16371495763749244, 0.1326531405400656, 0.11788054082511534, 0.16773572817661409, 0.6868691877063224, 0.5713913005760239, 0.5309481753150553, 0.37953433688543214, 0.6106076061235983, 0.314816965812432, 0.1926880972945808, 0.5123652832968015, 0.5125182995620365, 0.4835676863453505, 0.4660311947908924, 0.4808107951434111, 0.5267577888222441, 0.48228727834468044, 0.503222362960514, 0.5096342561306109, 0.5134198656542641, 0.49642041101932943, 0.39478153057249354, 0.36527659798553924, 0.3749038312930758, 0.389917400507931, 0.3353589314285699, 0.3837320301256505, 0.40312839777059384, 0.391779303767258, 0.3847962728292338, 0.21026365337211628, 0.22614358433930037, 0.2218321701020638, 0.2250482954759514, 0.2030028089441399, 0.22166026096906555, 0.22894392952207965, 0.22843827879566903, 0.22141354291605542, 0.23948428157452517, 0.21788039690686845, 0.23209716514423484, 0.6323247915792307, 0.7276185432482504, 0.22753716020817816, 0.23116820489455325, 0.2095363873696986, 0.2383927323253613, 0.18727057050597484, 0.18533370685014028, 0.7980098114208879, 0.879165869841122, 0.8618013365217025, 0.1973429465049138, 0.8234543070425426, 0.8684006477823741, 0.8597041019336726, 0.7552653818676855, 0.21084529289173048, 0.7955936385588998, 0.208066081343396, 0.832113022434438, 0.16617950435428208, 0.7530512572127844, 0.7738087910020401, 0.15323970621043426, 0.19212286733565198, 0.18884072021162834, 0.18645151134852433, 0.2201990884926236, 0.1742758643179808, 0.18670923575454967, 0.1839366627946203, 0.17766393401910097, 0.1934857351664151, 0.10854033480544945, 0.07898219760305658, 0.0893484705276576, 0.10244739581337559, 0.08211042189359996, 0.08303260433089732, 0.0851538042370803, 0.09383507122744528, 0.0931642152883072]}, "mutation_prompt": null}
{"id": "cb8d7b8d-bc51-440d-b2ba-aca08d2965ca", "solution": "import numpy as np\n\nclass Enhanced_Dynamic_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, pop_size=50, c1=2.0, c2=2.0, w=0.7, f=0.5, cr=0.9, p=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.c1 = c1\n        self.c2 = c2\n        self.w = w\n        self.f = f\n        self.cr = cr\n        self.p = p\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(ind) for ind in population])\n\n        def clip_bounds(population):\n            return np.clip(population, -5.0, 5.0)\n\n        def mutate(population, target_idx, f):\n            candidates = list(range(len(population)))\n            candidates.remove(target_idx)\n            a, b, c = np.random.choice(candidates, 3, replace=False)\n            mutant = population[a] + f * (population[b] - population[c])\n            return clip_bounds(mutant)\n\n        def adapt_f(population, target_idx, f):\n            if np.random.rand() < self.p:\n                f = np.random.uniform(0, 1)\n            return f\n\n        def adjust_f(population, f):\n            diversity = np.mean(np.std(population, axis=0))\n            f = f * np.exp(-self.p * diversity)  # Enhanced diversity-based mutation factor adaptation\n            return f\n\n        def crossover(target, mutant):\n            trial = np.copy(target)\n            crossover_points = np.random.rand(self.dim) < self.cr\n            if not np.any(crossover_points):\n                crossover_points[np.random.randint(0, self.dim)] = True\n            trial[crossover_points] = mutant[crossover_points]\n            return trial\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                f = adapt_f(population, i, self.f)\n                f = adjust_f(population, f)  # New line for enhanced dynamic mutation factor adaptation\n                mutant = mutate(population, i, f)\n                trial = crossover(population[i], mutant)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n        return best_solution", "name": "Enhanced_Dynamic_DE_PSO_Optimizer", "description": "Enhancing population diversity by introducing a novel diversity-based mutation factor adaptation mechanism to improve exploration and exploitation in Dynamic DE PSO optimization.", "configspace": "", "generation": 96, "fitness": 0.4297439464409878, "feedback": "The algorithm Enhanced_Dynamic_DE_PSO_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.43 with standard deviation 0.26.", "error": "", "parent_id": "b742edd6-ebfe-46f5-b50d-b45a1f6aad5f", "metadata": {"aucs": [0.8415483320083317, 0.7873734851969789, 0.8208808188951524, 0.7968317770074933, 0.8325281512880215, 0.8272777054416194, 0.8271262860501101, 0.8323831676002205, 0.8181720814009356, 0.7175307743728203, 0.72130816045329, 0.6856890470051182, 0.7013491858505024, 0.7188101000831255, 0.7058090837628903, 0.7005074414011923, 0.7166751413437723, 0.13248636011923154, 0.4481775897642457, 0.16102923138644654, 0.4367880666108337, 0.3219191331850335, 0.1509365529628116, 0.377243101950949, 0.4095006832910977, 0.44595334805735665, 0.15532262200074187, 0.13809757285034396, 0.1361915757158083, 0.11516920968260258, 0.14613427521767353, 0.22911290826525166, 0.151737800167288, 0.13880238662463684, 0.11119125394176244, 0.15544200383027185, 0.8743370348690453, 0.8867117120609392, 0.8202366863092585, 0.8639084180893842, 0.8941788249323595, 0.8082501977703898, 0.8544252756764904, 0.8543604125483817, 0.8888734804478887, 0.5744826161629303, 0.4990439103576192, 0.47197792815808515, 0.4514284564293579, 0.43521704856130194, 0.4696054848577018, 0.5437448683615151, 0.5310316375509425, 0.60035876775151, 0.22811658500048193, 0.8469526501122752, 0.8105368552861398, 0.8821213207203665, 0.2707250022530432, 0.8452292686281677, 0.7823594917233916, 0.6628786920221681, 0.7890969796028133, 0.4603532283884616, 0.3877592763404131, 0.268807891850954, 0.5132702592579393, 0.3009966760656976, 0.6399506148770595, 0.20807985059275258, 0.4445581216905875, 0.6181984321201806, 0.30942627605161355, 0.3326397968306458, 0.1608892210430629, 0.1749878119831747, 0.21524064113644759, 0.43136284441578276, 0.2842849611404469, 0.3014713077306115, 0.3247999997958966, 9.999999999998899e-05, 0.5420255724431384, 0.5167132287147271, 0.323623210693478, 0.5236202492560686, 0.03582664293776583, 0.4961863160446829, 0.5983685556635396, 0.48004169927687823, 0.5751253318349361, 0.6023216541096823, 0.6765215155203397, 0.09569981795327731, 0.1327458453878797, 0.06657917606497121, 0.3967835739020187, 0.6609248232643044, 0.39831270863378765, 0.0789125263977809, 0.25837529774824197, 0.14761951524700612, 0.26941640692550883, 0.37390483165996746, 0.22667063106565877, 0.14796595651761657, 0.1526360340075551, 0.26586715630625746, 0.401238492885285, 0.3016090297452153, 0.3927266672695702, 0.4099603080875881, 0.4161333248714256, 0.37792551322591217, 0.3724271730527302, 0.3498130471339609, 0.36362638907756284, 0.7476894586672209, 0.7643255296485678, 0.7551894266165657, 0.7664103654213383, 0.7428808778224834, 0.7324945902419097, 0.7456933441538313, 0.6885754212652295, 0.7580606973847237, 0.42811269293543086, 0.14023066925309902, 0.10670569028533317, 0.1406691271832491, 0.09772123272890199, 0.16371495763749244, 0.1326531405400656, 0.11788054082511534, 0.16773572817661409, 0.6868691877063224, 0.5713913005760239, 0.5309481753150553, 0.37953433688543214, 0.6106076061235983, 0.314816965812432, 0.1926880972945808, 0.5123652832968015, 0.5125182995620365, 0.4835676863453505, 0.4660311947908924, 0.4808107951434111, 0.5267577888222441, 0.48228727834468044, 0.503222362960514, 0.5096342561306109, 0.5134198656542641, 0.49642041101932943, 0.39478153057249354, 0.36527659798553924, 0.3749038312930758, 0.389917400507931, 0.3353589314285699, 0.3837320301256505, 0.40312839777059384, 0.391779303767258, 0.3847962728292338, 0.21026365337211628, 0.22614358433930037, 0.2218321701020638, 0.2250482954759514, 0.2030028089441399, 0.22166026096906555, 0.22894392952207965, 0.22843827879566903, 0.22141354291605542, 0.23948428157452517, 0.21788039690686845, 0.23209716514423484, 0.6323247915792307, 0.7276185432482504, 0.22753716020817816, 0.23116820489455325, 0.2095363873696986, 0.2383927323253613, 0.18727057050597484, 0.18533370685014028, 0.7980098114208879, 0.879165869841122, 0.8618013365217025, 0.1973429465049138, 0.8234543070425426, 0.8684006477823741, 0.8597041019336726, 0.7552653818676855, 0.21084529289173048, 0.7955936385588998, 0.208066081343396, 0.832113022434438, 0.16617950435428208, 0.7530512572127844, 0.7738087910020401, 0.15323970621043426, 0.19212286733565198, 0.18884072021162834, 0.18645151134852433, 0.2201990884926236, 0.1742758643179808, 0.18670923575454967, 0.1839366627946203, 0.17766393401910097, 0.1934857351664151, 0.10854033480544945, 0.07898219760305658, 0.0893484705276576, 0.10244739581337559, 0.08211042189359996, 0.08303260433089732, 0.0851538042370803, 0.09383507122744528, 0.0931642152883072]}, "mutation_prompt": null}
{"id": "13c9da08-d2b9-4402-8c4b-d98066f0a9ec", "solution": "import numpy as np\n\nclass Dynamic_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, pop_size=50, c1=2.0, c2=2.0, w=0.7, f=0.5, cr=0.9, p=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.c1 = c1\n        self.c2 = c2\n        self.w = w\n        self.f = f\n        self.cr = cr\n        self.p = p\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(ind) for ind in population])\n\n        def clip_bounds(population):\n            return np.clip(population, -5.0, 5.0)\n\n        def mutate(population, target_idx, f):\n            candidates = list(range(len(population)))\n            candidates.remove(target_idx)\n            a, b, c = np.random.choice(candidates, 3, replace=False)\n            mutant = population[a] + f * (population[b] - population[c])\n            return clip_bounds(mutant)\n\n        def adapt_f(population, target_idx, f):\n            if np.random.rand() < self.p:\n                f = np.random.uniform(0, 1)\n            return f\n\n        def adjust_f(population, f):\n            diversity = np.mean(np.std(population, axis=0))\n            f = f * np.exp(-self.p * diversity)\n            return f\n\n        def crossover(target, mutant):\n            trial = np.copy(target)\n            crossover_points = np.random.rand(self.dim) < self.cr\n            if not np.any(crossover_points):\n                crossover_points[np.random.randint(0, self.dim)] = True\n            trial[crossover_points] = mutant[crossover_points]\n            return trial\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                f = adapt_f(population, i, self.f)\n                f = adjust_f(population, f)  # New line for dynamic mutation factor adaptation\n                mutant = mutate(population, i, f)\n                trial = crossover(population[i], mutant)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n        return best_solution", "name": "Dynamic_DE_PSO_Optimizer", "description": "Improving DE_PSO_Optimizer by incorporating a dynamic mechanism to adjust the mutation factor based on population diversity to enhance exploration and exploitation.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b742edd6-ebfe-46f5-b50d-b45a1f6aad5f", "metadata": {"aucs": [0.8415483320083317, 0.7873734851969789, 0.8208808188951524, 0.7968317770074933, 0.8325281512880215, 0.8272777054416194, 0.8271262860501101, 0.8323831676002205, 0.8181720814009356, 0.7175307743728203, 0.72130816045329, 0.6856890470051182, 0.7013491858505024, 0.7188101000831255, 0.7058090837628903, 0.7005074414011923, 0.7166751413437723, 0.13248636011923154, 0.4481775897642457, 0.16102923138644654, 0.4367880666108337, 0.3219191331850335, 0.1509365529628116, 0.377243101950949, 0.4095006832910977, 0.44595334805735665, 0.15532262200074187, 0.13809757285034396, 0.1361915757158083, 0.11516920968260258, 0.14613427521767353, 0.22911290826525166, 0.151737800167288, 0.13880238662463684, 0.11119125394176244, 0.15544200383027185, 0.8743370348690453, 0.8867117120609392, 0.8202366863092585, 0.8639084180893842, 0.8941788249323595, 0.8082501977703898, 0.8544252756764904, 0.8543604125483817, 0.8888734804478887, 0.5744826161629303, 0.4990439103576192, 0.47197792815808515, 0.4514284564293579, 0.43521704856130194, 0.4696054848577018, 0.5437448683615151, 0.5310316375509425, 0.60035876775151, 0.22811658500048193, 0.8469526501122752, 0.8105368552861398, 0.8821213207203665, 0.2707250022530432, 0.8452292686281677, 0.7823594917233916, 0.6628786920221681, 0.7890969796028133, 0.4603532283884616, 0.3877592763404131, 0.268807891850954, 0.5132702592579393, 0.3009966760656976, 0.6399506148770595, 0.20807985059275258, 0.4445581216905875, 0.6181984321201806, 0.30942627605161355, 0.3326397968306458, 0.1608892210430629, 0.1749878119831747, 0.21524064113644759, 0.43136284441578276, 0.2842849611404469, 0.3014713077306115, 0.3247999997958966, 9.999999999998899e-05, 0.5420255724431384, 0.5167132287147271, 0.323623210693478, 0.5236202492560686, 0.03582664293776583, 0.4961863160446829, 0.5983685556635396, 0.48004169927687823, 0.5751253318349361, 0.6023216541096823, 0.6765215155203397, 0.09569981795327731, 0.1327458453878797, 0.06657917606497121, 0.3967835739020187, 0.6609248232643044, 0.39831270863378765, 0.0789125263977809, 0.25837529774824197, 0.14761951524700612, 0.26941640692550883, 0.37390483165996746, 0.22667063106565877, 0.14796595651761657, 0.1526360340075551, 0.26586715630625746, 0.401238492885285, 0.3016090297452153, 0.3927266672695702, 0.4099603080875881, 0.4161333248714256, 0.37792551322591217, 0.3724271730527302, 0.3498130471339609, 0.36362638907756284, 0.7476894586672209, 0.7643255296485678, 0.7551894266165657, 0.7664103654213383, 0.7428808778224834, 0.7324945902419097, 0.7456933441538313, 0.6885754212652295, 0.7580606973847237, 0.42811269293543086, 0.14023066925309902, 0.10670569028533317, 0.1406691271832491, 0.09772123272890199, 0.16371495763749244, 0.1326531405400656, 0.11788054082511534, 0.16773572817661409, 0.6868691877063224, 0.5713913005760239, 0.5309481753150553, 0.37953433688543214, 0.6106076061235983, 0.314816965812432, 0.1926880972945808, 0.5123652832968015, 0.5125182995620365, 0.4835676863453505, 0.4660311947908924, 0.4808107951434111, 0.5267577888222441, 0.48228727834468044, 0.503222362960514, 0.5096342561306109, 0.5134198656542641, 0.49642041101932943, 0.39478153057249354, 0.36527659798553924, 0.3749038312930758, 0.389917400507931, 0.3353589314285699, 0.3837320301256505, 0.40312839777059384, 0.391779303767258, 0.3847962728292338, 0.21026365337211628, 0.22614358433930037, 0.2218321701020638, 0.2250482954759514, 0.2030028089441399, 0.22166026096906555, 0.22894392952207965, 0.22843827879566903, 0.22141354291605542, 0.23948428157452517, 0.21788039690686845, 0.23209716514423484, 0.6323247915792307, 0.7276185432482504, 0.22753716020817816, 0.23116820489455325, 0.2095363873696986, 0.2383927323253613, 0.18727057050597484, 0.18533370685014028, 0.7980098114208879, 0.879165869841122, 0.8618013365217025, 0.1973429465049138, 0.8234543070425426, 0.8684006477823741, 0.8597041019336726, 0.7552653818676855, 0.21084529289173048, 0.7955936385588998, 0.208066081343396, 0.832113022434438, 0.16617950435428208, 0.7530512572127844, 0.7738087910020401, 0.15323970621043426, 0.19212286733565198, 0.18884072021162834, 0.18645151134852433, 0.2201990884926236, 0.1742758643179808, 0.18670923575454967, 0.1839366627946203, 0.17766393401910097, 0.1934857351664151, 0.10854033480544945, 0.07898219760305658, 0.0893484705276576, 0.10244739581337559, 0.08211042189359996, 0.08303260433089732, 0.0851538042370803, 0.09383507122744528, 0.0931642152883072]}, "mutation_prompt": null}
{"id": "12e0cdf1-9889-49ad-ad24-45f5cc069465", "solution": "import numpy as np\n\nclass Dynamic_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, pop_size=50, c1=2.0, c2=2.0, w=0.7, f=0.5, cr=0.9, p=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.c1 = c1\n        self.c2 = c2\n        self.w = w\n        self.f = f\n        self.cr = cr\n        self.p = p\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(ind) for ind in population])\n\n        def clip_bounds(population):\n            return np.clip(population, -5.0, 5.0)\n\n        def mutate(population, target_idx, f):\n            candidates = list(range(len(population)))\n            candidates.remove(target_idx)\n            a, b, c = np.random.choice(candidates, 3, replace=False)\n            mutant = population[a] + f * (population[b] - population[c])\n            return clip_bounds(mutant)\n\n        def adapt_f(population, target_idx, f):\n            if np.random.rand() < self.p:\n                f = np.random.uniform(0, 1)\n            return f\n\n        def adjust_f(population, f):\n            diversity = np.mean(np.std(population, axis=0))\n            f = f * np.exp(-self.p * diversity)\n            return f\n\n        def crossover(target, mutant):\n            trial = np.copy(target)\n            crossover_points = np.random.rand(self.dim) < self.cr\n            if not np.any(crossover_points):\n                crossover_points[np.random.randint(0, self.dim)] = True\n            trial[crossover_points] = mutant[crossover_points]\n            return trial\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                f = adapt_f(population, i, self.f)\n                f = adjust_f(population, f)  # New line for dynamic mutation factor adaptation\n                mutant = mutate(population, i, f)\n                trial = crossover(population[i], mutant)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n        return best_solution", "name": "Dynamic_DE_PSO_Optimizer", "description": "Improving DE_PSO_Optimizer by incorporating a dynamic mechanism to adjust the mutation factor based on population diversity to enhance exploration and exploitation.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b742edd6-ebfe-46f5-b50d-b45a1f6aad5f", "metadata": {"aucs": [0.8415483320083317, 0.7873734851969789, 0.8208808188951524, 0.7968317770074933, 0.8325281512880215, 0.8272777054416194, 0.8271262860501101, 0.8323831676002205, 0.8181720814009356, 0.7175307743728203, 0.72130816045329, 0.6856890470051182, 0.7013491858505024, 0.7188101000831255, 0.7058090837628903, 0.7005074414011923, 0.7166751413437723, 0.13248636011923154, 0.4481775897642457, 0.16102923138644654, 0.4367880666108337, 0.3219191331850335, 0.1509365529628116, 0.377243101950949, 0.4095006832910977, 0.44595334805735665, 0.15532262200074187, 0.13809757285034396, 0.1361915757158083, 0.11516920968260258, 0.14613427521767353, 0.22911290826525166, 0.151737800167288, 0.13880238662463684, 0.11119125394176244, 0.15544200383027185, 0.8743370348690453, 0.8867117120609392, 0.8202366863092585, 0.8639084180893842, 0.8941788249323595, 0.8082501977703898, 0.8544252756764904, 0.8543604125483817, 0.8888734804478887, 0.5744826161629303, 0.4990439103576192, 0.47197792815808515, 0.4514284564293579, 0.43521704856130194, 0.4696054848577018, 0.5437448683615151, 0.5310316375509425, 0.60035876775151, 0.22811658500048193, 0.8469526501122752, 0.8105368552861398, 0.8821213207203665, 0.2707250022530432, 0.8452292686281677, 0.7823594917233916, 0.6628786920221681, 0.7890969796028133, 0.4603532283884616, 0.3877592763404131, 0.268807891850954, 0.5132702592579393, 0.3009966760656976, 0.6399506148770595, 0.20807985059275258, 0.4445581216905875, 0.6181984321201806, 0.30942627605161355, 0.3326397968306458, 0.1608892210430629, 0.1749878119831747, 0.21524064113644759, 0.43136284441578276, 0.2842849611404469, 0.3014713077306115, 0.3247999997958966, 9.999999999998899e-05, 0.5420255724431384, 0.5167132287147271, 0.323623210693478, 0.5236202492560686, 0.03582664293776583, 0.4961863160446829, 0.5983685556635396, 0.48004169927687823, 0.5751253318349361, 0.6023216541096823, 0.6765215155203397, 0.09569981795327731, 0.1327458453878797, 0.06657917606497121, 0.3967835739020187, 0.6609248232643044, 0.39831270863378765, 0.0789125263977809, 0.25837529774824197, 0.14761951524700612, 0.26941640692550883, 0.37390483165996746, 0.22667063106565877, 0.14796595651761657, 0.1526360340075551, 0.26586715630625746, 0.401238492885285, 0.3016090297452153, 0.3927266672695702, 0.4099603080875881, 0.4161333248714256, 0.37792551322591217, 0.3724271730527302, 0.3498130471339609, 0.36362638907756284, 0.7476894586672209, 0.7643255296485678, 0.7551894266165657, 0.7664103654213383, 0.7428808778224834, 0.7324945902419097, 0.7456933441538313, 0.6885754212652295, 0.7580606973847237, 0.42811269293543086, 0.14023066925309902, 0.10670569028533317, 0.1406691271832491, 0.09772123272890199, 0.16371495763749244, 0.1326531405400656, 0.11788054082511534, 0.16773572817661409, 0.6868691877063224, 0.5713913005760239, 0.5309481753150553, 0.37953433688543214, 0.6106076061235983, 0.314816965812432, 0.1926880972945808, 0.5123652832968015, 0.5125182995620365, 0.4835676863453505, 0.4660311947908924, 0.4808107951434111, 0.5267577888222441, 0.48228727834468044, 0.503222362960514, 0.5096342561306109, 0.5134198656542641, 0.49642041101932943, 0.39478153057249354, 0.36527659798553924, 0.3749038312930758, 0.389917400507931, 0.3353589314285699, 0.3837320301256505, 0.40312839777059384, 0.391779303767258, 0.3847962728292338, 0.21026365337211628, 0.22614358433930037, 0.2218321701020638, 0.2250482954759514, 0.2030028089441399, 0.22166026096906555, 0.22894392952207965, 0.22843827879566903, 0.22141354291605542, 0.23948428157452517, 0.21788039690686845, 0.23209716514423484, 0.6323247915792307, 0.7276185432482504, 0.22753716020817816, 0.23116820489455325, 0.2095363873696986, 0.2383927323253613, 0.18727057050597484, 0.18533370685014028, 0.7980098114208879, 0.879165869841122, 0.8618013365217025, 0.1973429465049138, 0.8234543070425426, 0.8684006477823741, 0.8597041019336726, 0.7552653818676855, 0.21084529289173048, 0.7955936385588998, 0.208066081343396, 0.832113022434438, 0.16617950435428208, 0.7530512572127844, 0.7738087910020401, 0.15323970621043426, 0.19212286733565198, 0.18884072021162834, 0.18645151134852433, 0.2201990884926236, 0.1742758643179808, 0.18670923575454967, 0.1839366627946203, 0.17766393401910097, 0.1934857351664151, 0.10854033480544945, 0.07898219760305658, 0.0893484705276576, 0.10244739581337559, 0.08211042189359996, 0.08303260433089732, 0.0851538042370803, 0.09383507122744528, 0.0931642152883072]}, "mutation_prompt": null}
{"id": "c8a79548-3311-4806-bacc-1f64b5909653", "solution": "import numpy as np\n\nclass Dynamic_DE_PSO_Optimizer:\n    def __init__(self, budget, dim, pop_size=50, c1=2.0, c2=2.0, w=0.7, f=0.5, cr=0.9, p=0.5):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = pop_size\n        self.c1 = c1\n        self.c2 = c2\n        self.w = w\n        self.f = f\n        self.cr = cr\n        self.p = p\n\n    def __call__(self, func):\n        def evaluate_population(population):\n            return np.array([func(ind) for ind in population])\n\n        def clip_bounds(population):\n            return np.clip(population, -5.0, 5.0)\n\n        def mutate(population, target_idx, f):\n            candidates = list(range(len(population)))\n            candidates.remove(target_idx)\n            a, b, c = np.random.choice(candidates, 3, replace=False)\n            mutant = population[a] + f * (population[b] - population[c])\n            return clip_bounds(mutant)\n\n        def adapt_f(population, target_idx, f):\n            if np.random.rand() < self.p:\n                f = np.random.uniform(0, 1)\n            return f\n\n        def adjust_f(population, f):\n            diversity = np.mean(np.std(population, axis=0))\n            f = f * np.exp(-self.p * diversity)\n            return f\n\n        def crossover(target, mutant):\n            trial = np.copy(target)\n            crossover_points = np.random.rand(self.dim) < self.cr\n            if not np.any(crossover_points):\n                crossover_points[np.random.randint(0, self.dim)] = True\n            trial[crossover_points] = mutant[crossover_points]\n            return trial\n\n        population = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        fitness = evaluate_population(population)\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        for _ in range(self.budget - self.pop_size):\n            for i in range(self.pop_size):\n                f = adapt_f(population, i, self.f)\n                f = adjust_f(population, f)  # New line for dynamic mutation factor adaptation\n                mutant = mutate(population, i, f)\n                trial = crossover(population[i], mutant)\n                trial_fitness = func(trial)\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n        return best_solution", "name": "Dynamic_DE_PSO_Optimizer", "description": "Improving DE_PSO_Optimizer by incorporating a dynamic mechanism to adjust the mutation factor based on population diversity to enhance exploration and exploitation.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b742edd6-ebfe-46f5-b50d-b45a1f6aad5f", "metadata": {"aucs": [0.8415483320083317, 0.7873734851969789, 0.8208808188951524, 0.7968317770074933, 0.8325281512880215, 0.8272777054416194, 0.8271262860501101, 0.8323831676002205, 0.8181720814009356, 0.7175307743728203, 0.72130816045329, 0.6856890470051182, 0.7013491858505024, 0.7188101000831255, 0.7058090837628903, 0.7005074414011923, 0.7166751413437723, 0.13248636011923154, 0.4481775897642457, 0.16102923138644654, 0.4367880666108337, 0.3219191331850335, 0.1509365529628116, 0.377243101950949, 0.4095006832910977, 0.44595334805735665, 0.15532262200074187, 0.13809757285034396, 0.1361915757158083, 0.11516920968260258, 0.14613427521767353, 0.22911290826525166, 0.151737800167288, 0.13880238662463684, 0.11119125394176244, 0.15544200383027185, 0.8743370348690453, 0.8867117120609392, 0.8202366863092585, 0.8639084180893842, 0.8941788249323595, 0.8082501977703898, 0.8544252756764904, 0.8543604125483817, 0.8888734804478887, 0.5744826161629303, 0.4990439103576192, 0.47197792815808515, 0.4514284564293579, 0.43521704856130194, 0.4696054848577018, 0.5437448683615151, 0.5310316375509425, 0.60035876775151, 0.22811658500048193, 0.8469526501122752, 0.8105368552861398, 0.8821213207203665, 0.2707250022530432, 0.8452292686281677, 0.7823594917233916, 0.6628786920221681, 0.7890969796028133, 0.4603532283884616, 0.3877592763404131, 0.268807891850954, 0.5132702592579393, 0.3009966760656976, 0.6399506148770595, 0.20807985059275258, 0.4445581216905875, 0.6181984321201806, 0.30942627605161355, 0.3326397968306458, 0.1608892210430629, 0.1749878119831747, 0.21524064113644759, 0.43136284441578276, 0.2842849611404469, 0.3014713077306115, 0.3247999997958966, 9.999999999998899e-05, 0.5420255724431384, 0.5167132287147271, 0.323623210693478, 0.5236202492560686, 0.03582664293776583, 0.4961863160446829, 0.5983685556635396, 0.48004169927687823, 0.5751253318349361, 0.6023216541096823, 0.6765215155203397, 0.09569981795327731, 0.1327458453878797, 0.06657917606497121, 0.3967835739020187, 0.6609248232643044, 0.39831270863378765, 0.0789125263977809, 0.25837529774824197, 0.14761951524700612, 0.26941640692550883, 0.37390483165996746, 0.22667063106565877, 0.14796595651761657, 0.1526360340075551, 0.26586715630625746, 0.401238492885285, 0.3016090297452153, 0.3927266672695702, 0.4099603080875881, 0.4161333248714256, 0.37792551322591217, 0.3724271730527302, 0.3498130471339609, 0.36362638907756284, 0.7476894586672209, 0.7643255296485678, 0.7551894266165657, 0.7664103654213383, 0.7428808778224834, 0.7324945902419097, 0.7456933441538313, 0.6885754212652295, 0.7580606973847237, 0.42811269293543086, 0.14023066925309902, 0.10670569028533317, 0.1406691271832491, 0.09772123272890199, 0.16371495763749244, 0.1326531405400656, 0.11788054082511534, 0.16773572817661409, 0.6868691877063224, 0.5713913005760239, 0.5309481753150553, 0.37953433688543214, 0.6106076061235983, 0.314816965812432, 0.1926880972945808, 0.5123652832968015, 0.5125182995620365, 0.4835676863453505, 0.4660311947908924, 0.4808107951434111, 0.5267577888222441, 0.48228727834468044, 0.503222362960514, 0.5096342561306109, 0.5134198656542641, 0.49642041101932943, 0.39478153057249354, 0.36527659798553924, 0.3749038312930758, 0.389917400507931, 0.3353589314285699, 0.3837320301256505, 0.40312839777059384, 0.391779303767258, 0.3847962728292338, 0.21026365337211628, 0.22614358433930037, 0.2218321701020638, 0.2250482954759514, 0.2030028089441399, 0.22166026096906555, 0.22894392952207965, 0.22843827879566903, 0.22141354291605542, 0.23948428157452517, 0.21788039690686845, 0.23209716514423484, 0.6323247915792307, 0.7276185432482504, 0.22753716020817816, 0.23116820489455325, 0.2095363873696986, 0.2383927323253613, 0.18727057050597484, 0.18533370685014028, 0.7980098114208879, 0.879165869841122, 0.8618013365217025, 0.1973429465049138, 0.8234543070425426, 0.8684006477823741, 0.8597041019336726, 0.7552653818676855, 0.21084529289173048, 0.7955936385588998, 0.208066081343396, 0.832113022434438, 0.16617950435428208, 0.7530512572127844, 0.7738087910020401, 0.15323970621043426, 0.19212286733565198, 0.18884072021162834, 0.18645151134852433, 0.2201990884926236, 0.1742758643179808, 0.18670923575454967, 0.1839366627946203, 0.17766393401910097, 0.1934857351664151, 0.10854033480544945, 0.07898219760305658, 0.0893484705276576, 0.10244739581337559, 0.08211042189359996, 0.08303260433089732, 0.0851538042370803, 0.09383507122744528, 0.0931642152883072]}, "mutation_prompt": null}
