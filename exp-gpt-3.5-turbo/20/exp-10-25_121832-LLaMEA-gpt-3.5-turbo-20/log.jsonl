{"id": "a7876fc2-5e95-4b08-a3b4-bf39c4a4205d", "solution": "import numpy as np\n\nclass GeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.mutation_rate = 0.1\n        self.crossover_prob = 0.8\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        def mutate(child):\n            mutation_mask = np.random.rand(self.dim) < self.mutation_rate\n            child[mutation_mask] += np.random.uniform(-0.5, 0.5, np.sum(mutation_mask))\n            return child\n\n        def crossover(parent1, parent2):\n            mask = np.random.rand(self.dim) < self.crossover_prob\n            child = parent1.copy()\n            child[mask] = parent2[mask]\n            return child\n\n        population = initialize_population()\n        evaluations = 0\n\n        while evaluations < self.budget:\n            sorted_indices = np.argsort([func(individual) for individual in population])\n            parents = population[sorted_indices[:2]]\n\n            child = crossover(parents[0], parents[1])\n            child = mutate(child)\n\n            if func(child) < func(parents[sorted_indices[0]]):\n                population[sorted_indices[-1]] = child\n\n            evaluations += 1\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "GeneticAlgorithm", "description": "Genetic Algorithm with Adaptive Mutation Rate and Crossover Probability", "configspace": "", "generation": 0, "fitness": -Infinity, "feedback": "An exception occured: Traceback (most recent call last):\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 187, in initialize_single\n    new_individual = self.evaluate_fitness(new_individual)\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 264, in evaluate_fitness\n    updated_individual = self.f(individual, self.logger)\n  File \"mutation_exp.py\", line 52, in evaluateBBOB\n    algorithm(problem)\n  File \"<string>\", line 36, in __call__\nIndexError: index 37 is out of bounds for axis 0 with size 2\n.", "error": "IndexError('index 37 is out of bounds for axis 0 with size 2')Traceback (most recent call last):\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 187, in initialize_single\n    new_individual = self.evaluate_fitness(new_individual)\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 264, in evaluate_fitness\n    updated_individual = self.f(individual, self.logger)\n  File \"mutation_exp.py\", line 52, in evaluateBBOB\n    algorithm(problem)\n  File \"<string>\", line 36, in __call__\nIndexError: index 37 is out of bounds for axis 0 with size 2\n", "parent_id": null, "metadata": {}, "mutation_prompt": null}
{"id": "b4f6464d-f3ad-488c-8c0e-3e0a5993a7c9", "solution": "import numpy as np\n\nclass GeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.mutation_rate = 0.1\n        self.crossover_prob = 0.8\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        def mutate(child):\n            mutation_mask = np.random.rand(self.dim) < self.mutation_rate\n            child[mutation_mask] += np.random.uniform(-0.5, 0.5, np.sum(mutation_mask))\n            return child\n\n        def crossover(parent1, parent2):\n            mask = np.random.rand(self.dim) < self.crossover_prob\n            child = parent1.copy()\n            child[mask] = parent2[mask]\n            return child\n\n        population = initialize_population()\n        evaluations = 0\n\n        while evaluations < self.budget:\n            sorted_indices = np.argsort([func(individual) for individual in population])\n            parents = population[sorted_indices[:2]]\n\n            child = crossover(parents[0], parents[1])\n            child = mutate(child)\n\n            if func(child) < func(parents[sorted_indices[0]]):\n                population[sorted_indices[-1]] = child\n\n            evaluations += 1\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "GeneticAlgorithm", "description": "Genetic Algorithm with Adaptive Mutation Rate and Crossover Probability", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a7876fc2-5e95-4b08-a3b4-bf39c4a4205d", "metadata": {}, "mutation_prompt": null}
{"id": "3be3541f-3430-4630-a92a-450b9b9fb77e", "solution": "import numpy as np\n\nclass GeneticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.mutation_rate = 0.1\n        self.crossover_prob = 0.8\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        def mutate(child):\n            mutation_mask = np.random.rand(self.dim) < self.mutation_rate\n            child[mutation_mask] += np.random.uniform(-0.5, 0.5, np.sum(mutation_mask))\n            return child\n\n        def crossover(parent1, parent2):\n            mask = np.random.rand(self.dim) < self.crossover_prob\n            child = parent1.copy()\n            child[mask] = parent2[mask]\n            return child\n\n        population = initialize_population()\n        evaluations = 0\n\n        while evaluations < self.budget:\n            sorted_indices = np.argsort([func(individual) for individual in population])\n            parents = population[sorted_indices[:2]]\n\n            child = crossover(parents[0], parents[1])\n            child = mutate(child)\n\n            if func(child) < func(parents[sorted_indices[0]]):\n                population[sorted_indices[-1]] = child\n\n            evaluations += 1\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "GeneticAlgorithm", "description": "Genetic Algorithm with Adaptive Mutation Rate and Crossover Probability", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a7876fc2-5e95-4b08-a3b4-bf39c4a4205d", "metadata": {}, "mutation_prompt": null}
{"id": "b5d67bb0-8600-4f74-9188-f11edef1af24", "solution": "import numpy as np\n\nclass DifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.mutation_factor = 0.5\n        self.crossover_prob = 0.9\n        self.archive_size = 10\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        def mutate(target, population):\n            indices = np.random.choice(len(population), 3, replace=False)\n            donor = population[indices[0]] + self.mutation_factor * (population[indices[1]] - population[indices[2]])\n            return donor\n\n        def crossover(target, donor):\n            child = np.where(np.random.rand(self.dim) < self.crossover_prob, donor, target)\n            return child\n\n        population = initialize_population()\n        archive = np.zeros((self.archive_size, self.dim))\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for idx, target in enumerate(population):\n                donor = mutate(target, population)\n                child = crossover(target, donor)\n\n                if func(child) < func(target):\n                    population[idx] = child\n\n                archive = np.vstack((archive, target))\n                archive = archive[np.argsort([func(individual) for individual in archive])[:self.archive_size]]\n\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "DifferentialEvolution", "description": "Novel Differential Evolution algorithm with dynamic population size and adaptive mutation strategy for black box optimization.", "configspace": "", "generation": 3, "fitness": 0.11031543936858093, "feedback": "The algorithm DifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.14.", "error": "", "parent_id": "a7876fc2-5e95-4b08-a3b4-bf39c4a4205d", "metadata": {"aucs": [0.23980140494119018, 0.17804272070062455, 0.17788690470884672, 0.1523226427247968, 0.1511043010704598, 0.19890387200760695, 0.18560584679150283, 0.17076228648377856, 0.15148770749657947, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.054388866213387566, 0.0425372235713638, 0.04550840323282368, 0.0717044121101168, 0.050379672430560296, 0.04056199104707359, 0.050248256158643034, 0.03731288576853509, 0.03914011758942049, 0.03126806294794637, 0.03036540923884712, 0.026573395635922537, 0.04877393548839304, 0.024011272420670138, 0.029510907780241014, 0.030927506632632107, 0.022925918742625395, 0.023288225517734684, 0.6551186199051529, 0.5045851744228909, 0.7222813208642208, 0.5764222919841866, 0.6954285792043781, 0.6851180583062504, 0.6522067848602355, 0.8956726411006745, 0.8122469985543194, 0.05994947646931559, 0.0320707800899227, 0.059373835957297505, 0.039099360592408816, 0.09955022935763191, 0.053761008493968254, 0.04270708871410256, 0.041652797419642784, 0.07107222676336933, 0.12563161892233254, 0.11891103365445566, 0.149629085591669, 0.11176989345334909, 0.12726483870918215, 0.056832084397155036, 0.13169370670021197, 0.0878373076103075, 0.13612396012730987, 0.00013312107012752872, 0.022621483181398117, 0.0373286081487213, 0.0204406996359352, 0.03732094289580323, 0.013775629600353723, 0.01452027617393492, 0.0031815926268956574, 0.027890289401987012, 0.06645991286116437, 0.05858511440310499, 0.05858511440310499, 0.09652166384294691, 0.05858511440310499, 0.06440898303902465, 0.06282189695222118, 0.06326326829057793, 0.05858511440310499, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008064831012742468, 0.014437338446767867, 0.029648592651907335, 0.021612577038419456, 0.007486166013823792, 0.024434000933851174, 0.026970856677647315, 0.018135640165290345, 0.03164604567554363, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00149575535594193, 9.999999999998899e-05, 0.00022524146524305344, 0.0014837328881350809, 9.999999999998899e-05, 0.008018442909569101, 9.999999999998899e-05, 0.002071582406926842, 9.999999999998899e-05, 0.19154119379717927, 0.19326289502966465, 0.20663569058442477, 0.20379044955863335, 0.18619767095563922, 0.20071145707275573, 0.21335550008923576, 0.19518998629308326, 0.19252682702920454, 0.0333830386012085, 0.0393521561028658, 0.0408644309164371, 0.04330475890127816, 0.03274002497306827, 0.052416117576669086, 0.041074101619204884, 0.029632199651701385, 0.0510098983670938, 0.09969117432022956, 0.11430820580900869, 0.12040343989573232, 0.11984782097622915, 0.11499117709240614, 0.1053912245979014, 0.09487449602706943, 0.10943920334390911, 0.08754366413821213, 0.14810495947214464, 0.13693040101672327, 0.163413018172336, 0.17638314593633897, 0.16826351769001213, 0.1545786665711445, 0.15025170758187434, 0.17648089142031897, 0.15071408649474327, 0.0964833327422201, 0.09075053185950654, 0.10950428484902153, 0.11253960619707781, 0.10263984192437037, 0.09363024766027594, 0.09925130161763684, 0.11070485909711225, 0.09954083558094295, 0.26018398788340835, 0.26016454797873556, 0.26016987452957563, 0.26017950107181986, 0.2601647931995631, 0.26016730972266366, 0.2601823660224408, 0.26016548708664655, 0.26017062443268046, 0.15402049602285772, 0.09944526237510798, 0.12109360283890513, 0.12805862105120047, 0.10027401882965514, 0.1484136598209157, 0.1529384909181134, 0.13369150545190556, 0.09789191396390629, 0.12961537885737218, 0.10683935630712782, 0.10303813423703034, 0.11943184263528406, 0.1408854614578633, 0.10756605678913389, 0.11206297828190692, 0.10779919606041821, 0.1467193671954523, 0.14577511079439154, 0.10134460039618787, 0.07930329812780401, 0.08628150454994032, 0.09559234456665255, 0.11766664418999084, 0.08947831345241375, 0.07703592483500765, 0.10941337284843489, 0.1634333892238039, 0.15203529348037736, 0.16638216350970758, 0.1750580100003819, 0.14951445021744625, 0.15213036619656017, 0.15491171722895547, 0.1632403640840272, 0.17238809087388418, 0.07314786790963057, 0.03989528990675517, 0.05457110283115307, 0.05842097734721974, 0.05056176915076671, 0.05252003538869854, 0.04466127135221942, 0.04497364546052718, 0.04020553081142042]}, "mutation_prompt": null}
{"id": "ff6a9a4d-524c-431f-bd74-a03d3583cfbf", "solution": "import numpy as np\n\nclass QuantumEvolutionaryAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.mutation_prob = 0.2\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        def quantum_bit_flip(individual):\n            mutated_individual = individual.copy()\n            for i in range(self.dim):\n                if np.random.rand() < self.mutation_prob:\n                    mutated_individual[i] = 5.0 - mutated_individual[i]\n            return mutated_individual\n\n        population = initialize_population()\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for idx, target in enumerate(population):\n                mutated_individual = quantum_bit_flip(target)\n\n                if func(mutated_individual) < func(target):\n                    population[idx] = mutated_individual\n\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "QuantumEvolutionaryAlgorithm", "description": "Novel Quantum-inspired Evolutionary Algorithm utilizing quantum bit flipping to explore the search space efficiently for black box optimization.", "configspace": "", "generation": 4, "fitness": 0.0626592492562122, "feedback": "The algorithm QuantumEvolutionaryAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.06 with standard deviation 0.06.", "error": "", "parent_id": "b5d67bb0-8600-4f74-9188-f11edef1af24", "metadata": {"aucs": [0.1185386703724205, 0.10526480700604879, 0.11418368865870976, 0.10144569437416318, 0.10729973428650397, 0.15906696696992262, 0.09971189293079896, 0.14195131841987663, 0.06862013434034275, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02562217677220946, 0.018451232616239932, 0.02550471316027647, 0.03924841438102189, 0.007487504235487941, 0.009425532117621871, 0.018242817369455766, 0.020984471445409825, 0.012148453832736994, 0.019265651022049468, 0.010767403103347117, 0.014383250854994034, 0.02768111021769204, 0.01981686675441774, 0.016662585113579542, 0.053927987135942046, 0.01714718672617488, 0.009610392100804388, 0.11643854525484587, 0.12519861645917996, 0.09641257085015698, 0.06830788017738054, 0.10258303275501623, 0.0641196531126258, 0.0673367052216941, 0.08422746122341596, 0.062515082422683, 0.06251526257832885, 0.004234258071107777, 0.010920865693990867, 9.999999999998899e-05, 0.00031547499169881643, 0.018953770150760052, 0.003438129013840663, 0.015710786561418666, 0.0007158340398842888, 0.1298938514317859, 0.11408457119711857, 0.08146829421775492, 0.12239737288082475, 0.07262100110725989, 0.07183832764204212, 0.06469304768117468, 0.05920632992367991, 0.09093297876621254, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03272407204821648, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02300265946994784, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12292619615059597, 0.15738749657323203, 0.1483632704237149, 0.14279757008853355, 0.15932749267162638, 0.15159007434247418, 0.16100501855229654, 0.11804210977298701, 0.16356278157553972, 0.03364502557876481, 0.015707244132719067, 0.0228197499183993, 0.03255882620500683, 0.007056111412349297, 0.017591177527858215, 0.009008665805772753, 0.0010739776044889071, 0.02675766679738989, 0.0908960414860066, 0.09971864879717118, 0.11818395403310367, 0.12557061687620152, 0.13045537947454067, 0.11541628066773846, 0.15084469669220202, 0.10075483544178077, 0.1492449296531777, 0.15079172606021185, 0.14831270725175782, 0.1761402300159356, 0.13793708404225558, 0.1333475834846093, 0.14538974496891366, 0.13939034228082414, 0.17742600188332858, 0.13276195643671396, 0.07116694532258083, 0.0853364837629984, 0.09901498581569335, 0.09364514038994243, 0.06948530052456736, 0.08057526253269842, 0.08482934511597762, 0.10585546973790039, 0.08907684624280288, 0.11935559113929739, 0.12087074358190153, 0.1407014286022722, 0.12319318216565645, 0.1244890248951197, 0.1346783674707307, 0.1314433993876284, 0.1357905029349069, 0.13842253248190795, 0.09704632556557757, 0.11215958394601422, 0.12416410703953318, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1365417702975643, 0.11951244513100534, 0.13289260807400294, 0.09468838058804718, 0.11596274749060065, 0.09813593548887933, 0.10875250723290719, 0.12076321990894523, 0.09729379376287584, 0.11837003021233994, 0.16121109134720968, 0.12463368263539776, 0.11036912918083253, 0.10255229833664803, 0.1242987795198296, 0.07868823844944961, 0.1478608586073511, 0.1057210304199343, 0.10969657622389783, 0.07843226477213172, 0.12147624154267556, 0.1629081492969261, 0.15440099563919374, 0.16255355699910268, 0.1701100547724973, 0.16102372331856918, 0.18829881948622273, 0.18120723298005847, 0.14951716711829355, 0.15617285458387997, 0.046743219365123156, 0.029314893979650924, 0.031379646478672085, 0.029570254159548837, 0.03726457067523936, 0.02466147556521936, 0.024003098989404337, 0.03793581138602875, 0.028607810727453775]}, "mutation_prompt": null}
{"id": "f366a7cf-3cfe-435c-8afb-92fb026f4fce", "solution": "import numpy as np\n\nclass DynamicMetaheuristicOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 50\n        self.mutation_factor = 0.5\n        self.crossover_prob = 0.9\n        self.archive_size = 10\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n\n        def mutate(target, population):\n            indices = np.random.choice(len(population), 3, replace=False)\n            donor = population[indices[0]] + self.mutation_factor * (population[indices[1]] - population[indices[2]])\n            return donor\n\n        def crossover(target, donor):\n            child = np.where(np.random.rand(self.dim) < self.crossover_prob, donor, target)\n            return child\n\n        population = initialize_population()\n        archive = np.zeros((self.archive_size, self.dim))\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for idx, target in enumerate(population):\n                donor = mutate(target, population)\n                child = crossover(target, donor)\n\n                if func(child) < func(target):\n                    population[idx] = child\n\n                archive = np.vstack((archive, target))\n                archive = archive[np.argsort([func(individual) for individual in archive])[:self.archive_size]]\n\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "DynamicMetaheuristicOptimization", "description": "Novel Algorithm of Metaheuristic Optimization with Dynamic Adaptation of Population and Mutation Strategy for Black Box Optimization", "configspace": "", "generation": 5, "fitness": 0.11031543936858093, "feedback": "The algorithm DynamicMetaheuristicOptimization got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.14.", "error": "", "parent_id": "b5d67bb0-8600-4f74-9188-f11edef1af24", "metadata": {"aucs": [0.23980140494119018, 0.17804272070062455, 0.17788690470884672, 0.1523226427247968, 0.1511043010704598, 0.19890387200760695, 0.18560584679150283, 0.17076228648377856, 0.15148770749657947, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.054388866213387566, 0.0425372235713638, 0.04550840323282368, 0.0717044121101168, 0.050379672430560296, 0.04056199104707359, 0.050248256158643034, 0.03731288576853509, 0.03914011758942049, 0.03126806294794637, 0.03036540923884712, 0.026573395635922537, 0.04877393548839304, 0.024011272420670138, 0.029510907780241014, 0.030927506632632107, 0.022925918742625395, 0.023288225517734684, 0.6551186199051529, 0.5045851744228909, 0.7222813208642208, 0.5764222919841866, 0.6954285792043781, 0.6851180583062504, 0.6522067848602355, 0.8956726411006745, 0.8122469985543194, 0.05994947646931559, 0.0320707800899227, 0.059373835957297505, 0.039099360592408816, 0.09955022935763191, 0.053761008493968254, 0.04270708871410256, 0.041652797419642784, 0.07107222676336933, 0.12563161892233254, 0.11891103365445566, 0.149629085591669, 0.11176989345334909, 0.12726483870918215, 0.056832084397155036, 0.13169370670021197, 0.0878373076103075, 0.13612396012730987, 0.00013312107012752872, 0.022621483181398117, 0.0373286081487213, 0.0204406996359352, 0.03732094289580323, 0.013775629600353723, 0.01452027617393492, 0.0031815926268956574, 0.027890289401987012, 0.06645991286116437, 0.05858511440310499, 0.05858511440310499, 0.09652166384294691, 0.05858511440310499, 0.06440898303902465, 0.06282189695222118, 0.06326326829057793, 0.05858511440310499, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008064831012742468, 0.014437338446767867, 0.029648592651907335, 0.021612577038419456, 0.007486166013823792, 0.024434000933851174, 0.026970856677647315, 0.018135640165290345, 0.03164604567554363, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00149575535594193, 9.999999999998899e-05, 0.00022524146524305344, 0.0014837328881350809, 9.999999999998899e-05, 0.008018442909569101, 9.999999999998899e-05, 0.002071582406926842, 9.999999999998899e-05, 0.19154119379717927, 0.19326289502966465, 0.20663569058442477, 0.20379044955863335, 0.18619767095563922, 0.20071145707275573, 0.21335550008923576, 0.19518998629308326, 0.19252682702920454, 0.0333830386012085, 0.0393521561028658, 0.0408644309164371, 0.04330475890127816, 0.03274002497306827, 0.052416117576669086, 0.041074101619204884, 0.029632199651701385, 0.0510098983670938, 0.09969117432022956, 0.11430820580900869, 0.12040343989573232, 0.11984782097622915, 0.11499117709240614, 0.1053912245979014, 0.09487449602706943, 0.10943920334390911, 0.08754366413821213, 0.14810495947214464, 0.13693040101672327, 0.163413018172336, 0.17638314593633897, 0.16826351769001213, 0.1545786665711445, 0.15025170758187434, 0.17648089142031897, 0.15071408649474327, 0.0964833327422201, 0.09075053185950654, 0.10950428484902153, 0.11253960619707781, 0.10263984192437037, 0.09363024766027594, 0.09925130161763684, 0.11070485909711225, 0.09954083558094295, 0.26018398788340835, 0.26016454797873556, 0.26016987452957563, 0.26017950107181986, 0.2601647931995631, 0.26016730972266366, 0.2601823660224408, 0.26016548708664655, 0.26017062443268046, 0.15402049602285772, 0.09944526237510798, 0.12109360283890513, 0.12805862105120047, 0.10027401882965514, 0.1484136598209157, 0.1529384909181134, 0.13369150545190556, 0.09789191396390629, 0.12961537885737218, 0.10683935630712782, 0.10303813423703034, 0.11943184263528406, 0.1408854614578633, 0.10756605678913389, 0.11206297828190692, 0.10779919606041821, 0.1467193671954523, 0.14577511079439154, 0.10134460039618787, 0.07930329812780401, 0.08628150454994032, 0.09559234456665255, 0.11766664418999084, 0.08947831345241375, 0.07703592483500765, 0.10941337284843489, 0.1634333892238039, 0.15203529348037736, 0.16638216350970758, 0.1750580100003819, 0.14951445021744625, 0.15213036619656017, 0.15491171722895547, 0.1632403640840272, 0.17238809087388418, 0.07314786790963057, 0.03989528990675517, 0.05457110283115307, 0.05842097734721974, 0.05056176915076671, 0.05252003538869854, 0.04466127135221942, 0.04497364546052718, 0.04020553081142042]}, "mutation_prompt": null}
{"id": "ed22957a-ca0c-4013-b225-1d75c52a62ef", "solution": "import numpy as np\n\nclass AdaptiveFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.beta_max = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        def attractiveness(distance):\n            return self.beta_min + (self.beta_max - self.beta_min) * np.exp(-self.alpha * distance)\n\n        population = initialize_population()\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i, x in enumerate(population):\n                for j, y in enumerate(population):\n                    if func(y) < func(x):\n                        distance = np.linalg.norm(x - y)\n                        beta = attractiveness(distance)\n                        population[i] += beta * (y - x) + np.random.uniform(-1, 1, self.dim)\n\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "AdaptiveFireflyAlgorithm", "description": "An Adaptive Firefly Algorithm utilizing light absorption and bioluminescence for enhanced exploration and exploitation in black box optimization.", "configspace": "", "generation": 6, "fitness": 0.12369069704367036, "feedback": "The algorithm AdaptiveFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.09.", "error": "", "parent_id": "b5d67bb0-8600-4f74-9188-f11edef1af24", "metadata": {"aucs": [0.2863838965539548, 0.2442981681040285, 0.26602831745869704, 0.26354501969518906, 0.23374741494468732, 0.2520804511881911, 0.24903603779904082, 0.23781747718083313, 0.2565314773643015, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06448759149802119, 0.07560677739897548, 0.05288625289187732, 0.07590852480962473, 0.07306164383768887, 0.06555875130294808, 0.05701474883241464, 0.07223196414963617, 0.07046808728149467, 0.062035308384853716, 0.054589330112734924, 0.05215136197454717, 0.05953691601043898, 0.05201005984281348, 0.06003223582214556, 0.05909866023826449, 0.04506441428592134, 0.04878082915812687, 0.32918877765577514, 0.3531192601636106, 0.3373892325316751, 0.18824549258269463, 0.3218771750158914, 0.38830726114052705, 0.4832885083285604, 0.46288845605202145, 0.4766450025411073, 0.12506148290740637, 0.10643599552506244, 0.09910021038478467, 0.10922171367380729, 0.1362877850763372, 0.1115287576887567, 0.12091579994317925, 0.0800932449851629, 0.14581840920916633, 0.19115201572191165, 0.1870297767498601, 0.17638753870178625, 0.22766716922559949, 0.18382280801822204, 0.15214693997547257, 0.1266602350325149, 0.1372997921414182, 0.17647474903532, 0.03201962377333967, 0.05644954061080931, 0.06629995676231559, 9.999999999998899e-05, 0.05413677184615595, 0.06999853763703345, 0.0572900639739784, 0.07612726800418546, 0.06297457218134239, 0.09995498709812511, 0.09260061039941447, 0.05926619428151858, 0.08442035323936747, 0.08916829088186495, 0.07230440426977713, 0.08828493539464632, 0.03595864806675997, 0.06374514438058232, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07382760346780248, 0.043115885913548535, 0.08410840594401192, 0.022866555181442205, 0.009859401461231987, 0.017451734212780345, 0.05819907720864026, 0.058220102449270006, 0.12048904347377065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018238171824565663, 0.039002566428463115, 0.004715974733862871, 0.018088431022060703, 0.028059633719476507, 0.039458616072270525, 0.015391910913744367, 0.03699101669036209, 0.02168705504045887, 0.27282565648850177, 0.26369430712652, 0.24645056475374139, 0.24857529921070032, 0.26152900100638954, 0.255601062257376, 0.25352835698829224, 0.2737256903155004, 0.2472642370417656, 0.058675513560891734, 0.06011040299056569, 0.059877909128208895, 0.07106261116420298, 0.06242432451713287, 0.08456149776193289, 0.07097144698840763, 0.06145995891819056, 0.07482230868863227, 0.10736277319706367, 0.12440764940401183, 0.11818935407046993, 0.11253221750159115, 0.13900950536009937, 0.14186980514803238, 0.15056064592529295, 0.12102120979690967, 0.11417408953817032, 0.17543352516045252, 0.19720992042802643, 0.22405953709995796, 0.2281814264723423, 0.21260737136346886, 0.19866183577094743, 0.20295990465176394, 0.2202156657540989, 0.2023746723041342, 0.1530946245918502, 0.14714118990121827, 0.1600875078036308, 0.143526988677947, 0.15006535399410836, 0.1617755979409674, 0.14872540372271292, 0.15668625155330063, 0.1461851324440715, 0.17123997279991376, 0.17442181063153417, 0.18550842070625695, 0.18855213671507176, 0.1903259297785942, 0.1683303810067307, 0.20732440959048604, 0.16558435449009135, 0.19564881395322486, 0.17273033778604263, 0.1701681103789795, 0.16570489314379833, 0.1533422684764788, 0.16032707007880276, 0.16219303288200304, 0.15075288229940964, 0.16213178514701354, 0.16600612038064388, 0.1634453642043534, 0.16771000400041414, 0.16891097414554512, 0.2850752972915659, 0.1623364556154444, 0.16682565168506813, 0.15061858741650935, 0.14133742225114343, 0.14815317394953742, 0.21357035980135297, 0.17105428196960015, 0.07142593169732991, 0.135983660782384, 0.1408047904847446, 0.11450349181740782, 0.14028048263604054, 0.19609943054287782, 0.19089018523780343, 0.18556748849892946, 0.18066327119290437, 0.16896361213097644, 0.1581406737281129, 0.16831333700044293, 0.17854456561745924, 0.16936440738687109, 0.17466327396647308, 0.16820811779173128, 0.08348182300670126, 0.06757603761850095, 0.06052211997679391, 0.06630536458116476, 0.07541311372810544, 0.061578798573800664, 0.07172477258223176, 0.08297689638310712, 0.07296890672263567]}, "mutation_prompt": null}
{"id": "1e6e6d75-2c3f-46ee-a3c9-4a961df0685b", "solution": "import numpy as np\n\nclass EnhancedAdaptiveFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.beta_max = 1.0\n        self.probability = 0.2\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        def attractiveness(distance):\n            return self.beta_min + (self.beta_max - self.beta_min) * np.exp(-self.alpha * distance)\n\n        population = initialize_population()\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i, x in enumerate(population):\n                for j, y in enumerate(population):\n                    if func(y) < func(x) and np.random.rand() < self.probability:\n                        distance = np.linalg.norm(x - y)\n                        beta = attractiveness(distance)\n                        population[i] += beta * (y - x) + np.random.uniform(-1, 1, self.dim)\n\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "EnhancedAdaptiveFireflyAlgorithm", "description": "Enhancing the Adaptive Firefly Algorithm by incorporating a dynamic probability mechanism to selectively update individual lines for improved optimization performance.", "configspace": "", "generation": 7, "fitness": 0.07928666002068822, "feedback": "The algorithm EnhancedAdaptiveFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": "ed22957a-ca0c-4013-b225-1d75c52a62ef", "metadata": {"aucs": [0.1797665639470979, 0.1934985709957735, 0.20260871646681855, 0.1600711141198724, 0.1595826384929514, 0.18332997401060303, 0.1640845426566948, 0.16313282372150606, 0.14450445744884455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03782334402099763, 0.03794275610027398, 0.03702551997429715, 0.0409717396202115, 0.039727143651243746, 0.06015709182752238, 0.047154510672282934, 0.043682267485338544, 0.03983948566634177, 0.030876312881945145, 0.021885869093853927, 0.024349366613685586, 0.03244542005717854, 0.030139307597952247, 0.02746534473017692, 0.03315714408547865, 0.021478480078450102, 0.018803884860335907, 0.0526336917912964, 0.053990529034989465, 0.04538010133148962, 0.06368601710583821, 0.04937436390337313, 0.05452363854344988, 0.06812053460124445, 0.05130839115912733, 0.05517247017296245, 0.06517239219074311, 0.04654107374088523, 0.015258915235918047, 0.06362368407593533, 0.029557693164202647, 0.05307402586633925, 0.017170881588029596, 0.030306035102080076, 0.03940358324300941, 0.1443755444689283, 0.1710530643681597, 0.16948865285138925, 0.14070179526200932, 0.1386259202750818, 0.05187713759720214, 0.0960780980339665, 0.12300289800458974, 0.13453615568476074, 0.007417934726171582, 0.026775870845703653, 0.025523059999788322, 0.010851954968770783, 0.00975471075065526, 9.999999999998899e-05, 0.0328978942749345, 0.012388238339925528, 0.020010640947808467, 0.053707835482364685, 0.028219467936411502, 0.048965838189051314, 0.029644319818703524, 0.05415219776730151, 0.0281494091298089, 0.03396303884645968, 0.06149492462040729, 0.02140178401765913, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006287096563015404, 0.016829758560534147, 0.05230729596511374, 0.010400325516502051, 0.0154753849824798, 0.0199958967606233, 0.02163428098181175, 0.05958657259398792, 0.02313479847129274, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013474338287667864, 0.0016581752773141556, 0.00033149583937630567, 9.999999999998899e-05, 0.002708950994274373, 0.0018679384524075138, 9.999999999998899e-05, 0.0021567648561507946, 0.22555836503909688, 0.2229041428904357, 0.2128147200886482, 0.20413041328330295, 0.14947543656784068, 0.16945518616775057, 0.22545198974708358, 0.17652164956504368, 0.212267105457964, 0.03489861493719981, 0.01734439912448904, 0.03279173341393038, 0.05082933956061875, 0.025270807814897545, 0.04527185839212977, 0.04226503836875617, 0.03259900456672671, 0.043426041722789854, 0.10387818836124918, 0.11610190183748326, 0.11822231154110419, 0.11365468227455788, 0.10911626027505861, 0.11515596786118698, 0.09850090039094284, 0.11704595397485607, 0.08148613860971365, 0.1648222941051064, 0.14043904606093816, 0.17067303079580765, 0.17389383483826204, 0.16512841843636794, 0.16751158423194978, 0.14224714557614593, 0.1776221931423384, 0.1634913615791882, 0.10013044029207774, 0.06821574830206223, 0.10389599330536492, 0.10932926479413596, 0.11679837334957699, 0.10964334963891709, 0.09886487908171204, 0.11389127057545778, 0.11186281256702735, 0.15691491314872963, 0.16161328032171496, 0.1882463478336719, 0.16623501831294452, 0.1521878788450396, 0.15874215277948, 0.16585200692223423, 0.15909342381633018, 0.1520280426971622, 0.12267882544178921, 0.14186733335112844, 0.14295091190054554, 0.14527284819154707, 0.15552180061313792, 0.1326737908281228, 0.12041386254218145, 0.14846021127098974, 0.12678519552866752, 0.14134276612934937, 0.14184879050850618, 0.10658425746329381, 0.1451586458682892, 0.12076337156869488, 0.09951455572576373, 0.11811631125458733, 0.10501402820571404, 0.10976459960632223, 0.16253678115617198, 0.14504784824675754, 0.24368242619290614, 0.10146689527689867, 0.06844981772000625, 0.07485555786042208, 0.08946913536074641, 0.09305475816213071, 0.09346365479774121, 0.1579842173819077, 0.13775531843576028, 0.1541662440532271, 0.14498102541496483, 0.1504457649540576, 0.14867943704685893, 0.15511691423731777, 0.14620305037940562, 0.15784234407892817, 0.05372424739631532, 0.04784502796727008, 0.04151747087881286, 0.0553349818262443, 0.05577171203109377, 0.05679029745106834, 0.06338748714484499, 0.054169700798750275, 0.04794911545450964]}, "mutation_prompt": null}
{"id": "7cababad-3c00-4c04-86f9-980d3a18d431", "solution": "import numpy as np\n\nclass EnhancedAdaptiveFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.beta_max = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        def attractiveness(distance):\n            return self.beta_min + (self.beta_max - self.beta_min) * np.exp(-self.alpha * distance)\n\n        population = initialize_population()\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i, x in enumerate(population):\n                for j, y in enumerate(population):\n                    if func(y) < func(x):\n                        distance = np.linalg.norm(x - y)\n                        beta = attractiveness(distance)\n                        population[i] += beta * (y - x) + np.random.uniform(-1, 1, self.dim)\n                        \n                        # Introduce dynamic update of alpha and beta parameters\n                        self.alpha = max(0.1, self.alpha - 0.001)  # Update alpha\n                        self.beta_max = min(1.0, self.beta_max + 0.001)  # Update beta_max\n\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "EnhancedAdaptiveFireflyAlgorithm", "description": "An Enhanced Adaptive Firefly Algorithm with Dynamic Attractiveness Adjustment for Black Box Optimization.", "configspace": "", "generation": 8, "fitness": 0.12775231452930796, "feedback": "The algorithm EnhancedAdaptiveFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.11.", "error": "", "parent_id": "ed22957a-ca0c-4013-b225-1d75c52a62ef", "metadata": {"aucs": [0.2612715533791654, 0.24214928407999392, 0.27187573079385685, 0.2617617353008166, 0.24437174493446479, 0.2674155308526446, 0.2632320531059177, 0.22707380374186548, 0.2895253580397972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06382085135311244, 0.08130649317455341, 0.06340350882876211, 0.07079933537785421, 0.056852731421997094, 0.07875871667757861, 0.05547650355155309, 0.0776872371428442, 0.07499658554084077, 0.05353650535798715, 0.05073105920677623, 0.047539468307977395, 0.050733612073529, 0.052597272646912496, 0.05791639463781573, 0.05215852888772843, 0.04797600460953633, 0.05062655829661833, 0.5218984410519669, 0.4651756300388592, 0.5120300086122345, 0.36328644811177546, 0.3329719536802599, 0.5378887123747759, 0.5496151483427726, 0.32929000465647096, 0.5921257115629572, 0.14383554374786578, 0.10323552273683667, 0.11344556871185829, 0.12776397524524963, 0.12203565219439438, 0.11668408493842819, 0.1290503880399947, 0.10181191861989025, 0.14251804200577167, 0.2047876016472131, 0.17852854910558402, 0.17336192044104104, 0.2137867719587524, 0.19476616676063463, 0.16245924226917452, 0.11601167847576654, 0.1481617061948025, 0.19083766255131118, 0.04728914411771146, 0.036265143220594265, 0.04290234463777143, 0.02360684624154097, 0.02560352407676869, 0.048178317157454686, 0.06392635477629771, 0.07251083716158824, 0.07668558912768808, 0.09051555570946379, 0.07293990145048246, 0.05523919240948039, 0.06948482498657449, 0.05774148432738535, 0.1049401677217513, 0.09371440383124685, 0.03501427888060349, 0.07667669860517601, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09126296775468834, 0.039764121552734455, 0.08284271450964753, 0.009831994687773848, 0.023907023065006028, 0.02787574308634444, 0.04309051527143004, 0.06572470200343705, 0.06808169105074446, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023532998309874875, 0.017700269396697, 0.02762447815818847, 0.018874872803021914, 0.022620542080770467, 0.016452620407960916, 0.015473870969213155, 0.021595237697329517, 0.028904298165335462, 0.26371328856578935, 0.2949242046519096, 0.25406614548851736, 0.24176019535589732, 0.26330335243811365, 0.2350785590404757, 0.2765455622275049, 0.2571447786797073, 0.26154070752607383, 0.0634924949891007, 0.06416743312485118, 0.06288238511649613, 0.07294986730700004, 0.056882672133804935, 0.07266305666576933, 0.06212509573131264, 0.06079060203052633, 0.07057661054513098, 0.11759739702402894, 0.16161316538704928, 0.11999411140637217, 0.12559038653272292, 0.1230549843481985, 0.11586726348677023, 0.15390729686190274, 0.13234251483151016, 0.11223170990258824, 0.17274797846229173, 0.17561842321791332, 0.23074822521909677, 0.2015384636340457, 0.20005673874325058, 0.21277132353349948, 0.20493453326951405, 0.21986722834467032, 0.19455555535260316, 0.14017165215501626, 0.14283677532855676, 0.16649110667373612, 0.15161163630488683, 0.1444154970773085, 0.15945027968070657, 0.13581565983140864, 0.15586195237838252, 0.14587997673787834, 0.16589777959887775, 0.1674407266813258, 0.1698229311409204, 0.19963739852140172, 0.17453887130050538, 0.16900569050583925, 0.16515534070377547, 0.16258053614952916, 0.17998062925903924, 0.16152416444210682, 0.16437909566140185, 0.16799772036608862, 0.1716904672983528, 0.16775399630877197, 0.16432446905410014, 0.15352952313661294, 0.16360995676464152, 0.1628017979006663, 0.16785507472816685, 0.17264151494379387, 0.16861034032804278, 0.2771189617084562, 0.1729552087501539, 0.10903263549019615, 0.14281466756847672, 0.11892327809855119, 0.3376285984790295, 0.21897351383383323, 0.19690769017791987, 0.11435963128450943, 0.16630333821196996, 0.1513423469615831, 0.1489582454855396, 0.12898855214279514, 0.20585314850826142, 0.17639569760813067, 0.1694907514114128, 0.16264831539129354, 0.16366725372448943, 0.1641498803128998, 0.17859399629940054, 0.15721294167705258, 0.16741514964345805, 0.15730449278959768, 0.17064790753151138, 0.07574546138378646, 0.060926528853360806, 0.061666712694824155, 0.07332105920584586, 0.06293432580660208, 0.06781393110426504, 0.0524212621870509, 0.061942723176275694, 0.08303137388121828]}, "mutation_prompt": null}
{"id": "581908db-4639-4ef6-8ed5-ca19b343902a", "solution": "import numpy as np\n\nclass EnhancedAdaptiveFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.beta_max = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        def attractiveness(distance):\n            return self.beta_min + (self.beta_max - self.beta_min) * np.exp(-self.alpha * distance)\n\n        population = initialize_population()\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i, x in enumerate(population):\n                for j, y in enumerate(population):\n                    if func(y) < func(x):\n                        distance = np.linalg.norm(x - y)\n                        beta = attractiveness(distance)\n                        population[i] += beta * (y - x) + np.random.uniform(-1, 1, self.dim)\n                        \n                        # Introduce dynamic update of alpha and beta parameters\n                        self.alpha = max(0.1, self.alpha - 0.001)  # Update alpha\n                        self.beta_max = min(1.0, self.beta_max + 0.001)  # Update beta_max\n\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "EnhancedAdaptiveFireflyAlgorithm", "description": "An Enhanced Adaptive Firefly Algorithm with Dynamic Attractiveness Adjustment for Black Box Optimization.", "configspace": "", "generation": 9, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7cababad-3c00-4c04-86f9-980d3a18d431", "metadata": {"aucs": [0.2612715533791654, 0.24214928407999392, 0.27187573079385685, 0.2617617353008166, 0.24437174493446479, 0.2674155308526446, 0.2632320531059177, 0.22707380374186548, 0.2895253580397972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06382085135311244, 0.08130649317455341, 0.06340350882876211, 0.07079933537785421, 0.056852731421997094, 0.07875871667757861, 0.05547650355155309, 0.0776872371428442, 0.07499658554084077, 0.05353650535798715, 0.05073105920677623, 0.047539468307977395, 0.050733612073529, 0.052597272646912496, 0.05791639463781573, 0.05215852888772843, 0.04797600460953633, 0.05062655829661833, 0.5218984410519669, 0.4651756300388592, 0.5120300086122345, 0.36328644811177546, 0.3329719536802599, 0.5378887123747759, 0.5496151483427726, 0.32929000465647096, 0.5921257115629572, 0.14383554374786578, 0.10323552273683667, 0.11344556871185829, 0.12776397524524963, 0.12203565219439438, 0.11668408493842819, 0.1290503880399947, 0.10181191861989025, 0.14251804200577167, 0.2047876016472131, 0.17852854910558402, 0.17336192044104104, 0.2137867719587524, 0.19476616676063463, 0.16245924226917452, 0.11601167847576654, 0.1481617061948025, 0.19083766255131118, 0.04728914411771146, 0.036265143220594265, 0.04290234463777143, 0.02360684624154097, 0.02560352407676869, 0.048178317157454686, 0.06392635477629771, 0.07251083716158824, 0.07668558912768808, 0.09051555570946379, 0.07293990145048246, 0.05523919240948039, 0.06948482498657449, 0.05774148432738535, 0.1049401677217513, 0.09371440383124685, 0.03501427888060349, 0.07667669860517601, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09126296775468834, 0.039764121552734455, 0.08284271450964753, 0.009831994687773848, 0.023907023065006028, 0.02787574308634444, 0.04309051527143004, 0.06572470200343705, 0.06808169105074446, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023532998309874875, 0.017700269396697, 0.02762447815818847, 0.018874872803021914, 0.022620542080770467, 0.016452620407960916, 0.015473870969213155, 0.021595237697329517, 0.028904298165335462, 0.26371328856578935, 0.2949242046519096, 0.25406614548851736, 0.24176019535589732, 0.26330335243811365, 0.2350785590404757, 0.2765455622275049, 0.2571447786797073, 0.26154070752607383, 0.0634924949891007, 0.06416743312485118, 0.06288238511649613, 0.07294986730700004, 0.056882672133804935, 0.07266305666576933, 0.06212509573131264, 0.06079060203052633, 0.07057661054513098, 0.11759739702402894, 0.16161316538704928, 0.11999411140637217, 0.12559038653272292, 0.1230549843481985, 0.11586726348677023, 0.15390729686190274, 0.13234251483151016, 0.11223170990258824, 0.17274797846229173, 0.17561842321791332, 0.23074822521909677, 0.2015384636340457, 0.20005673874325058, 0.21277132353349948, 0.20493453326951405, 0.21986722834467032, 0.19455555535260316, 0.14017165215501626, 0.14283677532855676, 0.16649110667373612, 0.15161163630488683, 0.1444154970773085, 0.15945027968070657, 0.13581565983140864, 0.15586195237838252, 0.14587997673787834, 0.16589777959887775, 0.1674407266813258, 0.1698229311409204, 0.19963739852140172, 0.17453887130050538, 0.16900569050583925, 0.16515534070377547, 0.16258053614952916, 0.17998062925903924, 0.16152416444210682, 0.16437909566140185, 0.16799772036608862, 0.1716904672983528, 0.16775399630877197, 0.16432446905410014, 0.15352952313661294, 0.16360995676464152, 0.1628017979006663, 0.16785507472816685, 0.17264151494379387, 0.16861034032804278, 0.2771189617084562, 0.1729552087501539, 0.10903263549019615, 0.14281466756847672, 0.11892327809855119, 0.3376285984790295, 0.21897351383383323, 0.19690769017791987, 0.11435963128450943, 0.16630333821196996, 0.1513423469615831, 0.1489582454855396, 0.12898855214279514, 0.20585314850826142, 0.17639569760813067, 0.1694907514114128, 0.16264831539129354, 0.16366725372448943, 0.1641498803128998, 0.17859399629940054, 0.15721294167705258, 0.16741514964345805, 0.15730449278959768, 0.17064790753151138, 0.07574546138378646, 0.060926528853360806, 0.061666712694824155, 0.07332105920584586, 0.06293432580660208, 0.06781393110426504, 0.0524212621870509, 0.061942723176275694, 0.08303137388121828]}, "mutation_prompt": null}
{"id": "47c9ef07-65f0-43a3-84eb-20b81e3e2176", "solution": "import numpy as np\n\nclass EnhancedAdaptiveFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.beta_max = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        def attractiveness(distance):\n            return self.beta_min + (self.beta_max - self.beta_min) * np.exp(-self.alpha * distance)\n\n        population = initialize_population()\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i, x in enumerate(population):\n                for j, y in enumerate(population):\n                    if func(y) < func(x):\n                        distance = np.linalg.norm(x - y)\n                        beta = attractiveness(distance)\n                        population[i] += beta * (y - x) + np.random.uniform(-1, 1, self.dim)\n                        \n                        # Introduce dynamic update of alpha and beta parameters\n                        self.alpha = max(0.1, self.alpha - 0.001)  # Update alpha\n                        self.beta_max = min(1.0, self.beta_max + 0.001)  # Update beta_max\n\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "EnhancedAdaptiveFireflyAlgorithm", "description": "An Enhanced Adaptive Firefly Algorithm with Dynamic Attractiveness Adjustment for Black Box Optimization.", "configspace": "", "generation": 9, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7cababad-3c00-4c04-86f9-980d3a18d431", "metadata": {"aucs": [0.2612715533791654, 0.24214928407999392, 0.27187573079385685, 0.2617617353008166, 0.24437174493446479, 0.2674155308526446, 0.2632320531059177, 0.22707380374186548, 0.2895253580397972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06382085135311244, 0.08130649317455341, 0.06340350882876211, 0.07079933537785421, 0.056852731421997094, 0.07875871667757861, 0.05547650355155309, 0.0776872371428442, 0.07499658554084077, 0.05353650535798715, 0.05073105920677623, 0.047539468307977395, 0.050733612073529, 0.052597272646912496, 0.05791639463781573, 0.05215852888772843, 0.04797600460953633, 0.05062655829661833, 0.5218984410519669, 0.4651756300388592, 0.5120300086122345, 0.36328644811177546, 0.3329719536802599, 0.5378887123747759, 0.5496151483427726, 0.32929000465647096, 0.5921257115629572, 0.14383554374786578, 0.10323552273683667, 0.11344556871185829, 0.12776397524524963, 0.12203565219439438, 0.11668408493842819, 0.1290503880399947, 0.10181191861989025, 0.14251804200577167, 0.2047876016472131, 0.17852854910558402, 0.17336192044104104, 0.2137867719587524, 0.19476616676063463, 0.16245924226917452, 0.11601167847576654, 0.1481617061948025, 0.19083766255131118, 0.04728914411771146, 0.036265143220594265, 0.04290234463777143, 0.02360684624154097, 0.02560352407676869, 0.048178317157454686, 0.06392635477629771, 0.07251083716158824, 0.07668558912768808, 0.09051555570946379, 0.07293990145048246, 0.05523919240948039, 0.06948482498657449, 0.05774148432738535, 0.1049401677217513, 0.09371440383124685, 0.03501427888060349, 0.07667669860517601, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09126296775468834, 0.039764121552734455, 0.08284271450964753, 0.009831994687773848, 0.023907023065006028, 0.02787574308634444, 0.04309051527143004, 0.06572470200343705, 0.06808169105074446, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023532998309874875, 0.017700269396697, 0.02762447815818847, 0.018874872803021914, 0.022620542080770467, 0.016452620407960916, 0.015473870969213155, 0.021595237697329517, 0.028904298165335462, 0.26371328856578935, 0.2949242046519096, 0.25406614548851736, 0.24176019535589732, 0.26330335243811365, 0.2350785590404757, 0.2765455622275049, 0.2571447786797073, 0.26154070752607383, 0.0634924949891007, 0.06416743312485118, 0.06288238511649613, 0.07294986730700004, 0.056882672133804935, 0.07266305666576933, 0.06212509573131264, 0.06079060203052633, 0.07057661054513098, 0.11759739702402894, 0.16161316538704928, 0.11999411140637217, 0.12559038653272292, 0.1230549843481985, 0.11586726348677023, 0.15390729686190274, 0.13234251483151016, 0.11223170990258824, 0.17274797846229173, 0.17561842321791332, 0.23074822521909677, 0.2015384636340457, 0.20005673874325058, 0.21277132353349948, 0.20493453326951405, 0.21986722834467032, 0.19455555535260316, 0.14017165215501626, 0.14283677532855676, 0.16649110667373612, 0.15161163630488683, 0.1444154970773085, 0.15945027968070657, 0.13581565983140864, 0.15586195237838252, 0.14587997673787834, 0.16589777959887775, 0.1674407266813258, 0.1698229311409204, 0.19963739852140172, 0.17453887130050538, 0.16900569050583925, 0.16515534070377547, 0.16258053614952916, 0.17998062925903924, 0.16152416444210682, 0.16437909566140185, 0.16799772036608862, 0.1716904672983528, 0.16775399630877197, 0.16432446905410014, 0.15352952313661294, 0.16360995676464152, 0.1628017979006663, 0.16785507472816685, 0.17264151494379387, 0.16861034032804278, 0.2771189617084562, 0.1729552087501539, 0.10903263549019615, 0.14281466756847672, 0.11892327809855119, 0.3376285984790295, 0.21897351383383323, 0.19690769017791987, 0.11435963128450943, 0.16630333821196996, 0.1513423469615831, 0.1489582454855396, 0.12898855214279514, 0.20585314850826142, 0.17639569760813067, 0.1694907514114128, 0.16264831539129354, 0.16366725372448943, 0.1641498803128998, 0.17859399629940054, 0.15721294167705258, 0.16741514964345805, 0.15730449278959768, 0.17064790753151138, 0.07574546138378646, 0.060926528853360806, 0.061666712694824155, 0.07332105920584586, 0.06293432580660208, 0.06781393110426504, 0.0524212621870509, 0.061942723176275694, 0.08303137388121828]}, "mutation_prompt": null}
{"id": "2eb29a71-c785-4fa5-82ac-57076bdd0176", "solution": "import numpy as np\n\nclass EnhancedAdaptiveFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.beta_max = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        def attractiveness(distance):\n            return self.beta_min + (self.beta_max - self.beta_min) * np.exp(-self.alpha * distance)\n\n        population = initialize_population()\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i, x in enumerate(population):\n                for j, y in enumerate(population):\n                    if func(y) < func(x):\n                        distance = np.linalg.norm(x - y)\n                        beta = attractiveness(distance)\n                        population[i] += beta * (y - x) + np.random.uniform(-1, 1, self.dim)\n                        \n                        # Introduce dynamic update of alpha and beta parameters\n                        self.alpha = max(0.1, self.alpha - 0.001)  # Update alpha\n                        self.beta_max = min(1.0, self.beta_max + 0.001)  # Update beta_max\n\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "EnhancedAdaptiveFireflyAlgorithm", "description": "An Enhanced Adaptive Firefly Algorithm with Dynamic Attractiveness Adjustment for Black Box Optimization.", "configspace": "", "generation": 9, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7cababad-3c00-4c04-86f9-980d3a18d431", "metadata": {"aucs": [0.2612715533791654, 0.24214928407999392, 0.27187573079385685, 0.2617617353008166, 0.24437174493446479, 0.2674155308526446, 0.2632320531059177, 0.22707380374186548, 0.2895253580397972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06382085135311244, 0.08130649317455341, 0.06340350882876211, 0.07079933537785421, 0.056852731421997094, 0.07875871667757861, 0.05547650355155309, 0.0776872371428442, 0.07499658554084077, 0.05353650535798715, 0.05073105920677623, 0.047539468307977395, 0.050733612073529, 0.052597272646912496, 0.05791639463781573, 0.05215852888772843, 0.04797600460953633, 0.05062655829661833, 0.5218984410519669, 0.4651756300388592, 0.5120300086122345, 0.36328644811177546, 0.3329719536802599, 0.5378887123747759, 0.5496151483427726, 0.32929000465647096, 0.5921257115629572, 0.14383554374786578, 0.10323552273683667, 0.11344556871185829, 0.12776397524524963, 0.12203565219439438, 0.11668408493842819, 0.1290503880399947, 0.10181191861989025, 0.14251804200577167, 0.2047876016472131, 0.17852854910558402, 0.17336192044104104, 0.2137867719587524, 0.19476616676063463, 0.16245924226917452, 0.11601167847576654, 0.1481617061948025, 0.19083766255131118, 0.04728914411771146, 0.036265143220594265, 0.04290234463777143, 0.02360684624154097, 0.02560352407676869, 0.048178317157454686, 0.06392635477629771, 0.07251083716158824, 0.07668558912768808, 0.09051555570946379, 0.07293990145048246, 0.05523919240948039, 0.06948482498657449, 0.05774148432738535, 0.1049401677217513, 0.09371440383124685, 0.03501427888060349, 0.07667669860517601, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09126296775468834, 0.039764121552734455, 0.08284271450964753, 0.009831994687773848, 0.023907023065006028, 0.02787574308634444, 0.04309051527143004, 0.06572470200343705, 0.06808169105074446, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023532998309874875, 0.017700269396697, 0.02762447815818847, 0.018874872803021914, 0.022620542080770467, 0.016452620407960916, 0.015473870969213155, 0.021595237697329517, 0.028904298165335462, 0.26371328856578935, 0.2949242046519096, 0.25406614548851736, 0.24176019535589732, 0.26330335243811365, 0.2350785590404757, 0.2765455622275049, 0.2571447786797073, 0.26154070752607383, 0.0634924949891007, 0.06416743312485118, 0.06288238511649613, 0.07294986730700004, 0.056882672133804935, 0.07266305666576933, 0.06212509573131264, 0.06079060203052633, 0.07057661054513098, 0.11759739702402894, 0.16161316538704928, 0.11999411140637217, 0.12559038653272292, 0.1230549843481985, 0.11586726348677023, 0.15390729686190274, 0.13234251483151016, 0.11223170990258824, 0.17274797846229173, 0.17561842321791332, 0.23074822521909677, 0.2015384636340457, 0.20005673874325058, 0.21277132353349948, 0.20493453326951405, 0.21986722834467032, 0.19455555535260316, 0.14017165215501626, 0.14283677532855676, 0.16649110667373612, 0.15161163630488683, 0.1444154970773085, 0.15945027968070657, 0.13581565983140864, 0.15586195237838252, 0.14587997673787834, 0.16589777959887775, 0.1674407266813258, 0.1698229311409204, 0.19963739852140172, 0.17453887130050538, 0.16900569050583925, 0.16515534070377547, 0.16258053614952916, 0.17998062925903924, 0.16152416444210682, 0.16437909566140185, 0.16799772036608862, 0.1716904672983528, 0.16775399630877197, 0.16432446905410014, 0.15352952313661294, 0.16360995676464152, 0.1628017979006663, 0.16785507472816685, 0.17264151494379387, 0.16861034032804278, 0.2771189617084562, 0.1729552087501539, 0.10903263549019615, 0.14281466756847672, 0.11892327809855119, 0.3376285984790295, 0.21897351383383323, 0.19690769017791987, 0.11435963128450943, 0.16630333821196996, 0.1513423469615831, 0.1489582454855396, 0.12898855214279514, 0.20585314850826142, 0.17639569760813067, 0.1694907514114128, 0.16264831539129354, 0.16366725372448943, 0.1641498803128998, 0.17859399629940054, 0.15721294167705258, 0.16741514964345805, 0.15730449278959768, 0.17064790753151138, 0.07574546138378646, 0.060926528853360806, 0.061666712694824155, 0.07332105920584586, 0.06293432580660208, 0.06781393110426504, 0.0524212621870509, 0.061942723176275694, 0.08303137388121828]}, "mutation_prompt": null}
{"id": "baa2cbc7-8cfd-4871-9c38-41f8dd4e4b7a", "solution": "import numpy as np\n\nclass DynamicEnhancedAdaptiveFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.beta_max = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        def attractiveness(distance):\n            return self.beta_min + (self.beta_max - self.beta_min) * np.exp(-self.alpha * distance)\n\n        population = initialize_population()\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i, x in enumerate(population):\n                for j, y in enumerate(population):\n                    if func(y) < func(x):\n                        distance = np.linalg.norm(x - y)\n                        beta = attractiveness(distance)\n                        population[i] += beta * (y - x) + np.random.uniform(-1, 1, self.dim)\n                        \n                        # Introduce dynamic update of alpha and beta parameters with probability 0.2\n                        if np.random.rand() < 0.2:\n                            self.alpha = max(0.1, self.alpha - 0.001)  # Update alpha\n                            self.beta_max = min(1.0, self.beta_max + 0.001)  # Update beta_max\n\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "DynamicEnhancedAdaptiveFireflyAlgorithm", "description": "Dynamic Enhanced Adaptive Firefly Algorithm with Parameter Fine-tuning for Black Box Optimization.", "configspace": "", "generation": 12, "fitness": 0.1326966823857367, "feedback": "The algorithm DynamicEnhancedAdaptiveFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.11.", "error": "", "parent_id": "7cababad-3c00-4c04-86f9-980d3a18d431", "metadata": {"aucs": [0.26364390636496104, 0.29300561854970686, 0.24428300964481153, 0.23939973834037565, 0.2467495273967748, 0.26842577731711703, 0.2522675017302819, 0.2575302638375875, 0.2534433022604047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0766572902498952, 0.07056466479399093, 0.06578702271483305, 0.09369028126931711, 0.060637128292857057, 0.06678864504557569, 0.06943100799359891, 0.07307976137468397, 0.07036514449132503, 0.06171576709414861, 0.04904287198228763, 0.08246375542491846, 0.06257926847592532, 0.04989649919135719, 0.04431647929424798, 0.05065140133167656, 0.048916498435184086, 0.0495503964402616, 0.4883742461836731, 0.438797396423358, 0.6545057569551385, 0.34697603929357623, 0.47435958221101304, 0.39859808836598754, 0.6193788045996, 0.44001113347465093, 0.6302589844516637, 0.16793892038650116, 0.10252009036107756, 0.09987720486596352, 0.121047571874901, 0.11763340472688066, 0.11625865848336547, 0.1356246793354332, 0.09309600868048729, 0.11877858216787152, 0.20402307215422266, 0.18490983246198334, 0.1709520884265341, 0.21821444656747946, 0.16914140677036538, 0.17078014268163566, 0.1558761893759092, 0.1841535022609182, 0.15539375732653005, 0.05290328663586297, 0.058834113316189374, 0.06591692747502842, 0.03506308158726679, 0.08924418486682517, 0.07072693820065012, 0.07115224276865717, 0.10152153358024407, 0.06697752281348912, 0.09386098741497895, 0.07748365124106371, 0.08217196954889971, 0.06983175475441328, 0.10505178312602659, 0.07801867073374891, 0.07775343961530512, 0.05224036851249769, 0.09806771101687484, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12398150754531767, 0.026480636305764582, 0.11478896716659581, 0.019086380616214926, 0.0161828490301128, 0.04050106751160998, 0.0867150097493814, 0.06488334398697693, 0.08639752643616172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019869943237855292, 0.01944212523972222, 0.015815757112356166, 0.01077290889299276, 0.02649369164242177, 0.028830915740590934, 0.016552138388776116, 0.01457563750241897, 0.015429613354437266, 0.26138697914426945, 0.2964367460518782, 0.2705358275238776, 0.2363047923767786, 0.23752972149408647, 0.26826311612543796, 0.2820805521637926, 0.2990888499920641, 0.2554615020060679, 0.043105578629359265, 0.049908296283156184, 0.05814680907210401, 0.08016906102129906, 0.06519261453445346, 0.07358581051356683, 0.07845656455166827, 0.05889698979439595, 0.07053570957632949, 0.13327066452466974, 0.09814141576203073, 0.15772301972180047, 0.11373195596335794, 0.13749110583312507, 0.12752428799988047, 0.13440857020395158, 0.13574770457305896, 0.15455810017287153, 0.1810063835233383, 0.20876263645822768, 0.21223146557973227, 0.20604597788649237, 0.1882590107662837, 0.1825867779225998, 0.19643944693496873, 0.21285253196428378, 0.19122403165871116, 0.14168823127513808, 0.15631695085224306, 0.15666447050044807, 0.14767419667062254, 0.15554310023751228, 0.1381305815445325, 0.13758691408236723, 0.15749124301824358, 0.14202412939285058, 0.17121653842431894, 0.1745285914678688, 0.2032437749718784, 0.1737192039170501, 0.17381486995128193, 0.17032802950556414, 0.17061395354215603, 0.18703140437326238, 0.17896722191941894, 0.17070396139874433, 0.16016577250744035, 0.16771681473151712, 0.16333663233234053, 0.16045287781870177, 0.15767035317445266, 0.16911301074068796, 0.159995264258192, 0.16601435832597833, 0.2609818842444396, 0.16877971831310246, 0.16656648627464987, 0.17539471573713727, 0.1410822591108416, 0.16489327285704036, 0.3442070313125376, 0.13313410618187738, 0.30734113901670657, 0.1420316212209164, 0.2658485358056907, 0.0711740428121338, 0.16622141012412195, 0.13566327070490702, 0.1603520603967198, 0.16939270356108604, 0.22679738843076802, 0.19814881121442274, 0.17725633145644437, 0.16752340108009012, 0.15781945992981272, 0.17062617324198104, 0.1814020226159193, 0.17375881028988938, 0.17017240083753804, 0.16178045657852813, 0.16811390574130947, 0.06770914141475803, 0.061714167492443295, 0.06406532465497972, 0.06560357999669597, 0.07469521089279496, 0.07134115472793123, 0.07754399068243478, 0.07340929448741496, 0.07241274576772316]}, "mutation_prompt": null}
{"id": "157a0448-ca29-4569-8f74-02b21d3a0313", "solution": "import numpy as np\n\nclass DynamicEnhancedAdaptiveFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.beta_max = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        def attractiveness(distance):\n            return self.beta_min + (self.beta_max - self.beta_min) * np.exp(-self.alpha * distance)\n\n        population = initialize_population()\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i, x in enumerate(population):\n                for j, y in enumerate(population):\n                    if func(y) < func(x):\n                        distance = np.linalg.norm(x - y)\n                        beta = attractiveness(distance)\n                        population[i] += beta * (y - x) + np.random.uniform(-1, 1, self.dim)\n                        \n                        # Introduce dynamic update of alpha and beta parameters with probability 0.2\n                        if np.random.rand() < 0.2:\n                            self.alpha = max(0.1, self.alpha - 0.001)  # Update alpha\n                            self.beta_max = min(1.0, self.beta_max + 0.001)  # Update beta_max\n\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "DynamicEnhancedAdaptiveFireflyAlgorithm", "description": "Dynamic Enhanced Adaptive Firefly Algorithm with Parameter Fine-tuning for Black Box Optimization.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "baa2cbc7-8cfd-4871-9c38-41f8dd4e4b7a", "metadata": {"aucs": [0.26364390636496104, 0.29300561854970686, 0.24428300964481153, 0.23939973834037565, 0.2467495273967748, 0.26842577731711703, 0.2522675017302819, 0.2575302638375875, 0.2534433022604047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0766572902498952, 0.07056466479399093, 0.06578702271483305, 0.09369028126931711, 0.060637128292857057, 0.06678864504557569, 0.06943100799359891, 0.07307976137468397, 0.07036514449132503, 0.06171576709414861, 0.04904287198228763, 0.08246375542491846, 0.06257926847592532, 0.04989649919135719, 0.04431647929424798, 0.05065140133167656, 0.048916498435184086, 0.0495503964402616, 0.4883742461836731, 0.438797396423358, 0.6545057569551385, 0.34697603929357623, 0.47435958221101304, 0.39859808836598754, 0.6193788045996, 0.44001113347465093, 0.6302589844516637, 0.16793892038650116, 0.10252009036107756, 0.09987720486596352, 0.121047571874901, 0.11763340472688066, 0.11625865848336547, 0.1356246793354332, 0.09309600868048729, 0.11877858216787152, 0.20402307215422266, 0.18490983246198334, 0.1709520884265341, 0.21821444656747946, 0.16914140677036538, 0.17078014268163566, 0.1558761893759092, 0.1841535022609182, 0.15539375732653005, 0.05290328663586297, 0.058834113316189374, 0.06591692747502842, 0.03506308158726679, 0.08924418486682517, 0.07072693820065012, 0.07115224276865717, 0.10152153358024407, 0.06697752281348912, 0.09386098741497895, 0.07748365124106371, 0.08217196954889971, 0.06983175475441328, 0.10505178312602659, 0.07801867073374891, 0.07775343961530512, 0.05224036851249769, 0.09806771101687484, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12398150754531767, 0.026480636305764582, 0.11478896716659581, 0.019086380616214926, 0.0161828490301128, 0.04050106751160998, 0.0867150097493814, 0.06488334398697693, 0.08639752643616172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019869943237855292, 0.01944212523972222, 0.015815757112356166, 0.01077290889299276, 0.02649369164242177, 0.028830915740590934, 0.016552138388776116, 0.01457563750241897, 0.015429613354437266, 0.26138697914426945, 0.2964367460518782, 0.2705358275238776, 0.2363047923767786, 0.23752972149408647, 0.26826311612543796, 0.2820805521637926, 0.2990888499920641, 0.2554615020060679, 0.043105578629359265, 0.049908296283156184, 0.05814680907210401, 0.08016906102129906, 0.06519261453445346, 0.07358581051356683, 0.07845656455166827, 0.05889698979439595, 0.07053570957632949, 0.13327066452466974, 0.09814141576203073, 0.15772301972180047, 0.11373195596335794, 0.13749110583312507, 0.12752428799988047, 0.13440857020395158, 0.13574770457305896, 0.15455810017287153, 0.1810063835233383, 0.20876263645822768, 0.21223146557973227, 0.20604597788649237, 0.1882590107662837, 0.1825867779225998, 0.19643944693496873, 0.21285253196428378, 0.19122403165871116, 0.14168823127513808, 0.15631695085224306, 0.15666447050044807, 0.14767419667062254, 0.15554310023751228, 0.1381305815445325, 0.13758691408236723, 0.15749124301824358, 0.14202412939285058, 0.17121653842431894, 0.1745285914678688, 0.2032437749718784, 0.1737192039170501, 0.17381486995128193, 0.17032802950556414, 0.17061395354215603, 0.18703140437326238, 0.17896722191941894, 0.17070396139874433, 0.16016577250744035, 0.16771681473151712, 0.16333663233234053, 0.16045287781870177, 0.15767035317445266, 0.16911301074068796, 0.159995264258192, 0.16601435832597833, 0.2609818842444396, 0.16877971831310246, 0.16656648627464987, 0.17539471573713727, 0.1410822591108416, 0.16489327285704036, 0.3442070313125376, 0.13313410618187738, 0.30734113901670657, 0.1420316212209164, 0.2658485358056907, 0.0711740428121338, 0.16622141012412195, 0.13566327070490702, 0.1603520603967198, 0.16939270356108604, 0.22679738843076802, 0.19814881121442274, 0.17725633145644437, 0.16752340108009012, 0.15781945992981272, 0.17062617324198104, 0.1814020226159193, 0.17375881028988938, 0.17017240083753804, 0.16178045657852813, 0.16811390574130947, 0.06770914141475803, 0.061714167492443295, 0.06406532465497972, 0.06560357999669597, 0.07469521089279496, 0.07134115472793123, 0.07754399068243478, 0.07340929448741496, 0.07241274576772316]}, "mutation_prompt": null}
{"id": "9b161b78-c00b-4550-a634-47e2f795057f", "solution": "import numpy as np\n\nclass DynamicEnhancedAdaptiveFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.beta_max = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        def attractiveness(distance):\n            return self.beta_min + (self.beta_max - self.beta_min) * np.exp(-self.alpha * distance)\n\n        population = initialize_population()\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i, x in enumerate(population):\n                for j, y in enumerate(population):\n                    if func(y) < func(x):\n                        distance = np.linalg.norm(x - y)\n                        beta = attractiveness(distance)\n                        population[i] += beta * (y - x) + np.random.uniform(-1, 1, self.dim)\n                        \n                        # Introduce dynamic update of alpha and beta parameters with probability 0.2\n                        if np.random.rand() < 0.2:\n                            self.alpha = max(0.1, self.alpha - 0.001)  # Update alpha\n                            self.beta_max = min(1.0, self.beta_max + 0.001)  # Update beta_max\n\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "DynamicEnhancedAdaptiveFireflyAlgorithm", "description": "Dynamic Enhanced Adaptive Firefly Algorithm with Parameter Fine-tuning for Black Box Optimization.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "baa2cbc7-8cfd-4871-9c38-41f8dd4e4b7a", "metadata": {"aucs": [0.26364390636496104, 0.29300561854970686, 0.24428300964481153, 0.23939973834037565, 0.2467495273967748, 0.26842577731711703, 0.2522675017302819, 0.2575302638375875, 0.2534433022604047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0766572902498952, 0.07056466479399093, 0.06578702271483305, 0.09369028126931711, 0.060637128292857057, 0.06678864504557569, 0.06943100799359891, 0.07307976137468397, 0.07036514449132503, 0.06171576709414861, 0.04904287198228763, 0.08246375542491846, 0.06257926847592532, 0.04989649919135719, 0.04431647929424798, 0.05065140133167656, 0.048916498435184086, 0.0495503964402616, 0.4883742461836731, 0.438797396423358, 0.6545057569551385, 0.34697603929357623, 0.47435958221101304, 0.39859808836598754, 0.6193788045996, 0.44001113347465093, 0.6302589844516637, 0.16793892038650116, 0.10252009036107756, 0.09987720486596352, 0.121047571874901, 0.11763340472688066, 0.11625865848336547, 0.1356246793354332, 0.09309600868048729, 0.11877858216787152, 0.20402307215422266, 0.18490983246198334, 0.1709520884265341, 0.21821444656747946, 0.16914140677036538, 0.17078014268163566, 0.1558761893759092, 0.1841535022609182, 0.15539375732653005, 0.05290328663586297, 0.058834113316189374, 0.06591692747502842, 0.03506308158726679, 0.08924418486682517, 0.07072693820065012, 0.07115224276865717, 0.10152153358024407, 0.06697752281348912, 0.09386098741497895, 0.07748365124106371, 0.08217196954889971, 0.06983175475441328, 0.10505178312602659, 0.07801867073374891, 0.07775343961530512, 0.05224036851249769, 0.09806771101687484, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12398150754531767, 0.026480636305764582, 0.11478896716659581, 0.019086380616214926, 0.0161828490301128, 0.04050106751160998, 0.0867150097493814, 0.06488334398697693, 0.08639752643616172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019869943237855292, 0.01944212523972222, 0.015815757112356166, 0.01077290889299276, 0.02649369164242177, 0.028830915740590934, 0.016552138388776116, 0.01457563750241897, 0.015429613354437266, 0.26138697914426945, 0.2964367460518782, 0.2705358275238776, 0.2363047923767786, 0.23752972149408647, 0.26826311612543796, 0.2820805521637926, 0.2990888499920641, 0.2554615020060679, 0.043105578629359265, 0.049908296283156184, 0.05814680907210401, 0.08016906102129906, 0.06519261453445346, 0.07358581051356683, 0.07845656455166827, 0.05889698979439595, 0.07053570957632949, 0.13327066452466974, 0.09814141576203073, 0.15772301972180047, 0.11373195596335794, 0.13749110583312507, 0.12752428799988047, 0.13440857020395158, 0.13574770457305896, 0.15455810017287153, 0.1810063835233383, 0.20876263645822768, 0.21223146557973227, 0.20604597788649237, 0.1882590107662837, 0.1825867779225998, 0.19643944693496873, 0.21285253196428378, 0.19122403165871116, 0.14168823127513808, 0.15631695085224306, 0.15666447050044807, 0.14767419667062254, 0.15554310023751228, 0.1381305815445325, 0.13758691408236723, 0.15749124301824358, 0.14202412939285058, 0.17121653842431894, 0.1745285914678688, 0.2032437749718784, 0.1737192039170501, 0.17381486995128193, 0.17032802950556414, 0.17061395354215603, 0.18703140437326238, 0.17896722191941894, 0.17070396139874433, 0.16016577250744035, 0.16771681473151712, 0.16333663233234053, 0.16045287781870177, 0.15767035317445266, 0.16911301074068796, 0.159995264258192, 0.16601435832597833, 0.2609818842444396, 0.16877971831310246, 0.16656648627464987, 0.17539471573713727, 0.1410822591108416, 0.16489327285704036, 0.3442070313125376, 0.13313410618187738, 0.30734113901670657, 0.1420316212209164, 0.2658485358056907, 0.0711740428121338, 0.16622141012412195, 0.13566327070490702, 0.1603520603967198, 0.16939270356108604, 0.22679738843076802, 0.19814881121442274, 0.17725633145644437, 0.16752340108009012, 0.15781945992981272, 0.17062617324198104, 0.1814020226159193, 0.17375881028988938, 0.17017240083753804, 0.16178045657852813, 0.16811390574130947, 0.06770914141475803, 0.061714167492443295, 0.06406532465497972, 0.06560357999669597, 0.07469521089279496, 0.07134115472793123, 0.07754399068243478, 0.07340929448741496, 0.07241274576772316]}, "mutation_prompt": null}
{"id": "936f7773-24c4-442d-b7ae-80f6b2bdfa81", "solution": "import numpy as np\n\nclass DynamicEnhancedAdaptiveFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.beta_max = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        def attractiveness(distance):\n            return self.beta_min + (self.beta_max - self.beta_min) * np.exp(-self.alpha * distance)\n\n        population = initialize_population()\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i, x in enumerate(population):\n                for j, y in enumerate(population):\n                    if func(y) < func(x):\n                        distance = np.linalg.norm(x - y)\n                        beta = attractiveness(distance)\n                        population[i] += beta * (y - x) + np.random.uniform(-1, 1, self.dim)\n                        \n                        # Introduce dynamic update of alpha and beta parameters with probability 0.2\n                        if np.random.rand() < 0.2:\n                            self.alpha = max(0.1, self.alpha - 0.001)  # Update alpha\n                            self.beta_max = min(1.0, self.beta_max + 0.001)  # Update beta_max\n\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "DynamicEnhancedAdaptiveFireflyAlgorithm", "description": "Dynamic Enhanced Adaptive Firefly Algorithm with Parameter Fine-tuning for Black Box Optimization.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "baa2cbc7-8cfd-4871-9c38-41f8dd4e4b7a", "metadata": {"aucs": [0.26364390636496104, 0.29300561854970686, 0.24428300964481153, 0.23939973834037565, 0.2467495273967748, 0.26842577731711703, 0.2522675017302819, 0.2575302638375875, 0.2534433022604047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0766572902498952, 0.07056466479399093, 0.06578702271483305, 0.09369028126931711, 0.060637128292857057, 0.06678864504557569, 0.06943100799359891, 0.07307976137468397, 0.07036514449132503, 0.06171576709414861, 0.04904287198228763, 0.08246375542491846, 0.06257926847592532, 0.04989649919135719, 0.04431647929424798, 0.05065140133167656, 0.048916498435184086, 0.0495503964402616, 0.4883742461836731, 0.438797396423358, 0.6545057569551385, 0.34697603929357623, 0.47435958221101304, 0.39859808836598754, 0.6193788045996, 0.44001113347465093, 0.6302589844516637, 0.16793892038650116, 0.10252009036107756, 0.09987720486596352, 0.121047571874901, 0.11763340472688066, 0.11625865848336547, 0.1356246793354332, 0.09309600868048729, 0.11877858216787152, 0.20402307215422266, 0.18490983246198334, 0.1709520884265341, 0.21821444656747946, 0.16914140677036538, 0.17078014268163566, 0.1558761893759092, 0.1841535022609182, 0.15539375732653005, 0.05290328663586297, 0.058834113316189374, 0.06591692747502842, 0.03506308158726679, 0.08924418486682517, 0.07072693820065012, 0.07115224276865717, 0.10152153358024407, 0.06697752281348912, 0.09386098741497895, 0.07748365124106371, 0.08217196954889971, 0.06983175475441328, 0.10505178312602659, 0.07801867073374891, 0.07775343961530512, 0.05224036851249769, 0.09806771101687484, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12398150754531767, 0.026480636305764582, 0.11478896716659581, 0.019086380616214926, 0.0161828490301128, 0.04050106751160998, 0.0867150097493814, 0.06488334398697693, 0.08639752643616172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019869943237855292, 0.01944212523972222, 0.015815757112356166, 0.01077290889299276, 0.02649369164242177, 0.028830915740590934, 0.016552138388776116, 0.01457563750241897, 0.015429613354437266, 0.26138697914426945, 0.2964367460518782, 0.2705358275238776, 0.2363047923767786, 0.23752972149408647, 0.26826311612543796, 0.2820805521637926, 0.2990888499920641, 0.2554615020060679, 0.043105578629359265, 0.049908296283156184, 0.05814680907210401, 0.08016906102129906, 0.06519261453445346, 0.07358581051356683, 0.07845656455166827, 0.05889698979439595, 0.07053570957632949, 0.13327066452466974, 0.09814141576203073, 0.15772301972180047, 0.11373195596335794, 0.13749110583312507, 0.12752428799988047, 0.13440857020395158, 0.13574770457305896, 0.15455810017287153, 0.1810063835233383, 0.20876263645822768, 0.21223146557973227, 0.20604597788649237, 0.1882590107662837, 0.1825867779225998, 0.19643944693496873, 0.21285253196428378, 0.19122403165871116, 0.14168823127513808, 0.15631695085224306, 0.15666447050044807, 0.14767419667062254, 0.15554310023751228, 0.1381305815445325, 0.13758691408236723, 0.15749124301824358, 0.14202412939285058, 0.17121653842431894, 0.1745285914678688, 0.2032437749718784, 0.1737192039170501, 0.17381486995128193, 0.17032802950556414, 0.17061395354215603, 0.18703140437326238, 0.17896722191941894, 0.17070396139874433, 0.16016577250744035, 0.16771681473151712, 0.16333663233234053, 0.16045287781870177, 0.15767035317445266, 0.16911301074068796, 0.159995264258192, 0.16601435832597833, 0.2609818842444396, 0.16877971831310246, 0.16656648627464987, 0.17539471573713727, 0.1410822591108416, 0.16489327285704036, 0.3442070313125376, 0.13313410618187738, 0.30734113901670657, 0.1420316212209164, 0.2658485358056907, 0.0711740428121338, 0.16622141012412195, 0.13566327070490702, 0.1603520603967198, 0.16939270356108604, 0.22679738843076802, 0.19814881121442274, 0.17725633145644437, 0.16752340108009012, 0.15781945992981272, 0.17062617324198104, 0.1814020226159193, 0.17375881028988938, 0.17017240083753804, 0.16178045657852813, 0.16811390574130947, 0.06770914141475803, 0.061714167492443295, 0.06406532465497972, 0.06560357999669597, 0.07469521089279496, 0.07134115472793123, 0.07754399068243478, 0.07340929448741496, 0.07241274576772316]}, "mutation_prompt": null}
{"id": "4468ef1f-e394-4857-a05e-862e6043fbc3", "solution": "import numpy as np\n\nclass DynamicEnhancedAdaptiveFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.beta_max = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        def attractiveness(distance):\n            return self.beta_min + (self.beta_max - self.beta_min) * np.exp(-self.alpha * distance)\n\n        population = initialize_population()\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i, x in enumerate(population):\n                for j, y in enumerate(population):\n                    if func(y) < func(x):\n                        distance = np.linalg.norm(x - y)\n                        beta = attractiveness(distance)\n                        population[i] += beta * (y - x) + np.random.uniform(-1, 1, self.dim)\n                        \n                        # Introduce dynamic update of alpha and beta parameters with probability 0.2\n                        if np.random.rand() < 0.2:\n                            self.alpha = max(0.1, self.alpha - 0.001)  # Update alpha\n                            self.beta_max = min(1.0, self.beta_max + 0.001)  # Update beta_max\n\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "DynamicEnhancedAdaptiveFireflyAlgorithm", "description": "Dynamic Enhanced Adaptive Firefly Algorithm with Parameter Fine-tuning for Black Box Optimization.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "baa2cbc7-8cfd-4871-9c38-41f8dd4e4b7a", "metadata": {"aucs": [0.26364390636496104, 0.29300561854970686, 0.24428300964481153, 0.23939973834037565, 0.2467495273967748, 0.26842577731711703, 0.2522675017302819, 0.2575302638375875, 0.2534433022604047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0766572902498952, 0.07056466479399093, 0.06578702271483305, 0.09369028126931711, 0.060637128292857057, 0.06678864504557569, 0.06943100799359891, 0.07307976137468397, 0.07036514449132503, 0.06171576709414861, 0.04904287198228763, 0.08246375542491846, 0.06257926847592532, 0.04989649919135719, 0.04431647929424798, 0.05065140133167656, 0.048916498435184086, 0.0495503964402616, 0.4883742461836731, 0.438797396423358, 0.6545057569551385, 0.34697603929357623, 0.47435958221101304, 0.39859808836598754, 0.6193788045996, 0.44001113347465093, 0.6302589844516637, 0.16793892038650116, 0.10252009036107756, 0.09987720486596352, 0.121047571874901, 0.11763340472688066, 0.11625865848336547, 0.1356246793354332, 0.09309600868048729, 0.11877858216787152, 0.20402307215422266, 0.18490983246198334, 0.1709520884265341, 0.21821444656747946, 0.16914140677036538, 0.17078014268163566, 0.1558761893759092, 0.1841535022609182, 0.15539375732653005, 0.05290328663586297, 0.058834113316189374, 0.06591692747502842, 0.03506308158726679, 0.08924418486682517, 0.07072693820065012, 0.07115224276865717, 0.10152153358024407, 0.06697752281348912, 0.09386098741497895, 0.07748365124106371, 0.08217196954889971, 0.06983175475441328, 0.10505178312602659, 0.07801867073374891, 0.07775343961530512, 0.05224036851249769, 0.09806771101687484, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12398150754531767, 0.026480636305764582, 0.11478896716659581, 0.019086380616214926, 0.0161828490301128, 0.04050106751160998, 0.0867150097493814, 0.06488334398697693, 0.08639752643616172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019869943237855292, 0.01944212523972222, 0.015815757112356166, 0.01077290889299276, 0.02649369164242177, 0.028830915740590934, 0.016552138388776116, 0.01457563750241897, 0.015429613354437266, 0.26138697914426945, 0.2964367460518782, 0.2705358275238776, 0.2363047923767786, 0.23752972149408647, 0.26826311612543796, 0.2820805521637926, 0.2990888499920641, 0.2554615020060679, 0.043105578629359265, 0.049908296283156184, 0.05814680907210401, 0.08016906102129906, 0.06519261453445346, 0.07358581051356683, 0.07845656455166827, 0.05889698979439595, 0.07053570957632949, 0.13327066452466974, 0.09814141576203073, 0.15772301972180047, 0.11373195596335794, 0.13749110583312507, 0.12752428799988047, 0.13440857020395158, 0.13574770457305896, 0.15455810017287153, 0.1810063835233383, 0.20876263645822768, 0.21223146557973227, 0.20604597788649237, 0.1882590107662837, 0.1825867779225998, 0.19643944693496873, 0.21285253196428378, 0.19122403165871116, 0.14168823127513808, 0.15631695085224306, 0.15666447050044807, 0.14767419667062254, 0.15554310023751228, 0.1381305815445325, 0.13758691408236723, 0.15749124301824358, 0.14202412939285058, 0.17121653842431894, 0.1745285914678688, 0.2032437749718784, 0.1737192039170501, 0.17381486995128193, 0.17032802950556414, 0.17061395354215603, 0.18703140437326238, 0.17896722191941894, 0.17070396139874433, 0.16016577250744035, 0.16771681473151712, 0.16333663233234053, 0.16045287781870177, 0.15767035317445266, 0.16911301074068796, 0.159995264258192, 0.16601435832597833, 0.2609818842444396, 0.16877971831310246, 0.16656648627464987, 0.17539471573713727, 0.1410822591108416, 0.16489327285704036, 0.3442070313125376, 0.13313410618187738, 0.30734113901670657, 0.1420316212209164, 0.2658485358056907, 0.0711740428121338, 0.16622141012412195, 0.13566327070490702, 0.1603520603967198, 0.16939270356108604, 0.22679738843076802, 0.19814881121442274, 0.17725633145644437, 0.16752340108009012, 0.15781945992981272, 0.17062617324198104, 0.1814020226159193, 0.17375881028988938, 0.17017240083753804, 0.16178045657852813, 0.16811390574130947, 0.06770914141475803, 0.061714167492443295, 0.06406532465497972, 0.06560357999669597, 0.07469521089279496, 0.07134115472793123, 0.07754399068243478, 0.07340929448741496, 0.07241274576772316]}, "mutation_prompt": null}
{"id": "d1d93abf-ab4b-4c49-8105-f29a5d093500", "solution": "import numpy as np\n\nclass DynamicEnhancedAdaptiveFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.beta_max = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        def attractiveness(distance):\n            return self.beta_min + (self.beta_max - self.beta_min) * np.exp(-self.alpha * distance)\n\n        population = initialize_population()\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i, x in enumerate(population):\n                for j, y in enumerate(population):\n                    if func(y) < func(x):\n                        distance = np.linalg.norm(x - y)\n                        beta = attractiveness(distance)\n                        population[i] += beta * (y - x) + np.random.uniform(-1, 1, self.dim)\n                        \n                        # Introduce dynamic update of alpha and beta parameters with probability 0.2\n                        if np.random.rand() < 0.2:\n                            self.alpha = max(0.1, self.alpha - 0.001)  # Update alpha\n                            self.beta_max = min(1.0, self.beta_max + 0.001)  # Update beta_max\n\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "DynamicEnhancedAdaptiveFireflyAlgorithm", "description": "Dynamic Enhanced Adaptive Firefly Algorithm with Parameter Fine-tuning for Black Box Optimization.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "baa2cbc7-8cfd-4871-9c38-41f8dd4e4b7a", "metadata": {"aucs": [0.26364390636496104, 0.29300561854970686, 0.24428300964481153, 0.23939973834037565, 0.2467495273967748, 0.26842577731711703, 0.2522675017302819, 0.2575302638375875, 0.2534433022604047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0766572902498952, 0.07056466479399093, 0.06578702271483305, 0.09369028126931711, 0.060637128292857057, 0.06678864504557569, 0.06943100799359891, 0.07307976137468397, 0.07036514449132503, 0.06171576709414861, 0.04904287198228763, 0.08246375542491846, 0.06257926847592532, 0.04989649919135719, 0.04431647929424798, 0.05065140133167656, 0.048916498435184086, 0.0495503964402616, 0.4883742461836731, 0.438797396423358, 0.6545057569551385, 0.34697603929357623, 0.47435958221101304, 0.39859808836598754, 0.6193788045996, 0.44001113347465093, 0.6302589844516637, 0.16793892038650116, 0.10252009036107756, 0.09987720486596352, 0.121047571874901, 0.11763340472688066, 0.11625865848336547, 0.1356246793354332, 0.09309600868048729, 0.11877858216787152, 0.20402307215422266, 0.18490983246198334, 0.1709520884265341, 0.21821444656747946, 0.16914140677036538, 0.17078014268163566, 0.1558761893759092, 0.1841535022609182, 0.15539375732653005, 0.05290328663586297, 0.058834113316189374, 0.06591692747502842, 0.03506308158726679, 0.08924418486682517, 0.07072693820065012, 0.07115224276865717, 0.10152153358024407, 0.06697752281348912, 0.09386098741497895, 0.07748365124106371, 0.08217196954889971, 0.06983175475441328, 0.10505178312602659, 0.07801867073374891, 0.07775343961530512, 0.05224036851249769, 0.09806771101687484, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12398150754531767, 0.026480636305764582, 0.11478896716659581, 0.019086380616214926, 0.0161828490301128, 0.04050106751160998, 0.0867150097493814, 0.06488334398697693, 0.08639752643616172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019869943237855292, 0.01944212523972222, 0.015815757112356166, 0.01077290889299276, 0.02649369164242177, 0.028830915740590934, 0.016552138388776116, 0.01457563750241897, 0.015429613354437266, 0.26138697914426945, 0.2964367460518782, 0.2705358275238776, 0.2363047923767786, 0.23752972149408647, 0.26826311612543796, 0.2820805521637926, 0.2990888499920641, 0.2554615020060679, 0.043105578629359265, 0.049908296283156184, 0.05814680907210401, 0.08016906102129906, 0.06519261453445346, 0.07358581051356683, 0.07845656455166827, 0.05889698979439595, 0.07053570957632949, 0.13327066452466974, 0.09814141576203073, 0.15772301972180047, 0.11373195596335794, 0.13749110583312507, 0.12752428799988047, 0.13440857020395158, 0.13574770457305896, 0.15455810017287153, 0.1810063835233383, 0.20876263645822768, 0.21223146557973227, 0.20604597788649237, 0.1882590107662837, 0.1825867779225998, 0.19643944693496873, 0.21285253196428378, 0.19122403165871116, 0.14168823127513808, 0.15631695085224306, 0.15666447050044807, 0.14767419667062254, 0.15554310023751228, 0.1381305815445325, 0.13758691408236723, 0.15749124301824358, 0.14202412939285058, 0.17121653842431894, 0.1745285914678688, 0.2032437749718784, 0.1737192039170501, 0.17381486995128193, 0.17032802950556414, 0.17061395354215603, 0.18703140437326238, 0.17896722191941894, 0.17070396139874433, 0.16016577250744035, 0.16771681473151712, 0.16333663233234053, 0.16045287781870177, 0.15767035317445266, 0.16911301074068796, 0.159995264258192, 0.16601435832597833, 0.2609818842444396, 0.16877971831310246, 0.16656648627464987, 0.17539471573713727, 0.1410822591108416, 0.16489327285704036, 0.3442070313125376, 0.13313410618187738, 0.30734113901670657, 0.1420316212209164, 0.2658485358056907, 0.0711740428121338, 0.16622141012412195, 0.13566327070490702, 0.1603520603967198, 0.16939270356108604, 0.22679738843076802, 0.19814881121442274, 0.17725633145644437, 0.16752340108009012, 0.15781945992981272, 0.17062617324198104, 0.1814020226159193, 0.17375881028988938, 0.17017240083753804, 0.16178045657852813, 0.16811390574130947, 0.06770914141475803, 0.061714167492443295, 0.06406532465497972, 0.06560357999669597, 0.07469521089279496, 0.07134115472793123, 0.07754399068243478, 0.07340929448741496, 0.07241274576772316]}, "mutation_prompt": null}
{"id": "4640a7b5-26f9-4f04-ba58-c93327cbdf09", "solution": "import numpy as np\n\nclass DynamicEnhancedAdaptiveFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.beta_max = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        def attractiveness(distance):\n            return self.beta_min + (self.beta_max - self.beta_min) * np.exp(-self.alpha * distance)\n\n        population = initialize_population()\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i, x in enumerate(population):\n                for j, y in enumerate(population):\n                    if func(y) < func(x):\n                        distance = np.linalg.norm(x - y)\n                        beta = attractiveness(distance)\n                        population[i] += beta * (y - x) + np.random.uniform(-1, 1, self.dim)\n                        \n                        # Introduce dynamic update of alpha and beta parameters with probability 0.2\n                        if np.random.rand() < 0.2:\n                            self.alpha = max(0.1, self.alpha - 0.001)  # Update alpha\n                            self.beta_max = min(1.0, self.beta_max + 0.001)  # Update beta_max\n\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "DynamicEnhancedAdaptiveFireflyAlgorithm", "description": "Dynamic Enhanced Adaptive Firefly Algorithm with Parameter Fine-tuning for Black Box Optimization.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "baa2cbc7-8cfd-4871-9c38-41f8dd4e4b7a", "metadata": {"aucs": [0.26364390636496104, 0.29300561854970686, 0.24428300964481153, 0.23939973834037565, 0.2467495273967748, 0.26842577731711703, 0.2522675017302819, 0.2575302638375875, 0.2534433022604047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0766572902498952, 0.07056466479399093, 0.06578702271483305, 0.09369028126931711, 0.060637128292857057, 0.06678864504557569, 0.06943100799359891, 0.07307976137468397, 0.07036514449132503, 0.06171576709414861, 0.04904287198228763, 0.08246375542491846, 0.06257926847592532, 0.04989649919135719, 0.04431647929424798, 0.05065140133167656, 0.048916498435184086, 0.0495503964402616, 0.4883742461836731, 0.438797396423358, 0.6545057569551385, 0.34697603929357623, 0.47435958221101304, 0.39859808836598754, 0.6193788045996, 0.44001113347465093, 0.6302589844516637, 0.16793892038650116, 0.10252009036107756, 0.09987720486596352, 0.121047571874901, 0.11763340472688066, 0.11625865848336547, 0.1356246793354332, 0.09309600868048729, 0.11877858216787152, 0.20402307215422266, 0.18490983246198334, 0.1709520884265341, 0.21821444656747946, 0.16914140677036538, 0.17078014268163566, 0.1558761893759092, 0.1841535022609182, 0.15539375732653005, 0.05290328663586297, 0.058834113316189374, 0.06591692747502842, 0.03506308158726679, 0.08924418486682517, 0.07072693820065012, 0.07115224276865717, 0.10152153358024407, 0.06697752281348912, 0.09386098741497895, 0.07748365124106371, 0.08217196954889971, 0.06983175475441328, 0.10505178312602659, 0.07801867073374891, 0.07775343961530512, 0.05224036851249769, 0.09806771101687484, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12398150754531767, 0.026480636305764582, 0.11478896716659581, 0.019086380616214926, 0.0161828490301128, 0.04050106751160998, 0.0867150097493814, 0.06488334398697693, 0.08639752643616172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019869943237855292, 0.01944212523972222, 0.015815757112356166, 0.01077290889299276, 0.02649369164242177, 0.028830915740590934, 0.016552138388776116, 0.01457563750241897, 0.015429613354437266, 0.26138697914426945, 0.2964367460518782, 0.2705358275238776, 0.2363047923767786, 0.23752972149408647, 0.26826311612543796, 0.2820805521637926, 0.2990888499920641, 0.2554615020060679, 0.043105578629359265, 0.049908296283156184, 0.05814680907210401, 0.08016906102129906, 0.06519261453445346, 0.07358581051356683, 0.07845656455166827, 0.05889698979439595, 0.07053570957632949, 0.13327066452466974, 0.09814141576203073, 0.15772301972180047, 0.11373195596335794, 0.13749110583312507, 0.12752428799988047, 0.13440857020395158, 0.13574770457305896, 0.15455810017287153, 0.1810063835233383, 0.20876263645822768, 0.21223146557973227, 0.20604597788649237, 0.1882590107662837, 0.1825867779225998, 0.19643944693496873, 0.21285253196428378, 0.19122403165871116, 0.14168823127513808, 0.15631695085224306, 0.15666447050044807, 0.14767419667062254, 0.15554310023751228, 0.1381305815445325, 0.13758691408236723, 0.15749124301824358, 0.14202412939285058, 0.17121653842431894, 0.1745285914678688, 0.2032437749718784, 0.1737192039170501, 0.17381486995128193, 0.17032802950556414, 0.17061395354215603, 0.18703140437326238, 0.17896722191941894, 0.17070396139874433, 0.16016577250744035, 0.16771681473151712, 0.16333663233234053, 0.16045287781870177, 0.15767035317445266, 0.16911301074068796, 0.159995264258192, 0.16601435832597833, 0.2609818842444396, 0.16877971831310246, 0.16656648627464987, 0.17539471573713727, 0.1410822591108416, 0.16489327285704036, 0.3442070313125376, 0.13313410618187738, 0.30734113901670657, 0.1420316212209164, 0.2658485358056907, 0.0711740428121338, 0.16622141012412195, 0.13566327070490702, 0.1603520603967198, 0.16939270356108604, 0.22679738843076802, 0.19814881121442274, 0.17725633145644437, 0.16752340108009012, 0.15781945992981272, 0.17062617324198104, 0.1814020226159193, 0.17375881028988938, 0.17017240083753804, 0.16178045657852813, 0.16811390574130947, 0.06770914141475803, 0.061714167492443295, 0.06406532465497972, 0.06560357999669597, 0.07469521089279496, 0.07134115472793123, 0.07754399068243478, 0.07340929448741496, 0.07241274576772316]}, "mutation_prompt": null}
{"id": "8478c537-4a63-4a62-9c0b-78c42cd60a67", "solution": "import numpy as np\n\nclass DynamicEnhancedAdaptiveFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.beta_max = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        def attractiveness(distance):\n            return self.beta_min + (self.beta_max - self.beta_min) * np.exp(-self.alpha * distance)\n\n        population = initialize_population()\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i, x in enumerate(population):\n                for j, y in enumerate(population):\n                    if func(y) < func(x):\n                        distance = np.linalg.norm(x - y)\n                        beta = attractiveness(distance)\n                        population[i] += beta * (y - x) + np.random.uniform(-1, 1, self.dim)\n                        \n                        # Introduce dynamic update of alpha and beta parameters with probability 0.2\n                        if np.random.rand() < 0.2:\n                            self.alpha = max(0.1, self.alpha - 0.001)  # Update alpha\n                            self.beta_max = min(1.0, self.beta_max + 0.001)  # Update beta_max\n\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "DynamicEnhancedAdaptiveFireflyAlgorithm", "description": "Dynamic Enhanced Adaptive Firefly Algorithm with Parameter Fine-tuning for Black Box Optimization.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "baa2cbc7-8cfd-4871-9c38-41f8dd4e4b7a", "metadata": {"aucs": [0.26364390636496104, 0.29300561854970686, 0.24428300964481153, 0.23939973834037565, 0.2467495273967748, 0.26842577731711703, 0.2522675017302819, 0.2575302638375875, 0.2534433022604047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0766572902498952, 0.07056466479399093, 0.06578702271483305, 0.09369028126931711, 0.060637128292857057, 0.06678864504557569, 0.06943100799359891, 0.07307976137468397, 0.07036514449132503, 0.06171576709414861, 0.04904287198228763, 0.08246375542491846, 0.06257926847592532, 0.04989649919135719, 0.04431647929424798, 0.05065140133167656, 0.048916498435184086, 0.0495503964402616, 0.4883742461836731, 0.438797396423358, 0.6545057569551385, 0.34697603929357623, 0.47435958221101304, 0.39859808836598754, 0.6193788045996, 0.44001113347465093, 0.6302589844516637, 0.16793892038650116, 0.10252009036107756, 0.09987720486596352, 0.121047571874901, 0.11763340472688066, 0.11625865848336547, 0.1356246793354332, 0.09309600868048729, 0.11877858216787152, 0.20402307215422266, 0.18490983246198334, 0.1709520884265341, 0.21821444656747946, 0.16914140677036538, 0.17078014268163566, 0.1558761893759092, 0.1841535022609182, 0.15539375732653005, 0.05290328663586297, 0.058834113316189374, 0.06591692747502842, 0.03506308158726679, 0.08924418486682517, 0.07072693820065012, 0.07115224276865717, 0.10152153358024407, 0.06697752281348912, 0.09386098741497895, 0.07748365124106371, 0.08217196954889971, 0.06983175475441328, 0.10505178312602659, 0.07801867073374891, 0.07775343961530512, 0.05224036851249769, 0.09806771101687484, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12398150754531767, 0.026480636305764582, 0.11478896716659581, 0.019086380616214926, 0.0161828490301128, 0.04050106751160998, 0.0867150097493814, 0.06488334398697693, 0.08639752643616172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019869943237855292, 0.01944212523972222, 0.015815757112356166, 0.01077290889299276, 0.02649369164242177, 0.028830915740590934, 0.016552138388776116, 0.01457563750241897, 0.015429613354437266, 0.26138697914426945, 0.2964367460518782, 0.2705358275238776, 0.2363047923767786, 0.23752972149408647, 0.26826311612543796, 0.2820805521637926, 0.2990888499920641, 0.2554615020060679, 0.043105578629359265, 0.049908296283156184, 0.05814680907210401, 0.08016906102129906, 0.06519261453445346, 0.07358581051356683, 0.07845656455166827, 0.05889698979439595, 0.07053570957632949, 0.13327066452466974, 0.09814141576203073, 0.15772301972180047, 0.11373195596335794, 0.13749110583312507, 0.12752428799988047, 0.13440857020395158, 0.13574770457305896, 0.15455810017287153, 0.1810063835233383, 0.20876263645822768, 0.21223146557973227, 0.20604597788649237, 0.1882590107662837, 0.1825867779225998, 0.19643944693496873, 0.21285253196428378, 0.19122403165871116, 0.14168823127513808, 0.15631695085224306, 0.15666447050044807, 0.14767419667062254, 0.15554310023751228, 0.1381305815445325, 0.13758691408236723, 0.15749124301824358, 0.14202412939285058, 0.17121653842431894, 0.1745285914678688, 0.2032437749718784, 0.1737192039170501, 0.17381486995128193, 0.17032802950556414, 0.17061395354215603, 0.18703140437326238, 0.17896722191941894, 0.17070396139874433, 0.16016577250744035, 0.16771681473151712, 0.16333663233234053, 0.16045287781870177, 0.15767035317445266, 0.16911301074068796, 0.159995264258192, 0.16601435832597833, 0.2609818842444396, 0.16877971831310246, 0.16656648627464987, 0.17539471573713727, 0.1410822591108416, 0.16489327285704036, 0.3442070313125376, 0.13313410618187738, 0.30734113901670657, 0.1420316212209164, 0.2658485358056907, 0.0711740428121338, 0.16622141012412195, 0.13566327070490702, 0.1603520603967198, 0.16939270356108604, 0.22679738843076802, 0.19814881121442274, 0.17725633145644437, 0.16752340108009012, 0.15781945992981272, 0.17062617324198104, 0.1814020226159193, 0.17375881028988938, 0.17017240083753804, 0.16178045657852813, 0.16811390574130947, 0.06770914141475803, 0.061714167492443295, 0.06406532465497972, 0.06560357999669597, 0.07469521089279496, 0.07134115472793123, 0.07754399068243478, 0.07340929448741496, 0.07241274576772316]}, "mutation_prompt": null}
{"id": "1a1091f1-18c1-4a70-82f6-41adaa00e69a", "solution": "import numpy as np\n\nclass EvolutionaryDynamicAdaptiveFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.beta_max = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        def attractiveness(distance):\n            return self.beta_min + (self.beta_max - self.beta_min) * np.exp(-self.alpha * distance)\n\n        population = initialize_population()\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i, x in enumerate(population):\n                for j, y in enumerate(population):\n                    if func(y) < func(x):\n                        distance = np.linalg.norm(x - y)\n                        beta = attractiveness(distance)\n                        population[i] += beta * (y - x) + np.random.uniform(-1, 1, self.dim)\n                        \n                        # Introduce evolutionary dynamic update of alpha and beta parameters with probability 0.2\n                        if np.random.rand() < 0.2:\n                            self.alpha = max(0.1, self.alpha - 0.001) if np.random.rand() < 0.5 else min(0.2, self.alpha + 0.001)  # Update alpha with 50% probability\n                            self.beta_max = min(1.0, self.beta_max + 0.001) if np.random.rand() < 0.5 else max(0.3, self.beta_max - 0.001)  # Update beta_max with 50% probability\n\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "EvolutionaryDynamicAdaptiveFireflyAlgorithm", "description": "Evolutionary Dynamic Adaptive Firefly Algorithm with Enhanced Parameter Fine-tuning for Black Box Optimization.", "configspace": "", "generation": 20, "fitness": 0.13060954012610052, "feedback": "The algorithm EvolutionaryDynamicAdaptiveFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.11.", "error": "", "parent_id": "baa2cbc7-8cfd-4871-9c38-41f8dd4e4b7a", "metadata": {"aucs": [0.2818892458551362, 0.2748334069616044, 0.26829004386071664, 0.273325071892665, 0.25469780850997126, 0.29026008049586316, 0.24794423190265447, 0.23882736735092136, 0.23066243145547494, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06998064124319137, 0.0785197059436139, 0.06600277694612999, 0.08269499453030316, 0.07108695247766739, 0.06237112073407791, 0.06730942490274228, 0.06637332030366905, 0.07819529814148152, 0.058986296040349995, 0.037531873052838116, 0.0475251841566493, 0.055482161646545514, 0.06476789956100404, 0.04218284238099046, 0.0638352315916334, 0.04539740817061433, 0.048959091803468024, 0.5695494820704157, 0.23232565414993833, 0.5472267275357949, 0.4478180735629229, 0.46942827206725857, 0.4626926381109905, 0.6296298441258366, 0.3706307706189974, 0.5959637341668411, 0.12457079977173002, 0.11477374545752939, 0.11285731948999056, 0.1147607593282517, 0.12979406360732304, 0.11174172792833581, 0.15040269608066847, 0.11101154452786488, 0.11160047007127483, 0.1932164032139183, 0.1797237011202244, 0.15914511611554394, 0.18641016014299983, 0.18919823109066636, 0.1745447912018857, 0.1717766470691442, 0.19120586572874743, 0.1822624692540198, 0.032507897567208954, 0.07879599879119248, 0.07791046758349696, 0.038383406476703796, 0.07134977226595329, 0.07186306597014847, 0.08366554543439164, 0.06755156508424642, 0.08038571265583183, 0.046567175519169224, 0.06541256026993358, 0.08987080473090625, 0.09472124762891176, 0.06763090221785806, 0.08047735020758251, 0.08491727572274488, 0.06729079595953247, 0.09204329888499219, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08622992722150591, 0.020607688371127586, 0.08901846295391502, 0.00853100524843009, 0.0036397006280334265, 0.019962702006507738, 0.08189394989091181, 0.061990332719464636, 0.06609211301106899, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030712993015186485, 0.01900536886522819, 0.03814717296113179, 0.029986504468043185, 0.032156920006471634, 0.03382121694069973, 0.01387460916590133, 0.01671387986675965, 0.014941406962266646, 0.2703618129495001, 0.28812478125175645, 0.26549829222945587, 0.21870777874535885, 0.2577408798577182, 0.23864776044273672, 0.2668538118941519, 0.2945273000662352, 0.24519868937175027, 0.05951040118614548, 0.05984801202507628, 0.06079249656271035, 0.07367954080591721, 0.07085405644052445, 0.06329510070516375, 0.06701439399656028, 0.07299844056309523, 0.07657687382874179, 0.12071378746874506, 0.11354498988540451, 0.11818935407046993, 0.1445268298715493, 0.15204202448366688, 0.13516651293736193, 0.11314841510444018, 0.14210107339065559, 0.10768880955380444, 0.18416976836271948, 0.18348864367898055, 0.2166890289075475, 0.21710138161014414, 0.2094998232559172, 0.21528943920599697, 0.19943712591635554, 0.21258652625634256, 0.20518399278086774, 0.14508145262009986, 0.14342328191135656, 0.15689978218831913, 0.13877324969742255, 0.1258439963169713, 0.16895385502021765, 0.1422149519447068, 0.15494654214829207, 0.14265317062356264, 0.16566866629684318, 0.1587866259982499, 0.18281235821560737, 0.19987943468712777, 0.17692807256056153, 0.1838526346218483, 0.18436604234761456, 0.1754767522065055, 0.17682087549168357, 0.16446158054332827, 0.15509123771137878, 0.16883955201871614, 0.17143515681592403, 0.16117015398528, 0.16523427130626167, 0.14434579772205092, 0.166821238275647, 0.1652059781823656, 0.15574650653444844, 0.17558252633899696, 0.1720444466029647, 0.24402384591941118, 0.17222628667723183, 0.23751493369654797, 0.29186027690197347, 0.11168695489230374, 0.26550391234458826, 0.313567110349781, 0.17738646342384923, 0.07783965578212715, 0.16578086408886028, 0.10499832060940939, 0.13515230979865833, 0.09725972714354214, 0.18775124251780062, 0.2342986779009537, 0.15943643042852274, 0.15923129102847344, 0.16801472628724257, 0.16519648449216784, 0.16592687049330146, 0.17228600582136644, 0.16330628460000884, 0.1707455991292165, 0.16854987283179268, 0.06464007641999892, 0.06158432327770602, 0.059291358411905803, 0.07599204827348016, 0.0722922272043024, 0.0625900881783562, 0.07097360897356497, 0.0649667795537453, 0.07606345239304613]}, "mutation_prompt": null}
{"id": "eef455ea-ac99-44cf-af4b-de4a5c7394aa", "solution": "import numpy as np\n\nclass EnhancedDynamicFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.beta_max = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        def attractiveness(distance):\n            return self.beta_min + (self.beta_max - self.beta_min) * np.exp(-self.alpha * distance)\n\n        population = initialize_population()\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i, x in enumerate(population):\n                for j, y in enumerate(population):\n                    if func(y) < func(x):\n                        distance = np.linalg.norm(x - y)\n                        beta = attractiveness(distance)\n                        population[i] += beta * (y - x) + np.random.uniform(-1, 1, self.dim)\n                        \n                        # Introduce dynamic update of alpha and beta parameters with probability 0.2\n                        if np.random.rand() < 0.2:\n                            # Refine the strategy: Add further adaptation based on the performance of the algorithm\n                            if np.random.rand() < 0.5:\n                                self.alpha = max(0.1, self.alpha - 0.001)  # Update alpha\n                            else:\n                                self.alpha = min(0.5, self.alpha + 0.001)  # Update alpha\n\n                            if np.random.rand() < 0.5:\n                                self.beta_max = min(1.0, self.beta_max + 0.001)  # Update beta_max\n                            else:\n                                self.beta_max = max(0.5, self.beta_max - 0.001)  # Update beta_max\n\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "EnhancedDynamicFireflyAlgorithm", "description": "Enhanced Dynamic Firefly Algorithm with Parameter Adaptation for Black Box Optimization.", "configspace": "", "generation": 21, "fitness": 0.12893377076575205, "feedback": "The algorithm EnhancedDynamicFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.11.", "error": "", "parent_id": "baa2cbc7-8cfd-4871-9c38-41f8dd4e4b7a", "metadata": {"aucs": [0.25782044882393707, 0.25881316807258425, 0.2612334668566757, 0.25633174691700145, 0.3005130902734431, 0.27544309882089224, 0.24269161636703884, 0.2294471840255694, 0.23607414453154052, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07421803297739438, 0.07055787851479767, 0.05872129752526367, 0.0774466686132691, 0.06864904328509436, 0.06824324185873176, 0.062373616267976995, 0.07713450815024936, 0.08089336249919599, 0.06154102192837396, 0.04508218033788147, 0.051178967788394814, 0.0559535200759268, 0.07189854364306081, 0.05720160598074331, 0.06492531019692271, 0.050986744341106505, 0.046846979953795054, 0.47380942401540616, 0.2817755904874525, 0.4071938299445116, 0.45248526402590883, 0.3870695772988082, 0.6326488075784744, 0.5201804565757281, 0.4239997612774321, 0.5705847223667319, 0.12341577617066701, 0.08615545604456276, 0.12299207429689363, 0.11020822542780628, 0.11665445763956739, 0.14948824495802127, 0.14571135460904006, 0.0990655661236457, 0.11515155133566257, 0.19123854396439632, 0.21097690457507812, 0.14712535232685786, 0.16396433116764675, 0.17026051186839086, 0.17649753948654834, 0.15928647122818584, 0.18873875892708236, 0.15281633121842064, 0.028836186039688072, 0.08134003268979773, 0.08512094620390631, 0.058914453886372176, 0.08986239212396308, 0.050706046389013326, 0.05974735476545412, 0.06818938979576072, 0.09342546769501348, 0.09632004362593394, 0.074646268883103, 0.08912594105578941, 0.06820017164249781, 0.0787461522377747, 0.0821451580342678, 0.08756815001583129, 0.056945987141985954, 0.0885325095371523, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11427523362044434, 0.04264664360680814, 0.1062545860988996, 0.024550567412631286, 0.021093428412498172, 0.021918926850515663, 0.0753896160423696, 0.040436280293120075, 0.044807857427411335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018050317792860926, 0.025287440043888276, 0.03442962469151212, 0.015100182247048344, 0.02562375581911225, 0.02017241429902006, 0.01463437945470214, 0.022075854066300415, 0.019039090561208782, 0.2796358863440087, 0.2713826169898067, 0.25880993638733263, 0.2374759199774139, 0.26127416069924125, 0.24994475597601895, 0.3101183569795052, 0.2650883421167284, 0.24979889825687873, 0.05941190086955461, 0.057276309498567435, 0.06959832525561449, 0.08072668130893523, 0.0673768593296471, 0.08184379619260651, 0.06618415752017737, 0.05902592063591272, 0.08517951787732292, 0.11596138872020034, 0.13411053161582986, 0.1204592953914766, 0.11993817175255828, 0.12747791474008607, 0.11065535703722906, 0.11077034271392427, 0.13638761144736367, 0.1152592977357213, 0.17088624638553906, 0.18566299636639083, 0.20318357060012504, 0.21818493193616018, 0.20096013222436593, 0.1910980216590228, 0.18964341839677246, 0.21934546736504512, 0.20175758884012418, 0.14988954120378328, 0.12891778711256063, 0.1680898702809358, 0.1363465083181301, 0.1337399076610003, 0.12667209194510487, 0.1401616894976605, 0.16601792675979465, 0.14525114177353204, 0.192246237812009, 0.18453652751270244, 0.17378017132305945, 0.1834568309293214, 0.19341321272284573, 0.180026298710115, 0.19366031105867199, 0.16661479664896384, 0.17665562794086964, 0.16353444112300708, 0.1626323083699457, 0.1636753499630318, 0.1647602619889862, 0.15401069719214977, 0.16415070202858928, 0.14485670420587615, 0.17152771441095427, 0.16061463151441835, 0.16503767810226055, 0.1709147200125153, 0.1681985212646323, 0.25915355270400897, 0.16884091298758663, 0.10843812923321694, 0.33684312082909296, 0.11855000934394211, 0.15079887857267749, 0.22767501177565863, 0.27454848829313583, 0.07215138898963236, 0.16352922866948305, 0.13004699856792667, 0.126796915708125, 0.09539757944906846, 0.20742449481672376, 0.22362518531030207, 0.16536577538348485, 0.17407237278432985, 0.17179803081538925, 0.16360810333622033, 0.15837857545354694, 0.160167513080527, 0.18136400181503098, 0.1756600092252515, 0.17073055277248528, 0.05950641732610473, 0.0756751555763574, 0.06938363175222584, 0.07062422856562278, 0.0712288121201955, 0.07238850398190266, 0.06950478046056996, 0.06366423573892843, 0.06889482936361124]}, "mutation_prompt": null}
{"id": "c73e74d4-89b2-4b3a-9e62-65031d4c91cb", "solution": "import numpy as np\n\nclass DynamicEnhancedAdaptiveFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.beta_max = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        def attractiveness(distance):\n            return self.beta_min + (self.beta_max - self.beta_min) * np.exp(-self.alpha * distance)\n\n        population = initialize_population()\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i, x in enumerate(population):\n                for j, y in enumerate(population):\n                    if func(y) < func(x):\n                        distance = np.linalg.norm(x - y)\n                        beta = attractiveness(distance)\n                        population[i] += beta * (y - x) + np.random.uniform(-1, 1, self.dim)\n                        \n                        # Introduce dynamic update of alpha and beta parameters with probability 0.2\n                        if np.random.rand() < 0.2:\n                            self.alpha = max(0.1, self.alpha - 0.001)  # Update alpha\n                            self.beta_max = min(1.0, self.beta_max + 0.001)  # Update beta_max\n\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "DynamicEnhancedAdaptiveFireflyAlgorithm", "description": "Dynamic Enhanced Adaptive Firefly Algorithm with Parameter Fine-tuning for Black Box Optimization.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "baa2cbc7-8cfd-4871-9c38-41f8dd4e4b7a", "metadata": {"aucs": [0.26364390636496104, 0.29300561854970686, 0.24428300964481153, 0.23939973834037565, 0.2467495273967748, 0.26842577731711703, 0.2522675017302819, 0.2575302638375875, 0.2534433022604047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0766572902498952, 0.07056466479399093, 0.06578702271483305, 0.09369028126931711, 0.060637128292857057, 0.06678864504557569, 0.06943100799359891, 0.07307976137468397, 0.07036514449132503, 0.06171576709414861, 0.04904287198228763, 0.08246375542491846, 0.06257926847592532, 0.04989649919135719, 0.04431647929424798, 0.05065140133167656, 0.048916498435184086, 0.0495503964402616, 0.4883742461836731, 0.438797396423358, 0.6545057569551385, 0.34697603929357623, 0.47435958221101304, 0.39859808836598754, 0.6193788045996, 0.44001113347465093, 0.6302589844516637, 0.16793892038650116, 0.10252009036107756, 0.09987720486596352, 0.121047571874901, 0.11763340472688066, 0.11625865848336547, 0.1356246793354332, 0.09309600868048729, 0.11877858216787152, 0.20402307215422266, 0.18490983246198334, 0.1709520884265341, 0.21821444656747946, 0.16914140677036538, 0.17078014268163566, 0.1558761893759092, 0.1841535022609182, 0.15539375732653005, 0.05290328663586297, 0.058834113316189374, 0.06591692747502842, 0.03506308158726679, 0.08924418486682517, 0.07072693820065012, 0.07115224276865717, 0.10152153358024407, 0.06697752281348912, 0.09386098741497895, 0.07748365124106371, 0.08217196954889971, 0.06983175475441328, 0.10505178312602659, 0.07801867073374891, 0.07775343961530512, 0.05224036851249769, 0.09806771101687484, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12398150754531767, 0.026480636305764582, 0.11478896716659581, 0.019086380616214926, 0.0161828490301128, 0.04050106751160998, 0.0867150097493814, 0.06488334398697693, 0.08639752643616172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019869943237855292, 0.01944212523972222, 0.015815757112356166, 0.01077290889299276, 0.02649369164242177, 0.028830915740590934, 0.016552138388776116, 0.01457563750241897, 0.015429613354437266, 0.26138697914426945, 0.2964367460518782, 0.2705358275238776, 0.2363047923767786, 0.23752972149408647, 0.26826311612543796, 0.2820805521637926, 0.2990888499920641, 0.2554615020060679, 0.043105578629359265, 0.049908296283156184, 0.05814680907210401, 0.08016906102129906, 0.06519261453445346, 0.07358581051356683, 0.07845656455166827, 0.05889698979439595, 0.07053570957632949, 0.13327066452466974, 0.09814141576203073, 0.15772301972180047, 0.11373195596335794, 0.13749110583312507, 0.12752428799988047, 0.13440857020395158, 0.13574770457305896, 0.15455810017287153, 0.1810063835233383, 0.20876263645822768, 0.21223146557973227, 0.20604597788649237, 0.1882590107662837, 0.1825867779225998, 0.19643944693496873, 0.21285253196428378, 0.19122403165871116, 0.14168823127513808, 0.15631695085224306, 0.15666447050044807, 0.14767419667062254, 0.15554310023751228, 0.1381305815445325, 0.13758691408236723, 0.15749124301824358, 0.14202412939285058, 0.17121653842431894, 0.1745285914678688, 0.2032437749718784, 0.1737192039170501, 0.17381486995128193, 0.17032802950556414, 0.17061395354215603, 0.18703140437326238, 0.17896722191941894, 0.17070396139874433, 0.16016577250744035, 0.16771681473151712, 0.16333663233234053, 0.16045287781870177, 0.15767035317445266, 0.16911301074068796, 0.159995264258192, 0.16601435832597833, 0.2609818842444396, 0.16877971831310246, 0.16656648627464987, 0.17539471573713727, 0.1410822591108416, 0.16489327285704036, 0.3442070313125376, 0.13313410618187738, 0.30734113901670657, 0.1420316212209164, 0.2658485358056907, 0.0711740428121338, 0.16622141012412195, 0.13566327070490702, 0.1603520603967198, 0.16939270356108604, 0.22679738843076802, 0.19814881121442274, 0.17725633145644437, 0.16752340108009012, 0.15781945992981272, 0.17062617324198104, 0.1814020226159193, 0.17375881028988938, 0.17017240083753804, 0.16178045657852813, 0.16811390574130947, 0.06770914141475803, 0.061714167492443295, 0.06406532465497972, 0.06560357999669597, 0.07469521089279496, 0.07134115472793123, 0.07754399068243478, 0.07340929448741496, 0.07241274576772316]}, "mutation_prompt": null}
{"id": "e5f5fe01-e50d-4066-9b57-8acc6abb3f36", "solution": "import numpy as np\n\nclass DynamicEnhancedAdaptiveFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.beta_max = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        def attractiveness(distance):\n            return self.beta_min + (self.beta_max - self.beta_min) * np.exp(-self.alpha * distance)\n\n        population = initialize_population()\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i, x in enumerate(population):\n                for j, y in enumerate(population):\n                    if func(y) < func(x):\n                        distance = np.linalg.norm(x - y)\n                        beta = attractiveness(distance)\n                        population[i] += beta * (y - x) + np.random.uniform(-1, 1, self.dim)\n                        \n                        # Introduce dynamic update of alpha and beta parameters with probability 0.2\n                        if np.random.rand() < 0.2:\n                            self.alpha = max(0.1, self.alpha - 0.001)  # Update alpha\n                            self.beta_max = min(1.0, self.beta_max + 0.001)  # Update beta_max\n\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "DynamicEnhancedAdaptiveFireflyAlgorithm", "description": "Dynamic Enhanced Adaptive Firefly Algorithm with Parameter Fine-tuning for Black Box Optimization.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "baa2cbc7-8cfd-4871-9c38-41f8dd4e4b7a", "metadata": {"aucs": [0.26364390636496104, 0.29300561854970686, 0.24428300964481153, 0.23939973834037565, 0.2467495273967748, 0.26842577731711703, 0.2522675017302819, 0.2575302638375875, 0.2534433022604047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0766572902498952, 0.07056466479399093, 0.06578702271483305, 0.09369028126931711, 0.060637128292857057, 0.06678864504557569, 0.06943100799359891, 0.07307976137468397, 0.07036514449132503, 0.06171576709414861, 0.04904287198228763, 0.08246375542491846, 0.06257926847592532, 0.04989649919135719, 0.04431647929424798, 0.05065140133167656, 0.048916498435184086, 0.0495503964402616, 0.4883742461836731, 0.438797396423358, 0.6545057569551385, 0.34697603929357623, 0.47435958221101304, 0.39859808836598754, 0.6193788045996, 0.44001113347465093, 0.6302589844516637, 0.16793892038650116, 0.10252009036107756, 0.09987720486596352, 0.121047571874901, 0.11763340472688066, 0.11625865848336547, 0.1356246793354332, 0.09309600868048729, 0.11877858216787152, 0.20402307215422266, 0.18490983246198334, 0.1709520884265341, 0.21821444656747946, 0.16914140677036538, 0.17078014268163566, 0.1558761893759092, 0.1841535022609182, 0.15539375732653005, 0.05290328663586297, 0.058834113316189374, 0.06591692747502842, 0.03506308158726679, 0.08924418486682517, 0.07072693820065012, 0.07115224276865717, 0.10152153358024407, 0.06697752281348912, 0.09386098741497895, 0.07748365124106371, 0.08217196954889971, 0.06983175475441328, 0.10505178312602659, 0.07801867073374891, 0.07775343961530512, 0.05224036851249769, 0.09806771101687484, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12398150754531767, 0.026480636305764582, 0.11478896716659581, 0.019086380616214926, 0.0161828490301128, 0.04050106751160998, 0.0867150097493814, 0.06488334398697693, 0.08639752643616172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019869943237855292, 0.01944212523972222, 0.015815757112356166, 0.01077290889299276, 0.02649369164242177, 0.028830915740590934, 0.016552138388776116, 0.01457563750241897, 0.015429613354437266, 0.26138697914426945, 0.2964367460518782, 0.2705358275238776, 0.2363047923767786, 0.23752972149408647, 0.26826311612543796, 0.2820805521637926, 0.2990888499920641, 0.2554615020060679, 0.043105578629359265, 0.049908296283156184, 0.05814680907210401, 0.08016906102129906, 0.06519261453445346, 0.07358581051356683, 0.07845656455166827, 0.05889698979439595, 0.07053570957632949, 0.13327066452466974, 0.09814141576203073, 0.15772301972180047, 0.11373195596335794, 0.13749110583312507, 0.12752428799988047, 0.13440857020395158, 0.13574770457305896, 0.15455810017287153, 0.1810063835233383, 0.20876263645822768, 0.21223146557973227, 0.20604597788649237, 0.1882590107662837, 0.1825867779225998, 0.19643944693496873, 0.21285253196428378, 0.19122403165871116, 0.14168823127513808, 0.15631695085224306, 0.15666447050044807, 0.14767419667062254, 0.15554310023751228, 0.1381305815445325, 0.13758691408236723, 0.15749124301824358, 0.14202412939285058, 0.17121653842431894, 0.1745285914678688, 0.2032437749718784, 0.1737192039170501, 0.17381486995128193, 0.17032802950556414, 0.17061395354215603, 0.18703140437326238, 0.17896722191941894, 0.17070396139874433, 0.16016577250744035, 0.16771681473151712, 0.16333663233234053, 0.16045287781870177, 0.15767035317445266, 0.16911301074068796, 0.159995264258192, 0.16601435832597833, 0.2609818842444396, 0.16877971831310246, 0.16656648627464987, 0.17539471573713727, 0.1410822591108416, 0.16489327285704036, 0.3442070313125376, 0.13313410618187738, 0.30734113901670657, 0.1420316212209164, 0.2658485358056907, 0.0711740428121338, 0.16622141012412195, 0.13566327070490702, 0.1603520603967198, 0.16939270356108604, 0.22679738843076802, 0.19814881121442274, 0.17725633145644437, 0.16752340108009012, 0.15781945992981272, 0.17062617324198104, 0.1814020226159193, 0.17375881028988938, 0.17017240083753804, 0.16178045657852813, 0.16811390574130947, 0.06770914141475803, 0.061714167492443295, 0.06406532465497972, 0.06560357999669597, 0.07469521089279496, 0.07134115472793123, 0.07754399068243478, 0.07340929448741496, 0.07241274576772316]}, "mutation_prompt": null}
{"id": "fea99697-5ad7-4764-a016-1a7f7b8cb1fb", "solution": "import numpy as np\n\nclass DynamicEnhancedAdaptiveFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.beta_max = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        def attractiveness(distance):\n            return self.beta_min + (self.beta_max - self.beta_min) * np.exp(-self.alpha * distance)\n\n        population = initialize_population()\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i, x in enumerate(population):\n                for j, y in enumerate(population):\n                    if func(y) < func(x):\n                        distance = np.linalg.norm(x - y)\n                        beta = attractiveness(distance)\n                        population[i] += beta * (y - x) + np.random.uniform(-1, 1, self.dim)\n                        \n                        # Introduce dynamic update of alpha and beta parameters with probability 0.2\n                        if np.random.rand() < 0.2:\n                            self.alpha = max(0.1, self.alpha - 0.001)  # Update alpha\n                            self.beta_max = min(1.0, self.beta_max + 0.001)  # Update beta_max\n\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "DynamicEnhancedAdaptiveFireflyAlgorithm", "description": "Dynamic Enhanced Adaptive Firefly Algorithm with Parameter Fine-tuning for Black Box Optimization.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "baa2cbc7-8cfd-4871-9c38-41f8dd4e4b7a", "metadata": {"aucs": [0.26364390636496104, 0.29300561854970686, 0.24428300964481153, 0.23939973834037565, 0.2467495273967748, 0.26842577731711703, 0.2522675017302819, 0.2575302638375875, 0.2534433022604047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0766572902498952, 0.07056466479399093, 0.06578702271483305, 0.09369028126931711, 0.060637128292857057, 0.06678864504557569, 0.06943100799359891, 0.07307976137468397, 0.07036514449132503, 0.06171576709414861, 0.04904287198228763, 0.08246375542491846, 0.06257926847592532, 0.04989649919135719, 0.04431647929424798, 0.05065140133167656, 0.048916498435184086, 0.0495503964402616, 0.4883742461836731, 0.438797396423358, 0.6545057569551385, 0.34697603929357623, 0.47435958221101304, 0.39859808836598754, 0.6193788045996, 0.44001113347465093, 0.6302589844516637, 0.16793892038650116, 0.10252009036107756, 0.09987720486596352, 0.121047571874901, 0.11763340472688066, 0.11625865848336547, 0.1356246793354332, 0.09309600868048729, 0.11877858216787152, 0.20402307215422266, 0.18490983246198334, 0.1709520884265341, 0.21821444656747946, 0.16914140677036538, 0.17078014268163566, 0.1558761893759092, 0.1841535022609182, 0.15539375732653005, 0.05290328663586297, 0.058834113316189374, 0.06591692747502842, 0.03506308158726679, 0.08924418486682517, 0.07072693820065012, 0.07115224276865717, 0.10152153358024407, 0.06697752281348912, 0.09386098741497895, 0.07748365124106371, 0.08217196954889971, 0.06983175475441328, 0.10505178312602659, 0.07801867073374891, 0.07775343961530512, 0.05224036851249769, 0.09806771101687484, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12398150754531767, 0.026480636305764582, 0.11478896716659581, 0.019086380616214926, 0.0161828490301128, 0.04050106751160998, 0.0867150097493814, 0.06488334398697693, 0.08639752643616172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019869943237855292, 0.01944212523972222, 0.015815757112356166, 0.01077290889299276, 0.02649369164242177, 0.028830915740590934, 0.016552138388776116, 0.01457563750241897, 0.015429613354437266, 0.26138697914426945, 0.2964367460518782, 0.2705358275238776, 0.2363047923767786, 0.23752972149408647, 0.26826311612543796, 0.2820805521637926, 0.2990888499920641, 0.2554615020060679, 0.043105578629359265, 0.049908296283156184, 0.05814680907210401, 0.08016906102129906, 0.06519261453445346, 0.07358581051356683, 0.07845656455166827, 0.05889698979439595, 0.07053570957632949, 0.13327066452466974, 0.09814141576203073, 0.15772301972180047, 0.11373195596335794, 0.13749110583312507, 0.12752428799988047, 0.13440857020395158, 0.13574770457305896, 0.15455810017287153, 0.1810063835233383, 0.20876263645822768, 0.21223146557973227, 0.20604597788649237, 0.1882590107662837, 0.1825867779225998, 0.19643944693496873, 0.21285253196428378, 0.19122403165871116, 0.14168823127513808, 0.15631695085224306, 0.15666447050044807, 0.14767419667062254, 0.15554310023751228, 0.1381305815445325, 0.13758691408236723, 0.15749124301824358, 0.14202412939285058, 0.17121653842431894, 0.1745285914678688, 0.2032437749718784, 0.1737192039170501, 0.17381486995128193, 0.17032802950556414, 0.17061395354215603, 0.18703140437326238, 0.17896722191941894, 0.17070396139874433, 0.16016577250744035, 0.16771681473151712, 0.16333663233234053, 0.16045287781870177, 0.15767035317445266, 0.16911301074068796, 0.159995264258192, 0.16601435832597833, 0.2609818842444396, 0.16877971831310246, 0.16656648627464987, 0.17539471573713727, 0.1410822591108416, 0.16489327285704036, 0.3442070313125376, 0.13313410618187738, 0.30734113901670657, 0.1420316212209164, 0.2658485358056907, 0.0711740428121338, 0.16622141012412195, 0.13566327070490702, 0.1603520603967198, 0.16939270356108604, 0.22679738843076802, 0.19814881121442274, 0.17725633145644437, 0.16752340108009012, 0.15781945992981272, 0.17062617324198104, 0.1814020226159193, 0.17375881028988938, 0.17017240083753804, 0.16178045657852813, 0.16811390574130947, 0.06770914141475803, 0.061714167492443295, 0.06406532465497972, 0.06560357999669597, 0.07469521089279496, 0.07134115472793123, 0.07754399068243478, 0.07340929448741496, 0.07241274576772316]}, "mutation_prompt": null}
{"id": "ae7f2524-5628-4a51-8b56-bac4a1f22dbb", "solution": "import numpy as np\n\nclass DynamicEnhancedAdaptiveFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.beta_max = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        def attractiveness(distance):\n            return self.beta_min + (self.beta_max - self.beta_min) * np.exp(-self.alpha * distance)\n\n        population = initialize_population()\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i, x in enumerate(population):\n                for j, y in enumerate(population):\n                    if func(y) < func(x):\n                        distance = np.linalg.norm(x - y)\n                        beta = attractiveness(distance)\n                        population[i] += beta * (y - x) + np.random.uniform(-1, 1, self.dim)\n                        \n                        # Introduce dynamic update of alpha and beta parameters with probability 0.2\n                        if np.random.rand() < 0.2:\n                            self.alpha = max(0.1, self.alpha - 0.001)  # Update alpha\n                            self.beta_max = min(1.0, self.beta_max + 0.001)  # Update beta_max\n\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "DynamicEnhancedAdaptiveFireflyAlgorithm", "description": "Dynamic Enhanced Adaptive Firefly Algorithm with Parameter Fine-tuning for Black Box Optimization.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "baa2cbc7-8cfd-4871-9c38-41f8dd4e4b7a", "metadata": {"aucs": [0.26364390636496104, 0.29300561854970686, 0.24428300964481153, 0.23939973834037565, 0.2467495273967748, 0.26842577731711703, 0.2522675017302819, 0.2575302638375875, 0.2534433022604047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0766572902498952, 0.07056466479399093, 0.06578702271483305, 0.09369028126931711, 0.060637128292857057, 0.06678864504557569, 0.06943100799359891, 0.07307976137468397, 0.07036514449132503, 0.06171576709414861, 0.04904287198228763, 0.08246375542491846, 0.06257926847592532, 0.04989649919135719, 0.04431647929424798, 0.05065140133167656, 0.048916498435184086, 0.0495503964402616, 0.4883742461836731, 0.438797396423358, 0.6545057569551385, 0.34697603929357623, 0.47435958221101304, 0.39859808836598754, 0.6193788045996, 0.44001113347465093, 0.6302589844516637, 0.16793892038650116, 0.10252009036107756, 0.09987720486596352, 0.121047571874901, 0.11763340472688066, 0.11625865848336547, 0.1356246793354332, 0.09309600868048729, 0.11877858216787152, 0.20402307215422266, 0.18490983246198334, 0.1709520884265341, 0.21821444656747946, 0.16914140677036538, 0.17078014268163566, 0.1558761893759092, 0.1841535022609182, 0.15539375732653005, 0.05290328663586297, 0.058834113316189374, 0.06591692747502842, 0.03506308158726679, 0.08924418486682517, 0.07072693820065012, 0.07115224276865717, 0.10152153358024407, 0.06697752281348912, 0.09386098741497895, 0.07748365124106371, 0.08217196954889971, 0.06983175475441328, 0.10505178312602659, 0.07801867073374891, 0.07775343961530512, 0.05224036851249769, 0.09806771101687484, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12398150754531767, 0.026480636305764582, 0.11478896716659581, 0.019086380616214926, 0.0161828490301128, 0.04050106751160998, 0.0867150097493814, 0.06488334398697693, 0.08639752643616172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019869943237855292, 0.01944212523972222, 0.015815757112356166, 0.01077290889299276, 0.02649369164242177, 0.028830915740590934, 0.016552138388776116, 0.01457563750241897, 0.015429613354437266, 0.26138697914426945, 0.2964367460518782, 0.2705358275238776, 0.2363047923767786, 0.23752972149408647, 0.26826311612543796, 0.2820805521637926, 0.2990888499920641, 0.2554615020060679, 0.043105578629359265, 0.049908296283156184, 0.05814680907210401, 0.08016906102129906, 0.06519261453445346, 0.07358581051356683, 0.07845656455166827, 0.05889698979439595, 0.07053570957632949, 0.13327066452466974, 0.09814141576203073, 0.15772301972180047, 0.11373195596335794, 0.13749110583312507, 0.12752428799988047, 0.13440857020395158, 0.13574770457305896, 0.15455810017287153, 0.1810063835233383, 0.20876263645822768, 0.21223146557973227, 0.20604597788649237, 0.1882590107662837, 0.1825867779225998, 0.19643944693496873, 0.21285253196428378, 0.19122403165871116, 0.14168823127513808, 0.15631695085224306, 0.15666447050044807, 0.14767419667062254, 0.15554310023751228, 0.1381305815445325, 0.13758691408236723, 0.15749124301824358, 0.14202412939285058, 0.17121653842431894, 0.1745285914678688, 0.2032437749718784, 0.1737192039170501, 0.17381486995128193, 0.17032802950556414, 0.17061395354215603, 0.18703140437326238, 0.17896722191941894, 0.17070396139874433, 0.16016577250744035, 0.16771681473151712, 0.16333663233234053, 0.16045287781870177, 0.15767035317445266, 0.16911301074068796, 0.159995264258192, 0.16601435832597833, 0.2609818842444396, 0.16877971831310246, 0.16656648627464987, 0.17539471573713727, 0.1410822591108416, 0.16489327285704036, 0.3442070313125376, 0.13313410618187738, 0.30734113901670657, 0.1420316212209164, 0.2658485358056907, 0.0711740428121338, 0.16622141012412195, 0.13566327070490702, 0.1603520603967198, 0.16939270356108604, 0.22679738843076802, 0.19814881121442274, 0.17725633145644437, 0.16752340108009012, 0.15781945992981272, 0.17062617324198104, 0.1814020226159193, 0.17375881028988938, 0.17017240083753804, 0.16178045657852813, 0.16811390574130947, 0.06770914141475803, 0.061714167492443295, 0.06406532465497972, 0.06560357999669597, 0.07469521089279496, 0.07134115472793123, 0.07754399068243478, 0.07340929448741496, 0.07241274576772316]}, "mutation_prompt": null}
{"id": "f2ff4a3b-af89-49ee-85f2-b3240db06db4", "solution": "import numpy as np\n\nclass DynamicEnhancedAdaptiveFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.beta_max = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        def attractiveness(distance):\n            return self.beta_min + (self.beta_max - self.beta_min) * np.exp(-self.alpha * distance)\n\n        population = initialize_population()\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i, x in enumerate(population):\n                for j, y in enumerate(population):\n                    if func(y) < func(x):\n                        distance = np.linalg.norm(x - y)\n                        beta = attractiveness(distance)\n                        population[i] += beta * (y - x) + np.random.uniform(-1, 1, self.dim)\n                        \n                        # Introduce dynamic update of alpha and beta parameters with probability 0.2\n                        if np.random.rand() < 0.2:\n                            self.alpha = max(0.1, self.alpha - 0.001)  # Update alpha\n                            self.beta_max = min(1.0, self.beta_max + 0.001)  # Update beta_max\n\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "DynamicEnhancedAdaptiveFireflyAlgorithm", "description": "Dynamic Enhanced Adaptive Firefly Algorithm with Parameter Fine-tuning for Black Box Optimization.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "baa2cbc7-8cfd-4871-9c38-41f8dd4e4b7a", "metadata": {"aucs": [0.26364390636496104, 0.29300561854970686, 0.24428300964481153, 0.23939973834037565, 0.2467495273967748, 0.26842577731711703, 0.2522675017302819, 0.2575302638375875, 0.2534433022604047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0766572902498952, 0.07056466479399093, 0.06578702271483305, 0.09369028126931711, 0.060637128292857057, 0.06678864504557569, 0.06943100799359891, 0.07307976137468397, 0.07036514449132503, 0.06171576709414861, 0.04904287198228763, 0.08246375542491846, 0.06257926847592532, 0.04989649919135719, 0.04431647929424798, 0.05065140133167656, 0.048916498435184086, 0.0495503964402616, 0.4883742461836731, 0.438797396423358, 0.6545057569551385, 0.34697603929357623, 0.47435958221101304, 0.39859808836598754, 0.6193788045996, 0.44001113347465093, 0.6302589844516637, 0.16793892038650116, 0.10252009036107756, 0.09987720486596352, 0.121047571874901, 0.11763340472688066, 0.11625865848336547, 0.1356246793354332, 0.09309600868048729, 0.11877858216787152, 0.20402307215422266, 0.18490983246198334, 0.1709520884265341, 0.21821444656747946, 0.16914140677036538, 0.17078014268163566, 0.1558761893759092, 0.1841535022609182, 0.15539375732653005, 0.05290328663586297, 0.058834113316189374, 0.06591692747502842, 0.03506308158726679, 0.08924418486682517, 0.07072693820065012, 0.07115224276865717, 0.10152153358024407, 0.06697752281348912, 0.09386098741497895, 0.07748365124106371, 0.08217196954889971, 0.06983175475441328, 0.10505178312602659, 0.07801867073374891, 0.07775343961530512, 0.05224036851249769, 0.09806771101687484, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12398150754531767, 0.026480636305764582, 0.11478896716659581, 0.019086380616214926, 0.0161828490301128, 0.04050106751160998, 0.0867150097493814, 0.06488334398697693, 0.08639752643616172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019869943237855292, 0.01944212523972222, 0.015815757112356166, 0.01077290889299276, 0.02649369164242177, 0.028830915740590934, 0.016552138388776116, 0.01457563750241897, 0.015429613354437266, 0.26138697914426945, 0.2964367460518782, 0.2705358275238776, 0.2363047923767786, 0.23752972149408647, 0.26826311612543796, 0.2820805521637926, 0.2990888499920641, 0.2554615020060679, 0.043105578629359265, 0.049908296283156184, 0.05814680907210401, 0.08016906102129906, 0.06519261453445346, 0.07358581051356683, 0.07845656455166827, 0.05889698979439595, 0.07053570957632949, 0.13327066452466974, 0.09814141576203073, 0.15772301972180047, 0.11373195596335794, 0.13749110583312507, 0.12752428799988047, 0.13440857020395158, 0.13574770457305896, 0.15455810017287153, 0.1810063835233383, 0.20876263645822768, 0.21223146557973227, 0.20604597788649237, 0.1882590107662837, 0.1825867779225998, 0.19643944693496873, 0.21285253196428378, 0.19122403165871116, 0.14168823127513808, 0.15631695085224306, 0.15666447050044807, 0.14767419667062254, 0.15554310023751228, 0.1381305815445325, 0.13758691408236723, 0.15749124301824358, 0.14202412939285058, 0.17121653842431894, 0.1745285914678688, 0.2032437749718784, 0.1737192039170501, 0.17381486995128193, 0.17032802950556414, 0.17061395354215603, 0.18703140437326238, 0.17896722191941894, 0.17070396139874433, 0.16016577250744035, 0.16771681473151712, 0.16333663233234053, 0.16045287781870177, 0.15767035317445266, 0.16911301074068796, 0.159995264258192, 0.16601435832597833, 0.2609818842444396, 0.16877971831310246, 0.16656648627464987, 0.17539471573713727, 0.1410822591108416, 0.16489327285704036, 0.3442070313125376, 0.13313410618187738, 0.30734113901670657, 0.1420316212209164, 0.2658485358056907, 0.0711740428121338, 0.16622141012412195, 0.13566327070490702, 0.1603520603967198, 0.16939270356108604, 0.22679738843076802, 0.19814881121442274, 0.17725633145644437, 0.16752340108009012, 0.15781945992981272, 0.17062617324198104, 0.1814020226159193, 0.17375881028988938, 0.17017240083753804, 0.16178045657852813, 0.16811390574130947, 0.06770914141475803, 0.061714167492443295, 0.06406532465497972, 0.06560357999669597, 0.07469521089279496, 0.07134115472793123, 0.07754399068243478, 0.07340929448741496, 0.07241274576772316]}, "mutation_prompt": null}
{"id": "2db74590-143a-45b9-b430-40fd2e2ee3f6", "solution": "import numpy as np\n\nclass EnhancedDynamicEnhancedAdaptiveFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.beta_max = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        def attractiveness(distance):\n            return self.beta_min + (self.beta_max - self.beta_min) * np.exp(-self.alpha * distance)\n\n        population = initialize_population()\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i, x in enumerate(population):\n                for j, y in enumerate(population):\n                    if func(y) < func(x):\n                        distance = np.linalg.norm(x - y)\n                        beta = attractiveness(distance)\n                        population[i] += beta * (y - x) + np.random.uniform(-1, 1, self.dim)\n                        \n                        # Introduce dynamic update of alpha and beta parameters with probability 0.2\n                        if np.random.rand() < 0.2:\n                            self.alpha = max(0.1, self.alpha - 0.001)  # Update alpha\n                            self.beta_max = min(1.0, self.beta_max + 0.001)  # Update beta_max\n                            \n                            # Integrate evolutionary strategy to enhance exploration\n                            population[i] += np.random.uniform(-0.1, 0.1, self.dim)\n\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "EnhancedDynamicEnhancedAdaptiveFireflyAlgorithm", "description": "Enhancing Dynamic Enhanced Adaptive Firefly Algorithm with Evolutionary Strategy for Improved Black Box Optimization.", "configspace": "", "generation": 27, "fitness": 0.12789914231176128, "feedback": "The algorithm EnhancedDynamicEnhancedAdaptiveFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.11.", "error": "", "parent_id": "baa2cbc7-8cfd-4871-9c38-41f8dd4e4b7a", "metadata": {"aucs": [0.24814581799612379, 0.24610976248599503, 0.2477145773175532, 0.25549300418064025, 0.2279092173372509, 0.24008770576172633, 0.23794630824865337, 0.27666661203262044, 0.23427281479244422, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0697747723123785, 0.07128741739054023, 0.06698386080358054, 0.06899879097546147, 0.06936532489807634, 0.06424148834555088, 0.0644664304930187, 0.08223869892623425, 0.09474176441255877, 0.05420387858060416, 0.05538310699088633, 0.05080123341165654, 0.05719695073485831, 0.0445155005793455, 0.047225760883656265, 0.05039106430813933, 0.05086278308365, 0.053187222207931706, 0.4377953197438814, 0.5409166384810871, 0.5349435172423, 0.36404248330620126, 0.4047666072612075, 0.3886838363394046, 0.5264526852600941, 0.46183687603041323, 0.5966001237434189, 0.11416987330389528, 0.11415316683527599, 0.0997446913358645, 0.11060256441773741, 0.1074750247543741, 0.10995762924354235, 0.15716637579652237, 0.11518599162677379, 0.12244882030554183, 0.18993518390833874, 0.20674263226265166, 0.1492524941668969, 0.18779232157513948, 0.21219697467771825, 0.1635365945067595, 0.13363587824641887, 0.14360373538579319, 0.17746314633393956, 0.06116594396415109, 0.08667940524976891, 0.04332891034500952, 0.020324615869090068, 0.08716747054719964, 9.999999999998899e-05, 0.07499470440719325, 0.07221533305839423, 0.08762521138147661, 0.06894966979838135, 0.09709505226454584, 0.06972394199054166, 0.0634390709786512, 0.07209290330012041, 0.058293413996726495, 0.09580977152101366, 0.04990546725111367, 0.07990484623389715, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06776285086646638, 0.07056053270393059, 0.1192723304069605, 0.02900472799983711, 0.04192943102971691, 0.029625132083671235, 0.06205949483154505, 0.08048919675208877, 0.06895390419351821, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020753674759693586, 0.031102806363376145, 0.02722739271905661, 0.013431093585360765, 0.03538290947028622, 0.030787960064082465, 0.021966404511374327, 0.026891765024753322, 0.029429017457276996, 0.27339903385504216, 0.27135746329721255, 0.28907981948333406, 0.25395659086739175, 0.23462250857470668, 0.22779246088565885, 0.26756806562059776, 0.2703065720817658, 0.2518933964147322, 0.052277457473566935, 0.07398311768102284, 0.05469309925614485, 0.07565783389816993, 0.07575234211135973, 0.06899801502599912, 0.07104658427415889, 0.056821560645375024, 0.06808862686067463, 0.14415502699491922, 0.12034071765510201, 0.12047684450666851, 0.14006553395740573, 0.11215109892833752, 0.11645780460497845, 0.13706563241739222, 0.1397304660831694, 0.09632674352480919, 0.18289317734230515, 0.18409620942326377, 0.2163443931260679, 0.209894509966997, 0.2069353983366674, 0.21657503867680383, 0.20137343093011528, 0.234975864465096, 0.1803812978216509, 0.1454220695316144, 0.1343171939971689, 0.15309334948760533, 0.14886791945236622, 0.14540750771640465, 0.16083932885134877, 0.1467182096592432, 0.15191633698692253, 0.1479828555365419, 0.16365873715487722, 0.18714036386753086, 0.18052149418136176, 0.212406199172943, 0.19614624350536813, 0.1823787030143702, 0.186724017061334, 0.1758920643459967, 0.17807925896336696, 0.1765153078207532, 0.15886497138759037, 0.16032215691137386, 0.17483511158916243, 0.1643921274513015, 0.16132758461223562, 0.1518504583867496, 0.1735699323917177, 0.1592092445088158, 0.16181772720253662, 0.16916421418518224, 0.1622738777843582, 0.17504815412375974, 0.15616601217620552, 0.27047557688125845, 0.20942514010756585, 0.12165402451996032, 0.15406555854427118, 0.23152257123708764, 0.21678357170082685, 0.0718824612519775, 0.14050248116653397, 0.1489890339996338, 0.13494788982404493, 0.16697765304832124, 0.10097139549876666, 0.09547117305728281, 0.172551806459314, 0.17481743307183273, 0.16782689965145947, 0.1872175383556609, 0.16346981239333325, 0.17169688709119624, 0.1847292559309449, 0.16702796264423014, 0.1584662746918304, 0.06491527040872624, 0.06281963509278554, 0.08391332657432793, 0.06618373645970965, 0.07516375534559316, 0.06255361667406145, 0.05976222343965032, 0.06312839933646697, 0.07644049223241167]}, "mutation_prompt": null}
{"id": "d43aa40c-b3aa-458b-8ec7-00bc33930a0f", "solution": "import numpy as np\n\nclass DynamicEnhancedAdaptiveFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.beta_max = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        def attractiveness(distance):\n            return self.beta_min + (self.beta_max - self.beta_min) * np.exp(-self.alpha * distance)\n\n        population = initialize_population()\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i, x in enumerate(population):\n                for j, y in enumerate(population):\n                    if func(y) < func(x):\n                        distance = np.linalg.norm(x - y)\n                        beta = attractiveness(distance)\n                        population[i] += beta * (y - x) + np.random.uniform(-1, 1, self.dim)\n                        \n                        # Introduce dynamic update of alpha and beta parameters with probability 0.2\n                        if np.random.rand() < 0.2:\n                            self.alpha = max(0.1, self.alpha - 0.001)  # Update alpha\n                            self.beta_max = min(1.0, self.beta_max + 0.001)  # Update beta_max\n\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "DynamicEnhancedAdaptiveFireflyAlgorithm", "description": "Dynamic Enhanced Adaptive Firefly Algorithm with Parameter Fine-tuning for Black Box Optimization.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "baa2cbc7-8cfd-4871-9c38-41f8dd4e4b7a", "metadata": {"aucs": [0.26364390636496104, 0.29300561854970686, 0.24428300964481153, 0.23939973834037565, 0.2467495273967748, 0.26842577731711703, 0.2522675017302819, 0.2575302638375875, 0.2534433022604047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0766572902498952, 0.07056466479399093, 0.06578702271483305, 0.09369028126931711, 0.060637128292857057, 0.06678864504557569, 0.06943100799359891, 0.07307976137468397, 0.07036514449132503, 0.06171576709414861, 0.04904287198228763, 0.08246375542491846, 0.06257926847592532, 0.04989649919135719, 0.04431647929424798, 0.05065140133167656, 0.048916498435184086, 0.0495503964402616, 0.4883742461836731, 0.438797396423358, 0.6545057569551385, 0.34697603929357623, 0.47435958221101304, 0.39859808836598754, 0.6193788045996, 0.44001113347465093, 0.6302589844516637, 0.16793892038650116, 0.10252009036107756, 0.09987720486596352, 0.121047571874901, 0.11763340472688066, 0.11625865848336547, 0.1356246793354332, 0.09309600868048729, 0.11877858216787152, 0.20402307215422266, 0.18490983246198334, 0.1709520884265341, 0.21821444656747946, 0.16914140677036538, 0.17078014268163566, 0.1558761893759092, 0.1841535022609182, 0.15539375732653005, 0.05290328663586297, 0.058834113316189374, 0.06591692747502842, 0.03506308158726679, 0.08924418486682517, 0.07072693820065012, 0.07115224276865717, 0.10152153358024407, 0.06697752281348912, 0.09386098741497895, 0.07748365124106371, 0.08217196954889971, 0.06983175475441328, 0.10505178312602659, 0.07801867073374891, 0.07775343961530512, 0.05224036851249769, 0.09806771101687484, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12398150754531767, 0.026480636305764582, 0.11478896716659581, 0.019086380616214926, 0.0161828490301128, 0.04050106751160998, 0.0867150097493814, 0.06488334398697693, 0.08639752643616172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019869943237855292, 0.01944212523972222, 0.015815757112356166, 0.01077290889299276, 0.02649369164242177, 0.028830915740590934, 0.016552138388776116, 0.01457563750241897, 0.015429613354437266, 0.26138697914426945, 0.2964367460518782, 0.2705358275238776, 0.2363047923767786, 0.23752972149408647, 0.26826311612543796, 0.2820805521637926, 0.2990888499920641, 0.2554615020060679, 0.043105578629359265, 0.049908296283156184, 0.05814680907210401, 0.08016906102129906, 0.06519261453445346, 0.07358581051356683, 0.07845656455166827, 0.05889698979439595, 0.07053570957632949, 0.13327066452466974, 0.09814141576203073, 0.15772301972180047, 0.11373195596335794, 0.13749110583312507, 0.12752428799988047, 0.13440857020395158, 0.13574770457305896, 0.15455810017287153, 0.1810063835233383, 0.20876263645822768, 0.21223146557973227, 0.20604597788649237, 0.1882590107662837, 0.1825867779225998, 0.19643944693496873, 0.21285253196428378, 0.19122403165871116, 0.14168823127513808, 0.15631695085224306, 0.15666447050044807, 0.14767419667062254, 0.15554310023751228, 0.1381305815445325, 0.13758691408236723, 0.15749124301824358, 0.14202412939285058, 0.17121653842431894, 0.1745285914678688, 0.2032437749718784, 0.1737192039170501, 0.17381486995128193, 0.17032802950556414, 0.17061395354215603, 0.18703140437326238, 0.17896722191941894, 0.17070396139874433, 0.16016577250744035, 0.16771681473151712, 0.16333663233234053, 0.16045287781870177, 0.15767035317445266, 0.16911301074068796, 0.159995264258192, 0.16601435832597833, 0.2609818842444396, 0.16877971831310246, 0.16656648627464987, 0.17539471573713727, 0.1410822591108416, 0.16489327285704036, 0.3442070313125376, 0.13313410618187738, 0.30734113901670657, 0.1420316212209164, 0.2658485358056907, 0.0711740428121338, 0.16622141012412195, 0.13566327070490702, 0.1603520603967198, 0.16939270356108604, 0.22679738843076802, 0.19814881121442274, 0.17725633145644437, 0.16752340108009012, 0.15781945992981272, 0.17062617324198104, 0.1814020226159193, 0.17375881028988938, 0.17017240083753804, 0.16178045657852813, 0.16811390574130947, 0.06770914141475803, 0.061714167492443295, 0.06406532465497972, 0.06560357999669597, 0.07469521089279496, 0.07134115472793123, 0.07754399068243478, 0.07340929448741496, 0.07241274576772316]}, "mutation_prompt": null}
{"id": "d03589d2-4cbc-45db-b557-518e21f2fe6e", "solution": "import numpy as np\n\nclass DynamicEnhancedAdaptiveFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.beta_max = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        def attractiveness(distance):\n            return self.beta_min + (self.beta_max - self.beta_min) * np.exp(-self.alpha * distance)\n\n        population = initialize_population()\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i, x in enumerate(population):\n                for j, y in enumerate(population):\n                    if func(y) < func(x):\n                        distance = np.linalg.norm(x - y)\n                        beta = attractiveness(distance)\n                        population[i] += beta * (y - x) + np.random.uniform(-1, 1, self.dim)\n                        \n                        # Introduce dynamic update of alpha and beta parameters with probability 0.2\n                        if np.random.rand() < 0.2:\n                            self.alpha = max(0.1, self.alpha - 0.001)  # Update alpha\n                            self.beta_max = min(1.0, self.beta_max + 0.001)  # Update beta_max\n\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "DynamicEnhancedAdaptiveFireflyAlgorithm", "description": "Dynamic Enhanced Adaptive Firefly Algorithm with Parameter Fine-tuning for Black Box Optimization.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "baa2cbc7-8cfd-4871-9c38-41f8dd4e4b7a", "metadata": {"aucs": [0.26364390636496104, 0.29300561854970686, 0.24428300964481153, 0.23939973834037565, 0.2467495273967748, 0.26842577731711703, 0.2522675017302819, 0.2575302638375875, 0.2534433022604047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0766572902498952, 0.07056466479399093, 0.06578702271483305, 0.09369028126931711, 0.060637128292857057, 0.06678864504557569, 0.06943100799359891, 0.07307976137468397, 0.07036514449132503, 0.06171576709414861, 0.04904287198228763, 0.08246375542491846, 0.06257926847592532, 0.04989649919135719, 0.04431647929424798, 0.05065140133167656, 0.048916498435184086, 0.0495503964402616, 0.4883742461836731, 0.438797396423358, 0.6545057569551385, 0.34697603929357623, 0.47435958221101304, 0.39859808836598754, 0.6193788045996, 0.44001113347465093, 0.6302589844516637, 0.16793892038650116, 0.10252009036107756, 0.09987720486596352, 0.121047571874901, 0.11763340472688066, 0.11625865848336547, 0.1356246793354332, 0.09309600868048729, 0.11877858216787152, 0.20402307215422266, 0.18490983246198334, 0.1709520884265341, 0.21821444656747946, 0.16914140677036538, 0.17078014268163566, 0.1558761893759092, 0.1841535022609182, 0.15539375732653005, 0.05290328663586297, 0.058834113316189374, 0.06591692747502842, 0.03506308158726679, 0.08924418486682517, 0.07072693820065012, 0.07115224276865717, 0.10152153358024407, 0.06697752281348912, 0.09386098741497895, 0.07748365124106371, 0.08217196954889971, 0.06983175475441328, 0.10505178312602659, 0.07801867073374891, 0.07775343961530512, 0.05224036851249769, 0.09806771101687484, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12398150754531767, 0.026480636305764582, 0.11478896716659581, 0.019086380616214926, 0.0161828490301128, 0.04050106751160998, 0.0867150097493814, 0.06488334398697693, 0.08639752643616172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019869943237855292, 0.01944212523972222, 0.015815757112356166, 0.01077290889299276, 0.02649369164242177, 0.028830915740590934, 0.016552138388776116, 0.01457563750241897, 0.015429613354437266, 0.26138697914426945, 0.2964367460518782, 0.2705358275238776, 0.2363047923767786, 0.23752972149408647, 0.26826311612543796, 0.2820805521637926, 0.2990888499920641, 0.2554615020060679, 0.043105578629359265, 0.049908296283156184, 0.05814680907210401, 0.08016906102129906, 0.06519261453445346, 0.07358581051356683, 0.07845656455166827, 0.05889698979439595, 0.07053570957632949, 0.13327066452466974, 0.09814141576203073, 0.15772301972180047, 0.11373195596335794, 0.13749110583312507, 0.12752428799988047, 0.13440857020395158, 0.13574770457305896, 0.15455810017287153, 0.1810063835233383, 0.20876263645822768, 0.21223146557973227, 0.20604597788649237, 0.1882590107662837, 0.1825867779225998, 0.19643944693496873, 0.21285253196428378, 0.19122403165871116, 0.14168823127513808, 0.15631695085224306, 0.15666447050044807, 0.14767419667062254, 0.15554310023751228, 0.1381305815445325, 0.13758691408236723, 0.15749124301824358, 0.14202412939285058, 0.17121653842431894, 0.1745285914678688, 0.2032437749718784, 0.1737192039170501, 0.17381486995128193, 0.17032802950556414, 0.17061395354215603, 0.18703140437326238, 0.17896722191941894, 0.17070396139874433, 0.16016577250744035, 0.16771681473151712, 0.16333663233234053, 0.16045287781870177, 0.15767035317445266, 0.16911301074068796, 0.159995264258192, 0.16601435832597833, 0.2609818842444396, 0.16877971831310246, 0.16656648627464987, 0.17539471573713727, 0.1410822591108416, 0.16489327285704036, 0.3442070313125376, 0.13313410618187738, 0.30734113901670657, 0.1420316212209164, 0.2658485358056907, 0.0711740428121338, 0.16622141012412195, 0.13566327070490702, 0.1603520603967198, 0.16939270356108604, 0.22679738843076802, 0.19814881121442274, 0.17725633145644437, 0.16752340108009012, 0.15781945992981272, 0.17062617324198104, 0.1814020226159193, 0.17375881028988938, 0.17017240083753804, 0.16178045657852813, 0.16811390574130947, 0.06770914141475803, 0.061714167492443295, 0.06406532465497972, 0.06560357999669597, 0.07469521089279496, 0.07134115472793123, 0.07754399068243478, 0.07340929448741496, 0.07241274576772316]}, "mutation_prompt": null}
{"id": "864a2e9a-fc57-4151-93c1-9424830afb74", "solution": "import numpy as np\n\nclass DynamicEnhancedAdaptiveFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.beta_max = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        def attractiveness(distance):\n            return self.beta_min + (self.beta_max - self.beta_min) * np.exp(-self.alpha * distance)\n\n        population = initialize_population()\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i, x in enumerate(population):\n                for j, y in enumerate(population):\n                    if func(y) < func(x):\n                        distance = np.linalg.norm(x - y)\n                        beta = attractiveness(distance)\n                        population[i] += beta * (y - x) + np.random.uniform(-1, 1, self.dim)\n                        \n                        # Introduce dynamic update of alpha and beta parameters with probability 0.2\n                        if np.random.rand() < 0.2:\n                            self.alpha = max(0.1, self.alpha - 0.001)  # Update alpha\n                            self.beta_max = min(1.0, self.beta_max + 0.001)  # Update beta_max\n\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "DynamicEnhancedAdaptiveFireflyAlgorithm", "description": "Dynamic Enhanced Adaptive Firefly Algorithm with Parameter Fine-tuning for Black Box Optimization.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "baa2cbc7-8cfd-4871-9c38-41f8dd4e4b7a", "metadata": {"aucs": [0.26364390636496104, 0.29300561854970686, 0.24428300964481153, 0.23939973834037565, 0.2467495273967748, 0.26842577731711703, 0.2522675017302819, 0.2575302638375875, 0.2534433022604047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0766572902498952, 0.07056466479399093, 0.06578702271483305, 0.09369028126931711, 0.060637128292857057, 0.06678864504557569, 0.06943100799359891, 0.07307976137468397, 0.07036514449132503, 0.06171576709414861, 0.04904287198228763, 0.08246375542491846, 0.06257926847592532, 0.04989649919135719, 0.04431647929424798, 0.05065140133167656, 0.048916498435184086, 0.0495503964402616, 0.4883742461836731, 0.438797396423358, 0.6545057569551385, 0.34697603929357623, 0.47435958221101304, 0.39859808836598754, 0.6193788045996, 0.44001113347465093, 0.6302589844516637, 0.16793892038650116, 0.10252009036107756, 0.09987720486596352, 0.121047571874901, 0.11763340472688066, 0.11625865848336547, 0.1356246793354332, 0.09309600868048729, 0.11877858216787152, 0.20402307215422266, 0.18490983246198334, 0.1709520884265341, 0.21821444656747946, 0.16914140677036538, 0.17078014268163566, 0.1558761893759092, 0.1841535022609182, 0.15539375732653005, 0.05290328663586297, 0.058834113316189374, 0.06591692747502842, 0.03506308158726679, 0.08924418486682517, 0.07072693820065012, 0.07115224276865717, 0.10152153358024407, 0.06697752281348912, 0.09386098741497895, 0.07748365124106371, 0.08217196954889971, 0.06983175475441328, 0.10505178312602659, 0.07801867073374891, 0.07775343961530512, 0.05224036851249769, 0.09806771101687484, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12398150754531767, 0.026480636305764582, 0.11478896716659581, 0.019086380616214926, 0.0161828490301128, 0.04050106751160998, 0.0867150097493814, 0.06488334398697693, 0.08639752643616172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019869943237855292, 0.01944212523972222, 0.015815757112356166, 0.01077290889299276, 0.02649369164242177, 0.028830915740590934, 0.016552138388776116, 0.01457563750241897, 0.015429613354437266, 0.26138697914426945, 0.2964367460518782, 0.2705358275238776, 0.2363047923767786, 0.23752972149408647, 0.26826311612543796, 0.2820805521637926, 0.2990888499920641, 0.2554615020060679, 0.043105578629359265, 0.049908296283156184, 0.05814680907210401, 0.08016906102129906, 0.06519261453445346, 0.07358581051356683, 0.07845656455166827, 0.05889698979439595, 0.07053570957632949, 0.13327066452466974, 0.09814141576203073, 0.15772301972180047, 0.11373195596335794, 0.13749110583312507, 0.12752428799988047, 0.13440857020395158, 0.13574770457305896, 0.15455810017287153, 0.1810063835233383, 0.20876263645822768, 0.21223146557973227, 0.20604597788649237, 0.1882590107662837, 0.1825867779225998, 0.19643944693496873, 0.21285253196428378, 0.19122403165871116, 0.14168823127513808, 0.15631695085224306, 0.15666447050044807, 0.14767419667062254, 0.15554310023751228, 0.1381305815445325, 0.13758691408236723, 0.15749124301824358, 0.14202412939285058, 0.17121653842431894, 0.1745285914678688, 0.2032437749718784, 0.1737192039170501, 0.17381486995128193, 0.17032802950556414, 0.17061395354215603, 0.18703140437326238, 0.17896722191941894, 0.17070396139874433, 0.16016577250744035, 0.16771681473151712, 0.16333663233234053, 0.16045287781870177, 0.15767035317445266, 0.16911301074068796, 0.159995264258192, 0.16601435832597833, 0.2609818842444396, 0.16877971831310246, 0.16656648627464987, 0.17539471573713727, 0.1410822591108416, 0.16489327285704036, 0.3442070313125376, 0.13313410618187738, 0.30734113901670657, 0.1420316212209164, 0.2658485358056907, 0.0711740428121338, 0.16622141012412195, 0.13566327070490702, 0.1603520603967198, 0.16939270356108604, 0.22679738843076802, 0.19814881121442274, 0.17725633145644437, 0.16752340108009012, 0.15781945992981272, 0.17062617324198104, 0.1814020226159193, 0.17375881028988938, 0.17017240083753804, 0.16178045657852813, 0.16811390574130947, 0.06770914141475803, 0.061714167492443295, 0.06406532465497972, 0.06560357999669597, 0.07469521089279496, 0.07134115472793123, 0.07754399068243478, 0.07340929448741496, 0.07241274576772316]}, "mutation_prompt": null}
{"id": "b1bea70f-52a5-4dd2-926d-ca7381dc4c82", "solution": "import numpy as np\n\nclass DynamicEnhancedAdaptiveFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.beta_max = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        def attractiveness(distance):\n            return self.beta_min + (self.beta_max - self.beta_min) * np.exp(-self.alpha * distance)\n\n        population = initialize_population()\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i, x in enumerate(population):\n                for j, y in enumerate(population):\n                    if func(y) < func(x):\n                        distance = np.linalg.norm(x - y)\n                        beta = attractiveness(distance)\n                        population[i] += beta * (y - x) + np.random.uniform(-1, 1, self.dim)\n                        \n                        # Introduce dynamic update of alpha and beta parameters with probability 0.2\n                        if np.random.rand() < 0.2:\n                            self.alpha = max(0.1, self.alpha - 0.001)  # Update alpha\n                            self.beta_max = min(1.0, self.beta_max + 0.001)  # Update beta_max\n\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "DynamicEnhancedAdaptiveFireflyAlgorithm", "description": "Dynamic Enhanced Adaptive Firefly Algorithm with Parameter Fine-tuning for Black Box Optimization.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "baa2cbc7-8cfd-4871-9c38-41f8dd4e4b7a", "metadata": {"aucs": [0.26364390636496104, 0.29300561854970686, 0.24428300964481153, 0.23939973834037565, 0.2467495273967748, 0.26842577731711703, 0.2522675017302819, 0.2575302638375875, 0.2534433022604047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0766572902498952, 0.07056466479399093, 0.06578702271483305, 0.09369028126931711, 0.060637128292857057, 0.06678864504557569, 0.06943100799359891, 0.07307976137468397, 0.07036514449132503, 0.06171576709414861, 0.04904287198228763, 0.08246375542491846, 0.06257926847592532, 0.04989649919135719, 0.04431647929424798, 0.05065140133167656, 0.048916498435184086, 0.0495503964402616, 0.4883742461836731, 0.438797396423358, 0.6545057569551385, 0.34697603929357623, 0.47435958221101304, 0.39859808836598754, 0.6193788045996, 0.44001113347465093, 0.6302589844516637, 0.16793892038650116, 0.10252009036107756, 0.09987720486596352, 0.121047571874901, 0.11763340472688066, 0.11625865848336547, 0.1356246793354332, 0.09309600868048729, 0.11877858216787152, 0.20402307215422266, 0.18490983246198334, 0.1709520884265341, 0.21821444656747946, 0.16914140677036538, 0.17078014268163566, 0.1558761893759092, 0.1841535022609182, 0.15539375732653005, 0.05290328663586297, 0.058834113316189374, 0.06591692747502842, 0.03506308158726679, 0.08924418486682517, 0.07072693820065012, 0.07115224276865717, 0.10152153358024407, 0.06697752281348912, 0.09386098741497895, 0.07748365124106371, 0.08217196954889971, 0.06983175475441328, 0.10505178312602659, 0.07801867073374891, 0.07775343961530512, 0.05224036851249769, 0.09806771101687484, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12398150754531767, 0.026480636305764582, 0.11478896716659581, 0.019086380616214926, 0.0161828490301128, 0.04050106751160998, 0.0867150097493814, 0.06488334398697693, 0.08639752643616172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019869943237855292, 0.01944212523972222, 0.015815757112356166, 0.01077290889299276, 0.02649369164242177, 0.028830915740590934, 0.016552138388776116, 0.01457563750241897, 0.015429613354437266, 0.26138697914426945, 0.2964367460518782, 0.2705358275238776, 0.2363047923767786, 0.23752972149408647, 0.26826311612543796, 0.2820805521637926, 0.2990888499920641, 0.2554615020060679, 0.043105578629359265, 0.049908296283156184, 0.05814680907210401, 0.08016906102129906, 0.06519261453445346, 0.07358581051356683, 0.07845656455166827, 0.05889698979439595, 0.07053570957632949, 0.13327066452466974, 0.09814141576203073, 0.15772301972180047, 0.11373195596335794, 0.13749110583312507, 0.12752428799988047, 0.13440857020395158, 0.13574770457305896, 0.15455810017287153, 0.1810063835233383, 0.20876263645822768, 0.21223146557973227, 0.20604597788649237, 0.1882590107662837, 0.1825867779225998, 0.19643944693496873, 0.21285253196428378, 0.19122403165871116, 0.14168823127513808, 0.15631695085224306, 0.15666447050044807, 0.14767419667062254, 0.15554310023751228, 0.1381305815445325, 0.13758691408236723, 0.15749124301824358, 0.14202412939285058, 0.17121653842431894, 0.1745285914678688, 0.2032437749718784, 0.1737192039170501, 0.17381486995128193, 0.17032802950556414, 0.17061395354215603, 0.18703140437326238, 0.17896722191941894, 0.17070396139874433, 0.16016577250744035, 0.16771681473151712, 0.16333663233234053, 0.16045287781870177, 0.15767035317445266, 0.16911301074068796, 0.159995264258192, 0.16601435832597833, 0.2609818842444396, 0.16877971831310246, 0.16656648627464987, 0.17539471573713727, 0.1410822591108416, 0.16489327285704036, 0.3442070313125376, 0.13313410618187738, 0.30734113901670657, 0.1420316212209164, 0.2658485358056907, 0.0711740428121338, 0.16622141012412195, 0.13566327070490702, 0.1603520603967198, 0.16939270356108604, 0.22679738843076802, 0.19814881121442274, 0.17725633145644437, 0.16752340108009012, 0.15781945992981272, 0.17062617324198104, 0.1814020226159193, 0.17375881028988938, 0.17017240083753804, 0.16178045657852813, 0.16811390574130947, 0.06770914141475803, 0.061714167492443295, 0.06406532465497972, 0.06560357999669597, 0.07469521089279496, 0.07134115472793123, 0.07754399068243478, 0.07340929448741496, 0.07241274576772316]}, "mutation_prompt": null}
{"id": "1737fd58-ec0c-427f-a5dc-ef1daa69042b", "solution": "import numpy as np\n\nclass DynamicEnhancedAdaptiveFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.beta_max = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        def attractiveness(distance):\n            return self.beta_min + (self.beta_max - self.beta_min) * np.exp(-self.alpha * distance)\n\n        population = initialize_population()\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i, x in enumerate(population):\n                for j, y in enumerate(population):\n                    if func(y) < func(x):\n                        distance = np.linalg.norm(x - y)\n                        beta = attractiveness(distance)\n                        population[i] += beta * (y - x) + np.random.uniform(-1, 1, self.dim)\n                        \n                        # Introduce dynamic update of alpha and beta parameters with probability 0.2\n                        if np.random.rand() < 0.2:\n                            self.alpha = max(0.1, self.alpha - 0.001)  # Update alpha\n                            self.beta_max = min(1.0, self.beta_max + 0.001)  # Update beta_max\n\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "DynamicEnhancedAdaptiveFireflyAlgorithm", "description": "Dynamic Enhanced Adaptive Firefly Algorithm with Parameter Fine-tuning for Black Box Optimization.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "baa2cbc7-8cfd-4871-9c38-41f8dd4e4b7a", "metadata": {"aucs": [0.26364390636496104, 0.29300561854970686, 0.24428300964481153, 0.23939973834037565, 0.2467495273967748, 0.26842577731711703, 0.2522675017302819, 0.2575302638375875, 0.2534433022604047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0766572902498952, 0.07056466479399093, 0.06578702271483305, 0.09369028126931711, 0.060637128292857057, 0.06678864504557569, 0.06943100799359891, 0.07307976137468397, 0.07036514449132503, 0.06171576709414861, 0.04904287198228763, 0.08246375542491846, 0.06257926847592532, 0.04989649919135719, 0.04431647929424798, 0.05065140133167656, 0.048916498435184086, 0.0495503964402616, 0.4883742461836731, 0.438797396423358, 0.6545057569551385, 0.34697603929357623, 0.47435958221101304, 0.39859808836598754, 0.6193788045996, 0.44001113347465093, 0.6302589844516637, 0.16793892038650116, 0.10252009036107756, 0.09987720486596352, 0.121047571874901, 0.11763340472688066, 0.11625865848336547, 0.1356246793354332, 0.09309600868048729, 0.11877858216787152, 0.20402307215422266, 0.18490983246198334, 0.1709520884265341, 0.21821444656747946, 0.16914140677036538, 0.17078014268163566, 0.1558761893759092, 0.1841535022609182, 0.15539375732653005, 0.05290328663586297, 0.058834113316189374, 0.06591692747502842, 0.03506308158726679, 0.08924418486682517, 0.07072693820065012, 0.07115224276865717, 0.10152153358024407, 0.06697752281348912, 0.09386098741497895, 0.07748365124106371, 0.08217196954889971, 0.06983175475441328, 0.10505178312602659, 0.07801867073374891, 0.07775343961530512, 0.05224036851249769, 0.09806771101687484, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12398150754531767, 0.026480636305764582, 0.11478896716659581, 0.019086380616214926, 0.0161828490301128, 0.04050106751160998, 0.0867150097493814, 0.06488334398697693, 0.08639752643616172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019869943237855292, 0.01944212523972222, 0.015815757112356166, 0.01077290889299276, 0.02649369164242177, 0.028830915740590934, 0.016552138388776116, 0.01457563750241897, 0.015429613354437266, 0.26138697914426945, 0.2964367460518782, 0.2705358275238776, 0.2363047923767786, 0.23752972149408647, 0.26826311612543796, 0.2820805521637926, 0.2990888499920641, 0.2554615020060679, 0.043105578629359265, 0.049908296283156184, 0.05814680907210401, 0.08016906102129906, 0.06519261453445346, 0.07358581051356683, 0.07845656455166827, 0.05889698979439595, 0.07053570957632949, 0.13327066452466974, 0.09814141576203073, 0.15772301972180047, 0.11373195596335794, 0.13749110583312507, 0.12752428799988047, 0.13440857020395158, 0.13574770457305896, 0.15455810017287153, 0.1810063835233383, 0.20876263645822768, 0.21223146557973227, 0.20604597788649237, 0.1882590107662837, 0.1825867779225998, 0.19643944693496873, 0.21285253196428378, 0.19122403165871116, 0.14168823127513808, 0.15631695085224306, 0.15666447050044807, 0.14767419667062254, 0.15554310023751228, 0.1381305815445325, 0.13758691408236723, 0.15749124301824358, 0.14202412939285058, 0.17121653842431894, 0.1745285914678688, 0.2032437749718784, 0.1737192039170501, 0.17381486995128193, 0.17032802950556414, 0.17061395354215603, 0.18703140437326238, 0.17896722191941894, 0.17070396139874433, 0.16016577250744035, 0.16771681473151712, 0.16333663233234053, 0.16045287781870177, 0.15767035317445266, 0.16911301074068796, 0.159995264258192, 0.16601435832597833, 0.2609818842444396, 0.16877971831310246, 0.16656648627464987, 0.17539471573713727, 0.1410822591108416, 0.16489327285704036, 0.3442070313125376, 0.13313410618187738, 0.30734113901670657, 0.1420316212209164, 0.2658485358056907, 0.0711740428121338, 0.16622141012412195, 0.13566327070490702, 0.1603520603967198, 0.16939270356108604, 0.22679738843076802, 0.19814881121442274, 0.17725633145644437, 0.16752340108009012, 0.15781945992981272, 0.17062617324198104, 0.1814020226159193, 0.17375881028988938, 0.17017240083753804, 0.16178045657852813, 0.16811390574130947, 0.06770914141475803, 0.061714167492443295, 0.06406532465497972, 0.06560357999669597, 0.07469521089279496, 0.07134115472793123, 0.07754399068243478, 0.07340929448741496, 0.07241274576772316]}, "mutation_prompt": null}
{"id": "88dbc53d-1dd7-4f37-8214-861e799f9756", "solution": "import numpy as np\n\nclass DynamicEnhancedAdaptiveFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.beta_max = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        def attractiveness(distance):\n            return self.beta_min + (self.beta_max - self.beta_min) * np.exp(-self.alpha * distance)\n\n        population = initialize_population()\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i, x in enumerate(population):\n                for j, y in enumerate(population):\n                    if func(y) < func(x):\n                        distance = np.linalg.norm(x - y)\n                        beta = attractiveness(distance)\n                        population[i] += beta * (y - x) + np.random.uniform(-1, 1, self.dim)\n                        \n                        # Introduce dynamic update of alpha and beta parameters with probability 0.2\n                        if np.random.rand() < 0.2:\n                            self.alpha = max(0.1, self.alpha - 0.001)  # Update alpha\n                            self.beta_max = min(1.0, self.beta_max + 0.001)  # Update beta_max\n\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "DynamicEnhancedAdaptiveFireflyAlgorithm", "description": "Dynamic Enhanced Adaptive Firefly Algorithm with Parameter Fine-tuning for Black Box Optimization.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "baa2cbc7-8cfd-4871-9c38-41f8dd4e4b7a", "metadata": {"aucs": [0.26364390636496104, 0.29300561854970686, 0.24428300964481153, 0.23939973834037565, 0.2467495273967748, 0.26842577731711703, 0.2522675017302819, 0.2575302638375875, 0.2534433022604047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0766572902498952, 0.07056466479399093, 0.06578702271483305, 0.09369028126931711, 0.060637128292857057, 0.06678864504557569, 0.06943100799359891, 0.07307976137468397, 0.07036514449132503, 0.06171576709414861, 0.04904287198228763, 0.08246375542491846, 0.06257926847592532, 0.04989649919135719, 0.04431647929424798, 0.05065140133167656, 0.048916498435184086, 0.0495503964402616, 0.4883742461836731, 0.438797396423358, 0.6545057569551385, 0.34697603929357623, 0.47435958221101304, 0.39859808836598754, 0.6193788045996, 0.44001113347465093, 0.6302589844516637, 0.16793892038650116, 0.10252009036107756, 0.09987720486596352, 0.121047571874901, 0.11763340472688066, 0.11625865848336547, 0.1356246793354332, 0.09309600868048729, 0.11877858216787152, 0.20402307215422266, 0.18490983246198334, 0.1709520884265341, 0.21821444656747946, 0.16914140677036538, 0.17078014268163566, 0.1558761893759092, 0.1841535022609182, 0.15539375732653005, 0.05290328663586297, 0.058834113316189374, 0.06591692747502842, 0.03506308158726679, 0.08924418486682517, 0.07072693820065012, 0.07115224276865717, 0.10152153358024407, 0.06697752281348912, 0.09386098741497895, 0.07748365124106371, 0.08217196954889971, 0.06983175475441328, 0.10505178312602659, 0.07801867073374891, 0.07775343961530512, 0.05224036851249769, 0.09806771101687484, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12398150754531767, 0.026480636305764582, 0.11478896716659581, 0.019086380616214926, 0.0161828490301128, 0.04050106751160998, 0.0867150097493814, 0.06488334398697693, 0.08639752643616172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019869943237855292, 0.01944212523972222, 0.015815757112356166, 0.01077290889299276, 0.02649369164242177, 0.028830915740590934, 0.016552138388776116, 0.01457563750241897, 0.015429613354437266, 0.26138697914426945, 0.2964367460518782, 0.2705358275238776, 0.2363047923767786, 0.23752972149408647, 0.26826311612543796, 0.2820805521637926, 0.2990888499920641, 0.2554615020060679, 0.043105578629359265, 0.049908296283156184, 0.05814680907210401, 0.08016906102129906, 0.06519261453445346, 0.07358581051356683, 0.07845656455166827, 0.05889698979439595, 0.07053570957632949, 0.13327066452466974, 0.09814141576203073, 0.15772301972180047, 0.11373195596335794, 0.13749110583312507, 0.12752428799988047, 0.13440857020395158, 0.13574770457305896, 0.15455810017287153, 0.1810063835233383, 0.20876263645822768, 0.21223146557973227, 0.20604597788649237, 0.1882590107662837, 0.1825867779225998, 0.19643944693496873, 0.21285253196428378, 0.19122403165871116, 0.14168823127513808, 0.15631695085224306, 0.15666447050044807, 0.14767419667062254, 0.15554310023751228, 0.1381305815445325, 0.13758691408236723, 0.15749124301824358, 0.14202412939285058, 0.17121653842431894, 0.1745285914678688, 0.2032437749718784, 0.1737192039170501, 0.17381486995128193, 0.17032802950556414, 0.17061395354215603, 0.18703140437326238, 0.17896722191941894, 0.17070396139874433, 0.16016577250744035, 0.16771681473151712, 0.16333663233234053, 0.16045287781870177, 0.15767035317445266, 0.16911301074068796, 0.159995264258192, 0.16601435832597833, 0.2609818842444396, 0.16877971831310246, 0.16656648627464987, 0.17539471573713727, 0.1410822591108416, 0.16489327285704036, 0.3442070313125376, 0.13313410618187738, 0.30734113901670657, 0.1420316212209164, 0.2658485358056907, 0.0711740428121338, 0.16622141012412195, 0.13566327070490702, 0.1603520603967198, 0.16939270356108604, 0.22679738843076802, 0.19814881121442274, 0.17725633145644437, 0.16752340108009012, 0.15781945992981272, 0.17062617324198104, 0.1814020226159193, 0.17375881028988938, 0.17017240083753804, 0.16178045657852813, 0.16811390574130947, 0.06770914141475803, 0.061714167492443295, 0.06406532465497972, 0.06560357999669597, 0.07469521089279496, 0.07134115472793123, 0.07754399068243478, 0.07340929448741496, 0.07241274576772316]}, "mutation_prompt": null}
{"id": "e0612d3a-bebc-4b29-9d43-83a7c8e6f74f", "solution": "import numpy as np\n\nclass DynamicEnhancedAdaptiveFireflyAlgorithmImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.beta_max = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        def attractiveness(distance):\n            return self.beta_min + (self.beta_max - self.beta_min) * np.exp(-self.alpha * distance)\n\n        population = initialize_population()\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i, x in enumerate(population):\n                for j, y in enumerate(population):\n                    if func(y) < func(x):\n                        distance = np.linalg.norm(x - y)\n                        beta = attractiveness(distance)\n                        population[i] += beta * (y - x) + np.random.uniform(-1, 1, self.dim)\n                        \n                        # Introduce probability-based dynamic update of alpha and beta parameters\n                        if np.random.rand() < 0.2:\n                            if self.alpha > 0.1:\n                                self.alpha -= 0.001  # Update alpha\n                            if self.beta_max < 1.0:\n                                self.beta_max += 0.001  # Update beta_max\n\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "DynamicEnhancedAdaptiveFireflyAlgorithmImproved", "description": "Enhancing Dynamic Enhanced Adaptive Firefly Algorithm with Alpha and Beta Parameters Refinement.", "configspace": "", "generation": 34, "fitness": 0.1326966823857367, "feedback": "The algorithm DynamicEnhancedAdaptiveFireflyAlgorithmImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.11.", "error": "", "parent_id": "baa2cbc7-8cfd-4871-9c38-41f8dd4e4b7a", "metadata": {"aucs": [0.26364390636496104, 0.29300561854970686, 0.24428300964481153, 0.23939973834037565, 0.2467495273967748, 0.26842577731711703, 0.2522675017302819, 0.2575302638375875, 0.2534433022604047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0766572902498952, 0.07056466479399093, 0.06578702271483305, 0.09369028126931711, 0.060637128292857057, 0.06678864504557569, 0.06943100799359891, 0.07307976137468397, 0.07036514449132503, 0.06171576709414861, 0.04904287198228763, 0.08246375542491846, 0.06257926847592532, 0.04989649919135719, 0.04431647929424798, 0.05065140133167656, 0.048916498435184086, 0.0495503964402616, 0.4883742461836731, 0.438797396423358, 0.6545057569551385, 0.34697603929357623, 0.47435958221101304, 0.39859808836598754, 0.6193788045996, 0.44001113347465093, 0.6302589844516637, 0.16793892038650116, 0.10252009036107756, 0.09987720486596352, 0.121047571874901, 0.11763340472688066, 0.11625865848336547, 0.1356246793354332, 0.09309600868048729, 0.11877858216787152, 0.20402307215422266, 0.18490983246198334, 0.1709520884265341, 0.21821444656747946, 0.16914140677036538, 0.17078014268163566, 0.1558761893759092, 0.1841535022609182, 0.15539375732653005, 0.05290328663586297, 0.058834113316189374, 0.06591692747502842, 0.03506308158726679, 0.08924418486682517, 0.07072693820065012, 0.07115224276865717, 0.10152153358024407, 0.06697752281348912, 0.09386098741497895, 0.07748365124106371, 0.08217196954889971, 0.06983175475441328, 0.10505178312602659, 0.07801867073374891, 0.07775343961530512, 0.05224036851249769, 0.09806771101687484, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12398150754531767, 0.026480636305764582, 0.11478896716659581, 0.019086380616214926, 0.0161828490301128, 0.04050106751160998, 0.0867150097493814, 0.06488334398697693, 0.08639752643616172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019869943237855292, 0.01944212523972222, 0.015815757112356166, 0.01077290889299276, 0.02649369164242177, 0.028830915740590934, 0.016552138388776116, 0.01457563750241897, 0.015429613354437266, 0.26138697914426945, 0.2964367460518782, 0.2705358275238776, 0.2363047923767786, 0.23752972149408647, 0.26826311612543796, 0.2820805521637926, 0.2990888499920641, 0.2554615020060679, 0.043105578629359265, 0.049908296283156184, 0.05814680907210401, 0.08016906102129906, 0.06519261453445346, 0.07358581051356683, 0.07845656455166827, 0.05889698979439595, 0.07053570957632949, 0.13327066452466974, 0.09814141576203073, 0.15772301972180047, 0.11373195596335794, 0.13749110583312507, 0.12752428799988047, 0.13440857020395158, 0.13574770457305896, 0.15455810017287153, 0.1810063835233383, 0.20876263645822768, 0.21223146557973227, 0.20604597788649237, 0.1882590107662837, 0.1825867779225998, 0.19643944693496873, 0.21285253196428378, 0.19122403165871116, 0.14168823127513808, 0.15631695085224306, 0.15666447050044807, 0.14767419667062254, 0.15554310023751228, 0.1381305815445325, 0.13758691408236723, 0.15749124301824358, 0.14202412939285058, 0.17121653842431894, 0.1745285914678688, 0.2032437749718784, 0.1737192039170501, 0.17381486995128193, 0.17032802950556414, 0.17061395354215603, 0.18703140437326238, 0.17896722191941894, 0.17070396139874433, 0.16016577250744035, 0.16771681473151712, 0.16333663233234053, 0.16045287781870177, 0.15767035317445266, 0.16911301074068796, 0.159995264258192, 0.16601435832597833, 0.2609818842444396, 0.16877971831310246, 0.16656648627464987, 0.17539471573713727, 0.1410822591108416, 0.16489327285704036, 0.3442070313125376, 0.13313410618187738, 0.30734113901670657, 0.1420316212209164, 0.2658485358056907, 0.0711740428121338, 0.16622141012412195, 0.13566327070490702, 0.1603520603967198, 0.16939270356108604, 0.22679738843076802, 0.19814881121442274, 0.17725633145644437, 0.16752340108009012, 0.15781945992981294, 0.17062617324198104, 0.1814020226159193, 0.17375881028988938, 0.17017240083753804, 0.16178045657852813, 0.16811390574130947, 0.06770914141475803, 0.061714167492443295, 0.06406532465497972, 0.06560357999669597, 0.07469521089279496, 0.07134115472793123, 0.07754399068243478, 0.07340929448741496, 0.07241274576772316]}, "mutation_prompt": null}
{"id": "ea695410-118d-4a3a-a893-93bdca4402a7", "solution": "import numpy as np\n\nclass RefinedDynamicEnhancedAdaptiveFireflyAlgorithm(DynamicEnhancedAdaptiveFireflyAlgorithm):\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        def attractiveness(distance):\n            return self.beta_min + (self.beta_max - self.beta_min) * np.exp(-self.alpha * distance)\n\n        population = initialize_population()\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i, x in enumerate(population):\n                for j, y in enumerate(population):\n                    if func(y) < func(x):\n                        distance = np.linalg.norm(x - y)\n                        beta = attractiveness(distance)\n                        population[i] += beta * (y - x) + np.random.uniform(-1, 1, self.dim)\n                        \n                        # Introduce dynamic update of alpha and beta parameters with probability 0.2\n                        if np.random.rand() < 0.2:\n                            self.alpha = max(0.1, self.alpha - 0.001)  # Update alpha\n                            self.beta_max = min(1.0, self.beta_max + 0.001)  # Update beta_max\n\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "RefinedDynamicEnhancedAdaptiveFireflyAlgorithm", "description": "Dynamic Enhanced Adaptive Firefly Algorithm with Parameter Fine-tuning for Black Box Optimization with refined strategy updates based on probability.", "configspace": "", "generation": 35, "fitness": 0.1326966823857367, "feedback": "The algorithm RefinedDynamicEnhancedAdaptiveFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.11.", "error": "", "parent_id": "baa2cbc7-8cfd-4871-9c38-41f8dd4e4b7a", "metadata": {"aucs": [0.26364390636496104, 0.29300561854970686, 0.24428300964481153, 0.23939973834037565, 0.2467495273967748, 0.26842577731711703, 0.2522675017302819, 0.2575302638375875, 0.2534433022604047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0766572902498952, 0.07056466479399093, 0.06578702271483305, 0.09369028126931711, 0.060637128292857057, 0.06678864504557569, 0.06943100799359891, 0.07307976137468397, 0.07036514449132503, 0.06171576709414861, 0.04904287198228763, 0.08246375542491846, 0.06257926847592532, 0.04989649919135719, 0.04431647929424798, 0.05065140133167656, 0.048916498435184086, 0.0495503964402616, 0.4883742461836731, 0.438797396423358, 0.6545057569551385, 0.34697603929357623, 0.47435958221101304, 0.39859808836598754, 0.6193788045996, 0.44001113347465093, 0.6302589844516637, 0.16793892038650116, 0.10252009036107756, 0.09987720486596352, 0.121047571874901, 0.11763340472688066, 0.11625865848336547, 0.1356246793354332, 0.09309600868048729, 0.11877858216787152, 0.20402307215422266, 0.18490983246198334, 0.1709520884265341, 0.21821444656747946, 0.16914140677036538, 0.17078014268163566, 0.1558761893759092, 0.1841535022609182, 0.15539375732653005, 0.05290328663586297, 0.058834113316189374, 0.06591692747502842, 0.03506308158726679, 0.08924418486682517, 0.07072693820065012, 0.07115224276865717, 0.10152153358024407, 0.06697752281348912, 0.09386098741497895, 0.07748365124106371, 0.08217196954889971, 0.06983175475441328, 0.10505178312602659, 0.07801867073374891, 0.07775343961530512, 0.05224036851249769, 0.09806771101687484, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12398150754531767, 0.026480636305764582, 0.11478896716659581, 0.019086380616214926, 0.0161828490301128, 0.04050106751160998, 0.0867150097493814, 0.06488334398697693, 0.08639752643616172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019869943237855292, 0.01944212523972222, 0.015815757112356166, 0.01077290889299276, 0.02649369164242177, 0.028830915740590934, 0.016552138388776116, 0.01457563750241897, 0.015429613354437266, 0.26138697914426945, 0.2964367460518782, 0.2705358275238776, 0.2363047923767786, 0.23752972149408647, 0.26826311612543796, 0.2820805521637926, 0.2990888499920641, 0.2554615020060679, 0.043105578629359265, 0.049908296283156184, 0.05814680907210401, 0.08016906102129906, 0.06519261453445346, 0.07358581051356683, 0.07845656455166827, 0.05889698979439595, 0.07053570957632949, 0.13327066452466974, 0.09814141576203073, 0.15772301972180047, 0.11373195596335794, 0.13749110583312507, 0.12752428799988047, 0.13440857020395158, 0.13574770457305896, 0.15455810017287153, 0.1810063835233383, 0.20876263645822768, 0.21223146557973227, 0.20604597788649237, 0.1882590107662837, 0.1825867779225998, 0.19643944693496873, 0.21285253196428378, 0.19122403165871116, 0.14168823127513808, 0.15631695085224306, 0.15666447050044807, 0.14767419667062254, 0.15554310023751228, 0.1381305815445325, 0.13758691408236723, 0.15749124301824358, 0.14202412939285058, 0.17121653842431894, 0.1745285914678688, 0.2032437749718784, 0.1737192039170501, 0.17381486995128193, 0.17032802950556414, 0.17061395354215603, 0.18703140437326238, 0.17896722191941894, 0.17070396139874433, 0.16016577250744035, 0.16771681473151712, 0.16333663233234053, 0.16045287781870177, 0.15767035317445266, 0.16911301074068796, 0.159995264258192, 0.16601435832597833, 0.2609818842444396, 0.16877971831310246, 0.16656648627464987, 0.17539471573713727, 0.1410822591108416, 0.16489327285704036, 0.3442070313125376, 0.13313410618187738, 0.30734113901670657, 0.1420316212209164, 0.2658485358056907, 0.0711740428121338, 0.16622141012412195, 0.13566327070490702, 0.1603520603967198, 0.16939270356108604, 0.22679738843076802, 0.19814881121442274, 0.17725633145644437, 0.16752340108009012, 0.15781945992981272, 0.17062617324198104, 0.1814020226159193, 0.17375881028988938, 0.17017240083753804, 0.16178045657852813, 0.16811390574130947, 0.06770914141475803, 0.061714167492443295, 0.06406532465497972, 0.06560357999669597, 0.07469521089279496, 0.07134115472793123, 0.07754399068243478, 0.07340929448741496, 0.07241274576772316]}, "mutation_prompt": null}
{"id": "d9b5c262-1104-43c0-b63b-fa79ab7aa0b2", "solution": "import numpy as np\n\nclass DynamicEnhancedAdaptiveFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.beta_max = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        def attractiveness(distance):\n            return self.beta_min + (self.beta_max - self.beta_min) * np.exp(-self.alpha * distance)\n\n        population = initialize_population()\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i, x in enumerate(population):\n                for j, y in enumerate(population):\n                    if func(y) < func(x):\n                        distance = np.linalg.norm(x - y)\n                        beta = attractiveness(distance)\n                        population[i] += beta * (y - x) + np.random.uniform(-1, 1, self.dim)\n                        \n                        # Introduce dynamic update of alpha and beta parameters with probability 0.2\n                        if np.random.rand() < 0.2:\n                            self.alpha = max(0.1, self.alpha - 0.001)  # Update alpha\n                            self.beta_max = min(1.0, self.beta_max + 0.001)  # Update beta_max\n\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "DynamicEnhancedAdaptiveFireflyAlgorithm", "description": "Dynamic Enhanced Adaptive Firefly Algorithm with Parameter Fine-tuning for Black Box Optimization.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "baa2cbc7-8cfd-4871-9c38-41f8dd4e4b7a", "metadata": {"aucs": [0.26364390636496104, 0.29300561854970686, 0.24428300964481153, 0.23939973834037565, 0.2467495273967748, 0.26842577731711703, 0.2522675017302819, 0.2575302638375875, 0.2534433022604047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0766572902498952, 0.07056466479399093, 0.06578702271483305, 0.09369028126931711, 0.060637128292857057, 0.06678864504557569, 0.06943100799359891, 0.07307976137468397, 0.07036514449132503, 0.06171576709414861, 0.04904287198228763, 0.08246375542491846, 0.06257926847592532, 0.04989649919135719, 0.04431647929424798, 0.05065140133167656, 0.048916498435184086, 0.0495503964402616, 0.4883742461836731, 0.438797396423358, 0.6545057569551385, 0.34697603929357623, 0.47435958221101304, 0.39859808836598754, 0.6193788045996, 0.44001113347465093, 0.6302589844516637, 0.16793892038650116, 0.10252009036107756, 0.09987720486596352, 0.121047571874901, 0.11763340472688066, 0.11625865848336547, 0.1356246793354332, 0.09309600868048729, 0.11877858216787152, 0.20402307215422266, 0.18490983246198334, 0.1709520884265341, 0.21821444656747946, 0.16914140677036538, 0.17078014268163566, 0.1558761893759092, 0.1841535022609182, 0.15539375732653005, 0.05290328663586297, 0.058834113316189374, 0.06591692747502842, 0.03506308158726679, 0.08924418486682517, 0.07072693820065012, 0.07115224276865717, 0.10152153358024407, 0.06697752281348912, 0.09386098741497895, 0.07748365124106371, 0.08217196954889971, 0.06983175475441328, 0.10505178312602659, 0.07801867073374891, 0.07775343961530512, 0.05224036851249769, 0.09806771101687484, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12398150754531767, 0.026480636305764582, 0.11478896716659581, 0.019086380616214926, 0.0161828490301128, 0.04050106751160998, 0.0867150097493814, 0.06488334398697693, 0.08639752643616172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019869943237855292, 0.01944212523972222, 0.015815757112356166, 0.01077290889299276, 0.02649369164242177, 0.028830915740590934, 0.016552138388776116, 0.01457563750241897, 0.015429613354437266, 0.26138697914426945, 0.2964367460518782, 0.2705358275238776, 0.2363047923767786, 0.23752972149408647, 0.26826311612543796, 0.2820805521637926, 0.2990888499920641, 0.2554615020060679, 0.043105578629359265, 0.049908296283156184, 0.05814680907210401, 0.08016906102129906, 0.06519261453445346, 0.07358581051356683, 0.07845656455166827, 0.05889698979439595, 0.07053570957632949, 0.13327066452466974, 0.09814141576203073, 0.15772301972180047, 0.11373195596335794, 0.13749110583312507, 0.12752428799988047, 0.13440857020395158, 0.13574770457305896, 0.15455810017287153, 0.1810063835233383, 0.20876263645822768, 0.21223146557973227, 0.20604597788649237, 0.1882590107662837, 0.1825867779225998, 0.19643944693496873, 0.21285253196428378, 0.19122403165871116, 0.14168823127513808, 0.15631695085224306, 0.15666447050044807, 0.14767419667062254, 0.15554310023751228, 0.1381305815445325, 0.13758691408236723, 0.15749124301824358, 0.14202412939285058, 0.17121653842431894, 0.1745285914678688, 0.2032437749718784, 0.1737192039170501, 0.17381486995128193, 0.17032802950556414, 0.17061395354215603, 0.18703140437326238, 0.17896722191941894, 0.17070396139874433, 0.16016577250744035, 0.16771681473151712, 0.16333663233234053, 0.16045287781870177, 0.15767035317445266, 0.16911301074068796, 0.159995264258192, 0.16601435832597833, 0.2609818842444396, 0.16877971831310246, 0.16656648627464987, 0.17539471573713727, 0.1410822591108416, 0.16489327285704036, 0.3442070313125376, 0.13313410618187738, 0.30734113901670657, 0.1420316212209164, 0.2658485358056907, 0.0711740428121338, 0.16622141012412195, 0.13566327070490702, 0.1603520603967198, 0.16939270356108604, 0.22679738843076802, 0.19814881121442274, 0.17725633145644437, 0.16752340108009012, 0.15781945992981272, 0.17062617324198104, 0.1814020226159193, 0.17375881028988938, 0.17017240083753804, 0.16178045657852813, 0.16811390574130947, 0.06770914141475803, 0.061714167492443295, 0.06406532465497972, 0.06560357999669597, 0.07469521089279496, 0.07134115472793123, 0.07754399068243478, 0.07340929448741496, 0.07241274576772316]}, "mutation_prompt": null}
{"id": "3ef82390-21e8-4cc3-b5d2-e22455bef71f", "solution": "import numpy as np\n\nclass DynamicEnhancedAdaptiveFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.beta_max = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        def attractiveness(distance):\n            return self.beta_min + (self.beta_max - self.beta_min) * np.exp(-self.alpha * distance)\n\n        population = initialize_population()\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i, x in enumerate(population):\n                for j, y in enumerate(population):\n                    if func(y) < func(x):\n                        distance = np.linalg.norm(x - y)\n                        beta = attractiveness(distance)\n                        population[i] += beta * (y - x) + np.random.uniform(-1, 1, self.dim)\n                        \n                        # Introduce dynamic update of alpha and beta parameters with probability 0.2\n                        if np.random.rand() < 0.2:\n                            self.alpha = max(0.1, self.alpha - 0.001)  # Update alpha\n                            self.beta_max = min(1.0, self.beta_max + 0.001)  # Update beta_max\n\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "DynamicEnhancedAdaptiveFireflyAlgorithm", "description": "Dynamic Enhanced Adaptive Firefly Algorithm with Parameter Fine-tuning for Black Box Optimization.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "baa2cbc7-8cfd-4871-9c38-41f8dd4e4b7a", "metadata": {"aucs": [0.26364390636496104, 0.29300561854970686, 0.24428300964481153, 0.23939973834037565, 0.2467495273967748, 0.26842577731711703, 0.2522675017302819, 0.2575302638375875, 0.2534433022604047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0766572902498952, 0.07056466479399093, 0.06578702271483305, 0.09369028126931711, 0.060637128292857057, 0.06678864504557569, 0.06943100799359891, 0.07307976137468397, 0.07036514449132503, 0.06171576709414861, 0.04904287198228763, 0.08246375542491846, 0.06257926847592532, 0.04989649919135719, 0.04431647929424798, 0.05065140133167656, 0.048916498435184086, 0.0495503964402616, 0.4883742461836731, 0.438797396423358, 0.6545057569551385, 0.34697603929357623, 0.47435958221101304, 0.39859808836598754, 0.6193788045996, 0.44001113347465093, 0.6302589844516637, 0.16793892038650116, 0.10252009036107756, 0.09987720486596352, 0.121047571874901, 0.11763340472688066, 0.11625865848336547, 0.1356246793354332, 0.09309600868048729, 0.11877858216787152, 0.20402307215422266, 0.18490983246198334, 0.1709520884265341, 0.21821444656747946, 0.16914140677036538, 0.17078014268163566, 0.1558761893759092, 0.1841535022609182, 0.15539375732653005, 0.05290328663586297, 0.058834113316189374, 0.06591692747502842, 0.03506308158726679, 0.08924418486682517, 0.07072693820065012, 0.07115224276865717, 0.10152153358024407, 0.06697752281348912, 0.09386098741497895, 0.07748365124106371, 0.08217196954889971, 0.06983175475441328, 0.10505178312602659, 0.07801867073374891, 0.07775343961530512, 0.05224036851249769, 0.09806771101687484, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12398150754531767, 0.026480636305764582, 0.11478896716659581, 0.019086380616214926, 0.0161828490301128, 0.04050106751160998, 0.0867150097493814, 0.06488334398697693, 0.08639752643616172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019869943237855292, 0.01944212523972222, 0.015815757112356166, 0.01077290889299276, 0.02649369164242177, 0.028830915740590934, 0.016552138388776116, 0.01457563750241897, 0.015429613354437266, 0.26138697914426945, 0.2964367460518782, 0.2705358275238776, 0.2363047923767786, 0.23752972149408647, 0.26826311612543796, 0.2820805521637926, 0.2990888499920641, 0.2554615020060679, 0.043105578629359265, 0.049908296283156184, 0.05814680907210401, 0.08016906102129906, 0.06519261453445346, 0.07358581051356683, 0.07845656455166827, 0.05889698979439595, 0.07053570957632949, 0.13327066452466974, 0.09814141576203073, 0.15772301972180047, 0.11373195596335794, 0.13749110583312507, 0.12752428799988047, 0.13440857020395158, 0.13574770457305896, 0.15455810017287153, 0.1810063835233383, 0.20876263645822768, 0.21223146557973227, 0.20604597788649237, 0.1882590107662837, 0.1825867779225998, 0.19643944693496873, 0.21285253196428378, 0.19122403165871116, 0.14168823127513808, 0.15631695085224306, 0.15666447050044807, 0.14767419667062254, 0.15554310023751228, 0.1381305815445325, 0.13758691408236723, 0.15749124301824358, 0.14202412939285058, 0.17121653842431894, 0.1745285914678688, 0.2032437749718784, 0.1737192039170501, 0.17381486995128193, 0.17032802950556414, 0.17061395354215603, 0.18703140437326238, 0.17896722191941894, 0.17070396139874433, 0.16016577250744035, 0.16771681473151712, 0.16333663233234053, 0.16045287781870177, 0.15767035317445266, 0.16911301074068796, 0.159995264258192, 0.16601435832597833, 0.2609818842444396, 0.16877971831310246, 0.16656648627464987, 0.17539471573713727, 0.1410822591108416, 0.16489327285704036, 0.3442070313125376, 0.13313410618187738, 0.30734113901670657, 0.1420316212209164, 0.2658485358056907, 0.0711740428121338, 0.16622141012412195, 0.13566327070490702, 0.1603520603967198, 0.16939270356108604, 0.22679738843076802, 0.19814881121442274, 0.17725633145644437, 0.16752340108009012, 0.15781945992981272, 0.17062617324198104, 0.1814020226159193, 0.17375881028988938, 0.17017240083753804, 0.16178045657852813, 0.16811390574130947, 0.06770914141475803, 0.061714167492443295, 0.06406532465497972, 0.06560357999669597, 0.07469521089279496, 0.07134115472793123, 0.07754399068243478, 0.07340929448741496, 0.07241274576772316]}, "mutation_prompt": null}
{"id": "6f5eb4ce-70a6-4a4c-aab8-a2442c1826a8", "solution": "import numpy as np\n\nclass DynamicEnhancedAdaptiveFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.beta_max = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        def attractiveness(distance):\n            return self.beta_min + (self.beta_max - self.beta_min) * np.exp(-self.alpha * distance)\n\n        population = initialize_population()\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i, x in enumerate(population):\n                for j, y in enumerate(population):\n                    if func(y) < func(x):\n                        distance = np.linalg.norm(x - y)\n                        beta = attractiveness(distance)\n                        population[i] += beta * (y - x) + np.random.uniform(-1, 1, self.dim)\n                        \n                        # Introduce dynamic update of alpha and beta parameters with probability 0.2\n                        if np.random.rand() < 0.2:\n                            self.alpha = max(0.1, self.alpha - 0.001)  # Update alpha\n                            self.beta_max = min(1.0, self.beta_max + 0.001)  # Update beta_max\n\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "DynamicEnhancedAdaptiveFireflyAlgorithm", "description": "Dynamic Enhanced Adaptive Firefly Algorithm with Parameter Fine-tuning for Black Box Optimization.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "baa2cbc7-8cfd-4871-9c38-41f8dd4e4b7a", "metadata": {"aucs": [0.26364390636496104, 0.29300561854970686, 0.24428300964481153, 0.23939973834037565, 0.2467495273967748, 0.26842577731711703, 0.2522675017302819, 0.2575302638375875, 0.2534433022604047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0766572902498952, 0.07056466479399093, 0.06578702271483305, 0.09369028126931711, 0.060637128292857057, 0.06678864504557569, 0.06943100799359891, 0.07307976137468397, 0.07036514449132503, 0.06171576709414861, 0.04904287198228763, 0.08246375542491846, 0.06257926847592532, 0.04989649919135719, 0.04431647929424798, 0.05065140133167656, 0.048916498435184086, 0.0495503964402616, 0.4883742461836731, 0.438797396423358, 0.6545057569551385, 0.34697603929357623, 0.47435958221101304, 0.39859808836598754, 0.6193788045996, 0.44001113347465093, 0.6302589844516637, 0.16793892038650116, 0.10252009036107756, 0.09987720486596352, 0.121047571874901, 0.11763340472688066, 0.11625865848336547, 0.1356246793354332, 0.09309600868048729, 0.11877858216787152, 0.20402307215422266, 0.18490983246198334, 0.1709520884265341, 0.21821444656747946, 0.16914140677036538, 0.17078014268163566, 0.1558761893759092, 0.1841535022609182, 0.15539375732653005, 0.05290328663586297, 0.058834113316189374, 0.06591692747502842, 0.03506308158726679, 0.08924418486682517, 0.07072693820065012, 0.07115224276865717, 0.10152153358024407, 0.06697752281348912, 0.09386098741497895, 0.07748365124106371, 0.08217196954889971, 0.06983175475441328, 0.10505178312602659, 0.07801867073374891, 0.07775343961530512, 0.05224036851249769, 0.09806771101687484, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12398150754531767, 0.026480636305764582, 0.11478896716659581, 0.019086380616214926, 0.0161828490301128, 0.04050106751160998, 0.0867150097493814, 0.06488334398697693, 0.08639752643616172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019869943237855292, 0.01944212523972222, 0.015815757112356166, 0.01077290889299276, 0.02649369164242177, 0.028830915740590934, 0.016552138388776116, 0.01457563750241897, 0.015429613354437266, 0.26138697914426945, 0.2964367460518782, 0.2705358275238776, 0.2363047923767786, 0.23752972149408647, 0.26826311612543796, 0.2820805521637926, 0.2990888499920641, 0.2554615020060679, 0.043105578629359265, 0.049908296283156184, 0.05814680907210401, 0.08016906102129906, 0.06519261453445346, 0.07358581051356683, 0.07845656455166827, 0.05889698979439595, 0.07053570957632949, 0.13327066452466974, 0.09814141576203073, 0.15772301972180047, 0.11373195596335794, 0.13749110583312507, 0.12752428799988047, 0.13440857020395158, 0.13574770457305896, 0.15455810017287153, 0.1810063835233383, 0.20876263645822768, 0.21223146557973227, 0.20604597788649237, 0.1882590107662837, 0.1825867779225998, 0.19643944693496873, 0.21285253196428378, 0.19122403165871116, 0.14168823127513808, 0.15631695085224306, 0.15666447050044807, 0.14767419667062254, 0.15554310023751228, 0.1381305815445325, 0.13758691408236723, 0.15749124301824358, 0.14202412939285058, 0.17121653842431894, 0.1745285914678688, 0.2032437749718784, 0.1737192039170501, 0.17381486995128193, 0.17032802950556414, 0.17061395354215603, 0.18703140437326238, 0.17896722191941894, 0.17070396139874433, 0.16016577250744035, 0.16771681473151712, 0.16333663233234053, 0.16045287781870177, 0.15767035317445266, 0.16911301074068796, 0.159995264258192, 0.16601435832597833, 0.2609818842444396, 0.16877971831310246, 0.16656648627464987, 0.17539471573713727, 0.1410822591108416, 0.16489327285704036, 0.3442070313125376, 0.13313410618187738, 0.30734113901670657, 0.1420316212209164, 0.2658485358056907, 0.0711740428121338, 0.16622141012412195, 0.13566327070490702, 0.1603520603967198, 0.16939270356108604, 0.22679738843076802, 0.19814881121442274, 0.17725633145644437, 0.16752340108009012, 0.15781945992981272, 0.17062617324198104, 0.1814020226159193, 0.17375881028988938, 0.17017240083753804, 0.16178045657852813, 0.16811390574130947, 0.06770914141475803, 0.061714167492443295, 0.06406532465497972, 0.06560357999669597, 0.07469521089279496, 0.07134115472793123, 0.07754399068243478, 0.07340929448741496, 0.07241274576772316]}, "mutation_prompt": null}
{"id": "3a84e040-d03d-4b43-8cdf-a53dd812345e", "solution": "import numpy as np\n\nclass DynamicEnhancedAdaptiveFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.beta_max = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        def attractiveness(distance):\n            return self.beta_min + (self.beta_max - self.beta_min) * np.exp(-self.alpha * distance)\n\n        population = initialize_population()\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i, x in enumerate(population):\n                for j, y in enumerate(population):\n                    if func(y) < func(x):\n                        distance = np.linalg.norm(x - y)\n                        beta = attractiveness(distance)\n                        population[i] += beta * (y - x) + np.random.uniform(-1, 1, self.dim)\n                        \n                        # Introduce dynamic update of alpha and beta parameters with probability 0.2\n                        if np.random.rand() < 0.2:\n                            self.alpha = max(0.1, self.alpha - 0.001)  # Update alpha\n                            self.beta_max = min(1.0, self.beta_max + 0.001)  # Update beta_max\n\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "DynamicEnhancedAdaptiveFireflyAlgorithm", "description": "Dynamic Enhanced Adaptive Firefly Algorithm with Parameter Fine-tuning for Black Box Optimization.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "baa2cbc7-8cfd-4871-9c38-41f8dd4e4b7a", "metadata": {"aucs": [0.26364390636496104, 0.29300561854970686, 0.24428300964481153, 0.23939973834037565, 0.2467495273967748, 0.26842577731711703, 0.2522675017302819, 0.2575302638375875, 0.2534433022604047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0766572902498952, 0.07056466479399093, 0.06578702271483305, 0.09369028126931711, 0.060637128292857057, 0.06678864504557569, 0.06943100799359891, 0.07307976137468397, 0.07036514449132503, 0.06171576709414861, 0.04904287198228763, 0.08246375542491846, 0.06257926847592532, 0.04989649919135719, 0.04431647929424798, 0.05065140133167656, 0.048916498435184086, 0.0495503964402616, 0.4883742461836731, 0.438797396423358, 0.6545057569551385, 0.34697603929357623, 0.47435958221101304, 0.39859808836598754, 0.6193788045996, 0.44001113347465093, 0.6302589844516637, 0.16793892038650116, 0.10252009036107756, 0.09987720486596352, 0.121047571874901, 0.11763340472688066, 0.11625865848336547, 0.1356246793354332, 0.09309600868048729, 0.11877858216787152, 0.20402307215422266, 0.18490983246198334, 0.1709520884265341, 0.21821444656747946, 0.16914140677036538, 0.17078014268163566, 0.1558761893759092, 0.1841535022609182, 0.15539375732653005, 0.05290328663586297, 0.058834113316189374, 0.06591692747502842, 0.03506308158726679, 0.08924418486682517, 0.07072693820065012, 0.07115224276865717, 0.10152153358024407, 0.06697752281348912, 0.09386098741497895, 0.07748365124106371, 0.08217196954889971, 0.06983175475441328, 0.10505178312602659, 0.07801867073374891, 0.07775343961530512, 0.05224036851249769, 0.09806771101687484, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12398150754531767, 0.026480636305764582, 0.11478896716659581, 0.019086380616214926, 0.0161828490301128, 0.04050106751160998, 0.0867150097493814, 0.06488334398697693, 0.08639752643616172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019869943237855292, 0.01944212523972222, 0.015815757112356166, 0.01077290889299276, 0.02649369164242177, 0.028830915740590934, 0.016552138388776116, 0.01457563750241897, 0.015429613354437266, 0.26138697914426945, 0.2964367460518782, 0.2705358275238776, 0.2363047923767786, 0.23752972149408647, 0.26826311612543796, 0.2820805521637926, 0.2990888499920641, 0.2554615020060679, 0.043105578629359265, 0.049908296283156184, 0.05814680907210401, 0.08016906102129906, 0.06519261453445346, 0.07358581051356683, 0.07845656455166827, 0.05889698979439595, 0.07053570957632949, 0.13327066452466974, 0.09814141576203073, 0.15772301972180047, 0.11373195596335794, 0.13749110583312507, 0.12752428799988047, 0.13440857020395158, 0.13574770457305896, 0.15455810017287153, 0.1810063835233383, 0.20876263645822768, 0.21223146557973227, 0.20604597788649237, 0.1882590107662837, 0.1825867779225998, 0.19643944693496873, 0.21285253196428378, 0.19122403165871116, 0.14168823127513808, 0.15631695085224306, 0.15666447050044807, 0.14767419667062254, 0.15554310023751228, 0.1381305815445325, 0.13758691408236723, 0.15749124301824358, 0.14202412939285058, 0.17121653842431894, 0.1745285914678688, 0.2032437749718784, 0.1737192039170501, 0.17381486995128193, 0.17032802950556414, 0.17061395354215603, 0.18703140437326238, 0.17896722191941894, 0.17070396139874433, 0.16016577250744035, 0.16771681473151712, 0.16333663233234053, 0.16045287781870177, 0.15767035317445266, 0.16911301074068796, 0.159995264258192, 0.16601435832597833, 0.2609818842444396, 0.16877971831310246, 0.16656648627464987, 0.17539471573713727, 0.1410822591108416, 0.16489327285704036, 0.3442070313125376, 0.13313410618187738, 0.30734113901670657, 0.1420316212209164, 0.2658485358056907, 0.0711740428121338, 0.16622141012412195, 0.13566327070490702, 0.1603520603967198, 0.16939270356108604, 0.22679738843076802, 0.19814881121442274, 0.17725633145644437, 0.16752340108009012, 0.15781945992981272, 0.17062617324198104, 0.1814020226159193, 0.17375881028988938, 0.17017240083753804, 0.16178045657852813, 0.16811390574130947, 0.06770914141475803, 0.061714167492443295, 0.06406532465497972, 0.06560357999669597, 0.07469521089279496, 0.07134115472793123, 0.07754399068243478, 0.07340929448741496, 0.07241274576772316]}, "mutation_prompt": null}
{"id": "61c91acb-6b50-4fe7-b8ab-41841ec81152", "solution": "import numpy as np\n\nclass DynamicEnhancedAdaptiveFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.beta_max = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        def attractiveness(distance):\n            return self.beta_min + (self.beta_max - self.beta_min) * np.exp(-self.alpha * distance)\n\n        population = initialize_population()\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i, x in enumerate(population):\n                for j, y in enumerate(population):\n                    if func(y) < func(x):\n                        distance = np.linalg.norm(x - y)\n                        beta = attractiveness(distance)\n                        population[i] += beta * (y - x) + np.random.uniform(-1, 1, self.dim)\n                        \n                        # Introduce dynamic update of alpha and beta parameters with probability 0.2\n                        if np.random.rand() < 0.2:\n                            self.alpha = max(0.1, self.alpha - 0.001)  # Update alpha\n                            self.beta_max = min(1.0, self.beta_max + 0.001)  # Update beta_max\n\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "DynamicEnhancedAdaptiveFireflyAlgorithm", "description": "Dynamic Enhanced Adaptive Firefly Algorithm with Parameter Fine-tuning for Black Box Optimization.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "baa2cbc7-8cfd-4871-9c38-41f8dd4e4b7a", "metadata": {"aucs": [0.26364390636496104, 0.29300561854970686, 0.24428300964481153, 0.23939973834037565, 0.2467495273967748, 0.26842577731711703, 0.2522675017302819, 0.2575302638375875, 0.2534433022604047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0766572902498952, 0.07056466479399093, 0.06578702271483305, 0.09369028126931711, 0.060637128292857057, 0.06678864504557569, 0.06943100799359891, 0.07307976137468397, 0.07036514449132503, 0.06171576709414861, 0.04904287198228763, 0.08246375542491846, 0.06257926847592532, 0.04989649919135719, 0.04431647929424798, 0.05065140133167656, 0.048916498435184086, 0.0495503964402616, 0.4883742461836731, 0.438797396423358, 0.6545057569551385, 0.34697603929357623, 0.47435958221101304, 0.39859808836598754, 0.6193788045996, 0.44001113347465093, 0.6302589844516637, 0.16793892038650116, 0.10252009036107756, 0.09987720486596352, 0.121047571874901, 0.11763340472688066, 0.11625865848336547, 0.1356246793354332, 0.09309600868048729, 0.11877858216787152, 0.20402307215422266, 0.18490983246198334, 0.1709520884265341, 0.21821444656747946, 0.16914140677036538, 0.17078014268163566, 0.1558761893759092, 0.1841535022609182, 0.15539375732653005, 0.05290328663586297, 0.058834113316189374, 0.06591692747502842, 0.03506308158726679, 0.08924418486682517, 0.07072693820065012, 0.07115224276865717, 0.10152153358024407, 0.06697752281348912, 0.09386098741497895, 0.07748365124106371, 0.08217196954889971, 0.06983175475441328, 0.10505178312602659, 0.07801867073374891, 0.07775343961530512, 0.05224036851249769, 0.09806771101687484, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12398150754531767, 0.026480636305764582, 0.11478896716659581, 0.019086380616214926, 0.0161828490301128, 0.04050106751160998, 0.0867150097493814, 0.06488334398697693, 0.08639752643616172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019869943237855292, 0.01944212523972222, 0.015815757112356166, 0.01077290889299276, 0.02649369164242177, 0.028830915740590934, 0.016552138388776116, 0.01457563750241897, 0.015429613354437266, 0.26138697914426945, 0.2964367460518782, 0.2705358275238776, 0.2363047923767786, 0.23752972149408647, 0.26826311612543796, 0.2820805521637926, 0.2990888499920641, 0.2554615020060679, 0.043105578629359265, 0.049908296283156184, 0.05814680907210401, 0.08016906102129906, 0.06519261453445346, 0.07358581051356683, 0.07845656455166827, 0.05889698979439595, 0.07053570957632949, 0.13327066452466974, 0.09814141576203073, 0.15772301972180047, 0.11373195596335794, 0.13749110583312507, 0.12752428799988047, 0.13440857020395158, 0.13574770457305896, 0.15455810017287153, 0.1810063835233383, 0.20876263645822768, 0.21223146557973227, 0.20604597788649237, 0.1882590107662837, 0.1825867779225998, 0.19643944693496873, 0.21285253196428378, 0.19122403165871116, 0.14168823127513808, 0.15631695085224306, 0.15666447050044807, 0.14767419667062254, 0.15554310023751228, 0.1381305815445325, 0.13758691408236723, 0.15749124301824358, 0.14202412939285058, 0.17121653842431894, 0.1745285914678688, 0.2032437749718784, 0.1737192039170501, 0.17381486995128193, 0.17032802950556414, 0.17061395354215603, 0.18703140437326238, 0.17896722191941894, 0.17070396139874433, 0.16016577250744035, 0.16771681473151712, 0.16333663233234053, 0.16045287781870177, 0.15767035317445266, 0.16911301074068796, 0.159995264258192, 0.16601435832597833, 0.2609818842444396, 0.16877971831310246, 0.16656648627464987, 0.17539471573713727, 0.1410822591108416, 0.16489327285704036, 0.3442070313125376, 0.13313410618187738, 0.30734113901670657, 0.1420316212209164, 0.2658485358056907, 0.0711740428121338, 0.16622141012412195, 0.13566327070490702, 0.1603520603967198, 0.16939270356108604, 0.22679738843076802, 0.19814881121442274, 0.17725633145644437, 0.16752340108009012, 0.15781945992981272, 0.17062617324198104, 0.1814020226159193, 0.17375881028988938, 0.17017240083753804, 0.16178045657852813, 0.16811390574130947, 0.06770914141475803, 0.061714167492443295, 0.06406532465497972, 0.06560357999669597, 0.07469521089279496, 0.07134115472793123, 0.07754399068243478, 0.07340929448741496, 0.07241274576772316]}, "mutation_prompt": null}
{"id": "0ce2b214-8262-4739-b655-6aa274652e3c", "solution": "import numpy as np\n\nclass DynamicEnhancedAdaptiveFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.beta_max = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        def attractiveness(distance):\n            return self.beta_min + (self.beta_max - self.beta_min) * np.exp(-self.alpha * distance)\n\n        population = initialize_population()\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i, x in enumerate(population):\n                for j, y in enumerate(population):\n                    if func(y) < func(x):\n                        distance = np.linalg.norm(x - y)\n                        beta = attractiveness(distance)\n                        population[i] += beta * (y - x) + np.random.uniform(-1, 1, self.dim)\n                        \n                        # Introduce dynamic update of alpha and beta parameters with probability 0.2\n                        if np.random.rand() < 0.2:\n                            self.alpha = max(0.1, self.alpha - 0.001)  # Update alpha\n                            self.beta_max = min(1.0, self.beta_max + 0.001)  # Update beta_max\n\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "DynamicEnhancedAdaptiveFireflyAlgorithm", "description": "Dynamic Enhanced Adaptive Firefly Algorithm with Parameter Fine-tuning for Black Box Optimization.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "baa2cbc7-8cfd-4871-9c38-41f8dd4e4b7a", "metadata": {"aucs": [0.26364390636496104, 0.29300561854970686, 0.24428300964481153, 0.23939973834037565, 0.2467495273967748, 0.26842577731711703, 0.2522675017302819, 0.2575302638375875, 0.2534433022604047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0766572902498952, 0.07056466479399093, 0.06578702271483305, 0.09369028126931711, 0.060637128292857057, 0.06678864504557569, 0.06943100799359891, 0.07307976137468397, 0.07036514449132503, 0.06171576709414861, 0.04904287198228763, 0.08246375542491846, 0.06257926847592532, 0.04989649919135719, 0.04431647929424798, 0.05065140133167656, 0.048916498435184086, 0.0495503964402616, 0.4883742461836731, 0.438797396423358, 0.6545057569551385, 0.34697603929357623, 0.47435958221101304, 0.39859808836598754, 0.6193788045996, 0.44001113347465093, 0.6302589844516637, 0.16793892038650116, 0.10252009036107756, 0.09987720486596352, 0.121047571874901, 0.11763340472688066, 0.11625865848336547, 0.1356246793354332, 0.09309600868048729, 0.11877858216787152, 0.20402307215422266, 0.18490983246198334, 0.1709520884265341, 0.21821444656747946, 0.16914140677036538, 0.17078014268163566, 0.1558761893759092, 0.1841535022609182, 0.15539375732653005, 0.05290328663586297, 0.058834113316189374, 0.06591692747502842, 0.03506308158726679, 0.08924418486682517, 0.07072693820065012, 0.07115224276865717, 0.10152153358024407, 0.06697752281348912, 0.09386098741497895, 0.07748365124106371, 0.08217196954889971, 0.06983175475441328, 0.10505178312602659, 0.07801867073374891, 0.07775343961530512, 0.05224036851249769, 0.09806771101687484, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12398150754531767, 0.026480636305764582, 0.11478896716659581, 0.019086380616214926, 0.0161828490301128, 0.04050106751160998, 0.0867150097493814, 0.06488334398697693, 0.08639752643616172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019869943237855292, 0.01944212523972222, 0.015815757112356166, 0.01077290889299276, 0.02649369164242177, 0.028830915740590934, 0.016552138388776116, 0.01457563750241897, 0.015429613354437266, 0.26138697914426945, 0.2964367460518782, 0.2705358275238776, 0.2363047923767786, 0.23752972149408647, 0.26826311612543796, 0.2820805521637926, 0.2990888499920641, 0.2554615020060679, 0.043105578629359265, 0.049908296283156184, 0.05814680907210401, 0.08016906102129906, 0.06519261453445346, 0.07358581051356683, 0.07845656455166827, 0.05889698979439595, 0.07053570957632949, 0.13327066452466974, 0.09814141576203073, 0.15772301972180047, 0.11373195596335794, 0.13749110583312507, 0.12752428799988047, 0.13440857020395158, 0.13574770457305896, 0.15455810017287153, 0.1810063835233383, 0.20876263645822768, 0.21223146557973227, 0.20604597788649237, 0.1882590107662837, 0.1825867779225998, 0.19643944693496873, 0.21285253196428378, 0.19122403165871116, 0.14168823127513808, 0.15631695085224306, 0.15666447050044807, 0.14767419667062254, 0.15554310023751228, 0.1381305815445325, 0.13758691408236723, 0.15749124301824358, 0.14202412939285058, 0.17121653842431894, 0.1745285914678688, 0.2032437749718784, 0.1737192039170501, 0.17381486995128193, 0.17032802950556414, 0.17061395354215603, 0.18703140437326238, 0.17896722191941894, 0.17070396139874433, 0.16016577250744035, 0.16771681473151712, 0.16333663233234053, 0.16045287781870177, 0.15767035317445266, 0.16911301074068796, 0.159995264258192, 0.16601435832597833, 0.2609818842444396, 0.16877971831310246, 0.16656648627464987, 0.17539471573713727, 0.1410822591108416, 0.16489327285704036, 0.3442070313125376, 0.13313410618187738, 0.30734113901670657, 0.1420316212209164, 0.2658485358056907, 0.0711740428121338, 0.16622141012412195, 0.13566327070490702, 0.1603520603967198, 0.16939270356108604, 0.22679738843076802, 0.19814881121442274, 0.17725633145644437, 0.16752340108009012, 0.15781945992981272, 0.17062617324198104, 0.1814020226159193, 0.17375881028988938, 0.17017240083753804, 0.16178045657852813, 0.16811390574130947, 0.06770914141475803, 0.061714167492443295, 0.06406532465497972, 0.06560357999669597, 0.07469521089279496, 0.07134115472793123, 0.07754399068243478, 0.07340929448741496, 0.07241274576772316]}, "mutation_prompt": null}
{"id": "6b4eb7a0-f832-4263-84e6-47b278a3a21b", "solution": "import numpy as np\n\nclass DynamicEnhancedAdaptiveFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.beta_max = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        def attractiveness(distance):\n            return self.beta_min + (self.beta_max - self.beta_min) * np.exp(-self.alpha * distance)\n\n        population = initialize_population()\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i, x in enumerate(population):\n                for j, y in enumerate(population):\n                    if func(y) < func(x):\n                        distance = np.linalg.norm(x - y)\n                        beta = attractiveness(distance)\n                        population[i] += beta * (y - x) + np.random.uniform(-1, 1, self.dim)\n                        \n                        # Introduce dynamic update of alpha and beta parameters with probability 0.2\n                        if np.random.rand() < 0.2:\n                            self.alpha = max(0.1, self.alpha - 0.001)  # Update alpha\n                            self.beta_max = min(1.0, self.beta_max + 0.001)  # Update beta_max\n\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "DynamicEnhancedAdaptiveFireflyAlgorithm", "description": "Dynamic Enhanced Adaptive Firefly Algorithm with Parameter Fine-tuning for Black Box Optimization.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "baa2cbc7-8cfd-4871-9c38-41f8dd4e4b7a", "metadata": {"aucs": [0.26364390636496104, 0.29300561854970686, 0.24428300964481153, 0.23939973834037565, 0.2467495273967748, 0.26842577731711703, 0.2522675017302819, 0.2575302638375875, 0.2534433022604047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0766572902498952, 0.07056466479399093, 0.06578702271483305, 0.09369028126931711, 0.060637128292857057, 0.06678864504557569, 0.06943100799359891, 0.07307976137468397, 0.07036514449132503, 0.06171576709414861, 0.04904287198228763, 0.08246375542491846, 0.06257926847592532, 0.04989649919135719, 0.04431647929424798, 0.05065140133167656, 0.048916498435184086, 0.0495503964402616, 0.4883742461836731, 0.438797396423358, 0.6545057569551385, 0.34697603929357623, 0.47435958221101304, 0.39859808836598754, 0.6193788045996, 0.44001113347465093, 0.6302589844516637, 0.16793892038650116, 0.10252009036107756, 0.09987720486596352, 0.121047571874901, 0.11763340472688066, 0.11625865848336547, 0.1356246793354332, 0.09309600868048729, 0.11877858216787152, 0.20402307215422266, 0.18490983246198334, 0.1709520884265341, 0.21821444656747946, 0.16914140677036538, 0.17078014268163566, 0.1558761893759092, 0.1841535022609182, 0.15539375732653005, 0.05290328663586297, 0.058834113316189374, 0.06591692747502842, 0.03506308158726679, 0.08924418486682517, 0.07072693820065012, 0.07115224276865717, 0.10152153358024407, 0.06697752281348912, 0.09386098741497895, 0.07748365124106371, 0.08217196954889971, 0.06983175475441328, 0.10505178312602659, 0.07801867073374891, 0.07775343961530512, 0.05224036851249769, 0.09806771101687484, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12398150754531767, 0.026480636305764582, 0.11478896716659581, 0.019086380616214926, 0.0161828490301128, 0.04050106751160998, 0.0867150097493814, 0.06488334398697693, 0.08639752643616172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019869943237855292, 0.01944212523972222, 0.015815757112356166, 0.01077290889299276, 0.02649369164242177, 0.028830915740590934, 0.016552138388776116, 0.01457563750241897, 0.015429613354437266, 0.26138697914426945, 0.2964367460518782, 0.2705358275238776, 0.2363047923767786, 0.23752972149408647, 0.26826311612543796, 0.2820805521637926, 0.2990888499920641, 0.2554615020060679, 0.043105578629359265, 0.049908296283156184, 0.05814680907210401, 0.08016906102129906, 0.06519261453445346, 0.07358581051356683, 0.07845656455166827, 0.05889698979439595, 0.07053570957632949, 0.13327066452466974, 0.09814141576203073, 0.15772301972180047, 0.11373195596335794, 0.13749110583312507, 0.12752428799988047, 0.13440857020395158, 0.13574770457305896, 0.15455810017287153, 0.1810063835233383, 0.20876263645822768, 0.21223146557973227, 0.20604597788649237, 0.1882590107662837, 0.1825867779225998, 0.19643944693496873, 0.21285253196428378, 0.19122403165871116, 0.14168823127513808, 0.15631695085224306, 0.15666447050044807, 0.14767419667062254, 0.15554310023751228, 0.1381305815445325, 0.13758691408236723, 0.15749124301824358, 0.14202412939285058, 0.17121653842431894, 0.1745285914678688, 0.2032437749718784, 0.1737192039170501, 0.17381486995128193, 0.17032802950556414, 0.17061395354215603, 0.18703140437326238, 0.17896722191941894, 0.17070396139874433, 0.16016577250744035, 0.16771681473151712, 0.16333663233234053, 0.16045287781870177, 0.15767035317445266, 0.16911301074068796, 0.159995264258192, 0.16601435832597833, 0.2609818842444396, 0.16877971831310246, 0.16656648627464987, 0.17539471573713727, 0.1410822591108416, 0.16489327285704036, 0.3442070313125376, 0.13313410618187738, 0.30734113901670657, 0.1420316212209164, 0.2658485358056907, 0.0711740428121338, 0.16622141012412195, 0.13566327070490702, 0.1603520603967198, 0.16939270356108604, 0.22679738843076802, 0.19814881121442274, 0.17725633145644437, 0.16752340108009012, 0.15781945992981272, 0.17062617324198104, 0.1814020226159193, 0.17375881028988938, 0.17017240083753804, 0.16178045657852813, 0.16811390574130947, 0.06770914141475803, 0.061714167492443295, 0.06406532465497972, 0.06560357999669597, 0.07469521089279496, 0.07134115472793123, 0.07754399068243478, 0.07340929448741496, 0.07241274576772316]}, "mutation_prompt": null}
{"id": "614d66f2-8e71-4379-abe7-2ae0899acefc", "solution": "import numpy as np\n\nclass CustomMetaheuristicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.beta_max = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        def attractiveness(distance):\n            return self.beta_min + (self.beta_max - self.beta_min) * np.exp(-self.alpha * distance)\n\n        population = initialize_population()\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i, x in enumerate(population):\n                for j, y in enumerate(population):\n                    if func(y) < func(x):\n                        distance = np.linalg.norm(x - y)\n                        beta = attractiveness(distance)\n                        population[i] += beta * (y - x) + np.random.uniform(-1, 1, self.dim)\n                        \n                        if np.random.rand() < 0.2:\n                            if np.random.rand() < 0.5:  # Modify the following lines with 50% probability\n                                self.alpha = max(0.1, self.alpha - 0.001)  # Update alpha\n                            else:\n                                self.beta_max = min(1.0, self.beta_max + 0.001)  # Update beta_max\n\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "CustomMetaheuristicAlgorithm", "description": "Enhancing the Dynamic Enhanced Adaptive Firefly Algorithm with Probability-based Parameter Fine-tuning for Black Box Optimization.", "configspace": "", "generation": 43, "fitness": 0.12862444343382762, "feedback": "The algorithm CustomMetaheuristicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.11.", "error": "", "parent_id": "baa2cbc7-8cfd-4871-9c38-41f8dd4e4b7a", "metadata": {"aucs": [0.25439793086428686, 0.25829911809513184, 0.28268213163708367, 0.2445764704735035, 0.21748206935347758, 0.2724767192591855, 0.2405566917516665, 0.23335156646517285, 0.24401901017829797, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05990921583099773, 0.06974629130063859, 0.06277551040464402, 0.0761597268023314, 0.0606294457687554, 0.09209080170948813, 0.05957331115059683, 0.07595968844265588, 0.06794494702812481, 0.046284300620677454, 0.04991683118628609, 0.04481019172354861, 0.06803706768855644, 0.06800703189953095, 0.06474475679053227, 0.06733296806309341, 0.04579236182833357, 0.058133924802422965, 0.6047650528362811, 0.5899394334306507, 0.41912713894219167, 0.2794797533935123, 0.3211248083106426, 0.544299292609729, 0.563065062326942, 0.3936767566574476, 0.5010616132607448, 0.1394801204082743, 0.07954018683359987, 0.0712395287191141, 0.13935429222891638, 0.11913960806887447, 0.12585686336167767, 0.12438729442422392, 0.0843236913396519, 0.12198813715892776, 0.21766115798425723, 0.18959130254321233, 0.16935014554242478, 0.1927096874467864, 0.17934336608407575, 0.1807240719542451, 0.1697274242142932, 0.1670360473157989, 0.1969551520206423, 0.058609689674922305, 0.08908214139972515, 0.06806886692178249, 0.029363938173600723, 0.06880920874240459, 0.0428798017063593, 0.22440943352142617, 0.07674860908585579, 0.0641998105402618, 0.07241226814134372, 0.077794233965781, 0.06305167676902423, 0.08745733722686766, 0.06619675972741956, 0.07502214465002965, 0.08843431933037971, 0.015823793528362717, 0.07440709000052725, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09850296134442016, 0.05961300796748892, 0.100782176979193, 0.019372441359855275, 0.020055068443023294, 0.020473004072892764, 0.10125062462775591, 0.08571324775351408, 0.07911371699873593, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023006035540384273, 0.014696010530111159, 0.01592719779135221, 0.018358025979568038, 0.014694521467158328, 0.020341641962867252, 0.02475553638667949, 0.015201524372580044, 0.03583560116183193, 0.2583465975450574, 0.2657468589451093, 0.2620982436146997, 0.23297599748919529, 0.24381371014901987, 0.23573693991388855, 0.2722185762057734, 0.24581839394401284, 0.2879104866212242, 0.051769625480316606, 0.06038943552819254, 0.06288237369127636, 0.06750519491654083, 0.0795080983090174, 0.07361637119715347, 0.06213432297218058, 0.06092106337390957, 0.075520327558103, 0.1367113882239004, 0.11540901872762788, 0.12946905671293074, 0.14472342296631324, 0.1301934485270142, 0.11617868808543408, 0.12275526841107909, 0.11978598978374233, 0.11241552120148368, 0.1910861038441246, 0.18159140863436452, 0.21090867228712484, 0.20727683037791456, 0.18198206117675475, 0.18868774977024627, 0.1909599780091853, 0.21212232740412695, 0.20273132411011596, 0.12265594874898522, 0.1316101931273812, 0.1534287801257267, 0.15601592033499234, 0.14720710916852386, 0.14548378956093644, 0.1454208260234271, 0.16000428772902708, 0.13865701059771585, 0.20783246616168283, 0.18081771469688146, 0.1718543678924609, 0.19120364414115731, 0.18615331039676197, 0.19697667943037045, 0.20162877714866168, 0.18940220059401025, 0.1615377189323386, 0.1659232171094711, 0.16330037827574562, 0.16390088445456863, 0.16379883658872973, 0.15951396967663545, 0.15958260768895616, 0.14844516686710885, 0.15170585512804902, 0.16750608240862985, 0.1407051642642978, 0.1674682853220536, 0.1614529060914205, 0.2929981742798343, 0.12076337156869488, 0.22106517232245937, 0.2759160738682993, 0.15895261212678324, 0.21056945942465988, 0.1398541114030195, 0.1539377386474312, 0.08256270008373667, 0.16894303480170692, 0.1501006368254857, 0.1513772756780516, 0.10200522054795547, 0.12058667147247759, 0.21860826093989483, 0.1718457678414378, 0.16267198152935558, 0.18703384779035992, 0.17196014543375548, 0.17319962711800851, 0.16367824317124724, 0.1722953646249975, 0.1598389140120693, 0.15910150366035125, 0.07334751774854398, 0.05694284652622905, 0.06894426738702464, 0.07709987456551737, 0.0721832922038782, 0.0647705796417336, 0.06562392334690048, 0.06871399217353968, 0.06649206616481984]}, "mutation_prompt": null}
{"id": "8f62e4fc-ab76-4614-ba67-f6d33ce393ab", "solution": "import numpy as np\n\nclass EnhancedFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.beta_max = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        def attractiveness(distance):\n            return self.beta_min + (self.beta_max - self.beta_min) * np.exp(-self.alpha * distance)\n\n        population = initialize_population()\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i, x in enumerate(population):\n                for j, y in enumerate(population):\n                    if func(y) < func(x):\n                        distance = np.linalg.norm(x - y)\n                        beta = attractiveness(distance)\n                        population[i] += beta * (y - x) + np.random.uniform(-1, 1, self.dim)\n                        \n                        if np.random.rand() < 0.2:\n                            self.alpha = max(0.1, self.alpha - 0.001)  \n                            self.beta_max = min(1.0, self.beta_max + 0.001)  \n\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "EnhancedFireflyAlgorithm", "description": "Enhanced Firefly Algorithm with Dynamic Parameter Adaptation for Black Box Optimization", "configspace": "", "generation": 44, "fitness": 0.1326966823857367, "feedback": "The algorithm EnhancedFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.11.", "error": "", "parent_id": "baa2cbc7-8cfd-4871-9c38-41f8dd4e4b7a", "metadata": {"aucs": [0.26364390636496104, 0.29300561854970686, 0.24428300964481153, 0.23939973834037565, 0.2467495273967748, 0.26842577731711703, 0.2522675017302819, 0.2575302638375875, 0.2534433022604047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0766572902498952, 0.07056466479399093, 0.06578702271483305, 0.09369028126931711, 0.060637128292857057, 0.06678864504557569, 0.06943100799359891, 0.07307976137468397, 0.07036514449132503, 0.06171576709414861, 0.04904287198228763, 0.08246375542491846, 0.06257926847592532, 0.04989649919135719, 0.04431647929424798, 0.05065140133167656, 0.048916498435184086, 0.0495503964402616, 0.4883742461836731, 0.438797396423358, 0.6545057569551385, 0.34697603929357623, 0.47435958221101304, 0.39859808836598754, 0.6193788045996, 0.44001113347465093, 0.6302589844516637, 0.16793892038650116, 0.10252009036107756, 0.09987720486596352, 0.121047571874901, 0.11763340472688066, 0.11625865848336547, 0.1356246793354332, 0.09309600868048729, 0.11877858216787152, 0.20402307215422266, 0.18490983246198334, 0.1709520884265341, 0.21821444656747946, 0.16914140677036538, 0.17078014268163566, 0.1558761893759092, 0.1841535022609182, 0.15539375732653005, 0.05290328663586297, 0.058834113316189374, 0.06591692747502842, 0.03506308158726679, 0.08924418486682517, 0.07072693820065012, 0.07115224276865717, 0.10152153358024407, 0.06697752281348912, 0.09386098741497895, 0.07748365124106371, 0.08217196954889971, 0.06983175475441328, 0.10505178312602659, 0.07801867073374891, 0.07775343961530512, 0.05224036851249769, 0.09806771101687484, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12398150754531767, 0.026480636305764582, 0.11478896716659581, 0.019086380616214926, 0.0161828490301128, 0.04050106751160998, 0.0867150097493814, 0.06488334398697693, 0.08639752643616172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019869943237855292, 0.01944212523972222, 0.015815757112356166, 0.01077290889299276, 0.02649369164242177, 0.028830915740590934, 0.016552138388776116, 0.01457563750241897, 0.015429613354437266, 0.26138697914426945, 0.2964367460518782, 0.2705358275238776, 0.2363047923767786, 0.23752972149408647, 0.26826311612543796, 0.2820805521637926, 0.2990888499920641, 0.2554615020060679, 0.043105578629359265, 0.049908296283156184, 0.05814680907210401, 0.08016906102129906, 0.06519261453445346, 0.07358581051356683, 0.07845656455166827, 0.05889698979439595, 0.07053570957632949, 0.13327066452466974, 0.09814141576203073, 0.15772301972180047, 0.11373195596335794, 0.13749110583312507, 0.12752428799988047, 0.13440857020395158, 0.13574770457305896, 0.15455810017287153, 0.1810063835233383, 0.20876263645822768, 0.21223146557973227, 0.20604597788649237, 0.1882590107662837, 0.1825867779225998, 0.19643944693496873, 0.21285253196428378, 0.19122403165871116, 0.14168823127513808, 0.15631695085224306, 0.15666447050044807, 0.14767419667062254, 0.15554310023751228, 0.1381305815445325, 0.13758691408236723, 0.15749124301824358, 0.14202412939285058, 0.17121653842431894, 0.1745285914678688, 0.2032437749718784, 0.1737192039170501, 0.17381486995128193, 0.17032802950556414, 0.17061395354215603, 0.18703140437326238, 0.17896722191941894, 0.17070396139874433, 0.16016577250744035, 0.16771681473151712, 0.16333663233234053, 0.16045287781870177, 0.15767035317445266, 0.16911301074068796, 0.159995264258192, 0.16601435832597833, 0.2609818842444396, 0.16877971831310246, 0.16656648627464987, 0.17539471573713727, 0.1410822591108416, 0.16489327285704036, 0.3442070313125376, 0.13313410618187738, 0.30734113901670657, 0.1420316212209164, 0.2658485358056907, 0.0711740428121338, 0.16622141012412195, 0.13566327070490702, 0.1603520603967198, 0.16939270356108604, 0.22679738843076802, 0.19814881121442274, 0.17725633145644437, 0.16752340108009012, 0.15781945992981272, 0.17062617324198104, 0.1814020226159193, 0.17375881028988938, 0.17017240083753804, 0.16178045657852813, 0.16811390574130947, 0.06770914141475803, 0.061714167492443295, 0.06406532465497972, 0.06560357999669597, 0.07469521089279496, 0.07134115472793123, 0.07754399068243478, 0.07340929448741496, 0.07241274576772316]}, "mutation_prompt": null}
{"id": "ab626041-fb91-4370-8d6b-9c5fc9b52614", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.crossover_prob = 0.9\n        self.scale_factor_min = 0.5\n        self.scale_factor_max = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        population = initialize_population()\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i, x in enumerate(population):\n                a, b, c = np.random.choice(population, 3, replace=False)\n                j_rand = np.random.randint(self.dim)\n                trial_vector = np.copy(x)\n                for j in range(self.dim):\n                    if np.random.rand() < self.crossover_prob or j == j_rand:\n                        trial_vector[j] = a[j] + (self.scale_factor_min + np.random.rand() * (self.scale_factor_max - self.scale_factor_min)) * (b[j] - c[j])\n\n                if func(trial_vector) < func(x):\n                    population[i] = trial_vector\n\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "EnhancedDifferentialEvolution", "description": "Enhanced Differential Evolution with Adaptive Parameter Control for Black Box Optimization", "configspace": "", "generation": 45, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('a must be 1-dimensional').", "error": "ValueError('a must be 1-dimensional')", "parent_id": "baa2cbc7-8cfd-4871-9c38-41f8dd4e4b7a", "metadata": {}, "mutation_prompt": null}
{"id": "1542204c-bcf3-425a-ba00-fb9a103dd913", "solution": "import numpy as np\n\nclass DynamicEnhancedAdaptiveFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.beta_max = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        def attractiveness(distance):\n            return self.beta_min + (self.beta_max - self.beta_min) * np.exp(-self.alpha * distance)\n\n        population = initialize_population()\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i, x in enumerate(population):\n                for j, y in enumerate(population):\n                    if func(y) < func(x):\n                        distance = np.linalg.norm(x - y)\n                        beta = attractiveness(distance)\n                        population[i] += beta * (y - x) + np.random.uniform(-1, 1, self.dim)\n                        \n                        # Introduce dynamic update of alpha and beta parameters with probability 0.2\n                        if np.random.rand() < 0.2:\n                            self.alpha = max(0.1, self.alpha - 0.001)  # Update alpha\n                            self.beta_max = min(1.0, self.beta_max + 0.001)  # Update beta_max\n\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "DynamicEnhancedAdaptiveFireflyAlgorithm", "description": "Dynamic Enhanced Adaptive Firefly Algorithm with Parameter Fine-tuning for Black Box Optimization.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "baa2cbc7-8cfd-4871-9c38-41f8dd4e4b7a", "metadata": {"aucs": [0.26364390636496104, 0.29300561854970686, 0.24428300964481153, 0.23939973834037565, 0.2467495273967748, 0.26842577731711703, 0.2522675017302819, 0.2575302638375875, 0.2534433022604047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0766572902498952, 0.07056466479399093, 0.06578702271483305, 0.09369028126931711, 0.060637128292857057, 0.06678864504557569, 0.06943100799359891, 0.07307976137468397, 0.07036514449132503, 0.06171576709414861, 0.04904287198228763, 0.08246375542491846, 0.06257926847592532, 0.04989649919135719, 0.04431647929424798, 0.05065140133167656, 0.048916498435184086, 0.0495503964402616, 0.4883742461836731, 0.438797396423358, 0.6545057569551385, 0.34697603929357623, 0.47435958221101304, 0.39859808836598754, 0.6193788045996, 0.44001113347465093, 0.6302589844516637, 0.16793892038650116, 0.10252009036107756, 0.09987720486596352, 0.121047571874901, 0.11763340472688066, 0.11625865848336547, 0.1356246793354332, 0.09309600868048729, 0.11877858216787152, 0.20402307215422266, 0.18490983246198334, 0.1709520884265341, 0.21821444656747946, 0.16914140677036538, 0.17078014268163566, 0.1558761893759092, 0.1841535022609182, 0.15539375732653005, 0.05290328663586297, 0.058834113316189374, 0.06591692747502842, 0.03506308158726679, 0.08924418486682517, 0.07072693820065012, 0.07115224276865717, 0.10152153358024407, 0.06697752281348912, 0.09386098741497895, 0.07748365124106371, 0.08217196954889971, 0.06983175475441328, 0.10505178312602659, 0.07801867073374891, 0.07775343961530512, 0.05224036851249769, 0.09806771101687484, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12398150754531767, 0.026480636305764582, 0.11478896716659581, 0.019086380616214926, 0.0161828490301128, 0.04050106751160998, 0.0867150097493814, 0.06488334398697693, 0.08639752643616172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019869943237855292, 0.01944212523972222, 0.015815757112356166, 0.01077290889299276, 0.02649369164242177, 0.028830915740590934, 0.016552138388776116, 0.01457563750241897, 0.015429613354437266, 0.26138697914426945, 0.2964367460518782, 0.2705358275238776, 0.2363047923767786, 0.23752972149408647, 0.26826311612543796, 0.2820805521637926, 0.2990888499920641, 0.2554615020060679, 0.043105578629359265, 0.049908296283156184, 0.05814680907210401, 0.08016906102129906, 0.06519261453445346, 0.07358581051356683, 0.07845656455166827, 0.05889698979439595, 0.07053570957632949, 0.13327066452466974, 0.09814141576203073, 0.15772301972180047, 0.11373195596335794, 0.13749110583312507, 0.12752428799988047, 0.13440857020395158, 0.13574770457305896, 0.15455810017287153, 0.1810063835233383, 0.20876263645822768, 0.21223146557973227, 0.20604597788649237, 0.1882590107662837, 0.1825867779225998, 0.19643944693496873, 0.21285253196428378, 0.19122403165871116, 0.14168823127513808, 0.15631695085224306, 0.15666447050044807, 0.14767419667062254, 0.15554310023751228, 0.1381305815445325, 0.13758691408236723, 0.15749124301824358, 0.14202412939285058, 0.17121653842431894, 0.1745285914678688, 0.2032437749718784, 0.1737192039170501, 0.17381486995128193, 0.17032802950556414, 0.17061395354215603, 0.18703140437326238, 0.17896722191941894, 0.17070396139874433, 0.16016577250744035, 0.16771681473151712, 0.16333663233234053, 0.16045287781870177, 0.15767035317445266, 0.16911301074068796, 0.159995264258192, 0.16601435832597833, 0.2609818842444396, 0.16877971831310246, 0.16656648627464987, 0.17539471573713727, 0.1410822591108416, 0.16489327285704036, 0.3442070313125376, 0.13313410618187738, 0.30734113901670657, 0.1420316212209164, 0.2658485358056907, 0.0711740428121338, 0.16622141012412195, 0.13566327070490702, 0.1603520603967198, 0.16939270356108604, 0.22679738843076802, 0.19814881121442274, 0.17725633145644437, 0.16752340108009012, 0.15781945992981272, 0.17062617324198104, 0.1814020226159193, 0.17375881028988938, 0.17017240083753804, 0.16178045657852813, 0.16811390574130947, 0.06770914141475803, 0.061714167492443295, 0.06406532465497972, 0.06560357999669597, 0.07469521089279496, 0.07134115472793123, 0.07754399068243478, 0.07340929448741496, 0.07241274576772316]}, "mutation_prompt": null}
{"id": "d800fcd1-e302-4524-b841-9702812339a8", "solution": "import numpy as np\n\nclass DynamicEnhancedAdaptiveFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.beta_max = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        def attractiveness(distance):\n            return self.beta_min + (self.beta_max - self.beta_min) * np.exp(-self.alpha * distance)\n\n        population = initialize_population()\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i, x in enumerate(population):\n                for j, y in enumerate(population):\n                    if func(y) < func(x):\n                        distance = np.linalg.norm(x - y)\n                        beta = attractiveness(distance)\n                        population[i] += beta * (y - x) + np.random.uniform(-1, 1, self.dim)\n                        \n                        # Introduce dynamic update of alpha and beta parameters with probability 0.2\n                        if np.random.rand() < 0.2:\n                            self.alpha = max(0.1, self.alpha - 0.001)  # Update alpha\n                            self.beta_max = min(1.0, self.beta_max + 0.001)  # Update beta_max\n\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "DynamicEnhancedAdaptiveFireflyAlgorithm", "description": "Dynamic Enhanced Adaptive Firefly Algorithm with Parameter Fine-tuning for Black Box Optimization.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "baa2cbc7-8cfd-4871-9c38-41f8dd4e4b7a", "metadata": {"aucs": [0.26364390636496104, 0.29300561854970686, 0.24428300964481153, 0.23939973834037565, 0.2467495273967748, 0.26842577731711703, 0.2522675017302819, 0.2575302638375875, 0.2534433022604047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0766572902498952, 0.07056466479399093, 0.06578702271483305, 0.09369028126931711, 0.060637128292857057, 0.06678864504557569, 0.06943100799359891, 0.07307976137468397, 0.07036514449132503, 0.06171576709414861, 0.04904287198228763, 0.08246375542491846, 0.06257926847592532, 0.04989649919135719, 0.04431647929424798, 0.05065140133167656, 0.048916498435184086, 0.0495503964402616, 0.4883742461836731, 0.438797396423358, 0.6545057569551385, 0.34697603929357623, 0.47435958221101304, 0.39859808836598754, 0.6193788045996, 0.44001113347465093, 0.6302589844516637, 0.16793892038650116, 0.10252009036107756, 0.09987720486596352, 0.121047571874901, 0.11763340472688066, 0.11625865848336547, 0.1356246793354332, 0.09309600868048729, 0.11877858216787152, 0.20402307215422266, 0.18490983246198334, 0.1709520884265341, 0.21821444656747946, 0.16914140677036538, 0.17078014268163566, 0.1558761893759092, 0.1841535022609182, 0.15539375732653005, 0.05290328663586297, 0.058834113316189374, 0.06591692747502842, 0.03506308158726679, 0.08924418486682517, 0.07072693820065012, 0.07115224276865717, 0.10152153358024407, 0.06697752281348912, 0.09386098741497895, 0.07748365124106371, 0.08217196954889971, 0.06983175475441328, 0.10505178312602659, 0.07801867073374891, 0.07775343961530512, 0.05224036851249769, 0.09806771101687484, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12398150754531767, 0.026480636305764582, 0.11478896716659581, 0.019086380616214926, 0.0161828490301128, 0.04050106751160998, 0.0867150097493814, 0.06488334398697693, 0.08639752643616172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019869943237855292, 0.01944212523972222, 0.015815757112356166, 0.01077290889299276, 0.02649369164242177, 0.028830915740590934, 0.016552138388776116, 0.01457563750241897, 0.015429613354437266, 0.26138697914426945, 0.2964367460518782, 0.2705358275238776, 0.2363047923767786, 0.23752972149408647, 0.26826311612543796, 0.2820805521637926, 0.2990888499920641, 0.2554615020060679, 0.043105578629359265, 0.049908296283156184, 0.05814680907210401, 0.08016906102129906, 0.06519261453445346, 0.07358581051356683, 0.07845656455166827, 0.05889698979439595, 0.07053570957632949, 0.13327066452466974, 0.09814141576203073, 0.15772301972180047, 0.11373195596335794, 0.13749110583312507, 0.12752428799988047, 0.13440857020395158, 0.13574770457305896, 0.15455810017287153, 0.1810063835233383, 0.20876263645822768, 0.21223146557973227, 0.20604597788649237, 0.1882590107662837, 0.1825867779225998, 0.19643944693496873, 0.21285253196428378, 0.19122403165871116, 0.14168823127513808, 0.15631695085224306, 0.15666447050044807, 0.14767419667062254, 0.15554310023751228, 0.1381305815445325, 0.13758691408236723, 0.15749124301824358, 0.14202412939285058, 0.17121653842431894, 0.1745285914678688, 0.2032437749718784, 0.1737192039170501, 0.17381486995128193, 0.17032802950556414, 0.17061395354215603, 0.18703140437326238, 0.17896722191941894, 0.17070396139874433, 0.16016577250744035, 0.16771681473151712, 0.16333663233234053, 0.16045287781870177, 0.15767035317445266, 0.16911301074068796, 0.159995264258192, 0.16601435832597833, 0.2609818842444396, 0.16877971831310246, 0.16656648627464987, 0.17539471573713727, 0.1410822591108416, 0.16489327285704036, 0.3442070313125376, 0.13313410618187738, 0.30734113901670657, 0.1420316212209164, 0.2658485358056907, 0.0711740428121338, 0.16622141012412195, 0.13566327070490702, 0.1603520603967198, 0.16939270356108604, 0.22679738843076802, 0.19814881121442274, 0.17725633145644437, 0.16752340108009012, 0.15781945992981272, 0.17062617324198104, 0.1814020226159193, 0.17375881028988938, 0.17017240083753804, 0.16178045657852813, 0.16811390574130947, 0.06770914141475803, 0.061714167492443295, 0.06406532465497972, 0.06560357999669597, 0.07469521089279496, 0.07134115472793123, 0.07754399068243478, 0.07340929448741496, 0.07241274576772316]}, "mutation_prompt": null}
{"id": "771039a6-ec03-44b8-bf33-5e18723b5854", "solution": "import numpy as np\n\nclass EnhancedDynamicAdaptiveFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.beta_max = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        def attractiveness(distance):\n            return self.beta_min + (self.beta_max - self.beta_min) * np.exp(-self.alpha * distance)\n\n        population = initialize_population()\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i, x in enumerate(population):\n                for j, y in enumerate(population):\n                    if func(y) < func(x):\n                        distance = np.linalg.norm(x - y)\n                        beta = attractiveness(distance)\n                        population[i] += beta * (y - x) + np.random.uniform(-1, 1, self.dim)\n                        \n                        # Introduce dynamic update of alpha and beta parameters with probability 0.2\n                        if np.random.rand() < 0.2:\n                            self.alpha = max(0.1, self.alpha - 0.001)  # Update alpha\n                            self.beta_max = min(1.0, self.beta_max + 0.001)  # Update beta_max\n\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "EnhancedDynamicAdaptiveFireflyAlgorithm", "description": "Enhanced Dynamic Adaptive Firefly Algorithm with Parameter Tuning for Black Box Optimization.", "configspace": "", "generation": 48, "fitness": 0.1326966823857367, "feedback": "The algorithm EnhancedDynamicAdaptiveFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.11.", "error": "", "parent_id": "baa2cbc7-8cfd-4871-9c38-41f8dd4e4b7a", "metadata": {"aucs": [0.26364390636496104, 0.29300561854970686, 0.24428300964481153, 0.23939973834037565, 0.2467495273967748, 0.26842577731711703, 0.2522675017302819, 0.2575302638375875, 0.2534433022604047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0766572902498952, 0.07056466479399093, 0.06578702271483305, 0.09369028126931711, 0.060637128292857057, 0.06678864504557569, 0.06943100799359891, 0.07307976137468397, 0.07036514449132503, 0.06171576709414861, 0.04904287198228763, 0.08246375542491846, 0.06257926847592532, 0.04989649919135719, 0.04431647929424798, 0.05065140133167656, 0.048916498435184086, 0.0495503964402616, 0.4883742461836731, 0.438797396423358, 0.6545057569551385, 0.34697603929357623, 0.47435958221101304, 0.39859808836598754, 0.6193788045996, 0.44001113347465093, 0.6302589844516637, 0.16793892038650116, 0.10252009036107756, 0.09987720486596352, 0.121047571874901, 0.11763340472688066, 0.11625865848336547, 0.1356246793354332, 0.09309600868048729, 0.11877858216787152, 0.20402307215422266, 0.18490983246198334, 0.1709520884265341, 0.21821444656747946, 0.16914140677036538, 0.17078014268163566, 0.1558761893759092, 0.1841535022609182, 0.15539375732653005, 0.05290328663586297, 0.058834113316189374, 0.06591692747502842, 0.03506308158726679, 0.08924418486682517, 0.07072693820065012, 0.07115224276865717, 0.10152153358024407, 0.06697752281348912, 0.09386098741497895, 0.07748365124106371, 0.08217196954889971, 0.06983175475441328, 0.10505178312602659, 0.07801867073374891, 0.07775343961530512, 0.05224036851249769, 0.09806771101687484, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12398150754531767, 0.026480636305764582, 0.11478896716659581, 0.019086380616214926, 0.0161828490301128, 0.04050106751160998, 0.0867150097493814, 0.06488334398697693, 0.08639752643616172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019869943237855292, 0.01944212523972222, 0.015815757112356166, 0.01077290889299276, 0.02649369164242177, 0.028830915740590934, 0.016552138388776116, 0.01457563750241897, 0.015429613354437266, 0.26138697914426945, 0.2964367460518782, 0.2705358275238776, 0.2363047923767786, 0.23752972149408647, 0.26826311612543796, 0.2820805521637926, 0.2990888499920641, 0.2554615020060679, 0.043105578629359265, 0.049908296283156184, 0.05814680907210401, 0.08016906102129906, 0.06519261453445346, 0.07358581051356683, 0.07845656455166827, 0.05889698979439595, 0.07053570957632949, 0.13327066452466974, 0.09814141576203073, 0.15772301972180047, 0.11373195596335794, 0.13749110583312507, 0.12752428799988047, 0.13440857020395158, 0.13574770457305896, 0.15455810017287153, 0.1810063835233383, 0.20876263645822768, 0.21223146557973227, 0.20604597788649237, 0.1882590107662837, 0.1825867779225998, 0.19643944693496873, 0.21285253196428378, 0.19122403165871116, 0.14168823127513808, 0.15631695085224306, 0.15666447050044807, 0.14767419667062254, 0.15554310023751228, 0.1381305815445325, 0.13758691408236723, 0.15749124301824358, 0.14202412939285058, 0.17121653842431894, 0.1745285914678688, 0.2032437749718784, 0.1737192039170501, 0.17381486995128193, 0.17032802950556414, 0.17061395354215603, 0.18703140437326238, 0.17896722191941894, 0.17070396139874433, 0.16016577250744035, 0.16771681473151712, 0.16333663233234053, 0.16045287781870177, 0.15767035317445266, 0.16911301074068796, 0.159995264258192, 0.16601435832597833, 0.2609818842444396, 0.16877971831310246, 0.16656648627464987, 0.17539471573713727, 0.1410822591108416, 0.16489327285704036, 0.3442070313125376, 0.13313410618187738, 0.30734113901670657, 0.1420316212209164, 0.2658485358056907, 0.0711740428121338, 0.16622141012412195, 0.13566327070490702, 0.1603520603967198, 0.16939270356108604, 0.22679738843076802, 0.19814881121442274, 0.17725633145644437, 0.16752340108009012, 0.15781945992981272, 0.17062617324198104, 0.1814020226159193, 0.17375881028988938, 0.17017240083753804, 0.16178045657852813, 0.16811390574130947, 0.06770914141475803, 0.061714167492443295, 0.06406532465497972, 0.06560357999669597, 0.07469521089279496, 0.07134115472793123, 0.07754399068243478, 0.07340929448741496, 0.07241274576772316]}, "mutation_prompt": null}
{"id": "e123a5f5-c1c2-490d-9a21-683753dddd42", "solution": "import numpy as np\n\nclass DynamicEnhancedAdaptiveFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.beta_max = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        def attractiveness(distance):\n            return self.beta_min + (self.beta_max - self.beta_min) * np.exp(-self.alpha * distance)\n\n        population = initialize_population()\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i, x in enumerate(population):\n                for j, y in enumerate(population):\n                    if func(y) < func(x):\n                        distance = np.linalg.norm(x - y)\n                        beta = attractiveness(distance)\n                        population[i] += beta * (y - x) + np.random.uniform(-1, 1, self.dim)\n                        \n                        if np.random.rand() < 0.2:\n                            self.alpha = max(0.1, self.alpha - 0.001)  # Update alpha\n                            self.beta_max = min(1.0, self.beta_max + 0.001)  # Update beta_max\n\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "DynamicEnhancedAdaptiveFireflyAlgorithm", "description": "Introducing Dynamic Parameter Adaptation in Firefly Algorithm for Black Box Optimization", "configspace": "", "generation": 49, "fitness": 0.1326966823857367, "feedback": "The algorithm DynamicEnhancedAdaptiveFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.11.", "error": "", "parent_id": "baa2cbc7-8cfd-4871-9c38-41f8dd4e4b7a", "metadata": {"aucs": [0.26364390636496104, 0.29300561854970686, 0.24428300964481153, 0.23939973834037565, 0.2467495273967748, 0.26842577731711703, 0.2522675017302819, 0.2575302638375875, 0.2534433022604047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0766572902498952, 0.07056466479399093, 0.06578702271483305, 0.09369028126931711, 0.060637128292857057, 0.06678864504557569, 0.06943100799359891, 0.07307976137468397, 0.07036514449132503, 0.06171576709414861, 0.04904287198228763, 0.08246375542491846, 0.06257926847592532, 0.04989649919135719, 0.04431647929424798, 0.05065140133167656, 0.048916498435184086, 0.0495503964402616, 0.4883742461836731, 0.438797396423358, 0.6545057569551385, 0.34697603929357623, 0.47435958221101304, 0.39859808836598754, 0.6193788045996, 0.44001113347465093, 0.6302589844516637, 0.16793892038650116, 0.10252009036107756, 0.09987720486596352, 0.121047571874901, 0.11763340472688066, 0.11625865848336547, 0.1356246793354332, 0.09309600868048729, 0.11877858216787152, 0.20402307215422266, 0.18490983246198334, 0.1709520884265341, 0.21821444656747946, 0.16914140677036538, 0.17078014268163566, 0.1558761893759092, 0.1841535022609182, 0.15539375732653005, 0.05290328663586297, 0.058834113316189374, 0.06591692747502842, 0.03506308158726679, 0.08924418486682517, 0.07072693820065012, 0.07115224276865717, 0.10152153358024407, 0.06697752281348912, 0.09386098741497895, 0.07748365124106371, 0.08217196954889971, 0.06983175475441328, 0.10505178312602659, 0.07801867073374891, 0.07775343961530512, 0.05224036851249769, 0.09806771101687484, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12398150754531767, 0.026480636305764582, 0.11478896716659581, 0.019086380616214926, 0.0161828490301128, 0.04050106751160998, 0.0867150097493814, 0.06488334398697693, 0.08639752643616172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019869943237855292, 0.01944212523972222, 0.015815757112356166, 0.01077290889299276, 0.02649369164242177, 0.028830915740590934, 0.016552138388776116, 0.01457563750241897, 0.015429613354437266, 0.26138697914426945, 0.2964367460518782, 0.2705358275238776, 0.2363047923767786, 0.23752972149408647, 0.26826311612543796, 0.2820805521637926, 0.2990888499920641, 0.2554615020060679, 0.043105578629359265, 0.049908296283156184, 0.05814680907210401, 0.08016906102129906, 0.06519261453445346, 0.07358581051356683, 0.07845656455166827, 0.05889698979439595, 0.07053570957632949, 0.13327066452466974, 0.09814141576203073, 0.15772301972180047, 0.11373195596335794, 0.13749110583312507, 0.12752428799988047, 0.13440857020395158, 0.13574770457305896, 0.15455810017287153, 0.1810063835233383, 0.20876263645822768, 0.21223146557973227, 0.20604597788649237, 0.1882590107662837, 0.1825867779225998, 0.19643944693496873, 0.21285253196428378, 0.19122403165871116, 0.14168823127513808, 0.15631695085224306, 0.15666447050044807, 0.14767419667062254, 0.15554310023751228, 0.1381305815445325, 0.13758691408236723, 0.15749124301824358, 0.14202412939285058, 0.17121653842431894, 0.1745285914678688, 0.2032437749718784, 0.1737192039170501, 0.17381486995128193, 0.17032802950556414, 0.17061395354215603, 0.18703140437326238, 0.17896722191941894, 0.17070396139874433, 0.16016577250744035, 0.16771681473151712, 0.16333663233234053, 0.16045287781870177, 0.15767035317445266, 0.16911301074068796, 0.159995264258192, 0.16601435832597833, 0.2609818842444396, 0.16877971831310246, 0.16656648627464987, 0.17539471573713727, 0.1410822591108416, 0.16489327285704036, 0.3442070313125376, 0.13313410618187738, 0.30734113901670657, 0.1420316212209164, 0.2658485358056907, 0.0711740428121338, 0.16622141012412195, 0.13566327070490702, 0.1603520603967198, 0.16939270356108604, 0.22679738843076802, 0.19814881121442274, 0.17725633145644437, 0.16752340108009012, 0.15781945992981272, 0.17062617324198104, 0.1814020226159193, 0.17375881028988938, 0.17017240083753804, 0.16178045657852813, 0.16811390574130947, 0.06770914141475803, 0.061714167492443295, 0.06406532465497972, 0.06560357999669597, 0.07469521089279496, 0.07134115472793123, 0.07754399068243478, 0.07340929448741496, 0.07241274576772316]}, "mutation_prompt": null}
{"id": "8bf327b0-75d3-43e3-bb8d-63fb1a8bde1a", "solution": "import numpy as np\n\nclass DynamicEnhancedAdaptiveFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.beta_max = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        def attractiveness(distance):\n            return self.beta_min + (self.beta_max - self.beta_min) * np.exp(-self.alpha * distance)\n\n        population = initialize_population()\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i, x in enumerate(population):\n                for j, y in enumerate(population):\n                    if func(y) < func(x):\n                        distance = np.linalg.norm(x - y)\n                        beta = attractiveness(distance)\n                        population[i] += beta * (y - x) + np.random.uniform(-1, 1, self.dim)\n                        \n                        # Introduce dynamic update of alpha and beta parameters with probability 0.2\n                        if np.random.rand() < 0.2:\n                            self.alpha = max(0.1, self.alpha - 0.001)  # Update alpha\n                            self.beta_max = min(1.0, self.beta_max + 0.001)  # Update beta_max\n\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "DynamicEnhancedAdaptiveFireflyAlgorithm", "description": "Dynamic Enhanced Adaptive Firefly Algorithm with Parameter Fine-tuning for Black Box Optimization.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "baa2cbc7-8cfd-4871-9c38-41f8dd4e4b7a", "metadata": {"aucs": [0.26364390636496104, 0.29300561854970686, 0.24428300964481153, 0.23939973834037565, 0.2467495273967748, 0.26842577731711703, 0.2522675017302819, 0.2575302638375875, 0.2534433022604047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0766572902498952, 0.07056466479399093, 0.06578702271483305, 0.09369028126931711, 0.060637128292857057, 0.06678864504557569, 0.06943100799359891, 0.07307976137468397, 0.07036514449132503, 0.06171576709414861, 0.04904287198228763, 0.08246375542491846, 0.06257926847592532, 0.04989649919135719, 0.04431647929424798, 0.05065140133167656, 0.048916498435184086, 0.0495503964402616, 0.4883742461836731, 0.438797396423358, 0.6545057569551385, 0.34697603929357623, 0.47435958221101304, 0.39859808836598754, 0.6193788045996, 0.44001113347465093, 0.6302589844516637, 0.16793892038650116, 0.10252009036107756, 0.09987720486596352, 0.121047571874901, 0.11763340472688066, 0.11625865848336547, 0.1356246793354332, 0.09309600868048729, 0.11877858216787152, 0.20402307215422266, 0.18490983246198334, 0.1709520884265341, 0.21821444656747946, 0.16914140677036538, 0.17078014268163566, 0.1558761893759092, 0.1841535022609182, 0.15539375732653005, 0.05290328663586297, 0.058834113316189374, 0.06591692747502842, 0.03506308158726679, 0.08924418486682517, 0.07072693820065012, 0.07115224276865717, 0.10152153358024407, 0.06697752281348912, 0.09386098741497895, 0.07748365124106371, 0.08217196954889971, 0.06983175475441328, 0.10505178312602659, 0.07801867073374891, 0.07775343961530512, 0.05224036851249769, 0.09806771101687484, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12398150754531767, 0.026480636305764582, 0.11478896716659581, 0.019086380616214926, 0.0161828490301128, 0.04050106751160998, 0.0867150097493814, 0.06488334398697693, 0.08639752643616172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019869943237855292, 0.01944212523972222, 0.015815757112356166, 0.01077290889299276, 0.02649369164242177, 0.028830915740590934, 0.016552138388776116, 0.01457563750241897, 0.015429613354437266, 0.26138697914426945, 0.2964367460518782, 0.2705358275238776, 0.2363047923767786, 0.23752972149408647, 0.26826311612543796, 0.2820805521637926, 0.2990888499920641, 0.2554615020060679, 0.043105578629359265, 0.049908296283156184, 0.05814680907210401, 0.08016906102129906, 0.06519261453445346, 0.07358581051356683, 0.07845656455166827, 0.05889698979439595, 0.07053570957632949, 0.13327066452466974, 0.09814141576203073, 0.15772301972180047, 0.11373195596335794, 0.13749110583312507, 0.12752428799988047, 0.13440857020395158, 0.13574770457305896, 0.15455810017287153, 0.1810063835233383, 0.20876263645822768, 0.21223146557973227, 0.20604597788649237, 0.1882590107662837, 0.1825867779225998, 0.19643944693496873, 0.21285253196428378, 0.19122403165871116, 0.14168823127513808, 0.15631695085224306, 0.15666447050044807, 0.14767419667062254, 0.15554310023751228, 0.1381305815445325, 0.13758691408236723, 0.15749124301824358, 0.14202412939285058, 0.17121653842431894, 0.1745285914678688, 0.2032437749718784, 0.1737192039170501, 0.17381486995128193, 0.17032802950556414, 0.17061395354215603, 0.18703140437326238, 0.17896722191941894, 0.17070396139874433, 0.16016577250744035, 0.16771681473151712, 0.16333663233234053, 0.16045287781870177, 0.15767035317445266, 0.16911301074068796, 0.159995264258192, 0.16601435832597833, 0.2609818842444396, 0.16877971831310246, 0.16656648627464987, 0.17539471573713727, 0.1410822591108416, 0.16489327285704036, 0.3442070313125376, 0.13313410618187738, 0.30734113901670657, 0.1420316212209164, 0.2658485358056907, 0.0711740428121338, 0.16622141012412195, 0.13566327070490702, 0.1603520603967198, 0.16939270356108604, 0.22679738843076802, 0.19814881121442274, 0.17725633145644437, 0.16752340108009012, 0.15781945992981272, 0.17062617324198104, 0.1814020226159193, 0.17375881028988938, 0.17017240083753804, 0.16178045657852813, 0.16811390574130947, 0.06770914141475803, 0.061714167492443295, 0.06406532465497972, 0.06560357999669597, 0.07469521089279496, 0.07134115472793123, 0.07754399068243478, 0.07340929448741496, 0.07241274576772316]}, "mutation_prompt": null}
{"id": "622154fb-fa02-4762-8ff9-837fd43f7f9f", "solution": "import numpy as np\n\nclass DynamicEnhancedAdaptiveFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.beta_max = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        def attractiveness(distance):\n            return self.beta_min + (self.beta_max - self.beta_min) * np.exp(-self.alpha * distance)\n\n        population = initialize_population()\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i, x in enumerate(population):\n                for j, y in enumerate(population):\n                    if func(y) < func(x):\n                        distance = np.linalg.norm(x - y)\n                        beta = attractiveness(distance)\n                        population[i] += beta * (y - x) + np.random.uniform(-1, 1, self.dim)\n                        \n                        # Introduce dynamic update of alpha and beta parameters with probability 0.2\n                        if np.random.rand() < 0.2:\n                            self.alpha = max(0.1, self.alpha - 0.001)  # Update alpha\n                            self.beta_max = min(1.0, self.beta_max + 0.001)  # Update beta_max\n\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "DynamicEnhancedAdaptiveFireflyAlgorithm", "description": "Dynamic Enhanced Adaptive Firefly Algorithm with Parameter Fine-tuning for Black Box Optimization.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "baa2cbc7-8cfd-4871-9c38-41f8dd4e4b7a", "metadata": {"aucs": [0.26364390636496104, 0.29300561854970686, 0.24428300964481153, 0.23939973834037565, 0.2467495273967748, 0.26842577731711703, 0.2522675017302819, 0.2575302638375875, 0.2534433022604047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0766572902498952, 0.07056466479399093, 0.06578702271483305, 0.09369028126931711, 0.060637128292857057, 0.06678864504557569, 0.06943100799359891, 0.07307976137468397, 0.07036514449132503, 0.06171576709414861, 0.04904287198228763, 0.08246375542491846, 0.06257926847592532, 0.04989649919135719, 0.04431647929424798, 0.05065140133167656, 0.048916498435184086, 0.0495503964402616, 0.4883742461836731, 0.438797396423358, 0.6545057569551385, 0.34697603929357623, 0.47435958221101304, 0.39859808836598754, 0.6193788045996, 0.44001113347465093, 0.6302589844516637, 0.16793892038650116, 0.10252009036107756, 0.09987720486596352, 0.121047571874901, 0.11763340472688066, 0.11625865848336547, 0.1356246793354332, 0.09309600868048729, 0.11877858216787152, 0.20402307215422266, 0.18490983246198334, 0.1709520884265341, 0.21821444656747946, 0.16914140677036538, 0.17078014268163566, 0.1558761893759092, 0.1841535022609182, 0.15539375732653005, 0.05290328663586297, 0.058834113316189374, 0.06591692747502842, 0.03506308158726679, 0.08924418486682517, 0.07072693820065012, 0.07115224276865717, 0.10152153358024407, 0.06697752281348912, 0.09386098741497895, 0.07748365124106371, 0.08217196954889971, 0.06983175475441328, 0.10505178312602659, 0.07801867073374891, 0.07775343961530512, 0.05224036851249769, 0.09806771101687484, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12398150754531767, 0.026480636305764582, 0.11478896716659581, 0.019086380616214926, 0.0161828490301128, 0.04050106751160998, 0.0867150097493814, 0.06488334398697693, 0.08639752643616172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019869943237855292, 0.01944212523972222, 0.015815757112356166, 0.01077290889299276, 0.02649369164242177, 0.028830915740590934, 0.016552138388776116, 0.01457563750241897, 0.015429613354437266, 0.26138697914426945, 0.2964367460518782, 0.2705358275238776, 0.2363047923767786, 0.23752972149408647, 0.26826311612543796, 0.2820805521637926, 0.2990888499920641, 0.2554615020060679, 0.043105578629359265, 0.049908296283156184, 0.05814680907210401, 0.08016906102129906, 0.06519261453445346, 0.07358581051356683, 0.07845656455166827, 0.05889698979439595, 0.07053570957632949, 0.13327066452466974, 0.09814141576203073, 0.15772301972180047, 0.11373195596335794, 0.13749110583312507, 0.12752428799988047, 0.13440857020395158, 0.13574770457305896, 0.15455810017287153, 0.1810063835233383, 0.20876263645822768, 0.21223146557973227, 0.20604597788649237, 0.1882590107662837, 0.1825867779225998, 0.19643944693496873, 0.21285253196428378, 0.19122403165871116, 0.14168823127513808, 0.15631695085224306, 0.15666447050044807, 0.14767419667062254, 0.15554310023751228, 0.1381305815445325, 0.13758691408236723, 0.15749124301824358, 0.14202412939285058, 0.17121653842431894, 0.1745285914678688, 0.2032437749718784, 0.1737192039170501, 0.17381486995128193, 0.17032802950556414, 0.17061395354215603, 0.18703140437326238, 0.17896722191941894, 0.17070396139874433, 0.16016577250744035, 0.16771681473151712, 0.16333663233234053, 0.16045287781870177, 0.15767035317445266, 0.16911301074068796, 0.159995264258192, 0.16601435832597833, 0.2609818842444396, 0.16877971831310246, 0.16656648627464987, 0.17539471573713727, 0.1410822591108416, 0.16489327285704036, 0.3442070313125376, 0.13313410618187738, 0.30734113901670657, 0.1420316212209164, 0.2658485358056907, 0.0711740428121338, 0.16622141012412195, 0.13566327070490702, 0.1603520603967198, 0.16939270356108604, 0.22679738843076802, 0.19814881121442274, 0.17725633145644437, 0.16752340108009012, 0.15781945992981272, 0.17062617324198104, 0.1814020226159193, 0.17375881028988938, 0.17017240083753804, 0.16178045657852813, 0.16811390574130947, 0.06770914141475803, 0.061714167492443295, 0.06406532465497972, 0.06560357999669597, 0.07469521089279496, 0.07134115472793123, 0.07754399068243478, 0.07340929448741496, 0.07241274576772316]}, "mutation_prompt": null}
{"id": "c0c55420-99c1-4a8a-943b-13116ddbf07d", "solution": "import numpy as np\n\nclass DynamicEnhancedAdaptiveFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.beta_max = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        def attractiveness(distance):\n            return self.beta_min + (self.beta_max - self.beta_min) * np.exp(-self.alpha * distance)\n\n        population = initialize_population()\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i, x in enumerate(population):\n                for j, y in enumerate(population):\n                    if func(y) < func(x):\n                        distance = np.linalg.norm(x - y)\n                        beta = attractiveness(distance)\n                        population[i] += beta * (y - x) + np.random.uniform(-1, 1, self.dim)\n                        \n                        # Introduce dynamic update of alpha and beta parameters with probability 0.2\n                        if np.random.rand() < 0.2:\n                            self.alpha = max(0.1, self.alpha - 0.001)  # Update alpha\n                            self.beta_max = min(1.0, self.beta_max + 0.001)  # Update beta_max\n\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "DynamicEnhancedAdaptiveFireflyAlgorithm", "description": "Dynamic Enhanced Adaptive Firefly Algorithm with Parameter Fine-tuning for Black Box Optimization.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "baa2cbc7-8cfd-4871-9c38-41f8dd4e4b7a", "metadata": {"aucs": [0.26364390636496104, 0.29300561854970686, 0.24428300964481153, 0.23939973834037565, 0.2467495273967748, 0.26842577731711703, 0.2522675017302819, 0.2575302638375875, 0.2534433022604047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0766572902498952, 0.07056466479399093, 0.06578702271483305, 0.09369028126931711, 0.060637128292857057, 0.06678864504557569, 0.06943100799359891, 0.07307976137468397, 0.07036514449132503, 0.06171576709414861, 0.04904287198228763, 0.08246375542491846, 0.06257926847592532, 0.04989649919135719, 0.04431647929424798, 0.05065140133167656, 0.048916498435184086, 0.0495503964402616, 0.4883742461836731, 0.438797396423358, 0.6545057569551385, 0.34697603929357623, 0.47435958221101304, 0.39859808836598754, 0.6193788045996, 0.44001113347465093, 0.6302589844516637, 0.16793892038650116, 0.10252009036107756, 0.09987720486596352, 0.121047571874901, 0.11763340472688066, 0.11625865848336547, 0.1356246793354332, 0.09309600868048729, 0.11877858216787152, 0.20402307215422266, 0.18490983246198334, 0.1709520884265341, 0.21821444656747946, 0.16914140677036538, 0.17078014268163566, 0.1558761893759092, 0.1841535022609182, 0.15539375732653005, 0.05290328663586297, 0.058834113316189374, 0.06591692747502842, 0.03506308158726679, 0.08924418486682517, 0.07072693820065012, 0.07115224276865717, 0.10152153358024407, 0.06697752281348912, 0.09386098741497895, 0.07748365124106371, 0.08217196954889971, 0.06983175475441328, 0.10505178312602659, 0.07801867073374891, 0.07775343961530512, 0.05224036851249769, 0.09806771101687484, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12398150754531767, 0.026480636305764582, 0.11478896716659581, 0.019086380616214926, 0.0161828490301128, 0.04050106751160998, 0.0867150097493814, 0.06488334398697693, 0.08639752643616172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019869943237855292, 0.01944212523972222, 0.015815757112356166, 0.01077290889299276, 0.02649369164242177, 0.028830915740590934, 0.016552138388776116, 0.01457563750241897, 0.015429613354437266, 0.26138697914426945, 0.2964367460518782, 0.2705358275238776, 0.2363047923767786, 0.23752972149408647, 0.26826311612543796, 0.2820805521637926, 0.2990888499920641, 0.2554615020060679, 0.043105578629359265, 0.049908296283156184, 0.05814680907210401, 0.08016906102129906, 0.06519261453445346, 0.07358581051356683, 0.07845656455166827, 0.05889698979439595, 0.07053570957632949, 0.13327066452466974, 0.09814141576203073, 0.15772301972180047, 0.11373195596335794, 0.13749110583312507, 0.12752428799988047, 0.13440857020395158, 0.13574770457305896, 0.15455810017287153, 0.1810063835233383, 0.20876263645822768, 0.21223146557973227, 0.20604597788649237, 0.1882590107662837, 0.1825867779225998, 0.19643944693496873, 0.21285253196428378, 0.19122403165871116, 0.14168823127513808, 0.15631695085224306, 0.15666447050044807, 0.14767419667062254, 0.15554310023751228, 0.1381305815445325, 0.13758691408236723, 0.15749124301824358, 0.14202412939285058, 0.17121653842431894, 0.1745285914678688, 0.2032437749718784, 0.1737192039170501, 0.17381486995128193, 0.17032802950556414, 0.17061395354215603, 0.18703140437326238, 0.17896722191941894, 0.17070396139874433, 0.16016577250744035, 0.16771681473151712, 0.16333663233234053, 0.16045287781870177, 0.15767035317445266, 0.16911301074068796, 0.159995264258192, 0.16601435832597833, 0.2609818842444396, 0.16877971831310246, 0.16656648627464987, 0.17539471573713727, 0.1410822591108416, 0.16489327285704036, 0.3442070313125376, 0.13313410618187738, 0.30734113901670657, 0.1420316212209164, 0.2658485358056907, 0.0711740428121338, 0.16622141012412195, 0.13566327070490702, 0.1603520603967198, 0.16939270356108604, 0.22679738843076802, 0.19814881121442274, 0.17725633145644437, 0.16752340108009012, 0.15781945992981272, 0.17062617324198104, 0.1814020226159193, 0.17375881028988938, 0.17017240083753804, 0.16178045657852813, 0.16811390574130947, 0.06770914141475803, 0.061714167492443295, 0.06406532465497972, 0.06560357999669597, 0.07469521089279496, 0.07134115472793123, 0.07754399068243478, 0.07340929448741496, 0.07241274576772316]}, "mutation_prompt": null}
{"id": "b458b96c-62c1-4c3a-8938-d42f52089759", "solution": "import numpy as np\n\nclass DynamicEnhancedAdaptiveFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.beta_max = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        def attractiveness(distance):\n            return self.beta_min + (self.beta_max - self.beta_min) * np.exp(-self.alpha * distance)\n\n        population = initialize_population()\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i, x in enumerate(population):\n                for j, y in enumerate(population):\n                    if func(y) < func(x):\n                        distance = np.linalg.norm(x - y)\n                        beta = attractiveness(distance)\n                        population[i] += beta * (y - x) + np.random.uniform(-1, 1, self.dim)\n                        \n                        # Introduce dynamic update of alpha and beta parameters with probability 0.2\n                        if np.random.rand() < 0.2:\n                            self.alpha = max(0.1, self.alpha - 0.001)  # Update alpha\n                            self.beta_max = min(1.0, self.beta_max + 0.001)  # Update beta_max\n\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "DynamicEnhancedAdaptiveFireflyAlgorithm", "description": "Dynamic Enhanced Adaptive Firefly Algorithm with Parameter Fine-tuning for Black Box Optimization.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "baa2cbc7-8cfd-4871-9c38-41f8dd4e4b7a", "metadata": {"aucs": [0.26364390636496104, 0.29300561854970686, 0.24428300964481153, 0.23939973834037565, 0.2467495273967748, 0.26842577731711703, 0.2522675017302819, 0.2575302638375875, 0.2534433022604047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0766572902498952, 0.07056466479399093, 0.06578702271483305, 0.09369028126931711, 0.060637128292857057, 0.06678864504557569, 0.06943100799359891, 0.07307976137468397, 0.07036514449132503, 0.06171576709414861, 0.04904287198228763, 0.08246375542491846, 0.06257926847592532, 0.04989649919135719, 0.04431647929424798, 0.05065140133167656, 0.048916498435184086, 0.0495503964402616, 0.4883742461836731, 0.438797396423358, 0.6545057569551385, 0.34697603929357623, 0.47435958221101304, 0.39859808836598754, 0.6193788045996, 0.44001113347465093, 0.6302589844516637, 0.16793892038650116, 0.10252009036107756, 0.09987720486596352, 0.121047571874901, 0.11763340472688066, 0.11625865848336547, 0.1356246793354332, 0.09309600868048729, 0.11877858216787152, 0.20402307215422266, 0.18490983246198334, 0.1709520884265341, 0.21821444656747946, 0.16914140677036538, 0.17078014268163566, 0.1558761893759092, 0.1841535022609182, 0.15539375732653005, 0.05290328663586297, 0.058834113316189374, 0.06591692747502842, 0.03506308158726679, 0.08924418486682517, 0.07072693820065012, 0.07115224276865717, 0.10152153358024407, 0.06697752281348912, 0.09386098741497895, 0.07748365124106371, 0.08217196954889971, 0.06983175475441328, 0.10505178312602659, 0.07801867073374891, 0.07775343961530512, 0.05224036851249769, 0.09806771101687484, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12398150754531767, 0.026480636305764582, 0.11478896716659581, 0.019086380616214926, 0.0161828490301128, 0.04050106751160998, 0.0867150097493814, 0.06488334398697693, 0.08639752643616172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019869943237855292, 0.01944212523972222, 0.015815757112356166, 0.01077290889299276, 0.02649369164242177, 0.028830915740590934, 0.016552138388776116, 0.01457563750241897, 0.015429613354437266, 0.26138697914426945, 0.2964367460518782, 0.2705358275238776, 0.2363047923767786, 0.23752972149408647, 0.26826311612543796, 0.2820805521637926, 0.2990888499920641, 0.2554615020060679, 0.043105578629359265, 0.049908296283156184, 0.05814680907210401, 0.08016906102129906, 0.06519261453445346, 0.07358581051356683, 0.07845656455166827, 0.05889698979439595, 0.07053570957632949, 0.13327066452466974, 0.09814141576203073, 0.15772301972180047, 0.11373195596335794, 0.13749110583312507, 0.12752428799988047, 0.13440857020395158, 0.13574770457305896, 0.15455810017287153, 0.1810063835233383, 0.20876263645822768, 0.21223146557973227, 0.20604597788649237, 0.1882590107662837, 0.1825867779225998, 0.19643944693496873, 0.21285253196428378, 0.19122403165871116, 0.14168823127513808, 0.15631695085224306, 0.15666447050044807, 0.14767419667062254, 0.15554310023751228, 0.1381305815445325, 0.13758691408236723, 0.15749124301824358, 0.14202412939285058, 0.17121653842431894, 0.1745285914678688, 0.2032437749718784, 0.1737192039170501, 0.17381486995128193, 0.17032802950556414, 0.17061395354215603, 0.18703140437326238, 0.17896722191941894, 0.17070396139874433, 0.16016577250744035, 0.16771681473151712, 0.16333663233234053, 0.16045287781870177, 0.15767035317445266, 0.16911301074068796, 0.159995264258192, 0.16601435832597833, 0.2609818842444396, 0.16877971831310246, 0.16656648627464987, 0.17539471573713727, 0.1410822591108416, 0.16489327285704036, 0.3442070313125376, 0.13313410618187738, 0.30734113901670657, 0.1420316212209164, 0.2658485358056907, 0.0711740428121338, 0.16622141012412195, 0.13566327070490702, 0.1603520603967198, 0.16939270356108604, 0.22679738843076802, 0.19814881121442274, 0.17725633145644437, 0.16752340108009012, 0.15781945992981272, 0.17062617324198104, 0.1814020226159193, 0.17375881028988938, 0.17017240083753804, 0.16178045657852813, 0.16811390574130947, 0.06770914141475803, 0.061714167492443295, 0.06406532465497972, 0.06560357999669597, 0.07469521089279496, 0.07134115472793123, 0.07754399068243478, 0.07340929448741496, 0.07241274576772316]}, "mutation_prompt": null}
{"id": "72361ec1-5cc5-4048-a2ef-5397e5f817d4", "solution": "import numpy as np\n\nclass EnhancedDynamicEnhancedAdaptiveFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.beta_max = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        def attractiveness(distance):\n            return self.beta_min + (self.beta_max - self.beta_min) * np.exp(-self.alpha * distance)\n\n        population = initialize_population()\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i, x in enumerate(population):\n                for j, y in enumerate(population):\n                    if func(y) < func(x):\n                        distance = np.linalg.norm(x - y)\n                        beta = attractiveness(distance)\n                        population[i] += beta * (y - x) + np.random.uniform(-1, 1, self.dim)\n                        \n                        # Introduce enhanced exploration with dynamic alpha and beta adaptation\n                        if np.random.rand() < 0.2:\n                            self.alpha = max(0.1, self.alpha - 0.001)  # Update alpha\n                            self.beta_max = min(1.0, self.beta_max + 0.001)  # Update beta_max\n                            population[i] += np.random.uniform(-0.1, 0.1, self.dim)  # Enhanced exploration\n\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "EnhancedDynamicEnhancedAdaptiveFireflyAlgorithm", "description": "Enhancing Dynamic Enhanced Adaptive Firefly Algorithm with Parameter Adaptation and Enhanced Exploration for Black Box Optimization", "configspace": "", "generation": 54, "fitness": 0.12789914231176128, "feedback": "The algorithm EnhancedDynamicEnhancedAdaptiveFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.11.", "error": "", "parent_id": "baa2cbc7-8cfd-4871-9c38-41f8dd4e4b7a", "metadata": {"aucs": [0.24814581799612379, 0.24610976248599503, 0.2477145773175532, 0.25549300418064025, 0.2279092173372509, 0.24008770576172633, 0.23794630824865337, 0.27666661203262044, 0.23427281479244422, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0697747723123785, 0.07128741739054023, 0.06698386080358054, 0.06899879097546147, 0.06936532489807634, 0.06424148834555088, 0.0644664304930187, 0.08223869892623425, 0.09474176441255877, 0.05420387858060416, 0.05538310699088633, 0.05080123341165654, 0.05719695073485831, 0.0445155005793455, 0.047225760883656265, 0.05039106430813933, 0.05086278308365, 0.053187222207931706, 0.4377953197438814, 0.5409166384810871, 0.5349435172423, 0.36404248330620126, 0.4047666072612075, 0.3886838363394046, 0.5264526852600941, 0.46183687603041323, 0.5966001237434189, 0.11416987330389528, 0.11415316683527599, 0.0997446913358645, 0.11060256441773741, 0.1074750247543741, 0.10995762924354235, 0.15716637579652237, 0.11518599162677379, 0.12244882030554183, 0.18993518390833874, 0.20674263226265166, 0.1492524941668969, 0.18779232157513948, 0.21219697467771825, 0.1635365945067595, 0.13363587824641887, 0.14360373538579319, 0.17746314633393956, 0.06116594396415109, 0.08667940524976891, 0.04332891034500952, 0.020324615869090068, 0.08716747054719964, 9.999999999998899e-05, 0.07499470440719325, 0.07221533305839423, 0.08762521138147661, 0.06894966979838135, 0.09709505226454584, 0.06972394199054166, 0.0634390709786512, 0.07209290330012041, 0.058293413996726495, 0.09580977152101366, 0.04990546725111367, 0.07990484623389715, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06776285086646638, 0.07056053270393059, 0.1192723304069605, 0.02900472799983711, 0.04192943102971691, 0.029625132083671235, 0.06205949483154505, 0.08048919675208877, 0.06895390419351821, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020753674759693586, 0.031102806363376145, 0.02722739271905661, 0.013431093585360765, 0.03538290947028622, 0.030787960064082465, 0.021966404511374327, 0.026891765024753322, 0.029429017457276996, 0.27339903385504216, 0.27135746329721255, 0.28907981948333406, 0.25395659086739175, 0.23462250857470668, 0.22779246088565885, 0.26756806562059776, 0.2703065720817658, 0.2518933964147322, 0.052277457473566935, 0.07398311768102284, 0.05469309925614485, 0.07565783389816993, 0.07575234211135973, 0.06899801502599912, 0.07104658427415889, 0.056821560645375024, 0.06808862686067463, 0.14415502699491922, 0.12034071765510201, 0.12047684450666851, 0.14006553395740573, 0.11215109892833752, 0.11645780460497845, 0.13706563241739222, 0.1397304660831694, 0.09632674352480919, 0.18289317734230515, 0.18409620942326377, 0.2163443931260679, 0.209894509966997, 0.2069353983366674, 0.21657503867680383, 0.20137343093011528, 0.234975864465096, 0.1803812978216509, 0.1454220695316144, 0.1343171939971689, 0.15309334948760533, 0.14886791945236622, 0.14540750771640465, 0.16083932885134877, 0.1467182096592432, 0.15191633698692253, 0.1479828555365419, 0.16365873715487722, 0.18714036386753086, 0.18052149418136176, 0.212406199172943, 0.19614624350536813, 0.1823787030143702, 0.186724017061334, 0.1758920643459967, 0.17807925896336696, 0.1765153078207532, 0.15886497138759037, 0.16032215691137386, 0.17483511158916243, 0.1643921274513015, 0.16132758461223562, 0.1518504583867496, 0.1735699323917177, 0.1592092445088158, 0.16181772720253662, 0.16916421418518224, 0.1622738777843582, 0.17504815412375974, 0.15616601217620552, 0.27047557688125845, 0.20942514010756585, 0.12165402451996032, 0.15406555854427118, 0.23152257123708764, 0.21678357170082685, 0.0718824612519775, 0.14050248116653397, 0.1489890339996338, 0.13494788982404493, 0.16697765304832124, 0.10097139549876666, 0.09547117305728281, 0.172551806459314, 0.17481743307183273, 0.16782689965145947, 0.1872175383556609, 0.16346981239333325, 0.17169688709119624, 0.1847292559309449, 0.16702796264423014, 0.1584662746918304, 0.06491527040872624, 0.06281963509278554, 0.08391332657432793, 0.06618373645970965, 0.07516375534559316, 0.06255361667406145, 0.05976222343965032, 0.06312839933646697, 0.07644049223241167]}, "mutation_prompt": null}
{"id": "a935d6d5-6912-44f9-aa29-aba0df9227f5", "solution": "import numpy as np\n\nclass DynamicEnhancedAdaptiveFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.beta_max = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        def attractiveness(distance):\n            return self.beta_min + (self.beta_max - self.beta_min) * np.exp(-self.alpha * distance)\n\n        population = initialize_population()\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i, x in enumerate(population):\n                for j, y in enumerate(population):\n                    if func(y) < func(x):\n                        distance = np.linalg.norm(x - y)\n                        beta = attractiveness(distance)\n                        population[i] += beta * (y - x) + np.random.uniform(-1, 1, self.dim)\n                        \n                        # Introduce dynamic update of alpha and beta parameters with probability 0.2\n                        if np.random.rand() < 0.2:\n                            self.alpha = max(0.1, self.alpha - 0.001)  # Update alpha\n                            self.beta_max = min(1.0, self.beta_max + 0.001)  # Update beta_max\n\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution\n", "name": "DynamicEnhancedAdaptiveFireflyAlgorithm", "description": "Dynamic Enhanced Adaptive Firefly Algorithm with Parameter Fine-tuning for Black Box Optimization with dynamic adjustment of alpha and beta parameters to optimize black box functions in a multi-dimensional search space.", "configspace": "", "generation": 55, "fitness": 0.1326966823857367, "feedback": "The algorithm DynamicEnhancedAdaptiveFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.11.", "error": "", "parent_id": "baa2cbc7-8cfd-4871-9c38-41f8dd4e4b7a", "metadata": {"aucs": [0.26364390636496104, 0.29300561854970686, 0.24428300964481153, 0.23939973834037565, 0.2467495273967748, 0.26842577731711703, 0.2522675017302819, 0.2575302638375875, 0.2534433022604047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0766572902498952, 0.07056466479399093, 0.06578702271483305, 0.09369028126931711, 0.060637128292857057, 0.06678864504557569, 0.06943100799359891, 0.07307976137468397, 0.07036514449132503, 0.06171576709414861, 0.04904287198228763, 0.08246375542491846, 0.06257926847592532, 0.04989649919135719, 0.04431647929424798, 0.05065140133167656, 0.048916498435184086, 0.0495503964402616, 0.4883742461836731, 0.438797396423358, 0.6545057569551385, 0.34697603929357623, 0.47435958221101304, 0.39859808836598754, 0.6193788045996, 0.44001113347465093, 0.6302589844516637, 0.16793892038650116, 0.10252009036107756, 0.09987720486596352, 0.121047571874901, 0.11763340472688066, 0.11625865848336547, 0.1356246793354332, 0.09309600868048729, 0.11877858216787152, 0.20402307215422266, 0.18490983246198334, 0.1709520884265341, 0.21821444656747946, 0.16914140677036538, 0.17078014268163566, 0.1558761893759092, 0.1841535022609182, 0.15539375732653005, 0.05290328663586297, 0.058834113316189374, 0.06591692747502842, 0.03506308158726679, 0.08924418486682517, 0.07072693820065012, 0.07115224276865717, 0.10152153358024407, 0.06697752281348912, 0.09386098741497895, 0.07748365124106371, 0.08217196954889971, 0.06983175475441328, 0.10505178312602659, 0.07801867073374891, 0.07775343961530512, 0.05224036851249769, 0.09806771101687484, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12398150754531767, 0.026480636305764582, 0.11478896716659581, 0.019086380616214926, 0.0161828490301128, 0.04050106751160998, 0.0867150097493814, 0.06488334398697693, 0.08639752643616172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019869943237855292, 0.01944212523972222, 0.015815757112356166, 0.01077290889299276, 0.02649369164242177, 0.028830915740590934, 0.016552138388776116, 0.01457563750241897, 0.015429613354437266, 0.26138697914426945, 0.2964367460518782, 0.2705358275238776, 0.2363047923767786, 0.23752972149408647, 0.26826311612543796, 0.2820805521637926, 0.2990888499920641, 0.2554615020060679, 0.043105578629359265, 0.049908296283156184, 0.05814680907210401, 0.08016906102129906, 0.06519261453445346, 0.07358581051356683, 0.07845656455166827, 0.05889698979439595, 0.07053570957632949, 0.13327066452466974, 0.09814141576203073, 0.15772301972180047, 0.11373195596335794, 0.13749110583312507, 0.12752428799988047, 0.13440857020395158, 0.13574770457305896, 0.15455810017287153, 0.1810063835233383, 0.20876263645822768, 0.21223146557973227, 0.20604597788649237, 0.1882590107662837, 0.1825867779225998, 0.19643944693496873, 0.21285253196428378, 0.19122403165871116, 0.14168823127513808, 0.15631695085224306, 0.15666447050044807, 0.14767419667062254, 0.15554310023751228, 0.1381305815445325, 0.13758691408236723, 0.15749124301824358, 0.14202412939285058, 0.17121653842431894, 0.1745285914678688, 0.2032437749718784, 0.1737192039170501, 0.17381486995128193, 0.17032802950556414, 0.17061395354215603, 0.18703140437326238, 0.17896722191941894, 0.17070396139874433, 0.16016577250744035, 0.16771681473151712, 0.16333663233234053, 0.16045287781870177, 0.15767035317445266, 0.16911301074068796, 0.159995264258192, 0.16601435832597833, 0.2609818842444396, 0.16877971831310246, 0.16656648627464987, 0.17539471573713727, 0.1410822591108416, 0.16489327285704036, 0.3442070313125376, 0.13313410618187738, 0.30734113901670657, 0.1420316212209164, 0.2658485358056907, 0.0711740428121338, 0.16622141012412195, 0.13566327070490702, 0.1603520603967198, 0.16939270356108604, 0.22679738843076802, 0.19814881121442274, 0.17725633145644437, 0.16752340108009012, 0.15781945992981272, 0.17062617324198104, 0.1814020226159193, 0.17375881028988938, 0.17017240083753804, 0.16178045657852813, 0.16811390574130947, 0.06770914141475803, 0.061714167492443295, 0.06406532465497972, 0.06560357999669597, 0.07469521089279496, 0.07134115472793123, 0.07754399068243478, 0.07340929448741496, 0.07241274576772316]}, "mutation_prompt": null}
{"id": "f7e0e88e-85c4-4aa6-859a-cb039e359aa7", "solution": "import numpy as np\n\nclass DynamicEnhancedAdaptiveFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.beta_max = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        def attractiveness(distance):\n            return self.beta_min + (self.beta_max - self.beta_min) * np.exp(-self.alpha * distance)\n\n        population = initialize_population()\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i, x in enumerate(population):\n                for j, y in enumerate(population):\n                    if func(y) < func(x):\n                        distance = np.linalg.norm(x - y)\n                        beta = attractiveness(distance)\n                        population[i] += beta * (y - x) + np.random.uniform(-1, 1, self.dim)\n                        \n                        # Introduce dynamic update of alpha and beta parameters with probability 0.2\n                        if np.random.rand() < 0.2:\n                            self.alpha = max(0.1, self.alpha - 0.001)  # Update alpha\n                            self.beta_max = min(1.0, self.beta_max + 0.001)  # Update beta_max\n\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "DynamicEnhancedAdaptiveFireflyAlgorithm", "description": "Dynamic Enhanced Adaptive Firefly Algorithm with Parameter Fine-tuning for Black Box Optimization.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "baa2cbc7-8cfd-4871-9c38-41f8dd4e4b7a", "metadata": {"aucs": [0.26364390636496104, 0.29300561854970686, 0.24428300964481153, 0.23939973834037565, 0.2467495273967748, 0.26842577731711703, 0.2522675017302819, 0.2575302638375875, 0.2534433022604047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0766572902498952, 0.07056466479399093, 0.06578702271483305, 0.09369028126931711, 0.060637128292857057, 0.06678864504557569, 0.06943100799359891, 0.07307976137468397, 0.07036514449132503, 0.06171576709414861, 0.04904287198228763, 0.08246375542491846, 0.06257926847592532, 0.04989649919135719, 0.04431647929424798, 0.05065140133167656, 0.048916498435184086, 0.0495503964402616, 0.4883742461836731, 0.438797396423358, 0.6545057569551385, 0.34697603929357623, 0.47435958221101304, 0.39859808836598754, 0.6193788045996, 0.44001113347465093, 0.6302589844516637, 0.16793892038650116, 0.10252009036107756, 0.09987720486596352, 0.121047571874901, 0.11763340472688066, 0.11625865848336547, 0.1356246793354332, 0.09309600868048729, 0.11877858216787152, 0.20402307215422266, 0.18490983246198334, 0.1709520884265341, 0.21821444656747946, 0.16914140677036538, 0.17078014268163566, 0.1558761893759092, 0.1841535022609182, 0.15539375732653005, 0.05290328663586297, 0.058834113316189374, 0.06591692747502842, 0.03506308158726679, 0.08924418486682517, 0.07072693820065012, 0.07115224276865717, 0.10152153358024407, 0.06697752281348912, 0.09386098741497895, 0.07748365124106371, 0.08217196954889971, 0.06983175475441328, 0.10505178312602659, 0.07801867073374891, 0.07775343961530512, 0.05224036851249769, 0.09806771101687484, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12398150754531767, 0.026480636305764582, 0.11478896716659581, 0.019086380616214926, 0.0161828490301128, 0.04050106751160998, 0.0867150097493814, 0.06488334398697693, 0.08639752643616172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019869943237855292, 0.01944212523972222, 0.015815757112356166, 0.01077290889299276, 0.02649369164242177, 0.028830915740590934, 0.016552138388776116, 0.01457563750241897, 0.015429613354437266, 0.26138697914426945, 0.2964367460518782, 0.2705358275238776, 0.2363047923767786, 0.23752972149408647, 0.26826311612543796, 0.2820805521637926, 0.2990888499920641, 0.2554615020060679, 0.043105578629359265, 0.049908296283156184, 0.05814680907210401, 0.08016906102129906, 0.06519261453445346, 0.07358581051356683, 0.07845656455166827, 0.05889698979439595, 0.07053570957632949, 0.13327066452466974, 0.09814141576203073, 0.15772301972180047, 0.11373195596335794, 0.13749110583312507, 0.12752428799988047, 0.13440857020395158, 0.13574770457305896, 0.15455810017287153, 0.1810063835233383, 0.20876263645822768, 0.21223146557973227, 0.20604597788649237, 0.1882590107662837, 0.1825867779225998, 0.19643944693496873, 0.21285253196428378, 0.19122403165871116, 0.14168823127513808, 0.15631695085224306, 0.15666447050044807, 0.14767419667062254, 0.15554310023751228, 0.1381305815445325, 0.13758691408236723, 0.15749124301824358, 0.14202412939285058, 0.17121653842431894, 0.1745285914678688, 0.2032437749718784, 0.1737192039170501, 0.17381486995128193, 0.17032802950556414, 0.17061395354215603, 0.18703140437326238, 0.17896722191941894, 0.17070396139874433, 0.16016577250744035, 0.16771681473151712, 0.16333663233234053, 0.16045287781870177, 0.15767035317445266, 0.16911301074068796, 0.159995264258192, 0.16601435832597833, 0.2609818842444396, 0.16877971831310246, 0.16656648627464987, 0.17539471573713727, 0.1410822591108416, 0.16489327285704036, 0.3442070313125376, 0.13313410618187738, 0.30734113901670657, 0.1420316212209164, 0.2658485358056907, 0.0711740428121338, 0.16622141012412195, 0.13566327070490702, 0.1603520603967198, 0.16939270356108604, 0.22679738843076802, 0.19814881121442274, 0.17725633145644437, 0.16752340108009012, 0.15781945992981272, 0.17062617324198104, 0.1814020226159193, 0.17375881028988938, 0.17017240083753804, 0.16178045657852813, 0.16811390574130947, 0.06770914141475803, 0.061714167492443295, 0.06406532465497972, 0.06560357999669597, 0.07469521089279496, 0.07134115472793123, 0.07754399068243478, 0.07340929448741496, 0.07241274576772316]}, "mutation_prompt": null}
{"id": "3a2d65c3-028d-4118-aff0-b9ecf155b5f0", "solution": "import numpy as np\n\nclass ProbabilisticRefinedDEAFAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.beta_max = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        def attractiveness(distance):\n            return self.beta_min + (self.beta_max - self.beta_min) * np.exp(-self.alpha * distance)\n\n        population = initialize_population()\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i, x in enumerate(population):\n                for j, y in enumerate(population):\n                    if func(y) < func(x):\n                        distance = np.linalg.norm(x - y)\n                        beta = attractiveness(distance)\n                        population[i] += beta * (y - x) + np.random.uniform(-1, 1, self.dim)\n\n                        # Introduce dynamic update of alpha and beta parameters with probability 0.2\n                        if np.random.rand() < 0.2:\n                            if np.random.rand() < 0.5:\n                                self.alpha = max(0.1, self.alpha - 0.001)  # Update alpha\n                            else:\n                                self.beta_max = min(1.0, self.beta_max + 0.001)  # Update beta_max\n\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "ProbabilisticRefinedDEAFAlgorithm", "description": "Enhancing the Dynamic Enhanced Adaptive Firefly Algorithm through a probabilistic strategy refinement mechanism for improved black box optimization.", "configspace": "", "generation": 57, "fitness": 0.12862444343382762, "feedback": "The algorithm ProbabilisticRefinedDEAFAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.11.", "error": "", "parent_id": "baa2cbc7-8cfd-4871-9c38-41f8dd4e4b7a", "metadata": {"aucs": [0.25439793086428686, 0.25829911809513184, 0.28268213163708367, 0.2445764704735035, 0.21748206935347758, 0.2724767192591855, 0.2405566917516665, 0.23335156646517285, 0.24401901017829797, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05990921583099773, 0.06974629130063859, 0.06277551040464402, 0.0761597268023314, 0.0606294457687554, 0.09209080170948813, 0.05957331115059683, 0.07595968844265588, 0.06794494702812481, 0.046284300620677454, 0.04991683118628609, 0.04481019172354861, 0.06803706768855644, 0.06800703189953095, 0.06474475679053227, 0.06733296806309341, 0.04579236182833357, 0.058133924802422965, 0.6047650528362811, 0.5899394334306507, 0.41912713894219167, 0.2794797533935123, 0.3211248083106426, 0.544299292609729, 0.563065062326942, 0.3936767566574476, 0.5010616132607448, 0.1394801204082743, 0.07954018683359987, 0.0712395287191141, 0.13935429222891638, 0.11913960806887447, 0.12585686336167767, 0.12438729442422392, 0.0843236913396519, 0.12198813715892776, 0.21766115798425723, 0.18959130254321233, 0.16935014554242478, 0.1927096874467864, 0.17934336608407575, 0.1807240719542451, 0.1697274242142932, 0.1670360473157989, 0.1969551520206423, 0.058609689674922305, 0.08908214139972515, 0.06806886692178249, 0.029363938173600723, 0.06880920874240459, 0.0428798017063593, 0.22440943352142617, 0.07674860908585579, 0.0641998105402618, 0.07241226814134372, 0.077794233965781, 0.06305167676902423, 0.08745733722686766, 0.06619675972741956, 0.07502214465002965, 0.08843431933037971, 0.015823793528362717, 0.07440709000052725, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09850296134442016, 0.05961300796748892, 0.100782176979193, 0.019372441359855275, 0.020055068443023294, 0.020473004072892764, 0.10125062462775591, 0.08571324775351408, 0.07911371699873593, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023006035540384273, 0.014696010530111159, 0.01592719779135221, 0.018358025979568038, 0.014694521467158328, 0.020341641962867252, 0.02475553638667949, 0.015201524372580044, 0.03583560116183193, 0.2583465975450574, 0.2657468589451093, 0.2620982436146997, 0.23297599748919529, 0.24381371014901987, 0.23573693991388855, 0.2722185762057734, 0.24581839394401284, 0.2879104866212242, 0.051769625480316606, 0.06038943552819254, 0.06288237369127636, 0.06750519491654083, 0.0795080983090174, 0.07361637119715347, 0.06213432297218058, 0.06092106337390957, 0.075520327558103, 0.1367113882239004, 0.11540901872762788, 0.12946905671293074, 0.14472342296631324, 0.1301934485270142, 0.11617868808543408, 0.12275526841107909, 0.11978598978374233, 0.11241552120148368, 0.1910861038441246, 0.18159140863436452, 0.21090867228712484, 0.20727683037791456, 0.18198206117675475, 0.18868774977024627, 0.1909599780091853, 0.21212232740412695, 0.20273132411011596, 0.12265594874898522, 0.1316101931273812, 0.1534287801257267, 0.15601592033499234, 0.14720710916852386, 0.14548378956093644, 0.1454208260234271, 0.16000428772902708, 0.13865701059771585, 0.20783246616168283, 0.18081771469688146, 0.1718543678924609, 0.19120364414115731, 0.18615331039676197, 0.19697667943037045, 0.20162877714866168, 0.18940220059401025, 0.1615377189323386, 0.1659232171094711, 0.16330037827574562, 0.16390088445456863, 0.16379883658872973, 0.15951396967663545, 0.15958260768895616, 0.14844516686710885, 0.15170585512804902, 0.16750608240862985, 0.1407051642642978, 0.1674682853220536, 0.1614529060914205, 0.2929981742798343, 0.12076337156869488, 0.22106517232245937, 0.2759160738682993, 0.15895261212678324, 0.21056945942465988, 0.1398541114030195, 0.1539377386474312, 0.08256270008373667, 0.16894303480170692, 0.1501006368254857, 0.1513772756780516, 0.10200522054795547, 0.12058667147247759, 0.21860826093989483, 0.1718457678414378, 0.16267198152935558, 0.18703384779035992, 0.17196014543375548, 0.17319962711800851, 0.16367824317124724, 0.1722953646249975, 0.1598389140120693, 0.15910150366035125, 0.07334751774854398, 0.05694284652622905, 0.06894426738702464, 0.07709987456551737, 0.0721832922038782, 0.0647705796417336, 0.06562392334690048, 0.06871399217353968, 0.06649206616481984]}, "mutation_prompt": null}
{"id": "0e6df104-1233-471a-b30b-7a1649832ea3", "solution": "import numpy as np\n\nclass DynamicEnhancedAdaptiveFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.beta_max = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        def attractiveness(distance):\n            return self.beta_min + (self.beta_max - self.beta_min) * np.exp(-self.alpha * distance)\n\n        population = initialize_population()\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i, x in enumerate(population):\n                for j, y in enumerate(population):\n                    if func(y) < func(x):\n                        distance = np.linalg.norm(x - y)\n                        beta = attractiveness(distance)\n                        population[i] += beta * (y - x) + np.random.uniform(-1, 1, self.dim)\n                        \n                        # Introduce dynamic update of alpha and beta parameters with probability 0.2\n                        if np.random.rand() < 0.2:\n                            self.alpha = max(0.1, self.alpha - 0.001)  # Update alpha\n                            self.beta_max = min(1.0, self.beta_max + 0.001)  # Update beta_max\n\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "DynamicEnhancedAdaptiveFireflyAlgorithm", "description": "Dynamic Enhanced Adaptive Firefly Algorithm with Parameter Fine-tuning for Black Box Optimization.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "baa2cbc7-8cfd-4871-9c38-41f8dd4e4b7a", "metadata": {"aucs": [0.26364390636496104, 0.29300561854970686, 0.24428300964481153, 0.23939973834037565, 0.2467495273967748, 0.26842577731711703, 0.2522675017302819, 0.2575302638375875, 0.2534433022604047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0766572902498952, 0.07056466479399093, 0.06578702271483305, 0.09369028126931711, 0.060637128292857057, 0.06678864504557569, 0.06943100799359891, 0.07307976137468397, 0.07036514449132503, 0.06171576709414861, 0.04904287198228763, 0.08246375542491846, 0.06257926847592532, 0.04989649919135719, 0.04431647929424798, 0.05065140133167656, 0.048916498435184086, 0.0495503964402616, 0.4883742461836731, 0.438797396423358, 0.6545057569551385, 0.34697603929357623, 0.47435958221101304, 0.39859808836598754, 0.6193788045996, 0.44001113347465093, 0.6302589844516637, 0.16793892038650116, 0.10252009036107756, 0.09987720486596352, 0.121047571874901, 0.11763340472688066, 0.11625865848336547, 0.1356246793354332, 0.09309600868048729, 0.11877858216787152, 0.20402307215422266, 0.18490983246198334, 0.1709520884265341, 0.21821444656747946, 0.16914140677036538, 0.17078014268163566, 0.1558761893759092, 0.1841535022609182, 0.15539375732653005, 0.05290328663586297, 0.058834113316189374, 0.06591692747502842, 0.03506308158726679, 0.08924418486682517, 0.07072693820065012, 0.07115224276865717, 0.10152153358024407, 0.06697752281348912, 0.09386098741497895, 0.07748365124106371, 0.08217196954889971, 0.06983175475441328, 0.10505178312602659, 0.07801867073374891, 0.07775343961530512, 0.05224036851249769, 0.09806771101687484, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12398150754531767, 0.026480636305764582, 0.11478896716659581, 0.019086380616214926, 0.0161828490301128, 0.04050106751160998, 0.0867150097493814, 0.06488334398697693, 0.08639752643616172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019869943237855292, 0.01944212523972222, 0.015815757112356166, 0.01077290889299276, 0.02649369164242177, 0.028830915740590934, 0.016552138388776116, 0.01457563750241897, 0.015429613354437266, 0.26138697914426945, 0.2964367460518782, 0.2705358275238776, 0.2363047923767786, 0.23752972149408647, 0.26826311612543796, 0.2820805521637926, 0.2990888499920641, 0.2554615020060679, 0.043105578629359265, 0.049908296283156184, 0.05814680907210401, 0.08016906102129906, 0.06519261453445346, 0.07358581051356683, 0.07845656455166827, 0.05889698979439595, 0.07053570957632949, 0.13327066452466974, 0.09814141576203073, 0.15772301972180047, 0.11373195596335794, 0.13749110583312507, 0.12752428799988047, 0.13440857020395158, 0.13574770457305896, 0.15455810017287153, 0.1810063835233383, 0.20876263645822768, 0.21223146557973227, 0.20604597788649237, 0.1882590107662837, 0.1825867779225998, 0.19643944693496873, 0.21285253196428378, 0.19122403165871116, 0.14168823127513808, 0.15631695085224306, 0.15666447050044807, 0.14767419667062254, 0.15554310023751228, 0.1381305815445325, 0.13758691408236723, 0.15749124301824358, 0.14202412939285058, 0.17121653842431894, 0.1745285914678688, 0.2032437749718784, 0.1737192039170501, 0.17381486995128193, 0.17032802950556414, 0.17061395354215603, 0.18703140437326238, 0.17896722191941894, 0.17070396139874433, 0.16016577250744035, 0.16771681473151712, 0.16333663233234053, 0.16045287781870177, 0.15767035317445266, 0.16911301074068796, 0.159995264258192, 0.16601435832597833, 0.2609818842444396, 0.16877971831310246, 0.16656648627464987, 0.17539471573713727, 0.1410822591108416, 0.16489327285704036, 0.3442070313125376, 0.13313410618187738, 0.30734113901670657, 0.1420316212209164, 0.2658485358056907, 0.0711740428121338, 0.16622141012412195, 0.13566327070490702, 0.1603520603967198, 0.16939270356108604, 0.22679738843076802, 0.19814881121442274, 0.17725633145644437, 0.16752340108009012, 0.15781945992981272, 0.17062617324198104, 0.1814020226159193, 0.17375881028988938, 0.17017240083753804, 0.16178045657852813, 0.16811390574130947, 0.06770914141475803, 0.061714167492443295, 0.06406532465497972, 0.06560357999669597, 0.07469521089279496, 0.07134115472793123, 0.07754399068243478, 0.07340929448741496, 0.07241274576772316]}, "mutation_prompt": null}
{"id": "b4cfaecc-ee6d-4355-bcde-791112b9e04a", "solution": "import numpy as np\n\nclass DynamicEnhancedAdaptiveFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.beta_max = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        def attractiveness(distance):\n            return self.beta_min + (self.beta_max - self.beta_min) * np.exp(-self.alpha * distance)\n\n        population = initialize_population()\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i, x in enumerate(population):\n                for j, y in enumerate(population):\n                    if func(y) < func(x):\n                        distance = np.linalg.norm(x - y)\n                        beta = attractiveness(distance)\n                        population[i] += beta * (y - x) + np.random.uniform(-1, 1, self.dim)\n                        \n                        # Introduce dynamic update of alpha and beta parameters with probability 0.2\n                        if np.random.rand() < 0.2:\n                            self.alpha = max(0.1, self.alpha - 0.001)  # Update alpha\n                            self.beta_max = min(1.0, self.beta_max + 0.001)  # Update beta_max\n\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "DynamicEnhancedAdaptiveFireflyAlgorithm", "description": "Dynamic Enhanced Adaptive Firefly Algorithm with Parameter Fine-tuning for Black Box Optimization.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "baa2cbc7-8cfd-4871-9c38-41f8dd4e4b7a", "metadata": {"aucs": [0.26364390636496104, 0.29300561854970686, 0.24428300964481153, 0.23939973834037565, 0.2467495273967748, 0.26842577731711703, 0.2522675017302819, 0.2575302638375875, 0.2534433022604047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0766572902498952, 0.07056466479399093, 0.06578702271483305, 0.09369028126931711, 0.060637128292857057, 0.06678864504557569, 0.06943100799359891, 0.07307976137468397, 0.07036514449132503, 0.06171576709414861, 0.04904287198228763, 0.08246375542491846, 0.06257926847592532, 0.04989649919135719, 0.04431647929424798, 0.05065140133167656, 0.048916498435184086, 0.0495503964402616, 0.4883742461836731, 0.438797396423358, 0.6545057569551385, 0.34697603929357623, 0.47435958221101304, 0.39859808836598754, 0.6193788045996, 0.44001113347465093, 0.6302589844516637, 0.16793892038650116, 0.10252009036107756, 0.09987720486596352, 0.121047571874901, 0.11763340472688066, 0.11625865848336547, 0.1356246793354332, 0.09309600868048729, 0.11877858216787152, 0.20402307215422266, 0.18490983246198334, 0.1709520884265341, 0.21821444656747946, 0.16914140677036538, 0.17078014268163566, 0.1558761893759092, 0.1841535022609182, 0.15539375732653005, 0.05290328663586297, 0.058834113316189374, 0.06591692747502842, 0.03506308158726679, 0.08924418486682517, 0.07072693820065012, 0.07115224276865717, 0.10152153358024407, 0.06697752281348912, 0.09386098741497895, 0.07748365124106371, 0.08217196954889971, 0.06983175475441328, 0.10505178312602659, 0.07801867073374891, 0.07775343961530512, 0.05224036851249769, 0.09806771101687484, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12398150754531767, 0.026480636305764582, 0.11478896716659581, 0.019086380616214926, 0.0161828490301128, 0.04050106751160998, 0.0867150097493814, 0.06488334398697693, 0.08639752643616172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019869943237855292, 0.01944212523972222, 0.015815757112356166, 0.01077290889299276, 0.02649369164242177, 0.028830915740590934, 0.016552138388776116, 0.01457563750241897, 0.015429613354437266, 0.26138697914426945, 0.2964367460518782, 0.2705358275238776, 0.2363047923767786, 0.23752972149408647, 0.26826311612543796, 0.2820805521637926, 0.2990888499920641, 0.2554615020060679, 0.043105578629359265, 0.049908296283156184, 0.05814680907210401, 0.08016906102129906, 0.06519261453445346, 0.07358581051356683, 0.07845656455166827, 0.05889698979439595, 0.07053570957632949, 0.13327066452466974, 0.09814141576203073, 0.15772301972180047, 0.11373195596335794, 0.13749110583312507, 0.12752428799988047, 0.13440857020395158, 0.13574770457305896, 0.15455810017287153, 0.1810063835233383, 0.20876263645822768, 0.21223146557973227, 0.20604597788649237, 0.1882590107662837, 0.1825867779225998, 0.19643944693496873, 0.21285253196428378, 0.19122403165871116, 0.14168823127513808, 0.15631695085224306, 0.15666447050044807, 0.14767419667062254, 0.15554310023751228, 0.1381305815445325, 0.13758691408236723, 0.15749124301824358, 0.14202412939285058, 0.17121653842431894, 0.1745285914678688, 0.2032437749718784, 0.1737192039170501, 0.17381486995128193, 0.17032802950556414, 0.17061395354215603, 0.18703140437326238, 0.17896722191941894, 0.17070396139874433, 0.16016577250744035, 0.16771681473151712, 0.16333663233234053, 0.16045287781870177, 0.15767035317445266, 0.16911301074068796, 0.159995264258192, 0.16601435832597833, 0.2609818842444396, 0.16877971831310246, 0.16656648627464987, 0.17539471573713727, 0.1410822591108416, 0.16489327285704036, 0.3442070313125376, 0.13313410618187738, 0.30734113901670657, 0.1420316212209164, 0.2658485358056907, 0.0711740428121338, 0.16622141012412195, 0.13566327070490702, 0.1603520603967198, 0.16939270356108604, 0.22679738843076802, 0.19814881121442274, 0.17725633145644437, 0.16752340108009012, 0.15781945992981272, 0.17062617324198104, 0.1814020226159193, 0.17375881028988938, 0.17017240083753804, 0.16178045657852813, 0.16811390574130947, 0.06770914141475803, 0.061714167492443295, 0.06406532465497972, 0.06560357999669597, 0.07469521089279496, 0.07134115472793123, 0.07754399068243478, 0.07340929448741496, 0.07241274576772316]}, "mutation_prompt": null}
{"id": "8e6f325e-ddff-475f-a823-e1ce331ecb12", "solution": "import numpy as np\n\nclass DynamicEnhancedAdaptiveFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.beta_max = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        def attractiveness(distance):\n            return self.beta_min + (self.beta_max - self.beta_min) * np.exp(-self.alpha * distance)\n\n        population = initialize_population()\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i, x in enumerate(population):\n                for j, y in enumerate(population):\n                    if func(y) < func(x):\n                        distance = np.linalg.norm(x - y)\n                        beta = attractiveness(distance)\n                        population[i] += beta * (y - x) + np.random.uniform(-1, 1, self.dim)\n                        \n                        # Introduce dynamic update of alpha and beta parameters with probability 0.2\n                        if np.random.rand() < 0.2:\n                            self.alpha = max(0.1, self.alpha - 0.001)  # Update alpha\n                            self.beta_max = min(1.0, self.beta_max + 0.001)  # Update beta_max\n\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "DynamicEnhancedAdaptiveFireflyAlgorithm", "description": "Dynamic Enhanced Adaptive Firefly Algorithm with Parameter Fine-tuning for Black Box Optimization.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "baa2cbc7-8cfd-4871-9c38-41f8dd4e4b7a", "metadata": {"aucs": [0.26364390636496104, 0.29300561854970686, 0.24428300964481153, 0.23939973834037565, 0.2467495273967748, 0.26842577731711703, 0.2522675017302819, 0.2575302638375875, 0.2534433022604047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0766572902498952, 0.07056466479399093, 0.06578702271483305, 0.09369028126931711, 0.060637128292857057, 0.06678864504557569, 0.06943100799359891, 0.07307976137468397, 0.07036514449132503, 0.06171576709414861, 0.04904287198228763, 0.08246375542491846, 0.06257926847592532, 0.04989649919135719, 0.04431647929424798, 0.05065140133167656, 0.048916498435184086, 0.0495503964402616, 0.4883742461836731, 0.438797396423358, 0.6545057569551385, 0.34697603929357623, 0.47435958221101304, 0.39859808836598754, 0.6193788045996, 0.44001113347465093, 0.6302589844516637, 0.16793892038650116, 0.10252009036107756, 0.09987720486596352, 0.121047571874901, 0.11763340472688066, 0.11625865848336547, 0.1356246793354332, 0.09309600868048729, 0.11877858216787152, 0.20402307215422266, 0.18490983246198334, 0.1709520884265341, 0.21821444656747946, 0.16914140677036538, 0.17078014268163566, 0.1558761893759092, 0.1841535022609182, 0.15539375732653005, 0.05290328663586297, 0.058834113316189374, 0.06591692747502842, 0.03506308158726679, 0.08924418486682517, 0.07072693820065012, 0.07115224276865717, 0.10152153358024407, 0.06697752281348912, 0.09386098741497895, 0.07748365124106371, 0.08217196954889971, 0.06983175475441328, 0.10505178312602659, 0.07801867073374891, 0.07775343961530512, 0.05224036851249769, 0.09806771101687484, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12398150754531767, 0.026480636305764582, 0.11478896716659581, 0.019086380616214926, 0.0161828490301128, 0.04050106751160998, 0.0867150097493814, 0.06488334398697693, 0.08639752643616172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019869943237855292, 0.01944212523972222, 0.015815757112356166, 0.01077290889299276, 0.02649369164242177, 0.028830915740590934, 0.016552138388776116, 0.01457563750241897, 0.015429613354437266, 0.26138697914426945, 0.2964367460518782, 0.2705358275238776, 0.2363047923767786, 0.23752972149408647, 0.26826311612543796, 0.2820805521637926, 0.2990888499920641, 0.2554615020060679, 0.043105578629359265, 0.049908296283156184, 0.05814680907210401, 0.08016906102129906, 0.06519261453445346, 0.07358581051356683, 0.07845656455166827, 0.05889698979439595, 0.07053570957632949, 0.13327066452466974, 0.09814141576203073, 0.15772301972180047, 0.11373195596335794, 0.13749110583312507, 0.12752428799988047, 0.13440857020395158, 0.13574770457305896, 0.15455810017287153, 0.1810063835233383, 0.20876263645822768, 0.21223146557973227, 0.20604597788649237, 0.1882590107662837, 0.1825867779225998, 0.19643944693496873, 0.21285253196428378, 0.19122403165871116, 0.14168823127513808, 0.15631695085224306, 0.15666447050044807, 0.14767419667062254, 0.15554310023751228, 0.1381305815445325, 0.13758691408236723, 0.15749124301824358, 0.14202412939285058, 0.17121653842431894, 0.1745285914678688, 0.2032437749718784, 0.1737192039170501, 0.17381486995128193, 0.17032802950556414, 0.17061395354215603, 0.18703140437326238, 0.17896722191941894, 0.17070396139874433, 0.16016577250744035, 0.16771681473151712, 0.16333663233234053, 0.16045287781870177, 0.15767035317445266, 0.16911301074068796, 0.159995264258192, 0.16601435832597833, 0.2609818842444396, 0.16877971831310246, 0.16656648627464987, 0.17539471573713727, 0.1410822591108416, 0.16489327285704036, 0.3442070313125376, 0.13313410618187738, 0.30734113901670657, 0.1420316212209164, 0.2658485358056907, 0.0711740428121338, 0.16622141012412195, 0.13566327070490702, 0.1603520603967198, 0.16939270356108604, 0.22679738843076802, 0.19814881121442274, 0.17725633145644437, 0.16752340108009012, 0.15781945992981272, 0.17062617324198104, 0.1814020226159193, 0.17375881028988938, 0.17017240083753804, 0.16178045657852813, 0.16811390574130947, 0.06770914141475803, 0.061714167492443295, 0.06406532465497972, 0.06560357999669597, 0.07469521089279496, 0.07134115472793123, 0.07754399068243478, 0.07340929448741496, 0.07241274576772316]}, "mutation_prompt": null}
{"id": "32e7ce34-8130-4548-91a3-1bd48e7587bd", "solution": "import numpy as np\n\nclass DynamicEnhancedAdaptiveFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.beta_max = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        def attractiveness(distance):\n            return self.beta_min + (self.beta_max - self.beta_min) * np.exp(-self.alpha * distance)\n\n        population = initialize_population()\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i, x in enumerate(population):\n                for j, y in enumerate(population):\n                    if func(y) < func(x):\n                        distance = np.linalg.norm(x - y)\n                        beta = attractiveness(distance)\n                        population[i] += beta * (y - x) + np.random.uniform(-1, 1, self.dim)\n                        \n                        # Introduce dynamic update of alpha and beta parameters with probability 0.2\n                        if np.random.rand() < 0.2:\n                            self.alpha = max(0.1, self.alpha - 0.001)  # Update alpha\n                            self.beta_max = min(1.0, self.beta_max + 0.001)  # Update beta_max\n\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "DynamicEnhancedAdaptiveFireflyAlgorithm", "description": "Dynamic Enhanced Adaptive Firefly Algorithm with Parameter Fine-tuning for Black Box Optimization.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "baa2cbc7-8cfd-4871-9c38-41f8dd4e4b7a", "metadata": {"aucs": [0.26364390636496104, 0.29300561854970686, 0.24428300964481153, 0.23939973834037565, 0.2467495273967748, 0.26842577731711703, 0.2522675017302819, 0.2575302638375875, 0.2534433022604047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0766572902498952, 0.07056466479399093, 0.06578702271483305, 0.09369028126931711, 0.060637128292857057, 0.06678864504557569, 0.06943100799359891, 0.07307976137468397, 0.07036514449132503, 0.06171576709414861, 0.04904287198228763, 0.08246375542491846, 0.06257926847592532, 0.04989649919135719, 0.04431647929424798, 0.05065140133167656, 0.048916498435184086, 0.0495503964402616, 0.4883742461836731, 0.438797396423358, 0.6545057569551385, 0.34697603929357623, 0.47435958221101304, 0.39859808836598754, 0.6193788045996, 0.44001113347465093, 0.6302589844516637, 0.16793892038650116, 0.10252009036107756, 0.09987720486596352, 0.121047571874901, 0.11763340472688066, 0.11625865848336547, 0.1356246793354332, 0.09309600868048729, 0.11877858216787152, 0.20402307215422266, 0.18490983246198334, 0.1709520884265341, 0.21821444656747946, 0.16914140677036538, 0.17078014268163566, 0.1558761893759092, 0.1841535022609182, 0.15539375732653005, 0.05290328663586297, 0.058834113316189374, 0.06591692747502842, 0.03506308158726679, 0.08924418486682517, 0.07072693820065012, 0.07115224276865717, 0.10152153358024407, 0.06697752281348912, 0.09386098741497895, 0.07748365124106371, 0.08217196954889971, 0.06983175475441328, 0.10505178312602659, 0.07801867073374891, 0.07775343961530512, 0.05224036851249769, 0.09806771101687484, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12398150754531767, 0.026480636305764582, 0.11478896716659581, 0.019086380616214926, 0.0161828490301128, 0.04050106751160998, 0.0867150097493814, 0.06488334398697693, 0.08639752643616172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019869943237855292, 0.01944212523972222, 0.015815757112356166, 0.01077290889299276, 0.02649369164242177, 0.028830915740590934, 0.016552138388776116, 0.01457563750241897, 0.015429613354437266, 0.26138697914426945, 0.2964367460518782, 0.2705358275238776, 0.2363047923767786, 0.23752972149408647, 0.26826311612543796, 0.2820805521637926, 0.2990888499920641, 0.2554615020060679, 0.043105578629359265, 0.049908296283156184, 0.05814680907210401, 0.08016906102129906, 0.06519261453445346, 0.07358581051356683, 0.07845656455166827, 0.05889698979439595, 0.07053570957632949, 0.13327066452466974, 0.09814141576203073, 0.15772301972180047, 0.11373195596335794, 0.13749110583312507, 0.12752428799988047, 0.13440857020395158, 0.13574770457305896, 0.15455810017287153, 0.1810063835233383, 0.20876263645822768, 0.21223146557973227, 0.20604597788649237, 0.1882590107662837, 0.1825867779225998, 0.19643944693496873, 0.21285253196428378, 0.19122403165871116, 0.14168823127513808, 0.15631695085224306, 0.15666447050044807, 0.14767419667062254, 0.15554310023751228, 0.1381305815445325, 0.13758691408236723, 0.15749124301824358, 0.14202412939285058, 0.17121653842431894, 0.1745285914678688, 0.2032437749718784, 0.1737192039170501, 0.17381486995128193, 0.17032802950556414, 0.17061395354215603, 0.18703140437326238, 0.17896722191941894, 0.17070396139874433, 0.16016577250744035, 0.16771681473151712, 0.16333663233234053, 0.16045287781870177, 0.15767035317445266, 0.16911301074068796, 0.159995264258192, 0.16601435832597833, 0.2609818842444396, 0.16877971831310246, 0.16656648627464987, 0.17539471573713727, 0.1410822591108416, 0.16489327285704036, 0.3442070313125376, 0.13313410618187738, 0.30734113901670657, 0.1420316212209164, 0.2658485358056907, 0.0711740428121338, 0.16622141012412195, 0.13566327070490702, 0.1603520603967198, 0.16939270356108604, 0.22679738843076802, 0.19814881121442274, 0.17725633145644437, 0.16752340108009012, 0.15781945992981272, 0.17062617324198104, 0.1814020226159193, 0.17375881028988938, 0.17017240083753804, 0.16178045657852813, 0.16811390574130947, 0.06770914141475803, 0.061714167492443295, 0.06406532465497972, 0.06560357999669597, 0.07469521089279496, 0.07134115472793123, 0.07754399068243478, 0.07340929448741496, 0.07241274576772316]}, "mutation_prompt": null}
{"id": "45ed13e8-1f03-4c98-a161-dc6b839faa50", "solution": "import numpy as np\n\nclass EnhancedDynamicEnhancedAdaptiveFireflyAlgorithm(DynamicEnhancedAdaptiveFireflyAlgorithm):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        def attractiveness(distance):\n            return self.beta_min + (self.beta_max - self.beta_min) * np.exp(-self.alpha * distance)\n\n        population = initialize_population()\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i, x in enumerate(population):\n                for j, y in enumerate(population):\n                    if func(y) < func(x):\n                        distance = np.linalg.norm(x - y)\n                        beta = attractiveness(distance)\n                        population[i] += beta * (y - x) + np.random.uniform(-1, 1, self.dim)\n\n                        # Introduce dynamic update of alpha and beta parameters with probability 0.2\n                        if np.random.rand() < 0.2:\n                            self.alpha = max(0.1, self.alpha - 0.001)  # Update alpha\n                            self.beta_max = min(1.0, self.beta_max + 0.001)  # Update beta_max\n\n                            # Add individual line refinements here\n                            # For example, a possible refinement could be:\n                            # self.population_size += 1\n\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "EnhancedDynamicEnhancedAdaptiveFireflyAlgorithm", "description": "Enhancing Dynamic Enhanced Adaptive Firefly Algorithm through Parameter Refinement for Black Box Optimization.", "configspace": "", "generation": 62, "fitness": 0.1326966823857367, "feedback": "The algorithm EnhancedDynamicEnhancedAdaptiveFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.11.", "error": "", "parent_id": "baa2cbc7-8cfd-4871-9c38-41f8dd4e4b7a", "metadata": {"aucs": [0.26364390636496104, 0.29300561854970686, 0.24428300964481153, 0.23939973834037565, 0.2467495273967748, 0.26842577731711703, 0.2522675017302819, 0.2575302638375875, 0.2534433022604047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0766572902498952, 0.07056466479399093, 0.06578702271483305, 0.09369028126931711, 0.060637128292857057, 0.06678864504557569, 0.06943100799359891, 0.07307976137468397, 0.07036514449132503, 0.06171576709414861, 0.04904287198228763, 0.08246375542491846, 0.06257926847592532, 0.04989649919135719, 0.04431647929424798, 0.05065140133167656, 0.048916498435184086, 0.0495503964402616, 0.4883742461836731, 0.438797396423358, 0.6545057569551385, 0.34697603929357623, 0.47435958221101304, 0.39859808836598754, 0.6193788045996, 0.44001113347465093, 0.6302589844516637, 0.16793892038650116, 0.10252009036107756, 0.09987720486596352, 0.121047571874901, 0.11763340472688066, 0.11625865848336547, 0.1356246793354332, 0.09309600868048729, 0.11877858216787152, 0.20402307215422266, 0.18490983246198334, 0.1709520884265341, 0.21821444656747946, 0.16914140677036538, 0.17078014268163566, 0.1558761893759092, 0.1841535022609182, 0.15539375732653005, 0.05290328663586297, 0.058834113316189374, 0.06591692747502842, 0.03506308158726679, 0.08924418486682517, 0.07072693820065012, 0.07115224276865717, 0.10152153358024407, 0.06697752281348912, 0.09386098741497895, 0.07748365124106371, 0.08217196954889971, 0.06983175475441328, 0.10505178312602659, 0.07801867073374891, 0.07775343961530512, 0.05224036851249769, 0.09806771101687484, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12398150754531767, 0.026480636305764582, 0.11478896716659581, 0.019086380616214926, 0.0161828490301128, 0.04050106751160998, 0.0867150097493814, 0.06488334398697693, 0.08639752643616172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019869943237855292, 0.01944212523972222, 0.015815757112356166, 0.01077290889299276, 0.02649369164242177, 0.028830915740590934, 0.016552138388776116, 0.01457563750241897, 0.015429613354437266, 0.26138697914426945, 0.2964367460518782, 0.2705358275238776, 0.2363047923767786, 0.23752972149408647, 0.26826311612543796, 0.2820805521637926, 0.2990888499920641, 0.2554615020060679, 0.043105578629359265, 0.049908296283156184, 0.05814680907210401, 0.08016906102129906, 0.06519261453445346, 0.07358581051356683, 0.07845656455166827, 0.05889698979439595, 0.07053570957632949, 0.13327066452466974, 0.09814141576203073, 0.15772301972180047, 0.11373195596335794, 0.13749110583312507, 0.12752428799988047, 0.13440857020395158, 0.13574770457305896, 0.15455810017287153, 0.1810063835233383, 0.20876263645822768, 0.21223146557973227, 0.20604597788649237, 0.1882590107662837, 0.1825867779225998, 0.19643944693496873, 0.21285253196428378, 0.19122403165871116, 0.14168823127513808, 0.15631695085224306, 0.15666447050044807, 0.14767419667062254, 0.15554310023751228, 0.1381305815445325, 0.13758691408236723, 0.15749124301824358, 0.14202412939285058, 0.17121653842431894, 0.1745285914678688, 0.2032437749718784, 0.1737192039170501, 0.17381486995128193, 0.17032802950556414, 0.17061395354215603, 0.18703140437326238, 0.17896722191941894, 0.17070396139874433, 0.16016577250744035, 0.16771681473151712, 0.16333663233234053, 0.16045287781870177, 0.15767035317445266, 0.16911301074068796, 0.159995264258192, 0.16601435832597833, 0.2609818842444396, 0.16877971831310246, 0.16656648627464987, 0.17539471573713727, 0.1410822591108416, 0.16489327285704036, 0.3442070313125376, 0.13313410618187738, 0.30734113901670657, 0.1420316212209164, 0.2658485358056907, 0.0711740428121338, 0.16622141012412195, 0.13566327070490702, 0.1603520603967198, 0.16939270356108604, 0.22679738843076802, 0.19814881121442274, 0.17725633145644437, 0.16752340108009012, 0.15781945992981272, 0.17062617324198104, 0.1814020226159193, 0.17375881028988938, 0.17017240083753804, 0.16178045657852813, 0.16811390574130947, 0.06770914141475803, 0.061714167492443295, 0.06406532465497972, 0.06560357999669597, 0.07469521089279496, 0.07134115472793123, 0.07754399068243478, 0.07340929448741496, 0.07241274576772316]}, "mutation_prompt": null}
{"id": "e32e51a2-46c2-46ea-b357-ca6045f74a22", "solution": "import numpy as np\n\nclass DynamicEnhancedAdaptiveFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.beta_max = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        def attractiveness(distance):\n            return self.beta_min + (self.beta_max - self.beta_min) * np.exp(-self.alpha * distance)\n\n        population = initialize_population()\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i, x in enumerate(population):\n                for j, y in enumerate(population):\n                    if func(y) < func(x):\n                        distance = np.linalg.norm(x - y)\n                        beta = attractiveness(distance)\n                        population[i] += beta * (y - x) + np.random.uniform(-1, 1, self.dim)\n                        \n                        # Introduce dynamic update of alpha and beta parameters with probability 0.2\n                        if np.random.rand() < 0.2:\n                            self.alpha = max(0.1, self.alpha - 0.001)  # Update alpha\n                            self.beta_max = min(1.0, self.beta_max + 0.001)  # Update beta_max\n\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "DynamicEnhancedAdaptiveFireflyAlgorithm", "description": "Dynamic Enhanced Adaptive Firefly Algorithm with Parameter Fine-tuning for Black Box Optimization.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "baa2cbc7-8cfd-4871-9c38-41f8dd4e4b7a", "metadata": {"aucs": [0.26364390636496104, 0.29300561854970686, 0.24428300964481153, 0.23939973834037565, 0.2467495273967748, 0.26842577731711703, 0.2522675017302819, 0.2575302638375875, 0.2534433022604047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0766572902498952, 0.07056466479399093, 0.06578702271483305, 0.09369028126931711, 0.060637128292857057, 0.06678864504557569, 0.06943100799359891, 0.07307976137468397, 0.07036514449132503, 0.06171576709414861, 0.04904287198228763, 0.08246375542491846, 0.06257926847592532, 0.04989649919135719, 0.04431647929424798, 0.05065140133167656, 0.048916498435184086, 0.0495503964402616, 0.4883742461836731, 0.438797396423358, 0.6545057569551385, 0.34697603929357623, 0.47435958221101304, 0.39859808836598754, 0.6193788045996, 0.44001113347465093, 0.6302589844516637, 0.16793892038650116, 0.10252009036107756, 0.09987720486596352, 0.121047571874901, 0.11763340472688066, 0.11625865848336547, 0.1356246793354332, 0.09309600868048729, 0.11877858216787152, 0.20402307215422266, 0.18490983246198334, 0.1709520884265341, 0.21821444656747946, 0.16914140677036538, 0.17078014268163566, 0.1558761893759092, 0.1841535022609182, 0.15539375732653005, 0.05290328663586297, 0.058834113316189374, 0.06591692747502842, 0.03506308158726679, 0.08924418486682517, 0.07072693820065012, 0.07115224276865717, 0.10152153358024407, 0.06697752281348912, 0.09386098741497895, 0.07748365124106371, 0.08217196954889971, 0.06983175475441328, 0.10505178312602659, 0.07801867073374891, 0.07775343961530512, 0.05224036851249769, 0.09806771101687484, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12398150754531767, 0.026480636305764582, 0.11478896716659581, 0.019086380616214926, 0.0161828490301128, 0.04050106751160998, 0.0867150097493814, 0.06488334398697693, 0.08639752643616172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019869943237855292, 0.01944212523972222, 0.015815757112356166, 0.01077290889299276, 0.02649369164242177, 0.028830915740590934, 0.016552138388776116, 0.01457563750241897, 0.015429613354437266, 0.26138697914426945, 0.2964367460518782, 0.2705358275238776, 0.2363047923767786, 0.23752972149408647, 0.26826311612543796, 0.2820805521637926, 0.2990888499920641, 0.2554615020060679, 0.043105578629359265, 0.049908296283156184, 0.05814680907210401, 0.08016906102129906, 0.06519261453445346, 0.07358581051356683, 0.07845656455166827, 0.05889698979439595, 0.07053570957632949, 0.13327066452466974, 0.09814141576203073, 0.15772301972180047, 0.11373195596335794, 0.13749110583312507, 0.12752428799988047, 0.13440857020395158, 0.13574770457305896, 0.15455810017287153, 0.1810063835233383, 0.20876263645822768, 0.21223146557973227, 0.20604597788649237, 0.1882590107662837, 0.1825867779225998, 0.19643944693496873, 0.21285253196428378, 0.19122403165871116, 0.14168823127513808, 0.15631695085224306, 0.15666447050044807, 0.14767419667062254, 0.15554310023751228, 0.1381305815445325, 0.13758691408236723, 0.15749124301824358, 0.14202412939285058, 0.17121653842431894, 0.1745285914678688, 0.2032437749718784, 0.1737192039170501, 0.17381486995128193, 0.17032802950556414, 0.17061395354215603, 0.18703140437326238, 0.17896722191941894, 0.17070396139874433, 0.16016577250744035, 0.16771681473151712, 0.16333663233234053, 0.16045287781870177, 0.15767035317445266, 0.16911301074068796, 0.159995264258192, 0.16601435832597833, 0.2609818842444396, 0.16877971831310246, 0.16656648627464987, 0.17539471573713727, 0.1410822591108416, 0.16489327285704036, 0.3442070313125376, 0.13313410618187738, 0.30734113901670657, 0.1420316212209164, 0.2658485358056907, 0.0711740428121338, 0.16622141012412195, 0.13566327070490702, 0.1603520603967198, 0.16939270356108604, 0.22679738843076802, 0.19814881121442274, 0.17725633145644437, 0.16752340108009012, 0.15781945992981272, 0.17062617324198104, 0.1814020226159193, 0.17375881028988938, 0.17017240083753804, 0.16178045657852813, 0.16811390574130947, 0.06770914141475803, 0.061714167492443295, 0.06406532465497972, 0.06560357999669597, 0.07469521089279496, 0.07134115472793123, 0.07754399068243478, 0.07340929448741496, 0.07241274576772316]}, "mutation_prompt": null}
{"id": "e02fd266-24d9-44b8-b88f-8db01da0eb88", "solution": "import numpy as np\n\nclass DynamicEnhancedAdaptiveFireflyAlgorithmRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.beta_max = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        def attractiveness(distance):\n            return self.beta_min + (self.beta_max - self.beta_min) * np.exp(-self.alpha * distance)\n\n        population = initialize_population()\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i, x in enumerate(population):\n                for j, y in enumerate(population):\n                    if func(y) < func(x):\n                        distance = np.linalg.norm(x - y)\n                        beta = attractiveness(distance)\n                        population[i] += beta * (y - x) + np.random.uniform(-1, 1, self.dim)\n                        \n                        # Introduce probability-based refinement of alpha and beta\n                        if np.random.rand() < 0.2:\n                            if np.random.rand() < 0.5:\n                                self.alpha = max(0.1, self.alpha - 0.001)  # Update alpha downwards\n                            else:\n                                self.alpha = min(0.5, self.alpha + 0.001)  # Update alpha upwards\n                            \n                            if np.random.rand() < 0.5:\n                                self.beta_max = min(1.0, self.beta_max + 0.001)  # Update beta_max upwards\n                            else:\n                                self.beta_max = max(0.6, self.beta_max - 0.001)  # Update beta_max downwards\n\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "DynamicEnhancedAdaptiveFireflyAlgorithmRefined", "description": "Introducing Variable Alpha and Beta Firefly Algorithm with Enhanced Exploration and Parameter Adaptation for Black Box Optimization.", "configspace": "", "generation": 64, "fitness": 0.12893377076575205, "feedback": "The algorithm DynamicEnhancedAdaptiveFireflyAlgorithmRefined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.11.", "error": "", "parent_id": "baa2cbc7-8cfd-4871-9c38-41f8dd4e4b7a", "metadata": {"aucs": [0.25782044882393707, 0.25881316807258425, 0.2612334668566757, 0.25633174691700145, 0.3005130902734431, 0.27544309882089224, 0.24269161636703884, 0.2294471840255694, 0.23607414453154052, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07421803297739438, 0.07055787851479767, 0.05872129752526367, 0.0774466686132691, 0.06864904328509436, 0.06824324185873176, 0.062373616267976995, 0.07713450815024936, 0.08089336249919599, 0.06154102192837396, 0.04508218033788147, 0.051178967788394814, 0.0559535200759268, 0.07189854364306081, 0.05720160598074331, 0.06492531019692271, 0.050986744341106505, 0.046846979953795054, 0.47380942401540616, 0.2817755904874525, 0.4071938299445116, 0.45248526402590883, 0.3870695772988082, 0.6326488075784744, 0.5201804565757281, 0.4239997612774321, 0.5705847223667319, 0.12341577617066701, 0.08615545604456276, 0.12299207429689363, 0.11020822542780628, 0.11665445763956739, 0.14948824495802127, 0.14571135460904006, 0.0990655661236457, 0.11515155133566257, 0.19123854396439632, 0.21097690457507812, 0.14712535232685786, 0.16396433116764675, 0.17026051186839086, 0.17649753948654834, 0.15928647122818584, 0.18873875892708236, 0.15281633121842064, 0.028836186039688072, 0.08134003268979773, 0.08512094620390631, 0.058914453886372176, 0.08986239212396308, 0.050706046389013326, 0.05974735476545412, 0.06818938979576072, 0.09342546769501348, 0.09632004362593394, 0.074646268883103, 0.08912594105578941, 0.06820017164249781, 0.0787461522377747, 0.0821451580342678, 0.08756815001583129, 0.056945987141985954, 0.0885325095371523, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11427523362044434, 0.04264664360680814, 0.1062545860988996, 0.024550567412631286, 0.021093428412498172, 0.021918926850515663, 0.0753896160423696, 0.040436280293120075, 0.044807857427411335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018050317792860926, 0.025287440043888276, 0.03442962469151212, 0.015100182247048344, 0.02562375581911225, 0.02017241429902006, 0.01463437945470214, 0.022075854066300415, 0.019039090561208782, 0.2796358863440087, 0.2713826169898067, 0.25880993638733263, 0.2374759199774139, 0.26127416069924125, 0.24994475597601895, 0.3101183569795052, 0.2650883421167284, 0.24979889825687873, 0.05941190086955461, 0.057276309498567435, 0.06959832525561449, 0.08072668130893523, 0.0673768593296471, 0.08184379619260651, 0.06618415752017737, 0.05902592063591272, 0.08517951787732292, 0.11596138872020034, 0.13411053161582986, 0.1204592953914766, 0.11993817175255828, 0.12747791474008607, 0.11065535703722906, 0.11077034271392427, 0.13638761144736367, 0.1152592977357213, 0.17088624638553906, 0.18566299636639083, 0.20318357060012504, 0.21818493193616018, 0.20096013222436593, 0.1910980216590228, 0.18964341839677246, 0.21934546736504512, 0.20175758884012418, 0.14988954120378328, 0.12891778711256063, 0.1680898702809358, 0.1363465083181301, 0.1337399076610003, 0.12667209194510487, 0.1401616894976605, 0.16601792675979465, 0.14525114177353204, 0.192246237812009, 0.18453652751270244, 0.17378017132305945, 0.1834568309293214, 0.19341321272284573, 0.180026298710115, 0.19366031105867199, 0.16661479664896384, 0.17665562794086964, 0.16353444112300708, 0.1626323083699457, 0.1636753499630318, 0.1647602619889862, 0.15401069719214977, 0.16415070202858928, 0.14485670420587615, 0.17152771441095427, 0.16061463151441835, 0.16503767810226055, 0.1709147200125153, 0.1681985212646323, 0.25915355270400897, 0.16884091298758663, 0.10843812923321694, 0.33684312082909296, 0.11855000934394211, 0.15079887857267749, 0.22767501177565863, 0.27454848829313583, 0.07215138898963236, 0.16352922866948305, 0.13004699856792667, 0.126796915708125, 0.09539757944906846, 0.20742449481672376, 0.22362518531030207, 0.16536577538348485, 0.17407237278432985, 0.17179803081538925, 0.16360810333622033, 0.15837857545354694, 0.160167513080527, 0.18136400181503098, 0.1756600092252515, 0.17073055277248528, 0.05950641732610473, 0.0756751555763574, 0.06938363175222584, 0.07062422856562278, 0.0712288121201955, 0.07238850398190266, 0.06950478046056996, 0.06366423573892843, 0.06889482936361124]}, "mutation_prompt": null}
{"id": "11098a8d-421a-41d6-9dc9-87c123f2ebb0", "solution": "import numpy as np\n\nclass DynamicEnhancedAdaptiveFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.beta_max = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        def attractiveness(distance):\n            return self.beta_min + (self.beta_max - self.beta_min) * np.exp(-self.alpha * distance)\n\n        population = initialize_population()\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i, x in enumerate(population):\n                for j, y in enumerate(population):\n                    if func(y) < func(x):\n                        distance = np.linalg.norm(x - y)\n                        beta = attractiveness(distance)\n                        population[i] += beta * (y - x) + np.random.uniform(-1, 1, self.dim)\n                        \n                        # Introduce dynamic update of alpha and beta parameters with probability 0.2\n                        if np.random.rand() < 0.2:\n                            self.alpha = max(0.1, self.alpha - 0.001)  # Update alpha\n                            self.beta_max = min(1.0, self.beta_max + 0.001)  # Update beta_max\n\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "DynamicEnhancedAdaptiveFireflyAlgorithm", "description": "Dynamic Enhanced Adaptive Firefly Algorithm with Parameter Fine-tuning for Black Box Optimization.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "baa2cbc7-8cfd-4871-9c38-41f8dd4e4b7a", "metadata": {"aucs": [0.26364390636496104, 0.29300561854970686, 0.24428300964481153, 0.23939973834037565, 0.2467495273967748, 0.26842577731711703, 0.2522675017302819, 0.2575302638375875, 0.2534433022604047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0766572902498952, 0.07056466479399093, 0.06578702271483305, 0.09369028126931711, 0.060637128292857057, 0.06678864504557569, 0.06943100799359891, 0.07307976137468397, 0.07036514449132503, 0.06171576709414861, 0.04904287198228763, 0.08246375542491846, 0.06257926847592532, 0.04989649919135719, 0.04431647929424798, 0.05065140133167656, 0.048916498435184086, 0.0495503964402616, 0.4883742461836731, 0.438797396423358, 0.6545057569551385, 0.34697603929357623, 0.47435958221101304, 0.39859808836598754, 0.6193788045996, 0.44001113347465093, 0.6302589844516637, 0.16793892038650116, 0.10252009036107756, 0.09987720486596352, 0.121047571874901, 0.11763340472688066, 0.11625865848336547, 0.1356246793354332, 0.09309600868048729, 0.11877858216787152, 0.20402307215422266, 0.18490983246198334, 0.1709520884265341, 0.21821444656747946, 0.16914140677036538, 0.17078014268163566, 0.1558761893759092, 0.1841535022609182, 0.15539375732653005, 0.05290328663586297, 0.058834113316189374, 0.06591692747502842, 0.03506308158726679, 0.08924418486682517, 0.07072693820065012, 0.07115224276865717, 0.10152153358024407, 0.06697752281348912, 0.09386098741497895, 0.07748365124106371, 0.08217196954889971, 0.06983175475441328, 0.10505178312602659, 0.07801867073374891, 0.07775343961530512, 0.05224036851249769, 0.09806771101687484, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12398150754531767, 0.026480636305764582, 0.11478896716659581, 0.019086380616214926, 0.0161828490301128, 0.04050106751160998, 0.0867150097493814, 0.06488334398697693, 0.08639752643616172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019869943237855292, 0.01944212523972222, 0.015815757112356166, 0.01077290889299276, 0.02649369164242177, 0.028830915740590934, 0.016552138388776116, 0.01457563750241897, 0.015429613354437266, 0.26138697914426945, 0.2964367460518782, 0.2705358275238776, 0.2363047923767786, 0.23752972149408647, 0.26826311612543796, 0.2820805521637926, 0.2990888499920641, 0.2554615020060679, 0.043105578629359265, 0.049908296283156184, 0.05814680907210401, 0.08016906102129906, 0.06519261453445346, 0.07358581051356683, 0.07845656455166827, 0.05889698979439595, 0.07053570957632949, 0.13327066452466974, 0.09814141576203073, 0.15772301972180047, 0.11373195596335794, 0.13749110583312507, 0.12752428799988047, 0.13440857020395158, 0.13574770457305896, 0.15455810017287153, 0.1810063835233383, 0.20876263645822768, 0.21223146557973227, 0.20604597788649237, 0.1882590107662837, 0.1825867779225998, 0.19643944693496873, 0.21285253196428378, 0.19122403165871116, 0.14168823127513808, 0.15631695085224306, 0.15666447050044807, 0.14767419667062254, 0.15554310023751228, 0.1381305815445325, 0.13758691408236723, 0.15749124301824358, 0.14202412939285058, 0.17121653842431894, 0.1745285914678688, 0.2032437749718784, 0.1737192039170501, 0.17381486995128193, 0.17032802950556414, 0.17061395354215603, 0.18703140437326238, 0.17896722191941894, 0.17070396139874433, 0.16016577250744035, 0.16771681473151712, 0.16333663233234053, 0.16045287781870177, 0.15767035317445266, 0.16911301074068796, 0.159995264258192, 0.16601435832597833, 0.2609818842444396, 0.16877971831310246, 0.16656648627464987, 0.17539471573713727, 0.1410822591108416, 0.16489327285704036, 0.3442070313125376, 0.13313410618187738, 0.30734113901670657, 0.1420316212209164, 0.2658485358056907, 0.0711740428121338, 0.16622141012412195, 0.13566327070490702, 0.1603520603967198, 0.16939270356108604, 0.22679738843076802, 0.19814881121442274, 0.17725633145644437, 0.16752340108009012, 0.15781945992981272, 0.17062617324198104, 0.1814020226159193, 0.17375881028988938, 0.17017240083753804, 0.16178045657852813, 0.16811390574130947, 0.06770914141475803, 0.061714167492443295, 0.06406532465497972, 0.06560357999669597, 0.07469521089279496, 0.07134115472793123, 0.07754399068243478, 0.07340929448741496, 0.07241274576772316]}, "mutation_prompt": null}
{"id": "aa12eb68-37ba-4f38-990e-e8ce23950406", "solution": "import numpy as np\n\nclass DynamicEnhancedAdaptiveFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.beta_max = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        def attractiveness(distance):\n            return self.beta_min + (self.beta_max - self.beta_min) * np.exp(-self.alpha * distance)\n\n        population = initialize_population()\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i, x in enumerate(population):\n                for j, y in enumerate(population):\n                    if func(y) < func(x):\n                        distance = np.linalg.norm(x - y)\n                        beta = attractiveness(distance)\n                        population[i] += beta * (y - x) + np.random.uniform(-1, 1, self.dim)\n                        \n                        # Introduce dynamic update of alpha and beta parameters with probability 0.2\n                        if np.random.rand() < 0.2:\n                            self.alpha = max(0.1, self.alpha - 0.001)  # Update alpha\n                            self.beta_max = min(1.0, self.beta_max + 0.001)  # Update beta_max\n\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "DynamicEnhancedAdaptiveFireflyAlgorithm", "description": "Dynamic Enhanced Adaptive Firefly Algorithm with Parameter Fine-tuning for Black Box Optimization.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "baa2cbc7-8cfd-4871-9c38-41f8dd4e4b7a", "metadata": {"aucs": [0.26364390636496104, 0.29300561854970686, 0.24428300964481153, 0.23939973834037565, 0.2467495273967748, 0.26842577731711703, 0.2522675017302819, 0.2575302638375875, 0.2534433022604047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0766572902498952, 0.07056466479399093, 0.06578702271483305, 0.09369028126931711, 0.060637128292857057, 0.06678864504557569, 0.06943100799359891, 0.07307976137468397, 0.07036514449132503, 0.06171576709414861, 0.04904287198228763, 0.08246375542491846, 0.06257926847592532, 0.04989649919135719, 0.04431647929424798, 0.05065140133167656, 0.048916498435184086, 0.0495503964402616, 0.4883742461836731, 0.438797396423358, 0.6545057569551385, 0.34697603929357623, 0.47435958221101304, 0.39859808836598754, 0.6193788045996, 0.44001113347465093, 0.6302589844516637, 0.16793892038650116, 0.10252009036107756, 0.09987720486596352, 0.121047571874901, 0.11763340472688066, 0.11625865848336547, 0.1356246793354332, 0.09309600868048729, 0.11877858216787152, 0.20402307215422266, 0.18490983246198334, 0.1709520884265341, 0.21821444656747946, 0.16914140677036538, 0.17078014268163566, 0.1558761893759092, 0.1841535022609182, 0.15539375732653005, 0.05290328663586297, 0.058834113316189374, 0.06591692747502842, 0.03506308158726679, 0.08924418486682517, 0.07072693820065012, 0.07115224276865717, 0.10152153358024407, 0.06697752281348912, 0.09386098741497895, 0.07748365124106371, 0.08217196954889971, 0.06983175475441328, 0.10505178312602659, 0.07801867073374891, 0.07775343961530512, 0.05224036851249769, 0.09806771101687484, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12398150754531767, 0.026480636305764582, 0.11478896716659581, 0.019086380616214926, 0.0161828490301128, 0.04050106751160998, 0.0867150097493814, 0.06488334398697693, 0.08639752643616172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019869943237855292, 0.01944212523972222, 0.015815757112356166, 0.01077290889299276, 0.02649369164242177, 0.028830915740590934, 0.016552138388776116, 0.01457563750241897, 0.015429613354437266, 0.26138697914426945, 0.2964367460518782, 0.2705358275238776, 0.2363047923767786, 0.23752972149408647, 0.26826311612543796, 0.2820805521637926, 0.2990888499920641, 0.2554615020060679, 0.043105578629359265, 0.049908296283156184, 0.05814680907210401, 0.08016906102129906, 0.06519261453445346, 0.07358581051356683, 0.07845656455166827, 0.05889698979439595, 0.07053570957632949, 0.13327066452466974, 0.09814141576203073, 0.15772301972180047, 0.11373195596335794, 0.13749110583312507, 0.12752428799988047, 0.13440857020395158, 0.13574770457305896, 0.15455810017287153, 0.1810063835233383, 0.20876263645822768, 0.21223146557973227, 0.20604597788649237, 0.1882590107662837, 0.1825867779225998, 0.19643944693496873, 0.21285253196428378, 0.19122403165871116, 0.14168823127513808, 0.15631695085224306, 0.15666447050044807, 0.14767419667062254, 0.15554310023751228, 0.1381305815445325, 0.13758691408236723, 0.15749124301824358, 0.14202412939285058, 0.17121653842431894, 0.1745285914678688, 0.2032437749718784, 0.1737192039170501, 0.17381486995128193, 0.17032802950556414, 0.17061395354215603, 0.18703140437326238, 0.17896722191941894, 0.17070396139874433, 0.16016577250744035, 0.16771681473151712, 0.16333663233234053, 0.16045287781870177, 0.15767035317445266, 0.16911301074068796, 0.159995264258192, 0.16601435832597833, 0.2609818842444396, 0.16877971831310246, 0.16656648627464987, 0.17539471573713727, 0.1410822591108416, 0.16489327285704036, 0.3442070313125376, 0.13313410618187738, 0.30734113901670657, 0.1420316212209164, 0.2658485358056907, 0.0711740428121338, 0.16622141012412195, 0.13566327070490702, 0.1603520603967198, 0.16939270356108604, 0.22679738843076802, 0.19814881121442274, 0.17725633145644437, 0.16752340108009012, 0.15781945992981272, 0.17062617324198104, 0.1814020226159193, 0.17375881028988938, 0.17017240083753804, 0.16178045657852813, 0.16811390574130947, 0.06770914141475803, 0.061714167492443295, 0.06406532465497972, 0.06560357999669597, 0.07469521089279496, 0.07134115472793123, 0.07754399068243478, 0.07340929448741496, 0.07241274576772316]}, "mutation_prompt": null}
{"id": "8d0fff01-5f26-4a1b-a3a7-77782e275a4e", "solution": "import numpy as np\n\nclass DynamicEnhancedAdaptiveFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.beta_max = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        def attractiveness(distance):\n            return self.beta_min + (self.beta_max - self.beta_min) * np.exp(-self.alpha * distance)\n\n        population = initialize_population()\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i, x in enumerate(population):\n                for j, y in enumerate(population):\n                    if func(y) < func(x):\n                        distance = np.linalg.norm(x - y)\n                        beta = attractiveness(distance)\n                        population[i] += beta * (y - x) + np.random.uniform(-1, 1, self.dim)\n                        \n                        # Introduce dynamic update of alpha and beta parameters with probability 0.2\n                        if np.random.rand() < 0.2:\n                            self.alpha = max(0.1, self.alpha - 0.001)  # Update alpha\n                            self.beta_max = min(1.0, self.beta_max + 0.001)  # Update beta_max\n\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "DynamicEnhancedAdaptiveFireflyAlgorithm", "description": "Dynamic Enhanced Adaptive Firefly Algorithm with Parameter Fine-tuning for Black Box Optimization.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "baa2cbc7-8cfd-4871-9c38-41f8dd4e4b7a", "metadata": {"aucs": [0.26364390636496104, 0.29300561854970686, 0.24428300964481153, 0.23939973834037565, 0.2467495273967748, 0.26842577731711703, 0.2522675017302819, 0.2575302638375875, 0.2534433022604047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0766572902498952, 0.07056466479399093, 0.06578702271483305, 0.09369028126931711, 0.060637128292857057, 0.06678864504557569, 0.06943100799359891, 0.07307976137468397, 0.07036514449132503, 0.06171576709414861, 0.04904287198228763, 0.08246375542491846, 0.06257926847592532, 0.04989649919135719, 0.04431647929424798, 0.05065140133167656, 0.048916498435184086, 0.0495503964402616, 0.4883742461836731, 0.438797396423358, 0.6545057569551385, 0.34697603929357623, 0.47435958221101304, 0.39859808836598754, 0.6193788045996, 0.44001113347465093, 0.6302589844516637, 0.16793892038650116, 0.10252009036107756, 0.09987720486596352, 0.121047571874901, 0.11763340472688066, 0.11625865848336547, 0.1356246793354332, 0.09309600868048729, 0.11877858216787152, 0.20402307215422266, 0.18490983246198334, 0.1709520884265341, 0.21821444656747946, 0.16914140677036538, 0.17078014268163566, 0.1558761893759092, 0.1841535022609182, 0.15539375732653005, 0.05290328663586297, 0.058834113316189374, 0.06591692747502842, 0.03506308158726679, 0.08924418486682517, 0.07072693820065012, 0.07115224276865717, 0.10152153358024407, 0.06697752281348912, 0.09386098741497895, 0.07748365124106371, 0.08217196954889971, 0.06983175475441328, 0.10505178312602659, 0.07801867073374891, 0.07775343961530512, 0.05224036851249769, 0.09806771101687484, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12398150754531767, 0.026480636305764582, 0.11478896716659581, 0.019086380616214926, 0.0161828490301128, 0.04050106751160998, 0.0867150097493814, 0.06488334398697693, 0.08639752643616172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019869943237855292, 0.01944212523972222, 0.015815757112356166, 0.01077290889299276, 0.02649369164242177, 0.028830915740590934, 0.016552138388776116, 0.01457563750241897, 0.015429613354437266, 0.26138697914426945, 0.2964367460518782, 0.2705358275238776, 0.2363047923767786, 0.23752972149408647, 0.26826311612543796, 0.2820805521637926, 0.2990888499920641, 0.2554615020060679, 0.043105578629359265, 0.049908296283156184, 0.05814680907210401, 0.08016906102129906, 0.06519261453445346, 0.07358581051356683, 0.07845656455166827, 0.05889698979439595, 0.07053570957632949, 0.13327066452466974, 0.09814141576203073, 0.15772301972180047, 0.11373195596335794, 0.13749110583312507, 0.12752428799988047, 0.13440857020395158, 0.13574770457305896, 0.15455810017287153, 0.1810063835233383, 0.20876263645822768, 0.21223146557973227, 0.20604597788649237, 0.1882590107662837, 0.1825867779225998, 0.19643944693496873, 0.21285253196428378, 0.19122403165871116, 0.14168823127513808, 0.15631695085224306, 0.15666447050044807, 0.14767419667062254, 0.15554310023751228, 0.1381305815445325, 0.13758691408236723, 0.15749124301824358, 0.14202412939285058, 0.17121653842431894, 0.1745285914678688, 0.2032437749718784, 0.1737192039170501, 0.17381486995128193, 0.17032802950556414, 0.17061395354215603, 0.18703140437326238, 0.17896722191941894, 0.17070396139874433, 0.16016577250744035, 0.16771681473151712, 0.16333663233234053, 0.16045287781870177, 0.15767035317445266, 0.16911301074068796, 0.159995264258192, 0.16601435832597833, 0.2609818842444396, 0.16877971831310246, 0.16656648627464987, 0.17539471573713727, 0.1410822591108416, 0.16489327285704036, 0.3442070313125376, 0.13313410618187738, 0.30734113901670657, 0.1420316212209164, 0.2658485358056907, 0.0711740428121338, 0.16622141012412195, 0.13566327070490702, 0.1603520603967198, 0.16939270356108604, 0.22679738843076802, 0.19814881121442274, 0.17725633145644437, 0.16752340108009012, 0.15781945992981272, 0.17062617324198104, 0.1814020226159193, 0.17375881028988938, 0.17017240083753804, 0.16178045657852813, 0.16811390574130947, 0.06770914141475803, 0.061714167492443295, 0.06406532465497972, 0.06560357999669597, 0.07469521089279496, 0.07134115472793123, 0.07754399068243478, 0.07340929448741496, 0.07241274576772316]}, "mutation_prompt": null}
{"id": "86dbcbdc-febd-4f8b-8aeb-146c6d38a60c", "solution": "import numpy as np\n\nclass DynamicEnhancedAdaptiveFireflyAlgorithmUpdate:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.beta_max = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        def attractiveness(distance):\n            return self.beta_min + (self.beta_max - self.beta_min) * np.exp(-self.alpha * distance)\n\n        population = initialize_population()\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i, x in enumerate(population):\n                for j, y in enumerate(population):\n                    if func(y) < func(x):\n                        distance = np.linalg.norm(x - y)\n                        beta = attractiveness(distance)\n                        population[i] += beta * (y - x) + np.random.uniform(-1, 1, self.dim)\n                        \n                        # Introduce dynamic update of alpha and beta parameters with probability 0.2\n                        if np.random.rand() < 0.2:\n                            self.alpha = max(0.1, self.alpha - 0.001)  # Update alpha\n                            self.beta_max = min(1.0, self.beta_max + 0.001)  # Update beta_max\n\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "DynamicEnhancedAdaptiveFireflyAlgorithmUpdate", "description": "Introducing Dynamic Parameter Adaptation in Firefly Algorithm for Black Box Optimization with Population Attractiveness", "configspace": "", "generation": 68, "fitness": 0.1326966823857367, "feedback": "The algorithm DynamicEnhancedAdaptiveFireflyAlgorithmUpdate got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.11.", "error": "", "parent_id": "baa2cbc7-8cfd-4871-9c38-41f8dd4e4b7a", "metadata": {"aucs": [0.26364390636496104, 0.29300561854970686, 0.24428300964481153, 0.23939973834037565, 0.2467495273967748, 0.26842577731711703, 0.2522675017302819, 0.2575302638375875, 0.2534433022604047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0766572902498952, 0.07056466479399093, 0.06578702271483305, 0.09369028126931711, 0.060637128292857057, 0.06678864504557569, 0.06943100799359891, 0.07307976137468397, 0.07036514449132503, 0.06171576709414861, 0.04904287198228763, 0.08246375542491846, 0.06257926847592532, 0.04989649919135719, 0.04431647929424798, 0.05065140133167656, 0.048916498435184086, 0.0495503964402616, 0.4883742461836731, 0.438797396423358, 0.6545057569551385, 0.34697603929357623, 0.47435958221101304, 0.39859808836598754, 0.6193788045996, 0.44001113347465093, 0.6302589844516637, 0.16793892038650116, 0.10252009036107756, 0.09987720486596352, 0.121047571874901, 0.11763340472688066, 0.11625865848336547, 0.1356246793354332, 0.09309600868048729, 0.11877858216787152, 0.20402307215422266, 0.18490983246198334, 0.1709520884265341, 0.21821444656747946, 0.16914140677036538, 0.17078014268163566, 0.1558761893759092, 0.1841535022609182, 0.15539375732653005, 0.05290328663586297, 0.058834113316189374, 0.06591692747502842, 0.03506308158726679, 0.08924418486682517, 0.07072693820065012, 0.07115224276865717, 0.10152153358024407, 0.06697752281348912, 0.09386098741497895, 0.07748365124106371, 0.08217196954889971, 0.06983175475441328, 0.10505178312602659, 0.07801867073374891, 0.07775343961530512, 0.05224036851249769, 0.09806771101687484, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12398150754531767, 0.026480636305764582, 0.11478896716659581, 0.019086380616214926, 0.0161828490301128, 0.04050106751160998, 0.0867150097493814, 0.06488334398697693, 0.08639752643616172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019869943237855292, 0.01944212523972222, 0.015815757112356166, 0.01077290889299276, 0.02649369164242177, 0.028830915740590934, 0.016552138388776116, 0.01457563750241897, 0.015429613354437266, 0.26138697914426945, 0.2964367460518782, 0.2705358275238776, 0.2363047923767786, 0.23752972149408647, 0.26826311612543796, 0.2820805521637926, 0.2990888499920641, 0.2554615020060679, 0.043105578629359265, 0.049908296283156184, 0.05814680907210401, 0.08016906102129906, 0.06519261453445346, 0.07358581051356683, 0.07845656455166827, 0.05889698979439595, 0.07053570957632949, 0.13327066452466974, 0.09814141576203073, 0.15772301972180047, 0.11373195596335794, 0.13749110583312507, 0.12752428799988047, 0.13440857020395158, 0.13574770457305896, 0.15455810017287153, 0.1810063835233383, 0.20876263645822768, 0.21223146557973227, 0.20604597788649237, 0.1882590107662837, 0.1825867779225998, 0.19643944693496873, 0.21285253196428378, 0.19122403165871116, 0.14168823127513808, 0.15631695085224306, 0.15666447050044807, 0.14767419667062254, 0.15554310023751228, 0.1381305815445325, 0.13758691408236723, 0.15749124301824358, 0.14202412939285058, 0.17121653842431894, 0.1745285914678688, 0.2032437749718784, 0.1737192039170501, 0.17381486995128193, 0.17032802950556414, 0.17061395354215603, 0.18703140437326238, 0.17896722191941894, 0.17070396139874433, 0.16016577250744035, 0.16771681473151712, 0.16333663233234053, 0.16045287781870177, 0.15767035317445266, 0.16911301074068796, 0.159995264258192, 0.16601435832597833, 0.2609818842444396, 0.16877971831310246, 0.16656648627464987, 0.17539471573713727, 0.1410822591108416, 0.16489327285704036, 0.3442070313125376, 0.13313410618187738, 0.30734113901670657, 0.1420316212209164, 0.2658485358056907, 0.0711740428121338, 0.16622141012412195, 0.13566327070490702, 0.1603520603967198, 0.16939270356108604, 0.22679738843076802, 0.19814881121442274, 0.17725633145644437, 0.16752340108009012, 0.15781945992981272, 0.17062617324198104, 0.1814020226159193, 0.17375881028988938, 0.17017240083753804, 0.16178045657852813, 0.16811390574130947, 0.06770914141475803, 0.061714167492443295, 0.06406532465497972, 0.06560357999669597, 0.07469521089279496, 0.07134115472793123, 0.07754399068243478, 0.07340929448741496, 0.07241274576772316]}, "mutation_prompt": null}
{"id": "309506d4-6dce-4454-99f4-a27fb2f3bdb4", "solution": "import numpy as np\n\nclass DynamicEnhancedAdaptiveFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.beta_max = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        def attractiveness(distance):\n            return self.beta_min + (self.beta_max - self.beta_min) * np.exp(-self.alpha * distance)\n\n        population = initialize_population()\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i, x in enumerate(population):\n                for j, y in enumerate(population):\n                    if func(y) < func(x):\n                        distance = np.linalg.norm(x - y)\n                        beta = attractiveness(distance)\n                        population[i] += beta * (y - x) + np.random.uniform(-1, 1, self.dim)\n                        \n                        # Introduce dynamic update of alpha and beta parameters with probability 0.2\n                        if np.random.rand() < 0.2:\n                            self.alpha = max(0.1, self.alpha - 0.001)  # Update alpha\n                            self.beta_max = min(1.0, self.beta_max + 0.001)  # Update beta_max\n\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "DynamicEnhancedAdaptiveFireflyAlgorithm", "description": "Dynamic Enhanced Adaptive Firefly Algorithm with Parameter Fine-tuning for Black Box Optimization.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "baa2cbc7-8cfd-4871-9c38-41f8dd4e4b7a", "metadata": {"aucs": [0.26364390636496104, 0.29300561854970686, 0.24428300964481153, 0.23939973834037565, 0.2467495273967748, 0.26842577731711703, 0.2522675017302819, 0.2575302638375875, 0.2534433022604047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0766572902498952, 0.07056466479399093, 0.06578702271483305, 0.09369028126931711, 0.060637128292857057, 0.06678864504557569, 0.06943100799359891, 0.07307976137468397, 0.07036514449132503, 0.06171576709414861, 0.04904287198228763, 0.08246375542491846, 0.06257926847592532, 0.04989649919135719, 0.04431647929424798, 0.05065140133167656, 0.048916498435184086, 0.0495503964402616, 0.4883742461836731, 0.438797396423358, 0.6545057569551385, 0.34697603929357623, 0.47435958221101304, 0.39859808836598754, 0.6193788045996, 0.44001113347465093, 0.6302589844516637, 0.16793892038650116, 0.10252009036107756, 0.09987720486596352, 0.121047571874901, 0.11763340472688066, 0.11625865848336547, 0.1356246793354332, 0.09309600868048729, 0.11877858216787152, 0.20402307215422266, 0.18490983246198334, 0.1709520884265341, 0.21821444656747946, 0.16914140677036538, 0.17078014268163566, 0.1558761893759092, 0.1841535022609182, 0.15539375732653005, 0.05290328663586297, 0.058834113316189374, 0.06591692747502842, 0.03506308158726679, 0.08924418486682517, 0.07072693820065012, 0.07115224276865717, 0.10152153358024407, 0.06697752281348912, 0.09386098741497895, 0.07748365124106371, 0.08217196954889971, 0.06983175475441328, 0.10505178312602659, 0.07801867073374891, 0.07775343961530512, 0.05224036851249769, 0.09806771101687484, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12398150754531767, 0.026480636305764582, 0.11478896716659581, 0.019086380616214926, 0.0161828490301128, 0.04050106751160998, 0.0867150097493814, 0.06488334398697693, 0.08639752643616172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019869943237855292, 0.01944212523972222, 0.015815757112356166, 0.01077290889299276, 0.02649369164242177, 0.028830915740590934, 0.016552138388776116, 0.01457563750241897, 0.015429613354437266, 0.26138697914426945, 0.2964367460518782, 0.2705358275238776, 0.2363047923767786, 0.23752972149408647, 0.26826311612543796, 0.2820805521637926, 0.2990888499920641, 0.2554615020060679, 0.043105578629359265, 0.049908296283156184, 0.05814680907210401, 0.08016906102129906, 0.06519261453445346, 0.07358581051356683, 0.07845656455166827, 0.05889698979439595, 0.07053570957632949, 0.13327066452466974, 0.09814141576203073, 0.15772301972180047, 0.11373195596335794, 0.13749110583312507, 0.12752428799988047, 0.13440857020395158, 0.13574770457305896, 0.15455810017287153, 0.1810063835233383, 0.20876263645822768, 0.21223146557973227, 0.20604597788649237, 0.1882590107662837, 0.1825867779225998, 0.19643944693496873, 0.21285253196428378, 0.19122403165871116, 0.14168823127513808, 0.15631695085224306, 0.15666447050044807, 0.14767419667062254, 0.15554310023751228, 0.1381305815445325, 0.13758691408236723, 0.15749124301824358, 0.14202412939285058, 0.17121653842431894, 0.1745285914678688, 0.2032437749718784, 0.1737192039170501, 0.17381486995128193, 0.17032802950556414, 0.17061395354215603, 0.18703140437326238, 0.17896722191941894, 0.17070396139874433, 0.16016577250744035, 0.16771681473151712, 0.16333663233234053, 0.16045287781870177, 0.15767035317445266, 0.16911301074068796, 0.159995264258192, 0.16601435832597833, 0.2609818842444396, 0.16877971831310246, 0.16656648627464987, 0.17539471573713727, 0.1410822591108416, 0.16489327285704036, 0.3442070313125376, 0.13313410618187738, 0.30734113901670657, 0.1420316212209164, 0.2658485358056907, 0.0711740428121338, 0.16622141012412195, 0.13566327070490702, 0.1603520603967198, 0.16939270356108604, 0.22679738843076802, 0.19814881121442274, 0.17725633145644437, 0.16752340108009012, 0.15781945992981272, 0.17062617324198104, 0.1814020226159193, 0.17375881028988938, 0.17017240083753804, 0.16178045657852813, 0.16811390574130947, 0.06770914141475803, 0.061714167492443295, 0.06406532465497972, 0.06560357999669597, 0.07469521089279496, 0.07134115472793123, 0.07754399068243478, 0.07340929448741496, 0.07241274576772316]}, "mutation_prompt": null}
{"id": "1c1f3efc-1b36-4b5a-8de6-4a81f49db5d5", "solution": "import numpy as np\n\nclass DynamicEnhancedAdaptiveFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.beta_max = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        def attractiveness(distance):\n            return self.beta_min + (self.beta_max - self.beta_min) * np.exp(-self.alpha * distance)\n\n        population = initialize_population()\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i, x in enumerate(population):\n                for j, y in enumerate(population):\n                    if func(y) < func(x):\n                        distance = np.linalg.norm(x - y)\n                        beta = attractiveness(distance)\n                        population[i] += beta * (y - x) + np.random.uniform(-1, 1, self.dim)\n                        \n                        # Introduce dynamic update of alpha and beta parameters with probability 0.2\n                        if np.random.rand() < 0.2:\n                            self.alpha = max(0.1, self.alpha - 0.001)  # Update alpha\n                            self.beta_max = min(1.0, self.beta_max + 0.001)  # Update beta_max\n\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "DynamicEnhancedAdaptiveFireflyAlgorithm", "description": "Dynamic Enhanced Adaptive Firefly Algorithm with Parameter Fine-tuning for Black Box Optimization.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "baa2cbc7-8cfd-4871-9c38-41f8dd4e4b7a", "metadata": {"aucs": [0.26364390636496104, 0.29300561854970686, 0.24428300964481153, 0.23939973834037565, 0.2467495273967748, 0.26842577731711703, 0.2522675017302819, 0.2575302638375875, 0.2534433022604047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0766572902498952, 0.07056466479399093, 0.06578702271483305, 0.09369028126931711, 0.060637128292857057, 0.06678864504557569, 0.06943100799359891, 0.07307976137468397, 0.07036514449132503, 0.06171576709414861, 0.04904287198228763, 0.08246375542491846, 0.06257926847592532, 0.04989649919135719, 0.04431647929424798, 0.05065140133167656, 0.048916498435184086, 0.0495503964402616, 0.4883742461836731, 0.438797396423358, 0.6545057569551385, 0.34697603929357623, 0.47435958221101304, 0.39859808836598754, 0.6193788045996, 0.44001113347465093, 0.6302589844516637, 0.16793892038650116, 0.10252009036107756, 0.09987720486596352, 0.121047571874901, 0.11763340472688066, 0.11625865848336547, 0.1356246793354332, 0.09309600868048729, 0.11877858216787152, 0.20402307215422266, 0.18490983246198334, 0.1709520884265341, 0.21821444656747946, 0.16914140677036538, 0.17078014268163566, 0.1558761893759092, 0.1841535022609182, 0.15539375732653005, 0.05290328663586297, 0.058834113316189374, 0.06591692747502842, 0.03506308158726679, 0.08924418486682517, 0.07072693820065012, 0.07115224276865717, 0.10152153358024407, 0.06697752281348912, 0.09386098741497895, 0.07748365124106371, 0.08217196954889971, 0.06983175475441328, 0.10505178312602659, 0.07801867073374891, 0.07775343961530512, 0.05224036851249769, 0.09806771101687484, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12398150754531767, 0.026480636305764582, 0.11478896716659581, 0.019086380616214926, 0.0161828490301128, 0.04050106751160998, 0.0867150097493814, 0.06488334398697693, 0.08639752643616172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019869943237855292, 0.01944212523972222, 0.015815757112356166, 0.01077290889299276, 0.02649369164242177, 0.028830915740590934, 0.016552138388776116, 0.01457563750241897, 0.015429613354437266, 0.26138697914426945, 0.2964367460518782, 0.2705358275238776, 0.2363047923767786, 0.23752972149408647, 0.26826311612543796, 0.2820805521637926, 0.2990888499920641, 0.2554615020060679, 0.043105578629359265, 0.049908296283156184, 0.05814680907210401, 0.08016906102129906, 0.06519261453445346, 0.07358581051356683, 0.07845656455166827, 0.05889698979439595, 0.07053570957632949, 0.13327066452466974, 0.09814141576203073, 0.15772301972180047, 0.11373195596335794, 0.13749110583312507, 0.12752428799988047, 0.13440857020395158, 0.13574770457305896, 0.15455810017287153, 0.1810063835233383, 0.20876263645822768, 0.21223146557973227, 0.20604597788649237, 0.1882590107662837, 0.1825867779225998, 0.19643944693496873, 0.21285253196428378, 0.19122403165871116, 0.14168823127513808, 0.15631695085224306, 0.15666447050044807, 0.14767419667062254, 0.15554310023751228, 0.1381305815445325, 0.13758691408236723, 0.15749124301824358, 0.14202412939285058, 0.17121653842431894, 0.1745285914678688, 0.2032437749718784, 0.1737192039170501, 0.17381486995128193, 0.17032802950556414, 0.17061395354215603, 0.18703140437326238, 0.17896722191941894, 0.17070396139874433, 0.16016577250744035, 0.16771681473151712, 0.16333663233234053, 0.16045287781870177, 0.15767035317445266, 0.16911301074068796, 0.159995264258192, 0.16601435832597833, 0.2609818842444396, 0.16877971831310246, 0.16656648627464987, 0.17539471573713727, 0.1410822591108416, 0.16489327285704036, 0.3442070313125376, 0.13313410618187738, 0.30734113901670657, 0.1420316212209164, 0.2658485358056907, 0.0711740428121338, 0.16622141012412195, 0.13566327070490702, 0.1603520603967198, 0.16939270356108604, 0.22679738843076802, 0.19814881121442274, 0.17725633145644437, 0.16752340108009012, 0.15781945992981272, 0.17062617324198104, 0.1814020226159193, 0.17375881028988938, 0.17017240083753804, 0.16178045657852813, 0.16811390574130947, 0.06770914141475803, 0.061714167492443295, 0.06406532465497972, 0.06560357999669597, 0.07469521089279496, 0.07134115472793123, 0.07754399068243478, 0.07340929448741496, 0.07241274576772316]}, "mutation_prompt": null}
{"id": "42fc8ae3-2748-4cd6-85f9-f69d404e1980", "solution": "import numpy as np\n\nclass DynamicEnhancedAdaptiveFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.beta_max = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        def attractiveness(distance):\n            return self.beta_min + (self.beta_max - self.beta_min) * np.exp(-self.alpha * distance)\n\n        population = initialize_population()\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i, x in enumerate(population):\n                for j, y in enumerate(population):\n                    if func(y) < func(x):\n                        distance = np.linalg.norm(x - y)\n                        beta = attractiveness(distance)\n                        population[i] += beta * (y - x) + np.random.uniform(-1, 1, self.dim)\n                        \n                        # Introduce dynamic update of alpha and beta parameters with probability 0.2\n                        if np.random.rand() < 0.2:\n                            self.alpha = max(0.1, self.alpha - 0.001)  # Update alpha\n                            self.beta_max = min(1.0, self.beta_max + 0.001)  # Update beta_max\n\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "DynamicEnhancedAdaptiveFireflyAlgorithm", "description": "Dynamic Enhanced Adaptive Firefly Algorithm with Parameter Fine-tuning for Black Box Optimization.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "baa2cbc7-8cfd-4871-9c38-41f8dd4e4b7a", "metadata": {"aucs": [0.26364390636496104, 0.29300561854970686, 0.24428300964481153, 0.23939973834037565, 0.2467495273967748, 0.26842577731711703, 0.2522675017302819, 0.2575302638375875, 0.2534433022604047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0766572902498952, 0.07056466479399093, 0.06578702271483305, 0.09369028126931711, 0.060637128292857057, 0.06678864504557569, 0.06943100799359891, 0.07307976137468397, 0.07036514449132503, 0.06171576709414861, 0.04904287198228763, 0.08246375542491846, 0.06257926847592532, 0.04989649919135719, 0.04431647929424798, 0.05065140133167656, 0.048916498435184086, 0.0495503964402616, 0.4883742461836731, 0.438797396423358, 0.6545057569551385, 0.34697603929357623, 0.47435958221101304, 0.39859808836598754, 0.6193788045996, 0.44001113347465093, 0.6302589844516637, 0.16793892038650116, 0.10252009036107756, 0.09987720486596352, 0.121047571874901, 0.11763340472688066, 0.11625865848336547, 0.1356246793354332, 0.09309600868048729, 0.11877858216787152, 0.20402307215422266, 0.18490983246198334, 0.1709520884265341, 0.21821444656747946, 0.16914140677036538, 0.17078014268163566, 0.1558761893759092, 0.1841535022609182, 0.15539375732653005, 0.05290328663586297, 0.058834113316189374, 0.06591692747502842, 0.03506308158726679, 0.08924418486682517, 0.07072693820065012, 0.07115224276865717, 0.10152153358024407, 0.06697752281348912, 0.09386098741497895, 0.07748365124106371, 0.08217196954889971, 0.06983175475441328, 0.10505178312602659, 0.07801867073374891, 0.07775343961530512, 0.05224036851249769, 0.09806771101687484, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12398150754531767, 0.026480636305764582, 0.11478896716659581, 0.019086380616214926, 0.0161828490301128, 0.04050106751160998, 0.0867150097493814, 0.06488334398697693, 0.08639752643616172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019869943237855292, 0.01944212523972222, 0.015815757112356166, 0.01077290889299276, 0.02649369164242177, 0.028830915740590934, 0.016552138388776116, 0.01457563750241897, 0.015429613354437266, 0.26138697914426945, 0.2964367460518782, 0.2705358275238776, 0.2363047923767786, 0.23752972149408647, 0.26826311612543796, 0.2820805521637926, 0.2990888499920641, 0.2554615020060679, 0.043105578629359265, 0.049908296283156184, 0.05814680907210401, 0.08016906102129906, 0.06519261453445346, 0.07358581051356683, 0.07845656455166827, 0.05889698979439595, 0.07053570957632949, 0.13327066452466974, 0.09814141576203073, 0.15772301972180047, 0.11373195596335794, 0.13749110583312507, 0.12752428799988047, 0.13440857020395158, 0.13574770457305896, 0.15455810017287153, 0.1810063835233383, 0.20876263645822768, 0.21223146557973227, 0.20604597788649237, 0.1882590107662837, 0.1825867779225998, 0.19643944693496873, 0.21285253196428378, 0.19122403165871116, 0.14168823127513808, 0.15631695085224306, 0.15666447050044807, 0.14767419667062254, 0.15554310023751228, 0.1381305815445325, 0.13758691408236723, 0.15749124301824358, 0.14202412939285058, 0.17121653842431894, 0.1745285914678688, 0.2032437749718784, 0.1737192039170501, 0.17381486995128193, 0.17032802950556414, 0.17061395354215603, 0.18703140437326238, 0.17896722191941894, 0.17070396139874433, 0.16016577250744035, 0.16771681473151712, 0.16333663233234053, 0.16045287781870177, 0.15767035317445266, 0.16911301074068796, 0.159995264258192, 0.16601435832597833, 0.2609818842444396, 0.16877971831310246, 0.16656648627464987, 0.17539471573713727, 0.1410822591108416, 0.16489327285704036, 0.3442070313125376, 0.13313410618187738, 0.30734113901670657, 0.1420316212209164, 0.2658485358056907, 0.0711740428121338, 0.16622141012412195, 0.13566327070490702, 0.1603520603967198, 0.16939270356108604, 0.22679738843076802, 0.19814881121442274, 0.17725633145644437, 0.16752340108009012, 0.15781945992981272, 0.17062617324198104, 0.1814020226159193, 0.17375881028988938, 0.17017240083753804, 0.16178045657852813, 0.16811390574130947, 0.06770914141475803, 0.061714167492443295, 0.06406532465497972, 0.06560357999669597, 0.07469521089279496, 0.07134115472793123, 0.07754399068243478, 0.07340929448741496, 0.07241274576772316]}, "mutation_prompt": null}
{"id": "efa13de0-bc0a-4d7d-a725-3beec1b8ca24", "solution": "import numpy as np\n\nclass DynamicEnhancedAdaptiveFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.beta_max = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        def attractiveness(distance):\n            return self.beta_min + (self.beta_max - self.beta_min) * np.exp(-self.alpha * distance)\n\n        population = initialize_population()\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i, x in enumerate(population):\n                for j, y in enumerate(population):\n                    if func(y) < func(x):\n                        distance = np.linalg.norm(x - y)\n                        beta = attractiveness(distance)\n                        population[i] += beta * (y - x) + np.random.uniform(-1, 1, self.dim)\n                        \n                        # Introduce dynamic update of alpha and beta parameters with probability 0.2\n                        if np.random.rand() < 0.2:\n                            self.alpha = max(0.1, self.alpha - 0.001)  # Update alpha\n                            self.beta_max = min(1.0, self.beta_max + 0.001)  # Update beta_max\n\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "DynamicEnhancedAdaptiveFireflyAlgorithm", "description": "Dynamic Enhanced Adaptive Firefly Algorithm with Parameter Fine-tuning for Black Box Optimization.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "baa2cbc7-8cfd-4871-9c38-41f8dd4e4b7a", "metadata": {"aucs": [0.26364390636496104, 0.29300561854970686, 0.24428300964481153, 0.23939973834037565, 0.2467495273967748, 0.26842577731711703, 0.2522675017302819, 0.2575302638375875, 0.2534433022604047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0766572902498952, 0.07056466479399093, 0.06578702271483305, 0.09369028126931711, 0.060637128292857057, 0.06678864504557569, 0.06943100799359891, 0.07307976137468397, 0.07036514449132503, 0.06171576709414861, 0.04904287198228763, 0.08246375542491846, 0.06257926847592532, 0.04989649919135719, 0.04431647929424798, 0.05065140133167656, 0.048916498435184086, 0.0495503964402616, 0.4883742461836731, 0.438797396423358, 0.6545057569551385, 0.34697603929357623, 0.47435958221101304, 0.39859808836598754, 0.6193788045996, 0.44001113347465093, 0.6302589844516637, 0.16793892038650116, 0.10252009036107756, 0.09987720486596352, 0.121047571874901, 0.11763340472688066, 0.11625865848336547, 0.1356246793354332, 0.09309600868048729, 0.11877858216787152, 0.20402307215422266, 0.18490983246198334, 0.1709520884265341, 0.21821444656747946, 0.16914140677036538, 0.17078014268163566, 0.1558761893759092, 0.1841535022609182, 0.15539375732653005, 0.05290328663586297, 0.058834113316189374, 0.06591692747502842, 0.03506308158726679, 0.08924418486682517, 0.07072693820065012, 0.07115224276865717, 0.10152153358024407, 0.06697752281348912, 0.09386098741497895, 0.07748365124106371, 0.08217196954889971, 0.06983175475441328, 0.10505178312602659, 0.07801867073374891, 0.07775343961530512, 0.05224036851249769, 0.09806771101687484, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12398150754531767, 0.026480636305764582, 0.11478896716659581, 0.019086380616214926, 0.0161828490301128, 0.04050106751160998, 0.0867150097493814, 0.06488334398697693, 0.08639752643616172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019869943237855292, 0.01944212523972222, 0.015815757112356166, 0.01077290889299276, 0.02649369164242177, 0.028830915740590934, 0.016552138388776116, 0.01457563750241897, 0.015429613354437266, 0.26138697914426945, 0.2964367460518782, 0.2705358275238776, 0.2363047923767786, 0.23752972149408647, 0.26826311612543796, 0.2820805521637926, 0.2990888499920641, 0.2554615020060679, 0.043105578629359265, 0.049908296283156184, 0.05814680907210401, 0.08016906102129906, 0.06519261453445346, 0.07358581051356683, 0.07845656455166827, 0.05889698979439595, 0.07053570957632949, 0.13327066452466974, 0.09814141576203073, 0.15772301972180047, 0.11373195596335794, 0.13749110583312507, 0.12752428799988047, 0.13440857020395158, 0.13574770457305896, 0.15455810017287153, 0.1810063835233383, 0.20876263645822768, 0.21223146557973227, 0.20604597788649237, 0.1882590107662837, 0.1825867779225998, 0.19643944693496873, 0.21285253196428378, 0.19122403165871116, 0.14168823127513808, 0.15631695085224306, 0.15666447050044807, 0.14767419667062254, 0.15554310023751228, 0.1381305815445325, 0.13758691408236723, 0.15749124301824358, 0.14202412939285058, 0.17121653842431894, 0.1745285914678688, 0.2032437749718784, 0.1737192039170501, 0.17381486995128193, 0.17032802950556414, 0.17061395354215603, 0.18703140437326238, 0.17896722191941894, 0.17070396139874433, 0.16016577250744035, 0.16771681473151712, 0.16333663233234053, 0.16045287781870177, 0.15767035317445266, 0.16911301074068796, 0.159995264258192, 0.16601435832597833, 0.2609818842444396, 0.16877971831310246, 0.16656648627464987, 0.17539471573713727, 0.1410822591108416, 0.16489327285704036, 0.3442070313125376, 0.13313410618187738, 0.30734113901670657, 0.1420316212209164, 0.2658485358056907, 0.0711740428121338, 0.16622141012412195, 0.13566327070490702, 0.1603520603967198, 0.16939270356108604, 0.22679738843076802, 0.19814881121442274, 0.17725633145644437, 0.16752340108009012, 0.15781945992981272, 0.17062617324198104, 0.1814020226159193, 0.17375881028988938, 0.17017240083753804, 0.16178045657852813, 0.16811390574130947, 0.06770914141475803, 0.061714167492443295, 0.06406532465497972, 0.06560357999669597, 0.07469521089279496, 0.07134115472793123, 0.07754399068243478, 0.07340929448741496, 0.07241274576772316]}, "mutation_prompt": null}
{"id": "23adde50-f4a3-4378-bb8a-dfd8080d81ec", "solution": "import numpy as np\n\nclass EnhancedDynamicFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.beta_max = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        def attractiveness(distance):\n            return self.beta_min + (self.beta_max - self.beta_min) * np.exp(-self.alpha * distance)\n\n        population = initialize_population()\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i, x in enumerate(population):\n                for j, y in enumerate(population):\n                    if func(y) < func(x):\n                        distance = np.linalg.norm(x - y)\n                        beta = attractiveness(distance)\n                        population[i] += beta * (y - x) + np.random.uniform(-1, 1, self.dim)\n                        \n                        # Introduce dynamic update of alpha and beta parameters with probability 0.2\n                        if np.random.rand() < 0.2:\n                            self.alpha = max(0.1, self.alpha - 0.001)  # Update alpha\n                            self.beta_max = min(1.0, self.beta_max + 0.001)  # Update beta_max\n\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "EnhancedDynamicFireflyAlgorithm", "description": "Enhanced Firefly Algorithm with Dynamic Parameter Adaptation for Black Box Optimization.", "configspace": "", "generation": 73, "fitness": 0.1326966823857367, "feedback": "The algorithm EnhancedDynamicFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.11.", "error": "", "parent_id": "baa2cbc7-8cfd-4871-9c38-41f8dd4e4b7a", "metadata": {"aucs": [0.26364390636496104, 0.29300561854970686, 0.24428300964481153, 0.23939973834037565, 0.2467495273967748, 0.26842577731711703, 0.2522675017302819, 0.2575302638375875, 0.2534433022604047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0766572902498952, 0.07056466479399093, 0.06578702271483305, 0.09369028126931711, 0.060637128292857057, 0.06678864504557569, 0.06943100799359891, 0.07307976137468397, 0.07036514449132503, 0.06171576709414861, 0.04904287198228763, 0.08246375542491846, 0.06257926847592532, 0.04989649919135719, 0.04431647929424798, 0.05065140133167656, 0.048916498435184086, 0.0495503964402616, 0.4883742461836731, 0.438797396423358, 0.6545057569551385, 0.34697603929357623, 0.47435958221101304, 0.39859808836598754, 0.6193788045996, 0.44001113347465093, 0.6302589844516637, 0.16793892038650116, 0.10252009036107756, 0.09987720486596352, 0.121047571874901, 0.11763340472688066, 0.11625865848336547, 0.1356246793354332, 0.09309600868048729, 0.11877858216787152, 0.20402307215422266, 0.18490983246198334, 0.1709520884265341, 0.21821444656747946, 0.16914140677036538, 0.17078014268163566, 0.1558761893759092, 0.1841535022609182, 0.15539375732653005, 0.05290328663586297, 0.058834113316189374, 0.06591692747502842, 0.03506308158726679, 0.08924418486682517, 0.07072693820065012, 0.07115224276865717, 0.10152153358024407, 0.06697752281348912, 0.09386098741497895, 0.07748365124106371, 0.08217196954889971, 0.06983175475441328, 0.10505178312602659, 0.07801867073374891, 0.07775343961530512, 0.05224036851249769, 0.09806771101687484, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12398150754531767, 0.026480636305764582, 0.11478896716659581, 0.019086380616214926, 0.0161828490301128, 0.04050106751160998, 0.0867150097493814, 0.06488334398697693, 0.08639752643616172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019869943237855292, 0.01944212523972222, 0.015815757112356166, 0.01077290889299276, 0.02649369164242177, 0.028830915740590934, 0.016552138388776116, 0.01457563750241897, 0.015429613354437266, 0.26138697914426945, 0.2964367460518782, 0.2705358275238776, 0.2363047923767786, 0.23752972149408647, 0.26826311612543796, 0.2820805521637926, 0.2990888499920641, 0.2554615020060679, 0.043105578629359265, 0.049908296283156184, 0.05814680907210401, 0.08016906102129906, 0.06519261453445346, 0.07358581051356683, 0.07845656455166827, 0.05889698979439595, 0.07053570957632949, 0.13327066452466974, 0.09814141576203073, 0.15772301972180047, 0.11373195596335794, 0.13749110583312507, 0.12752428799988047, 0.13440857020395158, 0.13574770457305896, 0.15455810017287153, 0.1810063835233383, 0.20876263645822768, 0.21223146557973227, 0.20604597788649237, 0.1882590107662837, 0.1825867779225998, 0.19643944693496873, 0.21285253196428378, 0.19122403165871116, 0.14168823127513808, 0.15631695085224306, 0.15666447050044807, 0.14767419667062254, 0.15554310023751228, 0.1381305815445325, 0.13758691408236723, 0.15749124301824358, 0.14202412939285058, 0.17121653842431894, 0.1745285914678688, 0.2032437749718784, 0.1737192039170501, 0.17381486995128193, 0.17032802950556414, 0.17061395354215603, 0.18703140437326238, 0.17896722191941894, 0.17070396139874433, 0.16016577250744035, 0.16771681473151712, 0.16333663233234053, 0.16045287781870177, 0.15767035317445266, 0.16911301074068796, 0.159995264258192, 0.16601435832597833, 0.2609818842444396, 0.16877971831310246, 0.16656648627464987, 0.17539471573713727, 0.1410822591108416, 0.16489327285704036, 0.3442070313125376, 0.13313410618187738, 0.30734113901670657, 0.1420316212209164, 0.2658485358056907, 0.0711740428121338, 0.16622141012412195, 0.13566327070490702, 0.1603520603967198, 0.16939270356108604, 0.22679738843076802, 0.19814881121442274, 0.17725633145644437, 0.16752340108009012, 0.15781945992981272, 0.17062617324198104, 0.1814020226159193, 0.17375881028988938, 0.17017240083753804, 0.16178045657852813, 0.16811390574130947, 0.06770914141475803, 0.061714167492443295, 0.06406532465497972, 0.06560357999669597, 0.07469521089279496, 0.07134115472793123, 0.07754399068243478, 0.07340929448741496, 0.07241274576772316]}, "mutation_prompt": null}
{"id": "e461e4cc-486d-40d4-94aa-15a527e5c299", "solution": "import numpy as np\n\nclass DynamicEnhancedAdaptiveFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.beta_max = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        def attractiveness(distance):\n            return self.beta_min + (self.beta_max - self.beta_min) * np.exp(-self.alpha * distance)\n\n        population = initialize_population()\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i, x in enumerate(population):\n                for j, y in enumerate(population):\n                    if func(y) < func(x):\n                        distance = np.linalg.norm(x - y)\n                        beta = attractiveness(distance)\n                        population[i] += beta * (y - x) + np.random.uniform(-1, 1, self.dim)\n                        \n                        # Introduce dynamic update of alpha and beta parameters with probability 0.2\n                        if np.random.rand() < 0.2:\n                            self.alpha = max(0.1, self.alpha - 0.001)  # Update alpha\n                            self.beta_max = min(1.0, self.beta_max + 0.001)  # Update beta_max\n\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "DynamicEnhancedAdaptiveFireflyAlgorithm", "description": "Dynamic Enhanced Adaptive Firefly Algorithm with Parameter Fine-tuning for Black Box Optimization.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "baa2cbc7-8cfd-4871-9c38-41f8dd4e4b7a", "metadata": {"aucs": [0.26364390636496104, 0.29300561854970686, 0.24428300964481153, 0.23939973834037565, 0.2467495273967748, 0.26842577731711703, 0.2522675017302819, 0.2575302638375875, 0.2534433022604047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0766572902498952, 0.07056466479399093, 0.06578702271483305, 0.09369028126931711, 0.060637128292857057, 0.06678864504557569, 0.06943100799359891, 0.07307976137468397, 0.07036514449132503, 0.06171576709414861, 0.04904287198228763, 0.08246375542491846, 0.06257926847592532, 0.04989649919135719, 0.04431647929424798, 0.05065140133167656, 0.048916498435184086, 0.0495503964402616, 0.4883742461836731, 0.438797396423358, 0.6545057569551385, 0.34697603929357623, 0.47435958221101304, 0.39859808836598754, 0.6193788045996, 0.44001113347465093, 0.6302589844516637, 0.16793892038650116, 0.10252009036107756, 0.09987720486596352, 0.121047571874901, 0.11763340472688066, 0.11625865848336547, 0.1356246793354332, 0.09309600868048729, 0.11877858216787152, 0.20402307215422266, 0.18490983246198334, 0.1709520884265341, 0.21821444656747946, 0.16914140677036538, 0.17078014268163566, 0.1558761893759092, 0.1841535022609182, 0.15539375732653005, 0.05290328663586297, 0.058834113316189374, 0.06591692747502842, 0.03506308158726679, 0.08924418486682517, 0.07072693820065012, 0.07115224276865717, 0.10152153358024407, 0.06697752281348912, 0.09386098741497895, 0.07748365124106371, 0.08217196954889971, 0.06983175475441328, 0.10505178312602659, 0.07801867073374891, 0.07775343961530512, 0.05224036851249769, 0.09806771101687484, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12398150754531767, 0.026480636305764582, 0.11478896716659581, 0.019086380616214926, 0.0161828490301128, 0.04050106751160998, 0.0867150097493814, 0.06488334398697693, 0.08639752643616172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019869943237855292, 0.01944212523972222, 0.015815757112356166, 0.01077290889299276, 0.02649369164242177, 0.028830915740590934, 0.016552138388776116, 0.01457563750241897, 0.015429613354437266, 0.26138697914426945, 0.2964367460518782, 0.2705358275238776, 0.2363047923767786, 0.23752972149408647, 0.26826311612543796, 0.2820805521637926, 0.2990888499920641, 0.2554615020060679, 0.043105578629359265, 0.049908296283156184, 0.05814680907210401, 0.08016906102129906, 0.06519261453445346, 0.07358581051356683, 0.07845656455166827, 0.05889698979439595, 0.07053570957632949, 0.13327066452466974, 0.09814141576203073, 0.15772301972180047, 0.11373195596335794, 0.13749110583312507, 0.12752428799988047, 0.13440857020395158, 0.13574770457305896, 0.15455810017287153, 0.1810063835233383, 0.20876263645822768, 0.21223146557973227, 0.20604597788649237, 0.1882590107662837, 0.1825867779225998, 0.19643944693496873, 0.21285253196428378, 0.19122403165871116, 0.14168823127513808, 0.15631695085224306, 0.15666447050044807, 0.14767419667062254, 0.15554310023751228, 0.1381305815445325, 0.13758691408236723, 0.15749124301824358, 0.14202412939285058, 0.17121653842431894, 0.1745285914678688, 0.2032437749718784, 0.1737192039170501, 0.17381486995128193, 0.17032802950556414, 0.17061395354215603, 0.18703140437326238, 0.17896722191941894, 0.17070396139874433, 0.16016577250744035, 0.16771681473151712, 0.16333663233234053, 0.16045287781870177, 0.15767035317445266, 0.16911301074068796, 0.159995264258192, 0.16601435832597833, 0.2609818842444396, 0.16877971831310246, 0.16656648627464987, 0.17539471573713727, 0.1410822591108416, 0.16489327285704036, 0.3442070313125376, 0.13313410618187738, 0.30734113901670657, 0.1420316212209164, 0.2658485358056907, 0.0711740428121338, 0.16622141012412195, 0.13566327070490702, 0.1603520603967198, 0.16939270356108604, 0.22679738843076802, 0.19814881121442274, 0.17725633145644437, 0.16752340108009012, 0.15781945992981272, 0.17062617324198104, 0.1814020226159193, 0.17375881028988938, 0.17017240083753804, 0.16178045657852813, 0.16811390574130947, 0.06770914141475803, 0.061714167492443295, 0.06406532465497972, 0.06560357999669597, 0.07469521089279496, 0.07134115472793123, 0.07754399068243478, 0.07340929448741496, 0.07241274576772316]}, "mutation_prompt": null}
{"id": "f3cbc3b9-8cd6-46e6-a888-1425440ba777", "solution": "import numpy as np\n\nclass DynamicEnhancedAdaptiveFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.beta_max = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        def attractiveness(distance):\n            return self.beta_min + (self.beta_max - self.beta_min) * np.exp(-self.alpha * distance)\n\n        population = initialize_population()\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i, x in enumerate(population):\n                for j, y in enumerate(population):\n                    if func(y) < func(x):\n                        distance = np.linalg.norm(x - y)\n                        beta = attractiveness(distance)\n                        population[i] += beta * (y - x) + np.random.uniform(-1, 1, self.dim)\n                        \n                        # Introduce dynamic update of alpha and beta parameters with probability 0.2\n                        if np.random.rand() < 0.2:\n                            self.alpha = max(0.1, self.alpha - 0.001)  # Update alpha\n                            self.beta_max = min(1.0, self.beta_max + 0.001)  # Update beta_max\n\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "DynamicEnhancedAdaptiveFireflyAlgorithm", "description": "Dynamic Enhanced Adaptive Firefly Algorithm with Parameter Fine-tuning for Black Box Optimization.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "baa2cbc7-8cfd-4871-9c38-41f8dd4e4b7a", "metadata": {"aucs": [0.26364390636496104, 0.29300561854970686, 0.24428300964481153, 0.23939973834037565, 0.2467495273967748, 0.26842577731711703, 0.2522675017302819, 0.2575302638375875, 0.2534433022604047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0766572902498952, 0.07056466479399093, 0.06578702271483305, 0.09369028126931711, 0.060637128292857057, 0.06678864504557569, 0.06943100799359891, 0.07307976137468397, 0.07036514449132503, 0.06171576709414861, 0.04904287198228763, 0.08246375542491846, 0.06257926847592532, 0.04989649919135719, 0.04431647929424798, 0.05065140133167656, 0.048916498435184086, 0.0495503964402616, 0.4883742461836731, 0.438797396423358, 0.6545057569551385, 0.34697603929357623, 0.47435958221101304, 0.39859808836598754, 0.6193788045996, 0.44001113347465093, 0.6302589844516637, 0.16793892038650116, 0.10252009036107756, 0.09987720486596352, 0.121047571874901, 0.11763340472688066, 0.11625865848336547, 0.1356246793354332, 0.09309600868048729, 0.11877858216787152, 0.20402307215422266, 0.18490983246198334, 0.1709520884265341, 0.21821444656747946, 0.16914140677036538, 0.17078014268163566, 0.1558761893759092, 0.1841535022609182, 0.15539375732653005, 0.05290328663586297, 0.058834113316189374, 0.06591692747502842, 0.03506308158726679, 0.08924418486682517, 0.07072693820065012, 0.07115224276865717, 0.10152153358024407, 0.06697752281348912, 0.09386098741497895, 0.07748365124106371, 0.08217196954889971, 0.06983175475441328, 0.10505178312602659, 0.07801867073374891, 0.07775343961530512, 0.05224036851249769, 0.09806771101687484, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12398150754531767, 0.026480636305764582, 0.11478896716659581, 0.019086380616214926, 0.0161828490301128, 0.04050106751160998, 0.0867150097493814, 0.06488334398697693, 0.08639752643616172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019869943237855292, 0.01944212523972222, 0.015815757112356166, 0.01077290889299276, 0.02649369164242177, 0.028830915740590934, 0.016552138388776116, 0.01457563750241897, 0.015429613354437266, 0.26138697914426945, 0.2964367460518782, 0.2705358275238776, 0.2363047923767786, 0.23752972149408647, 0.26826311612543796, 0.2820805521637926, 0.2990888499920641, 0.2554615020060679, 0.043105578629359265, 0.049908296283156184, 0.05814680907210401, 0.08016906102129906, 0.06519261453445346, 0.07358581051356683, 0.07845656455166827, 0.05889698979439595, 0.07053570957632949, 0.13327066452466974, 0.09814141576203073, 0.15772301972180047, 0.11373195596335794, 0.13749110583312507, 0.12752428799988047, 0.13440857020395158, 0.13574770457305896, 0.15455810017287153, 0.1810063835233383, 0.20876263645822768, 0.21223146557973227, 0.20604597788649237, 0.1882590107662837, 0.1825867779225998, 0.19643944693496873, 0.21285253196428378, 0.19122403165871116, 0.14168823127513808, 0.15631695085224306, 0.15666447050044807, 0.14767419667062254, 0.15554310023751228, 0.1381305815445325, 0.13758691408236723, 0.15749124301824358, 0.14202412939285058, 0.17121653842431894, 0.1745285914678688, 0.2032437749718784, 0.1737192039170501, 0.17381486995128193, 0.17032802950556414, 0.17061395354215603, 0.18703140437326238, 0.17896722191941894, 0.17070396139874433, 0.16016577250744035, 0.16771681473151712, 0.16333663233234053, 0.16045287781870177, 0.15767035317445266, 0.16911301074068796, 0.159995264258192, 0.16601435832597833, 0.2609818842444396, 0.16877971831310246, 0.16656648627464987, 0.17539471573713727, 0.1410822591108416, 0.16489327285704036, 0.3442070313125376, 0.13313410618187738, 0.30734113901670657, 0.1420316212209164, 0.2658485358056907, 0.0711740428121338, 0.16622141012412195, 0.13566327070490702, 0.1603520603967198, 0.16939270356108604, 0.22679738843076802, 0.19814881121442274, 0.17725633145644437, 0.16752340108009012, 0.15781945992981272, 0.17062617324198104, 0.1814020226159193, 0.17375881028988938, 0.17017240083753804, 0.16178045657852813, 0.16811390574130947, 0.06770914141475803, 0.061714167492443295, 0.06406532465497972, 0.06560357999669597, 0.07469521089279496, 0.07134115472793123, 0.07754399068243478, 0.07340929448741496, 0.07241274576772316]}, "mutation_prompt": null}
{"id": "410c436d-be62-4c82-b442-f5833056070b", "solution": "import numpy as np\n\nclass DynamicEnhancedAdaptiveFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.beta_max = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        def attractiveness(distance):\n            return self.beta_min + (self.beta_max - self.beta_min) * np.exp(-self.alpha * distance)\n\n        population = initialize_population()\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i, x in enumerate(population):\n                for j, y in enumerate(population):\n                    if func(y) < func(x):\n                        distance = np.linalg.norm(x - y)\n                        beta = attractiveness(distance)\n                        population[i] += beta * (y - x) + np.random.uniform(-1, 1, self.dim)\n                        \n                        # Introduce dynamic update of alpha and beta parameters with probability 0.2\n                        if np.random.rand() < 0.2:\n                            self.alpha = max(0.1, self.alpha - 0.001)  # Update alpha\n                            self.beta_max = min(1.0, self.beta_max + 0.001)  # Update beta_max\n\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "DynamicEnhancedAdaptiveFireflyAlgorithm", "description": "Dynamic Enhanced Adaptive Firefly Algorithm with Parameter Fine-tuning for Black Box Optimization.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "baa2cbc7-8cfd-4871-9c38-41f8dd4e4b7a", "metadata": {"aucs": [0.26364390636496104, 0.29300561854970686, 0.24428300964481153, 0.23939973834037565, 0.2467495273967748, 0.26842577731711703, 0.2522675017302819, 0.2575302638375875, 0.2534433022604047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0766572902498952, 0.07056466479399093, 0.06578702271483305, 0.09369028126931711, 0.060637128292857057, 0.06678864504557569, 0.06943100799359891, 0.07307976137468397, 0.07036514449132503, 0.06171576709414861, 0.04904287198228763, 0.08246375542491846, 0.06257926847592532, 0.04989649919135719, 0.04431647929424798, 0.05065140133167656, 0.048916498435184086, 0.0495503964402616, 0.4883742461836731, 0.438797396423358, 0.6545057569551385, 0.34697603929357623, 0.47435958221101304, 0.39859808836598754, 0.6193788045996, 0.44001113347465093, 0.6302589844516637, 0.16793892038650116, 0.10252009036107756, 0.09987720486596352, 0.121047571874901, 0.11763340472688066, 0.11625865848336547, 0.1356246793354332, 0.09309600868048729, 0.11877858216787152, 0.20402307215422266, 0.18490983246198334, 0.1709520884265341, 0.21821444656747946, 0.16914140677036538, 0.17078014268163566, 0.1558761893759092, 0.1841535022609182, 0.15539375732653005, 0.05290328663586297, 0.058834113316189374, 0.06591692747502842, 0.03506308158726679, 0.08924418486682517, 0.07072693820065012, 0.07115224276865717, 0.10152153358024407, 0.06697752281348912, 0.09386098741497895, 0.07748365124106371, 0.08217196954889971, 0.06983175475441328, 0.10505178312602659, 0.07801867073374891, 0.07775343961530512, 0.05224036851249769, 0.09806771101687484, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12398150754531767, 0.026480636305764582, 0.11478896716659581, 0.019086380616214926, 0.0161828490301128, 0.04050106751160998, 0.0867150097493814, 0.06488334398697693, 0.08639752643616172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019869943237855292, 0.01944212523972222, 0.015815757112356166, 0.01077290889299276, 0.02649369164242177, 0.028830915740590934, 0.016552138388776116, 0.01457563750241897, 0.015429613354437266, 0.26138697914426945, 0.2964367460518782, 0.2705358275238776, 0.2363047923767786, 0.23752972149408647, 0.26826311612543796, 0.2820805521637926, 0.2990888499920641, 0.2554615020060679, 0.043105578629359265, 0.049908296283156184, 0.05814680907210401, 0.08016906102129906, 0.06519261453445346, 0.07358581051356683, 0.07845656455166827, 0.05889698979439595, 0.07053570957632949, 0.13327066452466974, 0.09814141576203073, 0.15772301972180047, 0.11373195596335794, 0.13749110583312507, 0.12752428799988047, 0.13440857020395158, 0.13574770457305896, 0.15455810017287153, 0.1810063835233383, 0.20876263645822768, 0.21223146557973227, 0.20604597788649237, 0.1882590107662837, 0.1825867779225998, 0.19643944693496873, 0.21285253196428378, 0.19122403165871116, 0.14168823127513808, 0.15631695085224306, 0.15666447050044807, 0.14767419667062254, 0.15554310023751228, 0.1381305815445325, 0.13758691408236723, 0.15749124301824358, 0.14202412939285058, 0.17121653842431894, 0.1745285914678688, 0.2032437749718784, 0.1737192039170501, 0.17381486995128193, 0.17032802950556414, 0.17061395354215603, 0.18703140437326238, 0.17896722191941894, 0.17070396139874433, 0.16016577250744035, 0.16771681473151712, 0.16333663233234053, 0.16045287781870177, 0.15767035317445266, 0.16911301074068796, 0.159995264258192, 0.16601435832597833, 0.2609818842444396, 0.16877971831310246, 0.16656648627464987, 0.17539471573713727, 0.1410822591108416, 0.16489327285704036, 0.3442070313125376, 0.13313410618187738, 0.30734113901670657, 0.1420316212209164, 0.2658485358056907, 0.0711740428121338, 0.16622141012412195, 0.13566327070490702, 0.1603520603967198, 0.16939270356108604, 0.22679738843076802, 0.19814881121442274, 0.17725633145644437, 0.16752340108009012, 0.15781945992981272, 0.17062617324198104, 0.1814020226159193, 0.17375881028988938, 0.17017240083753804, 0.16178045657852813, 0.16811390574130947, 0.06770914141475803, 0.061714167492443295, 0.06406532465497972, 0.06560357999669597, 0.07469521089279496, 0.07134115472793123, 0.07754399068243478, 0.07340929448741496, 0.07241274576772316]}, "mutation_prompt": null}
{"id": "dbc59ace-a239-4835-bb67-f5227234dc62", "solution": "import numpy as np\n\nclass DynamicEnhancedAdaptiveFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.beta_max = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        def attractiveness(distance):\n            return self.beta_min + (self.beta_max - self.beta_min) * np.exp(-self.alpha * distance)\n\n        population = initialize_population()\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i, x in enumerate(population):\n                for j, y in enumerate(population):\n                    if func(y) < func(x):\n                        distance = np.linalg.norm(x - y)\n                        beta = attractiveness(distance)\n                        population[i] += beta * (y - x) + np.random.uniform(-1, 1, self.dim)\n                        \n                        # Introduce dynamic update of alpha and beta parameters with probability 0.2\n                        if np.random.rand() < 0.2:\n                            self.alpha = max(0.1, self.alpha - 0.001)  # Update alpha\n                            self.beta_max = min(1.0, self.beta_max + 0.001)  # Update beta_max\n\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "DynamicEnhancedAdaptiveFireflyAlgorithm", "description": "Dynamic Enhanced Adaptive Firefly Algorithm with Parameter Fine-tuning for Black Box Optimization.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "baa2cbc7-8cfd-4871-9c38-41f8dd4e4b7a", "metadata": {"aucs": [0.26364390636496104, 0.29300561854970686, 0.24428300964481153, 0.23939973834037565, 0.2467495273967748, 0.26842577731711703, 0.2522675017302819, 0.2575302638375875, 0.2534433022604047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0766572902498952, 0.07056466479399093, 0.06578702271483305, 0.09369028126931711, 0.060637128292857057, 0.06678864504557569, 0.06943100799359891, 0.07307976137468397, 0.07036514449132503, 0.06171576709414861, 0.04904287198228763, 0.08246375542491846, 0.06257926847592532, 0.04989649919135719, 0.04431647929424798, 0.05065140133167656, 0.048916498435184086, 0.0495503964402616, 0.4883742461836731, 0.438797396423358, 0.6545057569551385, 0.34697603929357623, 0.47435958221101304, 0.39859808836598754, 0.6193788045996, 0.44001113347465093, 0.6302589844516637, 0.16793892038650116, 0.10252009036107756, 0.09987720486596352, 0.121047571874901, 0.11763340472688066, 0.11625865848336547, 0.1356246793354332, 0.09309600868048729, 0.11877858216787152, 0.20402307215422266, 0.18490983246198334, 0.1709520884265341, 0.21821444656747946, 0.16914140677036538, 0.17078014268163566, 0.1558761893759092, 0.1841535022609182, 0.15539375732653005, 0.05290328663586297, 0.058834113316189374, 0.06591692747502842, 0.03506308158726679, 0.08924418486682517, 0.07072693820065012, 0.07115224276865717, 0.10152153358024407, 0.06697752281348912, 0.09386098741497895, 0.07748365124106371, 0.08217196954889971, 0.06983175475441328, 0.10505178312602659, 0.07801867073374891, 0.07775343961530512, 0.05224036851249769, 0.09806771101687484, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12398150754531767, 0.026480636305764582, 0.11478896716659581, 0.019086380616214926, 0.0161828490301128, 0.04050106751160998, 0.0867150097493814, 0.06488334398697693, 0.08639752643616172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019869943237855292, 0.01944212523972222, 0.015815757112356166, 0.01077290889299276, 0.02649369164242177, 0.028830915740590934, 0.016552138388776116, 0.01457563750241897, 0.015429613354437266, 0.26138697914426945, 0.2964367460518782, 0.2705358275238776, 0.2363047923767786, 0.23752972149408647, 0.26826311612543796, 0.2820805521637926, 0.2990888499920641, 0.2554615020060679, 0.043105578629359265, 0.049908296283156184, 0.05814680907210401, 0.08016906102129906, 0.06519261453445346, 0.07358581051356683, 0.07845656455166827, 0.05889698979439595, 0.07053570957632949, 0.13327066452466974, 0.09814141576203073, 0.15772301972180047, 0.11373195596335794, 0.13749110583312507, 0.12752428799988047, 0.13440857020395158, 0.13574770457305896, 0.15455810017287153, 0.1810063835233383, 0.20876263645822768, 0.21223146557973227, 0.20604597788649237, 0.1882590107662837, 0.1825867779225998, 0.19643944693496873, 0.21285253196428378, 0.19122403165871116, 0.14168823127513808, 0.15631695085224306, 0.15666447050044807, 0.14767419667062254, 0.15554310023751228, 0.1381305815445325, 0.13758691408236723, 0.15749124301824358, 0.14202412939285058, 0.17121653842431894, 0.1745285914678688, 0.2032437749718784, 0.1737192039170501, 0.17381486995128193, 0.17032802950556414, 0.17061395354215603, 0.18703140437326238, 0.17896722191941894, 0.17070396139874433, 0.16016577250744035, 0.16771681473151712, 0.16333663233234053, 0.16045287781870177, 0.15767035317445266, 0.16911301074068796, 0.159995264258192, 0.16601435832597833, 0.2609818842444396, 0.16877971831310246, 0.16656648627464987, 0.17539471573713727, 0.1410822591108416, 0.16489327285704036, 0.3442070313125376, 0.13313410618187738, 0.30734113901670657, 0.1420316212209164, 0.2658485358056907, 0.0711740428121338, 0.16622141012412195, 0.13566327070490702, 0.1603520603967198, 0.16939270356108604, 0.22679738843076802, 0.19814881121442274, 0.17725633145644437, 0.16752340108009012, 0.15781945992981272, 0.17062617324198104, 0.1814020226159193, 0.17375881028988938, 0.17017240083753804, 0.16178045657852813, 0.16811390574130947, 0.06770914141475803, 0.061714167492443295, 0.06406532465497972, 0.06560357999669597, 0.07469521089279496, 0.07134115472793123, 0.07754399068243478, 0.07340929448741496, 0.07241274576772316]}, "mutation_prompt": null}
{"id": "b20c0954-8dce-4d47-9fd9-3a1caa3b452e", "solution": "import numpy as np\n\nclass DynamicEnhancedAdaptiveFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.beta_max = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        def attractiveness(distance):\n            return self.beta_min + (self.beta_max - self.beta_min) * np.exp(-self.alpha * distance)\n\n        population = initialize_population()\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i, x in enumerate(population):\n                for j, y in enumerate(population):\n                    if func(y) < func(x):\n                        distance = np.linalg.norm(x - y)\n                        beta = attractiveness(distance)\n                        population[i] += beta * (y - x) + np.random.uniform(-1, 1, self.dim)\n                        \n                        # Introduce dynamic update of alpha and beta parameters with probability 0.2\n                        if np.random.rand() < 0.2:\n                            self.alpha = max(0.1, self.alpha - 0.001)  # Update alpha\n                            self.beta_max = min(1.0, self.beta_max + 0.001)  # Update beta_max\n\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "DynamicEnhancedAdaptiveFireflyAlgorithm", "description": "Dynamic Enhanced Adaptive Firefly Algorithm with Parameter Fine-tuning for Black Box Optimization.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "baa2cbc7-8cfd-4871-9c38-41f8dd4e4b7a", "metadata": {"aucs": [0.26364390636496104, 0.29300561854970686, 0.24428300964481153, 0.23939973834037565, 0.2467495273967748, 0.26842577731711703, 0.2522675017302819, 0.2575302638375875, 0.2534433022604047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0766572902498952, 0.07056466479399093, 0.06578702271483305, 0.09369028126931711, 0.060637128292857057, 0.06678864504557569, 0.06943100799359891, 0.07307976137468397, 0.07036514449132503, 0.06171576709414861, 0.04904287198228763, 0.08246375542491846, 0.06257926847592532, 0.04989649919135719, 0.04431647929424798, 0.05065140133167656, 0.048916498435184086, 0.0495503964402616, 0.4883742461836731, 0.438797396423358, 0.6545057569551385, 0.34697603929357623, 0.47435958221101304, 0.39859808836598754, 0.6193788045996, 0.44001113347465093, 0.6302589844516637, 0.16793892038650116, 0.10252009036107756, 0.09987720486596352, 0.121047571874901, 0.11763340472688066, 0.11625865848336547, 0.1356246793354332, 0.09309600868048729, 0.11877858216787152, 0.20402307215422266, 0.18490983246198334, 0.1709520884265341, 0.21821444656747946, 0.16914140677036538, 0.17078014268163566, 0.1558761893759092, 0.1841535022609182, 0.15539375732653005, 0.05290328663586297, 0.058834113316189374, 0.06591692747502842, 0.03506308158726679, 0.08924418486682517, 0.07072693820065012, 0.07115224276865717, 0.10152153358024407, 0.06697752281348912, 0.09386098741497895, 0.07748365124106371, 0.08217196954889971, 0.06983175475441328, 0.10505178312602659, 0.07801867073374891, 0.07775343961530512, 0.05224036851249769, 0.09806771101687484, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12398150754531767, 0.026480636305764582, 0.11478896716659581, 0.019086380616214926, 0.0161828490301128, 0.04050106751160998, 0.0867150097493814, 0.06488334398697693, 0.08639752643616172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019869943237855292, 0.01944212523972222, 0.015815757112356166, 0.01077290889299276, 0.02649369164242177, 0.028830915740590934, 0.016552138388776116, 0.01457563750241897, 0.015429613354437266, 0.26138697914426945, 0.2964367460518782, 0.2705358275238776, 0.2363047923767786, 0.23752972149408647, 0.26826311612543796, 0.2820805521637926, 0.2990888499920641, 0.2554615020060679, 0.043105578629359265, 0.049908296283156184, 0.05814680907210401, 0.08016906102129906, 0.06519261453445346, 0.07358581051356683, 0.07845656455166827, 0.05889698979439595, 0.07053570957632949, 0.13327066452466974, 0.09814141576203073, 0.15772301972180047, 0.11373195596335794, 0.13749110583312507, 0.12752428799988047, 0.13440857020395158, 0.13574770457305896, 0.15455810017287153, 0.1810063835233383, 0.20876263645822768, 0.21223146557973227, 0.20604597788649237, 0.1882590107662837, 0.1825867779225998, 0.19643944693496873, 0.21285253196428378, 0.19122403165871116, 0.14168823127513808, 0.15631695085224306, 0.15666447050044807, 0.14767419667062254, 0.15554310023751228, 0.1381305815445325, 0.13758691408236723, 0.15749124301824358, 0.14202412939285058, 0.17121653842431894, 0.1745285914678688, 0.2032437749718784, 0.1737192039170501, 0.17381486995128193, 0.17032802950556414, 0.17061395354215603, 0.18703140437326238, 0.17896722191941894, 0.17070396139874433, 0.16016577250744035, 0.16771681473151712, 0.16333663233234053, 0.16045287781870177, 0.15767035317445266, 0.16911301074068796, 0.159995264258192, 0.16601435832597833, 0.2609818842444396, 0.16877971831310246, 0.16656648627464987, 0.17539471573713727, 0.1410822591108416, 0.16489327285704036, 0.3442070313125376, 0.13313410618187738, 0.30734113901670657, 0.1420316212209164, 0.2658485358056907, 0.0711740428121338, 0.16622141012412195, 0.13566327070490702, 0.1603520603967198, 0.16939270356108604, 0.22679738843076802, 0.19814881121442274, 0.17725633145644437, 0.16752340108009012, 0.15781945992981272, 0.17062617324198104, 0.1814020226159193, 0.17375881028988938, 0.17017240083753804, 0.16178045657852813, 0.16811390574130947, 0.06770914141475803, 0.061714167492443295, 0.06406532465497972, 0.06560357999669597, 0.07469521089279496, 0.07134115472793123, 0.07754399068243478, 0.07340929448741496, 0.07241274576772316]}, "mutation_prompt": null}
{"id": "f9f3b358-3f74-4c72-bbac-bb71b98eb9b7", "solution": "import numpy as np\n\nclass DynamicEnhancedAdaptiveFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.beta_max = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        def attractiveness(distance):\n            return self.beta_min + (self.beta_max - self.beta_min) * np.exp(-self.alpha * distance)\n\n        population = initialize_population()\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i, x in enumerate(population):\n                for j, y in enumerate(population):\n                    if func(y) < func(x):\n                        distance = np.linalg.norm(x - y)\n                        beta = attractiveness(distance)\n                        population[i] += beta * (y - x) + np.random.uniform(-1, 1, self.dim)\n                        \n                        # Introduce dynamic update of alpha and beta parameters with probability 0.2\n                        if np.random.rand() < 0.2:\n                            self.alpha = max(0.1, self.alpha - 0.001)  # Update alpha\n                            self.beta_max = min(1.0, self.beta_max + 0.001)  # Update beta_max\n\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "DynamicEnhancedAdaptiveFireflyAlgorithm", "description": "Dynamic Enhanced Adaptive Firefly Algorithm with Parameter Fine-tuning for Black Box Optimization.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "baa2cbc7-8cfd-4871-9c38-41f8dd4e4b7a", "metadata": {"aucs": [0.26364390636496104, 0.29300561854970686, 0.24428300964481153, 0.23939973834037565, 0.2467495273967748, 0.26842577731711703, 0.2522675017302819, 0.2575302638375875, 0.2534433022604047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0766572902498952, 0.07056466479399093, 0.06578702271483305, 0.09369028126931711, 0.060637128292857057, 0.06678864504557569, 0.06943100799359891, 0.07307976137468397, 0.07036514449132503, 0.06171576709414861, 0.04904287198228763, 0.08246375542491846, 0.06257926847592532, 0.04989649919135719, 0.04431647929424798, 0.05065140133167656, 0.048916498435184086, 0.0495503964402616, 0.4883742461836731, 0.438797396423358, 0.6545057569551385, 0.34697603929357623, 0.47435958221101304, 0.39859808836598754, 0.6193788045996, 0.44001113347465093, 0.6302589844516637, 0.16793892038650116, 0.10252009036107756, 0.09987720486596352, 0.121047571874901, 0.11763340472688066, 0.11625865848336547, 0.1356246793354332, 0.09309600868048729, 0.11877858216787152, 0.20402307215422266, 0.18490983246198334, 0.1709520884265341, 0.21821444656747946, 0.16914140677036538, 0.17078014268163566, 0.1558761893759092, 0.1841535022609182, 0.15539375732653005, 0.05290328663586297, 0.058834113316189374, 0.06591692747502842, 0.03506308158726679, 0.08924418486682517, 0.07072693820065012, 0.07115224276865717, 0.10152153358024407, 0.06697752281348912, 0.09386098741497895, 0.07748365124106371, 0.08217196954889971, 0.06983175475441328, 0.10505178312602659, 0.07801867073374891, 0.07775343961530512, 0.05224036851249769, 0.09806771101687484, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12398150754531767, 0.026480636305764582, 0.11478896716659581, 0.019086380616214926, 0.0161828490301128, 0.04050106751160998, 0.0867150097493814, 0.06488334398697693, 0.08639752643616172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019869943237855292, 0.01944212523972222, 0.015815757112356166, 0.01077290889299276, 0.02649369164242177, 0.028830915740590934, 0.016552138388776116, 0.01457563750241897, 0.015429613354437266, 0.26138697914426945, 0.2964367460518782, 0.2705358275238776, 0.2363047923767786, 0.23752972149408647, 0.26826311612543796, 0.2820805521637926, 0.2990888499920641, 0.2554615020060679, 0.043105578629359265, 0.049908296283156184, 0.05814680907210401, 0.08016906102129906, 0.06519261453445346, 0.07358581051356683, 0.07845656455166827, 0.05889698979439595, 0.07053570957632949, 0.13327066452466974, 0.09814141576203073, 0.15772301972180047, 0.11373195596335794, 0.13749110583312507, 0.12752428799988047, 0.13440857020395158, 0.13574770457305896, 0.15455810017287153, 0.1810063835233383, 0.20876263645822768, 0.21223146557973227, 0.20604597788649237, 0.1882590107662837, 0.1825867779225998, 0.19643944693496873, 0.21285253196428378, 0.19122403165871116, 0.14168823127513808, 0.15631695085224306, 0.15666447050044807, 0.14767419667062254, 0.15554310023751228, 0.1381305815445325, 0.13758691408236723, 0.15749124301824358, 0.14202412939285058, 0.17121653842431894, 0.1745285914678688, 0.2032437749718784, 0.1737192039170501, 0.17381486995128193, 0.17032802950556414, 0.17061395354215603, 0.18703140437326238, 0.17896722191941894, 0.17070396139874433, 0.16016577250744035, 0.16771681473151712, 0.16333663233234053, 0.16045287781870177, 0.15767035317445266, 0.16911301074068796, 0.159995264258192, 0.16601435832597833, 0.2609818842444396, 0.16877971831310246, 0.16656648627464987, 0.17539471573713727, 0.1410822591108416, 0.16489327285704036, 0.3442070313125376, 0.13313410618187738, 0.30734113901670657, 0.1420316212209164, 0.2658485358056907, 0.0711740428121338, 0.16622141012412195, 0.13566327070490702, 0.1603520603967198, 0.16939270356108604, 0.22679738843076802, 0.19814881121442274, 0.17725633145644437, 0.16752340108009012, 0.15781945992981272, 0.17062617324198104, 0.1814020226159193, 0.17375881028988938, 0.17017240083753804, 0.16178045657852813, 0.16811390574130947, 0.06770914141475803, 0.061714167492443295, 0.06406532465497972, 0.06560357999669597, 0.07469521089279496, 0.07134115472793123, 0.07754399068243478, 0.07340929448741496, 0.07241274576772316]}, "mutation_prompt": null}
{"id": "7002eeac-e345-4328-ac5a-ac11073541c2", "solution": "import numpy as np\n\nclass DynamicEnhancedAdaptiveFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.beta_max = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        def attractiveness(distance):\n            return self.beta_min + (self.beta_max - self.beta_min) * np.exp(-self.alpha * distance)\n\n        population = initialize_population()\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i, x in enumerate(population):\n                for j, y in enumerate(population):\n                    if func(y) < func(x):\n                        distance = np.linalg.norm(x - y)\n                        beta = attractiveness(distance)\n                        population[i] += beta * (y - x) + np.random.uniform(-1, 1, self.dim)\n                        \n                        # Introduce dynamic update of alpha and beta parameters with probability 0.2\n                        if np.random.rand() < 0.2:\n                            self.alpha = max(0.1, self.alpha - 0.001)  # Update alpha\n                            self.beta_max = min(1.0, self.beta_max + 0.001)  # Update beta_max\n\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "DynamicEnhancedAdaptiveFireflyAlgorithm", "description": "Dynamic Enhanced Adaptive Firefly Algorithm with Parameter Fine-tuning for Black Box Optimization.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "baa2cbc7-8cfd-4871-9c38-41f8dd4e4b7a", "metadata": {"aucs": [0.26364390636496104, 0.29300561854970686, 0.24428300964481153, 0.23939973834037565, 0.2467495273967748, 0.26842577731711703, 0.2522675017302819, 0.2575302638375875, 0.2534433022604047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0766572902498952, 0.07056466479399093, 0.06578702271483305, 0.09369028126931711, 0.060637128292857057, 0.06678864504557569, 0.06943100799359891, 0.07307976137468397, 0.07036514449132503, 0.06171576709414861, 0.04904287198228763, 0.08246375542491846, 0.06257926847592532, 0.04989649919135719, 0.04431647929424798, 0.05065140133167656, 0.048916498435184086, 0.0495503964402616, 0.4883742461836731, 0.438797396423358, 0.6545057569551385, 0.34697603929357623, 0.47435958221101304, 0.39859808836598754, 0.6193788045996, 0.44001113347465093, 0.6302589844516637, 0.16793892038650116, 0.10252009036107756, 0.09987720486596352, 0.121047571874901, 0.11763340472688066, 0.11625865848336547, 0.1356246793354332, 0.09309600868048729, 0.11877858216787152, 0.20402307215422266, 0.18490983246198334, 0.1709520884265341, 0.21821444656747946, 0.16914140677036538, 0.17078014268163566, 0.1558761893759092, 0.1841535022609182, 0.15539375732653005, 0.05290328663586297, 0.058834113316189374, 0.06591692747502842, 0.03506308158726679, 0.08924418486682517, 0.07072693820065012, 0.07115224276865717, 0.10152153358024407, 0.06697752281348912, 0.09386098741497895, 0.07748365124106371, 0.08217196954889971, 0.06983175475441328, 0.10505178312602659, 0.07801867073374891, 0.07775343961530512, 0.05224036851249769, 0.09806771101687484, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12398150754531767, 0.026480636305764582, 0.11478896716659581, 0.019086380616214926, 0.0161828490301128, 0.04050106751160998, 0.0867150097493814, 0.06488334398697693, 0.08639752643616172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019869943237855292, 0.01944212523972222, 0.015815757112356166, 0.01077290889299276, 0.02649369164242177, 0.028830915740590934, 0.016552138388776116, 0.01457563750241897, 0.015429613354437266, 0.26138697914426945, 0.2964367460518782, 0.2705358275238776, 0.2363047923767786, 0.23752972149408647, 0.26826311612543796, 0.2820805521637926, 0.2990888499920641, 0.2554615020060679, 0.043105578629359265, 0.049908296283156184, 0.05814680907210401, 0.08016906102129906, 0.06519261453445346, 0.07358581051356683, 0.07845656455166827, 0.05889698979439595, 0.07053570957632949, 0.13327066452466974, 0.09814141576203073, 0.15772301972180047, 0.11373195596335794, 0.13749110583312507, 0.12752428799988047, 0.13440857020395158, 0.13574770457305896, 0.15455810017287153, 0.1810063835233383, 0.20876263645822768, 0.21223146557973227, 0.20604597788649237, 0.1882590107662837, 0.1825867779225998, 0.19643944693496873, 0.21285253196428378, 0.19122403165871116, 0.14168823127513808, 0.15631695085224306, 0.15666447050044807, 0.14767419667062254, 0.15554310023751228, 0.1381305815445325, 0.13758691408236723, 0.15749124301824358, 0.14202412939285058, 0.17121653842431894, 0.1745285914678688, 0.2032437749718784, 0.1737192039170501, 0.17381486995128193, 0.17032802950556414, 0.17061395354215603, 0.18703140437326238, 0.17896722191941894, 0.17070396139874433, 0.16016577250744035, 0.16771681473151712, 0.16333663233234053, 0.16045287781870177, 0.15767035317445266, 0.16911301074068796, 0.159995264258192, 0.16601435832597833, 0.2609818842444396, 0.16877971831310246, 0.16656648627464987, 0.17539471573713727, 0.1410822591108416, 0.16489327285704036, 0.3442070313125376, 0.13313410618187738, 0.30734113901670657, 0.1420316212209164, 0.2658485358056907, 0.0711740428121338, 0.16622141012412195, 0.13566327070490702, 0.1603520603967198, 0.16939270356108604, 0.22679738843076802, 0.19814881121442274, 0.17725633145644437, 0.16752340108009012, 0.15781945992981272, 0.17062617324198104, 0.1814020226159193, 0.17375881028988938, 0.17017240083753804, 0.16178045657852813, 0.16811390574130947, 0.06770914141475803, 0.061714167492443295, 0.06406532465497972, 0.06560357999669597, 0.07469521089279496, 0.07134115472793123, 0.07754399068243478, 0.07340929448741496, 0.07241274576772316]}, "mutation_prompt": null}
{"id": "dadb8b7c-a6bb-41a5-842c-bb36dde4ce32", "solution": "import numpy as np\n\nclass DynamicEnhancedAdaptiveFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.beta_max = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        def attractiveness(distance):\n            return self.beta_min + (self.beta_max - self.beta_min) * np.exp(-self.alpha * distance)\n\n        population = initialize_population()\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i, x in enumerate(population):\n                for j, y in enumerate(population):\n                    if func(y) < func(x):\n                        distance = np.linalg.norm(x - y)\n                        beta = attractiveness(distance)\n                        population[i] += beta * (y - x) + np.random.uniform(-1, 1, self.dim)\n                        \n                        # Introduce dynamic update of alpha and beta parameters with probability 0.2\n                        if np.random.rand() < 0.2:\n                            self.alpha = max(0.1, self.alpha - 0.001)  # Update alpha\n                            self.beta_max = min(1.0, self.beta_max + 0.001)  # Update beta_max\n\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "DynamicEnhancedAdaptiveFireflyAlgorithm", "description": "Dynamic Enhanced Adaptive Firefly Algorithm with Parameter Fine-tuning for Black Box Optimization.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "baa2cbc7-8cfd-4871-9c38-41f8dd4e4b7a", "metadata": {"aucs": [0.26364390636496104, 0.29300561854970686, 0.24428300964481153, 0.23939973834037565, 0.2467495273967748, 0.26842577731711703, 0.2522675017302819, 0.2575302638375875, 0.2534433022604047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0766572902498952, 0.07056466479399093, 0.06578702271483305, 0.09369028126931711, 0.060637128292857057, 0.06678864504557569, 0.06943100799359891, 0.07307976137468397, 0.07036514449132503, 0.06171576709414861, 0.04904287198228763, 0.08246375542491846, 0.06257926847592532, 0.04989649919135719, 0.04431647929424798, 0.05065140133167656, 0.048916498435184086, 0.0495503964402616, 0.4883742461836731, 0.438797396423358, 0.6545057569551385, 0.34697603929357623, 0.47435958221101304, 0.39859808836598754, 0.6193788045996, 0.44001113347465093, 0.6302589844516637, 0.16793892038650116, 0.10252009036107756, 0.09987720486596352, 0.121047571874901, 0.11763340472688066, 0.11625865848336547, 0.1356246793354332, 0.09309600868048729, 0.11877858216787152, 0.20402307215422266, 0.18490983246198334, 0.1709520884265341, 0.21821444656747946, 0.16914140677036538, 0.17078014268163566, 0.1558761893759092, 0.1841535022609182, 0.15539375732653005, 0.05290328663586297, 0.058834113316189374, 0.06591692747502842, 0.03506308158726679, 0.08924418486682517, 0.07072693820065012, 0.07115224276865717, 0.10152153358024407, 0.06697752281348912, 0.09386098741497895, 0.07748365124106371, 0.08217196954889971, 0.06983175475441328, 0.10505178312602659, 0.07801867073374891, 0.07775343961530512, 0.05224036851249769, 0.09806771101687484, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12398150754531767, 0.026480636305764582, 0.11478896716659581, 0.019086380616214926, 0.0161828490301128, 0.04050106751160998, 0.0867150097493814, 0.06488334398697693, 0.08639752643616172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019869943237855292, 0.01944212523972222, 0.015815757112356166, 0.01077290889299276, 0.02649369164242177, 0.028830915740590934, 0.016552138388776116, 0.01457563750241897, 0.015429613354437266, 0.26138697914426945, 0.2964367460518782, 0.2705358275238776, 0.2363047923767786, 0.23752972149408647, 0.26826311612543796, 0.2820805521637926, 0.2990888499920641, 0.2554615020060679, 0.043105578629359265, 0.049908296283156184, 0.05814680907210401, 0.08016906102129906, 0.06519261453445346, 0.07358581051356683, 0.07845656455166827, 0.05889698979439595, 0.07053570957632949, 0.13327066452466974, 0.09814141576203073, 0.15772301972180047, 0.11373195596335794, 0.13749110583312507, 0.12752428799988047, 0.13440857020395158, 0.13574770457305896, 0.15455810017287153, 0.1810063835233383, 0.20876263645822768, 0.21223146557973227, 0.20604597788649237, 0.1882590107662837, 0.1825867779225998, 0.19643944693496873, 0.21285253196428378, 0.19122403165871116, 0.14168823127513808, 0.15631695085224306, 0.15666447050044807, 0.14767419667062254, 0.15554310023751228, 0.1381305815445325, 0.13758691408236723, 0.15749124301824358, 0.14202412939285058, 0.17121653842431894, 0.1745285914678688, 0.2032437749718784, 0.1737192039170501, 0.17381486995128193, 0.17032802950556414, 0.17061395354215603, 0.18703140437326238, 0.17896722191941894, 0.17070396139874433, 0.16016577250744035, 0.16771681473151712, 0.16333663233234053, 0.16045287781870177, 0.15767035317445266, 0.16911301074068796, 0.159995264258192, 0.16601435832597833, 0.2609818842444396, 0.16877971831310246, 0.16656648627464987, 0.17539471573713727, 0.1410822591108416, 0.16489327285704036, 0.3442070313125376, 0.13313410618187738, 0.30734113901670657, 0.1420316212209164, 0.2658485358056907, 0.0711740428121338, 0.16622141012412195, 0.13566327070490702, 0.1603520603967198, 0.16939270356108604, 0.22679738843076802, 0.19814881121442274, 0.17725633145644437, 0.16752340108009012, 0.15781945992981272, 0.17062617324198104, 0.1814020226159193, 0.17375881028988938, 0.17017240083753804, 0.16178045657852813, 0.16811390574130947, 0.06770914141475803, 0.061714167492443295, 0.06406532465497972, 0.06560357999669597, 0.07469521089279496, 0.07134115472793123, 0.07754399068243478, 0.07340929448741496, 0.07241274576772316]}, "mutation_prompt": null}
{"id": "8433b9c6-e68d-4a45-a2bf-ad713f738207", "solution": "import numpy as np\n\nclass DynamicEnhancedAdaptiveFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.beta_max = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        def attractiveness(distance):\n            return self.beta_min + (self.beta_max - self.beta_min) * np.exp(-self.alpha * distance)\n\n        population = initialize_population()\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i, x in enumerate(population):\n                for j, y in enumerate(population):\n                    if func(y) < func(x):\n                        distance = np.linalg.norm(x - y)\n                        beta = attractiveness(distance)\n                        population[i] += beta * (y - x) + np.random.uniform(-1, 1, self.dim)\n                        \n                        # Introduce dynamic update of alpha and beta parameters with probability 0.2\n                        if np.random.rand() < 0.2:\n                            self.alpha = max(0.1, self.alpha - 0.001)  # Update alpha\n                            self.beta_max = min(1.0, self.beta_max + 0.001)  # Update beta_max\n\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "DynamicEnhancedAdaptiveFireflyAlgorithm", "description": "Dynamic Enhanced Adaptive Firefly Algorithm with Parameter Fine-tuning for Black Box Optimization.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "baa2cbc7-8cfd-4871-9c38-41f8dd4e4b7a", "metadata": {"aucs": [0.26364390636496104, 0.29300561854970686, 0.24428300964481153, 0.23939973834037565, 0.2467495273967748, 0.26842577731711703, 0.2522675017302819, 0.2575302638375875, 0.2534433022604047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0766572902498952, 0.07056466479399093, 0.06578702271483305, 0.09369028126931711, 0.060637128292857057, 0.06678864504557569, 0.06943100799359891, 0.07307976137468397, 0.07036514449132503, 0.06171576709414861, 0.04904287198228763, 0.08246375542491846, 0.06257926847592532, 0.04989649919135719, 0.04431647929424798, 0.05065140133167656, 0.048916498435184086, 0.0495503964402616, 0.4883742461836731, 0.438797396423358, 0.6545057569551385, 0.34697603929357623, 0.47435958221101304, 0.39859808836598754, 0.6193788045996, 0.44001113347465093, 0.6302589844516637, 0.16793892038650116, 0.10252009036107756, 0.09987720486596352, 0.121047571874901, 0.11763340472688066, 0.11625865848336547, 0.1356246793354332, 0.09309600868048729, 0.11877858216787152, 0.20402307215422266, 0.18490983246198334, 0.1709520884265341, 0.21821444656747946, 0.16914140677036538, 0.17078014268163566, 0.1558761893759092, 0.1841535022609182, 0.15539375732653005, 0.05290328663586297, 0.058834113316189374, 0.06591692747502842, 0.03506308158726679, 0.08924418486682517, 0.07072693820065012, 0.07115224276865717, 0.10152153358024407, 0.06697752281348912, 0.09386098741497895, 0.07748365124106371, 0.08217196954889971, 0.06983175475441328, 0.10505178312602659, 0.07801867073374891, 0.07775343961530512, 0.05224036851249769, 0.09806771101687484, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12398150754531767, 0.026480636305764582, 0.11478896716659581, 0.019086380616214926, 0.0161828490301128, 0.04050106751160998, 0.0867150097493814, 0.06488334398697693, 0.08639752643616172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019869943237855292, 0.01944212523972222, 0.015815757112356166, 0.01077290889299276, 0.02649369164242177, 0.028830915740590934, 0.016552138388776116, 0.01457563750241897, 0.015429613354437266, 0.26138697914426945, 0.2964367460518782, 0.2705358275238776, 0.2363047923767786, 0.23752972149408647, 0.26826311612543796, 0.2820805521637926, 0.2990888499920641, 0.2554615020060679, 0.043105578629359265, 0.049908296283156184, 0.05814680907210401, 0.08016906102129906, 0.06519261453445346, 0.07358581051356683, 0.07845656455166827, 0.05889698979439595, 0.07053570957632949, 0.13327066452466974, 0.09814141576203073, 0.15772301972180047, 0.11373195596335794, 0.13749110583312507, 0.12752428799988047, 0.13440857020395158, 0.13574770457305896, 0.15455810017287153, 0.1810063835233383, 0.20876263645822768, 0.21223146557973227, 0.20604597788649237, 0.1882590107662837, 0.1825867779225998, 0.19643944693496873, 0.21285253196428378, 0.19122403165871116, 0.14168823127513808, 0.15631695085224306, 0.15666447050044807, 0.14767419667062254, 0.15554310023751228, 0.1381305815445325, 0.13758691408236723, 0.15749124301824358, 0.14202412939285058, 0.17121653842431894, 0.1745285914678688, 0.2032437749718784, 0.1737192039170501, 0.17381486995128193, 0.17032802950556414, 0.17061395354215603, 0.18703140437326238, 0.17896722191941894, 0.17070396139874433, 0.16016577250744035, 0.16771681473151712, 0.16333663233234053, 0.16045287781870177, 0.15767035317445266, 0.16911301074068796, 0.159995264258192, 0.16601435832597833, 0.2609818842444396, 0.16877971831310246, 0.16656648627464987, 0.17539471573713727, 0.1410822591108416, 0.16489327285704036, 0.3442070313125376, 0.13313410618187738, 0.30734113901670657, 0.1420316212209164, 0.2658485358056907, 0.0711740428121338, 0.16622141012412195, 0.13566327070490702, 0.1603520603967198, 0.16939270356108604, 0.22679738843076802, 0.19814881121442274, 0.17725633145644437, 0.16752340108009012, 0.15781945992981272, 0.17062617324198104, 0.1814020226159193, 0.17375881028988938, 0.17017240083753804, 0.16178045657852813, 0.16811390574130947, 0.06770914141475803, 0.061714167492443295, 0.06406532465497972, 0.06560357999669597, 0.07469521089279496, 0.07134115472793123, 0.07754399068243478, 0.07340929448741496, 0.07241274576772316]}, "mutation_prompt": null}
{"id": "8e723c87-e1a0-47e8-b4dc-c4bcc7a284a8", "solution": "import numpy as np\n\nclass DynamicEnhancedAdaptiveFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.beta_max = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        def attractiveness(distance):\n            return self.beta_min + (self.beta_max - self.beta_min) * np.exp(-self.alpha * distance)\n\n        population = initialize_population()\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i, x in enumerate(population):\n                for j, y in enumerate(population):\n                    if func(y) < func(x):\n                        distance = np.linalg.norm(x - y)\n                        beta = attractiveness(distance)\n                        population[i] += beta * (y - x) + np.random.uniform(-1, 1, self.dim)\n                        \n                        # Introduce dynamic update of alpha and beta parameters with probability 0.2\n                        if np.random.rand() < 0.2:\n                            self.alpha = max(0.1, self.alpha - 0.001)  # Update alpha\n                            self.beta_max = min(1.0, self.beta_max + 0.001)  # Update beta_max\n\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "DynamicEnhancedAdaptiveFireflyAlgorithm", "description": "Dynamic Enhanced Adaptive Firefly Algorithm with Parameter Fine-tuning for Black Box Optimization.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "baa2cbc7-8cfd-4871-9c38-41f8dd4e4b7a", "metadata": {"aucs": [0.26364390636496104, 0.29300561854970686, 0.24428300964481153, 0.23939973834037565, 0.2467495273967748, 0.26842577731711703, 0.2522675017302819, 0.2575302638375875, 0.2534433022604047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0766572902498952, 0.07056466479399093, 0.06578702271483305, 0.09369028126931711, 0.060637128292857057, 0.06678864504557569, 0.06943100799359891, 0.07307976137468397, 0.07036514449132503, 0.06171576709414861, 0.04904287198228763, 0.08246375542491846, 0.06257926847592532, 0.04989649919135719, 0.04431647929424798, 0.05065140133167656, 0.048916498435184086, 0.0495503964402616, 0.4883742461836731, 0.438797396423358, 0.6545057569551385, 0.34697603929357623, 0.47435958221101304, 0.39859808836598754, 0.6193788045996, 0.44001113347465093, 0.6302589844516637, 0.16793892038650116, 0.10252009036107756, 0.09987720486596352, 0.121047571874901, 0.11763340472688066, 0.11625865848336547, 0.1356246793354332, 0.09309600868048729, 0.11877858216787152, 0.20402307215422266, 0.18490983246198334, 0.1709520884265341, 0.21821444656747946, 0.16914140677036538, 0.17078014268163566, 0.1558761893759092, 0.1841535022609182, 0.15539375732653005, 0.05290328663586297, 0.058834113316189374, 0.06591692747502842, 0.03506308158726679, 0.08924418486682517, 0.07072693820065012, 0.07115224276865717, 0.10152153358024407, 0.06697752281348912, 0.09386098741497895, 0.07748365124106371, 0.08217196954889971, 0.06983175475441328, 0.10505178312602659, 0.07801867073374891, 0.07775343961530512, 0.05224036851249769, 0.09806771101687484, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12398150754531767, 0.026480636305764582, 0.11478896716659581, 0.019086380616214926, 0.0161828490301128, 0.04050106751160998, 0.0867150097493814, 0.06488334398697693, 0.08639752643616172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019869943237855292, 0.01944212523972222, 0.015815757112356166, 0.01077290889299276, 0.02649369164242177, 0.028830915740590934, 0.016552138388776116, 0.01457563750241897, 0.015429613354437266, 0.26138697914426945, 0.2964367460518782, 0.2705358275238776, 0.2363047923767786, 0.23752972149408647, 0.26826311612543796, 0.2820805521637926, 0.2990888499920641, 0.2554615020060679, 0.043105578629359265, 0.049908296283156184, 0.05814680907210401, 0.08016906102129906, 0.06519261453445346, 0.07358581051356683, 0.07845656455166827, 0.05889698979439595, 0.07053570957632949, 0.13327066452466974, 0.09814141576203073, 0.15772301972180047, 0.11373195596335794, 0.13749110583312507, 0.12752428799988047, 0.13440857020395158, 0.13574770457305896, 0.15455810017287153, 0.1810063835233383, 0.20876263645822768, 0.21223146557973227, 0.20604597788649237, 0.1882590107662837, 0.1825867779225998, 0.19643944693496873, 0.21285253196428378, 0.19122403165871116, 0.14168823127513808, 0.15631695085224306, 0.15666447050044807, 0.14767419667062254, 0.15554310023751228, 0.1381305815445325, 0.13758691408236723, 0.15749124301824358, 0.14202412939285058, 0.17121653842431894, 0.1745285914678688, 0.2032437749718784, 0.1737192039170501, 0.17381486995128193, 0.17032802950556414, 0.17061395354215603, 0.18703140437326238, 0.17896722191941894, 0.17070396139874433, 0.16016577250744035, 0.16771681473151712, 0.16333663233234053, 0.16045287781870177, 0.15767035317445266, 0.16911301074068796, 0.159995264258192, 0.16601435832597833, 0.2609818842444396, 0.16877971831310246, 0.16656648627464987, 0.17539471573713727, 0.1410822591108416, 0.16489327285704036, 0.3442070313125376, 0.13313410618187738, 0.30734113901670657, 0.1420316212209164, 0.2658485358056907, 0.0711740428121338, 0.16622141012412195, 0.13566327070490702, 0.1603520603967198, 0.16939270356108604, 0.22679738843076802, 0.19814881121442274, 0.17725633145644437, 0.16752340108009012, 0.15781945992981272, 0.17062617324198104, 0.1814020226159193, 0.17375881028988938, 0.17017240083753804, 0.16178045657852813, 0.16811390574130947, 0.06770914141475803, 0.061714167492443295, 0.06406532465497972, 0.06560357999669597, 0.07469521089279496, 0.07134115472793123, 0.07754399068243478, 0.07340929448741496, 0.07241274576772316]}, "mutation_prompt": null}
{"id": "aa519d28-7c7f-4d60-9446-e468f5264627", "solution": "import numpy as np\n\nclass EvolutionaryAdaptiveFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.beta_max = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        def attractiveness(distance):\n            return self.beta_min + (self.beta_max - self.beta_min) * np.exp(-self.alpha * distance)\n\n        population = initialize_population()\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i, x in enumerate(population):\n                for j, y in enumerate(population):\n                    if func(y) < func(x):\n                        distance = np.linalg.norm(x - y)\n                        beta = attractiveness(distance)\n                        population[i] += beta * (y - x) + np.random.uniform(-1, 1, self.dim)\n                        \n                        # Introduce dynamic update of alpha and beta parameters with probability 0.2\n                        if np.random.rand() < 0.2:\n                            self.alpha = max(0.1, self.alpha - 0.001)  # Update alpha\n                            self.beta_max = min(1.0, self.beta_max + 0.001)  # Update beta_max\n\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "EvolutionaryAdaptiveFireflyAlgorithm", "description": "Introducing Evolutionary Adaptive Firefly Algorithm with Dynamic Parameter Adjustment for Black Box Optimization.", "configspace": "", "generation": 84, "fitness": 0.1326966823857367, "feedback": "The algorithm EvolutionaryAdaptiveFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.11.", "error": "", "parent_id": "baa2cbc7-8cfd-4871-9c38-41f8dd4e4b7a", "metadata": {"aucs": [0.26364390636496104, 0.29300561854970686, 0.24428300964481153, 0.23939973834037565, 0.2467495273967748, 0.26842577731711703, 0.2522675017302819, 0.2575302638375875, 0.2534433022604047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0766572902498952, 0.07056466479399093, 0.06578702271483305, 0.09369028126931711, 0.060637128292857057, 0.06678864504557569, 0.06943100799359891, 0.07307976137468397, 0.07036514449132503, 0.06171576709414861, 0.04904287198228763, 0.08246375542491846, 0.06257926847592532, 0.04989649919135719, 0.04431647929424798, 0.05065140133167656, 0.048916498435184086, 0.0495503964402616, 0.4883742461836731, 0.438797396423358, 0.6545057569551385, 0.34697603929357623, 0.47435958221101304, 0.39859808836598754, 0.6193788045996, 0.44001113347465093, 0.6302589844516637, 0.16793892038650116, 0.10252009036107756, 0.09987720486596352, 0.121047571874901, 0.11763340472688066, 0.11625865848336547, 0.1356246793354332, 0.09309600868048729, 0.11877858216787152, 0.20402307215422266, 0.18490983246198334, 0.1709520884265341, 0.21821444656747946, 0.16914140677036538, 0.17078014268163566, 0.1558761893759092, 0.1841535022609182, 0.15539375732653005, 0.05290328663586297, 0.058834113316189374, 0.06591692747502842, 0.03506308158726679, 0.08924418486682517, 0.07072693820065012, 0.07115224276865717, 0.10152153358024407, 0.06697752281348912, 0.09386098741497895, 0.07748365124106371, 0.08217196954889971, 0.06983175475441328, 0.10505178312602659, 0.07801867073374891, 0.07775343961530512, 0.05224036851249769, 0.09806771101687484, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12398150754531767, 0.026480636305764582, 0.11478896716659581, 0.019086380616214926, 0.0161828490301128, 0.04050106751160998, 0.0867150097493814, 0.06488334398697693, 0.08639752643616172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019869943237855292, 0.01944212523972222, 0.015815757112356166, 0.01077290889299276, 0.02649369164242177, 0.028830915740590934, 0.016552138388776116, 0.01457563750241897, 0.015429613354437266, 0.26138697914426945, 0.2964367460518782, 0.2705358275238776, 0.2363047923767786, 0.23752972149408647, 0.26826311612543796, 0.2820805521637926, 0.2990888499920641, 0.2554615020060679, 0.043105578629359265, 0.049908296283156184, 0.05814680907210401, 0.08016906102129906, 0.06519261453445346, 0.07358581051356683, 0.07845656455166827, 0.05889698979439595, 0.07053570957632949, 0.13327066452466974, 0.09814141576203073, 0.15772301972180047, 0.11373195596335794, 0.13749110583312507, 0.12752428799988047, 0.13440857020395158, 0.13574770457305896, 0.15455810017287153, 0.1810063835233383, 0.20876263645822768, 0.21223146557973227, 0.20604597788649237, 0.1882590107662837, 0.1825867779225998, 0.19643944693496873, 0.21285253196428378, 0.19122403165871116, 0.14168823127513808, 0.15631695085224306, 0.15666447050044807, 0.14767419667062254, 0.15554310023751228, 0.1381305815445325, 0.13758691408236723, 0.15749124301824358, 0.14202412939285058, 0.17121653842431894, 0.1745285914678688, 0.2032437749718784, 0.1737192039170501, 0.17381486995128193, 0.17032802950556414, 0.17061395354215603, 0.18703140437326238, 0.17896722191941894, 0.17070396139874433, 0.16016577250744035, 0.16771681473151712, 0.16333663233234053, 0.16045287781870177, 0.15767035317445266, 0.16911301074068796, 0.159995264258192, 0.16601435832597833, 0.2609818842444396, 0.16877971831310246, 0.16656648627464987, 0.17539471573713727, 0.1410822591108416, 0.16489327285704036, 0.3442070313125376, 0.13313410618187738, 0.30734113901670657, 0.1420316212209164, 0.2658485358056907, 0.0711740428121338, 0.16622141012412195, 0.13566327070490702, 0.1603520603967198, 0.16939270356108604, 0.22679738843076802, 0.19814881121442274, 0.17725633145644437, 0.16752340108009012, 0.15781945992981272, 0.17062617324198104, 0.1814020226159193, 0.17375881028988938, 0.17017240083753804, 0.16178045657852813, 0.16811390574130947, 0.06770914141475803, 0.061714167492443295, 0.06406532465497972, 0.06560357999669597, 0.07469521089279496, 0.07134115472793123, 0.07754399068243478, 0.07340929448741496, 0.07241274576772316]}, "mutation_prompt": null}
{"id": "a39b8550-279e-4c34-8735-c1253761ec73", "solution": "import numpy as np\n\nclass DynamicEnhancedAdaptiveFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.beta_max = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        def attractiveness(distance):\n            return self.beta_min + (self.beta_max - self.beta_min) * np.exp(-self.alpha * distance)\n\n        population = initialize_population()\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i, x in enumerate(population):\n                for j, y in enumerate(population):\n                    if func(y) < func(x):\n                        distance = np.linalg.norm(x - y)\n                        beta = attractiveness(distance)\n                        population[i] += beta * (y - x) + np.random.uniform(-1, 1, self.dim)\n                        \n                        # Introduce dynamic update of alpha and beta parameters with probability 0.2\n                        if np.random.rand() < 0.2:\n                            self.alpha = max(0.1, self.alpha - 0.001)  # Update alpha\n                            self.beta_max = min(1.0, self.beta_max + 0.001)  # Update beta_max\n\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "DynamicEnhancedAdaptiveFireflyAlgorithm", "description": "Dynamic Enhanced Adaptive Firefly Algorithm with Parameter Fine-tuning for Black Box Optimization.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "baa2cbc7-8cfd-4871-9c38-41f8dd4e4b7a", "metadata": {"aucs": [0.26364390636496104, 0.29300561854970686, 0.24428300964481153, 0.23939973834037565, 0.2467495273967748, 0.26842577731711703, 0.2522675017302819, 0.2575302638375875, 0.2534433022604047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0766572902498952, 0.07056466479399093, 0.06578702271483305, 0.09369028126931711, 0.060637128292857057, 0.06678864504557569, 0.06943100799359891, 0.07307976137468397, 0.07036514449132503, 0.06171576709414861, 0.04904287198228763, 0.08246375542491846, 0.06257926847592532, 0.04989649919135719, 0.04431647929424798, 0.05065140133167656, 0.048916498435184086, 0.0495503964402616, 0.4883742461836731, 0.438797396423358, 0.6545057569551385, 0.34697603929357623, 0.47435958221101304, 0.39859808836598754, 0.6193788045996, 0.44001113347465093, 0.6302589844516637, 0.16793892038650116, 0.10252009036107756, 0.09987720486596352, 0.121047571874901, 0.11763340472688066, 0.11625865848336547, 0.1356246793354332, 0.09309600868048729, 0.11877858216787152, 0.20402307215422266, 0.18490983246198334, 0.1709520884265341, 0.21821444656747946, 0.16914140677036538, 0.17078014268163566, 0.1558761893759092, 0.1841535022609182, 0.15539375732653005, 0.05290328663586297, 0.058834113316189374, 0.06591692747502842, 0.03506308158726679, 0.08924418486682517, 0.07072693820065012, 0.07115224276865717, 0.10152153358024407, 0.06697752281348912, 0.09386098741497895, 0.07748365124106371, 0.08217196954889971, 0.06983175475441328, 0.10505178312602659, 0.07801867073374891, 0.07775343961530512, 0.05224036851249769, 0.09806771101687484, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12398150754531767, 0.026480636305764582, 0.11478896716659581, 0.019086380616214926, 0.0161828490301128, 0.04050106751160998, 0.0867150097493814, 0.06488334398697693, 0.08639752643616172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019869943237855292, 0.01944212523972222, 0.015815757112356166, 0.01077290889299276, 0.02649369164242177, 0.028830915740590934, 0.016552138388776116, 0.01457563750241897, 0.015429613354437266, 0.26138697914426945, 0.2964367460518782, 0.2705358275238776, 0.2363047923767786, 0.23752972149408647, 0.26826311612543796, 0.2820805521637926, 0.2990888499920641, 0.2554615020060679, 0.043105578629359265, 0.049908296283156184, 0.05814680907210401, 0.08016906102129906, 0.06519261453445346, 0.07358581051356683, 0.07845656455166827, 0.05889698979439595, 0.07053570957632949, 0.13327066452466974, 0.09814141576203073, 0.15772301972180047, 0.11373195596335794, 0.13749110583312507, 0.12752428799988047, 0.13440857020395158, 0.13574770457305896, 0.15455810017287153, 0.1810063835233383, 0.20876263645822768, 0.21223146557973227, 0.20604597788649237, 0.1882590107662837, 0.1825867779225998, 0.19643944693496873, 0.21285253196428378, 0.19122403165871116, 0.14168823127513808, 0.15631695085224306, 0.15666447050044807, 0.14767419667062254, 0.15554310023751228, 0.1381305815445325, 0.13758691408236723, 0.15749124301824358, 0.14202412939285058, 0.17121653842431894, 0.1745285914678688, 0.2032437749718784, 0.1737192039170501, 0.17381486995128193, 0.17032802950556414, 0.17061395354215603, 0.18703140437326238, 0.17896722191941894, 0.17070396139874433, 0.16016577250744035, 0.16771681473151712, 0.16333663233234053, 0.16045287781870177, 0.15767035317445266, 0.16911301074068796, 0.159995264258192, 0.16601435832597833, 0.2609818842444396, 0.16877971831310246, 0.16656648627464987, 0.17539471573713727, 0.1410822591108416, 0.16489327285704036, 0.3442070313125376, 0.13313410618187738, 0.30734113901670657, 0.1420316212209164, 0.2658485358056907, 0.0711740428121338, 0.16622141012412195, 0.13566327070490702, 0.1603520603967198, 0.16939270356108604, 0.22679738843076802, 0.19814881121442274, 0.17725633145644437, 0.16752340108009012, 0.15781945992981272, 0.17062617324198104, 0.1814020226159193, 0.17375881028988938, 0.17017240083753804, 0.16178045657852813, 0.16811390574130947, 0.06770914141475803, 0.061714167492443295, 0.06406532465497972, 0.06560357999669597, 0.07469521089279496, 0.07134115472793123, 0.07754399068243478, 0.07340929448741496, 0.07241274576772316]}, "mutation_prompt": null}
{"id": "1b86aba2-3216-4445-ae1d-7e9edd345f33", "solution": "import numpy as np\n\nclass NovelEnhancedFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.beta_max = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        def attractiveness(distance):\n            return self.beta_min + (self.beta_max - self.beta_min) * np.exp(-self.alpha * distance)\n\n        population = initialize_population()\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i, x in enumerate(population):\n                for j, y in enumerate(population):\n                    if func(y) < func(x):\n                        distance = np.linalg.norm(x - y)\n                        beta = attractiveness(distance)\n                        population[i] += beta * (y - x) + np.random.uniform(-1, 1, self.dim)\n                        \n                        # Introduce dynamic update of alpha and beta parameters with probability 0.2\n                        if np.random.rand() < 0.2:\n                            self.alpha = max(0.1, self.alpha - 0.001)  # Update alpha\n                            self.beta_min = max(0.2, self.beta_min - 0.001)  # Update beta_min\n                            self.beta_max = min(1.0, self.beta_max + 0.001)  # Update beta_max\n\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "NovelEnhancedFireflyAlgorithm", "description": "A Novel Enhanced Firefly Algorithm with Dynamic Parameter Adaptation for Black Box Optimization.", "configspace": "", "generation": 86, "fitness": 0.1326966823857367, "feedback": "The algorithm NovelEnhancedFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.11.", "error": "", "parent_id": "baa2cbc7-8cfd-4871-9c38-41f8dd4e4b7a", "metadata": {"aucs": [0.26364390636496104, 0.29300561854970686, 0.24428300964481153, 0.23939973834037565, 0.2467495273967748, 0.26842577731711703, 0.2522675017302819, 0.2575302638375875, 0.2534433022604047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0766572902498952, 0.07056466479399093, 0.06578702271483305, 0.09369028126931711, 0.060637128292857057, 0.06678864504557569, 0.06943100799359891, 0.07307976137468397, 0.07036514449132503, 0.06171576709414861, 0.04904287198228763, 0.08246375542491846, 0.06257926847592532, 0.04989649919135719, 0.04431647929424798, 0.05065140133167656, 0.048916498435184086, 0.0495503964402616, 0.4883742461836731, 0.438797396423358, 0.6545057569551385, 0.34697603929357623, 0.47435958221101304, 0.39859808836598754, 0.6193788045996, 0.44001113347465093, 0.6302589844516637, 0.16793892038650116, 0.10252009036107756, 0.09987720486596352, 0.121047571874901, 0.11763340472688066, 0.11625865848336547, 0.1356246793354332, 0.09309600868048729, 0.11877858216787152, 0.20402307215422266, 0.18490983246198334, 0.1709520884265341, 0.21821444656747946, 0.16914140677036538, 0.17078014268163566, 0.1558761893759092, 0.1841535022609182, 0.15539375732653005, 0.05290328663586297, 0.058834113316189374, 0.06591692747502842, 0.03506308158726679, 0.08924418486682517, 0.07072693820065012, 0.07115224276865717, 0.10152153358024407, 0.06697752281348912, 0.09386098741497895, 0.07748365124106371, 0.08217196954889971, 0.06983175475441328, 0.10505178312602659, 0.07801867073374891, 0.07775343961530512, 0.05224036851249769, 0.09806771101687484, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12398150754531767, 0.026480636305764582, 0.11478896716659581, 0.019086380616214926, 0.0161828490301128, 0.04050106751160998, 0.0867150097493814, 0.06488334398697693, 0.08639752643616172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019869943237855292, 0.01944212523972222, 0.015815757112356166, 0.01077290889299276, 0.02649369164242177, 0.028830915740590934, 0.016552138388776116, 0.01457563750241897, 0.015429613354437266, 0.26138697914426945, 0.2964367460518782, 0.2705358275238776, 0.2363047923767786, 0.23752972149408647, 0.26826311612543796, 0.2820805521637926, 0.2990888499920641, 0.2554615020060679, 0.043105578629359265, 0.049908296283156184, 0.05814680907210401, 0.08016906102129906, 0.06519261453445346, 0.07358581051356683, 0.07845656455166827, 0.05889698979439595, 0.07053570957632949, 0.13327066452466974, 0.09814141576203073, 0.15772301972180047, 0.11373195596335794, 0.13749110583312507, 0.12752428799988047, 0.13440857020395158, 0.13574770457305896, 0.15455810017287153, 0.1810063835233383, 0.20876263645822768, 0.21223146557973227, 0.20604597788649237, 0.1882590107662837, 0.1825867779225998, 0.19643944693496873, 0.21285253196428378, 0.19122403165871116, 0.14168823127513808, 0.15631695085224306, 0.15666447050044807, 0.14767419667062254, 0.15554310023751228, 0.1381305815445325, 0.13758691408236723, 0.15749124301824358, 0.14202412939285058, 0.17121653842431894, 0.1745285914678688, 0.2032437749718784, 0.1737192039170501, 0.17381486995128193, 0.17032802950556414, 0.17061395354215603, 0.18703140437326238, 0.17896722191941894, 0.17070396139874433, 0.16016577250744035, 0.16771681473151712, 0.16333663233234053, 0.16045287781870177, 0.15767035317445266, 0.16911301074068796, 0.159995264258192, 0.16601435832597833, 0.2609818842444396, 0.16877971831310246, 0.16656648627464987, 0.17539471573713727, 0.1410822591108416, 0.16489327285704036, 0.3442070313125376, 0.13313410618187738, 0.30734113901670657, 0.1420316212209164, 0.2658485358056907, 0.0711740428121338, 0.16622141012412195, 0.13566327070490702, 0.1603520603967198, 0.16939270356108604, 0.22679738843076802, 0.19814881121442274, 0.17725633145644437, 0.16752340108009012, 0.15781945992981272, 0.17062617324198104, 0.1814020226159193, 0.17375881028988938, 0.17017240083753804, 0.16178045657852813, 0.16811390574130947, 0.06770914141475803, 0.061714167492443295, 0.06406532465497972, 0.06560357999669597, 0.07469521089279496, 0.07134115472793123, 0.07754399068243478, 0.07340929448741496, 0.07241274576772316]}, "mutation_prompt": null}
{"id": "40cb21b3-72e3-465a-a086-7ff1709e4c84", "solution": "import numpy as np\n\nclass DynamicEnhancedAdaptiveFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.beta_max = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        def attractiveness(distance):\n            return self.beta_min + (self.beta_max - self.beta_min) * np.exp(-self.alpha * distance)\n\n        population = initialize_population()\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i, x in enumerate(population):\n                for j, y in enumerate(population):\n                    if func(y) < func(x):\n                        distance = np.linalg.norm(x - y)\n                        beta = attractiveness(distance)\n                        population[i] += beta * (y - x) + np.random.uniform(-1, 1, self.dim)\n                        \n                        # Introduce dynamic update of alpha and beta parameters with probability 0.2\n                        if np.random.rand() < 0.2:\n                            self.alpha = max(0.1, self.alpha - 0.001)  # Update alpha\n                            self.beta_max = min(1.0, self.beta_max + 0.001)  # Update beta_max\n\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "DynamicEnhancedAdaptiveFireflyAlgorithm", "description": "Dynamic Enhanced Adaptive Firefly Algorithm with Parameter Fine-tuning for Black Box Optimization.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "baa2cbc7-8cfd-4871-9c38-41f8dd4e4b7a", "metadata": {"aucs": [0.26364390636496104, 0.29300561854970686, 0.24428300964481153, 0.23939973834037565, 0.2467495273967748, 0.26842577731711703, 0.2522675017302819, 0.2575302638375875, 0.2534433022604047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0766572902498952, 0.07056466479399093, 0.06578702271483305, 0.09369028126931711, 0.060637128292857057, 0.06678864504557569, 0.06943100799359891, 0.07307976137468397, 0.07036514449132503, 0.06171576709414861, 0.04904287198228763, 0.08246375542491846, 0.06257926847592532, 0.04989649919135719, 0.04431647929424798, 0.05065140133167656, 0.048916498435184086, 0.0495503964402616, 0.4883742461836731, 0.438797396423358, 0.6545057569551385, 0.34697603929357623, 0.47435958221101304, 0.39859808836598754, 0.6193788045996, 0.44001113347465093, 0.6302589844516637, 0.16793892038650116, 0.10252009036107756, 0.09987720486596352, 0.121047571874901, 0.11763340472688066, 0.11625865848336547, 0.1356246793354332, 0.09309600868048729, 0.11877858216787152, 0.20402307215422266, 0.18490983246198334, 0.1709520884265341, 0.21821444656747946, 0.16914140677036538, 0.17078014268163566, 0.1558761893759092, 0.1841535022609182, 0.15539375732653005, 0.05290328663586297, 0.058834113316189374, 0.06591692747502842, 0.03506308158726679, 0.08924418486682517, 0.07072693820065012, 0.07115224276865717, 0.10152153358024407, 0.06697752281348912, 0.09386098741497895, 0.07748365124106371, 0.08217196954889971, 0.06983175475441328, 0.10505178312602659, 0.07801867073374891, 0.07775343961530512, 0.05224036851249769, 0.09806771101687484, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12398150754531767, 0.026480636305764582, 0.11478896716659581, 0.019086380616214926, 0.0161828490301128, 0.04050106751160998, 0.0867150097493814, 0.06488334398697693, 0.08639752643616172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019869943237855292, 0.01944212523972222, 0.015815757112356166, 0.01077290889299276, 0.02649369164242177, 0.028830915740590934, 0.016552138388776116, 0.01457563750241897, 0.015429613354437266, 0.26138697914426945, 0.2964367460518782, 0.2705358275238776, 0.2363047923767786, 0.23752972149408647, 0.26826311612543796, 0.2820805521637926, 0.2990888499920641, 0.2554615020060679, 0.043105578629359265, 0.049908296283156184, 0.05814680907210401, 0.08016906102129906, 0.06519261453445346, 0.07358581051356683, 0.07845656455166827, 0.05889698979439595, 0.07053570957632949, 0.13327066452466974, 0.09814141576203073, 0.15772301972180047, 0.11373195596335794, 0.13749110583312507, 0.12752428799988047, 0.13440857020395158, 0.13574770457305896, 0.15455810017287153, 0.1810063835233383, 0.20876263645822768, 0.21223146557973227, 0.20604597788649237, 0.1882590107662837, 0.1825867779225998, 0.19643944693496873, 0.21285253196428378, 0.19122403165871116, 0.14168823127513808, 0.15631695085224306, 0.15666447050044807, 0.14767419667062254, 0.15554310023751228, 0.1381305815445325, 0.13758691408236723, 0.15749124301824358, 0.14202412939285058, 0.17121653842431894, 0.1745285914678688, 0.2032437749718784, 0.1737192039170501, 0.17381486995128193, 0.17032802950556414, 0.17061395354215603, 0.18703140437326238, 0.17896722191941894, 0.17070396139874433, 0.16016577250744035, 0.16771681473151712, 0.16333663233234053, 0.16045287781870177, 0.15767035317445266, 0.16911301074068796, 0.159995264258192, 0.16601435832597833, 0.2609818842444396, 0.16877971831310246, 0.16656648627464987, 0.17539471573713727, 0.1410822591108416, 0.16489327285704036, 0.3442070313125376, 0.13313410618187738, 0.30734113901670657, 0.1420316212209164, 0.2658485358056907, 0.0711740428121338, 0.16622141012412195, 0.13566327070490702, 0.1603520603967198, 0.16939270356108604, 0.22679738843076802, 0.19814881121442274, 0.17725633145644437, 0.16752340108009012, 0.15781945992981272, 0.17062617324198104, 0.1814020226159193, 0.17375881028988938, 0.17017240083753804, 0.16178045657852813, 0.16811390574130947, 0.06770914141475803, 0.061714167492443295, 0.06406532465497972, 0.06560357999669597, 0.07469521089279496, 0.07134115472793123, 0.07754399068243478, 0.07340929448741496, 0.07241274576772316]}, "mutation_prompt": null}
{"id": "255d9113-9c1e-4b18-9e8b-8b629f6da70b", "solution": "import numpy as np\n\nclass DynamicEnhancedAdaptiveFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.beta_max = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        def attractiveness(distance):\n            return self.beta_min + (self.beta_max - self.beta_min) * np.exp(-self.alpha * distance)\n\n        population = initialize_population()\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i, x in enumerate(population):\n                for j, y in enumerate(population):\n                    if func(y) < func(x):\n                        distance = np.linalg.norm(x - y)\n                        beta = attractiveness(distance)\n                        population[i] += beta * (y - x) + np.random.uniform(-1, 1, self.dim)\n                        \n                        # Introduce dynamic update of alpha and beta parameters with probability 0.2\n                        if np.random.rand() < 0.2:\n                            self.alpha = max(0.1, self.alpha - 0.001)  # Update alpha\n                            self.beta_max = min(1.0, self.beta_max + 0.001)  # Update beta_max\n\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "DynamicEnhancedAdaptiveFireflyAlgorithm", "description": "Dynamic Enhanced Adaptive Firefly Algorithm with Fine-tuned Parameters for Black Box Optimization with Dynamic Parameter Updates based on a Probability of 0.2.", "configspace": "", "generation": 88, "fitness": 0.1326966823857367, "feedback": "The algorithm DynamicEnhancedAdaptiveFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.11.", "error": "", "parent_id": "baa2cbc7-8cfd-4871-9c38-41f8dd4e4b7a", "metadata": {"aucs": [0.26364390636496104, 0.29300561854970686, 0.24428300964481153, 0.23939973834037565, 0.2467495273967748, 0.26842577731711703, 0.2522675017302819, 0.2575302638375875, 0.2534433022604047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0766572902498952, 0.07056466479399093, 0.06578702271483305, 0.09369028126931711, 0.060637128292857057, 0.06678864504557569, 0.06943100799359891, 0.07307976137468397, 0.07036514449132503, 0.06171576709414861, 0.04904287198228763, 0.08246375542491846, 0.06257926847592532, 0.04989649919135719, 0.04431647929424798, 0.05065140133167656, 0.048916498435184086, 0.0495503964402616, 0.4883742461836731, 0.438797396423358, 0.6545057569551385, 0.34697603929357623, 0.47435958221101304, 0.39859808836598754, 0.6193788045996, 0.44001113347465093, 0.6302589844516637, 0.16793892038650116, 0.10252009036107756, 0.09987720486596352, 0.121047571874901, 0.11763340472688066, 0.11625865848336547, 0.1356246793354332, 0.09309600868048729, 0.11877858216787152, 0.20402307215422266, 0.18490983246198334, 0.1709520884265341, 0.21821444656747946, 0.16914140677036538, 0.17078014268163566, 0.1558761893759092, 0.1841535022609182, 0.15539375732653005, 0.05290328663586297, 0.058834113316189374, 0.06591692747502842, 0.03506308158726679, 0.08924418486682517, 0.07072693820065012, 0.07115224276865717, 0.10152153358024407, 0.06697752281348912, 0.09386098741497895, 0.07748365124106371, 0.08217196954889971, 0.06983175475441328, 0.10505178312602659, 0.07801867073374891, 0.07775343961530512, 0.05224036851249769, 0.09806771101687484, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12398150754531767, 0.026480636305764582, 0.11478896716659581, 0.019086380616214926, 0.0161828490301128, 0.04050106751160998, 0.0867150097493814, 0.06488334398697693, 0.08639752643616172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019869943237855292, 0.01944212523972222, 0.015815757112356166, 0.01077290889299276, 0.02649369164242177, 0.028830915740590934, 0.016552138388776116, 0.01457563750241897, 0.015429613354437266, 0.26138697914426945, 0.2964367460518782, 0.2705358275238776, 0.2363047923767786, 0.23752972149408647, 0.26826311612543796, 0.2820805521637926, 0.2990888499920641, 0.2554615020060679, 0.043105578629359265, 0.049908296283156184, 0.05814680907210401, 0.08016906102129906, 0.06519261453445346, 0.07358581051356683, 0.07845656455166827, 0.05889698979439595, 0.07053570957632949, 0.13327066452466974, 0.09814141576203073, 0.15772301972180047, 0.11373195596335794, 0.13749110583312507, 0.12752428799988047, 0.13440857020395158, 0.13574770457305896, 0.15455810017287153, 0.1810063835233383, 0.20876263645822768, 0.21223146557973227, 0.20604597788649237, 0.1882590107662837, 0.1825867779225998, 0.19643944693496873, 0.21285253196428378, 0.19122403165871116, 0.14168823127513808, 0.15631695085224306, 0.15666447050044807, 0.14767419667062254, 0.15554310023751228, 0.1381305815445325, 0.13758691408236723, 0.15749124301824358, 0.14202412939285058, 0.17121653842431894, 0.1745285914678688, 0.2032437749718784, 0.1737192039170501, 0.17381486995128193, 0.17032802950556414, 0.17061395354215603, 0.18703140437326238, 0.17896722191941894, 0.17070396139874433, 0.16016577250744035, 0.16771681473151712, 0.16333663233234053, 0.16045287781870177, 0.15767035317445266, 0.16911301074068796, 0.159995264258192, 0.16601435832597833, 0.2609818842444396, 0.16877971831310246, 0.16656648627464987, 0.17539471573713727, 0.1410822591108416, 0.16489327285704036, 0.3442070313125376, 0.13313410618187738, 0.30734113901670657, 0.1420316212209164, 0.2658485358056907, 0.0711740428121338, 0.16622141012412195, 0.13566327070490702, 0.1603520603967198, 0.16939270356108604, 0.22679738843076802, 0.19814881121442274, 0.17725633145644437, 0.16752340108009012, 0.15781945992981272, 0.17062617324198104, 0.1814020226159193, 0.17375881028988938, 0.17017240083753804, 0.16178045657852813, 0.16811390574130947, 0.06770914141475803, 0.061714167492443295, 0.06406532465497972, 0.06560357999669597, 0.07469521089279496, 0.07134115472793123, 0.07754399068243478, 0.07340929448741496, 0.07241274576772316]}, "mutation_prompt": null}
{"id": "98e7b7b3-4be7-4007-b3bc-e07d61ab927e", "solution": "import numpy as np\n\nclass DynamicEnhancedAdaptiveFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.beta_max = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        def attractiveness(distance):\n            return self.beta_min + (self.beta_max - self.beta_min) * np.exp(-self.alpha * distance)\n\n        population = initialize_population()\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i, x in enumerate(population):\n                for j, y in enumerate(population):\n                    if func(y) < func(x):\n                        distance = np.linalg.norm(x - y)\n                        beta = attractiveness(distance)\n                        population[i] += beta * (y - x) + np.random.uniform(-1, 1, self.dim)\n                        \n                        # Introduce dynamic update of alpha and beta parameters with probability 0.2\n                        if np.random.rand() < 0.2:\n                            self.alpha = max(0.1, self.alpha - 0.001)  # Update alpha\n                            self.beta_max = min(1.0, self.beta_max + 0.001)  # Update beta_max\n\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "DynamicEnhancedAdaptiveFireflyAlgorithm", "description": "Dynamic Enhanced Adaptive Firefly Algorithm with Parameter Fine-tuning for Black Box Optimization.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "baa2cbc7-8cfd-4871-9c38-41f8dd4e4b7a", "metadata": {"aucs": [0.26364390636496104, 0.29300561854970686, 0.24428300964481153, 0.23939973834037565, 0.2467495273967748, 0.26842577731711703, 0.2522675017302819, 0.2575302638375875, 0.2534433022604047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0766572902498952, 0.07056466479399093, 0.06578702271483305, 0.09369028126931711, 0.060637128292857057, 0.06678864504557569, 0.06943100799359891, 0.07307976137468397, 0.07036514449132503, 0.06171576709414861, 0.04904287198228763, 0.08246375542491846, 0.06257926847592532, 0.04989649919135719, 0.04431647929424798, 0.05065140133167656, 0.048916498435184086, 0.0495503964402616, 0.4883742461836731, 0.438797396423358, 0.6545057569551385, 0.34697603929357623, 0.47435958221101304, 0.39859808836598754, 0.6193788045996, 0.44001113347465093, 0.6302589844516637, 0.16793892038650116, 0.10252009036107756, 0.09987720486596352, 0.121047571874901, 0.11763340472688066, 0.11625865848336547, 0.1356246793354332, 0.09309600868048729, 0.11877858216787152, 0.20402307215422266, 0.18490983246198334, 0.1709520884265341, 0.21821444656747946, 0.16914140677036538, 0.17078014268163566, 0.1558761893759092, 0.1841535022609182, 0.15539375732653005, 0.05290328663586297, 0.058834113316189374, 0.06591692747502842, 0.03506308158726679, 0.08924418486682517, 0.07072693820065012, 0.07115224276865717, 0.10152153358024407, 0.06697752281348912, 0.09386098741497895, 0.07748365124106371, 0.08217196954889971, 0.06983175475441328, 0.10505178312602659, 0.07801867073374891, 0.07775343961530512, 0.05224036851249769, 0.09806771101687484, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12398150754531767, 0.026480636305764582, 0.11478896716659581, 0.019086380616214926, 0.0161828490301128, 0.04050106751160998, 0.0867150097493814, 0.06488334398697693, 0.08639752643616172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019869943237855292, 0.01944212523972222, 0.015815757112356166, 0.01077290889299276, 0.02649369164242177, 0.028830915740590934, 0.016552138388776116, 0.01457563750241897, 0.015429613354437266, 0.26138697914426945, 0.2964367460518782, 0.2705358275238776, 0.2363047923767786, 0.23752972149408647, 0.26826311612543796, 0.2820805521637926, 0.2990888499920641, 0.2554615020060679, 0.043105578629359265, 0.049908296283156184, 0.05814680907210401, 0.08016906102129906, 0.06519261453445346, 0.07358581051356683, 0.07845656455166827, 0.05889698979439595, 0.07053570957632949, 0.13327066452466974, 0.09814141576203073, 0.15772301972180047, 0.11373195596335794, 0.13749110583312507, 0.12752428799988047, 0.13440857020395158, 0.13574770457305896, 0.15455810017287153, 0.1810063835233383, 0.20876263645822768, 0.21223146557973227, 0.20604597788649237, 0.1882590107662837, 0.1825867779225998, 0.19643944693496873, 0.21285253196428378, 0.19122403165871116, 0.14168823127513808, 0.15631695085224306, 0.15666447050044807, 0.14767419667062254, 0.15554310023751228, 0.1381305815445325, 0.13758691408236723, 0.15749124301824358, 0.14202412939285058, 0.17121653842431894, 0.1745285914678688, 0.2032437749718784, 0.1737192039170501, 0.17381486995128193, 0.17032802950556414, 0.17061395354215603, 0.18703140437326238, 0.17896722191941894, 0.17070396139874433, 0.16016577250744035, 0.16771681473151712, 0.16333663233234053, 0.16045287781870177, 0.15767035317445266, 0.16911301074068796, 0.159995264258192, 0.16601435832597833, 0.2609818842444396, 0.16877971831310246, 0.16656648627464987, 0.17539471573713727, 0.1410822591108416, 0.16489327285704036, 0.3442070313125376, 0.13313410618187738, 0.30734113901670657, 0.1420316212209164, 0.2658485358056907, 0.0711740428121338, 0.16622141012412195, 0.13566327070490702, 0.1603520603967198, 0.16939270356108604, 0.22679738843076802, 0.19814881121442274, 0.17725633145644437, 0.16752340108009012, 0.15781945992981272, 0.17062617324198104, 0.1814020226159193, 0.17375881028988938, 0.17017240083753804, 0.16178045657852813, 0.16811390574130947, 0.06770914141475803, 0.061714167492443295, 0.06406532465497972, 0.06560357999669597, 0.07469521089279496, 0.07134115472793123, 0.07754399068243478, 0.07340929448741496, 0.07241274576772316]}, "mutation_prompt": null}
{"id": "3b647f03-71c9-4663-a4dd-14a376c5357a", "solution": "import numpy as np\n\nclass DynamicEnhancedAdaptiveFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.beta_max = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        def attractiveness(distance):\n            return self.beta_min + (self.beta_max - self.beta_min) * np.exp(-self.alpha * distance)\n\n        population = initialize_population()\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i, x in enumerate(population):\n                for j, y in enumerate(population):\n                    if func(y) < func(x):\n                        distance = np.linalg.norm(x - y)\n                        beta = attractiveness(distance)\n                        population[i] += beta * (y - x) + np.random.uniform(-1, 1, self.dim)\n                        \n                        # Introduce dynamic update of alpha and beta parameters with probability 0.2\n                        if np.random.rand() < 0.2:\n                            self.alpha = max(0.1, self.alpha - 0.001)  # Update alpha\n                            self.beta_max = min(1.0, self.beta_max + 0.001)  # Update beta_max\n\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "DynamicEnhancedAdaptiveFireflyAlgorithm", "description": "Dynamic Enhanced Adaptive Firefly Algorithm with Parameter Fine-tuning for Black Box Optimization.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "baa2cbc7-8cfd-4871-9c38-41f8dd4e4b7a", "metadata": {"aucs": [0.26364390636496104, 0.29300561854970686, 0.24428300964481153, 0.23939973834037565, 0.2467495273967748, 0.26842577731711703, 0.2522675017302819, 0.2575302638375875, 0.2534433022604047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0766572902498952, 0.07056466479399093, 0.06578702271483305, 0.09369028126931711, 0.060637128292857057, 0.06678864504557569, 0.06943100799359891, 0.07307976137468397, 0.07036514449132503, 0.06171576709414861, 0.04904287198228763, 0.08246375542491846, 0.06257926847592532, 0.04989649919135719, 0.04431647929424798, 0.05065140133167656, 0.048916498435184086, 0.0495503964402616, 0.4883742461836731, 0.438797396423358, 0.6545057569551385, 0.34697603929357623, 0.47435958221101304, 0.39859808836598754, 0.6193788045996, 0.44001113347465093, 0.6302589844516637, 0.16793892038650116, 0.10252009036107756, 0.09987720486596352, 0.121047571874901, 0.11763340472688066, 0.11625865848336547, 0.1356246793354332, 0.09309600868048729, 0.11877858216787152, 0.20402307215422266, 0.18490983246198334, 0.1709520884265341, 0.21821444656747946, 0.16914140677036538, 0.17078014268163566, 0.1558761893759092, 0.1841535022609182, 0.15539375732653005, 0.05290328663586297, 0.058834113316189374, 0.06591692747502842, 0.03506308158726679, 0.08924418486682517, 0.07072693820065012, 0.07115224276865717, 0.10152153358024407, 0.06697752281348912, 0.09386098741497895, 0.07748365124106371, 0.08217196954889971, 0.06983175475441328, 0.10505178312602659, 0.07801867073374891, 0.07775343961530512, 0.05224036851249769, 0.09806771101687484, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12398150754531767, 0.026480636305764582, 0.11478896716659581, 0.019086380616214926, 0.0161828490301128, 0.04050106751160998, 0.0867150097493814, 0.06488334398697693, 0.08639752643616172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019869943237855292, 0.01944212523972222, 0.015815757112356166, 0.01077290889299276, 0.02649369164242177, 0.028830915740590934, 0.016552138388776116, 0.01457563750241897, 0.015429613354437266, 0.26138697914426945, 0.2964367460518782, 0.2705358275238776, 0.2363047923767786, 0.23752972149408647, 0.26826311612543796, 0.2820805521637926, 0.2990888499920641, 0.2554615020060679, 0.043105578629359265, 0.049908296283156184, 0.05814680907210401, 0.08016906102129906, 0.06519261453445346, 0.07358581051356683, 0.07845656455166827, 0.05889698979439595, 0.07053570957632949, 0.13327066452466974, 0.09814141576203073, 0.15772301972180047, 0.11373195596335794, 0.13749110583312507, 0.12752428799988047, 0.13440857020395158, 0.13574770457305896, 0.15455810017287153, 0.1810063835233383, 0.20876263645822768, 0.21223146557973227, 0.20604597788649237, 0.1882590107662837, 0.1825867779225998, 0.19643944693496873, 0.21285253196428378, 0.19122403165871116, 0.14168823127513808, 0.15631695085224306, 0.15666447050044807, 0.14767419667062254, 0.15554310023751228, 0.1381305815445325, 0.13758691408236723, 0.15749124301824358, 0.14202412939285058, 0.17121653842431894, 0.1745285914678688, 0.2032437749718784, 0.1737192039170501, 0.17381486995128193, 0.17032802950556414, 0.17061395354215603, 0.18703140437326238, 0.17896722191941894, 0.17070396139874433, 0.16016577250744035, 0.16771681473151712, 0.16333663233234053, 0.16045287781870177, 0.15767035317445266, 0.16911301074068796, 0.159995264258192, 0.16601435832597833, 0.2609818842444396, 0.16877971831310246, 0.16656648627464987, 0.17539471573713727, 0.1410822591108416, 0.16489327285704036, 0.3442070313125376, 0.13313410618187738, 0.30734113901670657, 0.1420316212209164, 0.2658485358056907, 0.0711740428121338, 0.16622141012412195, 0.13566327070490702, 0.1603520603967198, 0.16939270356108604, 0.22679738843076802, 0.19814881121442274, 0.17725633145644437, 0.16752340108009012, 0.15781945992981272, 0.17062617324198104, 0.1814020226159193, 0.17375881028988938, 0.17017240083753804, 0.16178045657852813, 0.16811390574130947, 0.06770914141475803, 0.061714167492443295, 0.06406532465497972, 0.06560357999669597, 0.07469521089279496, 0.07134115472793123, 0.07754399068243478, 0.07340929448741496, 0.07241274576772316]}, "mutation_prompt": null}
{"id": "b6146b6f-9276-4ec4-ab8a-f79941ba42b1", "solution": "import numpy as np\n\nclass DynamicEnhancedAdaptiveFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.beta_max = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        def attractiveness(distance):\n            return self.beta_min + (self.beta_max - self.beta_min) * np.exp(-self.alpha * distance)\n\n        population = initialize_population()\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i, x in enumerate(population):\n                for j, y in enumerate(population):\n                    if func(y) < func(x):\n                        distance = np.linalg.norm(x - y)\n                        beta = attractiveness(distance)\n                        population[i] += beta * (y - x) + np.random.uniform(-1, 1, self.dim)\n                        \n                        # Introduce dynamic update of alpha and beta parameters with probability 0.2\n                        if np.random.rand() < 0.2:\n                            self.alpha = max(0.1, self.alpha - 0.001)  # Update alpha\n                            self.beta_max = min(1.0, self.beta_max + 0.001)  # Update beta_max\n\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "DynamicEnhancedAdaptiveFireflyAlgorithm", "description": "Dynamic Enhanced Adaptive Firefly Algorithm with Parameter Fine-tuning for Black Box Optimization.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "baa2cbc7-8cfd-4871-9c38-41f8dd4e4b7a", "metadata": {"aucs": [0.26364390636496104, 0.29300561854970686, 0.24428300964481153, 0.23939973834037565, 0.2467495273967748, 0.26842577731711703, 0.2522675017302819, 0.2575302638375875, 0.2534433022604047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0766572902498952, 0.07056466479399093, 0.06578702271483305, 0.09369028126931711, 0.060637128292857057, 0.06678864504557569, 0.06943100799359891, 0.07307976137468397, 0.07036514449132503, 0.06171576709414861, 0.04904287198228763, 0.08246375542491846, 0.06257926847592532, 0.04989649919135719, 0.04431647929424798, 0.05065140133167656, 0.048916498435184086, 0.0495503964402616, 0.4883742461836731, 0.438797396423358, 0.6545057569551385, 0.34697603929357623, 0.47435958221101304, 0.39859808836598754, 0.6193788045996, 0.44001113347465093, 0.6302589844516637, 0.16793892038650116, 0.10252009036107756, 0.09987720486596352, 0.121047571874901, 0.11763340472688066, 0.11625865848336547, 0.1356246793354332, 0.09309600868048729, 0.11877858216787152, 0.20402307215422266, 0.18490983246198334, 0.1709520884265341, 0.21821444656747946, 0.16914140677036538, 0.17078014268163566, 0.1558761893759092, 0.1841535022609182, 0.15539375732653005, 0.05290328663586297, 0.058834113316189374, 0.06591692747502842, 0.03506308158726679, 0.08924418486682517, 0.07072693820065012, 0.07115224276865717, 0.10152153358024407, 0.06697752281348912, 0.09386098741497895, 0.07748365124106371, 0.08217196954889971, 0.06983175475441328, 0.10505178312602659, 0.07801867073374891, 0.07775343961530512, 0.05224036851249769, 0.09806771101687484, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12398150754531767, 0.026480636305764582, 0.11478896716659581, 0.019086380616214926, 0.0161828490301128, 0.04050106751160998, 0.0867150097493814, 0.06488334398697693, 0.08639752643616172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019869943237855292, 0.01944212523972222, 0.015815757112356166, 0.01077290889299276, 0.02649369164242177, 0.028830915740590934, 0.016552138388776116, 0.01457563750241897, 0.015429613354437266, 0.26138697914426945, 0.2964367460518782, 0.2705358275238776, 0.2363047923767786, 0.23752972149408647, 0.26826311612543796, 0.2820805521637926, 0.2990888499920641, 0.2554615020060679, 0.043105578629359265, 0.049908296283156184, 0.05814680907210401, 0.08016906102129906, 0.06519261453445346, 0.07358581051356683, 0.07845656455166827, 0.05889698979439595, 0.07053570957632949, 0.13327066452466974, 0.09814141576203073, 0.15772301972180047, 0.11373195596335794, 0.13749110583312507, 0.12752428799988047, 0.13440857020395158, 0.13574770457305896, 0.15455810017287153, 0.1810063835233383, 0.20876263645822768, 0.21223146557973227, 0.20604597788649237, 0.1882590107662837, 0.1825867779225998, 0.19643944693496873, 0.21285253196428378, 0.19122403165871116, 0.14168823127513808, 0.15631695085224306, 0.15666447050044807, 0.14767419667062254, 0.15554310023751228, 0.1381305815445325, 0.13758691408236723, 0.15749124301824358, 0.14202412939285058, 0.17121653842431894, 0.1745285914678688, 0.2032437749718784, 0.1737192039170501, 0.17381486995128193, 0.17032802950556414, 0.17061395354215603, 0.18703140437326238, 0.17896722191941894, 0.17070396139874433, 0.16016577250744035, 0.16771681473151712, 0.16333663233234053, 0.16045287781870177, 0.15767035317445266, 0.16911301074068796, 0.159995264258192, 0.16601435832597833, 0.2609818842444396, 0.16877971831310246, 0.16656648627464987, 0.17539471573713727, 0.1410822591108416, 0.16489327285704036, 0.3442070313125376, 0.13313410618187738, 0.30734113901670657, 0.1420316212209164, 0.2658485358056907, 0.0711740428121338, 0.16622141012412195, 0.13566327070490702, 0.1603520603967198, 0.16939270356108604, 0.22679738843076802, 0.19814881121442274, 0.17725633145644437, 0.16752340108009012, 0.15781945992981272, 0.17062617324198104, 0.1814020226159193, 0.17375881028988938, 0.17017240083753804, 0.16178045657852813, 0.16811390574130947, 0.06770914141475803, 0.061714167492443295, 0.06406532465497972, 0.06560357999669597, 0.07469521089279496, 0.07134115472793123, 0.07754399068243478, 0.07340929448741496, 0.07241274576772316]}, "mutation_prompt": null}
{"id": "7fa227d3-a546-4dab-acef-31d1157a9039", "solution": "import numpy as np\n\nclass DynamicEnhancedAdaptiveFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.beta_max = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        def attractiveness(distance):\n            return self.beta_min + (self.beta_max - self.beta_min) * np.exp(-self.alpha * distance)\n\n        population = initialize_population()\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i, x in enumerate(population):\n                for j, y in enumerate(population):\n                    if func(y) < func(x):\n                        distance = np.linalg.norm(x - y)\n                        beta = attractiveness(distance)\n                        population[i] += beta * (y - x) + np.random.uniform(-1, 1, self.dim)\n                        \n                        # Introduce dynamic update of alpha and beta parameters with probability 0.2\n                        if np.random.rand() < 0.2:\n                            self.alpha = max(0.1, self.alpha - 0.001)  # Update alpha\n                            self.beta_max = min(1.0, self.beta_max + 0.001)  # Update beta_max\n\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "DynamicEnhancedAdaptiveFireflyAlgorithm", "description": "Dynamic Enhanced Adaptive Firefly Algorithm with Parameter Fine-tuning for Black Box Optimization.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "baa2cbc7-8cfd-4871-9c38-41f8dd4e4b7a", "metadata": {"aucs": [0.26364390636496104, 0.29300561854970686, 0.24428300964481153, 0.23939973834037565, 0.2467495273967748, 0.26842577731711703, 0.2522675017302819, 0.2575302638375875, 0.2534433022604047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0766572902498952, 0.07056466479399093, 0.06578702271483305, 0.09369028126931711, 0.060637128292857057, 0.06678864504557569, 0.06943100799359891, 0.07307976137468397, 0.07036514449132503, 0.06171576709414861, 0.04904287198228763, 0.08246375542491846, 0.06257926847592532, 0.04989649919135719, 0.04431647929424798, 0.05065140133167656, 0.048916498435184086, 0.0495503964402616, 0.4883742461836731, 0.438797396423358, 0.6545057569551385, 0.34697603929357623, 0.47435958221101304, 0.39859808836598754, 0.6193788045996, 0.44001113347465093, 0.6302589844516637, 0.16793892038650116, 0.10252009036107756, 0.09987720486596352, 0.121047571874901, 0.11763340472688066, 0.11625865848336547, 0.1356246793354332, 0.09309600868048729, 0.11877858216787152, 0.20402307215422266, 0.18490983246198334, 0.1709520884265341, 0.21821444656747946, 0.16914140677036538, 0.17078014268163566, 0.1558761893759092, 0.1841535022609182, 0.15539375732653005, 0.05290328663586297, 0.058834113316189374, 0.06591692747502842, 0.03506308158726679, 0.08924418486682517, 0.07072693820065012, 0.07115224276865717, 0.10152153358024407, 0.06697752281348912, 0.09386098741497895, 0.07748365124106371, 0.08217196954889971, 0.06983175475441328, 0.10505178312602659, 0.07801867073374891, 0.07775343961530512, 0.05224036851249769, 0.09806771101687484, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12398150754531767, 0.026480636305764582, 0.11478896716659581, 0.019086380616214926, 0.0161828490301128, 0.04050106751160998, 0.0867150097493814, 0.06488334398697693, 0.08639752643616172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019869943237855292, 0.01944212523972222, 0.015815757112356166, 0.01077290889299276, 0.02649369164242177, 0.028830915740590934, 0.016552138388776116, 0.01457563750241897, 0.015429613354437266, 0.26138697914426945, 0.2964367460518782, 0.2705358275238776, 0.2363047923767786, 0.23752972149408647, 0.26826311612543796, 0.2820805521637926, 0.2990888499920641, 0.2554615020060679, 0.043105578629359265, 0.049908296283156184, 0.05814680907210401, 0.08016906102129906, 0.06519261453445346, 0.07358581051356683, 0.07845656455166827, 0.05889698979439595, 0.07053570957632949, 0.13327066452466974, 0.09814141576203073, 0.15772301972180047, 0.11373195596335794, 0.13749110583312507, 0.12752428799988047, 0.13440857020395158, 0.13574770457305896, 0.15455810017287153, 0.1810063835233383, 0.20876263645822768, 0.21223146557973227, 0.20604597788649237, 0.1882590107662837, 0.1825867779225998, 0.19643944693496873, 0.21285253196428378, 0.19122403165871116, 0.14168823127513808, 0.15631695085224306, 0.15666447050044807, 0.14767419667062254, 0.15554310023751228, 0.1381305815445325, 0.13758691408236723, 0.15749124301824358, 0.14202412939285058, 0.17121653842431894, 0.1745285914678688, 0.2032437749718784, 0.1737192039170501, 0.17381486995128193, 0.17032802950556414, 0.17061395354215603, 0.18703140437326238, 0.17896722191941894, 0.17070396139874433, 0.16016577250744035, 0.16771681473151712, 0.16333663233234053, 0.16045287781870177, 0.15767035317445266, 0.16911301074068796, 0.159995264258192, 0.16601435832597833, 0.2609818842444396, 0.16877971831310246, 0.16656648627464987, 0.17539471573713727, 0.1410822591108416, 0.16489327285704036, 0.3442070313125376, 0.13313410618187738, 0.30734113901670657, 0.1420316212209164, 0.2658485358056907, 0.0711740428121338, 0.16622141012412195, 0.13566327070490702, 0.1603520603967198, 0.16939270356108604, 0.22679738843076802, 0.19814881121442274, 0.17725633145644437, 0.16752340108009012, 0.15781945992981272, 0.17062617324198104, 0.1814020226159193, 0.17375881028988938, 0.17017240083753804, 0.16178045657852813, 0.16811390574130947, 0.06770914141475803, 0.061714167492443295, 0.06406532465497972, 0.06560357999669597, 0.07469521089279496, 0.07134115472793123, 0.07754399068243478, 0.07340929448741496, 0.07241274576772316]}, "mutation_prompt": null}
{"id": "f00b3eb3-7453-48c4-9ab2-37e5415e29d9", "solution": "import numpy as np\n\nclass DynamicEnhancedAdaptiveFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.beta_max = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        def attractiveness(distance):\n            return self.beta_min + (self.beta_max - self.beta_min) * np.exp(-self.alpha * distance)\n\n        population = initialize_population()\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i, x in enumerate(population):\n                for j, y in enumerate(population):\n                    if func(y) < func(x):\n                        distance = np.linalg.norm(x - y)\n                        beta = attractiveness(distance)\n                        population[i] += beta * (y - x) + np.random.uniform(-1, 1, self.dim)\n                        \n                        # Introduce dynamic update of alpha and beta parameters with probability 0.2\n                        if np.random.rand() < 0.2:\n                            self.alpha = max(0.1, self.alpha - 0.001)  # Update alpha\n                            self.beta_max = min(1.0, self.beta_max + 0.001)  # Update beta_max\n\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "DynamicEnhancedAdaptiveFireflyAlgorithm", "description": "Dynamic Enhanced Adaptive Firefly Algorithm with Parameter Fine-tuning for Black Box Optimization.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "baa2cbc7-8cfd-4871-9c38-41f8dd4e4b7a", "metadata": {"aucs": [0.26364390636496104, 0.29300561854970686, 0.24428300964481153, 0.23939973834037565, 0.2467495273967748, 0.26842577731711703, 0.2522675017302819, 0.2575302638375875, 0.2534433022604047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0766572902498952, 0.07056466479399093, 0.06578702271483305, 0.09369028126931711, 0.060637128292857057, 0.06678864504557569, 0.06943100799359891, 0.07307976137468397, 0.07036514449132503, 0.06171576709414861, 0.04904287198228763, 0.08246375542491846, 0.06257926847592532, 0.04989649919135719, 0.04431647929424798, 0.05065140133167656, 0.048916498435184086, 0.0495503964402616, 0.4883742461836731, 0.438797396423358, 0.6545057569551385, 0.34697603929357623, 0.47435958221101304, 0.39859808836598754, 0.6193788045996, 0.44001113347465093, 0.6302589844516637, 0.16793892038650116, 0.10252009036107756, 0.09987720486596352, 0.121047571874901, 0.11763340472688066, 0.11625865848336547, 0.1356246793354332, 0.09309600868048729, 0.11877858216787152, 0.20402307215422266, 0.18490983246198334, 0.1709520884265341, 0.21821444656747946, 0.16914140677036538, 0.17078014268163566, 0.1558761893759092, 0.1841535022609182, 0.15539375732653005, 0.05290328663586297, 0.058834113316189374, 0.06591692747502842, 0.03506308158726679, 0.08924418486682517, 0.07072693820065012, 0.07115224276865717, 0.10152153358024407, 0.06697752281348912, 0.09386098741497895, 0.07748365124106371, 0.08217196954889971, 0.06983175475441328, 0.10505178312602659, 0.07801867073374891, 0.07775343961530512, 0.05224036851249769, 0.09806771101687484, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12398150754531767, 0.026480636305764582, 0.11478896716659581, 0.019086380616214926, 0.0161828490301128, 0.04050106751160998, 0.0867150097493814, 0.06488334398697693, 0.08639752643616172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019869943237855292, 0.01944212523972222, 0.015815757112356166, 0.01077290889299276, 0.02649369164242177, 0.028830915740590934, 0.016552138388776116, 0.01457563750241897, 0.015429613354437266, 0.26138697914426945, 0.2964367460518782, 0.2705358275238776, 0.2363047923767786, 0.23752972149408647, 0.26826311612543796, 0.2820805521637926, 0.2990888499920641, 0.2554615020060679, 0.043105578629359265, 0.049908296283156184, 0.05814680907210401, 0.08016906102129906, 0.06519261453445346, 0.07358581051356683, 0.07845656455166827, 0.05889698979439595, 0.07053570957632949, 0.13327066452466974, 0.09814141576203073, 0.15772301972180047, 0.11373195596335794, 0.13749110583312507, 0.12752428799988047, 0.13440857020395158, 0.13574770457305896, 0.15455810017287153, 0.1810063835233383, 0.20876263645822768, 0.21223146557973227, 0.20604597788649237, 0.1882590107662837, 0.1825867779225998, 0.19643944693496873, 0.21285253196428378, 0.19122403165871116, 0.14168823127513808, 0.15631695085224306, 0.15666447050044807, 0.14767419667062254, 0.15554310023751228, 0.1381305815445325, 0.13758691408236723, 0.15749124301824358, 0.14202412939285058, 0.17121653842431894, 0.1745285914678688, 0.2032437749718784, 0.1737192039170501, 0.17381486995128193, 0.17032802950556414, 0.17061395354215603, 0.18703140437326238, 0.17896722191941894, 0.17070396139874433, 0.16016577250744035, 0.16771681473151712, 0.16333663233234053, 0.16045287781870177, 0.15767035317445266, 0.16911301074068796, 0.159995264258192, 0.16601435832597833, 0.2609818842444396, 0.16877971831310246, 0.16656648627464987, 0.17539471573713727, 0.1410822591108416, 0.16489327285704036, 0.3442070313125376, 0.13313410618187738, 0.30734113901670657, 0.1420316212209164, 0.2658485358056907, 0.0711740428121338, 0.16622141012412195, 0.13566327070490702, 0.1603520603967198, 0.16939270356108604, 0.22679738843076802, 0.19814881121442274, 0.17725633145644437, 0.16752340108009012, 0.15781945992981272, 0.17062617324198104, 0.1814020226159193, 0.17375881028988938, 0.17017240083753804, 0.16178045657852813, 0.16811390574130947, 0.06770914141475803, 0.061714167492443295, 0.06406532465497972, 0.06560357999669597, 0.07469521089279496, 0.07134115472793123, 0.07754399068243478, 0.07340929448741496, 0.07241274576772316]}, "mutation_prompt": null}
{"id": "df3852e6-711b-442e-8337-29914aced004", "solution": "import numpy as np\n\nclass DynamicEnhancedAdaptiveFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.beta_max = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        def attractiveness(distance):\n            return self.beta_min + (self.beta_max - self.beta_min) * np.exp(-self.alpha * distance)\n\n        population = initialize_population()\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i, x in enumerate(population):\n                for j, y in enumerate(population):\n                    if func(y) < func(x):\n                        distance = np.linalg.norm(x - y)\n                        beta = attractiveness(distance)\n                        population[i] += beta * (y - x) + np.random.uniform(-1, 1, self.dim)\n                        \n                        # Introduce dynamic update of alpha and beta parameters with probability 0.2\n                        if np.random.rand() < 0.2:\n                            self.alpha = max(0.1, self.alpha - 0.001)  # Update alpha\n                            self.beta_max = min(1.0, self.beta_max + 0.001)  # Update beta_max\n\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "DynamicEnhancedAdaptiveFireflyAlgorithm", "description": "Dynamic Enhanced Adaptive Firefly Algorithm with Parameter Fine-tuning for Black Box Optimization.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "baa2cbc7-8cfd-4871-9c38-41f8dd4e4b7a", "metadata": {"aucs": [0.26364390636496104, 0.29300561854970686, 0.24428300964481153, 0.23939973834037565, 0.2467495273967748, 0.26842577731711703, 0.2522675017302819, 0.2575302638375875, 0.2534433022604047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0766572902498952, 0.07056466479399093, 0.06578702271483305, 0.09369028126931711, 0.060637128292857057, 0.06678864504557569, 0.06943100799359891, 0.07307976137468397, 0.07036514449132503, 0.06171576709414861, 0.04904287198228763, 0.08246375542491846, 0.06257926847592532, 0.04989649919135719, 0.04431647929424798, 0.05065140133167656, 0.048916498435184086, 0.0495503964402616, 0.4883742461836731, 0.438797396423358, 0.6545057569551385, 0.34697603929357623, 0.47435958221101304, 0.39859808836598754, 0.6193788045996, 0.44001113347465093, 0.6302589844516637, 0.16793892038650116, 0.10252009036107756, 0.09987720486596352, 0.121047571874901, 0.11763340472688066, 0.11625865848336547, 0.1356246793354332, 0.09309600868048729, 0.11877858216787152, 0.20402307215422266, 0.18490983246198334, 0.1709520884265341, 0.21821444656747946, 0.16914140677036538, 0.17078014268163566, 0.1558761893759092, 0.1841535022609182, 0.15539375732653005, 0.05290328663586297, 0.058834113316189374, 0.06591692747502842, 0.03506308158726679, 0.08924418486682517, 0.07072693820065012, 0.07115224276865717, 0.10152153358024407, 0.06697752281348912, 0.09386098741497895, 0.07748365124106371, 0.08217196954889971, 0.06983175475441328, 0.10505178312602659, 0.07801867073374891, 0.07775343961530512, 0.05224036851249769, 0.09806771101687484, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12398150754531767, 0.026480636305764582, 0.11478896716659581, 0.019086380616214926, 0.0161828490301128, 0.04050106751160998, 0.0867150097493814, 0.06488334398697693, 0.08639752643616172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019869943237855292, 0.01944212523972222, 0.015815757112356166, 0.01077290889299276, 0.02649369164242177, 0.028830915740590934, 0.016552138388776116, 0.01457563750241897, 0.015429613354437266, 0.26138697914426945, 0.2964367460518782, 0.2705358275238776, 0.2363047923767786, 0.23752972149408647, 0.26826311612543796, 0.2820805521637926, 0.2990888499920641, 0.2554615020060679, 0.043105578629359265, 0.049908296283156184, 0.05814680907210401, 0.08016906102129906, 0.06519261453445346, 0.07358581051356683, 0.07845656455166827, 0.05889698979439595, 0.07053570957632949, 0.13327066452466974, 0.09814141576203073, 0.15772301972180047, 0.11373195596335794, 0.13749110583312507, 0.12752428799988047, 0.13440857020395158, 0.13574770457305896, 0.15455810017287153, 0.1810063835233383, 0.20876263645822768, 0.21223146557973227, 0.20604597788649237, 0.1882590107662837, 0.1825867779225998, 0.19643944693496873, 0.21285253196428378, 0.19122403165871116, 0.14168823127513808, 0.15631695085224306, 0.15666447050044807, 0.14767419667062254, 0.15554310023751228, 0.1381305815445325, 0.13758691408236723, 0.15749124301824358, 0.14202412939285058, 0.17121653842431894, 0.1745285914678688, 0.2032437749718784, 0.1737192039170501, 0.17381486995128193, 0.17032802950556414, 0.17061395354215603, 0.18703140437326238, 0.17896722191941894, 0.17070396139874433, 0.16016577250744035, 0.16771681473151712, 0.16333663233234053, 0.16045287781870177, 0.15767035317445266, 0.16911301074068796, 0.159995264258192, 0.16601435832597833, 0.2609818842444396, 0.16877971831310246, 0.16656648627464987, 0.17539471573713727, 0.1410822591108416, 0.16489327285704036, 0.3442070313125376, 0.13313410618187738, 0.30734113901670657, 0.1420316212209164, 0.2658485358056907, 0.0711740428121338, 0.16622141012412195, 0.13566327070490702, 0.1603520603967198, 0.16939270356108604, 0.22679738843076802, 0.19814881121442274, 0.17725633145644437, 0.16752340108009012, 0.15781945992981272, 0.17062617324198104, 0.1814020226159193, 0.17375881028988938, 0.17017240083753804, 0.16178045657852813, 0.16811390574130947, 0.06770914141475803, 0.061714167492443295, 0.06406532465497972, 0.06560357999669597, 0.07469521089279496, 0.07134115472793123, 0.07754399068243478, 0.07340929448741496, 0.07241274576772316]}, "mutation_prompt": null}
{"id": "8df8bde8-cf07-4d33-99cd-2b2d4cb4fe22", "solution": "import numpy as np\n\nclass DynamicEnhancedAdaptiveFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.beta_max = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        def attractiveness(distance):\n            return self.beta_min + (self.beta_max - self.beta_min) * np.exp(-self.alpha * distance)\n\n        population = initialize_population()\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i, x in enumerate(population):\n                for j, y in enumerate(population):\n                    if func(y) < func(x):\n                        distance = np.linalg.norm(x - y)\n                        beta = attractiveness(distance)\n                        population[i] += beta * (y - x) + np.random.uniform(-1, 1, self.dim)\n                        \n                        # Introduce dynamic update of alpha and beta parameters with probability 0.2\n                        if np.random.rand() < 0.2:\n                            self.alpha = max(0.1, self.alpha - 0.001)  # Update alpha\n                            self.beta_max = min(1.0, self.beta_max + 0.001)  # Update beta_max\n\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "DynamicEnhancedAdaptiveFireflyAlgorithm", "description": "Dynamic Enhanced Adaptive Firefly Algorithm with Parameter Fine-tuning for Black Box Optimization.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "baa2cbc7-8cfd-4871-9c38-41f8dd4e4b7a", "metadata": {"aucs": [0.26364390636496104, 0.29300561854970686, 0.24428300964481153, 0.23939973834037565, 0.2467495273967748, 0.26842577731711703, 0.2522675017302819, 0.2575302638375875, 0.2534433022604047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0766572902498952, 0.07056466479399093, 0.06578702271483305, 0.09369028126931711, 0.060637128292857057, 0.06678864504557569, 0.06943100799359891, 0.07307976137468397, 0.07036514449132503, 0.06171576709414861, 0.04904287198228763, 0.08246375542491846, 0.06257926847592532, 0.04989649919135719, 0.04431647929424798, 0.05065140133167656, 0.048916498435184086, 0.0495503964402616, 0.4883742461836731, 0.438797396423358, 0.6545057569551385, 0.34697603929357623, 0.47435958221101304, 0.39859808836598754, 0.6193788045996, 0.44001113347465093, 0.6302589844516637, 0.16793892038650116, 0.10252009036107756, 0.09987720486596352, 0.121047571874901, 0.11763340472688066, 0.11625865848336547, 0.1356246793354332, 0.09309600868048729, 0.11877858216787152, 0.20402307215422266, 0.18490983246198334, 0.1709520884265341, 0.21821444656747946, 0.16914140677036538, 0.17078014268163566, 0.1558761893759092, 0.1841535022609182, 0.15539375732653005, 0.05290328663586297, 0.058834113316189374, 0.06591692747502842, 0.03506308158726679, 0.08924418486682517, 0.07072693820065012, 0.07115224276865717, 0.10152153358024407, 0.06697752281348912, 0.09386098741497895, 0.07748365124106371, 0.08217196954889971, 0.06983175475441328, 0.10505178312602659, 0.07801867073374891, 0.07775343961530512, 0.05224036851249769, 0.09806771101687484, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12398150754531767, 0.026480636305764582, 0.11478896716659581, 0.019086380616214926, 0.0161828490301128, 0.04050106751160998, 0.0867150097493814, 0.06488334398697693, 0.08639752643616172, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019869943237855292, 0.01944212523972222, 0.015815757112356166, 0.01077290889299276, 0.02649369164242177, 0.028830915740590934, 0.016552138388776116, 0.01457563750241897, 0.015429613354437266, 0.26138697914426945, 0.2964367460518782, 0.2705358275238776, 0.2363047923767786, 0.23752972149408647, 0.26826311612543796, 0.2820805521637926, 0.2990888499920641, 0.2554615020060679, 0.043105578629359265, 0.049908296283156184, 0.05814680907210401, 0.08016906102129906, 0.06519261453445346, 0.07358581051356683, 0.07845656455166827, 0.05889698979439595, 0.07053570957632949, 0.13327066452466974, 0.09814141576203073, 0.15772301972180047, 0.11373195596335794, 0.13749110583312507, 0.12752428799988047, 0.13440857020395158, 0.13574770457305896, 0.15455810017287153, 0.1810063835233383, 0.20876263645822768, 0.21223146557973227, 0.20604597788649237, 0.1882590107662837, 0.1825867779225998, 0.19643944693496873, 0.21285253196428378, 0.19122403165871116, 0.14168823127513808, 0.15631695085224306, 0.15666447050044807, 0.14767419667062254, 0.15554310023751228, 0.1381305815445325, 0.13758691408236723, 0.15749124301824358, 0.14202412939285058, 0.17121653842431894, 0.1745285914678688, 0.2032437749718784, 0.1737192039170501, 0.17381486995128193, 0.17032802950556414, 0.17061395354215603, 0.18703140437326238, 0.17896722191941894, 0.17070396139874433, 0.16016577250744035, 0.16771681473151712, 0.16333663233234053, 0.16045287781870177, 0.15767035317445266, 0.16911301074068796, 0.159995264258192, 0.16601435832597833, 0.2609818842444396, 0.16877971831310246, 0.16656648627464987, 0.17539471573713727, 0.1410822591108416, 0.16489327285704036, 0.3442070313125376, 0.13313410618187738, 0.30734113901670657, 0.1420316212209164, 0.2658485358056907, 0.0711740428121338, 0.16622141012412195, 0.13566327070490702, 0.1603520603967198, 0.16939270356108604, 0.22679738843076802, 0.19814881121442274, 0.17725633145644437, 0.16752340108009012, 0.15781945992981272, 0.17062617324198104, 0.1814020226159193, 0.17375881028988938, 0.17017240083753804, 0.16178045657852813, 0.16811390574130947, 0.06770914141475803, 0.061714167492443295, 0.06406532465497972, 0.06560357999669597, 0.07469521089279496, 0.07134115472793123, 0.07754399068243478, 0.07340929448741496, 0.07241274576772316]}, "mutation_prompt": null}
{"id": "71b60067-7bab-4a39-bfea-fd3a8d949569", "solution": "import numpy as np\n\nclass EnhancedDynamicAdaptiveFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.beta_max = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        def attractiveness(distance):\n            return self.beta_min + (self.beta_max - self.beta_min) * np.exp(-self.alpha * distance)\n\n        population = initialize_population()\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i, x in enumerate(population):\n                for j, y in enumerate(population):\n                    if func(y) < func(x):\n                        distance = np.linalg.norm(x - y)\n                        beta = attractiveness(distance)\n                        population[i] += beta * (y - x) + np.random.uniform(-1, 1, self.dim)\n                        \n                        # Introduce dynamic update of alpha and beta parameters with probability 0.2\n                        if np.random.rand() < 0.2:\n                            # Implement evolutionary strategy with probability 0.2\n                            population[i] += np.random.normal(0, 1, self.dim)  # Mutation step\n\n                            self.alpha = max(0.1, self.alpha - 0.001)  # Update alpha\n                            self.beta_max = min(1.0, self.beta_max + 0.001)  # Update beta_max\n\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "EnhancedDynamicAdaptiveFireflyAlgorithm", "description": "Enhancing Dynamic Adaptive Firefly Algorithm with Evolutionary Strategy for Improved Black Box Optimization.", "configspace": "", "generation": 96, "fitness": 0.13520847071204797, "feedback": "The algorithm EnhancedDynamicAdaptiveFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.12.", "error": "", "parent_id": "baa2cbc7-8cfd-4871-9c38-41f8dd4e4b7a", "metadata": {"aucs": [0.2926570201533767, 0.2745448230308205, 0.2607556363908762, 0.2590380624928358, 0.2385870017496603, 0.26488234975560687, 0.3024827921234804, 0.24036581150336678, 0.24248572705903504, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.063537812072063, 0.0714490836352456, 0.07808411196437703, 0.06995780061192558, 0.07406849820598671, 0.07073291722337816, 0.061653436955982355, 0.07878541596920496, 0.06940210353406906, 0.05711798254912159, 0.04707891082361526, 0.04156738089433054, 0.059488156659293634, 0.06881452219263351, 0.04756910999441788, 0.05610225526439294, 0.050351504283690174, 0.03760862717348101, 0.5766629843365059, 0.6030712920959213, 0.563323203976336, 0.5501167188205893, 0.46755318484623987, 0.6341724475760739, 0.6170765511335754, 0.4792994181309159, 0.68134277141462, 0.12079480541001886, 0.08391832207431293, 0.0962478218660302, 0.11509854169592948, 0.10268432383040016, 0.13770963440269102, 0.14408479363146365, 0.14108478842484362, 0.11394650389836902, 0.19218227953404898, 0.18243615607927066, 0.15764544021199312, 0.24384211825352742, 0.17056900313188395, 0.15484388180894693, 0.13010427401475222, 0.17816268500482224, 0.17661464097349777, 0.019750970212326635, 0.03454514321823576, 0.0644712686113742, 0.0007850375858233782, 0.04523996844581757, 0.06266514864181627, 0.08791925813141299, 0.08072969278349484, 0.07642501692720238, 0.07983221000158969, 0.08272543146644862, 0.05987106677680276, 0.09636130301407264, 0.08899765119790515, 0.06846789070981107, 0.07841470706669773, 0.07845897663878454, 0.08187477861234638, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11233729121763392, 0.0427836828984145, 0.09954795572375297, 0.014947792035237994, 0.036673600346907365, 0.015169896364081836, 0.0769499789534942, 0.08097643703107749, 0.0681883016136331, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011345059787669531, 0.026505568037121008, 0.01796790600629461, 0.023296358969358666, 0.025497196487418994, 0.028619999758352832, 0.01598720984089963, 0.0155318920325217, 0.03334126415947758, 0.26651819059513837, 0.2750916002909478, 0.2617326457333048, 0.23131397227256068, 0.23519033810442058, 0.2464550539650764, 0.27697427066627367, 0.25781041695387286, 0.24464162247448062, 0.05898285370004741, 0.054063456757881045, 0.07517376567918077, 0.05347037076336836, 0.06038435185154645, 0.06736850903200498, 0.06428114710813138, 0.08213292550825357, 0.06093955981715027, 0.10736126436352933, 0.12174518855663141, 0.12627562212803, 0.12559047819013724, 0.13855048848351548, 0.11418300287092187, 0.12217830277849384, 0.1173821425469479, 0.13832057358836214, 0.19567210697095128, 0.18343846809981101, 0.21097478567923622, 0.20694155966266603, 0.19697449096101693, 0.21184679276123786, 0.19650258835059864, 0.20473536530598335, 0.20675211042508557, 0.15052020488012674, 0.1439013501261115, 0.14951673756110473, 0.14160669917664204, 0.14938711832467666, 0.1540962526812657, 0.14077975783893892, 0.15431440842992505, 0.1589274638590472, 0.18372624839579088, 0.16451154768243925, 0.16005527524891205, 0.17531068672352956, 0.19262256615432705, 0.1715940207765574, 0.18501047565182538, 0.17336980346421682, 0.18092137973830924, 0.16814244465777572, 0.1686441537479786, 0.16778924359794933, 0.1555628608495495, 0.1586567030286471, 0.16183007419853146, 0.16801730197334797, 0.16329128082231092, 0.16809301654725606, 0.16306501499585735, 0.17600321653557371, 0.1674659882874554, 0.15701661161386715, 0.18734147927235212, 0.24048785866808764, 0.2764881768869737, 0.193872114104099, 0.26223912841587294, 0.2646335565046516, 0.23045870500337973, 0.11303072525071056, 0.3164676152474958, 0.12967949395865963, 0.1421182913068182, 0.17159014470178113, 0.22576488840055586, 0.17687840151068535, 0.17146991576737636, 0.16817403968051126, 0.17852379377947725, 0.17180419443008355, 0.17507497933612104, 0.17535795540696253, 0.17337958725382085, 0.1843219069382862, 0.16309198996350827, 0.056263037754036516, 0.06337572983809858, 0.0662363795692743, 0.06548857692080678, 0.07591187995568871, 0.07163006569838526, 0.07300779341582386, 0.06557504708821849, 0.07393157905796433]}, "mutation_prompt": null}
{"id": "a03d0879-3e0f-4b9c-899f-ccddc62a35dd", "solution": "import numpy as np\n\nclass HybridFireflyDEDynamicAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.beta_max = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        def attractiveness(distance):\n            return self.beta_min + (self.beta_max - self.beta_min) * np.exp(-self.alpha * distance)\n\n        population = initialize_population()\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i, x in enumerate(population):\n                for j, y in enumerate(population):\n                    if func(y) < func(x):\n                        distance = np.linalg.norm(x - y)\n                        beta = attractiveness(distance)\n                        population[i] += beta * (y - x) + np.random.uniform(-1, 1, self.dim)\n                        \n                        if np.random.rand() < 0.2:\n                            if np.random.rand() < 0.5:\n                                population[i] += beta * (y - x) + np.random.uniform(-1, 1, self.dim)  # Firefly movement\n                            else:\n                                population[i] += np.random.uniform(-1, 1, self.dim)  # DE mutation\n\n                            self.alpha = max(0.1, self.alpha - 0.001)  # Update alpha\n                            self.beta_max = min(1.0, self.beta_max + 0.001)  # Update beta_max\n\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "HybridFireflyDEDynamicAlgorithm", "description": "Introducing a Hybrid Firefly Optimization with Differential Evolution and Dynamic Parameter Adaptation for Enhanced Black Box Optimization.", "configspace": "", "generation": 97, "fitness": 0.13115367311399687, "feedback": "The algorithm HybridFireflyDEDynamicAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.12.", "error": "", "parent_id": "71b60067-7bab-4a39-bfea-fd3a8d949569", "metadata": {"aucs": [0.26778798140447957, 0.25671853411455847, 0.2550593154565828, 0.24907976026239076, 0.2465493380813013, 0.23099728301438194, 0.25106873974683663, 0.24682729315953167, 0.24414377735080517, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06295385984993829, 0.0643969790139185, 0.07010521744765685, 0.06954532189031704, 0.0619895972147968, 0.07305535555296006, 0.06111852482163105, 0.07396415345707485, 0.0762045123024041, 0.0660365579865615, 0.04634954282447257, 0.049706462439093824, 0.05634438435745304, 0.05567154491600956, 0.042883547347221995, 0.07218313757845629, 0.048022390170545104, 0.05285223050252952, 0.6412768665719005, 0.4175145645472971, 0.597229186060789, 0.526145879308439, 0.4929747283405078, 0.5587917071588986, 0.6131049726737401, 0.4911940048490473, 0.603472378564007, 0.13484728524220047, 0.12357464557973541, 0.13117679681849181, 0.10253337392113404, 0.1223443977854799, 0.11319813942697987, 0.12736825352601788, 0.09879566492148151, 0.11100166863056127, 0.1787224757111402, 0.19079385995025355, 0.1480766601398631, 0.1878681256932473, 0.19133094656753458, 0.1429600266502261, 0.1545497407763251, 0.19202894244454793, 0.1229953037090572, 0.07792890918035578, 0.0773558967863266, 0.07013747715234009, 0.06359889138137065, 0.05811387905405496, 0.052243471993334234, 0.06772593120820458, 0.06589766693030163, 0.05363141556700679, 0.06250920918913472, 0.07985479518425109, 0.08839610540740728, 0.07213371377714006, 0.06347834199418101, 0.08514170216382522, 0.06216697378544611, 0.07568378749830174, 0.06881578214487505, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006218148443498661, 0.13204484036890785, 0.03740632546734701, 0.11488221018004174, 0.03381618976031242, 0.027184116146474313, 0.023155259595477595, 0.07930984486676917, 0.03905174614673779, 0.09005420371791661, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02049167599840862, 0.03093187160654376, 0.025148950625350164, 0.014055328787216936, 0.018517545970651916, 0.03224389266993788, 0.020298694337635426, 0.028655170287644305, 0.016358453814165674, 0.266215656813523, 0.26448681578294486, 0.2682091574451563, 0.2406913239952636, 0.25506384029138207, 0.22654102986448277, 0.2702077605660822, 0.25918678525438354, 0.25090928026109827, 0.06276571141388088, 0.06172497558372603, 0.05055901177993272, 0.06323968303406946, 0.0627245309188893, 0.0677712419312777, 0.06577385780711487, 0.06264621629094358, 0.0680019028672546, 0.13639755543811538, 0.13206500809831556, 0.12539232669854172, 0.10474642615403396, 0.13134259192159403, 0.11730396073806082, 0.12348590422083872, 0.12531842002182203, 0.11070833517147671, 0.1619080176607911, 0.19485151778498844, 0.2156988235747901, 0.2193302399162198, 0.20390193779622146, 0.18791623070458763, 0.19752680283274626, 0.22126099922616826, 0.19591360423115034, 0.14684179029889022, 0.14419186117191896, 0.14957248894372555, 0.14190770207030712, 0.14474625661424512, 0.14195063226235982, 0.14215484082418917, 0.1627664673944642, 0.16037714911895562, 0.1848556613850454, 0.18395065994724902, 0.15354005812086868, 0.1752328336776069, 0.17986292806046988, 0.19223305799282697, 0.1835844863677778, 0.17685267211395772, 0.16791758988369587, 0.15770095929087724, 0.1561144720495018, 0.1580522894939621, 0.15848143052611774, 0.15757671718275346, 0.16799355952828587, 0.15615448006148036, 0.1615572284523703, 0.16334616890836784, 0.16154338680282687, 0.16636652758005244, 0.1758011144161028, 0.2299235465992604, 0.1572418717770634, 0.1776285077865426, 0.3110847383618388, 0.14582708392515886, 0.24307848936248588, 0.2590113298936687, 0.17850553216602605, 0.08245356793967529, 0.17076689497762143, 0.15734057541093205, 0.13895292647164426, 0.09666945852534081, 0.09935230318910926, 0.20139968312335255, 0.19146499184909482, 0.17997726584614848, 0.1682371233397707, 0.1591303241089721, 0.15819469100647077, 0.16915277076483504, 0.1637693787397526, 0.16523534368711656, 0.15854599283352033, 0.07336205294266396, 0.07800136100815469, 0.06963147761988786, 0.07234561493678626, 0.07081381332310266, 0.06428180195055688, 0.06035647395244492, 0.06364240335601712, 0.06967102379263124]}, "mutation_prompt": null}
{"id": "0c5cd081-712c-4d96-873a-72a1e4eb8ea2", "solution": "import numpy as np\n\nclass DynamicAdaptiveEvolutionaryFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.alpha = 0.2\n        self.beta_min = 0.2\n        self.beta_max = 1.0\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        def attractiveness(distance):\n            return self.beta_min + (self.beta_max - self.beta_min) * np.exp(-self.alpha * distance)\n\n        population = initialize_population()\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i, x in enumerate(population):\n                for j, y in enumerate(population):\n                    if func(y) < func(x):\n                        distance = np.linalg.norm(x - y)\n                        beta = attractiveness(distance)\n                        population[i] += beta * (y - x) + np.random.uniform(-1, 1, self.dim)\n                        \n                        if np.random.rand() < 0.2:\n                            population[i] += np.random.normal(0, 1, self.dim)  # Mutation step\n\n                            self.alpha = max(0.1, self.alpha - 0.001)  # Update alpha\n                            self.beta_max = min(1.0, self.beta_max + 0.001)  # Update beta_max\n\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "DynamicAdaptiveEvolutionaryFireflyAlgorithm", "description": "Introducing Dynamic Adaptive Evolutionary Firefly Algorithm for Enhanced Black Box Optimization.", "configspace": "", "generation": 98, "fitness": 0.13520847071204797, "feedback": "The algorithm DynamicAdaptiveEvolutionaryFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.12.", "error": "", "parent_id": "71b60067-7bab-4a39-bfea-fd3a8d949569", "metadata": {"aucs": [0.2926570201533767, 0.2745448230308205, 0.2607556363908762, 0.2590380624928358, 0.2385870017496603, 0.26488234975560687, 0.3024827921234804, 0.24036581150336678, 0.24248572705903504, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.063537812072063, 0.0714490836352456, 0.07808411196437703, 0.06995780061192558, 0.07406849820598671, 0.07073291722337816, 0.061653436955982355, 0.07878541596920496, 0.06940210353406906, 0.05711798254912159, 0.04707891082361526, 0.04156738089433054, 0.059488156659293634, 0.06881452219263351, 0.04756910999441788, 0.05610225526439294, 0.050351504283690174, 0.03760862717348101, 0.5766629843365059, 0.6030712920959213, 0.563323203976336, 0.5501167188205893, 0.46755318484623987, 0.6341724475760739, 0.6170765511335754, 0.4792994181309159, 0.68134277141462, 0.12079480541001886, 0.08391832207431293, 0.0962478218660302, 0.11509854169592948, 0.10268432383040016, 0.13770963440269102, 0.14408479363146365, 0.14108478842484362, 0.11394650389836902, 0.19218227953404898, 0.18243615607927066, 0.15764544021199312, 0.24384211825352742, 0.17056900313188395, 0.15484388180894693, 0.13010427401475222, 0.17816268500482224, 0.17661464097349777, 0.019750970212326635, 0.03454514321823576, 0.0644712686113742, 0.0007850375858233782, 0.04523996844581757, 0.06266514864181627, 0.08791925813141299, 0.08072969278349484, 0.07642501692720238, 0.07983221000158969, 0.08272543146644862, 0.05987106677680276, 0.09636130301407264, 0.08899765119790515, 0.06846789070981107, 0.07841470706669773, 0.07845897663878454, 0.08187477861234638, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11233729121763392, 0.0427836828984145, 0.09954795572375297, 0.014947792035237994, 0.036673600346907365, 0.015169896364081836, 0.0769499789534942, 0.08097643703107749, 0.0681883016136331, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011345059787669531, 0.026505568037121008, 0.01796790600629461, 0.023296358969358666, 0.025497196487418994, 0.028619999758352832, 0.01598720984089963, 0.0155318920325217, 0.03334126415947758, 0.26651819059513837, 0.2750916002909478, 0.2617326457333048, 0.23131397227256068, 0.23519033810442058, 0.2464550539650764, 0.27697427066627367, 0.25781041695387286, 0.24464162247448062, 0.05898285370004741, 0.054063456757881045, 0.07517376567918077, 0.05347037076336836, 0.06038435185154645, 0.06736850903200498, 0.06428114710813138, 0.08213292550825357, 0.06093955981715027, 0.10736126436352933, 0.12174518855663141, 0.12627562212803, 0.12559047819013724, 0.13855048848351548, 0.11418300287092187, 0.12217830277849384, 0.1173821425469479, 0.13832057358836214, 0.19567210697095128, 0.18343846809981101, 0.21097478567923622, 0.20694155966266603, 0.19697449096101693, 0.21184679276123786, 0.19650258835059864, 0.20473536530598335, 0.20675211042508557, 0.15052020488012674, 0.1439013501261115, 0.14951673756110473, 0.14160669917664204, 0.14938711832467666, 0.1540962526812657, 0.14077975783893892, 0.15431440842992505, 0.1589274638590472, 0.18372624839579088, 0.16451154768243925, 0.16005527524891205, 0.17531068672352956, 0.19262256615432705, 0.1715940207765574, 0.18501047565182538, 0.17336980346421682, 0.18092137973830924, 0.16814244465777572, 0.1686441537479786, 0.16778924359794933, 0.1555628608495495, 0.1586567030286471, 0.16183007419853146, 0.16801730197334797, 0.16329128082231092, 0.16809301654725606, 0.16306501499585735, 0.17600321653557371, 0.1674659882874554, 0.15701661161386715, 0.18734147927235212, 0.24048785866808764, 0.2764881768869737, 0.193872114104099, 0.26223912841587294, 0.2646335565046516, 0.23045870500337973, 0.11303072525071056, 0.3164676152474958, 0.12967949395865963, 0.1421182913068182, 0.17159014470178113, 0.22576488840055586, 0.17687840151068535, 0.17146991576737636, 0.16817403968051126, 0.17852379377947725, 0.17180419443008355, 0.17507497933612104, 0.17535795540696253, 0.17337958725382085, 0.1843219069382862, 0.16309198996350827, 0.056263037754036516, 0.06337572983809858, 0.0662363795692743, 0.06548857692080678, 0.07591187995568871, 0.07163006569838526, 0.07300779341582386, 0.06557504708821849, 0.07393157905796433]}, "mutation_prompt": null}
{"id": "a1b17311-df76-471a-a822-a4daf3e2c941", "solution": "import numpy as np\n\nclass HybridDEwithCuckooSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 50\n        self.cuckoo_prob = 0.2\n        self.de_crossover_prob = 0.9\n\n    def __call__(self, func):\n        def initialize_population():\n            return np.random.uniform(-5.0, 5.0, (self.population_size, self.dim))\n\n        population = initialize_population()\n        evaluations = 0\n\n        while evaluations < self.budget:\n            for i, x in enumerate(population):\n                cuckoo_individual = np.random.uniform(-5.0, 5.0, self.dim)\n                if func(cuckoo_individual) < func(x) and np.random.rand() < self.cuckoo_prob:\n                    population[i] = cuckoo_individual\n\n                # Perform DE mutation and crossover\n                r1, r2, r3 = np.random.choice(range(self.population_size), 3, replace=False)\n                mutant = population[r1] + 0.5 * (population[r2] - population[r3])\n\n                trial = np.where(np.random.rand(self.dim) < self.de_crossover_prob, mutant, x)\n                if func(trial) < func(x):\n                    population[i] = trial\n\n                evaluations += 1\n                if evaluations >= self.budget:\n                    break\n\n        best_solution = population[np.argmin([func(individual) for individual in population])]\n        return best_solution", "name": "HybridDEwithCuckooSearch", "description": "Introducing a Hybrid Differential Evolution Algorithm with Cuckoo Search for Enhanced Black Box Optimization", "configspace": "", "generation": 99, "fitness": 0.17170770962411808, "feedback": "The algorithm HybridDEwithCuckooSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.17.", "error": "", "parent_id": "71b60067-7bab-4a39-bfea-fd3a8d949569", "metadata": {"aucs": [0.36687983788056433, 0.3789700527028047, 0.3928768273646158, 0.38500888855422033, 0.3540295494935497, 0.38042678682071007, 0.381060587412824, 0.4046848060131051, 0.39574583351173565, 0.07485790757709421, 0.08344542764805318, 0.07125068631131781, 0.07755324737434255, 0.08750759290811438, 0.09650196976027348, 0.0793939007441139, 0.08588491935902132, 0.0857284546268966, 0.0777793750098883, 0.06673457860615783, 0.06886964188867206, 0.07428952535097488, 0.07121000628157692, 0.08332014135974353, 0.08510325232296034, 0.0697022840144993, 0.08819814958073058, 0.06303063948100884, 0.053639844351493826, 0.06426697094685752, 0.0678106152220247, 0.07596912581236281, 0.06356636038283692, 0.06700068393159397, 0.06304567575512177, 0.06114712658321919, 0.8571686961613308, 0.8388517586586254, 0.839965724122326, 0.9302142094043012, 0.865574240451745, 0.845579639568405, 0.9046976520898837, 0.8836934584951998, 0.7948776695868387, 0.1614909486388848, 0.12075797786392395, 0.12540762513143056, 0.14292109827591015, 0.1267902945635968, 0.10386764774359203, 0.15416478343859186, 0.12325797621480994, 0.1552051911217237, 0.23019394188365472, 0.2201904336720606, 0.2602944106029317, 0.23071253026370198, 0.2136643310226305, 0.2349754584919337, 0.2314168161483705, 0.24084796743764558, 0.2056894182731599, 0.09400513641462582, 0.09298548276949437, 0.08233931328647615, 0.10585261328556494, 0.11137947215520994, 0.10639145667306726, 0.11299372351138004, 0.0986589361080834, 0.10006885565900958, 0.09959993483869434, 0.06943614008516819, 0.10144091091117502, 0.12390248362148248, 0.10131560250723926, 0.12750562891664174, 0.10053558504097981, 0.09931004934984466, 0.10542091930773245, 0.03830493273419344, 0.02882539489257685, 0.017238724036663378, 0.015920335316296552, 0.017700136439186664, 0.029526804285738062, 0.026780656160123373, 0.03527031766722466, 0.021107550140670672, 0.13960260443673778, 0.1180122512009415, 0.0953386590511398, 0.1210256439770363, 0.08802718101791018, 0.1551037471483343, 0.11946390320954725, 0.09594578826711953, 0.1217371080173445, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05581493810911198, 0.05766715651901955, 0.08038387840715899, 0.06063811309661016, 0.052600185326328375, 0.09703505726191619, 0.0364613601409961, 0.0613448137205429, 0.058054440445762134, 0.32482793067702687, 0.35756659212493336, 0.3475423047131727, 0.32239248588248015, 0.32961698696709285, 0.3418321492511821, 0.3429428462187599, 0.3477373627150291, 0.3647104330630747, 0.09116210670977676, 0.0902602346921969, 0.06992633013203464, 0.07149936046742877, 0.08251094605737785, 0.06886306020104671, 0.0812763301826066, 0.07958017355105307, 0.0847052439037741, 0.12571235271258796, 0.12685341637081093, 0.13749049371333533, 0.14759447735899578, 0.12892812373069829, 0.1519511692129688, 0.1594064840451216, 0.1160306234484888, 0.12922722097929928, 0.21515891793301212, 0.2086696428948832, 0.21561650416832134, 0.23762032112601494, 0.2126264798213131, 0.22688405892007657, 0.22297744575984646, 0.24228294090404057, 0.2180859375691595, 0.16012631334367633, 0.14328064359959047, 0.16442164901883372, 0.1811676907329629, 0.1665912674280895, 0.16720095114484868, 0.15347116534428773, 0.15979200650679481, 0.16181567508889783, 0.1672596296845118, 0.16492357403822866, 0.19998113521278105, 0.1749379492077594, 0.1595472545297011, 0.16406748967215468, 0.18752201880188368, 0.17027325373510338, 0.16377394426437708, 0.17271789595431697, 0.16708868539779087, 0.1641278394613208, 0.16702717406551726, 0.16490432528831422, 0.1808120936987755, 0.1648755161382074, 0.16446012372324526, 0.17098424928376754, 0.17428407389344103, 0.16241327571947217, 0.1921037708059713, 0.17078020323365495, 0.26224304553354516, 0.19326620339405387, 0.15639395199346162, 0.1785620418918319, 0.14518356960918022, 0.20177903132914266, 0.17050087177755324, 0.17647396886608735, 0.14998032038816345, 0.1542851247992505, 0.14525312794217493, 0.23956614179765823, 0.19520891647449867, 0.14905957069581144, 0.16814152694622841, 0.18086679365469116, 0.1806899475731325, 0.17118498329581666, 0.18722939950415396, 0.18040093496208387, 0.17351081665820145, 0.17591370637185588, 0.17388242495279227, 0.07152438895331958, 0.05678780251058446, 0.05647760871371266, 0.05996232776733068, 0.06439433342804568, 0.06314252831916178, 0.07241189040228668, 0.05708797970963875, 0.060760574656371635]}, "mutation_prompt": null}
