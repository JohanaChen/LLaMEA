{"id": "603478d6-363a-42dc-bc30-ecec08306b68", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n        self.population_size = 20\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.population_size, self.dim))\n        \n        self.pbest_positions = np.copy(self.particles)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        \n        self.gbest_position = None\n        self.gbest_score = np.inf\n        \n        self.c1 = 2.0  # cognitive component\n        self.c2 = 2.0  # social component\n        self.w = 0.5   # inertia weight\n\n    def __call__(self, func):\n        evaluations = 0\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                score = func(self.particles[i])\n                evaluations += 1\n\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = self.particles[i]\n\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = self.particles[i]\n\n            if evaluations >= self.budget:\n                break\n\n            # Update velocities and positions for PSO\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            for i in range(self.population_size):\n                cognitive = self.c1 * r1 * (self.pbest_positions[i] - self.particles[i])\n                social = self.c2 * r2 * (self.gbest_position - self.particles[i])\n                self.velocities[i] = self.w * self.velocities[i] + cognitive + social\n                self.particles[i] += self.velocities[i]\n                self.particles[i] = np.clip(self.particles[i], self.lower_bound, self.upper_bound)\n\n            if evaluations < self.budget:\n                # Differential Evolution mutation and crossover\n                for i in range(self.population_size):\n                    indices = [idx for idx in range(self.population_size) if idx != i]\n                    a, b, c = np.random.choice(indices, 3, replace=False)\n                    mutant = self.particles[a] + 0.8 * (self.particles[b] - self.particles[c])\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                    \n                    crossover_mask = np.random.rand(self.dim) < 0.9\n                    trial = np.where(crossover_mask, mutant, self.particles[i])\n                    \n                    trial_score = func(trial)\n                    evaluations += 1\n\n                    if trial_score < self.pbest_scores[i]:\n                        self.pbest_scores[i] = trial_score\n                        self.pbest_positions[i] = trial\n\n                    if trial_score < self.gbest_score:\n                        self.gbest_score = trial_score\n                        self.gbest_position = trial\n\n                    if evaluations >= self.budget:\n                        break\n\n        return self.gbest_score, self.gbest_position", "name": "HybridPSODE", "description": "A hybrid adaptive strategy combining Particle Swarm Optimization (PSO) and Differential Evolution (DE) for diverse exploration and efficient exploitation in high-dimensional search spaces.", "configspace": "", "generation": 0, "fitness": 0.22141096452197725, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.23.", "error": "", "parent_id": null, "metadata": {"aucs": [0.12644422955650592, 0.12604211551805944, 0.8142610313238082, 0.18953226609173857, 0.1828431430404075, 0.14050924645007834, 0.1820221801322005, 0.7970361269579913, 0.7542513532649695, 0.03803761658348104, 0.5143285939679769, 0.5017856687434022, 0.5984285224686465, 0.04476319404552609, 9.999999999998899e-05, 0.04242825585776333, 0.23912007540113, 0.5166178954786208, 0.1378983846684183, 0.04171620196564896, 0.16368835910723278, 0.14664511813480707, 0.11661690907267641, 0.14969741051761742, 0.12277061791645827, 0.04735571801412841, 0.11506127133179089, 0.12757423921806144, 0.1537675145265679, 0.1088152476980484, 0.13140126957241793, 0.03955157498452644, 0.1506691520845609, 0.13383695368616955, 0.13082959304466946, 0.1246376810670432, 0.990861100953992, 0.9858812984594937, 0.9915604944513873, 0.9907630871614328, 0.9894409704444644, 0.9841052406971545, 0.9908699405567033, 0.9900856739112642, 0.9908044150399398, 0.05428591356436718, 0.05855939843688962, 0.055422936778577236, 0.43101366904805327, 0.32454713495990006, 0.15020579248878074, 0.08757360340880682, 0.08929550471621461, 9.999999999998899e-05, 0.1669146621825892, 0.1907617032726241, 0.21693849073461458, 0.27399808840021855, 0.20615843611179263, 0.18609165246952875, 0.23393586103314123, 0.12988403714178787, 0.12840389553426068, 0.09721233614526914, 0.1198889894144548, 0.11400439735430845, 0.12038827657993789, 0.08966496272997115, 9.999999999998899e-05, 0.19312666323672434, 0.1655123141844661, 0.18539759262554145, 0.16286856427218044, 0.016536337489306385, 0.20406117249550737, 0.19719052517741764, 0.17969099313903303, 0.12600721794497316, 0.20688477464450217, 9.999999999998899e-05, 0.10035269982327444, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007892158662525794, 9.999999999998899e-05, 9.999999999998899e-05, 0.0061957537240936444, 0.002198881511462192, 9.999999999998899e-05, 0.06087328117171786, 0.05190557482555758, 0.005507118181274695, 0.04881164256419557, 0.04584779424488461, 9.999999999998899e-05, 9.999999999998899e-05, 0.18798783552019926, 0.04195230250324167, 0.0358721739827792, 0.04547258572886659, 0.19290392012256086, 9.999999999998899e-05, 0.0685846282952518, 0.07085770760229892, 0.06925058557370234, 0.0847324453250341, 0.06429084397557128, 0.07317894967633709, 0.04165670180266656, 9.999999999998899e-05, 0.19814764080985336, 9.999999999998899e-05, 9.999999999998899e-05, 0.1552781871774026, 9.999999999998899e-05, 0.04647878636298097, 0.07962840130321669, 0.46528516271818254, 0.4600659774849525, 0.5035085167672265, 0.5359688764087429, 0.5631777228685855, 0.4772852048738637, 0.4575768662835741, 0.1254754359198601, 0.4758506096201379, 0.10997428941518794, 0.06278192554903073, 0.055664422018027127, 0.11370230127625602, 0.11088854847451945, 0.10705872223737256, 0.1305130309425353, 0.060344549722800345, 0.10532953067324635, 0.20025720694790927, 0.19664435984211293, 0.15867278942458196, 0.23707184840895457, 0.2326779749065382, 0.12291743356998264, 0.18772006465437907, 0.17164887771467852, 0.2290926947631199, 0.24626452715241898, 0.2312914776382361, 0.37409085461655334, 0.20467051193489583, 0.19249070969031834, 0.28453970138329965, 0.40784228932979505, 0.4095387580485569, 0.17168258858437024, 0.17142179922295142, 0.22738408679422428, 0.3021144474720634, 0.2557401604994447, 0.16209001849209614, 0.22343434261476935, 0.18134049360632765, 0.3123082288357827, 0.07324113648118724, 0.2170071950089364, 0.2315331755796829, 0.18830336259949365, 0.21709927568709353, 0.18565433110918395, 0.20120001917920627, 0.24704373952324155, 0.21899141497791086, 0.20420994376337254, 0.19677326246211435, 0.23381735627578748, 0.19759318236220702, 0.19759308658638675, 0.2242330699596301, 0.18517701083979576, 0.19680302068516597, 0.18901764861861015, 0.4248632038511626, 0.18176033401299163, 0.7962128570842202, 0.11314864992596763, 0.7891054141274618, 0.19859595602381264, 0.8013167108332554, 0.08217560876119079, 0.16900490132916368, 0.17383511396103402, 0.36917651874527335, 0.20804484078508445, 0.40990540921224017, 0.20981876458454363, 0.43406617782233137, 0.6016453514606042, 0.10359797890473454, 0.6881249938676284, 0.1609592511061625, 0.20150114248975237, 0.19728323441451612, 0.20478269007043004, 0.1938658456276786, 0.19554087112550778, 0.19219676050558265, 0.1882985867945487, 0.18012687358259571, 0.20624019619506784, 0.08985490680081165, 0.05036334150033528, 0.09355311722897697, 0.08806094833368949, 0.08012782438457855, 0.08635383912851069, 0.08031544570389182, 0.0839405677317916, 0.07817442906909089]}, "mutation_prompt": null}
{"id": "03e5b427-d74b-4b57-9ac7-a5eeeca7e2f1", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n        self.population_size = 20\n        self.particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1.0, 1.0, (self.population_size, self.dim))\n        \n        self.pbest_positions = np.copy(self.particles)\n        self.pbest_scores = np.full(self.population_size, np.inf)\n        \n        self.gbest_position = None\n        self.gbest_score = np.inf\n        \n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.w = 0.9  # dynamic inertia weight starting value\n        self.f_min, self.f_max = 0.5, 0.9  # DE scaling factor range\n\n    def adaptive_inertia_weight(self, evaluations):\n        return self.w - 0.4 * (evaluations / self.budget)\n\n    def adaptive_scaling_factor(self, evaluations):\n        return self.f_min + (self.f_max - self.f_min) * (1 - evaluations / self.budget)\n\n    def __call__(self, func):\n        evaluations = 0\n        \n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                score = func(self.particles[i])\n                evaluations += 1\n\n                if score < self.pbest_scores[i]:\n                    self.pbest_scores[i] = score\n                    self.pbest_positions[i] = np.copy(self.particles[i])\n\n                if score < self.gbest_score:\n                    self.gbest_score = score\n                    self.gbest_position = np.copy(self.particles[i])\n\n            if evaluations >= self.budget:\n                break\n\n            # Update velocities and positions for PSO\n            self.w = self.adaptive_inertia_weight(evaluations)\n            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n            for i in range(self.population_size):\n                cognitive = self.c1 * r1 * (self.pbest_positions[i] - self.particles[i])\n                social = self.c2 * r2 * (self.gbest_position - self.particles[i])\n                self.velocities[i] = self.w * self.velocities[i] + cognitive + social\n                self.particles[i] += self.velocities[i]\n                self.particles[i] = np.clip(self.particles[i], self.lower_bound, self.upper_bound)\n\n            if evaluations < self.budget:\n                # Differential Evolution mutation and crossover with adaptive scaling\n                f = self.adaptive_scaling_factor(evaluations)\n                for i in range(self.population_size):\n                    indices = [idx for idx in range(self.population_size) if idx != i]\n                    a, b, c = np.random.choice(indices, 3, replace=False)\n                    mutant = self.particles[a] + f * (self.particles[b] - self.particles[c])\n                    mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                    \n                    crossover_mask = np.random.rand(self.dim) < 0.9\n                    trial = np.where(crossover_mask, mutant, self.particles[i])\n                    \n                    trial_score = func(trial)\n                    evaluations += 1\n\n                    if trial_score < self.pbest_scores[i]:\n                        self.pbest_scores[i] = trial_score\n                        self.pbest_positions[i] = trial\n\n                    if trial_score < self.gbest_score:\n                        self.gbest_score = trial_score\n                        self.gbest_position = trial\n\n                    if evaluations >= self.budget:\n                        break\n\n        return self.gbest_score, self.gbest_position", "name": "EnhancedHybridPSODE", "description": "Introducing a dynamic parameter adaptation mechanism alongside a memory-based technique to enhance exploration and exploitation balance in the HybridPSODE algorithm.", "configspace": "", "generation": 1, "fitness": 0.15275007954504605, "feedback": "The algorithm EnhancedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.20.", "error": "", "parent_id": "603478d6-363a-42dc-bc30-ecec08306b68", "metadata": {"aucs": [0.3267685968450921, 0.12546075444056182, 0.42135692478158615, 0.18914987790630267, 0.3445404541301238, 0.15530550511298857, 0.18122492398303824, 0.1428302224415101, 0.40903061106017047, 0.033549357067503616, 9.999999999998899e-05, 0.0711447835452409, 0.06102413188621869, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04894074316317998, 0.08110006744113019, 0.1183645608330115, 0.033884132887906704, 0.09346686531413195, 0.11059951376034538, 0.09242323559815335, 0.06377381369477009, 0.1154949615438623, 0.01945584807453704, 0.045097577618644524, 0.07805620865094609, 0.07231870310115773, 0.06368274742450886, 0.07515438294684595, 0.029668602086191043, 0.04624090351129473, 0.06813382963515702, 0.06062678480906303, 0.09763966527822665, 0.9913861914933799, 0.9872572464329433, 0.9940186078673018, 0.9938671353985936, 0.9907749626990054, 0.9875676094849233, 0.9939653653176197, 0.9904706235978572, 0.994264519070788, 0.0657357189739125, 0.057605948782538885, 0.05361892612599406, 0.062397013651339095, 0.13094622404241363, 0.141133347041422, 0.08248505311681731, 0.08939279793711197, 0.014475600732832161, 0.16916965240625992, 0.09873089324975193, 0.2004919325593435, 0.18662205182058056, 0.11205818775026377, 0.18505456882376525, 0.12159182738302354, 0.12499568198165179, 0.14748193944497112, 0.07522877052888821, 0.11325625898814307, 0.06606652590521223, 0.12117643908698861, 9.999999999998899e-05, 0.06356313795199708, 0.03546933544028419, 9.999999999998899e-05, 0.12740577253687402, 0.12532162769156818, 0.021862484309351005, 0.009907469518640188, 0.0816973207351519, 0.10883462971401137, 0.12659316250602604, 0.16084022217879157, 0.03049261045069529, 0.03321458461189253, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04759097643646948, 9.999999999998899e-05, 0.02699582969583114, 0.014517790094627392, 0.006814706879205157, 9.999999999998899e-05, 0.004613921938420251, 0.09407500718867501, 0.040176358762852526, 0.03312049010331064, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0685293360557081, 9.999999999998899e-05, 0.10278306580029561, 9.999999999998899e-05, 9.999999999998899e-05, 0.10402123095549864, 9.999999999998899e-05, 9.999999999998899e-05, 0.058634568628671335, 0.3581461270945687, 0.31395529303980174, 0.4177524989198269, 0.3504301276588083, 0.22052920517249108, 0.3232771386693397, 0.39783616297788915, 0.13549613382620296, 0.3040633416232392, 0.08109613715176145, 0.040044230336148345, 0.04933100159173576, 0.09687844836464088, 0.0630420004303498, 0.07407302796909643, 0.08082598327023638, 0.05003086477704233, 0.09754532935390947, 0.19021494981719467, 0.14161188835336236, 0.16612229781926258, 0.13503796076774888, 0.19712274933280893, 0.1410069640239724, 0.17750827698756222, 0.168915693022901, 0.1831517870578473, 0.25338801114395537, 0.22988801911144852, 0.22602538083431767, 0.14029198100682028, 0.13906213381753751, 0.20791265476356413, 0.23103530146814522, 0.2980951918836213, 0.12495994654205766, 0.14402997541074547, 0.06409816000174129, 0.10778488424212884, 0.160956866787051, 0.13326102064332734, 0.1965765992195042, 0.16771322856962056, 0.19727086687476003, 0.14907439385662635, 0.15898097032073533, 0.15022921401750278, 0.1595825115480891, 0.16387246691740143, 0.14269771030663891, 0.1438912562378466, 0.1448493680913704, 0.15625419525997475, 0.1576579518897646, 0.15859146104531718, 0.15756610597624798, 0.1864870433337703, 0.19014972115389273, 0.2618596637221111, 0.18441950611047686, 0.16337505522702234, 0.15003814262759518, 0.16526256583550092, 0.18125008761174577, 0.16099973682197122, 0.11885837152567003, 0.12236893298604667, 0.18361198307814175, 0.11816783019139343, 0.09660726368066586, 0.16831859603501875, 0.16030709848915836, 0.15010709297465763, 0.15949512088767348, 0.17898563438104287, 0.164446523690424, 0.253522630292223, 0.10905867757185028, 0.1829346301161071, 0.2776276439354656, 0.19708946021414153, 0.18405060896534897, 0.1794254244598853, 0.17746435342140088, 0.1776417508693383, 0.17206987262275797, 0.1822097833298183, 0.18455664306769293, 0.2094284892756476, 0.1928751648348015, 0.06363182853110738, 0.057947419356523144, 0.05752562956494678, 0.04469979281203651, 0.048025060072457326, 0.053201379519262404, 0.06458295055126984, 0.037134074636626435, 0.05268194369376755]}, "mutation_prompt": null}
