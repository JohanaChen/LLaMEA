import numpy as np
from scipy.optimize import differential_evolution

class HybridEvolutionaryAlgorithm:
    def __init__(self, budget, dim):
        self.budget = budget
        self.dim = dim
        self.bounds = [(-5.0, 5.0)] * dim
        self.x0 = np.random.uniform(self.bounds[0][0], self.bounds[0][1], self.dim)

    def __call__(self, func):
        if self.budget == 0:
            return np.nan, np.nan

        for _ in range(int(self.budget * 0.6)):
            # Evolutionary strategy
            strategy = np.random.choice(['sbx', 'rand1', 'log-uniform'])
            if strategy =='sbx':
                x0 = np.random.uniform(self.bounds[0][0], self.bounds[0][1], self.dim)
                res = differential_evolution(func, self.bounds, x0=x0, tol=1e-5, cxpb=0.5, mu=0.5, w=0.5)
            elif strategy == 'rand1':
                x0 = np.random.uniform(self.bounds[0][0], self.bounds[0][1], self.dim)
                res = differential_evolution(func, self.bounds, x0=x0, tol=1e-5, cxpb=0.5, mu=0.5, w=0.5, strategy='rand1')
            elif strategy == 'log-uniform':
                x0 = np.random.uniform(self.bounds[0][0], self.bounds[0][1], self.dim)
                res = differential_evolution(func, self.bounds, x0=x0, tol=1e-5, cxpb=0.5, mu=0.5, w=0.5, strategy='sbx', scaling='log-uniform')

            # Mutation
            mutated_individual = res.x
            for i in range(self.dim):
                if np.random.rand() < 0.4:
                    mutated_individual[i] += np.random.uniform(-1, 1)
                    mutated_individual[i] = max(self.bounds[i][0], min(mutated_individual[i], self.bounds[i][1]))

            # Update the best individual
            if np.any(func(mutated_individual) < func(res.x)):
                self.x0 = mutated_individual

        # Final evaluation
        res = differential_evolution(func, self.bounds, x0=self.x0, tol=1e-5, cxpb=0.5, mu=0.5, w=0.5)
        return res.x, res.fun

# Example usage
def f1(x):
    return x[0]**2 + x[1]**2

def f2(x):
    return x[0]**2 + x[1]**2 + 1e-3 * x[0] * x[1]

def f3(x):
    return x[0]**2 + x[1]**2 + 1e-3 * x[0] * x[1] + 1e-6 * x[0]**2 * x[1]**2

def f4(x):
    return x[0]**2 + x[1]**2 + 1e-3 * x[0] * x[1] + 1e-6 * x[0]**2 * x[1]**2 + 1e-9 * x[0]**3 * x[1]**3

def f5(x):
    return x[0]**2 + x[1]**2 + 1e-3 * x[0] * x[1] + 1e-6 * x[0]**2 * x[1]**2 + 1e-9 * x[0]**3 * x[1]**3 + 1e-12 * x[0]**4 * x[1]**4

def f6(x):
    return x[0]**2 + x[1]**2 + 1e-3 * x[0] * x[1] + 1e-6 * x[0]**2 * x[1]**2 + 1e-9 * x[0]**3 * x[1]**3 + 1e-12 * x[0]**4 * x[1]**4 + 1e-15 * x[0]**5 * x[1]**5

def f7(x):
    return x[0]**2 + x[1]**2 + 1e-3 * x[0] * x[1] + 1e-6 * x[0]**2 * x[1]**2 + 1e-9 * x[0]**3 * x[1]**3 + 1e-12 * x[0]**4 * x[1]**4 + 1e-15 * x[0]**5 * x[1]**5 + 1e-18 * x[0]**6 * x[1]**6

def f8(x):
    return x[0]**2 + x[1]**2 + 1e-3 * x[0] * x[1] + 1e-6 * x[0]**2 * x[1]**2 + 1e-9 * x[0]**3 * x[1]**3 + 1e-12 * x[0]**4 * x[1]**4 + 1e-15 * x[0]**5 * x[1]**5 + 1e-18 * x[0]**6 * x[1]**6 + 1e-21 * x[0]**7 * x[1]**7

def f9(x):
    return x[0]**2 + x[1]**2 + 1e-3 * x[0] * x[1] + 1e-6 * x[0]**2 * x[1]**2 + 1e-9 * x[0]**3 * x[1]**3 + 1e-12 * x[0]**4 * x[1]**4 + 1e-15 * x[0]**5 * x[1]**5 + 1e-18 * x[0]**6 * x[1]**6 + 1e-21 * x[0]**7 * x[1]**7 + 1e-24 * x[0]**8 * x[1]**8

def f10(x):
    return x[0]**2 + x[1]**2 + 1e-3 * x[0] * x[1] + 1e-6 * x[0]**2 * x[1]**2 + 1e-9 * x[0]**3 * x[1]**3 + 1e-12 * x[0]**4 * x[1]**4 + 1e-15 * x[0]**5 * x[1]**5 + 1e-18 * x[0]**6 * x[1]**6 + 1e-21 * x[0]**7 * x[1]**7 + 1e-24 * x[0]**8 * x[1]**8 + 1e-27 * x[0]**9 * x[1]**9

def f11(x):
    return x[0]**2 + x[1]**2 + 1e-3 * x[0] * x[1] + 1e-6 * x[0]**2 * x[1]**2 + 1e-9 * x[0]**3 * x[1]**3 + 1e-12 * x[0]**4 * x[1]**4 + 1e-15 * x[0]**5 * x[1]**5 + 1e-18 * x[0]**6 * x[1]**6 + 1e-21 * x[0]**7 * x[1]**7 + 1e-24 * x[0]**8 * x[1]**8 + 1e-27 * x[0]**9 * x[1]**9 + 1e-30 * x[0]**10 * x[1]**10

def f12(x):
    return x[0]**2 + x[1]**2 + 1e-3 * x[0] * x[1] + 1e-6 * x[0]**2 * x[1]**2 + 1e-9 * x[0]**3 * x[1]**3 + 1e-12 * x[0]**4 * x[1]**4 + 1e-15 * x[0]**5 * x[1]**5 + 1e-18 * x[0]**6 * x[1]**6 + 1e-21 * x[0]**7 * x[1]**7 + 1e-24 * x[0]**8 * x[1]**8 + 1e-27 * x[0]**9 * x[1]**9 + 1e-30 * x[0]**10 * x[1]**10 + 1e-33 * x[0]**11 * x[1]**11

def f13(x):
    return x[0]**2 + x[1]**2 + 1e-3 * x[0] * x[1] + 1e-6 * x[0]**2 * x[1]**2 + 1e-9 * x[0]**3 * x[1]**3 + 1e-12 * x[0]**4 * x[1]**4 + 1e-15 * x[0]**5 * x[1]**5 + 1e-18 * x[0]**6 * x[1]**6 + 1e-21 * x[0]**7 * x[1]**7 + 1e-24 * x[0]**8 * x[1]**8 + 1e-27 * x[0]**9 * x[1]**9 + 1e-30 * x[0]**10 * x[1]**10 + 1e-33 * x[0]**11 * x[1]**11 + 1e-36 * x[0]**12 * x[1]**12

def f14(x):
    return x[0]**2 + x[1]**2 + 1e-3 * x[0] * x[1] + 1e-6 * x[0]**2 * x[1]**2 + 1e-9 * x[0]**3 * x[1]**3 + 1e-12 * x[0]**4 * x[1]**4 + 1e-15 * x[0]**5 * x[1]**5 + 1e-18 * x[0]**6 * x[1]**6 + 1e-21 * x[0]**7 * x[1]**7 + 1e-24 * x[0]**8 * x[1]**8 + 1e-27 * x[0]**9 * x[1]**9 + 1e-30 * x[0]**10 * x[1]**10 + 1e-33 * x[0]**11 * x[1]**11 + 1e-36 * x[0]**12 * x[1]**12 + 1e-39 * x[0]**13 * x[1]**13

def f15(x):
    return x[0]**2 + x[1]**2 + 1e-3 * x[0] * x[1] + 1e-6 * x[0]**2 * x[1]**2 + 1e-9 * x[0]**3 * x[1]**3 + 1e-12 * x[0]**4 * x[1]**4 + 1e-15 * x[0]**5 * x[1]**5 + 1e-18 * x[0]**6 * x[1]**6 + 1e-21 * x[0]**7 * x[1]**7 + 1e-24 * x[0]**8 * x[1]**8 + 1e-27 * x[0]**9 * x[1]**9 + 1e-30 * x[0]**10 * x[1]**10 + 1e-33 * x[0]**11 * x[1]**11 + 1e-36 * x[0]**12 * x[1]**12 + 1e-39 * x[0]**13 * x[1]**13 + 1e-42 * x[0]**14 * x[1]**14

def f16(x):
    return x[0]**2 + x[1]**2 + 1e-3 * x[0] * x[1] + 1e-6 * x[0]**2 * x[1]**2 + 1e-9 * x[0]**3 * x[1]**3 + 1e-12 * x[0]**4 * x[1]**4 + 1e-15 * x[0]**5 * x[1]**5 + 1e-18 * x[0]**6 * x[1]**6 + 1e-21 * x[0]**7 * x[1]**7 + 1e-24 * x[0]**8 * x[1]**8 + 1e-27 * x[0]**9 * x[1]**9 + 1e-30 * x[0]**10 * x[1]**10 + 1e-33 * x[0]**11 * x[1]**11 + 1e-36 * x[0]**12 * x[1]**12 + 1e-39 * x[0]**13 * x[1]**13 + 1e-42 * x[0]**14 * x[1]**14 + 1e-45 * x[0]**15 * x[1]**15

def f17(x):
    return x[0]**2 + x[1]**2 + 1e-3 * x[0] * x[1] + 1e-6 * x[0]**2 * x[1]**2 + 1e-9 * x[0]**3 * x[1]**3 + 1e-12 * x[0]**4 * x[1]**4 + 1e-15 * x[0]**5 * x[1]**5 + 1e-18 * x[0]**6 * x[1]**6 + 1e-21 * x[0]**7 * x[1]**7 + 1e-24 * x[0]**8 * x[1]**8 + 1e-27 * x[0]**9 * x[1]**9 + 1e-30 * x[0]**10 * x[1]**10 + 1e-33 * x[0]**11 * x[1]**11 + 1e-36 * x[0]**12 * x[1]**12 + 1e-39 * x[0]**13 * x[1]**13 + 1e-42 * x[0]**14 * x[1]**14 + 1e-45 * x[0]**15 * x[1]**15 + 1e-48 * x[0]**16 * x[1]**16

def f18(x):
    return x[0]**2 + x[1]**2 + 1e-3 * x[0] * x[1] + 1e-6 * x[0]**2 * x[1]**2 + 1e-9 * x[0]**3 * x[1]**3 + 1e-12 * x[0]**4 * x[1]**4 + 1e-15 * x[0]**5 * x[1]**5 + 1e-18 * x[0]**6 * x[1]**6 + 1e-21 * x[0]**7 * x[1]**7 + 1e-24 * x[0]**8 * x[1]**8 + 1e-27 * x[0]**9 * x[1]**9 + 1e-30 * x[0]**10 * x[1]**10 + 1e-33 * x[0]**11 * x[1]**11 + 1e-36 * x[0]**12 * x[1]**12 + 1e-39 * x[0]**13 * x[1]**13 + 1e-42 * x[0]**14 * x[1]**14 + 1e-45 * x[0]**15 * x[1]**15 + 1e-48 * x[0]**16 * x[1]**16 + 1e-51 * x[0]**17 * x[1]**17

def f19(x):
    return x[0]**2 + x[1]**2 + 1e-3 * x[0] * x[1] + 1e-6 * x[0]**2 * x[1]**2 + 1e-9 * x[0]**3 * x[1]**3 + 1e-12 * x[0]**4 * x[1]**4 + 1e-15 * x[0]**5 * x[1]**5 + 1e-18 * x[0]**6 * x[1]**6 + 1e-21 * x[0]**7 * x[1]**7 + 1e-24 * x[0]**8 * x[1]**8 + 1e-27 * x[0]**9 * x[1]**9 + 1e-30 * x[0]**10 * x[1]**10 + 1e-33 * x[0]**11 * x[1]**11 + 1e-36 * x[0]**12 * x[1]**12 + 1e-39 * x[0]**13 * x[1]**13 + 1e-42 * x[0]**14 * x[1]**14 + 1e-45 * x[0]**15 * x[1]**15 + 1e-48 * x[0]**16 * x[1]**16 + 1e-51 * x[0]**17 * x[1]**17 + 1e-54 * x[0]**18 * x[1]**18

def f20(x):
    return x[0]**2 + x[1]**2 + 1e-3 * x[0] * x[1] + 1e-6 * x[0]**2 * x[1]**2 + 1e-9 * x[0]**3 * x[1]**3 + 1e-12 * x[0]**4 * x[1]**4 + 1e-15 * x[0]**5 * x[1]**5 + 1e-18 * x[0]**6 * x[1]**6 + 1e-21 * x[0]**7 * x[1]**7 + 1e-24 * x[0]**8 * x[1]**8 + 1e-27 * x[0]**9 * x[1]**9 + 1e-30 * x[0]**10 * x[1]**10 + 1e-33 * x[0]**11 * x[1]**11 + 1e-36 * x[0]**12 * x[1]**12 + 1e-39 * x[0]**13 * x[1]**13 + 1e-42 * x[0]**14 * x[1]**14 + 1e-45 * x[0]**15 * x[1]**15 + 1e-48 * x[0]**16 * x[1]**16 + 1e-51 * x[0]**17 * x[1]**17 + 1e-54 * x[0]**18 * x[1]**18 + 1e-57 * x[0]**19 * x[1]**19

def f21(x):
    return x[0]**2 + x[1]**2 + 1e-3 * x[0] * x[1] + 1e-6 * x[0]**2 * x[1]**2 + 1e-9 * x[0]**3 * x[1]**3 + 1e-12 * x[0]**4 * x[1]**4 + 1e-15 * x[0]**5 * x[1]**5 + 1e-18 * x[0]**6 * x[1]**6 + 1e-21 * x[0]**7 * x[1]**7 + 1e-24 * x[0]**8 * x[1]**8 + 1e-27 * x[0]**9 * x[1]**9 + 1e-30 * x[0]**10 * x[1]**10 + 1e-33 * x[0]**11 * x[1]**11 + 1e-36 * x[0]**12 * x[1]**12 + 1e-39 * x[0]**13 * x[1]**13 + 1e-42 * x[0]**14 * x[1]**14 + 1e-45 * x[0]**15 * x[1]**15 + 1e-48 * x[0]**16 * x[1]**16 + 1e-51 * x[0]**17 * x[1]**17 + 1e-54 * x[0]**18 * x[1]**18 + 1e-57 * x[0]**19 * x[1]**19 + 1e-60 * x[0]**20 * x[1]**20

def f22(x):
    return x[0]**2 + x[1]**2 + 1e-3 * x[0] * x[1] + 1e-6 * x[0]**2 * x[1]**2 + 1e-9 * x[0]**3 * x[1]**3 + 1e-12 * x[0]**4 * x[1]**4 + 1e-15 * x[0]**5 * x[1]**5 + 1e-18 * x[0]**6 * x[1]**6 + 1e-21 * x[0]**7 * x[1]**7 + 1e-24 * x[0]**8 * x[1]**8 + 1e-27 * x[0]**9 * x[1]**9 + 1e-30 * x[0]**10 * x[1]**10 + 1e-33 * x[0]**11 * x[1]**11 + 1e-36 * x[0]**12 * x[1]**12 + 1e-39 * x[0]**13 * x[1]**13 + 1e-42 * x[0]**14 * x[1]**14 + 1e-45 * x[0]**15 * x[1]**15 + 1e-48 * x[0]**16 * x[1]**16 + 1e-51 * x[0]**17 * x[1]**17 + 1e-54 * x[0]**18 * x[1]**18 + 1e-57 * x[0]**19 * x[1]**19 + 1e-60 * x[0]**20 * x[1]**20 + 1e-63 * x[0]**21 * x[1]**21

def f23(x):
    return x[0]**2 + x[1]**2 + 1e-3 * x[0] * x[1] + 1e-6 * x[0]**2 * x[1]**2 + 1e-9 * x[0]**3 * x[1]**3 + 1e-12 * x[0]**4 * x[1]**4 + 1e-15 * x[0]**5 * x[1]**5 + 1e-18 * x[0]**6 * x[1]**6 + 1e-21 * x[0]**7 * x[1]**7 + 1e-24 * x[0]**8 * x[1]**8 + 1e-27 * x[0]**9 * x[1]**9 + 1e-30 * x[0]**10 * x[1]**10 + 1e-33 * x[0]**11 * x[1]**11 + 1e-36 * x[0]**12 * x[1]**12 + 1e-39 * x[0]**13 * x[1]**13 + 1e-42 * x[0]**14 * x[1]**14 + 1e-45 * x[0]**15 * x[1]**15 + 1e-48 * x[0]**16 * x[1]**16 + 1e-51 * x[0]**17 * x[1]**17 + 1e-54 * x[0]**18 * x[1]**18 + 1e-57 * x[0]**19 * x[1]**19 + 1e-60 * x[0]**20 * x[1]**20 + 1e-63 * x[0]**21 * x[1]**21 + 1e-66 * x[0]**22 * x[1]**22

def f24(x):
    return x[0]**2 + x[1]**2 + 1e-3 * x[0] * x[1] + 1e-6 * x[0]**2 * x[1]**2 + 1e-9 * x[0]**3 * x[1]**3 + 1e-12 * x[0]**4 * x[1]**4 + 1e-15 * x[0]**5 * x[1]**5 + 1e-18 * x[0]**6 * x[1]**6 + 1e-21 * x[0]**7 * x[1]**7 + 1e-24 * x[0]**8 * x[1]**8 + 1e-27 * x[0]**9 * x[1]**9 + 1e-30 * x[0]**10 * x[1]**10 + 1e-33 * x[0]**11 * x[1]**11 + 1e-36 * x[0]**12 * x[1]**12 + 1e-39 * x[0]**13 * x[1]**13 + 1e-42 * x[0]**14 * x[1]**14 + 1e-45 * x[0]**15 * x[1]**15 + 1e-48 * x[0]**16 * x[1]**16 + 1e-51 * x[0]**17 * x[1]**17 + 1e-54 * x[0]**18 * x[1]**18 + 1e-57 * x[0]**19 * x[1]**19 + 1e-60 * x[0]**20 * x[1]**20 + 1e-63 * x[0]**21 * x[1]**21 + 1e-66 * x[0]**22 * x[1]**22 + 1e-69 * x[0]**23 * x[1]**23

def optimize_function(func, budget, dim):
    algorithm = HybridEvolutionaryAlgorithm(budget, dim)
    return algorithm(func)

# Test the function
budget = 100
dim = 2
func = f1
result = optimize_function(func, budget, dim)
print(result)