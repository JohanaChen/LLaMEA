import numpy as np
from scipy.optimize import differential_evolution

class HEACOMBBO:
    def __init__(self, budget, dim):
        self.budget = budget
        self.dim = dim
        self.bounds = [(-5.0, 5.0)] * dim
        self.x0 = np.random.uniform(self.bounds[0][0], self.bounds[0][1], self.dim)
        self.num_individuals = 10
        self.p = 0.4

    def __call__(self, func):
        if self.budget == 0:
            return np.nan, np.nan

        population = np.random.uniform(self.bounds[0][0], self.bounds[0][1], (self.num_individuals, self.dim))
        for i in range(self.num_individuals):
            if np.random.rand() < self.p:
                new_individual = population[i]
                new_individual[0] += np.random.uniform(-1, 1)
                population[i] = new_individual

        fitness = np.zeros((self.num_individuals, 1))
        for i in range(self.num_individuals):
            fitness[i] = func(population[i])

        indices = np.argsort(fitness)
        population = population[indices]
        fitness = fitness[indices]

        new_population = np.zeros((self.num_individuals, self.dim))
        for i in range(self.num_individuals):
            new_population[i] = population[i] + np.random.uniform(-1, 1)

        return np.min(fitness), np.min(fitness, axis=0), new_population

# Example usage
def f1(x):
    return x[0]**2 + x[1]**2

def f2(x):
    return x[0]**2 + x[1]**2 + x[0]*x[1]

def f3(x):
    return x[0]**2 + x[1]**2 + x[0]*x[1] + x[0]*x[1]**2

def f4(x):
    return x[0]**2 + x[1]**2 + x[0]*x[1] + x[0]*x[1]**2 + x[0]**2*x[1]**2

def f5(x):
    return x[0]**2 + x[1]**2 + x[0]*x[1] + x[0]*x[1]**2 + x[0]**2*x[1]**2 + x[0]*x[1]**3

def f6(x):
    return x[0]**2 + x[1]**2 + x[0]*x[1] + x[0]*x[1]**2 + x[0]**2*x[1]**2 + x[0]*x[1]**3 + x[0]**3*x[1]**3

def f7(x):
    return x[0]**2 + x[1]**2 + x[0]*x[1] + x[0]*x[1]**2 + x[0]**2*x[1]**2 + x[0]*x[1]**3 + x[0]**3*x[1]**3 + x[0]**4*x[1]**4

def f8(x):
    return x[0]**2 + x[1]**2 + x[0]*x[1] + x[0]*x[1]**2 + x[0]**2*x[1]**2 + x[0]*x[1]**3 + x[0]**3*x[1]**3 + x[0]**4*x[1]**4 + x[0]**5*x[1]**5

def f9(x):
    return x[0]**2 + x[1]**2 + x[0]*x[1] + x[0]*x[1]**2 + x[0]**2*x[1]**2 + x[0]*x[1]**3 + x[0]**3*x[1]**3 + x[0]**4*x[1]**4 + x[0]**5*x[1]**5 + x[0]**6*x[1]**6

def f10(x):
    return x[0]**2 + x[1]**2 + x[0]*x[1] + x[0]*x[1]**2 + x[0]**2*x[1]**2 + x[0]*x[1]**3 + x[0]**3*x[1]**3 + x[0]**4*x[1]**4 + x[0]**5*x[1]**5 + x[0]**6*x[1]**6 + x[0]**7*x[1]**7

def f11(x):
    return x[0]**2 + x[1]**2 + x[0]*x[1] + x[0]*x[1]**2 + x[0]**2*x[1]**2 + x[0]*x[1]**3 + x[0]**3*x[1]**3 + x[0]**4*x[1]**4 + x[0]**5*x[1]**5 + x[0]**6*x[1]**6 + x[0]**7*x[1]**7 + x[0]**8*x[1]**8

def f12(x):
    return x[0]**2 + x[1]**2 + x[0]*x[1] + x[0]*x[1]**2 + x[0]**2*x[1]**2 + x[0]*x[1]**3 + x[0]**3*x[1]**3 + x[0]**4*x[1]**4 + x[0]**5*x[1]**5 + x[0]**6*x[1]**6 + x[0]**7*x[1]**7 + x[0]**8*x[1]**8 + x[0]**9*x[1]**9

def f13(x):
    return x[0]**2 + x[1]**2 + x[0]*x[1] + x[0]*x[1]**2 + x[0]**2*x[1]**2 + x[0]*x[1]**3 + x[0]**3*x[1]**3 + x[0]**4*x[1]**4 + x[0]**5*x[1]**5 + x[0]**6*x[1]**6 + x[0]**7*x[1]**7 + x[0]**8*x[1]**8 + x[0]**9*x[1]**9 + x[0]**10*x[1]**10

def f14(x):
    return x[0]**2 + x[1]**2 + x[0]*x[1] + x[0]*x[1]**2 + x[0]**2*x[1]**2 + x[0]*x[1]**3 + x[0]**3*x[1]**3 + x[0]**4*x[1]**4 + x[0]**5*x[1]**5 + x[0]**6*x[1]**6 + x[0]**7*x[1]**7 + x[0]**8*x[1]**8 + x[0]**9*x[1]**9 + x[0]**10*x[1]**10 + x[0]**11*x[1]**11

def f15(x):
    return x[0]**2 + x[1]**2 + x[0]*x[1] + x[0]*x[1]**2 + x[0]**2*x[1]**2 + x[0]*x[1]**3 + x[0]**3*x[1]**3 + x[0]**4*x[1]**4 + x[0]**5*x[1]**5 + x[0]**6*x[1]**6 + x[0]**7*x[1]**7 + x[0]**8*x[1]**8 + x[0]**9*x[1]**9 + x[0]**10*x[1]**10 + x[0]**11*x[1]**11 + x[0]**12*x[1]**12

def f16(x):
    return x[0]**2 + x[1]**2 + x[0]*x[1] + x[0]*x[1]**2 + x[0]**2*x[1]**2 + x[0]*x[1]**3 + x[0]**3*x[1]**3 + x[0]**4*x[1]**4 + x[0]**5*x[1]**5 + x[0]**6*x[1]**6 + x[0]**7*x[1]**7 + x[0]**8*x[1]**8 + x[0]**9*x[1]**9 + x[0]**10*x[1]**10 + x[0]**11*x[1]**11 + x[0]**12*x[1]**12 + x[0]**13*x[1]**13

def f17(x):
    return x[0]**2 + x[1]**2 + x[0]*x[1] + x[0]*x[1]**2 + x[0]**2*x[1]**2 + x[0]*x[1]**3 + x[0]**3*x[1]**3 + x[0]**4*x[1]**4 + x[0]**5*x[1]**5 + x[0]**6*x[1]**6 + x[0]**7*x[1]**7 + x[0]**8*x[1]**8 + x[0]**9*x[1]**9 + x[0]**10*x[1]**10 + x[0]**11*x[1]**11 + x[0]**12*x[1]**12 + x[0]**13*x[1]**13 + x[0]**14*x[1]**14

def f18(x):
    return x[0]**2 + x[1]**2 + x[0]*x[1] + x[0]*x[1]**2 + x[0]**2*x[1]**2 + x[0]*x[1]**3 + x[0]**3*x[1]**3 + x[0]**4*x[1]**4 + x[0]**5*x[1]**5 + x[0]**6*x[1]**6 + x[0]**7*x[1]**7 + x[0]**8*x[1]**8 + x[0]**9*x[1]**9 + x[0]**10*x[1]**10 + x[0]**11*x[1]**11 + x[0]**12*x[1]**12 + x[0]**13*x[1]**13 + x[0]**14*x[1]**14 + x[0]**15*x[1]**15

def f19(x):
    return x[0]**2 + x[1]**2 + x[0]*x[1] + x[0]*x[1]**2 + x[0]**2*x[1]**2 + x[0]*x[1]**3 + x[0]**3*x[1]**3 + x[0]**4*x[1]**4 + x[0]**5*x[1]**5 + x[0]**6*x[1]**6 + x[0]**7*x[1]**7 + x[0]**8*x[1]**8 + x[0]**9*x[1]**9 + x[0]**10*x[1]**10 + x[0]**11*x[1]**11 + x[0]**12*x[1]**12 + x[0]**13*x[1]**13 + x[0]**14*x[1]**14 + x[0]**15*x[1]**15 + x[0]**16*x[1]**16

def f20(x):
    return x[0]**2 + x[1]**2 + x[0]*x[1] + x[0]*x[1]**2 + x[0]**2*x[1]**2 + x[0]*x[1]**3 + x[0]**3*x[1]**3 + x[0]**4*x[1]**4 + x[0]**5*x[1]**5 + x[0]**6*x[1]**6 + x[0]**7*x[1]**7 + x[0]**8*x[1]**8 + x[0]**9*x[1]**9 + x[0]**10*x[1]**10 + x[0]**11*x[1]**11 + x[0]**12*x[1]**12 + x[0]**13*x[1]**13 + x[0]**14*x[1]**14 + x[0]**15*x[1]**15 + x[0]**16*x[1]**16 + x[0]**17*x[1]**17

def f21(x):
    return x[0]**2 + x[1]**2 + x[0]*x[1] + x[0]*x[1]**2 + x[0]**2*x[1]**2 + x[0]*x[1]**3 + x[0]**3*x[1]**3 + x[0]**4*x[1]**4 + x[0]**5*x[1]**5 + x[0]**6*x[1]**6 + x[0]**7*x[1]**7 + x[0]**8*x[1]**8 + x[0]**9*x[1]**9 + x[0]**10*x[1]**10 + x[0]**11*x[1]**11 + x[0]**12*x[1]**12 + x[0]**13*x[1]**13 + x[0]**14*x[1]**14 + x[0]**15*x[1]**15 + x[0]**16*x[1]**16 + x[0]**17*x[1]**17 + x[0]**18*x[1]**18

def f22(x):
    return x[0]**2 + x[1]**2 + x[0]*x[1] + x[0]*x[1]**2 + x[0]**2*x[1]**2 + x[0]*x[1]**3 + x[0]**3*x[1]**3 + x[0]**4*x[1]**4 + x[0]**5*x[1]**5 + x[0]**6*x[1]**6 + x[0]**7*x[1]**7 + x[0]**8*x[1]**8 + x[0]**9*x[1]**9 + x[0]**10*x[1]**10 + x[0]**11*x[1]**11 + x[0]**12*x[1]**12 + x[0]**13*x[1]**13 + x[0]**14*x[1]**14 + x[0]**15*x[1]**15 + x[0]**16*x[1]**16 + x[0]**17*x[1]**17 + x[0]**18*x[1]**18 + x[0]**19*x[1]**19

def f23(x):
    return x[0]**2 + x[1]**2 + x[0]*x[1] + x[0]*x[1]**2 + x[0]**2*x[1]**2 + x[0]*x[1]**3 + x[0]**3*x[1]**3 + x[0]**4*x[1]**4 + x[0]**5*x[1]**5 + x[0]**6*x[1]**6 + x[0]**7*x[1]**7 + x[0]**8*x[1]**8 + x[0]**9*x[1]**9 + x[0]**10*x[1]**10 + x[0]**11*x[1]**11 + x[0]**12*x[1]**12 + x[0]**13*x[1]**13 + x[0]**14*x[1]**14 + x[0]**15*x[1]**15 + x[0]**16*x[1]**16 + x[0]**17*x[1]**17 + x[0]**18*x[1]**18 + x[0]**19*x[1]**19 + x[0]**20*x[1]**20

def f24(x):
    return x[0]**2 + x[1]**2 + x[0]*x[1] + x[0]*x[1]**2 + x[0]**2*x[1]**2 + x[0]*x[1]**3 + x[0]**3*x[1]**3 + x[0]**4*x[1]**4 + x[0]**5*x[1]**5 + x[0]**6*x[1]**6 + x[0]**7*x[1]**7 + x[0]**8*x[1]**8 + x[0]**9*x[1]**9 + x[0]**10*x[1]**10 + x[0]**11*x[1]**11 + x[0]**12*x[1]**12 + x[0]**13*x[1]**13 + x[0]**14*x[1]**14 + x[0]**15*x[1]**15 + x[0]**16*x[1]**16 + x[0]**17*x[1]**17 + x[0]**18*x[1]**18 + x[0]**19*x[1]**19 + x[0]**20*x[1]**20 + x[0]**21*x[1]**21

budget = 100
dim = 10
algorithm = HEACOMBBO(budget, dim)
best_fitness, best_solution, new_population = algorithm(f1)
print("Best fitness:", best_fitness)
print("Best solution:", best_solution)