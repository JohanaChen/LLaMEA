{"id": "1c1a49fb-dde3-433a-86ba-516a3e189a58", "solution": "import numpy as np\n\nclass DynamicHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory_size = 20\n        self.harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n        self.harmony_memory_values = np.full(self.harmony_memory_size, np.inf)\n        self.harmony_memory_rate = 0.9\n        self.pitch_adjustment_rate = 0.3\n        self.bandwidth = 0.1\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            if evaluations < self.harmony_memory_size:\n                self.harmony_memory_values[evaluations] = func(self.harmony_memory[evaluations])\n                evaluations += 1\n                continue\n\n            new_harmony = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.harmony_memory_rate:\n                    random_index = np.random.randint(self.harmony_memory_size)\n                    new_harmony[i] = self.harmony_memory[random_index, i]\n                    if np.random.rand() < self.pitch_adjustment_rate:\n                        new_harmony[i] += self.bandwidth * (2 * np.random.rand() - 1)\n                else:\n                    new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            new_value = func(new_harmony)\n            evaluations += 1\n\n            if new_value < np.max(self.harmony_memory_values):\n                worst_index = np.argmax(self.harmony_memory_values)\n                self.harmony_memory[worst_index] = new_harmony\n                self.harmony_memory_values[worst_index] = new_value\n\n            self.adaptive_adjustments(evaluations)\n\n        best_index = np.argmin(self.harmony_memory_values)\n        return self.harmony_memory[best_index]\n\n    def adaptive_adjustments(self, evaluations):\n        progress = evaluations / self.budget\n        self.harmony_memory_rate = 0.9 - 0.5 * progress\n        self.pitch_adjustment_rate = 0.3 + 0.4 * progress\n        self.bandwidth = 0.1 * (1 - progress)", "name": "DynamicHarmonySearch", "description": "A dynamic harmony search algorithm that adaptively adjusts harmony memory and pitch adjustment rates for efficient global and local search within constrained budget.", "configspace": "", "generation": 0, "fitness": 0.2379388838454769, "feedback": "The algorithm DynamicHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.19.", "error": "", "parent_id": null, "metadata": {"aucs": [0.5704332080419459, 0.6244890744555132, 0.6207988918828597, 0.6131493499272003, 0.6345464525627511, 0.6049250953265748, 0.5710385017321848, 0.6138927801113604, 0.6034580754340051, 0.23050094470463944, 0.22823528690618666, 0.22665851914693036, 0.209535694916669, 0.17874514373450257, 0.2801906202081741, 0.26850454497899123, 0.24476280507512937, 0.21097041090152424, 0.31949728813202705, 0.2550944112155906, 0.19495495266509977, 0.23552293995083773, 0.1956162500527695, 0.2576841710763259, 0.2057783451160965, 0.2482059788916099, 0.2046642163223159, 0.15459122529311076, 0.1835930847506667, 0.19246545956950012, 0.16644319031733923, 0.18021903999793298, 0.18872821809532392, 0.14689226575944014, 0.1766995714920555, 0.25262933178467206, 0.8858798757124817, 0.915959929041673, 0.8498330921491097, 0.8799016205219816, 0.8912962838268849, 0.874907707760497, 0.8949817861079158, 0.9271578856722879, 0.930579204817092, 0.3563305032774928, 0.18691416080566525, 0.3401514541851397, 0.3146886267623338, 0.31684578569201594, 0.3227999630306666, 0.19741139219796233, 0.27757223939775644, 0.34072412897776516, 0.1571586321168057, 0.15763974125183433, 0.14182020649975147, 0.2151695505408907, 0.3232489157379459, 0.2104687333525107, 0.19640764340540173, 0.24209693047129288, 0.1635636769001363, 0.24572862041341437, 0.15998875941963397, 0.1989165094023887, 0.17335430354022374, 0.2510005776771199, 0.22860929651905182, 0.1585113260466553, 0.26977476658567123, 0.22095543673640972, 0.1472773234512793, 0.12858473164696949, 0.1348244182558468, 0.1428388742339476, 0.13872522747674576, 0.1670729790977049, 0.15153679227444627, 0.12716185669125402, 0.17785881722950014, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07119516648141544, 0.05472781572006624, 0.06616653690980179, 0.030157548486412944, 0.015763148410971595, 0.07037535643284898, 0.07383403245894937, 0.10942407495182593, 0.05617114660867861, 0.061574510473494604, 0.03246878528064867, 0.10033053631672428, 0.0361247411066441, 0.07240012458904344, 0.047664929658742805, 0.07197752722622297, 0.09270911636102519, 0.08955603272682477, 0.07828697036176258, 0.07434964110159892, 0.09609186460157104, 0.18432699518960438, 0.05402164755163463, 0.1043783793454175, 0.21152235282005838, 0.12244586443521899, 0.12104826500044452, 0.4550402520263397, 0.42818605328160775, 0.4459959591676057, 0.45703423950127586, 0.4567700653311526, 0.521706638891632, 0.44018800959669235, 0.4703480122386171, 0.4580144508992938, 0.11299458620899883, 0.09595364155203556, 0.0834930436323017, 0.06856799867487284, 0.09629696764908113, 0.3147656061695542, 0.09790126854909031, 0.10548349043669147, 0.0868874778991896, 0.16585779596080974, 0.14109752981740697, 0.14706423760029552, 0.14923679824473368, 0.16379846718593238, 0.16125163555909638, 0.19665941708580947, 0.29385808699967997, 0.19398012026970846, 0.24485336814298841, 0.2671907272058839, 0.24334362932441167, 0.34902822554772406, 0.30161646359304295, 0.2788358621553251, 0.21038868962640633, 0.21195156151858563, 0.2539493714527772, 0.21221769980051008, 0.25189853128806716, 0.1461831541649069, 0.25962775379763603, 0.17068754561275112, 0.1947215150486724, 0.18402139059092304, 0.1851390645301837, 0.10556926290891111, 0.20175371466191339, 0.20129455269544883, 0.23568957816001335, 0.23609215203692957, 0.22100439352154855, 0.22125580681279267, 0.20613032310350732, 0.1806976945539691, 0.2111776785611167, 0.19848573784613288, 0.22677409718115238, 0.2116939994058954, 0.21177403913516324, 0.2017369770299826, 0.21878982010745973, 0.25187532604145924, 0.2547883462268625, 0.208305723347314, 0.16760324667949467, 0.1875450478040529, 0.37077029037974585, 0.7918964448933967, 0.5078329783348245, 0.177430972847343, 0.37683012802068305, 0.2078773549420645, 0.16151408001518797, 0.40807197847179555, 0.16881079972312785, 0.2656143506388019, 0.20813515546355754, 0.19993159981029762, 0.3334185805693025, 0.1315232262837258, 0.17741907658069545, 0.10545671885588559, 0.17273821450719062, 0.19357944511499936, 0.18186041182433654, 0.17653046263196814, 0.19065298834225852, 0.18717740900865343, 0.18289952214719118, 0.18668375654139913, 0.1967598884362861, 0.09634801276911531, 0.0735565223137401, 0.0952188542545811, 0.08198354234027705, 0.09109091311088724, 0.09816571913271332, 0.07808870104911836, 0.06901809161885541, 0.08745005994851107]}, "mutation_prompt": null}
{"id": "d2abd998-e315-41f4-ad22-002ffb7dffba", "solution": "import numpy as np\n\nclass DynamicHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory_size = 20\n        self.harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n        self.harmony_memory_values = np.full(self.harmony_memory_size, np.inf)\n        self.harmony_memory_rate = 0.9\n        self.pitch_adjustment_rate = 0.3\n        self.bandwidth = 0.1\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            if evaluations < self.harmony_memory_size:\n                self.harmony_memory_values[evaluations] = func(self.harmony_memory[evaluations])\n                evaluations += 1\n                continue\n\n            new_harmony = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.harmony_memory_rate:\n                    random_index = np.random.randint(self.harmony_memory_size)\n                    new_harmony[i] = self.harmony_memory[random_index, i]\n                    if np.random.rand() < self.pitch_adjustment_rate:\n                        new_harmony[i] += self.bandwidth * (2 * np.random.rand() - 1)\n                else:\n                    new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            new_value = func(new_harmony)\n            evaluations += 1\n\n            if new_value < np.max(self.harmony_memory_values):\n                worst_index = np.argmax(self.harmony_memory_values)\n                self.harmony_memory[worst_index] = new_harmony\n                self.harmony_memory_values[worst_index] = new_value\n\n            self.adaptive_adjustments(evaluations)\n\n        best_index = np.argmin(self.harmony_memory_values)\n        return self.harmony_memory[best_index]\n\n    def adaptive_adjustments(self, evaluations):\n        progress = evaluations / self.budget\n        self.harmony_memory_rate = 0.9 - 0.5 * progress\n        self.pitch_adjustment_rate = 0.3 + 0.4 * progress\n        self.bandwidth = 0.1 * (1 - progress)", "name": "DynamicHarmonySearch", "description": "A dynamic harmony search algorithm that adaptively adjusts harmony memory and pitch adjustment rates for efficient global and local search within constrained budget.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1c1a49fb-dde3-433a-86ba-516a3e189a58", "metadata": {"aucs": [0.5704332080419459, 0.6244890744555132, 0.6207988918828597, 0.6131493499272003, 0.6345464525627511, 0.6049250953265748, 0.5710385017321848, 0.6138927801113604, 0.6034580754340051, 0.23050094470463944, 0.22823528690618666, 0.22665851914693036, 0.209535694916669, 0.17874514373450257, 0.2801906202081741, 0.26850454497899123, 0.24476280507512937, 0.21097041090152424, 0.31949728813202705, 0.2550944112155906, 0.19495495266509977, 0.23552293995083773, 0.1956162500527695, 0.2576841710763259, 0.2057783451160965, 0.2482059788916099, 0.2046642163223159, 0.15459122529311076, 0.1835930847506667, 0.19246545956950012, 0.16644319031733923, 0.18021903999793298, 0.18872821809532392, 0.14689226575944014, 0.1766995714920555, 0.25262933178467206, 0.8858798757124817, 0.915959929041673, 0.8498330921491097, 0.8799016205219816, 0.8912962838268849, 0.874907707760497, 0.8949817861079158, 0.9271578856722879, 0.930579204817092, 0.3563305032774928, 0.18691416080566525, 0.3401514541851397, 0.3146886267623338, 0.31684578569201594, 0.3227999630306666, 0.19741139219796233, 0.27757223939775644, 0.34072412897776516, 0.1571586321168057, 0.15763974125183433, 0.14182020649975147, 0.2151695505408907, 0.3232489157379459, 0.2104687333525107, 0.19640764340540173, 0.24209693047129288, 0.1635636769001363, 0.24572862041341437, 0.15998875941963397, 0.1989165094023887, 0.17335430354022374, 0.2510005776771199, 0.22860929651905182, 0.1585113260466553, 0.26977476658567123, 0.22095543673640972, 0.1472773234512793, 0.12858473164696949, 0.1348244182558468, 0.1428388742339476, 0.13872522747674576, 0.1670729790977049, 0.15153679227444627, 0.12716185669125402, 0.17785881722950014, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07119516648141544, 0.05472781572006624, 0.06616653690980179, 0.030157548486412944, 0.015763148410971595, 0.07037535643284898, 0.07383403245894937, 0.10942407495182593, 0.05617114660867861, 0.061574510473494604, 0.03246878528064867, 0.10033053631672428, 0.0361247411066441, 0.07240012458904344, 0.047664929658742805, 0.07197752722622297, 0.09270911636102519, 0.08955603272682477, 0.07828697036176258, 0.07434964110159892, 0.09609186460157104, 0.18432699518960438, 0.05402164755163463, 0.1043783793454175, 0.21152235282005838, 0.12244586443521899, 0.12104826500044452, 0.4550402520263397, 0.42818605328160775, 0.4459959591676057, 0.45703423950127586, 0.4567700653311526, 0.521706638891632, 0.44018800959669235, 0.4703480122386171, 0.4580144508992938, 0.11299458620899883, 0.09595364155203556, 0.0834930436323017, 0.06856799867487284, 0.09629696764908113, 0.3147656061695542, 0.09790126854909031, 0.10548349043669147, 0.0868874778991896, 0.16585779596080974, 0.14109752981740697, 0.14706423760029552, 0.14923679824473368, 0.16379846718593238, 0.16125163555909638, 0.19665941708580947, 0.29385808699967997, 0.19398012026970846, 0.24485336814298841, 0.2671907272058839, 0.24334362932441167, 0.34902822554772406, 0.30161646359304295, 0.2788358621553251, 0.21038868962640633, 0.21195156151858563, 0.2539493714527772, 0.21221769980051008, 0.25189853128806716, 0.1461831541649069, 0.25962775379763603, 0.17068754561275112, 0.1947215150486724, 0.18402139059092304, 0.1851390645301837, 0.10556926290891111, 0.20175371466191339, 0.20129455269544883, 0.23568957816001335, 0.23609215203692957, 0.22100439352154855, 0.22125580681279267, 0.20613032310350732, 0.1806976945539691, 0.2111776785611167, 0.19848573784613288, 0.22677409718115238, 0.2116939994058954, 0.21177403913516324, 0.2017369770299826, 0.21878982010745973, 0.25187532604145924, 0.2547883462268625, 0.208305723347314, 0.16760324667949467, 0.1875450478040529, 0.37077029037974585, 0.7918964448933967, 0.5078329783348245, 0.177430972847343, 0.37683012802068305, 0.2078773549420645, 0.16151408001518797, 0.40807197847179555, 0.16881079972312785, 0.2656143506388019, 0.20813515546355754, 0.19993159981029762, 0.3334185805693025, 0.1315232262837258, 0.17741907658069545, 0.10545671885588559, 0.17273821450719062, 0.19357944511499936, 0.18186041182433654, 0.17653046263196814, 0.19065298834225852, 0.18717740900865343, 0.18289952214719118, 0.18668375654139913, 0.1967598884362861, 0.09634801276911531, 0.0735565223137401, 0.0952188542545811, 0.08198354234027705, 0.09109091311088724, 0.09816571913271332, 0.07808870104911836, 0.06901809161885541, 0.08745005994851107]}, "mutation_prompt": null}
{"id": "bcc37e24-2d2f-43e0-a5dc-7b241239e79d", "solution": "import numpy as np\n\nclass DynamicHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory_size = 20\n        self.harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n        self.harmony_memory_values = np.full(self.harmony_memory_size, np.inf)\n        self.harmony_memory_rate = 0.9\n        self.pitch_adjustment_rate = 0.3\n        self.bandwidth = 0.1\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            if evaluations < self.harmony_memory_size:\n                self.harmony_memory_values[evaluations] = func(self.harmony_memory[evaluations])\n                evaluations += 1\n                continue\n\n            new_harmony = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.harmony_memory_rate:\n                    random_index = np.random.randint(self.harmony_memory_size)\n                    new_harmony[i] = self.harmony_memory[random_index, i]\n                    if np.random.rand() < self.pitch_adjustment_rate:\n                        new_harmony[i] += self.bandwidth * (2 * np.random.rand() - 1)\n                else:\n                    new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            new_value = func(new_harmony)\n            evaluations += 1\n\n            if new_value < np.max(self.harmony_memory_values):\n                worst_index = np.argmax(self.harmony_memory_values)\n                self.harmony_memory[worst_index] = new_harmony\n                self.harmony_memory_values[worst_index] = new_value\n\n            self.adaptive_adjustments(evaluations)\n\n        best_index = np.argmin(self.harmony_memory_values)\n        return self.harmony_memory[best_index]\n\n    def adaptive_adjustments(self, evaluations):\n        progress = evaluations / self.budget\n        self.harmony_memory_rate = 0.9 - 0.5 * progress\n        self.pitch_adjustment_rate = 0.3 + 0.4 * progress\n        self.bandwidth = 0.1 * (1 - progress)", "name": "DynamicHarmonySearch", "description": "A dynamic harmony search algorithm that adaptively adjusts harmony memory and pitch adjustment rates for efficient global and local search within constrained budget.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1c1a49fb-dde3-433a-86ba-516a3e189a58", "metadata": {"aucs": [0.5704332080419459, 0.6244890744555132, 0.6207988918828597, 0.6131493499272003, 0.6345464525627511, 0.6049250953265748, 0.5710385017321848, 0.6138927801113604, 0.6034580754340051, 0.23050094470463944, 0.22823528690618666, 0.22665851914693036, 0.209535694916669, 0.17874514373450257, 0.2801906202081741, 0.26850454497899123, 0.24476280507512937, 0.21097041090152424, 0.31949728813202705, 0.2550944112155906, 0.19495495266509977, 0.23552293995083773, 0.1956162500527695, 0.2576841710763259, 0.2057783451160965, 0.2482059788916099, 0.2046642163223159, 0.15459122529311076, 0.1835930847506667, 0.19246545956950012, 0.16644319031733923, 0.18021903999793298, 0.18872821809532392, 0.14689226575944014, 0.1766995714920555, 0.25262933178467206, 0.8858798757124817, 0.915959929041673, 0.8498330921491097, 0.8799016205219816, 0.8912962838268849, 0.874907707760497, 0.8949817861079158, 0.9271578856722879, 0.930579204817092, 0.3563305032774928, 0.18691416080566525, 0.3401514541851397, 0.3146886267623338, 0.31684578569201594, 0.3227999630306666, 0.19741139219796233, 0.27757223939775644, 0.34072412897776516, 0.1571586321168057, 0.15763974125183433, 0.14182020649975147, 0.2151695505408907, 0.3232489157379459, 0.2104687333525107, 0.19640764340540173, 0.24209693047129288, 0.1635636769001363, 0.24572862041341437, 0.15998875941963397, 0.1989165094023887, 0.17335430354022374, 0.2510005776771199, 0.22860929651905182, 0.1585113260466553, 0.26977476658567123, 0.22095543673640972, 0.1472773234512793, 0.12858473164696949, 0.1348244182558468, 0.1428388742339476, 0.13872522747674576, 0.1670729790977049, 0.15153679227444627, 0.12716185669125402, 0.17785881722950014, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07119516648141544, 0.05472781572006624, 0.06616653690980179, 0.030157548486412944, 0.015763148410971595, 0.07037535643284898, 0.07383403245894937, 0.10942407495182593, 0.05617114660867861, 0.061574510473494604, 0.03246878528064867, 0.10033053631672428, 0.0361247411066441, 0.07240012458904344, 0.047664929658742805, 0.07197752722622297, 0.09270911636102519, 0.08955603272682477, 0.07828697036176258, 0.07434964110159892, 0.09609186460157104, 0.18432699518960438, 0.05402164755163463, 0.1043783793454175, 0.21152235282005838, 0.12244586443521899, 0.12104826500044452, 0.4550402520263397, 0.42818605328160775, 0.4459959591676057, 0.45703423950127586, 0.4567700653311526, 0.521706638891632, 0.44018800959669235, 0.4703480122386171, 0.4580144508992938, 0.11299458620899883, 0.09595364155203556, 0.0834930436323017, 0.06856799867487284, 0.09629696764908113, 0.3147656061695542, 0.09790126854909031, 0.10548349043669147, 0.0868874778991896, 0.16585779596080974, 0.14109752981740697, 0.14706423760029552, 0.14923679824473368, 0.16379846718593238, 0.16125163555909638, 0.19665941708580947, 0.29385808699967997, 0.19398012026970846, 0.24485336814298841, 0.2671907272058839, 0.24334362932441167, 0.34902822554772406, 0.30161646359304295, 0.2788358621553251, 0.21038868962640633, 0.21195156151858563, 0.2539493714527772, 0.21221769980051008, 0.25189853128806716, 0.1461831541649069, 0.25962775379763603, 0.17068754561275112, 0.1947215150486724, 0.18402139059092304, 0.1851390645301837, 0.10556926290891111, 0.20175371466191339, 0.20129455269544883, 0.23568957816001335, 0.23609215203692957, 0.22100439352154855, 0.22125580681279267, 0.20613032310350732, 0.1806976945539691, 0.2111776785611167, 0.19848573784613288, 0.22677409718115238, 0.2116939994058954, 0.21177403913516324, 0.2017369770299826, 0.21878982010745973, 0.25187532604145924, 0.2547883462268625, 0.208305723347314, 0.16760324667949467, 0.1875450478040529, 0.37077029037974585, 0.7918964448933967, 0.5078329783348245, 0.177430972847343, 0.37683012802068305, 0.2078773549420645, 0.16151408001518797, 0.40807197847179555, 0.16881079972312785, 0.2656143506388019, 0.20813515546355754, 0.19993159981029762, 0.3334185805693025, 0.1315232262837258, 0.17741907658069545, 0.10545671885588559, 0.17273821450719062, 0.19357944511499936, 0.18186041182433654, 0.17653046263196814, 0.19065298834225852, 0.18717740900865343, 0.18289952214719118, 0.18668375654139913, 0.1967598884362861, 0.09634801276911531, 0.0735565223137401, 0.0952188542545811, 0.08198354234027705, 0.09109091311088724, 0.09816571913271332, 0.07808870104911836, 0.06901809161885541, 0.08745005994851107]}, "mutation_prompt": null}
{"id": "f19c8f1d-d138-40cf-b874-aa9951244136", "solution": "import numpy as np\n\nclass DynamicHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory_size = 20\n        self.harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n        self.harmony_memory_values = np.full(self.harmony_memory_size, np.inf)\n        self.harmony_memory_rate = 0.9\n        self.pitch_adjustment_rate = 0.3\n        self.bandwidth = 0.1\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            if evaluations < self.harmony_memory_size:\n                self.harmony_memory_values[evaluations] = func(self.harmony_memory[evaluations])\n                evaluations += 1\n                continue\n\n            new_harmony = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.harmony_memory_rate:\n                    random_index = np.random.randint(self.harmony_memory_size)\n                    new_harmony[i] = self.harmony_memory[random_index, i]\n                    if np.random.rand() < self.pitch_adjustment_rate:\n                        new_harmony[i] += self.bandwidth * (2 * np.random.rand() - 1)\n                else:\n                    new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            new_value = func(new_harmony)\n            evaluations += 1\n\n            if new_value < np.max(self.harmony_memory_values):\n                worst_index = np.argmax(self.harmony_memory_values)\n                self.harmony_memory[worst_index] = new_harmony\n                self.harmony_memory_values[worst_index] = new_value\n\n            self.adaptive_adjustments(evaluations)\n\n        best_index = np.argmin(self.harmony_memory_values)\n        return self.harmony_memory[best_index]\n\n    def adaptive_adjustments(self, evaluations):\n        progress = evaluations / self.budget\n        self.harmony_memory_rate = 0.9 - 0.5 * progress\n        self.pitch_adjustment_rate = 0.3 + 0.4 * progress\n        self.bandwidth = 0.1 * (1 - progress)", "name": "DynamicHarmonySearch", "description": "A dynamic harmony search algorithm that adaptively adjusts harmony memory and pitch adjustment rates for efficient global and local search within constrained budget.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1c1a49fb-dde3-433a-86ba-516a3e189a58", "metadata": {"aucs": [0.5704332080419459, 0.6244890744555132, 0.6207988918828597, 0.6131493499272003, 0.6345464525627511, 0.6049250953265748, 0.5710385017321848, 0.6138927801113604, 0.6034580754340051, 0.23050094470463944, 0.22823528690618666, 0.22665851914693036, 0.209535694916669, 0.17874514373450257, 0.2801906202081741, 0.26850454497899123, 0.24476280507512937, 0.21097041090152424, 0.31949728813202705, 0.2550944112155906, 0.19495495266509977, 0.23552293995083773, 0.1956162500527695, 0.2576841710763259, 0.2057783451160965, 0.2482059788916099, 0.2046642163223159, 0.15459122529311076, 0.1835930847506667, 0.19246545956950012, 0.16644319031733923, 0.18021903999793298, 0.18872821809532392, 0.14689226575944014, 0.1766995714920555, 0.25262933178467206, 0.8858798757124817, 0.915959929041673, 0.8498330921491097, 0.8799016205219816, 0.8912962838268849, 0.874907707760497, 0.8949817861079158, 0.9271578856722879, 0.930579204817092, 0.3563305032774928, 0.18691416080566525, 0.3401514541851397, 0.3146886267623338, 0.31684578569201594, 0.3227999630306666, 0.19741139219796233, 0.27757223939775644, 0.34072412897776516, 0.1571586321168057, 0.15763974125183433, 0.14182020649975147, 0.2151695505408907, 0.3232489157379459, 0.2104687333525107, 0.19640764340540173, 0.24209693047129288, 0.1635636769001363, 0.24572862041341437, 0.15998875941963397, 0.1989165094023887, 0.17335430354022374, 0.2510005776771199, 0.22860929651905182, 0.1585113260466553, 0.26977476658567123, 0.22095543673640972, 0.1472773234512793, 0.12858473164696949, 0.1348244182558468, 0.1428388742339476, 0.13872522747674576, 0.1670729790977049, 0.15153679227444627, 0.12716185669125402, 0.17785881722950014, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07119516648141544, 0.05472781572006624, 0.06616653690980179, 0.030157548486412944, 0.015763148410971595, 0.07037535643284898, 0.07383403245894937, 0.10942407495182593, 0.05617114660867861, 0.061574510473494604, 0.03246878528064867, 0.10033053631672428, 0.0361247411066441, 0.07240012458904344, 0.047664929658742805, 0.07197752722622297, 0.09270911636102519, 0.08955603272682477, 0.07828697036176258, 0.07434964110159892, 0.09609186460157104, 0.18432699518960438, 0.05402164755163463, 0.1043783793454175, 0.21152235282005838, 0.12244586443521899, 0.12104826500044452, 0.4550402520263397, 0.42818605328160775, 0.4459959591676057, 0.45703423950127586, 0.4567700653311526, 0.521706638891632, 0.44018800959669235, 0.4703480122386171, 0.4580144508992938, 0.11299458620899883, 0.09595364155203556, 0.0834930436323017, 0.06856799867487284, 0.09629696764908113, 0.3147656061695542, 0.09790126854909031, 0.10548349043669147, 0.0868874778991896, 0.16585779596080974, 0.14109752981740697, 0.14706423760029552, 0.14923679824473368, 0.16379846718593238, 0.16125163555909638, 0.19665941708580947, 0.29385808699967997, 0.19398012026970846, 0.24485336814298841, 0.2671907272058839, 0.24334362932441167, 0.34902822554772406, 0.30161646359304295, 0.2788358621553251, 0.21038868962640633, 0.21195156151858563, 0.2539493714527772, 0.21221769980051008, 0.25189853128806716, 0.1461831541649069, 0.25962775379763603, 0.17068754561275112, 0.1947215150486724, 0.18402139059092304, 0.1851390645301837, 0.10556926290891111, 0.20175371466191339, 0.20129455269544883, 0.23568957816001335, 0.23609215203692957, 0.22100439352154855, 0.22125580681279267, 0.20613032310350732, 0.1806976945539691, 0.2111776785611167, 0.19848573784613288, 0.22677409718115238, 0.2116939994058954, 0.21177403913516324, 0.2017369770299826, 0.21878982010745973, 0.25187532604145924, 0.2547883462268625, 0.208305723347314, 0.16760324667949467, 0.1875450478040529, 0.37077029037974585, 0.7918964448933967, 0.5078329783348245, 0.177430972847343, 0.37683012802068305, 0.2078773549420645, 0.16151408001518797, 0.40807197847179555, 0.16881079972312785, 0.2656143506388019, 0.20813515546355754, 0.19993159981029762, 0.3334185805693025, 0.1315232262837258, 0.17741907658069545, 0.10545671885588559, 0.17273821450719062, 0.19357944511499936, 0.18186041182433654, 0.17653046263196814, 0.19065298834225852, 0.18717740900865343, 0.18289952214719118, 0.18668375654139913, 0.1967598884362861, 0.09634801276911531, 0.0735565223137401, 0.0952188542545811, 0.08198354234027705, 0.09109091311088724, 0.09816571913271332, 0.07808870104911836, 0.06901809161885541, 0.08745005994851107]}, "mutation_prompt": null}
{"id": "8f0cfd4f-b4e5-40ac-878a-d85f75aac51b", "solution": "import numpy as np\n\nclass DynamicHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory_size = 20\n        self.harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n        self.harmony_memory_values = np.full(self.harmony_memory_size, np.inf)\n        self.harmony_memory_rate = 0.9\n        self.pitch_adjustment_rate = 0.3\n        self.bandwidth = 0.1\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            if evaluations < self.harmony_memory_size:\n                self.harmony_memory_values[evaluations] = func(self.harmony_memory[evaluations])\n                evaluations += 1\n                continue\n\n            new_harmony = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.harmony_memory_rate:\n                    random_index = np.random.randint(self.harmony_memory_size)\n                    new_harmony[i] = self.harmony_memory[random_index, i]\n                    if np.random.rand() < self.pitch_adjustment_rate:\n                        new_harmony[i] += self.bandwidth * (2 * np.random.rand() - 1)\n                else:\n                    new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            new_value = func(new_harmony)\n            evaluations += 1\n\n            if new_value < np.max(self.harmony_memory_values):\n                worst_index = np.argmax(self.harmony_memory_values)\n                self.harmony_memory[worst_index] = new_harmony\n                self.harmony_memory_values[worst_index] = new_value\n\n            self.adaptive_adjustments(evaluations)\n\n        best_index = np.argmin(self.harmony_memory_values)\n        return self.harmony_memory[best_index]\n\n    def adaptive_adjustments(self, evaluations):\n        progress = evaluations / self.budget\n        self.harmony_memory_rate = 0.9 - 0.5 * progress\n        self.pitch_adjustment_rate = 0.3 + 0.4 * progress\n        self.bandwidth = 0.1 * (1 - progress)", "name": "DynamicHarmonySearch", "description": "A dynamic harmony search algorithm that adaptively adjusts harmony memory and pitch adjustment rates for efficient global and local search within constrained budget.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1c1a49fb-dde3-433a-86ba-516a3e189a58", "metadata": {"aucs": [0.5704332080419459, 0.6244890744555132, 0.6207988918828597, 0.6131493499272003, 0.6345464525627511, 0.6049250953265748, 0.5710385017321848, 0.6138927801113604, 0.6034580754340051, 0.23050094470463944, 0.22823528690618666, 0.22665851914693036, 0.209535694916669, 0.17874514373450257, 0.2801906202081741, 0.26850454497899123, 0.24476280507512937, 0.21097041090152424, 0.31949728813202705, 0.2550944112155906, 0.19495495266509977, 0.23552293995083773, 0.1956162500527695, 0.2576841710763259, 0.2057783451160965, 0.2482059788916099, 0.2046642163223159, 0.15459122529311076, 0.1835930847506667, 0.19246545956950012, 0.16644319031733923, 0.18021903999793298, 0.18872821809532392, 0.14689226575944014, 0.1766995714920555, 0.25262933178467206, 0.8858798757124817, 0.915959929041673, 0.8498330921491097, 0.8799016205219816, 0.8912962838268849, 0.874907707760497, 0.8949817861079158, 0.9271578856722879, 0.930579204817092, 0.3563305032774928, 0.18691416080566525, 0.3401514541851397, 0.3146886267623338, 0.31684578569201594, 0.3227999630306666, 0.19741139219796233, 0.27757223939775644, 0.34072412897776516, 0.1571586321168057, 0.15763974125183433, 0.14182020649975147, 0.2151695505408907, 0.3232489157379459, 0.2104687333525107, 0.19640764340540173, 0.24209693047129288, 0.1635636769001363, 0.24572862041341437, 0.15998875941963397, 0.1989165094023887, 0.17335430354022374, 0.2510005776771199, 0.22860929651905182, 0.1585113260466553, 0.26977476658567123, 0.22095543673640972, 0.1472773234512793, 0.12858473164696949, 0.1348244182558468, 0.1428388742339476, 0.13872522747674576, 0.1670729790977049, 0.15153679227444627, 0.12716185669125402, 0.17785881722950014, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07119516648141544, 0.05472781572006624, 0.06616653690980179, 0.030157548486412944, 0.015763148410971595, 0.07037535643284898, 0.07383403245894937, 0.10942407495182593, 0.05617114660867861, 0.061574510473494604, 0.03246878528064867, 0.10033053631672428, 0.0361247411066441, 0.07240012458904344, 0.047664929658742805, 0.07197752722622297, 0.09270911636102519, 0.08955603272682477, 0.07828697036176258, 0.07434964110159892, 0.09609186460157104, 0.18432699518960438, 0.05402164755163463, 0.1043783793454175, 0.21152235282005838, 0.12244586443521899, 0.12104826500044452, 0.4550402520263397, 0.42818605328160775, 0.4459959591676057, 0.45703423950127586, 0.4567700653311526, 0.521706638891632, 0.44018800959669235, 0.4703480122386171, 0.4580144508992938, 0.11299458620899883, 0.09595364155203556, 0.0834930436323017, 0.06856799867487284, 0.09629696764908113, 0.3147656061695542, 0.09790126854909031, 0.10548349043669147, 0.0868874778991896, 0.16585779596080974, 0.14109752981740697, 0.14706423760029552, 0.14923679824473368, 0.16379846718593238, 0.16125163555909638, 0.19665941708580947, 0.29385808699967997, 0.19398012026970846, 0.24485336814298841, 0.2671907272058839, 0.24334362932441167, 0.34902822554772406, 0.30161646359304295, 0.2788358621553251, 0.21038868962640633, 0.21195156151858563, 0.2539493714527772, 0.21221769980051008, 0.25189853128806716, 0.1461831541649069, 0.25962775379763603, 0.17068754561275112, 0.1947215150486724, 0.18402139059092304, 0.1851390645301837, 0.10556926290891111, 0.20175371466191339, 0.20129455269544883, 0.23568957816001335, 0.23609215203692957, 0.22100439352154855, 0.22125580681279267, 0.20613032310350732, 0.1806976945539691, 0.2111776785611167, 0.19848573784613288, 0.22677409718115238, 0.2116939994058954, 0.21177403913516324, 0.2017369770299826, 0.21878982010745973, 0.25187532604145924, 0.2547883462268625, 0.208305723347314, 0.16760324667949467, 0.1875450478040529, 0.37077029037974585, 0.7918964448933967, 0.5078329783348245, 0.177430972847343, 0.37683012802068305, 0.2078773549420645, 0.16151408001518797, 0.40807197847179555, 0.16881079972312785, 0.2656143506388019, 0.20813515546355754, 0.19993159981029762, 0.3334185805693025, 0.1315232262837258, 0.17741907658069545, 0.10545671885588559, 0.17273821450719062, 0.19357944511499936, 0.18186041182433654, 0.17653046263196814, 0.19065298834225852, 0.18717740900865343, 0.18289952214719118, 0.18668375654139913, 0.1967598884362861, 0.09634801276911531, 0.0735565223137401, 0.0952188542545811, 0.08198354234027705, 0.09109091311088724, 0.09816571913271332, 0.07808870104911836, 0.06901809161885541, 0.08745005994851107]}, "mutation_prompt": null}
{"id": "9dea7324-dbf1-47ef-ba48-4927efa9f987", "solution": "import numpy as np\n\nclass DynamicHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory_size = 20\n        self.harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n        self.harmony_memory_values = np.full(self.harmony_memory_size, np.inf)\n        self.harmony_memory_rate = 0.9\n        self.pitch_adjustment_rate = 0.3\n        self.bandwidth = 0.1\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            if evaluations < self.harmony_memory_size:\n                self.harmony_memory_values[evaluations] = func(self.harmony_memory[evaluations])\n                evaluations += 1\n                continue\n\n            new_harmony = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.harmony_memory_rate:\n                    random_index = np.random.randint(self.harmony_memory_size)\n                    new_harmony[i] = self.harmony_memory[random_index, i]\n                    if np.random.rand() < self.pitch_adjustment_rate:\n                        new_harmony[i] += self.bandwidth * (2 * np.random.rand() - 1)\n                else:\n                    new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            new_value = func(new_harmony)\n            evaluations += 1\n\n            if new_value < np.max(self.harmony_memory_values):\n                worst_index = np.argmax(self.harmony_memory_values)\n                self.harmony_memory[worst_index] = new_harmony\n                self.harmony_memory_values[worst_index] = new_value\n\n            self.adaptive_adjustments(evaluations)\n\n        best_index = np.argmin(self.harmony_memory_values)\n        return self.harmony_memory[best_index]\n\n    def adaptive_adjustments(self, evaluations):\n        progress = evaluations / self.budget\n        self.harmony_memory_rate = 0.9 - 0.5 * progress\n        self.pitch_adjustment_rate = 0.3 + 0.4 * progress\n        self.bandwidth = 0.1 * (1 - progress)", "name": "DynamicHarmonySearch", "description": "A dynamic harmony search algorithm that adaptively adjusts harmony memory and pitch adjustment rates for efficient global and local search within constrained budget.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1c1a49fb-dde3-433a-86ba-516a3e189a58", "metadata": {"aucs": [0.5704332080419459, 0.6244890744555132, 0.6207988918828597, 0.6131493499272003, 0.6345464525627511, 0.6049250953265748, 0.5710385017321848, 0.6138927801113604, 0.6034580754340051, 0.23050094470463944, 0.22823528690618666, 0.22665851914693036, 0.209535694916669, 0.17874514373450257, 0.2801906202081741, 0.26850454497899123, 0.24476280507512937, 0.21097041090152424, 0.31949728813202705, 0.2550944112155906, 0.19495495266509977, 0.23552293995083773, 0.1956162500527695, 0.2576841710763259, 0.2057783451160965, 0.2482059788916099, 0.2046642163223159, 0.15459122529311076, 0.1835930847506667, 0.19246545956950012, 0.16644319031733923, 0.18021903999793298, 0.18872821809532392, 0.14689226575944014, 0.1766995714920555, 0.25262933178467206, 0.8858798757124817, 0.915959929041673, 0.8498330921491097, 0.8799016205219816, 0.8912962838268849, 0.874907707760497, 0.8949817861079158, 0.9271578856722879, 0.930579204817092, 0.3563305032774928, 0.18691416080566525, 0.3401514541851397, 0.3146886267623338, 0.31684578569201594, 0.3227999630306666, 0.19741139219796233, 0.27757223939775644, 0.34072412897776516, 0.1571586321168057, 0.15763974125183433, 0.14182020649975147, 0.2151695505408907, 0.3232489157379459, 0.2104687333525107, 0.19640764340540173, 0.24209693047129288, 0.1635636769001363, 0.24572862041341437, 0.15998875941963397, 0.1989165094023887, 0.17335430354022374, 0.2510005776771199, 0.22860929651905182, 0.1585113260466553, 0.26977476658567123, 0.22095543673640972, 0.1472773234512793, 0.12858473164696949, 0.1348244182558468, 0.1428388742339476, 0.13872522747674576, 0.1670729790977049, 0.15153679227444627, 0.12716185669125402, 0.17785881722950014, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07119516648141544, 0.05472781572006624, 0.06616653690980179, 0.030157548486412944, 0.015763148410971595, 0.07037535643284898, 0.07383403245894937, 0.10942407495182593, 0.05617114660867861, 0.061574510473494604, 0.03246878528064867, 0.10033053631672428, 0.0361247411066441, 0.07240012458904344, 0.047664929658742805, 0.07197752722622297, 0.09270911636102519, 0.08955603272682477, 0.07828697036176258, 0.07434964110159892, 0.09609186460157104, 0.18432699518960438, 0.05402164755163463, 0.1043783793454175, 0.21152235282005838, 0.12244586443521899, 0.12104826500044452, 0.4550402520263397, 0.42818605328160775, 0.4459959591676057, 0.45703423950127586, 0.4567700653311526, 0.521706638891632, 0.44018800959669235, 0.4703480122386171, 0.4580144508992938, 0.11299458620899883, 0.09595364155203556, 0.0834930436323017, 0.06856799867487284, 0.09629696764908113, 0.3147656061695542, 0.09790126854909031, 0.10548349043669147, 0.0868874778991896, 0.16585779596080974, 0.14109752981740697, 0.14706423760029552, 0.14923679824473368, 0.16379846718593238, 0.16125163555909638, 0.19665941708580947, 0.29385808699967997, 0.19398012026970846, 0.24485336814298841, 0.2671907272058839, 0.24334362932441167, 0.34902822554772406, 0.30161646359304295, 0.2788358621553251, 0.21038868962640633, 0.21195156151858563, 0.2539493714527772, 0.21221769980051008, 0.25189853128806716, 0.1461831541649069, 0.25962775379763603, 0.17068754561275112, 0.1947215150486724, 0.18402139059092304, 0.1851390645301837, 0.10556926290891111, 0.20175371466191339, 0.20129455269544883, 0.23568957816001335, 0.23609215203692957, 0.22100439352154855, 0.22125580681279267, 0.20613032310350732, 0.1806976945539691, 0.2111776785611167, 0.19848573784613288, 0.22677409718115238, 0.2116939994058954, 0.21177403913516324, 0.2017369770299826, 0.21878982010745973, 0.25187532604145924, 0.2547883462268625, 0.208305723347314, 0.16760324667949467, 0.1875450478040529, 0.37077029037974585, 0.7918964448933967, 0.5078329783348245, 0.177430972847343, 0.37683012802068305, 0.2078773549420645, 0.16151408001518797, 0.40807197847179555, 0.16881079972312785, 0.2656143506388019, 0.20813515546355754, 0.19993159981029762, 0.3334185805693025, 0.1315232262837258, 0.17741907658069545, 0.10545671885588559, 0.17273821450719062, 0.19357944511499936, 0.18186041182433654, 0.17653046263196814, 0.19065298834225852, 0.18717740900865343, 0.18289952214719118, 0.18668375654139913, 0.1967598884362861, 0.09634801276911531, 0.0735565223137401, 0.0952188542545811, 0.08198354234027705, 0.09109091311088724, 0.09816571913271332, 0.07808870104911836, 0.06901809161885541, 0.08745005994851107]}, "mutation_prompt": null}
{"id": "d0125e77-2aa9-463d-8bf9-26c3ad644d52", "solution": "import numpy as np\n\nclass DynamicHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory_size = 20\n        self.harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n        self.harmony_memory_values = np.full(self.harmony_memory_size, np.inf)\n        self.harmony_memory_rate = 0.9\n        self.pitch_adjustment_rate = 0.3\n        self.bandwidth = 0.1\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            if evaluations < self.harmony_memory_size:\n                self.harmony_memory_values[evaluations] = func(self.harmony_memory[evaluations])\n                evaluations += 1\n                continue\n\n            new_harmony = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.harmony_memory_rate:\n                    random_index = np.random.randint(self.harmony_memory_size)\n                    new_harmony[i] = self.harmony_memory[random_index, i]\n                    if np.random.rand() < self.pitch_adjustment_rate:\n                        new_harmony[i] += self.bandwidth * (2 * np.random.rand() - 1)\n                else:\n                    new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            new_value = func(new_harmony)\n            evaluations += 1\n\n            if new_value < np.max(self.harmony_memory_values):\n                worst_index = np.argmax(self.harmony_memory_values)\n                self.harmony_memory[worst_index] = new_harmony\n                self.harmony_memory_values[worst_index] = new_value\n\n            self.adaptive_adjustments(evaluations)\n\n        best_index = np.argmin(self.harmony_memory_values)\n        return self.harmony_memory[best_index]\n\n    def adaptive_adjustments(self, evaluations):\n        progress = evaluations / self.budget\n        self.harmony_memory_rate = 0.9 - 0.5 * progress\n        self.pitch_adjustment_rate = 0.3 + 0.4 * progress\n        self.bandwidth = 0.1 * (1 - progress)", "name": "DynamicHarmonySearch", "description": "A dynamic harmony search algorithm that adaptively adjusts harmony memory and pitch adjustment rates for efficient global and local search within constrained budget.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1c1a49fb-dde3-433a-86ba-516a3e189a58", "metadata": {"aucs": [0.5704332080419459, 0.6244890744555132, 0.6207988918828597, 0.6131493499272003, 0.6345464525627511, 0.6049250953265748, 0.5710385017321848, 0.6138927801113604, 0.6034580754340051, 0.23050094470463944, 0.22823528690618666, 0.22665851914693036, 0.209535694916669, 0.17874514373450257, 0.2801906202081741, 0.26850454497899123, 0.24476280507512937, 0.21097041090152424, 0.31949728813202705, 0.2550944112155906, 0.19495495266509977, 0.23552293995083773, 0.1956162500527695, 0.2576841710763259, 0.2057783451160965, 0.2482059788916099, 0.2046642163223159, 0.15459122529311076, 0.1835930847506667, 0.19246545956950012, 0.16644319031733923, 0.18021903999793298, 0.18872821809532392, 0.14689226575944014, 0.1766995714920555, 0.25262933178467206, 0.8858798757124817, 0.915959929041673, 0.8498330921491097, 0.8799016205219816, 0.8912962838268849, 0.874907707760497, 0.8949817861079158, 0.9271578856722879, 0.930579204817092, 0.3563305032774928, 0.18691416080566525, 0.3401514541851397, 0.3146886267623338, 0.31684578569201594, 0.3227999630306666, 0.19741139219796233, 0.27757223939775644, 0.34072412897776516, 0.1571586321168057, 0.15763974125183433, 0.14182020649975147, 0.2151695505408907, 0.3232489157379459, 0.2104687333525107, 0.19640764340540173, 0.24209693047129288, 0.1635636769001363, 0.24572862041341437, 0.15998875941963397, 0.1989165094023887, 0.17335430354022374, 0.2510005776771199, 0.22860929651905182, 0.1585113260466553, 0.26977476658567123, 0.22095543673640972, 0.1472773234512793, 0.12858473164696949, 0.1348244182558468, 0.1428388742339476, 0.13872522747674576, 0.1670729790977049, 0.15153679227444627, 0.12716185669125402, 0.17785881722950014, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07119516648141544, 0.05472781572006624, 0.06616653690980179, 0.030157548486412944, 0.015763148410971595, 0.07037535643284898, 0.07383403245894937, 0.10942407495182593, 0.05617114660867861, 0.061574510473494604, 0.03246878528064867, 0.10033053631672428, 0.0361247411066441, 0.07240012458904344, 0.047664929658742805, 0.07197752722622297, 0.09270911636102519, 0.08955603272682477, 0.07828697036176258, 0.07434964110159892, 0.09609186460157104, 0.18432699518960438, 0.05402164755163463, 0.1043783793454175, 0.21152235282005838, 0.12244586443521899, 0.12104826500044452, 0.4550402520263397, 0.42818605328160775, 0.4459959591676057, 0.45703423950127586, 0.4567700653311526, 0.521706638891632, 0.44018800959669235, 0.4703480122386171, 0.4580144508992938, 0.11299458620899883, 0.09595364155203556, 0.0834930436323017, 0.06856799867487284, 0.09629696764908113, 0.3147656061695542, 0.09790126854909031, 0.10548349043669147, 0.0868874778991896, 0.16585779596080974, 0.14109752981740697, 0.14706423760029552, 0.14923679824473368, 0.16379846718593238, 0.16125163555909638, 0.19665941708580947, 0.29385808699967997, 0.19398012026970846, 0.24485336814298841, 0.2671907272058839, 0.24334362932441167, 0.34902822554772406, 0.30161646359304295, 0.2788358621553251, 0.21038868962640633, 0.21195156151858563, 0.2539493714527772, 0.21221769980051008, 0.25189853128806716, 0.1461831541649069, 0.25962775379763603, 0.17068754561275112, 0.1947215150486724, 0.18402139059092304, 0.1851390645301837, 0.10556926290891111, 0.20175371466191339, 0.20129455269544883, 0.23568957816001335, 0.23609215203692957, 0.22100439352154855, 0.22125580681279267, 0.20613032310350732, 0.1806976945539691, 0.2111776785611167, 0.19848573784613288, 0.22677409718115238, 0.2116939994058954, 0.21177403913516324, 0.2017369770299826, 0.21878982010745973, 0.25187532604145924, 0.2547883462268625, 0.208305723347314, 0.16760324667949467, 0.1875450478040529, 0.37077029037974585, 0.7918964448933967, 0.5078329783348245, 0.177430972847343, 0.37683012802068305, 0.2078773549420645, 0.16151408001518797, 0.40807197847179555, 0.16881079972312785, 0.2656143506388019, 0.20813515546355754, 0.19993159981029762, 0.3334185805693025, 0.1315232262837258, 0.17741907658069545, 0.10545671885588559, 0.17273821450719062, 0.19357944511499936, 0.18186041182433654, 0.17653046263196814, 0.19065298834225852, 0.18717740900865343, 0.18289952214719118, 0.18668375654139913, 0.1967598884362861, 0.09634801276911531, 0.0735565223137401, 0.0952188542545811, 0.08198354234027705, 0.09109091311088724, 0.09816571913271332, 0.07808870104911836, 0.06901809161885541, 0.08745005994851107]}, "mutation_prompt": null}
{"id": "8c09fdf6-d845-4eaf-8dda-53c30658df79", "solution": "import numpy as np\n\nclass DynamicHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory_size = 20\n        self.harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n        self.harmony_memory_values = np.full(self.harmony_memory_size, np.inf)\n        self.harmony_memory_rate = 0.9\n        self.pitch_adjustment_rate = 0.3\n        self.bandwidth = 0.1\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            if evaluations < self.harmony_memory_size:\n                self.harmony_memory_values[evaluations] = func(self.harmony_memory[evaluations])\n                evaluations += 1\n                continue\n\n            new_harmony = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.harmony_memory_rate:\n                    random_index = np.random.randint(self.harmony_memory_size)\n                    new_harmony[i] = self.harmony_memory[random_index, i]\n                    if np.random.rand() < self.pitch_adjustment_rate:\n                        new_harmony[i] += self.bandwidth * (2 * np.random.rand() - 1)\n                else:\n                    new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            new_value = func(new_harmony)\n            evaluations += 1\n\n            if new_value < np.max(self.harmony_memory_values):\n                worst_index = np.argmax(self.harmony_memory_values)\n                self.harmony_memory[worst_index] = new_harmony\n                self.harmony_memory_values[worst_index] = new_value\n\n            self.adaptive_adjustments(evaluations)\n\n        best_index = np.argmin(self.harmony_memory_values)\n        return self.harmony_memory[best_index]\n\n    def adaptive_adjustments(self, evaluations):\n        progress = evaluations / self.budget\n        self.harmony_memory_rate = 0.9 - 0.5 * progress\n        self.pitch_adjustment_rate = 0.3 + 0.4 * progress\n        self.bandwidth = 0.1 * (1 - progress)", "name": "DynamicHarmonySearch", "description": "A dynamic harmony search algorithm that adaptively adjusts harmony memory and pitch adjustment rates for efficient global and local search within constrained budget.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1c1a49fb-dde3-433a-86ba-516a3e189a58", "metadata": {"aucs": [0.5704332080419459, 0.6244890744555132, 0.6207988918828597, 0.6131493499272003, 0.6345464525627511, 0.6049250953265748, 0.5710385017321848, 0.6138927801113604, 0.6034580754340051, 0.23050094470463944, 0.22823528690618666, 0.22665851914693036, 0.209535694916669, 0.17874514373450257, 0.2801906202081741, 0.26850454497899123, 0.24476280507512937, 0.21097041090152424, 0.31949728813202705, 0.2550944112155906, 0.19495495266509977, 0.23552293995083773, 0.1956162500527695, 0.2576841710763259, 0.2057783451160965, 0.2482059788916099, 0.2046642163223159, 0.15459122529311076, 0.1835930847506667, 0.19246545956950012, 0.16644319031733923, 0.18021903999793298, 0.18872821809532392, 0.14689226575944014, 0.1766995714920555, 0.25262933178467206, 0.8858798757124817, 0.915959929041673, 0.8498330921491097, 0.8799016205219816, 0.8912962838268849, 0.874907707760497, 0.8949817861079158, 0.9271578856722879, 0.930579204817092, 0.3563305032774928, 0.18691416080566525, 0.3401514541851397, 0.3146886267623338, 0.31684578569201594, 0.3227999630306666, 0.19741139219796233, 0.27757223939775644, 0.34072412897776516, 0.1571586321168057, 0.15763974125183433, 0.14182020649975147, 0.2151695505408907, 0.3232489157379459, 0.2104687333525107, 0.19640764340540173, 0.24209693047129288, 0.1635636769001363, 0.24572862041341437, 0.15998875941963397, 0.1989165094023887, 0.17335430354022374, 0.2510005776771199, 0.22860929651905182, 0.1585113260466553, 0.26977476658567123, 0.22095543673640972, 0.1472773234512793, 0.12858473164696949, 0.1348244182558468, 0.1428388742339476, 0.13872522747674576, 0.1670729790977049, 0.15153679227444627, 0.12716185669125402, 0.17785881722950014, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07119516648141544, 0.05472781572006624, 0.06616653690980179, 0.030157548486412944, 0.015763148410971595, 0.07037535643284898, 0.07383403245894937, 0.10942407495182593, 0.05617114660867861, 0.061574510473494604, 0.03246878528064867, 0.10033053631672428, 0.0361247411066441, 0.07240012458904344, 0.047664929658742805, 0.07197752722622297, 0.09270911636102519, 0.08955603272682477, 0.07828697036176258, 0.07434964110159892, 0.09609186460157104, 0.18432699518960438, 0.05402164755163463, 0.1043783793454175, 0.21152235282005838, 0.12244586443521899, 0.12104826500044452, 0.4550402520263397, 0.42818605328160775, 0.4459959591676057, 0.45703423950127586, 0.4567700653311526, 0.521706638891632, 0.44018800959669235, 0.4703480122386171, 0.4580144508992938, 0.11299458620899883, 0.09595364155203556, 0.0834930436323017, 0.06856799867487284, 0.09629696764908113, 0.3147656061695542, 0.09790126854909031, 0.10548349043669147, 0.0868874778991896, 0.16585779596080974, 0.14109752981740697, 0.14706423760029552, 0.14923679824473368, 0.16379846718593238, 0.16125163555909638, 0.19665941708580947, 0.29385808699967997, 0.19398012026970846, 0.24485336814298841, 0.2671907272058839, 0.24334362932441167, 0.34902822554772406, 0.30161646359304295, 0.2788358621553251, 0.21038868962640633, 0.21195156151858563, 0.2539493714527772, 0.21221769980051008, 0.25189853128806716, 0.1461831541649069, 0.25962775379763603, 0.17068754561275112, 0.1947215150486724, 0.18402139059092304, 0.1851390645301837, 0.10556926290891111, 0.20175371466191339, 0.20129455269544883, 0.23568957816001335, 0.23609215203692957, 0.22100439352154855, 0.22125580681279267, 0.20613032310350732, 0.1806976945539691, 0.2111776785611167, 0.19848573784613288, 0.22677409718115238, 0.2116939994058954, 0.21177403913516324, 0.2017369770299826, 0.21878982010745973, 0.25187532604145924, 0.2547883462268625, 0.208305723347314, 0.16760324667949467, 0.1875450478040529, 0.37077029037974585, 0.7918964448933967, 0.5078329783348245, 0.177430972847343, 0.37683012802068305, 0.2078773549420645, 0.16151408001518797, 0.40807197847179555, 0.16881079972312785, 0.2656143506388019, 0.20813515546355754, 0.19993159981029762, 0.3334185805693025, 0.1315232262837258, 0.17741907658069545, 0.10545671885588559, 0.17273821450719062, 0.19357944511499936, 0.18186041182433654, 0.17653046263196814, 0.19065298834225852, 0.18717740900865343, 0.18289952214719118, 0.18668375654139913, 0.1967598884362861, 0.09634801276911531, 0.0735565223137401, 0.0952188542545811, 0.08198354234027705, 0.09109091311088724, 0.09816571913271332, 0.07808870104911836, 0.06901809161885541, 0.08745005994851107]}, "mutation_prompt": null}
{"id": "9809693c-85cf-42d8-8c88-e56091c9f4ff", "solution": "import numpy as np\n\nclass DynamicHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory_size = 20\n        self.harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n        self.harmony_memory_values = np.full(self.harmony_memory_size, np.inf)\n        self.harmony_memory_rate = 0.9\n        self.pitch_adjustment_rate = 0.3\n        self.bandwidth = 0.1\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            if evaluations < self.harmony_memory_size:\n                self.harmony_memory_values[evaluations] = func(self.harmony_memory[evaluations])\n                evaluations += 1\n                continue\n\n            new_harmony = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.harmony_memory_rate:\n                    random_index = np.random.randint(self.harmony_memory_size)\n                    new_harmony[i] = self.harmony_memory[random_index, i]\n                    if np.random.rand() < self.pitch_adjustment_rate:\n                        new_harmony[i] += self.bandwidth * (2 * np.random.rand() - 1)\n                else:\n                    new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            new_value = func(new_harmony)\n            evaluations += 1\n\n            if new_value < np.max(self.harmony_memory_values):\n                worst_index = np.argmax(self.harmony_memory_values)\n                self.harmony_memory[worst_index] = new_harmony\n                self.harmony_memory_values[worst_index] = new_value\n\n            self.adaptive_adjustments(evaluations)\n\n        best_index = np.argmin(self.harmony_memory_values)\n        return self.harmony_memory[best_index]\n\n    def adaptive_adjustments(self, evaluations):\n        progress = evaluations / self.budget\n        self.harmony_memory_rate = 0.9 - 0.5 * progress\n        self.pitch_adjustment_rate = 0.3 + 0.4 * progress\n        self.bandwidth = 0.1 * (1 - progress)", "name": "DynamicHarmonySearch", "description": "A dynamic harmony search algorithm that adaptively adjusts harmony memory and pitch adjustment rates for efficient global and local search within constrained budget.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1c1a49fb-dde3-433a-86ba-516a3e189a58", "metadata": {"aucs": [0.5704332080419459, 0.6244890744555132, 0.6207988918828597, 0.6131493499272003, 0.6345464525627511, 0.6049250953265748, 0.5710385017321848, 0.6138927801113604, 0.6034580754340051, 0.23050094470463944, 0.22823528690618666, 0.22665851914693036, 0.209535694916669, 0.17874514373450257, 0.2801906202081741, 0.26850454497899123, 0.24476280507512937, 0.21097041090152424, 0.31949728813202705, 0.2550944112155906, 0.19495495266509977, 0.23552293995083773, 0.1956162500527695, 0.2576841710763259, 0.2057783451160965, 0.2482059788916099, 0.2046642163223159, 0.15459122529311076, 0.1835930847506667, 0.19246545956950012, 0.16644319031733923, 0.18021903999793298, 0.18872821809532392, 0.14689226575944014, 0.1766995714920555, 0.25262933178467206, 0.8858798757124817, 0.915959929041673, 0.8498330921491097, 0.8799016205219816, 0.8912962838268849, 0.874907707760497, 0.8949817861079158, 0.9271578856722879, 0.930579204817092, 0.3563305032774928, 0.18691416080566525, 0.3401514541851397, 0.3146886267623338, 0.31684578569201594, 0.3227999630306666, 0.19741139219796233, 0.27757223939775644, 0.34072412897776516, 0.1571586321168057, 0.15763974125183433, 0.14182020649975147, 0.2151695505408907, 0.3232489157379459, 0.2104687333525107, 0.19640764340540173, 0.24209693047129288, 0.1635636769001363, 0.24572862041341437, 0.15998875941963397, 0.1989165094023887, 0.17335430354022374, 0.2510005776771199, 0.22860929651905182, 0.1585113260466553, 0.26977476658567123, 0.22095543673640972, 0.1472773234512793, 0.12858473164696949, 0.1348244182558468, 0.1428388742339476, 0.13872522747674576, 0.1670729790977049, 0.15153679227444627, 0.12716185669125402, 0.17785881722950014, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07119516648141544, 0.05472781572006624, 0.06616653690980179, 0.030157548486412944, 0.015763148410971595, 0.07037535643284898, 0.07383403245894937, 0.10942407495182593, 0.05617114660867861, 0.061574510473494604, 0.03246878528064867, 0.10033053631672428, 0.0361247411066441, 0.07240012458904344, 0.047664929658742805, 0.07197752722622297, 0.09270911636102519, 0.08955603272682477, 0.07828697036176258, 0.07434964110159892, 0.09609186460157104, 0.18432699518960438, 0.05402164755163463, 0.1043783793454175, 0.21152235282005838, 0.12244586443521899, 0.12104826500044452, 0.4550402520263397, 0.42818605328160775, 0.4459959591676057, 0.45703423950127586, 0.4567700653311526, 0.521706638891632, 0.44018800959669235, 0.4703480122386171, 0.4580144508992938, 0.11299458620899883, 0.09595364155203556, 0.0834930436323017, 0.06856799867487284, 0.09629696764908113, 0.3147656061695542, 0.09790126854909031, 0.10548349043669147, 0.0868874778991896, 0.16585779596080974, 0.14109752981740697, 0.14706423760029552, 0.14923679824473368, 0.16379846718593238, 0.16125163555909638, 0.19665941708580947, 0.29385808699967997, 0.19398012026970846, 0.24485336814298841, 0.2671907272058839, 0.24334362932441167, 0.34902822554772406, 0.30161646359304295, 0.2788358621553251, 0.21038868962640633, 0.21195156151858563, 0.2539493714527772, 0.21221769980051008, 0.25189853128806716, 0.1461831541649069, 0.25962775379763603, 0.17068754561275112, 0.1947215150486724, 0.18402139059092304, 0.1851390645301837, 0.10556926290891111, 0.20175371466191339, 0.20129455269544883, 0.23568957816001335, 0.23609215203692957, 0.22100439352154855, 0.22125580681279267, 0.20613032310350732, 0.1806976945539691, 0.2111776785611167, 0.19848573784613288, 0.22677409718115238, 0.2116939994058954, 0.21177403913516324, 0.2017369770299826, 0.21878982010745973, 0.25187532604145924, 0.2547883462268625, 0.208305723347314, 0.16760324667949467, 0.1875450478040529, 0.37077029037974585, 0.7918964448933967, 0.5078329783348245, 0.177430972847343, 0.37683012802068305, 0.2078773549420645, 0.16151408001518797, 0.40807197847179555, 0.16881079972312785, 0.2656143506388019, 0.20813515546355754, 0.19993159981029762, 0.3334185805693025, 0.1315232262837258, 0.17741907658069545, 0.10545671885588559, 0.17273821450719062, 0.19357944511499936, 0.18186041182433654, 0.17653046263196814, 0.19065298834225852, 0.18717740900865343, 0.18289952214719118, 0.18668375654139913, 0.1967598884362861, 0.09634801276911531, 0.0735565223137401, 0.0952188542545811, 0.08198354234027705, 0.09109091311088724, 0.09816571913271332, 0.07808870104911836, 0.06901809161885541, 0.08745005994851107]}, "mutation_prompt": null}
{"id": "80979cc8-a535-4bed-adaa-1fa112735a2e", "solution": "import numpy as np\n\nclass DynamicHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory_size = 20\n        self.harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n        self.harmony_memory_values = np.full(self.harmony_memory_size, np.inf)\n        self.harmony_memory_rate = 0.9\n        self.pitch_adjustment_rate = 0.3\n        self.bandwidth = 0.1\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            if evaluations < self.harmony_memory_size:\n                self.harmony_memory_values[evaluations] = func(self.harmony_memory[evaluations])\n                evaluations += 1\n                continue\n\n            new_harmony = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.harmony_memory_rate:\n                    random_index = np.random.randint(self.harmony_memory_size)\n                    new_harmony[i] = self.harmony_memory[random_index, i]\n                    if np.random.rand() < self.pitch_adjustment_rate:\n                        new_harmony[i] += self.bandwidth * (2 * np.random.rand() - 1)\n                else:\n                    new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            new_value = func(new_harmony)\n            evaluations += 1\n\n            if new_value < np.max(self.harmony_memory_values):\n                worst_index = np.argmax(self.harmony_memory_values)\n                self.harmony_memory[worst_index] = new_harmony\n                self.harmony_memory_values[worst_index] = new_value\n\n            self.adaptive_adjustments(evaluations)\n\n        best_index = np.argmin(self.harmony_memory_values)\n        return self.harmony_memory[best_index]\n\n    def adaptive_adjustments(self, evaluations):\n        progress = evaluations / self.budget\n        self.harmony_memory_rate = 0.9 - 0.5 * progress\n        self.pitch_adjustment_rate = 0.3 + 0.4 * progress\n        self.bandwidth = 0.1 * (1 - progress)", "name": "DynamicHarmonySearch", "description": "A dynamic harmony search algorithm that adaptively adjusts harmony memory and pitch adjustment rates for efficient global and local search within constrained budget.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1c1a49fb-dde3-433a-86ba-516a3e189a58", "metadata": {"aucs": [0.5704332080419459, 0.6244890744555132, 0.6207988918828597, 0.6131493499272003, 0.6345464525627511, 0.6049250953265748, 0.5710385017321848, 0.6138927801113604, 0.6034580754340051, 0.23050094470463944, 0.22823528690618666, 0.22665851914693036, 0.209535694916669, 0.17874514373450257, 0.2801906202081741, 0.26850454497899123, 0.24476280507512937, 0.21097041090152424, 0.31949728813202705, 0.2550944112155906, 0.19495495266509977, 0.23552293995083773, 0.1956162500527695, 0.2576841710763259, 0.2057783451160965, 0.2482059788916099, 0.2046642163223159, 0.15459122529311076, 0.1835930847506667, 0.19246545956950012, 0.16644319031733923, 0.18021903999793298, 0.18872821809532392, 0.14689226575944014, 0.1766995714920555, 0.25262933178467206, 0.8858798757124817, 0.915959929041673, 0.8498330921491097, 0.8799016205219816, 0.8912962838268849, 0.874907707760497, 0.8949817861079158, 0.9271578856722879, 0.930579204817092, 0.3563305032774928, 0.18691416080566525, 0.3401514541851397, 0.3146886267623338, 0.31684578569201594, 0.3227999630306666, 0.19741139219796233, 0.27757223939775644, 0.34072412897776516, 0.1571586321168057, 0.15763974125183433, 0.14182020649975147, 0.2151695505408907, 0.3232489157379459, 0.2104687333525107, 0.19640764340540173, 0.24209693047129288, 0.1635636769001363, 0.24572862041341437, 0.15998875941963397, 0.1989165094023887, 0.17335430354022374, 0.2510005776771199, 0.22860929651905182, 0.1585113260466553, 0.26977476658567123, 0.22095543673640972, 0.1472773234512793, 0.12858473164696949, 0.1348244182558468, 0.1428388742339476, 0.13872522747674576, 0.1670729790977049, 0.15153679227444627, 0.12716185669125402, 0.17785881722950014, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07119516648141544, 0.05472781572006624, 0.06616653690980179, 0.030157548486412944, 0.015763148410971595, 0.07037535643284898, 0.07383403245894937, 0.10942407495182593, 0.05617114660867861, 0.061574510473494604, 0.03246878528064867, 0.10033053631672428, 0.0361247411066441, 0.07240012458904344, 0.047664929658742805, 0.07197752722622297, 0.09270911636102519, 0.08955603272682477, 0.07828697036176258, 0.07434964110159892, 0.09609186460157104, 0.18432699518960438, 0.05402164755163463, 0.1043783793454175, 0.21152235282005838, 0.12244586443521899, 0.12104826500044452, 0.4550402520263397, 0.42818605328160775, 0.4459959591676057, 0.45703423950127586, 0.4567700653311526, 0.521706638891632, 0.44018800959669235, 0.4703480122386171, 0.4580144508992938, 0.11299458620899883, 0.09595364155203556, 0.0834930436323017, 0.06856799867487284, 0.09629696764908113, 0.3147656061695542, 0.09790126854909031, 0.10548349043669147, 0.0868874778991896, 0.16585779596080974, 0.14109752981740697, 0.14706423760029552, 0.14923679824473368, 0.16379846718593238, 0.16125163555909638, 0.19665941708580947, 0.29385808699967997, 0.19398012026970846, 0.24485336814298841, 0.2671907272058839, 0.24334362932441167, 0.34902822554772406, 0.30161646359304295, 0.2788358621553251, 0.21038868962640633, 0.21195156151858563, 0.2539493714527772, 0.21221769980051008, 0.25189853128806716, 0.1461831541649069, 0.25962775379763603, 0.17068754561275112, 0.1947215150486724, 0.18402139059092304, 0.1851390645301837, 0.10556926290891111, 0.20175371466191339, 0.20129455269544883, 0.23568957816001335, 0.23609215203692957, 0.22100439352154855, 0.22125580681279267, 0.20613032310350732, 0.1806976945539691, 0.2111776785611167, 0.19848573784613288, 0.22677409718115238, 0.2116939994058954, 0.21177403913516324, 0.2017369770299826, 0.21878982010745973, 0.25187532604145924, 0.2547883462268625, 0.208305723347314, 0.16760324667949467, 0.1875450478040529, 0.37077029037974585, 0.7918964448933967, 0.5078329783348245, 0.177430972847343, 0.37683012802068305, 0.2078773549420645, 0.16151408001518797, 0.40807197847179555, 0.16881079972312785, 0.2656143506388019, 0.20813515546355754, 0.19993159981029762, 0.3334185805693025, 0.1315232262837258, 0.17741907658069545, 0.10545671885588559, 0.17273821450719062, 0.19357944511499936, 0.18186041182433654, 0.17653046263196814, 0.19065298834225852, 0.18717740900865343, 0.18289952214719118, 0.18668375654139913, 0.1967598884362861, 0.09634801276911531, 0.0735565223137401, 0.0952188542545811, 0.08198354234027705, 0.09109091311088724, 0.09816571913271332, 0.07808870104911836, 0.06901809161885541, 0.08745005994851107]}, "mutation_prompt": null}
{"id": "c6880ec3-6249-44af-b7e3-defc5f989e10", "solution": "import numpy as np\n\nclass OptimizedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory_size = 20\n        self.harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n        self.harmony_memory_values = np.full(self.harmony_memory_size, np.inf)\n        self.harmony_memory_rate = 0.9\n        self.pitch_adjustment_rate = 0.3\n        self.bandwidth = 0.1\n\n    def __call__(self, func):\n        evaluations = 0\n        initial_eval_count = min(self.harmony_memory_size, self.budget)\n        for i in range(initial_eval_count):\n            self.harmony_memory_values[i] = func(self.harmony_memory[i])\n        evaluations += initial_eval_count\n\n        while evaluations < self.budget:\n            new_harmony = np.zeros(self.dim)\n            indices = np.random.choice(self.harmony_memory_size, self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.harmony_memory_rate:\n                    new_harmony[i] = self.harmony_memory[indices[i], i]\n                    if np.random.rand() < self.pitch_adjustment_rate:\n                        new_harmony[i] += self.bandwidth * (2 * np.random.rand() - 1)\n                else:\n                    new_harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            new_value = func(new_harmony)\n            evaluations += 1\n\n            max_index = np.argmax(self.harmony_memory_values)\n            if new_value < self.harmony_memory_values[max_index]:\n                self.harmony_memory[max_index] = new_harmony\n                self.harmony_memory_values[max_index] = new_value\n\n            self.adaptive_adjustments(evaluations)\n\n        return self.harmony_memory[np.argmin(self.harmony_memory_values)]\n\n    def adaptive_adjustments(self, evaluations):\n        progress = evaluations / self.budget\n        self.harmony_memory_rate = 0.95 - 0.5 * progress\n        self.pitch_adjustment_rate = 0.25 + 0.5 * progress\n        self.bandwidth = 0.1 * (1 - progress)", "name": "OptimizedHarmonySearch", "description": "Optimized Harmony Search variant leveraging dynamic parameter tuning with efficient memory updates for accelerated convergence.", "configspace": "", "generation": 10, "fitness": 0.23995237895258048, "feedback": "The algorithm OptimizedHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.20.", "error": "", "parent_id": "1c1a49fb-dde3-433a-86ba-516a3e189a58", "metadata": {"aucs": [0.6414052706765505, 0.6085684990354174, 0.6617189861272341, 0.6423301281619074, 0.6189063751755907, 0.6543970323711947, 0.6805529516133384, 0.6982948691769448, 0.6192933943526957, 0.24861337804470063, 0.22372737313775193, 0.28188180921948824, 0.251165314964242, 0.2898479089000723, 0.28703256297004176, 0.2176222754938809, 0.3376748298818053, 0.29462921662799957, 0.19181516438944268, 0.1948393252742313, 0.27202975592909084, 0.2786282664295472, 0.17713741065513444, 0.1838914053804478, 0.2979666180878744, 0.29762562867374465, 0.150357003171961, 0.15181224595515452, 0.15435539164373024, 0.168908304199623, 0.2914291462062173, 0.16198666253518168, 0.21563145964667452, 0.17796541517033038, 0.28069647820308985, 0.143478952162014, 0.8548825866049815, 0.9235026301510176, 0.9466296296648037, 0.8739654671866972, 0.8953599837918599, 0.8486875247808798, 0.894197093458004, 0.8962112233750551, 0.8844566588594235, 0.333269919811793, 0.25527081557200115, 0.20858192527846653, 0.3721014987453961, 0.3104284694875111, 0.34556496433696315, 0.18964570484071896, 0.18685899654703886, 0.3508365408130354, 0.1891939702365142, 0.13274754950521706, 0.13689832999506146, 0.19338462725066297, 0.1724064868516041, 0.21242416071032644, 0.17926107988282602, 0.1843716571878946, 0.2272606835677189, 0.20739017042903218, 0.15909875844395627, 0.15415089179382413, 0.20260486261890276, 0.1966859555413829, 0.2150171265446853, 0.2690463711188672, 0.24537700687351838, 0.1730932460591441, 0.12865220452078607, 0.13575643710182717, 0.1283657795419071, 0.1509962504765161, 0.13290890121191767, 0.14565989156408, 0.1423918909228068, 0.1340436743632788, 0.13812781829810306, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018514229699628793, 9.999999999998899e-05, 9.999999999998899e-05, 0.062295442068392215, 0.052999614128056205, 0.08399721064145194, 0.10080756345243047, 0.087735735541985, 0.024860787540286755, 0.10550591807687926, 0.07991116364942585, 0.03937666314506438, 0.08424666757568833, 0.14427297020983043, 0.12179950076765911, 0.0845798842029577, 0.11483574611757108, 0.10365659226771573, 0.08924741907111111, 0.09486703970623445, 0.06408582404670615, 0.14608286986962882, 0.026639278849040937, 0.17791232237518073, 0.10481047555680034, 0.1556293885759813, 0.09650039086659068, 0.14715811102568, 0.2074914249204387, 0.08296448795351608, 0.47850121035494353, 0.4755353152383104, 0.47988834142675396, 0.4666055200727772, 0.4935048088268863, 0.47616629624421525, 0.4728129782641781, 0.45453633695044715, 0.4448814964736809, 0.11147489342147132, 0.11058927164122867, 0.10748963369381614, 0.11925321353387786, 0.11863368204409086, 0.0978603503609865, 0.11785218881505188, 0.08303043603066285, 0.11862655337627015, 0.20768112149552198, 0.25746540139435536, 0.1753848905374349, 0.17272671396296269, 0.21149259574681445, 0.18837117063341646, 0.20077302529682506, 0.16067396672756562, 0.16059600296871412, 0.24783671512043326, 0.21821653597996327, 0.18097107592511152, 0.3491013839302114, 0.1997281848917163, 0.32501191014269537, 0.2326460947686818, 0.24580480851815167, 0.18604747362168927, 0.12302816892208379, 0.2873880398046065, 0.20709995462762854, 0.18041139285546293, 0.1866150492265779, 0.14922030887170346, 0.16126804477617895, 0.18194114608211254, 0.1427644639157798, 0.2073903438181529, 0.18923490256312658, 0.21873736592467408, 0.2146804403586826, 0.206961407893549, 0.20280995157095727, 0.2038377345277066, 0.2055923526676091, 0.2284790784308981, 0.2189333189836915, 0.22750564310641652, 0.20785795536431706, 0.25189803478338857, 0.19146749999771828, 0.19517675025465575, 0.3344016239079328, 0.20323101581997938, 0.19158594548189545, 0.1545208363496482, 0.17437124321971464, 0.7555084973186105, 0.20022726801861368, 0.18602580439892735, 0.7930312749323526, 0.2074527861817369, 0.15292131000053755, 0.16602625276190353, 0.42532337177748614, 0.1726845410589829, 0.2506057793543237, 0.12179771011609608, 0.2069043188163896, 0.2883876678027234, 0.12111693347720665, 0.21303509038010227, 0.11859339977048255, 0.18109041422234806, 0.18426910495813287, 0.17218274796225463, 0.1812530910878548, 0.17385688546484634, 0.1801349781415632, 0.20176054402708565, 0.21384751421821324, 0.19199550547977773, 0.08963418299916726, 0.07532098411512034, 0.06967807502419032, 0.09136929045978848, 0.07055895362184961, 0.12915865067262144, 0.08450959054949958, 0.08383520814638978, 0.08652837316682149]}, "mutation_prompt": null}
{"id": "db9a0abc-5e78-41ea-b88d-e0173e1c7b20", "solution": "import numpy as np\n\nclass EnhancedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory_size = 15  # Reduced size for faster convergence\n        self.harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n        self.harmony_memory_values = np.full(self.harmony_memory_size, np.inf)\n        self.harmony_memory_rate = 0.85  # Modified rate for better exploration\n        self.pitch_adjustment_rate = 0.35  # Adjusted pitch rate for balance\n        self.bandwidth = 0.15  # Increased bandwidth for wider search space\n\n    def __call__(self, func):\n        evaluations = 0\n        for i in range(min(self.harmony_memory_size, self.budget)):\n            self.harmony_memory_values[i] = func(self.harmony_memory[i])\n            evaluations += 1\n\n        while evaluations < self.budget:\n            new_harmony = np.array([self._generate_harmony(i) for i in range(self.dim)])\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            new_value = func(new_harmony)\n            evaluations += 1\n\n            max_index = np.argmax(self.harmony_memory_values)\n            if new_value < self.harmony_memory_values[max_index]:\n                self.harmony_memory[max_index] = new_harmony\n                self.harmony_memory_values[max_index] = new_value\n\n            self._adaptive_adjustments(evaluations)\n\n        return self.harmony_memory[np.argmin(self.harmony_memory_values)]\n\n    def _generate_harmony(self, index):\n        if np.random.rand() < self.harmony_memory_rate:\n            harmony_value = self.harmony_memory[np.random.randint(self.harmony_memory_size), index]\n            if np.random.rand() < self.pitch_adjustment_rate:\n                harmony_value += self.bandwidth * (np.random.rand() - 0.5) * 2\n        else:\n            harmony_value = np.random.uniform(self.lower_bound, self.upper_bound)\n        return harmony_value\n\n    def _adaptive_adjustments(self, evaluations):\n        progress = evaluations / self.budget\n        self.harmony_memory_rate = 0.8 + 0.1 * np.cos(progress * np.pi)  # Dynamic adjustment\n        self.bandwidth = 0.15 * (1 - progress)  # Gradually reduce bandwidth", "name": "EnhancedHarmonySearch", "description": "Enhanced Harmony Search with adaptive bandwidth and memory updates for improved exploration and convergence efficiency.", "configspace": "", "generation": 11, "fitness": 0.25720155885173906, "feedback": "The algorithm EnhancedHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.21.", "error": "", "parent_id": "c6880ec3-6249-44af-b7e3-defc5f989e10", "metadata": {"aucs": [0.6749461622910672, 0.7054590329831809, 0.6699082764887182, 0.634321984558862, 0.686497472587492, 0.6662471820520972, 0.6655067429419201, 0.6919750347534379, 0.691584369731106, 0.39215333675813513, 0.278655707182929, 0.31091414316050947, 0.23795607854077083, 0.2787614603633155, 0.28690375018686587, 0.3344675540014743, 0.38211280136023784, 0.3414501272456886, 0.17041165872600472, 0.2534350788291253, 0.160269521791772, 0.3318122492699006, 0.1839826189916598, 0.26854445479757905, 0.16954866473744967, 0.1917844863580812, 0.15306643695017086, 0.16994663753396966, 0.18115897861694252, 0.16900136965755597, 0.22703419446316953, 0.1976978928348182, 0.2643546117651763, 0.16140932050185475, 0.384509823821365, 0.2100774537751633, 0.9598297362242227, 0.9212835176205848, 0.9208382602840781, 0.9107245618407347, 0.9046809910386159, 0.941370847273956, 0.9308615488985799, 0.9115607693235016, 0.9591767966445308, 0.31952477492141473, 0.414589603959703, 0.3778040478431781, 0.4377266172238249, 0.3328240293162633, 0.4145534372044881, 0.3752192452628108, 0.3815004083748348, 0.40606113829362633, 0.16305492422653223, 0.16638579265978404, 0.13833931264330712, 0.21650402768959343, 0.20209834300431495, 0.19917165129003056, 0.16002606622622295, 0.24645946718746647, 0.1760283304816781, 0.1326217395475987, 0.1571369939597893, 0.21998172529333726, 0.1317200754982778, 0.2742316837375892, 0.3392042958357895, 0.16171735950310573, 0.19558566129296018, 0.16476110135361866, 0.1661476799839554, 0.19379099161422741, 0.1495233133803524, 0.1495795964428107, 0.14908303160758374, 0.15470611814039825, 0.15521532074204147, 0.16898270952884653, 0.17968943669898108, 9.999999999998899e-05, 9.999999999998899e-05, 0.02814441950171298, 0.00928204544537925, 0.0031534049514529983, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11989438244226125, 0.0207366680929556, 0.03705217880708789, 0.10204289004119638, 0.027967034150771175, 0.039285130291603854, 0.03102099717098028, 0.2391001825653749, 0.11894402119977587, 0.07207807055630455, 0.10515886374836869, 0.11712351927867948, 0.10549263689086241, 0.0912661146986844, 0.07366529489480778, 0.09776266776618436, 0.13782917513069193, 0.12512892873753023, 0.059581927038665716, 0.06492287158015153, 0.07015213999056191, 0.14802917107492397, 0.040925666588617626, 0.051582813637400804, 0.15941388899683084, 0.1032931221254979, 0.15367248353627871, 0.1975685483182792, 0.42910529891524096, 0.5204225722454006, 0.5204089744381899, 0.4897817969545768, 0.4910695322848905, 0.5040279167838337, 0.4624455023245222, 0.4475039624000374, 0.44984423839375653, 0.08932630799448249, 0.07633544827261907, 0.10660941940230573, 0.09012340948819197, 0.19003565493664654, 0.11038515669071125, 0.15828209420302297, 0.11229883337567426, 0.09428926669901627, 0.3859664501097687, 0.29330277362283286, 0.2571574094152669, 0.2737658955920099, 0.17271601783683166, 0.16150869804310442, 0.17753641003098763, 0.16279785901894306, 0.27228835864864387, 0.18336449493235119, 0.34871192404519946, 0.21720261875531077, 0.23072696083743205, 0.311834577624312, 0.2065898791722275, 0.2910509897175537, 0.24766311748943848, 0.2282008231057966, 0.22009199450237094, 0.17084774388201474, 0.1684484858997346, 0.26869882376004384, 0.18285724905828948, 0.17588390279025157, 0.1368178850574986, 0.12645363739412496, 0.12109396978627807, 0.22091852373913345, 0.2014765759192404, 0.2046610250744777, 0.1890225413863622, 0.18706168341557372, 0.20953892513743666, 0.2651983833960794, 0.22831452117444484, 0.21868910400348163, 0.19867921202134808, 0.20483920029196456, 0.19727152973153284, 0.21185476107191836, 0.2548302824597727, 0.2086285172057809, 0.22860261334102383, 0.2502894175534748, 0.21695481919743465, 0.17105784982735328, 0.18932093646635972, 0.8321570568915609, 0.6139102225626115, 0.9006237073635033, 0.20034729693620223, 0.16836107179562276, 0.16029467811637355, 0.7149477940096435, 0.35994630955652174, 0.16749744350858908, 0.12574958353562304, 0.21254162919062403, 0.21247975733717062, 0.20809549433275298, 0.10481862118920815, 0.10488179737428294, 0.10019736915337996, 0.1822585812365971, 0.1795519008402282, 0.1867780033555828, 0.17705352067340607, 0.1859648252288455, 0.19730590162747763, 0.19324249517538283, 0.18203160368318394, 0.18918374709184926, 0.09748145361778426, 0.09336846935464638, 0.10133238977807524, 0.08625327890326828, 0.0785951462074288, 0.11224843074607016, 0.09566538138350367, 0.07675515132383626, 0.0990168295702939]}, "mutation_prompt": null}
{"id": "e38af05d-e22b-4c3c-9eb2-6f16fe2e8abc", "solution": "import numpy as np\n\nclass EnhancedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory_size = 15  # Reduced size for faster convergence\n        self.harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n        self.harmony_memory_values = np.full(self.harmony_memory_size, np.inf)\n        self.harmony_memory_rate = 0.85  # Modified rate for better exploration\n        self.pitch_adjustment_rate = 0.35  # Adjusted pitch rate for balance\n        self.bandwidth = 0.15  # Increased bandwidth for wider search space\n\n    def __call__(self, func):\n        evaluations = 0\n        for i in range(min(self.harmony_memory_size, self.budget)):\n            self.harmony_memory_values[i] = func(self.harmony_memory[i])\n            evaluations += 1\n\n        while evaluations < self.budget:\n            new_harmony = np.array([self._generate_harmony(i) for i in range(self.dim)])\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            new_value = func(new_harmony)\n            evaluations += 1\n\n            max_index = np.argmax(self.harmony_memory_values)\n            if new_value < self.harmony_memory_values[max_index]:\n                self.harmony_memory[max_index] = new_harmony\n                self.harmony_memory_values[max_index] = new_value\n\n            self._adaptive_adjustments(evaluations)\n\n        return self.harmony_memory[np.argmin(self.harmony_memory_values)]\n\n    def _generate_harmony(self, index):\n        if np.random.rand() < self.harmony_memory_rate:\n            harmony_value = self.harmony_memory[np.random.randint(self.harmony_memory_size), index]\n            if np.random.rand() < self.pitch_adjustment_rate:\n                harmony_value += self.bandwidth * (np.random.rand() - 0.5) * 2\n        else:\n            harmony_value = np.random.uniform(self.lower_bound, self.upper_bound)\n        return harmony_value\n\n    def _adaptive_adjustments(self, evaluations):\n        progress = evaluations / self.budget\n        self.harmony_memory_rate = 0.8 + 0.1 * np.cos(progress * np.pi)  # Dynamic adjustment\n        self.bandwidth = 0.15 * (1 - progress)  # Gradually reduce bandwidth", "name": "EnhancedHarmonySearch", "description": "Enhanced Harmony Search with adaptive bandwidth and memory updates for improved exploration and convergence efficiency.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "db9a0abc-5e78-41ea-b88d-e0173e1c7b20", "metadata": {"aucs": [0.6749461622910672, 0.7054590329831809, 0.6699082764887182, 0.634321984558862, 0.686497472587492, 0.6662471820520972, 0.6655067429419201, 0.6919750347534379, 0.691584369731106, 0.39215333675813513, 0.278655707182929, 0.31091414316050947, 0.23795607854077083, 0.2787614603633155, 0.28690375018686587, 0.3344675540014743, 0.38211280136023784, 0.3414501272456886, 0.17041165872600472, 0.2534350788291253, 0.160269521791772, 0.3318122492699006, 0.1839826189916598, 0.26854445479757905, 0.16954866473744967, 0.1917844863580812, 0.15306643695017086, 0.16994663753396966, 0.18115897861694252, 0.16900136965755597, 0.22703419446316953, 0.1976978928348182, 0.2643546117651763, 0.16140932050185475, 0.384509823821365, 0.2100774537751633, 0.9598297362242227, 0.9212835176205848, 0.9208382602840781, 0.9107245618407347, 0.9046809910386159, 0.941370847273956, 0.9308615488985799, 0.9115607693235016, 0.9591767966445308, 0.31952477492141473, 0.414589603959703, 0.3778040478431781, 0.4377266172238249, 0.3328240293162633, 0.4145534372044881, 0.3752192452628108, 0.3815004083748348, 0.40606113829362633, 0.16305492422653223, 0.16638579265978404, 0.13833931264330712, 0.21650402768959343, 0.20209834300431495, 0.19917165129003056, 0.16002606622622295, 0.24645946718746647, 0.1760283304816781, 0.1326217395475987, 0.1571369939597893, 0.21998172529333726, 0.1317200754982778, 0.2742316837375892, 0.3392042958357895, 0.16171735950310573, 0.19558566129296018, 0.16476110135361866, 0.1661476799839554, 0.19379099161422741, 0.1495233133803524, 0.1495795964428107, 0.14908303160758374, 0.15470611814039825, 0.15521532074204147, 0.16898270952884653, 0.17968943669898108, 9.999999999998899e-05, 9.999999999998899e-05, 0.02814441950171298, 0.00928204544537925, 0.0031534049514529983, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11989438244226125, 0.0207366680929556, 0.03705217880708789, 0.10204289004119638, 0.027967034150771175, 0.039285130291603854, 0.03102099717098028, 0.2391001825653749, 0.11894402119977587, 0.07207807055630455, 0.10515886374836869, 0.11712351927867948, 0.10549263689086241, 0.0912661146986844, 0.07366529489480778, 0.09776266776618436, 0.13782917513069193, 0.12512892873753023, 0.059581927038665716, 0.06492287158015153, 0.07015213999056191, 0.14802917107492397, 0.040925666588617626, 0.051582813637400804, 0.15941388899683084, 0.1032931221254979, 0.15367248353627871, 0.1975685483182792, 0.42910529891524096, 0.5204225722454006, 0.5204089744381899, 0.4897817969545768, 0.4910695322848905, 0.5040279167838337, 0.4624455023245222, 0.4475039624000374, 0.44984423839375653, 0.08932630799448249, 0.07633544827261907, 0.10660941940230573, 0.09012340948819197, 0.19003565493664654, 0.11038515669071125, 0.15828209420302297, 0.11229883337567426, 0.09428926669901627, 0.3859664501097687, 0.29330277362283286, 0.2571574094152669, 0.2737658955920099, 0.17271601783683166, 0.16150869804310442, 0.17753641003098763, 0.16279785901894306, 0.27228835864864387, 0.18336449493235119, 0.34871192404519946, 0.21720261875531077, 0.23072696083743205, 0.311834577624312, 0.2065898791722275, 0.2910509897175537, 0.24766311748943848, 0.2282008231057966, 0.22009199450237094, 0.17084774388201474, 0.1684484858997346, 0.26869882376004384, 0.18285724905828948, 0.17588390279025157, 0.1368178850574986, 0.12645363739412496, 0.12109396978627807, 0.22091852373913345, 0.2014765759192404, 0.2046610250744777, 0.1890225413863622, 0.18706168341557372, 0.20953892513743666, 0.2651983833960794, 0.22831452117444484, 0.21868910400348163, 0.19867921202134808, 0.20483920029196456, 0.19727152973153284, 0.21185476107191836, 0.2548302824597727, 0.2086285172057809, 0.22860261334102383, 0.2502894175534748, 0.21695481919743465, 0.17105784982735328, 0.18932093646635972, 0.8321570568915609, 0.6139102225626115, 0.9006237073635033, 0.20034729693620223, 0.16836107179562276, 0.16029467811637355, 0.7149477940096435, 0.35994630955652174, 0.16749744350858908, 0.12574958353562304, 0.21254162919062403, 0.21247975733717062, 0.20809549433275298, 0.10481862118920815, 0.10488179737428294, 0.10019736915337996, 0.1822585812365971, 0.1795519008402282, 0.1867780033555828, 0.17705352067340607, 0.1859648252288455, 0.19730590162747763, 0.19324249517538283, 0.18203160368318394, 0.18918374709184926, 0.09748145361778426, 0.09336846935464638, 0.10133238977807524, 0.08625327890326828, 0.0785951462074288, 0.11224843074607016, 0.09566538138350367, 0.07675515132383626, 0.0990168295702939]}, "mutation_prompt": null}
{"id": "671ae890-57fc-471c-8ad4-cca6c201e8ef", "solution": "import numpy as np\n\nclass EnhancedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory_size = 15  # Reduced size for faster convergence\n        self.harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n        self.harmony_memory_values = np.full(self.harmony_memory_size, np.inf)\n        self.harmony_memory_rate = 0.85  # Modified rate for better exploration\n        self.pitch_adjustment_rate = 0.35  # Adjusted pitch rate for balance\n        self.bandwidth = 0.15  # Increased bandwidth for wider search space\n\n    def __call__(self, func):\n        evaluations = 0\n        for i in range(min(self.harmony_memory_size, self.budget)):\n            self.harmony_memory_values[i] = func(self.harmony_memory[i])\n            evaluations += 1\n\n        while evaluations < self.budget:\n            new_harmony = np.array([self._generate_harmony(i) for i in range(self.dim)])\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            new_value = func(new_harmony)\n            evaluations += 1\n\n            max_index = np.argmax(self.harmony_memory_values)\n            if new_value < self.harmony_memory_values[max_index]:\n                self.harmony_memory[max_index] = new_harmony\n                self.harmony_memory_values[max_index] = new_value\n\n            self._adaptive_adjustments(evaluations)\n\n        return self.harmony_memory[np.argmin(self.harmony_memory_values)]\n\n    def _generate_harmony(self, index):\n        if np.random.rand() < self.harmony_memory_rate:\n            harmony_value = self.harmony_memory[np.random.randint(self.harmony_memory_size), index]\n            if np.random.rand() < self.pitch_adjustment_rate:\n                harmony_value += self.bandwidth * (np.random.rand() - 0.5) * 2\n        else:\n            harmony_value = np.random.uniform(self.lower_bound, self.upper_bound)\n        return harmony_value\n\n    def _adaptive_adjustments(self, evaluations):\n        progress = evaluations / self.budget\n        self.harmony_memory_rate = 0.8 + 0.1 * np.cos(progress * np.pi)  # Dynamic adjustment\n        self.bandwidth = 0.15 * (1 - progress)  # Gradually reduce bandwidth", "name": "EnhancedHarmonySearch", "description": "Enhanced Harmony Search with adaptive bandwidth and memory updates for improved exploration and convergence efficiency.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "db9a0abc-5e78-41ea-b88d-e0173e1c7b20", "metadata": {"aucs": [0.6749461622910672, 0.7054590329831809, 0.6699082764887182, 0.634321984558862, 0.686497472587492, 0.6662471820520972, 0.6655067429419201, 0.6919750347534379, 0.691584369731106, 0.39215333675813513, 0.278655707182929, 0.31091414316050947, 0.23795607854077083, 0.2787614603633155, 0.28690375018686587, 0.3344675540014743, 0.38211280136023784, 0.3414501272456886, 0.17041165872600472, 0.2534350788291253, 0.160269521791772, 0.3318122492699006, 0.1839826189916598, 0.26854445479757905, 0.16954866473744967, 0.1917844863580812, 0.15306643695017086, 0.16994663753396966, 0.18115897861694252, 0.16900136965755597, 0.22703419446316953, 0.1976978928348182, 0.2643546117651763, 0.16140932050185475, 0.384509823821365, 0.2100774537751633, 0.9598297362242227, 0.9212835176205848, 0.9208382602840781, 0.9107245618407347, 0.9046809910386159, 0.941370847273956, 0.9308615488985799, 0.9115607693235016, 0.9591767966445308, 0.31952477492141473, 0.414589603959703, 0.3778040478431781, 0.4377266172238249, 0.3328240293162633, 0.4145534372044881, 0.3752192452628108, 0.3815004083748348, 0.40606113829362633, 0.16305492422653223, 0.16638579265978404, 0.13833931264330712, 0.21650402768959343, 0.20209834300431495, 0.19917165129003056, 0.16002606622622295, 0.24645946718746647, 0.1760283304816781, 0.1326217395475987, 0.1571369939597893, 0.21998172529333726, 0.1317200754982778, 0.2742316837375892, 0.3392042958357895, 0.16171735950310573, 0.19558566129296018, 0.16476110135361866, 0.1661476799839554, 0.19379099161422741, 0.1495233133803524, 0.1495795964428107, 0.14908303160758374, 0.15470611814039825, 0.15521532074204147, 0.16898270952884653, 0.17968943669898108, 9.999999999998899e-05, 9.999999999998899e-05, 0.02814441950171298, 0.00928204544537925, 0.0031534049514529983, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11989438244226125, 0.0207366680929556, 0.03705217880708789, 0.10204289004119638, 0.027967034150771175, 0.039285130291603854, 0.03102099717098028, 0.2391001825653749, 0.11894402119977587, 0.07207807055630455, 0.10515886374836869, 0.11712351927867948, 0.10549263689086241, 0.0912661146986844, 0.07366529489480778, 0.09776266776618436, 0.13782917513069193, 0.12512892873753023, 0.059581927038665716, 0.06492287158015153, 0.07015213999056191, 0.14802917107492397, 0.040925666588617626, 0.051582813637400804, 0.15941388899683084, 0.1032931221254979, 0.15367248353627871, 0.1975685483182792, 0.42910529891524096, 0.5204225722454006, 0.5204089744381899, 0.4897817969545768, 0.4910695322848905, 0.5040279167838337, 0.4624455023245222, 0.4475039624000374, 0.44984423839375653, 0.08932630799448249, 0.07633544827261907, 0.10660941940230573, 0.09012340948819197, 0.19003565493664654, 0.11038515669071125, 0.15828209420302297, 0.11229883337567426, 0.09428926669901627, 0.3859664501097687, 0.29330277362283286, 0.2571574094152669, 0.2737658955920099, 0.17271601783683166, 0.16150869804310442, 0.17753641003098763, 0.16279785901894306, 0.27228835864864387, 0.18336449493235119, 0.34871192404519946, 0.21720261875531077, 0.23072696083743205, 0.311834577624312, 0.2065898791722275, 0.2910509897175537, 0.24766311748943848, 0.2282008231057966, 0.22009199450237094, 0.17084774388201474, 0.1684484858997346, 0.26869882376004384, 0.18285724905828948, 0.17588390279025157, 0.1368178850574986, 0.12645363739412496, 0.12109396978627807, 0.22091852373913345, 0.2014765759192404, 0.2046610250744777, 0.1890225413863622, 0.18706168341557372, 0.20953892513743666, 0.2651983833960794, 0.22831452117444484, 0.21868910400348163, 0.19867921202134808, 0.20483920029196456, 0.19727152973153284, 0.21185476107191836, 0.2548302824597727, 0.2086285172057809, 0.22860261334102383, 0.2502894175534748, 0.21695481919743465, 0.17105784982735328, 0.18932093646635972, 0.8321570568915609, 0.6139102225626115, 0.9006237073635033, 0.20034729693620223, 0.16836107179562276, 0.16029467811637355, 0.7149477940096435, 0.35994630955652174, 0.16749744350858908, 0.12574958353562304, 0.21254162919062403, 0.21247975733717062, 0.20809549433275298, 0.10481862118920815, 0.10488179737428294, 0.10019736915337996, 0.1822585812365971, 0.1795519008402282, 0.1867780033555828, 0.17705352067340607, 0.1859648252288455, 0.19730590162747763, 0.19324249517538283, 0.18203160368318394, 0.18918374709184926, 0.09748145361778426, 0.09336846935464638, 0.10133238977807524, 0.08625327890326828, 0.0785951462074288, 0.11224843074607016, 0.09566538138350367, 0.07675515132383626, 0.0990168295702939]}, "mutation_prompt": null}
{"id": "6d85543f-2fa1-4124-976e-ad329432944e", "solution": "import numpy as np\n\nclass SimplifiedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory_size = 10  # Smaller memory size for faster updates\n        self.harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n        self.harmony_memory_values = np.array([np.inf] * self.harmony_memory_size)\n        self.harmony_memory_rate = 0.9  # Higher rate for intensified exploitation\n        self.pitch_adjustment_rate = 0.4  # Balanced pitch adjustment\n        self.bandwidth = 0.2  # Initial bandwidth\n\n    def __call__(self, func):\n        evaluations = 0\n        for i in range(min(self.harmony_memory_size, self.budget)):\n            self.harmony_memory_values[i] = func(self.harmony_memory[i])\n            evaluations += 1\n\n        while evaluations < self.budget:\n            new_harmony = self._generate_harmony()\n            new_value = func(new_harmony)\n            evaluations += 1\n\n            max_index = np.argmax(self.harmony_memory_values)\n            if new_value < self.harmony_memory_values[max_index]:\n                self.harmony_memory[max_index] = new_harmony\n                self.harmony_memory_values[max_index] = new_value\n\n            self._update_parameters(evaluations)\n\n        return self.harmony_memory[np.argmin(self.harmony_memory_values)]\n\n    def _generate_harmony(self):\n        new_harmony = []\n        for index in range(self.dim):\n            if np.random.rand() < self.harmony_memory_rate:\n                harmony_value = self.harmony_memory[np.random.randint(self.harmony_memory_size), index]\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    harmony_value += self.bandwidth * (np.random.rand() - 0.5)\n            else:\n                harmony_value = np.random.uniform(self.lower_bound, self.upper_bound)\n            new_harmony.append(harmony_value)\n        return np.clip(new_harmony, self.lower_bound, self.upper_bound)\n\n    def _update_parameters(self, evaluations):\n        progress = evaluations / self.budget\n        self.harmony_memory_rate = 0.9 - 0.2 * progress  # Gradually decreases\n        self.bandwidth *= 0.95  # Reduce bandwidth progressively", "name": "SimplifiedHarmonySearch", "description": "Simplified Harmony Search with progressive bandwidth reduction and memory size scaling for enhanced efficiency.", "configspace": "", "generation": 14, "fitness": 0.16773595840441585, "feedback": "The algorithm SimplifiedHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.11.", "error": "", "parent_id": "db9a0abc-5e78-41ea-b88d-e0173e1c7b20", "metadata": {"aucs": [0.488373313352258, 0.44485255402704904, 0.4790460231694117, 0.471895112904531, 0.43535861386823393, 0.46179174040388116, 0.4211831445313057, 0.503300984327749, 0.47166191680589575, 0.003080248573507416, 0.10012362383968343, 0.17969717074420222, 9.999999999998899e-05, 0.028971027241098457, 0.0680665869552799, 0.0222334221290037, 0.05987628880153184, 0.04721726003849913, 0.1638071491787021, 0.207027119634413, 0.1890291417875466, 0.19462585008069844, 0.18772834186694565, 0.20529441562895223, 0.20149802882066803, 0.21704435561620683, 0.20401464535243363, 0.151039959125309, 0.188999534462583, 0.14792738610824485, 0.19000991956868507, 0.19284274762732445, 0.13992336977257602, 0.18732011265152693, 0.17586570890097553, 0.1944810892900155, 0.2363164275689853, 0.21079249882846773, 0.21737290873756943, 0.23203582215839247, 0.21163704255902238, 0.21975290535351455, 0.22892376143229065, 0.1992245268516598, 0.21894143761775453, 0.2477962415306728, 0.17174423462250799, 0.1842311381188083, 0.27075018429750974, 0.14693242796048656, 0.28707388748119267, 0.2041340989763918, 0.1594126899188204, 0.16305056965342646, 0.19451914044689533, 0.1486249447842669, 0.2263158694101256, 0.23731133756362055, 0.23265197398227444, 0.15243611019131498, 0.22337712508436913, 0.13941228662897343, 0.1674449492775344, 0.14628064658948658, 0.16951182007955246, 0.20641712429904702, 0.1650011356793708, 0.17894506700124024, 0.16785508344786482, 0.16220644811923735, 0.155187359221863, 0.15676474518564065, 0.12527806196018032, 9.999999999998899e-05, 0.15723505765503465, 0.12760726868143724, 0.14481142059872587, 0.15428510286575325, 0.14477749588724853, 0.12796407416662037, 0.13106942342080619, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018417282227462084, 9.999999999998899e-05, 9.999999999998899e-05, 0.08329761590451146, 0.05818728004345908, 0.06456203187792331, 0.04020780677911029, 0.011088988585163828, 0.0327671840638013, 0.042660678002670815, 0.060807467518661174, 0.06531423123072799, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02097274970491947, 9.999999999998899e-05, 9.999999999998899e-05, 0.08497489204759967, 0.0456266091050489, 0.07344036847974744, 0.06401504544878955, 0.018935138991626133, 0.11651225380250707, 0.06638682701519538, 0.07940932111892307, 0.08343257573920149, 0.3919519209678447, 0.34934133527512645, 0.3212331149793638, 0.3586297546723659, 0.35003455809774, 0.38128598931993174, 0.40296427818218805, 0.37254113565506464, 0.34744647509848736, 0.11956008065360435, 0.08874958526663135, 0.09968614680217502, 0.14033504701477628, 0.05662802646782128, 0.09918708767949702, 0.09556987755832047, 0.08992609552164521, 0.0786243973896753, 0.18139805345158866, 0.14472884924677287, 0.18961184797890285, 0.15503253868866118, 0.1890146422101482, 0.14140208325752024, 0.14734712613624323, 0.179610510932099, 0.11242255728015094, 0.21778739913850542, 0.20975736484628238, 0.1796194573550507, 0.20740766852658254, 0.2628205813936696, 0.2673984064852222, 0.1854791148074625, 0.2592131312708229, 0.20690128555104348, 0.1299758598253149, 0.15344089101988723, 0.17337307912191113, 0.1568817236687703, 0.14928526864639202, 0.22160463458938295, 0.11276083773419965, 0.11432489347714558, 0.14596537862938808, 0.18184660624859306, 0.1751458040847319, 0.21242342052024, 0.18541199259148822, 0.21662515237833224, 0.21270212991645676, 0.1907060138106389, 0.17479150782266262, 0.24215572528974383, 0.24020183831783337, 0.24006868952689542, 0.2002197323508823, 0.19028503114346418, 0.21717267921707506, 0.21571256579449394, 0.20863895186217185, 0.2412578544429813, 0.21439623115787954, 0.1583163276255587, 0.16124965170113137, 0.16727350198122493, 0.48424863389344297, 0.19852813436129646, 0.21226420838524918, 0.4885816932243693, 0.17175184973729485, 0.2940499499701609, 0.34739621762507866, 0.16547302088889138, 0.13768211425548704, 0.16905664905830342, 0.15721131836720958, 0.20539831976379275, 0.09469156388510092, 0.11619863633627814, 0.13023976342537424, 0.1730166344807511, 0.18338368382046732, 0.19249150389191083, 0.17680433142029273, 0.18632852608236128, 0.19336620954727002, 0.19696722410764766, 0.19026604258814905, 0.19515977548981145, 0.07438626740778198, 0.07342842156732676, 0.07319108217731041, 0.06930530613523311, 0.10990674945342493, 0.06497558106470458, 0.0740251511443859, 0.07031659635175946, 0.06457622502011251]}, "mutation_prompt": null}
{"id": "54fb023e-e90a-4f72-8431-947c6d88e192", "solution": "import numpy as np\n\nclass OptimizedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory_size = 12  # Reduced size for faster operation\n        self.harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n        self.harmony_memory_values = np.full(self.harmony_memory_size, np.inf)\n        self.harmony_memory_rate = 0.9  # More exploration\n        self.pitch_adjustment_rate = 0.3  # Balanced rate\n        self.bandwidth = 0.1  # Reduced for finer local search\n        \n    def __call__(self, func):\n        evaluations = 0\n        self.harmony_memory_values[:self.harmony_memory_size] = [func(harmony) for harmony in self.harmony_memory]\n        evaluations += self.harmony_memory_size\n\n        while evaluations < self.budget:\n            new_harmony = self._generate_harmony()\n            new_value = func(new_harmony)\n            evaluations += 1\n\n            max_index = np.argmax(self.harmony_memory_values)\n            if new_value < self.harmony_memory_values[max_index]:\n                self.harmony_memory[max_index] = new_harmony\n                self.harmony_memory_values[max_index] = new_value\n            \n            progress = evaluations / self.budget\n            self.harmony_memory_rate = 0.9 - 0.1 * progress\n            self.bandwidth *= 0.95  # Gradually reduce bandwidth\n\n        return self.harmony_memory[np.argmin(self.harmony_memory_values)]\n\n    def _generate_harmony(self):\n        new_harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.harmony_memory_rate:\n                harmony_value = self.harmony_memory[np.random.randint(self.harmony_memory_size), i]\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    harmony_value += self.bandwidth * (np.random.rand() - 0.5) * 2\n            else:\n                harmony_value = np.random.uniform(self.lower_bound, self.upper_bound)\n            new_harmony[i] = np.clip(harmony_value, self.lower_bound, self.upper_bound)\n        return new_harmony", "name": "OptimizedHarmonySearch", "description": "Optimized Harmony Search with enhanced memory update strategy and streamlined loop execution for improved computational efficiency.", "configspace": "", "generation": 15, "fitness": 0.1705291821624337, "feedback": "The algorithm OptimizedHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.12.", "error": "", "parent_id": "db9a0abc-5e78-41ea-b88d-e0173e1c7b20", "metadata": {"aucs": [0.46337821810968116, 0.5035758128655424, 0.49935095195394685, 0.5017113492705287, 0.49746062554446024, 0.4381811820294319, 0.4421690110030413, 0.4938305227595444, 0.4919747183375073, 0.021903913927165952, 0.032670024022857236, 0.05703163475878392, 9.999999999998899e-05, 0.010186435820897177, 0.07645400550627468, 0.002366599720656226, 0.014370181324093956, 0.0130616531636224, 0.1837394443300122, 0.2525141045664655, 0.17157162334394238, 0.17182200890809562, 0.18026843127266168, 0.25737133707603, 0.21518361198137237, 0.20455976349151084, 0.2104546092772377, 0.17264039823966248, 0.2312090686854491, 0.16187756678558485, 0.1906541375760239, 0.15877829702283075, 0.1721836912044028, 0.1681728308073862, 0.1597171864126118, 0.18053708941224755, 0.2461829844593716, 0.2310636434318759, 0.20941549752045596, 0.23879527433589887, 0.2204519833087063, 0.20957702178286242, 0.2351780534034269, 0.22458594154583333, 0.20860377763742544, 0.18324941462783462, 0.2335393964304412, 0.17683020484824463, 0.20798382717075015, 0.21265342692378808, 0.1831208525518918, 0.12361699146224403, 0.1709842663213179, 0.18317799988594174, 0.14752104154353807, 0.07148088734765201, 0.1971699783208254, 0.3122178934394606, 0.18402951436949422, 0.16892498207821594, 0.1519809480296781, 0.16726184017078827, 0.17150718818359478, 0.17778657155449362, 0.15727149131634666, 0.18396821886103554, 0.14978055019370295, 0.12787704297870695, 0.13726465397719967, 0.14784766592730525, 0.2790072449254123, 0.16606924897865516, 0.12630754861294846, 0.12020530984509292, 0.13498603589399338, 0.12878192469276273, 0.13629088487322827, 0.12922571385035886, 0.15872970039962953, 0.12212086179155646, 0.12689360870553335, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010041789607879714, 9.999999999998899e-05, 0.02323625670604801, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022990970919681608, 0.04611656311772261, 0.030320135094840217, 0.09539613807671998, 0.06272810647268312, 0.036154464092705174, 0.07328745659193625, 0.08414194301880484, 0.08607953254246037, 0.054556915808958495, 9.999999999998899e-05, 9.999999999998899e-05, 0.027907916356273543, 9.999999999998899e-05, 0.00034258395730357716, 0.0003065152711556607, 0.0011758419336858061, 0.0010538397110158026, 0.015539580344968051, 0.09599909565937992, 0.037402777768097084, 0.07858398101691744, 0.08080136351414513, 0.036915392030471006, 0.07876696525811999, 0.06843795121020868, 0.10897538519908123, 0.08120948104745962, 0.3444583477790282, 0.3644135224234778, 0.33284160502633353, 0.37363001574705745, 0.36523485681559864, 0.32502588723381676, 0.34087251337478197, 0.34779327728417087, 0.3241584482943438, 0.09414310855598396, 0.09748670147660998, 0.1031107615320278, 0.09524847770482159, 0.04926027768622865, 0.16102882070920332, 0.12480920581637078, 0.0792020822971563, 0.09852406492873211, 0.20184613578582855, 0.12904513406304652, 0.20606836093833536, 0.1552813735687283, 0.14451651536085142, 0.16099518980555672, 0.15541489106451167, 0.1405121766735279, 0.1574610361612766, 0.1569813519082094, 0.20488522213623006, 0.18111587993160294, 0.29094834814782145, 0.15559464784093757, 0.2137576450164934, 0.23061754023463144, 0.23492613271631357, 0.1736470812901827, 0.10839062830615787, 0.14561126812572034, 0.11878280100631733, 0.18595733808268655, 0.22388681298247182, 0.20393529049870107, 0.1710582537940607, 0.18438337957887274, 0.18085388357594578, 0.1809506125392737, 0.21159504089480996, 0.18338691890117864, 0.17650653250283543, 0.1919990472091766, 0.23435260085008036, 0.20749908729196764, 0.20087414499647738, 0.1690333083310961, 0.20765709022413137, 0.1974317871571839, 0.18476882399704653, 0.175036217130618, 0.33700957339935644, 0.22382733060186155, 0.20300741924743892, 0.2978824389512461, 0.19517518534628975, 0.37182013741690556, 0.18852045745075408, 0.17293712198899613, 0.4486401907311246, 0.4873418784122382, 0.431315004469378, 0.16766024085081066, 0.5619876169423346, 0.16494799531157966, 0.16720132504131247, 0.16884595279165748, 0.1909763879417251, 0.2417625630885849, 0.23185600472700973, 0.19695930682722051, 0.10439501674475027, 0.16786049022450156, 0.1053072706855126, 0.18550237385405366, 0.17410906991811226, 0.18085278144391537, 0.17011452609537514, 0.17258338695250952, 0.18089086749101735, 0.18422265964893036, 0.2179603191687275, 0.20259958098004938, 0.05441216499220736, 0.07628840766072753, 0.07682169464500854, 0.07344320387896819, 0.08051466752727665, 0.08273568925506047, 0.07625380902453238, 0.07397637685619884, 0.0700948724910726]}, "mutation_prompt": null}
{"id": "37a7292a-0995-4d53-a73f-21615fbff7f3", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor\n\nclass AcceleratedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_memory_size = 10  # Smaller initial memory for rapid convergence\n        self.harmony_memory_rate_start = 0.9  # Higher initial exploration rate\n        self.harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_memory_size, self.dim))\n        self.harmony_memory_values = np.full(self.initial_memory_size, np.inf)\n        self.pitch_adjustment_rate = 0.3  # Slightly reduced pitch rate\n        self.bandwidth_start = 0.2  # Starting with a larger bandwidth\n\n    def __call__(self, func):\n        evaluations = 0\n        self.harmony_memory_values[:self.initial_memory_size] = self._evaluate_parallel(self.harmony_memory[:self.initial_memory_size], func)\n        evaluations += self.initial_memory_size\n\n        while evaluations < self.budget:\n            new_harmony = np.clip([self._generate_harmony(i) for i in range(self.dim)], self.lower_bound, self.upper_bound)\n            new_value = func(new_harmony)\n            evaluations += 1\n\n            max_index = np.argmax(self.harmony_memory_values)\n            if new_value < self.harmony_memory_values[max_index]:\n                self.harmony_memory[max_index] = new_harmony\n                self.harmony_memory_values[max_index] = new_value\n\n            if evaluations % (self.budget // 10) == 0:  # Dynamic memory size adjustment\n                self._expand_memory(func)\n            \n            self._adaptive_adjustments(evaluations)\n\n        return self.harmony_memory[np.argmin(self.harmony_memory_values)]\n\n    def _generate_harmony(self, index):\n        if np.random.rand() < self.harmony_memory_rate_start * (1 - index/self.dim):  # Dynamic harmony memory rate\n            harmony_value = self.harmony_memory[np.random.randint(len(self.harmony_memory)), index]\n            if np.random.rand() < self.pitch_adjustment_rate:\n                harmony_value += self.bandwidth_start * (np.random.rand() - 0.5) * 2\n        else:\n            harmony_value = np.random.uniform(self.lower_bound, self.upper_bound)\n        return harmony_value\n\n    def _adaptive_adjustments(self, evaluations):\n        progress = evaluations / self.budget\n        self.bandwidth_start = 0.2 * (1 - progress**2)  # Quadratic reduction for bandwidth\n\n    def _evaluate_parallel(self, harmonies, func):\n        with ThreadPoolExecutor() as executor:\n            results = executor.map(func, harmonies)\n        return list(results)\n\n    def _expand_memory(self, func):\n        new_memory = np.random.uniform(self.lower_bound, self.upper_bound, (5, self.dim))\n        new_values = self._evaluate_parallel(new_memory, func)\n        self.harmony_memory = np.vstack((self.harmony_memory, new_memory))\n        self.harmony_memory_values = np.concatenate((self.harmony_memory_values, new_values))", "name": "AcceleratedHarmonySearch", "description": "Accelerated Harmony Search with parallel evaluation and dynamic memory size adjustment for enhanced efficiency and faster convergence.", "configspace": "", "generation": 16, "fitness": 0.1489751053266389, "feedback": "The algorithm AcceleratedHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.10.", "error": "", "parent_id": "db9a0abc-5e78-41ea-b88d-e0173e1c7b20", "metadata": {"aucs": [0.4017031568535504, 0.33414414003744675, 0.3523882413353413, 0.34498796407437937, 0.38695513935214554, 0.3943318588870436, 0.35977335066596994, 0.386004681764306, 0.4244806044784959, 0.0329488042853211, 0.015051007991936372, 0.01023152821677975, 0.007241895999096637, 0.0031322395275897863, 0.009923893038377707, 0.004575947614634979, 0.04094196062568212, 0.01546420440188978, 0.12808355294904106, 0.11311593171773215, 0.12269185906593594, 0.10223334332244538, 0.11125777260112224, 0.11136725872032005, 0.12290134691248544, 0.13006914904564948, 0.14456965812379208, 0.10514092966996891, 0.09913259683645392, 0.09234839258826522, 0.11949367952348366, 0.11332998570226882, 0.09072679888687218, 0.11292929312399214, 0.10377085962639554, 0.12916680562198757, 0.23303515213252546, 0.2084035590974317, 0.1733845961779481, 0.18735184190098442, 0.2195726619836751, 0.17017923293012283, 0.21479452182099923, 0.20339164680234612, 0.2082110014306976, 0.16043074898533904, 0.11949295863672482, 0.12153161400019874, 0.1825575477829614, 0.15520855008450363, 0.17422261685681117, 0.15247629955709563, 0.14049739283786566, 0.15906432985212682, 0.17899269002186424, 0.1675877195315526, 0.20553001031943208, 0.21865711318815007, 0.21035678627576027, 0.1568328008751747, 0.16615251028008804, 0.1683684597808558, 0.17731046511026272, 0.1314247254132872, 0.12507572509996734, 0.11062542626638716, 0.12212079203694426, 0.11748449933719962, 0.12855318687676276, 0.12185772648115167, 0.1021860850970997, 0.12582830075609341, 0.1106199656074317, 0.04555619817351675, 0.0003364118215911649, 0.060423427798378504, 0.10935506311982934, 0.11528366607839946, 0.11971733727860812, 0.0539237028156615, 0.11021763993297207, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10724374809228066, 0.04038096883028086, 0.0587106587580456, 0.0470351932397447, 0.10199723291324991, 0.05240510305802781, 0.11287646936065499, 0.050864185936233985, 0.07797855440320056, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.059066227035017405, 0.041260039228484646, 0.05369376502877787, 0.055024608157454136, 0.034845918207376814, 0.040518831710821934, 0.05674850950180166, 0.04568300923229851, 0.09482473999650864, 0.3585440006999282, 0.3171027413754832, 0.30680026192496457, 0.3247727088477098, 0.3674706286814634, 0.3406275584514179, 0.35351439016930897, 0.36726970594059727, 0.37255094716671355, 0.0787339367127935, 0.07835509223554904, 0.07500946484726934, 0.08871867012082169, 0.11057428535367708, 0.0834351967000192, 0.08379821443930124, 0.0796285012266491, 0.0726751056724173, 0.1528013892146619, 0.1594212947958391, 0.16110510334068517, 0.17136643926905348, 0.13922089031603624, 0.1442539531947572, 0.14066496345858248, 0.15160616503952384, 0.14389408068373177, 0.21223675860500968, 0.21360026269003474, 0.22574018206324198, 0.21275949234891334, 0.17747393244091292, 0.23215465771861366, 0.2580470124635019, 0.2196888295669157, 0.24447193096427045, 0.1724716360580778, 0.21081910532739012, 0.19980386826749252, 0.1725568452821008, 0.16971677408644859, 0.1550346308844226, 0.16973662498380904, 0.19154483683407908, 0.1467758790388185, 0.17565825005698388, 0.18365746570573782, 0.19626616230805627, 0.19045257599594934, 0.17625529782338145, 0.1823949162869789, 0.17817285280037665, 0.1959826701697479, 0.20122113143433118, 0.20782166183031214, 0.20948522865747277, 0.2036738948666198, 0.1827148634541933, 0.2061859942678328, 0.21295861607622557, 0.17470379432373573, 0.1648364371979193, 0.1964142054016217, 0.3505427998026629, 0.3011487859233952, 0.19545752838371866, 0.3474922528830784, 0.36714771212523833, 0.16522499146776504, 0.3496727399850058, 0.2086767361632852, 0.16536101075330212, 0.2523325082786403, 0.15931159775015835, 0.1420894312923323, 0.16618194038909662, 0.165669856261629, 0.19519418155608348, 0.2782607398118121, 0.2087889155677074, 0.2377107321435339, 0.20279417262352328, 0.1760704112474154, 0.18600432086703222, 0.1860277547220317, 0.18382216640592175, 0.19020623816887294, 0.17116892106345571, 0.19055514850715127, 0.16936052570348603, 0.080727571227451, 0.08143530502771501, 0.06811770524496574, 0.07622732197151783, 0.07706792447921329, 0.071910667697614, 0.06989813587936622, 0.07221008751506974, 0.06759663938003302]}, "mutation_prompt": null}
{"id": "a08426f9-7313-430d-9148-f0e9885dbcad", "solution": "import numpy as np\n\nclass EnhancedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory_size = 15  # Reduced size for faster convergence\n        self.harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n        self.harmony_memory_values = np.full(self.harmony_memory_size, np.inf)\n        self.harmony_memory_rate = 0.85  # Modified rate for better exploration\n        self.pitch_adjustment_rate = 0.35  # Adjusted pitch rate for balance\n        self.bandwidth = 0.15  # Increased bandwidth for wider search space\n\n    def __call__(self, func):\n        evaluations = 0\n        for i in range(min(self.harmony_memory_size, self.budget)):\n            self.harmony_memory_values[i] = func(self.harmony_memory[i])\n            evaluations += 1\n\n        while evaluations < self.budget:\n            new_harmony = np.array([self._generate_harmony(i) for i in range(self.dim)])\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            new_value = func(new_harmony)\n            evaluations += 1\n\n            max_index = np.argmax(self.harmony_memory_values)\n            if new_value < self.harmony_memory_values[max_index]:\n                self.harmony_memory[max_index] = new_harmony\n                self.harmony_memory_values[max_index] = new_value\n\n            self._adaptive_adjustments(evaluations)\n\n        return self.harmony_memory[np.argmin(self.harmony_memory_values)]\n\n    def _generate_harmony(self, index):\n        if np.random.rand() < self.harmony_memory_rate:\n            harmony_value = self.harmony_memory[np.random.randint(self.harmony_memory_size), index]\n            if np.random.rand() < self.pitch_adjustment_rate:\n                harmony_value += self.bandwidth * (np.random.rand() - 0.5) * 2\n        else:\n            harmony_value = np.random.uniform(self.lower_bound, self.upper_bound)\n        return harmony_value\n\n    def _adaptive_adjustments(self, evaluations):\n        progress = evaluations / self.budget\n        self.harmony_memory_rate = 0.8 + 0.1 * np.cos(progress * np.pi)  # Dynamic adjustment\n        self.bandwidth = 0.15 * (1 - progress)  # Gradually reduce bandwidth", "name": "EnhancedHarmonySearch", "description": "Enhanced Harmony Search with adaptive bandwidth and memory updates for improved exploration and convergence efficiency.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "db9a0abc-5e78-41ea-b88d-e0173e1c7b20", "metadata": {"aucs": [0.6749461622910672, 0.7054590329831809, 0.6699082764887182, 0.634321984558862, 0.686497472587492, 0.6662471820520972, 0.6655067429419201, 0.6919750347534379, 0.691584369731106, 0.39215333675813513, 0.278655707182929, 0.31091414316050947, 0.23795607854077083, 0.2787614603633155, 0.28690375018686587, 0.3344675540014743, 0.38211280136023784, 0.3414501272456886, 0.17041165872600472, 0.2534350788291253, 0.160269521791772, 0.3318122492699006, 0.1839826189916598, 0.26854445479757905, 0.16954866473744967, 0.1917844863580812, 0.15306643695017086, 0.16994663753396966, 0.18115897861694252, 0.16900136965755597, 0.22703419446316953, 0.1976978928348182, 0.2643546117651763, 0.16140932050185475, 0.384509823821365, 0.2100774537751633, 0.9598297362242227, 0.9212835176205848, 0.9208382602840781, 0.9107245618407347, 0.9046809910386159, 0.941370847273956, 0.9308615488985799, 0.9115607693235016, 0.9591767966445308, 0.31952477492141473, 0.414589603959703, 0.3778040478431781, 0.4377266172238249, 0.3328240293162633, 0.4145534372044881, 0.3752192452628108, 0.3815004083748348, 0.40606113829362633, 0.16305492422653223, 0.16638579265978404, 0.13833931264330712, 0.21650402768959343, 0.20209834300431495, 0.19917165129003056, 0.16002606622622295, 0.24645946718746647, 0.1760283304816781, 0.1326217395475987, 0.1571369939597893, 0.21998172529333726, 0.1317200754982778, 0.2742316837375892, 0.3392042958357895, 0.16171735950310573, 0.19558566129296018, 0.16476110135361866, 0.1661476799839554, 0.19379099161422741, 0.1495233133803524, 0.1495795964428107, 0.14908303160758374, 0.15470611814039825, 0.15521532074204147, 0.16898270952884653, 0.17968943669898108, 9.999999999998899e-05, 9.999999999998899e-05, 0.02814441950171298, 0.00928204544537925, 0.0031534049514529983, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11989438244226125, 0.0207366680929556, 0.03705217880708789, 0.10204289004119638, 0.027967034150771175, 0.039285130291603854, 0.03102099717098028, 0.2391001825653749, 0.11894402119977587, 0.07207807055630455, 0.10515886374836869, 0.11712351927867948, 0.10549263689086241, 0.0912661146986844, 0.07366529489480778, 0.09776266776618436, 0.13782917513069193, 0.12512892873753023, 0.059581927038665716, 0.06492287158015153, 0.07015213999056191, 0.14802917107492397, 0.040925666588617626, 0.051582813637400804, 0.15941388899683084, 0.1032931221254979, 0.15367248353627871, 0.1975685483182792, 0.42910529891524096, 0.5204225722454006, 0.5204089744381899, 0.4897817969545768, 0.4910695322848905, 0.5040279167838337, 0.4624455023245222, 0.4475039624000374, 0.44984423839375653, 0.08932630799448249, 0.07633544827261907, 0.10660941940230573, 0.09012340948819197, 0.19003565493664654, 0.11038515669071125, 0.15828209420302297, 0.11229883337567426, 0.09428926669901627, 0.3859664501097687, 0.29330277362283286, 0.2571574094152669, 0.2737658955920099, 0.17271601783683166, 0.16150869804310442, 0.17753641003098763, 0.16279785901894306, 0.27228835864864387, 0.18336449493235119, 0.34871192404519946, 0.21720261875531077, 0.23072696083743205, 0.311834577624312, 0.2065898791722275, 0.2910509897175537, 0.24766311748943848, 0.2282008231057966, 0.22009199450237094, 0.17084774388201474, 0.1684484858997346, 0.26869882376004384, 0.18285724905828948, 0.17588390279025157, 0.1368178850574986, 0.12645363739412496, 0.12109396978627807, 0.22091852373913345, 0.2014765759192404, 0.2046610250744777, 0.1890225413863622, 0.18706168341557372, 0.20953892513743666, 0.2651983833960794, 0.22831452117444484, 0.21868910400348163, 0.19867921202134808, 0.20483920029196456, 0.19727152973153284, 0.21185476107191836, 0.2548302824597727, 0.2086285172057809, 0.22860261334102383, 0.2502894175534748, 0.21695481919743465, 0.17105784982735328, 0.18932093646635972, 0.8321570568915609, 0.6139102225626115, 0.9006237073635033, 0.20034729693620223, 0.16836107179562276, 0.16029467811637355, 0.7149477940096435, 0.35994630955652174, 0.16749744350858908, 0.12574958353562304, 0.21254162919062403, 0.21247975733717062, 0.20809549433275298, 0.10481862118920815, 0.10488179737428294, 0.10019736915337996, 0.1822585812365971, 0.1795519008402282, 0.1867780033555828, 0.17705352067340607, 0.1859648252288455, 0.19730590162747763, 0.19324249517538283, 0.18203160368318394, 0.18918374709184926, 0.09748145361778426, 0.09336846935464638, 0.10133238977807524, 0.08625327890326828, 0.0785951462074288, 0.11224843074607016, 0.09566538138350367, 0.07675515132383626, 0.0990168295702939]}, "mutation_prompt": null}
{"id": "58128b1f-01b3-445d-b23e-a859d08abf74", "solution": "import numpy as np\n\nclass OptimizedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory_size = 10  # Reduced size for efficiency\n        self.harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n        self.harmony_memory_values = np.array([np.inf] * self.harmony_memory_size)\n        self.harmony_memory_rate = 0.9  # Higher rate for exploration\n        self.pitch_adjustment_rate = 0.25  # Lower rate for stability\n        self.bandwidth = 0.2  # Broader initial bandwidth\n\n    def __call__(self, func):\n        evaluations = 0\n        self.harmony_memory_values = np.apply_along_axis(func, 1, self.harmony_memory)  # Vectorized evaluation\n        evaluations += self.harmony_memory_size\n\n        while evaluations < self.budget:\n            new_harmony = np.clip(self._create_new_harmony(), self.lower_bound, self.upper_bound)\n            new_value = func(new_harmony)\n            evaluations += 1\n\n            worst_index = np.argmax(self.harmony_memory_values)\n            if new_value < self.harmony_memory_values[worst_index]:\n                self.harmony_memory[worst_index] = new_harmony\n                self.harmony_memory_values[worst_index] = new_value\n\n            self._dynamic_adjustments(evaluations)\n\n        return self.harmony_memory[np.argmin(self.harmony_memory_values)]\n\n    def _create_new_harmony(self):\n        harmony = np.where(np.random.rand(self.dim) < self.harmony_memory_rate,\n                           self.harmony_memory[np.random.randint(self.harmony_memory_size), :],\n                           np.random.uniform(self.lower_bound, self.upper_bound, self.dim))\n        adjust = np.random.rand(self.dim) < self.pitch_adjustment_rate\n        harmony[adjust] += self.bandwidth * (2 * np.random.rand(np.sum(adjust)) - 1)\n        return harmony\n\n    def _dynamic_adjustments(self, evaluations):\n        progress = evaluations / self.budget\n        self.harmony_memory_rate = 0.85 + 0.1 * np.cos(np.pi * progress)\n        self.bandwidth *= 0.95  # Gradual reduction", "name": "OptimizedHarmonySearch", "description": "Optimized Harmony Search with dynamic memory management and reduced computational overhead for enhanced convergence.", "configspace": "", "generation": 18, "fitness": 0.15135313998617794, "feedback": "The algorithm OptimizedHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.10.", "error": "", "parent_id": "db9a0abc-5e78-41ea-b88d-e0173e1c7b20", "metadata": {"aucs": [0.43274652235657873, 0.4879139599274338, 0.3986301150669409, 0.39777697495713693, 0.40681254962462043, 0.44606034062230615, 0.4305194064459168, 0.387747210444611, 0.4324541820153128, 0.0015200182401771123, 0.0015264600315584298, 9.999999999998899e-05, 9.999999999998899e-05, 0.004533865154655703, 0.17987478018815528, 0.0381579724053932, 9.999999999998899e-05, 9.999999999998899e-05, 0.25152128582965405, 0.16565874616714105, 0.19869758201192023, 0.15293857180309567, 0.2235354842186411, 0.15403961679783384, 0.1820653611023315, 0.21590709328724167, 0.1951154160024784, 0.19887498159644945, 0.14565990575531318, 0.16414704661217894, 0.16427158109215922, 0.1638675689832948, 0.15584233839479933, 0.14824642548397138, 0.16990412341571226, 0.1391601150212588, 0.22953671041294454, 0.21430586273503116, 0.22078839213626666, 0.2246695505396964, 0.19652251558314016, 0.19916355301302402, 0.2236239994527125, 0.19507854181944506, 0.20275456573413075, 0.1413224740095398, 0.16003835878691386, 0.12381801446926055, 0.14148873066931267, 0.18293108628844068, 0.2275316784718978, 0.14139298357464647, 0.1385351745673724, 0.1427857390692865, 0.17012732499589633, 0.15342615859689668, 0.13187769138337957, 0.14602081597389993, 0.13752092716873088, 0.26779569403708514, 0.14556683729607323, 0.16411311103073256, 0.17196636845095858, 0.1345631636260627, 0.13537088224273297, 0.1687820410617915, 0.15416261331883907, 0.11299994328280938, 0.144079768316433, 0.15461135126743397, 0.1399264869021345, 0.12668715953648757, 0.1131642585226107, 0.09297474476117074, 0.14021476883745077, 0.12853086524895896, 0.15594817372727343, 0.13260971410789646, 0.1270724425672517, 0.10747259903952477, 0.12416703090778447, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06263575381647135, 0.02397801271052924, 0.08809525741353186, 0.06645311352821814, 9.999999999998899e-05, 0.0028445793489100257, 0.10489912776345778, 0.03019581095697943, 0.025997296049543928, 9.999999999998899e-05, 0.005167616486862592, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002137673274026586, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10974589302022653, 0.0358142584543899, 0.12536663230449308, 0.040255148750769854, 0.028007626813110975, 0.12373947662720397, 0.07524434393207646, 0.07548748093042923, 0.05085202529537236, 0.315762447429763, 0.35709513276643867, 0.3020499457718414, 0.3222118210494529, 0.34296265525908765, 0.3427986947510675, 0.3362159487532673, 0.3150365697495391, 0.37196692162172085, 0.07202959295745182, 0.07029841139973692, 0.07691109782579819, 0.13046448131782307, 0.05635194959196543, 0.08385208024411872, 0.062200811544868895, 0.1065500901058769, 0.07313333109551057, 0.15796584233652833, 0.17277994749001135, 0.11899865617638405, 0.14599131540426202, 0.15137439983997103, 0.12403727467264603, 0.16784946569844428, 0.19090782019083852, 0.14267905189061025, 0.15235280733885392, 0.22330072736286988, 0.16760357822321947, 0.2926164444222964, 0.17984470456825186, 0.19374104296163275, 0.1454639206124635, 0.2117114071024102, 0.19051394623693008, 0.14561963966612912, 0.14498696181018045, 0.13150866375944803, 0.14502913783596338, 0.11372062733894617, 0.1652709133484377, 0.10509493255875235, 0.13953599059223798, 0.117456608098915, 0.18014149067592755, 0.1883807835891118, 0.18316615641927647, 0.1820521748090519, 0.1456347122037316, 0.17881156028826262, 0.1905975999151116, 0.17290823481229234, 0.2043364342756233, 0.22612842969090974, 0.19530001267878505, 0.21146451896173069, 0.19631940144261062, 0.20013325975644947, 0.1723820617123849, 0.22627688067689655, 0.19557380682171432, 0.20601837831379266, 0.19818591144512387, 0.14749507406735518, 0.31836469359027564, 0.39001785389259225, 0.19965922270142578, 0.09266939602382973, 0.15263583720297413, 0.12989236819477867, 0.19177285657994758, 0.18024583801355143, 0.20563315428093454, 0.19474414812187835, 0.16712974476436848, 0.18462121984556656, 0.2005351053603811, 0.12957966635427087, 0.10399437395006572, 0.16916897028330768, 0.18884597586441598, 0.1740313424209169, 0.18688505270281708, 0.17570883186081665, 0.19489790306306043, 0.18919374132559474, 0.2028937197351327, 0.19004316171503943, 0.1915837299060783, 0.07174004839335035, 0.06027542794812413, 0.06110645705356543, 0.0881310669591594, 0.06800290011584842, 0.05385287195457844, 0.07490334648445474, 0.055428113522388744, 0.07414980742560617]}, "mutation_prompt": null}
{"id": "52d19c97-ddc2-4a35-9006-81e1a27d48b2", "solution": "import numpy as np\n\nclass EnhancedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory_size = 15  # Reduced size for faster convergence\n        self.harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n        self.harmony_memory_values = np.full(self.harmony_memory_size, np.inf)\n        self.harmony_memory_rate = 0.85  # Modified rate for better exploration\n        self.pitch_adjustment_rate = 0.35  # Adjusted pitch rate for balance\n        self.bandwidth = 0.15  # Increased bandwidth for wider search space\n\n    def __call__(self, func):\n        evaluations = 0\n        for i in range(min(self.harmony_memory_size, self.budget)):\n            self.harmony_memory_values[i] = func(self.harmony_memory[i])\n            evaluations += 1\n\n        while evaluations < self.budget:\n            new_harmony = np.array([self._generate_harmony(i) for i in range(self.dim)])\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            new_value = func(new_harmony)\n            evaluations += 1\n\n            max_index = np.argmax(self.harmony_memory_values)\n            if new_value < self.harmony_memory_values[max_index]:\n                self.harmony_memory[max_index] = new_harmony\n                self.harmony_memory_values[max_index] = new_value\n\n            self._adaptive_adjustments(evaluations)\n\n        return self.harmony_memory[np.argmin(self.harmony_memory_values)]\n\n    def _generate_harmony(self, index):\n        if np.random.rand() < self.harmony_memory_rate:\n            harmony_value = self.harmony_memory[np.random.randint(self.harmony_memory_size), index]\n            if np.random.rand() < self.pitch_adjustment_rate:\n                harmony_value += self.bandwidth * (np.random.rand() - 0.5) * 2\n        else:\n            harmony_value = np.random.uniform(self.lower_bound, self.upper_bound)\n        return harmony_value\n\n    def _adaptive_adjustments(self, evaluations):\n        progress = evaluations / self.budget\n        self.harmony_memory_rate = 0.8 + 0.1 * np.cos(progress * np.pi)  # Dynamic adjustment\n        self.bandwidth = 0.15 * (1 - progress)  # Gradually reduce bandwidth", "name": "EnhancedHarmonySearch", "description": "Enhanced Harmony Search with adaptive bandwidth and memory updates for improved exploration and convergence efficiency.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "db9a0abc-5e78-41ea-b88d-e0173e1c7b20", "metadata": {"aucs": [0.6749461622910672, 0.7054590329831809, 0.6699082764887182, 0.634321984558862, 0.686497472587492, 0.6662471820520972, 0.6655067429419201, 0.6919750347534379, 0.691584369731106, 0.39215333675813513, 0.278655707182929, 0.31091414316050947, 0.23795607854077083, 0.2787614603633155, 0.28690375018686587, 0.3344675540014743, 0.38211280136023784, 0.3414501272456886, 0.17041165872600472, 0.2534350788291253, 0.160269521791772, 0.3318122492699006, 0.1839826189916598, 0.26854445479757905, 0.16954866473744967, 0.1917844863580812, 0.15306643695017086, 0.16994663753396966, 0.18115897861694252, 0.16900136965755597, 0.22703419446316953, 0.1976978928348182, 0.2643546117651763, 0.16140932050185475, 0.384509823821365, 0.2100774537751633, 0.9598297362242227, 0.9212835176205848, 0.9208382602840781, 0.9107245618407347, 0.9046809910386159, 0.941370847273956, 0.9308615488985799, 0.9115607693235016, 0.9591767966445308, 0.31952477492141473, 0.414589603959703, 0.3778040478431781, 0.4377266172238249, 0.3328240293162633, 0.4145534372044881, 0.3752192452628108, 0.3815004083748348, 0.40606113829362633, 0.16305492422653223, 0.16638579265978404, 0.13833931264330712, 0.21650402768959343, 0.20209834300431495, 0.19917165129003056, 0.16002606622622295, 0.24645946718746647, 0.1760283304816781, 0.1326217395475987, 0.1571369939597893, 0.21998172529333726, 0.1317200754982778, 0.2742316837375892, 0.3392042958357895, 0.16171735950310573, 0.19558566129296018, 0.16476110135361866, 0.1661476799839554, 0.19379099161422741, 0.1495233133803524, 0.1495795964428107, 0.14908303160758374, 0.15470611814039825, 0.15521532074204147, 0.16898270952884653, 0.17968943669898108, 9.999999999998899e-05, 9.999999999998899e-05, 0.02814441950171298, 0.00928204544537925, 0.0031534049514529983, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11989438244226125, 0.0207366680929556, 0.03705217880708789, 0.10204289004119638, 0.027967034150771175, 0.039285130291603854, 0.03102099717098028, 0.2391001825653749, 0.11894402119977587, 0.07207807055630455, 0.10515886374836869, 0.11712351927867948, 0.10549263689086241, 0.0912661146986844, 0.07366529489480778, 0.09776266776618436, 0.13782917513069193, 0.12512892873753023, 0.059581927038665716, 0.06492287158015153, 0.07015213999056191, 0.14802917107492397, 0.040925666588617626, 0.051582813637400804, 0.15941388899683084, 0.1032931221254979, 0.15367248353627871, 0.1975685483182792, 0.42910529891524096, 0.5204225722454006, 0.5204089744381899, 0.4897817969545768, 0.4910695322848905, 0.5040279167838337, 0.4624455023245222, 0.4475039624000374, 0.44984423839375653, 0.08932630799448249, 0.07633544827261907, 0.10660941940230573, 0.09012340948819197, 0.19003565493664654, 0.11038515669071125, 0.15828209420302297, 0.11229883337567426, 0.09428926669901627, 0.3859664501097687, 0.29330277362283286, 0.2571574094152669, 0.2737658955920099, 0.17271601783683166, 0.16150869804310442, 0.17753641003098763, 0.16279785901894306, 0.27228835864864387, 0.18336449493235119, 0.34871192404519946, 0.21720261875531077, 0.23072696083743205, 0.311834577624312, 0.2065898791722275, 0.2910509897175537, 0.24766311748943848, 0.2282008231057966, 0.22009199450237094, 0.17084774388201474, 0.1684484858997346, 0.26869882376004384, 0.18285724905828948, 0.17588390279025157, 0.1368178850574986, 0.12645363739412496, 0.12109396978627807, 0.22091852373913345, 0.2014765759192404, 0.2046610250744777, 0.1890225413863622, 0.18706168341557372, 0.20953892513743666, 0.2651983833960794, 0.22831452117444484, 0.21868910400348163, 0.19867921202134808, 0.20483920029196456, 0.19727152973153284, 0.21185476107191836, 0.2548302824597727, 0.2086285172057809, 0.22860261334102383, 0.2502894175534748, 0.21695481919743465, 0.17105784982735328, 0.18932093646635972, 0.8321570568915609, 0.6139102225626115, 0.9006237073635033, 0.20034729693620223, 0.16836107179562276, 0.16029467811637355, 0.7149477940096435, 0.35994630955652174, 0.16749744350858908, 0.12574958353562304, 0.21254162919062403, 0.21247975733717062, 0.20809549433275298, 0.10481862118920815, 0.10488179737428294, 0.10019736915337996, 0.1822585812365971, 0.1795519008402282, 0.1867780033555828, 0.17705352067340607, 0.1859648252288455, 0.19730590162747763, 0.19324249517538283, 0.18203160368318394, 0.18918374709184926, 0.09748145361778426, 0.09336846935464638, 0.10133238977807524, 0.08625327890326828, 0.0785951462074288, 0.11224843074607016, 0.09566538138350367, 0.07675515132383626, 0.0990168295702939]}, "mutation_prompt": null}
{"id": "4da29317-d180-48e5-9879-152abecb1d14", "solution": "import numpy as np\n\nclass StreamlinedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory_size = 10  # Reduced further for faster convergence\n        self.harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n        self.harmony_memory_values = np.apply_along_axis(func, 1, self.harmony_memory)\n        self.harmony_memory_rate = 0.9  # Increased for better exploration\n        self.pitch_adjustment_rate = 0.3  # Slightly reduced for balance\n        self.bandwidth = 0.2  # Adjusted for search space exploration\n\n    def __call__(self, func):\n        evaluations = self.harmony_memory_size\n        while evaluations < self.budget:\n            new_harmony = self._generate_new_harmony()\n            new_value = func(new_harmony)\n            evaluations += 1\n\n            if new_value < np.max(self.harmony_memory_values):\n                max_index = np.argmax(self.harmony_memory_values)\n                self.harmony_memory[max_index] = new_harmony\n                self.harmony_memory_values[max_index] = new_value\n\n            self._dynamic_parameters(evaluations)\n\n        return self.harmony_memory[np.argmin(self.harmony_memory_values)]\n\n    def _generate_new_harmony(self):\n        new_harmony = self.harmony_memory[np.random.choice(self.harmony_memory_size, self.dim)]\n        adjust_mask = np.random.rand(self.dim) < self.pitch_adjustment_rate\n        new_harmony[adjust_mask] += self.bandwidth * (np.random.rand(np.sum(adjust_mask)) - 0.5) * 2\n        return np.clip(new_harmony, self.lower_bound, self.upper_bound)\n\n    def _dynamic_parameters(self, evaluations):\n        progress = evaluations / self.budget\n        self.harmony_memory_rate = 0.85 + 0.05 * np.cos(progress * np.pi)  # Refined dynamic adjustment\n        self.bandwidth *= (1 - progress)  # Gradually reduce bandwidth", "name": "StreamlinedHarmonySearch", "description": "Streamlined Adaptive Harmony Search with optimized parameter tuning and enhanced convergence efficiency.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'func' is not defined\").", "error": "NameError(\"name 'func' is not defined\")", "parent_id": "db9a0abc-5e78-41ea-b88d-e0173e1c7b20", "metadata": {}, "mutation_prompt": null}
{"id": "875544a4-fdf3-4f28-bb93-dc40cdad727a", "solution": "import numpy as np\n\nclass EnhancedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory_size = 15  # Reduced size for faster convergence\n        self.harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n        self.harmony_memory_values = np.full(self.harmony_memory_size, np.inf)\n        self.harmony_memory_rate = 0.85  # Modified rate for better exploration\n        self.pitch_adjustment_rate = 0.35  # Adjusted pitch rate for balance\n        self.bandwidth = 0.15  # Increased bandwidth for wider search space\n\n    def __call__(self, func):\n        evaluations = 0\n        for i in range(min(self.harmony_memory_size, self.budget)):\n            self.harmony_memory_values[i] = func(self.harmony_memory[i])\n            evaluations += 1\n\n        while evaluations < self.budget:\n            new_harmony = np.array([self._generate_harmony(i) for i in range(self.dim)])\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            new_value = func(new_harmony)\n            evaluations += 1\n\n            max_index = np.argmax(self.harmony_memory_values)\n            if new_value < self.harmony_memory_values[max_index]:\n                self.harmony_memory[max_index] = new_harmony\n                self.harmony_memory_values[max_index] = new_value\n\n            self._adaptive_adjustments(evaluations)\n\n        return self.harmony_memory[np.argmin(self.harmony_memory_values)]\n\n    def _generate_harmony(self, index):\n        if np.random.rand() < self.harmony_memory_rate:\n            harmony_value = self.harmony_memory[np.random.randint(self.harmony_memory_size), index]\n            if np.random.rand() < self.pitch_adjustment_rate:\n                harmony_value += self.bandwidth * (np.random.rand() - 0.5) * 2\n        else:\n            harmony_value = np.random.uniform(self.lower_bound, self.upper_bound)\n        return harmony_value\n\n    def _adaptive_adjustments(self, evaluations):\n        progress = evaluations / self.budget\n        self.harmony_memory_rate = 0.8 + 0.1 * np.cos(progress * np.pi)  # Dynamic adjustment\n        self.bandwidth = 0.15 * (1 - progress)  # Gradually reduce bandwidth", "name": "EnhancedHarmonySearch", "description": "Enhanced Harmony Search with adaptive bandwidth and memory updates for improved exploration and convergence efficiency.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "db9a0abc-5e78-41ea-b88d-e0173e1c7b20", "metadata": {"aucs": [0.6749461622910672, 0.7054590329831809, 0.6699082764887182, 0.634321984558862, 0.686497472587492, 0.6662471820520972, 0.6655067429419201, 0.6919750347534379, 0.691584369731106, 0.39215333675813513, 0.278655707182929, 0.31091414316050947, 0.23795607854077083, 0.2787614603633155, 0.28690375018686587, 0.3344675540014743, 0.38211280136023784, 0.3414501272456886, 0.17041165872600472, 0.2534350788291253, 0.160269521791772, 0.3318122492699006, 0.1839826189916598, 0.26854445479757905, 0.16954866473744967, 0.1917844863580812, 0.15306643695017086, 0.16994663753396966, 0.18115897861694252, 0.16900136965755597, 0.22703419446316953, 0.1976978928348182, 0.2643546117651763, 0.16140932050185475, 0.384509823821365, 0.2100774537751633, 0.9598297362242227, 0.9212835176205848, 0.9208382602840781, 0.9107245618407347, 0.9046809910386159, 0.941370847273956, 0.9308615488985799, 0.9115607693235016, 0.9591767966445308, 0.31952477492141473, 0.414589603959703, 0.3778040478431781, 0.4377266172238249, 0.3328240293162633, 0.4145534372044881, 0.3752192452628108, 0.3815004083748348, 0.40606113829362633, 0.16305492422653223, 0.16638579265978404, 0.13833931264330712, 0.21650402768959343, 0.20209834300431495, 0.19917165129003056, 0.16002606622622295, 0.24645946718746647, 0.1760283304816781, 0.1326217395475987, 0.1571369939597893, 0.21998172529333726, 0.1317200754982778, 0.2742316837375892, 0.3392042958357895, 0.16171735950310573, 0.19558566129296018, 0.16476110135361866, 0.1661476799839554, 0.19379099161422741, 0.1495233133803524, 0.1495795964428107, 0.14908303160758374, 0.15470611814039825, 0.15521532074204147, 0.16898270952884653, 0.17968943669898108, 9.999999999998899e-05, 9.999999999998899e-05, 0.02814441950171298, 0.00928204544537925, 0.0031534049514529983, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11989438244226125, 0.0207366680929556, 0.03705217880708789, 0.10204289004119638, 0.027967034150771175, 0.039285130291603854, 0.03102099717098028, 0.2391001825653749, 0.11894402119977587, 0.07207807055630455, 0.10515886374836869, 0.11712351927867948, 0.10549263689086241, 0.0912661146986844, 0.07366529489480778, 0.09776266776618436, 0.13782917513069193, 0.12512892873753023, 0.059581927038665716, 0.06492287158015153, 0.07015213999056191, 0.14802917107492397, 0.040925666588617626, 0.051582813637400804, 0.15941388899683084, 0.1032931221254979, 0.15367248353627871, 0.1975685483182792, 0.42910529891524096, 0.5204225722454006, 0.5204089744381899, 0.4897817969545768, 0.4910695322848905, 0.5040279167838337, 0.4624455023245222, 0.4475039624000374, 0.44984423839375653, 0.08932630799448249, 0.07633544827261907, 0.10660941940230573, 0.09012340948819197, 0.19003565493664654, 0.11038515669071125, 0.15828209420302297, 0.11229883337567426, 0.09428926669901627, 0.3859664501097687, 0.29330277362283286, 0.2571574094152669, 0.2737658955920099, 0.17271601783683166, 0.16150869804310442, 0.17753641003098763, 0.16279785901894306, 0.27228835864864387, 0.18336449493235119, 0.34871192404519946, 0.21720261875531077, 0.23072696083743205, 0.311834577624312, 0.2065898791722275, 0.2910509897175537, 0.24766311748943848, 0.2282008231057966, 0.22009199450237094, 0.17084774388201474, 0.1684484858997346, 0.26869882376004384, 0.18285724905828948, 0.17588390279025157, 0.1368178850574986, 0.12645363739412496, 0.12109396978627807, 0.22091852373913345, 0.2014765759192404, 0.2046610250744777, 0.1890225413863622, 0.18706168341557372, 0.20953892513743666, 0.2651983833960794, 0.22831452117444484, 0.21868910400348163, 0.19867921202134808, 0.20483920029196456, 0.19727152973153284, 0.21185476107191836, 0.2548302824597727, 0.2086285172057809, 0.22860261334102383, 0.2502894175534748, 0.21695481919743465, 0.17105784982735328, 0.18932093646635972, 0.8321570568915609, 0.6139102225626115, 0.9006237073635033, 0.20034729693620223, 0.16836107179562276, 0.16029467811637355, 0.7149477940096435, 0.35994630955652174, 0.16749744350858908, 0.12574958353562304, 0.21254162919062403, 0.21247975733717062, 0.20809549433275298, 0.10481862118920815, 0.10488179737428294, 0.10019736915337996, 0.1822585812365971, 0.1795519008402282, 0.1867780033555828, 0.17705352067340607, 0.1859648252288455, 0.19730590162747763, 0.19324249517538283, 0.18203160368318394, 0.18918374709184926, 0.09748145361778426, 0.09336846935464638, 0.10133238977807524, 0.08625327890326828, 0.0785951462074288, 0.11224843074607016, 0.09566538138350367, 0.07675515132383626, 0.0990168295702939]}, "mutation_prompt": null}
{"id": "95151ba0-fa42-473b-be1c-71b21bf23b00", "solution": "import numpy as np\n\nclass OptimizedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory_size = 12  # Reduced size for faster operations\n        self.harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n        self.harmony_memory_values = np.array([np.inf] * self.harmony_memory_size)\n        self.harmony_memory_rate = 0.9  # Increased rate for better exploitation\n        self.pitch_adjustment_rate = 0.3  # Slightly lowered pitch rate\n        self.bandwidth = 0.2  # Wider initial bandwidth for early exploration\n\n    def __call__(self, func):\n        evaluations = 0\n        self.harmony_memory_values[:self.harmony_memory_size] = [func(harmony) for harmony in self.harmony_memory]\n        evaluations += self.harmony_memory_size\n\n        while evaluations < self.budget:\n            new_harmony = np.clip(self._create_new_harmony(), self.lower_bound, self.upper_bound)\n            new_value = func(new_harmony)\n            evaluations += 1\n\n            worst_idx = np.argmax(self.harmony_memory_values)\n            if new_value < self.harmony_memory_values[worst_idx]:\n                self.harmony_memory[worst_idx], self.harmony_memory_values[worst_idx] = new_harmony, new_value\n\n            self._update_parameters(evaluations)\n\n        return self.harmony_memory[np.argmin(self.harmony_memory_values)]\n\n    def _create_new_harmony(self):\n        return np.array([self._select_harmony_value(i) for i in range(self.dim)])\n\n    def _select_harmony_value(self, index):\n        if np.random.rand() < self.harmony_memory_rate:\n            value = self.harmony_memory[np.random.randint(self.harmony_memory_size), index]\n            if np.random.rand() < self.pitch_adjustment_rate:\n                value += self.bandwidth * (np.random.rand() * 2 - 1)\n        else:\n            value = np.random.uniform(self.lower_bound, self.upper_bound)\n        return value\n\n    def _update_parameters(self, evaluations):\n        progress = evaluations / self.budget\n        self.harmony_memory_rate = 0.85 + 0.1 * np.cos(progress * np.pi)\n        self.bandwidth = 0.2 * (1 - progress)  # Smooth reduction of bandwidth", "name": "OptimizedHarmonySearch", "description": "Optimized Harmony Search with streamlined memory updates and adaptive rates for efficient convergence.", "configspace": "", "generation": 22, "fitness": 0.24719596206172614, "feedback": "The algorithm OptimizedHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.21.", "error": "", "parent_id": "db9a0abc-5e78-41ea-b88d-e0173e1c7b20", "metadata": {"aucs": [0.7311959541619141, 0.7391930774518405, 0.6829530571459916, 0.7172962218495312, 0.707106200800788, 0.6973705382586188, 0.7020040385666038, 0.7154260373867939, 0.6807402756343865, 0.27829929414672394, 0.23648627349018148, 0.22722038892613283, 0.3599001954871919, 0.31411408744539593, 0.3447789284174352, 0.2774367599017138, 0.24299202924434438, 0.2722743980384156, 0.3173176564230825, 0.20963410329894028, 0.15238599540516895, 0.30351466092483914, 0.22339298582644707, 0.2117325344685208, 0.24681773777168836, 0.22916035751701103, 0.21476653039073246, 0.21205101990543973, 0.15891666368078605, 0.15257427198336648, 0.16400152337775675, 0.14068041462335767, 0.1464954331032421, 0.15905514115848796, 0.175111712113035, 0.19763411341595039, 0.9512709049909092, 0.9418679643015744, 0.955745087189982, 0.9313421295659688, 0.9359264221329832, 0.952577543494643, 0.9391877320363624, 0.9338045827980288, 0.9625151469965838, 0.3226498004183468, 0.36295920267824433, 0.3416337556908863, 0.4510729607056082, 0.39497379008628963, 0.37043706609552896, 0.35637136964115423, 0.3533096071715306, 0.40539042491849175, 0.15127118691064312, 0.1027850845105932, 0.10356762471342573, 0.22183182081706498, 0.24956861943012631, 0.17645221126445088, 0.13901008293363737, 0.15107876396129172, 0.21328270226389545, 0.14790207434380886, 0.15435618351776137, 0.1597656397235938, 0.17595964903438943, 0.1679643154527486, 0.16579902981658434, 0.18501713775079232, 0.1700693931630749, 0.1634898393394234, 0.12990428232009688, 0.19060264356907564, 0.14275399759542196, 0.13336036794763695, 0.10849248728822036, 0.1634011165924103, 0.19789076639915315, 0.18759298402829494, 0.1646777032872364, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014583593153527752, 9.999999999998899e-05, 0.03005926869426634, 0.11386941765836234, 0.041299209949944626, 0.20101432676716324, 0.06813946890374623, 0.0027638808390240133, 0.027240797452615872, 0.06651231546393666, 0.033971335859529384, 0.06479596362925077, 0.09689204041571609, 0.07908787888338598, 0.14278781139432517, 0.09497182977108909, 0.08962529273356523, 0.09306932319718741, 0.11138062606612531, 0.1253362384794876, 0.05660910786270701, 0.13483975805853787, 0.05777615809431058, 0.13729644060856516, 0.24662304363973642, 0.05351961525557558, 0.04336469929503162, 0.08338263607940699, 0.13415985903118677, 0.10244576266185945, 0.48785650108293543, 0.42098403045042043, 0.4426725038215006, 0.47078841982736985, 0.5186043383481376, 0.48247628189663716, 0.43436547876864784, 0.45367340239741083, 0.48490477473787486, 0.11152404506349234, 0.09330843211453665, 0.14675401610072336, 0.1634057134497241, 0.08040402569295546, 0.07860801508225557, 0.09720068453796726, 0.11169039847712614, 0.059674182811823795, 0.165972783972692, 0.15933873556591682, 0.18798973451854906, 0.17589420959011492, 0.29128453513850017, 0.19283843798966327, 0.169953295955371, 0.23827072548956274, 0.17125959365903198, 0.1516452000663856, 0.3850199785477555, 0.1670334838137989, 0.25062103334308494, 0.16943275583934558, 0.23232110379773518, 0.22288908710965594, 0.21551160449084594, 0.18550442821683177, 0.23593296759023008, 0.2607463428387615, 0.11848601886716847, 0.19295039777982093, 0.17002123260985713, 0.19269772955285147, 0.3060572751705186, 0.125653860436296, 0.08317206368707253, 0.22820962974285708, 0.18760921104979056, 0.20584808624263606, 0.2273035924188611, 0.19062566476043963, 0.26882469188331626, 0.22720006187030362, 0.23247790484992925, 0.26240144865832116, 0.18628470758583848, 0.24742145384636183, 0.19726326289709506, 0.19075737111130442, 0.25789694129817, 0.186471106922401, 0.20282827351554744, 0.20888426597299792, 0.23372764342842434, 0.18700595261569453, 0.7886473482749778, 0.19656554949313643, 0.20180764409461105, 0.17793439961728363, 0.863605439049395, 0.21290806684105223, 0.15944403121132567, 0.1745143132846173, 0.4502424259616823, 0.16813490322899272, 0.21037604827090506, 0.16938774071980134, 0.5048580792321113, 0.21016692840104312, 0.10482457983053295, 0.15675171609922856, 0.09484453778113533, 0.1858380108327553, 0.19783223264205663, 0.18107392787109888, 0.19298762081946785, 0.17274670755910815, 0.18024161862775923, 0.18709528713169044, 0.1748888806941985, 0.18496804529711708, 0.08866640345182619, 0.08272264016732622, 0.06929266661397981, 0.1088689994480928, 0.11363758268268942, 0.10223190239124558, 0.0839170507898569, 0.0954330725728334, 0.08940476284967769]}, "mutation_prompt": null}
{"id": "2b6d59a5-6c2d-4809-b071-131f048a2b44", "solution": "import numpy as np\n\nclass EnhancedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory_size = 15  # Reduced size for faster convergence\n        self.harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n        self.harmony_memory_values = np.full(self.harmony_memory_size, np.inf)\n        self.harmony_memory_rate = 0.85  # Modified rate for better exploration\n        self.pitch_adjustment_rate = 0.35  # Adjusted pitch rate for balance\n        self.bandwidth = 0.15  # Increased bandwidth for wider search space\n\n    def __call__(self, func):\n        evaluations = 0\n        for i in range(min(self.harmony_memory_size, self.budget)):\n            self.harmony_memory_values[i] = func(self.harmony_memory[i])\n            evaluations += 1\n\n        while evaluations < self.budget:\n            new_harmony = np.array([self._generate_harmony(i) for i in range(self.dim)])\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            new_value = func(new_harmony)\n            evaluations += 1\n\n            max_index = np.argmax(self.harmony_memory_values)\n            if new_value < self.harmony_memory_values[max_index]:\n                self.harmony_memory[max_index] = new_harmony\n                self.harmony_memory_values[max_index] = new_value\n\n            self._adaptive_adjustments(evaluations)\n\n        return self.harmony_memory[np.argmin(self.harmony_memory_values)]\n\n    def _generate_harmony(self, index):\n        if np.random.rand() < self.harmony_memory_rate:\n            harmony_value = self.harmony_memory[np.random.randint(self.harmony_memory_size), index]\n            if np.random.rand() < self.pitch_adjustment_rate:\n                harmony_value += self.bandwidth * (np.random.rand() - 0.5) * 2\n        else:\n            harmony_value = np.random.uniform(self.lower_bound, self.upper_bound)\n        return harmony_value\n\n    def _adaptive_adjustments(self, evaluations):\n        progress = evaluations / self.budget\n        self.harmony_memory_rate = 0.8 + 0.1 * np.cos(progress * np.pi)  # Dynamic adjustment\n        self.bandwidth = 0.15 * (1 - progress)  # Gradually reduce bandwidth", "name": "EnhancedHarmonySearch", "description": "Enhanced Harmony Search with adaptive bandwidth and memory updates for improved exploration and convergence efficiency.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "db9a0abc-5e78-41ea-b88d-e0173e1c7b20", "metadata": {"aucs": [0.6749461622910672, 0.7054590329831809, 0.6699082764887182, 0.634321984558862, 0.686497472587492, 0.6662471820520972, 0.6655067429419201, 0.6919750347534379, 0.691584369731106, 0.39215333675813513, 0.278655707182929, 0.31091414316050947, 0.23795607854077083, 0.2787614603633155, 0.28690375018686587, 0.3344675540014743, 0.38211280136023784, 0.3414501272456886, 0.17041165872600472, 0.2534350788291253, 0.160269521791772, 0.3318122492699006, 0.1839826189916598, 0.26854445479757905, 0.16954866473744967, 0.1917844863580812, 0.15306643695017086, 0.16994663753396966, 0.18115897861694252, 0.16900136965755597, 0.22703419446316953, 0.1976978928348182, 0.2643546117651763, 0.16140932050185475, 0.384509823821365, 0.2100774537751633, 0.9598297362242227, 0.9212835176205848, 0.9208382602840781, 0.9107245618407347, 0.9046809910386159, 0.941370847273956, 0.9308615488985799, 0.9115607693235016, 0.9591767966445308, 0.31952477492141473, 0.414589603959703, 0.3778040478431781, 0.4377266172238249, 0.3328240293162633, 0.4145534372044881, 0.3752192452628108, 0.3815004083748348, 0.40606113829362633, 0.16305492422653223, 0.16638579265978404, 0.13833931264330712, 0.21650402768959343, 0.20209834300431495, 0.19917165129003056, 0.16002606622622295, 0.24645946718746647, 0.1760283304816781, 0.1326217395475987, 0.1571369939597893, 0.21998172529333726, 0.1317200754982778, 0.2742316837375892, 0.3392042958357895, 0.16171735950310573, 0.19558566129296018, 0.16476110135361866, 0.1661476799839554, 0.19379099161422741, 0.1495233133803524, 0.1495795964428107, 0.14908303160758374, 0.15470611814039825, 0.15521532074204147, 0.16898270952884653, 0.17968943669898108, 9.999999999998899e-05, 9.999999999998899e-05, 0.02814441950171298, 0.00928204544537925, 0.0031534049514529983, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11989438244226125, 0.0207366680929556, 0.03705217880708789, 0.10204289004119638, 0.027967034150771175, 0.039285130291603854, 0.03102099717098028, 0.2391001825653749, 0.11894402119977587, 0.07207807055630455, 0.10515886374836869, 0.11712351927867948, 0.10549263689086241, 0.0912661146986844, 0.07366529489480778, 0.09776266776618436, 0.13782917513069193, 0.12512892873753023, 0.059581927038665716, 0.06492287158015153, 0.07015213999056191, 0.14802917107492397, 0.040925666588617626, 0.051582813637400804, 0.15941388899683084, 0.1032931221254979, 0.15367248353627871, 0.1975685483182792, 0.42910529891524096, 0.5204225722454006, 0.5204089744381899, 0.4897817969545768, 0.4910695322848905, 0.5040279167838337, 0.4624455023245222, 0.4475039624000374, 0.44984423839375653, 0.08932630799448249, 0.07633544827261907, 0.10660941940230573, 0.09012340948819197, 0.19003565493664654, 0.11038515669071125, 0.15828209420302297, 0.11229883337567426, 0.09428926669901627, 0.3859664501097687, 0.29330277362283286, 0.2571574094152669, 0.2737658955920099, 0.17271601783683166, 0.16150869804310442, 0.17753641003098763, 0.16279785901894306, 0.27228835864864387, 0.18336449493235119, 0.34871192404519946, 0.21720261875531077, 0.23072696083743205, 0.311834577624312, 0.2065898791722275, 0.2910509897175537, 0.24766311748943848, 0.2282008231057966, 0.22009199450237094, 0.17084774388201474, 0.1684484858997346, 0.26869882376004384, 0.18285724905828948, 0.17588390279025157, 0.1368178850574986, 0.12645363739412496, 0.12109396978627807, 0.22091852373913345, 0.2014765759192404, 0.2046610250744777, 0.1890225413863622, 0.18706168341557372, 0.20953892513743666, 0.2651983833960794, 0.22831452117444484, 0.21868910400348163, 0.19867921202134808, 0.20483920029196456, 0.19727152973153284, 0.21185476107191836, 0.2548302824597727, 0.2086285172057809, 0.22860261334102383, 0.2502894175534748, 0.21695481919743465, 0.17105784982735328, 0.18932093646635972, 0.8321570568915609, 0.6139102225626115, 0.9006237073635033, 0.20034729693620223, 0.16836107179562276, 0.16029467811637355, 0.7149477940096435, 0.35994630955652174, 0.16749744350858908, 0.12574958353562304, 0.21254162919062403, 0.21247975733717062, 0.20809549433275298, 0.10481862118920815, 0.10488179737428294, 0.10019736915337996, 0.1822585812365971, 0.1795519008402282, 0.1867780033555828, 0.17705352067340607, 0.1859648252288455, 0.19730590162747763, 0.19324249517538283, 0.18203160368318394, 0.18918374709184926, 0.09748145361778426, 0.09336846935464638, 0.10133238977807524, 0.08625327890326828, 0.0785951462074288, 0.11224843074607016, 0.09566538138350367, 0.07675515132383626, 0.0990168295702939]}, "mutation_prompt": null}
{"id": "dd4f1b77-ee2a-40f9-be96-db46da9f9ca2", "solution": "import numpy as np\n\nclass EnhancedHarmonySearchVariant:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory_size = 12  # Smaller size for quicker iterations\n        self.harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n        self.harmony_memory_values = np.full(self.harmony_memory_size, np.inf)\n        self.harmony_memory_rate = 0.9  # Increased rate for intensified exploration\n        self.pitch_adjustment_rate = 0.4  # More frequent pitch adjustments\n        self.bandwidth_reduction = 0.05  # Gradually tightening search space\n\n    def __call__(self, func):\n        evaluations = 0\n        initial_evals = min(self.harmony_memory_size, self.budget)\n        for i in range(initial_evals):\n            self.harmony_memory_values[i] = func(self.harmony_memory[i])\n            evaluations += 1\n\n        while evaluations < self.budget:\n            new_harmony = self._generate_harmony()\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            new_value = func(new_harmony)\n            evaluations += 1\n\n            if new_value < np.max(self.harmony_memory_values):\n                max_index = np.argmax(self.harmony_memory_values)\n                self.harmony_memory[max_index] = new_harmony\n                self.harmony_memory_values[max_index] = new_value\n\n            self._dynamic_adjustments(evaluations)\n\n        return self.harmony_memory[np.argmin(self.harmony_memory_values)]\n\n    def _generate_harmony(self):\n        harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.harmony_memory_rate:\n                harmony[i] = self.harmony_memory[np.random.randint(self.harmony_memory_size), i]\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    harmony[i] += (np.random.rand() - 0.5) * 2 * self.bandwidth_reduction\n            else:\n                harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return harmony\n\n    def _dynamic_adjustments(self, evaluations):\n        progress_ratio = evaluations / self.budget\n        self.harmony_memory_rate = 0.85 + 0.05 * np.sin(progress_ratio * np.pi)  # Adaptive rate change\n        self.bandwidth_reduction = 0.1 * (1 - progress_ratio)  # Dynamic bandwidth reduction", "name": "EnhancedHarmonySearchVariant", "description": "Enhanced Harmony Search variant with dynamic bandwidth and stochastic pitch adjustment for improved convergence and computational efficiency.", "configspace": "", "generation": 24, "fitness": 0.27932440589020996, "feedback": "The algorithm EnhancedHarmonySearchVariant got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.22.", "error": "", "parent_id": "db9a0abc-5e78-41ea-b88d-e0173e1c7b20", "metadata": {"aucs": [0.6778341290362772, 0.7228597825549835, 0.719392930695485, 0.712556001047923, 0.6924056705030067, 0.700928746263275, 0.7094593370216071, 0.7283206776691072, 0.714018398519414, 0.34815339481912544, 0.353888950143183, 0.3375835224103927, 0.32676332469569436, 0.3797270250592909, 0.3480934308964937, 0.3616591137956442, 0.34694240397237375, 0.41947710953486284, 0.36036557716978446, 0.310062672611619, 0.1843356458645733, 0.33396932752189423, 0.42376390753833715, 0.28122743925518356, 0.18877786154438625, 0.38481812461678466, 0.23339088239793582, 0.31206268856346975, 0.3105670899034213, 0.18936399855805186, 0.2814128688252717, 0.1856622915570033, 0.3642124127453106, 0.22514326367386983, 0.2585180954922508, 0.18122794626287497, 0.9139370923109221, 0.9262910909977128, 0.93555323319845, 0.9427414072094866, 0.9273357442786317, 0.9328905197608409, 0.9267564523191643, 0.9539017788672983, 0.9223678562953935, 0.3839611093319574, 0.36245401115436926, 0.3827665896554068, 0.42396405810491467, 0.414913445505508, 0.4269842351972648, 0.39512500833012476, 0.38208754291249336, 0.4514720926742809, 0.1690174112499555, 0.19212288669104782, 0.11573090231132499, 0.2741291129624893, 0.2001096974707094, 0.16014096229584196, 0.17764682250070418, 0.32004746002826223, 0.16782727911880246, 0.16967338983422253, 0.16355543014690976, 0.21331575616274545, 0.2492153373613799, 0.14157929838887917, 0.2125892085319414, 0.24551507157625363, 0.1821992946753379, 0.31674893364563705, 0.1751198229728569, 0.13024196174438663, 0.1666158940554311, 0.13295880787260517, 0.2535437184622148, 0.19186031586903485, 0.20572529310932441, 0.13103975626691322, 0.16872870279461427, 9.999999999998899e-05, 0.00016739582081259918, 9.999999999998899e-05, 9.999999999998899e-05, 0.06086605752895469, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00012838158397621147, 0.04761083833730628, 0.03439856503364336, 0.1719807537007999, 0.0544196565384778, 0.004202405590163161, 0.040227596372862884, 0.09815599943486542, 0.09120651938195001, 0.10700905732041699, 0.12386481128344673, 0.07085908857513623, 0.2467147861321467, 0.09022843498189936, 0.06931308342330122, 0.10938618791938093, 0.1046092589327614, 0.20694473419145187, 0.12585297691100972, 0.16314015864336218, 0.18116225517183182, 0.12691848756689106, 0.19521882260616097, 0.14089268439748825, 0.08656239731270432, 0.19732058626874893, 0.15937334032496042, 0.10244175855079973, 0.4721818879882216, 0.5443828569928555, 0.4940934749897339, 0.49462728989129345, 0.47363163810537723, 0.5018801896656073, 0.4825970270746113, 0.4777831228756395, 0.48536564782093294, 0.1471968020299037, 0.11383808586293998, 0.0856748840128928, 0.14742348777700331, 0.09377736925193769, 0.11969058134072197, 0.08145830211062455, 0.07808717928584008, 0.16119011756749713, 0.4193235624963201, 0.24150318887433986, 0.1926427160771964, 0.2452190705413413, 0.3639955258385176, 0.2063100746962756, 0.24608466211097635, 0.16720997036997798, 0.24475805498647574, 0.24332372616465148, 0.2389444249812307, 0.1894662647529055, 0.32024193952784386, 0.2605295356413412, 0.3085245375863255, 0.3689936861633436, 0.2801214250907995, 0.15603222398565852, 0.1416091651876492, 0.2194834562361062, 0.1801878267489948, 0.26969292805426703, 0.2096790712825629, 0.2427843448250424, 0.20942949801749133, 0.19333275456965593, 0.13806482970531675, 0.2562677544892211, 0.20643323152260395, 0.22957951443561042, 0.20230493476944023, 0.23365230903416012, 0.2152744388273341, 0.23906164752142467, 0.20498901242926693, 0.21349197832042843, 0.1983348690365755, 0.22909062648901446, 0.23177560635110883, 0.21325258092195865, 0.22943114914523322, 0.2524260948674778, 0.20250852459820945, 0.560921093821676, 0.18785589222748333, 0.16003239870883967, 0.1643556430777371, 0.15352616164538646, 0.9089461426171245, 0.9093604690819658, 0.8688067516961634, 0.783058884826201, 0.15826771039486665, 0.16673033928036007, 0.3922924766932203, 0.16930098873680277, 0.5218966446545958, 0.19276285084469458, 0.21025523064361773, 0.20882660056382296, 0.1689254898496514, 0.15688892523363396, 0.10520787959986522, 0.22273277836144456, 0.18644326737547912, 0.19101737164243682, 0.21172861475161664, 0.18291463080490744, 0.1847216417878339, 0.19444649542454495, 0.19638676572014147, 0.20052627182897764, 0.10568502497996202, 0.10021136745689618, 0.07822972750337498, 0.09860594040506254, 0.08772184936034333, 0.1136390411234679, 0.0906706187146703, 0.08566695596416285, 0.0910371341850883]}, "mutation_prompt": null}
{"id": "4c4574f6-da1f-4fe7-a76f-715883b91c74", "solution": "import numpy as np\n\nclass EnhancedHarmonySearchVariant:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory_size = 12  # Smaller size for quicker iterations\n        self.harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n        self.harmony_memory_values = np.full(self.harmony_memory_size, np.inf)\n        self.harmony_memory_rate = 0.9  # Increased rate for intensified exploration\n        self.pitch_adjustment_rate = 0.4  # More frequent pitch adjustments\n        self.bandwidth_reduction = 0.05  # Gradually tightening search space\n\n    def __call__(self, func):\n        evaluations = 0\n        initial_evals = min(self.harmony_memory_size, self.budget)\n        for i in range(initial_evals):\n            self.harmony_memory_values[i] = func(self.harmony_memory[i])\n            evaluations += 1\n\n        while evaluations < self.budget:\n            new_harmony = self._generate_harmony()\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            new_value = func(new_harmony)\n            evaluations += 1\n\n            if new_value < np.max(self.harmony_memory_values):\n                max_index = np.argmax(self.harmony_memory_values)\n                self.harmony_memory[max_index] = new_harmony\n                self.harmony_memory_values[max_index] = new_value\n\n            self._dynamic_adjustments(evaluations)\n\n        return self.harmony_memory[np.argmin(self.harmony_memory_values)]\n\n    def _generate_harmony(self):\n        harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.harmony_memory_rate:\n                harmony[i] = self.harmony_memory[np.random.randint(self.harmony_memory_size), i]\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    harmony[i] += (np.random.rand() - 0.5) * 2 * self.bandwidth_reduction\n            else:\n                harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return harmony\n\n    def _dynamic_adjustments(self, evaluations):\n        progress_ratio = evaluations / self.budget\n        self.harmony_memory_rate = 0.85 + 0.05 * np.sin(progress_ratio * np.pi)  # Adaptive rate change\n        self.bandwidth_reduction = 0.1 * (1 - progress_ratio)  # Dynamic bandwidth reduction", "name": "EnhancedHarmonySearchVariant", "description": "Enhanced Harmony Search variant with dynamic bandwidth and stochastic pitch adjustment for improved convergence and computational efficiency.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dd4f1b77-ee2a-40f9-be96-db46da9f9ca2", "metadata": {"aucs": [0.6778341290362772, 0.7228597825549835, 0.719392930695485, 0.712556001047923, 0.6924056705030067, 0.700928746263275, 0.7094593370216071, 0.7283206776691072, 0.714018398519414, 0.34815339481912544, 0.353888950143183, 0.3375835224103927, 0.32676332469569436, 0.3797270250592909, 0.3480934308964937, 0.3616591137956442, 0.34694240397237375, 0.41947710953486284, 0.36036557716978446, 0.310062672611619, 0.1843356458645733, 0.33396932752189423, 0.42376390753833715, 0.28122743925518356, 0.18877786154438625, 0.38481812461678466, 0.23339088239793582, 0.31206268856346975, 0.3105670899034213, 0.18936399855805186, 0.2814128688252717, 0.1856622915570033, 0.3642124127453106, 0.22514326367386983, 0.2585180954922508, 0.18122794626287497, 0.9139370923109221, 0.9262910909977128, 0.93555323319845, 0.9427414072094866, 0.9273357442786317, 0.9328905197608409, 0.9267564523191643, 0.9539017788672983, 0.9223678562953935, 0.3839611093319574, 0.36245401115436926, 0.3827665896554068, 0.42396405810491467, 0.414913445505508, 0.4269842351972648, 0.39512500833012476, 0.38208754291249336, 0.4514720926742809, 0.1690174112499555, 0.19212288669104782, 0.11573090231132499, 0.2741291129624893, 0.2001096974707094, 0.16014096229584196, 0.17764682250070418, 0.32004746002826223, 0.16782727911880246, 0.16967338983422253, 0.16355543014690976, 0.21331575616274545, 0.2492153373613799, 0.14157929838887917, 0.2125892085319414, 0.24551507157625363, 0.1821992946753379, 0.31674893364563705, 0.1751198229728569, 0.13024196174438663, 0.1666158940554311, 0.13295880787260517, 0.2535437184622148, 0.19186031586903485, 0.20572529310932441, 0.13103975626691322, 0.16872870279461427, 9.999999999998899e-05, 0.00016739582081259918, 9.999999999998899e-05, 9.999999999998899e-05, 0.06086605752895469, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00012838158397621147, 0.04761083833730628, 0.03439856503364336, 0.1719807537007999, 0.0544196565384778, 0.004202405590163161, 0.040227596372862884, 0.09815599943486542, 0.09120651938195001, 0.10700905732041699, 0.12386481128344673, 0.07085908857513623, 0.2467147861321467, 0.09022843498189936, 0.06931308342330122, 0.10938618791938093, 0.1046092589327614, 0.20694473419145187, 0.12585297691100972, 0.16314015864336218, 0.18116225517183182, 0.12691848756689106, 0.19521882260616097, 0.14089268439748825, 0.08656239731270432, 0.19732058626874893, 0.15937334032496042, 0.10244175855079973, 0.4721818879882216, 0.5443828569928555, 0.4940934749897339, 0.49462728989129345, 0.47363163810537723, 0.5018801896656073, 0.4825970270746113, 0.4777831228756395, 0.48536564782093294, 0.1471968020299037, 0.11383808586293998, 0.0856748840128928, 0.14742348777700331, 0.09377736925193769, 0.11969058134072197, 0.08145830211062455, 0.07808717928584008, 0.16119011756749713, 0.4193235624963201, 0.24150318887433986, 0.1926427160771964, 0.2452190705413413, 0.3639955258385176, 0.2063100746962756, 0.24608466211097635, 0.16720997036997798, 0.24475805498647574, 0.24332372616465148, 0.2389444249812307, 0.1894662647529055, 0.32024193952784386, 0.2605295356413412, 0.3085245375863255, 0.3689936861633436, 0.2801214250907995, 0.15603222398565852, 0.1416091651876492, 0.2194834562361062, 0.1801878267489948, 0.26969292805426703, 0.2096790712825629, 0.2427843448250424, 0.20942949801749133, 0.19333275456965593, 0.13806482970531675, 0.2562677544892211, 0.20643323152260395, 0.22957951443561042, 0.20230493476944023, 0.23365230903416012, 0.2152744388273341, 0.23906164752142467, 0.20498901242926693, 0.21349197832042843, 0.1983348690365755, 0.22909062648901446, 0.23177560635110883, 0.21325258092195865, 0.22943114914523322, 0.2524260948674778, 0.20250852459820945, 0.560921093821676, 0.18785589222748333, 0.16003239870883967, 0.1643556430777371, 0.15352616164538646, 0.9089461426171245, 0.9093604690819658, 0.8688067516961634, 0.783058884826201, 0.15826771039486665, 0.16673033928036007, 0.3922924766932203, 0.16930098873680277, 0.5218966446545958, 0.19276285084469458, 0.21025523064361773, 0.20882660056382296, 0.1689254898496514, 0.15688892523363396, 0.10520787959986522, 0.22273277836144456, 0.18644326737547912, 0.19101737164243682, 0.21172861475161664, 0.18291463080490744, 0.1847216417878339, 0.19444649542454495, 0.19638676572014147, 0.20052627182897764, 0.10568502497996202, 0.10021136745689618, 0.07822972750337498, 0.09860594040506254, 0.08772184936034333, 0.1136390411234679, 0.0906706187146703, 0.08566695596416285, 0.0910371341850883]}, "mutation_prompt": null}
{"id": "227176aa-3410-4503-9429-e75cc33e432d", "solution": "import numpy as np\n\nclass EnhancedHarmonySearchVariant:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory_size = 12  # Smaller size for quicker iterations\n        self.harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n        self.harmony_memory_values = np.full(self.harmony_memory_size, np.inf)\n        self.harmony_memory_rate = 0.9  # Increased rate for intensified exploration\n        self.pitch_adjustment_rate = 0.4  # More frequent pitch adjustments\n        self.bandwidth_reduction = 0.05  # Gradually tightening search space\n\n    def __call__(self, func):\n        evaluations = 0\n        initial_evals = min(self.harmony_memory_size, self.budget)\n        for i in range(initial_evals):\n            self.harmony_memory_values[i] = func(self.harmony_memory[i])\n            evaluations += 1\n\n        while evaluations < self.budget:\n            new_harmony = self._generate_harmony()\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            new_value = func(new_harmony)\n            evaluations += 1\n\n            if new_value < np.max(self.harmony_memory_values):\n                max_index = np.argmax(self.harmony_memory_values)\n                self.harmony_memory[max_index] = new_harmony\n                self.harmony_memory_values[max_index] = new_value\n\n            self._dynamic_adjustments(evaluations)\n\n        return self.harmony_memory[np.argmin(self.harmony_memory_values)]\n\n    def _generate_harmony(self):\n        harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.harmony_memory_rate:\n                harmony[i] = self.harmony_memory[np.random.randint(self.harmony_memory_size), i]\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    harmony[i] += (np.random.rand() - 0.5) * 2 * self.bandwidth_reduction\n            else:\n                harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return harmony\n\n    def _dynamic_adjustments(self, evaluations):\n        progress_ratio = evaluations / self.budget\n        self.harmony_memory_rate = 0.85 + 0.05 * np.sin(progress_ratio * np.pi)  # Adaptive rate change\n        self.bandwidth_reduction = 0.1 * (1 - progress_ratio)  # Dynamic bandwidth reduction", "name": "EnhancedHarmonySearchVariant", "description": "Enhanced Harmony Search variant with dynamic bandwidth and stochastic pitch adjustment for improved convergence and computational efficiency.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dd4f1b77-ee2a-40f9-be96-db46da9f9ca2", "metadata": {"aucs": [0.6778341290362772, 0.7228597825549835, 0.719392930695485, 0.712556001047923, 0.6924056705030067, 0.700928746263275, 0.7094593370216071, 0.7283206776691072, 0.714018398519414, 0.34815339481912544, 0.353888950143183, 0.3375835224103927, 0.32676332469569436, 0.3797270250592909, 0.3480934308964937, 0.3616591137956442, 0.34694240397237375, 0.41947710953486284, 0.36036557716978446, 0.310062672611619, 0.1843356458645733, 0.33396932752189423, 0.42376390753833715, 0.28122743925518356, 0.18877786154438625, 0.38481812461678466, 0.23339088239793582, 0.31206268856346975, 0.3105670899034213, 0.18936399855805186, 0.2814128688252717, 0.1856622915570033, 0.3642124127453106, 0.22514326367386983, 0.2585180954922508, 0.18122794626287497, 0.9139370923109221, 0.9262910909977128, 0.93555323319845, 0.9427414072094866, 0.9273357442786317, 0.9328905197608409, 0.9267564523191643, 0.9539017788672983, 0.9223678562953935, 0.3839611093319574, 0.36245401115436926, 0.3827665896554068, 0.42396405810491467, 0.414913445505508, 0.4269842351972648, 0.39512500833012476, 0.38208754291249336, 0.4514720926742809, 0.1690174112499555, 0.19212288669104782, 0.11573090231132499, 0.2741291129624893, 0.2001096974707094, 0.16014096229584196, 0.17764682250070418, 0.32004746002826223, 0.16782727911880246, 0.16967338983422253, 0.16355543014690976, 0.21331575616274545, 0.2492153373613799, 0.14157929838887917, 0.2125892085319414, 0.24551507157625363, 0.1821992946753379, 0.31674893364563705, 0.1751198229728569, 0.13024196174438663, 0.1666158940554311, 0.13295880787260517, 0.2535437184622148, 0.19186031586903485, 0.20572529310932441, 0.13103975626691322, 0.16872870279461427, 9.999999999998899e-05, 0.00016739582081259918, 9.999999999998899e-05, 9.999999999998899e-05, 0.06086605752895469, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00012838158397621147, 0.04761083833730628, 0.03439856503364336, 0.1719807537007999, 0.0544196565384778, 0.004202405590163161, 0.040227596372862884, 0.09815599943486542, 0.09120651938195001, 0.10700905732041699, 0.12386481128344673, 0.07085908857513623, 0.2467147861321467, 0.09022843498189936, 0.06931308342330122, 0.10938618791938093, 0.1046092589327614, 0.20694473419145187, 0.12585297691100972, 0.16314015864336218, 0.18116225517183182, 0.12691848756689106, 0.19521882260616097, 0.14089268439748825, 0.08656239731270432, 0.19732058626874893, 0.15937334032496042, 0.10244175855079973, 0.4721818879882216, 0.5443828569928555, 0.4940934749897339, 0.49462728989129345, 0.47363163810537723, 0.5018801896656073, 0.4825970270746113, 0.4777831228756395, 0.48536564782093294, 0.1471968020299037, 0.11383808586293998, 0.0856748840128928, 0.14742348777700331, 0.09377736925193769, 0.11969058134072197, 0.08145830211062455, 0.07808717928584008, 0.16119011756749713, 0.4193235624963201, 0.24150318887433986, 0.1926427160771964, 0.2452190705413413, 0.3639955258385176, 0.2063100746962756, 0.24608466211097635, 0.16720997036997798, 0.24475805498647574, 0.24332372616465148, 0.2389444249812307, 0.1894662647529055, 0.32024193952784386, 0.2605295356413412, 0.3085245375863255, 0.3689936861633436, 0.2801214250907995, 0.15603222398565852, 0.1416091651876492, 0.2194834562361062, 0.1801878267489948, 0.26969292805426703, 0.2096790712825629, 0.2427843448250424, 0.20942949801749133, 0.19333275456965593, 0.13806482970531675, 0.2562677544892211, 0.20643323152260395, 0.22957951443561042, 0.20230493476944023, 0.23365230903416012, 0.2152744388273341, 0.23906164752142467, 0.20498901242926693, 0.21349197832042843, 0.1983348690365755, 0.22909062648901446, 0.23177560635110883, 0.21325258092195865, 0.22943114914523322, 0.2524260948674778, 0.20250852459820945, 0.560921093821676, 0.18785589222748333, 0.16003239870883967, 0.1643556430777371, 0.15352616164538646, 0.9089461426171245, 0.9093604690819658, 0.8688067516961634, 0.783058884826201, 0.15826771039486665, 0.16673033928036007, 0.3922924766932203, 0.16930098873680277, 0.5218966446545958, 0.19276285084469458, 0.21025523064361773, 0.20882660056382296, 0.1689254898496514, 0.15688892523363396, 0.10520787959986522, 0.22273277836144456, 0.18644326737547912, 0.19101737164243682, 0.21172861475161664, 0.18291463080490744, 0.1847216417878339, 0.19444649542454495, 0.19638676572014147, 0.20052627182897764, 0.10568502497996202, 0.10021136745689618, 0.07822972750337498, 0.09860594040506254, 0.08772184936034333, 0.1136390411234679, 0.0906706187146703, 0.08566695596416285, 0.0910371341850883]}, "mutation_prompt": null}
{"id": "9cd387f3-b088-482b-9ba8-d18d389b8ae3", "solution": "import numpy as np\n\nclass OptimizedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory_size = 10  # Reduced size for faster adaptation\n        self.harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n        self.harmony_memory_values = np.inf * np.ones(self.harmony_memory_size)\n        self.harmony_memory_rate = 0.85  # Adjusted rate for balanced exploration\n        self.pitch_adjustment_rate = 0.3  # Less frequent pitch adjustments\n        self.bandwidth_reduction = 0.08  # Moderate tightening for controlled search space\n\n    def __call__(self, func):\n        evaluations = 0\n        for i in range(self.harmony_memory_size):\n            if evaluations < self.budget:\n                self.harmony_memory_values[i] = func(self.harmony_memory[i])\n                evaluations += 1\n\n        while evaluations < self.budget:\n            new_harmony = self._generate_harmony()\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            new_value = func(new_harmony)\n            evaluations += 1\n\n            max_index = np.argmax(self.harmony_memory_values)\n            if new_value < self.harmony_memory_values[max_index]:\n                self.harmony_memory[max_index] = new_harmony\n                self.harmony_memory_values[max_index] = new_value\n\n            self._dynamic_adjustments(evaluations)\n\n        return self.harmony_memory[np.argmin(self.harmony_memory_values)]\n\n    def _generate_harmony(self):\n        harmony = np.empty(self.dim)\n        draw = np.random.rand(self.dim)\n        pitch = np.random.rand(self.dim) < self.pitch_adjustment_rate\n        memory_indices = np.random.randint(self.harmony_memory_size, size=self.dim)\n        random_values = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        harmony = np.where(draw < self.harmony_memory_rate, \n                           self.harmony_memory[memory_indices, np.arange(self.dim)], \n                           random_values)\n        harmony += np.where(pitch, (np.random.rand(self.dim) - 0.5) * 2 * self.bandwidth_reduction, 0)\n        return harmony\n\n    def _dynamic_adjustments(self, evaluations):\n        progress_ratio = evaluations / self.budget\n        self.harmony_memory_rate = 0.8 + 0.1 * np.cos(progress_ratio * np.pi / 2)  # Periodic rate adjustment\n        self.bandwidth_reduction = 0.08 * (1 - progress_ratio)  # Linearly decreasing bandwidth", "name": "OptimizedHarmonySearch", "description": "Optimized Harmony Search with adaptive memory strategies and streamlined computations for enhanced efficiency and convergence.", "configspace": "", "generation": 27, "fitness": 0.27882751467422445, "feedback": "The algorithm OptimizedHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.23.", "error": "", "parent_id": "dd4f1b77-ee2a-40f9-be96-db46da9f9ca2", "metadata": {"aucs": [0.7899897495094272, 0.7547133157522998, 0.7721546805876851, 0.7755517854708868, 0.8376290468672261, 0.7816802107594876, 0.7847372449823673, 0.7829588632283133, 0.7774337053724327, 0.3281370203390157, 0.39949781336561585, 0.46377751934454337, 0.3281130892279942, 0.4199346476556385, 0.36571939681960597, 0.3882371686901226, 0.32611653088845716, 0.38177540839897084, 0.2067206420154526, 0.3389346763486908, 0.30070048407437777, 0.37073636505414165, 0.32527089800299414, 0.44628850962682076, 0.3169114839052989, 0.36302785490570244, 0.29994438214070285, 0.13338901674201664, 0.3321746181895082, 0.18039890992896013, 0.2197375016171884, 0.3683633477960747, 0.39978022783417744, 0.2734303051138217, 0.35625914046385676, 0.22781418409493903, 0.9320626294925559, 0.8991590924941667, 0.9198884318919015, 0.9422791858894739, 0.9397355784585073, 0.9092862425344793, 0.9202949544591146, 0.9476872981845773, 0.9340692280972548, 0.43333548512049047, 0.36799098687053, 0.4498140096746659, 0.3812679997513746, 0.41504754969184865, 0.45846013509017125, 0.3993323533801685, 0.34117430354366485, 0.3948065333769929, 0.22970593931569938, 0.14290010998721514, 0.20740317355843185, 0.19411690548663074, 0.36059708578683736, 0.16311530253746565, 0.15155417512203695, 0.12169791946599451, 0.14626173566061407, 0.1648009719862623, 0.18154096069990078, 0.43478714173291044, 0.32938094082654, 0.15952648745339082, 0.1703679728909987, 0.1669523073427145, 0.25166487145727123, 0.310827912278952, 0.21620221521593008, 0.11607087912963854, 0.18223798548376202, 0.1673949521267779, 0.15934454855688396, 0.17741371081098045, 0.188412906514009, 0.1395207641686751, 0.19611402239557973, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04493388002824816, 9.999999999998899e-05, 0.0400619625074925, 0.022676481875796295, 0.045467387737383014, 0.09073407652879972, 0.06551918858401862, 0.026839775724368686, 0.017140111110403256, 0.062127220495161395, 0.027247135513277843, 0.0869524540995873, 0.17206697187683317, 0.06178298969288665, 0.10759984561524738, 0.08687732085144362, 0.1643100011610843, 0.11946840590234864, 0.1302604094771166, 0.1477430061929914, 0.23038172116638922, 0.13830319611000919, 0.0885840680006722, 0.15805054673653518, 0.23676271581126507, 0.052430833685188194, 0.06650800198079343, 0.1765204448058737, 0.16537931806365247, 0.10802129561668994, 0.43877731687921573, 0.4703798237925627, 0.4965146623121932, 0.5174197333568241, 0.4819391426266567, 0.4596072552610836, 0.4695996992243966, 0.48603356697121536, 0.5044867580076136, 0.03448076090616592, 0.113521502688815, 0.07852756538347616, 0.1211352011970066, 0.1277282387589388, 0.09386570659622262, 0.05779195145397076, 0.10331029138022496, 0.12088715960972496, 0.2014139477119843, 0.16455227215756563, 0.21111953457861743, 0.12060268959229725, 0.1476179552747059, 0.1578482476597326, 0.15711089340903417, 0.20991609297336533, 0.13577882384090567, 0.19440430865423564, 0.2143525171134597, 0.23269466406778205, 0.21585399003031147, 0.20942808946780556, 0.32160857076391414, 0.25754295452811604, 0.17336659698135903, 0.28008049922118794, 0.1724840767397291, 0.13476924034697513, 0.1360254268969382, 0.2167309704210435, 0.1591255497469769, 0.10802689438160507, 0.1491554920888284, 0.14070277944034748, 0.09899821720836366, 0.18965942767532884, 0.21239226432422043, 0.20981197178187705, 0.24143856316933643, 0.24614355662858067, 0.22784721215447257, 0.2471103307026269, 0.20263915982087544, 0.20656108597855716, 0.1906413626435719, 0.21792207729673396, 0.2550422107544025, 0.19274032131714003, 0.20435205969894976, 0.19873136499858723, 0.5921345414133483, 0.1743767671633386, 0.5610373193840625, 0.7792167763855131, 0.8603130258781126, 0.18251352931610954, 0.8727388527512412, 0.16995097542658966, 0.8952773420759634, 0.16831031176845368, 0.15908928727520633, 0.1769225907967621, 0.3400595530871684, 0.16945734000585966, 0.3443733872395909, 0.13293040185306637, 0.37046937103611843, 0.2112262333787186, 0.16974250041846717, 0.37232013144406395, 0.33706042123319946, 0.20106994588118365, 0.20487603889829398, 0.20298144076729563, 0.1934665007301043, 0.18385625878913314, 0.20393775628365196, 0.2318075660465121, 0.22403582092288243, 0.19448607493463443, 0.05460238377972615, 0.114879324792308, 0.07664404205954434, 0.062418151633337415, 0.08088300706907481, 0.09927589603308062, 0.08079998389743903, 0.07598092884205176, 0.08577438023210815]}, "mutation_prompt": null}
{"id": "ec6936e9-30ed-4840-890e-84169bb3f420", "solution": "import numpy as np\n\nclass EnhancedHarmonySearchVariant:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory_size = 12  # Smaller size for quicker iterations\n        self.harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n        self.harmony_memory_values = np.full(self.harmony_memory_size, np.inf)\n        self.harmony_memory_rate = 0.9  # Increased rate for intensified exploration\n        self.pitch_adjustment_rate = 0.4  # More frequent pitch adjustments\n        self.bandwidth_reduction = 0.05  # Gradually tightening search space\n\n    def __call__(self, func):\n        evaluations = 0\n        initial_evals = min(self.harmony_memory_size, self.budget)\n        for i in range(initial_evals):\n            self.harmony_memory_values[i] = func(self.harmony_memory[i])\n            evaluations += 1\n\n        while evaluations < self.budget:\n            new_harmony = self._generate_harmony()\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            new_value = func(new_harmony)\n            evaluations += 1\n\n            if new_value < np.max(self.harmony_memory_values):\n                max_index = np.argmax(self.harmony_memory_values)\n                self.harmony_memory[max_index] = new_harmony\n                self.harmony_memory_values[max_index] = new_value\n\n            self._dynamic_adjustments(evaluations)\n\n        return self.harmony_memory[np.argmin(self.harmony_memory_values)]\n\n    def _generate_harmony(self):\n        harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.harmony_memory_rate:\n                harmony[i] = self.harmony_memory[np.random.randint(self.harmony_memory_size), i]\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    harmony[i] += (np.random.rand() - 0.5) * 2 * self.bandwidth_reduction\n            else:\n                harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return harmony\n\n    def _dynamic_adjustments(self, evaluations):\n        progress_ratio = evaluations / self.budget\n        self.harmony_memory_rate = 0.85 + 0.05 * np.sin(progress_ratio * np.pi)  # Adaptive rate change\n        self.bandwidth_reduction = 0.1 * (1 - progress_ratio)  # Dynamic bandwidth reduction", "name": "EnhancedHarmonySearchVariant", "description": "Enhanced Harmony Search variant with dynamic bandwidth and stochastic pitch adjustment for improved convergence and computational efficiency.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dd4f1b77-ee2a-40f9-be96-db46da9f9ca2", "metadata": {"aucs": [0.6778341290362772, 0.7228597825549835, 0.719392930695485, 0.712556001047923, 0.6924056705030067, 0.700928746263275, 0.7094593370216071, 0.7283206776691072, 0.714018398519414, 0.34815339481912544, 0.353888950143183, 0.3375835224103927, 0.32676332469569436, 0.3797270250592909, 0.3480934308964937, 0.3616591137956442, 0.34694240397237375, 0.41947710953486284, 0.36036557716978446, 0.310062672611619, 0.1843356458645733, 0.33396932752189423, 0.42376390753833715, 0.28122743925518356, 0.18877786154438625, 0.38481812461678466, 0.23339088239793582, 0.31206268856346975, 0.3105670899034213, 0.18936399855805186, 0.2814128688252717, 0.1856622915570033, 0.3642124127453106, 0.22514326367386983, 0.2585180954922508, 0.18122794626287497, 0.9139370923109221, 0.9262910909977128, 0.93555323319845, 0.9427414072094866, 0.9273357442786317, 0.9328905197608409, 0.9267564523191643, 0.9539017788672983, 0.9223678562953935, 0.3839611093319574, 0.36245401115436926, 0.3827665896554068, 0.42396405810491467, 0.414913445505508, 0.4269842351972648, 0.39512500833012476, 0.38208754291249336, 0.4514720926742809, 0.1690174112499555, 0.19212288669104782, 0.11573090231132499, 0.2741291129624893, 0.2001096974707094, 0.16014096229584196, 0.17764682250070418, 0.32004746002826223, 0.16782727911880246, 0.16967338983422253, 0.16355543014690976, 0.21331575616274545, 0.2492153373613799, 0.14157929838887917, 0.2125892085319414, 0.24551507157625363, 0.1821992946753379, 0.31674893364563705, 0.1751198229728569, 0.13024196174438663, 0.1666158940554311, 0.13295880787260517, 0.2535437184622148, 0.19186031586903485, 0.20572529310932441, 0.13103975626691322, 0.16872870279461427, 9.999999999998899e-05, 0.00016739582081259918, 9.999999999998899e-05, 9.999999999998899e-05, 0.06086605752895469, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00012838158397621147, 0.04761083833730628, 0.03439856503364336, 0.1719807537007999, 0.0544196565384778, 0.004202405590163161, 0.040227596372862884, 0.09815599943486542, 0.09120651938195001, 0.10700905732041699, 0.12386481128344673, 0.07085908857513623, 0.2467147861321467, 0.09022843498189936, 0.06931308342330122, 0.10938618791938093, 0.1046092589327614, 0.20694473419145187, 0.12585297691100972, 0.16314015864336218, 0.18116225517183182, 0.12691848756689106, 0.19521882260616097, 0.14089268439748825, 0.08656239731270432, 0.19732058626874893, 0.15937334032496042, 0.10244175855079973, 0.4721818879882216, 0.5443828569928555, 0.4940934749897339, 0.49462728989129345, 0.47363163810537723, 0.5018801896656073, 0.4825970270746113, 0.4777831228756395, 0.48536564782093294, 0.1471968020299037, 0.11383808586293998, 0.0856748840128928, 0.14742348777700331, 0.09377736925193769, 0.11969058134072197, 0.08145830211062455, 0.07808717928584008, 0.16119011756749713, 0.4193235624963201, 0.24150318887433986, 0.1926427160771964, 0.2452190705413413, 0.3639955258385176, 0.2063100746962756, 0.24608466211097635, 0.16720997036997798, 0.24475805498647574, 0.24332372616465148, 0.2389444249812307, 0.1894662647529055, 0.32024193952784386, 0.2605295356413412, 0.3085245375863255, 0.3689936861633436, 0.2801214250907995, 0.15603222398565852, 0.1416091651876492, 0.2194834562361062, 0.1801878267489948, 0.26969292805426703, 0.2096790712825629, 0.2427843448250424, 0.20942949801749133, 0.19333275456965593, 0.13806482970531675, 0.2562677544892211, 0.20643323152260395, 0.22957951443561042, 0.20230493476944023, 0.23365230903416012, 0.2152744388273341, 0.23906164752142467, 0.20498901242926693, 0.21349197832042843, 0.1983348690365755, 0.22909062648901446, 0.23177560635110883, 0.21325258092195865, 0.22943114914523322, 0.2524260948674778, 0.20250852459820945, 0.560921093821676, 0.18785589222748333, 0.16003239870883967, 0.1643556430777371, 0.15352616164538646, 0.9089461426171245, 0.9093604690819658, 0.8688067516961634, 0.783058884826201, 0.15826771039486665, 0.16673033928036007, 0.3922924766932203, 0.16930098873680277, 0.5218966446545958, 0.19276285084469458, 0.21025523064361773, 0.20882660056382296, 0.1689254898496514, 0.15688892523363396, 0.10520787959986522, 0.22273277836144456, 0.18644326737547912, 0.19101737164243682, 0.21172861475161664, 0.18291463080490744, 0.1847216417878339, 0.19444649542454495, 0.19638676572014147, 0.20052627182897764, 0.10568502497996202, 0.10021136745689618, 0.07822972750337498, 0.09860594040506254, 0.08772184936034333, 0.1136390411234679, 0.0906706187146703, 0.08566695596416285, 0.0910371341850883]}, "mutation_prompt": null}
{"id": "6a0ae0c3-03e4-483a-bfcc-9d4aefb4974a", "solution": "import numpy as np\n\nclass ImprovedHarmonySearchVariant:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory_size = 10  # Reduced size for quicker convergence\n        self.harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n        self.harmony_memory_values = np.full(self.harmony_memory_size, np.inf)\n        self.harmony_memory_rate = 0.85  # Improved balance of exploration and exploitation\n        self.pitch_adjustment_rate = 0.35  # Adjusted for better fine-tuning\n        self.bandwidth = 0.1  # Static bandwidth for simplicity\n\n    def __call__(self, func):\n        evaluations = 0\n        initial_evals = min(self.harmony_memory_size, self.budget)\n        for i in range(initial_evals):\n            self.harmony_memory_values[i] = func(self.harmony_memory[i])\n            evaluations += 1\n\n        while evaluations < self.budget:\n            new_harmony = self._generate_harmony()\n            new_value = func(new_harmony)\n            evaluations += 1\n\n            if new_value < np.max(self.harmony_memory_values):\n                max_index = np.argmax(self.harmony_memory_values)\n                self.harmony_memory[max_index] = new_harmony\n                self.harmony_memory_values[max_index] = new_value\n\n        return self.harmony_memory[np.argmin(self.harmony_memory_values)]\n\n    def _generate_harmony(self):\n        harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.harmony_memory_rate:\n                harmony[i] = self.harmony_memory[np.random.randint(self.harmony_memory_size), i]\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    harmony[i] += (np.random.rand() - 0.5) * self.bandwidth\n            else:\n                harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return np.clip(harmony, self.lower_bound, self.upper_bound)", "name": "ImprovedHarmonySearchVariant", "description": "Improved Harmony Search with simplified memory management and adaptive exploration-exploitation balance for enhanced performance.", "configspace": "", "generation": 29, "fitness": 0.27256320318648186, "feedback": "The algorithm ImprovedHarmonySearchVariant got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.22.", "error": "", "parent_id": "dd4f1b77-ee2a-40f9-be96-db46da9f9ca2", "metadata": {"aucs": [0.7483563361468091, 0.7256870825582699, 0.734777004874247, 0.7412269023348108, 0.7461540212888573, 0.7053273662740163, 0.6848207127544306, 0.7402197676757246, 0.7141371810914889, 0.3340701987589748, 0.342779846981193, 0.2576831478489825, 0.3238553795243443, 0.34040012214291804, 0.2765409154345375, 0.34241609715607024, 0.3588581790862032, 0.3374470027344365, 0.4376759701175027, 0.308185434337541, 0.3735217066919483, 0.5224357441068017, 0.3592867584818853, 0.34925466562136287, 0.4207279345138726, 0.27489590573085165, 0.18614718744885916, 0.17266435501364308, 0.2035469224152282, 0.3739450017710073, 0.28544776258961546, 0.169509114770516, 0.43795518314138926, 0.35843670470074673, 0.1896840463298598, 0.19529249968039564, 0.9408593830317474, 0.8669922579742433, 0.9150714486848417, 0.9317157037671359, 0.955762298314119, 0.9225084404519883, 0.8673652252295807, 0.9134674894222143, 0.8969724944285346, 0.33614595687405413, 0.37324489058203725, 0.3320810650478976, 0.3830861325044782, 0.32767282576228396, 0.5074189170280452, 0.3028083890587874, 0.3094435308932618, 0.33577700961922285, 0.2118370236728705, 0.10456765880071439, 0.15024979478089096, 0.19725754770010007, 0.2604091393331234, 0.1425719132526848, 0.14264239623508002, 0.13188752500525902, 0.22357076781353558, 0.25941902869271893, 0.15554687398193323, 0.2596275741363856, 0.34935901160482596, 0.16067716342985983, 0.2624810443669089, 0.28840453973313984, 0.24522889547573812, 0.18018082204171093, 0.16335924886441766, 0.2569307291405868, 0.10950841238405207, 0.16836825144132983, 0.17423621589992722, 0.19943476595698462, 0.19423319732224276, 0.18877315978637743, 0.15350742062477352, 9.999999999998899e-05, 0.013944897461458994, 0.011378167354797686, 9.999999999998899e-05, 0.0539948880779082, 9.999999999998899e-05, 0.010157174393379154, 0.01956835576318916, 0.06516630858682582, 0.06288007544396246, 0.04487716676419806, 0.05693185975815762, 0.051655472420645276, 0.013967967276118598, 0.062204451985498954, 0.10627460129604738, 0.10451008534624073, 0.0944066722798238, 0.09807399782494963, 0.14696379297321105, 0.16666064031726424, 0.0714016963774613, 0.17069815508000374, 0.21773744469856893, 0.0750877098845022, 0.1482323908275075, 0.10689342491043319, 0.11853018733678977, 0.1157831824133907, 0.15545155974023928, 0.0503457170628826, 0.038355012755549645, 0.08906879172369886, 0.12896182914463294, 0.1587373847381145, 0.09704047539287952, 0.4826043096580843, 0.4726528827461788, 0.4958958785116627, 0.46477227080494077, 0.45376323314362665, 0.5212307871417375, 0.48638728000263187, 0.48205736412529687, 0.4675978678021844, 0.06706725516369205, 0.10065994614705764, 0.05627361091572092, 0.1162543955279105, 0.08007606468641715, 0.14884143096340263, 0.0692043439607154, 0.0816166393330835, 0.11168446852862057, 0.169954186400608, 0.38127022975193237, 0.19902227953634788, 0.19591961651364276, 0.2275616902911819, 0.2011851169184714, 0.21058663885045015, 0.18563682509054846, 0.24602321573428432, 0.2274986754877898, 0.3208630112964137, 0.18054292567449226, 0.2353623685370545, 0.20146034487134257, 0.20114681653935051, 0.1589225109986795, 0.32461463535400215, 0.1899912518222644, 0.137279699472575, 0.15467214520546846, 0.12948540719679202, 0.22722823605652676, 0.23659520177048043, 0.24548787182889154, 0.14475239418481056, 0.13291497758499882, 0.1531853919877958, 0.22724012170274788, 0.21263752096031674, 0.19521923370105077, 0.26800714690305716, 0.24310212642041917, 0.28289286700902705, 0.2422930287425663, 0.22158989090172143, 0.22555071311178698, 0.19223198019795829, 0.21696467812282494, 0.2519278936929088, 0.20214114425662766, 0.22835594553513294, 0.1861634402909681, 0.22697646055585752, 0.2032145578286788, 0.224932802913555, 0.18904637747995934, 0.1653722527196756, 0.88453238610604, 0.6226326131033315, 0.9034329152640002, 0.7192766544215328, 0.8832286085967644, 0.152987057895288, 0.16328100271103663, 0.15421495468915414, 0.2120644740749983, 0.20079361575058696, 0.16915099864262306, 0.21142145454982741, 0.21250366673692644, 0.20881565431749427, 0.1637930005924798, 0.37919740671910174, 0.20349009362127712, 0.19245200615734248, 0.2118991313312376, 0.2239218295895432, 0.220461257603782, 0.1898990318182252, 0.2144633959824489, 0.20872284852702783, 0.22832530641692617, 0.08468302888636303, 0.09293970418553854, 0.07138560870989463, 0.08435358206253163, 0.08933782309658167, 0.13048138607269688, 0.08738029114199652, 0.08485291343021906, 0.07733702861594594]}, "mutation_prompt": null}
{"id": "3a378a23-bd8b-457d-8612-a8de4cce94bd", "solution": "import numpy as np\n\nclass EnhancedHarmonySearchVariant:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory_size = 12  # Smaller size for quicker iterations\n        self.harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n        self.harmony_memory_values = np.full(self.harmony_memory_size, np.inf)\n        self.harmony_memory_rate = 0.9  # Increased rate for intensified exploration\n        self.pitch_adjustment_rate = 0.4  # More frequent pitch adjustments\n        self.bandwidth_reduction = 0.05  # Gradually tightening search space\n\n    def __call__(self, func):\n        evaluations = 0\n        initial_evals = min(self.harmony_memory_size, self.budget)\n        for i in range(initial_evals):\n            self.harmony_memory_values[i] = func(self.harmony_memory[i])\n            evaluations += 1\n\n        while evaluations < self.budget:\n            new_harmony = self._generate_harmony()\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            new_value = func(new_harmony)\n            evaluations += 1\n\n            if new_value < np.max(self.harmony_memory_values):\n                max_index = np.argmax(self.harmony_memory_values)\n                self.harmony_memory[max_index] = new_harmony\n                self.harmony_memory_values[max_index] = new_value\n\n            self._dynamic_adjustments(evaluations)\n\n        return self.harmony_memory[np.argmin(self.harmony_memory_values)]\n\n    def _generate_harmony(self):\n        harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.harmony_memory_rate:\n                harmony[i] = self.harmony_memory[np.random.randint(self.harmony_memory_size), i]\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    harmony[i] += (np.random.rand() - 0.5) * 2 * self.bandwidth_reduction\n            else:\n                harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return harmony\n\n    def _dynamic_adjustments(self, evaluations):\n        progress_ratio = evaluations / self.budget\n        self.harmony_memory_rate = 0.85 + 0.05 * np.sin(progress_ratio * np.pi)  # Adaptive rate change\n        self.bandwidth_reduction = 0.1 * (1 - progress_ratio)  # Dynamic bandwidth reduction", "name": "EnhancedHarmonySearchVariant", "description": "Enhanced Harmony Search variant with dynamic bandwidth and stochastic pitch adjustment for improved convergence and computational efficiency.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dd4f1b77-ee2a-40f9-be96-db46da9f9ca2", "metadata": {"aucs": [0.6778341290362772, 0.7228597825549835, 0.719392930695485, 0.712556001047923, 0.6924056705030067, 0.700928746263275, 0.7094593370216071, 0.7283206776691072, 0.714018398519414, 0.34815339481912544, 0.353888950143183, 0.3375835224103927, 0.32676332469569436, 0.3797270250592909, 0.3480934308964937, 0.3616591137956442, 0.34694240397237375, 0.41947710953486284, 0.36036557716978446, 0.310062672611619, 0.1843356458645733, 0.33396932752189423, 0.42376390753833715, 0.28122743925518356, 0.18877786154438625, 0.38481812461678466, 0.23339088239793582, 0.31206268856346975, 0.3105670899034213, 0.18936399855805186, 0.2814128688252717, 0.1856622915570033, 0.3642124127453106, 0.22514326367386983, 0.2585180954922508, 0.18122794626287497, 0.9139370923109221, 0.9262910909977128, 0.93555323319845, 0.9427414072094866, 0.9273357442786317, 0.9328905197608409, 0.9267564523191643, 0.9539017788672983, 0.9223678562953935, 0.3839611093319574, 0.36245401115436926, 0.3827665896554068, 0.42396405810491467, 0.414913445505508, 0.4269842351972648, 0.39512500833012476, 0.38208754291249336, 0.4514720926742809, 0.1690174112499555, 0.19212288669104782, 0.11573090231132499, 0.2741291129624893, 0.2001096974707094, 0.16014096229584196, 0.17764682250070418, 0.32004746002826223, 0.16782727911880246, 0.16967338983422253, 0.16355543014690976, 0.21331575616274545, 0.2492153373613799, 0.14157929838887917, 0.2125892085319414, 0.24551507157625363, 0.1821992946753379, 0.31674893364563705, 0.1751198229728569, 0.13024196174438663, 0.1666158940554311, 0.13295880787260517, 0.2535437184622148, 0.19186031586903485, 0.20572529310932441, 0.13103975626691322, 0.16872870279461427, 9.999999999998899e-05, 0.00016739582081259918, 9.999999999998899e-05, 9.999999999998899e-05, 0.06086605752895469, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00012838158397621147, 0.04761083833730628, 0.03439856503364336, 0.1719807537007999, 0.0544196565384778, 0.004202405590163161, 0.040227596372862884, 0.09815599943486542, 0.09120651938195001, 0.10700905732041699, 0.12386481128344673, 0.07085908857513623, 0.2467147861321467, 0.09022843498189936, 0.06931308342330122, 0.10938618791938093, 0.1046092589327614, 0.20694473419145187, 0.12585297691100972, 0.16314015864336218, 0.18116225517183182, 0.12691848756689106, 0.19521882260616097, 0.14089268439748825, 0.08656239731270432, 0.19732058626874893, 0.15937334032496042, 0.10244175855079973, 0.4721818879882216, 0.5443828569928555, 0.4940934749897339, 0.49462728989129345, 0.47363163810537723, 0.5018801896656073, 0.4825970270746113, 0.4777831228756395, 0.48536564782093294, 0.1471968020299037, 0.11383808586293998, 0.0856748840128928, 0.14742348777700331, 0.09377736925193769, 0.11969058134072197, 0.08145830211062455, 0.07808717928584008, 0.16119011756749713, 0.4193235624963201, 0.24150318887433986, 0.1926427160771964, 0.2452190705413413, 0.3639955258385176, 0.2063100746962756, 0.24608466211097635, 0.16720997036997798, 0.24475805498647574, 0.24332372616465148, 0.2389444249812307, 0.1894662647529055, 0.32024193952784386, 0.2605295356413412, 0.3085245375863255, 0.3689936861633436, 0.2801214250907995, 0.15603222398565852, 0.1416091651876492, 0.2194834562361062, 0.1801878267489948, 0.26969292805426703, 0.2096790712825629, 0.2427843448250424, 0.20942949801749133, 0.19333275456965593, 0.13806482970531675, 0.2562677544892211, 0.20643323152260395, 0.22957951443561042, 0.20230493476944023, 0.23365230903416012, 0.2152744388273341, 0.23906164752142467, 0.20498901242926693, 0.21349197832042843, 0.1983348690365755, 0.22909062648901446, 0.23177560635110883, 0.21325258092195865, 0.22943114914523322, 0.2524260948674778, 0.20250852459820945, 0.560921093821676, 0.18785589222748333, 0.16003239870883967, 0.1643556430777371, 0.15352616164538646, 0.9089461426171245, 0.9093604690819658, 0.8688067516961634, 0.783058884826201, 0.15826771039486665, 0.16673033928036007, 0.3922924766932203, 0.16930098873680277, 0.5218966446545958, 0.19276285084469458, 0.21025523064361773, 0.20882660056382296, 0.1689254898496514, 0.15688892523363396, 0.10520787959986522, 0.22273277836144456, 0.18644326737547912, 0.19101737164243682, 0.21172861475161664, 0.18291463080490744, 0.1847216417878339, 0.19444649542454495, 0.19638676572014147, 0.20052627182897764, 0.10568502497996202, 0.10021136745689618, 0.07822972750337498, 0.09860594040506254, 0.08772184936034333, 0.1136390411234679, 0.0906706187146703, 0.08566695596416285, 0.0910371341850883]}, "mutation_prompt": null}
{"id": "d45b56e3-fffb-4de9-bd68-5deeee373d9f", "solution": "import numpy as np\n\nclass AdvancedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory_size = 10  # Reduced size for faster adaptation\n        self.harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n        self.harmony_memory_values = np.full(self.harmony_memory_size, float('inf'))\n        self.harmony_memory_rate = 0.85  # Slightly reduced for balance\n        self.pitch_adjustment_rate = 0.5  # Increased for diversity\n        self.bandwidth = 0.1  # Consistent bandwidth for efficient search\n\n    def __call__(self, func):\n        evals = 0\n        for i in range(min(self.harmony_memory_size, self.budget)):\n            self.harmony_memory_values[i] = func(self.harmony_memory[i])\n            evals += 1\n\n        while evals < self.budget:\n            new_harmony = self._create_harmony()\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            new_value = func(new_harmony)\n            evals += 1\n\n            if new_value < np.max(self.harmony_memory_values):\n                max_idx = np.argmax(self.harmony_memory_values)\n                self.harmony_memory[max_idx] = new_harmony\n                self.harmony_memory_values[max_idx] = new_value\n\n            self._adjust_parameters(evals)\n\n        return self.harmony_memory[np.argmin(self.harmony_memory_values)]\n\n    def _create_harmony(self):\n        harmony = np.random.choice(self.harmony_memory.flatten(), self.dim).reshape(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.harmony_memory_rate:\n                harmony[i] += (np.random.rand() - 0.5) * 2 * self.bandwidth\n            else:\n                harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return harmony\n\n    def _adjust_parameters(self, evals):\n        progress = evals / self.budget\n        self.harmony_memory_rate = 0.8 + 0.1 * np.cos(progress * np.pi / 2)  # Adaptive rate", "name": "AdvancedHarmonySearch", "description": "Advanced Harmony Search with adaptive memory enhancement and multi-pitch adjustment for superior optimization efficiency.", "configspace": "", "generation": 31, "fitness": 0.13520965644745053, "feedback": "The algorithm AdvancedHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.11.", "error": "", "parent_id": "dd4f1b77-ee2a-40f9-be96-db46da9f9ca2", "metadata": {"aucs": [0.20422050909873857, 0.19973748558226723, 0.2075477347080017, 0.18866260683572, 0.22157138440287194, 0.17370398610090343, 0.22031889843751828, 0.23352587752210296, 0.21616580729318335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007392382128621144, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07470352096096688, 0.08261287280366636, 0.06617820407457042, 0.0787038909252773, 0.0723928546858631, 0.08972637859098909, 0.06267249490691595, 0.06131722752547197, 0.08284406775758002, 0.10442136092309995, 0.12170206006709738, 0.08577300954385991, 0.062245894542535485, 0.05396917760659148, 0.0648017761216263, 0.05770762605913171, 0.0559898866843358, 0.04664794248587745, 0.5752319169925534, 0.5992085849050293, 0.5810465436133786, 0.2652069179326455, 0.30716142801800894, 0.38959886921808706, 0.6429499418229865, 0.6597302675877577, 0.42207581636673097, 0.07859630193963241, 0.09117568622697558, 0.06831412413130766, 0.08025654090083356, 0.06575174670383754, 0.07139454491567598, 0.1259270688280305, 0.12035361441465542, 0.0902400536036756, 0.1960081565436721, 0.16124798645006577, 0.15639717532144004, 0.11629108477747163, 0.1413436674369668, 0.13595263123725543, 0.14133324032254424, 0.12822988138003888, 0.12172276231748014, 0.0584437134380591, 0.011925952998243838, 0.059790285912035834, 9.999999999998899e-05, 0.0729010700943683, 0.030204968219345707, 0.018651765020675115, 0.0019881895270773553, 0.04894750266828318, 0.13089390094373243, 0.1570539975434493, 0.18832215253999518, 0.15645401751083066, 0.1727652709491524, 0.15779086268642128, 0.13136584939939944, 0.1569253462735063, 0.16310114610248783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09462148244141699, 0.09823288001822461, 0.09564594521396153, 0.06903986553852681, 0.04125182212739453, 0.09989566039479558, 0.07496257823789221, 0.04318476153367701, 0.056335025053370735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03227411370299216, 9.999999999998899e-05, 0.028261894289805967, 0.0064272698646996584, 0.006863579088012051, 9.999999999998899e-05, 0.2670608322313892, 0.26080538716900525, 0.2328566236642875, 0.2165833135700722, 0.20822528623898828, 0.1988796725351818, 0.25580183351991015, 0.23845337826852142, 0.24337685942463383, 0.0900629939854749, 0.09007500132140722, 0.05908909001986995, 0.07589755673732601, 0.0823676136228556, 0.07760630940422253, 0.06439219784317851, 0.073122109919048, 0.06604250064725625, 0.16311853510154362, 0.12724281099902224, 0.14455179931762163, 0.14614058867122426, 0.13410632745428286, 0.204373601813016, 0.14269976629012504, 0.16917784392687796, 0.18407367169565325, 0.19811649796670594, 0.18132856189950797, 0.18188957484332602, 0.21641025459524377, 0.2083410417973106, 0.22294277222334102, 0.17244195777779803, 0.17762476489504642, 0.18315607034441728, 0.13902854030355616, 0.1380836867718117, 0.13340073974580613, 0.16321953322119975, 0.15205670978113195, 0.156338041506071, 0.13099808133275204, 0.1301105785341048, 0.11358382811196521, 0.24152469198504356, 0.2077898375039371, 0.21906030135412835, 0.25944460228818567, 0.21242508345816213, 0.20915161521572212, 0.23746537046528748, 0.21944014142431179, 0.21503823525408794, 0.16516728701164507, 0.23200050329559851, 0.17678272663580652, 0.229096252748205, 0.282024445231979, 0.25885570132596625, 0.22595241474114913, 0.2946364875934686, 0.1869416615293239, 0.2080655201068824, 0.20983754443528302, 0.22293013508361115, 0.17143259367434815, 0.16797166839874278, 0.252208819575124, 0.18794473848682214, 0.13636078738414859, 0.1453678125941591, 0.200237996481885, 0.19832435586647257, 0.20331277801077818, 0.14234789364009137, 0.16364586820684068, 0.2472953162570809, 0.16365204943025402, 0.23340293462612804, 0.18666821747489226, 0.182137855049476, 0.17946570249515958, 0.19604707425628953, 0.19736840957969404, 0.1775105313807378, 0.1800971652847866, 0.1914645541288088, 0.1790484614827963, 0.1844177349128836, 0.0660968086474899, 0.0682218884244652, 0.06453895410218358, 0.06263668003770695, 0.060746710540267146, 0.07229189823518356, 0.06817031050551359, 0.07410090066960417, 0.07413868146166946]}, "mutation_prompt": null}
{"id": "be377908-efc0-46d9-8f11-b3417ba9a190", "solution": "import numpy as np\n\nclass EnhancedHarmonySearchVariant:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory_size = 12  # Smaller size for quicker iterations\n        self.harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n        self.harmony_memory_values = np.full(self.harmony_memory_size, np.inf)\n        self.harmony_memory_rate = 0.9  # Increased rate for intensified exploration\n        self.pitch_adjustment_rate = 0.4  # More frequent pitch adjustments\n        self.bandwidth_reduction = 0.05  # Gradually tightening search space\n\n    def __call__(self, func):\n        evaluations = 0\n        initial_evals = min(self.harmony_memory_size, self.budget)\n        for i in range(initial_evals):\n            self.harmony_memory_values[i] = func(self.harmony_memory[i])\n            evaluations += 1\n\n        while evaluations < self.budget:\n            new_harmony = self._generate_harmony()\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            new_value = func(new_harmony)\n            evaluations += 1\n\n            if new_value < np.max(self.harmony_memory_values):\n                max_index = np.argmax(self.harmony_memory_values)\n                self.harmony_memory[max_index] = new_harmony\n                self.harmony_memory_values[max_index] = new_value\n\n            self._dynamic_adjustments(evaluations)\n\n        return self.harmony_memory[np.argmin(self.harmony_memory_values)]\n\n    def _generate_harmony(self):\n        harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.harmony_memory_rate:\n                harmony[i] = self.harmony_memory[np.random.randint(self.harmony_memory_size), i]\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    harmony[i] += (np.random.rand() - 0.5) * 2 * self.bandwidth_reduction\n            else:\n                harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return harmony\n\n    def _dynamic_adjustments(self, evaluations):\n        progress_ratio = evaluations / self.budget\n        self.harmony_memory_rate = 0.85 + 0.05 * np.sin(progress_ratio * np.pi)  # Adaptive rate change\n        self.bandwidth_reduction = 0.1 * (1 - progress_ratio)  # Dynamic bandwidth reduction", "name": "EnhancedHarmonySearchVariant", "description": "Enhanced Harmony Search variant with dynamic bandwidth and stochastic pitch adjustment for improved convergence and computational efficiency.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dd4f1b77-ee2a-40f9-be96-db46da9f9ca2", "metadata": {"aucs": [0.6778341290362772, 0.7228597825549835, 0.719392930695485, 0.712556001047923, 0.6924056705030067, 0.700928746263275, 0.7094593370216071, 0.7283206776691072, 0.714018398519414, 0.34815339481912544, 0.353888950143183, 0.3375835224103927, 0.32676332469569436, 0.3797270250592909, 0.3480934308964937, 0.3616591137956442, 0.34694240397237375, 0.41947710953486284, 0.36036557716978446, 0.310062672611619, 0.1843356458645733, 0.33396932752189423, 0.42376390753833715, 0.28122743925518356, 0.18877786154438625, 0.38481812461678466, 0.23339088239793582, 0.31206268856346975, 0.3105670899034213, 0.18936399855805186, 0.2814128688252717, 0.1856622915570033, 0.3642124127453106, 0.22514326367386983, 0.2585180954922508, 0.18122794626287497, 0.9139370923109221, 0.9262910909977128, 0.93555323319845, 0.9427414072094866, 0.9273357442786317, 0.9328905197608409, 0.9267564523191643, 0.9539017788672983, 0.9223678562953935, 0.3839611093319574, 0.36245401115436926, 0.3827665896554068, 0.42396405810491467, 0.414913445505508, 0.4269842351972648, 0.39512500833012476, 0.38208754291249336, 0.4514720926742809, 0.1690174112499555, 0.19212288669104782, 0.11573090231132499, 0.2741291129624893, 0.2001096974707094, 0.16014096229584196, 0.17764682250070418, 0.32004746002826223, 0.16782727911880246, 0.16967338983422253, 0.16355543014690976, 0.21331575616274545, 0.2492153373613799, 0.14157929838887917, 0.2125892085319414, 0.24551507157625363, 0.1821992946753379, 0.31674893364563705, 0.1751198229728569, 0.13024196174438663, 0.1666158940554311, 0.13295880787260517, 0.2535437184622148, 0.19186031586903485, 0.20572529310932441, 0.13103975626691322, 0.16872870279461427, 9.999999999998899e-05, 0.00016739582081259918, 9.999999999998899e-05, 9.999999999998899e-05, 0.06086605752895469, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00012838158397621147, 0.04761083833730628, 0.03439856503364336, 0.1719807537007999, 0.0544196565384778, 0.004202405590163161, 0.040227596372862884, 0.09815599943486542, 0.09120651938195001, 0.10700905732041699, 0.12386481128344673, 0.07085908857513623, 0.2467147861321467, 0.09022843498189936, 0.06931308342330122, 0.10938618791938093, 0.1046092589327614, 0.20694473419145187, 0.12585297691100972, 0.16314015864336218, 0.18116225517183182, 0.12691848756689106, 0.19521882260616097, 0.14089268439748825, 0.08656239731270432, 0.19732058626874893, 0.15937334032496042, 0.10244175855079973, 0.4721818879882216, 0.5443828569928555, 0.4940934749897339, 0.49462728989129345, 0.47363163810537723, 0.5018801896656073, 0.4825970270746113, 0.4777831228756395, 0.48536564782093294, 0.1471968020299037, 0.11383808586293998, 0.0856748840128928, 0.14742348777700331, 0.09377736925193769, 0.11969058134072197, 0.08145830211062455, 0.07808717928584008, 0.16119011756749713, 0.4193235624963201, 0.24150318887433986, 0.1926427160771964, 0.2452190705413413, 0.3639955258385176, 0.2063100746962756, 0.24608466211097635, 0.16720997036997798, 0.24475805498647574, 0.24332372616465148, 0.2389444249812307, 0.1894662647529055, 0.32024193952784386, 0.2605295356413412, 0.3085245375863255, 0.3689936861633436, 0.2801214250907995, 0.15603222398565852, 0.1416091651876492, 0.2194834562361062, 0.1801878267489948, 0.26969292805426703, 0.2096790712825629, 0.2427843448250424, 0.20942949801749133, 0.19333275456965593, 0.13806482970531675, 0.2562677544892211, 0.20643323152260395, 0.22957951443561042, 0.20230493476944023, 0.23365230903416012, 0.2152744388273341, 0.23906164752142467, 0.20498901242926693, 0.21349197832042843, 0.1983348690365755, 0.22909062648901446, 0.23177560635110883, 0.21325258092195865, 0.22943114914523322, 0.2524260948674778, 0.20250852459820945, 0.560921093821676, 0.18785589222748333, 0.16003239870883967, 0.1643556430777371, 0.15352616164538646, 0.9089461426171245, 0.9093604690819658, 0.8688067516961634, 0.783058884826201, 0.15826771039486665, 0.16673033928036007, 0.3922924766932203, 0.16930098873680277, 0.5218966446545958, 0.19276285084469458, 0.21025523064361773, 0.20882660056382296, 0.1689254898496514, 0.15688892523363396, 0.10520787959986522, 0.22273277836144456, 0.18644326737547912, 0.19101737164243682, 0.21172861475161664, 0.18291463080490744, 0.1847216417878339, 0.19444649542454495, 0.19638676572014147, 0.20052627182897764, 0.10568502497996202, 0.10021136745689618, 0.07822972750337498, 0.09860594040506254, 0.08772184936034333, 0.1136390411234679, 0.0906706187146703, 0.08566695596416285, 0.0910371341850883]}, "mutation_prompt": null}
{"id": "8cfec6e9-2926-4066-8c10-251b5b0552d9", "solution": "import numpy as np\n\nclass EnhancedHarmonySearchVariant:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory_size = 12  # Smaller size for quicker iterations\n        self.harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n        self.harmony_memory_values = np.full(self.harmony_memory_size, np.inf)\n        self.harmony_memory_rate = 0.9  # Increased rate for intensified exploration\n        self.pitch_adjustment_rate = 0.4  # More frequent pitch adjustments\n        self.bandwidth_reduction = 0.05  # Gradually tightening search space\n\n    def __call__(self, func):\n        evaluations = 0\n        initial_evals = min(self.harmony_memory_size, self.budget)\n        for i in range(initial_evals):\n            self.harmony_memory_values[i] = func(self.harmony_memory[i])\n            evaluations += 1\n\n        while evaluations < self.budget:\n            new_harmony = self._generate_harmony()\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            new_value = func(new_harmony)\n            evaluations += 1\n\n            if new_value < np.max(self.harmony_memory_values):\n                max_index = np.argmax(self.harmony_memory_values)\n                self.harmony_memory[max_index] = new_harmony\n                self.harmony_memory_values[max_index] = new_value\n\n            self._dynamic_adjustments(evaluations)\n\n        return self.harmony_memory[np.argmin(self.harmony_memory_values)]\n\n    def _generate_harmony(self):\n        harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.harmony_memory_rate:\n                harmony[i] = self.harmony_memory[np.random.randint(self.harmony_memory_size), i]\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    harmony[i] += (np.random.rand() - 0.5) * 2 * self.bandwidth_reduction\n            else:\n                harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return harmony\n\n    def _dynamic_adjustments(self, evaluations):\n        progress_ratio = evaluations / self.budget\n        self.harmony_memory_rate = 0.85 + 0.05 * np.sin(progress_ratio * np.pi)  # Adaptive rate change\n        self.bandwidth_reduction = 0.1 * (1 - progress_ratio)  # Dynamic bandwidth reduction", "name": "EnhancedHarmonySearchVariant", "description": "Enhanced Harmony Search variant with dynamic bandwidth and stochastic pitch adjustment for improved convergence and computational efficiency.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "dd4f1b77-ee2a-40f9-be96-db46da9f9ca2", "metadata": {"aucs": [0.6778341290362772, 0.7228597825549835, 0.719392930695485, 0.712556001047923, 0.6924056705030067, 0.700928746263275, 0.7094593370216071, 0.7283206776691072, 0.714018398519414, 0.34815339481912544, 0.353888950143183, 0.3375835224103927, 0.32676332469569436, 0.3797270250592909, 0.3480934308964937, 0.3616591137956442, 0.34694240397237375, 0.41947710953486284, 0.36036557716978446, 0.310062672611619, 0.1843356458645733, 0.33396932752189423, 0.42376390753833715, 0.28122743925518356, 0.18877786154438625, 0.38481812461678466, 0.23339088239793582, 0.31206268856346975, 0.3105670899034213, 0.18936399855805186, 0.2814128688252717, 0.1856622915570033, 0.3642124127453106, 0.22514326367386983, 0.2585180954922508, 0.18122794626287497, 0.9139370923109221, 0.9262910909977128, 0.93555323319845, 0.9427414072094866, 0.9273357442786317, 0.9328905197608409, 0.9267564523191643, 0.9539017788672983, 0.9223678562953935, 0.3839611093319574, 0.36245401115436926, 0.3827665896554068, 0.42396405810491467, 0.414913445505508, 0.4269842351972648, 0.39512500833012476, 0.38208754291249336, 0.4514720926742809, 0.1690174112499555, 0.19212288669104782, 0.11573090231132499, 0.2741291129624893, 0.2001096974707094, 0.16014096229584196, 0.17764682250070418, 0.32004746002826223, 0.16782727911880246, 0.16967338983422253, 0.16355543014690976, 0.21331575616274545, 0.2492153373613799, 0.14157929838887917, 0.2125892085319414, 0.24551507157625363, 0.1821992946753379, 0.31674893364563705, 0.1751198229728569, 0.13024196174438663, 0.1666158940554311, 0.13295880787260517, 0.2535437184622148, 0.19186031586903485, 0.20572529310932441, 0.13103975626691322, 0.16872870279461427, 9.999999999998899e-05, 0.00016739582081259918, 9.999999999998899e-05, 9.999999999998899e-05, 0.06086605752895469, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00012838158397621147, 0.04761083833730628, 0.03439856503364336, 0.1719807537007999, 0.0544196565384778, 0.004202405590163161, 0.040227596372862884, 0.09815599943486542, 0.09120651938195001, 0.10700905732041699, 0.12386481128344673, 0.07085908857513623, 0.2467147861321467, 0.09022843498189936, 0.06931308342330122, 0.10938618791938093, 0.1046092589327614, 0.20694473419145187, 0.12585297691100972, 0.16314015864336218, 0.18116225517183182, 0.12691848756689106, 0.19521882260616097, 0.14089268439748825, 0.08656239731270432, 0.19732058626874893, 0.15937334032496042, 0.10244175855079973, 0.4721818879882216, 0.5443828569928555, 0.4940934749897339, 0.49462728989129345, 0.47363163810537723, 0.5018801896656073, 0.4825970270746113, 0.4777831228756395, 0.48536564782093294, 0.1471968020299037, 0.11383808586293998, 0.0856748840128928, 0.14742348777700331, 0.09377736925193769, 0.11969058134072197, 0.08145830211062455, 0.07808717928584008, 0.16119011756749713, 0.4193235624963201, 0.24150318887433986, 0.1926427160771964, 0.2452190705413413, 0.3639955258385176, 0.2063100746962756, 0.24608466211097635, 0.16720997036997798, 0.24475805498647574, 0.24332372616465148, 0.2389444249812307, 0.1894662647529055, 0.32024193952784386, 0.2605295356413412, 0.3085245375863255, 0.3689936861633436, 0.2801214250907995, 0.15603222398565852, 0.1416091651876492, 0.2194834562361062, 0.1801878267489948, 0.26969292805426703, 0.2096790712825629, 0.2427843448250424, 0.20942949801749133, 0.19333275456965593, 0.13806482970531675, 0.2562677544892211, 0.20643323152260395, 0.22957951443561042, 0.20230493476944023, 0.23365230903416012, 0.2152744388273341, 0.23906164752142467, 0.20498901242926693, 0.21349197832042843, 0.1983348690365755, 0.22909062648901446, 0.23177560635110883, 0.21325258092195865, 0.22943114914523322, 0.2524260948674778, 0.20250852459820945, 0.560921093821676, 0.18785589222748333, 0.16003239870883967, 0.1643556430777371, 0.15352616164538646, 0.9089461426171245, 0.9093604690819658, 0.8688067516961634, 0.783058884826201, 0.15826771039486665, 0.16673033928036007, 0.3922924766932203, 0.16930098873680277, 0.5218966446545958, 0.19276285084469458, 0.21025523064361773, 0.20882660056382296, 0.1689254898496514, 0.15688892523363396, 0.10520787959986522, 0.22273277836144456, 0.18644326737547912, 0.19101737164243682, 0.21172861475161664, 0.18291463080490744, 0.1847216417878339, 0.19444649542454495, 0.19638676572014147, 0.20052627182897764, 0.10568502497996202, 0.10021136745689618, 0.07822972750337498, 0.09860594040506254, 0.08772184936034333, 0.1136390411234679, 0.0906706187146703, 0.08566695596416285, 0.0910371341850883]}, "mutation_prompt": null}
{"id": "b0b6c457-269d-42a9-b460-7871a4657035", "solution": "import numpy as np\n\nclass OptimizedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory_size = 10  # Reduced size for faster updates\n        self.harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n        self.harmony_memory_values = np.full(self.harmony_memory_size, np.inf)\n        self.harmony_memory_rate = 0.85  # Adjusted for balanced exploration-exploitation\n        self.pitch_adjustment_rate = 0.35  # Slightly reduced for stability\n        self.bandwidth_reduction = 0.08  # Optimized bandwidth adjustment\n\n    def __call__(self, func):\n        evaluations = 0\n        initial_evals = min(self.harmony_memory_size, self.budget)\n        for i in range(initial_evals):\n            self.harmony_memory_values[i] = func(self.harmony_memory[i])\n            evaluations += 1\n\n        while evaluations < self.budget:\n            new_harmony = self._generate_harmony()\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            new_value = func(new_harmony)\n            evaluations += 1\n\n            if new_value < np.max(self.harmony_memory_values):\n                max_index = np.argmax(self.harmony_memory_values)\n                self.harmony_memory[max_index] = new_harmony\n                self.harmony_memory_values[max_index] = new_value\n\n            self._adaptive_memory_adjustment(evaluations)\n\n        return self.harmony_memory[np.argmin(self.harmony_memory_values)]\n\n    def _generate_harmony(self):\n        harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.harmony_memory_rate:\n                selected_harmony = np.random.randint(self.harmony_memory_size)\n                harmony[i] = self.harmony_memory[selected_harmony, i]\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    harmony[i] += (np.random.rand() - 0.5) * self.bandwidth_reduction\n            else:\n                harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return harmony\n\n    def _adaptive_memory_adjustment(self, evaluations):\n        progress_ratio = evaluations / self.budget\n        self.harmony_memory_rate = 0.8 + 0.15 * np.sin(progress_ratio * np.pi)  # Adaptive rate change\n        self.bandwidth_reduction = 0.1 * (1 - progress_ratio)  # Dynamic bandwidth reduction", "name": "OptimizedHarmonySearch", "description": "Optimized Harmony Search with adaptive memory and reduced dimensional search to enhance convergence speed and solution accuracy.", "configspace": "", "generation": 34, "fitness": 0.2803263946609629, "feedback": "The algorithm OptimizedHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.23.", "error": "", "parent_id": "dd4f1b77-ee2a-40f9-be96-db46da9f9ca2", "metadata": {"aucs": [0.7765882938266643, 0.8243568710218775, 0.8254051892283129, 0.8453491914666238, 0.7969797973903472, 0.8066691149741904, 0.7694038085428194, 0.8057004252149417, 0.8074359098321042, 0.416117482931324, 0.39979565596447497, 0.4117686117310968, 0.43967257299511653, 0.309201016491197, 0.39693004247198227, 0.363309645263, 0.3987040955688068, 0.46254788041927597, 0.4929591324803436, 0.4274797346830146, 0.5237432093077367, 0.33025220060689886, 0.28151718403319015, 0.32055227417481513, 0.1762378267616148, 0.2467746772273809, 0.1822855015301268, 0.18841757599502484, 0.3110643327439262, 0.34249575855811754, 0.4693609030920708, 0.29315713845985214, 0.47811586297136355, 0.13214733198446993, 0.22123021537955867, 0.49549341280388726, 0.9302895297189708, 0.9028953744152621, 0.9167500970780503, 0.9057621447178014, 0.9006194430608284, 0.9332084418810526, 0.89652626832293, 0.8949245427945623, 0.8849838622200957, 0.4496857065665224, 0.4148989354449265, 0.4005082178925833, 0.5088276492448937, 0.4556779579787331, 0.5054035343535082, 0.4131295832594749, 0.4709980786533894, 0.5044368698197303, 0.208717723915833, 0.12748416645848737, 0.13981554615593395, 0.27870581867476185, 0.23517640773701698, 0.19442178331365922, 0.22174398496793624, 0.15118104659812925, 0.15904680331564958, 0.18294309776865514, 0.22628432926488862, 0.1878499226538627, 0.19735694554898042, 0.1865297475214842, 0.213974722263787, 0.20442626327730762, 0.28025631182761934, 0.24734224139470817, 0.1775954412244226, 0.11175136765787663, 0.1813205407926003, 0.1793427828487807, 0.15062929625750765, 0.22764037336437504, 0.2044711106723648, 0.18042916679348509, 0.25121360571027496, 9.999999999998899e-05, 9.999999999998899e-05, 0.004243899651041105, 0.01424030193240955, 9.999999999998899e-05, 9.999999999998899e-05, 0.025506414805956723, 9.999999999998899e-05, 9.999999999998899e-05, 0.06810023338537319, 0.03157372662137481, 0.06805889719731806, 0.0634902417765637, 0.027803266897662993, 0.009583574806745543, 0.15678582708459254, 0.07038501041287071, 0.11910115901058194, 0.1671439149330587, 0.06782909423696981, 0.11108198773078826, 0.07666082561224663, 0.07682108546585809, 0.10517283363132823, 0.08773228099343267, 0.14917483194303893, 0.13428525574038153, 0.08294570137962731, 0.11533685094911361, 0.15309175248560403, 0.09119246166888206, 0.044162803879114976, 0.022312248220477504, 0.08980622216966694, 0.18543801083494993, 0.1377555356806257, 0.4631307876036952, 0.4708990919795437, 0.48893104354439354, 0.5131882347682228, 0.5126887142985609, 0.5202854850270517, 0.5093673211847507, 0.49782059126092126, 0.516490219003638, 0.09406061726081394, 0.09454336716589007, 0.06392400651963404, 0.11308183399755323, 0.12639869793367886, 0.09848128835646508, 0.08652320075934894, 0.0855620326863833, 0.09707825493483646, 0.15489851382837005, 0.1543035080685755, 0.18549011760891643, 0.209682873967463, 0.21015216196834596, 0.1526069131286687, 0.21234289917022164, 0.1347655209550277, 0.15658083107630683, 0.17487280570636998, 0.1919112758955711, 0.1763315340483247, 0.1903785039347028, 0.20731355722158018, 0.29012440808872875, 0.23059304482764353, 0.24174176484193532, 0.17484068243162143, 0.09205759419712978, 0.15562172900780902, 0.10648366153287225, 0.153776235163694, 0.13379466123249095, 0.14019844462295206, 0.1266948203944951, 0.19813764037227666, 0.2096141207159149, 0.25260493289047825, 0.20692956114397643, 0.25499359802615906, 0.21084577152994965, 0.2116714433339294, 0.19173881015338468, 0.20117138005517488, 0.21214584275236148, 0.25957853556284305, 0.2537920689474782, 0.2569069639981758, 0.2102896929047421, 0.19807021774919542, 0.1899972470043002, 0.19985847506813148, 0.19349364749233577, 0.20295017181587083, 0.20182032798730487, 0.732410470762873, 0.8597354039564482, 0.1591781070748679, 0.9053200138579148, 0.9449758467322794, 0.19530688800108742, 0.17090210315549414, 0.1586008237591393, 0.16489379932627757, 0.5436497240178948, 0.5392092166732172, 0.39775297526574127, 0.16873028287854197, 0.2098511545591185, 0.213285720682872, 0.10443358988269846, 0.21116397037570445, 0.09421251894185967, 0.22142062516530991, 0.1890044193028252, 0.2028516914834393, 0.23151480628701537, 0.19974300630755948, 0.21767970443765206, 0.24781002633572502, 0.248338519110455, 0.23222975247301803, 0.0849378101833903, 0.07736208966054414, 0.10204819758100547, 0.08733788813773513, 0.11073054888327749, 0.09763238156855225, 0.10125490375348312, 0.08080991302619955, 0.09374613778867147]}, "mutation_prompt": null}
{"id": "5080c18e-9beb-4d03-b1de-03c04543313d", "solution": "import numpy as np\n\nclass OptimizedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory_size = 10  # Reduced size for faster updates\n        self.harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n        self.harmony_memory_values = np.full(self.harmony_memory_size, np.inf)\n        self.harmony_memory_rate = 0.85  # Adjusted for balanced exploration-exploitation\n        self.pitch_adjustment_rate = 0.35  # Slightly reduced for stability\n        self.bandwidth_reduction = 0.08  # Optimized bandwidth adjustment\n\n    def __call__(self, func):\n        evaluations = 0\n        initial_evals = min(self.harmony_memory_size, self.budget)\n        for i in range(initial_evals):\n            self.harmony_memory_values[i] = func(self.harmony_memory[i])\n            evaluations += 1\n\n        while evaluations < self.budget:\n            new_harmony = self._generate_harmony()\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            new_value = func(new_harmony)\n            evaluations += 1\n\n            if new_value < np.max(self.harmony_memory_values):\n                max_index = np.argmax(self.harmony_memory_values)\n                self.harmony_memory[max_index] = new_harmony\n                self.harmony_memory_values[max_index] = new_value\n\n            self._adaptive_memory_adjustment(evaluations)\n\n        return self.harmony_memory[np.argmin(self.harmony_memory_values)]\n\n    def _generate_harmony(self):\n        harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.harmony_memory_rate:\n                selected_harmony = np.random.randint(self.harmony_memory_size)\n                harmony[i] = self.harmony_memory[selected_harmony, i]\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    harmony[i] += (np.random.rand() - 0.5) * self.bandwidth_reduction\n            else:\n                harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return harmony\n\n    def _adaptive_memory_adjustment(self, evaluations):\n        progress_ratio = evaluations / self.budget\n        self.harmony_memory_rate = 0.8 + 0.15 * np.sin(progress_ratio * np.pi)  # Adaptive rate change\n        self.bandwidth_reduction = 0.1 * (1 - progress_ratio)  # Dynamic bandwidth reduction", "name": "OptimizedHarmonySearch", "description": "Optimized Harmony Search with adaptive memory and reduced dimensional search to enhance convergence speed and solution accuracy.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b0b6c457-269d-42a9-b460-7871a4657035", "metadata": {"aucs": [0.7765882938266643, 0.8243568710218775, 0.8254051892283129, 0.8453491914666238, 0.7969797973903472, 0.8066691149741904, 0.7694038085428194, 0.8057004252149417, 0.8074359098321042, 0.416117482931324, 0.39979565596447497, 0.4117686117310968, 0.43967257299511653, 0.309201016491197, 0.39693004247198227, 0.363309645263, 0.3987040955688068, 0.46254788041927597, 0.4929591324803436, 0.4274797346830146, 0.5237432093077367, 0.33025220060689886, 0.28151718403319015, 0.32055227417481513, 0.1762378267616148, 0.2467746772273809, 0.1822855015301268, 0.18841757599502484, 0.3110643327439262, 0.34249575855811754, 0.4693609030920708, 0.29315713845985214, 0.47811586297136355, 0.13214733198446993, 0.22123021537955867, 0.49549341280388726, 0.9302895297189708, 0.9028953744152621, 0.9167500970780503, 0.9057621447178014, 0.9006194430608284, 0.9332084418810526, 0.89652626832293, 0.8949245427945623, 0.8849838622200957, 0.4496857065665224, 0.4148989354449265, 0.4005082178925833, 0.5088276492448937, 0.4556779579787331, 0.5054035343535082, 0.4131295832594749, 0.4709980786533894, 0.5044368698197303, 0.208717723915833, 0.12748416645848737, 0.13981554615593395, 0.27870581867476185, 0.23517640773701698, 0.19442178331365922, 0.22174398496793624, 0.15118104659812925, 0.15904680331564958, 0.18294309776865514, 0.22628432926488862, 0.1878499226538627, 0.19735694554898042, 0.1865297475214842, 0.213974722263787, 0.20442626327730762, 0.28025631182761934, 0.24734224139470817, 0.1775954412244226, 0.11175136765787663, 0.1813205407926003, 0.1793427828487807, 0.15062929625750765, 0.22764037336437504, 0.2044711106723648, 0.18042916679348509, 0.25121360571027496, 9.999999999998899e-05, 9.999999999998899e-05, 0.004243899651041105, 0.01424030193240955, 9.999999999998899e-05, 9.999999999998899e-05, 0.025506414805956723, 9.999999999998899e-05, 9.999999999998899e-05, 0.06810023338537319, 0.03157372662137481, 0.06805889719731806, 0.0634902417765637, 0.027803266897662993, 0.009583574806745543, 0.15678582708459254, 0.07038501041287071, 0.11910115901058194, 0.1671439149330587, 0.06782909423696981, 0.11108198773078826, 0.07666082561224663, 0.07682108546585809, 0.10517283363132823, 0.08773228099343267, 0.14917483194303893, 0.13428525574038153, 0.08294570137962731, 0.11533685094911361, 0.15309175248560403, 0.09119246166888206, 0.044162803879114976, 0.022312248220477504, 0.08980622216966694, 0.18543801083494993, 0.1377555356806257, 0.4631307876036952, 0.4708990919795437, 0.48893104354439354, 0.5131882347682228, 0.5126887142985609, 0.5202854850270517, 0.5093673211847507, 0.49782059126092126, 0.516490219003638, 0.09406061726081394, 0.09454336716589007, 0.06392400651963404, 0.11308183399755323, 0.12639869793367886, 0.09848128835646508, 0.08652320075934894, 0.0855620326863833, 0.09707825493483646, 0.15489851382837005, 0.1543035080685755, 0.18549011760891643, 0.209682873967463, 0.21015216196834596, 0.1526069131286687, 0.21234289917022164, 0.1347655209550277, 0.15658083107630683, 0.17487280570636998, 0.1919112758955711, 0.1763315340483247, 0.1903785039347028, 0.20731355722158018, 0.29012440808872875, 0.23059304482764353, 0.24174176484193532, 0.17484068243162143, 0.09205759419712978, 0.15562172900780902, 0.10648366153287225, 0.153776235163694, 0.13379466123249095, 0.14019844462295206, 0.1266948203944951, 0.19813764037227666, 0.2096141207159149, 0.25260493289047825, 0.20692956114397643, 0.25499359802615906, 0.21084577152994965, 0.2116714433339294, 0.19173881015338468, 0.20117138005517488, 0.21214584275236148, 0.25957853556284305, 0.2537920689474782, 0.2569069639981758, 0.2102896929047421, 0.19807021774919542, 0.1899972470043002, 0.19985847506813148, 0.19349364749233577, 0.20295017181587083, 0.20182032798730487, 0.732410470762873, 0.8597354039564482, 0.1591781070748679, 0.9053200138579148, 0.9449758467322794, 0.19530688800108742, 0.17090210315549414, 0.1586008237591393, 0.16489379932627757, 0.5436497240178948, 0.5392092166732172, 0.39775297526574127, 0.16873028287854197, 0.2098511545591185, 0.213285720682872, 0.10443358988269846, 0.21116397037570445, 0.09421251894185967, 0.22142062516530991, 0.1890044193028252, 0.2028516914834393, 0.23151480628701537, 0.19974300630755948, 0.21767970443765206, 0.24781002633572502, 0.248338519110455, 0.23222975247301803, 0.0849378101833903, 0.07736208966054414, 0.10204819758100547, 0.08733788813773513, 0.11073054888327749, 0.09763238156855225, 0.10125490375348312, 0.08080991302619955, 0.09374613778867147]}, "mutation_prompt": null}
{"id": "6e02f982-0530-47bb-b3a3-cac8419c2a31", "solution": "import numpy as np\n\nclass EnhancedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.dynamic_memory_size = min(20, dim + 5)  # Dynamic size based on dimension\n        self.memory = np.random.uniform(self.lower_bound, self.upper_bound, (self.dynamic_memory_size, self.dim))\n        self.memory_values = np.full(self.dynamic_memory_size, np.inf)\n        self.memory_rate = 0.9  # Higher initial exploration\n        self.pitch_rate = 0.25  # Reduced for better local search\n        self.bandwidth = 0.1  # Slightly increased for initial diversity\n\n    def __call__(self, func):\n        evaluations = 0\n        initial_evals = min(self.dynamic_memory_size, self.budget)\n        for i in range(initial_evals):\n            self.memory_values[i] = func(self.memory[i])\n            evaluations += 1\n\n        while evaluations < self.budget:\n            new_harmony = self._create_harmony()\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            new_value = func(new_harmony)\n            evaluations += 1\n\n            if new_value < np.max(self.memory_values):\n                max_index = np.argmax(self.memory_values)\n                self.memory[max_index] = new_harmony\n                self.memory_values[max_index] = new_value\n\n            self._adjust_parameters(evaluations)\n\n        return self.memory[np.argmin(self.memory_values)]\n\n    def _create_harmony(self):\n        harmony = np.array([\n            self._select_memory(i) if np.random.rand() < self.memory_rate else np.random.uniform(self.lower_bound, self.upper_bound)\n            for i in range(self.dim)\n        ])\n        return harmony\n\n    def _select_memory(self, index):\n        selected_harmony = np.random.randint(self.dynamic_memory_size)\n        value = self.memory[selected_harmony, index]\n        if np.random.rand() < self.pitch_rate:\n            value += (np.random.uniform(-1, 1) * self.bandwidth)\n        return value\n\n    def _adjust_parameters(self, evaluations):\n        progress = evaluations / self.budget\n        self.memory_rate = 0.85 + 0.1 * progress  # Adaptive rate increase\n        self.pitch_rate = 0.2 * (1 - progress)  # Adaptive pitch reduction\n        self.bandwidth = 0.05 * (1 - progress)  # Bandwidth reduction over time", "name": "EnhancedHarmonySearch", "description": "Enhanced Harmony Search with variable harmony size and adaptive parameter tuning for improved optimization.", "configspace": "", "generation": 36, "fitness": 0.27229776304646486, "feedback": "The algorithm EnhancedHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.22.", "error": "", "parent_id": "b0b6c457-269d-42a9-b460-7871a4657035", "metadata": {"aucs": [0.7635760301759603, 0.8494137231948026, 0.7883778120145226, 0.8041307067796968, 0.8279728901692422, 0.798233000397065, 0.7761270997311629, 0.777336082681336, 0.7983544289157085, 0.312196865971047, 0.35076933585218983, 0.3577280563770423, 0.343622514199871, 0.34694504471330634, 0.36294247718187933, 0.4302630218876117, 0.34489987864366534, 0.3695399673201527, 0.48598295818805437, 0.4418778345034833, 0.4758206089482834, 0.44692220143035066, 0.4836519953599957, 0.406022609659602, 0.42214262089869903, 0.35162989332651995, 0.4085825195185986, 0.3984609310592955, 0.28173409623003287, 0.1826680912553812, 0.1843024009920602, 0.24146659743953935, 0.17485479257137593, 0.17745450813707597, 0.3480588257669166, 0.35344271814920303, 0.9000602827583734, 0.8112862934458225, 0.8723654313980149, 0.8849430154606505, 0.8468378125879631, 0.8471277921307947, 0.86603038566948, 0.8717129499269882, 0.8870374435384828, 0.37756039468044433, 0.363378406606076, 0.3868258880243761, 0.47325562333012083, 0.3283262250558454, 0.47620046489948387, 0.30189734975594373, 0.21920492412224757, 0.3716225914663066, 0.18085536863942564, 0.1665063711876228, 0.20292984562128746, 0.21688440408734, 0.19519286541670167, 0.19467673149389153, 0.12571835657550123, 0.2232039019977512, 0.1757852056163316, 0.20323692481984823, 0.16403781010774532, 0.1651030395770433, 0.14421118779202824, 0.2637995073858388, 0.23200343823797143, 0.25380857148624447, 0.3003843305687537, 0.3228603053395257, 0.15849492079991978, 9.999999999998899e-05, 0.12990335182390078, 0.1294894367499686, 0.12708881868036281, 0.39583295609877234, 0.13700999276392234, 0.1774033464935465, 0.19187064977153945, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.038621923715503326, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011971359067398435, 0.06093852624740104, 0.08377449475755527, 0.06369763455083743, 0.033307518740919084, 0.05184039522010664, 0.09056442770906814, 0.047146647980586764, 0.07796862473809074, 0.19121802780910702, 0.14329893223377332, 0.2542835489890408, 0.11678755520345274, 0.1941729619070256, 0.13484006582047292, 0.1729405099803769, 0.1949424291494345, 0.1566546363743755, 0.09603735134416169, 0.11609149776009853, 0.11688182950631176, 0.06719672460112958, 0.09046575979690663, 0.18320450904950925, 0.1274637585346956, 0.1050511607196638, 0.09051737337549914, 0.43454530700905847, 0.4441648393752783, 0.43426415523097195, 0.4816266681487761, 0.47928213192951596, 0.42569078524247084, 0.4761502109967305, 0.48717981296882085, 0.43474921132888644, 0.07610784315898567, 0.06288237277471931, 0.06854191870179327, 0.10445033545249394, 0.08202234027137689, 0.11969940134382451, 0.10170514854115686, 0.07566450718133022, 0.14896737727642118, 0.19517184898656936, 0.19201238144329447, 0.14777516492392118, 0.18587873047736247, 0.1820486834116808, 0.22502228897796317, 0.13361731656710585, 0.3345365428570968, 0.1725237371084073, 0.18690304454663687, 0.1992606808576861, 0.1914085390181478, 0.18685909590593075, 0.24064212075650626, 0.2898593635563492, 0.2088270340816435, 0.18971175180005562, 0.21562694057196663, 0.1662409180477713, 0.09278311252644433, 0.20171561251069947, 0.21335999885093082, 0.208400735483518, 0.15579528061482162, 0.14166936447973133, 0.1840445784888829, 0.14961518646485272, 0.21945507810987808, 0.20564385779586214, 0.23972426345526754, 0.20112351477450796, 0.19305342393650082, 0.27070615064331327, 0.20801127670622133, 0.23259257830116398, 0.26680913814022833, 0.1871716211112754, 0.18594939872732907, 0.23301129712514668, 0.20976333044080808, 0.2512383359606212, 0.24641565768129692, 0.19248540033229156, 0.20871589877556485, 0.24377234576682638, 0.1321441701315107, 0.18814804095144233, 0.20083637653691344, 0.8983653776896581, 0.7897399099970829, 0.899022927593746, 0.17313092608935565, 0.16968683749119595, 0.16369411663486066, 0.499199805126575, 0.35861440176698356, 0.372407763751164, 0.24827475647081731, 0.23182950159108884, 0.21007355863605737, 0.1441971354435807, 0.10552470979039286, 0.23839339398596193, 0.22507727358907137, 0.215328349843542, 0.18739904461109513, 0.20405471541417164, 0.19642149632096195, 0.1750949911531834, 0.18878021254750543, 0.23373054932278836, 0.21072565825516654, 0.07245665279673541, 0.07480004023295828, 0.08297211557011963, 0.09211289884154061, 0.08151118588572426, 0.09760191616421487, 0.09117657065122109, 0.1007363321429513, 0.09415587846895557]}, "mutation_prompt": null}
{"id": "3705f5c2-6ee3-45b6-94d8-b347ade42f65", "solution": "import numpy as np\n\nclass OptimizedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory_size = 10  # Reduced size for faster updates\n        self.harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n        self.harmony_memory_values = np.full(self.harmony_memory_size, np.inf)\n        self.harmony_memory_rate = 0.85  # Adjusted for balanced exploration-exploitation\n        self.pitch_adjustment_rate = 0.35  # Slightly reduced for stability\n        self.bandwidth_reduction = 0.08  # Optimized bandwidth adjustment\n\n    def __call__(self, func):\n        evaluations = 0\n        initial_evals = min(self.harmony_memory_size, self.budget)\n        for i in range(initial_evals):\n            self.harmony_memory_values[i] = func(self.harmony_memory[i])\n            evaluations += 1\n\n        while evaluations < self.budget:\n            new_harmony = self._generate_harmony()\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            new_value = func(new_harmony)\n            evaluations += 1\n\n            if new_value < np.max(self.harmony_memory_values):\n                max_index = np.argmax(self.harmony_memory_values)\n                self.harmony_memory[max_index] = new_harmony\n                self.harmony_memory_values[max_index] = new_value\n\n            self._adaptive_memory_adjustment(evaluations)\n\n        return self.harmony_memory[np.argmin(self.harmony_memory_values)]\n\n    def _generate_harmony(self):\n        harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.harmony_memory_rate:\n                selected_harmony = np.random.randint(self.harmony_memory_size)\n                harmony[i] = self.harmony_memory[selected_harmony, i]\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    harmony[i] += (np.random.rand() - 0.5) * self.bandwidth_reduction\n            else:\n                harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return harmony\n\n    def _adaptive_memory_adjustment(self, evaluations):\n        progress_ratio = evaluations / self.budget\n        self.harmony_memory_rate = 0.8 + 0.15 * np.sin(progress_ratio * np.pi)  # Adaptive rate change\n        self.bandwidth_reduction = 0.1 * (1 - progress_ratio)  # Dynamic bandwidth reduction", "name": "OptimizedHarmonySearch", "description": "Optimized Harmony Search with adaptive memory and reduced dimensional search to enhance convergence speed and solution accuracy.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b0b6c457-269d-42a9-b460-7871a4657035", "metadata": {"aucs": [0.7765882938266643, 0.8243568710218775, 0.8254051892283129, 0.8453491914666238, 0.7969797973903472, 0.8066691149741904, 0.7694038085428194, 0.8057004252149417, 0.8074359098321042, 0.416117482931324, 0.39979565596447497, 0.4117686117310968, 0.43967257299511653, 0.309201016491197, 0.39693004247198227, 0.363309645263, 0.3987040955688068, 0.46254788041927597, 0.4929591324803436, 0.4274797346830146, 0.5237432093077367, 0.33025220060689886, 0.28151718403319015, 0.32055227417481513, 0.1762378267616148, 0.2467746772273809, 0.1822855015301268, 0.18841757599502484, 0.3110643327439262, 0.34249575855811754, 0.4693609030920708, 0.29315713845985214, 0.47811586297136355, 0.13214733198446993, 0.22123021537955867, 0.49549341280388726, 0.9302895297189708, 0.9028953744152621, 0.9167500970780503, 0.9057621447178014, 0.9006194430608284, 0.9332084418810526, 0.89652626832293, 0.8949245427945623, 0.8849838622200957, 0.4496857065665224, 0.4148989354449265, 0.4005082178925833, 0.5088276492448937, 0.4556779579787331, 0.5054035343535082, 0.4131295832594749, 0.4709980786533894, 0.5044368698197303, 0.208717723915833, 0.12748416645848737, 0.13981554615593395, 0.27870581867476185, 0.23517640773701698, 0.19442178331365922, 0.22174398496793624, 0.15118104659812925, 0.15904680331564958, 0.18294309776865514, 0.22628432926488862, 0.1878499226538627, 0.19735694554898042, 0.1865297475214842, 0.213974722263787, 0.20442626327730762, 0.28025631182761934, 0.24734224139470817, 0.1775954412244226, 0.11175136765787663, 0.1813205407926003, 0.1793427828487807, 0.15062929625750765, 0.22764037336437504, 0.2044711106723648, 0.18042916679348509, 0.25121360571027496, 9.999999999998899e-05, 9.999999999998899e-05, 0.004243899651041105, 0.01424030193240955, 9.999999999998899e-05, 9.999999999998899e-05, 0.025506414805956723, 9.999999999998899e-05, 9.999999999998899e-05, 0.06810023338537319, 0.03157372662137481, 0.06805889719731806, 0.0634902417765637, 0.027803266897662993, 0.009583574806745543, 0.15678582708459254, 0.07038501041287071, 0.11910115901058194, 0.1671439149330587, 0.06782909423696981, 0.11108198773078826, 0.07666082561224663, 0.07682108546585809, 0.10517283363132823, 0.08773228099343267, 0.14917483194303893, 0.13428525574038153, 0.08294570137962731, 0.11533685094911361, 0.15309175248560403, 0.09119246166888206, 0.044162803879114976, 0.022312248220477504, 0.08980622216966694, 0.18543801083494993, 0.1377555356806257, 0.4631307876036952, 0.4708990919795437, 0.48893104354439354, 0.5131882347682228, 0.5126887142985609, 0.5202854850270517, 0.5093673211847507, 0.49782059126092126, 0.516490219003638, 0.09406061726081394, 0.09454336716589007, 0.06392400651963404, 0.11308183399755323, 0.12639869793367886, 0.09848128835646508, 0.08652320075934894, 0.0855620326863833, 0.09707825493483646, 0.15489851382837005, 0.1543035080685755, 0.18549011760891643, 0.209682873967463, 0.21015216196834596, 0.1526069131286687, 0.21234289917022164, 0.1347655209550277, 0.15658083107630683, 0.17487280570636998, 0.1919112758955711, 0.1763315340483247, 0.1903785039347028, 0.20731355722158018, 0.29012440808872875, 0.23059304482764353, 0.24174176484193532, 0.17484068243162143, 0.09205759419712978, 0.15562172900780902, 0.10648366153287225, 0.153776235163694, 0.13379466123249095, 0.14019844462295206, 0.1266948203944951, 0.19813764037227666, 0.2096141207159149, 0.25260493289047825, 0.20692956114397643, 0.25499359802615906, 0.21084577152994965, 0.2116714433339294, 0.19173881015338468, 0.20117138005517488, 0.21214584275236148, 0.25957853556284305, 0.2537920689474782, 0.2569069639981758, 0.2102896929047421, 0.19807021774919542, 0.1899972470043002, 0.19985847506813148, 0.19349364749233577, 0.20295017181587083, 0.20182032798730487, 0.732410470762873, 0.8597354039564482, 0.1591781070748679, 0.9053200138579148, 0.9449758467322794, 0.19530688800108742, 0.17090210315549414, 0.1586008237591393, 0.16489379932627757, 0.5436497240178948, 0.5392092166732172, 0.39775297526574127, 0.16873028287854197, 0.2098511545591185, 0.213285720682872, 0.10443358988269846, 0.21116397037570445, 0.09421251894185967, 0.22142062516530991, 0.1890044193028252, 0.2028516914834393, 0.23151480628701537, 0.19974300630755948, 0.21767970443765206, 0.24781002633572502, 0.248338519110455, 0.23222975247301803, 0.0849378101833903, 0.07736208966054414, 0.10204819758100547, 0.08733788813773513, 0.11073054888327749, 0.09763238156855225, 0.10125490375348312, 0.08080991302619955, 0.09374613778867147]}, "mutation_prompt": null}
{"id": "d07d8f1d-8a6e-4c5d-9441-61393f76a2da", "solution": "import numpy as np\n\nclass EnhancedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory_size = 8  # Further reduced size for faster convergence\n        self.harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n        self.harmony_memory_values = np.full(self.harmony_memory_size, np.inf)\n        self.harmony_memory_rate = 0.9  # Increased for more exploration\n        self.pitch_adjustment_rate = 0.3  # Slightly reduced for stability\n        self.bandwidth_reduction = 0.05  # Refined bandwidth adjustment\n\n    def __call__(self, func):\n        evaluations = 0\n        initial_evals = min(self.harmony_memory_size, self.budget)\n        for i in range(initial_evals):\n            self.harmony_memory_values[i] = func(self.harmony_memory[i])\n            evaluations += 1\n\n        while evaluations < self.budget:\n            new_harmony = self._generate_harmony()\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            new_value = func(new_harmony)\n            evaluations += 1\n\n            if new_value < np.max(self.harmony_memory_values):\n                max_index = np.argmax(self.harmony_memory_values)\n                self.harmony_memory[max_index] = new_harmony\n                self.harmony_memory_values[max_index] = new_value\n\n            self._dynamic_memory_adjustment(evaluations)\n\n        return self.harmony_memory[np.argmin(self.harmony_memory_values)]\n\n    def _generate_harmony(self):\n        harmony = np.empty(self.dim)\n        selected_dims = np.random.choice(self.dim, size=max(1, int(self.dim * 0.6)), replace=False)\n        for i in range(self.dim):\n            if i in selected_dims and np.random.rand() < self.harmony_memory_rate:\n                selected_harmony = np.random.randint(self.harmony_memory_size)\n                harmony[i] = self.harmony_memory[selected_harmony, i]\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    harmony[i] += (np.random.rand() - 0.5) * self.bandwidth_reduction\n            else:\n                harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return harmony\n\n    def _dynamic_memory_adjustment(self, evaluations):\n        progress_ratio = evaluations / self.budget\n        self.harmony_memory_rate = 0.85 + 0.1 * np.cos(progress_ratio * np.pi)  # Adaptive rate change\n        self.bandwidth_reduction = 0.07 * (1 - progress_ratio)  # Dynamic bandwidth reduction", "name": "EnhancedHarmonySearch", "description": "Enhanced Harmony Search with dynamic dimension selection and streamlined adaptive mechanisms for improved performance.", "configspace": "", "generation": 38, "fitness": 0.14501808787537518, "feedback": "The algorithm EnhancedHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.09.", "error": "", "parent_id": "b0b6c457-269d-42a9-b460-7871a4657035", "metadata": {"aucs": [0.29399992780658135, 0.2743981937728899, 0.3119681073553071, 0.3307137354326094, 0.2785766738303136, 0.3215343253957913, 0.28457426626760096, 0.3107417771364943, 0.3422153478180422, 0.07400904578856116, 0.058038209898539805, 0.07833365416356497, 0.07946763639978438, 0.0766702423293576, 0.0838342330658366, 0.07468372118999411, 0.08622686079224373, 0.08121913417407245, 0.12041457555294599, 0.11395199680741674, 0.11144646513250323, 0.09477104153016025, 0.11128283221233481, 0.09770806340649707, 0.11976983835509358, 0.11921447755962622, 0.11595087097428991, 0.13496022923596973, 0.11048564046998022, 0.09387171447347686, 0.1040778880633687, 0.1267058957064735, 0.11737288126315548, 0.08349776214951854, 0.11957707983116361, 0.11660824123761704, 0.15066780473209895, 0.15330126935664923, 0.16598020687035187, 0.17376782845661143, 0.15075689562760286, 0.1469926370050353, 0.15300301461504184, 0.15505330679245977, 0.1359822018578456, 0.17758823312161587, 0.15464932199247394, 0.13421321529748054, 0.145762179652012, 0.1886113610632889, 0.16185270962934972, 0.1631539392343122, 0.14227163780087648, 0.1397533641660863, 0.22407099245452167, 0.184521432318284, 0.20709063419458185, 0.19903459529479095, 0.1914040693403395, 0.17756731172761064, 0.14349846146526068, 0.27058170874812826, 0.23215857296904352, 0.09958490452314472, 0.11674568123859119, 0.06672800236380172, 0.09007491712069027, 0.08897245621074712, 0.10736107948660356, 0.07173025997659788, 0.09595848136399932, 0.08335615996480716, 0.08404349833320135, 0.1017665001323046, 0.09173688219942744, 0.0849186475593755, 0.11765550866505436, 0.07481879585111695, 0.08684867495151016, 0.09989077290087733, 0.08958887073232524, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11328740087061195, 0.036462633797220034, 0.06581762394347535, 0.050412577521729895, 0.029581827235515945, 0.04886259260922232, 0.06571844347053157, 0.04769908956538438, 0.08839744060579724, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04528805433157157, 0.032762544465907206, 0.03205134245996999, 0.03767373299810983, 0.05008214586598514, 0.02117633677717623, 0.04035505358013847, 0.038497959284163885, 0.02087838155585864, 0.3059612067736247, 0.30503136698129907, 0.30275768627154076, 0.2798301729062347, 0.3100601316949264, 0.29629914591077455, 0.287101054261069, 0.3396746394320117, 0.2876103941287389, 0.09688330881750884, 0.07493559764626245, 0.06378543146214666, 0.07606568156300708, 0.06337921223924403, 0.07378270411131493, 0.09047616683273285, 0.07409613725487996, 0.06778379916461341, 0.16927753269325096, 0.20430782157649885, 0.15225590481603446, 0.12819175551062667, 0.1626083917279586, 0.1438429607733509, 0.137552534813282, 0.13270931529938224, 0.13988921815580524, 0.22379311151152248, 0.20626825768378332, 0.21127577581748191, 0.20071518151870893, 0.2701166417114006, 0.22725201771401937, 0.21664077686150085, 0.20771906498168125, 0.21976758774675775, 0.13859820718317728, 0.15676550682788004, 0.16847355873583825, 0.13562425628706987, 0.15733684720142938, 0.14960897323917122, 0.14233287513734505, 0.15189542242040477, 0.16871119725172934, 0.1737911910015446, 0.17361996920633027, 0.17293865430705702, 0.1732671021688975, 0.17393068679364299, 0.18304296001025333, 0.1837745523054264, 0.19026308058433705, 0.1976196015855075, 0.17224615095316254, 0.19989689536548716, 0.1864657702257012, 0.17379061910896165, 0.19004334529875055, 0.17619451483983684, 0.19249926935461303, 0.19396247180669401, 0.2074361716322406, 0.16793729932944845, 0.17502689910550162, 0.3325782731665857, 0.33659044220801493, 0.44342230447341036, 0.3995531810772458, 0.3376428299023494, 0.2960143728347636, 0.3426210068712515, 0.1796170475158848, 0.17570362468398104, 0.1739793651858137, 0.18970991716220975, 0.32158171823666504, 0.27850292542859445, 0.30447516775151584, 0.16238251319479202, 0.32780532232990134, 0.18341469862112625, 0.18054646550597586, 0.18606868591893222, 0.20259569284398493, 0.18786967472722982, 0.186091054704681, 0.18726587431159547, 0.18097934770994017, 0.184130324131503, 0.08550986800142257, 0.07008424635978094, 0.06096660048793079, 0.08468631724279041, 0.07420499187717056, 0.061447317769890875, 0.07110520270673237, 0.08071341133111198, 0.08250869029836827]}, "mutation_prompt": null}
{"id": "67e47a35-17a0-40e8-b69f-5a8f8769d31d", "solution": "import numpy as np\n\nclass OptimizedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory_size = 10  # Reduced size for faster updates\n        self.harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n        self.harmony_memory_values = np.full(self.harmony_memory_size, np.inf)\n        self.harmony_memory_rate = 0.85  # Adjusted for balanced exploration-exploitation\n        self.pitch_adjustment_rate = 0.35  # Slightly reduced for stability\n        self.bandwidth_reduction = 0.08  # Optimized bandwidth adjustment\n\n    def __call__(self, func):\n        evaluations = 0\n        initial_evals = min(self.harmony_memory_size, self.budget)\n        for i in range(initial_evals):\n            self.harmony_memory_values[i] = func(self.harmony_memory[i])\n            evaluations += 1\n\n        while evaluations < self.budget:\n            new_harmony = self._generate_harmony()\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            new_value = func(new_harmony)\n            evaluations += 1\n\n            if new_value < np.max(self.harmony_memory_values):\n                max_index = np.argmax(self.harmony_memory_values)\n                self.harmony_memory[max_index] = new_harmony\n                self.harmony_memory_values[max_index] = new_value\n\n            self._adaptive_memory_adjustment(evaluations)\n\n        return self.harmony_memory[np.argmin(self.harmony_memory_values)]\n\n    def _generate_harmony(self):\n        harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.harmony_memory_rate:\n                selected_harmony = np.random.randint(self.harmony_memory_size)\n                harmony[i] = self.harmony_memory[selected_harmony, i]\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    harmony[i] += (np.random.rand() - 0.5) * self.bandwidth_reduction\n            else:\n                harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return harmony\n\n    def _adaptive_memory_adjustment(self, evaluations):\n        progress_ratio = evaluations / self.budget\n        self.harmony_memory_rate = 0.8 + 0.15 * np.sin(progress_ratio * np.pi)  # Adaptive rate change\n        self.bandwidth_reduction = 0.1 * (1 - progress_ratio)  # Dynamic bandwidth reduction", "name": "OptimizedHarmonySearch", "description": "Optimized Harmony Search with adaptive memory and reduced dimensional search to enhance convergence speed and solution accuracy.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b0b6c457-269d-42a9-b460-7871a4657035", "metadata": {"aucs": [0.7765882938266643, 0.8243568710218775, 0.8254051892283129, 0.8453491914666238, 0.7969797973903472, 0.8066691149741904, 0.7694038085428194, 0.8057004252149417, 0.8074359098321042, 0.416117482931324, 0.39979565596447497, 0.4117686117310968, 0.43967257299511653, 0.309201016491197, 0.39693004247198227, 0.363309645263, 0.3987040955688068, 0.46254788041927597, 0.4929591324803436, 0.4274797346830146, 0.5237432093077367, 0.33025220060689886, 0.28151718403319015, 0.32055227417481513, 0.1762378267616148, 0.2467746772273809, 0.1822855015301268, 0.18841757599502484, 0.3110643327439262, 0.34249575855811754, 0.4693609030920708, 0.29315713845985214, 0.47811586297136355, 0.13214733198446993, 0.22123021537955867, 0.49549341280388726, 0.9302895297189708, 0.9028953744152621, 0.9167500970780503, 0.9057621447178014, 0.9006194430608284, 0.9332084418810526, 0.89652626832293, 0.8949245427945623, 0.8849838622200957, 0.4496857065665224, 0.4148989354449265, 0.4005082178925833, 0.5088276492448937, 0.4556779579787331, 0.5054035343535082, 0.4131295832594749, 0.4709980786533894, 0.5044368698197303, 0.208717723915833, 0.12748416645848737, 0.13981554615593395, 0.27870581867476185, 0.23517640773701698, 0.19442178331365922, 0.22174398496793624, 0.15118104659812925, 0.15904680331564958, 0.18294309776865514, 0.22628432926488862, 0.1878499226538627, 0.19735694554898042, 0.1865297475214842, 0.213974722263787, 0.20442626327730762, 0.28025631182761934, 0.24734224139470817, 0.1775954412244226, 0.11175136765787663, 0.1813205407926003, 0.1793427828487807, 0.15062929625750765, 0.22764037336437504, 0.2044711106723648, 0.18042916679348509, 0.25121360571027496, 9.999999999998899e-05, 9.999999999998899e-05, 0.004243899651041105, 0.01424030193240955, 9.999999999998899e-05, 9.999999999998899e-05, 0.025506414805956723, 9.999999999998899e-05, 9.999999999998899e-05, 0.06810023338537319, 0.03157372662137481, 0.06805889719731806, 0.0634902417765637, 0.027803266897662993, 0.009583574806745543, 0.15678582708459254, 0.07038501041287071, 0.11910115901058194, 0.1671439149330587, 0.06782909423696981, 0.11108198773078826, 0.07666082561224663, 0.07682108546585809, 0.10517283363132823, 0.08773228099343267, 0.14917483194303893, 0.13428525574038153, 0.08294570137962731, 0.11533685094911361, 0.15309175248560403, 0.09119246166888206, 0.044162803879114976, 0.022312248220477504, 0.08980622216966694, 0.18543801083494993, 0.1377555356806257, 0.4631307876036952, 0.4708990919795437, 0.48893104354439354, 0.5131882347682228, 0.5126887142985609, 0.5202854850270517, 0.5093673211847507, 0.49782059126092126, 0.516490219003638, 0.09406061726081394, 0.09454336716589007, 0.06392400651963404, 0.11308183399755323, 0.12639869793367886, 0.09848128835646508, 0.08652320075934894, 0.0855620326863833, 0.09707825493483646, 0.15489851382837005, 0.1543035080685755, 0.18549011760891643, 0.209682873967463, 0.21015216196834596, 0.1526069131286687, 0.21234289917022164, 0.1347655209550277, 0.15658083107630683, 0.17487280570636998, 0.1919112758955711, 0.1763315340483247, 0.1903785039347028, 0.20731355722158018, 0.29012440808872875, 0.23059304482764353, 0.24174176484193532, 0.17484068243162143, 0.09205759419712978, 0.15562172900780902, 0.10648366153287225, 0.153776235163694, 0.13379466123249095, 0.14019844462295206, 0.1266948203944951, 0.19813764037227666, 0.2096141207159149, 0.25260493289047825, 0.20692956114397643, 0.25499359802615906, 0.21084577152994965, 0.2116714433339294, 0.19173881015338468, 0.20117138005517488, 0.21214584275236148, 0.25957853556284305, 0.2537920689474782, 0.2569069639981758, 0.2102896929047421, 0.19807021774919542, 0.1899972470043002, 0.19985847506813148, 0.19349364749233577, 0.20295017181587083, 0.20182032798730487, 0.732410470762873, 0.8597354039564482, 0.1591781070748679, 0.9053200138579148, 0.9449758467322794, 0.19530688800108742, 0.17090210315549414, 0.1586008237591393, 0.16489379932627757, 0.5436497240178948, 0.5392092166732172, 0.39775297526574127, 0.16873028287854197, 0.2098511545591185, 0.213285720682872, 0.10443358988269846, 0.21116397037570445, 0.09421251894185967, 0.22142062516530991, 0.1890044193028252, 0.2028516914834393, 0.23151480628701537, 0.19974300630755948, 0.21767970443765206, 0.24781002633572502, 0.248338519110455, 0.23222975247301803, 0.0849378101833903, 0.07736208966054414, 0.10204819758100547, 0.08733788813773513, 0.11073054888327749, 0.09763238156855225, 0.10125490375348312, 0.08080991302619955, 0.09374613778867147]}, "mutation_prompt": null}
{"id": "be0e1af1-1c36-4680-b15b-5310a0ae8302", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor\n\nclass EnhancedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory_size = 10\n        self.harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n        self.harmony_memory_values = np.full(self.harmony_memory_size, np.inf)\n        self.harmony_memory_rate = 0.85\n        self.pitch_adjustment_rate = 0.35\n        self.bandwidth_reduction = 0.08\n\n    def __call__(self, func):\n        evaluations = 0\n        initial_evals = min(self.harmony_memory_size, self.budget)\n        with ThreadPoolExecutor() as executor:\n            futures = [executor.submit(func, self.harmony_memory[i]) for i in range(initial_evals)]\n            for i, future in enumerate(futures):\n                self.harmony_memory_values[i] = future.result()\n                evaluations += 1\n\n        while evaluations < self.budget:\n            new_harmony = self._generate_harmony()\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            new_value = func(new_harmony)\n            evaluations += 1\n\n            if new_value < np.max(self.harmony_memory_values):\n                max_index = np.argmax(self.harmony_memory_values)\n                self.harmony_memory[max_index] = new_harmony\n                self.harmony_memory_values[max_index] = new_value\n\n            self._dynamic_parameter_tuning(evaluations)\n\n        return self.harmony_memory[np.argmin(self.harmony_memory_values)]\n\n    def _generate_harmony(self):\n        harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.harmony_memory_rate:\n                selected_harmony = np.random.randint(self.harmony_memory_size)\n                harmony[i] = self.harmony_memory[selected_harmony, i]\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    harmony[i] += np.random.uniform(-self.bandwidth_reduction, self.bandwidth_reduction)\n            else:\n                harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return harmony\n\n    def _dynamic_parameter_tuning(self, evaluations):\n        progress_ratio = evaluations / self.budget\n        self.harmony_memory_rate = 0.7 + 0.2 * np.cos(progress_ratio * np.pi)\n        self.bandwidth_reduction = 0.1 * np.exp(-progress_ratio)", "name": "EnhancedHarmonySearch", "description": "Enhanced Harmony Search with dynamic parameter tuning and parallel evaluations to improve convergence speed and solution robustness.", "configspace": "", "generation": 40, "fitness": 0.2536173863757459, "feedback": "The algorithm EnhancedHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.21.", "error": "", "parent_id": "b0b6c457-269d-42a9-b460-7871a4657035", "metadata": {"aucs": [0.6723232522486435, 0.6851585304271663, 0.7210230117061385, 0.6773303668149013, 0.682146470110541, 0.6898124755719928, 0.6869285924570057, 0.6997098059025649, 0.6613138816568666, 0.3905582557139837, 0.25862211738208585, 0.2791953953824037, 0.3388111940745323, 0.41369443997583044, 0.2916683320672967, 0.3010280515098136, 0.3228437833304564, 0.34835097797137304, 0.18406496233312652, 0.18306275702058894, 0.17966769422074735, 0.18438918491323752, 0.16439791576643714, 0.35352386157944826, 0.2933804615173966, 0.18898376366566427, 0.18711546309792326, 0.15335189667049487, 0.18354793466943475, 0.16819645743908784, 0.13500476546506857, 0.16947793856640836, 0.1904237481906399, 0.24007295711295773, 0.28967745240597087, 0.1712627636479539, 0.9418235381765512, 0.9053844224361621, 0.9625580922389274, 0.9375727113830881, 0.9451751226019325, 0.9528060002527259, 0.9265274638362172, 0.9426949835078747, 0.9417777339855243, 0.3636917842469196, 0.38148607291252845, 0.39671923171350654, 0.42476637529401473, 0.39901741005008307, 0.4116459616264577, 0.42961213408404997, 0.2729417801553389, 0.278016868738894, 0.14727772345970225, 0.13959580938605998, 0.1333851520019902, 0.2860706837535095, 0.1929087400724856, 0.20703526765390434, 0.14416369407627316, 0.21243434452418353, 0.21097692033102433, 0.2637865489449426, 0.15791814876322186, 0.25081059160005403, 0.24991601471636626, 0.22085159769656026, 0.16599983291878417, 0.44281230193990495, 0.16310804324180084, 0.17123747286408508, 0.1822317772680403, 0.1327437031734362, 0.15814609236348565, 0.13221831588107413, 0.15622192637993926, 0.16926043679393588, 0.18929534681357907, 0.15664221553358604, 0.1703383642248193, 0.015723856809651937, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021114310102352096, 0.010843809797765114, 0.013478161683162404, 0.0587967257696691, 0.04098966028771156, 0.10991121762643419, 0.05237822417187421, 0.04573786242061029, 0.023218543728225294, 0.058956152635586845, 0.07409631116945126, 0.06400077920592762, 0.1603125128052434, 0.17914377839897166, 0.10149131897940444, 0.06360192457086156, 0.06701448155325629, 0.07940999705124885, 0.07587210810636624, 0.16371374070517664, 0.08475050137756646, 0.13066837104304263, 0.08387146318919736, 0.15220609106453098, 0.04103618048180502, 0.04500167695877244, 0.04818164269822012, 0.08560513472683995, 0.21777499755910878, 0.1492144256861997, 0.43180680830612317, 0.4448585737052666, 0.4410469804245284, 0.4691421087550366, 0.48896226837895396, 0.43790995334313165, 0.5080093474316403, 0.4571346507688512, 0.49272630422866026, 0.11068271059118528, 0.11324305172448113, 0.09365677156881669, 0.13729161316188532, 0.07367747097669475, 0.0976732756789499, 0.0984616752730002, 0.10123918676333832, 0.07190778816424404, 0.2756963797441099, 0.16320852026407606, 0.18780168661759866, 0.15926412167183257, 0.2686751673743606, 0.24512339856045195, 0.22655010930745834, 0.1996096089032412, 0.25188249407511976, 0.2815553342526578, 0.16900296219224653, 0.1710309777447162, 0.2563440476485074, 0.23038814348134706, 0.2488174485982798, 0.31412234012587004, 0.2723633852861953, 0.15561542739770828, 0.1439510245614518, 0.25039036481010857, 0.17462813468383298, 0.2810303654760642, 0.14373208264243587, 0.22668926858460947, 0.15590764766769138, 0.18060374438666826, 0.1675990493003452, 0.2136461398115791, 0.20519402709421675, 0.2593855583277427, 0.18847354409451778, 0.2611871574630461, 0.21233889129454542, 0.1883052429273142, 0.22526099888827888, 0.18553713582379217, 0.1931254530189782, 0.22361887099849598, 0.2152079288495904, 0.21488398997224822, 0.22935716332812117, 0.2180490265705637, 0.21333125770810668, 0.25394381982290337, 0.19517827644005226, 0.18788219779919002, 0.43023804425034984, 0.18696110348819928, 0.3178771064267375, 0.9143192490273925, 0.3171233318441836, 0.7187744284103403, 0.15435603544161347, 0.1525112883230304, 0.5619287831767072, 0.2102676235094707, 0.16448702861260878, 0.10415435055434086, 0.1985659687059036, 0.2106881827878545, 0.09440309987316287, 0.16500629671792433, 0.1581224142201052, 0.1934749883032435, 0.18259409856817788, 0.17647317377759408, 0.1844137320043696, 0.18254508015462045, 0.1927172306116096, 0.1936703246594117, 0.1931503745534826, 0.19305666330669236, 0.08609621325710048, 0.07714853018496293, 0.06955672668414514, 0.08376936714690342, 0.10081586656933794, 0.13949801460205558, 0.07909761764148371, 0.08977923147077671, 0.06845180489020353]}, "mutation_prompt": null}
{"id": "693506b3-f89f-4fa5-9702-9ee13fe4e304", "solution": "import numpy as np\n\nclass OptimizedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory_size = 10  # Reduced size for faster updates\n        self.harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n        self.harmony_memory_values = np.full(self.harmony_memory_size, np.inf)\n        self.harmony_memory_rate = 0.85  # Adjusted for balanced exploration-exploitation\n        self.pitch_adjustment_rate = 0.35  # Slightly reduced for stability\n        self.bandwidth_reduction = 0.08  # Optimized bandwidth adjustment\n\n    def __call__(self, func):\n        evaluations = 0\n        initial_evals = min(self.harmony_memory_size, self.budget)\n        for i in range(initial_evals):\n            self.harmony_memory_values[i] = func(self.harmony_memory[i])\n            evaluations += 1\n\n        while evaluations < self.budget:\n            new_harmony = self._generate_harmony()\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            new_value = func(new_harmony)\n            evaluations += 1\n\n            if new_value < np.max(self.harmony_memory_values):\n                max_index = np.argmax(self.harmony_memory_values)\n                self.harmony_memory[max_index] = new_harmony\n                self.harmony_memory_values[max_index] = new_value\n\n            self._adaptive_memory_adjustment(evaluations)\n\n        return self.harmony_memory[np.argmin(self.harmony_memory_values)]\n\n    def _generate_harmony(self):\n        harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.harmony_memory_rate:\n                selected_harmony = np.random.randint(self.harmony_memory_size)\n                harmony[i] = self.harmony_memory[selected_harmony, i]\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    harmony[i] += (np.random.rand() - 0.5) * self.bandwidth_reduction\n            else:\n                harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return harmony\n\n    def _adaptive_memory_adjustment(self, evaluations):\n        progress_ratio = evaluations / self.budget\n        self.harmony_memory_rate = 0.8 + 0.15 * np.sin(progress_ratio * np.pi)  # Adaptive rate change\n        self.bandwidth_reduction = 0.1 * (1 - progress_ratio)  # Dynamic bandwidth reduction", "name": "OptimizedHarmonySearch", "description": "Optimized Harmony Search with adaptive memory and reduced dimensional search to enhance convergence speed and solution accuracy.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b0b6c457-269d-42a9-b460-7871a4657035", "metadata": {"aucs": [0.7765882938266643, 0.8243568710218775, 0.8254051892283129, 0.8453491914666238, 0.7969797973903472, 0.8066691149741904, 0.7694038085428194, 0.8057004252149417, 0.8074359098321042, 0.416117482931324, 0.39979565596447497, 0.4117686117310968, 0.43967257299511653, 0.309201016491197, 0.39693004247198227, 0.363309645263, 0.3987040955688068, 0.46254788041927597, 0.4929591324803436, 0.4274797346830146, 0.5237432093077367, 0.33025220060689886, 0.28151718403319015, 0.32055227417481513, 0.1762378267616148, 0.2467746772273809, 0.1822855015301268, 0.18841757599502484, 0.3110643327439262, 0.34249575855811754, 0.4693609030920708, 0.29315713845985214, 0.47811586297136355, 0.13214733198446993, 0.22123021537955867, 0.49549341280388726, 0.9302895297189708, 0.9028953744152621, 0.9167500970780503, 0.9057621447178014, 0.9006194430608284, 0.9332084418810526, 0.89652626832293, 0.8949245427945623, 0.8849838622200957, 0.4496857065665224, 0.4148989354449265, 0.4005082178925833, 0.5088276492448937, 0.4556779579787331, 0.5054035343535082, 0.4131295832594749, 0.4709980786533894, 0.5044368698197303, 0.208717723915833, 0.12748416645848737, 0.13981554615593395, 0.27870581867476185, 0.23517640773701698, 0.19442178331365922, 0.22174398496793624, 0.15118104659812925, 0.15904680331564958, 0.18294309776865514, 0.22628432926488862, 0.1878499226538627, 0.19735694554898042, 0.1865297475214842, 0.213974722263787, 0.20442626327730762, 0.28025631182761934, 0.24734224139470817, 0.1775954412244226, 0.11175136765787663, 0.1813205407926003, 0.1793427828487807, 0.15062929625750765, 0.22764037336437504, 0.2044711106723648, 0.18042916679348509, 0.25121360571027496, 9.999999999998899e-05, 9.999999999998899e-05, 0.004243899651041105, 0.01424030193240955, 9.999999999998899e-05, 9.999999999998899e-05, 0.025506414805956723, 9.999999999998899e-05, 9.999999999998899e-05, 0.06810023338537319, 0.03157372662137481, 0.06805889719731806, 0.0634902417765637, 0.027803266897662993, 0.009583574806745543, 0.15678582708459254, 0.07038501041287071, 0.11910115901058194, 0.1671439149330587, 0.06782909423696981, 0.11108198773078826, 0.07666082561224663, 0.07682108546585809, 0.10517283363132823, 0.08773228099343267, 0.14917483194303893, 0.13428525574038153, 0.08294570137962731, 0.11533685094911361, 0.15309175248560403, 0.09119246166888206, 0.044162803879114976, 0.022312248220477504, 0.08980622216966694, 0.18543801083494993, 0.1377555356806257, 0.4631307876036952, 0.4708990919795437, 0.48893104354439354, 0.5131882347682228, 0.5126887142985609, 0.5202854850270517, 0.5093673211847507, 0.49782059126092126, 0.516490219003638, 0.09406061726081394, 0.09454336716589007, 0.06392400651963404, 0.11308183399755323, 0.12639869793367886, 0.09848128835646508, 0.08652320075934894, 0.0855620326863833, 0.09707825493483646, 0.15489851382837005, 0.1543035080685755, 0.18549011760891643, 0.209682873967463, 0.21015216196834596, 0.1526069131286687, 0.21234289917022164, 0.1347655209550277, 0.15658083107630683, 0.17487280570636998, 0.1919112758955711, 0.1763315340483247, 0.1903785039347028, 0.20731355722158018, 0.29012440808872875, 0.23059304482764353, 0.24174176484193532, 0.17484068243162143, 0.09205759419712978, 0.15562172900780902, 0.10648366153287225, 0.153776235163694, 0.13379466123249095, 0.14019844462295206, 0.1266948203944951, 0.19813764037227666, 0.2096141207159149, 0.25260493289047825, 0.20692956114397643, 0.25499359802615906, 0.21084577152994965, 0.2116714433339294, 0.19173881015338468, 0.20117138005517488, 0.21214584275236148, 0.25957853556284305, 0.2537920689474782, 0.2569069639981758, 0.2102896929047421, 0.19807021774919542, 0.1899972470043002, 0.19985847506813148, 0.19349364749233577, 0.20295017181587083, 0.20182032798730487, 0.732410470762873, 0.8597354039564482, 0.1591781070748679, 0.9053200138579148, 0.9449758467322794, 0.19530688800108742, 0.17090210315549414, 0.1586008237591393, 0.16489379932627757, 0.5436497240178948, 0.5392092166732172, 0.39775297526574127, 0.16873028287854197, 0.2098511545591185, 0.213285720682872, 0.10443358988269846, 0.21116397037570445, 0.09421251894185967, 0.22142062516530991, 0.1890044193028252, 0.2028516914834393, 0.23151480628701537, 0.19974300630755948, 0.21767970443765206, 0.24781002633572502, 0.248338519110455, 0.23222975247301803, 0.0849378101833903, 0.07736208966054414, 0.10204819758100547, 0.08733788813773513, 0.11073054888327749, 0.09763238156855225, 0.10125490375348312, 0.08080991302619955, 0.09374613778867147]}, "mutation_prompt": null}
{"id": "cf097101-a26e-465b-be34-c4562e659399", "solution": "import numpy as np\n\nclass EnhancedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory_size = 12  # Slightly increased for diversity\n        self.harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n        self.harmony_memory_values = np.array([np.inf] * self.harmony_memory_size)  # Simplified array initialization\n        self.memory_consideration_rate = 0.9\n        self.pitch_adjustment_rate = 0.4\n        self.bandwidth = 0.1\n\n    def __call__(self, func):\n        evaluations = 0\n        self.harmony_memory_values[:self.harmony_memory_size] = [func(harmony) for harmony in self.harmony_memory]\n        evaluations += self.harmony_memory_size\n\n        while evaluations < self.budget:\n            new_harmony = self._generate_harmony()\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            new_value = func(new_harmony)\n            evaluations += 1\n\n            worst_idx = np.argmax(self.harmony_memory_values)\n            if new_value < self.harmony_memory_values[worst_idx]:\n                self.harmony_memory[worst_idx] = new_harmony\n                self.harmony_memory_values[worst_idx] = new_value\n\n            self._update_parameters(evaluations)\n\n        return self.harmony_memory[np.argmin(self.harmony_memory_values)]\n\n    def _generate_harmony(self):\n        harmony = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.memory_consideration_rate:\n                chosen = self.harmony_memory[np.random.randint(self.harmony_memory_size), i]\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    chosen += (np.random.rand() - 0.5) * self.bandwidth\n                harmony[i] = chosen\n        return harmony\n\n    def _update_parameters(self, evaluations):\n        progress = evaluations / self.budget\n        self.memory_consideration_rate = 0.85 + 0.1 * (1 - progress)\n        self.bandwidth *= 0.95  # Gradual reduction for finer search", "name": "EnhancedHarmonySearch", "description": "Enhanced Harmony Search with efficient memory update and dynamic parameter adaptation for improved convergence speed.", "configspace": "", "generation": 42, "fitness": 0.15654099692819562, "feedback": "The algorithm EnhancedHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.10.", "error": "", "parent_id": "b0b6c457-269d-42a9-b460-7871a4657035", "metadata": {"aucs": [0.4090341062242113, 0.4417736240883714, 0.45803960727363235, 0.41283801154868793, 0.4124983632868511, 0.42903672084604205, 0.42220984385893034, 0.4745582853357708, 0.4360879406488831, 0.009928465744331705, 0.032188648741265036, 9.999999999998899e-05, 0.026538565379443768, 9.999999999998899e-05, 0.07156127654956868, 9.999999999998899e-05, 0.08961499262825001, 9.999999999998899e-05, 0.18171802630322131, 0.1759291275908469, 0.15600310788598726, 0.20046671606311905, 0.1687850670378852, 0.18354350429111632, 0.1876001118627738, 0.2194469088568508, 0.16676499917814147, 0.15172171288199954, 0.16728414931529, 0.1399905552768097, 0.16392103666776003, 0.16754091894205592, 0.17407614752641054, 0.13493412748525313, 0.1417149739715594, 0.13112543771603036, 0.18484931661631077, 0.21806448481784468, 0.1992698533547661, 0.18028869063891706, 0.21149930621190893, 0.2062730742511989, 0.1856843625432436, 0.21015631311402216, 0.20712908946300512, 0.09515402469810819, 0.16999125708888263, 0.22708746222245169, 0.12808714579730607, 0.14257199970933854, 0.22488504641722107, 0.1498472847182133, 0.13701909136062296, 0.17104246705370174, 0.2032381963330021, 0.07603462003222772, 0.13798839353351033, 0.29892693976774243, 0.18576479321583628, 0.19924553245102627, 0.1474706873154712, 0.23077519226614818, 0.2255901900651287, 0.12593301112445332, 0.1677695721208664, 0.1280547834013407, 0.14731197494064197, 0.1741826278901215, 0.1394207738990293, 0.1874664488051917, 0.17761970620752965, 0.12193866893206773, 0.12245451418159758, 0.11045178975102976, 0.1315489267105271, 0.09080736287897928, 0.11401921129829384, 0.12211500460754521, 0.13743403303797297, 9.999999999998899e-05, 0.12023264573016967, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009562099929713463, 0.09759094585333894, 0.06588482805883289, 0.06878195243493823, 0.06046871221922279, 0.006344598851093397, 0.07237307266130633, 0.06259287846853745, 0.01700086613994567, 0.04945449087622, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013208155767406415, 9.999999999998899e-05, 0.07895169129230306, 0.05383503598022221, 0.08249859269221893, 0.03913057096407879, 0.06252532514528741, 0.07773679660745181, 0.07246382706681709, 0.04996555028099792, 0.08053951830021744, 0.3501014575892253, 0.3570864178242735, 0.3175377879194564, 0.36691090832992157, 0.3886532090195708, 0.397880996819996, 0.3286715466078456, 0.33618138033677114, 0.30819344517355995, 0.14586099305815947, 0.08738331606883587, 0.04328462542430245, 0.05742081876285632, 0.08109009038568404, 0.1219712492451206, 0.09430996334106057, 0.07094617474037623, 0.07466340727585907, 0.15435675968696627, 0.23431015057697246, 0.11980039282657995, 0.15139792596385793, 0.15969052765957625, 0.10664492134714398, 0.16116829283549683, 0.1316153851281433, 0.17240165047952682, 0.14606260204849764, 0.2242492759758976, 0.16258087673886168, 0.16309982305496196, 0.24811564481181025, 0.20249092898290988, 0.2212238387660319, 0.1865173728815055, 0.2757355279695156, 0.22116117637555344, 0.1966509976839944, 0.1336851415824789, 0.19775861572900444, 0.1465157072108877, 0.09635418201996726, 0.09403551605075156, 0.16740987570448373, 0.11043061561985179, 0.19047496721283963, 0.188704788146575, 0.2015298297143151, 0.17490761770742624, 0.196011575163912, 0.206589077101066, 0.23232417615166556, 0.18333469048242335, 0.1835523801432466, 0.2014342112846037, 0.26823134196499177, 0.2921765719822169, 0.19992910419938148, 0.21535433804509507, 0.23328385629693493, 0.20780101536571838, 0.19524692682763956, 0.2114105896345888, 0.3402950318708329, 0.18713376482485733, 0.18371094396787357, 0.19704902722996298, 0.20822812109424127, 0.1686725792889714, 0.5061833411695142, 0.14193556901717297, 0.16311098377819067, 0.2580687167181357, 0.1673086563871249, 0.20873545240315172, 0.20573590779605477, 0.16518158903476, 0.18770787206423745, 0.14909798267370156, 0.16916563763624104, 0.16520551040291698, 0.1743040269669749, 0.18730582075059632, 0.17122610400329064, 0.16837098115269078, 0.1902616622552662, 0.18328436815921845, 0.18143536875130162, 0.17182348573867823, 0.17553633059462193, 0.06822844114606996, 0.0679067333442368, 0.06359063783749719, 0.06849610616692392, 0.06842706074740124, 0.05958272876405313, 0.05640375470577874, 0.08696580394262965, 0.06709020187432146]}, "mutation_prompt": null}
{"id": "c8cb2384-f316-4c02-9fd2-e931cabef24f", "solution": "import numpy as np\n\nclass OptimizedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory_size = 10  # Reduced size for faster updates\n        self.harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n        self.harmony_memory_values = np.full(self.harmony_memory_size, np.inf)\n        self.harmony_memory_rate = 0.85  # Adjusted for balanced exploration-exploitation\n        self.pitch_adjustment_rate = 0.35  # Slightly reduced for stability\n        self.bandwidth_reduction = 0.08  # Optimized bandwidth adjustment\n\n    def __call__(self, func):\n        evaluations = 0\n        initial_evals = min(self.harmony_memory_size, self.budget)\n        for i in range(initial_evals):\n            self.harmony_memory_values[i] = func(self.harmony_memory[i])\n            evaluations += 1\n\n        while evaluations < self.budget:\n            new_harmony = self._generate_harmony()\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            new_value = func(new_harmony)\n            evaluations += 1\n\n            if new_value < np.max(self.harmony_memory_values):\n                max_index = np.argmax(self.harmony_memory_values)\n                self.harmony_memory[max_index] = new_harmony\n                self.harmony_memory_values[max_index] = new_value\n\n            self._adaptive_memory_adjustment(evaluations)\n\n        return self.harmony_memory[np.argmin(self.harmony_memory_values)]\n\n    def _generate_harmony(self):\n        harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.harmony_memory_rate:\n                selected_harmony = np.random.randint(self.harmony_memory_size)\n                harmony[i] = self.harmony_memory[selected_harmony, i]\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    harmony[i] += (np.random.rand() - 0.5) * self.bandwidth_reduction\n            else:\n                harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return harmony\n\n    def _adaptive_memory_adjustment(self, evaluations):\n        progress_ratio = evaluations / self.budget\n        self.harmony_memory_rate = 0.8 + 0.15 * np.sin(progress_ratio * np.pi)  # Adaptive rate change\n        self.bandwidth_reduction = 0.1 * (1 - progress_ratio)  # Dynamic bandwidth reduction", "name": "OptimizedHarmonySearch", "description": "Optimized Harmony Search with adaptive memory and reduced dimensional search to enhance convergence speed and solution accuracy.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b0b6c457-269d-42a9-b460-7871a4657035", "metadata": {"aucs": [0.7765882938266643, 0.8243568710218775, 0.8254051892283129, 0.8453491914666238, 0.7969797973903472, 0.8066691149741904, 0.7694038085428194, 0.8057004252149417, 0.8074359098321042, 0.416117482931324, 0.39979565596447497, 0.4117686117310968, 0.43967257299511653, 0.309201016491197, 0.39693004247198227, 0.363309645263, 0.3987040955688068, 0.46254788041927597, 0.4929591324803436, 0.4274797346830146, 0.5237432093077367, 0.33025220060689886, 0.28151718403319015, 0.32055227417481513, 0.1762378267616148, 0.2467746772273809, 0.1822855015301268, 0.18841757599502484, 0.3110643327439262, 0.34249575855811754, 0.4693609030920708, 0.29315713845985214, 0.47811586297136355, 0.13214733198446993, 0.22123021537955867, 0.49549341280388726, 0.9302895297189708, 0.9028953744152621, 0.9167500970780503, 0.9057621447178014, 0.9006194430608284, 0.9332084418810526, 0.89652626832293, 0.8949245427945623, 0.8849838622200957, 0.4496857065665224, 0.4148989354449265, 0.4005082178925833, 0.5088276492448937, 0.4556779579787331, 0.5054035343535082, 0.4131295832594749, 0.4709980786533894, 0.5044368698197303, 0.208717723915833, 0.12748416645848737, 0.13981554615593395, 0.27870581867476185, 0.23517640773701698, 0.19442178331365922, 0.22174398496793624, 0.15118104659812925, 0.15904680331564958, 0.18294309776865514, 0.22628432926488862, 0.1878499226538627, 0.19735694554898042, 0.1865297475214842, 0.213974722263787, 0.20442626327730762, 0.28025631182761934, 0.24734224139470817, 0.1775954412244226, 0.11175136765787663, 0.1813205407926003, 0.1793427828487807, 0.15062929625750765, 0.22764037336437504, 0.2044711106723648, 0.18042916679348509, 0.25121360571027496, 9.999999999998899e-05, 9.999999999998899e-05, 0.004243899651041105, 0.01424030193240955, 9.999999999998899e-05, 9.999999999998899e-05, 0.025506414805956723, 9.999999999998899e-05, 9.999999999998899e-05, 0.06810023338537319, 0.03157372662137481, 0.06805889719731806, 0.0634902417765637, 0.027803266897662993, 0.009583574806745543, 0.15678582708459254, 0.07038501041287071, 0.11910115901058194, 0.1671439149330587, 0.06782909423696981, 0.11108198773078826, 0.07666082561224663, 0.07682108546585809, 0.10517283363132823, 0.08773228099343267, 0.14917483194303893, 0.13428525574038153, 0.08294570137962731, 0.11533685094911361, 0.15309175248560403, 0.09119246166888206, 0.044162803879114976, 0.022312248220477504, 0.08980622216966694, 0.18543801083494993, 0.1377555356806257, 0.4631307876036952, 0.4708990919795437, 0.48893104354439354, 0.5131882347682228, 0.5126887142985609, 0.5202854850270517, 0.5093673211847507, 0.49782059126092126, 0.516490219003638, 0.09406061726081394, 0.09454336716589007, 0.06392400651963404, 0.11308183399755323, 0.12639869793367886, 0.09848128835646508, 0.08652320075934894, 0.0855620326863833, 0.09707825493483646, 0.15489851382837005, 0.1543035080685755, 0.18549011760891643, 0.209682873967463, 0.21015216196834596, 0.1526069131286687, 0.21234289917022164, 0.1347655209550277, 0.15658083107630683, 0.17487280570636998, 0.1919112758955711, 0.1763315340483247, 0.1903785039347028, 0.20731355722158018, 0.29012440808872875, 0.23059304482764353, 0.24174176484193532, 0.17484068243162143, 0.09205759419712978, 0.15562172900780902, 0.10648366153287225, 0.153776235163694, 0.13379466123249095, 0.14019844462295206, 0.1266948203944951, 0.19813764037227666, 0.2096141207159149, 0.25260493289047825, 0.20692956114397643, 0.25499359802615906, 0.21084577152994965, 0.2116714433339294, 0.19173881015338468, 0.20117138005517488, 0.21214584275236148, 0.25957853556284305, 0.2537920689474782, 0.2569069639981758, 0.2102896929047421, 0.19807021774919542, 0.1899972470043002, 0.19985847506813148, 0.19349364749233577, 0.20295017181587083, 0.20182032798730487, 0.732410470762873, 0.8597354039564482, 0.1591781070748679, 0.9053200138579148, 0.9449758467322794, 0.19530688800108742, 0.17090210315549414, 0.1586008237591393, 0.16489379932627757, 0.5436497240178948, 0.5392092166732172, 0.39775297526574127, 0.16873028287854197, 0.2098511545591185, 0.213285720682872, 0.10443358988269846, 0.21116397037570445, 0.09421251894185967, 0.22142062516530991, 0.1890044193028252, 0.2028516914834393, 0.23151480628701537, 0.19974300630755948, 0.21767970443765206, 0.24781002633572502, 0.248338519110455, 0.23222975247301803, 0.0849378101833903, 0.07736208966054414, 0.10204819758100547, 0.08733788813773513, 0.11073054888327749, 0.09763238156855225, 0.10125490375348312, 0.08080991302619955, 0.09374613778867147]}, "mutation_prompt": null}
{"id": "39ee404a-28e9-4b90-90da-d24c2ffb25a4", "solution": "import numpy as np\n\nclass OptimizedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory_size = 10  # Reduced size for faster updates\n        self.harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n        self.harmony_memory_values = np.full(self.harmony_memory_size, np.inf)\n        self.harmony_memory_rate = 0.85  # Adjusted for balanced exploration-exploitation\n        self.pitch_adjustment_rate = 0.35  # Slightly reduced for stability\n        self.bandwidth_reduction = 0.08  # Optimized bandwidth adjustment\n\n    def __call__(self, func):\n        evaluations = 0\n        initial_evals = min(self.harmony_memory_size, self.budget)\n        for i in range(initial_evals):\n            self.harmony_memory_values[i] = func(self.harmony_memory[i])\n            evaluations += 1\n\n        while evaluations < self.budget:\n            new_harmony = self._generate_harmony()\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            new_value = func(new_harmony)\n            evaluations += 1\n\n            if new_value < np.max(self.harmony_memory_values):\n                max_index = np.argmax(self.harmony_memory_values)\n                self.harmony_memory[max_index] = new_harmony\n                self.harmony_memory_values[max_index] = new_value\n\n            self._adaptive_memory_adjustment(evaluations)\n\n        return self.harmony_memory[np.argmin(self.harmony_memory_values)]\n\n    def _generate_harmony(self):\n        harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.harmony_memory_rate:\n                selected_harmony = np.random.randint(self.harmony_memory_size)\n                harmony[i] = self.harmony_memory[selected_harmony, i]\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    harmony[i] += (np.random.rand() - 0.5) * self.bandwidth_reduction\n            else:\n                harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return harmony\n\n    def _adaptive_memory_adjustment(self, evaluations):\n        progress_ratio = evaluations / self.budget\n        self.harmony_memory_rate = 0.8 + 0.15 * np.sin(progress_ratio * np.pi)  # Adaptive rate change\n        self.bandwidth_reduction = 0.1 * (1 - progress_ratio)  # Dynamic bandwidth reduction", "name": "OptimizedHarmonySearch", "description": "Optimized Harmony Search with adaptive memory and reduced dimensional search to enhance convergence speed and solution accuracy.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b0b6c457-269d-42a9-b460-7871a4657035", "metadata": {"aucs": [0.7765882938266643, 0.8243568710218775, 0.8254051892283129, 0.8453491914666238, 0.7969797973903472, 0.8066691149741904, 0.7694038085428194, 0.8057004252149417, 0.8074359098321042, 0.416117482931324, 0.39979565596447497, 0.4117686117310968, 0.43967257299511653, 0.309201016491197, 0.39693004247198227, 0.363309645263, 0.3987040955688068, 0.46254788041927597, 0.4929591324803436, 0.4274797346830146, 0.5237432093077367, 0.33025220060689886, 0.28151718403319015, 0.32055227417481513, 0.1762378267616148, 0.2467746772273809, 0.1822855015301268, 0.18841757599502484, 0.3110643327439262, 0.34249575855811754, 0.4693609030920708, 0.29315713845985214, 0.47811586297136355, 0.13214733198446993, 0.22123021537955867, 0.49549341280388726, 0.9302895297189708, 0.9028953744152621, 0.9167500970780503, 0.9057621447178014, 0.9006194430608284, 0.9332084418810526, 0.89652626832293, 0.8949245427945623, 0.8849838622200957, 0.4496857065665224, 0.4148989354449265, 0.4005082178925833, 0.5088276492448937, 0.4556779579787331, 0.5054035343535082, 0.4131295832594749, 0.4709980786533894, 0.5044368698197303, 0.208717723915833, 0.12748416645848737, 0.13981554615593395, 0.27870581867476185, 0.23517640773701698, 0.19442178331365922, 0.22174398496793624, 0.15118104659812925, 0.15904680331564958, 0.18294309776865514, 0.22628432926488862, 0.1878499226538627, 0.19735694554898042, 0.1865297475214842, 0.213974722263787, 0.20442626327730762, 0.28025631182761934, 0.24734224139470817, 0.1775954412244226, 0.11175136765787663, 0.1813205407926003, 0.1793427828487807, 0.15062929625750765, 0.22764037336437504, 0.2044711106723648, 0.18042916679348509, 0.25121360571027496, 9.999999999998899e-05, 9.999999999998899e-05, 0.004243899651041105, 0.01424030193240955, 9.999999999998899e-05, 9.999999999998899e-05, 0.025506414805956723, 9.999999999998899e-05, 9.999999999998899e-05, 0.06810023338537319, 0.03157372662137481, 0.06805889719731806, 0.0634902417765637, 0.027803266897662993, 0.009583574806745543, 0.15678582708459254, 0.07038501041287071, 0.11910115901058194, 0.1671439149330587, 0.06782909423696981, 0.11108198773078826, 0.07666082561224663, 0.07682108546585809, 0.10517283363132823, 0.08773228099343267, 0.14917483194303893, 0.13428525574038153, 0.08294570137962731, 0.11533685094911361, 0.15309175248560403, 0.09119246166888206, 0.044162803879114976, 0.022312248220477504, 0.08980622216966694, 0.18543801083494993, 0.1377555356806257, 0.4631307876036952, 0.4708990919795437, 0.48893104354439354, 0.5131882347682228, 0.5126887142985609, 0.5202854850270517, 0.5093673211847507, 0.49782059126092126, 0.516490219003638, 0.09406061726081394, 0.09454336716589007, 0.06392400651963404, 0.11308183399755323, 0.12639869793367886, 0.09848128835646508, 0.08652320075934894, 0.0855620326863833, 0.09707825493483646, 0.15489851382837005, 0.1543035080685755, 0.18549011760891643, 0.209682873967463, 0.21015216196834596, 0.1526069131286687, 0.21234289917022164, 0.1347655209550277, 0.15658083107630683, 0.17487280570636998, 0.1919112758955711, 0.1763315340483247, 0.1903785039347028, 0.20731355722158018, 0.29012440808872875, 0.23059304482764353, 0.24174176484193532, 0.17484068243162143, 0.09205759419712978, 0.15562172900780902, 0.10648366153287225, 0.153776235163694, 0.13379466123249095, 0.14019844462295206, 0.1266948203944951, 0.19813764037227666, 0.2096141207159149, 0.25260493289047825, 0.20692956114397643, 0.25499359802615906, 0.21084577152994965, 0.2116714433339294, 0.19173881015338468, 0.20117138005517488, 0.21214584275236148, 0.25957853556284305, 0.2537920689474782, 0.2569069639981758, 0.2102896929047421, 0.19807021774919542, 0.1899972470043002, 0.19985847506813148, 0.19349364749233577, 0.20295017181587083, 0.20182032798730487, 0.732410470762873, 0.8597354039564482, 0.1591781070748679, 0.9053200138579148, 0.9449758467322794, 0.19530688800108742, 0.17090210315549414, 0.1586008237591393, 0.16489379932627757, 0.5436497240178948, 0.5392092166732172, 0.39775297526574127, 0.16873028287854197, 0.2098511545591185, 0.213285720682872, 0.10443358988269846, 0.21116397037570445, 0.09421251894185967, 0.22142062516530991, 0.1890044193028252, 0.2028516914834393, 0.23151480628701537, 0.19974300630755948, 0.21767970443765206, 0.24781002633572502, 0.248338519110455, 0.23222975247301803, 0.0849378101833903, 0.07736208966054414, 0.10204819758100547, 0.08733788813773513, 0.11073054888327749, 0.09763238156855225, 0.10125490375348312, 0.08080991302619955, 0.09374613778867147]}, "mutation_prompt": null}
{"id": "f6798c31-b659-4d48-8d7d-dfd8b4d98d80", "solution": "import numpy as np\n\nclass RefinedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory_size = 8  # Reduced size for quicker adaptation\n        self.harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n        self.harmony_memory_values = np.full(self.harmony_memory_size, np.inf)\n        self.harmony_memory_rate = 0.75  # Further reduced to emphasize exploration\n        self.pitch_adjustment_rate = 0.25  # Lowered for finer tuning\n        self.bandwidth_adjustment = 0.05  # Streamlined bandwidth\n\n    def __call__(self, func):\n        evaluations = 0\n        initial_evals = min(self.harmony_memory_size, self.budget)\n        for i in range(initial_evals):\n            self.harmony_memory_values[i] = func(self.harmony_memory[i])\n            evaluations += 1\n\n        while evaluations < self.budget:\n            new_harmony = self._generate_harmony()\n            new_value = func(new_harmony)\n            evaluations += 1\n\n            if new_value < np.max(self.harmony_memory_values):\n                max_index = np.argmax(self.harmony_memory_values)\n                self.harmony_memory[max_index] = new_harmony\n                self.harmony_memory_values[max_index] = new_value\n                self._local_search(max_index, func)\n\n            self._adaptive_memory_adjustment(evaluations)\n\n        return self.harmony_memory[np.argmin(self.harmony_memory_values)]\n\n    def _generate_harmony(self):\n        harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.harmony_memory_rate:\n                selected_harmony = np.random.randint(self.harmony_memory_size)\n                harmony[i] = self.harmony_memory[selected_harmony, i]\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    harmony[i] += (np.random.rand() - 0.5) * self.bandwidth_adjustment\n            else:\n                harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return np.clip(harmony, self.lower_bound, self.upper_bound)\n\n    def _local_search(self, index, func):\n        step_size = 0.1  # Small step for local refinement\n        original_value = self.harmony_memory_values[index]\n        for i in range(self.dim):\n            trial_harmony = self.harmony_memory[index].copy()\n            trial_harmony[i] += step_size * (np.random.rand() - 0.5)\n            trial_harmony = np.clip(trial_harmony, self.lower_bound, self.upper_bound)\n            trial_value = func(trial_harmony)\n            if trial_value < original_value:\n                self.harmony_memory[index, i] = trial_harmony[i]\n                self.harmony_memory_values[index] = trial_value\n                original_value = trial_value\n\n    def _adaptive_memory_adjustment(self, evaluations):\n        progress_ratio = evaluations / self.budget\n        self.harmony_memory_rate = 0.7 + 0.1 * np.sin(progress_ratio * np.pi)  # Modified adaptive rate change\n        self.bandwidth_adjustment = 0.05 * (1 - progress_ratio)  # Adjusted bandwidth adaptation", "name": "RefinedHarmonySearch", "description": "Refined Harmony Search by incorporating elite local search and efficient memory updates to enhance exploration and convergence speed.", "configspace": "", "generation": 45, "fitness": 0.27640115150848915, "feedback": "The algorithm RefinedHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.21.", "error": "", "parent_id": "b0b6c457-269d-42a9-b460-7871a4657035", "metadata": {"aucs": [0.7672668225542048, 0.7814541740536076, 0.767143912943496, 0.7165415153204796, 0.7659191092472464, 0.7795402971523884, 0.7566316890942368, 0.76709248385003, 0.8096768668171053, 0.3927986345535437, 0.31227644520725373, 0.33634840187518655, 0.3843720341685125, 0.318807159919716, 0.38425666867623265, 0.3171813274729911, 0.3802751720655667, 0.3445476444281427, 0.4930960041774318, 0.26220234203585413, 0.43073505469216145, 0.478769276846692, 0.41405200435628664, 0.4745171665878317, 0.28023080949578205, 0.46007799862111054, 0.2998550714872861, 0.4694064744683061, 0.3527476561828664, 0.20480667021207877, 0.3090878274672294, 0.27199903596029384, 0.14435946831465774, 0.4204179790334065, 0.4613471409403862, 0.3504624534403652, 0.8073353683665849, 0.8796554938047269, 0.8050819356911838, 0.86463883130423, 0.8365339201889108, 0.8483300513145045, 0.8773622363145679, 0.8790000114419758, 0.8946316468540885, 0.442019003842844, 0.321016043521566, 0.36556596730009616, 0.2857904149918935, 0.4216619109020523, 0.46806748138780274, 0.3455951299911755, 0.4127772518018826, 0.38376299850812134, 0.1955057951964777, 0.2123693552458531, 0.17041323105246042, 0.19193473722768872, 0.32467112047160784, 0.21826967768670225, 0.17245757028348185, 0.25672559259437366, 0.22391314059904222, 0.2094151652028826, 0.17644194666634372, 0.12953303240818548, 0.1387979515592993, 0.16467194749642133, 0.28725216611150284, 0.15487033223658508, 0.1661794010969857, 0.14975480001569863, 0.15304011395822892, 0.10068786273438768, 0.14841248261533924, 0.17336594885835055, 0.16661159246088686, 0.21373167376854896, 0.17501518898843693, 0.19034485972179993, 0.2042226360164333, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050603269262186945, 0.03364665305013681, 9.999999999998899e-05, 0.019444951575664393, 0.04622097751285659, 0.1355117774841923, 0.07147993591403268, 0.06273964165417001, 0.09271025736600003, 0.04989390707430341, 0.08449118706539394, 0.08121779057610024, 0.04421090778431502, 0.2221620445149941, 0.21680641843904436, 0.1090484981585067, 0.17195560959950396, 0.08697389809608957, 0.0797606686326211, 0.07152956108722552, 0.14054111487365661, 0.11204874259003905, 0.08444247004310323, 0.07921649354406346, 0.24226460276595896, 0.14972916913862222, 0.12699202973039958, 0.11806348639382191, 0.19358188415471056, 0.1275730494523839, 0.10147183451307484, 0.41788463783866114, 0.4380595433135219, 0.49254136402926574, 0.4662934790936405, 0.44512621174341926, 0.4527533140213562, 0.4301171102612089, 0.4924130604402792, 0.4801377398373986, 0.07037672512622462, 0.11653847614077517, 0.11359669841266407, 0.0671779195160439, 0.1407046755003154, 0.14138619587993329, 0.07912932381323112, 0.11119884706246508, 0.0938103495072733, 0.24990471792983937, 0.1396933480146061, 0.21595306765739108, 0.1841740656216636, 0.21604261035735983, 0.16880844295204223, 0.20153113458474947, 0.17282858494296582, 0.20440309577000149, 0.28950503864239285, 0.19535839262246146, 0.26938473997820067, 0.24919105458460844, 0.2667483773876075, 0.2539113533332432, 0.26200495730301, 0.2017318944940094, 0.20607894984819386, 0.11146564722783192, 0.1868232286362661, 0.27046092508512143, 0.1778933176181976, 0.2031042328506587, 0.15987833166979948, 0.18444999254388905, 0.14713313153383156, 0.15203644435956776, 0.26001490018205675, 0.22114923285056487, 0.2828197072995401, 0.2232949989398476, 0.21425354274391384, 0.2297572519881237, 0.2548865394560619, 0.24307758215202702, 0.24472864543180262, 0.25138379905547037, 0.21096368725922976, 0.21205378078425552, 0.40652549806100247, 0.1947864571747191, 0.20729237071961149, 0.20310798308073963, 0.22055938878161496, 0.19155873510519228, 0.1667601782999233, 0.1876564691104391, 0.15834923028729497, 0.8015267400051354, 0.817597550977598, 0.41531390594698336, 0.5995842974607106, 0.12273530776502595, 0.1650683879216398, 0.16904308463039053, 0.16525068914857077, 0.17914699048234928, 0.20957094861421688, 0.6136932354154201, 0.2026362417506058, 0.20845452185109103, 0.5657510310558795, 0.21152190771009205, 0.20816249771017925, 0.1978016720946113, 0.22956485232337642, 0.224593508750905, 0.20122740781195247, 0.2089162749989255, 0.2290109782701013, 0.21310478311182335, 0.24246194681983801, 0.10042222162686998, 0.08686366055457817, 0.07601161083047214, 0.09006929640586003, 0.10032002833987785, 0.13319528308483808, 0.07253322708134424, 0.12548717490871564, 0.06661408695371407]}, "mutation_prompt": null}
{"id": "5a28929d-1fdb-4fbd-b5ce-43f1b06169fd", "solution": "import numpy as np\n\nclass EfficientHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = np.array([-5.0, 5.0])\n        self.harmony_memory_size = 8  # Slightly reduced for enhanced efficiency\n        self.harmony_memory = np.random.uniform(self.bounds[0], self.bounds[1], (self.harmony_memory_size, self.dim))\n        self.harmony_memory_values = np.full(self.harmony_memory_size, np.inf)\n        self.harmony_memory_rate = 0.9  # Increased for better exploration\n        self.pitch_adjustment_rate = 0.3  # Lowered for stability\n        self.bandwidth = 0.05  # Fixed bandwidth for simplicity\n\n    def __call__(self, func):\n        evaluations = 0\n        self.harmony_memory_values[:self.harmony_memory_size] = [func(h) for h in self.harmony_memory]\n        evaluations += self.harmony_memory_size\n\n        while evaluations < self.budget:\n            new_harmony = self._generate_harmony()\n            new_harmony = np.clip(new_harmony, self.bounds[0], self.bounds[1])\n            new_value = func(new_harmony)\n            evaluations += 1\n\n            if new_value < np.max(self.harmony_memory_values):\n                self._update_memory(new_harmony, new_value)\n\n        return self.harmony_memory[np.argmin(self.harmony_memory_values)]\n\n    def _generate_harmony(self):\n        if np.random.rand() < self.harmony_memory_rate:\n            idx = np.random.choice(self.harmony_memory_size, self.dim, replace=True)\n            harmony = self.harmony_memory[idx, np.arange(self.dim)]\n            adjustments = (np.random.rand(self.dim) - 0.5) * self.bandwidth\n            harmony += np.where(np.random.rand(self.dim) < self.pitch_adjustment_rate, adjustments, 0)\n        else:\n            harmony = np.random.uniform(self.bounds[0], self.bounds[1], self.dim)\n        return harmony\n\n    def _update_memory(self, new_harmony, new_value):\n        worst_idx = np.argmax(self.harmony_memory_values)\n        self.harmony_memory[worst_idx] = new_harmony\n        self.harmony_memory_values[worst_idx] = new_value", "name": "EfficientHarmonySearch", "description": "Efficient Harmony Search with enhanced sampling and adaptive control for improved convergence and solution precision.", "configspace": "", "generation": 46, "fitness": 0.18986357667797438, "feedback": "The algorithm EfficientHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.18.", "error": "", "parent_id": "b0b6c457-269d-42a9-b460-7871a4657035", "metadata": {"aucs": [0.7345634668770661, 0.7226058737745941, 0.7449557878995523, 0.7130773845439948, 0.7239738137763024, 0.8014506558192798, 0.729883272492557, 0.8078848596506853, 0.5521840901926955, 0.4327019629043084, 0.11055696397570025, 0.16744908141536274, 0.04528871225476827, 9.999999999998899e-05, 0.0025663851688468853, 0.011166890719936928, 0.03663361829180489, 9.999999999998899e-05, 0.08414592894071427, 0.05174181207420114, 0.0781305260391133, 0.03095197294439933, 0.06345640991874224, 0.07390574093430247, 0.07417464948231367, 0.08703363137945141, 0.08751248590220362, 0.054930767563534766, 0.05724437570200769, 0.050823113722621605, 0.05847099067192374, 0.04083818457203836, 0.05802522322848869, 0.02513911885208331, 0.04051541582398055, 0.018268813701728837, 0.5097306419615232, 0.4348861301719582, 0.5116131477512518, 0.23725110803085003, 0.35411990183760167, 0.5081074373699022, 0.30260399735988563, 0.27618153271959855, 0.13192519900653388, 0.39690996192421246, 0.282419865861521, 0.3020095769441886, 0.2672892264484309, 0.412142442065647, 0.1696489179553743, 0.3013269778338443, 0.1787631382794318, 0.1637894771139028, 0.100803470482422, 0.08341550860200753, 0.10549238614119427, 0.10451007143980662, 0.08308466573537698, 0.07430581312197937, 0.08744156154927751, 0.12967447116529818, 0.15255880320090787, 0.12489610199470758, 0.1583764984610423, 0.35623611925166665, 0.10588696137343556, 0.10422273346397981, 0.09688176626030731, 0.1590217754385792, 0.1658545127594876, 0.17843162387479627, 0.24420445387144285, 0.10981373192668031, 0.26326481246203004, 0.10083776227132879, 0.1301927793338491, 0.10096210112464199, 0.2169551679848828, 9.999999999998899e-05, 0.20999336957854997, 9.999999999998899e-05, 0.07133585904565443, 9.999999999998899e-05, 9.999999999998899e-05, 0.011948431649911107, 0.005206085032813057, 0.00045051554242325764, 9.999999999998899e-05, 0.06829589627113675, 0.03469064235497732, 0.06668962904600662, 0.07726805880886056, 0.06462568932399115, 0.005924664980732075, 0.043762113959283866, 0.07306691444162372, 0.06319797464056831, 0.07710733762800426, 0.1628830737352358, 0.164059413410779, 0.20642581270547955, 0.11637170455442081, 0.27536216945093817, 0.12398067537427282, 0.08870022711373782, 0.1396818226404063, 0.0521813650478371, 0.09518752300843858, 0.05923924497838029, 0.04757462730841522, 0.09931554239258589, 0.09802440541017932, 0.08879241648712755, 0.09108462532181039, 0.10808544243070395, 0.07655171258611504, 0.32221158682164175, 0.42515811502908196, 0.4282913553685507, 0.42488930347531073, 0.4608990541771093, 0.4131370071873397, 0.48161899237607164, 0.4473402269501484, 0.440830518708228, 0.09374556590105554, 0.05757848503711649, 0.1130827320101383, 0.07092754781467303, 0.049223300096454814, 0.0657617762859225, 0.05436579062995128, 0.07366812574353065, 0.07388280956021864, 0.13592479077361108, 0.15978526076675703, 0.14255359139825163, 0.19984722254643472, 0.17695424173373808, 0.16112391126264214, 0.11715914235838831, 0.11226783887806346, 0.13564885206084476, 0.15640502232566456, 0.22844066092961968, 0.14652443368103918, 0.16695130594109164, 0.19560191215535438, 0.17258977004017528, 0.16432063127373653, 0.16373128356806643, 0.15002217219297764, 0.09923972125932978, 0.1080831460297752, 0.0796629848185394, 0.08870625558559464, 0.11914549697415733, 0.12153451966254869, 0.10813481830138738, 0.12107657830832652, 0.08384418270143634, 0.22517000717135816, 0.16444900467064616, 0.32311569561960574, 0.2533512065954858, 0.2313205489825001, 0.16631767357323024, 0.21635168160708695, 0.19982654375810527, 0.18396142018261863, 0.17242172101504982, 0.17286782927696953, 0.18354317141711685, 0.20194360690607804, 0.1759202329708478, 0.1681133528823524, 0.18160861920865767, 0.179623466371981, 0.17859769718103924, 0.15798093916107048, 0.8727926501086609, 0.16392085612238483, 0.7874106687935937, 0.1988597193963566, 0.8686571924264563, 0.7158889098087239, 0.15423667385696005, 0.15662182985884154, 0.19668358153938048, 0.155409761933621, 0.19785406228935232, 0.1510413355019411, 0.2077253189412286, 0.45292618688073794, 0.10413505366736919, 0.10435849610633141, 0.22020191947302992, 0.2491117736910462, 0.21482658321525927, 0.20605588347877213, 0.22224189034817254, 0.2334448854681176, 0.24622018120843914, 0.22750188018364248, 0.18420821084368166, 0.25626416449010914, 0.04613079253719521, 0.0816246155355348, 0.057034871634315976, 0.05043880417262736, 0.06238860769969701, 0.09774047944174724, 0.04831587971949902, 0.06956918823827496, 0.08225189317997805]}, "mutation_prompt": null}
{"id": "64c91a42-6280-430e-af21-da93ef90e9a7", "solution": "import numpy as np\n\nclass EnhancedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory_size = 12  # Slightly increased for diversity\n        self.harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n        self.harmony_memory_values = np.array([np.inf] * self.harmony_memory_size)\n        self.harmony_memory_rate = 0.9  # Increased for exploration\n        self.dynamic_pitch_adjustment_rate = 0.2  # Dynamic pitch adjustment\n        self.bandwidth_reduction = 0.07  # Fine-tuned bandwidth adjustment\n\n    def __call__(self, func):\n        evaluations = 0\n        for i in range(min(self.harmony_memory_size, self.budget)):\n            self.harmony_memory_values[i] = func(self.harmony_memory[i])\n            evaluations += 1\n\n        while evaluations < self.budget:\n            new_harmony = self._generate_harmony()\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            new_value = func(new_harmony)\n            evaluations += 1\n\n            if new_value < max(self.harmony_memory_values):\n                worst_index = np.argmax(self.harmony_memory_values)\n                self.harmony_memory[worst_index] = new_harmony\n                self.harmony_memory_values[worst_index] = new_value\n\n            self._dynamic_adjustment(evaluations)\n\n        return self.harmony_memory[np.argmin(self.harmony_memory_values)]\n\n    def _generate_harmony(self):\n        harmony = np.zeros(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.harmony_memory_rate:\n                selected_index = np.random.choice(self.harmony_memory_size)\n                harmony[i] = self.harmony_memory[selected_index, i]\n                if np.random.rand() < self.dynamic_pitch_adjustment_rate:\n                    harmony[i] += (np.random.rand() - 0.5) * self.bandwidth_reduction\n            else:\n                harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return harmony\n\n    def _dynamic_adjustment(self, evaluations):\n        progress_ratio = evaluations / self.budget\n        self.dynamic_pitch_adjustment_rate = 0.25 * np.cos(progress_ratio * np.pi / 2)  # Cosine-based rate adjustment\n        self.bandwidth_reduction = 0.09 * (1 - progress_ratio ** 2)  # Quadratic bandwidth modification", "name": "EnhancedHarmonySearch", "description": "Enhanced Harmony Search with dynamic pitch adjustment and strategic harmony selection for improved convergence and performance.", "configspace": "", "generation": 47, "fitness": 0.27651139210180264, "feedback": "The algorithm EnhancedHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.22.", "error": "", "parent_id": "b0b6c457-269d-42a9-b460-7871a4657035", "metadata": {"aucs": [0.8014883900601789, 0.7433893689607503, 0.8126160214349982, 0.822544282971116, 0.8401199510633798, 0.7631035796134278, 0.7844525602720804, 0.809258595066261, 0.7857649820828724, 0.4211869059464344, 0.5139211509762591, 0.4164701502092786, 0.2972131501598211, 0.4553358722083982, 0.40315112518721763, 0.30354171889411397, 0.35034233445895, 0.38614977462327527, 0.3161208959634286, 0.4365292276442241, 0.2626523506874079, 0.17603533039934027, 0.4533271447711098, 0.565410632923833, 0.5336373419878586, 0.49132633168605266, 0.42192654237490446, 0.31338060202339935, 0.3699853241747344, 0.16949550742590802, 0.38738975706244705, 0.26506429250218266, 0.3069540644841745, 0.4626973224815387, 0.1893126627242928, 0.14753061643670917, 0.8951409285127914, 0.9269319985652092, 0.9187485982816401, 0.9272572799737812, 0.9146377082098416, 0.8798749963053472, 0.9078503944136364, 0.9193768241010323, 0.8758125648941582, 0.34729035327990054, 0.3465686923876835, 0.295998056102296, 0.40532308248588833, 0.39590958221875294, 0.5226826046747548, 0.3851776215472986, 0.3143114296202374, 0.3800411123474895, 0.15804166487561833, 0.09189912783808885, 0.20819849999653917, 0.2841687742146609, 0.18686964659613048, 0.15022774897354607, 0.18033303477539975, 0.13795250538728854, 0.20376563738463083, 0.17153638906467517, 0.18324226599373183, 0.25413338190451273, 0.16825614580529746, 0.19743967695577236, 0.3031642617653514, 0.3859219936060292, 0.2928226977128766, 0.15654665417687286, 0.17383441607018535, 0.16597043927330746, 0.17167103058680366, 0.16303761740538414, 0.16927978096705543, 0.16416406272550743, 0.19321585896754845, 0.20017437919805625, 0.17657131225810863, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007437953724286905, 0.039796659518790745, 9.999999999998899e-05, 0.06582702754855474, 0.04320723293768847, 0.09945348074559202, 0.053112107741934755, 0.009823129913977047, 0.042069030917874395, 0.1680393103779001, 0.039141849842277754, 0.017400052046874226, 0.2104460466272402, 0.03850036853115979, 0.2025304744972839, 0.10447601306296805, 0.09998676305596166, 0.1370058049969919, 0.12176609105490499, 0.08893050581628104, 0.23592677228882808, 0.11905692742905305, 0.0689191905017853, 0.13919997586162614, 0.09344298700192377, 0.20643696306897896, 0.15281678655248998, 0.14366880057624853, 0.14321609056560392, 0.1725470792863696, 0.4784415319494074, 0.5639581972062832, 0.47279951861557157, 0.511281529670427, 0.5043927401643604, 0.47674665288256746, 0.4493645042804275, 0.5054125657956468, 0.46412553475667684, 0.050519983614050634, 0.1116708632115051, 0.14806886003333308, 0.09472138812880015, 0.07284975247429282, 0.12729725326350272, 0.13757557351352256, 0.10302736267192891, 0.06446622003825109, 0.15450976341408473, 0.23160858221591452, 0.18778062962215658, 0.19716494586343325, 0.20268714197292959, 0.18768768681170955, 0.2059753833729696, 0.16941513745750203, 0.15867237956806368, 0.1834950574555928, 0.20402448409810214, 0.17025238657354347, 0.21873580949188687, 0.18417681625744542, 0.19850822117816125, 0.28505980896687566, 0.3861372776314166, 0.2857873287685022, 0.10603691742695043, 0.27815914239552797, 0.1443121719554622, 0.19464452668767684, 0.15405469289003326, 0.22761383633402854, 0.14262324353076983, 0.19559621007979444, 0.10383627187239841, 0.193695298290802, 0.19098149294033417, 0.28534510175027705, 0.2614805852762305, 0.20685263374019347, 0.27628416826044955, 0.2386932502578366, 0.21736190164404356, 0.2471551433612823, 0.23043005428821306, 0.23022121333690426, 0.2137556572898126, 0.2151674106827709, 0.20246476056965035, 0.19115094815003275, 0.20514323596471473, 0.21159147866877337, 0.19044021583486526, 0.1877550968934243, 0.8672309195603577, 0.16773872055636652, 0.2016277779879434, 0.9496362030689569, 0.19702410011465699, 0.16805804844287886, 0.157733443044621, 0.15218641912405506, 0.1692586822848552, 0.16734991559230894, 0.36887984789715644, 0.21174502624310576, 0.3828269351478514, 0.20887685763124808, 0.38827104879255725, 0.1697115198974336, 0.30132728608220094, 0.24428695329500938, 0.1899251344162185, 0.1884883028410942, 0.22441911292939798, 0.20147263051631292, 0.20743558916637017, 0.20908333962333203, 0.2069059659835214, 0.22768441544262363, 0.1022822196542722, 0.0866239271387752, 0.08374879856840378, 0.08624725811489331, 0.11370887929529838, 0.07887152341627501, 0.09024303051031635, 0.07249884499606118, 0.09672631281401167]}, "mutation_prompt": null}
{"id": "bbf06d58-130f-4f12-9305-08976405c69a", "solution": "import numpy as np\n\nclass EnhancedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory_size = 8  # Reduced size for faster adaptation\n        self.harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n        self.harmony_memory_values = np.array([np.inf] * self.harmony_memory_size)\n        self.harmony_memory_rate = 0.9  # Enhanced for better exploration\n        self.pitch_adjustment_rate = 0.3  # Adjusted for stability and exploration\n        self.bandwidth = 0.1  # Fixed bandwidth for consistent pitch adjustment\n\n    def __call__(self, func):\n        evaluations = 0\n        initial_evals = min(self.harmony_memory_size, self.budget)\n        self.harmony_memory_values[:initial_evals] = [func(hm) for hm in self.harmony_memory[:initial_evals]]\n        evaluations += initial_evals\n        \n        while evaluations < self.budget:\n            new_harmony = self._generate_harmony()\n            new_value = func(new_harmony)\n            evaluations += 1\n\n            worst_index = np.argmax(self.harmony_memory_values)\n            if new_value < self.harmony_memory_values[worst_index]:\n                self.harmony_memory[worst_index] = new_harmony\n                self.harmony_memory_values[worst_index] = new_value\n\n            self._dynamic_tuning(evaluations)\n        \n        return self.harmony_memory[np.argmin(self.harmony_memory_values)]\n\n    def _generate_harmony(self):\n        harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.harmony_memory_rate:\n                selected_harmony = self.harmony_memory[np.random.randint(self.harmony_memory_size), i]\n                harmony[i] = selected_harmony + np.random.uniform(-self.bandwidth, self.bandwidth) if np.random.rand() < self.pitch_adjustment_rate else selected_harmony\n            else:\n                harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return np.clip(harmony, self.lower_bound, self.upper_bound)\n\n    def _dynamic_tuning(self, evaluations):\n        progress = evaluations / self.budget\n        self.harmony_memory_rate = 0.9 - 0.2 * progress  # Decreasing rate for refined search", "name": "EnhancedHarmonySearch", "description": "Enhanced Harmony Search with dynamic parameter tuning and efficient memory updates for improved convergence.", "configspace": "", "generation": 48, "fitness": 0.2565142602287514, "feedback": "The algorithm EnhancedHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.22.", "error": "", "parent_id": "b0b6c457-269d-42a9-b460-7871a4657035", "metadata": {"aucs": [0.709177381900703, 0.6890818424809793, 0.7435955284403586, 0.7220512984647244, 0.6561317226412149, 0.7442127301091933, 0.7040111659792625, 0.7100088142469565, 0.7323336677664964, 0.2827753173883393, 0.28134160972581645, 0.23210052942297466, 0.31201169732824974, 0.3445613037911195, 0.2970247272143616, 0.30666463795638, 0.4031978213550086, 0.2793234620536479, 0.17762047875948683, 0.17139934065539242, 0.33494147531388596, 0.1722217215702987, 0.16111687709870626, 0.30596501052548986, 0.1608776486721767, 0.3469419668707848, 0.31532013867451203, 0.18009135647753793, 0.1613353706056836, 0.32088309594326503, 0.18482060358050145, 0.20449514754302356, 0.16932793390406586, 0.16570926848248368, 0.16569775791828723, 0.20959250143736707, 0.9065474213538863, 0.9492956096385172, 0.9493273032384315, 0.9368608709406715, 0.9393814771203813, 0.9670948867579161, 0.9431327548346728, 0.9364049700920216, 0.9552732856092859, 0.416575659694738, 0.3446689210645407, 0.42287352018996494, 0.39966389068072783, 0.3666212467417038, 0.37009280093381947, 0.4043101338989773, 0.3409051067348492, 0.3331753265186347, 0.1617451336253244, 0.15503381438470099, 0.1495393214650549, 0.19936381759998367, 0.23970808135700106, 0.21429161554413434, 0.17037623900677767, 0.18124496023369863, 0.11918901003167015, 0.19099066898458483, 0.16597397020623117, 0.39067399174919004, 0.1346754549027801, 0.31043221151414313, 0.15789998722132093, 0.16626044434720355, 0.19932261671711826, 0.16752024064055526, 0.1764040414768442, 0.11868716581061312, 0.15675081086765497, 0.17140652995388939, 0.19646080858869164, 0.17558053214828906, 0.13615906124507782, 0.14932580607007895, 0.17286986494533851, 9.999999999998899e-05, 0.03849219126087644, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.051470562842908074, 0.043812620412010284, 0.05701741614174427, 0.05253676719932576, 0.07045195266373572, 0.04900660702559867, 0.031616209420057384, 0.08768789944427413, 0.06477878459006803, 0.09071140883778339, 0.1788765456457866, 0.12344420684990631, 0.04303698649634935, 0.18323833842543302, 0.07917241498935512, 0.09403894446408467, 0.07954520232537465, 0.11882477679293801, 0.06665702357228498, 0.18289436842005702, 0.042292606636066155, 0.07154216658761703, 0.05467099215246274, 0.052518790937064797, 0.17104364331202138, 0.08406216482584572, 0.10054950045160826, 0.12092700406513579, 0.46994494779522467, 0.5285240543778629, 0.49193992908075523, 0.44340240551442467, 0.4764877749185328, 0.458192858342491, 0.4452684349427687, 0.47961144666921707, 0.46222771324740153, 0.07457359819637399, 0.09467803133146646, 0.07906748326698454, 0.04660755089808133, 0.072246147756854, 0.09861242323522224, 0.08172296806991419, 0.11435050947910586, 0.11372724919353261, 0.12875402526276847, 0.2194072798422646, 0.18677757367748538, 0.17278600919233145, 0.2837274094408443, 0.12027885635531543, 0.18491513911332635, 0.34465578497341853, 0.1496219096266126, 0.2356928382624569, 0.2346737588732185, 0.22154514203823572, 0.2258322134780567, 0.34465289949925737, 0.17536044621308589, 0.1508021559172683, 0.24801265295053743, 0.3125091490125257, 0.10762620492576402, 0.1130545953019022, 0.1846617151014447, 0.15465528485842583, 0.1771341824079813, 0.16066401643922545, 0.16563767410932073, 0.14950877642133387, 0.16924422547585205, 0.20388197641767603, 0.19094759429961605, 0.24950162218230987, 0.19376587229896813, 0.2135066115471005, 0.31462213171910625, 0.21665002964532787, 0.20598458882671944, 0.17398124324819586, 0.2233005357682225, 0.24524277403230754, 0.20720203416040617, 0.5937434330435543, 0.21360727731362772, 0.2544897500606018, 0.20228144319921737, 0.2200438803973187, 0.1817631979555101, 0.15977296213677927, 0.18896811558239712, 0.41662645565269707, 0.6530049975492355, 0.8740248239850881, 0.9062082400254946, 0.16300164616303447, 0.1149537646848181, 0.17351138519930176, 0.554794151135432, 0.31500705430998077, 0.11947724660032599, 0.3761118786433886, 0.15567154268471073, 0.11086824739537382, 0.20892501752103043, 0.08248487958986972, 0.2490618574186958, 0.19407559015612375, 0.21486603975131113, 0.17983219163334996, 0.23811999453550814, 0.18036323775492513, 0.18524860201854354, 0.18531066316685152, 0.18761172594402686, 0.1985680843170904, 0.0935019469791365, 0.0885029674927591, 0.08247069579094946, 0.07589810538604214, 0.11956311051381796, 0.07358719780921674, 0.08099194953887967, 0.1079667914742437, 0.08656117189941381]}, "mutation_prompt": null}
{"id": "bc72c201-a753-433b-a552-7222d85c2b59", "solution": "import numpy as np\n\nclass EnhancedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory_size = 8  # Reduced size for faster convergence\n        self.harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n        self.harmony_memory_values = np.full(self.harmony_memory_size, np.inf)\n        self.harmony_memory_rate = 0.9  # Increased for exploration benefits\n        self.pitch_adjustment_rate = 0.3  # Balanced for stability\n        self.bandwidth_initial = 0.1\n\n    def __call__(self, func):\n        evaluations = 0\n        for i in range(self.harmony_memory_size):\n            if evaluations < self.budget:\n                self.harmony_memory_values[i] = func(self.harmony_memory[i])\n                evaluations += 1\n\n        while evaluations < self.budget:\n            new_harmony = self._generate_harmony(evaluations / self.budget)\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            new_value = func(new_harmony)\n            evaluations += 1\n\n            worst_index = np.argmax(self.harmony_memory_values)\n            if new_value < self.harmony_memory_values[worst_index]:\n                self.harmony_memory[worst_index] = new_harmony\n                self.harmony_memory_values[worst_index] = new_value\n\n        return self.harmony_memory[np.argmin(self.harmony_memory_values)]\n\n    def _generate_harmony(self, progress_ratio):\n        harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.harmony_memory_rate:\n                selected_harmony = np.random.randint(self.harmony_memory_size)\n                harmony[i] = self.harmony_memory[selected_harmony, i]\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    harmony[i] += (np.random.rand() - 0.5) * self.bandwidth_initial * (1 - progress_ratio)\n            else:\n                harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return harmony", "name": "EnhancedHarmonySearch", "description": "Enhanced Harmony Search with dynamic parameter tuning and optimized memory management for improved convergence efficiency.", "configspace": "", "generation": 49, "fitness": 0.268971784325043, "feedback": "The algorithm EnhancedHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.23.", "error": "", "parent_id": "b0b6c457-269d-42a9-b460-7871a4657035", "metadata": {"aucs": [0.8374782535366316, 0.8346166621684824, 0.8631006530963836, 0.7964953369941717, 0.817108890146342, 0.8062897363449062, 0.7776118081253163, 0.8016635536243235, 0.8466635405016139, 0.38023219125480157, 0.5493094448923866, 0.3717029463144407, 0.3887848243318692, 0.4609454915520803, 0.42413437946611976, 0.41382450586553543, 0.4577122359029927, 0.37508416689099777, 0.4009448990531109, 0.37105814096653555, 0.3817723918380388, 0.5256190787926243, 0.16419526964908948, 0.4413241763222545, 0.33675223659879816, 0.583802038579562, 0.48649119520882866, 0.380932003152314, 0.1856915773510387, 0.17492049391111308, 0.41413985793643493, 0.17713499564880275, 0.39880238836264725, 0.29009513450972124, 0.4404542544362532, 0.16692557630346705, 0.8934805184175614, 0.920139004484462, 0.9134514365840638, 0.8753537585452216, 0.9057844024647463, 0.9160100600882165, 0.8881622848472128, 0.8956576848236941, 0.9387232859628283, 0.4673700763791947, 0.4324628715536726, 0.4519301842960296, 0.4656629848438104, 0.2797950317589465, 0.47552081602162954, 0.4386951333928516, 0.3266462235564067, 0.4148886475172785, 0.15634506734314058, 0.1241768080600727, 0.2025698393915265, 0.35979749013992934, 0.19839524452663748, 0.19516751081293804, 0.18489350517177605, 0.1547807589604263, 0.14272539383257832, 0.18061917542329542, 0.18433329289208222, 0.30017724967531745, 0.1488312670904144, 0.17081806797728694, 0.18883368230987974, 0.1795634140290011, 0.21859056057037451, 0.18658414878335383, 0.1891829924878523, 0.11267836291727018, 0.19329932669620342, 0.1791452485102324, 0.19693185215919196, 0.21975738112773147, 0.13067001078967733, 0.19795747441113387, 0.13226989062750094, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008886485525633314, 0.027875822246786863, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.046363426390407025, 0.031795468315939934, 0.019656749369049376, 0.04922560830866096, 0.058084243064948526, 0.0792279935167628, 0.028092403843083646, 0.07227607952450854, 0.10753810883934056, 0.09661245847495903, 0.22048842323961293, 0.11932852963034146, 0.05535020368966559, 0.1117917429592491, 0.10557724342369312, 0.12245126064897216, 0.08372859266159971, 0.14832919304359804, 0.21713003686061383, 0.03320573380085878, 0.04909310561704261, 0.10258238929112717, 0.047077467496196235, 0.05404157002978427, 0.1651110065777095, 0.08438316291576375, 0.11599944769653758, 0.27055687873446, 0.4760279173551052, 0.47764813003594364, 0.5205387212992961, 0.4849885289432998, 0.47298650916431273, 0.5161073799473131, 0.4938592891337067, 0.49229056409745975, 0.5201488057344901, 0.06043189097065438, 0.11373881612229975, 0.1969809621614267, 0.04654010964137889, 0.06831294657108389, 0.09894411955532179, 0.10893711719561361, 0.0984669455324445, 0.07401829555005301, 0.1932696909248327, 0.21804998995838187, 0.15216216108631397, 0.2491633215227539, 0.15414437977709405, 0.1672777215592488, 0.1512580915195596, 0.298896053363508, 0.20256268888802764, 0.23982535994626286, 0.23783352275352243, 0.17460581705287637, 0.21461074188769735, 0.1931576216530242, 0.17196121395796904, 0.16565137181122647, 0.22666898071675246, 0.21193244548691514, 0.10478508906862294, 0.11323343402495989, 0.11995203032037283, 0.1571639711403301, 0.13382487148162014, 0.18518870168317214, 0.15783390273190157, 0.09894467230588433, 0.09898594663087734, 0.19308040737403176, 0.21500866966008791, 0.27996920199166164, 0.17479781579332887, 0.1720217808611798, 0.22598337096226617, 0.21239430847156504, 0.1938113673919829, 0.23849606532559253, 0.238598741371019, 0.24880468957673363, 0.21303206906542915, 0.21011368865193014, 0.20237904302971277, 0.24474243663017692, 0.20151585994290144, 0.1919693377645837, 0.2056394896624424, 0.1597077284857349, 0.18901425447767628, 0.13695092338215187, 0.17265047953522228, 0.9078646560188892, 0.16614783246182308, 0.13514262398221, 0.11502421046774902, 0.16513374301448114, 0.5207169530420306, 0.15310563454349435, 0.11554502624933283, 0.4128563409745568, 0.15500013594363715, 0.20957834177592172, 0.11334422029668367, 0.15550986453065307, 0.21613647985868312, 0.2649380911245457, 0.23255939927666003, 0.20773683982148272, 0.19361820191683932, 0.21311277997084976, 0.20554590985618504, 0.2445829340252339, 0.23830839020146122, 0.22472133211775758, 0.0842334753116204, 0.08800276362561821, 0.07694034784189374, 0.061395382353641614, 0.07607352148788793, 0.06769803362323434, 0.08484990530514092, 0.1180690915881194, 0.05471579230705759]}, "mutation_prompt": null}
{"id": "da473dc4-ce71-4ac2-b55b-9c68fe403ebc", "solution": "import numpy as np\n\nclass OptimizedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory_size = 10  # Reduced size for faster updates\n        self.harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n        self.harmony_memory_values = np.full(self.harmony_memory_size, np.inf)\n        self.harmony_memory_rate = 0.85  # Adjusted for balanced exploration-exploitation\n        self.pitch_adjustment_rate = 0.35  # Slightly reduced for stability\n        self.bandwidth_reduction = 0.08  # Optimized bandwidth adjustment\n\n    def __call__(self, func):\n        evaluations = 0\n        initial_evals = min(self.harmony_memory_size, self.budget)\n        for i in range(initial_evals):\n            self.harmony_memory_values[i] = func(self.harmony_memory[i])\n            evaluations += 1\n\n        while evaluations < self.budget:\n            new_harmony = self._generate_harmony()\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            new_value = func(new_harmony)\n            evaluations += 1\n\n            if new_value < np.max(self.harmony_memory_values):\n                max_index = np.argmax(self.harmony_memory_values)\n                self.harmony_memory[max_index] = new_harmony\n                self.harmony_memory_values[max_index] = new_value\n\n            self._adaptive_memory_adjustment(evaluations)\n\n        return self.harmony_memory[np.argmin(self.harmony_memory_values)]\n\n    def _generate_harmony(self):\n        harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.harmony_memory_rate:\n                selected_harmony = np.random.randint(self.harmony_memory_size)\n                harmony[i] = self.harmony_memory[selected_harmony, i]\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    harmony[i] += (np.random.rand() - 0.5) * self.bandwidth_reduction\n            else:\n                harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return harmony\n\n    def _adaptive_memory_adjustment(self, evaluations):\n        progress_ratio = evaluations / self.budget\n        self.harmony_memory_rate = 0.8 + 0.15 * np.sin(progress_ratio * np.pi)  # Adaptive rate change\n        self.bandwidth_reduction = 0.1 * (1 - progress_ratio)  # Dynamic bandwidth reduction", "name": "OptimizedHarmonySearch", "description": "Optimized Harmony Search with adaptive memory and reduced dimensional search to enhance convergence speed and solution accuracy.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b0b6c457-269d-42a9-b460-7871a4657035", "metadata": {"aucs": [0.7765882938266643, 0.8243568710218775, 0.8254051892283129, 0.8453491914666238, 0.7969797973903472, 0.8066691149741904, 0.7694038085428194, 0.8057004252149417, 0.8074359098321042, 0.416117482931324, 0.39979565596447497, 0.4117686117310968, 0.43967257299511653, 0.309201016491197, 0.39693004247198227, 0.363309645263, 0.3987040955688068, 0.46254788041927597, 0.4929591324803436, 0.4274797346830146, 0.5237432093077367, 0.33025220060689886, 0.28151718403319015, 0.32055227417481513, 0.1762378267616148, 0.2467746772273809, 0.1822855015301268, 0.18841757599502484, 0.3110643327439262, 0.34249575855811754, 0.4693609030920708, 0.29315713845985214, 0.47811586297136355, 0.13214733198446993, 0.22123021537955867, 0.49549341280388726, 0.9302895297189708, 0.9028953744152621, 0.9167500970780503, 0.9057621447178014, 0.9006194430608284, 0.9332084418810526, 0.89652626832293, 0.8949245427945623, 0.8849838622200957, 0.4496857065665224, 0.4148989354449265, 0.4005082178925833, 0.5088276492448937, 0.4556779579787331, 0.5054035343535082, 0.4131295832594749, 0.4709980786533894, 0.5044368698197303, 0.208717723915833, 0.12748416645848737, 0.13981554615593395, 0.27870581867476185, 0.23517640773701698, 0.19442178331365922, 0.22174398496793624, 0.15118104659812925, 0.15904680331564958, 0.18294309776865514, 0.22628432926488862, 0.1878499226538627, 0.19735694554898042, 0.1865297475214842, 0.213974722263787, 0.20442626327730762, 0.28025631182761934, 0.24734224139470817, 0.1775954412244226, 0.11175136765787663, 0.1813205407926003, 0.1793427828487807, 0.15062929625750765, 0.22764037336437504, 0.2044711106723648, 0.18042916679348509, 0.25121360571027496, 9.999999999998899e-05, 9.999999999998899e-05, 0.004243899651041105, 0.01424030193240955, 9.999999999998899e-05, 9.999999999998899e-05, 0.025506414805956723, 9.999999999998899e-05, 9.999999999998899e-05, 0.06810023338537319, 0.03157372662137481, 0.06805889719731806, 0.0634902417765637, 0.027803266897662993, 0.009583574806745543, 0.15678582708459254, 0.07038501041287071, 0.11910115901058194, 0.1671439149330587, 0.06782909423696981, 0.11108198773078826, 0.07666082561224663, 0.07682108546585809, 0.10517283363132823, 0.08773228099343267, 0.14917483194303893, 0.13428525574038153, 0.08294570137962731, 0.11533685094911361, 0.15309175248560403, 0.09119246166888206, 0.044162803879114976, 0.022312248220477504, 0.08980622216966694, 0.18543801083494993, 0.1377555356806257, 0.4631307876036952, 0.4708990919795437, 0.48893104354439354, 0.5131882347682228, 0.5126887142985609, 0.5202854850270517, 0.5093673211847507, 0.49782059126092126, 0.516490219003638, 0.09406061726081394, 0.09454336716589007, 0.06392400651963404, 0.11308183399755323, 0.12639869793367886, 0.09848128835646508, 0.08652320075934894, 0.0855620326863833, 0.09707825493483646, 0.15489851382837005, 0.1543035080685755, 0.18549011760891643, 0.209682873967463, 0.21015216196834596, 0.1526069131286687, 0.21234289917022164, 0.1347655209550277, 0.15658083107630683, 0.17487280570636998, 0.1919112758955711, 0.1763315340483247, 0.1903785039347028, 0.20731355722158018, 0.29012440808872875, 0.23059304482764353, 0.24174176484193532, 0.17484068243162143, 0.09205759419712978, 0.15562172900780902, 0.10648366153287225, 0.153776235163694, 0.13379466123249095, 0.14019844462295206, 0.1266948203944951, 0.19813764037227666, 0.2096141207159149, 0.25260493289047825, 0.20692956114397643, 0.25499359802615906, 0.21084577152994965, 0.2116714433339294, 0.19173881015338468, 0.20117138005517488, 0.21214584275236148, 0.25957853556284305, 0.2537920689474782, 0.2569069639981758, 0.2102896929047421, 0.19807021774919542, 0.1899972470043002, 0.19985847506813148, 0.19349364749233577, 0.20295017181587083, 0.20182032798730487, 0.732410470762873, 0.8597354039564482, 0.1591781070748679, 0.9053200138579148, 0.9449758467322794, 0.19530688800108742, 0.17090210315549414, 0.1586008237591393, 0.16489379932627757, 0.5436497240178948, 0.5392092166732172, 0.39775297526574127, 0.16873028287854197, 0.2098511545591185, 0.213285720682872, 0.10443358988269846, 0.21116397037570445, 0.09421251894185967, 0.22142062516530991, 0.1890044193028252, 0.2028516914834393, 0.23151480628701537, 0.19974300630755948, 0.21767970443765206, 0.24781002633572502, 0.248338519110455, 0.23222975247301803, 0.0849378101833903, 0.07736208966054414, 0.10204819758100547, 0.08733788813773513, 0.11073054888327749, 0.09763238156855225, 0.10125490375348312, 0.08080991302619955, 0.09374613778867147]}, "mutation_prompt": null}
{"id": "ed8d7e7e-7692-4255-b8e6-bc324b94afa4", "solution": "import numpy as np\n\nclass OptimizedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory_size = 10  # Reduced size for faster updates\n        self.harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n        self.harmony_memory_values = np.full(self.harmony_memory_size, np.inf)\n        self.harmony_memory_rate = 0.85  # Adjusted for balanced exploration-exploitation\n        self.pitch_adjustment_rate = 0.35  # Slightly reduced for stability\n        self.bandwidth_reduction = 0.08  # Optimized bandwidth adjustment\n\n    def __call__(self, func):\n        evaluations = 0\n        initial_evals = min(self.harmony_memory_size, self.budget)\n        for i in range(initial_evals):\n            self.harmony_memory_values[i] = func(self.harmony_memory[i])\n            evaluations += 1\n\n        while evaluations < self.budget:\n            new_harmony = self._generate_harmony()\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            new_value = func(new_harmony)\n            evaluations += 1\n\n            if new_value < np.max(self.harmony_memory_values):\n                max_index = np.argmax(self.harmony_memory_values)\n                self.harmony_memory[max_index] = new_harmony\n                self.harmony_memory_values[max_index] = new_value\n\n            self._adaptive_memory_adjustment(evaluations)\n\n        return self.harmony_memory[np.argmin(self.harmony_memory_values)]\n\n    def _generate_harmony(self):\n        harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.harmony_memory_rate:\n                selected_harmony = np.random.randint(self.harmony_memory_size)\n                harmony[i] = self.harmony_memory[selected_harmony, i]\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    harmony[i] += (np.random.rand() - 0.5) * self.bandwidth_reduction\n            else:\n                harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return harmony\n\n    def _adaptive_memory_adjustment(self, evaluations):\n        progress_ratio = evaluations / self.budget\n        self.harmony_memory_rate = 0.8 + 0.15 * np.sin(progress_ratio * np.pi)  # Adaptive rate change\n        self.bandwidth_reduction = 0.1 * (1 - progress_ratio)  # Dynamic bandwidth reduction", "name": "OptimizedHarmonySearch", "description": "Optimized Harmony Search with adaptive memory and reduced dimensional search to enhance convergence speed and solution accuracy.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b0b6c457-269d-42a9-b460-7871a4657035", "metadata": {"aucs": [0.7765882938266643, 0.8243568710218775, 0.8254051892283129, 0.8453491914666238, 0.7969797973903472, 0.8066691149741904, 0.7694038085428194, 0.8057004252149417, 0.8074359098321042, 0.416117482931324, 0.39979565596447497, 0.4117686117310968, 0.43967257299511653, 0.309201016491197, 0.39693004247198227, 0.363309645263, 0.3987040955688068, 0.46254788041927597, 0.4929591324803436, 0.4274797346830146, 0.5237432093077367, 0.33025220060689886, 0.28151718403319015, 0.32055227417481513, 0.1762378267616148, 0.2467746772273809, 0.1822855015301268, 0.18841757599502484, 0.3110643327439262, 0.34249575855811754, 0.4693609030920708, 0.29315713845985214, 0.47811586297136355, 0.13214733198446993, 0.22123021537955867, 0.49549341280388726, 0.9302895297189708, 0.9028953744152621, 0.9167500970780503, 0.9057621447178014, 0.9006194430608284, 0.9332084418810526, 0.89652626832293, 0.8949245427945623, 0.8849838622200957, 0.4496857065665224, 0.4148989354449265, 0.4005082178925833, 0.5088276492448937, 0.4556779579787331, 0.5054035343535082, 0.4131295832594749, 0.4709980786533894, 0.5044368698197303, 0.208717723915833, 0.12748416645848737, 0.13981554615593395, 0.27870581867476185, 0.23517640773701698, 0.19442178331365922, 0.22174398496793624, 0.15118104659812925, 0.15904680331564958, 0.18294309776865514, 0.22628432926488862, 0.1878499226538627, 0.19735694554898042, 0.1865297475214842, 0.213974722263787, 0.20442626327730762, 0.28025631182761934, 0.24734224139470817, 0.1775954412244226, 0.11175136765787663, 0.1813205407926003, 0.1793427828487807, 0.15062929625750765, 0.22764037336437504, 0.2044711106723648, 0.18042916679348509, 0.25121360571027496, 9.999999999998899e-05, 9.999999999998899e-05, 0.004243899651041105, 0.01424030193240955, 9.999999999998899e-05, 9.999999999998899e-05, 0.025506414805956723, 9.999999999998899e-05, 9.999999999998899e-05, 0.06810023338537319, 0.03157372662137481, 0.06805889719731806, 0.0634902417765637, 0.027803266897662993, 0.009583574806745543, 0.15678582708459254, 0.07038501041287071, 0.11910115901058194, 0.1671439149330587, 0.06782909423696981, 0.11108198773078826, 0.07666082561224663, 0.07682108546585809, 0.10517283363132823, 0.08773228099343267, 0.14917483194303893, 0.13428525574038153, 0.08294570137962731, 0.11533685094911361, 0.15309175248560403, 0.09119246166888206, 0.044162803879114976, 0.022312248220477504, 0.08980622216966694, 0.18543801083494993, 0.1377555356806257, 0.4631307876036952, 0.4708990919795437, 0.48893104354439354, 0.5131882347682228, 0.5126887142985609, 0.5202854850270517, 0.5093673211847507, 0.49782059126092126, 0.516490219003638, 0.09406061726081394, 0.09454336716589007, 0.06392400651963404, 0.11308183399755323, 0.12639869793367886, 0.09848128835646508, 0.08652320075934894, 0.0855620326863833, 0.09707825493483646, 0.15489851382837005, 0.1543035080685755, 0.18549011760891643, 0.209682873967463, 0.21015216196834596, 0.1526069131286687, 0.21234289917022164, 0.1347655209550277, 0.15658083107630683, 0.17487280570636998, 0.1919112758955711, 0.1763315340483247, 0.1903785039347028, 0.20731355722158018, 0.29012440808872875, 0.23059304482764353, 0.24174176484193532, 0.17484068243162143, 0.09205759419712978, 0.15562172900780902, 0.10648366153287225, 0.153776235163694, 0.13379466123249095, 0.14019844462295206, 0.1266948203944951, 0.19813764037227666, 0.2096141207159149, 0.25260493289047825, 0.20692956114397643, 0.25499359802615906, 0.21084577152994965, 0.2116714433339294, 0.19173881015338468, 0.20117138005517488, 0.21214584275236148, 0.25957853556284305, 0.2537920689474782, 0.2569069639981758, 0.2102896929047421, 0.19807021774919542, 0.1899972470043002, 0.19985847506813148, 0.19349364749233577, 0.20295017181587083, 0.20182032798730487, 0.732410470762873, 0.8597354039564482, 0.1591781070748679, 0.9053200138579148, 0.9449758467322794, 0.19530688800108742, 0.17090210315549414, 0.1586008237591393, 0.16489379932627757, 0.5436497240178948, 0.5392092166732172, 0.39775297526574127, 0.16873028287854197, 0.2098511545591185, 0.213285720682872, 0.10443358988269846, 0.21116397037570445, 0.09421251894185967, 0.22142062516530991, 0.1890044193028252, 0.2028516914834393, 0.23151480628701537, 0.19974300630755948, 0.21767970443765206, 0.24781002633572502, 0.248338519110455, 0.23222975247301803, 0.0849378101833903, 0.07736208966054414, 0.10204819758100547, 0.08733788813773513, 0.11073054888327749, 0.09763238156855225, 0.10125490375348312, 0.08080991302619955, 0.09374613778867147]}, "mutation_prompt": null}
{"id": "8e6158d9-989b-46cc-aca5-e593efbc8eeb", "solution": "import numpy as np\n\nclass EnhancedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory_size = 8  # Reduced size for quicker adaptation\n        self.harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n        self.harmony_memory_values = np.full(self.harmony_memory_size, np.inf)\n        self.harmony_memory_rate = 0.9  # Higher base rate for quicker convergence\n        self.pitch_adjustment_rate = 0.3  # Balanced adjustment\n        self.bandwidth_reduction = 0.1  # Initial bandwidth adjustment\n\n    def __call__(self, func):\n        evaluations = 0\n        initial_evals = min(self.harmony_memory_size, self.budget)\n        self.harmony_memory_values[:initial_evals] = [func(harmony) for harmony in self.harmony_memory[:initial_evals]]\n        evaluations += initial_evals\n\n        while evaluations < self.budget:\n            new_harmony = self._generate_harmony()\n            new_value = func(np.clip(new_harmony, self.lower_bound, self.upper_bound))\n            evaluations += 1\n\n            max_index = np.argmax(self.harmony_memory_values)\n            if new_value < self.harmony_memory_values[max_index]:\n                self.harmony_memory[max_index] = new_harmony\n                self.harmony_memory_values[max_index] = new_value\n\n            self._dynamic_adjustment(evaluations)\n\n        return self.harmony_memory[np.argmin(self.harmony_memory_values)]\n\n    def _generate_harmony(self):\n        harmony = np.where(np.random.rand(self.dim) < self.harmony_memory_rate,\n                           self.harmony_memory[np.random.randint(self.harmony_memory_size), np.arange(self.dim)],\n                           np.random.uniform(self.lower_bound, self.upper_bound, self.dim))\n        pitch_adjust = np.random.rand(self.dim) < self.pitch_adjustment_rate\n        harmony[pitch_adjust] += (np.random.rand(np.sum(pitch_adjust)) - 0.5) * self.bandwidth_reduction\n        return harmony\n\n    def _dynamic_adjustment(self, evaluations):\n        progress_ratio = evaluations / self.budget\n        self.harmony_memory_rate = 0.85 + 0.1 * np.cos(progress_ratio * np.pi)  # Cosine for smoother rate change\n        self.bandwidth_reduction *= 0.98  # Gradual bandwidth reduction", "name": "EnhancedHarmonySearch", "description": "Enhanced Harmony Search with dynamic parameter adaptation and efficient memory operations for improved convergence.", "configspace": "", "generation": 52, "fitness": 0.15644105792984742, "feedback": "The algorithm EnhancedHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.11.", "error": "", "parent_id": "b0b6c457-269d-42a9-b460-7871a4657035", "metadata": {"aucs": [0.464278692053839, 0.4560976674740401, 0.424406324558809, 0.43332335730899196, 0.48094729255280544, 0.4184774107114687, 0.3890660083746009, 0.43692172070729285, 0.46280938792059634, 0.05597007331168857, 0.021690976078815427, 9.999999999998899e-05, 0.03365960443320437, 0.012469474364652178, 0.021519158814111705, 0.06172790886856272, 0.01662834186403539, 9.999999999998899e-05, 0.20120905522345056, 0.15244751748519048, 0.19723889502144598, 0.20624222576379425, 0.18417125265184753, 0.22171238822538952, 0.20169549453601465, 0.16297933555174426, 0.2240610084043475, 0.16154257585681986, 0.14459546313815752, 0.1952388612708016, 0.15417793717306394, 0.1455303625510994, 0.22775848928007203, 0.1599262492391712, 0.1661371736538274, 0.20958416327526475, 0.19975183163203658, 0.16669664105397208, 0.19516561880283778, 0.20111231967886178, 0.16993555788320047, 0.22626835950283763, 0.20158164367089249, 0.17049443871244163, 0.22654808820390382, 0.1449808304536555, 0.2488262774133121, 0.23626325328677766, 0.15022110565148583, 0.1602111402403985, 0.16445419124778204, 0.11709879957699143, 0.1391966516457278, 0.14943550972777098, 0.16765411637027994, 0.10731232352590125, 0.16555278951699093, 0.15072677980593785, 0.12629379416519437, 0.17547970912680044, 0.16327359030038024, 0.1639664178178888, 0.1594889641324917, 0.1504342982674094, 0.18286676562706583, 0.15075750620452033, 0.1293541675906612, 0.13087675391740905, 0.13024273888182347, 0.20028217674052307, 0.1513301183215099, 0.12973988443920503, 0.13052656083408531, 0.08766378981837175, 0.12670796517588334, 0.1336633090343532, 0.12579651832391114, 0.22531303905471556, 0.15026145030239346, 0.10503575616322891, 0.12730464626868798, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0010593459635374058, 9.999999999998899e-05, 9.999999999998899e-05, 0.027652768405454276, 0.023617319110619484, 0.05730536576975542, 0.06408508133764335, 0.0012129413641253084, 0.0007232741088440964, 0.10354022885788583, 0.07149450662110413, 0.03991825395569126, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00901665252187489, 9.999999999998899e-05, 0.011420920237923737, 0.07898617132394314, 0.07610039305359295, 0.07619568486299089, 0.021237385079607485, 0.08276941019904949, 0.060234485950083405, 0.09155906257634594, 0.07044603889324486, 0.3452588916624748, 0.3334708264591404, 0.37441688773755677, 0.3758974115064396, 0.3771128620336659, 0.34704280557863854, 0.4089480599192571, 0.3161272319975357, 0.3597409022204747, 0.09497818278905557, 0.08792207324308565, 0.11684517245897319, 0.04664499222614393, 0.07683791658617212, 0.09792460810982484, 0.0774782458189166, 0.07579852830555267, 0.08692422701792568, 0.14151553225349633, 0.12414326906248752, 0.10932786677468065, 0.14408356020645785, 0.2027605008610387, 0.14266349150846147, 0.17861024234290634, 0.13470192043097395, 0.09701530669925773, 0.19286549121844832, 0.1950961286796472, 0.18808087125547923, 0.16752708009575978, 0.15947712297735794, 0.17770483650491353, 0.18580288740111905, 0.1650797810395186, 0.21483756226509498, 0.16391999431129933, 0.07839580626940734, 0.08358669906472238, 0.15253901198087516, 0.15808222977327402, 0.15564521529211217, 0.12379170509747894, 0.1139026008188756, 0.09765130756013984, 0.28028439877199285, 0.16245127871821163, 0.19884756076262167, 0.18527982097098394, 0.16083669399679223, 0.19508449452205068, 0.19634641033590183, 0.2114461060415247, 0.20463133406651246, 0.2373191700046583, 0.1914682934035714, 0.19917848341831024, 0.28132077804852973, 0.23680203392607568, 0.20381117505474478, 0.21716818153983997, 0.22982066746023844, 0.19701256036999737, 0.1578518106568486, 0.31240045116920123, 0.3739264171888885, 0.32396753458935124, 0.19507528956388664, 0.45930203256520996, 0.16584690278847625, 0.11447381436162052, 0.17651610211708813, 0.17238538135890036, 0.10337317095014475, 0.16499324049085862, 0.1876211976746811, 0.1986729589960995, 0.3011356969722445, 0.14716351639444714, 0.20389864054435392, 0.13807788337735005, 0.1615583015361659, 0.18926524835753367, 0.277872385403957, 0.18753576126907523, 0.1864600759577869, 0.18110378065592692, 0.16429255970305334, 0.2184914327015104, 0.22094163509121112, 0.07955896105667959, 0.0638058526957328, 0.06243265104217499, 0.07510738013775076, 0.08202591987497743, 0.05532715751031647, 0.05463736746096748, 0.05698284264158704, 0.04713454315745713]}, "mutation_prompt": null}
{"id": "0311730b-6d63-4cfa-bf6f-96e739a2a212", "solution": "import numpy as np\n\nclass OptimizedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory_size = 10  # Reduced size for faster updates\n        self.harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n        self.harmony_memory_values = np.full(self.harmony_memory_size, np.inf)\n        self.harmony_memory_rate = 0.85  # Adjusted for balanced exploration-exploitation\n        self.pitch_adjustment_rate = 0.35  # Slightly reduced for stability\n        self.bandwidth_reduction = 0.08  # Optimized bandwidth adjustment\n\n    def __call__(self, func):\n        evaluations = 0\n        initial_evals = min(self.harmony_memory_size, self.budget)\n        for i in range(initial_evals):\n            self.harmony_memory_values[i] = func(self.harmony_memory[i])\n            evaluations += 1\n\n        while evaluations < self.budget:\n            new_harmony = self._generate_harmony()\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            new_value = func(new_harmony)\n            evaluations += 1\n\n            if new_value < np.max(self.harmony_memory_values):\n                max_index = np.argmax(self.harmony_memory_values)\n                self.harmony_memory[max_index] = new_harmony\n                self.harmony_memory_values[max_index] = new_value\n\n            self._adaptive_memory_adjustment(evaluations)\n\n        return self.harmony_memory[np.argmin(self.harmony_memory_values)]\n\n    def _generate_harmony(self):\n        harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.harmony_memory_rate:\n                selected_harmony = np.random.randint(self.harmony_memory_size)\n                harmony[i] = self.harmony_memory[selected_harmony, i]\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    harmony[i] += (np.random.rand() - 0.5) * self.bandwidth_reduction\n            else:\n                harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return harmony\n\n    def _adaptive_memory_adjustment(self, evaluations):\n        progress_ratio = evaluations / self.budget\n        self.harmony_memory_rate = 0.8 + 0.15 * np.sin(progress_ratio * np.pi)  # Adaptive rate change\n        self.bandwidth_reduction = 0.1 * (1 - progress_ratio)  # Dynamic bandwidth reduction", "name": "OptimizedHarmonySearch", "description": "Optimized Harmony Search with adaptive memory and reduced dimensional search to enhance convergence speed and solution accuracy.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b0b6c457-269d-42a9-b460-7871a4657035", "metadata": {"aucs": [0.7765882938266643, 0.8243568710218775, 0.8254051892283129, 0.8453491914666238, 0.7969797973903472, 0.8066691149741904, 0.7694038085428194, 0.8057004252149417, 0.8074359098321042, 0.416117482931324, 0.39979565596447497, 0.4117686117310968, 0.43967257299511653, 0.309201016491197, 0.39693004247198227, 0.363309645263, 0.3987040955688068, 0.46254788041927597, 0.4929591324803436, 0.4274797346830146, 0.5237432093077367, 0.33025220060689886, 0.28151718403319015, 0.32055227417481513, 0.1762378267616148, 0.2467746772273809, 0.1822855015301268, 0.18841757599502484, 0.3110643327439262, 0.34249575855811754, 0.4693609030920708, 0.29315713845985214, 0.47811586297136355, 0.13214733198446993, 0.22123021537955867, 0.49549341280388726, 0.9302895297189708, 0.9028953744152621, 0.9167500970780503, 0.9057621447178014, 0.9006194430608284, 0.9332084418810526, 0.89652626832293, 0.8949245427945623, 0.8849838622200957, 0.4496857065665224, 0.4148989354449265, 0.4005082178925833, 0.5088276492448937, 0.4556779579787331, 0.5054035343535082, 0.4131295832594749, 0.4709980786533894, 0.5044368698197303, 0.208717723915833, 0.12748416645848737, 0.13981554615593395, 0.27870581867476185, 0.23517640773701698, 0.19442178331365922, 0.22174398496793624, 0.15118104659812925, 0.15904680331564958, 0.18294309776865514, 0.22628432926488862, 0.1878499226538627, 0.19735694554898042, 0.1865297475214842, 0.213974722263787, 0.20442626327730762, 0.28025631182761934, 0.24734224139470817, 0.1775954412244226, 0.11175136765787663, 0.1813205407926003, 0.1793427828487807, 0.15062929625750765, 0.22764037336437504, 0.2044711106723648, 0.18042916679348509, 0.25121360571027496, 9.999999999998899e-05, 9.999999999998899e-05, 0.004243899651041105, 0.01424030193240955, 9.999999999998899e-05, 9.999999999998899e-05, 0.025506414805956723, 9.999999999998899e-05, 9.999999999998899e-05, 0.06810023338537319, 0.03157372662137481, 0.06805889719731806, 0.0634902417765637, 0.027803266897662993, 0.009583574806745543, 0.15678582708459254, 0.07038501041287071, 0.11910115901058194, 0.1671439149330587, 0.06782909423696981, 0.11108198773078826, 0.07666082561224663, 0.07682108546585809, 0.10517283363132823, 0.08773228099343267, 0.14917483194303893, 0.13428525574038153, 0.08294570137962731, 0.11533685094911361, 0.15309175248560403, 0.09119246166888206, 0.044162803879114976, 0.022312248220477504, 0.08980622216966694, 0.18543801083494993, 0.1377555356806257, 0.4631307876036952, 0.4708990919795437, 0.48893104354439354, 0.5131882347682228, 0.5126887142985609, 0.5202854850270517, 0.5093673211847507, 0.49782059126092126, 0.516490219003638, 0.09406061726081394, 0.09454336716589007, 0.06392400651963404, 0.11308183399755323, 0.12639869793367886, 0.09848128835646508, 0.08652320075934894, 0.0855620326863833, 0.09707825493483646, 0.15489851382837005, 0.1543035080685755, 0.18549011760891643, 0.209682873967463, 0.21015216196834596, 0.1526069131286687, 0.21234289917022164, 0.1347655209550277, 0.15658083107630683, 0.17487280570636998, 0.1919112758955711, 0.1763315340483247, 0.1903785039347028, 0.20731355722158018, 0.29012440808872875, 0.23059304482764353, 0.24174176484193532, 0.17484068243162143, 0.09205759419712978, 0.15562172900780902, 0.10648366153287225, 0.153776235163694, 0.13379466123249095, 0.14019844462295206, 0.1266948203944951, 0.19813764037227666, 0.2096141207159149, 0.25260493289047825, 0.20692956114397643, 0.25499359802615906, 0.21084577152994965, 0.2116714433339294, 0.19173881015338468, 0.20117138005517488, 0.21214584275236148, 0.25957853556284305, 0.2537920689474782, 0.2569069639981758, 0.2102896929047421, 0.19807021774919542, 0.1899972470043002, 0.19985847506813148, 0.19349364749233577, 0.20295017181587083, 0.20182032798730487, 0.732410470762873, 0.8597354039564482, 0.1591781070748679, 0.9053200138579148, 0.9449758467322794, 0.19530688800108742, 0.17090210315549414, 0.1586008237591393, 0.16489379932627757, 0.5436497240178948, 0.5392092166732172, 0.39775297526574127, 0.16873028287854197, 0.2098511545591185, 0.213285720682872, 0.10443358988269846, 0.21116397037570445, 0.09421251894185967, 0.22142062516530991, 0.1890044193028252, 0.2028516914834393, 0.23151480628701537, 0.19974300630755948, 0.21767970443765206, 0.24781002633572502, 0.248338519110455, 0.23222975247301803, 0.0849378101833903, 0.07736208966054414, 0.10204819758100547, 0.08733788813773513, 0.11073054888327749, 0.09763238156855225, 0.10125490375348312, 0.08080991302619955, 0.09374613778867147]}, "mutation_prompt": null}
{"id": "0465646f-cd76-4c6a-aede-d7358dbf11f0", "solution": "import numpy as np\n\nclass OptimizedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory_size = 10  # Reduced size for faster updates\n        self.harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n        self.harmony_memory_values = np.full(self.harmony_memory_size, np.inf)\n        self.harmony_memory_rate = 0.85  # Adjusted for balanced exploration-exploitation\n        self.pitch_adjustment_rate = 0.35  # Slightly reduced for stability\n        self.bandwidth_reduction = 0.08  # Optimized bandwidth adjustment\n\n    def __call__(self, func):\n        evaluations = 0\n        initial_evals = min(self.harmony_memory_size, self.budget)\n        for i in range(initial_evals):\n            self.harmony_memory_values[i] = func(self.harmony_memory[i])\n            evaluations += 1\n\n        while evaluations < self.budget:\n            new_harmony = self._generate_harmony()\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            new_value = func(new_harmony)\n            evaluations += 1\n\n            if new_value < np.max(self.harmony_memory_values):\n                max_index = np.argmax(self.harmony_memory_values)\n                self.harmony_memory[max_index] = new_harmony\n                self.harmony_memory_values[max_index] = new_value\n\n            self._adaptive_memory_adjustment(evaluations)\n\n        return self.harmony_memory[np.argmin(self.harmony_memory_values)]\n\n    def _generate_harmony(self):\n        harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.harmony_memory_rate:\n                selected_harmony = np.random.randint(self.harmony_memory_size)\n                harmony[i] = self.harmony_memory[selected_harmony, i]\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    harmony[i] += (np.random.rand() - 0.5) * self.bandwidth_reduction\n            else:\n                harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return harmony\n\n    def _adaptive_memory_adjustment(self, evaluations):\n        progress_ratio = evaluations / self.budget\n        self.harmony_memory_rate = 0.8 + 0.15 * np.sin(progress_ratio * np.pi)  # Adaptive rate change\n        self.bandwidth_reduction = 0.1 * (1 - progress_ratio)  # Dynamic bandwidth reduction", "name": "OptimizedHarmonySearch", "description": "Optimized Harmony Search with adaptive memory and reduced dimensional search to enhance convergence speed and solution accuracy.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b0b6c457-269d-42a9-b460-7871a4657035", "metadata": {"aucs": [0.7765882938266643, 0.8243568710218775, 0.8254051892283129, 0.8453491914666238, 0.7969797973903472, 0.8066691149741904, 0.7694038085428194, 0.8057004252149417, 0.8074359098321042, 0.416117482931324, 0.39979565596447497, 0.4117686117310968, 0.43967257299511653, 0.309201016491197, 0.39693004247198227, 0.363309645263, 0.3987040955688068, 0.46254788041927597, 0.4929591324803436, 0.4274797346830146, 0.5237432093077367, 0.33025220060689886, 0.28151718403319015, 0.32055227417481513, 0.1762378267616148, 0.2467746772273809, 0.1822855015301268, 0.18841757599502484, 0.3110643327439262, 0.34249575855811754, 0.4693609030920708, 0.29315713845985214, 0.47811586297136355, 0.13214733198446993, 0.22123021537955867, 0.49549341280388726, 0.9302895297189708, 0.9028953744152621, 0.9167500970780503, 0.9057621447178014, 0.9006194430608284, 0.9332084418810526, 0.89652626832293, 0.8949245427945623, 0.8849838622200957, 0.4496857065665224, 0.4148989354449265, 0.4005082178925833, 0.5088276492448937, 0.4556779579787331, 0.5054035343535082, 0.4131295832594749, 0.4709980786533894, 0.5044368698197303, 0.208717723915833, 0.12748416645848737, 0.13981554615593395, 0.27870581867476185, 0.23517640773701698, 0.19442178331365922, 0.22174398496793624, 0.15118104659812925, 0.15904680331564958, 0.18294309776865514, 0.22628432926488862, 0.1878499226538627, 0.19735694554898042, 0.1865297475214842, 0.213974722263787, 0.20442626327730762, 0.28025631182761934, 0.24734224139470817, 0.1775954412244226, 0.11175136765787663, 0.1813205407926003, 0.1793427828487807, 0.15062929625750765, 0.22764037336437504, 0.2044711106723648, 0.18042916679348509, 0.25121360571027496, 9.999999999998899e-05, 9.999999999998899e-05, 0.004243899651041105, 0.01424030193240955, 9.999999999998899e-05, 9.999999999998899e-05, 0.025506414805956723, 9.999999999998899e-05, 9.999999999998899e-05, 0.06810023338537319, 0.03157372662137481, 0.06805889719731806, 0.0634902417765637, 0.027803266897662993, 0.009583574806745543, 0.15678582708459254, 0.07038501041287071, 0.11910115901058194, 0.1671439149330587, 0.06782909423696981, 0.11108198773078826, 0.07666082561224663, 0.07682108546585809, 0.10517283363132823, 0.08773228099343267, 0.14917483194303893, 0.13428525574038153, 0.08294570137962731, 0.11533685094911361, 0.15309175248560403, 0.09119246166888206, 0.044162803879114976, 0.022312248220477504, 0.08980622216966694, 0.18543801083494993, 0.1377555356806257, 0.4631307876036952, 0.4708990919795437, 0.48893104354439354, 0.5131882347682228, 0.5126887142985609, 0.5202854850270517, 0.5093673211847507, 0.49782059126092126, 0.516490219003638, 0.09406061726081394, 0.09454336716589007, 0.06392400651963404, 0.11308183399755323, 0.12639869793367886, 0.09848128835646508, 0.08652320075934894, 0.0855620326863833, 0.09707825493483646, 0.15489851382837005, 0.1543035080685755, 0.18549011760891643, 0.209682873967463, 0.21015216196834596, 0.1526069131286687, 0.21234289917022164, 0.1347655209550277, 0.15658083107630683, 0.17487280570636998, 0.1919112758955711, 0.1763315340483247, 0.1903785039347028, 0.20731355722158018, 0.29012440808872875, 0.23059304482764353, 0.24174176484193532, 0.17484068243162143, 0.09205759419712978, 0.15562172900780902, 0.10648366153287225, 0.153776235163694, 0.13379466123249095, 0.14019844462295206, 0.1266948203944951, 0.19813764037227666, 0.2096141207159149, 0.25260493289047825, 0.20692956114397643, 0.25499359802615906, 0.21084577152994965, 0.2116714433339294, 0.19173881015338468, 0.20117138005517488, 0.21214584275236148, 0.25957853556284305, 0.2537920689474782, 0.2569069639981758, 0.2102896929047421, 0.19807021774919542, 0.1899972470043002, 0.19985847506813148, 0.19349364749233577, 0.20295017181587083, 0.20182032798730487, 0.732410470762873, 0.8597354039564482, 0.1591781070748679, 0.9053200138579148, 0.9449758467322794, 0.19530688800108742, 0.17090210315549414, 0.1586008237591393, 0.16489379932627757, 0.5436497240178948, 0.5392092166732172, 0.39775297526574127, 0.16873028287854197, 0.2098511545591185, 0.213285720682872, 0.10443358988269846, 0.21116397037570445, 0.09421251894185967, 0.22142062516530991, 0.1890044193028252, 0.2028516914834393, 0.23151480628701537, 0.19974300630755948, 0.21767970443765206, 0.24781002633572502, 0.248338519110455, 0.23222975247301803, 0.0849378101833903, 0.07736208966054414, 0.10204819758100547, 0.08733788813773513, 0.11073054888327749, 0.09763238156855225, 0.10125490375348312, 0.08080991302619955, 0.09374613778867147]}, "mutation_prompt": null}
{"id": "88b0f9cc-3520-4696-bc25-a6ec169ed6e7", "solution": "import numpy as np\n\nclass EnhancedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory_size = 12  # Slightly increased for better diversity\n        self.harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n        self.harmony_memory_values = np.full(self.harmony_memory_size, np.inf)\n        self.harmony_memory_rate = 0.75  # Adjusted for improved balance\n        self.pitch_adjustment_rate = 0.30  # Further reduced for enhanced solution stability\n        self.bandwidth_reduction = 0.05  # Reduced for finer adjustments\n\n    def __call__(self, func):\n        evaluations = 0\n        initial_evals = min(self.harmony_memory_size, self.budget)\n        for i in range(initial_evals):\n            self.harmony_memory_values[i] = func(self.harmony_memory[i])\n            evaluations += 1\n\n        while evaluations < self.budget:\n            new_harmony = self._generate_harmony()\n            new_value = func(np.clip(new_harmony, self.lower_bound, self.upper_bound))\n            evaluations += 1\n\n            if new_value < np.median(self.harmony_memory_values):  # Median strategy for more robust replacement\n                worst_index = np.argmax(self.harmony_memory_values)\n                self.harmony_memory[worst_index] = new_harmony\n                self.harmony_memory_values[worst_index] = new_value\n\n            if evaluations % (self.budget // 10) == 0:  # Strategic memory refresh\n                self._refresh_memory(func)\n\n            self._adaptive_memory_adjustment(evaluations)\n\n        return self.harmony_memory[np.argmin(self.harmony_memory_values)]\n\n    def _generate_harmony(self):\n        harmony = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)  # Simplified generation\n        for i in range(self.dim):\n            if np.random.rand() < self.harmony_memory_rate:\n                selected_harmony = np.random.choice(self.harmony_memory_size, 2, replace=False)\n                harmony[i] = np.mean(self.harmony_memory[selected_harmony, i])  # Averaged selection for diversity\n\n        return harmony\n\n    def _adaptive_memory_adjustment(self, evaluations):\n        progress_ratio = evaluations / self.budget\n        self.harmony_memory_rate = 0.7 + 0.2 * np.cos(progress_ratio * np.pi)  # Adaptive rate change using cosine\n        self.bandwidth_reduction = 0.05 * np.sqrt(1 - progress_ratio)  # Smoother bandwidth reduction\n\n    def _refresh_memory(self, func):\n        for i in range(self.harmony_memory_size // 4):  # Refresh a quarter of the memory\n            random_idx = np.random.randint(self.harmony_memory_size)\n            self.harmony_memory[random_idx] = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            self.harmony_memory_values[random_idx] = func(self.harmony_memory[random_idx])", "name": "EnhancedHarmonySearch", "description": "Enhanced Harmony Search with strategic memory refresh and streamlined harmony generation for improved convergence and efficiency.", "configspace": "", "generation": 55, "fitness": 0.17246998622784687, "feedback": "The algorithm EnhancedHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.11.", "error": "", "parent_id": "b0b6c457-269d-42a9-b460-7871a4657035", "metadata": {"aucs": [0.5371770234415615, 0.49714812275425246, 0.5410289662562981, 0.5240202838431565, 0.4221596298061361, 0.5184500835582715, 0.4890047558428139, 0.4629318899292729, 0.5144467936711692, 0.1141466338426328, 0.19504137724426862, 0.01996714321694293, 0.13296192546845265, 0.14277738907151927, 0.10191457158374284, 0.018005934524243594, 0.18314333211876865, 0.11834838500602252, 0.2583859973466126, 0.17587282080729127, 0.20669464829865059, 0.24646027410635096, 0.17041785098093132, 0.1577251033859367, 0.26300168489604636, 0.23027950656149487, 0.16346935448109978, 0.13681132610368762, 0.14796086023750998, 0.17380753626965884, 0.1328105261272109, 0.13947961863232394, 0.13578744727326142, 0.14659715798945905, 0.11797789532896386, 0.1328266676716583, 0.1918259421795777, 0.21641480848196892, 0.2026908067116121, 0.18442178803939113, 0.21399742706519742, 0.19948625922986574, 0.18430116447833866, 0.2264421863589624, 0.19707891296726754, 0.17262397859016732, 0.15220272677938262, 0.19465584977945538, 0.1390082788627729, 0.1624493618888373, 0.2256642443187329, 0.22653790740951174, 0.16833184841189108, 0.15734972446063078, 0.17406504744052032, 0.14653158502069508, 0.16617441269867106, 0.21685670063134466, 0.16763509883937244, 0.18905475147246897, 0.1882448234700963, 0.15557551007807668, 0.1436505968882963, 0.122311748373087, 0.1609483375506705, 0.16181690920649894, 0.17414373684389717, 0.1571356120705395, 0.13460806539386028, 0.2119198937388136, 0.15106331540934825, 0.132909323998601, 0.14715979406686952, 0.11385268868582499, 0.13643145075159568, 0.13949864355194697, 0.1307996598460459, 0.12929782536866008, 0.13798809302582593, 0.1315981661467358, 0.14475164615909708, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11404223646681133, 0.08081727371351755, 0.07284761394701511, 0.06716662929101147, 0.052883191830066845, 0.055052564507589885, 0.2000141973555999, 0.13489416449743985, 0.10105735391425419, 9.999999999998899e-05, 0.0049098692482262285, 0.02796154578840815, 0.03277109950142554, 0.026796232879423787, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07266513804098418, 0.03956001674026044, 0.06133820838994397, 0.09593808717466523, 0.09344808318757081, 0.06717901591089981, 0.05992233108388367, 0.07584935195860076, 0.08807085543778281, 0.3396558917193141, 0.358249598917745, 0.32580663349692596, 0.38569081171441044, 0.36589705469399914, 0.3473753711819503, 0.37444784427481237, 0.41483622002310105, 0.3563097094197989, 0.06185709540336226, 0.07350640097583128, 0.11351601241349285, 0.09499459317359249, 0.12108919433260856, 0.09207340722592472, 0.09528113341586797, 0.10482278020352731, 0.09387477823847878, 0.14549916562813991, 0.1783071187533446, 0.16715107261064244, 0.13812124180002483, 0.2106346942575258, 0.1300707986459254, 0.16675383296355517, 0.13941359527088826, 0.21690655887146926, 0.20788382359724766, 0.18946797225176937, 0.19466695765029884, 0.21108257287263832, 0.24983275748951406, 0.21181171795368847, 0.1748493178894105, 0.2006957918204939, 0.20496212665580638, 0.15127439977355084, 0.17725295481832637, 0.145605728260622, 0.21076472235291666, 0.1640499190620709, 0.2112149901572007, 0.16441682621573528, 0.135509575457054, 0.14365192844996488, 0.195254175243452, 0.20554295931042965, 0.2058412239548726, 0.22557415242639756, 0.21326949656021044, 0.23887554290812318, 0.20051228907342922, 0.21108230637173586, 0.24628512133801073, 0.18125678836253134, 0.19625003763738025, 0.1882865986108322, 0.19116810557293928, 0.19311333360520155, 0.20778258242309267, 0.1861931828790253, 0.19859431342946565, 0.21542797985607753, 0.18741154458115905, 0.18689606659653724, 0.18855552046203883, 0.3728597409182264, 0.1998316089453137, 0.19347897667857739, 0.4206140626984115, 0.6125676870105679, 0.13940950730026158, 0.3387710271014892, 0.19048524599075622, 0.1769392125958713, 0.14203010582197106, 0.21070241240289267, 0.2063602319563027, 0.1417305754653242, 0.14647561743056392, 0.155743420511257, 0.18394873481422314, 0.1845541626648325, 0.21532657572728253, 0.21056197979933755, 0.193690906638331, 0.18579022465420103, 0.1782397989384772, 0.18946304255300705, 0.1814084888818508, 0.06708437776750886, 0.0846319397043157, 0.09753760602265649, 0.08628841303362134, 0.08012464932275465, 0.09209361709107178, 0.0961803461249856, 0.08554090139738424, 0.09160958240970651]}, "mutation_prompt": null}
{"id": "a89e6513-2dd5-4766-9aba-26e081cac625", "solution": "import numpy as np\n\nclass OptimizedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory_size = 10  # Reduced size for faster updates\n        self.harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n        self.harmony_memory_values = np.full(self.harmony_memory_size, np.inf)\n        self.harmony_memory_rate = 0.85  # Adjusted for balanced exploration-exploitation\n        self.pitch_adjustment_rate = 0.35  # Slightly reduced for stability\n        self.bandwidth_reduction = 0.08  # Optimized bandwidth adjustment\n\n    def __call__(self, func):\n        evaluations = 0\n        initial_evals = min(self.harmony_memory_size, self.budget)\n        for i in range(initial_evals):\n            self.harmony_memory_values[i] = func(self.harmony_memory[i])\n            evaluations += 1\n\n        while evaluations < self.budget:\n            new_harmony = self._generate_harmony()\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            new_value = func(new_harmony)\n            evaluations += 1\n\n            if new_value < np.max(self.harmony_memory_values):\n                max_index = np.argmax(self.harmony_memory_values)\n                self.harmony_memory[max_index] = new_harmony\n                self.harmony_memory_values[max_index] = new_value\n\n            self._adaptive_memory_adjustment(evaluations)\n\n        return self.harmony_memory[np.argmin(self.harmony_memory_values)]\n\n    def _generate_harmony(self):\n        harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.harmony_memory_rate:\n                selected_harmony = np.random.randint(self.harmony_memory_size)\n                harmony[i] = self.harmony_memory[selected_harmony, i]\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    harmony[i] += (np.random.rand() - 0.5) * self.bandwidth_reduction\n            else:\n                harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return harmony\n\n    def _adaptive_memory_adjustment(self, evaluations):\n        progress_ratio = evaluations / self.budget\n        self.harmony_memory_rate = 0.8 + 0.15 * np.sin(progress_ratio * np.pi)  # Adaptive rate change\n        self.bandwidth_reduction = 0.1 * (1 - progress_ratio)  # Dynamic bandwidth reduction", "name": "OptimizedHarmonySearch", "description": "Optimized Harmony Search with adaptive memory and reduced dimensional search to enhance convergence speed and solution accuracy.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b0b6c457-269d-42a9-b460-7871a4657035", "metadata": {"aucs": [0.7765882938266643, 0.8243568710218775, 0.8254051892283129, 0.8453491914666238, 0.7969797973903472, 0.8066691149741904, 0.7694038085428194, 0.8057004252149417, 0.8074359098321042, 0.416117482931324, 0.39979565596447497, 0.4117686117310968, 0.43967257299511653, 0.309201016491197, 0.39693004247198227, 0.363309645263, 0.3987040955688068, 0.46254788041927597, 0.4929591324803436, 0.4274797346830146, 0.5237432093077367, 0.33025220060689886, 0.28151718403319015, 0.32055227417481513, 0.1762378267616148, 0.2467746772273809, 0.1822855015301268, 0.18841757599502484, 0.3110643327439262, 0.34249575855811754, 0.4693609030920708, 0.29315713845985214, 0.47811586297136355, 0.13214733198446993, 0.22123021537955867, 0.49549341280388726, 0.9302895297189708, 0.9028953744152621, 0.9167500970780503, 0.9057621447178014, 0.9006194430608284, 0.9332084418810526, 0.89652626832293, 0.8949245427945623, 0.8849838622200957, 0.4496857065665224, 0.4148989354449265, 0.4005082178925833, 0.5088276492448937, 0.4556779579787331, 0.5054035343535082, 0.4131295832594749, 0.4709980786533894, 0.5044368698197303, 0.208717723915833, 0.12748416645848737, 0.13981554615593395, 0.27870581867476185, 0.23517640773701698, 0.19442178331365922, 0.22174398496793624, 0.15118104659812925, 0.15904680331564958, 0.18294309776865514, 0.22628432926488862, 0.1878499226538627, 0.19735694554898042, 0.1865297475214842, 0.213974722263787, 0.20442626327730762, 0.28025631182761934, 0.24734224139470817, 0.1775954412244226, 0.11175136765787663, 0.1813205407926003, 0.1793427828487807, 0.15062929625750765, 0.22764037336437504, 0.2044711106723648, 0.18042916679348509, 0.25121360571027496, 9.999999999998899e-05, 9.999999999998899e-05, 0.004243899651041105, 0.01424030193240955, 9.999999999998899e-05, 9.999999999998899e-05, 0.025506414805956723, 9.999999999998899e-05, 9.999999999998899e-05, 0.06810023338537319, 0.03157372662137481, 0.06805889719731806, 0.0634902417765637, 0.027803266897662993, 0.009583574806745543, 0.15678582708459254, 0.07038501041287071, 0.11910115901058194, 0.1671439149330587, 0.06782909423696981, 0.11108198773078826, 0.07666082561224663, 0.07682108546585809, 0.10517283363132823, 0.08773228099343267, 0.14917483194303893, 0.13428525574038153, 0.08294570137962731, 0.11533685094911361, 0.15309175248560403, 0.09119246166888206, 0.044162803879114976, 0.022312248220477504, 0.08980622216966694, 0.18543801083494993, 0.1377555356806257, 0.4631307876036952, 0.4708990919795437, 0.48893104354439354, 0.5131882347682228, 0.5126887142985609, 0.5202854850270517, 0.5093673211847507, 0.49782059126092126, 0.516490219003638, 0.09406061726081394, 0.09454336716589007, 0.06392400651963404, 0.11308183399755323, 0.12639869793367886, 0.09848128835646508, 0.08652320075934894, 0.0855620326863833, 0.09707825493483646, 0.15489851382837005, 0.1543035080685755, 0.18549011760891643, 0.209682873967463, 0.21015216196834596, 0.1526069131286687, 0.21234289917022164, 0.1347655209550277, 0.15658083107630683, 0.17487280570636998, 0.1919112758955711, 0.1763315340483247, 0.1903785039347028, 0.20731355722158018, 0.29012440808872875, 0.23059304482764353, 0.24174176484193532, 0.17484068243162143, 0.09205759419712978, 0.15562172900780902, 0.10648366153287225, 0.153776235163694, 0.13379466123249095, 0.14019844462295206, 0.1266948203944951, 0.19813764037227666, 0.2096141207159149, 0.25260493289047825, 0.20692956114397643, 0.25499359802615906, 0.21084577152994965, 0.2116714433339294, 0.19173881015338468, 0.20117138005517488, 0.21214584275236148, 0.25957853556284305, 0.2537920689474782, 0.2569069639981758, 0.2102896929047421, 0.19807021774919542, 0.1899972470043002, 0.19985847506813148, 0.19349364749233577, 0.20295017181587083, 0.20182032798730487, 0.732410470762873, 0.8597354039564482, 0.1591781070748679, 0.9053200138579148, 0.9449758467322794, 0.19530688800108742, 0.17090210315549414, 0.1586008237591393, 0.16489379932627757, 0.5436497240178948, 0.5392092166732172, 0.39775297526574127, 0.16873028287854197, 0.2098511545591185, 0.213285720682872, 0.10443358988269846, 0.21116397037570445, 0.09421251894185967, 0.22142062516530991, 0.1890044193028252, 0.2028516914834393, 0.23151480628701537, 0.19974300630755948, 0.21767970443765206, 0.24781002633572502, 0.248338519110455, 0.23222975247301803, 0.0849378101833903, 0.07736208966054414, 0.10204819758100547, 0.08733788813773513, 0.11073054888327749, 0.09763238156855225, 0.10125490375348312, 0.08080991302619955, 0.09374613778867147]}, "mutation_prompt": null}
{"id": "65dc660c-78a2-447a-b39a-33671e0d59c7", "solution": "import numpy as np\n\nclass OptimizedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory_size = 10  # Reduced size for faster updates\n        self.harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n        self.harmony_memory_values = np.full(self.harmony_memory_size, np.inf)\n        self.harmony_memory_rate = 0.85  # Adjusted for balanced exploration-exploitation\n        self.pitch_adjustment_rate = 0.35  # Slightly reduced for stability\n        self.bandwidth_reduction = 0.08  # Optimized bandwidth adjustment\n\n    def __call__(self, func):\n        evaluations = 0\n        initial_evals = min(self.harmony_memory_size, self.budget)\n        for i in range(initial_evals):\n            self.harmony_memory_values[i] = func(self.harmony_memory[i])\n            evaluations += 1\n\n        while evaluations < self.budget:\n            new_harmony = self._generate_harmony()\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            new_value = func(new_harmony)\n            evaluations += 1\n\n            if new_value < np.max(self.harmony_memory_values):\n                max_index = np.argmax(self.harmony_memory_values)\n                self.harmony_memory[max_index] = new_harmony\n                self.harmony_memory_values[max_index] = new_value\n\n            self._adaptive_memory_adjustment(evaluations)\n\n        return self.harmony_memory[np.argmin(self.harmony_memory_values)]\n\n    def _generate_harmony(self):\n        harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.harmony_memory_rate:\n                selected_harmony = np.random.randint(self.harmony_memory_size)\n                harmony[i] = self.harmony_memory[selected_harmony, i]\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    harmony[i] += (np.random.rand() - 0.5) * self.bandwidth_reduction\n            else:\n                harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return harmony\n\n    def _adaptive_memory_adjustment(self, evaluations):\n        progress_ratio = evaluations / self.budget\n        self.harmony_memory_rate = 0.8 + 0.15 * np.sin(progress_ratio * np.pi)  # Adaptive rate change\n        self.bandwidth_reduction = 0.1 * (1 - progress_ratio)  # Dynamic bandwidth reduction", "name": "OptimizedHarmonySearch", "description": "Optimized Harmony Search with adaptive memory and reduced dimensional search to enhance convergence speed and solution accuracy.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b0b6c457-269d-42a9-b460-7871a4657035", "metadata": {"aucs": [0.7765882938266643, 0.8243568710218775, 0.8254051892283129, 0.8453491914666238, 0.7969797973903472, 0.8066691149741904, 0.7694038085428194, 0.8057004252149417, 0.8074359098321042, 0.416117482931324, 0.39979565596447497, 0.4117686117310968, 0.43967257299511653, 0.309201016491197, 0.39693004247198227, 0.363309645263, 0.3987040955688068, 0.46254788041927597, 0.4929591324803436, 0.4274797346830146, 0.5237432093077367, 0.33025220060689886, 0.28151718403319015, 0.32055227417481513, 0.1762378267616148, 0.2467746772273809, 0.1822855015301268, 0.18841757599502484, 0.3110643327439262, 0.34249575855811754, 0.4693609030920708, 0.29315713845985214, 0.47811586297136355, 0.13214733198446993, 0.22123021537955867, 0.49549341280388726, 0.9302895297189708, 0.9028953744152621, 0.9167500970780503, 0.9057621447178014, 0.9006194430608284, 0.9332084418810526, 0.89652626832293, 0.8949245427945623, 0.8849838622200957, 0.4496857065665224, 0.4148989354449265, 0.4005082178925833, 0.5088276492448937, 0.4556779579787331, 0.5054035343535082, 0.4131295832594749, 0.4709980786533894, 0.5044368698197303, 0.208717723915833, 0.12748416645848737, 0.13981554615593395, 0.27870581867476185, 0.23517640773701698, 0.19442178331365922, 0.22174398496793624, 0.15118104659812925, 0.15904680331564958, 0.18294309776865514, 0.22628432926488862, 0.1878499226538627, 0.19735694554898042, 0.1865297475214842, 0.213974722263787, 0.20442626327730762, 0.28025631182761934, 0.24734224139470817, 0.1775954412244226, 0.11175136765787663, 0.1813205407926003, 0.1793427828487807, 0.15062929625750765, 0.22764037336437504, 0.2044711106723648, 0.18042916679348509, 0.25121360571027496, 9.999999999998899e-05, 9.999999999998899e-05, 0.004243899651041105, 0.01424030193240955, 9.999999999998899e-05, 9.999999999998899e-05, 0.025506414805956723, 9.999999999998899e-05, 9.999999999998899e-05, 0.06810023338537319, 0.03157372662137481, 0.06805889719731806, 0.0634902417765637, 0.027803266897662993, 0.009583574806745543, 0.15678582708459254, 0.07038501041287071, 0.11910115901058194, 0.1671439149330587, 0.06782909423696981, 0.11108198773078826, 0.07666082561224663, 0.07682108546585809, 0.10517283363132823, 0.08773228099343267, 0.14917483194303893, 0.13428525574038153, 0.08294570137962731, 0.11533685094911361, 0.15309175248560403, 0.09119246166888206, 0.044162803879114976, 0.022312248220477504, 0.08980622216966694, 0.18543801083494993, 0.1377555356806257, 0.4631307876036952, 0.4708990919795437, 0.48893104354439354, 0.5131882347682228, 0.5126887142985609, 0.5202854850270517, 0.5093673211847507, 0.49782059126092126, 0.516490219003638, 0.09406061726081394, 0.09454336716589007, 0.06392400651963404, 0.11308183399755323, 0.12639869793367886, 0.09848128835646508, 0.08652320075934894, 0.0855620326863833, 0.09707825493483646, 0.15489851382837005, 0.1543035080685755, 0.18549011760891643, 0.209682873967463, 0.21015216196834596, 0.1526069131286687, 0.21234289917022164, 0.1347655209550277, 0.15658083107630683, 0.17487280570636998, 0.1919112758955711, 0.1763315340483247, 0.1903785039347028, 0.20731355722158018, 0.29012440808872875, 0.23059304482764353, 0.24174176484193532, 0.17484068243162143, 0.09205759419712978, 0.15562172900780902, 0.10648366153287225, 0.153776235163694, 0.13379466123249095, 0.14019844462295206, 0.1266948203944951, 0.19813764037227666, 0.2096141207159149, 0.25260493289047825, 0.20692956114397643, 0.25499359802615906, 0.21084577152994965, 0.2116714433339294, 0.19173881015338468, 0.20117138005517488, 0.21214584275236148, 0.25957853556284305, 0.2537920689474782, 0.2569069639981758, 0.2102896929047421, 0.19807021774919542, 0.1899972470043002, 0.19985847506813148, 0.19349364749233577, 0.20295017181587083, 0.20182032798730487, 0.732410470762873, 0.8597354039564482, 0.1591781070748679, 0.9053200138579148, 0.9449758467322794, 0.19530688800108742, 0.17090210315549414, 0.1586008237591393, 0.16489379932627757, 0.5436497240178948, 0.5392092166732172, 0.39775297526574127, 0.16873028287854197, 0.2098511545591185, 0.213285720682872, 0.10443358988269846, 0.21116397037570445, 0.09421251894185967, 0.22142062516530991, 0.1890044193028252, 0.2028516914834393, 0.23151480628701537, 0.19974300630755948, 0.21767970443765206, 0.24781002633572502, 0.248338519110455, 0.23222975247301803, 0.0849378101833903, 0.07736208966054414, 0.10204819758100547, 0.08733788813773513, 0.11073054888327749, 0.09763238156855225, 0.10125490375348312, 0.08080991302619955, 0.09374613778867147]}, "mutation_prompt": null}
{"id": "f8c6db34-7cf7-45c3-a122-56f0668715fc", "solution": "import numpy as np\n\nclass EnhancedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.memory_size = 10  # Same size for initial simplicity\n        self.memory = np.random.uniform(self.lower_bound, self.upper_bound, (self.memory_size, self.dim))\n        self.memory_values = np.array([np.inf] * self.memory_size)\n        self.memory_rate = 0.85  # Unchanged for consistency\n        self.pitch_rate = 0.4  # Increased for potentially better adjustments\n        self.bandwidth = 0.1  # Adjusted for broader adjustments\n\n    def __call__(self, func):\n        evaluations = 0\n        for i in range(min(self.memory_size, self.budget)):\n            self.memory_values[i] = func(self.memory[i])\n            evaluations += 1\n\n        while evaluations < self.budget:\n            new_harmony = self._create_harmony()\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            new_value = func(new_harmony)\n            evaluations += 1\n\n            max_index = np.argmax(self.memory_values)\n            if new_value < self.memory_values[max_index]:\n                self.memory[max_index] = new_harmony\n                self.memory_values[max_index] = new_value\n\n            self._update_memory_strategy(evaluations)\n\n        return self.memory[np.argmin(self.memory_values)]\n\n    def _create_harmony(self):\n        harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.memory_rate:\n                harmony[i] = self.memory[np.random.randint(self.memory_size), i]\n                if np.random.rand() < self.pitch_rate:\n                    harmony[i] += (np.random.rand() - 0.5) * self.bandwidth\n            else:\n                harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return harmony\n\n    def _update_memory_strategy(self, evaluations):\n        progress_ratio = evaluations / self.budget\n        self.memory_rate = 0.9 * (1 - np.cos(progress_ratio * np.pi))  # Smoother adaptive rate\n        self.bandwidth = 0.2 * (1 - progress_ratio)  # Broader initial bandwidth", "name": "EnhancedHarmonySearch", "description": "Optimized Harmony Search with strategic adaptive rates and enhanced memory management for efficient exploration and exploitation.", "configspace": "", "generation": 58, "fitness": 0.21358306443909109, "feedback": "The algorithm EnhancedHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.15.", "error": "", "parent_id": "b0b6c457-269d-42a9-b460-7871a4657035", "metadata": {"aucs": [0.5184187866231695, 0.5314878844840926, 0.5207694664613892, 0.529428255527372, 0.5375626342520797, 0.5507041004183466, 0.5260706160243158, 0.5450010830528642, 0.535891681789756, 0.24480269156705903, 0.2025261136114671, 0.21166113649527574, 0.2192109389602106, 0.265911790057516, 0.2118780740652212, 0.22104720703145841, 0.25671169064252874, 0.25003412392245883, 0.1380240007321799, 0.1451929429145712, 0.1401845034910033, 0.14120329812060595, 0.14313444788579732, 0.14185911033783305, 0.14568054478941994, 0.12405620566583275, 0.12601593127385113, 0.12961469504088108, 0.1189005052887454, 0.11556775014679499, 0.13591248296220182, 0.12044605422565824, 0.11845864566848063, 0.1366369166810053, 0.14096331412132368, 0.09716253891687243, 0.5846496686900242, 0.5517220458291936, 0.5736972683222803, 0.5638917690851409, 0.5922278581196063, 0.5646753939996079, 0.6079469601174784, 0.5672013882312825, 0.5448753992709663, 0.3201369526833636, 0.35343463772051786, 0.28763816750213955, 0.3126497254686179, 0.29657186945289227, 0.27868147759548867, 0.2981170257837128, 0.28022051741156606, 0.2866361096075193, 0.2495444132206358, 0.17211982618203348, 0.18926312566661418, 0.16703157570777172, 0.21175942567961958, 0.18002914585059604, 0.13148051001858818, 0.19889961095747832, 0.19336625036909905, 0.1536920292821189, 0.12577283973840914, 0.11633533159360487, 0.12033429742077317, 0.12280141361226138, 0.12236752608546486, 0.14557385223941033, 0.11406401776631392, 0.11908458949466261, 0.1161829000426916, 0.10057610201700096, 0.12849066835146805, 0.15546001567910883, 0.1259574747324026, 0.12379730560543156, 0.11908001982780769, 0.1265437724739631, 0.12675716727034214, 0.0011886480434912805, 0.0004582998737987509, 0.0045746993176910555, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008502115284944378, 9.999999999998899e-05, 0.007735038464213306, 0.0622003723708463, 0.06911881281770493, 0.06297795992871669, 0.07104792400084747, 0.0727720906655922, 0.034232019800113256, 0.10448564253421266, 0.05106945652543582, 0.05752800401589897, 0.1029274324942897, 0.09054600569883675, 0.0625034423004045, 0.06891268703240783, 0.06280626100210684, 0.06825901518183508, 0.11634378443676852, 0.06474176346039673, 0.0975639703470057, 0.10525880925078068, 0.08795934810347228, 0.08123736241201096, 0.09587690257711379, 0.07201366822508748, 0.06731347237670893, 0.12785359371798455, 0.10164384240166946, 0.10793484542874143, 0.37555137849268483, 0.3994831773760573, 0.38875688058080937, 0.4003919137136073, 0.39139855002876867, 0.3718212796121837, 0.42654256157472326, 0.36989958092351505, 0.3649902384932362, 0.09236568001870815, 0.09887251850619705, 0.1103011650301432, 0.07260365340654351, 0.07690787848105063, 0.1203204788250205, 0.11171010708106588, 0.09969877745401612, 0.09511445482283876, 0.141026832509895, 0.1327186205131593, 0.14860531668866028, 0.1716762316856768, 0.19734762500839464, 0.16980423191405847, 0.2010282973968609, 0.16722048619512975, 0.15777121548293527, 0.24150218018507852, 0.24341855172919336, 0.30637140837089305, 0.23029730445967067, 0.27247991262922155, 0.3134196050159471, 0.26043171169655444, 0.23779640495428045, 0.1932495990045101, 0.16373255393744823, 0.18773364591260766, 0.18598037766302244, 0.1874276271745362, 0.24493550257261076, 0.17803977025684758, 0.1943024953634921, 0.20583144089152394, 0.17226251461327358, 0.17284337451477405, 0.201337749567561, 0.2081102951709045, 0.1877798526947254, 0.2505831694575861, 0.21490862924354648, 0.18996778653795832, 0.17861652905962166, 0.19006775572617685, 0.19679980037806566, 0.1808761895908475, 0.4105225875954772, 0.397765494103005, 0.1777392846654402, 0.18208374292221452, 0.18323196760065918, 0.1839613665333949, 0.18537334594780186, 0.16894917302460266, 0.5980660522047081, 0.5868910930359255, 0.16382930710414623, 0.1563655089961763, 0.6393314038021773, 0.5849472459745723, 0.5776545862213527, 0.5566071645086568, 0.1864616097672489, 0.1871096303649762, 0.25964339732805686, 0.3044882128678853, 0.21970721660967463, 0.19391372583219213, 0.4803706397866817, 0.4438418006754309, 0.424627809317654, 0.18555548695728719, 0.19366947321820094, 0.18895730554846946, 0.18586645433803273, 0.17996410842368937, 0.20256109677219447, 0.18007459686551996, 0.1999499708819138, 0.19884184578355268, 0.06587236813098041, 0.07883401726654682, 0.07859976678892222, 0.07459021664736187, 0.07702894646834524, 0.07432115093416591, 0.07031894856187137, 0.08372624549860175, 0.06723478766165536]}, "mutation_prompt": null}
{"id": "90bba96e-020f-4380-a6e5-b41102e95fbc", "solution": "import numpy as np\n\nclass EnhancedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory_size = 12  # Slightly increased for diversity\n        self.harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n        self.harmony_memory_values = np.array([np.inf] * self.harmony_memory_size)\n        self.harmony_memory_rate = 0.9  # Increased for more use of memory\n        self.pitch_adjustment_rate = 0.3  # Adjusted for better balance\n        self.bandwidth = 0.1  # Constant bandwidth for simplicity\n\n    def __call__(self, func):\n        evaluations = 0\n        while evaluations < self.budget:\n            if evaluations < self.harmony_memory_size:\n                self.harmony_memory_values[evaluations] = func(self.harmony_memory[evaluations])\n                evaluations += 1\n                continue\n\n            new_harmony = self._generate_harmony()\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            new_value = func(new_harmony)\n            evaluations += 1\n\n            worst_index = np.argmax(self.harmony_memory_values)\n            if new_value < self.harmony_memory_values[worst_index]:\n                self.harmony_memory[worst_index] = new_harmony\n                self.harmony_memory_values[worst_index] = new_value\n\n            self._dynamic_parameter_adjustment(evaluations)\n\n        return self.harmony_memory[np.argmin(self.harmony_memory_values)]\n\n    def _generate_harmony(self):\n        harmony = np.random.choice(self.harmony_memory.flatten(), self.dim)\n        if np.random.rand() < self.pitch_adjustment_rate:\n            harmony += (np.random.rand(self.dim) - 0.5) * self.bandwidth\n        return harmony\n\n    def _dynamic_parameter_adjustment(self, evaluations):\n        progress_ratio = evaluations / self.budget\n        self.harmony_memory_rate = 0.85 + 0.1 * np.cos(progress_ratio * np.pi)  # Dynamic rate adjustment", "name": "EnhancedHarmonySearch", "description": "Enhanced Harmony Search with improved memory selection and dynamic parameter tuning for faster convergence.", "configspace": "", "generation": 59, "fitness": 0.11833369979700734, "feedback": "The algorithm EnhancedHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.10.", "error": "", "parent_id": "b0b6c457-269d-42a9-b460-7871a4657035", "metadata": {"aucs": [0.1914736500219446, 0.17324232418262964, 0.1708233867565696, 0.15790172851014617, 0.24230833782714545, 0.1801250323892657, 0.17834571618033845, 0.27529488282026016, 0.2465322958330799, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07383280084252708, 0.05102956518052615, 0.09686351159201656, 0.06832607359663434, 0.061356962300148865, 0.04555238927109717, 0.06576211501230533, 0.052317882965243534, 0.0580708805924498, 0.09149140342649298, 0.049620691623912694, 0.08567397992605696, 0.06408918641592265, 0.0856781657422867, 0.06294266441085328, 0.06751748632874055, 0.05509585144483753, 0.07573064870976598, 0.5058782456501392, 0.4961796516162579, 0.08264978864603223, 0.23081839243362412, 0.11367328073048644, 0.07576337996447968, 0.7889372589384631, 0.12626755757502794, 0.10075220910199423, 0.078533304102954, 0.08235308246538775, 0.0937120677478055, 0.05552323840341211, 0.02872654677886799, 0.05991320687570756, 0.0890703950927686, 0.04663421194996431, 0.09564050078511388, 0.17081833893664644, 0.14883128541581514, 0.13169095706895384, 0.11985805642004621, 0.1377181169535615, 0.12464174943844752, 0.10480780894305641, 0.1455237667075564, 0.13207065759985448, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12580102838587304, 0.009259380608004908, 0.013456292012470339, 0.04813107167176478, 0.07462935909626489, 0.13245628522786068, 0.14656203352662922, 0.16494800432804202, 0.1465928241760166, 0.18274306882689806, 0.10164411206253354, 0.05192090684008599, 0.13626567597006756, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06596663892379706, 0.07630787523305405, 0.0793557152174843, 0.08139137428252685, 0.0543124952211832, 0.05679674868153761, 0.10115981732746693, 0.07064121841803139, 0.09269813129420168, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007550964040977881, 0.015583573801447481, 9.999999999998899e-05, 9.999999999998899e-05, 0.0069098458958806175, 9.999999999998899e-05, 0.23038437553591307, 0.23144152731306644, 0.21804946247943857, 0.1502191787312096, 0.17084017451717592, 0.21014701034153338, 0.283609103952159, 0.2478630731714655, 0.2178157743638639, 0.04167647629532456, 0.042493112611616146, 0.08642000145826423, 0.09882055688054592, 0.06687083994458631, 0.08473160561754467, 0.07084737898671356, 0.06289007297214555, 0.08409270426641324, 0.1419146261448886, 0.1410547193336139, 0.1624894586220056, 0.14651000665949032, 0.1460819260250904, 0.17216522518249677, 0.13919933014700125, 0.11915808075744205, 0.15634959032772222, 0.1782983554653067, 0.18498728712039603, 0.19559813395621872, 0.19474872748529226, 0.1858884259891751, 0.19135630127746006, 0.17171184438072595, 0.16533366652988057, 0.17480428181355023, 0.1156314731168161, 0.12902247063658634, 0.10835248354263971, 0.1429799827398447, 0.1297156974708905, 0.13149653982074017, 0.1293535477250869, 0.10985963062834614, 0.0981243605519776, 0.2269694188937268, 0.2197774960591209, 0.2656695182172859, 0.23282603216607922, 0.2314120505876206, 0.24876143133824258, 0.23483051009127331, 0.24194629224922815, 0.22752116611525286, 0.15806191353372434, 0.15010684330256718, 0.19067130922190112, 0.18048214671735496, 0.18059073947009785, 0.20328078050812204, 0.20265434085344203, 0.18084791998640126, 0.17109445185358074, 0.28827300852798343, 0.14577548092575976, 0.2684888549388421, 0.13931353477236463, 0.21897402557844492, 0.2248037452301742, 0.16572749592343283, 0.12691878869637296, 0.11501101154987503, 0.24878324367901572, 0.1660806058554687, 0.1624344922408325, 0.1045025346070626, 0.15049399709810518, 0.17653553050608228, 0.2396611550841562, 0.225003157853371, 0.19267807537882142, 0.19002239218527706, 0.17667925486900005, 0.18984952175085723, 0.18433439008972585, 0.1844778969113795, 0.1764907605445778, 0.18238462306650616, 0.1900881492047496, 0.18845674773642773, 0.06853072870484611, 0.08675206564918114, 0.07762560214345282, 0.07330317158018029, 0.06641881396296756, 0.08707060569347924, 0.06645296198731798, 0.08491577030648056, 0.0769928859506015]}, "mutation_prompt": null}
{"id": "214103cf-948f-485a-8838-002bac4c6a7d", "solution": "import numpy as np\n\nclass EnhancedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory_size = 12  # Slightly increased for diversity\n        self.harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n        self.harmony_memory_values = np.full(self.harmony_memory_size, np.inf)\n        self.harmony_memory_rate = 0.9  # Higher for increased exploitation\n        self.pitch_adjustment_rate = 0.25  # Reduced for more stability\n        self.bandwidth_reduction = 0.05  # Smaller initial bandwidth\n\n    def __call__(self, func):\n        evaluations = 0\n        initial_evals = min(self.harmony_memory_size, self.budget)\n        for i in range(initial_evals):\n            self.harmony_memory_values[i] = func(self.harmony_memory[i])\n            evaluations += 1\n\n        while evaluations < self.budget:\n            new_harmony = self._generate_harmony()\n            new_value = func(new_harmony)\n            evaluations += 1\n\n            if new_value < np.max(self.harmony_memory_values):\n                max_index = np.argmax(self.harmony_memory_values)\n                self.harmony_memory[max_index] = new_harmony\n                self.harmony_memory_values[max_index] = new_value\n\n            self._dynamic_adjustment(evaluations)\n\n        return self.harmony_memory[np.argmin(self.harmony_memory_values)]\n\n    def _generate_harmony(self):\n        harmony = np.copy(self.harmony_memory[np.random.randint(self.harmony_memory_size)])\n        for i in range(self.dim):\n            if np.random.rand() < self.harmony_memory_rate:\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    harmony[i] += (np.random.rand() - 0.5) * self.bandwidth_reduction\n            else:\n                harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return np.clip(harmony, self.lower_bound, self.upper_bound)\n\n    def _dynamic_adjustment(self, evaluations):\n        progress_ratio = evaluations / self.budget\n        self.harmony_memory_rate = 0.85 + 0.1 * np.cos(progress_ratio * np.pi)  # Smooth adaptive rate change\n        self.bandwidth_reduction *= 0.95  # Gradual bandwidth reduction", "name": "EnhancedHarmonySearch", "description": "Enhanced Harmony Search with selective memory refinement and dynamic parameter adaptation for better convergence efficiency.", "configspace": "", "generation": 60, "fitness": 0.15074344649632815, "feedback": "The algorithm EnhancedHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.10.", "error": "", "parent_id": "b0b6c457-269d-42a9-b460-7871a4657035", "metadata": {"aucs": [0.3765576642880494, 0.42428417864169077, 0.4074217762379275, 0.41997007478443915, 0.4060776824858878, 0.3973002241000413, 0.41453319101825714, 0.4477888855375761, 0.4252476941526372, 0.00011854082180762227, 0.08008009077102285, 0.0061768710976483066, 0.03081201521114396, 0.024119307327771677, 0.06440512560627298, 0.07321894111628535, 0.09406637861330402, 0.13861580388408568, 0.18439822759406665, 0.162844949227004, 0.1817270048663352, 0.17873297233784946, 0.15319153703265842, 0.16636503953198623, 0.18098287009894898, 0.14476136427514863, 0.1713183137575668, 0.1578194604657971, 0.13698901803066943, 0.15141761534761355, 0.15473290348843616, 0.13496465278266878, 0.15407581530590264, 0.14126928541214578, 0.14201695429386252, 0.1565321082533483, 0.1832673880606348, 0.2122908384886809, 0.233883657356028, 0.18978114818104574, 0.19506501363064477, 0.21639253047338292, 0.18811874801171424, 0.19770623658245046, 0.21716292445564556, 0.1552848808500441, 0.21215865096287123, 0.10969538374966836, 0.1897787024679114, 0.16255363769093367, 0.216574165178256, 0.16986681070267318, 0.17068798487032122, 0.1768229767430608, 0.1872299609711896, 0.10098916164261629, 0.1483594184050544, 0.25316029489744585, 0.1928956092218932, 0.21353557908595155, 0.18031936134550597, 0.1390900050714461, 0.13158405999193545, 0.07603155983827314, 0.10974715149529968, 0.12725241253587738, 0.09949052403766967, 0.1733274537990892, 0.11575132296714874, 0.1611861414268415, 0.21724457816598564, 0.13699615902841666, 0.12063945888596006, 0.07824739176624884, 0.08523642143326071, 0.10908576062156661, 0.11502813806242085, 0.11528149925709219, 0.12736966887075196, 0.0017367389888438556, 0.11854334313634662, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0001562654453663992, 0.0010517009943601385, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0568952304674929, 0.03437502218003996, 0.052010820050509166, 0.08280131676915448, 9.999999999998899e-05, 0.00040067741876281815, 0.1359028032738392, 0.09191327837830976, 0.045854378104975835, 9.999999999998899e-05, 0.0004407261680143826, 0.0010869328989391303, 0.0029200671314060234, 0.001443163056186858, 9.999999999998899e-05, 0.001404549425570445, 9.999999999998899e-05, 0.001101791645191752, 0.03879649938722507, 0.04945088487280336, 0.057612490177175846, 0.0882299054538227, 0.10237756597360403, 0.09946535374779009, 0.0641162605757214, 0.0935147093521016, 0.10053099125426201, 0.376405444680009, 0.36994480203396785, 0.34613475242061054, 0.3240587989546696, 0.352126858178055, 0.33449268408827926, 0.3270967045030325, 0.3294065243645603, 0.3454767827662151, 0.06604847792872004, 0.09171294958474241, 0.07554328343772598, 0.06685415242298098, 0.05978422452178689, 0.09892771445598025, 0.11422281048092642, 0.08242315563805025, 0.07726159278280009, 0.1515002243334258, 0.17054301182663656, 0.14488528262687583, 0.13645012002319568, 0.24367648579811385, 0.18238533173216742, 0.18660340227290972, 0.12290537785997036, 0.13541689165242465, 0.2687715906198783, 0.23958899712212822, 0.17238145913770164, 0.24789372271557208, 0.1839405308960681, 0.21566209026634942, 0.17549518900826788, 0.16339555722649735, 0.17088188355656198, 0.16043347551777098, 0.13681902002065272, 0.12246778596835828, 0.15795174027320913, 0.18908742765269382, 0.10360830418149891, 0.16574654214104756, 0.19164206723865673, 0.12817042933847056, 0.21445416059887534, 0.14645217531021715, 0.18921531079633291, 0.20461807773511387, 0.16885325220317937, 0.17444095095928025, 0.18047471655892855, 0.17183437073859253, 0.16867210992867931, 0.1907705877912278, 0.23097634822174085, 0.2209710128804212, 0.18322164901809346, 0.18447561951736202, 0.18753064476499237, 0.2655931898538081, 0.20322429001003017, 0.22028224235046268, 0.16681382231989483, 0.13604042592013244, 0.15136227577632322, 0.17196175690271231, 0.19747929068765246, 0.11363113944214798, 0.15553700925443914, 0.11420321844756343, 0.2138118805537893, 0.16835139015113343, 0.18293856077267878, 0.19505039331694984, 0.1837258471050559, 0.19581223612584453, 0.1947171975155405, 0.10352423879803085, 0.10704422309956096, 0.22970935079266908, 0.17765654149655052, 0.18610567135580036, 0.18447605833813363, 0.18510792974169632, 0.19105800518947635, 0.1746907967859832, 0.18429027118918961, 0.17946317024670466, 0.18462732406223992, 0.055788862668256334, 0.07621344832194266, 0.060797021040000954, 0.06206352097062262, 0.06763549716040229, 0.07112421052413087, 0.07427144758573923, 0.04955431222221873, 0.07932095843153442]}, "mutation_prompt": null}
{"id": "43b83a46-3f09-4622-ba1e-af483bfbd165", "solution": "import numpy as np\n\nclass OptimizedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory_size = 10  # Reduced size for faster updates\n        self.harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n        self.harmony_memory_values = np.full(self.harmony_memory_size, np.inf)\n        self.harmony_memory_rate = 0.85  # Adjusted for balanced exploration-exploitation\n        self.pitch_adjustment_rate = 0.35  # Slightly reduced for stability\n        self.bandwidth_reduction = 0.08  # Optimized bandwidth adjustment\n\n    def __call__(self, func):\n        evaluations = 0\n        initial_evals = min(self.harmony_memory_size, self.budget)\n        for i in range(initial_evals):\n            self.harmony_memory_values[i] = func(self.harmony_memory[i])\n            evaluations += 1\n\n        while evaluations < self.budget:\n            new_harmony = self._generate_harmony()\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            new_value = func(new_harmony)\n            evaluations += 1\n\n            if new_value < np.max(self.harmony_memory_values):\n                max_index = np.argmax(self.harmony_memory_values)\n                self.harmony_memory[max_index] = new_harmony\n                self.harmony_memory_values[max_index] = new_value\n\n            self._adaptive_memory_adjustment(evaluations)\n\n        return self.harmony_memory[np.argmin(self.harmony_memory_values)]\n\n    def _generate_harmony(self):\n        harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.harmony_memory_rate:\n                selected_harmony = np.random.randint(self.harmony_memory_size)\n                harmony[i] = self.harmony_memory[selected_harmony, i]\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    harmony[i] += (np.random.rand() - 0.5) * self.bandwidth_reduction\n            else:\n                harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return harmony\n\n    def _adaptive_memory_adjustment(self, evaluations):\n        progress_ratio = evaluations / self.budget\n        self.harmony_memory_rate = 0.8 + 0.15 * np.sin(progress_ratio * np.pi)  # Adaptive rate change\n        self.bandwidth_reduction = 0.1 * (1 - progress_ratio)  # Dynamic bandwidth reduction", "name": "OptimizedHarmonySearch", "description": "Optimized Harmony Search with adaptive memory and reduced dimensional search to enhance convergence speed and solution accuracy.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b0b6c457-269d-42a9-b460-7871a4657035", "metadata": {"aucs": [0.7765882938266643, 0.8243568710218775, 0.8254051892283129, 0.8453491914666238, 0.7969797973903472, 0.8066691149741904, 0.7694038085428194, 0.8057004252149417, 0.8074359098321042, 0.416117482931324, 0.39979565596447497, 0.4117686117310968, 0.43967257299511653, 0.309201016491197, 0.39693004247198227, 0.363309645263, 0.3987040955688068, 0.46254788041927597, 0.4929591324803436, 0.4274797346830146, 0.5237432093077367, 0.33025220060689886, 0.28151718403319015, 0.32055227417481513, 0.1762378267616148, 0.2467746772273809, 0.1822855015301268, 0.18841757599502484, 0.3110643327439262, 0.34249575855811754, 0.4693609030920708, 0.29315713845985214, 0.47811586297136355, 0.13214733198446993, 0.22123021537955867, 0.49549341280388726, 0.9302895297189708, 0.9028953744152621, 0.9167500970780503, 0.9057621447178014, 0.9006194430608284, 0.9332084418810526, 0.89652626832293, 0.8949245427945623, 0.8849838622200957, 0.4496857065665224, 0.4148989354449265, 0.4005082178925833, 0.5088276492448937, 0.4556779579787331, 0.5054035343535082, 0.4131295832594749, 0.4709980786533894, 0.5044368698197303, 0.208717723915833, 0.12748416645848737, 0.13981554615593395, 0.27870581867476185, 0.23517640773701698, 0.19442178331365922, 0.22174398496793624, 0.15118104659812925, 0.15904680331564958, 0.18294309776865514, 0.22628432926488862, 0.1878499226538627, 0.19735694554898042, 0.1865297475214842, 0.213974722263787, 0.20442626327730762, 0.28025631182761934, 0.24734224139470817, 0.1775954412244226, 0.11175136765787663, 0.1813205407926003, 0.1793427828487807, 0.15062929625750765, 0.22764037336437504, 0.2044711106723648, 0.18042916679348509, 0.25121360571027496, 9.999999999998899e-05, 9.999999999998899e-05, 0.004243899651041105, 0.01424030193240955, 9.999999999998899e-05, 9.999999999998899e-05, 0.025506414805956723, 9.999999999998899e-05, 9.999999999998899e-05, 0.06810023338537319, 0.03157372662137481, 0.06805889719731806, 0.0634902417765637, 0.027803266897662993, 0.009583574806745543, 0.15678582708459254, 0.07038501041287071, 0.11910115901058194, 0.1671439149330587, 0.06782909423696981, 0.11108198773078826, 0.07666082561224663, 0.07682108546585809, 0.10517283363132823, 0.08773228099343267, 0.14917483194303893, 0.13428525574038153, 0.08294570137962731, 0.11533685094911361, 0.15309175248560403, 0.09119246166888206, 0.044162803879114976, 0.022312248220477504, 0.08980622216966694, 0.18543801083494993, 0.1377555356806257, 0.4631307876036952, 0.4708990919795437, 0.48893104354439354, 0.5131882347682228, 0.5126887142985609, 0.5202854850270517, 0.5093673211847507, 0.49782059126092126, 0.516490219003638, 0.09406061726081394, 0.09454336716589007, 0.06392400651963404, 0.11308183399755323, 0.12639869793367886, 0.09848128835646508, 0.08652320075934894, 0.0855620326863833, 0.09707825493483646, 0.15489851382837005, 0.1543035080685755, 0.18549011760891643, 0.209682873967463, 0.21015216196834596, 0.1526069131286687, 0.21234289917022164, 0.1347655209550277, 0.15658083107630683, 0.17487280570636998, 0.1919112758955711, 0.1763315340483247, 0.1903785039347028, 0.20731355722158018, 0.29012440808872875, 0.23059304482764353, 0.24174176484193532, 0.17484068243162143, 0.09205759419712978, 0.15562172900780902, 0.10648366153287225, 0.153776235163694, 0.13379466123249095, 0.14019844462295206, 0.1266948203944951, 0.19813764037227666, 0.2096141207159149, 0.25260493289047825, 0.20692956114397643, 0.25499359802615906, 0.21084577152994965, 0.2116714433339294, 0.19173881015338468, 0.20117138005517488, 0.21214584275236148, 0.25957853556284305, 0.2537920689474782, 0.2569069639981758, 0.2102896929047421, 0.19807021774919542, 0.1899972470043002, 0.19985847506813148, 0.19349364749233577, 0.20295017181587083, 0.20182032798730487, 0.732410470762873, 0.8597354039564482, 0.1591781070748679, 0.9053200138579148, 0.9449758467322794, 0.19530688800108742, 0.17090210315549414, 0.1586008237591393, 0.16489379932627757, 0.5436497240178948, 0.5392092166732172, 0.39775297526574127, 0.16873028287854197, 0.2098511545591185, 0.213285720682872, 0.10443358988269846, 0.21116397037570445, 0.09421251894185967, 0.22142062516530991, 0.1890044193028252, 0.2028516914834393, 0.23151480628701537, 0.19974300630755948, 0.21767970443765206, 0.24781002633572502, 0.248338519110455, 0.23222975247301803, 0.0849378101833903, 0.07736208966054414, 0.10204819758100547, 0.08733788813773513, 0.11073054888327749, 0.09763238156855225, 0.10125490375348312, 0.08080991302619955, 0.09374613778867147]}, "mutation_prompt": null}
{"id": "f848bbfd-ac19-4e22-990b-924edfb91d62", "solution": "import numpy as np\n\nclass OptimizedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory_size = 10  # Reduced size for faster updates\n        self.harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n        self.harmony_memory_values = np.full(self.harmony_memory_size, np.inf)\n        self.harmony_memory_rate = 0.85  # Adjusted for balanced exploration-exploitation\n        self.pitch_adjustment_rate = 0.35  # Slightly reduced for stability\n        self.bandwidth_reduction = 0.08  # Optimized bandwidth adjustment\n\n    def __call__(self, func):\n        evaluations = 0\n        initial_evals = min(self.harmony_memory_size, self.budget)\n        for i in range(initial_evals):\n            self.harmony_memory_values[i] = func(self.harmony_memory[i])\n            evaluations += 1\n\n        while evaluations < self.budget:\n            new_harmony = self._generate_harmony()\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            new_value = func(new_harmony)\n            evaluations += 1\n\n            if new_value < np.max(self.harmony_memory_values):\n                max_index = np.argmax(self.harmony_memory_values)\n                self.harmony_memory[max_index] = new_harmony\n                self.harmony_memory_values[max_index] = new_value\n\n            self._adaptive_memory_adjustment(evaluations)\n\n        return self.harmony_memory[np.argmin(self.harmony_memory_values)]\n\n    def _generate_harmony(self):\n        harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.harmony_memory_rate:\n                selected_harmony = np.random.randint(self.harmony_memory_size)\n                harmony[i] = self.harmony_memory[selected_harmony, i]\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    harmony[i] += (np.random.rand() - 0.5) * self.bandwidth_reduction\n            else:\n                harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return harmony\n\n    def _adaptive_memory_adjustment(self, evaluations):\n        progress_ratio = evaluations / self.budget\n        self.harmony_memory_rate = 0.8 + 0.15 * np.sin(progress_ratio * np.pi)  # Adaptive rate change\n        self.bandwidth_reduction = 0.1 * (1 - progress_ratio)  # Dynamic bandwidth reduction", "name": "OptimizedHarmonySearch", "description": "Optimized Harmony Search with adaptive memory and reduced dimensional search to enhance convergence speed and solution accuracy.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b0b6c457-269d-42a9-b460-7871a4657035", "metadata": {"aucs": [0.7765882938266643, 0.8243568710218775, 0.8254051892283129, 0.8453491914666238, 0.7969797973903472, 0.8066691149741904, 0.7694038085428194, 0.8057004252149417, 0.8074359098321042, 0.416117482931324, 0.39979565596447497, 0.4117686117310968, 0.43967257299511653, 0.309201016491197, 0.39693004247198227, 0.363309645263, 0.3987040955688068, 0.46254788041927597, 0.4929591324803436, 0.4274797346830146, 0.5237432093077367, 0.33025220060689886, 0.28151718403319015, 0.32055227417481513, 0.1762378267616148, 0.2467746772273809, 0.1822855015301268, 0.18841757599502484, 0.3110643327439262, 0.34249575855811754, 0.4693609030920708, 0.29315713845985214, 0.47811586297136355, 0.13214733198446993, 0.22123021537955867, 0.49549341280388726, 0.9302895297189708, 0.9028953744152621, 0.9167500970780503, 0.9057621447178014, 0.9006194430608284, 0.9332084418810526, 0.89652626832293, 0.8949245427945623, 0.8849838622200957, 0.4496857065665224, 0.4148989354449265, 0.4005082178925833, 0.5088276492448937, 0.4556779579787331, 0.5054035343535082, 0.4131295832594749, 0.4709980786533894, 0.5044368698197303, 0.208717723915833, 0.12748416645848737, 0.13981554615593395, 0.27870581867476185, 0.23517640773701698, 0.19442178331365922, 0.22174398496793624, 0.15118104659812925, 0.15904680331564958, 0.18294309776865514, 0.22628432926488862, 0.1878499226538627, 0.19735694554898042, 0.1865297475214842, 0.213974722263787, 0.20442626327730762, 0.28025631182761934, 0.24734224139470817, 0.1775954412244226, 0.11175136765787663, 0.1813205407926003, 0.1793427828487807, 0.15062929625750765, 0.22764037336437504, 0.2044711106723648, 0.18042916679348509, 0.25121360571027496, 9.999999999998899e-05, 9.999999999998899e-05, 0.004243899651041105, 0.01424030193240955, 9.999999999998899e-05, 9.999999999998899e-05, 0.025506414805956723, 9.999999999998899e-05, 9.999999999998899e-05, 0.06810023338537319, 0.03157372662137481, 0.06805889719731806, 0.0634902417765637, 0.027803266897662993, 0.009583574806745543, 0.15678582708459254, 0.07038501041287071, 0.11910115901058194, 0.1671439149330587, 0.06782909423696981, 0.11108198773078826, 0.07666082561224663, 0.07682108546585809, 0.10517283363132823, 0.08773228099343267, 0.14917483194303893, 0.13428525574038153, 0.08294570137962731, 0.11533685094911361, 0.15309175248560403, 0.09119246166888206, 0.044162803879114976, 0.022312248220477504, 0.08980622216966694, 0.18543801083494993, 0.1377555356806257, 0.4631307876036952, 0.4708990919795437, 0.48893104354439354, 0.5131882347682228, 0.5126887142985609, 0.5202854850270517, 0.5093673211847507, 0.49782059126092126, 0.516490219003638, 0.09406061726081394, 0.09454336716589007, 0.06392400651963404, 0.11308183399755323, 0.12639869793367886, 0.09848128835646508, 0.08652320075934894, 0.0855620326863833, 0.09707825493483646, 0.15489851382837005, 0.1543035080685755, 0.18549011760891643, 0.209682873967463, 0.21015216196834596, 0.1526069131286687, 0.21234289917022164, 0.1347655209550277, 0.15658083107630683, 0.17487280570636998, 0.1919112758955711, 0.1763315340483247, 0.1903785039347028, 0.20731355722158018, 0.29012440808872875, 0.23059304482764353, 0.24174176484193532, 0.17484068243162143, 0.09205759419712978, 0.15562172900780902, 0.10648366153287225, 0.153776235163694, 0.13379466123249095, 0.14019844462295206, 0.1266948203944951, 0.19813764037227666, 0.2096141207159149, 0.25260493289047825, 0.20692956114397643, 0.25499359802615906, 0.21084577152994965, 0.2116714433339294, 0.19173881015338468, 0.20117138005517488, 0.21214584275236148, 0.25957853556284305, 0.2537920689474782, 0.2569069639981758, 0.2102896929047421, 0.19807021774919542, 0.1899972470043002, 0.19985847506813148, 0.19349364749233577, 0.20295017181587083, 0.20182032798730487, 0.732410470762873, 0.8597354039564482, 0.1591781070748679, 0.9053200138579148, 0.9449758467322794, 0.19530688800108742, 0.17090210315549414, 0.1586008237591393, 0.16489379932627757, 0.5436497240178948, 0.5392092166732172, 0.39775297526574127, 0.16873028287854197, 0.2098511545591185, 0.213285720682872, 0.10443358988269846, 0.21116397037570445, 0.09421251894185967, 0.22142062516530991, 0.1890044193028252, 0.2028516914834393, 0.23151480628701537, 0.19974300630755948, 0.21767970443765206, 0.24781002633572502, 0.248338519110455, 0.23222975247301803, 0.0849378101833903, 0.07736208966054414, 0.10204819758100547, 0.08733788813773513, 0.11073054888327749, 0.09763238156855225, 0.10125490375348312, 0.08080991302619955, 0.09374613778867147]}, "mutation_prompt": null}
{"id": "5138f5d7-8635-45cb-8096-22f54bc94fa0", "solution": "import numpy as np\n\nclass EnhancedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory_size = 8  # Reduced size for faster updates\n        self.harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n        self.harmony_memory_values = np.array([np.inf] * self.harmony_memory_size)\n        self.harmony_memory_rate = 0.9  # Higher rate for more exploitation\n        self.pitch_adjustment_rate = 0.3  # Adjusted for stability\n        self.bandwidth = 0.1  # Static bandwidth for simplicity\n        self.evaluations = 0\n\n    def __call__(self, func):\n        # Initial evaluations using vectorized operation\n        initial_evals = min(self.harmony_memory_size, self.budget)\n        self.harmony_memory_values[:initial_evals] = np.apply_along_axis(func, 1, self.harmony_memory[:initial_evals])\n        self.evaluations += initial_evals\n\n        while self.evaluations < self.budget:\n            new_harmony = self._generate_harmony()\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            new_value = func(new_harmony)\n            self.evaluations += 1\n\n            if new_value < np.max(self.harmony_memory_values):\n                max_index = np.argmax(self.harmony_memory_values)\n                self.harmony_memory[max_index] = new_harmony\n                self.harmony_memory_values[max_index] = new_value\n\n            # Simplified adaptive memory adjustment\n            self._adjust_harmony_memory_rate()\n\n        return self.harmony_memory[np.argmin(self.harmony_memory_values)]\n\n    def _generate_harmony(self):\n        harmony = self.harmony_memory[np.random.randint(self.harmony_memory_size)].copy()\n        for i in range(self.dim):\n            if np.random.rand() < self.pitch_adjustment_rate:\n                harmony[i] += (np.random.rand() - 0.5) * self.bandwidth\n            else:\n                harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return harmony\n\n    def _adjust_harmony_memory_rate(self):\n        self.harmony_memory_rate = 0.85 + 0.1 * np.cos(self.evaluations / self.budget * np.pi)", "name": "EnhancedHarmonySearch", "description": "Enhanced Harmony Search with strategic memory improvement and computational efficiency for black box optimization.", "configspace": "", "generation": 63, "fitness": 0.1283142731170415, "feedback": "The algorithm EnhancedHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.08.", "error": "", "parent_id": "b0b6c457-269d-42a9-b460-7871a4657035", "metadata": {"aucs": [0.25250154961453586, 0.245649425343755, 0.23727131508315802, 0.2689017028347871, 0.24865648439572674, 0.2504925885682955, 0.25046484218923315, 0.29933726313177167, 0.24683555855369255, 0.01704516570137926, 0.06499629643359717, 0.01472813271584561, 0.01595550718426708, 0.0461746900140404, 0.002408116335939847, 0.03226680605783716, 0.010547438321803715, 0.056982786476746705, 0.09834240987637244, 0.105672409876997, 0.09088459694203921, 0.12563162431792885, 0.09012068244379223, 0.09080438225466991, 0.08321207811292664, 0.11287823409139475, 0.07156343265724574, 0.07637146273566964, 0.08434042845927181, 0.06856382881223255, 0.09020862676187569, 0.07962897045116957, 0.07071294543427031, 0.08684576686506584, 0.07308269199805528, 0.06818492179310165, 0.13832463776772097, 0.1410936140696204, 0.16679185067555258, 0.1521690139534121, 0.1400195466016474, 0.13277815625473088, 0.1346022842440836, 0.14101061755865485, 0.12340870822523797, 0.14101867973700888, 0.1542330477761823, 0.12347978938263915, 0.11091442274405183, 0.12030156477868115, 0.1648143040452793, 0.11420163885854473, 0.15680232700202013, 0.13005041295898934, 0.16642002049989946, 0.18462015794243092, 0.17733812243224878, 0.18165281475806228, 0.15140096178775075, 0.1603503579770975, 0.20734247998472288, 0.2099818228935717, 0.1581296124061955, 0.05166005013054442, 0.11301140320857062, 0.04960717221277078, 0.07523524709790541, 0.0912155757174018, 0.07062586046915698, 0.13608438009674406, 0.045256207994301856, 0.061117664693255414, 0.015699803266818524, 0.06612321815247069, 0.09057746569847824, 0.08364220553409762, 0.07826310170571982, 0.06862904957187144, 0.07225345595919674, 0.06817937487568293, 0.0953170347356449, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04534450546274871, 0.07065243833503188, 0.03654492754286143, 0.12380976292708024, 0.07055710692453832, 0.05581478980280752, 0.09003886715982212, 0.0979327328203291, 0.0996708480792391, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02997810622786823, 0.04482070630770618, 0.025136318607053898, 0.011755112299185022, 0.03401341789450585, 0.009961990860729353, 0.016717976737637197, 0.03625403614193179, 0.018156459666649583, 0.27490264138672105, 0.269915429270433, 0.28799431006198695, 0.26536722234357124, 0.28406986907681064, 0.2568447804477989, 0.2725961472468331, 0.2695614497344042, 0.2719262192815135, 0.07401378316224905, 0.07951318711306121, 0.08140327165833405, 0.06507777784955793, 0.07053576333547884, 0.07359091776017324, 0.07878619075849913, 0.06104274752305083, 0.07674572930271151, 0.13767748180677974, 0.180348691488325, 0.13641828816814883, 0.1712870643802189, 0.14765406364704048, 0.20416241792570344, 0.1414849775163871, 0.180675441838697, 0.1391065015828219, 0.2342426278558486, 0.20147065404529718, 0.1920731903636148, 0.21488621062547997, 0.2039458947025491, 0.2237055040732756, 0.21264445749746874, 0.20969415319930507, 0.2163382279456404, 0.16855411706830636, 0.1558084098256617, 0.1457325004395983, 0.15797339851472847, 0.16073652382987458, 0.15126166541113506, 0.1562694276721308, 0.1348047088897687, 0.1434152528670939, 0.18431229226200563, 0.1727586896958383, 0.16907789545516572, 0.1752204202025921, 0.21347920044522029, 0.17620562295479392, 0.1773741905680699, 0.1805236007635993, 0.1677377158230804, 0.1690356561761488, 0.1658432852987749, 0.16668973897454364, 0.16630198819935738, 0.16919747725692846, 0.17290526031334308, 0.16942136513015926, 0.17239487037582601, 0.17862595815287152, 0.22482952745925433, 0.16168203467789133, 0.29102184457334146, 0.2656479672904152, 0.17594547680122108, 0.2779103091320333, 0.2765119385735567, 0.3112560101597994, 0.2647650551899813, 0.24739545256971374, 0.20293330461987014, 0.18018825403356753, 0.18998687640340017, 0.17757108977984137, 0.1623006237996909, 0.1630116432932699, 0.18371110954015568, 0.25857680340238476, 0.1882788642549107, 0.18245901751528104, 0.18761261244445737, 0.19941567122454162, 0.1854851064878108, 0.17882438871149642, 0.18597431880791593, 0.18096682875532188, 0.18737508934531866, 0.060244824050555645, 0.0775670627457874, 0.056781353089235376, 0.05861628549898179, 0.06950441140332386, 0.055533587383002514, 0.0607531074279023, 0.06278321991665248, 0.07612289930178906]}, "mutation_prompt": null}
{"id": "4ee54684-4abb-4911-a576-b336811cca9a", "solution": "import numpy as np\n\nclass OptimizedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory_size = 10  # Reduced size for faster updates\n        self.harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n        self.harmony_memory_values = np.full(self.harmony_memory_size, np.inf)\n        self.harmony_memory_rate = 0.85  # Adjusted for balanced exploration-exploitation\n        self.pitch_adjustment_rate = 0.35  # Slightly reduced for stability\n        self.bandwidth_reduction = 0.08  # Optimized bandwidth adjustment\n\n    def __call__(self, func):\n        evaluations = 0\n        initial_evals = min(self.harmony_memory_size, self.budget)\n        for i in range(initial_evals):\n            self.harmony_memory_values[i] = func(self.harmony_memory[i])\n            evaluations += 1\n\n        while evaluations < self.budget:\n            new_harmony = self._generate_harmony()\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            new_value = func(new_harmony)\n            evaluations += 1\n\n            if new_value < np.max(self.harmony_memory_values):\n                max_index = np.argmax(self.harmony_memory_values)\n                self.harmony_memory[max_index] = new_harmony\n                self.harmony_memory_values[max_index] = new_value\n\n            self._adaptive_memory_adjustment(evaluations)\n\n        return self.harmony_memory[np.argmin(self.harmony_memory_values)]\n\n    def _generate_harmony(self):\n        harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.harmony_memory_rate:\n                selected_harmony = np.random.randint(self.harmony_memory_size)\n                harmony[i] = self.harmony_memory[selected_harmony, i]\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    harmony[i] += (np.random.rand() - 0.5) * self.bandwidth_reduction\n            else:\n                harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return harmony\n\n    def _adaptive_memory_adjustment(self, evaluations):\n        progress_ratio = evaluations / self.budget\n        self.harmony_memory_rate = 0.8 + 0.15 * np.sin(progress_ratio * np.pi)  # Adaptive rate change\n        self.bandwidth_reduction = 0.1 * (1 - progress_ratio)  # Dynamic bandwidth reduction", "name": "OptimizedHarmonySearch", "description": "Optimized Harmony Search with adaptive memory and reduced dimensional search to enhance convergence speed and solution accuracy.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b0b6c457-269d-42a9-b460-7871a4657035", "metadata": {"aucs": [0.7765882938266643, 0.8243568710218775, 0.8254051892283129, 0.8453491914666238, 0.7969797973903472, 0.8066691149741904, 0.7694038085428194, 0.8057004252149417, 0.8074359098321042, 0.416117482931324, 0.39979565596447497, 0.4117686117310968, 0.43967257299511653, 0.309201016491197, 0.39693004247198227, 0.363309645263, 0.3987040955688068, 0.46254788041927597, 0.4929591324803436, 0.4274797346830146, 0.5237432093077367, 0.33025220060689886, 0.28151718403319015, 0.32055227417481513, 0.1762378267616148, 0.2467746772273809, 0.1822855015301268, 0.18841757599502484, 0.3110643327439262, 0.34249575855811754, 0.4693609030920708, 0.29315713845985214, 0.47811586297136355, 0.13214733198446993, 0.22123021537955867, 0.49549341280388726, 0.9302895297189708, 0.9028953744152621, 0.9167500970780503, 0.9057621447178014, 0.9006194430608284, 0.9332084418810526, 0.89652626832293, 0.8949245427945623, 0.8849838622200957, 0.4496857065665224, 0.4148989354449265, 0.4005082178925833, 0.5088276492448937, 0.4556779579787331, 0.5054035343535082, 0.4131295832594749, 0.4709980786533894, 0.5044368698197303, 0.208717723915833, 0.12748416645848737, 0.13981554615593395, 0.27870581867476185, 0.23517640773701698, 0.19442178331365922, 0.22174398496793624, 0.15118104659812925, 0.15904680331564958, 0.18294309776865514, 0.22628432926488862, 0.1878499226538627, 0.19735694554898042, 0.1865297475214842, 0.213974722263787, 0.20442626327730762, 0.28025631182761934, 0.24734224139470817, 0.1775954412244226, 0.11175136765787663, 0.1813205407926003, 0.1793427828487807, 0.15062929625750765, 0.22764037336437504, 0.2044711106723648, 0.18042916679348509, 0.25121360571027496, 9.999999999998899e-05, 9.999999999998899e-05, 0.004243899651041105, 0.01424030193240955, 9.999999999998899e-05, 9.999999999998899e-05, 0.025506414805956723, 9.999999999998899e-05, 9.999999999998899e-05, 0.06810023338537319, 0.03157372662137481, 0.06805889719731806, 0.0634902417765637, 0.027803266897662993, 0.009583574806745543, 0.15678582708459254, 0.07038501041287071, 0.11910115901058194, 0.1671439149330587, 0.06782909423696981, 0.11108198773078826, 0.07666082561224663, 0.07682108546585809, 0.10517283363132823, 0.08773228099343267, 0.14917483194303893, 0.13428525574038153, 0.08294570137962731, 0.11533685094911361, 0.15309175248560403, 0.09119246166888206, 0.044162803879114976, 0.022312248220477504, 0.08980622216966694, 0.18543801083494993, 0.1377555356806257, 0.4631307876036952, 0.4708990919795437, 0.48893104354439354, 0.5131882347682228, 0.5126887142985609, 0.5202854850270517, 0.5093673211847507, 0.49782059126092126, 0.516490219003638, 0.09406061726081394, 0.09454336716589007, 0.06392400651963404, 0.11308183399755323, 0.12639869793367886, 0.09848128835646508, 0.08652320075934894, 0.0855620326863833, 0.09707825493483646, 0.15489851382837005, 0.1543035080685755, 0.18549011760891643, 0.209682873967463, 0.21015216196834596, 0.1526069131286687, 0.21234289917022164, 0.1347655209550277, 0.15658083107630683, 0.17487280570636998, 0.1919112758955711, 0.1763315340483247, 0.1903785039347028, 0.20731355722158018, 0.29012440808872875, 0.23059304482764353, 0.24174176484193532, 0.17484068243162143, 0.09205759419712978, 0.15562172900780902, 0.10648366153287225, 0.153776235163694, 0.13379466123249095, 0.14019844462295206, 0.1266948203944951, 0.19813764037227666, 0.2096141207159149, 0.25260493289047825, 0.20692956114397643, 0.25499359802615906, 0.21084577152994965, 0.2116714433339294, 0.19173881015338468, 0.20117138005517488, 0.21214584275236148, 0.25957853556284305, 0.2537920689474782, 0.2569069639981758, 0.2102896929047421, 0.19807021774919542, 0.1899972470043002, 0.19985847506813148, 0.19349364749233577, 0.20295017181587083, 0.20182032798730487, 0.732410470762873, 0.8597354039564482, 0.1591781070748679, 0.9053200138579148, 0.9449758467322794, 0.19530688800108742, 0.17090210315549414, 0.1586008237591393, 0.16489379932627757, 0.5436497240178948, 0.5392092166732172, 0.39775297526574127, 0.16873028287854197, 0.2098511545591185, 0.213285720682872, 0.10443358988269846, 0.21116397037570445, 0.09421251894185967, 0.22142062516530991, 0.1890044193028252, 0.2028516914834393, 0.23151480628701537, 0.19974300630755948, 0.21767970443765206, 0.24781002633572502, 0.248338519110455, 0.23222975247301803, 0.0849378101833903, 0.07736208966054414, 0.10204819758100547, 0.08733788813773513, 0.11073054888327749, 0.09763238156855225, 0.10125490375348312, 0.08080991302619955, 0.09374613778867147]}, "mutation_prompt": null}
{"id": "30f29ba6-15b7-4de8-95b6-dc55d71a9ecd", "solution": "import numpy as np\n\nclass OptimizedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory_size = 10  # Reduced size for faster updates\n        self.harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n        self.harmony_memory_values = np.full(self.harmony_memory_size, np.inf)\n        self.harmony_memory_rate = 0.85  # Adjusted for balanced exploration-exploitation\n        self.pitch_adjustment_rate = 0.35  # Slightly reduced for stability\n        self.bandwidth_reduction = 0.08  # Optimized bandwidth adjustment\n\n    def __call__(self, func):\n        evaluations = 0\n        initial_evals = min(self.harmony_memory_size, self.budget)\n        for i in range(initial_evals):\n            self.harmony_memory_values[i] = func(self.harmony_memory[i])\n            evaluations += 1\n\n        while evaluations < self.budget:\n            new_harmony = self._generate_harmony()\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            new_value = func(new_harmony)\n            evaluations += 1\n\n            if new_value < np.max(self.harmony_memory_values):\n                max_index = np.argmax(self.harmony_memory_values)\n                self.harmony_memory[max_index] = new_harmony\n                self.harmony_memory_values[max_index] = new_value\n\n            self._adaptive_memory_adjustment(evaluations)\n\n        return self.harmony_memory[np.argmin(self.harmony_memory_values)]\n\n    def _generate_harmony(self):\n        harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.harmony_memory_rate:\n                selected_harmony = np.random.randint(self.harmony_memory_size)\n                harmony[i] = self.harmony_memory[selected_harmony, i]\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    harmony[i] += (np.random.rand() - 0.5) * self.bandwidth_reduction\n            else:\n                harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return harmony\n\n    def _adaptive_memory_adjustment(self, evaluations):\n        progress_ratio = evaluations / self.budget\n        self.harmony_memory_rate = 0.8 + 0.15 * np.sin(progress_ratio * np.pi)  # Adaptive rate change\n        self.bandwidth_reduction = 0.1 * (1 - progress_ratio)  # Dynamic bandwidth reduction", "name": "OptimizedHarmonySearch", "description": "Optimized Harmony Search with adaptive memory and reduced dimensional search to enhance convergence speed and solution accuracy.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b0b6c457-269d-42a9-b460-7871a4657035", "metadata": {"aucs": [0.7765882938266643, 0.8243568710218775, 0.8254051892283129, 0.8453491914666238, 0.7969797973903472, 0.8066691149741904, 0.7694038085428194, 0.8057004252149417, 0.8074359098321042, 0.416117482931324, 0.39979565596447497, 0.4117686117310968, 0.43967257299511653, 0.309201016491197, 0.39693004247198227, 0.363309645263, 0.3987040955688068, 0.46254788041927597, 0.4929591324803436, 0.4274797346830146, 0.5237432093077367, 0.33025220060689886, 0.28151718403319015, 0.32055227417481513, 0.1762378267616148, 0.2467746772273809, 0.1822855015301268, 0.18841757599502484, 0.3110643327439262, 0.34249575855811754, 0.4693609030920708, 0.29315713845985214, 0.47811586297136355, 0.13214733198446993, 0.22123021537955867, 0.49549341280388726, 0.9302895297189708, 0.9028953744152621, 0.9167500970780503, 0.9057621447178014, 0.9006194430608284, 0.9332084418810526, 0.89652626832293, 0.8949245427945623, 0.8849838622200957, 0.4496857065665224, 0.4148989354449265, 0.4005082178925833, 0.5088276492448937, 0.4556779579787331, 0.5054035343535082, 0.4131295832594749, 0.4709980786533894, 0.5044368698197303, 0.208717723915833, 0.12748416645848737, 0.13981554615593395, 0.27870581867476185, 0.23517640773701698, 0.19442178331365922, 0.22174398496793624, 0.15118104659812925, 0.15904680331564958, 0.18294309776865514, 0.22628432926488862, 0.1878499226538627, 0.19735694554898042, 0.1865297475214842, 0.213974722263787, 0.20442626327730762, 0.28025631182761934, 0.24734224139470817, 0.1775954412244226, 0.11175136765787663, 0.1813205407926003, 0.1793427828487807, 0.15062929625750765, 0.22764037336437504, 0.2044711106723648, 0.18042916679348509, 0.25121360571027496, 9.999999999998899e-05, 9.999999999998899e-05, 0.004243899651041105, 0.01424030193240955, 9.999999999998899e-05, 9.999999999998899e-05, 0.025506414805956723, 9.999999999998899e-05, 9.999999999998899e-05, 0.06810023338537319, 0.03157372662137481, 0.06805889719731806, 0.0634902417765637, 0.027803266897662993, 0.009583574806745543, 0.15678582708459254, 0.07038501041287071, 0.11910115901058194, 0.1671439149330587, 0.06782909423696981, 0.11108198773078826, 0.07666082561224663, 0.07682108546585809, 0.10517283363132823, 0.08773228099343267, 0.14917483194303893, 0.13428525574038153, 0.08294570137962731, 0.11533685094911361, 0.15309175248560403, 0.09119246166888206, 0.044162803879114976, 0.022312248220477504, 0.08980622216966694, 0.18543801083494993, 0.1377555356806257, 0.4631307876036952, 0.4708990919795437, 0.48893104354439354, 0.5131882347682228, 0.5126887142985609, 0.5202854850270517, 0.5093673211847507, 0.49782059126092126, 0.516490219003638, 0.09406061726081394, 0.09454336716589007, 0.06392400651963404, 0.11308183399755323, 0.12639869793367886, 0.09848128835646508, 0.08652320075934894, 0.0855620326863833, 0.09707825493483646, 0.15489851382837005, 0.1543035080685755, 0.18549011760891643, 0.209682873967463, 0.21015216196834596, 0.1526069131286687, 0.21234289917022164, 0.1347655209550277, 0.15658083107630683, 0.17487280570636998, 0.1919112758955711, 0.1763315340483247, 0.1903785039347028, 0.20731355722158018, 0.29012440808872875, 0.23059304482764353, 0.24174176484193532, 0.17484068243162143, 0.09205759419712978, 0.15562172900780902, 0.10648366153287225, 0.153776235163694, 0.13379466123249095, 0.14019844462295206, 0.1266948203944951, 0.19813764037227666, 0.2096141207159149, 0.25260493289047825, 0.20692956114397643, 0.25499359802615906, 0.21084577152994965, 0.2116714433339294, 0.19173881015338468, 0.20117138005517488, 0.21214584275236148, 0.25957853556284305, 0.2537920689474782, 0.2569069639981758, 0.2102896929047421, 0.19807021774919542, 0.1899972470043002, 0.19985847506813148, 0.19349364749233577, 0.20295017181587083, 0.20182032798730487, 0.732410470762873, 0.8597354039564482, 0.1591781070748679, 0.9053200138579148, 0.9449758467322794, 0.19530688800108742, 0.17090210315549414, 0.1586008237591393, 0.16489379932627757, 0.5436497240178948, 0.5392092166732172, 0.39775297526574127, 0.16873028287854197, 0.2098511545591185, 0.213285720682872, 0.10443358988269846, 0.21116397037570445, 0.09421251894185967, 0.22142062516530991, 0.1890044193028252, 0.2028516914834393, 0.23151480628701537, 0.19974300630755948, 0.21767970443765206, 0.24781002633572502, 0.248338519110455, 0.23222975247301803, 0.0849378101833903, 0.07736208966054414, 0.10204819758100547, 0.08733788813773513, 0.11073054888327749, 0.09763238156855225, 0.10125490375348312, 0.08080991302619955, 0.09374613778867147]}, "mutation_prompt": null}
{"id": "5bf53267-75e0-4d32-9771-68de4f9bd5a1", "solution": "import numpy as np\n\nclass OptimizedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory_size = 10  # Reduced size for faster updates\n        self.harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n        self.harmony_memory_values = np.full(self.harmony_memory_size, np.inf)\n        self.harmony_memory_rate = 0.85  # Adjusted for balanced exploration-exploitation\n        self.pitch_adjustment_rate = 0.35  # Slightly reduced for stability\n        self.bandwidth_reduction = 0.08  # Optimized bandwidth adjustment\n\n    def __call__(self, func):\n        evaluations = 0\n        initial_evals = min(self.harmony_memory_size, self.budget)\n        for i in range(initial_evals):\n            self.harmony_memory_values[i] = func(self.harmony_memory[i])\n            evaluations += 1\n\n        while evaluations < self.budget:\n            new_harmony = self._generate_harmony()\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            new_value = func(new_harmony)\n            evaluations += 1\n\n            if new_value < np.max(self.harmony_memory_values):\n                max_index = np.argmax(self.harmony_memory_values)\n                self.harmony_memory[max_index] = new_harmony\n                self.harmony_memory_values[max_index] = new_value\n\n            self._adaptive_memory_adjustment(evaluations)\n\n        return self.harmony_memory[np.argmin(self.harmony_memory_values)]\n\n    def _generate_harmony(self):\n        harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.harmony_memory_rate:\n                selected_harmony = np.random.randint(self.harmony_memory_size)\n                harmony[i] = self.harmony_memory[selected_harmony, i]\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    harmony[i] += (np.random.rand() - 0.5) * self.bandwidth_reduction\n            else:\n                harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return harmony\n\n    def _adaptive_memory_adjustment(self, evaluations):\n        progress_ratio = evaluations / self.budget\n        self.harmony_memory_rate = 0.8 + 0.15 * np.sin(progress_ratio * np.pi)  # Adaptive rate change\n        self.bandwidth_reduction = 0.1 * (1 - progress_ratio)  # Dynamic bandwidth reduction", "name": "OptimizedHarmonySearch", "description": "Optimized Harmony Search with adaptive memory and reduced dimensional search to enhance convergence speed and solution accuracy.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b0b6c457-269d-42a9-b460-7871a4657035", "metadata": {"aucs": [0.7765882938266643, 0.8243568710218775, 0.8254051892283129, 0.8453491914666238, 0.7969797973903472, 0.8066691149741904, 0.7694038085428194, 0.8057004252149417, 0.8074359098321042, 0.416117482931324, 0.39979565596447497, 0.4117686117310968, 0.43967257299511653, 0.309201016491197, 0.39693004247198227, 0.363309645263, 0.3987040955688068, 0.46254788041927597, 0.4929591324803436, 0.4274797346830146, 0.5237432093077367, 0.33025220060689886, 0.28151718403319015, 0.32055227417481513, 0.1762378267616148, 0.2467746772273809, 0.1822855015301268, 0.18841757599502484, 0.3110643327439262, 0.34249575855811754, 0.4693609030920708, 0.29315713845985214, 0.47811586297136355, 0.13214733198446993, 0.22123021537955867, 0.49549341280388726, 0.9302895297189708, 0.9028953744152621, 0.9167500970780503, 0.9057621447178014, 0.9006194430608284, 0.9332084418810526, 0.89652626832293, 0.8949245427945623, 0.8849838622200957, 0.4496857065665224, 0.4148989354449265, 0.4005082178925833, 0.5088276492448937, 0.4556779579787331, 0.5054035343535082, 0.4131295832594749, 0.4709980786533894, 0.5044368698197303, 0.208717723915833, 0.12748416645848737, 0.13981554615593395, 0.27870581867476185, 0.23517640773701698, 0.19442178331365922, 0.22174398496793624, 0.15118104659812925, 0.15904680331564958, 0.18294309776865514, 0.22628432926488862, 0.1878499226538627, 0.19735694554898042, 0.1865297475214842, 0.213974722263787, 0.20442626327730762, 0.28025631182761934, 0.24734224139470817, 0.1775954412244226, 0.11175136765787663, 0.1813205407926003, 0.1793427828487807, 0.15062929625750765, 0.22764037336437504, 0.2044711106723648, 0.18042916679348509, 0.25121360571027496, 9.999999999998899e-05, 9.999999999998899e-05, 0.004243899651041105, 0.01424030193240955, 9.999999999998899e-05, 9.999999999998899e-05, 0.025506414805956723, 9.999999999998899e-05, 9.999999999998899e-05, 0.06810023338537319, 0.03157372662137481, 0.06805889719731806, 0.0634902417765637, 0.027803266897662993, 0.009583574806745543, 0.15678582708459254, 0.07038501041287071, 0.11910115901058194, 0.1671439149330587, 0.06782909423696981, 0.11108198773078826, 0.07666082561224663, 0.07682108546585809, 0.10517283363132823, 0.08773228099343267, 0.14917483194303893, 0.13428525574038153, 0.08294570137962731, 0.11533685094911361, 0.15309175248560403, 0.09119246166888206, 0.044162803879114976, 0.022312248220477504, 0.08980622216966694, 0.18543801083494993, 0.1377555356806257, 0.4631307876036952, 0.4708990919795437, 0.48893104354439354, 0.5131882347682228, 0.5126887142985609, 0.5202854850270517, 0.5093673211847507, 0.49782059126092126, 0.516490219003638, 0.09406061726081394, 0.09454336716589007, 0.06392400651963404, 0.11308183399755323, 0.12639869793367886, 0.09848128835646508, 0.08652320075934894, 0.0855620326863833, 0.09707825493483646, 0.15489851382837005, 0.1543035080685755, 0.18549011760891643, 0.209682873967463, 0.21015216196834596, 0.1526069131286687, 0.21234289917022164, 0.1347655209550277, 0.15658083107630683, 0.17487280570636998, 0.1919112758955711, 0.1763315340483247, 0.1903785039347028, 0.20731355722158018, 0.29012440808872875, 0.23059304482764353, 0.24174176484193532, 0.17484068243162143, 0.09205759419712978, 0.15562172900780902, 0.10648366153287225, 0.153776235163694, 0.13379466123249095, 0.14019844462295206, 0.1266948203944951, 0.19813764037227666, 0.2096141207159149, 0.25260493289047825, 0.20692956114397643, 0.25499359802615906, 0.21084577152994965, 0.2116714433339294, 0.19173881015338468, 0.20117138005517488, 0.21214584275236148, 0.25957853556284305, 0.2537920689474782, 0.2569069639981758, 0.2102896929047421, 0.19807021774919542, 0.1899972470043002, 0.19985847506813148, 0.19349364749233577, 0.20295017181587083, 0.20182032798730487, 0.732410470762873, 0.8597354039564482, 0.1591781070748679, 0.9053200138579148, 0.9449758467322794, 0.19530688800108742, 0.17090210315549414, 0.1586008237591393, 0.16489379932627757, 0.5436497240178948, 0.5392092166732172, 0.39775297526574127, 0.16873028287854197, 0.2098511545591185, 0.213285720682872, 0.10443358988269846, 0.21116397037570445, 0.09421251894185967, 0.22142062516530991, 0.1890044193028252, 0.2028516914834393, 0.23151480628701537, 0.19974300630755948, 0.21767970443765206, 0.24781002633572502, 0.248338519110455, 0.23222975247301803, 0.0849378101833903, 0.07736208966054414, 0.10204819758100547, 0.08733788813773513, 0.11073054888327749, 0.09763238156855225, 0.10125490375348312, 0.08080991302619955, 0.09374613778867147]}, "mutation_prompt": null}
{"id": "466fc8a6-417b-49be-b597-73a96816b783", "solution": "import numpy as np\n\nclass EnhancedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.memory_size = 8  # Reduced size for quicker convergence\n        self.memory = np.random.uniform(self.lower_bound, self.upper_bound, (self.memory_size, self.dim))\n        self.memory_values = np.inf * np.ones(self.memory_size)\n        self.memory_rate = 0.9  # Increased for exploration\n        self.adjustment_rate = 0.3  # Balanced rate for pitch adjustment\n        self.dynamic_bandwidth = 0.05  # Improved dynamic bandwidth\n\n    def __call__(self, func):\n        evaluations = 0\n        for i in range(min(self.memory_size, self.budget)):\n            self.memory_values[i] = func(self.memory[i])\n            evaluations += 1\n\n        while evaluations < self.budget:\n            new_harmony = self._generate_harmony()\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            new_value = func(new_harmony)\n            evaluations += 1\n\n            max_value_index = np.argmax(self.memory_values)\n            if new_value < self.memory_values[max_value_index]:\n                self.memory[max_value_index] = new_harmony\n                self.memory_values[max_value_index] = new_value\n\n            self._dynamic_adjustment(evaluations)\n\n        return self.memory[np.argmin(self.memory_values)]\n\n    def _generate_harmony(self):\n        harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.memory_rate:\n                harmony[i] = np.random.choice(self.memory[:, i])\n                if np.random.rand() < self.adjustment_rate:\n                    harmony[i] += (np.random.rand() - 0.5) * self.dynamic_bandwidth\n            else:\n                harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return harmony\n\n    def _dynamic_adjustment(self, evaluations):\n        progress = evaluations / self.budget\n        self.memory_rate = 0.85 + 0.10 * np.cos(progress * np.pi)  # Cosine-based adjustment\n        self.dynamic_bandwidth = 0.06 * (1 - progress)  # Gradual bandwidth reduction", "name": "EnhancedHarmonySearch", "description": "Enhanced Harmony Search with efficient memory updates and dynamic parameter tuning for improved performance.", "configspace": "", "generation": 67, "fitness": 0.2698071207259755, "feedback": "The algorithm EnhancedHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.23.", "error": "", "parent_id": "b0b6c457-269d-42a9-b460-7871a4657035", "metadata": {"aucs": [0.8643875024663191, 0.8568629512077836, 0.7746170917904679, 0.8596823839991312, 0.8793817575043792, 0.850405411111612, 0.8044292743919872, 0.8728904679204676, 0.8384215502534977, 0.42734752449035585, 0.40853284560556924, 0.3940955098311091, 0.42366913297022013, 0.480303733152579, 0.3904420516342967, 0.4577881887027877, 0.4188280660479431, 0.4565790616616945, 0.5406327743413666, 0.18802637807835287, 0.29800945874807294, 0.5455440297626936, 0.16935682540847974, 0.4585524951466231, 0.410429033395465, 0.4049578810350586, 0.37085375077337546, 0.38587439586130545, 0.1691437269152104, 0.1589506332282592, 0.31236656992473877, 0.18986723684441864, 0.17756461586334948, 0.23519979425824378, 0.3175716785676389, 0.16319482031507437, 0.8880719529179808, 0.8614980709074709, 0.8106570251657239, 0.9149815577732652, 0.8651446459627652, 0.8901385177517058, 0.913118068863312, 0.8646149875528161, 0.8465743125569138, 0.48282353910037523, 0.46961952590309686, 0.4878630571357835, 0.15618016959325542, 0.31374608764268774, 0.41253373697903806, 0.3423727096403365, 0.3201817758430521, 0.11860061419791346, 0.1576861906014434, 0.23347856581316584, 0.13469289554844976, 0.23681610430922473, 0.31601593978248765, 0.17662317701884622, 0.19859269785814326, 0.15225520910369705, 0.12192384761426234, 0.2159294684166443, 0.1949013292603593, 0.2174229953283835, 0.21539203581148092, 0.22522853119176767, 0.19326062131912358, 0.22008213013360878, 0.25836722128180856, 0.16452916500578396, 0.19666587047130812, 0.09781807130688469, 0.18519630747924176, 0.16635050985173072, 0.19383707275009943, 0.2519819004942204, 0.15480654094699697, 0.16307451055560274, 0.3276244254946806, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006826123867923473, 9.999999999998899e-05, 0.0005758991288201676, 0.035632380117432194, 0.040794458952066126, 0.062331651981522906, 0.05692798861560999, 0.09222055041971577, 0.041679263092396335, 0.09991982490303275, 0.044650205718772984, 0.0908854318181993, 0.10603808265915482, 0.03740246772783884, 0.21030352162379384, 0.08422259489289574, 0.07994001140081619, 0.15213079089829495, 0.08587799674308683, 0.27371020772439847, 0.09015881274199633, 0.024667713363883514, 0.08942692485437687, 0.08610557055576462, 0.30644285539974536, 0.04304573416880486, 0.2429280824043506, 0.20218517633910815, 0.10408352931525788, 0.09350659281437934, 0.4701122401853315, 0.4906400137289779, 0.5107089723283046, 0.5259627074329214, 0.5212621132601618, 0.5072442139532385, 0.5205860772495803, 0.4918790967435819, 0.49604848834987103, 0.09954458503522001, 0.1404703569093746, 0.07993576008891923, 0.04293935503173907, 0.05059097406038948, 0.1145028832311491, 0.10896637497031259, 0.05795842732767453, 0.07415980498598129, 0.12694091811732555, 0.1892017752266102, 0.28555146413284105, 0.14500951516388427, 0.11325883360876576, 0.1670420047413319, 0.1226271976451071, 0.16240229278457208, 0.1699811684157948, 0.15303742272465315, 0.20221623460851368, 0.15972013695506415, 0.2046223673000117, 0.1766402576812527, 0.264118639570156, 0.16077687831462573, 0.18060985574968746, 0.1862862979929869, 0.11280188853905715, 0.23725197185789215, 0.15692820425017107, 0.12894157866834355, 0.10323466419421623, 0.14051048025458657, 0.14787488511789892, 0.13968617946048234, 0.15755353281246842, 0.1812464343827751, 0.20903450347945896, 0.2774236930601318, 0.22781623604782886, 0.1882884109842896, 0.3348598210784781, 0.273436563197308, 0.208167977904556, 0.1858408679199508, 0.6747804705431436, 0.2393802563256593, 0.2584142234942275, 0.25112133989928154, 0.2026639582931462, 0.22363221442150294, 0.2055276654195779, 0.6701229568666254, 0.22795002805441544, 0.1592864761973104, 0.18914061297790608, 0.13615028356177994, 0.8754727559439349, 0.8956416059802352, 0.1421962273909423, 0.13645973461271899, 0.15953336093112613, 0.16480396026925614, 0.3677698618023959, 0.11143685372952783, 0.2028733922010002, 0.21087217751160447, 0.21270516673379847, 0.20318868860810768, 0.11261900574119899, 0.16421426152153284, 0.19189658087792227, 0.1951591633012385, 0.22598115964935972, 0.1913813907943147, 0.20592680191634094, 0.23994650198037393, 0.2763589803814662, 0.19873364886800604, 0.2376271158862273, 0.25417350207197453, 0.07691133812583506, 0.07479792188989254, 0.05870137698260136, 0.06200233799571231, 0.07736113392861843, 0.05271173435881715, 0.08966354845483604, 0.06467118240109226, 0.05256678140800852]}, "mutation_prompt": null}
{"id": "9bf66e94-3c90-4afd-b377-a1a0d18552b9", "solution": "import numpy as np\n\nclass EnhancedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory_size = 8  # Smaller size for quicker convergence\n        self.harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n        self.harmony_memory_values = np.full(self.harmony_memory_size, np.inf)\n        self.harmony_memory_rate = 0.9  # Increased for better exploitation\n        self.pitch_adjustment_rate = 0.4  # Increased for more exploration\n        self.bandwidth_reduction = 0.06  # Smaller bandwidth for precise adjustments\n\n    def __call__(self, func):\n        evaluations = 0\n        initial_evals = min(self.harmony_memory_size, self.budget)\n        for i in range(initial_evals):\n            self.harmony_memory_values[i] = func(self.harmony_memory[i])\n            evaluations += 1\n\n        while evaluations < self.budget:\n            new_harmony = self._generate_harmony()\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            new_value = func(new_harmony)\n            evaluations += 1\n\n            max_index = np.argmax(self.harmony_memory_values)\n            if new_value < self.harmony_memory_values[max_index]:\n                self.harmony_memory[max_index] = new_harmony\n                self.harmony_memory_values[max_index] = new_value\n\n            self._adaptive_memory_adjustment(evaluations)\n\n        return self.harmony_memory[np.argmin(self.harmony_memory_values)]\n\n    def _generate_harmony(self):\n        harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            selected_harmony = np.random.randint(self.harmony_memory_size)\n            if np.random.rand() < self.harmony_memory_rate:\n                harmony[i] = self.harmony_memory[selected_harmony, i]\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    harmony[i] += np.random.uniform(-self.bandwidth_reduction, self.bandwidth_reduction)\n            else:\n                harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return harmony\n\n    def _adaptive_memory_adjustment(self, evaluations):\n        progress_ratio = evaluations / self.budget\n        self.harmony_memory_rate = 0.85 + 0.1 * np.cos(progress_ratio * np.pi)  # Adaptive rate oscillation\n        self.pitch_adjustment_rate = 0.3 + 0.2 * (1 - progress_ratio)  # Dynamic pitch adjustment increase", "name": "EnhancedHarmonySearch", "description": "Enhanced Harmony Search with stochastic replacement and adaptive exploration-exploitation balance for improved convergence.", "configspace": "", "generation": 68, "fitness": 0.25714299195717577, "feedback": "The algorithm EnhancedHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.22.", "error": "", "parent_id": "b0b6c457-269d-42a9-b460-7871a4657035", "metadata": {"aucs": [0.7314383258165247, 0.760557994601163, 0.7686164455974134, 0.8218844543859656, 0.6962164488435649, 0.6864031443357741, 0.7528670492278862, 0.6855590561216547, 0.7282932987197209, 0.31597921647021077, 0.316058226710919, 0.3565170617362424, 0.3912320562820908, 0.36389970612236133, 0.3431203608135134, 0.3830204926721055, 0.3492800097831429, 0.3402849842195761, 0.3280285761511289, 0.2527834751260901, 0.30962210149974045, 0.16925143524233777, 0.18175551463928818, 0.1750150205743175, 0.24150476201050664, 0.23189923937363421, 0.30529284681635205, 0.163517265412362, 0.18336569014671122, 0.1644832953951345, 0.1433355717910918, 0.37913466863859835, 0.15348597228611238, 0.195872870767146, 0.19915220970729086, 0.2265030808051316, 0.9609298275893448, 0.89375280841511, 0.9172688880411111, 0.9360664336783764, 0.91997935284386, 0.9220230721119882, 0.9253846983169111, 0.9376349752050616, 0.9246076031034565, 0.43862087794179294, 0.4282867594911052, 0.49990643057006856, 0.4039633778753806, 0.4820832436894765, 0.4269890852292253, 0.36894278373597544, 0.40583092200364945, 0.3398613607239126, 0.15143059199138276, 0.1184682730155211, 0.18541630718389257, 0.2064381296620239, 0.157211416138469, 0.20318951861209855, 0.12558979059163045, 0.14013846708186906, 0.1255618384933792, 0.18649818977456256, 0.13000102457643048, 0.3612545057516252, 0.14009146022058316, 0.2022310564571569, 0.17302376946551834, 0.1835590046715897, 0.259889506397209, 0.35846160697665463, 0.23715969442710327, 0.0788963530336052, 0.19704805020715876, 0.18471724755635877, 0.1707574365468012, 0.18365662206699973, 0.1893409405596782, 9.999999999998899e-05, 0.2029395189620259, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0894855016070345, 0.000376375589396738, 0.008557575890363323, 0.02897085560281798, 9.999999999998899e-05, 0.001377889275389843, 0.037524806522891585, 0.045701652922674474, 0.06810645615735211, 0.09191264910546815, 0.005394432723687559, 0.04486421776428595, 0.10822505591517295, 0.06525466684013115, 0.05096974347706251, 0.03493075178184368, 0.10825343887747518, 0.1403314047651667, 0.08935937048144482, 0.09786662209724817, 0.11406250407311558, 0.1850406465790272, 0.13439266014805706, 0.08760057671863819, 0.02914513286746756, 0.1883183495743741, 0.11922231707120501, 0.167453600599888, 0.16427145505704432, 0.026606453005445285, 0.13897292686629603, 0.16991298267161603, 0.08252353497818554, 0.466443431715989, 0.4755002766451404, 0.49183988129800893, 0.544910854219802, 0.5516534729180831, 0.537605023977068, 0.49890202492802294, 0.5225950825890693, 0.5255878158764542, 0.05110694047353104, 0.06712566040510215, 0.06512988313324009, 0.06638617976853534, 0.07178898363146691, 0.10269316837885034, 0.10149634352654047, 0.192795632499142, 0.07423674549698167, 0.13200079416048627, 0.14559132622437299, 0.17175510734242472, 0.15756952701524007, 0.2636550566168343, 0.26883178269682617, 0.15887892289941008, 0.20816494743206793, 0.14298109615830001, 0.14350361171401982, 0.2877076293974755, 0.1473383906144511, 0.1851371014602312, 0.18193761258280228, 0.17115214175118088, 0.23689579022800655, 0.2085106371087242, 0.17389679523492285, 0.18490280135060289, 0.08626548796218081, 0.13413991845937567, 0.21595867522962708, 0.13101970409781405, 0.1923317564929964, 0.12917451807314684, 0.14364984688303972, 0.09765718246591537, 0.18270885202967369, 0.21101054212932702, 0.19492645328927305, 0.24855372628051087, 0.20799169791119643, 0.19801234894516562, 0.206393544595872, 0.22291429889136338, 0.2963419915304618, 0.21511978628147432, 0.19743126320948012, 0.2284903741394282, 0.1910359120892885, 0.2300438223491561, 0.33202612688399824, 0.19893689863045838, 0.18030035319732962, 0.20127162110551766, 0.16017443782023966, 0.18983713510405842, 0.8535977248998975, 0.17060609359151802, 0.9391223996929514, 0.47212405228278154, 0.11845641820441233, 0.12976215425832593, 0.16446488251167846, 0.10345544179903243, 0.4460902342261527, 0.6179090805812284, 0.09747875573014986, 0.21388266139850998, 0.21278449570065527, 0.11107155055238271, 0.17009978538173887, 0.10410796065465822, 0.2193461493024721, 0.21168611886200228, 0.20809655586526077, 0.20158689509963024, 0.22546107707108243, 0.18491909803662032, 0.20898071435446675, 0.20910597123724106, 0.20474073558123307, 0.10609902948830041, 0.10622561837473565, 0.06981987522594713, 0.0862233798840627, 0.10277963513657395, 0.08105076094162544, 0.1227535182001348, 0.08716660116365438, 0.07408273047486924]}, "mutation_prompt": null}
{"id": "8e3b3385-e8ae-4c88-afdd-dd99fa416975", "solution": "import numpy as np\n\nclass OptimizedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory_size = 10  # Reduced size for faster updates\n        self.harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n        self.harmony_memory_values = np.full(self.harmony_memory_size, np.inf)\n        self.harmony_memory_rate = 0.85  # Adjusted for balanced exploration-exploitation\n        self.pitch_adjustment_rate = 0.35  # Slightly reduced for stability\n        self.bandwidth_reduction = 0.08  # Optimized bandwidth adjustment\n\n    def __call__(self, func):\n        evaluations = 0\n        initial_evals = min(self.harmony_memory_size, self.budget)\n        for i in range(initial_evals):\n            self.harmony_memory_values[i] = func(self.harmony_memory[i])\n            evaluations += 1\n\n        while evaluations < self.budget:\n            new_harmony = self._generate_harmony()\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            new_value = func(new_harmony)\n            evaluations += 1\n\n            if new_value < np.max(self.harmony_memory_values):\n                max_index = np.argmax(self.harmony_memory_values)\n                self.harmony_memory[max_index] = new_harmony\n                self.harmony_memory_values[max_index] = new_value\n\n            self._adaptive_memory_adjustment(evaluations)\n\n        return self.harmony_memory[np.argmin(self.harmony_memory_values)]\n\n    def _generate_harmony(self):\n        harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.harmony_memory_rate:\n                selected_harmony = np.random.randint(self.harmony_memory_size)\n                harmony[i] = self.harmony_memory[selected_harmony, i]\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    harmony[i] += (np.random.rand() - 0.5) * self.bandwidth_reduction\n            else:\n                harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return harmony\n\n    def _adaptive_memory_adjustment(self, evaluations):\n        progress_ratio = evaluations / self.budget\n        self.harmony_memory_rate = 0.8 + 0.15 * np.sin(progress_ratio * np.pi)  # Adaptive rate change\n        self.bandwidth_reduction = 0.1 * (1 - progress_ratio)  # Dynamic bandwidth reduction", "name": "OptimizedHarmonySearch", "description": "Optimized Harmony Search with adaptive memory and reduced dimensional search to enhance convergence speed and solution accuracy.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b0b6c457-269d-42a9-b460-7871a4657035", "metadata": {"aucs": [0.7765882938266643, 0.8243568710218775, 0.8254051892283129, 0.8453491914666238, 0.7969797973903472, 0.8066691149741904, 0.7694038085428194, 0.8057004252149417, 0.8074359098321042, 0.416117482931324, 0.39979565596447497, 0.4117686117310968, 0.43967257299511653, 0.309201016491197, 0.39693004247198227, 0.363309645263, 0.3987040955688068, 0.46254788041927597, 0.4929591324803436, 0.4274797346830146, 0.5237432093077367, 0.33025220060689886, 0.28151718403319015, 0.32055227417481513, 0.1762378267616148, 0.2467746772273809, 0.1822855015301268, 0.18841757599502484, 0.3110643327439262, 0.34249575855811754, 0.4693609030920708, 0.29315713845985214, 0.47811586297136355, 0.13214733198446993, 0.22123021537955867, 0.49549341280388726, 0.9302895297189708, 0.9028953744152621, 0.9167500970780503, 0.9057621447178014, 0.9006194430608284, 0.9332084418810526, 0.89652626832293, 0.8949245427945623, 0.8849838622200957, 0.4496857065665224, 0.4148989354449265, 0.4005082178925833, 0.5088276492448937, 0.4556779579787331, 0.5054035343535082, 0.4131295832594749, 0.4709980786533894, 0.5044368698197303, 0.208717723915833, 0.12748416645848737, 0.13981554615593395, 0.27870581867476185, 0.23517640773701698, 0.19442178331365922, 0.22174398496793624, 0.15118104659812925, 0.15904680331564958, 0.18294309776865514, 0.22628432926488862, 0.1878499226538627, 0.19735694554898042, 0.1865297475214842, 0.213974722263787, 0.20442626327730762, 0.28025631182761934, 0.24734224139470817, 0.1775954412244226, 0.11175136765787663, 0.1813205407926003, 0.1793427828487807, 0.15062929625750765, 0.22764037336437504, 0.2044711106723648, 0.18042916679348509, 0.25121360571027496, 9.999999999998899e-05, 9.999999999998899e-05, 0.004243899651041105, 0.01424030193240955, 9.999999999998899e-05, 9.999999999998899e-05, 0.025506414805956723, 9.999999999998899e-05, 9.999999999998899e-05, 0.06810023338537319, 0.03157372662137481, 0.06805889719731806, 0.0634902417765637, 0.027803266897662993, 0.009583574806745543, 0.15678582708459254, 0.07038501041287071, 0.11910115901058194, 0.1671439149330587, 0.06782909423696981, 0.11108198773078826, 0.07666082561224663, 0.07682108546585809, 0.10517283363132823, 0.08773228099343267, 0.14917483194303893, 0.13428525574038153, 0.08294570137962731, 0.11533685094911361, 0.15309175248560403, 0.09119246166888206, 0.044162803879114976, 0.022312248220477504, 0.08980622216966694, 0.18543801083494993, 0.1377555356806257, 0.4631307876036952, 0.4708990919795437, 0.48893104354439354, 0.5131882347682228, 0.5126887142985609, 0.5202854850270517, 0.5093673211847507, 0.49782059126092126, 0.516490219003638, 0.09406061726081394, 0.09454336716589007, 0.06392400651963404, 0.11308183399755323, 0.12639869793367886, 0.09848128835646508, 0.08652320075934894, 0.0855620326863833, 0.09707825493483646, 0.15489851382837005, 0.1543035080685755, 0.18549011760891643, 0.209682873967463, 0.21015216196834596, 0.1526069131286687, 0.21234289917022164, 0.1347655209550277, 0.15658083107630683, 0.17487280570636998, 0.1919112758955711, 0.1763315340483247, 0.1903785039347028, 0.20731355722158018, 0.29012440808872875, 0.23059304482764353, 0.24174176484193532, 0.17484068243162143, 0.09205759419712978, 0.15562172900780902, 0.10648366153287225, 0.153776235163694, 0.13379466123249095, 0.14019844462295206, 0.1266948203944951, 0.19813764037227666, 0.2096141207159149, 0.25260493289047825, 0.20692956114397643, 0.25499359802615906, 0.21084577152994965, 0.2116714433339294, 0.19173881015338468, 0.20117138005517488, 0.21214584275236148, 0.25957853556284305, 0.2537920689474782, 0.2569069639981758, 0.2102896929047421, 0.19807021774919542, 0.1899972470043002, 0.19985847506813148, 0.19349364749233577, 0.20295017181587083, 0.20182032798730487, 0.732410470762873, 0.8597354039564482, 0.1591781070748679, 0.9053200138579148, 0.9449758467322794, 0.19530688800108742, 0.17090210315549414, 0.1586008237591393, 0.16489379932627757, 0.5436497240178948, 0.5392092166732172, 0.39775297526574127, 0.16873028287854197, 0.2098511545591185, 0.213285720682872, 0.10443358988269846, 0.21116397037570445, 0.09421251894185967, 0.22142062516530991, 0.1890044193028252, 0.2028516914834393, 0.23151480628701537, 0.19974300630755948, 0.21767970443765206, 0.24781002633572502, 0.248338519110455, 0.23222975247301803, 0.0849378101833903, 0.07736208966054414, 0.10204819758100547, 0.08733788813773513, 0.11073054888327749, 0.09763238156855225, 0.10125490375348312, 0.08080991302619955, 0.09374613778867147]}, "mutation_prompt": null}
{"id": "d5bcda47-caf5-421f-a220-1ca85a9cece0", "solution": "import numpy as np\n\nclass EnhancedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory_size = 8  # Slightly reduced size to focus on quality solutions\n        self.harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n        self.harmony_memory_quality = np.full(self.harmony_memory_size, np.inf)\n        self.memory_acceptance_rate = 0.9  # Increased for better exploration control\n        self.adjustment_rate = 0.3  # Fine-tuned for consistent performance\n        self.dynamic_bandwidth = 0.07  # More responsive bandwidth control\n\n    def __call__(self, func):\n        eval_count = 0\n        initial_eval_limit = min(self.harmony_memory_size, self.budget)\n        for i in range(initial_eval_limit):\n            self.harmony_memory_quality[i] = func(self.harmony_memory[i])\n            eval_count += 1\n\n        while eval_count < self.budget:\n            candidate_harmony = self._create_harmony()\n            candidate_harmony = np.clip(candidate_harmony, self.lower_bound, self.upper_bound)\n            candidate_value = func(candidate_harmony)\n            eval_count += 1\n\n            if candidate_value < np.max(self.harmony_memory_quality):\n                worst_index = np.argmax(self.harmony_memory_quality)\n                self.harmony_memory[worst_index] = candidate_harmony\n                self.harmony_memory_quality[worst_index] = candidate_value\n\n            self._dynamic_memory_adjustment(eval_count)\n\n        return self.harmony_memory[np.argmin(self.harmony_memory_quality)]\n\n    def _create_harmony(self):\n        harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.memory_acceptance_rate:\n                chosen_harmony = np.random.choice(self.harmony_memory_size)\n                harmony[i] = self.harmony_memory[chosen_harmony, i]\n                if np.random.rand() < self.adjustment_rate:\n                    harmony[i] += (np.random.rand() - 0.5) * self.dynamic_bandwidth\n            else:\n                harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return harmony\n\n    def _dynamic_memory_adjustment(self, eval_count):\n        progress = eval_count / self.budget\n        self.memory_acceptance_rate = 0.85 + 0.1 * np.cos(progress * np.pi)  # Adaptive rate change\n        self.dynamic_bandwidth = 0.09 * (1 - progress)  # Dynamic bandwidth reduction", "name": "EnhancedHarmonySearch", "description": "Enhanced Harmony Search with dynamic memory adaptation and hybrid exploration for improved efficiency and accuracy.", "configspace": "", "generation": 70, "fitness": 0.2702304143380502, "feedback": "The algorithm EnhancedHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.23.", "error": "", "parent_id": "b0b6c457-269d-42a9-b460-7871a4657035", "metadata": {"aucs": [0.83618828964102, 0.8446828318593255, 0.7875656111714421, 0.8430525165184296, 0.8248449744205396, 0.8028407621619015, 0.8128986072683806, 0.8406233507434907, 0.822820604378218, 0.38781042703305457, 0.421271491821152, 0.3567353560430343, 0.41124671200922547, 0.376769176003266, 0.370025734247291, 0.3806196521454204, 0.504048606255046, 0.35094031637057765, 0.4183048594230967, 0.18782619181937166, 0.29960088641738813, 0.5368944667181653, 0.17830789635936617, 0.4518884869224036, 0.33829606499151477, 0.2830510298927732, 0.33639441329395947, 0.3294397376996502, 0.16928583964669686, 0.14840104116517105, 0.2970281202579388, 0.19035380816216074, 0.17766160063294523, 0.1685398190093108, 0.3314880078115914, 0.3108572705076579, 0.8915253309847168, 0.8834987871079782, 0.8630530879595856, 0.9254356623542845, 0.8725383381672648, 0.8984370970151462, 0.9422591600493707, 0.8762939005609893, 0.9053426233762221, 0.4637338434705598, 0.49352014800008515, 0.4702939875868283, 0.34080202324892583, 0.35729206608714625, 0.4526983459951702, 0.33276756240040584, 0.4566728894023159, 0.13132517284564615, 0.1583851302621453, 0.19327566400148766, 0.13469076214823472, 0.3641100030658805, 0.21043685706919446, 0.17951993661378296, 0.19196054455662448, 0.21013055042815, 0.12137028608047362, 0.2096059721505883, 0.18638320435772648, 0.2335771306861062, 0.20473353998786015, 0.23114022050865324, 0.4441425108891107, 0.3082499614867821, 0.2706842454392786, 0.177181710410097, 0.19884612516970246, 0.09875896451034749, 0.20400390758851072, 0.13118995246740928, 0.18218029754671905, 0.2539337807089056, 0.12836609893136341, 9.999999999998899e-05, 0.2985348964707527, 9.999999999998899e-05, 0.019445849240612323, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01027062466444928, 0.025674525903474077, 0.04088431506118473, 0.09411241891948285, 0.05750747122027822, 0.09349544343418947, 0.04222647647652156, 0.10101729580819285, 0.04422761217363935, 0.08440248712899445, 0.09764622207165707, 0.0376736746908235, 0.05752829068606646, 0.0794759630729317, 0.08018602636441552, 0.1541357539774122, 0.08369681772520032, 0.22244371107712235, 0.0994374584279396, 0.02790948325002285, 0.08105181923724736, 0.11220014945151746, 0.15803617524710023, 0.04443130070371004, 0.22338637035227416, 0.17533802511140661, 0.10521594174995608, 0.09323680408278157, 0.4801773089918553, 0.4984229618290257, 0.48656784379670504, 0.5476804538498281, 0.5403508935584336, 0.5167030688076306, 0.5077336063015803, 0.4959688474456607, 0.4983379931383368, 0.09950387757901413, 0.0909439767143867, 0.08292558088389268, 0.0673619823623205, 0.08929708125724645, 0.09965754686105721, 0.10883196606375589, 0.05795892106966405, 0.07422678803894067, 0.1685048647490459, 0.18726340704335476, 0.30357674284026803, 0.1646377165089411, 0.2202945250017877, 0.13023211512409016, 0.13851812153328047, 0.1984758183682247, 0.134113278566645, 0.18987181162010047, 0.16930086184088378, 0.17143485533336822, 0.20176676278730343, 0.17370640168684182, 0.2516752441183022, 0.19092880774473597, 0.18745672780470657, 0.16794290143457724, 0.10815864378472961, 0.1434464808765109, 0.1759525620500959, 0.20751150983878763, 0.10461304297263285, 0.21881979745338165, 0.14883927667489882, 0.16419824218676027, 0.11382501150896673, 0.22600918290229888, 0.21568838362843634, 0.2826092046677061, 0.22063899448526003, 0.19865932517660168, 0.23567182353423943, 0.2246118800125857, 0.20220874707482117, 0.2662875925456899, 0.22965648722719312, 0.21326572070798733, 0.22016842036295303, 0.2259951908263662, 0.21431901349247906, 0.2567146310438496, 0.23082970559784488, 0.2417041408052617, 0.21018454868551495, 0.15917054369424355, 0.9209274944082815, 0.18693923962575076, 0.9044075419406851, 0.9279044800558014, 0.16533355179165898, 0.21224726710317787, 0.15956619936498262, 0.16556200442675129, 0.41679532815554066, 0.16814380172026977, 0.2164164993022365, 0.20846975566378045, 0.21136140059242747, 0.2077779135132728, 0.11276721674145973, 0.16717338956058048, 0.2201414783215624, 0.18488370098291795, 0.21596023043477186, 0.22009207255924546, 0.2081862848852869, 0.20041580731027353, 0.2279495253652617, 0.24279405860423964, 0.2977863105584011, 0.21650045405730733, 0.08544788230568068, 0.07194139156615187, 0.09116267439340608, 0.08428660573307867, 0.05034193048589897, 0.05509739514007028, 0.081119511138115, 0.08625004082485976, 0.0669279436306528]}, "mutation_prompt": null}
{"id": "3b8aad30-41a1-458f-8ebf-4af05775e66b", "solution": "import numpy as np\n\nclass EnhancedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory_size = 8  # Smaller size for quicker memory updates\n        self.harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n        self.harmony_memory_values = np.full(self.harmony_memory_size, np.inf)\n        self.harmony_memory_rate = 0.9  # Higher rate for better exploitation\n        self.pitch_adjustment_rate = 0.3  # Slightly reduced for more precise tuning\n        self.bandwidth = 0.05  # Adjusted for fine-grained pitch changes\n\n    def __call__(self, func):\n        evaluations = 0\n        initial_evals = min(self.harmony_memory_size, self.budget)\n        for i in range(initial_evals):\n            self.harmony_memory_values[i] = func(self.harmony_memory[i])\n            evaluations += 1\n\n        while evaluations < self.budget:\n            new_harmony = self._generate_harmony()\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            new_value = func(new_harmony)\n            evaluations += 1\n\n            if new_value < np.max(self.harmony_memory_values):\n                max_index = np.argmax(self.harmony_memory_values)\n                self.harmony_memory[max_index] = new_harmony\n                self.harmony_memory_values[max_index] = new_value\n\n            self._dynamic_adjustment(evaluations)\n\n        return self.harmony_memory[np.argmin(self.harmony_memory_values)]\n\n    def _generate_harmony(self):\n        harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.harmony_memory_rate:\n                selected_harmony = np.random.randint(self.harmony_memory_size)\n                harmony[i] = self.harmony_memory[selected_harmony, i]\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    harmony[i] += (np.random.rand() - 0.5) * self.bandwidth\n            else:\n                harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return harmony\n\n    def _dynamic_adjustment(self, evaluations):\n        progress_ratio = evaluations / self.budget\n        self.harmony_memory_rate = 0.85 + 0.1 * np.cos(progress_ratio * np.pi)  # Smooth rate adaptation\n        self.bandwidth = 0.07 * (1 - progress_ratio)  # Linearly decreasing bandwidth", "name": "EnhancedHarmonySearch", "description": "Enhanced Harmony Search with dynamic tuning of memory and pitch adjustment for improved convergence speed and solution quality.", "configspace": "", "generation": 71, "fitness": 0.265165543332638, "feedback": "The algorithm EnhancedHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.23.", "error": "", "parent_id": "b0b6c457-269d-42a9-b460-7871a4657035", "metadata": {"aucs": [0.8070766933984174, 0.8256358866374717, 0.8163031471212085, 0.8103024620137553, 0.8928628320744273, 0.859526677317066, 0.8113210510456438, 0.8182148852735658, 0.8364541930690333, 0.3577750063566062, 0.43611772807830507, 0.3508403406607773, 0.47989591950599764, 0.48560588914880265, 0.3507544501045967, 0.46353827046269336, 0.46598816437677126, 0.3585506597787972, 0.4078931093395757, 0.18917100209628834, 0.2826438808529018, 0.4987473290356679, 0.17801980160722541, 0.4947545665679298, 0.37293832651483305, 0.30894175977128857, 0.35005995563379944, 0.3410180553107781, 0.18147603714289484, 0.1650385547072818, 0.2990438877291979, 0.19083692081488524, 0.17810201396246939, 0.17195419498740816, 0.33103261599686606, 0.1632047672265653, 0.8942554438029169, 0.8696047607006083, 0.8437420876616109, 0.9295984755772366, 0.8705629886806833, 0.8950190301228209, 0.9252237738011866, 0.8696339707150875, 0.8849217298959916, 0.4131509739629803, 0.4661050299143691, 0.47897620463570945, 0.19598079316746075, 0.28037644959953134, 0.4328674025330269, 0.19821759199507383, 0.43038008701569086, 0.12806835853518383, 0.1576953127378834, 0.18291828446063918, 0.13864888517686946, 0.34365803948690277, 0.26834634599784235, 0.1406816958731053, 0.15516029791388486, 0.1887166127515233, 0.1211154300820717, 0.22246258918676642, 0.18546073506038885, 0.24087948653382507, 0.2158955694310436, 0.22252574143734338, 0.4026398997638433, 0.28173841464048377, 0.264585612839631, 0.17341531973846958, 0.20117246748150286, 0.09804181141629309, 0.18420952234689492, 0.12962456489941454, 0.18841700718004972, 0.25333576793177515, 0.1282892764460032, 9.999999999998899e-05, 0.3245477917883087, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005057171178786124, 9.999999999998899e-05, 0.0026279994204524426, 0.03285005937253338, 0.05142986875170097, 0.06068524280401, 0.055827833537222205, 0.10404677621459846, 0.04573239633138859, 0.10034751043596479, 0.04489798629885988, 0.08369977226839642, 0.100772008217204, 0.03585539066536081, 0.21444278814566275, 0.08029923229755187, 0.08173627582374643, 0.15877421582616136, 0.08691772360054018, 0.30686343058671195, 0.09358473033828174, 0.02873493423664697, 0.08873133479772044, 0.09257838110912175, 0.3000054129102606, 0.04322612689089089, 0.15265459148008775, 0.1854519243770304, 0.10202462949199254, 0.09406722912874921, 0.45602527499569856, 0.48725579966066057, 0.5192580056007876, 0.5509603940453864, 0.5281617288814491, 0.5064355665231088, 0.4933254721388367, 0.49703745817825684, 0.49013405138913346, 0.09943541724911265, 0.09050742686505142, 0.08003742929465207, 0.04293146139868764, 0.04545608538737722, 0.1144894712549418, 0.10878588701638803, 0.05799925363109071, 0.0740775566167744, 0.23002478686403516, 0.21175570126998589, 0.23772084700388485, 0.16915124217251665, 0.2268645149275943, 0.14306501181408782, 0.22259402861654864, 0.12879975360925167, 0.13270807563215514, 0.19639982123397337, 0.17414896708270866, 0.14847384767023863, 0.21339388006272053, 0.19312522254686815, 0.24620584824360647, 0.16128586341410478, 0.17761275968820733, 0.14756309086658093, 0.11245860460413748, 0.2713047105543185, 0.1271051401697466, 0.1872737744025208, 0.13870256935910164, 0.1862447435606549, 0.158291371210304, 0.14828990591682212, 0.14829162239613525, 0.1933475085400319, 0.2071809403822007, 0.2857250109446432, 0.19332008576481885, 0.17133780324150216, 0.3527659768230661, 0.21396724814359513, 0.23214529281446272, 0.25426785102907157, 0.22966162043463922, 0.23962532980700257, 0.25838583100151014, 0.2521097525060564, 0.18689106573007486, 0.2501745872635641, 0.2308820610313711, 0.19506531902132296, 0.22542928252075167, 0.1593941937518637, 0.18917893108100703, 0.13631186132797934, 0.8806525183471892, 0.9111995856935818, 0.2518257388290155, 0.13727342178314117, 0.15939115172435336, 0.16479706777787706, 0.3769303426165721, 0.11168142560149952, 0.1724507886231924, 0.20775992347656935, 0.21322031258187057, 0.20340555925460635, 0.11278185647203787, 0.1646673332414037, 0.2075564613218791, 0.2297806478806328, 0.22108148318867404, 0.20328631913590967, 0.23290488809827514, 0.1970350609361331, 0.22677905990508362, 0.24843901675448354, 0.19305391481626655, 0.2130919959989901, 0.08393375654684865, 0.0871877833440109, 0.07032060623415237, 0.07666430002739455, 0.12065565528569655, 0.06229705370975602, 0.07960742475316751, 0.06461840192487744, 0.06385785860456561]}, "mutation_prompt": null}
{"id": "9d64eb98-d7de-436f-956d-f2f7e75c2e7b", "solution": "import numpy as np\n\nclass OptimizedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory_size = 10  # Reduced size for faster updates\n        self.harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n        self.harmony_memory_values = np.full(self.harmony_memory_size, np.inf)\n        self.harmony_memory_rate = 0.85  # Adjusted for balanced exploration-exploitation\n        self.pitch_adjustment_rate = 0.35  # Slightly reduced for stability\n        self.bandwidth_reduction = 0.08  # Optimized bandwidth adjustment\n\n    def __call__(self, func):\n        evaluations = 0\n        initial_evals = min(self.harmony_memory_size, self.budget)\n        for i in range(initial_evals):\n            self.harmony_memory_values[i] = func(self.harmony_memory[i])\n            evaluations += 1\n\n        while evaluations < self.budget:\n            new_harmony = self._generate_harmony()\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            new_value = func(new_harmony)\n            evaluations += 1\n\n            if new_value < np.max(self.harmony_memory_values):\n                max_index = np.argmax(self.harmony_memory_values)\n                self.harmony_memory[max_index] = new_harmony\n                self.harmony_memory_values[max_index] = new_value\n\n            self._adaptive_memory_adjustment(evaluations)\n\n        return self.harmony_memory[np.argmin(self.harmony_memory_values)]\n\n    def _generate_harmony(self):\n        harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.harmony_memory_rate:\n                selected_harmony = np.random.randint(self.harmony_memory_size)\n                harmony[i] = self.harmony_memory[selected_harmony, i]\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    harmony[i] += (np.random.rand() - 0.5) * self.bandwidth_reduction\n            else:\n                harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return harmony\n\n    def _adaptive_memory_adjustment(self, evaluations):\n        progress_ratio = evaluations / self.budget\n        self.harmony_memory_rate = 0.8 + 0.15 * np.sin(progress_ratio * np.pi)  # Adaptive rate change\n        self.bandwidth_reduction = 0.1 * (1 - progress_ratio)  # Dynamic bandwidth reduction", "name": "OptimizedHarmonySearch", "description": "Optimized Harmony Search with adaptive memory and reduced dimensional search to enhance convergence speed and solution accuracy.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b0b6c457-269d-42a9-b460-7871a4657035", "metadata": {"aucs": [0.7765882938266643, 0.8243568710218775, 0.8254051892283129, 0.8453491914666238, 0.7969797973903472, 0.8066691149741904, 0.7694038085428194, 0.8057004252149417, 0.8074359098321042, 0.416117482931324, 0.39979565596447497, 0.4117686117310968, 0.43967257299511653, 0.309201016491197, 0.39693004247198227, 0.363309645263, 0.3987040955688068, 0.46254788041927597, 0.4929591324803436, 0.4274797346830146, 0.5237432093077367, 0.33025220060689886, 0.28151718403319015, 0.32055227417481513, 0.1762378267616148, 0.2467746772273809, 0.1822855015301268, 0.18841757599502484, 0.3110643327439262, 0.34249575855811754, 0.4693609030920708, 0.29315713845985214, 0.47811586297136355, 0.13214733198446993, 0.22123021537955867, 0.49549341280388726, 0.9302895297189708, 0.9028953744152621, 0.9167500970780503, 0.9057621447178014, 0.9006194430608284, 0.9332084418810526, 0.89652626832293, 0.8949245427945623, 0.8849838622200957, 0.4496857065665224, 0.4148989354449265, 0.4005082178925833, 0.5088276492448937, 0.4556779579787331, 0.5054035343535082, 0.4131295832594749, 0.4709980786533894, 0.5044368698197303, 0.208717723915833, 0.12748416645848737, 0.13981554615593395, 0.27870581867476185, 0.23517640773701698, 0.19442178331365922, 0.22174398496793624, 0.15118104659812925, 0.15904680331564958, 0.18294309776865514, 0.22628432926488862, 0.1878499226538627, 0.19735694554898042, 0.1865297475214842, 0.213974722263787, 0.20442626327730762, 0.28025631182761934, 0.24734224139470817, 0.1775954412244226, 0.11175136765787663, 0.1813205407926003, 0.1793427828487807, 0.15062929625750765, 0.22764037336437504, 0.2044711106723648, 0.18042916679348509, 0.25121360571027496, 9.999999999998899e-05, 9.999999999998899e-05, 0.004243899651041105, 0.01424030193240955, 9.999999999998899e-05, 9.999999999998899e-05, 0.025506414805956723, 9.999999999998899e-05, 9.999999999998899e-05, 0.06810023338537319, 0.03157372662137481, 0.06805889719731806, 0.0634902417765637, 0.027803266897662993, 0.009583574806745543, 0.15678582708459254, 0.07038501041287071, 0.11910115901058194, 0.1671439149330587, 0.06782909423696981, 0.11108198773078826, 0.07666082561224663, 0.07682108546585809, 0.10517283363132823, 0.08773228099343267, 0.14917483194303893, 0.13428525574038153, 0.08294570137962731, 0.11533685094911361, 0.15309175248560403, 0.09119246166888206, 0.044162803879114976, 0.022312248220477504, 0.08980622216966694, 0.18543801083494993, 0.1377555356806257, 0.4631307876036952, 0.4708990919795437, 0.48893104354439354, 0.5131882347682228, 0.5126887142985609, 0.5202854850270517, 0.5093673211847507, 0.49782059126092126, 0.516490219003638, 0.09406061726081394, 0.09454336716589007, 0.06392400651963404, 0.11308183399755323, 0.12639869793367886, 0.09848128835646508, 0.08652320075934894, 0.0855620326863833, 0.09707825493483646, 0.15489851382837005, 0.1543035080685755, 0.18549011760891643, 0.209682873967463, 0.21015216196834596, 0.1526069131286687, 0.21234289917022164, 0.1347655209550277, 0.15658083107630683, 0.17487280570636998, 0.1919112758955711, 0.1763315340483247, 0.1903785039347028, 0.20731355722158018, 0.29012440808872875, 0.23059304482764353, 0.24174176484193532, 0.17484068243162143, 0.09205759419712978, 0.15562172900780902, 0.10648366153287225, 0.153776235163694, 0.13379466123249095, 0.14019844462295206, 0.1266948203944951, 0.19813764037227666, 0.2096141207159149, 0.25260493289047825, 0.20692956114397643, 0.25499359802615906, 0.21084577152994965, 0.2116714433339294, 0.19173881015338468, 0.20117138005517488, 0.21214584275236148, 0.25957853556284305, 0.2537920689474782, 0.2569069639981758, 0.2102896929047421, 0.19807021774919542, 0.1899972470043002, 0.19985847506813148, 0.19349364749233577, 0.20295017181587083, 0.20182032798730487, 0.732410470762873, 0.8597354039564482, 0.1591781070748679, 0.9053200138579148, 0.9449758467322794, 0.19530688800108742, 0.17090210315549414, 0.1586008237591393, 0.16489379932627757, 0.5436497240178948, 0.5392092166732172, 0.39775297526574127, 0.16873028287854197, 0.2098511545591185, 0.213285720682872, 0.10443358988269846, 0.21116397037570445, 0.09421251894185967, 0.22142062516530991, 0.1890044193028252, 0.2028516914834393, 0.23151480628701537, 0.19974300630755948, 0.21767970443765206, 0.24781002633572502, 0.248338519110455, 0.23222975247301803, 0.0849378101833903, 0.07736208966054414, 0.10204819758100547, 0.08733788813773513, 0.11073054888327749, 0.09763238156855225, 0.10125490375348312, 0.08080991302619955, 0.09374613778867147]}, "mutation_prompt": null}
{"id": "86a848d7-7f8c-45cc-855f-3febd406327b", "solution": "import numpy as np\n\nclass EnhancedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory_size = 8  # Reduced size for quicker adaptation\n        self.harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n        self.harmony_memory_values = np.full(self.harmony_memory_size, np.inf)\n        self.harmony_memory_rate = 0.9  # Increased rate for more intensive learning\n        self.pitch_adjustment_rate = 0.3  # Fine-tuned for better harmony balance\n        self.bandwidth = 0.1  # Constant bandwidth for simplicity\n\n    def __call__(self, func):\n        evaluations = 0\n        initial_evals = min(self.harmony_memory_size, self.budget)\n        for i in range(initial_evals):\n            self.harmony_memory_values[i] = func(self.harmony_memory[i])\n            evaluations += 1\n\n        while evaluations < self.budget:\n            new_harmony = self._generate_harmony()\n            new_value = func(new_harmony)\n            evaluations += 1\n\n            if new_value < np.max(self.harmony_memory_values):\n                max_index = np.argmax(self.harmony_memory_values)\n                self.harmony_memory[max_index] = new_harmony\n                self.harmony_memory_values[max_index] = new_value\n\n            self._dynamic_adjustment(evaluations)\n\n        return self.harmony_memory[np.argmin(self.harmony_memory_values)]\n\n    def _generate_harmony(self):\n        harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.harmony_memory_rate:\n                selected_harmony = np.random.choice(self.harmony_memory_size)\n                harmony[i] = self.harmony_memory[selected_harmony, i]\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    harmony[i] += (np.random.rand() - 0.5) * self.bandwidth\n            else:\n                harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return np.clip(harmony, self.lower_bound, self.upper_bound)\n\n    def _dynamic_adjustment(self, evaluations):\n        progress_ratio = evaluations / self.budget\n        self.harmony_memory_rate = 0.85 + 0.1 * np.cos(progress_ratio * np.pi)  # Dynamic rate tuning", "name": "EnhancedHarmonySearch", "description": "Enhanced Harmony Search with dynamic tuning and streamlined processes for improved performance.", "configspace": "", "generation": 73, "fitness": 0.262958299615332, "feedback": "The algorithm EnhancedHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.23.", "error": "", "parent_id": "b0b6c457-269d-42a9-b460-7871a4657035", "metadata": {"aucs": [0.786028692971184, 0.7971879935761121, 0.7472497077352981, 0.7624717208264407, 0.8254940990739684, 0.8035224294086217, 0.7986517917029362, 0.7561145351033509, 0.7869549818336652, 0.4044004838111981, 0.39614926192069566, 0.2837694846326333, 0.3527143295225693, 0.36374824858236277, 0.3877313498179953, 0.44869803010377396, 0.36521875156426353, 0.3121212243602888, 0.31431560778626266, 0.18776370374069817, 0.1705048224211987, 0.4503880687954078, 0.16587816932240096, 0.3357286729972492, 0.26769642509659686, 0.2592375492047294, 0.26379765477869066, 0.27741854081195216, 0.17038800777560503, 0.14829523808898815, 0.18113544241600388, 0.18709635084912046, 0.17884367314485894, 0.15527313393838416, 0.2701347946212106, 0.2641850939555046, 0.8993376801572296, 0.9016870196180653, 0.9075775837471715, 0.9462598280115534, 0.8982051811174988, 0.9161704891820448, 0.9301605320435599, 0.9041395195205827, 0.9062916835446942, 0.4390718991678184, 0.5047760512445261, 0.4337867315697417, 0.40076096735349664, 0.3673081109634885, 0.397462456442629, 0.32437318233252377, 0.40685631114273824, 0.29528804426553856, 0.1583116535521114, 0.17676745942762462, 0.1407332692341211, 0.8101056968331872, 0.21092405798555602, 0.13747711175088373, 0.15469878596992526, 0.15924441800264832, 0.12128216371261535, 0.208967357119051, 0.17933876137282223, 0.23593487734139573, 0.17754041517287678, 0.20898247356522148, 0.15023011186453128, 0.28303093992363826, 0.244820816109247, 0.1685679953225392, 0.18804731102752958, 0.10365321319842347, 0.20090196157031692, 0.16056470155655733, 0.19101565793499098, 0.2599058888768624, 0.12868311572885627, 9.999999999998899e-05, 0.3078489085784917, 9.999999999998899e-05, 0.04444089317897981, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0063268405755089185, 0.03944273866755754, 0.03652062143565349, 0.06133939392293708, 0.058389942276095064, 0.09494135909319068, 0.041739562661800456, 0.10177930019501613, 0.042909798855093495, 0.08502585524824047, 0.0971269778336955, 0.03605395255122601, 0.059879141039869466, 0.08128372330480527, 0.07614533630118203, 0.15158833173780617, 0.0867005815260683, 0.2153735053643382, 0.10813011673425676, 0.0250265322003852, 0.07625170048168062, 0.09195163603105705, 0.3275819378340309, 0.044417832453301886, 0.18989290612438203, 0.20713053833670914, 0.10603326988045136, 0.09349876402384616, 0.4635579644154203, 0.46340980171702084, 0.5029152757090178, 0.5175391331060231, 0.472447623095813, 0.5089932110097919, 0.46695349819708987, 0.4967282553241551, 0.5700337454231419, 0.09943810171916956, 0.09087702128410258, 0.08289655904115845, 0.04310686648482809, 0.09801042234492108, 0.11412934815558984, 0.10891905871795915, 0.058022940364956255, 0.07423609436734857, 0.11205952612219028, 0.20055586401733427, 0.26434483804080866, 0.1956266007247759, 0.17641320231073676, 0.23162282409476898, 0.17890339296158364, 0.19488573465984915, 0.14267683304115109, 0.1543202715763986, 0.15222481050764414, 0.17182710064845252, 0.21257386140978052, 0.1717318572333708, 0.2434240423691073, 0.18052482691560467, 0.17454682403629262, 0.21066870145089278, 0.11490281917337164, 0.14358017372630383, 0.15345662868583276, 0.19176612842322738, 0.13327875159770852, 0.1237300867074198, 0.14776321498893563, 0.11518264527141031, 0.10997037009365795, 0.19090108214239876, 0.19312715878323938, 0.30184036759465294, 0.16770375821387207, 0.17006029034980397, 0.23065293267640097, 0.18897441927742697, 0.22125838197501002, 0.2336989551631643, 0.229625517369213, 0.213175216450605, 0.2207864096582346, 0.22633183075006702, 0.2007489323542997, 0.226957454260017, 0.23081983353273194, 0.2394054219539391, 0.2279813151805602, 0.15940194422310794, 0.8907778861543714, 0.13657139115260164, 0.9250726002078835, 0.9223370578514165, 0.1715530138771708, 0.17047075291914515, 0.11435907525096156, 0.16584037347849312, 0.4086548067147403, 0.17448123641190827, 0.2508918254040948, 0.20955698485170327, 0.2115222284373096, 0.20862381373757366, 0.11283155008016077, 0.16589095063788428, 0.25721670351226555, 0.23139081745377343, 0.20772610263856495, 0.20664994981752705, 0.2535707879838427, 0.25064169330368635, 0.21864786751376664, 0.24941860941435556, 0.21903084062861056, 0.2765373166963858, 0.09331999948339331, 0.08139864323736024, 0.06341456846207005, 0.08455326670395658, 0.09875441575505517, 0.06998224054023872, 0.09044065100521181, 0.08439290785818887, 0.0531181642428763]}, "mutation_prompt": null}
{"id": "15e41d05-26de-42ba-bc74-86ef1bf85bb3", "solution": "import numpy as np\n\nclass EnhancedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory_size = 8  # Reduced size for efficiency\n        self.harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n        self.harmony_memory_values = np.full(self.harmony_memory_size, np.inf)\n        self.harmony_memory_rate = 0.9  # Increased for more exploitation\n        self.pitch_adjustment_rate = 0.3  # Reduced for stability\n        self.bandwidth = 0.1  # Static bandwidth\n\n    def __call__(self, func):\n        evaluations = 0\n        for i in range(min(self.harmony_memory_size, self.budget)):\n            self.harmony_memory_values[i] = func(self.harmony_memory[i])\n            evaluations += 1\n\n        while evaluations < self.budget:\n            new_harmony = self._generate_harmony()\n            np.clip(new_harmony, self.lower_bound, self.upper_bound, out=new_harmony)\n            new_value = func(new_harmony)\n            evaluations += 1\n\n            if new_value < np.max(self.harmony_memory_values):\n                max_index = np.argmax(self.harmony_memory_values)\n                self.harmony_memory[max_index] = new_harmony\n                self.harmony_memory_values[max_index] = new_value\n\n            self._adaptive_parameter_tuning(evaluations)\n\n        return self.harmony_memory[np.argmin(self.harmony_memory_values)]\n\n    def _generate_harmony(self):\n        harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.harmony_memory_rate:\n                harmony[i] = self.harmony_memory[np.random.randint(self.harmony_memory_size), i]\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    harmony[i] += (np.random.rand() - 0.5) * self.bandwidth\n            else:\n                harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return harmony\n\n    def _adaptive_parameter_tuning(self, evaluations):\n        progress_ratio = evaluations / self.budget\n        self.harmony_memory_rate = 0.85 + 0.10 * np.cos(progress_ratio * np.pi)  # Cosine tuning", "name": "EnhancedHarmonySearch", "description": "Enhanced Harmony Search with dimensionality reduction and adaptive parameter tuning for superior performance.", "configspace": "", "generation": 74, "fitness": 0.262958299615332, "feedback": "The algorithm EnhancedHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.23.", "error": "", "parent_id": "b0b6c457-269d-42a9-b460-7871a4657035", "metadata": {"aucs": [0.786028692971184, 0.7971879935761121, 0.7472497077352981, 0.7624717208264407, 0.8254940990739684, 0.8035224294086217, 0.7986517917029362, 0.7561145351033509, 0.7869549818336652, 0.4044004838111981, 0.39614926192069566, 0.2837694846326333, 0.3527143295225693, 0.36374824858236277, 0.3877313498179953, 0.44869803010377396, 0.36521875156426353, 0.3121212243602888, 0.31431560778626266, 0.18776370374069817, 0.1705048224211987, 0.4503880687954078, 0.16587816932240096, 0.3357286729972492, 0.26769642509659686, 0.2592375492047294, 0.26379765477869066, 0.27741854081195216, 0.17038800777560503, 0.14829523808898815, 0.18113544241600388, 0.18709635084912046, 0.17884367314485894, 0.15527313393838416, 0.2701347946212106, 0.2641850939555046, 0.8993376801572296, 0.9016870196180653, 0.9075775837471715, 0.9462598280115534, 0.8982051811174988, 0.9161704891820448, 0.9301605320435599, 0.9041395195205827, 0.9062916835446942, 0.4390718991678184, 0.5047760512445261, 0.4337867315697417, 0.40076096735349664, 0.3673081109634885, 0.397462456442629, 0.32437318233252377, 0.40685631114273824, 0.29528804426553856, 0.1583116535521114, 0.17676745942762462, 0.1407332692341211, 0.8101056968331872, 0.21092405798555602, 0.13747711175088373, 0.15469878596992526, 0.15924441800264832, 0.12128216371261535, 0.208967357119051, 0.17933876137282223, 0.23593487734139573, 0.17754041517287678, 0.20898247356522148, 0.15023011186453128, 0.28303093992363826, 0.244820816109247, 0.1685679953225392, 0.18804731102752958, 0.10365321319842347, 0.20090196157031692, 0.16056470155655733, 0.19101565793499098, 0.2599058888768624, 0.12868311572885627, 9.999999999998899e-05, 0.3078489085784917, 9.999999999998899e-05, 0.04444089317897981, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0063268405755089185, 0.03944273866755754, 0.03652062143565349, 0.06133939392293708, 0.058389942276095064, 0.09494135909319068, 0.041739562661800456, 0.10177930019501613, 0.042909798855093495, 0.08502585524824047, 0.0971269778336955, 0.03605395255122601, 0.059879141039869466, 0.08128372330480527, 0.07614533630118203, 0.15158833173780617, 0.0867005815260683, 0.2153735053643382, 0.10813011673425676, 0.0250265322003852, 0.07625170048168062, 0.09195163603105705, 0.3275819378340309, 0.044417832453301886, 0.18989290612438203, 0.20713053833670914, 0.10603326988045136, 0.09349876402384616, 0.4635579644154203, 0.46340980171702084, 0.5029152757090178, 0.5175391331060231, 0.472447623095813, 0.5089932110097919, 0.46695349819708987, 0.4967282553241551, 0.5700337454231419, 0.09943810171916956, 0.09087702128410258, 0.08289655904115845, 0.04310686648482809, 0.09801042234492108, 0.11412934815558984, 0.10891905871795915, 0.058022940364956255, 0.07423609436734857, 0.11205952612219028, 0.20055586401733427, 0.26434483804080866, 0.1956266007247759, 0.17641320231073676, 0.23162282409476898, 0.17890339296158364, 0.19488573465984915, 0.14267683304115109, 0.1543202715763986, 0.15222481050764414, 0.17182710064845252, 0.21257386140978052, 0.1717318572333708, 0.2434240423691073, 0.18052482691560467, 0.17454682403629262, 0.21066870145089278, 0.11490281917337164, 0.14358017372630383, 0.15345662868583276, 0.19176612842322738, 0.13327875159770852, 0.1237300867074198, 0.14776321498893563, 0.11518264527141031, 0.10997037009365795, 0.19090108214239876, 0.19312715878323938, 0.30184036759465294, 0.16770375821387207, 0.17006029034980397, 0.23065293267640097, 0.18897441927742697, 0.22125838197501002, 0.2336989551631643, 0.229625517369213, 0.213175216450605, 0.2207864096582346, 0.22633183075006702, 0.2007489323542997, 0.226957454260017, 0.23081983353273194, 0.2394054219539391, 0.2279813151805602, 0.15940194422310794, 0.8907778861543714, 0.13657139115260164, 0.9250726002078835, 0.9223370578514165, 0.1715530138771708, 0.17047075291914515, 0.11435907525096156, 0.16584037347849312, 0.4086548067147403, 0.17448123641190827, 0.2508918254040948, 0.20955698485170327, 0.2115222284373096, 0.20862381373757366, 0.11283155008016077, 0.16589095063788428, 0.25721670351226555, 0.23139081745377343, 0.20772610263856495, 0.20664994981752705, 0.2535707879838427, 0.25064169330368635, 0.21864786751376664, 0.24941860941435556, 0.21903084062861056, 0.2765373166963858, 0.09331999948339331, 0.08139864323736024, 0.06341456846207005, 0.08455326670395658, 0.09875441575505517, 0.06998224054023872, 0.09044065100521181, 0.08439290785818887, 0.0531181642428763]}, "mutation_prompt": null}
{"id": "f6f825c1-b1d2-4499-b506-43b2abbba901", "solution": "import numpy as np\n\nclass OptimizedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory_size = 10  # Reduced size for faster updates\n        self.harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n        self.harmony_memory_values = np.full(self.harmony_memory_size, np.inf)\n        self.harmony_memory_rate = 0.85  # Adjusted for balanced exploration-exploitation\n        self.pitch_adjustment_rate = 0.35  # Slightly reduced for stability\n        self.bandwidth_reduction = 0.08  # Optimized bandwidth adjustment\n\n    def __call__(self, func):\n        evaluations = 0\n        initial_evals = min(self.harmony_memory_size, self.budget)\n        for i in range(initial_evals):\n            self.harmony_memory_values[i] = func(self.harmony_memory[i])\n            evaluations += 1\n\n        while evaluations < self.budget:\n            new_harmony = self._generate_harmony()\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            new_value = func(new_harmony)\n            evaluations += 1\n\n            if new_value < np.max(self.harmony_memory_values):\n                max_index = np.argmax(self.harmony_memory_values)\n                self.harmony_memory[max_index] = new_harmony\n                self.harmony_memory_values[max_index] = new_value\n\n            self._adaptive_memory_adjustment(evaluations)\n\n        return self.harmony_memory[np.argmin(self.harmony_memory_values)]\n\n    def _generate_harmony(self):\n        harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.harmony_memory_rate:\n                selected_harmony = np.random.randint(self.harmony_memory_size)\n                harmony[i] = self.harmony_memory[selected_harmony, i]\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    harmony[i] += (np.random.rand() - 0.5) * self.bandwidth_reduction\n            else:\n                harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return harmony\n\n    def _adaptive_memory_adjustment(self, evaluations):\n        progress_ratio = evaluations / self.budget\n        self.harmony_memory_rate = 0.8 + 0.15 * np.sin(progress_ratio * np.pi)  # Adaptive rate change\n        self.bandwidth_reduction = 0.1 * (1 - progress_ratio)  # Dynamic bandwidth reduction", "name": "OptimizedHarmonySearch", "description": "Optimized Harmony Search with adaptive memory and reduced dimensional search to enhance convergence speed and solution accuracy.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b0b6c457-269d-42a9-b460-7871a4657035", "metadata": {"aucs": [0.7765882938266643, 0.8243568710218775, 0.8254051892283129, 0.8453491914666238, 0.7969797973903472, 0.8066691149741904, 0.7694038085428194, 0.8057004252149417, 0.8074359098321042, 0.416117482931324, 0.39979565596447497, 0.4117686117310968, 0.43967257299511653, 0.309201016491197, 0.39693004247198227, 0.363309645263, 0.3987040955688068, 0.46254788041927597, 0.4929591324803436, 0.4274797346830146, 0.5237432093077367, 0.33025220060689886, 0.28151718403319015, 0.32055227417481513, 0.1762378267616148, 0.2467746772273809, 0.1822855015301268, 0.18841757599502484, 0.3110643327439262, 0.34249575855811754, 0.4693609030920708, 0.29315713845985214, 0.47811586297136355, 0.13214733198446993, 0.22123021537955867, 0.49549341280388726, 0.9302895297189708, 0.9028953744152621, 0.9167500970780503, 0.9057621447178014, 0.9006194430608284, 0.9332084418810526, 0.89652626832293, 0.8949245427945623, 0.8849838622200957, 0.4496857065665224, 0.4148989354449265, 0.4005082178925833, 0.5088276492448937, 0.4556779579787331, 0.5054035343535082, 0.4131295832594749, 0.4709980786533894, 0.5044368698197303, 0.208717723915833, 0.12748416645848737, 0.13981554615593395, 0.27870581867476185, 0.23517640773701698, 0.19442178331365922, 0.22174398496793624, 0.15118104659812925, 0.15904680331564958, 0.18294309776865514, 0.22628432926488862, 0.1878499226538627, 0.19735694554898042, 0.1865297475214842, 0.213974722263787, 0.20442626327730762, 0.28025631182761934, 0.24734224139470817, 0.1775954412244226, 0.11175136765787663, 0.1813205407926003, 0.1793427828487807, 0.15062929625750765, 0.22764037336437504, 0.2044711106723648, 0.18042916679348509, 0.25121360571027496, 9.999999999998899e-05, 9.999999999998899e-05, 0.004243899651041105, 0.01424030193240955, 9.999999999998899e-05, 9.999999999998899e-05, 0.025506414805956723, 9.999999999998899e-05, 9.999999999998899e-05, 0.06810023338537319, 0.03157372662137481, 0.06805889719731806, 0.0634902417765637, 0.027803266897662993, 0.009583574806745543, 0.15678582708459254, 0.07038501041287071, 0.11910115901058194, 0.1671439149330587, 0.06782909423696981, 0.11108198773078826, 0.07666082561224663, 0.07682108546585809, 0.10517283363132823, 0.08773228099343267, 0.14917483194303893, 0.13428525574038153, 0.08294570137962731, 0.11533685094911361, 0.15309175248560403, 0.09119246166888206, 0.044162803879114976, 0.022312248220477504, 0.08980622216966694, 0.18543801083494993, 0.1377555356806257, 0.4631307876036952, 0.4708990919795437, 0.48893104354439354, 0.5131882347682228, 0.5126887142985609, 0.5202854850270517, 0.5093673211847507, 0.49782059126092126, 0.516490219003638, 0.09406061726081394, 0.09454336716589007, 0.06392400651963404, 0.11308183399755323, 0.12639869793367886, 0.09848128835646508, 0.08652320075934894, 0.0855620326863833, 0.09707825493483646, 0.15489851382837005, 0.1543035080685755, 0.18549011760891643, 0.209682873967463, 0.21015216196834596, 0.1526069131286687, 0.21234289917022164, 0.1347655209550277, 0.15658083107630683, 0.17487280570636998, 0.1919112758955711, 0.1763315340483247, 0.1903785039347028, 0.20731355722158018, 0.29012440808872875, 0.23059304482764353, 0.24174176484193532, 0.17484068243162143, 0.09205759419712978, 0.15562172900780902, 0.10648366153287225, 0.153776235163694, 0.13379466123249095, 0.14019844462295206, 0.1266948203944951, 0.19813764037227666, 0.2096141207159149, 0.25260493289047825, 0.20692956114397643, 0.25499359802615906, 0.21084577152994965, 0.2116714433339294, 0.19173881015338468, 0.20117138005517488, 0.21214584275236148, 0.25957853556284305, 0.2537920689474782, 0.2569069639981758, 0.2102896929047421, 0.19807021774919542, 0.1899972470043002, 0.19985847506813148, 0.19349364749233577, 0.20295017181587083, 0.20182032798730487, 0.732410470762873, 0.8597354039564482, 0.1591781070748679, 0.9053200138579148, 0.9449758467322794, 0.19530688800108742, 0.17090210315549414, 0.1586008237591393, 0.16489379932627757, 0.5436497240178948, 0.5392092166732172, 0.39775297526574127, 0.16873028287854197, 0.2098511545591185, 0.213285720682872, 0.10443358988269846, 0.21116397037570445, 0.09421251894185967, 0.22142062516530991, 0.1890044193028252, 0.2028516914834393, 0.23151480628701537, 0.19974300630755948, 0.21767970443765206, 0.24781002633572502, 0.248338519110455, 0.23222975247301803, 0.0849378101833903, 0.07736208966054414, 0.10204819758100547, 0.08733788813773513, 0.11073054888327749, 0.09763238156855225, 0.10125490375348312, 0.08080991302619955, 0.09374613778867147]}, "mutation_prompt": null}
{"id": "748581ed-1351-46e5-bf2d-b718ecd2d848", "solution": "import numpy as np\n\nclass EnhancedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory_size = 8  # Smaller memory size for faster processing\n        self.harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n        self.harmony_memory_values = np.array([np.inf] * self.harmony_memory_size)\n        self.harmony_memory_rate = 0.9  # Increased for broader memory consideration\n        self.pitch_adjustment_rate = 0.3  # Fine-tuned for better stability\n        self.bandwidth_reduction = 0.1  # Adjusted bandwidth for efficient search\n\n    def __call__(self, func):\n        evaluations = 0\n        for i in range(min(self.harmony_memory_size, self.budget)):\n            self.harmony_memory_values[i] = func(self.harmony_memory[i])\n            evaluations += 1\n        while evaluations < self.budget:\n            new_harmony = self._generate_harmony()\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            new_value = func(new_harmony)\n            evaluations += 1\n            worst_index = np.argmax(self.harmony_memory_values)\n            if new_value < self.harmony_memory_values[worst_index]:\n                self.harmony_memory[worst_index] = new_harmony\n                self.harmony_memory_values[worst_index] = new_value\n            self._dynamic_adjustments(evaluations)\n        return self.harmony_memory[np.argmin(self.harmony_memory_values)]\n\n    def _generate_harmony(self):\n        harmony = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.harmony_memory_rate:\n                selected_harmony = self.harmony_memory[np.random.randint(self.harmony_memory_size), i]\n                harmony[i] = selected_harmony\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    harmony[i] += (np.random.rand() - 0.5) * self.bandwidth_reduction\n        return harmony\n\n    def _dynamic_adjustments(self, evaluations):\n        progress_ratio = evaluations / self.budget\n        self.harmony_memory_rate = 0.85 + 0.1 * np.cos(progress_ratio * np.pi)  # Dynamic rate with cosine modulation\n        self.bandwidth_reduction = 0.1 * (1 - progress_ratio**2)  # Quadratic reduction for finer tuning", "name": "EnhancedHarmonySearch", "description": "Enhanced Harmony Search with dynamic memory update and efficient convergence through adaptive parameter tuning.", "configspace": "", "generation": 76, "fitness": 0.2637015421240371, "feedback": "The algorithm EnhancedHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.23.", "error": "", "parent_id": "b0b6c457-269d-42a9-b460-7871a4657035", "metadata": {"aucs": [0.7888604311675658, 0.8104932346944309, 0.7600608098311448, 0.7977667006423579, 0.8483287255886728, 0.8111303458137107, 0.8090853031357228, 0.7405582488171856, 0.7895885595429206, 0.32232865790355825, 0.3171828279550146, 0.40913886123236953, 0.30318501925732133, 0.3204857998987336, 0.4245870099937712, 0.29436536931031065, 0.30191033079094054, 0.4599374462619459, 0.3210063327467322, 0.3272745870685383, 0.21519711412685927, 0.40115588683219827, 0.32737718585092856, 0.22745871555021324, 0.49273767406268776, 0.25315789202384475, 0.3118312533492572, 0.14832383949350791, 0.18573844572468257, 0.17157966089837862, 0.15336442144796425, 0.30001240084214353, 0.34175688605832655, 0.32951132661298044, 0.262074249987725, 0.23344552450406642, 0.9452100144193992, 0.8907992202365139, 0.8834215384987578, 0.9094683607883974, 0.9461757268512264, 0.8938529921386072, 0.9147268688231395, 0.9093982159855544, 0.9048611029411755, 0.4691480846373485, 0.4799469052011862, 0.510908425204144, 0.23300373061883972, 0.44572263101496423, 0.4826475749721061, 0.3714213325016036, 0.38290552165150193, 0.3267996042221205, 0.1387040697090982, 0.0882686353416331, 0.13312594177374104, 0.21388636078887724, 0.1675371531362243, 0.2150365655758668, 0.15100630258900982, 0.13951237924999982, 0.1579449647682597, 0.25512902717881625, 0.2862726896714416, 0.2105526951415131, 0.33007940475105324, 0.14991860046675265, 0.4672956225852687, 0.18295625925150782, 0.2364822621927063, 0.17989583346310645, 0.18124232229603987, 0.14044459080565452, 0.21710932263061866, 0.16924176395493018, 0.17525506704050475, 0.2198972530265485, 0.13692190320456266, 0.13164698681306397, 0.18147758905493072, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06250503775426042, 9.999999999998899e-05, 0.06548661286354995, 0.03803803293249641, 0.03142674919061794, 0.06032244145342125, 0.0553006297106009, 0.0063958539228798905, 0.043090083808574486, 0.06328283832546244, 0.06080767828710176, 0.08727128906463055, 0.13771814764755386, 0.06979536493843719, 0.07108174575634041, 0.09223045586382617, 0.14024958951398692, 0.1163669661702188, 0.08677903312272106, 0.2005354628439988, 0.08810308429889024, 0.1607728688342397, 0.06530454686954945, 0.13062121622097367, 0.2206060163031197, 0.08745269051904703, 0.08366201901668613, 0.1600441422702421, 0.11554058017221758, 0.1099114440754787, 0.4418415489163, 0.462383796532597, 0.48021547661791575, 0.5038333036128441, 0.4711875371640606, 0.5027219265000125, 0.45883586226924145, 0.4754339664389229, 0.4905226131856776, 0.089363054726593, 0.11297485120417372, 0.07084745119771685, 0.06613588403376491, 0.036624025163973006, 0.15065317198618344, 0.09047395910632439, 0.0635651563194275, 0.07405074848210846, 0.17254408383715059, 0.13426312508414817, 0.273987008600892, 0.1296274969947332, 0.2078337875544386, 0.17356184753242543, 0.13428181184876253, 0.14002717701355927, 0.14374774986174255, 0.16022302032170033, 0.15854573011789985, 0.17326748827040173, 0.2208701267187, 0.1935302148820024, 0.19831034826376803, 0.16512104462694666, 0.31073387882053105, 0.19483125498297515, 0.2393307096265066, 0.16201897742306215, 0.14089935576220647, 0.2401216033494885, 0.1546860072148586, 0.22243655777979066, 0.16303113596931196, 0.10829689412397858, 0.1970104405265397, 0.1755936887326065, 0.1865347144919749, 0.20797968919302512, 0.19412180183314443, 0.2275839913431158, 0.20317146806473185, 0.20078608576338608, 0.21749447352578766, 0.24381354564060043, 0.2210665929380049, 0.18231550269969443, 0.22014381545588846, 0.2285312950459304, 0.22430751593859566, 0.22490291904248605, 0.21239535773919205, 0.21925073412637985, 0.20484846215847952, 0.1601976609148381, 0.9485848351070266, 0.1506619597985558, 0.20095090453385822, 0.19954546715527466, 0.19543642264136218, 0.9075919679005886, 0.15905213148854092, 0.1627448459477615, 0.6675755204499296, 0.11212732527108893, 0.20602607744877266, 0.09412485076581978, 0.1680981835849671, 0.2068636154144181, 0.6398746824869923, 0.10495028872086554, 0.094157233884264, 0.2094672430959197, 0.22758919022681756, 0.1976724623923065, 0.2075599182554525, 0.19561909702324065, 0.22054065684872093, 0.22728274487379319, 0.2335712277870462, 0.21530164870250335, 0.05440626624738665, 0.08819521373385797, 0.061775848405342004, 0.0987015401231538, 0.09711733623067775, 0.051998109069900655, 0.12193160888883325, 0.058187859591772084, 0.0837471715428324]}, "mutation_prompt": null}
{"id": "02edc7d5-e454-41d9-a463-b3c2fb0794cc", "solution": "import numpy as np\n\nclass OptimizedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory_size = 10  # Reduced size for faster updates\n        self.harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n        self.harmony_memory_values = np.full(self.harmony_memory_size, np.inf)\n        self.harmony_memory_rate = 0.85  # Adjusted for balanced exploration-exploitation\n        self.pitch_adjustment_rate = 0.35  # Slightly reduced for stability\n        self.bandwidth_reduction = 0.08  # Optimized bandwidth adjustment\n\n    def __call__(self, func):\n        evaluations = 0\n        initial_evals = min(self.harmony_memory_size, self.budget)\n        for i in range(initial_evals):\n            self.harmony_memory_values[i] = func(self.harmony_memory[i])\n            evaluations += 1\n\n        while evaluations < self.budget:\n            new_harmony = self._generate_harmony()\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            new_value = func(new_harmony)\n            evaluations += 1\n\n            if new_value < np.max(self.harmony_memory_values):\n                max_index = np.argmax(self.harmony_memory_values)\n                self.harmony_memory[max_index] = new_harmony\n                self.harmony_memory_values[max_index] = new_value\n\n            self._adaptive_memory_adjustment(evaluations)\n\n        return self.harmony_memory[np.argmin(self.harmony_memory_values)]\n\n    def _generate_harmony(self):\n        harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.harmony_memory_rate:\n                selected_harmony = np.random.randint(self.harmony_memory_size)\n                harmony[i] = self.harmony_memory[selected_harmony, i]\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    harmony[i] += (np.random.rand() - 0.5) * self.bandwidth_reduction\n            else:\n                harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return harmony\n\n    def _adaptive_memory_adjustment(self, evaluations):\n        progress_ratio = evaluations / self.budget\n        self.harmony_memory_rate = 0.8 + 0.15 * np.sin(progress_ratio * np.pi)  # Adaptive rate change\n        self.bandwidth_reduction = 0.1 * (1 - progress_ratio)  # Dynamic bandwidth reduction", "name": "OptimizedHarmonySearch", "description": "Optimized Harmony Search with adaptive memory and reduced dimensional search to enhance convergence speed and solution accuracy.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b0b6c457-269d-42a9-b460-7871a4657035", "metadata": {"aucs": [0.7765882938266643, 0.8243568710218775, 0.8254051892283129, 0.8453491914666238, 0.7969797973903472, 0.8066691149741904, 0.7694038085428194, 0.8057004252149417, 0.8074359098321042, 0.416117482931324, 0.39979565596447497, 0.4117686117310968, 0.43967257299511653, 0.309201016491197, 0.39693004247198227, 0.363309645263, 0.3987040955688068, 0.46254788041927597, 0.4929591324803436, 0.4274797346830146, 0.5237432093077367, 0.33025220060689886, 0.28151718403319015, 0.32055227417481513, 0.1762378267616148, 0.2467746772273809, 0.1822855015301268, 0.18841757599502484, 0.3110643327439262, 0.34249575855811754, 0.4693609030920708, 0.29315713845985214, 0.47811586297136355, 0.13214733198446993, 0.22123021537955867, 0.49549341280388726, 0.9302895297189708, 0.9028953744152621, 0.9167500970780503, 0.9057621447178014, 0.9006194430608284, 0.9332084418810526, 0.89652626832293, 0.8949245427945623, 0.8849838622200957, 0.4496857065665224, 0.4148989354449265, 0.4005082178925833, 0.5088276492448937, 0.4556779579787331, 0.5054035343535082, 0.4131295832594749, 0.4709980786533894, 0.5044368698197303, 0.208717723915833, 0.12748416645848737, 0.13981554615593395, 0.27870581867476185, 0.23517640773701698, 0.19442178331365922, 0.22174398496793624, 0.15118104659812925, 0.15904680331564958, 0.18294309776865514, 0.22628432926488862, 0.1878499226538627, 0.19735694554898042, 0.1865297475214842, 0.213974722263787, 0.20442626327730762, 0.28025631182761934, 0.24734224139470817, 0.1775954412244226, 0.11175136765787663, 0.1813205407926003, 0.1793427828487807, 0.15062929625750765, 0.22764037336437504, 0.2044711106723648, 0.18042916679348509, 0.25121360571027496, 9.999999999998899e-05, 9.999999999998899e-05, 0.004243899651041105, 0.01424030193240955, 9.999999999998899e-05, 9.999999999998899e-05, 0.025506414805956723, 9.999999999998899e-05, 9.999999999998899e-05, 0.06810023338537319, 0.03157372662137481, 0.06805889719731806, 0.0634902417765637, 0.027803266897662993, 0.009583574806745543, 0.15678582708459254, 0.07038501041287071, 0.11910115901058194, 0.1671439149330587, 0.06782909423696981, 0.11108198773078826, 0.07666082561224663, 0.07682108546585809, 0.10517283363132823, 0.08773228099343267, 0.14917483194303893, 0.13428525574038153, 0.08294570137962731, 0.11533685094911361, 0.15309175248560403, 0.09119246166888206, 0.044162803879114976, 0.022312248220477504, 0.08980622216966694, 0.18543801083494993, 0.1377555356806257, 0.4631307876036952, 0.4708990919795437, 0.48893104354439354, 0.5131882347682228, 0.5126887142985609, 0.5202854850270517, 0.5093673211847507, 0.49782059126092126, 0.516490219003638, 0.09406061726081394, 0.09454336716589007, 0.06392400651963404, 0.11308183399755323, 0.12639869793367886, 0.09848128835646508, 0.08652320075934894, 0.0855620326863833, 0.09707825493483646, 0.15489851382837005, 0.1543035080685755, 0.18549011760891643, 0.209682873967463, 0.21015216196834596, 0.1526069131286687, 0.21234289917022164, 0.1347655209550277, 0.15658083107630683, 0.17487280570636998, 0.1919112758955711, 0.1763315340483247, 0.1903785039347028, 0.20731355722158018, 0.29012440808872875, 0.23059304482764353, 0.24174176484193532, 0.17484068243162143, 0.09205759419712978, 0.15562172900780902, 0.10648366153287225, 0.153776235163694, 0.13379466123249095, 0.14019844462295206, 0.1266948203944951, 0.19813764037227666, 0.2096141207159149, 0.25260493289047825, 0.20692956114397643, 0.25499359802615906, 0.21084577152994965, 0.2116714433339294, 0.19173881015338468, 0.20117138005517488, 0.21214584275236148, 0.25957853556284305, 0.2537920689474782, 0.2569069639981758, 0.2102896929047421, 0.19807021774919542, 0.1899972470043002, 0.19985847506813148, 0.19349364749233577, 0.20295017181587083, 0.20182032798730487, 0.732410470762873, 0.8597354039564482, 0.1591781070748679, 0.9053200138579148, 0.9449758467322794, 0.19530688800108742, 0.17090210315549414, 0.1586008237591393, 0.16489379932627757, 0.5436497240178948, 0.5392092166732172, 0.39775297526574127, 0.16873028287854197, 0.2098511545591185, 0.213285720682872, 0.10443358988269846, 0.21116397037570445, 0.09421251894185967, 0.22142062516530991, 0.1890044193028252, 0.2028516914834393, 0.23151480628701537, 0.19974300630755948, 0.21767970443765206, 0.24781002633572502, 0.248338519110455, 0.23222975247301803, 0.0849378101833903, 0.07736208966054414, 0.10204819758100547, 0.08733788813773513, 0.11073054888327749, 0.09763238156855225, 0.10125490375348312, 0.08080991302619955, 0.09374613778867147]}, "mutation_prompt": null}
{"id": "5fb634d2-a7a9-465e-b31a-3eaac04b6f3f", "solution": "import numpy as np\n\nclass EnhancedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory_size = 8  # Smaller memory size for quicker adaptation\n        self.harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n        self.harmony_memory_values = np.full(self.harmony_memory_size, np.inf)\n        self.harmony_memory_rate = 0.9  # Increased for more exploration\n        self.pitch_adjustment_rate = 0.3  # Balanced rate for stability\n        self.adaptive_bandwidth = 0.1  # Adaptive bandwidth for better exploration\n\n    def __call__(self, func):\n        evaluations = 0\n        for i in range(min(self.harmony_memory_size, self.budget)):\n            self.harmony_memory_values[i] = func(self.harmony_memory[i])\n            evaluations += 1\n\n        while evaluations < self.budget:\n            new_harmony = self._generate_harmony()\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            new_value = func(new_harmony)\n            evaluations += 1\n\n            worse_index = np.argmax(self.harmony_memory_values)\n            if new_value < self.harmony_memory_values[worse_index]:\n                self.harmony_memory[worse_index] = new_harmony\n                self.harmony_memory_values[worse_index] = new_value\n\n            self._adaptive_step_size(evaluations)\n\n        return self.harmony_memory[np.argmin(self.harmony_memory_values)]\n\n    def _generate_harmony(self):\n        harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.harmony_memory_rate:\n                selected_indices = np.argsort(self.harmony_memory_values)\n                selected_harmony = np.random.choice(selected_indices[:self.harmony_memory_size // 2])\n                harmony[i] = self.harmony_memory[selected_harmony, i]\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    harmony[i] += (np.random.rand() - 0.5) * self.adaptive_bandwidth\n            else:\n                harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return harmony\n\n    def _adaptive_step_size(self, evaluations):\n        progress_ratio = evaluations / self.budget\n        self.harmony_memory_rate = 0.85 + 0.1 * np.cos(progress_ratio * np.pi)  # Smooth rate adaptation\n        self.adaptive_bandwidth = 0.1 * (1 - progress_ratio)  # Dynamic step-size adjustment", "name": "EnhancedHarmonySearch", "description": "Enhanced Harmony Search utilizing rank-based selection and step-size adaptation for improved exploration and convergence efficiency.", "configspace": "", "generation": 78, "fitness": 0.2693243503251505, "feedback": "The algorithm EnhancedHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.23.", "error": "", "parent_id": "b0b6c457-269d-42a9-b460-7871a4657035", "metadata": {"aucs": [0.8183094701684976, 0.7889318956813258, 0.810473638736309, 0.8328284057413413, 0.8151034856207213, 0.8243377211419478, 0.8120386596710458, 0.7911960666404669, 0.8278721081341218, 0.38503984044344075, 0.4319763454205081, 0.33531137764991004, 0.3979424455549482, 0.48106804869110176, 0.35453312227396205, 0.42914471635010176, 0.40662531698595983, 0.39025209032830865, 0.4436861408520152, 0.1891064434877432, 0.30221274529011755, 0.4370932706373848, 0.1771424104709871, 0.4358136352287676, 0.31766024960422856, 0.3049197985600005, 0.3423504431346531, 0.3233714976163231, 0.1884871865928448, 0.15949057427247204, 0.27298278741372217, 0.17359666247945027, 0.17831781543076763, 0.17130592975416026, 0.3536631036761876, 0.3022212169045724, 0.9263146509858574, 0.9220701059709919, 0.9172619409206358, 0.9535550914586408, 0.9180363361117072, 0.9511231009665798, 0.953426106622115, 0.9239699879312258, 0.9332193953683184, 0.4158262310443339, 0.4512847581816406, 0.48181309805372163, 0.427093580595886, 0.4799000015933733, 0.5471884689721234, 0.47716162463103606, 0.43796158161294074, 0.5167356155770877, 0.1507902509652993, 0.14927098580351872, 0.1335946977625877, 0.28122519974966764, 0.14938201808458285, 0.2421404089285667, 0.12516007765949366, 0.1603561644932101, 0.13057242404424996, 0.4405169659105592, 0.1958697153259581, 0.2204653158570592, 0.1896818422190757, 0.16073287420770288, 0.19608423743473646, 0.37753938503017603, 0.19395176310369966, 0.1933422932288057, 0.21290158166386053, 0.13001439930935954, 0.2073157368667301, 0.1805323260838252, 0.20264968070004685, 0.2121543322507614, 0.23011393417282877, 0.028886543624865535, 0.23388797298420372, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007810380478328494, 9.999999999998899e-05, 9.999999999998899e-05, 0.029355475628476402, 0.02719331796642277, 0.09244130461799704, 0.06811491359506705, 0.006190451578899414, 0.010252122281827036, 0.07006094254156214, 0.06895925202061393, 0.08118463352770944, 0.20533851086681065, 0.048722669786895656, 0.22157994603795517, 0.13262340757685886, 0.20117171990025984, 0.1520711190679105, 0.08273498926346479, 0.3014603196589365, 0.08477458099185553, 0.06682638853915379, 0.07790336976103718, 0.1326039978254081, 0.11885046831227408, 0.048968521612158145, 0.12149926022404056, 0.1919479837191067, 0.14017339805950924, 0.08571360218759705, 0.4752331206624988, 0.4755502102950061, 0.47260835570282456, 0.5403946182919422, 0.5588616171945455, 0.5219404323808075, 0.5109531380314274, 0.4989242654245787, 0.5469896802736856, 0.07926955272405334, 0.10718600756050178, 0.06632596675479141, 0.06736175116314447, 0.05118744061459524, 0.11474633077704022, 0.05160093080565131, 0.08277525183992018, 0.07421489200322395, 0.1599099707018895, 0.1419390993987547, 0.13754687673158716, 0.1750768470621511, 0.1619129593566646, 0.16539826998869944, 0.12991158737907116, 0.16294413036125843, 0.14327013344058082, 0.23125632733393342, 0.28487794995289895, 0.17423368567922137, 0.2166193799340782, 0.15420301705289152, 0.21483565754639666, 0.19244741587254044, 0.18942453180994412, 0.19165992131665743, 0.20136115089444018, 0.16902195273780785, 0.11417161423465827, 0.1113743203111297, 0.1264570685752857, 0.12210088697490495, 0.1990328772734301, 0.16413785014208349, 0.16335770569454255, 0.21428341552619212, 0.22375333994858815, 0.19964234211961862, 0.21999625650936627, 0.1770818441292371, 0.22867759301497692, 0.19592422966531942, 0.21872541640572585, 0.1952930741496942, 0.20541921737905333, 0.22441660989795276, 0.20853028387126515, 0.21799542938179217, 0.25775119070001407, 0.21266726284581028, 0.22492782958139856, 0.22735802629819768, 0.19658191124908686, 0.1602815763241371, 0.19010888675498705, 0.16851205471419584, 0.943437073187766, 0.21825336657699668, 0.15403105469432998, 0.1288694410373471, 0.1536121058685107, 0.15033513343250637, 0.5992754998641433, 0.17550598227858172, 0.3695318281906026, 0.20491578247722297, 0.4463363147546271, 0.20959848406666592, 0.5150274447914029, 0.10544193375712052, 0.09481994973285968, 0.227872083013118, 0.23121071612879662, 0.21667471992948883, 0.21308676551525085, 0.20208891730840506, 0.215579171730909, 0.19386705819690453, 0.22442015014927796, 0.19669020703286422, 0.07386225331451679, 0.08140682237037267, 0.06113737705046385, 0.10016794419924502, 0.08217540173275428, 0.048113468478171884, 0.10312982009059701, 0.07184549047866096, 0.05239684974547276]}, "mutation_prompt": null}
{"id": "17046216-69ad-4b8b-84e3-1455b965631e", "solution": "import numpy as np\n\nclass OptimizedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory_size = 10  # Reduced size for faster updates\n        self.harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n        self.harmony_memory_values = np.full(self.harmony_memory_size, np.inf)\n        self.harmony_memory_rate = 0.85  # Adjusted for balanced exploration-exploitation\n        self.pitch_adjustment_rate = 0.35  # Slightly reduced for stability\n        self.bandwidth_reduction = 0.08  # Optimized bandwidth adjustment\n\n    def __call__(self, func):\n        evaluations = 0\n        initial_evals = min(self.harmony_memory_size, self.budget)\n        for i in range(initial_evals):\n            self.harmony_memory_values[i] = func(self.harmony_memory[i])\n            evaluations += 1\n\n        while evaluations < self.budget:\n            new_harmony = self._generate_harmony()\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            new_value = func(new_harmony)\n            evaluations += 1\n\n            if new_value < np.max(self.harmony_memory_values):\n                max_index = np.argmax(self.harmony_memory_values)\n                self.harmony_memory[max_index] = new_harmony\n                self.harmony_memory_values[max_index] = new_value\n\n            self._adaptive_memory_adjustment(evaluations)\n\n        return self.harmony_memory[np.argmin(self.harmony_memory_values)]\n\n    def _generate_harmony(self):\n        harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.harmony_memory_rate:\n                selected_harmony = np.random.randint(self.harmony_memory_size)\n                harmony[i] = self.harmony_memory[selected_harmony, i]\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    harmony[i] += (np.random.rand() - 0.5) * self.bandwidth_reduction\n            else:\n                harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return harmony\n\n    def _adaptive_memory_adjustment(self, evaluations):\n        progress_ratio = evaluations / self.budget\n        self.harmony_memory_rate = 0.8 + 0.15 * np.sin(progress_ratio * np.pi)  # Adaptive rate change\n        self.bandwidth_reduction = 0.1 * (1 - progress_ratio)  # Dynamic bandwidth reduction", "name": "OptimizedHarmonySearch", "description": "Optimized Harmony Search with adaptive memory and reduced dimensional search to enhance convergence speed and solution accuracy.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b0b6c457-269d-42a9-b460-7871a4657035", "metadata": {"aucs": [0.7765882938266643, 0.8243568710218775, 0.8254051892283129, 0.8453491914666238, 0.7969797973903472, 0.8066691149741904, 0.7694038085428194, 0.8057004252149417, 0.8074359098321042, 0.416117482931324, 0.39979565596447497, 0.4117686117310968, 0.43967257299511653, 0.309201016491197, 0.39693004247198227, 0.363309645263, 0.3987040955688068, 0.46254788041927597, 0.4929591324803436, 0.4274797346830146, 0.5237432093077367, 0.33025220060689886, 0.28151718403319015, 0.32055227417481513, 0.1762378267616148, 0.2467746772273809, 0.1822855015301268, 0.18841757599502484, 0.3110643327439262, 0.34249575855811754, 0.4693609030920708, 0.29315713845985214, 0.47811586297136355, 0.13214733198446993, 0.22123021537955867, 0.49549341280388726, 0.9302895297189708, 0.9028953744152621, 0.9167500970780503, 0.9057621447178014, 0.9006194430608284, 0.9332084418810526, 0.89652626832293, 0.8949245427945623, 0.8849838622200957, 0.4496857065665224, 0.4148989354449265, 0.4005082178925833, 0.5088276492448937, 0.4556779579787331, 0.5054035343535082, 0.4131295832594749, 0.4709980786533894, 0.5044368698197303, 0.208717723915833, 0.12748416645848737, 0.13981554615593395, 0.27870581867476185, 0.23517640773701698, 0.19442178331365922, 0.22174398496793624, 0.15118104659812925, 0.15904680331564958, 0.18294309776865514, 0.22628432926488862, 0.1878499226538627, 0.19735694554898042, 0.1865297475214842, 0.213974722263787, 0.20442626327730762, 0.28025631182761934, 0.24734224139470817, 0.1775954412244226, 0.11175136765787663, 0.1813205407926003, 0.1793427828487807, 0.15062929625750765, 0.22764037336437504, 0.2044711106723648, 0.18042916679348509, 0.25121360571027496, 9.999999999998899e-05, 9.999999999998899e-05, 0.004243899651041105, 0.01424030193240955, 9.999999999998899e-05, 9.999999999998899e-05, 0.025506414805956723, 9.999999999998899e-05, 9.999999999998899e-05, 0.06810023338537319, 0.03157372662137481, 0.06805889719731806, 0.0634902417765637, 0.027803266897662993, 0.009583574806745543, 0.15678582708459254, 0.07038501041287071, 0.11910115901058194, 0.1671439149330587, 0.06782909423696981, 0.11108198773078826, 0.07666082561224663, 0.07682108546585809, 0.10517283363132823, 0.08773228099343267, 0.14917483194303893, 0.13428525574038153, 0.08294570137962731, 0.11533685094911361, 0.15309175248560403, 0.09119246166888206, 0.044162803879114976, 0.022312248220477504, 0.08980622216966694, 0.18543801083494993, 0.1377555356806257, 0.4631307876036952, 0.4708990919795437, 0.48893104354439354, 0.5131882347682228, 0.5126887142985609, 0.5202854850270517, 0.5093673211847507, 0.49782059126092126, 0.516490219003638, 0.09406061726081394, 0.09454336716589007, 0.06392400651963404, 0.11308183399755323, 0.12639869793367886, 0.09848128835646508, 0.08652320075934894, 0.0855620326863833, 0.09707825493483646, 0.15489851382837005, 0.1543035080685755, 0.18549011760891643, 0.209682873967463, 0.21015216196834596, 0.1526069131286687, 0.21234289917022164, 0.1347655209550277, 0.15658083107630683, 0.17487280570636998, 0.1919112758955711, 0.1763315340483247, 0.1903785039347028, 0.20731355722158018, 0.29012440808872875, 0.23059304482764353, 0.24174176484193532, 0.17484068243162143, 0.09205759419712978, 0.15562172900780902, 0.10648366153287225, 0.153776235163694, 0.13379466123249095, 0.14019844462295206, 0.1266948203944951, 0.19813764037227666, 0.2096141207159149, 0.25260493289047825, 0.20692956114397643, 0.25499359802615906, 0.21084577152994965, 0.2116714433339294, 0.19173881015338468, 0.20117138005517488, 0.21214584275236148, 0.25957853556284305, 0.2537920689474782, 0.2569069639981758, 0.2102896929047421, 0.19807021774919542, 0.1899972470043002, 0.19985847506813148, 0.19349364749233577, 0.20295017181587083, 0.20182032798730487, 0.732410470762873, 0.8597354039564482, 0.1591781070748679, 0.9053200138579148, 0.9449758467322794, 0.19530688800108742, 0.17090210315549414, 0.1586008237591393, 0.16489379932627757, 0.5436497240178948, 0.5392092166732172, 0.39775297526574127, 0.16873028287854197, 0.2098511545591185, 0.213285720682872, 0.10443358988269846, 0.21116397037570445, 0.09421251894185967, 0.22142062516530991, 0.1890044193028252, 0.2028516914834393, 0.23151480628701537, 0.19974300630755948, 0.21767970443765206, 0.24781002633572502, 0.248338519110455, 0.23222975247301803, 0.0849378101833903, 0.07736208966054414, 0.10204819758100547, 0.08733788813773513, 0.11073054888327749, 0.09763238156855225, 0.10125490375348312, 0.08080991302619955, 0.09374613778867147]}, "mutation_prompt": null}
{"id": "4500d535-5f36-4e6d-a84d-69b99e2f5b34", "solution": "import numpy as np\n\nclass EnhancedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory_size = min(10, max(3, dim))  # Adaptive size based on dimension\n        self.harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n        self.harmony_memory_values = np.full(self.harmony_memory_size, np.inf)\n        self.harmony_memory_rate = 0.8\n        self.pitch_adjustment_rate = 0.3  # Further reduced for consistent improvements\n        self.bandwidth_reduction = 0.05  # More stable bandwidth control\n        self.dynamic_pop = True  # Flag for dynamic population size\n\n    def __call__(self, func):\n        evaluations = 0\n        initial_evals = min(self.harmony_memory_size, self.budget)\n        for i in range(initial_evals):\n            self.harmony_memory_values[i] = func(self.harmony_memory[i])\n            evaluations += 1\n\n        while evaluations < self.budget:\n            new_harmony = self._generate_harmony()\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            new_value = func(new_harmony)\n            evaluations += 1\n\n            if new_value < np.max(self.harmony_memory_values):\n                max_index = np.argmax(self.harmony_memory_values)\n                self.harmony_memory[max_index] = new_harmony\n                self.harmony_memory_values[max_index] = new_value\n\n            if self.dynamic_pop and evaluations % (self.budget // 10) == 0:\n                self._dynamic_population_adjustment()\n\n        return self.harmony_memory[np.argmin(self.harmony_memory_values)]\n\n    def _generate_harmony(self):\n        harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.harmony_memory_rate:\n                selected_harmony = np.random.randint(self.harmony_memory_size)\n                harmony[i] = self.harmony_memory[selected_harmony, i]\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    harmony[i] += (np.random.rand() - 0.5) * self.bandwidth_reduction\n            else:\n                harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return harmony\n\n    def _dynamic_population_adjustment(self):\n        sorted_indices = np.argsort(self.harmony_memory_values)\n        top_half = sorted_indices[:len(sorted_indices) // 2]\n        self.harmony_memory = self.harmony_memory[top_half]\n        self.harmony_memory_values = self.harmony_memory_values[top_half]\n        self.harmony_memory_size = len(self.harmony_memory)\n        new_harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n        self.harmony_memory = np.vstack((self.harmony_memory, new_harmony_memory))\n        self.harmony_memory_values = np.concatenate((self.harmony_memory_values, np.full(self.harmony_memory_size, np.inf)))", "name": "EnhancedHarmonySearch", "description": "Enhanced Harmony Search with stochastic ranking and dynamic population size for improved convergence and efficiency.", "configspace": "", "generation": 80, "fitness": 0.26972975292724005, "feedback": "The algorithm EnhancedHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.21.", "error": "", "parent_id": "b0b6c457-269d-42a9-b460-7871a4657035", "metadata": {"aucs": [0.761513889812869, 0.7747773030673872, 0.7747311120005383, 0.8166848188892566, 0.8088565410916292, 0.8074029407175735, 0.7547977694058114, 0.7817279849339936, 0.7722182604412678, 0.45929803237796474, 0.4338273340731438, 0.35172765642288073, 0.35122559515542784, 0.3241759211689137, 0.3694912704902861, 0.4840829702117564, 0.31862208487117416, 0.3013762428351109, 0.35162857973343165, 0.3623190207315231, 0.19152310722865096, 0.2617796318988177, 0.5077629614969357, 0.4244493286133677, 0.4486637463643145, 0.5152180611949642, 0.36897266976462817, 0.45870724684576847, 0.3274992455319897, 0.17371817630591013, 0.37575240001891497, 0.15583259398453742, 0.1708731040998971, 0.23576033868139434, 0.3714162632470862, 0.3981715552048145, 0.8645098214337688, 0.8617953241896646, 0.8791728813355014, 0.8470629172861928, 0.8873550983942154, 0.8548482704405513, 0.7572884010860128, 0.8671768769679693, 0.8718730559973038, 0.4542426281082298, 0.3588546976284892, 0.33113070033267344, 0.3610765883306689, 0.3409236636201367, 0.41633580632170286, 0.2813328400769224, 0.39111578365915844, 0.38424187063605486, 0.16646163022135807, 0.21935073551568973, 0.1735558476622533, 0.22289677733951596, 0.17423410198844436, 0.16635847809119553, 0.14314233273145294, 0.17393603803610147, 0.15529483476270578, 0.2100768938665224, 0.17195749130599614, 0.22255227844701675, 0.1562878697603115, 0.184596661156618, 0.17026331046644994, 0.1607768535696148, 0.36050230687005147, 0.2993848245729843, 0.22795677596500508, 0.25557660425196804, 0.14200222761513637, 0.17418539638128439, 0.12679916931032653, 0.20110153517005047, 0.1310443470747994, 0.1769690500351806, 0.1349411192770965, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00023197559148335767, 9.999999999998899e-05, 9.999999999998899e-05, 0.0315909495432013, 0.05003884608617104, 0.12674784692283136, 0.05871428431774961, 0.020935943389498113, 0.032902678281053865, 0.08305517285198916, 0.04812657064943904, 0.07203530915136303, 0.2327943857326339, 0.03531078840772284, 0.19267416808586857, 0.1067598938818406, 0.07897760372529761, 0.17171212090726606, 0.16691994724182901, 0.11389142985121725, 0.15896737531469862, 0.03865950890008574, 0.16890135397062023, 0.2610771568791692, 0.06416365825146586, 0.2347820672424582, 0.05347689011260082, 0.2726542336551131, 0.10767407920426142, 0.17462053019257817, 0.44486199319147257, 0.4548271159726611, 0.49122489442525097, 0.46151764682220753, 0.49140631511047883, 0.49912245237852126, 0.49276791029638367, 0.48486577519182883, 0.4706847382559337, 0.11299507537833908, 0.10186398614669978, 0.09021453523939615, 0.09723049494412228, 0.1079664602201954, 0.11229821975772447, 0.08432572527799476, 0.07307144549737654, 0.09756425752640929, 0.15157089370588617, 0.20458731176181877, 0.17012450232554277, 0.19849332886751891, 0.18638881274253494, 0.2651572014970812, 0.15714253800694822, 0.12765356807889316, 0.1727992459709229, 0.1815019020405293, 0.2123159172993223, 0.18136465997894025, 0.19545988121646718, 0.18815607115700328, 0.17576273189709335, 0.14849803130201122, 0.2117866529999255, 0.1995516887693629, 0.09855471528685178, 0.1605228209718771, 0.10172452002999888, 0.16600127913837603, 0.17502318555783314, 0.1312540670323611, 0.14166755789188212, 0.1547868745966815, 0.14317253324994728, 0.22346051493682817, 0.23199869389978744, 0.19845927367118565, 0.22918017823396697, 0.2289193232343908, 0.1936883048928677, 0.22919102289760085, 0.29258745803617936, 0.18440661831264682, 0.22435797238870903, 0.20528850576001212, 0.19105083575489978, 0.2581300702009415, 0.23098489990007842, 0.2564533103366624, 0.21513311752171593, 0.18747719337328872, 0.21184135275892335, 0.18832456596269453, 0.20265705356758668, 0.16805052563656042, 0.17880741990807147, 0.7667708825290311, 0.822449917379756, 0.1679892445269967, 0.11509751093922826, 0.16509938979781946, 0.5716093951930858, 0.3060753728945693, 0.3339987628389415, 0.34663588236280185, 0.607166145325801, 0.20431748365811397, 0.10538931043507782, 0.2035081444481479, 0.401991270145738, 0.18565055951858533, 0.21023256204150653, 0.19483787896546945, 0.21626509921264514, 0.20885745400167066, 0.25142814463807994, 0.22187779868845503, 0.22976055783884253, 0.2426320083145732, 0.10221008273088827, 0.07979945060013338, 0.11706875022021612, 0.08588589179503292, 0.10004578368234995, 0.1366423066200989, 0.09723208849536424, 0.08606815645301957, 0.05842835525382817]}, "mutation_prompt": null}
{"id": "14694514-1e17-4f76-899f-a6754b676e0b", "solution": "import numpy as np\n\nclass OptimizedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory_size = 10  # Reduced size for faster updates\n        self.harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n        self.harmony_memory_values = np.full(self.harmony_memory_size, np.inf)\n        self.harmony_memory_rate = 0.85  # Adjusted for balanced exploration-exploitation\n        self.pitch_adjustment_rate = 0.35  # Slightly reduced for stability\n        self.bandwidth_reduction = 0.08  # Optimized bandwidth adjustment\n\n    def __call__(self, func):\n        evaluations = 0\n        initial_evals = min(self.harmony_memory_size, self.budget)\n        for i in range(initial_evals):\n            self.harmony_memory_values[i] = func(self.harmony_memory[i])\n            evaluations += 1\n\n        while evaluations < self.budget:\n            new_harmony = self._generate_harmony()\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            new_value = func(new_harmony)\n            evaluations += 1\n\n            if new_value < np.max(self.harmony_memory_values):\n                max_index = np.argmax(self.harmony_memory_values)\n                self.harmony_memory[max_index] = new_harmony\n                self.harmony_memory_values[max_index] = new_value\n\n            self._adaptive_memory_adjustment(evaluations)\n\n        return self.harmony_memory[np.argmin(self.harmony_memory_values)]\n\n    def _generate_harmony(self):\n        harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.harmony_memory_rate:\n                selected_harmony = np.random.randint(self.harmony_memory_size)\n                harmony[i] = self.harmony_memory[selected_harmony, i]\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    harmony[i] += (np.random.rand() - 0.5) * self.bandwidth_reduction\n            else:\n                harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return harmony\n\n    def _adaptive_memory_adjustment(self, evaluations):\n        progress_ratio = evaluations / self.budget\n        self.harmony_memory_rate = 0.8 + 0.15 * np.sin(progress_ratio * np.pi)  # Adaptive rate change\n        self.bandwidth_reduction = 0.1 * (1 - progress_ratio)  # Dynamic bandwidth reduction", "name": "OptimizedHarmonySearch", "description": "Optimized Harmony Search with adaptive memory and reduced dimensional search to enhance convergence speed and solution accuracy.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b0b6c457-269d-42a9-b460-7871a4657035", "metadata": {"aucs": [0.7765882938266643, 0.8243568710218775, 0.8254051892283129, 0.8453491914666238, 0.7969797973903472, 0.8066691149741904, 0.7694038085428194, 0.8057004252149417, 0.8074359098321042, 0.416117482931324, 0.39979565596447497, 0.4117686117310968, 0.43967257299511653, 0.309201016491197, 0.39693004247198227, 0.363309645263, 0.3987040955688068, 0.46254788041927597, 0.4929591324803436, 0.4274797346830146, 0.5237432093077367, 0.33025220060689886, 0.28151718403319015, 0.32055227417481513, 0.1762378267616148, 0.2467746772273809, 0.1822855015301268, 0.18841757599502484, 0.3110643327439262, 0.34249575855811754, 0.4693609030920708, 0.29315713845985214, 0.47811586297136355, 0.13214733198446993, 0.22123021537955867, 0.49549341280388726, 0.9302895297189708, 0.9028953744152621, 0.9167500970780503, 0.9057621447178014, 0.9006194430608284, 0.9332084418810526, 0.89652626832293, 0.8949245427945623, 0.8849838622200957, 0.4496857065665224, 0.4148989354449265, 0.4005082178925833, 0.5088276492448937, 0.4556779579787331, 0.5054035343535082, 0.4131295832594749, 0.4709980786533894, 0.5044368698197303, 0.208717723915833, 0.12748416645848737, 0.13981554615593395, 0.27870581867476185, 0.23517640773701698, 0.19442178331365922, 0.22174398496793624, 0.15118104659812925, 0.15904680331564958, 0.18294309776865514, 0.22628432926488862, 0.1878499226538627, 0.19735694554898042, 0.1865297475214842, 0.213974722263787, 0.20442626327730762, 0.28025631182761934, 0.24734224139470817, 0.1775954412244226, 0.11175136765787663, 0.1813205407926003, 0.1793427828487807, 0.15062929625750765, 0.22764037336437504, 0.2044711106723648, 0.18042916679348509, 0.25121360571027496, 9.999999999998899e-05, 9.999999999998899e-05, 0.004243899651041105, 0.01424030193240955, 9.999999999998899e-05, 9.999999999998899e-05, 0.025506414805956723, 9.999999999998899e-05, 9.999999999998899e-05, 0.06810023338537319, 0.03157372662137481, 0.06805889719731806, 0.0634902417765637, 0.027803266897662993, 0.009583574806745543, 0.15678582708459254, 0.07038501041287071, 0.11910115901058194, 0.1671439149330587, 0.06782909423696981, 0.11108198773078826, 0.07666082561224663, 0.07682108546585809, 0.10517283363132823, 0.08773228099343267, 0.14917483194303893, 0.13428525574038153, 0.08294570137962731, 0.11533685094911361, 0.15309175248560403, 0.09119246166888206, 0.044162803879114976, 0.022312248220477504, 0.08980622216966694, 0.18543801083494993, 0.1377555356806257, 0.4631307876036952, 0.4708990919795437, 0.48893104354439354, 0.5131882347682228, 0.5126887142985609, 0.5202854850270517, 0.5093673211847507, 0.49782059126092126, 0.516490219003638, 0.09406061726081394, 0.09454336716589007, 0.06392400651963404, 0.11308183399755323, 0.12639869793367886, 0.09848128835646508, 0.08652320075934894, 0.0855620326863833, 0.09707825493483646, 0.15489851382837005, 0.1543035080685755, 0.18549011760891643, 0.209682873967463, 0.21015216196834596, 0.1526069131286687, 0.21234289917022164, 0.1347655209550277, 0.15658083107630683, 0.17487280570636998, 0.1919112758955711, 0.1763315340483247, 0.1903785039347028, 0.20731355722158018, 0.29012440808872875, 0.23059304482764353, 0.24174176484193532, 0.17484068243162143, 0.09205759419712978, 0.15562172900780902, 0.10648366153287225, 0.153776235163694, 0.13379466123249095, 0.14019844462295206, 0.1266948203944951, 0.19813764037227666, 0.2096141207159149, 0.25260493289047825, 0.20692956114397643, 0.25499359802615906, 0.21084577152994965, 0.2116714433339294, 0.19173881015338468, 0.20117138005517488, 0.21214584275236148, 0.25957853556284305, 0.2537920689474782, 0.2569069639981758, 0.2102896929047421, 0.19807021774919542, 0.1899972470043002, 0.19985847506813148, 0.19349364749233577, 0.20295017181587083, 0.20182032798730487, 0.732410470762873, 0.8597354039564482, 0.1591781070748679, 0.9053200138579148, 0.9449758467322794, 0.19530688800108742, 0.17090210315549414, 0.1586008237591393, 0.16489379932627757, 0.5436497240178948, 0.5392092166732172, 0.39775297526574127, 0.16873028287854197, 0.2098511545591185, 0.213285720682872, 0.10443358988269846, 0.21116397037570445, 0.09421251894185967, 0.22142062516530991, 0.1890044193028252, 0.2028516914834393, 0.23151480628701537, 0.19974300630755948, 0.21767970443765206, 0.24781002633572502, 0.248338519110455, 0.23222975247301803, 0.0849378101833903, 0.07736208966054414, 0.10204819758100547, 0.08733788813773513, 0.11073054888327749, 0.09763238156855225, 0.10125490375348312, 0.08080991302619955, 0.09374613778867147]}, "mutation_prompt": null}
{"id": "fdd8f9a4-2fea-4045-814b-7966737fc7fb", "solution": "import numpy as np\n\nclass OptimizedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory_size = 10  # Reduced size for faster updates\n        self.harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n        self.harmony_memory_values = np.full(self.harmony_memory_size, np.inf)\n        self.harmony_memory_rate = 0.85  # Adjusted for balanced exploration-exploitation\n        self.pitch_adjustment_rate = 0.35  # Slightly reduced for stability\n        self.bandwidth_reduction = 0.08  # Optimized bandwidth adjustment\n\n    def __call__(self, func):\n        evaluations = 0\n        initial_evals = min(self.harmony_memory_size, self.budget)\n        for i in range(initial_evals):\n            self.harmony_memory_values[i] = func(self.harmony_memory[i])\n            evaluations += 1\n\n        while evaluations < self.budget:\n            new_harmony = self._generate_harmony()\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            new_value = func(new_harmony)\n            evaluations += 1\n\n            if new_value < np.max(self.harmony_memory_values):\n                max_index = np.argmax(self.harmony_memory_values)\n                self.harmony_memory[max_index] = new_harmony\n                self.harmony_memory_values[max_index] = new_value\n\n            self._adaptive_memory_adjustment(evaluations)\n\n        return self.harmony_memory[np.argmin(self.harmony_memory_values)]\n\n    def _generate_harmony(self):\n        harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.harmony_memory_rate:\n                selected_harmony = np.random.randint(self.harmony_memory_size)\n                harmony[i] = self.harmony_memory[selected_harmony, i]\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    harmony[i] += (np.random.rand() - 0.5) * self.bandwidth_reduction\n            else:\n                harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return harmony\n\n    def _adaptive_memory_adjustment(self, evaluations):\n        progress_ratio = evaluations / self.budget\n        self.harmony_memory_rate = 0.8 + 0.15 * np.sin(progress_ratio * np.pi)  # Adaptive rate change\n        self.bandwidth_reduction = 0.1 * (1 - progress_ratio)  # Dynamic bandwidth reduction", "name": "OptimizedHarmonySearch", "description": "Optimized Harmony Search with adaptive memory and reduced dimensional search to enhance convergence speed and solution accuracy.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b0b6c457-269d-42a9-b460-7871a4657035", "metadata": {"aucs": [0.7765882938266643, 0.8243568710218775, 0.8254051892283129, 0.8453491914666238, 0.7969797973903472, 0.8066691149741904, 0.7694038085428194, 0.8057004252149417, 0.8074359098321042, 0.416117482931324, 0.39979565596447497, 0.4117686117310968, 0.43967257299511653, 0.309201016491197, 0.39693004247198227, 0.363309645263, 0.3987040955688068, 0.46254788041927597, 0.4929591324803436, 0.4274797346830146, 0.5237432093077367, 0.33025220060689886, 0.28151718403319015, 0.32055227417481513, 0.1762378267616148, 0.2467746772273809, 0.1822855015301268, 0.18841757599502484, 0.3110643327439262, 0.34249575855811754, 0.4693609030920708, 0.29315713845985214, 0.47811586297136355, 0.13214733198446993, 0.22123021537955867, 0.49549341280388726, 0.9302895297189708, 0.9028953744152621, 0.9167500970780503, 0.9057621447178014, 0.9006194430608284, 0.9332084418810526, 0.89652626832293, 0.8949245427945623, 0.8849838622200957, 0.4496857065665224, 0.4148989354449265, 0.4005082178925833, 0.5088276492448937, 0.4556779579787331, 0.5054035343535082, 0.4131295832594749, 0.4709980786533894, 0.5044368698197303, 0.208717723915833, 0.12748416645848737, 0.13981554615593395, 0.27870581867476185, 0.23517640773701698, 0.19442178331365922, 0.22174398496793624, 0.15118104659812925, 0.15904680331564958, 0.18294309776865514, 0.22628432926488862, 0.1878499226538627, 0.19735694554898042, 0.1865297475214842, 0.213974722263787, 0.20442626327730762, 0.28025631182761934, 0.24734224139470817, 0.1775954412244226, 0.11175136765787663, 0.1813205407926003, 0.1793427828487807, 0.15062929625750765, 0.22764037336437504, 0.2044711106723648, 0.18042916679348509, 0.25121360571027496, 9.999999999998899e-05, 9.999999999998899e-05, 0.004243899651041105, 0.01424030193240955, 9.999999999998899e-05, 9.999999999998899e-05, 0.025506414805956723, 9.999999999998899e-05, 9.999999999998899e-05, 0.06810023338537319, 0.03157372662137481, 0.06805889719731806, 0.0634902417765637, 0.027803266897662993, 0.009583574806745543, 0.15678582708459254, 0.07038501041287071, 0.11910115901058194, 0.1671439149330587, 0.06782909423696981, 0.11108198773078826, 0.07666082561224663, 0.07682108546585809, 0.10517283363132823, 0.08773228099343267, 0.14917483194303893, 0.13428525574038153, 0.08294570137962731, 0.11533685094911361, 0.15309175248560403, 0.09119246166888206, 0.044162803879114976, 0.022312248220477504, 0.08980622216966694, 0.18543801083494993, 0.1377555356806257, 0.4631307876036952, 0.4708990919795437, 0.48893104354439354, 0.5131882347682228, 0.5126887142985609, 0.5202854850270517, 0.5093673211847507, 0.49782059126092126, 0.516490219003638, 0.09406061726081394, 0.09454336716589007, 0.06392400651963404, 0.11308183399755323, 0.12639869793367886, 0.09848128835646508, 0.08652320075934894, 0.0855620326863833, 0.09707825493483646, 0.15489851382837005, 0.1543035080685755, 0.18549011760891643, 0.209682873967463, 0.21015216196834596, 0.1526069131286687, 0.21234289917022164, 0.1347655209550277, 0.15658083107630683, 0.17487280570636998, 0.1919112758955711, 0.1763315340483247, 0.1903785039347028, 0.20731355722158018, 0.29012440808872875, 0.23059304482764353, 0.24174176484193532, 0.17484068243162143, 0.09205759419712978, 0.15562172900780902, 0.10648366153287225, 0.153776235163694, 0.13379466123249095, 0.14019844462295206, 0.1266948203944951, 0.19813764037227666, 0.2096141207159149, 0.25260493289047825, 0.20692956114397643, 0.25499359802615906, 0.21084577152994965, 0.2116714433339294, 0.19173881015338468, 0.20117138005517488, 0.21214584275236148, 0.25957853556284305, 0.2537920689474782, 0.2569069639981758, 0.2102896929047421, 0.19807021774919542, 0.1899972470043002, 0.19985847506813148, 0.19349364749233577, 0.20295017181587083, 0.20182032798730487, 0.732410470762873, 0.8597354039564482, 0.1591781070748679, 0.9053200138579148, 0.9449758467322794, 0.19530688800108742, 0.17090210315549414, 0.1586008237591393, 0.16489379932627757, 0.5436497240178948, 0.5392092166732172, 0.39775297526574127, 0.16873028287854197, 0.2098511545591185, 0.213285720682872, 0.10443358988269846, 0.21116397037570445, 0.09421251894185967, 0.22142062516530991, 0.1890044193028252, 0.2028516914834393, 0.23151480628701537, 0.19974300630755948, 0.21767970443765206, 0.24781002633572502, 0.248338519110455, 0.23222975247301803, 0.0849378101833903, 0.07736208966054414, 0.10204819758100547, 0.08733788813773513, 0.11073054888327749, 0.09763238156855225, 0.10125490375348312, 0.08080991302619955, 0.09374613778867147]}, "mutation_prompt": null}
{"id": "71334801-4df6-4a4c-b6a5-309d8a84191d", "solution": "import numpy as np\n\nclass OptimizedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory_size = 10  # Reduced size for faster updates\n        self.harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n        self.harmony_memory_values = np.full(self.harmony_memory_size, np.inf)\n        self.harmony_memory_rate = 0.85  # Adjusted for balanced exploration-exploitation\n        self.pitch_adjustment_rate = 0.35  # Slightly reduced for stability\n        self.bandwidth_reduction = 0.08  # Optimized bandwidth adjustment\n\n    def __call__(self, func):\n        evaluations = 0\n        initial_evals = min(self.harmony_memory_size, self.budget)\n        for i in range(initial_evals):\n            self.harmony_memory_values[i] = func(self.harmony_memory[i])\n            evaluations += 1\n\n        while evaluations < self.budget:\n            new_harmony = self._generate_harmony()\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            new_value = func(new_harmony)\n            evaluations += 1\n\n            if new_value < np.max(self.harmony_memory_values):\n                max_index = np.argmax(self.harmony_memory_values)\n                self.harmony_memory[max_index] = new_harmony\n                self.harmony_memory_values[max_index] = new_value\n\n            self._adaptive_memory_adjustment(evaluations)\n\n        return self.harmony_memory[np.argmin(self.harmony_memory_values)]\n\n    def _generate_harmony(self):\n        harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.harmony_memory_rate:\n                selected_harmony = np.random.randint(self.harmony_memory_size)\n                harmony[i] = self.harmony_memory[selected_harmony, i]\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    harmony[i] += (np.random.rand() - 0.5) * self.bandwidth_reduction\n            else:\n                harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return harmony\n\n    def _adaptive_memory_adjustment(self, evaluations):\n        progress_ratio = evaluations / self.budget\n        self.harmony_memory_rate = 0.8 + 0.15 * np.sin(progress_ratio * np.pi)  # Adaptive rate change\n        self.bandwidth_reduction = 0.1 * (1 - progress_ratio)  # Dynamic bandwidth reduction", "name": "OptimizedHarmonySearch", "description": "Optimized Harmony Search with adaptive memory and reduced dimensional search to enhance convergence speed and solution accuracy.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b0b6c457-269d-42a9-b460-7871a4657035", "metadata": {"aucs": [0.7765882938266643, 0.8243568710218775, 0.8254051892283129, 0.8453491914666238, 0.7969797973903472, 0.8066691149741904, 0.7694038085428194, 0.8057004252149417, 0.8074359098321042, 0.416117482931324, 0.39979565596447497, 0.4117686117310968, 0.43967257299511653, 0.309201016491197, 0.39693004247198227, 0.363309645263, 0.3987040955688068, 0.46254788041927597, 0.4929591324803436, 0.4274797346830146, 0.5237432093077367, 0.33025220060689886, 0.28151718403319015, 0.32055227417481513, 0.1762378267616148, 0.2467746772273809, 0.1822855015301268, 0.18841757599502484, 0.3110643327439262, 0.34249575855811754, 0.4693609030920708, 0.29315713845985214, 0.47811586297136355, 0.13214733198446993, 0.22123021537955867, 0.49549341280388726, 0.9302895297189708, 0.9028953744152621, 0.9167500970780503, 0.9057621447178014, 0.9006194430608284, 0.9332084418810526, 0.89652626832293, 0.8949245427945623, 0.8849838622200957, 0.4496857065665224, 0.4148989354449265, 0.4005082178925833, 0.5088276492448937, 0.4556779579787331, 0.5054035343535082, 0.4131295832594749, 0.4709980786533894, 0.5044368698197303, 0.208717723915833, 0.12748416645848737, 0.13981554615593395, 0.27870581867476185, 0.23517640773701698, 0.19442178331365922, 0.22174398496793624, 0.15118104659812925, 0.15904680331564958, 0.18294309776865514, 0.22628432926488862, 0.1878499226538627, 0.19735694554898042, 0.1865297475214842, 0.213974722263787, 0.20442626327730762, 0.28025631182761934, 0.24734224139470817, 0.1775954412244226, 0.11175136765787663, 0.1813205407926003, 0.1793427828487807, 0.15062929625750765, 0.22764037336437504, 0.2044711106723648, 0.18042916679348509, 0.25121360571027496, 9.999999999998899e-05, 9.999999999998899e-05, 0.004243899651041105, 0.01424030193240955, 9.999999999998899e-05, 9.999999999998899e-05, 0.025506414805956723, 9.999999999998899e-05, 9.999999999998899e-05, 0.06810023338537319, 0.03157372662137481, 0.06805889719731806, 0.0634902417765637, 0.027803266897662993, 0.009583574806745543, 0.15678582708459254, 0.07038501041287071, 0.11910115901058194, 0.1671439149330587, 0.06782909423696981, 0.11108198773078826, 0.07666082561224663, 0.07682108546585809, 0.10517283363132823, 0.08773228099343267, 0.14917483194303893, 0.13428525574038153, 0.08294570137962731, 0.11533685094911361, 0.15309175248560403, 0.09119246166888206, 0.044162803879114976, 0.022312248220477504, 0.08980622216966694, 0.18543801083494993, 0.1377555356806257, 0.4631307876036952, 0.4708990919795437, 0.48893104354439354, 0.5131882347682228, 0.5126887142985609, 0.5202854850270517, 0.5093673211847507, 0.49782059126092126, 0.516490219003638, 0.09406061726081394, 0.09454336716589007, 0.06392400651963404, 0.11308183399755323, 0.12639869793367886, 0.09848128835646508, 0.08652320075934894, 0.0855620326863833, 0.09707825493483646, 0.15489851382837005, 0.1543035080685755, 0.18549011760891643, 0.209682873967463, 0.21015216196834596, 0.1526069131286687, 0.21234289917022164, 0.1347655209550277, 0.15658083107630683, 0.17487280570636998, 0.1919112758955711, 0.1763315340483247, 0.1903785039347028, 0.20731355722158018, 0.29012440808872875, 0.23059304482764353, 0.24174176484193532, 0.17484068243162143, 0.09205759419712978, 0.15562172900780902, 0.10648366153287225, 0.153776235163694, 0.13379466123249095, 0.14019844462295206, 0.1266948203944951, 0.19813764037227666, 0.2096141207159149, 0.25260493289047825, 0.20692956114397643, 0.25499359802615906, 0.21084577152994965, 0.2116714433339294, 0.19173881015338468, 0.20117138005517488, 0.21214584275236148, 0.25957853556284305, 0.2537920689474782, 0.2569069639981758, 0.2102896929047421, 0.19807021774919542, 0.1899972470043002, 0.19985847506813148, 0.19349364749233577, 0.20295017181587083, 0.20182032798730487, 0.732410470762873, 0.8597354039564482, 0.1591781070748679, 0.9053200138579148, 0.9449758467322794, 0.19530688800108742, 0.17090210315549414, 0.1586008237591393, 0.16489379932627757, 0.5436497240178948, 0.5392092166732172, 0.39775297526574127, 0.16873028287854197, 0.2098511545591185, 0.213285720682872, 0.10443358988269846, 0.21116397037570445, 0.09421251894185967, 0.22142062516530991, 0.1890044193028252, 0.2028516914834393, 0.23151480628701537, 0.19974300630755948, 0.21767970443765206, 0.24781002633572502, 0.248338519110455, 0.23222975247301803, 0.0849378101833903, 0.07736208966054414, 0.10204819758100547, 0.08733788813773513, 0.11073054888327749, 0.09763238156855225, 0.10125490375348312, 0.08080991302619955, 0.09374613778867147]}, "mutation_prompt": null}
{"id": "8ef3b4f1-9136-4eb6-8839-e7ab457a453b", "solution": "import numpy as np\n\nclass OptimizedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory_size = 10  # Reduced size for faster updates\n        self.harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n        self.harmony_memory_values = np.full(self.harmony_memory_size, np.inf)\n        self.harmony_memory_rate = 0.85  # Adjusted for balanced exploration-exploitation\n        self.pitch_adjustment_rate = 0.35  # Slightly reduced for stability\n        self.bandwidth_reduction = 0.08  # Optimized bandwidth adjustment\n\n    def __call__(self, func):\n        evaluations = 0\n        initial_evals = min(self.harmony_memory_size, self.budget)\n        for i in range(initial_evals):\n            self.harmony_memory_values[i] = func(self.harmony_memory[i])\n            evaluations += 1\n\n        while evaluations < self.budget:\n            new_harmony = self._generate_harmony()\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            new_value = func(new_harmony)\n            evaluations += 1\n\n            if new_value < np.max(self.harmony_memory_values):\n                max_index = np.argmax(self.harmony_memory_values)\n                self.harmony_memory[max_index] = new_harmony\n                self.harmony_memory_values[max_index] = new_value\n\n            self._adaptive_memory_adjustment(evaluations)\n\n        return self.harmony_memory[np.argmin(self.harmony_memory_values)]\n\n    def _generate_harmony(self):\n        harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.harmony_memory_rate:\n                selected_harmony = np.random.randint(self.harmony_memory_size)\n                harmony[i] = self.harmony_memory[selected_harmony, i]\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    harmony[i] += (np.random.rand() - 0.5) * self.bandwidth_reduction\n            else:\n                harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return harmony\n\n    def _adaptive_memory_adjustment(self, evaluations):\n        progress_ratio = evaluations / self.budget\n        self.harmony_memory_rate = 0.8 + 0.15 * np.sin(progress_ratio * np.pi)  # Adaptive rate change\n        self.bandwidth_reduction = 0.1 * (1 - progress_ratio)  # Dynamic bandwidth reduction", "name": "OptimizedHarmonySearch", "description": "Optimized Harmony Search with adaptive memory and reduced dimensional search to enhance convergence speed and solution accuracy.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b0b6c457-269d-42a9-b460-7871a4657035", "metadata": {"aucs": [0.7765882938266643, 0.8243568710218775, 0.8254051892283129, 0.8453491914666238, 0.7969797973903472, 0.8066691149741904, 0.7694038085428194, 0.8057004252149417, 0.8074359098321042, 0.416117482931324, 0.39979565596447497, 0.4117686117310968, 0.43967257299511653, 0.309201016491197, 0.39693004247198227, 0.363309645263, 0.3987040955688068, 0.46254788041927597, 0.4929591324803436, 0.4274797346830146, 0.5237432093077367, 0.33025220060689886, 0.28151718403319015, 0.32055227417481513, 0.1762378267616148, 0.2467746772273809, 0.1822855015301268, 0.18841757599502484, 0.3110643327439262, 0.34249575855811754, 0.4693609030920708, 0.29315713845985214, 0.47811586297136355, 0.13214733198446993, 0.22123021537955867, 0.49549341280388726, 0.9302895297189708, 0.9028953744152621, 0.9167500970780503, 0.9057621447178014, 0.9006194430608284, 0.9332084418810526, 0.89652626832293, 0.8949245427945623, 0.8849838622200957, 0.4496857065665224, 0.4148989354449265, 0.4005082178925833, 0.5088276492448937, 0.4556779579787331, 0.5054035343535082, 0.4131295832594749, 0.4709980786533894, 0.5044368698197303, 0.208717723915833, 0.12748416645848737, 0.13981554615593395, 0.27870581867476185, 0.23517640773701698, 0.19442178331365922, 0.22174398496793624, 0.15118104659812925, 0.15904680331564958, 0.18294309776865514, 0.22628432926488862, 0.1878499226538627, 0.19735694554898042, 0.1865297475214842, 0.213974722263787, 0.20442626327730762, 0.28025631182761934, 0.24734224139470817, 0.1775954412244226, 0.11175136765787663, 0.1813205407926003, 0.1793427828487807, 0.15062929625750765, 0.22764037336437504, 0.2044711106723648, 0.18042916679348509, 0.25121360571027496, 9.999999999998899e-05, 9.999999999998899e-05, 0.004243899651041105, 0.01424030193240955, 9.999999999998899e-05, 9.999999999998899e-05, 0.025506414805956723, 9.999999999998899e-05, 9.999999999998899e-05, 0.06810023338537319, 0.03157372662137481, 0.06805889719731806, 0.0634902417765637, 0.027803266897662993, 0.009583574806745543, 0.15678582708459254, 0.07038501041287071, 0.11910115901058194, 0.1671439149330587, 0.06782909423696981, 0.11108198773078826, 0.07666082561224663, 0.07682108546585809, 0.10517283363132823, 0.08773228099343267, 0.14917483194303893, 0.13428525574038153, 0.08294570137962731, 0.11533685094911361, 0.15309175248560403, 0.09119246166888206, 0.044162803879114976, 0.022312248220477504, 0.08980622216966694, 0.18543801083494993, 0.1377555356806257, 0.4631307876036952, 0.4708990919795437, 0.48893104354439354, 0.5131882347682228, 0.5126887142985609, 0.5202854850270517, 0.5093673211847507, 0.49782059126092126, 0.516490219003638, 0.09406061726081394, 0.09454336716589007, 0.06392400651963404, 0.11308183399755323, 0.12639869793367886, 0.09848128835646508, 0.08652320075934894, 0.0855620326863833, 0.09707825493483646, 0.15489851382837005, 0.1543035080685755, 0.18549011760891643, 0.209682873967463, 0.21015216196834596, 0.1526069131286687, 0.21234289917022164, 0.1347655209550277, 0.15658083107630683, 0.17487280570636998, 0.1919112758955711, 0.1763315340483247, 0.1903785039347028, 0.20731355722158018, 0.29012440808872875, 0.23059304482764353, 0.24174176484193532, 0.17484068243162143, 0.09205759419712978, 0.15562172900780902, 0.10648366153287225, 0.153776235163694, 0.13379466123249095, 0.14019844462295206, 0.1266948203944951, 0.19813764037227666, 0.2096141207159149, 0.25260493289047825, 0.20692956114397643, 0.25499359802615906, 0.21084577152994965, 0.2116714433339294, 0.19173881015338468, 0.20117138005517488, 0.21214584275236148, 0.25957853556284305, 0.2537920689474782, 0.2569069639981758, 0.2102896929047421, 0.19807021774919542, 0.1899972470043002, 0.19985847506813148, 0.19349364749233577, 0.20295017181587083, 0.20182032798730487, 0.732410470762873, 0.8597354039564482, 0.1591781070748679, 0.9053200138579148, 0.9449758467322794, 0.19530688800108742, 0.17090210315549414, 0.1586008237591393, 0.16489379932627757, 0.5436497240178948, 0.5392092166732172, 0.39775297526574127, 0.16873028287854197, 0.2098511545591185, 0.213285720682872, 0.10443358988269846, 0.21116397037570445, 0.09421251894185967, 0.22142062516530991, 0.1890044193028252, 0.2028516914834393, 0.23151480628701537, 0.19974300630755948, 0.21767970443765206, 0.24781002633572502, 0.248338519110455, 0.23222975247301803, 0.0849378101833903, 0.07736208966054414, 0.10204819758100547, 0.08733788813773513, 0.11073054888327749, 0.09763238156855225, 0.10125490375348312, 0.08080991302619955, 0.09374613778867147]}, "mutation_prompt": null}
{"id": "8c83229e-4725-4752-9d9e-e3f70824a55e", "solution": "import numpy as np\n\nclass EnhancedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory_size = 8  # Reduced size for even faster updates\n        self.harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n        self.harmony_memory_values = np.inf * np.ones(self.harmony_memory_size)\n        self.harmony_memory_rate = 0.9  # Increased for more exploitation\n        self.pitch_adjustment_rate = 0.3  # Further reduced for stability\n        self.bandwidth_reduction = 0.07  # Fine-tuned bandwidth adjustment\n\n    def __call__(self, func):\n        evaluations = 0\n        for i in range(min(self.harmony_memory_size, self.budget)):\n            self.harmony_memory_values[i] = func(self.harmony_memory[i])\n            evaluations += 1\n\n        while evaluations < self.budget:\n            new_harmony = self._generate_harmony()\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            new_value = func(new_harmony)\n            evaluations += 1\n\n            if new_value < np.max(self.harmony_memory_values):\n                self._replace_worst_harmony(new_harmony, new_value)\n\n            self._simplified_adaptive_adjustment(evaluations)\n\n        return self.harmony_memory[np.argmin(self.harmony_memory_values)]\n\n    def _generate_harmony(self):\n        harmony = np.copy(self.harmony_memory[np.random.randint(self.harmony_memory_size)])\n        for i in range(self.dim):\n            if np.random.rand() < self.harmony_memory_rate:\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    harmony[i] += (np.random.rand() - 0.5) * self.bandwidth_reduction\n            else:\n                harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return harmony\n\n    def _replace_worst_harmony(self, new_harmony, new_value):\n        max_index = np.argmax(self.harmony_memory_values)\n        self.harmony_memory[max_index] = new_harmony\n        self.harmony_memory_values[max_index] = new_value\n\n    def _simplified_adaptive_adjustment(self, evaluations):\n        progress_ratio = evaluations / self.budget\n        self.harmony_memory_rate = 0.85 + 0.05 * np.cos(progress_ratio * np.pi)  # Simplified rate change\n        self.bandwidth_reduction = 0.08 * (1 - progress_ratio)  # Simplified bandwidth reduction", "name": "EnhancedHarmonySearch", "description": "Enhanced Harmony Search with simplified adaptive mechanisms and improved computational efficiency for faster convergence.", "configspace": "", "generation": 85, "fitness": 0.2519282146381534, "feedback": "The algorithm EnhancedHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.22.", "error": "", "parent_id": "b0b6c457-269d-42a9-b460-7871a4657035", "metadata": {"aucs": [0.751914213160167, 0.791690536738727, 0.7979432017609729, 0.8233351215222646, 0.7945197901769704, 0.7782962666293729, 0.7307827341148023, 0.7786604539317413, 0.7573229730442628, 0.34416094343247394, 0.46042141356991073, 0.3757035890146595, 0.35100826025060994, 0.346223297991177, 0.39012430693914035, 0.39204543747908127, 0.4165761055034872, 0.3645629388533157, 0.19412620969864958, 0.17617210907642733, 0.33180209464998867, 0.44608413380355905, 0.4081636978183548, 0.3251088301330082, 0.3965887144745981, 0.21851990931794707, 0.427828652988135, 0.17899516611103794, 0.17655471872431605, 0.19280047535975153, 0.1854297817996624, 0.183354093183131, 0.30619153437526725, 0.33148669270199893, 0.19154925138454804, 0.2722456287333115, 0.9074480514383724, 0.8674228840384242, 0.9095762786815772, 0.8661084496197319, 0.8694131092471544, 0.881310703678425, 0.8829836124112785, 0.8985723720551095, 0.8755744015919599, 0.38241003047740973, 0.39886495475071815, 0.1785193784320971, 0.4531129289868091, 0.23867926492854974, 0.448065386595195, 0.31692326789524217, 0.3686806236432396, 0.4141129203437066, 0.17594448963172415, 0.169088244460452, 0.1517302915047417, 0.19647749447865248, 0.15378617676884843, 0.20461046013749373, 0.1722562017917011, 0.15594445550199887, 0.16813013806856947, 0.2552384622500291, 0.20517028334320608, 0.22364682085097942, 0.19932816959187072, 0.21101936606056815, 0.21195920623511466, 0.19630640655419007, 0.14447827673314728, 0.16937366436506818, 0.19000796866499836, 0.1892456370371347, 0.17375173879390693, 0.1336998365172134, 0.20179469872585998, 0.18981523305553605, 0.202491695681712, 0.1434550792593947, 0.20598841973889126, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05075411108081862, 0.02913672237791487, 0.06252472943828269, 0.06354034578855516, 0.007884201254424794, 0.015981227615044946, 0.18981928618344768, 0.09973500539072289, 0.10389181695756144, 0.24178690880253262, 0.036387063066826486, 0.2476325241011882, 0.07975827824266835, 0.08343692911685208, 0.08903468784336876, 0.12967250290169252, 0.12435727128466567, 0.08591852232609287, 0.05373885284447022, 0.06739716444087918, 0.0759885765573487, 0.11781340861514122, 0.03280157976556641, 0.032946636223568415, 0.1774838195522298, 0.11584072042235605, 0.1365548241003366, 0.4928079160909483, 0.4662027154417029, 0.48287988716957575, 0.4681897246518736, 0.4656583322811997, 0.5223049278366794, 0.5157593333912109, 0.4968770652707516, 0.5262460447211675, 0.09828391942712911, 0.09567722209320362, 0.07847176384189447, 0.03509311578283947, 0.08947172948502613, 0.11354574302521692, 0.03418146421191581, 0.061574902910578766, 0.07420892482650654, 0.13864707025955414, 0.2025810784272548, 0.23190622802562344, 0.17197156745107645, 0.4391518712698139, 0.18118537341463958, 0.2352561574071036, 0.11929924127987956, 0.17961195691386278, 0.22729519053499503, 0.21183548221069282, 0.16185731716069418, 0.22087210160877924, 0.18341467783790066, 0.2554194923492882, 0.19767640991614266, 0.1606984302290999, 0.19208732668418926, 0.09951733536529228, 0.15305682846497493, 0.11063540613592249, 0.1185110856986461, 0.19846312138133448, 0.16732008241685503, 0.14136411214123767, 0.13477610704390175, 0.08033179499829202, 0.21227089988067938, 0.1871485487040372, 0.1744766504306745, 0.23700174521770256, 0.1737133271009279, 0.20852082792576287, 0.19443171828838934, 0.19935370528142582, 0.2472477297900143, 0.24694187645863808, 0.20118210555989102, 0.19616744944075248, 0.1869202260011834, 0.2422310919399311, 0.20749754042040036, 0.20182706396304206, 0.20894029729407237, 0.2076995060143667, 0.1595727314337726, 0.15799771120722983, 0.19535688482348557, 0.8749705349063025, 0.20104790612427625, 0.12470042630219391, 0.13631025826559928, 0.11440545008254299, 0.1672206528094241, 0.2414669770831549, 0.11070170657334877, 0.21139388714708107, 0.20877970979360483, 0.16920579693810656, 0.20794053370968646, 0.11287324004864296, 0.165001893994828, 0.19061396359463256, 0.24084295149109525, 0.24901133451855273, 0.2383435687429286, 0.23378748094180168, 0.18581758239388613, 0.255909750494113, 0.23795809100659826, 0.1977370686851495, 0.24158043225542192, 0.06784227179073421, 0.10815991758446108, 0.06317338218900204, 0.07820952073209686, 0.09091113295387476, 0.07177274706790626, 0.07637304713212056, 0.0897308225313751, 0.08049457633434887]}, "mutation_prompt": null}
{"id": "71afeb7d-751d-46b1-85e6-024bbaeaf349", "solution": "import numpy as np\n\nclass OptimizedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory_size = 10  # Reduced size for faster updates\n        self.harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n        self.harmony_memory_values = np.full(self.harmony_memory_size, np.inf)\n        self.harmony_memory_rate = 0.85  # Adjusted for balanced exploration-exploitation\n        self.pitch_adjustment_rate = 0.35  # Slightly reduced for stability\n        self.bandwidth_reduction = 0.08  # Optimized bandwidth adjustment\n\n    def __call__(self, func):\n        evaluations = 0\n        initial_evals = min(self.harmony_memory_size, self.budget)\n        for i in range(initial_evals):\n            self.harmony_memory_values[i] = func(self.harmony_memory[i])\n            evaluations += 1\n\n        while evaluations < self.budget:\n            new_harmony = self._generate_harmony()\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            new_value = func(new_harmony)\n            evaluations += 1\n\n            if new_value < np.max(self.harmony_memory_values):\n                max_index = np.argmax(self.harmony_memory_values)\n                self.harmony_memory[max_index] = new_harmony\n                self.harmony_memory_values[max_index] = new_value\n\n            self._adaptive_memory_adjustment(evaluations)\n\n        return self.harmony_memory[np.argmin(self.harmony_memory_values)]\n\n    def _generate_harmony(self):\n        harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.harmony_memory_rate:\n                selected_harmony = np.random.randint(self.harmony_memory_size)\n                harmony[i] = self.harmony_memory[selected_harmony, i]\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    harmony[i] += (np.random.rand() - 0.5) * self.bandwidth_reduction\n            else:\n                harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return harmony\n\n    def _adaptive_memory_adjustment(self, evaluations):\n        progress_ratio = evaluations / self.budget\n        self.harmony_memory_rate = 0.8 + 0.15 * np.sin(progress_ratio * np.pi)  # Adaptive rate change\n        self.bandwidth_reduction = 0.1 * (1 - progress_ratio)  # Dynamic bandwidth reduction", "name": "OptimizedHarmonySearch", "description": "Optimized Harmony Search with adaptive memory and reduced dimensional search to enhance convergence speed and solution accuracy.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b0b6c457-269d-42a9-b460-7871a4657035", "metadata": {"aucs": [0.7765882938266643, 0.8243568710218775, 0.8254051892283129, 0.8453491914666238, 0.7969797973903472, 0.8066691149741904, 0.7694038085428194, 0.8057004252149417, 0.8074359098321042, 0.416117482931324, 0.39979565596447497, 0.4117686117310968, 0.43967257299511653, 0.309201016491197, 0.39693004247198227, 0.363309645263, 0.3987040955688068, 0.46254788041927597, 0.4929591324803436, 0.4274797346830146, 0.5237432093077367, 0.33025220060689886, 0.28151718403319015, 0.32055227417481513, 0.1762378267616148, 0.2467746772273809, 0.1822855015301268, 0.18841757599502484, 0.3110643327439262, 0.34249575855811754, 0.4693609030920708, 0.29315713845985214, 0.47811586297136355, 0.13214733198446993, 0.22123021537955867, 0.49549341280388726, 0.9302895297189708, 0.9028953744152621, 0.9167500970780503, 0.9057621447178014, 0.9006194430608284, 0.9332084418810526, 0.89652626832293, 0.8949245427945623, 0.8849838622200957, 0.4496857065665224, 0.4148989354449265, 0.4005082178925833, 0.5088276492448937, 0.4556779579787331, 0.5054035343535082, 0.4131295832594749, 0.4709980786533894, 0.5044368698197303, 0.208717723915833, 0.12748416645848737, 0.13981554615593395, 0.27870581867476185, 0.23517640773701698, 0.19442178331365922, 0.22174398496793624, 0.15118104659812925, 0.15904680331564958, 0.18294309776865514, 0.22628432926488862, 0.1878499226538627, 0.19735694554898042, 0.1865297475214842, 0.213974722263787, 0.20442626327730762, 0.28025631182761934, 0.24734224139470817, 0.1775954412244226, 0.11175136765787663, 0.1813205407926003, 0.1793427828487807, 0.15062929625750765, 0.22764037336437504, 0.2044711106723648, 0.18042916679348509, 0.25121360571027496, 9.999999999998899e-05, 9.999999999998899e-05, 0.004243899651041105, 0.01424030193240955, 9.999999999998899e-05, 9.999999999998899e-05, 0.025506414805956723, 9.999999999998899e-05, 9.999999999998899e-05, 0.06810023338537319, 0.03157372662137481, 0.06805889719731806, 0.0634902417765637, 0.027803266897662993, 0.009583574806745543, 0.15678582708459254, 0.07038501041287071, 0.11910115901058194, 0.1671439149330587, 0.06782909423696981, 0.11108198773078826, 0.07666082561224663, 0.07682108546585809, 0.10517283363132823, 0.08773228099343267, 0.14917483194303893, 0.13428525574038153, 0.08294570137962731, 0.11533685094911361, 0.15309175248560403, 0.09119246166888206, 0.044162803879114976, 0.022312248220477504, 0.08980622216966694, 0.18543801083494993, 0.1377555356806257, 0.4631307876036952, 0.4708990919795437, 0.48893104354439354, 0.5131882347682228, 0.5126887142985609, 0.5202854850270517, 0.5093673211847507, 0.49782059126092126, 0.516490219003638, 0.09406061726081394, 0.09454336716589007, 0.06392400651963404, 0.11308183399755323, 0.12639869793367886, 0.09848128835646508, 0.08652320075934894, 0.0855620326863833, 0.09707825493483646, 0.15489851382837005, 0.1543035080685755, 0.18549011760891643, 0.209682873967463, 0.21015216196834596, 0.1526069131286687, 0.21234289917022164, 0.1347655209550277, 0.15658083107630683, 0.17487280570636998, 0.1919112758955711, 0.1763315340483247, 0.1903785039347028, 0.20731355722158018, 0.29012440808872875, 0.23059304482764353, 0.24174176484193532, 0.17484068243162143, 0.09205759419712978, 0.15562172900780902, 0.10648366153287225, 0.153776235163694, 0.13379466123249095, 0.14019844462295206, 0.1266948203944951, 0.19813764037227666, 0.2096141207159149, 0.25260493289047825, 0.20692956114397643, 0.25499359802615906, 0.21084577152994965, 0.2116714433339294, 0.19173881015338468, 0.20117138005517488, 0.21214584275236148, 0.25957853556284305, 0.2537920689474782, 0.2569069639981758, 0.2102896929047421, 0.19807021774919542, 0.1899972470043002, 0.19985847506813148, 0.19349364749233577, 0.20295017181587083, 0.20182032798730487, 0.732410470762873, 0.8597354039564482, 0.1591781070748679, 0.9053200138579148, 0.9449758467322794, 0.19530688800108742, 0.17090210315549414, 0.1586008237591393, 0.16489379932627757, 0.5436497240178948, 0.5392092166732172, 0.39775297526574127, 0.16873028287854197, 0.2098511545591185, 0.213285720682872, 0.10443358988269846, 0.21116397037570445, 0.09421251894185967, 0.22142062516530991, 0.1890044193028252, 0.2028516914834393, 0.23151480628701537, 0.19974300630755948, 0.21767970443765206, 0.24781002633572502, 0.248338519110455, 0.23222975247301803, 0.0849378101833903, 0.07736208966054414, 0.10204819758100547, 0.08733788813773513, 0.11073054888327749, 0.09763238156855225, 0.10125490375348312, 0.08080991302619955, 0.09374613778867147]}, "mutation_prompt": null}
{"id": "9e663201-8aae-41a8-97c0-1c1a528a6ba1", "solution": "import numpy as np\n\nclass OptimizedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory_size = 10  # Reduced size for faster updates\n        self.harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n        self.harmony_memory_values = np.full(self.harmony_memory_size, np.inf)\n        self.harmony_memory_rate = 0.85  # Adjusted for balanced exploration-exploitation\n        self.pitch_adjustment_rate = 0.35  # Slightly reduced for stability\n        self.bandwidth_reduction = 0.08  # Optimized bandwidth adjustment\n\n    def __call__(self, func):\n        evaluations = 0\n        initial_evals = min(self.harmony_memory_size, self.budget)\n        for i in range(initial_evals):\n            self.harmony_memory_values[i] = func(self.harmony_memory[i])\n            evaluations += 1\n\n        while evaluations < self.budget:\n            new_harmony = self._generate_harmony()\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            new_value = func(new_harmony)\n            evaluations += 1\n\n            if new_value < np.max(self.harmony_memory_values):\n                max_index = np.argmax(self.harmony_memory_values)\n                self.harmony_memory[max_index] = new_harmony\n                self.harmony_memory_values[max_index] = new_value\n\n            self._adaptive_memory_adjustment(evaluations)\n\n        return self.harmony_memory[np.argmin(self.harmony_memory_values)]\n\n    def _generate_harmony(self):\n        harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.harmony_memory_rate:\n                selected_harmony = np.random.randint(self.harmony_memory_size)\n                harmony[i] = self.harmony_memory[selected_harmony, i]\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    harmony[i] += (np.random.rand() - 0.5) * self.bandwidth_reduction\n            else:\n                harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return harmony\n\n    def _adaptive_memory_adjustment(self, evaluations):\n        progress_ratio = evaluations / self.budget\n        self.harmony_memory_rate = 0.8 + 0.15 * np.sin(progress_ratio * np.pi)  # Adaptive rate change\n        self.bandwidth_reduction = 0.1 * (1 - progress_ratio)  # Dynamic bandwidth reduction", "name": "OptimizedHarmonySearch", "description": "Optimized Harmony Search with adaptive memory and reduced dimensional search to enhance convergence speed and solution accuracy.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b0b6c457-269d-42a9-b460-7871a4657035", "metadata": {"aucs": [0.7765882938266643, 0.8243568710218775, 0.8254051892283129, 0.8453491914666238, 0.7969797973903472, 0.8066691149741904, 0.7694038085428194, 0.8057004252149417, 0.8074359098321042, 0.416117482931324, 0.39979565596447497, 0.4117686117310968, 0.43967257299511653, 0.309201016491197, 0.39693004247198227, 0.363309645263, 0.3987040955688068, 0.46254788041927597, 0.4929591324803436, 0.4274797346830146, 0.5237432093077367, 0.33025220060689886, 0.28151718403319015, 0.32055227417481513, 0.1762378267616148, 0.2467746772273809, 0.1822855015301268, 0.18841757599502484, 0.3110643327439262, 0.34249575855811754, 0.4693609030920708, 0.29315713845985214, 0.47811586297136355, 0.13214733198446993, 0.22123021537955867, 0.49549341280388726, 0.9302895297189708, 0.9028953744152621, 0.9167500970780503, 0.9057621447178014, 0.9006194430608284, 0.9332084418810526, 0.89652626832293, 0.8949245427945623, 0.8849838622200957, 0.4496857065665224, 0.4148989354449265, 0.4005082178925833, 0.5088276492448937, 0.4556779579787331, 0.5054035343535082, 0.4131295832594749, 0.4709980786533894, 0.5044368698197303, 0.208717723915833, 0.12748416645848737, 0.13981554615593395, 0.27870581867476185, 0.23517640773701698, 0.19442178331365922, 0.22174398496793624, 0.15118104659812925, 0.15904680331564958, 0.18294309776865514, 0.22628432926488862, 0.1878499226538627, 0.19735694554898042, 0.1865297475214842, 0.213974722263787, 0.20442626327730762, 0.28025631182761934, 0.24734224139470817, 0.1775954412244226, 0.11175136765787663, 0.1813205407926003, 0.1793427828487807, 0.15062929625750765, 0.22764037336437504, 0.2044711106723648, 0.18042916679348509, 0.25121360571027496, 9.999999999998899e-05, 9.999999999998899e-05, 0.004243899651041105, 0.01424030193240955, 9.999999999998899e-05, 9.999999999998899e-05, 0.025506414805956723, 9.999999999998899e-05, 9.999999999998899e-05, 0.06810023338537319, 0.03157372662137481, 0.06805889719731806, 0.0634902417765637, 0.027803266897662993, 0.009583574806745543, 0.15678582708459254, 0.07038501041287071, 0.11910115901058194, 0.1671439149330587, 0.06782909423696981, 0.11108198773078826, 0.07666082561224663, 0.07682108546585809, 0.10517283363132823, 0.08773228099343267, 0.14917483194303893, 0.13428525574038153, 0.08294570137962731, 0.11533685094911361, 0.15309175248560403, 0.09119246166888206, 0.044162803879114976, 0.022312248220477504, 0.08980622216966694, 0.18543801083494993, 0.1377555356806257, 0.4631307876036952, 0.4708990919795437, 0.48893104354439354, 0.5131882347682228, 0.5126887142985609, 0.5202854850270517, 0.5093673211847507, 0.49782059126092126, 0.516490219003638, 0.09406061726081394, 0.09454336716589007, 0.06392400651963404, 0.11308183399755323, 0.12639869793367886, 0.09848128835646508, 0.08652320075934894, 0.0855620326863833, 0.09707825493483646, 0.15489851382837005, 0.1543035080685755, 0.18549011760891643, 0.209682873967463, 0.21015216196834596, 0.1526069131286687, 0.21234289917022164, 0.1347655209550277, 0.15658083107630683, 0.17487280570636998, 0.1919112758955711, 0.1763315340483247, 0.1903785039347028, 0.20731355722158018, 0.29012440808872875, 0.23059304482764353, 0.24174176484193532, 0.17484068243162143, 0.09205759419712978, 0.15562172900780902, 0.10648366153287225, 0.153776235163694, 0.13379466123249095, 0.14019844462295206, 0.1266948203944951, 0.19813764037227666, 0.2096141207159149, 0.25260493289047825, 0.20692956114397643, 0.25499359802615906, 0.21084577152994965, 0.2116714433339294, 0.19173881015338468, 0.20117138005517488, 0.21214584275236148, 0.25957853556284305, 0.2537920689474782, 0.2569069639981758, 0.2102896929047421, 0.19807021774919542, 0.1899972470043002, 0.19985847506813148, 0.19349364749233577, 0.20295017181587083, 0.20182032798730487, 0.732410470762873, 0.8597354039564482, 0.1591781070748679, 0.9053200138579148, 0.9449758467322794, 0.19530688800108742, 0.17090210315549414, 0.1586008237591393, 0.16489379932627757, 0.5436497240178948, 0.5392092166732172, 0.39775297526574127, 0.16873028287854197, 0.2098511545591185, 0.213285720682872, 0.10443358988269846, 0.21116397037570445, 0.09421251894185967, 0.22142062516530991, 0.1890044193028252, 0.2028516914834393, 0.23151480628701537, 0.19974300630755948, 0.21767970443765206, 0.24781002633572502, 0.248338519110455, 0.23222975247301803, 0.0849378101833903, 0.07736208966054414, 0.10204819758100547, 0.08733788813773513, 0.11073054888327749, 0.09763238156855225, 0.10125490375348312, 0.08080991302619955, 0.09374613778867147]}, "mutation_prompt": null}
{"id": "3c76ebc0-434d-465d-b646-19ce0f8e1244", "solution": "import numpy as np\n\nclass EnhancedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory_size = 8  # Slightly reduced size for more efficient updates\n        self.harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n        self.harmony_memory_values = np.full(self.harmony_memory_size, np.inf)\n        self.harmony_memory_rate = 0.9  # Increased for more exploitation\n        self.pitch_adjustment_rate = 0.3  # Reduced for stability in exploration\n        self.bandwidth_reduction = 0.06  # Reduced for finer adjustments\n\n    def __call__(self, func):\n        evaluations = 0\n        for i in range(min(self.harmony_memory_size, self.budget)):\n            self.harmony_memory_values[i] = func(self.harmony_memory[i])\n            evaluations += 1\n\n        while evaluations < self.budget:\n            new_harmony = self._generate_harmony()\n            new_value = func(np.clip(new_harmony, self.lower_bound, self.upper_bound))\n            evaluations += 1\n\n            if new_value < np.max(self.harmony_memory_values):\n                replace_index = np.argmax(self.harmony_memory_values)\n                self.harmony_memory[replace_index] = new_harmony\n                self.harmony_memory_values[replace_index] = new_value\n\n            self._dynamic_memory_adjustment(evaluations)\n\n        return self.harmony_memory[np.argmin(self.harmony_memory_values)]\n\n    def _generate_harmony(self):\n        harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.harmony_memory_rate:\n                selected_index = np.random.randint(self.harmony_memory_size)\n                harmony[i] = self.harmony_memory[selected_index, i]\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    direction = np.random.choice([-1, 1])\n                    harmony[i] += direction * (np.random.rand() * self.bandwidth_reduction)\n            else:\n                harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return harmony\n\n    def _dynamic_memory_adjustment(self, evaluations):\n        progress = evaluations / self.budget\n        self.harmony_memory_rate = 0.85 + 0.1 * np.cos(progress * np.pi / 2)  # Adaptive rate using cosine function\n        self.bandwidth_reduction = 0.05 * (1 - progress)  # Gradual bandwidth reduction", "name": "EnhancedHarmonySearch", "description": "Enhanced Harmony Search with dynamic memory management and directional pitch adjustment for improved performance.", "configspace": "", "generation": 88, "fitness": 0.2725487183013009, "feedback": "The algorithm EnhancedHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.24.", "error": "", "parent_id": "b0b6c457-269d-42a9-b460-7871a4657035", "metadata": {"aucs": [0.8546256307917074, 0.8202363833525377, 0.8331428050570688, 0.7898583883824606, 0.8429084802502781, 0.8383431465995347, 0.8540974623094276, 0.8403131125901062, 0.820411834065484, 0.44507615190526617, 0.5043238041011682, 0.3977558757006736, 0.38889570025537357, 0.3920511560987061, 0.40789771105915285, 0.42611746518648885, 0.366653174713085, 0.4624308702092894, 0.4803120050397698, 0.2898296430795385, 0.27197353934157786, 0.3548466549741971, 0.34217743295804137, 0.40325993459099563, 0.3658150485649393, 0.2636040634734813, 0.3503740350477349, 0.16809137598736523, 0.13905104253559808, 0.16627471015050665, 0.18483918677361788, 0.3204613150383748, 0.21419676754932448, 0.18387686871189846, 0.16237147234616245, 0.2523282676929304, 0.9020337779438503, 0.8589732069546665, 0.8788702830025459, 0.9183722989898173, 0.8543238438220624, 0.9383556380279099, 0.9178633364221793, 0.9106593249605035, 0.9412308417781232, 0.5090302830333027, 0.3982307039988153, 0.4867628450519006, 0.4153820404611096, 0.4466025159654631, 0.526973142507259, 0.44025817917550414, 0.3621377475032308, 0.48243291489620055, 0.2100701242102445, 0.1651582305359991, 0.13292654127808745, 0.18802719978889337, 0.19701164542638838, 0.17237109732982225, 0.1956263305925119, 0.12718101460658437, 0.11517094946059292, 0.18513152046360193, 0.19567596922255093, 0.1916826354876484, 0.1346462408278316, 0.21788256368922332, 0.18016508193887493, 0.31406214936366206, 0.19242264502776407, 0.17183231937123988, 0.12484121335005605, 0.14296202839156247, 0.19305137742291523, 0.15879709839966705, 0.2161297378727831, 0.19650471703327144, 0.2202068909958399, 0.1604803158947392, 0.21430814779792395, 9.999999999998899e-05, 0.0008186019692955071, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01949200230174808, 0.03734823243213636, 0.08898534940267966, 0.02666066324679328, 9.999999999998899e-05, 0.017804390721533836, 0.07886355670453382, 0.06560458215808396, 0.08729273317823505, 0.1612979820984729, 0.07410523390403267, 0.22772768284576772, 0.08868652610551786, 0.084566039022688, 0.11608255414843971, 0.12367054083123408, 0.22312141046294343, 0.09513037073469566, 0.12338611814939071, 0.12229110503633767, 0.07107216844711639, 0.13296726382952362, 0.17500325652246596, 0.043098690260153893, 0.1400560027497899, 0.15086249627089943, 0.08121059245215545, 0.4885544390176455, 0.5490107572522489, 0.4817801250259769, 0.4805051994285229, 0.4935308546807582, 0.5547466941785056, 0.48035742473108656, 0.4834796459747468, 0.4995218275030072, 0.06898639468280277, 0.07198195402368657, 0.08983779815849902, 0.05043837089473058, 0.0384399114404147, 0.09909587677077558, 0.0578420028045894, 0.046139267280159935, 0.07213623087895482, 0.11185403783477377, 0.16319557109793914, 0.36114500296771945, 0.1631161596590227, 0.15722178512152774, 0.12862733759323475, 0.4226353027575135, 0.18907800463150948, 0.1197772568481209, 0.16613487386052406, 0.23818257954187594, 0.15547553097125544, 0.19668852303705409, 0.2210517750036567, 0.16568254907659152, 0.1522103523731374, 0.25761326981367283, 0.2263526613762632, 0.10357289140283688, 0.22075839854449975, 0.18507438251570651, 0.10349577034203228, 0.15983637754495672, 0.23499370883799742, 0.1058183728842973, 0.1032155215397117, 0.11078784932086783, 0.2054409894279664, 0.2087531002230315, 0.23707411041935278, 0.20889281200304088, 0.16993971970321586, 0.2308908611299566, 0.28616525081772715, 0.21548526053877182, 0.23876154342430778, 0.19653849215557495, 0.2052833286045338, 0.21439653336642472, 0.2281086736536454, 0.18415049462957522, 0.20167954796805931, 0.21812154963721764, 0.22031641018601944, 0.20562245695783565, 0.17294871637963516, 0.18925380899851207, 0.1587215986930971, 0.6676077785329796, 0.9051166527957273, 0.9006177230258766, 0.1725690332012667, 0.940520858875871, 0.16594452401703852, 0.1321281810669831, 0.11036509878593226, 0.40580123702633497, 0.12738626008098075, 0.16970762626422964, 0.21347907528185084, 0.11274659194632819, 0.39020951884892674, 0.24206811594287414, 0.2329781254262614, 0.2268877379597264, 0.24580558727558643, 0.23078312798790013, 0.23812093547358848, 0.21072051503304068, 0.26398140768321254, 0.23673687848779246, 0.2572683708396287, 0.05994224838563167, 0.0880653188642978, 0.07243874161900021, 0.07008842663921933, 0.10836671461877101, 0.0714842940225241, 0.09393896997330753, 0.06931321965492443, 0.05106100455521467]}, "mutation_prompt": null}
{"id": "5416d4f6-9a3e-4d00-a228-d088e13dc3f8", "solution": "import numpy as np\n\nclass EnhancedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory_size = 8  # Slightly reduced for efficiency\n        self.harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n        self.harmony_memory_values = np.array([float('inf')] * self.harmony_memory_size)\n        self.harmony_memory_rate = 0.9  # Increased for exploration-exploitation balance\n        self.pitch_adjustment_rate = 0.25  # Reduced for stability\n        self.bandwidth = 0.05  # Fixed bandwidth for consistency\n\n    def __call__(self, func):\n        evaluations = 0\n        for i in range(self.harmony_memory_size):\n            if evaluations >= self.budget:\n                break\n            self.harmony_memory_values[i] = func(self.harmony_memory[i])\n            evaluations += 1\n\n        while evaluations < self.budget:\n            new_harmony = self._generate_harmony()\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            new_value = func(new_harmony)\n            evaluations += 1\n\n            if new_value < np.max(self.harmony_memory_values):\n                max_index = np.argmax(self.harmony_memory_values)\n                self.harmony_memory[max_index] = new_harmony\n                self.harmony_memory_values[max_index] = new_value\n\n        return self.harmony_memory[np.argmin(self.harmony_memory_values)]\n\n    def _generate_harmony(self):\n        harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.harmony_memory_rate:\n                harmony[i] = np.random.choice(self.harmony_memory[:, i])\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    harmony[i] += (np.random.rand() - 0.5) * self.bandwidth\n            else:\n                harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return harmony", "name": "EnhancedHarmonySearch", "description": "Enhanced Harmony Search with dynamic memory reduction and simplified pitch adjustments for optimized performance.", "configspace": "", "generation": 89, "fitness": 0.2663751763873816, "feedback": "The algorithm EnhancedHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.22.", "error": "", "parent_id": "b0b6c457-269d-42a9-b460-7871a4657035", "metadata": {"aucs": [0.8083708340736325, 0.8010316561411546, 0.8248672412807277, 0.8233196621195573, 0.8542336958281977, 0.8339634149685752, 0.8275570058733773, 0.8205675194683728, 0.8098874525329827, 0.4374267468139026, 0.4792475675859085, 0.36708431421443644, 0.3446574016303604, 0.3575999947726074, 0.3598442137416755, 0.35970312710747276, 0.39261792656628036, 0.3829013918561167, 0.5686079672931925, 0.48498894270097626, 0.19384939665598755, 0.4763065543753052, 0.4410620446315938, 0.2656825963904945, 0.5313706808708154, 0.49729817999218506, 0.5089491431213093, 0.5122097929980531, 0.17013085037900433, 0.16417594766233945, 0.42477645198552716, 0.19028377875608637, 0.16545708317244845, 0.17590448352484678, 0.3610436018371589, 0.21699277986391285, 0.9019883513280792, 0.879724272194277, 0.8788114230653676, 0.9345469574359953, 0.9101722951179047, 0.8443062524320423, 0.9165068903913907, 0.878072566757157, 0.8458112986064902, 0.406516970216082, 0.41456715728441873, 0.4420945444077907, 0.37108926548370114, 0.41994662377147673, 0.4344237166450976, 0.3776083716688591, 0.4133050633892299, 0.32939657082965945, 0.17023174947812691, 0.23412181676073585, 0.24248678427171866, 0.21353970530171829, 0.21323116699135536, 0.1486468696052754, 0.14364672256811173, 0.20049454837490144, 0.1479722981766125, 0.18192176019517015, 0.43530006366236607, 0.1995552407086929, 0.1284962545250279, 0.1283044125526399, 0.18644184926063567, 0.16427381430499988, 0.2660765568009136, 0.15816442139397058, 0.19587013158038968, 0.18327884296900165, 0.11015841442319485, 0.1787378767804143, 0.15215447124582293, 0.13169077950178687, 0.2090203787804975, 0.10834046094541794, 0.20907531218931563, 9.999999999998899e-05, 9.999999999998899e-05, 0.013913182518098255, 0.00013314507213979532, 9.999999999998899e-05, 0.023334708090233525, 0.0022726758029523175, 9.999999999998899e-05, 0.04743454165973693, 0.029793639534878125, 0.05581411626831234, 0.10570028496690798, 0.05764962038281485, 0.025574482532372378, 0.030194421155703255, 0.08859869440643342, 0.12168809579164575, 0.052462705273510934, 0.16049060004255755, 0.16800582465890057, 0.07955570761636321, 0.09272128496037946, 0.2122830054663054, 0.13693578937448925, 0.1342073661477582, 0.23824747746231234, 0.09521412786947425, 0.060837533226444473, 0.05293901518866173, 0.128890551332548, 0.27645979029748247, 0.006099577773203579, 0.10040346732654926, 0.08198028594734319, 0.13603543617907998, 0.1103494777933296, 0.4243572895008736, 0.45487692928936185, 0.4493514972764976, 0.4722608837219008, 0.47835291362797516, 0.4717510696818137, 0.5236077571972917, 0.49757853827664944, 0.5075276806242289, 0.07113360766636267, 0.09452147102086861, 0.06906489145937789, 0.08241819755920388, 0.09806585735071016, 0.0668746280958108, 0.16527167020975264, 0.0877415722023488, 0.09199921533748401, 0.11495229303924259, 0.1717873314317121, 0.11981121858633903, 0.15421055347953916, 0.10019047592115582, 0.1353426688907039, 0.20663400854208513, 0.1769472573811618, 0.2140926420674023, 0.16067316716752666, 0.2011872208984289, 0.17616948517201547, 0.23429332969547934, 0.2554199693038932, 0.23548649787746467, 0.18063811909496597, 0.22989808337206397, 0.18608124521788605, 0.0779108936238877, 0.16994333632576963, 0.1775529843516026, 0.17358928227344583, 0.14909577053110734, 0.19661087951501144, 0.12573837095953044, 0.1429455390053559, 0.1561345906029863, 0.2119406269167392, 0.20604004118457542, 0.21489656633613619, 0.2558704925331333, 0.21330384542265624, 0.23814360064669793, 0.19973243546809705, 0.21296952685569792, 0.24393536956881068, 0.5835172306399684, 0.19810093873025603, 0.19337476454593916, 0.2330296137058262, 0.19156462572651023, 0.2570113195324588, 0.26042744586208033, 0.21775651596354673, 0.21261700160219255, 0.15990695044652803, 0.17213903199055947, 0.17324961378878068, 0.173659785529378, 0.19930428214584184, 0.2099095428940344, 0.18744099604155406, 0.11520668499696163, 0.16755102217960416, 0.42845439678875585, 0.20664940084452843, 0.20425991024891965, 0.33846234127959796, 0.1283924514645527, 0.1527149578224316, 0.11251527011885232, 0.10519704252012274, 0.6308789151715111, 0.18542689882181185, 0.22661310563138748, 0.23985329838532488, 0.2162507480587872, 0.27625614934280707, 0.19682349353130746, 0.25305834905476454, 0.18752591941236707, 0.24467141552794502, 0.10703121359986778, 0.06109110914759819, 0.07451449446466796, 0.11974523556339611, 0.07563488237574567, 0.07715944637324013, 0.09106962861194168, 0.07981221168091757, 0.08356968887110583]}, "mutation_prompt": null}
{"id": "9002559e-39a0-47f4-9fe5-a107643144aa", "solution": "import numpy as np\n\nclass EnhancedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory_size = 12  # Slightly increased memory size for better exploration\n        self.harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n        self.harmony_memory_values = np.array([np.inf] * self.harmony_memory_size)\n        self.harmony_memory_rate = 0.9  # More emphasis on memory usage\n        self.pitch_adjustment_rate = 0.3  # Adjusted for smooth adjustments\n        self.bandwidth = 0.05  # Consistent bandwidth for better convergence\n\n    def __call__(self, func):\n        evaluations = 0\n        initial_evals = min(self.harmony_memory_size, self.budget)\n        for i in range(initial_evals):\n            self.harmony_memory_values[i] = func(self.harmony_memory[i])\n            evaluations += 1\n\n        while evaluations < self.budget:\n            new_harmony = self._generate_harmony()\n            new_value = func(new_harmony)\n            evaluations += 1\n\n            if new_value < np.max(self.harmony_memory_values):\n                max_index = np.argmax(self.harmony_memory_values)\n                self.harmony_memory[max_index] = new_harmony\n                self.harmony_memory_values[max_index] = new_value\n\n            self._dynamic_memory_adjustment(evaluations)\n\n        return self.harmony_memory[np.argmin(self.harmony_memory_values)]\n\n    def _generate_harmony(self):\n        harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.harmony_memory_rate:\n                selected_harmony = np.random.randint(self.harmony_memory_size)\n                harmony[i] = self.harmony_memory[selected_harmony, i]\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    harmony[i] += (np.random.rand() - 0.5) * self.bandwidth\n            else:\n                harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return np.clip(harmony, self.lower_bound, self.upper_bound)\n\n    def _dynamic_memory_adjustment(self, evaluations):\n        progress_ratio = evaluations / self.budget\n        self.harmony_memory_rate = 0.85 + 0.1 * np.cos(progress_ratio * np.pi)  # Dynamic rate change", "name": "EnhancedHarmonySearch", "description": "Enhanced Harmony Search with an adaptive dynamic memory strategy and efficient pitch adjustment for improved convergence.", "configspace": "", "generation": 90, "fitness": 0.2589267532559455, "feedback": "The algorithm EnhancedHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.22.", "error": "", "parent_id": "b0b6c457-269d-42a9-b460-7871a4657035", "metadata": {"aucs": [0.8123371281691787, 0.8528069721008031, 0.814102244697521, 0.8207424210167067, 0.8138728701289054, 0.7541146487138558, 0.7272860906119936, 0.8311384858028192, 0.8310022956613456, 0.3675051915201889, 0.3243776031526583, 0.3416028109640611, 0.4024213405482733, 0.3364754104322516, 0.3252649767668149, 0.34934359519064184, 0.46327713127505243, 0.385389457454861, 0.3701609559592075, 0.24345844712642117, 0.31357520295694574, 0.37559040913767516, 0.34811998881881745, 0.24478878834438622, 0.32990096068615116, 0.3537388166811458, 0.44550770770876114, 0.34324806242690453, 0.1764150292271317, 0.36002359190776856, 0.30161016020171927, 0.1768186857274051, 0.304164734829238, 0.1701697117818125, 0.21489190073231101, 0.1615637186047134, 0.8804618212913878, 0.8766533334688659, 0.8840865677438087, 0.8689011830341652, 0.8829453144908508, 0.8958257086397114, 0.8135683333318358, 0.8875131396769913, 0.8927652597184825, 0.1907489278712402, 0.2597356951899352, 0.3635817602673903, 0.33982834391112215, 0.45595175430220614, 0.4286020045725939, 0.20910182518712161, 0.18135144077409782, 0.48985795394944365, 0.15495487797554175, 0.08583047464147642, 0.11736506128025104, 0.21358244343930255, 0.24241024979608294, 0.19748274054880333, 0.17410165145371137, 0.16261663326020004, 0.1552477470946475, 0.15118010489782696, 0.1990244898435911, 0.2758743024895308, 0.15902254967527352, 0.1836398974096033, 0.20271150603856913, 0.17220305275277037, 0.1761672831914537, 0.15318789542463151, 0.15298476119966797, 0.17289741665927372, 0.16969902792549152, 0.17294820532623434, 0.16235782290334877, 0.16203744924069252, 0.19361966917007445, 0.09723712764916703, 0.18090210544345753, 0.03719852782246258, 9.999999999998899e-05, 9.999999999998899e-05, 0.0057186405196784085, 0.053261262073275195, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08954021667044088, 0.028277105286830695, 0.14396606889181363, 0.06556161961343365, 0.0013185000816300363, 0.009070160629847113, 0.07229947384309088, 0.06089510013208821, 0.06879439120364017, 0.10641711869903481, 0.04649245131190127, 0.16767531770467226, 0.13016088563158024, 0.10040058691273479, 0.0943293623332494, 0.17806480203184327, 0.11883255264611359, 0.11627248218716757, 0.14728146090964145, 0.07740907354666726, 0.1155473931598392, 0.05316054959678973, 0.058929572354207815, 0.25774725731152914, 0.16034222234745343, 0.12078769535336464, 0.0878887571105641, 0.4420784825800058, 0.44533364045832724, 0.5002490850675715, 0.5183472837964501, 0.5336975871823563, 0.467141371007208, 0.4982411692972244, 0.47098989631127064, 0.4846789123446069, 0.08378117171152133, 0.05920361875938995, 0.12577640102021326, 0.09458345591645645, 0.0440932637497744, 0.1508542719663214, 0.0833506702678527, 0.48677010394995224, 0.07367287371427211, 0.15704122466959614, 0.18778549156173008, 0.2727191095019458, 0.1473708039167525, 0.14010236716619417, 0.14533808092341838, 0.19279815052009863, 0.17490874508171905, 0.22374491696231225, 0.19192473039511693, 0.20044980723954753, 0.1709967974357327, 0.24684834309680104, 0.18057465903336456, 0.20885520343090547, 0.15542001549107975, 0.19827032391089006, 0.2327969433857796, 0.12888066337394322, 0.18710805792956253, 0.10995187827899988, 0.16587978238899648, 0.12336611978193268, 0.13526298540691806, 0.17567742475798276, 0.15732648936674865, 0.09659126330531986, 0.20766665261641226, 0.2176673141987181, 0.21518269149242863, 0.22829167286495544, 0.15260515020196053, 0.24031483633750372, 0.24164770306997885, 0.1659945291126298, 0.26636124739179945, 0.21239333123417903, 0.25183337639374903, 0.22995893440898285, 0.17587894620795308, 0.22631267299105984, 0.1796339745562484, 0.1898330191238362, 0.22833844493167388, 0.30967744310761025, 0.1587633111354233, 0.8635541724354907, 0.19794788967618449, 0.9365320236496415, 0.487177794580272, 0.17981722288139357, 0.21280962906779577, 0.1589531045850725, 0.17268107260564358, 0.0886167024640857, 0.16842075524960287, 0.21928099212736618, 0.16919551616676742, 0.4236942982598715, 0.21007464847080615, 0.10490410910573067, 0.10497605863684545, 0.09481777074786846, 0.23503712939434085, 0.19864792358559857, 0.19695160838604742, 0.25389009033347065, 0.20263334883880002, 0.21750844567655292, 0.24939016084529042, 0.22200330907088406, 0.26470965009301684, 0.08069984963330712, 0.08066171510427789, 0.06846365025819034, 0.0735532002831909, 0.0851551096846721, 0.09667037066906703, 0.09280502466232576, 0.09072861261440301, 0.052211785514129194]}, "mutation_prompt": null}
{"id": "8237e726-ef92-444d-b252-82ebf2027276", "solution": "import numpy as np\n\nclass EnhancedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory_size = 8  # Reduced size for better efficiency\n        self.harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n        self.harmony_memory_values = np.full(self.harmony_memory_size, np.inf)\n        self.harmony_memory_rate = 0.9  # Enhanced rate for quicker convergence\n        self.pitch_adjustment_rate = 0.3  # Stable rate for consistent adjustments\n        self.bandwidth_reduction = 0.05  # More dynamic bandwidth\n\n    def __call__(self, func):\n        evaluations = 0\n        for i in range(min(self.harmony_memory_size, self.budget)):\n            self.harmony_memory_values[i] = func(self.harmony_memory[i])\n            evaluations += 1\n\n        while evaluations < self.budget:\n            new_harmony = self._generate_harmony()\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            new_value = func(new_harmony)\n            evaluations += 1\n\n            if new_value < np.max(self.harmony_memory_values):\n                max_index = np.argmax(self.harmony_memory_values)\n                self.harmony_memory[max_index] = new_harmony\n                self.harmony_memory_values[max_index] = new_value\n\n            self._dynamic_memory_adjustment(evaluations)\n\n        return self.harmony_memory[np.argmin(self.harmony_memory_values)]\n\n    def _generate_harmony(self):\n        harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.harmony_memory_rate:\n                harmony[i] = self.harmony_memory[np.random.randint(self.harmony_memory_size), i]\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    harmony[i] += (np.random.rand() - 0.5) * self.bandwidth_reduction\n            else:\n                harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return harmony\n\n    def _dynamic_memory_adjustment(self, evaluations):\n        progress_ratio = evaluations / self.budget\n        self.harmony_memory_rate = 0.85 + 0.1 * np.sin(progress_ratio * np.pi)  # More dynamic rate\n        self.bandwidth_reduction = 0.07 * (1 - progress_ratio**2)  # Smoother, more gradual reduction", "name": "EnhancedHarmonySearch", "description": "Enhanced Harmony Search with accelerated convergence using dynamic adjustment of exploration parameters and efficient memory handling.", "configspace": "", "generation": 91, "fitness": 0.27778879890191643, "feedback": "The algorithm EnhancedHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.24.", "error": "", "parent_id": "b0b6c457-269d-42a9-b460-7871a4657035", "metadata": {"aucs": [0.8046795441069245, 0.8260995659201639, 0.8681417850337326, 0.8379046881201719, 0.8291919837780309, 0.8557793826120591, 0.8318162680715079, 0.8144284364560886, 0.8197858466044767, 0.4151820098870277, 0.34272149661067, 0.4079587649531331, 0.3838664458419351, 0.4037703962463727, 0.39553418811120533, 0.4392591566736883, 0.46605927683340864, 0.36213736100659466, 0.5026789007430776, 0.41349380042802564, 0.512825356183731, 0.4905679890594632, 0.19484945756035388, 0.5525846383716186, 0.3319383327047817, 0.24669201893498915, 0.5071163034843742, 0.18974011245564892, 0.17135891202259723, 0.17873843622417696, 0.49296049517337626, 0.4369258235616845, 0.16228583592576273, 0.25944903094492267, 0.2166951737933981, 0.1734504639831137, 0.9251671821020905, 0.9079098041290914, 0.9133445179415295, 0.9207853983849908, 0.9035272518329797, 0.9479148731362942, 0.9149457967434833, 0.9291145115729876, 0.9196306073043948, 0.4262480810139818, 0.5032885173735732, 0.4695091075548242, 0.39655223448514687, 0.38428247521712033, 0.4711941837892045, 0.46644099058147626, 0.4222306413411432, 0.26977386543213766, 0.14343593673545185, 0.11108855147759278, 0.1402200267939805, 0.22419464560159463, 0.22079173542949015, 0.2833344976965615, 0.16570788079894994, 0.21152893187034982, 0.12868513350683664, 0.3967033816954987, 0.18547505289056632, 0.26153627745281816, 0.1527403359192876, 0.11252971132359557, 0.30259340326071194, 0.16385104069978806, 0.3066820874469852, 0.18431414448023953, 0.32037572040213735, 0.11018730049288572, 0.19910436101626283, 0.17412181160911988, 0.1763037153465573, 0.22915805317473603, 0.13770849380176753, 0.20388227877417897, 0.374683773832335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00038624273688492305, 0.010350530665747981, 0.002817727810913495, 0.0035710055253602713, 0.0586399897514408, 0.038583682485273996, 0.059578439556426166, 0.06598907150336164, 0.06318131119940795, 0.11287286583350431, 0.03946940851825953, 0.06626057511113248, 0.03913567137949214, 0.058187411184974724, 0.1630846132372641, 0.22553996210774496, 0.11370635900628911, 0.08432789269162877, 0.22762542585369128, 0.150134605755454, 0.07738233607675249, 0.20763426216037606, 0.11039252844483849, 0.03683233799273511, 0.04201826576570389, 0.10711471254188987, 0.07782198925544037, 0.1277879571729349, 0.09284699918497863, 0.08826788473214386, 0.0957108276147941, 0.12468831800963742, 0.47818589088566843, 0.5046063335597047, 0.4747552310089662, 0.47852060573455324, 0.5250040386441432, 0.4622612820979338, 0.5132575454521888, 0.5049771196021444, 0.5052819083214506, 0.1140987808774433, 0.05308848230342267, 0.128371876412112, 0.056113919610937035, 0.11075127974271726, 0.11330895217728176, 0.06153394742943763, 0.08007489811804425, 0.07379954969605429, 0.20111497463619743, 0.13326450885244834, 0.18100622413372647, 0.11869084540087638, 0.11601480013868204, 0.13760230208337065, 0.16663972514081138, 0.20228143498425066, 0.11746205381102504, 0.16353626127097942, 0.2527362760306544, 0.21855865465815982, 0.2187731728246448, 0.1953191787790043, 0.34693307530415163, 0.16405973714005706, 0.18776650292345032, 0.21985882815244995, 0.10185608831620852, 0.1991981150767056, 0.13301732659723597, 0.1803222777530047, 0.1593456413656995, 0.26710715454397227, 0.13023582585430793, 0.1407877767761655, 0.2159671144518276, 0.22097281881435016, 0.21065756388788404, 0.22556867690440952, 0.1974557204900812, 0.2545553635554797, 0.23776916338089216, 0.27243019193753404, 0.22294207425640955, 0.23058468441885305, 0.20719694103051456, 0.19511795722368108, 0.17512859990625296, 0.21729611560741036, 0.18355262638316128, 0.19510772963997058, 0.1948973785021222, 0.2168383353750668, 0.19872569632402914, 0.1597161862337514, 0.8531808199300711, 0.18859678730610163, 0.17919163324391607, 0.8969410482803621, 0.8581633836959881, 0.14306654108141648, 0.15951483224837704, 0.15179792622172883, 0.6126668144557041, 0.15328549737254038, 0.40623523361067804, 0.12802615818587493, 0.15454499799649257, 0.21357978466924188, 0.11298744575429986, 0.15960947867223418, 0.1780110707100666, 0.2232204850239906, 0.1992132715621271, 0.20185776773039166, 0.2227489866958553, 0.20098519717591568, 0.2156695530739723, 0.23940254358746882, 0.24135885900945353, 0.29608663810739444, 0.10013721086396221, 0.0903033114204278, 0.0652719939874643, 0.09509236171183588, 0.052854282976286915, 0.0953711123222718, 0.057368767236852136, 0.05712673008721847, 0.05114348150434578]}, "mutation_prompt": null}
{"id": "27c54fea-c6de-410a-aa5f-301a006f3c53", "solution": "import numpy as np\n\nclass OptimizedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory_size = 10  # Reduced size for faster updates\n        self.harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n        self.harmony_memory_values = np.full(self.harmony_memory_size, np.inf)\n        self.harmony_memory_rate = 0.85  # Adjusted for balanced exploration-exploitation\n        self.pitch_adjustment_rate = 0.35  # Slightly reduced for stability\n        self.bandwidth_reduction = 0.08  # Optimized bandwidth adjustment\n\n    def __call__(self, func):\n        evaluations = 0\n        initial_evals = min(self.harmony_memory_size, self.budget)\n        for i in range(initial_evals):\n            self.harmony_memory_values[i] = func(self.harmony_memory[i])\n            evaluations += 1\n\n        while evaluations < self.budget:\n            new_harmony = self._generate_harmony()\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            new_value = func(new_harmony)\n            evaluations += 1\n\n            if new_value < np.max(self.harmony_memory_values):\n                max_index = np.argmax(self.harmony_memory_values)\n                self.harmony_memory[max_index] = new_harmony\n                self.harmony_memory_values[max_index] = new_value\n\n            self._adaptive_memory_adjustment(evaluations)\n\n        return self.harmony_memory[np.argmin(self.harmony_memory_values)]\n\n    def _generate_harmony(self):\n        harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.harmony_memory_rate:\n                selected_harmony = np.random.randint(self.harmony_memory_size)\n                harmony[i] = self.harmony_memory[selected_harmony, i]\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    harmony[i] += (np.random.rand() - 0.5) * self.bandwidth_reduction\n            else:\n                harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return harmony\n\n    def _adaptive_memory_adjustment(self, evaluations):\n        progress_ratio = evaluations / self.budget\n        self.harmony_memory_rate = 0.8 + 0.15 * np.sin(progress_ratio * np.pi)  # Adaptive rate change\n        self.bandwidth_reduction = 0.1 * (1 - progress_ratio)  # Dynamic bandwidth reduction", "name": "OptimizedHarmonySearch", "description": "Optimized Harmony Search with adaptive memory and reduced dimensional search to enhance convergence speed and solution accuracy.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b0b6c457-269d-42a9-b460-7871a4657035", "metadata": {"aucs": [0.7765882938266643, 0.8243568710218775, 0.8254051892283129, 0.8453491914666238, 0.7969797973903472, 0.8066691149741904, 0.7694038085428194, 0.8057004252149417, 0.8074359098321042, 0.416117482931324, 0.39979565596447497, 0.4117686117310968, 0.43967257299511653, 0.309201016491197, 0.39693004247198227, 0.363309645263, 0.3987040955688068, 0.46254788041927597, 0.4929591324803436, 0.4274797346830146, 0.5237432093077367, 0.33025220060689886, 0.28151718403319015, 0.32055227417481513, 0.1762378267616148, 0.2467746772273809, 0.1822855015301268, 0.18841757599502484, 0.3110643327439262, 0.34249575855811754, 0.4693609030920708, 0.29315713845985214, 0.47811586297136355, 0.13214733198446993, 0.22123021537955867, 0.49549341280388726, 0.9302895297189708, 0.9028953744152621, 0.9167500970780503, 0.9057621447178014, 0.9006194430608284, 0.9332084418810526, 0.89652626832293, 0.8949245427945623, 0.8849838622200957, 0.4496857065665224, 0.4148989354449265, 0.4005082178925833, 0.5088276492448937, 0.4556779579787331, 0.5054035343535082, 0.4131295832594749, 0.4709980786533894, 0.5044368698197303, 0.208717723915833, 0.12748416645848737, 0.13981554615593395, 0.27870581867476185, 0.23517640773701698, 0.19442178331365922, 0.22174398496793624, 0.15118104659812925, 0.15904680331564958, 0.18294309776865514, 0.22628432926488862, 0.1878499226538627, 0.19735694554898042, 0.1865297475214842, 0.213974722263787, 0.20442626327730762, 0.28025631182761934, 0.24734224139470817, 0.1775954412244226, 0.11175136765787663, 0.1813205407926003, 0.1793427828487807, 0.15062929625750765, 0.22764037336437504, 0.2044711106723648, 0.18042916679348509, 0.25121360571027496, 9.999999999998899e-05, 9.999999999998899e-05, 0.004243899651041105, 0.01424030193240955, 9.999999999998899e-05, 9.999999999998899e-05, 0.025506414805956723, 9.999999999998899e-05, 9.999999999998899e-05, 0.06810023338537319, 0.03157372662137481, 0.06805889719731806, 0.0634902417765637, 0.027803266897662993, 0.009583574806745543, 0.15678582708459254, 0.07038501041287071, 0.11910115901058194, 0.1671439149330587, 0.06782909423696981, 0.11108198773078826, 0.07666082561224663, 0.07682108546585809, 0.10517283363132823, 0.08773228099343267, 0.14917483194303893, 0.13428525574038153, 0.08294570137962731, 0.11533685094911361, 0.15309175248560403, 0.09119246166888206, 0.044162803879114976, 0.022312248220477504, 0.08980622216966694, 0.18543801083494993, 0.1377555356806257, 0.4631307876036952, 0.4708990919795437, 0.48893104354439354, 0.5131882347682228, 0.5126887142985609, 0.5202854850270517, 0.5093673211847507, 0.49782059126092126, 0.516490219003638, 0.09406061726081394, 0.09454336716589007, 0.06392400651963404, 0.11308183399755323, 0.12639869793367886, 0.09848128835646508, 0.08652320075934894, 0.0855620326863833, 0.09707825493483646, 0.15489851382837005, 0.1543035080685755, 0.18549011760891643, 0.209682873967463, 0.21015216196834596, 0.1526069131286687, 0.21234289917022164, 0.1347655209550277, 0.15658083107630683, 0.17487280570636998, 0.1919112758955711, 0.1763315340483247, 0.1903785039347028, 0.20731355722158018, 0.29012440808872875, 0.23059304482764353, 0.24174176484193532, 0.17484068243162143, 0.09205759419712978, 0.15562172900780902, 0.10648366153287225, 0.153776235163694, 0.13379466123249095, 0.14019844462295206, 0.1266948203944951, 0.19813764037227666, 0.2096141207159149, 0.25260493289047825, 0.20692956114397643, 0.25499359802615906, 0.21084577152994965, 0.2116714433339294, 0.19173881015338468, 0.20117138005517488, 0.21214584275236148, 0.25957853556284305, 0.2537920689474782, 0.2569069639981758, 0.2102896929047421, 0.19807021774919542, 0.1899972470043002, 0.19985847506813148, 0.19349364749233577, 0.20295017181587083, 0.20182032798730487, 0.732410470762873, 0.8597354039564482, 0.1591781070748679, 0.9053200138579148, 0.9449758467322794, 0.19530688800108742, 0.17090210315549414, 0.1586008237591393, 0.16489379932627757, 0.5436497240178948, 0.5392092166732172, 0.39775297526574127, 0.16873028287854197, 0.2098511545591185, 0.213285720682872, 0.10443358988269846, 0.21116397037570445, 0.09421251894185967, 0.22142062516530991, 0.1890044193028252, 0.2028516914834393, 0.23151480628701537, 0.19974300630755948, 0.21767970443765206, 0.24781002633572502, 0.248338519110455, 0.23222975247301803, 0.0849378101833903, 0.07736208966054414, 0.10204819758100547, 0.08733788813773513, 0.11073054888327749, 0.09763238156855225, 0.10125490375348312, 0.08080991302619955, 0.09374613778867147]}, "mutation_prompt": null}
{"id": "8bd94f7c-49ca-4834-a46d-742b27632a94", "solution": "import numpy as np\n\nclass OptimizedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory_size = 10  # Reduced size for faster updates\n        self.harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n        self.harmony_memory_values = np.full(self.harmony_memory_size, np.inf)\n        self.harmony_memory_rate = 0.85  # Adjusted for balanced exploration-exploitation\n        self.pitch_adjustment_rate = 0.35  # Slightly reduced for stability\n        self.bandwidth_reduction = 0.08  # Optimized bandwidth adjustment\n\n    def __call__(self, func):\n        evaluations = 0\n        initial_evals = min(self.harmony_memory_size, self.budget)\n        for i in range(initial_evals):\n            self.harmony_memory_values[i] = func(self.harmony_memory[i])\n            evaluations += 1\n\n        while evaluations < self.budget:\n            new_harmony = self._generate_harmony()\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            new_value = func(new_harmony)\n            evaluations += 1\n\n            if new_value < np.max(self.harmony_memory_values):\n                max_index = np.argmax(self.harmony_memory_values)\n                self.harmony_memory[max_index] = new_harmony\n                self.harmony_memory_values[max_index] = new_value\n\n            self._adaptive_memory_adjustment(evaluations)\n\n        return self.harmony_memory[np.argmin(self.harmony_memory_values)]\n\n    def _generate_harmony(self):\n        harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.harmony_memory_rate:\n                selected_harmony = np.random.randint(self.harmony_memory_size)\n                harmony[i] = self.harmony_memory[selected_harmony, i]\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    harmony[i] += (np.random.rand() - 0.5) * self.bandwidth_reduction\n            else:\n                harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return harmony\n\n    def _adaptive_memory_adjustment(self, evaluations):\n        progress_ratio = evaluations / self.budget\n        self.harmony_memory_rate = 0.8 + 0.15 * np.sin(progress_ratio * np.pi)  # Adaptive rate change\n        self.bandwidth_reduction = 0.1 * (1 - progress_ratio)  # Dynamic bandwidth reduction", "name": "OptimizedHarmonySearch", "description": "Optimized Harmony Search with adaptive memory and reduced dimensional search to enhance convergence speed and solution accuracy.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b0b6c457-269d-42a9-b460-7871a4657035", "metadata": {"aucs": [0.7765882938266643, 0.8243568710218775, 0.8254051892283129, 0.8453491914666238, 0.7969797973903472, 0.8066691149741904, 0.7694038085428194, 0.8057004252149417, 0.8074359098321042, 0.416117482931324, 0.39979565596447497, 0.4117686117310968, 0.43967257299511653, 0.309201016491197, 0.39693004247198227, 0.363309645263, 0.3987040955688068, 0.46254788041927597, 0.4929591324803436, 0.4274797346830146, 0.5237432093077367, 0.33025220060689886, 0.28151718403319015, 0.32055227417481513, 0.1762378267616148, 0.2467746772273809, 0.1822855015301268, 0.18841757599502484, 0.3110643327439262, 0.34249575855811754, 0.4693609030920708, 0.29315713845985214, 0.47811586297136355, 0.13214733198446993, 0.22123021537955867, 0.49549341280388726, 0.9302895297189708, 0.9028953744152621, 0.9167500970780503, 0.9057621447178014, 0.9006194430608284, 0.9332084418810526, 0.89652626832293, 0.8949245427945623, 0.8849838622200957, 0.4496857065665224, 0.4148989354449265, 0.4005082178925833, 0.5088276492448937, 0.4556779579787331, 0.5054035343535082, 0.4131295832594749, 0.4709980786533894, 0.5044368698197303, 0.208717723915833, 0.12748416645848737, 0.13981554615593395, 0.27870581867476185, 0.23517640773701698, 0.19442178331365922, 0.22174398496793624, 0.15118104659812925, 0.15904680331564958, 0.18294309776865514, 0.22628432926488862, 0.1878499226538627, 0.19735694554898042, 0.1865297475214842, 0.213974722263787, 0.20442626327730762, 0.28025631182761934, 0.24734224139470817, 0.1775954412244226, 0.11175136765787663, 0.1813205407926003, 0.1793427828487807, 0.15062929625750765, 0.22764037336437504, 0.2044711106723648, 0.18042916679348509, 0.25121360571027496, 9.999999999998899e-05, 9.999999999998899e-05, 0.004243899651041105, 0.01424030193240955, 9.999999999998899e-05, 9.999999999998899e-05, 0.025506414805956723, 9.999999999998899e-05, 9.999999999998899e-05, 0.06810023338537319, 0.03157372662137481, 0.06805889719731806, 0.0634902417765637, 0.027803266897662993, 0.009583574806745543, 0.15678582708459254, 0.07038501041287071, 0.11910115901058194, 0.1671439149330587, 0.06782909423696981, 0.11108198773078826, 0.07666082561224663, 0.07682108546585809, 0.10517283363132823, 0.08773228099343267, 0.14917483194303893, 0.13428525574038153, 0.08294570137962731, 0.11533685094911361, 0.15309175248560403, 0.09119246166888206, 0.044162803879114976, 0.022312248220477504, 0.08980622216966694, 0.18543801083494993, 0.1377555356806257, 0.4631307876036952, 0.4708990919795437, 0.48893104354439354, 0.5131882347682228, 0.5126887142985609, 0.5202854850270517, 0.5093673211847507, 0.49782059126092126, 0.516490219003638, 0.09406061726081394, 0.09454336716589007, 0.06392400651963404, 0.11308183399755323, 0.12639869793367886, 0.09848128835646508, 0.08652320075934894, 0.0855620326863833, 0.09707825493483646, 0.15489851382837005, 0.1543035080685755, 0.18549011760891643, 0.209682873967463, 0.21015216196834596, 0.1526069131286687, 0.21234289917022164, 0.1347655209550277, 0.15658083107630683, 0.17487280570636998, 0.1919112758955711, 0.1763315340483247, 0.1903785039347028, 0.20731355722158018, 0.29012440808872875, 0.23059304482764353, 0.24174176484193532, 0.17484068243162143, 0.09205759419712978, 0.15562172900780902, 0.10648366153287225, 0.153776235163694, 0.13379466123249095, 0.14019844462295206, 0.1266948203944951, 0.19813764037227666, 0.2096141207159149, 0.25260493289047825, 0.20692956114397643, 0.25499359802615906, 0.21084577152994965, 0.2116714433339294, 0.19173881015338468, 0.20117138005517488, 0.21214584275236148, 0.25957853556284305, 0.2537920689474782, 0.2569069639981758, 0.2102896929047421, 0.19807021774919542, 0.1899972470043002, 0.19985847506813148, 0.19349364749233577, 0.20295017181587083, 0.20182032798730487, 0.732410470762873, 0.8597354039564482, 0.1591781070748679, 0.9053200138579148, 0.9449758467322794, 0.19530688800108742, 0.17090210315549414, 0.1586008237591393, 0.16489379932627757, 0.5436497240178948, 0.5392092166732172, 0.39775297526574127, 0.16873028287854197, 0.2098511545591185, 0.213285720682872, 0.10443358988269846, 0.21116397037570445, 0.09421251894185967, 0.22142062516530991, 0.1890044193028252, 0.2028516914834393, 0.23151480628701537, 0.19974300630755948, 0.21767970443765206, 0.24781002633572502, 0.248338519110455, 0.23222975247301803, 0.0849378101833903, 0.07736208966054414, 0.10204819758100547, 0.08733788813773513, 0.11073054888327749, 0.09763238156855225, 0.10125490375348312, 0.08080991302619955, 0.09374613778867147]}, "mutation_prompt": null}
{"id": "b0c604a5-6d4d-4209-af40-ec33ead32125", "solution": "import numpy as np\n\nclass EnhancedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory_size = 10\n        self.harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n        self.harmony_memory_values = np.array([np.inf] * self.harmony_memory_size)\n        self.harmony_memory_rate = 0.9\n        self.pitch_adjustment_rate = 0.3\n        self.dynamic_bandwidth = 0.1\n\n    def __call__(self, func):\n        evaluations = 0\n        for i in range(min(self.harmony_memory_size, self.budget)):\n            self.harmony_memory_values[i] = func(self.harmony_memory[i])\n            evaluations += 1\n\n        while evaluations < self.budget:\n            new_harmony = self._generate_harmony()\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            new_value = func(new_harmony)\n            evaluations += 1\n\n            worst_idx = np.argmax(self.harmony_memory_values)\n            if new_value < self.harmony_memory_values[worst_idx]:\n                self.harmony_memory[worst_idx] = new_harmony\n                self.harmony_memory_values[worst_idx] = new_value\n\n            self._update_parameters(evaluations)\n\n        return self.harmony_memory[np.argmin(self.harmony_memory_values)]\n\n    def _generate_harmony(self):\n        rand_values = np.random.rand(self.dim)\n        harmony = np.where(rand_values < self.harmony_memory_rate,\n                           self.harmony_memory[np.random.randint(self.harmony_memory_size), np.arange(self.dim)],\n                           np.random.uniform(self.lower_bound, self.upper_bound, self.dim))\n        pitch_adjustment_mask = np.random.rand(self.dim) < self.pitch_adjustment_rate\n        harmony += pitch_adjustment_mask * ((np.random.rand(self.dim) - 0.5) * self.dynamic_bandwidth)\n        return harmony\n\n    def _update_parameters(self, evaluations):\n        progress_ratio = evaluations / self.budget\n        self.harmony_memory_rate = 0.9 * (1 - 0.3 * np.cos(progress_ratio * np.pi))\n        self.dynamic_bandwidth = 0.1 * np.exp(-progress_ratio)", "name": "EnhancedHarmonySearch", "description": "Enhanced Harmony Search with dynamic parameter adaptation and efficient evaluation handling for improved optimization.", "configspace": "", "generation": 94, "fitness": 0.24995218896299054, "feedback": "The algorithm EnhancedHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.18.", "error": "", "parent_id": "b0b6c457-269d-42a9-b460-7871a4657035", "metadata": {"aucs": [0.6631596137244039, 0.6770097196036464, 0.663091081907583, 0.6841965900976092, 0.6771500685073113, 0.6751828493421402, 0.693952780403055, 0.687344436557259, 0.6399346411502516, 0.3023208795190341, 0.35141876232175684, 0.2659682208578541, 0.3887814692890339, 0.3203235732155667, 0.2649702223997954, 0.33977364362984597, 0.32217958466699625, 0.3043201345168418, 0.17336544696985745, 0.18270408346342515, 0.17192605667863847, 0.3894918967460125, 0.1744264850054389, 0.3486366432355247, 0.36720075738583025, 0.40189179276102927, 0.3760292016441448, 0.15595601393300274, 0.15182433395965655, 0.17269358879824726, 0.1442538296155098, 0.17728791143067013, 0.1752519578221361, 0.16793357767781436, 0.16296971942142668, 0.15289493855829916, 0.7272763997217311, 0.7676400492660583, 0.7168001499598433, 0.756522837624884, 0.7720514922386456, 0.6957212926101468, 0.7109245233346235, 0.7103982128407791, 0.8129073054382137, 0.3865036736850057, 0.2924504826656539, 0.3425361767479046, 0.40610056339155975, 0.40916309106186555, 0.4030420057854217, 0.32953296376962293, 0.3651195659418929, 0.3930036189838785, 0.14598792212081713, 0.18323701623158628, 0.1630390569143303, 0.17870988120263187, 0.2508716591106287, 0.21334688869613294, 0.17722797164021886, 0.16262909332888054, 0.22479824714315766, 0.18551203190294774, 0.12437332184062366, 0.15704156272287184, 0.23564923647130975, 0.21419733128551477, 0.17763615286776135, 0.1951796106858822, 0.17682662658543302, 0.15891290465782681, 0.2541797224786746, 0.1866028439831543, 0.16047693664722906, 0.23277057645841626, 0.1595914437616588, 0.13466258722853452, 0.1698450798763097, 0.18286149979300093, 0.12495054215518886, 0.05708511946757533, 9.999999999998899e-05, 0.00011517109060421582, 9.999999999998899e-05, 0.007437113159580622, 9.999999999998899e-05, 9.999999999998899e-05, 0.07197293614317513, 0.07875046361180016, 0.10488898888010167, 0.05767942373658985, 0.0658383706888197, 0.0656494862497553, 0.042619786325496345, 0.02002137694357864, 0.11808558458634777, 0.11555870286656933, 0.070581020452395, 0.07452350461632029, 0.1527207419115637, 0.12133746675292911, 0.06972834080880219, 0.10131749770625698, 0.0900945529849616, 0.05969487619570302, 0.10606111234294113, 0.08093239715128331, 0.09073786687235319, 0.1564358859438546, 0.14981602637032154, 0.2082197369641159, 0.044503206206095824, 0.2130657344661966, 0.08693051559802678, 0.1632063146877264, 0.17632210681358396, 0.4644413067224571, 0.4318604993193754, 0.4417300502473307, 0.47183063622102384, 0.4628938770368326, 0.43821713698602505, 0.456618445731653, 0.527307124326374, 0.5055601453027236, 0.09289285469574227, 0.09279451512132897, 0.0929516100650013, 0.08635609144853351, 0.07565725518866273, 0.07666719288879409, 0.08194773144000866, 0.1116725628640517, 0.14845447730213623, 0.37667501410465143, 0.18729222298208636, 0.16386671651323415, 0.16602042978085885, 0.19885001300794736, 0.17943694267190602, 0.16715833542679337, 0.2082362110164554, 0.25392861624685636, 0.24603110934922778, 0.18568055091574953, 0.2159903003875907, 0.24001107935657384, 0.23365787635580815, 0.25453684878542326, 0.22948702028899803, 0.22061314885698668, 0.2505930305015768, 0.10455052904225215, 0.1630320738850649, 0.2227947709348188, 0.23455012043807077, 0.15480834927800646, 0.13872788500319944, 0.1910329059603657, 0.16857355776779914, 0.25694789013107744, 0.21612227804091322, 0.1806303190211609, 0.1951045072632489, 0.2655218470492853, 0.2092841391809045, 0.19932712052902324, 0.2268781279164762, 0.24112070452854606, 0.22413603544018057, 0.2212687112614926, 0.22109506893891917, 0.18941694550288668, 0.20533460724399477, 0.2508928248812159, 0.19458802775558592, 0.19946655635222355, 0.24727046135292385, 0.2355829100946054, 0.1676296078414291, 0.6639758510489107, 0.6411675840750917, 0.7703939754710412, 0.19990808428635187, 0.15357131244126498, 0.17721592828205557, 0.1576024618954429, 0.16729393141499316, 0.20496179447656782, 0.20543661707759064, 0.43513666995609157, 0.3723175274399747, 0.2076592774396101, 0.2008486280079924, 0.15489416373825282, 0.4921927550458879, 0.16300971985998236, 0.24251747985551286, 0.24238431076507538, 0.20446815728141166, 0.26032322764145754, 0.2248067324318206, 0.2070826849667895, 0.22288973697200387, 0.1889176777335424, 0.2184675693876923, 0.09182283903368171, 0.10511120755408943, 0.09256315152196981, 0.15079147254395797, 0.09381121127177361, 0.10032718715799016, 0.11387478933142303, 0.11079878196532722, 0.06856036627035444]}, "mutation_prompt": null}
{"id": "ea349783-8a8e-4f93-bbf3-77e5f082d962", "solution": "import numpy as np\n\nclass EnhancedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory_size = 8  # Slightly reduced size for faster adaptation\n        self.harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n        self.harmony_memory_values = np.full(self.harmony_memory_size, np.inf)\n        self.harmony_memory_rate = 0.9  # Increased for intensified exploitation\n        self.pitch_adjustment_rate = 0.3  # Balanced for exploration\n        self.bandwidth_reduction = 0.07  # Finely tuned for bandwidth control\n\n    def __call__(self, func):\n        evaluations = 0\n        initial_evals = min(self.harmony_memory_size, self.budget)\n        for i in range(initial_evals):\n            self.harmony_memory_values[i] = func(self.harmony_memory[i])\n            evaluations += 1\n\n        while evaluations < self.budget:\n            new_harmony = self._generate_harmony()\n            new_value = func(new_harmony)\n            evaluations += 1\n\n            if new_value < np.max(self.harmony_memory_values):\n                max_index = np.argmax(self.harmony_memory_values)\n                self.harmony_memory[max_index] = new_harmony\n                self.harmony_memory_values[max_index] = new_value\n\n            self._update_parameters(evaluations)\n\n        return self.harmony_memory[np.argmin(self.harmony_memory_values)]\n\n    def _generate_harmony(self):\n        harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.harmony_memory_rate:\n                selected_harmony = np.random.randint(self.harmony_memory_size)\n                harmony[i] = self.harmony_memory[selected_harmony, i]\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    harmony[i] += (np.random.rand() - 0.5) * self.bandwidth_reduction\n            else:\n                harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        harmony = np.clip(harmony, self.lower_bound, self.upper_bound)  # Combined clipping for efficiency\n        return harmony\n\n    def _update_parameters(self, evaluations):\n        progress_ratio = evaluations / self.budget\n        self.harmony_memory_rate = 0.85 + 0.1 * np.sin(progress_ratio * np.pi)  # Dynamic rate adjustment\n        self.bandwidth_reduction *= (1 - 0.1 * progress_ratio)  # Progressive reduction", "name": "EnhancedHarmonySearch", "description": "Enhanced Harmony Search with dynamic memory adaptation and refined exploration-exploitation balance for improved convergence speed and accuracy.", "configspace": "", "generation": 95, "fitness": 0.17395703947224528, "feedback": "The algorithm EnhancedHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.11.", "error": "", "parent_id": "b0b6c457-269d-42a9-b460-7871a4657035", "metadata": {"aucs": [0.5274112473210701, 0.4490775897401399, 0.47104216169560886, 0.47755940425534926, 0.4768876259299043, 0.5158518630804431, 0.44883803108325226, 0.4168224381579375, 0.44455185079389425, 0.2668137223315086, 0.0913333714395883, 0.05643198264983873, 0.0969094715647405, 0.1112720863425185, 0.12738123071008445, 9.999999999998899e-05, 0.2476577543728128, 0.12234238053993451, 0.26036692905260694, 0.22630119259443304, 0.20653006902241977, 0.26204674058528876, 0.19332435404658932, 0.2604106502847361, 0.19662307498307663, 0.2014932696743168, 0.20445224891337244, 0.21595589569689, 0.1942134980411343, 0.17775735665096692, 0.18930838517712834, 0.18110408942804335, 0.19078000153379204, 0.1713711848021423, 0.17243924066981087, 0.17076053668799596, 0.2572068186396347, 0.21111966386664738, 0.24319563844361558, 0.30727760968607054, 0.22407655793245362, 0.24064013597450484, 0.2364115027791599, 0.21802049392022005, 0.2690310367222246, 0.19740884953884297, 0.20051767883358684, 0.12878440206950037, 0.19829458533394306, 0.14691131849806005, 0.23058958128684304, 0.15534338904537237, 0.12501579069778168, 0.1709453307095009, 0.14348356327926193, 0.12600576966724297, 0.1402766382871632, 0.20338580253327376, 0.1394772702790089, 0.14675606349234205, 0.13632499537968068, 0.17469133794468084, 0.11004453267645387, 0.31343715827142926, 0.15329634177785922, 0.15322888099487242, 0.10635592250326298, 0.07958498149535176, 0.28392869630256, 0.1242251458294682, 0.1602748347476428, 0.13517918464225753, 0.18255145080578528, 0.10017747965707491, 0.14407821352671457, 0.13302931391088746, 0.18874810908079975, 0.19228844943078616, 0.12587151281982856, 0.1366884499194626, 0.3639283684239395, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03784090537872631, 0.0372869396049742, 0.08287461720994327, 0.056599059480242575, 0.10805033085795834, 0.037280083273307674, 0.06547829294139906, 0.04078815990902063, 0.06602381431848192, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08671394964978185, 9.999999999998899e-05, 0.00016025210321990446, 9.999999999998899e-05, 0.25210631651737025, 9.999999999998899e-05, 0.035053941385937315, 0.02028446364716252, 0.06587946757837582, 0.06524920475009766, 0.08971302577513873, 0.07785792484041976, 0.07429213258335188, 0.07742825791193042, 0.09697173727729913, 0.3665167557043635, 0.3441437043875605, 0.38593381760839074, 0.34659943122400105, 0.4557915324947157, 0.36031933382514014, 0.3467765736295695, 0.37909754941352847, 0.41261935863919186, 0.1356641301169681, 0.0499874345093142, 0.1250794009413848, 0.07641565325624755, 0.08342374804923025, 0.10462517105877245, 0.061551320100910245, 0.059845178680966504, 0.07199881521110019, 0.18340680386486163, 0.16323498144923176, 0.12569470429735863, 0.14674613992048413, 0.11454591871382258, 0.13035097807622753, 0.13539723729930553, 0.1996737802786681, 0.23563324587239654, 0.16880945591517427, 0.21478165073969213, 0.19104250793239486, 0.24772351147193616, 0.18513192112821975, 0.21779197035594533, 0.15703415209223326, 0.16763188991720235, 0.2187371883549486, 0.10156491728133954, 0.13795402924047162, 0.1476121521823015, 0.16253416186221004, 0.13847313365688008, 0.13324443593602686, 0.14153699370055361, 0.11164993805615453, 0.2072435564288757, 0.20036521682155728, 0.22526776699694928, 0.17960971115247848, 0.2175982958481184, 0.22440180188897207, 0.179942947715662, 0.24733434772792284, 0.21801017139209433, 0.2220187674616373, 0.20614675772684632, 0.193621011094685, 0.17597789132121866, 0.23792597975071617, 0.22034317257652525, 0.1942220295058119, 0.19421674060716043, 0.21004224729172438, 0.21650671178801106, 0.15964693361327786, 0.4374272700113564, 0.18812954720119401, 0.17876673464439552, 0.4678525594495886, 0.37471719387835833, 0.14264676759639838, 0.1594702810495755, 0.15067688778260202, 0.3335800440591431, 0.1496733136614452, 0.21223029123826875, 0.1236498980879247, 0.15094628861836012, 0.21040434157609278, 0.11253383607131162, 0.15963193431574163, 0.1923490727181475, 0.1914837050690622, 0.17879774575647478, 0.23522298286250032, 0.21298865468072026, 0.19366431001229134, 0.20996527712602275, 0.17650582140569482, 0.26108201656291763, 0.20024088270715523, 0.10013630080885327, 0.09520713125676117, 0.06349583050107921, 0.0906997022686522, 0.09939602753102916, 0.09746892191920165, 0.0811113254961241, 0.060869981471579515, 0.049864220946750026]}, "mutation_prompt": null}
{"id": "4f7c2308-90e1-4732-95a3-2f62ae746bae", "solution": "import numpy as np\n\nclass AdaptiveDifferentialHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound, self.upper_bound = -5.0, 5.0\n        self.harmony_memory_size = 8  # Reduced for quicker convergence\n        self.harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n        self.harmony_memory_values = np.full(self.harmony_memory_size, np.inf)\n        self.harmony_memory_rate = 0.8\n        self.mutation_factor = 0.5  # New component for differential mutation\n        self.bandwidth_reduction = 0.1\n\n    def __call__(self, func):\n        evaluations = 0\n        initial_evals = min(self.harmony_memory_size, self.budget)\n        for i in range(initial_evals):\n            self.harmony_memory_values[i] = func(self.harmony_memory[i])\n            evaluations += 1\n\n        while evaluations < self.budget:\n            new_harmony = self._generate_harmony()\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            new_value = func(new_harmony)\n            evaluations += 1\n\n            if new_value < np.max(self.harmony_memory_values):\n                max_index = np.argmax(self.harmony_memory_values)\n                self.harmony_memory[max_index] = new_harmony\n                self.harmony_memory_values[max_index] = new_value\n\n            self._adaptive_memory_adjustment(evaluations)\n\n        return self.harmony_memory[np.argmin(self.harmony_memory_values)]\n\n    def _generate_harmony(self):\n        harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.harmony_memory_rate:\n                selected_harmony = np.random.randint(self.harmony_memory_size)\n                harmony[i] = self.harmony_memory[selected_harmony, i]\n            else:\n                indices = np.random.choice(self.harmony_memory_size, 3, replace=False)\n                harmony[i] = self.harmony_memory[indices[0], i] + self.mutation_factor * (self.harmony_memory[indices[1], i] - self.harmony_memory[indices[2], i])\n        return harmony\n\n    def _adaptive_memory_adjustment(self, evaluations):\n        progress_ratio = evaluations / self.budget\n        self.harmony_memory_rate = 0.75 + 0.1 * np.cos(progress_ratio * np.pi)  # Adaptive rate with cosine modulation\n        self.bandwidth_reduction *= 0.95  # Gradual bandwidth reduction", "name": "AdaptiveDifferentialHarmonySearch", "description": "Adaptive Harmony Search with Differential Mutation for enhanced exploration and reduced evaluations.", "configspace": "", "generation": 96, "fitness": 0.05815752365815193, "feedback": "The algorithm AdaptiveDifferentialHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.06 with standard deviation 0.06.", "error": "", "parent_id": "b0b6c457-269d-42a9-b460-7871a4657035", "metadata": {"aucs": [0.16234511279247021, 0.10422417703722298, 0.12328948469362733, 0.06024986718070324, 0.09257671813632151, 0.06982949923787674, 0.07703246448072354, 0.13239518180665455, 0.1505370058905975, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04209750854858885, 0.023076384869422872, 0.05189098170919204, 0.017080155616284953, 0.009692423893164603, 0.02903813040660863, 0.04460329875793523, 0.01853320423385796, 0.03710740350244501, 0.052187248893838856, 9.999999999998899e-05, 0.02978164169082842, 0.05502888543578088, 9.999999999998899e-05, 0.0006799018528561573, 0.02345553717072124, 9.999999999998899e-05, 9.999999999998899e-05, 0.07003445633865846, 0.07880405121017098, 0.04824224745932226, 0.06101625912369235, 0.06832730179901314, 0.0569632918682792, 0.06331947890405809, 0.07690021088544907, 0.05376486536231695, 0.05314690662235111, 9.999999999998899e-05, 0.028592913411192744, 0.012167497808003969, 0.01681534049918243, 0.015176857864927062, 0.03016800395777497, 0.011293333694524565, 9.999999999998899e-05, 0.12555615810473608, 0.10019839781486461, 0.11614381921498695, 0.1343493703735188, 0.039129721962635644, 0.002285155242124026, 0.039400674275322456, 0.0075542185110151205, 0.03597919242103598, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00771495058768068, 9.999999999998899e-05, 9.999999999998899e-05, 0.007447930730862917, 9.999999999998899e-05, 9.999999999998899e-05, 0.06839054453373627, 0.0164464631128749, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003025383883587196, 0.015501869169188276, 0.03928874801927962, 0.06254488569351702, 9.999999999998899e-05, 0.010057343694061638, 0.09569672752553726, 9.999999999998899e-05, 0.040821688531569644, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13484740543528628, 0.13418084190313817, 0.18148688023102644, 0.11343256134019497, 0.18969649202324357, 0.10936361144032036, 0.14635268444863692, 0.1419377818270957, 0.1511005018939663, 0.044843469013603365, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05988641278080453, 0.04240203808068532, 0.03833514174963004, 0.02319584593312396, 0.03504878169532444, 0.08280223776868167, 0.11106013250139912, 0.08641761251200519, 0.10861970170983637, 0.08077377828457033, 0.08605433961265951, 0.07054964461872149, 0.06885147970615557, 0.0897783279601706, 0.12065590588702213, 0.10975782001389012, 0.14997091214086578, 0.18225961878220787, 0.15581294286070446, 0.17647832075957592, 0.1363306342556787, 0.14742821231827352, 0.1428768801819309, 0.07702108764457294, 0.07038277113226232, 0.05671083280010625, 0.09576632294379561, 0.09409397730227753, 0.12050928596460053, 0.08320111558159238, 0.07247665340143061, 0.05575092760562406, 0.1666100481698808, 0.12795644647905358, 0.14447963982350553, 0.15226324566552685, 0.09125510856493457, 0.12494932731354713, 0.12245976138762271, 0.10254295863365603, 0.16938305804059073, 0.150836607221839, 9.999999999998899e-05, 0.03933368696704942, 9.999999999998899e-05, 9.999999999998899e-05, 0.14834379056985436, 0.16279280353888148, 0.14145927540859027, 9.999999999998899e-05, 0.05250362142075715, 0.10884772601936821, 0.10252676080770562, 0.11354952046558886, 0.14913632126567877, 0.06811399224893122, 0.10196394832611111, 0.11321290562485087, 0.09150648836935615, 0.0617107542049784, 0.07287615651396295, 0.04696135488022779, 0.06012284139115143, 0.06736724597041432, 0.05021670879328344, 0.038704728184728476, 0.08617209335986553, 0.0801741225149124, 0.13616378262626982, 0.13709794337078107, 0.15709917164972975, 0.14837572187837034, 0.13569614412974573, 0.15714130920117464, 0.15908959080486862, 0.17989547576694875, 0.17692810933789205, 0.03186647382207375, 0.04013832850044585, 0.04417814388781571, 0.026574791381926532, 0.05272406976171773, 0.04740511995965191, 0.03948030944657899, 0.028081783339975797, 0.04975538905297838]}, "mutation_prompt": null}
{"id": "8b995968-bbe1-461d-b889-a1c0f7fc12d9", "solution": "import numpy as np\n\nclass OptimizedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory_size = 10  # Reduced size for faster updates\n        self.harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n        self.harmony_memory_values = np.full(self.harmony_memory_size, np.inf)\n        self.harmony_memory_rate = 0.85  # Adjusted for balanced exploration-exploitation\n        self.pitch_adjustment_rate = 0.35  # Slightly reduced for stability\n        self.bandwidth_reduction = 0.08  # Optimized bandwidth adjustment\n\n    def __call__(self, func):\n        evaluations = 0\n        initial_evals = min(self.harmony_memory_size, self.budget)\n        for i in range(initial_evals):\n            self.harmony_memory_values[i] = func(self.harmony_memory[i])\n            evaluations += 1\n\n        while evaluations < self.budget:\n            new_harmony = self._generate_harmony()\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            new_value = func(new_harmony)\n            evaluations += 1\n\n            if new_value < np.max(self.harmony_memory_values):\n                max_index = np.argmax(self.harmony_memory_values)\n                self.harmony_memory[max_index] = new_harmony\n                self.harmony_memory_values[max_index] = new_value\n\n            self._adaptive_memory_adjustment(evaluations)\n\n        return self.harmony_memory[np.argmin(self.harmony_memory_values)]\n\n    def _generate_harmony(self):\n        harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.harmony_memory_rate:\n                selected_harmony = np.random.randint(self.harmony_memory_size)\n                harmony[i] = self.harmony_memory[selected_harmony, i]\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    harmony[i] += (np.random.rand() - 0.5) * self.bandwidth_reduction\n            else:\n                harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return harmony\n\n    def _adaptive_memory_adjustment(self, evaluations):\n        progress_ratio = evaluations / self.budget\n        self.harmony_memory_rate = 0.8 + 0.15 * np.sin(progress_ratio * np.pi)  # Adaptive rate change\n        self.bandwidth_reduction = 0.1 * (1 - progress_ratio)  # Dynamic bandwidth reduction", "name": "OptimizedHarmonySearch", "description": "Optimized Harmony Search with adaptive memory and reduced dimensional search to enhance convergence speed and solution accuracy.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b0b6c457-269d-42a9-b460-7871a4657035", "metadata": {"aucs": [0.7765882938266643, 0.8243568710218775, 0.8254051892283129, 0.8453491914666238, 0.7969797973903472, 0.8066691149741904, 0.7694038085428194, 0.8057004252149417, 0.8074359098321042, 0.416117482931324, 0.39979565596447497, 0.4117686117310968, 0.43967257299511653, 0.309201016491197, 0.39693004247198227, 0.363309645263, 0.3987040955688068, 0.46254788041927597, 0.4929591324803436, 0.4274797346830146, 0.5237432093077367, 0.33025220060689886, 0.28151718403319015, 0.32055227417481513, 0.1762378267616148, 0.2467746772273809, 0.1822855015301268, 0.18841757599502484, 0.3110643327439262, 0.34249575855811754, 0.4693609030920708, 0.29315713845985214, 0.47811586297136355, 0.13214733198446993, 0.22123021537955867, 0.49549341280388726, 0.9302895297189708, 0.9028953744152621, 0.9167500970780503, 0.9057621447178014, 0.9006194430608284, 0.9332084418810526, 0.89652626832293, 0.8949245427945623, 0.8849838622200957, 0.4496857065665224, 0.4148989354449265, 0.4005082178925833, 0.5088276492448937, 0.4556779579787331, 0.5054035343535082, 0.4131295832594749, 0.4709980786533894, 0.5044368698197303, 0.208717723915833, 0.12748416645848737, 0.13981554615593395, 0.27870581867476185, 0.23517640773701698, 0.19442178331365922, 0.22174398496793624, 0.15118104659812925, 0.15904680331564958, 0.18294309776865514, 0.22628432926488862, 0.1878499226538627, 0.19735694554898042, 0.1865297475214842, 0.213974722263787, 0.20442626327730762, 0.28025631182761934, 0.24734224139470817, 0.1775954412244226, 0.11175136765787663, 0.1813205407926003, 0.1793427828487807, 0.15062929625750765, 0.22764037336437504, 0.2044711106723648, 0.18042916679348509, 0.25121360571027496, 9.999999999998899e-05, 9.999999999998899e-05, 0.004243899651041105, 0.01424030193240955, 9.999999999998899e-05, 9.999999999998899e-05, 0.025506414805956723, 9.999999999998899e-05, 9.999999999998899e-05, 0.06810023338537319, 0.03157372662137481, 0.06805889719731806, 0.0634902417765637, 0.027803266897662993, 0.009583574806745543, 0.15678582708459254, 0.07038501041287071, 0.11910115901058194, 0.1671439149330587, 0.06782909423696981, 0.11108198773078826, 0.07666082561224663, 0.07682108546585809, 0.10517283363132823, 0.08773228099343267, 0.14917483194303893, 0.13428525574038153, 0.08294570137962731, 0.11533685094911361, 0.15309175248560403, 0.09119246166888206, 0.044162803879114976, 0.022312248220477504, 0.08980622216966694, 0.18543801083494993, 0.1377555356806257, 0.4631307876036952, 0.4708990919795437, 0.48893104354439354, 0.5131882347682228, 0.5126887142985609, 0.5202854850270517, 0.5093673211847507, 0.49782059126092126, 0.516490219003638, 0.09406061726081394, 0.09454336716589007, 0.06392400651963404, 0.11308183399755323, 0.12639869793367886, 0.09848128835646508, 0.08652320075934894, 0.0855620326863833, 0.09707825493483646, 0.15489851382837005, 0.1543035080685755, 0.18549011760891643, 0.209682873967463, 0.21015216196834596, 0.1526069131286687, 0.21234289917022164, 0.1347655209550277, 0.15658083107630683, 0.17487280570636998, 0.1919112758955711, 0.1763315340483247, 0.1903785039347028, 0.20731355722158018, 0.29012440808872875, 0.23059304482764353, 0.24174176484193532, 0.17484068243162143, 0.09205759419712978, 0.15562172900780902, 0.10648366153287225, 0.153776235163694, 0.13379466123249095, 0.14019844462295206, 0.1266948203944951, 0.19813764037227666, 0.2096141207159149, 0.25260493289047825, 0.20692956114397643, 0.25499359802615906, 0.21084577152994965, 0.2116714433339294, 0.19173881015338468, 0.20117138005517488, 0.21214584275236148, 0.25957853556284305, 0.2537920689474782, 0.2569069639981758, 0.2102896929047421, 0.19807021774919542, 0.1899972470043002, 0.19985847506813148, 0.19349364749233577, 0.20295017181587083, 0.20182032798730487, 0.732410470762873, 0.8597354039564482, 0.1591781070748679, 0.9053200138579148, 0.9449758467322794, 0.19530688800108742, 0.17090210315549414, 0.1586008237591393, 0.16489379932627757, 0.5436497240178948, 0.5392092166732172, 0.39775297526574127, 0.16873028287854197, 0.2098511545591185, 0.213285720682872, 0.10443358988269846, 0.21116397037570445, 0.09421251894185967, 0.22142062516530991, 0.1890044193028252, 0.2028516914834393, 0.23151480628701537, 0.19974300630755948, 0.21767970443765206, 0.24781002633572502, 0.248338519110455, 0.23222975247301803, 0.0849378101833903, 0.07736208966054414, 0.10204819758100547, 0.08733788813773513, 0.11073054888327749, 0.09763238156855225, 0.10125490375348312, 0.08080991302619955, 0.09374613778867147]}, "mutation_prompt": null}
{"id": "849d7388-1685-4934-836e-67472b6822e7", "solution": "import numpy as np\n\nclass OptimizedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory_size = 10  # Reduced size for faster updates\n        self.harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n        self.harmony_memory_values = np.full(self.harmony_memory_size, np.inf)\n        self.harmony_memory_rate = 0.85  # Adjusted for balanced exploration-exploitation\n        self.pitch_adjustment_rate = 0.35  # Slightly reduced for stability\n        self.bandwidth_reduction = 0.08  # Optimized bandwidth adjustment\n\n    def __call__(self, func):\n        evaluations = 0\n        initial_evals = min(self.harmony_memory_size, self.budget)\n        for i in range(initial_evals):\n            self.harmony_memory_values[i] = func(self.harmony_memory[i])\n            evaluations += 1\n\n        while evaluations < self.budget:\n            new_harmony = self._generate_harmony()\n            new_harmony = np.clip(new_harmony, self.lower_bound, self.upper_bound)\n            new_value = func(new_harmony)\n            evaluations += 1\n\n            if new_value < np.max(self.harmony_memory_values):\n                max_index = np.argmax(self.harmony_memory_values)\n                self.harmony_memory[max_index] = new_harmony\n                self.harmony_memory_values[max_index] = new_value\n\n            self._adaptive_memory_adjustment(evaluations)\n\n        return self.harmony_memory[np.argmin(self.harmony_memory_values)]\n\n    def _generate_harmony(self):\n        harmony = np.empty(self.dim)\n        for i in range(self.dim):\n            if np.random.rand() < self.harmony_memory_rate:\n                selected_harmony = np.random.randint(self.harmony_memory_size)\n                harmony[i] = self.harmony_memory[selected_harmony, i]\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    harmony[i] += (np.random.rand() - 0.5) * self.bandwidth_reduction\n            else:\n                harmony[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n        return harmony\n\n    def _adaptive_memory_adjustment(self, evaluations):\n        progress_ratio = evaluations / self.budget\n        self.harmony_memory_rate = 0.8 + 0.15 * np.sin(progress_ratio * np.pi)  # Adaptive rate change\n        self.bandwidth_reduction = 0.1 * (1 - progress_ratio)  # Dynamic bandwidth reduction", "name": "OptimizedHarmonySearch", "description": "Optimized Harmony Search with adaptive memory and reduced dimensional search to enhance convergence speed and solution accuracy.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b0b6c457-269d-42a9-b460-7871a4657035", "metadata": {"aucs": [0.7765882938266643, 0.8243568710218775, 0.8254051892283129, 0.8453491914666238, 0.7969797973903472, 0.8066691149741904, 0.7694038085428194, 0.8057004252149417, 0.8074359098321042, 0.416117482931324, 0.39979565596447497, 0.4117686117310968, 0.43967257299511653, 0.309201016491197, 0.39693004247198227, 0.363309645263, 0.3987040955688068, 0.46254788041927597, 0.4929591324803436, 0.4274797346830146, 0.5237432093077367, 0.33025220060689886, 0.28151718403319015, 0.32055227417481513, 0.1762378267616148, 0.2467746772273809, 0.1822855015301268, 0.18841757599502484, 0.3110643327439262, 0.34249575855811754, 0.4693609030920708, 0.29315713845985214, 0.47811586297136355, 0.13214733198446993, 0.22123021537955867, 0.49549341280388726, 0.9302895297189708, 0.9028953744152621, 0.9167500970780503, 0.9057621447178014, 0.9006194430608284, 0.9332084418810526, 0.89652626832293, 0.8949245427945623, 0.8849838622200957, 0.4496857065665224, 0.4148989354449265, 0.4005082178925833, 0.5088276492448937, 0.4556779579787331, 0.5054035343535082, 0.4131295832594749, 0.4709980786533894, 0.5044368698197303, 0.208717723915833, 0.12748416645848737, 0.13981554615593395, 0.27870581867476185, 0.23517640773701698, 0.19442178331365922, 0.22174398496793624, 0.15118104659812925, 0.15904680331564958, 0.18294309776865514, 0.22628432926488862, 0.1878499226538627, 0.19735694554898042, 0.1865297475214842, 0.213974722263787, 0.20442626327730762, 0.28025631182761934, 0.24734224139470817, 0.1775954412244226, 0.11175136765787663, 0.1813205407926003, 0.1793427828487807, 0.15062929625750765, 0.22764037336437504, 0.2044711106723648, 0.18042916679348509, 0.25121360571027496, 9.999999999998899e-05, 9.999999999998899e-05, 0.004243899651041105, 0.01424030193240955, 9.999999999998899e-05, 9.999999999998899e-05, 0.025506414805956723, 9.999999999998899e-05, 9.999999999998899e-05, 0.06810023338537319, 0.03157372662137481, 0.06805889719731806, 0.0634902417765637, 0.027803266897662993, 0.009583574806745543, 0.15678582708459254, 0.07038501041287071, 0.11910115901058194, 0.1671439149330587, 0.06782909423696981, 0.11108198773078826, 0.07666082561224663, 0.07682108546585809, 0.10517283363132823, 0.08773228099343267, 0.14917483194303893, 0.13428525574038153, 0.08294570137962731, 0.11533685094911361, 0.15309175248560403, 0.09119246166888206, 0.044162803879114976, 0.022312248220477504, 0.08980622216966694, 0.18543801083494993, 0.1377555356806257, 0.4631307876036952, 0.4708990919795437, 0.48893104354439354, 0.5131882347682228, 0.5126887142985609, 0.5202854850270517, 0.5093673211847507, 0.49782059126092126, 0.516490219003638, 0.09406061726081394, 0.09454336716589007, 0.06392400651963404, 0.11308183399755323, 0.12639869793367886, 0.09848128835646508, 0.08652320075934894, 0.0855620326863833, 0.09707825493483646, 0.15489851382837005, 0.1543035080685755, 0.18549011760891643, 0.209682873967463, 0.21015216196834596, 0.1526069131286687, 0.21234289917022164, 0.1347655209550277, 0.15658083107630683, 0.17487280570636998, 0.1919112758955711, 0.1763315340483247, 0.1903785039347028, 0.20731355722158018, 0.29012440808872875, 0.23059304482764353, 0.24174176484193532, 0.17484068243162143, 0.09205759419712978, 0.15562172900780902, 0.10648366153287225, 0.153776235163694, 0.13379466123249095, 0.14019844462295206, 0.1266948203944951, 0.19813764037227666, 0.2096141207159149, 0.25260493289047825, 0.20692956114397643, 0.25499359802615906, 0.21084577152994965, 0.2116714433339294, 0.19173881015338468, 0.20117138005517488, 0.21214584275236148, 0.25957853556284305, 0.2537920689474782, 0.2569069639981758, 0.2102896929047421, 0.19807021774919542, 0.1899972470043002, 0.19985847506813148, 0.19349364749233577, 0.20295017181587083, 0.20182032798730487, 0.732410470762873, 0.8597354039564482, 0.1591781070748679, 0.9053200138579148, 0.9449758467322794, 0.19530688800108742, 0.17090210315549414, 0.1586008237591393, 0.16489379932627757, 0.5436497240178948, 0.5392092166732172, 0.39775297526574127, 0.16873028287854197, 0.2098511545591185, 0.213285720682872, 0.10443358988269846, 0.21116397037570445, 0.09421251894185967, 0.22142062516530991, 0.1890044193028252, 0.2028516914834393, 0.23151480628701537, 0.19974300630755948, 0.21767970443765206, 0.24781002633572502, 0.248338519110455, 0.23222975247301803, 0.0849378101833903, 0.07736208966054414, 0.10204819758100547, 0.08733788813773513, 0.11073054888327749, 0.09763238156855225, 0.10125490375348312, 0.08080991302619955, 0.09374613778867147]}, "mutation_prompt": null}
{"id": "36de0916-f8e0-4d57-8cd9-cdf7eb3c988b", "solution": "import numpy as np\n\nclass RefinedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.harmony_memory_size = 8  # Slightly reduced size for faster convergence\n        self.harmony_memory = np.random.uniform(self.lower_bound, self.upper_bound, (self.harmony_memory_size, self.dim))\n        self.harmony_memory_values = np.array([np.inf] * self.harmony_memory_size)\n        self.harmony_memory_rate = 0.75  # Adjusted for improved exploration-exploitation balance\n        self.pitch_adjustment_rate = 0.3  # Fine-tuned for better stability\n        self.bandwidth_reduction = 0.07  # Optimized for better exploitation\n\n    def __call__(self, func):\n        evaluations = 0\n        # Initial evaluations for harmony memory\n        for i in range(min(self.harmony_memory_size, self.budget)):\n            self.harmony_memory_values[i] = func(self.harmony_memory[i])\n            evaluations += 1\n\n        while evaluations < self.budget:\n            new_harmony = self._generate_harmony()\n            new_value = func(new_harmony)\n            evaluations += 1\n\n            # Replace worst harmony if new is better\n            worst_index = np.argmax(self.harmony_memory_values)\n            if new_value < self.harmony_memory_values[worst_index]:\n                self.harmony_memory[worst_index] = new_harmony\n                self.harmony_memory_values[worst_index] = new_value\n\n            self._adaptive_memory_adjustment(evaluations)\n\n        return self.harmony_memory[np.argmin(self.harmony_memory_values)]\n\n    def _generate_harmony(self):\n        harmony = []\n        for i in range(self.dim):\n            if np.random.rand() < self.harmony_memory_rate:\n                selected_harmony = np.random.choice(self.harmony_memory[:, i])\n                if np.random.rand() < self.pitch_adjustment_rate:\n                    selected_harmony += (np.random.rand() - 0.5) * self.bandwidth_reduction\n                harmony.append(selected_harmony)\n            else:\n                harmony.append(np.random.uniform(self.lower_bound, self.upper_bound))\n        return np.clip(harmony, self.lower_bound, self.upper_bound)\n\n    def _adaptive_memory_adjustment(self, evaluations):\n        progress_ratio = evaluations / self.budget\n        self.harmony_memory_rate = 0.75 + 0.2 * np.sin(progress_ratio * np.pi)  # Dynamic rate adjustment\n        self.bandwidth_reduction = 0.1 * (1 - progress_ratio)  # Gradual bandwidth reduction", "name": "RefinedHarmonySearch", "description": "A refined Harmony Search with optimized memory dynamics and strategic exploration-exploitation balancing for enhanced convergence.", "configspace": "", "generation": 99, "fitness": 0.2876168810779644, "feedback": "The algorithm RefinedHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.23.", "error": "", "parent_id": "b0b6c457-269d-42a9-b460-7871a4657035", "metadata": {"aucs": [0.8069590103928332, 0.8055804211418438, 0.8325628345123571, 0.8129907042669854, 0.8102872765645664, 0.8081891963320031, 0.8163789179609751, 0.8147886538632466, 0.7787235198027866, 0.43602934494967827, 0.4492381524076734, 0.46297943969298405, 0.36964773158983166, 0.37883137943637735, 0.3468116412529211, 0.3879268905274045, 0.452893987266037, 0.376113327219463, 0.4061478196437298, 0.23520215405078782, 0.47309034720009335, 0.4882941545576256, 0.24524918539681206, 0.29699454672679404, 0.2529580846171062, 0.4842223033366183, 0.512676850839508, 0.4360495878297447, 0.21699416380765602, 0.3549231661402822, 0.16441523072755082, 0.27141889272286623, 0.18061216671269087, 0.1590512113828585, 0.3832466790288839, 0.2248620178560884, 0.9298113316233206, 0.8818160613431908, 0.8364650434364822, 0.8763642294674663, 0.8810913294319439, 0.9058603944046826, 0.8689811673099643, 0.9008352934776842, 0.8966758588224651, 0.49483266334648135, 0.46833627935121613, 0.40711422687836796, 0.34558347659349276, 0.44125831488818845, 0.46193500635719675, 0.4742637633733475, 0.37763496317776635, 0.444649923043167, 0.1483991959976746, 0.13985809805209537, 0.16347553094808864, 0.27080005155649356, 0.19287364664400863, 0.21606171243236338, 0.1417635856252949, 0.14570738580043197, 0.1686338910635261, 0.22323484010616945, 0.24979653031112836, 0.3200829415177707, 0.13337548386935194, 0.2222089982880251, 0.15972929930463908, 0.1796404330592437, 0.18814493897711349, 0.28381160902020497, 0.37235971742237084, 0.227029785628571, 0.35493113128641884, 0.16924803426791402, 0.19459476400320352, 0.17640315741595192, 0.2086768564163224, 0.17967306218372903, 0.20234805287066526, 9.999999999998899e-05, 9.999999999998899e-05, 0.00666178452715227, 0.024226166340254318, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01289929777899268, 0.010678085952302907, 0.08870169769800507, 0.09060783233663283, 0.04140649752203174, 0.025150777567148896, 0.0764958999817521, 0.03745863203622535, 0.09892595458727738, 0.06773911330159355, 0.16444694417143668, 0.20857829331358024, 0.10820760205421753, 0.23644430067986488, 0.08558113511902099, 0.11194379122249976, 0.2757720737353536, 0.19264589824427436, 0.18332600979224778, 0.12591959562049393, 0.038305264935656336, 0.08870039944074903, 0.06604305689320322, 0.06955439149478371, 0.13924794447833722, 0.09081781747848583, 0.15024845282334176, 0.13676292455938144, 0.5481538061077872, 0.4620348029550505, 0.4631154179497474, 0.4659995429944892, 0.4796853896304468, 0.48541748008985275, 0.5496157666641104, 0.48909714897333834, 0.5059186752897621, 0.09458497983981817, 0.14819920201979708, 0.10669338530022177, 0.09289846561295267, 0.06773653575906302, 0.11935129472608674, 0.1638307826992088, 0.19075407326116534, 0.1187322598372268, 0.14725278876364845, 0.19050594599463144, 0.20680462395436683, 0.33072096871631973, 0.18779371583264415, 0.18167319427551443, 0.15658582566822987, 0.18462431145402358, 0.23417326936373462, 0.20944297969314685, 0.19895784737760858, 0.1864209264126363, 0.22543153879721933, 0.1952617463274644, 0.2465873196253875, 0.17014869593281523, 0.26368262451697244, 0.16988774415717145, 0.2551504464415022, 0.17932194188604011, 0.13575009778423885, 0.21030051244061876, 0.11880655639925886, 0.14512093655427105, 0.17593483833514634, 0.2351312332145079, 0.13895302606810056, 0.23279109633116246, 0.23775633978343524, 0.25224296881082486, 0.1834681133415038, 0.20492901257040308, 0.20735806842102333, 0.2383583080041639, 0.18283214338410048, 0.20914835848597124, 0.6083362608147822, 0.1998131774784614, 0.203918539878572, 0.20748655713543196, 0.2568411297424368, 0.5837265439813306, 0.5692334527519958, 0.17746156237360589, 0.22805717241184853, 0.15931361972246527, 0.16264784414400235, 0.18819401693007864, 0.23841349998331385, 0.8732991506570636, 0.894012846069946, 0.8505381050677661, 0.1588119943917642, 0.1675335742382007, 0.20109869645310752, 0.5131909302210828, 0.6086734624412062, 0.21211418102244228, 0.2108937133938078, 0.21147434676289478, 0.11317511043347417, 0.10529071064581585, 0.25146989827185784, 0.22148370073599255, 0.23848571128142926, 0.23096834876589145, 0.19227683800139972, 0.2151786804886502, 0.21306948922953306, 0.23479418404778063, 0.22389843759143846, 0.2070755282842791, 0.0945674352915774, 0.09041129698227746, 0.0838900072870079, 0.11933336304544684, 0.1263179155893649, 0.13786052907672597, 0.08247531836612376, 0.07832074835259295, 0.08487892033495814]}, "mutation_prompt": null}
