{"id": "e173b191-39cc-40be-978c-ba64c748ac02", "solution": "import numpy as np\n\nclass HybridDEAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(50, budget // 10)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_values = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evals = 0\n        self.F = 0.5\n        self.CR = 0.9\n        self.omega = 0.7\n        self.phi_p = 1.5\n        self.phi_g = 1.5\n\n    def __call__(self, func):\n        while self.evals < self.budget:\n            if self.global_best_position is None:\n                self.evaluate_population(func)\n\n            # Differential Evolution mutation and crossover\n            for i in range(self.pop_size):\n                indices = list(range(self.pop_size))\n                indices.remove(i)\n                a, b, c = self.population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial[crossover_mask] = mutant[crossover_mask]\n                \n                trial_value = func(trial)\n                self.evals += 1\n                if trial_value < self.personal_best_values[i]:\n                    self.personal_best_positions[i] = trial\n                    self.personal_best_values[i] = trial_value\n                    if trial_value < self.global_best_value:\n                        self.global_best_position = trial\n                        self.global_best_value = trial_value\n\n            # Particle Swarm Optimization velocity and position update\n            r_p = np.random.rand(self.pop_size, self.dim)\n            r_g = np.random.rand(self.pop_size, self.dim)\n            self.velocities = (self.omega * self.velocities + \n                               self.phi_p * r_p * (self.personal_best_positions - self.population) +\n                               self.phi_g * r_g * (self.global_best_position - self.population))\n            self.population = np.clip(self.population + self.velocities, self.lower_bound, self.upper_bound)\n\n            # Re-evaluate population\n            self.evaluate_population(func)\n\n        return self.global_best_value\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            value = func(self.population[i])\n            self.evals += 1\n            if value < self.personal_best_values[i]:\n                self.personal_best_positions[i] = self.population[i]\n                self.personal_best_values[i] = value\n                if value < self.global_best_value:\n                    self.global_best_value = value\n                    self.global_best_position = self.population[i]", "name": "HybridDEAPSO", "description": "A hybrid differential evolution with adaptive particle swarm optimization that dynamically balances exploration and exploitation.", "configspace": "", "generation": 0, "fitness": 0.24054143630952296, "feedback": "The algorithm HybridDEAPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.22.", "error": "", "parent_id": null, "metadata": {"aucs": [0.633895281048908, 0.6230348964062504, 0.5972636822322579, 0.6392928668839324, 0.6224786901089213, 0.6394776871551542, 0.5933886383113368, 0.5836045557535618, 0.5974476010625487, 0.22205960089587307, 0.18240301539672876, 0.22227195631752616, 0.2495339211799199, 0.15356547239445317, 0.15960266207817353, 0.05567834263530713, 0.24908202119011003, 0.04515580760446358, 0.09392468542316001, 0.11966296825946376, 0.10815886867406954, 0.2682432083518399, 0.1067244351502109, 0.12910199007590295, 0.11446001549019713, 0.1037570907390547, 0.09416284068615366, 0.11084668881940651, 0.11420518391782075, 0.10936790578113198, 0.09427505676384551, 0.1269797609391793, 0.09348116741113244, 0.10819838974734997, 0.10405897544627862, 0.11798013957792775, 0.9799550325334624, 0.97339271145973, 0.981630548594255, 0.9711775845798238, 0.9798925304743991, 0.9772114245000689, 0.9749203613813687, 0.980904031965691, 0.9717316418490101, 0.31787893528431155, 0.30172937430997737, 0.3682505471090606, 0.321439572104679, 0.28841415264285475, 0.3469601579819023, 0.11731702191410609, 0.08789902903350977, 0.32188369136295936, 0.34953582795731664, 0.211036601709234, 0.2147283214561062, 0.2262555676061645, 0.26072959935008844, 0.18866328543261723, 0.20878021459842033, 0.2294916333952114, 0.3215259126295016, 0.16247834796402782, 0.16605575333715183, 0.15732254355327058, 0.1564083941758847, 0.11595357488839542, 0.11694248349450864, 0.1509059247489276, 0.16326910729384325, 0.17377896536112736, 0.11787489773327053, 0.1679300050881638, 0.1726005418330946, 0.1533530818675627, 0.1320714476080187, 0.14163106740040676, 0.1811847115916524, 0.18110875430711826, 0.1345203009399385, 0.03180090168430871, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004909485616646503, 0.039122287868953776, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09881096348367446, 0.06663027718447756, 0.06004832750735967, 0.07841852816135253, 0.03726942812172618, 0.07031102410130319, 0.0922959110960977, 0.0541691246858782, 0.07568626109062371, 0.09781029970049182, 9.999999999998899e-05, 0.12222305443323189, 0.06093299897226678, 0.06041562230587039, 0.08311657079129509, 0.06313198895808214, 0.06194721906327416, 0.0453009374122173, 0.05082322682356666, 0.038250476809118306, 0.11951774426823725, 0.09288785054973647, 0.1322124575305581, 0.08790698097851779, 0.046198568698230136, 0.0697677039108543, 0.13848774990812796, 0.4483020012981459, 0.4636038612433201, 0.44254329283325766, 0.45238499188143977, 0.47875278156426215, 0.4683238003754776, 0.4618846457176419, 0.4706240450792374, 0.46356344853206455, 0.10079673683977708, 0.12035506409447594, 0.10254485375406297, 0.14346845721232826, 0.11451002796757626, 0.1271156869833694, 0.12774658787522641, 0.08635054615168014, 0.09871159512939154, 0.24980346871429537, 0.15009335299957094, 0.23938095198089837, 0.18169376656197833, 0.24236573436133302, 0.23202350551424944, 0.2636073159071265, 0.260490019989854, 0.17187801345462284, 0.3262946733220995, 0.23851405994281638, 0.32150584710460883, 0.2393197472317895, 0.2905996200610702, 0.3385265568775452, 0.34333471569527585, 0.3571343222377198, 0.26335324343077227, 0.18818396231732126, 0.26389016684216804, 0.17090365812395936, 0.21987077777606423, 0.17581388007496956, 0.1936220782366188, 0.15520033868765237, 0.2382670706499428, 0.20733574210964967, 0.20282304937984286, 0.19666122332258973, 0.19554972117273395, 0.17979740786519127, 0.21355221706167982, 0.21130466748241072, 0.19882222336388, 0.19815087151329425, 0.21896057989325446, 0.26224548015908045, 0.27022792585073063, 0.2464072903210831, 0.2115895347946436, 0.18991398845799035, 0.20885164408256363, 0.19659942385942586, 0.2554037454793068, 0.17990136774564103, 0.18434271762682397, 0.6753711075317481, 0.15203429831430837, 0.7146616837110683, 0.1953709893376364, 0.7221728072488336, 0.7470510590101147, 0.16566107341156677, 0.7403729627830614, 0.48816840887889545, 0.16658195821856603, 0.1998776107411342, 0.20849874225838383, 0.2008598447562403, 0.1451367470431374, 0.18800594752353295, 0.45987632197622785, 0.20493470487751309, 0.17887762990333322, 0.18492805392871237, 0.19732231086490593, 0.18535461749170945, 0.1704880013026977, 0.18247269456699633, 0.17509797699165852, 0.1935209837954205, 0.17931360270466068, 0.08065073985353644, 0.07450172753995443, 0.07758560146568128, 0.08483263656662221, 0.0818364564981241, 0.08654407242214823, 0.08832992954145957, 0.08571162054971193, 0.07701450410393684]}, "mutation_prompt": null}
{"id": "d473ea8c-d7e8-4e6a-8b88-53149b930efc", "solution": "import numpy as np\n\nclass HybridDEAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(50, budget // 10)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_values = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evals = 0\n        self.F = 0.5\n        self.CR = 0.9\n        self.omega = 0.7\n        self.phi_p = 1.5\n        self.phi_g = 1.5\n\n    def __call__(self, func):\n        while self.evals < self.budget:\n            if self.global_best_position is None:\n                self.evaluate_population(func)\n\n            # Differential Evolution mutation and crossover\n            for i in range(self.pop_size):\n                indices = list(range(self.pop_size))\n                indices.remove(i)\n                a, b, c = self.population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial[crossover_mask] = mutant[crossover_mask]\n                \n                trial_value = func(trial)\n                self.evals += 1\n                if trial_value < self.personal_best_values[i]:\n                    self.personal_best_positions[i] = trial\n                    self.personal_best_values[i] = trial_value\n                    if trial_value < self.global_best_value:\n                        self.global_best_position = trial\n                        self.global_best_value = trial_value\n\n            # Particle Swarm Optimization velocity and position update\n            r_p = np.random.rand(self.pop_size, self.dim)\n            r_g = np.random.rand(self.pop_size, self.dim)\n            self.velocities = (self.omega * self.velocities + \n                               self.phi_p * r_p * (self.personal_best_positions - self.population) +\n                               self.phi_g * r_g * (self.global_best_position - self.population))\n            self.population = np.clip(self.population + self.velocities, self.lower_bound, self.upper_bound)\n\n            # Re-evaluate population\n            self.evaluate_population(func)\n\n        return self.global_best_value\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            value = func(self.population[i])\n            self.evals += 1\n            if value < self.personal_best_values[i]:\n                self.personal_best_positions[i] = self.population[i]\n                self.personal_best_values[i] = value\n                if value < self.global_best_value:\n                    self.global_best_value = value\n                    self.global_best_position = self.population[i]", "name": "HybridDEAPSO", "description": "A hybrid differential evolution with adaptive particle swarm optimization that dynamically balances exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e173b191-39cc-40be-978c-ba64c748ac02", "metadata": {"aucs": [0.633895281048908, 0.6230348964062504, 0.5972636822322579, 0.6392928668839324, 0.6224786901089213, 0.6394776871551542, 0.5933886383113368, 0.5836045557535618, 0.5974476010625487, 0.22205960089587307, 0.18240301539672876, 0.22227195631752616, 0.2495339211799199, 0.15356547239445317, 0.15960266207817353, 0.05567834263530713, 0.24908202119011003, 0.04515580760446358, 0.09392468542316001, 0.11966296825946376, 0.10815886867406954, 0.2682432083518399, 0.1067244351502109, 0.12910199007590295, 0.11446001549019713, 0.1037570907390547, 0.09416284068615366, 0.11084668881940651, 0.11420518391782075, 0.10936790578113198, 0.09427505676384551, 0.1269797609391793, 0.09348116741113244, 0.10819838974734997, 0.10405897544627862, 0.11798013957792775, 0.9799550325334624, 0.97339271145973, 0.981630548594255, 0.9711775845798238, 0.9798925304743991, 0.9772114245000689, 0.9749203613813687, 0.980904031965691, 0.9717316418490101, 0.31787893528431155, 0.30172937430997737, 0.3682505471090606, 0.321439572104679, 0.28841415264285475, 0.3469601579819023, 0.11731702191410609, 0.08789902903350977, 0.32188369136295936, 0.34953582795731664, 0.211036601709234, 0.2147283214561062, 0.2262555676061645, 0.26072959935008844, 0.18866328543261723, 0.20878021459842033, 0.2294916333952114, 0.3215259126295016, 0.16247834796402782, 0.16605575333715183, 0.15732254355327058, 0.1564083941758847, 0.11595357488839542, 0.11694248349450864, 0.1509059247489276, 0.16326910729384325, 0.17377896536112736, 0.11787489773327053, 0.1679300050881638, 0.1726005418330946, 0.1533530818675627, 0.1320714476080187, 0.14163106740040676, 0.1811847115916524, 0.18110875430711826, 0.1345203009399385, 0.03180090168430871, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004909485616646503, 0.039122287868953776, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09881096348367446, 0.06663027718447756, 0.06004832750735967, 0.07841852816135253, 0.03726942812172618, 0.07031102410130319, 0.0922959110960977, 0.0541691246858782, 0.07568626109062371, 0.09781029970049182, 9.999999999998899e-05, 0.12222305443323189, 0.06093299897226678, 0.06041562230587039, 0.08311657079129509, 0.06313198895808214, 0.06194721906327416, 0.0453009374122173, 0.05082322682356666, 0.038250476809118306, 0.11951774426823725, 0.09288785054973647, 0.1322124575305581, 0.08790698097851779, 0.046198568698230136, 0.0697677039108543, 0.13848774990812796, 0.4483020012981459, 0.4636038612433201, 0.44254329283325766, 0.45238499188143977, 0.47875278156426215, 0.4683238003754776, 0.4618846457176419, 0.4706240450792374, 0.46356344853206455, 0.10079673683977708, 0.12035506409447594, 0.10254485375406297, 0.14346845721232826, 0.11451002796757626, 0.1271156869833694, 0.12774658787522641, 0.08635054615168014, 0.09871159512939154, 0.24980346871429537, 0.15009335299957094, 0.23938095198089837, 0.18169376656197833, 0.24236573436133302, 0.23202350551424944, 0.2636073159071265, 0.260490019989854, 0.17187801345462284, 0.3262946733220995, 0.23851405994281638, 0.32150584710460883, 0.2393197472317895, 0.2905996200610702, 0.3385265568775452, 0.34333471569527585, 0.3571343222377198, 0.26335324343077227, 0.18818396231732126, 0.26389016684216804, 0.17090365812395936, 0.21987077777606423, 0.17581388007496956, 0.1936220782366188, 0.15520033868765237, 0.2382670706499428, 0.20733574210964967, 0.20282304937984286, 0.19666122332258973, 0.19554972117273395, 0.17979740786519127, 0.21355221706167982, 0.21130466748241072, 0.19882222336388, 0.19815087151329425, 0.21896057989325446, 0.26224548015908045, 0.27022792585073063, 0.2464072903210831, 0.2115895347946436, 0.18991398845799035, 0.20885164408256363, 0.19659942385942586, 0.2554037454793068, 0.17990136774564103, 0.18434271762682397, 0.6753711075317481, 0.15203429831430837, 0.7146616837110683, 0.1953709893376364, 0.7221728072488336, 0.7470510590101147, 0.16566107341156677, 0.7403729627830614, 0.48816840887889545, 0.16658195821856603, 0.1998776107411342, 0.20849874225838383, 0.2008598447562403, 0.1451367470431374, 0.18800594752353295, 0.45987632197622785, 0.20493470487751309, 0.17887762990333322, 0.18492805392871237, 0.19732231086490593, 0.18535461749170945, 0.1704880013026977, 0.18247269456699633, 0.17509797699165852, 0.1935209837954205, 0.17931360270466068, 0.08065073985353644, 0.07450172753995443, 0.07758560146568128, 0.08483263656662221, 0.0818364564981241, 0.08654407242214823, 0.08832992954145957, 0.08571162054971193, 0.07701450410393684]}, "mutation_prompt": null}
{"id": "5f32a5f9-f56f-40d1-9d4e-5d215a21acd7", "solution": "import numpy as np\n\nclass HybridDEAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(50, budget // 10)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_values = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evals = 0\n        self.F = 0.5\n        self.CR = 0.9\n        self.omega = 0.7\n        self.phi_p = 1.5\n        self.phi_g = 1.5\n\n    def __call__(self, func):\n        while self.evals < self.budget:\n            if self.global_best_position is None:\n                self.evaluate_population(func)\n\n            # Differential Evolution mutation and crossover\n            for i in range(self.pop_size):\n                indices = list(range(self.pop_size))\n                indices.remove(i)\n                a, b, c = self.population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial[crossover_mask] = mutant[crossover_mask]\n                \n                trial_value = func(trial)\n                self.evals += 1\n                if trial_value < self.personal_best_values[i]:\n                    self.personal_best_positions[i] = trial\n                    self.personal_best_values[i] = trial_value\n                    if trial_value < self.global_best_value:\n                        self.global_best_position = trial\n                        self.global_best_value = trial_value\n\n            # Particle Swarm Optimization velocity and position update\n            r_p = np.random.rand(self.pop_size, self.dim)\n            r_g = np.random.rand(self.pop_size, self.dim)\n            self.velocities = (self.omega * self.velocities + \n                               self.phi_p * r_p * (self.personal_best_positions - self.population) +\n                               self.phi_g * r_g * (self.global_best_position - self.population))\n            self.population = np.clip(self.population + self.velocities, self.lower_bound, self.upper_bound)\n\n            # Re-evaluate population\n            self.evaluate_population(func)\n\n        return self.global_best_value\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            value = func(self.population[i])\n            self.evals += 1\n            if value < self.personal_best_values[i]:\n                self.personal_best_positions[i] = self.population[i]\n                self.personal_best_values[i] = value\n                if value < self.global_best_value:\n                    self.global_best_value = value\n                    self.global_best_position = self.population[i]", "name": "HybridDEAPSO", "description": "A hybrid differential evolution with adaptive particle swarm optimization that dynamically balances exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e173b191-39cc-40be-978c-ba64c748ac02", "metadata": {"aucs": [0.633895281048908, 0.6230348964062504, 0.5972636822322579, 0.6392928668839324, 0.6224786901089213, 0.6394776871551542, 0.5933886383113368, 0.5836045557535618, 0.5974476010625487, 0.22205960089587307, 0.18240301539672876, 0.22227195631752616, 0.2495339211799199, 0.15356547239445317, 0.15960266207817353, 0.05567834263530713, 0.24908202119011003, 0.04515580760446358, 0.09392468542316001, 0.11966296825946376, 0.10815886867406954, 0.2682432083518399, 0.1067244351502109, 0.12910199007590295, 0.11446001549019713, 0.1037570907390547, 0.09416284068615366, 0.11084668881940651, 0.11420518391782075, 0.10936790578113198, 0.09427505676384551, 0.1269797609391793, 0.09348116741113244, 0.10819838974734997, 0.10405897544627862, 0.11798013957792775, 0.9799550325334624, 0.97339271145973, 0.981630548594255, 0.9711775845798238, 0.9798925304743991, 0.9772114245000689, 0.9749203613813687, 0.980904031965691, 0.9717316418490101, 0.31787893528431155, 0.30172937430997737, 0.3682505471090606, 0.321439572104679, 0.28841415264285475, 0.3469601579819023, 0.11731702191410609, 0.08789902903350977, 0.32188369136295936, 0.34953582795731664, 0.211036601709234, 0.2147283214561062, 0.2262555676061645, 0.26072959935008844, 0.18866328543261723, 0.20878021459842033, 0.2294916333952114, 0.3215259126295016, 0.16247834796402782, 0.16605575333715183, 0.15732254355327058, 0.1564083941758847, 0.11595357488839542, 0.11694248349450864, 0.1509059247489276, 0.16326910729384325, 0.17377896536112736, 0.11787489773327053, 0.1679300050881638, 0.1726005418330946, 0.1533530818675627, 0.1320714476080187, 0.14163106740040676, 0.1811847115916524, 0.18110875430711826, 0.1345203009399385, 0.03180090168430871, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004909485616646503, 0.039122287868953776, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09881096348367446, 0.06663027718447756, 0.06004832750735967, 0.07841852816135253, 0.03726942812172618, 0.07031102410130319, 0.0922959110960977, 0.0541691246858782, 0.07568626109062371, 0.09781029970049182, 9.999999999998899e-05, 0.12222305443323189, 0.06093299897226678, 0.06041562230587039, 0.08311657079129509, 0.06313198895808214, 0.06194721906327416, 0.0453009374122173, 0.05082322682356666, 0.038250476809118306, 0.11951774426823725, 0.09288785054973647, 0.1322124575305581, 0.08790698097851779, 0.046198568698230136, 0.0697677039108543, 0.13848774990812796, 0.4483020012981459, 0.4636038612433201, 0.44254329283325766, 0.45238499188143977, 0.47875278156426215, 0.4683238003754776, 0.4618846457176419, 0.4706240450792374, 0.46356344853206455, 0.10079673683977708, 0.12035506409447594, 0.10254485375406297, 0.14346845721232826, 0.11451002796757626, 0.1271156869833694, 0.12774658787522641, 0.08635054615168014, 0.09871159512939154, 0.24980346871429537, 0.15009335299957094, 0.23938095198089837, 0.18169376656197833, 0.24236573436133302, 0.23202350551424944, 0.2636073159071265, 0.260490019989854, 0.17187801345462284, 0.3262946733220995, 0.23851405994281638, 0.32150584710460883, 0.2393197472317895, 0.2905996200610702, 0.3385265568775452, 0.34333471569527585, 0.3571343222377198, 0.26335324343077227, 0.18818396231732126, 0.26389016684216804, 0.17090365812395936, 0.21987077777606423, 0.17581388007496956, 0.1936220782366188, 0.15520033868765237, 0.2382670706499428, 0.20733574210964967, 0.20282304937984286, 0.19666122332258973, 0.19554972117273395, 0.17979740786519127, 0.21355221706167982, 0.21130466748241072, 0.19882222336388, 0.19815087151329425, 0.21896057989325446, 0.26224548015908045, 0.27022792585073063, 0.2464072903210831, 0.2115895347946436, 0.18991398845799035, 0.20885164408256363, 0.19659942385942586, 0.2554037454793068, 0.17990136774564103, 0.18434271762682397, 0.6753711075317481, 0.15203429831430837, 0.7146616837110683, 0.1953709893376364, 0.7221728072488336, 0.7470510590101147, 0.16566107341156677, 0.7403729627830614, 0.48816840887889545, 0.16658195821856603, 0.1998776107411342, 0.20849874225838383, 0.2008598447562403, 0.1451367470431374, 0.18800594752353295, 0.45987632197622785, 0.20493470487751309, 0.17887762990333322, 0.18492805392871237, 0.19732231086490593, 0.18535461749170945, 0.1704880013026977, 0.18247269456699633, 0.17509797699165852, 0.1935209837954205, 0.17931360270466068, 0.08065073985353644, 0.07450172753995443, 0.07758560146568128, 0.08483263656662221, 0.0818364564981241, 0.08654407242214823, 0.08832992954145957, 0.08571162054971193, 0.07701450410393684]}, "mutation_prompt": null}
{"id": "f7e3682e-5c21-4185-96f5-d1d51b8f7e1d", "solution": "import numpy as np\n\nclass HybridDEAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(50, budget // 10)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_values = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evals = 0\n        self.F = 0.5\n        self.CR = 0.9\n        self.omega = 0.7\n        self.phi_p = 1.5\n        self.phi_g = 1.5\n\n    def __call__(self, func):\n        while self.evals < self.budget:\n            if self.global_best_position is None:\n                self.evaluate_population(func)\n\n            # Differential Evolution mutation and crossover\n            for i in range(self.pop_size):\n                indices = list(range(self.pop_size))\n                indices.remove(i)\n                a, b, c = self.population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial[crossover_mask] = mutant[crossover_mask]\n                \n                trial_value = func(trial)\n                self.evals += 1\n                if trial_value < self.personal_best_values[i]:\n                    self.personal_best_positions[i] = trial\n                    self.personal_best_values[i] = trial_value\n                    if trial_value < self.global_best_value:\n                        self.global_best_position = trial\n                        self.global_best_value = trial_value\n\n            # Particle Swarm Optimization velocity and position update\n            r_p = np.random.rand(self.pop_size, self.dim)\n            r_g = np.random.rand(self.pop_size, self.dim)\n            self.velocities = (self.omega * self.velocities + \n                               self.phi_p * r_p * (self.personal_best_positions - self.population) +\n                               self.phi_g * r_g * (self.global_best_position - self.population))\n            self.population = np.clip(self.population + self.velocities, self.lower_bound, self.upper_bound)\n\n            # Re-evaluate population\n            self.evaluate_population(func)\n\n        return self.global_best_value\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            value = func(self.population[i])\n            self.evals += 1\n            if value < self.personal_best_values[i]:\n                self.personal_best_positions[i] = self.population[i]\n                self.personal_best_values[i] = value\n                if value < self.global_best_value:\n                    self.global_best_value = value\n                    self.global_best_position = self.population[i]", "name": "HybridDEAPSO", "description": "A hybrid differential evolution with adaptive particle swarm optimization that dynamically balances exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e173b191-39cc-40be-978c-ba64c748ac02", "metadata": {"aucs": [0.633895281048908, 0.6230348964062504, 0.5972636822322579, 0.6392928668839324, 0.6224786901089213, 0.6394776871551542, 0.5933886383113368, 0.5836045557535618, 0.5974476010625487, 0.22205960089587307, 0.18240301539672876, 0.22227195631752616, 0.2495339211799199, 0.15356547239445317, 0.15960266207817353, 0.05567834263530713, 0.24908202119011003, 0.04515580760446358, 0.09392468542316001, 0.11966296825946376, 0.10815886867406954, 0.2682432083518399, 0.1067244351502109, 0.12910199007590295, 0.11446001549019713, 0.1037570907390547, 0.09416284068615366, 0.11084668881940651, 0.11420518391782075, 0.10936790578113198, 0.09427505676384551, 0.1269797609391793, 0.09348116741113244, 0.10819838974734997, 0.10405897544627862, 0.11798013957792775, 0.9799550325334624, 0.97339271145973, 0.981630548594255, 0.9711775845798238, 0.9798925304743991, 0.9772114245000689, 0.9749203613813687, 0.980904031965691, 0.9717316418490101, 0.31787893528431155, 0.30172937430997737, 0.3682505471090606, 0.321439572104679, 0.28841415264285475, 0.3469601579819023, 0.11731702191410609, 0.08789902903350977, 0.32188369136295936, 0.34953582795731664, 0.211036601709234, 0.2147283214561062, 0.2262555676061645, 0.26072959935008844, 0.18866328543261723, 0.20878021459842033, 0.2294916333952114, 0.3215259126295016, 0.16247834796402782, 0.16605575333715183, 0.15732254355327058, 0.1564083941758847, 0.11595357488839542, 0.11694248349450864, 0.1509059247489276, 0.16326910729384325, 0.17377896536112736, 0.11787489773327053, 0.1679300050881638, 0.1726005418330946, 0.1533530818675627, 0.1320714476080187, 0.14163106740040676, 0.1811847115916524, 0.18110875430711826, 0.1345203009399385, 0.03180090168430871, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004909485616646503, 0.039122287868953776, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09881096348367446, 0.06663027718447756, 0.06004832750735967, 0.07841852816135253, 0.03726942812172618, 0.07031102410130319, 0.0922959110960977, 0.0541691246858782, 0.07568626109062371, 0.09781029970049182, 9.999999999998899e-05, 0.12222305443323189, 0.06093299897226678, 0.06041562230587039, 0.08311657079129509, 0.06313198895808214, 0.06194721906327416, 0.0453009374122173, 0.05082322682356666, 0.038250476809118306, 0.11951774426823725, 0.09288785054973647, 0.1322124575305581, 0.08790698097851779, 0.046198568698230136, 0.0697677039108543, 0.13848774990812796, 0.4483020012981459, 0.4636038612433201, 0.44254329283325766, 0.45238499188143977, 0.47875278156426215, 0.4683238003754776, 0.4618846457176419, 0.4706240450792374, 0.46356344853206455, 0.10079673683977708, 0.12035506409447594, 0.10254485375406297, 0.14346845721232826, 0.11451002796757626, 0.1271156869833694, 0.12774658787522641, 0.08635054615168014, 0.09871159512939154, 0.24980346871429537, 0.15009335299957094, 0.23938095198089837, 0.18169376656197833, 0.24236573436133302, 0.23202350551424944, 0.2636073159071265, 0.260490019989854, 0.17187801345462284, 0.3262946733220995, 0.23851405994281638, 0.32150584710460883, 0.2393197472317895, 0.2905996200610702, 0.3385265568775452, 0.34333471569527585, 0.3571343222377198, 0.26335324343077227, 0.18818396231732126, 0.26389016684216804, 0.17090365812395936, 0.21987077777606423, 0.17581388007496956, 0.1936220782366188, 0.15520033868765237, 0.2382670706499428, 0.20733574210964967, 0.20282304937984286, 0.19666122332258973, 0.19554972117273395, 0.17979740786519127, 0.21355221706167982, 0.21130466748241072, 0.19882222336388, 0.19815087151329425, 0.21896057989325446, 0.26224548015908045, 0.27022792585073063, 0.2464072903210831, 0.2115895347946436, 0.18991398845799035, 0.20885164408256363, 0.19659942385942586, 0.2554037454793068, 0.17990136774564103, 0.18434271762682397, 0.6753711075317481, 0.15203429831430837, 0.7146616837110683, 0.1953709893376364, 0.7221728072488336, 0.7470510590101147, 0.16566107341156677, 0.7403729627830614, 0.48816840887889545, 0.16658195821856603, 0.1998776107411342, 0.20849874225838383, 0.2008598447562403, 0.1451367470431374, 0.18800594752353295, 0.45987632197622785, 0.20493470487751309, 0.17887762990333322, 0.18492805392871237, 0.19732231086490593, 0.18535461749170945, 0.1704880013026977, 0.18247269456699633, 0.17509797699165852, 0.1935209837954205, 0.17931360270466068, 0.08065073985353644, 0.07450172753995443, 0.07758560146568128, 0.08483263656662221, 0.0818364564981241, 0.08654407242214823, 0.08832992954145957, 0.08571162054971193, 0.07701450410393684]}, "mutation_prompt": null}
{"id": "315e506f-0041-422a-b053-50c1f49720a7", "solution": "import numpy as np\n\nclass EnhancedHybridDEAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(50, budget // 10)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_values = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evals = 0\n        self.F = 0.5\n        self.CR = 0.9\n        self.omega = 0.5 + np.random.rand() / 2  # Dynamic inertia weight\n        self.phi_p = 1.4\n        self.phi_g = 1.6\n        self.update_interval = max(1, budget // (5 * self.pop_size))  # Evaluate periodically\n\n    def __call__(self, func):\n        while self.evals < self.budget:\n            if self.global_best_position is None or self.evals % self.update_interval == 0:\n                self.evaluate_population(func)\n\n            # Combined DE/PSO operation\n            for i in range(self.pop_size):\n                if self.evals >= self.budget:\n                    break\n\n                # Differential Evolution mutation and crossover\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                if i in [a, b, c]:  # Ensure distinct indices\n                    continue\n                mutant = np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), self.lower_bound, self.upper_bound)\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n                \n                # Evaluate trial solution\n                trial_value = func(trial)\n                self.evals += 1\n                if trial_value < self.personal_best_values[i]:\n                    self.personal_best_positions[i], self.personal_best_values[i] = trial, trial_value\n                    if trial_value < self.global_best_value:\n                        self.global_best_position, self.global_best_value = trial, trial_value\n\n            # Particle Swarm Optimization velocity and position update\n            r_p, r_g = np.random.rand(2, self.pop_size, self.dim)\n            self.velocities = (self.omega * self.velocities + \n                               self.phi_p * r_p * (self.personal_best_positions - self.population) +\n                               self.phi_g * r_g * (self.global_best_position - self.population))\n            self.population = np.clip(self.population + self.velocities, self.lower_bound, self.upper_bound)\n\n        return self.global_best_value\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            value = func(self.population[i])\n            self.evals += 1\n            if value < self.personal_best_values[i]:\n                self.personal_best_positions[i], self.personal_best_values[i] = self.population[i], value\n                if value < self.global_best_value:\n                    self.global_best_value, self.global_best_position = value, self.population[i]", "name": "EnhancedHybridDEAPSO", "description": "An enhanced hybrid algorithm combining differential evolution with particle swarm optimization, incorporating adaptive parameters for improved efficiency.", "configspace": "", "generation": 4, "fitness": 0.269082549957698, "feedback": "The algorithm EnhancedHybridDEAPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.23.", "error": "", "parent_id": "e173b191-39cc-40be-978c-ba64c748ac02", "metadata": {"aucs": [0.6321794404074816, 0.764099765596607, 0.6161898175561971, 0.6571886691399009, 0.7789731064844816, 0.6802859631245044, 0.6524700916285308, 0.7512565043470089, 0.659738176019528, 0.3205856662809333, 0.480686513282212, 0.35396146971633, 0.33728783999578027, 0.4535681191380292, 0.33940923789415045, 0.2892133185864031, 0.5233146804063953, 0.2812915912216134, 0.10553965284597411, 0.12056739323161769, 0.13918376554173284, 0.12369184723090443, 0.15301757636239854, 0.13625632708280844, 0.1333324092164314, 0.2922774083508227, 0.10170990155950854, 0.0966921697010108, 0.1402483194610964, 0.10926972738728513, 0.10662479682021186, 0.12487000370863266, 0.10011264303559708, 0.1181594119637448, 0.1268475450905796, 0.0921144145050603, 0.9808035028122437, 0.977885677930512, 0.9787125070629983, 0.9821600000806301, 0.9790137469321364, 0.9778992924303271, 0.9861969582093053, 0.9769148321918435, 0.9813217037356089, 0.32851311536864636, 0.47309930105940257, 0.36487641080348954, 0.3688722075087768, 0.491405403794814, 0.3995710627614705, 0.3452114159808398, 0.4859717338069277, 0.3448374744380167, 0.5587995438327621, 0.22047105107744125, 0.2141798646097851, 0.20624968389695064, 0.1895936141206409, 0.3111153344197132, 0.6408531087343561, 0.7298550634782663, 0.3376429373820803, 0.15428617155818536, 0.19564595490182324, 0.16039883890825657, 0.10105758496018968, 0.18079802010791735, 0.16339893332884914, 0.17868539774231573, 0.1584199420181852, 0.22840749603136878, 0.1730320009828562, 0.24077398488471347, 0.1844809736302323, 0.14641068205119423, 0.20009289570701516, 0.20283174174578067, 0.16659596331070314, 0.2150445511144905, 0.1856176366804443, 9.999999999998899e-05, 0.06524192737492884, 0.07990310479899854, 0.0008061612666775408, 0.027582520858351334, 9.999999999998899e-05, 9.999999999998899e-05, 0.04841919821336249, 9.999999999998899e-05, 0.11337800344741533, 0.06829513937985066, 0.13624754336457012, 0.016564522977051133, 0.04938837297214671, 0.00013317794758183066, 0.024047274651975425, 0.08263895753713024, 0.04032311032894342, 0.04114175017853394, 0.034867397292693614, 0.12416183305222006, 0.04826464186421686, 0.07478132789031766, 0.060222551769677723, 0.06052529578532595, 0.17096092358265613, 0.046524691000470964, 0.07924270992936944, 0.2485579512840408, 0.07551285772026073, 0.14786633492131973, 0.15351430024668045, 0.1564008193862534, 0.05793525140141775, 0.13678677705119457, 0.1351649851637483, 0.4617127390097474, 0.4978581774537527, 0.4764028661153872, 0.45564031858920495, 0.5373350834307331, 0.49111916810389644, 0.45818798517209347, 0.5044370576840365, 0.5122590477486502, 0.11223214899908962, 0.10583326259301173, 0.08982853374938893, 0.12754190625505746, 0.12362716145442332, 0.11530362686740081, 0.10206657678697195, 0.09728010597710002, 0.08573415796967931, 0.16617224554745935, 0.18664768980618474, 0.1852672982368766, 0.1918468518118156, 0.36341928413618174, 0.1559157522473421, 0.1491582414228676, 0.27497857606148046, 0.3538475175262029, 0.32836021021694584, 0.4143476450382244, 0.34905100650907117, 0.2913130864687242, 0.21394246666273753, 0.3483865241913241, 0.34597560278524375, 0.4941327207024311, 0.34714528676099754, 0.27607159098642786, 0.24357905535997704, 0.25144212351053474, 0.26745703513522023, 0.19834389972651933, 0.23161614692395993, 0.2646311912497247, 0.2579668975378876, 0.2731438972118353, 0.2072029004708782, 0.21342440359497394, 0.18755739273266958, 0.18508582689894892, 0.20744469104990826, 0.1991771352185372, 0.18579075525277633, 0.19595163643123537, 0.22787671000156928, 0.20903888895015565, 0.5019505459596237, 0.20566317443272697, 0.32031095300818124, 0.19955995606564936, 0.21746894592673216, 0.191879324757529, 0.40144660182954783, 0.26797401936410226, 0.20370868363391526, 0.12933670051740787, 0.15348898874661643, 0.16553733729414088, 0.19773379616814935, 0.7094474082768717, 0.14023604019026314, 0.16056690910775828, 0.1504189202238202, 0.5018627274505034, 0.20779262455840186, 0.5602016706608848, 0.5515920383812145, 0.16644981748946197, 0.4986926918871708, 0.21112690093874087, 0.10381159770628678, 0.16497906249203642, 0.17791286587038668, 0.18515175644857518, 0.1784381920420749, 0.18361949838176783, 0.2059941310875798, 0.18498117923668245, 0.1833585093172989, 0.2214293302243313, 0.18568000983784627, 0.0760216788170297, 0.08812413241230022, 0.08267100625149937, 0.07927796213911464, 0.08737468352193478, 0.10961781188014497, 0.07658003975937122, 0.09116915761876698, 0.07805928392745609]}, "mutation_prompt": null}
{"id": "63c55d1c-e0b8-4fd1-b392-daee42c3fb53", "solution": "import numpy as np\n\nclass OptimizedHybridDEAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(50, budget // 10)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_values = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evals = 0\n        self.F = 0.6\n        self.CR = 0.8\n        self.omega = 0.4 + np.random.rand() / 5  # Reduced inertia weight range\n        self.phi_p = 1.5\n        self.phi_g = 1.5\n\n    def __call__(self, func):\n        while self.evals < self.budget:\n            if self.global_best_position is None or self.evals % (self.pop_size) == 0:\n                self.evaluate_population(func)\n\n            for i in range(self.pop_size):\n                if self.evals >= self.budget:\n                    break\n\n                # Differential Evolution with simplified mutation and crossover\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n                \n                trial_value = func(trial)\n                self.evals += 1\n                if trial_value < self.personal_best_values[i]:\n                    self.personal_best_positions[i], self.personal_best_values[i] = trial, trial_value\n                    if trial_value < self.global_best_value:\n                        self.global_best_position, self.global_best_value = trial, trial_value\n\n            # PSO updates with adjusted coefficients\n            r_p, r_g = np.random.rand(2, self.pop_size, self.dim)\n            self.velocities = (self.omega * self.velocities +\n                               self.phi_p * r_p * (self.personal_best_positions - self.population) +\n                               self.phi_g * r_g * (self.global_best_position - self.population))\n            self.population = np.clip(self.population + self.velocities, self.lower_bound, self.upper_bound)\n\n        return self.global_best_value\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            value = func(self.population[i])\n            self.evals += 1\n            if value < self.personal_best_values[i]:\n                self.personal_best_positions[i], self.personal_best_values[i] = self.population[i], value\n                if value < self.global_best_value:\n                    self.global_best_value, self.global_best_position = value, self.population[i]", "name": "OptimizedHybridDEAPSO", "description": "A hybrid algorithm integrating differential evolution and particle swarm optimization with simplified mutation and balancing exploration-exploitation.", "configspace": "", "generation": 5, "fitness": 0.31175833299312333, "feedback": "The algorithm OptimizedHybridDEAPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.26.", "error": "", "parent_id": "315e506f-0041-422a-b053-50c1f49720a7", "metadata": {"aucs": [0.8246570751489318, 0.8176455276036668, 0.8258752193587272, 0.7796703966330785, 0.8239225651473996, 0.8025228827224006, 0.8120191028558068, 0.8422189216665776, 0.8119758558882256, 0.6146363415135602, 0.5738448830950543, 0.5883958696181548, 0.5380070264924186, 0.6105976581166431, 0.6227138293922938, 0.05004518030828131, 0.6261161076605302, 0.5411462477983118, 0.15082170829554709, 0.11520421884987442, 0.16585503479764685, 0.16326714489837046, 0.13290129093743797, 0.10975203739385997, 0.16133669803182327, 0.17619403721063753, 0.15367789311081048, 0.12393739355181221, 0.07978377269120485, 0.14738431197175372, 0.11174280905705747, 0.12953954816412083, 0.10607249281329989, 0.11162210490843605, 0.14519408121343225, 0.11565491973298159, 0.9727881623824126, 0.9689649661650939, 0.9787359758623329, 0.9729393541250778, 0.9797199880610747, 0.9701650810457974, 0.9705093965884226, 0.9806746421840132, 0.9723552693843308, 0.5759115496789056, 0.38223784353238954, 0.5233749861876622, 0.6028062764647276, 0.6463739649931595, 0.147636311252904, 0.5522938091443499, 0.5987258992979309, 0.6120130252302511, 0.8107225873617947, 0.22566878923647615, 0.6940154043472478, 0.21687303596550267, 0.8529970885272846, 0.20238735650817796, 0.20171867864540005, 0.8055591865116352, 0.7682888507092659, 0.26545914582780716, 0.26241892519187227, 0.13764615436117145, 0.1907881999035127, 0.19685549728149565, 0.19963801625300148, 0.2125411109997032, 0.11197189801502716, 0.2185384989822734, 0.19716171147951378, 0.17322245606547026, 0.20810063707782933, 0.21841401829085694, 0.19633692826095206, 0.23099102968052965, 0.20247329329853692, 0.12587832890808082, 0.24123096753363238, 0.002003289239711048, 0.018411465852955056, 9.999999999998899e-05, 0.01814589493954122, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0931408257352061, 0.012464315103908996, 0.13319243250404522, 0.06760154973139632, 0.04127667819863057, 0.12021239716108956, 0.050428973931748056, 0.014241502696113462, 0.08378070568293228, 0.08853465106663683, 0.11782734470316392, 0.031534119938908534, 0.05182117972341094, 0.3679430015507431, 0.1577960774377587, 0.08911022623866227, 0.08471413781343418, 0.10774046829557815, 0.09846633958617945, 0.2957722809911941, 0.04081410994739254, 0.041648554610599575, 0.1606069492512472, 0.09433598340408356, 0.15257752623873455, 0.1493239087117887, 0.07861236353439194, 0.08053366287134245, 0.09393587689506588, 0.5404205078303836, 0.5742963353524408, 0.5211809772846392, 0.558699544274091, 0.5634122050093232, 0.5380996174178638, 0.5505391639246975, 0.5418815034883069, 0.5452963696611556, 0.13903423691555816, 0.10426958000102238, 0.11398773891675662, 0.1698160656564136, 0.14409317068593608, 0.0776158753781685, 0.4662447634972755, 0.13626601317154619, 0.09737284828453663, 0.32382980992354726, 0.37344768393355676, 0.21289753974477332, 0.1842919921706906, 0.1873757397561816, 0.3062910457423774, 0.38253945850423376, 0.21913442958317841, 0.22773518440182305, 0.37355175306147814, 0.23650815095834232, 0.4511927567980428, 0.32399416538470005, 0.3632236548167037, 0.3928336870280468, 0.5160503389510509, 0.44963778338778404, 0.41867810449743126, 0.11795525950569552, 0.24077778076881662, 0.2899332360764254, 0.42401330262965875, 0.33714967471152846, 0.3067085213631713, 0.23114474987234568, 0.39411753533601945, 0.23417879639904782, 0.22878201967623002, 0.19697482330464677, 0.21002002195817637, 0.23055562221892512, 0.27116693508677814, 0.21479144101235237, 0.21428565671208133, 0.22318129189789326, 0.22329077076021853, 0.20401397117255415, 0.21940787784645444, 0.5976627514759367, 0.21497902566196392, 0.21660903603858173, 0.21641158533070826, 0.21650148913864953, 0.21737868618344014, 0.20359074411664546, 0.8658112642762033, 0.1667907836242981, 0.15337978059118507, 0.15277627484407386, 0.20013216423959446, 0.8798914483826257, 0.14199089905211282, 0.8893827883829526, 0.1520712834110256, 0.8247905660866075, 0.20890994208864455, 0.07337235385243568, 0.6096012925585261, 0.16734368460002447, 0.15181990304033388, 0.20543014954164673, 0.2111113368545101, 0.16586340988028692, 0.18967542232239998, 0.18764117113111656, 0.19927210887693292, 0.18992801641629142, 0.20164805356836024, 0.2127101025286543, 0.18348849956458257, 0.18341663198107927, 0.20734041267223768, 0.09824287688889033, 0.08095123627474254, 0.08401984034233323, 0.09914080238973733, 0.09373313473050626, 0.09334895963930179, 0.08074482086819568, 0.10037459266294768, 0.09130623765759571]}, "mutation_prompt": null}
{"id": "bfb5db3a-add2-469b-845c-5da0f70fd941", "solution": "import numpy as np\n\nclass ImprovedHybridDEAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(50, budget // 10)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_values = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evals = 0\n        self.F = 0.5 + 0.1 * np.random.rand()  # Dynamic F for diversity\n        self.CR = 0.9\n        self.omega = 0.5  # Constant inertia for simplicity\n        self.phi_p = 1.7  # Adjusted cognitive coefficient\n        self.phi_g = 1.7  # Adjusted social coefficient\n        self.eval_interval = self.pop_size // 3  # Evaluating less frequently\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        while self.evals < self.budget:\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                trial_value = func(trial)\n                self.evals += 1\n                if trial_value < self.personal_best_values[i]:\n                    self.personal_best_positions[i], self.personal_best_values[i] = trial, trial_value\n                    if trial_value < self.global_best_value:\n                        self.global_best_position, self.global_best_value = trial, trial_value\n\n            if self.evals % self.eval_interval == 0:\n                self.evaluate_population(func)\n\n            r_p, r_g = np.random.rand(2, self.pop_size, self.dim)\n            self.velocities += (self.phi_p * r_p * (self.personal_best_positions - self.population) +\n                                self.phi_g * r_g * (self.global_best_position - self.population))\n            self.population = np.clip(self.population + self.omega * self.velocities, self.lower_bound, self.upper_bound)\n\n        return self.global_best_value\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evals >= self.budget:\n                break\n            value = func(self.population[i])\n            self.evals += 1\n            if value < self.personal_best_values[i]:\n                self.personal_best_positions[i], self.personal_best_values[i] = self.population[i], value\n                if value < self.global_best_value:\n                    self.global_best_value, self.global_best_position = value, self.population[i]", "name": "ImprovedHybridDEAPSO", "description": "Streamlined Hybrid DEAPSO with adaptive parameters for enhanced convergence and reduced complexity.", "configspace": "", "generation": 6, "fitness": 0.1388303657468536, "feedback": "The algorithm ImprovedHybridDEAPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.19.", "error": "", "parent_id": "63c55d1c-e0b8-4fd1-b392-daee42c3fb53", "metadata": {"aucs": [0.19629366664467784, 0.2025068298680225, 0.20395406011431527, 0.24884364797745107, 0.23407675598907995, 0.2816709643034754, 0.22138086674644497, 0.21567794701845344, 0.23751456463923182, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06975835354424487, 0.05475124894899963, 0.07700246723727866, 0.05379341794343506, 0.07722573544101452, 0.06027875399234295, 0.05200870709666139, 0.09519777150792763, 0.06026595871376217, 0.033830274871022414, 0.04399269625164792, 0.033818364127539136, 0.06309860199943562, 0.040391203959131206, 0.047883589602224164, 0.04310641691766193, 0.03996281005024316, 0.04242668281349504, 0.9795616081532813, 0.9759064335444206, 0.9768520710000833, 0.9761167864992575, 0.980778029583349, 0.9733966317986845, 0.9757955632208629, 0.9772774037306916, 0.9809818594824484, 0.10795965104700922, 0.1179482071655793, 0.10548448322894677, 0.12384157862708434, 0.11046894074206626, 0.12538581112486336, 0.10923232588260945, 0.08302835221473703, 0.12925554392215477, 0.16240437671374908, 0.14410788514652906, 0.1651585832441388, 0.15881339228431168, 0.14647960902384916, 0.15046563024734094, 0.14163794060581336, 0.11596127390311706, 0.16376063101928762, 0.05503283361986355, 0.00030396743019223127, 0.032086647268509516, 0.01453064208146404, 0.050854182546302806, 0.0019201482283865978, 0.01656633966728227, 0.008969408723579209, 0.019212206642143848, 0.044043023601664344, 9.999999999998899e-05, 9.999999999998899e-05, 0.001826186071813618, 9.999999999998899e-05, 9.999999999998899e-05, 0.015704450462947883, 0.0034081369485211566, 0.009688362186697996, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05592706614167253, 0.05829014477260186, 0.0661287268374754, 0.06696100916602243, 0.016723224532282588, 0.027139515301052075, 0.010660925945846778, 0.053983469811689444, 0.06336186624346862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0024208198168207407, 0.021705246628236474, 9.999999999998899e-05, 0.0065049019589681345, 0.00617617236431911, 0.005430725944662096, 0.01526357390645805, 0.026292993241053053, 0.015684093635502716, 0.2139530624170497, 0.24667727709634069, 0.21894622295248234, 0.2483291554013729, 0.23575937689488768, 0.25168691443592384, 0.21949327651757533, 0.20462134436275536, 0.23588601579650403, 0.08167022213459763, 0.06963410086581912, 0.056716933580535644, 0.06748434991870778, 0.05091782084490515, 0.057295835279250085, 0.048247179522644346, 0.05391600734782509, 0.059952396700678534, 0.15278320953044966, 0.13229945813332977, 0.17582361332601737, 0.15820845521662086, 0.1612204884573737, 0.1330728413325445, 0.14588624036092146, 0.13871492631226734, 0.1574715645232827, 0.17198811501472244, 0.1742984672943887, 0.18185721674958233, 0.1667394045916737, 0.1737957740965157, 0.18363037904715707, 0.18639722390614044, 0.1905942046740362, 0.19569679511487648, 0.11861198281052343, 0.13407609629305428, 0.1409618418106786, 0.12375607734561178, 0.11770748650524543, 0.13190132506598407, 0.14239124138195236, 0.1363412745315874, 0.12099746720276139, 0.16689284118033954, 0.17309547356388544, 0.18113028741527593, 0.15244249388961395, 0.1612271450317566, 0.16082565048177244, 0.1515848316391668, 0.1699921185096217, 0.1537880250074546, 0.15474432930186832, 0.14234741482208413, 0.14589444254900286, 0.14978551180037625, 0.139908641509783, 0.1681535703151742, 0.14923437014714458, 0.14662705539390297, 0.1548036822569171, 0.1388005059064621, 0.1553504095599334, 0.1488606566097156, 0.15355197670823584, 0.18190805745358585, 0.18814115381739882, 0.268316900916018, 0.1853621334543335, 0.15768024563024663, 0.1706977779317207, 0.16030934305287503, 0.16781931936764016, 0.16846126328662925, 0.16777875724804459, 0.2840226941909819, 0.1978209204773862, 0.18909916112751568, 0.13893825299782325, 0.17332146582855135, 0.18620156249049746, 0.18358733377463365, 0.18054252263093407, 0.18494286629272982, 0.18683362085357647, 0.17173467379681484, 0.19947351388562606, 0.1902413373464663, 0.05057869486301658, 0.046102684482703826, 0.07531247721742451, 0.05642416712079645, 0.049798476916271484, 0.06686795162686399, 0.05809688468758978, 0.06215056314147738, 0.06656615391057252]}, "mutation_prompt": null}
{"id": "209d53d4-762d-4739-9f3a-250dafb65328", "solution": "import numpy as np\n\nclass OptimizedHybridDEAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(50, budget // 10)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_values = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evals = 0\n        self.F = 0.6\n        self.CR = 0.8\n        self.omega = 0.4 + np.random.rand() / 5  # Reduced inertia weight range\n        self.phi_p = 1.5\n        self.phi_g = 1.5\n\n    def __call__(self, func):\n        while self.evals < self.budget:\n            if self.global_best_position is None or self.evals % (self.pop_size) == 0:\n                self.evaluate_population(func)\n\n            for i in range(self.pop_size):\n                if self.evals >= self.budget:\n                    break\n\n                # Differential Evolution with simplified mutation and crossover\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n                \n                trial_value = func(trial)\n                self.evals += 1\n                if trial_value < self.personal_best_values[i]:\n                    self.personal_best_positions[i], self.personal_best_values[i] = trial, trial_value\n                    if trial_value < self.global_best_value:\n                        self.global_best_position, self.global_best_value = trial, trial_value\n\n            # PSO updates with adjusted coefficients\n            r_p, r_g = np.random.rand(2, self.pop_size, self.dim)\n            self.velocities = (self.omega * self.velocities +\n                               self.phi_p * r_p * (self.personal_best_positions - self.population) +\n                               self.phi_g * r_g * (self.global_best_position - self.population))\n            self.population = np.clip(self.population + self.velocities, self.lower_bound, self.upper_bound)\n\n        return self.global_best_value\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            value = func(self.population[i])\n            self.evals += 1\n            if value < self.personal_best_values[i]:\n                self.personal_best_positions[i], self.personal_best_values[i] = self.population[i], value\n                if value < self.global_best_value:\n                    self.global_best_value, self.global_best_position = value, self.population[i]", "name": "OptimizedHybridDEAPSO", "description": "A hybrid algorithm integrating differential evolution and particle swarm optimization with simplified mutation and balancing exploration-exploitation.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "63c55d1c-e0b8-4fd1-b392-daee42c3fb53", "metadata": {"aucs": [0.8246570751489318, 0.8176455276036668, 0.8258752193587272, 0.7796703966330785, 0.8239225651473996, 0.8025228827224006, 0.8120191028558068, 0.8422189216665776, 0.8119758558882256, 0.6146363415135602, 0.5738448830950543, 0.5883958696181548, 0.5380070264924186, 0.6105976581166431, 0.6227138293922938, 0.05004518030828131, 0.6261161076605302, 0.5411462477983118, 0.15082170829554709, 0.11520421884987442, 0.16585503479764685, 0.16326714489837046, 0.13290129093743797, 0.10975203739385997, 0.16133669803182327, 0.17619403721063753, 0.15367789311081048, 0.12393739355181221, 0.07978377269120485, 0.14738431197175372, 0.11174280905705747, 0.12953954816412083, 0.10607249281329989, 0.11162210490843605, 0.14519408121343225, 0.11565491973298159, 0.9727881623824126, 0.9689649661650939, 0.9787359758623329, 0.9729393541250778, 0.9797199880610747, 0.9701650810457974, 0.9705093965884226, 0.9806746421840132, 0.9723552693843308, 0.5759115496789056, 0.38223784353238954, 0.5233749861876622, 0.6028062764647276, 0.6463739649931595, 0.147636311252904, 0.5522938091443499, 0.5987258992979309, 0.6120130252302511, 0.8107225873617947, 0.22566878923647615, 0.6940154043472478, 0.21687303596550267, 0.8529970885272846, 0.20238735650817796, 0.20171867864540005, 0.8055591865116352, 0.7682888507092659, 0.26545914582780716, 0.26241892519187227, 0.13764615436117145, 0.1907881999035127, 0.19685549728149565, 0.19963801625300148, 0.2125411109997032, 0.11197189801502716, 0.2185384989822734, 0.19716171147951378, 0.17322245606547026, 0.20810063707782933, 0.21841401829085694, 0.19633692826095206, 0.23099102968052965, 0.20247329329853692, 0.12587832890808082, 0.24123096753363238, 0.002003289239711048, 0.018411465852955056, 9.999999999998899e-05, 0.01814589493954122, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0931408257352061, 0.012464315103908996, 0.13319243250404522, 0.06760154973139632, 0.04127667819863057, 0.12021239716108956, 0.050428973931748056, 0.014241502696113462, 0.08378070568293228, 0.08853465106663683, 0.11782734470316392, 0.031534119938908534, 0.05182117972341094, 0.3679430015507431, 0.1577960774377587, 0.08911022623866227, 0.08471413781343418, 0.10774046829557815, 0.09846633958617945, 0.2957722809911941, 0.04081410994739254, 0.041648554610599575, 0.1606069492512472, 0.09433598340408356, 0.15257752623873455, 0.1493239087117887, 0.07861236353439194, 0.08053366287134245, 0.09393587689506588, 0.5404205078303836, 0.5742963353524408, 0.5211809772846392, 0.558699544274091, 0.5634122050093232, 0.5380996174178638, 0.5505391639246975, 0.5418815034883069, 0.5452963696611556, 0.13903423691555816, 0.10426958000102238, 0.11398773891675662, 0.1698160656564136, 0.14409317068593608, 0.0776158753781685, 0.4662447634972755, 0.13626601317154619, 0.09737284828453663, 0.32382980992354726, 0.37344768393355676, 0.21289753974477332, 0.1842919921706906, 0.1873757397561816, 0.3062910457423774, 0.38253945850423376, 0.21913442958317841, 0.22773518440182305, 0.37355175306147814, 0.23650815095834232, 0.4511927567980428, 0.32399416538470005, 0.3632236548167037, 0.3928336870280468, 0.5160503389510509, 0.44963778338778404, 0.41867810449743126, 0.11795525950569552, 0.24077778076881662, 0.2899332360764254, 0.42401330262965875, 0.33714967471152846, 0.3067085213631713, 0.23114474987234568, 0.39411753533601945, 0.23417879639904782, 0.22878201967623002, 0.19697482330464677, 0.21002002195817637, 0.23055562221892512, 0.27116693508677814, 0.21479144101235237, 0.21428565671208133, 0.22318129189789326, 0.22329077076021853, 0.20401397117255415, 0.21940787784645444, 0.5976627514759367, 0.21497902566196392, 0.21660903603858173, 0.21641158533070826, 0.21650148913864953, 0.21737868618344014, 0.20359074411664546, 0.8658112642762033, 0.1667907836242981, 0.15337978059118507, 0.15277627484407386, 0.20013216423959446, 0.8798914483826257, 0.14199089905211282, 0.8893827883829526, 0.1520712834110256, 0.8247905660866075, 0.20890994208864455, 0.07337235385243568, 0.6096012925585261, 0.16734368460002447, 0.15181990304033388, 0.20543014954164673, 0.2111113368545101, 0.16586340988028692, 0.18967542232239998, 0.18764117113111656, 0.19927210887693292, 0.18992801641629142, 0.20164805356836024, 0.2127101025286543, 0.18348849956458257, 0.18341663198107927, 0.20734041267223768, 0.09824287688889033, 0.08095123627474254, 0.08401984034233323, 0.09914080238973733, 0.09373313473050626, 0.09334895963930179, 0.08074482086819568, 0.10037459266294768, 0.09130623765759571]}, "mutation_prompt": null}
{"id": "ef6cb4ca-b2d3-437f-9e63-c8fdb7943235", "solution": "import numpy as np\n\nclass OptimizedHybridDEAPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(50, budget // 10)\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_values = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evals = 0\n        self.F = 0.6\n        self.CR = 0.8\n        self.omega = 0.4 + np.random.rand() / 5  # Reduced inertia weight range\n        self.phi_p = 1.5\n        self.phi_g = 1.5\n\n    def __call__(self, func):\n        while self.evals < self.budget:\n            if self.global_best_position is None or self.evals % (self.pop_size) == 0:\n                self.evaluate_population(func)\n\n            for i in range(self.pop_size):\n                if self.evals >= self.budget:\n                    break\n\n                # Differential Evolution with simplified mutation and crossover\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n                \n                trial_value = func(trial)\n                self.evals += 1\n                if trial_value < self.personal_best_values[i]:\n                    self.personal_best_positions[i], self.personal_best_values[i] = trial, trial_value\n                    if trial_value < self.global_best_value:\n                        self.global_best_position, self.global_best_value = trial, trial_value\n\n            # PSO updates with adjusted coefficients\n            r_p, r_g = np.random.rand(2, self.pop_size, self.dim)\n            self.velocities = (self.omega * self.velocities +\n                               self.phi_p * r_p * (self.personal_best_positions - self.population) +\n                               self.phi_g * r_g * (self.global_best_position - self.population))\n            self.population = np.clip(self.population + self.velocities, self.lower_bound, self.upper_bound)\n\n        return self.global_best_value\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            value = func(self.population[i])\n            self.evals += 1\n            if value < self.personal_best_values[i]:\n                self.personal_best_positions[i], self.personal_best_values[i] = self.population[i], value\n                if value < self.global_best_value:\n                    self.global_best_value, self.global_best_position = value, self.population[i]", "name": "OptimizedHybridDEAPSO", "description": "A hybrid algorithm integrating differential evolution and particle swarm optimization with simplified mutation and balancing exploration-exploitation.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "63c55d1c-e0b8-4fd1-b392-daee42c3fb53", "metadata": {"aucs": [0.8246570751489318, 0.8176455276036668, 0.8258752193587272, 0.7796703966330785, 0.8239225651473996, 0.8025228827224006, 0.8120191028558068, 0.8422189216665776, 0.8119758558882256, 0.6146363415135602, 0.5738448830950543, 0.5883958696181548, 0.5380070264924186, 0.6105976581166431, 0.6227138293922938, 0.05004518030828131, 0.6261161076605302, 0.5411462477983118, 0.15082170829554709, 0.11520421884987442, 0.16585503479764685, 0.16326714489837046, 0.13290129093743797, 0.10975203739385997, 0.16133669803182327, 0.17619403721063753, 0.15367789311081048, 0.12393739355181221, 0.07978377269120485, 0.14738431197175372, 0.11174280905705747, 0.12953954816412083, 0.10607249281329989, 0.11162210490843605, 0.14519408121343225, 0.11565491973298159, 0.9727881623824126, 0.9689649661650939, 0.9787359758623329, 0.9729393541250778, 0.9797199880610747, 0.9701650810457974, 0.9705093965884226, 0.9806746421840132, 0.9723552693843308, 0.5759115496789056, 0.38223784353238954, 0.5233749861876622, 0.6028062764647276, 0.6463739649931595, 0.147636311252904, 0.5522938091443499, 0.5987258992979309, 0.6120130252302511, 0.8107225873617947, 0.22566878923647615, 0.6940154043472478, 0.21687303596550267, 0.8529970885272846, 0.20238735650817796, 0.20171867864540005, 0.8055591865116352, 0.7682888507092659, 0.26545914582780716, 0.26241892519187227, 0.13764615436117145, 0.1907881999035127, 0.19685549728149565, 0.19963801625300148, 0.2125411109997032, 0.11197189801502716, 0.2185384989822734, 0.19716171147951378, 0.17322245606547026, 0.20810063707782933, 0.21841401829085694, 0.19633692826095206, 0.23099102968052965, 0.20247329329853692, 0.12587832890808082, 0.24123096753363238, 0.002003289239711048, 0.018411465852955056, 9.999999999998899e-05, 0.01814589493954122, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0931408257352061, 0.012464315103908996, 0.13319243250404522, 0.06760154973139632, 0.04127667819863057, 0.12021239716108956, 0.050428973931748056, 0.014241502696113462, 0.08378070568293228, 0.08853465106663683, 0.11782734470316392, 0.031534119938908534, 0.05182117972341094, 0.3679430015507431, 0.1577960774377587, 0.08911022623866227, 0.08471413781343418, 0.10774046829557815, 0.09846633958617945, 0.2957722809911941, 0.04081410994739254, 0.041648554610599575, 0.1606069492512472, 0.09433598340408356, 0.15257752623873455, 0.1493239087117887, 0.07861236353439194, 0.08053366287134245, 0.09393587689506588, 0.5404205078303836, 0.5742963353524408, 0.5211809772846392, 0.558699544274091, 0.5634122050093232, 0.5380996174178638, 0.5505391639246975, 0.5418815034883069, 0.5452963696611556, 0.13903423691555816, 0.10426958000102238, 0.11398773891675662, 0.1698160656564136, 0.14409317068593608, 0.0776158753781685, 0.4662447634972755, 0.13626601317154619, 0.09737284828453663, 0.32382980992354726, 0.37344768393355676, 0.21289753974477332, 0.1842919921706906, 0.1873757397561816, 0.3062910457423774, 0.38253945850423376, 0.21913442958317841, 0.22773518440182305, 0.37355175306147814, 0.23650815095834232, 0.4511927567980428, 0.32399416538470005, 0.3632236548167037, 0.3928336870280468, 0.5160503389510509, 0.44963778338778404, 0.41867810449743126, 0.11795525950569552, 0.24077778076881662, 0.2899332360764254, 0.42401330262965875, 0.33714967471152846, 0.3067085213631713, 0.23114474987234568, 0.39411753533601945, 0.23417879639904782, 0.22878201967623002, 0.19697482330464677, 0.21002002195817637, 0.23055562221892512, 0.27116693508677814, 0.21479144101235237, 0.21428565671208133, 0.22318129189789326, 0.22329077076021853, 0.20401397117255415, 0.21940787784645444, 0.5976627514759367, 0.21497902566196392, 0.21660903603858173, 0.21641158533070826, 0.21650148913864953, 0.21737868618344014, 0.20359074411664546, 0.8658112642762033, 0.1667907836242981, 0.15337978059118507, 0.15277627484407386, 0.20013216423959446, 0.8798914483826257, 0.14199089905211282, 0.8893827883829526, 0.1520712834110256, 0.8247905660866075, 0.20890994208864455, 0.07337235385243568, 0.6096012925585261, 0.16734368460002447, 0.15181990304033388, 0.20543014954164673, 0.2111113368545101, 0.16586340988028692, 0.18967542232239998, 0.18764117113111656, 0.19927210887693292, 0.18992801641629142, 0.20164805356836024, 0.2127101025286543, 0.18348849956458257, 0.18341663198107927, 0.20734041267223768, 0.09824287688889033, 0.08095123627474254, 0.08401984034233323, 0.09914080238973733, 0.09373313473050626, 0.09334895963930179, 0.08074482086819568, 0.10037459266294768, 0.09130623765759571]}, "mutation_prompt": null}
{"id": "12c8934c-f404-4d9c-8d27-af7a617dd173", "solution": "import numpy as np\n\nclass EnhancedHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(50, budget // 10)\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, dim))\n        self.personal_best_positions = self.population.copy()\n        self.personal_best_values = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evals = 0\n        self.F = 0.5  # Adapted mutation factor\n        self.CR = 0.9  # Adapted crossover probability\n        self.omega = 0.3 + np.random.rand() / 4  # Slightly adjusted inertia\n        self.phi_p = 1.3\n        self.phi_g = 1.4\n\n    def __call__(self, func):\n        while self.evals < self.budget:\n            if self.global_best_position is None or self.evals % (self.pop_size) == 0:\n                self.evaluate_population(func)\n\n            for i in range(self.pop_size):\n                if self.evals >= self.budget:\n                    break\n\n                # Simplified adaptive Differential Evolution\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = np.clip(a + self.F * (b - c), *self.bounds)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                trial_value = func(trial)\n                self.evals += 1\n                if trial_value < self.personal_best_values[i]:\n                    self.personal_best_positions[i], self.personal_best_values[i] = trial, trial_value\n                    if trial_value < self.global_best_value:\n                        self.global_best_position, self.global_best_value = trial, trial_value\n\n            # Efficient PSO updates\n            r_p, r_g = np.random.rand(2, self.pop_size, self.dim)\n            self.velocities = (self.omega * self.velocities +\n                               self.phi_p * r_p * (self.personal_best_positions - self.population) +\n                               self.phi_g * r_g * (self.global_best_position - self.population))\n            self.population = np.clip(self.population + self.velocities, *self.bounds)\n\n        return self.global_best_value\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            value = func(self.population[i])\n            self.evals += 1\n            if value < self.personal_best_values[i]:\n                self.personal_best_positions[i], self.personal_best_values[i] = self.population[i], value\n                if value < self.global_best_value:\n                    self.global_best_value, self.global_best_position = value, self.population[i]", "name": "EnhancedHybridOptimizer", "description": "An enhanced hybrid optimization algorithm integrating adaptive mutation strategies and efficient population updates to balance exploration and exploitation.", "configspace": "", "generation": 9, "fitness": 0.3189071105744527, "feedback": "The algorithm EnhancedHybridOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.27.", "error": "", "parent_id": "63c55d1c-e0b8-4fd1-b392-daee42c3fb53", "metadata": {"aucs": [0.8494755632691885, 0.8699760780215258, 0.8476694253488216, 0.8480095119445112, 0.8629890085134897, 0.8448323092945269, 0.831911426385475, 0.8654429559698835, 0.850650891463944, 0.6578956907957636, 0.6863798036281649, 0.617059433187003, 0.6736599283112343, 0.7105211375249523, 0.6533295306362216, 0.6382179277433366, 0.6826492490099128, 0.634610534810282, 0.11050832370336394, 0.12722922946968251, 0.11165400270143289, 0.12047078652349741, 0.13538711262044856, 0.6798564196950737, 0.13806166609001191, 0.694686596861073, 0.1497453150827821, 0.13571441065750356, 0.09326076331207822, 0.10409520314920173, 0.11119545657759355, 0.09978498778321576, 0.10478394857207607, 0.1112270336768022, 0.13733884701775312, 0.11107965646076612, 0.9717787853361235, 0.9730223332709492, 0.9711202713030195, 0.974160271002599, 0.9722779709320262, 0.9640648187987217, 0.9732353779564806, 0.9652149165840581, 0.9731623435277682, 0.6809662185335691, 0.6779267483508331, 0.6325990872755058, 0.5076268825548931, 0.6944297203106757, 0.707216718944935, 0.6627028766884044, 0.6514108095187325, 0.6919597787311808, 0.22696068251256407, 0.2292513352997665, 0.8334569405717573, 0.21311623536631719, 0.21232264720081617, 0.273535175124912, 0.22741854358687086, 0.8467389622621944, 0.8172880644332066, 0.2095738872863232, 0.1944347778696175, 0.2132051960454402, 0.12269760324858237, 0.20247070020255353, 0.26276820177598526, 0.15041903514392596, 0.1286599669288031, 0.2763988829083802, 0.239299180939887, 0.2262992449452258, 0.20621851254615642, 0.21536919943238864, 0.11150768821127022, 0.13013805266405432, 0.2755668387033152, 0.2482808087034899, 0.271818677200107, 0.09477808102523977, 9.999999999998899e-05, 9.999999999998899e-05, 0.03709561044019738, 0.0010520066249773974, 9.999999999998899e-05, 0.012973607712714164, 0.030375781414006764, 0.01188190552589552, 0.029160947548477312, 0.09026212063662209, 0.08209802388027476, 0.022617321922468903, 0.029730074674832574, 9.999999999998899e-05, 0.05615632867129805, 0.07782792832326468, 0.05384227386176843, 0.09986961698611163, 0.03448643086117076, 0.17343127546427417, 0.2607251289895136, 0.08797525911549331, 0.12777800964484254, 0.09570699758800838, 0.09443156723062418, 0.07987797755899884, 0.17503846021494995, 0.05015718113333989, 0.10463342593608871, 0.04786423612312096, 0.21236426002087805, 0.16912159518507774, 0.08131169406661742, 0.11915917698638345, 0.08102341981487915, 0.538175527828651, 0.520600193246646, 0.5631658190949134, 0.649194740535296, 0.6167648813875309, 0.5771365005651332, 0.5616980265344839, 0.5473675140924319, 0.5871717875664095, 0.08222553285304635, 0.11424947842995348, 0.1136142592456012, 0.1198489508166316, 0.14880110322084616, 0.10779285497056612, 0.12692676878108666, 0.1480344053169792, 0.1285264323346822, 0.19381534969890513, 0.161103844062928, 0.2422701599431426, 0.24214370238189553, 0.46771496749298935, 0.26624742063951123, 0.2506142862356897, 0.20989019327092562, 0.2803217924661293, 0.38643876348581274, 0.3033371251746251, 0.46062515218542266, 0.30554249942386036, 0.4236588588234652, 0.44459279802926743, 0.48856606339924546, 0.3894763504080371, 0.23330660858324226, 0.38767713932577175, 0.3524883430395468, 0.33878829178823777, 0.3129124690285726, 0.15767329994411539, 0.2649063734153765, 0.35438221528537095, 0.24530855008714103, 0.20701458214037816, 0.27989531095517517, 0.2383043834341596, 0.20197036161485005, 0.24452105638747434, 0.21831429753669984, 0.20591299260952878, 0.21235625298876804, 0.19676484862613952, 0.1969103790070742, 0.24528548255645788, 0.19362346480653092, 0.222211047968342, 0.2093095652131466, 0.18084868647799157, 0.22466333085525225, 0.20266424925439974, 0.24926010621199213, 0.2448537533724514, 0.16804267571195997, 0.16788910835280635, 0.15279487599015829, 0.9058307977011176, 0.20019885168988394, 0.908451852752022, 0.1417512553705672, 0.16404543438352248, 0.15347185221565818, 0.652568051917015, 0.21093271446987383, 0.07346571583681438, 0.20840920057254553, 0.16719094163024018, 0.8453020388408778, 0.211180691707746, 0.2080602781767763, 0.1680852488329092, 0.2164528195922597, 0.18356857403263704, 0.1866851151938289, 0.21070437710061463, 0.18947183809049162, 0.18645841514669415, 0.18599870239972616, 0.20001301751817468, 0.2015830170994828, 0.1089233495222437, 0.10667463864396143, 0.0968925099812219, 0.10234230901736441, 0.08963306515423897, 0.10676705925649821, 0.16336208365439064, 0.09909466423876656, 0.1151983341003695]}, "mutation_prompt": null}
{"id": "c1b54c9f-d56e-44ac-9ec0-108d61ff03cd", "solution": "import numpy as np\n\nclass StreamlinedHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(50, budget // 10)\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, dim))\n        self.personal_best_positions = self.population.copy()\n        self.personal_best_values = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evals = 0\n        self.F = 0.6  # Mutated factor for diversity\n        self.CR = 0.85  # Crossover probability adjusted\n        self.omega = 0.4  # Increased inertia for exploration\n        self.phi_p = 1.5\n        self.phi_g = 1.3\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evals < self.budget:\n            indices = np.random.choice(self.pop_size, (self.pop_size, 3), replace=True)\n            mutants = np.clip(self.population[indices[:, 0]] + self.F * \n                              (self.population[indices[:, 1]] - self.population[indices[:, 2]]), *self.bounds)\n            crossover_mask = np.random.rand(self.pop_size, self.dim) < self.CR\n            trials = np.where(crossover_mask, mutants, self.population)\n\n            trial_values = np.apply_along_axis(func, 1, trials)\n            self.evals += self.pop_size\n\n            improvements = trial_values < self.personal_best_values\n            self.personal_best_positions[improvements] = trials[improvements]\n            self.personal_best_values[improvements] = trial_values[improvements]\n            if trial_values.min() < self.global_best_value:\n                self.global_best_value = trial_values.min()\n                self.global_best_position = trials[trial_values.argmin()]\n\n            r_p, r_g = np.random.rand(2, self.pop_size, self.dim)\n            self.velocities = (self.omega * self.velocities +\n                               self.phi_p * r_p * (self.personal_best_positions - self.population) +\n                               self.phi_g * r_g * (self.global_best_position - self.population))\n            self.population = np.clip(self.population + self.velocities, *self.bounds)\n\n        return self.global_best_value\n\n    def evaluate_population(self, func):\n        values = np.apply_along_axis(func, 1, self.population)\n        self.evals += self.pop_size\n        better_mask = values < self.personal_best_values\n        self.personal_best_positions[better_mask] = self.population[better_mask]\n        self.personal_best_values[better_mask] = values[better_mask]\n        if values.min() < self.global_best_value:\n            self.global_best_value = values.min()\n            self.global_best_position = self.population[values.argmin()]", "name": "StreamlinedHybridOptimizer", "description": "A streamlined hybrid optimizer enhances performance by introducing parallel evaluations and optimizing population updates.", "configspace": "", "generation": 10, "fitness": 0.33525967472819124, "feedback": "The algorithm StreamlinedHybridOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.27.", "error": "", "parent_id": "12c8934c-f404-4d9c-8d27-af7a617dd173", "metadata": {"aucs": [0.8162550476675803, 0.8267765314506066, 0.7960410115070942, 0.8211904051792472, 0.827303007905487, 0.8215650960495489, 0.8117072784894394, 0.8177929357090029, 0.8150280899750553, 0.6468448009866159, 0.6176711633598735, 0.6502585304037686, 0.6559278592253217, 0.6506250293713864, 0.6712263520501343, 0.6498077265865503, 0.659842029521147, 0.6484360084705878, 0.146816923405229, 0.14317216428427615, 0.1439877624991972, 0.13506066118742943, 0.13990283582287466, 0.1178528849452114, 0.16720996573239955, 0.16884024078766002, 0.16532276977631877, 0.11553068380922704, 0.11052374038925594, 0.12346907564156462, 0.1467006860766491, 0.11376374013331492, 0.10326165810535382, 0.12208965464905575, 0.13517694085890541, 0.11502466078709206, 0.9817231957413847, 0.9809184214674028, 0.9723681102252277, 0.9832511731760085, 0.9801691007188884, 0.9783308994890346, 0.9773333318360551, 0.9762512963187414, 0.9802636664680978, 0.6051977298311911, 0.6154842712932892, 0.5821289754062011, 0.5960108431024856, 0.6208680046047585, 0.6248664979027727, 0.6231406795683316, 0.5961205315703242, 0.6179556907943864, 0.2238313029003386, 0.7526560545037053, 0.8410157182519787, 0.20981296278565886, 0.21423567077764105, 0.2671809202479859, 0.8031531252460148, 0.2376303648592477, 0.8100767518188459, 0.22619518965591134, 0.21130037084725772, 0.20399495416182278, 0.22047135490341374, 0.1261934792554419, 0.12679946477494375, 0.20980711959511644, 0.1997214410574073, 0.21306751460801465, 0.23321217162832464, 0.21928218661216292, 0.22877145603856097, 0.2205139039512316, 0.12454089495537102, 0.23552520745183725, 0.10181565964566142, 0.21838812844315114, 0.2523220841047332, 0.04317691917188493, 0.03198727231153242, 0.021371212304050813, 0.019324989565892237, 9.999999999998899e-05, 0.032143617104673505, 9.999999999998899e-05, 9.999999999998899e-05, 0.06407353956739426, 0.08547048821683545, 0.1325871884913702, 0.08380818638201504, 0.10185245151523337, 0.08948470323953173, 0.05954177105526792, 0.06599426768247862, 0.12207892015730015, 0.06616700401828346, 0.13171179559869395, 0.06214307852590495, 0.21070113171533544, 0.0796257978648719, 0.11552255246780585, 0.06915058722268208, 0.12167551305429936, 0.1240463758695145, 0.10275529407752582, 0.14125181865718495, 0.2913048862399048, 0.16400685586045105, 0.0956124649607264, 0.20455604200065614, 0.24950003913636454, 0.058891453184697795, 0.14123154372313151, 0.08780489135863334, 0.5225553196896677, 0.5570069477574991, 0.5593564802738381, 0.5587107079324866, 0.5483550977616043, 0.5623978805930477, 0.5581810826332578, 0.5569002383053718, 0.5573178327005481, 0.11310097270832498, 0.13636265255732882, 0.10502857618293293, 0.14077066337852595, 0.125251032332779, 0.15646937887381795, 0.143940524141423, 0.5028504871564682, 0.12319005607195199, 0.19948496838249563, 0.2565398013919138, 0.3293480662094642, 0.18909093833516177, 0.3232930170371071, 0.20933443039943367, 0.4824955706708126, 0.13785604680393648, 0.2562265091490862, 0.5299751527111931, 0.505984740812189, 0.3556415552799921, 0.39206295018250414, 0.43339109235308015, 0.557752817418576, 0.5059003691410802, 0.5393620113658798, 0.5726062372933938, 0.2382052249491028, 0.2209168258273151, 0.25462776506682405, 0.35995346706877973, 0.19244516436456416, 0.3386019768838904, 0.4256238705837554, 0.36355529865090963, 0.3846338950894017, 0.21323975350091384, 0.1745071350718701, 0.2214194623257485, 0.19303546941406668, 0.22733095417804738, 0.2437107227813129, 0.21914595030013484, 0.20239886279785801, 0.20301142264085958, 0.5819900298086389, 0.18430255649897076, 0.23184078813694076, 0.19407144321936998, 0.6867488161576978, 0.22515077442990683, 0.19816505848649713, 0.5023623316887311, 0.18809043375212342, 0.18372180177314834, 0.18236711037767894, 0.15262338059516278, 0.8440020090246834, 0.19762276631534603, 0.8451892126335279, 0.177121607845375, 0.1943295951591456, 0.8150421873056984, 0.787295869953802, 0.20985065367367983, 0.2083955843709987, 0.766791063537449, 0.16608904254912704, 0.1540304320068161, 0.7315748139357059, 0.20847830562479042, 0.8174728774267108, 0.18353823019682602, 0.18874812951471287, 0.19556692464075554, 0.18388764730476448, 0.18531339219238485, 0.18027788337082806, 0.18857045047152254, 0.18879336288248616, 0.18900409464321943, 0.08255276176221127, 0.09684790866569348, 0.08966273114494305, 0.08404394323935815, 0.08294287961646474, 0.08424814361637767, 0.07912923234988789, 0.10914452609137681, 0.09588304811629678]}, "mutation_prompt": null}
{"id": "4eb79fb0-4c3f-4ce1-885b-4ae6fa37dda0", "solution": "import numpy as np\n\nclass StreamlinedHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(50, budget // 10)\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, dim))\n        self.personal_best_positions = self.population.copy()\n        self.personal_best_values = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evals = 0\n        self.F = 0.6  # Mutated factor for diversity\n        self.CR = 0.85  # Crossover probability adjusted\n        self.omega = 0.4  # Increased inertia for exploration\n        self.phi_p = 1.5\n        self.phi_g = 1.3\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evals < self.budget:\n            indices = np.random.choice(self.pop_size, (self.pop_size, 3), replace=True)\n            mutants = np.clip(self.population[indices[:, 0]] + self.F * \n                              (self.population[indices[:, 1]] - self.population[indices[:, 2]]), *self.bounds)\n            crossover_mask = np.random.rand(self.pop_size, self.dim) < self.CR\n            trials = np.where(crossover_mask, mutants, self.population)\n\n            trial_values = np.apply_along_axis(func, 1, trials)\n            self.evals += self.pop_size\n\n            improvements = trial_values < self.personal_best_values\n            self.personal_best_positions[improvements] = trials[improvements]\n            self.personal_best_values[improvements] = trial_values[improvements]\n            if trial_values.min() < self.global_best_value:\n                self.global_best_value = trial_values.min()\n                self.global_best_position = trials[trial_values.argmin()]\n\n            r_p, r_g = np.random.rand(2, self.pop_size, self.dim)\n            self.velocities = (self.omega * self.velocities +\n                               self.phi_p * r_p * (self.personal_best_positions - self.population) +\n                               self.phi_g * r_g * (self.global_best_position - self.population))\n            self.population = np.clip(self.population + self.velocities, *self.bounds)\n\n        return self.global_best_value\n\n    def evaluate_population(self, func):\n        values = np.apply_along_axis(func, 1, self.population)\n        self.evals += self.pop_size\n        better_mask = values < self.personal_best_values\n        self.personal_best_positions[better_mask] = self.population[better_mask]\n        self.personal_best_values[better_mask] = values[better_mask]\n        if values.min() < self.global_best_value:\n            self.global_best_value = values.min()\n            self.global_best_position = self.population[values.argmin()]", "name": "StreamlinedHybridOptimizer", "description": "A streamlined hybrid optimizer enhances performance by introducing parallel evaluations and optimizing population updates.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c1b54c9f-d56e-44ac-9ec0-108d61ff03cd", "metadata": {"aucs": [0.8162550476675803, 0.8267765314506066, 0.7960410115070942, 0.8211904051792472, 0.827303007905487, 0.8215650960495489, 0.8117072784894394, 0.8177929357090029, 0.8150280899750553, 0.6468448009866159, 0.6176711633598735, 0.6502585304037686, 0.6559278592253217, 0.6506250293713864, 0.6712263520501343, 0.6498077265865503, 0.659842029521147, 0.6484360084705878, 0.146816923405229, 0.14317216428427615, 0.1439877624991972, 0.13506066118742943, 0.13990283582287466, 0.1178528849452114, 0.16720996573239955, 0.16884024078766002, 0.16532276977631877, 0.11553068380922704, 0.11052374038925594, 0.12346907564156462, 0.1467006860766491, 0.11376374013331492, 0.10326165810535382, 0.12208965464905575, 0.13517694085890541, 0.11502466078709206, 0.9817231957413847, 0.9809184214674028, 0.9723681102252277, 0.9832511731760085, 0.9801691007188884, 0.9783308994890346, 0.9773333318360551, 0.9762512963187414, 0.9802636664680978, 0.6051977298311911, 0.6154842712932892, 0.5821289754062011, 0.5960108431024856, 0.6208680046047585, 0.6248664979027727, 0.6231406795683316, 0.5961205315703242, 0.6179556907943864, 0.2238313029003386, 0.7526560545037053, 0.8410157182519787, 0.20981296278565886, 0.21423567077764105, 0.2671809202479859, 0.8031531252460148, 0.2376303648592477, 0.8100767518188459, 0.22619518965591134, 0.21130037084725772, 0.20399495416182278, 0.22047135490341374, 0.1261934792554419, 0.12679946477494375, 0.20980711959511644, 0.1997214410574073, 0.21306751460801465, 0.23321217162832464, 0.21928218661216292, 0.22877145603856097, 0.2205139039512316, 0.12454089495537102, 0.23552520745183725, 0.10181565964566142, 0.21838812844315114, 0.2523220841047332, 0.04317691917188493, 0.03198727231153242, 0.021371212304050813, 0.019324989565892237, 9.999999999998899e-05, 0.032143617104673505, 9.999999999998899e-05, 9.999999999998899e-05, 0.06407353956739426, 0.08547048821683545, 0.1325871884913702, 0.08380818638201504, 0.10185245151523337, 0.08948470323953173, 0.05954177105526792, 0.06599426768247862, 0.12207892015730015, 0.06616700401828346, 0.13171179559869395, 0.06214307852590495, 0.21070113171533544, 0.0796257978648719, 0.11552255246780585, 0.06915058722268208, 0.12167551305429936, 0.1240463758695145, 0.10275529407752582, 0.14125181865718495, 0.2913048862399048, 0.16400685586045105, 0.0956124649607264, 0.20455604200065614, 0.24950003913636454, 0.058891453184697795, 0.14123154372313151, 0.08780489135863334, 0.5225553196896677, 0.5570069477574991, 0.5593564802738381, 0.5587107079324866, 0.5483550977616043, 0.5623978805930477, 0.5581810826332578, 0.5569002383053718, 0.5573178327005481, 0.11310097270832498, 0.13636265255732882, 0.10502857618293293, 0.14077066337852595, 0.125251032332779, 0.15646937887381795, 0.143940524141423, 0.5028504871564682, 0.12319005607195199, 0.19948496838249563, 0.2565398013919138, 0.3293480662094642, 0.18909093833516177, 0.3232930170371071, 0.20933443039943367, 0.4824955706708126, 0.13785604680393648, 0.2562265091490862, 0.5299751527111931, 0.505984740812189, 0.3556415552799921, 0.39206295018250414, 0.43339109235308015, 0.557752817418576, 0.5059003691410802, 0.5393620113658798, 0.5726062372933938, 0.2382052249491028, 0.2209168258273151, 0.25462776506682405, 0.35995346706877973, 0.19244516436456416, 0.3386019768838904, 0.4256238705837554, 0.36355529865090963, 0.3846338950894017, 0.21323975350091384, 0.1745071350718701, 0.2214194623257485, 0.19303546941406668, 0.22733095417804738, 0.2437107227813129, 0.21914595030013484, 0.20239886279785801, 0.20301142264085958, 0.5819900298086389, 0.18430255649897076, 0.23184078813694076, 0.19407144321936998, 0.6867488161576978, 0.22515077442990683, 0.19816505848649713, 0.5023623316887311, 0.18809043375212342, 0.18372180177314834, 0.18236711037767894, 0.15262338059516278, 0.8440020090246834, 0.19762276631534603, 0.8451892126335279, 0.177121607845375, 0.1943295951591456, 0.8150421873056984, 0.787295869953802, 0.20985065367367983, 0.2083955843709987, 0.766791063537449, 0.16608904254912704, 0.1540304320068161, 0.7315748139357059, 0.20847830562479042, 0.8174728774267108, 0.18353823019682602, 0.18874812951471287, 0.19556692464075554, 0.18388764730476448, 0.18531339219238485, 0.18027788337082806, 0.18857045047152254, 0.18879336288248616, 0.18900409464321943, 0.08255276176221127, 0.09684790866569348, 0.08966273114494305, 0.08404394323935815, 0.08294287961646474, 0.08424814361637767, 0.07912923234988789, 0.10914452609137681, 0.09588304811629678]}, "mutation_prompt": null}
{"id": "9e05097b-634c-44a0-a74a-44d1323f0593", "solution": "import numpy as np\n\nclass StreamlinedHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(50, budget // 10)\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, dim))\n        self.personal_best_positions = self.population.copy()\n        self.personal_best_values = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evals = 0\n        self.F = 0.6  # Mutated factor for diversity\n        self.CR = 0.85  # Crossover probability adjusted\n        self.omega = 0.4  # Increased inertia for exploration\n        self.phi_p = 1.5\n        self.phi_g = 1.3\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evals < self.budget:\n            indices = np.random.choice(self.pop_size, (self.pop_size, 3), replace=True)\n            mutants = np.clip(self.population[indices[:, 0]] + self.F * \n                              (self.population[indices[:, 1]] - self.population[indices[:, 2]]), *self.bounds)\n            crossover_mask = np.random.rand(self.pop_size, self.dim) < self.CR\n            trials = np.where(crossover_mask, mutants, self.population)\n\n            trial_values = np.apply_along_axis(func, 1, trials)\n            self.evals += self.pop_size\n\n            improvements = trial_values < self.personal_best_values\n            self.personal_best_positions[improvements] = trials[improvements]\n            self.personal_best_values[improvements] = trial_values[improvements]\n            if trial_values.min() < self.global_best_value:\n                self.global_best_value = trial_values.min()\n                self.global_best_position = trials[trial_values.argmin()]\n\n            r_p, r_g = np.random.rand(2, self.pop_size, self.dim)\n            self.velocities = (self.omega * self.velocities +\n                               self.phi_p * r_p * (self.personal_best_positions - self.population) +\n                               self.phi_g * r_g * (self.global_best_position - self.population))\n            self.population = np.clip(self.population + self.velocities, *self.bounds)\n\n        return self.global_best_value\n\n    def evaluate_population(self, func):\n        values = np.apply_along_axis(func, 1, self.population)\n        self.evals += self.pop_size\n        better_mask = values < self.personal_best_values\n        self.personal_best_positions[better_mask] = self.population[better_mask]\n        self.personal_best_values[better_mask] = values[better_mask]\n        if values.min() < self.global_best_value:\n            self.global_best_value = values.min()\n            self.global_best_position = self.population[values.argmin()]", "name": "StreamlinedHybridOptimizer", "description": "A streamlined hybrid optimizer enhances performance by introducing parallel evaluations and optimizing population updates.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c1b54c9f-d56e-44ac-9ec0-108d61ff03cd", "metadata": {"aucs": [0.8162550476675803, 0.8267765314506066, 0.7960410115070942, 0.8211904051792472, 0.827303007905487, 0.8215650960495489, 0.8117072784894394, 0.8177929357090029, 0.8150280899750553, 0.6468448009866159, 0.6176711633598735, 0.6502585304037686, 0.6559278592253217, 0.6506250293713864, 0.6712263520501343, 0.6498077265865503, 0.659842029521147, 0.6484360084705878, 0.146816923405229, 0.14317216428427615, 0.1439877624991972, 0.13506066118742943, 0.13990283582287466, 0.1178528849452114, 0.16720996573239955, 0.16884024078766002, 0.16532276977631877, 0.11553068380922704, 0.11052374038925594, 0.12346907564156462, 0.1467006860766491, 0.11376374013331492, 0.10326165810535382, 0.12208965464905575, 0.13517694085890541, 0.11502466078709206, 0.9817231957413847, 0.9809184214674028, 0.9723681102252277, 0.9832511731760085, 0.9801691007188884, 0.9783308994890346, 0.9773333318360551, 0.9762512963187414, 0.9802636664680978, 0.6051977298311911, 0.6154842712932892, 0.5821289754062011, 0.5960108431024856, 0.6208680046047585, 0.6248664979027727, 0.6231406795683316, 0.5961205315703242, 0.6179556907943864, 0.2238313029003386, 0.7526560545037053, 0.8410157182519787, 0.20981296278565886, 0.21423567077764105, 0.2671809202479859, 0.8031531252460148, 0.2376303648592477, 0.8100767518188459, 0.22619518965591134, 0.21130037084725772, 0.20399495416182278, 0.22047135490341374, 0.1261934792554419, 0.12679946477494375, 0.20980711959511644, 0.1997214410574073, 0.21306751460801465, 0.23321217162832464, 0.21928218661216292, 0.22877145603856097, 0.2205139039512316, 0.12454089495537102, 0.23552520745183725, 0.10181565964566142, 0.21838812844315114, 0.2523220841047332, 0.04317691917188493, 0.03198727231153242, 0.021371212304050813, 0.019324989565892237, 9.999999999998899e-05, 0.032143617104673505, 9.999999999998899e-05, 9.999999999998899e-05, 0.06407353956739426, 0.08547048821683545, 0.1325871884913702, 0.08380818638201504, 0.10185245151523337, 0.08948470323953173, 0.05954177105526792, 0.06599426768247862, 0.12207892015730015, 0.06616700401828346, 0.13171179559869395, 0.06214307852590495, 0.21070113171533544, 0.0796257978648719, 0.11552255246780585, 0.06915058722268208, 0.12167551305429936, 0.1240463758695145, 0.10275529407752582, 0.14125181865718495, 0.2913048862399048, 0.16400685586045105, 0.0956124649607264, 0.20455604200065614, 0.24950003913636454, 0.058891453184697795, 0.14123154372313151, 0.08780489135863334, 0.5225553196896677, 0.5570069477574991, 0.5593564802738381, 0.5587107079324866, 0.5483550977616043, 0.5623978805930477, 0.5581810826332578, 0.5569002383053718, 0.5573178327005481, 0.11310097270832498, 0.13636265255732882, 0.10502857618293293, 0.14077066337852595, 0.125251032332779, 0.15646937887381795, 0.143940524141423, 0.5028504871564682, 0.12319005607195199, 0.19948496838249563, 0.2565398013919138, 0.3293480662094642, 0.18909093833516177, 0.3232930170371071, 0.20933443039943367, 0.4824955706708126, 0.13785604680393648, 0.2562265091490862, 0.5299751527111931, 0.505984740812189, 0.3556415552799921, 0.39206295018250414, 0.43339109235308015, 0.557752817418576, 0.5059003691410802, 0.5393620113658798, 0.5726062372933938, 0.2382052249491028, 0.2209168258273151, 0.25462776506682405, 0.35995346706877973, 0.19244516436456416, 0.3386019768838904, 0.4256238705837554, 0.36355529865090963, 0.3846338950894017, 0.21323975350091384, 0.1745071350718701, 0.2214194623257485, 0.19303546941406668, 0.22733095417804738, 0.2437107227813129, 0.21914595030013484, 0.20239886279785801, 0.20301142264085958, 0.5819900298086389, 0.18430255649897076, 0.23184078813694076, 0.19407144321936998, 0.6867488161576978, 0.22515077442990683, 0.19816505848649713, 0.5023623316887311, 0.18809043375212342, 0.18372180177314834, 0.18236711037767894, 0.15262338059516278, 0.8440020090246834, 0.19762276631534603, 0.8451892126335279, 0.177121607845375, 0.1943295951591456, 0.8150421873056984, 0.787295869953802, 0.20985065367367983, 0.2083955843709987, 0.766791063537449, 0.16608904254912704, 0.1540304320068161, 0.7315748139357059, 0.20847830562479042, 0.8174728774267108, 0.18353823019682602, 0.18874812951471287, 0.19556692464075554, 0.18388764730476448, 0.18531339219238485, 0.18027788337082806, 0.18857045047152254, 0.18879336288248616, 0.18900409464321943, 0.08255276176221127, 0.09684790866569348, 0.08966273114494305, 0.08404394323935815, 0.08294287961646474, 0.08424814361637767, 0.07912923234988789, 0.10914452609137681, 0.09588304811629678]}, "mutation_prompt": null}
{"id": "05c11187-63c4-43fe-b4a9-d44ec429821e", "solution": "import numpy as np\n\nclass StreamlinedHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(50, budget // 10)\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, dim))\n        self.personal_best_positions = self.population.copy()\n        self.personal_best_values = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evals = 0\n        self.F = 0.6  # Mutated factor for diversity\n        self.CR = 0.85  # Crossover probability adjusted\n        self.omega = 0.4  # Increased inertia for exploration\n        self.phi_p = 1.5\n        self.phi_g = 1.3\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evals < self.budget:\n            indices = np.random.choice(self.pop_size, (self.pop_size, 3), replace=True)\n            mutants = np.clip(self.population[indices[:, 0]] + self.F * \n                              (self.population[indices[:, 1]] - self.population[indices[:, 2]]), *self.bounds)\n            crossover_mask = np.random.rand(self.pop_size, self.dim) < self.CR\n            trials = np.where(crossover_mask, mutants, self.population)\n\n            trial_values = np.apply_along_axis(func, 1, trials)\n            self.evals += self.pop_size\n\n            improvements = trial_values < self.personal_best_values\n            self.personal_best_positions[improvements] = trials[improvements]\n            self.personal_best_values[improvements] = trial_values[improvements]\n            if trial_values.min() < self.global_best_value:\n                self.global_best_value = trial_values.min()\n                self.global_best_position = trials[trial_values.argmin()]\n\n            r_p, r_g = np.random.rand(2, self.pop_size, self.dim)\n            self.velocities = (self.omega * self.velocities +\n                               self.phi_p * r_p * (self.personal_best_positions - self.population) +\n                               self.phi_g * r_g * (self.global_best_position - self.population))\n            self.population = np.clip(self.population + self.velocities, *self.bounds)\n\n        return self.global_best_value\n\n    def evaluate_population(self, func):\n        values = np.apply_along_axis(func, 1, self.population)\n        self.evals += self.pop_size\n        better_mask = values < self.personal_best_values\n        self.personal_best_positions[better_mask] = self.population[better_mask]\n        self.personal_best_values[better_mask] = values[better_mask]\n        if values.min() < self.global_best_value:\n            self.global_best_value = values.min()\n            self.global_best_position = self.population[values.argmin()]", "name": "StreamlinedHybridOptimizer", "description": "A streamlined hybrid optimizer enhances performance by introducing parallel evaluations and optimizing population updates.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c1b54c9f-d56e-44ac-9ec0-108d61ff03cd", "metadata": {"aucs": [0.8162550476675803, 0.8267765314506066, 0.7960410115070942, 0.8211904051792472, 0.827303007905487, 0.8215650960495489, 0.8117072784894394, 0.8177929357090029, 0.8150280899750553, 0.6468448009866159, 0.6176711633598735, 0.6502585304037686, 0.6559278592253217, 0.6506250293713864, 0.6712263520501343, 0.6498077265865503, 0.659842029521147, 0.6484360084705878, 0.146816923405229, 0.14317216428427615, 0.1439877624991972, 0.13506066118742943, 0.13990283582287466, 0.1178528849452114, 0.16720996573239955, 0.16884024078766002, 0.16532276977631877, 0.11553068380922704, 0.11052374038925594, 0.12346907564156462, 0.1467006860766491, 0.11376374013331492, 0.10326165810535382, 0.12208965464905575, 0.13517694085890541, 0.11502466078709206, 0.9817231957413847, 0.9809184214674028, 0.9723681102252277, 0.9832511731760085, 0.9801691007188884, 0.9783308994890346, 0.9773333318360551, 0.9762512963187414, 0.9802636664680978, 0.6051977298311911, 0.6154842712932892, 0.5821289754062011, 0.5960108431024856, 0.6208680046047585, 0.6248664979027727, 0.6231406795683316, 0.5961205315703242, 0.6179556907943864, 0.2238313029003386, 0.7526560545037053, 0.8410157182519787, 0.20981296278565886, 0.21423567077764105, 0.2671809202479859, 0.8031531252460148, 0.2376303648592477, 0.8100767518188459, 0.22619518965591134, 0.21130037084725772, 0.20399495416182278, 0.22047135490341374, 0.1261934792554419, 0.12679946477494375, 0.20980711959511644, 0.1997214410574073, 0.21306751460801465, 0.23321217162832464, 0.21928218661216292, 0.22877145603856097, 0.2205139039512316, 0.12454089495537102, 0.23552520745183725, 0.10181565964566142, 0.21838812844315114, 0.2523220841047332, 0.04317691917188493, 0.03198727231153242, 0.021371212304050813, 0.019324989565892237, 9.999999999998899e-05, 0.032143617104673505, 9.999999999998899e-05, 9.999999999998899e-05, 0.06407353956739426, 0.08547048821683545, 0.1325871884913702, 0.08380818638201504, 0.10185245151523337, 0.08948470323953173, 0.05954177105526792, 0.06599426768247862, 0.12207892015730015, 0.06616700401828346, 0.13171179559869395, 0.06214307852590495, 0.21070113171533544, 0.0796257978648719, 0.11552255246780585, 0.06915058722268208, 0.12167551305429936, 0.1240463758695145, 0.10275529407752582, 0.14125181865718495, 0.2913048862399048, 0.16400685586045105, 0.0956124649607264, 0.20455604200065614, 0.24950003913636454, 0.058891453184697795, 0.14123154372313151, 0.08780489135863334, 0.5225553196896677, 0.5570069477574991, 0.5593564802738381, 0.5587107079324866, 0.5483550977616043, 0.5623978805930477, 0.5581810826332578, 0.5569002383053718, 0.5573178327005481, 0.11310097270832498, 0.13636265255732882, 0.10502857618293293, 0.14077066337852595, 0.125251032332779, 0.15646937887381795, 0.143940524141423, 0.5028504871564682, 0.12319005607195199, 0.19948496838249563, 0.2565398013919138, 0.3293480662094642, 0.18909093833516177, 0.3232930170371071, 0.20933443039943367, 0.4824955706708126, 0.13785604680393648, 0.2562265091490862, 0.5299751527111931, 0.505984740812189, 0.3556415552799921, 0.39206295018250414, 0.43339109235308015, 0.557752817418576, 0.5059003691410802, 0.5393620113658798, 0.5726062372933938, 0.2382052249491028, 0.2209168258273151, 0.25462776506682405, 0.35995346706877973, 0.19244516436456416, 0.3386019768838904, 0.4256238705837554, 0.36355529865090963, 0.3846338950894017, 0.21323975350091384, 0.1745071350718701, 0.2214194623257485, 0.19303546941406668, 0.22733095417804738, 0.2437107227813129, 0.21914595030013484, 0.20239886279785801, 0.20301142264085958, 0.5819900298086389, 0.18430255649897076, 0.23184078813694076, 0.19407144321936998, 0.6867488161576978, 0.22515077442990683, 0.19816505848649713, 0.5023623316887311, 0.18809043375212342, 0.18372180177314834, 0.18236711037767894, 0.15262338059516278, 0.8440020090246834, 0.19762276631534603, 0.8451892126335279, 0.177121607845375, 0.1943295951591456, 0.8150421873056984, 0.787295869953802, 0.20985065367367983, 0.2083955843709987, 0.766791063537449, 0.16608904254912704, 0.1540304320068161, 0.7315748139357059, 0.20847830562479042, 0.8174728774267108, 0.18353823019682602, 0.18874812951471287, 0.19556692464075554, 0.18388764730476448, 0.18531339219238485, 0.18027788337082806, 0.18857045047152254, 0.18879336288248616, 0.18900409464321943, 0.08255276176221127, 0.09684790866569348, 0.08966273114494305, 0.08404394323935815, 0.08294287961646474, 0.08424814361637767, 0.07912923234988789, 0.10914452609137681, 0.09588304811629678]}, "mutation_prompt": null}
{"id": "fb6485cd-45d7-4918-834a-5f8f2ab62d95", "solution": "import numpy as np\n\nclass OptimizedHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(50, budget // 10)\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, dim))\n        self.velocities = np.zeros((self.pop_size, dim))\n        self.personal_best_positions = self.population.copy()\n        self.personal_best_values = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evals = 0\n        self.F = 0.5  # Adjusted mutated factor\n        self.CR = 0.9  # Enhanced crossover probability\n        self.omega = 0.5  # Adaptive inertia\n        self.phi_p = 1.4\n        self.phi_g = 1.6\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        adaptive_factor = 1.0\n        while self.evals < self.budget:\n            indices = np.random.choice(self.pop_size, (self.pop_size, 3), replace=True)\n            mutants = np.clip(self.population[indices[:, 0]] + self.F * \n                              (self.population[indices[:, 1]] - self.population[indices[:, 2]]), *self.bounds)\n            crossover_mask = np.random.rand(self.pop_size, self.dim) < self.CR\n            trials = np.where(crossover_mask, mutants, self.population)\n\n            trial_values = np.apply_along_axis(func, 1, trials)\n            self.evals += self.pop_size\n\n            improvements = trial_values < self.personal_best_values\n            self.personal_best_positions[improvements] = trials[improvements]\n            self.personal_best_values[improvements] = trial_values[improvements]\n            if trial_values.min() < self.global_best_value:\n                self.global_best_value = trial_values.min()\n                self.global_best_position = trials[trial_values.argmin()]\n\n            r_p = np.random.rand(self.pop_size, self.dim)\n            r_g = np.random.rand(self.pop_size, self.dim)\n            self.velocities = (self.omega * self.velocities +\n                               self.phi_p * r_p * (self.personal_best_positions - self.population) +\n                               self.phi_g * r_g * (self.global_best_position - self.population))\n            adaptive_factor *= 0.95  # Gradually decrease influence\n            self.population = np.clip(self.population + adaptive_factor * self.velocities, *self.bounds)\n\n        return self.global_best_value\n\n    def evaluate_population(self, func):\n        values = np.apply_along_axis(func, 1, self.population)\n        self.evals += self.pop_size\n        better_mask = values < self.personal_best_values\n        self.personal_best_positions[better_mask] = self.population[better_mask]\n        self.personal_best_values[better_mask] = values[better_mask]\n        if values.min() < self.global_best_value:\n            self.global_best_value = values.min()\n            self.global_best_position = self.population[values.argmin()]", "name": "OptimizedHybridOptimizer", "description": "An optimized hybrid algorithm that integrates adaptive parameters and efficient population updates for enhanced convergence.", "configspace": "", "generation": 14, "fitness": 0.25977117923677406, "feedback": "The algorithm OptimizedHybridOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.24.", "error": "", "parent_id": "c1b54c9f-d56e-44ac-9ec0-108d61ff03cd", "metadata": {"aucs": [0.8797283397461731, 0.8807045450644575, 0.880187163331032, 0.886824802956101, 0.8835266815305021, 0.8868048359929425, 0.8838639221747967, 0.8818882698684604, 0.8857655921419402, 0.05139719565469081, 0.07293359967210433, 0.0786541509140758, 0.46395589070684395, 0.06572130130040277, 0.14407173422346753, 0.0680267737030279, 0.09341660366196325, 9.999999999998899e-05, 0.141980868910205, 0.15384846258644425, 0.17994942252677848, 0.1224531521379042, 0.14033587672988657, 0.12148669449251415, 0.12855230700302112, 0.1077205071071583, 0.12008092470252052, 0.1294401534319315, 0.1129978763340811, 0.13909580419188405, 0.12199714646962856, 0.10655507968074307, 0.09125194640254608, 0.10973567816836516, 0.1559227753091612, 0.12771922815680903, 0.9771790830988696, 0.9855266666890113, 0.9775305686372199, 0.9834357825132377, 0.9841274776145503, 0.9802822779082497, 0.9793351974412293, 0.9768226923638598, 0.9724239932435685, 0.4168183917682292, 0.3545591385891186, 0.33654919419459306, 0.3061891393445707, 0.31922166729661394, 0.17452597116915836, 0.09085171595199937, 0.12955390030484182, 0.20148368103091396, 0.3872177257718724, 0.348757151197818, 0.22444459949106943, 0.27879779048562403, 0.21233678118673316, 0.20957951820515863, 0.22570447516416747, 0.2167810425095975, 0.2162135598648358, 0.20465059839109156, 0.15859218062002567, 0.19134534214143295, 0.11646362950904021, 0.13391112793983195, 0.14288634867454963, 0.15605888165611104, 0.14343377184340078, 0.17293836374245553, 0.13313931865844442, 0.15975622179662297, 0.12870602418547916, 0.15682146286565635, 0.12564945460653743, 0.1487819855161242, 0.1421060430272335, 9.999999999998899e-05, 0.18048036050739336, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03242627409862453, 0.052988110573827685, 9.999999999998899e-05, 0.0020749949980387594, 0.040589513306727665, 9.999999999998899e-05, 0.05302404109671954, 0.03880336929647743, 0.06387152567032883, 0.07525870311617744, 0.04212278370344813, 0.08166263590851397, 0.0595046419298535, 0.058252243224972355, 0.04165278028814934, 0.046117347860846536, 0.03618091685395708, 0.06164659718193777, 0.2829740671657113, 0.1265980252415635, 0.07660446857649239, 0.2704694610723566, 0.1650689625517, 0.09208013108694357, 0.1525344622353969, 0.09623916296107782, 0.1949707717001471, 0.30359623329903684, 0.010286060895302596, 0.09877787545203609, 0.09264202570148938, 0.31194797899984605, 0.08188932342662736, 0.5798171746030999, 0.5489160798303085, 0.48681311698812746, 0.47109323325246577, 0.5740261475276622, 0.5828998502663827, 0.5954314721541875, 0.5214345492434898, 0.5836239606451552, 0.09462699417125353, 0.12245322832329097, 0.09253941817774125, 0.12006211761048813, 0.12771487304108764, 0.13901993951262193, 0.12841130005920043, 0.14023634194593526, 0.11965229838343927, 0.16395043712910407, 0.3192831239982956, 0.5079421712498877, 0.21405568832991617, 0.22767628464612744, 0.433438424806588, 0.27056768123324915, 0.20695117358144166, 0.2611668057688461, 0.4133442920489343, 0.4785906469689519, 0.4445528553027839, 0.5135972350904877, 0.27253933187997115, 0.35213051458485256, 0.44624531176396054, 0.3949590143702131, 0.4540408366329961, 0.2260454773866445, 0.2815142671891032, 0.2624859180634971, 0.30663340054900723, 0.27988171462320044, 0.22955453248714397, 0.2662268404408169, 0.2509354844307352, 0.3351651341018672, 0.2747706594077016, 0.22080367229062403, 0.24074867704988268, 0.16964905659004414, 0.24782046964521343, 0.21991545375455723, 0.25496774024946356, 0.23805092993964128, 0.22621826399141387, 0.22051758055112136, 0.20870855699069357, 0.18706458641407508, 0.17111730116193213, 0.22667866581135765, 0.21335140346739323, 0.2003488910548884, 0.1947440379641594, 0.19912882456434222, 0.17306793929519304, 0.17444291734328288, 0.15294830044495555, 0.18755761785925995, 0.19910022105567737, 0.16740491705178429, 0.9003161744373565, 0.17497485996216766, 0.16626937528720298, 0.4138045607309434, 0.20988059294442363, 0.16773023366296347, 0.29657620955159103, 0.1667333325954916, 0.27466352203899347, 0.10434724950860241, 0.1679069246943502, 0.21169635226080663, 0.19879985740325767, 0.18447112023701728, 0.19084200969470488, 0.17965101005724937, 0.18259399728418513, 0.181127542877057, 0.18911555000077074, 0.18892461648738212, 0.18362151058716425, 0.10153517640171739, 0.09880710721600006, 0.08881434105133945, 0.08993223787537408, 0.09813496074873762, 0.0880676258162546, 0.10157588537435425, 0.10295827206971231, 0.09120803276576994]}, "mutation_prompt": null}
{"id": "70c3ac95-8bcd-4630-aafc-c46c6cf3eb8f", "solution": "import numpy as np\n\nclass StreamlinedHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(50, budget // 10)\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, dim))\n        self.personal_best_positions = self.population.copy()\n        self.personal_best_values = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evals = 0\n        self.F = 0.6  # Mutated factor for diversity\n        self.CR = 0.85  # Crossover probability adjusted\n        self.omega = 0.4  # Increased inertia for exploration\n        self.phi_p = 1.5\n        self.phi_g = 1.3\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evals < self.budget:\n            indices = np.random.choice(self.pop_size, (self.pop_size, 3), replace=True)\n            mutants = np.clip(self.population[indices[:, 0]] + self.F * \n                              (self.population[indices[:, 1]] - self.population[indices[:, 2]]), *self.bounds)\n            crossover_mask = np.random.rand(self.pop_size, self.dim) < self.CR\n            trials = np.where(crossover_mask, mutants, self.population)\n\n            trial_values = np.apply_along_axis(func, 1, trials)\n            self.evals += self.pop_size\n\n            improvements = trial_values < self.personal_best_values\n            self.personal_best_positions[improvements] = trials[improvements]\n            self.personal_best_values[improvements] = trial_values[improvements]\n            if trial_values.min() < self.global_best_value:\n                self.global_best_value = trial_values.min()\n                self.global_best_position = trials[trial_values.argmin()]\n\n            r_p, r_g = np.random.rand(2, self.pop_size, self.dim)\n            self.velocities = (self.omega * self.velocities +\n                               self.phi_p * r_p * (self.personal_best_positions - self.population) +\n                               self.phi_g * r_g * (self.global_best_position - self.population))\n            self.population = np.clip(self.population + self.velocities, *self.bounds)\n\n        return self.global_best_value\n\n    def evaluate_population(self, func):\n        values = np.apply_along_axis(func, 1, self.population)\n        self.evals += self.pop_size\n        better_mask = values < self.personal_best_values\n        self.personal_best_positions[better_mask] = self.population[better_mask]\n        self.personal_best_values[better_mask] = values[better_mask]\n        if values.min() < self.global_best_value:\n            self.global_best_value = values.min()\n            self.global_best_position = self.population[values.argmin()]", "name": "StreamlinedHybridOptimizer", "description": "A streamlined hybrid optimizer enhances performance by introducing parallel evaluations and optimizing population updates.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c1b54c9f-d56e-44ac-9ec0-108d61ff03cd", "metadata": {"aucs": [0.8162550476675803, 0.8267765314506066, 0.7960410115070942, 0.8211904051792472, 0.827303007905487, 0.8215650960495489, 0.8117072784894394, 0.8177929357090029, 0.8150280899750553, 0.6468448009866159, 0.6176711633598735, 0.6502585304037686, 0.6559278592253217, 0.6506250293713864, 0.6712263520501343, 0.6498077265865503, 0.659842029521147, 0.6484360084705878, 0.146816923405229, 0.14317216428427615, 0.1439877624991972, 0.13506066118742943, 0.13990283582287466, 0.1178528849452114, 0.16720996573239955, 0.16884024078766002, 0.16532276977631877, 0.11553068380922704, 0.11052374038925594, 0.12346907564156462, 0.1467006860766491, 0.11376374013331492, 0.10326165810535382, 0.12208965464905575, 0.13517694085890541, 0.11502466078709206, 0.9817231957413847, 0.9809184214674028, 0.9723681102252277, 0.9832511731760085, 0.9801691007188884, 0.9783308994890346, 0.9773333318360551, 0.9762512963187414, 0.9802636664680978, 0.6051977298311911, 0.6154842712932892, 0.5821289754062011, 0.5960108431024856, 0.6208680046047585, 0.6248664979027727, 0.6231406795683316, 0.5961205315703242, 0.6179556907943864, 0.2238313029003386, 0.7526560545037053, 0.8410157182519787, 0.20981296278565886, 0.21423567077764105, 0.2671809202479859, 0.8031531252460148, 0.2376303648592477, 0.8100767518188459, 0.22619518965591134, 0.21130037084725772, 0.20399495416182278, 0.22047135490341374, 0.1261934792554419, 0.12679946477494375, 0.20980711959511644, 0.1997214410574073, 0.21306751460801465, 0.23321217162832464, 0.21928218661216292, 0.22877145603856097, 0.2205139039512316, 0.12454089495537102, 0.23552520745183725, 0.10181565964566142, 0.21838812844315114, 0.2523220841047332, 0.04317691917188493, 0.03198727231153242, 0.021371212304050813, 0.019324989565892237, 9.999999999998899e-05, 0.032143617104673505, 9.999999999998899e-05, 9.999999999998899e-05, 0.06407353956739426, 0.08547048821683545, 0.1325871884913702, 0.08380818638201504, 0.10185245151523337, 0.08948470323953173, 0.05954177105526792, 0.06599426768247862, 0.12207892015730015, 0.06616700401828346, 0.13171179559869395, 0.06214307852590495, 0.21070113171533544, 0.0796257978648719, 0.11552255246780585, 0.06915058722268208, 0.12167551305429936, 0.1240463758695145, 0.10275529407752582, 0.14125181865718495, 0.2913048862399048, 0.16400685586045105, 0.0956124649607264, 0.20455604200065614, 0.24950003913636454, 0.058891453184697795, 0.14123154372313151, 0.08780489135863334, 0.5225553196896677, 0.5570069477574991, 0.5593564802738381, 0.5587107079324866, 0.5483550977616043, 0.5623978805930477, 0.5581810826332578, 0.5569002383053718, 0.5573178327005481, 0.11310097270832498, 0.13636265255732882, 0.10502857618293293, 0.14077066337852595, 0.125251032332779, 0.15646937887381795, 0.143940524141423, 0.5028504871564682, 0.12319005607195199, 0.19948496838249563, 0.2565398013919138, 0.3293480662094642, 0.18909093833516177, 0.3232930170371071, 0.20933443039943367, 0.4824955706708126, 0.13785604680393648, 0.2562265091490862, 0.5299751527111931, 0.505984740812189, 0.3556415552799921, 0.39206295018250414, 0.43339109235308015, 0.557752817418576, 0.5059003691410802, 0.5393620113658798, 0.5726062372933938, 0.2382052249491028, 0.2209168258273151, 0.25462776506682405, 0.35995346706877973, 0.19244516436456416, 0.3386019768838904, 0.4256238705837554, 0.36355529865090963, 0.3846338950894017, 0.21323975350091384, 0.1745071350718701, 0.2214194623257485, 0.19303546941406668, 0.22733095417804738, 0.2437107227813129, 0.21914595030013484, 0.20239886279785801, 0.20301142264085958, 0.5819900298086389, 0.18430255649897076, 0.23184078813694076, 0.19407144321936998, 0.6867488161576978, 0.22515077442990683, 0.19816505848649713, 0.5023623316887311, 0.18809043375212342, 0.18372180177314834, 0.18236711037767894, 0.15262338059516278, 0.8440020090246834, 0.19762276631534603, 0.8451892126335279, 0.177121607845375, 0.1943295951591456, 0.8150421873056984, 0.787295869953802, 0.20985065367367983, 0.2083955843709987, 0.766791063537449, 0.16608904254912704, 0.1540304320068161, 0.7315748139357059, 0.20847830562479042, 0.8174728774267108, 0.18353823019682602, 0.18874812951471287, 0.19556692464075554, 0.18388764730476448, 0.18531339219238485, 0.18027788337082806, 0.18857045047152254, 0.18879336288248616, 0.18900409464321943, 0.08255276176221127, 0.09684790866569348, 0.08966273114494305, 0.08404394323935815, 0.08294287961646474, 0.08424814361637767, 0.07912923234988789, 0.10914452609137681, 0.09588304811629678]}, "mutation_prompt": null}
{"id": "b073f32a-2b30-4c1f-a420-4505a4b8e73a", "solution": "import numpy as np\n\nclass StreamlinedHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(50, budget // 10)\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, dim))\n        self.personal_best_positions = self.population.copy()\n        self.personal_best_values = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evals = 0\n        self.F = 0.6  # Mutated factor for diversity\n        self.CR = 0.85  # Crossover probability adjusted\n        self.omega = 0.4  # Increased inertia for exploration\n        self.phi_p = 1.5\n        self.phi_g = 1.3\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evals < self.budget:\n            indices = np.random.choice(self.pop_size, (self.pop_size, 3), replace=True)\n            mutants = np.clip(self.population[indices[:, 0]] + self.F * \n                              (self.population[indices[:, 1]] - self.population[indices[:, 2]]), *self.bounds)\n            crossover_mask = np.random.rand(self.pop_size, self.dim) < self.CR\n            trials = np.where(crossover_mask, mutants, self.population)\n\n            trial_values = np.apply_along_axis(func, 1, trials)\n            self.evals += self.pop_size\n\n            improvements = trial_values < self.personal_best_values\n            self.personal_best_positions[improvements] = trials[improvements]\n            self.personal_best_values[improvements] = trial_values[improvements]\n            if trial_values.min() < self.global_best_value:\n                self.global_best_value = trial_values.min()\n                self.global_best_position = trials[trial_values.argmin()]\n\n            r_p, r_g = np.random.rand(2, self.pop_size, self.dim)\n            self.velocities = (self.omega * self.velocities +\n                               self.phi_p * r_p * (self.personal_best_positions - self.population) +\n                               self.phi_g * r_g * (self.global_best_position - self.population))\n            self.population = np.clip(self.population + self.velocities, *self.bounds)\n\n        return self.global_best_value\n\n    def evaluate_population(self, func):\n        values = np.apply_along_axis(func, 1, self.population)\n        self.evals += self.pop_size\n        better_mask = values < self.personal_best_values\n        self.personal_best_positions[better_mask] = self.population[better_mask]\n        self.personal_best_values[better_mask] = values[better_mask]\n        if values.min() < self.global_best_value:\n            self.global_best_value = values.min()\n            self.global_best_position = self.population[values.argmin()]", "name": "StreamlinedHybridOptimizer", "description": "A streamlined hybrid optimizer enhances performance by introducing parallel evaluations and optimizing population updates.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c1b54c9f-d56e-44ac-9ec0-108d61ff03cd", "metadata": {"aucs": [0.8162550476675803, 0.8267765314506066, 0.7960410115070942, 0.8211904051792472, 0.827303007905487, 0.8215650960495489, 0.8117072784894394, 0.8177929357090029, 0.8150280899750553, 0.6468448009866159, 0.6176711633598735, 0.6502585304037686, 0.6559278592253217, 0.6506250293713864, 0.6712263520501343, 0.6498077265865503, 0.659842029521147, 0.6484360084705878, 0.146816923405229, 0.14317216428427615, 0.1439877624991972, 0.13506066118742943, 0.13990283582287466, 0.1178528849452114, 0.16720996573239955, 0.16884024078766002, 0.16532276977631877, 0.11553068380922704, 0.11052374038925594, 0.12346907564156462, 0.1467006860766491, 0.11376374013331492, 0.10326165810535382, 0.12208965464905575, 0.13517694085890541, 0.11502466078709206, 0.9817231957413847, 0.9809184214674028, 0.9723681102252277, 0.9832511731760085, 0.9801691007188884, 0.9783308994890346, 0.9773333318360551, 0.9762512963187414, 0.9802636664680978, 0.6051977298311911, 0.6154842712932892, 0.5821289754062011, 0.5960108431024856, 0.6208680046047585, 0.6248664979027727, 0.6231406795683316, 0.5961205315703242, 0.6179556907943864, 0.2238313029003386, 0.7526560545037053, 0.8410157182519787, 0.20981296278565886, 0.21423567077764105, 0.2671809202479859, 0.8031531252460148, 0.2376303648592477, 0.8100767518188459, 0.22619518965591134, 0.21130037084725772, 0.20399495416182278, 0.22047135490341374, 0.1261934792554419, 0.12679946477494375, 0.20980711959511644, 0.1997214410574073, 0.21306751460801465, 0.23321217162832464, 0.21928218661216292, 0.22877145603856097, 0.2205139039512316, 0.12454089495537102, 0.23552520745183725, 0.10181565964566142, 0.21838812844315114, 0.2523220841047332, 0.04317691917188493, 0.03198727231153242, 0.021371212304050813, 0.019324989565892237, 9.999999999998899e-05, 0.032143617104673505, 9.999999999998899e-05, 9.999999999998899e-05, 0.06407353956739426, 0.08547048821683545, 0.1325871884913702, 0.08380818638201504, 0.10185245151523337, 0.08948470323953173, 0.05954177105526792, 0.06599426768247862, 0.12207892015730015, 0.06616700401828346, 0.13171179559869395, 0.06214307852590495, 0.21070113171533544, 0.0796257978648719, 0.11552255246780585, 0.06915058722268208, 0.12167551305429936, 0.1240463758695145, 0.10275529407752582, 0.14125181865718495, 0.2913048862399048, 0.16400685586045105, 0.0956124649607264, 0.20455604200065614, 0.24950003913636454, 0.058891453184697795, 0.14123154372313151, 0.08780489135863334, 0.5225553196896677, 0.5570069477574991, 0.5593564802738381, 0.5587107079324866, 0.5483550977616043, 0.5623978805930477, 0.5581810826332578, 0.5569002383053718, 0.5573178327005481, 0.11310097270832498, 0.13636265255732882, 0.10502857618293293, 0.14077066337852595, 0.125251032332779, 0.15646937887381795, 0.143940524141423, 0.5028504871564682, 0.12319005607195199, 0.19948496838249563, 0.2565398013919138, 0.3293480662094642, 0.18909093833516177, 0.3232930170371071, 0.20933443039943367, 0.4824955706708126, 0.13785604680393648, 0.2562265091490862, 0.5299751527111931, 0.505984740812189, 0.3556415552799921, 0.39206295018250414, 0.43339109235308015, 0.557752817418576, 0.5059003691410802, 0.5393620113658798, 0.5726062372933938, 0.2382052249491028, 0.2209168258273151, 0.25462776506682405, 0.35995346706877973, 0.19244516436456416, 0.3386019768838904, 0.4256238705837554, 0.36355529865090963, 0.3846338950894017, 0.21323975350091384, 0.1745071350718701, 0.2214194623257485, 0.19303546941406668, 0.22733095417804738, 0.2437107227813129, 0.21914595030013484, 0.20239886279785801, 0.20301142264085958, 0.5819900298086389, 0.18430255649897076, 0.23184078813694076, 0.19407144321936998, 0.6867488161576978, 0.22515077442990683, 0.19816505848649713, 0.5023623316887311, 0.18809043375212342, 0.18372180177314834, 0.18236711037767894, 0.15262338059516278, 0.8440020090246834, 0.19762276631534603, 0.8451892126335279, 0.177121607845375, 0.1943295951591456, 0.8150421873056984, 0.787295869953802, 0.20985065367367983, 0.2083955843709987, 0.766791063537449, 0.16608904254912704, 0.1540304320068161, 0.7315748139357059, 0.20847830562479042, 0.8174728774267108, 0.18353823019682602, 0.18874812951471287, 0.19556692464075554, 0.18388764730476448, 0.18531339219238485, 0.18027788337082806, 0.18857045047152254, 0.18879336288248616, 0.18900409464321943, 0.08255276176221127, 0.09684790866569348, 0.08966273114494305, 0.08404394323935815, 0.08294287961646474, 0.08424814361637767, 0.07912923234988789, 0.10914452609137681, 0.09588304811629678]}, "mutation_prompt": null}
{"id": "c14001aa-c3ad-41ff-ada7-69aff944c3e5", "solution": "import numpy as np\n\nclass StreamlinedHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(50, budget // 10)\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, dim))\n        self.personal_best_positions = self.population.copy()\n        self.personal_best_values = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evals = 0\n        self.F = 0.6  # Mutated factor for diversity\n        self.CR = 0.85  # Crossover probability adjusted\n        self.omega = 0.4  # Increased inertia for exploration\n        self.phi_p = 1.5\n        self.phi_g = 1.3\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evals < self.budget:\n            indices = np.random.choice(self.pop_size, (self.pop_size, 3), replace=True)\n            mutants = np.clip(self.population[indices[:, 0]] + self.F * \n                              (self.population[indices[:, 1]] - self.population[indices[:, 2]]), *self.bounds)\n            crossover_mask = np.random.rand(self.pop_size, self.dim) < self.CR\n            trials = np.where(crossover_mask, mutants, self.population)\n\n            trial_values = np.apply_along_axis(func, 1, trials)\n            self.evals += self.pop_size\n\n            improvements = trial_values < self.personal_best_values\n            self.personal_best_positions[improvements] = trials[improvements]\n            self.personal_best_values[improvements] = trial_values[improvements]\n            if trial_values.min() < self.global_best_value:\n                self.global_best_value = trial_values.min()\n                self.global_best_position = trials[trial_values.argmin()]\n\n            r_p, r_g = np.random.rand(2, self.pop_size, self.dim)\n            self.velocities = (self.omega * self.velocities +\n                               self.phi_p * r_p * (self.personal_best_positions - self.population) +\n                               self.phi_g * r_g * (self.global_best_position - self.population))\n            self.population = np.clip(self.population + self.velocities, *self.bounds)\n\n        return self.global_best_value\n\n    def evaluate_population(self, func):\n        values = np.apply_along_axis(func, 1, self.population)\n        self.evals += self.pop_size\n        better_mask = values < self.personal_best_values\n        self.personal_best_positions[better_mask] = self.population[better_mask]\n        self.personal_best_values[better_mask] = values[better_mask]\n        if values.min() < self.global_best_value:\n            self.global_best_value = values.min()\n            self.global_best_position = self.population[values.argmin()]", "name": "StreamlinedHybridOptimizer", "description": "A streamlined hybrid optimizer enhances performance by introducing parallel evaluations and optimizing population updates.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c1b54c9f-d56e-44ac-9ec0-108d61ff03cd", "metadata": {"aucs": [0.8162550476675803, 0.8267765314506066, 0.7960410115070942, 0.8211904051792472, 0.827303007905487, 0.8215650960495489, 0.8117072784894394, 0.8177929357090029, 0.8150280899750553, 0.6468448009866159, 0.6176711633598735, 0.6502585304037686, 0.6559278592253217, 0.6506250293713864, 0.6712263520501343, 0.6498077265865503, 0.659842029521147, 0.6484360084705878, 0.146816923405229, 0.14317216428427615, 0.1439877624991972, 0.13506066118742943, 0.13990283582287466, 0.1178528849452114, 0.16720996573239955, 0.16884024078766002, 0.16532276977631877, 0.11553068380922704, 0.11052374038925594, 0.12346907564156462, 0.1467006860766491, 0.11376374013331492, 0.10326165810535382, 0.12208965464905575, 0.13517694085890541, 0.11502466078709206, 0.9817231957413847, 0.9809184214674028, 0.9723681102252277, 0.9832511731760085, 0.9801691007188884, 0.9783308994890346, 0.9773333318360551, 0.9762512963187414, 0.9802636664680978, 0.6051977298311911, 0.6154842712932892, 0.5821289754062011, 0.5960108431024856, 0.6208680046047585, 0.6248664979027727, 0.6231406795683316, 0.5961205315703242, 0.6179556907943864, 0.2238313029003386, 0.7526560545037053, 0.8410157182519787, 0.20981296278565886, 0.21423567077764105, 0.2671809202479859, 0.8031531252460148, 0.2376303648592477, 0.8100767518188459, 0.22619518965591134, 0.21130037084725772, 0.20399495416182278, 0.22047135490341374, 0.1261934792554419, 0.12679946477494375, 0.20980711959511644, 0.1997214410574073, 0.21306751460801465, 0.23321217162832464, 0.21928218661216292, 0.22877145603856097, 0.2205139039512316, 0.12454089495537102, 0.23552520745183725, 0.10181565964566142, 0.21838812844315114, 0.2523220841047332, 0.04317691917188493, 0.03198727231153242, 0.021371212304050813, 0.019324989565892237, 9.999999999998899e-05, 0.032143617104673505, 9.999999999998899e-05, 9.999999999998899e-05, 0.06407353956739426, 0.08547048821683545, 0.1325871884913702, 0.08380818638201504, 0.10185245151523337, 0.08948470323953173, 0.05954177105526792, 0.06599426768247862, 0.12207892015730015, 0.06616700401828346, 0.13171179559869395, 0.06214307852590495, 0.21070113171533544, 0.0796257978648719, 0.11552255246780585, 0.06915058722268208, 0.12167551305429936, 0.1240463758695145, 0.10275529407752582, 0.14125181865718495, 0.2913048862399048, 0.16400685586045105, 0.0956124649607264, 0.20455604200065614, 0.24950003913636454, 0.058891453184697795, 0.14123154372313151, 0.08780489135863334, 0.5225553196896677, 0.5570069477574991, 0.5593564802738381, 0.5587107079324866, 0.5483550977616043, 0.5623978805930477, 0.5581810826332578, 0.5569002383053718, 0.5573178327005481, 0.11310097270832498, 0.13636265255732882, 0.10502857618293293, 0.14077066337852595, 0.125251032332779, 0.15646937887381795, 0.143940524141423, 0.5028504871564682, 0.12319005607195199, 0.19948496838249563, 0.2565398013919138, 0.3293480662094642, 0.18909093833516177, 0.3232930170371071, 0.20933443039943367, 0.4824955706708126, 0.13785604680393648, 0.2562265091490862, 0.5299751527111931, 0.505984740812189, 0.3556415552799921, 0.39206295018250414, 0.43339109235308015, 0.557752817418576, 0.5059003691410802, 0.5393620113658798, 0.5726062372933938, 0.2382052249491028, 0.2209168258273151, 0.25462776506682405, 0.35995346706877973, 0.19244516436456416, 0.3386019768838904, 0.4256238705837554, 0.36355529865090963, 0.3846338950894017, 0.21323975350091384, 0.1745071350718701, 0.2214194623257485, 0.19303546941406668, 0.22733095417804738, 0.2437107227813129, 0.21914595030013484, 0.20239886279785801, 0.20301142264085958, 0.5819900298086389, 0.18430255649897076, 0.23184078813694076, 0.19407144321936998, 0.6867488161576978, 0.22515077442990683, 0.19816505848649713, 0.5023623316887311, 0.18809043375212342, 0.18372180177314834, 0.18236711037767894, 0.15262338059516278, 0.8440020090246834, 0.19762276631534603, 0.8451892126335279, 0.177121607845375, 0.1943295951591456, 0.8150421873056984, 0.787295869953802, 0.20985065367367983, 0.2083955843709987, 0.766791063537449, 0.16608904254912704, 0.1540304320068161, 0.7315748139357059, 0.20847830562479042, 0.8174728774267108, 0.18353823019682602, 0.18874812951471287, 0.19556692464075554, 0.18388764730476448, 0.18531339219238485, 0.18027788337082806, 0.18857045047152254, 0.18879336288248616, 0.18900409464321943, 0.08255276176221127, 0.09684790866569348, 0.08966273114494305, 0.08404394323935815, 0.08294287961646474, 0.08424814361637767, 0.07912923234988789, 0.10914452609137681, 0.09588304811629678]}, "mutation_prompt": null}
{"id": "c8cab292-ae88-46d2-a03c-5802d70222c3", "solution": "import numpy as np\n\nclass StreamlinedHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(50, budget // 10)\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, dim))\n        self.personal_best_positions = self.population.copy()\n        self.personal_best_values = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evals = 0\n        self.F = 0.6  # Mutated factor for diversity\n        self.CR = 0.85  # Crossover probability adjusted\n        self.omega = 0.4  # Increased inertia for exploration\n        self.phi_p = 1.5\n        self.phi_g = 1.3\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evals < self.budget:\n            indices = np.random.choice(self.pop_size, (self.pop_size, 3), replace=True)\n            mutants = np.clip(self.population[indices[:, 0]] + self.F * \n                              (self.population[indices[:, 1]] - self.population[indices[:, 2]]), *self.bounds)\n            crossover_mask = np.random.rand(self.pop_size, self.dim) < self.CR\n            trials = np.where(crossover_mask, mutants, self.population)\n\n            trial_values = np.apply_along_axis(func, 1, trials)\n            self.evals += self.pop_size\n\n            improvements = trial_values < self.personal_best_values\n            self.personal_best_positions[improvements] = trials[improvements]\n            self.personal_best_values[improvements] = trial_values[improvements]\n            if trial_values.min() < self.global_best_value:\n                self.global_best_value = trial_values.min()\n                self.global_best_position = trials[trial_values.argmin()]\n\n            r_p, r_g = np.random.rand(2, self.pop_size, self.dim)\n            self.velocities = (self.omega * self.velocities +\n                               self.phi_p * r_p * (self.personal_best_positions - self.population) +\n                               self.phi_g * r_g * (self.global_best_position - self.population))\n            self.population = np.clip(self.population + self.velocities, *self.bounds)\n\n        return self.global_best_value\n\n    def evaluate_population(self, func):\n        values = np.apply_along_axis(func, 1, self.population)\n        self.evals += self.pop_size\n        better_mask = values < self.personal_best_values\n        self.personal_best_positions[better_mask] = self.population[better_mask]\n        self.personal_best_values[better_mask] = values[better_mask]\n        if values.min() < self.global_best_value:\n            self.global_best_value = values.min()\n            self.global_best_position = self.population[values.argmin()]", "name": "StreamlinedHybridOptimizer", "description": "A streamlined hybrid optimizer enhances performance by introducing parallel evaluations and optimizing population updates.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c1b54c9f-d56e-44ac-9ec0-108d61ff03cd", "metadata": {"aucs": [0.8162550476675803, 0.8267765314506066, 0.7960410115070942, 0.8211904051792472, 0.827303007905487, 0.8215650960495489, 0.8117072784894394, 0.8177929357090029, 0.8150280899750553, 0.6468448009866159, 0.6176711633598735, 0.6502585304037686, 0.6559278592253217, 0.6506250293713864, 0.6712263520501343, 0.6498077265865503, 0.659842029521147, 0.6484360084705878, 0.146816923405229, 0.14317216428427615, 0.1439877624991972, 0.13506066118742943, 0.13990283582287466, 0.1178528849452114, 0.16720996573239955, 0.16884024078766002, 0.16532276977631877, 0.11553068380922704, 0.11052374038925594, 0.12346907564156462, 0.1467006860766491, 0.11376374013331492, 0.10326165810535382, 0.12208965464905575, 0.13517694085890541, 0.11502466078709206, 0.9817231957413847, 0.9809184214674028, 0.9723681102252277, 0.9832511731760085, 0.9801691007188884, 0.9783308994890346, 0.9773333318360551, 0.9762512963187414, 0.9802636664680978, 0.6051977298311911, 0.6154842712932892, 0.5821289754062011, 0.5960108431024856, 0.6208680046047585, 0.6248664979027727, 0.6231406795683316, 0.5961205315703242, 0.6179556907943864, 0.2238313029003386, 0.7526560545037053, 0.8410157182519787, 0.20981296278565886, 0.21423567077764105, 0.2671809202479859, 0.8031531252460148, 0.2376303648592477, 0.8100767518188459, 0.22619518965591134, 0.21130037084725772, 0.20399495416182278, 0.22047135490341374, 0.1261934792554419, 0.12679946477494375, 0.20980711959511644, 0.1997214410574073, 0.21306751460801465, 0.23321217162832464, 0.21928218661216292, 0.22877145603856097, 0.2205139039512316, 0.12454089495537102, 0.23552520745183725, 0.10181565964566142, 0.21838812844315114, 0.2523220841047332, 0.04317691917188493, 0.03198727231153242, 0.021371212304050813, 0.019324989565892237, 9.999999999998899e-05, 0.032143617104673505, 9.999999999998899e-05, 9.999999999998899e-05, 0.06407353956739426, 0.08547048821683545, 0.1325871884913702, 0.08380818638201504, 0.10185245151523337, 0.08948470323953173, 0.05954177105526792, 0.06599426768247862, 0.12207892015730015, 0.06616700401828346, 0.13171179559869395, 0.06214307852590495, 0.21070113171533544, 0.0796257978648719, 0.11552255246780585, 0.06915058722268208, 0.12167551305429936, 0.1240463758695145, 0.10275529407752582, 0.14125181865718495, 0.2913048862399048, 0.16400685586045105, 0.0956124649607264, 0.20455604200065614, 0.24950003913636454, 0.058891453184697795, 0.14123154372313151, 0.08780489135863334, 0.5225553196896677, 0.5570069477574991, 0.5593564802738381, 0.5587107079324866, 0.5483550977616043, 0.5623978805930477, 0.5581810826332578, 0.5569002383053718, 0.5573178327005481, 0.11310097270832498, 0.13636265255732882, 0.10502857618293293, 0.14077066337852595, 0.125251032332779, 0.15646937887381795, 0.143940524141423, 0.5028504871564682, 0.12319005607195199, 0.19948496838249563, 0.2565398013919138, 0.3293480662094642, 0.18909093833516177, 0.3232930170371071, 0.20933443039943367, 0.4824955706708126, 0.13785604680393648, 0.2562265091490862, 0.5299751527111931, 0.505984740812189, 0.3556415552799921, 0.39206295018250414, 0.43339109235308015, 0.557752817418576, 0.5059003691410802, 0.5393620113658798, 0.5726062372933938, 0.2382052249491028, 0.2209168258273151, 0.25462776506682405, 0.35995346706877973, 0.19244516436456416, 0.3386019768838904, 0.4256238705837554, 0.36355529865090963, 0.3846338950894017, 0.21323975350091384, 0.1745071350718701, 0.2214194623257485, 0.19303546941406668, 0.22733095417804738, 0.2437107227813129, 0.21914595030013484, 0.20239886279785801, 0.20301142264085958, 0.5819900298086389, 0.18430255649897076, 0.23184078813694076, 0.19407144321936998, 0.6867488161576978, 0.22515077442990683, 0.19816505848649713, 0.5023623316887311, 0.18809043375212342, 0.18372180177314834, 0.18236711037767894, 0.15262338059516278, 0.8440020090246834, 0.19762276631534603, 0.8451892126335279, 0.177121607845375, 0.1943295951591456, 0.8150421873056984, 0.787295869953802, 0.20985065367367983, 0.2083955843709987, 0.766791063537449, 0.16608904254912704, 0.1540304320068161, 0.7315748139357059, 0.20847830562479042, 0.8174728774267108, 0.18353823019682602, 0.18874812951471287, 0.19556692464075554, 0.18388764730476448, 0.18531339219238485, 0.18027788337082806, 0.18857045047152254, 0.18879336288248616, 0.18900409464321943, 0.08255276176221127, 0.09684790866569348, 0.08966273114494305, 0.08404394323935815, 0.08294287961646474, 0.08424814361637767, 0.07912923234988789, 0.10914452609137681, 0.09588304811629678]}, "mutation_prompt": null}
{"id": "646e40ee-eb04-4387-a9bd-c6542d4f2e91", "solution": "import numpy as np\n\nclass StreamlinedHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(50, budget // 10)\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.pop_size, dim))\n        self.personal_best_positions = self.population.copy()\n        self.personal_best_values = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evals = 0\n        self.F = 0.6  # Mutated factor for diversity\n        self.CR = 0.85  # Crossover probability adjusted\n        self.omega = 0.4  # Increased inertia for exploration\n        self.phi_p = 1.5\n        self.phi_g = 1.3\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evals < self.budget:\n            indices = np.random.choice(self.pop_size, (self.pop_size, 3), replace=True)\n            mutants = np.clip(self.population[indices[:, 0]] + self.F * \n                              (self.population[indices[:, 1]] - self.population[indices[:, 2]]), *self.bounds)\n            crossover_mask = np.random.rand(self.pop_size, self.dim) < self.CR\n            trials = np.where(crossover_mask, mutants, self.population)\n\n            trial_values = np.apply_along_axis(func, 1, trials)\n            self.evals += self.pop_size\n\n            improvements = trial_values < self.personal_best_values\n            self.personal_best_positions[improvements] = trials[improvements]\n            self.personal_best_values[improvements] = trial_values[improvements]\n            if trial_values.min() < self.global_best_value:\n                self.global_best_value = trial_values.min()\n                self.global_best_position = trials[trial_values.argmin()]\n\n            r_p, r_g = np.random.rand(2, self.pop_size, self.dim)\n            self.velocities = (self.omega * self.velocities +\n                               self.phi_p * r_p * (self.personal_best_positions - self.population) +\n                               self.phi_g * r_g * (self.global_best_position - self.population))\n            self.population = np.clip(self.population + self.velocities, *self.bounds)\n\n        return self.global_best_value\n\n    def evaluate_population(self, func):\n        values = np.apply_along_axis(func, 1, self.population)\n        self.evals += self.pop_size\n        better_mask = values < self.personal_best_values\n        self.personal_best_positions[better_mask] = self.population[better_mask]\n        self.personal_best_values[better_mask] = values[better_mask]\n        if values.min() < self.global_best_value:\n            self.global_best_value = values.min()\n            self.global_best_position = self.population[values.argmin()]", "name": "StreamlinedHybridOptimizer", "description": "A streamlined hybrid optimizer enhances performance by introducing parallel evaluations and optimizing population updates.", "configspace": "", "generation": 11, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c1b54c9f-d56e-44ac-9ec0-108d61ff03cd", "metadata": {"aucs": [0.8162550476675803, 0.8267765314506066, 0.7960410115070942, 0.8211904051792472, 0.827303007905487, 0.8215650960495489, 0.8117072784894394, 0.8177929357090029, 0.8150280899750553, 0.6468448009866159, 0.6176711633598735, 0.6502585304037686, 0.6559278592253217, 0.6506250293713864, 0.6712263520501343, 0.6498077265865503, 0.659842029521147, 0.6484360084705878, 0.146816923405229, 0.14317216428427615, 0.1439877624991972, 0.13506066118742943, 0.13990283582287466, 0.1178528849452114, 0.16720996573239955, 0.16884024078766002, 0.16532276977631877, 0.11553068380922704, 0.11052374038925594, 0.12346907564156462, 0.1467006860766491, 0.11376374013331492, 0.10326165810535382, 0.12208965464905575, 0.13517694085890541, 0.11502466078709206, 0.9817231957413847, 0.9809184214674028, 0.9723681102252277, 0.9832511731760085, 0.9801691007188884, 0.9783308994890346, 0.9773333318360551, 0.9762512963187414, 0.9802636664680978, 0.6051977298311911, 0.6154842712932892, 0.5821289754062011, 0.5960108431024856, 0.6208680046047585, 0.6248664979027727, 0.6231406795683316, 0.5961205315703242, 0.6179556907943864, 0.2238313029003386, 0.7526560545037053, 0.8410157182519787, 0.20981296278565886, 0.21423567077764105, 0.2671809202479859, 0.8031531252460148, 0.2376303648592477, 0.8100767518188459, 0.22619518965591134, 0.21130037084725772, 0.20399495416182278, 0.22047135490341374, 0.1261934792554419, 0.12679946477494375, 0.20980711959511644, 0.1997214410574073, 0.21306751460801465, 0.23321217162832464, 0.21928218661216292, 0.22877145603856097, 0.2205139039512316, 0.12454089495537102, 0.23552520745183725, 0.10181565964566142, 0.21838812844315114, 0.2523220841047332, 0.04317691917188493, 0.03198727231153242, 0.021371212304050813, 0.019324989565892237, 9.999999999998899e-05, 0.032143617104673505, 9.999999999998899e-05, 9.999999999998899e-05, 0.06407353956739426, 0.08547048821683545, 0.1325871884913702, 0.08380818638201504, 0.10185245151523337, 0.08948470323953173, 0.05954177105526792, 0.06599426768247862, 0.12207892015730015, 0.06616700401828346, 0.13171179559869395, 0.06214307852590495, 0.21070113171533544, 0.0796257978648719, 0.11552255246780585, 0.06915058722268208, 0.12167551305429936, 0.1240463758695145, 0.10275529407752582, 0.14125181865718495, 0.2913048862399048, 0.16400685586045105, 0.0956124649607264, 0.20455604200065614, 0.24950003913636454, 0.058891453184697795, 0.14123154372313151, 0.08780489135863334, 0.5225553196896677, 0.5570069477574991, 0.5593564802738381, 0.5587107079324866, 0.5483550977616043, 0.5623978805930477, 0.5581810826332578, 0.5569002383053718, 0.5573178327005481, 0.11310097270832498, 0.13636265255732882, 0.10502857618293293, 0.14077066337852595, 0.125251032332779, 0.15646937887381795, 0.143940524141423, 0.5028504871564682, 0.12319005607195199, 0.19948496838249563, 0.2565398013919138, 0.3293480662094642, 0.18909093833516177, 0.3232930170371071, 0.20933443039943367, 0.4824955706708126, 0.13785604680393648, 0.2562265091490862, 0.5299751527111931, 0.505984740812189, 0.3556415552799921, 0.39206295018250414, 0.43339109235308015, 0.557752817418576, 0.5059003691410802, 0.5393620113658798, 0.5726062372933938, 0.2382052249491028, 0.2209168258273151, 0.25462776506682405, 0.35995346706877973, 0.19244516436456416, 0.3386019768838904, 0.4256238705837554, 0.36355529865090963, 0.3846338950894017, 0.21323975350091384, 0.1745071350718701, 0.2214194623257485, 0.19303546941406668, 0.22733095417804738, 0.2437107227813129, 0.21914595030013484, 0.20239886279785801, 0.20301142264085958, 0.5819900298086389, 0.18430255649897076, 0.23184078813694076, 0.19407144321936998, 0.6867488161576978, 0.22515077442990683, 0.19816505848649713, 0.5023623316887311, 0.18809043375212342, 0.18372180177314834, 0.18236711037767894, 0.15262338059516278, 0.8440020090246834, 0.19762276631534603, 0.8451892126335279, 0.177121607845375, 0.1943295951591456, 0.8150421873056984, 0.787295869953802, 0.20985065367367983, 0.2083955843709987, 0.766791063537449, 0.16608904254912704, 0.1540304320068161, 0.7315748139357059, 0.20847830562479042, 0.8174728774267108, 0.18353823019682602, 0.18874812951471287, 0.19556692464075554, 0.18388764730476448, 0.18531339219238485, 0.18027788337082806, 0.18857045047152254, 0.18879336288248616, 0.18900409464321943, 0.08255276176221127, 0.09684790866569348, 0.08966273114494305, 0.08404394323935815, 0.08294287961646474, 0.08424814361637767, 0.07912923234988789, 0.10914452609137681, 0.09588304811629678]}, "mutation_prompt": null}
{"id": "60705ee0-3a86-4c09-b892-15d96101d3aa", "solution": "import numpy as np\n\nclass EnhancedStreamlinedHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(40, budget // 12)\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, dim))\n        self.personal_best_positions = self.population.copy()\n        self.personal_best_values = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evals = 0\n        self.F = 0.5  \n        self.CR = 0.75  \n        self.omega = 0.5  \n        self.phi_p = 1.4\n        self.phi_g = 1.2\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evals < self.budget:\n            indices = np.random.randint(0, self.pop_size, (self.pop_size, 2))\n            mutants = np.clip(self.population[indices[:, 0]] + self.F * \n                              (self.population[indices[:, 1]] - self.population[np.random.randint(0, self.pop_size, self.pop_size)]), *self.bounds)\n            crossover_mask = np.random.rand(self.pop_size, self.dim) < self.CR\n            trials = np.where(crossover_mask, mutants, self.population)\n\n            trial_values = np.apply_along_axis(func, 1, trials)\n            self.evals += self.pop_size\n\n            improvements = trial_values < self.personal_best_values\n            self.personal_best_positions = np.where(improvements[:, np.newaxis], trials, self.personal_best_positions)\n            self.personal_best_values = np.where(improvements, trial_values, self.personal_best_values)\n            \n            if trial_values.min() < self.global_best_value:\n                self.global_best_value = trial_values.min()\n                self.global_best_position = trials[trial_values.argmin()]\n\n            r_p, r_g = np.random.rand(2, self.pop_size, self.dim)\n            self.velocities = (self.omega * self.velocities +\n                               r_p * self.phi_p * (self.personal_best_positions - self.population) +\n                               r_g * self.phi_g * (self.global_best_position - self.population))\n            self.population = np.clip(self.population + self.velocities, *self.bounds)\n\n        return self.global_best_value\n\n    def evaluate_population(self, func):\n        values = np.apply_along_axis(func, 1, self.population)\n        self.evals += self.pop_size\n        better_mask = values < self.personal_best_values\n        self.personal_best_positions = np.where(better_mask[:, np.newaxis], self.population, self.personal_best_positions)\n        self.personal_best_values = np.where(better_mask, values, self.personal_best_values)\n        if values.min() < self.global_best_value:\n            self.global_best_value = values.min()\n            self.global_best_position = self.population[values.argmin()]", "name": "EnhancedStreamlinedHybridOptimizer", "description": "An enhanced streamlined hybrid optimizer integrates adaptive parameters and memory-efficient updates for improved black-box optimization.", "configspace": "", "generation": 20, "fitness": 0.3469833936397304, "feedback": "The algorithm EnhancedStreamlinedHybridOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.28.", "error": "", "parent_id": "c1b54c9f-d56e-44ac-9ec0-108d61ff03cd", "metadata": {"aucs": [0.856733392598368, 0.8509725759854837, 0.8527163834762455, 0.8625290691856518, 0.860595339419562, 0.8683506795710033, 0.8612885690789666, 0.8564437916042273, 0.8570447181036654, 0.7041700400634039, 0.729347450739881, 0.7077755504836262, 0.7260464158319955, 0.6751053949986039, 0.7082821474728128, 0.7068648391624883, 0.7084993744432546, 0.7018090793505407, 0.1732477109960877, 0.16897289837541685, 0.15112522632811198, 0.1732994375641761, 0.1710741272437759, 0.1782178109958924, 0.6175433772018752, 0.16766695376915963, 0.15438633893083875, 0.15048253819432666, 0.10857964980172996, 0.13671405651048685, 0.1462015314155406, 0.12548908275482973, 0.13492762855964324, 0.11174693980998907, 0.13271492948382124, 0.15210884461391505, 0.9756283754747057, 0.9797377005984748, 0.9794720760530221, 0.983129946667985, 0.9860667820925465, 0.9805679789109679, 0.9834206618585821, 0.9839976572357264, 0.9782544652034478, 0.7057695688305416, 0.7202909873418701, 0.7029214755641143, 0.6910860676452268, 0.6830561105755584, 0.7215472452564311, 0.7116000279551241, 0.6690578294709056, 0.7133760892450185, 0.22758808172858758, 0.3823105069275279, 0.8712963717182044, 0.37939227769773887, 0.8494784952610248, 0.2765908714591644, 0.16401581785510277, 0.2223189333732516, 0.3451363860910821, 0.21184209403735343, 0.140464494701536, 0.29530256211243466, 0.23233966014991725, 0.22141417688238074, 0.22166398984062952, 0.22206742196827378, 0.2135911422716873, 0.22354203669133477, 0.2296065545339323, 0.20084734304418927, 0.22295010400185256, 0.2195350283112263, 0.252419195152907, 0.2214998965968561, 0.2472510731318346, 0.25725943570638243, 0.25634877056406447, 0.05828969164662179, 9.999999999998899e-05, 0.006327468420507465, 0.03955556038526342, 0.06956435244181225, 9.999999999998899e-05, 0.03665397559081285, 0.008111401001842045, 0.07176618253537304, 0.08356329364674675, 0.029426420240988627, 0.09928616894012599, 0.0653249093671604, 0.02207931271316954, 0.024351868497560103, 0.1421994236972307, 0.10449440570689805, 0.05810120074909919, 0.12889396724625202, 0.16423780555297995, 0.09135560747311733, 0.07473088455013599, 0.0741431190481675, 0.1120722625700884, 0.22132844844390842, 0.17111351651324536, 0.19806217781993563, 0.1267850649729333, 0.12752847882475216, 0.08024369577169621, 0.13152492418428208, 0.06863152823307805, 0.1461472266015693, 0.10060119224898101, 0.1703877272392238, 0.060257455280869565, 0.551572279410049, 0.5408238398807412, 0.556951246341924, 0.5389164193229208, 0.6075126584821884, 0.5710647354229086, 0.5844089127418863, 0.6106991692580781, 0.6021414345466235, 0.13244806024777644, 0.10765991614599557, 0.6407886970035248, 0.13849105240305637, 0.13568417196800087, 0.14696549933877046, 0.1095597408146659, 0.12136875790476898, 0.12005177463818106, 0.6147265295972888, 0.4111903803959138, 0.22277220658483776, 0.6280903020231801, 0.44037117008192095, 0.22499481881231298, 0.257164952088642, 0.21373747454390646, 0.6777785359338083, 0.39305302048580937, 0.4002264353944903, 0.43146971662777034, 0.5057743474335802, 0.2859668539882815, 0.574625037765587, 0.6474071912234483, 0.6934284784333673, 0.562942624121369, 0.29277090168581255, 0.2835027596311699, 0.2790388745997979, 0.3194724486073218, 0.3405777770925543, 0.4204784902923535, 0.3338562640270666, 0.41728137228647666, 0.3281005061221366, 0.20788914797048663, 0.19659531087612558, 0.1964491617479921, 0.21355337155383258, 0.23267959706034425, 0.2229516769017943, 0.20393584139999343, 0.22397976888880144, 0.26520176294961684, 0.22022442459752467, 0.6446357439569116, 0.7011299671470912, 0.21703365561927002, 0.2057089115095979, 0.20461929658896894, 0.20278373233434288, 0.2166599258997085, 0.7361253532025454, 0.2094962401565983, 0.16792691576997187, 0.1302502366488456, 0.8775680319158787, 0.19894704160270937, 0.11858436574656239, 0.1418094315094488, 0.1684543578405635, 0.21069420134581118, 0.8543710139686349, 0.21014111509583544, 0.1261500479745986, 0.8025850455674669, 0.16986392365134084, 0.1543596343951793, 0.10471239669092991, 0.2095508242010483, 0.837449626584436, 0.17126468796229966, 0.18952254470418506, 0.1829084378161081, 0.19131252411238142, 0.20105968093183624, 0.1938896656237159, 0.18242023743548885, 0.18992510921074146, 0.21064555801035445, 0.0939992043353779, 0.09248948729292117, 0.08056037188322318, 0.09069145151286062, 0.08647931216911953, 0.10606053782261826, 0.11384806296384609, 0.0835360609270589, 0.09135277477800896]}, "mutation_prompt": null}
{"id": "e8527313-dfdc-41ed-b477-a1371d15f7ff", "solution": "import numpy as np\n\nclass EnhancedStreamlinedHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(40, budget // 12)\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, dim))\n        self.personal_best_positions = self.population.copy()\n        self.personal_best_values = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evals = 0\n        self.F = 0.5  \n        self.CR = 0.75  \n        self.omega = 0.5  \n        self.phi_p = 1.4\n        self.phi_g = 1.2\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evals < self.budget:\n            indices = np.random.randint(0, self.pop_size, (self.pop_size, 2))\n            mutants = np.clip(self.population[indices[:, 0]] + self.F * \n                              (self.population[indices[:, 1]] - self.population[np.random.randint(0, self.pop_size, self.pop_size)]), *self.bounds)\n            crossover_mask = np.random.rand(self.pop_size, self.dim) < self.CR\n            trials = np.where(crossover_mask, mutants, self.population)\n\n            trial_values = np.apply_along_axis(func, 1, trials)\n            self.evals += self.pop_size\n\n            improvements = trial_values < self.personal_best_values\n            self.personal_best_positions = np.where(improvements[:, np.newaxis], trials, self.personal_best_positions)\n            self.personal_best_values = np.where(improvements, trial_values, self.personal_best_values)\n            \n            if trial_values.min() < self.global_best_value:\n                self.global_best_value = trial_values.min()\n                self.global_best_position = trials[trial_values.argmin()]\n\n            r_p, r_g = np.random.rand(2, self.pop_size, self.dim)\n            self.velocities = (self.omega * self.velocities +\n                               r_p * self.phi_p * (self.personal_best_positions - self.population) +\n                               r_g * self.phi_g * (self.global_best_position - self.population))\n            self.population = np.clip(self.population + self.velocities, *self.bounds)\n\n        return self.global_best_value\n\n    def evaluate_population(self, func):\n        values = np.apply_along_axis(func, 1, self.population)\n        self.evals += self.pop_size\n        better_mask = values < self.personal_best_values\n        self.personal_best_positions = np.where(better_mask[:, np.newaxis], self.population, self.personal_best_positions)\n        self.personal_best_values = np.where(better_mask, values, self.personal_best_values)\n        if values.min() < self.global_best_value:\n            self.global_best_value = values.min()\n            self.global_best_position = self.population[values.argmin()]", "name": "EnhancedStreamlinedHybridOptimizer", "description": "An enhanced streamlined hybrid optimizer integrates adaptive parameters and memory-efficient updates for improved black-box optimization.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "60705ee0-3a86-4c09-b892-15d96101d3aa", "metadata": {"aucs": [0.856733392598368, 0.8509725759854837, 0.8527163834762455, 0.8625290691856518, 0.860595339419562, 0.8683506795710033, 0.8612885690789666, 0.8564437916042273, 0.8570447181036654, 0.7041700400634039, 0.729347450739881, 0.7077755504836262, 0.7260464158319955, 0.6751053949986039, 0.7082821474728128, 0.7068648391624883, 0.7084993744432546, 0.7018090793505407, 0.1732477109960877, 0.16897289837541685, 0.15112522632811198, 0.1732994375641761, 0.1710741272437759, 0.1782178109958924, 0.6175433772018752, 0.16766695376915963, 0.15438633893083875, 0.15048253819432666, 0.10857964980172996, 0.13671405651048685, 0.1462015314155406, 0.12548908275482973, 0.13492762855964324, 0.11174693980998907, 0.13271492948382124, 0.15210884461391505, 0.9756283754747057, 0.9797377005984748, 0.9794720760530221, 0.983129946667985, 0.9860667820925465, 0.9805679789109679, 0.9834206618585821, 0.9839976572357264, 0.9782544652034478, 0.7057695688305416, 0.7202909873418701, 0.7029214755641143, 0.6910860676452268, 0.6830561105755584, 0.7215472452564311, 0.7116000279551241, 0.6690578294709056, 0.7133760892450185, 0.22758808172858758, 0.3823105069275279, 0.8712963717182044, 0.37939227769773887, 0.8494784952610248, 0.2765908714591644, 0.16401581785510277, 0.2223189333732516, 0.3451363860910821, 0.21184209403735343, 0.140464494701536, 0.29530256211243466, 0.23233966014991725, 0.22141417688238074, 0.22166398984062952, 0.22206742196827378, 0.2135911422716873, 0.22354203669133477, 0.2296065545339323, 0.20084734304418927, 0.22295010400185256, 0.2195350283112263, 0.252419195152907, 0.2214998965968561, 0.2472510731318346, 0.25725943570638243, 0.25634877056406447, 0.05828969164662179, 9.999999999998899e-05, 0.006327468420507465, 0.03955556038526342, 0.06956435244181225, 9.999999999998899e-05, 0.03665397559081285, 0.008111401001842045, 0.07176618253537304, 0.08356329364674675, 0.029426420240988627, 0.09928616894012599, 0.0653249093671604, 0.02207931271316954, 0.024351868497560103, 0.1421994236972307, 0.10449440570689805, 0.05810120074909919, 0.12889396724625202, 0.16423780555297995, 0.09135560747311733, 0.07473088455013599, 0.0741431190481675, 0.1120722625700884, 0.22132844844390842, 0.17111351651324536, 0.19806217781993563, 0.1267850649729333, 0.12752847882475216, 0.08024369577169621, 0.13152492418428208, 0.06863152823307805, 0.1461472266015693, 0.10060119224898101, 0.1703877272392238, 0.060257455280869565, 0.551572279410049, 0.5408238398807412, 0.556951246341924, 0.5389164193229208, 0.6075126584821884, 0.5710647354229086, 0.5844089127418863, 0.6106991692580781, 0.6021414345466235, 0.13244806024777644, 0.10765991614599557, 0.6407886970035248, 0.13849105240305637, 0.13568417196800087, 0.14696549933877046, 0.1095597408146659, 0.12136875790476898, 0.12005177463818106, 0.6147265295972888, 0.4111903803959138, 0.22277220658483776, 0.6280903020231801, 0.44037117008192095, 0.22499481881231298, 0.257164952088642, 0.21373747454390646, 0.6777785359338083, 0.39305302048580937, 0.4002264353944903, 0.43146971662777034, 0.5057743474335802, 0.2859668539882815, 0.574625037765587, 0.6474071912234483, 0.6934284784333673, 0.562942624121369, 0.29277090168581255, 0.2835027596311699, 0.2790388745997979, 0.3194724486073218, 0.3405777770925543, 0.4204784902923535, 0.3338562640270666, 0.41728137228647666, 0.3281005061221366, 0.20788914797048663, 0.19659531087612558, 0.1964491617479921, 0.21355337155383258, 0.23267959706034425, 0.2229516769017943, 0.20393584139999343, 0.22397976888880144, 0.26520176294961684, 0.22022442459752467, 0.6446357439569116, 0.7011299671470912, 0.21703365561927002, 0.2057089115095979, 0.20461929658896894, 0.20278373233434288, 0.2166599258997085, 0.7361253532025454, 0.2094962401565983, 0.16792691576997187, 0.1302502366488456, 0.8775680319158787, 0.19894704160270937, 0.11858436574656239, 0.1418094315094488, 0.1684543578405635, 0.21069420134581118, 0.8543710139686349, 0.21014111509583544, 0.1261500479745986, 0.8025850455674669, 0.16986392365134084, 0.1543596343951793, 0.10471239669092991, 0.2095508242010483, 0.837449626584436, 0.17126468796229966, 0.18952254470418506, 0.1829084378161081, 0.19131252411238142, 0.20105968093183624, 0.1938896656237159, 0.18242023743548885, 0.18992510921074146, 0.21064555801035445, 0.0939992043353779, 0.09248948729292117, 0.08056037188322318, 0.09069145151286062, 0.08647931216911953, 0.10606053782261826, 0.11384806296384609, 0.0835360609270589, 0.09135277477800896]}, "mutation_prompt": null}
{"id": "393e540c-58be-4dac-bb02-89c098b28dc7", "solution": "import numpy as np\n\nclass EnhancedStreamlinedHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(40, budget // 12)\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, dim))\n        self.personal_best_positions = self.population.copy()\n        self.personal_best_values = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evals = 0\n        self.F = 0.5  \n        self.CR = 0.75  \n        self.omega = 0.5  \n        self.phi_p = 1.4\n        self.phi_g = 1.2\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evals < self.budget:\n            indices = np.random.randint(0, self.pop_size, (self.pop_size, 2))\n            mutants = np.clip(self.population[indices[:, 0]] + self.F * \n                              (self.population[indices[:, 1]] - self.population[np.random.randint(0, self.pop_size, self.pop_size)]), *self.bounds)\n            crossover_mask = np.random.rand(self.pop_size, self.dim) < self.CR\n            trials = np.where(crossover_mask, mutants, self.population)\n\n            trial_values = np.apply_along_axis(func, 1, trials)\n            self.evals += self.pop_size\n\n            improvements = trial_values < self.personal_best_values\n            self.personal_best_positions = np.where(improvements[:, np.newaxis], trials, self.personal_best_positions)\n            self.personal_best_values = np.where(improvements, trial_values, self.personal_best_values)\n            \n            if trial_values.min() < self.global_best_value:\n                self.global_best_value = trial_values.min()\n                self.global_best_position = trials[trial_values.argmin()]\n\n            r_p, r_g = np.random.rand(2, self.pop_size, self.dim)\n            self.velocities = (self.omega * self.velocities +\n                               r_p * self.phi_p * (self.personal_best_positions - self.population) +\n                               r_g * self.phi_g * (self.global_best_position - self.population))\n            self.population = np.clip(self.population + self.velocities, *self.bounds)\n\n        return self.global_best_value\n\n    def evaluate_population(self, func):\n        values = np.apply_along_axis(func, 1, self.population)\n        self.evals += self.pop_size\n        better_mask = values < self.personal_best_values\n        self.personal_best_positions = np.where(better_mask[:, np.newaxis], self.population, self.personal_best_positions)\n        self.personal_best_values = np.where(better_mask, values, self.personal_best_values)\n        if values.min() < self.global_best_value:\n            self.global_best_value = values.min()\n            self.global_best_position = self.population[values.argmin()]", "name": "EnhancedStreamlinedHybridOptimizer", "description": "An enhanced streamlined hybrid optimizer integrates adaptive parameters and memory-efficient updates for improved black-box optimization.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "60705ee0-3a86-4c09-b892-15d96101d3aa", "metadata": {"aucs": [0.856733392598368, 0.8509725759854837, 0.8527163834762455, 0.8625290691856518, 0.860595339419562, 0.8683506795710033, 0.8612885690789666, 0.8564437916042273, 0.8570447181036654, 0.7041700400634039, 0.729347450739881, 0.7077755504836262, 0.7260464158319955, 0.6751053949986039, 0.7082821474728128, 0.7068648391624883, 0.7084993744432546, 0.7018090793505407, 0.1732477109960877, 0.16897289837541685, 0.15112522632811198, 0.1732994375641761, 0.1710741272437759, 0.1782178109958924, 0.6175433772018752, 0.16766695376915963, 0.15438633893083875, 0.15048253819432666, 0.10857964980172996, 0.13671405651048685, 0.1462015314155406, 0.12548908275482973, 0.13492762855964324, 0.11174693980998907, 0.13271492948382124, 0.15210884461391505, 0.9756283754747057, 0.9797377005984748, 0.9794720760530221, 0.983129946667985, 0.9860667820925465, 0.9805679789109679, 0.9834206618585821, 0.9839976572357264, 0.9782544652034478, 0.7057695688305416, 0.7202909873418701, 0.7029214755641143, 0.6910860676452268, 0.6830561105755584, 0.7215472452564311, 0.7116000279551241, 0.6690578294709056, 0.7133760892450185, 0.22758808172858758, 0.3823105069275279, 0.8712963717182044, 0.37939227769773887, 0.8494784952610248, 0.2765908714591644, 0.16401581785510277, 0.2223189333732516, 0.3451363860910821, 0.21184209403735343, 0.140464494701536, 0.29530256211243466, 0.23233966014991725, 0.22141417688238074, 0.22166398984062952, 0.22206742196827378, 0.2135911422716873, 0.22354203669133477, 0.2296065545339323, 0.20084734304418927, 0.22295010400185256, 0.2195350283112263, 0.252419195152907, 0.2214998965968561, 0.2472510731318346, 0.25725943570638243, 0.25634877056406447, 0.05828969164662179, 9.999999999998899e-05, 0.006327468420507465, 0.03955556038526342, 0.06956435244181225, 9.999999999998899e-05, 0.03665397559081285, 0.008111401001842045, 0.07176618253537304, 0.08356329364674675, 0.029426420240988627, 0.09928616894012599, 0.0653249093671604, 0.02207931271316954, 0.024351868497560103, 0.1421994236972307, 0.10449440570689805, 0.05810120074909919, 0.12889396724625202, 0.16423780555297995, 0.09135560747311733, 0.07473088455013599, 0.0741431190481675, 0.1120722625700884, 0.22132844844390842, 0.17111351651324536, 0.19806217781993563, 0.1267850649729333, 0.12752847882475216, 0.08024369577169621, 0.13152492418428208, 0.06863152823307805, 0.1461472266015693, 0.10060119224898101, 0.1703877272392238, 0.060257455280869565, 0.551572279410049, 0.5408238398807412, 0.556951246341924, 0.5389164193229208, 0.6075126584821884, 0.5710647354229086, 0.5844089127418863, 0.6106991692580781, 0.6021414345466235, 0.13244806024777644, 0.10765991614599557, 0.6407886970035248, 0.13849105240305637, 0.13568417196800087, 0.14696549933877046, 0.1095597408146659, 0.12136875790476898, 0.12005177463818106, 0.6147265295972888, 0.4111903803959138, 0.22277220658483776, 0.6280903020231801, 0.44037117008192095, 0.22499481881231298, 0.257164952088642, 0.21373747454390646, 0.6777785359338083, 0.39305302048580937, 0.4002264353944903, 0.43146971662777034, 0.5057743474335802, 0.2859668539882815, 0.574625037765587, 0.6474071912234483, 0.6934284784333673, 0.562942624121369, 0.29277090168581255, 0.2835027596311699, 0.2790388745997979, 0.3194724486073218, 0.3405777770925543, 0.4204784902923535, 0.3338562640270666, 0.41728137228647666, 0.3281005061221366, 0.20788914797048663, 0.19659531087612558, 0.1964491617479921, 0.21355337155383258, 0.23267959706034425, 0.2229516769017943, 0.20393584139999343, 0.22397976888880144, 0.26520176294961684, 0.22022442459752467, 0.6446357439569116, 0.7011299671470912, 0.21703365561927002, 0.2057089115095979, 0.20461929658896894, 0.20278373233434288, 0.2166599258997085, 0.7361253532025454, 0.2094962401565983, 0.16792691576997187, 0.1302502366488456, 0.8775680319158787, 0.19894704160270937, 0.11858436574656239, 0.1418094315094488, 0.1684543578405635, 0.21069420134581118, 0.8543710139686349, 0.21014111509583544, 0.1261500479745986, 0.8025850455674669, 0.16986392365134084, 0.1543596343951793, 0.10471239669092991, 0.2095508242010483, 0.837449626584436, 0.17126468796229966, 0.18952254470418506, 0.1829084378161081, 0.19131252411238142, 0.20105968093183624, 0.1938896656237159, 0.18242023743548885, 0.18992510921074146, 0.21064555801035445, 0.0939992043353779, 0.09248948729292117, 0.08056037188322318, 0.09069145151286062, 0.08647931216911953, 0.10606053782261826, 0.11384806296384609, 0.0835360609270589, 0.09135277477800896]}, "mutation_prompt": null}
{"id": "7ecb92de-78e2-4706-aef7-e5a4b5451ff7", "solution": "import numpy as np\n\nclass EnhancedStreamlinedHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(40, budget // 12)\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, dim))\n        self.personal_best_positions = self.population.copy()\n        self.personal_best_values = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evals = 0\n        self.F = 0.5  \n        self.CR = 0.75  \n        self.omega = 0.5  \n        self.phi_p = 1.4\n        self.phi_g = 1.2\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evals < self.budget:\n            indices = np.random.randint(0, self.pop_size, (self.pop_size, 2))\n            mutants = np.clip(self.population[indices[:, 0]] + self.F * \n                              (self.population[indices[:, 1]] - self.population[np.random.randint(0, self.pop_size, self.pop_size)]), *self.bounds)\n            crossover_mask = np.random.rand(self.pop_size, self.dim) < self.CR\n            trials = np.where(crossover_mask, mutants, self.population)\n\n            trial_values = np.apply_along_axis(func, 1, trials)\n            self.evals += self.pop_size\n\n            improvements = trial_values < self.personal_best_values\n            self.personal_best_positions = np.where(improvements[:, np.newaxis], trials, self.personal_best_positions)\n            self.personal_best_values = np.where(improvements, trial_values, self.personal_best_values)\n            \n            if trial_values.min() < self.global_best_value:\n                self.global_best_value = trial_values.min()\n                self.global_best_position = trials[trial_values.argmin()]\n\n            r_p, r_g = np.random.rand(2, self.pop_size, self.dim)\n            self.velocities = (self.omega * self.velocities +\n                               r_p * self.phi_p * (self.personal_best_positions - self.population) +\n                               r_g * self.phi_g * (self.global_best_position - self.population))\n            self.population = np.clip(self.population + self.velocities, *self.bounds)\n\n        return self.global_best_value\n\n    def evaluate_population(self, func):\n        values = np.apply_along_axis(func, 1, self.population)\n        self.evals += self.pop_size\n        better_mask = values < self.personal_best_values\n        self.personal_best_positions = np.where(better_mask[:, np.newaxis], self.population, self.personal_best_positions)\n        self.personal_best_values = np.where(better_mask, values, self.personal_best_values)\n        if values.min() < self.global_best_value:\n            self.global_best_value = values.min()\n            self.global_best_position = self.population[values.argmin()]", "name": "EnhancedStreamlinedHybridOptimizer", "description": "An enhanced streamlined hybrid optimizer integrates adaptive parameters and memory-efficient updates for improved black-box optimization.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "60705ee0-3a86-4c09-b892-15d96101d3aa", "metadata": {"aucs": [0.856733392598368, 0.8509725759854837, 0.8527163834762455, 0.8625290691856518, 0.860595339419562, 0.8683506795710033, 0.8612885690789666, 0.8564437916042273, 0.8570447181036654, 0.7041700400634039, 0.729347450739881, 0.7077755504836262, 0.7260464158319955, 0.6751053949986039, 0.7082821474728128, 0.7068648391624883, 0.7084993744432546, 0.7018090793505407, 0.1732477109960877, 0.16897289837541685, 0.15112522632811198, 0.1732994375641761, 0.1710741272437759, 0.1782178109958924, 0.6175433772018752, 0.16766695376915963, 0.15438633893083875, 0.15048253819432666, 0.10857964980172996, 0.13671405651048685, 0.1462015314155406, 0.12548908275482973, 0.13492762855964324, 0.11174693980998907, 0.13271492948382124, 0.15210884461391505, 0.9756283754747057, 0.9797377005984748, 0.9794720760530221, 0.983129946667985, 0.9860667820925465, 0.9805679789109679, 0.9834206618585821, 0.9839976572357264, 0.9782544652034478, 0.7057695688305416, 0.7202909873418701, 0.7029214755641143, 0.6910860676452268, 0.6830561105755584, 0.7215472452564311, 0.7116000279551241, 0.6690578294709056, 0.7133760892450185, 0.22758808172858758, 0.3823105069275279, 0.8712963717182044, 0.37939227769773887, 0.8494784952610248, 0.2765908714591644, 0.16401581785510277, 0.2223189333732516, 0.3451363860910821, 0.21184209403735343, 0.140464494701536, 0.29530256211243466, 0.23233966014991725, 0.22141417688238074, 0.22166398984062952, 0.22206742196827378, 0.2135911422716873, 0.22354203669133477, 0.2296065545339323, 0.20084734304418927, 0.22295010400185256, 0.2195350283112263, 0.252419195152907, 0.2214998965968561, 0.2472510731318346, 0.25725943570638243, 0.25634877056406447, 0.05828969164662179, 9.999999999998899e-05, 0.006327468420507465, 0.03955556038526342, 0.06956435244181225, 9.999999999998899e-05, 0.03665397559081285, 0.008111401001842045, 0.07176618253537304, 0.08356329364674675, 0.029426420240988627, 0.09928616894012599, 0.0653249093671604, 0.02207931271316954, 0.024351868497560103, 0.1421994236972307, 0.10449440570689805, 0.05810120074909919, 0.12889396724625202, 0.16423780555297995, 0.09135560747311733, 0.07473088455013599, 0.0741431190481675, 0.1120722625700884, 0.22132844844390842, 0.17111351651324536, 0.19806217781993563, 0.1267850649729333, 0.12752847882475216, 0.08024369577169621, 0.13152492418428208, 0.06863152823307805, 0.1461472266015693, 0.10060119224898101, 0.1703877272392238, 0.060257455280869565, 0.551572279410049, 0.5408238398807412, 0.556951246341924, 0.5389164193229208, 0.6075126584821884, 0.5710647354229086, 0.5844089127418863, 0.6106991692580781, 0.6021414345466235, 0.13244806024777644, 0.10765991614599557, 0.6407886970035248, 0.13849105240305637, 0.13568417196800087, 0.14696549933877046, 0.1095597408146659, 0.12136875790476898, 0.12005177463818106, 0.6147265295972888, 0.4111903803959138, 0.22277220658483776, 0.6280903020231801, 0.44037117008192095, 0.22499481881231298, 0.257164952088642, 0.21373747454390646, 0.6777785359338083, 0.39305302048580937, 0.4002264353944903, 0.43146971662777034, 0.5057743474335802, 0.2859668539882815, 0.574625037765587, 0.6474071912234483, 0.6934284784333673, 0.562942624121369, 0.29277090168581255, 0.2835027596311699, 0.2790388745997979, 0.3194724486073218, 0.3405777770925543, 0.4204784902923535, 0.3338562640270666, 0.41728137228647666, 0.3281005061221366, 0.20788914797048663, 0.19659531087612558, 0.1964491617479921, 0.21355337155383258, 0.23267959706034425, 0.2229516769017943, 0.20393584139999343, 0.22397976888880144, 0.26520176294961684, 0.22022442459752467, 0.6446357439569116, 0.7011299671470912, 0.21703365561927002, 0.2057089115095979, 0.20461929658896894, 0.20278373233434288, 0.2166599258997085, 0.7361253532025454, 0.2094962401565983, 0.16792691576997187, 0.1302502366488456, 0.8775680319158787, 0.19894704160270937, 0.11858436574656239, 0.1418094315094488, 0.1684543578405635, 0.21069420134581118, 0.8543710139686349, 0.21014111509583544, 0.1261500479745986, 0.8025850455674669, 0.16986392365134084, 0.1543596343951793, 0.10471239669092991, 0.2095508242010483, 0.837449626584436, 0.17126468796229966, 0.18952254470418506, 0.1829084378161081, 0.19131252411238142, 0.20105968093183624, 0.1938896656237159, 0.18242023743548885, 0.18992510921074146, 0.21064555801035445, 0.0939992043353779, 0.09248948729292117, 0.08056037188322318, 0.09069145151286062, 0.08647931216911953, 0.10606053782261826, 0.11384806296384609, 0.0835360609270589, 0.09135277477800896]}, "mutation_prompt": null}
{"id": "6d54af9d-83c0-4fa4-bab8-077bb03ed564", "solution": "import numpy as np\n\nclass EnhancedStreamlinedHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(40, budget // 12)\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, dim))\n        self.personal_best_positions = self.population.copy()\n        self.personal_best_values = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evals = 0\n        self.F = 0.5  \n        self.CR = 0.75  \n        self.omega = 0.5  \n        self.phi_p = 1.4\n        self.phi_g = 1.2\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evals < self.budget:\n            indices = np.random.randint(0, self.pop_size, (self.pop_size, 2))\n            mutants = np.clip(self.population[indices[:, 0]] + self.F * \n                              (self.population[indices[:, 1]] - self.population[np.random.randint(0, self.pop_size, self.pop_size)]), *self.bounds)\n            crossover_mask = np.random.rand(self.pop_size, self.dim) < self.CR\n            trials = np.where(crossover_mask, mutants, self.population)\n\n            trial_values = np.apply_along_axis(func, 1, trials)\n            self.evals += self.pop_size\n\n            improvements = trial_values < self.personal_best_values\n            self.personal_best_positions = np.where(improvements[:, np.newaxis], trials, self.personal_best_positions)\n            self.personal_best_values = np.where(improvements, trial_values, self.personal_best_values)\n            \n            if trial_values.min() < self.global_best_value:\n                self.global_best_value = trial_values.min()\n                self.global_best_position = trials[trial_values.argmin()]\n\n            r_p, r_g = np.random.rand(2, self.pop_size, self.dim)\n            self.velocities = (self.omega * self.velocities +\n                               r_p * self.phi_p * (self.personal_best_positions - self.population) +\n                               r_g * self.phi_g * (self.global_best_position - self.population))\n            self.population = np.clip(self.population + self.velocities, *self.bounds)\n\n        return self.global_best_value\n\n    def evaluate_population(self, func):\n        values = np.apply_along_axis(func, 1, self.population)\n        self.evals += self.pop_size\n        better_mask = values < self.personal_best_values\n        self.personal_best_positions = np.where(better_mask[:, np.newaxis], self.population, self.personal_best_positions)\n        self.personal_best_values = np.where(better_mask, values, self.personal_best_values)\n        if values.min() < self.global_best_value:\n            self.global_best_value = values.min()\n            self.global_best_position = self.population[values.argmin()]", "name": "EnhancedStreamlinedHybridOptimizer", "description": "An enhanced streamlined hybrid optimizer integrates adaptive parameters and memory-efficient updates for improved black-box optimization.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "60705ee0-3a86-4c09-b892-15d96101d3aa", "metadata": {"aucs": [0.856733392598368, 0.8509725759854837, 0.8527163834762455, 0.8625290691856518, 0.860595339419562, 0.8683506795710033, 0.8612885690789666, 0.8564437916042273, 0.8570447181036654, 0.7041700400634039, 0.729347450739881, 0.7077755504836262, 0.7260464158319955, 0.6751053949986039, 0.7082821474728128, 0.7068648391624883, 0.7084993744432546, 0.7018090793505407, 0.1732477109960877, 0.16897289837541685, 0.15112522632811198, 0.1732994375641761, 0.1710741272437759, 0.1782178109958924, 0.6175433772018752, 0.16766695376915963, 0.15438633893083875, 0.15048253819432666, 0.10857964980172996, 0.13671405651048685, 0.1462015314155406, 0.12548908275482973, 0.13492762855964324, 0.11174693980998907, 0.13271492948382124, 0.15210884461391505, 0.9756283754747057, 0.9797377005984748, 0.9794720760530221, 0.983129946667985, 0.9860667820925465, 0.9805679789109679, 0.9834206618585821, 0.9839976572357264, 0.9782544652034478, 0.7057695688305416, 0.7202909873418701, 0.7029214755641143, 0.6910860676452268, 0.6830561105755584, 0.7215472452564311, 0.7116000279551241, 0.6690578294709056, 0.7133760892450185, 0.22758808172858758, 0.3823105069275279, 0.8712963717182044, 0.37939227769773887, 0.8494784952610248, 0.2765908714591644, 0.16401581785510277, 0.2223189333732516, 0.3451363860910821, 0.21184209403735343, 0.140464494701536, 0.29530256211243466, 0.23233966014991725, 0.22141417688238074, 0.22166398984062952, 0.22206742196827378, 0.2135911422716873, 0.22354203669133477, 0.2296065545339323, 0.20084734304418927, 0.22295010400185256, 0.2195350283112263, 0.252419195152907, 0.2214998965968561, 0.2472510731318346, 0.25725943570638243, 0.25634877056406447, 0.05828969164662179, 9.999999999998899e-05, 0.006327468420507465, 0.03955556038526342, 0.06956435244181225, 9.999999999998899e-05, 0.03665397559081285, 0.008111401001842045, 0.07176618253537304, 0.08356329364674675, 0.029426420240988627, 0.09928616894012599, 0.0653249093671604, 0.02207931271316954, 0.024351868497560103, 0.1421994236972307, 0.10449440570689805, 0.05810120074909919, 0.12889396724625202, 0.16423780555297995, 0.09135560747311733, 0.07473088455013599, 0.0741431190481675, 0.1120722625700884, 0.22132844844390842, 0.17111351651324536, 0.19806217781993563, 0.1267850649729333, 0.12752847882475216, 0.08024369577169621, 0.13152492418428208, 0.06863152823307805, 0.1461472266015693, 0.10060119224898101, 0.1703877272392238, 0.060257455280869565, 0.551572279410049, 0.5408238398807412, 0.556951246341924, 0.5389164193229208, 0.6075126584821884, 0.5710647354229086, 0.5844089127418863, 0.6106991692580781, 0.6021414345466235, 0.13244806024777644, 0.10765991614599557, 0.6407886970035248, 0.13849105240305637, 0.13568417196800087, 0.14696549933877046, 0.1095597408146659, 0.12136875790476898, 0.12005177463818106, 0.6147265295972888, 0.4111903803959138, 0.22277220658483776, 0.6280903020231801, 0.44037117008192095, 0.22499481881231298, 0.257164952088642, 0.21373747454390646, 0.6777785359338083, 0.39305302048580937, 0.4002264353944903, 0.43146971662777034, 0.5057743474335802, 0.2859668539882815, 0.574625037765587, 0.6474071912234483, 0.6934284784333673, 0.562942624121369, 0.29277090168581255, 0.2835027596311699, 0.2790388745997979, 0.3194724486073218, 0.3405777770925543, 0.4204784902923535, 0.3338562640270666, 0.41728137228647666, 0.3281005061221366, 0.20788914797048663, 0.19659531087612558, 0.1964491617479921, 0.21355337155383258, 0.23267959706034425, 0.2229516769017943, 0.20393584139999343, 0.22397976888880144, 0.26520176294961684, 0.22022442459752467, 0.6446357439569116, 0.7011299671470912, 0.21703365561927002, 0.2057089115095979, 0.20461929658896894, 0.20278373233434288, 0.2166599258997085, 0.7361253532025454, 0.2094962401565983, 0.16792691576997187, 0.1302502366488456, 0.8775680319158787, 0.19894704160270937, 0.11858436574656239, 0.1418094315094488, 0.1684543578405635, 0.21069420134581118, 0.8543710139686349, 0.21014111509583544, 0.1261500479745986, 0.8025850455674669, 0.16986392365134084, 0.1543596343951793, 0.10471239669092991, 0.2095508242010483, 0.837449626584436, 0.17126468796229966, 0.18952254470418506, 0.1829084378161081, 0.19131252411238142, 0.20105968093183624, 0.1938896656237159, 0.18242023743548885, 0.18992510921074146, 0.21064555801035445, 0.0939992043353779, 0.09248948729292117, 0.08056037188322318, 0.09069145151286062, 0.08647931216911953, 0.10606053782261826, 0.11384806296384609, 0.0835360609270589, 0.09135277477800896]}, "mutation_prompt": null}
{"id": "7f9284dc-9b18-4bee-8e0e-8f344e19577c", "solution": "import numpy as np\n\nclass EnhancedStreamlinedHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(40, budget // 12)\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, dim))\n        self.personal_best_positions = self.population.copy()\n        self.personal_best_values = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evals = 0\n        self.F = 0.5  \n        self.CR = 0.75  \n        self.omega = 0.5  \n        self.phi_p = 1.4\n        self.phi_g = 1.2\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evals < self.budget:\n            indices = np.random.randint(0, self.pop_size, (self.pop_size, 2))\n            mutants = np.clip(self.population[indices[:, 0]] + self.F * \n                              (self.population[indices[:, 1]] - self.population[np.random.randint(0, self.pop_size, self.pop_size)]), *self.bounds)\n            crossover_mask = np.random.rand(self.pop_size, self.dim) < self.CR\n            trials = np.where(crossover_mask, mutants, self.population)\n\n            trial_values = np.apply_along_axis(func, 1, trials)\n            self.evals += self.pop_size\n\n            improvements = trial_values < self.personal_best_values\n            self.personal_best_positions = np.where(improvements[:, np.newaxis], trials, self.personal_best_positions)\n            self.personal_best_values = np.where(improvements, trial_values, self.personal_best_values)\n            \n            if trial_values.min() < self.global_best_value:\n                self.global_best_value = trial_values.min()\n                self.global_best_position = trials[trial_values.argmin()]\n\n            r_p, r_g = np.random.rand(2, self.pop_size, self.dim)\n            self.velocities = (self.omega * self.velocities +\n                               r_p * self.phi_p * (self.personal_best_positions - self.population) +\n                               r_g * self.phi_g * (self.global_best_position - self.population))\n            self.population = np.clip(self.population + self.velocities, *self.bounds)\n\n        return self.global_best_value\n\n    def evaluate_population(self, func):\n        values = np.apply_along_axis(func, 1, self.population)\n        self.evals += self.pop_size\n        better_mask = values < self.personal_best_values\n        self.personal_best_positions = np.where(better_mask[:, np.newaxis], self.population, self.personal_best_positions)\n        self.personal_best_values = np.where(better_mask, values, self.personal_best_values)\n        if values.min() < self.global_best_value:\n            self.global_best_value = values.min()\n            self.global_best_position = self.population[values.argmin()]", "name": "EnhancedStreamlinedHybridOptimizer", "description": "An enhanced streamlined hybrid optimizer integrates adaptive parameters and memory-efficient updates for improved black-box optimization.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "60705ee0-3a86-4c09-b892-15d96101d3aa", "metadata": {"aucs": [0.856733392598368, 0.8509725759854837, 0.8527163834762455, 0.8625290691856518, 0.860595339419562, 0.8683506795710033, 0.8612885690789666, 0.8564437916042273, 0.8570447181036654, 0.7041700400634039, 0.729347450739881, 0.7077755504836262, 0.7260464158319955, 0.6751053949986039, 0.7082821474728128, 0.7068648391624883, 0.7084993744432546, 0.7018090793505407, 0.1732477109960877, 0.16897289837541685, 0.15112522632811198, 0.1732994375641761, 0.1710741272437759, 0.1782178109958924, 0.6175433772018752, 0.16766695376915963, 0.15438633893083875, 0.15048253819432666, 0.10857964980172996, 0.13671405651048685, 0.1462015314155406, 0.12548908275482973, 0.13492762855964324, 0.11174693980998907, 0.13271492948382124, 0.15210884461391505, 0.9756283754747057, 0.9797377005984748, 0.9794720760530221, 0.983129946667985, 0.9860667820925465, 0.9805679789109679, 0.9834206618585821, 0.9839976572357264, 0.9782544652034478, 0.7057695688305416, 0.7202909873418701, 0.7029214755641143, 0.6910860676452268, 0.6830561105755584, 0.7215472452564311, 0.7116000279551241, 0.6690578294709056, 0.7133760892450185, 0.22758808172858758, 0.3823105069275279, 0.8712963717182044, 0.37939227769773887, 0.8494784952610248, 0.2765908714591644, 0.16401581785510277, 0.2223189333732516, 0.3451363860910821, 0.21184209403735343, 0.140464494701536, 0.29530256211243466, 0.23233966014991725, 0.22141417688238074, 0.22166398984062952, 0.22206742196827378, 0.2135911422716873, 0.22354203669133477, 0.2296065545339323, 0.20084734304418927, 0.22295010400185256, 0.2195350283112263, 0.252419195152907, 0.2214998965968561, 0.2472510731318346, 0.25725943570638243, 0.25634877056406447, 0.05828969164662179, 9.999999999998899e-05, 0.006327468420507465, 0.03955556038526342, 0.06956435244181225, 9.999999999998899e-05, 0.03665397559081285, 0.008111401001842045, 0.07176618253537304, 0.08356329364674675, 0.029426420240988627, 0.09928616894012599, 0.0653249093671604, 0.02207931271316954, 0.024351868497560103, 0.1421994236972307, 0.10449440570689805, 0.05810120074909919, 0.12889396724625202, 0.16423780555297995, 0.09135560747311733, 0.07473088455013599, 0.0741431190481675, 0.1120722625700884, 0.22132844844390842, 0.17111351651324536, 0.19806217781993563, 0.1267850649729333, 0.12752847882475216, 0.08024369577169621, 0.13152492418428208, 0.06863152823307805, 0.1461472266015693, 0.10060119224898101, 0.1703877272392238, 0.060257455280869565, 0.551572279410049, 0.5408238398807412, 0.556951246341924, 0.5389164193229208, 0.6075126584821884, 0.5710647354229086, 0.5844089127418863, 0.6106991692580781, 0.6021414345466235, 0.13244806024777644, 0.10765991614599557, 0.6407886970035248, 0.13849105240305637, 0.13568417196800087, 0.14696549933877046, 0.1095597408146659, 0.12136875790476898, 0.12005177463818106, 0.6147265295972888, 0.4111903803959138, 0.22277220658483776, 0.6280903020231801, 0.44037117008192095, 0.22499481881231298, 0.257164952088642, 0.21373747454390646, 0.6777785359338083, 0.39305302048580937, 0.4002264353944903, 0.43146971662777034, 0.5057743474335802, 0.2859668539882815, 0.574625037765587, 0.6474071912234483, 0.6934284784333673, 0.562942624121369, 0.29277090168581255, 0.2835027596311699, 0.2790388745997979, 0.3194724486073218, 0.3405777770925543, 0.4204784902923535, 0.3338562640270666, 0.41728137228647666, 0.3281005061221366, 0.20788914797048663, 0.19659531087612558, 0.1964491617479921, 0.21355337155383258, 0.23267959706034425, 0.2229516769017943, 0.20393584139999343, 0.22397976888880144, 0.26520176294961684, 0.22022442459752467, 0.6446357439569116, 0.7011299671470912, 0.21703365561927002, 0.2057089115095979, 0.20461929658896894, 0.20278373233434288, 0.2166599258997085, 0.7361253532025454, 0.2094962401565983, 0.16792691576997187, 0.1302502366488456, 0.8775680319158787, 0.19894704160270937, 0.11858436574656239, 0.1418094315094488, 0.1684543578405635, 0.21069420134581118, 0.8543710139686349, 0.21014111509583544, 0.1261500479745986, 0.8025850455674669, 0.16986392365134084, 0.1543596343951793, 0.10471239669092991, 0.2095508242010483, 0.837449626584436, 0.17126468796229966, 0.18952254470418506, 0.1829084378161081, 0.19131252411238142, 0.20105968093183624, 0.1938896656237159, 0.18242023743548885, 0.18992510921074146, 0.21064555801035445, 0.0939992043353779, 0.09248948729292117, 0.08056037188322318, 0.09069145151286062, 0.08647931216911953, 0.10606053782261826, 0.11384806296384609, 0.0835360609270589, 0.09135277477800896]}, "mutation_prompt": null}
{"id": "fd0243f9-90d2-4a79-bd74-b73273e69c7c", "solution": "import numpy as np\n\nclass OptimizedHybridAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(60, budget // 10)  # Adjusted pop_size for better coverage\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, dim))\n        self.velocities = np.zeros((self.pop_size, dim))\n        self.personal_best_positions = self.population.copy()\n        self.personal_best_values = np.inf * np.ones(self.pop_size)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evals = 0\n        self.F = 0.6  # Adjusted for better exploration\n        self.CR = 0.7  # Adjusted for better recombination\n        self.omega = 0.5  \n        self.phi_p = 1.5  # Increased to encourage local search\n        self.phi_g = 1.3  # Increased for stronger attraction to global best\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evals < self.budget:\n            indices = np.random.randint(0, self.pop_size, (self.pop_size, 3))  # Changed to 3 for different mutation\n            r1, r2, r3 = indices[:, 0], indices[:, 1], indices[:, 2]\n            mutants = np.clip(self.population[r1] + self.F * (self.population[r2] - self.population[r3]), *self.bounds)\n            crossover_mask = np.random.rand(self.pop_size, self.dim) < self.CR\n            trials = np.where(crossover_mask, mutants, self.population)\n\n            trial_values = np.apply_along_axis(func, 1, trials)\n            self.evals += self.pop_size\n\n            improvements = trial_values < self.personal_best_values\n            self.personal_best_positions[improvements] = trials[improvements]\n            self.personal_best_values[improvements] = trial_values[improvements]\n\n            if trial_values.min() < self.global_best_value:\n                self.global_best_value = trial_values.min()\n                self.global_best_position = trials[trial_values.argmin()]\n\n            r_p, r_g = np.random.rand(2, self.pop_size, self.dim)\n            self.velocities = (self.omega * self.velocities +\n                               r_p * self.phi_p * (self.personal_best_positions - self.population) +\n                               r_g * self.phi_g * (self.global_best_position - self.population))\n            self.population = np.clip(self.population + self.velocities, *self.bounds)\n\n        return self.global_best_value\n\n    def evaluate_population(self, func):\n        values = np.apply_along_axis(func, 1, self.population)\n        self.evals += self.pop_size\n        better_mask = values < self.personal_best_values\n        self.personal_best_positions[better_mask] = self.population[better_mask]\n        self.personal_best_values[better_mask] = values[better_mask]\n        if values.min() < self.global_best_value:\n            self.global_best_value = values.min()\n            self.global_best_position = self.population[values.argmin()]", "name": "OptimizedHybridAlgorithm", "description": "A performance-optimized variant leveraging adaptive control parameters and enhanced mutation strategy for efficient exploration and exploitation.", "configspace": "", "generation": 26, "fitness": 0.30989334798249074, "feedback": "The algorithm OptimizedHybridAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.25.", "error": "", "parent_id": "60705ee0-3a86-4c09-b892-15d96101d3aa", "metadata": {"aucs": [0.7667401480404094, 0.7382012476860894, 0.7611080711654721, 0.7930664062455027, 0.7672261079747998, 0.7725788893606845, 0.7752406877076536, 0.7767968885175454, 0.7713634222868132, 0.5462726019186807, 0.548760952065606, 0.5442518093060278, 0.5399593811070547, 0.5541426479744049, 0.5713643696412056, 0.5472746864204837, 0.5558853246512425, 0.5355333337171666, 0.3078043466346111, 0.16274206539851344, 0.15613317138339622, 0.13733990159592924, 0.33060967247007067, 0.1551888708246144, 0.1324895717640897, 0.13328107926438737, 0.13851705844742024, 0.13993877326143556, 0.13055038827006515, 0.14464597612067176, 0.1047957299253951, 0.10814617947283445, 0.12436985255570021, 0.12469425593840078, 0.12974200487423093, 0.12487371591133489, 0.9774250266740802, 0.9720834027136264, 0.9778375013507312, 0.9784130179353178, 0.977198705814758, 0.9729557737137168, 0.9789394174090121, 0.9828237160932681, 0.9715383805898044, 0.4813421734158757, 0.4866931939143002, 0.465151887580488, 0.4770398235260266, 0.4840485382902341, 0.5172266988700275, 0.4871899732602487, 0.4694345609244006, 0.5061692946045437, 0.22142285813186724, 0.7344396464194595, 0.7608044962734752, 0.717702146623113, 0.708614311829155, 0.216222772407902, 0.7235523155281485, 0.7415958352564658, 0.2393902089205976, 0.20864937928185745, 0.18702776226864648, 0.18278336445876187, 0.12415095860960168, 0.18409852255218373, 0.17998213913098748, 0.19450462656118916, 0.18516438390252332, 0.1967444144332644, 0.18692870509774062, 0.17806967086161674, 0.1869213128836119, 0.174542240777265, 0.17648390980588557, 0.21909963293813828, 0.22563181854264147, 0.20033561177292292, 0.21409950019198942, 0.002699214925226845, 9.999999999998899e-05, 0.02886193857925845, 0.11660245010638848, 9.999999999998899e-05, 0.01655425263754262, 0.06786464940830206, 9.999999999998899e-05, 9.999999999998899e-05, 0.11903215291629987, 0.08721478637213365, 0.09355028238229757, 0.09686671602974073, 0.07145626765620705, 0.02371940504201575, 0.043013626198017074, 0.07488838247034968, 0.07835043262308994, 0.05490206627393546, 0.06373097776787362, 0.16332191317225608, 0.06954680701440974, 0.09467918034441081, 0.10537838602619254, 0.08905059006284588, 0.11711356362159753, 0.0639039381001899, 0.11308080794702202, 0.2564902673929774, 0.1586297561246438, 0.0972726680030882, 0.11730455420354469, 0.2736472904884193, 0.07639333532303427, 0.05785879946343697, 0.07769537777001734, 0.5023860494713192, 0.5119161384977762, 0.5191073874745062, 0.5423498195536918, 0.5470961630229899, 0.5304146291814085, 0.5517919497467456, 0.5148540037079663, 0.5497365330978241, 0.11509666993213397, 0.11283876806593196, 0.11000773389274177, 0.11817651176178001, 0.09848089359288081, 0.12149127981735675, 0.12652363650469434, 0.10590119658329733, 0.1118819422149725, 0.21597191970526441, 0.15612126213314115, 0.29867024119945296, 0.26506126387144524, 0.2817056178214866, 0.2709448940464706, 0.26913493191321514, 0.13745864210104042, 0.20016692707622719, 0.32379351507760246, 0.3735419810872269, 0.4694643948243591, 0.2472500145262263, 0.4196052790559851, 0.3148164147450355, 0.4381156363222156, 0.48743268192441314, 0.4724933718610781, 0.2776789325327206, 0.3269357995788723, 0.30195349686475725, 0.19216194858490243, 0.22415958850761075, 0.22314772692307083, 0.2537913974104187, 0.30872065721072584, 0.2575464091192389, 0.2245044608499377, 0.21803402146815765, 0.2249839223264094, 0.22378485908948265, 0.20536868163472655, 0.24266826088675175, 0.1969017799670063, 0.20327858137684063, 0.2189045955019966, 0.20267340699923775, 0.2105714411711046, 0.2185828748011046, 0.21247349198407495, 0.4178648028301294, 0.2103962574182825, 0.21113036426111353, 0.4899852695548158, 0.2294609946843148, 0.8130856735855594, 0.8405514585300089, 0.1733202448755734, 0.8176147169380572, 0.19811009078102038, 0.1464293580103242, 0.17681816335709932, 0.17470703521928466, 0.8094828134671629, 0.7595257784271403, 0.20765140153125827, 0.20739426460031074, 0.2028650294683676, 0.20458693835994557, 0.16398602189034805, 0.7003464277650173, 0.20889886642475564, 0.21163644108829838, 0.18151323143949927, 0.18755860504109567, 0.18945055058520133, 0.17422151125754393, 0.17142160754769398, 0.18277646803198844, 0.20836326184338871, 0.18612882444963896, 0.1890173304319681, 0.09199139000280643, 0.09849592032451693, 0.08884259815632067, 0.08195229250056035, 0.08093173265763798, 0.10044285951482557, 0.100460026594689, 0.08445187222683803, 0.10728997985437183]}, "mutation_prompt": null}
{"id": "afa9106a-f9b5-43d9-9189-5ff927335ada", "solution": "import numpy as np\n\nclass EnhancedStreamlinedHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(40, budget // 12)\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, dim))\n        self.personal_best_positions = self.population.copy()\n        self.personal_best_values = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evals = 0\n        self.F = 0.5  \n        self.CR = 0.75  \n        self.omega = 0.5  \n        self.phi_p = 1.4\n        self.phi_g = 1.2\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evals < self.budget:\n            indices = np.random.randint(0, self.pop_size, (self.pop_size, 2))\n            mutants = np.clip(self.population[indices[:, 0]] + self.F * \n                              (self.population[indices[:, 1]] - self.population[np.random.randint(0, self.pop_size, self.pop_size)]), *self.bounds)\n            crossover_mask = np.random.rand(self.pop_size, self.dim) < self.CR\n            trials = np.where(crossover_mask, mutants, self.population)\n\n            trial_values = np.apply_along_axis(func, 1, trials)\n            self.evals += self.pop_size\n\n            improvements = trial_values < self.personal_best_values\n            self.personal_best_positions = np.where(improvements[:, np.newaxis], trials, self.personal_best_positions)\n            self.personal_best_values = np.where(improvements, trial_values, self.personal_best_values)\n            \n            if trial_values.min() < self.global_best_value:\n                self.global_best_value = trial_values.min()\n                self.global_best_position = trials[trial_values.argmin()]\n\n            r_p, r_g = np.random.rand(2, self.pop_size, self.dim)\n            self.velocities = (self.omega * self.velocities +\n                               r_p * self.phi_p * (self.personal_best_positions - self.population) +\n                               r_g * self.phi_g * (self.global_best_position - self.population))\n            self.population = np.clip(self.population + self.velocities, *self.bounds)\n\n        return self.global_best_value\n\n    def evaluate_population(self, func):\n        values = np.apply_along_axis(func, 1, self.population)\n        self.evals += self.pop_size\n        better_mask = values < self.personal_best_values\n        self.personal_best_positions = np.where(better_mask[:, np.newaxis], self.population, self.personal_best_positions)\n        self.personal_best_values = np.where(better_mask, values, self.personal_best_values)\n        if values.min() < self.global_best_value:\n            self.global_best_value = values.min()\n            self.global_best_position = self.population[values.argmin()]", "name": "EnhancedStreamlinedHybridOptimizer", "description": "An enhanced streamlined hybrid optimizer integrates adaptive parameters and memory-efficient updates for improved black-box optimization.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "60705ee0-3a86-4c09-b892-15d96101d3aa", "metadata": {"aucs": [0.856733392598368, 0.8509725759854837, 0.8527163834762455, 0.8625290691856518, 0.860595339419562, 0.8683506795710033, 0.8612885690789666, 0.8564437916042273, 0.8570447181036654, 0.7041700400634039, 0.729347450739881, 0.7077755504836262, 0.7260464158319955, 0.6751053949986039, 0.7082821474728128, 0.7068648391624883, 0.7084993744432546, 0.7018090793505407, 0.1732477109960877, 0.16897289837541685, 0.15112522632811198, 0.1732994375641761, 0.1710741272437759, 0.1782178109958924, 0.6175433772018752, 0.16766695376915963, 0.15438633893083875, 0.15048253819432666, 0.10857964980172996, 0.13671405651048685, 0.1462015314155406, 0.12548908275482973, 0.13492762855964324, 0.11174693980998907, 0.13271492948382124, 0.15210884461391505, 0.9756283754747057, 0.9797377005984748, 0.9794720760530221, 0.983129946667985, 0.9860667820925465, 0.9805679789109679, 0.9834206618585821, 0.9839976572357264, 0.9782544652034478, 0.7057695688305416, 0.7202909873418701, 0.7029214755641143, 0.6910860676452268, 0.6830561105755584, 0.7215472452564311, 0.7116000279551241, 0.6690578294709056, 0.7133760892450185, 0.22758808172858758, 0.3823105069275279, 0.8712963717182044, 0.37939227769773887, 0.8494784952610248, 0.2765908714591644, 0.16401581785510277, 0.2223189333732516, 0.3451363860910821, 0.21184209403735343, 0.140464494701536, 0.29530256211243466, 0.23233966014991725, 0.22141417688238074, 0.22166398984062952, 0.22206742196827378, 0.2135911422716873, 0.22354203669133477, 0.2296065545339323, 0.20084734304418927, 0.22295010400185256, 0.2195350283112263, 0.252419195152907, 0.2214998965968561, 0.2472510731318346, 0.25725943570638243, 0.25634877056406447, 0.05828969164662179, 9.999999999998899e-05, 0.006327468420507465, 0.03955556038526342, 0.06956435244181225, 9.999999999998899e-05, 0.03665397559081285, 0.008111401001842045, 0.07176618253537304, 0.08356329364674675, 0.029426420240988627, 0.09928616894012599, 0.0653249093671604, 0.02207931271316954, 0.024351868497560103, 0.1421994236972307, 0.10449440570689805, 0.05810120074909919, 0.12889396724625202, 0.16423780555297995, 0.09135560747311733, 0.07473088455013599, 0.0741431190481675, 0.1120722625700884, 0.22132844844390842, 0.17111351651324536, 0.19806217781993563, 0.1267850649729333, 0.12752847882475216, 0.08024369577169621, 0.13152492418428208, 0.06863152823307805, 0.1461472266015693, 0.10060119224898101, 0.1703877272392238, 0.060257455280869565, 0.551572279410049, 0.5408238398807412, 0.556951246341924, 0.5389164193229208, 0.6075126584821884, 0.5710647354229086, 0.5844089127418863, 0.6106991692580781, 0.6021414345466235, 0.13244806024777644, 0.10765991614599557, 0.6407886970035248, 0.13849105240305637, 0.13568417196800087, 0.14696549933877046, 0.1095597408146659, 0.12136875790476898, 0.12005177463818106, 0.6147265295972888, 0.4111903803959138, 0.22277220658483776, 0.6280903020231801, 0.44037117008192095, 0.22499481881231298, 0.257164952088642, 0.21373747454390646, 0.6777785359338083, 0.39305302048580937, 0.4002264353944903, 0.43146971662777034, 0.5057743474335802, 0.2859668539882815, 0.574625037765587, 0.6474071912234483, 0.6934284784333673, 0.562942624121369, 0.29277090168581255, 0.2835027596311699, 0.2790388745997979, 0.3194724486073218, 0.3405777770925543, 0.4204784902923535, 0.3338562640270666, 0.41728137228647666, 0.3281005061221366, 0.20788914797048663, 0.19659531087612558, 0.1964491617479921, 0.21355337155383258, 0.23267959706034425, 0.2229516769017943, 0.20393584139999343, 0.22397976888880144, 0.26520176294961684, 0.22022442459752467, 0.6446357439569116, 0.7011299671470912, 0.21703365561927002, 0.2057089115095979, 0.20461929658896894, 0.20278373233434288, 0.2166599258997085, 0.7361253532025454, 0.2094962401565983, 0.16792691576997187, 0.1302502366488456, 0.8775680319158787, 0.19894704160270937, 0.11858436574656239, 0.1418094315094488, 0.1684543578405635, 0.21069420134581118, 0.8543710139686349, 0.21014111509583544, 0.1261500479745986, 0.8025850455674669, 0.16986392365134084, 0.1543596343951793, 0.10471239669092991, 0.2095508242010483, 0.837449626584436, 0.17126468796229966, 0.18952254470418506, 0.1829084378161081, 0.19131252411238142, 0.20105968093183624, 0.1938896656237159, 0.18242023743548885, 0.18992510921074146, 0.21064555801035445, 0.0939992043353779, 0.09248948729292117, 0.08056037188322318, 0.09069145151286062, 0.08647931216911953, 0.10606053782261826, 0.11384806296384609, 0.0835360609270589, 0.09135277477800896]}, "mutation_prompt": null}
{"id": "2834f92b-cd5a-46e3-b4b9-7497706284d1", "solution": "import numpy as np\n\nclass EnhancedStreamlinedHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(40, budget // 12)\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, dim))\n        self.personal_best_positions = self.population.copy()\n        self.personal_best_values = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evals = 0\n        self.F = 0.5  \n        self.CR = 0.75  \n        self.omega = 0.5  \n        self.phi_p = 1.4\n        self.phi_g = 1.2\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evals < self.budget:\n            indices = np.random.randint(0, self.pop_size, (self.pop_size, 2))\n            mutants = np.clip(self.population[indices[:, 0]] + self.F * \n                              (self.population[indices[:, 1]] - self.population[np.random.randint(0, self.pop_size, self.pop_size)]), *self.bounds)\n            crossover_mask = np.random.rand(self.pop_size, self.dim) < self.CR\n            trials = np.where(crossover_mask, mutants, self.population)\n\n            trial_values = np.apply_along_axis(func, 1, trials)\n            self.evals += self.pop_size\n\n            improvements = trial_values < self.personal_best_values\n            self.personal_best_positions = np.where(improvements[:, np.newaxis], trials, self.personal_best_positions)\n            self.personal_best_values = np.where(improvements, trial_values, self.personal_best_values)\n            \n            if trial_values.min() < self.global_best_value:\n                self.global_best_value = trial_values.min()\n                self.global_best_position = trials[trial_values.argmin()]\n\n            r_p, r_g = np.random.rand(2, self.pop_size, self.dim)\n            self.velocities = (self.omega * self.velocities +\n                               r_p * self.phi_p * (self.personal_best_positions - self.population) +\n                               r_g * self.phi_g * (self.global_best_position - self.population))\n            self.population = np.clip(self.population + self.velocities, *self.bounds)\n\n        return self.global_best_value\n\n    def evaluate_population(self, func):\n        values = np.apply_along_axis(func, 1, self.population)\n        self.evals += self.pop_size\n        better_mask = values < self.personal_best_values\n        self.personal_best_positions = np.where(better_mask[:, np.newaxis], self.population, self.personal_best_positions)\n        self.personal_best_values = np.where(better_mask, values, self.personal_best_values)\n        if values.min() < self.global_best_value:\n            self.global_best_value = values.min()\n            self.global_best_position = self.population[values.argmin()]", "name": "EnhancedStreamlinedHybridOptimizer", "description": "An enhanced streamlined hybrid optimizer integrates adaptive parameters and memory-efficient updates for improved black-box optimization.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "60705ee0-3a86-4c09-b892-15d96101d3aa", "metadata": {"aucs": [0.856733392598368, 0.8509725759854837, 0.8527163834762455, 0.8625290691856518, 0.860595339419562, 0.8683506795710033, 0.8612885690789666, 0.8564437916042273, 0.8570447181036654, 0.7041700400634039, 0.729347450739881, 0.7077755504836262, 0.7260464158319955, 0.6751053949986039, 0.7082821474728128, 0.7068648391624883, 0.7084993744432546, 0.7018090793505407, 0.1732477109960877, 0.16897289837541685, 0.15112522632811198, 0.1732994375641761, 0.1710741272437759, 0.1782178109958924, 0.6175433772018752, 0.16766695376915963, 0.15438633893083875, 0.15048253819432666, 0.10857964980172996, 0.13671405651048685, 0.1462015314155406, 0.12548908275482973, 0.13492762855964324, 0.11174693980998907, 0.13271492948382124, 0.15210884461391505, 0.9756283754747057, 0.9797377005984748, 0.9794720760530221, 0.983129946667985, 0.9860667820925465, 0.9805679789109679, 0.9834206618585821, 0.9839976572357264, 0.9782544652034478, 0.7057695688305416, 0.7202909873418701, 0.7029214755641143, 0.6910860676452268, 0.6830561105755584, 0.7215472452564311, 0.7116000279551241, 0.6690578294709056, 0.7133760892450185, 0.22758808172858758, 0.3823105069275279, 0.8712963717182044, 0.37939227769773887, 0.8494784952610248, 0.2765908714591644, 0.16401581785510277, 0.2223189333732516, 0.3451363860910821, 0.21184209403735343, 0.140464494701536, 0.29530256211243466, 0.23233966014991725, 0.22141417688238074, 0.22166398984062952, 0.22206742196827378, 0.2135911422716873, 0.22354203669133477, 0.2296065545339323, 0.20084734304418927, 0.22295010400185256, 0.2195350283112263, 0.252419195152907, 0.2214998965968561, 0.2472510731318346, 0.25725943570638243, 0.25634877056406447, 0.05828969164662179, 9.999999999998899e-05, 0.006327468420507465, 0.03955556038526342, 0.06956435244181225, 9.999999999998899e-05, 0.03665397559081285, 0.008111401001842045, 0.07176618253537304, 0.08356329364674675, 0.029426420240988627, 0.09928616894012599, 0.0653249093671604, 0.02207931271316954, 0.024351868497560103, 0.1421994236972307, 0.10449440570689805, 0.05810120074909919, 0.12889396724625202, 0.16423780555297995, 0.09135560747311733, 0.07473088455013599, 0.0741431190481675, 0.1120722625700884, 0.22132844844390842, 0.17111351651324536, 0.19806217781993563, 0.1267850649729333, 0.12752847882475216, 0.08024369577169621, 0.13152492418428208, 0.06863152823307805, 0.1461472266015693, 0.10060119224898101, 0.1703877272392238, 0.060257455280869565, 0.551572279410049, 0.5408238398807412, 0.556951246341924, 0.5389164193229208, 0.6075126584821884, 0.5710647354229086, 0.5844089127418863, 0.6106991692580781, 0.6021414345466235, 0.13244806024777644, 0.10765991614599557, 0.6407886970035248, 0.13849105240305637, 0.13568417196800087, 0.14696549933877046, 0.1095597408146659, 0.12136875790476898, 0.12005177463818106, 0.6147265295972888, 0.4111903803959138, 0.22277220658483776, 0.6280903020231801, 0.44037117008192095, 0.22499481881231298, 0.257164952088642, 0.21373747454390646, 0.6777785359338083, 0.39305302048580937, 0.4002264353944903, 0.43146971662777034, 0.5057743474335802, 0.2859668539882815, 0.574625037765587, 0.6474071912234483, 0.6934284784333673, 0.562942624121369, 0.29277090168581255, 0.2835027596311699, 0.2790388745997979, 0.3194724486073218, 0.3405777770925543, 0.4204784902923535, 0.3338562640270666, 0.41728137228647666, 0.3281005061221366, 0.20788914797048663, 0.19659531087612558, 0.1964491617479921, 0.21355337155383258, 0.23267959706034425, 0.2229516769017943, 0.20393584139999343, 0.22397976888880144, 0.26520176294961684, 0.22022442459752467, 0.6446357439569116, 0.7011299671470912, 0.21703365561927002, 0.2057089115095979, 0.20461929658896894, 0.20278373233434288, 0.2166599258997085, 0.7361253532025454, 0.2094962401565983, 0.16792691576997187, 0.1302502366488456, 0.8775680319158787, 0.19894704160270937, 0.11858436574656239, 0.1418094315094488, 0.1684543578405635, 0.21069420134581118, 0.8543710139686349, 0.21014111509583544, 0.1261500479745986, 0.8025850455674669, 0.16986392365134084, 0.1543596343951793, 0.10471239669092991, 0.2095508242010483, 0.837449626584436, 0.17126468796229966, 0.18952254470418506, 0.1829084378161081, 0.19131252411238142, 0.20105968093183624, 0.1938896656237159, 0.18242023743548885, 0.18992510921074146, 0.21064555801035445, 0.0939992043353779, 0.09248948729292117, 0.08056037188322318, 0.09069145151286062, 0.08647931216911953, 0.10606053782261826, 0.11384806296384609, 0.0835360609270589, 0.09135277477800896]}, "mutation_prompt": null}
{"id": "e03e1e0d-3688-4709-a250-52abe4bdee90", "solution": "import numpy as np\n\nclass EnhancedStreamlinedHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(40, budget // 12)\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, dim))\n        self.personal_best_positions = self.population.copy()\n        self.personal_best_values = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evals = 0\n        self.F = 0.5  \n        self.CR = 0.75  \n        self.omega = 0.5  \n        self.phi_p = 1.4\n        self.phi_g = 1.2\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evals < self.budget:\n            indices = np.random.randint(0, self.pop_size, (self.pop_size, 2))\n            mutants = np.clip(self.population[indices[:, 0]] + self.F * \n                              (self.population[indices[:, 1]] - self.population[np.random.randint(0, self.pop_size, self.pop_size)]), *self.bounds)\n            crossover_mask = np.random.rand(self.pop_size, self.dim) < self.CR\n            trials = np.where(crossover_mask, mutants, self.population)\n\n            trial_values = np.apply_along_axis(func, 1, trials)\n            self.evals += self.pop_size\n\n            improvements = trial_values < self.personal_best_values\n            self.personal_best_positions = np.where(improvements[:, np.newaxis], trials, self.personal_best_positions)\n            self.personal_best_values = np.where(improvements, trial_values, self.personal_best_values)\n            \n            if trial_values.min() < self.global_best_value:\n                self.global_best_value = trial_values.min()\n                self.global_best_position = trials[trial_values.argmin()]\n\n            r_p, r_g = np.random.rand(2, self.pop_size, self.dim)\n            self.velocities = (self.omega * self.velocities +\n                               r_p * self.phi_p * (self.personal_best_positions - self.population) +\n                               r_g * self.phi_g * (self.global_best_position - self.population))\n            self.population = np.clip(self.population + self.velocities, *self.bounds)\n\n        return self.global_best_value\n\n    def evaluate_population(self, func):\n        values = np.apply_along_axis(func, 1, self.population)\n        self.evals += self.pop_size\n        better_mask = values < self.personal_best_values\n        self.personal_best_positions = np.where(better_mask[:, np.newaxis], self.population, self.personal_best_positions)\n        self.personal_best_values = np.where(better_mask, values, self.personal_best_values)\n        if values.min() < self.global_best_value:\n            self.global_best_value = values.min()\n            self.global_best_position = self.population[values.argmin()]", "name": "EnhancedStreamlinedHybridOptimizer", "description": "An enhanced streamlined hybrid optimizer integrates adaptive parameters and memory-efficient updates for improved black-box optimization.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "60705ee0-3a86-4c09-b892-15d96101d3aa", "metadata": {"aucs": [0.856733392598368, 0.8509725759854837, 0.8527163834762455, 0.8625290691856518, 0.860595339419562, 0.8683506795710033, 0.8612885690789666, 0.8564437916042273, 0.8570447181036654, 0.7041700400634039, 0.729347450739881, 0.7077755504836262, 0.7260464158319955, 0.6751053949986039, 0.7082821474728128, 0.7068648391624883, 0.7084993744432546, 0.7018090793505407, 0.1732477109960877, 0.16897289837541685, 0.15112522632811198, 0.1732994375641761, 0.1710741272437759, 0.1782178109958924, 0.6175433772018752, 0.16766695376915963, 0.15438633893083875, 0.15048253819432666, 0.10857964980172996, 0.13671405651048685, 0.1462015314155406, 0.12548908275482973, 0.13492762855964324, 0.11174693980998907, 0.13271492948382124, 0.15210884461391505, 0.9756283754747057, 0.9797377005984748, 0.9794720760530221, 0.983129946667985, 0.9860667820925465, 0.9805679789109679, 0.9834206618585821, 0.9839976572357264, 0.9782544652034478, 0.7057695688305416, 0.7202909873418701, 0.7029214755641143, 0.6910860676452268, 0.6830561105755584, 0.7215472452564311, 0.7116000279551241, 0.6690578294709056, 0.7133760892450185, 0.22758808172858758, 0.3823105069275279, 0.8712963717182044, 0.37939227769773887, 0.8494784952610248, 0.2765908714591644, 0.16401581785510277, 0.2223189333732516, 0.3451363860910821, 0.21184209403735343, 0.140464494701536, 0.29530256211243466, 0.23233966014991725, 0.22141417688238074, 0.22166398984062952, 0.22206742196827378, 0.2135911422716873, 0.22354203669133477, 0.2296065545339323, 0.20084734304418927, 0.22295010400185256, 0.2195350283112263, 0.252419195152907, 0.2214998965968561, 0.2472510731318346, 0.25725943570638243, 0.25634877056406447, 0.05828969164662179, 9.999999999998899e-05, 0.006327468420507465, 0.03955556038526342, 0.06956435244181225, 9.999999999998899e-05, 0.03665397559081285, 0.008111401001842045, 0.07176618253537304, 0.08356329364674675, 0.029426420240988627, 0.09928616894012599, 0.0653249093671604, 0.02207931271316954, 0.024351868497560103, 0.1421994236972307, 0.10449440570689805, 0.05810120074909919, 0.12889396724625202, 0.16423780555297995, 0.09135560747311733, 0.07473088455013599, 0.0741431190481675, 0.1120722625700884, 0.22132844844390842, 0.17111351651324536, 0.19806217781993563, 0.1267850649729333, 0.12752847882475216, 0.08024369577169621, 0.13152492418428208, 0.06863152823307805, 0.1461472266015693, 0.10060119224898101, 0.1703877272392238, 0.060257455280869565, 0.551572279410049, 0.5408238398807412, 0.556951246341924, 0.5389164193229208, 0.6075126584821884, 0.5710647354229086, 0.5844089127418863, 0.6106991692580781, 0.6021414345466235, 0.13244806024777644, 0.10765991614599557, 0.6407886970035248, 0.13849105240305637, 0.13568417196800087, 0.14696549933877046, 0.1095597408146659, 0.12136875790476898, 0.12005177463818106, 0.6147265295972888, 0.4111903803959138, 0.22277220658483776, 0.6280903020231801, 0.44037117008192095, 0.22499481881231298, 0.257164952088642, 0.21373747454390646, 0.6777785359338083, 0.39305302048580937, 0.4002264353944903, 0.43146971662777034, 0.5057743474335802, 0.2859668539882815, 0.574625037765587, 0.6474071912234483, 0.6934284784333673, 0.562942624121369, 0.29277090168581255, 0.2835027596311699, 0.2790388745997979, 0.3194724486073218, 0.3405777770925543, 0.4204784902923535, 0.3338562640270666, 0.41728137228647666, 0.3281005061221366, 0.20788914797048663, 0.19659531087612558, 0.1964491617479921, 0.21355337155383258, 0.23267959706034425, 0.2229516769017943, 0.20393584139999343, 0.22397976888880144, 0.26520176294961684, 0.22022442459752467, 0.6446357439569116, 0.7011299671470912, 0.21703365561927002, 0.2057089115095979, 0.20461929658896894, 0.20278373233434288, 0.2166599258997085, 0.7361253532025454, 0.2094962401565983, 0.16792691576997187, 0.1302502366488456, 0.8775680319158787, 0.19894704160270937, 0.11858436574656239, 0.1418094315094488, 0.1684543578405635, 0.21069420134581118, 0.8543710139686349, 0.21014111509583544, 0.1261500479745986, 0.8025850455674669, 0.16986392365134084, 0.1543596343951793, 0.10471239669092991, 0.2095508242010483, 0.837449626584436, 0.17126468796229966, 0.18952254470418506, 0.1829084378161081, 0.19131252411238142, 0.20105968093183624, 0.1938896656237159, 0.18242023743548885, 0.18992510921074146, 0.21064555801035445, 0.0939992043353779, 0.09248948729292117, 0.08056037188322318, 0.09069145151286062, 0.08647931216911953, 0.10606053782261826, 0.11384806296384609, 0.0835360609270589, 0.09135277477800896]}, "mutation_prompt": null}
{"id": "f6de84eb-0fda-4df9-a974-df0f7f1c8973", "solution": "import numpy as np\n\nclass EnhancedStreamlinedHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(40, budget // 12)\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, dim))\n        self.personal_best_positions = self.population.copy()\n        self.personal_best_values = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evals = 0\n        self.F = 0.5  \n        self.CR = 0.75  \n        self.omega = 0.5  \n        self.phi_p = 1.4\n        self.phi_g = 1.2\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evals < self.budget:\n            indices = np.random.randint(0, self.pop_size, (self.pop_size, 2))\n            mutants = np.clip(self.population[indices[:, 0]] + self.F * \n                              (self.population[indices[:, 1]] - self.population[np.random.randint(0, self.pop_size, self.pop_size)]), *self.bounds)\n            crossover_mask = np.random.rand(self.pop_size, self.dim) < self.CR\n            trials = np.where(crossover_mask, mutants, self.population)\n\n            trial_values = np.apply_along_axis(func, 1, trials)\n            self.evals += self.pop_size\n\n            improvements = trial_values < self.personal_best_values\n            self.personal_best_positions = np.where(improvements[:, np.newaxis], trials, self.personal_best_positions)\n            self.personal_best_values = np.where(improvements, trial_values, self.personal_best_values)\n            \n            if trial_values.min() < self.global_best_value:\n                self.global_best_value = trial_values.min()\n                self.global_best_position = trials[trial_values.argmin()]\n\n            r_p, r_g = np.random.rand(2, self.pop_size, self.dim)\n            self.velocities = (self.omega * self.velocities +\n                               r_p * self.phi_p * (self.personal_best_positions - self.population) +\n                               r_g * self.phi_g * (self.global_best_position - self.population))\n            self.population = np.clip(self.population + self.velocities, *self.bounds)\n\n        return self.global_best_value\n\n    def evaluate_population(self, func):\n        values = np.apply_along_axis(func, 1, self.population)\n        self.evals += self.pop_size\n        better_mask = values < self.personal_best_values\n        self.personal_best_positions = np.where(better_mask[:, np.newaxis], self.population, self.personal_best_positions)\n        self.personal_best_values = np.where(better_mask, values, self.personal_best_values)\n        if values.min() < self.global_best_value:\n            self.global_best_value = values.min()\n            self.global_best_position = self.population[values.argmin()]", "name": "EnhancedStreamlinedHybridOptimizer", "description": "An enhanced streamlined hybrid optimizer integrates adaptive parameters and memory-efficient updates for improved black-box optimization.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "60705ee0-3a86-4c09-b892-15d96101d3aa", "metadata": {"aucs": [0.856733392598368, 0.8509725759854837, 0.8527163834762455, 0.8625290691856518, 0.860595339419562, 0.8683506795710033, 0.8612885690789666, 0.8564437916042273, 0.8570447181036654, 0.7041700400634039, 0.729347450739881, 0.7077755504836262, 0.7260464158319955, 0.6751053949986039, 0.7082821474728128, 0.7068648391624883, 0.7084993744432546, 0.7018090793505407, 0.1732477109960877, 0.16897289837541685, 0.15112522632811198, 0.1732994375641761, 0.1710741272437759, 0.1782178109958924, 0.6175433772018752, 0.16766695376915963, 0.15438633893083875, 0.15048253819432666, 0.10857964980172996, 0.13671405651048685, 0.1462015314155406, 0.12548908275482973, 0.13492762855964324, 0.11174693980998907, 0.13271492948382124, 0.15210884461391505, 0.9756283754747057, 0.9797377005984748, 0.9794720760530221, 0.983129946667985, 0.9860667820925465, 0.9805679789109679, 0.9834206618585821, 0.9839976572357264, 0.9782544652034478, 0.7057695688305416, 0.7202909873418701, 0.7029214755641143, 0.6910860676452268, 0.6830561105755584, 0.7215472452564311, 0.7116000279551241, 0.6690578294709056, 0.7133760892450185, 0.22758808172858758, 0.3823105069275279, 0.8712963717182044, 0.37939227769773887, 0.8494784952610248, 0.2765908714591644, 0.16401581785510277, 0.2223189333732516, 0.3451363860910821, 0.21184209403735343, 0.140464494701536, 0.29530256211243466, 0.23233966014991725, 0.22141417688238074, 0.22166398984062952, 0.22206742196827378, 0.2135911422716873, 0.22354203669133477, 0.2296065545339323, 0.20084734304418927, 0.22295010400185256, 0.2195350283112263, 0.252419195152907, 0.2214998965968561, 0.2472510731318346, 0.25725943570638243, 0.25634877056406447, 0.05828969164662179, 9.999999999998899e-05, 0.006327468420507465, 0.03955556038526342, 0.06956435244181225, 9.999999999998899e-05, 0.03665397559081285, 0.008111401001842045, 0.07176618253537304, 0.08356329364674675, 0.029426420240988627, 0.09928616894012599, 0.0653249093671604, 0.02207931271316954, 0.024351868497560103, 0.1421994236972307, 0.10449440570689805, 0.05810120074909919, 0.12889396724625202, 0.16423780555297995, 0.09135560747311733, 0.07473088455013599, 0.0741431190481675, 0.1120722625700884, 0.22132844844390842, 0.17111351651324536, 0.19806217781993563, 0.1267850649729333, 0.12752847882475216, 0.08024369577169621, 0.13152492418428208, 0.06863152823307805, 0.1461472266015693, 0.10060119224898101, 0.1703877272392238, 0.060257455280869565, 0.551572279410049, 0.5408238398807412, 0.556951246341924, 0.5389164193229208, 0.6075126584821884, 0.5710647354229086, 0.5844089127418863, 0.6106991692580781, 0.6021414345466235, 0.13244806024777644, 0.10765991614599557, 0.6407886970035248, 0.13849105240305637, 0.13568417196800087, 0.14696549933877046, 0.1095597408146659, 0.12136875790476898, 0.12005177463818106, 0.6147265295972888, 0.4111903803959138, 0.22277220658483776, 0.6280903020231801, 0.44037117008192095, 0.22499481881231298, 0.257164952088642, 0.21373747454390646, 0.6777785359338083, 0.39305302048580937, 0.4002264353944903, 0.43146971662777034, 0.5057743474335802, 0.2859668539882815, 0.574625037765587, 0.6474071912234483, 0.6934284784333673, 0.562942624121369, 0.29277090168581255, 0.2835027596311699, 0.2790388745997979, 0.3194724486073218, 0.3405777770925543, 0.4204784902923535, 0.3338562640270666, 0.41728137228647666, 0.3281005061221366, 0.20788914797048663, 0.19659531087612558, 0.1964491617479921, 0.21355337155383258, 0.23267959706034425, 0.2229516769017943, 0.20393584139999343, 0.22397976888880144, 0.26520176294961684, 0.22022442459752467, 0.6446357439569116, 0.7011299671470912, 0.21703365561927002, 0.2057089115095979, 0.20461929658896894, 0.20278373233434288, 0.2166599258997085, 0.7361253532025454, 0.2094962401565983, 0.16792691576997187, 0.1302502366488456, 0.8775680319158787, 0.19894704160270937, 0.11858436574656239, 0.1418094315094488, 0.1684543578405635, 0.21069420134581118, 0.8543710139686349, 0.21014111509583544, 0.1261500479745986, 0.8025850455674669, 0.16986392365134084, 0.1543596343951793, 0.10471239669092991, 0.2095508242010483, 0.837449626584436, 0.17126468796229966, 0.18952254470418506, 0.1829084378161081, 0.19131252411238142, 0.20105968093183624, 0.1938896656237159, 0.18242023743548885, 0.18992510921074146, 0.21064555801035445, 0.0939992043353779, 0.09248948729292117, 0.08056037188322318, 0.09069145151286062, 0.08647931216911953, 0.10606053782261826, 0.11384806296384609, 0.0835360609270589, 0.09135277477800896]}, "mutation_prompt": null}
{"id": "84473180-e649-4620-a4df-f20be55bbfb7", "solution": "import numpy as np\n\nclass EnhancedStreamlinedHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(40, budget // 12)\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, dim))\n        self.personal_best_positions = self.population.copy()\n        self.personal_best_values = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evals = 0\n        self.F = 0.5  \n        self.CR = 0.75  \n        self.omega = 0.5  \n        self.phi_p = 1.4\n        self.phi_g = 1.2\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evals < self.budget:\n            indices = np.random.randint(0, self.pop_size, (self.pop_size, 2))\n            mutants = np.clip(self.population[indices[:, 0]] + self.F * \n                              (self.population[indices[:, 1]] - self.population[np.random.randint(0, self.pop_size, self.pop_size)]), *self.bounds)\n            crossover_mask = np.random.rand(self.pop_size, self.dim) < self.CR\n            trials = np.where(crossover_mask, mutants, self.population)\n\n            trial_values = np.apply_along_axis(func, 1, trials)\n            self.evals += self.pop_size\n\n            improvements = trial_values < self.personal_best_values\n            self.personal_best_positions = np.where(improvements[:, np.newaxis], trials, self.personal_best_positions)\n            self.personal_best_values = np.where(improvements, trial_values, self.personal_best_values)\n            \n            if trial_values.min() < self.global_best_value:\n                self.global_best_value = trial_values.min()\n                self.global_best_position = trials[trial_values.argmin()]\n\n            r_p, r_g = np.random.rand(2, self.pop_size, self.dim)\n            self.velocities = (self.omega * self.velocities +\n                               r_p * self.phi_p * (self.personal_best_positions - self.population) +\n                               r_g * self.phi_g * (self.global_best_position - self.population))\n            self.population = np.clip(self.population + self.velocities, *self.bounds)\n\n        return self.global_best_value\n\n    def evaluate_population(self, func):\n        values = np.apply_along_axis(func, 1, self.population)\n        self.evals += self.pop_size\n        better_mask = values < self.personal_best_values\n        self.personal_best_positions = np.where(better_mask[:, np.newaxis], self.population, self.personal_best_positions)\n        self.personal_best_values = np.where(better_mask, values, self.personal_best_values)\n        if values.min() < self.global_best_value:\n            self.global_best_value = values.min()\n            self.global_best_position = self.population[values.argmin()]", "name": "EnhancedStreamlinedHybridOptimizer", "description": "An enhanced streamlined hybrid optimizer integrates adaptive parameters and memory-efficient updates for improved black-box optimization.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "60705ee0-3a86-4c09-b892-15d96101d3aa", "metadata": {"aucs": [0.856733392598368, 0.8509725759854837, 0.8527163834762455, 0.8625290691856518, 0.860595339419562, 0.8683506795710033, 0.8612885690789666, 0.8564437916042273, 0.8570447181036654, 0.7041700400634039, 0.729347450739881, 0.7077755504836262, 0.7260464158319955, 0.6751053949986039, 0.7082821474728128, 0.7068648391624883, 0.7084993744432546, 0.7018090793505407, 0.1732477109960877, 0.16897289837541685, 0.15112522632811198, 0.1732994375641761, 0.1710741272437759, 0.1782178109958924, 0.6175433772018752, 0.16766695376915963, 0.15438633893083875, 0.15048253819432666, 0.10857964980172996, 0.13671405651048685, 0.1462015314155406, 0.12548908275482973, 0.13492762855964324, 0.11174693980998907, 0.13271492948382124, 0.15210884461391505, 0.9756283754747057, 0.9797377005984748, 0.9794720760530221, 0.983129946667985, 0.9860667820925465, 0.9805679789109679, 0.9834206618585821, 0.9839976572357264, 0.9782544652034478, 0.7057695688305416, 0.7202909873418701, 0.7029214755641143, 0.6910860676452268, 0.6830561105755584, 0.7215472452564311, 0.7116000279551241, 0.6690578294709056, 0.7133760892450185, 0.22758808172858758, 0.3823105069275279, 0.8712963717182044, 0.37939227769773887, 0.8494784952610248, 0.2765908714591644, 0.16401581785510277, 0.2223189333732516, 0.3451363860910821, 0.21184209403735343, 0.140464494701536, 0.29530256211243466, 0.23233966014991725, 0.22141417688238074, 0.22166398984062952, 0.22206742196827378, 0.2135911422716873, 0.22354203669133477, 0.2296065545339323, 0.20084734304418927, 0.22295010400185256, 0.2195350283112263, 0.252419195152907, 0.2214998965968561, 0.2472510731318346, 0.25725943570638243, 0.25634877056406447, 0.05828969164662179, 9.999999999998899e-05, 0.006327468420507465, 0.03955556038526342, 0.06956435244181225, 9.999999999998899e-05, 0.03665397559081285, 0.008111401001842045, 0.07176618253537304, 0.08356329364674675, 0.029426420240988627, 0.09928616894012599, 0.0653249093671604, 0.02207931271316954, 0.024351868497560103, 0.1421994236972307, 0.10449440570689805, 0.05810120074909919, 0.12889396724625202, 0.16423780555297995, 0.09135560747311733, 0.07473088455013599, 0.0741431190481675, 0.1120722625700884, 0.22132844844390842, 0.17111351651324536, 0.19806217781993563, 0.1267850649729333, 0.12752847882475216, 0.08024369577169621, 0.13152492418428208, 0.06863152823307805, 0.1461472266015693, 0.10060119224898101, 0.1703877272392238, 0.060257455280869565, 0.551572279410049, 0.5408238398807412, 0.556951246341924, 0.5389164193229208, 0.6075126584821884, 0.5710647354229086, 0.5844089127418863, 0.6106991692580781, 0.6021414345466235, 0.13244806024777644, 0.10765991614599557, 0.6407886970035248, 0.13849105240305637, 0.13568417196800087, 0.14696549933877046, 0.1095597408146659, 0.12136875790476898, 0.12005177463818106, 0.6147265295972888, 0.4111903803959138, 0.22277220658483776, 0.6280903020231801, 0.44037117008192095, 0.22499481881231298, 0.257164952088642, 0.21373747454390646, 0.6777785359338083, 0.39305302048580937, 0.4002264353944903, 0.43146971662777034, 0.5057743474335802, 0.2859668539882815, 0.574625037765587, 0.6474071912234483, 0.6934284784333673, 0.562942624121369, 0.29277090168581255, 0.2835027596311699, 0.2790388745997979, 0.3194724486073218, 0.3405777770925543, 0.4204784902923535, 0.3338562640270666, 0.41728137228647666, 0.3281005061221366, 0.20788914797048663, 0.19659531087612558, 0.1964491617479921, 0.21355337155383258, 0.23267959706034425, 0.2229516769017943, 0.20393584139999343, 0.22397976888880144, 0.26520176294961684, 0.22022442459752467, 0.6446357439569116, 0.7011299671470912, 0.21703365561927002, 0.2057089115095979, 0.20461929658896894, 0.20278373233434288, 0.2166599258997085, 0.7361253532025454, 0.2094962401565983, 0.16792691576997187, 0.1302502366488456, 0.8775680319158787, 0.19894704160270937, 0.11858436574656239, 0.1418094315094488, 0.1684543578405635, 0.21069420134581118, 0.8543710139686349, 0.21014111509583544, 0.1261500479745986, 0.8025850455674669, 0.16986392365134084, 0.1543596343951793, 0.10471239669092991, 0.2095508242010483, 0.837449626584436, 0.17126468796229966, 0.18952254470418506, 0.1829084378161081, 0.19131252411238142, 0.20105968093183624, 0.1938896656237159, 0.18242023743548885, 0.18992510921074146, 0.21064555801035445, 0.0939992043353779, 0.09248948729292117, 0.08056037188322318, 0.09069145151286062, 0.08647931216911953, 0.10606053782261826, 0.11384806296384609, 0.0835360609270589, 0.09135277477800896]}, "mutation_prompt": null}
{"id": "380f9e27-1d95-42ca-9a44-6a2af75efacc", "solution": "import numpy as np\n\nclass EnhancedStreamlinedHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(40, budget // 12)\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, dim))\n        self.personal_best_positions = self.population.copy()\n        self.personal_best_values = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evals = 0\n        self.F = 0.5  \n        self.CR = 0.75  \n        self.omega = 0.5  \n        self.phi_p = 1.4\n        self.phi_g = 1.2\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evals < self.budget:\n            indices = np.random.randint(0, self.pop_size, (self.pop_size, 2))\n            mutants = np.clip(self.population[indices[:, 0]] + self.F * \n                              (self.population[indices[:, 1]] - self.population[np.random.randint(0, self.pop_size, self.pop_size)]), *self.bounds)\n            crossover_mask = np.random.rand(self.pop_size, self.dim) < self.CR\n            trials = np.where(crossover_mask, mutants, self.population)\n\n            trial_values = np.apply_along_axis(func, 1, trials)\n            self.evals += self.pop_size\n\n            improvements = trial_values < self.personal_best_values\n            self.personal_best_positions = np.where(improvements[:, np.newaxis], trials, self.personal_best_positions)\n            self.personal_best_values = np.where(improvements, trial_values, self.personal_best_values)\n            \n            if trial_values.min() < self.global_best_value:\n                self.global_best_value = trial_values.min()\n                self.global_best_position = trials[trial_values.argmin()]\n\n            r_p, r_g = np.random.rand(2, self.pop_size, self.dim)\n            self.velocities = (self.omega * self.velocities +\n                               r_p * self.phi_p * (self.personal_best_positions - self.population) +\n                               r_g * self.phi_g * (self.global_best_position - self.population))\n            self.population = np.clip(self.population + self.velocities, *self.bounds)\n\n        return self.global_best_value\n\n    def evaluate_population(self, func):\n        values = np.apply_along_axis(func, 1, self.population)\n        self.evals += self.pop_size\n        better_mask = values < self.personal_best_values\n        self.personal_best_positions = np.where(better_mask[:, np.newaxis], self.population, self.personal_best_positions)\n        self.personal_best_values = np.where(better_mask, values, self.personal_best_values)\n        if values.min() < self.global_best_value:\n            self.global_best_value = values.min()\n            self.global_best_position = self.population[values.argmin()]", "name": "EnhancedStreamlinedHybridOptimizer", "description": "An enhanced streamlined hybrid optimizer integrates adaptive parameters and memory-efficient updates for improved black-box optimization.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "60705ee0-3a86-4c09-b892-15d96101d3aa", "metadata": {"aucs": [0.856733392598368, 0.8509725759854837, 0.8527163834762455, 0.8625290691856518, 0.860595339419562, 0.8683506795710033, 0.8612885690789666, 0.8564437916042273, 0.8570447181036654, 0.7041700400634039, 0.729347450739881, 0.7077755504836262, 0.7260464158319955, 0.6751053949986039, 0.7082821474728128, 0.7068648391624883, 0.7084993744432546, 0.7018090793505407, 0.1732477109960877, 0.16897289837541685, 0.15112522632811198, 0.1732994375641761, 0.1710741272437759, 0.1782178109958924, 0.6175433772018752, 0.16766695376915963, 0.15438633893083875, 0.15048253819432666, 0.10857964980172996, 0.13671405651048685, 0.1462015314155406, 0.12548908275482973, 0.13492762855964324, 0.11174693980998907, 0.13271492948382124, 0.15210884461391505, 0.9756283754747057, 0.9797377005984748, 0.9794720760530221, 0.983129946667985, 0.9860667820925465, 0.9805679789109679, 0.9834206618585821, 0.9839976572357264, 0.9782544652034478, 0.7057695688305416, 0.7202909873418701, 0.7029214755641143, 0.6910860676452268, 0.6830561105755584, 0.7215472452564311, 0.7116000279551241, 0.6690578294709056, 0.7133760892450185, 0.22758808172858758, 0.3823105069275279, 0.8712963717182044, 0.37939227769773887, 0.8494784952610248, 0.2765908714591644, 0.16401581785510277, 0.2223189333732516, 0.3451363860910821, 0.21184209403735343, 0.140464494701536, 0.29530256211243466, 0.23233966014991725, 0.22141417688238074, 0.22166398984062952, 0.22206742196827378, 0.2135911422716873, 0.22354203669133477, 0.2296065545339323, 0.20084734304418927, 0.22295010400185256, 0.2195350283112263, 0.252419195152907, 0.2214998965968561, 0.2472510731318346, 0.25725943570638243, 0.25634877056406447, 0.05828969164662179, 9.999999999998899e-05, 0.006327468420507465, 0.03955556038526342, 0.06956435244181225, 9.999999999998899e-05, 0.03665397559081285, 0.008111401001842045, 0.07176618253537304, 0.08356329364674675, 0.029426420240988627, 0.09928616894012599, 0.0653249093671604, 0.02207931271316954, 0.024351868497560103, 0.1421994236972307, 0.10449440570689805, 0.05810120074909919, 0.12889396724625202, 0.16423780555297995, 0.09135560747311733, 0.07473088455013599, 0.0741431190481675, 0.1120722625700884, 0.22132844844390842, 0.17111351651324536, 0.19806217781993563, 0.1267850649729333, 0.12752847882475216, 0.08024369577169621, 0.13152492418428208, 0.06863152823307805, 0.1461472266015693, 0.10060119224898101, 0.1703877272392238, 0.060257455280869565, 0.551572279410049, 0.5408238398807412, 0.556951246341924, 0.5389164193229208, 0.6075126584821884, 0.5710647354229086, 0.5844089127418863, 0.6106991692580781, 0.6021414345466235, 0.13244806024777644, 0.10765991614599557, 0.6407886970035248, 0.13849105240305637, 0.13568417196800087, 0.14696549933877046, 0.1095597408146659, 0.12136875790476898, 0.12005177463818106, 0.6147265295972888, 0.4111903803959138, 0.22277220658483776, 0.6280903020231801, 0.44037117008192095, 0.22499481881231298, 0.257164952088642, 0.21373747454390646, 0.6777785359338083, 0.39305302048580937, 0.4002264353944903, 0.43146971662777034, 0.5057743474335802, 0.2859668539882815, 0.574625037765587, 0.6474071912234483, 0.6934284784333673, 0.562942624121369, 0.29277090168581255, 0.2835027596311699, 0.2790388745997979, 0.3194724486073218, 0.3405777770925543, 0.4204784902923535, 0.3338562640270666, 0.41728137228647666, 0.3281005061221366, 0.20788914797048663, 0.19659531087612558, 0.1964491617479921, 0.21355337155383258, 0.23267959706034425, 0.2229516769017943, 0.20393584139999343, 0.22397976888880144, 0.26520176294961684, 0.22022442459752467, 0.6446357439569116, 0.7011299671470912, 0.21703365561927002, 0.2057089115095979, 0.20461929658896894, 0.20278373233434288, 0.2166599258997085, 0.7361253532025454, 0.2094962401565983, 0.16792691576997187, 0.1302502366488456, 0.8775680319158787, 0.19894704160270937, 0.11858436574656239, 0.1418094315094488, 0.1684543578405635, 0.21069420134581118, 0.8543710139686349, 0.21014111509583544, 0.1261500479745986, 0.8025850455674669, 0.16986392365134084, 0.1543596343951793, 0.10471239669092991, 0.2095508242010483, 0.837449626584436, 0.17126468796229966, 0.18952254470418506, 0.1829084378161081, 0.19131252411238142, 0.20105968093183624, 0.1938896656237159, 0.18242023743548885, 0.18992510921074146, 0.21064555801035445, 0.0939992043353779, 0.09248948729292117, 0.08056037188322318, 0.09069145151286062, 0.08647931216911953, 0.10606053782261826, 0.11384806296384609, 0.0835360609270589, 0.09135277477800896]}, "mutation_prompt": null}
{"id": "e7f6aeb7-72b6-45d3-9db3-9ab06ee61211", "solution": "import numpy as np\n\nclass EnhancedStreamlinedHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(40, budget // 12)\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, dim))\n        self.personal_best_positions = self.population.copy()\n        self.personal_best_values = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evals = 0\n        self.F = 0.5  \n        self.CR = 0.75  \n        self.omega = 0.5  \n        self.phi_p = 1.4\n        self.phi_g = 1.2\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evals < self.budget:\n            indices = np.random.randint(0, self.pop_size, (self.pop_size, 2))\n            mutants = np.clip(self.population[indices[:, 0]] + self.F * \n                              (self.population[indices[:, 1]] - self.population[np.random.randint(0, self.pop_size, self.pop_size)]), *self.bounds)\n            crossover_mask = np.random.rand(self.pop_size, self.dim) < self.CR\n            trials = np.where(crossover_mask, mutants, self.population)\n\n            trial_values = np.apply_along_axis(func, 1, trials)\n            self.evals += self.pop_size\n\n            improvements = trial_values < self.personal_best_values\n            self.personal_best_positions = np.where(improvements[:, np.newaxis], trials, self.personal_best_positions)\n            self.personal_best_values = np.where(improvements, trial_values, self.personal_best_values)\n            \n            if trial_values.min() < self.global_best_value:\n                self.global_best_value = trial_values.min()\n                self.global_best_position = trials[trial_values.argmin()]\n\n            r_p, r_g = np.random.rand(2, self.pop_size, self.dim)\n            self.velocities = (self.omega * self.velocities +\n                               r_p * self.phi_p * (self.personal_best_positions - self.population) +\n                               r_g * self.phi_g * (self.global_best_position - self.population))\n            self.population = np.clip(self.population + self.velocities, *self.bounds)\n\n        return self.global_best_value\n\n    def evaluate_population(self, func):\n        values = np.apply_along_axis(func, 1, self.population)\n        self.evals += self.pop_size\n        better_mask = values < self.personal_best_values\n        self.personal_best_positions = np.where(better_mask[:, np.newaxis], self.population, self.personal_best_positions)\n        self.personal_best_values = np.where(better_mask, values, self.personal_best_values)\n        if values.min() < self.global_best_value:\n            self.global_best_value = values.min()\n            self.global_best_position = self.population[values.argmin()]", "name": "EnhancedStreamlinedHybridOptimizer", "description": "An enhanced streamlined hybrid optimizer integrates adaptive parameters and memory-efficient updates for improved black-box optimization.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "60705ee0-3a86-4c09-b892-15d96101d3aa", "metadata": {"aucs": [0.856733392598368, 0.8509725759854837, 0.8527163834762455, 0.8625290691856518, 0.860595339419562, 0.8683506795710033, 0.8612885690789666, 0.8564437916042273, 0.8570447181036654, 0.7041700400634039, 0.729347450739881, 0.7077755504836262, 0.7260464158319955, 0.6751053949986039, 0.7082821474728128, 0.7068648391624883, 0.7084993744432546, 0.7018090793505407, 0.1732477109960877, 0.16897289837541685, 0.15112522632811198, 0.1732994375641761, 0.1710741272437759, 0.1782178109958924, 0.6175433772018752, 0.16766695376915963, 0.15438633893083875, 0.15048253819432666, 0.10857964980172996, 0.13671405651048685, 0.1462015314155406, 0.12548908275482973, 0.13492762855964324, 0.11174693980998907, 0.13271492948382124, 0.15210884461391505, 0.9756283754747057, 0.9797377005984748, 0.9794720760530221, 0.983129946667985, 0.9860667820925465, 0.9805679789109679, 0.9834206618585821, 0.9839976572357264, 0.9782544652034478, 0.7057695688305416, 0.7202909873418701, 0.7029214755641143, 0.6910860676452268, 0.6830561105755584, 0.7215472452564311, 0.7116000279551241, 0.6690578294709056, 0.7133760892450185, 0.22758808172858758, 0.3823105069275279, 0.8712963717182044, 0.37939227769773887, 0.8494784952610248, 0.2765908714591644, 0.16401581785510277, 0.2223189333732516, 0.3451363860910821, 0.21184209403735343, 0.140464494701536, 0.29530256211243466, 0.23233966014991725, 0.22141417688238074, 0.22166398984062952, 0.22206742196827378, 0.2135911422716873, 0.22354203669133477, 0.2296065545339323, 0.20084734304418927, 0.22295010400185256, 0.2195350283112263, 0.252419195152907, 0.2214998965968561, 0.2472510731318346, 0.25725943570638243, 0.25634877056406447, 0.05828969164662179, 9.999999999998899e-05, 0.006327468420507465, 0.03955556038526342, 0.06956435244181225, 9.999999999998899e-05, 0.03665397559081285, 0.008111401001842045, 0.07176618253537304, 0.08356329364674675, 0.029426420240988627, 0.09928616894012599, 0.0653249093671604, 0.02207931271316954, 0.024351868497560103, 0.1421994236972307, 0.10449440570689805, 0.05810120074909919, 0.12889396724625202, 0.16423780555297995, 0.09135560747311733, 0.07473088455013599, 0.0741431190481675, 0.1120722625700884, 0.22132844844390842, 0.17111351651324536, 0.19806217781993563, 0.1267850649729333, 0.12752847882475216, 0.08024369577169621, 0.13152492418428208, 0.06863152823307805, 0.1461472266015693, 0.10060119224898101, 0.1703877272392238, 0.060257455280869565, 0.551572279410049, 0.5408238398807412, 0.556951246341924, 0.5389164193229208, 0.6075126584821884, 0.5710647354229086, 0.5844089127418863, 0.6106991692580781, 0.6021414345466235, 0.13244806024777644, 0.10765991614599557, 0.6407886970035248, 0.13849105240305637, 0.13568417196800087, 0.14696549933877046, 0.1095597408146659, 0.12136875790476898, 0.12005177463818106, 0.6147265295972888, 0.4111903803959138, 0.22277220658483776, 0.6280903020231801, 0.44037117008192095, 0.22499481881231298, 0.257164952088642, 0.21373747454390646, 0.6777785359338083, 0.39305302048580937, 0.4002264353944903, 0.43146971662777034, 0.5057743474335802, 0.2859668539882815, 0.574625037765587, 0.6474071912234483, 0.6934284784333673, 0.562942624121369, 0.29277090168581255, 0.2835027596311699, 0.2790388745997979, 0.3194724486073218, 0.3405777770925543, 0.4204784902923535, 0.3338562640270666, 0.41728137228647666, 0.3281005061221366, 0.20788914797048663, 0.19659531087612558, 0.1964491617479921, 0.21355337155383258, 0.23267959706034425, 0.2229516769017943, 0.20393584139999343, 0.22397976888880144, 0.26520176294961684, 0.22022442459752467, 0.6446357439569116, 0.7011299671470912, 0.21703365561927002, 0.2057089115095979, 0.20461929658896894, 0.20278373233434288, 0.2166599258997085, 0.7361253532025454, 0.2094962401565983, 0.16792691576997187, 0.1302502366488456, 0.8775680319158787, 0.19894704160270937, 0.11858436574656239, 0.1418094315094488, 0.1684543578405635, 0.21069420134581118, 0.8543710139686349, 0.21014111509583544, 0.1261500479745986, 0.8025850455674669, 0.16986392365134084, 0.1543596343951793, 0.10471239669092991, 0.2095508242010483, 0.837449626584436, 0.17126468796229966, 0.18952254470418506, 0.1829084378161081, 0.19131252411238142, 0.20105968093183624, 0.1938896656237159, 0.18242023743548885, 0.18992510921074146, 0.21064555801035445, 0.0939992043353779, 0.09248948729292117, 0.08056037188322318, 0.09069145151286062, 0.08647931216911953, 0.10606053782261826, 0.11384806296384609, 0.0835360609270589, 0.09135277477800896]}, "mutation_prompt": null}
{"id": "93569ffc-e7c4-4830-8aa7-dd1c07fb2ab7", "solution": "import numpy as np\n\nclass EnhancedStreamlinedHybridOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(40, budget // 12)\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, dim))\n        self.personal_best_positions = self.population.copy()\n        self.personal_best_values = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evals = 0\n        self.F = 0.5  \n        self.CR = 0.75  \n        self.omega = 0.5  \n        self.phi_p = 1.4\n        self.phi_g = 1.2\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evals < self.budget:\n            indices = np.random.randint(0, self.pop_size, (self.pop_size, 2))\n            mutants = np.clip(self.population[indices[:, 0]] + self.F * \n                              (self.population[indices[:, 1]] - self.population[np.random.randint(0, self.pop_size, self.pop_size)]), *self.bounds)\n            crossover_mask = np.random.rand(self.pop_size, self.dim) < self.CR\n            trials = np.where(crossover_mask, mutants, self.population)\n\n            trial_values = np.apply_along_axis(func, 1, trials)\n            self.evals += self.pop_size\n\n            improvements = trial_values < self.personal_best_values\n            self.personal_best_positions = np.where(improvements[:, np.newaxis], trials, self.personal_best_positions)\n            self.personal_best_values = np.where(improvements, trial_values, self.personal_best_values)\n            \n            if trial_values.min() < self.global_best_value:\n                self.global_best_value = trial_values.min()\n                self.global_best_position = trials[trial_values.argmin()]\n\n            r_p, r_g = np.random.rand(2, self.pop_size, self.dim)\n            self.velocities = (self.omega * self.velocities +\n                               r_p * self.phi_p * (self.personal_best_positions - self.population) +\n                               r_g * self.phi_g * (self.global_best_position - self.population))\n            self.population = np.clip(self.population + self.velocities, *self.bounds)\n\n        return self.global_best_value\n\n    def evaluate_population(self, func):\n        values = np.apply_along_axis(func, 1, self.population)\n        self.evals += self.pop_size\n        better_mask = values < self.personal_best_values\n        self.personal_best_positions = np.where(better_mask[:, np.newaxis], self.population, self.personal_best_positions)\n        self.personal_best_values = np.where(better_mask, values, self.personal_best_values)\n        if values.min() < self.global_best_value:\n            self.global_best_value = values.min()\n            self.global_best_position = self.population[values.argmin()]", "name": "EnhancedStreamlinedHybridOptimizer", "description": "An enhanced streamlined hybrid optimizer integrates adaptive parameters and memory-efficient updates for improved black-box optimization.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "60705ee0-3a86-4c09-b892-15d96101d3aa", "metadata": {"aucs": [0.856733392598368, 0.8509725759854837, 0.8527163834762455, 0.8625290691856518, 0.860595339419562, 0.8683506795710033, 0.8612885690789666, 0.8564437916042273, 0.8570447181036654, 0.7041700400634039, 0.729347450739881, 0.7077755504836262, 0.7260464158319955, 0.6751053949986039, 0.7082821474728128, 0.7068648391624883, 0.7084993744432546, 0.7018090793505407, 0.1732477109960877, 0.16897289837541685, 0.15112522632811198, 0.1732994375641761, 0.1710741272437759, 0.1782178109958924, 0.6175433772018752, 0.16766695376915963, 0.15438633893083875, 0.15048253819432666, 0.10857964980172996, 0.13671405651048685, 0.1462015314155406, 0.12548908275482973, 0.13492762855964324, 0.11174693980998907, 0.13271492948382124, 0.15210884461391505, 0.9756283754747057, 0.9797377005984748, 0.9794720760530221, 0.983129946667985, 0.9860667820925465, 0.9805679789109679, 0.9834206618585821, 0.9839976572357264, 0.9782544652034478, 0.7057695688305416, 0.7202909873418701, 0.7029214755641143, 0.6910860676452268, 0.6830561105755584, 0.7215472452564311, 0.7116000279551241, 0.6690578294709056, 0.7133760892450185, 0.22758808172858758, 0.3823105069275279, 0.8712963717182044, 0.37939227769773887, 0.8494784952610248, 0.2765908714591644, 0.16401581785510277, 0.2223189333732516, 0.3451363860910821, 0.21184209403735343, 0.140464494701536, 0.29530256211243466, 0.23233966014991725, 0.22141417688238074, 0.22166398984062952, 0.22206742196827378, 0.2135911422716873, 0.22354203669133477, 0.2296065545339323, 0.20084734304418927, 0.22295010400185256, 0.2195350283112263, 0.252419195152907, 0.2214998965968561, 0.2472510731318346, 0.25725943570638243, 0.25634877056406447, 0.05828969164662179, 9.999999999998899e-05, 0.006327468420507465, 0.03955556038526342, 0.06956435244181225, 9.999999999998899e-05, 0.03665397559081285, 0.008111401001842045, 0.07176618253537304, 0.08356329364674675, 0.029426420240988627, 0.09928616894012599, 0.0653249093671604, 0.02207931271316954, 0.024351868497560103, 0.1421994236972307, 0.10449440570689805, 0.05810120074909919, 0.12889396724625202, 0.16423780555297995, 0.09135560747311733, 0.07473088455013599, 0.0741431190481675, 0.1120722625700884, 0.22132844844390842, 0.17111351651324536, 0.19806217781993563, 0.1267850649729333, 0.12752847882475216, 0.08024369577169621, 0.13152492418428208, 0.06863152823307805, 0.1461472266015693, 0.10060119224898101, 0.1703877272392238, 0.060257455280869565, 0.551572279410049, 0.5408238398807412, 0.556951246341924, 0.5389164193229208, 0.6075126584821884, 0.5710647354229086, 0.5844089127418863, 0.6106991692580781, 0.6021414345466235, 0.13244806024777644, 0.10765991614599557, 0.6407886970035248, 0.13849105240305637, 0.13568417196800087, 0.14696549933877046, 0.1095597408146659, 0.12136875790476898, 0.12005177463818106, 0.6147265295972888, 0.4111903803959138, 0.22277220658483776, 0.6280903020231801, 0.44037117008192095, 0.22499481881231298, 0.257164952088642, 0.21373747454390646, 0.6777785359338083, 0.39305302048580937, 0.4002264353944903, 0.43146971662777034, 0.5057743474335802, 0.2859668539882815, 0.574625037765587, 0.6474071912234483, 0.6934284784333673, 0.562942624121369, 0.29277090168581255, 0.2835027596311699, 0.2790388745997979, 0.3194724486073218, 0.3405777770925543, 0.4204784902923535, 0.3338562640270666, 0.41728137228647666, 0.3281005061221366, 0.20788914797048663, 0.19659531087612558, 0.1964491617479921, 0.21355337155383258, 0.23267959706034425, 0.2229516769017943, 0.20393584139999343, 0.22397976888880144, 0.26520176294961684, 0.22022442459752467, 0.6446357439569116, 0.7011299671470912, 0.21703365561927002, 0.2057089115095979, 0.20461929658896894, 0.20278373233434288, 0.2166599258997085, 0.7361253532025454, 0.2094962401565983, 0.16792691576997187, 0.1302502366488456, 0.8775680319158787, 0.19894704160270937, 0.11858436574656239, 0.1418094315094488, 0.1684543578405635, 0.21069420134581118, 0.8543710139686349, 0.21014111509583544, 0.1261500479745986, 0.8025850455674669, 0.16986392365134084, 0.1543596343951793, 0.10471239669092991, 0.2095508242010483, 0.837449626584436, 0.17126468796229966, 0.18952254470418506, 0.1829084378161081, 0.19131252411238142, 0.20105968093183624, 0.1938896656237159, 0.18242023743548885, 0.18992510921074146, 0.21064555801035445, 0.0939992043353779, 0.09248948729292117, 0.08056037188322318, 0.09069145151286062, 0.08647931216911953, 0.10606053782261826, 0.11384806296384609, 0.0835360609270589, 0.09135277477800896]}, "mutation_prompt": null}
{"id": "a281f6a8-fca2-49fa-9dfa-b1b11edfe3a9", "solution": "import numpy as np\n\nclass ImprovedHybridEvolutionaryOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(40, budget // 10)  # Reduced population size for expediency\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, dim))\n        self.personal_best_positions = self.population.copy()\n        self.personal_best_values = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evals = 0\n        self.F = 0.6  # Adjusted to use dynamic scaling\n        self.CR = 0.8  # Adjusted crossover rate\n        self.omega = 0.4  # Decreased inertia weight\n        self.phi_p = 1.5  # Adjusted cognitive component\n        self.phi_g = 1.1  # Adjusted social component\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evals < self.budget:\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), *self.bounds)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                trial_value = func(trial)\n                self.evals += 1\n\n                if trial_value < self.personal_best_values[i]:\n                    self.personal_best_positions[i] = trial\n                    self.personal_best_values[i] = trial_value\n                \n                if trial_value < self.global_best_value:\n                    self.global_best_value = trial_value\n                    self.global_best_position = trial\n\n            r_p, r_g = np.random.rand(2, self.pop_size, self.dim)\n            self.velocities = (self.omega * self.velocities +\n                               r_p * self.phi_p * (self.personal_best_positions - self.population) +\n                               r_g * self.phi_g * (self.global_best_position - self.population))\n            self.population = np.clip(self.population + self.velocities, *self.bounds)\n\n        return self.global_best_value\n\n    def evaluate_population(self, func):\n        values = np.apply_along_axis(func, 1, self.population)\n        self.evals += self.pop_size\n        better_mask = values < self.personal_best_values\n        self.personal_best_positions = np.where(better_mask[:, np.newaxis], self.population, self.personal_best_positions)\n        self.personal_best_values = np.where(better_mask, values, self.personal_best_values)\n        if values.min() < self.global_best_value:\n            self.global_best_value = values.min()\n            self.global_best_position = self.population[values.argmin()]", "name": "ImprovedHybridEvolutionaryOptimizer", "description": "Improved Hybrid Evolutionary Optimizer utilizing adaptive control parameters and streamlined mutation strategy for faster convergence.", "configspace": "", "generation": 35, "fitness": 0.3479146215835002, "feedback": "The algorithm ImprovedHybridEvolutionaryOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.28.", "error": "", "parent_id": "60705ee0-3a86-4c09-b892-15d96101d3aa", "metadata": {"aucs": [0.8581285688011261, 0.855579235997296, 0.8722101842652317, 0.870440127992816, 0.8651072139542866, 0.863074147904705, 0.8598386358380911, 0.8531110861204931, 0.8492424259595442, 0.7186971370493478, 0.7263689775971439, 0.7078239191057836, 0.7295926620573407, 0.7152751587759927, 0.7412349808192332, 0.7288633204085468, 0.733654437292891, 0.7384989610263222, 0.1649651907574765, 0.6645828747181133, 0.1756516522205238, 0.17400569003942368, 0.1761384529461567, 0.13618822958360488, 0.1476307101543518, 0.17248492739239774, 0.1441883039191898, 0.12686654921025298, 0.12742810959820638, 0.1294653951546756, 0.11145182239785789, 0.1078550494012741, 0.12340184818982636, 0.12446793314170068, 0.13170384709393912, 0.14333684083318998, 0.9828377544738203, 0.9854566805943478, 0.9760170896621176, 0.9814450174321541, 0.9740035055383676, 0.9792511721887776, 0.9835688400995324, 0.9760467290889624, 0.979337354834998, 0.7073744525686574, 0.684740999470995, 0.6841947246195291, 0.6983913033074599, 0.7125828763196433, 0.721592451788249, 0.6985416243398647, 0.6859849845160928, 0.6897366230899079, 0.226400259452057, 0.3835796776837245, 0.7940788231183609, 0.27722237075967715, 0.21089672935009673, 0.21013491916888138, 0.8289259869310784, 0.22955063930232622, 0.23488892401480632, 0.21211871726127618, 0.22804946128689585, 0.10784485450120118, 0.22026521108838204, 0.20559037197201468, 0.22310904997151015, 0.12943709132736603, 0.21920683222784076, 0.2348261699667934, 0.23287289265046496, 0.23918102933781815, 0.11781271447711983, 0.24980746651450203, 0.23718455038972697, 0.21604960134889473, 0.22730755938818026, 0.14315362943118703, 0.25883744066280057, 0.045146619415753264, 0.0017388731969213422, 0.12394784307677242, 0.0032112861057157494, 0.027264305991242188, 9.999999999998899e-05, 9.999999999998899e-05, 0.006400561121749138, 9.999999999998899e-05, 0.14030480127490796, 0.07716676303543812, 0.1521085278607781, 0.053669680714573564, 0.03527263224246069, 0.08434673722855479, 0.0619331781984358, 0.06926127013138017, 0.08549563654007253, 0.03438305192424573, 0.11308623758644776, 0.05667227432557187, 0.09134240465837995, 0.13957307977741185, 0.1523440738972891, 0.21366739459043227, 0.12158552020688751, 0.06843966266713775, 0.22710391288130538, 0.28941726138488266, 0.16151961597929443, 0.2224603625527798, 0.20234077944120932, 0.10554240855896735, 0.1576135132141384, 0.12222307375348396, 0.09749991960225557, 0.5892561327676618, 0.5715132136290185, 0.5613389061984219, 0.5592634303990366, 0.5769813124023154, 0.5635593244450736, 0.5986754727036561, 0.5532465266309712, 0.6002533978576726, 0.13482878913173013, 0.07993909539787947, 0.13251247399962207, 0.13665464902941926, 0.43839562666843246, 0.16707422789158732, 0.12804379362071938, 0.13875912757579645, 0.10567052278599509, 0.1793802410268871, 0.16535840346501895, 0.6058989541950281, 0.24170975044787235, 0.1643159646434038, 0.23119703146307424, 0.2024192757145893, 0.2935573565785209, 0.2974183697008107, 0.21081238035056726, 0.36932584948549907, 0.5209730228119698, 0.5408738815269856, 0.28394230696247624, 0.5751478713982827, 0.6353936002047443, 0.514679666704418, 0.6184117650461849, 0.4332894539149199, 0.2841629330015779, 0.35874870382244295, 0.3713774816986245, 0.3140580944011526, 0.33667741231490544, 0.3019448016850076, 0.4473250198522585, 0.46142938231067976, 0.23318720592753706, 0.21779277821019372, 0.19848495049476778, 0.19487343643862853, 0.2028244089579253, 0.25340674412518494, 0.21479577487986, 0.2138712999321315, 0.23164889333548422, 0.190657763958881, 0.21644515865612746, 0.23982386185362625, 0.202577793376845, 0.1874686683460356, 0.2439930051538579, 0.2384909282984179, 0.18729004673016203, 0.22144602552824344, 0.8781552030944508, 0.1744828440268955, 0.14745874876454146, 0.8890319659837993, 0.1997806439128511, 0.8694521071647632, 0.17058788179953133, 0.16493864068800013, 0.880263843879262, 0.8661697316104716, 0.21125721108792173, 0.20685015449668032, 0.714272119180646, 0.2075328726459187, 0.6789949317249762, 0.7419863789703358, 0.8136657311181188, 0.21198666372125696, 0.20718983750580477, 0.20290334619923545, 0.18855922674782644, 0.18462556578680966, 0.18022231968119018, 0.19163425654897281, 0.1780341859029071, 0.17390962572690283, 0.18372412326624055, 0.08828315565745704, 0.09303032241210862, 0.09060404985393067, 0.0855044425542848, 0.08729552664035689, 0.0937732120569561, 0.11731945766163077, 0.09009479234886808, 0.08873437117363625]}, "mutation_prompt": null}
{"id": "ffe1aa74-3573-4882-98a0-1b1a142e770d", "solution": "import numpy as np\n\nclass ImprovedHybridEvolutionaryOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(40, budget // 10)  # Reduced population size for expediency\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, dim))\n        self.personal_best_positions = self.population.copy()\n        self.personal_best_values = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evals = 0\n        self.F = 0.6  # Adjusted to use dynamic scaling\n        self.CR = 0.8  # Adjusted crossover rate\n        self.omega = 0.4  # Decreased inertia weight\n        self.phi_p = 1.5  # Adjusted cognitive component\n        self.phi_g = 1.1  # Adjusted social component\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evals < self.budget:\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), *self.bounds)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                trial_value = func(trial)\n                self.evals += 1\n\n                if trial_value < self.personal_best_values[i]:\n                    self.personal_best_positions[i] = trial\n                    self.personal_best_values[i] = trial_value\n                \n                if trial_value < self.global_best_value:\n                    self.global_best_value = trial_value\n                    self.global_best_position = trial\n\n            r_p, r_g = np.random.rand(2, self.pop_size, self.dim)\n            self.velocities = (self.omega * self.velocities +\n                               r_p * self.phi_p * (self.personal_best_positions - self.population) +\n                               r_g * self.phi_g * (self.global_best_position - self.population))\n            self.population = np.clip(self.population + self.velocities, *self.bounds)\n\n        return self.global_best_value\n\n    def evaluate_population(self, func):\n        values = np.apply_along_axis(func, 1, self.population)\n        self.evals += self.pop_size\n        better_mask = values < self.personal_best_values\n        self.personal_best_positions = np.where(better_mask[:, np.newaxis], self.population, self.personal_best_positions)\n        self.personal_best_values = np.where(better_mask, values, self.personal_best_values)\n        if values.min() < self.global_best_value:\n            self.global_best_value = values.min()\n            self.global_best_position = self.population[values.argmin()]", "name": "ImprovedHybridEvolutionaryOptimizer", "description": "Improved Hybrid Evolutionary Optimizer utilizing adaptive control parameters and streamlined mutation strategy for faster convergence.", "configspace": "", "generation": 36, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a281f6a8-fca2-49fa-9dfa-b1b11edfe3a9", "metadata": {"aucs": [0.8581285688011261, 0.855579235997296, 0.8722101842652317, 0.870440127992816, 0.8651072139542866, 0.863074147904705, 0.8598386358380911, 0.8531110861204931, 0.8492424259595442, 0.7186971370493478, 0.7263689775971439, 0.7078239191057836, 0.7295926620573407, 0.7152751587759927, 0.7412349808192332, 0.7288633204085468, 0.733654437292891, 0.7384989610263222, 0.1649651907574765, 0.6645828747181133, 0.1756516522205238, 0.17400569003942368, 0.1761384529461567, 0.13618822958360488, 0.1476307101543518, 0.17248492739239774, 0.1441883039191898, 0.12686654921025298, 0.12742810959820638, 0.1294653951546756, 0.11145182239785789, 0.1078550494012741, 0.12340184818982636, 0.12446793314170068, 0.13170384709393912, 0.14333684083318998, 0.9828377544738203, 0.9854566805943478, 0.9760170896621176, 0.9814450174321541, 0.9740035055383676, 0.9792511721887776, 0.9835688400995324, 0.9760467290889624, 0.979337354834998, 0.7073744525686574, 0.684740999470995, 0.6841947246195291, 0.6983913033074599, 0.7125828763196433, 0.721592451788249, 0.6985416243398647, 0.6859849845160928, 0.6897366230899079, 0.226400259452057, 0.3835796776837245, 0.7940788231183609, 0.27722237075967715, 0.21089672935009673, 0.21013491916888138, 0.8289259869310784, 0.22955063930232622, 0.23488892401480632, 0.21211871726127618, 0.22804946128689585, 0.10784485450120118, 0.22026521108838204, 0.20559037197201468, 0.22310904997151015, 0.12943709132736603, 0.21920683222784076, 0.2348261699667934, 0.23287289265046496, 0.23918102933781815, 0.11781271447711983, 0.24980746651450203, 0.23718455038972697, 0.21604960134889473, 0.22730755938818026, 0.14315362943118703, 0.25883744066280057, 0.045146619415753264, 0.0017388731969213422, 0.12394784307677242, 0.0032112861057157494, 0.027264305991242188, 9.999999999998899e-05, 9.999999999998899e-05, 0.006400561121749138, 9.999999999998899e-05, 0.14030480127490796, 0.07716676303543812, 0.1521085278607781, 0.053669680714573564, 0.03527263224246069, 0.08434673722855479, 0.0619331781984358, 0.06926127013138017, 0.08549563654007253, 0.03438305192424573, 0.11308623758644776, 0.05667227432557187, 0.09134240465837995, 0.13957307977741185, 0.1523440738972891, 0.21366739459043227, 0.12158552020688751, 0.06843966266713775, 0.22710391288130538, 0.28941726138488266, 0.16151961597929443, 0.2224603625527798, 0.20234077944120932, 0.10554240855896735, 0.1576135132141384, 0.12222307375348396, 0.09749991960225557, 0.5892561327676618, 0.5715132136290185, 0.5613389061984219, 0.5592634303990366, 0.5769813124023154, 0.5635593244450736, 0.5986754727036561, 0.5532465266309712, 0.6002533978576726, 0.13482878913173013, 0.07993909539787947, 0.13251247399962207, 0.13665464902941926, 0.43839562666843246, 0.16707422789158732, 0.12804379362071938, 0.13875912757579645, 0.10567052278599509, 0.1793802410268871, 0.16535840346501895, 0.6058989541950281, 0.24170975044787235, 0.1643159646434038, 0.23119703146307424, 0.2024192757145893, 0.2935573565785209, 0.2974183697008107, 0.21081238035056726, 0.36932584948549907, 0.5209730228119698, 0.5408738815269856, 0.28394230696247624, 0.5751478713982827, 0.6353936002047443, 0.514679666704418, 0.6184117650461849, 0.4332894539149199, 0.2841629330015779, 0.35874870382244295, 0.3713774816986245, 0.3140580944011526, 0.33667741231490544, 0.3019448016850076, 0.4473250198522585, 0.46142938231067976, 0.23318720592753706, 0.21779277821019372, 0.19848495049476778, 0.19487343643862853, 0.2028244089579253, 0.25340674412518494, 0.21479577487986, 0.2138712999321315, 0.23164889333548422, 0.190657763958881, 0.21644515865612746, 0.23982386185362625, 0.202577793376845, 0.1874686683460356, 0.2439930051538579, 0.2384909282984179, 0.18729004673016203, 0.22144602552824344, 0.8781552030944508, 0.1744828440268955, 0.14745874876454146, 0.8890319659837993, 0.1997806439128511, 0.8694521071647632, 0.17058788179953133, 0.16493864068800013, 0.880263843879262, 0.8661697316104716, 0.21125721108792173, 0.20685015449668032, 0.714272119180646, 0.2075328726459187, 0.6789949317249762, 0.7419863789703358, 0.8136657311181188, 0.21198666372125696, 0.20718983750580477, 0.20290334619923545, 0.18855922674782644, 0.18462556578680966, 0.18022231968119018, 0.19163425654897281, 0.1780341859029071, 0.17390962572690283, 0.18372412326624055, 0.08828315565745704, 0.09303032241210862, 0.09060404985393067, 0.0855044425542848, 0.08729552664035689, 0.0937732120569561, 0.11731945766163077, 0.09009479234886808, 0.08873437117363625]}, "mutation_prompt": null}
{"id": "0443ec2d-bcc0-4579-b4cf-2b9bcb6c4d10", "solution": "import numpy as np\n\nclass ImprovedHybridEvolutionaryOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(40, budget // 10)  # Reduced population size for expediency\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, dim))\n        self.personal_best_positions = self.population.copy()\n        self.personal_best_values = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evals = 0\n        self.F = 0.6  # Adjusted to use dynamic scaling\n        self.CR = 0.8  # Adjusted crossover rate\n        self.omega = 0.4  # Decreased inertia weight\n        self.phi_p = 1.5  # Adjusted cognitive component\n        self.phi_g = 1.1  # Adjusted social component\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evals < self.budget:\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), *self.bounds)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                trial_value = func(trial)\n                self.evals += 1\n\n                if trial_value < self.personal_best_values[i]:\n                    self.personal_best_positions[i] = trial\n                    self.personal_best_values[i] = trial_value\n                \n                if trial_value < self.global_best_value:\n                    self.global_best_value = trial_value\n                    self.global_best_position = trial\n\n            r_p, r_g = np.random.rand(2, self.pop_size, self.dim)\n            self.velocities = (self.omega * self.velocities +\n                               r_p * self.phi_p * (self.personal_best_positions - self.population) +\n                               r_g * self.phi_g * (self.global_best_position - self.population))\n            self.population = np.clip(self.population + self.velocities, *self.bounds)\n\n        return self.global_best_value\n\n    def evaluate_population(self, func):\n        values = np.apply_along_axis(func, 1, self.population)\n        self.evals += self.pop_size\n        better_mask = values < self.personal_best_values\n        self.personal_best_positions = np.where(better_mask[:, np.newaxis], self.population, self.personal_best_positions)\n        self.personal_best_values = np.where(better_mask, values, self.personal_best_values)\n        if values.min() < self.global_best_value:\n            self.global_best_value = values.min()\n            self.global_best_position = self.population[values.argmin()]", "name": "ImprovedHybridEvolutionaryOptimizer", "description": "Improved Hybrid Evolutionary Optimizer utilizing adaptive control parameters and streamlined mutation strategy for faster convergence.", "configspace": "", "generation": 36, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a281f6a8-fca2-49fa-9dfa-b1b11edfe3a9", "metadata": {"aucs": [0.8581285688011261, 0.855579235997296, 0.8722101842652317, 0.870440127992816, 0.8651072139542866, 0.863074147904705, 0.8598386358380911, 0.8531110861204931, 0.8492424259595442, 0.7186971370493478, 0.7263689775971439, 0.7078239191057836, 0.7295926620573407, 0.7152751587759927, 0.7412349808192332, 0.7288633204085468, 0.733654437292891, 0.7384989610263222, 0.1649651907574765, 0.6645828747181133, 0.1756516522205238, 0.17400569003942368, 0.1761384529461567, 0.13618822958360488, 0.1476307101543518, 0.17248492739239774, 0.1441883039191898, 0.12686654921025298, 0.12742810959820638, 0.1294653951546756, 0.11145182239785789, 0.1078550494012741, 0.12340184818982636, 0.12446793314170068, 0.13170384709393912, 0.14333684083318998, 0.9828377544738203, 0.9854566805943478, 0.9760170896621176, 0.9814450174321541, 0.9740035055383676, 0.9792511721887776, 0.9835688400995324, 0.9760467290889624, 0.979337354834998, 0.7073744525686574, 0.684740999470995, 0.6841947246195291, 0.6983913033074599, 0.7125828763196433, 0.721592451788249, 0.6985416243398647, 0.6859849845160928, 0.6897366230899079, 0.226400259452057, 0.3835796776837245, 0.7940788231183609, 0.27722237075967715, 0.21089672935009673, 0.21013491916888138, 0.8289259869310784, 0.22955063930232622, 0.23488892401480632, 0.21211871726127618, 0.22804946128689585, 0.10784485450120118, 0.22026521108838204, 0.20559037197201468, 0.22310904997151015, 0.12943709132736603, 0.21920683222784076, 0.2348261699667934, 0.23287289265046496, 0.23918102933781815, 0.11781271447711983, 0.24980746651450203, 0.23718455038972697, 0.21604960134889473, 0.22730755938818026, 0.14315362943118703, 0.25883744066280057, 0.045146619415753264, 0.0017388731969213422, 0.12394784307677242, 0.0032112861057157494, 0.027264305991242188, 9.999999999998899e-05, 9.999999999998899e-05, 0.006400561121749138, 9.999999999998899e-05, 0.14030480127490796, 0.07716676303543812, 0.1521085278607781, 0.053669680714573564, 0.03527263224246069, 0.08434673722855479, 0.0619331781984358, 0.06926127013138017, 0.08549563654007253, 0.03438305192424573, 0.11308623758644776, 0.05667227432557187, 0.09134240465837995, 0.13957307977741185, 0.1523440738972891, 0.21366739459043227, 0.12158552020688751, 0.06843966266713775, 0.22710391288130538, 0.28941726138488266, 0.16151961597929443, 0.2224603625527798, 0.20234077944120932, 0.10554240855896735, 0.1576135132141384, 0.12222307375348396, 0.09749991960225557, 0.5892561327676618, 0.5715132136290185, 0.5613389061984219, 0.5592634303990366, 0.5769813124023154, 0.5635593244450736, 0.5986754727036561, 0.5532465266309712, 0.6002533978576726, 0.13482878913173013, 0.07993909539787947, 0.13251247399962207, 0.13665464902941926, 0.43839562666843246, 0.16707422789158732, 0.12804379362071938, 0.13875912757579645, 0.10567052278599509, 0.1793802410268871, 0.16535840346501895, 0.6058989541950281, 0.24170975044787235, 0.1643159646434038, 0.23119703146307424, 0.2024192757145893, 0.2935573565785209, 0.2974183697008107, 0.21081238035056726, 0.36932584948549907, 0.5209730228119698, 0.5408738815269856, 0.28394230696247624, 0.5751478713982827, 0.6353936002047443, 0.514679666704418, 0.6184117650461849, 0.4332894539149199, 0.2841629330015779, 0.35874870382244295, 0.3713774816986245, 0.3140580944011526, 0.33667741231490544, 0.3019448016850076, 0.4473250198522585, 0.46142938231067976, 0.23318720592753706, 0.21779277821019372, 0.19848495049476778, 0.19487343643862853, 0.2028244089579253, 0.25340674412518494, 0.21479577487986, 0.2138712999321315, 0.23164889333548422, 0.190657763958881, 0.21644515865612746, 0.23982386185362625, 0.202577793376845, 0.1874686683460356, 0.2439930051538579, 0.2384909282984179, 0.18729004673016203, 0.22144602552824344, 0.8781552030944508, 0.1744828440268955, 0.14745874876454146, 0.8890319659837993, 0.1997806439128511, 0.8694521071647632, 0.17058788179953133, 0.16493864068800013, 0.880263843879262, 0.8661697316104716, 0.21125721108792173, 0.20685015449668032, 0.714272119180646, 0.2075328726459187, 0.6789949317249762, 0.7419863789703358, 0.8136657311181188, 0.21198666372125696, 0.20718983750580477, 0.20290334619923545, 0.18855922674782644, 0.18462556578680966, 0.18022231968119018, 0.19163425654897281, 0.1780341859029071, 0.17390962572690283, 0.18372412326624055, 0.08828315565745704, 0.09303032241210862, 0.09060404985393067, 0.0855044425542848, 0.08729552664035689, 0.0937732120569561, 0.11731945766163077, 0.09009479234886808, 0.08873437117363625]}, "mutation_prompt": null}
{"id": "87367115-49f2-413f-b46a-db0a496736fe", "solution": "import numpy as np\n\nclass ImprovedHybridEvolutionaryOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(40, budget // 10)  # Reduced population size for expediency\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.pop_size, dim))\n        self.personal_best_positions = self.population.copy()\n        self.personal_best_values = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evals = 0\n        self.F = 0.6  # Adjusted to use dynamic scaling\n        self.CR = 0.8  # Adjusted crossover rate\n        self.omega = 0.4  # Decreased inertia weight\n        self.phi_p = 1.5  # Adjusted cognitive component\n        self.phi_g = 1.1  # Adjusted social component\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evals < self.budget:\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), *self.bounds)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                trial_value = func(trial)\n                self.evals += 1\n\n                if trial_value < self.personal_best_values[i]:\n                    self.personal_best_positions[i] = trial\n                    self.personal_best_values[i] = trial_value\n                \n                if trial_value < self.global_best_value:\n                    self.global_best_value = trial_value\n                    self.global_best_position = trial\n\n            r_p, r_g = np.random.rand(2, self.pop_size, self.dim)\n            self.velocities = (self.omega * self.velocities +\n                               r_p * self.phi_p * (self.personal_best_positions - self.population) +\n                               r_g * self.phi_g * (self.global_best_position - self.population))\n            self.population = np.clip(self.population + self.velocities, *self.bounds)\n\n        return self.global_best_value\n\n    def evaluate_population(self, func):\n        values = np.apply_along_axis(func, 1, self.population)\n        self.evals += self.pop_size\n        better_mask = values < self.personal_best_values\n        self.personal_best_positions = np.where(better_mask[:, np.newaxis], self.population, self.personal_best_positions)\n        self.personal_best_values = np.where(better_mask, values, self.personal_best_values)\n        if values.min() < self.global_best_value:\n            self.global_best_value = values.min()\n            self.global_best_position = self.population[values.argmin()]", "name": "ImprovedHybridEvolutionaryOptimizer", "description": "Improved Hybrid Evolutionary Optimizer utilizing adaptive control parameters and streamlined mutation strategy for faster convergence.", "configspace": "", "generation": 36, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a281f6a8-fca2-49fa-9dfa-b1b11edfe3a9", "metadata": {"aucs": [0.8581285688011261, 0.855579235997296, 0.8722101842652317, 0.870440127992816, 0.8651072139542866, 0.863074147904705, 0.8598386358380911, 0.8531110861204931, 0.8492424259595442, 0.7186971370493478, 0.7263689775971439, 0.7078239191057836, 0.7295926620573407, 0.7152751587759927, 0.7412349808192332, 0.7288633204085468, 0.733654437292891, 0.7384989610263222, 0.1649651907574765, 0.6645828747181133, 0.1756516522205238, 0.17400569003942368, 0.1761384529461567, 0.13618822958360488, 0.1476307101543518, 0.17248492739239774, 0.1441883039191898, 0.12686654921025298, 0.12742810959820638, 0.1294653951546756, 0.11145182239785789, 0.1078550494012741, 0.12340184818982636, 0.12446793314170068, 0.13170384709393912, 0.14333684083318998, 0.9828377544738203, 0.9854566805943478, 0.9760170896621176, 0.9814450174321541, 0.9740035055383676, 0.9792511721887776, 0.9835688400995324, 0.9760467290889624, 0.979337354834998, 0.7073744525686574, 0.684740999470995, 0.6841947246195291, 0.6983913033074599, 0.7125828763196433, 0.721592451788249, 0.6985416243398647, 0.6859849845160928, 0.6897366230899079, 0.226400259452057, 0.3835796776837245, 0.7940788231183609, 0.27722237075967715, 0.21089672935009673, 0.21013491916888138, 0.8289259869310784, 0.22955063930232622, 0.23488892401480632, 0.21211871726127618, 0.22804946128689585, 0.10784485450120118, 0.22026521108838204, 0.20559037197201468, 0.22310904997151015, 0.12943709132736603, 0.21920683222784076, 0.2348261699667934, 0.23287289265046496, 0.23918102933781815, 0.11781271447711983, 0.24980746651450203, 0.23718455038972697, 0.21604960134889473, 0.22730755938818026, 0.14315362943118703, 0.25883744066280057, 0.045146619415753264, 0.0017388731969213422, 0.12394784307677242, 0.0032112861057157494, 0.027264305991242188, 9.999999999998899e-05, 9.999999999998899e-05, 0.006400561121749138, 9.999999999998899e-05, 0.14030480127490796, 0.07716676303543812, 0.1521085278607781, 0.053669680714573564, 0.03527263224246069, 0.08434673722855479, 0.0619331781984358, 0.06926127013138017, 0.08549563654007253, 0.03438305192424573, 0.11308623758644776, 0.05667227432557187, 0.09134240465837995, 0.13957307977741185, 0.1523440738972891, 0.21366739459043227, 0.12158552020688751, 0.06843966266713775, 0.22710391288130538, 0.28941726138488266, 0.16151961597929443, 0.2224603625527798, 0.20234077944120932, 0.10554240855896735, 0.1576135132141384, 0.12222307375348396, 0.09749991960225557, 0.5892561327676618, 0.5715132136290185, 0.5613389061984219, 0.5592634303990366, 0.5769813124023154, 0.5635593244450736, 0.5986754727036561, 0.5532465266309712, 0.6002533978576726, 0.13482878913173013, 0.07993909539787947, 0.13251247399962207, 0.13665464902941926, 0.43839562666843246, 0.16707422789158732, 0.12804379362071938, 0.13875912757579645, 0.10567052278599509, 0.1793802410268871, 0.16535840346501895, 0.6058989541950281, 0.24170975044787235, 0.1643159646434038, 0.23119703146307424, 0.2024192757145893, 0.2935573565785209, 0.2974183697008107, 0.21081238035056726, 0.36932584948549907, 0.5209730228119698, 0.5408738815269856, 0.28394230696247624, 0.5751478713982827, 0.6353936002047443, 0.514679666704418, 0.6184117650461849, 0.4332894539149199, 0.2841629330015779, 0.35874870382244295, 0.3713774816986245, 0.3140580944011526, 0.33667741231490544, 0.3019448016850076, 0.4473250198522585, 0.46142938231067976, 0.23318720592753706, 0.21779277821019372, 0.19848495049476778, 0.19487343643862853, 0.2028244089579253, 0.25340674412518494, 0.21479577487986, 0.2138712999321315, 0.23164889333548422, 0.190657763958881, 0.21644515865612746, 0.23982386185362625, 0.202577793376845, 0.1874686683460356, 0.2439930051538579, 0.2384909282984179, 0.18729004673016203, 0.22144602552824344, 0.8781552030944508, 0.1744828440268955, 0.14745874876454146, 0.8890319659837993, 0.1997806439128511, 0.8694521071647632, 0.17058788179953133, 0.16493864068800013, 0.880263843879262, 0.8661697316104716, 0.21125721108792173, 0.20685015449668032, 0.714272119180646, 0.2075328726459187, 0.6789949317249762, 0.7419863789703358, 0.8136657311181188, 0.21198666372125696, 0.20718983750580477, 0.20290334619923545, 0.18855922674782644, 0.18462556578680966, 0.18022231968119018, 0.19163425654897281, 0.1780341859029071, 0.17390962572690283, 0.18372412326624055, 0.08828315565745704, 0.09303032241210862, 0.09060404985393067, 0.0855044425542848, 0.08729552664035689, 0.0937732120569561, 0.11731945766163077, 0.09009479234886808, 0.08873437117363625]}, "mutation_prompt": null}
{"id": "93ec25af-d4ab-478c-bd84-16d2f1a3f523", "solution": "import numpy as np\n\nclass OptimizedHybridEvolutionaryOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(30, budget // 12)  # Adjusted population size\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, dim))\n        self.velocities = np.random.uniform(-0.3, 0.3, (self.pop_size, dim))\n        self.personal_best_positions = self.population.copy()\n        self.personal_best_values = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evals = 0\n        self.F = 0.5  # Dynamic scaling based on performance\n        self.CR = 0.85  # Increased crossover rate\n        self.omega = 0.3  # Further decreased inertia weight\n        self.phi_p = 1.4  # New cognitive component\n        self.phi_g = 1.2  # New social component\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evals < self.budget:\n            for i in range(self.pop_size):\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), *self.bounds)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                trial_value = func(trial)\n                self.evals += 1\n                if trial_value < self.personal_best_values[i]:\n                    self.personal_best_positions[i] = trial\n                    self.personal_best_values[i] = trial_value\n                if trial_value < self.global_best_value:\n                    self.global_best_value = trial_value\n                    self.global_best_position = trial\n\n            rand_vals = np.random.rand(2, self.pop_size, self.dim)\n            self.velocities = (self.omega * self.velocities +\n                               rand_vals[0] * self.phi_p * (self.personal_best_positions - self.population) +\n                               rand_vals[1] * self.phi_g * (self.global_best_position - self.population))\n            self.population += self.velocities\n            np.clip(self.population, *self.bounds, out=self.population)\n\n        return self.global_best_value\n\n    def evaluate_population(self, func):\n        values = np.apply_along_axis(func, 1, self.population)\n        self.evals += self.pop_size\n        better_mask = values < self.personal_best_values\n        self.personal_best_positions[better_mask] = self.population[better_mask]\n        self.personal_best_values[better_mask] = values[better_mask]\n        min_idx = values.argmin()\n        if values[min_idx] < self.global_best_value:\n            self.global_best_value = values[min_idx]\n            self.global_best_position = self.population[min_idx]", "name": "OptimizedHybridEvolutionaryOptimizer", "description": "Optimized Hybrid Evolutionary Algorithm with dynamic parameter tuning and simplified operations for enhanced performance.", "configspace": "", "generation": 39, "fitness": 0.3522943222936406, "feedback": "The algorithm OptimizedHybridEvolutionaryOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.30.", "error": "", "parent_id": "a281f6a8-fca2-49fa-9dfa-b1b11edfe3a9", "metadata": {"aucs": [0.912989714961851, 0.9154344159030199, 0.911325450575271, 0.920112261021627, 0.9159606971738903, 0.9190393333751533, 0.9251252746319596, 0.9168510819254622, 0.9180727414095686, 0.821281525622317, 0.8253972842544415, 0.8308072565625633, 0.8307421534400337, 0.8200047239068631, 0.8486175101784383, 0.8388280390540042, 0.8380966616211073, 0.8289976796022328, 0.17781937613022003, 0.10090621803673316, 0.18121582229300703, 0.11227345747355633, 0.1337864168885522, 0.12382009210550837, 0.121973562033724, 0.783332814887391, 0.16026541176747433, 0.12385828079907901, 0.12201653796115408, 0.11590172413663946, 0.10501906123460558, 0.11749389021856838, 0.09971846547677488, 0.09694035851695049, 0.1086543633040783, 0.09605616724827482, 0.9820870525736312, 0.9809245554849745, 0.9838143038557996, 0.9801245447311067, 0.9789669318193163, 0.9799697500644702, 0.9853874107467369, 0.9677604968932018, 0.9823772724411416, 0.8162364143955583, 0.8126993461228189, 0.8109252857229121, 0.7803037136485445, 0.8067551535953066, 0.810924029535545, 0.8044327632585909, 0.7919127392177738, 0.7997586939432612, 0.22978357696070695, 0.22897537785902677, 0.2278523661791494, 0.2810708305361017, 0.213551027757528, 0.38029030767962635, 0.1785497998285629, 0.8856369499804064, 0.12114487977025223, 0.2309654729222228, 0.24032225800035756, 0.22373072449355136, 0.12989826527258996, 0.252321447472974, 0.21308466791351477, 0.2357390480203715, 0.2384872787726079, 0.2860154878444545, 0.18961359103232944, 0.22918312561252674, 0.13234967885099902, 0.25115829389050226, 0.23907745093715171, 0.23868364126758002, 0.2722744086036831, 0.2658215189162575, 0.12156302072078418, 0.004111293154636209, 9.999999999998899e-05, 0.056899336759141494, 0.05956394268415299, 9.999999999998899e-05, 0.0733501735671771, 0.03539520516772954, 0.002051652446869223, 0.050292890700608606, 0.04631598223107336, 0.041434056279496145, 0.16542488155211776, 0.040702375411850844, 0.06842747533262739, 0.03350325728829451, 0.034460355046607716, 0.051646012624232074, 0.05312108147532357, 0.03699607291864182, 0.15996099863250934, 0.3309072821253092, 0.30103108750169816, 0.20995452470013243, 0.10182353300360991, 0.08134328784074785, 0.13656117451495153, 0.30881727936665115, 0.15442559533492917, 0.05729823031746217, 0.17543113293600343, 0.011294595408062769, 0.3134491637879607, 0.1590267650431999, 0.18751936189433283, 0.3846703918399308, 0.0606858562647582, 0.6156911776573893, 0.5748045568315758, 0.6445674572967381, 0.6722789355033588, 0.5467431146490538, 0.6177127956909275, 0.6253570064636899, 0.6188360967571986, 0.6489166030912943, 0.11921654133701964, 0.1408340697786985, 0.15812019595772087, 0.0957049231571464, 0.15734820666723048, 0.09803596517886448, 0.11264211444082428, 0.15030002269875364, 0.11590703554456505, 0.44682053539972777, 0.27482770478862895, 0.19289005554912042, 0.4089872981866758, 0.21698823500973485, 0.2937270230311191, 0.25231482371183334, 0.36777763178918355, 0.26821749913509685, 0.7553120633904629, 0.3297933877167738, 0.34449968872079584, 0.5209589585410846, 0.6523156542597031, 0.43620415763752685, 0.4561926463421161, 0.6009663976806334, 0.48454059296396745, 0.24714791461105612, 0.28226591235838605, 0.2921924814909138, 0.3358091616034211, 0.22856409283403023, 0.23106960908495033, 0.38211395971822815, 0.3711861409462256, 0.3001369712505568, 0.2044845130823173, 0.1630799041389046, 0.20010979606207557, 0.23801187171313154, 0.2128941384680333, 0.23080022178824033, 0.261235498191257, 0.20543144639011646, 0.20902055304049327, 0.2108021553985402, 0.19609351236239203, 0.8488278852075777, 0.22680101673975428, 0.8149094032496786, 0.2109200133160537, 0.1922853558802261, 0.19193622771537777, 0.205387462515648, 0.18862841890226878, 0.18712546461916435, 0.165537709856999, 0.15892212559024665, 0.20033289447671976, 0.19951385903990926, 0.9286654034960835, 0.9168579956707474, 0.9288544413790013, 0.7907962597421541, 0.15649744120829856, 0.11231200827338494, 0.212238488569237, 0.6349319877976322, 0.2105604619093463, 0.16682987749593026, 0.10456380628161366, 0.1690675989803111, 0.19069934357892504, 0.18867014252815784, 0.20100968874828418, 0.18264954974759096, 0.1893702638871808, 0.18035043551948204, 0.1854560438784858, 0.1894068246872438, 0.18259593765662252, 0.13569388735828836, 0.07942402217213862, 0.10157451415770358, 0.08835391648282587, 0.10539662365521307, 0.09340707491050193, 0.08088354452929003, 0.08986851191989043, 0.08932156897424015]}, "mutation_prompt": null}
{"id": "6e067351-0f98-4ba5-b0ba-9d2d260c72d0", "solution": "import numpy as np\n\nclass OptimizedHybridEvolutionaryOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(30, budget // 12)  # Adjusted population size\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, dim))\n        self.velocities = np.random.uniform(-0.3, 0.3, (self.pop_size, dim))\n        self.personal_best_positions = self.population.copy()\n        self.personal_best_values = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evals = 0\n        self.F = 0.5  # Dynamic scaling based on performance\n        self.CR = 0.85  # Increased crossover rate\n        self.omega = 0.3  # Further decreased inertia weight\n        self.phi_p = 1.4  # New cognitive component\n        self.phi_g = 1.2  # New social component\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evals < self.budget:\n            for i in range(self.pop_size):\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), *self.bounds)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                trial_value = func(trial)\n                self.evals += 1\n                if trial_value < self.personal_best_values[i]:\n                    self.personal_best_positions[i] = trial\n                    self.personal_best_values[i] = trial_value\n                if trial_value < self.global_best_value:\n                    self.global_best_value = trial_value\n                    self.global_best_position = trial\n\n            rand_vals = np.random.rand(2, self.pop_size, self.dim)\n            self.velocities = (self.omega * self.velocities +\n                               rand_vals[0] * self.phi_p * (self.personal_best_positions - self.population) +\n                               rand_vals[1] * self.phi_g * (self.global_best_position - self.population))\n            self.population += self.velocities\n            np.clip(self.population, *self.bounds, out=self.population)\n\n        return self.global_best_value\n\n    def evaluate_population(self, func):\n        values = np.apply_along_axis(func, 1, self.population)\n        self.evals += self.pop_size\n        better_mask = values < self.personal_best_values\n        self.personal_best_positions[better_mask] = self.population[better_mask]\n        self.personal_best_values[better_mask] = values[better_mask]\n        min_idx = values.argmin()\n        if values[min_idx] < self.global_best_value:\n            self.global_best_value = values[min_idx]\n            self.global_best_position = self.population[min_idx]", "name": "OptimizedHybridEvolutionaryOptimizer", "description": "Optimized Hybrid Evolutionary Algorithm with dynamic parameter tuning and simplified operations for enhanced performance.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "93ec25af-d4ab-478c-bd84-16d2f1a3f523", "metadata": {"aucs": [0.912989714961851, 0.9154344159030199, 0.911325450575271, 0.920112261021627, 0.9159606971738903, 0.9190393333751533, 0.9251252746319596, 0.9168510819254622, 0.9180727414095686, 0.821281525622317, 0.8253972842544415, 0.8308072565625633, 0.8307421534400337, 0.8200047239068631, 0.8486175101784383, 0.8388280390540042, 0.8380966616211073, 0.8289976796022328, 0.17781937613022003, 0.10090621803673316, 0.18121582229300703, 0.11227345747355633, 0.1337864168885522, 0.12382009210550837, 0.121973562033724, 0.783332814887391, 0.16026541176747433, 0.12385828079907901, 0.12201653796115408, 0.11590172413663946, 0.10501906123460558, 0.11749389021856838, 0.09971846547677488, 0.09694035851695049, 0.1086543633040783, 0.09605616724827482, 0.9820870525736312, 0.9809245554849745, 0.9838143038557996, 0.9801245447311067, 0.9789669318193163, 0.9799697500644702, 0.9853874107467369, 0.9677604968932018, 0.9823772724411416, 0.8162364143955583, 0.8126993461228189, 0.8109252857229121, 0.7803037136485445, 0.8067551535953066, 0.810924029535545, 0.8044327632585909, 0.7919127392177738, 0.7997586939432612, 0.22978357696070695, 0.22897537785902677, 0.2278523661791494, 0.2810708305361017, 0.213551027757528, 0.38029030767962635, 0.1785497998285629, 0.8856369499804064, 0.12114487977025223, 0.2309654729222228, 0.24032225800035756, 0.22373072449355136, 0.12989826527258996, 0.252321447472974, 0.21308466791351477, 0.2357390480203715, 0.2384872787726079, 0.2860154878444545, 0.18961359103232944, 0.22918312561252674, 0.13234967885099902, 0.25115829389050226, 0.23907745093715171, 0.23868364126758002, 0.2722744086036831, 0.2658215189162575, 0.12156302072078418, 0.004111293154636209, 9.999999999998899e-05, 0.056899336759141494, 0.05956394268415299, 9.999999999998899e-05, 0.0733501735671771, 0.03539520516772954, 0.002051652446869223, 0.050292890700608606, 0.04631598223107336, 0.041434056279496145, 0.16542488155211776, 0.040702375411850844, 0.06842747533262739, 0.03350325728829451, 0.034460355046607716, 0.051646012624232074, 0.05312108147532357, 0.03699607291864182, 0.15996099863250934, 0.3309072821253092, 0.30103108750169816, 0.20995452470013243, 0.10182353300360991, 0.08134328784074785, 0.13656117451495153, 0.30881727936665115, 0.15442559533492917, 0.05729823031746217, 0.17543113293600343, 0.011294595408062769, 0.3134491637879607, 0.1590267650431999, 0.18751936189433283, 0.3846703918399308, 0.0606858562647582, 0.6156911776573893, 0.5748045568315758, 0.6445674572967381, 0.6722789355033588, 0.5467431146490538, 0.6177127956909275, 0.6253570064636899, 0.6188360967571986, 0.6489166030912943, 0.11921654133701964, 0.1408340697786985, 0.15812019595772087, 0.0957049231571464, 0.15734820666723048, 0.09803596517886448, 0.11264211444082428, 0.15030002269875364, 0.11590703554456505, 0.44682053539972777, 0.27482770478862895, 0.19289005554912042, 0.4089872981866758, 0.21698823500973485, 0.2937270230311191, 0.25231482371183334, 0.36777763178918355, 0.26821749913509685, 0.7553120633904629, 0.3297933877167738, 0.34449968872079584, 0.5209589585410846, 0.6523156542597031, 0.43620415763752685, 0.4561926463421161, 0.6009663976806334, 0.48454059296396745, 0.24714791461105612, 0.28226591235838605, 0.2921924814909138, 0.3358091616034211, 0.22856409283403023, 0.23106960908495033, 0.38211395971822815, 0.3711861409462256, 0.3001369712505568, 0.2044845130823173, 0.1630799041389046, 0.20010979606207557, 0.23801187171313154, 0.2128941384680333, 0.23080022178824033, 0.261235498191257, 0.20543144639011646, 0.20902055304049327, 0.2108021553985402, 0.19609351236239203, 0.8488278852075777, 0.22680101673975428, 0.8149094032496786, 0.2109200133160537, 0.1922853558802261, 0.19193622771537777, 0.205387462515648, 0.18862841890226878, 0.18712546461916435, 0.165537709856999, 0.15892212559024665, 0.20033289447671976, 0.19951385903990926, 0.9286654034960835, 0.9168579956707474, 0.9288544413790013, 0.7907962597421541, 0.15649744120829856, 0.11231200827338494, 0.212238488569237, 0.6349319877976322, 0.2105604619093463, 0.16682987749593026, 0.10456380628161366, 0.1690675989803111, 0.19069934357892504, 0.18867014252815784, 0.20100968874828418, 0.18264954974759096, 0.1893702638871808, 0.18035043551948204, 0.1854560438784858, 0.1894068246872438, 0.18259593765662252, 0.13569388735828836, 0.07942402217213862, 0.10157451415770358, 0.08835391648282587, 0.10539662365521307, 0.09340707491050193, 0.08088354452929003, 0.08986851191989043, 0.08932156897424015]}, "mutation_prompt": null}
{"id": "c90c8d25-9141-4ac4-9846-50afb04f7359", "solution": "import numpy as np\n\nclass OptimizedHybridEvolutionaryOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(30, budget // 12)  # Adjusted population size\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, dim))\n        self.velocities = np.random.uniform(-0.3, 0.3, (self.pop_size, dim))\n        self.personal_best_positions = self.population.copy()\n        self.personal_best_values = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evals = 0\n        self.F = 0.5  # Dynamic scaling based on performance\n        self.CR = 0.85  # Increased crossover rate\n        self.omega = 0.3  # Further decreased inertia weight\n        self.phi_p = 1.4  # New cognitive component\n        self.phi_g = 1.2  # New social component\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evals < self.budget:\n            for i in range(self.pop_size):\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), *self.bounds)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                trial_value = func(trial)\n                self.evals += 1\n                if trial_value < self.personal_best_values[i]:\n                    self.personal_best_positions[i] = trial\n                    self.personal_best_values[i] = trial_value\n                if trial_value < self.global_best_value:\n                    self.global_best_value = trial_value\n                    self.global_best_position = trial\n\n            rand_vals = np.random.rand(2, self.pop_size, self.dim)\n            self.velocities = (self.omega * self.velocities +\n                               rand_vals[0] * self.phi_p * (self.personal_best_positions - self.population) +\n                               rand_vals[1] * self.phi_g * (self.global_best_position - self.population))\n            self.population += self.velocities\n            np.clip(self.population, *self.bounds, out=self.population)\n\n        return self.global_best_value\n\n    def evaluate_population(self, func):\n        values = np.apply_along_axis(func, 1, self.population)\n        self.evals += self.pop_size\n        better_mask = values < self.personal_best_values\n        self.personal_best_positions[better_mask] = self.population[better_mask]\n        self.personal_best_values[better_mask] = values[better_mask]\n        min_idx = values.argmin()\n        if values[min_idx] < self.global_best_value:\n            self.global_best_value = values[min_idx]\n            self.global_best_position = self.population[min_idx]", "name": "OptimizedHybridEvolutionaryOptimizer", "description": "Optimized Hybrid Evolutionary Algorithm with dynamic parameter tuning and simplified operations for enhanced performance.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "93ec25af-d4ab-478c-bd84-16d2f1a3f523", "metadata": {"aucs": [0.912989714961851, 0.9154344159030199, 0.911325450575271, 0.920112261021627, 0.9159606971738903, 0.9190393333751533, 0.9251252746319596, 0.9168510819254622, 0.9180727414095686, 0.821281525622317, 0.8253972842544415, 0.8308072565625633, 0.8307421534400337, 0.8200047239068631, 0.8486175101784383, 0.8388280390540042, 0.8380966616211073, 0.8289976796022328, 0.17781937613022003, 0.10090621803673316, 0.18121582229300703, 0.11227345747355633, 0.1337864168885522, 0.12382009210550837, 0.121973562033724, 0.783332814887391, 0.16026541176747433, 0.12385828079907901, 0.12201653796115408, 0.11590172413663946, 0.10501906123460558, 0.11749389021856838, 0.09971846547677488, 0.09694035851695049, 0.1086543633040783, 0.09605616724827482, 0.9820870525736312, 0.9809245554849745, 0.9838143038557996, 0.9801245447311067, 0.9789669318193163, 0.9799697500644702, 0.9853874107467369, 0.9677604968932018, 0.9823772724411416, 0.8162364143955583, 0.8126993461228189, 0.8109252857229121, 0.7803037136485445, 0.8067551535953066, 0.810924029535545, 0.8044327632585909, 0.7919127392177738, 0.7997586939432612, 0.22978357696070695, 0.22897537785902677, 0.2278523661791494, 0.2810708305361017, 0.213551027757528, 0.38029030767962635, 0.1785497998285629, 0.8856369499804064, 0.12114487977025223, 0.2309654729222228, 0.24032225800035756, 0.22373072449355136, 0.12989826527258996, 0.252321447472974, 0.21308466791351477, 0.2357390480203715, 0.2384872787726079, 0.2860154878444545, 0.18961359103232944, 0.22918312561252674, 0.13234967885099902, 0.25115829389050226, 0.23907745093715171, 0.23868364126758002, 0.2722744086036831, 0.2658215189162575, 0.12156302072078418, 0.004111293154636209, 9.999999999998899e-05, 0.056899336759141494, 0.05956394268415299, 9.999999999998899e-05, 0.0733501735671771, 0.03539520516772954, 0.002051652446869223, 0.050292890700608606, 0.04631598223107336, 0.041434056279496145, 0.16542488155211776, 0.040702375411850844, 0.06842747533262739, 0.03350325728829451, 0.034460355046607716, 0.051646012624232074, 0.05312108147532357, 0.03699607291864182, 0.15996099863250934, 0.3309072821253092, 0.30103108750169816, 0.20995452470013243, 0.10182353300360991, 0.08134328784074785, 0.13656117451495153, 0.30881727936665115, 0.15442559533492917, 0.05729823031746217, 0.17543113293600343, 0.011294595408062769, 0.3134491637879607, 0.1590267650431999, 0.18751936189433283, 0.3846703918399308, 0.0606858562647582, 0.6156911776573893, 0.5748045568315758, 0.6445674572967381, 0.6722789355033588, 0.5467431146490538, 0.6177127956909275, 0.6253570064636899, 0.6188360967571986, 0.6489166030912943, 0.11921654133701964, 0.1408340697786985, 0.15812019595772087, 0.0957049231571464, 0.15734820666723048, 0.09803596517886448, 0.11264211444082428, 0.15030002269875364, 0.11590703554456505, 0.44682053539972777, 0.27482770478862895, 0.19289005554912042, 0.4089872981866758, 0.21698823500973485, 0.2937270230311191, 0.25231482371183334, 0.36777763178918355, 0.26821749913509685, 0.7553120633904629, 0.3297933877167738, 0.34449968872079584, 0.5209589585410846, 0.6523156542597031, 0.43620415763752685, 0.4561926463421161, 0.6009663976806334, 0.48454059296396745, 0.24714791461105612, 0.28226591235838605, 0.2921924814909138, 0.3358091616034211, 0.22856409283403023, 0.23106960908495033, 0.38211395971822815, 0.3711861409462256, 0.3001369712505568, 0.2044845130823173, 0.1630799041389046, 0.20010979606207557, 0.23801187171313154, 0.2128941384680333, 0.23080022178824033, 0.261235498191257, 0.20543144639011646, 0.20902055304049327, 0.2108021553985402, 0.19609351236239203, 0.8488278852075777, 0.22680101673975428, 0.8149094032496786, 0.2109200133160537, 0.1922853558802261, 0.19193622771537777, 0.205387462515648, 0.18862841890226878, 0.18712546461916435, 0.165537709856999, 0.15892212559024665, 0.20033289447671976, 0.19951385903990926, 0.9286654034960835, 0.9168579956707474, 0.9288544413790013, 0.7907962597421541, 0.15649744120829856, 0.11231200827338494, 0.212238488569237, 0.6349319877976322, 0.2105604619093463, 0.16682987749593026, 0.10456380628161366, 0.1690675989803111, 0.19069934357892504, 0.18867014252815784, 0.20100968874828418, 0.18264954974759096, 0.1893702638871808, 0.18035043551948204, 0.1854560438784858, 0.1894068246872438, 0.18259593765662252, 0.13569388735828836, 0.07942402217213862, 0.10157451415770358, 0.08835391648282587, 0.10539662365521307, 0.09340707491050193, 0.08088354452929003, 0.08986851191989043, 0.08932156897424015]}, "mutation_prompt": null}
{"id": "fd7ac795-fd4a-412c-8e37-fbcb1d33bcbf", "solution": "import numpy as np\n\nclass OptimizedHybridEvolutionaryOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(30, budget // 12)  # Adjusted population size\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, dim))\n        self.velocities = np.random.uniform(-0.3, 0.3, (self.pop_size, dim))\n        self.personal_best_positions = self.population.copy()\n        self.personal_best_values = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evals = 0\n        self.F = 0.5  # Dynamic scaling based on performance\n        self.CR = 0.85  # Increased crossover rate\n        self.omega = 0.3  # Further decreased inertia weight\n        self.phi_p = 1.4  # New cognitive component\n        self.phi_g = 1.2  # New social component\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evals < self.budget:\n            for i in range(self.pop_size):\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), *self.bounds)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                trial_value = func(trial)\n                self.evals += 1\n                if trial_value < self.personal_best_values[i]:\n                    self.personal_best_positions[i] = trial\n                    self.personal_best_values[i] = trial_value\n                if trial_value < self.global_best_value:\n                    self.global_best_value = trial_value\n                    self.global_best_position = trial\n\n            rand_vals = np.random.rand(2, self.pop_size, self.dim)\n            self.velocities = (self.omega * self.velocities +\n                               rand_vals[0] * self.phi_p * (self.personal_best_positions - self.population) +\n                               rand_vals[1] * self.phi_g * (self.global_best_position - self.population))\n            self.population += self.velocities\n            np.clip(self.population, *self.bounds, out=self.population)\n\n        return self.global_best_value\n\n    def evaluate_population(self, func):\n        values = np.apply_along_axis(func, 1, self.population)\n        self.evals += self.pop_size\n        better_mask = values < self.personal_best_values\n        self.personal_best_positions[better_mask] = self.population[better_mask]\n        self.personal_best_values[better_mask] = values[better_mask]\n        min_idx = values.argmin()\n        if values[min_idx] < self.global_best_value:\n            self.global_best_value = values[min_idx]\n            self.global_best_position = self.population[min_idx]", "name": "OptimizedHybridEvolutionaryOptimizer", "description": "Optimized Hybrid Evolutionary Algorithm with dynamic parameter tuning and simplified operations for enhanced performance.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "93ec25af-d4ab-478c-bd84-16d2f1a3f523", "metadata": {"aucs": [0.912989714961851, 0.9154344159030199, 0.911325450575271, 0.920112261021627, 0.9159606971738903, 0.9190393333751533, 0.9251252746319596, 0.9168510819254622, 0.9180727414095686, 0.821281525622317, 0.8253972842544415, 0.8308072565625633, 0.8307421534400337, 0.8200047239068631, 0.8486175101784383, 0.8388280390540042, 0.8380966616211073, 0.8289976796022328, 0.17781937613022003, 0.10090621803673316, 0.18121582229300703, 0.11227345747355633, 0.1337864168885522, 0.12382009210550837, 0.121973562033724, 0.783332814887391, 0.16026541176747433, 0.12385828079907901, 0.12201653796115408, 0.11590172413663946, 0.10501906123460558, 0.11749389021856838, 0.09971846547677488, 0.09694035851695049, 0.1086543633040783, 0.09605616724827482, 0.9820870525736312, 0.9809245554849745, 0.9838143038557996, 0.9801245447311067, 0.9789669318193163, 0.9799697500644702, 0.9853874107467369, 0.9677604968932018, 0.9823772724411416, 0.8162364143955583, 0.8126993461228189, 0.8109252857229121, 0.7803037136485445, 0.8067551535953066, 0.810924029535545, 0.8044327632585909, 0.7919127392177738, 0.7997586939432612, 0.22978357696070695, 0.22897537785902677, 0.2278523661791494, 0.2810708305361017, 0.213551027757528, 0.38029030767962635, 0.1785497998285629, 0.8856369499804064, 0.12114487977025223, 0.2309654729222228, 0.24032225800035756, 0.22373072449355136, 0.12989826527258996, 0.252321447472974, 0.21308466791351477, 0.2357390480203715, 0.2384872787726079, 0.2860154878444545, 0.18961359103232944, 0.22918312561252674, 0.13234967885099902, 0.25115829389050226, 0.23907745093715171, 0.23868364126758002, 0.2722744086036831, 0.2658215189162575, 0.12156302072078418, 0.004111293154636209, 9.999999999998899e-05, 0.056899336759141494, 0.05956394268415299, 9.999999999998899e-05, 0.0733501735671771, 0.03539520516772954, 0.002051652446869223, 0.050292890700608606, 0.04631598223107336, 0.041434056279496145, 0.16542488155211776, 0.040702375411850844, 0.06842747533262739, 0.03350325728829451, 0.034460355046607716, 0.051646012624232074, 0.05312108147532357, 0.03699607291864182, 0.15996099863250934, 0.3309072821253092, 0.30103108750169816, 0.20995452470013243, 0.10182353300360991, 0.08134328784074785, 0.13656117451495153, 0.30881727936665115, 0.15442559533492917, 0.05729823031746217, 0.17543113293600343, 0.011294595408062769, 0.3134491637879607, 0.1590267650431999, 0.18751936189433283, 0.3846703918399308, 0.0606858562647582, 0.6156911776573893, 0.5748045568315758, 0.6445674572967381, 0.6722789355033588, 0.5467431146490538, 0.6177127956909275, 0.6253570064636899, 0.6188360967571986, 0.6489166030912943, 0.11921654133701964, 0.1408340697786985, 0.15812019595772087, 0.0957049231571464, 0.15734820666723048, 0.09803596517886448, 0.11264211444082428, 0.15030002269875364, 0.11590703554456505, 0.44682053539972777, 0.27482770478862895, 0.19289005554912042, 0.4089872981866758, 0.21698823500973485, 0.2937270230311191, 0.25231482371183334, 0.36777763178918355, 0.26821749913509685, 0.7553120633904629, 0.3297933877167738, 0.34449968872079584, 0.5209589585410846, 0.6523156542597031, 0.43620415763752685, 0.4561926463421161, 0.6009663976806334, 0.48454059296396745, 0.24714791461105612, 0.28226591235838605, 0.2921924814909138, 0.3358091616034211, 0.22856409283403023, 0.23106960908495033, 0.38211395971822815, 0.3711861409462256, 0.3001369712505568, 0.2044845130823173, 0.1630799041389046, 0.20010979606207557, 0.23801187171313154, 0.2128941384680333, 0.23080022178824033, 0.261235498191257, 0.20543144639011646, 0.20902055304049327, 0.2108021553985402, 0.19609351236239203, 0.8488278852075777, 0.22680101673975428, 0.8149094032496786, 0.2109200133160537, 0.1922853558802261, 0.19193622771537777, 0.205387462515648, 0.18862841890226878, 0.18712546461916435, 0.165537709856999, 0.15892212559024665, 0.20033289447671976, 0.19951385903990926, 0.9286654034960835, 0.9168579956707474, 0.9288544413790013, 0.7907962597421541, 0.15649744120829856, 0.11231200827338494, 0.212238488569237, 0.6349319877976322, 0.2105604619093463, 0.16682987749593026, 0.10456380628161366, 0.1690675989803111, 0.19069934357892504, 0.18867014252815784, 0.20100968874828418, 0.18264954974759096, 0.1893702638871808, 0.18035043551948204, 0.1854560438784858, 0.1894068246872438, 0.18259593765662252, 0.13569388735828836, 0.07942402217213862, 0.10157451415770358, 0.08835391648282587, 0.10539662365521307, 0.09340707491050193, 0.08088354452929003, 0.08986851191989043, 0.08932156897424015]}, "mutation_prompt": null}
{"id": "8991df1e-2cc9-455c-a364-40263c218e6f", "solution": "import numpy as np\n\nclass OptimizedHybridEvolutionaryOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(30, budget // 12)  # Adjusted population size\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, dim))\n        self.velocities = np.random.uniform(-0.3, 0.3, (self.pop_size, dim))\n        self.personal_best_positions = self.population.copy()\n        self.personal_best_values = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evals = 0\n        self.F = 0.5  # Dynamic scaling based on performance\n        self.CR = 0.85  # Increased crossover rate\n        self.omega = 0.3  # Further decreased inertia weight\n        self.phi_p = 1.4  # New cognitive component\n        self.phi_g = 1.2  # New social component\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evals < self.budget:\n            for i in range(self.pop_size):\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), *self.bounds)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                trial_value = func(trial)\n                self.evals += 1\n                if trial_value < self.personal_best_values[i]:\n                    self.personal_best_positions[i] = trial\n                    self.personal_best_values[i] = trial_value\n                if trial_value < self.global_best_value:\n                    self.global_best_value = trial_value\n                    self.global_best_position = trial\n\n            rand_vals = np.random.rand(2, self.pop_size, self.dim)\n            self.velocities = (self.omega * self.velocities +\n                               rand_vals[0] * self.phi_p * (self.personal_best_positions - self.population) +\n                               rand_vals[1] * self.phi_g * (self.global_best_position - self.population))\n            self.population += self.velocities\n            np.clip(self.population, *self.bounds, out=self.population)\n\n        return self.global_best_value\n\n    def evaluate_population(self, func):\n        values = np.apply_along_axis(func, 1, self.population)\n        self.evals += self.pop_size\n        better_mask = values < self.personal_best_values\n        self.personal_best_positions[better_mask] = self.population[better_mask]\n        self.personal_best_values[better_mask] = values[better_mask]\n        min_idx = values.argmin()\n        if values[min_idx] < self.global_best_value:\n            self.global_best_value = values[min_idx]\n            self.global_best_position = self.population[min_idx]", "name": "OptimizedHybridEvolutionaryOptimizer", "description": "Optimized Hybrid Evolutionary Algorithm with dynamic parameter tuning and simplified operations for enhanced performance.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "93ec25af-d4ab-478c-bd84-16d2f1a3f523", "metadata": {"aucs": [0.912989714961851, 0.9154344159030199, 0.911325450575271, 0.920112261021627, 0.9159606971738903, 0.9190393333751533, 0.9251252746319596, 0.9168510819254622, 0.9180727414095686, 0.821281525622317, 0.8253972842544415, 0.8308072565625633, 0.8307421534400337, 0.8200047239068631, 0.8486175101784383, 0.8388280390540042, 0.8380966616211073, 0.8289976796022328, 0.17781937613022003, 0.10090621803673316, 0.18121582229300703, 0.11227345747355633, 0.1337864168885522, 0.12382009210550837, 0.121973562033724, 0.783332814887391, 0.16026541176747433, 0.12385828079907901, 0.12201653796115408, 0.11590172413663946, 0.10501906123460558, 0.11749389021856838, 0.09971846547677488, 0.09694035851695049, 0.1086543633040783, 0.09605616724827482, 0.9820870525736312, 0.9809245554849745, 0.9838143038557996, 0.9801245447311067, 0.9789669318193163, 0.9799697500644702, 0.9853874107467369, 0.9677604968932018, 0.9823772724411416, 0.8162364143955583, 0.8126993461228189, 0.8109252857229121, 0.7803037136485445, 0.8067551535953066, 0.810924029535545, 0.8044327632585909, 0.7919127392177738, 0.7997586939432612, 0.22978357696070695, 0.22897537785902677, 0.2278523661791494, 0.2810708305361017, 0.213551027757528, 0.38029030767962635, 0.1785497998285629, 0.8856369499804064, 0.12114487977025223, 0.2309654729222228, 0.24032225800035756, 0.22373072449355136, 0.12989826527258996, 0.252321447472974, 0.21308466791351477, 0.2357390480203715, 0.2384872787726079, 0.2860154878444545, 0.18961359103232944, 0.22918312561252674, 0.13234967885099902, 0.25115829389050226, 0.23907745093715171, 0.23868364126758002, 0.2722744086036831, 0.2658215189162575, 0.12156302072078418, 0.004111293154636209, 9.999999999998899e-05, 0.056899336759141494, 0.05956394268415299, 9.999999999998899e-05, 0.0733501735671771, 0.03539520516772954, 0.002051652446869223, 0.050292890700608606, 0.04631598223107336, 0.041434056279496145, 0.16542488155211776, 0.040702375411850844, 0.06842747533262739, 0.03350325728829451, 0.034460355046607716, 0.051646012624232074, 0.05312108147532357, 0.03699607291864182, 0.15996099863250934, 0.3309072821253092, 0.30103108750169816, 0.20995452470013243, 0.10182353300360991, 0.08134328784074785, 0.13656117451495153, 0.30881727936665115, 0.15442559533492917, 0.05729823031746217, 0.17543113293600343, 0.011294595408062769, 0.3134491637879607, 0.1590267650431999, 0.18751936189433283, 0.3846703918399308, 0.0606858562647582, 0.6156911776573893, 0.5748045568315758, 0.6445674572967381, 0.6722789355033588, 0.5467431146490538, 0.6177127956909275, 0.6253570064636899, 0.6188360967571986, 0.6489166030912943, 0.11921654133701964, 0.1408340697786985, 0.15812019595772087, 0.0957049231571464, 0.15734820666723048, 0.09803596517886448, 0.11264211444082428, 0.15030002269875364, 0.11590703554456505, 0.44682053539972777, 0.27482770478862895, 0.19289005554912042, 0.4089872981866758, 0.21698823500973485, 0.2937270230311191, 0.25231482371183334, 0.36777763178918355, 0.26821749913509685, 0.7553120633904629, 0.3297933877167738, 0.34449968872079584, 0.5209589585410846, 0.6523156542597031, 0.43620415763752685, 0.4561926463421161, 0.6009663976806334, 0.48454059296396745, 0.24714791461105612, 0.28226591235838605, 0.2921924814909138, 0.3358091616034211, 0.22856409283403023, 0.23106960908495033, 0.38211395971822815, 0.3711861409462256, 0.3001369712505568, 0.2044845130823173, 0.1630799041389046, 0.20010979606207557, 0.23801187171313154, 0.2128941384680333, 0.23080022178824033, 0.261235498191257, 0.20543144639011646, 0.20902055304049327, 0.2108021553985402, 0.19609351236239203, 0.8488278852075777, 0.22680101673975428, 0.8149094032496786, 0.2109200133160537, 0.1922853558802261, 0.19193622771537777, 0.205387462515648, 0.18862841890226878, 0.18712546461916435, 0.165537709856999, 0.15892212559024665, 0.20033289447671976, 0.19951385903990926, 0.9286654034960835, 0.9168579956707474, 0.9288544413790013, 0.7907962597421541, 0.15649744120829856, 0.11231200827338494, 0.212238488569237, 0.6349319877976322, 0.2105604619093463, 0.16682987749593026, 0.10456380628161366, 0.1690675989803111, 0.19069934357892504, 0.18867014252815784, 0.20100968874828418, 0.18264954974759096, 0.1893702638871808, 0.18035043551948204, 0.1854560438784858, 0.1894068246872438, 0.18259593765662252, 0.13569388735828836, 0.07942402217213862, 0.10157451415770358, 0.08835391648282587, 0.10539662365521307, 0.09340707491050193, 0.08088354452929003, 0.08986851191989043, 0.08932156897424015]}, "mutation_prompt": null}
{"id": "5001a5e7-ae79-4c0e-b984-770f955c9e35", "solution": "import numpy as np\n\nclass OptimizedHybridEvolutionaryOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(30, budget // 12)  # Adjusted population size\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, dim))\n        self.velocities = np.random.uniform(-0.3, 0.3, (self.pop_size, dim))\n        self.personal_best_positions = self.population.copy()\n        self.personal_best_values = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evals = 0\n        self.F = 0.5  # Dynamic scaling based on performance\n        self.CR = 0.85  # Increased crossover rate\n        self.omega = 0.3  # Further decreased inertia weight\n        self.phi_p = 1.4  # New cognitive component\n        self.phi_g = 1.2  # New social component\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evals < self.budget:\n            for i in range(self.pop_size):\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), *self.bounds)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                trial_value = func(trial)\n                self.evals += 1\n                if trial_value < self.personal_best_values[i]:\n                    self.personal_best_positions[i] = trial\n                    self.personal_best_values[i] = trial_value\n                if trial_value < self.global_best_value:\n                    self.global_best_value = trial_value\n                    self.global_best_position = trial\n\n            rand_vals = np.random.rand(2, self.pop_size, self.dim)\n            self.velocities = (self.omega * self.velocities +\n                               rand_vals[0] * self.phi_p * (self.personal_best_positions - self.population) +\n                               rand_vals[1] * self.phi_g * (self.global_best_position - self.population))\n            self.population += self.velocities\n            np.clip(self.population, *self.bounds, out=self.population)\n\n        return self.global_best_value\n\n    def evaluate_population(self, func):\n        values = np.apply_along_axis(func, 1, self.population)\n        self.evals += self.pop_size\n        better_mask = values < self.personal_best_values\n        self.personal_best_positions[better_mask] = self.population[better_mask]\n        self.personal_best_values[better_mask] = values[better_mask]\n        min_idx = values.argmin()\n        if values[min_idx] < self.global_best_value:\n            self.global_best_value = values[min_idx]\n            self.global_best_position = self.population[min_idx]", "name": "OptimizedHybridEvolutionaryOptimizer", "description": "Optimized Hybrid Evolutionary Algorithm with dynamic parameter tuning and simplified operations for enhanced performance.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "93ec25af-d4ab-478c-bd84-16d2f1a3f523", "metadata": {"aucs": [0.912989714961851, 0.9154344159030199, 0.911325450575271, 0.920112261021627, 0.9159606971738903, 0.9190393333751533, 0.9251252746319596, 0.9168510819254622, 0.9180727414095686, 0.821281525622317, 0.8253972842544415, 0.8308072565625633, 0.8307421534400337, 0.8200047239068631, 0.8486175101784383, 0.8388280390540042, 0.8380966616211073, 0.8289976796022328, 0.17781937613022003, 0.10090621803673316, 0.18121582229300703, 0.11227345747355633, 0.1337864168885522, 0.12382009210550837, 0.121973562033724, 0.783332814887391, 0.16026541176747433, 0.12385828079907901, 0.12201653796115408, 0.11590172413663946, 0.10501906123460558, 0.11749389021856838, 0.09971846547677488, 0.09694035851695049, 0.1086543633040783, 0.09605616724827482, 0.9820870525736312, 0.9809245554849745, 0.9838143038557996, 0.9801245447311067, 0.9789669318193163, 0.9799697500644702, 0.9853874107467369, 0.9677604968932018, 0.9823772724411416, 0.8162364143955583, 0.8126993461228189, 0.8109252857229121, 0.7803037136485445, 0.8067551535953066, 0.810924029535545, 0.8044327632585909, 0.7919127392177738, 0.7997586939432612, 0.22978357696070695, 0.22897537785902677, 0.2278523661791494, 0.2810708305361017, 0.213551027757528, 0.38029030767962635, 0.1785497998285629, 0.8856369499804064, 0.12114487977025223, 0.2309654729222228, 0.24032225800035756, 0.22373072449355136, 0.12989826527258996, 0.252321447472974, 0.21308466791351477, 0.2357390480203715, 0.2384872787726079, 0.2860154878444545, 0.18961359103232944, 0.22918312561252674, 0.13234967885099902, 0.25115829389050226, 0.23907745093715171, 0.23868364126758002, 0.2722744086036831, 0.2658215189162575, 0.12156302072078418, 0.004111293154636209, 9.999999999998899e-05, 0.056899336759141494, 0.05956394268415299, 9.999999999998899e-05, 0.0733501735671771, 0.03539520516772954, 0.002051652446869223, 0.050292890700608606, 0.04631598223107336, 0.041434056279496145, 0.16542488155211776, 0.040702375411850844, 0.06842747533262739, 0.03350325728829451, 0.034460355046607716, 0.051646012624232074, 0.05312108147532357, 0.03699607291864182, 0.15996099863250934, 0.3309072821253092, 0.30103108750169816, 0.20995452470013243, 0.10182353300360991, 0.08134328784074785, 0.13656117451495153, 0.30881727936665115, 0.15442559533492917, 0.05729823031746217, 0.17543113293600343, 0.011294595408062769, 0.3134491637879607, 0.1590267650431999, 0.18751936189433283, 0.3846703918399308, 0.0606858562647582, 0.6156911776573893, 0.5748045568315758, 0.6445674572967381, 0.6722789355033588, 0.5467431146490538, 0.6177127956909275, 0.6253570064636899, 0.6188360967571986, 0.6489166030912943, 0.11921654133701964, 0.1408340697786985, 0.15812019595772087, 0.0957049231571464, 0.15734820666723048, 0.09803596517886448, 0.11264211444082428, 0.15030002269875364, 0.11590703554456505, 0.44682053539972777, 0.27482770478862895, 0.19289005554912042, 0.4089872981866758, 0.21698823500973485, 0.2937270230311191, 0.25231482371183334, 0.36777763178918355, 0.26821749913509685, 0.7553120633904629, 0.3297933877167738, 0.34449968872079584, 0.5209589585410846, 0.6523156542597031, 0.43620415763752685, 0.4561926463421161, 0.6009663976806334, 0.48454059296396745, 0.24714791461105612, 0.28226591235838605, 0.2921924814909138, 0.3358091616034211, 0.22856409283403023, 0.23106960908495033, 0.38211395971822815, 0.3711861409462256, 0.3001369712505568, 0.2044845130823173, 0.1630799041389046, 0.20010979606207557, 0.23801187171313154, 0.2128941384680333, 0.23080022178824033, 0.261235498191257, 0.20543144639011646, 0.20902055304049327, 0.2108021553985402, 0.19609351236239203, 0.8488278852075777, 0.22680101673975428, 0.8149094032496786, 0.2109200133160537, 0.1922853558802261, 0.19193622771537777, 0.205387462515648, 0.18862841890226878, 0.18712546461916435, 0.165537709856999, 0.15892212559024665, 0.20033289447671976, 0.19951385903990926, 0.9286654034960835, 0.9168579956707474, 0.9288544413790013, 0.7907962597421541, 0.15649744120829856, 0.11231200827338494, 0.212238488569237, 0.6349319877976322, 0.2105604619093463, 0.16682987749593026, 0.10456380628161366, 0.1690675989803111, 0.19069934357892504, 0.18867014252815784, 0.20100968874828418, 0.18264954974759096, 0.1893702638871808, 0.18035043551948204, 0.1854560438784858, 0.1894068246872438, 0.18259593765662252, 0.13569388735828836, 0.07942402217213862, 0.10157451415770358, 0.08835391648282587, 0.10539662365521307, 0.09340707491050193, 0.08088354452929003, 0.08986851191989043, 0.08932156897424015]}, "mutation_prompt": null}
{"id": "e5e70651-8c47-4d42-b4be-cb5199197ff6", "solution": "import numpy as np\n\nclass OptimizedHybridEvolutionaryOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(30, budget // 12)  # Adjusted population size\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, dim))\n        self.velocities = np.random.uniform(-0.3, 0.3, (self.pop_size, dim))\n        self.personal_best_positions = self.population.copy()\n        self.personal_best_values = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evals = 0\n        self.F = 0.5  # Dynamic scaling based on performance\n        self.CR = 0.85  # Increased crossover rate\n        self.omega = 0.3  # Further decreased inertia weight\n        self.phi_p = 1.4  # New cognitive component\n        self.phi_g = 1.2  # New social component\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evals < self.budget:\n            for i in range(self.pop_size):\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), *self.bounds)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                trial_value = func(trial)\n                self.evals += 1\n                if trial_value < self.personal_best_values[i]:\n                    self.personal_best_positions[i] = trial\n                    self.personal_best_values[i] = trial_value\n                if trial_value < self.global_best_value:\n                    self.global_best_value = trial_value\n                    self.global_best_position = trial\n\n            rand_vals = np.random.rand(2, self.pop_size, self.dim)\n            self.velocities = (self.omega * self.velocities +\n                               rand_vals[0] * self.phi_p * (self.personal_best_positions - self.population) +\n                               rand_vals[1] * self.phi_g * (self.global_best_position - self.population))\n            self.population += self.velocities\n            np.clip(self.population, *self.bounds, out=self.population)\n\n        return self.global_best_value\n\n    def evaluate_population(self, func):\n        values = np.apply_along_axis(func, 1, self.population)\n        self.evals += self.pop_size\n        better_mask = values < self.personal_best_values\n        self.personal_best_positions[better_mask] = self.population[better_mask]\n        self.personal_best_values[better_mask] = values[better_mask]\n        min_idx = values.argmin()\n        if values[min_idx] < self.global_best_value:\n            self.global_best_value = values[min_idx]\n            self.global_best_position = self.population[min_idx]", "name": "OptimizedHybridEvolutionaryOptimizer", "description": "Optimized Hybrid Evolutionary Algorithm with dynamic parameter tuning and simplified operations for enhanced performance.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "93ec25af-d4ab-478c-bd84-16d2f1a3f523", "metadata": {"aucs": [0.912989714961851, 0.9154344159030199, 0.911325450575271, 0.920112261021627, 0.9159606971738903, 0.9190393333751533, 0.9251252746319596, 0.9168510819254622, 0.9180727414095686, 0.821281525622317, 0.8253972842544415, 0.8308072565625633, 0.8307421534400337, 0.8200047239068631, 0.8486175101784383, 0.8388280390540042, 0.8380966616211073, 0.8289976796022328, 0.17781937613022003, 0.10090621803673316, 0.18121582229300703, 0.11227345747355633, 0.1337864168885522, 0.12382009210550837, 0.121973562033724, 0.783332814887391, 0.16026541176747433, 0.12385828079907901, 0.12201653796115408, 0.11590172413663946, 0.10501906123460558, 0.11749389021856838, 0.09971846547677488, 0.09694035851695049, 0.1086543633040783, 0.09605616724827482, 0.9820870525736312, 0.9809245554849745, 0.9838143038557996, 0.9801245447311067, 0.9789669318193163, 0.9799697500644702, 0.9853874107467369, 0.9677604968932018, 0.9823772724411416, 0.8162364143955583, 0.8126993461228189, 0.8109252857229121, 0.7803037136485445, 0.8067551535953066, 0.810924029535545, 0.8044327632585909, 0.7919127392177738, 0.7997586939432612, 0.22978357696070695, 0.22897537785902677, 0.2278523661791494, 0.2810708305361017, 0.213551027757528, 0.38029030767962635, 0.1785497998285629, 0.8856369499804064, 0.12114487977025223, 0.2309654729222228, 0.24032225800035756, 0.22373072449355136, 0.12989826527258996, 0.252321447472974, 0.21308466791351477, 0.2357390480203715, 0.2384872787726079, 0.2860154878444545, 0.18961359103232944, 0.22918312561252674, 0.13234967885099902, 0.25115829389050226, 0.23907745093715171, 0.23868364126758002, 0.2722744086036831, 0.2658215189162575, 0.12156302072078418, 0.004111293154636209, 9.999999999998899e-05, 0.056899336759141494, 0.05956394268415299, 9.999999999998899e-05, 0.0733501735671771, 0.03539520516772954, 0.002051652446869223, 0.050292890700608606, 0.04631598223107336, 0.041434056279496145, 0.16542488155211776, 0.040702375411850844, 0.06842747533262739, 0.03350325728829451, 0.034460355046607716, 0.051646012624232074, 0.05312108147532357, 0.03699607291864182, 0.15996099863250934, 0.3309072821253092, 0.30103108750169816, 0.20995452470013243, 0.10182353300360991, 0.08134328784074785, 0.13656117451495153, 0.30881727936665115, 0.15442559533492917, 0.05729823031746217, 0.17543113293600343, 0.011294595408062769, 0.3134491637879607, 0.1590267650431999, 0.18751936189433283, 0.3846703918399308, 0.0606858562647582, 0.6156911776573893, 0.5748045568315758, 0.6445674572967381, 0.6722789355033588, 0.5467431146490538, 0.6177127956909275, 0.6253570064636899, 0.6188360967571986, 0.6489166030912943, 0.11921654133701964, 0.1408340697786985, 0.15812019595772087, 0.0957049231571464, 0.15734820666723048, 0.09803596517886448, 0.11264211444082428, 0.15030002269875364, 0.11590703554456505, 0.44682053539972777, 0.27482770478862895, 0.19289005554912042, 0.4089872981866758, 0.21698823500973485, 0.2937270230311191, 0.25231482371183334, 0.36777763178918355, 0.26821749913509685, 0.7553120633904629, 0.3297933877167738, 0.34449968872079584, 0.5209589585410846, 0.6523156542597031, 0.43620415763752685, 0.4561926463421161, 0.6009663976806334, 0.48454059296396745, 0.24714791461105612, 0.28226591235838605, 0.2921924814909138, 0.3358091616034211, 0.22856409283403023, 0.23106960908495033, 0.38211395971822815, 0.3711861409462256, 0.3001369712505568, 0.2044845130823173, 0.1630799041389046, 0.20010979606207557, 0.23801187171313154, 0.2128941384680333, 0.23080022178824033, 0.261235498191257, 0.20543144639011646, 0.20902055304049327, 0.2108021553985402, 0.19609351236239203, 0.8488278852075777, 0.22680101673975428, 0.8149094032496786, 0.2109200133160537, 0.1922853558802261, 0.19193622771537777, 0.205387462515648, 0.18862841890226878, 0.18712546461916435, 0.165537709856999, 0.15892212559024665, 0.20033289447671976, 0.19951385903990926, 0.9286654034960835, 0.9168579956707474, 0.9288544413790013, 0.7907962597421541, 0.15649744120829856, 0.11231200827338494, 0.212238488569237, 0.6349319877976322, 0.2105604619093463, 0.16682987749593026, 0.10456380628161366, 0.1690675989803111, 0.19069934357892504, 0.18867014252815784, 0.20100968874828418, 0.18264954974759096, 0.1893702638871808, 0.18035043551948204, 0.1854560438784858, 0.1894068246872438, 0.18259593765662252, 0.13569388735828836, 0.07942402217213862, 0.10157451415770358, 0.08835391648282587, 0.10539662365521307, 0.09340707491050193, 0.08088354452929003, 0.08986851191989043, 0.08932156897424015]}, "mutation_prompt": null}
{"id": "84c8b516-f143-4fec-84ad-9799edbb0321", "solution": "import numpy as np\n\nclass OptimizedHybridEvolutionaryOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(30, budget // 12)  # Adjusted population size\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, dim))\n        self.velocities = np.random.uniform(-0.3, 0.3, (self.pop_size, dim))\n        self.personal_best_positions = self.population.copy()\n        self.personal_best_values = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evals = 0\n        self.F = 0.5  # Dynamic scaling based on performance\n        self.CR = 0.85  # Increased crossover rate\n        self.omega = 0.3  # Further decreased inertia weight\n        self.phi_p = 1.4  # New cognitive component\n        self.phi_g = 1.2  # New social component\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evals < self.budget:\n            for i in range(self.pop_size):\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), *self.bounds)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                trial_value = func(trial)\n                self.evals += 1\n                if trial_value < self.personal_best_values[i]:\n                    self.personal_best_positions[i] = trial\n                    self.personal_best_values[i] = trial_value\n                if trial_value < self.global_best_value:\n                    self.global_best_value = trial_value\n                    self.global_best_position = trial\n\n            rand_vals = np.random.rand(2, self.pop_size, self.dim)\n            self.velocities = (self.omega * self.velocities +\n                               rand_vals[0] * self.phi_p * (self.personal_best_positions - self.population) +\n                               rand_vals[1] * self.phi_g * (self.global_best_position - self.population))\n            self.population += self.velocities\n            np.clip(self.population, *self.bounds, out=self.population)\n\n        return self.global_best_value\n\n    def evaluate_population(self, func):\n        values = np.apply_along_axis(func, 1, self.population)\n        self.evals += self.pop_size\n        better_mask = values < self.personal_best_values\n        self.personal_best_positions[better_mask] = self.population[better_mask]\n        self.personal_best_values[better_mask] = values[better_mask]\n        min_idx = values.argmin()\n        if values[min_idx] < self.global_best_value:\n            self.global_best_value = values[min_idx]\n            self.global_best_position = self.population[min_idx]", "name": "OptimizedHybridEvolutionaryOptimizer", "description": "Optimized Hybrid Evolutionary Algorithm with dynamic parameter tuning and simplified operations for enhanced performance.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "93ec25af-d4ab-478c-bd84-16d2f1a3f523", "metadata": {"aucs": [0.912989714961851, 0.9154344159030199, 0.911325450575271, 0.920112261021627, 0.9159606971738903, 0.9190393333751533, 0.9251252746319596, 0.9168510819254622, 0.9180727414095686, 0.821281525622317, 0.8253972842544415, 0.8308072565625633, 0.8307421534400337, 0.8200047239068631, 0.8486175101784383, 0.8388280390540042, 0.8380966616211073, 0.8289976796022328, 0.17781937613022003, 0.10090621803673316, 0.18121582229300703, 0.11227345747355633, 0.1337864168885522, 0.12382009210550837, 0.121973562033724, 0.783332814887391, 0.16026541176747433, 0.12385828079907901, 0.12201653796115408, 0.11590172413663946, 0.10501906123460558, 0.11749389021856838, 0.09971846547677488, 0.09694035851695049, 0.1086543633040783, 0.09605616724827482, 0.9820870525736312, 0.9809245554849745, 0.9838143038557996, 0.9801245447311067, 0.9789669318193163, 0.9799697500644702, 0.9853874107467369, 0.9677604968932018, 0.9823772724411416, 0.8162364143955583, 0.8126993461228189, 0.8109252857229121, 0.7803037136485445, 0.8067551535953066, 0.810924029535545, 0.8044327632585909, 0.7919127392177738, 0.7997586939432612, 0.22978357696070695, 0.22897537785902677, 0.2278523661791494, 0.2810708305361017, 0.213551027757528, 0.38029030767962635, 0.1785497998285629, 0.8856369499804064, 0.12114487977025223, 0.2309654729222228, 0.24032225800035756, 0.22373072449355136, 0.12989826527258996, 0.252321447472974, 0.21308466791351477, 0.2357390480203715, 0.2384872787726079, 0.2860154878444545, 0.18961359103232944, 0.22918312561252674, 0.13234967885099902, 0.25115829389050226, 0.23907745093715171, 0.23868364126758002, 0.2722744086036831, 0.2658215189162575, 0.12156302072078418, 0.004111293154636209, 9.999999999998899e-05, 0.056899336759141494, 0.05956394268415299, 9.999999999998899e-05, 0.0733501735671771, 0.03539520516772954, 0.002051652446869223, 0.050292890700608606, 0.04631598223107336, 0.041434056279496145, 0.16542488155211776, 0.040702375411850844, 0.06842747533262739, 0.03350325728829451, 0.034460355046607716, 0.051646012624232074, 0.05312108147532357, 0.03699607291864182, 0.15996099863250934, 0.3309072821253092, 0.30103108750169816, 0.20995452470013243, 0.10182353300360991, 0.08134328784074785, 0.13656117451495153, 0.30881727936665115, 0.15442559533492917, 0.05729823031746217, 0.17543113293600343, 0.011294595408062769, 0.3134491637879607, 0.1590267650431999, 0.18751936189433283, 0.3846703918399308, 0.0606858562647582, 0.6156911776573893, 0.5748045568315758, 0.6445674572967381, 0.6722789355033588, 0.5467431146490538, 0.6177127956909275, 0.6253570064636899, 0.6188360967571986, 0.6489166030912943, 0.11921654133701964, 0.1408340697786985, 0.15812019595772087, 0.0957049231571464, 0.15734820666723048, 0.09803596517886448, 0.11264211444082428, 0.15030002269875364, 0.11590703554456505, 0.44682053539972777, 0.27482770478862895, 0.19289005554912042, 0.4089872981866758, 0.21698823500973485, 0.2937270230311191, 0.25231482371183334, 0.36777763178918355, 0.26821749913509685, 0.7553120633904629, 0.3297933877167738, 0.34449968872079584, 0.5209589585410846, 0.6523156542597031, 0.43620415763752685, 0.4561926463421161, 0.6009663976806334, 0.48454059296396745, 0.24714791461105612, 0.28226591235838605, 0.2921924814909138, 0.3358091616034211, 0.22856409283403023, 0.23106960908495033, 0.38211395971822815, 0.3711861409462256, 0.3001369712505568, 0.2044845130823173, 0.1630799041389046, 0.20010979606207557, 0.23801187171313154, 0.2128941384680333, 0.23080022178824033, 0.261235498191257, 0.20543144639011646, 0.20902055304049327, 0.2108021553985402, 0.19609351236239203, 0.8488278852075777, 0.22680101673975428, 0.8149094032496786, 0.2109200133160537, 0.1922853558802261, 0.19193622771537777, 0.205387462515648, 0.18862841890226878, 0.18712546461916435, 0.165537709856999, 0.15892212559024665, 0.20033289447671976, 0.19951385903990926, 0.9286654034960835, 0.9168579956707474, 0.9288544413790013, 0.7907962597421541, 0.15649744120829856, 0.11231200827338494, 0.212238488569237, 0.6349319877976322, 0.2105604619093463, 0.16682987749593026, 0.10456380628161366, 0.1690675989803111, 0.19069934357892504, 0.18867014252815784, 0.20100968874828418, 0.18264954974759096, 0.1893702638871808, 0.18035043551948204, 0.1854560438784858, 0.1894068246872438, 0.18259593765662252, 0.13569388735828836, 0.07942402217213862, 0.10157451415770358, 0.08835391648282587, 0.10539662365521307, 0.09340707491050193, 0.08088354452929003, 0.08986851191989043, 0.08932156897424015]}, "mutation_prompt": null}
{"id": "b7a83b1f-037a-45fa-bad1-7b319491f7ad", "solution": "import numpy as np\n\nclass OptimizedHybridEvolutionaryOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(30, budget // 12)  # Adjusted population size\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, dim))\n        self.velocities = np.random.uniform(-0.3, 0.3, (self.pop_size, dim))\n        self.personal_best_positions = self.population.copy()\n        self.personal_best_values = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evals = 0\n        self.F = 0.5  # Dynamic scaling based on performance\n        self.CR = 0.85  # Increased crossover rate\n        self.omega = 0.3  # Further decreased inertia weight\n        self.phi_p = 1.4  # New cognitive component\n        self.phi_g = 1.2  # New social component\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evals < self.budget:\n            for i in range(self.pop_size):\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), *self.bounds)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                trial_value = func(trial)\n                self.evals += 1\n                if trial_value < self.personal_best_values[i]:\n                    self.personal_best_positions[i] = trial\n                    self.personal_best_values[i] = trial_value\n                if trial_value < self.global_best_value:\n                    self.global_best_value = trial_value\n                    self.global_best_position = trial\n\n            rand_vals = np.random.rand(2, self.pop_size, self.dim)\n            self.velocities = (self.omega * self.velocities +\n                               rand_vals[0] * self.phi_p * (self.personal_best_positions - self.population) +\n                               rand_vals[1] * self.phi_g * (self.global_best_position - self.population))\n            self.population += self.velocities\n            np.clip(self.population, *self.bounds, out=self.population)\n\n        return self.global_best_value\n\n    def evaluate_population(self, func):\n        values = np.apply_along_axis(func, 1, self.population)\n        self.evals += self.pop_size\n        better_mask = values < self.personal_best_values\n        self.personal_best_positions[better_mask] = self.population[better_mask]\n        self.personal_best_values[better_mask] = values[better_mask]\n        min_idx = values.argmin()\n        if values[min_idx] < self.global_best_value:\n            self.global_best_value = values[min_idx]\n            self.global_best_position = self.population[min_idx]", "name": "OptimizedHybridEvolutionaryOptimizer", "description": "Optimized Hybrid Evolutionary Algorithm with dynamic parameter tuning and simplified operations for enhanced performance.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "93ec25af-d4ab-478c-bd84-16d2f1a3f523", "metadata": {"aucs": [0.912989714961851, 0.9154344159030199, 0.911325450575271, 0.920112261021627, 0.9159606971738903, 0.9190393333751533, 0.9251252746319596, 0.9168510819254622, 0.9180727414095686, 0.821281525622317, 0.8253972842544415, 0.8308072565625633, 0.8307421534400337, 0.8200047239068631, 0.8486175101784383, 0.8388280390540042, 0.8380966616211073, 0.8289976796022328, 0.17781937613022003, 0.10090621803673316, 0.18121582229300703, 0.11227345747355633, 0.1337864168885522, 0.12382009210550837, 0.121973562033724, 0.783332814887391, 0.16026541176747433, 0.12385828079907901, 0.12201653796115408, 0.11590172413663946, 0.10501906123460558, 0.11749389021856838, 0.09971846547677488, 0.09694035851695049, 0.1086543633040783, 0.09605616724827482, 0.9820870525736312, 0.9809245554849745, 0.9838143038557996, 0.9801245447311067, 0.9789669318193163, 0.9799697500644702, 0.9853874107467369, 0.9677604968932018, 0.9823772724411416, 0.8162364143955583, 0.8126993461228189, 0.8109252857229121, 0.7803037136485445, 0.8067551535953066, 0.810924029535545, 0.8044327632585909, 0.7919127392177738, 0.7997586939432612, 0.22978357696070695, 0.22897537785902677, 0.2278523661791494, 0.2810708305361017, 0.213551027757528, 0.38029030767962635, 0.1785497998285629, 0.8856369499804064, 0.12114487977025223, 0.2309654729222228, 0.24032225800035756, 0.22373072449355136, 0.12989826527258996, 0.252321447472974, 0.21308466791351477, 0.2357390480203715, 0.2384872787726079, 0.2860154878444545, 0.18961359103232944, 0.22918312561252674, 0.13234967885099902, 0.25115829389050226, 0.23907745093715171, 0.23868364126758002, 0.2722744086036831, 0.2658215189162575, 0.12156302072078418, 0.004111293154636209, 9.999999999998899e-05, 0.056899336759141494, 0.05956394268415299, 9.999999999998899e-05, 0.0733501735671771, 0.03539520516772954, 0.002051652446869223, 0.050292890700608606, 0.04631598223107336, 0.041434056279496145, 0.16542488155211776, 0.040702375411850844, 0.06842747533262739, 0.03350325728829451, 0.034460355046607716, 0.051646012624232074, 0.05312108147532357, 0.03699607291864182, 0.15996099863250934, 0.3309072821253092, 0.30103108750169816, 0.20995452470013243, 0.10182353300360991, 0.08134328784074785, 0.13656117451495153, 0.30881727936665115, 0.15442559533492917, 0.05729823031746217, 0.17543113293600343, 0.011294595408062769, 0.3134491637879607, 0.1590267650431999, 0.18751936189433283, 0.3846703918399308, 0.0606858562647582, 0.6156911776573893, 0.5748045568315758, 0.6445674572967381, 0.6722789355033588, 0.5467431146490538, 0.6177127956909275, 0.6253570064636899, 0.6188360967571986, 0.6489166030912943, 0.11921654133701964, 0.1408340697786985, 0.15812019595772087, 0.0957049231571464, 0.15734820666723048, 0.09803596517886448, 0.11264211444082428, 0.15030002269875364, 0.11590703554456505, 0.44682053539972777, 0.27482770478862895, 0.19289005554912042, 0.4089872981866758, 0.21698823500973485, 0.2937270230311191, 0.25231482371183334, 0.36777763178918355, 0.26821749913509685, 0.7553120633904629, 0.3297933877167738, 0.34449968872079584, 0.5209589585410846, 0.6523156542597031, 0.43620415763752685, 0.4561926463421161, 0.6009663976806334, 0.48454059296396745, 0.24714791461105612, 0.28226591235838605, 0.2921924814909138, 0.3358091616034211, 0.22856409283403023, 0.23106960908495033, 0.38211395971822815, 0.3711861409462256, 0.3001369712505568, 0.2044845130823173, 0.1630799041389046, 0.20010979606207557, 0.23801187171313154, 0.2128941384680333, 0.23080022178824033, 0.261235498191257, 0.20543144639011646, 0.20902055304049327, 0.2108021553985402, 0.19609351236239203, 0.8488278852075777, 0.22680101673975428, 0.8149094032496786, 0.2109200133160537, 0.1922853558802261, 0.19193622771537777, 0.205387462515648, 0.18862841890226878, 0.18712546461916435, 0.165537709856999, 0.15892212559024665, 0.20033289447671976, 0.19951385903990926, 0.9286654034960835, 0.9168579956707474, 0.9288544413790013, 0.7907962597421541, 0.15649744120829856, 0.11231200827338494, 0.212238488569237, 0.6349319877976322, 0.2105604619093463, 0.16682987749593026, 0.10456380628161366, 0.1690675989803111, 0.19069934357892504, 0.18867014252815784, 0.20100968874828418, 0.18264954974759096, 0.1893702638871808, 0.18035043551948204, 0.1854560438784858, 0.1894068246872438, 0.18259593765662252, 0.13569388735828836, 0.07942402217213862, 0.10157451415770358, 0.08835391648282587, 0.10539662365521307, 0.09340707491050193, 0.08088354452929003, 0.08986851191989043, 0.08932156897424015]}, "mutation_prompt": null}
{"id": "525f673b-c2df-4f20-8fc0-2cc43cbab8ee", "solution": "import numpy as np\n\nclass OptimizedHybridEvolutionaryOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(30, budget // 12)  # Adjusted population size\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, dim))\n        self.velocities = np.random.uniform(-0.3, 0.3, (self.pop_size, dim))\n        self.personal_best_positions = self.population.copy()\n        self.personal_best_values = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evals = 0\n        self.F = 0.5  # Dynamic scaling based on performance\n        self.CR = 0.85  # Increased crossover rate\n        self.omega = 0.3  # Further decreased inertia weight\n        self.phi_p = 1.4  # New cognitive component\n        self.phi_g = 1.2  # New social component\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evals < self.budget:\n            for i in range(self.pop_size):\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), *self.bounds)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                trial_value = func(trial)\n                self.evals += 1\n                if trial_value < self.personal_best_values[i]:\n                    self.personal_best_positions[i] = trial\n                    self.personal_best_values[i] = trial_value\n                if trial_value < self.global_best_value:\n                    self.global_best_value = trial_value\n                    self.global_best_position = trial\n\n            rand_vals = np.random.rand(2, self.pop_size, self.dim)\n            self.velocities = (self.omega * self.velocities +\n                               rand_vals[0] * self.phi_p * (self.personal_best_positions - self.population) +\n                               rand_vals[1] * self.phi_g * (self.global_best_position - self.population))\n            self.population += self.velocities\n            np.clip(self.population, *self.bounds, out=self.population)\n\n        return self.global_best_value\n\n    def evaluate_population(self, func):\n        values = np.apply_along_axis(func, 1, self.population)\n        self.evals += self.pop_size\n        better_mask = values < self.personal_best_values\n        self.personal_best_positions[better_mask] = self.population[better_mask]\n        self.personal_best_values[better_mask] = values[better_mask]\n        min_idx = values.argmin()\n        if values[min_idx] < self.global_best_value:\n            self.global_best_value = values[min_idx]\n            self.global_best_position = self.population[min_idx]", "name": "OptimizedHybridEvolutionaryOptimizer", "description": "Optimized Hybrid Evolutionary Algorithm with dynamic parameter tuning and simplified operations for enhanced performance.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "93ec25af-d4ab-478c-bd84-16d2f1a3f523", "metadata": {"aucs": [0.912989714961851, 0.9154344159030199, 0.911325450575271, 0.920112261021627, 0.9159606971738903, 0.9190393333751533, 0.9251252746319596, 0.9168510819254622, 0.9180727414095686, 0.821281525622317, 0.8253972842544415, 0.8308072565625633, 0.8307421534400337, 0.8200047239068631, 0.8486175101784383, 0.8388280390540042, 0.8380966616211073, 0.8289976796022328, 0.17781937613022003, 0.10090621803673316, 0.18121582229300703, 0.11227345747355633, 0.1337864168885522, 0.12382009210550837, 0.121973562033724, 0.783332814887391, 0.16026541176747433, 0.12385828079907901, 0.12201653796115408, 0.11590172413663946, 0.10501906123460558, 0.11749389021856838, 0.09971846547677488, 0.09694035851695049, 0.1086543633040783, 0.09605616724827482, 0.9820870525736312, 0.9809245554849745, 0.9838143038557996, 0.9801245447311067, 0.9789669318193163, 0.9799697500644702, 0.9853874107467369, 0.9677604968932018, 0.9823772724411416, 0.8162364143955583, 0.8126993461228189, 0.8109252857229121, 0.7803037136485445, 0.8067551535953066, 0.810924029535545, 0.8044327632585909, 0.7919127392177738, 0.7997586939432612, 0.22978357696070695, 0.22897537785902677, 0.2278523661791494, 0.2810708305361017, 0.213551027757528, 0.38029030767962635, 0.1785497998285629, 0.8856369499804064, 0.12114487977025223, 0.2309654729222228, 0.24032225800035756, 0.22373072449355136, 0.12989826527258996, 0.252321447472974, 0.21308466791351477, 0.2357390480203715, 0.2384872787726079, 0.2860154878444545, 0.18961359103232944, 0.22918312561252674, 0.13234967885099902, 0.25115829389050226, 0.23907745093715171, 0.23868364126758002, 0.2722744086036831, 0.2658215189162575, 0.12156302072078418, 0.004111293154636209, 9.999999999998899e-05, 0.056899336759141494, 0.05956394268415299, 9.999999999998899e-05, 0.0733501735671771, 0.03539520516772954, 0.002051652446869223, 0.050292890700608606, 0.04631598223107336, 0.041434056279496145, 0.16542488155211776, 0.040702375411850844, 0.06842747533262739, 0.03350325728829451, 0.034460355046607716, 0.051646012624232074, 0.05312108147532357, 0.03699607291864182, 0.15996099863250934, 0.3309072821253092, 0.30103108750169816, 0.20995452470013243, 0.10182353300360991, 0.08134328784074785, 0.13656117451495153, 0.30881727936665115, 0.15442559533492917, 0.05729823031746217, 0.17543113293600343, 0.011294595408062769, 0.3134491637879607, 0.1590267650431999, 0.18751936189433283, 0.3846703918399308, 0.0606858562647582, 0.6156911776573893, 0.5748045568315758, 0.6445674572967381, 0.6722789355033588, 0.5467431146490538, 0.6177127956909275, 0.6253570064636899, 0.6188360967571986, 0.6489166030912943, 0.11921654133701964, 0.1408340697786985, 0.15812019595772087, 0.0957049231571464, 0.15734820666723048, 0.09803596517886448, 0.11264211444082428, 0.15030002269875364, 0.11590703554456505, 0.44682053539972777, 0.27482770478862895, 0.19289005554912042, 0.4089872981866758, 0.21698823500973485, 0.2937270230311191, 0.25231482371183334, 0.36777763178918355, 0.26821749913509685, 0.7553120633904629, 0.3297933877167738, 0.34449968872079584, 0.5209589585410846, 0.6523156542597031, 0.43620415763752685, 0.4561926463421161, 0.6009663976806334, 0.48454059296396745, 0.24714791461105612, 0.28226591235838605, 0.2921924814909138, 0.3358091616034211, 0.22856409283403023, 0.23106960908495033, 0.38211395971822815, 0.3711861409462256, 0.3001369712505568, 0.2044845130823173, 0.1630799041389046, 0.20010979606207557, 0.23801187171313154, 0.2128941384680333, 0.23080022178824033, 0.261235498191257, 0.20543144639011646, 0.20902055304049327, 0.2108021553985402, 0.19609351236239203, 0.8488278852075777, 0.22680101673975428, 0.8149094032496786, 0.2109200133160537, 0.1922853558802261, 0.19193622771537777, 0.205387462515648, 0.18862841890226878, 0.18712546461916435, 0.165537709856999, 0.15892212559024665, 0.20033289447671976, 0.19951385903990926, 0.9286654034960835, 0.9168579956707474, 0.9288544413790013, 0.7907962597421541, 0.15649744120829856, 0.11231200827338494, 0.212238488569237, 0.6349319877976322, 0.2105604619093463, 0.16682987749593026, 0.10456380628161366, 0.1690675989803111, 0.19069934357892504, 0.18867014252815784, 0.20100968874828418, 0.18264954974759096, 0.1893702638871808, 0.18035043551948204, 0.1854560438784858, 0.1894068246872438, 0.18259593765662252, 0.13569388735828836, 0.07942402217213862, 0.10157451415770358, 0.08835391648282587, 0.10539662365521307, 0.09340707491050193, 0.08088354452929003, 0.08986851191989043, 0.08932156897424015]}, "mutation_prompt": null}
{"id": "5f055dc5-ba1b-4e75-9015-94619e4fb659", "solution": "import numpy as np\n\nclass OptimizedHybridEvolutionaryOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(30, budget // 12)  # Adjusted population size\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, dim))\n        self.velocities = np.random.uniform(-0.3, 0.3, (self.pop_size, dim))\n        self.personal_best_positions = self.population.copy()\n        self.personal_best_values = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evals = 0\n        self.F = 0.5  # Dynamic scaling based on performance\n        self.CR = 0.85  # Increased crossover rate\n        self.omega = 0.3  # Further decreased inertia weight\n        self.phi_p = 1.4  # New cognitive component\n        self.phi_g = 1.2  # New social component\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evals < self.budget:\n            for i in range(self.pop_size):\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), *self.bounds)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                trial_value = func(trial)\n                self.evals += 1\n                if trial_value < self.personal_best_values[i]:\n                    self.personal_best_positions[i] = trial\n                    self.personal_best_values[i] = trial_value\n                if trial_value < self.global_best_value:\n                    self.global_best_value = trial_value\n                    self.global_best_position = trial\n\n            rand_vals = np.random.rand(2, self.pop_size, self.dim)\n            self.velocities = (self.omega * self.velocities +\n                               rand_vals[0] * self.phi_p * (self.personal_best_positions - self.population) +\n                               rand_vals[1] * self.phi_g * (self.global_best_position - self.population))\n            self.population += self.velocities\n            np.clip(self.population, *self.bounds, out=self.population)\n\n        return self.global_best_value\n\n    def evaluate_population(self, func):\n        values = np.apply_along_axis(func, 1, self.population)\n        self.evals += self.pop_size\n        better_mask = values < self.personal_best_values\n        self.personal_best_positions[better_mask] = self.population[better_mask]\n        self.personal_best_values[better_mask] = values[better_mask]\n        min_idx = values.argmin()\n        if values[min_idx] < self.global_best_value:\n            self.global_best_value = values[min_idx]\n            self.global_best_position = self.population[min_idx]", "name": "OptimizedHybridEvolutionaryOptimizer", "description": "Optimized Hybrid Evolutionary Algorithm with dynamic parameter tuning and simplified operations for enhanced performance.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "93ec25af-d4ab-478c-bd84-16d2f1a3f523", "metadata": {"aucs": [0.912989714961851, 0.9154344159030199, 0.911325450575271, 0.920112261021627, 0.9159606971738903, 0.9190393333751533, 0.9251252746319596, 0.9168510819254622, 0.9180727414095686, 0.821281525622317, 0.8253972842544415, 0.8308072565625633, 0.8307421534400337, 0.8200047239068631, 0.8486175101784383, 0.8388280390540042, 0.8380966616211073, 0.8289976796022328, 0.17781937613022003, 0.10090621803673316, 0.18121582229300703, 0.11227345747355633, 0.1337864168885522, 0.12382009210550837, 0.121973562033724, 0.783332814887391, 0.16026541176747433, 0.12385828079907901, 0.12201653796115408, 0.11590172413663946, 0.10501906123460558, 0.11749389021856838, 0.09971846547677488, 0.09694035851695049, 0.1086543633040783, 0.09605616724827482, 0.9820870525736312, 0.9809245554849745, 0.9838143038557996, 0.9801245447311067, 0.9789669318193163, 0.9799697500644702, 0.9853874107467369, 0.9677604968932018, 0.9823772724411416, 0.8162364143955583, 0.8126993461228189, 0.8109252857229121, 0.7803037136485445, 0.8067551535953066, 0.810924029535545, 0.8044327632585909, 0.7919127392177738, 0.7997586939432612, 0.22978357696070695, 0.22897537785902677, 0.2278523661791494, 0.2810708305361017, 0.213551027757528, 0.38029030767962635, 0.1785497998285629, 0.8856369499804064, 0.12114487977025223, 0.2309654729222228, 0.24032225800035756, 0.22373072449355136, 0.12989826527258996, 0.252321447472974, 0.21308466791351477, 0.2357390480203715, 0.2384872787726079, 0.2860154878444545, 0.18961359103232944, 0.22918312561252674, 0.13234967885099902, 0.25115829389050226, 0.23907745093715171, 0.23868364126758002, 0.2722744086036831, 0.2658215189162575, 0.12156302072078418, 0.004111293154636209, 9.999999999998899e-05, 0.056899336759141494, 0.05956394268415299, 9.999999999998899e-05, 0.0733501735671771, 0.03539520516772954, 0.002051652446869223, 0.050292890700608606, 0.04631598223107336, 0.041434056279496145, 0.16542488155211776, 0.040702375411850844, 0.06842747533262739, 0.03350325728829451, 0.034460355046607716, 0.051646012624232074, 0.05312108147532357, 0.03699607291864182, 0.15996099863250934, 0.3309072821253092, 0.30103108750169816, 0.20995452470013243, 0.10182353300360991, 0.08134328784074785, 0.13656117451495153, 0.30881727936665115, 0.15442559533492917, 0.05729823031746217, 0.17543113293600343, 0.011294595408062769, 0.3134491637879607, 0.1590267650431999, 0.18751936189433283, 0.3846703918399308, 0.0606858562647582, 0.6156911776573893, 0.5748045568315758, 0.6445674572967381, 0.6722789355033588, 0.5467431146490538, 0.6177127956909275, 0.6253570064636899, 0.6188360967571986, 0.6489166030912943, 0.11921654133701964, 0.1408340697786985, 0.15812019595772087, 0.0957049231571464, 0.15734820666723048, 0.09803596517886448, 0.11264211444082428, 0.15030002269875364, 0.11590703554456505, 0.44682053539972777, 0.27482770478862895, 0.19289005554912042, 0.4089872981866758, 0.21698823500973485, 0.2937270230311191, 0.25231482371183334, 0.36777763178918355, 0.26821749913509685, 0.7553120633904629, 0.3297933877167738, 0.34449968872079584, 0.5209589585410846, 0.6523156542597031, 0.43620415763752685, 0.4561926463421161, 0.6009663976806334, 0.48454059296396745, 0.24714791461105612, 0.28226591235838605, 0.2921924814909138, 0.3358091616034211, 0.22856409283403023, 0.23106960908495033, 0.38211395971822815, 0.3711861409462256, 0.3001369712505568, 0.2044845130823173, 0.1630799041389046, 0.20010979606207557, 0.23801187171313154, 0.2128941384680333, 0.23080022178824033, 0.261235498191257, 0.20543144639011646, 0.20902055304049327, 0.2108021553985402, 0.19609351236239203, 0.8488278852075777, 0.22680101673975428, 0.8149094032496786, 0.2109200133160537, 0.1922853558802261, 0.19193622771537777, 0.205387462515648, 0.18862841890226878, 0.18712546461916435, 0.165537709856999, 0.15892212559024665, 0.20033289447671976, 0.19951385903990926, 0.9286654034960835, 0.9168579956707474, 0.9288544413790013, 0.7907962597421541, 0.15649744120829856, 0.11231200827338494, 0.212238488569237, 0.6349319877976322, 0.2105604619093463, 0.16682987749593026, 0.10456380628161366, 0.1690675989803111, 0.19069934357892504, 0.18867014252815784, 0.20100968874828418, 0.18264954974759096, 0.1893702638871808, 0.18035043551948204, 0.1854560438784858, 0.1894068246872438, 0.18259593765662252, 0.13569388735828836, 0.07942402217213862, 0.10157451415770358, 0.08835391648282587, 0.10539662365521307, 0.09340707491050193, 0.08088354452929003, 0.08986851191989043, 0.08932156897424015]}, "mutation_prompt": null}
{"id": "f0c22bf2-7c98-4d3b-8c5e-05926c85f2be", "solution": "import numpy as np\n\nclass EnhancedAdaptiveEvolutionaryOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = max(20, budget // 10)  # Adjusted and slightly increased population size\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, dim))\n        self.personal_best_positions = self.population.copy()\n        self.personal_best_values = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evals = 0\n        self.F = 0.6  # Adaptive scaling factor\n        self.CR = 0.8  # Adjusted crossover rate\n        self.omega = 0.5  # Improved inertia weight for better exploration\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        learning_rate = 0.1  # New adaptive learning rate\n\n        while self.evals < self.budget:\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), *self.bounds)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                trial_value = func(trial)\n                self.evals += 1\n                if trial_value < self.personal_best_values[i]:\n                    self.personal_best_positions[i] = trial\n                    self.personal_best_values[i] = trial_value\n                if trial_value < self.global_best_value:\n                    self.global_best_value = trial_value\n                    self.global_best_position = trial\n\n            self.update_population(func, learning_rate)\n\n        return self.global_best_value\n\n    def update_population(self, func, learning_rate):\n        rand_vals = np.random.rand(self.pop_size, self.dim)\n        for i in range(self.pop_size):\n            cognitive_component = rand_vals[i] * (self.personal_best_positions[i] - self.population[i])\n            social_component = rand_vals[i] * (self.global_best_position - self.population[i])\n            self.population[i] += self.omega * (cognitive_component + social_component)\n            self.population[i] = np.clip(self.population[i], *self.bounds)\n            trial_value = func(self.population[i])\n            self.evals += 1\n            if trial_value < self.personal_best_values[i]:\n                self.personal_best_positions[i] = self.population[i]\n                self.personal_best_values[i] = trial_value\n            if trial_value < self.global_best_value:\n                self.global_best_value = trial_value\n                self.global_best_position = self.population[i]\n\n    def evaluate_population(self, func):\n        values = np.apply_along_axis(func, 1, self.population)\n        self.evals += self.pop_size\n        better_mask = values < self.personal_best_values\n        self.personal_best_positions[better_mask] = self.population[better_mask]\n        self.personal_best_values[better_mask] = values[better_mask]\n        min_idx = values.argmin()\n        if values[min_idx] < self.global_best_value:\n            self.global_best_value = values[min_idx]\n            self.global_best_position = self.population[min_idx]", "name": "EnhancedAdaptiveEvolutionaryOptimizer", "description": "Enhanced Adaptive Evolutionary Algorithm with more efficient population updates and adaptive strategy parameters for superior performance.", "configspace": "", "generation": 50, "fitness": 0.11231400092349356, "feedback": "The algorithm EnhancedAdaptiveEvolutionaryOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.08.", "error": "", "parent_id": "93ec25af-d4ab-478c-bd84-16d2f1a3f523", "metadata": {"aucs": [0.21956845230038968, 0.23305048396024874, 0.219288940739227, 0.2086291467463297, 0.19360326176305975, 0.200379485262263, 0.21029142049819805, 0.22010763811942724, 0.19170940038255369, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05915550263954805, 0.05779616692861511, 0.06591223744138874, 0.06035369540137259, 0.06461854930493649, 0.058688060992795776, 0.0781233907702954, 0.08339921487560675, 0.0598225841102078, 0.05134891469379199, 0.04193975268276007, 0.05155336862535553, 0.0543524804596629, 0.04447432066932666, 0.04865083457199182, 0.05404264495125166, 0.0496569194157348, 0.04891719137963246, 0.10127303476347893, 0.09846037772638161, 0.1116063135934715, 0.09998857273661266, 0.10294000157423511, 0.09586535349163294, 0.10659368015489112, 0.12328171606450145, 0.1065140360168445, 0.10237537414052744, 0.11921857032987937, 0.12270278572317062, 0.10233399468652371, 0.10500533551111535, 0.08161156457117236, 0.14530386073663648, 0.11013762085832024, 0.11430011122277794, 0.17325232757818232, 0.2118180910159203, 0.1717922384309477, 0.1646248508375534, 0.1497885992228466, 0.16001250128821554, 0.13861215303784136, 0.1676608280083699, 0.1519288240047708, 0.034295139015218745, 0.030980689907605163, 0.0459113446035182, 0.06967723589503949, 0.06219619876009708, 0.046763849243032785, 0.028544690035636977, 0.023452624787036802, 0.04321698697621701, 0.054010450679404465, 0.05460845276534221, 0.06360766403030671, 0.05390238931330893, 0.04078259469179013, 0.045738937829726045, 0.04919214336889344, 0.045918560380667106, 0.06593014183005219, 0.004383446027306337, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06581326041483393, 0.12694002683055938, 0.09993220517847057, 0.0629984770151113, 0.07301826010350576, 0.06426164161443415, 0.0748142280556906, 0.1070492294033265, 0.08129632686612842, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01585135357156542, 0.008735295973349988, 0.014304452154590974, 0.009542913591364832, 0.008019105829790929, 0.011138735200144079, 0.0073174932338518905, 0.0019017052241581123, 0.007290459041316755, 0.24498897258232444, 0.24540361553617307, 0.2338277285240331, 0.2361130114836325, 0.23999258919714617, 0.23861258671640218, 0.24228808218685027, 0.22990128553085876, 0.2363976853914337, 0.05878328965564339, 0.06259885563536705, 0.056613386014862765, 0.05558994419340457, 0.06069688036400367, 0.054924085314183135, 0.06447923140173484, 0.05338511375182409, 0.06828830457756307, 0.1403800740520713, 0.13334432401999652, 0.1344379418269911, 0.15915501244836416, 0.13511880823300437, 0.12899014676500387, 0.15653286925125975, 0.14450391177587085, 0.12836519461382812, 0.18697391014326104, 0.19449252714106646, 0.18217765985898782, 0.18459383572334132, 0.18543097493389205, 0.1909220370141428, 0.1935191991659001, 0.18544761411601962, 0.17851918689103408, 0.13210803131678217, 0.13689637949729005, 0.133700316797692, 0.12977776273430175, 0.13510310003709414, 0.15081287339487848, 0.12046010544955132, 0.1359985233955172, 0.11982738688674521, 0.1750792005119367, 0.1822777486824999, 0.18604823189077246, 0.19414352261352674, 0.18565940202144982, 0.19521367376712462, 0.18034969108480892, 0.1851517548966043, 0.19348971372733403, 0.15077056132501598, 0.1538892904400484, 0.15612013356944554, 0.15242167349279245, 0.16896930353841144, 0.16664767819572868, 0.15095265386182966, 0.15643640471197762, 0.1656086510881991, 0.15250852780161128, 0.2120746168074623, 0.22063001948756045, 0.2246253384415181, 0.26179186422881273, 0.2022513861391304, 0.22826265655947053, 0.31112790689934966, 0.15809010641193055, 0.23123599180777876, 0.2098740786674267, 0.24197886892205722, 0.27679474977354546, 0.12888313714028155, 0.1999748395296692, 0.19032773884375442, 0.2309632584810607, 0.24369756530936038, 0.1807316167553128, 0.19683324957851944, 0.18305206389490947, 0.18683568409856555, 0.2135749380374129, 0.1759826866908374, 0.18937561233954536, 0.1964764007145563, 0.20568880668582523, 0.0682378897372673, 0.06564896813096943, 0.06739779926901934, 0.07274727036357365, 0.0700202903876298, 0.06362248577571994, 0.08330533112955074, 0.06069499860512895, 0.06042632461246211]}, "mutation_prompt": null}
{"id": "fa655db9-da5d-4363-9755-affb2de05f87", "solution": "import numpy as np\n\nclass EnhancedHybridEvolutionaryOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(50, budget // 10)  # Increased population for diversity\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, dim))\n        self.velocities = np.zeros((self.pop_size, dim))  # Initial velocities set to zero\n        self.personal_best_positions = self.population.copy()\n        self.personal_best_values = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evals = 0\n        self.F = 0.7  # Increased scaling factor for diversity\n        self.CR = 0.9  # Higher crossover rate\n        self.inertia_weight = 0.4  # Adjusted inertia weight\n        self.cognitive_comp = 1.5  # Adjusted cognitive component\n        self.social_comp = 1.3  # Adjusted social component\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evals < self.budget:\n            for i in range(self.pop_size):\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), *self.bounds)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                trial_value = func(trial)\n                self.evals += 1\n                if trial_value < self.personal_best_values[i]:\n                    self.personal_best_positions[i] = trial\n                    self.personal_best_values[i] = trial_value\n                if trial_value < self.global_best_value:\n                    self.global_best_value = trial_value\n                    self.global_best_position = trial\n\n            rand_vals = np.random.rand(2, self.pop_size, self.dim)\n            self.velocities = (self.inertia_weight * self.velocities +\n                               rand_vals[0] * self.cognitive_comp * (self.personal_best_positions - self.population) +\n                               rand_vals[1] * self.social_comp * (self.global_best_position - self.population))\n            self.population += self.velocities\n            np.clip(self.population, *self.bounds, out=self.population)\n\n        return self.global_best_value\n\n    def evaluate_population(self, func):\n        values = np.apply_along_axis(func, 1, self.population)\n        self.evals += self.pop_size\n        better_mask = values < self.personal_best_values\n        self.personal_best_positions[better_mask] = self.population[better_mask]\n        self.personal_best_values[better_mask] = values[better_mask]\n        min_idx = values.argmin()\n        if values[min_idx] < self.global_best_value:\n            self.global_best_value = values[min_idx]\n            self.global_best_position = self.population[min_idx]", "name": "EnhancedHybridEvolutionaryOptimizer", "description": "Enhanced Hybrid Evolutionary Algorithm with adaptive parameters and efficient subpopulation updates for improved performance.", "configspace": "", "generation": 51, "fitness": 0.32269428635189096, "feedback": "The algorithm EnhancedHybridEvolutionaryOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.26.", "error": "", "parent_id": "93ec25af-d4ab-478c-bd84-16d2f1a3f523", "metadata": {"aucs": [0.7754667789088463, 0.7852625970565471, 0.7702566771038815, 0.7893307840833805, 0.7892776705598281, 0.7729662025093611, 0.7791193614500068, 0.7742174668858174, 0.7763196409669044, 0.5920114261120673, 0.5778522182952617, 0.6128563955703377, 0.5791796498810996, 0.5831198800411961, 0.5829492120591457, 0.5923803125045599, 0.5743546719829273, 0.5897704445792568, 0.13839477365585084, 0.13325738371165463, 0.15660571678318502, 0.1176081043207563, 0.15669811750963714, 0.13915582239250346, 0.1490923210742412, 0.12267764332180453, 0.1287926758382164, 0.13033900224818384, 0.13776103747284796, 0.20391517395172665, 0.1206949121518357, 0.11100602739377141, 0.13287780959160267, 0.11941726863705948, 0.13793301827365356, 0.14130692815710388, 0.9750410210437338, 0.9736206931125168, 0.9770412340578503, 0.9853066149008426, 0.9888954032153647, 0.9797511932793546, 0.9767536040991526, 0.9769435362266367, 0.9735836962147881, 0.5198000315328, 0.5299108958661295, 0.5100538782642937, 0.5371094311240436, 0.5039753911115132, 0.5661063280286177, 0.5237240417721939, 0.5226955664435824, 0.5189195332219849, 0.7556132823356299, 0.21917677636048327, 0.6605499814714505, 0.7073406763952743, 0.2670491687594153, 0.7557956254571769, 0.2626779167214226, 0.7289323088229255, 0.7444170281332958, 0.19015075710073037, 0.2015592033497453, 0.18729234392540073, 0.20688719637739894, 0.20784362492457353, 0.1923712708187456, 0.1941715201024572, 0.1993903227124163, 0.19419564578887727, 0.2206358874959894, 0.11899516263482857, 0.19791041147110477, 0.22038932958767132, 0.2259606867314644, 0.2366566578818562, 0.23166679203116314, 0.2125228632779116, 0.22979482744616397, 0.04363015565645323, 0.03471466065802142, 0.002170262428280667, 0.03691921006773413, 9.999999999998899e-05, 0.0014881087579862173, 9.999999999998899e-05, 9.999999999998899e-05, 0.025188090716208533, 0.10502085258640059, 0.06965029009140256, 0.12694652097808468, 0.09390988961493552, 0.06528626873337784, 0.017741342763199275, 0.09331177109157485, 0.05008072010362519, 0.07044327176818166, 0.0436255961023293, 0.04742486706911353, 0.04382478269289147, 0.1156126835182173, 0.06170039132935912, 0.16698250302624496, 0.09020972467823796, 0.16961276240392797, 0.11431395443604775, 0.19430492606076666, 0.15735489989372797, 0.18375424530476325, 0.15104169555120006, 0.16051260546839152, 0.0704987870379149, 0.08249738015610997, 0.18703991951386556, 0.09334285114873486, 0.5113533663233594, 0.5170618582509098, 0.5429194432080069, 0.5206937173533042, 0.5366139031555498, 0.5522422314002614, 0.5195481512765843, 0.5320488460061059, 0.5367414611497765, 0.10533782012024717, 0.12716497170488927, 0.2932119567654208, 0.12069225811421036, 0.1069837840549922, 0.09808465963973578, 0.10657241270781359, 0.11808193058084238, 0.12406853102896598, 0.15494450621000833, 0.30031894326353126, 0.3551736920012627, 0.1438364582949958, 0.15562279030033532, 0.25654684441219655, 0.20681644956306422, 0.24311960122086806, 0.19805126885404, 0.45226886625822094, 0.3613154984631919, 0.4391395219752915, 0.4427007203335641, 0.43418396652918056, 0.4014287113768418, 0.48200812054374587, 0.47518742044007567, 0.45880778293200786, 0.3369091772209849, 0.31469446513130084, 0.2912397581966646, 0.2507520243393523, 0.20405846104662628, 0.2377171202958268, 0.34782367267327297, 0.23117515832828717, 0.33143740725465554, 0.18955579520709998, 0.20679419261632226, 0.1942795379527874, 0.24800954142462173, 0.20666270138447884, 0.19806491067692955, 0.22494553146139717, 0.22527892719881915, 0.23525541735808897, 0.18612110686127858, 0.5576100959626649, 0.23192644579285593, 0.22684094219327833, 0.5696565871186244, 0.575217141771525, 0.2181769709004432, 0.6032435586887557, 0.22574584520800467, 0.17523526440102255, 0.1666190603273846, 0.15889070376290493, 0.12582637847046374, 0.7800637128118735, 0.7594748470309771, 0.7851375040492704, 0.7969112891838404, 0.1590852802801881, 0.7312972347266455, 0.16710262920641983, 0.20482607987151935, 0.2029509219926655, 0.16471819214598438, 0.5435145233209147, 0.12625271197030252, 0.6475127722471575, 0.6541080551698852, 0.1749734226847961, 0.19471951939402898, 0.19326311454510503, 0.21497442671678535, 0.191910158781033, 0.20394792174995735, 0.1867712591654701, 0.1823545171107458, 0.18644934652863698, 0.0920140271276979, 0.09208608508217109, 0.09139466430608734, 0.07262198072803927, 0.09255446861560412, 0.07839802253690265, 0.0853576701064479, 0.08442978503860954, 0.0802728606682045]}, "mutation_prompt": null}
{"id": "70380367-36e5-4e1e-904a-d93832d3720a", "solution": "import numpy as np\n\nclass OptimizedHybridEvolutionaryOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(30, budget // 12)  # Adjusted population size\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, dim))\n        self.velocities = np.random.uniform(-0.3, 0.3, (self.pop_size, dim))\n        self.personal_best_positions = self.population.copy()\n        self.personal_best_values = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evals = 0\n        self.F = 0.5  # Dynamic scaling based on performance\n        self.CR = 0.85  # Increased crossover rate\n        self.omega = 0.3  # Further decreased inertia weight\n        self.phi_p = 1.4  # New cognitive component\n        self.phi_g = 1.2  # New social component\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evals < self.budget:\n            for i in range(self.pop_size):\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), *self.bounds)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                trial_value = func(trial)\n                self.evals += 1\n                if trial_value < self.personal_best_values[i]:\n                    self.personal_best_positions[i] = trial\n                    self.personal_best_values[i] = trial_value\n                if trial_value < self.global_best_value:\n                    self.global_best_value = trial_value\n                    self.global_best_position = trial\n\n            rand_vals = np.random.rand(2, self.pop_size, self.dim)\n            self.velocities = (self.omega * self.velocities +\n                               rand_vals[0] * self.phi_p * (self.personal_best_positions - self.population) +\n                               rand_vals[1] * self.phi_g * (self.global_best_position - self.population))\n            self.population += self.velocities\n            np.clip(self.population, *self.bounds, out=self.population)\n\n        return self.global_best_value\n\n    def evaluate_population(self, func):\n        values = np.apply_along_axis(func, 1, self.population)\n        self.evals += self.pop_size\n        better_mask = values < self.personal_best_values\n        self.personal_best_positions[better_mask] = self.population[better_mask]\n        self.personal_best_values[better_mask] = values[better_mask]\n        min_idx = values.argmin()\n        if values[min_idx] < self.global_best_value:\n            self.global_best_value = values[min_idx]\n            self.global_best_position = self.population[min_idx]", "name": "OptimizedHybridEvolutionaryOptimizer", "description": "Optimized Hybrid Evolutionary Algorithm with dynamic parameter tuning and simplified operations for enhanced performance.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "93ec25af-d4ab-478c-bd84-16d2f1a3f523", "metadata": {"aucs": [0.912989714961851, 0.9154344159030199, 0.911325450575271, 0.920112261021627, 0.9159606971738903, 0.9190393333751533, 0.9251252746319596, 0.9168510819254622, 0.9180727414095686, 0.821281525622317, 0.8253972842544415, 0.8308072565625633, 0.8307421534400337, 0.8200047239068631, 0.8486175101784383, 0.8388280390540042, 0.8380966616211073, 0.8289976796022328, 0.17781937613022003, 0.10090621803673316, 0.18121582229300703, 0.11227345747355633, 0.1337864168885522, 0.12382009210550837, 0.121973562033724, 0.783332814887391, 0.16026541176747433, 0.12385828079907901, 0.12201653796115408, 0.11590172413663946, 0.10501906123460558, 0.11749389021856838, 0.09971846547677488, 0.09694035851695049, 0.1086543633040783, 0.09605616724827482, 0.9820870525736312, 0.9809245554849745, 0.9838143038557996, 0.9801245447311067, 0.9789669318193163, 0.9799697500644702, 0.9853874107467369, 0.9677604968932018, 0.9823772724411416, 0.8162364143955583, 0.8126993461228189, 0.8109252857229121, 0.7803037136485445, 0.8067551535953066, 0.810924029535545, 0.8044327632585909, 0.7919127392177738, 0.7997586939432612, 0.22978357696070695, 0.22897537785902677, 0.2278523661791494, 0.2810708305361017, 0.213551027757528, 0.38029030767962635, 0.1785497998285629, 0.8856369499804064, 0.12114487977025223, 0.2309654729222228, 0.24032225800035756, 0.22373072449355136, 0.12989826527258996, 0.252321447472974, 0.21308466791351477, 0.2357390480203715, 0.2384872787726079, 0.2860154878444545, 0.18961359103232944, 0.22918312561252674, 0.13234967885099902, 0.25115829389050226, 0.23907745093715171, 0.23868364126758002, 0.2722744086036831, 0.2658215189162575, 0.12156302072078418, 0.004111293154636209, 9.999999999998899e-05, 0.056899336759141494, 0.05956394268415299, 9.999999999998899e-05, 0.0733501735671771, 0.03539520516772954, 0.002051652446869223, 0.050292890700608606, 0.04631598223107336, 0.041434056279496145, 0.16542488155211776, 0.040702375411850844, 0.06842747533262739, 0.03350325728829451, 0.034460355046607716, 0.051646012624232074, 0.05312108147532357, 0.03699607291864182, 0.15996099863250934, 0.3309072821253092, 0.30103108750169816, 0.20995452470013243, 0.10182353300360991, 0.08134328784074785, 0.13656117451495153, 0.30881727936665115, 0.15442559533492917, 0.05729823031746217, 0.17543113293600343, 0.011294595408062769, 0.3134491637879607, 0.1590267650431999, 0.18751936189433283, 0.3846703918399308, 0.0606858562647582, 0.6156911776573893, 0.5748045568315758, 0.6445674572967381, 0.6722789355033588, 0.5467431146490538, 0.6177127956909275, 0.6253570064636899, 0.6188360967571986, 0.6489166030912943, 0.11921654133701964, 0.1408340697786985, 0.15812019595772087, 0.0957049231571464, 0.15734820666723048, 0.09803596517886448, 0.11264211444082428, 0.15030002269875364, 0.11590703554456505, 0.44682053539972777, 0.27482770478862895, 0.19289005554912042, 0.4089872981866758, 0.21698823500973485, 0.2937270230311191, 0.25231482371183334, 0.36777763178918355, 0.26821749913509685, 0.7553120633904629, 0.3297933877167738, 0.34449968872079584, 0.5209589585410846, 0.6523156542597031, 0.43620415763752685, 0.4561926463421161, 0.6009663976806334, 0.48454059296396745, 0.24714791461105612, 0.28226591235838605, 0.2921924814909138, 0.3358091616034211, 0.22856409283403023, 0.23106960908495033, 0.38211395971822815, 0.3711861409462256, 0.3001369712505568, 0.2044845130823173, 0.1630799041389046, 0.20010979606207557, 0.23801187171313154, 0.2128941384680333, 0.23080022178824033, 0.261235498191257, 0.20543144639011646, 0.20902055304049327, 0.2108021553985402, 0.19609351236239203, 0.8488278852075777, 0.22680101673975428, 0.8149094032496786, 0.2109200133160537, 0.1922853558802261, 0.19193622771537777, 0.205387462515648, 0.18862841890226878, 0.18712546461916435, 0.165537709856999, 0.15892212559024665, 0.20033289447671976, 0.19951385903990926, 0.9286654034960835, 0.9168579956707474, 0.9288544413790013, 0.7907962597421541, 0.15649744120829856, 0.11231200827338494, 0.212238488569237, 0.6349319877976322, 0.2105604619093463, 0.16682987749593026, 0.10456380628161366, 0.1690675989803111, 0.19069934357892504, 0.18867014252815784, 0.20100968874828418, 0.18264954974759096, 0.1893702638871808, 0.18035043551948204, 0.1854560438784858, 0.1894068246872438, 0.18259593765662252, 0.13569388735828836, 0.07942402217213862, 0.10157451415770358, 0.08835391648282587, 0.10539662365521307, 0.09340707491050193, 0.08088354452929003, 0.08986851191989043, 0.08932156897424015]}, "mutation_prompt": null}
{"id": "2df5cf55-ec38-4808-84bb-cd87cdf9bbe9", "solution": "import numpy as np\n\nclass OptimizedHybridEvolutionaryOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(30, budget // 12)  # Adjusted population size\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, dim))\n        self.velocities = np.random.uniform(-0.3, 0.3, (self.pop_size, dim))\n        self.personal_best_positions = self.population.copy()\n        self.personal_best_values = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evals = 0\n        self.F = 0.5  # Dynamic scaling based on performance\n        self.CR = 0.85  # Increased crossover rate\n        self.omega = 0.3  # Further decreased inertia weight\n        self.phi_p = 1.4  # New cognitive component\n        self.phi_g = 1.2  # New social component\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evals < self.budget:\n            for i in range(self.pop_size):\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), *self.bounds)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                trial_value = func(trial)\n                self.evals += 1\n                if trial_value < self.personal_best_values[i]:\n                    self.personal_best_positions[i] = trial\n                    self.personal_best_values[i] = trial_value\n                if trial_value < self.global_best_value:\n                    self.global_best_value = trial_value\n                    self.global_best_position = trial\n\n            rand_vals = np.random.rand(2, self.pop_size, self.dim)\n            self.velocities = (self.omega * self.velocities +\n                               rand_vals[0] * self.phi_p * (self.personal_best_positions - self.population) +\n                               rand_vals[1] * self.phi_g * (self.global_best_position - self.population))\n            self.population += self.velocities\n            np.clip(self.population, *self.bounds, out=self.population)\n\n        return self.global_best_value\n\n    def evaluate_population(self, func):\n        values = np.apply_along_axis(func, 1, self.population)\n        self.evals += self.pop_size\n        better_mask = values < self.personal_best_values\n        self.personal_best_positions[better_mask] = self.population[better_mask]\n        self.personal_best_values[better_mask] = values[better_mask]\n        min_idx = values.argmin()\n        if values[min_idx] < self.global_best_value:\n            self.global_best_value = values[min_idx]\n            self.global_best_position = self.population[min_idx]", "name": "OptimizedHybridEvolutionaryOptimizer", "description": "Optimized Hybrid Evolutionary Algorithm with dynamic parameter tuning and simplified operations for enhanced performance.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "93ec25af-d4ab-478c-bd84-16d2f1a3f523", "metadata": {"aucs": [0.912989714961851, 0.9154344159030199, 0.911325450575271, 0.920112261021627, 0.9159606971738903, 0.9190393333751533, 0.9251252746319596, 0.9168510819254622, 0.9180727414095686, 0.821281525622317, 0.8253972842544415, 0.8308072565625633, 0.8307421534400337, 0.8200047239068631, 0.8486175101784383, 0.8388280390540042, 0.8380966616211073, 0.8289976796022328, 0.17781937613022003, 0.10090621803673316, 0.18121582229300703, 0.11227345747355633, 0.1337864168885522, 0.12382009210550837, 0.121973562033724, 0.783332814887391, 0.16026541176747433, 0.12385828079907901, 0.12201653796115408, 0.11590172413663946, 0.10501906123460558, 0.11749389021856838, 0.09971846547677488, 0.09694035851695049, 0.1086543633040783, 0.09605616724827482, 0.9820870525736312, 0.9809245554849745, 0.9838143038557996, 0.9801245447311067, 0.9789669318193163, 0.9799697500644702, 0.9853874107467369, 0.9677604968932018, 0.9823772724411416, 0.8162364143955583, 0.8126993461228189, 0.8109252857229121, 0.7803037136485445, 0.8067551535953066, 0.810924029535545, 0.8044327632585909, 0.7919127392177738, 0.7997586939432612, 0.22978357696070695, 0.22897537785902677, 0.2278523661791494, 0.2810708305361017, 0.213551027757528, 0.38029030767962635, 0.1785497998285629, 0.8856369499804064, 0.12114487977025223, 0.2309654729222228, 0.24032225800035756, 0.22373072449355136, 0.12989826527258996, 0.252321447472974, 0.21308466791351477, 0.2357390480203715, 0.2384872787726079, 0.2860154878444545, 0.18961359103232944, 0.22918312561252674, 0.13234967885099902, 0.25115829389050226, 0.23907745093715171, 0.23868364126758002, 0.2722744086036831, 0.2658215189162575, 0.12156302072078418, 0.004111293154636209, 9.999999999998899e-05, 0.056899336759141494, 0.05956394268415299, 9.999999999998899e-05, 0.0733501735671771, 0.03539520516772954, 0.002051652446869223, 0.050292890700608606, 0.04631598223107336, 0.041434056279496145, 0.16542488155211776, 0.040702375411850844, 0.06842747533262739, 0.03350325728829451, 0.034460355046607716, 0.051646012624232074, 0.05312108147532357, 0.03699607291864182, 0.15996099863250934, 0.3309072821253092, 0.30103108750169816, 0.20995452470013243, 0.10182353300360991, 0.08134328784074785, 0.13656117451495153, 0.30881727936665115, 0.15442559533492917, 0.05729823031746217, 0.17543113293600343, 0.011294595408062769, 0.3134491637879607, 0.1590267650431999, 0.18751936189433283, 0.3846703918399308, 0.0606858562647582, 0.6156911776573893, 0.5748045568315758, 0.6445674572967381, 0.6722789355033588, 0.5467431146490538, 0.6177127956909275, 0.6253570064636899, 0.6188360967571986, 0.6489166030912943, 0.11921654133701964, 0.1408340697786985, 0.15812019595772087, 0.0957049231571464, 0.15734820666723048, 0.09803596517886448, 0.11264211444082428, 0.15030002269875364, 0.11590703554456505, 0.44682053539972777, 0.27482770478862895, 0.19289005554912042, 0.4089872981866758, 0.21698823500973485, 0.2937270230311191, 0.25231482371183334, 0.36777763178918355, 0.26821749913509685, 0.7553120633904629, 0.3297933877167738, 0.34449968872079584, 0.5209589585410846, 0.6523156542597031, 0.43620415763752685, 0.4561926463421161, 0.6009663976806334, 0.48454059296396745, 0.24714791461105612, 0.28226591235838605, 0.2921924814909138, 0.3358091616034211, 0.22856409283403023, 0.23106960908495033, 0.38211395971822815, 0.3711861409462256, 0.3001369712505568, 0.2044845130823173, 0.1630799041389046, 0.20010979606207557, 0.23801187171313154, 0.2128941384680333, 0.23080022178824033, 0.261235498191257, 0.20543144639011646, 0.20902055304049327, 0.2108021553985402, 0.19609351236239203, 0.8488278852075777, 0.22680101673975428, 0.8149094032496786, 0.2109200133160537, 0.1922853558802261, 0.19193622771537777, 0.205387462515648, 0.18862841890226878, 0.18712546461916435, 0.165537709856999, 0.15892212559024665, 0.20033289447671976, 0.19951385903990926, 0.9286654034960835, 0.9168579956707474, 0.9288544413790013, 0.7907962597421541, 0.15649744120829856, 0.11231200827338494, 0.212238488569237, 0.6349319877976322, 0.2105604619093463, 0.16682987749593026, 0.10456380628161366, 0.1690675989803111, 0.19069934357892504, 0.18867014252815784, 0.20100968874828418, 0.18264954974759096, 0.1893702638871808, 0.18035043551948204, 0.1854560438784858, 0.1894068246872438, 0.18259593765662252, 0.13569388735828836, 0.07942402217213862, 0.10157451415770358, 0.08835391648282587, 0.10539662365521307, 0.09340707491050193, 0.08088354452929003, 0.08986851191989043, 0.08932156897424015]}, "mutation_prompt": null}
{"id": "115c6e6c-223c-4ef0-a7e3-29391172330b", "solution": "import numpy as np\n\nclass OptimizedHybridEvolutionaryOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(30, budget // 12)  # Adjusted population size\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, dim))\n        self.velocities = np.random.uniform(-0.3, 0.3, (self.pop_size, dim))\n        self.personal_best_positions = self.population.copy()\n        self.personal_best_values = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evals = 0\n        self.F = 0.5  # Dynamic scaling based on performance\n        self.CR = 0.85  # Increased crossover rate\n        self.omega = 0.3  # Further decreased inertia weight\n        self.phi_p = 1.4  # New cognitive component\n        self.phi_g = 1.2  # New social component\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evals < self.budget:\n            for i in range(self.pop_size):\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), *self.bounds)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                trial_value = func(trial)\n                self.evals += 1\n                if trial_value < self.personal_best_values[i]:\n                    self.personal_best_positions[i] = trial\n                    self.personal_best_values[i] = trial_value\n                if trial_value < self.global_best_value:\n                    self.global_best_value = trial_value\n                    self.global_best_position = trial\n\n            rand_vals = np.random.rand(2, self.pop_size, self.dim)\n            self.velocities = (self.omega * self.velocities +\n                               rand_vals[0] * self.phi_p * (self.personal_best_positions - self.population) +\n                               rand_vals[1] * self.phi_g * (self.global_best_position - self.population))\n            self.population += self.velocities\n            np.clip(self.population, *self.bounds, out=self.population)\n\n        return self.global_best_value\n\n    def evaluate_population(self, func):\n        values = np.apply_along_axis(func, 1, self.population)\n        self.evals += self.pop_size\n        better_mask = values < self.personal_best_values\n        self.personal_best_positions[better_mask] = self.population[better_mask]\n        self.personal_best_values[better_mask] = values[better_mask]\n        min_idx = values.argmin()\n        if values[min_idx] < self.global_best_value:\n            self.global_best_value = values[min_idx]\n            self.global_best_position = self.population[min_idx]", "name": "OptimizedHybridEvolutionaryOptimizer", "description": "Optimized Hybrid Evolutionary Algorithm with dynamic parameter tuning and simplified operations for enhanced performance.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "93ec25af-d4ab-478c-bd84-16d2f1a3f523", "metadata": {"aucs": [0.912989714961851, 0.9154344159030199, 0.911325450575271, 0.920112261021627, 0.9159606971738903, 0.9190393333751533, 0.9251252746319596, 0.9168510819254622, 0.9180727414095686, 0.821281525622317, 0.8253972842544415, 0.8308072565625633, 0.8307421534400337, 0.8200047239068631, 0.8486175101784383, 0.8388280390540042, 0.8380966616211073, 0.8289976796022328, 0.17781937613022003, 0.10090621803673316, 0.18121582229300703, 0.11227345747355633, 0.1337864168885522, 0.12382009210550837, 0.121973562033724, 0.783332814887391, 0.16026541176747433, 0.12385828079907901, 0.12201653796115408, 0.11590172413663946, 0.10501906123460558, 0.11749389021856838, 0.09971846547677488, 0.09694035851695049, 0.1086543633040783, 0.09605616724827482, 0.9820870525736312, 0.9809245554849745, 0.9838143038557996, 0.9801245447311067, 0.9789669318193163, 0.9799697500644702, 0.9853874107467369, 0.9677604968932018, 0.9823772724411416, 0.8162364143955583, 0.8126993461228189, 0.8109252857229121, 0.7803037136485445, 0.8067551535953066, 0.810924029535545, 0.8044327632585909, 0.7919127392177738, 0.7997586939432612, 0.22978357696070695, 0.22897537785902677, 0.2278523661791494, 0.2810708305361017, 0.213551027757528, 0.38029030767962635, 0.1785497998285629, 0.8856369499804064, 0.12114487977025223, 0.2309654729222228, 0.24032225800035756, 0.22373072449355136, 0.12989826527258996, 0.252321447472974, 0.21308466791351477, 0.2357390480203715, 0.2384872787726079, 0.2860154878444545, 0.18961359103232944, 0.22918312561252674, 0.13234967885099902, 0.25115829389050226, 0.23907745093715171, 0.23868364126758002, 0.2722744086036831, 0.2658215189162575, 0.12156302072078418, 0.004111293154636209, 9.999999999998899e-05, 0.056899336759141494, 0.05956394268415299, 9.999999999998899e-05, 0.0733501735671771, 0.03539520516772954, 0.002051652446869223, 0.050292890700608606, 0.04631598223107336, 0.041434056279496145, 0.16542488155211776, 0.040702375411850844, 0.06842747533262739, 0.03350325728829451, 0.034460355046607716, 0.051646012624232074, 0.05312108147532357, 0.03699607291864182, 0.15996099863250934, 0.3309072821253092, 0.30103108750169816, 0.20995452470013243, 0.10182353300360991, 0.08134328784074785, 0.13656117451495153, 0.30881727936665115, 0.15442559533492917, 0.05729823031746217, 0.17543113293600343, 0.011294595408062769, 0.3134491637879607, 0.1590267650431999, 0.18751936189433283, 0.3846703918399308, 0.0606858562647582, 0.6156911776573893, 0.5748045568315758, 0.6445674572967381, 0.6722789355033588, 0.5467431146490538, 0.6177127956909275, 0.6253570064636899, 0.6188360967571986, 0.6489166030912943, 0.11921654133701964, 0.1408340697786985, 0.15812019595772087, 0.0957049231571464, 0.15734820666723048, 0.09803596517886448, 0.11264211444082428, 0.15030002269875364, 0.11590703554456505, 0.44682053539972777, 0.27482770478862895, 0.19289005554912042, 0.4089872981866758, 0.21698823500973485, 0.2937270230311191, 0.25231482371183334, 0.36777763178918355, 0.26821749913509685, 0.7553120633904629, 0.3297933877167738, 0.34449968872079584, 0.5209589585410846, 0.6523156542597031, 0.43620415763752685, 0.4561926463421161, 0.6009663976806334, 0.48454059296396745, 0.24714791461105612, 0.28226591235838605, 0.2921924814909138, 0.3358091616034211, 0.22856409283403023, 0.23106960908495033, 0.38211395971822815, 0.3711861409462256, 0.3001369712505568, 0.2044845130823173, 0.1630799041389046, 0.20010979606207557, 0.23801187171313154, 0.2128941384680333, 0.23080022178824033, 0.261235498191257, 0.20543144639011646, 0.20902055304049327, 0.2108021553985402, 0.19609351236239203, 0.8488278852075777, 0.22680101673975428, 0.8149094032496786, 0.2109200133160537, 0.1922853558802261, 0.19193622771537777, 0.205387462515648, 0.18862841890226878, 0.18712546461916435, 0.165537709856999, 0.15892212559024665, 0.20033289447671976, 0.19951385903990926, 0.9286654034960835, 0.9168579956707474, 0.9288544413790013, 0.7907962597421541, 0.15649744120829856, 0.11231200827338494, 0.212238488569237, 0.6349319877976322, 0.2105604619093463, 0.16682987749593026, 0.10456380628161366, 0.1690675989803111, 0.19069934357892504, 0.18867014252815784, 0.20100968874828418, 0.18264954974759096, 0.1893702638871808, 0.18035043551948204, 0.1854560438784858, 0.1894068246872438, 0.18259593765662252, 0.13569388735828836, 0.07942402217213862, 0.10157451415770358, 0.08835391648282587, 0.10539662365521307, 0.09340707491050193, 0.08088354452929003, 0.08986851191989043, 0.08932156897424015]}, "mutation_prompt": null}
{"id": "30c7092a-62fc-4833-b000-3fda48eda030", "solution": "import numpy as np\n\nclass OptimizedHybridEvolutionaryOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(30, budget // 12)  # Adjusted population size\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, dim))\n        self.velocities = np.random.uniform(-0.3, 0.3, (self.pop_size, dim))\n        self.personal_best_positions = self.population.copy()\n        self.personal_best_values = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evals = 0\n        self.F = 0.5  # Dynamic scaling based on performance\n        self.CR = 0.85  # Increased crossover rate\n        self.omega = 0.3  # Further decreased inertia weight\n        self.phi_p = 1.4  # New cognitive component\n        self.phi_g = 1.2  # New social component\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evals < self.budget:\n            for i in range(self.pop_size):\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), *self.bounds)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                trial_value = func(trial)\n                self.evals += 1\n                if trial_value < self.personal_best_values[i]:\n                    self.personal_best_positions[i] = trial\n                    self.personal_best_values[i] = trial_value\n                if trial_value < self.global_best_value:\n                    self.global_best_value = trial_value\n                    self.global_best_position = trial\n\n            rand_vals = np.random.rand(2, self.pop_size, self.dim)\n            self.velocities = (self.omega * self.velocities +\n                               rand_vals[0] * self.phi_p * (self.personal_best_positions - self.population) +\n                               rand_vals[1] * self.phi_g * (self.global_best_position - self.population))\n            self.population += self.velocities\n            np.clip(self.population, *self.bounds, out=self.population)\n\n        return self.global_best_value\n\n    def evaluate_population(self, func):\n        values = np.apply_along_axis(func, 1, self.population)\n        self.evals += self.pop_size\n        better_mask = values < self.personal_best_values\n        self.personal_best_positions[better_mask] = self.population[better_mask]\n        self.personal_best_values[better_mask] = values[better_mask]\n        min_idx = values.argmin()\n        if values[min_idx] < self.global_best_value:\n            self.global_best_value = values[min_idx]\n            self.global_best_position = self.population[min_idx]", "name": "OptimizedHybridEvolutionaryOptimizer", "description": "Optimized Hybrid Evolutionary Algorithm with dynamic parameter tuning and simplified operations for enhanced performance.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "93ec25af-d4ab-478c-bd84-16d2f1a3f523", "metadata": {"aucs": [0.912989714961851, 0.9154344159030199, 0.911325450575271, 0.920112261021627, 0.9159606971738903, 0.9190393333751533, 0.9251252746319596, 0.9168510819254622, 0.9180727414095686, 0.821281525622317, 0.8253972842544415, 0.8308072565625633, 0.8307421534400337, 0.8200047239068631, 0.8486175101784383, 0.8388280390540042, 0.8380966616211073, 0.8289976796022328, 0.17781937613022003, 0.10090621803673316, 0.18121582229300703, 0.11227345747355633, 0.1337864168885522, 0.12382009210550837, 0.121973562033724, 0.783332814887391, 0.16026541176747433, 0.12385828079907901, 0.12201653796115408, 0.11590172413663946, 0.10501906123460558, 0.11749389021856838, 0.09971846547677488, 0.09694035851695049, 0.1086543633040783, 0.09605616724827482, 0.9820870525736312, 0.9809245554849745, 0.9838143038557996, 0.9801245447311067, 0.9789669318193163, 0.9799697500644702, 0.9853874107467369, 0.9677604968932018, 0.9823772724411416, 0.8162364143955583, 0.8126993461228189, 0.8109252857229121, 0.7803037136485445, 0.8067551535953066, 0.810924029535545, 0.8044327632585909, 0.7919127392177738, 0.7997586939432612, 0.22978357696070695, 0.22897537785902677, 0.2278523661791494, 0.2810708305361017, 0.213551027757528, 0.38029030767962635, 0.1785497998285629, 0.8856369499804064, 0.12114487977025223, 0.2309654729222228, 0.24032225800035756, 0.22373072449355136, 0.12989826527258996, 0.252321447472974, 0.21308466791351477, 0.2357390480203715, 0.2384872787726079, 0.2860154878444545, 0.18961359103232944, 0.22918312561252674, 0.13234967885099902, 0.25115829389050226, 0.23907745093715171, 0.23868364126758002, 0.2722744086036831, 0.2658215189162575, 0.12156302072078418, 0.004111293154636209, 9.999999999998899e-05, 0.056899336759141494, 0.05956394268415299, 9.999999999998899e-05, 0.0733501735671771, 0.03539520516772954, 0.002051652446869223, 0.050292890700608606, 0.04631598223107336, 0.041434056279496145, 0.16542488155211776, 0.040702375411850844, 0.06842747533262739, 0.03350325728829451, 0.034460355046607716, 0.051646012624232074, 0.05312108147532357, 0.03699607291864182, 0.15996099863250934, 0.3309072821253092, 0.30103108750169816, 0.20995452470013243, 0.10182353300360991, 0.08134328784074785, 0.13656117451495153, 0.30881727936665115, 0.15442559533492917, 0.05729823031746217, 0.17543113293600343, 0.011294595408062769, 0.3134491637879607, 0.1590267650431999, 0.18751936189433283, 0.3846703918399308, 0.0606858562647582, 0.6156911776573893, 0.5748045568315758, 0.6445674572967381, 0.6722789355033588, 0.5467431146490538, 0.6177127956909275, 0.6253570064636899, 0.6188360967571986, 0.6489166030912943, 0.11921654133701964, 0.1408340697786985, 0.15812019595772087, 0.0957049231571464, 0.15734820666723048, 0.09803596517886448, 0.11264211444082428, 0.15030002269875364, 0.11590703554456505, 0.44682053539972777, 0.27482770478862895, 0.19289005554912042, 0.4089872981866758, 0.21698823500973485, 0.2937270230311191, 0.25231482371183334, 0.36777763178918355, 0.26821749913509685, 0.7553120633904629, 0.3297933877167738, 0.34449968872079584, 0.5209589585410846, 0.6523156542597031, 0.43620415763752685, 0.4561926463421161, 0.6009663976806334, 0.48454059296396745, 0.24714791461105612, 0.28226591235838605, 0.2921924814909138, 0.3358091616034211, 0.22856409283403023, 0.23106960908495033, 0.38211395971822815, 0.3711861409462256, 0.3001369712505568, 0.2044845130823173, 0.1630799041389046, 0.20010979606207557, 0.23801187171313154, 0.2128941384680333, 0.23080022178824033, 0.261235498191257, 0.20543144639011646, 0.20902055304049327, 0.2108021553985402, 0.19609351236239203, 0.8488278852075777, 0.22680101673975428, 0.8149094032496786, 0.2109200133160537, 0.1922853558802261, 0.19193622771537777, 0.205387462515648, 0.18862841890226878, 0.18712546461916435, 0.165537709856999, 0.15892212559024665, 0.20033289447671976, 0.19951385903990926, 0.9286654034960835, 0.9168579956707474, 0.9288544413790013, 0.7907962597421541, 0.15649744120829856, 0.11231200827338494, 0.212238488569237, 0.6349319877976322, 0.2105604619093463, 0.16682987749593026, 0.10456380628161366, 0.1690675989803111, 0.19069934357892504, 0.18867014252815784, 0.20100968874828418, 0.18264954974759096, 0.1893702638871808, 0.18035043551948204, 0.1854560438784858, 0.1894068246872438, 0.18259593765662252, 0.13569388735828836, 0.07942402217213862, 0.10157451415770358, 0.08835391648282587, 0.10539662365521307, 0.09340707491050193, 0.08088354452929003, 0.08986851191989043, 0.08932156897424015]}, "mutation_prompt": null}
{"id": "9d36e2d5-2537-408c-956c-0fee5a50a0e4", "solution": "import numpy as np\n\nclass OptimizedHybridEvolutionaryOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(30, budget // 12)  # Adjusted population size\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, dim))\n        self.velocities = np.random.uniform(-0.3, 0.3, (self.pop_size, dim))\n        self.personal_best_positions = self.population.copy()\n        self.personal_best_values = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evals = 0\n        self.F = 0.5  # Dynamic scaling based on performance\n        self.CR = 0.85  # Increased crossover rate\n        self.omega = 0.3  # Further decreased inertia weight\n        self.phi_p = 1.4  # New cognitive component\n        self.phi_g = 1.2  # New social component\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evals < self.budget:\n            for i in range(self.pop_size):\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), *self.bounds)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                trial_value = func(trial)\n                self.evals += 1\n                if trial_value < self.personal_best_values[i]:\n                    self.personal_best_positions[i] = trial\n                    self.personal_best_values[i] = trial_value\n                if trial_value < self.global_best_value:\n                    self.global_best_value = trial_value\n                    self.global_best_position = trial\n\n            rand_vals = np.random.rand(2, self.pop_size, self.dim)\n            self.velocities = (self.omega * self.velocities +\n                               rand_vals[0] * self.phi_p * (self.personal_best_positions - self.population) +\n                               rand_vals[1] * self.phi_g * (self.global_best_position - self.population))\n            self.population += self.velocities\n            np.clip(self.population, *self.bounds, out=self.population)\n\n        return self.global_best_value\n\n    def evaluate_population(self, func):\n        values = np.apply_along_axis(func, 1, self.population)\n        self.evals += self.pop_size\n        better_mask = values < self.personal_best_values\n        self.personal_best_positions[better_mask] = self.population[better_mask]\n        self.personal_best_values[better_mask] = values[better_mask]\n        min_idx = values.argmin()\n        if values[min_idx] < self.global_best_value:\n            self.global_best_value = values[min_idx]\n            self.global_best_position = self.population[min_idx]", "name": "OptimizedHybridEvolutionaryOptimizer", "description": "Optimized Hybrid Evolutionary Algorithm with dynamic parameter tuning and simplified operations for enhanced performance.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "93ec25af-d4ab-478c-bd84-16d2f1a3f523", "metadata": {"aucs": [0.912989714961851, 0.9154344159030199, 0.911325450575271, 0.920112261021627, 0.9159606971738903, 0.9190393333751533, 0.9251252746319596, 0.9168510819254622, 0.9180727414095686, 0.821281525622317, 0.8253972842544415, 0.8308072565625633, 0.8307421534400337, 0.8200047239068631, 0.8486175101784383, 0.8388280390540042, 0.8380966616211073, 0.8289976796022328, 0.17781937613022003, 0.10090621803673316, 0.18121582229300703, 0.11227345747355633, 0.1337864168885522, 0.12382009210550837, 0.121973562033724, 0.783332814887391, 0.16026541176747433, 0.12385828079907901, 0.12201653796115408, 0.11590172413663946, 0.10501906123460558, 0.11749389021856838, 0.09971846547677488, 0.09694035851695049, 0.1086543633040783, 0.09605616724827482, 0.9820870525736312, 0.9809245554849745, 0.9838143038557996, 0.9801245447311067, 0.9789669318193163, 0.9799697500644702, 0.9853874107467369, 0.9677604968932018, 0.9823772724411416, 0.8162364143955583, 0.8126993461228189, 0.8109252857229121, 0.7803037136485445, 0.8067551535953066, 0.810924029535545, 0.8044327632585909, 0.7919127392177738, 0.7997586939432612, 0.22978357696070695, 0.22897537785902677, 0.2278523661791494, 0.2810708305361017, 0.213551027757528, 0.38029030767962635, 0.1785497998285629, 0.8856369499804064, 0.12114487977025223, 0.2309654729222228, 0.24032225800035756, 0.22373072449355136, 0.12989826527258996, 0.252321447472974, 0.21308466791351477, 0.2357390480203715, 0.2384872787726079, 0.2860154878444545, 0.18961359103232944, 0.22918312561252674, 0.13234967885099902, 0.25115829389050226, 0.23907745093715171, 0.23868364126758002, 0.2722744086036831, 0.2658215189162575, 0.12156302072078418, 0.004111293154636209, 9.999999999998899e-05, 0.056899336759141494, 0.05956394268415299, 9.999999999998899e-05, 0.0733501735671771, 0.03539520516772954, 0.002051652446869223, 0.050292890700608606, 0.04631598223107336, 0.041434056279496145, 0.16542488155211776, 0.040702375411850844, 0.06842747533262739, 0.03350325728829451, 0.034460355046607716, 0.051646012624232074, 0.05312108147532357, 0.03699607291864182, 0.15996099863250934, 0.3309072821253092, 0.30103108750169816, 0.20995452470013243, 0.10182353300360991, 0.08134328784074785, 0.13656117451495153, 0.30881727936665115, 0.15442559533492917, 0.05729823031746217, 0.17543113293600343, 0.011294595408062769, 0.3134491637879607, 0.1590267650431999, 0.18751936189433283, 0.3846703918399308, 0.0606858562647582, 0.6156911776573893, 0.5748045568315758, 0.6445674572967381, 0.6722789355033588, 0.5467431146490538, 0.6177127956909275, 0.6253570064636899, 0.6188360967571986, 0.6489166030912943, 0.11921654133701964, 0.1408340697786985, 0.15812019595772087, 0.0957049231571464, 0.15734820666723048, 0.09803596517886448, 0.11264211444082428, 0.15030002269875364, 0.11590703554456505, 0.44682053539972777, 0.27482770478862895, 0.19289005554912042, 0.4089872981866758, 0.21698823500973485, 0.2937270230311191, 0.25231482371183334, 0.36777763178918355, 0.26821749913509685, 0.7553120633904629, 0.3297933877167738, 0.34449968872079584, 0.5209589585410846, 0.6523156542597031, 0.43620415763752685, 0.4561926463421161, 0.6009663976806334, 0.48454059296396745, 0.24714791461105612, 0.28226591235838605, 0.2921924814909138, 0.3358091616034211, 0.22856409283403023, 0.23106960908495033, 0.38211395971822815, 0.3711861409462256, 0.3001369712505568, 0.2044845130823173, 0.1630799041389046, 0.20010979606207557, 0.23801187171313154, 0.2128941384680333, 0.23080022178824033, 0.261235498191257, 0.20543144639011646, 0.20902055304049327, 0.2108021553985402, 0.19609351236239203, 0.8488278852075777, 0.22680101673975428, 0.8149094032496786, 0.2109200133160537, 0.1922853558802261, 0.19193622771537777, 0.205387462515648, 0.18862841890226878, 0.18712546461916435, 0.165537709856999, 0.15892212559024665, 0.20033289447671976, 0.19951385903990926, 0.9286654034960835, 0.9168579956707474, 0.9288544413790013, 0.7907962597421541, 0.15649744120829856, 0.11231200827338494, 0.212238488569237, 0.6349319877976322, 0.2105604619093463, 0.16682987749593026, 0.10456380628161366, 0.1690675989803111, 0.19069934357892504, 0.18867014252815784, 0.20100968874828418, 0.18264954974759096, 0.1893702638871808, 0.18035043551948204, 0.1854560438784858, 0.1894068246872438, 0.18259593765662252, 0.13569388735828836, 0.07942402217213862, 0.10157451415770358, 0.08835391648282587, 0.10539662365521307, 0.09340707491050193, 0.08088354452929003, 0.08986851191989043, 0.08932156897424015]}, "mutation_prompt": null}
{"id": "5bcbbc9e-f665-4e8a-81f4-14ef15ff305c", "solution": "import numpy as np\n\nclass OptimizedHybridEvolutionaryOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(30, budget // 12)  # Adjusted population size\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, dim))\n        self.velocities = np.random.uniform(-0.3, 0.3, (self.pop_size, dim))\n        self.personal_best_positions = self.population.copy()\n        self.personal_best_values = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evals = 0\n        self.F = 0.5  # Dynamic scaling based on performance\n        self.CR = 0.85  # Increased crossover rate\n        self.omega = 0.3  # Further decreased inertia weight\n        self.phi_p = 1.4  # New cognitive component\n        self.phi_g = 1.2  # New social component\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evals < self.budget:\n            for i in range(self.pop_size):\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), *self.bounds)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                trial_value = func(trial)\n                self.evals += 1\n                if trial_value < self.personal_best_values[i]:\n                    self.personal_best_positions[i] = trial\n                    self.personal_best_values[i] = trial_value\n                if trial_value < self.global_best_value:\n                    self.global_best_value = trial_value\n                    self.global_best_position = trial\n\n            rand_vals = np.random.rand(2, self.pop_size, self.dim)\n            self.velocities = (self.omega * self.velocities +\n                               rand_vals[0] * self.phi_p * (self.personal_best_positions - self.population) +\n                               rand_vals[1] * self.phi_g * (self.global_best_position - self.population))\n            self.population += self.velocities\n            np.clip(self.population, *self.bounds, out=self.population)\n\n        return self.global_best_value\n\n    def evaluate_population(self, func):\n        values = np.apply_along_axis(func, 1, self.population)\n        self.evals += self.pop_size\n        better_mask = values < self.personal_best_values\n        self.personal_best_positions[better_mask] = self.population[better_mask]\n        self.personal_best_values[better_mask] = values[better_mask]\n        min_idx = values.argmin()\n        if values[min_idx] < self.global_best_value:\n            self.global_best_value = values[min_idx]\n            self.global_best_position = self.population[min_idx]", "name": "OptimizedHybridEvolutionaryOptimizer", "description": "Optimized Hybrid Evolutionary Algorithm with dynamic parameter tuning and simplified operations for enhanced performance.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "93ec25af-d4ab-478c-bd84-16d2f1a3f523", "metadata": {"aucs": [0.912989714961851, 0.9154344159030199, 0.911325450575271, 0.920112261021627, 0.9159606971738903, 0.9190393333751533, 0.9251252746319596, 0.9168510819254622, 0.9180727414095686, 0.821281525622317, 0.8253972842544415, 0.8308072565625633, 0.8307421534400337, 0.8200047239068631, 0.8486175101784383, 0.8388280390540042, 0.8380966616211073, 0.8289976796022328, 0.17781937613022003, 0.10090621803673316, 0.18121582229300703, 0.11227345747355633, 0.1337864168885522, 0.12382009210550837, 0.121973562033724, 0.783332814887391, 0.16026541176747433, 0.12385828079907901, 0.12201653796115408, 0.11590172413663946, 0.10501906123460558, 0.11749389021856838, 0.09971846547677488, 0.09694035851695049, 0.1086543633040783, 0.09605616724827482, 0.9820870525736312, 0.9809245554849745, 0.9838143038557996, 0.9801245447311067, 0.9789669318193163, 0.9799697500644702, 0.9853874107467369, 0.9677604968932018, 0.9823772724411416, 0.8162364143955583, 0.8126993461228189, 0.8109252857229121, 0.7803037136485445, 0.8067551535953066, 0.810924029535545, 0.8044327632585909, 0.7919127392177738, 0.7997586939432612, 0.22978357696070695, 0.22897537785902677, 0.2278523661791494, 0.2810708305361017, 0.213551027757528, 0.38029030767962635, 0.1785497998285629, 0.8856369499804064, 0.12114487977025223, 0.2309654729222228, 0.24032225800035756, 0.22373072449355136, 0.12989826527258996, 0.252321447472974, 0.21308466791351477, 0.2357390480203715, 0.2384872787726079, 0.2860154878444545, 0.18961359103232944, 0.22918312561252674, 0.13234967885099902, 0.25115829389050226, 0.23907745093715171, 0.23868364126758002, 0.2722744086036831, 0.2658215189162575, 0.12156302072078418, 0.004111293154636209, 9.999999999998899e-05, 0.056899336759141494, 0.05956394268415299, 9.999999999998899e-05, 0.0733501735671771, 0.03539520516772954, 0.002051652446869223, 0.050292890700608606, 0.04631598223107336, 0.041434056279496145, 0.16542488155211776, 0.040702375411850844, 0.06842747533262739, 0.03350325728829451, 0.034460355046607716, 0.051646012624232074, 0.05312108147532357, 0.03699607291864182, 0.15996099863250934, 0.3309072821253092, 0.30103108750169816, 0.20995452470013243, 0.10182353300360991, 0.08134328784074785, 0.13656117451495153, 0.30881727936665115, 0.15442559533492917, 0.05729823031746217, 0.17543113293600343, 0.011294595408062769, 0.3134491637879607, 0.1590267650431999, 0.18751936189433283, 0.3846703918399308, 0.0606858562647582, 0.6156911776573893, 0.5748045568315758, 0.6445674572967381, 0.6722789355033588, 0.5467431146490538, 0.6177127956909275, 0.6253570064636899, 0.6188360967571986, 0.6489166030912943, 0.11921654133701964, 0.1408340697786985, 0.15812019595772087, 0.0957049231571464, 0.15734820666723048, 0.09803596517886448, 0.11264211444082428, 0.15030002269875364, 0.11590703554456505, 0.44682053539972777, 0.27482770478862895, 0.19289005554912042, 0.4089872981866758, 0.21698823500973485, 0.2937270230311191, 0.25231482371183334, 0.36777763178918355, 0.26821749913509685, 0.7553120633904629, 0.3297933877167738, 0.34449968872079584, 0.5209589585410846, 0.6523156542597031, 0.43620415763752685, 0.4561926463421161, 0.6009663976806334, 0.48454059296396745, 0.24714791461105612, 0.28226591235838605, 0.2921924814909138, 0.3358091616034211, 0.22856409283403023, 0.23106960908495033, 0.38211395971822815, 0.3711861409462256, 0.3001369712505568, 0.2044845130823173, 0.1630799041389046, 0.20010979606207557, 0.23801187171313154, 0.2128941384680333, 0.23080022178824033, 0.261235498191257, 0.20543144639011646, 0.20902055304049327, 0.2108021553985402, 0.19609351236239203, 0.8488278852075777, 0.22680101673975428, 0.8149094032496786, 0.2109200133160537, 0.1922853558802261, 0.19193622771537777, 0.205387462515648, 0.18862841890226878, 0.18712546461916435, 0.165537709856999, 0.15892212559024665, 0.20033289447671976, 0.19951385903990926, 0.9286654034960835, 0.9168579956707474, 0.9288544413790013, 0.7907962597421541, 0.15649744120829856, 0.11231200827338494, 0.212238488569237, 0.6349319877976322, 0.2105604619093463, 0.16682987749593026, 0.10456380628161366, 0.1690675989803111, 0.19069934357892504, 0.18867014252815784, 0.20100968874828418, 0.18264954974759096, 0.1893702638871808, 0.18035043551948204, 0.1854560438784858, 0.1894068246872438, 0.18259593765662252, 0.13569388735828836, 0.07942402217213862, 0.10157451415770358, 0.08835391648282587, 0.10539662365521307, 0.09340707491050193, 0.08088354452929003, 0.08986851191989043, 0.08932156897424015]}, "mutation_prompt": null}
{"id": "3883532f-ae0c-4162-b75e-f3042326b472", "solution": "import numpy as np\n\nclass OptimizedHybridEvolutionaryOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(30, budget // 12)  # Adjusted population size\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, dim))\n        self.velocities = np.random.uniform(-0.3, 0.3, (self.pop_size, dim))\n        self.personal_best_positions = self.population.copy()\n        self.personal_best_values = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evals = 0\n        self.F = 0.5  # Dynamic scaling based on performance\n        self.CR = 0.85  # Increased crossover rate\n        self.omega = 0.3  # Further decreased inertia weight\n        self.phi_p = 1.4  # New cognitive component\n        self.phi_g = 1.2  # New social component\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evals < self.budget:\n            for i in range(self.pop_size):\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), *self.bounds)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                trial_value = func(trial)\n                self.evals += 1\n                if trial_value < self.personal_best_values[i]:\n                    self.personal_best_positions[i] = trial\n                    self.personal_best_values[i] = trial_value\n                if trial_value < self.global_best_value:\n                    self.global_best_value = trial_value\n                    self.global_best_position = trial\n\n            rand_vals = np.random.rand(2, self.pop_size, self.dim)\n            self.velocities = (self.omega * self.velocities +\n                               rand_vals[0] * self.phi_p * (self.personal_best_positions - self.population) +\n                               rand_vals[1] * self.phi_g * (self.global_best_position - self.population))\n            self.population += self.velocities\n            np.clip(self.population, *self.bounds, out=self.population)\n\n        return self.global_best_value\n\n    def evaluate_population(self, func):\n        values = np.apply_along_axis(func, 1, self.population)\n        self.evals += self.pop_size\n        better_mask = values < self.personal_best_values\n        self.personal_best_positions[better_mask] = self.population[better_mask]\n        self.personal_best_values[better_mask] = values[better_mask]\n        min_idx = values.argmin()\n        if values[min_idx] < self.global_best_value:\n            self.global_best_value = values[min_idx]\n            self.global_best_position = self.population[min_idx]", "name": "OptimizedHybridEvolutionaryOptimizer", "description": "Optimized Hybrid Evolutionary Algorithm with dynamic parameter tuning and simplified operations for enhanced performance.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "93ec25af-d4ab-478c-bd84-16d2f1a3f523", "metadata": {"aucs": [0.912989714961851, 0.9154344159030199, 0.911325450575271, 0.920112261021627, 0.9159606971738903, 0.9190393333751533, 0.9251252746319596, 0.9168510819254622, 0.9180727414095686, 0.821281525622317, 0.8253972842544415, 0.8308072565625633, 0.8307421534400337, 0.8200047239068631, 0.8486175101784383, 0.8388280390540042, 0.8380966616211073, 0.8289976796022328, 0.17781937613022003, 0.10090621803673316, 0.18121582229300703, 0.11227345747355633, 0.1337864168885522, 0.12382009210550837, 0.121973562033724, 0.783332814887391, 0.16026541176747433, 0.12385828079907901, 0.12201653796115408, 0.11590172413663946, 0.10501906123460558, 0.11749389021856838, 0.09971846547677488, 0.09694035851695049, 0.1086543633040783, 0.09605616724827482, 0.9820870525736312, 0.9809245554849745, 0.9838143038557996, 0.9801245447311067, 0.9789669318193163, 0.9799697500644702, 0.9853874107467369, 0.9677604968932018, 0.9823772724411416, 0.8162364143955583, 0.8126993461228189, 0.8109252857229121, 0.7803037136485445, 0.8067551535953066, 0.810924029535545, 0.8044327632585909, 0.7919127392177738, 0.7997586939432612, 0.22978357696070695, 0.22897537785902677, 0.2278523661791494, 0.2810708305361017, 0.213551027757528, 0.38029030767962635, 0.1785497998285629, 0.8856369499804064, 0.12114487977025223, 0.2309654729222228, 0.24032225800035756, 0.22373072449355136, 0.12989826527258996, 0.252321447472974, 0.21308466791351477, 0.2357390480203715, 0.2384872787726079, 0.2860154878444545, 0.18961359103232944, 0.22918312561252674, 0.13234967885099902, 0.25115829389050226, 0.23907745093715171, 0.23868364126758002, 0.2722744086036831, 0.2658215189162575, 0.12156302072078418, 0.004111293154636209, 9.999999999998899e-05, 0.056899336759141494, 0.05956394268415299, 9.999999999998899e-05, 0.0733501735671771, 0.03539520516772954, 0.002051652446869223, 0.050292890700608606, 0.04631598223107336, 0.041434056279496145, 0.16542488155211776, 0.040702375411850844, 0.06842747533262739, 0.03350325728829451, 0.034460355046607716, 0.051646012624232074, 0.05312108147532357, 0.03699607291864182, 0.15996099863250934, 0.3309072821253092, 0.30103108750169816, 0.20995452470013243, 0.10182353300360991, 0.08134328784074785, 0.13656117451495153, 0.30881727936665115, 0.15442559533492917, 0.05729823031746217, 0.17543113293600343, 0.011294595408062769, 0.3134491637879607, 0.1590267650431999, 0.18751936189433283, 0.3846703918399308, 0.0606858562647582, 0.6156911776573893, 0.5748045568315758, 0.6445674572967381, 0.6722789355033588, 0.5467431146490538, 0.6177127956909275, 0.6253570064636899, 0.6188360967571986, 0.6489166030912943, 0.11921654133701964, 0.1408340697786985, 0.15812019595772087, 0.0957049231571464, 0.15734820666723048, 0.09803596517886448, 0.11264211444082428, 0.15030002269875364, 0.11590703554456505, 0.44682053539972777, 0.27482770478862895, 0.19289005554912042, 0.4089872981866758, 0.21698823500973485, 0.2937270230311191, 0.25231482371183334, 0.36777763178918355, 0.26821749913509685, 0.7553120633904629, 0.3297933877167738, 0.34449968872079584, 0.5209589585410846, 0.6523156542597031, 0.43620415763752685, 0.4561926463421161, 0.6009663976806334, 0.48454059296396745, 0.24714791461105612, 0.28226591235838605, 0.2921924814909138, 0.3358091616034211, 0.22856409283403023, 0.23106960908495033, 0.38211395971822815, 0.3711861409462256, 0.3001369712505568, 0.2044845130823173, 0.1630799041389046, 0.20010979606207557, 0.23801187171313154, 0.2128941384680333, 0.23080022178824033, 0.261235498191257, 0.20543144639011646, 0.20902055304049327, 0.2108021553985402, 0.19609351236239203, 0.8488278852075777, 0.22680101673975428, 0.8149094032496786, 0.2109200133160537, 0.1922853558802261, 0.19193622771537777, 0.205387462515648, 0.18862841890226878, 0.18712546461916435, 0.165537709856999, 0.15892212559024665, 0.20033289447671976, 0.19951385903990926, 0.9286654034960835, 0.9168579956707474, 0.9288544413790013, 0.7907962597421541, 0.15649744120829856, 0.11231200827338494, 0.212238488569237, 0.6349319877976322, 0.2105604619093463, 0.16682987749593026, 0.10456380628161366, 0.1690675989803111, 0.19069934357892504, 0.18867014252815784, 0.20100968874828418, 0.18264954974759096, 0.1893702638871808, 0.18035043551948204, 0.1854560438784858, 0.1894068246872438, 0.18259593765662252, 0.13569388735828836, 0.07942402217213862, 0.10157451415770358, 0.08835391648282587, 0.10539662365521307, 0.09340707491050193, 0.08088354452929003, 0.08986851191989043, 0.08932156897424015]}, "mutation_prompt": null}
{"id": "726da45c-4eee-45ca-825b-c28835ad2090", "solution": "import numpy as np\n\nclass OptimizedHybridEvolutionaryOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(30, budget // 12)  # Adjusted population size\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, dim))\n        self.velocities = np.random.uniform(-0.3, 0.3, (self.pop_size, dim))\n        self.personal_best_positions = self.population.copy()\n        self.personal_best_values = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evals = 0\n        self.F = 0.5  # Dynamic scaling based on performance\n        self.CR = 0.85  # Increased crossover rate\n        self.omega = 0.3  # Further decreased inertia weight\n        self.phi_p = 1.4  # New cognitive component\n        self.phi_g = 1.2  # New social component\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evals < self.budget:\n            for i in range(self.pop_size):\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), *self.bounds)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                trial_value = func(trial)\n                self.evals += 1\n                if trial_value < self.personal_best_values[i]:\n                    self.personal_best_positions[i] = trial\n                    self.personal_best_values[i] = trial_value\n                if trial_value < self.global_best_value:\n                    self.global_best_value = trial_value\n                    self.global_best_position = trial\n\n            rand_vals = np.random.rand(2, self.pop_size, self.dim)\n            self.velocities = (self.omega * self.velocities +\n                               rand_vals[0] * self.phi_p * (self.personal_best_positions - self.population) +\n                               rand_vals[1] * self.phi_g * (self.global_best_position - self.population))\n            self.population += self.velocities\n            np.clip(self.population, *self.bounds, out=self.population)\n\n        return self.global_best_value\n\n    def evaluate_population(self, func):\n        values = np.apply_along_axis(func, 1, self.population)\n        self.evals += self.pop_size\n        better_mask = values < self.personal_best_values\n        self.personal_best_positions[better_mask] = self.population[better_mask]\n        self.personal_best_values[better_mask] = values[better_mask]\n        min_idx = values.argmin()\n        if values[min_idx] < self.global_best_value:\n            self.global_best_value = values[min_idx]\n            self.global_best_position = self.population[min_idx]", "name": "OptimizedHybridEvolutionaryOptimizer", "description": "Optimized Hybrid Evolutionary Algorithm with dynamic parameter tuning and simplified operations for enhanced performance.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "93ec25af-d4ab-478c-bd84-16d2f1a3f523", "metadata": {"aucs": [0.912989714961851, 0.9154344159030199, 0.911325450575271, 0.920112261021627, 0.9159606971738903, 0.9190393333751533, 0.9251252746319596, 0.9168510819254622, 0.9180727414095686, 0.821281525622317, 0.8253972842544415, 0.8308072565625633, 0.8307421534400337, 0.8200047239068631, 0.8486175101784383, 0.8388280390540042, 0.8380966616211073, 0.8289976796022328, 0.17781937613022003, 0.10090621803673316, 0.18121582229300703, 0.11227345747355633, 0.1337864168885522, 0.12382009210550837, 0.121973562033724, 0.783332814887391, 0.16026541176747433, 0.12385828079907901, 0.12201653796115408, 0.11590172413663946, 0.10501906123460558, 0.11749389021856838, 0.09971846547677488, 0.09694035851695049, 0.1086543633040783, 0.09605616724827482, 0.9820870525736312, 0.9809245554849745, 0.9838143038557996, 0.9801245447311067, 0.9789669318193163, 0.9799697500644702, 0.9853874107467369, 0.9677604968932018, 0.9823772724411416, 0.8162364143955583, 0.8126993461228189, 0.8109252857229121, 0.7803037136485445, 0.8067551535953066, 0.810924029535545, 0.8044327632585909, 0.7919127392177738, 0.7997586939432612, 0.22978357696070695, 0.22897537785902677, 0.2278523661791494, 0.2810708305361017, 0.213551027757528, 0.38029030767962635, 0.1785497998285629, 0.8856369499804064, 0.12114487977025223, 0.2309654729222228, 0.24032225800035756, 0.22373072449355136, 0.12989826527258996, 0.252321447472974, 0.21308466791351477, 0.2357390480203715, 0.2384872787726079, 0.2860154878444545, 0.18961359103232944, 0.22918312561252674, 0.13234967885099902, 0.25115829389050226, 0.23907745093715171, 0.23868364126758002, 0.2722744086036831, 0.2658215189162575, 0.12156302072078418, 0.004111293154636209, 9.999999999998899e-05, 0.056899336759141494, 0.05956394268415299, 9.999999999998899e-05, 0.0733501735671771, 0.03539520516772954, 0.002051652446869223, 0.050292890700608606, 0.04631598223107336, 0.041434056279496145, 0.16542488155211776, 0.040702375411850844, 0.06842747533262739, 0.03350325728829451, 0.034460355046607716, 0.051646012624232074, 0.05312108147532357, 0.03699607291864182, 0.15996099863250934, 0.3309072821253092, 0.30103108750169816, 0.20995452470013243, 0.10182353300360991, 0.08134328784074785, 0.13656117451495153, 0.30881727936665115, 0.15442559533492917, 0.05729823031746217, 0.17543113293600343, 0.011294595408062769, 0.3134491637879607, 0.1590267650431999, 0.18751936189433283, 0.3846703918399308, 0.0606858562647582, 0.6156911776573893, 0.5748045568315758, 0.6445674572967381, 0.6722789355033588, 0.5467431146490538, 0.6177127956909275, 0.6253570064636899, 0.6188360967571986, 0.6489166030912943, 0.11921654133701964, 0.1408340697786985, 0.15812019595772087, 0.0957049231571464, 0.15734820666723048, 0.09803596517886448, 0.11264211444082428, 0.15030002269875364, 0.11590703554456505, 0.44682053539972777, 0.27482770478862895, 0.19289005554912042, 0.4089872981866758, 0.21698823500973485, 0.2937270230311191, 0.25231482371183334, 0.36777763178918355, 0.26821749913509685, 0.7553120633904629, 0.3297933877167738, 0.34449968872079584, 0.5209589585410846, 0.6523156542597031, 0.43620415763752685, 0.4561926463421161, 0.6009663976806334, 0.48454059296396745, 0.24714791461105612, 0.28226591235838605, 0.2921924814909138, 0.3358091616034211, 0.22856409283403023, 0.23106960908495033, 0.38211395971822815, 0.3711861409462256, 0.3001369712505568, 0.2044845130823173, 0.1630799041389046, 0.20010979606207557, 0.23801187171313154, 0.2128941384680333, 0.23080022178824033, 0.261235498191257, 0.20543144639011646, 0.20902055304049327, 0.2108021553985402, 0.19609351236239203, 0.8488278852075777, 0.22680101673975428, 0.8149094032496786, 0.2109200133160537, 0.1922853558802261, 0.19193622771537777, 0.205387462515648, 0.18862841890226878, 0.18712546461916435, 0.165537709856999, 0.15892212559024665, 0.20033289447671976, 0.19951385903990926, 0.9286654034960835, 0.9168579956707474, 0.9288544413790013, 0.7907962597421541, 0.15649744120829856, 0.11231200827338494, 0.212238488569237, 0.6349319877976322, 0.2105604619093463, 0.16682987749593026, 0.10456380628161366, 0.1690675989803111, 0.19069934357892504, 0.18867014252815784, 0.20100968874828418, 0.18264954974759096, 0.1893702638871808, 0.18035043551948204, 0.1854560438784858, 0.1894068246872438, 0.18259593765662252, 0.13569388735828836, 0.07942402217213862, 0.10157451415770358, 0.08835391648282587, 0.10539662365521307, 0.09340707491050193, 0.08088354452929003, 0.08986851191989043, 0.08932156897424015]}, "mutation_prompt": null}
{"id": "bbeeb55f-5c71-4b0f-b037-d030ee6a0029", "solution": "import numpy as np\n\nclass OptimizedHybridEvolutionaryOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(30, budget // 12)  # Adjusted population size\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, dim))\n        self.velocities = np.random.uniform(-0.3, 0.3, (self.pop_size, dim))\n        self.personal_best_positions = self.population.copy()\n        self.personal_best_values = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evals = 0\n        self.F = 0.5  # Dynamic scaling based on performance\n        self.CR = 0.85  # Increased crossover rate\n        self.omega = 0.3  # Further decreased inertia weight\n        self.phi_p = 1.4  # New cognitive component\n        self.phi_g = 1.2  # New social component\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evals < self.budget:\n            for i in range(self.pop_size):\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), *self.bounds)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                trial_value = func(trial)\n                self.evals += 1\n                if trial_value < self.personal_best_values[i]:\n                    self.personal_best_positions[i] = trial\n                    self.personal_best_values[i] = trial_value\n                if trial_value < self.global_best_value:\n                    self.global_best_value = trial_value\n                    self.global_best_position = trial\n\n            rand_vals = np.random.rand(2, self.pop_size, self.dim)\n            self.velocities = (self.omega * self.velocities +\n                               rand_vals[0] * self.phi_p * (self.personal_best_positions - self.population) +\n                               rand_vals[1] * self.phi_g * (self.global_best_position - self.population))\n            self.population += self.velocities\n            np.clip(self.population, *self.bounds, out=self.population)\n\n        return self.global_best_value\n\n    def evaluate_population(self, func):\n        values = np.apply_along_axis(func, 1, self.population)\n        self.evals += self.pop_size\n        better_mask = values < self.personal_best_values\n        self.personal_best_positions[better_mask] = self.population[better_mask]\n        self.personal_best_values[better_mask] = values[better_mask]\n        min_idx = values.argmin()\n        if values[min_idx] < self.global_best_value:\n            self.global_best_value = values[min_idx]\n            self.global_best_position = self.population[min_idx]", "name": "OptimizedHybridEvolutionaryOptimizer", "description": "Optimized Hybrid Evolutionary Algorithm with dynamic parameter tuning and simplified operations for enhanced performance.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "93ec25af-d4ab-478c-bd84-16d2f1a3f523", "metadata": {"aucs": [0.912989714961851, 0.9154344159030199, 0.911325450575271, 0.920112261021627, 0.9159606971738903, 0.9190393333751533, 0.9251252746319596, 0.9168510819254622, 0.9180727414095686, 0.821281525622317, 0.8253972842544415, 0.8308072565625633, 0.8307421534400337, 0.8200047239068631, 0.8486175101784383, 0.8388280390540042, 0.8380966616211073, 0.8289976796022328, 0.17781937613022003, 0.10090621803673316, 0.18121582229300703, 0.11227345747355633, 0.1337864168885522, 0.12382009210550837, 0.121973562033724, 0.783332814887391, 0.16026541176747433, 0.12385828079907901, 0.12201653796115408, 0.11590172413663946, 0.10501906123460558, 0.11749389021856838, 0.09971846547677488, 0.09694035851695049, 0.1086543633040783, 0.09605616724827482, 0.9820870525736312, 0.9809245554849745, 0.9838143038557996, 0.9801245447311067, 0.9789669318193163, 0.9799697500644702, 0.9853874107467369, 0.9677604968932018, 0.9823772724411416, 0.8162364143955583, 0.8126993461228189, 0.8109252857229121, 0.7803037136485445, 0.8067551535953066, 0.810924029535545, 0.8044327632585909, 0.7919127392177738, 0.7997586939432612, 0.22978357696070695, 0.22897537785902677, 0.2278523661791494, 0.2810708305361017, 0.213551027757528, 0.38029030767962635, 0.1785497998285629, 0.8856369499804064, 0.12114487977025223, 0.2309654729222228, 0.24032225800035756, 0.22373072449355136, 0.12989826527258996, 0.252321447472974, 0.21308466791351477, 0.2357390480203715, 0.2384872787726079, 0.2860154878444545, 0.18961359103232944, 0.22918312561252674, 0.13234967885099902, 0.25115829389050226, 0.23907745093715171, 0.23868364126758002, 0.2722744086036831, 0.2658215189162575, 0.12156302072078418, 0.004111293154636209, 9.999999999998899e-05, 0.056899336759141494, 0.05956394268415299, 9.999999999998899e-05, 0.0733501735671771, 0.03539520516772954, 0.002051652446869223, 0.050292890700608606, 0.04631598223107336, 0.041434056279496145, 0.16542488155211776, 0.040702375411850844, 0.06842747533262739, 0.03350325728829451, 0.034460355046607716, 0.051646012624232074, 0.05312108147532357, 0.03699607291864182, 0.15996099863250934, 0.3309072821253092, 0.30103108750169816, 0.20995452470013243, 0.10182353300360991, 0.08134328784074785, 0.13656117451495153, 0.30881727936665115, 0.15442559533492917, 0.05729823031746217, 0.17543113293600343, 0.011294595408062769, 0.3134491637879607, 0.1590267650431999, 0.18751936189433283, 0.3846703918399308, 0.0606858562647582, 0.6156911776573893, 0.5748045568315758, 0.6445674572967381, 0.6722789355033588, 0.5467431146490538, 0.6177127956909275, 0.6253570064636899, 0.6188360967571986, 0.6489166030912943, 0.11921654133701964, 0.1408340697786985, 0.15812019595772087, 0.0957049231571464, 0.15734820666723048, 0.09803596517886448, 0.11264211444082428, 0.15030002269875364, 0.11590703554456505, 0.44682053539972777, 0.27482770478862895, 0.19289005554912042, 0.4089872981866758, 0.21698823500973485, 0.2937270230311191, 0.25231482371183334, 0.36777763178918355, 0.26821749913509685, 0.7553120633904629, 0.3297933877167738, 0.34449968872079584, 0.5209589585410846, 0.6523156542597031, 0.43620415763752685, 0.4561926463421161, 0.6009663976806334, 0.48454059296396745, 0.24714791461105612, 0.28226591235838605, 0.2921924814909138, 0.3358091616034211, 0.22856409283403023, 0.23106960908495033, 0.38211395971822815, 0.3711861409462256, 0.3001369712505568, 0.2044845130823173, 0.1630799041389046, 0.20010979606207557, 0.23801187171313154, 0.2128941384680333, 0.23080022178824033, 0.261235498191257, 0.20543144639011646, 0.20902055304049327, 0.2108021553985402, 0.19609351236239203, 0.8488278852075777, 0.22680101673975428, 0.8149094032496786, 0.2109200133160537, 0.1922853558802261, 0.19193622771537777, 0.205387462515648, 0.18862841890226878, 0.18712546461916435, 0.165537709856999, 0.15892212559024665, 0.20033289447671976, 0.19951385903990926, 0.9286654034960835, 0.9168579956707474, 0.9288544413790013, 0.7907962597421541, 0.15649744120829856, 0.11231200827338494, 0.212238488569237, 0.6349319877976322, 0.2105604619093463, 0.16682987749593026, 0.10456380628161366, 0.1690675989803111, 0.19069934357892504, 0.18867014252815784, 0.20100968874828418, 0.18264954974759096, 0.1893702638871808, 0.18035043551948204, 0.1854560438784858, 0.1894068246872438, 0.18259593765662252, 0.13569388735828836, 0.07942402217213862, 0.10157451415770358, 0.08835391648282587, 0.10539662365521307, 0.09340707491050193, 0.08088354452929003, 0.08986851191989043, 0.08932156897424015]}, "mutation_prompt": null}
{"id": "748a3b5a-832b-4163-941a-38748b0ec558", "solution": "import numpy as np\n\nclass EnhancedHybridEvolutionaryOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = max(20, budget // 15)  # Reduced population size for efficiency\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, dim))\n        self.velocities = np.random.uniform(-0.1, 0.1, (self.pop_size, dim))  # Adjusted velocity range\n        self.personal_best_positions = self.population.copy()\n        self.personal_best_values = np.full(self.pop_size, np.inf)\n        self.global_best_position = self.population[np.random.choice(self.pop_size)]\n        self.global_best_value = np.inf\n        self.evals = 0\n        self.F = 0.45  # Slightly reduced scaling factor for finer adjustments\n        self.CR = 0.9  # Increased crossover rate for greater diversity\n        self.omega = 0.25  # Further decreased inertia weight for faster convergence\n        self.phi_p = 1.5  # Adjusted cognitive component for better local search\n        self.phi_g = 1.3  # Adjusted social component for improved global exploration\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evals < self.budget:\n            for i in range(self.pop_size):\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), *self.bounds)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                trial_value = func(trial)\n                self.evals += 1\n                if trial_value < self.personal_best_values[i]:\n                    self.personal_best_positions[i] = trial\n                    self.personal_best_values[i] = trial_value\n                if trial_value < self.global_best_value:\n                    self.global_best_value = trial_value\n                    self.global_best_position = trial\n\n            self.update_velocities()\n            self.population += self.velocities\n            np.clip(self.population, *self.bounds, out=self.population)\n\n        return self.global_best_value\n\n    def evaluate_population(self, func):\n        values = np.apply_along_axis(func, 1, self.population)\n        self.evals += self.pop_size\n        better_mask = values < self.personal_best_values\n        self.personal_best_positions[better_mask] = self.population[better_mask]\n        self.personal_best_values[better_mask] = values[better_mask]\n        min_idx = values.argmin()\n        if values[min_idx] < self.global_best_value:\n            self.global_best_value = values[min_idx]\n            self.global_best_position = self.population[min_idx]\n\n    def update_velocities(self):\n        rand_vals = np.random.rand(2, self.pop_size, self.dim)\n        cognitive_component = rand_vals[0] * self.phi_p * (self.personal_best_positions - self.population)\n        social_component = rand_vals[1] * self.phi_g * (self.global_best_position - self.population)\n        self.velocities = self.omega * self.velocities + cognitive_component + social_component", "name": "EnhancedHybridEvolutionaryOptimizer", "description": "Enhanced Hybrid Evolutionary Algorithm with adaptive parameter control and efficient convergence strategies.", "configspace": "", "generation": 61, "fitness": 0.15476075271311743, "feedback": "The algorithm EnhancedHybridEvolutionaryOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.16.", "error": "", "parent_id": "93ec25af-d4ab-478c-bd84-16d2f1a3f523", "metadata": {"aucs": [0.26659932823923294, 0.26591802437542156, 0.26826600211653795, 0.27116575565030976, 0.28919948496703685, 0.2774589520869347, 0.29002178234373255, 0.27028282595693076, 0.2885832471448625, 0.0073784087405243115, 0.0016624573608882143, 0.0022272207910587483, 0.01362778076291471, 0.0008371408805815106, 0.0032985471623149243, 0.0012452223983635546, 0.0074405659878866715, 0.000208120366642639, 0.07885197690888812, 0.07800843256393564, 0.07868310724319783, 0.07832564189690217, 0.07157358450516227, 0.0753994881115505, 0.08496524463454369, 0.07017408368939992, 0.06903138609012494, 0.06197454580248907, 0.058779887603480185, 0.06426516365451007, 0.062291625617714064, 0.06663624957497871, 0.05496404942318445, 0.057292797730628786, 0.05564940351799885, 0.060517655734807496, 0.7791672225796394, 0.79914221600563, 0.8080770403426873, 0.8153919293664329, 0.8127648252553132, 0.7590901119562021, 0.8119771714046038, 0.8183643194162757, 0.7601379603002044, 0.127422325625285, 0.13408555771775243, 0.14953606586589263, 0.13155331374439339, 0.12967629328406782, 0.140877228723563, 0.1652924699704701, 0.12484256858751874, 0.153395756130281, 0.19206375274844245, 0.2090314100165147, 0.18335548727082085, 0.2017519760076546, 0.19609387545946622, 0.18976313529031907, 0.1961111189728092, 0.19983156089962817, 0.20728559840149763, 0.09164884089259107, 0.09626876110913274, 0.055667442717505566, 0.05375558754849519, 0.08225894470611261, 0.04798840616211386, 0.06003668943899121, 0.07224369675623221, 0.05806234276834421, 0.07252672591437426, 0.040366736844243634, 0.08007902557392421, 0.08788950179578647, 0.06987987269578788, 0.06287056741612618, 0.06686318074534503, 0.07686207493078467, 0.07022712210773119, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07937500561625876, 0.08130246649355999, 0.09537309454602505, 0.07672892223591987, 0.08175267135578945, 0.09188814464747197, 0.06525066083512865, 0.09078496601746211, 0.05626318553415277, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02253820524249661, 0.028126374345028293, 0.04210598900305973, 0.03493038690866379, 0.030454290539973394, 0.03344948277394433, 0.02127570020184033, 0.029157759841728192, 0.02539949338122993, 0.2698046629166896, 0.26678262757190574, 0.2759425901869388, 0.28499919484490777, 0.27799970714983524, 0.29855338131944775, 0.26110194613279847, 0.2767945357257122, 0.28866627876770745, 0.0765359227796556, 0.07055659321726215, 0.07389832063245372, 0.07577609110866268, 0.066887472622984, 0.07164867993858393, 0.06967752699088692, 0.06492714779133857, 0.07982234494841633, 0.15287444622230573, 0.15094356191132796, 0.13735306801487568, 0.1396310646185186, 0.13511880823300437, 0.13797534577630155, 0.14963138758589234, 0.13481087972183647, 0.14845298078960223, 0.19477338595957805, 0.20521112766326677, 0.20854295654977484, 0.2054249090603376, 0.20720751958747996, 0.20599488492712548, 0.2011602559124851, 0.2172207974700161, 0.20952292088266056, 0.15490955126161587, 0.12192236136643042, 0.15177932339496014, 0.13718551736246976, 0.15590015793669432, 0.13924446445370597, 0.1458440768242375, 0.14046164913536363, 0.14756486338443497, 0.17512656223266443, 0.1849256846432108, 0.18203343530761618, 0.18091248508579405, 0.17497899359709113, 0.17283190667316284, 0.16736299995820103, 0.18288759930850607, 0.19467005002328996, 0.15858938059248262, 0.16884228380894384, 0.19073432349951513, 0.16974503074831793, 0.16622459359450736, 0.15994721644038257, 0.15666348874311353, 0.17516884509534447, 0.17135263735637185, 0.14825247655467888, 0.31974217111639014, 0.2661536369663211, 0.17018301243367662, 0.17343973599678697, 0.3098484957482377, 0.3276870710943742, 0.30379729652886067, 0.17277758126769205, 0.17758026175398978, 0.15702939067541866, 0.2610782929616762, 0.24269327172227095, 0.28514039305868877, 0.21054635771495278, 0.207848600006856, 0.19470085267019377, 0.26334773924711685, 0.19489821001838936, 0.1970028509610564, 0.1874056285094411, 0.1998106513511726, 0.18358151772120557, 0.17471492777883812, 0.17718471752009157, 0.18680236345907641, 0.19229599878872328, 0.06963898229523313, 0.06794552954352784, 0.07340711969510161, 0.06955118501575985, 0.06928463121620221, 0.0729266638133027, 0.06730749006954595, 0.07630502287708374, 0.07403784789803725]}, "mutation_prompt": null}
{"id": "448da3a3-c6f7-4f98-bed6-499dcb846c7e", "solution": "import numpy as np\n\nclass OptimizedHybridEvolutionaryOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(30, budget // 12)  # Adjusted population size\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, dim))\n        self.velocities = np.random.uniform(-0.3, 0.3, (self.pop_size, dim))\n        self.personal_best_positions = self.population.copy()\n        self.personal_best_values = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evals = 0\n        self.F = 0.5  # Dynamic scaling based on performance\n        self.CR = 0.85  # Increased crossover rate\n        self.omega = 0.3  # Further decreased inertia weight\n        self.phi_p = 1.4  # New cognitive component\n        self.phi_g = 1.2  # New social component\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evals < self.budget:\n            for i in range(self.pop_size):\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), *self.bounds)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                trial_value = func(trial)\n                self.evals += 1\n                if trial_value < self.personal_best_values[i]:\n                    self.personal_best_positions[i] = trial\n                    self.personal_best_values[i] = trial_value\n                if trial_value < self.global_best_value:\n                    self.global_best_value = trial_value\n                    self.global_best_position = trial\n\n            rand_vals = np.random.rand(2, self.pop_size, self.dim)\n            self.velocities = (self.omega * self.velocities +\n                               rand_vals[0] * self.phi_p * (self.personal_best_positions - self.population) +\n                               rand_vals[1] * self.phi_g * (self.global_best_position - self.population))\n            self.population += self.velocities\n            np.clip(self.population, *self.bounds, out=self.population)\n\n        return self.global_best_value\n\n    def evaluate_population(self, func):\n        values = np.apply_along_axis(func, 1, self.population)\n        self.evals += self.pop_size\n        better_mask = values < self.personal_best_values\n        self.personal_best_positions[better_mask] = self.population[better_mask]\n        self.personal_best_values[better_mask] = values[better_mask]\n        min_idx = values.argmin()\n        if values[min_idx] < self.global_best_value:\n            self.global_best_value = values[min_idx]\n            self.global_best_position = self.population[min_idx]", "name": "OptimizedHybridEvolutionaryOptimizer", "description": "Optimized Hybrid Evolutionary Algorithm with dynamic parameter tuning and simplified operations for enhanced performance.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "93ec25af-d4ab-478c-bd84-16d2f1a3f523", "metadata": {"aucs": [0.912989714961851, 0.9154344159030199, 0.911325450575271, 0.920112261021627, 0.9159606971738903, 0.9190393333751533, 0.9251252746319596, 0.9168510819254622, 0.9180727414095686, 0.821281525622317, 0.8253972842544415, 0.8308072565625633, 0.8307421534400337, 0.8200047239068631, 0.8486175101784383, 0.8388280390540042, 0.8380966616211073, 0.8289976796022328, 0.17781937613022003, 0.10090621803673316, 0.18121582229300703, 0.11227345747355633, 0.1337864168885522, 0.12382009210550837, 0.121973562033724, 0.783332814887391, 0.16026541176747433, 0.12385828079907901, 0.12201653796115408, 0.11590172413663946, 0.10501906123460558, 0.11749389021856838, 0.09971846547677488, 0.09694035851695049, 0.1086543633040783, 0.09605616724827482, 0.9820870525736312, 0.9809245554849745, 0.9838143038557996, 0.9801245447311067, 0.9789669318193163, 0.9799697500644702, 0.9853874107467369, 0.9677604968932018, 0.9823772724411416, 0.8162364143955583, 0.8126993461228189, 0.8109252857229121, 0.7803037136485445, 0.8067551535953066, 0.810924029535545, 0.8044327632585909, 0.7919127392177738, 0.7997586939432612, 0.22978357696070695, 0.22897537785902677, 0.2278523661791494, 0.2810708305361017, 0.213551027757528, 0.38029030767962635, 0.1785497998285629, 0.8856369499804064, 0.12114487977025223, 0.2309654729222228, 0.24032225800035756, 0.22373072449355136, 0.12989826527258996, 0.252321447472974, 0.21308466791351477, 0.2357390480203715, 0.2384872787726079, 0.2860154878444545, 0.18961359103232944, 0.22918312561252674, 0.13234967885099902, 0.25115829389050226, 0.23907745093715171, 0.23868364126758002, 0.2722744086036831, 0.2658215189162575, 0.12156302072078418, 0.004111293154636209, 9.999999999998899e-05, 0.056899336759141494, 0.05956394268415299, 9.999999999998899e-05, 0.0733501735671771, 0.03539520516772954, 0.002051652446869223, 0.050292890700608606, 0.04631598223107336, 0.041434056279496145, 0.16542488155211776, 0.040702375411850844, 0.06842747533262739, 0.03350325728829451, 0.034460355046607716, 0.051646012624232074, 0.05312108147532357, 0.03699607291864182, 0.15996099863250934, 0.3309072821253092, 0.30103108750169816, 0.20995452470013243, 0.10182353300360991, 0.08134328784074785, 0.13656117451495153, 0.30881727936665115, 0.15442559533492917, 0.05729823031746217, 0.17543113293600343, 0.011294595408062769, 0.3134491637879607, 0.1590267650431999, 0.18751936189433283, 0.3846703918399308, 0.0606858562647582, 0.6156911776573893, 0.5748045568315758, 0.6445674572967381, 0.6722789355033588, 0.5467431146490538, 0.6177127956909275, 0.6253570064636899, 0.6188360967571986, 0.6489166030912943, 0.11921654133701964, 0.1408340697786985, 0.15812019595772087, 0.0957049231571464, 0.15734820666723048, 0.09803596517886448, 0.11264211444082428, 0.15030002269875364, 0.11590703554456505, 0.44682053539972777, 0.27482770478862895, 0.19289005554912042, 0.4089872981866758, 0.21698823500973485, 0.2937270230311191, 0.25231482371183334, 0.36777763178918355, 0.26821749913509685, 0.7553120633904629, 0.3297933877167738, 0.34449968872079584, 0.5209589585410846, 0.6523156542597031, 0.43620415763752685, 0.4561926463421161, 0.6009663976806334, 0.48454059296396745, 0.24714791461105612, 0.28226591235838605, 0.2921924814909138, 0.3358091616034211, 0.22856409283403023, 0.23106960908495033, 0.38211395971822815, 0.3711861409462256, 0.3001369712505568, 0.2044845130823173, 0.1630799041389046, 0.20010979606207557, 0.23801187171313154, 0.2128941384680333, 0.23080022178824033, 0.261235498191257, 0.20543144639011646, 0.20902055304049327, 0.2108021553985402, 0.19609351236239203, 0.8488278852075777, 0.22680101673975428, 0.8149094032496786, 0.2109200133160537, 0.1922853558802261, 0.19193622771537777, 0.205387462515648, 0.18862841890226878, 0.18712546461916435, 0.165537709856999, 0.15892212559024665, 0.20033289447671976, 0.19951385903990926, 0.9286654034960835, 0.9168579956707474, 0.9288544413790013, 0.7907962597421541, 0.15649744120829856, 0.11231200827338494, 0.212238488569237, 0.6349319877976322, 0.2105604619093463, 0.16682987749593026, 0.10456380628161366, 0.1690675989803111, 0.19069934357892504, 0.18867014252815784, 0.20100968874828418, 0.18264954974759096, 0.1893702638871808, 0.18035043551948204, 0.1854560438784858, 0.1894068246872438, 0.18259593765662252, 0.13569388735828836, 0.07942402217213862, 0.10157451415770358, 0.08835391648282587, 0.10539662365521307, 0.09340707491050193, 0.08088354452929003, 0.08986851191989043, 0.08932156897424015]}, "mutation_prompt": null}
{"id": "da8b16a6-6d3f-4f08-b990-2addfa724e72", "solution": "import numpy as np\n\nclass OptimizedHybridEvolutionaryOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(30, budget // 12)  # Adjusted population size\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, dim))\n        self.velocities = np.random.uniform(-0.3, 0.3, (self.pop_size, dim))\n        self.personal_best_positions = self.population.copy()\n        self.personal_best_values = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evals = 0\n        self.F = 0.5  # Dynamic scaling based on performance\n        self.CR = 0.85  # Increased crossover rate\n        self.omega = 0.3  # Further decreased inertia weight\n        self.phi_p = 1.4  # New cognitive component\n        self.phi_g = 1.2  # New social component\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evals < self.budget:\n            for i in range(self.pop_size):\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), *self.bounds)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                trial_value = func(trial)\n                self.evals += 1\n                if trial_value < self.personal_best_values[i]:\n                    self.personal_best_positions[i] = trial\n                    self.personal_best_values[i] = trial_value\n                if trial_value < self.global_best_value:\n                    self.global_best_value = trial_value\n                    self.global_best_position = trial\n\n            rand_vals = np.random.rand(2, self.pop_size, self.dim)\n            self.velocities = (self.omega * self.velocities +\n                               rand_vals[0] * self.phi_p * (self.personal_best_positions - self.population) +\n                               rand_vals[1] * self.phi_g * (self.global_best_position - self.population))\n            self.population += self.velocities\n            np.clip(self.population, *self.bounds, out=self.population)\n\n        return self.global_best_value\n\n    def evaluate_population(self, func):\n        values = np.apply_along_axis(func, 1, self.population)\n        self.evals += self.pop_size\n        better_mask = values < self.personal_best_values\n        self.personal_best_positions[better_mask] = self.population[better_mask]\n        self.personal_best_values[better_mask] = values[better_mask]\n        min_idx = values.argmin()\n        if values[min_idx] < self.global_best_value:\n            self.global_best_value = values[min_idx]\n            self.global_best_position = self.population[min_idx]", "name": "OptimizedHybridEvolutionaryOptimizer", "description": "Optimized Hybrid Evolutionary Algorithm with dynamic parameter tuning and simplified operations for enhanced performance.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "93ec25af-d4ab-478c-bd84-16d2f1a3f523", "metadata": {"aucs": [0.912989714961851, 0.9154344159030199, 0.911325450575271, 0.920112261021627, 0.9159606971738903, 0.9190393333751533, 0.9251252746319596, 0.9168510819254622, 0.9180727414095686, 0.821281525622317, 0.8253972842544415, 0.8308072565625633, 0.8307421534400337, 0.8200047239068631, 0.8486175101784383, 0.8388280390540042, 0.8380966616211073, 0.8289976796022328, 0.17781937613022003, 0.10090621803673316, 0.18121582229300703, 0.11227345747355633, 0.1337864168885522, 0.12382009210550837, 0.121973562033724, 0.783332814887391, 0.16026541176747433, 0.12385828079907901, 0.12201653796115408, 0.11590172413663946, 0.10501906123460558, 0.11749389021856838, 0.09971846547677488, 0.09694035851695049, 0.1086543633040783, 0.09605616724827482, 0.9820870525736312, 0.9809245554849745, 0.9838143038557996, 0.9801245447311067, 0.9789669318193163, 0.9799697500644702, 0.9853874107467369, 0.9677604968932018, 0.9823772724411416, 0.8162364143955583, 0.8126993461228189, 0.8109252857229121, 0.7803037136485445, 0.8067551535953066, 0.810924029535545, 0.8044327632585909, 0.7919127392177738, 0.7997586939432612, 0.22978357696070695, 0.22897537785902677, 0.2278523661791494, 0.2810708305361017, 0.213551027757528, 0.38029030767962635, 0.1785497998285629, 0.8856369499804064, 0.12114487977025223, 0.2309654729222228, 0.24032225800035756, 0.22373072449355136, 0.12989826527258996, 0.252321447472974, 0.21308466791351477, 0.2357390480203715, 0.2384872787726079, 0.2860154878444545, 0.18961359103232944, 0.22918312561252674, 0.13234967885099902, 0.25115829389050226, 0.23907745093715171, 0.23868364126758002, 0.2722744086036831, 0.2658215189162575, 0.12156302072078418, 0.004111293154636209, 9.999999999998899e-05, 0.056899336759141494, 0.05956394268415299, 9.999999999998899e-05, 0.0733501735671771, 0.03539520516772954, 0.002051652446869223, 0.050292890700608606, 0.04631598223107336, 0.041434056279496145, 0.16542488155211776, 0.040702375411850844, 0.06842747533262739, 0.03350325728829451, 0.034460355046607716, 0.051646012624232074, 0.05312108147532357, 0.03699607291864182, 0.15996099863250934, 0.3309072821253092, 0.30103108750169816, 0.20995452470013243, 0.10182353300360991, 0.08134328784074785, 0.13656117451495153, 0.30881727936665115, 0.15442559533492917, 0.05729823031746217, 0.17543113293600343, 0.011294595408062769, 0.3134491637879607, 0.1590267650431999, 0.18751936189433283, 0.3846703918399308, 0.0606858562647582, 0.6156911776573893, 0.5748045568315758, 0.6445674572967381, 0.6722789355033588, 0.5467431146490538, 0.6177127956909275, 0.6253570064636899, 0.6188360967571986, 0.6489166030912943, 0.11921654133701964, 0.1408340697786985, 0.15812019595772087, 0.0957049231571464, 0.15734820666723048, 0.09803596517886448, 0.11264211444082428, 0.15030002269875364, 0.11590703554456505, 0.44682053539972777, 0.27482770478862895, 0.19289005554912042, 0.4089872981866758, 0.21698823500973485, 0.2937270230311191, 0.25231482371183334, 0.36777763178918355, 0.26821749913509685, 0.7553120633904629, 0.3297933877167738, 0.34449968872079584, 0.5209589585410846, 0.6523156542597031, 0.43620415763752685, 0.4561926463421161, 0.6009663976806334, 0.48454059296396745, 0.24714791461105612, 0.28226591235838605, 0.2921924814909138, 0.3358091616034211, 0.22856409283403023, 0.23106960908495033, 0.38211395971822815, 0.3711861409462256, 0.3001369712505568, 0.2044845130823173, 0.1630799041389046, 0.20010979606207557, 0.23801187171313154, 0.2128941384680333, 0.23080022178824033, 0.261235498191257, 0.20543144639011646, 0.20902055304049327, 0.2108021553985402, 0.19609351236239203, 0.8488278852075777, 0.22680101673975428, 0.8149094032496786, 0.2109200133160537, 0.1922853558802261, 0.19193622771537777, 0.205387462515648, 0.18862841890226878, 0.18712546461916435, 0.165537709856999, 0.15892212559024665, 0.20033289447671976, 0.19951385903990926, 0.9286654034960835, 0.9168579956707474, 0.9288544413790013, 0.7907962597421541, 0.15649744120829856, 0.11231200827338494, 0.212238488569237, 0.6349319877976322, 0.2105604619093463, 0.16682987749593026, 0.10456380628161366, 0.1690675989803111, 0.19069934357892504, 0.18867014252815784, 0.20100968874828418, 0.18264954974759096, 0.1893702638871808, 0.18035043551948204, 0.1854560438784858, 0.1894068246872438, 0.18259593765662252, 0.13569388735828836, 0.07942402217213862, 0.10157451415770358, 0.08835391648282587, 0.10539662365521307, 0.09340707491050193, 0.08088354452929003, 0.08986851191989043, 0.08932156897424015]}, "mutation_prompt": null}
{"id": "ef451a04-cdd2-4e92-ad28-6e0d25ae2ce4", "solution": "import numpy as np\n\nclass OptimizedHybridEvolutionaryOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(30, budget // 12)  # Adjusted population size\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, dim))\n        self.velocities = np.random.uniform(-0.3, 0.3, (self.pop_size, dim))\n        self.personal_best_positions = self.population.copy()\n        self.personal_best_values = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evals = 0\n        self.F = 0.5  # Dynamic scaling based on performance\n        self.CR = 0.85  # Increased crossover rate\n        self.omega = 0.3  # Further decreased inertia weight\n        self.phi_p = 1.4  # New cognitive component\n        self.phi_g = 1.2  # New social component\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evals < self.budget:\n            for i in range(self.pop_size):\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), *self.bounds)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                trial_value = func(trial)\n                self.evals += 1\n                if trial_value < self.personal_best_values[i]:\n                    self.personal_best_positions[i] = trial\n                    self.personal_best_values[i] = trial_value\n                if trial_value < self.global_best_value:\n                    self.global_best_value = trial_value\n                    self.global_best_position = trial\n\n            rand_vals = np.random.rand(2, self.pop_size, self.dim)\n            self.velocities = (self.omega * self.velocities +\n                               rand_vals[0] * self.phi_p * (self.personal_best_positions - self.population) +\n                               rand_vals[1] * self.phi_g * (self.global_best_position - self.population))\n            self.population += self.velocities\n            np.clip(self.population, *self.bounds, out=self.population)\n\n        return self.global_best_value\n\n    def evaluate_population(self, func):\n        values = np.apply_along_axis(func, 1, self.population)\n        self.evals += self.pop_size\n        better_mask = values < self.personal_best_values\n        self.personal_best_positions[better_mask] = self.population[better_mask]\n        self.personal_best_values[better_mask] = values[better_mask]\n        min_idx = values.argmin()\n        if values[min_idx] < self.global_best_value:\n            self.global_best_value = values[min_idx]\n            self.global_best_position = self.population[min_idx]", "name": "OptimizedHybridEvolutionaryOptimizer", "description": "Optimized Hybrid Evolutionary Algorithm with dynamic parameter tuning and simplified operations for enhanced performance.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "93ec25af-d4ab-478c-bd84-16d2f1a3f523", "metadata": {"aucs": [0.912989714961851, 0.9154344159030199, 0.911325450575271, 0.920112261021627, 0.9159606971738903, 0.9190393333751533, 0.9251252746319596, 0.9168510819254622, 0.9180727414095686, 0.821281525622317, 0.8253972842544415, 0.8308072565625633, 0.8307421534400337, 0.8200047239068631, 0.8486175101784383, 0.8388280390540042, 0.8380966616211073, 0.8289976796022328, 0.17781937613022003, 0.10090621803673316, 0.18121582229300703, 0.11227345747355633, 0.1337864168885522, 0.12382009210550837, 0.121973562033724, 0.783332814887391, 0.16026541176747433, 0.12385828079907901, 0.12201653796115408, 0.11590172413663946, 0.10501906123460558, 0.11749389021856838, 0.09971846547677488, 0.09694035851695049, 0.1086543633040783, 0.09605616724827482, 0.9820870525736312, 0.9809245554849745, 0.9838143038557996, 0.9801245447311067, 0.9789669318193163, 0.9799697500644702, 0.9853874107467369, 0.9677604968932018, 0.9823772724411416, 0.8162364143955583, 0.8126993461228189, 0.8109252857229121, 0.7803037136485445, 0.8067551535953066, 0.810924029535545, 0.8044327632585909, 0.7919127392177738, 0.7997586939432612, 0.22978357696070695, 0.22897537785902677, 0.2278523661791494, 0.2810708305361017, 0.213551027757528, 0.38029030767962635, 0.1785497998285629, 0.8856369499804064, 0.12114487977025223, 0.2309654729222228, 0.24032225800035756, 0.22373072449355136, 0.12989826527258996, 0.252321447472974, 0.21308466791351477, 0.2357390480203715, 0.2384872787726079, 0.2860154878444545, 0.18961359103232944, 0.22918312561252674, 0.13234967885099902, 0.25115829389050226, 0.23907745093715171, 0.23868364126758002, 0.2722744086036831, 0.2658215189162575, 0.12156302072078418, 0.004111293154636209, 9.999999999998899e-05, 0.056899336759141494, 0.05956394268415299, 9.999999999998899e-05, 0.0733501735671771, 0.03539520516772954, 0.002051652446869223, 0.050292890700608606, 0.04631598223107336, 0.041434056279496145, 0.16542488155211776, 0.040702375411850844, 0.06842747533262739, 0.03350325728829451, 0.034460355046607716, 0.051646012624232074, 0.05312108147532357, 0.03699607291864182, 0.15996099863250934, 0.3309072821253092, 0.30103108750169816, 0.20995452470013243, 0.10182353300360991, 0.08134328784074785, 0.13656117451495153, 0.30881727936665115, 0.15442559533492917, 0.05729823031746217, 0.17543113293600343, 0.011294595408062769, 0.3134491637879607, 0.1590267650431999, 0.18751936189433283, 0.3846703918399308, 0.0606858562647582, 0.6156911776573893, 0.5748045568315758, 0.6445674572967381, 0.6722789355033588, 0.5467431146490538, 0.6177127956909275, 0.6253570064636899, 0.6188360967571986, 0.6489166030912943, 0.11921654133701964, 0.1408340697786985, 0.15812019595772087, 0.0957049231571464, 0.15734820666723048, 0.09803596517886448, 0.11264211444082428, 0.15030002269875364, 0.11590703554456505, 0.44682053539972777, 0.27482770478862895, 0.19289005554912042, 0.4089872981866758, 0.21698823500973485, 0.2937270230311191, 0.25231482371183334, 0.36777763178918355, 0.26821749913509685, 0.7553120633904629, 0.3297933877167738, 0.34449968872079584, 0.5209589585410846, 0.6523156542597031, 0.43620415763752685, 0.4561926463421161, 0.6009663976806334, 0.48454059296396745, 0.24714791461105612, 0.28226591235838605, 0.2921924814909138, 0.3358091616034211, 0.22856409283403023, 0.23106960908495033, 0.38211395971822815, 0.3711861409462256, 0.3001369712505568, 0.2044845130823173, 0.1630799041389046, 0.20010979606207557, 0.23801187171313154, 0.2128941384680333, 0.23080022178824033, 0.261235498191257, 0.20543144639011646, 0.20902055304049327, 0.2108021553985402, 0.19609351236239203, 0.8488278852075777, 0.22680101673975428, 0.8149094032496786, 0.2109200133160537, 0.1922853558802261, 0.19193622771537777, 0.205387462515648, 0.18862841890226878, 0.18712546461916435, 0.165537709856999, 0.15892212559024665, 0.20033289447671976, 0.19951385903990926, 0.9286654034960835, 0.9168579956707474, 0.9288544413790013, 0.7907962597421541, 0.15649744120829856, 0.11231200827338494, 0.212238488569237, 0.6349319877976322, 0.2105604619093463, 0.16682987749593026, 0.10456380628161366, 0.1690675989803111, 0.19069934357892504, 0.18867014252815784, 0.20100968874828418, 0.18264954974759096, 0.1893702638871808, 0.18035043551948204, 0.1854560438784858, 0.1894068246872438, 0.18259593765662252, 0.13569388735828836, 0.07942402217213862, 0.10157451415770358, 0.08835391648282587, 0.10539662365521307, 0.09340707491050193, 0.08088354452929003, 0.08986851191989043, 0.08932156897424015]}, "mutation_prompt": null}
{"id": "a71b7fc6-fcf6-4ffa-ae93-c2c0fa471570", "solution": "import numpy as np\n\nclass EnhancedEvolutionaryOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(35, budget // 10)\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, dim))\n        self.velocities = np.random.uniform(-0.2, 0.2, (self.pop_size, dim))\n        self.personal_best_positions = self.population.copy()\n        self.personal_best_values = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evals = 0\n        self.F = 0.6\n        self.CR = 0.7\n        self.omega = 0.5\n        self.phi_p = 1.3\n        self.phi_g = 1.0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        \n        while self.evals < self.budget:\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), *self.bounds)\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n\n                trial_value = func(trial)\n                self.evals += 1\n                if trial_value < self.personal_best_values[i]:\n                    self.personal_best_positions[i] = trial\n                    self.personal_best_values[i] = trial_value\n                if trial_value < self.global_best_value:\n                    self.global_best_value = trial_value\n                    self.global_best_position = trial\n\n            rand_vals = np.random.rand(self.pop_size, self.dim)\n            self.velocities *= self.omega\n            self.velocities += rand_vals[:, :1] * self.phi_p * (self.personal_best_positions - self.population)\n            self.velocities += rand_vals[:, 1:] * self.phi_g * (self.global_best_position - self.population)\n            self.population += self.velocities\n            np.clip(self.population, *self.bounds, out=self.population)\n        \n        return self.global_best_value\n\n    def evaluate_population(self, func):\n        values = np.apply_along_axis(func, 1, self.population)\n        self.evals += self.pop_size\n        better_mask = values < self.personal_best_values\n        self.personal_best_positions[better_mask] = self.population[better_mask]\n        self.personal_best_values[better_mask] = values[better_mask]\n        min_idx = values.argmin()\n        if values[min_idx] < self.global_best_value:\n            self.global_best_value = values[min_idx]\n            self.global_best_position = self.population[min_idx]", "name": "EnhancedEvolutionaryOptimizer", "description": "Enhanced Evolutionary Algorithm with integrated local search and adaptive parameters for improved optimization efficiency.", "configspace": "", "generation": 65, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('operands could not be broadcast together with shapes (35,4) (35,5) ').", "error": "ValueError('operands could not be broadcast together with shapes (35,4) (35,5) ')", "parent_id": "93ec25af-d4ab-478c-bd84-16d2f1a3f523", "metadata": {}, "mutation_prompt": null}
{"id": "7101ab18-6ea5-405a-8c42-f3a0708419c5", "solution": "import numpy as np\n\nclass OptimizedHybridEvolutionaryOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(30, budget // 12)  # Adjusted population size\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, dim))\n        self.velocities = np.random.uniform(-0.3, 0.3, (self.pop_size, dim))\n        self.personal_best_positions = self.population.copy()\n        self.personal_best_values = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evals = 0\n        self.F = 0.5  # Dynamic scaling based on performance\n        self.CR = 0.85  # Increased crossover rate\n        self.omega = 0.3  # Further decreased inertia weight\n        self.phi_p = 1.4  # New cognitive component\n        self.phi_g = 1.2  # New social component\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evals < self.budget:\n            for i in range(self.pop_size):\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), *self.bounds)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                trial_value = func(trial)\n                self.evals += 1\n                if trial_value < self.personal_best_values[i]:\n                    self.personal_best_positions[i] = trial\n                    self.personal_best_values[i] = trial_value\n                if trial_value < self.global_best_value:\n                    self.global_best_value = trial_value\n                    self.global_best_position = trial\n\n            rand_vals = np.random.rand(2, self.pop_size, self.dim)\n            self.velocities = (self.omega * self.velocities +\n                               rand_vals[0] * self.phi_p * (self.personal_best_positions - self.population) +\n                               rand_vals[1] * self.phi_g * (self.global_best_position - self.population))\n            self.population += self.velocities\n            np.clip(self.population, *self.bounds, out=self.population)\n\n        return self.global_best_value\n\n    def evaluate_population(self, func):\n        values = np.apply_along_axis(func, 1, self.population)\n        self.evals += self.pop_size\n        better_mask = values < self.personal_best_values\n        self.personal_best_positions[better_mask] = self.population[better_mask]\n        self.personal_best_values[better_mask] = values[better_mask]\n        min_idx = values.argmin()\n        if values[min_idx] < self.global_best_value:\n            self.global_best_value = values[min_idx]\n            self.global_best_position = self.population[min_idx]", "name": "OptimizedHybridEvolutionaryOptimizer", "description": "Optimized Hybrid Evolutionary Algorithm with dynamic parameter tuning and simplified operations for enhanced performance.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "93ec25af-d4ab-478c-bd84-16d2f1a3f523", "metadata": {"aucs": [0.912989714961851, 0.9154344159030199, 0.911325450575271, 0.920112261021627, 0.9159606971738903, 0.9190393333751533, 0.9251252746319596, 0.9168510819254622, 0.9180727414095686, 0.821281525622317, 0.8253972842544415, 0.8308072565625633, 0.8307421534400337, 0.8200047239068631, 0.8486175101784383, 0.8388280390540042, 0.8380966616211073, 0.8289976796022328, 0.17781937613022003, 0.10090621803673316, 0.18121582229300703, 0.11227345747355633, 0.1337864168885522, 0.12382009210550837, 0.121973562033724, 0.783332814887391, 0.16026541176747433, 0.12385828079907901, 0.12201653796115408, 0.11590172413663946, 0.10501906123460558, 0.11749389021856838, 0.09971846547677488, 0.09694035851695049, 0.1086543633040783, 0.09605616724827482, 0.9820870525736312, 0.9809245554849745, 0.9838143038557996, 0.9801245447311067, 0.9789669318193163, 0.9799697500644702, 0.9853874107467369, 0.9677604968932018, 0.9823772724411416, 0.8162364143955583, 0.8126993461228189, 0.8109252857229121, 0.7803037136485445, 0.8067551535953066, 0.810924029535545, 0.8044327632585909, 0.7919127392177738, 0.7997586939432612, 0.22978357696070695, 0.22897537785902677, 0.2278523661791494, 0.2810708305361017, 0.213551027757528, 0.38029030767962635, 0.1785497998285629, 0.8856369499804064, 0.12114487977025223, 0.2309654729222228, 0.24032225800035756, 0.22373072449355136, 0.12989826527258996, 0.252321447472974, 0.21308466791351477, 0.2357390480203715, 0.2384872787726079, 0.2860154878444545, 0.18961359103232944, 0.22918312561252674, 0.13234967885099902, 0.25115829389050226, 0.23907745093715171, 0.23868364126758002, 0.2722744086036831, 0.2658215189162575, 0.12156302072078418, 0.004111293154636209, 9.999999999998899e-05, 0.056899336759141494, 0.05956394268415299, 9.999999999998899e-05, 0.0733501735671771, 0.03539520516772954, 0.002051652446869223, 0.050292890700608606, 0.04631598223107336, 0.041434056279496145, 0.16542488155211776, 0.040702375411850844, 0.06842747533262739, 0.03350325728829451, 0.034460355046607716, 0.051646012624232074, 0.05312108147532357, 0.03699607291864182, 0.15996099863250934, 0.3309072821253092, 0.30103108750169816, 0.20995452470013243, 0.10182353300360991, 0.08134328784074785, 0.13656117451495153, 0.30881727936665115, 0.15442559533492917, 0.05729823031746217, 0.17543113293600343, 0.011294595408062769, 0.3134491637879607, 0.1590267650431999, 0.18751936189433283, 0.3846703918399308, 0.0606858562647582, 0.6156911776573893, 0.5748045568315758, 0.6445674572967381, 0.6722789355033588, 0.5467431146490538, 0.6177127956909275, 0.6253570064636899, 0.6188360967571986, 0.6489166030912943, 0.11921654133701964, 0.1408340697786985, 0.15812019595772087, 0.0957049231571464, 0.15734820666723048, 0.09803596517886448, 0.11264211444082428, 0.15030002269875364, 0.11590703554456505, 0.44682053539972777, 0.27482770478862895, 0.19289005554912042, 0.4089872981866758, 0.21698823500973485, 0.2937270230311191, 0.25231482371183334, 0.36777763178918355, 0.26821749913509685, 0.7553120633904629, 0.3297933877167738, 0.34449968872079584, 0.5209589585410846, 0.6523156542597031, 0.43620415763752685, 0.4561926463421161, 0.6009663976806334, 0.48454059296396745, 0.24714791461105612, 0.28226591235838605, 0.2921924814909138, 0.3358091616034211, 0.22856409283403023, 0.23106960908495033, 0.38211395971822815, 0.3711861409462256, 0.3001369712505568, 0.2044845130823173, 0.1630799041389046, 0.20010979606207557, 0.23801187171313154, 0.2128941384680333, 0.23080022178824033, 0.261235498191257, 0.20543144639011646, 0.20902055304049327, 0.2108021553985402, 0.19609351236239203, 0.8488278852075777, 0.22680101673975428, 0.8149094032496786, 0.2109200133160537, 0.1922853558802261, 0.19193622771537777, 0.205387462515648, 0.18862841890226878, 0.18712546461916435, 0.165537709856999, 0.15892212559024665, 0.20033289447671976, 0.19951385903990926, 0.9286654034960835, 0.9168579956707474, 0.9288544413790013, 0.7907962597421541, 0.15649744120829856, 0.11231200827338494, 0.212238488569237, 0.6349319877976322, 0.2105604619093463, 0.16682987749593026, 0.10456380628161366, 0.1690675989803111, 0.19069934357892504, 0.18867014252815784, 0.20100968874828418, 0.18264954974759096, 0.1893702638871808, 0.18035043551948204, 0.1854560438784858, 0.1894068246872438, 0.18259593765662252, 0.13569388735828836, 0.07942402217213862, 0.10157451415770358, 0.08835391648282587, 0.10539662365521307, 0.09340707491050193, 0.08088354452929003, 0.08986851191989043, 0.08932156897424015]}, "mutation_prompt": null}
{"id": "146f8c1f-46e4-4f8e-9127-4f15cfbc4a7e", "solution": "import numpy as np\n\nclass OptimizedHybridEvolutionaryOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(30, budget // 12)  # Adjusted population size\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, dim))\n        self.velocities = np.random.uniform(-0.3, 0.3, (self.pop_size, dim))\n        self.personal_best_positions = self.population.copy()\n        self.personal_best_values = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evals = 0\n        self.F = 0.5  # Dynamic scaling based on performance\n        self.CR = 0.85  # Increased crossover rate\n        self.omega = 0.3  # Further decreased inertia weight\n        self.phi_p = 1.4  # New cognitive component\n        self.phi_g = 1.2  # New social component\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evals < self.budget:\n            for i in range(self.pop_size):\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), *self.bounds)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                trial_value = func(trial)\n                self.evals += 1\n                if trial_value < self.personal_best_values[i]:\n                    self.personal_best_positions[i] = trial\n                    self.personal_best_values[i] = trial_value\n                if trial_value < self.global_best_value:\n                    self.global_best_value = trial_value\n                    self.global_best_position = trial\n\n            rand_vals = np.random.rand(2, self.pop_size, self.dim)\n            self.velocities = (self.omega * self.velocities +\n                               rand_vals[0] * self.phi_p * (self.personal_best_positions - self.population) +\n                               rand_vals[1] * self.phi_g * (self.global_best_position - self.population))\n            self.population += self.velocities\n            np.clip(self.population, *self.bounds, out=self.population)\n\n        return self.global_best_value\n\n    def evaluate_population(self, func):\n        values = np.apply_along_axis(func, 1, self.population)\n        self.evals += self.pop_size\n        better_mask = values < self.personal_best_values\n        self.personal_best_positions[better_mask] = self.population[better_mask]\n        self.personal_best_values[better_mask] = values[better_mask]\n        min_idx = values.argmin()\n        if values[min_idx] < self.global_best_value:\n            self.global_best_value = values[min_idx]\n            self.global_best_position = self.population[min_idx]", "name": "OptimizedHybridEvolutionaryOptimizer", "description": "Optimized Hybrid Evolutionary Algorithm with dynamic parameter tuning and simplified operations for enhanced performance.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "93ec25af-d4ab-478c-bd84-16d2f1a3f523", "metadata": {"aucs": [0.912989714961851, 0.9154344159030199, 0.911325450575271, 0.920112261021627, 0.9159606971738903, 0.9190393333751533, 0.9251252746319596, 0.9168510819254622, 0.9180727414095686, 0.821281525622317, 0.8253972842544415, 0.8308072565625633, 0.8307421534400337, 0.8200047239068631, 0.8486175101784383, 0.8388280390540042, 0.8380966616211073, 0.8289976796022328, 0.17781937613022003, 0.10090621803673316, 0.18121582229300703, 0.11227345747355633, 0.1337864168885522, 0.12382009210550837, 0.121973562033724, 0.783332814887391, 0.16026541176747433, 0.12385828079907901, 0.12201653796115408, 0.11590172413663946, 0.10501906123460558, 0.11749389021856838, 0.09971846547677488, 0.09694035851695049, 0.1086543633040783, 0.09605616724827482, 0.9820870525736312, 0.9809245554849745, 0.9838143038557996, 0.9801245447311067, 0.9789669318193163, 0.9799697500644702, 0.9853874107467369, 0.9677604968932018, 0.9823772724411416, 0.8162364143955583, 0.8126993461228189, 0.8109252857229121, 0.7803037136485445, 0.8067551535953066, 0.810924029535545, 0.8044327632585909, 0.7919127392177738, 0.7997586939432612, 0.22978357696070695, 0.22897537785902677, 0.2278523661791494, 0.2810708305361017, 0.213551027757528, 0.38029030767962635, 0.1785497998285629, 0.8856369499804064, 0.12114487977025223, 0.2309654729222228, 0.24032225800035756, 0.22373072449355136, 0.12989826527258996, 0.252321447472974, 0.21308466791351477, 0.2357390480203715, 0.2384872787726079, 0.2860154878444545, 0.18961359103232944, 0.22918312561252674, 0.13234967885099902, 0.25115829389050226, 0.23907745093715171, 0.23868364126758002, 0.2722744086036831, 0.2658215189162575, 0.12156302072078418, 0.004111293154636209, 9.999999999998899e-05, 0.056899336759141494, 0.05956394268415299, 9.999999999998899e-05, 0.0733501735671771, 0.03539520516772954, 0.002051652446869223, 0.050292890700608606, 0.04631598223107336, 0.041434056279496145, 0.16542488155211776, 0.040702375411850844, 0.06842747533262739, 0.03350325728829451, 0.034460355046607716, 0.051646012624232074, 0.05312108147532357, 0.03699607291864182, 0.15996099863250934, 0.3309072821253092, 0.30103108750169816, 0.20995452470013243, 0.10182353300360991, 0.08134328784074785, 0.13656117451495153, 0.30881727936665115, 0.15442559533492917, 0.05729823031746217, 0.17543113293600343, 0.011294595408062769, 0.3134491637879607, 0.1590267650431999, 0.18751936189433283, 0.3846703918399308, 0.0606858562647582, 0.6156911776573893, 0.5748045568315758, 0.6445674572967381, 0.6722789355033588, 0.5467431146490538, 0.6177127956909275, 0.6253570064636899, 0.6188360967571986, 0.6489166030912943, 0.11921654133701964, 0.1408340697786985, 0.15812019595772087, 0.0957049231571464, 0.15734820666723048, 0.09803596517886448, 0.11264211444082428, 0.15030002269875364, 0.11590703554456505, 0.44682053539972777, 0.27482770478862895, 0.19289005554912042, 0.4089872981866758, 0.21698823500973485, 0.2937270230311191, 0.25231482371183334, 0.36777763178918355, 0.26821749913509685, 0.7553120633904629, 0.3297933877167738, 0.34449968872079584, 0.5209589585410846, 0.6523156542597031, 0.43620415763752685, 0.4561926463421161, 0.6009663976806334, 0.48454059296396745, 0.24714791461105612, 0.28226591235838605, 0.2921924814909138, 0.3358091616034211, 0.22856409283403023, 0.23106960908495033, 0.38211395971822815, 0.3711861409462256, 0.3001369712505568, 0.2044845130823173, 0.1630799041389046, 0.20010979606207557, 0.23801187171313154, 0.2128941384680333, 0.23080022178824033, 0.261235498191257, 0.20543144639011646, 0.20902055304049327, 0.2108021553985402, 0.19609351236239203, 0.8488278852075777, 0.22680101673975428, 0.8149094032496786, 0.2109200133160537, 0.1922853558802261, 0.19193622771537777, 0.205387462515648, 0.18862841890226878, 0.18712546461916435, 0.165537709856999, 0.15892212559024665, 0.20033289447671976, 0.19951385903990926, 0.9286654034960835, 0.9168579956707474, 0.9288544413790013, 0.7907962597421541, 0.15649744120829856, 0.11231200827338494, 0.212238488569237, 0.6349319877976322, 0.2105604619093463, 0.16682987749593026, 0.10456380628161366, 0.1690675989803111, 0.19069934357892504, 0.18867014252815784, 0.20100968874828418, 0.18264954974759096, 0.1893702638871808, 0.18035043551948204, 0.1854560438784858, 0.1894068246872438, 0.18259593765662252, 0.13569388735828836, 0.07942402217213862, 0.10157451415770358, 0.08835391648282587, 0.10539662365521307, 0.09340707491050193, 0.08088354452929003, 0.08986851191989043, 0.08932156897424015]}, "mutation_prompt": null}
{"id": "12891194-9adf-4d5a-92e3-1d365b609ac3", "solution": "import numpy as np\n\nclass OptimizedHybridEvolutionaryOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(30, budget // 12)  # Adjusted population size\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, dim))\n        self.velocities = np.random.uniform(-0.3, 0.3, (self.pop_size, dim))\n        self.personal_best_positions = self.population.copy()\n        self.personal_best_values = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evals = 0\n        self.F = 0.5  # Dynamic scaling based on performance\n        self.CR = 0.85  # Increased crossover rate\n        self.omega = 0.3  # Further decreased inertia weight\n        self.phi_p = 1.4  # New cognitive component\n        self.phi_g = 1.2  # New social component\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evals < self.budget:\n            for i in range(self.pop_size):\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), *self.bounds)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                trial_value = func(trial)\n                self.evals += 1\n                if trial_value < self.personal_best_values[i]:\n                    self.personal_best_positions[i] = trial\n                    self.personal_best_values[i] = trial_value\n                if trial_value < self.global_best_value:\n                    self.global_best_value = trial_value\n                    self.global_best_position = trial\n\n            rand_vals = np.random.rand(2, self.pop_size, self.dim)\n            self.velocities = (self.omega * self.velocities +\n                               rand_vals[0] * self.phi_p * (self.personal_best_positions - self.population) +\n                               rand_vals[1] * self.phi_g * (self.global_best_position - self.population))\n            self.population += self.velocities\n            np.clip(self.population, *self.bounds, out=self.population)\n\n        return self.global_best_value\n\n    def evaluate_population(self, func):\n        values = np.apply_along_axis(func, 1, self.population)\n        self.evals += self.pop_size\n        better_mask = values < self.personal_best_values\n        self.personal_best_positions[better_mask] = self.population[better_mask]\n        self.personal_best_values[better_mask] = values[better_mask]\n        min_idx = values.argmin()\n        if values[min_idx] < self.global_best_value:\n            self.global_best_value = values[min_idx]\n            self.global_best_position = self.population[min_idx]", "name": "OptimizedHybridEvolutionaryOptimizer", "description": "Optimized Hybrid Evolutionary Algorithm with dynamic parameter tuning and simplified operations for enhanced performance.", "configspace": "", "generation": 40, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "93ec25af-d4ab-478c-bd84-16d2f1a3f523", "metadata": {"aucs": [0.912989714961851, 0.9154344159030199, 0.911325450575271, 0.920112261021627, 0.9159606971738903, 0.9190393333751533, 0.9251252746319596, 0.9168510819254622, 0.9180727414095686, 0.821281525622317, 0.8253972842544415, 0.8308072565625633, 0.8307421534400337, 0.8200047239068631, 0.8486175101784383, 0.8388280390540042, 0.8380966616211073, 0.8289976796022328, 0.17781937613022003, 0.10090621803673316, 0.18121582229300703, 0.11227345747355633, 0.1337864168885522, 0.12382009210550837, 0.121973562033724, 0.783332814887391, 0.16026541176747433, 0.12385828079907901, 0.12201653796115408, 0.11590172413663946, 0.10501906123460558, 0.11749389021856838, 0.09971846547677488, 0.09694035851695049, 0.1086543633040783, 0.09605616724827482, 0.9820870525736312, 0.9809245554849745, 0.9838143038557996, 0.9801245447311067, 0.9789669318193163, 0.9799697500644702, 0.9853874107467369, 0.9677604968932018, 0.9823772724411416, 0.8162364143955583, 0.8126993461228189, 0.8109252857229121, 0.7803037136485445, 0.8067551535953066, 0.810924029535545, 0.8044327632585909, 0.7919127392177738, 0.7997586939432612, 0.22978357696070695, 0.22897537785902677, 0.2278523661791494, 0.2810708305361017, 0.213551027757528, 0.38029030767962635, 0.1785497998285629, 0.8856369499804064, 0.12114487977025223, 0.2309654729222228, 0.24032225800035756, 0.22373072449355136, 0.12989826527258996, 0.252321447472974, 0.21308466791351477, 0.2357390480203715, 0.2384872787726079, 0.2860154878444545, 0.18961359103232944, 0.22918312561252674, 0.13234967885099902, 0.25115829389050226, 0.23907745093715171, 0.23868364126758002, 0.2722744086036831, 0.2658215189162575, 0.12156302072078418, 0.004111293154636209, 9.999999999998899e-05, 0.056899336759141494, 0.05956394268415299, 9.999999999998899e-05, 0.0733501735671771, 0.03539520516772954, 0.002051652446869223, 0.050292890700608606, 0.04631598223107336, 0.041434056279496145, 0.16542488155211776, 0.040702375411850844, 0.06842747533262739, 0.03350325728829451, 0.034460355046607716, 0.051646012624232074, 0.05312108147532357, 0.03699607291864182, 0.15996099863250934, 0.3309072821253092, 0.30103108750169816, 0.20995452470013243, 0.10182353300360991, 0.08134328784074785, 0.13656117451495153, 0.30881727936665115, 0.15442559533492917, 0.05729823031746217, 0.17543113293600343, 0.011294595408062769, 0.3134491637879607, 0.1590267650431999, 0.18751936189433283, 0.3846703918399308, 0.0606858562647582, 0.6156911776573893, 0.5748045568315758, 0.6445674572967381, 0.6722789355033588, 0.5467431146490538, 0.6177127956909275, 0.6253570064636899, 0.6188360967571986, 0.6489166030912943, 0.11921654133701964, 0.1408340697786985, 0.15812019595772087, 0.0957049231571464, 0.15734820666723048, 0.09803596517886448, 0.11264211444082428, 0.15030002269875364, 0.11590703554456505, 0.44682053539972777, 0.27482770478862895, 0.19289005554912042, 0.4089872981866758, 0.21698823500973485, 0.2937270230311191, 0.25231482371183334, 0.36777763178918355, 0.26821749913509685, 0.7553120633904629, 0.3297933877167738, 0.34449968872079584, 0.5209589585410846, 0.6523156542597031, 0.43620415763752685, 0.4561926463421161, 0.6009663976806334, 0.48454059296396745, 0.24714791461105612, 0.28226591235838605, 0.2921924814909138, 0.3358091616034211, 0.22856409283403023, 0.23106960908495033, 0.38211395971822815, 0.3711861409462256, 0.3001369712505568, 0.2044845130823173, 0.1630799041389046, 0.20010979606207557, 0.23801187171313154, 0.2128941384680333, 0.23080022178824033, 0.261235498191257, 0.20543144639011646, 0.20902055304049327, 0.2108021553985402, 0.19609351236239203, 0.8488278852075777, 0.22680101673975428, 0.8149094032496786, 0.2109200133160537, 0.1922853558802261, 0.19193622771537777, 0.205387462515648, 0.18862841890226878, 0.18712546461916435, 0.165537709856999, 0.15892212559024665, 0.20033289447671976, 0.19951385903990926, 0.9286654034960835, 0.9168579956707474, 0.9288544413790013, 0.7907962597421541, 0.15649744120829856, 0.11231200827338494, 0.212238488569237, 0.6349319877976322, 0.2105604619093463, 0.16682987749593026, 0.10456380628161366, 0.1690675989803111, 0.19069934357892504, 0.18867014252815784, 0.20100968874828418, 0.18264954974759096, 0.1893702638871808, 0.18035043551948204, 0.1854560438784858, 0.1894068246872438, 0.18259593765662252, 0.13569388735828836, 0.07942402217213862, 0.10157451415770358, 0.08835391648282587, 0.10539662365521307, 0.09340707491050193, 0.08088354452929003, 0.08986851191989043, 0.08932156897424015]}, "mutation_prompt": null}
{"id": "e07d1435-043f-494b-a8c6-2edea7eb5022", "solution": "import numpy as np\n\nclass EnhancedHybridEvolutionaryOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(25, budget // 10)  # Adjusted population size\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, dim))\n        self.velocities = np.random.uniform(-0.25, 0.25, (self.pop_size, dim))\n        self.personal_best_positions = self.population.copy()\n        self.personal_best_values = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evals = 0\n        self.F = 0.6  # Adaptive scaling factor\n        self.CR = 0.9  # Further increased crossover rate\n        self.omega = 0.2  # Reduced inertia weight for faster convergence\n        self.phi_p = 1.6  # Enhanced cognitive component\n        self.phi_g = 1.4  # Enhanced social component\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evals < self.budget:\n            for i in range(self.pop_size):\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), *self.bounds)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                trial_value = func(trial)\n                self.evals += 1\n                if trial_value < self.personal_best_values[i]:\n                    self.personal_best_positions[i] = trial\n                    self.personal_best_values[i] = trial_value\n                if trial_value < self.global_best_value:\n                    self.global_best_value = trial_value\n                    self.global_best_position = trial\n\n            rand_vals = np.random.rand(2, self.pop_size, self.dim)\n            self.velocities = (self.omega * self.velocities +\n                               rand_vals[0] * self.phi_p * (self.personal_best_positions - self.population) +\n                               rand_vals[1] * self.phi_g * (self.global_best_position - self.population))\n            np.clip(self.population + self.velocities, *self.bounds, out=self.population)\n\n        return self.global_best_value\n\n    def evaluate_population(self, func):\n        values = np.apply_along_axis(func, 1, self.population)\n        self.evals += self.pop_size\n        better_mask = values < self.personal_best_values\n        np.copyto(self.personal_best_positions, self.population, where=better_mask[:, np.newaxis])\n        np.copyto(self.personal_best_values, values, where=better_mask)\n        min_idx = values.argmin()\n        if values[min_idx] < self.global_best_value:\n            self.global_best_value = values[min_idx]\n            self.global_best_position = self.population[min_idx]", "name": "EnhancedHybridEvolutionaryOptimizer", "description": "Enhanced Hybrid Evolutionary Optimizer with adaptive parameter updates and streamlined operations for improved efficiency.", "configspace": "", "generation": 69, "fitness": 0.3585218071589187, "feedback": "The algorithm EnhancedHybridEvolutionaryOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.30.", "error": "", "parent_id": "93ec25af-d4ab-478c-bd84-16d2f1a3f523", "metadata": {"aucs": [0.9100591978626473, 0.9044994117948806, 0.9154336842636235, 0.9060103639050422, 0.9061391613313525, 0.9186077209996638, 0.9056705520135132, 0.9085925349984292, 0.9060124343834618, 0.7730828893847684, 0.8290502310361922, 0.8433864961489217, 0.8312245812080997, 0.8340442826557538, 0.8318469290819372, 0.8376990055353755, 0.8365199384611939, 0.8156869958531187, 0.1406765849888887, 0.140506372375391, 0.18353521923892546, 0.15129937916775782, 0.1046874889256807, 0.11439911781901957, 0.15629979223610813, 0.15611616321745403, 0.1561052925699099, 0.14013839286592755, 0.17452573535150973, 0.11540495731223765, 0.1156206018306557, 0.10831642030496424, 0.15526460281379828, 0.11842277911435717, 0.12019151191090038, 0.1389970741807368, 0.9844978500259234, 0.9878583520742972, 0.9860396912703203, 0.9765340157415099, 0.99020637002614, 0.9730286692477783, 0.9881108867731351, 0.9772940355636521, 0.979675598527954, 0.8163261296977598, 0.7927101800514582, 0.7987382064052436, 0.7781791506676524, 0.783191372968221, 0.7780827572341735, 0.7781443267791177, 0.7742847819580602, 0.7998653518138723, 0.22584838531396523, 0.16774631889481229, 0.37906250135893227, 0.3611115926407116, 0.8798075339726283, 0.9153577231389178, 0.24003600712813555, 0.22101330361244054, 0.23764838807369149, 0.26004701558544363, 0.23540159031490016, 0.24989713900847632, 0.22680064384768517, 0.251642271368276, 0.2180049044469704, 0.23205668148330483, 0.13275316372557477, 0.2285539082627912, 0.2431205024809906, 0.24993365464160966, 0.13242125883287714, 0.25215713971093656, 0.27298122456243046, 0.24847233289289583, 0.13379038283877742, 0.2655833487135125, 0.13045599196106739, 0.0002560216272237126, 9.999999999998899e-05, 0.003126293070108699, 0.0059105933928934595, 9.999999999998899e-05, 0.04523079896543514, 0.04723932887017834, 0.07902570418786214, 9.999999999998899e-05, 0.050122098842234064, 0.04015492592906611, 0.08271742895951761, 0.027306887879120167, 0.06508677800414897, 0.02049929320125743, 0.09713586991531342, 0.15712638371921317, 0.11022232352414285, 0.06576639221505198, 0.1519460464489928, 0.12726867277121545, 0.10716522162129183, 0.09709840064680808, 0.08131663224438523, 0.10436034858926801, 0.12132644139856708, 0.16206841846628484, 0.1711229837836591, 0.09204838505583868, 0.08204523903971894, 0.168560471686529, 0.32234421286555137, 0.20436819976602005, 0.11151399958606367, 0.164371841347285, 0.18502712077387518, 0.5749047734775052, 0.6228785039767997, 0.5667034018060592, 0.565140735273234, 0.5730399749906032, 0.5845038944758993, 0.6009485646662722, 0.6226296560156406, 0.6064738294828372, 0.14341250325562938, 0.13589840746982174, 0.13953575619146885, 0.18581627069944018, 0.15393706432096477, 0.15453106535274497, 0.14324418264310756, 0.15579236218308412, 0.15417209268601395, 0.18325476114447747, 0.1983344519363387, 0.5666071466637517, 0.20530950170253925, 0.2860054254410084, 0.2039879652841594, 0.19213878040529198, 0.4694021457172788, 0.4823459145296156, 0.41753911750022, 0.5278416303442346, 0.32891811038756946, 0.3579442904603769, 0.729749454947026, 0.43246987967548667, 0.6014523500612458, 0.8006513685740014, 0.7663538699945746, 0.3532957097057746, 0.4767899730772923, 0.3895938908436154, 0.24297016192043597, 0.3212427050482427, 0.3250317590787525, 0.3699037912019516, 0.31708398080009825, 0.24846584304828434, 0.252456253590722, 0.21983366961517237, 0.2090210428309578, 0.2038946070676937, 0.22702518176653774, 0.2109483599633346, 0.21367448521501442, 0.23479255198876559, 0.20676407174588007, 0.843407571921244, 0.18573794943702793, 0.22205281561123413, 0.18903397501048458, 0.20803824406741, 0.20545068398197885, 0.19673041589905482, 0.20683748299019444, 0.22465888769340714, 0.18693136517037878, 0.16452066724486636, 0.9197008978016044, 0.16966611035877666, 0.8911130272184961, 0.20100485603065887, 0.9160888284160961, 0.916277188214941, 0.9345571638639282, 0.766171361138878, 0.15625654720548954, 0.6463990092759608, 0.21153281681127678, 0.1681391546894433, 0.2109946427634498, 0.16787466898611236, 0.15605983093474807, 0.21010576527728553, 0.17069332062853648, 0.1787636336078573, 0.18434060164655353, 0.1880303769609305, 0.18128583757148276, 0.19361805152300893, 0.19349239690934605, 0.1732346420185279, 0.19106264881543777, 0.09644062326573566, 0.08675541689021993, 0.09036361081409816, 0.09243727137110924, 0.09190735958825058, 0.08809183170705459, 0.09734913181094307, 0.12875323683854967, 0.09236489292419214]}, "mutation_prompt": null}
{"id": "8e8ad864-aadf-4889-9ed8-7d0df61fa739", "solution": "import numpy as np\n\nclass EnhancedHybridEvolutionaryOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(25, budget // 10)  # Adjusted population size\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, dim))\n        self.velocities = np.random.uniform(-0.25, 0.25, (self.pop_size, dim))\n        self.personal_best_positions = self.population.copy()\n        self.personal_best_values = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evals = 0\n        self.F = 0.6  # Adaptive scaling factor\n        self.CR = 0.9  # Further increased crossover rate\n        self.omega = 0.2  # Reduced inertia weight for faster convergence\n        self.phi_p = 1.6  # Enhanced cognitive component\n        self.phi_g = 1.4  # Enhanced social component\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evals < self.budget:\n            for i in range(self.pop_size):\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), *self.bounds)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                trial_value = func(trial)\n                self.evals += 1\n                if trial_value < self.personal_best_values[i]:\n                    self.personal_best_positions[i] = trial\n                    self.personal_best_values[i] = trial_value\n                if trial_value < self.global_best_value:\n                    self.global_best_value = trial_value\n                    self.global_best_position = trial\n\n            rand_vals = np.random.rand(2, self.pop_size, self.dim)\n            self.velocities = (self.omega * self.velocities +\n                               rand_vals[0] * self.phi_p * (self.personal_best_positions - self.population) +\n                               rand_vals[1] * self.phi_g * (self.global_best_position - self.population))\n            np.clip(self.population + self.velocities, *self.bounds, out=self.population)\n\n        return self.global_best_value\n\n    def evaluate_population(self, func):\n        values = np.apply_along_axis(func, 1, self.population)\n        self.evals += self.pop_size\n        better_mask = values < self.personal_best_values\n        np.copyto(self.personal_best_positions, self.population, where=better_mask[:, np.newaxis])\n        np.copyto(self.personal_best_values, values, where=better_mask)\n        min_idx = values.argmin()\n        if values[min_idx] < self.global_best_value:\n            self.global_best_value = values[min_idx]\n            self.global_best_position = self.population[min_idx]", "name": "EnhancedHybridEvolutionaryOptimizer", "description": "Enhanced Hybrid Evolutionary Optimizer with adaptive parameter updates and streamlined operations for improved efficiency.", "configspace": "", "generation": 70, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e07d1435-043f-494b-a8c6-2edea7eb5022", "metadata": {"aucs": [0.9100591978626473, 0.9044994117948806, 0.9154336842636235, 0.9060103639050422, 0.9061391613313525, 0.9186077209996638, 0.9056705520135132, 0.9085925349984292, 0.9060124343834618, 0.7730828893847684, 0.8290502310361922, 0.8433864961489217, 0.8312245812080997, 0.8340442826557538, 0.8318469290819372, 0.8376990055353755, 0.8365199384611939, 0.8156869958531187, 0.1406765849888887, 0.140506372375391, 0.18353521923892546, 0.15129937916775782, 0.1046874889256807, 0.11439911781901957, 0.15629979223610813, 0.15611616321745403, 0.1561052925699099, 0.14013839286592755, 0.17452573535150973, 0.11540495731223765, 0.1156206018306557, 0.10831642030496424, 0.15526460281379828, 0.11842277911435717, 0.12019151191090038, 0.1389970741807368, 0.9844978500259234, 0.9878583520742972, 0.9860396912703203, 0.9765340157415099, 0.99020637002614, 0.9730286692477783, 0.9881108867731351, 0.9772940355636521, 0.979675598527954, 0.8163261296977598, 0.7927101800514582, 0.7987382064052436, 0.7781791506676524, 0.783191372968221, 0.7780827572341735, 0.7781443267791177, 0.7742847819580602, 0.7998653518138723, 0.22584838531396523, 0.16774631889481229, 0.37906250135893227, 0.3611115926407116, 0.8798075339726283, 0.9153577231389178, 0.24003600712813555, 0.22101330361244054, 0.23764838807369149, 0.26004701558544363, 0.23540159031490016, 0.24989713900847632, 0.22680064384768517, 0.251642271368276, 0.2180049044469704, 0.23205668148330483, 0.13275316372557477, 0.2285539082627912, 0.2431205024809906, 0.24993365464160966, 0.13242125883287714, 0.25215713971093656, 0.27298122456243046, 0.24847233289289583, 0.13379038283877742, 0.2655833487135125, 0.13045599196106739, 0.0002560216272237126, 9.999999999998899e-05, 0.003126293070108699, 0.0059105933928934595, 9.999999999998899e-05, 0.04523079896543514, 0.04723932887017834, 0.07902570418786214, 9.999999999998899e-05, 0.050122098842234064, 0.04015492592906611, 0.08271742895951761, 0.027306887879120167, 0.06508677800414897, 0.02049929320125743, 0.09713586991531342, 0.15712638371921317, 0.11022232352414285, 0.06576639221505198, 0.1519460464489928, 0.12726867277121545, 0.10716522162129183, 0.09709840064680808, 0.08131663224438523, 0.10436034858926801, 0.12132644139856708, 0.16206841846628484, 0.1711229837836591, 0.09204838505583868, 0.08204523903971894, 0.168560471686529, 0.32234421286555137, 0.20436819976602005, 0.11151399958606367, 0.164371841347285, 0.18502712077387518, 0.5749047734775052, 0.6228785039767997, 0.5667034018060592, 0.565140735273234, 0.5730399749906032, 0.5845038944758993, 0.6009485646662722, 0.6226296560156406, 0.6064738294828372, 0.14341250325562938, 0.13589840746982174, 0.13953575619146885, 0.18581627069944018, 0.15393706432096477, 0.15453106535274497, 0.14324418264310756, 0.15579236218308412, 0.15417209268601395, 0.18325476114447747, 0.1983344519363387, 0.5666071466637517, 0.20530950170253925, 0.2860054254410084, 0.2039879652841594, 0.19213878040529198, 0.4694021457172788, 0.4823459145296156, 0.41753911750022, 0.5278416303442346, 0.32891811038756946, 0.3579442904603769, 0.729749454947026, 0.43246987967548667, 0.6014523500612458, 0.8006513685740014, 0.7663538699945746, 0.3532957097057746, 0.4767899730772923, 0.3895938908436154, 0.24297016192043597, 0.3212427050482427, 0.3250317590787525, 0.3699037912019516, 0.31708398080009825, 0.24846584304828434, 0.252456253590722, 0.21983366961517237, 0.2090210428309578, 0.2038946070676937, 0.22702518176653774, 0.2109483599633346, 0.21367448521501442, 0.23479255198876559, 0.20676407174588007, 0.843407571921244, 0.18573794943702793, 0.22205281561123413, 0.18903397501048458, 0.20803824406741, 0.20545068398197885, 0.19673041589905482, 0.20683748299019444, 0.22465888769340714, 0.18693136517037878, 0.16452066724486636, 0.9197008978016044, 0.16966611035877666, 0.8911130272184961, 0.20100485603065887, 0.9160888284160961, 0.916277188214941, 0.9345571638639282, 0.766171361138878, 0.15625654720548954, 0.6463990092759608, 0.21153281681127678, 0.1681391546894433, 0.2109946427634498, 0.16787466898611236, 0.15605983093474807, 0.21010576527728553, 0.17069332062853648, 0.1787636336078573, 0.18434060164655353, 0.1880303769609305, 0.18128583757148276, 0.19361805152300893, 0.19349239690934605, 0.1732346420185279, 0.19106264881543777, 0.09644062326573566, 0.08675541689021993, 0.09036361081409816, 0.09243727137110924, 0.09190735958825058, 0.08809183170705459, 0.09734913181094307, 0.12875323683854967, 0.09236489292419214]}, "mutation_prompt": null}
{"id": "f45db210-5535-4d64-941d-77c03fd6cfe0", "solution": "import numpy as np\n\nclass EnhancedHybridEvolutionaryOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(25, budget // 10)  # Adjusted population size\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, dim))\n        self.velocities = np.random.uniform(-0.25, 0.25, (self.pop_size, dim))\n        self.personal_best_positions = self.population.copy()\n        self.personal_best_values = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evals = 0\n        self.F = 0.6  # Adaptive scaling factor\n        self.CR = 0.9  # Further increased crossover rate\n        self.omega = 0.2  # Reduced inertia weight for faster convergence\n        self.phi_p = 1.6  # Enhanced cognitive component\n        self.phi_g = 1.4  # Enhanced social component\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evals < self.budget:\n            for i in range(self.pop_size):\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), *self.bounds)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                trial_value = func(trial)\n                self.evals += 1\n                if trial_value < self.personal_best_values[i]:\n                    self.personal_best_positions[i] = trial\n                    self.personal_best_values[i] = trial_value\n                if trial_value < self.global_best_value:\n                    self.global_best_value = trial_value\n                    self.global_best_position = trial\n\n            rand_vals = np.random.rand(2, self.pop_size, self.dim)\n            self.velocities = (self.omega * self.velocities +\n                               rand_vals[0] * self.phi_p * (self.personal_best_positions - self.population) +\n                               rand_vals[1] * self.phi_g * (self.global_best_position - self.population))\n            np.clip(self.population + self.velocities, *self.bounds, out=self.population)\n\n        return self.global_best_value\n\n    def evaluate_population(self, func):\n        values = np.apply_along_axis(func, 1, self.population)\n        self.evals += self.pop_size\n        better_mask = values < self.personal_best_values\n        np.copyto(self.personal_best_positions, self.population, where=better_mask[:, np.newaxis])\n        np.copyto(self.personal_best_values, values, where=better_mask)\n        min_idx = values.argmin()\n        if values[min_idx] < self.global_best_value:\n            self.global_best_value = values[min_idx]\n            self.global_best_position = self.population[min_idx]", "name": "EnhancedHybridEvolutionaryOptimizer", "description": "Enhanced Hybrid Evolutionary Optimizer with adaptive parameter updates and streamlined operations for improved efficiency.", "configspace": "", "generation": 70, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e07d1435-043f-494b-a8c6-2edea7eb5022", "metadata": {"aucs": [0.9100591978626473, 0.9044994117948806, 0.9154336842636235, 0.9060103639050422, 0.9061391613313525, 0.9186077209996638, 0.9056705520135132, 0.9085925349984292, 0.9060124343834618, 0.7730828893847684, 0.8290502310361922, 0.8433864961489217, 0.8312245812080997, 0.8340442826557538, 0.8318469290819372, 0.8376990055353755, 0.8365199384611939, 0.8156869958531187, 0.1406765849888887, 0.140506372375391, 0.18353521923892546, 0.15129937916775782, 0.1046874889256807, 0.11439911781901957, 0.15629979223610813, 0.15611616321745403, 0.1561052925699099, 0.14013839286592755, 0.17452573535150973, 0.11540495731223765, 0.1156206018306557, 0.10831642030496424, 0.15526460281379828, 0.11842277911435717, 0.12019151191090038, 0.1389970741807368, 0.9844978500259234, 0.9878583520742972, 0.9860396912703203, 0.9765340157415099, 0.99020637002614, 0.9730286692477783, 0.9881108867731351, 0.9772940355636521, 0.979675598527954, 0.8163261296977598, 0.7927101800514582, 0.7987382064052436, 0.7781791506676524, 0.783191372968221, 0.7780827572341735, 0.7781443267791177, 0.7742847819580602, 0.7998653518138723, 0.22584838531396523, 0.16774631889481229, 0.37906250135893227, 0.3611115926407116, 0.8798075339726283, 0.9153577231389178, 0.24003600712813555, 0.22101330361244054, 0.23764838807369149, 0.26004701558544363, 0.23540159031490016, 0.24989713900847632, 0.22680064384768517, 0.251642271368276, 0.2180049044469704, 0.23205668148330483, 0.13275316372557477, 0.2285539082627912, 0.2431205024809906, 0.24993365464160966, 0.13242125883287714, 0.25215713971093656, 0.27298122456243046, 0.24847233289289583, 0.13379038283877742, 0.2655833487135125, 0.13045599196106739, 0.0002560216272237126, 9.999999999998899e-05, 0.003126293070108699, 0.0059105933928934595, 9.999999999998899e-05, 0.04523079896543514, 0.04723932887017834, 0.07902570418786214, 9.999999999998899e-05, 0.050122098842234064, 0.04015492592906611, 0.08271742895951761, 0.027306887879120167, 0.06508677800414897, 0.02049929320125743, 0.09713586991531342, 0.15712638371921317, 0.11022232352414285, 0.06576639221505198, 0.1519460464489928, 0.12726867277121545, 0.10716522162129183, 0.09709840064680808, 0.08131663224438523, 0.10436034858926801, 0.12132644139856708, 0.16206841846628484, 0.1711229837836591, 0.09204838505583868, 0.08204523903971894, 0.168560471686529, 0.32234421286555137, 0.20436819976602005, 0.11151399958606367, 0.164371841347285, 0.18502712077387518, 0.5749047734775052, 0.6228785039767997, 0.5667034018060592, 0.565140735273234, 0.5730399749906032, 0.5845038944758993, 0.6009485646662722, 0.6226296560156406, 0.6064738294828372, 0.14341250325562938, 0.13589840746982174, 0.13953575619146885, 0.18581627069944018, 0.15393706432096477, 0.15453106535274497, 0.14324418264310756, 0.15579236218308412, 0.15417209268601395, 0.18325476114447747, 0.1983344519363387, 0.5666071466637517, 0.20530950170253925, 0.2860054254410084, 0.2039879652841594, 0.19213878040529198, 0.4694021457172788, 0.4823459145296156, 0.41753911750022, 0.5278416303442346, 0.32891811038756946, 0.3579442904603769, 0.729749454947026, 0.43246987967548667, 0.6014523500612458, 0.8006513685740014, 0.7663538699945746, 0.3532957097057746, 0.4767899730772923, 0.3895938908436154, 0.24297016192043597, 0.3212427050482427, 0.3250317590787525, 0.3699037912019516, 0.31708398080009825, 0.24846584304828434, 0.252456253590722, 0.21983366961517237, 0.2090210428309578, 0.2038946070676937, 0.22702518176653774, 0.2109483599633346, 0.21367448521501442, 0.23479255198876559, 0.20676407174588007, 0.843407571921244, 0.18573794943702793, 0.22205281561123413, 0.18903397501048458, 0.20803824406741, 0.20545068398197885, 0.19673041589905482, 0.20683748299019444, 0.22465888769340714, 0.18693136517037878, 0.16452066724486636, 0.9197008978016044, 0.16966611035877666, 0.8911130272184961, 0.20100485603065887, 0.9160888284160961, 0.916277188214941, 0.9345571638639282, 0.766171361138878, 0.15625654720548954, 0.6463990092759608, 0.21153281681127678, 0.1681391546894433, 0.2109946427634498, 0.16787466898611236, 0.15605983093474807, 0.21010576527728553, 0.17069332062853648, 0.1787636336078573, 0.18434060164655353, 0.1880303769609305, 0.18128583757148276, 0.19361805152300893, 0.19349239690934605, 0.1732346420185279, 0.19106264881543777, 0.09644062326573566, 0.08675541689021993, 0.09036361081409816, 0.09243727137110924, 0.09190735958825058, 0.08809183170705459, 0.09734913181094307, 0.12875323683854967, 0.09236489292419214]}, "mutation_prompt": null}
{"id": "4b1d7046-99cc-40db-b52f-8301d6a1b17f", "solution": "import numpy as np\n\nclass AdvancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(30, budget // 10)  # Adjusted population size\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, dim))\n        self.personal_best_positions = self.population.copy()\n        self.personal_best_values = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evals = 0\n        self.F = 0.5  # More adaptive scaling factor\n        self.CR = 0.8  # Refined crossover rate\n        self.omega = 0.1  # Adjust inertia weight for stability\n        self.phi_p = 1.5  # Adaptive cognitive component\n        self.phi_g = 1.3  # Adaptive social component\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evals < self.budget:\n            for i in range(self.pop_size):\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), *self.bounds)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                trial_value = func(trial)\n                self.evals += 1\n                if trial_value < self.personal_best_values[i]:\n                    self.personal_best_positions[i] = trial\n                    self.personal_best_values[i] = trial_value\n                    if trial_value < self.global_best_value:\n                        self.global_best_value = trial_value\n                        self.global_best_position = trial\n\n            if np.random.rand() < 0.1:  # Introduce diversity\n                self.population += np.random.uniform(-0.1, 0.1, (self.pop_size, self.dim))\n\n            rand_vals = np.random.rand(2, self.pop_size, self.dim)\n            self.population += (self.omega * rand_vals[0] * (self.personal_best_positions - self.population) +\n                                self.omega * rand_vals[1] * (self.global_best_position - self.population))\n            np.clip(self.population, *self.bounds, out=self.population)\n\n        return self.global_best_value\n\n    def evaluate_population(self, func):\n        values = np.apply_along_axis(func, 1, self.population)\n        self.evals += self.pop_size\n        better_mask = values < self.personal_best_values\n        np.copyto(self.personal_best_positions, self.population, where=better_mask[:, np.newaxis])\n        np.copyto(self.personal_best_values, values, where=better_mask)\n        min_idx = np.argmin(values)\n        if values[min_idx] < self.global_best_value:\n            self.global_best_value = values[min_idx]\n            self.global_best_position = self.population[min_idx]", "name": "AdvancedAdaptiveDifferentialEvolution", "description": "Advanced Adaptive Differential Evolution optimizer with population diversity control and efficient evaluations for enhanced performance.", "configspace": "", "generation": 72, "fitness": 0.18629640856991628, "feedback": "The algorithm AdvancedAdaptiveDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.15.", "error": "", "parent_id": "e07d1435-043f-494b-a8c6-2edea7eb5022", "metadata": {"aucs": [0.6891252304305129, 0.6240330104883817, 0.5910829945326614, 0.2682365772615267, 0.4626838891204268, 0.5549897870763532, 0.4960964198082415, 0.5887252528140294, 0.2754788845933589, 0.022333522902518554, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03387614608254608, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.085724251350351, 0.13361274657504674, 0.08555668632675939, 0.09913208060303569, 0.15048624413668021, 0.1024810776127788, 0.11676338335945069, 0.1272463302562732, 0.1080618559857397, 0.09751838643670929, 0.0874564168083618, 0.07344203168615937, 0.10675426233069485, 0.08854494206114927, 0.06919071859891224, 0.08987541207264127, 0.098922838461448, 0.07996058112555493, 0.09028975830647412, 0.10073385407762836, 0.08800148279273123, 0.086721207136355, 0.09721570649072286, 0.09523700228682686, 0.09828664571225576, 0.08340644253563445, 0.09359835995547927, 0.1695716821426706, 0.12476132705339538, 0.16124963136431236, 0.1313806110232596, 0.16949623118919077, 0.14534434256298923, 0.25516321270625575, 0.13130025914881038, 0.08335726153853606, 0.48341431519400346, 0.2036277452765688, 0.16834392172369594, 0.2713045444122125, 0.17490760658924787, 0.2082719470539559, 0.1504866082137527, 0.15674074577878527, 0.17596798053235874, 0.22187494651284223, 0.15910959779090061, 0.249918578658213, 0.012439161050332381, 0.16448290845457902, 0.1266250482990301, 0.253591246466803, 0.2934021278951904, 0.18429074424368652, 0.14954953352968736, 0.14382867079709882, 0.12878057325109782, 0.1475910061052833, 0.16584437198189406, 0.1515826996447035, 0.14953035977378226, 0.1588465917909736, 0.1510591796295716, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014243057451176933, 0.15050816587581461, 0.007030117168692396, 0.0006781069820802621, 9.999999999998899e-05, 0.10370018113936563, 0.0863046289611159, 0.09489801232323458, 0.20270909862371322, 0.05307533186494495, 0.05939986942885789, 0.050167342954136274, 0.1973999323290948, 0.1468791936981152, 0.09642145873801167, 0.025045981365497738, 0.11189247805375102, 0.08734559550428422, 0.12286942336652174, 0.09743374939084892, 0.05150870709779887, 0.12149344318422395, 0.11593296786614227, 0.014725627430200783, 0.06715069927607364, 0.13195281669589043, 0.07278271478469123, 0.010040824331415732, 0.14871562290039253, 0.0853220248632528, 0.08094478157004781, 0.16946583346778166, 0.07751315418420657, 0.45910196575331375, 0.4817830058567304, 0.4489647200991249, 0.4394876164249957, 0.38412563173961645, 0.42892568996914837, 0.4432199917626888, 0.525364406889153, 0.5092256459563387, 0.07134499185931342, 0.10366933914412224, 0.034583834680665504, 0.14958737404463007, 0.09409646943852168, 0.14769124665460454, 0.09276884520415674, 0.17169669328103976, 0.08082087489290624, 0.20318761561765897, 0.2824944054224793, 0.1833303284000093, 0.22927281269865785, 0.23453586382410874, 0.18529402396814798, 0.19022438364096317, 0.20588133140082387, 0.23583306039211516, 0.23370009684770854, 0.25433347637137627, 0.22063161661781583, 0.4202190364887667, 0.37258480327859567, 0.27426569776228893, 0.17721160675397785, 0.26222763329412724, 0.2013980937901947, 0.2475085465373038, 0.21528399308987856, 0.1671477146536634, 0.19428796768804912, 0.2722048985539154, 0.2188044072649712, 0.17903655058800705, 0.21967169642440898, 0.14033249035388473, 0.26829883693382117, 0.252052007910917, 0.22405517324580337, 0.2570412688145369, 0.22984834744355753, 0.25045153479468807, 0.22491645726756526, 0.2345800498681151, 0.2268974842625584, 0.16453635944210332, 0.18015469617220425, 0.1686725147048448, 0.17606442992482862, 0.18155095048851566, 0.1737297690601266, 0.163974093185835, 0.19318137844170225, 0.17312255022325518, 0.18427670328097645, 0.18671656458186703, 0.18500866379733938, 0.8517475826723083, 0.1820041116425637, 0.19615118877824056, 0.6981837490017377, 0.16427718515231593, 0.12055062131262217, 0.7465690179864543, 0.1534329636670957, 0.46325539866453025, 0.45860031183300176, 0.1913083569962971, 0.6219660401993515, 0.2685168811178884, 0.270898697963713, 0.25377501389642043, 0.1872484570246561, 0.18308402472779395, 0.18466385653382722, 0.20914702899256088, 0.20476478043825208, 0.17923891679052018, 0.20222085167711423, 0.17876972957317883, 0.17805079490676268, 0.09175457674611243, 0.09407864592463333, 0.08023334409004945, 0.08648301040059592, 0.10047038711342116, 0.08686791907083757, 0.12312714721646512, 0.08578776434657098, 0.08173288298043047]}, "mutation_prompt": null}
{"id": "51145be6-cb18-43b3-b304-bc2e7cc0bb28", "solution": "import numpy as np\n\nclass EnhancedHybridEvolutionaryOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(25, budget // 10)  # Adjusted population size\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, dim))\n        self.velocities = np.random.uniform(-0.25, 0.25, (self.pop_size, dim))\n        self.personal_best_positions = self.population.copy()\n        self.personal_best_values = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evals = 0\n        self.F = 0.6  # Adaptive scaling factor\n        self.CR = 0.9  # Further increased crossover rate\n        self.omega = 0.2  # Reduced inertia weight for faster convergence\n        self.phi_p = 1.6  # Enhanced cognitive component\n        self.phi_g = 1.4  # Enhanced social component\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evals < self.budget:\n            for i in range(self.pop_size):\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), *self.bounds)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                trial_value = func(trial)\n                self.evals += 1\n                if trial_value < self.personal_best_values[i]:\n                    self.personal_best_positions[i] = trial\n                    self.personal_best_values[i] = trial_value\n                if trial_value < self.global_best_value:\n                    self.global_best_value = trial_value\n                    self.global_best_position = trial\n\n            rand_vals = np.random.rand(2, self.pop_size, self.dim)\n            self.velocities = (self.omega * self.velocities +\n                               rand_vals[0] * self.phi_p * (self.personal_best_positions - self.population) +\n                               rand_vals[1] * self.phi_g * (self.global_best_position - self.population))\n            np.clip(self.population + self.velocities, *self.bounds, out=self.population)\n\n        return self.global_best_value\n\n    def evaluate_population(self, func):\n        values = np.apply_along_axis(func, 1, self.population)\n        self.evals += self.pop_size\n        better_mask = values < self.personal_best_values\n        np.copyto(self.personal_best_positions, self.population, where=better_mask[:, np.newaxis])\n        np.copyto(self.personal_best_values, values, where=better_mask)\n        min_idx = values.argmin()\n        if values[min_idx] < self.global_best_value:\n            self.global_best_value = values[min_idx]\n            self.global_best_position = self.population[min_idx]", "name": "EnhancedHybridEvolutionaryOptimizer", "description": "Enhanced Hybrid Evolutionary Optimizer with adaptive parameter updates and streamlined operations for improved efficiency.", "configspace": "", "generation": 70, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e07d1435-043f-494b-a8c6-2edea7eb5022", "metadata": {"aucs": [0.9100591978626473, 0.9044994117948806, 0.9154336842636235, 0.9060103639050422, 0.9061391613313525, 0.9186077209996638, 0.9056705520135132, 0.9085925349984292, 0.9060124343834618, 0.7730828893847684, 0.8290502310361922, 0.8433864961489217, 0.8312245812080997, 0.8340442826557538, 0.8318469290819372, 0.8376990055353755, 0.8365199384611939, 0.8156869958531187, 0.1406765849888887, 0.140506372375391, 0.18353521923892546, 0.15129937916775782, 0.1046874889256807, 0.11439911781901957, 0.15629979223610813, 0.15611616321745403, 0.1561052925699099, 0.14013839286592755, 0.17452573535150973, 0.11540495731223765, 0.1156206018306557, 0.10831642030496424, 0.15526460281379828, 0.11842277911435717, 0.12019151191090038, 0.1389970741807368, 0.9844978500259234, 0.9878583520742972, 0.9860396912703203, 0.9765340157415099, 0.99020637002614, 0.9730286692477783, 0.9881108867731351, 0.9772940355636521, 0.979675598527954, 0.8163261296977598, 0.7927101800514582, 0.7987382064052436, 0.7781791506676524, 0.783191372968221, 0.7780827572341735, 0.7781443267791177, 0.7742847819580602, 0.7998653518138723, 0.22584838531396523, 0.16774631889481229, 0.37906250135893227, 0.3611115926407116, 0.8798075339726283, 0.9153577231389178, 0.24003600712813555, 0.22101330361244054, 0.23764838807369149, 0.26004701558544363, 0.23540159031490016, 0.24989713900847632, 0.22680064384768517, 0.251642271368276, 0.2180049044469704, 0.23205668148330483, 0.13275316372557477, 0.2285539082627912, 0.2431205024809906, 0.24993365464160966, 0.13242125883287714, 0.25215713971093656, 0.27298122456243046, 0.24847233289289583, 0.13379038283877742, 0.2655833487135125, 0.13045599196106739, 0.0002560216272237126, 9.999999999998899e-05, 0.003126293070108699, 0.0059105933928934595, 9.999999999998899e-05, 0.04523079896543514, 0.04723932887017834, 0.07902570418786214, 9.999999999998899e-05, 0.050122098842234064, 0.04015492592906611, 0.08271742895951761, 0.027306887879120167, 0.06508677800414897, 0.02049929320125743, 0.09713586991531342, 0.15712638371921317, 0.11022232352414285, 0.06576639221505198, 0.1519460464489928, 0.12726867277121545, 0.10716522162129183, 0.09709840064680808, 0.08131663224438523, 0.10436034858926801, 0.12132644139856708, 0.16206841846628484, 0.1711229837836591, 0.09204838505583868, 0.08204523903971894, 0.168560471686529, 0.32234421286555137, 0.20436819976602005, 0.11151399958606367, 0.164371841347285, 0.18502712077387518, 0.5749047734775052, 0.6228785039767997, 0.5667034018060592, 0.565140735273234, 0.5730399749906032, 0.5845038944758993, 0.6009485646662722, 0.6226296560156406, 0.6064738294828372, 0.14341250325562938, 0.13589840746982174, 0.13953575619146885, 0.18581627069944018, 0.15393706432096477, 0.15453106535274497, 0.14324418264310756, 0.15579236218308412, 0.15417209268601395, 0.18325476114447747, 0.1983344519363387, 0.5666071466637517, 0.20530950170253925, 0.2860054254410084, 0.2039879652841594, 0.19213878040529198, 0.4694021457172788, 0.4823459145296156, 0.41753911750022, 0.5278416303442346, 0.32891811038756946, 0.3579442904603769, 0.729749454947026, 0.43246987967548667, 0.6014523500612458, 0.8006513685740014, 0.7663538699945746, 0.3532957097057746, 0.4767899730772923, 0.3895938908436154, 0.24297016192043597, 0.3212427050482427, 0.3250317590787525, 0.3699037912019516, 0.31708398080009825, 0.24846584304828434, 0.252456253590722, 0.21983366961517237, 0.2090210428309578, 0.2038946070676937, 0.22702518176653774, 0.2109483599633346, 0.21367448521501442, 0.23479255198876559, 0.20676407174588007, 0.843407571921244, 0.18573794943702793, 0.22205281561123413, 0.18903397501048458, 0.20803824406741, 0.20545068398197885, 0.19673041589905482, 0.20683748299019444, 0.22465888769340714, 0.18693136517037878, 0.16452066724486636, 0.9197008978016044, 0.16966611035877666, 0.8911130272184961, 0.20100485603065887, 0.9160888284160961, 0.916277188214941, 0.9345571638639282, 0.766171361138878, 0.15625654720548954, 0.6463990092759608, 0.21153281681127678, 0.1681391546894433, 0.2109946427634498, 0.16787466898611236, 0.15605983093474807, 0.21010576527728553, 0.17069332062853648, 0.1787636336078573, 0.18434060164655353, 0.1880303769609305, 0.18128583757148276, 0.19361805152300893, 0.19349239690934605, 0.1732346420185279, 0.19106264881543777, 0.09644062326573566, 0.08675541689021993, 0.09036361081409816, 0.09243727137110924, 0.09190735958825058, 0.08809183170705459, 0.09734913181094307, 0.12875323683854967, 0.09236489292419214]}, "mutation_prompt": null}
{"id": "2abff123-d6e9-49db-a91f-b9516d024756", "solution": "import numpy as np\n\nclass EnhancedHybridEvolutionaryOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(25, budget // 10)  # Adjusted population size\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, dim))\n        self.velocities = np.random.uniform(-0.25, 0.25, (self.pop_size, dim))\n        self.personal_best_positions = self.population.copy()\n        self.personal_best_values = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evals = 0\n        self.F = 0.6  # Adaptive scaling factor\n        self.CR = 0.9  # Further increased crossover rate\n        self.omega = 0.2  # Reduced inertia weight for faster convergence\n        self.phi_p = 1.6  # Enhanced cognitive component\n        self.phi_g = 1.4  # Enhanced social component\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evals < self.budget:\n            for i in range(self.pop_size):\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), *self.bounds)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                trial_value = func(trial)\n                self.evals += 1\n                if trial_value < self.personal_best_values[i]:\n                    self.personal_best_positions[i] = trial\n                    self.personal_best_values[i] = trial_value\n                if trial_value < self.global_best_value:\n                    self.global_best_value = trial_value\n                    self.global_best_position = trial\n\n            rand_vals = np.random.rand(2, self.pop_size, self.dim)\n            self.velocities = (self.omega * self.velocities +\n                               rand_vals[0] * self.phi_p * (self.personal_best_positions - self.population) +\n                               rand_vals[1] * self.phi_g * (self.global_best_position - self.population))\n            np.clip(self.population + self.velocities, *self.bounds, out=self.population)\n\n        return self.global_best_value\n\n    def evaluate_population(self, func):\n        values = np.apply_along_axis(func, 1, self.population)\n        self.evals += self.pop_size\n        better_mask = values < self.personal_best_values\n        np.copyto(self.personal_best_positions, self.population, where=better_mask[:, np.newaxis])\n        np.copyto(self.personal_best_values, values, where=better_mask)\n        min_idx = values.argmin()\n        if values[min_idx] < self.global_best_value:\n            self.global_best_value = values[min_idx]\n            self.global_best_position = self.population[min_idx]", "name": "EnhancedHybridEvolutionaryOptimizer", "description": "Enhanced Hybrid Evolutionary Optimizer with adaptive parameter updates and streamlined operations for improved efficiency.", "configspace": "", "generation": 70, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e07d1435-043f-494b-a8c6-2edea7eb5022", "metadata": {"aucs": [0.9100591978626473, 0.9044994117948806, 0.9154336842636235, 0.9060103639050422, 0.9061391613313525, 0.9186077209996638, 0.9056705520135132, 0.9085925349984292, 0.9060124343834618, 0.7730828893847684, 0.8290502310361922, 0.8433864961489217, 0.8312245812080997, 0.8340442826557538, 0.8318469290819372, 0.8376990055353755, 0.8365199384611939, 0.8156869958531187, 0.1406765849888887, 0.140506372375391, 0.18353521923892546, 0.15129937916775782, 0.1046874889256807, 0.11439911781901957, 0.15629979223610813, 0.15611616321745403, 0.1561052925699099, 0.14013839286592755, 0.17452573535150973, 0.11540495731223765, 0.1156206018306557, 0.10831642030496424, 0.15526460281379828, 0.11842277911435717, 0.12019151191090038, 0.1389970741807368, 0.9844978500259234, 0.9878583520742972, 0.9860396912703203, 0.9765340157415099, 0.99020637002614, 0.9730286692477783, 0.9881108867731351, 0.9772940355636521, 0.979675598527954, 0.8163261296977598, 0.7927101800514582, 0.7987382064052436, 0.7781791506676524, 0.783191372968221, 0.7780827572341735, 0.7781443267791177, 0.7742847819580602, 0.7998653518138723, 0.22584838531396523, 0.16774631889481229, 0.37906250135893227, 0.3611115926407116, 0.8798075339726283, 0.9153577231389178, 0.24003600712813555, 0.22101330361244054, 0.23764838807369149, 0.26004701558544363, 0.23540159031490016, 0.24989713900847632, 0.22680064384768517, 0.251642271368276, 0.2180049044469704, 0.23205668148330483, 0.13275316372557477, 0.2285539082627912, 0.2431205024809906, 0.24993365464160966, 0.13242125883287714, 0.25215713971093656, 0.27298122456243046, 0.24847233289289583, 0.13379038283877742, 0.2655833487135125, 0.13045599196106739, 0.0002560216272237126, 9.999999999998899e-05, 0.003126293070108699, 0.0059105933928934595, 9.999999999998899e-05, 0.04523079896543514, 0.04723932887017834, 0.07902570418786214, 9.999999999998899e-05, 0.050122098842234064, 0.04015492592906611, 0.08271742895951761, 0.027306887879120167, 0.06508677800414897, 0.02049929320125743, 0.09713586991531342, 0.15712638371921317, 0.11022232352414285, 0.06576639221505198, 0.1519460464489928, 0.12726867277121545, 0.10716522162129183, 0.09709840064680808, 0.08131663224438523, 0.10436034858926801, 0.12132644139856708, 0.16206841846628484, 0.1711229837836591, 0.09204838505583868, 0.08204523903971894, 0.168560471686529, 0.32234421286555137, 0.20436819976602005, 0.11151399958606367, 0.164371841347285, 0.18502712077387518, 0.5749047734775052, 0.6228785039767997, 0.5667034018060592, 0.565140735273234, 0.5730399749906032, 0.5845038944758993, 0.6009485646662722, 0.6226296560156406, 0.6064738294828372, 0.14341250325562938, 0.13589840746982174, 0.13953575619146885, 0.18581627069944018, 0.15393706432096477, 0.15453106535274497, 0.14324418264310756, 0.15579236218308412, 0.15417209268601395, 0.18325476114447747, 0.1983344519363387, 0.5666071466637517, 0.20530950170253925, 0.2860054254410084, 0.2039879652841594, 0.19213878040529198, 0.4694021457172788, 0.4823459145296156, 0.41753911750022, 0.5278416303442346, 0.32891811038756946, 0.3579442904603769, 0.729749454947026, 0.43246987967548667, 0.6014523500612458, 0.8006513685740014, 0.7663538699945746, 0.3532957097057746, 0.4767899730772923, 0.3895938908436154, 0.24297016192043597, 0.3212427050482427, 0.3250317590787525, 0.3699037912019516, 0.31708398080009825, 0.24846584304828434, 0.252456253590722, 0.21983366961517237, 0.2090210428309578, 0.2038946070676937, 0.22702518176653774, 0.2109483599633346, 0.21367448521501442, 0.23479255198876559, 0.20676407174588007, 0.843407571921244, 0.18573794943702793, 0.22205281561123413, 0.18903397501048458, 0.20803824406741, 0.20545068398197885, 0.19673041589905482, 0.20683748299019444, 0.22465888769340714, 0.18693136517037878, 0.16452066724486636, 0.9197008978016044, 0.16966611035877666, 0.8911130272184961, 0.20100485603065887, 0.9160888284160961, 0.916277188214941, 0.9345571638639282, 0.766171361138878, 0.15625654720548954, 0.6463990092759608, 0.21153281681127678, 0.1681391546894433, 0.2109946427634498, 0.16787466898611236, 0.15605983093474807, 0.21010576527728553, 0.17069332062853648, 0.1787636336078573, 0.18434060164655353, 0.1880303769609305, 0.18128583757148276, 0.19361805152300893, 0.19349239690934605, 0.1732346420185279, 0.19106264881543777, 0.09644062326573566, 0.08675541689021993, 0.09036361081409816, 0.09243727137110924, 0.09190735958825058, 0.08809183170705459, 0.09734913181094307, 0.12875323683854967, 0.09236489292419214]}, "mutation_prompt": null}
{"id": "f672ed17-b64d-407f-8862-faace8efe78d", "solution": "import numpy as np\n\nclass EnhancedHybridEvolutionaryOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(25, budget // 10)  # Adjusted population size\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, dim))\n        self.velocities = np.random.uniform(-0.25, 0.25, (self.pop_size, dim))\n        self.personal_best_positions = self.population.copy()\n        self.personal_best_values = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evals = 0\n        self.F = 0.6  # Adaptive scaling factor\n        self.CR = 0.9  # Further increased crossover rate\n        self.omega = 0.2  # Reduced inertia weight for faster convergence\n        self.phi_p = 1.6  # Enhanced cognitive component\n        self.phi_g = 1.4  # Enhanced social component\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evals < self.budget:\n            for i in range(self.pop_size):\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), *self.bounds)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                trial_value = func(trial)\n                self.evals += 1\n                if trial_value < self.personal_best_values[i]:\n                    self.personal_best_positions[i] = trial\n                    self.personal_best_values[i] = trial_value\n                if trial_value < self.global_best_value:\n                    self.global_best_value = trial_value\n                    self.global_best_position = trial\n\n            rand_vals = np.random.rand(2, self.pop_size, self.dim)\n            self.velocities = (self.omega * self.velocities +\n                               rand_vals[0] * self.phi_p * (self.personal_best_positions - self.population) +\n                               rand_vals[1] * self.phi_g * (self.global_best_position - self.population))\n            np.clip(self.population + self.velocities, *self.bounds, out=self.population)\n\n        return self.global_best_value\n\n    def evaluate_population(self, func):\n        values = np.apply_along_axis(func, 1, self.population)\n        self.evals += self.pop_size\n        better_mask = values < self.personal_best_values\n        np.copyto(self.personal_best_positions, self.population, where=better_mask[:, np.newaxis])\n        np.copyto(self.personal_best_values, values, where=better_mask)\n        min_idx = values.argmin()\n        if values[min_idx] < self.global_best_value:\n            self.global_best_value = values[min_idx]\n            self.global_best_position = self.population[min_idx]", "name": "EnhancedHybridEvolutionaryOptimizer", "description": "Enhanced Hybrid Evolutionary Optimizer with adaptive parameter updates and streamlined operations for improved efficiency.", "configspace": "", "generation": 70, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e07d1435-043f-494b-a8c6-2edea7eb5022", "metadata": {"aucs": [0.9100591978626473, 0.9044994117948806, 0.9154336842636235, 0.9060103639050422, 0.9061391613313525, 0.9186077209996638, 0.9056705520135132, 0.9085925349984292, 0.9060124343834618, 0.7730828893847684, 0.8290502310361922, 0.8433864961489217, 0.8312245812080997, 0.8340442826557538, 0.8318469290819372, 0.8376990055353755, 0.8365199384611939, 0.8156869958531187, 0.1406765849888887, 0.140506372375391, 0.18353521923892546, 0.15129937916775782, 0.1046874889256807, 0.11439911781901957, 0.15629979223610813, 0.15611616321745403, 0.1561052925699099, 0.14013839286592755, 0.17452573535150973, 0.11540495731223765, 0.1156206018306557, 0.10831642030496424, 0.15526460281379828, 0.11842277911435717, 0.12019151191090038, 0.1389970741807368, 0.9844978500259234, 0.9878583520742972, 0.9860396912703203, 0.9765340157415099, 0.99020637002614, 0.9730286692477783, 0.9881108867731351, 0.9772940355636521, 0.979675598527954, 0.8163261296977598, 0.7927101800514582, 0.7987382064052436, 0.7781791506676524, 0.783191372968221, 0.7780827572341735, 0.7781443267791177, 0.7742847819580602, 0.7998653518138723, 0.22584838531396523, 0.16774631889481229, 0.37906250135893227, 0.3611115926407116, 0.8798075339726283, 0.9153577231389178, 0.24003600712813555, 0.22101330361244054, 0.23764838807369149, 0.26004701558544363, 0.23540159031490016, 0.24989713900847632, 0.22680064384768517, 0.251642271368276, 0.2180049044469704, 0.23205668148330483, 0.13275316372557477, 0.2285539082627912, 0.2431205024809906, 0.24993365464160966, 0.13242125883287714, 0.25215713971093656, 0.27298122456243046, 0.24847233289289583, 0.13379038283877742, 0.2655833487135125, 0.13045599196106739, 0.0002560216272237126, 9.999999999998899e-05, 0.003126293070108699, 0.0059105933928934595, 9.999999999998899e-05, 0.04523079896543514, 0.04723932887017834, 0.07902570418786214, 9.999999999998899e-05, 0.050122098842234064, 0.04015492592906611, 0.08271742895951761, 0.027306887879120167, 0.06508677800414897, 0.02049929320125743, 0.09713586991531342, 0.15712638371921317, 0.11022232352414285, 0.06576639221505198, 0.1519460464489928, 0.12726867277121545, 0.10716522162129183, 0.09709840064680808, 0.08131663224438523, 0.10436034858926801, 0.12132644139856708, 0.16206841846628484, 0.1711229837836591, 0.09204838505583868, 0.08204523903971894, 0.168560471686529, 0.32234421286555137, 0.20436819976602005, 0.11151399958606367, 0.164371841347285, 0.18502712077387518, 0.5749047734775052, 0.6228785039767997, 0.5667034018060592, 0.565140735273234, 0.5730399749906032, 0.5845038944758993, 0.6009485646662722, 0.6226296560156406, 0.6064738294828372, 0.14341250325562938, 0.13589840746982174, 0.13953575619146885, 0.18581627069944018, 0.15393706432096477, 0.15453106535274497, 0.14324418264310756, 0.15579236218308412, 0.15417209268601395, 0.18325476114447747, 0.1983344519363387, 0.5666071466637517, 0.20530950170253925, 0.2860054254410084, 0.2039879652841594, 0.19213878040529198, 0.4694021457172788, 0.4823459145296156, 0.41753911750022, 0.5278416303442346, 0.32891811038756946, 0.3579442904603769, 0.729749454947026, 0.43246987967548667, 0.6014523500612458, 0.8006513685740014, 0.7663538699945746, 0.3532957097057746, 0.4767899730772923, 0.3895938908436154, 0.24297016192043597, 0.3212427050482427, 0.3250317590787525, 0.3699037912019516, 0.31708398080009825, 0.24846584304828434, 0.252456253590722, 0.21983366961517237, 0.2090210428309578, 0.2038946070676937, 0.22702518176653774, 0.2109483599633346, 0.21367448521501442, 0.23479255198876559, 0.20676407174588007, 0.843407571921244, 0.18573794943702793, 0.22205281561123413, 0.18903397501048458, 0.20803824406741, 0.20545068398197885, 0.19673041589905482, 0.20683748299019444, 0.22465888769340714, 0.18693136517037878, 0.16452066724486636, 0.9197008978016044, 0.16966611035877666, 0.8911130272184961, 0.20100485603065887, 0.9160888284160961, 0.916277188214941, 0.9345571638639282, 0.766171361138878, 0.15625654720548954, 0.6463990092759608, 0.21153281681127678, 0.1681391546894433, 0.2109946427634498, 0.16787466898611236, 0.15605983093474807, 0.21010576527728553, 0.17069332062853648, 0.1787636336078573, 0.18434060164655353, 0.1880303769609305, 0.18128583757148276, 0.19361805152300893, 0.19349239690934605, 0.1732346420185279, 0.19106264881543777, 0.09644062326573566, 0.08675541689021993, 0.09036361081409816, 0.09243727137110924, 0.09190735958825058, 0.08809183170705459, 0.09734913181094307, 0.12875323683854967, 0.09236489292419214]}, "mutation_prompt": null}
{"id": "4f8cb127-f9ca-4064-808d-915c95038dbc", "solution": "import numpy as np\n\nclass EnhancedHybridEvolutionaryOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(25, budget // 10)  # Adjusted population size\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, dim))\n        self.velocities = np.random.uniform(-0.25, 0.25, (self.pop_size, dim))\n        self.personal_best_positions = self.population.copy()\n        self.personal_best_values = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evals = 0\n        self.F = 0.6  # Adaptive scaling factor\n        self.CR = 0.9  # Further increased crossover rate\n        self.omega = 0.2  # Reduced inertia weight for faster convergence\n        self.phi_p = 1.6  # Enhanced cognitive component\n        self.phi_g = 1.4  # Enhanced social component\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evals < self.budget:\n            for i in range(self.pop_size):\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), *self.bounds)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                trial_value = func(trial)\n                self.evals += 1\n                if trial_value < self.personal_best_values[i]:\n                    self.personal_best_positions[i] = trial\n                    self.personal_best_values[i] = trial_value\n                if trial_value < self.global_best_value:\n                    self.global_best_value = trial_value\n                    self.global_best_position = trial\n\n            rand_vals = np.random.rand(2, self.pop_size, self.dim)\n            self.velocities = (self.omega * self.velocities +\n                               rand_vals[0] * self.phi_p * (self.personal_best_positions - self.population) +\n                               rand_vals[1] * self.phi_g * (self.global_best_position - self.population))\n            np.clip(self.population + self.velocities, *self.bounds, out=self.population)\n\n        return self.global_best_value\n\n    def evaluate_population(self, func):\n        values = np.apply_along_axis(func, 1, self.population)\n        self.evals += self.pop_size\n        better_mask = values < self.personal_best_values\n        np.copyto(self.personal_best_positions, self.population, where=better_mask[:, np.newaxis])\n        np.copyto(self.personal_best_values, values, where=better_mask)\n        min_idx = values.argmin()\n        if values[min_idx] < self.global_best_value:\n            self.global_best_value = values[min_idx]\n            self.global_best_position = self.population[min_idx]", "name": "EnhancedHybridEvolutionaryOptimizer", "description": "Enhanced Hybrid Evolutionary Optimizer with adaptive parameter updates and streamlined operations for improved efficiency.", "configspace": "", "generation": 70, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e07d1435-043f-494b-a8c6-2edea7eb5022", "metadata": {"aucs": [0.9100591978626473, 0.9044994117948806, 0.9154336842636235, 0.9060103639050422, 0.9061391613313525, 0.9186077209996638, 0.9056705520135132, 0.9085925349984292, 0.9060124343834618, 0.7730828893847684, 0.8290502310361922, 0.8433864961489217, 0.8312245812080997, 0.8340442826557538, 0.8318469290819372, 0.8376990055353755, 0.8365199384611939, 0.8156869958531187, 0.1406765849888887, 0.140506372375391, 0.18353521923892546, 0.15129937916775782, 0.1046874889256807, 0.11439911781901957, 0.15629979223610813, 0.15611616321745403, 0.1561052925699099, 0.14013839286592755, 0.17452573535150973, 0.11540495731223765, 0.1156206018306557, 0.10831642030496424, 0.15526460281379828, 0.11842277911435717, 0.12019151191090038, 0.1389970741807368, 0.9844978500259234, 0.9878583520742972, 0.9860396912703203, 0.9765340157415099, 0.99020637002614, 0.9730286692477783, 0.9881108867731351, 0.9772940355636521, 0.979675598527954, 0.8163261296977598, 0.7927101800514582, 0.7987382064052436, 0.7781791506676524, 0.783191372968221, 0.7780827572341735, 0.7781443267791177, 0.7742847819580602, 0.7998653518138723, 0.22584838531396523, 0.16774631889481229, 0.37906250135893227, 0.3611115926407116, 0.8798075339726283, 0.9153577231389178, 0.24003600712813555, 0.22101330361244054, 0.23764838807369149, 0.26004701558544363, 0.23540159031490016, 0.24989713900847632, 0.22680064384768517, 0.251642271368276, 0.2180049044469704, 0.23205668148330483, 0.13275316372557477, 0.2285539082627912, 0.2431205024809906, 0.24993365464160966, 0.13242125883287714, 0.25215713971093656, 0.27298122456243046, 0.24847233289289583, 0.13379038283877742, 0.2655833487135125, 0.13045599196106739, 0.0002560216272237126, 9.999999999998899e-05, 0.003126293070108699, 0.0059105933928934595, 9.999999999998899e-05, 0.04523079896543514, 0.04723932887017834, 0.07902570418786214, 9.999999999998899e-05, 0.050122098842234064, 0.04015492592906611, 0.08271742895951761, 0.027306887879120167, 0.06508677800414897, 0.02049929320125743, 0.09713586991531342, 0.15712638371921317, 0.11022232352414285, 0.06576639221505198, 0.1519460464489928, 0.12726867277121545, 0.10716522162129183, 0.09709840064680808, 0.08131663224438523, 0.10436034858926801, 0.12132644139856708, 0.16206841846628484, 0.1711229837836591, 0.09204838505583868, 0.08204523903971894, 0.168560471686529, 0.32234421286555137, 0.20436819976602005, 0.11151399958606367, 0.164371841347285, 0.18502712077387518, 0.5749047734775052, 0.6228785039767997, 0.5667034018060592, 0.565140735273234, 0.5730399749906032, 0.5845038944758993, 0.6009485646662722, 0.6226296560156406, 0.6064738294828372, 0.14341250325562938, 0.13589840746982174, 0.13953575619146885, 0.18581627069944018, 0.15393706432096477, 0.15453106535274497, 0.14324418264310756, 0.15579236218308412, 0.15417209268601395, 0.18325476114447747, 0.1983344519363387, 0.5666071466637517, 0.20530950170253925, 0.2860054254410084, 0.2039879652841594, 0.19213878040529198, 0.4694021457172788, 0.4823459145296156, 0.41753911750022, 0.5278416303442346, 0.32891811038756946, 0.3579442904603769, 0.729749454947026, 0.43246987967548667, 0.6014523500612458, 0.8006513685740014, 0.7663538699945746, 0.3532957097057746, 0.4767899730772923, 0.3895938908436154, 0.24297016192043597, 0.3212427050482427, 0.3250317590787525, 0.3699037912019516, 0.31708398080009825, 0.24846584304828434, 0.252456253590722, 0.21983366961517237, 0.2090210428309578, 0.2038946070676937, 0.22702518176653774, 0.2109483599633346, 0.21367448521501442, 0.23479255198876559, 0.20676407174588007, 0.843407571921244, 0.18573794943702793, 0.22205281561123413, 0.18903397501048458, 0.20803824406741, 0.20545068398197885, 0.19673041589905482, 0.20683748299019444, 0.22465888769340714, 0.18693136517037878, 0.16452066724486636, 0.9197008978016044, 0.16966611035877666, 0.8911130272184961, 0.20100485603065887, 0.9160888284160961, 0.916277188214941, 0.9345571638639282, 0.766171361138878, 0.15625654720548954, 0.6463990092759608, 0.21153281681127678, 0.1681391546894433, 0.2109946427634498, 0.16787466898611236, 0.15605983093474807, 0.21010576527728553, 0.17069332062853648, 0.1787636336078573, 0.18434060164655353, 0.1880303769609305, 0.18128583757148276, 0.19361805152300893, 0.19349239690934605, 0.1732346420185279, 0.19106264881543777, 0.09644062326573566, 0.08675541689021993, 0.09036361081409816, 0.09243727137110924, 0.09190735958825058, 0.08809183170705459, 0.09734913181094307, 0.12875323683854967, 0.09236489292419214]}, "mutation_prompt": null}
{"id": "119e06fc-42d6-40ca-9099-a15c54796038", "solution": "import numpy as np\n\nclass EnhancedHybridEvolutionaryOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(25, budget // 10)  # Adjusted population size\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, dim))\n        self.velocities = np.random.uniform(-0.25, 0.25, (self.pop_size, dim))\n        self.personal_best_positions = self.population.copy()\n        self.personal_best_values = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evals = 0\n        self.F = 0.6  # Adaptive scaling factor\n        self.CR = 0.9  # Further increased crossover rate\n        self.omega = 0.2  # Reduced inertia weight for faster convergence\n        self.phi_p = 1.6  # Enhanced cognitive component\n        self.phi_g = 1.4  # Enhanced social component\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evals < self.budget:\n            for i in range(self.pop_size):\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), *self.bounds)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                trial_value = func(trial)\n                self.evals += 1\n                if trial_value < self.personal_best_values[i]:\n                    self.personal_best_positions[i] = trial\n                    self.personal_best_values[i] = trial_value\n                if trial_value < self.global_best_value:\n                    self.global_best_value = trial_value\n                    self.global_best_position = trial\n\n            rand_vals = np.random.rand(2, self.pop_size, self.dim)\n            self.velocities = (self.omega * self.velocities +\n                               rand_vals[0] * self.phi_p * (self.personal_best_positions - self.population) +\n                               rand_vals[1] * self.phi_g * (self.global_best_position - self.population))\n            np.clip(self.population + self.velocities, *self.bounds, out=self.population)\n\n        return self.global_best_value\n\n    def evaluate_population(self, func):\n        values = np.apply_along_axis(func, 1, self.population)\n        self.evals += self.pop_size\n        better_mask = values < self.personal_best_values\n        np.copyto(self.personal_best_positions, self.population, where=better_mask[:, np.newaxis])\n        np.copyto(self.personal_best_values, values, where=better_mask)\n        min_idx = values.argmin()\n        if values[min_idx] < self.global_best_value:\n            self.global_best_value = values[min_idx]\n            self.global_best_position = self.population[min_idx]", "name": "EnhancedHybridEvolutionaryOptimizer", "description": "Enhanced Hybrid Evolutionary Optimizer with adaptive parameter updates and streamlined operations for improved efficiency.", "configspace": "", "generation": 70, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e07d1435-043f-494b-a8c6-2edea7eb5022", "metadata": {"aucs": [0.9100591978626473, 0.9044994117948806, 0.9154336842636235, 0.9060103639050422, 0.9061391613313525, 0.9186077209996638, 0.9056705520135132, 0.9085925349984292, 0.9060124343834618, 0.7730828893847684, 0.8290502310361922, 0.8433864961489217, 0.8312245812080997, 0.8340442826557538, 0.8318469290819372, 0.8376990055353755, 0.8365199384611939, 0.8156869958531187, 0.1406765849888887, 0.140506372375391, 0.18353521923892546, 0.15129937916775782, 0.1046874889256807, 0.11439911781901957, 0.15629979223610813, 0.15611616321745403, 0.1561052925699099, 0.14013839286592755, 0.17452573535150973, 0.11540495731223765, 0.1156206018306557, 0.10831642030496424, 0.15526460281379828, 0.11842277911435717, 0.12019151191090038, 0.1389970741807368, 0.9844978500259234, 0.9878583520742972, 0.9860396912703203, 0.9765340157415099, 0.99020637002614, 0.9730286692477783, 0.9881108867731351, 0.9772940355636521, 0.979675598527954, 0.8163261296977598, 0.7927101800514582, 0.7987382064052436, 0.7781791506676524, 0.783191372968221, 0.7780827572341735, 0.7781443267791177, 0.7742847819580602, 0.7998653518138723, 0.22584838531396523, 0.16774631889481229, 0.37906250135893227, 0.3611115926407116, 0.8798075339726283, 0.9153577231389178, 0.24003600712813555, 0.22101330361244054, 0.23764838807369149, 0.26004701558544363, 0.23540159031490016, 0.24989713900847632, 0.22680064384768517, 0.251642271368276, 0.2180049044469704, 0.23205668148330483, 0.13275316372557477, 0.2285539082627912, 0.2431205024809906, 0.24993365464160966, 0.13242125883287714, 0.25215713971093656, 0.27298122456243046, 0.24847233289289583, 0.13379038283877742, 0.2655833487135125, 0.13045599196106739, 0.0002560216272237126, 9.999999999998899e-05, 0.003126293070108699, 0.0059105933928934595, 9.999999999998899e-05, 0.04523079896543514, 0.04723932887017834, 0.07902570418786214, 9.999999999998899e-05, 0.050122098842234064, 0.04015492592906611, 0.08271742895951761, 0.027306887879120167, 0.06508677800414897, 0.02049929320125743, 0.09713586991531342, 0.15712638371921317, 0.11022232352414285, 0.06576639221505198, 0.1519460464489928, 0.12726867277121545, 0.10716522162129183, 0.09709840064680808, 0.08131663224438523, 0.10436034858926801, 0.12132644139856708, 0.16206841846628484, 0.1711229837836591, 0.09204838505583868, 0.08204523903971894, 0.168560471686529, 0.32234421286555137, 0.20436819976602005, 0.11151399958606367, 0.164371841347285, 0.18502712077387518, 0.5749047734775052, 0.6228785039767997, 0.5667034018060592, 0.565140735273234, 0.5730399749906032, 0.5845038944758993, 0.6009485646662722, 0.6226296560156406, 0.6064738294828372, 0.14341250325562938, 0.13589840746982174, 0.13953575619146885, 0.18581627069944018, 0.15393706432096477, 0.15453106535274497, 0.14324418264310756, 0.15579236218308412, 0.15417209268601395, 0.18325476114447747, 0.1983344519363387, 0.5666071466637517, 0.20530950170253925, 0.2860054254410084, 0.2039879652841594, 0.19213878040529198, 0.4694021457172788, 0.4823459145296156, 0.41753911750022, 0.5278416303442346, 0.32891811038756946, 0.3579442904603769, 0.729749454947026, 0.43246987967548667, 0.6014523500612458, 0.8006513685740014, 0.7663538699945746, 0.3532957097057746, 0.4767899730772923, 0.3895938908436154, 0.24297016192043597, 0.3212427050482427, 0.3250317590787525, 0.3699037912019516, 0.31708398080009825, 0.24846584304828434, 0.252456253590722, 0.21983366961517237, 0.2090210428309578, 0.2038946070676937, 0.22702518176653774, 0.2109483599633346, 0.21367448521501442, 0.23479255198876559, 0.20676407174588007, 0.843407571921244, 0.18573794943702793, 0.22205281561123413, 0.18903397501048458, 0.20803824406741, 0.20545068398197885, 0.19673041589905482, 0.20683748299019444, 0.22465888769340714, 0.18693136517037878, 0.16452066724486636, 0.9197008978016044, 0.16966611035877666, 0.8911130272184961, 0.20100485603065887, 0.9160888284160961, 0.916277188214941, 0.9345571638639282, 0.766171361138878, 0.15625654720548954, 0.6463990092759608, 0.21153281681127678, 0.1681391546894433, 0.2109946427634498, 0.16787466898611236, 0.15605983093474807, 0.21010576527728553, 0.17069332062853648, 0.1787636336078573, 0.18434060164655353, 0.1880303769609305, 0.18128583757148276, 0.19361805152300893, 0.19349239690934605, 0.1732346420185279, 0.19106264881543777, 0.09644062326573566, 0.08675541689021993, 0.09036361081409816, 0.09243727137110924, 0.09190735958825058, 0.08809183170705459, 0.09734913181094307, 0.12875323683854967, 0.09236489292419214]}, "mutation_prompt": null}
{"id": "2941ba68-af4b-4a59-9073-d7d0678c92c4", "solution": "import numpy as np\n\nclass EnhancedHybridEvolutionaryOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(25, budget // 10)  # Adjusted population size\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, dim))\n        self.velocities = np.random.uniform(-0.25, 0.25, (self.pop_size, dim))\n        self.personal_best_positions = self.population.copy()\n        self.personal_best_values = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evals = 0\n        self.F = 0.6  # Adaptive scaling factor\n        self.CR = 0.9  # Further increased crossover rate\n        self.omega = 0.2  # Reduced inertia weight for faster convergence\n        self.phi_p = 1.6  # Enhanced cognitive component\n        self.phi_g = 1.4  # Enhanced social component\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evals < self.budget:\n            for i in range(self.pop_size):\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), *self.bounds)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                trial_value = func(trial)\n                self.evals += 1\n                if trial_value < self.personal_best_values[i]:\n                    self.personal_best_positions[i] = trial\n                    self.personal_best_values[i] = trial_value\n                if trial_value < self.global_best_value:\n                    self.global_best_value = trial_value\n                    self.global_best_position = trial\n\n            rand_vals = np.random.rand(2, self.pop_size, self.dim)\n            self.velocities = (self.omega * self.velocities +\n                               rand_vals[0] * self.phi_p * (self.personal_best_positions - self.population) +\n                               rand_vals[1] * self.phi_g * (self.global_best_position - self.population))\n            np.clip(self.population + self.velocities, *self.bounds, out=self.population)\n\n        return self.global_best_value\n\n    def evaluate_population(self, func):\n        values = np.apply_along_axis(func, 1, self.population)\n        self.evals += self.pop_size\n        better_mask = values < self.personal_best_values\n        np.copyto(self.personal_best_positions, self.population, where=better_mask[:, np.newaxis])\n        np.copyto(self.personal_best_values, values, where=better_mask)\n        min_idx = values.argmin()\n        if values[min_idx] < self.global_best_value:\n            self.global_best_value = values[min_idx]\n            self.global_best_position = self.population[min_idx]", "name": "EnhancedHybridEvolutionaryOptimizer", "description": "Enhanced Hybrid Evolutionary Optimizer with adaptive parameter updates and streamlined operations for improved efficiency.", "configspace": "", "generation": 70, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e07d1435-043f-494b-a8c6-2edea7eb5022", "metadata": {"aucs": [0.9100591978626473, 0.9044994117948806, 0.9154336842636235, 0.9060103639050422, 0.9061391613313525, 0.9186077209996638, 0.9056705520135132, 0.9085925349984292, 0.9060124343834618, 0.7730828893847684, 0.8290502310361922, 0.8433864961489217, 0.8312245812080997, 0.8340442826557538, 0.8318469290819372, 0.8376990055353755, 0.8365199384611939, 0.8156869958531187, 0.1406765849888887, 0.140506372375391, 0.18353521923892546, 0.15129937916775782, 0.1046874889256807, 0.11439911781901957, 0.15629979223610813, 0.15611616321745403, 0.1561052925699099, 0.14013839286592755, 0.17452573535150973, 0.11540495731223765, 0.1156206018306557, 0.10831642030496424, 0.15526460281379828, 0.11842277911435717, 0.12019151191090038, 0.1389970741807368, 0.9844978500259234, 0.9878583520742972, 0.9860396912703203, 0.9765340157415099, 0.99020637002614, 0.9730286692477783, 0.9881108867731351, 0.9772940355636521, 0.979675598527954, 0.8163261296977598, 0.7927101800514582, 0.7987382064052436, 0.7781791506676524, 0.783191372968221, 0.7780827572341735, 0.7781443267791177, 0.7742847819580602, 0.7998653518138723, 0.22584838531396523, 0.16774631889481229, 0.37906250135893227, 0.3611115926407116, 0.8798075339726283, 0.9153577231389178, 0.24003600712813555, 0.22101330361244054, 0.23764838807369149, 0.26004701558544363, 0.23540159031490016, 0.24989713900847632, 0.22680064384768517, 0.251642271368276, 0.2180049044469704, 0.23205668148330483, 0.13275316372557477, 0.2285539082627912, 0.2431205024809906, 0.24993365464160966, 0.13242125883287714, 0.25215713971093656, 0.27298122456243046, 0.24847233289289583, 0.13379038283877742, 0.2655833487135125, 0.13045599196106739, 0.0002560216272237126, 9.999999999998899e-05, 0.003126293070108699, 0.0059105933928934595, 9.999999999998899e-05, 0.04523079896543514, 0.04723932887017834, 0.07902570418786214, 9.999999999998899e-05, 0.050122098842234064, 0.04015492592906611, 0.08271742895951761, 0.027306887879120167, 0.06508677800414897, 0.02049929320125743, 0.09713586991531342, 0.15712638371921317, 0.11022232352414285, 0.06576639221505198, 0.1519460464489928, 0.12726867277121545, 0.10716522162129183, 0.09709840064680808, 0.08131663224438523, 0.10436034858926801, 0.12132644139856708, 0.16206841846628484, 0.1711229837836591, 0.09204838505583868, 0.08204523903971894, 0.168560471686529, 0.32234421286555137, 0.20436819976602005, 0.11151399958606367, 0.164371841347285, 0.18502712077387518, 0.5749047734775052, 0.6228785039767997, 0.5667034018060592, 0.565140735273234, 0.5730399749906032, 0.5845038944758993, 0.6009485646662722, 0.6226296560156406, 0.6064738294828372, 0.14341250325562938, 0.13589840746982174, 0.13953575619146885, 0.18581627069944018, 0.15393706432096477, 0.15453106535274497, 0.14324418264310756, 0.15579236218308412, 0.15417209268601395, 0.18325476114447747, 0.1983344519363387, 0.5666071466637517, 0.20530950170253925, 0.2860054254410084, 0.2039879652841594, 0.19213878040529198, 0.4694021457172788, 0.4823459145296156, 0.41753911750022, 0.5278416303442346, 0.32891811038756946, 0.3579442904603769, 0.729749454947026, 0.43246987967548667, 0.6014523500612458, 0.8006513685740014, 0.7663538699945746, 0.3532957097057746, 0.4767899730772923, 0.3895938908436154, 0.24297016192043597, 0.3212427050482427, 0.3250317590787525, 0.3699037912019516, 0.31708398080009825, 0.24846584304828434, 0.252456253590722, 0.21983366961517237, 0.2090210428309578, 0.2038946070676937, 0.22702518176653774, 0.2109483599633346, 0.21367448521501442, 0.23479255198876559, 0.20676407174588007, 0.843407571921244, 0.18573794943702793, 0.22205281561123413, 0.18903397501048458, 0.20803824406741, 0.20545068398197885, 0.19673041589905482, 0.20683748299019444, 0.22465888769340714, 0.18693136517037878, 0.16452066724486636, 0.9197008978016044, 0.16966611035877666, 0.8911130272184961, 0.20100485603065887, 0.9160888284160961, 0.916277188214941, 0.9345571638639282, 0.766171361138878, 0.15625654720548954, 0.6463990092759608, 0.21153281681127678, 0.1681391546894433, 0.2109946427634498, 0.16787466898611236, 0.15605983093474807, 0.21010576527728553, 0.17069332062853648, 0.1787636336078573, 0.18434060164655353, 0.1880303769609305, 0.18128583757148276, 0.19361805152300893, 0.19349239690934605, 0.1732346420185279, 0.19106264881543777, 0.09644062326573566, 0.08675541689021993, 0.09036361081409816, 0.09243727137110924, 0.09190735958825058, 0.08809183170705459, 0.09734913181094307, 0.12875323683854967, 0.09236489292419214]}, "mutation_prompt": null}
{"id": "70bca8af-4329-413a-85c3-2b42504f1589", "solution": "import numpy as np\n\nclass EnhancedHybridEvolutionaryOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(25, budget // 10)  # Adjusted population size\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, dim))\n        self.velocities = np.random.uniform(-0.25, 0.25, (self.pop_size, dim))\n        self.personal_best_positions = self.population.copy()\n        self.personal_best_values = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evals = 0\n        self.F = 0.6  # Adaptive scaling factor\n        self.CR = 0.9  # Further increased crossover rate\n        self.omega = 0.2  # Reduced inertia weight for faster convergence\n        self.phi_p = 1.6  # Enhanced cognitive component\n        self.phi_g = 1.4  # Enhanced social component\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evals < self.budget:\n            for i in range(self.pop_size):\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), *self.bounds)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                trial_value = func(trial)\n                self.evals += 1\n                if trial_value < self.personal_best_values[i]:\n                    self.personal_best_positions[i] = trial\n                    self.personal_best_values[i] = trial_value\n                if trial_value < self.global_best_value:\n                    self.global_best_value = trial_value\n                    self.global_best_position = trial\n\n            rand_vals = np.random.rand(2, self.pop_size, self.dim)\n            self.velocities = (self.omega * self.velocities +\n                               rand_vals[0] * self.phi_p * (self.personal_best_positions - self.population) +\n                               rand_vals[1] * self.phi_g * (self.global_best_position - self.population))\n            np.clip(self.population + self.velocities, *self.bounds, out=self.population)\n\n        return self.global_best_value\n\n    def evaluate_population(self, func):\n        values = np.apply_along_axis(func, 1, self.population)\n        self.evals += self.pop_size\n        better_mask = values < self.personal_best_values\n        np.copyto(self.personal_best_positions, self.population, where=better_mask[:, np.newaxis])\n        np.copyto(self.personal_best_values, values, where=better_mask)\n        min_idx = values.argmin()\n        if values[min_idx] < self.global_best_value:\n            self.global_best_value = values[min_idx]\n            self.global_best_position = self.population[min_idx]", "name": "EnhancedHybridEvolutionaryOptimizer", "description": "Enhanced Hybrid Evolutionary Optimizer with adaptive parameter updates and streamlined operations for improved efficiency.", "configspace": "", "generation": 70, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e07d1435-043f-494b-a8c6-2edea7eb5022", "metadata": {"aucs": [0.9100591978626473, 0.9044994117948806, 0.9154336842636235, 0.9060103639050422, 0.9061391613313525, 0.9186077209996638, 0.9056705520135132, 0.9085925349984292, 0.9060124343834618, 0.7730828893847684, 0.8290502310361922, 0.8433864961489217, 0.8312245812080997, 0.8340442826557538, 0.8318469290819372, 0.8376990055353755, 0.8365199384611939, 0.8156869958531187, 0.1406765849888887, 0.140506372375391, 0.18353521923892546, 0.15129937916775782, 0.1046874889256807, 0.11439911781901957, 0.15629979223610813, 0.15611616321745403, 0.1561052925699099, 0.14013839286592755, 0.17452573535150973, 0.11540495731223765, 0.1156206018306557, 0.10831642030496424, 0.15526460281379828, 0.11842277911435717, 0.12019151191090038, 0.1389970741807368, 0.9844978500259234, 0.9878583520742972, 0.9860396912703203, 0.9765340157415099, 0.99020637002614, 0.9730286692477783, 0.9881108867731351, 0.9772940355636521, 0.979675598527954, 0.8163261296977598, 0.7927101800514582, 0.7987382064052436, 0.7781791506676524, 0.783191372968221, 0.7780827572341735, 0.7781443267791177, 0.7742847819580602, 0.7998653518138723, 0.22584838531396523, 0.16774631889481229, 0.37906250135893227, 0.3611115926407116, 0.8798075339726283, 0.9153577231389178, 0.24003600712813555, 0.22101330361244054, 0.23764838807369149, 0.26004701558544363, 0.23540159031490016, 0.24989713900847632, 0.22680064384768517, 0.251642271368276, 0.2180049044469704, 0.23205668148330483, 0.13275316372557477, 0.2285539082627912, 0.2431205024809906, 0.24993365464160966, 0.13242125883287714, 0.25215713971093656, 0.27298122456243046, 0.24847233289289583, 0.13379038283877742, 0.2655833487135125, 0.13045599196106739, 0.0002560216272237126, 9.999999999998899e-05, 0.003126293070108699, 0.0059105933928934595, 9.999999999998899e-05, 0.04523079896543514, 0.04723932887017834, 0.07902570418786214, 9.999999999998899e-05, 0.050122098842234064, 0.04015492592906611, 0.08271742895951761, 0.027306887879120167, 0.06508677800414897, 0.02049929320125743, 0.09713586991531342, 0.15712638371921317, 0.11022232352414285, 0.06576639221505198, 0.1519460464489928, 0.12726867277121545, 0.10716522162129183, 0.09709840064680808, 0.08131663224438523, 0.10436034858926801, 0.12132644139856708, 0.16206841846628484, 0.1711229837836591, 0.09204838505583868, 0.08204523903971894, 0.168560471686529, 0.32234421286555137, 0.20436819976602005, 0.11151399958606367, 0.164371841347285, 0.18502712077387518, 0.5749047734775052, 0.6228785039767997, 0.5667034018060592, 0.565140735273234, 0.5730399749906032, 0.5845038944758993, 0.6009485646662722, 0.6226296560156406, 0.6064738294828372, 0.14341250325562938, 0.13589840746982174, 0.13953575619146885, 0.18581627069944018, 0.15393706432096477, 0.15453106535274497, 0.14324418264310756, 0.15579236218308412, 0.15417209268601395, 0.18325476114447747, 0.1983344519363387, 0.5666071466637517, 0.20530950170253925, 0.2860054254410084, 0.2039879652841594, 0.19213878040529198, 0.4694021457172788, 0.4823459145296156, 0.41753911750022, 0.5278416303442346, 0.32891811038756946, 0.3579442904603769, 0.729749454947026, 0.43246987967548667, 0.6014523500612458, 0.8006513685740014, 0.7663538699945746, 0.3532957097057746, 0.4767899730772923, 0.3895938908436154, 0.24297016192043597, 0.3212427050482427, 0.3250317590787525, 0.3699037912019516, 0.31708398080009825, 0.24846584304828434, 0.252456253590722, 0.21983366961517237, 0.2090210428309578, 0.2038946070676937, 0.22702518176653774, 0.2109483599633346, 0.21367448521501442, 0.23479255198876559, 0.20676407174588007, 0.843407571921244, 0.18573794943702793, 0.22205281561123413, 0.18903397501048458, 0.20803824406741, 0.20545068398197885, 0.19673041589905482, 0.20683748299019444, 0.22465888769340714, 0.18693136517037878, 0.16452066724486636, 0.9197008978016044, 0.16966611035877666, 0.8911130272184961, 0.20100485603065887, 0.9160888284160961, 0.916277188214941, 0.9345571638639282, 0.766171361138878, 0.15625654720548954, 0.6463990092759608, 0.21153281681127678, 0.1681391546894433, 0.2109946427634498, 0.16787466898611236, 0.15605983093474807, 0.21010576527728553, 0.17069332062853648, 0.1787636336078573, 0.18434060164655353, 0.1880303769609305, 0.18128583757148276, 0.19361805152300893, 0.19349239690934605, 0.1732346420185279, 0.19106264881543777, 0.09644062326573566, 0.08675541689021993, 0.09036361081409816, 0.09243727137110924, 0.09190735958825058, 0.08809183170705459, 0.09734913181094307, 0.12875323683854967, 0.09236489292419214]}, "mutation_prompt": null}
{"id": "472459c4-5284-4dc9-a962-2cb646f0bf5f", "solution": "import numpy as np\n\nclass EnhancedHybridEvolutionaryOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(25, budget // 10)  # Adjusted population size\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, dim))\n        self.velocities = np.random.uniform(-0.25, 0.25, (self.pop_size, dim))\n        self.personal_best_positions = self.population.copy()\n        self.personal_best_values = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evals = 0\n        self.F = 0.6  # Adaptive scaling factor\n        self.CR = 0.9  # Further increased crossover rate\n        self.omega = 0.2  # Reduced inertia weight for faster convergence\n        self.phi_p = 1.6  # Enhanced cognitive component\n        self.phi_g = 1.4  # Enhanced social component\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evals < self.budget:\n            for i in range(self.pop_size):\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), *self.bounds)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                trial_value = func(trial)\n                self.evals += 1\n                if trial_value < self.personal_best_values[i]:\n                    self.personal_best_positions[i] = trial\n                    self.personal_best_values[i] = trial_value\n                if trial_value < self.global_best_value:\n                    self.global_best_value = trial_value\n                    self.global_best_position = trial\n\n            rand_vals = np.random.rand(2, self.pop_size, self.dim)\n            self.velocities = (self.omega * self.velocities +\n                               rand_vals[0] * self.phi_p * (self.personal_best_positions - self.population) +\n                               rand_vals[1] * self.phi_g * (self.global_best_position - self.population))\n            np.clip(self.population + self.velocities, *self.bounds, out=self.population)\n\n        return self.global_best_value\n\n    def evaluate_population(self, func):\n        values = np.apply_along_axis(func, 1, self.population)\n        self.evals += self.pop_size\n        better_mask = values < self.personal_best_values\n        np.copyto(self.personal_best_positions, self.population, where=better_mask[:, np.newaxis])\n        np.copyto(self.personal_best_values, values, where=better_mask)\n        min_idx = values.argmin()\n        if values[min_idx] < self.global_best_value:\n            self.global_best_value = values[min_idx]\n            self.global_best_position = self.population[min_idx]", "name": "EnhancedHybridEvolutionaryOptimizer", "description": "Enhanced Hybrid Evolutionary Optimizer with adaptive parameter updates and streamlined operations for improved efficiency.", "configspace": "", "generation": 70, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e07d1435-043f-494b-a8c6-2edea7eb5022", "metadata": {"aucs": [0.9100591978626473, 0.9044994117948806, 0.9154336842636235, 0.9060103639050422, 0.9061391613313525, 0.9186077209996638, 0.9056705520135132, 0.9085925349984292, 0.9060124343834618, 0.7730828893847684, 0.8290502310361922, 0.8433864961489217, 0.8312245812080997, 0.8340442826557538, 0.8318469290819372, 0.8376990055353755, 0.8365199384611939, 0.8156869958531187, 0.1406765849888887, 0.140506372375391, 0.18353521923892546, 0.15129937916775782, 0.1046874889256807, 0.11439911781901957, 0.15629979223610813, 0.15611616321745403, 0.1561052925699099, 0.14013839286592755, 0.17452573535150973, 0.11540495731223765, 0.1156206018306557, 0.10831642030496424, 0.15526460281379828, 0.11842277911435717, 0.12019151191090038, 0.1389970741807368, 0.9844978500259234, 0.9878583520742972, 0.9860396912703203, 0.9765340157415099, 0.99020637002614, 0.9730286692477783, 0.9881108867731351, 0.9772940355636521, 0.979675598527954, 0.8163261296977598, 0.7927101800514582, 0.7987382064052436, 0.7781791506676524, 0.783191372968221, 0.7780827572341735, 0.7781443267791177, 0.7742847819580602, 0.7998653518138723, 0.22584838531396523, 0.16774631889481229, 0.37906250135893227, 0.3611115926407116, 0.8798075339726283, 0.9153577231389178, 0.24003600712813555, 0.22101330361244054, 0.23764838807369149, 0.26004701558544363, 0.23540159031490016, 0.24989713900847632, 0.22680064384768517, 0.251642271368276, 0.2180049044469704, 0.23205668148330483, 0.13275316372557477, 0.2285539082627912, 0.2431205024809906, 0.24993365464160966, 0.13242125883287714, 0.25215713971093656, 0.27298122456243046, 0.24847233289289583, 0.13379038283877742, 0.2655833487135125, 0.13045599196106739, 0.0002560216272237126, 9.999999999998899e-05, 0.003126293070108699, 0.0059105933928934595, 9.999999999998899e-05, 0.04523079896543514, 0.04723932887017834, 0.07902570418786214, 9.999999999998899e-05, 0.050122098842234064, 0.04015492592906611, 0.08271742895951761, 0.027306887879120167, 0.06508677800414897, 0.02049929320125743, 0.09713586991531342, 0.15712638371921317, 0.11022232352414285, 0.06576639221505198, 0.1519460464489928, 0.12726867277121545, 0.10716522162129183, 0.09709840064680808, 0.08131663224438523, 0.10436034858926801, 0.12132644139856708, 0.16206841846628484, 0.1711229837836591, 0.09204838505583868, 0.08204523903971894, 0.168560471686529, 0.32234421286555137, 0.20436819976602005, 0.11151399958606367, 0.164371841347285, 0.18502712077387518, 0.5749047734775052, 0.6228785039767997, 0.5667034018060592, 0.565140735273234, 0.5730399749906032, 0.5845038944758993, 0.6009485646662722, 0.6226296560156406, 0.6064738294828372, 0.14341250325562938, 0.13589840746982174, 0.13953575619146885, 0.18581627069944018, 0.15393706432096477, 0.15453106535274497, 0.14324418264310756, 0.15579236218308412, 0.15417209268601395, 0.18325476114447747, 0.1983344519363387, 0.5666071466637517, 0.20530950170253925, 0.2860054254410084, 0.2039879652841594, 0.19213878040529198, 0.4694021457172788, 0.4823459145296156, 0.41753911750022, 0.5278416303442346, 0.32891811038756946, 0.3579442904603769, 0.729749454947026, 0.43246987967548667, 0.6014523500612458, 0.8006513685740014, 0.7663538699945746, 0.3532957097057746, 0.4767899730772923, 0.3895938908436154, 0.24297016192043597, 0.3212427050482427, 0.3250317590787525, 0.3699037912019516, 0.31708398080009825, 0.24846584304828434, 0.252456253590722, 0.21983366961517237, 0.2090210428309578, 0.2038946070676937, 0.22702518176653774, 0.2109483599633346, 0.21367448521501442, 0.23479255198876559, 0.20676407174588007, 0.843407571921244, 0.18573794943702793, 0.22205281561123413, 0.18903397501048458, 0.20803824406741, 0.20545068398197885, 0.19673041589905482, 0.20683748299019444, 0.22465888769340714, 0.18693136517037878, 0.16452066724486636, 0.9197008978016044, 0.16966611035877666, 0.8911130272184961, 0.20100485603065887, 0.9160888284160961, 0.916277188214941, 0.9345571638639282, 0.766171361138878, 0.15625654720548954, 0.6463990092759608, 0.21153281681127678, 0.1681391546894433, 0.2109946427634498, 0.16787466898611236, 0.15605983093474807, 0.21010576527728553, 0.17069332062853648, 0.1787636336078573, 0.18434060164655353, 0.1880303769609305, 0.18128583757148276, 0.19361805152300893, 0.19349239690934605, 0.1732346420185279, 0.19106264881543777, 0.09644062326573566, 0.08675541689021993, 0.09036361081409816, 0.09243727137110924, 0.09190735958825058, 0.08809183170705459, 0.09734913181094307, 0.12875323683854967, 0.09236489292419214]}, "mutation_prompt": null}
{"id": "cee0baa1-a062-467e-a80b-9b17358ec3dd", "solution": "import numpy as np\n\nclass EnhancedHybridEvolutionaryOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(25, budget // 10)  # Adjusted population size\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, dim))\n        self.velocities = np.random.uniform(-0.25, 0.25, (self.pop_size, dim))\n        self.personal_best_positions = self.population.copy()\n        self.personal_best_values = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evals = 0\n        self.F = 0.6  # Adaptive scaling factor\n        self.CR = 0.9  # Further increased crossover rate\n        self.omega = 0.2  # Reduced inertia weight for faster convergence\n        self.phi_p = 1.6  # Enhanced cognitive component\n        self.phi_g = 1.4  # Enhanced social component\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evals < self.budget:\n            for i in range(self.pop_size):\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), *self.bounds)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                trial_value = func(trial)\n                self.evals += 1\n                if trial_value < self.personal_best_values[i]:\n                    self.personal_best_positions[i] = trial\n                    self.personal_best_values[i] = trial_value\n                if trial_value < self.global_best_value:\n                    self.global_best_value = trial_value\n                    self.global_best_position = trial\n\n            rand_vals = np.random.rand(2, self.pop_size, self.dim)\n            self.velocities = (self.omega * self.velocities +\n                               rand_vals[0] * self.phi_p * (self.personal_best_positions - self.population) +\n                               rand_vals[1] * self.phi_g * (self.global_best_position - self.population))\n            np.clip(self.population + self.velocities, *self.bounds, out=self.population)\n\n        return self.global_best_value\n\n    def evaluate_population(self, func):\n        values = np.apply_along_axis(func, 1, self.population)\n        self.evals += self.pop_size\n        better_mask = values < self.personal_best_values\n        np.copyto(self.personal_best_positions, self.population, where=better_mask[:, np.newaxis])\n        np.copyto(self.personal_best_values, values, where=better_mask)\n        min_idx = values.argmin()\n        if values[min_idx] < self.global_best_value:\n            self.global_best_value = values[min_idx]\n            self.global_best_position = self.population[min_idx]", "name": "EnhancedHybridEvolutionaryOptimizer", "description": "Enhanced Hybrid Evolutionary Optimizer with adaptive parameter updates and streamlined operations for improved efficiency.", "configspace": "", "generation": 70, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e07d1435-043f-494b-a8c6-2edea7eb5022", "metadata": {"aucs": [0.9100591978626473, 0.9044994117948806, 0.9154336842636235, 0.9060103639050422, 0.9061391613313525, 0.9186077209996638, 0.9056705520135132, 0.9085925349984292, 0.9060124343834618, 0.7730828893847684, 0.8290502310361922, 0.8433864961489217, 0.8312245812080997, 0.8340442826557538, 0.8318469290819372, 0.8376990055353755, 0.8365199384611939, 0.8156869958531187, 0.1406765849888887, 0.140506372375391, 0.18353521923892546, 0.15129937916775782, 0.1046874889256807, 0.11439911781901957, 0.15629979223610813, 0.15611616321745403, 0.1561052925699099, 0.14013839286592755, 0.17452573535150973, 0.11540495731223765, 0.1156206018306557, 0.10831642030496424, 0.15526460281379828, 0.11842277911435717, 0.12019151191090038, 0.1389970741807368, 0.9844978500259234, 0.9878583520742972, 0.9860396912703203, 0.9765340157415099, 0.99020637002614, 0.9730286692477783, 0.9881108867731351, 0.9772940355636521, 0.979675598527954, 0.8163261296977598, 0.7927101800514582, 0.7987382064052436, 0.7781791506676524, 0.783191372968221, 0.7780827572341735, 0.7781443267791177, 0.7742847819580602, 0.7998653518138723, 0.22584838531396523, 0.16774631889481229, 0.37906250135893227, 0.3611115926407116, 0.8798075339726283, 0.9153577231389178, 0.24003600712813555, 0.22101330361244054, 0.23764838807369149, 0.26004701558544363, 0.23540159031490016, 0.24989713900847632, 0.22680064384768517, 0.251642271368276, 0.2180049044469704, 0.23205668148330483, 0.13275316372557477, 0.2285539082627912, 0.2431205024809906, 0.24993365464160966, 0.13242125883287714, 0.25215713971093656, 0.27298122456243046, 0.24847233289289583, 0.13379038283877742, 0.2655833487135125, 0.13045599196106739, 0.0002560216272237126, 9.999999999998899e-05, 0.003126293070108699, 0.0059105933928934595, 9.999999999998899e-05, 0.04523079896543514, 0.04723932887017834, 0.07902570418786214, 9.999999999998899e-05, 0.050122098842234064, 0.04015492592906611, 0.08271742895951761, 0.027306887879120167, 0.06508677800414897, 0.02049929320125743, 0.09713586991531342, 0.15712638371921317, 0.11022232352414285, 0.06576639221505198, 0.1519460464489928, 0.12726867277121545, 0.10716522162129183, 0.09709840064680808, 0.08131663224438523, 0.10436034858926801, 0.12132644139856708, 0.16206841846628484, 0.1711229837836591, 0.09204838505583868, 0.08204523903971894, 0.168560471686529, 0.32234421286555137, 0.20436819976602005, 0.11151399958606367, 0.164371841347285, 0.18502712077387518, 0.5749047734775052, 0.6228785039767997, 0.5667034018060592, 0.565140735273234, 0.5730399749906032, 0.5845038944758993, 0.6009485646662722, 0.6226296560156406, 0.6064738294828372, 0.14341250325562938, 0.13589840746982174, 0.13953575619146885, 0.18581627069944018, 0.15393706432096477, 0.15453106535274497, 0.14324418264310756, 0.15579236218308412, 0.15417209268601395, 0.18325476114447747, 0.1983344519363387, 0.5666071466637517, 0.20530950170253925, 0.2860054254410084, 0.2039879652841594, 0.19213878040529198, 0.4694021457172788, 0.4823459145296156, 0.41753911750022, 0.5278416303442346, 0.32891811038756946, 0.3579442904603769, 0.729749454947026, 0.43246987967548667, 0.6014523500612458, 0.8006513685740014, 0.7663538699945746, 0.3532957097057746, 0.4767899730772923, 0.3895938908436154, 0.24297016192043597, 0.3212427050482427, 0.3250317590787525, 0.3699037912019516, 0.31708398080009825, 0.24846584304828434, 0.252456253590722, 0.21983366961517237, 0.2090210428309578, 0.2038946070676937, 0.22702518176653774, 0.2109483599633346, 0.21367448521501442, 0.23479255198876559, 0.20676407174588007, 0.843407571921244, 0.18573794943702793, 0.22205281561123413, 0.18903397501048458, 0.20803824406741, 0.20545068398197885, 0.19673041589905482, 0.20683748299019444, 0.22465888769340714, 0.18693136517037878, 0.16452066724486636, 0.9197008978016044, 0.16966611035877666, 0.8911130272184961, 0.20100485603065887, 0.9160888284160961, 0.916277188214941, 0.9345571638639282, 0.766171361138878, 0.15625654720548954, 0.6463990092759608, 0.21153281681127678, 0.1681391546894433, 0.2109946427634498, 0.16787466898611236, 0.15605983093474807, 0.21010576527728553, 0.17069332062853648, 0.1787636336078573, 0.18434060164655353, 0.1880303769609305, 0.18128583757148276, 0.19361805152300893, 0.19349239690934605, 0.1732346420185279, 0.19106264881543777, 0.09644062326573566, 0.08675541689021993, 0.09036361081409816, 0.09243727137110924, 0.09190735958825058, 0.08809183170705459, 0.09734913181094307, 0.12875323683854967, 0.09236489292419214]}, "mutation_prompt": null}
{"id": "7ba183fe-2225-4753-8640-365d732a9e8e", "solution": "import numpy as np\n\nclass EnhancedHybridEvolutionaryOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(25, budget // 10)  # Adjusted population size\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, dim))\n        self.velocities = np.random.uniform(-0.25, 0.25, (self.pop_size, dim))\n        self.personal_best_positions = self.population.copy()\n        self.personal_best_values = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evals = 0\n        self.F = 0.6  # Adaptive scaling factor\n        self.CR = 0.9  # Further increased crossover rate\n        self.omega = 0.2  # Reduced inertia weight for faster convergence\n        self.phi_p = 1.6  # Enhanced cognitive component\n        self.phi_g = 1.4  # Enhanced social component\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evals < self.budget:\n            for i in range(self.pop_size):\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), *self.bounds)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                trial_value = func(trial)\n                self.evals += 1\n                if trial_value < self.personal_best_values[i]:\n                    self.personal_best_positions[i] = trial\n                    self.personal_best_values[i] = trial_value\n                if trial_value < self.global_best_value:\n                    self.global_best_value = trial_value\n                    self.global_best_position = trial\n\n            rand_vals = np.random.rand(2, self.pop_size, self.dim)\n            self.velocities = (self.omega * self.velocities +\n                               rand_vals[0] * self.phi_p * (self.personal_best_positions - self.population) +\n                               rand_vals[1] * self.phi_g * (self.global_best_position - self.population))\n            np.clip(self.population + self.velocities, *self.bounds, out=self.population)\n\n        return self.global_best_value\n\n    def evaluate_population(self, func):\n        values = np.apply_along_axis(func, 1, self.population)\n        self.evals += self.pop_size\n        better_mask = values < self.personal_best_values\n        np.copyto(self.personal_best_positions, self.population, where=better_mask[:, np.newaxis])\n        np.copyto(self.personal_best_values, values, where=better_mask)\n        min_idx = values.argmin()\n        if values[min_idx] < self.global_best_value:\n            self.global_best_value = values[min_idx]\n            self.global_best_position = self.population[min_idx]", "name": "EnhancedHybridEvolutionaryOptimizer", "description": "Enhanced Hybrid Evolutionary Optimizer with adaptive parameter updates and streamlined operations for improved efficiency.", "configspace": "", "generation": 70, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e07d1435-043f-494b-a8c6-2edea7eb5022", "metadata": {"aucs": [0.9100591978626473, 0.9044994117948806, 0.9154336842636235, 0.9060103639050422, 0.9061391613313525, 0.9186077209996638, 0.9056705520135132, 0.9085925349984292, 0.9060124343834618, 0.7730828893847684, 0.8290502310361922, 0.8433864961489217, 0.8312245812080997, 0.8340442826557538, 0.8318469290819372, 0.8376990055353755, 0.8365199384611939, 0.8156869958531187, 0.1406765849888887, 0.140506372375391, 0.18353521923892546, 0.15129937916775782, 0.1046874889256807, 0.11439911781901957, 0.15629979223610813, 0.15611616321745403, 0.1561052925699099, 0.14013839286592755, 0.17452573535150973, 0.11540495731223765, 0.1156206018306557, 0.10831642030496424, 0.15526460281379828, 0.11842277911435717, 0.12019151191090038, 0.1389970741807368, 0.9844978500259234, 0.9878583520742972, 0.9860396912703203, 0.9765340157415099, 0.99020637002614, 0.9730286692477783, 0.9881108867731351, 0.9772940355636521, 0.979675598527954, 0.8163261296977598, 0.7927101800514582, 0.7987382064052436, 0.7781791506676524, 0.783191372968221, 0.7780827572341735, 0.7781443267791177, 0.7742847819580602, 0.7998653518138723, 0.22584838531396523, 0.16774631889481229, 0.37906250135893227, 0.3611115926407116, 0.8798075339726283, 0.9153577231389178, 0.24003600712813555, 0.22101330361244054, 0.23764838807369149, 0.26004701558544363, 0.23540159031490016, 0.24989713900847632, 0.22680064384768517, 0.251642271368276, 0.2180049044469704, 0.23205668148330483, 0.13275316372557477, 0.2285539082627912, 0.2431205024809906, 0.24993365464160966, 0.13242125883287714, 0.25215713971093656, 0.27298122456243046, 0.24847233289289583, 0.13379038283877742, 0.2655833487135125, 0.13045599196106739, 0.0002560216272237126, 9.999999999998899e-05, 0.003126293070108699, 0.0059105933928934595, 9.999999999998899e-05, 0.04523079896543514, 0.04723932887017834, 0.07902570418786214, 9.999999999998899e-05, 0.050122098842234064, 0.04015492592906611, 0.08271742895951761, 0.027306887879120167, 0.06508677800414897, 0.02049929320125743, 0.09713586991531342, 0.15712638371921317, 0.11022232352414285, 0.06576639221505198, 0.1519460464489928, 0.12726867277121545, 0.10716522162129183, 0.09709840064680808, 0.08131663224438523, 0.10436034858926801, 0.12132644139856708, 0.16206841846628484, 0.1711229837836591, 0.09204838505583868, 0.08204523903971894, 0.168560471686529, 0.32234421286555137, 0.20436819976602005, 0.11151399958606367, 0.164371841347285, 0.18502712077387518, 0.5749047734775052, 0.6228785039767997, 0.5667034018060592, 0.565140735273234, 0.5730399749906032, 0.5845038944758993, 0.6009485646662722, 0.6226296560156406, 0.6064738294828372, 0.14341250325562938, 0.13589840746982174, 0.13953575619146885, 0.18581627069944018, 0.15393706432096477, 0.15453106535274497, 0.14324418264310756, 0.15579236218308412, 0.15417209268601395, 0.18325476114447747, 0.1983344519363387, 0.5666071466637517, 0.20530950170253925, 0.2860054254410084, 0.2039879652841594, 0.19213878040529198, 0.4694021457172788, 0.4823459145296156, 0.41753911750022, 0.5278416303442346, 0.32891811038756946, 0.3579442904603769, 0.729749454947026, 0.43246987967548667, 0.6014523500612458, 0.8006513685740014, 0.7663538699945746, 0.3532957097057746, 0.4767899730772923, 0.3895938908436154, 0.24297016192043597, 0.3212427050482427, 0.3250317590787525, 0.3699037912019516, 0.31708398080009825, 0.24846584304828434, 0.252456253590722, 0.21983366961517237, 0.2090210428309578, 0.2038946070676937, 0.22702518176653774, 0.2109483599633346, 0.21367448521501442, 0.23479255198876559, 0.20676407174588007, 0.843407571921244, 0.18573794943702793, 0.22205281561123413, 0.18903397501048458, 0.20803824406741, 0.20545068398197885, 0.19673041589905482, 0.20683748299019444, 0.22465888769340714, 0.18693136517037878, 0.16452066724486636, 0.9197008978016044, 0.16966611035877666, 0.8911130272184961, 0.20100485603065887, 0.9160888284160961, 0.916277188214941, 0.9345571638639282, 0.766171361138878, 0.15625654720548954, 0.6463990092759608, 0.21153281681127678, 0.1681391546894433, 0.2109946427634498, 0.16787466898611236, 0.15605983093474807, 0.21010576527728553, 0.17069332062853648, 0.1787636336078573, 0.18434060164655353, 0.1880303769609305, 0.18128583757148276, 0.19361805152300893, 0.19349239690934605, 0.1732346420185279, 0.19106264881543777, 0.09644062326573566, 0.08675541689021993, 0.09036361081409816, 0.09243727137110924, 0.09190735958825058, 0.08809183170705459, 0.09734913181094307, 0.12875323683854967, 0.09236489292419214]}, "mutation_prompt": null}
{"id": "e68270c9-d857-4af8-beaf-f599325796db", "solution": "import numpy as np\n\nclass EnhancedHybridEvolutionaryOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(25, budget // 10)  # Adjusted population size\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, dim))\n        self.velocities = np.random.uniform(-0.25, 0.25, (self.pop_size, dim))\n        self.personal_best_positions = self.population.copy()\n        self.personal_best_values = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evals = 0\n        self.F = 0.6  # Adaptive scaling factor\n        self.CR = 0.9  # Further increased crossover rate\n        self.omega = 0.2  # Reduced inertia weight for faster convergence\n        self.phi_p = 1.6  # Enhanced cognitive component\n        self.phi_g = 1.4  # Enhanced social component\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evals < self.budget:\n            for i in range(self.pop_size):\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), *self.bounds)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                trial_value = func(trial)\n                self.evals += 1\n                if trial_value < self.personal_best_values[i]:\n                    self.personal_best_positions[i] = trial\n                    self.personal_best_values[i] = trial_value\n                if trial_value < self.global_best_value:\n                    self.global_best_value = trial_value\n                    self.global_best_position = trial\n\n            rand_vals = np.random.rand(2, self.pop_size, self.dim)\n            self.velocities = (self.omega * self.velocities +\n                               rand_vals[0] * self.phi_p * (self.personal_best_positions - self.population) +\n                               rand_vals[1] * self.phi_g * (self.global_best_position - self.population))\n            np.clip(self.population + self.velocities, *self.bounds, out=self.population)\n\n        return self.global_best_value\n\n    def evaluate_population(self, func):\n        values = np.apply_along_axis(func, 1, self.population)\n        self.evals += self.pop_size\n        better_mask = values < self.personal_best_values\n        np.copyto(self.personal_best_positions, self.population, where=better_mask[:, np.newaxis])\n        np.copyto(self.personal_best_values, values, where=better_mask)\n        min_idx = values.argmin()\n        if values[min_idx] < self.global_best_value:\n            self.global_best_value = values[min_idx]\n            self.global_best_position = self.population[min_idx]", "name": "EnhancedHybridEvolutionaryOptimizer", "description": "Enhanced Hybrid Evolutionary Optimizer with adaptive parameter updates and streamlined operations for improved efficiency.", "configspace": "", "generation": 70, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e07d1435-043f-494b-a8c6-2edea7eb5022", "metadata": {"aucs": [0.9100591978626473, 0.9044994117948806, 0.9154336842636235, 0.9060103639050422, 0.9061391613313525, 0.9186077209996638, 0.9056705520135132, 0.9085925349984292, 0.9060124343834618, 0.7730828893847684, 0.8290502310361922, 0.8433864961489217, 0.8312245812080997, 0.8340442826557538, 0.8318469290819372, 0.8376990055353755, 0.8365199384611939, 0.8156869958531187, 0.1406765849888887, 0.140506372375391, 0.18353521923892546, 0.15129937916775782, 0.1046874889256807, 0.11439911781901957, 0.15629979223610813, 0.15611616321745403, 0.1561052925699099, 0.14013839286592755, 0.17452573535150973, 0.11540495731223765, 0.1156206018306557, 0.10831642030496424, 0.15526460281379828, 0.11842277911435717, 0.12019151191090038, 0.1389970741807368, 0.9844978500259234, 0.9878583520742972, 0.9860396912703203, 0.9765340157415099, 0.99020637002614, 0.9730286692477783, 0.9881108867731351, 0.9772940355636521, 0.979675598527954, 0.8163261296977598, 0.7927101800514582, 0.7987382064052436, 0.7781791506676524, 0.783191372968221, 0.7780827572341735, 0.7781443267791177, 0.7742847819580602, 0.7998653518138723, 0.22584838531396523, 0.16774631889481229, 0.37906250135893227, 0.3611115926407116, 0.8798075339726283, 0.9153577231389178, 0.24003600712813555, 0.22101330361244054, 0.23764838807369149, 0.26004701558544363, 0.23540159031490016, 0.24989713900847632, 0.22680064384768517, 0.251642271368276, 0.2180049044469704, 0.23205668148330483, 0.13275316372557477, 0.2285539082627912, 0.2431205024809906, 0.24993365464160966, 0.13242125883287714, 0.25215713971093656, 0.27298122456243046, 0.24847233289289583, 0.13379038283877742, 0.2655833487135125, 0.13045599196106739, 0.0002560216272237126, 9.999999999998899e-05, 0.003126293070108699, 0.0059105933928934595, 9.999999999998899e-05, 0.04523079896543514, 0.04723932887017834, 0.07902570418786214, 9.999999999998899e-05, 0.050122098842234064, 0.04015492592906611, 0.08271742895951761, 0.027306887879120167, 0.06508677800414897, 0.02049929320125743, 0.09713586991531342, 0.15712638371921317, 0.11022232352414285, 0.06576639221505198, 0.1519460464489928, 0.12726867277121545, 0.10716522162129183, 0.09709840064680808, 0.08131663224438523, 0.10436034858926801, 0.12132644139856708, 0.16206841846628484, 0.1711229837836591, 0.09204838505583868, 0.08204523903971894, 0.168560471686529, 0.32234421286555137, 0.20436819976602005, 0.11151399958606367, 0.164371841347285, 0.18502712077387518, 0.5749047734775052, 0.6228785039767997, 0.5667034018060592, 0.565140735273234, 0.5730399749906032, 0.5845038944758993, 0.6009485646662722, 0.6226296560156406, 0.6064738294828372, 0.14341250325562938, 0.13589840746982174, 0.13953575619146885, 0.18581627069944018, 0.15393706432096477, 0.15453106535274497, 0.14324418264310756, 0.15579236218308412, 0.15417209268601395, 0.18325476114447747, 0.1983344519363387, 0.5666071466637517, 0.20530950170253925, 0.2860054254410084, 0.2039879652841594, 0.19213878040529198, 0.4694021457172788, 0.4823459145296156, 0.41753911750022, 0.5278416303442346, 0.32891811038756946, 0.3579442904603769, 0.729749454947026, 0.43246987967548667, 0.6014523500612458, 0.8006513685740014, 0.7663538699945746, 0.3532957097057746, 0.4767899730772923, 0.3895938908436154, 0.24297016192043597, 0.3212427050482427, 0.3250317590787525, 0.3699037912019516, 0.31708398080009825, 0.24846584304828434, 0.252456253590722, 0.21983366961517237, 0.2090210428309578, 0.2038946070676937, 0.22702518176653774, 0.2109483599633346, 0.21367448521501442, 0.23479255198876559, 0.20676407174588007, 0.843407571921244, 0.18573794943702793, 0.22205281561123413, 0.18903397501048458, 0.20803824406741, 0.20545068398197885, 0.19673041589905482, 0.20683748299019444, 0.22465888769340714, 0.18693136517037878, 0.16452066724486636, 0.9197008978016044, 0.16966611035877666, 0.8911130272184961, 0.20100485603065887, 0.9160888284160961, 0.916277188214941, 0.9345571638639282, 0.766171361138878, 0.15625654720548954, 0.6463990092759608, 0.21153281681127678, 0.1681391546894433, 0.2109946427634498, 0.16787466898611236, 0.15605983093474807, 0.21010576527728553, 0.17069332062853648, 0.1787636336078573, 0.18434060164655353, 0.1880303769609305, 0.18128583757148276, 0.19361805152300893, 0.19349239690934605, 0.1732346420185279, 0.19106264881543777, 0.09644062326573566, 0.08675541689021993, 0.09036361081409816, 0.09243727137110924, 0.09190735958825058, 0.08809183170705459, 0.09734913181094307, 0.12875323683854967, 0.09236489292419214]}, "mutation_prompt": null}
{"id": "16f56b9c-c48b-4a23-9bde-9fa030f8b713", "solution": "import numpy as np\n\nclass EnhancedHybridEvolutionaryOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(25, budget // 10)  # Adjusted population size\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, dim))\n        self.velocities = np.random.uniform(-0.25, 0.25, (self.pop_size, dim))\n        self.personal_best_positions = self.population.copy()\n        self.personal_best_values = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evals = 0\n        self.F = 0.6  # Adaptive scaling factor\n        self.CR = 0.9  # Further increased crossover rate\n        self.omega = 0.2  # Reduced inertia weight for faster convergence\n        self.phi_p = 1.6  # Enhanced cognitive component\n        self.phi_g = 1.4  # Enhanced social component\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evals < self.budget:\n            for i in range(self.pop_size):\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), *self.bounds)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                trial_value = func(trial)\n                self.evals += 1\n                if trial_value < self.personal_best_values[i]:\n                    self.personal_best_positions[i] = trial\n                    self.personal_best_values[i] = trial_value\n                if trial_value < self.global_best_value:\n                    self.global_best_value = trial_value\n                    self.global_best_position = trial\n\n            rand_vals = np.random.rand(2, self.pop_size, self.dim)\n            self.velocities = (self.omega * self.velocities +\n                               rand_vals[0] * self.phi_p * (self.personal_best_positions - self.population) +\n                               rand_vals[1] * self.phi_g * (self.global_best_position - self.population))\n            np.clip(self.population + self.velocities, *self.bounds, out=self.population)\n\n        return self.global_best_value\n\n    def evaluate_population(self, func):\n        values = np.apply_along_axis(func, 1, self.population)\n        self.evals += self.pop_size\n        better_mask = values < self.personal_best_values\n        np.copyto(self.personal_best_positions, self.population, where=better_mask[:, np.newaxis])\n        np.copyto(self.personal_best_values, values, where=better_mask)\n        min_idx = values.argmin()\n        if values[min_idx] < self.global_best_value:\n            self.global_best_value = values[min_idx]\n            self.global_best_position = self.population[min_idx]", "name": "EnhancedHybridEvolutionaryOptimizer", "description": "Enhanced Hybrid Evolutionary Optimizer with adaptive parameter updates and streamlined operations for improved efficiency.", "configspace": "", "generation": 70, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e07d1435-043f-494b-a8c6-2edea7eb5022", "metadata": {"aucs": [0.9100591978626473, 0.9044994117948806, 0.9154336842636235, 0.9060103639050422, 0.9061391613313525, 0.9186077209996638, 0.9056705520135132, 0.9085925349984292, 0.9060124343834618, 0.7730828893847684, 0.8290502310361922, 0.8433864961489217, 0.8312245812080997, 0.8340442826557538, 0.8318469290819372, 0.8376990055353755, 0.8365199384611939, 0.8156869958531187, 0.1406765849888887, 0.140506372375391, 0.18353521923892546, 0.15129937916775782, 0.1046874889256807, 0.11439911781901957, 0.15629979223610813, 0.15611616321745403, 0.1561052925699099, 0.14013839286592755, 0.17452573535150973, 0.11540495731223765, 0.1156206018306557, 0.10831642030496424, 0.15526460281379828, 0.11842277911435717, 0.12019151191090038, 0.1389970741807368, 0.9844978500259234, 0.9878583520742972, 0.9860396912703203, 0.9765340157415099, 0.99020637002614, 0.9730286692477783, 0.9881108867731351, 0.9772940355636521, 0.979675598527954, 0.8163261296977598, 0.7927101800514582, 0.7987382064052436, 0.7781791506676524, 0.783191372968221, 0.7780827572341735, 0.7781443267791177, 0.7742847819580602, 0.7998653518138723, 0.22584838531396523, 0.16774631889481229, 0.37906250135893227, 0.3611115926407116, 0.8798075339726283, 0.9153577231389178, 0.24003600712813555, 0.22101330361244054, 0.23764838807369149, 0.26004701558544363, 0.23540159031490016, 0.24989713900847632, 0.22680064384768517, 0.251642271368276, 0.2180049044469704, 0.23205668148330483, 0.13275316372557477, 0.2285539082627912, 0.2431205024809906, 0.24993365464160966, 0.13242125883287714, 0.25215713971093656, 0.27298122456243046, 0.24847233289289583, 0.13379038283877742, 0.2655833487135125, 0.13045599196106739, 0.0002560216272237126, 9.999999999998899e-05, 0.003126293070108699, 0.0059105933928934595, 9.999999999998899e-05, 0.04523079896543514, 0.04723932887017834, 0.07902570418786214, 9.999999999998899e-05, 0.050122098842234064, 0.04015492592906611, 0.08271742895951761, 0.027306887879120167, 0.06508677800414897, 0.02049929320125743, 0.09713586991531342, 0.15712638371921317, 0.11022232352414285, 0.06576639221505198, 0.1519460464489928, 0.12726867277121545, 0.10716522162129183, 0.09709840064680808, 0.08131663224438523, 0.10436034858926801, 0.12132644139856708, 0.16206841846628484, 0.1711229837836591, 0.09204838505583868, 0.08204523903971894, 0.168560471686529, 0.32234421286555137, 0.20436819976602005, 0.11151399958606367, 0.164371841347285, 0.18502712077387518, 0.5749047734775052, 0.6228785039767997, 0.5667034018060592, 0.565140735273234, 0.5730399749906032, 0.5845038944758993, 0.6009485646662722, 0.6226296560156406, 0.6064738294828372, 0.14341250325562938, 0.13589840746982174, 0.13953575619146885, 0.18581627069944018, 0.15393706432096477, 0.15453106535274497, 0.14324418264310756, 0.15579236218308412, 0.15417209268601395, 0.18325476114447747, 0.1983344519363387, 0.5666071466637517, 0.20530950170253925, 0.2860054254410084, 0.2039879652841594, 0.19213878040529198, 0.4694021457172788, 0.4823459145296156, 0.41753911750022, 0.5278416303442346, 0.32891811038756946, 0.3579442904603769, 0.729749454947026, 0.43246987967548667, 0.6014523500612458, 0.8006513685740014, 0.7663538699945746, 0.3532957097057746, 0.4767899730772923, 0.3895938908436154, 0.24297016192043597, 0.3212427050482427, 0.3250317590787525, 0.3699037912019516, 0.31708398080009825, 0.24846584304828434, 0.252456253590722, 0.21983366961517237, 0.2090210428309578, 0.2038946070676937, 0.22702518176653774, 0.2109483599633346, 0.21367448521501442, 0.23479255198876559, 0.20676407174588007, 0.843407571921244, 0.18573794943702793, 0.22205281561123413, 0.18903397501048458, 0.20803824406741, 0.20545068398197885, 0.19673041589905482, 0.20683748299019444, 0.22465888769340714, 0.18693136517037878, 0.16452066724486636, 0.9197008978016044, 0.16966611035877666, 0.8911130272184961, 0.20100485603065887, 0.9160888284160961, 0.916277188214941, 0.9345571638639282, 0.766171361138878, 0.15625654720548954, 0.6463990092759608, 0.21153281681127678, 0.1681391546894433, 0.2109946427634498, 0.16787466898611236, 0.15605983093474807, 0.21010576527728553, 0.17069332062853648, 0.1787636336078573, 0.18434060164655353, 0.1880303769609305, 0.18128583757148276, 0.19361805152300893, 0.19349239690934605, 0.1732346420185279, 0.19106264881543777, 0.09644062326573566, 0.08675541689021993, 0.09036361081409816, 0.09243727137110924, 0.09190735958825058, 0.08809183170705459, 0.09734913181094307, 0.12875323683854967, 0.09236489292419214]}, "mutation_prompt": null}
{"id": "28017686-5b7a-4b32-89e2-a443180e0857", "solution": "import numpy as np\n\nclass EnhancedHybridEvolutionaryOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(25, budget // 10)  # Adjusted population size\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, dim))\n        self.velocities = np.random.uniform(-0.25, 0.25, (self.pop_size, dim))\n        self.personal_best_positions = self.population.copy()\n        self.personal_best_values = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evals = 0\n        self.F = 0.6  # Adaptive scaling factor\n        self.CR = 0.9  # Further increased crossover rate\n        self.omega = 0.2  # Reduced inertia weight for faster convergence\n        self.phi_p = 1.6  # Enhanced cognitive component\n        self.phi_g = 1.4  # Enhanced social component\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evals < self.budget:\n            for i in range(self.pop_size):\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), *self.bounds)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                trial_value = func(trial)\n                self.evals += 1\n                if trial_value < self.personal_best_values[i]:\n                    self.personal_best_positions[i] = trial\n                    self.personal_best_values[i] = trial_value\n                if trial_value < self.global_best_value:\n                    self.global_best_value = trial_value\n                    self.global_best_position = trial\n\n            rand_vals = np.random.rand(2, self.pop_size, self.dim)\n            self.velocities = (self.omega * self.velocities +\n                               rand_vals[0] * self.phi_p * (self.personal_best_positions - self.population) +\n                               rand_vals[1] * self.phi_g * (self.global_best_position - self.population))\n            np.clip(self.population + self.velocities, *self.bounds, out=self.population)\n\n        return self.global_best_value\n\n    def evaluate_population(self, func):\n        values = np.apply_along_axis(func, 1, self.population)\n        self.evals += self.pop_size\n        better_mask = values < self.personal_best_values\n        np.copyto(self.personal_best_positions, self.population, where=better_mask[:, np.newaxis])\n        np.copyto(self.personal_best_values, values, where=better_mask)\n        min_idx = values.argmin()\n        if values[min_idx] < self.global_best_value:\n            self.global_best_value = values[min_idx]\n            self.global_best_position = self.population[min_idx]", "name": "EnhancedHybridEvolutionaryOptimizer", "description": "Enhanced Hybrid Evolutionary Optimizer with adaptive parameter updates and streamlined operations for improved efficiency.", "configspace": "", "generation": 70, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e07d1435-043f-494b-a8c6-2edea7eb5022", "metadata": {"aucs": [0.9100591978626473, 0.9044994117948806, 0.9154336842636235, 0.9060103639050422, 0.9061391613313525, 0.9186077209996638, 0.9056705520135132, 0.9085925349984292, 0.9060124343834618, 0.7730828893847684, 0.8290502310361922, 0.8433864961489217, 0.8312245812080997, 0.8340442826557538, 0.8318469290819372, 0.8376990055353755, 0.8365199384611939, 0.8156869958531187, 0.1406765849888887, 0.140506372375391, 0.18353521923892546, 0.15129937916775782, 0.1046874889256807, 0.11439911781901957, 0.15629979223610813, 0.15611616321745403, 0.1561052925699099, 0.14013839286592755, 0.17452573535150973, 0.11540495731223765, 0.1156206018306557, 0.10831642030496424, 0.15526460281379828, 0.11842277911435717, 0.12019151191090038, 0.1389970741807368, 0.9844978500259234, 0.9878583520742972, 0.9860396912703203, 0.9765340157415099, 0.99020637002614, 0.9730286692477783, 0.9881108867731351, 0.9772940355636521, 0.979675598527954, 0.8163261296977598, 0.7927101800514582, 0.7987382064052436, 0.7781791506676524, 0.783191372968221, 0.7780827572341735, 0.7781443267791177, 0.7742847819580602, 0.7998653518138723, 0.22584838531396523, 0.16774631889481229, 0.37906250135893227, 0.3611115926407116, 0.8798075339726283, 0.9153577231389178, 0.24003600712813555, 0.22101330361244054, 0.23764838807369149, 0.26004701558544363, 0.23540159031490016, 0.24989713900847632, 0.22680064384768517, 0.251642271368276, 0.2180049044469704, 0.23205668148330483, 0.13275316372557477, 0.2285539082627912, 0.2431205024809906, 0.24993365464160966, 0.13242125883287714, 0.25215713971093656, 0.27298122456243046, 0.24847233289289583, 0.13379038283877742, 0.2655833487135125, 0.13045599196106739, 0.0002560216272237126, 9.999999999998899e-05, 0.003126293070108699, 0.0059105933928934595, 9.999999999998899e-05, 0.04523079896543514, 0.04723932887017834, 0.07902570418786214, 9.999999999998899e-05, 0.050122098842234064, 0.04015492592906611, 0.08271742895951761, 0.027306887879120167, 0.06508677800414897, 0.02049929320125743, 0.09713586991531342, 0.15712638371921317, 0.11022232352414285, 0.06576639221505198, 0.1519460464489928, 0.12726867277121545, 0.10716522162129183, 0.09709840064680808, 0.08131663224438523, 0.10436034858926801, 0.12132644139856708, 0.16206841846628484, 0.1711229837836591, 0.09204838505583868, 0.08204523903971894, 0.168560471686529, 0.32234421286555137, 0.20436819976602005, 0.11151399958606367, 0.164371841347285, 0.18502712077387518, 0.5749047734775052, 0.6228785039767997, 0.5667034018060592, 0.565140735273234, 0.5730399749906032, 0.5845038944758993, 0.6009485646662722, 0.6226296560156406, 0.6064738294828372, 0.14341250325562938, 0.13589840746982174, 0.13953575619146885, 0.18581627069944018, 0.15393706432096477, 0.15453106535274497, 0.14324418264310756, 0.15579236218308412, 0.15417209268601395, 0.18325476114447747, 0.1983344519363387, 0.5666071466637517, 0.20530950170253925, 0.2860054254410084, 0.2039879652841594, 0.19213878040529198, 0.4694021457172788, 0.4823459145296156, 0.41753911750022, 0.5278416303442346, 0.32891811038756946, 0.3579442904603769, 0.729749454947026, 0.43246987967548667, 0.6014523500612458, 0.8006513685740014, 0.7663538699945746, 0.3532957097057746, 0.4767899730772923, 0.3895938908436154, 0.24297016192043597, 0.3212427050482427, 0.3250317590787525, 0.3699037912019516, 0.31708398080009825, 0.24846584304828434, 0.252456253590722, 0.21983366961517237, 0.2090210428309578, 0.2038946070676937, 0.22702518176653774, 0.2109483599633346, 0.21367448521501442, 0.23479255198876559, 0.20676407174588007, 0.843407571921244, 0.18573794943702793, 0.22205281561123413, 0.18903397501048458, 0.20803824406741, 0.20545068398197885, 0.19673041589905482, 0.20683748299019444, 0.22465888769340714, 0.18693136517037878, 0.16452066724486636, 0.9197008978016044, 0.16966611035877666, 0.8911130272184961, 0.20100485603065887, 0.9160888284160961, 0.916277188214941, 0.9345571638639282, 0.766171361138878, 0.15625654720548954, 0.6463990092759608, 0.21153281681127678, 0.1681391546894433, 0.2109946427634498, 0.16787466898611236, 0.15605983093474807, 0.21010576527728553, 0.17069332062853648, 0.1787636336078573, 0.18434060164655353, 0.1880303769609305, 0.18128583757148276, 0.19361805152300893, 0.19349239690934605, 0.1732346420185279, 0.19106264881543777, 0.09644062326573566, 0.08675541689021993, 0.09036361081409816, 0.09243727137110924, 0.09190735958825058, 0.08809183170705459, 0.09734913181094307, 0.12875323683854967, 0.09236489292419214]}, "mutation_prompt": null}
{"id": "c6fab05f-a3b3-4557-b97a-f8fc9b0ab806", "solution": "import numpy as np\n\nclass OptimizedHybridEvolutionaryAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(int(budget / 15), 30)  # Slightly adjusted population size\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, dim))\n        self.velocities = np.zeros((self.pop_size, dim))\n        self.personal_best_positions = self.population.copy()\n        self.personal_best_values = np.full(self.pop_size, np.inf)\n        self.global_best_position = np.random.uniform(*self.bounds, dim)\n        self.global_best_value = np.inf\n        self.evals = 0\n        self.F = 0.5  # Updated fixed scaling factor\n        self.CR = 0.8  # Reduced crossover rate\n        self.omega = 0.4  # Adjusted inertia weight\n        self.phi_p = 1.2  # Updated cognitive component\n        self.phi_g = 1.6  # Updated social component\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evals < self.budget:\n            for i in range(self.pop_size):\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), *self.bounds)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                trial_value = func(trial)\n                self.evals += 1\n                if trial_value < self.personal_best_values[i]:\n                    self.personal_best_positions[i] = trial\n                    self.personal_best_values[i] = trial_value\n                if trial_value < self.global_best_value:\n                    self.global_best_value = trial_value\n                    self.global_best_position = trial\n\n            r1, r2 = np.random.rand(self.pop_size, self.dim), np.random.rand(self.pop_size, self.dim)\n            self.velocities = (self.omega * self.velocities +\n                               r1 * self.phi_p * (self.personal_best_positions - self.population) +\n                               r2 * self.phi_g * (self.global_best_position - self.population))\n            np.clip(self.population + self.velocities, *self.bounds, out=self.population)\n\n        return self.global_best_value\n\n    def evaluate_population(self, func):\n        values = np.apply_along_axis(func, 1, self.population)\n        self.evals += self.pop_size\n        better_mask = values < self.personal_best_values\n        np.copyto(self.personal_best_positions, self.population, where=better_mask[:, np.newaxis])\n        np.copyto(self.personal_best_values, values, where=better_mask)\n        min_idx = values.argmin()\n        if values[min_idx] < self.global_best_value:\n            self.global_best_value = values[min_idx]\n            self.global_best_position = self.population[min_idx]", "name": "OptimizedHybridEvolutionaryAlgorithm", "description": "Optimized Hybrid Evolutionary Algorithm with dynamic parameter tuning and simplified operations for enhanced performance.", "configspace": "", "generation": 86, "fitness": 0.3434913099438611, "feedback": "The algorithm OptimizedHybridEvolutionaryAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.30.", "error": "", "parent_id": "e07d1435-043f-494b-a8c6-2edea7eb5022", "metadata": {"aucs": [0.9091243842780475, 0.9049623383486947, 0.9016088995426952, 0.8997247473066168, 0.9101363302829801, 0.9121892102876735, 0.9102950838301302, 0.9075967461114877, 0.9133327440780626, 0.818703636799169, 0.8131345353113533, 0.8241267422084317, 0.8115663532198392, 0.7030505661934805, 0.8102040444641191, 0.7821309434483424, 0.8100001685260215, 0.8121996807654475, 0.13987690329601987, 0.15877431862337488, 0.12889927999784156, 0.11673221601244987, 0.11184445342158833, 0.1834864044342185, 0.1586797915530349, 0.14441324798688637, 0.18691480706637764, 0.11621752828642617, 0.10237234111447979, 0.09813956287781855, 0.13206799567100502, 0.1414428014900646, 0.14238383030817492, 0.11090300693320665, 0.15678592499243638, 0.12753444739886, 0.98584476545453, 0.9885371330630199, 0.9894719506331979, 0.9845503566112245, 0.9830764355603996, 0.9797616990799551, 0.9840733732929595, 0.9859794675151585, 0.9789994097261054, 0.7942995298011104, 0.7758265630318653, 0.808792708411761, 0.741096270174094, 0.823720754612128, 0.7951466864971903, 0.8067569096015759, 0.7696676386745853, 0.8073565375375706, 0.8931600655859373, 0.22464629984829287, 0.2270024042267611, 0.914936910879969, 0.9040551014978273, 0.19291537324149322, 0.23781810880364596, 0.13875788241324694, 0.3732175878728291, 0.2501109943192761, 0.2618395673163696, 0.13523865712804617, 0.13478958588585443, 0.24562432281689495, 0.2639993472878063, 0.2663905045765642, 0.2475713983652278, 0.2532839020900238, 0.24017434596370812, 0.11739321327043017, 0.2387926991621202, 0.25308220194911113, 0.2652419436415975, 0.2638964010802236, 0.29452125034757726, 0.18242101291479995, 0.14859770765750668, 0.0027189570933967566, 0.04985113100407923, 0.00872879778259461, 0.06096291431150824, 0.011773126829558223, 0.0038155776394173113, 0.039694895736566815, 0.10505939851723689, 0.004489053027744161, 0.09323953478484437, 0.03383159612488562, 0.04888365037316522, 0.053993932292501046, 0.090751383518764, 0.010685456735189836, 0.06419406462876565, 0.13423966861942604, 0.04787605621514757, 0.15075246376813733, 0.08716643433592763, 0.06624822429580057, 0.09856399953857342, 0.1005458194505594, 0.1557226792482308, 0.10845733054117268, 0.10245619485351076, 0.08288068894232092, 0.2205783958327736, 0.151982251414856, 0.10504910352397256, 0.21367451313158248, 0.08491773649936263, 0.07446399387536562, 0.4031544166076103, 0.08592649221719861, 0.3154117004948426, 0.5631039086226158, 0.6054872641141538, 0.564747563900021, 0.614648448068714, 0.6150892196101193, 0.587689350920001, 0.5833754191899085, 0.5629711643147662, 0.686686051821003, 0.0944444332689296, 0.1604067927705497, 0.143897205644397, 0.1409023176597176, 0.1523566178424106, 0.14541611343922545, 0.137195493748134, 0.12252101556143569, 0.11623635477355843, 0.5184673220063938, 0.344642476035131, 0.2184557778033599, 0.21129513600313765, 0.23140537798606342, 0.34444737680107596, 0.2842880281532755, 0.14665416304538414, 0.8029081400180536, 0.37291671838246343, 0.2562967820657024, 0.4152224565384649, 0.38307793917031996, 0.267224900088775, 0.7440509703301781, 0.7616507068140399, 0.7724654620343231, 0.4882909759368349, 0.3024649189331885, 0.26594257843412716, 0.19999602341397305, 0.27510706152590836, 0.310845775529752, 0.24930338254059925, 0.29292781681889524, 0.28558156842299753, 0.26140827123187504, 0.22423981534646487, 0.18435341669379235, 0.281254395653039, 0.18465342536238838, 0.20609319213840793, 0.18740002252985155, 0.21091407590442812, 0.216883261150298, 0.18487836129831525, 0.1976197499010358, 0.19104247928295603, 0.2530831138136451, 0.2250997862163454, 0.19220354669883366, 0.182652823758358, 0.18571214442565165, 0.21181705368456194, 0.2521470294784114, 0.1888257276239388, 0.1142435808247958, 0.15427741035507603, 0.9164213794185485, 0.20038367192941453, 0.13117475773649112, 0.16492300946744987, 0.16893685848728568, 0.15403006574131084, 0.8945342770519238, 0.15678382865986673, 0.210601103137818, 0.8064358246053904, 0.1281092081566363, 0.8594067761087066, 0.16930253416841512, 0.21329005255067013, 0.1662021038309175, 0.19270531235579402, 0.18077147129935167, 0.1923068159443967, 0.19222971220138874, 0.21231149250504422, 0.19963287310365574, 0.17578391090122292, 0.1825854287763855, 0.200188951129592, 0.09768797340574853, 0.07933932910485164, 0.08845998570235392, 0.10103052611408381, 0.08189314364674605, 0.08416537118132206, 0.13980759556036082, 0.09152315928940336, 0.09052256143189019]}, "mutation_prompt": null}
{"id": "d338af06-9859-4441-b491-893f45d4c063", "solution": "import numpy as np\n\nclass EnhancedHybridEvolutionaryOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(25, budget // 10)  # Adjusted population size\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, dim))\n        self.velocities = np.random.uniform(-0.25, 0.25, (self.pop_size, dim))\n        self.personal_best_positions = self.population.copy()\n        self.personal_best_values = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evals = 0\n        self.F = 0.6  # Adaptive scaling factor\n        self.CR = 0.9  # Further increased crossover rate\n        self.omega = 0.2  # Reduced inertia weight for faster convergence\n        self.phi_p = 1.6  # Enhanced cognitive component\n        self.phi_g = 1.4  # Enhanced social component\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evals < self.budget:\n            for i in range(self.pop_size):\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), *self.bounds)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                trial_value = func(trial)\n                self.evals += 1\n                if trial_value < self.personal_best_values[i]:\n                    self.personal_best_positions[i] = trial\n                    self.personal_best_values[i] = trial_value\n                if trial_value < self.global_best_value:\n                    self.global_best_value = trial_value\n                    self.global_best_position = trial\n\n            rand_vals = np.random.rand(2, self.pop_size, self.dim)\n            self.velocities = (self.omega * self.velocities +\n                               rand_vals[0] * self.phi_p * (self.personal_best_positions - self.population) +\n                               rand_vals[1] * self.phi_g * (self.global_best_position - self.population))\n            np.clip(self.population + self.velocities, *self.bounds, out=self.population)\n\n        return self.global_best_value\n\n    def evaluate_population(self, func):\n        values = np.apply_along_axis(func, 1, self.population)\n        self.evals += self.pop_size\n        better_mask = values < self.personal_best_values\n        np.copyto(self.personal_best_positions, self.population, where=better_mask[:, np.newaxis])\n        np.copyto(self.personal_best_values, values, where=better_mask)\n        min_idx = values.argmin()\n        if values[min_idx] < self.global_best_value:\n            self.global_best_value = values[min_idx]\n            self.global_best_position = self.population[min_idx]", "name": "EnhancedHybridEvolutionaryOptimizer", "description": "Enhanced Hybrid Evolutionary Optimizer with adaptive parameter updates and streamlined operations for improved efficiency.", "configspace": "", "generation": 70, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e07d1435-043f-494b-a8c6-2edea7eb5022", "metadata": {"aucs": [0.9100591978626473, 0.9044994117948806, 0.9154336842636235, 0.9060103639050422, 0.9061391613313525, 0.9186077209996638, 0.9056705520135132, 0.9085925349984292, 0.9060124343834618, 0.7730828893847684, 0.8290502310361922, 0.8433864961489217, 0.8312245812080997, 0.8340442826557538, 0.8318469290819372, 0.8376990055353755, 0.8365199384611939, 0.8156869958531187, 0.1406765849888887, 0.140506372375391, 0.18353521923892546, 0.15129937916775782, 0.1046874889256807, 0.11439911781901957, 0.15629979223610813, 0.15611616321745403, 0.1561052925699099, 0.14013839286592755, 0.17452573535150973, 0.11540495731223765, 0.1156206018306557, 0.10831642030496424, 0.15526460281379828, 0.11842277911435717, 0.12019151191090038, 0.1389970741807368, 0.9844978500259234, 0.9878583520742972, 0.9860396912703203, 0.9765340157415099, 0.99020637002614, 0.9730286692477783, 0.9881108867731351, 0.9772940355636521, 0.979675598527954, 0.8163261296977598, 0.7927101800514582, 0.7987382064052436, 0.7781791506676524, 0.783191372968221, 0.7780827572341735, 0.7781443267791177, 0.7742847819580602, 0.7998653518138723, 0.22584838531396523, 0.16774631889481229, 0.37906250135893227, 0.3611115926407116, 0.8798075339726283, 0.9153577231389178, 0.24003600712813555, 0.22101330361244054, 0.23764838807369149, 0.26004701558544363, 0.23540159031490016, 0.24989713900847632, 0.22680064384768517, 0.251642271368276, 0.2180049044469704, 0.23205668148330483, 0.13275316372557477, 0.2285539082627912, 0.2431205024809906, 0.24993365464160966, 0.13242125883287714, 0.25215713971093656, 0.27298122456243046, 0.24847233289289583, 0.13379038283877742, 0.2655833487135125, 0.13045599196106739, 0.0002560216272237126, 9.999999999998899e-05, 0.003126293070108699, 0.0059105933928934595, 9.999999999998899e-05, 0.04523079896543514, 0.04723932887017834, 0.07902570418786214, 9.999999999998899e-05, 0.050122098842234064, 0.04015492592906611, 0.08271742895951761, 0.027306887879120167, 0.06508677800414897, 0.02049929320125743, 0.09713586991531342, 0.15712638371921317, 0.11022232352414285, 0.06576639221505198, 0.1519460464489928, 0.12726867277121545, 0.10716522162129183, 0.09709840064680808, 0.08131663224438523, 0.10436034858926801, 0.12132644139856708, 0.16206841846628484, 0.1711229837836591, 0.09204838505583868, 0.08204523903971894, 0.168560471686529, 0.32234421286555137, 0.20436819976602005, 0.11151399958606367, 0.164371841347285, 0.18502712077387518, 0.5749047734775052, 0.6228785039767997, 0.5667034018060592, 0.565140735273234, 0.5730399749906032, 0.5845038944758993, 0.6009485646662722, 0.6226296560156406, 0.6064738294828372, 0.14341250325562938, 0.13589840746982174, 0.13953575619146885, 0.18581627069944018, 0.15393706432096477, 0.15453106535274497, 0.14324418264310756, 0.15579236218308412, 0.15417209268601395, 0.18325476114447747, 0.1983344519363387, 0.5666071466637517, 0.20530950170253925, 0.2860054254410084, 0.2039879652841594, 0.19213878040529198, 0.4694021457172788, 0.4823459145296156, 0.41753911750022, 0.5278416303442346, 0.32891811038756946, 0.3579442904603769, 0.729749454947026, 0.43246987967548667, 0.6014523500612458, 0.8006513685740014, 0.7663538699945746, 0.3532957097057746, 0.4767899730772923, 0.3895938908436154, 0.24297016192043597, 0.3212427050482427, 0.3250317590787525, 0.3699037912019516, 0.31708398080009825, 0.24846584304828434, 0.252456253590722, 0.21983366961517237, 0.2090210428309578, 0.2038946070676937, 0.22702518176653774, 0.2109483599633346, 0.21367448521501442, 0.23479255198876559, 0.20676407174588007, 0.843407571921244, 0.18573794943702793, 0.22205281561123413, 0.18903397501048458, 0.20803824406741, 0.20545068398197885, 0.19673041589905482, 0.20683748299019444, 0.22465888769340714, 0.18693136517037878, 0.16452066724486636, 0.9197008978016044, 0.16966611035877666, 0.8911130272184961, 0.20100485603065887, 0.9160888284160961, 0.916277188214941, 0.9345571638639282, 0.766171361138878, 0.15625654720548954, 0.6463990092759608, 0.21153281681127678, 0.1681391546894433, 0.2109946427634498, 0.16787466898611236, 0.15605983093474807, 0.21010576527728553, 0.17069332062853648, 0.1787636336078573, 0.18434060164655353, 0.1880303769609305, 0.18128583757148276, 0.19361805152300893, 0.19349239690934605, 0.1732346420185279, 0.19106264881543777, 0.09644062326573566, 0.08675541689021993, 0.09036361081409816, 0.09243727137110924, 0.09190735958825058, 0.08809183170705459, 0.09734913181094307, 0.12875323683854967, 0.09236489292419214]}, "mutation_prompt": null}
{"id": "34b1410e-4cae-464e-b2e4-1010f9ef51be", "solution": "import numpy as np\n\nclass EnhancedHybridEvolutionaryOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(25, budget // 10)  # Adjusted population size\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, dim))\n        self.velocities = np.random.uniform(-0.25, 0.25, (self.pop_size, dim))\n        self.personal_best_positions = self.population.copy()\n        self.personal_best_values = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evals = 0\n        self.F = 0.6  # Adaptive scaling factor\n        self.CR = 0.9  # Further increased crossover rate\n        self.omega = 0.2  # Reduced inertia weight for faster convergence\n        self.phi_p = 1.6  # Enhanced cognitive component\n        self.phi_g = 1.4  # Enhanced social component\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evals < self.budget:\n            for i in range(self.pop_size):\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), *self.bounds)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                trial_value = func(trial)\n                self.evals += 1\n                if trial_value < self.personal_best_values[i]:\n                    self.personal_best_positions[i] = trial\n                    self.personal_best_values[i] = trial_value\n                if trial_value < self.global_best_value:\n                    self.global_best_value = trial_value\n                    self.global_best_position = trial\n\n            rand_vals = np.random.rand(2, self.pop_size, self.dim)\n            self.velocities = (self.omega * self.velocities +\n                               rand_vals[0] * self.phi_p * (self.personal_best_positions - self.population) +\n                               rand_vals[1] * self.phi_g * (self.global_best_position - self.population))\n            np.clip(self.population + self.velocities, *self.bounds, out=self.population)\n\n        return self.global_best_value\n\n    def evaluate_population(self, func):\n        values = np.apply_along_axis(func, 1, self.population)\n        self.evals += self.pop_size\n        better_mask = values < self.personal_best_values\n        np.copyto(self.personal_best_positions, self.population, where=better_mask[:, np.newaxis])\n        np.copyto(self.personal_best_values, values, where=better_mask)\n        min_idx = values.argmin()\n        if values[min_idx] < self.global_best_value:\n            self.global_best_value = values[min_idx]\n            self.global_best_position = self.population[min_idx]", "name": "EnhancedHybridEvolutionaryOptimizer", "description": "Enhanced Hybrid Evolutionary Optimizer with adaptive parameter updates and streamlined operations for improved efficiency.", "configspace": "", "generation": 70, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e07d1435-043f-494b-a8c6-2edea7eb5022", "metadata": {"aucs": [0.9100591978626473, 0.9044994117948806, 0.9154336842636235, 0.9060103639050422, 0.9061391613313525, 0.9186077209996638, 0.9056705520135132, 0.9085925349984292, 0.9060124343834618, 0.7730828893847684, 0.8290502310361922, 0.8433864961489217, 0.8312245812080997, 0.8340442826557538, 0.8318469290819372, 0.8376990055353755, 0.8365199384611939, 0.8156869958531187, 0.1406765849888887, 0.140506372375391, 0.18353521923892546, 0.15129937916775782, 0.1046874889256807, 0.11439911781901957, 0.15629979223610813, 0.15611616321745403, 0.1561052925699099, 0.14013839286592755, 0.17452573535150973, 0.11540495731223765, 0.1156206018306557, 0.10831642030496424, 0.15526460281379828, 0.11842277911435717, 0.12019151191090038, 0.1389970741807368, 0.9844978500259234, 0.9878583520742972, 0.9860396912703203, 0.9765340157415099, 0.99020637002614, 0.9730286692477783, 0.9881108867731351, 0.9772940355636521, 0.979675598527954, 0.8163261296977598, 0.7927101800514582, 0.7987382064052436, 0.7781791506676524, 0.783191372968221, 0.7780827572341735, 0.7781443267791177, 0.7742847819580602, 0.7998653518138723, 0.22584838531396523, 0.16774631889481229, 0.37906250135893227, 0.3611115926407116, 0.8798075339726283, 0.9153577231389178, 0.24003600712813555, 0.22101330361244054, 0.23764838807369149, 0.26004701558544363, 0.23540159031490016, 0.24989713900847632, 0.22680064384768517, 0.251642271368276, 0.2180049044469704, 0.23205668148330483, 0.13275316372557477, 0.2285539082627912, 0.2431205024809906, 0.24993365464160966, 0.13242125883287714, 0.25215713971093656, 0.27298122456243046, 0.24847233289289583, 0.13379038283877742, 0.2655833487135125, 0.13045599196106739, 0.0002560216272237126, 9.999999999998899e-05, 0.003126293070108699, 0.0059105933928934595, 9.999999999998899e-05, 0.04523079896543514, 0.04723932887017834, 0.07902570418786214, 9.999999999998899e-05, 0.050122098842234064, 0.04015492592906611, 0.08271742895951761, 0.027306887879120167, 0.06508677800414897, 0.02049929320125743, 0.09713586991531342, 0.15712638371921317, 0.11022232352414285, 0.06576639221505198, 0.1519460464489928, 0.12726867277121545, 0.10716522162129183, 0.09709840064680808, 0.08131663224438523, 0.10436034858926801, 0.12132644139856708, 0.16206841846628484, 0.1711229837836591, 0.09204838505583868, 0.08204523903971894, 0.168560471686529, 0.32234421286555137, 0.20436819976602005, 0.11151399958606367, 0.164371841347285, 0.18502712077387518, 0.5749047734775052, 0.6228785039767997, 0.5667034018060592, 0.565140735273234, 0.5730399749906032, 0.5845038944758993, 0.6009485646662722, 0.6226296560156406, 0.6064738294828372, 0.14341250325562938, 0.13589840746982174, 0.13953575619146885, 0.18581627069944018, 0.15393706432096477, 0.15453106535274497, 0.14324418264310756, 0.15579236218308412, 0.15417209268601395, 0.18325476114447747, 0.1983344519363387, 0.5666071466637517, 0.20530950170253925, 0.2860054254410084, 0.2039879652841594, 0.19213878040529198, 0.4694021457172788, 0.4823459145296156, 0.41753911750022, 0.5278416303442346, 0.32891811038756946, 0.3579442904603769, 0.729749454947026, 0.43246987967548667, 0.6014523500612458, 0.8006513685740014, 0.7663538699945746, 0.3532957097057746, 0.4767899730772923, 0.3895938908436154, 0.24297016192043597, 0.3212427050482427, 0.3250317590787525, 0.3699037912019516, 0.31708398080009825, 0.24846584304828434, 0.252456253590722, 0.21983366961517237, 0.2090210428309578, 0.2038946070676937, 0.22702518176653774, 0.2109483599633346, 0.21367448521501442, 0.23479255198876559, 0.20676407174588007, 0.843407571921244, 0.18573794943702793, 0.22205281561123413, 0.18903397501048458, 0.20803824406741, 0.20545068398197885, 0.19673041589905482, 0.20683748299019444, 0.22465888769340714, 0.18693136517037878, 0.16452066724486636, 0.9197008978016044, 0.16966611035877666, 0.8911130272184961, 0.20100485603065887, 0.9160888284160961, 0.916277188214941, 0.9345571638639282, 0.766171361138878, 0.15625654720548954, 0.6463990092759608, 0.21153281681127678, 0.1681391546894433, 0.2109946427634498, 0.16787466898611236, 0.15605983093474807, 0.21010576527728553, 0.17069332062853648, 0.1787636336078573, 0.18434060164655353, 0.1880303769609305, 0.18128583757148276, 0.19361805152300893, 0.19349239690934605, 0.1732346420185279, 0.19106264881543777, 0.09644062326573566, 0.08675541689021993, 0.09036361081409816, 0.09243727137110924, 0.09190735958825058, 0.08809183170705459, 0.09734913181094307, 0.12875323683854967, 0.09236489292419214]}, "mutation_prompt": null}
{"id": "2764a90a-7a6d-4449-a842-a59203792588", "solution": "import numpy as np\n\nclass EnhancedHybridEvolutionaryOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(25, budget // 10)  # Adjusted population size\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, dim))\n        self.velocities = np.random.uniform(-0.25, 0.25, (self.pop_size, dim))\n        self.personal_best_positions = self.population.copy()\n        self.personal_best_values = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evals = 0\n        self.F = 0.6  # Adaptive scaling factor\n        self.CR = 0.9  # Further increased crossover rate\n        self.omega = 0.2  # Reduced inertia weight for faster convergence\n        self.phi_p = 1.6  # Enhanced cognitive component\n        self.phi_g = 1.4  # Enhanced social component\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evals < self.budget:\n            for i in range(self.pop_size):\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), *self.bounds)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                trial_value = func(trial)\n                self.evals += 1\n                if trial_value < self.personal_best_values[i]:\n                    self.personal_best_positions[i] = trial\n                    self.personal_best_values[i] = trial_value\n                if trial_value < self.global_best_value:\n                    self.global_best_value = trial_value\n                    self.global_best_position = trial\n\n            rand_vals = np.random.rand(2, self.pop_size, self.dim)\n            self.velocities = (self.omega * self.velocities +\n                               rand_vals[0] * self.phi_p * (self.personal_best_positions - self.population) +\n                               rand_vals[1] * self.phi_g * (self.global_best_position - self.population))\n            np.clip(self.population + self.velocities, *self.bounds, out=self.population)\n\n        return self.global_best_value\n\n    def evaluate_population(self, func):\n        values = np.apply_along_axis(func, 1, self.population)\n        self.evals += self.pop_size\n        better_mask = values < self.personal_best_values\n        np.copyto(self.personal_best_positions, self.population, where=better_mask[:, np.newaxis])\n        np.copyto(self.personal_best_values, values, where=better_mask)\n        min_idx = values.argmin()\n        if values[min_idx] < self.global_best_value:\n            self.global_best_value = values[min_idx]\n            self.global_best_position = self.population[min_idx]", "name": "EnhancedHybridEvolutionaryOptimizer", "description": "Enhanced Hybrid Evolutionary Optimizer with adaptive parameter updates and streamlined operations for improved efficiency.", "configspace": "", "generation": 70, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e07d1435-043f-494b-a8c6-2edea7eb5022", "metadata": {"aucs": [0.9100591978626473, 0.9044994117948806, 0.9154336842636235, 0.9060103639050422, 0.9061391613313525, 0.9186077209996638, 0.9056705520135132, 0.9085925349984292, 0.9060124343834618, 0.7730828893847684, 0.8290502310361922, 0.8433864961489217, 0.8312245812080997, 0.8340442826557538, 0.8318469290819372, 0.8376990055353755, 0.8365199384611939, 0.8156869958531187, 0.1406765849888887, 0.140506372375391, 0.18353521923892546, 0.15129937916775782, 0.1046874889256807, 0.11439911781901957, 0.15629979223610813, 0.15611616321745403, 0.1561052925699099, 0.14013839286592755, 0.17452573535150973, 0.11540495731223765, 0.1156206018306557, 0.10831642030496424, 0.15526460281379828, 0.11842277911435717, 0.12019151191090038, 0.1389970741807368, 0.9844978500259234, 0.9878583520742972, 0.9860396912703203, 0.9765340157415099, 0.99020637002614, 0.9730286692477783, 0.9881108867731351, 0.9772940355636521, 0.979675598527954, 0.8163261296977598, 0.7927101800514582, 0.7987382064052436, 0.7781791506676524, 0.783191372968221, 0.7780827572341735, 0.7781443267791177, 0.7742847819580602, 0.7998653518138723, 0.22584838531396523, 0.16774631889481229, 0.37906250135893227, 0.3611115926407116, 0.8798075339726283, 0.9153577231389178, 0.24003600712813555, 0.22101330361244054, 0.23764838807369149, 0.26004701558544363, 0.23540159031490016, 0.24989713900847632, 0.22680064384768517, 0.251642271368276, 0.2180049044469704, 0.23205668148330483, 0.13275316372557477, 0.2285539082627912, 0.2431205024809906, 0.24993365464160966, 0.13242125883287714, 0.25215713971093656, 0.27298122456243046, 0.24847233289289583, 0.13379038283877742, 0.2655833487135125, 0.13045599196106739, 0.0002560216272237126, 9.999999999998899e-05, 0.003126293070108699, 0.0059105933928934595, 9.999999999998899e-05, 0.04523079896543514, 0.04723932887017834, 0.07902570418786214, 9.999999999998899e-05, 0.050122098842234064, 0.04015492592906611, 0.08271742895951761, 0.027306887879120167, 0.06508677800414897, 0.02049929320125743, 0.09713586991531342, 0.15712638371921317, 0.11022232352414285, 0.06576639221505198, 0.1519460464489928, 0.12726867277121545, 0.10716522162129183, 0.09709840064680808, 0.08131663224438523, 0.10436034858926801, 0.12132644139856708, 0.16206841846628484, 0.1711229837836591, 0.09204838505583868, 0.08204523903971894, 0.168560471686529, 0.32234421286555137, 0.20436819976602005, 0.11151399958606367, 0.164371841347285, 0.18502712077387518, 0.5749047734775052, 0.6228785039767997, 0.5667034018060592, 0.565140735273234, 0.5730399749906032, 0.5845038944758993, 0.6009485646662722, 0.6226296560156406, 0.6064738294828372, 0.14341250325562938, 0.13589840746982174, 0.13953575619146885, 0.18581627069944018, 0.15393706432096477, 0.15453106535274497, 0.14324418264310756, 0.15579236218308412, 0.15417209268601395, 0.18325476114447747, 0.1983344519363387, 0.5666071466637517, 0.20530950170253925, 0.2860054254410084, 0.2039879652841594, 0.19213878040529198, 0.4694021457172788, 0.4823459145296156, 0.41753911750022, 0.5278416303442346, 0.32891811038756946, 0.3579442904603769, 0.729749454947026, 0.43246987967548667, 0.6014523500612458, 0.8006513685740014, 0.7663538699945746, 0.3532957097057746, 0.4767899730772923, 0.3895938908436154, 0.24297016192043597, 0.3212427050482427, 0.3250317590787525, 0.3699037912019516, 0.31708398080009825, 0.24846584304828434, 0.252456253590722, 0.21983366961517237, 0.2090210428309578, 0.2038946070676937, 0.22702518176653774, 0.2109483599633346, 0.21367448521501442, 0.23479255198876559, 0.20676407174588007, 0.843407571921244, 0.18573794943702793, 0.22205281561123413, 0.18903397501048458, 0.20803824406741, 0.20545068398197885, 0.19673041589905482, 0.20683748299019444, 0.22465888769340714, 0.18693136517037878, 0.16452066724486636, 0.9197008978016044, 0.16966611035877666, 0.8911130272184961, 0.20100485603065887, 0.9160888284160961, 0.916277188214941, 0.9345571638639282, 0.766171361138878, 0.15625654720548954, 0.6463990092759608, 0.21153281681127678, 0.1681391546894433, 0.2109946427634498, 0.16787466898611236, 0.15605983093474807, 0.21010576527728553, 0.17069332062853648, 0.1787636336078573, 0.18434060164655353, 0.1880303769609305, 0.18128583757148276, 0.19361805152300893, 0.19349239690934605, 0.1732346420185279, 0.19106264881543777, 0.09644062326573566, 0.08675541689021993, 0.09036361081409816, 0.09243727137110924, 0.09190735958825058, 0.08809183170705459, 0.09734913181094307, 0.12875323683854967, 0.09236489292419214]}, "mutation_prompt": null}
{"id": "9c19410a-33f4-43f5-aafb-a2e9c30000bb", "solution": "import numpy as np\n\nclass StreamlinedHybridEvolutionaryOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(30, budget // 12)  # Slightly increased population size\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, dim))\n        self.velocities = np.random.uniform(-0.2, 0.2, (self.pop_size, dim))\n        self.personal_best_positions = self.population.copy()\n        self.personal_best_values = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evals = 0\n        self.F = 0.5  # Dynamic scaling factor based on evaluations\n        self.CR = 0.85  # Optimized crossover rate\n        self.omega = 0.3  # Adjusted inertia weight for balance\n        self.phi_p = 1.5  # Fine-tuned cognitive component\n        self.phi_g = 1.5  # Fine-tuned social component\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evals < self.budget:\n            for i in range(self.pop_size):\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), *self.bounds)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                trial_value = func(trial)\n                self.evals += 1\n                if trial_value < self.personal_best_values[i]:\n                    self.personal_best_positions[i] = trial\n                    self.personal_best_values[i] = trial_value\n                if trial_value < self.global_best_value:\n                    self.global_best_value = trial_value\n                    self.global_best_position = trial\n\n            rand_vals = np.random.rand(2, self.pop_size, self.dim)\n            self.velocities = (self.omega * self.velocities +\n                               rand_vals[0] * self.phi_p * (self.personal_best_positions - self.population) +\n                               rand_vals[1] * self.phi_g * (self.global_best_position - self.population))\n            self.population += self.velocities  # Directly update positions\n            np.clip(self.population, *self.bounds, out=self.population)\n\n        return self.global_best_value\n\n    def evaluate_population(self, func):\n        values = np.apply_along_axis(func, 1, self.population)\n        self.evals += self.pop_size\n        better_mask = values < self.personal_best_values\n        self.personal_best_positions[better_mask] = self.population[better_mask]\n        self.personal_best_values[better_mask] = values[better_mask]\n        min_idx = values.argmin()\n        if values[min_idx] < self.global_best_value:\n            self.global_best_value = values[min_idx]\n            self.global_best_position = self.population[min_idx]", "name": "StreamlinedHybridEvolutionaryOptimizer", "description": "Streamlined Hybrid Evolutionary Optimizer using memory-efficient operations and dynamic parameter tuning for enhanced performance.", "configspace": "", "generation": 90, "fitness": 0.34537035047757414, "feedback": "The algorithm StreamlinedHybridEvolutionaryOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.30.", "error": "", "parent_id": "e07d1435-043f-494b-a8c6-2edea7eb5022", "metadata": {"aucs": [0.9001974371725244, 0.890684877295763, 0.9035363115581334, 0.9007503939100941, 0.8918649146656406, 0.898889909676587, 0.9019357698108446, 0.9036717576393771, 0.8930286798540347, 0.8241827440716999, 0.7986736926997439, 0.8129848680734587, 0.8174848039220625, 0.8191530624360492, 0.8238844238857053, 0.8105844400917301, 0.8156433415422061, 0.8076714567407471, 0.1449196275318031, 0.16020144571844575, 0.1382889662922162, 0.11516155962821961, 0.13281146831598112, 0.10779098184780467, 0.15778999074794797, 0.11131902918851289, 0.7125132392392244, 0.11438133284847207, 0.10688018957091883, 0.1371175122415752, 0.11417638149674225, 0.13105204887367905, 0.12869112948508077, 0.11039082678435275, 0.11584599029392795, 0.10334402718008695, 0.9908245533218591, 0.9845749608359694, 0.9863422111799921, 0.98603522752877, 0.9835258599447141, 0.9847870445727588, 0.9857958597756946, 0.9849528767756563, 0.9791045429601802, 0.7520115424486946, 0.7195328497574989, 0.7858118130953002, 0.7912313326476242, 0.7924694028515109, 0.7845812755524129, 0.7467227271448047, 0.7764513881477739, 0.740895842173432, 0.9260743834397194, 0.3383304229659603, 0.2278092202556915, 0.21389149942129948, 0.2789760939950071, 0.3812579434013512, 0.398882676669446, 0.1515580326421565, 0.17349121358898179, 0.2574069663228209, 0.23608027871852055, 0.2255654498881703, 0.15227419080326177, 0.24169536937634373, 0.2277194886315761, 0.2445056220940165, 0.23134871299398996, 0.24889101707921846, 0.23917800879131768, 0.13179240169428907, 0.13157181685531505, 0.2285492237577329, 0.24088793450877144, 0.2535628850136319, 0.2658509505688543, 0.253782002882852, 0.18548889198006024, 0.048187487429471876, 0.03996218286393427, 0.00011191018796452568, 0.042003653675066976, 0.015745172774201843, 9.999999999998899e-05, 0.01542879314778256, 9.999999999998899e-05, 0.006015171196894542, 0.12048192908806998, 0.04413157306486959, 0.07430434973677225, 0.12374567625736232, 0.026731154658956036, 0.02573598865009974, 0.05412743464754133, 0.025533396228873295, 0.0713915871122559, 0.059753725270093816, 0.11444013898348548, 0.041716730756147236, 0.264565588860042, 0.39223217422899737, 0.13100335638099403, 0.10877187359533125, 0.10203458662124198, 0.08878793257618345, 0.3292489326046458, 0.2792558465558298, 0.21202795202470304, 0.08119558280402073, 0.18788636056612606, 0.43801220367644966, 0.0578769795759112, 0.08609925203317381, 0.11177186529968819, 0.5566385703313677, 0.6252963642248324, 0.5972300980155887, 0.5891455719560905, 0.6233212816294624, 0.5654267765130992, 0.5991841347684157, 0.614997417062668, 0.6438880502406685, 0.15017147494029126, 0.144711283358529, 0.12535224778296616, 0.11830743754897499, 0.14206739073362729, 0.13120240048558096, 0.14502614337375197, 0.10843146727019559, 0.1409888492983642, 0.7515412814261839, 0.43352538495831117, 0.20657919848328998, 0.4880663516624799, 0.351352287623086, 0.1559613492325994, 0.19084178013127628, 0.1594791165306011, 0.20524200291647132, 0.45118396313276077, 0.36645876081872353, 0.2765940403041415, 0.2773216780634521, 0.5375816251695578, 0.3508766170561739, 0.5776931557084112, 0.6213947961719689, 0.6393980869739786, 0.42279880206650955, 0.40837542639440017, 0.3128991562768144, 0.23361287134353148, 0.190528950053937, 0.23304577054222042, 0.504686620817107, 0.5648836288067496, 0.2325695336710797, 0.21084420517774527, 0.18694407806462654, 0.19085956763183565, 0.2008107309240318, 0.21300952045829868, 0.19985310411583745, 0.2144814506124224, 0.20198489486820648, 0.24294171255245556, 0.20915692227901217, 0.21512999951190426, 0.17649302297105418, 0.22021633931005047, 0.21533796406235428, 0.2016795005244919, 0.22631209985807887, 0.1996815123810456, 0.2516798273690253, 0.1883410168731443, 0.17777755237358672, 0.8998280961696364, 0.8876402028534722, 0.9185086000858791, 0.1687971151800346, 0.17147228990222751, 0.16949172737075346, 0.21203367200996193, 0.8860479589040597, 0.15651412886965477, 0.11206915805817064, 0.2110970116616726, 0.12853579189228692, 0.2118489458842303, 0.7866148557405258, 0.10498647274185258, 0.21234831773449592, 0.1776403490968056, 0.17899901875873725, 0.20763638753049218, 0.19261588174929634, 0.2185626098617759, 0.18506942453795427, 0.17999857305189493, 0.18346269958999895, 0.1858052720219403, 0.0901543080147138, 0.09777869514236204, 0.0988997439627809, 0.09319859110077922, 0.09124151716104167, 0.09222771711489308, 0.09428852633136375, 0.08258521201191127, 0.08249142874928095]}, "mutation_prompt": null}
{"id": "0f686369-f67a-4a17-bd4b-0ee5ee1ecafa", "solution": "import numpy as np\n\nclass EnhancedHybridEvolutionaryOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(25, budget // 10)  # Adjusted population size\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, dim))\n        self.velocities = np.random.uniform(-0.25, 0.25, (self.pop_size, dim))\n        self.personal_best_positions = self.population.copy()\n        self.personal_best_values = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evals = 0\n        self.F = 0.6  # Adaptive scaling factor\n        self.CR = 0.9  # Further increased crossover rate\n        self.omega = 0.2  # Reduced inertia weight for faster convergence\n        self.phi_p = 1.6  # Enhanced cognitive component\n        self.phi_g = 1.4  # Enhanced social component\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evals < self.budget:\n            for i in range(self.pop_size):\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), *self.bounds)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                trial_value = func(trial)\n                self.evals += 1\n                if trial_value < self.personal_best_values[i]:\n                    self.personal_best_positions[i] = trial\n                    self.personal_best_values[i] = trial_value\n                if trial_value < self.global_best_value:\n                    self.global_best_value = trial_value\n                    self.global_best_position = trial\n\n            rand_vals = np.random.rand(2, self.pop_size, self.dim)\n            self.velocities = (self.omega * self.velocities +\n                               rand_vals[0] * self.phi_p * (self.personal_best_positions - self.population) +\n                               rand_vals[1] * self.phi_g * (self.global_best_position - self.population))\n            np.clip(self.population + self.velocities, *self.bounds, out=self.population)\n\n        return self.global_best_value\n\n    def evaluate_population(self, func):\n        values = np.apply_along_axis(func, 1, self.population)\n        self.evals += self.pop_size\n        better_mask = values < self.personal_best_values\n        np.copyto(self.personal_best_positions, self.population, where=better_mask[:, np.newaxis])\n        np.copyto(self.personal_best_values, values, where=better_mask)\n        min_idx = values.argmin()\n        if values[min_idx] < self.global_best_value:\n            self.global_best_value = values[min_idx]\n            self.global_best_position = self.population[min_idx]", "name": "EnhancedHybridEvolutionaryOptimizer", "description": "Enhanced Hybrid Evolutionary Optimizer with adaptive parameter updates and streamlined operations for improved efficiency.", "configspace": "", "generation": 70, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e07d1435-043f-494b-a8c6-2edea7eb5022", "metadata": {"aucs": [0.9100591978626473, 0.9044994117948806, 0.9154336842636235, 0.9060103639050422, 0.9061391613313525, 0.9186077209996638, 0.9056705520135132, 0.9085925349984292, 0.9060124343834618, 0.7730828893847684, 0.8290502310361922, 0.8433864961489217, 0.8312245812080997, 0.8340442826557538, 0.8318469290819372, 0.8376990055353755, 0.8365199384611939, 0.8156869958531187, 0.1406765849888887, 0.140506372375391, 0.18353521923892546, 0.15129937916775782, 0.1046874889256807, 0.11439911781901957, 0.15629979223610813, 0.15611616321745403, 0.1561052925699099, 0.14013839286592755, 0.17452573535150973, 0.11540495731223765, 0.1156206018306557, 0.10831642030496424, 0.15526460281379828, 0.11842277911435717, 0.12019151191090038, 0.1389970741807368, 0.9844978500259234, 0.9878583520742972, 0.9860396912703203, 0.9765340157415099, 0.99020637002614, 0.9730286692477783, 0.9881108867731351, 0.9772940355636521, 0.979675598527954, 0.8163261296977598, 0.7927101800514582, 0.7987382064052436, 0.7781791506676524, 0.783191372968221, 0.7780827572341735, 0.7781443267791177, 0.7742847819580602, 0.7998653518138723, 0.22584838531396523, 0.16774631889481229, 0.37906250135893227, 0.3611115926407116, 0.8798075339726283, 0.9153577231389178, 0.24003600712813555, 0.22101330361244054, 0.23764838807369149, 0.26004701558544363, 0.23540159031490016, 0.24989713900847632, 0.22680064384768517, 0.251642271368276, 0.2180049044469704, 0.23205668148330483, 0.13275316372557477, 0.2285539082627912, 0.2431205024809906, 0.24993365464160966, 0.13242125883287714, 0.25215713971093656, 0.27298122456243046, 0.24847233289289583, 0.13379038283877742, 0.2655833487135125, 0.13045599196106739, 0.0002560216272237126, 9.999999999998899e-05, 0.003126293070108699, 0.0059105933928934595, 9.999999999998899e-05, 0.04523079896543514, 0.04723932887017834, 0.07902570418786214, 9.999999999998899e-05, 0.050122098842234064, 0.04015492592906611, 0.08271742895951761, 0.027306887879120167, 0.06508677800414897, 0.02049929320125743, 0.09713586991531342, 0.15712638371921317, 0.11022232352414285, 0.06576639221505198, 0.1519460464489928, 0.12726867277121545, 0.10716522162129183, 0.09709840064680808, 0.08131663224438523, 0.10436034858926801, 0.12132644139856708, 0.16206841846628484, 0.1711229837836591, 0.09204838505583868, 0.08204523903971894, 0.168560471686529, 0.32234421286555137, 0.20436819976602005, 0.11151399958606367, 0.164371841347285, 0.18502712077387518, 0.5749047734775052, 0.6228785039767997, 0.5667034018060592, 0.565140735273234, 0.5730399749906032, 0.5845038944758993, 0.6009485646662722, 0.6226296560156406, 0.6064738294828372, 0.14341250325562938, 0.13589840746982174, 0.13953575619146885, 0.18581627069944018, 0.15393706432096477, 0.15453106535274497, 0.14324418264310756, 0.15579236218308412, 0.15417209268601395, 0.18325476114447747, 0.1983344519363387, 0.5666071466637517, 0.20530950170253925, 0.2860054254410084, 0.2039879652841594, 0.19213878040529198, 0.4694021457172788, 0.4823459145296156, 0.41753911750022, 0.5278416303442346, 0.32891811038756946, 0.3579442904603769, 0.729749454947026, 0.43246987967548667, 0.6014523500612458, 0.8006513685740014, 0.7663538699945746, 0.3532957097057746, 0.4767899730772923, 0.3895938908436154, 0.24297016192043597, 0.3212427050482427, 0.3250317590787525, 0.3699037912019516, 0.31708398080009825, 0.24846584304828434, 0.252456253590722, 0.21983366961517237, 0.2090210428309578, 0.2038946070676937, 0.22702518176653774, 0.2109483599633346, 0.21367448521501442, 0.23479255198876559, 0.20676407174588007, 0.843407571921244, 0.18573794943702793, 0.22205281561123413, 0.18903397501048458, 0.20803824406741, 0.20545068398197885, 0.19673041589905482, 0.20683748299019444, 0.22465888769340714, 0.18693136517037878, 0.16452066724486636, 0.9197008978016044, 0.16966611035877666, 0.8911130272184961, 0.20100485603065887, 0.9160888284160961, 0.916277188214941, 0.9345571638639282, 0.766171361138878, 0.15625654720548954, 0.6463990092759608, 0.21153281681127678, 0.1681391546894433, 0.2109946427634498, 0.16787466898611236, 0.15605983093474807, 0.21010576527728553, 0.17069332062853648, 0.1787636336078573, 0.18434060164655353, 0.1880303769609305, 0.18128583757148276, 0.19361805152300893, 0.19349239690934605, 0.1732346420185279, 0.19106264881543777, 0.09644062326573566, 0.08675541689021993, 0.09036361081409816, 0.09243727137110924, 0.09190735958825058, 0.08809183170705459, 0.09734913181094307, 0.12875323683854967, 0.09236489292419214]}, "mutation_prompt": null}
{"id": "276428cd-4e96-463f-a4be-75301a942a79", "solution": "import numpy as np\n\nclass EnhancedHybridEvolutionaryOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(25, budget // 10)  # Adjusted population size\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, dim))\n        self.velocities = np.random.uniform(-0.25, 0.25, (self.pop_size, dim))\n        self.personal_best_positions = self.population.copy()\n        self.personal_best_values = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evals = 0\n        self.F = 0.6  # Adaptive scaling factor\n        self.CR = 0.9  # Further increased crossover rate\n        self.omega = 0.2  # Reduced inertia weight for faster convergence\n        self.phi_p = 1.6  # Enhanced cognitive component\n        self.phi_g = 1.4  # Enhanced social component\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evals < self.budget:\n            for i in range(self.pop_size):\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), *self.bounds)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                trial_value = func(trial)\n                self.evals += 1\n                if trial_value < self.personal_best_values[i]:\n                    self.personal_best_positions[i] = trial\n                    self.personal_best_values[i] = trial_value\n                if trial_value < self.global_best_value:\n                    self.global_best_value = trial_value\n                    self.global_best_position = trial\n\n            rand_vals = np.random.rand(2, self.pop_size, self.dim)\n            self.velocities = (self.omega * self.velocities +\n                               rand_vals[0] * self.phi_p * (self.personal_best_positions - self.population) +\n                               rand_vals[1] * self.phi_g * (self.global_best_position - self.population))\n            np.clip(self.population + self.velocities, *self.bounds, out=self.population)\n\n        return self.global_best_value\n\n    def evaluate_population(self, func):\n        values = np.apply_along_axis(func, 1, self.population)\n        self.evals += self.pop_size\n        better_mask = values < self.personal_best_values\n        np.copyto(self.personal_best_positions, self.population, where=better_mask[:, np.newaxis])\n        np.copyto(self.personal_best_values, values, where=better_mask)\n        min_idx = values.argmin()\n        if values[min_idx] < self.global_best_value:\n            self.global_best_value = values[min_idx]\n            self.global_best_position = self.population[min_idx]", "name": "EnhancedHybridEvolutionaryOptimizer", "description": "Enhanced Hybrid Evolutionary Optimizer with adaptive parameter updates and streamlined operations for improved efficiency.", "configspace": "", "generation": 70, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e07d1435-043f-494b-a8c6-2edea7eb5022", "metadata": {"aucs": [0.9100591978626473, 0.9044994117948806, 0.9154336842636235, 0.9060103639050422, 0.9061391613313525, 0.9186077209996638, 0.9056705520135132, 0.9085925349984292, 0.9060124343834618, 0.7730828893847684, 0.8290502310361922, 0.8433864961489217, 0.8312245812080997, 0.8340442826557538, 0.8318469290819372, 0.8376990055353755, 0.8365199384611939, 0.8156869958531187, 0.1406765849888887, 0.140506372375391, 0.18353521923892546, 0.15129937916775782, 0.1046874889256807, 0.11439911781901957, 0.15629979223610813, 0.15611616321745403, 0.1561052925699099, 0.14013839286592755, 0.17452573535150973, 0.11540495731223765, 0.1156206018306557, 0.10831642030496424, 0.15526460281379828, 0.11842277911435717, 0.12019151191090038, 0.1389970741807368, 0.9844978500259234, 0.9878583520742972, 0.9860396912703203, 0.9765340157415099, 0.99020637002614, 0.9730286692477783, 0.9881108867731351, 0.9772940355636521, 0.979675598527954, 0.8163261296977598, 0.7927101800514582, 0.7987382064052436, 0.7781791506676524, 0.783191372968221, 0.7780827572341735, 0.7781443267791177, 0.7742847819580602, 0.7998653518138723, 0.22584838531396523, 0.16774631889481229, 0.37906250135893227, 0.3611115926407116, 0.8798075339726283, 0.9153577231389178, 0.24003600712813555, 0.22101330361244054, 0.23764838807369149, 0.26004701558544363, 0.23540159031490016, 0.24989713900847632, 0.22680064384768517, 0.251642271368276, 0.2180049044469704, 0.23205668148330483, 0.13275316372557477, 0.2285539082627912, 0.2431205024809906, 0.24993365464160966, 0.13242125883287714, 0.25215713971093656, 0.27298122456243046, 0.24847233289289583, 0.13379038283877742, 0.2655833487135125, 0.13045599196106739, 0.0002560216272237126, 9.999999999998899e-05, 0.003126293070108699, 0.0059105933928934595, 9.999999999998899e-05, 0.04523079896543514, 0.04723932887017834, 0.07902570418786214, 9.999999999998899e-05, 0.050122098842234064, 0.04015492592906611, 0.08271742895951761, 0.027306887879120167, 0.06508677800414897, 0.02049929320125743, 0.09713586991531342, 0.15712638371921317, 0.11022232352414285, 0.06576639221505198, 0.1519460464489928, 0.12726867277121545, 0.10716522162129183, 0.09709840064680808, 0.08131663224438523, 0.10436034858926801, 0.12132644139856708, 0.16206841846628484, 0.1711229837836591, 0.09204838505583868, 0.08204523903971894, 0.168560471686529, 0.32234421286555137, 0.20436819976602005, 0.11151399958606367, 0.164371841347285, 0.18502712077387518, 0.5749047734775052, 0.6228785039767997, 0.5667034018060592, 0.565140735273234, 0.5730399749906032, 0.5845038944758993, 0.6009485646662722, 0.6226296560156406, 0.6064738294828372, 0.14341250325562938, 0.13589840746982174, 0.13953575619146885, 0.18581627069944018, 0.15393706432096477, 0.15453106535274497, 0.14324418264310756, 0.15579236218308412, 0.15417209268601395, 0.18325476114447747, 0.1983344519363387, 0.5666071466637517, 0.20530950170253925, 0.2860054254410084, 0.2039879652841594, 0.19213878040529198, 0.4694021457172788, 0.4823459145296156, 0.41753911750022, 0.5278416303442346, 0.32891811038756946, 0.3579442904603769, 0.729749454947026, 0.43246987967548667, 0.6014523500612458, 0.8006513685740014, 0.7663538699945746, 0.3532957097057746, 0.4767899730772923, 0.3895938908436154, 0.24297016192043597, 0.3212427050482427, 0.3250317590787525, 0.3699037912019516, 0.31708398080009825, 0.24846584304828434, 0.252456253590722, 0.21983366961517237, 0.2090210428309578, 0.2038946070676937, 0.22702518176653774, 0.2109483599633346, 0.21367448521501442, 0.23479255198876559, 0.20676407174588007, 0.843407571921244, 0.18573794943702793, 0.22205281561123413, 0.18903397501048458, 0.20803824406741, 0.20545068398197885, 0.19673041589905482, 0.20683748299019444, 0.22465888769340714, 0.18693136517037878, 0.16452066724486636, 0.9197008978016044, 0.16966611035877666, 0.8911130272184961, 0.20100485603065887, 0.9160888284160961, 0.916277188214941, 0.9345571638639282, 0.766171361138878, 0.15625654720548954, 0.6463990092759608, 0.21153281681127678, 0.1681391546894433, 0.2109946427634498, 0.16787466898611236, 0.15605983093474807, 0.21010576527728553, 0.17069332062853648, 0.1787636336078573, 0.18434060164655353, 0.1880303769609305, 0.18128583757148276, 0.19361805152300893, 0.19349239690934605, 0.1732346420185279, 0.19106264881543777, 0.09644062326573566, 0.08675541689021993, 0.09036361081409816, 0.09243727137110924, 0.09190735958825058, 0.08809183170705459, 0.09734913181094307, 0.12875323683854967, 0.09236489292419214]}, "mutation_prompt": null}
{"id": "0a438a23-8318-47cd-b6ba-1f7a1a07ebb1", "solution": "import numpy as np\n\nclass StreamlinedHybridEvolutionaryOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(25, budget // 15)  # Adjusted population size for better exploration\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, dim))\n        self.velocities = np.random.uniform(-0.2, 0.2, (self.pop_size, dim))\n        self.personal_best_positions = self.population.copy()\n        self.personal_best_values = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evals = 0\n        self.F = 0.5  # Slightly reduced scaling factor for stability\n        self.CR = 0.85  # Adjusted crossover rate\n        self.omega = 0.15  # Lower inertia weight for enhanced exploration\n        self.phi_p = 1.8  # Increased cognitive component\n        self.phi_g = 1.2  # Reduced social component\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evals < self.budget:\n            indices = np.random.choice(self.pop_size, (self.pop_size, 3), replace=True)\n            for i, (a, b, c) in enumerate(indices):\n                mutant = np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), *self.bounds)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                trial_value = func(trial)\n                self.evals += 1\n                if trial_value < self.personal_best_values[i]:\n                    self.personal_best_positions[i] = trial\n                    self.personal_best_values[i] = trial_value\n                if trial_value < self.global_best_value:\n                    self.global_best_value = trial_value\n                    self.global_best_position = trial\n\n            rand_vals = np.random.rand(2, self.pop_size, self.dim)\n            cognitive_component = self.phi_p * (self.personal_best_positions - self.population)\n            social_component = self.phi_g * (self.global_best_position - self.population)\n            self.velocities = self.omega * self.velocities + rand_vals[0] * cognitive_component + rand_vals[1] * social_component\n            self.population = np.clip(self.population + self.velocities, *self.bounds)\n\n        return self.global_best_value\n\n    def evaluate_population(self, func):\n        values = np.apply_along_axis(func, 1, self.population)\n        self.evals += self.pop_size\n        better_mask = values < self.personal_best_values\n        self.personal_best_positions[better_mask] = self.population[better_mask]\n        self.personal_best_values[better_mask] = values[better_mask]\n        min_idx = values.argmin()\n        if values[min_idx] < self.global_best_value:\n            self.global_best_value = values[min_idx]\n            self.global_best_position = self.population[min_idx]", "name": "StreamlinedHybridEvolutionaryOptimizer", "description": "Streamlined Hybrid Evolutionary Optimizer with enhanced diversity management and efficiency improvements for better convergence.", "configspace": "", "generation": 93, "fitness": 0.35486475440929055, "feedback": "The algorithm StreamlinedHybridEvolutionaryOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.35 with standard deviation 0.30.", "error": "", "parent_id": "e07d1435-043f-494b-a8c6-2edea7eb5022", "metadata": {"aucs": [0.9257320100409528, 0.9223001974202927, 0.9117028968068734, 0.9211953727100202, 0.9195677897009062, 0.9230290586225995, 0.9181221510987709, 0.9194828876154915, 0.9189904655740078, 0.8519144574691784, 0.8597406157289412, 0.8421939069268161, 0.7941699084688945, 0.8595398681007886, 0.8638440500341726, 0.8486735817519118, 0.8534697952878365, 0.844900544163648, 0.12467728484949381, 0.7852048355630717, 0.11864626098202624, 0.1598047519915219, 0.1576287103143319, 0.18310770207614624, 0.15830021820317508, 0.1234045253846372, 0.13443014171292267, 0.1217375654277787, 0.10502042068316919, 0.09623263623077305, 0.15865225649763903, 0.11355327348055977, 0.1236619089522113, 0.11020271765358391, 0.09849881671884408, 0.10843683476314836, 0.9879319203830746, 0.9902984175901213, 0.9770884031944903, 0.9780676157608098, 0.9854669070064467, 0.971242872005623, 0.9855008508314917, 0.9815342383462882, 0.9720397849450305, 0.8110299007835835, 0.8181852255465278, 0.8174858922058985, 0.8022072564851056, 0.8047878456432159, 0.763394038036802, 0.8089608266849095, 0.7674920025044913, 0.817081147280123, 0.2291561238379708, 0.22869932322987163, 0.20893423402866362, 0.21418709960510862, 0.19385403853047944, 0.28207520272612174, 0.17772949023738127, 0.2366387851734565, 0.24698738167849565, 0.3421148345897075, 0.2055792234882149, 0.27822670493634016, 0.216128526711858, 0.23712146563678138, 0.20894572620787444, 0.3104627048904408, 0.22304421546153586, 0.20201005069644573, 0.23538388962935575, 0.21566499580374587, 0.22860192053138317, 0.1992996156661735, 0.21840389333936516, 0.24870523715631176, 0.1890221738805138, 0.24136446174683157, 0.26349693087414694, 0.024733313724872086, 9.999999999998899e-05, 0.07101882972648799, 0.03836484941674789, 0.010809613659316542, 9.999999999998899e-05, 0.0060831969138464, 0.09747543294806349, 0.060183572703803145, 0.03175217229092431, 0.03486024098922902, 0.1009157688746809, 0.12146753210321237, 0.008385977427293856, 0.030904060763420782, 0.13697339657350116, 0.07192364474369284, 0.08124245443611311, 0.07077102211555464, 0.06616694241398668, 0.15292143268709912, 0.13360496752779494, 0.15991898080218403, 0.31259816910336236, 0.12735369182525413, 0.09217303995956827, 0.1165085949760456, 0.25043812462781, 0.06903272353886336, 0.18359455822008364, 0.33529660595212296, 0.1856144068967286, 0.07265501473266123, 0.12844084384659749, 0.14846065381058793, 0.23775449175461683, 0.5928858645162687, 0.5309943033353112, 0.5711444509225618, 0.6023857227704517, 0.5645332789615993, 0.5766031613071068, 0.6103326728452916, 0.6232040135759688, 0.5952227121583736, 0.09810700414783802, 0.10220021398576518, 0.15697208307411004, 0.14114744500666643, 0.7758631757525783, 0.14436249380823096, 0.16845607659042594, 0.11466534018389352, 0.14116653610252383, 0.17189017054604516, 0.4774822988696831, 0.2193636008542682, 0.39542431495356145, 0.2831999317155387, 0.24778241454538075, 0.6084853717938703, 0.3619163442062342, 0.14626377046375705, 0.22284742082523568, 0.3763327439050459, 0.5698019612404237, 0.482953416101076, 0.22205844199764424, 0.7633328555525003, 0.6040455001003655, 0.6364120488182867, 0.261832665076564, 0.22672118739001068, 0.3098417014653051, 0.26932760264899414, 0.30517534371048816, 0.21526618949333165, 0.47042154266454317, 0.31301087701731445, 0.36641677624199587, 0.23993374190424888, 0.21272656820678615, 0.21068492635347413, 0.20079663046702512, 0.19912437545960204, 0.2972568572652934, 0.2505081436242571, 0.21302769062811644, 0.2448610182254597, 0.20292030098401892, 0.22319909545529948, 0.19648417052769307, 0.22357178254612153, 0.867475446978356, 0.2532167449350765, 0.22332556228519884, 0.1808352452196118, 0.18375153816380618, 0.25292353255686384, 0.18585405387077258, 0.16533674641653684, 0.15417470636376096, 0.9355839538623494, 0.20041580671118864, 0.9374142162762873, 0.15234535392838278, 0.16896341786099167, 0.9416818029505142, 0.1276867962568966, 0.15646096717915792, 0.8161186762362181, 0.7528257721087495, 0.16716076637261834, 0.5035418901505722, 0.10498507925542877, 0.10465038435859564, 0.7769933739783655, 0.20697364165809795, 0.18748673538262284, 0.19905088506450608, 0.20226552377842677, 0.21701117615395948, 0.1961755155688023, 0.21936384810670229, 0.22816251982163338, 0.21388020369082672, 0.09982429026641526, 0.09810285172608224, 0.09191202099285434, 0.1015618260400486, 0.0914668388815737, 0.17452118110100723, 0.10365341611666168, 0.09489196709516434, 0.08581019717337168]}, "mutation_prompt": null}
{"id": "17b38a4d-3d42-4f16-9a05-7941ea09e457", "solution": "import numpy as np\n\nclass EnhancedHybridEvolutionaryOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(25, budget // 10)  # Adjusted population size\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, dim))\n        self.velocities = np.random.uniform(-0.25, 0.25, (self.pop_size, dim))\n        self.personal_best_positions = self.population.copy()\n        self.personal_best_values = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evals = 0\n        self.F = 0.6  # Adaptive scaling factor\n        self.CR = 0.9  # Further increased crossover rate\n        self.omega = 0.2  # Reduced inertia weight for faster convergence\n        self.phi_p = 1.6  # Enhanced cognitive component\n        self.phi_g = 1.4  # Enhanced social component\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evals < self.budget:\n            for i in range(self.pop_size):\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), *self.bounds)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                trial_value = func(trial)\n                self.evals += 1\n                if trial_value < self.personal_best_values[i]:\n                    self.personal_best_positions[i] = trial\n                    self.personal_best_values[i] = trial_value\n                if trial_value < self.global_best_value:\n                    self.global_best_value = trial_value\n                    self.global_best_position = trial\n\n            rand_vals = np.random.rand(2, self.pop_size, self.dim)\n            self.velocities = (self.omega * self.velocities +\n                               rand_vals[0] * self.phi_p * (self.personal_best_positions - self.population) +\n                               rand_vals[1] * self.phi_g * (self.global_best_position - self.population))\n            np.clip(self.population + self.velocities, *self.bounds, out=self.population)\n\n        return self.global_best_value\n\n    def evaluate_population(self, func):\n        values = np.apply_along_axis(func, 1, self.population)\n        self.evals += self.pop_size\n        better_mask = values < self.personal_best_values\n        np.copyto(self.personal_best_positions, self.population, where=better_mask[:, np.newaxis])\n        np.copyto(self.personal_best_values, values, where=better_mask)\n        min_idx = values.argmin()\n        if values[min_idx] < self.global_best_value:\n            self.global_best_value = values[min_idx]\n            self.global_best_position = self.population[min_idx]", "name": "EnhancedHybridEvolutionaryOptimizer", "description": "Enhanced Hybrid Evolutionary Optimizer with adaptive parameter updates and streamlined operations for improved efficiency.", "configspace": "", "generation": 70, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e07d1435-043f-494b-a8c6-2edea7eb5022", "metadata": {"aucs": [0.9100591978626473, 0.9044994117948806, 0.9154336842636235, 0.9060103639050422, 0.9061391613313525, 0.9186077209996638, 0.9056705520135132, 0.9085925349984292, 0.9060124343834618, 0.7730828893847684, 0.8290502310361922, 0.8433864961489217, 0.8312245812080997, 0.8340442826557538, 0.8318469290819372, 0.8376990055353755, 0.8365199384611939, 0.8156869958531187, 0.1406765849888887, 0.140506372375391, 0.18353521923892546, 0.15129937916775782, 0.1046874889256807, 0.11439911781901957, 0.15629979223610813, 0.15611616321745403, 0.1561052925699099, 0.14013839286592755, 0.17452573535150973, 0.11540495731223765, 0.1156206018306557, 0.10831642030496424, 0.15526460281379828, 0.11842277911435717, 0.12019151191090038, 0.1389970741807368, 0.9844978500259234, 0.9878583520742972, 0.9860396912703203, 0.9765340157415099, 0.99020637002614, 0.9730286692477783, 0.9881108867731351, 0.9772940355636521, 0.979675598527954, 0.8163261296977598, 0.7927101800514582, 0.7987382064052436, 0.7781791506676524, 0.783191372968221, 0.7780827572341735, 0.7781443267791177, 0.7742847819580602, 0.7998653518138723, 0.22584838531396523, 0.16774631889481229, 0.37906250135893227, 0.3611115926407116, 0.8798075339726283, 0.9153577231389178, 0.24003600712813555, 0.22101330361244054, 0.23764838807369149, 0.26004701558544363, 0.23540159031490016, 0.24989713900847632, 0.22680064384768517, 0.251642271368276, 0.2180049044469704, 0.23205668148330483, 0.13275316372557477, 0.2285539082627912, 0.2431205024809906, 0.24993365464160966, 0.13242125883287714, 0.25215713971093656, 0.27298122456243046, 0.24847233289289583, 0.13379038283877742, 0.2655833487135125, 0.13045599196106739, 0.0002560216272237126, 9.999999999998899e-05, 0.003126293070108699, 0.0059105933928934595, 9.999999999998899e-05, 0.04523079896543514, 0.04723932887017834, 0.07902570418786214, 9.999999999998899e-05, 0.050122098842234064, 0.04015492592906611, 0.08271742895951761, 0.027306887879120167, 0.06508677800414897, 0.02049929320125743, 0.09713586991531342, 0.15712638371921317, 0.11022232352414285, 0.06576639221505198, 0.1519460464489928, 0.12726867277121545, 0.10716522162129183, 0.09709840064680808, 0.08131663224438523, 0.10436034858926801, 0.12132644139856708, 0.16206841846628484, 0.1711229837836591, 0.09204838505583868, 0.08204523903971894, 0.168560471686529, 0.32234421286555137, 0.20436819976602005, 0.11151399958606367, 0.164371841347285, 0.18502712077387518, 0.5749047734775052, 0.6228785039767997, 0.5667034018060592, 0.565140735273234, 0.5730399749906032, 0.5845038944758993, 0.6009485646662722, 0.6226296560156406, 0.6064738294828372, 0.14341250325562938, 0.13589840746982174, 0.13953575619146885, 0.18581627069944018, 0.15393706432096477, 0.15453106535274497, 0.14324418264310756, 0.15579236218308412, 0.15417209268601395, 0.18325476114447747, 0.1983344519363387, 0.5666071466637517, 0.20530950170253925, 0.2860054254410084, 0.2039879652841594, 0.19213878040529198, 0.4694021457172788, 0.4823459145296156, 0.41753911750022, 0.5278416303442346, 0.32891811038756946, 0.3579442904603769, 0.729749454947026, 0.43246987967548667, 0.6014523500612458, 0.8006513685740014, 0.7663538699945746, 0.3532957097057746, 0.4767899730772923, 0.3895938908436154, 0.24297016192043597, 0.3212427050482427, 0.3250317590787525, 0.3699037912019516, 0.31708398080009825, 0.24846584304828434, 0.252456253590722, 0.21983366961517237, 0.2090210428309578, 0.2038946070676937, 0.22702518176653774, 0.2109483599633346, 0.21367448521501442, 0.23479255198876559, 0.20676407174588007, 0.843407571921244, 0.18573794943702793, 0.22205281561123413, 0.18903397501048458, 0.20803824406741, 0.20545068398197885, 0.19673041589905482, 0.20683748299019444, 0.22465888769340714, 0.18693136517037878, 0.16452066724486636, 0.9197008978016044, 0.16966611035877666, 0.8911130272184961, 0.20100485603065887, 0.9160888284160961, 0.916277188214941, 0.9345571638639282, 0.766171361138878, 0.15625654720548954, 0.6463990092759608, 0.21153281681127678, 0.1681391546894433, 0.2109946427634498, 0.16787466898611236, 0.15605983093474807, 0.21010576527728553, 0.17069332062853648, 0.1787636336078573, 0.18434060164655353, 0.1880303769609305, 0.18128583757148276, 0.19361805152300893, 0.19349239690934605, 0.1732346420185279, 0.19106264881543777, 0.09644062326573566, 0.08675541689021993, 0.09036361081409816, 0.09243727137110924, 0.09190735958825058, 0.08809183170705459, 0.09734913181094307, 0.12875323683854967, 0.09236489292419214]}, "mutation_prompt": null}
{"id": "b4992297-2f5c-4db3-874e-78c618e29467", "solution": "import numpy as np\n\nclass EnhancedHybridEvolutionaryOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(25, budget // 10)  # Adjusted population size\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, dim))\n        self.velocities = np.random.uniform(-0.25, 0.25, (self.pop_size, dim))\n        self.personal_best_positions = self.population.copy()\n        self.personal_best_values = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evals = 0\n        self.F = 0.6  # Adaptive scaling factor\n        self.CR = 0.9  # Further increased crossover rate\n        self.omega = 0.2  # Reduced inertia weight for faster convergence\n        self.phi_p = 1.6  # Enhanced cognitive component\n        self.phi_g = 1.4  # Enhanced social component\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evals < self.budget:\n            for i in range(self.pop_size):\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), *self.bounds)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                trial_value = func(trial)\n                self.evals += 1\n                if trial_value < self.personal_best_values[i]:\n                    self.personal_best_positions[i] = trial\n                    self.personal_best_values[i] = trial_value\n                if trial_value < self.global_best_value:\n                    self.global_best_value = trial_value\n                    self.global_best_position = trial\n\n            rand_vals = np.random.rand(2, self.pop_size, self.dim)\n            self.velocities = (self.omega * self.velocities +\n                               rand_vals[0] * self.phi_p * (self.personal_best_positions - self.population) +\n                               rand_vals[1] * self.phi_g * (self.global_best_position - self.population))\n            np.clip(self.population + self.velocities, *self.bounds, out=self.population)\n\n        return self.global_best_value\n\n    def evaluate_population(self, func):\n        values = np.apply_along_axis(func, 1, self.population)\n        self.evals += self.pop_size\n        better_mask = values < self.personal_best_values\n        np.copyto(self.personal_best_positions, self.population, where=better_mask[:, np.newaxis])\n        np.copyto(self.personal_best_values, values, where=better_mask)\n        min_idx = values.argmin()\n        if values[min_idx] < self.global_best_value:\n            self.global_best_value = values[min_idx]\n            self.global_best_position = self.population[min_idx]", "name": "EnhancedHybridEvolutionaryOptimizer", "description": "Enhanced Hybrid Evolutionary Optimizer with adaptive parameter updates and streamlined operations for improved efficiency.", "configspace": "", "generation": 70, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e07d1435-043f-494b-a8c6-2edea7eb5022", "metadata": {"aucs": [0.9100591978626473, 0.9044994117948806, 0.9154336842636235, 0.9060103639050422, 0.9061391613313525, 0.9186077209996638, 0.9056705520135132, 0.9085925349984292, 0.9060124343834618, 0.7730828893847684, 0.8290502310361922, 0.8433864961489217, 0.8312245812080997, 0.8340442826557538, 0.8318469290819372, 0.8376990055353755, 0.8365199384611939, 0.8156869958531187, 0.1406765849888887, 0.140506372375391, 0.18353521923892546, 0.15129937916775782, 0.1046874889256807, 0.11439911781901957, 0.15629979223610813, 0.15611616321745403, 0.1561052925699099, 0.14013839286592755, 0.17452573535150973, 0.11540495731223765, 0.1156206018306557, 0.10831642030496424, 0.15526460281379828, 0.11842277911435717, 0.12019151191090038, 0.1389970741807368, 0.9844978500259234, 0.9878583520742972, 0.9860396912703203, 0.9765340157415099, 0.99020637002614, 0.9730286692477783, 0.9881108867731351, 0.9772940355636521, 0.979675598527954, 0.8163261296977598, 0.7927101800514582, 0.7987382064052436, 0.7781791506676524, 0.783191372968221, 0.7780827572341735, 0.7781443267791177, 0.7742847819580602, 0.7998653518138723, 0.22584838531396523, 0.16774631889481229, 0.37906250135893227, 0.3611115926407116, 0.8798075339726283, 0.9153577231389178, 0.24003600712813555, 0.22101330361244054, 0.23764838807369149, 0.26004701558544363, 0.23540159031490016, 0.24989713900847632, 0.22680064384768517, 0.251642271368276, 0.2180049044469704, 0.23205668148330483, 0.13275316372557477, 0.2285539082627912, 0.2431205024809906, 0.24993365464160966, 0.13242125883287714, 0.25215713971093656, 0.27298122456243046, 0.24847233289289583, 0.13379038283877742, 0.2655833487135125, 0.13045599196106739, 0.0002560216272237126, 9.999999999998899e-05, 0.003126293070108699, 0.0059105933928934595, 9.999999999998899e-05, 0.04523079896543514, 0.04723932887017834, 0.07902570418786214, 9.999999999998899e-05, 0.050122098842234064, 0.04015492592906611, 0.08271742895951761, 0.027306887879120167, 0.06508677800414897, 0.02049929320125743, 0.09713586991531342, 0.15712638371921317, 0.11022232352414285, 0.06576639221505198, 0.1519460464489928, 0.12726867277121545, 0.10716522162129183, 0.09709840064680808, 0.08131663224438523, 0.10436034858926801, 0.12132644139856708, 0.16206841846628484, 0.1711229837836591, 0.09204838505583868, 0.08204523903971894, 0.168560471686529, 0.32234421286555137, 0.20436819976602005, 0.11151399958606367, 0.164371841347285, 0.18502712077387518, 0.5749047734775052, 0.6228785039767997, 0.5667034018060592, 0.565140735273234, 0.5730399749906032, 0.5845038944758993, 0.6009485646662722, 0.6226296560156406, 0.6064738294828372, 0.14341250325562938, 0.13589840746982174, 0.13953575619146885, 0.18581627069944018, 0.15393706432096477, 0.15453106535274497, 0.14324418264310756, 0.15579236218308412, 0.15417209268601395, 0.18325476114447747, 0.1983344519363387, 0.5666071466637517, 0.20530950170253925, 0.2860054254410084, 0.2039879652841594, 0.19213878040529198, 0.4694021457172788, 0.4823459145296156, 0.41753911750022, 0.5278416303442346, 0.32891811038756946, 0.3579442904603769, 0.729749454947026, 0.43246987967548667, 0.6014523500612458, 0.8006513685740014, 0.7663538699945746, 0.3532957097057746, 0.4767899730772923, 0.3895938908436154, 0.24297016192043597, 0.3212427050482427, 0.3250317590787525, 0.3699037912019516, 0.31708398080009825, 0.24846584304828434, 0.252456253590722, 0.21983366961517237, 0.2090210428309578, 0.2038946070676937, 0.22702518176653774, 0.2109483599633346, 0.21367448521501442, 0.23479255198876559, 0.20676407174588007, 0.843407571921244, 0.18573794943702793, 0.22205281561123413, 0.18903397501048458, 0.20803824406741, 0.20545068398197885, 0.19673041589905482, 0.20683748299019444, 0.22465888769340714, 0.18693136517037878, 0.16452066724486636, 0.9197008978016044, 0.16966611035877666, 0.8911130272184961, 0.20100485603065887, 0.9160888284160961, 0.916277188214941, 0.9345571638639282, 0.766171361138878, 0.15625654720548954, 0.6463990092759608, 0.21153281681127678, 0.1681391546894433, 0.2109946427634498, 0.16787466898611236, 0.15605983093474807, 0.21010576527728553, 0.17069332062853648, 0.1787636336078573, 0.18434060164655353, 0.1880303769609305, 0.18128583757148276, 0.19361805152300893, 0.19349239690934605, 0.1732346420185279, 0.19106264881543777, 0.09644062326573566, 0.08675541689021993, 0.09036361081409816, 0.09243727137110924, 0.09190735958825058, 0.08809183170705459, 0.09734913181094307, 0.12875323683854967, 0.09236489292419214]}, "mutation_prompt": null}
{"id": "f631350c-4d5d-4b04-b58a-7e1416dc59ad", "solution": "import numpy as np\n\nclass EnhancedHybridEvolutionaryOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(25, budget // 10)  # Adjusted population size\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, dim))\n        self.velocities = np.random.uniform(-0.25, 0.25, (self.pop_size, dim))\n        self.personal_best_positions = self.population.copy()\n        self.personal_best_values = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evals = 0\n        self.F = 0.6  # Adaptive scaling factor\n        self.CR = 0.9  # Further increased crossover rate\n        self.omega = 0.2  # Reduced inertia weight for faster convergence\n        self.phi_p = 1.6  # Enhanced cognitive component\n        self.phi_g = 1.4  # Enhanced social component\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evals < self.budget:\n            for i in range(self.pop_size):\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), *self.bounds)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                trial_value = func(trial)\n                self.evals += 1\n                if trial_value < self.personal_best_values[i]:\n                    self.personal_best_positions[i] = trial\n                    self.personal_best_values[i] = trial_value\n                if trial_value < self.global_best_value:\n                    self.global_best_value = trial_value\n                    self.global_best_position = trial\n\n            rand_vals = np.random.rand(2, self.pop_size, self.dim)\n            self.velocities = (self.omega * self.velocities +\n                               rand_vals[0] * self.phi_p * (self.personal_best_positions - self.population) +\n                               rand_vals[1] * self.phi_g * (self.global_best_position - self.population))\n            np.clip(self.population + self.velocities, *self.bounds, out=self.population)\n\n        return self.global_best_value\n\n    def evaluate_population(self, func):\n        values = np.apply_along_axis(func, 1, self.population)\n        self.evals += self.pop_size\n        better_mask = values < self.personal_best_values\n        np.copyto(self.personal_best_positions, self.population, where=better_mask[:, np.newaxis])\n        np.copyto(self.personal_best_values, values, where=better_mask)\n        min_idx = values.argmin()\n        if values[min_idx] < self.global_best_value:\n            self.global_best_value = values[min_idx]\n            self.global_best_position = self.population[min_idx]", "name": "EnhancedHybridEvolutionaryOptimizer", "description": "Enhanced Hybrid Evolutionary Optimizer with adaptive parameter updates and streamlined operations for improved efficiency.", "configspace": "", "generation": 70, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e07d1435-043f-494b-a8c6-2edea7eb5022", "metadata": {"aucs": [0.9100591978626473, 0.9044994117948806, 0.9154336842636235, 0.9060103639050422, 0.9061391613313525, 0.9186077209996638, 0.9056705520135132, 0.9085925349984292, 0.9060124343834618, 0.7730828893847684, 0.8290502310361922, 0.8433864961489217, 0.8312245812080997, 0.8340442826557538, 0.8318469290819372, 0.8376990055353755, 0.8365199384611939, 0.8156869958531187, 0.1406765849888887, 0.140506372375391, 0.18353521923892546, 0.15129937916775782, 0.1046874889256807, 0.11439911781901957, 0.15629979223610813, 0.15611616321745403, 0.1561052925699099, 0.14013839286592755, 0.17452573535150973, 0.11540495731223765, 0.1156206018306557, 0.10831642030496424, 0.15526460281379828, 0.11842277911435717, 0.12019151191090038, 0.1389970741807368, 0.9844978500259234, 0.9878583520742972, 0.9860396912703203, 0.9765340157415099, 0.99020637002614, 0.9730286692477783, 0.9881108867731351, 0.9772940355636521, 0.979675598527954, 0.8163261296977598, 0.7927101800514582, 0.7987382064052436, 0.7781791506676524, 0.783191372968221, 0.7780827572341735, 0.7781443267791177, 0.7742847819580602, 0.7998653518138723, 0.22584838531396523, 0.16774631889481229, 0.37906250135893227, 0.3611115926407116, 0.8798075339726283, 0.9153577231389178, 0.24003600712813555, 0.22101330361244054, 0.23764838807369149, 0.26004701558544363, 0.23540159031490016, 0.24989713900847632, 0.22680064384768517, 0.251642271368276, 0.2180049044469704, 0.23205668148330483, 0.13275316372557477, 0.2285539082627912, 0.2431205024809906, 0.24993365464160966, 0.13242125883287714, 0.25215713971093656, 0.27298122456243046, 0.24847233289289583, 0.13379038283877742, 0.2655833487135125, 0.13045599196106739, 0.0002560216272237126, 9.999999999998899e-05, 0.003126293070108699, 0.0059105933928934595, 9.999999999998899e-05, 0.04523079896543514, 0.04723932887017834, 0.07902570418786214, 9.999999999998899e-05, 0.050122098842234064, 0.04015492592906611, 0.08271742895951761, 0.027306887879120167, 0.06508677800414897, 0.02049929320125743, 0.09713586991531342, 0.15712638371921317, 0.11022232352414285, 0.06576639221505198, 0.1519460464489928, 0.12726867277121545, 0.10716522162129183, 0.09709840064680808, 0.08131663224438523, 0.10436034858926801, 0.12132644139856708, 0.16206841846628484, 0.1711229837836591, 0.09204838505583868, 0.08204523903971894, 0.168560471686529, 0.32234421286555137, 0.20436819976602005, 0.11151399958606367, 0.164371841347285, 0.18502712077387518, 0.5749047734775052, 0.6228785039767997, 0.5667034018060592, 0.565140735273234, 0.5730399749906032, 0.5845038944758993, 0.6009485646662722, 0.6226296560156406, 0.6064738294828372, 0.14341250325562938, 0.13589840746982174, 0.13953575619146885, 0.18581627069944018, 0.15393706432096477, 0.15453106535274497, 0.14324418264310756, 0.15579236218308412, 0.15417209268601395, 0.18325476114447747, 0.1983344519363387, 0.5666071466637517, 0.20530950170253925, 0.2860054254410084, 0.2039879652841594, 0.19213878040529198, 0.4694021457172788, 0.4823459145296156, 0.41753911750022, 0.5278416303442346, 0.32891811038756946, 0.3579442904603769, 0.729749454947026, 0.43246987967548667, 0.6014523500612458, 0.8006513685740014, 0.7663538699945746, 0.3532957097057746, 0.4767899730772923, 0.3895938908436154, 0.24297016192043597, 0.3212427050482427, 0.3250317590787525, 0.3699037912019516, 0.31708398080009825, 0.24846584304828434, 0.252456253590722, 0.21983366961517237, 0.2090210428309578, 0.2038946070676937, 0.22702518176653774, 0.2109483599633346, 0.21367448521501442, 0.23479255198876559, 0.20676407174588007, 0.843407571921244, 0.18573794943702793, 0.22205281561123413, 0.18903397501048458, 0.20803824406741, 0.20545068398197885, 0.19673041589905482, 0.20683748299019444, 0.22465888769340714, 0.18693136517037878, 0.16452066724486636, 0.9197008978016044, 0.16966611035877666, 0.8911130272184961, 0.20100485603065887, 0.9160888284160961, 0.916277188214941, 0.9345571638639282, 0.766171361138878, 0.15625654720548954, 0.6463990092759608, 0.21153281681127678, 0.1681391546894433, 0.2109946427634498, 0.16787466898611236, 0.15605983093474807, 0.21010576527728553, 0.17069332062853648, 0.1787636336078573, 0.18434060164655353, 0.1880303769609305, 0.18128583757148276, 0.19361805152300893, 0.19349239690934605, 0.1732346420185279, 0.19106264881543777, 0.09644062326573566, 0.08675541689021993, 0.09036361081409816, 0.09243727137110924, 0.09190735958825058, 0.08809183170705459, 0.09734913181094307, 0.12875323683854967, 0.09236489292419214]}, "mutation_prompt": null}
{"id": "198649c1-ff03-4f84-a72e-70be0c78f7e5", "solution": "import numpy as np\n\nclass EnhancedHybridEvolutionaryOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(25, budget // 10)  # Adjusted population size\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, dim))\n        self.velocities = np.random.uniform(-0.25, 0.25, (self.pop_size, dim))\n        self.personal_best_positions = self.population.copy()\n        self.personal_best_values = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evals = 0\n        self.F = 0.6  # Adaptive scaling factor\n        self.CR = 0.9  # Further increased crossover rate\n        self.omega = 0.2  # Reduced inertia weight for faster convergence\n        self.phi_p = 1.6  # Enhanced cognitive component\n        self.phi_g = 1.4  # Enhanced social component\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evals < self.budget:\n            for i in range(self.pop_size):\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), *self.bounds)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                trial_value = func(trial)\n                self.evals += 1\n                if trial_value < self.personal_best_values[i]:\n                    self.personal_best_positions[i] = trial\n                    self.personal_best_values[i] = trial_value\n                if trial_value < self.global_best_value:\n                    self.global_best_value = trial_value\n                    self.global_best_position = trial\n\n            rand_vals = np.random.rand(2, self.pop_size, self.dim)\n            self.velocities = (self.omega * self.velocities +\n                               rand_vals[0] * self.phi_p * (self.personal_best_positions - self.population) +\n                               rand_vals[1] * self.phi_g * (self.global_best_position - self.population))\n            np.clip(self.population + self.velocities, *self.bounds, out=self.population)\n\n        return self.global_best_value\n\n    def evaluate_population(self, func):\n        values = np.apply_along_axis(func, 1, self.population)\n        self.evals += self.pop_size\n        better_mask = values < self.personal_best_values\n        np.copyto(self.personal_best_positions, self.population, where=better_mask[:, np.newaxis])\n        np.copyto(self.personal_best_values, values, where=better_mask)\n        min_idx = values.argmin()\n        if values[min_idx] < self.global_best_value:\n            self.global_best_value = values[min_idx]\n            self.global_best_position = self.population[min_idx]", "name": "EnhancedHybridEvolutionaryOptimizer", "description": "Enhanced Hybrid Evolutionary Optimizer with adaptive parameter updates and streamlined operations for improved efficiency.", "configspace": "", "generation": 70, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e07d1435-043f-494b-a8c6-2edea7eb5022", "metadata": {"aucs": [0.9100591978626473, 0.9044994117948806, 0.9154336842636235, 0.9060103639050422, 0.9061391613313525, 0.9186077209996638, 0.9056705520135132, 0.9085925349984292, 0.9060124343834618, 0.7730828893847684, 0.8290502310361922, 0.8433864961489217, 0.8312245812080997, 0.8340442826557538, 0.8318469290819372, 0.8376990055353755, 0.8365199384611939, 0.8156869958531187, 0.1406765849888887, 0.140506372375391, 0.18353521923892546, 0.15129937916775782, 0.1046874889256807, 0.11439911781901957, 0.15629979223610813, 0.15611616321745403, 0.1561052925699099, 0.14013839286592755, 0.17452573535150973, 0.11540495731223765, 0.1156206018306557, 0.10831642030496424, 0.15526460281379828, 0.11842277911435717, 0.12019151191090038, 0.1389970741807368, 0.9844978500259234, 0.9878583520742972, 0.9860396912703203, 0.9765340157415099, 0.99020637002614, 0.9730286692477783, 0.9881108867731351, 0.9772940355636521, 0.979675598527954, 0.8163261296977598, 0.7927101800514582, 0.7987382064052436, 0.7781791506676524, 0.783191372968221, 0.7780827572341735, 0.7781443267791177, 0.7742847819580602, 0.7998653518138723, 0.22584838531396523, 0.16774631889481229, 0.37906250135893227, 0.3611115926407116, 0.8798075339726283, 0.9153577231389178, 0.24003600712813555, 0.22101330361244054, 0.23764838807369149, 0.26004701558544363, 0.23540159031490016, 0.24989713900847632, 0.22680064384768517, 0.251642271368276, 0.2180049044469704, 0.23205668148330483, 0.13275316372557477, 0.2285539082627912, 0.2431205024809906, 0.24993365464160966, 0.13242125883287714, 0.25215713971093656, 0.27298122456243046, 0.24847233289289583, 0.13379038283877742, 0.2655833487135125, 0.13045599196106739, 0.0002560216272237126, 9.999999999998899e-05, 0.003126293070108699, 0.0059105933928934595, 9.999999999998899e-05, 0.04523079896543514, 0.04723932887017834, 0.07902570418786214, 9.999999999998899e-05, 0.050122098842234064, 0.04015492592906611, 0.08271742895951761, 0.027306887879120167, 0.06508677800414897, 0.02049929320125743, 0.09713586991531342, 0.15712638371921317, 0.11022232352414285, 0.06576639221505198, 0.1519460464489928, 0.12726867277121545, 0.10716522162129183, 0.09709840064680808, 0.08131663224438523, 0.10436034858926801, 0.12132644139856708, 0.16206841846628484, 0.1711229837836591, 0.09204838505583868, 0.08204523903971894, 0.168560471686529, 0.32234421286555137, 0.20436819976602005, 0.11151399958606367, 0.164371841347285, 0.18502712077387518, 0.5749047734775052, 0.6228785039767997, 0.5667034018060592, 0.565140735273234, 0.5730399749906032, 0.5845038944758993, 0.6009485646662722, 0.6226296560156406, 0.6064738294828372, 0.14341250325562938, 0.13589840746982174, 0.13953575619146885, 0.18581627069944018, 0.15393706432096477, 0.15453106535274497, 0.14324418264310756, 0.15579236218308412, 0.15417209268601395, 0.18325476114447747, 0.1983344519363387, 0.5666071466637517, 0.20530950170253925, 0.2860054254410084, 0.2039879652841594, 0.19213878040529198, 0.4694021457172788, 0.4823459145296156, 0.41753911750022, 0.5278416303442346, 0.32891811038756946, 0.3579442904603769, 0.729749454947026, 0.43246987967548667, 0.6014523500612458, 0.8006513685740014, 0.7663538699945746, 0.3532957097057746, 0.4767899730772923, 0.3895938908436154, 0.24297016192043597, 0.3212427050482427, 0.3250317590787525, 0.3699037912019516, 0.31708398080009825, 0.24846584304828434, 0.252456253590722, 0.21983366961517237, 0.2090210428309578, 0.2038946070676937, 0.22702518176653774, 0.2109483599633346, 0.21367448521501442, 0.23479255198876559, 0.20676407174588007, 0.843407571921244, 0.18573794943702793, 0.22205281561123413, 0.18903397501048458, 0.20803824406741, 0.20545068398197885, 0.19673041589905482, 0.20683748299019444, 0.22465888769340714, 0.18693136517037878, 0.16452066724486636, 0.9197008978016044, 0.16966611035877666, 0.8911130272184961, 0.20100485603065887, 0.9160888284160961, 0.916277188214941, 0.9345571638639282, 0.766171361138878, 0.15625654720548954, 0.6463990092759608, 0.21153281681127678, 0.1681391546894433, 0.2109946427634498, 0.16787466898611236, 0.15605983093474807, 0.21010576527728553, 0.17069332062853648, 0.1787636336078573, 0.18434060164655353, 0.1880303769609305, 0.18128583757148276, 0.19361805152300893, 0.19349239690934605, 0.1732346420185279, 0.19106264881543777, 0.09644062326573566, 0.08675541689021993, 0.09036361081409816, 0.09243727137110924, 0.09190735958825058, 0.08809183170705459, 0.09734913181094307, 0.12875323683854967, 0.09236489292419214]}, "mutation_prompt": null}
{"id": "07698c94-eed8-4008-a590-e483149f057a", "solution": "import numpy as np\n\nclass EnhancedHybridEvolutionaryOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(25, budget // 10)  # Adjusted population size\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, dim))\n        self.velocities = np.random.uniform(-0.25, 0.25, (self.pop_size, dim))\n        self.personal_best_positions = self.population.copy()\n        self.personal_best_values = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evals = 0\n        self.F = 0.6  # Adaptive scaling factor\n        self.CR = 0.9  # Further increased crossover rate\n        self.omega = 0.2  # Reduced inertia weight for faster convergence\n        self.phi_p = 1.6  # Enhanced cognitive component\n        self.phi_g = 1.4  # Enhanced social component\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evals < self.budget:\n            for i in range(self.pop_size):\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), *self.bounds)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                trial_value = func(trial)\n                self.evals += 1\n                if trial_value < self.personal_best_values[i]:\n                    self.personal_best_positions[i] = trial\n                    self.personal_best_values[i] = trial_value\n                if trial_value < self.global_best_value:\n                    self.global_best_value = trial_value\n                    self.global_best_position = trial\n\n            rand_vals = np.random.rand(2, self.pop_size, self.dim)\n            self.velocities = (self.omega * self.velocities +\n                               rand_vals[0] * self.phi_p * (self.personal_best_positions - self.population) +\n                               rand_vals[1] * self.phi_g * (self.global_best_position - self.population))\n            np.clip(self.population + self.velocities, *self.bounds, out=self.population)\n\n        return self.global_best_value\n\n    def evaluate_population(self, func):\n        values = np.apply_along_axis(func, 1, self.population)\n        self.evals += self.pop_size\n        better_mask = values < self.personal_best_values\n        np.copyto(self.personal_best_positions, self.population, where=better_mask[:, np.newaxis])\n        np.copyto(self.personal_best_values, values, where=better_mask)\n        min_idx = values.argmin()\n        if values[min_idx] < self.global_best_value:\n            self.global_best_value = values[min_idx]\n            self.global_best_position = self.population[min_idx]", "name": "EnhancedHybridEvolutionaryOptimizer", "description": "Enhanced Hybrid Evolutionary Optimizer with adaptive parameter updates and streamlined operations for improved efficiency.", "configspace": "", "generation": 70, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e07d1435-043f-494b-a8c6-2edea7eb5022", "metadata": {"aucs": [0.9100591978626473, 0.9044994117948806, 0.9154336842636235, 0.9060103639050422, 0.9061391613313525, 0.9186077209996638, 0.9056705520135132, 0.9085925349984292, 0.9060124343834618, 0.7730828893847684, 0.8290502310361922, 0.8433864961489217, 0.8312245812080997, 0.8340442826557538, 0.8318469290819372, 0.8376990055353755, 0.8365199384611939, 0.8156869958531187, 0.1406765849888887, 0.140506372375391, 0.18353521923892546, 0.15129937916775782, 0.1046874889256807, 0.11439911781901957, 0.15629979223610813, 0.15611616321745403, 0.1561052925699099, 0.14013839286592755, 0.17452573535150973, 0.11540495731223765, 0.1156206018306557, 0.10831642030496424, 0.15526460281379828, 0.11842277911435717, 0.12019151191090038, 0.1389970741807368, 0.9844978500259234, 0.9878583520742972, 0.9860396912703203, 0.9765340157415099, 0.99020637002614, 0.9730286692477783, 0.9881108867731351, 0.9772940355636521, 0.979675598527954, 0.8163261296977598, 0.7927101800514582, 0.7987382064052436, 0.7781791506676524, 0.783191372968221, 0.7780827572341735, 0.7781443267791177, 0.7742847819580602, 0.7998653518138723, 0.22584838531396523, 0.16774631889481229, 0.37906250135893227, 0.3611115926407116, 0.8798075339726283, 0.9153577231389178, 0.24003600712813555, 0.22101330361244054, 0.23764838807369149, 0.26004701558544363, 0.23540159031490016, 0.24989713900847632, 0.22680064384768517, 0.251642271368276, 0.2180049044469704, 0.23205668148330483, 0.13275316372557477, 0.2285539082627912, 0.2431205024809906, 0.24993365464160966, 0.13242125883287714, 0.25215713971093656, 0.27298122456243046, 0.24847233289289583, 0.13379038283877742, 0.2655833487135125, 0.13045599196106739, 0.0002560216272237126, 9.999999999998899e-05, 0.003126293070108699, 0.0059105933928934595, 9.999999999998899e-05, 0.04523079896543514, 0.04723932887017834, 0.07902570418786214, 9.999999999998899e-05, 0.050122098842234064, 0.04015492592906611, 0.08271742895951761, 0.027306887879120167, 0.06508677800414897, 0.02049929320125743, 0.09713586991531342, 0.15712638371921317, 0.11022232352414285, 0.06576639221505198, 0.1519460464489928, 0.12726867277121545, 0.10716522162129183, 0.09709840064680808, 0.08131663224438523, 0.10436034858926801, 0.12132644139856708, 0.16206841846628484, 0.1711229837836591, 0.09204838505583868, 0.08204523903971894, 0.168560471686529, 0.32234421286555137, 0.20436819976602005, 0.11151399958606367, 0.164371841347285, 0.18502712077387518, 0.5749047734775052, 0.6228785039767997, 0.5667034018060592, 0.565140735273234, 0.5730399749906032, 0.5845038944758993, 0.6009485646662722, 0.6226296560156406, 0.6064738294828372, 0.14341250325562938, 0.13589840746982174, 0.13953575619146885, 0.18581627069944018, 0.15393706432096477, 0.15453106535274497, 0.14324418264310756, 0.15579236218308412, 0.15417209268601395, 0.18325476114447747, 0.1983344519363387, 0.5666071466637517, 0.20530950170253925, 0.2860054254410084, 0.2039879652841594, 0.19213878040529198, 0.4694021457172788, 0.4823459145296156, 0.41753911750022, 0.5278416303442346, 0.32891811038756946, 0.3579442904603769, 0.729749454947026, 0.43246987967548667, 0.6014523500612458, 0.8006513685740014, 0.7663538699945746, 0.3532957097057746, 0.4767899730772923, 0.3895938908436154, 0.24297016192043597, 0.3212427050482427, 0.3250317590787525, 0.3699037912019516, 0.31708398080009825, 0.24846584304828434, 0.252456253590722, 0.21983366961517237, 0.2090210428309578, 0.2038946070676937, 0.22702518176653774, 0.2109483599633346, 0.21367448521501442, 0.23479255198876559, 0.20676407174588007, 0.843407571921244, 0.18573794943702793, 0.22205281561123413, 0.18903397501048458, 0.20803824406741, 0.20545068398197885, 0.19673041589905482, 0.20683748299019444, 0.22465888769340714, 0.18693136517037878, 0.16452066724486636, 0.9197008978016044, 0.16966611035877666, 0.8911130272184961, 0.20100485603065887, 0.9160888284160961, 0.916277188214941, 0.9345571638639282, 0.766171361138878, 0.15625654720548954, 0.6463990092759608, 0.21153281681127678, 0.1681391546894433, 0.2109946427634498, 0.16787466898611236, 0.15605983093474807, 0.21010576527728553, 0.17069332062853648, 0.1787636336078573, 0.18434060164655353, 0.1880303769609305, 0.18128583757148276, 0.19361805152300893, 0.19349239690934605, 0.1732346420185279, 0.19106264881543777, 0.09644062326573566, 0.08675541689021993, 0.09036361081409816, 0.09243727137110924, 0.09190735958825058, 0.08809183170705459, 0.09734913181094307, 0.12875323683854967, 0.09236489292419214]}, "mutation_prompt": null}
{"id": "8caee58c-1cf2-484c-9f9a-332e82b83dd4", "solution": "import numpy as np\n\nclass EnhancedHybridEvolutionaryOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = min(25, budget // 10)  # Adjusted population size\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, dim))\n        self.velocities = np.random.uniform(-0.25, 0.25, (self.pop_size, dim))\n        self.personal_best_positions = self.population.copy()\n        self.personal_best_values = np.full(self.pop_size, np.inf)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.evals = 0\n        self.F = 0.6  # Adaptive scaling factor\n        self.CR = 0.9  # Further increased crossover rate\n        self.omega = 0.2  # Reduced inertia weight for faster convergence\n        self.phi_p = 1.6  # Enhanced cognitive component\n        self.phi_g = 1.4  # Enhanced social component\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n\n        while self.evals < self.budget:\n            for i in range(self.pop_size):\n                indices = np.random.choice(self.pop_size, 3, replace=False)\n                a, b, c = indices\n                mutant = np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), *self.bounds)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_mask, mutant, self.population[i])\n\n                trial_value = func(trial)\n                self.evals += 1\n                if trial_value < self.personal_best_values[i]:\n                    self.personal_best_positions[i] = trial\n                    self.personal_best_values[i] = trial_value\n                if trial_value < self.global_best_value:\n                    self.global_best_value = trial_value\n                    self.global_best_position = trial\n\n            rand_vals = np.random.rand(2, self.pop_size, self.dim)\n            self.velocities = (self.omega * self.velocities +\n                               rand_vals[0] * self.phi_p * (self.personal_best_positions - self.population) +\n                               rand_vals[1] * self.phi_g * (self.global_best_position - self.population))\n            np.clip(self.population + self.velocities, *self.bounds, out=self.population)\n\n        return self.global_best_value\n\n    def evaluate_population(self, func):\n        values = np.apply_along_axis(func, 1, self.population)\n        self.evals += self.pop_size\n        better_mask = values < self.personal_best_values\n        np.copyto(self.personal_best_positions, self.population, where=better_mask[:, np.newaxis])\n        np.copyto(self.personal_best_values, values, where=better_mask)\n        min_idx = values.argmin()\n        if values[min_idx] < self.global_best_value:\n            self.global_best_value = values[min_idx]\n            self.global_best_position = self.population[min_idx]", "name": "EnhancedHybridEvolutionaryOptimizer", "description": "Enhanced Hybrid Evolutionary Optimizer with adaptive parameter updates and streamlined operations for improved efficiency.", "configspace": "", "generation": 70, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e07d1435-043f-494b-a8c6-2edea7eb5022", "metadata": {"aucs": [0.9100591978626473, 0.9044994117948806, 0.9154336842636235, 0.9060103639050422, 0.9061391613313525, 0.9186077209996638, 0.9056705520135132, 0.9085925349984292, 0.9060124343834618, 0.7730828893847684, 0.8290502310361922, 0.8433864961489217, 0.8312245812080997, 0.8340442826557538, 0.8318469290819372, 0.8376990055353755, 0.8365199384611939, 0.8156869958531187, 0.1406765849888887, 0.140506372375391, 0.18353521923892546, 0.15129937916775782, 0.1046874889256807, 0.11439911781901957, 0.15629979223610813, 0.15611616321745403, 0.1561052925699099, 0.14013839286592755, 0.17452573535150973, 0.11540495731223765, 0.1156206018306557, 0.10831642030496424, 0.15526460281379828, 0.11842277911435717, 0.12019151191090038, 0.1389970741807368, 0.9844978500259234, 0.9878583520742972, 0.9860396912703203, 0.9765340157415099, 0.99020637002614, 0.9730286692477783, 0.9881108867731351, 0.9772940355636521, 0.979675598527954, 0.8163261296977598, 0.7927101800514582, 0.7987382064052436, 0.7781791506676524, 0.783191372968221, 0.7780827572341735, 0.7781443267791177, 0.7742847819580602, 0.7998653518138723, 0.22584838531396523, 0.16774631889481229, 0.37906250135893227, 0.3611115926407116, 0.8798075339726283, 0.9153577231389178, 0.24003600712813555, 0.22101330361244054, 0.23764838807369149, 0.26004701558544363, 0.23540159031490016, 0.24989713900847632, 0.22680064384768517, 0.251642271368276, 0.2180049044469704, 0.23205668148330483, 0.13275316372557477, 0.2285539082627912, 0.2431205024809906, 0.24993365464160966, 0.13242125883287714, 0.25215713971093656, 0.27298122456243046, 0.24847233289289583, 0.13379038283877742, 0.2655833487135125, 0.13045599196106739, 0.0002560216272237126, 9.999999999998899e-05, 0.003126293070108699, 0.0059105933928934595, 9.999999999998899e-05, 0.04523079896543514, 0.04723932887017834, 0.07902570418786214, 9.999999999998899e-05, 0.050122098842234064, 0.04015492592906611, 0.08271742895951761, 0.027306887879120167, 0.06508677800414897, 0.02049929320125743, 0.09713586991531342, 0.15712638371921317, 0.11022232352414285, 0.06576639221505198, 0.1519460464489928, 0.12726867277121545, 0.10716522162129183, 0.09709840064680808, 0.08131663224438523, 0.10436034858926801, 0.12132644139856708, 0.16206841846628484, 0.1711229837836591, 0.09204838505583868, 0.08204523903971894, 0.168560471686529, 0.32234421286555137, 0.20436819976602005, 0.11151399958606367, 0.164371841347285, 0.18502712077387518, 0.5749047734775052, 0.6228785039767997, 0.5667034018060592, 0.565140735273234, 0.5730399749906032, 0.5845038944758993, 0.6009485646662722, 0.6226296560156406, 0.6064738294828372, 0.14341250325562938, 0.13589840746982174, 0.13953575619146885, 0.18581627069944018, 0.15393706432096477, 0.15453106535274497, 0.14324418264310756, 0.15579236218308412, 0.15417209268601395, 0.18325476114447747, 0.1983344519363387, 0.5666071466637517, 0.20530950170253925, 0.2860054254410084, 0.2039879652841594, 0.19213878040529198, 0.4694021457172788, 0.4823459145296156, 0.41753911750022, 0.5278416303442346, 0.32891811038756946, 0.3579442904603769, 0.729749454947026, 0.43246987967548667, 0.6014523500612458, 0.8006513685740014, 0.7663538699945746, 0.3532957097057746, 0.4767899730772923, 0.3895938908436154, 0.24297016192043597, 0.3212427050482427, 0.3250317590787525, 0.3699037912019516, 0.31708398080009825, 0.24846584304828434, 0.252456253590722, 0.21983366961517237, 0.2090210428309578, 0.2038946070676937, 0.22702518176653774, 0.2109483599633346, 0.21367448521501442, 0.23479255198876559, 0.20676407174588007, 0.843407571921244, 0.18573794943702793, 0.22205281561123413, 0.18903397501048458, 0.20803824406741, 0.20545068398197885, 0.19673041589905482, 0.20683748299019444, 0.22465888769340714, 0.18693136517037878, 0.16452066724486636, 0.9197008978016044, 0.16966611035877666, 0.8911130272184961, 0.20100485603065887, 0.9160888284160961, 0.916277188214941, 0.9345571638639282, 0.766171361138878, 0.15625654720548954, 0.6463990092759608, 0.21153281681127678, 0.1681391546894433, 0.2109946427634498, 0.16787466898611236, 0.15605983093474807, 0.21010576527728553, 0.17069332062853648, 0.1787636336078573, 0.18434060164655353, 0.1880303769609305, 0.18128583757148276, 0.19361805152300893, 0.19349239690934605, 0.1732346420185279, 0.19106264881543777, 0.09644062326573566, 0.08675541689021993, 0.09036361081409816, 0.09243727137110924, 0.09190735958825058, 0.08809183170705459, 0.09734913181094307, 0.12875323683854967, 0.09236489292419214]}, "mutation_prompt": null}
