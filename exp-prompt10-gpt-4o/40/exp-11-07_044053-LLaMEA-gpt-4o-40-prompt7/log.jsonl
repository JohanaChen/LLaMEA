{"id": "0c4e0616-8ea1-44a3-a60e-e7139190218e", "solution": "import numpy as np\n\nclass NovelMetaheuristicOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * self.dim\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.F = 0.5  # Mutation factor\n        self.CR = 0.9  # Crossover rate\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Mutation\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = self.population[a] + self.F * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, *self.bounds)\n                \n                # Crossover\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < self.CR\n                trial[crossover_points] = mutant[crossover_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Dynamic adaptation of F and CR\n                self.F = np.clip(self.F + 0.01 * np.random.randn(), 0.1, 1.0)\n                self.CR = np.clip(self.CR + 0.01 * np.random.randn(), 0.1, 1.0)\n\n        # Return the best solution found\n        best_index = np.argmin(self.fitness)\n        return self.population[best_index]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1", "name": "NovelMetaheuristicOptimizer", "description": "The algorithm combines Differential Evolution with dynamic parameter adaptation to efficiently explore and exploit the search space for diverse optimization landscapes.", "configspace": "", "generation": 0, "fitness": 0.269565011225338, "feedback": "The algorithm NovelMetaheuristicOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.22.", "error": "", "parent_id": null, "metadata": {"aucs": [0.8045396462339381, 0.8346850660290176, 0.5827260764517073, 0.8037661574323112, 0.8123215670771295, 0.6045116322632507, 0.8071300071693338, 0.8464921108109535, 0.5687791260472059, 0.6310206764086086, 0.7136672608671841, 0.31878203083111434, 0.6078947721604601, 0.6276674053681497, 0.3174459743551308, 0.6300674125194464, 0.6474302747718192, 0.3392271779197099, 0.33277032590731526, 0.4281699585448472, 0.16761398413713047, 0.4397981980066161, 0.38719178874896876, 0.1494698972267139, 0.31685456870327566, 0.3831805868571321, 0.14615528414074963, 0.1616783630520131, 0.15458148330409716, 0.12175343398292793, 0.16439733980432325, 0.15422871817448525, 0.12834838694235007, 0.27286362083033444, 0.3445816825848539, 0.12075752246940152, 0.9280318318249153, 0.8965114014142248, 0.9561869588048221, 0.9135314744755676, 0.870176404502878, 0.9578092092231827, 0.9358890308384381, 0.8437462616862942, 0.9496546291717702, 0.2411365574404586, 0.3622856042781455, 0.22545232154869677, 0.29528612606512594, 0.36063413925463406, 0.22653080349017019, 0.2081843762506277, 0.3066791233903877, 0.23908949140142766, 0.30921843293210893, 0.32118424167375514, 0.25085800358174415, 0.3304006132698438, 0.7943459795832916, 0.2819751883734595, 0.616554963519703, 0.758503845288762, 0.28088741200179357, 0.1479567207705217, 0.2552284336327081, 0.1407533626602392, 0.17522952208504705, 0.17616441755340673, 0.13102490272088185, 0.19509072918258896, 0.19233060905704957, 0.12305998096710102, 0.1154168492092027, 0.1814028199739015, 0.15542431566743575, 0.15368526694266493, 0.17581917086531518, 0.14588979779316746, 0.14645038009430844, 0.1995888325090286, 0.1274776518969487, 9.999999999998899e-05, 0.05911244614241662, 9.999999999998899e-05, 9.999999999998899e-05, 0.12531568715277286, 0.011506841732858764, 0.02137044560315149, 0.04141488446130992, 0.006406769936503243, 0.11232037028708441, 0.19087087334983965, 0.1337671958022404, 0.045812763871053486, 0.15799750476632635, 0.16636398477408243, 0.13672877604220957, 0.2912179937304078, 0.15461069171960973, 0.002427026533231902, 0.0610841361196206, 9.999999999998899e-05, 9.999999999998899e-05, 0.03993267303341652, 9.999999999998899e-05, 0.03647084301634862, 0.11913437980726316, 9.999999999998899e-05, 0.11817677867813303, 0.15836183818160732, 0.09056645046878853, 0.11953167679202292, 0.22721245328623874, 0.12359852013949635, 0.1424477507737527, 0.16005503671544918, 0.08549666652746657, 0.4723631121635641, 0.5251241134716927, 0.47415948729714363, 0.4784405581779425, 0.5216528336798981, 0.41339223091933586, 0.4982199359033298, 0.5033868716477421, 0.403153392210685, 0.10570619634108003, 0.10475761153924412, 0.08629794868473595, 0.11091143004389215, 0.10234654506463647, 0.07833760483246965, 0.10101829835282827, 0.1119007511115262, 0.08002995645660427, 0.13996517109516515, 0.17124798045262035, 0.14717022718547867, 0.13219679162067566, 0.14672460700489065, 0.18005353526727996, 0.1461055050636172, 0.1498777836156291, 0.13902504261466309, 0.27225458106307665, 0.35294540728619406, 0.24516783231292594, 0.3150650324658377, 0.40171957644401424, 0.23748649770286745, 0.34398896776526977, 0.39319612486827293, 0.2629064524440562, 0.23755275571081036, 0.2549576969625045, 0.16689111430949122, 0.22142038307625467, 0.2761433342100832, 0.1755371047373374, 0.2194922819335281, 0.31501599658419677, 0.17870228553453094, 0.18130709621994623, 0.20737741429991585, 0.17374055864711646, 0.2444875258003112, 0.19625593624056814, 0.1726079180117942, 0.1972815278980976, 0.21245043733817714, 0.17350476808152415, 0.207311719926067, 0.24400530185779412, 0.19758628392026545, 0.2169742165765507, 0.20571220946903845, 0.1901122260656044, 0.2153956115965241, 0.40989539552528376, 0.18196126930828127, 0.16724471263602458, 0.18531270161837288, 0.2501934798040252, 0.23319913521263136, 0.1843104225938168, 0.15706798900867858, 0.31558743542027934, 0.18273291186665885, 0.17046787934620622, 0.24487376411861494, 0.20954358603356416, 0.20336781618319033, 0.19828951093381497, 0.2023535584501135, 0.17104842049160984, 0.22657288326660863, 0.49677257283240006, 0.19205331030984674, 0.21593622962900916, 0.17802962846780268, 0.17599166306278713, 0.18991759463258095, 0.17981664460949198, 0.19332597687628772, 0.18062605761394956, 0.1871817393852565, 0.17898071534908833, 0.081101698123902, 0.08190550791438689, 0.06697182497956433, 0.09456141740615764, 0.07675598382543503, 0.07426091096956677, 0.09177038652652081, 0.08777104329836916, 0.06686778141745087]}, "mutation_prompt": null}
{"id": "ac548925-26a2-4da0-9131-20070ea6dc2d", "solution": "import numpy as np\n\nclass NovelMetaheuristicOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * self.dim\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.F = 0.5  # Mutation factor\n        self.CR = 0.9  # Crossover rate\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Mutation\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = self.population[a] + self.F * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, *self.bounds)\n                \n                # Crossover\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < self.CR\n                trial[crossover_points] = mutant[crossover_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Dynamic adaptation of F and CR\n                self.F = np.clip(self.F + 0.01 * np.random.randn(), 0.1, 1.0)\n                self.CR = np.clip(self.CR + 0.01 * np.random.randn(), 0.1, 1.0)\n\n        # Return the best solution found\n        best_index = np.argmin(self.fitness)\n        return self.population[best_index]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1", "name": "NovelMetaheuristicOptimizer", "description": "The algorithm combines Differential Evolution with dynamic parameter adaptation to efficiently explore and exploit the search space for diverse optimization landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0c4e0616-8ea1-44a3-a60e-e7139190218e", "metadata": {"aucs": [0.8045396462339381, 0.8346850660290176, 0.5827260764517073, 0.8037661574323112, 0.8123215670771295, 0.6045116322632507, 0.8071300071693338, 0.8464921108109535, 0.5687791260472059, 0.6310206764086086, 0.7136672608671841, 0.31878203083111434, 0.6078947721604601, 0.6276674053681497, 0.3174459743551308, 0.6300674125194464, 0.6474302747718192, 0.3392271779197099, 0.33277032590731526, 0.4281699585448472, 0.16761398413713047, 0.4397981980066161, 0.38719178874896876, 0.1494698972267139, 0.31685456870327566, 0.3831805868571321, 0.14615528414074963, 0.1616783630520131, 0.15458148330409716, 0.12175343398292793, 0.16439733980432325, 0.15422871817448525, 0.12834838694235007, 0.27286362083033444, 0.3445816825848539, 0.12075752246940152, 0.9280318318249153, 0.8965114014142248, 0.9561869588048221, 0.9135314744755676, 0.870176404502878, 0.9578092092231827, 0.9358890308384381, 0.8437462616862942, 0.9496546291717702, 0.2411365574404586, 0.3622856042781455, 0.22545232154869677, 0.29528612606512594, 0.36063413925463406, 0.22653080349017019, 0.2081843762506277, 0.3066791233903877, 0.23908949140142766, 0.30921843293210893, 0.32118424167375514, 0.25085800358174415, 0.3304006132698438, 0.7943459795832916, 0.2819751883734595, 0.616554963519703, 0.758503845288762, 0.28088741200179357, 0.1479567207705217, 0.2552284336327081, 0.1407533626602392, 0.17522952208504705, 0.17616441755340673, 0.13102490272088185, 0.19509072918258896, 0.19233060905704957, 0.12305998096710102, 0.1154168492092027, 0.1814028199739015, 0.15542431566743575, 0.15368526694266493, 0.17581917086531518, 0.14588979779316746, 0.14645038009430844, 0.1995888325090286, 0.1274776518969487, 9.999999999998899e-05, 0.05911244614241662, 9.999999999998899e-05, 9.999999999998899e-05, 0.12531568715277286, 0.011506841732858764, 0.02137044560315149, 0.04141488446130992, 0.006406769936503243, 0.11232037028708441, 0.19087087334983965, 0.1337671958022404, 0.045812763871053486, 0.15799750476632635, 0.16636398477408243, 0.13672877604220957, 0.2912179937304078, 0.15461069171960973, 0.002427026533231902, 0.0610841361196206, 9.999999999998899e-05, 9.999999999998899e-05, 0.03993267303341652, 9.999999999998899e-05, 0.03647084301634862, 0.11913437980726316, 9.999999999998899e-05, 0.11817677867813303, 0.15836183818160732, 0.09056645046878853, 0.11953167679202292, 0.22721245328623874, 0.12359852013949635, 0.1424477507737527, 0.16005503671544918, 0.08549666652746657, 0.4723631121635641, 0.5251241134716927, 0.47415948729714363, 0.4784405581779425, 0.5216528336798981, 0.41339223091933586, 0.4982199359033298, 0.5033868716477421, 0.403153392210685, 0.10570619634108003, 0.10475761153924412, 0.08629794868473595, 0.11091143004389215, 0.10234654506463647, 0.07833760483246965, 0.10101829835282827, 0.1119007511115262, 0.08002995645660427, 0.13996517109516515, 0.17124798045262035, 0.14717022718547867, 0.13219679162067566, 0.14672460700489065, 0.18005353526727996, 0.1461055050636172, 0.1498777836156291, 0.13902504261466309, 0.27225458106307665, 0.35294540728619406, 0.24516783231292594, 0.3150650324658377, 0.40171957644401424, 0.23748649770286745, 0.34398896776526977, 0.39319612486827293, 0.2629064524440562, 0.23755275571081036, 0.2549576969625045, 0.16689111430949122, 0.22142038307625467, 0.2761433342100832, 0.1755371047373374, 0.2194922819335281, 0.31501599658419677, 0.17870228553453094, 0.18130709621994623, 0.20737741429991585, 0.17374055864711646, 0.2444875258003112, 0.19625593624056814, 0.1726079180117942, 0.1972815278980976, 0.21245043733817714, 0.17350476808152415, 0.207311719926067, 0.24400530185779412, 0.19758628392026545, 0.2169742165765507, 0.20571220946903845, 0.1901122260656044, 0.2153956115965241, 0.40989539552528376, 0.18196126930828127, 0.16724471263602458, 0.18531270161837288, 0.2501934798040252, 0.23319913521263136, 0.1843104225938168, 0.15706798900867858, 0.31558743542027934, 0.18273291186665885, 0.17046787934620622, 0.24487376411861494, 0.20954358603356416, 0.20336781618319033, 0.19828951093381497, 0.2023535584501135, 0.17104842049160984, 0.22657288326660863, 0.49677257283240006, 0.19205331030984674, 0.21593622962900916, 0.17802962846780268, 0.17599166306278713, 0.18991759463258095, 0.17981664460949198, 0.19332597687628772, 0.18062605761394956, 0.1871817393852565, 0.17898071534908833, 0.081101698123902, 0.08190550791438689, 0.06697182497956433, 0.09456141740615764, 0.07675598382543503, 0.07426091096956677, 0.09177038652652081, 0.08777104329836916, 0.06686778141745087]}, "mutation_prompt": null}
{"id": "a89c454e-c9b7-4247-8d8e-c14b7215097c", "solution": "import numpy as np\n\nclass NovelMetaheuristicOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * self.dim\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.F = 0.5  # Mutation factor\n        self.CR = 0.9  # Crossover rate\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Mutation\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = self.population[a] + self.F * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, *self.bounds)\n                \n                # Crossover\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < self.CR\n                trial[crossover_points] = mutant[crossover_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Dynamic adaptation of F and CR\n                self.F = np.clip(self.F + 0.01 * np.random.randn(), 0.1, 1.0)\n                self.CR = np.clip(self.CR + 0.01 * np.random.randn(), 0.1, 1.0)\n\n        # Return the best solution found\n        best_index = np.argmin(self.fitness)\n        return self.population[best_index]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1", "name": "NovelMetaheuristicOptimizer", "description": "The algorithm combines Differential Evolution with dynamic parameter adaptation to efficiently explore and exploit the search space for diverse optimization landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0c4e0616-8ea1-44a3-a60e-e7139190218e", "metadata": {"aucs": [0.8045396462339381, 0.8346850660290176, 0.5827260764517073, 0.8037661574323112, 0.8123215670771295, 0.6045116322632507, 0.8071300071693338, 0.8464921108109535, 0.5687791260472059, 0.6310206764086086, 0.7136672608671841, 0.31878203083111434, 0.6078947721604601, 0.6276674053681497, 0.3174459743551308, 0.6300674125194464, 0.6474302747718192, 0.3392271779197099, 0.33277032590731526, 0.4281699585448472, 0.16761398413713047, 0.4397981980066161, 0.38719178874896876, 0.1494698972267139, 0.31685456870327566, 0.3831805868571321, 0.14615528414074963, 0.1616783630520131, 0.15458148330409716, 0.12175343398292793, 0.16439733980432325, 0.15422871817448525, 0.12834838694235007, 0.27286362083033444, 0.3445816825848539, 0.12075752246940152, 0.9280318318249153, 0.8965114014142248, 0.9561869588048221, 0.9135314744755676, 0.870176404502878, 0.9578092092231827, 0.9358890308384381, 0.8437462616862942, 0.9496546291717702, 0.2411365574404586, 0.3622856042781455, 0.22545232154869677, 0.29528612606512594, 0.36063413925463406, 0.22653080349017019, 0.2081843762506277, 0.3066791233903877, 0.23908949140142766, 0.30921843293210893, 0.32118424167375514, 0.25085800358174415, 0.3304006132698438, 0.7943459795832916, 0.2819751883734595, 0.616554963519703, 0.758503845288762, 0.28088741200179357, 0.1479567207705217, 0.2552284336327081, 0.1407533626602392, 0.17522952208504705, 0.17616441755340673, 0.13102490272088185, 0.19509072918258896, 0.19233060905704957, 0.12305998096710102, 0.1154168492092027, 0.1814028199739015, 0.15542431566743575, 0.15368526694266493, 0.17581917086531518, 0.14588979779316746, 0.14645038009430844, 0.1995888325090286, 0.1274776518969487, 9.999999999998899e-05, 0.05911244614241662, 9.999999999998899e-05, 9.999999999998899e-05, 0.12531568715277286, 0.011506841732858764, 0.02137044560315149, 0.04141488446130992, 0.006406769936503243, 0.11232037028708441, 0.19087087334983965, 0.1337671958022404, 0.045812763871053486, 0.15799750476632635, 0.16636398477408243, 0.13672877604220957, 0.2912179937304078, 0.15461069171960973, 0.002427026533231902, 0.0610841361196206, 9.999999999998899e-05, 9.999999999998899e-05, 0.03993267303341652, 9.999999999998899e-05, 0.03647084301634862, 0.11913437980726316, 9.999999999998899e-05, 0.11817677867813303, 0.15836183818160732, 0.09056645046878853, 0.11953167679202292, 0.22721245328623874, 0.12359852013949635, 0.1424477507737527, 0.16005503671544918, 0.08549666652746657, 0.4723631121635641, 0.5251241134716927, 0.47415948729714363, 0.4784405581779425, 0.5216528336798981, 0.41339223091933586, 0.4982199359033298, 0.5033868716477421, 0.403153392210685, 0.10570619634108003, 0.10475761153924412, 0.08629794868473595, 0.11091143004389215, 0.10234654506463647, 0.07833760483246965, 0.10101829835282827, 0.1119007511115262, 0.08002995645660427, 0.13996517109516515, 0.17124798045262035, 0.14717022718547867, 0.13219679162067566, 0.14672460700489065, 0.18005353526727996, 0.1461055050636172, 0.1498777836156291, 0.13902504261466309, 0.27225458106307665, 0.35294540728619406, 0.24516783231292594, 0.3150650324658377, 0.40171957644401424, 0.23748649770286745, 0.34398896776526977, 0.39319612486827293, 0.2629064524440562, 0.23755275571081036, 0.2549576969625045, 0.16689111430949122, 0.22142038307625467, 0.2761433342100832, 0.1755371047373374, 0.2194922819335281, 0.31501599658419677, 0.17870228553453094, 0.18130709621994623, 0.20737741429991585, 0.17374055864711646, 0.2444875258003112, 0.19625593624056814, 0.1726079180117942, 0.1972815278980976, 0.21245043733817714, 0.17350476808152415, 0.207311719926067, 0.24400530185779412, 0.19758628392026545, 0.2169742165765507, 0.20571220946903845, 0.1901122260656044, 0.2153956115965241, 0.40989539552528376, 0.18196126930828127, 0.16724471263602458, 0.18531270161837288, 0.2501934798040252, 0.23319913521263136, 0.1843104225938168, 0.15706798900867858, 0.31558743542027934, 0.18273291186665885, 0.17046787934620622, 0.24487376411861494, 0.20954358603356416, 0.20336781618319033, 0.19828951093381497, 0.2023535584501135, 0.17104842049160984, 0.22657288326660863, 0.49677257283240006, 0.19205331030984674, 0.21593622962900916, 0.17802962846780268, 0.17599166306278713, 0.18991759463258095, 0.17981664460949198, 0.19332597687628772, 0.18062605761394956, 0.1871817393852565, 0.17898071534908833, 0.081101698123902, 0.08190550791438689, 0.06697182497956433, 0.09456141740615764, 0.07675598382543503, 0.07426091096956677, 0.09177038652652081, 0.08777104329836916, 0.06686778141745087]}, "mutation_prompt": null}
{"id": "c1f5c631-c57e-4061-b42c-fdf7097f073b", "solution": "import numpy as np\n\nclass NovelMetaheuristicOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * self.dim\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.F = 0.5  # Mutation factor\n        self.CR = 0.9  # Crossover rate\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Mutation\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = self.population[a] + self.F * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, *self.bounds)\n                \n                # Crossover\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < self.CR\n                trial[crossover_points] = mutant[crossover_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Dynamic adaptation of F and CR\n                self.F = np.clip(self.F + 0.01 * np.random.randn(), 0.1, 1.0)\n                self.CR = np.clip(self.CR + 0.01 * np.random.randn(), 0.1, 1.0)\n\n        # Return the best solution found\n        best_index = np.argmin(self.fitness)\n        return self.population[best_index]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1", "name": "NovelMetaheuristicOptimizer", "description": "The algorithm combines Differential Evolution with dynamic parameter adaptation to efficiently explore and exploit the search space for diverse optimization landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0c4e0616-8ea1-44a3-a60e-e7139190218e", "metadata": {"aucs": [0.8045396462339381, 0.8346850660290176, 0.5827260764517073, 0.8037661574323112, 0.8123215670771295, 0.6045116322632507, 0.8071300071693338, 0.8464921108109535, 0.5687791260472059, 0.6310206764086086, 0.7136672608671841, 0.31878203083111434, 0.6078947721604601, 0.6276674053681497, 0.3174459743551308, 0.6300674125194464, 0.6474302747718192, 0.3392271779197099, 0.33277032590731526, 0.4281699585448472, 0.16761398413713047, 0.4397981980066161, 0.38719178874896876, 0.1494698972267139, 0.31685456870327566, 0.3831805868571321, 0.14615528414074963, 0.1616783630520131, 0.15458148330409716, 0.12175343398292793, 0.16439733980432325, 0.15422871817448525, 0.12834838694235007, 0.27286362083033444, 0.3445816825848539, 0.12075752246940152, 0.9280318318249153, 0.8965114014142248, 0.9561869588048221, 0.9135314744755676, 0.870176404502878, 0.9578092092231827, 0.9358890308384381, 0.8437462616862942, 0.9496546291717702, 0.2411365574404586, 0.3622856042781455, 0.22545232154869677, 0.29528612606512594, 0.36063413925463406, 0.22653080349017019, 0.2081843762506277, 0.3066791233903877, 0.23908949140142766, 0.30921843293210893, 0.32118424167375514, 0.25085800358174415, 0.3304006132698438, 0.7943459795832916, 0.2819751883734595, 0.616554963519703, 0.758503845288762, 0.28088741200179357, 0.1479567207705217, 0.2552284336327081, 0.1407533626602392, 0.17522952208504705, 0.17616441755340673, 0.13102490272088185, 0.19509072918258896, 0.19233060905704957, 0.12305998096710102, 0.1154168492092027, 0.1814028199739015, 0.15542431566743575, 0.15368526694266493, 0.17581917086531518, 0.14588979779316746, 0.14645038009430844, 0.1995888325090286, 0.1274776518969487, 9.999999999998899e-05, 0.05911244614241662, 9.999999999998899e-05, 9.999999999998899e-05, 0.12531568715277286, 0.011506841732858764, 0.02137044560315149, 0.04141488446130992, 0.006406769936503243, 0.11232037028708441, 0.19087087334983965, 0.1337671958022404, 0.045812763871053486, 0.15799750476632635, 0.16636398477408243, 0.13672877604220957, 0.2912179937304078, 0.15461069171960973, 0.002427026533231902, 0.0610841361196206, 9.999999999998899e-05, 9.999999999998899e-05, 0.03993267303341652, 9.999999999998899e-05, 0.03647084301634862, 0.11913437980726316, 9.999999999998899e-05, 0.11817677867813303, 0.15836183818160732, 0.09056645046878853, 0.11953167679202292, 0.22721245328623874, 0.12359852013949635, 0.1424477507737527, 0.16005503671544918, 0.08549666652746657, 0.4723631121635641, 0.5251241134716927, 0.47415948729714363, 0.4784405581779425, 0.5216528336798981, 0.41339223091933586, 0.4982199359033298, 0.5033868716477421, 0.403153392210685, 0.10570619634108003, 0.10475761153924412, 0.08629794868473595, 0.11091143004389215, 0.10234654506463647, 0.07833760483246965, 0.10101829835282827, 0.1119007511115262, 0.08002995645660427, 0.13996517109516515, 0.17124798045262035, 0.14717022718547867, 0.13219679162067566, 0.14672460700489065, 0.18005353526727996, 0.1461055050636172, 0.1498777836156291, 0.13902504261466309, 0.27225458106307665, 0.35294540728619406, 0.24516783231292594, 0.3150650324658377, 0.40171957644401424, 0.23748649770286745, 0.34398896776526977, 0.39319612486827293, 0.2629064524440562, 0.23755275571081036, 0.2549576969625045, 0.16689111430949122, 0.22142038307625467, 0.2761433342100832, 0.1755371047373374, 0.2194922819335281, 0.31501599658419677, 0.17870228553453094, 0.18130709621994623, 0.20737741429991585, 0.17374055864711646, 0.2444875258003112, 0.19625593624056814, 0.1726079180117942, 0.1972815278980976, 0.21245043733817714, 0.17350476808152415, 0.207311719926067, 0.24400530185779412, 0.19758628392026545, 0.2169742165765507, 0.20571220946903845, 0.1901122260656044, 0.2153956115965241, 0.40989539552528376, 0.18196126930828127, 0.16724471263602458, 0.18531270161837288, 0.2501934798040252, 0.23319913521263136, 0.1843104225938168, 0.15706798900867858, 0.31558743542027934, 0.18273291186665885, 0.17046787934620622, 0.24487376411861494, 0.20954358603356416, 0.20336781618319033, 0.19828951093381497, 0.2023535584501135, 0.17104842049160984, 0.22657288326660863, 0.49677257283240006, 0.19205331030984674, 0.21593622962900916, 0.17802962846780268, 0.17599166306278713, 0.18991759463258095, 0.17981664460949198, 0.19332597687628772, 0.18062605761394956, 0.1871817393852565, 0.17898071534908833, 0.081101698123902, 0.08190550791438689, 0.06697182497956433, 0.09456141740615764, 0.07675598382543503, 0.07426091096956677, 0.09177038652652081, 0.08777104329836916, 0.06686778141745087]}, "mutation_prompt": null}
{"id": "23ea47bd-b270-4f10-8112-e403961b5600", "solution": "import numpy as np\n\nclass NovelMetaheuristicOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * self.dim\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.F = 0.5  # Mutation factor\n        self.CR = 0.9  # Crossover rate\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Mutation\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = self.population[a] + self.F * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, *self.bounds)\n                \n                # Crossover\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < self.CR\n                trial[crossover_points] = mutant[crossover_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Dynamic adaptation of F and CR\n                self.F = np.clip(self.F + 0.01 * np.random.randn(), 0.1, 1.0)\n                self.CR = np.clip(self.CR + 0.01 * np.random.randn(), 0.1, 1.0)\n\n        # Return the best solution found\n        best_index = np.argmin(self.fitness)\n        return self.population[best_index]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1", "name": "NovelMetaheuristicOptimizer", "description": "The algorithm combines Differential Evolution with dynamic parameter adaptation to efficiently explore and exploit the search space for diverse optimization landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0c4e0616-8ea1-44a3-a60e-e7139190218e", "metadata": {"aucs": [0.8045396462339381, 0.8346850660290176, 0.5827260764517073, 0.8037661574323112, 0.8123215670771295, 0.6045116322632507, 0.8071300071693338, 0.8464921108109535, 0.5687791260472059, 0.6310206764086086, 0.7136672608671841, 0.31878203083111434, 0.6078947721604601, 0.6276674053681497, 0.3174459743551308, 0.6300674125194464, 0.6474302747718192, 0.3392271779197099, 0.33277032590731526, 0.4281699585448472, 0.16761398413713047, 0.4397981980066161, 0.38719178874896876, 0.1494698972267139, 0.31685456870327566, 0.3831805868571321, 0.14615528414074963, 0.1616783630520131, 0.15458148330409716, 0.12175343398292793, 0.16439733980432325, 0.15422871817448525, 0.12834838694235007, 0.27286362083033444, 0.3445816825848539, 0.12075752246940152, 0.9280318318249153, 0.8965114014142248, 0.9561869588048221, 0.9135314744755676, 0.870176404502878, 0.9578092092231827, 0.9358890308384381, 0.8437462616862942, 0.9496546291717702, 0.2411365574404586, 0.3622856042781455, 0.22545232154869677, 0.29528612606512594, 0.36063413925463406, 0.22653080349017019, 0.2081843762506277, 0.3066791233903877, 0.23908949140142766, 0.30921843293210893, 0.32118424167375514, 0.25085800358174415, 0.3304006132698438, 0.7943459795832916, 0.2819751883734595, 0.616554963519703, 0.758503845288762, 0.28088741200179357, 0.1479567207705217, 0.2552284336327081, 0.1407533626602392, 0.17522952208504705, 0.17616441755340673, 0.13102490272088185, 0.19509072918258896, 0.19233060905704957, 0.12305998096710102, 0.1154168492092027, 0.1814028199739015, 0.15542431566743575, 0.15368526694266493, 0.17581917086531518, 0.14588979779316746, 0.14645038009430844, 0.1995888325090286, 0.1274776518969487, 9.999999999998899e-05, 0.05911244614241662, 9.999999999998899e-05, 9.999999999998899e-05, 0.12531568715277286, 0.011506841732858764, 0.02137044560315149, 0.04141488446130992, 0.006406769936503243, 0.11232037028708441, 0.19087087334983965, 0.1337671958022404, 0.045812763871053486, 0.15799750476632635, 0.16636398477408243, 0.13672877604220957, 0.2912179937304078, 0.15461069171960973, 0.002427026533231902, 0.0610841361196206, 9.999999999998899e-05, 9.999999999998899e-05, 0.03993267303341652, 9.999999999998899e-05, 0.03647084301634862, 0.11913437980726316, 9.999999999998899e-05, 0.11817677867813303, 0.15836183818160732, 0.09056645046878853, 0.11953167679202292, 0.22721245328623874, 0.12359852013949635, 0.1424477507737527, 0.16005503671544918, 0.08549666652746657, 0.4723631121635641, 0.5251241134716927, 0.47415948729714363, 0.4784405581779425, 0.5216528336798981, 0.41339223091933586, 0.4982199359033298, 0.5033868716477421, 0.403153392210685, 0.10570619634108003, 0.10475761153924412, 0.08629794868473595, 0.11091143004389215, 0.10234654506463647, 0.07833760483246965, 0.10101829835282827, 0.1119007511115262, 0.08002995645660427, 0.13996517109516515, 0.17124798045262035, 0.14717022718547867, 0.13219679162067566, 0.14672460700489065, 0.18005353526727996, 0.1461055050636172, 0.1498777836156291, 0.13902504261466309, 0.27225458106307665, 0.35294540728619406, 0.24516783231292594, 0.3150650324658377, 0.40171957644401424, 0.23748649770286745, 0.34398896776526977, 0.39319612486827293, 0.2629064524440562, 0.23755275571081036, 0.2549576969625045, 0.16689111430949122, 0.22142038307625467, 0.2761433342100832, 0.1755371047373374, 0.2194922819335281, 0.31501599658419677, 0.17870228553453094, 0.18130709621994623, 0.20737741429991585, 0.17374055864711646, 0.2444875258003112, 0.19625593624056814, 0.1726079180117942, 0.1972815278980976, 0.21245043733817714, 0.17350476808152415, 0.207311719926067, 0.24400530185779412, 0.19758628392026545, 0.2169742165765507, 0.20571220946903845, 0.1901122260656044, 0.2153956115965241, 0.40989539552528376, 0.18196126930828127, 0.16724471263602458, 0.18531270161837288, 0.2501934798040252, 0.23319913521263136, 0.1843104225938168, 0.15706798900867858, 0.31558743542027934, 0.18273291186665885, 0.17046787934620622, 0.24487376411861494, 0.20954358603356416, 0.20336781618319033, 0.19828951093381497, 0.2023535584501135, 0.17104842049160984, 0.22657288326660863, 0.49677257283240006, 0.19205331030984674, 0.21593622962900916, 0.17802962846780268, 0.17599166306278713, 0.18991759463258095, 0.17981664460949198, 0.19332597687628772, 0.18062605761394956, 0.1871817393852565, 0.17898071534908833, 0.081101698123902, 0.08190550791438689, 0.06697182497956433, 0.09456141740615764, 0.07675598382543503, 0.07426091096956677, 0.09177038652652081, 0.08777104329836916, 0.06686778141745087]}, "mutation_prompt": null}
{"id": "9ea246f3-d70d-4cad-aa11-ef302c6ced93", "solution": "import numpy as np\n\nclass NovelMetaheuristicOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * self.dim\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.F = 0.5  # Mutation factor\n        self.CR = 0.9  # Crossover rate\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Mutation\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = self.population[a] + self.F * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, *self.bounds)\n                \n                # Crossover\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < self.CR\n                trial[crossover_points] = mutant[crossover_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Dynamic adaptation of F and CR\n                self.F = np.clip(self.F + 0.01 * np.random.randn(), 0.1, 1.0)\n                self.CR = np.clip(self.CR + 0.01 * np.random.randn(), 0.1, 1.0)\n\n        # Return the best solution found\n        best_index = np.argmin(self.fitness)\n        return self.population[best_index]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1", "name": "NovelMetaheuristicOptimizer", "description": "The algorithm combines Differential Evolution with dynamic parameter adaptation to efficiently explore and exploit the search space for diverse optimization landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0c4e0616-8ea1-44a3-a60e-e7139190218e", "metadata": {"aucs": [0.8045396462339381, 0.8346850660290176, 0.5827260764517073, 0.8037661574323112, 0.8123215670771295, 0.6045116322632507, 0.8071300071693338, 0.8464921108109535, 0.5687791260472059, 0.6310206764086086, 0.7136672608671841, 0.31878203083111434, 0.6078947721604601, 0.6276674053681497, 0.3174459743551308, 0.6300674125194464, 0.6474302747718192, 0.3392271779197099, 0.33277032590731526, 0.4281699585448472, 0.16761398413713047, 0.4397981980066161, 0.38719178874896876, 0.1494698972267139, 0.31685456870327566, 0.3831805868571321, 0.14615528414074963, 0.1616783630520131, 0.15458148330409716, 0.12175343398292793, 0.16439733980432325, 0.15422871817448525, 0.12834838694235007, 0.27286362083033444, 0.3445816825848539, 0.12075752246940152, 0.9280318318249153, 0.8965114014142248, 0.9561869588048221, 0.9135314744755676, 0.870176404502878, 0.9578092092231827, 0.9358890308384381, 0.8437462616862942, 0.9496546291717702, 0.2411365574404586, 0.3622856042781455, 0.22545232154869677, 0.29528612606512594, 0.36063413925463406, 0.22653080349017019, 0.2081843762506277, 0.3066791233903877, 0.23908949140142766, 0.30921843293210893, 0.32118424167375514, 0.25085800358174415, 0.3304006132698438, 0.7943459795832916, 0.2819751883734595, 0.616554963519703, 0.758503845288762, 0.28088741200179357, 0.1479567207705217, 0.2552284336327081, 0.1407533626602392, 0.17522952208504705, 0.17616441755340673, 0.13102490272088185, 0.19509072918258896, 0.19233060905704957, 0.12305998096710102, 0.1154168492092027, 0.1814028199739015, 0.15542431566743575, 0.15368526694266493, 0.17581917086531518, 0.14588979779316746, 0.14645038009430844, 0.1995888325090286, 0.1274776518969487, 9.999999999998899e-05, 0.05911244614241662, 9.999999999998899e-05, 9.999999999998899e-05, 0.12531568715277286, 0.011506841732858764, 0.02137044560315149, 0.04141488446130992, 0.006406769936503243, 0.11232037028708441, 0.19087087334983965, 0.1337671958022404, 0.045812763871053486, 0.15799750476632635, 0.16636398477408243, 0.13672877604220957, 0.2912179937304078, 0.15461069171960973, 0.002427026533231902, 0.0610841361196206, 9.999999999998899e-05, 9.999999999998899e-05, 0.03993267303341652, 9.999999999998899e-05, 0.03647084301634862, 0.11913437980726316, 9.999999999998899e-05, 0.11817677867813303, 0.15836183818160732, 0.09056645046878853, 0.11953167679202292, 0.22721245328623874, 0.12359852013949635, 0.1424477507737527, 0.16005503671544918, 0.08549666652746657, 0.4723631121635641, 0.5251241134716927, 0.47415948729714363, 0.4784405581779425, 0.5216528336798981, 0.41339223091933586, 0.4982199359033298, 0.5033868716477421, 0.403153392210685, 0.10570619634108003, 0.10475761153924412, 0.08629794868473595, 0.11091143004389215, 0.10234654506463647, 0.07833760483246965, 0.10101829835282827, 0.1119007511115262, 0.08002995645660427, 0.13996517109516515, 0.17124798045262035, 0.14717022718547867, 0.13219679162067566, 0.14672460700489065, 0.18005353526727996, 0.1461055050636172, 0.1498777836156291, 0.13902504261466309, 0.27225458106307665, 0.35294540728619406, 0.24516783231292594, 0.3150650324658377, 0.40171957644401424, 0.23748649770286745, 0.34398896776526977, 0.39319612486827293, 0.2629064524440562, 0.23755275571081036, 0.2549576969625045, 0.16689111430949122, 0.22142038307625467, 0.2761433342100832, 0.1755371047373374, 0.2194922819335281, 0.31501599658419677, 0.17870228553453094, 0.18130709621994623, 0.20737741429991585, 0.17374055864711646, 0.2444875258003112, 0.19625593624056814, 0.1726079180117942, 0.1972815278980976, 0.21245043733817714, 0.17350476808152415, 0.207311719926067, 0.24400530185779412, 0.19758628392026545, 0.2169742165765507, 0.20571220946903845, 0.1901122260656044, 0.2153956115965241, 0.40989539552528376, 0.18196126930828127, 0.16724471263602458, 0.18531270161837288, 0.2501934798040252, 0.23319913521263136, 0.1843104225938168, 0.15706798900867858, 0.31558743542027934, 0.18273291186665885, 0.17046787934620622, 0.24487376411861494, 0.20954358603356416, 0.20336781618319033, 0.19828951093381497, 0.2023535584501135, 0.17104842049160984, 0.22657288326660863, 0.49677257283240006, 0.19205331030984674, 0.21593622962900916, 0.17802962846780268, 0.17599166306278713, 0.18991759463258095, 0.17981664460949198, 0.19332597687628772, 0.18062605761394956, 0.1871817393852565, 0.17898071534908833, 0.081101698123902, 0.08190550791438689, 0.06697182497956433, 0.09456141740615764, 0.07675598382543503, 0.07426091096956677, 0.09177038652652081, 0.08777104329836916, 0.06686778141745087]}, "mutation_prompt": null}
{"id": "9e4afe54-c87e-44b1-b5c8-610ad0744bcb", "solution": "import numpy as np\n\nclass NovelMetaheuristicOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * self.dim\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.F = 0.5  # Mutation factor\n        self.CR = 0.9  # Crossover rate\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Mutation\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = self.population[a] + self.F * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, *self.bounds)\n                \n                # Crossover\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < self.CR\n                trial[crossover_points] = mutant[crossover_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Dynamic adaptation of F and CR\n                self.F = np.clip(self.F + 0.01 * np.random.randn(), 0.1, 1.0)\n                self.CR = np.clip(self.CR + 0.01 * np.random.randn(), 0.1, 1.0)\n\n        # Return the best solution found\n        best_index = np.argmin(self.fitness)\n        return self.population[best_index]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1", "name": "NovelMetaheuristicOptimizer", "description": "The algorithm combines Differential Evolution with dynamic parameter adaptation to efficiently explore and exploit the search space for diverse optimization landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0c4e0616-8ea1-44a3-a60e-e7139190218e", "metadata": {"aucs": [0.8045396462339381, 0.8346850660290176, 0.5827260764517073, 0.8037661574323112, 0.8123215670771295, 0.6045116322632507, 0.8071300071693338, 0.8464921108109535, 0.5687791260472059, 0.6310206764086086, 0.7136672608671841, 0.31878203083111434, 0.6078947721604601, 0.6276674053681497, 0.3174459743551308, 0.6300674125194464, 0.6474302747718192, 0.3392271779197099, 0.33277032590731526, 0.4281699585448472, 0.16761398413713047, 0.4397981980066161, 0.38719178874896876, 0.1494698972267139, 0.31685456870327566, 0.3831805868571321, 0.14615528414074963, 0.1616783630520131, 0.15458148330409716, 0.12175343398292793, 0.16439733980432325, 0.15422871817448525, 0.12834838694235007, 0.27286362083033444, 0.3445816825848539, 0.12075752246940152, 0.9280318318249153, 0.8965114014142248, 0.9561869588048221, 0.9135314744755676, 0.870176404502878, 0.9578092092231827, 0.9358890308384381, 0.8437462616862942, 0.9496546291717702, 0.2411365574404586, 0.3622856042781455, 0.22545232154869677, 0.29528612606512594, 0.36063413925463406, 0.22653080349017019, 0.2081843762506277, 0.3066791233903877, 0.23908949140142766, 0.30921843293210893, 0.32118424167375514, 0.25085800358174415, 0.3304006132698438, 0.7943459795832916, 0.2819751883734595, 0.616554963519703, 0.758503845288762, 0.28088741200179357, 0.1479567207705217, 0.2552284336327081, 0.1407533626602392, 0.17522952208504705, 0.17616441755340673, 0.13102490272088185, 0.19509072918258896, 0.19233060905704957, 0.12305998096710102, 0.1154168492092027, 0.1814028199739015, 0.15542431566743575, 0.15368526694266493, 0.17581917086531518, 0.14588979779316746, 0.14645038009430844, 0.1995888325090286, 0.1274776518969487, 9.999999999998899e-05, 0.05911244614241662, 9.999999999998899e-05, 9.999999999998899e-05, 0.12531568715277286, 0.011506841732858764, 0.02137044560315149, 0.04141488446130992, 0.006406769936503243, 0.11232037028708441, 0.19087087334983965, 0.1337671958022404, 0.045812763871053486, 0.15799750476632635, 0.16636398477408243, 0.13672877604220957, 0.2912179937304078, 0.15461069171960973, 0.002427026533231902, 0.0610841361196206, 9.999999999998899e-05, 9.999999999998899e-05, 0.03993267303341652, 9.999999999998899e-05, 0.03647084301634862, 0.11913437980726316, 9.999999999998899e-05, 0.11817677867813303, 0.15836183818160732, 0.09056645046878853, 0.11953167679202292, 0.22721245328623874, 0.12359852013949635, 0.1424477507737527, 0.16005503671544918, 0.08549666652746657, 0.4723631121635641, 0.5251241134716927, 0.47415948729714363, 0.4784405581779425, 0.5216528336798981, 0.41339223091933586, 0.4982199359033298, 0.5033868716477421, 0.403153392210685, 0.10570619634108003, 0.10475761153924412, 0.08629794868473595, 0.11091143004389215, 0.10234654506463647, 0.07833760483246965, 0.10101829835282827, 0.1119007511115262, 0.08002995645660427, 0.13996517109516515, 0.17124798045262035, 0.14717022718547867, 0.13219679162067566, 0.14672460700489065, 0.18005353526727996, 0.1461055050636172, 0.1498777836156291, 0.13902504261466309, 0.27225458106307665, 0.35294540728619406, 0.24516783231292594, 0.3150650324658377, 0.40171957644401424, 0.23748649770286745, 0.34398896776526977, 0.39319612486827293, 0.2629064524440562, 0.23755275571081036, 0.2549576969625045, 0.16689111430949122, 0.22142038307625467, 0.2761433342100832, 0.1755371047373374, 0.2194922819335281, 0.31501599658419677, 0.17870228553453094, 0.18130709621994623, 0.20737741429991585, 0.17374055864711646, 0.2444875258003112, 0.19625593624056814, 0.1726079180117942, 0.1972815278980976, 0.21245043733817714, 0.17350476808152415, 0.207311719926067, 0.24400530185779412, 0.19758628392026545, 0.2169742165765507, 0.20571220946903845, 0.1901122260656044, 0.2153956115965241, 0.40989539552528376, 0.18196126930828127, 0.16724471263602458, 0.18531270161837288, 0.2501934798040252, 0.23319913521263136, 0.1843104225938168, 0.15706798900867858, 0.31558743542027934, 0.18273291186665885, 0.17046787934620622, 0.24487376411861494, 0.20954358603356416, 0.20336781618319033, 0.19828951093381497, 0.2023535584501135, 0.17104842049160984, 0.22657288326660863, 0.49677257283240006, 0.19205331030984674, 0.21593622962900916, 0.17802962846780268, 0.17599166306278713, 0.18991759463258095, 0.17981664460949198, 0.19332597687628772, 0.18062605761394956, 0.1871817393852565, 0.17898071534908833, 0.081101698123902, 0.08190550791438689, 0.06697182497956433, 0.09456141740615764, 0.07675598382543503, 0.07426091096956677, 0.09177038652652081, 0.08777104329836916, 0.06686778141745087]}, "mutation_prompt": null}
{"id": "e50e443e-0989-4309-8142-623b7f59398a", "solution": "import numpy as np\n\nclass NovelMetaheuristicOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * self.dim\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.F = 0.5  # Mutation factor\n        self.CR = 0.9  # Crossover rate\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Mutation\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = self.population[a] + self.F * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, *self.bounds)\n                \n                # Crossover\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < self.CR\n                trial[crossover_points] = mutant[crossover_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Dynamic adaptation of F and CR\n                self.F = np.clip(self.F + 0.01 * np.random.randn(), 0.1, 1.0)\n                self.CR = np.clip(self.CR + 0.01 * np.random.randn(), 0.1, 1.0)\n\n        # Return the best solution found\n        best_index = np.argmin(self.fitness)\n        return self.population[best_index]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1", "name": "NovelMetaheuristicOptimizer", "description": "The algorithm combines Differential Evolution with dynamic parameter adaptation to efficiently explore and exploit the search space for diverse optimization landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0c4e0616-8ea1-44a3-a60e-e7139190218e", "metadata": {"aucs": [0.8045396462339381, 0.8346850660290176, 0.5827260764517073, 0.8037661574323112, 0.8123215670771295, 0.6045116322632507, 0.8071300071693338, 0.8464921108109535, 0.5687791260472059, 0.6310206764086086, 0.7136672608671841, 0.31878203083111434, 0.6078947721604601, 0.6276674053681497, 0.3174459743551308, 0.6300674125194464, 0.6474302747718192, 0.3392271779197099, 0.33277032590731526, 0.4281699585448472, 0.16761398413713047, 0.4397981980066161, 0.38719178874896876, 0.1494698972267139, 0.31685456870327566, 0.3831805868571321, 0.14615528414074963, 0.1616783630520131, 0.15458148330409716, 0.12175343398292793, 0.16439733980432325, 0.15422871817448525, 0.12834838694235007, 0.27286362083033444, 0.3445816825848539, 0.12075752246940152, 0.9280318318249153, 0.8965114014142248, 0.9561869588048221, 0.9135314744755676, 0.870176404502878, 0.9578092092231827, 0.9358890308384381, 0.8437462616862942, 0.9496546291717702, 0.2411365574404586, 0.3622856042781455, 0.22545232154869677, 0.29528612606512594, 0.36063413925463406, 0.22653080349017019, 0.2081843762506277, 0.3066791233903877, 0.23908949140142766, 0.30921843293210893, 0.32118424167375514, 0.25085800358174415, 0.3304006132698438, 0.7943459795832916, 0.2819751883734595, 0.616554963519703, 0.758503845288762, 0.28088741200179357, 0.1479567207705217, 0.2552284336327081, 0.1407533626602392, 0.17522952208504705, 0.17616441755340673, 0.13102490272088185, 0.19509072918258896, 0.19233060905704957, 0.12305998096710102, 0.1154168492092027, 0.1814028199739015, 0.15542431566743575, 0.15368526694266493, 0.17581917086531518, 0.14588979779316746, 0.14645038009430844, 0.1995888325090286, 0.1274776518969487, 9.999999999998899e-05, 0.05911244614241662, 9.999999999998899e-05, 9.999999999998899e-05, 0.12531568715277286, 0.011506841732858764, 0.02137044560315149, 0.04141488446130992, 0.006406769936503243, 0.11232037028708441, 0.19087087334983965, 0.1337671958022404, 0.045812763871053486, 0.15799750476632635, 0.16636398477408243, 0.13672877604220957, 0.2912179937304078, 0.15461069171960973, 0.002427026533231902, 0.0610841361196206, 9.999999999998899e-05, 9.999999999998899e-05, 0.03993267303341652, 9.999999999998899e-05, 0.03647084301634862, 0.11913437980726316, 9.999999999998899e-05, 0.11817677867813303, 0.15836183818160732, 0.09056645046878853, 0.11953167679202292, 0.22721245328623874, 0.12359852013949635, 0.1424477507737527, 0.16005503671544918, 0.08549666652746657, 0.4723631121635641, 0.5251241134716927, 0.47415948729714363, 0.4784405581779425, 0.5216528336798981, 0.41339223091933586, 0.4982199359033298, 0.5033868716477421, 0.403153392210685, 0.10570619634108003, 0.10475761153924412, 0.08629794868473595, 0.11091143004389215, 0.10234654506463647, 0.07833760483246965, 0.10101829835282827, 0.1119007511115262, 0.08002995645660427, 0.13996517109516515, 0.17124798045262035, 0.14717022718547867, 0.13219679162067566, 0.14672460700489065, 0.18005353526727996, 0.1461055050636172, 0.1498777836156291, 0.13902504261466309, 0.27225458106307665, 0.35294540728619406, 0.24516783231292594, 0.3150650324658377, 0.40171957644401424, 0.23748649770286745, 0.34398896776526977, 0.39319612486827293, 0.2629064524440562, 0.23755275571081036, 0.2549576969625045, 0.16689111430949122, 0.22142038307625467, 0.2761433342100832, 0.1755371047373374, 0.2194922819335281, 0.31501599658419677, 0.17870228553453094, 0.18130709621994623, 0.20737741429991585, 0.17374055864711646, 0.2444875258003112, 0.19625593624056814, 0.1726079180117942, 0.1972815278980976, 0.21245043733817714, 0.17350476808152415, 0.207311719926067, 0.24400530185779412, 0.19758628392026545, 0.2169742165765507, 0.20571220946903845, 0.1901122260656044, 0.2153956115965241, 0.40989539552528376, 0.18196126930828127, 0.16724471263602458, 0.18531270161837288, 0.2501934798040252, 0.23319913521263136, 0.1843104225938168, 0.15706798900867858, 0.31558743542027934, 0.18273291186665885, 0.17046787934620622, 0.24487376411861494, 0.20954358603356416, 0.20336781618319033, 0.19828951093381497, 0.2023535584501135, 0.17104842049160984, 0.22657288326660863, 0.49677257283240006, 0.19205331030984674, 0.21593622962900916, 0.17802962846780268, 0.17599166306278713, 0.18991759463258095, 0.17981664460949198, 0.19332597687628772, 0.18062605761394956, 0.1871817393852565, 0.17898071534908833, 0.081101698123902, 0.08190550791438689, 0.06697182497956433, 0.09456141740615764, 0.07675598382543503, 0.07426091096956677, 0.09177038652652081, 0.08777104329836916, 0.06686778141745087]}, "mutation_prompt": null}
{"id": "6934d495-49bd-48cd-a7fe-c8bd9e6f0d16", "solution": "import numpy as np\n\nclass EfficientMetaheuristicOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = min(10 * self.dim, budget // 10)\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.F = 0.5\n        self.CR = 0.9\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                mutant = np.clip(self.population[a] + self.F * (self.population[b] - self.population[c]), *self.bounds)\n                crossover_points = np.random.rand(self.dim) < self.CR\n                trial = np.where(crossover_points, mutant, self.population[i])\n                trial_fitness = func(trial)\n                self.evaluations += 1\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n            if self.evaluations % (self.budget // 10) == 0:\n                self.reduce_population()\n        best_index = np.argmin(self.fitness)\n        return self.population[best_index]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n        \n    def reduce_population(self):\n        sorted_indices = np.argsort(self.fitness)\n        self.population = self.population[sorted_indices[:self.population_size//2]]\n        self.fitness = self.fitness[sorted_indices[:self.population_size//2]]\n        self.population_size = len(self.population)\n        new_population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        self.population = np.vstack((self.population, new_population))\n        self.fitness = np.append(self.fitness, np.full(self.population_size, np.inf))", "name": "EfficientMetaheuristicOptimizer", "description": "The algorithm employs adaptive differential evolution with a strategic population reduction mechanism for improved efficiency and convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "An exception occurred: ValueError(\"Cannot take a larger sample than population when 'replace=False'\").", "error": "ValueError(\"Cannot take a larger sample than population when 'replace=False'\")", "parent_id": "0c4e0616-8ea1-44a3-a60e-e7139190218e", "metadata": {}, "mutation_prompt": null}
{"id": "7b8ae3a1-9eca-40cf-b1a1-feaf53b50340", "solution": "import numpy as np\n\nclass NovelMetaheuristicOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * self.dim\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.F = 0.5  # Mutation factor\n        self.CR = 0.9  # Crossover rate\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Mutation\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = self.population[a] + self.F * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, *self.bounds)\n                \n                # Crossover\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < self.CR\n                trial[crossover_points] = mutant[crossover_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Dynamic adaptation of F and CR\n                self.F = np.clip(self.F + 0.01 * np.random.randn(), 0.1, 1.0)\n                self.CR = np.clip(self.CR + 0.01 * np.random.randn(), 0.1, 1.0)\n\n        # Return the best solution found\n        best_index = np.argmin(self.fitness)\n        return self.population[best_index]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1", "name": "NovelMetaheuristicOptimizer", "description": "The algorithm combines Differential Evolution with dynamic parameter adaptation to efficiently explore and exploit the search space for diverse optimization landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0c4e0616-8ea1-44a3-a60e-e7139190218e", "metadata": {"aucs": [0.8045396462339381, 0.8346850660290176, 0.5827260764517073, 0.8037661574323112, 0.8123215670771295, 0.6045116322632507, 0.8071300071693338, 0.8464921108109535, 0.5687791260472059, 0.6310206764086086, 0.7136672608671841, 0.31878203083111434, 0.6078947721604601, 0.6276674053681497, 0.3174459743551308, 0.6300674125194464, 0.6474302747718192, 0.3392271779197099, 0.33277032590731526, 0.4281699585448472, 0.16761398413713047, 0.4397981980066161, 0.38719178874896876, 0.1494698972267139, 0.31685456870327566, 0.3831805868571321, 0.14615528414074963, 0.1616783630520131, 0.15458148330409716, 0.12175343398292793, 0.16439733980432325, 0.15422871817448525, 0.12834838694235007, 0.27286362083033444, 0.3445816825848539, 0.12075752246940152, 0.9280318318249153, 0.8965114014142248, 0.9561869588048221, 0.9135314744755676, 0.870176404502878, 0.9578092092231827, 0.9358890308384381, 0.8437462616862942, 0.9496546291717702, 0.2411365574404586, 0.3622856042781455, 0.22545232154869677, 0.29528612606512594, 0.36063413925463406, 0.22653080349017019, 0.2081843762506277, 0.3066791233903877, 0.23908949140142766, 0.30921843293210893, 0.32118424167375514, 0.25085800358174415, 0.3304006132698438, 0.7943459795832916, 0.2819751883734595, 0.616554963519703, 0.758503845288762, 0.28088741200179357, 0.1479567207705217, 0.2552284336327081, 0.1407533626602392, 0.17522952208504705, 0.17616441755340673, 0.13102490272088185, 0.19509072918258896, 0.19233060905704957, 0.12305998096710102, 0.1154168492092027, 0.1814028199739015, 0.15542431566743575, 0.15368526694266493, 0.17581917086531518, 0.14588979779316746, 0.14645038009430844, 0.1995888325090286, 0.1274776518969487, 9.999999999998899e-05, 0.05911244614241662, 9.999999999998899e-05, 9.999999999998899e-05, 0.12531568715277286, 0.011506841732858764, 0.02137044560315149, 0.04141488446130992, 0.006406769936503243, 0.11232037028708441, 0.19087087334983965, 0.1337671958022404, 0.045812763871053486, 0.15799750476632635, 0.16636398477408243, 0.13672877604220957, 0.2912179937304078, 0.15461069171960973, 0.002427026533231902, 0.0610841361196206, 9.999999999998899e-05, 9.999999999998899e-05, 0.03993267303341652, 9.999999999998899e-05, 0.03647084301634862, 0.11913437980726316, 9.999999999998899e-05, 0.11817677867813303, 0.15836183818160732, 0.09056645046878853, 0.11953167679202292, 0.22721245328623874, 0.12359852013949635, 0.1424477507737527, 0.16005503671544918, 0.08549666652746657, 0.4723631121635641, 0.5251241134716927, 0.47415948729714363, 0.4784405581779425, 0.5216528336798981, 0.41339223091933586, 0.4982199359033298, 0.5033868716477421, 0.403153392210685, 0.10570619634108003, 0.10475761153924412, 0.08629794868473595, 0.11091143004389215, 0.10234654506463647, 0.07833760483246965, 0.10101829835282827, 0.1119007511115262, 0.08002995645660427, 0.13996517109516515, 0.17124798045262035, 0.14717022718547867, 0.13219679162067566, 0.14672460700489065, 0.18005353526727996, 0.1461055050636172, 0.1498777836156291, 0.13902504261466309, 0.27225458106307665, 0.35294540728619406, 0.24516783231292594, 0.3150650324658377, 0.40171957644401424, 0.23748649770286745, 0.34398896776526977, 0.39319612486827293, 0.2629064524440562, 0.23755275571081036, 0.2549576969625045, 0.16689111430949122, 0.22142038307625467, 0.2761433342100832, 0.1755371047373374, 0.2194922819335281, 0.31501599658419677, 0.17870228553453094, 0.18130709621994623, 0.20737741429991585, 0.17374055864711646, 0.2444875258003112, 0.19625593624056814, 0.1726079180117942, 0.1972815278980976, 0.21245043733817714, 0.17350476808152415, 0.207311719926067, 0.24400530185779412, 0.19758628392026545, 0.2169742165765507, 0.20571220946903845, 0.1901122260656044, 0.2153956115965241, 0.40989539552528376, 0.18196126930828127, 0.16724471263602458, 0.18531270161837288, 0.2501934798040252, 0.23319913521263136, 0.1843104225938168, 0.15706798900867858, 0.31558743542027934, 0.18273291186665885, 0.17046787934620622, 0.24487376411861494, 0.20954358603356416, 0.20336781618319033, 0.19828951093381497, 0.2023535584501135, 0.17104842049160984, 0.22657288326660863, 0.49677257283240006, 0.19205331030984674, 0.21593622962900916, 0.17802962846780268, 0.17599166306278713, 0.18991759463258095, 0.17981664460949198, 0.19332597687628772, 0.18062605761394956, 0.1871817393852565, 0.17898071534908833, 0.081101698123902, 0.08190550791438689, 0.06697182497956433, 0.09456141740615764, 0.07675598382543503, 0.07426091096956677, 0.09177038652652081, 0.08777104329836916, 0.06686778141745087]}, "mutation_prompt": null}
{"id": "d0c0127d-d89b-41c3-9a50-d97091aa2d99", "solution": "import numpy as np\n\nclass NovelMetaheuristicOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * self.dim\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.F = 0.5  # Mutation factor\n        self.CR = 0.9  # Crossover rate\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Mutation\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = self.population[a] + self.F * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, *self.bounds)\n                \n                # Crossover\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < self.CR\n                trial[crossover_points] = mutant[crossover_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Dynamic adaptation of F and CR\n                self.F = np.clip(self.F + 0.01 * np.random.randn(), 0.1, 1.0)\n                self.CR = np.clip(self.CR + 0.01 * np.random.randn(), 0.1, 1.0)\n\n        # Return the best solution found\n        best_index = np.argmin(self.fitness)\n        return self.population[best_index]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1", "name": "NovelMetaheuristicOptimizer", "description": "The algorithm combines Differential Evolution with dynamic parameter adaptation to efficiently explore and exploit the search space for diverse optimization landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0c4e0616-8ea1-44a3-a60e-e7139190218e", "metadata": {"aucs": [0.8045396462339381, 0.8346850660290176, 0.5827260764517073, 0.8037661574323112, 0.8123215670771295, 0.6045116322632507, 0.8071300071693338, 0.8464921108109535, 0.5687791260472059, 0.6310206764086086, 0.7136672608671841, 0.31878203083111434, 0.6078947721604601, 0.6276674053681497, 0.3174459743551308, 0.6300674125194464, 0.6474302747718192, 0.3392271779197099, 0.33277032590731526, 0.4281699585448472, 0.16761398413713047, 0.4397981980066161, 0.38719178874896876, 0.1494698972267139, 0.31685456870327566, 0.3831805868571321, 0.14615528414074963, 0.1616783630520131, 0.15458148330409716, 0.12175343398292793, 0.16439733980432325, 0.15422871817448525, 0.12834838694235007, 0.27286362083033444, 0.3445816825848539, 0.12075752246940152, 0.9280318318249153, 0.8965114014142248, 0.9561869588048221, 0.9135314744755676, 0.870176404502878, 0.9578092092231827, 0.9358890308384381, 0.8437462616862942, 0.9496546291717702, 0.2411365574404586, 0.3622856042781455, 0.22545232154869677, 0.29528612606512594, 0.36063413925463406, 0.22653080349017019, 0.2081843762506277, 0.3066791233903877, 0.23908949140142766, 0.30921843293210893, 0.32118424167375514, 0.25085800358174415, 0.3304006132698438, 0.7943459795832916, 0.2819751883734595, 0.616554963519703, 0.758503845288762, 0.28088741200179357, 0.1479567207705217, 0.2552284336327081, 0.1407533626602392, 0.17522952208504705, 0.17616441755340673, 0.13102490272088185, 0.19509072918258896, 0.19233060905704957, 0.12305998096710102, 0.1154168492092027, 0.1814028199739015, 0.15542431566743575, 0.15368526694266493, 0.17581917086531518, 0.14588979779316746, 0.14645038009430844, 0.1995888325090286, 0.1274776518969487, 9.999999999998899e-05, 0.05911244614241662, 9.999999999998899e-05, 9.999999999998899e-05, 0.12531568715277286, 0.011506841732858764, 0.02137044560315149, 0.04141488446130992, 0.006406769936503243, 0.11232037028708441, 0.19087087334983965, 0.1337671958022404, 0.045812763871053486, 0.15799750476632635, 0.16636398477408243, 0.13672877604220957, 0.2912179937304078, 0.15461069171960973, 0.002427026533231902, 0.0610841361196206, 9.999999999998899e-05, 9.999999999998899e-05, 0.03993267303341652, 9.999999999998899e-05, 0.03647084301634862, 0.11913437980726316, 9.999999999998899e-05, 0.11817677867813303, 0.15836183818160732, 0.09056645046878853, 0.11953167679202292, 0.22721245328623874, 0.12359852013949635, 0.1424477507737527, 0.16005503671544918, 0.08549666652746657, 0.4723631121635641, 0.5251241134716927, 0.47415948729714363, 0.4784405581779425, 0.5216528336798981, 0.41339223091933586, 0.4982199359033298, 0.5033868716477421, 0.403153392210685, 0.10570619634108003, 0.10475761153924412, 0.08629794868473595, 0.11091143004389215, 0.10234654506463647, 0.07833760483246965, 0.10101829835282827, 0.1119007511115262, 0.08002995645660427, 0.13996517109516515, 0.17124798045262035, 0.14717022718547867, 0.13219679162067566, 0.14672460700489065, 0.18005353526727996, 0.1461055050636172, 0.1498777836156291, 0.13902504261466309, 0.27225458106307665, 0.35294540728619406, 0.24516783231292594, 0.3150650324658377, 0.40171957644401424, 0.23748649770286745, 0.34398896776526977, 0.39319612486827293, 0.2629064524440562, 0.23755275571081036, 0.2549576969625045, 0.16689111430949122, 0.22142038307625467, 0.2761433342100832, 0.1755371047373374, 0.2194922819335281, 0.31501599658419677, 0.17870228553453094, 0.18130709621994623, 0.20737741429991585, 0.17374055864711646, 0.2444875258003112, 0.19625593624056814, 0.1726079180117942, 0.1972815278980976, 0.21245043733817714, 0.17350476808152415, 0.207311719926067, 0.24400530185779412, 0.19758628392026545, 0.2169742165765507, 0.20571220946903845, 0.1901122260656044, 0.2153956115965241, 0.40989539552528376, 0.18196126930828127, 0.16724471263602458, 0.18531270161837288, 0.2501934798040252, 0.23319913521263136, 0.1843104225938168, 0.15706798900867858, 0.31558743542027934, 0.18273291186665885, 0.17046787934620622, 0.24487376411861494, 0.20954358603356416, 0.20336781618319033, 0.19828951093381497, 0.2023535584501135, 0.17104842049160984, 0.22657288326660863, 0.49677257283240006, 0.19205331030984674, 0.21593622962900916, 0.17802962846780268, 0.17599166306278713, 0.18991759463258095, 0.17981664460949198, 0.19332597687628772, 0.18062605761394956, 0.1871817393852565, 0.17898071534908833, 0.081101698123902, 0.08190550791438689, 0.06697182497956433, 0.09456141740615764, 0.07675598382543503, 0.07426091096956677, 0.09177038652652081, 0.08777104329836916, 0.06686778141745087]}, "mutation_prompt": null}
{"id": "e62ed260-130c-475a-82ec-e0f7bf865478", "solution": "import numpy as np\n\nclass NovelMetaheuristicOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * self.dim\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.F = 0.5  # Mutation factor\n        self.CR = 0.9  # Crossover rate\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Mutation\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = self.population[a] + self.F * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, *self.bounds)\n                \n                # Crossover\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < self.CR\n                trial[crossover_points] = mutant[crossover_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Dynamic adaptation of F and CR\n                self.F = np.clip(self.F + 0.01 * np.random.randn(), 0.1, 1.0)\n                self.CR = np.clip(self.CR + 0.01 * np.random.randn(), 0.1, 1.0)\n\n        # Return the best solution found\n        best_index = np.argmin(self.fitness)\n        return self.population[best_index]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1", "name": "NovelMetaheuristicOptimizer", "description": "The algorithm combines Differential Evolution with dynamic parameter adaptation to efficiently explore and exploit the search space for diverse optimization landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0c4e0616-8ea1-44a3-a60e-e7139190218e", "metadata": {"aucs": [0.8045396462339381, 0.8346850660290176, 0.5827260764517073, 0.8037661574323112, 0.8123215670771295, 0.6045116322632507, 0.8071300071693338, 0.8464921108109535, 0.5687791260472059, 0.6310206764086086, 0.7136672608671841, 0.31878203083111434, 0.6078947721604601, 0.6276674053681497, 0.3174459743551308, 0.6300674125194464, 0.6474302747718192, 0.3392271779197099, 0.33277032590731526, 0.4281699585448472, 0.16761398413713047, 0.4397981980066161, 0.38719178874896876, 0.1494698972267139, 0.31685456870327566, 0.3831805868571321, 0.14615528414074963, 0.1616783630520131, 0.15458148330409716, 0.12175343398292793, 0.16439733980432325, 0.15422871817448525, 0.12834838694235007, 0.27286362083033444, 0.3445816825848539, 0.12075752246940152, 0.9280318318249153, 0.8965114014142248, 0.9561869588048221, 0.9135314744755676, 0.870176404502878, 0.9578092092231827, 0.9358890308384381, 0.8437462616862942, 0.9496546291717702, 0.2411365574404586, 0.3622856042781455, 0.22545232154869677, 0.29528612606512594, 0.36063413925463406, 0.22653080349017019, 0.2081843762506277, 0.3066791233903877, 0.23908949140142766, 0.30921843293210893, 0.32118424167375514, 0.25085800358174415, 0.3304006132698438, 0.7943459795832916, 0.2819751883734595, 0.616554963519703, 0.758503845288762, 0.28088741200179357, 0.1479567207705217, 0.2552284336327081, 0.1407533626602392, 0.17522952208504705, 0.17616441755340673, 0.13102490272088185, 0.19509072918258896, 0.19233060905704957, 0.12305998096710102, 0.1154168492092027, 0.1814028199739015, 0.15542431566743575, 0.15368526694266493, 0.17581917086531518, 0.14588979779316746, 0.14645038009430844, 0.1995888325090286, 0.1274776518969487, 9.999999999998899e-05, 0.05911244614241662, 9.999999999998899e-05, 9.999999999998899e-05, 0.12531568715277286, 0.011506841732858764, 0.02137044560315149, 0.04141488446130992, 0.006406769936503243, 0.11232037028708441, 0.19087087334983965, 0.1337671958022404, 0.045812763871053486, 0.15799750476632635, 0.16636398477408243, 0.13672877604220957, 0.2912179937304078, 0.15461069171960973, 0.002427026533231902, 0.0610841361196206, 9.999999999998899e-05, 9.999999999998899e-05, 0.03993267303341652, 9.999999999998899e-05, 0.03647084301634862, 0.11913437980726316, 9.999999999998899e-05, 0.11817677867813303, 0.15836183818160732, 0.09056645046878853, 0.11953167679202292, 0.22721245328623874, 0.12359852013949635, 0.1424477507737527, 0.16005503671544918, 0.08549666652746657, 0.4723631121635641, 0.5251241134716927, 0.47415948729714363, 0.4784405581779425, 0.5216528336798981, 0.41339223091933586, 0.4982199359033298, 0.5033868716477421, 0.403153392210685, 0.10570619634108003, 0.10475761153924412, 0.08629794868473595, 0.11091143004389215, 0.10234654506463647, 0.07833760483246965, 0.10101829835282827, 0.1119007511115262, 0.08002995645660427, 0.13996517109516515, 0.17124798045262035, 0.14717022718547867, 0.13219679162067566, 0.14672460700489065, 0.18005353526727996, 0.1461055050636172, 0.1498777836156291, 0.13902504261466309, 0.27225458106307665, 0.35294540728619406, 0.24516783231292594, 0.3150650324658377, 0.40171957644401424, 0.23748649770286745, 0.34398896776526977, 0.39319612486827293, 0.2629064524440562, 0.23755275571081036, 0.2549576969625045, 0.16689111430949122, 0.22142038307625467, 0.2761433342100832, 0.1755371047373374, 0.2194922819335281, 0.31501599658419677, 0.17870228553453094, 0.18130709621994623, 0.20737741429991585, 0.17374055864711646, 0.2444875258003112, 0.19625593624056814, 0.1726079180117942, 0.1972815278980976, 0.21245043733817714, 0.17350476808152415, 0.207311719926067, 0.24400530185779412, 0.19758628392026545, 0.2169742165765507, 0.20571220946903845, 0.1901122260656044, 0.2153956115965241, 0.40989539552528376, 0.18196126930828127, 0.16724471263602458, 0.18531270161837288, 0.2501934798040252, 0.23319913521263136, 0.1843104225938168, 0.15706798900867858, 0.31558743542027934, 0.18273291186665885, 0.17046787934620622, 0.24487376411861494, 0.20954358603356416, 0.20336781618319033, 0.19828951093381497, 0.2023535584501135, 0.17104842049160984, 0.22657288326660863, 0.49677257283240006, 0.19205331030984674, 0.21593622962900916, 0.17802962846780268, 0.17599166306278713, 0.18991759463258095, 0.17981664460949198, 0.19332597687628772, 0.18062605761394956, 0.1871817393852565, 0.17898071534908833, 0.081101698123902, 0.08190550791438689, 0.06697182497956433, 0.09456141740615764, 0.07675598382543503, 0.07426091096956677, 0.09177038652652081, 0.08777104329836916, 0.06686778141745087]}, "mutation_prompt": null}
{"id": "480877a6-8546-4b39-8410-8b2494bba5e2", "solution": "import numpy as np\n\nclass NovelMetaheuristicOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * self.dim\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.F = 0.5  # Mutation factor\n        self.CR = 0.9  # Crossover rate\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Mutation\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = self.population[a] + self.F * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, *self.bounds)\n                \n                # Crossover\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < self.CR\n                trial[crossover_points] = mutant[crossover_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Dynamic adaptation of F and CR\n                self.F = np.clip(self.F + 0.01 * np.random.randn(), 0.1, 1.0)\n                self.CR = np.clip(self.CR + 0.01 * np.random.randn(), 0.1, 1.0)\n\n        # Return the best solution found\n        best_index = np.argmin(self.fitness)\n        return self.population[best_index]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1", "name": "NovelMetaheuristicOptimizer", "description": "The algorithm combines Differential Evolution with dynamic parameter adaptation to efficiently explore and exploit the search space for diverse optimization landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0c4e0616-8ea1-44a3-a60e-e7139190218e", "metadata": {"aucs": [0.8045396462339381, 0.8346850660290176, 0.5827260764517073, 0.8037661574323112, 0.8123215670771295, 0.6045116322632507, 0.8071300071693338, 0.8464921108109535, 0.5687791260472059, 0.6310206764086086, 0.7136672608671841, 0.31878203083111434, 0.6078947721604601, 0.6276674053681497, 0.3174459743551308, 0.6300674125194464, 0.6474302747718192, 0.3392271779197099, 0.33277032590731526, 0.4281699585448472, 0.16761398413713047, 0.4397981980066161, 0.38719178874896876, 0.1494698972267139, 0.31685456870327566, 0.3831805868571321, 0.14615528414074963, 0.1616783630520131, 0.15458148330409716, 0.12175343398292793, 0.16439733980432325, 0.15422871817448525, 0.12834838694235007, 0.27286362083033444, 0.3445816825848539, 0.12075752246940152, 0.9280318318249153, 0.8965114014142248, 0.9561869588048221, 0.9135314744755676, 0.870176404502878, 0.9578092092231827, 0.9358890308384381, 0.8437462616862942, 0.9496546291717702, 0.2411365574404586, 0.3622856042781455, 0.22545232154869677, 0.29528612606512594, 0.36063413925463406, 0.22653080349017019, 0.2081843762506277, 0.3066791233903877, 0.23908949140142766, 0.30921843293210893, 0.32118424167375514, 0.25085800358174415, 0.3304006132698438, 0.7943459795832916, 0.2819751883734595, 0.616554963519703, 0.758503845288762, 0.28088741200179357, 0.1479567207705217, 0.2552284336327081, 0.1407533626602392, 0.17522952208504705, 0.17616441755340673, 0.13102490272088185, 0.19509072918258896, 0.19233060905704957, 0.12305998096710102, 0.1154168492092027, 0.1814028199739015, 0.15542431566743575, 0.15368526694266493, 0.17581917086531518, 0.14588979779316746, 0.14645038009430844, 0.1995888325090286, 0.1274776518969487, 9.999999999998899e-05, 0.05911244614241662, 9.999999999998899e-05, 9.999999999998899e-05, 0.12531568715277286, 0.011506841732858764, 0.02137044560315149, 0.04141488446130992, 0.006406769936503243, 0.11232037028708441, 0.19087087334983965, 0.1337671958022404, 0.045812763871053486, 0.15799750476632635, 0.16636398477408243, 0.13672877604220957, 0.2912179937304078, 0.15461069171960973, 0.002427026533231902, 0.0610841361196206, 9.999999999998899e-05, 9.999999999998899e-05, 0.03993267303341652, 9.999999999998899e-05, 0.03647084301634862, 0.11913437980726316, 9.999999999998899e-05, 0.11817677867813303, 0.15836183818160732, 0.09056645046878853, 0.11953167679202292, 0.22721245328623874, 0.12359852013949635, 0.1424477507737527, 0.16005503671544918, 0.08549666652746657, 0.4723631121635641, 0.5251241134716927, 0.47415948729714363, 0.4784405581779425, 0.5216528336798981, 0.41339223091933586, 0.4982199359033298, 0.5033868716477421, 0.403153392210685, 0.10570619634108003, 0.10475761153924412, 0.08629794868473595, 0.11091143004389215, 0.10234654506463647, 0.07833760483246965, 0.10101829835282827, 0.1119007511115262, 0.08002995645660427, 0.13996517109516515, 0.17124798045262035, 0.14717022718547867, 0.13219679162067566, 0.14672460700489065, 0.18005353526727996, 0.1461055050636172, 0.1498777836156291, 0.13902504261466309, 0.27225458106307665, 0.35294540728619406, 0.24516783231292594, 0.3150650324658377, 0.40171957644401424, 0.23748649770286745, 0.34398896776526977, 0.39319612486827293, 0.2629064524440562, 0.23755275571081036, 0.2549576969625045, 0.16689111430949122, 0.22142038307625467, 0.2761433342100832, 0.1755371047373374, 0.2194922819335281, 0.31501599658419677, 0.17870228553453094, 0.18130709621994623, 0.20737741429991585, 0.17374055864711646, 0.2444875258003112, 0.19625593624056814, 0.1726079180117942, 0.1972815278980976, 0.21245043733817714, 0.17350476808152415, 0.207311719926067, 0.24400530185779412, 0.19758628392026545, 0.2169742165765507, 0.20571220946903845, 0.1901122260656044, 0.2153956115965241, 0.40989539552528376, 0.18196126930828127, 0.16724471263602458, 0.18531270161837288, 0.2501934798040252, 0.23319913521263136, 0.1843104225938168, 0.15706798900867858, 0.31558743542027934, 0.18273291186665885, 0.17046787934620622, 0.24487376411861494, 0.20954358603356416, 0.20336781618319033, 0.19828951093381497, 0.2023535584501135, 0.17104842049160984, 0.22657288326660863, 0.49677257283240006, 0.19205331030984674, 0.21593622962900916, 0.17802962846780268, 0.17599166306278713, 0.18991759463258095, 0.17981664460949198, 0.19332597687628772, 0.18062605761394956, 0.1871817393852565, 0.17898071534908833, 0.081101698123902, 0.08190550791438689, 0.06697182497956433, 0.09456141740615764, 0.07675598382543503, 0.07426091096956677, 0.09177038652652081, 0.08777104329836916, 0.06686778141745087]}, "mutation_prompt": null}
{"id": "d2f409e2-cf23-47b2-b8ce-328b854117d8", "solution": "import numpy as np\n\nclass NovelMetaheuristicOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * self.dim\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.F = 0.5  # Mutation factor\n        self.CR = 0.9  # Crossover rate\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Mutation\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = self.population[a] + self.F * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, *self.bounds)\n                \n                # Crossover\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < self.CR\n                trial[crossover_points] = mutant[crossover_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Dynamic adaptation of F and CR\n                self.F = np.clip(self.F + 0.01 * np.random.randn(), 0.1, 1.0)\n                self.CR = np.clip(self.CR + 0.01 * np.random.randn(), 0.1, 1.0)\n\n        # Return the best solution found\n        best_index = np.argmin(self.fitness)\n        return self.population[best_index]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1", "name": "NovelMetaheuristicOptimizer", "description": "The algorithm combines Differential Evolution with dynamic parameter adaptation to efficiently explore and exploit the search space for diverse optimization landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0c4e0616-8ea1-44a3-a60e-e7139190218e", "metadata": {"aucs": [0.8045396462339381, 0.8346850660290176, 0.5827260764517073, 0.8037661574323112, 0.8123215670771295, 0.6045116322632507, 0.8071300071693338, 0.8464921108109535, 0.5687791260472059, 0.6310206764086086, 0.7136672608671841, 0.31878203083111434, 0.6078947721604601, 0.6276674053681497, 0.3174459743551308, 0.6300674125194464, 0.6474302747718192, 0.3392271779197099, 0.33277032590731526, 0.4281699585448472, 0.16761398413713047, 0.4397981980066161, 0.38719178874896876, 0.1494698972267139, 0.31685456870327566, 0.3831805868571321, 0.14615528414074963, 0.1616783630520131, 0.15458148330409716, 0.12175343398292793, 0.16439733980432325, 0.15422871817448525, 0.12834838694235007, 0.27286362083033444, 0.3445816825848539, 0.12075752246940152, 0.9280318318249153, 0.8965114014142248, 0.9561869588048221, 0.9135314744755676, 0.870176404502878, 0.9578092092231827, 0.9358890308384381, 0.8437462616862942, 0.9496546291717702, 0.2411365574404586, 0.3622856042781455, 0.22545232154869677, 0.29528612606512594, 0.36063413925463406, 0.22653080349017019, 0.2081843762506277, 0.3066791233903877, 0.23908949140142766, 0.30921843293210893, 0.32118424167375514, 0.25085800358174415, 0.3304006132698438, 0.7943459795832916, 0.2819751883734595, 0.616554963519703, 0.758503845288762, 0.28088741200179357, 0.1479567207705217, 0.2552284336327081, 0.1407533626602392, 0.17522952208504705, 0.17616441755340673, 0.13102490272088185, 0.19509072918258896, 0.19233060905704957, 0.12305998096710102, 0.1154168492092027, 0.1814028199739015, 0.15542431566743575, 0.15368526694266493, 0.17581917086531518, 0.14588979779316746, 0.14645038009430844, 0.1995888325090286, 0.1274776518969487, 9.999999999998899e-05, 0.05911244614241662, 9.999999999998899e-05, 9.999999999998899e-05, 0.12531568715277286, 0.011506841732858764, 0.02137044560315149, 0.04141488446130992, 0.006406769936503243, 0.11232037028708441, 0.19087087334983965, 0.1337671958022404, 0.045812763871053486, 0.15799750476632635, 0.16636398477408243, 0.13672877604220957, 0.2912179937304078, 0.15461069171960973, 0.002427026533231902, 0.0610841361196206, 9.999999999998899e-05, 9.999999999998899e-05, 0.03993267303341652, 9.999999999998899e-05, 0.03647084301634862, 0.11913437980726316, 9.999999999998899e-05, 0.11817677867813303, 0.15836183818160732, 0.09056645046878853, 0.11953167679202292, 0.22721245328623874, 0.12359852013949635, 0.1424477507737527, 0.16005503671544918, 0.08549666652746657, 0.4723631121635641, 0.5251241134716927, 0.47415948729714363, 0.4784405581779425, 0.5216528336798981, 0.41339223091933586, 0.4982199359033298, 0.5033868716477421, 0.403153392210685, 0.10570619634108003, 0.10475761153924412, 0.08629794868473595, 0.11091143004389215, 0.10234654506463647, 0.07833760483246965, 0.10101829835282827, 0.1119007511115262, 0.08002995645660427, 0.13996517109516515, 0.17124798045262035, 0.14717022718547867, 0.13219679162067566, 0.14672460700489065, 0.18005353526727996, 0.1461055050636172, 0.1498777836156291, 0.13902504261466309, 0.27225458106307665, 0.35294540728619406, 0.24516783231292594, 0.3150650324658377, 0.40171957644401424, 0.23748649770286745, 0.34398896776526977, 0.39319612486827293, 0.2629064524440562, 0.23755275571081036, 0.2549576969625045, 0.16689111430949122, 0.22142038307625467, 0.2761433342100832, 0.1755371047373374, 0.2194922819335281, 0.31501599658419677, 0.17870228553453094, 0.18130709621994623, 0.20737741429991585, 0.17374055864711646, 0.2444875258003112, 0.19625593624056814, 0.1726079180117942, 0.1972815278980976, 0.21245043733817714, 0.17350476808152415, 0.207311719926067, 0.24400530185779412, 0.19758628392026545, 0.2169742165765507, 0.20571220946903845, 0.1901122260656044, 0.2153956115965241, 0.40989539552528376, 0.18196126930828127, 0.16724471263602458, 0.18531270161837288, 0.2501934798040252, 0.23319913521263136, 0.1843104225938168, 0.15706798900867858, 0.31558743542027934, 0.18273291186665885, 0.17046787934620622, 0.24487376411861494, 0.20954358603356416, 0.20336781618319033, 0.19828951093381497, 0.2023535584501135, 0.17104842049160984, 0.22657288326660863, 0.49677257283240006, 0.19205331030984674, 0.21593622962900916, 0.17802962846780268, 0.17599166306278713, 0.18991759463258095, 0.17981664460949198, 0.19332597687628772, 0.18062605761394956, 0.1871817393852565, 0.17898071534908833, 0.081101698123902, 0.08190550791438689, 0.06697182497956433, 0.09456141740615764, 0.07675598382543503, 0.07426091096956677, 0.09177038652652081, 0.08777104329836916, 0.06686778141745087]}, "mutation_prompt": null}
{"id": "0aec82a3-d134-427f-841d-8a82bb4124b4", "solution": "import numpy as np\n\nclass NovelMetaheuristicOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * self.dim\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.F = 0.5  # Mutation factor\n        self.CR = 0.9  # Crossover rate\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Mutation\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = self.population[a] + self.F * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, *self.bounds)\n                \n                # Crossover\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < self.CR\n                trial[crossover_points] = mutant[crossover_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Dynamic adaptation of F and CR\n                self.F = np.clip(self.F + 0.01 * np.random.randn(), 0.1, 1.0)\n                self.CR = np.clip(self.CR + 0.01 * np.random.randn(), 0.1, 1.0)\n\n        # Return the best solution found\n        best_index = np.argmin(self.fitness)\n        return self.population[best_index]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1", "name": "NovelMetaheuristicOptimizer", "description": "The algorithm combines Differential Evolution with dynamic parameter adaptation to efficiently explore and exploit the search space for diverse optimization landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0c4e0616-8ea1-44a3-a60e-e7139190218e", "metadata": {"aucs": [0.8045396462339381, 0.8346850660290176, 0.5827260764517073, 0.8037661574323112, 0.8123215670771295, 0.6045116322632507, 0.8071300071693338, 0.8464921108109535, 0.5687791260472059, 0.6310206764086086, 0.7136672608671841, 0.31878203083111434, 0.6078947721604601, 0.6276674053681497, 0.3174459743551308, 0.6300674125194464, 0.6474302747718192, 0.3392271779197099, 0.33277032590731526, 0.4281699585448472, 0.16761398413713047, 0.4397981980066161, 0.38719178874896876, 0.1494698972267139, 0.31685456870327566, 0.3831805868571321, 0.14615528414074963, 0.1616783630520131, 0.15458148330409716, 0.12175343398292793, 0.16439733980432325, 0.15422871817448525, 0.12834838694235007, 0.27286362083033444, 0.3445816825848539, 0.12075752246940152, 0.9280318318249153, 0.8965114014142248, 0.9561869588048221, 0.9135314744755676, 0.870176404502878, 0.9578092092231827, 0.9358890308384381, 0.8437462616862942, 0.9496546291717702, 0.2411365574404586, 0.3622856042781455, 0.22545232154869677, 0.29528612606512594, 0.36063413925463406, 0.22653080349017019, 0.2081843762506277, 0.3066791233903877, 0.23908949140142766, 0.30921843293210893, 0.32118424167375514, 0.25085800358174415, 0.3304006132698438, 0.7943459795832916, 0.2819751883734595, 0.616554963519703, 0.758503845288762, 0.28088741200179357, 0.1479567207705217, 0.2552284336327081, 0.1407533626602392, 0.17522952208504705, 0.17616441755340673, 0.13102490272088185, 0.19509072918258896, 0.19233060905704957, 0.12305998096710102, 0.1154168492092027, 0.1814028199739015, 0.15542431566743575, 0.15368526694266493, 0.17581917086531518, 0.14588979779316746, 0.14645038009430844, 0.1995888325090286, 0.1274776518969487, 9.999999999998899e-05, 0.05911244614241662, 9.999999999998899e-05, 9.999999999998899e-05, 0.12531568715277286, 0.011506841732858764, 0.02137044560315149, 0.04141488446130992, 0.006406769936503243, 0.11232037028708441, 0.19087087334983965, 0.1337671958022404, 0.045812763871053486, 0.15799750476632635, 0.16636398477408243, 0.13672877604220957, 0.2912179937304078, 0.15461069171960973, 0.002427026533231902, 0.0610841361196206, 9.999999999998899e-05, 9.999999999998899e-05, 0.03993267303341652, 9.999999999998899e-05, 0.03647084301634862, 0.11913437980726316, 9.999999999998899e-05, 0.11817677867813303, 0.15836183818160732, 0.09056645046878853, 0.11953167679202292, 0.22721245328623874, 0.12359852013949635, 0.1424477507737527, 0.16005503671544918, 0.08549666652746657, 0.4723631121635641, 0.5251241134716927, 0.47415948729714363, 0.4784405581779425, 0.5216528336798981, 0.41339223091933586, 0.4982199359033298, 0.5033868716477421, 0.403153392210685, 0.10570619634108003, 0.10475761153924412, 0.08629794868473595, 0.11091143004389215, 0.10234654506463647, 0.07833760483246965, 0.10101829835282827, 0.1119007511115262, 0.08002995645660427, 0.13996517109516515, 0.17124798045262035, 0.14717022718547867, 0.13219679162067566, 0.14672460700489065, 0.18005353526727996, 0.1461055050636172, 0.1498777836156291, 0.13902504261466309, 0.27225458106307665, 0.35294540728619406, 0.24516783231292594, 0.3150650324658377, 0.40171957644401424, 0.23748649770286745, 0.34398896776526977, 0.39319612486827293, 0.2629064524440562, 0.23755275571081036, 0.2549576969625045, 0.16689111430949122, 0.22142038307625467, 0.2761433342100832, 0.1755371047373374, 0.2194922819335281, 0.31501599658419677, 0.17870228553453094, 0.18130709621994623, 0.20737741429991585, 0.17374055864711646, 0.2444875258003112, 0.19625593624056814, 0.1726079180117942, 0.1972815278980976, 0.21245043733817714, 0.17350476808152415, 0.207311719926067, 0.24400530185779412, 0.19758628392026545, 0.2169742165765507, 0.20571220946903845, 0.1901122260656044, 0.2153956115965241, 0.40989539552528376, 0.18196126930828127, 0.16724471263602458, 0.18531270161837288, 0.2501934798040252, 0.23319913521263136, 0.1843104225938168, 0.15706798900867858, 0.31558743542027934, 0.18273291186665885, 0.17046787934620622, 0.24487376411861494, 0.20954358603356416, 0.20336781618319033, 0.19828951093381497, 0.2023535584501135, 0.17104842049160984, 0.22657288326660863, 0.49677257283240006, 0.19205331030984674, 0.21593622962900916, 0.17802962846780268, 0.17599166306278713, 0.18991759463258095, 0.17981664460949198, 0.19332597687628772, 0.18062605761394956, 0.1871817393852565, 0.17898071534908833, 0.081101698123902, 0.08190550791438689, 0.06697182497956433, 0.09456141740615764, 0.07675598382543503, 0.07426091096956677, 0.09177038652652081, 0.08777104329836916, 0.06686778141745087]}, "mutation_prompt": null}
{"id": "de470a64-8113-4cd9-9809-ba41e4277ae3", "solution": "import numpy as np\n\nclass NovelMetaheuristicOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * self.dim\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.F = 0.5  # Mutation factor\n        self.CR = 0.9  # Crossover rate\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Mutation\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = self.population[a] + self.F * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, *self.bounds)\n                \n                # Crossover\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < self.CR\n                trial[crossover_points] = mutant[crossover_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Dynamic adaptation of F and CR\n                self.F = np.clip(self.F + 0.01 * np.random.randn(), 0.1, 1.0)\n                self.CR = np.clip(self.CR + 0.01 * np.random.randn(), 0.1, 1.0)\n\n        # Return the best solution found\n        best_index = np.argmin(self.fitness)\n        return self.population[best_index]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1", "name": "NovelMetaheuristicOptimizer", "description": "The algorithm combines Differential Evolution with dynamic parameter adaptation to efficiently explore and exploit the search space for diverse optimization landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0c4e0616-8ea1-44a3-a60e-e7139190218e", "metadata": {"aucs": [0.8045396462339381, 0.8346850660290176, 0.5827260764517073, 0.8037661574323112, 0.8123215670771295, 0.6045116322632507, 0.8071300071693338, 0.8464921108109535, 0.5687791260472059, 0.6310206764086086, 0.7136672608671841, 0.31878203083111434, 0.6078947721604601, 0.6276674053681497, 0.3174459743551308, 0.6300674125194464, 0.6474302747718192, 0.3392271779197099, 0.33277032590731526, 0.4281699585448472, 0.16761398413713047, 0.4397981980066161, 0.38719178874896876, 0.1494698972267139, 0.31685456870327566, 0.3831805868571321, 0.14615528414074963, 0.1616783630520131, 0.15458148330409716, 0.12175343398292793, 0.16439733980432325, 0.15422871817448525, 0.12834838694235007, 0.27286362083033444, 0.3445816825848539, 0.12075752246940152, 0.9280318318249153, 0.8965114014142248, 0.9561869588048221, 0.9135314744755676, 0.870176404502878, 0.9578092092231827, 0.9358890308384381, 0.8437462616862942, 0.9496546291717702, 0.2411365574404586, 0.3622856042781455, 0.22545232154869677, 0.29528612606512594, 0.36063413925463406, 0.22653080349017019, 0.2081843762506277, 0.3066791233903877, 0.23908949140142766, 0.30921843293210893, 0.32118424167375514, 0.25085800358174415, 0.3304006132698438, 0.7943459795832916, 0.2819751883734595, 0.616554963519703, 0.758503845288762, 0.28088741200179357, 0.1479567207705217, 0.2552284336327081, 0.1407533626602392, 0.17522952208504705, 0.17616441755340673, 0.13102490272088185, 0.19509072918258896, 0.19233060905704957, 0.12305998096710102, 0.1154168492092027, 0.1814028199739015, 0.15542431566743575, 0.15368526694266493, 0.17581917086531518, 0.14588979779316746, 0.14645038009430844, 0.1995888325090286, 0.1274776518969487, 9.999999999998899e-05, 0.05911244614241662, 9.999999999998899e-05, 9.999999999998899e-05, 0.12531568715277286, 0.011506841732858764, 0.02137044560315149, 0.04141488446130992, 0.006406769936503243, 0.11232037028708441, 0.19087087334983965, 0.1337671958022404, 0.045812763871053486, 0.15799750476632635, 0.16636398477408243, 0.13672877604220957, 0.2912179937304078, 0.15461069171960973, 0.002427026533231902, 0.0610841361196206, 9.999999999998899e-05, 9.999999999998899e-05, 0.03993267303341652, 9.999999999998899e-05, 0.03647084301634862, 0.11913437980726316, 9.999999999998899e-05, 0.11817677867813303, 0.15836183818160732, 0.09056645046878853, 0.11953167679202292, 0.22721245328623874, 0.12359852013949635, 0.1424477507737527, 0.16005503671544918, 0.08549666652746657, 0.4723631121635641, 0.5251241134716927, 0.47415948729714363, 0.4784405581779425, 0.5216528336798981, 0.41339223091933586, 0.4982199359033298, 0.5033868716477421, 0.403153392210685, 0.10570619634108003, 0.10475761153924412, 0.08629794868473595, 0.11091143004389215, 0.10234654506463647, 0.07833760483246965, 0.10101829835282827, 0.1119007511115262, 0.08002995645660427, 0.13996517109516515, 0.17124798045262035, 0.14717022718547867, 0.13219679162067566, 0.14672460700489065, 0.18005353526727996, 0.1461055050636172, 0.1498777836156291, 0.13902504261466309, 0.27225458106307665, 0.35294540728619406, 0.24516783231292594, 0.3150650324658377, 0.40171957644401424, 0.23748649770286745, 0.34398896776526977, 0.39319612486827293, 0.2629064524440562, 0.23755275571081036, 0.2549576969625045, 0.16689111430949122, 0.22142038307625467, 0.2761433342100832, 0.1755371047373374, 0.2194922819335281, 0.31501599658419677, 0.17870228553453094, 0.18130709621994623, 0.20737741429991585, 0.17374055864711646, 0.2444875258003112, 0.19625593624056814, 0.1726079180117942, 0.1972815278980976, 0.21245043733817714, 0.17350476808152415, 0.207311719926067, 0.24400530185779412, 0.19758628392026545, 0.2169742165765507, 0.20571220946903845, 0.1901122260656044, 0.2153956115965241, 0.40989539552528376, 0.18196126930828127, 0.16724471263602458, 0.18531270161837288, 0.2501934798040252, 0.23319913521263136, 0.1843104225938168, 0.15706798900867858, 0.31558743542027934, 0.18273291186665885, 0.17046787934620622, 0.24487376411861494, 0.20954358603356416, 0.20336781618319033, 0.19828951093381497, 0.2023535584501135, 0.17104842049160984, 0.22657288326660863, 0.49677257283240006, 0.19205331030984674, 0.21593622962900916, 0.17802962846780268, 0.17599166306278713, 0.18991759463258095, 0.17981664460949198, 0.19332597687628772, 0.18062605761394956, 0.1871817393852565, 0.17898071534908833, 0.081101698123902, 0.08190550791438689, 0.06697182497956433, 0.09456141740615764, 0.07675598382543503, 0.07426091096956677, 0.09177038652652081, 0.08777104329836916, 0.06686778141745087]}, "mutation_prompt": null}
{"id": "8e9dcb7a-d7d2-43f0-a37d-a6f74ffdd5dd", "solution": "import numpy as np\n\nclass NovelMetaheuristicOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * self.dim\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.F = 0.5  # Mutation factor\n        self.CR = 0.9  # Crossover rate\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Mutation\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = self.population[a] + self.F * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, *self.bounds)\n                \n                # Crossover\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < self.CR\n                trial[crossover_points] = mutant[crossover_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Dynamic adaptation of F and CR\n                self.F = np.clip(self.F + 0.01 * np.random.randn(), 0.1, 1.0)\n                self.CR = np.clip(self.CR + 0.01 * np.random.randn(), 0.1, 1.0)\n\n        # Return the best solution found\n        best_index = np.argmin(self.fitness)\n        return self.population[best_index]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1", "name": "NovelMetaheuristicOptimizer", "description": "The algorithm combines Differential Evolution with dynamic parameter adaptation to efficiently explore and exploit the search space for diverse optimization landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0c4e0616-8ea1-44a3-a60e-e7139190218e", "metadata": {"aucs": [0.8045396462339381, 0.8346850660290176, 0.5827260764517073, 0.8037661574323112, 0.8123215670771295, 0.6045116322632507, 0.8071300071693338, 0.8464921108109535, 0.5687791260472059, 0.6310206764086086, 0.7136672608671841, 0.31878203083111434, 0.6078947721604601, 0.6276674053681497, 0.3174459743551308, 0.6300674125194464, 0.6474302747718192, 0.3392271779197099, 0.33277032590731526, 0.4281699585448472, 0.16761398413713047, 0.4397981980066161, 0.38719178874896876, 0.1494698972267139, 0.31685456870327566, 0.3831805868571321, 0.14615528414074963, 0.1616783630520131, 0.15458148330409716, 0.12175343398292793, 0.16439733980432325, 0.15422871817448525, 0.12834838694235007, 0.27286362083033444, 0.3445816825848539, 0.12075752246940152, 0.9280318318249153, 0.8965114014142248, 0.9561869588048221, 0.9135314744755676, 0.870176404502878, 0.9578092092231827, 0.9358890308384381, 0.8437462616862942, 0.9496546291717702, 0.2411365574404586, 0.3622856042781455, 0.22545232154869677, 0.29528612606512594, 0.36063413925463406, 0.22653080349017019, 0.2081843762506277, 0.3066791233903877, 0.23908949140142766, 0.30921843293210893, 0.32118424167375514, 0.25085800358174415, 0.3304006132698438, 0.7943459795832916, 0.2819751883734595, 0.616554963519703, 0.758503845288762, 0.28088741200179357, 0.1479567207705217, 0.2552284336327081, 0.1407533626602392, 0.17522952208504705, 0.17616441755340673, 0.13102490272088185, 0.19509072918258896, 0.19233060905704957, 0.12305998096710102, 0.1154168492092027, 0.1814028199739015, 0.15542431566743575, 0.15368526694266493, 0.17581917086531518, 0.14588979779316746, 0.14645038009430844, 0.1995888325090286, 0.1274776518969487, 9.999999999998899e-05, 0.05911244614241662, 9.999999999998899e-05, 9.999999999998899e-05, 0.12531568715277286, 0.011506841732858764, 0.02137044560315149, 0.04141488446130992, 0.006406769936503243, 0.11232037028708441, 0.19087087334983965, 0.1337671958022404, 0.045812763871053486, 0.15799750476632635, 0.16636398477408243, 0.13672877604220957, 0.2912179937304078, 0.15461069171960973, 0.002427026533231902, 0.0610841361196206, 9.999999999998899e-05, 9.999999999998899e-05, 0.03993267303341652, 9.999999999998899e-05, 0.03647084301634862, 0.11913437980726316, 9.999999999998899e-05, 0.11817677867813303, 0.15836183818160732, 0.09056645046878853, 0.11953167679202292, 0.22721245328623874, 0.12359852013949635, 0.1424477507737527, 0.16005503671544918, 0.08549666652746657, 0.4723631121635641, 0.5251241134716927, 0.47415948729714363, 0.4784405581779425, 0.5216528336798981, 0.41339223091933586, 0.4982199359033298, 0.5033868716477421, 0.403153392210685, 0.10570619634108003, 0.10475761153924412, 0.08629794868473595, 0.11091143004389215, 0.10234654506463647, 0.07833760483246965, 0.10101829835282827, 0.1119007511115262, 0.08002995645660427, 0.13996517109516515, 0.17124798045262035, 0.14717022718547867, 0.13219679162067566, 0.14672460700489065, 0.18005353526727996, 0.1461055050636172, 0.1498777836156291, 0.13902504261466309, 0.27225458106307665, 0.35294540728619406, 0.24516783231292594, 0.3150650324658377, 0.40171957644401424, 0.23748649770286745, 0.34398896776526977, 0.39319612486827293, 0.2629064524440562, 0.23755275571081036, 0.2549576969625045, 0.16689111430949122, 0.22142038307625467, 0.2761433342100832, 0.1755371047373374, 0.2194922819335281, 0.31501599658419677, 0.17870228553453094, 0.18130709621994623, 0.20737741429991585, 0.17374055864711646, 0.2444875258003112, 0.19625593624056814, 0.1726079180117942, 0.1972815278980976, 0.21245043733817714, 0.17350476808152415, 0.207311719926067, 0.24400530185779412, 0.19758628392026545, 0.2169742165765507, 0.20571220946903845, 0.1901122260656044, 0.2153956115965241, 0.40989539552528376, 0.18196126930828127, 0.16724471263602458, 0.18531270161837288, 0.2501934798040252, 0.23319913521263136, 0.1843104225938168, 0.15706798900867858, 0.31558743542027934, 0.18273291186665885, 0.17046787934620622, 0.24487376411861494, 0.20954358603356416, 0.20336781618319033, 0.19828951093381497, 0.2023535584501135, 0.17104842049160984, 0.22657288326660863, 0.49677257283240006, 0.19205331030984674, 0.21593622962900916, 0.17802962846780268, 0.17599166306278713, 0.18991759463258095, 0.17981664460949198, 0.19332597687628772, 0.18062605761394956, 0.1871817393852565, 0.17898071534908833, 0.081101698123902, 0.08190550791438689, 0.06697182497956433, 0.09456141740615764, 0.07675598382543503, 0.07426091096956677, 0.09177038652652081, 0.08777104329836916, 0.06686778141745087]}, "mutation_prompt": null}
{"id": "e5fd096c-51f8-41e6-8891-b74ccd41bf51", "solution": "import numpy as np\n\nclass NovelMetaheuristicOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * self.dim\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.F = 0.5  # Mutation factor\n        self.CR = 0.9  # Crossover rate\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Mutation\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = self.population[a] + self.F * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, *self.bounds)\n                \n                # Crossover\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < self.CR\n                trial[crossover_points] = mutant[crossover_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Dynamic adaptation of F and CR\n                self.F = np.clip(self.F + 0.01 * np.random.randn(), 0.1, 1.0)\n                self.CR = np.clip(self.CR + 0.01 * np.random.randn(), 0.1, 1.0)\n\n        # Return the best solution found\n        best_index = np.argmin(self.fitness)\n        return self.population[best_index]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1", "name": "NovelMetaheuristicOptimizer", "description": "The algorithm combines Differential Evolution with dynamic parameter adaptation to efficiently explore and exploit the search space for diverse optimization landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0c4e0616-8ea1-44a3-a60e-e7139190218e", "metadata": {"aucs": [0.8045396462339381, 0.8346850660290176, 0.5827260764517073, 0.8037661574323112, 0.8123215670771295, 0.6045116322632507, 0.8071300071693338, 0.8464921108109535, 0.5687791260472059, 0.6310206764086086, 0.7136672608671841, 0.31878203083111434, 0.6078947721604601, 0.6276674053681497, 0.3174459743551308, 0.6300674125194464, 0.6474302747718192, 0.3392271779197099, 0.33277032590731526, 0.4281699585448472, 0.16761398413713047, 0.4397981980066161, 0.38719178874896876, 0.1494698972267139, 0.31685456870327566, 0.3831805868571321, 0.14615528414074963, 0.1616783630520131, 0.15458148330409716, 0.12175343398292793, 0.16439733980432325, 0.15422871817448525, 0.12834838694235007, 0.27286362083033444, 0.3445816825848539, 0.12075752246940152, 0.9280318318249153, 0.8965114014142248, 0.9561869588048221, 0.9135314744755676, 0.870176404502878, 0.9578092092231827, 0.9358890308384381, 0.8437462616862942, 0.9496546291717702, 0.2411365574404586, 0.3622856042781455, 0.22545232154869677, 0.29528612606512594, 0.36063413925463406, 0.22653080349017019, 0.2081843762506277, 0.3066791233903877, 0.23908949140142766, 0.30921843293210893, 0.32118424167375514, 0.25085800358174415, 0.3304006132698438, 0.7943459795832916, 0.2819751883734595, 0.616554963519703, 0.758503845288762, 0.28088741200179357, 0.1479567207705217, 0.2552284336327081, 0.1407533626602392, 0.17522952208504705, 0.17616441755340673, 0.13102490272088185, 0.19509072918258896, 0.19233060905704957, 0.12305998096710102, 0.1154168492092027, 0.1814028199739015, 0.15542431566743575, 0.15368526694266493, 0.17581917086531518, 0.14588979779316746, 0.14645038009430844, 0.1995888325090286, 0.1274776518969487, 9.999999999998899e-05, 0.05911244614241662, 9.999999999998899e-05, 9.999999999998899e-05, 0.12531568715277286, 0.011506841732858764, 0.02137044560315149, 0.04141488446130992, 0.006406769936503243, 0.11232037028708441, 0.19087087334983965, 0.1337671958022404, 0.045812763871053486, 0.15799750476632635, 0.16636398477408243, 0.13672877604220957, 0.2912179937304078, 0.15461069171960973, 0.002427026533231902, 0.0610841361196206, 9.999999999998899e-05, 9.999999999998899e-05, 0.03993267303341652, 9.999999999998899e-05, 0.03647084301634862, 0.11913437980726316, 9.999999999998899e-05, 0.11817677867813303, 0.15836183818160732, 0.09056645046878853, 0.11953167679202292, 0.22721245328623874, 0.12359852013949635, 0.1424477507737527, 0.16005503671544918, 0.08549666652746657, 0.4723631121635641, 0.5251241134716927, 0.47415948729714363, 0.4784405581779425, 0.5216528336798981, 0.41339223091933586, 0.4982199359033298, 0.5033868716477421, 0.403153392210685, 0.10570619634108003, 0.10475761153924412, 0.08629794868473595, 0.11091143004389215, 0.10234654506463647, 0.07833760483246965, 0.10101829835282827, 0.1119007511115262, 0.08002995645660427, 0.13996517109516515, 0.17124798045262035, 0.14717022718547867, 0.13219679162067566, 0.14672460700489065, 0.18005353526727996, 0.1461055050636172, 0.1498777836156291, 0.13902504261466309, 0.27225458106307665, 0.35294540728619406, 0.24516783231292594, 0.3150650324658377, 0.40171957644401424, 0.23748649770286745, 0.34398896776526977, 0.39319612486827293, 0.2629064524440562, 0.23755275571081036, 0.2549576969625045, 0.16689111430949122, 0.22142038307625467, 0.2761433342100832, 0.1755371047373374, 0.2194922819335281, 0.31501599658419677, 0.17870228553453094, 0.18130709621994623, 0.20737741429991585, 0.17374055864711646, 0.2444875258003112, 0.19625593624056814, 0.1726079180117942, 0.1972815278980976, 0.21245043733817714, 0.17350476808152415, 0.207311719926067, 0.24400530185779412, 0.19758628392026545, 0.2169742165765507, 0.20571220946903845, 0.1901122260656044, 0.2153956115965241, 0.40989539552528376, 0.18196126930828127, 0.16724471263602458, 0.18531270161837288, 0.2501934798040252, 0.23319913521263136, 0.1843104225938168, 0.15706798900867858, 0.31558743542027934, 0.18273291186665885, 0.17046787934620622, 0.24487376411861494, 0.20954358603356416, 0.20336781618319033, 0.19828951093381497, 0.2023535584501135, 0.17104842049160984, 0.22657288326660863, 0.49677257283240006, 0.19205331030984674, 0.21593622962900916, 0.17802962846780268, 0.17599166306278713, 0.18991759463258095, 0.17981664460949198, 0.19332597687628772, 0.18062605761394956, 0.1871817393852565, 0.17898071534908833, 0.081101698123902, 0.08190550791438689, 0.06697182497956433, 0.09456141740615764, 0.07675598382543503, 0.07426091096956677, 0.09177038652652081, 0.08777104329836916, 0.06686778141745087]}, "mutation_prompt": null}
{"id": "3474cfd8-c8af-4f7f-854a-1b12cf7847cc", "solution": "import numpy as np\n\nclass NovelMetaheuristicOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * self.dim\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.F = 0.5  # Mutation factor\n        self.CR = 0.9  # Crossover rate\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Mutation\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = self.population[a] + self.F * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, *self.bounds)\n                \n                # Crossover\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < self.CR\n                trial[crossover_points] = mutant[crossover_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Dynamic adaptation of F and CR\n                self.F = np.clip(self.F + 0.01 * np.random.randn(), 0.1, 1.0)\n                self.CR = np.clip(self.CR + 0.01 * np.random.randn(), 0.1, 1.0)\n\n        # Return the best solution found\n        best_index = np.argmin(self.fitness)\n        return self.population[best_index]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1", "name": "NovelMetaheuristicOptimizer", "description": "The algorithm combines Differential Evolution with dynamic parameter adaptation to efficiently explore and exploit the search space for diverse optimization landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0c4e0616-8ea1-44a3-a60e-e7139190218e", "metadata": {"aucs": [0.8045396462339381, 0.8346850660290176, 0.5827260764517073, 0.8037661574323112, 0.8123215670771295, 0.6045116322632507, 0.8071300071693338, 0.8464921108109535, 0.5687791260472059, 0.6310206764086086, 0.7136672608671841, 0.31878203083111434, 0.6078947721604601, 0.6276674053681497, 0.3174459743551308, 0.6300674125194464, 0.6474302747718192, 0.3392271779197099, 0.33277032590731526, 0.4281699585448472, 0.16761398413713047, 0.4397981980066161, 0.38719178874896876, 0.1494698972267139, 0.31685456870327566, 0.3831805868571321, 0.14615528414074963, 0.1616783630520131, 0.15458148330409716, 0.12175343398292793, 0.16439733980432325, 0.15422871817448525, 0.12834838694235007, 0.27286362083033444, 0.3445816825848539, 0.12075752246940152, 0.9280318318249153, 0.8965114014142248, 0.9561869588048221, 0.9135314744755676, 0.870176404502878, 0.9578092092231827, 0.9358890308384381, 0.8437462616862942, 0.9496546291717702, 0.2411365574404586, 0.3622856042781455, 0.22545232154869677, 0.29528612606512594, 0.36063413925463406, 0.22653080349017019, 0.2081843762506277, 0.3066791233903877, 0.23908949140142766, 0.30921843293210893, 0.32118424167375514, 0.25085800358174415, 0.3304006132698438, 0.7943459795832916, 0.2819751883734595, 0.616554963519703, 0.758503845288762, 0.28088741200179357, 0.1479567207705217, 0.2552284336327081, 0.1407533626602392, 0.17522952208504705, 0.17616441755340673, 0.13102490272088185, 0.19509072918258896, 0.19233060905704957, 0.12305998096710102, 0.1154168492092027, 0.1814028199739015, 0.15542431566743575, 0.15368526694266493, 0.17581917086531518, 0.14588979779316746, 0.14645038009430844, 0.1995888325090286, 0.1274776518969487, 9.999999999998899e-05, 0.05911244614241662, 9.999999999998899e-05, 9.999999999998899e-05, 0.12531568715277286, 0.011506841732858764, 0.02137044560315149, 0.04141488446130992, 0.006406769936503243, 0.11232037028708441, 0.19087087334983965, 0.1337671958022404, 0.045812763871053486, 0.15799750476632635, 0.16636398477408243, 0.13672877604220957, 0.2912179937304078, 0.15461069171960973, 0.002427026533231902, 0.0610841361196206, 9.999999999998899e-05, 9.999999999998899e-05, 0.03993267303341652, 9.999999999998899e-05, 0.03647084301634862, 0.11913437980726316, 9.999999999998899e-05, 0.11817677867813303, 0.15836183818160732, 0.09056645046878853, 0.11953167679202292, 0.22721245328623874, 0.12359852013949635, 0.1424477507737527, 0.16005503671544918, 0.08549666652746657, 0.4723631121635641, 0.5251241134716927, 0.47415948729714363, 0.4784405581779425, 0.5216528336798981, 0.41339223091933586, 0.4982199359033298, 0.5033868716477421, 0.403153392210685, 0.10570619634108003, 0.10475761153924412, 0.08629794868473595, 0.11091143004389215, 0.10234654506463647, 0.07833760483246965, 0.10101829835282827, 0.1119007511115262, 0.08002995645660427, 0.13996517109516515, 0.17124798045262035, 0.14717022718547867, 0.13219679162067566, 0.14672460700489065, 0.18005353526727996, 0.1461055050636172, 0.1498777836156291, 0.13902504261466309, 0.27225458106307665, 0.35294540728619406, 0.24516783231292594, 0.3150650324658377, 0.40171957644401424, 0.23748649770286745, 0.34398896776526977, 0.39319612486827293, 0.2629064524440562, 0.23755275571081036, 0.2549576969625045, 0.16689111430949122, 0.22142038307625467, 0.2761433342100832, 0.1755371047373374, 0.2194922819335281, 0.31501599658419677, 0.17870228553453094, 0.18130709621994623, 0.20737741429991585, 0.17374055864711646, 0.2444875258003112, 0.19625593624056814, 0.1726079180117942, 0.1972815278980976, 0.21245043733817714, 0.17350476808152415, 0.207311719926067, 0.24400530185779412, 0.19758628392026545, 0.2169742165765507, 0.20571220946903845, 0.1901122260656044, 0.2153956115965241, 0.40989539552528376, 0.18196126930828127, 0.16724471263602458, 0.18531270161837288, 0.2501934798040252, 0.23319913521263136, 0.1843104225938168, 0.15706798900867858, 0.31558743542027934, 0.18273291186665885, 0.17046787934620622, 0.24487376411861494, 0.20954358603356416, 0.20336781618319033, 0.19828951093381497, 0.2023535584501135, 0.17104842049160984, 0.22657288326660863, 0.49677257283240006, 0.19205331030984674, 0.21593622962900916, 0.17802962846780268, 0.17599166306278713, 0.18991759463258095, 0.17981664460949198, 0.19332597687628772, 0.18062605761394956, 0.1871817393852565, 0.17898071534908833, 0.081101698123902, 0.08190550791438689, 0.06697182497956433, 0.09456141740615764, 0.07675598382543503, 0.07426091096956677, 0.09177038652652081, 0.08777104329836916, 0.06686778141745087]}, "mutation_prompt": null}
{"id": "04ff8929-1df7-400a-a6ef-01d025b9a116", "solution": "import numpy as np\n\nclass NovelMetaheuristicOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * self.dim\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.F = 0.5  # Mutation factor\n        self.CR = 0.9  # Crossover rate\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Mutation\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = self.population[a] + self.F * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, *self.bounds)\n                \n                # Crossover\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < self.CR\n                trial[crossover_points] = mutant[crossover_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Dynamic adaptation of F and CR\n                self.F = np.clip(self.F + 0.01 * np.random.randn(), 0.1, 1.0)\n                self.CR = np.clip(self.CR + 0.01 * np.random.randn(), 0.1, 1.0)\n\n        # Return the best solution found\n        best_index = np.argmin(self.fitness)\n        return self.population[best_index]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1", "name": "NovelMetaheuristicOptimizer", "description": "The algorithm combines Differential Evolution with dynamic parameter adaptation to efficiently explore and exploit the search space for diverse optimization landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0c4e0616-8ea1-44a3-a60e-e7139190218e", "metadata": {"aucs": [0.8045396462339381, 0.8346850660290176, 0.5827260764517073, 0.8037661574323112, 0.8123215670771295, 0.6045116322632507, 0.8071300071693338, 0.8464921108109535, 0.5687791260472059, 0.6310206764086086, 0.7136672608671841, 0.31878203083111434, 0.6078947721604601, 0.6276674053681497, 0.3174459743551308, 0.6300674125194464, 0.6474302747718192, 0.3392271779197099, 0.33277032590731526, 0.4281699585448472, 0.16761398413713047, 0.4397981980066161, 0.38719178874896876, 0.1494698972267139, 0.31685456870327566, 0.3831805868571321, 0.14615528414074963, 0.1616783630520131, 0.15458148330409716, 0.12175343398292793, 0.16439733980432325, 0.15422871817448525, 0.12834838694235007, 0.27286362083033444, 0.3445816825848539, 0.12075752246940152, 0.9280318318249153, 0.8965114014142248, 0.9561869588048221, 0.9135314744755676, 0.870176404502878, 0.9578092092231827, 0.9358890308384381, 0.8437462616862942, 0.9496546291717702, 0.2411365574404586, 0.3622856042781455, 0.22545232154869677, 0.29528612606512594, 0.36063413925463406, 0.22653080349017019, 0.2081843762506277, 0.3066791233903877, 0.23908949140142766, 0.30921843293210893, 0.32118424167375514, 0.25085800358174415, 0.3304006132698438, 0.7943459795832916, 0.2819751883734595, 0.616554963519703, 0.758503845288762, 0.28088741200179357, 0.1479567207705217, 0.2552284336327081, 0.1407533626602392, 0.17522952208504705, 0.17616441755340673, 0.13102490272088185, 0.19509072918258896, 0.19233060905704957, 0.12305998096710102, 0.1154168492092027, 0.1814028199739015, 0.15542431566743575, 0.15368526694266493, 0.17581917086531518, 0.14588979779316746, 0.14645038009430844, 0.1995888325090286, 0.1274776518969487, 9.999999999998899e-05, 0.05911244614241662, 9.999999999998899e-05, 9.999999999998899e-05, 0.12531568715277286, 0.011506841732858764, 0.02137044560315149, 0.04141488446130992, 0.006406769936503243, 0.11232037028708441, 0.19087087334983965, 0.1337671958022404, 0.045812763871053486, 0.15799750476632635, 0.16636398477408243, 0.13672877604220957, 0.2912179937304078, 0.15461069171960973, 0.002427026533231902, 0.0610841361196206, 9.999999999998899e-05, 9.999999999998899e-05, 0.03993267303341652, 9.999999999998899e-05, 0.03647084301634862, 0.11913437980726316, 9.999999999998899e-05, 0.11817677867813303, 0.15836183818160732, 0.09056645046878853, 0.11953167679202292, 0.22721245328623874, 0.12359852013949635, 0.1424477507737527, 0.16005503671544918, 0.08549666652746657, 0.4723631121635641, 0.5251241134716927, 0.47415948729714363, 0.4784405581779425, 0.5216528336798981, 0.41339223091933586, 0.4982199359033298, 0.5033868716477421, 0.403153392210685, 0.10570619634108003, 0.10475761153924412, 0.08629794868473595, 0.11091143004389215, 0.10234654506463647, 0.07833760483246965, 0.10101829835282827, 0.1119007511115262, 0.08002995645660427, 0.13996517109516515, 0.17124798045262035, 0.14717022718547867, 0.13219679162067566, 0.14672460700489065, 0.18005353526727996, 0.1461055050636172, 0.1498777836156291, 0.13902504261466309, 0.27225458106307665, 0.35294540728619406, 0.24516783231292594, 0.3150650324658377, 0.40171957644401424, 0.23748649770286745, 0.34398896776526977, 0.39319612486827293, 0.2629064524440562, 0.23755275571081036, 0.2549576969625045, 0.16689111430949122, 0.22142038307625467, 0.2761433342100832, 0.1755371047373374, 0.2194922819335281, 0.31501599658419677, 0.17870228553453094, 0.18130709621994623, 0.20737741429991585, 0.17374055864711646, 0.2444875258003112, 0.19625593624056814, 0.1726079180117942, 0.1972815278980976, 0.21245043733817714, 0.17350476808152415, 0.207311719926067, 0.24400530185779412, 0.19758628392026545, 0.2169742165765507, 0.20571220946903845, 0.1901122260656044, 0.2153956115965241, 0.40989539552528376, 0.18196126930828127, 0.16724471263602458, 0.18531270161837288, 0.2501934798040252, 0.23319913521263136, 0.1843104225938168, 0.15706798900867858, 0.31558743542027934, 0.18273291186665885, 0.17046787934620622, 0.24487376411861494, 0.20954358603356416, 0.20336781618319033, 0.19828951093381497, 0.2023535584501135, 0.17104842049160984, 0.22657288326660863, 0.49677257283240006, 0.19205331030984674, 0.21593622962900916, 0.17802962846780268, 0.17599166306278713, 0.18991759463258095, 0.17981664460949198, 0.19332597687628772, 0.18062605761394956, 0.1871817393852565, 0.17898071534908833, 0.081101698123902, 0.08190550791438689, 0.06697182497956433, 0.09456141740615764, 0.07675598382543503, 0.07426091096956677, 0.09177038652652081, 0.08777104329836916, 0.06686778141745087]}, "mutation_prompt": null}
{"id": "4dc5a48c-f6e6-4dda-a7c5-784249ed299e", "solution": "import numpy as np\n\nclass NovelMetaheuristicOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * self.dim\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.F = 0.5  # Mutation factor\n        self.CR = 0.9  # Crossover rate\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Mutation\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = self.population[a] + self.F * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, *self.bounds)\n                \n                # Crossover\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < self.CR\n                trial[crossover_points] = mutant[crossover_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Dynamic adaptation of F and CR\n                self.F = np.clip(self.F + 0.01 * np.random.randn(), 0.1, 1.0)\n                self.CR = np.clip(self.CR + 0.01 * np.random.randn(), 0.1, 1.0)\n\n        # Return the best solution found\n        best_index = np.argmin(self.fitness)\n        return self.population[best_index]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1", "name": "NovelMetaheuristicOptimizer", "description": "The algorithm combines Differential Evolution with dynamic parameter adaptation to efficiently explore and exploit the search space for diverse optimization landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0c4e0616-8ea1-44a3-a60e-e7139190218e", "metadata": {"aucs": [0.8045396462339381, 0.8346850660290176, 0.5827260764517073, 0.8037661574323112, 0.8123215670771295, 0.6045116322632507, 0.8071300071693338, 0.8464921108109535, 0.5687791260472059, 0.6310206764086086, 0.7136672608671841, 0.31878203083111434, 0.6078947721604601, 0.6276674053681497, 0.3174459743551308, 0.6300674125194464, 0.6474302747718192, 0.3392271779197099, 0.33277032590731526, 0.4281699585448472, 0.16761398413713047, 0.4397981980066161, 0.38719178874896876, 0.1494698972267139, 0.31685456870327566, 0.3831805868571321, 0.14615528414074963, 0.1616783630520131, 0.15458148330409716, 0.12175343398292793, 0.16439733980432325, 0.15422871817448525, 0.12834838694235007, 0.27286362083033444, 0.3445816825848539, 0.12075752246940152, 0.9280318318249153, 0.8965114014142248, 0.9561869588048221, 0.9135314744755676, 0.870176404502878, 0.9578092092231827, 0.9358890308384381, 0.8437462616862942, 0.9496546291717702, 0.2411365574404586, 0.3622856042781455, 0.22545232154869677, 0.29528612606512594, 0.36063413925463406, 0.22653080349017019, 0.2081843762506277, 0.3066791233903877, 0.23908949140142766, 0.30921843293210893, 0.32118424167375514, 0.25085800358174415, 0.3304006132698438, 0.7943459795832916, 0.2819751883734595, 0.616554963519703, 0.758503845288762, 0.28088741200179357, 0.1479567207705217, 0.2552284336327081, 0.1407533626602392, 0.17522952208504705, 0.17616441755340673, 0.13102490272088185, 0.19509072918258896, 0.19233060905704957, 0.12305998096710102, 0.1154168492092027, 0.1814028199739015, 0.15542431566743575, 0.15368526694266493, 0.17581917086531518, 0.14588979779316746, 0.14645038009430844, 0.1995888325090286, 0.1274776518969487, 9.999999999998899e-05, 0.05911244614241662, 9.999999999998899e-05, 9.999999999998899e-05, 0.12531568715277286, 0.011506841732858764, 0.02137044560315149, 0.04141488446130992, 0.006406769936503243, 0.11232037028708441, 0.19087087334983965, 0.1337671958022404, 0.045812763871053486, 0.15799750476632635, 0.16636398477408243, 0.13672877604220957, 0.2912179937304078, 0.15461069171960973, 0.002427026533231902, 0.0610841361196206, 9.999999999998899e-05, 9.999999999998899e-05, 0.03993267303341652, 9.999999999998899e-05, 0.03647084301634862, 0.11913437980726316, 9.999999999998899e-05, 0.11817677867813303, 0.15836183818160732, 0.09056645046878853, 0.11953167679202292, 0.22721245328623874, 0.12359852013949635, 0.1424477507737527, 0.16005503671544918, 0.08549666652746657, 0.4723631121635641, 0.5251241134716927, 0.47415948729714363, 0.4784405581779425, 0.5216528336798981, 0.41339223091933586, 0.4982199359033298, 0.5033868716477421, 0.403153392210685, 0.10570619634108003, 0.10475761153924412, 0.08629794868473595, 0.11091143004389215, 0.10234654506463647, 0.07833760483246965, 0.10101829835282827, 0.1119007511115262, 0.08002995645660427, 0.13996517109516515, 0.17124798045262035, 0.14717022718547867, 0.13219679162067566, 0.14672460700489065, 0.18005353526727996, 0.1461055050636172, 0.1498777836156291, 0.13902504261466309, 0.27225458106307665, 0.35294540728619406, 0.24516783231292594, 0.3150650324658377, 0.40171957644401424, 0.23748649770286745, 0.34398896776526977, 0.39319612486827293, 0.2629064524440562, 0.23755275571081036, 0.2549576969625045, 0.16689111430949122, 0.22142038307625467, 0.2761433342100832, 0.1755371047373374, 0.2194922819335281, 0.31501599658419677, 0.17870228553453094, 0.18130709621994623, 0.20737741429991585, 0.17374055864711646, 0.2444875258003112, 0.19625593624056814, 0.1726079180117942, 0.1972815278980976, 0.21245043733817714, 0.17350476808152415, 0.207311719926067, 0.24400530185779412, 0.19758628392026545, 0.2169742165765507, 0.20571220946903845, 0.1901122260656044, 0.2153956115965241, 0.40989539552528376, 0.18196126930828127, 0.16724471263602458, 0.18531270161837288, 0.2501934798040252, 0.23319913521263136, 0.1843104225938168, 0.15706798900867858, 0.31558743542027934, 0.18273291186665885, 0.17046787934620622, 0.24487376411861494, 0.20954358603356416, 0.20336781618319033, 0.19828951093381497, 0.2023535584501135, 0.17104842049160984, 0.22657288326660863, 0.49677257283240006, 0.19205331030984674, 0.21593622962900916, 0.17802962846780268, 0.17599166306278713, 0.18991759463258095, 0.17981664460949198, 0.19332597687628772, 0.18062605761394956, 0.1871817393852565, 0.17898071534908833, 0.081101698123902, 0.08190550791438689, 0.06697182497956433, 0.09456141740615764, 0.07675598382543503, 0.07426091096956677, 0.09177038652652081, 0.08777104329836916, 0.06686778141745087]}, "mutation_prompt": null}
{"id": "abf5d376-6b7d-4165-9212-bc0b38bae0d2", "solution": "import numpy as np\n\nclass NovelMetaheuristicOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * self.dim\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.F = 0.5  # Mutation factor\n        self.CR = 0.9  # Crossover rate\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Mutation\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = self.population[a] + self.F * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, *self.bounds)\n                \n                # Crossover\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < self.CR\n                trial[crossover_points] = mutant[crossover_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Dynamic adaptation of F and CR\n                self.F = np.clip(self.F + 0.01 * np.random.randn(), 0.1, 1.0)\n                self.CR = np.clip(self.CR + 0.01 * np.random.randn(), 0.1, 1.0)\n\n        # Return the best solution found\n        best_index = np.argmin(self.fitness)\n        return self.population[best_index]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1", "name": "NovelMetaheuristicOptimizer", "description": "The algorithm combines Differential Evolution with dynamic parameter adaptation to efficiently explore and exploit the search space for diverse optimization landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0c4e0616-8ea1-44a3-a60e-e7139190218e", "metadata": {"aucs": [0.8045396462339381, 0.8346850660290176, 0.5827260764517073, 0.8037661574323112, 0.8123215670771295, 0.6045116322632507, 0.8071300071693338, 0.8464921108109535, 0.5687791260472059, 0.6310206764086086, 0.7136672608671841, 0.31878203083111434, 0.6078947721604601, 0.6276674053681497, 0.3174459743551308, 0.6300674125194464, 0.6474302747718192, 0.3392271779197099, 0.33277032590731526, 0.4281699585448472, 0.16761398413713047, 0.4397981980066161, 0.38719178874896876, 0.1494698972267139, 0.31685456870327566, 0.3831805868571321, 0.14615528414074963, 0.1616783630520131, 0.15458148330409716, 0.12175343398292793, 0.16439733980432325, 0.15422871817448525, 0.12834838694235007, 0.27286362083033444, 0.3445816825848539, 0.12075752246940152, 0.9280318318249153, 0.8965114014142248, 0.9561869588048221, 0.9135314744755676, 0.870176404502878, 0.9578092092231827, 0.9358890308384381, 0.8437462616862942, 0.9496546291717702, 0.2411365574404586, 0.3622856042781455, 0.22545232154869677, 0.29528612606512594, 0.36063413925463406, 0.22653080349017019, 0.2081843762506277, 0.3066791233903877, 0.23908949140142766, 0.30921843293210893, 0.32118424167375514, 0.25085800358174415, 0.3304006132698438, 0.7943459795832916, 0.2819751883734595, 0.616554963519703, 0.758503845288762, 0.28088741200179357, 0.1479567207705217, 0.2552284336327081, 0.1407533626602392, 0.17522952208504705, 0.17616441755340673, 0.13102490272088185, 0.19509072918258896, 0.19233060905704957, 0.12305998096710102, 0.1154168492092027, 0.1814028199739015, 0.15542431566743575, 0.15368526694266493, 0.17581917086531518, 0.14588979779316746, 0.14645038009430844, 0.1995888325090286, 0.1274776518969487, 9.999999999998899e-05, 0.05911244614241662, 9.999999999998899e-05, 9.999999999998899e-05, 0.12531568715277286, 0.011506841732858764, 0.02137044560315149, 0.04141488446130992, 0.006406769936503243, 0.11232037028708441, 0.19087087334983965, 0.1337671958022404, 0.045812763871053486, 0.15799750476632635, 0.16636398477408243, 0.13672877604220957, 0.2912179937304078, 0.15461069171960973, 0.002427026533231902, 0.0610841361196206, 9.999999999998899e-05, 9.999999999998899e-05, 0.03993267303341652, 9.999999999998899e-05, 0.03647084301634862, 0.11913437980726316, 9.999999999998899e-05, 0.11817677867813303, 0.15836183818160732, 0.09056645046878853, 0.11953167679202292, 0.22721245328623874, 0.12359852013949635, 0.1424477507737527, 0.16005503671544918, 0.08549666652746657, 0.4723631121635641, 0.5251241134716927, 0.47415948729714363, 0.4784405581779425, 0.5216528336798981, 0.41339223091933586, 0.4982199359033298, 0.5033868716477421, 0.403153392210685, 0.10570619634108003, 0.10475761153924412, 0.08629794868473595, 0.11091143004389215, 0.10234654506463647, 0.07833760483246965, 0.10101829835282827, 0.1119007511115262, 0.08002995645660427, 0.13996517109516515, 0.17124798045262035, 0.14717022718547867, 0.13219679162067566, 0.14672460700489065, 0.18005353526727996, 0.1461055050636172, 0.1498777836156291, 0.13902504261466309, 0.27225458106307665, 0.35294540728619406, 0.24516783231292594, 0.3150650324658377, 0.40171957644401424, 0.23748649770286745, 0.34398896776526977, 0.39319612486827293, 0.2629064524440562, 0.23755275571081036, 0.2549576969625045, 0.16689111430949122, 0.22142038307625467, 0.2761433342100832, 0.1755371047373374, 0.2194922819335281, 0.31501599658419677, 0.17870228553453094, 0.18130709621994623, 0.20737741429991585, 0.17374055864711646, 0.2444875258003112, 0.19625593624056814, 0.1726079180117942, 0.1972815278980976, 0.21245043733817714, 0.17350476808152415, 0.207311719926067, 0.24400530185779412, 0.19758628392026545, 0.2169742165765507, 0.20571220946903845, 0.1901122260656044, 0.2153956115965241, 0.40989539552528376, 0.18196126930828127, 0.16724471263602458, 0.18531270161837288, 0.2501934798040252, 0.23319913521263136, 0.1843104225938168, 0.15706798900867858, 0.31558743542027934, 0.18273291186665885, 0.17046787934620622, 0.24487376411861494, 0.20954358603356416, 0.20336781618319033, 0.19828951093381497, 0.2023535584501135, 0.17104842049160984, 0.22657288326660863, 0.49677257283240006, 0.19205331030984674, 0.21593622962900916, 0.17802962846780268, 0.17599166306278713, 0.18991759463258095, 0.17981664460949198, 0.19332597687628772, 0.18062605761394956, 0.1871817393852565, 0.17898071534908833, 0.081101698123902, 0.08190550791438689, 0.06697182497956433, 0.09456141740615764, 0.07675598382543503, 0.07426091096956677, 0.09177038652652081, 0.08777104329836916, 0.06686778141745087]}, "mutation_prompt": null}
{"id": "6e57853c-edfb-4e68-a0b5-0fe36853ab07", "solution": "import numpy as np\n\nclass NovelMetaheuristicOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * self.dim\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.F = 0.5  # Mutation factor\n        self.CR = 0.9  # Crossover rate\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Mutation\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = self.population[a] + self.F * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, *self.bounds)\n                \n                # Crossover\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < self.CR\n                trial[crossover_points] = mutant[crossover_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Dynamic adaptation of F and CR\n                self.F = np.clip(self.F + 0.01 * np.random.randn(), 0.1, 1.0)\n                self.CR = np.clip(self.CR + 0.01 * np.random.randn(), 0.1, 1.0)\n\n        # Return the best solution found\n        best_index = np.argmin(self.fitness)\n        return self.population[best_index]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1", "name": "NovelMetaheuristicOptimizer", "description": "The algorithm combines Differential Evolution with dynamic parameter adaptation to efficiently explore and exploit the search space for diverse optimization landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0c4e0616-8ea1-44a3-a60e-e7139190218e", "metadata": {"aucs": [0.8045396462339381, 0.8346850660290176, 0.5827260764517073, 0.8037661574323112, 0.8123215670771295, 0.6045116322632507, 0.8071300071693338, 0.8464921108109535, 0.5687791260472059, 0.6310206764086086, 0.7136672608671841, 0.31878203083111434, 0.6078947721604601, 0.6276674053681497, 0.3174459743551308, 0.6300674125194464, 0.6474302747718192, 0.3392271779197099, 0.33277032590731526, 0.4281699585448472, 0.16761398413713047, 0.4397981980066161, 0.38719178874896876, 0.1494698972267139, 0.31685456870327566, 0.3831805868571321, 0.14615528414074963, 0.1616783630520131, 0.15458148330409716, 0.12175343398292793, 0.16439733980432325, 0.15422871817448525, 0.12834838694235007, 0.27286362083033444, 0.3445816825848539, 0.12075752246940152, 0.9280318318249153, 0.8965114014142248, 0.9561869588048221, 0.9135314744755676, 0.870176404502878, 0.9578092092231827, 0.9358890308384381, 0.8437462616862942, 0.9496546291717702, 0.2411365574404586, 0.3622856042781455, 0.22545232154869677, 0.29528612606512594, 0.36063413925463406, 0.22653080349017019, 0.2081843762506277, 0.3066791233903877, 0.23908949140142766, 0.30921843293210893, 0.32118424167375514, 0.25085800358174415, 0.3304006132698438, 0.7943459795832916, 0.2819751883734595, 0.616554963519703, 0.758503845288762, 0.28088741200179357, 0.1479567207705217, 0.2552284336327081, 0.1407533626602392, 0.17522952208504705, 0.17616441755340673, 0.13102490272088185, 0.19509072918258896, 0.19233060905704957, 0.12305998096710102, 0.1154168492092027, 0.1814028199739015, 0.15542431566743575, 0.15368526694266493, 0.17581917086531518, 0.14588979779316746, 0.14645038009430844, 0.1995888325090286, 0.1274776518969487, 9.999999999998899e-05, 0.05911244614241662, 9.999999999998899e-05, 9.999999999998899e-05, 0.12531568715277286, 0.011506841732858764, 0.02137044560315149, 0.04141488446130992, 0.006406769936503243, 0.11232037028708441, 0.19087087334983965, 0.1337671958022404, 0.045812763871053486, 0.15799750476632635, 0.16636398477408243, 0.13672877604220957, 0.2912179937304078, 0.15461069171960973, 0.002427026533231902, 0.0610841361196206, 9.999999999998899e-05, 9.999999999998899e-05, 0.03993267303341652, 9.999999999998899e-05, 0.03647084301634862, 0.11913437980726316, 9.999999999998899e-05, 0.11817677867813303, 0.15836183818160732, 0.09056645046878853, 0.11953167679202292, 0.22721245328623874, 0.12359852013949635, 0.1424477507737527, 0.16005503671544918, 0.08549666652746657, 0.4723631121635641, 0.5251241134716927, 0.47415948729714363, 0.4784405581779425, 0.5216528336798981, 0.41339223091933586, 0.4982199359033298, 0.5033868716477421, 0.403153392210685, 0.10570619634108003, 0.10475761153924412, 0.08629794868473595, 0.11091143004389215, 0.10234654506463647, 0.07833760483246965, 0.10101829835282827, 0.1119007511115262, 0.08002995645660427, 0.13996517109516515, 0.17124798045262035, 0.14717022718547867, 0.13219679162067566, 0.14672460700489065, 0.18005353526727996, 0.1461055050636172, 0.1498777836156291, 0.13902504261466309, 0.27225458106307665, 0.35294540728619406, 0.24516783231292594, 0.3150650324658377, 0.40171957644401424, 0.23748649770286745, 0.34398896776526977, 0.39319612486827293, 0.2629064524440562, 0.23755275571081036, 0.2549576969625045, 0.16689111430949122, 0.22142038307625467, 0.2761433342100832, 0.1755371047373374, 0.2194922819335281, 0.31501599658419677, 0.17870228553453094, 0.18130709621994623, 0.20737741429991585, 0.17374055864711646, 0.2444875258003112, 0.19625593624056814, 0.1726079180117942, 0.1972815278980976, 0.21245043733817714, 0.17350476808152415, 0.207311719926067, 0.24400530185779412, 0.19758628392026545, 0.2169742165765507, 0.20571220946903845, 0.1901122260656044, 0.2153956115965241, 0.40989539552528376, 0.18196126930828127, 0.16724471263602458, 0.18531270161837288, 0.2501934798040252, 0.23319913521263136, 0.1843104225938168, 0.15706798900867858, 0.31558743542027934, 0.18273291186665885, 0.17046787934620622, 0.24487376411861494, 0.20954358603356416, 0.20336781618319033, 0.19828951093381497, 0.2023535584501135, 0.17104842049160984, 0.22657288326660863, 0.49677257283240006, 0.19205331030984674, 0.21593622962900916, 0.17802962846780268, 0.17599166306278713, 0.18991759463258095, 0.17981664460949198, 0.19332597687628772, 0.18062605761394956, 0.1871817393852565, 0.17898071534908833, 0.081101698123902, 0.08190550791438689, 0.06697182497956433, 0.09456141740615764, 0.07675598382543503, 0.07426091096956677, 0.09177038652652081, 0.08777104329836916, 0.06686778141745087]}, "mutation_prompt": null}
{"id": "8db80ae9-3031-45ef-84a9-7aa9669a7f21", "solution": "import numpy as np\n\nclass NovelMetaheuristicOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * self.dim\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.F = 0.5  # Mutation factor\n        self.CR = 0.9  # Crossover rate\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Mutation\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = self.population[a] + self.F * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, *self.bounds)\n                \n                # Crossover\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < self.CR\n                trial[crossover_points] = mutant[crossover_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Dynamic adaptation of F and CR\n                self.F = np.clip(self.F + 0.01 * np.random.randn(), 0.1, 1.0)\n                self.CR = np.clip(self.CR + 0.01 * np.random.randn(), 0.1, 1.0)\n\n        # Return the best solution found\n        best_index = np.argmin(self.fitness)\n        return self.population[best_index]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1", "name": "NovelMetaheuristicOptimizer", "description": "The algorithm combines Differential Evolution with dynamic parameter adaptation to efficiently explore and exploit the search space for diverse optimization landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0c4e0616-8ea1-44a3-a60e-e7139190218e", "metadata": {"aucs": [0.8045396462339381, 0.8346850660290176, 0.5827260764517073, 0.8037661574323112, 0.8123215670771295, 0.6045116322632507, 0.8071300071693338, 0.8464921108109535, 0.5687791260472059, 0.6310206764086086, 0.7136672608671841, 0.31878203083111434, 0.6078947721604601, 0.6276674053681497, 0.3174459743551308, 0.6300674125194464, 0.6474302747718192, 0.3392271779197099, 0.33277032590731526, 0.4281699585448472, 0.16761398413713047, 0.4397981980066161, 0.38719178874896876, 0.1494698972267139, 0.31685456870327566, 0.3831805868571321, 0.14615528414074963, 0.1616783630520131, 0.15458148330409716, 0.12175343398292793, 0.16439733980432325, 0.15422871817448525, 0.12834838694235007, 0.27286362083033444, 0.3445816825848539, 0.12075752246940152, 0.9280318318249153, 0.8965114014142248, 0.9561869588048221, 0.9135314744755676, 0.870176404502878, 0.9578092092231827, 0.9358890308384381, 0.8437462616862942, 0.9496546291717702, 0.2411365574404586, 0.3622856042781455, 0.22545232154869677, 0.29528612606512594, 0.36063413925463406, 0.22653080349017019, 0.2081843762506277, 0.3066791233903877, 0.23908949140142766, 0.30921843293210893, 0.32118424167375514, 0.25085800358174415, 0.3304006132698438, 0.7943459795832916, 0.2819751883734595, 0.616554963519703, 0.758503845288762, 0.28088741200179357, 0.1479567207705217, 0.2552284336327081, 0.1407533626602392, 0.17522952208504705, 0.17616441755340673, 0.13102490272088185, 0.19509072918258896, 0.19233060905704957, 0.12305998096710102, 0.1154168492092027, 0.1814028199739015, 0.15542431566743575, 0.15368526694266493, 0.17581917086531518, 0.14588979779316746, 0.14645038009430844, 0.1995888325090286, 0.1274776518969487, 9.999999999998899e-05, 0.05911244614241662, 9.999999999998899e-05, 9.999999999998899e-05, 0.12531568715277286, 0.011506841732858764, 0.02137044560315149, 0.04141488446130992, 0.006406769936503243, 0.11232037028708441, 0.19087087334983965, 0.1337671958022404, 0.045812763871053486, 0.15799750476632635, 0.16636398477408243, 0.13672877604220957, 0.2912179937304078, 0.15461069171960973, 0.002427026533231902, 0.0610841361196206, 9.999999999998899e-05, 9.999999999998899e-05, 0.03993267303341652, 9.999999999998899e-05, 0.03647084301634862, 0.11913437980726316, 9.999999999998899e-05, 0.11817677867813303, 0.15836183818160732, 0.09056645046878853, 0.11953167679202292, 0.22721245328623874, 0.12359852013949635, 0.1424477507737527, 0.16005503671544918, 0.08549666652746657, 0.4723631121635641, 0.5251241134716927, 0.47415948729714363, 0.4784405581779425, 0.5216528336798981, 0.41339223091933586, 0.4982199359033298, 0.5033868716477421, 0.403153392210685, 0.10570619634108003, 0.10475761153924412, 0.08629794868473595, 0.11091143004389215, 0.10234654506463647, 0.07833760483246965, 0.10101829835282827, 0.1119007511115262, 0.08002995645660427, 0.13996517109516515, 0.17124798045262035, 0.14717022718547867, 0.13219679162067566, 0.14672460700489065, 0.18005353526727996, 0.1461055050636172, 0.1498777836156291, 0.13902504261466309, 0.27225458106307665, 0.35294540728619406, 0.24516783231292594, 0.3150650324658377, 0.40171957644401424, 0.23748649770286745, 0.34398896776526977, 0.39319612486827293, 0.2629064524440562, 0.23755275571081036, 0.2549576969625045, 0.16689111430949122, 0.22142038307625467, 0.2761433342100832, 0.1755371047373374, 0.2194922819335281, 0.31501599658419677, 0.17870228553453094, 0.18130709621994623, 0.20737741429991585, 0.17374055864711646, 0.2444875258003112, 0.19625593624056814, 0.1726079180117942, 0.1972815278980976, 0.21245043733817714, 0.17350476808152415, 0.207311719926067, 0.24400530185779412, 0.19758628392026545, 0.2169742165765507, 0.20571220946903845, 0.1901122260656044, 0.2153956115965241, 0.40989539552528376, 0.18196126930828127, 0.16724471263602458, 0.18531270161837288, 0.2501934798040252, 0.23319913521263136, 0.1843104225938168, 0.15706798900867858, 0.31558743542027934, 0.18273291186665885, 0.17046787934620622, 0.24487376411861494, 0.20954358603356416, 0.20336781618319033, 0.19828951093381497, 0.2023535584501135, 0.17104842049160984, 0.22657288326660863, 0.49677257283240006, 0.19205331030984674, 0.21593622962900916, 0.17802962846780268, 0.17599166306278713, 0.18991759463258095, 0.17981664460949198, 0.19332597687628772, 0.18062605761394956, 0.1871817393852565, 0.17898071534908833, 0.081101698123902, 0.08190550791438689, 0.06697182497956433, 0.09456141740615764, 0.07675598382543503, 0.07426091096956677, 0.09177038652652081, 0.08777104329836916, 0.06686778141745087]}, "mutation_prompt": null}
{"id": "885a310d-8d91-48bb-9bbe-0853703773da", "solution": "import numpy as np\n\nclass NovelMetaheuristicOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * self.dim\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.F = 0.5  # Mutation factor\n        self.CR = 0.9  # Crossover rate\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Mutation\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = self.population[a] + self.F * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, *self.bounds)\n                \n                # Crossover\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < self.CR\n                trial[crossover_points] = mutant[crossover_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Dynamic adaptation of F and CR\n                self.F = np.clip(self.F + 0.01 * np.random.randn(), 0.1, 1.0)\n                self.CR = np.clip(self.CR + 0.01 * np.random.randn(), 0.1, 1.0)\n\n        # Return the best solution found\n        best_index = np.argmin(self.fitness)\n        return self.population[best_index]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1", "name": "NovelMetaheuristicOptimizer", "description": "The algorithm combines Differential Evolution with dynamic parameter adaptation to efficiently explore and exploit the search space for diverse optimization landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0c4e0616-8ea1-44a3-a60e-e7139190218e", "metadata": {"aucs": [0.8045396462339381, 0.8346850660290176, 0.5827260764517073, 0.8037661574323112, 0.8123215670771295, 0.6045116322632507, 0.8071300071693338, 0.8464921108109535, 0.5687791260472059, 0.6310206764086086, 0.7136672608671841, 0.31878203083111434, 0.6078947721604601, 0.6276674053681497, 0.3174459743551308, 0.6300674125194464, 0.6474302747718192, 0.3392271779197099, 0.33277032590731526, 0.4281699585448472, 0.16761398413713047, 0.4397981980066161, 0.38719178874896876, 0.1494698972267139, 0.31685456870327566, 0.3831805868571321, 0.14615528414074963, 0.1616783630520131, 0.15458148330409716, 0.12175343398292793, 0.16439733980432325, 0.15422871817448525, 0.12834838694235007, 0.27286362083033444, 0.3445816825848539, 0.12075752246940152, 0.9280318318249153, 0.8965114014142248, 0.9561869588048221, 0.9135314744755676, 0.870176404502878, 0.9578092092231827, 0.9358890308384381, 0.8437462616862942, 0.9496546291717702, 0.2411365574404586, 0.3622856042781455, 0.22545232154869677, 0.29528612606512594, 0.36063413925463406, 0.22653080349017019, 0.2081843762506277, 0.3066791233903877, 0.23908949140142766, 0.30921843293210893, 0.32118424167375514, 0.25085800358174415, 0.3304006132698438, 0.7943459795832916, 0.2819751883734595, 0.616554963519703, 0.758503845288762, 0.28088741200179357, 0.1479567207705217, 0.2552284336327081, 0.1407533626602392, 0.17522952208504705, 0.17616441755340673, 0.13102490272088185, 0.19509072918258896, 0.19233060905704957, 0.12305998096710102, 0.1154168492092027, 0.1814028199739015, 0.15542431566743575, 0.15368526694266493, 0.17581917086531518, 0.14588979779316746, 0.14645038009430844, 0.1995888325090286, 0.1274776518969487, 9.999999999998899e-05, 0.05911244614241662, 9.999999999998899e-05, 9.999999999998899e-05, 0.12531568715277286, 0.011506841732858764, 0.02137044560315149, 0.04141488446130992, 0.006406769936503243, 0.11232037028708441, 0.19087087334983965, 0.1337671958022404, 0.045812763871053486, 0.15799750476632635, 0.16636398477408243, 0.13672877604220957, 0.2912179937304078, 0.15461069171960973, 0.002427026533231902, 0.0610841361196206, 9.999999999998899e-05, 9.999999999998899e-05, 0.03993267303341652, 9.999999999998899e-05, 0.03647084301634862, 0.11913437980726316, 9.999999999998899e-05, 0.11817677867813303, 0.15836183818160732, 0.09056645046878853, 0.11953167679202292, 0.22721245328623874, 0.12359852013949635, 0.1424477507737527, 0.16005503671544918, 0.08549666652746657, 0.4723631121635641, 0.5251241134716927, 0.47415948729714363, 0.4784405581779425, 0.5216528336798981, 0.41339223091933586, 0.4982199359033298, 0.5033868716477421, 0.403153392210685, 0.10570619634108003, 0.10475761153924412, 0.08629794868473595, 0.11091143004389215, 0.10234654506463647, 0.07833760483246965, 0.10101829835282827, 0.1119007511115262, 0.08002995645660427, 0.13996517109516515, 0.17124798045262035, 0.14717022718547867, 0.13219679162067566, 0.14672460700489065, 0.18005353526727996, 0.1461055050636172, 0.1498777836156291, 0.13902504261466309, 0.27225458106307665, 0.35294540728619406, 0.24516783231292594, 0.3150650324658377, 0.40171957644401424, 0.23748649770286745, 0.34398896776526977, 0.39319612486827293, 0.2629064524440562, 0.23755275571081036, 0.2549576969625045, 0.16689111430949122, 0.22142038307625467, 0.2761433342100832, 0.1755371047373374, 0.2194922819335281, 0.31501599658419677, 0.17870228553453094, 0.18130709621994623, 0.20737741429991585, 0.17374055864711646, 0.2444875258003112, 0.19625593624056814, 0.1726079180117942, 0.1972815278980976, 0.21245043733817714, 0.17350476808152415, 0.207311719926067, 0.24400530185779412, 0.19758628392026545, 0.2169742165765507, 0.20571220946903845, 0.1901122260656044, 0.2153956115965241, 0.40989539552528376, 0.18196126930828127, 0.16724471263602458, 0.18531270161837288, 0.2501934798040252, 0.23319913521263136, 0.1843104225938168, 0.15706798900867858, 0.31558743542027934, 0.18273291186665885, 0.17046787934620622, 0.24487376411861494, 0.20954358603356416, 0.20336781618319033, 0.19828951093381497, 0.2023535584501135, 0.17104842049160984, 0.22657288326660863, 0.49677257283240006, 0.19205331030984674, 0.21593622962900916, 0.17802962846780268, 0.17599166306278713, 0.18991759463258095, 0.17981664460949198, 0.19332597687628772, 0.18062605761394956, 0.1871817393852565, 0.17898071534908833, 0.081101698123902, 0.08190550791438689, 0.06697182497956433, 0.09456141740615764, 0.07675598382543503, 0.07426091096956677, 0.09177038652652081, 0.08777104329836916, 0.06686778141745087]}, "mutation_prompt": null}
{"id": "daed1d99-ba83-4451-a289-916f036deaff", "solution": "import numpy as np\n\nclass NovelMetaheuristicOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * self.dim\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.F = 0.5  # Mutation factor\n        self.CR = 0.9  # Crossover rate\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Mutation\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = self.population[a] + self.F * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, *self.bounds)\n                \n                # Crossover\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < self.CR\n                trial[crossover_points] = mutant[crossover_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Dynamic adaptation of F and CR\n                self.F = np.clip(self.F + 0.01 * np.random.randn(), 0.1, 1.0)\n                self.CR = np.clip(self.CR + 0.01 * np.random.randn(), 0.1, 1.0)\n\n        # Return the best solution found\n        best_index = np.argmin(self.fitness)\n        return self.population[best_index]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1", "name": "NovelMetaheuristicOptimizer", "description": "The algorithm combines Differential Evolution with dynamic parameter adaptation to efficiently explore and exploit the search space for diverse optimization landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0c4e0616-8ea1-44a3-a60e-e7139190218e", "metadata": {"aucs": [0.8045396462339381, 0.8346850660290176, 0.5827260764517073, 0.8037661574323112, 0.8123215670771295, 0.6045116322632507, 0.8071300071693338, 0.8464921108109535, 0.5687791260472059, 0.6310206764086086, 0.7136672608671841, 0.31878203083111434, 0.6078947721604601, 0.6276674053681497, 0.3174459743551308, 0.6300674125194464, 0.6474302747718192, 0.3392271779197099, 0.33277032590731526, 0.4281699585448472, 0.16761398413713047, 0.4397981980066161, 0.38719178874896876, 0.1494698972267139, 0.31685456870327566, 0.3831805868571321, 0.14615528414074963, 0.1616783630520131, 0.15458148330409716, 0.12175343398292793, 0.16439733980432325, 0.15422871817448525, 0.12834838694235007, 0.27286362083033444, 0.3445816825848539, 0.12075752246940152, 0.9280318318249153, 0.8965114014142248, 0.9561869588048221, 0.9135314744755676, 0.870176404502878, 0.9578092092231827, 0.9358890308384381, 0.8437462616862942, 0.9496546291717702, 0.2411365574404586, 0.3622856042781455, 0.22545232154869677, 0.29528612606512594, 0.36063413925463406, 0.22653080349017019, 0.2081843762506277, 0.3066791233903877, 0.23908949140142766, 0.30921843293210893, 0.32118424167375514, 0.25085800358174415, 0.3304006132698438, 0.7943459795832916, 0.2819751883734595, 0.616554963519703, 0.758503845288762, 0.28088741200179357, 0.1479567207705217, 0.2552284336327081, 0.1407533626602392, 0.17522952208504705, 0.17616441755340673, 0.13102490272088185, 0.19509072918258896, 0.19233060905704957, 0.12305998096710102, 0.1154168492092027, 0.1814028199739015, 0.15542431566743575, 0.15368526694266493, 0.17581917086531518, 0.14588979779316746, 0.14645038009430844, 0.1995888325090286, 0.1274776518969487, 9.999999999998899e-05, 0.05911244614241662, 9.999999999998899e-05, 9.999999999998899e-05, 0.12531568715277286, 0.011506841732858764, 0.02137044560315149, 0.04141488446130992, 0.006406769936503243, 0.11232037028708441, 0.19087087334983965, 0.1337671958022404, 0.045812763871053486, 0.15799750476632635, 0.16636398477408243, 0.13672877604220957, 0.2912179937304078, 0.15461069171960973, 0.002427026533231902, 0.0610841361196206, 9.999999999998899e-05, 9.999999999998899e-05, 0.03993267303341652, 9.999999999998899e-05, 0.03647084301634862, 0.11913437980726316, 9.999999999998899e-05, 0.11817677867813303, 0.15836183818160732, 0.09056645046878853, 0.11953167679202292, 0.22721245328623874, 0.12359852013949635, 0.1424477507737527, 0.16005503671544918, 0.08549666652746657, 0.4723631121635641, 0.5251241134716927, 0.47415948729714363, 0.4784405581779425, 0.5216528336798981, 0.41339223091933586, 0.4982199359033298, 0.5033868716477421, 0.403153392210685, 0.10570619634108003, 0.10475761153924412, 0.08629794868473595, 0.11091143004389215, 0.10234654506463647, 0.07833760483246965, 0.10101829835282827, 0.1119007511115262, 0.08002995645660427, 0.13996517109516515, 0.17124798045262035, 0.14717022718547867, 0.13219679162067566, 0.14672460700489065, 0.18005353526727996, 0.1461055050636172, 0.1498777836156291, 0.13902504261466309, 0.27225458106307665, 0.35294540728619406, 0.24516783231292594, 0.3150650324658377, 0.40171957644401424, 0.23748649770286745, 0.34398896776526977, 0.39319612486827293, 0.2629064524440562, 0.23755275571081036, 0.2549576969625045, 0.16689111430949122, 0.22142038307625467, 0.2761433342100832, 0.1755371047373374, 0.2194922819335281, 0.31501599658419677, 0.17870228553453094, 0.18130709621994623, 0.20737741429991585, 0.17374055864711646, 0.2444875258003112, 0.19625593624056814, 0.1726079180117942, 0.1972815278980976, 0.21245043733817714, 0.17350476808152415, 0.207311719926067, 0.24400530185779412, 0.19758628392026545, 0.2169742165765507, 0.20571220946903845, 0.1901122260656044, 0.2153956115965241, 0.40989539552528376, 0.18196126930828127, 0.16724471263602458, 0.18531270161837288, 0.2501934798040252, 0.23319913521263136, 0.1843104225938168, 0.15706798900867858, 0.31558743542027934, 0.18273291186665885, 0.17046787934620622, 0.24487376411861494, 0.20954358603356416, 0.20336781618319033, 0.19828951093381497, 0.2023535584501135, 0.17104842049160984, 0.22657288326660863, 0.49677257283240006, 0.19205331030984674, 0.21593622962900916, 0.17802962846780268, 0.17599166306278713, 0.18991759463258095, 0.17981664460949198, 0.19332597687628772, 0.18062605761394956, 0.1871817393852565, 0.17898071534908833, 0.081101698123902, 0.08190550791438689, 0.06697182497956433, 0.09456141740615764, 0.07675598382543503, 0.07426091096956677, 0.09177038652652081, 0.08777104329836916, 0.06686778141745087]}, "mutation_prompt": null}
{"id": "71a23ab4-5c57-42f9-838f-f249b7451062", "solution": "import numpy as np\n\nclass NovelMetaheuristicOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * self.dim\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.F = 0.5  # Mutation factor\n        self.CR = 0.9  # Crossover rate\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Mutation\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = self.population[a] + self.F * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, *self.bounds)\n                \n                # Crossover\n                trial = np.copy(self.population[i])\n                crossover_points = np.random.rand(self.dim) < self.CR\n                trial[crossover_points] = mutant[crossover_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Dynamic adaptation of F and CR\n                self.F = np.clip(self.F + 0.01 * np.random.randn(), 0.1, 1.0)\n                self.CR = np.clip(self.CR + 0.01 * np.random.randn(), 0.1, 1.0)\n\n        # Return the best solution found\n        best_index = np.argmin(self.fitness)\n        return self.population[best_index]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1", "name": "NovelMetaheuristicOptimizer", "description": "The algorithm combines Differential Evolution with dynamic parameter adaptation to efficiently explore and exploit the search space for diverse optimization landscapes.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0c4e0616-8ea1-44a3-a60e-e7139190218e", "metadata": {"aucs": [0.8045396462339381, 0.8346850660290176, 0.5827260764517073, 0.8037661574323112, 0.8123215670771295, 0.6045116322632507, 0.8071300071693338, 0.8464921108109535, 0.5687791260472059, 0.6310206764086086, 0.7136672608671841, 0.31878203083111434, 0.6078947721604601, 0.6276674053681497, 0.3174459743551308, 0.6300674125194464, 0.6474302747718192, 0.3392271779197099, 0.33277032590731526, 0.4281699585448472, 0.16761398413713047, 0.4397981980066161, 0.38719178874896876, 0.1494698972267139, 0.31685456870327566, 0.3831805868571321, 0.14615528414074963, 0.1616783630520131, 0.15458148330409716, 0.12175343398292793, 0.16439733980432325, 0.15422871817448525, 0.12834838694235007, 0.27286362083033444, 0.3445816825848539, 0.12075752246940152, 0.9280318318249153, 0.8965114014142248, 0.9561869588048221, 0.9135314744755676, 0.870176404502878, 0.9578092092231827, 0.9358890308384381, 0.8437462616862942, 0.9496546291717702, 0.2411365574404586, 0.3622856042781455, 0.22545232154869677, 0.29528612606512594, 0.36063413925463406, 0.22653080349017019, 0.2081843762506277, 0.3066791233903877, 0.23908949140142766, 0.30921843293210893, 0.32118424167375514, 0.25085800358174415, 0.3304006132698438, 0.7943459795832916, 0.2819751883734595, 0.616554963519703, 0.758503845288762, 0.28088741200179357, 0.1479567207705217, 0.2552284336327081, 0.1407533626602392, 0.17522952208504705, 0.17616441755340673, 0.13102490272088185, 0.19509072918258896, 0.19233060905704957, 0.12305998096710102, 0.1154168492092027, 0.1814028199739015, 0.15542431566743575, 0.15368526694266493, 0.17581917086531518, 0.14588979779316746, 0.14645038009430844, 0.1995888325090286, 0.1274776518969487, 9.999999999998899e-05, 0.05911244614241662, 9.999999999998899e-05, 9.999999999998899e-05, 0.12531568715277286, 0.011506841732858764, 0.02137044560315149, 0.04141488446130992, 0.006406769936503243, 0.11232037028708441, 0.19087087334983965, 0.1337671958022404, 0.045812763871053486, 0.15799750476632635, 0.16636398477408243, 0.13672877604220957, 0.2912179937304078, 0.15461069171960973, 0.002427026533231902, 0.0610841361196206, 9.999999999998899e-05, 9.999999999998899e-05, 0.03993267303341652, 9.999999999998899e-05, 0.03647084301634862, 0.11913437980726316, 9.999999999998899e-05, 0.11817677867813303, 0.15836183818160732, 0.09056645046878853, 0.11953167679202292, 0.22721245328623874, 0.12359852013949635, 0.1424477507737527, 0.16005503671544918, 0.08549666652746657, 0.4723631121635641, 0.5251241134716927, 0.47415948729714363, 0.4784405581779425, 0.5216528336798981, 0.41339223091933586, 0.4982199359033298, 0.5033868716477421, 0.403153392210685, 0.10570619634108003, 0.10475761153924412, 0.08629794868473595, 0.11091143004389215, 0.10234654506463647, 0.07833760483246965, 0.10101829835282827, 0.1119007511115262, 0.08002995645660427, 0.13996517109516515, 0.17124798045262035, 0.14717022718547867, 0.13219679162067566, 0.14672460700489065, 0.18005353526727996, 0.1461055050636172, 0.1498777836156291, 0.13902504261466309, 0.27225458106307665, 0.35294540728619406, 0.24516783231292594, 0.3150650324658377, 0.40171957644401424, 0.23748649770286745, 0.34398896776526977, 0.39319612486827293, 0.2629064524440562, 0.23755275571081036, 0.2549576969625045, 0.16689111430949122, 0.22142038307625467, 0.2761433342100832, 0.1755371047373374, 0.2194922819335281, 0.31501599658419677, 0.17870228553453094, 0.18130709621994623, 0.20737741429991585, 0.17374055864711646, 0.2444875258003112, 0.19625593624056814, 0.1726079180117942, 0.1972815278980976, 0.21245043733817714, 0.17350476808152415, 0.207311719926067, 0.24400530185779412, 0.19758628392026545, 0.2169742165765507, 0.20571220946903845, 0.1901122260656044, 0.2153956115965241, 0.40989539552528376, 0.18196126930828127, 0.16724471263602458, 0.18531270161837288, 0.2501934798040252, 0.23319913521263136, 0.1843104225938168, 0.15706798900867858, 0.31558743542027934, 0.18273291186665885, 0.17046787934620622, 0.24487376411861494, 0.20954358603356416, 0.20336781618319033, 0.19828951093381497, 0.2023535584501135, 0.17104842049160984, 0.22657288326660863, 0.49677257283240006, 0.19205331030984674, 0.21593622962900916, 0.17802962846780268, 0.17599166306278713, 0.18991759463258095, 0.17981664460949198, 0.19332597687628772, 0.18062605761394956, 0.1871817393852565, 0.17898071534908833, 0.081101698123902, 0.08190550791438689, 0.06697182497956433, 0.09456141740615764, 0.07675598382543503, 0.07426091096956677, 0.09177038652652081, 0.08777104329836916, 0.06686778141745087]}, "mutation_prompt": null}
{"id": "d1c5e78f-e972-4a45-af62-4bd489944761", "solution": "import numpy as np\n\nclass EfficientMetaheuristicOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 8 * self.dim  # Reduced population size for efficiency\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.F = 0.7  # Adjusted mutation factor for better exploration\n        self.CR = 0.8  # Adjusted crossover rate\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Mutation with enhanced selection strategy\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = self.population[a] + self.F * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, *self.bounds)\n                \n                # Crossover with adaptive strategy\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Adaptive F and CR based on fitness improvement\n                if trial_fitness < self.fitness.mean():\n                    self.F = np.clip(self.F + 0.02 * np.random.randn(), 0.1, 1.0)\n                    self.CR = np.clip(self.CR + 0.02 * np.random.randn(), 0.1, 1.0)\n\n        # Return the best solution found\n        return self.population[np.argmin(self.fitness)]\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1", "name": "EfficientMetaheuristicOptimizer", "description": "The algorithm integrates a streamlined Differential Evolution approach with adaptive mutation and crossover strategies, emphasizing computational efficiency.", "configspace": "", "generation": 27, "fitness": 0.29636340310243575, "feedback": "The algorithm EfficientMetaheuristicOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.24.", "error": "", "parent_id": "0c4e0616-8ea1-44a3-a60e-e7139190218e", "metadata": {"aucs": [0.81211419717852, 0.7016910520983629, 0.855883328833489, 0.8444432324542478, 0.8342764849153691, 0.7714784278026571, 0.7241754841748812, 0.8726083398941485, 0.6981033194990621, 0.6651968510212485, 0.4709402210351141, 0.5982312701314738, 0.5233690061547305, 0.6322965696442768, 0.6243862997685712, 0.6392955381601451, 0.5079139875277365, 0.48694982290752153, 0.10507220981398735, 0.12323619132532548, 0.1729410263655662, 0.14622088341619055, 0.4149252942317212, 0.23160637731447198, 0.3271516346311357, 0.612970216118165, 0.27169795299643473, 0.35712180939334237, 0.28799692635017315, 0.1976694779056627, 0.12380970845917805, 0.1349652813514367, 0.11115778359792183, 0.23120346878125497, 0.09007584921570033, 0.09012248965308922, 0.9569697402256994, 0.9618720893920147, 0.922108753805051, 0.929374640753633, 0.9672771015190199, 0.9818524003078906, 0.9594777341865339, 0.954743641172043, 0.9443484257533029, 0.19299721732097452, 0.3042638265145282, 0.2861910034217685, 0.31708950237966005, 0.271275667042815, 0.3090746645391964, 0.31822156029916204, 0.29688269747143026, 0.30090173728636604, 0.21393776039083034, 0.30257052368689985, 0.25308228487562756, 0.37364273718243357, 0.7574416253975267, 0.6920634240134911, 0.5684400387314834, 0.5385324746636373, 0.7479256568642845, 0.1725514318879917, 0.1241526836236766, 0.14834135004832683, 0.17111645956379906, 0.1538790942485745, 0.164929670959871, 0.20437194274641557, 0.2700501888585297, 0.2184971017013232, 0.11619099419798529, 0.15475476873256722, 0.1851175706671735, 0.17286010318998835, 0.2098434097009254, 0.2120685520040898, 0.169677192884647, 0.18647534332200721, 0.19348927213058942, 0.07978366022524319, 0.1275021555761836, 0.17169899349924378, 0.20765321189062147, 0.3372692677051071, 9.999999999998899e-05, 9.999999999998899e-05, 0.08634474800203085, 9.999999999998899e-05, 0.12092047144885798, 0.10338285952190018, 0.12995494118003625, 0.08063049350674079, 0.19331713086176494, 0.054029136201090844, 0.16020414468380695, 0.19274362142914803, 0.16750861323486022, 9.999999999998899e-05, 0.14371546054545636, 0.1590352273455703, 0.04274240465526402, 0.006846040646732443, 0.0578334625927186, 0.015930178047336985, 0.06961223787789583, 0.1249699174973623, 0.11043084387449176, 0.2742720861468828, 0.10428959929597781, 0.10534894677945716, 0.12033306214535244, 0.23294985364151222, 0.10330439972612437, 0.1293515764225167, 0.14774119564264654, 0.4791072796475908, 0.5107294274901542, 0.44887985497586946, 0.5680804226180922, 0.46789995485162417, 0.6855184583523567, 0.5033875972848336, 0.458437159975679, 0.5188110538681476, 0.09993338508553384, 0.09930917861612687, 0.09932328127297296, 0.11153502074991717, 0.0853290416685688, 0.0945192912761953, 0.129496476912347, 0.1599336330146025, 0.11945489520391717, 0.12831371340292608, 0.151726609132522, 0.1438011291978044, 0.1415462965521258, 0.14328164579510871, 0.12061598855384947, 0.1940421683849327, 0.23323399437721348, 0.13315558180537468, 0.42472553009779945, 0.29997296171521437, 0.2946905530254068, 0.25095292514475553, 0.2697732111975112, 0.378784024656302, 0.43933198457262257, 0.42486936134498987, 0.2545595614682067, 0.2064032048875334, 0.21407284741666377, 0.24759663615285832, 0.15321515292901022, 0.20297994455829393, 0.2804682107688159, 0.1655769325392834, 0.2554530459505937, 0.38907313779329966, 0.17912839311162354, 0.21240628945840523, 0.20272216473908133, 0.1952489143209739, 0.1706899949253684, 0.19839475129066497, 0.18172262033994535, 0.19267104200930874, 0.1767997450195271, 0.19876661472982782, 0.20352777719171644, 0.27337698500602325, 0.21781528375411052, 0.18884914279729392, 0.22390534040514098, 0.19619316104253492, 0.21132311873619802, 0.20702137959305777, 0.4590318127479237, 0.4141079073089654, 0.16866370432618782, 0.601320635691142, 0.5042081312126012, 0.6867563116602722, 0.2838292408925921, 0.172741261319184, 0.19899929826395946, 0.5025402009302008, 0.20087497876491067, 0.5016535392623185, 0.1530978124650746, 0.3811747896809615, 0.5122324042712263, 0.20893262771798327, 0.18066666113127483, 0.3553570843068552, 0.19724873157477907, 0.18065098655210643, 0.18910116758752538, 0.19296821309429757, 0.19271029295635633, 0.18488694045507303, 0.1839507282060775, 0.19126747040301229, 0.1946140871464146, 0.0723994669638629, 0.06707529857323735, 0.08046708214675258, 0.07070804015556753, 0.08365192700742641, 0.08877091426904027, 0.08072866069676898, 0.08078934639533586, 0.07757881359446361]}, "mutation_prompt": null}
{"id": "e44b164a-a4d6-43dc-b911-e5e5d26e330b", "solution": "import numpy as np\n\nclass EfficientMetaheuristicOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 8 * self.dim  # Reduced population size for efficiency\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.F = 0.7  # Adjusted mutation factor for better exploration\n        self.CR = 0.8  # Adjusted crossover rate\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Mutation with enhanced selection strategy\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = self.population[a] + self.F * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, *self.bounds)\n                \n                # Crossover with adaptive strategy\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Adaptive F and CR based on fitness improvement\n                if trial_fitness < self.fitness.mean():\n                    self.F = np.clip(self.F + 0.02 * np.random.randn(), 0.1, 1.0)\n                    self.CR = np.clip(self.CR + 0.02 * np.random.randn(), 0.1, 1.0)\n\n        # Return the best solution found\n        return self.population[np.argmin(self.fitness)]\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1", "name": "EfficientMetaheuristicOptimizer", "description": "The algorithm integrates a streamlined Differential Evolution approach with adaptive mutation and crossover strategies, emphasizing computational efficiency.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d1c5e78f-e972-4a45-af62-4bd489944761", "metadata": {"aucs": [0.81211419717852, 0.7016910520983629, 0.855883328833489, 0.8444432324542478, 0.8342764849153691, 0.7714784278026571, 0.7241754841748812, 0.8726083398941485, 0.6981033194990621, 0.6651968510212485, 0.4709402210351141, 0.5982312701314738, 0.5233690061547305, 0.6322965696442768, 0.6243862997685712, 0.6392955381601451, 0.5079139875277365, 0.48694982290752153, 0.10507220981398735, 0.12323619132532548, 0.1729410263655662, 0.14622088341619055, 0.4149252942317212, 0.23160637731447198, 0.3271516346311357, 0.612970216118165, 0.27169795299643473, 0.35712180939334237, 0.28799692635017315, 0.1976694779056627, 0.12380970845917805, 0.1349652813514367, 0.11115778359792183, 0.23120346878125497, 0.09007584921570033, 0.09012248965308922, 0.9569697402256994, 0.9618720893920147, 0.922108753805051, 0.929374640753633, 0.9672771015190199, 0.9818524003078906, 0.9594777341865339, 0.954743641172043, 0.9443484257533029, 0.19299721732097452, 0.3042638265145282, 0.2861910034217685, 0.31708950237966005, 0.271275667042815, 0.3090746645391964, 0.31822156029916204, 0.29688269747143026, 0.30090173728636604, 0.21393776039083034, 0.30257052368689985, 0.25308228487562756, 0.37364273718243357, 0.7574416253975267, 0.6920634240134911, 0.5684400387314834, 0.5385324746636373, 0.7479256568642845, 0.1725514318879917, 0.1241526836236766, 0.14834135004832683, 0.17111645956379906, 0.1538790942485745, 0.164929670959871, 0.20437194274641557, 0.2700501888585297, 0.2184971017013232, 0.11619099419798529, 0.15475476873256722, 0.1851175706671735, 0.17286010318998835, 0.2098434097009254, 0.2120685520040898, 0.169677192884647, 0.18647534332200721, 0.19348927213058942, 0.07978366022524319, 0.1275021555761836, 0.17169899349924378, 0.20765321189062147, 0.3372692677051071, 9.999999999998899e-05, 9.999999999998899e-05, 0.08634474800203085, 9.999999999998899e-05, 0.12092047144885798, 0.10338285952190018, 0.12995494118003625, 0.08063049350674079, 0.19331713086176494, 0.054029136201090844, 0.16020414468380695, 0.19274362142914803, 0.16750861323486022, 9.999999999998899e-05, 0.14371546054545636, 0.1590352273455703, 0.04274240465526402, 0.006846040646732443, 0.0578334625927186, 0.015930178047336985, 0.06961223787789583, 0.1249699174973623, 0.11043084387449176, 0.2742720861468828, 0.10428959929597781, 0.10534894677945716, 0.12033306214535244, 0.23294985364151222, 0.10330439972612437, 0.1293515764225167, 0.14774119564264654, 0.4791072796475908, 0.5107294274901542, 0.44887985497586946, 0.5680804226180922, 0.46789995485162417, 0.6855184583523567, 0.5033875972848336, 0.458437159975679, 0.5188110538681476, 0.09993338508553384, 0.09930917861612687, 0.09932328127297296, 0.11153502074991717, 0.0853290416685688, 0.0945192912761953, 0.129496476912347, 0.1599336330146025, 0.11945489520391717, 0.12831371340292608, 0.151726609132522, 0.1438011291978044, 0.1415462965521258, 0.14328164579510871, 0.12061598855384947, 0.1940421683849327, 0.23323399437721348, 0.13315558180537468, 0.42472553009779945, 0.29997296171521437, 0.2946905530254068, 0.25095292514475553, 0.2697732111975112, 0.378784024656302, 0.43933198457262257, 0.42486936134498987, 0.2545595614682067, 0.2064032048875334, 0.21407284741666377, 0.24759663615285832, 0.15321515292901022, 0.20297994455829393, 0.2804682107688159, 0.1655769325392834, 0.2554530459505937, 0.38907313779329966, 0.17912839311162354, 0.21240628945840523, 0.20272216473908133, 0.1952489143209739, 0.1706899949253684, 0.19839475129066497, 0.18172262033994535, 0.19267104200930874, 0.1767997450195271, 0.19876661472982782, 0.20352777719171644, 0.27337698500602325, 0.21781528375411052, 0.18884914279729392, 0.22390534040514098, 0.19619316104253492, 0.21132311873619802, 0.20702137959305777, 0.4590318127479237, 0.4141079073089654, 0.16866370432618782, 0.601320635691142, 0.5042081312126012, 0.6867563116602722, 0.2838292408925921, 0.172741261319184, 0.19899929826395946, 0.5025402009302008, 0.20087497876491067, 0.5016535392623185, 0.1530978124650746, 0.3811747896809615, 0.5122324042712263, 0.20893262771798327, 0.18066666113127483, 0.3553570843068552, 0.19724873157477907, 0.18065098655210643, 0.18910116758752538, 0.19296821309429757, 0.19271029295635633, 0.18488694045507303, 0.1839507282060775, 0.19126747040301229, 0.1946140871464146, 0.0723994669638629, 0.06707529857323735, 0.08046708214675258, 0.07070804015556753, 0.08365192700742641, 0.08877091426904027, 0.08072866069676898, 0.08078934639533586, 0.07757881359446361]}, "mutation_prompt": null}
{"id": "a29a0403-862c-4ffe-b060-31405a469a65", "solution": "import numpy as np\n\nclass EfficientMetaheuristicOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 8 * self.dim  # Reduced population size for efficiency\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.F = 0.7  # Adjusted mutation factor for better exploration\n        self.CR = 0.8  # Adjusted crossover rate\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Mutation with enhanced selection strategy\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = self.population[a] + self.F * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, *self.bounds)\n                \n                # Crossover with adaptive strategy\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Adaptive F and CR based on fitness improvement\n                if trial_fitness < self.fitness.mean():\n                    self.F = np.clip(self.F + 0.02 * np.random.randn(), 0.1, 1.0)\n                    self.CR = np.clip(self.CR + 0.02 * np.random.randn(), 0.1, 1.0)\n\n        # Return the best solution found\n        return self.population[np.argmin(self.fitness)]\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1", "name": "EfficientMetaheuristicOptimizer", "description": "The algorithm integrates a streamlined Differential Evolution approach with adaptive mutation and crossover strategies, emphasizing computational efficiency.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d1c5e78f-e972-4a45-af62-4bd489944761", "metadata": {"aucs": [0.81211419717852, 0.7016910520983629, 0.855883328833489, 0.8444432324542478, 0.8342764849153691, 0.7714784278026571, 0.7241754841748812, 0.8726083398941485, 0.6981033194990621, 0.6651968510212485, 0.4709402210351141, 0.5982312701314738, 0.5233690061547305, 0.6322965696442768, 0.6243862997685712, 0.6392955381601451, 0.5079139875277365, 0.48694982290752153, 0.10507220981398735, 0.12323619132532548, 0.1729410263655662, 0.14622088341619055, 0.4149252942317212, 0.23160637731447198, 0.3271516346311357, 0.612970216118165, 0.27169795299643473, 0.35712180939334237, 0.28799692635017315, 0.1976694779056627, 0.12380970845917805, 0.1349652813514367, 0.11115778359792183, 0.23120346878125497, 0.09007584921570033, 0.09012248965308922, 0.9569697402256994, 0.9618720893920147, 0.922108753805051, 0.929374640753633, 0.9672771015190199, 0.9818524003078906, 0.9594777341865339, 0.954743641172043, 0.9443484257533029, 0.19299721732097452, 0.3042638265145282, 0.2861910034217685, 0.31708950237966005, 0.271275667042815, 0.3090746645391964, 0.31822156029916204, 0.29688269747143026, 0.30090173728636604, 0.21393776039083034, 0.30257052368689985, 0.25308228487562756, 0.37364273718243357, 0.7574416253975267, 0.6920634240134911, 0.5684400387314834, 0.5385324746636373, 0.7479256568642845, 0.1725514318879917, 0.1241526836236766, 0.14834135004832683, 0.17111645956379906, 0.1538790942485745, 0.164929670959871, 0.20437194274641557, 0.2700501888585297, 0.2184971017013232, 0.11619099419798529, 0.15475476873256722, 0.1851175706671735, 0.17286010318998835, 0.2098434097009254, 0.2120685520040898, 0.169677192884647, 0.18647534332200721, 0.19348927213058942, 0.07978366022524319, 0.1275021555761836, 0.17169899349924378, 0.20765321189062147, 0.3372692677051071, 9.999999999998899e-05, 9.999999999998899e-05, 0.08634474800203085, 9.999999999998899e-05, 0.12092047144885798, 0.10338285952190018, 0.12995494118003625, 0.08063049350674079, 0.19331713086176494, 0.054029136201090844, 0.16020414468380695, 0.19274362142914803, 0.16750861323486022, 9.999999999998899e-05, 0.14371546054545636, 0.1590352273455703, 0.04274240465526402, 0.006846040646732443, 0.0578334625927186, 0.015930178047336985, 0.06961223787789583, 0.1249699174973623, 0.11043084387449176, 0.2742720861468828, 0.10428959929597781, 0.10534894677945716, 0.12033306214535244, 0.23294985364151222, 0.10330439972612437, 0.1293515764225167, 0.14774119564264654, 0.4791072796475908, 0.5107294274901542, 0.44887985497586946, 0.5680804226180922, 0.46789995485162417, 0.6855184583523567, 0.5033875972848336, 0.458437159975679, 0.5188110538681476, 0.09993338508553384, 0.09930917861612687, 0.09932328127297296, 0.11153502074991717, 0.0853290416685688, 0.0945192912761953, 0.129496476912347, 0.1599336330146025, 0.11945489520391717, 0.12831371340292608, 0.151726609132522, 0.1438011291978044, 0.1415462965521258, 0.14328164579510871, 0.12061598855384947, 0.1940421683849327, 0.23323399437721348, 0.13315558180537468, 0.42472553009779945, 0.29997296171521437, 0.2946905530254068, 0.25095292514475553, 0.2697732111975112, 0.378784024656302, 0.43933198457262257, 0.42486936134498987, 0.2545595614682067, 0.2064032048875334, 0.21407284741666377, 0.24759663615285832, 0.15321515292901022, 0.20297994455829393, 0.2804682107688159, 0.1655769325392834, 0.2554530459505937, 0.38907313779329966, 0.17912839311162354, 0.21240628945840523, 0.20272216473908133, 0.1952489143209739, 0.1706899949253684, 0.19839475129066497, 0.18172262033994535, 0.19267104200930874, 0.1767997450195271, 0.19876661472982782, 0.20352777719171644, 0.27337698500602325, 0.21781528375411052, 0.18884914279729392, 0.22390534040514098, 0.19619316104253492, 0.21132311873619802, 0.20702137959305777, 0.4590318127479237, 0.4141079073089654, 0.16866370432618782, 0.601320635691142, 0.5042081312126012, 0.6867563116602722, 0.2838292408925921, 0.172741261319184, 0.19899929826395946, 0.5025402009302008, 0.20087497876491067, 0.5016535392623185, 0.1530978124650746, 0.3811747896809615, 0.5122324042712263, 0.20893262771798327, 0.18066666113127483, 0.3553570843068552, 0.19724873157477907, 0.18065098655210643, 0.18910116758752538, 0.19296821309429757, 0.19271029295635633, 0.18488694045507303, 0.1839507282060775, 0.19126747040301229, 0.1946140871464146, 0.0723994669638629, 0.06707529857323735, 0.08046708214675258, 0.07070804015556753, 0.08365192700742641, 0.08877091426904027, 0.08072866069676898, 0.08078934639533586, 0.07757881359446361]}, "mutation_prompt": null}
{"id": "e536e5de-d543-4032-b6dd-c2cc179d0035", "solution": "import numpy as np\n\nclass EfficientMetaheuristicOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 8 * self.dim  # Reduced population size for efficiency\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.F = 0.7  # Adjusted mutation factor for better exploration\n        self.CR = 0.8  # Adjusted crossover rate\n        self.evaluations = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                # Mutation with enhanced selection strategy\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n                mutant = self.population[a] + self.F * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, *self.bounds)\n                \n                # Crossover with adaptive strategy\n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n\n                # Selection\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n\n                # Adaptive F and CR based on fitness improvement\n                if trial_fitness < self.fitness.mean():\n                    self.F = np.clip(self.F + 0.02 * np.random.randn(), 0.1, 1.0)\n                    self.CR = np.clip(self.CR + 0.02 * np.random.randn(), 0.1, 1.0)\n\n        # Return the best solution found\n        return self.population[np.argmin(self.fitness)]\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1", "name": "EfficientMetaheuristicOptimizer", "description": "The algorithm integrates a streamlined Differential Evolution approach with adaptive mutation and crossover strategies, emphasizing computational efficiency.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d1c5e78f-e972-4a45-af62-4bd489944761", "metadata": {"aucs": [0.81211419717852, 0.7016910520983629, 0.855883328833489, 0.8444432324542478, 0.8342764849153691, 0.7714784278026571, 0.7241754841748812, 0.8726083398941485, 0.6981033194990621, 0.6651968510212485, 0.4709402210351141, 0.5982312701314738, 0.5233690061547305, 0.6322965696442768, 0.6243862997685712, 0.6392955381601451, 0.5079139875277365, 0.48694982290752153, 0.10507220981398735, 0.12323619132532548, 0.1729410263655662, 0.14622088341619055, 0.4149252942317212, 0.23160637731447198, 0.3271516346311357, 0.612970216118165, 0.27169795299643473, 0.35712180939334237, 0.28799692635017315, 0.1976694779056627, 0.12380970845917805, 0.1349652813514367, 0.11115778359792183, 0.23120346878125497, 0.09007584921570033, 0.09012248965308922, 0.9569697402256994, 0.9618720893920147, 0.922108753805051, 0.929374640753633, 0.9672771015190199, 0.9818524003078906, 0.9594777341865339, 0.954743641172043, 0.9443484257533029, 0.19299721732097452, 0.3042638265145282, 0.2861910034217685, 0.31708950237966005, 0.271275667042815, 0.3090746645391964, 0.31822156029916204, 0.29688269747143026, 0.30090173728636604, 0.21393776039083034, 0.30257052368689985, 0.25308228487562756, 0.37364273718243357, 0.7574416253975267, 0.6920634240134911, 0.5684400387314834, 0.5385324746636373, 0.7479256568642845, 0.1725514318879917, 0.1241526836236766, 0.14834135004832683, 0.17111645956379906, 0.1538790942485745, 0.164929670959871, 0.20437194274641557, 0.2700501888585297, 0.2184971017013232, 0.11619099419798529, 0.15475476873256722, 0.1851175706671735, 0.17286010318998835, 0.2098434097009254, 0.2120685520040898, 0.169677192884647, 0.18647534332200721, 0.19348927213058942, 0.07978366022524319, 0.1275021555761836, 0.17169899349924378, 0.20765321189062147, 0.3372692677051071, 9.999999999998899e-05, 9.999999999998899e-05, 0.08634474800203085, 9.999999999998899e-05, 0.12092047144885798, 0.10338285952190018, 0.12995494118003625, 0.08063049350674079, 0.19331713086176494, 0.054029136201090844, 0.16020414468380695, 0.19274362142914803, 0.16750861323486022, 9.999999999998899e-05, 0.14371546054545636, 0.1590352273455703, 0.04274240465526402, 0.006846040646732443, 0.0578334625927186, 0.015930178047336985, 0.06961223787789583, 0.1249699174973623, 0.11043084387449176, 0.2742720861468828, 0.10428959929597781, 0.10534894677945716, 0.12033306214535244, 0.23294985364151222, 0.10330439972612437, 0.1293515764225167, 0.14774119564264654, 0.4791072796475908, 0.5107294274901542, 0.44887985497586946, 0.5680804226180922, 0.46789995485162417, 0.6855184583523567, 0.5033875972848336, 0.458437159975679, 0.5188110538681476, 0.09993338508553384, 0.09930917861612687, 0.09932328127297296, 0.11153502074991717, 0.0853290416685688, 0.0945192912761953, 0.129496476912347, 0.1599336330146025, 0.11945489520391717, 0.12831371340292608, 0.151726609132522, 0.1438011291978044, 0.1415462965521258, 0.14328164579510871, 0.12061598855384947, 0.1940421683849327, 0.23323399437721348, 0.13315558180537468, 0.42472553009779945, 0.29997296171521437, 0.2946905530254068, 0.25095292514475553, 0.2697732111975112, 0.378784024656302, 0.43933198457262257, 0.42486936134498987, 0.2545595614682067, 0.2064032048875334, 0.21407284741666377, 0.24759663615285832, 0.15321515292901022, 0.20297994455829393, 0.2804682107688159, 0.1655769325392834, 0.2554530459505937, 0.38907313779329966, 0.17912839311162354, 0.21240628945840523, 0.20272216473908133, 0.1952489143209739, 0.1706899949253684, 0.19839475129066497, 0.18172262033994535, 0.19267104200930874, 0.1767997450195271, 0.19876661472982782, 0.20352777719171644, 0.27337698500602325, 0.21781528375411052, 0.18884914279729392, 0.22390534040514098, 0.19619316104253492, 0.21132311873619802, 0.20702137959305777, 0.4590318127479237, 0.4141079073089654, 0.16866370432618782, 0.601320635691142, 0.5042081312126012, 0.6867563116602722, 0.2838292408925921, 0.172741261319184, 0.19899929826395946, 0.5025402009302008, 0.20087497876491067, 0.5016535392623185, 0.1530978124650746, 0.3811747896809615, 0.5122324042712263, 0.20893262771798327, 0.18066666113127483, 0.3553570843068552, 0.19724873157477907, 0.18065098655210643, 0.18910116758752538, 0.19296821309429757, 0.19271029295635633, 0.18488694045507303, 0.1839507282060775, 0.19126747040301229, 0.1946140871464146, 0.0723994669638629, 0.06707529857323735, 0.08046708214675258, 0.07070804015556753, 0.08365192700742641, 0.08877091426904027, 0.08072866069676898, 0.08078934639533586, 0.07757881359446361]}, "mutation_prompt": null}
{"id": "e2479e79-b69d-45fa-b91b-0b20431aaa1a", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 6 * self.dim  # Further reduced population size for faster execution\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.F = 0.6  # Adjusted mutation factor for initial diversity\n        self.CR = 0.9  # Higher crossover rate for increased recombination\n        self.evaluations = 0\n        self.archive = []\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n\n                # Check archive for potential new base vector\n                if len(self.archive) > 0 and np.random.rand() < 0.1:\n                    base_vector = self.archive[np.random.randint(len(self.archive))]\n                else:\n                    base_vector = self.population[a]\n\n                # Mutation with potential archive vector\n                mutant = base_vector + self.F * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, *self.bounds)\n                \n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    # Archive successful mutants\n                    self.archive.append(trial)\n\n                # Dynamic adjustment based on fitness improvement\n                if trial_fitness < self.fitness.mean():\n                    self.F = np.clip(self.F + 0.01 * (0.5 - np.random.rand()), 0.1, 0.9)\n                    self.CR = np.clip(self.CR + 0.01 * (0.5 - np.random.rand()), 0.5, 1.0)\n\n        return self.population[np.argmin(self.fitness)]\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1", "name": "EnhancedMetaheuristicOptimizer", "description": "This algorithm enhances Differential Evolution by incorporating a dynamic archiving mechanism and adaptive scaling, focusing on reducing redundant evaluations and improving convergence speed.", "configspace": "", "generation": 31, "fitness": 0.39902618210763385, "feedback": "The algorithm EnhancedMetaheuristicOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.40 with standard deviation 0.27.", "error": "", "parent_id": "d1c5e78f-e972-4a45-af62-4bd489944761", "metadata": {"aucs": [0.8460838787318541, 0.8662210773214738, 0.8164573346626365, 0.8474260970208942, 0.8564395667445609, 0.8345479318139788, 0.8540491208796602, 0.8317501307836201, 0.8398020747513537, 0.6862735300194087, 0.7312545135338542, 0.7337114467926564, 0.7393741637085585, 0.7233185285708336, 0.6567521728063315, 0.7418944441517743, 0.7133538515172579, 0.7489585245586282, 0.21512818503010733, 0.13583250914468514, 0.12183102787103783, 0.10404529497511705, 0.12155147909505926, 0.11161737498757207, 0.13566255680944728, 0.13309452614576944, 0.14253313168169335, 0.10277272302788698, 0.11056387527357237, 0.1397652820307307, 0.12202565881943339, 0.13084970314919397, 0.1147862561070846, 0.1107156460462495, 0.09995298490831994, 0.10050844281822302, 0.9308272990481794, 0.9504949701555323, 0.9811165720089283, 0.8895067268384018, 0.9408710023392403, 0.9432442402822587, 0.9560733825932358, 0.9605358821067621, 0.9335584020145802, 0.5122660725578172, 0.5958772319256793, 0.5322793929517171, 0.5916223442813854, 0.5962377974045365, 0.678995085032133, 0.4755485481163809, 0.611284500745387, 0.6076148974411232, 0.8472652261287323, 0.8327665107298321, 0.805940854875559, 0.8202599398726511, 0.8380067227205756, 0.7967428263023542, 0.7747845915458351, 0.724097987386366, 0.8400537185005408, 0.40217369740982223, 0.18484126740458728, 0.36324051532467916, 0.37263017825860756, 0.20392326655030668, 0.41237192075948637, 0.3877440003099134, 0.2856761126710259, 0.3532608298652462, 0.3513102896224257, 0.21481712428264177, 0.2222788220777453, 0.29745499244108997, 0.1793286168051631, 0.22107342973119593, 0.2203450980563506, 0.32266939191309374, 0.43019538881702224, 0.3911602034296203, 0.5774387066263849, 0.48372916708951874, 0.2695686529190173, 0.33243437736866177, 0.40965558842833816, 0.6195002512470358, 0.3893141339666034, 0.3432472999933732, 0.5981410308120142, 0.5898843981655413, 0.7716245008655335, 0.5675668800912007, 0.33000017539178916, 0.6492708360853281, 0.5550601286062737, 0.7212557454319156, 0.6263478190421081, 0.1119579449124063, 0.23667253698061974, 0.2531368640355437, 0.3970862646124953, 0.1677008461223135, 0.13531017600578343, 0.2482487719050257, 0.14463749950973293, 0.12877118481664707, 0.36600715857411137, 0.3882310737730873, 0.29618786249399975, 0.45837274139040207, 0.5503106267937234, 0.3740273380776381, 0.3592493850333405, 0.2952051198575746, 0.37013075102967874, 0.750211501266788, 0.6666848209869163, 0.8116452718924732, 0.6430141624805874, 0.6515772159861947, 0.6732183674250557, 0.7595936637040608, 0.7542405270345075, 0.7362578781754887, 0.10952760241339854, 0.09747974746612997, 0.09881545004929926, 0.1050489895048855, 0.10220713828883776, 0.09193357941703961, 0.0978309479750844, 0.10876801218323995, 0.08878289143401286, 0.1514075341051615, 0.1327516452974833, 0.17921491165456171, 0.14894524904132433, 0.19931045960284177, 0.18922205595252428, 0.13680241626212442, 0.1803489665926591, 0.1462694853480363, 0.5042799239185823, 0.5566296502946564, 0.4306507622010627, 0.43610913378045735, 0.43789129616785827, 0.39826610120660055, 0.47585532965363087, 0.4564648588947926, 0.42518175752329834, 0.32166276967296914, 0.3514889373439898, 0.40557211227448786, 0.2849455300096645, 0.41406695063959165, 0.42012776184416367, 0.4123723247874548, 0.3978376085516072, 0.3542714761047776, 0.19650293233862182, 0.21438895488834142, 0.19605126648810656, 0.1945187066916556, 0.18776672033534592, 0.19023493490633725, 0.1865622335841266, 0.18682236690566367, 0.19951383700140324, 0.20665804903689056, 0.2775759957453616, 0.4478153759030584, 0.2164917410508882, 0.17873148994872046, 0.3428392679693817, 0.18711120661575587, 0.22613832652150356, 0.2631587376403516, 0.2083562319990443, 0.18259649389037402, 0.193431091961622, 0.829689805202301, 0.6978220523817482, 0.19641151775048604, 0.18580525236827816, 0.18014237990605797, 0.6759299998859297, 0.8063676359307129, 0.20185428942065176, 0.2068840166925202, 0.2064155591553115, 0.19895542901668328, 0.5987939544125035, 0.16433429851850268, 0.20842469407016762, 0.20376748218246887, 0.1830568662841463, 0.18714197816037104, 0.18534510948682426, 0.20206754668409033, 0.184903926747361, 0.17763988418342014, 0.18923074738169265, 0.19173453862244738, 0.18889295019318675, 0.07929852808174676, 0.08520227820452109, 0.08239062509294459, 0.08758241093881602, 0.07637705080278523, 0.0853394160128561, 0.09327844562796705, 0.07336447272886404, 0.07660269930659092]}, "mutation_prompt": null}
{"id": "06cc3f56-98fb-49d1-a20f-18663866e4fb", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 6 * self.dim  # Further reduced population size for faster execution\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.F = 0.6  # Adjusted mutation factor for initial diversity\n        self.CR = 0.9  # Higher crossover rate for increased recombination\n        self.evaluations = 0\n        self.archive = []\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n\n                # Check archive for potential new base vector\n                if len(self.archive) > 0 and np.random.rand() < 0.1:\n                    base_vector = self.archive[np.random.randint(len(self.archive))]\n                else:\n                    base_vector = self.population[a]\n\n                # Mutation with potential archive vector\n                mutant = base_vector + self.F * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, *self.bounds)\n                \n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    # Archive successful mutants\n                    self.archive.append(trial)\n\n                # Dynamic adjustment based on fitness improvement\n                if trial_fitness < self.fitness.mean():\n                    self.F = np.clip(self.F + 0.01 * (0.5 - np.random.rand()), 0.1, 0.9)\n                    self.CR = np.clip(self.CR + 0.01 * (0.5 - np.random.rand()), 0.5, 1.0)\n\n        return self.population[np.argmin(self.fitness)]\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1", "name": "EnhancedMetaheuristicOptimizer", "description": "This algorithm enhances Differential Evolution by incorporating a dynamic archiving mechanism and adaptive scaling, focusing on reducing redundant evaluations and improving convergence speed.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e2479e79-b69d-45fa-b91b-0b20431aaa1a", "metadata": {"aucs": [0.8460838787318541, 0.8662210773214738, 0.8164573346626365, 0.8474260970208942, 0.8564395667445609, 0.8345479318139788, 0.8540491208796602, 0.8317501307836201, 0.8398020747513537, 0.6862735300194087, 0.7312545135338542, 0.7337114467926564, 0.7393741637085585, 0.7233185285708336, 0.6567521728063315, 0.7418944441517743, 0.7133538515172579, 0.7489585245586282, 0.21512818503010733, 0.13583250914468514, 0.12183102787103783, 0.10404529497511705, 0.12155147909505926, 0.11161737498757207, 0.13566255680944728, 0.13309452614576944, 0.14253313168169335, 0.10277272302788698, 0.11056387527357237, 0.1397652820307307, 0.12202565881943339, 0.13084970314919397, 0.1147862561070846, 0.1107156460462495, 0.09995298490831994, 0.10050844281822302, 0.9308272990481794, 0.9504949701555323, 0.9811165720089283, 0.8895067268384018, 0.9408710023392403, 0.9432442402822587, 0.9560733825932358, 0.9605358821067621, 0.9335584020145802, 0.5122660725578172, 0.5958772319256793, 0.5322793929517171, 0.5916223442813854, 0.5962377974045365, 0.678995085032133, 0.4755485481163809, 0.611284500745387, 0.6076148974411232, 0.8472652261287323, 0.8327665107298321, 0.805940854875559, 0.8202599398726511, 0.8380067227205756, 0.7967428263023542, 0.7747845915458351, 0.724097987386366, 0.8400537185005408, 0.40217369740982223, 0.18484126740458728, 0.36324051532467916, 0.37263017825860756, 0.20392326655030668, 0.41237192075948637, 0.3877440003099134, 0.2856761126710259, 0.3532608298652462, 0.3513102896224257, 0.21481712428264177, 0.2222788220777453, 0.29745499244108997, 0.1793286168051631, 0.22107342973119593, 0.2203450980563506, 0.32266939191309374, 0.43019538881702224, 0.3911602034296203, 0.5774387066263849, 0.48372916708951874, 0.2695686529190173, 0.33243437736866177, 0.40965558842833816, 0.6195002512470358, 0.3893141339666034, 0.3432472999933732, 0.5981410308120142, 0.5898843981655413, 0.7716245008655335, 0.5675668800912007, 0.33000017539178916, 0.6492708360853281, 0.5550601286062737, 0.7212557454319156, 0.6263478190421081, 0.1119579449124063, 0.23667253698061974, 0.2531368640355437, 0.3970862646124953, 0.1677008461223135, 0.13531017600578343, 0.2482487719050257, 0.14463749950973293, 0.12877118481664707, 0.36600715857411137, 0.3882310737730873, 0.29618786249399975, 0.45837274139040207, 0.5503106267937234, 0.3740273380776381, 0.3592493850333405, 0.2952051198575746, 0.37013075102967874, 0.750211501266788, 0.6666848209869163, 0.8116452718924732, 0.6430141624805874, 0.6515772159861947, 0.6732183674250557, 0.7595936637040608, 0.7542405270345075, 0.7362578781754887, 0.10952760241339854, 0.09747974746612997, 0.09881545004929926, 0.1050489895048855, 0.10220713828883776, 0.09193357941703961, 0.0978309479750844, 0.10876801218323995, 0.08878289143401286, 0.1514075341051615, 0.1327516452974833, 0.17921491165456171, 0.14894524904132433, 0.19931045960284177, 0.18922205595252428, 0.13680241626212442, 0.1803489665926591, 0.1462694853480363, 0.5042799239185823, 0.5566296502946564, 0.4306507622010627, 0.43610913378045735, 0.43789129616785827, 0.39826610120660055, 0.47585532965363087, 0.4564648588947926, 0.42518175752329834, 0.32166276967296914, 0.3514889373439898, 0.40557211227448786, 0.2849455300096645, 0.41406695063959165, 0.42012776184416367, 0.4123723247874548, 0.3978376085516072, 0.3542714761047776, 0.19650293233862182, 0.21438895488834142, 0.19605126648810656, 0.1945187066916556, 0.18776672033534592, 0.19023493490633725, 0.1865622335841266, 0.18682236690566367, 0.19951383700140324, 0.20665804903689056, 0.2775759957453616, 0.4478153759030584, 0.2164917410508882, 0.17873148994872046, 0.3428392679693817, 0.18711120661575587, 0.22613832652150356, 0.2631587376403516, 0.2083562319990443, 0.18259649389037402, 0.193431091961622, 0.829689805202301, 0.6978220523817482, 0.19641151775048604, 0.18580525236827816, 0.18014237990605797, 0.6759299998859297, 0.8063676359307129, 0.20185428942065176, 0.2068840166925202, 0.2064155591553115, 0.19895542901668328, 0.5987939544125035, 0.16433429851850268, 0.20842469407016762, 0.20376748218246887, 0.1830568662841463, 0.18714197816037104, 0.18534510948682426, 0.20206754668409033, 0.184903926747361, 0.17763988418342014, 0.18923074738169265, 0.19173453862244738, 0.18889295019318675, 0.07929852808174676, 0.08520227820452109, 0.08239062509294459, 0.08758241093881602, 0.07637705080278523, 0.0853394160128561, 0.09327844562796705, 0.07336447272886404, 0.07660269930659092]}, "mutation_prompt": null}
{"id": "2f10c599-a217-461a-b25a-29ee7dddb07b", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 6 * self.dim  # Further reduced population size for faster execution\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.F = 0.6  # Adjusted mutation factor for initial diversity\n        self.CR = 0.9  # Higher crossover rate for increased recombination\n        self.evaluations = 0\n        self.archive = []\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n\n                # Check archive for potential new base vector\n                if len(self.archive) > 0 and np.random.rand() < 0.1:\n                    base_vector = self.archive[np.random.randint(len(self.archive))]\n                else:\n                    base_vector = self.population[a]\n\n                # Mutation with potential archive vector\n                mutant = base_vector + self.F * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, *self.bounds)\n                \n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    # Archive successful mutants\n                    self.archive.append(trial)\n\n                # Dynamic adjustment based on fitness improvement\n                if trial_fitness < self.fitness.mean():\n                    self.F = np.clip(self.F + 0.01 * (0.5 - np.random.rand()), 0.1, 0.9)\n                    self.CR = np.clip(self.CR + 0.01 * (0.5 - np.random.rand()), 0.5, 1.0)\n\n        return self.population[np.argmin(self.fitness)]\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1", "name": "EnhancedMetaheuristicOptimizer", "description": "This algorithm enhances Differential Evolution by incorporating a dynamic archiving mechanism and adaptive scaling, focusing on reducing redundant evaluations and improving convergence speed.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e2479e79-b69d-45fa-b91b-0b20431aaa1a", "metadata": {"aucs": [0.8460838787318541, 0.8662210773214738, 0.8164573346626365, 0.8474260970208942, 0.8564395667445609, 0.8345479318139788, 0.8540491208796602, 0.8317501307836201, 0.8398020747513537, 0.6862735300194087, 0.7312545135338542, 0.7337114467926564, 0.7393741637085585, 0.7233185285708336, 0.6567521728063315, 0.7418944441517743, 0.7133538515172579, 0.7489585245586282, 0.21512818503010733, 0.13583250914468514, 0.12183102787103783, 0.10404529497511705, 0.12155147909505926, 0.11161737498757207, 0.13566255680944728, 0.13309452614576944, 0.14253313168169335, 0.10277272302788698, 0.11056387527357237, 0.1397652820307307, 0.12202565881943339, 0.13084970314919397, 0.1147862561070846, 0.1107156460462495, 0.09995298490831994, 0.10050844281822302, 0.9308272990481794, 0.9504949701555323, 0.9811165720089283, 0.8895067268384018, 0.9408710023392403, 0.9432442402822587, 0.9560733825932358, 0.9605358821067621, 0.9335584020145802, 0.5122660725578172, 0.5958772319256793, 0.5322793929517171, 0.5916223442813854, 0.5962377974045365, 0.678995085032133, 0.4755485481163809, 0.611284500745387, 0.6076148974411232, 0.8472652261287323, 0.8327665107298321, 0.805940854875559, 0.8202599398726511, 0.8380067227205756, 0.7967428263023542, 0.7747845915458351, 0.724097987386366, 0.8400537185005408, 0.40217369740982223, 0.18484126740458728, 0.36324051532467916, 0.37263017825860756, 0.20392326655030668, 0.41237192075948637, 0.3877440003099134, 0.2856761126710259, 0.3532608298652462, 0.3513102896224257, 0.21481712428264177, 0.2222788220777453, 0.29745499244108997, 0.1793286168051631, 0.22107342973119593, 0.2203450980563506, 0.32266939191309374, 0.43019538881702224, 0.3911602034296203, 0.5774387066263849, 0.48372916708951874, 0.2695686529190173, 0.33243437736866177, 0.40965558842833816, 0.6195002512470358, 0.3893141339666034, 0.3432472999933732, 0.5981410308120142, 0.5898843981655413, 0.7716245008655335, 0.5675668800912007, 0.33000017539178916, 0.6492708360853281, 0.5550601286062737, 0.7212557454319156, 0.6263478190421081, 0.1119579449124063, 0.23667253698061974, 0.2531368640355437, 0.3970862646124953, 0.1677008461223135, 0.13531017600578343, 0.2482487719050257, 0.14463749950973293, 0.12877118481664707, 0.36600715857411137, 0.3882310737730873, 0.29618786249399975, 0.45837274139040207, 0.5503106267937234, 0.3740273380776381, 0.3592493850333405, 0.2952051198575746, 0.37013075102967874, 0.750211501266788, 0.6666848209869163, 0.8116452718924732, 0.6430141624805874, 0.6515772159861947, 0.6732183674250557, 0.7595936637040608, 0.7542405270345075, 0.7362578781754887, 0.10952760241339854, 0.09747974746612997, 0.09881545004929926, 0.1050489895048855, 0.10220713828883776, 0.09193357941703961, 0.0978309479750844, 0.10876801218323995, 0.08878289143401286, 0.1514075341051615, 0.1327516452974833, 0.17921491165456171, 0.14894524904132433, 0.19931045960284177, 0.18922205595252428, 0.13680241626212442, 0.1803489665926591, 0.1462694853480363, 0.5042799239185823, 0.5566296502946564, 0.4306507622010627, 0.43610913378045735, 0.43789129616785827, 0.39826610120660055, 0.47585532965363087, 0.4564648588947926, 0.42518175752329834, 0.32166276967296914, 0.3514889373439898, 0.40557211227448786, 0.2849455300096645, 0.41406695063959165, 0.42012776184416367, 0.4123723247874548, 0.3978376085516072, 0.3542714761047776, 0.19650293233862182, 0.21438895488834142, 0.19605126648810656, 0.1945187066916556, 0.18776672033534592, 0.19023493490633725, 0.1865622335841266, 0.18682236690566367, 0.19951383700140324, 0.20665804903689056, 0.2775759957453616, 0.4478153759030584, 0.2164917410508882, 0.17873148994872046, 0.3428392679693817, 0.18711120661575587, 0.22613832652150356, 0.2631587376403516, 0.2083562319990443, 0.18259649389037402, 0.193431091961622, 0.829689805202301, 0.6978220523817482, 0.19641151775048604, 0.18580525236827816, 0.18014237990605797, 0.6759299998859297, 0.8063676359307129, 0.20185428942065176, 0.2068840166925202, 0.2064155591553115, 0.19895542901668328, 0.5987939544125035, 0.16433429851850268, 0.20842469407016762, 0.20376748218246887, 0.1830568662841463, 0.18714197816037104, 0.18534510948682426, 0.20206754668409033, 0.184903926747361, 0.17763988418342014, 0.18923074738169265, 0.19173453862244738, 0.18889295019318675, 0.07929852808174676, 0.08520227820452109, 0.08239062509294459, 0.08758241093881602, 0.07637705080278523, 0.0853394160128561, 0.09327844562796705, 0.07336447272886404, 0.07660269930659092]}, "mutation_prompt": null}
{"id": "e33294e3-1634-4071-8daf-35dacd369f25", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 6 * self.dim  # Further reduced population size for faster execution\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.F = 0.6  # Adjusted mutation factor for initial diversity\n        self.CR = 0.9  # Higher crossover rate for increased recombination\n        self.evaluations = 0\n        self.archive = []\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n\n                # Check archive for potential new base vector\n                if len(self.archive) > 0 and np.random.rand() < 0.1:\n                    base_vector = self.archive[np.random.randint(len(self.archive))]\n                else:\n                    base_vector = self.population[a]\n\n                # Mutation with potential archive vector\n                mutant = base_vector + self.F * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, *self.bounds)\n                \n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    # Archive successful mutants\n                    self.archive.append(trial)\n\n                # Dynamic adjustment based on fitness improvement\n                if trial_fitness < self.fitness.mean():\n                    self.F = np.clip(self.F + 0.01 * (0.5 - np.random.rand()), 0.1, 0.9)\n                    self.CR = np.clip(self.CR + 0.01 * (0.5 - np.random.rand()), 0.5, 1.0)\n\n        return self.population[np.argmin(self.fitness)]\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1", "name": "EnhancedMetaheuristicOptimizer", "description": "This algorithm enhances Differential Evolution by incorporating a dynamic archiving mechanism and adaptive scaling, focusing on reducing redundant evaluations and improving convergence speed.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e2479e79-b69d-45fa-b91b-0b20431aaa1a", "metadata": {"aucs": [0.8460838787318541, 0.8662210773214738, 0.8164573346626365, 0.8474260970208942, 0.8564395667445609, 0.8345479318139788, 0.8540491208796602, 0.8317501307836201, 0.8398020747513537, 0.6862735300194087, 0.7312545135338542, 0.7337114467926564, 0.7393741637085585, 0.7233185285708336, 0.6567521728063315, 0.7418944441517743, 0.7133538515172579, 0.7489585245586282, 0.21512818503010733, 0.13583250914468514, 0.12183102787103783, 0.10404529497511705, 0.12155147909505926, 0.11161737498757207, 0.13566255680944728, 0.13309452614576944, 0.14253313168169335, 0.10277272302788698, 0.11056387527357237, 0.1397652820307307, 0.12202565881943339, 0.13084970314919397, 0.1147862561070846, 0.1107156460462495, 0.09995298490831994, 0.10050844281822302, 0.9308272990481794, 0.9504949701555323, 0.9811165720089283, 0.8895067268384018, 0.9408710023392403, 0.9432442402822587, 0.9560733825932358, 0.9605358821067621, 0.9335584020145802, 0.5122660725578172, 0.5958772319256793, 0.5322793929517171, 0.5916223442813854, 0.5962377974045365, 0.678995085032133, 0.4755485481163809, 0.611284500745387, 0.6076148974411232, 0.8472652261287323, 0.8327665107298321, 0.805940854875559, 0.8202599398726511, 0.8380067227205756, 0.7967428263023542, 0.7747845915458351, 0.724097987386366, 0.8400537185005408, 0.40217369740982223, 0.18484126740458728, 0.36324051532467916, 0.37263017825860756, 0.20392326655030668, 0.41237192075948637, 0.3877440003099134, 0.2856761126710259, 0.3532608298652462, 0.3513102896224257, 0.21481712428264177, 0.2222788220777453, 0.29745499244108997, 0.1793286168051631, 0.22107342973119593, 0.2203450980563506, 0.32266939191309374, 0.43019538881702224, 0.3911602034296203, 0.5774387066263849, 0.48372916708951874, 0.2695686529190173, 0.33243437736866177, 0.40965558842833816, 0.6195002512470358, 0.3893141339666034, 0.3432472999933732, 0.5981410308120142, 0.5898843981655413, 0.7716245008655335, 0.5675668800912007, 0.33000017539178916, 0.6492708360853281, 0.5550601286062737, 0.7212557454319156, 0.6263478190421081, 0.1119579449124063, 0.23667253698061974, 0.2531368640355437, 0.3970862646124953, 0.1677008461223135, 0.13531017600578343, 0.2482487719050257, 0.14463749950973293, 0.12877118481664707, 0.36600715857411137, 0.3882310737730873, 0.29618786249399975, 0.45837274139040207, 0.5503106267937234, 0.3740273380776381, 0.3592493850333405, 0.2952051198575746, 0.37013075102967874, 0.750211501266788, 0.6666848209869163, 0.8116452718924732, 0.6430141624805874, 0.6515772159861947, 0.6732183674250557, 0.7595936637040608, 0.7542405270345075, 0.7362578781754887, 0.10952760241339854, 0.09747974746612997, 0.09881545004929926, 0.1050489895048855, 0.10220713828883776, 0.09193357941703961, 0.0978309479750844, 0.10876801218323995, 0.08878289143401286, 0.1514075341051615, 0.1327516452974833, 0.17921491165456171, 0.14894524904132433, 0.19931045960284177, 0.18922205595252428, 0.13680241626212442, 0.1803489665926591, 0.1462694853480363, 0.5042799239185823, 0.5566296502946564, 0.4306507622010627, 0.43610913378045735, 0.43789129616785827, 0.39826610120660055, 0.47585532965363087, 0.4564648588947926, 0.42518175752329834, 0.32166276967296914, 0.3514889373439898, 0.40557211227448786, 0.2849455300096645, 0.41406695063959165, 0.42012776184416367, 0.4123723247874548, 0.3978376085516072, 0.3542714761047776, 0.19650293233862182, 0.21438895488834142, 0.19605126648810656, 0.1945187066916556, 0.18776672033534592, 0.19023493490633725, 0.1865622335841266, 0.18682236690566367, 0.19951383700140324, 0.20665804903689056, 0.2775759957453616, 0.4478153759030584, 0.2164917410508882, 0.17873148994872046, 0.3428392679693817, 0.18711120661575587, 0.22613832652150356, 0.2631587376403516, 0.2083562319990443, 0.18259649389037402, 0.193431091961622, 0.829689805202301, 0.6978220523817482, 0.19641151775048604, 0.18580525236827816, 0.18014237990605797, 0.6759299998859297, 0.8063676359307129, 0.20185428942065176, 0.2068840166925202, 0.2064155591553115, 0.19895542901668328, 0.5987939544125035, 0.16433429851850268, 0.20842469407016762, 0.20376748218246887, 0.1830568662841463, 0.18714197816037104, 0.18534510948682426, 0.20206754668409033, 0.184903926747361, 0.17763988418342014, 0.18923074738169265, 0.19173453862244738, 0.18889295019318675, 0.07929852808174676, 0.08520227820452109, 0.08239062509294459, 0.08758241093881602, 0.07637705080278523, 0.0853394160128561, 0.09327844562796705, 0.07336447272886404, 0.07660269930659092]}, "mutation_prompt": null}
{"id": "198abed6-cea6-42fe-bf00-be1de0571a73", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 6 * self.dim  # Further reduced population size for faster execution\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.F = 0.6  # Adjusted mutation factor for initial diversity\n        self.CR = 0.9  # Higher crossover rate for increased recombination\n        self.evaluations = 0\n        self.archive = []\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n\n                # Check archive for potential new base vector\n                if len(self.archive) > 0 and np.random.rand() < 0.1:\n                    base_vector = self.archive[np.random.randint(len(self.archive))]\n                else:\n                    base_vector = self.population[a]\n\n                # Mutation with potential archive vector\n                mutant = base_vector + self.F * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, *self.bounds)\n                \n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    # Archive successful mutants\n                    self.archive.append(trial)\n\n                # Dynamic adjustment based on fitness improvement\n                if trial_fitness < self.fitness.mean():\n                    self.F = np.clip(self.F + 0.01 * (0.5 - np.random.rand()), 0.1, 0.9)\n                    self.CR = np.clip(self.CR + 0.01 * (0.5 - np.random.rand()), 0.5, 1.0)\n\n        return self.population[np.argmin(self.fitness)]\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1", "name": "EnhancedMetaheuristicOptimizer", "description": "This algorithm enhances Differential Evolution by incorporating a dynamic archiving mechanism and adaptive scaling, focusing on reducing redundant evaluations and improving convergence speed.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e2479e79-b69d-45fa-b91b-0b20431aaa1a", "metadata": {"aucs": [0.8460838787318541, 0.8662210773214738, 0.8164573346626365, 0.8474260970208942, 0.8564395667445609, 0.8345479318139788, 0.8540491208796602, 0.8317501307836201, 0.8398020747513537, 0.6862735300194087, 0.7312545135338542, 0.7337114467926564, 0.7393741637085585, 0.7233185285708336, 0.6567521728063315, 0.7418944441517743, 0.7133538515172579, 0.7489585245586282, 0.21512818503010733, 0.13583250914468514, 0.12183102787103783, 0.10404529497511705, 0.12155147909505926, 0.11161737498757207, 0.13566255680944728, 0.13309452614576944, 0.14253313168169335, 0.10277272302788698, 0.11056387527357237, 0.1397652820307307, 0.12202565881943339, 0.13084970314919397, 0.1147862561070846, 0.1107156460462495, 0.09995298490831994, 0.10050844281822302, 0.9308272990481794, 0.9504949701555323, 0.9811165720089283, 0.8895067268384018, 0.9408710023392403, 0.9432442402822587, 0.9560733825932358, 0.9605358821067621, 0.9335584020145802, 0.5122660725578172, 0.5958772319256793, 0.5322793929517171, 0.5916223442813854, 0.5962377974045365, 0.678995085032133, 0.4755485481163809, 0.611284500745387, 0.6076148974411232, 0.8472652261287323, 0.8327665107298321, 0.805940854875559, 0.8202599398726511, 0.8380067227205756, 0.7967428263023542, 0.7747845915458351, 0.724097987386366, 0.8400537185005408, 0.40217369740982223, 0.18484126740458728, 0.36324051532467916, 0.37263017825860756, 0.20392326655030668, 0.41237192075948637, 0.3877440003099134, 0.2856761126710259, 0.3532608298652462, 0.3513102896224257, 0.21481712428264177, 0.2222788220777453, 0.29745499244108997, 0.1793286168051631, 0.22107342973119593, 0.2203450980563506, 0.32266939191309374, 0.43019538881702224, 0.3911602034296203, 0.5774387066263849, 0.48372916708951874, 0.2695686529190173, 0.33243437736866177, 0.40965558842833816, 0.6195002512470358, 0.3893141339666034, 0.3432472999933732, 0.5981410308120142, 0.5898843981655413, 0.7716245008655335, 0.5675668800912007, 0.33000017539178916, 0.6492708360853281, 0.5550601286062737, 0.7212557454319156, 0.6263478190421081, 0.1119579449124063, 0.23667253698061974, 0.2531368640355437, 0.3970862646124953, 0.1677008461223135, 0.13531017600578343, 0.2482487719050257, 0.14463749950973293, 0.12877118481664707, 0.36600715857411137, 0.3882310737730873, 0.29618786249399975, 0.45837274139040207, 0.5503106267937234, 0.3740273380776381, 0.3592493850333405, 0.2952051198575746, 0.37013075102967874, 0.750211501266788, 0.6666848209869163, 0.8116452718924732, 0.6430141624805874, 0.6515772159861947, 0.6732183674250557, 0.7595936637040608, 0.7542405270345075, 0.7362578781754887, 0.10952760241339854, 0.09747974746612997, 0.09881545004929926, 0.1050489895048855, 0.10220713828883776, 0.09193357941703961, 0.0978309479750844, 0.10876801218323995, 0.08878289143401286, 0.1514075341051615, 0.1327516452974833, 0.17921491165456171, 0.14894524904132433, 0.19931045960284177, 0.18922205595252428, 0.13680241626212442, 0.1803489665926591, 0.1462694853480363, 0.5042799239185823, 0.5566296502946564, 0.4306507622010627, 0.43610913378045735, 0.43789129616785827, 0.39826610120660055, 0.47585532965363087, 0.4564648588947926, 0.42518175752329834, 0.32166276967296914, 0.3514889373439898, 0.40557211227448786, 0.2849455300096645, 0.41406695063959165, 0.42012776184416367, 0.4123723247874548, 0.3978376085516072, 0.3542714761047776, 0.19650293233862182, 0.21438895488834142, 0.19605126648810656, 0.1945187066916556, 0.18776672033534592, 0.19023493490633725, 0.1865622335841266, 0.18682236690566367, 0.19951383700140324, 0.20665804903689056, 0.2775759957453616, 0.4478153759030584, 0.2164917410508882, 0.17873148994872046, 0.3428392679693817, 0.18711120661575587, 0.22613832652150356, 0.2631587376403516, 0.2083562319990443, 0.18259649389037402, 0.193431091961622, 0.829689805202301, 0.6978220523817482, 0.19641151775048604, 0.18580525236827816, 0.18014237990605797, 0.6759299998859297, 0.8063676359307129, 0.20185428942065176, 0.2068840166925202, 0.2064155591553115, 0.19895542901668328, 0.5987939544125035, 0.16433429851850268, 0.20842469407016762, 0.20376748218246887, 0.1830568662841463, 0.18714197816037104, 0.18534510948682426, 0.20206754668409033, 0.184903926747361, 0.17763988418342014, 0.18923074738169265, 0.19173453862244738, 0.18889295019318675, 0.07929852808174676, 0.08520227820452109, 0.08239062509294459, 0.08758241093881602, 0.07637705080278523, 0.0853394160128561, 0.09327844562796705, 0.07336447272886404, 0.07660269930659092]}, "mutation_prompt": null}
{"id": "0ce69cd9-9408-4660-849b-62c2b3b4e8e9", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 6 * self.dim  # Further reduced population size for faster execution\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.F = 0.6  # Adjusted mutation factor for initial diversity\n        self.CR = 0.9  # Higher crossover rate for increased recombination\n        self.evaluations = 0\n        self.archive = []\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n\n                # Check archive for potential new base vector\n                if len(self.archive) > 0 and np.random.rand() < 0.1:\n                    base_vector = self.archive[np.random.randint(len(self.archive))]\n                else:\n                    base_vector = self.population[a]\n\n                # Mutation with potential archive vector\n                mutant = base_vector + self.F * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, *self.bounds)\n                \n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    # Archive successful mutants\n                    self.archive.append(trial)\n\n                # Dynamic adjustment based on fitness improvement\n                if trial_fitness < self.fitness.mean():\n                    self.F = np.clip(self.F + 0.01 * (0.5 - np.random.rand()), 0.1, 0.9)\n                    self.CR = np.clip(self.CR + 0.01 * (0.5 - np.random.rand()), 0.5, 1.0)\n\n        return self.population[np.argmin(self.fitness)]\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1", "name": "EnhancedMetaheuristicOptimizer", "description": "This algorithm enhances Differential Evolution by incorporating a dynamic archiving mechanism and adaptive scaling, focusing on reducing redundant evaluations and improving convergence speed.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e2479e79-b69d-45fa-b91b-0b20431aaa1a", "metadata": {"aucs": [0.8460838787318541, 0.8662210773214738, 0.8164573346626365, 0.8474260970208942, 0.8564395667445609, 0.8345479318139788, 0.8540491208796602, 0.8317501307836201, 0.8398020747513537, 0.6862735300194087, 0.7312545135338542, 0.7337114467926564, 0.7393741637085585, 0.7233185285708336, 0.6567521728063315, 0.7418944441517743, 0.7133538515172579, 0.7489585245586282, 0.21512818503010733, 0.13583250914468514, 0.12183102787103783, 0.10404529497511705, 0.12155147909505926, 0.11161737498757207, 0.13566255680944728, 0.13309452614576944, 0.14253313168169335, 0.10277272302788698, 0.11056387527357237, 0.1397652820307307, 0.12202565881943339, 0.13084970314919397, 0.1147862561070846, 0.1107156460462495, 0.09995298490831994, 0.10050844281822302, 0.9308272990481794, 0.9504949701555323, 0.9811165720089283, 0.8895067268384018, 0.9408710023392403, 0.9432442402822587, 0.9560733825932358, 0.9605358821067621, 0.9335584020145802, 0.5122660725578172, 0.5958772319256793, 0.5322793929517171, 0.5916223442813854, 0.5962377974045365, 0.678995085032133, 0.4755485481163809, 0.611284500745387, 0.6076148974411232, 0.8472652261287323, 0.8327665107298321, 0.805940854875559, 0.8202599398726511, 0.8380067227205756, 0.7967428263023542, 0.7747845915458351, 0.724097987386366, 0.8400537185005408, 0.40217369740982223, 0.18484126740458728, 0.36324051532467916, 0.37263017825860756, 0.20392326655030668, 0.41237192075948637, 0.3877440003099134, 0.2856761126710259, 0.3532608298652462, 0.3513102896224257, 0.21481712428264177, 0.2222788220777453, 0.29745499244108997, 0.1793286168051631, 0.22107342973119593, 0.2203450980563506, 0.32266939191309374, 0.43019538881702224, 0.3911602034296203, 0.5774387066263849, 0.48372916708951874, 0.2695686529190173, 0.33243437736866177, 0.40965558842833816, 0.6195002512470358, 0.3893141339666034, 0.3432472999933732, 0.5981410308120142, 0.5898843981655413, 0.7716245008655335, 0.5675668800912007, 0.33000017539178916, 0.6492708360853281, 0.5550601286062737, 0.7212557454319156, 0.6263478190421081, 0.1119579449124063, 0.23667253698061974, 0.2531368640355437, 0.3970862646124953, 0.1677008461223135, 0.13531017600578343, 0.2482487719050257, 0.14463749950973293, 0.12877118481664707, 0.36600715857411137, 0.3882310737730873, 0.29618786249399975, 0.45837274139040207, 0.5503106267937234, 0.3740273380776381, 0.3592493850333405, 0.2952051198575746, 0.37013075102967874, 0.750211501266788, 0.6666848209869163, 0.8116452718924732, 0.6430141624805874, 0.6515772159861947, 0.6732183674250557, 0.7595936637040608, 0.7542405270345075, 0.7362578781754887, 0.10952760241339854, 0.09747974746612997, 0.09881545004929926, 0.1050489895048855, 0.10220713828883776, 0.09193357941703961, 0.0978309479750844, 0.10876801218323995, 0.08878289143401286, 0.1514075341051615, 0.1327516452974833, 0.17921491165456171, 0.14894524904132433, 0.19931045960284177, 0.18922205595252428, 0.13680241626212442, 0.1803489665926591, 0.1462694853480363, 0.5042799239185823, 0.5566296502946564, 0.4306507622010627, 0.43610913378045735, 0.43789129616785827, 0.39826610120660055, 0.47585532965363087, 0.4564648588947926, 0.42518175752329834, 0.32166276967296914, 0.3514889373439898, 0.40557211227448786, 0.2849455300096645, 0.41406695063959165, 0.42012776184416367, 0.4123723247874548, 0.3978376085516072, 0.3542714761047776, 0.19650293233862182, 0.21438895488834142, 0.19605126648810656, 0.1945187066916556, 0.18776672033534592, 0.19023493490633725, 0.1865622335841266, 0.18682236690566367, 0.19951383700140324, 0.20665804903689056, 0.2775759957453616, 0.4478153759030584, 0.2164917410508882, 0.17873148994872046, 0.3428392679693817, 0.18711120661575587, 0.22613832652150356, 0.2631587376403516, 0.2083562319990443, 0.18259649389037402, 0.193431091961622, 0.829689805202301, 0.6978220523817482, 0.19641151775048604, 0.18580525236827816, 0.18014237990605797, 0.6759299998859297, 0.8063676359307129, 0.20185428942065176, 0.2068840166925202, 0.2064155591553115, 0.19895542901668328, 0.5987939544125035, 0.16433429851850268, 0.20842469407016762, 0.20376748218246887, 0.1830568662841463, 0.18714197816037104, 0.18534510948682426, 0.20206754668409033, 0.184903926747361, 0.17763988418342014, 0.18923074738169265, 0.19173453862244738, 0.18889295019318675, 0.07929852808174676, 0.08520227820452109, 0.08239062509294459, 0.08758241093881602, 0.07637705080278523, 0.0853394160128561, 0.09327844562796705, 0.07336447272886404, 0.07660269930659092]}, "mutation_prompt": null}
{"id": "c4b5f0c9-9c0d-4b9a-8bf2-b37b09a98aa2", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 6 * self.dim  # Further reduced population size for faster execution\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.F = 0.6  # Adjusted mutation factor for initial diversity\n        self.CR = 0.9  # Higher crossover rate for increased recombination\n        self.evaluations = 0\n        self.archive = []\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n\n                # Check archive for potential new base vector\n                if len(self.archive) > 0 and np.random.rand() < 0.1:\n                    base_vector = self.archive[np.random.randint(len(self.archive))]\n                else:\n                    base_vector = self.population[a]\n\n                # Mutation with potential archive vector\n                mutant = base_vector + self.F * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, *self.bounds)\n                \n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    # Archive successful mutants\n                    self.archive.append(trial)\n\n                # Dynamic adjustment based on fitness improvement\n                if trial_fitness < self.fitness.mean():\n                    self.F = np.clip(self.F + 0.01 * (0.5 - np.random.rand()), 0.1, 0.9)\n                    self.CR = np.clip(self.CR + 0.01 * (0.5 - np.random.rand()), 0.5, 1.0)\n\n        return self.population[np.argmin(self.fitness)]\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1", "name": "EnhancedMetaheuristicOptimizer", "description": "This algorithm enhances Differential Evolution by incorporating a dynamic archiving mechanism and adaptive scaling, focusing on reducing redundant evaluations and improving convergence speed.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e2479e79-b69d-45fa-b91b-0b20431aaa1a", "metadata": {"aucs": [0.8460838787318541, 0.8662210773214738, 0.8164573346626365, 0.8474260970208942, 0.8564395667445609, 0.8345479318139788, 0.8540491208796602, 0.8317501307836201, 0.8398020747513537, 0.6862735300194087, 0.7312545135338542, 0.7337114467926564, 0.7393741637085585, 0.7233185285708336, 0.6567521728063315, 0.7418944441517743, 0.7133538515172579, 0.7489585245586282, 0.21512818503010733, 0.13583250914468514, 0.12183102787103783, 0.10404529497511705, 0.12155147909505926, 0.11161737498757207, 0.13566255680944728, 0.13309452614576944, 0.14253313168169335, 0.10277272302788698, 0.11056387527357237, 0.1397652820307307, 0.12202565881943339, 0.13084970314919397, 0.1147862561070846, 0.1107156460462495, 0.09995298490831994, 0.10050844281822302, 0.9308272990481794, 0.9504949701555323, 0.9811165720089283, 0.8895067268384018, 0.9408710023392403, 0.9432442402822587, 0.9560733825932358, 0.9605358821067621, 0.9335584020145802, 0.5122660725578172, 0.5958772319256793, 0.5322793929517171, 0.5916223442813854, 0.5962377974045365, 0.678995085032133, 0.4755485481163809, 0.611284500745387, 0.6076148974411232, 0.8472652261287323, 0.8327665107298321, 0.805940854875559, 0.8202599398726511, 0.8380067227205756, 0.7967428263023542, 0.7747845915458351, 0.724097987386366, 0.8400537185005408, 0.40217369740982223, 0.18484126740458728, 0.36324051532467916, 0.37263017825860756, 0.20392326655030668, 0.41237192075948637, 0.3877440003099134, 0.2856761126710259, 0.3532608298652462, 0.3513102896224257, 0.21481712428264177, 0.2222788220777453, 0.29745499244108997, 0.1793286168051631, 0.22107342973119593, 0.2203450980563506, 0.32266939191309374, 0.43019538881702224, 0.3911602034296203, 0.5774387066263849, 0.48372916708951874, 0.2695686529190173, 0.33243437736866177, 0.40965558842833816, 0.6195002512470358, 0.3893141339666034, 0.3432472999933732, 0.5981410308120142, 0.5898843981655413, 0.7716245008655335, 0.5675668800912007, 0.33000017539178916, 0.6492708360853281, 0.5550601286062737, 0.7212557454319156, 0.6263478190421081, 0.1119579449124063, 0.23667253698061974, 0.2531368640355437, 0.3970862646124953, 0.1677008461223135, 0.13531017600578343, 0.2482487719050257, 0.14463749950973293, 0.12877118481664707, 0.36600715857411137, 0.3882310737730873, 0.29618786249399975, 0.45837274139040207, 0.5503106267937234, 0.3740273380776381, 0.3592493850333405, 0.2952051198575746, 0.37013075102967874, 0.750211501266788, 0.6666848209869163, 0.8116452718924732, 0.6430141624805874, 0.6515772159861947, 0.6732183674250557, 0.7595936637040608, 0.7542405270345075, 0.7362578781754887, 0.10952760241339854, 0.09747974746612997, 0.09881545004929926, 0.1050489895048855, 0.10220713828883776, 0.09193357941703961, 0.0978309479750844, 0.10876801218323995, 0.08878289143401286, 0.1514075341051615, 0.1327516452974833, 0.17921491165456171, 0.14894524904132433, 0.19931045960284177, 0.18922205595252428, 0.13680241626212442, 0.1803489665926591, 0.1462694853480363, 0.5042799239185823, 0.5566296502946564, 0.4306507622010627, 0.43610913378045735, 0.43789129616785827, 0.39826610120660055, 0.47585532965363087, 0.4564648588947926, 0.42518175752329834, 0.32166276967296914, 0.3514889373439898, 0.40557211227448786, 0.2849455300096645, 0.41406695063959165, 0.42012776184416367, 0.4123723247874548, 0.3978376085516072, 0.3542714761047776, 0.19650293233862182, 0.21438895488834142, 0.19605126648810656, 0.1945187066916556, 0.18776672033534592, 0.19023493490633725, 0.1865622335841266, 0.18682236690566367, 0.19951383700140324, 0.20665804903689056, 0.2775759957453616, 0.4478153759030584, 0.2164917410508882, 0.17873148994872046, 0.3428392679693817, 0.18711120661575587, 0.22613832652150356, 0.2631587376403516, 0.2083562319990443, 0.18259649389037402, 0.193431091961622, 0.829689805202301, 0.6978220523817482, 0.19641151775048604, 0.18580525236827816, 0.18014237990605797, 0.6759299998859297, 0.8063676359307129, 0.20185428942065176, 0.2068840166925202, 0.2064155591553115, 0.19895542901668328, 0.5987939544125035, 0.16433429851850268, 0.20842469407016762, 0.20376748218246887, 0.1830568662841463, 0.18714197816037104, 0.18534510948682426, 0.20206754668409033, 0.184903926747361, 0.17763988418342014, 0.18923074738169265, 0.19173453862244738, 0.18889295019318675, 0.07929852808174676, 0.08520227820452109, 0.08239062509294459, 0.08758241093881602, 0.07637705080278523, 0.0853394160128561, 0.09327844562796705, 0.07336447272886404, 0.07660269930659092]}, "mutation_prompt": null}
{"id": "6baa1126-21af-464f-9952-376382429b3b", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 6 * self.dim  # Further reduced population size for faster execution\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.F = 0.6  # Adjusted mutation factor for initial diversity\n        self.CR = 0.9  # Higher crossover rate for increased recombination\n        self.evaluations = 0\n        self.archive = []\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n\n                # Check archive for potential new base vector\n                if len(self.archive) > 0 and np.random.rand() < 0.1:\n                    base_vector = self.archive[np.random.randint(len(self.archive))]\n                else:\n                    base_vector = self.population[a]\n\n                # Mutation with potential archive vector\n                mutant = base_vector + self.F * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, *self.bounds)\n                \n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    # Archive successful mutants\n                    self.archive.append(trial)\n\n                # Dynamic adjustment based on fitness improvement\n                if trial_fitness < self.fitness.mean():\n                    self.F = np.clip(self.F + 0.01 * (0.5 - np.random.rand()), 0.1, 0.9)\n                    self.CR = np.clip(self.CR + 0.01 * (0.5 - np.random.rand()), 0.5, 1.0)\n\n        return self.population[np.argmin(self.fitness)]\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1", "name": "EnhancedMetaheuristicOptimizer", "description": "This algorithm enhances Differential Evolution by incorporating a dynamic archiving mechanism and adaptive scaling, focusing on reducing redundant evaluations and improving convergence speed.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e2479e79-b69d-45fa-b91b-0b20431aaa1a", "metadata": {"aucs": [0.8460838787318541, 0.8662210773214738, 0.8164573346626365, 0.8474260970208942, 0.8564395667445609, 0.8345479318139788, 0.8540491208796602, 0.8317501307836201, 0.8398020747513537, 0.6862735300194087, 0.7312545135338542, 0.7337114467926564, 0.7393741637085585, 0.7233185285708336, 0.6567521728063315, 0.7418944441517743, 0.7133538515172579, 0.7489585245586282, 0.21512818503010733, 0.13583250914468514, 0.12183102787103783, 0.10404529497511705, 0.12155147909505926, 0.11161737498757207, 0.13566255680944728, 0.13309452614576944, 0.14253313168169335, 0.10277272302788698, 0.11056387527357237, 0.1397652820307307, 0.12202565881943339, 0.13084970314919397, 0.1147862561070846, 0.1107156460462495, 0.09995298490831994, 0.10050844281822302, 0.9308272990481794, 0.9504949701555323, 0.9811165720089283, 0.8895067268384018, 0.9408710023392403, 0.9432442402822587, 0.9560733825932358, 0.9605358821067621, 0.9335584020145802, 0.5122660725578172, 0.5958772319256793, 0.5322793929517171, 0.5916223442813854, 0.5962377974045365, 0.678995085032133, 0.4755485481163809, 0.611284500745387, 0.6076148974411232, 0.8472652261287323, 0.8327665107298321, 0.805940854875559, 0.8202599398726511, 0.8380067227205756, 0.7967428263023542, 0.7747845915458351, 0.724097987386366, 0.8400537185005408, 0.40217369740982223, 0.18484126740458728, 0.36324051532467916, 0.37263017825860756, 0.20392326655030668, 0.41237192075948637, 0.3877440003099134, 0.2856761126710259, 0.3532608298652462, 0.3513102896224257, 0.21481712428264177, 0.2222788220777453, 0.29745499244108997, 0.1793286168051631, 0.22107342973119593, 0.2203450980563506, 0.32266939191309374, 0.43019538881702224, 0.3911602034296203, 0.5774387066263849, 0.48372916708951874, 0.2695686529190173, 0.33243437736866177, 0.40965558842833816, 0.6195002512470358, 0.3893141339666034, 0.3432472999933732, 0.5981410308120142, 0.5898843981655413, 0.7716245008655335, 0.5675668800912007, 0.33000017539178916, 0.6492708360853281, 0.5550601286062737, 0.7212557454319156, 0.6263478190421081, 0.1119579449124063, 0.23667253698061974, 0.2531368640355437, 0.3970862646124953, 0.1677008461223135, 0.13531017600578343, 0.2482487719050257, 0.14463749950973293, 0.12877118481664707, 0.36600715857411137, 0.3882310737730873, 0.29618786249399975, 0.45837274139040207, 0.5503106267937234, 0.3740273380776381, 0.3592493850333405, 0.2952051198575746, 0.37013075102967874, 0.750211501266788, 0.6666848209869163, 0.8116452718924732, 0.6430141624805874, 0.6515772159861947, 0.6732183674250557, 0.7595936637040608, 0.7542405270345075, 0.7362578781754887, 0.10952760241339854, 0.09747974746612997, 0.09881545004929926, 0.1050489895048855, 0.10220713828883776, 0.09193357941703961, 0.0978309479750844, 0.10876801218323995, 0.08878289143401286, 0.1514075341051615, 0.1327516452974833, 0.17921491165456171, 0.14894524904132433, 0.19931045960284177, 0.18922205595252428, 0.13680241626212442, 0.1803489665926591, 0.1462694853480363, 0.5042799239185823, 0.5566296502946564, 0.4306507622010627, 0.43610913378045735, 0.43789129616785827, 0.39826610120660055, 0.47585532965363087, 0.4564648588947926, 0.42518175752329834, 0.32166276967296914, 0.3514889373439898, 0.40557211227448786, 0.2849455300096645, 0.41406695063959165, 0.42012776184416367, 0.4123723247874548, 0.3978376085516072, 0.3542714761047776, 0.19650293233862182, 0.21438895488834142, 0.19605126648810656, 0.1945187066916556, 0.18776672033534592, 0.19023493490633725, 0.1865622335841266, 0.18682236690566367, 0.19951383700140324, 0.20665804903689056, 0.2775759957453616, 0.4478153759030584, 0.2164917410508882, 0.17873148994872046, 0.3428392679693817, 0.18711120661575587, 0.22613832652150356, 0.2631587376403516, 0.2083562319990443, 0.18259649389037402, 0.193431091961622, 0.829689805202301, 0.6978220523817482, 0.19641151775048604, 0.18580525236827816, 0.18014237990605797, 0.6759299998859297, 0.8063676359307129, 0.20185428942065176, 0.2068840166925202, 0.2064155591553115, 0.19895542901668328, 0.5987939544125035, 0.16433429851850268, 0.20842469407016762, 0.20376748218246887, 0.1830568662841463, 0.18714197816037104, 0.18534510948682426, 0.20206754668409033, 0.184903926747361, 0.17763988418342014, 0.18923074738169265, 0.19173453862244738, 0.18889295019318675, 0.07929852808174676, 0.08520227820452109, 0.08239062509294459, 0.08758241093881602, 0.07637705080278523, 0.0853394160128561, 0.09327844562796705, 0.07336447272886404, 0.07660269930659092]}, "mutation_prompt": null}
{"id": "127ec89c-3808-4ead-936f-264d61c9e75f", "solution": "import numpy as np\n\nclass EnhancedIslandMetaheuristicOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 5 * self.dim  # Reduced population size for quicker processing\n        self.island_count = 3  # Number of islands for diversity\n        self.bounds = (-5.0, 5.0)\n        self.population = [np.random.uniform(*self.bounds, (self.pop_size // self.island_count, self.dim)) for _ in range(self.island_count)]\n        self.fitness = [np.full(self.pop_size // self.island_count, np.inf) for _ in range(self.island_count)]\n        self.F = 0.5  # Mutation factor tuned for better convergence\n        self.CR = 0.85  # Crossover rate tweaked for recombination\n        self.evaluations = 0\n        self.best_solution = None\n        self.best_fitness = np.inf\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        while self.evaluations < self.budget:\n            for island in range(self.island_count):\n                for i in range(self.pop_size // self.island_count):\n                    if self.evaluations >= self.budget:\n                        break\n                    # Select different indices for mutation\n                    candidates = list(range(self.pop_size // self.island_count))\n                    candidates.remove(i)\n                    a, b, c = np.random.choice(candidates, 3, replace=False)\n\n                    # Mutation and recombination\n                    mutant = self.population[island][a] + self.F * (self.population[island][b] - self.population[island][c])\n                    mutant = np.clip(mutant, *self.bounds)\n                    trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[island][i])\n\n                    trial_fitness = func(trial)\n                    self.evaluations += 1\n\n                    # Replace if improved\n                    if trial_fitness < self.fitness[island][i]:\n                        self.population[island][i] = trial\n                        self.fitness[island][i] = trial_fitness\n                        if trial_fitness < self.best_fitness:\n                            self.best_fitness = trial_fitness\n                            self.best_solution = trial\n\n                # Perform local search based on probability\n                if np.random.rand() < 0.2:\n                    self.local_search(island, func)\n\n        return self.best_solution\n\n    def evaluate_population(self, func):\n        for island in range(self.island_count):\n            for i in range(self.pop_size // self.island_count):\n                if self.evaluations >= self.budget:\n                    break\n                self.fitness[island][i] = func(self.population[island][i])\n                self.evaluations += 1\n                if self.fitness[island][i] < self.best_fitness:\n                    self.best_fitness = self.fitness[island][i]\n                    self.best_solution = self.population[island][i]\n\n    def local_search(self, island, func):\n        idx = np.argmin(self.fitness[island])\n        candidate = self.population[island][idx].copy()\n        perturbation = (np.random.rand(self.dim) - 0.5) * 0.1\n        candidate = np.clip(candidate + perturbation, *self.bounds)\n        candidate_fitness = func(candidate)\n        self.evaluations += 1\n        if candidate_fitness < self.fitness[island][idx]:\n            self.population[island][idx] = candidate\n            self.fitness[island][idx] = candidate_fitness\n            if candidate_fitness < self.best_fitness:\n                self.best_fitness = candidate_fitness\n                self.best_solution = candidate", "name": "EnhancedIslandMetaheuristicOptimizer", "description": "This variant integrates adaptive island-based populations and a local search strategy to improve diversity and exploitation balance.", "configspace": "", "generation": 39, "fitness": 0.19905282287407347, "feedback": "The algorithm EnhancedIslandMetaheuristicOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.15.", "error": "", "parent_id": "e2479e79-b69d-45fa-b91b-0b20431aaa1a", "metadata": {"aucs": [0.4701803425739426, 0.3991770333002511, 0.4819402192621497, 0.4432906317819688, 0.5653567570341561, 0.4293357269835746, 0.3499661345573578, 0.5773218305693367, 0.4104762590144002, 0.06033978738314838, 9.999999999998899e-05, 0.08528762999194928, 9.999999999998899e-05, 0.10810417689199325, 0.13338785451880886, 0.18234544160845034, 0.1999010902233226, 0.20693153540433484, 0.15446928287093886, 0.15739800242705804, 0.10777960617418159, 0.11873481698818067, 0.1386462971419935, 0.1344327929891077, 0.10819180753726454, 0.21256365078070372, 0.15612607347956786, 0.09591604952428712, 0.09340140362327332, 0.10756636019486432, 0.07033466101869434, 0.08970957544328229, 0.10762554184264339, 0.08630528271224158, 0.15787783105186226, 0.1011313636448603, 0.8740373073610888, 0.7827035732678211, 0.1397900291881501, 0.13071477936685494, 0.887879353275134, 0.13672738506344972, 0.13163664065410352, 0.2069116376185549, 0.9701847673140854, 0.13835631480146626, 0.11454807797173472, 0.1101628179574593, 0.11226620439679025, 0.1675174230734141, 0.2049135244093332, 0.19984201527417977, 0.09851717588856423, 0.18121782458381586, 0.21020901525731128, 0.22520072385280188, 0.37711193458363534, 0.281045589693918, 0.22125095056348165, 0.1730898886047918, 0.3739570291008585, 0.17604505543036708, 0.17515215211906, 0.124424564672029, 0.24369618180012154, 0.1431904793614045, 0.1483923734763879, 0.37847107106180855, 0.22959646246731946, 0.15538014455988636, 0.20401535295270468, 0.20796910553925596, 0.19650783357269141, 0.1443834728834541, 0.14729399288080236, 0.1448171235417436, 0.10917946763537834, 0.1420658103757434, 0.18825209333542658, 0.25162419275023795, 0.1508705605252706, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001722282676592246, 0.0581148947712008, 0.021037923911737977, 0.035869004753598555, 9.999999999998899e-05, 9.999999999998899e-05, 0.08248004909303652, 0.10090379109810388, 0.08311673839778289, 0.08450681316127229, 0.038668137924293244, 0.07321372244557, 0.1818328990875583, 0.12547034896017684, 0.10889729199543563, 0.022423709924085045, 0.035771090543785466, 0.058960801961106646, 0.056751005795744325, 0.049691702085210676, 0.058891360299443085, 0.0778885079007301, 0.00021348316725311456, 0.06220294418519845, 0.06008427947415729, 0.06979617849002351, 0.08953669277327048, 0.04573298222441957, 0.03894820117948106, 0.13356062508565425, 0.09438671229631435, 0.13317007566099381, 0.08518512004730949, 0.46150382423004654, 0.28317444464661834, 0.4437664794092, 0.36854547126951387, 0.31436507491469023, 0.4073422229869398, 0.3348791599510198, 0.365469600491935, 0.46233606045227094, 0.08831674014622481, 0.1304831552870841, 0.11757123604535269, 0.08550559110464107, 0.1009964448988967, 0.1877894011294753, 0.09394091222370171, 0.10137351893347513, 0.12925648905955078, 0.2163574510992664, 0.21832658283088968, 0.2352432838819949, 0.23635037151731497, 0.3037337177693096, 0.18091315155413878, 0.3232594118767146, 0.199930594041551, 0.21826785476904098, 0.24558984462616296, 0.23305449222691077, 0.2875570714629726, 0.2574841840603189, 0.22577023871882873, 0.30227241727305154, 0.30077245707846245, 0.3153348387725736, 0.27758327001507155, 0.18807552939470806, 0.18457896147818842, 0.1879222135121359, 0.2405081840412293, 0.21644337930456237, 0.2420557127475933, 0.21127982647161891, 0.2632690437058067, 0.13704863187990068, 0.23822723953876657, 0.2183560394830476, 0.20835071432329955, 0.20693187429344007, 0.21696831428327734, 0.20197721626253973, 0.23481704600801145, 0.20375442404620459, 0.1923799471907175, 0.1839269617517001, 0.22620048258688363, 0.19918243003865, 0.37230763452899396, 0.20269770889563687, 0.18463895876029235, 0.25186313640749247, 0.24660039401601797, 0.19376760397081816, 0.16864327206344965, 0.18699974501459216, 0.4021860284196841, 0.1818088741584709, 0.48104431589434826, 0.1550975411710095, 0.16627667959505543, 0.20807671040071618, 0.6635196232854909, 0.2949693857305602, 0.3772903635664324, 0.43188259856325606, 0.2821884033648988, 0.16724403088518125, 0.16772092541989114, 0.20280783532321978, 0.16684188661507848, 0.1561907598072283, 0.2028793257411785, 0.19331341218620024, 0.19247027496497648, 0.22011694530858783, 0.20236277186549323, 0.19089315574712307, 0.22992227189179626, 0.18381565144552392, 0.19142756550525042, 0.08834866733825364, 0.08586438310210254, 0.08451956048974574, 0.11423539066549182, 0.08922723616014405, 0.101886252590623, 0.10312212892888872, 0.09916192692103865, 0.07010547501356013]}, "mutation_prompt": null}
{"id": "c7dd7773-6337-467e-8536-5d2a46a981f2", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 6 * self.dim  # Further reduced population size for faster execution\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.F = 0.6  # Adjusted mutation factor for initial diversity\n        self.CR = 0.9  # Higher crossover rate for increased recombination\n        self.evaluations = 0\n        self.archive = []\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n\n                # Check archive for potential new base vector\n                if len(self.archive) > 0 and np.random.rand() < 0.1:\n                    base_vector = self.archive[np.random.randint(len(self.archive))]\n                else:\n                    base_vector = self.population[a]\n\n                # Mutation with potential archive vector\n                mutant = base_vector + self.F * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, *self.bounds)\n                \n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    # Archive successful mutants\n                    self.archive.append(trial)\n\n                # Dynamic adjustment based on fitness improvement\n                if trial_fitness < self.fitness.mean():\n                    self.F = np.clip(self.F + 0.01 * (0.5 - np.random.rand()), 0.1, 0.9)\n                    self.CR = np.clip(self.CR + 0.01 * (0.5 - np.random.rand()), 0.5, 1.0)\n\n        return self.population[np.argmin(self.fitness)]\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1", "name": "EnhancedMetaheuristicOptimizer", "description": "This algorithm enhances Differential Evolution by incorporating a dynamic archiving mechanism and adaptive scaling, focusing on reducing redundant evaluations and improving convergence speed.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e2479e79-b69d-45fa-b91b-0b20431aaa1a", "metadata": {"aucs": [0.8460838787318541, 0.8662210773214738, 0.8164573346626365, 0.8474260970208942, 0.8564395667445609, 0.8345479318139788, 0.8540491208796602, 0.8317501307836201, 0.8398020747513537, 0.6862735300194087, 0.7312545135338542, 0.7337114467926564, 0.7393741637085585, 0.7233185285708336, 0.6567521728063315, 0.7418944441517743, 0.7133538515172579, 0.7489585245586282, 0.21512818503010733, 0.13583250914468514, 0.12183102787103783, 0.10404529497511705, 0.12155147909505926, 0.11161737498757207, 0.13566255680944728, 0.13309452614576944, 0.14253313168169335, 0.10277272302788698, 0.11056387527357237, 0.1397652820307307, 0.12202565881943339, 0.13084970314919397, 0.1147862561070846, 0.1107156460462495, 0.09995298490831994, 0.10050844281822302, 0.9308272990481794, 0.9504949701555323, 0.9811165720089283, 0.8895067268384018, 0.9408710023392403, 0.9432442402822587, 0.9560733825932358, 0.9605358821067621, 0.9335584020145802, 0.5122660725578172, 0.5958772319256793, 0.5322793929517171, 0.5916223442813854, 0.5962377974045365, 0.678995085032133, 0.4755485481163809, 0.611284500745387, 0.6076148974411232, 0.8472652261287323, 0.8327665107298321, 0.805940854875559, 0.8202599398726511, 0.8380067227205756, 0.7967428263023542, 0.7747845915458351, 0.724097987386366, 0.8400537185005408, 0.40217369740982223, 0.18484126740458728, 0.36324051532467916, 0.37263017825860756, 0.20392326655030668, 0.41237192075948637, 0.3877440003099134, 0.2856761126710259, 0.3532608298652462, 0.3513102896224257, 0.21481712428264177, 0.2222788220777453, 0.29745499244108997, 0.1793286168051631, 0.22107342973119593, 0.2203450980563506, 0.32266939191309374, 0.43019538881702224, 0.3911602034296203, 0.5774387066263849, 0.48372916708951874, 0.2695686529190173, 0.33243437736866177, 0.40965558842833816, 0.6195002512470358, 0.3893141339666034, 0.3432472999933732, 0.5981410308120142, 0.5898843981655413, 0.7716245008655335, 0.5675668800912007, 0.33000017539178916, 0.6492708360853281, 0.5550601286062737, 0.7212557454319156, 0.6263478190421081, 0.1119579449124063, 0.23667253698061974, 0.2531368640355437, 0.3970862646124953, 0.1677008461223135, 0.13531017600578343, 0.2482487719050257, 0.14463749950973293, 0.12877118481664707, 0.36600715857411137, 0.3882310737730873, 0.29618786249399975, 0.45837274139040207, 0.5503106267937234, 0.3740273380776381, 0.3592493850333405, 0.2952051198575746, 0.37013075102967874, 0.750211501266788, 0.6666848209869163, 0.8116452718924732, 0.6430141624805874, 0.6515772159861947, 0.6732183674250557, 0.7595936637040608, 0.7542405270345075, 0.7362578781754887, 0.10952760241339854, 0.09747974746612997, 0.09881545004929926, 0.1050489895048855, 0.10220713828883776, 0.09193357941703961, 0.0978309479750844, 0.10876801218323995, 0.08878289143401286, 0.1514075341051615, 0.1327516452974833, 0.17921491165456171, 0.14894524904132433, 0.19931045960284177, 0.18922205595252428, 0.13680241626212442, 0.1803489665926591, 0.1462694853480363, 0.5042799239185823, 0.5566296502946564, 0.4306507622010627, 0.43610913378045735, 0.43789129616785827, 0.39826610120660055, 0.47585532965363087, 0.4564648588947926, 0.42518175752329834, 0.32166276967296914, 0.3514889373439898, 0.40557211227448786, 0.2849455300096645, 0.41406695063959165, 0.42012776184416367, 0.4123723247874548, 0.3978376085516072, 0.3542714761047776, 0.19650293233862182, 0.21438895488834142, 0.19605126648810656, 0.1945187066916556, 0.18776672033534592, 0.19023493490633725, 0.1865622335841266, 0.18682236690566367, 0.19951383700140324, 0.20665804903689056, 0.2775759957453616, 0.4478153759030584, 0.2164917410508882, 0.17873148994872046, 0.3428392679693817, 0.18711120661575587, 0.22613832652150356, 0.2631587376403516, 0.2083562319990443, 0.18259649389037402, 0.193431091961622, 0.829689805202301, 0.6978220523817482, 0.19641151775048604, 0.18580525236827816, 0.18014237990605797, 0.6759299998859297, 0.8063676359307129, 0.20185428942065176, 0.2068840166925202, 0.2064155591553115, 0.19895542901668328, 0.5987939544125035, 0.16433429851850268, 0.20842469407016762, 0.20376748218246887, 0.1830568662841463, 0.18714197816037104, 0.18534510948682426, 0.20206754668409033, 0.184903926747361, 0.17763988418342014, 0.18923074738169265, 0.19173453862244738, 0.18889295019318675, 0.07929852808174676, 0.08520227820452109, 0.08239062509294459, 0.08758241093881602, 0.07637705080278523, 0.0853394160128561, 0.09327844562796705, 0.07336447272886404, 0.07660269930659092]}, "mutation_prompt": null}
{"id": "77f9c273-30d1-4efa-9575-21d5350dda0b", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 6 * self.dim  # Further reduced population size for faster execution\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.F = 0.6  # Adjusted mutation factor for initial diversity\n        self.CR = 0.9  # Higher crossover rate for increased recombination\n        self.evaluations = 0\n        self.archive = []\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n\n                # Check archive for potential new base vector\n                if len(self.archive) > 0 and np.random.rand() < 0.1:\n                    base_vector = self.archive[np.random.randint(len(self.archive))]\n                else:\n                    base_vector = self.population[a]\n\n                # Mutation with potential archive vector\n                mutant = base_vector + self.F * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, *self.bounds)\n                \n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    # Archive successful mutants\n                    self.archive.append(trial)\n\n                # Dynamic adjustment based on fitness improvement\n                if trial_fitness < self.fitness.mean():\n                    self.F = np.clip(self.F + 0.01 * (0.5 - np.random.rand()), 0.1, 0.9)\n                    self.CR = np.clip(self.CR + 0.01 * (0.5 - np.random.rand()), 0.5, 1.0)\n\n        return self.population[np.argmin(self.fitness)]\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1", "name": "EnhancedMetaheuristicOptimizer", "description": "This algorithm enhances Differential Evolution by incorporating a dynamic archiving mechanism and adaptive scaling, focusing on reducing redundant evaluations and improving convergence speed.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e2479e79-b69d-45fa-b91b-0b20431aaa1a", "metadata": {"aucs": [0.8460838787318541, 0.8662210773214738, 0.8164573346626365, 0.8474260970208942, 0.8564395667445609, 0.8345479318139788, 0.8540491208796602, 0.8317501307836201, 0.8398020747513537, 0.6862735300194087, 0.7312545135338542, 0.7337114467926564, 0.7393741637085585, 0.7233185285708336, 0.6567521728063315, 0.7418944441517743, 0.7133538515172579, 0.7489585245586282, 0.21512818503010733, 0.13583250914468514, 0.12183102787103783, 0.10404529497511705, 0.12155147909505926, 0.11161737498757207, 0.13566255680944728, 0.13309452614576944, 0.14253313168169335, 0.10277272302788698, 0.11056387527357237, 0.1397652820307307, 0.12202565881943339, 0.13084970314919397, 0.1147862561070846, 0.1107156460462495, 0.09995298490831994, 0.10050844281822302, 0.9308272990481794, 0.9504949701555323, 0.9811165720089283, 0.8895067268384018, 0.9408710023392403, 0.9432442402822587, 0.9560733825932358, 0.9605358821067621, 0.9335584020145802, 0.5122660725578172, 0.5958772319256793, 0.5322793929517171, 0.5916223442813854, 0.5962377974045365, 0.678995085032133, 0.4755485481163809, 0.611284500745387, 0.6076148974411232, 0.8472652261287323, 0.8327665107298321, 0.805940854875559, 0.8202599398726511, 0.8380067227205756, 0.7967428263023542, 0.7747845915458351, 0.724097987386366, 0.8400537185005408, 0.40217369740982223, 0.18484126740458728, 0.36324051532467916, 0.37263017825860756, 0.20392326655030668, 0.41237192075948637, 0.3877440003099134, 0.2856761126710259, 0.3532608298652462, 0.3513102896224257, 0.21481712428264177, 0.2222788220777453, 0.29745499244108997, 0.1793286168051631, 0.22107342973119593, 0.2203450980563506, 0.32266939191309374, 0.43019538881702224, 0.3911602034296203, 0.5774387066263849, 0.48372916708951874, 0.2695686529190173, 0.33243437736866177, 0.40965558842833816, 0.6195002512470358, 0.3893141339666034, 0.3432472999933732, 0.5981410308120142, 0.5898843981655413, 0.7716245008655335, 0.5675668800912007, 0.33000017539178916, 0.6492708360853281, 0.5550601286062737, 0.7212557454319156, 0.6263478190421081, 0.1119579449124063, 0.23667253698061974, 0.2531368640355437, 0.3970862646124953, 0.1677008461223135, 0.13531017600578343, 0.2482487719050257, 0.14463749950973293, 0.12877118481664707, 0.36600715857411137, 0.3882310737730873, 0.29618786249399975, 0.45837274139040207, 0.5503106267937234, 0.3740273380776381, 0.3592493850333405, 0.2952051198575746, 0.37013075102967874, 0.750211501266788, 0.6666848209869163, 0.8116452718924732, 0.6430141624805874, 0.6515772159861947, 0.6732183674250557, 0.7595936637040608, 0.7542405270345075, 0.7362578781754887, 0.10952760241339854, 0.09747974746612997, 0.09881545004929926, 0.1050489895048855, 0.10220713828883776, 0.09193357941703961, 0.0978309479750844, 0.10876801218323995, 0.08878289143401286, 0.1514075341051615, 0.1327516452974833, 0.17921491165456171, 0.14894524904132433, 0.19931045960284177, 0.18922205595252428, 0.13680241626212442, 0.1803489665926591, 0.1462694853480363, 0.5042799239185823, 0.5566296502946564, 0.4306507622010627, 0.43610913378045735, 0.43789129616785827, 0.39826610120660055, 0.47585532965363087, 0.4564648588947926, 0.42518175752329834, 0.32166276967296914, 0.3514889373439898, 0.40557211227448786, 0.2849455300096645, 0.41406695063959165, 0.42012776184416367, 0.4123723247874548, 0.3978376085516072, 0.3542714761047776, 0.19650293233862182, 0.21438895488834142, 0.19605126648810656, 0.1945187066916556, 0.18776672033534592, 0.19023493490633725, 0.1865622335841266, 0.18682236690566367, 0.19951383700140324, 0.20665804903689056, 0.2775759957453616, 0.4478153759030584, 0.2164917410508882, 0.17873148994872046, 0.3428392679693817, 0.18711120661575587, 0.22613832652150356, 0.2631587376403516, 0.2083562319990443, 0.18259649389037402, 0.193431091961622, 0.829689805202301, 0.6978220523817482, 0.19641151775048604, 0.18580525236827816, 0.18014237990605797, 0.6759299998859297, 0.8063676359307129, 0.20185428942065176, 0.2068840166925202, 0.2064155591553115, 0.19895542901668328, 0.5987939544125035, 0.16433429851850268, 0.20842469407016762, 0.20376748218246887, 0.1830568662841463, 0.18714197816037104, 0.18534510948682426, 0.20206754668409033, 0.184903926747361, 0.17763988418342014, 0.18923074738169265, 0.19173453862244738, 0.18889295019318675, 0.07929852808174676, 0.08520227820452109, 0.08239062509294459, 0.08758241093881602, 0.07637705080278523, 0.0853394160128561, 0.09327844562796705, 0.07336447272886404, 0.07660269930659092]}, "mutation_prompt": null}
{"id": "ad18d284-2a95-476e-82cb-455a8a5dec13", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 6 * self.dim  # Further reduced population size for faster execution\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.F = 0.6  # Adjusted mutation factor for initial diversity\n        self.CR = 0.9  # Higher crossover rate for increased recombination\n        self.evaluations = 0\n        self.archive = []\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n\n                # Check archive for potential new base vector\n                if len(self.archive) > 0 and np.random.rand() < 0.1:\n                    base_vector = self.archive[np.random.randint(len(self.archive))]\n                else:\n                    base_vector = self.population[a]\n\n                # Mutation with potential archive vector\n                mutant = base_vector + self.F * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, *self.bounds)\n                \n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    # Archive successful mutants\n                    self.archive.append(trial)\n\n                # Dynamic adjustment based on fitness improvement\n                if trial_fitness < self.fitness.mean():\n                    self.F = np.clip(self.F + 0.01 * (0.5 - np.random.rand()), 0.1, 0.9)\n                    self.CR = np.clip(self.CR + 0.01 * (0.5 - np.random.rand()), 0.5, 1.0)\n\n        return self.population[np.argmin(self.fitness)]\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1", "name": "EnhancedMetaheuristicOptimizer", "description": "This algorithm enhances Differential Evolution by incorporating a dynamic archiving mechanism and adaptive scaling, focusing on reducing redundant evaluations and improving convergence speed.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e2479e79-b69d-45fa-b91b-0b20431aaa1a", "metadata": {"aucs": [0.8460838787318541, 0.8662210773214738, 0.8164573346626365, 0.8474260970208942, 0.8564395667445609, 0.8345479318139788, 0.8540491208796602, 0.8317501307836201, 0.8398020747513537, 0.6862735300194087, 0.7312545135338542, 0.7337114467926564, 0.7393741637085585, 0.7233185285708336, 0.6567521728063315, 0.7418944441517743, 0.7133538515172579, 0.7489585245586282, 0.21512818503010733, 0.13583250914468514, 0.12183102787103783, 0.10404529497511705, 0.12155147909505926, 0.11161737498757207, 0.13566255680944728, 0.13309452614576944, 0.14253313168169335, 0.10277272302788698, 0.11056387527357237, 0.1397652820307307, 0.12202565881943339, 0.13084970314919397, 0.1147862561070846, 0.1107156460462495, 0.09995298490831994, 0.10050844281822302, 0.9308272990481794, 0.9504949701555323, 0.9811165720089283, 0.8895067268384018, 0.9408710023392403, 0.9432442402822587, 0.9560733825932358, 0.9605358821067621, 0.9335584020145802, 0.5122660725578172, 0.5958772319256793, 0.5322793929517171, 0.5916223442813854, 0.5962377974045365, 0.678995085032133, 0.4755485481163809, 0.611284500745387, 0.6076148974411232, 0.8472652261287323, 0.8327665107298321, 0.805940854875559, 0.8202599398726511, 0.8380067227205756, 0.7967428263023542, 0.7747845915458351, 0.724097987386366, 0.8400537185005408, 0.40217369740982223, 0.18484126740458728, 0.36324051532467916, 0.37263017825860756, 0.20392326655030668, 0.41237192075948637, 0.3877440003099134, 0.2856761126710259, 0.3532608298652462, 0.3513102896224257, 0.21481712428264177, 0.2222788220777453, 0.29745499244108997, 0.1793286168051631, 0.22107342973119593, 0.2203450980563506, 0.32266939191309374, 0.43019538881702224, 0.3911602034296203, 0.5774387066263849, 0.48372916708951874, 0.2695686529190173, 0.33243437736866177, 0.40965558842833816, 0.6195002512470358, 0.3893141339666034, 0.3432472999933732, 0.5981410308120142, 0.5898843981655413, 0.7716245008655335, 0.5675668800912007, 0.33000017539178916, 0.6492708360853281, 0.5550601286062737, 0.7212557454319156, 0.6263478190421081, 0.1119579449124063, 0.23667253698061974, 0.2531368640355437, 0.3970862646124953, 0.1677008461223135, 0.13531017600578343, 0.2482487719050257, 0.14463749950973293, 0.12877118481664707, 0.36600715857411137, 0.3882310737730873, 0.29618786249399975, 0.45837274139040207, 0.5503106267937234, 0.3740273380776381, 0.3592493850333405, 0.2952051198575746, 0.37013075102967874, 0.750211501266788, 0.6666848209869163, 0.8116452718924732, 0.6430141624805874, 0.6515772159861947, 0.6732183674250557, 0.7595936637040608, 0.7542405270345075, 0.7362578781754887, 0.10952760241339854, 0.09747974746612997, 0.09881545004929926, 0.1050489895048855, 0.10220713828883776, 0.09193357941703961, 0.0978309479750844, 0.10876801218323995, 0.08878289143401286, 0.1514075341051615, 0.1327516452974833, 0.17921491165456171, 0.14894524904132433, 0.19931045960284177, 0.18922205595252428, 0.13680241626212442, 0.1803489665926591, 0.1462694853480363, 0.5042799239185823, 0.5566296502946564, 0.4306507622010627, 0.43610913378045735, 0.43789129616785827, 0.39826610120660055, 0.47585532965363087, 0.4564648588947926, 0.42518175752329834, 0.32166276967296914, 0.3514889373439898, 0.40557211227448786, 0.2849455300096645, 0.41406695063959165, 0.42012776184416367, 0.4123723247874548, 0.3978376085516072, 0.3542714761047776, 0.19650293233862182, 0.21438895488834142, 0.19605126648810656, 0.1945187066916556, 0.18776672033534592, 0.19023493490633725, 0.1865622335841266, 0.18682236690566367, 0.19951383700140324, 0.20665804903689056, 0.2775759957453616, 0.4478153759030584, 0.2164917410508882, 0.17873148994872046, 0.3428392679693817, 0.18711120661575587, 0.22613832652150356, 0.2631587376403516, 0.2083562319990443, 0.18259649389037402, 0.193431091961622, 0.829689805202301, 0.6978220523817482, 0.19641151775048604, 0.18580525236827816, 0.18014237990605797, 0.6759299998859297, 0.8063676359307129, 0.20185428942065176, 0.2068840166925202, 0.2064155591553115, 0.19895542901668328, 0.5987939544125035, 0.16433429851850268, 0.20842469407016762, 0.20376748218246887, 0.1830568662841463, 0.18714197816037104, 0.18534510948682426, 0.20206754668409033, 0.184903926747361, 0.17763988418342014, 0.18923074738169265, 0.19173453862244738, 0.18889295019318675, 0.07929852808174676, 0.08520227820452109, 0.08239062509294459, 0.08758241093881602, 0.07637705080278523, 0.0853394160128561, 0.09327844562796705, 0.07336447272886404, 0.07660269930659092]}, "mutation_prompt": null}
{"id": "e26cc806-387e-4c21-8268-7b6125783ad5", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 6 * self.dim  # Further reduced population size for faster execution\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.F = 0.6  # Adjusted mutation factor for initial diversity\n        self.CR = 0.9  # Higher crossover rate for increased recombination\n        self.evaluations = 0\n        self.archive = []\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n\n                # Check archive for potential new base vector\n                if len(self.archive) > 0 and np.random.rand() < 0.1:\n                    base_vector = self.archive[np.random.randint(len(self.archive))]\n                else:\n                    base_vector = self.population[a]\n\n                # Mutation with potential archive vector\n                mutant = base_vector + self.F * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, *self.bounds)\n                \n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    # Archive successful mutants\n                    self.archive.append(trial)\n\n                # Dynamic adjustment based on fitness improvement\n                if trial_fitness < self.fitness.mean():\n                    self.F = np.clip(self.F + 0.01 * (0.5 - np.random.rand()), 0.1, 0.9)\n                    self.CR = np.clip(self.CR + 0.01 * (0.5 - np.random.rand()), 0.5, 1.0)\n\n        return self.population[np.argmin(self.fitness)]\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1", "name": "EnhancedMetaheuristicOptimizer", "description": "This algorithm enhances Differential Evolution by incorporating a dynamic archiving mechanism and adaptive scaling, focusing on reducing redundant evaluations and improving convergence speed.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e2479e79-b69d-45fa-b91b-0b20431aaa1a", "metadata": {"aucs": [0.8460838787318541, 0.8662210773214738, 0.8164573346626365, 0.8474260970208942, 0.8564395667445609, 0.8345479318139788, 0.8540491208796602, 0.8317501307836201, 0.8398020747513537, 0.6862735300194087, 0.7312545135338542, 0.7337114467926564, 0.7393741637085585, 0.7233185285708336, 0.6567521728063315, 0.7418944441517743, 0.7133538515172579, 0.7489585245586282, 0.21512818503010733, 0.13583250914468514, 0.12183102787103783, 0.10404529497511705, 0.12155147909505926, 0.11161737498757207, 0.13566255680944728, 0.13309452614576944, 0.14253313168169335, 0.10277272302788698, 0.11056387527357237, 0.1397652820307307, 0.12202565881943339, 0.13084970314919397, 0.1147862561070846, 0.1107156460462495, 0.09995298490831994, 0.10050844281822302, 0.9308272990481794, 0.9504949701555323, 0.9811165720089283, 0.8895067268384018, 0.9408710023392403, 0.9432442402822587, 0.9560733825932358, 0.9605358821067621, 0.9335584020145802, 0.5122660725578172, 0.5958772319256793, 0.5322793929517171, 0.5916223442813854, 0.5962377974045365, 0.678995085032133, 0.4755485481163809, 0.611284500745387, 0.6076148974411232, 0.8472652261287323, 0.8327665107298321, 0.805940854875559, 0.8202599398726511, 0.8380067227205756, 0.7967428263023542, 0.7747845915458351, 0.724097987386366, 0.8400537185005408, 0.40217369740982223, 0.18484126740458728, 0.36324051532467916, 0.37263017825860756, 0.20392326655030668, 0.41237192075948637, 0.3877440003099134, 0.2856761126710259, 0.3532608298652462, 0.3513102896224257, 0.21481712428264177, 0.2222788220777453, 0.29745499244108997, 0.1793286168051631, 0.22107342973119593, 0.2203450980563506, 0.32266939191309374, 0.43019538881702224, 0.3911602034296203, 0.5774387066263849, 0.48372916708951874, 0.2695686529190173, 0.33243437736866177, 0.40965558842833816, 0.6195002512470358, 0.3893141339666034, 0.3432472999933732, 0.5981410308120142, 0.5898843981655413, 0.7716245008655335, 0.5675668800912007, 0.33000017539178916, 0.6492708360853281, 0.5550601286062737, 0.7212557454319156, 0.6263478190421081, 0.1119579449124063, 0.23667253698061974, 0.2531368640355437, 0.3970862646124953, 0.1677008461223135, 0.13531017600578343, 0.2482487719050257, 0.14463749950973293, 0.12877118481664707, 0.36600715857411137, 0.3882310737730873, 0.29618786249399975, 0.45837274139040207, 0.5503106267937234, 0.3740273380776381, 0.3592493850333405, 0.2952051198575746, 0.37013075102967874, 0.750211501266788, 0.6666848209869163, 0.8116452718924732, 0.6430141624805874, 0.6515772159861947, 0.6732183674250557, 0.7595936637040608, 0.7542405270345075, 0.7362578781754887, 0.10952760241339854, 0.09747974746612997, 0.09881545004929926, 0.1050489895048855, 0.10220713828883776, 0.09193357941703961, 0.0978309479750844, 0.10876801218323995, 0.08878289143401286, 0.1514075341051615, 0.1327516452974833, 0.17921491165456171, 0.14894524904132433, 0.19931045960284177, 0.18922205595252428, 0.13680241626212442, 0.1803489665926591, 0.1462694853480363, 0.5042799239185823, 0.5566296502946564, 0.4306507622010627, 0.43610913378045735, 0.43789129616785827, 0.39826610120660055, 0.47585532965363087, 0.4564648588947926, 0.42518175752329834, 0.32166276967296914, 0.3514889373439898, 0.40557211227448786, 0.2849455300096645, 0.41406695063959165, 0.42012776184416367, 0.4123723247874548, 0.3978376085516072, 0.3542714761047776, 0.19650293233862182, 0.21438895488834142, 0.19605126648810656, 0.1945187066916556, 0.18776672033534592, 0.19023493490633725, 0.1865622335841266, 0.18682236690566367, 0.19951383700140324, 0.20665804903689056, 0.2775759957453616, 0.4478153759030584, 0.2164917410508882, 0.17873148994872046, 0.3428392679693817, 0.18711120661575587, 0.22613832652150356, 0.2631587376403516, 0.2083562319990443, 0.18259649389037402, 0.193431091961622, 0.829689805202301, 0.6978220523817482, 0.19641151775048604, 0.18580525236827816, 0.18014237990605797, 0.6759299998859297, 0.8063676359307129, 0.20185428942065176, 0.2068840166925202, 0.2064155591553115, 0.19895542901668328, 0.5987939544125035, 0.16433429851850268, 0.20842469407016762, 0.20376748218246887, 0.1830568662841463, 0.18714197816037104, 0.18534510948682426, 0.20206754668409033, 0.184903926747361, 0.17763988418342014, 0.18923074738169265, 0.19173453862244738, 0.18889295019318675, 0.07929852808174676, 0.08520227820452109, 0.08239062509294459, 0.08758241093881602, 0.07637705080278523, 0.0853394160128561, 0.09327844562796705, 0.07336447272886404, 0.07660269930659092]}, "mutation_prompt": null}
{"id": "60ea65c0-96f8-46ee-9a4d-205e36d9cd69", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 6 * self.dim  # Further reduced population size for faster execution\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.F = 0.6  # Adjusted mutation factor for initial diversity\n        self.CR = 0.9  # Higher crossover rate for increased recombination\n        self.evaluations = 0\n        self.archive = []\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n\n                # Check archive for potential new base vector\n                if len(self.archive) > 0 and np.random.rand() < 0.1:\n                    base_vector = self.archive[np.random.randint(len(self.archive))]\n                else:\n                    base_vector = self.population[a]\n\n                # Mutation with potential archive vector\n                mutant = base_vector + self.F * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, *self.bounds)\n                \n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    # Archive successful mutants\n                    self.archive.append(trial)\n\n                # Dynamic adjustment based on fitness improvement\n                if trial_fitness < self.fitness.mean():\n                    self.F = np.clip(self.F + 0.01 * (0.5 - np.random.rand()), 0.1, 0.9)\n                    self.CR = np.clip(self.CR + 0.01 * (0.5 - np.random.rand()), 0.5, 1.0)\n\n        return self.population[np.argmin(self.fitness)]\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1", "name": "EnhancedMetaheuristicOptimizer", "description": "This algorithm enhances Differential Evolution by incorporating a dynamic archiving mechanism and adaptive scaling, focusing on reducing redundant evaluations and improving convergence speed.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e2479e79-b69d-45fa-b91b-0b20431aaa1a", "metadata": {"aucs": [0.8460838787318541, 0.8662210773214738, 0.8164573346626365, 0.8474260970208942, 0.8564395667445609, 0.8345479318139788, 0.8540491208796602, 0.8317501307836201, 0.8398020747513537, 0.6862735300194087, 0.7312545135338542, 0.7337114467926564, 0.7393741637085585, 0.7233185285708336, 0.6567521728063315, 0.7418944441517743, 0.7133538515172579, 0.7489585245586282, 0.21512818503010733, 0.13583250914468514, 0.12183102787103783, 0.10404529497511705, 0.12155147909505926, 0.11161737498757207, 0.13566255680944728, 0.13309452614576944, 0.14253313168169335, 0.10277272302788698, 0.11056387527357237, 0.1397652820307307, 0.12202565881943339, 0.13084970314919397, 0.1147862561070846, 0.1107156460462495, 0.09995298490831994, 0.10050844281822302, 0.9308272990481794, 0.9504949701555323, 0.9811165720089283, 0.8895067268384018, 0.9408710023392403, 0.9432442402822587, 0.9560733825932358, 0.9605358821067621, 0.9335584020145802, 0.5122660725578172, 0.5958772319256793, 0.5322793929517171, 0.5916223442813854, 0.5962377974045365, 0.678995085032133, 0.4755485481163809, 0.611284500745387, 0.6076148974411232, 0.8472652261287323, 0.8327665107298321, 0.805940854875559, 0.8202599398726511, 0.8380067227205756, 0.7967428263023542, 0.7747845915458351, 0.724097987386366, 0.8400537185005408, 0.40217369740982223, 0.18484126740458728, 0.36324051532467916, 0.37263017825860756, 0.20392326655030668, 0.41237192075948637, 0.3877440003099134, 0.2856761126710259, 0.3532608298652462, 0.3513102896224257, 0.21481712428264177, 0.2222788220777453, 0.29745499244108997, 0.1793286168051631, 0.22107342973119593, 0.2203450980563506, 0.32266939191309374, 0.43019538881702224, 0.3911602034296203, 0.5774387066263849, 0.48372916708951874, 0.2695686529190173, 0.33243437736866177, 0.40965558842833816, 0.6195002512470358, 0.3893141339666034, 0.3432472999933732, 0.5981410308120142, 0.5898843981655413, 0.7716245008655335, 0.5675668800912007, 0.33000017539178916, 0.6492708360853281, 0.5550601286062737, 0.7212557454319156, 0.6263478190421081, 0.1119579449124063, 0.23667253698061974, 0.2531368640355437, 0.3970862646124953, 0.1677008461223135, 0.13531017600578343, 0.2482487719050257, 0.14463749950973293, 0.12877118481664707, 0.36600715857411137, 0.3882310737730873, 0.29618786249399975, 0.45837274139040207, 0.5503106267937234, 0.3740273380776381, 0.3592493850333405, 0.2952051198575746, 0.37013075102967874, 0.750211501266788, 0.6666848209869163, 0.8116452718924732, 0.6430141624805874, 0.6515772159861947, 0.6732183674250557, 0.7595936637040608, 0.7542405270345075, 0.7362578781754887, 0.10952760241339854, 0.09747974746612997, 0.09881545004929926, 0.1050489895048855, 0.10220713828883776, 0.09193357941703961, 0.0978309479750844, 0.10876801218323995, 0.08878289143401286, 0.1514075341051615, 0.1327516452974833, 0.17921491165456171, 0.14894524904132433, 0.19931045960284177, 0.18922205595252428, 0.13680241626212442, 0.1803489665926591, 0.1462694853480363, 0.5042799239185823, 0.5566296502946564, 0.4306507622010627, 0.43610913378045735, 0.43789129616785827, 0.39826610120660055, 0.47585532965363087, 0.4564648588947926, 0.42518175752329834, 0.32166276967296914, 0.3514889373439898, 0.40557211227448786, 0.2849455300096645, 0.41406695063959165, 0.42012776184416367, 0.4123723247874548, 0.3978376085516072, 0.3542714761047776, 0.19650293233862182, 0.21438895488834142, 0.19605126648810656, 0.1945187066916556, 0.18776672033534592, 0.19023493490633725, 0.1865622335841266, 0.18682236690566367, 0.19951383700140324, 0.20665804903689056, 0.2775759957453616, 0.4478153759030584, 0.2164917410508882, 0.17873148994872046, 0.3428392679693817, 0.18711120661575587, 0.22613832652150356, 0.2631587376403516, 0.2083562319990443, 0.18259649389037402, 0.193431091961622, 0.829689805202301, 0.6978220523817482, 0.19641151775048604, 0.18580525236827816, 0.18014237990605797, 0.6759299998859297, 0.8063676359307129, 0.20185428942065176, 0.2068840166925202, 0.2064155591553115, 0.19895542901668328, 0.5987939544125035, 0.16433429851850268, 0.20842469407016762, 0.20376748218246887, 0.1830568662841463, 0.18714197816037104, 0.18534510948682426, 0.20206754668409033, 0.184903926747361, 0.17763988418342014, 0.18923074738169265, 0.19173453862244738, 0.18889295019318675, 0.07929852808174676, 0.08520227820452109, 0.08239062509294459, 0.08758241093881602, 0.07637705080278523, 0.0853394160128561, 0.09327844562796705, 0.07336447272886404, 0.07660269930659092]}, "mutation_prompt": null}
{"id": "7702148e-c99c-4f4a-a6d3-6e3413ce3f21", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 6 * self.dim  # Further reduced population size for faster execution\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.F = 0.6  # Adjusted mutation factor for initial diversity\n        self.CR = 0.9  # Higher crossover rate for increased recombination\n        self.evaluations = 0\n        self.archive = []\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n\n                # Check archive for potential new base vector\n                if len(self.archive) > 0 and np.random.rand() < 0.1:\n                    base_vector = self.archive[np.random.randint(len(self.archive))]\n                else:\n                    base_vector = self.population[a]\n\n                # Mutation with potential archive vector\n                mutant = base_vector + self.F * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, *self.bounds)\n                \n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    # Archive successful mutants\n                    self.archive.append(trial)\n\n                # Dynamic adjustment based on fitness improvement\n                if trial_fitness < self.fitness.mean():\n                    self.F = np.clip(self.F + 0.01 * (0.5 - np.random.rand()), 0.1, 0.9)\n                    self.CR = np.clip(self.CR + 0.01 * (0.5 - np.random.rand()), 0.5, 1.0)\n\n        return self.population[np.argmin(self.fitness)]\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1", "name": "EnhancedMetaheuristicOptimizer", "description": "This algorithm enhances Differential Evolution by incorporating a dynamic archiving mechanism and adaptive scaling, focusing on reducing redundant evaluations and improving convergence speed.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e2479e79-b69d-45fa-b91b-0b20431aaa1a", "metadata": {"aucs": [0.8460838787318541, 0.8662210773214738, 0.8164573346626365, 0.8474260970208942, 0.8564395667445609, 0.8345479318139788, 0.8540491208796602, 0.8317501307836201, 0.8398020747513537, 0.6862735300194087, 0.7312545135338542, 0.7337114467926564, 0.7393741637085585, 0.7233185285708336, 0.6567521728063315, 0.7418944441517743, 0.7133538515172579, 0.7489585245586282, 0.21512818503010733, 0.13583250914468514, 0.12183102787103783, 0.10404529497511705, 0.12155147909505926, 0.11161737498757207, 0.13566255680944728, 0.13309452614576944, 0.14253313168169335, 0.10277272302788698, 0.11056387527357237, 0.1397652820307307, 0.12202565881943339, 0.13084970314919397, 0.1147862561070846, 0.1107156460462495, 0.09995298490831994, 0.10050844281822302, 0.9308272990481794, 0.9504949701555323, 0.9811165720089283, 0.8895067268384018, 0.9408710023392403, 0.9432442402822587, 0.9560733825932358, 0.9605358821067621, 0.9335584020145802, 0.5122660725578172, 0.5958772319256793, 0.5322793929517171, 0.5916223442813854, 0.5962377974045365, 0.678995085032133, 0.4755485481163809, 0.611284500745387, 0.6076148974411232, 0.8472652261287323, 0.8327665107298321, 0.805940854875559, 0.8202599398726511, 0.8380067227205756, 0.7967428263023542, 0.7747845915458351, 0.724097987386366, 0.8400537185005408, 0.40217369740982223, 0.18484126740458728, 0.36324051532467916, 0.37263017825860756, 0.20392326655030668, 0.41237192075948637, 0.3877440003099134, 0.2856761126710259, 0.3532608298652462, 0.3513102896224257, 0.21481712428264177, 0.2222788220777453, 0.29745499244108997, 0.1793286168051631, 0.22107342973119593, 0.2203450980563506, 0.32266939191309374, 0.43019538881702224, 0.3911602034296203, 0.5774387066263849, 0.48372916708951874, 0.2695686529190173, 0.33243437736866177, 0.40965558842833816, 0.6195002512470358, 0.3893141339666034, 0.3432472999933732, 0.5981410308120142, 0.5898843981655413, 0.7716245008655335, 0.5675668800912007, 0.33000017539178916, 0.6492708360853281, 0.5550601286062737, 0.7212557454319156, 0.6263478190421081, 0.1119579449124063, 0.23667253698061974, 0.2531368640355437, 0.3970862646124953, 0.1677008461223135, 0.13531017600578343, 0.2482487719050257, 0.14463749950973293, 0.12877118481664707, 0.36600715857411137, 0.3882310737730873, 0.29618786249399975, 0.45837274139040207, 0.5503106267937234, 0.3740273380776381, 0.3592493850333405, 0.2952051198575746, 0.37013075102967874, 0.750211501266788, 0.6666848209869163, 0.8116452718924732, 0.6430141624805874, 0.6515772159861947, 0.6732183674250557, 0.7595936637040608, 0.7542405270345075, 0.7362578781754887, 0.10952760241339854, 0.09747974746612997, 0.09881545004929926, 0.1050489895048855, 0.10220713828883776, 0.09193357941703961, 0.0978309479750844, 0.10876801218323995, 0.08878289143401286, 0.1514075341051615, 0.1327516452974833, 0.17921491165456171, 0.14894524904132433, 0.19931045960284177, 0.18922205595252428, 0.13680241626212442, 0.1803489665926591, 0.1462694853480363, 0.5042799239185823, 0.5566296502946564, 0.4306507622010627, 0.43610913378045735, 0.43789129616785827, 0.39826610120660055, 0.47585532965363087, 0.4564648588947926, 0.42518175752329834, 0.32166276967296914, 0.3514889373439898, 0.40557211227448786, 0.2849455300096645, 0.41406695063959165, 0.42012776184416367, 0.4123723247874548, 0.3978376085516072, 0.3542714761047776, 0.19650293233862182, 0.21438895488834142, 0.19605126648810656, 0.1945187066916556, 0.18776672033534592, 0.19023493490633725, 0.1865622335841266, 0.18682236690566367, 0.19951383700140324, 0.20665804903689056, 0.2775759957453616, 0.4478153759030584, 0.2164917410508882, 0.17873148994872046, 0.3428392679693817, 0.18711120661575587, 0.22613832652150356, 0.2631587376403516, 0.2083562319990443, 0.18259649389037402, 0.193431091961622, 0.829689805202301, 0.6978220523817482, 0.19641151775048604, 0.18580525236827816, 0.18014237990605797, 0.6759299998859297, 0.8063676359307129, 0.20185428942065176, 0.2068840166925202, 0.2064155591553115, 0.19895542901668328, 0.5987939544125035, 0.16433429851850268, 0.20842469407016762, 0.20376748218246887, 0.1830568662841463, 0.18714197816037104, 0.18534510948682426, 0.20206754668409033, 0.184903926747361, 0.17763988418342014, 0.18923074738169265, 0.19173453862244738, 0.18889295019318675, 0.07929852808174676, 0.08520227820452109, 0.08239062509294459, 0.08758241093881602, 0.07637705080278523, 0.0853394160128561, 0.09327844562796705, 0.07336447272886404, 0.07660269930659092]}, "mutation_prompt": null}
{"id": "0f642515-2b11-4bdf-a0f5-c2b524379698", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 6 * self.dim  # Further reduced population size for faster execution\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.F = 0.6  # Adjusted mutation factor for initial diversity\n        self.CR = 0.9  # Higher crossover rate for increased recombination\n        self.evaluations = 0\n        self.archive = []\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n\n                # Check archive for potential new base vector\n                if len(self.archive) > 0 and np.random.rand() < 0.1:\n                    base_vector = self.archive[np.random.randint(len(self.archive))]\n                else:\n                    base_vector = self.population[a]\n\n                # Mutation with potential archive vector\n                mutant = base_vector + self.F * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, *self.bounds)\n                \n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    # Archive successful mutants\n                    self.archive.append(trial)\n\n                # Dynamic adjustment based on fitness improvement\n                if trial_fitness < self.fitness.mean():\n                    self.F = np.clip(self.F + 0.01 * (0.5 - np.random.rand()), 0.1, 0.9)\n                    self.CR = np.clip(self.CR + 0.01 * (0.5 - np.random.rand()), 0.5, 1.0)\n\n        return self.population[np.argmin(self.fitness)]\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1", "name": "EnhancedMetaheuristicOptimizer", "description": "This algorithm enhances Differential Evolution by incorporating a dynamic archiving mechanism and adaptive scaling, focusing on reducing redundant evaluations and improving convergence speed.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e2479e79-b69d-45fa-b91b-0b20431aaa1a", "metadata": {"aucs": [0.8460838787318541, 0.8662210773214738, 0.8164573346626365, 0.8474260970208942, 0.8564395667445609, 0.8345479318139788, 0.8540491208796602, 0.8317501307836201, 0.8398020747513537, 0.6862735300194087, 0.7312545135338542, 0.7337114467926564, 0.7393741637085585, 0.7233185285708336, 0.6567521728063315, 0.7418944441517743, 0.7133538515172579, 0.7489585245586282, 0.21512818503010733, 0.13583250914468514, 0.12183102787103783, 0.10404529497511705, 0.12155147909505926, 0.11161737498757207, 0.13566255680944728, 0.13309452614576944, 0.14253313168169335, 0.10277272302788698, 0.11056387527357237, 0.1397652820307307, 0.12202565881943339, 0.13084970314919397, 0.1147862561070846, 0.1107156460462495, 0.09995298490831994, 0.10050844281822302, 0.9308272990481794, 0.9504949701555323, 0.9811165720089283, 0.8895067268384018, 0.9408710023392403, 0.9432442402822587, 0.9560733825932358, 0.9605358821067621, 0.9335584020145802, 0.5122660725578172, 0.5958772319256793, 0.5322793929517171, 0.5916223442813854, 0.5962377974045365, 0.678995085032133, 0.4755485481163809, 0.611284500745387, 0.6076148974411232, 0.8472652261287323, 0.8327665107298321, 0.805940854875559, 0.8202599398726511, 0.8380067227205756, 0.7967428263023542, 0.7747845915458351, 0.724097987386366, 0.8400537185005408, 0.40217369740982223, 0.18484126740458728, 0.36324051532467916, 0.37263017825860756, 0.20392326655030668, 0.41237192075948637, 0.3877440003099134, 0.2856761126710259, 0.3532608298652462, 0.3513102896224257, 0.21481712428264177, 0.2222788220777453, 0.29745499244108997, 0.1793286168051631, 0.22107342973119593, 0.2203450980563506, 0.32266939191309374, 0.43019538881702224, 0.3911602034296203, 0.5774387066263849, 0.48372916708951874, 0.2695686529190173, 0.33243437736866177, 0.40965558842833816, 0.6195002512470358, 0.3893141339666034, 0.3432472999933732, 0.5981410308120142, 0.5898843981655413, 0.7716245008655335, 0.5675668800912007, 0.33000017539178916, 0.6492708360853281, 0.5550601286062737, 0.7212557454319156, 0.6263478190421081, 0.1119579449124063, 0.23667253698061974, 0.2531368640355437, 0.3970862646124953, 0.1677008461223135, 0.13531017600578343, 0.2482487719050257, 0.14463749950973293, 0.12877118481664707, 0.36600715857411137, 0.3882310737730873, 0.29618786249399975, 0.45837274139040207, 0.5503106267937234, 0.3740273380776381, 0.3592493850333405, 0.2952051198575746, 0.37013075102967874, 0.750211501266788, 0.6666848209869163, 0.8116452718924732, 0.6430141624805874, 0.6515772159861947, 0.6732183674250557, 0.7595936637040608, 0.7542405270345075, 0.7362578781754887, 0.10952760241339854, 0.09747974746612997, 0.09881545004929926, 0.1050489895048855, 0.10220713828883776, 0.09193357941703961, 0.0978309479750844, 0.10876801218323995, 0.08878289143401286, 0.1514075341051615, 0.1327516452974833, 0.17921491165456171, 0.14894524904132433, 0.19931045960284177, 0.18922205595252428, 0.13680241626212442, 0.1803489665926591, 0.1462694853480363, 0.5042799239185823, 0.5566296502946564, 0.4306507622010627, 0.43610913378045735, 0.43789129616785827, 0.39826610120660055, 0.47585532965363087, 0.4564648588947926, 0.42518175752329834, 0.32166276967296914, 0.3514889373439898, 0.40557211227448786, 0.2849455300096645, 0.41406695063959165, 0.42012776184416367, 0.4123723247874548, 0.3978376085516072, 0.3542714761047776, 0.19650293233862182, 0.21438895488834142, 0.19605126648810656, 0.1945187066916556, 0.18776672033534592, 0.19023493490633725, 0.1865622335841266, 0.18682236690566367, 0.19951383700140324, 0.20665804903689056, 0.2775759957453616, 0.4478153759030584, 0.2164917410508882, 0.17873148994872046, 0.3428392679693817, 0.18711120661575587, 0.22613832652150356, 0.2631587376403516, 0.2083562319990443, 0.18259649389037402, 0.193431091961622, 0.829689805202301, 0.6978220523817482, 0.19641151775048604, 0.18580525236827816, 0.18014237990605797, 0.6759299998859297, 0.8063676359307129, 0.20185428942065176, 0.2068840166925202, 0.2064155591553115, 0.19895542901668328, 0.5987939544125035, 0.16433429851850268, 0.20842469407016762, 0.20376748218246887, 0.1830568662841463, 0.18714197816037104, 0.18534510948682426, 0.20206754668409033, 0.184903926747361, 0.17763988418342014, 0.18923074738169265, 0.19173453862244738, 0.18889295019318675, 0.07929852808174676, 0.08520227820452109, 0.08239062509294459, 0.08758241093881602, 0.07637705080278523, 0.0853394160128561, 0.09327844562796705, 0.07336447272886404, 0.07660269930659092]}, "mutation_prompt": null}
{"id": "3099fee6-ff4d-42b9-8583-0f81cbf0861d", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 6 * self.dim  # Further reduced population size for faster execution\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.F = 0.6  # Adjusted mutation factor for initial diversity\n        self.CR = 0.9  # Higher crossover rate for increased recombination\n        self.evaluations = 0\n        self.archive = []\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n\n                # Check archive for potential new base vector\n                if len(self.archive) > 0 and np.random.rand() < 0.1:\n                    base_vector = self.archive[np.random.randint(len(self.archive))]\n                else:\n                    base_vector = self.population[a]\n\n                # Mutation with potential archive vector\n                mutant = base_vector + self.F * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, *self.bounds)\n                \n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    # Archive successful mutants\n                    self.archive.append(trial)\n\n                # Dynamic adjustment based on fitness improvement\n                if trial_fitness < self.fitness.mean():\n                    self.F = np.clip(self.F + 0.01 * (0.5 - np.random.rand()), 0.1, 0.9)\n                    self.CR = np.clip(self.CR + 0.01 * (0.5 - np.random.rand()), 0.5, 1.0)\n\n        return self.population[np.argmin(self.fitness)]\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1", "name": "EnhancedMetaheuristicOptimizer", "description": "This algorithm enhances Differential Evolution by incorporating a dynamic archiving mechanism and adaptive scaling, focusing on reducing redundant evaluations and improving convergence speed.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e2479e79-b69d-45fa-b91b-0b20431aaa1a", "metadata": {"aucs": [0.8460838787318541, 0.8662210773214738, 0.8164573346626365, 0.8474260970208942, 0.8564395667445609, 0.8345479318139788, 0.8540491208796602, 0.8317501307836201, 0.8398020747513537, 0.6862735300194087, 0.7312545135338542, 0.7337114467926564, 0.7393741637085585, 0.7233185285708336, 0.6567521728063315, 0.7418944441517743, 0.7133538515172579, 0.7489585245586282, 0.21512818503010733, 0.13583250914468514, 0.12183102787103783, 0.10404529497511705, 0.12155147909505926, 0.11161737498757207, 0.13566255680944728, 0.13309452614576944, 0.14253313168169335, 0.10277272302788698, 0.11056387527357237, 0.1397652820307307, 0.12202565881943339, 0.13084970314919397, 0.1147862561070846, 0.1107156460462495, 0.09995298490831994, 0.10050844281822302, 0.9308272990481794, 0.9504949701555323, 0.9811165720089283, 0.8895067268384018, 0.9408710023392403, 0.9432442402822587, 0.9560733825932358, 0.9605358821067621, 0.9335584020145802, 0.5122660725578172, 0.5958772319256793, 0.5322793929517171, 0.5916223442813854, 0.5962377974045365, 0.678995085032133, 0.4755485481163809, 0.611284500745387, 0.6076148974411232, 0.8472652261287323, 0.8327665107298321, 0.805940854875559, 0.8202599398726511, 0.8380067227205756, 0.7967428263023542, 0.7747845915458351, 0.724097987386366, 0.8400537185005408, 0.40217369740982223, 0.18484126740458728, 0.36324051532467916, 0.37263017825860756, 0.20392326655030668, 0.41237192075948637, 0.3877440003099134, 0.2856761126710259, 0.3532608298652462, 0.3513102896224257, 0.21481712428264177, 0.2222788220777453, 0.29745499244108997, 0.1793286168051631, 0.22107342973119593, 0.2203450980563506, 0.32266939191309374, 0.43019538881702224, 0.3911602034296203, 0.5774387066263849, 0.48372916708951874, 0.2695686529190173, 0.33243437736866177, 0.40965558842833816, 0.6195002512470358, 0.3893141339666034, 0.3432472999933732, 0.5981410308120142, 0.5898843981655413, 0.7716245008655335, 0.5675668800912007, 0.33000017539178916, 0.6492708360853281, 0.5550601286062737, 0.7212557454319156, 0.6263478190421081, 0.1119579449124063, 0.23667253698061974, 0.2531368640355437, 0.3970862646124953, 0.1677008461223135, 0.13531017600578343, 0.2482487719050257, 0.14463749950973293, 0.12877118481664707, 0.36600715857411137, 0.3882310737730873, 0.29618786249399975, 0.45837274139040207, 0.5503106267937234, 0.3740273380776381, 0.3592493850333405, 0.2952051198575746, 0.37013075102967874, 0.750211501266788, 0.6666848209869163, 0.8116452718924732, 0.6430141624805874, 0.6515772159861947, 0.6732183674250557, 0.7595936637040608, 0.7542405270345075, 0.7362578781754887, 0.10952760241339854, 0.09747974746612997, 0.09881545004929926, 0.1050489895048855, 0.10220713828883776, 0.09193357941703961, 0.0978309479750844, 0.10876801218323995, 0.08878289143401286, 0.1514075341051615, 0.1327516452974833, 0.17921491165456171, 0.14894524904132433, 0.19931045960284177, 0.18922205595252428, 0.13680241626212442, 0.1803489665926591, 0.1462694853480363, 0.5042799239185823, 0.5566296502946564, 0.4306507622010627, 0.43610913378045735, 0.43789129616785827, 0.39826610120660055, 0.47585532965363087, 0.4564648588947926, 0.42518175752329834, 0.32166276967296914, 0.3514889373439898, 0.40557211227448786, 0.2849455300096645, 0.41406695063959165, 0.42012776184416367, 0.4123723247874548, 0.3978376085516072, 0.3542714761047776, 0.19650293233862182, 0.21438895488834142, 0.19605126648810656, 0.1945187066916556, 0.18776672033534592, 0.19023493490633725, 0.1865622335841266, 0.18682236690566367, 0.19951383700140324, 0.20665804903689056, 0.2775759957453616, 0.4478153759030584, 0.2164917410508882, 0.17873148994872046, 0.3428392679693817, 0.18711120661575587, 0.22613832652150356, 0.2631587376403516, 0.2083562319990443, 0.18259649389037402, 0.193431091961622, 0.829689805202301, 0.6978220523817482, 0.19641151775048604, 0.18580525236827816, 0.18014237990605797, 0.6759299998859297, 0.8063676359307129, 0.20185428942065176, 0.2068840166925202, 0.2064155591553115, 0.19895542901668328, 0.5987939544125035, 0.16433429851850268, 0.20842469407016762, 0.20376748218246887, 0.1830568662841463, 0.18714197816037104, 0.18534510948682426, 0.20206754668409033, 0.184903926747361, 0.17763988418342014, 0.18923074738169265, 0.19173453862244738, 0.18889295019318675, 0.07929852808174676, 0.08520227820452109, 0.08239062509294459, 0.08758241093881602, 0.07637705080278523, 0.0853394160128561, 0.09327844562796705, 0.07336447272886404, 0.07660269930659092]}, "mutation_prompt": null}
{"id": "16f5316b-ffcb-4317-a2f4-6ea44e73374c", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 6 * self.dim  # Further reduced population size for faster execution\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.F = 0.6  # Adjusted mutation factor for initial diversity\n        self.CR = 0.9  # Higher crossover rate for increased recombination\n        self.evaluations = 0\n        self.archive = []\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n\n                # Check archive for potential new base vector\n                if len(self.archive) > 0 and np.random.rand() < 0.1:\n                    base_vector = self.archive[np.random.randint(len(self.archive))]\n                else:\n                    base_vector = self.population[a]\n\n                # Mutation with potential archive vector\n                mutant = base_vector + self.F * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, *self.bounds)\n                \n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    # Archive successful mutants\n                    self.archive.append(trial)\n\n                # Dynamic adjustment based on fitness improvement\n                if trial_fitness < self.fitness.mean():\n                    self.F = np.clip(self.F + 0.01 * (0.5 - np.random.rand()), 0.1, 0.9)\n                    self.CR = np.clip(self.CR + 0.01 * (0.5 - np.random.rand()), 0.5, 1.0)\n\n        return self.population[np.argmin(self.fitness)]\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1", "name": "EnhancedMetaheuristicOptimizer", "description": "This algorithm enhances Differential Evolution by incorporating a dynamic archiving mechanism and adaptive scaling, focusing on reducing redundant evaluations and improving convergence speed.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e2479e79-b69d-45fa-b91b-0b20431aaa1a", "metadata": {"aucs": [0.8460838787318541, 0.8662210773214738, 0.8164573346626365, 0.8474260970208942, 0.8564395667445609, 0.8345479318139788, 0.8540491208796602, 0.8317501307836201, 0.8398020747513537, 0.6862735300194087, 0.7312545135338542, 0.7337114467926564, 0.7393741637085585, 0.7233185285708336, 0.6567521728063315, 0.7418944441517743, 0.7133538515172579, 0.7489585245586282, 0.21512818503010733, 0.13583250914468514, 0.12183102787103783, 0.10404529497511705, 0.12155147909505926, 0.11161737498757207, 0.13566255680944728, 0.13309452614576944, 0.14253313168169335, 0.10277272302788698, 0.11056387527357237, 0.1397652820307307, 0.12202565881943339, 0.13084970314919397, 0.1147862561070846, 0.1107156460462495, 0.09995298490831994, 0.10050844281822302, 0.9308272990481794, 0.9504949701555323, 0.9811165720089283, 0.8895067268384018, 0.9408710023392403, 0.9432442402822587, 0.9560733825932358, 0.9605358821067621, 0.9335584020145802, 0.5122660725578172, 0.5958772319256793, 0.5322793929517171, 0.5916223442813854, 0.5962377974045365, 0.678995085032133, 0.4755485481163809, 0.611284500745387, 0.6076148974411232, 0.8472652261287323, 0.8327665107298321, 0.805940854875559, 0.8202599398726511, 0.8380067227205756, 0.7967428263023542, 0.7747845915458351, 0.724097987386366, 0.8400537185005408, 0.40217369740982223, 0.18484126740458728, 0.36324051532467916, 0.37263017825860756, 0.20392326655030668, 0.41237192075948637, 0.3877440003099134, 0.2856761126710259, 0.3532608298652462, 0.3513102896224257, 0.21481712428264177, 0.2222788220777453, 0.29745499244108997, 0.1793286168051631, 0.22107342973119593, 0.2203450980563506, 0.32266939191309374, 0.43019538881702224, 0.3911602034296203, 0.5774387066263849, 0.48372916708951874, 0.2695686529190173, 0.33243437736866177, 0.40965558842833816, 0.6195002512470358, 0.3893141339666034, 0.3432472999933732, 0.5981410308120142, 0.5898843981655413, 0.7716245008655335, 0.5675668800912007, 0.33000017539178916, 0.6492708360853281, 0.5550601286062737, 0.7212557454319156, 0.6263478190421081, 0.1119579449124063, 0.23667253698061974, 0.2531368640355437, 0.3970862646124953, 0.1677008461223135, 0.13531017600578343, 0.2482487719050257, 0.14463749950973293, 0.12877118481664707, 0.36600715857411137, 0.3882310737730873, 0.29618786249399975, 0.45837274139040207, 0.5503106267937234, 0.3740273380776381, 0.3592493850333405, 0.2952051198575746, 0.37013075102967874, 0.750211501266788, 0.6666848209869163, 0.8116452718924732, 0.6430141624805874, 0.6515772159861947, 0.6732183674250557, 0.7595936637040608, 0.7542405270345075, 0.7362578781754887, 0.10952760241339854, 0.09747974746612997, 0.09881545004929926, 0.1050489895048855, 0.10220713828883776, 0.09193357941703961, 0.0978309479750844, 0.10876801218323995, 0.08878289143401286, 0.1514075341051615, 0.1327516452974833, 0.17921491165456171, 0.14894524904132433, 0.19931045960284177, 0.18922205595252428, 0.13680241626212442, 0.1803489665926591, 0.1462694853480363, 0.5042799239185823, 0.5566296502946564, 0.4306507622010627, 0.43610913378045735, 0.43789129616785827, 0.39826610120660055, 0.47585532965363087, 0.4564648588947926, 0.42518175752329834, 0.32166276967296914, 0.3514889373439898, 0.40557211227448786, 0.2849455300096645, 0.41406695063959165, 0.42012776184416367, 0.4123723247874548, 0.3978376085516072, 0.3542714761047776, 0.19650293233862182, 0.21438895488834142, 0.19605126648810656, 0.1945187066916556, 0.18776672033534592, 0.19023493490633725, 0.1865622335841266, 0.18682236690566367, 0.19951383700140324, 0.20665804903689056, 0.2775759957453616, 0.4478153759030584, 0.2164917410508882, 0.17873148994872046, 0.3428392679693817, 0.18711120661575587, 0.22613832652150356, 0.2631587376403516, 0.2083562319990443, 0.18259649389037402, 0.193431091961622, 0.829689805202301, 0.6978220523817482, 0.19641151775048604, 0.18580525236827816, 0.18014237990605797, 0.6759299998859297, 0.8063676359307129, 0.20185428942065176, 0.2068840166925202, 0.2064155591553115, 0.19895542901668328, 0.5987939544125035, 0.16433429851850268, 0.20842469407016762, 0.20376748218246887, 0.1830568662841463, 0.18714197816037104, 0.18534510948682426, 0.20206754668409033, 0.184903926747361, 0.17763988418342014, 0.18923074738169265, 0.19173453862244738, 0.18889295019318675, 0.07929852808174676, 0.08520227820452109, 0.08239062509294459, 0.08758241093881602, 0.07637705080278523, 0.0853394160128561, 0.09327844562796705, 0.07336447272886404, 0.07660269930659092]}, "mutation_prompt": null}
{"id": "6c9cacdb-bb0e-4eb6-947d-96e55cea89cc", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 6 * self.dim  # Further reduced population size for faster execution\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.F = 0.6  # Adjusted mutation factor for initial diversity\n        self.CR = 0.9  # Higher crossover rate for increased recombination\n        self.evaluations = 0\n        self.archive = []\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n\n                # Check archive for potential new base vector\n                if len(self.archive) > 0 and np.random.rand() < 0.1:\n                    base_vector = self.archive[np.random.randint(len(self.archive))]\n                else:\n                    base_vector = self.population[a]\n\n                # Mutation with potential archive vector\n                mutant = base_vector + self.F * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, *self.bounds)\n                \n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    # Archive successful mutants\n                    self.archive.append(trial)\n\n                # Dynamic adjustment based on fitness improvement\n                if trial_fitness < self.fitness.mean():\n                    self.F = np.clip(self.F + 0.01 * (0.5 - np.random.rand()), 0.1, 0.9)\n                    self.CR = np.clip(self.CR + 0.01 * (0.5 - np.random.rand()), 0.5, 1.0)\n\n        return self.population[np.argmin(self.fitness)]\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1", "name": "EnhancedMetaheuristicOptimizer", "description": "This algorithm enhances Differential Evolution by incorporating a dynamic archiving mechanism and adaptive scaling, focusing on reducing redundant evaluations and improving convergence speed.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e2479e79-b69d-45fa-b91b-0b20431aaa1a", "metadata": {"aucs": [0.8460838787318541, 0.8662210773214738, 0.8164573346626365, 0.8474260970208942, 0.8564395667445609, 0.8345479318139788, 0.8540491208796602, 0.8317501307836201, 0.8398020747513537, 0.6862735300194087, 0.7312545135338542, 0.7337114467926564, 0.7393741637085585, 0.7233185285708336, 0.6567521728063315, 0.7418944441517743, 0.7133538515172579, 0.7489585245586282, 0.21512818503010733, 0.13583250914468514, 0.12183102787103783, 0.10404529497511705, 0.12155147909505926, 0.11161737498757207, 0.13566255680944728, 0.13309452614576944, 0.14253313168169335, 0.10277272302788698, 0.11056387527357237, 0.1397652820307307, 0.12202565881943339, 0.13084970314919397, 0.1147862561070846, 0.1107156460462495, 0.09995298490831994, 0.10050844281822302, 0.9308272990481794, 0.9504949701555323, 0.9811165720089283, 0.8895067268384018, 0.9408710023392403, 0.9432442402822587, 0.9560733825932358, 0.9605358821067621, 0.9335584020145802, 0.5122660725578172, 0.5958772319256793, 0.5322793929517171, 0.5916223442813854, 0.5962377974045365, 0.678995085032133, 0.4755485481163809, 0.611284500745387, 0.6076148974411232, 0.8472652261287323, 0.8327665107298321, 0.805940854875559, 0.8202599398726511, 0.8380067227205756, 0.7967428263023542, 0.7747845915458351, 0.724097987386366, 0.8400537185005408, 0.40217369740982223, 0.18484126740458728, 0.36324051532467916, 0.37263017825860756, 0.20392326655030668, 0.41237192075948637, 0.3877440003099134, 0.2856761126710259, 0.3532608298652462, 0.3513102896224257, 0.21481712428264177, 0.2222788220777453, 0.29745499244108997, 0.1793286168051631, 0.22107342973119593, 0.2203450980563506, 0.32266939191309374, 0.43019538881702224, 0.3911602034296203, 0.5774387066263849, 0.48372916708951874, 0.2695686529190173, 0.33243437736866177, 0.40965558842833816, 0.6195002512470358, 0.3893141339666034, 0.3432472999933732, 0.5981410308120142, 0.5898843981655413, 0.7716245008655335, 0.5675668800912007, 0.33000017539178916, 0.6492708360853281, 0.5550601286062737, 0.7212557454319156, 0.6263478190421081, 0.1119579449124063, 0.23667253698061974, 0.2531368640355437, 0.3970862646124953, 0.1677008461223135, 0.13531017600578343, 0.2482487719050257, 0.14463749950973293, 0.12877118481664707, 0.36600715857411137, 0.3882310737730873, 0.29618786249399975, 0.45837274139040207, 0.5503106267937234, 0.3740273380776381, 0.3592493850333405, 0.2952051198575746, 0.37013075102967874, 0.750211501266788, 0.6666848209869163, 0.8116452718924732, 0.6430141624805874, 0.6515772159861947, 0.6732183674250557, 0.7595936637040608, 0.7542405270345075, 0.7362578781754887, 0.10952760241339854, 0.09747974746612997, 0.09881545004929926, 0.1050489895048855, 0.10220713828883776, 0.09193357941703961, 0.0978309479750844, 0.10876801218323995, 0.08878289143401286, 0.1514075341051615, 0.1327516452974833, 0.17921491165456171, 0.14894524904132433, 0.19931045960284177, 0.18922205595252428, 0.13680241626212442, 0.1803489665926591, 0.1462694853480363, 0.5042799239185823, 0.5566296502946564, 0.4306507622010627, 0.43610913378045735, 0.43789129616785827, 0.39826610120660055, 0.47585532965363087, 0.4564648588947926, 0.42518175752329834, 0.32166276967296914, 0.3514889373439898, 0.40557211227448786, 0.2849455300096645, 0.41406695063959165, 0.42012776184416367, 0.4123723247874548, 0.3978376085516072, 0.3542714761047776, 0.19650293233862182, 0.21438895488834142, 0.19605126648810656, 0.1945187066916556, 0.18776672033534592, 0.19023493490633725, 0.1865622335841266, 0.18682236690566367, 0.19951383700140324, 0.20665804903689056, 0.2775759957453616, 0.4478153759030584, 0.2164917410508882, 0.17873148994872046, 0.3428392679693817, 0.18711120661575587, 0.22613832652150356, 0.2631587376403516, 0.2083562319990443, 0.18259649389037402, 0.193431091961622, 0.829689805202301, 0.6978220523817482, 0.19641151775048604, 0.18580525236827816, 0.18014237990605797, 0.6759299998859297, 0.8063676359307129, 0.20185428942065176, 0.2068840166925202, 0.2064155591553115, 0.19895542901668328, 0.5987939544125035, 0.16433429851850268, 0.20842469407016762, 0.20376748218246887, 0.1830568662841463, 0.18714197816037104, 0.18534510948682426, 0.20206754668409033, 0.184903926747361, 0.17763988418342014, 0.18923074738169265, 0.19173453862244738, 0.18889295019318675, 0.07929852808174676, 0.08520227820452109, 0.08239062509294459, 0.08758241093881602, 0.07637705080278523, 0.0853394160128561, 0.09327844562796705, 0.07336447272886404, 0.07660269930659092]}, "mutation_prompt": null}
{"id": "a5ce66b6-ec98-4438-8d24-8d87b1a0ed72", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 6 * self.dim  # Further reduced population size for faster execution\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.F = 0.6  # Adjusted mutation factor for initial diversity\n        self.CR = 0.9  # Higher crossover rate for increased recombination\n        self.evaluations = 0\n        self.archive = []\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n\n                # Check archive for potential new base vector\n                if len(self.archive) > 0 and np.random.rand() < 0.1:\n                    base_vector = self.archive[np.random.randint(len(self.archive))]\n                else:\n                    base_vector = self.population[a]\n\n                # Mutation with potential archive vector\n                mutant = base_vector + self.F * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, *self.bounds)\n                \n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    # Archive successful mutants\n                    self.archive.append(trial)\n\n                # Dynamic adjustment based on fitness improvement\n                if trial_fitness < self.fitness.mean():\n                    self.F = np.clip(self.F + 0.01 * (0.5 - np.random.rand()), 0.1, 0.9)\n                    self.CR = np.clip(self.CR + 0.01 * (0.5 - np.random.rand()), 0.5, 1.0)\n\n        return self.population[np.argmin(self.fitness)]\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1", "name": "EnhancedMetaheuristicOptimizer", "description": "This algorithm enhances Differential Evolution by incorporating a dynamic archiving mechanism and adaptive scaling, focusing on reducing redundant evaluations and improving convergence speed.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e2479e79-b69d-45fa-b91b-0b20431aaa1a", "metadata": {"aucs": [0.8460838787318541, 0.8662210773214738, 0.8164573346626365, 0.8474260970208942, 0.8564395667445609, 0.8345479318139788, 0.8540491208796602, 0.8317501307836201, 0.8398020747513537, 0.6862735300194087, 0.7312545135338542, 0.7337114467926564, 0.7393741637085585, 0.7233185285708336, 0.6567521728063315, 0.7418944441517743, 0.7133538515172579, 0.7489585245586282, 0.21512818503010733, 0.13583250914468514, 0.12183102787103783, 0.10404529497511705, 0.12155147909505926, 0.11161737498757207, 0.13566255680944728, 0.13309452614576944, 0.14253313168169335, 0.10277272302788698, 0.11056387527357237, 0.1397652820307307, 0.12202565881943339, 0.13084970314919397, 0.1147862561070846, 0.1107156460462495, 0.09995298490831994, 0.10050844281822302, 0.9308272990481794, 0.9504949701555323, 0.9811165720089283, 0.8895067268384018, 0.9408710023392403, 0.9432442402822587, 0.9560733825932358, 0.9605358821067621, 0.9335584020145802, 0.5122660725578172, 0.5958772319256793, 0.5322793929517171, 0.5916223442813854, 0.5962377974045365, 0.678995085032133, 0.4755485481163809, 0.611284500745387, 0.6076148974411232, 0.8472652261287323, 0.8327665107298321, 0.805940854875559, 0.8202599398726511, 0.8380067227205756, 0.7967428263023542, 0.7747845915458351, 0.724097987386366, 0.8400537185005408, 0.40217369740982223, 0.18484126740458728, 0.36324051532467916, 0.37263017825860756, 0.20392326655030668, 0.41237192075948637, 0.3877440003099134, 0.2856761126710259, 0.3532608298652462, 0.3513102896224257, 0.21481712428264177, 0.2222788220777453, 0.29745499244108997, 0.1793286168051631, 0.22107342973119593, 0.2203450980563506, 0.32266939191309374, 0.43019538881702224, 0.3911602034296203, 0.5774387066263849, 0.48372916708951874, 0.2695686529190173, 0.33243437736866177, 0.40965558842833816, 0.6195002512470358, 0.3893141339666034, 0.3432472999933732, 0.5981410308120142, 0.5898843981655413, 0.7716245008655335, 0.5675668800912007, 0.33000017539178916, 0.6492708360853281, 0.5550601286062737, 0.7212557454319156, 0.6263478190421081, 0.1119579449124063, 0.23667253698061974, 0.2531368640355437, 0.3970862646124953, 0.1677008461223135, 0.13531017600578343, 0.2482487719050257, 0.14463749950973293, 0.12877118481664707, 0.36600715857411137, 0.3882310737730873, 0.29618786249399975, 0.45837274139040207, 0.5503106267937234, 0.3740273380776381, 0.3592493850333405, 0.2952051198575746, 0.37013075102967874, 0.750211501266788, 0.6666848209869163, 0.8116452718924732, 0.6430141624805874, 0.6515772159861947, 0.6732183674250557, 0.7595936637040608, 0.7542405270345075, 0.7362578781754887, 0.10952760241339854, 0.09747974746612997, 0.09881545004929926, 0.1050489895048855, 0.10220713828883776, 0.09193357941703961, 0.0978309479750844, 0.10876801218323995, 0.08878289143401286, 0.1514075341051615, 0.1327516452974833, 0.17921491165456171, 0.14894524904132433, 0.19931045960284177, 0.18922205595252428, 0.13680241626212442, 0.1803489665926591, 0.1462694853480363, 0.5042799239185823, 0.5566296502946564, 0.4306507622010627, 0.43610913378045735, 0.43789129616785827, 0.39826610120660055, 0.47585532965363087, 0.4564648588947926, 0.42518175752329834, 0.32166276967296914, 0.3514889373439898, 0.40557211227448786, 0.2849455300096645, 0.41406695063959165, 0.42012776184416367, 0.4123723247874548, 0.3978376085516072, 0.3542714761047776, 0.19650293233862182, 0.21438895488834142, 0.19605126648810656, 0.1945187066916556, 0.18776672033534592, 0.19023493490633725, 0.1865622335841266, 0.18682236690566367, 0.19951383700140324, 0.20665804903689056, 0.2775759957453616, 0.4478153759030584, 0.2164917410508882, 0.17873148994872046, 0.3428392679693817, 0.18711120661575587, 0.22613832652150356, 0.2631587376403516, 0.2083562319990443, 0.18259649389037402, 0.193431091961622, 0.829689805202301, 0.6978220523817482, 0.19641151775048604, 0.18580525236827816, 0.18014237990605797, 0.6759299998859297, 0.8063676359307129, 0.20185428942065176, 0.2068840166925202, 0.2064155591553115, 0.19895542901668328, 0.5987939544125035, 0.16433429851850268, 0.20842469407016762, 0.20376748218246887, 0.1830568662841463, 0.18714197816037104, 0.18534510948682426, 0.20206754668409033, 0.184903926747361, 0.17763988418342014, 0.18923074738169265, 0.19173453862244738, 0.18889295019318675, 0.07929852808174676, 0.08520227820452109, 0.08239062509294459, 0.08758241093881602, 0.07637705080278523, 0.0853394160128561, 0.09327844562796705, 0.07336447272886404, 0.07660269930659092]}, "mutation_prompt": null}
{"id": "f403e21e-f418-4ad8-b566-caf40f36affc", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 6 * self.dim  # Further reduced population size for faster execution\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.F = 0.6  # Adjusted mutation factor for initial diversity\n        self.CR = 0.9  # Higher crossover rate for increased recombination\n        self.evaluations = 0\n        self.archive = []\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n\n                # Check archive for potential new base vector\n                if len(self.archive) > 0 and np.random.rand() < 0.1:\n                    base_vector = self.archive[np.random.randint(len(self.archive))]\n                else:\n                    base_vector = self.population[a]\n\n                # Mutation with potential archive vector\n                mutant = base_vector + self.F * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, *self.bounds)\n                \n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    # Archive successful mutants\n                    self.archive.append(trial)\n\n                # Dynamic adjustment based on fitness improvement\n                if trial_fitness < self.fitness.mean():\n                    self.F = np.clip(self.F + 0.01 * (0.5 - np.random.rand()), 0.1, 0.9)\n                    self.CR = np.clip(self.CR + 0.01 * (0.5 - np.random.rand()), 0.5, 1.0)\n\n        return self.population[np.argmin(self.fitness)]\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1", "name": "EnhancedMetaheuristicOptimizer", "description": "This algorithm enhances Differential Evolution by incorporating a dynamic archiving mechanism and adaptive scaling, focusing on reducing redundant evaluations and improving convergence speed.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e2479e79-b69d-45fa-b91b-0b20431aaa1a", "metadata": {"aucs": [0.8460838787318541, 0.8662210773214738, 0.8164573346626365, 0.8474260970208942, 0.8564395667445609, 0.8345479318139788, 0.8540491208796602, 0.8317501307836201, 0.8398020747513537, 0.6862735300194087, 0.7312545135338542, 0.7337114467926564, 0.7393741637085585, 0.7233185285708336, 0.6567521728063315, 0.7418944441517743, 0.7133538515172579, 0.7489585245586282, 0.21512818503010733, 0.13583250914468514, 0.12183102787103783, 0.10404529497511705, 0.12155147909505926, 0.11161737498757207, 0.13566255680944728, 0.13309452614576944, 0.14253313168169335, 0.10277272302788698, 0.11056387527357237, 0.1397652820307307, 0.12202565881943339, 0.13084970314919397, 0.1147862561070846, 0.1107156460462495, 0.09995298490831994, 0.10050844281822302, 0.9308272990481794, 0.9504949701555323, 0.9811165720089283, 0.8895067268384018, 0.9408710023392403, 0.9432442402822587, 0.9560733825932358, 0.9605358821067621, 0.9335584020145802, 0.5122660725578172, 0.5958772319256793, 0.5322793929517171, 0.5916223442813854, 0.5962377974045365, 0.678995085032133, 0.4755485481163809, 0.611284500745387, 0.6076148974411232, 0.8472652261287323, 0.8327665107298321, 0.805940854875559, 0.8202599398726511, 0.8380067227205756, 0.7967428263023542, 0.7747845915458351, 0.724097987386366, 0.8400537185005408, 0.40217369740982223, 0.18484126740458728, 0.36324051532467916, 0.37263017825860756, 0.20392326655030668, 0.41237192075948637, 0.3877440003099134, 0.2856761126710259, 0.3532608298652462, 0.3513102896224257, 0.21481712428264177, 0.2222788220777453, 0.29745499244108997, 0.1793286168051631, 0.22107342973119593, 0.2203450980563506, 0.32266939191309374, 0.43019538881702224, 0.3911602034296203, 0.5774387066263849, 0.48372916708951874, 0.2695686529190173, 0.33243437736866177, 0.40965558842833816, 0.6195002512470358, 0.3893141339666034, 0.3432472999933732, 0.5981410308120142, 0.5898843981655413, 0.7716245008655335, 0.5675668800912007, 0.33000017539178916, 0.6492708360853281, 0.5550601286062737, 0.7212557454319156, 0.6263478190421081, 0.1119579449124063, 0.23667253698061974, 0.2531368640355437, 0.3970862646124953, 0.1677008461223135, 0.13531017600578343, 0.2482487719050257, 0.14463749950973293, 0.12877118481664707, 0.36600715857411137, 0.3882310737730873, 0.29618786249399975, 0.45837274139040207, 0.5503106267937234, 0.3740273380776381, 0.3592493850333405, 0.2952051198575746, 0.37013075102967874, 0.750211501266788, 0.6666848209869163, 0.8116452718924732, 0.6430141624805874, 0.6515772159861947, 0.6732183674250557, 0.7595936637040608, 0.7542405270345075, 0.7362578781754887, 0.10952760241339854, 0.09747974746612997, 0.09881545004929926, 0.1050489895048855, 0.10220713828883776, 0.09193357941703961, 0.0978309479750844, 0.10876801218323995, 0.08878289143401286, 0.1514075341051615, 0.1327516452974833, 0.17921491165456171, 0.14894524904132433, 0.19931045960284177, 0.18922205595252428, 0.13680241626212442, 0.1803489665926591, 0.1462694853480363, 0.5042799239185823, 0.5566296502946564, 0.4306507622010627, 0.43610913378045735, 0.43789129616785827, 0.39826610120660055, 0.47585532965363087, 0.4564648588947926, 0.42518175752329834, 0.32166276967296914, 0.3514889373439898, 0.40557211227448786, 0.2849455300096645, 0.41406695063959165, 0.42012776184416367, 0.4123723247874548, 0.3978376085516072, 0.3542714761047776, 0.19650293233862182, 0.21438895488834142, 0.19605126648810656, 0.1945187066916556, 0.18776672033534592, 0.19023493490633725, 0.1865622335841266, 0.18682236690566367, 0.19951383700140324, 0.20665804903689056, 0.2775759957453616, 0.4478153759030584, 0.2164917410508882, 0.17873148994872046, 0.3428392679693817, 0.18711120661575587, 0.22613832652150356, 0.2631587376403516, 0.2083562319990443, 0.18259649389037402, 0.193431091961622, 0.829689805202301, 0.6978220523817482, 0.19641151775048604, 0.18580525236827816, 0.18014237990605797, 0.6759299998859297, 0.8063676359307129, 0.20185428942065176, 0.2068840166925202, 0.2064155591553115, 0.19895542901668328, 0.5987939544125035, 0.16433429851850268, 0.20842469407016762, 0.20376748218246887, 0.1830568662841463, 0.18714197816037104, 0.18534510948682426, 0.20206754668409033, 0.184903926747361, 0.17763988418342014, 0.18923074738169265, 0.19173453862244738, 0.18889295019318675, 0.07929852808174676, 0.08520227820452109, 0.08239062509294459, 0.08758241093881602, 0.07637705080278523, 0.0853394160128561, 0.09327844562796705, 0.07336447272886404, 0.07660269930659092]}, "mutation_prompt": null}
{"id": "477785b1-1a48-4563-aa0d-c369e2a6521f", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 6 * self.dim  # Further reduced population size for faster execution\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.F = 0.6  # Adjusted mutation factor for initial diversity\n        self.CR = 0.9  # Higher crossover rate for increased recombination\n        self.evaluations = 0\n        self.archive = []\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n\n                # Check archive for potential new base vector\n                if len(self.archive) > 0 and np.random.rand() < 0.1:\n                    base_vector = self.archive[np.random.randint(len(self.archive))]\n                else:\n                    base_vector = self.population[a]\n\n                # Mutation with potential archive vector\n                mutant = base_vector + self.F * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, *self.bounds)\n                \n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    # Archive successful mutants\n                    self.archive.append(trial)\n\n                # Dynamic adjustment based on fitness improvement\n                if trial_fitness < self.fitness.mean():\n                    self.F = np.clip(self.F + 0.01 * (0.5 - np.random.rand()), 0.1, 0.9)\n                    self.CR = np.clip(self.CR + 0.01 * (0.5 - np.random.rand()), 0.5, 1.0)\n\n        return self.population[np.argmin(self.fitness)]\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1", "name": "EnhancedMetaheuristicOptimizer", "description": "This algorithm enhances Differential Evolution by incorporating a dynamic archiving mechanism and adaptive scaling, focusing on reducing redundant evaluations and improving convergence speed.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e2479e79-b69d-45fa-b91b-0b20431aaa1a", "metadata": {"aucs": [0.8460838787318541, 0.8662210773214738, 0.8164573346626365, 0.8474260970208942, 0.8564395667445609, 0.8345479318139788, 0.8540491208796602, 0.8317501307836201, 0.8398020747513537, 0.6862735300194087, 0.7312545135338542, 0.7337114467926564, 0.7393741637085585, 0.7233185285708336, 0.6567521728063315, 0.7418944441517743, 0.7133538515172579, 0.7489585245586282, 0.21512818503010733, 0.13583250914468514, 0.12183102787103783, 0.10404529497511705, 0.12155147909505926, 0.11161737498757207, 0.13566255680944728, 0.13309452614576944, 0.14253313168169335, 0.10277272302788698, 0.11056387527357237, 0.1397652820307307, 0.12202565881943339, 0.13084970314919397, 0.1147862561070846, 0.1107156460462495, 0.09995298490831994, 0.10050844281822302, 0.9308272990481794, 0.9504949701555323, 0.9811165720089283, 0.8895067268384018, 0.9408710023392403, 0.9432442402822587, 0.9560733825932358, 0.9605358821067621, 0.9335584020145802, 0.5122660725578172, 0.5958772319256793, 0.5322793929517171, 0.5916223442813854, 0.5962377974045365, 0.678995085032133, 0.4755485481163809, 0.611284500745387, 0.6076148974411232, 0.8472652261287323, 0.8327665107298321, 0.805940854875559, 0.8202599398726511, 0.8380067227205756, 0.7967428263023542, 0.7747845915458351, 0.724097987386366, 0.8400537185005408, 0.40217369740982223, 0.18484126740458728, 0.36324051532467916, 0.37263017825860756, 0.20392326655030668, 0.41237192075948637, 0.3877440003099134, 0.2856761126710259, 0.3532608298652462, 0.3513102896224257, 0.21481712428264177, 0.2222788220777453, 0.29745499244108997, 0.1793286168051631, 0.22107342973119593, 0.2203450980563506, 0.32266939191309374, 0.43019538881702224, 0.3911602034296203, 0.5774387066263849, 0.48372916708951874, 0.2695686529190173, 0.33243437736866177, 0.40965558842833816, 0.6195002512470358, 0.3893141339666034, 0.3432472999933732, 0.5981410308120142, 0.5898843981655413, 0.7716245008655335, 0.5675668800912007, 0.33000017539178916, 0.6492708360853281, 0.5550601286062737, 0.7212557454319156, 0.6263478190421081, 0.1119579449124063, 0.23667253698061974, 0.2531368640355437, 0.3970862646124953, 0.1677008461223135, 0.13531017600578343, 0.2482487719050257, 0.14463749950973293, 0.12877118481664707, 0.36600715857411137, 0.3882310737730873, 0.29618786249399975, 0.45837274139040207, 0.5503106267937234, 0.3740273380776381, 0.3592493850333405, 0.2952051198575746, 0.37013075102967874, 0.750211501266788, 0.6666848209869163, 0.8116452718924732, 0.6430141624805874, 0.6515772159861947, 0.6732183674250557, 0.7595936637040608, 0.7542405270345075, 0.7362578781754887, 0.10952760241339854, 0.09747974746612997, 0.09881545004929926, 0.1050489895048855, 0.10220713828883776, 0.09193357941703961, 0.0978309479750844, 0.10876801218323995, 0.08878289143401286, 0.1514075341051615, 0.1327516452974833, 0.17921491165456171, 0.14894524904132433, 0.19931045960284177, 0.18922205595252428, 0.13680241626212442, 0.1803489665926591, 0.1462694853480363, 0.5042799239185823, 0.5566296502946564, 0.4306507622010627, 0.43610913378045735, 0.43789129616785827, 0.39826610120660055, 0.47585532965363087, 0.4564648588947926, 0.42518175752329834, 0.32166276967296914, 0.3514889373439898, 0.40557211227448786, 0.2849455300096645, 0.41406695063959165, 0.42012776184416367, 0.4123723247874548, 0.3978376085516072, 0.3542714761047776, 0.19650293233862182, 0.21438895488834142, 0.19605126648810656, 0.1945187066916556, 0.18776672033534592, 0.19023493490633725, 0.1865622335841266, 0.18682236690566367, 0.19951383700140324, 0.20665804903689056, 0.2775759957453616, 0.4478153759030584, 0.2164917410508882, 0.17873148994872046, 0.3428392679693817, 0.18711120661575587, 0.22613832652150356, 0.2631587376403516, 0.2083562319990443, 0.18259649389037402, 0.193431091961622, 0.829689805202301, 0.6978220523817482, 0.19641151775048604, 0.18580525236827816, 0.18014237990605797, 0.6759299998859297, 0.8063676359307129, 0.20185428942065176, 0.2068840166925202, 0.2064155591553115, 0.19895542901668328, 0.5987939544125035, 0.16433429851850268, 0.20842469407016762, 0.20376748218246887, 0.1830568662841463, 0.18714197816037104, 0.18534510948682426, 0.20206754668409033, 0.184903926747361, 0.17763988418342014, 0.18923074738169265, 0.19173453862244738, 0.18889295019318675, 0.07929852808174676, 0.08520227820452109, 0.08239062509294459, 0.08758241093881602, 0.07637705080278523, 0.0853394160128561, 0.09327844562796705, 0.07336447272886404, 0.07660269930659092]}, "mutation_prompt": null}
{"id": "1d02f685-9d65-4ad1-a6c7-913a499ab017", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 6 * self.dim  # Further reduced population size for faster execution\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.F = 0.6  # Adjusted mutation factor for initial diversity\n        self.CR = 0.9  # Higher crossover rate for increased recombination\n        self.evaluations = 0\n        self.archive = []\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n\n                # Check archive for potential new base vector\n                if len(self.archive) > 0 and np.random.rand() < 0.1:\n                    base_vector = self.archive[np.random.randint(len(self.archive))]\n                else:\n                    base_vector = self.population[a]\n\n                # Mutation with potential archive vector\n                mutant = base_vector + self.F * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, *self.bounds)\n                \n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    # Archive successful mutants\n                    self.archive.append(trial)\n\n                # Dynamic adjustment based on fitness improvement\n                if trial_fitness < self.fitness.mean():\n                    self.F = np.clip(self.F + 0.01 * (0.5 - np.random.rand()), 0.1, 0.9)\n                    self.CR = np.clip(self.CR + 0.01 * (0.5 - np.random.rand()), 0.5, 1.0)\n\n        return self.population[np.argmin(self.fitness)]\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1", "name": "EnhancedMetaheuristicOptimizer", "description": "This algorithm enhances Differential Evolution by incorporating a dynamic archiving mechanism and adaptive scaling, focusing on reducing redundant evaluations and improving convergence speed.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e2479e79-b69d-45fa-b91b-0b20431aaa1a", "metadata": {"aucs": [0.8460838787318541, 0.8662210773214738, 0.8164573346626365, 0.8474260970208942, 0.8564395667445609, 0.8345479318139788, 0.8540491208796602, 0.8317501307836201, 0.8398020747513537, 0.6862735300194087, 0.7312545135338542, 0.7337114467926564, 0.7393741637085585, 0.7233185285708336, 0.6567521728063315, 0.7418944441517743, 0.7133538515172579, 0.7489585245586282, 0.21512818503010733, 0.13583250914468514, 0.12183102787103783, 0.10404529497511705, 0.12155147909505926, 0.11161737498757207, 0.13566255680944728, 0.13309452614576944, 0.14253313168169335, 0.10277272302788698, 0.11056387527357237, 0.1397652820307307, 0.12202565881943339, 0.13084970314919397, 0.1147862561070846, 0.1107156460462495, 0.09995298490831994, 0.10050844281822302, 0.9308272990481794, 0.9504949701555323, 0.9811165720089283, 0.8895067268384018, 0.9408710023392403, 0.9432442402822587, 0.9560733825932358, 0.9605358821067621, 0.9335584020145802, 0.5122660725578172, 0.5958772319256793, 0.5322793929517171, 0.5916223442813854, 0.5962377974045365, 0.678995085032133, 0.4755485481163809, 0.611284500745387, 0.6076148974411232, 0.8472652261287323, 0.8327665107298321, 0.805940854875559, 0.8202599398726511, 0.8380067227205756, 0.7967428263023542, 0.7747845915458351, 0.724097987386366, 0.8400537185005408, 0.40217369740982223, 0.18484126740458728, 0.36324051532467916, 0.37263017825860756, 0.20392326655030668, 0.41237192075948637, 0.3877440003099134, 0.2856761126710259, 0.3532608298652462, 0.3513102896224257, 0.21481712428264177, 0.2222788220777453, 0.29745499244108997, 0.1793286168051631, 0.22107342973119593, 0.2203450980563506, 0.32266939191309374, 0.43019538881702224, 0.3911602034296203, 0.5774387066263849, 0.48372916708951874, 0.2695686529190173, 0.33243437736866177, 0.40965558842833816, 0.6195002512470358, 0.3893141339666034, 0.3432472999933732, 0.5981410308120142, 0.5898843981655413, 0.7716245008655335, 0.5675668800912007, 0.33000017539178916, 0.6492708360853281, 0.5550601286062737, 0.7212557454319156, 0.6263478190421081, 0.1119579449124063, 0.23667253698061974, 0.2531368640355437, 0.3970862646124953, 0.1677008461223135, 0.13531017600578343, 0.2482487719050257, 0.14463749950973293, 0.12877118481664707, 0.36600715857411137, 0.3882310737730873, 0.29618786249399975, 0.45837274139040207, 0.5503106267937234, 0.3740273380776381, 0.3592493850333405, 0.2952051198575746, 0.37013075102967874, 0.750211501266788, 0.6666848209869163, 0.8116452718924732, 0.6430141624805874, 0.6515772159861947, 0.6732183674250557, 0.7595936637040608, 0.7542405270345075, 0.7362578781754887, 0.10952760241339854, 0.09747974746612997, 0.09881545004929926, 0.1050489895048855, 0.10220713828883776, 0.09193357941703961, 0.0978309479750844, 0.10876801218323995, 0.08878289143401286, 0.1514075341051615, 0.1327516452974833, 0.17921491165456171, 0.14894524904132433, 0.19931045960284177, 0.18922205595252428, 0.13680241626212442, 0.1803489665926591, 0.1462694853480363, 0.5042799239185823, 0.5566296502946564, 0.4306507622010627, 0.43610913378045735, 0.43789129616785827, 0.39826610120660055, 0.47585532965363087, 0.4564648588947926, 0.42518175752329834, 0.32166276967296914, 0.3514889373439898, 0.40557211227448786, 0.2849455300096645, 0.41406695063959165, 0.42012776184416367, 0.4123723247874548, 0.3978376085516072, 0.3542714761047776, 0.19650293233862182, 0.21438895488834142, 0.19605126648810656, 0.1945187066916556, 0.18776672033534592, 0.19023493490633725, 0.1865622335841266, 0.18682236690566367, 0.19951383700140324, 0.20665804903689056, 0.2775759957453616, 0.4478153759030584, 0.2164917410508882, 0.17873148994872046, 0.3428392679693817, 0.18711120661575587, 0.22613832652150356, 0.2631587376403516, 0.2083562319990443, 0.18259649389037402, 0.193431091961622, 0.829689805202301, 0.6978220523817482, 0.19641151775048604, 0.18580525236827816, 0.18014237990605797, 0.6759299998859297, 0.8063676359307129, 0.20185428942065176, 0.2068840166925202, 0.2064155591553115, 0.19895542901668328, 0.5987939544125035, 0.16433429851850268, 0.20842469407016762, 0.20376748218246887, 0.1830568662841463, 0.18714197816037104, 0.18534510948682426, 0.20206754668409033, 0.184903926747361, 0.17763988418342014, 0.18923074738169265, 0.19173453862244738, 0.18889295019318675, 0.07929852808174676, 0.08520227820452109, 0.08239062509294459, 0.08758241093881602, 0.07637705080278523, 0.0853394160128561, 0.09327844562796705, 0.07336447272886404, 0.07660269930659092]}, "mutation_prompt": null}
{"id": "a4a6fee3-4d27-43b3-998e-d4c7a8cf6b78", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 6 * self.dim  # Further reduced population size for faster execution\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.F = 0.6  # Adjusted mutation factor for initial diversity\n        self.CR = 0.9  # Higher crossover rate for increased recombination\n        self.evaluations = 0\n        self.archive = []\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n\n                # Check archive for potential new base vector\n                if len(self.archive) > 0 and np.random.rand() < 0.1:\n                    base_vector = self.archive[np.random.randint(len(self.archive))]\n                else:\n                    base_vector = self.population[a]\n\n                # Mutation with potential archive vector\n                mutant = base_vector + self.F * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, *self.bounds)\n                \n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    # Archive successful mutants\n                    self.archive.append(trial)\n\n                # Dynamic adjustment based on fitness improvement\n                if trial_fitness < self.fitness.mean():\n                    self.F = np.clip(self.F + 0.01 * (0.5 - np.random.rand()), 0.1, 0.9)\n                    self.CR = np.clip(self.CR + 0.01 * (0.5 - np.random.rand()), 0.5, 1.0)\n\n        return self.population[np.argmin(self.fitness)]\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1", "name": "EnhancedMetaheuristicOptimizer", "description": "This algorithm enhances Differential Evolution by incorporating a dynamic archiving mechanism and adaptive scaling, focusing on reducing redundant evaluations and improving convergence speed.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e2479e79-b69d-45fa-b91b-0b20431aaa1a", "metadata": {"aucs": [0.8460838787318541, 0.8662210773214738, 0.8164573346626365, 0.8474260970208942, 0.8564395667445609, 0.8345479318139788, 0.8540491208796602, 0.8317501307836201, 0.8398020747513537, 0.6862735300194087, 0.7312545135338542, 0.7337114467926564, 0.7393741637085585, 0.7233185285708336, 0.6567521728063315, 0.7418944441517743, 0.7133538515172579, 0.7489585245586282, 0.21512818503010733, 0.13583250914468514, 0.12183102787103783, 0.10404529497511705, 0.12155147909505926, 0.11161737498757207, 0.13566255680944728, 0.13309452614576944, 0.14253313168169335, 0.10277272302788698, 0.11056387527357237, 0.1397652820307307, 0.12202565881943339, 0.13084970314919397, 0.1147862561070846, 0.1107156460462495, 0.09995298490831994, 0.10050844281822302, 0.9308272990481794, 0.9504949701555323, 0.9811165720089283, 0.8895067268384018, 0.9408710023392403, 0.9432442402822587, 0.9560733825932358, 0.9605358821067621, 0.9335584020145802, 0.5122660725578172, 0.5958772319256793, 0.5322793929517171, 0.5916223442813854, 0.5962377974045365, 0.678995085032133, 0.4755485481163809, 0.611284500745387, 0.6076148974411232, 0.8472652261287323, 0.8327665107298321, 0.805940854875559, 0.8202599398726511, 0.8380067227205756, 0.7967428263023542, 0.7747845915458351, 0.724097987386366, 0.8400537185005408, 0.40217369740982223, 0.18484126740458728, 0.36324051532467916, 0.37263017825860756, 0.20392326655030668, 0.41237192075948637, 0.3877440003099134, 0.2856761126710259, 0.3532608298652462, 0.3513102896224257, 0.21481712428264177, 0.2222788220777453, 0.29745499244108997, 0.1793286168051631, 0.22107342973119593, 0.2203450980563506, 0.32266939191309374, 0.43019538881702224, 0.3911602034296203, 0.5774387066263849, 0.48372916708951874, 0.2695686529190173, 0.33243437736866177, 0.40965558842833816, 0.6195002512470358, 0.3893141339666034, 0.3432472999933732, 0.5981410308120142, 0.5898843981655413, 0.7716245008655335, 0.5675668800912007, 0.33000017539178916, 0.6492708360853281, 0.5550601286062737, 0.7212557454319156, 0.6263478190421081, 0.1119579449124063, 0.23667253698061974, 0.2531368640355437, 0.3970862646124953, 0.1677008461223135, 0.13531017600578343, 0.2482487719050257, 0.14463749950973293, 0.12877118481664707, 0.36600715857411137, 0.3882310737730873, 0.29618786249399975, 0.45837274139040207, 0.5503106267937234, 0.3740273380776381, 0.3592493850333405, 0.2952051198575746, 0.37013075102967874, 0.750211501266788, 0.6666848209869163, 0.8116452718924732, 0.6430141624805874, 0.6515772159861947, 0.6732183674250557, 0.7595936637040608, 0.7542405270345075, 0.7362578781754887, 0.10952760241339854, 0.09747974746612997, 0.09881545004929926, 0.1050489895048855, 0.10220713828883776, 0.09193357941703961, 0.0978309479750844, 0.10876801218323995, 0.08878289143401286, 0.1514075341051615, 0.1327516452974833, 0.17921491165456171, 0.14894524904132433, 0.19931045960284177, 0.18922205595252428, 0.13680241626212442, 0.1803489665926591, 0.1462694853480363, 0.5042799239185823, 0.5566296502946564, 0.4306507622010627, 0.43610913378045735, 0.43789129616785827, 0.39826610120660055, 0.47585532965363087, 0.4564648588947926, 0.42518175752329834, 0.32166276967296914, 0.3514889373439898, 0.40557211227448786, 0.2849455300096645, 0.41406695063959165, 0.42012776184416367, 0.4123723247874548, 0.3978376085516072, 0.3542714761047776, 0.19650293233862182, 0.21438895488834142, 0.19605126648810656, 0.1945187066916556, 0.18776672033534592, 0.19023493490633725, 0.1865622335841266, 0.18682236690566367, 0.19951383700140324, 0.20665804903689056, 0.2775759957453616, 0.4478153759030584, 0.2164917410508882, 0.17873148994872046, 0.3428392679693817, 0.18711120661575587, 0.22613832652150356, 0.2631587376403516, 0.2083562319990443, 0.18259649389037402, 0.193431091961622, 0.829689805202301, 0.6978220523817482, 0.19641151775048604, 0.18580525236827816, 0.18014237990605797, 0.6759299998859297, 0.8063676359307129, 0.20185428942065176, 0.2068840166925202, 0.2064155591553115, 0.19895542901668328, 0.5987939544125035, 0.16433429851850268, 0.20842469407016762, 0.20376748218246887, 0.1830568662841463, 0.18714197816037104, 0.18534510948682426, 0.20206754668409033, 0.184903926747361, 0.17763988418342014, 0.18923074738169265, 0.19173453862244738, 0.18889295019318675, 0.07929852808174676, 0.08520227820452109, 0.08239062509294459, 0.08758241093881602, 0.07637705080278523, 0.0853394160128561, 0.09327844562796705, 0.07336447272886404, 0.07660269930659092]}, "mutation_prompt": null}
{"id": "12fb7139-16af-49a1-b2e1-c83df18d917f", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 6 * self.dim  # Further reduced population size for faster execution\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.F = 0.6  # Adjusted mutation factor for initial diversity\n        self.CR = 0.9  # Higher crossover rate for increased recombination\n        self.evaluations = 0\n        self.archive = []\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n\n                # Check archive for potential new base vector\n                if len(self.archive) > 0 and np.random.rand() < 0.1:\n                    base_vector = self.archive[np.random.randint(len(self.archive))]\n                else:\n                    base_vector = self.population[a]\n\n                # Mutation with potential archive vector\n                mutant = base_vector + self.F * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, *self.bounds)\n                \n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    # Archive successful mutants\n                    self.archive.append(trial)\n\n                # Dynamic adjustment based on fitness improvement\n                if trial_fitness < self.fitness.mean():\n                    self.F = np.clip(self.F + 0.01 * (0.5 - np.random.rand()), 0.1, 0.9)\n                    self.CR = np.clip(self.CR + 0.01 * (0.5 - np.random.rand()), 0.5, 1.0)\n\n        return self.population[np.argmin(self.fitness)]\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1", "name": "EnhancedMetaheuristicOptimizer", "description": "This algorithm enhances Differential Evolution by incorporating a dynamic archiving mechanism and adaptive scaling, focusing on reducing redundant evaluations and improving convergence speed.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e2479e79-b69d-45fa-b91b-0b20431aaa1a", "metadata": {"aucs": [0.8460838787318541, 0.8662210773214738, 0.8164573346626365, 0.8474260970208942, 0.8564395667445609, 0.8345479318139788, 0.8540491208796602, 0.8317501307836201, 0.8398020747513537, 0.6862735300194087, 0.7312545135338542, 0.7337114467926564, 0.7393741637085585, 0.7233185285708336, 0.6567521728063315, 0.7418944441517743, 0.7133538515172579, 0.7489585245586282, 0.21512818503010733, 0.13583250914468514, 0.12183102787103783, 0.10404529497511705, 0.12155147909505926, 0.11161737498757207, 0.13566255680944728, 0.13309452614576944, 0.14253313168169335, 0.10277272302788698, 0.11056387527357237, 0.1397652820307307, 0.12202565881943339, 0.13084970314919397, 0.1147862561070846, 0.1107156460462495, 0.09995298490831994, 0.10050844281822302, 0.9308272990481794, 0.9504949701555323, 0.9811165720089283, 0.8895067268384018, 0.9408710023392403, 0.9432442402822587, 0.9560733825932358, 0.9605358821067621, 0.9335584020145802, 0.5122660725578172, 0.5958772319256793, 0.5322793929517171, 0.5916223442813854, 0.5962377974045365, 0.678995085032133, 0.4755485481163809, 0.611284500745387, 0.6076148974411232, 0.8472652261287323, 0.8327665107298321, 0.805940854875559, 0.8202599398726511, 0.8380067227205756, 0.7967428263023542, 0.7747845915458351, 0.724097987386366, 0.8400537185005408, 0.40217369740982223, 0.18484126740458728, 0.36324051532467916, 0.37263017825860756, 0.20392326655030668, 0.41237192075948637, 0.3877440003099134, 0.2856761126710259, 0.3532608298652462, 0.3513102896224257, 0.21481712428264177, 0.2222788220777453, 0.29745499244108997, 0.1793286168051631, 0.22107342973119593, 0.2203450980563506, 0.32266939191309374, 0.43019538881702224, 0.3911602034296203, 0.5774387066263849, 0.48372916708951874, 0.2695686529190173, 0.33243437736866177, 0.40965558842833816, 0.6195002512470358, 0.3893141339666034, 0.3432472999933732, 0.5981410308120142, 0.5898843981655413, 0.7716245008655335, 0.5675668800912007, 0.33000017539178916, 0.6492708360853281, 0.5550601286062737, 0.7212557454319156, 0.6263478190421081, 0.1119579449124063, 0.23667253698061974, 0.2531368640355437, 0.3970862646124953, 0.1677008461223135, 0.13531017600578343, 0.2482487719050257, 0.14463749950973293, 0.12877118481664707, 0.36600715857411137, 0.3882310737730873, 0.29618786249399975, 0.45837274139040207, 0.5503106267937234, 0.3740273380776381, 0.3592493850333405, 0.2952051198575746, 0.37013075102967874, 0.750211501266788, 0.6666848209869163, 0.8116452718924732, 0.6430141624805874, 0.6515772159861947, 0.6732183674250557, 0.7595936637040608, 0.7542405270345075, 0.7362578781754887, 0.10952760241339854, 0.09747974746612997, 0.09881545004929926, 0.1050489895048855, 0.10220713828883776, 0.09193357941703961, 0.0978309479750844, 0.10876801218323995, 0.08878289143401286, 0.1514075341051615, 0.1327516452974833, 0.17921491165456171, 0.14894524904132433, 0.19931045960284177, 0.18922205595252428, 0.13680241626212442, 0.1803489665926591, 0.1462694853480363, 0.5042799239185823, 0.5566296502946564, 0.4306507622010627, 0.43610913378045735, 0.43789129616785827, 0.39826610120660055, 0.47585532965363087, 0.4564648588947926, 0.42518175752329834, 0.32166276967296914, 0.3514889373439898, 0.40557211227448786, 0.2849455300096645, 0.41406695063959165, 0.42012776184416367, 0.4123723247874548, 0.3978376085516072, 0.3542714761047776, 0.19650293233862182, 0.21438895488834142, 0.19605126648810656, 0.1945187066916556, 0.18776672033534592, 0.19023493490633725, 0.1865622335841266, 0.18682236690566367, 0.19951383700140324, 0.20665804903689056, 0.2775759957453616, 0.4478153759030584, 0.2164917410508882, 0.17873148994872046, 0.3428392679693817, 0.18711120661575587, 0.22613832652150356, 0.2631587376403516, 0.2083562319990443, 0.18259649389037402, 0.193431091961622, 0.829689805202301, 0.6978220523817482, 0.19641151775048604, 0.18580525236827816, 0.18014237990605797, 0.6759299998859297, 0.8063676359307129, 0.20185428942065176, 0.2068840166925202, 0.2064155591553115, 0.19895542901668328, 0.5987939544125035, 0.16433429851850268, 0.20842469407016762, 0.20376748218246887, 0.1830568662841463, 0.18714197816037104, 0.18534510948682426, 0.20206754668409033, 0.184903926747361, 0.17763988418342014, 0.18923074738169265, 0.19173453862244738, 0.18889295019318675, 0.07929852808174676, 0.08520227820452109, 0.08239062509294459, 0.08758241093881602, 0.07637705080278523, 0.0853394160128561, 0.09327844562796705, 0.07336447272886404, 0.07660269930659092]}, "mutation_prompt": null}
{"id": "f7080a95-61d0-4595-9a97-de13a25d6b14", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 6 * self.dim  # Further reduced population size for faster execution\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.F = 0.6  # Adjusted mutation factor for initial diversity\n        self.CR = 0.9  # Higher crossover rate for increased recombination\n        self.evaluations = 0\n        self.archive = []\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n\n                # Check archive for potential new base vector\n                if len(self.archive) > 0 and np.random.rand() < 0.1:\n                    base_vector = self.archive[np.random.randint(len(self.archive))]\n                else:\n                    base_vector = self.population[a]\n\n                # Mutation with potential archive vector\n                mutant = base_vector + self.F * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, *self.bounds)\n                \n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    # Archive successful mutants\n                    self.archive.append(trial)\n\n                # Dynamic adjustment based on fitness improvement\n                if trial_fitness < self.fitness.mean():\n                    self.F = np.clip(self.F + 0.01 * (0.5 - np.random.rand()), 0.1, 0.9)\n                    self.CR = np.clip(self.CR + 0.01 * (0.5 - np.random.rand()), 0.5, 1.0)\n\n        return self.population[np.argmin(self.fitness)]\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1", "name": "EnhancedMetaheuristicOptimizer", "description": "This algorithm enhances Differential Evolution by incorporating a dynamic archiving mechanism and adaptive scaling, focusing on reducing redundant evaluations and improving convergence speed.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e2479e79-b69d-45fa-b91b-0b20431aaa1a", "metadata": {"aucs": [0.8460838787318541, 0.8662210773214738, 0.8164573346626365, 0.8474260970208942, 0.8564395667445609, 0.8345479318139788, 0.8540491208796602, 0.8317501307836201, 0.8398020747513537, 0.6862735300194087, 0.7312545135338542, 0.7337114467926564, 0.7393741637085585, 0.7233185285708336, 0.6567521728063315, 0.7418944441517743, 0.7133538515172579, 0.7489585245586282, 0.21512818503010733, 0.13583250914468514, 0.12183102787103783, 0.10404529497511705, 0.12155147909505926, 0.11161737498757207, 0.13566255680944728, 0.13309452614576944, 0.14253313168169335, 0.10277272302788698, 0.11056387527357237, 0.1397652820307307, 0.12202565881943339, 0.13084970314919397, 0.1147862561070846, 0.1107156460462495, 0.09995298490831994, 0.10050844281822302, 0.9308272990481794, 0.9504949701555323, 0.9811165720089283, 0.8895067268384018, 0.9408710023392403, 0.9432442402822587, 0.9560733825932358, 0.9605358821067621, 0.9335584020145802, 0.5122660725578172, 0.5958772319256793, 0.5322793929517171, 0.5916223442813854, 0.5962377974045365, 0.678995085032133, 0.4755485481163809, 0.611284500745387, 0.6076148974411232, 0.8472652261287323, 0.8327665107298321, 0.805940854875559, 0.8202599398726511, 0.8380067227205756, 0.7967428263023542, 0.7747845915458351, 0.724097987386366, 0.8400537185005408, 0.40217369740982223, 0.18484126740458728, 0.36324051532467916, 0.37263017825860756, 0.20392326655030668, 0.41237192075948637, 0.3877440003099134, 0.2856761126710259, 0.3532608298652462, 0.3513102896224257, 0.21481712428264177, 0.2222788220777453, 0.29745499244108997, 0.1793286168051631, 0.22107342973119593, 0.2203450980563506, 0.32266939191309374, 0.43019538881702224, 0.3911602034296203, 0.5774387066263849, 0.48372916708951874, 0.2695686529190173, 0.33243437736866177, 0.40965558842833816, 0.6195002512470358, 0.3893141339666034, 0.3432472999933732, 0.5981410308120142, 0.5898843981655413, 0.7716245008655335, 0.5675668800912007, 0.33000017539178916, 0.6492708360853281, 0.5550601286062737, 0.7212557454319156, 0.6263478190421081, 0.1119579449124063, 0.23667253698061974, 0.2531368640355437, 0.3970862646124953, 0.1677008461223135, 0.13531017600578343, 0.2482487719050257, 0.14463749950973293, 0.12877118481664707, 0.36600715857411137, 0.3882310737730873, 0.29618786249399975, 0.45837274139040207, 0.5503106267937234, 0.3740273380776381, 0.3592493850333405, 0.2952051198575746, 0.37013075102967874, 0.750211501266788, 0.6666848209869163, 0.8116452718924732, 0.6430141624805874, 0.6515772159861947, 0.6732183674250557, 0.7595936637040608, 0.7542405270345075, 0.7362578781754887, 0.10952760241339854, 0.09747974746612997, 0.09881545004929926, 0.1050489895048855, 0.10220713828883776, 0.09193357941703961, 0.0978309479750844, 0.10876801218323995, 0.08878289143401286, 0.1514075341051615, 0.1327516452974833, 0.17921491165456171, 0.14894524904132433, 0.19931045960284177, 0.18922205595252428, 0.13680241626212442, 0.1803489665926591, 0.1462694853480363, 0.5042799239185823, 0.5566296502946564, 0.4306507622010627, 0.43610913378045735, 0.43789129616785827, 0.39826610120660055, 0.47585532965363087, 0.4564648588947926, 0.42518175752329834, 0.32166276967296914, 0.3514889373439898, 0.40557211227448786, 0.2849455300096645, 0.41406695063959165, 0.42012776184416367, 0.4123723247874548, 0.3978376085516072, 0.3542714761047776, 0.19650293233862182, 0.21438895488834142, 0.19605126648810656, 0.1945187066916556, 0.18776672033534592, 0.19023493490633725, 0.1865622335841266, 0.18682236690566367, 0.19951383700140324, 0.20665804903689056, 0.2775759957453616, 0.4478153759030584, 0.2164917410508882, 0.17873148994872046, 0.3428392679693817, 0.18711120661575587, 0.22613832652150356, 0.2631587376403516, 0.2083562319990443, 0.18259649389037402, 0.193431091961622, 0.829689805202301, 0.6978220523817482, 0.19641151775048604, 0.18580525236827816, 0.18014237990605797, 0.6759299998859297, 0.8063676359307129, 0.20185428942065176, 0.2068840166925202, 0.2064155591553115, 0.19895542901668328, 0.5987939544125035, 0.16433429851850268, 0.20842469407016762, 0.20376748218246887, 0.1830568662841463, 0.18714197816037104, 0.18534510948682426, 0.20206754668409033, 0.184903926747361, 0.17763988418342014, 0.18923074738169265, 0.19173453862244738, 0.18889295019318675, 0.07929852808174676, 0.08520227820452109, 0.08239062509294459, 0.08758241093881602, 0.07637705080278523, 0.0853394160128561, 0.09327844562796705, 0.07336447272886404, 0.07660269930659092]}, "mutation_prompt": null}
{"id": "a31c4ff4-2936-4798-a6c4-7357e264824e", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 6 * self.dim  # Further reduced population size for faster execution\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.F = 0.6  # Adjusted mutation factor for initial diversity\n        self.CR = 0.9  # Higher crossover rate for increased recombination\n        self.evaluations = 0\n        self.archive = []\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n\n                # Check archive for potential new base vector\n                if len(self.archive) > 0 and np.random.rand() < 0.1:\n                    base_vector = self.archive[np.random.randint(len(self.archive))]\n                else:\n                    base_vector = self.population[a]\n\n                # Mutation with potential archive vector\n                mutant = base_vector + self.F * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, *self.bounds)\n                \n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    # Archive successful mutants\n                    self.archive.append(trial)\n\n                # Dynamic adjustment based on fitness improvement\n                if trial_fitness < self.fitness.mean():\n                    self.F = np.clip(self.F + 0.01 * (0.5 - np.random.rand()), 0.1, 0.9)\n                    self.CR = np.clip(self.CR + 0.01 * (0.5 - np.random.rand()), 0.5, 1.0)\n\n        return self.population[np.argmin(self.fitness)]\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1", "name": "EnhancedMetaheuristicOptimizer", "description": "This algorithm enhances Differential Evolution by incorporating a dynamic archiving mechanism and adaptive scaling, focusing on reducing redundant evaluations and improving convergence speed.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e2479e79-b69d-45fa-b91b-0b20431aaa1a", "metadata": {"aucs": [0.8460838787318541, 0.8662210773214738, 0.8164573346626365, 0.8474260970208942, 0.8564395667445609, 0.8345479318139788, 0.8540491208796602, 0.8317501307836201, 0.8398020747513537, 0.6862735300194087, 0.7312545135338542, 0.7337114467926564, 0.7393741637085585, 0.7233185285708336, 0.6567521728063315, 0.7418944441517743, 0.7133538515172579, 0.7489585245586282, 0.21512818503010733, 0.13583250914468514, 0.12183102787103783, 0.10404529497511705, 0.12155147909505926, 0.11161737498757207, 0.13566255680944728, 0.13309452614576944, 0.14253313168169335, 0.10277272302788698, 0.11056387527357237, 0.1397652820307307, 0.12202565881943339, 0.13084970314919397, 0.1147862561070846, 0.1107156460462495, 0.09995298490831994, 0.10050844281822302, 0.9308272990481794, 0.9504949701555323, 0.9811165720089283, 0.8895067268384018, 0.9408710023392403, 0.9432442402822587, 0.9560733825932358, 0.9605358821067621, 0.9335584020145802, 0.5122660725578172, 0.5958772319256793, 0.5322793929517171, 0.5916223442813854, 0.5962377974045365, 0.678995085032133, 0.4755485481163809, 0.611284500745387, 0.6076148974411232, 0.8472652261287323, 0.8327665107298321, 0.805940854875559, 0.8202599398726511, 0.8380067227205756, 0.7967428263023542, 0.7747845915458351, 0.724097987386366, 0.8400537185005408, 0.40217369740982223, 0.18484126740458728, 0.36324051532467916, 0.37263017825860756, 0.20392326655030668, 0.41237192075948637, 0.3877440003099134, 0.2856761126710259, 0.3532608298652462, 0.3513102896224257, 0.21481712428264177, 0.2222788220777453, 0.29745499244108997, 0.1793286168051631, 0.22107342973119593, 0.2203450980563506, 0.32266939191309374, 0.43019538881702224, 0.3911602034296203, 0.5774387066263849, 0.48372916708951874, 0.2695686529190173, 0.33243437736866177, 0.40965558842833816, 0.6195002512470358, 0.3893141339666034, 0.3432472999933732, 0.5981410308120142, 0.5898843981655413, 0.7716245008655335, 0.5675668800912007, 0.33000017539178916, 0.6492708360853281, 0.5550601286062737, 0.7212557454319156, 0.6263478190421081, 0.1119579449124063, 0.23667253698061974, 0.2531368640355437, 0.3970862646124953, 0.1677008461223135, 0.13531017600578343, 0.2482487719050257, 0.14463749950973293, 0.12877118481664707, 0.36600715857411137, 0.3882310737730873, 0.29618786249399975, 0.45837274139040207, 0.5503106267937234, 0.3740273380776381, 0.3592493850333405, 0.2952051198575746, 0.37013075102967874, 0.750211501266788, 0.6666848209869163, 0.8116452718924732, 0.6430141624805874, 0.6515772159861947, 0.6732183674250557, 0.7595936637040608, 0.7542405270345075, 0.7362578781754887, 0.10952760241339854, 0.09747974746612997, 0.09881545004929926, 0.1050489895048855, 0.10220713828883776, 0.09193357941703961, 0.0978309479750844, 0.10876801218323995, 0.08878289143401286, 0.1514075341051615, 0.1327516452974833, 0.17921491165456171, 0.14894524904132433, 0.19931045960284177, 0.18922205595252428, 0.13680241626212442, 0.1803489665926591, 0.1462694853480363, 0.5042799239185823, 0.5566296502946564, 0.4306507622010627, 0.43610913378045735, 0.43789129616785827, 0.39826610120660055, 0.47585532965363087, 0.4564648588947926, 0.42518175752329834, 0.32166276967296914, 0.3514889373439898, 0.40557211227448786, 0.2849455300096645, 0.41406695063959165, 0.42012776184416367, 0.4123723247874548, 0.3978376085516072, 0.3542714761047776, 0.19650293233862182, 0.21438895488834142, 0.19605126648810656, 0.1945187066916556, 0.18776672033534592, 0.19023493490633725, 0.1865622335841266, 0.18682236690566367, 0.19951383700140324, 0.20665804903689056, 0.2775759957453616, 0.4478153759030584, 0.2164917410508882, 0.17873148994872046, 0.3428392679693817, 0.18711120661575587, 0.22613832652150356, 0.2631587376403516, 0.2083562319990443, 0.18259649389037402, 0.193431091961622, 0.829689805202301, 0.6978220523817482, 0.19641151775048604, 0.18580525236827816, 0.18014237990605797, 0.6759299998859297, 0.8063676359307129, 0.20185428942065176, 0.2068840166925202, 0.2064155591553115, 0.19895542901668328, 0.5987939544125035, 0.16433429851850268, 0.20842469407016762, 0.20376748218246887, 0.1830568662841463, 0.18714197816037104, 0.18534510948682426, 0.20206754668409033, 0.184903926747361, 0.17763988418342014, 0.18923074738169265, 0.19173453862244738, 0.18889295019318675, 0.07929852808174676, 0.08520227820452109, 0.08239062509294459, 0.08758241093881602, 0.07637705080278523, 0.0853394160128561, 0.09327844562796705, 0.07336447272886404, 0.07660269930659092]}, "mutation_prompt": null}
{"id": "0e2e183f-e0fb-4553-be90-97fce568b180", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 6 * self.dim  # Further reduced population size for faster execution\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.F = 0.6  # Adjusted mutation factor for initial diversity\n        self.CR = 0.9  # Higher crossover rate for increased recombination\n        self.evaluations = 0\n        self.archive = []\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n\n                # Check archive for potential new base vector\n                if len(self.archive) > 0 and np.random.rand() < 0.1:\n                    base_vector = self.archive[np.random.randint(len(self.archive))]\n                else:\n                    base_vector = self.population[a]\n\n                # Mutation with potential archive vector\n                mutant = base_vector + self.F * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, *self.bounds)\n                \n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    # Archive successful mutants\n                    self.archive.append(trial)\n\n                # Dynamic adjustment based on fitness improvement\n                if trial_fitness < self.fitness.mean():\n                    self.F = np.clip(self.F + 0.01 * (0.5 - np.random.rand()), 0.1, 0.9)\n                    self.CR = np.clip(self.CR + 0.01 * (0.5 - np.random.rand()), 0.5, 1.0)\n\n        return self.population[np.argmin(self.fitness)]\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1", "name": "EnhancedMetaheuristicOptimizer", "description": "This algorithm enhances Differential Evolution by incorporating a dynamic archiving mechanism and adaptive scaling, focusing on reducing redundant evaluations and improving convergence speed.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e2479e79-b69d-45fa-b91b-0b20431aaa1a", "metadata": {"aucs": [0.8460838787318541, 0.8662210773214738, 0.8164573346626365, 0.8474260970208942, 0.8564395667445609, 0.8345479318139788, 0.8540491208796602, 0.8317501307836201, 0.8398020747513537, 0.6862735300194087, 0.7312545135338542, 0.7337114467926564, 0.7393741637085585, 0.7233185285708336, 0.6567521728063315, 0.7418944441517743, 0.7133538515172579, 0.7489585245586282, 0.21512818503010733, 0.13583250914468514, 0.12183102787103783, 0.10404529497511705, 0.12155147909505926, 0.11161737498757207, 0.13566255680944728, 0.13309452614576944, 0.14253313168169335, 0.10277272302788698, 0.11056387527357237, 0.1397652820307307, 0.12202565881943339, 0.13084970314919397, 0.1147862561070846, 0.1107156460462495, 0.09995298490831994, 0.10050844281822302, 0.9308272990481794, 0.9504949701555323, 0.9811165720089283, 0.8895067268384018, 0.9408710023392403, 0.9432442402822587, 0.9560733825932358, 0.9605358821067621, 0.9335584020145802, 0.5122660725578172, 0.5958772319256793, 0.5322793929517171, 0.5916223442813854, 0.5962377974045365, 0.678995085032133, 0.4755485481163809, 0.611284500745387, 0.6076148974411232, 0.8472652261287323, 0.8327665107298321, 0.805940854875559, 0.8202599398726511, 0.8380067227205756, 0.7967428263023542, 0.7747845915458351, 0.724097987386366, 0.8400537185005408, 0.40217369740982223, 0.18484126740458728, 0.36324051532467916, 0.37263017825860756, 0.20392326655030668, 0.41237192075948637, 0.3877440003099134, 0.2856761126710259, 0.3532608298652462, 0.3513102896224257, 0.21481712428264177, 0.2222788220777453, 0.29745499244108997, 0.1793286168051631, 0.22107342973119593, 0.2203450980563506, 0.32266939191309374, 0.43019538881702224, 0.3911602034296203, 0.5774387066263849, 0.48372916708951874, 0.2695686529190173, 0.33243437736866177, 0.40965558842833816, 0.6195002512470358, 0.3893141339666034, 0.3432472999933732, 0.5981410308120142, 0.5898843981655413, 0.7716245008655335, 0.5675668800912007, 0.33000017539178916, 0.6492708360853281, 0.5550601286062737, 0.7212557454319156, 0.6263478190421081, 0.1119579449124063, 0.23667253698061974, 0.2531368640355437, 0.3970862646124953, 0.1677008461223135, 0.13531017600578343, 0.2482487719050257, 0.14463749950973293, 0.12877118481664707, 0.36600715857411137, 0.3882310737730873, 0.29618786249399975, 0.45837274139040207, 0.5503106267937234, 0.3740273380776381, 0.3592493850333405, 0.2952051198575746, 0.37013075102967874, 0.750211501266788, 0.6666848209869163, 0.8116452718924732, 0.6430141624805874, 0.6515772159861947, 0.6732183674250557, 0.7595936637040608, 0.7542405270345075, 0.7362578781754887, 0.10952760241339854, 0.09747974746612997, 0.09881545004929926, 0.1050489895048855, 0.10220713828883776, 0.09193357941703961, 0.0978309479750844, 0.10876801218323995, 0.08878289143401286, 0.1514075341051615, 0.1327516452974833, 0.17921491165456171, 0.14894524904132433, 0.19931045960284177, 0.18922205595252428, 0.13680241626212442, 0.1803489665926591, 0.1462694853480363, 0.5042799239185823, 0.5566296502946564, 0.4306507622010627, 0.43610913378045735, 0.43789129616785827, 0.39826610120660055, 0.47585532965363087, 0.4564648588947926, 0.42518175752329834, 0.32166276967296914, 0.3514889373439898, 0.40557211227448786, 0.2849455300096645, 0.41406695063959165, 0.42012776184416367, 0.4123723247874548, 0.3978376085516072, 0.3542714761047776, 0.19650293233862182, 0.21438895488834142, 0.19605126648810656, 0.1945187066916556, 0.18776672033534592, 0.19023493490633725, 0.1865622335841266, 0.18682236690566367, 0.19951383700140324, 0.20665804903689056, 0.2775759957453616, 0.4478153759030584, 0.2164917410508882, 0.17873148994872046, 0.3428392679693817, 0.18711120661575587, 0.22613832652150356, 0.2631587376403516, 0.2083562319990443, 0.18259649389037402, 0.193431091961622, 0.829689805202301, 0.6978220523817482, 0.19641151775048604, 0.18580525236827816, 0.18014237990605797, 0.6759299998859297, 0.8063676359307129, 0.20185428942065176, 0.2068840166925202, 0.2064155591553115, 0.19895542901668328, 0.5987939544125035, 0.16433429851850268, 0.20842469407016762, 0.20376748218246887, 0.1830568662841463, 0.18714197816037104, 0.18534510948682426, 0.20206754668409033, 0.184903926747361, 0.17763988418342014, 0.18923074738169265, 0.19173453862244738, 0.18889295019318675, 0.07929852808174676, 0.08520227820452109, 0.08239062509294459, 0.08758241093881602, 0.07637705080278523, 0.0853394160128561, 0.09327844562796705, 0.07336447272886404, 0.07660269930659092]}, "mutation_prompt": null}
{"id": "06f5ac05-87bf-4cc3-96d1-a05ba5dda524", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 6 * self.dim  # Further reduced population size for faster execution\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.F = 0.6  # Adjusted mutation factor for initial diversity\n        self.CR = 0.9  # Higher crossover rate for increased recombination\n        self.evaluations = 0\n        self.archive = []\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n\n                # Check archive for potential new base vector\n                if len(self.archive) > 0 and np.random.rand() < 0.1:\n                    base_vector = self.archive[np.random.randint(len(self.archive))]\n                else:\n                    base_vector = self.population[a]\n\n                # Mutation with potential archive vector\n                mutant = base_vector + self.F * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, *self.bounds)\n                \n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    # Archive successful mutants\n                    self.archive.append(trial)\n\n                # Dynamic adjustment based on fitness improvement\n                if trial_fitness < self.fitness.mean():\n                    self.F = np.clip(self.F + 0.01 * (0.5 - np.random.rand()), 0.1, 0.9)\n                    self.CR = np.clip(self.CR + 0.01 * (0.5 - np.random.rand()), 0.5, 1.0)\n\n        return self.population[np.argmin(self.fitness)]\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1", "name": "EnhancedMetaheuristicOptimizer", "description": "This algorithm enhances Differential Evolution by incorporating a dynamic archiving mechanism and adaptive scaling, focusing on reducing redundant evaluations and improving convergence speed.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e2479e79-b69d-45fa-b91b-0b20431aaa1a", "metadata": {"aucs": [0.8460838787318541, 0.8662210773214738, 0.8164573346626365, 0.8474260970208942, 0.8564395667445609, 0.8345479318139788, 0.8540491208796602, 0.8317501307836201, 0.8398020747513537, 0.6862735300194087, 0.7312545135338542, 0.7337114467926564, 0.7393741637085585, 0.7233185285708336, 0.6567521728063315, 0.7418944441517743, 0.7133538515172579, 0.7489585245586282, 0.21512818503010733, 0.13583250914468514, 0.12183102787103783, 0.10404529497511705, 0.12155147909505926, 0.11161737498757207, 0.13566255680944728, 0.13309452614576944, 0.14253313168169335, 0.10277272302788698, 0.11056387527357237, 0.1397652820307307, 0.12202565881943339, 0.13084970314919397, 0.1147862561070846, 0.1107156460462495, 0.09995298490831994, 0.10050844281822302, 0.9308272990481794, 0.9504949701555323, 0.9811165720089283, 0.8895067268384018, 0.9408710023392403, 0.9432442402822587, 0.9560733825932358, 0.9605358821067621, 0.9335584020145802, 0.5122660725578172, 0.5958772319256793, 0.5322793929517171, 0.5916223442813854, 0.5962377974045365, 0.678995085032133, 0.4755485481163809, 0.611284500745387, 0.6076148974411232, 0.8472652261287323, 0.8327665107298321, 0.805940854875559, 0.8202599398726511, 0.8380067227205756, 0.7967428263023542, 0.7747845915458351, 0.724097987386366, 0.8400537185005408, 0.40217369740982223, 0.18484126740458728, 0.36324051532467916, 0.37263017825860756, 0.20392326655030668, 0.41237192075948637, 0.3877440003099134, 0.2856761126710259, 0.3532608298652462, 0.3513102896224257, 0.21481712428264177, 0.2222788220777453, 0.29745499244108997, 0.1793286168051631, 0.22107342973119593, 0.2203450980563506, 0.32266939191309374, 0.43019538881702224, 0.3911602034296203, 0.5774387066263849, 0.48372916708951874, 0.2695686529190173, 0.33243437736866177, 0.40965558842833816, 0.6195002512470358, 0.3893141339666034, 0.3432472999933732, 0.5981410308120142, 0.5898843981655413, 0.7716245008655335, 0.5675668800912007, 0.33000017539178916, 0.6492708360853281, 0.5550601286062737, 0.7212557454319156, 0.6263478190421081, 0.1119579449124063, 0.23667253698061974, 0.2531368640355437, 0.3970862646124953, 0.1677008461223135, 0.13531017600578343, 0.2482487719050257, 0.14463749950973293, 0.12877118481664707, 0.36600715857411137, 0.3882310737730873, 0.29618786249399975, 0.45837274139040207, 0.5503106267937234, 0.3740273380776381, 0.3592493850333405, 0.2952051198575746, 0.37013075102967874, 0.750211501266788, 0.6666848209869163, 0.8116452718924732, 0.6430141624805874, 0.6515772159861947, 0.6732183674250557, 0.7595936637040608, 0.7542405270345075, 0.7362578781754887, 0.10952760241339854, 0.09747974746612997, 0.09881545004929926, 0.1050489895048855, 0.10220713828883776, 0.09193357941703961, 0.0978309479750844, 0.10876801218323995, 0.08878289143401286, 0.1514075341051615, 0.1327516452974833, 0.17921491165456171, 0.14894524904132433, 0.19931045960284177, 0.18922205595252428, 0.13680241626212442, 0.1803489665926591, 0.1462694853480363, 0.5042799239185823, 0.5566296502946564, 0.4306507622010627, 0.43610913378045735, 0.43789129616785827, 0.39826610120660055, 0.47585532965363087, 0.4564648588947926, 0.42518175752329834, 0.32166276967296914, 0.3514889373439898, 0.40557211227448786, 0.2849455300096645, 0.41406695063959165, 0.42012776184416367, 0.4123723247874548, 0.3978376085516072, 0.3542714761047776, 0.19650293233862182, 0.21438895488834142, 0.19605126648810656, 0.1945187066916556, 0.18776672033534592, 0.19023493490633725, 0.1865622335841266, 0.18682236690566367, 0.19951383700140324, 0.20665804903689056, 0.2775759957453616, 0.4478153759030584, 0.2164917410508882, 0.17873148994872046, 0.3428392679693817, 0.18711120661575587, 0.22613832652150356, 0.2631587376403516, 0.2083562319990443, 0.18259649389037402, 0.193431091961622, 0.829689805202301, 0.6978220523817482, 0.19641151775048604, 0.18580525236827816, 0.18014237990605797, 0.6759299998859297, 0.8063676359307129, 0.20185428942065176, 0.2068840166925202, 0.2064155591553115, 0.19895542901668328, 0.5987939544125035, 0.16433429851850268, 0.20842469407016762, 0.20376748218246887, 0.1830568662841463, 0.18714197816037104, 0.18534510948682426, 0.20206754668409033, 0.184903926747361, 0.17763988418342014, 0.18923074738169265, 0.19173453862244738, 0.18889295019318675, 0.07929852808174676, 0.08520227820452109, 0.08239062509294459, 0.08758241093881602, 0.07637705080278523, 0.0853394160128561, 0.09327844562796705, 0.07336447272886404, 0.07660269930659092]}, "mutation_prompt": null}
{"id": "6e084a9b-4d6c-4958-9526-4eb62e6b7759", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 6 * self.dim  # Further reduced population size for faster execution\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.F = 0.6  # Adjusted mutation factor for initial diversity\n        self.CR = 0.9  # Higher crossover rate for increased recombination\n        self.evaluations = 0\n        self.archive = []\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n\n                # Check archive for potential new base vector\n                if len(self.archive) > 0 and np.random.rand() < 0.1:\n                    base_vector = self.archive[np.random.randint(len(self.archive))]\n                else:\n                    base_vector = self.population[a]\n\n                # Mutation with potential archive vector\n                mutant = base_vector + self.F * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, *self.bounds)\n                \n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    # Archive successful mutants\n                    self.archive.append(trial)\n\n                # Dynamic adjustment based on fitness improvement\n                if trial_fitness < self.fitness.mean():\n                    self.F = np.clip(self.F + 0.01 * (0.5 - np.random.rand()), 0.1, 0.9)\n                    self.CR = np.clip(self.CR + 0.01 * (0.5 - np.random.rand()), 0.5, 1.0)\n\n        return self.population[np.argmin(self.fitness)]\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1", "name": "EnhancedMetaheuristicOptimizer", "description": "This algorithm enhances Differential Evolution by incorporating a dynamic archiving mechanism and adaptive scaling, focusing on reducing redundant evaluations and improving convergence speed.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e2479e79-b69d-45fa-b91b-0b20431aaa1a", "metadata": {"aucs": [0.8460838787318541, 0.8662210773214738, 0.8164573346626365, 0.8474260970208942, 0.8564395667445609, 0.8345479318139788, 0.8540491208796602, 0.8317501307836201, 0.8398020747513537, 0.6862735300194087, 0.7312545135338542, 0.7337114467926564, 0.7393741637085585, 0.7233185285708336, 0.6567521728063315, 0.7418944441517743, 0.7133538515172579, 0.7489585245586282, 0.21512818503010733, 0.13583250914468514, 0.12183102787103783, 0.10404529497511705, 0.12155147909505926, 0.11161737498757207, 0.13566255680944728, 0.13309452614576944, 0.14253313168169335, 0.10277272302788698, 0.11056387527357237, 0.1397652820307307, 0.12202565881943339, 0.13084970314919397, 0.1147862561070846, 0.1107156460462495, 0.09995298490831994, 0.10050844281822302, 0.9308272990481794, 0.9504949701555323, 0.9811165720089283, 0.8895067268384018, 0.9408710023392403, 0.9432442402822587, 0.9560733825932358, 0.9605358821067621, 0.9335584020145802, 0.5122660725578172, 0.5958772319256793, 0.5322793929517171, 0.5916223442813854, 0.5962377974045365, 0.678995085032133, 0.4755485481163809, 0.611284500745387, 0.6076148974411232, 0.8472652261287323, 0.8327665107298321, 0.805940854875559, 0.8202599398726511, 0.8380067227205756, 0.7967428263023542, 0.7747845915458351, 0.724097987386366, 0.8400537185005408, 0.40217369740982223, 0.18484126740458728, 0.36324051532467916, 0.37263017825860756, 0.20392326655030668, 0.41237192075948637, 0.3877440003099134, 0.2856761126710259, 0.3532608298652462, 0.3513102896224257, 0.21481712428264177, 0.2222788220777453, 0.29745499244108997, 0.1793286168051631, 0.22107342973119593, 0.2203450980563506, 0.32266939191309374, 0.43019538881702224, 0.3911602034296203, 0.5774387066263849, 0.48372916708951874, 0.2695686529190173, 0.33243437736866177, 0.40965558842833816, 0.6195002512470358, 0.3893141339666034, 0.3432472999933732, 0.5981410308120142, 0.5898843981655413, 0.7716245008655335, 0.5675668800912007, 0.33000017539178916, 0.6492708360853281, 0.5550601286062737, 0.7212557454319156, 0.6263478190421081, 0.1119579449124063, 0.23667253698061974, 0.2531368640355437, 0.3970862646124953, 0.1677008461223135, 0.13531017600578343, 0.2482487719050257, 0.14463749950973293, 0.12877118481664707, 0.36600715857411137, 0.3882310737730873, 0.29618786249399975, 0.45837274139040207, 0.5503106267937234, 0.3740273380776381, 0.3592493850333405, 0.2952051198575746, 0.37013075102967874, 0.750211501266788, 0.6666848209869163, 0.8116452718924732, 0.6430141624805874, 0.6515772159861947, 0.6732183674250557, 0.7595936637040608, 0.7542405270345075, 0.7362578781754887, 0.10952760241339854, 0.09747974746612997, 0.09881545004929926, 0.1050489895048855, 0.10220713828883776, 0.09193357941703961, 0.0978309479750844, 0.10876801218323995, 0.08878289143401286, 0.1514075341051615, 0.1327516452974833, 0.17921491165456171, 0.14894524904132433, 0.19931045960284177, 0.18922205595252428, 0.13680241626212442, 0.1803489665926591, 0.1462694853480363, 0.5042799239185823, 0.5566296502946564, 0.4306507622010627, 0.43610913378045735, 0.43789129616785827, 0.39826610120660055, 0.47585532965363087, 0.4564648588947926, 0.42518175752329834, 0.32166276967296914, 0.3514889373439898, 0.40557211227448786, 0.2849455300096645, 0.41406695063959165, 0.42012776184416367, 0.4123723247874548, 0.3978376085516072, 0.3542714761047776, 0.19650293233862182, 0.21438895488834142, 0.19605126648810656, 0.1945187066916556, 0.18776672033534592, 0.19023493490633725, 0.1865622335841266, 0.18682236690566367, 0.19951383700140324, 0.20665804903689056, 0.2775759957453616, 0.4478153759030584, 0.2164917410508882, 0.17873148994872046, 0.3428392679693817, 0.18711120661575587, 0.22613832652150356, 0.2631587376403516, 0.2083562319990443, 0.18259649389037402, 0.193431091961622, 0.829689805202301, 0.6978220523817482, 0.19641151775048604, 0.18580525236827816, 0.18014237990605797, 0.6759299998859297, 0.8063676359307129, 0.20185428942065176, 0.2068840166925202, 0.2064155591553115, 0.19895542901668328, 0.5987939544125035, 0.16433429851850268, 0.20842469407016762, 0.20376748218246887, 0.1830568662841463, 0.18714197816037104, 0.18534510948682426, 0.20206754668409033, 0.184903926747361, 0.17763988418342014, 0.18923074738169265, 0.19173453862244738, 0.18889295019318675, 0.07929852808174676, 0.08520227820452109, 0.08239062509294459, 0.08758241093881602, 0.07637705080278523, 0.0853394160128561, 0.09327844562796705, 0.07336447272886404, 0.07660269930659092]}, "mutation_prompt": null}
{"id": "6f45b6e8-8c09-474a-9683-165c81181c96", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 6 * self.dim  # Further reduced population size for faster execution\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.F = 0.6  # Adjusted mutation factor for initial diversity\n        self.CR = 0.9  # Higher crossover rate for increased recombination\n        self.evaluations = 0\n        self.archive = []\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n\n                # Check archive for potential new base vector\n                if len(self.archive) > 0 and np.random.rand() < 0.1:\n                    base_vector = self.archive[np.random.randint(len(self.archive))]\n                else:\n                    base_vector = self.population[a]\n\n                # Mutation with potential archive vector\n                mutant = base_vector + self.F * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, *self.bounds)\n                \n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    # Archive successful mutants\n                    self.archive.append(trial)\n\n                # Dynamic adjustment based on fitness improvement\n                if trial_fitness < self.fitness.mean():\n                    self.F = np.clip(self.F + 0.01 * (0.5 - np.random.rand()), 0.1, 0.9)\n                    self.CR = np.clip(self.CR + 0.01 * (0.5 - np.random.rand()), 0.5, 1.0)\n\n        return self.population[np.argmin(self.fitness)]\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1", "name": "EnhancedMetaheuristicOptimizer", "description": "This algorithm enhances Differential Evolution by incorporating a dynamic archiving mechanism and adaptive scaling, focusing on reducing redundant evaluations and improving convergence speed.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e2479e79-b69d-45fa-b91b-0b20431aaa1a", "metadata": {"aucs": [0.8460838787318541, 0.8662210773214738, 0.8164573346626365, 0.8474260970208942, 0.8564395667445609, 0.8345479318139788, 0.8540491208796602, 0.8317501307836201, 0.8398020747513537, 0.6862735300194087, 0.7312545135338542, 0.7337114467926564, 0.7393741637085585, 0.7233185285708336, 0.6567521728063315, 0.7418944441517743, 0.7133538515172579, 0.7489585245586282, 0.21512818503010733, 0.13583250914468514, 0.12183102787103783, 0.10404529497511705, 0.12155147909505926, 0.11161737498757207, 0.13566255680944728, 0.13309452614576944, 0.14253313168169335, 0.10277272302788698, 0.11056387527357237, 0.1397652820307307, 0.12202565881943339, 0.13084970314919397, 0.1147862561070846, 0.1107156460462495, 0.09995298490831994, 0.10050844281822302, 0.9308272990481794, 0.9504949701555323, 0.9811165720089283, 0.8895067268384018, 0.9408710023392403, 0.9432442402822587, 0.9560733825932358, 0.9605358821067621, 0.9335584020145802, 0.5122660725578172, 0.5958772319256793, 0.5322793929517171, 0.5916223442813854, 0.5962377974045365, 0.678995085032133, 0.4755485481163809, 0.611284500745387, 0.6076148974411232, 0.8472652261287323, 0.8327665107298321, 0.805940854875559, 0.8202599398726511, 0.8380067227205756, 0.7967428263023542, 0.7747845915458351, 0.724097987386366, 0.8400537185005408, 0.40217369740982223, 0.18484126740458728, 0.36324051532467916, 0.37263017825860756, 0.20392326655030668, 0.41237192075948637, 0.3877440003099134, 0.2856761126710259, 0.3532608298652462, 0.3513102896224257, 0.21481712428264177, 0.2222788220777453, 0.29745499244108997, 0.1793286168051631, 0.22107342973119593, 0.2203450980563506, 0.32266939191309374, 0.43019538881702224, 0.3911602034296203, 0.5774387066263849, 0.48372916708951874, 0.2695686529190173, 0.33243437736866177, 0.40965558842833816, 0.6195002512470358, 0.3893141339666034, 0.3432472999933732, 0.5981410308120142, 0.5898843981655413, 0.7716245008655335, 0.5675668800912007, 0.33000017539178916, 0.6492708360853281, 0.5550601286062737, 0.7212557454319156, 0.6263478190421081, 0.1119579449124063, 0.23667253698061974, 0.2531368640355437, 0.3970862646124953, 0.1677008461223135, 0.13531017600578343, 0.2482487719050257, 0.14463749950973293, 0.12877118481664707, 0.36600715857411137, 0.3882310737730873, 0.29618786249399975, 0.45837274139040207, 0.5503106267937234, 0.3740273380776381, 0.3592493850333405, 0.2952051198575746, 0.37013075102967874, 0.750211501266788, 0.6666848209869163, 0.8116452718924732, 0.6430141624805874, 0.6515772159861947, 0.6732183674250557, 0.7595936637040608, 0.7542405270345075, 0.7362578781754887, 0.10952760241339854, 0.09747974746612997, 0.09881545004929926, 0.1050489895048855, 0.10220713828883776, 0.09193357941703961, 0.0978309479750844, 0.10876801218323995, 0.08878289143401286, 0.1514075341051615, 0.1327516452974833, 0.17921491165456171, 0.14894524904132433, 0.19931045960284177, 0.18922205595252428, 0.13680241626212442, 0.1803489665926591, 0.1462694853480363, 0.5042799239185823, 0.5566296502946564, 0.4306507622010627, 0.43610913378045735, 0.43789129616785827, 0.39826610120660055, 0.47585532965363087, 0.4564648588947926, 0.42518175752329834, 0.32166276967296914, 0.3514889373439898, 0.40557211227448786, 0.2849455300096645, 0.41406695063959165, 0.42012776184416367, 0.4123723247874548, 0.3978376085516072, 0.3542714761047776, 0.19650293233862182, 0.21438895488834142, 0.19605126648810656, 0.1945187066916556, 0.18776672033534592, 0.19023493490633725, 0.1865622335841266, 0.18682236690566367, 0.19951383700140324, 0.20665804903689056, 0.2775759957453616, 0.4478153759030584, 0.2164917410508882, 0.17873148994872046, 0.3428392679693817, 0.18711120661575587, 0.22613832652150356, 0.2631587376403516, 0.2083562319990443, 0.18259649389037402, 0.193431091961622, 0.829689805202301, 0.6978220523817482, 0.19641151775048604, 0.18580525236827816, 0.18014237990605797, 0.6759299998859297, 0.8063676359307129, 0.20185428942065176, 0.2068840166925202, 0.2064155591553115, 0.19895542901668328, 0.5987939544125035, 0.16433429851850268, 0.20842469407016762, 0.20376748218246887, 0.1830568662841463, 0.18714197816037104, 0.18534510948682426, 0.20206754668409033, 0.184903926747361, 0.17763988418342014, 0.18923074738169265, 0.19173453862244738, 0.18889295019318675, 0.07929852808174676, 0.08520227820452109, 0.08239062509294459, 0.08758241093881602, 0.07637705080278523, 0.0853394160128561, 0.09327844562796705, 0.07336447272886404, 0.07660269930659092]}, "mutation_prompt": null}
{"id": "19549817-bc1b-4617-b6e5-0a023d397f95", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 6 * self.dim  # Further reduced population size for faster execution\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.F = 0.6  # Adjusted mutation factor for initial diversity\n        self.CR = 0.9  # Higher crossover rate for increased recombination\n        self.evaluations = 0\n        self.archive = []\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n\n                # Check archive for potential new base vector\n                if len(self.archive) > 0 and np.random.rand() < 0.1:\n                    base_vector = self.archive[np.random.randint(len(self.archive))]\n                else:\n                    base_vector = self.population[a]\n\n                # Mutation with potential archive vector\n                mutant = base_vector + self.F * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, *self.bounds)\n                \n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    # Archive successful mutants\n                    self.archive.append(trial)\n\n                # Dynamic adjustment based on fitness improvement\n                if trial_fitness < self.fitness.mean():\n                    self.F = np.clip(self.F + 0.01 * (0.5 - np.random.rand()), 0.1, 0.9)\n                    self.CR = np.clip(self.CR + 0.01 * (0.5 - np.random.rand()), 0.5, 1.0)\n\n        return self.population[np.argmin(self.fitness)]\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1", "name": "EnhancedMetaheuristicOptimizer", "description": "This algorithm enhances Differential Evolution by incorporating a dynamic archiving mechanism and adaptive scaling, focusing on reducing redundant evaluations and improving convergence speed.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e2479e79-b69d-45fa-b91b-0b20431aaa1a", "metadata": {"aucs": [0.8460838787318541, 0.8662210773214738, 0.8164573346626365, 0.8474260970208942, 0.8564395667445609, 0.8345479318139788, 0.8540491208796602, 0.8317501307836201, 0.8398020747513537, 0.6862735300194087, 0.7312545135338542, 0.7337114467926564, 0.7393741637085585, 0.7233185285708336, 0.6567521728063315, 0.7418944441517743, 0.7133538515172579, 0.7489585245586282, 0.21512818503010733, 0.13583250914468514, 0.12183102787103783, 0.10404529497511705, 0.12155147909505926, 0.11161737498757207, 0.13566255680944728, 0.13309452614576944, 0.14253313168169335, 0.10277272302788698, 0.11056387527357237, 0.1397652820307307, 0.12202565881943339, 0.13084970314919397, 0.1147862561070846, 0.1107156460462495, 0.09995298490831994, 0.10050844281822302, 0.9308272990481794, 0.9504949701555323, 0.9811165720089283, 0.8895067268384018, 0.9408710023392403, 0.9432442402822587, 0.9560733825932358, 0.9605358821067621, 0.9335584020145802, 0.5122660725578172, 0.5958772319256793, 0.5322793929517171, 0.5916223442813854, 0.5962377974045365, 0.678995085032133, 0.4755485481163809, 0.611284500745387, 0.6076148974411232, 0.8472652261287323, 0.8327665107298321, 0.805940854875559, 0.8202599398726511, 0.8380067227205756, 0.7967428263023542, 0.7747845915458351, 0.724097987386366, 0.8400537185005408, 0.40217369740982223, 0.18484126740458728, 0.36324051532467916, 0.37263017825860756, 0.20392326655030668, 0.41237192075948637, 0.3877440003099134, 0.2856761126710259, 0.3532608298652462, 0.3513102896224257, 0.21481712428264177, 0.2222788220777453, 0.29745499244108997, 0.1793286168051631, 0.22107342973119593, 0.2203450980563506, 0.32266939191309374, 0.43019538881702224, 0.3911602034296203, 0.5774387066263849, 0.48372916708951874, 0.2695686529190173, 0.33243437736866177, 0.40965558842833816, 0.6195002512470358, 0.3893141339666034, 0.3432472999933732, 0.5981410308120142, 0.5898843981655413, 0.7716245008655335, 0.5675668800912007, 0.33000017539178916, 0.6492708360853281, 0.5550601286062737, 0.7212557454319156, 0.6263478190421081, 0.1119579449124063, 0.23667253698061974, 0.2531368640355437, 0.3970862646124953, 0.1677008461223135, 0.13531017600578343, 0.2482487719050257, 0.14463749950973293, 0.12877118481664707, 0.36600715857411137, 0.3882310737730873, 0.29618786249399975, 0.45837274139040207, 0.5503106267937234, 0.3740273380776381, 0.3592493850333405, 0.2952051198575746, 0.37013075102967874, 0.750211501266788, 0.6666848209869163, 0.8116452718924732, 0.6430141624805874, 0.6515772159861947, 0.6732183674250557, 0.7595936637040608, 0.7542405270345075, 0.7362578781754887, 0.10952760241339854, 0.09747974746612997, 0.09881545004929926, 0.1050489895048855, 0.10220713828883776, 0.09193357941703961, 0.0978309479750844, 0.10876801218323995, 0.08878289143401286, 0.1514075341051615, 0.1327516452974833, 0.17921491165456171, 0.14894524904132433, 0.19931045960284177, 0.18922205595252428, 0.13680241626212442, 0.1803489665926591, 0.1462694853480363, 0.5042799239185823, 0.5566296502946564, 0.4306507622010627, 0.43610913378045735, 0.43789129616785827, 0.39826610120660055, 0.47585532965363087, 0.4564648588947926, 0.42518175752329834, 0.32166276967296914, 0.3514889373439898, 0.40557211227448786, 0.2849455300096645, 0.41406695063959165, 0.42012776184416367, 0.4123723247874548, 0.3978376085516072, 0.3542714761047776, 0.19650293233862182, 0.21438895488834142, 0.19605126648810656, 0.1945187066916556, 0.18776672033534592, 0.19023493490633725, 0.1865622335841266, 0.18682236690566367, 0.19951383700140324, 0.20665804903689056, 0.2775759957453616, 0.4478153759030584, 0.2164917410508882, 0.17873148994872046, 0.3428392679693817, 0.18711120661575587, 0.22613832652150356, 0.2631587376403516, 0.2083562319990443, 0.18259649389037402, 0.193431091961622, 0.829689805202301, 0.6978220523817482, 0.19641151775048604, 0.18580525236827816, 0.18014237990605797, 0.6759299998859297, 0.8063676359307129, 0.20185428942065176, 0.2068840166925202, 0.2064155591553115, 0.19895542901668328, 0.5987939544125035, 0.16433429851850268, 0.20842469407016762, 0.20376748218246887, 0.1830568662841463, 0.18714197816037104, 0.18534510948682426, 0.20206754668409033, 0.184903926747361, 0.17763988418342014, 0.18923074738169265, 0.19173453862244738, 0.18889295019318675, 0.07929852808174676, 0.08520227820452109, 0.08239062509294459, 0.08758241093881602, 0.07637705080278523, 0.0853394160128561, 0.09327844562796705, 0.07336447272886404, 0.07660269930659092]}, "mutation_prompt": null}
{"id": "fc8ef75c-25fb-48d1-a130-75916a114989", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 6 * self.dim  # Further reduced population size for faster execution\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.F = 0.6  # Adjusted mutation factor for initial diversity\n        self.CR = 0.9  # Higher crossover rate for increased recombination\n        self.evaluations = 0\n        self.archive = []\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n\n                # Check archive for potential new base vector\n                if len(self.archive) > 0 and np.random.rand() < 0.1:\n                    base_vector = self.archive[np.random.randint(len(self.archive))]\n                else:\n                    base_vector = self.population[a]\n\n                # Mutation with potential archive vector\n                mutant = base_vector + self.F * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, *self.bounds)\n                \n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    # Archive successful mutants\n                    self.archive.append(trial)\n\n                # Dynamic adjustment based on fitness improvement\n                if trial_fitness < self.fitness.mean():\n                    self.F = np.clip(self.F + 0.01 * (0.5 - np.random.rand()), 0.1, 0.9)\n                    self.CR = np.clip(self.CR + 0.01 * (0.5 - np.random.rand()), 0.5, 1.0)\n\n        return self.population[np.argmin(self.fitness)]\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1", "name": "EnhancedMetaheuristicOptimizer", "description": "This algorithm enhances Differential Evolution by incorporating a dynamic archiving mechanism and adaptive scaling, focusing on reducing redundant evaluations and improving convergence speed.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e2479e79-b69d-45fa-b91b-0b20431aaa1a", "metadata": {"aucs": [0.8460838787318541, 0.8662210773214738, 0.8164573346626365, 0.8474260970208942, 0.8564395667445609, 0.8345479318139788, 0.8540491208796602, 0.8317501307836201, 0.8398020747513537, 0.6862735300194087, 0.7312545135338542, 0.7337114467926564, 0.7393741637085585, 0.7233185285708336, 0.6567521728063315, 0.7418944441517743, 0.7133538515172579, 0.7489585245586282, 0.21512818503010733, 0.13583250914468514, 0.12183102787103783, 0.10404529497511705, 0.12155147909505926, 0.11161737498757207, 0.13566255680944728, 0.13309452614576944, 0.14253313168169335, 0.10277272302788698, 0.11056387527357237, 0.1397652820307307, 0.12202565881943339, 0.13084970314919397, 0.1147862561070846, 0.1107156460462495, 0.09995298490831994, 0.10050844281822302, 0.9308272990481794, 0.9504949701555323, 0.9811165720089283, 0.8895067268384018, 0.9408710023392403, 0.9432442402822587, 0.9560733825932358, 0.9605358821067621, 0.9335584020145802, 0.5122660725578172, 0.5958772319256793, 0.5322793929517171, 0.5916223442813854, 0.5962377974045365, 0.678995085032133, 0.4755485481163809, 0.611284500745387, 0.6076148974411232, 0.8472652261287323, 0.8327665107298321, 0.805940854875559, 0.8202599398726511, 0.8380067227205756, 0.7967428263023542, 0.7747845915458351, 0.724097987386366, 0.8400537185005408, 0.40217369740982223, 0.18484126740458728, 0.36324051532467916, 0.37263017825860756, 0.20392326655030668, 0.41237192075948637, 0.3877440003099134, 0.2856761126710259, 0.3532608298652462, 0.3513102896224257, 0.21481712428264177, 0.2222788220777453, 0.29745499244108997, 0.1793286168051631, 0.22107342973119593, 0.2203450980563506, 0.32266939191309374, 0.43019538881702224, 0.3911602034296203, 0.5774387066263849, 0.48372916708951874, 0.2695686529190173, 0.33243437736866177, 0.40965558842833816, 0.6195002512470358, 0.3893141339666034, 0.3432472999933732, 0.5981410308120142, 0.5898843981655413, 0.7716245008655335, 0.5675668800912007, 0.33000017539178916, 0.6492708360853281, 0.5550601286062737, 0.7212557454319156, 0.6263478190421081, 0.1119579449124063, 0.23667253698061974, 0.2531368640355437, 0.3970862646124953, 0.1677008461223135, 0.13531017600578343, 0.2482487719050257, 0.14463749950973293, 0.12877118481664707, 0.36600715857411137, 0.3882310737730873, 0.29618786249399975, 0.45837274139040207, 0.5503106267937234, 0.3740273380776381, 0.3592493850333405, 0.2952051198575746, 0.37013075102967874, 0.750211501266788, 0.6666848209869163, 0.8116452718924732, 0.6430141624805874, 0.6515772159861947, 0.6732183674250557, 0.7595936637040608, 0.7542405270345075, 0.7362578781754887, 0.10952760241339854, 0.09747974746612997, 0.09881545004929926, 0.1050489895048855, 0.10220713828883776, 0.09193357941703961, 0.0978309479750844, 0.10876801218323995, 0.08878289143401286, 0.1514075341051615, 0.1327516452974833, 0.17921491165456171, 0.14894524904132433, 0.19931045960284177, 0.18922205595252428, 0.13680241626212442, 0.1803489665926591, 0.1462694853480363, 0.5042799239185823, 0.5566296502946564, 0.4306507622010627, 0.43610913378045735, 0.43789129616785827, 0.39826610120660055, 0.47585532965363087, 0.4564648588947926, 0.42518175752329834, 0.32166276967296914, 0.3514889373439898, 0.40557211227448786, 0.2849455300096645, 0.41406695063959165, 0.42012776184416367, 0.4123723247874548, 0.3978376085516072, 0.3542714761047776, 0.19650293233862182, 0.21438895488834142, 0.19605126648810656, 0.1945187066916556, 0.18776672033534592, 0.19023493490633725, 0.1865622335841266, 0.18682236690566367, 0.19951383700140324, 0.20665804903689056, 0.2775759957453616, 0.4478153759030584, 0.2164917410508882, 0.17873148994872046, 0.3428392679693817, 0.18711120661575587, 0.22613832652150356, 0.2631587376403516, 0.2083562319990443, 0.18259649389037402, 0.193431091961622, 0.829689805202301, 0.6978220523817482, 0.19641151775048604, 0.18580525236827816, 0.18014237990605797, 0.6759299998859297, 0.8063676359307129, 0.20185428942065176, 0.2068840166925202, 0.2064155591553115, 0.19895542901668328, 0.5987939544125035, 0.16433429851850268, 0.20842469407016762, 0.20376748218246887, 0.1830568662841463, 0.18714197816037104, 0.18534510948682426, 0.20206754668409033, 0.184903926747361, 0.17763988418342014, 0.18923074738169265, 0.19173453862244738, 0.18889295019318675, 0.07929852808174676, 0.08520227820452109, 0.08239062509294459, 0.08758241093881602, 0.07637705080278523, 0.0853394160128561, 0.09327844562796705, 0.07336447272886404, 0.07660269930659092]}, "mutation_prompt": null}
{"id": "aaa542cf-1732-4404-a123-2176d95dc1e2", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 6 * self.dim  # Further reduced population size for faster execution\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.F = 0.6  # Adjusted mutation factor for initial diversity\n        self.CR = 0.9  # Higher crossover rate for increased recombination\n        self.evaluations = 0\n        self.archive = []\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n\n                # Check archive for potential new base vector\n                if len(self.archive) > 0 and np.random.rand() < 0.1:\n                    base_vector = self.archive[np.random.randint(len(self.archive))]\n                else:\n                    base_vector = self.population[a]\n\n                # Mutation with potential archive vector\n                mutant = base_vector + self.F * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, *self.bounds)\n                \n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    # Archive successful mutants\n                    self.archive.append(trial)\n\n                # Dynamic adjustment based on fitness improvement\n                if trial_fitness < self.fitness.mean():\n                    self.F = np.clip(self.F + 0.01 * (0.5 - np.random.rand()), 0.1, 0.9)\n                    self.CR = np.clip(self.CR + 0.01 * (0.5 - np.random.rand()), 0.5, 1.0)\n\n        return self.population[np.argmin(self.fitness)]\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1", "name": "EnhancedMetaheuristicOptimizer", "description": "This algorithm enhances Differential Evolution by incorporating a dynamic archiving mechanism and adaptive scaling, focusing on reducing redundant evaluations and improving convergence speed.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e2479e79-b69d-45fa-b91b-0b20431aaa1a", "metadata": {"aucs": [0.8460838787318541, 0.8662210773214738, 0.8164573346626365, 0.8474260970208942, 0.8564395667445609, 0.8345479318139788, 0.8540491208796602, 0.8317501307836201, 0.8398020747513537, 0.6862735300194087, 0.7312545135338542, 0.7337114467926564, 0.7393741637085585, 0.7233185285708336, 0.6567521728063315, 0.7418944441517743, 0.7133538515172579, 0.7489585245586282, 0.21512818503010733, 0.13583250914468514, 0.12183102787103783, 0.10404529497511705, 0.12155147909505926, 0.11161737498757207, 0.13566255680944728, 0.13309452614576944, 0.14253313168169335, 0.10277272302788698, 0.11056387527357237, 0.1397652820307307, 0.12202565881943339, 0.13084970314919397, 0.1147862561070846, 0.1107156460462495, 0.09995298490831994, 0.10050844281822302, 0.9308272990481794, 0.9504949701555323, 0.9811165720089283, 0.8895067268384018, 0.9408710023392403, 0.9432442402822587, 0.9560733825932358, 0.9605358821067621, 0.9335584020145802, 0.5122660725578172, 0.5958772319256793, 0.5322793929517171, 0.5916223442813854, 0.5962377974045365, 0.678995085032133, 0.4755485481163809, 0.611284500745387, 0.6076148974411232, 0.8472652261287323, 0.8327665107298321, 0.805940854875559, 0.8202599398726511, 0.8380067227205756, 0.7967428263023542, 0.7747845915458351, 0.724097987386366, 0.8400537185005408, 0.40217369740982223, 0.18484126740458728, 0.36324051532467916, 0.37263017825860756, 0.20392326655030668, 0.41237192075948637, 0.3877440003099134, 0.2856761126710259, 0.3532608298652462, 0.3513102896224257, 0.21481712428264177, 0.2222788220777453, 0.29745499244108997, 0.1793286168051631, 0.22107342973119593, 0.2203450980563506, 0.32266939191309374, 0.43019538881702224, 0.3911602034296203, 0.5774387066263849, 0.48372916708951874, 0.2695686529190173, 0.33243437736866177, 0.40965558842833816, 0.6195002512470358, 0.3893141339666034, 0.3432472999933732, 0.5981410308120142, 0.5898843981655413, 0.7716245008655335, 0.5675668800912007, 0.33000017539178916, 0.6492708360853281, 0.5550601286062737, 0.7212557454319156, 0.6263478190421081, 0.1119579449124063, 0.23667253698061974, 0.2531368640355437, 0.3970862646124953, 0.1677008461223135, 0.13531017600578343, 0.2482487719050257, 0.14463749950973293, 0.12877118481664707, 0.36600715857411137, 0.3882310737730873, 0.29618786249399975, 0.45837274139040207, 0.5503106267937234, 0.3740273380776381, 0.3592493850333405, 0.2952051198575746, 0.37013075102967874, 0.750211501266788, 0.6666848209869163, 0.8116452718924732, 0.6430141624805874, 0.6515772159861947, 0.6732183674250557, 0.7595936637040608, 0.7542405270345075, 0.7362578781754887, 0.10952760241339854, 0.09747974746612997, 0.09881545004929926, 0.1050489895048855, 0.10220713828883776, 0.09193357941703961, 0.0978309479750844, 0.10876801218323995, 0.08878289143401286, 0.1514075341051615, 0.1327516452974833, 0.17921491165456171, 0.14894524904132433, 0.19931045960284177, 0.18922205595252428, 0.13680241626212442, 0.1803489665926591, 0.1462694853480363, 0.5042799239185823, 0.5566296502946564, 0.4306507622010627, 0.43610913378045735, 0.43789129616785827, 0.39826610120660055, 0.47585532965363087, 0.4564648588947926, 0.42518175752329834, 0.32166276967296914, 0.3514889373439898, 0.40557211227448786, 0.2849455300096645, 0.41406695063959165, 0.42012776184416367, 0.4123723247874548, 0.3978376085516072, 0.3542714761047776, 0.19650293233862182, 0.21438895488834142, 0.19605126648810656, 0.1945187066916556, 0.18776672033534592, 0.19023493490633725, 0.1865622335841266, 0.18682236690566367, 0.19951383700140324, 0.20665804903689056, 0.2775759957453616, 0.4478153759030584, 0.2164917410508882, 0.17873148994872046, 0.3428392679693817, 0.18711120661575587, 0.22613832652150356, 0.2631587376403516, 0.2083562319990443, 0.18259649389037402, 0.193431091961622, 0.829689805202301, 0.6978220523817482, 0.19641151775048604, 0.18580525236827816, 0.18014237990605797, 0.6759299998859297, 0.8063676359307129, 0.20185428942065176, 0.2068840166925202, 0.2064155591553115, 0.19895542901668328, 0.5987939544125035, 0.16433429851850268, 0.20842469407016762, 0.20376748218246887, 0.1830568662841463, 0.18714197816037104, 0.18534510948682426, 0.20206754668409033, 0.184903926747361, 0.17763988418342014, 0.18923074738169265, 0.19173453862244738, 0.18889295019318675, 0.07929852808174676, 0.08520227820452109, 0.08239062509294459, 0.08758241093881602, 0.07637705080278523, 0.0853394160128561, 0.09327844562796705, 0.07336447272886404, 0.07660269930659092]}, "mutation_prompt": null}
{"id": "e85f571c-5e98-4c97-a24b-3b3412d5f38c", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 6 * self.dim  # Further reduced population size for faster execution\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.F = 0.6  # Adjusted mutation factor for initial diversity\n        self.CR = 0.9  # Higher crossover rate for increased recombination\n        self.evaluations = 0\n        self.archive = []\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n\n                # Check archive for potential new base vector\n                if len(self.archive) > 0 and np.random.rand() < 0.1:\n                    base_vector = self.archive[np.random.randint(len(self.archive))]\n                else:\n                    base_vector = self.population[a]\n\n                # Mutation with potential archive vector\n                mutant = base_vector + self.F * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, *self.bounds)\n                \n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    # Archive successful mutants\n                    self.archive.append(trial)\n\n                # Dynamic adjustment based on fitness improvement\n                if trial_fitness < self.fitness.mean():\n                    self.F = np.clip(self.F + 0.01 * (0.5 - np.random.rand()), 0.1, 0.9)\n                    self.CR = np.clip(self.CR + 0.01 * (0.5 - np.random.rand()), 0.5, 1.0)\n\n        return self.population[np.argmin(self.fitness)]\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1", "name": "EnhancedMetaheuristicOptimizer", "description": "This algorithm enhances Differential Evolution by incorporating a dynamic archiving mechanism and adaptive scaling, focusing on reducing redundant evaluations and improving convergence speed.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e2479e79-b69d-45fa-b91b-0b20431aaa1a", "metadata": {"aucs": [0.8460838787318541, 0.8662210773214738, 0.8164573346626365, 0.8474260970208942, 0.8564395667445609, 0.8345479318139788, 0.8540491208796602, 0.8317501307836201, 0.8398020747513537, 0.6862735300194087, 0.7312545135338542, 0.7337114467926564, 0.7393741637085585, 0.7233185285708336, 0.6567521728063315, 0.7418944441517743, 0.7133538515172579, 0.7489585245586282, 0.21512818503010733, 0.13583250914468514, 0.12183102787103783, 0.10404529497511705, 0.12155147909505926, 0.11161737498757207, 0.13566255680944728, 0.13309452614576944, 0.14253313168169335, 0.10277272302788698, 0.11056387527357237, 0.1397652820307307, 0.12202565881943339, 0.13084970314919397, 0.1147862561070846, 0.1107156460462495, 0.09995298490831994, 0.10050844281822302, 0.9308272990481794, 0.9504949701555323, 0.9811165720089283, 0.8895067268384018, 0.9408710023392403, 0.9432442402822587, 0.9560733825932358, 0.9605358821067621, 0.9335584020145802, 0.5122660725578172, 0.5958772319256793, 0.5322793929517171, 0.5916223442813854, 0.5962377974045365, 0.678995085032133, 0.4755485481163809, 0.611284500745387, 0.6076148974411232, 0.8472652261287323, 0.8327665107298321, 0.805940854875559, 0.8202599398726511, 0.8380067227205756, 0.7967428263023542, 0.7747845915458351, 0.724097987386366, 0.8400537185005408, 0.40217369740982223, 0.18484126740458728, 0.36324051532467916, 0.37263017825860756, 0.20392326655030668, 0.41237192075948637, 0.3877440003099134, 0.2856761126710259, 0.3532608298652462, 0.3513102896224257, 0.21481712428264177, 0.2222788220777453, 0.29745499244108997, 0.1793286168051631, 0.22107342973119593, 0.2203450980563506, 0.32266939191309374, 0.43019538881702224, 0.3911602034296203, 0.5774387066263849, 0.48372916708951874, 0.2695686529190173, 0.33243437736866177, 0.40965558842833816, 0.6195002512470358, 0.3893141339666034, 0.3432472999933732, 0.5981410308120142, 0.5898843981655413, 0.7716245008655335, 0.5675668800912007, 0.33000017539178916, 0.6492708360853281, 0.5550601286062737, 0.7212557454319156, 0.6263478190421081, 0.1119579449124063, 0.23667253698061974, 0.2531368640355437, 0.3970862646124953, 0.1677008461223135, 0.13531017600578343, 0.2482487719050257, 0.14463749950973293, 0.12877118481664707, 0.36600715857411137, 0.3882310737730873, 0.29618786249399975, 0.45837274139040207, 0.5503106267937234, 0.3740273380776381, 0.3592493850333405, 0.2952051198575746, 0.37013075102967874, 0.750211501266788, 0.6666848209869163, 0.8116452718924732, 0.6430141624805874, 0.6515772159861947, 0.6732183674250557, 0.7595936637040608, 0.7542405270345075, 0.7362578781754887, 0.10952760241339854, 0.09747974746612997, 0.09881545004929926, 0.1050489895048855, 0.10220713828883776, 0.09193357941703961, 0.0978309479750844, 0.10876801218323995, 0.08878289143401286, 0.1514075341051615, 0.1327516452974833, 0.17921491165456171, 0.14894524904132433, 0.19931045960284177, 0.18922205595252428, 0.13680241626212442, 0.1803489665926591, 0.1462694853480363, 0.5042799239185823, 0.5566296502946564, 0.4306507622010627, 0.43610913378045735, 0.43789129616785827, 0.39826610120660055, 0.47585532965363087, 0.4564648588947926, 0.42518175752329834, 0.32166276967296914, 0.3514889373439898, 0.40557211227448786, 0.2849455300096645, 0.41406695063959165, 0.42012776184416367, 0.4123723247874548, 0.3978376085516072, 0.3542714761047776, 0.19650293233862182, 0.21438895488834142, 0.19605126648810656, 0.1945187066916556, 0.18776672033534592, 0.19023493490633725, 0.1865622335841266, 0.18682236690566367, 0.19951383700140324, 0.20665804903689056, 0.2775759957453616, 0.4478153759030584, 0.2164917410508882, 0.17873148994872046, 0.3428392679693817, 0.18711120661575587, 0.22613832652150356, 0.2631587376403516, 0.2083562319990443, 0.18259649389037402, 0.193431091961622, 0.829689805202301, 0.6978220523817482, 0.19641151775048604, 0.18580525236827816, 0.18014237990605797, 0.6759299998859297, 0.8063676359307129, 0.20185428942065176, 0.2068840166925202, 0.2064155591553115, 0.19895542901668328, 0.5987939544125035, 0.16433429851850268, 0.20842469407016762, 0.20376748218246887, 0.1830568662841463, 0.18714197816037104, 0.18534510948682426, 0.20206754668409033, 0.184903926747361, 0.17763988418342014, 0.18923074738169265, 0.19173453862244738, 0.18889295019318675, 0.07929852808174676, 0.08520227820452109, 0.08239062509294459, 0.08758241093881602, 0.07637705080278523, 0.0853394160128561, 0.09327844562796705, 0.07336447272886404, 0.07660269930659092]}, "mutation_prompt": null}
{"id": "5565427c-be4d-4594-9b49-85cab62c6b13", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 6 * self.dim  # Further reduced population size for faster execution\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.F = 0.6  # Adjusted mutation factor for initial diversity\n        self.CR = 0.9  # Higher crossover rate for increased recombination\n        self.evaluations = 0\n        self.archive = []\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n\n                # Check archive for potential new base vector\n                if len(self.archive) > 0 and np.random.rand() < 0.1:\n                    base_vector = self.archive[np.random.randint(len(self.archive))]\n                else:\n                    base_vector = self.population[a]\n\n                # Mutation with potential archive vector\n                mutant = base_vector + self.F * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, *self.bounds)\n                \n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    # Archive successful mutants\n                    self.archive.append(trial)\n\n                # Dynamic adjustment based on fitness improvement\n                if trial_fitness < self.fitness.mean():\n                    self.F = np.clip(self.F + 0.01 * (0.5 - np.random.rand()), 0.1, 0.9)\n                    self.CR = np.clip(self.CR + 0.01 * (0.5 - np.random.rand()), 0.5, 1.0)\n\n        return self.population[np.argmin(self.fitness)]\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1", "name": "EnhancedMetaheuristicOptimizer", "description": "This algorithm enhances Differential Evolution by incorporating a dynamic archiving mechanism and adaptive scaling, focusing on reducing redundant evaluations and improving convergence speed.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e2479e79-b69d-45fa-b91b-0b20431aaa1a", "metadata": {"aucs": [0.8460838787318541, 0.8662210773214738, 0.8164573346626365, 0.8474260970208942, 0.8564395667445609, 0.8345479318139788, 0.8540491208796602, 0.8317501307836201, 0.8398020747513537, 0.6862735300194087, 0.7312545135338542, 0.7337114467926564, 0.7393741637085585, 0.7233185285708336, 0.6567521728063315, 0.7418944441517743, 0.7133538515172579, 0.7489585245586282, 0.21512818503010733, 0.13583250914468514, 0.12183102787103783, 0.10404529497511705, 0.12155147909505926, 0.11161737498757207, 0.13566255680944728, 0.13309452614576944, 0.14253313168169335, 0.10277272302788698, 0.11056387527357237, 0.1397652820307307, 0.12202565881943339, 0.13084970314919397, 0.1147862561070846, 0.1107156460462495, 0.09995298490831994, 0.10050844281822302, 0.9308272990481794, 0.9504949701555323, 0.9811165720089283, 0.8895067268384018, 0.9408710023392403, 0.9432442402822587, 0.9560733825932358, 0.9605358821067621, 0.9335584020145802, 0.5122660725578172, 0.5958772319256793, 0.5322793929517171, 0.5916223442813854, 0.5962377974045365, 0.678995085032133, 0.4755485481163809, 0.611284500745387, 0.6076148974411232, 0.8472652261287323, 0.8327665107298321, 0.805940854875559, 0.8202599398726511, 0.8380067227205756, 0.7967428263023542, 0.7747845915458351, 0.724097987386366, 0.8400537185005408, 0.40217369740982223, 0.18484126740458728, 0.36324051532467916, 0.37263017825860756, 0.20392326655030668, 0.41237192075948637, 0.3877440003099134, 0.2856761126710259, 0.3532608298652462, 0.3513102896224257, 0.21481712428264177, 0.2222788220777453, 0.29745499244108997, 0.1793286168051631, 0.22107342973119593, 0.2203450980563506, 0.32266939191309374, 0.43019538881702224, 0.3911602034296203, 0.5774387066263849, 0.48372916708951874, 0.2695686529190173, 0.33243437736866177, 0.40965558842833816, 0.6195002512470358, 0.3893141339666034, 0.3432472999933732, 0.5981410308120142, 0.5898843981655413, 0.7716245008655335, 0.5675668800912007, 0.33000017539178916, 0.6492708360853281, 0.5550601286062737, 0.7212557454319156, 0.6263478190421081, 0.1119579449124063, 0.23667253698061974, 0.2531368640355437, 0.3970862646124953, 0.1677008461223135, 0.13531017600578343, 0.2482487719050257, 0.14463749950973293, 0.12877118481664707, 0.36600715857411137, 0.3882310737730873, 0.29618786249399975, 0.45837274139040207, 0.5503106267937234, 0.3740273380776381, 0.3592493850333405, 0.2952051198575746, 0.37013075102967874, 0.750211501266788, 0.6666848209869163, 0.8116452718924732, 0.6430141624805874, 0.6515772159861947, 0.6732183674250557, 0.7595936637040608, 0.7542405270345075, 0.7362578781754887, 0.10952760241339854, 0.09747974746612997, 0.09881545004929926, 0.1050489895048855, 0.10220713828883776, 0.09193357941703961, 0.0978309479750844, 0.10876801218323995, 0.08878289143401286, 0.1514075341051615, 0.1327516452974833, 0.17921491165456171, 0.14894524904132433, 0.19931045960284177, 0.18922205595252428, 0.13680241626212442, 0.1803489665926591, 0.1462694853480363, 0.5042799239185823, 0.5566296502946564, 0.4306507622010627, 0.43610913378045735, 0.43789129616785827, 0.39826610120660055, 0.47585532965363087, 0.4564648588947926, 0.42518175752329834, 0.32166276967296914, 0.3514889373439898, 0.40557211227448786, 0.2849455300096645, 0.41406695063959165, 0.42012776184416367, 0.4123723247874548, 0.3978376085516072, 0.3542714761047776, 0.19650293233862182, 0.21438895488834142, 0.19605126648810656, 0.1945187066916556, 0.18776672033534592, 0.19023493490633725, 0.1865622335841266, 0.18682236690566367, 0.19951383700140324, 0.20665804903689056, 0.2775759957453616, 0.4478153759030584, 0.2164917410508882, 0.17873148994872046, 0.3428392679693817, 0.18711120661575587, 0.22613832652150356, 0.2631587376403516, 0.2083562319990443, 0.18259649389037402, 0.193431091961622, 0.829689805202301, 0.6978220523817482, 0.19641151775048604, 0.18580525236827816, 0.18014237990605797, 0.6759299998859297, 0.8063676359307129, 0.20185428942065176, 0.2068840166925202, 0.2064155591553115, 0.19895542901668328, 0.5987939544125035, 0.16433429851850268, 0.20842469407016762, 0.20376748218246887, 0.1830568662841463, 0.18714197816037104, 0.18534510948682426, 0.20206754668409033, 0.184903926747361, 0.17763988418342014, 0.18923074738169265, 0.19173453862244738, 0.18889295019318675, 0.07929852808174676, 0.08520227820452109, 0.08239062509294459, 0.08758241093881602, 0.07637705080278523, 0.0853394160128561, 0.09327844562796705, 0.07336447272886404, 0.07660269930659092]}, "mutation_prompt": null}
{"id": "00656013-fa03-4c18-ac66-7c972c9fc175", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 6 * self.dim  # Further reduced population size for faster execution\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.F = 0.6  # Adjusted mutation factor for initial diversity\n        self.CR = 0.9  # Higher crossover rate for increased recombination\n        self.evaluations = 0\n        self.archive = []\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n\n                # Check archive for potential new base vector\n                if len(self.archive) > 0 and np.random.rand() < 0.1:\n                    base_vector = self.archive[np.random.randint(len(self.archive))]\n                else:\n                    base_vector = self.population[a]\n\n                # Mutation with potential archive vector\n                mutant = base_vector + self.F * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, *self.bounds)\n                \n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    # Archive successful mutants\n                    self.archive.append(trial)\n\n                # Dynamic adjustment based on fitness improvement\n                if trial_fitness < self.fitness.mean():\n                    self.F = np.clip(self.F + 0.01 * (0.5 - np.random.rand()), 0.1, 0.9)\n                    self.CR = np.clip(self.CR + 0.01 * (0.5 - np.random.rand()), 0.5, 1.0)\n\n        return self.population[np.argmin(self.fitness)]\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1", "name": "EnhancedMetaheuristicOptimizer", "description": "This algorithm enhances Differential Evolution by incorporating a dynamic archiving mechanism and adaptive scaling, focusing on reducing redundant evaluations and improving convergence speed.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e2479e79-b69d-45fa-b91b-0b20431aaa1a", "metadata": {"aucs": [0.8460838787318541, 0.8662210773214738, 0.8164573346626365, 0.8474260970208942, 0.8564395667445609, 0.8345479318139788, 0.8540491208796602, 0.8317501307836201, 0.8398020747513537, 0.6862735300194087, 0.7312545135338542, 0.7337114467926564, 0.7393741637085585, 0.7233185285708336, 0.6567521728063315, 0.7418944441517743, 0.7133538515172579, 0.7489585245586282, 0.21512818503010733, 0.13583250914468514, 0.12183102787103783, 0.10404529497511705, 0.12155147909505926, 0.11161737498757207, 0.13566255680944728, 0.13309452614576944, 0.14253313168169335, 0.10277272302788698, 0.11056387527357237, 0.1397652820307307, 0.12202565881943339, 0.13084970314919397, 0.1147862561070846, 0.1107156460462495, 0.09995298490831994, 0.10050844281822302, 0.9308272990481794, 0.9504949701555323, 0.9811165720089283, 0.8895067268384018, 0.9408710023392403, 0.9432442402822587, 0.9560733825932358, 0.9605358821067621, 0.9335584020145802, 0.5122660725578172, 0.5958772319256793, 0.5322793929517171, 0.5916223442813854, 0.5962377974045365, 0.678995085032133, 0.4755485481163809, 0.611284500745387, 0.6076148974411232, 0.8472652261287323, 0.8327665107298321, 0.805940854875559, 0.8202599398726511, 0.8380067227205756, 0.7967428263023542, 0.7747845915458351, 0.724097987386366, 0.8400537185005408, 0.40217369740982223, 0.18484126740458728, 0.36324051532467916, 0.37263017825860756, 0.20392326655030668, 0.41237192075948637, 0.3877440003099134, 0.2856761126710259, 0.3532608298652462, 0.3513102896224257, 0.21481712428264177, 0.2222788220777453, 0.29745499244108997, 0.1793286168051631, 0.22107342973119593, 0.2203450980563506, 0.32266939191309374, 0.43019538881702224, 0.3911602034296203, 0.5774387066263849, 0.48372916708951874, 0.2695686529190173, 0.33243437736866177, 0.40965558842833816, 0.6195002512470358, 0.3893141339666034, 0.3432472999933732, 0.5981410308120142, 0.5898843981655413, 0.7716245008655335, 0.5675668800912007, 0.33000017539178916, 0.6492708360853281, 0.5550601286062737, 0.7212557454319156, 0.6263478190421081, 0.1119579449124063, 0.23667253698061974, 0.2531368640355437, 0.3970862646124953, 0.1677008461223135, 0.13531017600578343, 0.2482487719050257, 0.14463749950973293, 0.12877118481664707, 0.36600715857411137, 0.3882310737730873, 0.29618786249399975, 0.45837274139040207, 0.5503106267937234, 0.3740273380776381, 0.3592493850333405, 0.2952051198575746, 0.37013075102967874, 0.750211501266788, 0.6666848209869163, 0.8116452718924732, 0.6430141624805874, 0.6515772159861947, 0.6732183674250557, 0.7595936637040608, 0.7542405270345075, 0.7362578781754887, 0.10952760241339854, 0.09747974746612997, 0.09881545004929926, 0.1050489895048855, 0.10220713828883776, 0.09193357941703961, 0.0978309479750844, 0.10876801218323995, 0.08878289143401286, 0.1514075341051615, 0.1327516452974833, 0.17921491165456171, 0.14894524904132433, 0.19931045960284177, 0.18922205595252428, 0.13680241626212442, 0.1803489665926591, 0.1462694853480363, 0.5042799239185823, 0.5566296502946564, 0.4306507622010627, 0.43610913378045735, 0.43789129616785827, 0.39826610120660055, 0.47585532965363087, 0.4564648588947926, 0.42518175752329834, 0.32166276967296914, 0.3514889373439898, 0.40557211227448786, 0.2849455300096645, 0.41406695063959165, 0.42012776184416367, 0.4123723247874548, 0.3978376085516072, 0.3542714761047776, 0.19650293233862182, 0.21438895488834142, 0.19605126648810656, 0.1945187066916556, 0.18776672033534592, 0.19023493490633725, 0.1865622335841266, 0.18682236690566367, 0.19951383700140324, 0.20665804903689056, 0.2775759957453616, 0.4478153759030584, 0.2164917410508882, 0.17873148994872046, 0.3428392679693817, 0.18711120661575587, 0.22613832652150356, 0.2631587376403516, 0.2083562319990443, 0.18259649389037402, 0.193431091961622, 0.829689805202301, 0.6978220523817482, 0.19641151775048604, 0.18580525236827816, 0.18014237990605797, 0.6759299998859297, 0.8063676359307129, 0.20185428942065176, 0.2068840166925202, 0.2064155591553115, 0.19895542901668328, 0.5987939544125035, 0.16433429851850268, 0.20842469407016762, 0.20376748218246887, 0.1830568662841463, 0.18714197816037104, 0.18534510948682426, 0.20206754668409033, 0.184903926747361, 0.17763988418342014, 0.18923074738169265, 0.19173453862244738, 0.18889295019318675, 0.07929852808174676, 0.08520227820452109, 0.08239062509294459, 0.08758241093881602, 0.07637705080278523, 0.0853394160128561, 0.09327844562796705, 0.07336447272886404, 0.07660269930659092]}, "mutation_prompt": null}
{"id": "9fdd6e97-0eb5-4fce-b4e2-9327c5478ff3", "solution": "import numpy as np\n\nclass AdaptiveMetaheuristicOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 5 * self.dim  # Reduced population size\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.F = 0.5  # Initial lower mutation factor\n        self.CR = 0.8  # Adjusted crossover rate\n        self.evaluations = 0\n        self.archive = []\n        self.archive_limit = 50  # Limit archive size\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b = np.random.choice(self.pop_size, 2, replace=False)\n\n                # Select base vector and dynamic mutation\n                if len(self.archive) > 0 and np.random.rand() < 0.2:\n                    base_vector = self.archive[np.random.randint(len(self.archive))]\n                else:\n                    base_vector = self.population[i]\n\n                mutant = base_vector + self.adaptive_mutation() * (self.population[a] - self.population[b])\n                mutant = np.clip(mutant, *self.bounds)\n                \n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    # Archive successful mutants with limit\n                    if len(self.archive) < self.archive_limit:\n                        self.archive.append(trial)\n                    else:\n                        self.archive[np.random.randint(self.archive_limit)] = trial\n\n                # Adjust mutation strategy based on fitness\n                if trial_fitness < self.fitness.mean():\n                    self.F = np.clip(self.F + 0.01 * (0.5 - np.random.rand()), 0.2, 0.8)\n                    self.CR = np.clip(self.CR + 0.01 * (0.6 - np.random.rand()), 0.4, 1.0)\n\n        return self.population[np.argmin(self.fitness)]\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1\n\n    def adaptive_mutation(self):\n        return 0.5 + 0.3 * np.random.rand()", "name": "AdaptiveMetaheuristicOptimizer", "description": "Introduces adaptive mutation strategies and archive-based sampling to improve exploration-exploitation balance efficiently.", "configspace": "", "generation": 68, "fitness": 0.39673065286414894, "feedback": "The algorithm AdaptiveMetaheuristicOptimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.40 with standard deviation 0.26.", "error": "", "parent_id": "e2479e79-b69d-45fa-b91b-0b20431aaa1a", "metadata": {"aucs": [0.7847857710174693, 0.7515646732648789, 0.7874697657492071, 0.7878471924316746, 0.7624740242080355, 0.7912942114199559, 0.7503002000432273, 0.7729835321729344, 0.7959656866701593, 0.5986062192460962, 0.6349002171665846, 0.6052065229114152, 0.6131864691788758, 0.5723198530863561, 0.6115465153062137, 0.5977679204624992, 0.5448131533970832, 0.6107867952181735, 0.10019575116730883, 0.09071524860361913, 0.0970421679940604, 0.10316298832846538, 0.09685421561383623, 0.08807538188393138, 0.08575200058855903, 0.10253059537213993, 0.09109021116965288, 0.086074606328717, 0.08294117014683455, 0.09089780746346665, 0.08060410703309862, 0.07917706632962129, 0.08490063173946438, 0.09022940182407402, 0.07196857369524279, 0.08250140241615189, 0.9834220544229005, 0.9108786807020126, 0.9631859824603692, 0.9467711521437248, 0.9638740273736681, 0.9799221553521362, 0.9543019086261785, 0.9553223447044511, 0.9654862036019667, 0.4562060496764805, 0.4705473600691181, 0.4609862451464891, 0.4701311154864143, 0.4337728776112122, 0.4599972289267352, 0.4278166574715373, 0.43211878399748904, 0.47836705291969706, 0.7992434182560489, 0.7712031227573328, 0.7457728478871086, 0.7775119843988993, 0.7636180526476154, 0.796352700680935, 0.7677113210180957, 0.7760385024057552, 0.7311627861390344, 0.4114311262002368, 0.42339704098990405, 0.4966513887210823, 0.4324515887766819, 0.40547738113082443, 0.49400989236665194, 0.5242163958534263, 0.28226469272638854, 0.42088595252063965, 0.454748064725671, 0.34378826599103696, 0.3342965941967565, 0.3562024356453031, 0.3998352619073119, 0.546364300720943, 0.4082080274634401, 0.3285912223998686, 0.4250677007111703, 0.5508698082512281, 0.5652743371950033, 0.5796610378817818, 0.5602779188043769, 0.5763373200054029, 0.5881902131267687, 0.5495198864902429, 0.5943687706086913, 0.6006165947328964, 0.6590664072409278, 0.6753001630282366, 0.6754285942655838, 0.6630184335832681, 0.6172603901668499, 0.6480575761753304, 0.692930851590438, 0.6894420517630719, 0.6622262310663274, 0.17474209857245537, 0.127799140385506, 0.22983743792464228, 0.17049014627083448, 0.4445446511268669, 0.32944939782905636, 0.152854388332202, 0.18289753280183663, 0.16130000617165063, 0.4428373636757914, 0.43110423959097965, 0.4118030779228483, 0.42365131985139437, 0.44296150040074855, 0.4428851144671807, 0.40438756625829564, 0.39565512257805524, 0.4072277532543419, 0.7261382548045308, 0.713353022977645, 0.7238467700016094, 0.7318758201458659, 0.7348854422868689, 0.7149921439664397, 0.7613132869093386, 0.7457544439361585, 0.7191991234196631, 0.09710435477098711, 0.09272911845189813, 0.11310262405594018, 0.08885268929115009, 0.10500373801683649, 0.09536521423308475, 0.1047540056199896, 0.08948067373415414, 0.08990189479888577, 0.15239104578432694, 0.145897932085982, 0.14421372070505334, 0.16580170066884914, 0.1499550787726599, 0.13110739418353423, 0.14699256235940794, 0.14490216832711245, 0.1512352604360493, 0.3585958697570343, 0.35078957132815414, 0.33249983414828543, 0.3478608267574438, 0.33978515897061123, 0.33013436131730334, 0.342436962748052, 0.3591494287943253, 0.36168359412337037, 0.2886167816290921, 0.2906766539182729, 0.29865369747454784, 0.27134071872739096, 0.27264018679198576, 0.2658788727321696, 0.2741190861797691, 0.2625722349231514, 0.3328061569839561, 0.20081367353792023, 0.1840503035135338, 0.18347075984694583, 0.1942109447962792, 0.18670853010112787, 0.18160244280779148, 0.20511621988425133, 0.1885002190167694, 0.17619306212092511, 0.17893771622876142, 0.17818487366979152, 0.18063041938660007, 0.17040477365464612, 0.1728716440802215, 0.1799774722475198, 0.19009636588613543, 0.18575770539856762, 0.1766073371700153, 0.6356899882953386, 0.4611894037719597, 0.6335230095947162, 0.1715348856038056, 0.1832072718201806, 0.6799917886759992, 0.49569950709662103, 0.23343247473359563, 0.4196194397181222, 0.3322115715179863, 0.651261492425474, 0.48431524521038805, 0.40079519079017045, 0.5147624218466256, 0.6516464200735175, 0.18321724331510703, 0.20877981310568072, 0.2060311867542307, 0.18761155502750515, 0.19404160714088425, 0.19670830518934534, 0.17870563892431235, 0.18272788485165137, 0.1823932499740788, 0.1828946775982263, 0.19310678066310893, 0.1815981974744455, 0.06663060437735624, 0.06976682493585817, 0.07456818605403026, 0.07647185020690561, 0.06491292625702971, 0.07844915057922097, 0.08590635631910115, 0.07446904591961334, 0.06900943344629995]}, "mutation_prompt": null}
{"id": "2ad649f7-2e91-42d4-9e5c-fe166e0dfff7", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 6 * self.dim  # Further reduced population size for faster execution\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.F = 0.6  # Adjusted mutation factor for initial diversity\n        self.CR = 0.9  # Higher crossover rate for increased recombination\n        self.evaluations = 0\n        self.archive = []\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n\n                # Check archive for potential new base vector\n                if len(self.archive) > 0 and np.random.rand() < 0.1:\n                    base_vector = self.archive[np.random.randint(len(self.archive))]\n                else:\n                    base_vector = self.population[a]\n\n                # Mutation with potential archive vector\n                mutant = base_vector + self.F * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, *self.bounds)\n                \n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    # Archive successful mutants\n                    self.archive.append(trial)\n\n                # Dynamic adjustment based on fitness improvement\n                if trial_fitness < self.fitness.mean():\n                    self.F = np.clip(self.F + 0.01 * (0.5 - np.random.rand()), 0.1, 0.9)\n                    self.CR = np.clip(self.CR + 0.01 * (0.5 - np.random.rand()), 0.5, 1.0)\n\n        return self.population[np.argmin(self.fitness)]\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1", "name": "EnhancedMetaheuristicOptimizer", "description": "This algorithm enhances Differential Evolution by incorporating a dynamic archiving mechanism and adaptive scaling, focusing on reducing redundant evaluations and improving convergence speed.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e2479e79-b69d-45fa-b91b-0b20431aaa1a", "metadata": {"aucs": [0.8460838787318541, 0.8662210773214738, 0.8164573346626365, 0.8474260970208942, 0.8564395667445609, 0.8345479318139788, 0.8540491208796602, 0.8317501307836201, 0.8398020747513537, 0.6862735300194087, 0.7312545135338542, 0.7337114467926564, 0.7393741637085585, 0.7233185285708336, 0.6567521728063315, 0.7418944441517743, 0.7133538515172579, 0.7489585245586282, 0.21512818503010733, 0.13583250914468514, 0.12183102787103783, 0.10404529497511705, 0.12155147909505926, 0.11161737498757207, 0.13566255680944728, 0.13309452614576944, 0.14253313168169335, 0.10277272302788698, 0.11056387527357237, 0.1397652820307307, 0.12202565881943339, 0.13084970314919397, 0.1147862561070846, 0.1107156460462495, 0.09995298490831994, 0.10050844281822302, 0.9308272990481794, 0.9504949701555323, 0.9811165720089283, 0.8895067268384018, 0.9408710023392403, 0.9432442402822587, 0.9560733825932358, 0.9605358821067621, 0.9335584020145802, 0.5122660725578172, 0.5958772319256793, 0.5322793929517171, 0.5916223442813854, 0.5962377974045365, 0.678995085032133, 0.4755485481163809, 0.611284500745387, 0.6076148974411232, 0.8472652261287323, 0.8327665107298321, 0.805940854875559, 0.8202599398726511, 0.8380067227205756, 0.7967428263023542, 0.7747845915458351, 0.724097987386366, 0.8400537185005408, 0.40217369740982223, 0.18484126740458728, 0.36324051532467916, 0.37263017825860756, 0.20392326655030668, 0.41237192075948637, 0.3877440003099134, 0.2856761126710259, 0.3532608298652462, 0.3513102896224257, 0.21481712428264177, 0.2222788220777453, 0.29745499244108997, 0.1793286168051631, 0.22107342973119593, 0.2203450980563506, 0.32266939191309374, 0.43019538881702224, 0.3911602034296203, 0.5774387066263849, 0.48372916708951874, 0.2695686529190173, 0.33243437736866177, 0.40965558842833816, 0.6195002512470358, 0.3893141339666034, 0.3432472999933732, 0.5981410308120142, 0.5898843981655413, 0.7716245008655335, 0.5675668800912007, 0.33000017539178916, 0.6492708360853281, 0.5550601286062737, 0.7212557454319156, 0.6263478190421081, 0.1119579449124063, 0.23667253698061974, 0.2531368640355437, 0.3970862646124953, 0.1677008461223135, 0.13531017600578343, 0.2482487719050257, 0.14463749950973293, 0.12877118481664707, 0.36600715857411137, 0.3882310737730873, 0.29618786249399975, 0.45837274139040207, 0.5503106267937234, 0.3740273380776381, 0.3592493850333405, 0.2952051198575746, 0.37013075102967874, 0.750211501266788, 0.6666848209869163, 0.8116452718924732, 0.6430141624805874, 0.6515772159861947, 0.6732183674250557, 0.7595936637040608, 0.7542405270345075, 0.7362578781754887, 0.10952760241339854, 0.09747974746612997, 0.09881545004929926, 0.1050489895048855, 0.10220713828883776, 0.09193357941703961, 0.0978309479750844, 0.10876801218323995, 0.08878289143401286, 0.1514075341051615, 0.1327516452974833, 0.17921491165456171, 0.14894524904132433, 0.19931045960284177, 0.18922205595252428, 0.13680241626212442, 0.1803489665926591, 0.1462694853480363, 0.5042799239185823, 0.5566296502946564, 0.4306507622010627, 0.43610913378045735, 0.43789129616785827, 0.39826610120660055, 0.47585532965363087, 0.4564648588947926, 0.42518175752329834, 0.32166276967296914, 0.3514889373439898, 0.40557211227448786, 0.2849455300096645, 0.41406695063959165, 0.42012776184416367, 0.4123723247874548, 0.3978376085516072, 0.3542714761047776, 0.19650293233862182, 0.21438895488834142, 0.19605126648810656, 0.1945187066916556, 0.18776672033534592, 0.19023493490633725, 0.1865622335841266, 0.18682236690566367, 0.19951383700140324, 0.20665804903689056, 0.2775759957453616, 0.4478153759030584, 0.2164917410508882, 0.17873148994872046, 0.3428392679693817, 0.18711120661575587, 0.22613832652150356, 0.2631587376403516, 0.2083562319990443, 0.18259649389037402, 0.193431091961622, 0.829689805202301, 0.6978220523817482, 0.19641151775048604, 0.18580525236827816, 0.18014237990605797, 0.6759299998859297, 0.8063676359307129, 0.20185428942065176, 0.2068840166925202, 0.2064155591553115, 0.19895542901668328, 0.5987939544125035, 0.16433429851850268, 0.20842469407016762, 0.20376748218246887, 0.1830568662841463, 0.18714197816037104, 0.18534510948682426, 0.20206754668409033, 0.184903926747361, 0.17763988418342014, 0.18923074738169265, 0.19173453862244738, 0.18889295019318675, 0.07929852808174676, 0.08520227820452109, 0.08239062509294459, 0.08758241093881602, 0.07637705080278523, 0.0853394160128561, 0.09327844562796705, 0.07336447272886404, 0.07660269930659092]}, "mutation_prompt": null}
{"id": "9615baa0-602e-4412-894d-40f7d37b2ee1", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 6 * self.dim  # Further reduced population size for faster execution\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.F = 0.6  # Adjusted mutation factor for initial diversity\n        self.CR = 0.9  # Higher crossover rate for increased recombination\n        self.evaluations = 0\n        self.archive = []\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n\n                # Check archive for potential new base vector\n                if len(self.archive) > 0 and np.random.rand() < 0.1:\n                    base_vector = self.archive[np.random.randint(len(self.archive))]\n                else:\n                    base_vector = self.population[a]\n\n                # Mutation with potential archive vector\n                mutant = base_vector + self.F * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, *self.bounds)\n                \n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    # Archive successful mutants\n                    self.archive.append(trial)\n\n                # Dynamic adjustment based on fitness improvement\n                if trial_fitness < self.fitness.mean():\n                    self.F = np.clip(self.F + 0.01 * (0.5 - np.random.rand()), 0.1, 0.9)\n                    self.CR = np.clip(self.CR + 0.01 * (0.5 - np.random.rand()), 0.5, 1.0)\n\n        return self.population[np.argmin(self.fitness)]\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1", "name": "EnhancedMetaheuristicOptimizer", "description": "This algorithm enhances Differential Evolution by incorporating a dynamic archiving mechanism and adaptive scaling, focusing on reducing redundant evaluations and improving convergence speed.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e2479e79-b69d-45fa-b91b-0b20431aaa1a", "metadata": {"aucs": [0.8460838787318541, 0.8662210773214738, 0.8164573346626365, 0.8474260970208942, 0.8564395667445609, 0.8345479318139788, 0.8540491208796602, 0.8317501307836201, 0.8398020747513537, 0.6862735300194087, 0.7312545135338542, 0.7337114467926564, 0.7393741637085585, 0.7233185285708336, 0.6567521728063315, 0.7418944441517743, 0.7133538515172579, 0.7489585245586282, 0.21512818503010733, 0.13583250914468514, 0.12183102787103783, 0.10404529497511705, 0.12155147909505926, 0.11161737498757207, 0.13566255680944728, 0.13309452614576944, 0.14253313168169335, 0.10277272302788698, 0.11056387527357237, 0.1397652820307307, 0.12202565881943339, 0.13084970314919397, 0.1147862561070846, 0.1107156460462495, 0.09995298490831994, 0.10050844281822302, 0.9308272990481794, 0.9504949701555323, 0.9811165720089283, 0.8895067268384018, 0.9408710023392403, 0.9432442402822587, 0.9560733825932358, 0.9605358821067621, 0.9335584020145802, 0.5122660725578172, 0.5958772319256793, 0.5322793929517171, 0.5916223442813854, 0.5962377974045365, 0.678995085032133, 0.4755485481163809, 0.611284500745387, 0.6076148974411232, 0.8472652261287323, 0.8327665107298321, 0.805940854875559, 0.8202599398726511, 0.8380067227205756, 0.7967428263023542, 0.7747845915458351, 0.724097987386366, 0.8400537185005408, 0.40217369740982223, 0.18484126740458728, 0.36324051532467916, 0.37263017825860756, 0.20392326655030668, 0.41237192075948637, 0.3877440003099134, 0.2856761126710259, 0.3532608298652462, 0.3513102896224257, 0.21481712428264177, 0.2222788220777453, 0.29745499244108997, 0.1793286168051631, 0.22107342973119593, 0.2203450980563506, 0.32266939191309374, 0.43019538881702224, 0.3911602034296203, 0.5774387066263849, 0.48372916708951874, 0.2695686529190173, 0.33243437736866177, 0.40965558842833816, 0.6195002512470358, 0.3893141339666034, 0.3432472999933732, 0.5981410308120142, 0.5898843981655413, 0.7716245008655335, 0.5675668800912007, 0.33000017539178916, 0.6492708360853281, 0.5550601286062737, 0.7212557454319156, 0.6263478190421081, 0.1119579449124063, 0.23667253698061974, 0.2531368640355437, 0.3970862646124953, 0.1677008461223135, 0.13531017600578343, 0.2482487719050257, 0.14463749950973293, 0.12877118481664707, 0.36600715857411137, 0.3882310737730873, 0.29618786249399975, 0.45837274139040207, 0.5503106267937234, 0.3740273380776381, 0.3592493850333405, 0.2952051198575746, 0.37013075102967874, 0.750211501266788, 0.6666848209869163, 0.8116452718924732, 0.6430141624805874, 0.6515772159861947, 0.6732183674250557, 0.7595936637040608, 0.7542405270345075, 0.7362578781754887, 0.10952760241339854, 0.09747974746612997, 0.09881545004929926, 0.1050489895048855, 0.10220713828883776, 0.09193357941703961, 0.0978309479750844, 0.10876801218323995, 0.08878289143401286, 0.1514075341051615, 0.1327516452974833, 0.17921491165456171, 0.14894524904132433, 0.19931045960284177, 0.18922205595252428, 0.13680241626212442, 0.1803489665926591, 0.1462694853480363, 0.5042799239185823, 0.5566296502946564, 0.4306507622010627, 0.43610913378045735, 0.43789129616785827, 0.39826610120660055, 0.47585532965363087, 0.4564648588947926, 0.42518175752329834, 0.32166276967296914, 0.3514889373439898, 0.40557211227448786, 0.2849455300096645, 0.41406695063959165, 0.42012776184416367, 0.4123723247874548, 0.3978376085516072, 0.3542714761047776, 0.19650293233862182, 0.21438895488834142, 0.19605126648810656, 0.1945187066916556, 0.18776672033534592, 0.19023493490633725, 0.1865622335841266, 0.18682236690566367, 0.19951383700140324, 0.20665804903689056, 0.2775759957453616, 0.4478153759030584, 0.2164917410508882, 0.17873148994872046, 0.3428392679693817, 0.18711120661575587, 0.22613832652150356, 0.2631587376403516, 0.2083562319990443, 0.18259649389037402, 0.193431091961622, 0.829689805202301, 0.6978220523817482, 0.19641151775048604, 0.18580525236827816, 0.18014237990605797, 0.6759299998859297, 0.8063676359307129, 0.20185428942065176, 0.2068840166925202, 0.2064155591553115, 0.19895542901668328, 0.5987939544125035, 0.16433429851850268, 0.20842469407016762, 0.20376748218246887, 0.1830568662841463, 0.18714197816037104, 0.18534510948682426, 0.20206754668409033, 0.184903926747361, 0.17763988418342014, 0.18923074738169265, 0.19173453862244738, 0.18889295019318675, 0.07929852808174676, 0.08520227820452109, 0.08239062509294459, 0.08758241093881602, 0.07637705080278523, 0.0853394160128561, 0.09327844562796705, 0.07336447272886404, 0.07660269930659092]}, "mutation_prompt": null}
{"id": "cd1ce029-5b95-47f8-9601-f471d4084132", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 6 * self.dim  # Further reduced population size for faster execution\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.F = 0.6  # Adjusted mutation factor for initial diversity\n        self.CR = 0.9  # Higher crossover rate for increased recombination\n        self.evaluations = 0\n        self.archive = []\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n\n                # Check archive for potential new base vector\n                if len(self.archive) > 0 and np.random.rand() < 0.1:\n                    base_vector = self.archive[np.random.randint(len(self.archive))]\n                else:\n                    base_vector = self.population[a]\n\n                # Mutation with potential archive vector\n                mutant = base_vector + self.F * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, *self.bounds)\n                \n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    # Archive successful mutants\n                    self.archive.append(trial)\n\n                # Dynamic adjustment based on fitness improvement\n                if trial_fitness < self.fitness.mean():\n                    self.F = np.clip(self.F + 0.01 * (0.5 - np.random.rand()), 0.1, 0.9)\n                    self.CR = np.clip(self.CR + 0.01 * (0.5 - np.random.rand()), 0.5, 1.0)\n\n        return self.population[np.argmin(self.fitness)]\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1", "name": "EnhancedMetaheuristicOptimizer", "description": "This algorithm enhances Differential Evolution by incorporating a dynamic archiving mechanism and adaptive scaling, focusing on reducing redundant evaluations and improving convergence speed.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e2479e79-b69d-45fa-b91b-0b20431aaa1a", "metadata": {"aucs": [0.8460838787318541, 0.8662210773214738, 0.8164573346626365, 0.8474260970208942, 0.8564395667445609, 0.8345479318139788, 0.8540491208796602, 0.8317501307836201, 0.8398020747513537, 0.6862735300194087, 0.7312545135338542, 0.7337114467926564, 0.7393741637085585, 0.7233185285708336, 0.6567521728063315, 0.7418944441517743, 0.7133538515172579, 0.7489585245586282, 0.21512818503010733, 0.13583250914468514, 0.12183102787103783, 0.10404529497511705, 0.12155147909505926, 0.11161737498757207, 0.13566255680944728, 0.13309452614576944, 0.14253313168169335, 0.10277272302788698, 0.11056387527357237, 0.1397652820307307, 0.12202565881943339, 0.13084970314919397, 0.1147862561070846, 0.1107156460462495, 0.09995298490831994, 0.10050844281822302, 0.9308272990481794, 0.9504949701555323, 0.9811165720089283, 0.8895067268384018, 0.9408710023392403, 0.9432442402822587, 0.9560733825932358, 0.9605358821067621, 0.9335584020145802, 0.5122660725578172, 0.5958772319256793, 0.5322793929517171, 0.5916223442813854, 0.5962377974045365, 0.678995085032133, 0.4755485481163809, 0.611284500745387, 0.6076148974411232, 0.8472652261287323, 0.8327665107298321, 0.805940854875559, 0.8202599398726511, 0.8380067227205756, 0.7967428263023542, 0.7747845915458351, 0.724097987386366, 0.8400537185005408, 0.40217369740982223, 0.18484126740458728, 0.36324051532467916, 0.37263017825860756, 0.20392326655030668, 0.41237192075948637, 0.3877440003099134, 0.2856761126710259, 0.3532608298652462, 0.3513102896224257, 0.21481712428264177, 0.2222788220777453, 0.29745499244108997, 0.1793286168051631, 0.22107342973119593, 0.2203450980563506, 0.32266939191309374, 0.43019538881702224, 0.3911602034296203, 0.5774387066263849, 0.48372916708951874, 0.2695686529190173, 0.33243437736866177, 0.40965558842833816, 0.6195002512470358, 0.3893141339666034, 0.3432472999933732, 0.5981410308120142, 0.5898843981655413, 0.7716245008655335, 0.5675668800912007, 0.33000017539178916, 0.6492708360853281, 0.5550601286062737, 0.7212557454319156, 0.6263478190421081, 0.1119579449124063, 0.23667253698061974, 0.2531368640355437, 0.3970862646124953, 0.1677008461223135, 0.13531017600578343, 0.2482487719050257, 0.14463749950973293, 0.12877118481664707, 0.36600715857411137, 0.3882310737730873, 0.29618786249399975, 0.45837274139040207, 0.5503106267937234, 0.3740273380776381, 0.3592493850333405, 0.2952051198575746, 0.37013075102967874, 0.750211501266788, 0.6666848209869163, 0.8116452718924732, 0.6430141624805874, 0.6515772159861947, 0.6732183674250557, 0.7595936637040608, 0.7542405270345075, 0.7362578781754887, 0.10952760241339854, 0.09747974746612997, 0.09881545004929926, 0.1050489895048855, 0.10220713828883776, 0.09193357941703961, 0.0978309479750844, 0.10876801218323995, 0.08878289143401286, 0.1514075341051615, 0.1327516452974833, 0.17921491165456171, 0.14894524904132433, 0.19931045960284177, 0.18922205595252428, 0.13680241626212442, 0.1803489665926591, 0.1462694853480363, 0.5042799239185823, 0.5566296502946564, 0.4306507622010627, 0.43610913378045735, 0.43789129616785827, 0.39826610120660055, 0.47585532965363087, 0.4564648588947926, 0.42518175752329834, 0.32166276967296914, 0.3514889373439898, 0.40557211227448786, 0.2849455300096645, 0.41406695063959165, 0.42012776184416367, 0.4123723247874548, 0.3978376085516072, 0.3542714761047776, 0.19650293233862182, 0.21438895488834142, 0.19605126648810656, 0.1945187066916556, 0.18776672033534592, 0.19023493490633725, 0.1865622335841266, 0.18682236690566367, 0.19951383700140324, 0.20665804903689056, 0.2775759957453616, 0.4478153759030584, 0.2164917410508882, 0.17873148994872046, 0.3428392679693817, 0.18711120661575587, 0.22613832652150356, 0.2631587376403516, 0.2083562319990443, 0.18259649389037402, 0.193431091961622, 0.829689805202301, 0.6978220523817482, 0.19641151775048604, 0.18580525236827816, 0.18014237990605797, 0.6759299998859297, 0.8063676359307129, 0.20185428942065176, 0.2068840166925202, 0.2064155591553115, 0.19895542901668328, 0.5987939544125035, 0.16433429851850268, 0.20842469407016762, 0.20376748218246887, 0.1830568662841463, 0.18714197816037104, 0.18534510948682426, 0.20206754668409033, 0.184903926747361, 0.17763988418342014, 0.18923074738169265, 0.19173453862244738, 0.18889295019318675, 0.07929852808174676, 0.08520227820452109, 0.08239062509294459, 0.08758241093881602, 0.07637705080278523, 0.0853394160128561, 0.09327844562796705, 0.07336447272886404, 0.07660269930659092]}, "mutation_prompt": null}
{"id": "70ec3d13-9620-4b7c-be9c-d4fbd9ea6210", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 6 * self.dim  # Further reduced population size for faster execution\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.F = 0.6  # Adjusted mutation factor for initial diversity\n        self.CR = 0.9  # Higher crossover rate for increased recombination\n        self.evaluations = 0\n        self.archive = []\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n\n                # Check archive for potential new base vector\n                if len(self.archive) > 0 and np.random.rand() < 0.1:\n                    base_vector = self.archive[np.random.randint(len(self.archive))]\n                else:\n                    base_vector = self.population[a]\n\n                # Mutation with potential archive vector\n                mutant = base_vector + self.F * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, *self.bounds)\n                \n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    # Archive successful mutants\n                    self.archive.append(trial)\n\n                # Dynamic adjustment based on fitness improvement\n                if trial_fitness < self.fitness.mean():\n                    self.F = np.clip(self.F + 0.01 * (0.5 - np.random.rand()), 0.1, 0.9)\n                    self.CR = np.clip(self.CR + 0.01 * (0.5 - np.random.rand()), 0.5, 1.0)\n\n        return self.population[np.argmin(self.fitness)]\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1", "name": "EnhancedMetaheuristicOptimizer", "description": "This algorithm enhances Differential Evolution by incorporating a dynamic archiving mechanism and adaptive scaling, focusing on reducing redundant evaluations and improving convergence speed.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e2479e79-b69d-45fa-b91b-0b20431aaa1a", "metadata": {"aucs": [0.8460838787318541, 0.8662210773214738, 0.8164573346626365, 0.8474260970208942, 0.8564395667445609, 0.8345479318139788, 0.8540491208796602, 0.8317501307836201, 0.8398020747513537, 0.6862735300194087, 0.7312545135338542, 0.7337114467926564, 0.7393741637085585, 0.7233185285708336, 0.6567521728063315, 0.7418944441517743, 0.7133538515172579, 0.7489585245586282, 0.21512818503010733, 0.13583250914468514, 0.12183102787103783, 0.10404529497511705, 0.12155147909505926, 0.11161737498757207, 0.13566255680944728, 0.13309452614576944, 0.14253313168169335, 0.10277272302788698, 0.11056387527357237, 0.1397652820307307, 0.12202565881943339, 0.13084970314919397, 0.1147862561070846, 0.1107156460462495, 0.09995298490831994, 0.10050844281822302, 0.9308272990481794, 0.9504949701555323, 0.9811165720089283, 0.8895067268384018, 0.9408710023392403, 0.9432442402822587, 0.9560733825932358, 0.9605358821067621, 0.9335584020145802, 0.5122660725578172, 0.5958772319256793, 0.5322793929517171, 0.5916223442813854, 0.5962377974045365, 0.678995085032133, 0.4755485481163809, 0.611284500745387, 0.6076148974411232, 0.8472652261287323, 0.8327665107298321, 0.805940854875559, 0.8202599398726511, 0.8380067227205756, 0.7967428263023542, 0.7747845915458351, 0.724097987386366, 0.8400537185005408, 0.40217369740982223, 0.18484126740458728, 0.36324051532467916, 0.37263017825860756, 0.20392326655030668, 0.41237192075948637, 0.3877440003099134, 0.2856761126710259, 0.3532608298652462, 0.3513102896224257, 0.21481712428264177, 0.2222788220777453, 0.29745499244108997, 0.1793286168051631, 0.22107342973119593, 0.2203450980563506, 0.32266939191309374, 0.43019538881702224, 0.3911602034296203, 0.5774387066263849, 0.48372916708951874, 0.2695686529190173, 0.33243437736866177, 0.40965558842833816, 0.6195002512470358, 0.3893141339666034, 0.3432472999933732, 0.5981410308120142, 0.5898843981655413, 0.7716245008655335, 0.5675668800912007, 0.33000017539178916, 0.6492708360853281, 0.5550601286062737, 0.7212557454319156, 0.6263478190421081, 0.1119579449124063, 0.23667253698061974, 0.2531368640355437, 0.3970862646124953, 0.1677008461223135, 0.13531017600578343, 0.2482487719050257, 0.14463749950973293, 0.12877118481664707, 0.36600715857411137, 0.3882310737730873, 0.29618786249399975, 0.45837274139040207, 0.5503106267937234, 0.3740273380776381, 0.3592493850333405, 0.2952051198575746, 0.37013075102967874, 0.750211501266788, 0.6666848209869163, 0.8116452718924732, 0.6430141624805874, 0.6515772159861947, 0.6732183674250557, 0.7595936637040608, 0.7542405270345075, 0.7362578781754887, 0.10952760241339854, 0.09747974746612997, 0.09881545004929926, 0.1050489895048855, 0.10220713828883776, 0.09193357941703961, 0.0978309479750844, 0.10876801218323995, 0.08878289143401286, 0.1514075341051615, 0.1327516452974833, 0.17921491165456171, 0.14894524904132433, 0.19931045960284177, 0.18922205595252428, 0.13680241626212442, 0.1803489665926591, 0.1462694853480363, 0.5042799239185823, 0.5566296502946564, 0.4306507622010627, 0.43610913378045735, 0.43789129616785827, 0.39826610120660055, 0.47585532965363087, 0.4564648588947926, 0.42518175752329834, 0.32166276967296914, 0.3514889373439898, 0.40557211227448786, 0.2849455300096645, 0.41406695063959165, 0.42012776184416367, 0.4123723247874548, 0.3978376085516072, 0.3542714761047776, 0.19650293233862182, 0.21438895488834142, 0.19605126648810656, 0.1945187066916556, 0.18776672033534592, 0.19023493490633725, 0.1865622335841266, 0.18682236690566367, 0.19951383700140324, 0.20665804903689056, 0.2775759957453616, 0.4478153759030584, 0.2164917410508882, 0.17873148994872046, 0.3428392679693817, 0.18711120661575587, 0.22613832652150356, 0.2631587376403516, 0.2083562319990443, 0.18259649389037402, 0.193431091961622, 0.829689805202301, 0.6978220523817482, 0.19641151775048604, 0.18580525236827816, 0.18014237990605797, 0.6759299998859297, 0.8063676359307129, 0.20185428942065176, 0.2068840166925202, 0.2064155591553115, 0.19895542901668328, 0.5987939544125035, 0.16433429851850268, 0.20842469407016762, 0.20376748218246887, 0.1830568662841463, 0.18714197816037104, 0.18534510948682426, 0.20206754668409033, 0.184903926747361, 0.17763988418342014, 0.18923074738169265, 0.19173453862244738, 0.18889295019318675, 0.07929852808174676, 0.08520227820452109, 0.08239062509294459, 0.08758241093881602, 0.07637705080278523, 0.0853394160128561, 0.09327844562796705, 0.07336447272886404, 0.07660269930659092]}, "mutation_prompt": null}
{"id": "28391a34-9afe-42e9-92a2-8de57aa75378", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 6 * self.dim  # Further reduced population size for faster execution\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.F = 0.6  # Adjusted mutation factor for initial diversity\n        self.CR = 0.9  # Higher crossover rate for increased recombination\n        self.evaluations = 0\n        self.archive = []\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n\n                # Check archive for potential new base vector\n                if len(self.archive) > 0 and np.random.rand() < 0.1:\n                    base_vector = self.archive[np.random.randint(len(self.archive))]\n                else:\n                    base_vector = self.population[a]\n\n                # Mutation with potential archive vector\n                mutant = base_vector + self.F * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, *self.bounds)\n                \n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    # Archive successful mutants\n                    self.archive.append(trial)\n\n                # Dynamic adjustment based on fitness improvement\n                if trial_fitness < self.fitness.mean():\n                    self.F = np.clip(self.F + 0.01 * (0.5 - np.random.rand()), 0.1, 0.9)\n                    self.CR = np.clip(self.CR + 0.01 * (0.5 - np.random.rand()), 0.5, 1.0)\n\n        return self.population[np.argmin(self.fitness)]\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1", "name": "EnhancedMetaheuristicOptimizer", "description": "This algorithm enhances Differential Evolution by incorporating a dynamic archiving mechanism and adaptive scaling, focusing on reducing redundant evaluations and improving convergence speed.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e2479e79-b69d-45fa-b91b-0b20431aaa1a", "metadata": {"aucs": [0.8460838787318541, 0.8662210773214738, 0.8164573346626365, 0.8474260970208942, 0.8564395667445609, 0.8345479318139788, 0.8540491208796602, 0.8317501307836201, 0.8398020747513537, 0.6862735300194087, 0.7312545135338542, 0.7337114467926564, 0.7393741637085585, 0.7233185285708336, 0.6567521728063315, 0.7418944441517743, 0.7133538515172579, 0.7489585245586282, 0.21512818503010733, 0.13583250914468514, 0.12183102787103783, 0.10404529497511705, 0.12155147909505926, 0.11161737498757207, 0.13566255680944728, 0.13309452614576944, 0.14253313168169335, 0.10277272302788698, 0.11056387527357237, 0.1397652820307307, 0.12202565881943339, 0.13084970314919397, 0.1147862561070846, 0.1107156460462495, 0.09995298490831994, 0.10050844281822302, 0.9308272990481794, 0.9504949701555323, 0.9811165720089283, 0.8895067268384018, 0.9408710023392403, 0.9432442402822587, 0.9560733825932358, 0.9605358821067621, 0.9335584020145802, 0.5122660725578172, 0.5958772319256793, 0.5322793929517171, 0.5916223442813854, 0.5962377974045365, 0.678995085032133, 0.4755485481163809, 0.611284500745387, 0.6076148974411232, 0.8472652261287323, 0.8327665107298321, 0.805940854875559, 0.8202599398726511, 0.8380067227205756, 0.7967428263023542, 0.7747845915458351, 0.724097987386366, 0.8400537185005408, 0.40217369740982223, 0.18484126740458728, 0.36324051532467916, 0.37263017825860756, 0.20392326655030668, 0.41237192075948637, 0.3877440003099134, 0.2856761126710259, 0.3532608298652462, 0.3513102896224257, 0.21481712428264177, 0.2222788220777453, 0.29745499244108997, 0.1793286168051631, 0.22107342973119593, 0.2203450980563506, 0.32266939191309374, 0.43019538881702224, 0.3911602034296203, 0.5774387066263849, 0.48372916708951874, 0.2695686529190173, 0.33243437736866177, 0.40965558842833816, 0.6195002512470358, 0.3893141339666034, 0.3432472999933732, 0.5981410308120142, 0.5898843981655413, 0.7716245008655335, 0.5675668800912007, 0.33000017539178916, 0.6492708360853281, 0.5550601286062737, 0.7212557454319156, 0.6263478190421081, 0.1119579449124063, 0.23667253698061974, 0.2531368640355437, 0.3970862646124953, 0.1677008461223135, 0.13531017600578343, 0.2482487719050257, 0.14463749950973293, 0.12877118481664707, 0.36600715857411137, 0.3882310737730873, 0.29618786249399975, 0.45837274139040207, 0.5503106267937234, 0.3740273380776381, 0.3592493850333405, 0.2952051198575746, 0.37013075102967874, 0.750211501266788, 0.6666848209869163, 0.8116452718924732, 0.6430141624805874, 0.6515772159861947, 0.6732183674250557, 0.7595936637040608, 0.7542405270345075, 0.7362578781754887, 0.10952760241339854, 0.09747974746612997, 0.09881545004929926, 0.1050489895048855, 0.10220713828883776, 0.09193357941703961, 0.0978309479750844, 0.10876801218323995, 0.08878289143401286, 0.1514075341051615, 0.1327516452974833, 0.17921491165456171, 0.14894524904132433, 0.19931045960284177, 0.18922205595252428, 0.13680241626212442, 0.1803489665926591, 0.1462694853480363, 0.5042799239185823, 0.5566296502946564, 0.4306507622010627, 0.43610913378045735, 0.43789129616785827, 0.39826610120660055, 0.47585532965363087, 0.4564648588947926, 0.42518175752329834, 0.32166276967296914, 0.3514889373439898, 0.40557211227448786, 0.2849455300096645, 0.41406695063959165, 0.42012776184416367, 0.4123723247874548, 0.3978376085516072, 0.3542714761047776, 0.19650293233862182, 0.21438895488834142, 0.19605126648810656, 0.1945187066916556, 0.18776672033534592, 0.19023493490633725, 0.1865622335841266, 0.18682236690566367, 0.19951383700140324, 0.20665804903689056, 0.2775759957453616, 0.4478153759030584, 0.2164917410508882, 0.17873148994872046, 0.3428392679693817, 0.18711120661575587, 0.22613832652150356, 0.2631587376403516, 0.2083562319990443, 0.18259649389037402, 0.193431091961622, 0.829689805202301, 0.6978220523817482, 0.19641151775048604, 0.18580525236827816, 0.18014237990605797, 0.6759299998859297, 0.8063676359307129, 0.20185428942065176, 0.2068840166925202, 0.2064155591553115, 0.19895542901668328, 0.5987939544125035, 0.16433429851850268, 0.20842469407016762, 0.20376748218246887, 0.1830568662841463, 0.18714197816037104, 0.18534510948682426, 0.20206754668409033, 0.184903926747361, 0.17763988418342014, 0.18923074738169265, 0.19173453862244738, 0.18889295019318675, 0.07929852808174676, 0.08520227820452109, 0.08239062509294459, 0.08758241093881602, 0.07637705080278523, 0.0853394160128561, 0.09327844562796705, 0.07336447272886404, 0.07660269930659092]}, "mutation_prompt": null}
{"id": "f5e1ae8b-470e-4ae9-98f2-2f9681a17bfb", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 6 * self.dim  # Further reduced population size for faster execution\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.F = 0.6  # Adjusted mutation factor for initial diversity\n        self.CR = 0.9  # Higher crossover rate for increased recombination\n        self.evaluations = 0\n        self.archive = []\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n\n                # Check archive for potential new base vector\n                if len(self.archive) > 0 and np.random.rand() < 0.1:\n                    base_vector = self.archive[np.random.randint(len(self.archive))]\n                else:\n                    base_vector = self.population[a]\n\n                # Mutation with potential archive vector\n                mutant = base_vector + self.F * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, *self.bounds)\n                \n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    # Archive successful mutants\n                    self.archive.append(trial)\n\n                # Dynamic adjustment based on fitness improvement\n                if trial_fitness < self.fitness.mean():\n                    self.F = np.clip(self.F + 0.01 * (0.5 - np.random.rand()), 0.1, 0.9)\n                    self.CR = np.clip(self.CR + 0.01 * (0.5 - np.random.rand()), 0.5, 1.0)\n\n        return self.population[np.argmin(self.fitness)]\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1", "name": "EnhancedMetaheuristicOptimizer", "description": "This algorithm enhances Differential Evolution by incorporating a dynamic archiving mechanism and adaptive scaling, focusing on reducing redundant evaluations and improving convergence speed.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e2479e79-b69d-45fa-b91b-0b20431aaa1a", "metadata": {"aucs": [0.8460838787318541, 0.8662210773214738, 0.8164573346626365, 0.8474260970208942, 0.8564395667445609, 0.8345479318139788, 0.8540491208796602, 0.8317501307836201, 0.8398020747513537, 0.6862735300194087, 0.7312545135338542, 0.7337114467926564, 0.7393741637085585, 0.7233185285708336, 0.6567521728063315, 0.7418944441517743, 0.7133538515172579, 0.7489585245586282, 0.21512818503010733, 0.13583250914468514, 0.12183102787103783, 0.10404529497511705, 0.12155147909505926, 0.11161737498757207, 0.13566255680944728, 0.13309452614576944, 0.14253313168169335, 0.10277272302788698, 0.11056387527357237, 0.1397652820307307, 0.12202565881943339, 0.13084970314919397, 0.1147862561070846, 0.1107156460462495, 0.09995298490831994, 0.10050844281822302, 0.9308272990481794, 0.9504949701555323, 0.9811165720089283, 0.8895067268384018, 0.9408710023392403, 0.9432442402822587, 0.9560733825932358, 0.9605358821067621, 0.9335584020145802, 0.5122660725578172, 0.5958772319256793, 0.5322793929517171, 0.5916223442813854, 0.5962377974045365, 0.678995085032133, 0.4755485481163809, 0.611284500745387, 0.6076148974411232, 0.8472652261287323, 0.8327665107298321, 0.805940854875559, 0.8202599398726511, 0.8380067227205756, 0.7967428263023542, 0.7747845915458351, 0.724097987386366, 0.8400537185005408, 0.40217369740982223, 0.18484126740458728, 0.36324051532467916, 0.37263017825860756, 0.20392326655030668, 0.41237192075948637, 0.3877440003099134, 0.2856761126710259, 0.3532608298652462, 0.3513102896224257, 0.21481712428264177, 0.2222788220777453, 0.29745499244108997, 0.1793286168051631, 0.22107342973119593, 0.2203450980563506, 0.32266939191309374, 0.43019538881702224, 0.3911602034296203, 0.5774387066263849, 0.48372916708951874, 0.2695686529190173, 0.33243437736866177, 0.40965558842833816, 0.6195002512470358, 0.3893141339666034, 0.3432472999933732, 0.5981410308120142, 0.5898843981655413, 0.7716245008655335, 0.5675668800912007, 0.33000017539178916, 0.6492708360853281, 0.5550601286062737, 0.7212557454319156, 0.6263478190421081, 0.1119579449124063, 0.23667253698061974, 0.2531368640355437, 0.3970862646124953, 0.1677008461223135, 0.13531017600578343, 0.2482487719050257, 0.14463749950973293, 0.12877118481664707, 0.36600715857411137, 0.3882310737730873, 0.29618786249399975, 0.45837274139040207, 0.5503106267937234, 0.3740273380776381, 0.3592493850333405, 0.2952051198575746, 0.37013075102967874, 0.750211501266788, 0.6666848209869163, 0.8116452718924732, 0.6430141624805874, 0.6515772159861947, 0.6732183674250557, 0.7595936637040608, 0.7542405270345075, 0.7362578781754887, 0.10952760241339854, 0.09747974746612997, 0.09881545004929926, 0.1050489895048855, 0.10220713828883776, 0.09193357941703961, 0.0978309479750844, 0.10876801218323995, 0.08878289143401286, 0.1514075341051615, 0.1327516452974833, 0.17921491165456171, 0.14894524904132433, 0.19931045960284177, 0.18922205595252428, 0.13680241626212442, 0.1803489665926591, 0.1462694853480363, 0.5042799239185823, 0.5566296502946564, 0.4306507622010627, 0.43610913378045735, 0.43789129616785827, 0.39826610120660055, 0.47585532965363087, 0.4564648588947926, 0.42518175752329834, 0.32166276967296914, 0.3514889373439898, 0.40557211227448786, 0.2849455300096645, 0.41406695063959165, 0.42012776184416367, 0.4123723247874548, 0.3978376085516072, 0.3542714761047776, 0.19650293233862182, 0.21438895488834142, 0.19605126648810656, 0.1945187066916556, 0.18776672033534592, 0.19023493490633725, 0.1865622335841266, 0.18682236690566367, 0.19951383700140324, 0.20665804903689056, 0.2775759957453616, 0.4478153759030584, 0.2164917410508882, 0.17873148994872046, 0.3428392679693817, 0.18711120661575587, 0.22613832652150356, 0.2631587376403516, 0.2083562319990443, 0.18259649389037402, 0.193431091961622, 0.829689805202301, 0.6978220523817482, 0.19641151775048604, 0.18580525236827816, 0.18014237990605797, 0.6759299998859297, 0.8063676359307129, 0.20185428942065176, 0.2068840166925202, 0.2064155591553115, 0.19895542901668328, 0.5987939544125035, 0.16433429851850268, 0.20842469407016762, 0.20376748218246887, 0.1830568662841463, 0.18714197816037104, 0.18534510948682426, 0.20206754668409033, 0.184903926747361, 0.17763988418342014, 0.18923074738169265, 0.19173453862244738, 0.18889295019318675, 0.07929852808174676, 0.08520227820452109, 0.08239062509294459, 0.08758241093881602, 0.07637705080278523, 0.0853394160128561, 0.09327844562796705, 0.07336447272886404, 0.07660269930659092]}, "mutation_prompt": null}
{"id": "a64e88e3-b938-4c20-ab9b-ca688c2e211e", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 6 * self.dim  # Further reduced population size for faster execution\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.F = 0.6  # Adjusted mutation factor for initial diversity\n        self.CR = 0.9  # Higher crossover rate for increased recombination\n        self.evaluations = 0\n        self.archive = []\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n\n                # Check archive for potential new base vector\n                if len(self.archive) > 0 and np.random.rand() < 0.1:\n                    base_vector = self.archive[np.random.randint(len(self.archive))]\n                else:\n                    base_vector = self.population[a]\n\n                # Mutation with potential archive vector\n                mutant = base_vector + self.F * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, *self.bounds)\n                \n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    # Archive successful mutants\n                    self.archive.append(trial)\n\n                # Dynamic adjustment based on fitness improvement\n                if trial_fitness < self.fitness.mean():\n                    self.F = np.clip(self.F + 0.01 * (0.5 - np.random.rand()), 0.1, 0.9)\n                    self.CR = np.clip(self.CR + 0.01 * (0.5 - np.random.rand()), 0.5, 1.0)\n\n        return self.population[np.argmin(self.fitness)]\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1", "name": "EnhancedMetaheuristicOptimizer", "description": "This algorithm enhances Differential Evolution by incorporating a dynamic archiving mechanism and adaptive scaling, focusing on reducing redundant evaluations and improving convergence speed.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e2479e79-b69d-45fa-b91b-0b20431aaa1a", "metadata": {"aucs": [0.8460838787318541, 0.8662210773214738, 0.8164573346626365, 0.8474260970208942, 0.8564395667445609, 0.8345479318139788, 0.8540491208796602, 0.8317501307836201, 0.8398020747513537, 0.6862735300194087, 0.7312545135338542, 0.7337114467926564, 0.7393741637085585, 0.7233185285708336, 0.6567521728063315, 0.7418944441517743, 0.7133538515172579, 0.7489585245586282, 0.21512818503010733, 0.13583250914468514, 0.12183102787103783, 0.10404529497511705, 0.12155147909505926, 0.11161737498757207, 0.13566255680944728, 0.13309452614576944, 0.14253313168169335, 0.10277272302788698, 0.11056387527357237, 0.1397652820307307, 0.12202565881943339, 0.13084970314919397, 0.1147862561070846, 0.1107156460462495, 0.09995298490831994, 0.10050844281822302, 0.9308272990481794, 0.9504949701555323, 0.9811165720089283, 0.8895067268384018, 0.9408710023392403, 0.9432442402822587, 0.9560733825932358, 0.9605358821067621, 0.9335584020145802, 0.5122660725578172, 0.5958772319256793, 0.5322793929517171, 0.5916223442813854, 0.5962377974045365, 0.678995085032133, 0.4755485481163809, 0.611284500745387, 0.6076148974411232, 0.8472652261287323, 0.8327665107298321, 0.805940854875559, 0.8202599398726511, 0.8380067227205756, 0.7967428263023542, 0.7747845915458351, 0.724097987386366, 0.8400537185005408, 0.40217369740982223, 0.18484126740458728, 0.36324051532467916, 0.37263017825860756, 0.20392326655030668, 0.41237192075948637, 0.3877440003099134, 0.2856761126710259, 0.3532608298652462, 0.3513102896224257, 0.21481712428264177, 0.2222788220777453, 0.29745499244108997, 0.1793286168051631, 0.22107342973119593, 0.2203450980563506, 0.32266939191309374, 0.43019538881702224, 0.3911602034296203, 0.5774387066263849, 0.48372916708951874, 0.2695686529190173, 0.33243437736866177, 0.40965558842833816, 0.6195002512470358, 0.3893141339666034, 0.3432472999933732, 0.5981410308120142, 0.5898843981655413, 0.7716245008655335, 0.5675668800912007, 0.33000017539178916, 0.6492708360853281, 0.5550601286062737, 0.7212557454319156, 0.6263478190421081, 0.1119579449124063, 0.23667253698061974, 0.2531368640355437, 0.3970862646124953, 0.1677008461223135, 0.13531017600578343, 0.2482487719050257, 0.14463749950973293, 0.12877118481664707, 0.36600715857411137, 0.3882310737730873, 0.29618786249399975, 0.45837274139040207, 0.5503106267937234, 0.3740273380776381, 0.3592493850333405, 0.2952051198575746, 0.37013075102967874, 0.750211501266788, 0.6666848209869163, 0.8116452718924732, 0.6430141624805874, 0.6515772159861947, 0.6732183674250557, 0.7595936637040608, 0.7542405270345075, 0.7362578781754887, 0.10952760241339854, 0.09747974746612997, 0.09881545004929926, 0.1050489895048855, 0.10220713828883776, 0.09193357941703961, 0.0978309479750844, 0.10876801218323995, 0.08878289143401286, 0.1514075341051615, 0.1327516452974833, 0.17921491165456171, 0.14894524904132433, 0.19931045960284177, 0.18922205595252428, 0.13680241626212442, 0.1803489665926591, 0.1462694853480363, 0.5042799239185823, 0.5566296502946564, 0.4306507622010627, 0.43610913378045735, 0.43789129616785827, 0.39826610120660055, 0.47585532965363087, 0.4564648588947926, 0.42518175752329834, 0.32166276967296914, 0.3514889373439898, 0.40557211227448786, 0.2849455300096645, 0.41406695063959165, 0.42012776184416367, 0.4123723247874548, 0.3978376085516072, 0.3542714761047776, 0.19650293233862182, 0.21438895488834142, 0.19605126648810656, 0.1945187066916556, 0.18776672033534592, 0.19023493490633725, 0.1865622335841266, 0.18682236690566367, 0.19951383700140324, 0.20665804903689056, 0.2775759957453616, 0.4478153759030584, 0.2164917410508882, 0.17873148994872046, 0.3428392679693817, 0.18711120661575587, 0.22613832652150356, 0.2631587376403516, 0.2083562319990443, 0.18259649389037402, 0.193431091961622, 0.829689805202301, 0.6978220523817482, 0.19641151775048604, 0.18580525236827816, 0.18014237990605797, 0.6759299998859297, 0.8063676359307129, 0.20185428942065176, 0.2068840166925202, 0.2064155591553115, 0.19895542901668328, 0.5987939544125035, 0.16433429851850268, 0.20842469407016762, 0.20376748218246887, 0.1830568662841463, 0.18714197816037104, 0.18534510948682426, 0.20206754668409033, 0.184903926747361, 0.17763988418342014, 0.18923074738169265, 0.19173453862244738, 0.18889295019318675, 0.07929852808174676, 0.08520227820452109, 0.08239062509294459, 0.08758241093881602, 0.07637705080278523, 0.0853394160128561, 0.09327844562796705, 0.07336447272886404, 0.07660269930659092]}, "mutation_prompt": null}
{"id": "4fc4310a-4acf-42cb-8e1c-81cad8af75e6", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 6 * self.dim  # Further reduced population size for faster execution\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.F = 0.6  # Adjusted mutation factor for initial diversity\n        self.CR = 0.9  # Higher crossover rate for increased recombination\n        self.evaluations = 0\n        self.archive = []\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n\n                # Check archive for potential new base vector\n                if len(self.archive) > 0 and np.random.rand() < 0.1:\n                    base_vector = self.archive[np.random.randint(len(self.archive))]\n                else:\n                    base_vector = self.population[a]\n\n                # Mutation with potential archive vector\n                mutant = base_vector + self.F * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, *self.bounds)\n                \n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    # Archive successful mutants\n                    self.archive.append(trial)\n\n                # Dynamic adjustment based on fitness improvement\n                if trial_fitness < self.fitness.mean():\n                    self.F = np.clip(self.F + 0.01 * (0.5 - np.random.rand()), 0.1, 0.9)\n                    self.CR = np.clip(self.CR + 0.01 * (0.5 - np.random.rand()), 0.5, 1.0)\n\n        return self.population[np.argmin(self.fitness)]\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1", "name": "EnhancedMetaheuristicOptimizer", "description": "This algorithm enhances Differential Evolution by incorporating a dynamic archiving mechanism and adaptive scaling, focusing on reducing redundant evaluations and improving convergence speed.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e2479e79-b69d-45fa-b91b-0b20431aaa1a", "metadata": {"aucs": [0.8460838787318541, 0.8662210773214738, 0.8164573346626365, 0.8474260970208942, 0.8564395667445609, 0.8345479318139788, 0.8540491208796602, 0.8317501307836201, 0.8398020747513537, 0.6862735300194087, 0.7312545135338542, 0.7337114467926564, 0.7393741637085585, 0.7233185285708336, 0.6567521728063315, 0.7418944441517743, 0.7133538515172579, 0.7489585245586282, 0.21512818503010733, 0.13583250914468514, 0.12183102787103783, 0.10404529497511705, 0.12155147909505926, 0.11161737498757207, 0.13566255680944728, 0.13309452614576944, 0.14253313168169335, 0.10277272302788698, 0.11056387527357237, 0.1397652820307307, 0.12202565881943339, 0.13084970314919397, 0.1147862561070846, 0.1107156460462495, 0.09995298490831994, 0.10050844281822302, 0.9308272990481794, 0.9504949701555323, 0.9811165720089283, 0.8895067268384018, 0.9408710023392403, 0.9432442402822587, 0.9560733825932358, 0.9605358821067621, 0.9335584020145802, 0.5122660725578172, 0.5958772319256793, 0.5322793929517171, 0.5916223442813854, 0.5962377974045365, 0.678995085032133, 0.4755485481163809, 0.611284500745387, 0.6076148974411232, 0.8472652261287323, 0.8327665107298321, 0.805940854875559, 0.8202599398726511, 0.8380067227205756, 0.7967428263023542, 0.7747845915458351, 0.724097987386366, 0.8400537185005408, 0.40217369740982223, 0.18484126740458728, 0.36324051532467916, 0.37263017825860756, 0.20392326655030668, 0.41237192075948637, 0.3877440003099134, 0.2856761126710259, 0.3532608298652462, 0.3513102896224257, 0.21481712428264177, 0.2222788220777453, 0.29745499244108997, 0.1793286168051631, 0.22107342973119593, 0.2203450980563506, 0.32266939191309374, 0.43019538881702224, 0.3911602034296203, 0.5774387066263849, 0.48372916708951874, 0.2695686529190173, 0.33243437736866177, 0.40965558842833816, 0.6195002512470358, 0.3893141339666034, 0.3432472999933732, 0.5981410308120142, 0.5898843981655413, 0.7716245008655335, 0.5675668800912007, 0.33000017539178916, 0.6492708360853281, 0.5550601286062737, 0.7212557454319156, 0.6263478190421081, 0.1119579449124063, 0.23667253698061974, 0.2531368640355437, 0.3970862646124953, 0.1677008461223135, 0.13531017600578343, 0.2482487719050257, 0.14463749950973293, 0.12877118481664707, 0.36600715857411137, 0.3882310737730873, 0.29618786249399975, 0.45837274139040207, 0.5503106267937234, 0.3740273380776381, 0.3592493850333405, 0.2952051198575746, 0.37013075102967874, 0.750211501266788, 0.6666848209869163, 0.8116452718924732, 0.6430141624805874, 0.6515772159861947, 0.6732183674250557, 0.7595936637040608, 0.7542405270345075, 0.7362578781754887, 0.10952760241339854, 0.09747974746612997, 0.09881545004929926, 0.1050489895048855, 0.10220713828883776, 0.09193357941703961, 0.0978309479750844, 0.10876801218323995, 0.08878289143401286, 0.1514075341051615, 0.1327516452974833, 0.17921491165456171, 0.14894524904132433, 0.19931045960284177, 0.18922205595252428, 0.13680241626212442, 0.1803489665926591, 0.1462694853480363, 0.5042799239185823, 0.5566296502946564, 0.4306507622010627, 0.43610913378045735, 0.43789129616785827, 0.39826610120660055, 0.47585532965363087, 0.4564648588947926, 0.42518175752329834, 0.32166276967296914, 0.3514889373439898, 0.40557211227448786, 0.2849455300096645, 0.41406695063959165, 0.42012776184416367, 0.4123723247874548, 0.3978376085516072, 0.3542714761047776, 0.19650293233862182, 0.21438895488834142, 0.19605126648810656, 0.1945187066916556, 0.18776672033534592, 0.19023493490633725, 0.1865622335841266, 0.18682236690566367, 0.19951383700140324, 0.20665804903689056, 0.2775759957453616, 0.4478153759030584, 0.2164917410508882, 0.17873148994872046, 0.3428392679693817, 0.18711120661575587, 0.22613832652150356, 0.2631587376403516, 0.2083562319990443, 0.18259649389037402, 0.193431091961622, 0.829689805202301, 0.6978220523817482, 0.19641151775048604, 0.18580525236827816, 0.18014237990605797, 0.6759299998859297, 0.8063676359307129, 0.20185428942065176, 0.2068840166925202, 0.2064155591553115, 0.19895542901668328, 0.5987939544125035, 0.16433429851850268, 0.20842469407016762, 0.20376748218246887, 0.1830568662841463, 0.18714197816037104, 0.18534510948682426, 0.20206754668409033, 0.184903926747361, 0.17763988418342014, 0.18923074738169265, 0.19173453862244738, 0.18889295019318675, 0.07929852808174676, 0.08520227820452109, 0.08239062509294459, 0.08758241093881602, 0.07637705080278523, 0.0853394160128561, 0.09327844562796705, 0.07336447272886404, 0.07660269930659092]}, "mutation_prompt": null}
{"id": "ce0f1a6a-712f-46ee-bf0b-837091c94cd3", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 6 * self.dim  # Further reduced population size for faster execution\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.F = 0.6  # Adjusted mutation factor for initial diversity\n        self.CR = 0.9  # Higher crossover rate for increased recombination\n        self.evaluations = 0\n        self.archive = []\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n\n                # Check archive for potential new base vector\n                if len(self.archive) > 0 and np.random.rand() < 0.1:\n                    base_vector = self.archive[np.random.randint(len(self.archive))]\n                else:\n                    base_vector = self.population[a]\n\n                # Mutation with potential archive vector\n                mutant = base_vector + self.F * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, *self.bounds)\n                \n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    # Archive successful mutants\n                    self.archive.append(trial)\n\n                # Dynamic adjustment based on fitness improvement\n                if trial_fitness < self.fitness.mean():\n                    self.F = np.clip(self.F + 0.01 * (0.5 - np.random.rand()), 0.1, 0.9)\n                    self.CR = np.clip(self.CR + 0.01 * (0.5 - np.random.rand()), 0.5, 1.0)\n\n        return self.population[np.argmin(self.fitness)]\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1", "name": "EnhancedMetaheuristicOptimizer", "description": "This algorithm enhances Differential Evolution by incorporating a dynamic archiving mechanism and adaptive scaling, focusing on reducing redundant evaluations and improving convergence speed.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e2479e79-b69d-45fa-b91b-0b20431aaa1a", "metadata": {"aucs": [0.8460838787318541, 0.8662210773214738, 0.8164573346626365, 0.8474260970208942, 0.8564395667445609, 0.8345479318139788, 0.8540491208796602, 0.8317501307836201, 0.8398020747513537, 0.6862735300194087, 0.7312545135338542, 0.7337114467926564, 0.7393741637085585, 0.7233185285708336, 0.6567521728063315, 0.7418944441517743, 0.7133538515172579, 0.7489585245586282, 0.21512818503010733, 0.13583250914468514, 0.12183102787103783, 0.10404529497511705, 0.12155147909505926, 0.11161737498757207, 0.13566255680944728, 0.13309452614576944, 0.14253313168169335, 0.10277272302788698, 0.11056387527357237, 0.1397652820307307, 0.12202565881943339, 0.13084970314919397, 0.1147862561070846, 0.1107156460462495, 0.09995298490831994, 0.10050844281822302, 0.9308272990481794, 0.9504949701555323, 0.9811165720089283, 0.8895067268384018, 0.9408710023392403, 0.9432442402822587, 0.9560733825932358, 0.9605358821067621, 0.9335584020145802, 0.5122660725578172, 0.5958772319256793, 0.5322793929517171, 0.5916223442813854, 0.5962377974045365, 0.678995085032133, 0.4755485481163809, 0.611284500745387, 0.6076148974411232, 0.8472652261287323, 0.8327665107298321, 0.805940854875559, 0.8202599398726511, 0.8380067227205756, 0.7967428263023542, 0.7747845915458351, 0.724097987386366, 0.8400537185005408, 0.40217369740982223, 0.18484126740458728, 0.36324051532467916, 0.37263017825860756, 0.20392326655030668, 0.41237192075948637, 0.3877440003099134, 0.2856761126710259, 0.3532608298652462, 0.3513102896224257, 0.21481712428264177, 0.2222788220777453, 0.29745499244108997, 0.1793286168051631, 0.22107342973119593, 0.2203450980563506, 0.32266939191309374, 0.43019538881702224, 0.3911602034296203, 0.5774387066263849, 0.48372916708951874, 0.2695686529190173, 0.33243437736866177, 0.40965558842833816, 0.6195002512470358, 0.3893141339666034, 0.3432472999933732, 0.5981410308120142, 0.5898843981655413, 0.7716245008655335, 0.5675668800912007, 0.33000017539178916, 0.6492708360853281, 0.5550601286062737, 0.7212557454319156, 0.6263478190421081, 0.1119579449124063, 0.23667253698061974, 0.2531368640355437, 0.3970862646124953, 0.1677008461223135, 0.13531017600578343, 0.2482487719050257, 0.14463749950973293, 0.12877118481664707, 0.36600715857411137, 0.3882310737730873, 0.29618786249399975, 0.45837274139040207, 0.5503106267937234, 0.3740273380776381, 0.3592493850333405, 0.2952051198575746, 0.37013075102967874, 0.750211501266788, 0.6666848209869163, 0.8116452718924732, 0.6430141624805874, 0.6515772159861947, 0.6732183674250557, 0.7595936637040608, 0.7542405270345075, 0.7362578781754887, 0.10952760241339854, 0.09747974746612997, 0.09881545004929926, 0.1050489895048855, 0.10220713828883776, 0.09193357941703961, 0.0978309479750844, 0.10876801218323995, 0.08878289143401286, 0.1514075341051615, 0.1327516452974833, 0.17921491165456171, 0.14894524904132433, 0.19931045960284177, 0.18922205595252428, 0.13680241626212442, 0.1803489665926591, 0.1462694853480363, 0.5042799239185823, 0.5566296502946564, 0.4306507622010627, 0.43610913378045735, 0.43789129616785827, 0.39826610120660055, 0.47585532965363087, 0.4564648588947926, 0.42518175752329834, 0.32166276967296914, 0.3514889373439898, 0.40557211227448786, 0.2849455300096645, 0.41406695063959165, 0.42012776184416367, 0.4123723247874548, 0.3978376085516072, 0.3542714761047776, 0.19650293233862182, 0.21438895488834142, 0.19605126648810656, 0.1945187066916556, 0.18776672033534592, 0.19023493490633725, 0.1865622335841266, 0.18682236690566367, 0.19951383700140324, 0.20665804903689056, 0.2775759957453616, 0.4478153759030584, 0.2164917410508882, 0.17873148994872046, 0.3428392679693817, 0.18711120661575587, 0.22613832652150356, 0.2631587376403516, 0.2083562319990443, 0.18259649389037402, 0.193431091961622, 0.829689805202301, 0.6978220523817482, 0.19641151775048604, 0.18580525236827816, 0.18014237990605797, 0.6759299998859297, 0.8063676359307129, 0.20185428942065176, 0.2068840166925202, 0.2064155591553115, 0.19895542901668328, 0.5987939544125035, 0.16433429851850268, 0.20842469407016762, 0.20376748218246887, 0.1830568662841463, 0.18714197816037104, 0.18534510948682426, 0.20206754668409033, 0.184903926747361, 0.17763988418342014, 0.18923074738169265, 0.19173453862244738, 0.18889295019318675, 0.07929852808174676, 0.08520227820452109, 0.08239062509294459, 0.08758241093881602, 0.07637705080278523, 0.0853394160128561, 0.09327844562796705, 0.07336447272886404, 0.07660269930659092]}, "mutation_prompt": null}
{"id": "afd98266-5629-4211-bb10-4461146bf19b", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 6 * self.dim  # Further reduced population size for faster execution\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.F = 0.6  # Adjusted mutation factor for initial diversity\n        self.CR = 0.9  # Higher crossover rate for increased recombination\n        self.evaluations = 0\n        self.archive = []\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n\n                # Check archive for potential new base vector\n                if len(self.archive) > 0 and np.random.rand() < 0.1:\n                    base_vector = self.archive[np.random.randint(len(self.archive))]\n                else:\n                    base_vector = self.population[a]\n\n                # Mutation with potential archive vector\n                mutant = base_vector + self.F * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, *self.bounds)\n                \n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    # Archive successful mutants\n                    self.archive.append(trial)\n\n                # Dynamic adjustment based on fitness improvement\n                if trial_fitness < self.fitness.mean():\n                    self.F = np.clip(self.F + 0.01 * (0.5 - np.random.rand()), 0.1, 0.9)\n                    self.CR = np.clip(self.CR + 0.01 * (0.5 - np.random.rand()), 0.5, 1.0)\n\n        return self.population[np.argmin(self.fitness)]\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1", "name": "EnhancedMetaheuristicOptimizer", "description": "This algorithm enhances Differential Evolution by incorporating a dynamic archiving mechanism and adaptive scaling, focusing on reducing redundant evaluations and improving convergence speed.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e2479e79-b69d-45fa-b91b-0b20431aaa1a", "metadata": {"aucs": [0.8460838787318541, 0.8662210773214738, 0.8164573346626365, 0.8474260970208942, 0.8564395667445609, 0.8345479318139788, 0.8540491208796602, 0.8317501307836201, 0.8398020747513537, 0.6862735300194087, 0.7312545135338542, 0.7337114467926564, 0.7393741637085585, 0.7233185285708336, 0.6567521728063315, 0.7418944441517743, 0.7133538515172579, 0.7489585245586282, 0.21512818503010733, 0.13583250914468514, 0.12183102787103783, 0.10404529497511705, 0.12155147909505926, 0.11161737498757207, 0.13566255680944728, 0.13309452614576944, 0.14253313168169335, 0.10277272302788698, 0.11056387527357237, 0.1397652820307307, 0.12202565881943339, 0.13084970314919397, 0.1147862561070846, 0.1107156460462495, 0.09995298490831994, 0.10050844281822302, 0.9308272990481794, 0.9504949701555323, 0.9811165720089283, 0.8895067268384018, 0.9408710023392403, 0.9432442402822587, 0.9560733825932358, 0.9605358821067621, 0.9335584020145802, 0.5122660725578172, 0.5958772319256793, 0.5322793929517171, 0.5916223442813854, 0.5962377974045365, 0.678995085032133, 0.4755485481163809, 0.611284500745387, 0.6076148974411232, 0.8472652261287323, 0.8327665107298321, 0.805940854875559, 0.8202599398726511, 0.8380067227205756, 0.7967428263023542, 0.7747845915458351, 0.724097987386366, 0.8400537185005408, 0.40217369740982223, 0.18484126740458728, 0.36324051532467916, 0.37263017825860756, 0.20392326655030668, 0.41237192075948637, 0.3877440003099134, 0.2856761126710259, 0.3532608298652462, 0.3513102896224257, 0.21481712428264177, 0.2222788220777453, 0.29745499244108997, 0.1793286168051631, 0.22107342973119593, 0.2203450980563506, 0.32266939191309374, 0.43019538881702224, 0.3911602034296203, 0.5774387066263849, 0.48372916708951874, 0.2695686529190173, 0.33243437736866177, 0.40965558842833816, 0.6195002512470358, 0.3893141339666034, 0.3432472999933732, 0.5981410308120142, 0.5898843981655413, 0.7716245008655335, 0.5675668800912007, 0.33000017539178916, 0.6492708360853281, 0.5550601286062737, 0.7212557454319156, 0.6263478190421081, 0.1119579449124063, 0.23667253698061974, 0.2531368640355437, 0.3970862646124953, 0.1677008461223135, 0.13531017600578343, 0.2482487719050257, 0.14463749950973293, 0.12877118481664707, 0.36600715857411137, 0.3882310737730873, 0.29618786249399975, 0.45837274139040207, 0.5503106267937234, 0.3740273380776381, 0.3592493850333405, 0.2952051198575746, 0.37013075102967874, 0.750211501266788, 0.6666848209869163, 0.8116452718924732, 0.6430141624805874, 0.6515772159861947, 0.6732183674250557, 0.7595936637040608, 0.7542405270345075, 0.7362578781754887, 0.10952760241339854, 0.09747974746612997, 0.09881545004929926, 0.1050489895048855, 0.10220713828883776, 0.09193357941703961, 0.0978309479750844, 0.10876801218323995, 0.08878289143401286, 0.1514075341051615, 0.1327516452974833, 0.17921491165456171, 0.14894524904132433, 0.19931045960284177, 0.18922205595252428, 0.13680241626212442, 0.1803489665926591, 0.1462694853480363, 0.5042799239185823, 0.5566296502946564, 0.4306507622010627, 0.43610913378045735, 0.43789129616785827, 0.39826610120660055, 0.47585532965363087, 0.4564648588947926, 0.42518175752329834, 0.32166276967296914, 0.3514889373439898, 0.40557211227448786, 0.2849455300096645, 0.41406695063959165, 0.42012776184416367, 0.4123723247874548, 0.3978376085516072, 0.3542714761047776, 0.19650293233862182, 0.21438895488834142, 0.19605126648810656, 0.1945187066916556, 0.18776672033534592, 0.19023493490633725, 0.1865622335841266, 0.18682236690566367, 0.19951383700140324, 0.20665804903689056, 0.2775759957453616, 0.4478153759030584, 0.2164917410508882, 0.17873148994872046, 0.3428392679693817, 0.18711120661575587, 0.22613832652150356, 0.2631587376403516, 0.2083562319990443, 0.18259649389037402, 0.193431091961622, 0.829689805202301, 0.6978220523817482, 0.19641151775048604, 0.18580525236827816, 0.18014237990605797, 0.6759299998859297, 0.8063676359307129, 0.20185428942065176, 0.2068840166925202, 0.2064155591553115, 0.19895542901668328, 0.5987939544125035, 0.16433429851850268, 0.20842469407016762, 0.20376748218246887, 0.1830568662841463, 0.18714197816037104, 0.18534510948682426, 0.20206754668409033, 0.184903926747361, 0.17763988418342014, 0.18923074738169265, 0.19173453862244738, 0.18889295019318675, 0.07929852808174676, 0.08520227820452109, 0.08239062509294459, 0.08758241093881602, 0.07637705080278523, 0.0853394160128561, 0.09327844562796705, 0.07336447272886404, 0.07660269930659092]}, "mutation_prompt": null}
{"id": "474efade-2f67-4cc5-90da-82f6c0f35ed2", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 6 * self.dim  # Further reduced population size for faster execution\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.F = 0.6  # Adjusted mutation factor for initial diversity\n        self.CR = 0.9  # Higher crossover rate for increased recombination\n        self.evaluations = 0\n        self.archive = []\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n\n                # Check archive for potential new base vector\n                if len(self.archive) > 0 and np.random.rand() < 0.1:\n                    base_vector = self.archive[np.random.randint(len(self.archive))]\n                else:\n                    base_vector = self.population[a]\n\n                # Mutation with potential archive vector\n                mutant = base_vector + self.F * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, *self.bounds)\n                \n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    # Archive successful mutants\n                    self.archive.append(trial)\n\n                # Dynamic adjustment based on fitness improvement\n                if trial_fitness < self.fitness.mean():\n                    self.F = np.clip(self.F + 0.01 * (0.5 - np.random.rand()), 0.1, 0.9)\n                    self.CR = np.clip(self.CR + 0.01 * (0.5 - np.random.rand()), 0.5, 1.0)\n\n        return self.population[np.argmin(self.fitness)]\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1", "name": "EnhancedMetaheuristicOptimizer", "description": "This algorithm enhances Differential Evolution by incorporating a dynamic archiving mechanism and adaptive scaling, focusing on reducing redundant evaluations and improving convergence speed.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e2479e79-b69d-45fa-b91b-0b20431aaa1a", "metadata": {"aucs": [0.8460838787318541, 0.8662210773214738, 0.8164573346626365, 0.8474260970208942, 0.8564395667445609, 0.8345479318139788, 0.8540491208796602, 0.8317501307836201, 0.8398020747513537, 0.6862735300194087, 0.7312545135338542, 0.7337114467926564, 0.7393741637085585, 0.7233185285708336, 0.6567521728063315, 0.7418944441517743, 0.7133538515172579, 0.7489585245586282, 0.21512818503010733, 0.13583250914468514, 0.12183102787103783, 0.10404529497511705, 0.12155147909505926, 0.11161737498757207, 0.13566255680944728, 0.13309452614576944, 0.14253313168169335, 0.10277272302788698, 0.11056387527357237, 0.1397652820307307, 0.12202565881943339, 0.13084970314919397, 0.1147862561070846, 0.1107156460462495, 0.09995298490831994, 0.10050844281822302, 0.9308272990481794, 0.9504949701555323, 0.9811165720089283, 0.8895067268384018, 0.9408710023392403, 0.9432442402822587, 0.9560733825932358, 0.9605358821067621, 0.9335584020145802, 0.5122660725578172, 0.5958772319256793, 0.5322793929517171, 0.5916223442813854, 0.5962377974045365, 0.678995085032133, 0.4755485481163809, 0.611284500745387, 0.6076148974411232, 0.8472652261287323, 0.8327665107298321, 0.805940854875559, 0.8202599398726511, 0.8380067227205756, 0.7967428263023542, 0.7747845915458351, 0.724097987386366, 0.8400537185005408, 0.40217369740982223, 0.18484126740458728, 0.36324051532467916, 0.37263017825860756, 0.20392326655030668, 0.41237192075948637, 0.3877440003099134, 0.2856761126710259, 0.3532608298652462, 0.3513102896224257, 0.21481712428264177, 0.2222788220777453, 0.29745499244108997, 0.1793286168051631, 0.22107342973119593, 0.2203450980563506, 0.32266939191309374, 0.43019538881702224, 0.3911602034296203, 0.5774387066263849, 0.48372916708951874, 0.2695686529190173, 0.33243437736866177, 0.40965558842833816, 0.6195002512470358, 0.3893141339666034, 0.3432472999933732, 0.5981410308120142, 0.5898843981655413, 0.7716245008655335, 0.5675668800912007, 0.33000017539178916, 0.6492708360853281, 0.5550601286062737, 0.7212557454319156, 0.6263478190421081, 0.1119579449124063, 0.23667253698061974, 0.2531368640355437, 0.3970862646124953, 0.1677008461223135, 0.13531017600578343, 0.2482487719050257, 0.14463749950973293, 0.12877118481664707, 0.36600715857411137, 0.3882310737730873, 0.29618786249399975, 0.45837274139040207, 0.5503106267937234, 0.3740273380776381, 0.3592493850333405, 0.2952051198575746, 0.37013075102967874, 0.750211501266788, 0.6666848209869163, 0.8116452718924732, 0.6430141624805874, 0.6515772159861947, 0.6732183674250557, 0.7595936637040608, 0.7542405270345075, 0.7362578781754887, 0.10952760241339854, 0.09747974746612997, 0.09881545004929926, 0.1050489895048855, 0.10220713828883776, 0.09193357941703961, 0.0978309479750844, 0.10876801218323995, 0.08878289143401286, 0.1514075341051615, 0.1327516452974833, 0.17921491165456171, 0.14894524904132433, 0.19931045960284177, 0.18922205595252428, 0.13680241626212442, 0.1803489665926591, 0.1462694853480363, 0.5042799239185823, 0.5566296502946564, 0.4306507622010627, 0.43610913378045735, 0.43789129616785827, 0.39826610120660055, 0.47585532965363087, 0.4564648588947926, 0.42518175752329834, 0.32166276967296914, 0.3514889373439898, 0.40557211227448786, 0.2849455300096645, 0.41406695063959165, 0.42012776184416367, 0.4123723247874548, 0.3978376085516072, 0.3542714761047776, 0.19650293233862182, 0.21438895488834142, 0.19605126648810656, 0.1945187066916556, 0.18776672033534592, 0.19023493490633725, 0.1865622335841266, 0.18682236690566367, 0.19951383700140324, 0.20665804903689056, 0.2775759957453616, 0.4478153759030584, 0.2164917410508882, 0.17873148994872046, 0.3428392679693817, 0.18711120661575587, 0.22613832652150356, 0.2631587376403516, 0.2083562319990443, 0.18259649389037402, 0.193431091961622, 0.829689805202301, 0.6978220523817482, 0.19641151775048604, 0.18580525236827816, 0.18014237990605797, 0.6759299998859297, 0.8063676359307129, 0.20185428942065176, 0.2068840166925202, 0.2064155591553115, 0.19895542901668328, 0.5987939544125035, 0.16433429851850268, 0.20842469407016762, 0.20376748218246887, 0.1830568662841463, 0.18714197816037104, 0.18534510948682426, 0.20206754668409033, 0.184903926747361, 0.17763988418342014, 0.18923074738169265, 0.19173453862244738, 0.18889295019318675, 0.07929852808174676, 0.08520227820452109, 0.08239062509294459, 0.08758241093881602, 0.07637705080278523, 0.0853394160128561, 0.09327844562796705, 0.07336447272886404, 0.07660269930659092]}, "mutation_prompt": null}
{"id": "7bd56d3b-aafc-42a0-b4f3-dbbcf0de0216", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 6 * self.dim  # Further reduced population size for faster execution\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.F = 0.6  # Adjusted mutation factor for initial diversity\n        self.CR = 0.9  # Higher crossover rate for increased recombination\n        self.evaluations = 0\n        self.archive = []\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n\n                # Check archive for potential new base vector\n                if len(self.archive) > 0 and np.random.rand() < 0.1:\n                    base_vector = self.archive[np.random.randint(len(self.archive))]\n                else:\n                    base_vector = self.population[a]\n\n                # Mutation with potential archive vector\n                mutant = base_vector + self.F * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, *self.bounds)\n                \n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    # Archive successful mutants\n                    self.archive.append(trial)\n\n                # Dynamic adjustment based on fitness improvement\n                if trial_fitness < self.fitness.mean():\n                    self.F = np.clip(self.F + 0.01 * (0.5 - np.random.rand()), 0.1, 0.9)\n                    self.CR = np.clip(self.CR + 0.01 * (0.5 - np.random.rand()), 0.5, 1.0)\n\n        return self.population[np.argmin(self.fitness)]\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1", "name": "EnhancedMetaheuristicOptimizer", "description": "This algorithm enhances Differential Evolution by incorporating a dynamic archiving mechanism and adaptive scaling, focusing on reducing redundant evaluations and improving convergence speed.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e2479e79-b69d-45fa-b91b-0b20431aaa1a", "metadata": {"aucs": [0.8460838787318541, 0.8662210773214738, 0.8164573346626365, 0.8474260970208942, 0.8564395667445609, 0.8345479318139788, 0.8540491208796602, 0.8317501307836201, 0.8398020747513537, 0.6862735300194087, 0.7312545135338542, 0.7337114467926564, 0.7393741637085585, 0.7233185285708336, 0.6567521728063315, 0.7418944441517743, 0.7133538515172579, 0.7489585245586282, 0.21512818503010733, 0.13583250914468514, 0.12183102787103783, 0.10404529497511705, 0.12155147909505926, 0.11161737498757207, 0.13566255680944728, 0.13309452614576944, 0.14253313168169335, 0.10277272302788698, 0.11056387527357237, 0.1397652820307307, 0.12202565881943339, 0.13084970314919397, 0.1147862561070846, 0.1107156460462495, 0.09995298490831994, 0.10050844281822302, 0.9308272990481794, 0.9504949701555323, 0.9811165720089283, 0.8895067268384018, 0.9408710023392403, 0.9432442402822587, 0.9560733825932358, 0.9605358821067621, 0.9335584020145802, 0.5122660725578172, 0.5958772319256793, 0.5322793929517171, 0.5916223442813854, 0.5962377974045365, 0.678995085032133, 0.4755485481163809, 0.611284500745387, 0.6076148974411232, 0.8472652261287323, 0.8327665107298321, 0.805940854875559, 0.8202599398726511, 0.8380067227205756, 0.7967428263023542, 0.7747845915458351, 0.724097987386366, 0.8400537185005408, 0.40217369740982223, 0.18484126740458728, 0.36324051532467916, 0.37263017825860756, 0.20392326655030668, 0.41237192075948637, 0.3877440003099134, 0.2856761126710259, 0.3532608298652462, 0.3513102896224257, 0.21481712428264177, 0.2222788220777453, 0.29745499244108997, 0.1793286168051631, 0.22107342973119593, 0.2203450980563506, 0.32266939191309374, 0.43019538881702224, 0.3911602034296203, 0.5774387066263849, 0.48372916708951874, 0.2695686529190173, 0.33243437736866177, 0.40965558842833816, 0.6195002512470358, 0.3893141339666034, 0.3432472999933732, 0.5981410308120142, 0.5898843981655413, 0.7716245008655335, 0.5675668800912007, 0.33000017539178916, 0.6492708360853281, 0.5550601286062737, 0.7212557454319156, 0.6263478190421081, 0.1119579449124063, 0.23667253698061974, 0.2531368640355437, 0.3970862646124953, 0.1677008461223135, 0.13531017600578343, 0.2482487719050257, 0.14463749950973293, 0.12877118481664707, 0.36600715857411137, 0.3882310737730873, 0.29618786249399975, 0.45837274139040207, 0.5503106267937234, 0.3740273380776381, 0.3592493850333405, 0.2952051198575746, 0.37013075102967874, 0.750211501266788, 0.6666848209869163, 0.8116452718924732, 0.6430141624805874, 0.6515772159861947, 0.6732183674250557, 0.7595936637040608, 0.7542405270345075, 0.7362578781754887, 0.10952760241339854, 0.09747974746612997, 0.09881545004929926, 0.1050489895048855, 0.10220713828883776, 0.09193357941703961, 0.0978309479750844, 0.10876801218323995, 0.08878289143401286, 0.1514075341051615, 0.1327516452974833, 0.17921491165456171, 0.14894524904132433, 0.19931045960284177, 0.18922205595252428, 0.13680241626212442, 0.1803489665926591, 0.1462694853480363, 0.5042799239185823, 0.5566296502946564, 0.4306507622010627, 0.43610913378045735, 0.43789129616785827, 0.39826610120660055, 0.47585532965363087, 0.4564648588947926, 0.42518175752329834, 0.32166276967296914, 0.3514889373439898, 0.40557211227448786, 0.2849455300096645, 0.41406695063959165, 0.42012776184416367, 0.4123723247874548, 0.3978376085516072, 0.3542714761047776, 0.19650293233862182, 0.21438895488834142, 0.19605126648810656, 0.1945187066916556, 0.18776672033534592, 0.19023493490633725, 0.1865622335841266, 0.18682236690566367, 0.19951383700140324, 0.20665804903689056, 0.2775759957453616, 0.4478153759030584, 0.2164917410508882, 0.17873148994872046, 0.3428392679693817, 0.18711120661575587, 0.22613832652150356, 0.2631587376403516, 0.2083562319990443, 0.18259649389037402, 0.193431091961622, 0.829689805202301, 0.6978220523817482, 0.19641151775048604, 0.18580525236827816, 0.18014237990605797, 0.6759299998859297, 0.8063676359307129, 0.20185428942065176, 0.2068840166925202, 0.2064155591553115, 0.19895542901668328, 0.5987939544125035, 0.16433429851850268, 0.20842469407016762, 0.20376748218246887, 0.1830568662841463, 0.18714197816037104, 0.18534510948682426, 0.20206754668409033, 0.184903926747361, 0.17763988418342014, 0.18923074738169265, 0.19173453862244738, 0.18889295019318675, 0.07929852808174676, 0.08520227820452109, 0.08239062509294459, 0.08758241093881602, 0.07637705080278523, 0.0853394160128561, 0.09327844562796705, 0.07336447272886404, 0.07660269930659092]}, "mutation_prompt": null}
{"id": "0f3e7407-d50a-4186-8ad8-f383dade2ec3", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 6 * self.dim  # Further reduced population size for faster execution\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.F = 0.6  # Adjusted mutation factor for initial diversity\n        self.CR = 0.9  # Higher crossover rate for increased recombination\n        self.evaluations = 0\n        self.archive = []\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n\n                # Check archive for potential new base vector\n                if len(self.archive) > 0 and np.random.rand() < 0.1:\n                    base_vector = self.archive[np.random.randint(len(self.archive))]\n                else:\n                    base_vector = self.population[a]\n\n                # Mutation with potential archive vector\n                mutant = base_vector + self.F * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, *self.bounds)\n                \n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    # Archive successful mutants\n                    self.archive.append(trial)\n\n                # Dynamic adjustment based on fitness improvement\n                if trial_fitness < self.fitness.mean():\n                    self.F = np.clip(self.F + 0.01 * (0.5 - np.random.rand()), 0.1, 0.9)\n                    self.CR = np.clip(self.CR + 0.01 * (0.5 - np.random.rand()), 0.5, 1.0)\n\n        return self.population[np.argmin(self.fitness)]\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1", "name": "EnhancedMetaheuristicOptimizer", "description": "This algorithm enhances Differential Evolution by incorporating a dynamic archiving mechanism and adaptive scaling, focusing on reducing redundant evaluations and improving convergence speed.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e2479e79-b69d-45fa-b91b-0b20431aaa1a", "metadata": {"aucs": [0.8460838787318541, 0.8662210773214738, 0.8164573346626365, 0.8474260970208942, 0.8564395667445609, 0.8345479318139788, 0.8540491208796602, 0.8317501307836201, 0.8398020747513537, 0.6862735300194087, 0.7312545135338542, 0.7337114467926564, 0.7393741637085585, 0.7233185285708336, 0.6567521728063315, 0.7418944441517743, 0.7133538515172579, 0.7489585245586282, 0.21512818503010733, 0.13583250914468514, 0.12183102787103783, 0.10404529497511705, 0.12155147909505926, 0.11161737498757207, 0.13566255680944728, 0.13309452614576944, 0.14253313168169335, 0.10277272302788698, 0.11056387527357237, 0.1397652820307307, 0.12202565881943339, 0.13084970314919397, 0.1147862561070846, 0.1107156460462495, 0.09995298490831994, 0.10050844281822302, 0.9308272990481794, 0.9504949701555323, 0.9811165720089283, 0.8895067268384018, 0.9408710023392403, 0.9432442402822587, 0.9560733825932358, 0.9605358821067621, 0.9335584020145802, 0.5122660725578172, 0.5958772319256793, 0.5322793929517171, 0.5916223442813854, 0.5962377974045365, 0.678995085032133, 0.4755485481163809, 0.611284500745387, 0.6076148974411232, 0.8472652261287323, 0.8327665107298321, 0.805940854875559, 0.8202599398726511, 0.8380067227205756, 0.7967428263023542, 0.7747845915458351, 0.724097987386366, 0.8400537185005408, 0.40217369740982223, 0.18484126740458728, 0.36324051532467916, 0.37263017825860756, 0.20392326655030668, 0.41237192075948637, 0.3877440003099134, 0.2856761126710259, 0.3532608298652462, 0.3513102896224257, 0.21481712428264177, 0.2222788220777453, 0.29745499244108997, 0.1793286168051631, 0.22107342973119593, 0.2203450980563506, 0.32266939191309374, 0.43019538881702224, 0.3911602034296203, 0.5774387066263849, 0.48372916708951874, 0.2695686529190173, 0.33243437736866177, 0.40965558842833816, 0.6195002512470358, 0.3893141339666034, 0.3432472999933732, 0.5981410308120142, 0.5898843981655413, 0.7716245008655335, 0.5675668800912007, 0.33000017539178916, 0.6492708360853281, 0.5550601286062737, 0.7212557454319156, 0.6263478190421081, 0.1119579449124063, 0.23667253698061974, 0.2531368640355437, 0.3970862646124953, 0.1677008461223135, 0.13531017600578343, 0.2482487719050257, 0.14463749950973293, 0.12877118481664707, 0.36600715857411137, 0.3882310737730873, 0.29618786249399975, 0.45837274139040207, 0.5503106267937234, 0.3740273380776381, 0.3592493850333405, 0.2952051198575746, 0.37013075102967874, 0.750211501266788, 0.6666848209869163, 0.8116452718924732, 0.6430141624805874, 0.6515772159861947, 0.6732183674250557, 0.7595936637040608, 0.7542405270345075, 0.7362578781754887, 0.10952760241339854, 0.09747974746612997, 0.09881545004929926, 0.1050489895048855, 0.10220713828883776, 0.09193357941703961, 0.0978309479750844, 0.10876801218323995, 0.08878289143401286, 0.1514075341051615, 0.1327516452974833, 0.17921491165456171, 0.14894524904132433, 0.19931045960284177, 0.18922205595252428, 0.13680241626212442, 0.1803489665926591, 0.1462694853480363, 0.5042799239185823, 0.5566296502946564, 0.4306507622010627, 0.43610913378045735, 0.43789129616785827, 0.39826610120660055, 0.47585532965363087, 0.4564648588947926, 0.42518175752329834, 0.32166276967296914, 0.3514889373439898, 0.40557211227448786, 0.2849455300096645, 0.41406695063959165, 0.42012776184416367, 0.4123723247874548, 0.3978376085516072, 0.3542714761047776, 0.19650293233862182, 0.21438895488834142, 0.19605126648810656, 0.1945187066916556, 0.18776672033534592, 0.19023493490633725, 0.1865622335841266, 0.18682236690566367, 0.19951383700140324, 0.20665804903689056, 0.2775759957453616, 0.4478153759030584, 0.2164917410508882, 0.17873148994872046, 0.3428392679693817, 0.18711120661575587, 0.22613832652150356, 0.2631587376403516, 0.2083562319990443, 0.18259649389037402, 0.193431091961622, 0.829689805202301, 0.6978220523817482, 0.19641151775048604, 0.18580525236827816, 0.18014237990605797, 0.6759299998859297, 0.8063676359307129, 0.20185428942065176, 0.2068840166925202, 0.2064155591553115, 0.19895542901668328, 0.5987939544125035, 0.16433429851850268, 0.20842469407016762, 0.20376748218246887, 0.1830568662841463, 0.18714197816037104, 0.18534510948682426, 0.20206754668409033, 0.184903926747361, 0.17763988418342014, 0.18923074738169265, 0.19173453862244738, 0.18889295019318675, 0.07929852808174676, 0.08520227820452109, 0.08239062509294459, 0.08758241093881602, 0.07637705080278523, 0.0853394160128561, 0.09327844562796705, 0.07336447272886404, 0.07660269930659092]}, "mutation_prompt": null}
{"id": "3ffdc3c8-ee51-4c47-ab84-9d1b5645d720", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 6 * self.dim  # Further reduced population size for faster execution\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.F = 0.6  # Adjusted mutation factor for initial diversity\n        self.CR = 0.9  # Higher crossover rate for increased recombination\n        self.evaluations = 0\n        self.archive = []\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n\n                # Check archive for potential new base vector\n                if len(self.archive) > 0 and np.random.rand() < 0.1:\n                    base_vector = self.archive[np.random.randint(len(self.archive))]\n                else:\n                    base_vector = self.population[a]\n\n                # Mutation with potential archive vector\n                mutant = base_vector + self.F * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, *self.bounds)\n                \n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    # Archive successful mutants\n                    self.archive.append(trial)\n\n                # Dynamic adjustment based on fitness improvement\n                if trial_fitness < self.fitness.mean():\n                    self.F = np.clip(self.F + 0.01 * (0.5 - np.random.rand()), 0.1, 0.9)\n                    self.CR = np.clip(self.CR + 0.01 * (0.5 - np.random.rand()), 0.5, 1.0)\n\n        return self.population[np.argmin(self.fitness)]\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1", "name": "EnhancedMetaheuristicOptimizer", "description": "This algorithm enhances Differential Evolution by incorporating a dynamic archiving mechanism and adaptive scaling, focusing on reducing redundant evaluations and improving convergence speed.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e2479e79-b69d-45fa-b91b-0b20431aaa1a", "metadata": {"aucs": [0.8460838787318541, 0.8662210773214738, 0.8164573346626365, 0.8474260970208942, 0.8564395667445609, 0.8345479318139788, 0.8540491208796602, 0.8317501307836201, 0.8398020747513537, 0.6862735300194087, 0.7312545135338542, 0.7337114467926564, 0.7393741637085585, 0.7233185285708336, 0.6567521728063315, 0.7418944441517743, 0.7133538515172579, 0.7489585245586282, 0.21512818503010733, 0.13583250914468514, 0.12183102787103783, 0.10404529497511705, 0.12155147909505926, 0.11161737498757207, 0.13566255680944728, 0.13309452614576944, 0.14253313168169335, 0.10277272302788698, 0.11056387527357237, 0.1397652820307307, 0.12202565881943339, 0.13084970314919397, 0.1147862561070846, 0.1107156460462495, 0.09995298490831994, 0.10050844281822302, 0.9308272990481794, 0.9504949701555323, 0.9811165720089283, 0.8895067268384018, 0.9408710023392403, 0.9432442402822587, 0.9560733825932358, 0.9605358821067621, 0.9335584020145802, 0.5122660725578172, 0.5958772319256793, 0.5322793929517171, 0.5916223442813854, 0.5962377974045365, 0.678995085032133, 0.4755485481163809, 0.611284500745387, 0.6076148974411232, 0.8472652261287323, 0.8327665107298321, 0.805940854875559, 0.8202599398726511, 0.8380067227205756, 0.7967428263023542, 0.7747845915458351, 0.724097987386366, 0.8400537185005408, 0.40217369740982223, 0.18484126740458728, 0.36324051532467916, 0.37263017825860756, 0.20392326655030668, 0.41237192075948637, 0.3877440003099134, 0.2856761126710259, 0.3532608298652462, 0.3513102896224257, 0.21481712428264177, 0.2222788220777453, 0.29745499244108997, 0.1793286168051631, 0.22107342973119593, 0.2203450980563506, 0.32266939191309374, 0.43019538881702224, 0.3911602034296203, 0.5774387066263849, 0.48372916708951874, 0.2695686529190173, 0.33243437736866177, 0.40965558842833816, 0.6195002512470358, 0.3893141339666034, 0.3432472999933732, 0.5981410308120142, 0.5898843981655413, 0.7716245008655335, 0.5675668800912007, 0.33000017539178916, 0.6492708360853281, 0.5550601286062737, 0.7212557454319156, 0.6263478190421081, 0.1119579449124063, 0.23667253698061974, 0.2531368640355437, 0.3970862646124953, 0.1677008461223135, 0.13531017600578343, 0.2482487719050257, 0.14463749950973293, 0.12877118481664707, 0.36600715857411137, 0.3882310737730873, 0.29618786249399975, 0.45837274139040207, 0.5503106267937234, 0.3740273380776381, 0.3592493850333405, 0.2952051198575746, 0.37013075102967874, 0.750211501266788, 0.6666848209869163, 0.8116452718924732, 0.6430141624805874, 0.6515772159861947, 0.6732183674250557, 0.7595936637040608, 0.7542405270345075, 0.7362578781754887, 0.10952760241339854, 0.09747974746612997, 0.09881545004929926, 0.1050489895048855, 0.10220713828883776, 0.09193357941703961, 0.0978309479750844, 0.10876801218323995, 0.08878289143401286, 0.1514075341051615, 0.1327516452974833, 0.17921491165456171, 0.14894524904132433, 0.19931045960284177, 0.18922205595252428, 0.13680241626212442, 0.1803489665926591, 0.1462694853480363, 0.5042799239185823, 0.5566296502946564, 0.4306507622010627, 0.43610913378045735, 0.43789129616785827, 0.39826610120660055, 0.47585532965363087, 0.4564648588947926, 0.42518175752329834, 0.32166276967296914, 0.3514889373439898, 0.40557211227448786, 0.2849455300096645, 0.41406695063959165, 0.42012776184416367, 0.4123723247874548, 0.3978376085516072, 0.3542714761047776, 0.19650293233862182, 0.21438895488834142, 0.19605126648810656, 0.1945187066916556, 0.18776672033534592, 0.19023493490633725, 0.1865622335841266, 0.18682236690566367, 0.19951383700140324, 0.20665804903689056, 0.2775759957453616, 0.4478153759030584, 0.2164917410508882, 0.17873148994872046, 0.3428392679693817, 0.18711120661575587, 0.22613832652150356, 0.2631587376403516, 0.2083562319990443, 0.18259649389037402, 0.193431091961622, 0.829689805202301, 0.6978220523817482, 0.19641151775048604, 0.18580525236827816, 0.18014237990605797, 0.6759299998859297, 0.8063676359307129, 0.20185428942065176, 0.2068840166925202, 0.2064155591553115, 0.19895542901668328, 0.5987939544125035, 0.16433429851850268, 0.20842469407016762, 0.20376748218246887, 0.1830568662841463, 0.18714197816037104, 0.18534510948682426, 0.20206754668409033, 0.184903926747361, 0.17763988418342014, 0.18923074738169265, 0.19173453862244738, 0.18889295019318675, 0.07929852808174676, 0.08520227820452109, 0.08239062509294459, 0.08758241093881602, 0.07637705080278523, 0.0853394160128561, 0.09327844562796705, 0.07336447272886404, 0.07660269930659092]}, "mutation_prompt": null}
{"id": "b10e9982-618c-4573-80ec-ad6db08d72c1", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 6 * self.dim  # Further reduced population size for faster execution\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.F = 0.6  # Adjusted mutation factor for initial diversity\n        self.CR = 0.9  # Higher crossover rate for increased recombination\n        self.evaluations = 0\n        self.archive = []\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n\n                # Check archive for potential new base vector\n                if len(self.archive) > 0 and np.random.rand() < 0.1:\n                    base_vector = self.archive[np.random.randint(len(self.archive))]\n                else:\n                    base_vector = self.population[a]\n\n                # Mutation with potential archive vector\n                mutant = base_vector + self.F * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, *self.bounds)\n                \n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    # Archive successful mutants\n                    self.archive.append(trial)\n\n                # Dynamic adjustment based on fitness improvement\n                if trial_fitness < self.fitness.mean():\n                    self.F = np.clip(self.F + 0.01 * (0.5 - np.random.rand()), 0.1, 0.9)\n                    self.CR = np.clip(self.CR + 0.01 * (0.5 - np.random.rand()), 0.5, 1.0)\n\n        return self.population[np.argmin(self.fitness)]\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1", "name": "EnhancedMetaheuristicOptimizer", "description": "This algorithm enhances Differential Evolution by incorporating a dynamic archiving mechanism and adaptive scaling, focusing on reducing redundant evaluations and improving convergence speed.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e2479e79-b69d-45fa-b91b-0b20431aaa1a", "metadata": {"aucs": [0.8460838787318541, 0.8662210773214738, 0.8164573346626365, 0.8474260970208942, 0.8564395667445609, 0.8345479318139788, 0.8540491208796602, 0.8317501307836201, 0.8398020747513537, 0.6862735300194087, 0.7312545135338542, 0.7337114467926564, 0.7393741637085585, 0.7233185285708336, 0.6567521728063315, 0.7418944441517743, 0.7133538515172579, 0.7489585245586282, 0.21512818503010733, 0.13583250914468514, 0.12183102787103783, 0.10404529497511705, 0.12155147909505926, 0.11161737498757207, 0.13566255680944728, 0.13309452614576944, 0.14253313168169335, 0.10277272302788698, 0.11056387527357237, 0.1397652820307307, 0.12202565881943339, 0.13084970314919397, 0.1147862561070846, 0.1107156460462495, 0.09995298490831994, 0.10050844281822302, 0.9308272990481794, 0.9504949701555323, 0.9811165720089283, 0.8895067268384018, 0.9408710023392403, 0.9432442402822587, 0.9560733825932358, 0.9605358821067621, 0.9335584020145802, 0.5122660725578172, 0.5958772319256793, 0.5322793929517171, 0.5916223442813854, 0.5962377974045365, 0.678995085032133, 0.4755485481163809, 0.611284500745387, 0.6076148974411232, 0.8472652261287323, 0.8327665107298321, 0.805940854875559, 0.8202599398726511, 0.8380067227205756, 0.7967428263023542, 0.7747845915458351, 0.724097987386366, 0.8400537185005408, 0.40217369740982223, 0.18484126740458728, 0.36324051532467916, 0.37263017825860756, 0.20392326655030668, 0.41237192075948637, 0.3877440003099134, 0.2856761126710259, 0.3532608298652462, 0.3513102896224257, 0.21481712428264177, 0.2222788220777453, 0.29745499244108997, 0.1793286168051631, 0.22107342973119593, 0.2203450980563506, 0.32266939191309374, 0.43019538881702224, 0.3911602034296203, 0.5774387066263849, 0.48372916708951874, 0.2695686529190173, 0.33243437736866177, 0.40965558842833816, 0.6195002512470358, 0.3893141339666034, 0.3432472999933732, 0.5981410308120142, 0.5898843981655413, 0.7716245008655335, 0.5675668800912007, 0.33000017539178916, 0.6492708360853281, 0.5550601286062737, 0.7212557454319156, 0.6263478190421081, 0.1119579449124063, 0.23667253698061974, 0.2531368640355437, 0.3970862646124953, 0.1677008461223135, 0.13531017600578343, 0.2482487719050257, 0.14463749950973293, 0.12877118481664707, 0.36600715857411137, 0.3882310737730873, 0.29618786249399975, 0.45837274139040207, 0.5503106267937234, 0.3740273380776381, 0.3592493850333405, 0.2952051198575746, 0.37013075102967874, 0.750211501266788, 0.6666848209869163, 0.8116452718924732, 0.6430141624805874, 0.6515772159861947, 0.6732183674250557, 0.7595936637040608, 0.7542405270345075, 0.7362578781754887, 0.10952760241339854, 0.09747974746612997, 0.09881545004929926, 0.1050489895048855, 0.10220713828883776, 0.09193357941703961, 0.0978309479750844, 0.10876801218323995, 0.08878289143401286, 0.1514075341051615, 0.1327516452974833, 0.17921491165456171, 0.14894524904132433, 0.19931045960284177, 0.18922205595252428, 0.13680241626212442, 0.1803489665926591, 0.1462694853480363, 0.5042799239185823, 0.5566296502946564, 0.4306507622010627, 0.43610913378045735, 0.43789129616785827, 0.39826610120660055, 0.47585532965363087, 0.4564648588947926, 0.42518175752329834, 0.32166276967296914, 0.3514889373439898, 0.40557211227448786, 0.2849455300096645, 0.41406695063959165, 0.42012776184416367, 0.4123723247874548, 0.3978376085516072, 0.3542714761047776, 0.19650293233862182, 0.21438895488834142, 0.19605126648810656, 0.1945187066916556, 0.18776672033534592, 0.19023493490633725, 0.1865622335841266, 0.18682236690566367, 0.19951383700140324, 0.20665804903689056, 0.2775759957453616, 0.4478153759030584, 0.2164917410508882, 0.17873148994872046, 0.3428392679693817, 0.18711120661575587, 0.22613832652150356, 0.2631587376403516, 0.2083562319990443, 0.18259649389037402, 0.193431091961622, 0.829689805202301, 0.6978220523817482, 0.19641151775048604, 0.18580525236827816, 0.18014237990605797, 0.6759299998859297, 0.8063676359307129, 0.20185428942065176, 0.2068840166925202, 0.2064155591553115, 0.19895542901668328, 0.5987939544125035, 0.16433429851850268, 0.20842469407016762, 0.20376748218246887, 0.1830568662841463, 0.18714197816037104, 0.18534510948682426, 0.20206754668409033, 0.184903926747361, 0.17763988418342014, 0.18923074738169265, 0.19173453862244738, 0.18889295019318675, 0.07929852808174676, 0.08520227820452109, 0.08239062509294459, 0.08758241093881602, 0.07637705080278523, 0.0853394160128561, 0.09327844562796705, 0.07336447272886404, 0.07660269930659092]}, "mutation_prompt": null}
{"id": "375b6d04-9ef4-4c2e-a76b-f51558d2dc1c", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 6 * self.dim  # Further reduced population size for faster execution\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.F = 0.6  # Adjusted mutation factor for initial diversity\n        self.CR = 0.9  # Higher crossover rate for increased recombination\n        self.evaluations = 0\n        self.archive = []\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n\n                # Check archive for potential new base vector\n                if len(self.archive) > 0 and np.random.rand() < 0.1:\n                    base_vector = self.archive[np.random.randint(len(self.archive))]\n                else:\n                    base_vector = self.population[a]\n\n                # Mutation with potential archive vector\n                mutant = base_vector + self.F * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, *self.bounds)\n                \n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    # Archive successful mutants\n                    self.archive.append(trial)\n\n                # Dynamic adjustment based on fitness improvement\n                if trial_fitness < self.fitness.mean():\n                    self.F = np.clip(self.F + 0.01 * (0.5 - np.random.rand()), 0.1, 0.9)\n                    self.CR = np.clip(self.CR + 0.01 * (0.5 - np.random.rand()), 0.5, 1.0)\n\n        return self.population[np.argmin(self.fitness)]\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1", "name": "EnhancedMetaheuristicOptimizer", "description": "This algorithm enhances Differential Evolution by incorporating a dynamic archiving mechanism and adaptive scaling, focusing on reducing redundant evaluations and improving convergence speed.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e2479e79-b69d-45fa-b91b-0b20431aaa1a", "metadata": {"aucs": [0.8460838787318541, 0.8662210773214738, 0.8164573346626365, 0.8474260970208942, 0.8564395667445609, 0.8345479318139788, 0.8540491208796602, 0.8317501307836201, 0.8398020747513537, 0.6862735300194087, 0.7312545135338542, 0.7337114467926564, 0.7393741637085585, 0.7233185285708336, 0.6567521728063315, 0.7418944441517743, 0.7133538515172579, 0.7489585245586282, 0.21512818503010733, 0.13583250914468514, 0.12183102787103783, 0.10404529497511705, 0.12155147909505926, 0.11161737498757207, 0.13566255680944728, 0.13309452614576944, 0.14253313168169335, 0.10277272302788698, 0.11056387527357237, 0.1397652820307307, 0.12202565881943339, 0.13084970314919397, 0.1147862561070846, 0.1107156460462495, 0.09995298490831994, 0.10050844281822302, 0.9308272990481794, 0.9504949701555323, 0.9811165720089283, 0.8895067268384018, 0.9408710023392403, 0.9432442402822587, 0.9560733825932358, 0.9605358821067621, 0.9335584020145802, 0.5122660725578172, 0.5958772319256793, 0.5322793929517171, 0.5916223442813854, 0.5962377974045365, 0.678995085032133, 0.4755485481163809, 0.611284500745387, 0.6076148974411232, 0.8472652261287323, 0.8327665107298321, 0.805940854875559, 0.8202599398726511, 0.8380067227205756, 0.7967428263023542, 0.7747845915458351, 0.724097987386366, 0.8400537185005408, 0.40217369740982223, 0.18484126740458728, 0.36324051532467916, 0.37263017825860756, 0.20392326655030668, 0.41237192075948637, 0.3877440003099134, 0.2856761126710259, 0.3532608298652462, 0.3513102896224257, 0.21481712428264177, 0.2222788220777453, 0.29745499244108997, 0.1793286168051631, 0.22107342973119593, 0.2203450980563506, 0.32266939191309374, 0.43019538881702224, 0.3911602034296203, 0.5774387066263849, 0.48372916708951874, 0.2695686529190173, 0.33243437736866177, 0.40965558842833816, 0.6195002512470358, 0.3893141339666034, 0.3432472999933732, 0.5981410308120142, 0.5898843981655413, 0.7716245008655335, 0.5675668800912007, 0.33000017539178916, 0.6492708360853281, 0.5550601286062737, 0.7212557454319156, 0.6263478190421081, 0.1119579449124063, 0.23667253698061974, 0.2531368640355437, 0.3970862646124953, 0.1677008461223135, 0.13531017600578343, 0.2482487719050257, 0.14463749950973293, 0.12877118481664707, 0.36600715857411137, 0.3882310737730873, 0.29618786249399975, 0.45837274139040207, 0.5503106267937234, 0.3740273380776381, 0.3592493850333405, 0.2952051198575746, 0.37013075102967874, 0.750211501266788, 0.6666848209869163, 0.8116452718924732, 0.6430141624805874, 0.6515772159861947, 0.6732183674250557, 0.7595936637040608, 0.7542405270345075, 0.7362578781754887, 0.10952760241339854, 0.09747974746612997, 0.09881545004929926, 0.1050489895048855, 0.10220713828883776, 0.09193357941703961, 0.0978309479750844, 0.10876801218323995, 0.08878289143401286, 0.1514075341051615, 0.1327516452974833, 0.17921491165456171, 0.14894524904132433, 0.19931045960284177, 0.18922205595252428, 0.13680241626212442, 0.1803489665926591, 0.1462694853480363, 0.5042799239185823, 0.5566296502946564, 0.4306507622010627, 0.43610913378045735, 0.43789129616785827, 0.39826610120660055, 0.47585532965363087, 0.4564648588947926, 0.42518175752329834, 0.32166276967296914, 0.3514889373439898, 0.40557211227448786, 0.2849455300096645, 0.41406695063959165, 0.42012776184416367, 0.4123723247874548, 0.3978376085516072, 0.3542714761047776, 0.19650293233862182, 0.21438895488834142, 0.19605126648810656, 0.1945187066916556, 0.18776672033534592, 0.19023493490633725, 0.1865622335841266, 0.18682236690566367, 0.19951383700140324, 0.20665804903689056, 0.2775759957453616, 0.4478153759030584, 0.2164917410508882, 0.17873148994872046, 0.3428392679693817, 0.18711120661575587, 0.22613832652150356, 0.2631587376403516, 0.2083562319990443, 0.18259649389037402, 0.193431091961622, 0.829689805202301, 0.6978220523817482, 0.19641151775048604, 0.18580525236827816, 0.18014237990605797, 0.6759299998859297, 0.8063676359307129, 0.20185428942065176, 0.2068840166925202, 0.2064155591553115, 0.19895542901668328, 0.5987939544125035, 0.16433429851850268, 0.20842469407016762, 0.20376748218246887, 0.1830568662841463, 0.18714197816037104, 0.18534510948682426, 0.20206754668409033, 0.184903926747361, 0.17763988418342014, 0.18923074738169265, 0.19173453862244738, 0.18889295019318675, 0.07929852808174676, 0.08520227820452109, 0.08239062509294459, 0.08758241093881602, 0.07637705080278523, 0.0853394160128561, 0.09327844562796705, 0.07336447272886404, 0.07660269930659092]}, "mutation_prompt": null}
{"id": "544ed318-1972-40b4-a716-8ac6ff722655", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 6 * self.dim  # Further reduced population size for faster execution\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.F = 0.6  # Adjusted mutation factor for initial diversity\n        self.CR = 0.9  # Higher crossover rate for increased recombination\n        self.evaluations = 0\n        self.archive = []\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n\n                # Check archive for potential new base vector\n                if len(self.archive) > 0 and np.random.rand() < 0.1:\n                    base_vector = self.archive[np.random.randint(len(self.archive))]\n                else:\n                    base_vector = self.population[a]\n\n                # Mutation with potential archive vector\n                mutant = base_vector + self.F * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, *self.bounds)\n                \n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    # Archive successful mutants\n                    self.archive.append(trial)\n\n                # Dynamic adjustment based on fitness improvement\n                if trial_fitness < self.fitness.mean():\n                    self.F = np.clip(self.F + 0.01 * (0.5 - np.random.rand()), 0.1, 0.9)\n                    self.CR = np.clip(self.CR + 0.01 * (0.5 - np.random.rand()), 0.5, 1.0)\n\n        return self.population[np.argmin(self.fitness)]\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1", "name": "EnhancedMetaheuristicOptimizer", "description": "This algorithm enhances Differential Evolution by incorporating a dynamic archiving mechanism and adaptive scaling, focusing on reducing redundant evaluations and improving convergence speed.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e2479e79-b69d-45fa-b91b-0b20431aaa1a", "metadata": {"aucs": [0.8460838787318541, 0.8662210773214738, 0.8164573346626365, 0.8474260970208942, 0.8564395667445609, 0.8345479318139788, 0.8540491208796602, 0.8317501307836201, 0.8398020747513537, 0.6862735300194087, 0.7312545135338542, 0.7337114467926564, 0.7393741637085585, 0.7233185285708336, 0.6567521728063315, 0.7418944441517743, 0.7133538515172579, 0.7489585245586282, 0.21512818503010733, 0.13583250914468514, 0.12183102787103783, 0.10404529497511705, 0.12155147909505926, 0.11161737498757207, 0.13566255680944728, 0.13309452614576944, 0.14253313168169335, 0.10277272302788698, 0.11056387527357237, 0.1397652820307307, 0.12202565881943339, 0.13084970314919397, 0.1147862561070846, 0.1107156460462495, 0.09995298490831994, 0.10050844281822302, 0.9308272990481794, 0.9504949701555323, 0.9811165720089283, 0.8895067268384018, 0.9408710023392403, 0.9432442402822587, 0.9560733825932358, 0.9605358821067621, 0.9335584020145802, 0.5122660725578172, 0.5958772319256793, 0.5322793929517171, 0.5916223442813854, 0.5962377974045365, 0.678995085032133, 0.4755485481163809, 0.611284500745387, 0.6076148974411232, 0.8472652261287323, 0.8327665107298321, 0.805940854875559, 0.8202599398726511, 0.8380067227205756, 0.7967428263023542, 0.7747845915458351, 0.724097987386366, 0.8400537185005408, 0.40217369740982223, 0.18484126740458728, 0.36324051532467916, 0.37263017825860756, 0.20392326655030668, 0.41237192075948637, 0.3877440003099134, 0.2856761126710259, 0.3532608298652462, 0.3513102896224257, 0.21481712428264177, 0.2222788220777453, 0.29745499244108997, 0.1793286168051631, 0.22107342973119593, 0.2203450980563506, 0.32266939191309374, 0.43019538881702224, 0.3911602034296203, 0.5774387066263849, 0.48372916708951874, 0.2695686529190173, 0.33243437736866177, 0.40965558842833816, 0.6195002512470358, 0.3893141339666034, 0.3432472999933732, 0.5981410308120142, 0.5898843981655413, 0.7716245008655335, 0.5675668800912007, 0.33000017539178916, 0.6492708360853281, 0.5550601286062737, 0.7212557454319156, 0.6263478190421081, 0.1119579449124063, 0.23667253698061974, 0.2531368640355437, 0.3970862646124953, 0.1677008461223135, 0.13531017600578343, 0.2482487719050257, 0.14463749950973293, 0.12877118481664707, 0.36600715857411137, 0.3882310737730873, 0.29618786249399975, 0.45837274139040207, 0.5503106267937234, 0.3740273380776381, 0.3592493850333405, 0.2952051198575746, 0.37013075102967874, 0.750211501266788, 0.6666848209869163, 0.8116452718924732, 0.6430141624805874, 0.6515772159861947, 0.6732183674250557, 0.7595936637040608, 0.7542405270345075, 0.7362578781754887, 0.10952760241339854, 0.09747974746612997, 0.09881545004929926, 0.1050489895048855, 0.10220713828883776, 0.09193357941703961, 0.0978309479750844, 0.10876801218323995, 0.08878289143401286, 0.1514075341051615, 0.1327516452974833, 0.17921491165456171, 0.14894524904132433, 0.19931045960284177, 0.18922205595252428, 0.13680241626212442, 0.1803489665926591, 0.1462694853480363, 0.5042799239185823, 0.5566296502946564, 0.4306507622010627, 0.43610913378045735, 0.43789129616785827, 0.39826610120660055, 0.47585532965363087, 0.4564648588947926, 0.42518175752329834, 0.32166276967296914, 0.3514889373439898, 0.40557211227448786, 0.2849455300096645, 0.41406695063959165, 0.42012776184416367, 0.4123723247874548, 0.3978376085516072, 0.3542714761047776, 0.19650293233862182, 0.21438895488834142, 0.19605126648810656, 0.1945187066916556, 0.18776672033534592, 0.19023493490633725, 0.1865622335841266, 0.18682236690566367, 0.19951383700140324, 0.20665804903689056, 0.2775759957453616, 0.4478153759030584, 0.2164917410508882, 0.17873148994872046, 0.3428392679693817, 0.18711120661575587, 0.22613832652150356, 0.2631587376403516, 0.2083562319990443, 0.18259649389037402, 0.193431091961622, 0.829689805202301, 0.6978220523817482, 0.19641151775048604, 0.18580525236827816, 0.18014237990605797, 0.6759299998859297, 0.8063676359307129, 0.20185428942065176, 0.2068840166925202, 0.2064155591553115, 0.19895542901668328, 0.5987939544125035, 0.16433429851850268, 0.20842469407016762, 0.20376748218246887, 0.1830568662841463, 0.18714197816037104, 0.18534510948682426, 0.20206754668409033, 0.184903926747361, 0.17763988418342014, 0.18923074738169265, 0.19173453862244738, 0.18889295019318675, 0.07929852808174676, 0.08520227820452109, 0.08239062509294459, 0.08758241093881602, 0.07637705080278523, 0.0853394160128561, 0.09327844562796705, 0.07336447272886404, 0.07660269930659092]}, "mutation_prompt": null}
{"id": "7658957a-0a2a-46ff-b365-d58a60d27fe3", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 6 * self.dim  # Further reduced population size for faster execution\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.F = 0.6  # Adjusted mutation factor for initial diversity\n        self.CR = 0.9  # Higher crossover rate for increased recombination\n        self.evaluations = 0\n        self.archive = []\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n\n                # Check archive for potential new base vector\n                if len(self.archive) > 0 and np.random.rand() < 0.1:\n                    base_vector = self.archive[np.random.randint(len(self.archive))]\n                else:\n                    base_vector = self.population[a]\n\n                # Mutation with potential archive vector\n                mutant = base_vector + self.F * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, *self.bounds)\n                \n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    # Archive successful mutants\n                    self.archive.append(trial)\n\n                # Dynamic adjustment based on fitness improvement\n                if trial_fitness < self.fitness.mean():\n                    self.F = np.clip(self.F + 0.01 * (0.5 - np.random.rand()), 0.1, 0.9)\n                    self.CR = np.clip(self.CR + 0.01 * (0.5 - np.random.rand()), 0.5, 1.0)\n\n        return self.population[np.argmin(self.fitness)]\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1", "name": "EnhancedMetaheuristicOptimizer", "description": "This algorithm enhances Differential Evolution by incorporating a dynamic archiving mechanism and adaptive scaling, focusing on reducing redundant evaluations and improving convergence speed.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e2479e79-b69d-45fa-b91b-0b20431aaa1a", "metadata": {"aucs": [0.8460838787318541, 0.8662210773214738, 0.8164573346626365, 0.8474260970208942, 0.8564395667445609, 0.8345479318139788, 0.8540491208796602, 0.8317501307836201, 0.8398020747513537, 0.6862735300194087, 0.7312545135338542, 0.7337114467926564, 0.7393741637085585, 0.7233185285708336, 0.6567521728063315, 0.7418944441517743, 0.7133538515172579, 0.7489585245586282, 0.21512818503010733, 0.13583250914468514, 0.12183102787103783, 0.10404529497511705, 0.12155147909505926, 0.11161737498757207, 0.13566255680944728, 0.13309452614576944, 0.14253313168169335, 0.10277272302788698, 0.11056387527357237, 0.1397652820307307, 0.12202565881943339, 0.13084970314919397, 0.1147862561070846, 0.1107156460462495, 0.09995298490831994, 0.10050844281822302, 0.9308272990481794, 0.9504949701555323, 0.9811165720089283, 0.8895067268384018, 0.9408710023392403, 0.9432442402822587, 0.9560733825932358, 0.9605358821067621, 0.9335584020145802, 0.5122660725578172, 0.5958772319256793, 0.5322793929517171, 0.5916223442813854, 0.5962377974045365, 0.678995085032133, 0.4755485481163809, 0.611284500745387, 0.6076148974411232, 0.8472652261287323, 0.8327665107298321, 0.805940854875559, 0.8202599398726511, 0.8380067227205756, 0.7967428263023542, 0.7747845915458351, 0.724097987386366, 0.8400537185005408, 0.40217369740982223, 0.18484126740458728, 0.36324051532467916, 0.37263017825860756, 0.20392326655030668, 0.41237192075948637, 0.3877440003099134, 0.2856761126710259, 0.3532608298652462, 0.3513102896224257, 0.21481712428264177, 0.2222788220777453, 0.29745499244108997, 0.1793286168051631, 0.22107342973119593, 0.2203450980563506, 0.32266939191309374, 0.43019538881702224, 0.3911602034296203, 0.5774387066263849, 0.48372916708951874, 0.2695686529190173, 0.33243437736866177, 0.40965558842833816, 0.6195002512470358, 0.3893141339666034, 0.3432472999933732, 0.5981410308120142, 0.5898843981655413, 0.7716245008655335, 0.5675668800912007, 0.33000017539178916, 0.6492708360853281, 0.5550601286062737, 0.7212557454319156, 0.6263478190421081, 0.1119579449124063, 0.23667253698061974, 0.2531368640355437, 0.3970862646124953, 0.1677008461223135, 0.13531017600578343, 0.2482487719050257, 0.14463749950973293, 0.12877118481664707, 0.36600715857411137, 0.3882310737730873, 0.29618786249399975, 0.45837274139040207, 0.5503106267937234, 0.3740273380776381, 0.3592493850333405, 0.2952051198575746, 0.37013075102967874, 0.750211501266788, 0.6666848209869163, 0.8116452718924732, 0.6430141624805874, 0.6515772159861947, 0.6732183674250557, 0.7595936637040608, 0.7542405270345075, 0.7362578781754887, 0.10952760241339854, 0.09747974746612997, 0.09881545004929926, 0.1050489895048855, 0.10220713828883776, 0.09193357941703961, 0.0978309479750844, 0.10876801218323995, 0.08878289143401286, 0.1514075341051615, 0.1327516452974833, 0.17921491165456171, 0.14894524904132433, 0.19931045960284177, 0.18922205595252428, 0.13680241626212442, 0.1803489665926591, 0.1462694853480363, 0.5042799239185823, 0.5566296502946564, 0.4306507622010627, 0.43610913378045735, 0.43789129616785827, 0.39826610120660055, 0.47585532965363087, 0.4564648588947926, 0.42518175752329834, 0.32166276967296914, 0.3514889373439898, 0.40557211227448786, 0.2849455300096645, 0.41406695063959165, 0.42012776184416367, 0.4123723247874548, 0.3978376085516072, 0.3542714761047776, 0.19650293233862182, 0.21438895488834142, 0.19605126648810656, 0.1945187066916556, 0.18776672033534592, 0.19023493490633725, 0.1865622335841266, 0.18682236690566367, 0.19951383700140324, 0.20665804903689056, 0.2775759957453616, 0.4478153759030584, 0.2164917410508882, 0.17873148994872046, 0.3428392679693817, 0.18711120661575587, 0.22613832652150356, 0.2631587376403516, 0.2083562319990443, 0.18259649389037402, 0.193431091961622, 0.829689805202301, 0.6978220523817482, 0.19641151775048604, 0.18580525236827816, 0.18014237990605797, 0.6759299998859297, 0.8063676359307129, 0.20185428942065176, 0.2068840166925202, 0.2064155591553115, 0.19895542901668328, 0.5987939544125035, 0.16433429851850268, 0.20842469407016762, 0.20376748218246887, 0.1830568662841463, 0.18714197816037104, 0.18534510948682426, 0.20206754668409033, 0.184903926747361, 0.17763988418342014, 0.18923074738169265, 0.19173453862244738, 0.18889295019318675, 0.07929852808174676, 0.08520227820452109, 0.08239062509294459, 0.08758241093881602, 0.07637705080278523, 0.0853394160128561, 0.09327844562796705, 0.07336447272886404, 0.07660269930659092]}, "mutation_prompt": null}
{"id": "ef9f718f-3593-4d41-a298-af3908bdbb88", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 6 * self.dim  # Further reduced population size for faster execution\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.F = 0.6  # Adjusted mutation factor for initial diversity\n        self.CR = 0.9  # Higher crossover rate for increased recombination\n        self.evaluations = 0\n        self.archive = []\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n\n                # Check archive for potential new base vector\n                if len(self.archive) > 0 and np.random.rand() < 0.1:\n                    base_vector = self.archive[np.random.randint(len(self.archive))]\n                else:\n                    base_vector = self.population[a]\n\n                # Mutation with potential archive vector\n                mutant = base_vector + self.F * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, *self.bounds)\n                \n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    # Archive successful mutants\n                    self.archive.append(trial)\n\n                # Dynamic adjustment based on fitness improvement\n                if trial_fitness < self.fitness.mean():\n                    self.F = np.clip(self.F + 0.01 * (0.5 - np.random.rand()), 0.1, 0.9)\n                    self.CR = np.clip(self.CR + 0.01 * (0.5 - np.random.rand()), 0.5, 1.0)\n\n        return self.population[np.argmin(self.fitness)]\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1", "name": "EnhancedMetaheuristicOptimizer", "description": "This algorithm enhances Differential Evolution by incorporating a dynamic archiving mechanism and adaptive scaling, focusing on reducing redundant evaluations and improving convergence speed.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e2479e79-b69d-45fa-b91b-0b20431aaa1a", "metadata": {"aucs": [0.8460838787318541, 0.8662210773214738, 0.8164573346626365, 0.8474260970208942, 0.8564395667445609, 0.8345479318139788, 0.8540491208796602, 0.8317501307836201, 0.8398020747513537, 0.6862735300194087, 0.7312545135338542, 0.7337114467926564, 0.7393741637085585, 0.7233185285708336, 0.6567521728063315, 0.7418944441517743, 0.7133538515172579, 0.7489585245586282, 0.21512818503010733, 0.13583250914468514, 0.12183102787103783, 0.10404529497511705, 0.12155147909505926, 0.11161737498757207, 0.13566255680944728, 0.13309452614576944, 0.14253313168169335, 0.10277272302788698, 0.11056387527357237, 0.1397652820307307, 0.12202565881943339, 0.13084970314919397, 0.1147862561070846, 0.1107156460462495, 0.09995298490831994, 0.10050844281822302, 0.9308272990481794, 0.9504949701555323, 0.9811165720089283, 0.8895067268384018, 0.9408710023392403, 0.9432442402822587, 0.9560733825932358, 0.9605358821067621, 0.9335584020145802, 0.5122660725578172, 0.5958772319256793, 0.5322793929517171, 0.5916223442813854, 0.5962377974045365, 0.678995085032133, 0.4755485481163809, 0.611284500745387, 0.6076148974411232, 0.8472652261287323, 0.8327665107298321, 0.805940854875559, 0.8202599398726511, 0.8380067227205756, 0.7967428263023542, 0.7747845915458351, 0.724097987386366, 0.8400537185005408, 0.40217369740982223, 0.18484126740458728, 0.36324051532467916, 0.37263017825860756, 0.20392326655030668, 0.41237192075948637, 0.3877440003099134, 0.2856761126710259, 0.3532608298652462, 0.3513102896224257, 0.21481712428264177, 0.2222788220777453, 0.29745499244108997, 0.1793286168051631, 0.22107342973119593, 0.2203450980563506, 0.32266939191309374, 0.43019538881702224, 0.3911602034296203, 0.5774387066263849, 0.48372916708951874, 0.2695686529190173, 0.33243437736866177, 0.40965558842833816, 0.6195002512470358, 0.3893141339666034, 0.3432472999933732, 0.5981410308120142, 0.5898843981655413, 0.7716245008655335, 0.5675668800912007, 0.33000017539178916, 0.6492708360853281, 0.5550601286062737, 0.7212557454319156, 0.6263478190421081, 0.1119579449124063, 0.23667253698061974, 0.2531368640355437, 0.3970862646124953, 0.1677008461223135, 0.13531017600578343, 0.2482487719050257, 0.14463749950973293, 0.12877118481664707, 0.36600715857411137, 0.3882310737730873, 0.29618786249399975, 0.45837274139040207, 0.5503106267937234, 0.3740273380776381, 0.3592493850333405, 0.2952051198575746, 0.37013075102967874, 0.750211501266788, 0.6666848209869163, 0.8116452718924732, 0.6430141624805874, 0.6515772159861947, 0.6732183674250557, 0.7595936637040608, 0.7542405270345075, 0.7362578781754887, 0.10952760241339854, 0.09747974746612997, 0.09881545004929926, 0.1050489895048855, 0.10220713828883776, 0.09193357941703961, 0.0978309479750844, 0.10876801218323995, 0.08878289143401286, 0.1514075341051615, 0.1327516452974833, 0.17921491165456171, 0.14894524904132433, 0.19931045960284177, 0.18922205595252428, 0.13680241626212442, 0.1803489665926591, 0.1462694853480363, 0.5042799239185823, 0.5566296502946564, 0.4306507622010627, 0.43610913378045735, 0.43789129616785827, 0.39826610120660055, 0.47585532965363087, 0.4564648588947926, 0.42518175752329834, 0.32166276967296914, 0.3514889373439898, 0.40557211227448786, 0.2849455300096645, 0.41406695063959165, 0.42012776184416367, 0.4123723247874548, 0.3978376085516072, 0.3542714761047776, 0.19650293233862182, 0.21438895488834142, 0.19605126648810656, 0.1945187066916556, 0.18776672033534592, 0.19023493490633725, 0.1865622335841266, 0.18682236690566367, 0.19951383700140324, 0.20665804903689056, 0.2775759957453616, 0.4478153759030584, 0.2164917410508882, 0.17873148994872046, 0.3428392679693817, 0.18711120661575587, 0.22613832652150356, 0.2631587376403516, 0.2083562319990443, 0.18259649389037402, 0.193431091961622, 0.829689805202301, 0.6978220523817482, 0.19641151775048604, 0.18580525236827816, 0.18014237990605797, 0.6759299998859297, 0.8063676359307129, 0.20185428942065176, 0.2068840166925202, 0.2064155591553115, 0.19895542901668328, 0.5987939544125035, 0.16433429851850268, 0.20842469407016762, 0.20376748218246887, 0.1830568662841463, 0.18714197816037104, 0.18534510948682426, 0.20206754668409033, 0.184903926747361, 0.17763988418342014, 0.18923074738169265, 0.19173453862244738, 0.18889295019318675, 0.07929852808174676, 0.08520227820452109, 0.08239062509294459, 0.08758241093881602, 0.07637705080278523, 0.0853394160128561, 0.09327844562796705, 0.07336447272886404, 0.07660269930659092]}, "mutation_prompt": null}
{"id": "98123424-0afc-43d4-8ce9-4b0c25373276", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 6 * self.dim  # Further reduced population size for faster execution\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.F = 0.6  # Adjusted mutation factor for initial diversity\n        self.CR = 0.9  # Higher crossover rate for increased recombination\n        self.evaluations = 0\n        self.archive = []\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n\n                # Check archive for potential new base vector\n                if len(self.archive) > 0 and np.random.rand() < 0.1:\n                    base_vector = self.archive[np.random.randint(len(self.archive))]\n                else:\n                    base_vector = self.population[a]\n\n                # Mutation with potential archive vector\n                mutant = base_vector + self.F * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, *self.bounds)\n                \n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    # Archive successful mutants\n                    self.archive.append(trial)\n\n                # Dynamic adjustment based on fitness improvement\n                if trial_fitness < self.fitness.mean():\n                    self.F = np.clip(self.F + 0.01 * (0.5 - np.random.rand()), 0.1, 0.9)\n                    self.CR = np.clip(self.CR + 0.01 * (0.5 - np.random.rand()), 0.5, 1.0)\n\n        return self.population[np.argmin(self.fitness)]\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1", "name": "EnhancedMetaheuristicOptimizer", "description": "This algorithm enhances Differential Evolution by incorporating a dynamic archiving mechanism and adaptive scaling, focusing on reducing redundant evaluations and improving convergence speed.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e2479e79-b69d-45fa-b91b-0b20431aaa1a", "metadata": {"aucs": [0.8460838787318541, 0.8662210773214738, 0.8164573346626365, 0.8474260970208942, 0.8564395667445609, 0.8345479318139788, 0.8540491208796602, 0.8317501307836201, 0.8398020747513537, 0.6862735300194087, 0.7312545135338542, 0.7337114467926564, 0.7393741637085585, 0.7233185285708336, 0.6567521728063315, 0.7418944441517743, 0.7133538515172579, 0.7489585245586282, 0.21512818503010733, 0.13583250914468514, 0.12183102787103783, 0.10404529497511705, 0.12155147909505926, 0.11161737498757207, 0.13566255680944728, 0.13309452614576944, 0.14253313168169335, 0.10277272302788698, 0.11056387527357237, 0.1397652820307307, 0.12202565881943339, 0.13084970314919397, 0.1147862561070846, 0.1107156460462495, 0.09995298490831994, 0.10050844281822302, 0.9308272990481794, 0.9504949701555323, 0.9811165720089283, 0.8895067268384018, 0.9408710023392403, 0.9432442402822587, 0.9560733825932358, 0.9605358821067621, 0.9335584020145802, 0.5122660725578172, 0.5958772319256793, 0.5322793929517171, 0.5916223442813854, 0.5962377974045365, 0.678995085032133, 0.4755485481163809, 0.611284500745387, 0.6076148974411232, 0.8472652261287323, 0.8327665107298321, 0.805940854875559, 0.8202599398726511, 0.8380067227205756, 0.7967428263023542, 0.7747845915458351, 0.724097987386366, 0.8400537185005408, 0.40217369740982223, 0.18484126740458728, 0.36324051532467916, 0.37263017825860756, 0.20392326655030668, 0.41237192075948637, 0.3877440003099134, 0.2856761126710259, 0.3532608298652462, 0.3513102896224257, 0.21481712428264177, 0.2222788220777453, 0.29745499244108997, 0.1793286168051631, 0.22107342973119593, 0.2203450980563506, 0.32266939191309374, 0.43019538881702224, 0.3911602034296203, 0.5774387066263849, 0.48372916708951874, 0.2695686529190173, 0.33243437736866177, 0.40965558842833816, 0.6195002512470358, 0.3893141339666034, 0.3432472999933732, 0.5981410308120142, 0.5898843981655413, 0.7716245008655335, 0.5675668800912007, 0.33000017539178916, 0.6492708360853281, 0.5550601286062737, 0.7212557454319156, 0.6263478190421081, 0.1119579449124063, 0.23667253698061974, 0.2531368640355437, 0.3970862646124953, 0.1677008461223135, 0.13531017600578343, 0.2482487719050257, 0.14463749950973293, 0.12877118481664707, 0.36600715857411137, 0.3882310737730873, 0.29618786249399975, 0.45837274139040207, 0.5503106267937234, 0.3740273380776381, 0.3592493850333405, 0.2952051198575746, 0.37013075102967874, 0.750211501266788, 0.6666848209869163, 0.8116452718924732, 0.6430141624805874, 0.6515772159861947, 0.6732183674250557, 0.7595936637040608, 0.7542405270345075, 0.7362578781754887, 0.10952760241339854, 0.09747974746612997, 0.09881545004929926, 0.1050489895048855, 0.10220713828883776, 0.09193357941703961, 0.0978309479750844, 0.10876801218323995, 0.08878289143401286, 0.1514075341051615, 0.1327516452974833, 0.17921491165456171, 0.14894524904132433, 0.19931045960284177, 0.18922205595252428, 0.13680241626212442, 0.1803489665926591, 0.1462694853480363, 0.5042799239185823, 0.5566296502946564, 0.4306507622010627, 0.43610913378045735, 0.43789129616785827, 0.39826610120660055, 0.47585532965363087, 0.4564648588947926, 0.42518175752329834, 0.32166276967296914, 0.3514889373439898, 0.40557211227448786, 0.2849455300096645, 0.41406695063959165, 0.42012776184416367, 0.4123723247874548, 0.3978376085516072, 0.3542714761047776, 0.19650293233862182, 0.21438895488834142, 0.19605126648810656, 0.1945187066916556, 0.18776672033534592, 0.19023493490633725, 0.1865622335841266, 0.18682236690566367, 0.19951383700140324, 0.20665804903689056, 0.2775759957453616, 0.4478153759030584, 0.2164917410508882, 0.17873148994872046, 0.3428392679693817, 0.18711120661575587, 0.22613832652150356, 0.2631587376403516, 0.2083562319990443, 0.18259649389037402, 0.193431091961622, 0.829689805202301, 0.6978220523817482, 0.19641151775048604, 0.18580525236827816, 0.18014237990605797, 0.6759299998859297, 0.8063676359307129, 0.20185428942065176, 0.2068840166925202, 0.2064155591553115, 0.19895542901668328, 0.5987939544125035, 0.16433429851850268, 0.20842469407016762, 0.20376748218246887, 0.1830568662841463, 0.18714197816037104, 0.18534510948682426, 0.20206754668409033, 0.184903926747361, 0.17763988418342014, 0.18923074738169265, 0.19173453862244738, 0.18889295019318675, 0.07929852808174676, 0.08520227820452109, 0.08239062509294459, 0.08758241093881602, 0.07637705080278523, 0.0853394160128561, 0.09327844562796705, 0.07336447272886404, 0.07660269930659092]}, "mutation_prompt": null}
{"id": "506e0aef-f230-42a5-8f06-d6455bdef867", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 6 * self.dim  # Further reduced population size for faster execution\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.F = 0.6  # Adjusted mutation factor for initial diversity\n        self.CR = 0.9  # Higher crossover rate for increased recombination\n        self.evaluations = 0\n        self.archive = []\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n\n                # Check archive for potential new base vector\n                if len(self.archive) > 0 and np.random.rand() < 0.1:\n                    base_vector = self.archive[np.random.randint(len(self.archive))]\n                else:\n                    base_vector = self.population[a]\n\n                # Mutation with potential archive vector\n                mutant = base_vector + self.F * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, *self.bounds)\n                \n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    # Archive successful mutants\n                    self.archive.append(trial)\n\n                # Dynamic adjustment based on fitness improvement\n                if trial_fitness < self.fitness.mean():\n                    self.F = np.clip(self.F + 0.01 * (0.5 - np.random.rand()), 0.1, 0.9)\n                    self.CR = np.clip(self.CR + 0.01 * (0.5 - np.random.rand()), 0.5, 1.0)\n\n        return self.population[np.argmin(self.fitness)]\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1", "name": "EnhancedMetaheuristicOptimizer", "description": "This algorithm enhances Differential Evolution by incorporating a dynamic archiving mechanism and adaptive scaling, focusing on reducing redundant evaluations and improving convergence speed.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e2479e79-b69d-45fa-b91b-0b20431aaa1a", "metadata": {"aucs": [0.8460838787318541, 0.8662210773214738, 0.8164573346626365, 0.8474260970208942, 0.8564395667445609, 0.8345479318139788, 0.8540491208796602, 0.8317501307836201, 0.8398020747513537, 0.6862735300194087, 0.7312545135338542, 0.7337114467926564, 0.7393741637085585, 0.7233185285708336, 0.6567521728063315, 0.7418944441517743, 0.7133538515172579, 0.7489585245586282, 0.21512818503010733, 0.13583250914468514, 0.12183102787103783, 0.10404529497511705, 0.12155147909505926, 0.11161737498757207, 0.13566255680944728, 0.13309452614576944, 0.14253313168169335, 0.10277272302788698, 0.11056387527357237, 0.1397652820307307, 0.12202565881943339, 0.13084970314919397, 0.1147862561070846, 0.1107156460462495, 0.09995298490831994, 0.10050844281822302, 0.9308272990481794, 0.9504949701555323, 0.9811165720089283, 0.8895067268384018, 0.9408710023392403, 0.9432442402822587, 0.9560733825932358, 0.9605358821067621, 0.9335584020145802, 0.5122660725578172, 0.5958772319256793, 0.5322793929517171, 0.5916223442813854, 0.5962377974045365, 0.678995085032133, 0.4755485481163809, 0.611284500745387, 0.6076148974411232, 0.8472652261287323, 0.8327665107298321, 0.805940854875559, 0.8202599398726511, 0.8380067227205756, 0.7967428263023542, 0.7747845915458351, 0.724097987386366, 0.8400537185005408, 0.40217369740982223, 0.18484126740458728, 0.36324051532467916, 0.37263017825860756, 0.20392326655030668, 0.41237192075948637, 0.3877440003099134, 0.2856761126710259, 0.3532608298652462, 0.3513102896224257, 0.21481712428264177, 0.2222788220777453, 0.29745499244108997, 0.1793286168051631, 0.22107342973119593, 0.2203450980563506, 0.32266939191309374, 0.43019538881702224, 0.3911602034296203, 0.5774387066263849, 0.48372916708951874, 0.2695686529190173, 0.33243437736866177, 0.40965558842833816, 0.6195002512470358, 0.3893141339666034, 0.3432472999933732, 0.5981410308120142, 0.5898843981655413, 0.7716245008655335, 0.5675668800912007, 0.33000017539178916, 0.6492708360853281, 0.5550601286062737, 0.7212557454319156, 0.6263478190421081, 0.1119579449124063, 0.23667253698061974, 0.2531368640355437, 0.3970862646124953, 0.1677008461223135, 0.13531017600578343, 0.2482487719050257, 0.14463749950973293, 0.12877118481664707, 0.36600715857411137, 0.3882310737730873, 0.29618786249399975, 0.45837274139040207, 0.5503106267937234, 0.3740273380776381, 0.3592493850333405, 0.2952051198575746, 0.37013075102967874, 0.750211501266788, 0.6666848209869163, 0.8116452718924732, 0.6430141624805874, 0.6515772159861947, 0.6732183674250557, 0.7595936637040608, 0.7542405270345075, 0.7362578781754887, 0.10952760241339854, 0.09747974746612997, 0.09881545004929926, 0.1050489895048855, 0.10220713828883776, 0.09193357941703961, 0.0978309479750844, 0.10876801218323995, 0.08878289143401286, 0.1514075341051615, 0.1327516452974833, 0.17921491165456171, 0.14894524904132433, 0.19931045960284177, 0.18922205595252428, 0.13680241626212442, 0.1803489665926591, 0.1462694853480363, 0.5042799239185823, 0.5566296502946564, 0.4306507622010627, 0.43610913378045735, 0.43789129616785827, 0.39826610120660055, 0.47585532965363087, 0.4564648588947926, 0.42518175752329834, 0.32166276967296914, 0.3514889373439898, 0.40557211227448786, 0.2849455300096645, 0.41406695063959165, 0.42012776184416367, 0.4123723247874548, 0.3978376085516072, 0.3542714761047776, 0.19650293233862182, 0.21438895488834142, 0.19605126648810656, 0.1945187066916556, 0.18776672033534592, 0.19023493490633725, 0.1865622335841266, 0.18682236690566367, 0.19951383700140324, 0.20665804903689056, 0.2775759957453616, 0.4478153759030584, 0.2164917410508882, 0.17873148994872046, 0.3428392679693817, 0.18711120661575587, 0.22613832652150356, 0.2631587376403516, 0.2083562319990443, 0.18259649389037402, 0.193431091961622, 0.829689805202301, 0.6978220523817482, 0.19641151775048604, 0.18580525236827816, 0.18014237990605797, 0.6759299998859297, 0.8063676359307129, 0.20185428942065176, 0.2068840166925202, 0.2064155591553115, 0.19895542901668328, 0.5987939544125035, 0.16433429851850268, 0.20842469407016762, 0.20376748218246887, 0.1830568662841463, 0.18714197816037104, 0.18534510948682426, 0.20206754668409033, 0.184903926747361, 0.17763988418342014, 0.18923074738169265, 0.19173453862244738, 0.18889295019318675, 0.07929852808174676, 0.08520227820452109, 0.08239062509294459, 0.08758241093881602, 0.07637705080278523, 0.0853394160128561, 0.09327844562796705, 0.07336447272886404, 0.07660269930659092]}, "mutation_prompt": null}
{"id": "965693a2-eef5-4c23-acbe-33bf3540a402", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 6 * self.dim  # Further reduced population size for faster execution\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.F = 0.6  # Adjusted mutation factor for initial diversity\n        self.CR = 0.9  # Higher crossover rate for increased recombination\n        self.evaluations = 0\n        self.archive = []\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n\n                # Check archive for potential new base vector\n                if len(self.archive) > 0 and np.random.rand() < 0.1:\n                    base_vector = self.archive[np.random.randint(len(self.archive))]\n                else:\n                    base_vector = self.population[a]\n\n                # Mutation with potential archive vector\n                mutant = base_vector + self.F * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, *self.bounds)\n                \n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    # Archive successful mutants\n                    self.archive.append(trial)\n\n                # Dynamic adjustment based on fitness improvement\n                if trial_fitness < self.fitness.mean():\n                    self.F = np.clip(self.F + 0.01 * (0.5 - np.random.rand()), 0.1, 0.9)\n                    self.CR = np.clip(self.CR + 0.01 * (0.5 - np.random.rand()), 0.5, 1.0)\n\n        return self.population[np.argmin(self.fitness)]\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1", "name": "EnhancedMetaheuristicOptimizer", "description": "This algorithm enhances Differential Evolution by incorporating a dynamic archiving mechanism and adaptive scaling, focusing on reducing redundant evaluations and improving convergence speed.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e2479e79-b69d-45fa-b91b-0b20431aaa1a", "metadata": {"aucs": [0.8460838787318541, 0.8662210773214738, 0.8164573346626365, 0.8474260970208942, 0.8564395667445609, 0.8345479318139788, 0.8540491208796602, 0.8317501307836201, 0.8398020747513537, 0.6862735300194087, 0.7312545135338542, 0.7337114467926564, 0.7393741637085585, 0.7233185285708336, 0.6567521728063315, 0.7418944441517743, 0.7133538515172579, 0.7489585245586282, 0.21512818503010733, 0.13583250914468514, 0.12183102787103783, 0.10404529497511705, 0.12155147909505926, 0.11161737498757207, 0.13566255680944728, 0.13309452614576944, 0.14253313168169335, 0.10277272302788698, 0.11056387527357237, 0.1397652820307307, 0.12202565881943339, 0.13084970314919397, 0.1147862561070846, 0.1107156460462495, 0.09995298490831994, 0.10050844281822302, 0.9308272990481794, 0.9504949701555323, 0.9811165720089283, 0.8895067268384018, 0.9408710023392403, 0.9432442402822587, 0.9560733825932358, 0.9605358821067621, 0.9335584020145802, 0.5122660725578172, 0.5958772319256793, 0.5322793929517171, 0.5916223442813854, 0.5962377974045365, 0.678995085032133, 0.4755485481163809, 0.611284500745387, 0.6076148974411232, 0.8472652261287323, 0.8327665107298321, 0.805940854875559, 0.8202599398726511, 0.8380067227205756, 0.7967428263023542, 0.7747845915458351, 0.724097987386366, 0.8400537185005408, 0.40217369740982223, 0.18484126740458728, 0.36324051532467916, 0.37263017825860756, 0.20392326655030668, 0.41237192075948637, 0.3877440003099134, 0.2856761126710259, 0.3532608298652462, 0.3513102896224257, 0.21481712428264177, 0.2222788220777453, 0.29745499244108997, 0.1793286168051631, 0.22107342973119593, 0.2203450980563506, 0.32266939191309374, 0.43019538881702224, 0.3911602034296203, 0.5774387066263849, 0.48372916708951874, 0.2695686529190173, 0.33243437736866177, 0.40965558842833816, 0.6195002512470358, 0.3893141339666034, 0.3432472999933732, 0.5981410308120142, 0.5898843981655413, 0.7716245008655335, 0.5675668800912007, 0.33000017539178916, 0.6492708360853281, 0.5550601286062737, 0.7212557454319156, 0.6263478190421081, 0.1119579449124063, 0.23667253698061974, 0.2531368640355437, 0.3970862646124953, 0.1677008461223135, 0.13531017600578343, 0.2482487719050257, 0.14463749950973293, 0.12877118481664707, 0.36600715857411137, 0.3882310737730873, 0.29618786249399975, 0.45837274139040207, 0.5503106267937234, 0.3740273380776381, 0.3592493850333405, 0.2952051198575746, 0.37013075102967874, 0.750211501266788, 0.6666848209869163, 0.8116452718924732, 0.6430141624805874, 0.6515772159861947, 0.6732183674250557, 0.7595936637040608, 0.7542405270345075, 0.7362578781754887, 0.10952760241339854, 0.09747974746612997, 0.09881545004929926, 0.1050489895048855, 0.10220713828883776, 0.09193357941703961, 0.0978309479750844, 0.10876801218323995, 0.08878289143401286, 0.1514075341051615, 0.1327516452974833, 0.17921491165456171, 0.14894524904132433, 0.19931045960284177, 0.18922205595252428, 0.13680241626212442, 0.1803489665926591, 0.1462694853480363, 0.5042799239185823, 0.5566296502946564, 0.4306507622010627, 0.43610913378045735, 0.43789129616785827, 0.39826610120660055, 0.47585532965363087, 0.4564648588947926, 0.42518175752329834, 0.32166276967296914, 0.3514889373439898, 0.40557211227448786, 0.2849455300096645, 0.41406695063959165, 0.42012776184416367, 0.4123723247874548, 0.3978376085516072, 0.3542714761047776, 0.19650293233862182, 0.21438895488834142, 0.19605126648810656, 0.1945187066916556, 0.18776672033534592, 0.19023493490633725, 0.1865622335841266, 0.18682236690566367, 0.19951383700140324, 0.20665804903689056, 0.2775759957453616, 0.4478153759030584, 0.2164917410508882, 0.17873148994872046, 0.3428392679693817, 0.18711120661575587, 0.22613832652150356, 0.2631587376403516, 0.2083562319990443, 0.18259649389037402, 0.193431091961622, 0.829689805202301, 0.6978220523817482, 0.19641151775048604, 0.18580525236827816, 0.18014237990605797, 0.6759299998859297, 0.8063676359307129, 0.20185428942065176, 0.2068840166925202, 0.2064155591553115, 0.19895542901668328, 0.5987939544125035, 0.16433429851850268, 0.20842469407016762, 0.20376748218246887, 0.1830568662841463, 0.18714197816037104, 0.18534510948682426, 0.20206754668409033, 0.184903926747361, 0.17763988418342014, 0.18923074738169265, 0.19173453862244738, 0.18889295019318675, 0.07929852808174676, 0.08520227820452109, 0.08239062509294459, 0.08758241093881602, 0.07637705080278523, 0.0853394160128561, 0.09327844562796705, 0.07336447272886404, 0.07660269930659092]}, "mutation_prompt": null}
{"id": "69481557-3c9c-428b-b9b7-d0b5fa3b9972", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 6 * self.dim  # Further reduced population size for faster execution\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.F = 0.6  # Adjusted mutation factor for initial diversity\n        self.CR = 0.9  # Higher crossover rate for increased recombination\n        self.evaluations = 0\n        self.archive = []\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n\n                # Check archive for potential new base vector\n                if len(self.archive) > 0 and np.random.rand() < 0.1:\n                    base_vector = self.archive[np.random.randint(len(self.archive))]\n                else:\n                    base_vector = self.population[a]\n\n                # Mutation with potential archive vector\n                mutant = base_vector + self.F * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, *self.bounds)\n                \n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    # Archive successful mutants\n                    self.archive.append(trial)\n\n                # Dynamic adjustment based on fitness improvement\n                if trial_fitness < self.fitness.mean():\n                    self.F = np.clip(self.F + 0.01 * (0.5 - np.random.rand()), 0.1, 0.9)\n                    self.CR = np.clip(self.CR + 0.01 * (0.5 - np.random.rand()), 0.5, 1.0)\n\n        return self.population[np.argmin(self.fitness)]\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1", "name": "EnhancedMetaheuristicOptimizer", "description": "This algorithm enhances Differential Evolution by incorporating a dynamic archiving mechanism and adaptive scaling, focusing on reducing redundant evaluations and improving convergence speed.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e2479e79-b69d-45fa-b91b-0b20431aaa1a", "metadata": {"aucs": [0.8460838787318541, 0.8662210773214738, 0.8164573346626365, 0.8474260970208942, 0.8564395667445609, 0.8345479318139788, 0.8540491208796602, 0.8317501307836201, 0.8398020747513537, 0.6862735300194087, 0.7312545135338542, 0.7337114467926564, 0.7393741637085585, 0.7233185285708336, 0.6567521728063315, 0.7418944441517743, 0.7133538515172579, 0.7489585245586282, 0.21512818503010733, 0.13583250914468514, 0.12183102787103783, 0.10404529497511705, 0.12155147909505926, 0.11161737498757207, 0.13566255680944728, 0.13309452614576944, 0.14253313168169335, 0.10277272302788698, 0.11056387527357237, 0.1397652820307307, 0.12202565881943339, 0.13084970314919397, 0.1147862561070846, 0.1107156460462495, 0.09995298490831994, 0.10050844281822302, 0.9308272990481794, 0.9504949701555323, 0.9811165720089283, 0.8895067268384018, 0.9408710023392403, 0.9432442402822587, 0.9560733825932358, 0.9605358821067621, 0.9335584020145802, 0.5122660725578172, 0.5958772319256793, 0.5322793929517171, 0.5916223442813854, 0.5962377974045365, 0.678995085032133, 0.4755485481163809, 0.611284500745387, 0.6076148974411232, 0.8472652261287323, 0.8327665107298321, 0.805940854875559, 0.8202599398726511, 0.8380067227205756, 0.7967428263023542, 0.7747845915458351, 0.724097987386366, 0.8400537185005408, 0.40217369740982223, 0.18484126740458728, 0.36324051532467916, 0.37263017825860756, 0.20392326655030668, 0.41237192075948637, 0.3877440003099134, 0.2856761126710259, 0.3532608298652462, 0.3513102896224257, 0.21481712428264177, 0.2222788220777453, 0.29745499244108997, 0.1793286168051631, 0.22107342973119593, 0.2203450980563506, 0.32266939191309374, 0.43019538881702224, 0.3911602034296203, 0.5774387066263849, 0.48372916708951874, 0.2695686529190173, 0.33243437736866177, 0.40965558842833816, 0.6195002512470358, 0.3893141339666034, 0.3432472999933732, 0.5981410308120142, 0.5898843981655413, 0.7716245008655335, 0.5675668800912007, 0.33000017539178916, 0.6492708360853281, 0.5550601286062737, 0.7212557454319156, 0.6263478190421081, 0.1119579449124063, 0.23667253698061974, 0.2531368640355437, 0.3970862646124953, 0.1677008461223135, 0.13531017600578343, 0.2482487719050257, 0.14463749950973293, 0.12877118481664707, 0.36600715857411137, 0.3882310737730873, 0.29618786249399975, 0.45837274139040207, 0.5503106267937234, 0.3740273380776381, 0.3592493850333405, 0.2952051198575746, 0.37013075102967874, 0.750211501266788, 0.6666848209869163, 0.8116452718924732, 0.6430141624805874, 0.6515772159861947, 0.6732183674250557, 0.7595936637040608, 0.7542405270345075, 0.7362578781754887, 0.10952760241339854, 0.09747974746612997, 0.09881545004929926, 0.1050489895048855, 0.10220713828883776, 0.09193357941703961, 0.0978309479750844, 0.10876801218323995, 0.08878289143401286, 0.1514075341051615, 0.1327516452974833, 0.17921491165456171, 0.14894524904132433, 0.19931045960284177, 0.18922205595252428, 0.13680241626212442, 0.1803489665926591, 0.1462694853480363, 0.5042799239185823, 0.5566296502946564, 0.4306507622010627, 0.43610913378045735, 0.43789129616785827, 0.39826610120660055, 0.47585532965363087, 0.4564648588947926, 0.42518175752329834, 0.32166276967296914, 0.3514889373439898, 0.40557211227448786, 0.2849455300096645, 0.41406695063959165, 0.42012776184416367, 0.4123723247874548, 0.3978376085516072, 0.3542714761047776, 0.19650293233862182, 0.21438895488834142, 0.19605126648810656, 0.1945187066916556, 0.18776672033534592, 0.19023493490633725, 0.1865622335841266, 0.18682236690566367, 0.19951383700140324, 0.20665804903689056, 0.2775759957453616, 0.4478153759030584, 0.2164917410508882, 0.17873148994872046, 0.3428392679693817, 0.18711120661575587, 0.22613832652150356, 0.2631587376403516, 0.2083562319990443, 0.18259649389037402, 0.193431091961622, 0.829689805202301, 0.6978220523817482, 0.19641151775048604, 0.18580525236827816, 0.18014237990605797, 0.6759299998859297, 0.8063676359307129, 0.20185428942065176, 0.2068840166925202, 0.2064155591553115, 0.19895542901668328, 0.5987939544125035, 0.16433429851850268, 0.20842469407016762, 0.20376748218246887, 0.1830568662841463, 0.18714197816037104, 0.18534510948682426, 0.20206754668409033, 0.184903926747361, 0.17763988418342014, 0.18923074738169265, 0.19173453862244738, 0.18889295019318675, 0.07929852808174676, 0.08520227820452109, 0.08239062509294459, 0.08758241093881602, 0.07637705080278523, 0.0853394160128561, 0.09327844562796705, 0.07336447272886404, 0.07660269930659092]}, "mutation_prompt": null}
{"id": "f6700b9a-a4a1-4f11-a6df-4efb4981fc5e", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 6 * self.dim  # Further reduced population size for faster execution\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.F = 0.6  # Adjusted mutation factor for initial diversity\n        self.CR = 0.9  # Higher crossover rate for increased recombination\n        self.evaluations = 0\n        self.archive = []\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n\n                # Check archive for potential new base vector\n                if len(self.archive) > 0 and np.random.rand() < 0.1:\n                    base_vector = self.archive[np.random.randint(len(self.archive))]\n                else:\n                    base_vector = self.population[a]\n\n                # Mutation with potential archive vector\n                mutant = base_vector + self.F * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, *self.bounds)\n                \n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    # Archive successful mutants\n                    self.archive.append(trial)\n\n                # Dynamic adjustment based on fitness improvement\n                if trial_fitness < self.fitness.mean():\n                    self.F = np.clip(self.F + 0.01 * (0.5 - np.random.rand()), 0.1, 0.9)\n                    self.CR = np.clip(self.CR + 0.01 * (0.5 - np.random.rand()), 0.5, 1.0)\n\n        return self.population[np.argmin(self.fitness)]\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1", "name": "EnhancedMetaheuristicOptimizer", "description": "This algorithm enhances Differential Evolution by incorporating a dynamic archiving mechanism and adaptive scaling, focusing on reducing redundant evaluations and improving convergence speed.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e2479e79-b69d-45fa-b91b-0b20431aaa1a", "metadata": {"aucs": [0.8460838787318541, 0.8662210773214738, 0.8164573346626365, 0.8474260970208942, 0.8564395667445609, 0.8345479318139788, 0.8540491208796602, 0.8317501307836201, 0.8398020747513537, 0.6862735300194087, 0.7312545135338542, 0.7337114467926564, 0.7393741637085585, 0.7233185285708336, 0.6567521728063315, 0.7418944441517743, 0.7133538515172579, 0.7489585245586282, 0.21512818503010733, 0.13583250914468514, 0.12183102787103783, 0.10404529497511705, 0.12155147909505926, 0.11161737498757207, 0.13566255680944728, 0.13309452614576944, 0.14253313168169335, 0.10277272302788698, 0.11056387527357237, 0.1397652820307307, 0.12202565881943339, 0.13084970314919397, 0.1147862561070846, 0.1107156460462495, 0.09995298490831994, 0.10050844281822302, 0.9308272990481794, 0.9504949701555323, 0.9811165720089283, 0.8895067268384018, 0.9408710023392403, 0.9432442402822587, 0.9560733825932358, 0.9605358821067621, 0.9335584020145802, 0.5122660725578172, 0.5958772319256793, 0.5322793929517171, 0.5916223442813854, 0.5962377974045365, 0.678995085032133, 0.4755485481163809, 0.611284500745387, 0.6076148974411232, 0.8472652261287323, 0.8327665107298321, 0.805940854875559, 0.8202599398726511, 0.8380067227205756, 0.7967428263023542, 0.7747845915458351, 0.724097987386366, 0.8400537185005408, 0.40217369740982223, 0.18484126740458728, 0.36324051532467916, 0.37263017825860756, 0.20392326655030668, 0.41237192075948637, 0.3877440003099134, 0.2856761126710259, 0.3532608298652462, 0.3513102896224257, 0.21481712428264177, 0.2222788220777453, 0.29745499244108997, 0.1793286168051631, 0.22107342973119593, 0.2203450980563506, 0.32266939191309374, 0.43019538881702224, 0.3911602034296203, 0.5774387066263849, 0.48372916708951874, 0.2695686529190173, 0.33243437736866177, 0.40965558842833816, 0.6195002512470358, 0.3893141339666034, 0.3432472999933732, 0.5981410308120142, 0.5898843981655413, 0.7716245008655335, 0.5675668800912007, 0.33000017539178916, 0.6492708360853281, 0.5550601286062737, 0.7212557454319156, 0.6263478190421081, 0.1119579449124063, 0.23667253698061974, 0.2531368640355437, 0.3970862646124953, 0.1677008461223135, 0.13531017600578343, 0.2482487719050257, 0.14463749950973293, 0.12877118481664707, 0.36600715857411137, 0.3882310737730873, 0.29618786249399975, 0.45837274139040207, 0.5503106267937234, 0.3740273380776381, 0.3592493850333405, 0.2952051198575746, 0.37013075102967874, 0.750211501266788, 0.6666848209869163, 0.8116452718924732, 0.6430141624805874, 0.6515772159861947, 0.6732183674250557, 0.7595936637040608, 0.7542405270345075, 0.7362578781754887, 0.10952760241339854, 0.09747974746612997, 0.09881545004929926, 0.1050489895048855, 0.10220713828883776, 0.09193357941703961, 0.0978309479750844, 0.10876801218323995, 0.08878289143401286, 0.1514075341051615, 0.1327516452974833, 0.17921491165456171, 0.14894524904132433, 0.19931045960284177, 0.18922205595252428, 0.13680241626212442, 0.1803489665926591, 0.1462694853480363, 0.5042799239185823, 0.5566296502946564, 0.4306507622010627, 0.43610913378045735, 0.43789129616785827, 0.39826610120660055, 0.47585532965363087, 0.4564648588947926, 0.42518175752329834, 0.32166276967296914, 0.3514889373439898, 0.40557211227448786, 0.2849455300096645, 0.41406695063959165, 0.42012776184416367, 0.4123723247874548, 0.3978376085516072, 0.3542714761047776, 0.19650293233862182, 0.21438895488834142, 0.19605126648810656, 0.1945187066916556, 0.18776672033534592, 0.19023493490633725, 0.1865622335841266, 0.18682236690566367, 0.19951383700140324, 0.20665804903689056, 0.2775759957453616, 0.4478153759030584, 0.2164917410508882, 0.17873148994872046, 0.3428392679693817, 0.18711120661575587, 0.22613832652150356, 0.2631587376403516, 0.2083562319990443, 0.18259649389037402, 0.193431091961622, 0.829689805202301, 0.6978220523817482, 0.19641151775048604, 0.18580525236827816, 0.18014237990605797, 0.6759299998859297, 0.8063676359307129, 0.20185428942065176, 0.2068840166925202, 0.2064155591553115, 0.19895542901668328, 0.5987939544125035, 0.16433429851850268, 0.20842469407016762, 0.20376748218246887, 0.1830568662841463, 0.18714197816037104, 0.18534510948682426, 0.20206754668409033, 0.184903926747361, 0.17763988418342014, 0.18923074738169265, 0.19173453862244738, 0.18889295019318675, 0.07929852808174676, 0.08520227820452109, 0.08239062509294459, 0.08758241093881602, 0.07637705080278523, 0.0853394160128561, 0.09327844562796705, 0.07336447272886404, 0.07660269930659092]}, "mutation_prompt": null}
{"id": "9db0e53d-d983-4a60-b229-7f1ca3a5c06b", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 6 * self.dim  # Further reduced population size for faster execution\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.F = 0.6  # Adjusted mutation factor for initial diversity\n        self.CR = 0.9  # Higher crossover rate for increased recombination\n        self.evaluations = 0\n        self.archive = []\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n\n                # Check archive for potential new base vector\n                if len(self.archive) > 0 and np.random.rand() < 0.1:\n                    base_vector = self.archive[np.random.randint(len(self.archive))]\n                else:\n                    base_vector = self.population[a]\n\n                # Mutation with potential archive vector\n                mutant = base_vector + self.F * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, *self.bounds)\n                \n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    # Archive successful mutants\n                    self.archive.append(trial)\n\n                # Dynamic adjustment based on fitness improvement\n                if trial_fitness < self.fitness.mean():\n                    self.F = np.clip(self.F + 0.01 * (0.5 - np.random.rand()), 0.1, 0.9)\n                    self.CR = np.clip(self.CR + 0.01 * (0.5 - np.random.rand()), 0.5, 1.0)\n\n        return self.population[np.argmin(self.fitness)]\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1", "name": "EnhancedMetaheuristicOptimizer", "description": "This algorithm enhances Differential Evolution by incorporating a dynamic archiving mechanism and adaptive scaling, focusing on reducing redundant evaluations and improving convergence speed.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e2479e79-b69d-45fa-b91b-0b20431aaa1a", "metadata": {"aucs": [0.8460838787318541, 0.8662210773214738, 0.8164573346626365, 0.8474260970208942, 0.8564395667445609, 0.8345479318139788, 0.8540491208796602, 0.8317501307836201, 0.8398020747513537, 0.6862735300194087, 0.7312545135338542, 0.7337114467926564, 0.7393741637085585, 0.7233185285708336, 0.6567521728063315, 0.7418944441517743, 0.7133538515172579, 0.7489585245586282, 0.21512818503010733, 0.13583250914468514, 0.12183102787103783, 0.10404529497511705, 0.12155147909505926, 0.11161737498757207, 0.13566255680944728, 0.13309452614576944, 0.14253313168169335, 0.10277272302788698, 0.11056387527357237, 0.1397652820307307, 0.12202565881943339, 0.13084970314919397, 0.1147862561070846, 0.1107156460462495, 0.09995298490831994, 0.10050844281822302, 0.9308272990481794, 0.9504949701555323, 0.9811165720089283, 0.8895067268384018, 0.9408710023392403, 0.9432442402822587, 0.9560733825932358, 0.9605358821067621, 0.9335584020145802, 0.5122660725578172, 0.5958772319256793, 0.5322793929517171, 0.5916223442813854, 0.5962377974045365, 0.678995085032133, 0.4755485481163809, 0.611284500745387, 0.6076148974411232, 0.8472652261287323, 0.8327665107298321, 0.805940854875559, 0.8202599398726511, 0.8380067227205756, 0.7967428263023542, 0.7747845915458351, 0.724097987386366, 0.8400537185005408, 0.40217369740982223, 0.18484126740458728, 0.36324051532467916, 0.37263017825860756, 0.20392326655030668, 0.41237192075948637, 0.3877440003099134, 0.2856761126710259, 0.3532608298652462, 0.3513102896224257, 0.21481712428264177, 0.2222788220777453, 0.29745499244108997, 0.1793286168051631, 0.22107342973119593, 0.2203450980563506, 0.32266939191309374, 0.43019538881702224, 0.3911602034296203, 0.5774387066263849, 0.48372916708951874, 0.2695686529190173, 0.33243437736866177, 0.40965558842833816, 0.6195002512470358, 0.3893141339666034, 0.3432472999933732, 0.5981410308120142, 0.5898843981655413, 0.7716245008655335, 0.5675668800912007, 0.33000017539178916, 0.6492708360853281, 0.5550601286062737, 0.7212557454319156, 0.6263478190421081, 0.1119579449124063, 0.23667253698061974, 0.2531368640355437, 0.3970862646124953, 0.1677008461223135, 0.13531017600578343, 0.2482487719050257, 0.14463749950973293, 0.12877118481664707, 0.36600715857411137, 0.3882310737730873, 0.29618786249399975, 0.45837274139040207, 0.5503106267937234, 0.3740273380776381, 0.3592493850333405, 0.2952051198575746, 0.37013075102967874, 0.750211501266788, 0.6666848209869163, 0.8116452718924732, 0.6430141624805874, 0.6515772159861947, 0.6732183674250557, 0.7595936637040608, 0.7542405270345075, 0.7362578781754887, 0.10952760241339854, 0.09747974746612997, 0.09881545004929926, 0.1050489895048855, 0.10220713828883776, 0.09193357941703961, 0.0978309479750844, 0.10876801218323995, 0.08878289143401286, 0.1514075341051615, 0.1327516452974833, 0.17921491165456171, 0.14894524904132433, 0.19931045960284177, 0.18922205595252428, 0.13680241626212442, 0.1803489665926591, 0.1462694853480363, 0.5042799239185823, 0.5566296502946564, 0.4306507622010627, 0.43610913378045735, 0.43789129616785827, 0.39826610120660055, 0.47585532965363087, 0.4564648588947926, 0.42518175752329834, 0.32166276967296914, 0.3514889373439898, 0.40557211227448786, 0.2849455300096645, 0.41406695063959165, 0.42012776184416367, 0.4123723247874548, 0.3978376085516072, 0.3542714761047776, 0.19650293233862182, 0.21438895488834142, 0.19605126648810656, 0.1945187066916556, 0.18776672033534592, 0.19023493490633725, 0.1865622335841266, 0.18682236690566367, 0.19951383700140324, 0.20665804903689056, 0.2775759957453616, 0.4478153759030584, 0.2164917410508882, 0.17873148994872046, 0.3428392679693817, 0.18711120661575587, 0.22613832652150356, 0.2631587376403516, 0.2083562319990443, 0.18259649389037402, 0.193431091961622, 0.829689805202301, 0.6978220523817482, 0.19641151775048604, 0.18580525236827816, 0.18014237990605797, 0.6759299998859297, 0.8063676359307129, 0.20185428942065176, 0.2068840166925202, 0.2064155591553115, 0.19895542901668328, 0.5987939544125035, 0.16433429851850268, 0.20842469407016762, 0.20376748218246887, 0.1830568662841463, 0.18714197816037104, 0.18534510948682426, 0.20206754668409033, 0.184903926747361, 0.17763988418342014, 0.18923074738169265, 0.19173453862244738, 0.18889295019318675, 0.07929852808174676, 0.08520227820452109, 0.08239062509294459, 0.08758241093881602, 0.07637705080278523, 0.0853394160128561, 0.09327844562796705, 0.07336447272886404, 0.07660269930659092]}, "mutation_prompt": null}
{"id": "14d9fa22-0b80-47af-a706-bcabc2add69f", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 6 * self.dim  # Further reduced population size for faster execution\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.F = 0.6  # Adjusted mutation factor for initial diversity\n        self.CR = 0.9  # Higher crossover rate for increased recombination\n        self.evaluations = 0\n        self.archive = []\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n\n                # Check archive for potential new base vector\n                if len(self.archive) > 0 and np.random.rand() < 0.1:\n                    base_vector = self.archive[np.random.randint(len(self.archive))]\n                else:\n                    base_vector = self.population[a]\n\n                # Mutation with potential archive vector\n                mutant = base_vector + self.F * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, *self.bounds)\n                \n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    # Archive successful mutants\n                    self.archive.append(trial)\n\n                # Dynamic adjustment based on fitness improvement\n                if trial_fitness < self.fitness.mean():\n                    self.F = np.clip(self.F + 0.01 * (0.5 - np.random.rand()), 0.1, 0.9)\n                    self.CR = np.clip(self.CR + 0.01 * (0.5 - np.random.rand()), 0.5, 1.0)\n\n        return self.population[np.argmin(self.fitness)]\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1", "name": "EnhancedMetaheuristicOptimizer", "description": "This algorithm enhances Differential Evolution by incorporating a dynamic archiving mechanism and adaptive scaling, focusing on reducing redundant evaluations and improving convergence speed.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e2479e79-b69d-45fa-b91b-0b20431aaa1a", "metadata": {"aucs": [0.8460838787318541, 0.8662210773214738, 0.8164573346626365, 0.8474260970208942, 0.8564395667445609, 0.8345479318139788, 0.8540491208796602, 0.8317501307836201, 0.8398020747513537, 0.6862735300194087, 0.7312545135338542, 0.7337114467926564, 0.7393741637085585, 0.7233185285708336, 0.6567521728063315, 0.7418944441517743, 0.7133538515172579, 0.7489585245586282, 0.21512818503010733, 0.13583250914468514, 0.12183102787103783, 0.10404529497511705, 0.12155147909505926, 0.11161737498757207, 0.13566255680944728, 0.13309452614576944, 0.14253313168169335, 0.10277272302788698, 0.11056387527357237, 0.1397652820307307, 0.12202565881943339, 0.13084970314919397, 0.1147862561070846, 0.1107156460462495, 0.09995298490831994, 0.10050844281822302, 0.9308272990481794, 0.9504949701555323, 0.9811165720089283, 0.8895067268384018, 0.9408710023392403, 0.9432442402822587, 0.9560733825932358, 0.9605358821067621, 0.9335584020145802, 0.5122660725578172, 0.5958772319256793, 0.5322793929517171, 0.5916223442813854, 0.5962377974045365, 0.678995085032133, 0.4755485481163809, 0.611284500745387, 0.6076148974411232, 0.8472652261287323, 0.8327665107298321, 0.805940854875559, 0.8202599398726511, 0.8380067227205756, 0.7967428263023542, 0.7747845915458351, 0.724097987386366, 0.8400537185005408, 0.40217369740982223, 0.18484126740458728, 0.36324051532467916, 0.37263017825860756, 0.20392326655030668, 0.41237192075948637, 0.3877440003099134, 0.2856761126710259, 0.3532608298652462, 0.3513102896224257, 0.21481712428264177, 0.2222788220777453, 0.29745499244108997, 0.1793286168051631, 0.22107342973119593, 0.2203450980563506, 0.32266939191309374, 0.43019538881702224, 0.3911602034296203, 0.5774387066263849, 0.48372916708951874, 0.2695686529190173, 0.33243437736866177, 0.40965558842833816, 0.6195002512470358, 0.3893141339666034, 0.3432472999933732, 0.5981410308120142, 0.5898843981655413, 0.7716245008655335, 0.5675668800912007, 0.33000017539178916, 0.6492708360853281, 0.5550601286062737, 0.7212557454319156, 0.6263478190421081, 0.1119579449124063, 0.23667253698061974, 0.2531368640355437, 0.3970862646124953, 0.1677008461223135, 0.13531017600578343, 0.2482487719050257, 0.14463749950973293, 0.12877118481664707, 0.36600715857411137, 0.3882310737730873, 0.29618786249399975, 0.45837274139040207, 0.5503106267937234, 0.3740273380776381, 0.3592493850333405, 0.2952051198575746, 0.37013075102967874, 0.750211501266788, 0.6666848209869163, 0.8116452718924732, 0.6430141624805874, 0.6515772159861947, 0.6732183674250557, 0.7595936637040608, 0.7542405270345075, 0.7362578781754887, 0.10952760241339854, 0.09747974746612997, 0.09881545004929926, 0.1050489895048855, 0.10220713828883776, 0.09193357941703961, 0.0978309479750844, 0.10876801218323995, 0.08878289143401286, 0.1514075341051615, 0.1327516452974833, 0.17921491165456171, 0.14894524904132433, 0.19931045960284177, 0.18922205595252428, 0.13680241626212442, 0.1803489665926591, 0.1462694853480363, 0.5042799239185823, 0.5566296502946564, 0.4306507622010627, 0.43610913378045735, 0.43789129616785827, 0.39826610120660055, 0.47585532965363087, 0.4564648588947926, 0.42518175752329834, 0.32166276967296914, 0.3514889373439898, 0.40557211227448786, 0.2849455300096645, 0.41406695063959165, 0.42012776184416367, 0.4123723247874548, 0.3978376085516072, 0.3542714761047776, 0.19650293233862182, 0.21438895488834142, 0.19605126648810656, 0.1945187066916556, 0.18776672033534592, 0.19023493490633725, 0.1865622335841266, 0.18682236690566367, 0.19951383700140324, 0.20665804903689056, 0.2775759957453616, 0.4478153759030584, 0.2164917410508882, 0.17873148994872046, 0.3428392679693817, 0.18711120661575587, 0.22613832652150356, 0.2631587376403516, 0.2083562319990443, 0.18259649389037402, 0.193431091961622, 0.829689805202301, 0.6978220523817482, 0.19641151775048604, 0.18580525236827816, 0.18014237990605797, 0.6759299998859297, 0.8063676359307129, 0.20185428942065176, 0.2068840166925202, 0.2064155591553115, 0.19895542901668328, 0.5987939544125035, 0.16433429851850268, 0.20842469407016762, 0.20376748218246887, 0.1830568662841463, 0.18714197816037104, 0.18534510948682426, 0.20206754668409033, 0.184903926747361, 0.17763988418342014, 0.18923074738169265, 0.19173453862244738, 0.18889295019318675, 0.07929852808174676, 0.08520227820452109, 0.08239062509294459, 0.08758241093881602, 0.07637705080278523, 0.0853394160128561, 0.09327844562796705, 0.07336447272886404, 0.07660269930659092]}, "mutation_prompt": null}
{"id": "c327b9f8-b2e1-498e-9b58-af03ab05a5f2", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 6 * self.dim  # Further reduced population size for faster execution\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.F = 0.6  # Adjusted mutation factor for initial diversity\n        self.CR = 0.9  # Higher crossover rate for increased recombination\n        self.evaluations = 0\n        self.archive = []\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n\n                # Check archive for potential new base vector\n                if len(self.archive) > 0 and np.random.rand() < 0.1:\n                    base_vector = self.archive[np.random.randint(len(self.archive))]\n                else:\n                    base_vector = self.population[a]\n\n                # Mutation with potential archive vector\n                mutant = base_vector + self.F * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, *self.bounds)\n                \n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    # Archive successful mutants\n                    self.archive.append(trial)\n\n                # Dynamic adjustment based on fitness improvement\n                if trial_fitness < self.fitness.mean():\n                    self.F = np.clip(self.F + 0.01 * (0.5 - np.random.rand()), 0.1, 0.9)\n                    self.CR = np.clip(self.CR + 0.01 * (0.5 - np.random.rand()), 0.5, 1.0)\n\n        return self.population[np.argmin(self.fitness)]\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1", "name": "EnhancedMetaheuristicOptimizer", "description": "This algorithm enhances Differential Evolution by incorporating a dynamic archiving mechanism and adaptive scaling, focusing on reducing redundant evaluations and improving convergence speed.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e2479e79-b69d-45fa-b91b-0b20431aaa1a", "metadata": {"aucs": [0.8460838787318541, 0.8662210773214738, 0.8164573346626365, 0.8474260970208942, 0.8564395667445609, 0.8345479318139788, 0.8540491208796602, 0.8317501307836201, 0.8398020747513537, 0.6862735300194087, 0.7312545135338542, 0.7337114467926564, 0.7393741637085585, 0.7233185285708336, 0.6567521728063315, 0.7418944441517743, 0.7133538515172579, 0.7489585245586282, 0.21512818503010733, 0.13583250914468514, 0.12183102787103783, 0.10404529497511705, 0.12155147909505926, 0.11161737498757207, 0.13566255680944728, 0.13309452614576944, 0.14253313168169335, 0.10277272302788698, 0.11056387527357237, 0.1397652820307307, 0.12202565881943339, 0.13084970314919397, 0.1147862561070846, 0.1107156460462495, 0.09995298490831994, 0.10050844281822302, 0.9308272990481794, 0.9504949701555323, 0.9811165720089283, 0.8895067268384018, 0.9408710023392403, 0.9432442402822587, 0.9560733825932358, 0.9605358821067621, 0.9335584020145802, 0.5122660725578172, 0.5958772319256793, 0.5322793929517171, 0.5916223442813854, 0.5962377974045365, 0.678995085032133, 0.4755485481163809, 0.611284500745387, 0.6076148974411232, 0.8472652261287323, 0.8327665107298321, 0.805940854875559, 0.8202599398726511, 0.8380067227205756, 0.7967428263023542, 0.7747845915458351, 0.724097987386366, 0.8400537185005408, 0.40217369740982223, 0.18484126740458728, 0.36324051532467916, 0.37263017825860756, 0.20392326655030668, 0.41237192075948637, 0.3877440003099134, 0.2856761126710259, 0.3532608298652462, 0.3513102896224257, 0.21481712428264177, 0.2222788220777453, 0.29745499244108997, 0.1793286168051631, 0.22107342973119593, 0.2203450980563506, 0.32266939191309374, 0.43019538881702224, 0.3911602034296203, 0.5774387066263849, 0.48372916708951874, 0.2695686529190173, 0.33243437736866177, 0.40965558842833816, 0.6195002512470358, 0.3893141339666034, 0.3432472999933732, 0.5981410308120142, 0.5898843981655413, 0.7716245008655335, 0.5675668800912007, 0.33000017539178916, 0.6492708360853281, 0.5550601286062737, 0.7212557454319156, 0.6263478190421081, 0.1119579449124063, 0.23667253698061974, 0.2531368640355437, 0.3970862646124953, 0.1677008461223135, 0.13531017600578343, 0.2482487719050257, 0.14463749950973293, 0.12877118481664707, 0.36600715857411137, 0.3882310737730873, 0.29618786249399975, 0.45837274139040207, 0.5503106267937234, 0.3740273380776381, 0.3592493850333405, 0.2952051198575746, 0.37013075102967874, 0.750211501266788, 0.6666848209869163, 0.8116452718924732, 0.6430141624805874, 0.6515772159861947, 0.6732183674250557, 0.7595936637040608, 0.7542405270345075, 0.7362578781754887, 0.10952760241339854, 0.09747974746612997, 0.09881545004929926, 0.1050489895048855, 0.10220713828883776, 0.09193357941703961, 0.0978309479750844, 0.10876801218323995, 0.08878289143401286, 0.1514075341051615, 0.1327516452974833, 0.17921491165456171, 0.14894524904132433, 0.19931045960284177, 0.18922205595252428, 0.13680241626212442, 0.1803489665926591, 0.1462694853480363, 0.5042799239185823, 0.5566296502946564, 0.4306507622010627, 0.43610913378045735, 0.43789129616785827, 0.39826610120660055, 0.47585532965363087, 0.4564648588947926, 0.42518175752329834, 0.32166276967296914, 0.3514889373439898, 0.40557211227448786, 0.2849455300096645, 0.41406695063959165, 0.42012776184416367, 0.4123723247874548, 0.3978376085516072, 0.3542714761047776, 0.19650293233862182, 0.21438895488834142, 0.19605126648810656, 0.1945187066916556, 0.18776672033534592, 0.19023493490633725, 0.1865622335841266, 0.18682236690566367, 0.19951383700140324, 0.20665804903689056, 0.2775759957453616, 0.4478153759030584, 0.2164917410508882, 0.17873148994872046, 0.3428392679693817, 0.18711120661575587, 0.22613832652150356, 0.2631587376403516, 0.2083562319990443, 0.18259649389037402, 0.193431091961622, 0.829689805202301, 0.6978220523817482, 0.19641151775048604, 0.18580525236827816, 0.18014237990605797, 0.6759299998859297, 0.8063676359307129, 0.20185428942065176, 0.2068840166925202, 0.2064155591553115, 0.19895542901668328, 0.5987939544125035, 0.16433429851850268, 0.20842469407016762, 0.20376748218246887, 0.1830568662841463, 0.18714197816037104, 0.18534510948682426, 0.20206754668409033, 0.184903926747361, 0.17763988418342014, 0.18923074738169265, 0.19173453862244738, 0.18889295019318675, 0.07929852808174676, 0.08520227820452109, 0.08239062509294459, 0.08758241093881602, 0.07637705080278523, 0.0853394160128561, 0.09327844562796705, 0.07336447272886404, 0.07660269930659092]}, "mutation_prompt": null}
{"id": "4c158774-2a0a-4704-9606-22e9ff88f178", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 6 * self.dim  # Further reduced population size for faster execution\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.F = 0.6  # Adjusted mutation factor for initial diversity\n        self.CR = 0.9  # Higher crossover rate for increased recombination\n        self.evaluations = 0\n        self.archive = []\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n\n                # Check archive for potential new base vector\n                if len(self.archive) > 0 and np.random.rand() < 0.1:\n                    base_vector = self.archive[np.random.randint(len(self.archive))]\n                else:\n                    base_vector = self.population[a]\n\n                # Mutation with potential archive vector\n                mutant = base_vector + self.F * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, *self.bounds)\n                \n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    # Archive successful mutants\n                    self.archive.append(trial)\n\n                # Dynamic adjustment based on fitness improvement\n                if trial_fitness < self.fitness.mean():\n                    self.F = np.clip(self.F + 0.01 * (0.5 - np.random.rand()), 0.1, 0.9)\n                    self.CR = np.clip(self.CR + 0.01 * (0.5 - np.random.rand()), 0.5, 1.0)\n\n        return self.population[np.argmin(self.fitness)]\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1", "name": "EnhancedMetaheuristicOptimizer", "description": "This algorithm enhances Differential Evolution by incorporating a dynamic archiving mechanism and adaptive scaling, focusing on reducing redundant evaluations and improving convergence speed.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e2479e79-b69d-45fa-b91b-0b20431aaa1a", "metadata": {"aucs": [0.8460838787318541, 0.8662210773214738, 0.8164573346626365, 0.8474260970208942, 0.8564395667445609, 0.8345479318139788, 0.8540491208796602, 0.8317501307836201, 0.8398020747513537, 0.6862735300194087, 0.7312545135338542, 0.7337114467926564, 0.7393741637085585, 0.7233185285708336, 0.6567521728063315, 0.7418944441517743, 0.7133538515172579, 0.7489585245586282, 0.21512818503010733, 0.13583250914468514, 0.12183102787103783, 0.10404529497511705, 0.12155147909505926, 0.11161737498757207, 0.13566255680944728, 0.13309452614576944, 0.14253313168169335, 0.10277272302788698, 0.11056387527357237, 0.1397652820307307, 0.12202565881943339, 0.13084970314919397, 0.1147862561070846, 0.1107156460462495, 0.09995298490831994, 0.10050844281822302, 0.9308272990481794, 0.9504949701555323, 0.9811165720089283, 0.8895067268384018, 0.9408710023392403, 0.9432442402822587, 0.9560733825932358, 0.9605358821067621, 0.9335584020145802, 0.5122660725578172, 0.5958772319256793, 0.5322793929517171, 0.5916223442813854, 0.5962377974045365, 0.678995085032133, 0.4755485481163809, 0.611284500745387, 0.6076148974411232, 0.8472652261287323, 0.8327665107298321, 0.805940854875559, 0.8202599398726511, 0.8380067227205756, 0.7967428263023542, 0.7747845915458351, 0.724097987386366, 0.8400537185005408, 0.40217369740982223, 0.18484126740458728, 0.36324051532467916, 0.37263017825860756, 0.20392326655030668, 0.41237192075948637, 0.3877440003099134, 0.2856761126710259, 0.3532608298652462, 0.3513102896224257, 0.21481712428264177, 0.2222788220777453, 0.29745499244108997, 0.1793286168051631, 0.22107342973119593, 0.2203450980563506, 0.32266939191309374, 0.43019538881702224, 0.3911602034296203, 0.5774387066263849, 0.48372916708951874, 0.2695686529190173, 0.33243437736866177, 0.40965558842833816, 0.6195002512470358, 0.3893141339666034, 0.3432472999933732, 0.5981410308120142, 0.5898843981655413, 0.7716245008655335, 0.5675668800912007, 0.33000017539178916, 0.6492708360853281, 0.5550601286062737, 0.7212557454319156, 0.6263478190421081, 0.1119579449124063, 0.23667253698061974, 0.2531368640355437, 0.3970862646124953, 0.1677008461223135, 0.13531017600578343, 0.2482487719050257, 0.14463749950973293, 0.12877118481664707, 0.36600715857411137, 0.3882310737730873, 0.29618786249399975, 0.45837274139040207, 0.5503106267937234, 0.3740273380776381, 0.3592493850333405, 0.2952051198575746, 0.37013075102967874, 0.750211501266788, 0.6666848209869163, 0.8116452718924732, 0.6430141624805874, 0.6515772159861947, 0.6732183674250557, 0.7595936637040608, 0.7542405270345075, 0.7362578781754887, 0.10952760241339854, 0.09747974746612997, 0.09881545004929926, 0.1050489895048855, 0.10220713828883776, 0.09193357941703961, 0.0978309479750844, 0.10876801218323995, 0.08878289143401286, 0.1514075341051615, 0.1327516452974833, 0.17921491165456171, 0.14894524904132433, 0.19931045960284177, 0.18922205595252428, 0.13680241626212442, 0.1803489665926591, 0.1462694853480363, 0.5042799239185823, 0.5566296502946564, 0.4306507622010627, 0.43610913378045735, 0.43789129616785827, 0.39826610120660055, 0.47585532965363087, 0.4564648588947926, 0.42518175752329834, 0.32166276967296914, 0.3514889373439898, 0.40557211227448786, 0.2849455300096645, 0.41406695063959165, 0.42012776184416367, 0.4123723247874548, 0.3978376085516072, 0.3542714761047776, 0.19650293233862182, 0.21438895488834142, 0.19605126648810656, 0.1945187066916556, 0.18776672033534592, 0.19023493490633725, 0.1865622335841266, 0.18682236690566367, 0.19951383700140324, 0.20665804903689056, 0.2775759957453616, 0.4478153759030584, 0.2164917410508882, 0.17873148994872046, 0.3428392679693817, 0.18711120661575587, 0.22613832652150356, 0.2631587376403516, 0.2083562319990443, 0.18259649389037402, 0.193431091961622, 0.829689805202301, 0.6978220523817482, 0.19641151775048604, 0.18580525236827816, 0.18014237990605797, 0.6759299998859297, 0.8063676359307129, 0.20185428942065176, 0.2068840166925202, 0.2064155591553115, 0.19895542901668328, 0.5987939544125035, 0.16433429851850268, 0.20842469407016762, 0.20376748218246887, 0.1830568662841463, 0.18714197816037104, 0.18534510948682426, 0.20206754668409033, 0.184903926747361, 0.17763988418342014, 0.18923074738169265, 0.19173453862244738, 0.18889295019318675, 0.07929852808174676, 0.08520227820452109, 0.08239062509294459, 0.08758241093881602, 0.07637705080278523, 0.0853394160128561, 0.09327844562796705, 0.07336447272886404, 0.07660269930659092]}, "mutation_prompt": null}
{"id": "70137595-fa5a-4671-bc1d-6c48db6d3fba", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 6 * self.dim  # Further reduced population size for faster execution\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.F = 0.6  # Adjusted mutation factor for initial diversity\n        self.CR = 0.9  # Higher crossover rate for increased recombination\n        self.evaluations = 0\n        self.archive = []\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n\n                # Check archive for potential new base vector\n                if len(self.archive) > 0 and np.random.rand() < 0.1:\n                    base_vector = self.archive[np.random.randint(len(self.archive))]\n                else:\n                    base_vector = self.population[a]\n\n                # Mutation with potential archive vector\n                mutant = base_vector + self.F * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, *self.bounds)\n                \n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    # Archive successful mutants\n                    self.archive.append(trial)\n\n                # Dynamic adjustment based on fitness improvement\n                if trial_fitness < self.fitness.mean():\n                    self.F = np.clip(self.F + 0.01 * (0.5 - np.random.rand()), 0.1, 0.9)\n                    self.CR = np.clip(self.CR + 0.01 * (0.5 - np.random.rand()), 0.5, 1.0)\n\n        return self.population[np.argmin(self.fitness)]\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1", "name": "EnhancedMetaheuristicOptimizer", "description": "This algorithm enhances Differential Evolution by incorporating a dynamic archiving mechanism and adaptive scaling, focusing on reducing redundant evaluations and improving convergence speed.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e2479e79-b69d-45fa-b91b-0b20431aaa1a", "metadata": {"aucs": [0.8460838787318541, 0.8662210773214738, 0.8164573346626365, 0.8474260970208942, 0.8564395667445609, 0.8345479318139788, 0.8540491208796602, 0.8317501307836201, 0.8398020747513537, 0.6862735300194087, 0.7312545135338542, 0.7337114467926564, 0.7393741637085585, 0.7233185285708336, 0.6567521728063315, 0.7418944441517743, 0.7133538515172579, 0.7489585245586282, 0.21512818503010733, 0.13583250914468514, 0.12183102787103783, 0.10404529497511705, 0.12155147909505926, 0.11161737498757207, 0.13566255680944728, 0.13309452614576944, 0.14253313168169335, 0.10277272302788698, 0.11056387527357237, 0.1397652820307307, 0.12202565881943339, 0.13084970314919397, 0.1147862561070846, 0.1107156460462495, 0.09995298490831994, 0.10050844281822302, 0.9308272990481794, 0.9504949701555323, 0.9811165720089283, 0.8895067268384018, 0.9408710023392403, 0.9432442402822587, 0.9560733825932358, 0.9605358821067621, 0.9335584020145802, 0.5122660725578172, 0.5958772319256793, 0.5322793929517171, 0.5916223442813854, 0.5962377974045365, 0.678995085032133, 0.4755485481163809, 0.611284500745387, 0.6076148974411232, 0.8472652261287323, 0.8327665107298321, 0.805940854875559, 0.8202599398726511, 0.8380067227205756, 0.7967428263023542, 0.7747845915458351, 0.724097987386366, 0.8400537185005408, 0.40217369740982223, 0.18484126740458728, 0.36324051532467916, 0.37263017825860756, 0.20392326655030668, 0.41237192075948637, 0.3877440003099134, 0.2856761126710259, 0.3532608298652462, 0.3513102896224257, 0.21481712428264177, 0.2222788220777453, 0.29745499244108997, 0.1793286168051631, 0.22107342973119593, 0.2203450980563506, 0.32266939191309374, 0.43019538881702224, 0.3911602034296203, 0.5774387066263849, 0.48372916708951874, 0.2695686529190173, 0.33243437736866177, 0.40965558842833816, 0.6195002512470358, 0.3893141339666034, 0.3432472999933732, 0.5981410308120142, 0.5898843981655413, 0.7716245008655335, 0.5675668800912007, 0.33000017539178916, 0.6492708360853281, 0.5550601286062737, 0.7212557454319156, 0.6263478190421081, 0.1119579449124063, 0.23667253698061974, 0.2531368640355437, 0.3970862646124953, 0.1677008461223135, 0.13531017600578343, 0.2482487719050257, 0.14463749950973293, 0.12877118481664707, 0.36600715857411137, 0.3882310737730873, 0.29618786249399975, 0.45837274139040207, 0.5503106267937234, 0.3740273380776381, 0.3592493850333405, 0.2952051198575746, 0.37013075102967874, 0.750211501266788, 0.6666848209869163, 0.8116452718924732, 0.6430141624805874, 0.6515772159861947, 0.6732183674250557, 0.7595936637040608, 0.7542405270345075, 0.7362578781754887, 0.10952760241339854, 0.09747974746612997, 0.09881545004929926, 0.1050489895048855, 0.10220713828883776, 0.09193357941703961, 0.0978309479750844, 0.10876801218323995, 0.08878289143401286, 0.1514075341051615, 0.1327516452974833, 0.17921491165456171, 0.14894524904132433, 0.19931045960284177, 0.18922205595252428, 0.13680241626212442, 0.1803489665926591, 0.1462694853480363, 0.5042799239185823, 0.5566296502946564, 0.4306507622010627, 0.43610913378045735, 0.43789129616785827, 0.39826610120660055, 0.47585532965363087, 0.4564648588947926, 0.42518175752329834, 0.32166276967296914, 0.3514889373439898, 0.40557211227448786, 0.2849455300096645, 0.41406695063959165, 0.42012776184416367, 0.4123723247874548, 0.3978376085516072, 0.3542714761047776, 0.19650293233862182, 0.21438895488834142, 0.19605126648810656, 0.1945187066916556, 0.18776672033534592, 0.19023493490633725, 0.1865622335841266, 0.18682236690566367, 0.19951383700140324, 0.20665804903689056, 0.2775759957453616, 0.4478153759030584, 0.2164917410508882, 0.17873148994872046, 0.3428392679693817, 0.18711120661575587, 0.22613832652150356, 0.2631587376403516, 0.2083562319990443, 0.18259649389037402, 0.193431091961622, 0.829689805202301, 0.6978220523817482, 0.19641151775048604, 0.18580525236827816, 0.18014237990605797, 0.6759299998859297, 0.8063676359307129, 0.20185428942065176, 0.2068840166925202, 0.2064155591553115, 0.19895542901668328, 0.5987939544125035, 0.16433429851850268, 0.20842469407016762, 0.20376748218246887, 0.1830568662841463, 0.18714197816037104, 0.18534510948682426, 0.20206754668409033, 0.184903926747361, 0.17763988418342014, 0.18923074738169265, 0.19173453862244738, 0.18889295019318675, 0.07929852808174676, 0.08520227820452109, 0.08239062509294459, 0.08758241093881602, 0.07637705080278523, 0.0853394160128561, 0.09327844562796705, 0.07336447272886404, 0.07660269930659092]}, "mutation_prompt": null}
{"id": "abf52f24-6d18-42a0-b842-9b2d16e27db0", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 6 * self.dim  # Further reduced population size for faster execution\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.F = 0.6  # Adjusted mutation factor for initial diversity\n        self.CR = 0.9  # Higher crossover rate for increased recombination\n        self.evaluations = 0\n        self.archive = []\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n\n                # Check archive for potential new base vector\n                if len(self.archive) > 0 and np.random.rand() < 0.1:\n                    base_vector = self.archive[np.random.randint(len(self.archive))]\n                else:\n                    base_vector = self.population[a]\n\n                # Mutation with potential archive vector\n                mutant = base_vector + self.F * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, *self.bounds)\n                \n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    # Archive successful mutants\n                    self.archive.append(trial)\n\n                # Dynamic adjustment based on fitness improvement\n                if trial_fitness < self.fitness.mean():\n                    self.F = np.clip(self.F + 0.01 * (0.5 - np.random.rand()), 0.1, 0.9)\n                    self.CR = np.clip(self.CR + 0.01 * (0.5 - np.random.rand()), 0.5, 1.0)\n\n        return self.population[np.argmin(self.fitness)]\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1", "name": "EnhancedMetaheuristicOptimizer", "description": "This algorithm enhances Differential Evolution by incorporating a dynamic archiving mechanism and adaptive scaling, focusing on reducing redundant evaluations and improving convergence speed.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e2479e79-b69d-45fa-b91b-0b20431aaa1a", "metadata": {"aucs": [0.8460838787318541, 0.8662210773214738, 0.8164573346626365, 0.8474260970208942, 0.8564395667445609, 0.8345479318139788, 0.8540491208796602, 0.8317501307836201, 0.8398020747513537, 0.6862735300194087, 0.7312545135338542, 0.7337114467926564, 0.7393741637085585, 0.7233185285708336, 0.6567521728063315, 0.7418944441517743, 0.7133538515172579, 0.7489585245586282, 0.21512818503010733, 0.13583250914468514, 0.12183102787103783, 0.10404529497511705, 0.12155147909505926, 0.11161737498757207, 0.13566255680944728, 0.13309452614576944, 0.14253313168169335, 0.10277272302788698, 0.11056387527357237, 0.1397652820307307, 0.12202565881943339, 0.13084970314919397, 0.1147862561070846, 0.1107156460462495, 0.09995298490831994, 0.10050844281822302, 0.9308272990481794, 0.9504949701555323, 0.9811165720089283, 0.8895067268384018, 0.9408710023392403, 0.9432442402822587, 0.9560733825932358, 0.9605358821067621, 0.9335584020145802, 0.5122660725578172, 0.5958772319256793, 0.5322793929517171, 0.5916223442813854, 0.5962377974045365, 0.678995085032133, 0.4755485481163809, 0.611284500745387, 0.6076148974411232, 0.8472652261287323, 0.8327665107298321, 0.805940854875559, 0.8202599398726511, 0.8380067227205756, 0.7967428263023542, 0.7747845915458351, 0.724097987386366, 0.8400537185005408, 0.40217369740982223, 0.18484126740458728, 0.36324051532467916, 0.37263017825860756, 0.20392326655030668, 0.41237192075948637, 0.3877440003099134, 0.2856761126710259, 0.3532608298652462, 0.3513102896224257, 0.21481712428264177, 0.2222788220777453, 0.29745499244108997, 0.1793286168051631, 0.22107342973119593, 0.2203450980563506, 0.32266939191309374, 0.43019538881702224, 0.3911602034296203, 0.5774387066263849, 0.48372916708951874, 0.2695686529190173, 0.33243437736866177, 0.40965558842833816, 0.6195002512470358, 0.3893141339666034, 0.3432472999933732, 0.5981410308120142, 0.5898843981655413, 0.7716245008655335, 0.5675668800912007, 0.33000017539178916, 0.6492708360853281, 0.5550601286062737, 0.7212557454319156, 0.6263478190421081, 0.1119579449124063, 0.23667253698061974, 0.2531368640355437, 0.3970862646124953, 0.1677008461223135, 0.13531017600578343, 0.2482487719050257, 0.14463749950973293, 0.12877118481664707, 0.36600715857411137, 0.3882310737730873, 0.29618786249399975, 0.45837274139040207, 0.5503106267937234, 0.3740273380776381, 0.3592493850333405, 0.2952051198575746, 0.37013075102967874, 0.750211501266788, 0.6666848209869163, 0.8116452718924732, 0.6430141624805874, 0.6515772159861947, 0.6732183674250557, 0.7595936637040608, 0.7542405270345075, 0.7362578781754887, 0.10952760241339854, 0.09747974746612997, 0.09881545004929926, 0.1050489895048855, 0.10220713828883776, 0.09193357941703961, 0.0978309479750844, 0.10876801218323995, 0.08878289143401286, 0.1514075341051615, 0.1327516452974833, 0.17921491165456171, 0.14894524904132433, 0.19931045960284177, 0.18922205595252428, 0.13680241626212442, 0.1803489665926591, 0.1462694853480363, 0.5042799239185823, 0.5566296502946564, 0.4306507622010627, 0.43610913378045735, 0.43789129616785827, 0.39826610120660055, 0.47585532965363087, 0.4564648588947926, 0.42518175752329834, 0.32166276967296914, 0.3514889373439898, 0.40557211227448786, 0.2849455300096645, 0.41406695063959165, 0.42012776184416367, 0.4123723247874548, 0.3978376085516072, 0.3542714761047776, 0.19650293233862182, 0.21438895488834142, 0.19605126648810656, 0.1945187066916556, 0.18776672033534592, 0.19023493490633725, 0.1865622335841266, 0.18682236690566367, 0.19951383700140324, 0.20665804903689056, 0.2775759957453616, 0.4478153759030584, 0.2164917410508882, 0.17873148994872046, 0.3428392679693817, 0.18711120661575587, 0.22613832652150356, 0.2631587376403516, 0.2083562319990443, 0.18259649389037402, 0.193431091961622, 0.829689805202301, 0.6978220523817482, 0.19641151775048604, 0.18580525236827816, 0.18014237990605797, 0.6759299998859297, 0.8063676359307129, 0.20185428942065176, 0.2068840166925202, 0.2064155591553115, 0.19895542901668328, 0.5987939544125035, 0.16433429851850268, 0.20842469407016762, 0.20376748218246887, 0.1830568662841463, 0.18714197816037104, 0.18534510948682426, 0.20206754668409033, 0.184903926747361, 0.17763988418342014, 0.18923074738169265, 0.19173453862244738, 0.18889295019318675, 0.07929852808174676, 0.08520227820452109, 0.08239062509294459, 0.08758241093881602, 0.07637705080278523, 0.0853394160128561, 0.09327844562796705, 0.07336447272886404, 0.07660269930659092]}, "mutation_prompt": null}
{"id": "6d8d65c9-ca68-42d6-8683-2be802bad848", "solution": "import numpy as np\n\nclass EnhancedMetaheuristicOptimizer:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 6 * self.dim  # Further reduced population size for faster execution\n        self.bounds = (-5.0, 5.0)\n        self.population = np.random.uniform(*self.bounds, (self.pop_size, self.dim))\n        self.fitness = np.full(self.pop_size, np.inf)\n        self.F = 0.6  # Adjusted mutation factor for initial diversity\n        self.CR = 0.9  # Higher crossover rate for increased recombination\n        self.evaluations = 0\n        self.archive = []\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        while self.evaluations < self.budget:\n            for i in range(self.pop_size):\n                if self.evaluations >= self.budget:\n                    break\n                a, b, c = np.random.choice(self.pop_size, 3, replace=False)\n\n                # Check archive for potential new base vector\n                if len(self.archive) > 0 and np.random.rand() < 0.1:\n                    base_vector = self.archive[np.random.randint(len(self.archive))]\n                else:\n                    base_vector = self.population[a]\n\n                # Mutation with potential archive vector\n                mutant = base_vector + self.F * (self.population[b] - self.population[c])\n                mutant = np.clip(mutant, *self.bounds)\n                \n                trial = np.where(np.random.rand(self.dim) < self.CR, mutant, self.population[i])\n\n                trial_fitness = func(trial)\n                self.evaluations += 1\n\n                if trial_fitness < self.fitness[i]:\n                    self.population[i] = trial\n                    self.fitness[i] = trial_fitness\n                    # Archive successful mutants\n                    self.archive.append(trial)\n\n                # Dynamic adjustment based on fitness improvement\n                if trial_fitness < self.fitness.mean():\n                    self.F = np.clip(self.F + 0.01 * (0.5 - np.random.rand()), 0.1, 0.9)\n                    self.CR = np.clip(self.CR + 0.01 * (0.5 - np.random.rand()), 0.5, 1.0)\n\n        return self.population[np.argmin(self.fitness)]\n\n    def evaluate_population(self, func):\n        for i in range(self.pop_size):\n            if self.evaluations >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.evaluations += 1", "name": "EnhancedMetaheuristicOptimizer", "description": "This algorithm enhances Differential Evolution by incorporating a dynamic archiving mechanism and adaptive scaling, focusing on reducing redundant evaluations and improving convergence speed.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e2479e79-b69d-45fa-b91b-0b20431aaa1a", "metadata": {"aucs": [0.8460838787318541, 0.8662210773214738, 0.8164573346626365, 0.8474260970208942, 0.8564395667445609, 0.8345479318139788, 0.8540491208796602, 0.8317501307836201, 0.8398020747513537, 0.6862735300194087, 0.7312545135338542, 0.7337114467926564, 0.7393741637085585, 0.7233185285708336, 0.6567521728063315, 0.7418944441517743, 0.7133538515172579, 0.7489585245586282, 0.21512818503010733, 0.13583250914468514, 0.12183102787103783, 0.10404529497511705, 0.12155147909505926, 0.11161737498757207, 0.13566255680944728, 0.13309452614576944, 0.14253313168169335, 0.10277272302788698, 0.11056387527357237, 0.1397652820307307, 0.12202565881943339, 0.13084970314919397, 0.1147862561070846, 0.1107156460462495, 0.09995298490831994, 0.10050844281822302, 0.9308272990481794, 0.9504949701555323, 0.9811165720089283, 0.8895067268384018, 0.9408710023392403, 0.9432442402822587, 0.9560733825932358, 0.9605358821067621, 0.9335584020145802, 0.5122660725578172, 0.5958772319256793, 0.5322793929517171, 0.5916223442813854, 0.5962377974045365, 0.678995085032133, 0.4755485481163809, 0.611284500745387, 0.6076148974411232, 0.8472652261287323, 0.8327665107298321, 0.805940854875559, 0.8202599398726511, 0.8380067227205756, 0.7967428263023542, 0.7747845915458351, 0.724097987386366, 0.8400537185005408, 0.40217369740982223, 0.18484126740458728, 0.36324051532467916, 0.37263017825860756, 0.20392326655030668, 0.41237192075948637, 0.3877440003099134, 0.2856761126710259, 0.3532608298652462, 0.3513102896224257, 0.21481712428264177, 0.2222788220777453, 0.29745499244108997, 0.1793286168051631, 0.22107342973119593, 0.2203450980563506, 0.32266939191309374, 0.43019538881702224, 0.3911602034296203, 0.5774387066263849, 0.48372916708951874, 0.2695686529190173, 0.33243437736866177, 0.40965558842833816, 0.6195002512470358, 0.3893141339666034, 0.3432472999933732, 0.5981410308120142, 0.5898843981655413, 0.7716245008655335, 0.5675668800912007, 0.33000017539178916, 0.6492708360853281, 0.5550601286062737, 0.7212557454319156, 0.6263478190421081, 0.1119579449124063, 0.23667253698061974, 0.2531368640355437, 0.3970862646124953, 0.1677008461223135, 0.13531017600578343, 0.2482487719050257, 0.14463749950973293, 0.12877118481664707, 0.36600715857411137, 0.3882310737730873, 0.29618786249399975, 0.45837274139040207, 0.5503106267937234, 0.3740273380776381, 0.3592493850333405, 0.2952051198575746, 0.37013075102967874, 0.750211501266788, 0.6666848209869163, 0.8116452718924732, 0.6430141624805874, 0.6515772159861947, 0.6732183674250557, 0.7595936637040608, 0.7542405270345075, 0.7362578781754887, 0.10952760241339854, 0.09747974746612997, 0.09881545004929926, 0.1050489895048855, 0.10220713828883776, 0.09193357941703961, 0.0978309479750844, 0.10876801218323995, 0.08878289143401286, 0.1514075341051615, 0.1327516452974833, 0.17921491165456171, 0.14894524904132433, 0.19931045960284177, 0.18922205595252428, 0.13680241626212442, 0.1803489665926591, 0.1462694853480363, 0.5042799239185823, 0.5566296502946564, 0.4306507622010627, 0.43610913378045735, 0.43789129616785827, 0.39826610120660055, 0.47585532965363087, 0.4564648588947926, 0.42518175752329834, 0.32166276967296914, 0.3514889373439898, 0.40557211227448786, 0.2849455300096645, 0.41406695063959165, 0.42012776184416367, 0.4123723247874548, 0.3978376085516072, 0.3542714761047776, 0.19650293233862182, 0.21438895488834142, 0.19605126648810656, 0.1945187066916556, 0.18776672033534592, 0.19023493490633725, 0.1865622335841266, 0.18682236690566367, 0.19951383700140324, 0.20665804903689056, 0.2775759957453616, 0.4478153759030584, 0.2164917410508882, 0.17873148994872046, 0.3428392679693817, 0.18711120661575587, 0.22613832652150356, 0.2631587376403516, 0.2083562319990443, 0.18259649389037402, 0.193431091961622, 0.829689805202301, 0.6978220523817482, 0.19641151775048604, 0.18580525236827816, 0.18014237990605797, 0.6759299998859297, 0.8063676359307129, 0.20185428942065176, 0.2068840166925202, 0.2064155591553115, 0.19895542901668328, 0.5987939544125035, 0.16433429851850268, 0.20842469407016762, 0.20376748218246887, 0.1830568662841463, 0.18714197816037104, 0.18534510948682426, 0.20206754668409033, 0.184903926747361, 0.17763988418342014, 0.18923074738169265, 0.19173453862244738, 0.18889295019318675, 0.07929852808174676, 0.08520227820452109, 0.08239062509294459, 0.08758241093881602, 0.07637705080278523, 0.0853394160128561, 0.09327844562796705, 0.07336447272886404, 0.07660269930659092]}, "mutation_prompt": null}
