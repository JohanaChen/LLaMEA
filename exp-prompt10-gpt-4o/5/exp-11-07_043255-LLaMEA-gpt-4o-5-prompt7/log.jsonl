{"id": "f8ea6afc-03c9-4176-b407-b0b6b6662cd4", "solution": "import numpy as np\n\nclass AdaptiveOppositionDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def opposition_based_learning(self, population):\n        return self.lower_bound + self.upper_bound - population\n\n    def local_search(self, x, func):\n        for i in range(5):  # Local search steps\n            trial = x + np.random.uniform(-0.1, 0.1, self.dim)\n            trial = np.clip(trial, self.lower_bound, self.upper_bound)\n            if func(trial) < func(x):\n                x = trial\n        return x\n\n    def mutate(self, population, idx):\n        indices = list(range(self.population_size))\n        indices.remove(idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        mutant = population[a] + self.F * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.CR\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        budget_used = self.population_size\n\n        while budget_used < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(population, i)\n                trial = self.crossover(population[i], mutant)\n                trial = self.local_search(trial, func)\n\n                trial_fitness = func(trial)\n                budget_used += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                # Opposition-based learning\n                if budget_used < self.budget:\n                    opposite = self.opposition_based_learning(population[i])\n                    opposite_fitness = func(opposite)\n                    budget_used += 1\n                    if opposite_fitness < fitness[i]:\n                        population[i] = opposite\n                        fitness[i] = opposite_fitness\n\n                if budget_used >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]\n\n# Example usage:\n# optimizer = AdaptiveOppositionDifferentialEvolution(budget=1000, dim=2)\n# best_solution = optimizer(some_black_box_function)", "name": "AdaptiveOppositionDifferentialEvolution", "description": "An adaptive differential evolution algorithm with opposition-based learning and local search to efficiently explore and exploit the search space.", "configspace": "", "generation": 0, "fitness": 0.116448267508636, "feedback": "The algorithm AdaptiveOppositionDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.09.", "error": "", "parent_id": null, "metadata": {"aucs": [0.23032402215255476, 0.20214585358328485, 0.23544770455381758, 0.26463038759797375, 0.19315213450402924, 0.2515732891423045, 0.23420668660238286, 0.25224485804820806, 0.21969720241593582, 0.015667458874522366, 0.04595423774846896, 0.022157495074073608, 0.011294027180607902, 0.01343528072254152, 0.01451841588624736, 0.023300947764840374, 0.0160113977191102, 0.005275253086096776, 0.05754840348275991, 0.0643291662096186, 0.05956921608928134, 0.0642298356094978, 0.06300580209843587, 0.05929499115429937, 0.06282109547202996, 0.05534207938725744, 0.07131934420813557, 0.05741356508055884, 0.04746424677967154, 0.06649501883404241, 0.04731619188620084, 0.044782843291134466, 0.052819740522243586, 0.062103055213453495, 0.044695869697085056, 0.05162626058818387, 0.232495877336777, 0.301752785072277, 0.36142001606813545, 0.31054947053631154, 0.20197833057920467, 0.5701712520426881, 0.460114764257364, 0.6128668037688801, 0.29629924578993005, 0.09725069692105681, 0.08482745581796991, 0.10185134968657583, 0.09009943235511542, 0.06868137815602837, 0.07997738411418975, 0.10056023925920654, 0.09107891821523828, 0.0885617184683608, 0.17331492662974246, 0.16097670503441897, 0.17215595110355064, 0.14965527524601097, 0.18358094647181966, 0.18241846600300538, 0.15221101797461456, 0.136491831839342, 0.12559633028000539, 0.04934785162910815, 0.053778797655731236, 0.03194153516024745, 0.04481888942327006, 0.03245467634241728, 0.036272726770414376, 0.061516418211205015, 0.02506438269202027, 0.046224143481055635, 0.061662724544491176, 0.03108177453097649, 0.022041764590504553, 0.05687631928292303, 0.027052725529424837, 0.058771788569700556, 0.05252489780511205, 0.02039783138185225, 0.057990460171322256, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007357886170273553, 9.999999999998899e-05, 0.09528841284066636, 0.09983237777105003, 0.0773498203809313, 0.05715253866769432, 0.06045828362535688, 0.08796919021515737, 0.11099349962192995, 0.08810766815451077, 0.07773249506540192, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03225239005674596, 0.015078325520382685, 0.01654523295093313, 0.02529335323852666, 0.024205729005131404, 0.03134374741969037, 0.029859060011566574, 0.02511247037656561, 0.023595003385312285, 0.2600882095961371, 0.22176949960791414, 0.24345278709672558, 0.24861703585146122, 0.2256577561139932, 0.21559376640280048, 0.2483470225197063, 0.25115089497017673, 0.22869540667846422, 0.06404572589915247, 0.061092061905534845, 0.05932408876180284, 0.07409724967182152, 0.06042413418098691, 0.08301467146364172, 0.06993008248311816, 0.05889654450388948, 0.06490848837679519, 0.12498004556964037, 0.13152608823745926, 0.12652676767184257, 0.18700321569462652, 0.11901569060661565, 0.11552509037247694, 0.1161162606827969, 0.10951441291855313, 0.12915908724663383, 0.1740509031697356, 0.16246984514866292, 0.17696283251889566, 0.17527238882273344, 0.16907051821779173, 0.1774325299767373, 0.19826217748553532, 0.17772940233133983, 0.16737295642713157, 0.1291901781364181, 0.11715961859533686, 0.12370098187284762, 0.12885095982573314, 0.14140944845816172, 0.10900314556857016, 0.14513459200346102, 0.13453135988232312, 0.1325855178311376, 0.17918581505358577, 0.18944429410853159, 0.18420239631488322, 0.169269708787246, 0.18078021819064838, 0.20548663546005375, 0.19624134563136664, 0.18434080857755542, 0.1876820495133925, 0.13720812422724826, 0.15152429430187675, 0.15134316031562467, 0.1528064150000088, 0.12689192428476037, 0.15371089129323445, 0.15468735730768235, 0.13466510578185675, 0.16135752742138887, 0.15285485127692588, 0.13124556929288134, 0.11614131256366655, 0.14718249449792187, 0.1222691642040229, 0.16864234340352358, 0.13034301061788212, 0.1263454294853018, 0.16267736633992247, 0.19830401443835577, 0.11910231227863866, 0.1901983941765798, 0.13688871325599905, 0.16171268391891047, 0.17177638863403522, 0.13888520131182214, 0.13474559836603517, 0.13911863382242196, 0.18024725800936414, 0.18330490006636202, 0.18985589654542423, 0.17297065449176896, 0.17077749899949835, 0.18694399291071662, 0.18662178921633732, 0.19652888756404385, 0.18303356884782074, 0.059027193301740555, 0.06785278233354253, 0.07268313019773054, 0.06036925320795383, 0.07084471727764119, 0.07261199978604305, 0.06482700513351558, 0.0612094161679152, 0.057993703456536205]}, "mutation_prompt": null}
{"id": "96a74ca8-01ca-419c-be3f-a80e84b16b99", "solution": "import numpy as np\n\nclass AdaptiveOppositionDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def opposition_based_learning(self, population):\n        return self.lower_bound + self.upper_bound - population\n\n    def local_search(self, x, func):\n        for i in range(5):  # Local search steps\n            trial = x + np.random.uniform(-0.1, 0.1, self.dim)\n            trial = np.clip(trial, self.lower_bound, self.upper_bound)\n            if func(trial) < func(x):\n                x = trial\n        return x\n\n    def mutate(self, population, idx):\n        indices = list(range(self.population_size))\n        indices.remove(idx)\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        mutant = population[a] + self.F * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.CR\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        budget_used = self.population_size\n\n        while budget_used < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(population, i)\n                trial = self.crossover(population[i], mutant)\n                trial = self.local_search(trial, func)\n\n                trial_fitness = func(trial)\n                budget_used += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                # Opposition-based learning\n                if budget_used < self.budget:\n                    opposite = self.opposition_based_learning(population[i])\n                    opposite_fitness = func(opposite)\n                    budget_used += 1\n                    if opposite_fitness < fitness[i]:\n                        population[i] = opposite\n                        fitness[i] = opposite_fitness\n\n                if budget_used >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]\n\n# Example usage:\n# optimizer = AdaptiveOppositionDifferentialEvolution(budget=1000, dim=2)\n# best_solution = optimizer(some_black_box_function)", "name": "AdaptiveOppositionDifferentialEvolution", "description": "An adaptive differential evolution algorithm with opposition-based learning and local search to efficiently explore and exploit the search space.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f8ea6afc-03c9-4176-b407-b0b6b6662cd4", "metadata": {"aucs": [0.23032402215255476, 0.20214585358328485, 0.23544770455381758, 0.26463038759797375, 0.19315213450402924, 0.2515732891423045, 0.23420668660238286, 0.25224485804820806, 0.21969720241593582, 0.015667458874522366, 0.04595423774846896, 0.022157495074073608, 0.011294027180607902, 0.01343528072254152, 0.01451841588624736, 0.023300947764840374, 0.0160113977191102, 0.005275253086096776, 0.05754840348275991, 0.0643291662096186, 0.05956921608928134, 0.0642298356094978, 0.06300580209843587, 0.05929499115429937, 0.06282109547202996, 0.05534207938725744, 0.07131934420813557, 0.05741356508055884, 0.04746424677967154, 0.06649501883404241, 0.04731619188620084, 0.044782843291134466, 0.052819740522243586, 0.062103055213453495, 0.044695869697085056, 0.05162626058818387, 0.232495877336777, 0.301752785072277, 0.36142001606813545, 0.31054947053631154, 0.20197833057920467, 0.5701712520426881, 0.460114764257364, 0.6128668037688801, 0.29629924578993005, 0.09725069692105681, 0.08482745581796991, 0.10185134968657583, 0.09009943235511542, 0.06868137815602837, 0.07997738411418975, 0.10056023925920654, 0.09107891821523828, 0.0885617184683608, 0.17331492662974246, 0.16097670503441897, 0.17215595110355064, 0.14965527524601097, 0.18358094647181966, 0.18241846600300538, 0.15221101797461456, 0.136491831839342, 0.12559633028000539, 0.04934785162910815, 0.053778797655731236, 0.03194153516024745, 0.04481888942327006, 0.03245467634241728, 0.036272726770414376, 0.061516418211205015, 0.02506438269202027, 0.046224143481055635, 0.061662724544491176, 0.03108177453097649, 0.022041764590504553, 0.05687631928292303, 0.027052725529424837, 0.058771788569700556, 0.05252489780511205, 0.02039783138185225, 0.057990460171322256, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007357886170273553, 9.999999999998899e-05, 0.09528841284066636, 0.09983237777105003, 0.0773498203809313, 0.05715253866769432, 0.06045828362535688, 0.08796919021515737, 0.11099349962192995, 0.08810766815451077, 0.07773249506540192, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03225239005674596, 0.015078325520382685, 0.01654523295093313, 0.02529335323852666, 0.024205729005131404, 0.03134374741969037, 0.029859060011566574, 0.02511247037656561, 0.023595003385312285, 0.2600882095961371, 0.22176949960791414, 0.24345278709672558, 0.24861703585146122, 0.2256577561139932, 0.21559376640280048, 0.2483470225197063, 0.25115089497017673, 0.22869540667846422, 0.06404572589915247, 0.061092061905534845, 0.05932408876180284, 0.07409724967182152, 0.06042413418098691, 0.08301467146364172, 0.06993008248311816, 0.05889654450388948, 0.06490848837679519, 0.12498004556964037, 0.13152608823745926, 0.12652676767184257, 0.18700321569462652, 0.11901569060661565, 0.11552509037247694, 0.1161162606827969, 0.10951441291855313, 0.12915908724663383, 0.1740509031697356, 0.16246984514866292, 0.17696283251889566, 0.17527238882273344, 0.16907051821779173, 0.1774325299767373, 0.19826217748553532, 0.17772940233133983, 0.16737295642713157, 0.1291901781364181, 0.11715961859533686, 0.12370098187284762, 0.12885095982573314, 0.14140944845816172, 0.10900314556857016, 0.14513459200346102, 0.13453135988232312, 0.1325855178311376, 0.17918581505358577, 0.18944429410853159, 0.18420239631488322, 0.169269708787246, 0.18078021819064838, 0.20548663546005375, 0.19624134563136664, 0.18434080857755542, 0.1876820495133925, 0.13720812422724826, 0.15152429430187675, 0.15134316031562467, 0.1528064150000088, 0.12689192428476037, 0.15371089129323445, 0.15468735730768235, 0.13466510578185675, 0.16135752742138887, 0.15285485127692588, 0.13124556929288134, 0.11614131256366655, 0.14718249449792187, 0.1222691642040229, 0.16864234340352358, 0.13034301061788212, 0.1263454294853018, 0.16267736633992247, 0.19830401443835577, 0.11910231227863866, 0.1901983941765798, 0.13688871325599905, 0.16171268391891047, 0.17177638863403522, 0.13888520131182214, 0.13474559836603517, 0.13911863382242196, 0.18024725800936414, 0.18330490006636202, 0.18985589654542423, 0.17297065449176896, 0.17077749899949835, 0.18694399291071662, 0.18662178921633732, 0.19652888756404385, 0.18303356884782074, 0.059027193301740555, 0.06785278233354253, 0.07268313019773054, 0.06036925320795383, 0.07084471727764119, 0.07261199978604305, 0.06482700513351558, 0.0612094161679152, 0.057993703456536205]}, "mutation_prompt": null}
{"id": "f21ed18c-d2c6-49bd-b1ad-38ff776dfee6", "solution": "import numpy as np\n\nclass AdaptiveOppositionDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def opposition_based_learning(self, population):\n        return self.lower_bound + self.upper_bound - population\n\n    def local_search(self, x, func):\n        for _ in range(3):  # Reduced local search steps for efficiency\n            trial = x + np.random.uniform(-0.05, 0.05, self.dim)  # Adjusted exploration range\n            trial = np.clip(trial, self.lower_bound, self.upper_bound)\n            if func(trial) < func(x):\n                x = trial\n        return x\n\n    def mutate(self, population, idx):\n        indices = np.delete(np.arange(self.population_size), idx)  # Simplified index handling\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        mutant = population[a] + self.F * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.CR\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        budget_used = self.population_size\n\n        while budget_used < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(population, i)\n                trial = self.crossover(population[i], mutant)\n                trial = self.local_search(trial, func)\n\n                trial_fitness = func(trial)\n                budget_used += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                # Opposition-based learning\n                if budget_used < self.budget:\n                    opposite = self.opposition_based_learning(population[i])\n                    opposite_fitness = func(opposite)\n                    budget_used += 1\n                    if opposite_fitness < fitness[i]:\n                        population[i] = opposite\n                        fitness[i] = opposite_fitness\n\n                if budget_used >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveOppositionDifferentialEvolution", "description": "Improved adaptive differential evolution with streamlined local search and mutation adaptation for enhanced efficiency.", "configspace": "", "generation": 2, "fitness": 0.1290567279232216, "feedback": "The algorithm AdaptiveOppositionDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.10.", "error": "", "parent_id": "f8ea6afc-03c9-4176-b407-b0b6b6662cd4", "metadata": {"aucs": [0.30804792792776114, 0.2261046431045194, 0.3029754239160424, 0.24113710785014308, 0.2776738661095999, 0.3073109943115304, 0.3022747906840745, 0.3057524400961623, 0.29982449085296325, 0.040584920288556536, 0.053676942796213156, 0.022315134349920274, 0.0347672512548135, 0.05212612516536774, 0.04175304435649796, 0.03469257734960196, 0.04335290466719399, 0.03430906278021173, 0.07972230290668703, 0.06745965886078287, 0.06210431165617214, 0.07525822260665516, 0.0702176443967717, 0.0795369770198413, 0.06484646988809672, 0.06307239089496675, 0.06444436621735894, 0.05829126281766672, 0.0448667333191437, 0.052164122190759166, 0.06795159722517019, 0.056508134912468866, 0.04628491336762086, 0.05561760953391237, 0.05171869859036782, 0.059272736294914696, 0.42201303003172086, 0.5030439251683524, 0.36727745765022146, 0.5941590073915858, 0.3882418076838827, 0.34719493306437166, 0.7452497226789379, 0.35527378597674153, 0.23694052352299855, 0.09091721275751552, 0.108115469241987, 0.092754582768517, 0.06512302627189037, 0.09745029420677076, 0.09698439973509354, 0.06882435728359415, 0.08661177729045799, 0.11301228256309237, 0.16241904256836226, 0.1911894923526054, 0.17880433337458979, 0.17965102293279234, 0.19745354057182507, 0.16477678326441036, 0.12999721060225733, 0.17510702280982315, 0.18210776664081973, 0.06686922068840995, 0.05398030474463145, 0.06178134663923229, 0.08246744029323072, 0.058606655365366356, 0.03947836586014397, 0.07858333012539531, 0.06600503163090576, 0.07589052751818759, 0.09413809791839844, 0.027946691576133165, 0.07360002022398782, 0.08120534544928681, 0.025381602622287724, 0.10327700517624672, 0.06840486273921975, 0.05312909538384014, 0.08446721950152425, 0.015503537038292992, 9.999999999998899e-05, 9.999999999998899e-05, 0.005346484216879777, 0.0023296250538449303, 0.003813992476439987, 0.004651027932658147, 0.013031624859022872, 0.016289120598888207, 0.10092384174635538, 0.09828207986045012, 0.1361146041400909, 0.08568472161612195, 0.07559214747204601, 0.07706317467288137, 0.11734108409413146, 0.10815068755243429, 0.12776614286152455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.048302564532983205, 0.033243555873489816, 0.03904404460632105, 0.023412406674766184, 0.02820477671665611, 0.04122521016328651, 0.05091373378989972, 0.031687579731008, 0.04133076275158165, 0.2799559091115812, 0.24305894406075468, 0.2574179420292608, 0.27661979162151296, 0.2714273619776767, 0.2673304659573934, 0.2688704136704143, 0.2539235186538038, 0.2948194499468556, 0.06099938372108682, 0.06611403415519745, 0.05985543513835889, 0.08666041127348612, 0.0586735900344727, 0.06754055444369755, 0.06297546493313244, 0.07630434694311095, 0.0660870487713473, 0.14173300407345923, 0.11090737499300862, 0.12121575453485856, 0.13500513731545527, 0.1418168125542767, 0.13718883675117177, 0.10356252619392015, 0.15893667424599967, 0.11233314360834645, 0.19456989561375948, 0.1815888758298212, 0.19308865690878385, 0.1884486800575501, 0.1827252051927385, 0.19421251227475056, 0.18430328014169584, 0.1975598612194741, 0.22487501582666258, 0.14497883696054037, 0.1422169977202391, 0.12999767222842873, 0.1383784981328774, 0.13148080143704466, 0.1391352371508241, 0.12970271561796742, 0.1499741524068, 0.1303076903697924, 0.17734742393968495, 0.1862366781233442, 0.18139646150576816, 0.1708242279174127, 0.17007934792005508, 0.18624339467860773, 0.18192429609681193, 0.16677552245006755, 0.18980430171316143, 0.15843849937713217, 0.15740244354387234, 0.13335938022057214, 0.15442733487673233, 0.13945477232272607, 0.14859886002332257, 0.15688733649243025, 0.15371604946253503, 0.16155897222857873, 0.13941315356268846, 0.13009953480648329, 0.15189942436673953, 0.1342344873870912, 0.13585226511824078, 0.16773089159293153, 0.14300094232796579, 0.15407200064320437, 0.13284710952826495, 0.14968796617540392, 0.17412861390954482, 0.14351281123860282, 0.1307061574187003, 0.14350747735753244, 0.14727537877544183, 0.1840191140131463, 0.11877208092366387, 0.13075008588390702, 0.19682285228369978, 0.1727146160016626, 0.17711167965595775, 0.17641087468498118, 0.1745994908175731, 0.17406709931722075, 0.1894787216630155, 0.18809780353724626, 0.17792900771510012, 0.06612733442881413, 0.07135257902189218, 0.06802369093501348, 0.07852358476270493, 0.06044881142868885, 0.07002133239822905, 0.05903862354200351, 0.059928293905183505, 0.0604218161368868]}, "mutation_prompt": null}
{"id": "6dec1e01-6238-42e3-a5d0-856630aaeb3b", "solution": "import numpy as np\n\nclass AdaptiveOppositionDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def opposition_based_learning(self, population):\n        return self.lower_bound + self.upper_bound - population\n\n    def local_search(self, x, func):\n        for _ in range(3):  # Reduced local search steps for efficiency\n            trial = x + np.random.uniform(-0.05, 0.05, self.dim)  # Adjusted exploration range\n            trial = np.clip(trial, self.lower_bound, self.upper_bound)\n            if func(trial) < func(x):\n                x = trial\n        return x\n\n    def mutate(self, population, idx):\n        indices = np.delete(np.arange(self.population_size), idx)  # Simplified index handling\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        mutant = population[a] + self.F * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.CR\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        budget_used = self.population_size\n\n        while budget_used < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(population, i)\n                trial = self.crossover(population[i], mutant)\n                trial = self.local_search(trial, func)\n\n                trial_fitness = func(trial)\n                budget_used += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                # Opposition-based learning\n                if budget_used < self.budget:\n                    opposite = self.opposition_based_learning(population[i])\n                    opposite_fitness = func(opposite)\n                    budget_used += 1\n                    if opposite_fitness < fitness[i]:\n                        population[i] = opposite\n                        fitness[i] = opposite_fitness\n\n                if budget_used >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveOppositionDifferentialEvolution", "description": "Improved adaptive differential evolution with streamlined local search and mutation adaptation for enhanced efficiency.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f21ed18c-d2c6-49bd-b1ad-38ff776dfee6", "metadata": {"aucs": [0.30804792792776114, 0.2261046431045194, 0.3029754239160424, 0.24113710785014308, 0.2776738661095999, 0.3073109943115304, 0.3022747906840745, 0.3057524400961623, 0.29982449085296325, 0.040584920288556536, 0.053676942796213156, 0.022315134349920274, 0.0347672512548135, 0.05212612516536774, 0.04175304435649796, 0.03469257734960196, 0.04335290466719399, 0.03430906278021173, 0.07972230290668703, 0.06745965886078287, 0.06210431165617214, 0.07525822260665516, 0.0702176443967717, 0.0795369770198413, 0.06484646988809672, 0.06307239089496675, 0.06444436621735894, 0.05829126281766672, 0.0448667333191437, 0.052164122190759166, 0.06795159722517019, 0.056508134912468866, 0.04628491336762086, 0.05561760953391237, 0.05171869859036782, 0.059272736294914696, 0.42201303003172086, 0.5030439251683524, 0.36727745765022146, 0.5941590073915858, 0.3882418076838827, 0.34719493306437166, 0.7452497226789379, 0.35527378597674153, 0.23694052352299855, 0.09091721275751552, 0.108115469241987, 0.092754582768517, 0.06512302627189037, 0.09745029420677076, 0.09698439973509354, 0.06882435728359415, 0.08661177729045799, 0.11301228256309237, 0.16241904256836226, 0.1911894923526054, 0.17880433337458979, 0.17965102293279234, 0.19745354057182507, 0.16477678326441036, 0.12999721060225733, 0.17510702280982315, 0.18210776664081973, 0.06686922068840995, 0.05398030474463145, 0.06178134663923229, 0.08246744029323072, 0.058606655365366356, 0.03947836586014397, 0.07858333012539531, 0.06600503163090576, 0.07589052751818759, 0.09413809791839844, 0.027946691576133165, 0.07360002022398782, 0.08120534544928681, 0.025381602622287724, 0.10327700517624672, 0.06840486273921975, 0.05312909538384014, 0.08446721950152425, 0.015503537038292992, 9.999999999998899e-05, 9.999999999998899e-05, 0.005346484216879777, 0.0023296250538449303, 0.003813992476439987, 0.004651027932658147, 0.013031624859022872, 0.016289120598888207, 0.10092384174635538, 0.09828207986045012, 0.1361146041400909, 0.08568472161612195, 0.07559214747204601, 0.07706317467288137, 0.11734108409413146, 0.10815068755243429, 0.12776614286152455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.048302564532983205, 0.033243555873489816, 0.03904404460632105, 0.023412406674766184, 0.02820477671665611, 0.04122521016328651, 0.05091373378989972, 0.031687579731008, 0.04133076275158165, 0.2799559091115812, 0.24305894406075468, 0.2574179420292608, 0.27661979162151296, 0.2714273619776767, 0.2673304659573934, 0.2688704136704143, 0.2539235186538038, 0.2948194499468556, 0.06099938372108682, 0.06611403415519745, 0.05985543513835889, 0.08666041127348612, 0.0586735900344727, 0.06754055444369755, 0.06297546493313244, 0.07630434694311095, 0.0660870487713473, 0.14173300407345923, 0.11090737499300862, 0.12121575453485856, 0.13500513731545527, 0.1418168125542767, 0.13718883675117177, 0.10356252619392015, 0.15893667424599967, 0.11233314360834645, 0.19456989561375948, 0.1815888758298212, 0.19308865690878385, 0.1884486800575501, 0.1827252051927385, 0.19421251227475056, 0.18430328014169584, 0.1975598612194741, 0.22487501582666258, 0.14497883696054037, 0.1422169977202391, 0.12999767222842873, 0.1383784981328774, 0.13148080143704466, 0.1391352371508241, 0.12970271561796742, 0.1499741524068, 0.1303076903697924, 0.17734742393968495, 0.1862366781233442, 0.18139646150576816, 0.1708242279174127, 0.17007934792005508, 0.18624339467860773, 0.18192429609681193, 0.16677552245006755, 0.18980430171316143, 0.15843849937713217, 0.15740244354387234, 0.13335938022057214, 0.15442733487673233, 0.13945477232272607, 0.14859886002332257, 0.15688733649243025, 0.15371604946253503, 0.16155897222857873, 0.13941315356268846, 0.13009953480648329, 0.15189942436673953, 0.1342344873870912, 0.13585226511824078, 0.16773089159293153, 0.14300094232796579, 0.15407200064320437, 0.13284710952826495, 0.14968796617540392, 0.17412861390954482, 0.14351281123860282, 0.1307061574187003, 0.14350747735753244, 0.14727537877544183, 0.1840191140131463, 0.11877208092366387, 0.13075008588390702, 0.19682285228369978, 0.1727146160016626, 0.17711167965595775, 0.17641087468498118, 0.1745994908175731, 0.17406709931722075, 0.1894787216630155, 0.18809780353724626, 0.17792900771510012, 0.06612733442881413, 0.07135257902189218, 0.06802369093501348, 0.07852358476270493, 0.06044881142868885, 0.07002133239822905, 0.05903862354200351, 0.059928293905183505, 0.0604218161368868]}, "mutation_prompt": null}
{"id": "a3550e6d-338b-454e-81a8-ff58dfa7c90c", "solution": "import numpy as np\n\nclass AdaptiveOppositionDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.5  # Differential weight\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def opposition_based_learning(self, population):\n        return self.lower_bound + self.upper_bound - population\n\n    def local_search(self, x, func):\n        for _ in range(3):  # Reduced local search steps for efficiency\n            trial = x + np.random.uniform(-0.05, 0.05, self.dim)  # Adjusted exploration range\n            trial = np.clip(trial, self.lower_bound, self.upper_bound)\n            if func(trial) < func(x):\n                x = trial\n        return x\n\n    def mutate(self, population, idx):\n        indices = np.delete(np.arange(self.population_size), idx)  # Simplified index handling\n        a, b, c = np.random.choice(indices, 3, replace=False)\n        mutant = population[a] + self.F * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.CR\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        budget_used = self.population_size\n\n        while budget_used < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(population, i)\n                trial = self.crossover(population[i], mutant)\n                trial = self.local_search(trial, func)\n\n                trial_fitness = func(trial)\n                budget_used += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                # Opposition-based learning\n                if budget_used < self.budget:\n                    opposite = self.opposition_based_learning(population[i])\n                    opposite_fitness = func(opposite)\n                    budget_used += 1\n                    if opposite_fitness < fitness[i]:\n                        population[i] = opposite\n                        fitness[i] = opposite_fitness\n\n                if budget_used >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveOppositionDifferentialEvolution", "description": "Improved adaptive differential evolution with streamlined local search and mutation adaptation for enhanced efficiency.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f21ed18c-d2c6-49bd-b1ad-38ff776dfee6", "metadata": {"aucs": [0.30804792792776114, 0.2261046431045194, 0.3029754239160424, 0.24113710785014308, 0.2776738661095999, 0.3073109943115304, 0.3022747906840745, 0.3057524400961623, 0.29982449085296325, 0.040584920288556536, 0.053676942796213156, 0.022315134349920274, 0.0347672512548135, 0.05212612516536774, 0.04175304435649796, 0.03469257734960196, 0.04335290466719399, 0.03430906278021173, 0.07972230290668703, 0.06745965886078287, 0.06210431165617214, 0.07525822260665516, 0.0702176443967717, 0.0795369770198413, 0.06484646988809672, 0.06307239089496675, 0.06444436621735894, 0.05829126281766672, 0.0448667333191437, 0.052164122190759166, 0.06795159722517019, 0.056508134912468866, 0.04628491336762086, 0.05561760953391237, 0.05171869859036782, 0.059272736294914696, 0.42201303003172086, 0.5030439251683524, 0.36727745765022146, 0.5941590073915858, 0.3882418076838827, 0.34719493306437166, 0.7452497226789379, 0.35527378597674153, 0.23694052352299855, 0.09091721275751552, 0.108115469241987, 0.092754582768517, 0.06512302627189037, 0.09745029420677076, 0.09698439973509354, 0.06882435728359415, 0.08661177729045799, 0.11301228256309237, 0.16241904256836226, 0.1911894923526054, 0.17880433337458979, 0.17965102293279234, 0.19745354057182507, 0.16477678326441036, 0.12999721060225733, 0.17510702280982315, 0.18210776664081973, 0.06686922068840995, 0.05398030474463145, 0.06178134663923229, 0.08246744029323072, 0.058606655365366356, 0.03947836586014397, 0.07858333012539531, 0.06600503163090576, 0.07589052751818759, 0.09413809791839844, 0.027946691576133165, 0.07360002022398782, 0.08120534544928681, 0.025381602622287724, 0.10327700517624672, 0.06840486273921975, 0.05312909538384014, 0.08446721950152425, 0.015503537038292992, 9.999999999998899e-05, 9.999999999998899e-05, 0.005346484216879777, 0.0023296250538449303, 0.003813992476439987, 0.004651027932658147, 0.013031624859022872, 0.016289120598888207, 0.10092384174635538, 0.09828207986045012, 0.1361146041400909, 0.08568472161612195, 0.07559214747204601, 0.07706317467288137, 0.11734108409413146, 0.10815068755243429, 0.12776614286152455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.048302564532983205, 0.033243555873489816, 0.03904404460632105, 0.023412406674766184, 0.02820477671665611, 0.04122521016328651, 0.05091373378989972, 0.031687579731008, 0.04133076275158165, 0.2799559091115812, 0.24305894406075468, 0.2574179420292608, 0.27661979162151296, 0.2714273619776767, 0.2673304659573934, 0.2688704136704143, 0.2539235186538038, 0.2948194499468556, 0.06099938372108682, 0.06611403415519745, 0.05985543513835889, 0.08666041127348612, 0.0586735900344727, 0.06754055444369755, 0.06297546493313244, 0.07630434694311095, 0.0660870487713473, 0.14173300407345923, 0.11090737499300862, 0.12121575453485856, 0.13500513731545527, 0.1418168125542767, 0.13718883675117177, 0.10356252619392015, 0.15893667424599967, 0.11233314360834645, 0.19456989561375948, 0.1815888758298212, 0.19308865690878385, 0.1884486800575501, 0.1827252051927385, 0.19421251227475056, 0.18430328014169584, 0.1975598612194741, 0.22487501582666258, 0.14497883696054037, 0.1422169977202391, 0.12999767222842873, 0.1383784981328774, 0.13148080143704466, 0.1391352371508241, 0.12970271561796742, 0.1499741524068, 0.1303076903697924, 0.17734742393968495, 0.1862366781233442, 0.18139646150576816, 0.1708242279174127, 0.17007934792005508, 0.18624339467860773, 0.18192429609681193, 0.16677552245006755, 0.18980430171316143, 0.15843849937713217, 0.15740244354387234, 0.13335938022057214, 0.15442733487673233, 0.13945477232272607, 0.14859886002332257, 0.15688733649243025, 0.15371604946253503, 0.16155897222857873, 0.13941315356268846, 0.13009953480648329, 0.15189942436673953, 0.1342344873870912, 0.13585226511824078, 0.16773089159293153, 0.14300094232796579, 0.15407200064320437, 0.13284710952826495, 0.14968796617540392, 0.17412861390954482, 0.14351281123860282, 0.1307061574187003, 0.14350747735753244, 0.14727537877544183, 0.1840191140131463, 0.11877208092366387, 0.13075008588390702, 0.19682285228369978, 0.1727146160016626, 0.17711167965595775, 0.17641087468498118, 0.1745994908175731, 0.17406709931722075, 0.1894787216630155, 0.18809780353724626, 0.17792900771510012, 0.06612733442881413, 0.07135257902189218, 0.06802369093501348, 0.07852358476270493, 0.06044881142868885, 0.07002133239822905, 0.05903862354200351, 0.059928293905183505, 0.0604218161368868]}, "mutation_prompt": null}
{"id": "93718620-16d9-4049-b2e7-38b6a4fa9955", "solution": "import numpy as np\n\nclass AdaptiveOppositionDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.6  # Adjusted differential weight for better exploration\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def opposition_based_learning(self, population):\n        return self.lower_bound + self.upper_bound - population\n\n    def local_search(self, x, func):\n        for _ in range(2):  # Reduced iterations for local search\n            trial = x + np.random.uniform(-0.1, 0.1, self.dim)  # Broadened exploration range\n            trial = np.clip(trial, self.lower_bound, self.upper_bound)\n            if func(trial) < func(x):\n                x = trial\n        return x\n\n    def mutate(self, population, idx):\n        a, b, c = np.random.choice(self.population_size, 3, replace=False)  # Simplified mutation index choice\n        mutant = population[a] + self.F * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.CR\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        budget_used = self.population_size\n\n        while budget_used < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(population, i)\n                trial = self.crossover(population[i], mutant)\n                trial = self.local_search(trial, func)\n\n                trial_fitness = func(trial)\n                budget_used += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                # Opposition-based learning\n                if budget_used < self.budget:\n                    opposite = self.opposition_based_learning(population[i])\n                    opposite_fitness = func(opposite)\n                    budget_used += 1\n                    if opposite_fitness < fitness[i]:\n                        population[i] = opposite\n                        fitness[i] = opposite_fitness\n\n                if budget_used >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveOppositionDifferentialEvolution", "description": "Enhanced adaptive differential evolution with refined local search and smarter mutation strategies for improved efficiency.", "configspace": "", "generation": 5, "fitness": 0.13936667166496908, "feedback": "The algorithm AdaptiveOppositionDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.12.", "error": "", "parent_id": "f21ed18c-d2c6-49bd-b1ad-38ff776dfee6", "metadata": {"aucs": [0.29033949247647917, 0.2985253183263723, 0.3009895455241842, 0.3520013700046557, 0.2932931669101412, 0.30301466507379193, 0.2968266355154947, 0.2967900944277859, 0.2748739886017464, 0.030443290412752844, 0.029949078723835232, 0.0505301288535549, 0.04205819624178109, 0.0484860785577943, 0.05525565545263822, 0.040592503128707214, 0.05627886314715491, 0.05680874627869892, 0.06919245945374441, 0.0674333104518613, 0.07115105299070679, 0.0690550926523158, 0.07117250270739883, 0.06784154808042164, 0.07856278389999427, 0.0627035240978997, 0.0677439678629429, 0.061043318484687026, 0.060461811570516666, 0.057911919883167906, 0.05984613003467543, 0.0723953815388797, 0.059501681590358735, 0.05205147783623687, 0.052099165448721174, 0.04657103029188836, 0.6410770797946262, 0.44785492882611466, 0.5450671236156086, 0.552907758337584, 0.41205520176713495, 0.7059532922143279, 0.5767402058879625, 0.6771324411496221, 0.544107934664998, 0.11853112519101361, 0.09466542218277296, 0.09874253134143673, 0.10073032934792159, 0.14974427638926302, 0.13690321268615369, 0.11362216395736469, 0.14374340240899441, 0.14501662327629605, 0.2156056118271934, 0.17680590907257243, 0.16621044458882261, 0.19323887290801744, 0.196888714935208, 0.17185017044590023, 0.1857822758643799, 0.18805107947982036, 0.1897583461532798, 0.06357556464320135, 0.061597065021175346, 0.07230733365060582, 0.062432259270203905, 0.046151781579100715, 0.06578320839860152, 0.07293648282603538, 0.06849736920646043, 0.058858309713418544, 0.05600848611538045, 0.07604503548184605, 0.05702142199184401, 0.05948688271033464, 0.07627556403460023, 0.08827373830821106, 0.09845477752726584, 0.06732160932226938, 0.0916274180407971, 0.0018733387192584328, 9.999999999998899e-05, 0.0003321377890184163, 0.004016239373577646, 0.038551912746652484, 0.003111343555257551, 0.006211978737689194, 0.003395944931055772, 0.003608573268035431, 0.09538474283244691, 0.10085406741549874, 0.12186190214408343, 0.1283707852486865, 0.0955399845066136, 0.08731962582403507, 0.0948630299887816, 0.12422344260387685, 0.08234657186906003, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04597979915115413, 0.048314267389460874, 0.0310082657389934, 0.029471328649547268, 0.04282470204134459, 0.053076095021082126, 0.02574052838001295, 0.0517926815091021, 0.04376883347982097, 0.26702473394411985, 0.27316713098206913, 0.26263670592506905, 0.29758743912723173, 0.2751768869350987, 0.2677785431876326, 0.2942097568666594, 0.25695667178722426, 0.2579498107871465, 0.062163099042437, 0.06789059364776262, 0.0599576033293755, 0.07099191902782132, 0.07754117217200729, 0.05736075860367851, 0.06885430051928365, 0.06022286963585899, 0.09504565838383972, 0.12595214156682744, 0.11709024595896012, 0.16778976130901302, 0.11412139359396511, 0.134384761159424, 0.1117146203620778, 0.14427397282117305, 0.13854520421902672, 0.12357343104947649, 0.20074847519793493, 0.17897211362148335, 0.20594748662009865, 0.2019433021350524, 0.19136505837678408, 0.18915102064938505, 0.18267476526046966, 0.21396881303764226, 0.195539767961584, 0.1299413524062979, 0.1267923534040858, 0.13807119560750036, 0.14506206448369152, 0.14159662149702013, 0.15440624242193957, 0.1386261674097068, 0.14340273531185666, 0.13600287329178717, 0.16709141868201294, 0.1641685478916144, 0.19067932507471452, 0.17479108836155988, 0.18287211005080972, 0.17860462406507616, 0.16735404759968953, 0.1678753290253726, 0.17007251254003442, 0.15543783841548886, 0.16219348347301765, 0.15483979795858593, 0.14686097667842546, 0.1609402616005411, 0.14142586030278637, 0.1461697738222678, 0.14804848904581236, 0.14972137816333764, 0.21269227064866414, 0.13372272521778883, 0.13636550733550812, 0.16948221130340957, 0.13843738909547665, 0.16678159659807335, 0.13069393093407178, 0.1435011260386171, 0.1769960620631995, 0.15173488179234118, 0.18495247780710788, 0.13358185961829583, 0.15285478597127022, 0.17248322536240634, 0.21117186873658889, 0.128407000349671, 0.1481710196648417, 0.18853317311545592, 0.18167950624062867, 0.19408820149552164, 0.17812613446337822, 0.20119061310161346, 0.17244515268066074, 0.18792857622783665, 0.19430946459968423, 0.1768801960125984, 0.19031852270032423, 0.0620214894676665, 0.07010311899528765, 0.06538938389964866, 0.06158737251832569, 0.06161379377915033, 0.06937129946137244, 0.060765787224726364, 0.07270395279224717, 0.06871705932626249]}, "mutation_prompt": null}
{"id": "415368f6-c4a0-4c37-a4e3-d0824bafc2d0", "solution": "import numpy as np\n\nclass AdaptiveOppositionDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.6  # Adjusted differential weight for better exploration\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def opposition_based_learning(self, population):\n        return self.lower_bound + self.upper_bound - population\n\n    def local_search(self, x, func):\n        for _ in range(2):  # Reduced iterations for local search\n            trial = x + np.random.uniform(-0.1, 0.1, self.dim)  # Broadened exploration range\n            trial = np.clip(trial, self.lower_bound, self.upper_bound)\n            if func(trial) < func(x):\n                x = trial\n        return x\n\n    def mutate(self, population, idx):\n        a, b, c = np.random.choice(self.population_size, 3, replace=False)  # Simplified mutation index choice\n        mutant = population[a] + self.F * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.CR\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        budget_used = self.population_size\n\n        while budget_used < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(population, i)\n                trial = self.crossover(population[i], mutant)\n                trial = self.local_search(trial, func)\n\n                trial_fitness = func(trial)\n                budget_used += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                # Opposition-based learning\n                if budget_used < self.budget:\n                    opposite = self.opposition_based_learning(population[i])\n                    opposite_fitness = func(opposite)\n                    budget_used += 1\n                    if opposite_fitness < fitness[i]:\n                        population[i] = opposite\n                        fitness[i] = opposite_fitness\n\n                if budget_used >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveOppositionDifferentialEvolution", "description": "Enhanced adaptive differential evolution with refined local search and smarter mutation strategies for improved efficiency.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "93718620-16d9-4049-b2e7-38b6a4fa9955", "metadata": {"aucs": [0.29033949247647917, 0.2985253183263723, 0.3009895455241842, 0.3520013700046557, 0.2932931669101412, 0.30301466507379193, 0.2968266355154947, 0.2967900944277859, 0.2748739886017464, 0.030443290412752844, 0.029949078723835232, 0.0505301288535549, 0.04205819624178109, 0.0484860785577943, 0.05525565545263822, 0.040592503128707214, 0.05627886314715491, 0.05680874627869892, 0.06919245945374441, 0.0674333104518613, 0.07115105299070679, 0.0690550926523158, 0.07117250270739883, 0.06784154808042164, 0.07856278389999427, 0.0627035240978997, 0.0677439678629429, 0.061043318484687026, 0.060461811570516666, 0.057911919883167906, 0.05984613003467543, 0.0723953815388797, 0.059501681590358735, 0.05205147783623687, 0.052099165448721174, 0.04657103029188836, 0.6410770797946262, 0.44785492882611466, 0.5450671236156086, 0.552907758337584, 0.41205520176713495, 0.7059532922143279, 0.5767402058879625, 0.6771324411496221, 0.544107934664998, 0.11853112519101361, 0.09466542218277296, 0.09874253134143673, 0.10073032934792159, 0.14974427638926302, 0.13690321268615369, 0.11362216395736469, 0.14374340240899441, 0.14501662327629605, 0.2156056118271934, 0.17680590907257243, 0.16621044458882261, 0.19323887290801744, 0.196888714935208, 0.17185017044590023, 0.1857822758643799, 0.18805107947982036, 0.1897583461532798, 0.06357556464320135, 0.061597065021175346, 0.07230733365060582, 0.062432259270203905, 0.046151781579100715, 0.06578320839860152, 0.07293648282603538, 0.06849736920646043, 0.058858309713418544, 0.05600848611538045, 0.07604503548184605, 0.05702142199184401, 0.05948688271033464, 0.07627556403460023, 0.08827373830821106, 0.09845477752726584, 0.06732160932226938, 0.0916274180407971, 0.0018733387192584328, 9.999999999998899e-05, 0.0003321377890184163, 0.004016239373577646, 0.038551912746652484, 0.003111343555257551, 0.006211978737689194, 0.003395944931055772, 0.003608573268035431, 0.09538474283244691, 0.10085406741549874, 0.12186190214408343, 0.1283707852486865, 0.0955399845066136, 0.08731962582403507, 0.0948630299887816, 0.12422344260387685, 0.08234657186906003, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04597979915115413, 0.048314267389460874, 0.0310082657389934, 0.029471328649547268, 0.04282470204134459, 0.053076095021082126, 0.02574052838001295, 0.0517926815091021, 0.04376883347982097, 0.26702473394411985, 0.27316713098206913, 0.26263670592506905, 0.29758743912723173, 0.2751768869350987, 0.2677785431876326, 0.2942097568666594, 0.25695667178722426, 0.2579498107871465, 0.062163099042437, 0.06789059364776262, 0.0599576033293755, 0.07099191902782132, 0.07754117217200729, 0.05736075860367851, 0.06885430051928365, 0.06022286963585899, 0.09504565838383972, 0.12595214156682744, 0.11709024595896012, 0.16778976130901302, 0.11412139359396511, 0.134384761159424, 0.1117146203620778, 0.14427397282117305, 0.13854520421902672, 0.12357343104947649, 0.20074847519793493, 0.17897211362148335, 0.20594748662009865, 0.2019433021350524, 0.19136505837678408, 0.18915102064938505, 0.18267476526046966, 0.21396881303764226, 0.195539767961584, 0.1299413524062979, 0.1267923534040858, 0.13807119560750036, 0.14506206448369152, 0.14159662149702013, 0.15440624242193957, 0.1386261674097068, 0.14340273531185666, 0.13600287329178717, 0.16709141868201294, 0.1641685478916144, 0.19067932507471452, 0.17479108836155988, 0.18287211005080972, 0.17860462406507616, 0.16735404759968953, 0.1678753290253726, 0.17007251254003442, 0.15543783841548886, 0.16219348347301765, 0.15483979795858593, 0.14686097667842546, 0.1609402616005411, 0.14142586030278637, 0.1461697738222678, 0.14804848904581236, 0.14972137816333764, 0.21269227064866414, 0.13372272521778883, 0.13636550733550812, 0.16948221130340957, 0.13843738909547665, 0.16678159659807335, 0.13069393093407178, 0.1435011260386171, 0.1769960620631995, 0.15173488179234118, 0.18495247780710788, 0.13358185961829583, 0.15285478597127022, 0.17248322536240634, 0.21117186873658889, 0.128407000349671, 0.1481710196648417, 0.18853317311545592, 0.18167950624062867, 0.19408820149552164, 0.17812613446337822, 0.20119061310161346, 0.17244515268066074, 0.18792857622783665, 0.19430946459968423, 0.1768801960125984, 0.19031852270032423, 0.0620214894676665, 0.07010311899528765, 0.06538938389964866, 0.06158737251832569, 0.06161379377915033, 0.06937129946137244, 0.060765787224726364, 0.07270395279224717, 0.06871705932626249]}, "mutation_prompt": null}
{"id": "ddfabb6d-962b-4024-b76b-14a31c91f73d", "solution": "import numpy as np\n\nclass AdaptiveOppositionDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.6  # Adjusted differential weight for better exploration\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def opposition_based_learning(self, population):\n        return self.lower_bound + self.upper_bound - population\n\n    def local_search(self, x, func):\n        for _ in range(2):  # Reduced iterations for local search\n            trial = x + np.random.uniform(-0.1, 0.1, self.dim)  # Broadened exploration range\n            trial = np.clip(trial, self.lower_bound, self.upper_bound)\n            if func(trial) < func(x):\n                x = trial\n        return x\n\n    def mutate(self, population, idx):\n        a, b, c = np.random.choice(self.population_size, 3, replace=False)  # Simplified mutation index choice\n        mutant = population[a] + self.F * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.CR\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        budget_used = self.population_size\n\n        while budget_used < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(population, i)\n                trial = self.crossover(population[i], mutant)\n                trial = self.local_search(trial, func)\n\n                trial_fitness = func(trial)\n                budget_used += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                # Opposition-based learning\n                if budget_used < self.budget:\n                    opposite = self.opposition_based_learning(population[i])\n                    opposite_fitness = func(opposite)\n                    budget_used += 1\n                    if opposite_fitness < fitness[i]:\n                        population[i] = opposite\n                        fitness[i] = opposite_fitness\n\n                if budget_used >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveOppositionDifferentialEvolution", "description": "Enhanced adaptive differential evolution with refined local search and smarter mutation strategies for improved efficiency.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "93718620-16d9-4049-b2e7-38b6a4fa9955", "metadata": {"aucs": [0.29033949247647917, 0.2985253183263723, 0.3009895455241842, 0.3520013700046557, 0.2932931669101412, 0.30301466507379193, 0.2968266355154947, 0.2967900944277859, 0.2748739886017464, 0.030443290412752844, 0.029949078723835232, 0.0505301288535549, 0.04205819624178109, 0.0484860785577943, 0.05525565545263822, 0.040592503128707214, 0.05627886314715491, 0.05680874627869892, 0.06919245945374441, 0.0674333104518613, 0.07115105299070679, 0.0690550926523158, 0.07117250270739883, 0.06784154808042164, 0.07856278389999427, 0.0627035240978997, 0.0677439678629429, 0.061043318484687026, 0.060461811570516666, 0.057911919883167906, 0.05984613003467543, 0.0723953815388797, 0.059501681590358735, 0.05205147783623687, 0.052099165448721174, 0.04657103029188836, 0.6410770797946262, 0.44785492882611466, 0.5450671236156086, 0.552907758337584, 0.41205520176713495, 0.7059532922143279, 0.5767402058879625, 0.6771324411496221, 0.544107934664998, 0.11853112519101361, 0.09466542218277296, 0.09874253134143673, 0.10073032934792159, 0.14974427638926302, 0.13690321268615369, 0.11362216395736469, 0.14374340240899441, 0.14501662327629605, 0.2156056118271934, 0.17680590907257243, 0.16621044458882261, 0.19323887290801744, 0.196888714935208, 0.17185017044590023, 0.1857822758643799, 0.18805107947982036, 0.1897583461532798, 0.06357556464320135, 0.061597065021175346, 0.07230733365060582, 0.062432259270203905, 0.046151781579100715, 0.06578320839860152, 0.07293648282603538, 0.06849736920646043, 0.058858309713418544, 0.05600848611538045, 0.07604503548184605, 0.05702142199184401, 0.05948688271033464, 0.07627556403460023, 0.08827373830821106, 0.09845477752726584, 0.06732160932226938, 0.0916274180407971, 0.0018733387192584328, 9.999999999998899e-05, 0.0003321377890184163, 0.004016239373577646, 0.038551912746652484, 0.003111343555257551, 0.006211978737689194, 0.003395944931055772, 0.003608573268035431, 0.09538474283244691, 0.10085406741549874, 0.12186190214408343, 0.1283707852486865, 0.0955399845066136, 0.08731962582403507, 0.0948630299887816, 0.12422344260387685, 0.08234657186906003, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04597979915115413, 0.048314267389460874, 0.0310082657389934, 0.029471328649547268, 0.04282470204134459, 0.053076095021082126, 0.02574052838001295, 0.0517926815091021, 0.04376883347982097, 0.26702473394411985, 0.27316713098206913, 0.26263670592506905, 0.29758743912723173, 0.2751768869350987, 0.2677785431876326, 0.2942097568666594, 0.25695667178722426, 0.2579498107871465, 0.062163099042437, 0.06789059364776262, 0.0599576033293755, 0.07099191902782132, 0.07754117217200729, 0.05736075860367851, 0.06885430051928365, 0.06022286963585899, 0.09504565838383972, 0.12595214156682744, 0.11709024595896012, 0.16778976130901302, 0.11412139359396511, 0.134384761159424, 0.1117146203620778, 0.14427397282117305, 0.13854520421902672, 0.12357343104947649, 0.20074847519793493, 0.17897211362148335, 0.20594748662009865, 0.2019433021350524, 0.19136505837678408, 0.18915102064938505, 0.18267476526046966, 0.21396881303764226, 0.195539767961584, 0.1299413524062979, 0.1267923534040858, 0.13807119560750036, 0.14506206448369152, 0.14159662149702013, 0.15440624242193957, 0.1386261674097068, 0.14340273531185666, 0.13600287329178717, 0.16709141868201294, 0.1641685478916144, 0.19067932507471452, 0.17479108836155988, 0.18287211005080972, 0.17860462406507616, 0.16735404759968953, 0.1678753290253726, 0.17007251254003442, 0.15543783841548886, 0.16219348347301765, 0.15483979795858593, 0.14686097667842546, 0.1609402616005411, 0.14142586030278637, 0.1461697738222678, 0.14804848904581236, 0.14972137816333764, 0.21269227064866414, 0.13372272521778883, 0.13636550733550812, 0.16948221130340957, 0.13843738909547665, 0.16678159659807335, 0.13069393093407178, 0.1435011260386171, 0.1769960620631995, 0.15173488179234118, 0.18495247780710788, 0.13358185961829583, 0.15285478597127022, 0.17248322536240634, 0.21117186873658889, 0.128407000349671, 0.1481710196648417, 0.18853317311545592, 0.18167950624062867, 0.19408820149552164, 0.17812613446337822, 0.20119061310161346, 0.17244515268066074, 0.18792857622783665, 0.19430946459968423, 0.1768801960125984, 0.19031852270032423, 0.0620214894676665, 0.07010311899528765, 0.06538938389964866, 0.06158737251832569, 0.06161379377915033, 0.06937129946137244, 0.060765787224726364, 0.07270395279224717, 0.06871705932626249]}, "mutation_prompt": null}
{"id": "c362c963-58eb-4f2f-8c80-96154afa694d", "solution": "import numpy as np\n\nclass AdaptiveOppositionDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.6  # Adjusted differential weight for better exploration\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def opposition_based_learning(self, population):\n        return self.lower_bound + self.upper_bound - population\n\n    def local_search(self, x, func):\n        for _ in range(2):  # Reduced iterations for local search\n            trial = x + np.random.uniform(-0.1, 0.1, self.dim)  # Broadened exploration range\n            trial = np.clip(trial, self.lower_bound, self.upper_bound)\n            if func(trial) < func(x):\n                x = trial\n        return x\n\n    def mutate(self, population, idx):\n        a, b, c = np.random.choice(self.population_size, 3, replace=False)  # Simplified mutation index choice\n        mutant = population[a] + self.F * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.CR\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        budget_used = self.population_size\n\n        while budget_used < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(population, i)\n                trial = self.crossover(population[i], mutant)\n                trial = self.local_search(trial, func)\n\n                trial_fitness = func(trial)\n                budget_used += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                # Opposition-based learning\n                if budget_used < self.budget:\n                    opposite = self.opposition_based_learning(population[i])\n                    opposite_fitness = func(opposite)\n                    budget_used += 1\n                    if opposite_fitness < fitness[i]:\n                        population[i] = opposite\n                        fitness[i] = opposite_fitness\n\n                if budget_used >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveOppositionDifferentialEvolution", "description": "Enhanced adaptive differential evolution with refined local search and smarter mutation strategies for improved efficiency.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "93718620-16d9-4049-b2e7-38b6a4fa9955", "metadata": {"aucs": [0.29033949247647917, 0.2985253183263723, 0.3009895455241842, 0.3520013700046557, 0.2932931669101412, 0.30301466507379193, 0.2968266355154947, 0.2967900944277859, 0.2748739886017464, 0.030443290412752844, 0.029949078723835232, 0.0505301288535549, 0.04205819624178109, 0.0484860785577943, 0.05525565545263822, 0.040592503128707214, 0.05627886314715491, 0.05680874627869892, 0.06919245945374441, 0.0674333104518613, 0.07115105299070679, 0.0690550926523158, 0.07117250270739883, 0.06784154808042164, 0.07856278389999427, 0.0627035240978997, 0.0677439678629429, 0.061043318484687026, 0.060461811570516666, 0.057911919883167906, 0.05984613003467543, 0.0723953815388797, 0.059501681590358735, 0.05205147783623687, 0.052099165448721174, 0.04657103029188836, 0.6410770797946262, 0.44785492882611466, 0.5450671236156086, 0.552907758337584, 0.41205520176713495, 0.7059532922143279, 0.5767402058879625, 0.6771324411496221, 0.544107934664998, 0.11853112519101361, 0.09466542218277296, 0.09874253134143673, 0.10073032934792159, 0.14974427638926302, 0.13690321268615369, 0.11362216395736469, 0.14374340240899441, 0.14501662327629605, 0.2156056118271934, 0.17680590907257243, 0.16621044458882261, 0.19323887290801744, 0.196888714935208, 0.17185017044590023, 0.1857822758643799, 0.18805107947982036, 0.1897583461532798, 0.06357556464320135, 0.061597065021175346, 0.07230733365060582, 0.062432259270203905, 0.046151781579100715, 0.06578320839860152, 0.07293648282603538, 0.06849736920646043, 0.058858309713418544, 0.05600848611538045, 0.07604503548184605, 0.05702142199184401, 0.05948688271033464, 0.07627556403460023, 0.08827373830821106, 0.09845477752726584, 0.06732160932226938, 0.0916274180407971, 0.0018733387192584328, 9.999999999998899e-05, 0.0003321377890184163, 0.004016239373577646, 0.038551912746652484, 0.003111343555257551, 0.006211978737689194, 0.003395944931055772, 0.003608573268035431, 0.09538474283244691, 0.10085406741549874, 0.12186190214408343, 0.1283707852486865, 0.0955399845066136, 0.08731962582403507, 0.0948630299887816, 0.12422344260387685, 0.08234657186906003, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04597979915115413, 0.048314267389460874, 0.0310082657389934, 0.029471328649547268, 0.04282470204134459, 0.053076095021082126, 0.02574052838001295, 0.0517926815091021, 0.04376883347982097, 0.26702473394411985, 0.27316713098206913, 0.26263670592506905, 0.29758743912723173, 0.2751768869350987, 0.2677785431876326, 0.2942097568666594, 0.25695667178722426, 0.2579498107871465, 0.062163099042437, 0.06789059364776262, 0.0599576033293755, 0.07099191902782132, 0.07754117217200729, 0.05736075860367851, 0.06885430051928365, 0.06022286963585899, 0.09504565838383972, 0.12595214156682744, 0.11709024595896012, 0.16778976130901302, 0.11412139359396511, 0.134384761159424, 0.1117146203620778, 0.14427397282117305, 0.13854520421902672, 0.12357343104947649, 0.20074847519793493, 0.17897211362148335, 0.20594748662009865, 0.2019433021350524, 0.19136505837678408, 0.18915102064938505, 0.18267476526046966, 0.21396881303764226, 0.195539767961584, 0.1299413524062979, 0.1267923534040858, 0.13807119560750036, 0.14506206448369152, 0.14159662149702013, 0.15440624242193957, 0.1386261674097068, 0.14340273531185666, 0.13600287329178717, 0.16709141868201294, 0.1641685478916144, 0.19067932507471452, 0.17479108836155988, 0.18287211005080972, 0.17860462406507616, 0.16735404759968953, 0.1678753290253726, 0.17007251254003442, 0.15543783841548886, 0.16219348347301765, 0.15483979795858593, 0.14686097667842546, 0.1609402616005411, 0.14142586030278637, 0.1461697738222678, 0.14804848904581236, 0.14972137816333764, 0.21269227064866414, 0.13372272521778883, 0.13636550733550812, 0.16948221130340957, 0.13843738909547665, 0.16678159659807335, 0.13069393093407178, 0.1435011260386171, 0.1769960620631995, 0.15173488179234118, 0.18495247780710788, 0.13358185961829583, 0.15285478597127022, 0.17248322536240634, 0.21117186873658889, 0.128407000349671, 0.1481710196648417, 0.18853317311545592, 0.18167950624062867, 0.19408820149552164, 0.17812613446337822, 0.20119061310161346, 0.17244515268066074, 0.18792857622783665, 0.19430946459968423, 0.1768801960125984, 0.19031852270032423, 0.0620214894676665, 0.07010311899528765, 0.06538938389964866, 0.06158737251832569, 0.06161379377915033, 0.06937129946137244, 0.060765787224726364, 0.07270395279224717, 0.06871705932626249]}, "mutation_prompt": null}
{"id": "92a2ce6d-1b6b-4579-968c-8fb8bb2a2609", "solution": "import numpy as np\n\nclass AdaptiveOppositionDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.6  # Adjusted differential weight for better exploration\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def opposition_based_learning(self, population):\n        return self.lower_bound + self.upper_bound - population\n\n    def local_search(self, x, func):\n        trial = x + np.random.uniform(-0.05, 0.05, self.dim)  # Narrower exploration range for precision\n        trial = np.clip(trial, self.lower_bound, self.upper_bound)\n        if func(trial) < func(x):\n            x = trial\n        return x\n\n    def mutate(self, population, idx):\n        b, c = np.random.choice(self.population_size, 2, replace=False)  # Reduced mutation index choice\n        mutant = population[idx] + self.F * (population[b] - population[c])  # Focused mutation around idx\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.CR\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        budget_used = self.population_size\n\n        while budget_used < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(population, i)\n                trial = self.crossover(population[i], mutant)\n                trial = self.local_search(trial, func)\n\n                trial_fitness = func(trial)\n                budget_used += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                # Opposition-based learning\n                if budget_used < self.budget:\n                    opposite = self.opposition_based_learning(population[i])\n                    opposite_fitness = func(opposite)\n                    budget_used += 1\n                    if opposite_fitness < fitness[i]:\n                        population[i] = opposite\n                        fitness[i] = opposite_fitness\n\n                if budget_used >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveOppositionDifferentialEvolution", "description": "Enhanced differential evolution with improved mutation selection, reduced function evaluations, and optimized local search for better performance.", "configspace": "", "generation": 9, "fitness": 0.12876452857736773, "feedback": "The algorithm AdaptiveOppositionDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.14.", "error": "", "parent_id": "93718620-16d9-4049-b2e7-38b6a4fa9955", "metadata": {"aucs": [0.2398188892361519, 0.21775371357039164, 0.3072341400709543, 0.22488147003011905, 0.2272709651717676, 0.23088408885774037, 0.24528196407890168, 0.2384309238571234, 0.2257415228197116, 0.008500376975386414, 0.0011452752571087244, 9.999999999998899e-05, 0.0011825370215927666, 9.999999999998899e-05, 0.0011897302143996091, 0.0016844795537166446, 9.999999999998899e-05, 0.004621672987888403, 0.06835032681364095, 0.058708816893741855, 0.05596583698326196, 0.07440570970280591, 0.060748935407304416, 0.06509423788937241, 0.049067490191892826, 0.06642700093829901, 0.06075863047196162, 0.050712941677763634, 0.03920005251367853, 0.05268849781820284, 0.038501831882855386, 0.046715131815807, 0.04746400970914455, 0.03600974920545452, 0.04291869436619655, 0.056015184422724795, 0.6567784135166623, 0.8491818627926583, 0.730729640190265, 0.6114330752863935, 0.8640338420213436, 0.5438715654551223, 0.5978358568968645, 0.5904240229236253, 0.6955120547826804, 0.10978732380785228, 0.09473228895051411, 0.08061148789098316, 0.09678644182237783, 0.08418375534602984, 0.09314455672049882, 0.074792417363712, 0.10275296696834335, 0.07674975240509829, 0.17393965553862512, 0.16209929575068238, 0.1670766008885608, 0.17161431731135035, 0.17913549351107705, 0.1395205683910261, 0.14553750028873425, 0.15774115700886437, 0.15408788722278788, 0.051413872542976025, 0.035069459237821676, 0.0295437223828805, 0.028100879049775762, 0.020592073172157832, 0.03352241932967259, 0.03919110711050966, 0.03567642377146274, 0.054948182409981006, 0.047059153552266086, 0.03747574807543719, 0.026231311082657527, 0.03381057216052119, 0.04744872584486526, 0.05380468025691498, 0.0514005457387573, 0.03039522754347379, 0.04750274887316153, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007781485149811473, 9.999999999998899e-05, 9.999999999998899e-05, 0.0027462988798055976, 9.999999999998899e-05, 0.009300923997667243, 0.0844052938139912, 0.11513103188066565, 0.08806513187668918, 0.10735095054985799, 0.10414775382445673, 0.06974463216684912, 0.10574457509012813, 0.08762197790693738, 0.09913239103868221, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025884487749759155, 0.013851077498695519, 0.02063887448418389, 0.009096560402509724, 0.006889683641678079, 0.016968636191503572, 0.021876912326633247, 0.015542310958605365, 0.026385239119266823, 0.22958104254169542, 0.242966487624119, 0.2568991770750465, 0.24986066424651188, 0.216524331121982, 0.24370868929880785, 0.259826678441773, 0.23368973713269559, 0.25068084651962974, 0.04997870023796347, 0.06174747435250394, 0.045690487889842424, 0.06640371603163508, 0.05119243627712511, 0.057711385766950674, 0.05823569044053578, 0.04696861115582218, 0.05583147768444341, 0.11417350033408236, 0.1848137281312171, 0.12781512971074693, 0.12822698329470827, 0.12161862008365765, 0.13504419172002236, 0.15976301574468454, 0.18723899495050123, 0.11859999468163918, 0.18015531047431155, 0.17693989413236777, 0.17885225848737518, 0.19634404331584232, 0.188849016134916, 0.16850737639756896, 0.17693893983023068, 0.17801633762728286, 0.20166310196570447, 0.14041540781201167, 0.12012182441152786, 0.11236451622216226, 0.14156313935052112, 0.13049655092629453, 0.1183716659637023, 0.13111652255009376, 0.12670909147078313, 0.11892983827210535, 0.16617813264090053, 0.18008409497506905, 0.17082707590178903, 0.16976755973636337, 0.16950719668040815, 0.16102671122403167, 0.17305642942811716, 0.1693882875808469, 0.20872340753234908, 0.14640358596463687, 0.1606464656712645, 0.15296757640826364, 0.15033628472877258, 0.15220893462154184, 0.1586684492068967, 0.1591180336581709, 0.15246703838592934, 0.1672124625959872, 0.138517999600972, 0.1372684275809679, 0.13468278454038263, 0.1592486057646103, 0.15408573527870761, 0.16546454583229897, 0.15713084534857713, 0.14860433692155062, 0.1408142087578057, 0.15325986391936608, 0.13324105839358658, 0.15932188024522098, 0.20320444058081688, 0.13429784233548703, 0.1418341869739237, 0.1495099404870418, 0.14885974391176793, 0.1490377779612907, 0.17908069385657222, 0.16446500047481916, 0.16954733053157411, 0.17651946969810617, 0.16807982069084026, 0.16728214293806376, 0.1802788171016353, 0.18253353785450288, 0.18015125950384936, 0.06845422613108987, 0.06266567239711551, 0.06278442087496805, 0.05981382607711416, 0.05885479722740328, 0.05596207876623882, 0.04958941413976081, 0.05790182713746539, 0.0652968845908124]}, "mutation_prompt": null}
{"id": "56eb20f9-a7f7-4bd4-acf7-10eea5485cef", "solution": "import numpy as np\n\nclass AdaptiveOppositionDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.6  # Adjusted differential weight for better exploration\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def opposition_based_learning(self, population):\n        return self.lower_bound + self.upper_bound - population\n\n    def local_search(self, x, func):\n        for _ in range(2):  # Reduced iterations for local search\n            trial = x + np.random.uniform(-0.1, 0.1, self.dim)  # Broadened exploration range\n            trial = np.clip(trial, self.lower_bound, self.upper_bound)\n            if func(trial) < func(x):\n                x = trial\n        return x\n\n    def mutate(self, population, idx):\n        a, b, c = np.random.choice(self.population_size, 3, replace=False)  # Simplified mutation index choice\n        mutant = population[a] + self.F * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.CR\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        budget_used = self.population_size\n\n        while budget_used < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(population, i)\n                trial = self.crossover(population[i], mutant)\n                trial = self.local_search(trial, func)\n\n                trial_fitness = func(trial)\n                budget_used += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                # Opposition-based learning\n                if budget_used < self.budget:\n                    opposite = self.opposition_based_learning(population[i])\n                    opposite_fitness = func(opposite)\n                    budget_used += 1\n                    if opposite_fitness < fitness[i]:\n                        population[i] = opposite\n                        fitness[i] = opposite_fitness\n\n                if budget_used >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveOppositionDifferentialEvolution", "description": "Enhanced adaptive differential evolution with refined local search and smarter mutation strategies for improved efficiency.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "93718620-16d9-4049-b2e7-38b6a4fa9955", "metadata": {"aucs": [0.29033949247647917, 0.2985253183263723, 0.3009895455241842, 0.3520013700046557, 0.2932931669101412, 0.30301466507379193, 0.2968266355154947, 0.2967900944277859, 0.2748739886017464, 0.030443290412752844, 0.029949078723835232, 0.0505301288535549, 0.04205819624178109, 0.0484860785577943, 0.05525565545263822, 0.040592503128707214, 0.05627886314715491, 0.05680874627869892, 0.06919245945374441, 0.0674333104518613, 0.07115105299070679, 0.0690550926523158, 0.07117250270739883, 0.06784154808042164, 0.07856278389999427, 0.0627035240978997, 0.0677439678629429, 0.061043318484687026, 0.060461811570516666, 0.057911919883167906, 0.05984613003467543, 0.0723953815388797, 0.059501681590358735, 0.05205147783623687, 0.052099165448721174, 0.04657103029188836, 0.6410770797946262, 0.44785492882611466, 0.5450671236156086, 0.552907758337584, 0.41205520176713495, 0.7059532922143279, 0.5767402058879625, 0.6771324411496221, 0.544107934664998, 0.11853112519101361, 0.09466542218277296, 0.09874253134143673, 0.10073032934792159, 0.14974427638926302, 0.13690321268615369, 0.11362216395736469, 0.14374340240899441, 0.14501662327629605, 0.2156056118271934, 0.17680590907257243, 0.16621044458882261, 0.19323887290801744, 0.196888714935208, 0.17185017044590023, 0.1857822758643799, 0.18805107947982036, 0.1897583461532798, 0.06357556464320135, 0.061597065021175346, 0.07230733365060582, 0.062432259270203905, 0.046151781579100715, 0.06578320839860152, 0.07293648282603538, 0.06849736920646043, 0.058858309713418544, 0.05600848611538045, 0.07604503548184605, 0.05702142199184401, 0.05948688271033464, 0.07627556403460023, 0.08827373830821106, 0.09845477752726584, 0.06732160932226938, 0.0916274180407971, 0.0018733387192584328, 9.999999999998899e-05, 0.0003321377890184163, 0.004016239373577646, 0.038551912746652484, 0.003111343555257551, 0.006211978737689194, 0.003395944931055772, 0.003608573268035431, 0.09538474283244691, 0.10085406741549874, 0.12186190214408343, 0.1283707852486865, 0.0955399845066136, 0.08731962582403507, 0.0948630299887816, 0.12422344260387685, 0.08234657186906003, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04597979915115413, 0.048314267389460874, 0.0310082657389934, 0.029471328649547268, 0.04282470204134459, 0.053076095021082126, 0.02574052838001295, 0.0517926815091021, 0.04376883347982097, 0.26702473394411985, 0.27316713098206913, 0.26263670592506905, 0.29758743912723173, 0.2751768869350987, 0.2677785431876326, 0.2942097568666594, 0.25695667178722426, 0.2579498107871465, 0.062163099042437, 0.06789059364776262, 0.0599576033293755, 0.07099191902782132, 0.07754117217200729, 0.05736075860367851, 0.06885430051928365, 0.06022286963585899, 0.09504565838383972, 0.12595214156682744, 0.11709024595896012, 0.16778976130901302, 0.11412139359396511, 0.134384761159424, 0.1117146203620778, 0.14427397282117305, 0.13854520421902672, 0.12357343104947649, 0.20074847519793493, 0.17897211362148335, 0.20594748662009865, 0.2019433021350524, 0.19136505837678408, 0.18915102064938505, 0.18267476526046966, 0.21396881303764226, 0.195539767961584, 0.1299413524062979, 0.1267923534040858, 0.13807119560750036, 0.14506206448369152, 0.14159662149702013, 0.15440624242193957, 0.1386261674097068, 0.14340273531185666, 0.13600287329178717, 0.16709141868201294, 0.1641685478916144, 0.19067932507471452, 0.17479108836155988, 0.18287211005080972, 0.17860462406507616, 0.16735404759968953, 0.1678753290253726, 0.17007251254003442, 0.15543783841548886, 0.16219348347301765, 0.15483979795858593, 0.14686097667842546, 0.1609402616005411, 0.14142586030278637, 0.1461697738222678, 0.14804848904581236, 0.14972137816333764, 0.21269227064866414, 0.13372272521778883, 0.13636550733550812, 0.16948221130340957, 0.13843738909547665, 0.16678159659807335, 0.13069393093407178, 0.1435011260386171, 0.1769960620631995, 0.15173488179234118, 0.18495247780710788, 0.13358185961829583, 0.15285478597127022, 0.17248322536240634, 0.21117186873658889, 0.128407000349671, 0.1481710196648417, 0.18853317311545592, 0.18167950624062867, 0.19408820149552164, 0.17812613446337822, 0.20119061310161346, 0.17244515268066074, 0.18792857622783665, 0.19430946459968423, 0.1768801960125984, 0.19031852270032423, 0.0620214894676665, 0.07010311899528765, 0.06538938389964866, 0.06158737251832569, 0.06161379377915033, 0.06937129946137244, 0.060765787224726364, 0.07270395279224717, 0.06871705932626249]}, "mutation_prompt": null}
{"id": "e23240a3-62c9-41c4-b77d-179abd2380b4", "solution": "import numpy as np\n\nclass AdaptiveOppositionDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.6  # Adjusted differential weight for better exploration\n        self.CR = 0.9  # Crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def opposition_based_learning(self, population):\n        return self.lower_bound + self.upper_bound - population\n\n    def local_search(self, x, func):\n        for _ in range(2):  # Reduced iterations for local search\n            trial = x + np.random.uniform(-0.1, 0.1, self.dim)  # Broadened exploration range\n            trial = np.clip(trial, self.lower_bound, self.upper_bound)\n            if func(trial) < func(x):\n                x = trial\n        return x\n\n    def mutate(self, population, idx):\n        a, b, c = np.random.choice(self.population_size, 3, replace=False)  # Simplified mutation index choice\n        mutant = population[a] + self.F * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.CR\n        if not np.any(cross_points):\n            cross_points[np.random.randint(0, self.dim)] = True\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        budget_used = self.population_size\n\n        while budget_used < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(population, i)\n                trial = self.crossover(population[i], mutant)\n                trial = self.local_search(trial, func)\n\n                trial_fitness = func(trial)\n                budget_used += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                # Opposition-based learning\n                if budget_used < self.budget:\n                    opposite = self.opposition_based_learning(population[i])\n                    opposite_fitness = func(opposite)\n                    budget_used += 1\n                    if opposite_fitness < fitness[i]:\n                        population[i] = opposite\n                        fitness[i] = opposite_fitness\n\n                if budget_used >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveOppositionDifferentialEvolution", "description": "Enhanced adaptive differential evolution with refined local search and smarter mutation strategies for improved efficiency.", "configspace": "", "generation": 6, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "93718620-16d9-4049-b2e7-38b6a4fa9955", "metadata": {"aucs": [0.29033949247647917, 0.2985253183263723, 0.3009895455241842, 0.3520013700046557, 0.2932931669101412, 0.30301466507379193, 0.2968266355154947, 0.2967900944277859, 0.2748739886017464, 0.030443290412752844, 0.029949078723835232, 0.0505301288535549, 0.04205819624178109, 0.0484860785577943, 0.05525565545263822, 0.040592503128707214, 0.05627886314715491, 0.05680874627869892, 0.06919245945374441, 0.0674333104518613, 0.07115105299070679, 0.0690550926523158, 0.07117250270739883, 0.06784154808042164, 0.07856278389999427, 0.0627035240978997, 0.0677439678629429, 0.061043318484687026, 0.060461811570516666, 0.057911919883167906, 0.05984613003467543, 0.0723953815388797, 0.059501681590358735, 0.05205147783623687, 0.052099165448721174, 0.04657103029188836, 0.6410770797946262, 0.44785492882611466, 0.5450671236156086, 0.552907758337584, 0.41205520176713495, 0.7059532922143279, 0.5767402058879625, 0.6771324411496221, 0.544107934664998, 0.11853112519101361, 0.09466542218277296, 0.09874253134143673, 0.10073032934792159, 0.14974427638926302, 0.13690321268615369, 0.11362216395736469, 0.14374340240899441, 0.14501662327629605, 0.2156056118271934, 0.17680590907257243, 0.16621044458882261, 0.19323887290801744, 0.196888714935208, 0.17185017044590023, 0.1857822758643799, 0.18805107947982036, 0.1897583461532798, 0.06357556464320135, 0.061597065021175346, 0.07230733365060582, 0.062432259270203905, 0.046151781579100715, 0.06578320839860152, 0.07293648282603538, 0.06849736920646043, 0.058858309713418544, 0.05600848611538045, 0.07604503548184605, 0.05702142199184401, 0.05948688271033464, 0.07627556403460023, 0.08827373830821106, 0.09845477752726584, 0.06732160932226938, 0.0916274180407971, 0.0018733387192584328, 9.999999999998899e-05, 0.0003321377890184163, 0.004016239373577646, 0.038551912746652484, 0.003111343555257551, 0.006211978737689194, 0.003395944931055772, 0.003608573268035431, 0.09538474283244691, 0.10085406741549874, 0.12186190214408343, 0.1283707852486865, 0.0955399845066136, 0.08731962582403507, 0.0948630299887816, 0.12422344260387685, 0.08234657186906003, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04597979915115413, 0.048314267389460874, 0.0310082657389934, 0.029471328649547268, 0.04282470204134459, 0.053076095021082126, 0.02574052838001295, 0.0517926815091021, 0.04376883347982097, 0.26702473394411985, 0.27316713098206913, 0.26263670592506905, 0.29758743912723173, 0.2751768869350987, 0.2677785431876326, 0.2942097568666594, 0.25695667178722426, 0.2579498107871465, 0.062163099042437, 0.06789059364776262, 0.0599576033293755, 0.07099191902782132, 0.07754117217200729, 0.05736075860367851, 0.06885430051928365, 0.06022286963585899, 0.09504565838383972, 0.12595214156682744, 0.11709024595896012, 0.16778976130901302, 0.11412139359396511, 0.134384761159424, 0.1117146203620778, 0.14427397282117305, 0.13854520421902672, 0.12357343104947649, 0.20074847519793493, 0.17897211362148335, 0.20594748662009865, 0.2019433021350524, 0.19136505837678408, 0.18915102064938505, 0.18267476526046966, 0.21396881303764226, 0.195539767961584, 0.1299413524062979, 0.1267923534040858, 0.13807119560750036, 0.14506206448369152, 0.14159662149702013, 0.15440624242193957, 0.1386261674097068, 0.14340273531185666, 0.13600287329178717, 0.16709141868201294, 0.1641685478916144, 0.19067932507471452, 0.17479108836155988, 0.18287211005080972, 0.17860462406507616, 0.16735404759968953, 0.1678753290253726, 0.17007251254003442, 0.15543783841548886, 0.16219348347301765, 0.15483979795858593, 0.14686097667842546, 0.1609402616005411, 0.14142586030278637, 0.1461697738222678, 0.14804848904581236, 0.14972137816333764, 0.21269227064866414, 0.13372272521778883, 0.13636550733550812, 0.16948221130340957, 0.13843738909547665, 0.16678159659807335, 0.13069393093407178, 0.1435011260386171, 0.1769960620631995, 0.15173488179234118, 0.18495247780710788, 0.13358185961829583, 0.15285478597127022, 0.17248322536240634, 0.21117186873658889, 0.128407000349671, 0.1481710196648417, 0.18853317311545592, 0.18167950624062867, 0.19408820149552164, 0.17812613446337822, 0.20119061310161346, 0.17244515268066074, 0.18792857622783665, 0.19430946459968423, 0.1768801960125984, 0.19031852270032423, 0.0620214894676665, 0.07010311899528765, 0.06538938389964866, 0.06158737251832569, 0.06161379377915033, 0.06937129946137244, 0.060765787224726364, 0.07270395279224717, 0.06871705932626249]}, "mutation_prompt": null}
{"id": "8b4798a7-48ea-4997-ad53-8c2d8d1033bc", "solution": "import numpy as np\n\nclass AdaptiveOppositionDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.7  # Increased differential weight for enhanced exploration\n        self.CR = 0.85  # Adjusted crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def opposition_based_learning(self, population):\n        return self.lower_bound + self.upper_bound - population\n\n    def local_search(self, x, func):\n        trial = x + np.random.uniform(-0.05, 0.05, self.dim)  # Narrowed exploration range\n        trial = np.clip(trial, self.lower_bound, self.upper_bound)\n        if func(trial) < func(x):\n            x = trial\n        return x\n\n    def mutate(self, population, idx):\n        a, b, c = np.random.choice(self.population_size, 3, replace=False)\n        mutant = population[a] + self.F * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.CR\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        budget_used = self.population_size\n\n        while budget_used < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(population, i)\n                trial = self.crossover(population[i], mutant)\n                trial = self.local_search(trial, func)\n\n                trial_fitness = func(trial)\n                budget_used += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if budget_used < self.budget:\n                    opposite = self.opposition_based_learning(population[i])\n                    opposite_fitness = func(opposite)\n                    budget_used += 1\n                    if opposite_fitness < fitness[i]:\n                        population[i] = opposite\n                        fitness[i] = opposite_fitness\n\n                if budget_used >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveOppositionDifferentialEvolution", "description": "Improved adaptive differential evolution with streamlined operations and dynamic parameter adjustment for enhanced convergence.", "configspace": "", "generation": 12, "fitness": 0.14721115529990833, "feedback": "The algorithm AdaptiveOppositionDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.16.", "error": "", "parent_id": "93718620-16d9-4049-b2e7-38b6a4fa9955", "metadata": {"aucs": [0.32089995619972067, 0.28764108336101657, 0.30427615702934274, 0.3450863267218862, 0.3115607102400493, 0.3246001071450614, 0.33835905137992217, 0.30111700961189813, 0.2826228032458208, 0.06950232555729141, 0.0494348944026507, 0.0695430146692908, 0.05879424399136279, 0.0874270108605888, 0.08450978602005121, 0.0804781940020981, 0.056728219256904744, 0.06572757919085837, 0.07385559053344004, 0.06655948104385301, 0.0711210656661524, 0.06474699623280833, 0.07071756966108311, 0.07010290238442829, 0.07644910551807405, 0.07286864492906575, 0.060006843435301604, 0.07023335334959735, 0.058846649303867515, 0.04862318190210624, 0.05766170699201645, 0.06041291300339813, 0.05461078582529699, 0.06743469404415958, 0.06724488306528853, 0.06641605526152838, 0.703387997120521, 0.8472871532257036, 0.7550073739898624, 0.866110932630028, 0.8440542395118598, 0.8433768117005536, 0.6206882644365246, 0.8422142330417006, 0.7837008775230981, 0.10802522707619933, 0.1039764298836926, 0.09747443104464892, 0.1099171028369672, 0.11046128645973807, 0.08893846444538345, 0.10887994011442692, 0.12750997925988028, 0.11422226872547414, 0.2079566024609264, 0.18450246717094565, 0.17641617667176268, 0.18986340877321306, 0.18410915737767242, 0.18156670572923506, 0.15941660193452267, 0.1894420809897237, 0.16977291820029272, 0.06692842215780526, 0.0707492225949592, 0.07186821582648084, 0.07493662125919853, 0.051755638744614085, 0.07779779902392825, 0.06556097496629687, 0.06916477591761161, 0.06043413743533688, 0.06648320802841112, 0.0474134160102927, 0.03580204228080597, 0.07956056164944836, 0.07869398848942988, 0.07635390455295199, 0.06332782581639274, 0.05661528231689994, 0.05239414921694863, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005543272137173982, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08422529739019413, 0.07567635923093041, 0.08608757839925618, 0.08881800405671125, 0.05007550201674016, 0.06093647840210048, 0.07918374195974243, 0.09574241705873665, 0.08695947846691798, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042146956255246226, 0.036517198681656704, 0.035362094746274275, 0.0365432127280747, 0.04215168528520841, 0.047026369196826234, 0.03411105673657899, 0.03372253707369166, 0.0330915211204692, 0.27628958892088384, 0.2801673973753426, 0.2633484401475672, 0.28819738217471724, 0.301830537005787, 0.27898342798799736, 0.30195359726078996, 0.2752167040591036, 0.27864943426884703, 0.059742109998854764, 0.07829458306897363, 0.05877632075802264, 0.058569033483667265, 0.060626315799628516, 0.06907993060435547, 0.06682400398067889, 0.06105494347039808, 0.07345581404610457, 0.1348792352568633, 0.107150147113242, 0.1344148900036295, 0.12583955685157722, 0.12508842024999833, 0.13377870472009723, 0.12578393789898368, 0.1444582810807038, 0.16346187731400263, 0.1892159659486199, 0.17207046295316764, 0.18540840581534246, 0.17530362463774185, 0.18216728922547176, 0.17691040132274116, 0.19513939764826993, 0.20679817860279381, 0.2095975430516035, 0.12839982201478106, 0.12970459377238452, 0.12419419037389923, 0.12584985341835686, 0.1257200020550816, 0.12568354308469354, 0.13176153416501657, 0.1432766665107087, 0.14600350027804365, 0.18444850681373692, 0.16426295539611147, 0.17388264828155864, 0.16246757775546683, 0.1569171266611269, 0.18988773063378306, 0.19175365486872142, 0.18316170802244958, 0.17577865228958567, 0.16140349992399738, 0.1642389701959177, 0.163945038826109, 0.1477685619660426, 0.16499193025681202, 0.15425026754154092, 0.16760261137752264, 0.1652678877452285, 0.16225127340666134, 0.1944052271909309, 0.14138065402256794, 0.15329822613113264, 0.15409645014881113, 0.12315301633415221, 0.15077746298651074, 0.12699934291195425, 0.14167057997053345, 0.13037973838829597, 0.197369105012562, 0.16180699731530335, 0.13555325204209656, 0.1522317737454807, 0.1739869826982785, 0.11163742047025405, 0.17645503996843348, 0.17966434121854458, 0.15331100164412548, 0.17397440084734517, 0.1803761503234349, 0.2039150871971096, 0.17106791276886235, 0.19784236320396198, 0.16962817893688897, 0.19032509091764482, 0.17821234159195387, 0.19287687322524683, 0.06311162397576431, 0.07384897708406135, 0.05951795864713372, 0.06905968624536618, 0.06452558891401894, 0.06263407673310195, 0.06367451772222088, 0.07884048909070884, 0.061629393734776605]}, "mutation_prompt": null}
{"id": "c528a974-18cc-4681-8dbb-3274bb273903", "solution": "import numpy as np\n\nclass AdaptiveOppositionDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.7  # Increased differential weight for enhanced exploration\n        self.CR = 0.85  # Adjusted crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def opposition_based_learning(self, population):\n        return self.lower_bound + self.upper_bound - population\n\n    def local_search(self, x, func):\n        trial = x + np.random.uniform(-0.05, 0.05, self.dim)  # Narrowed exploration range\n        trial = np.clip(trial, self.lower_bound, self.upper_bound)\n        if func(trial) < func(x):\n            x = trial\n        return x\n\n    def mutate(self, population, idx):\n        a, b, c = np.random.choice(self.population_size, 3, replace=False)\n        mutant = population[a] + self.F * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.CR\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        budget_used = self.population_size\n\n        while budget_used < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(population, i)\n                trial = self.crossover(population[i], mutant)\n                trial = self.local_search(trial, func)\n\n                trial_fitness = func(trial)\n                budget_used += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if budget_used < self.budget:\n                    opposite = self.opposition_based_learning(population[i])\n                    opposite_fitness = func(opposite)\n                    budget_used += 1\n                    if opposite_fitness < fitness[i]:\n                        population[i] = opposite\n                        fitness[i] = opposite_fitness\n\n                if budget_used >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveOppositionDifferentialEvolution", "description": "Improved adaptive differential evolution with streamlined operations and dynamic parameter adjustment for enhanced convergence.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8b4798a7-48ea-4997-ad53-8c2d8d1033bc", "metadata": {"aucs": [0.32089995619972067, 0.28764108336101657, 0.30427615702934274, 0.3450863267218862, 0.3115607102400493, 0.3246001071450614, 0.33835905137992217, 0.30111700961189813, 0.2826228032458208, 0.06950232555729141, 0.0494348944026507, 0.0695430146692908, 0.05879424399136279, 0.0874270108605888, 0.08450978602005121, 0.0804781940020981, 0.056728219256904744, 0.06572757919085837, 0.07385559053344004, 0.06655948104385301, 0.0711210656661524, 0.06474699623280833, 0.07071756966108311, 0.07010290238442829, 0.07644910551807405, 0.07286864492906575, 0.060006843435301604, 0.07023335334959735, 0.058846649303867515, 0.04862318190210624, 0.05766170699201645, 0.06041291300339813, 0.05461078582529699, 0.06743469404415958, 0.06724488306528853, 0.06641605526152838, 0.703387997120521, 0.8472871532257036, 0.7550073739898624, 0.866110932630028, 0.8440542395118598, 0.8433768117005536, 0.6206882644365246, 0.8422142330417006, 0.7837008775230981, 0.10802522707619933, 0.1039764298836926, 0.09747443104464892, 0.1099171028369672, 0.11046128645973807, 0.08893846444538345, 0.10887994011442692, 0.12750997925988028, 0.11422226872547414, 0.2079566024609264, 0.18450246717094565, 0.17641617667176268, 0.18986340877321306, 0.18410915737767242, 0.18156670572923506, 0.15941660193452267, 0.1894420809897237, 0.16977291820029272, 0.06692842215780526, 0.0707492225949592, 0.07186821582648084, 0.07493662125919853, 0.051755638744614085, 0.07779779902392825, 0.06556097496629687, 0.06916477591761161, 0.06043413743533688, 0.06648320802841112, 0.0474134160102927, 0.03580204228080597, 0.07956056164944836, 0.07869398848942988, 0.07635390455295199, 0.06332782581639274, 0.05661528231689994, 0.05239414921694863, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005543272137173982, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08422529739019413, 0.07567635923093041, 0.08608757839925618, 0.08881800405671125, 0.05007550201674016, 0.06093647840210048, 0.07918374195974243, 0.09574241705873665, 0.08695947846691798, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042146956255246226, 0.036517198681656704, 0.035362094746274275, 0.0365432127280747, 0.04215168528520841, 0.047026369196826234, 0.03411105673657899, 0.03372253707369166, 0.0330915211204692, 0.27628958892088384, 0.2801673973753426, 0.2633484401475672, 0.28819738217471724, 0.301830537005787, 0.27898342798799736, 0.30195359726078996, 0.2752167040591036, 0.27864943426884703, 0.059742109998854764, 0.07829458306897363, 0.05877632075802264, 0.058569033483667265, 0.060626315799628516, 0.06907993060435547, 0.06682400398067889, 0.06105494347039808, 0.07345581404610457, 0.1348792352568633, 0.107150147113242, 0.1344148900036295, 0.12583955685157722, 0.12508842024999833, 0.13377870472009723, 0.12578393789898368, 0.1444582810807038, 0.16346187731400263, 0.1892159659486199, 0.17207046295316764, 0.18540840581534246, 0.17530362463774185, 0.18216728922547176, 0.17691040132274116, 0.19513939764826993, 0.20679817860279381, 0.2095975430516035, 0.12839982201478106, 0.12970459377238452, 0.12419419037389923, 0.12584985341835686, 0.1257200020550816, 0.12568354308469354, 0.13176153416501657, 0.1432766665107087, 0.14600350027804365, 0.18444850681373692, 0.16426295539611147, 0.17388264828155864, 0.16246757775546683, 0.1569171266611269, 0.18988773063378306, 0.19175365486872142, 0.18316170802244958, 0.17577865228958567, 0.16140349992399738, 0.1642389701959177, 0.163945038826109, 0.1477685619660426, 0.16499193025681202, 0.15425026754154092, 0.16760261137752264, 0.1652678877452285, 0.16225127340666134, 0.1944052271909309, 0.14138065402256794, 0.15329822613113264, 0.15409645014881113, 0.12315301633415221, 0.15077746298651074, 0.12699934291195425, 0.14167057997053345, 0.13037973838829597, 0.197369105012562, 0.16180699731530335, 0.13555325204209656, 0.1522317737454807, 0.1739869826982785, 0.11163742047025405, 0.17645503996843348, 0.17966434121854458, 0.15331100164412548, 0.17397440084734517, 0.1803761503234349, 0.2039150871971096, 0.17106791276886235, 0.19784236320396198, 0.16962817893688897, 0.19032509091764482, 0.17821234159195387, 0.19287687322524683, 0.06311162397576431, 0.07384897708406135, 0.05951795864713372, 0.06905968624536618, 0.06452558891401894, 0.06263407673310195, 0.06367451772222088, 0.07884048909070884, 0.061629393734776605]}, "mutation_prompt": null}
{"id": "d744a4ef-e5e5-408c-a891-5a3193a9f8c7", "solution": "import numpy as np\n\nclass AdaptiveOppositionDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.7  # Increased differential weight for enhanced exploration\n        self.CR = 0.85  # Adjusted crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def opposition_based_learning(self, population):\n        return self.lower_bound + self.upper_bound - population\n\n    def local_search(self, x, func):\n        trial = x + np.random.uniform(-0.05, 0.05, self.dim)  # Narrowed exploration range\n        trial = np.clip(trial, self.lower_bound, self.upper_bound)\n        if func(trial) < func(x):\n            x = trial\n        return x\n\n    def mutate(self, population, idx):\n        a, b, c = np.random.choice(self.population_size, 3, replace=False)\n        mutant = population[a] + self.F * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.CR\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        budget_used = self.population_size\n\n        while budget_used < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(population, i)\n                trial = self.crossover(population[i], mutant)\n                trial = self.local_search(trial, func)\n\n                trial_fitness = func(trial)\n                budget_used += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if budget_used < self.budget:\n                    opposite = self.opposition_based_learning(population[i])\n                    opposite_fitness = func(opposite)\n                    budget_used += 1\n                    if opposite_fitness < fitness[i]:\n                        population[i] = opposite\n                        fitness[i] = opposite_fitness\n\n                if budget_used >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveOppositionDifferentialEvolution", "description": "Improved adaptive differential evolution with streamlined operations and dynamic parameter adjustment for enhanced convergence.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8b4798a7-48ea-4997-ad53-8c2d8d1033bc", "metadata": {"aucs": [0.32089995619972067, 0.28764108336101657, 0.30427615702934274, 0.3450863267218862, 0.3115607102400493, 0.3246001071450614, 0.33835905137992217, 0.30111700961189813, 0.2826228032458208, 0.06950232555729141, 0.0494348944026507, 0.0695430146692908, 0.05879424399136279, 0.0874270108605888, 0.08450978602005121, 0.0804781940020981, 0.056728219256904744, 0.06572757919085837, 0.07385559053344004, 0.06655948104385301, 0.0711210656661524, 0.06474699623280833, 0.07071756966108311, 0.07010290238442829, 0.07644910551807405, 0.07286864492906575, 0.060006843435301604, 0.07023335334959735, 0.058846649303867515, 0.04862318190210624, 0.05766170699201645, 0.06041291300339813, 0.05461078582529699, 0.06743469404415958, 0.06724488306528853, 0.06641605526152838, 0.703387997120521, 0.8472871532257036, 0.7550073739898624, 0.866110932630028, 0.8440542395118598, 0.8433768117005536, 0.6206882644365246, 0.8422142330417006, 0.7837008775230981, 0.10802522707619933, 0.1039764298836926, 0.09747443104464892, 0.1099171028369672, 0.11046128645973807, 0.08893846444538345, 0.10887994011442692, 0.12750997925988028, 0.11422226872547414, 0.2079566024609264, 0.18450246717094565, 0.17641617667176268, 0.18986340877321306, 0.18410915737767242, 0.18156670572923506, 0.15941660193452267, 0.1894420809897237, 0.16977291820029272, 0.06692842215780526, 0.0707492225949592, 0.07186821582648084, 0.07493662125919853, 0.051755638744614085, 0.07779779902392825, 0.06556097496629687, 0.06916477591761161, 0.06043413743533688, 0.06648320802841112, 0.0474134160102927, 0.03580204228080597, 0.07956056164944836, 0.07869398848942988, 0.07635390455295199, 0.06332782581639274, 0.05661528231689994, 0.05239414921694863, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005543272137173982, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08422529739019413, 0.07567635923093041, 0.08608757839925618, 0.08881800405671125, 0.05007550201674016, 0.06093647840210048, 0.07918374195974243, 0.09574241705873665, 0.08695947846691798, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042146956255246226, 0.036517198681656704, 0.035362094746274275, 0.0365432127280747, 0.04215168528520841, 0.047026369196826234, 0.03411105673657899, 0.03372253707369166, 0.0330915211204692, 0.27628958892088384, 0.2801673973753426, 0.2633484401475672, 0.28819738217471724, 0.301830537005787, 0.27898342798799736, 0.30195359726078996, 0.2752167040591036, 0.27864943426884703, 0.059742109998854764, 0.07829458306897363, 0.05877632075802264, 0.058569033483667265, 0.060626315799628516, 0.06907993060435547, 0.06682400398067889, 0.06105494347039808, 0.07345581404610457, 0.1348792352568633, 0.107150147113242, 0.1344148900036295, 0.12583955685157722, 0.12508842024999833, 0.13377870472009723, 0.12578393789898368, 0.1444582810807038, 0.16346187731400263, 0.1892159659486199, 0.17207046295316764, 0.18540840581534246, 0.17530362463774185, 0.18216728922547176, 0.17691040132274116, 0.19513939764826993, 0.20679817860279381, 0.2095975430516035, 0.12839982201478106, 0.12970459377238452, 0.12419419037389923, 0.12584985341835686, 0.1257200020550816, 0.12568354308469354, 0.13176153416501657, 0.1432766665107087, 0.14600350027804365, 0.18444850681373692, 0.16426295539611147, 0.17388264828155864, 0.16246757775546683, 0.1569171266611269, 0.18988773063378306, 0.19175365486872142, 0.18316170802244958, 0.17577865228958567, 0.16140349992399738, 0.1642389701959177, 0.163945038826109, 0.1477685619660426, 0.16499193025681202, 0.15425026754154092, 0.16760261137752264, 0.1652678877452285, 0.16225127340666134, 0.1944052271909309, 0.14138065402256794, 0.15329822613113264, 0.15409645014881113, 0.12315301633415221, 0.15077746298651074, 0.12699934291195425, 0.14167057997053345, 0.13037973838829597, 0.197369105012562, 0.16180699731530335, 0.13555325204209656, 0.1522317737454807, 0.1739869826982785, 0.11163742047025405, 0.17645503996843348, 0.17966434121854458, 0.15331100164412548, 0.17397440084734517, 0.1803761503234349, 0.2039150871971096, 0.17106791276886235, 0.19784236320396198, 0.16962817893688897, 0.19032509091764482, 0.17821234159195387, 0.19287687322524683, 0.06311162397576431, 0.07384897708406135, 0.05951795864713372, 0.06905968624536618, 0.06452558891401894, 0.06263407673310195, 0.06367451772222088, 0.07884048909070884, 0.061629393734776605]}, "mutation_prompt": null}
{"id": "6b2f5479-f2fa-4de9-b586-acca7401e36f", "solution": "import numpy as np\n\nclass AdaptiveOppositionDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.7\n        self.CR = 0.85\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def opposition_based_learning(self, population):\n        return self.lower_bound + self.upper_bound - population\n\n    def local_search(self, x, func):\n        trial = x + np.random.uniform(-0.05, 0.05, self.dim)\n        trial = np.clip(trial, self.lower_bound, self.upper_bound)\n        if func(trial) < func(x):\n            x = trial\n        return x\n\n    def mutate(self, population, idx):\n        a, b, c = np.random.choice(self.population_size, 3, replace=False)\n        mutant = population[a] + self.F * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.CR\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        budget_used = self.population_size\n\n        while budget_used < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(population, i)\n                trial = self.crossover(population[i], mutant)\n                trial = self.local_search(trial, func)\n\n                trial_fitness = func(trial)\n                budget_used += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if budget_used < self.budget:\n                    opposite = self.opposition_based_learning(population[i])\n                    opposite_fitness = func(opposite)\n                    budget_used += 1\n                    if opposite_fitness < fitness[i]:\n                        population[i] = opposite\n                        fitness[i] = opposite_fitness\n\n                if budget_used >= self.budget:\n                    break\n\n            if np.random.rand() < 0.1:  # Occasional random restart to explore new areas\n                random_idx = np.random.randint(self.population_size)\n                population[random_idx] = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                fitness[random_idx] = func(population[random_idx])\n                budget_used += 1\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveOppositionDifferentialEvolution", "description": "Optimized adaptive differential evolution with enhanced mutation strategy and reduced complexity for better performance.", "configspace": "", "generation": 15, "fitness": 0.14486980297786337, "feedback": "The algorithm AdaptiveOppositionDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.14.", "error": "", "parent_id": "8b4798a7-48ea-4997-ad53-8c2d8d1033bc", "metadata": {"aucs": [0.28739867977017886, 0.2736214575174307, 0.2925719030822367, 0.30553769041556555, 0.3243486820485817, 0.3159426228162844, 0.3174406056689436, 0.29531168628162463, 0.3122786466738705, 0.06794464834387459, 0.0630454875999954, 0.0639290651097435, 0.07151731097784253, 0.06374913295175033, 0.0706816290922676, 0.062375518771889626, 0.08656682421924, 0.0719577882452409, 0.06669044654565737, 0.06241302886213074, 0.07749289919954061, 0.07728080906563628, 0.0647219258387175, 0.07508111220371338, 0.08053244675395976, 0.06849339303183877, 0.07233584453742992, 0.05882872680585349, 0.05435037737384396, 0.05640925087017368, 0.06550667565156565, 0.058543401586479415, 0.06399026617784698, 0.05705842800240357, 0.05420148340455799, 0.06731293463375931, 0.6604847478329209, 0.8609715930961062, 0.717196950675052, 0.685038748547991, 0.7645431556545272, 0.6849515514575862, 0.6286071381868663, 0.70886507545169, 0.8121842869355194, 0.11759204795611744, 0.1135400090987716, 0.09493945504812706, 0.10739056246545986, 0.10999989508911312, 0.11777121073919028, 0.11089620814345014, 0.12954059888774028, 0.1090109025339816, 0.17905326681146194, 0.17669494735960656, 0.16359332513792035, 0.19000965152878913, 0.18932266934173225, 0.19331992440569534, 0.18015967283539536, 0.1769585023256346, 0.1945321124641849, 0.0746863413420078, 0.07019214787794559, 0.05521052419732009, 0.09687345566856853, 0.06956978567532301, 0.08479165901316588, 0.06783465308462999, 0.05482088885015912, 0.08771429517999563, 0.07805720892124335, 0.07251732291553781, 0.08931016706427386, 0.07631496300800977, 0.04785900607244897, 0.06314630033702362, 0.04793313541076316, 0.0405558274637533, 0.05220675412885012, 0.011648119410117896, 0.007221580616327605, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011230994840659703, 0.000777221630977154, 9.999999999998899e-05, 0.00048757293986056993, 0.0044898551585920154, 0.09405937101036577, 0.07769381470647818, 0.09160336598649244, 0.07861104758237125, 0.061143263566658446, 0.06325348917168716, 0.09468166363067354, 0.09479057721742778, 0.06946216942706818, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028313690791106128, 0.027634920966009613, 0.04660078307606841, 0.04308728494140235, 0.03774655489911782, 0.027571388163239008, 0.036348036594824995, 0.045979396271760065, 0.05305087410419895, 0.2435892213485309, 0.31130386065519466, 0.2842453387181819, 0.29438461794254955, 0.29366866643944467, 0.27987531341608507, 0.2967243599507061, 0.2771640644417057, 0.3084691635197774, 0.07722930415081575, 0.07175331603994617, 0.07010789373258774, 0.061457736621940096, 0.06528411882428631, 0.06233572036454338, 0.07034902429775935, 0.06337433315326746, 0.07915106813067374, 0.12402786805589272, 0.10943370117551932, 0.12682589072355932, 0.13653957551756102, 0.12587239189874033, 0.1424278791709156, 0.12919208533077398, 0.1444582810807038, 0.11480272572779027, 0.19749180573964908, 0.19811456661553883, 0.18321624190923724, 0.17604058818380053, 0.1848358096157069, 0.19211380947137302, 0.19733993748852208, 0.2006363583989178, 0.19498418530064088, 0.11453704698209644, 0.13017195262729087, 0.1239860158005196, 0.12871932670106545, 0.13635994964040943, 0.12680580755483983, 0.13231178814977718, 0.13297720778354982, 0.1379252182765438, 0.1841688045698947, 0.16041141063951203, 0.1612641418206393, 0.16917135581379084, 0.16623172109715356, 0.18156103046550742, 0.17439421405231292, 0.1775162483402135, 0.17098100759919, 0.15199563596331278, 0.16519920295532065, 0.15474454851746866, 0.15418618330502054, 0.15338020887090675, 0.13886418449964621, 0.1529286313926126, 0.1661354255451466, 0.16378914135305245, 0.1529522902499626, 0.1478459722637745, 0.13191293699729523, 0.17005142942951879, 0.12274775394226234, 0.15019988195183065, 0.14432110454741165, 0.15474303510565968, 0.1308586334178159, 0.20129810389486258, 0.1717704227549106, 0.13888673426763543, 0.11166888757508864, 0.15778465495009808, 0.13304864076824818, 0.2309551426368276, 0.19109524281004375, 0.187095236099461, 0.18026276877821423, 0.1743902682490618, 0.1810640265800807, 0.18380311958760964, 0.19784236320396198, 0.16713371469505744, 0.19032509091764482, 0.1897259080294521, 0.19975769874912697, 0.060876102060696935, 0.06166465873359506, 0.06553002115536688, 0.06242501924204846, 0.06052296730322282, 0.05936701621680074, 0.06365049012796953, 0.058214997756206865, 0.07374225699981596]}, "mutation_prompt": null}
{"id": "01fe1cc1-f358-458c-bc0d-59a872025985", "solution": "import numpy as np\n\nclass AdaptiveOppositionDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.7  # Increased differential weight for enhanced exploration\n        self.CR = 0.85  # Adjusted crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def opposition_based_learning(self, population):\n        return self.lower_bound + self.upper_bound - population\n\n    def local_search(self, x, func):\n        trial = x + np.random.uniform(-0.05, 0.05, self.dim)  # Narrowed exploration range\n        trial = np.clip(trial, self.lower_bound, self.upper_bound)\n        if func(trial) < func(x):\n            x = trial\n        return x\n\n    def mutate(self, population, idx):\n        a, b, c = np.random.choice(self.population_size, 3, replace=False)\n        mutant = population[a] + self.F * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.CR\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        budget_used = self.population_size\n\n        while budget_used < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(population, i)\n                trial = self.crossover(population[i], mutant)\n                trial = self.local_search(trial, func)\n\n                trial_fitness = func(trial)\n                budget_used += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if budget_used < self.budget:\n                    opposite = self.opposition_based_learning(population[i])\n                    opposite_fitness = func(opposite)\n                    budget_used += 1\n                    if opposite_fitness < fitness[i]:\n                        population[i] = opposite\n                        fitness[i] = opposite_fitness\n\n                if budget_used >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveOppositionDifferentialEvolution", "description": "Improved adaptive differential evolution with streamlined operations and dynamic parameter adjustment for enhanced convergence.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8b4798a7-48ea-4997-ad53-8c2d8d1033bc", "metadata": {"aucs": [0.32089995619972067, 0.28764108336101657, 0.30427615702934274, 0.3450863267218862, 0.3115607102400493, 0.3246001071450614, 0.33835905137992217, 0.30111700961189813, 0.2826228032458208, 0.06950232555729141, 0.0494348944026507, 0.0695430146692908, 0.05879424399136279, 0.0874270108605888, 0.08450978602005121, 0.0804781940020981, 0.056728219256904744, 0.06572757919085837, 0.07385559053344004, 0.06655948104385301, 0.0711210656661524, 0.06474699623280833, 0.07071756966108311, 0.07010290238442829, 0.07644910551807405, 0.07286864492906575, 0.060006843435301604, 0.07023335334959735, 0.058846649303867515, 0.04862318190210624, 0.05766170699201645, 0.06041291300339813, 0.05461078582529699, 0.06743469404415958, 0.06724488306528853, 0.06641605526152838, 0.703387997120521, 0.8472871532257036, 0.7550073739898624, 0.866110932630028, 0.8440542395118598, 0.8433768117005536, 0.6206882644365246, 0.8422142330417006, 0.7837008775230981, 0.10802522707619933, 0.1039764298836926, 0.09747443104464892, 0.1099171028369672, 0.11046128645973807, 0.08893846444538345, 0.10887994011442692, 0.12750997925988028, 0.11422226872547414, 0.2079566024609264, 0.18450246717094565, 0.17641617667176268, 0.18986340877321306, 0.18410915737767242, 0.18156670572923506, 0.15941660193452267, 0.1894420809897237, 0.16977291820029272, 0.06692842215780526, 0.0707492225949592, 0.07186821582648084, 0.07493662125919853, 0.051755638744614085, 0.07779779902392825, 0.06556097496629687, 0.06916477591761161, 0.06043413743533688, 0.06648320802841112, 0.0474134160102927, 0.03580204228080597, 0.07956056164944836, 0.07869398848942988, 0.07635390455295199, 0.06332782581639274, 0.05661528231689994, 0.05239414921694863, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005543272137173982, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08422529739019413, 0.07567635923093041, 0.08608757839925618, 0.08881800405671125, 0.05007550201674016, 0.06093647840210048, 0.07918374195974243, 0.09574241705873665, 0.08695947846691798, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042146956255246226, 0.036517198681656704, 0.035362094746274275, 0.0365432127280747, 0.04215168528520841, 0.047026369196826234, 0.03411105673657899, 0.03372253707369166, 0.0330915211204692, 0.27628958892088384, 0.2801673973753426, 0.2633484401475672, 0.28819738217471724, 0.301830537005787, 0.27898342798799736, 0.30195359726078996, 0.2752167040591036, 0.27864943426884703, 0.059742109998854764, 0.07829458306897363, 0.05877632075802264, 0.058569033483667265, 0.060626315799628516, 0.06907993060435547, 0.06682400398067889, 0.06105494347039808, 0.07345581404610457, 0.1348792352568633, 0.107150147113242, 0.1344148900036295, 0.12583955685157722, 0.12508842024999833, 0.13377870472009723, 0.12578393789898368, 0.1444582810807038, 0.16346187731400263, 0.1892159659486199, 0.17207046295316764, 0.18540840581534246, 0.17530362463774185, 0.18216728922547176, 0.17691040132274116, 0.19513939764826993, 0.20679817860279381, 0.2095975430516035, 0.12839982201478106, 0.12970459377238452, 0.12419419037389923, 0.12584985341835686, 0.1257200020550816, 0.12568354308469354, 0.13176153416501657, 0.1432766665107087, 0.14600350027804365, 0.18444850681373692, 0.16426295539611147, 0.17388264828155864, 0.16246757775546683, 0.1569171266611269, 0.18988773063378306, 0.19175365486872142, 0.18316170802244958, 0.17577865228958567, 0.16140349992399738, 0.1642389701959177, 0.163945038826109, 0.1477685619660426, 0.16499193025681202, 0.15425026754154092, 0.16760261137752264, 0.1652678877452285, 0.16225127340666134, 0.1944052271909309, 0.14138065402256794, 0.15329822613113264, 0.15409645014881113, 0.12315301633415221, 0.15077746298651074, 0.12699934291195425, 0.14167057997053345, 0.13037973838829597, 0.197369105012562, 0.16180699731530335, 0.13555325204209656, 0.1522317737454807, 0.1739869826982785, 0.11163742047025405, 0.17645503996843348, 0.17966434121854458, 0.15331100164412548, 0.17397440084734517, 0.1803761503234349, 0.2039150871971096, 0.17106791276886235, 0.19784236320396198, 0.16962817893688897, 0.19032509091764482, 0.17821234159195387, 0.19287687322524683, 0.06311162397576431, 0.07384897708406135, 0.05951795864713372, 0.06905968624536618, 0.06452558891401894, 0.06263407673310195, 0.06367451772222088, 0.07884048909070884, 0.061629393734776605]}, "mutation_prompt": null}
{"id": "0ab2424d-03f9-4bb7-98f2-27eecd3f2769", "solution": "import numpy as np\n\nclass AdaptiveOppositionDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.7  # Increased differential weight for enhanced exploration\n        self.CR = 0.85  # Adjusted crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def opposition_based_learning(self, population):\n        return self.lower_bound + self.upper_bound - population\n\n    def local_search(self, x, func):\n        trial = x + np.random.uniform(-0.05, 0.05, self.dim)  # Narrowed exploration range\n        trial = np.clip(trial, self.lower_bound, self.upper_bound)\n        if func(trial) < func(x):\n            x = trial\n        return x\n\n    def mutate(self, population, idx):\n        a, b, c = np.random.choice(self.population_size, 3, replace=False)\n        mutant = population[a] + self.F * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.CR\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        budget_used = self.population_size\n\n        while budget_used < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(population, i)\n                trial = self.crossover(population[i], mutant)\n                trial = self.local_search(trial, func)\n\n                trial_fitness = func(trial)\n                budget_used += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if budget_used < self.budget:\n                    opposite = self.opposition_based_learning(population[i])\n                    opposite_fitness = func(opposite)\n                    budget_used += 1\n                    if opposite_fitness < fitness[i]:\n                        population[i] = opposite\n                        fitness[i] = opposite_fitness\n\n                if budget_used >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveOppositionDifferentialEvolution", "description": "Improved adaptive differential evolution with streamlined operations and dynamic parameter adjustment for enhanced convergence.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8b4798a7-48ea-4997-ad53-8c2d8d1033bc", "metadata": {"aucs": [0.32089995619972067, 0.28764108336101657, 0.30427615702934274, 0.3450863267218862, 0.3115607102400493, 0.3246001071450614, 0.33835905137992217, 0.30111700961189813, 0.2826228032458208, 0.06950232555729141, 0.0494348944026507, 0.0695430146692908, 0.05879424399136279, 0.0874270108605888, 0.08450978602005121, 0.0804781940020981, 0.056728219256904744, 0.06572757919085837, 0.07385559053344004, 0.06655948104385301, 0.0711210656661524, 0.06474699623280833, 0.07071756966108311, 0.07010290238442829, 0.07644910551807405, 0.07286864492906575, 0.060006843435301604, 0.07023335334959735, 0.058846649303867515, 0.04862318190210624, 0.05766170699201645, 0.06041291300339813, 0.05461078582529699, 0.06743469404415958, 0.06724488306528853, 0.06641605526152838, 0.703387997120521, 0.8472871532257036, 0.7550073739898624, 0.866110932630028, 0.8440542395118598, 0.8433768117005536, 0.6206882644365246, 0.8422142330417006, 0.7837008775230981, 0.10802522707619933, 0.1039764298836926, 0.09747443104464892, 0.1099171028369672, 0.11046128645973807, 0.08893846444538345, 0.10887994011442692, 0.12750997925988028, 0.11422226872547414, 0.2079566024609264, 0.18450246717094565, 0.17641617667176268, 0.18986340877321306, 0.18410915737767242, 0.18156670572923506, 0.15941660193452267, 0.1894420809897237, 0.16977291820029272, 0.06692842215780526, 0.0707492225949592, 0.07186821582648084, 0.07493662125919853, 0.051755638744614085, 0.07779779902392825, 0.06556097496629687, 0.06916477591761161, 0.06043413743533688, 0.06648320802841112, 0.0474134160102927, 0.03580204228080597, 0.07956056164944836, 0.07869398848942988, 0.07635390455295199, 0.06332782581639274, 0.05661528231689994, 0.05239414921694863, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005543272137173982, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08422529739019413, 0.07567635923093041, 0.08608757839925618, 0.08881800405671125, 0.05007550201674016, 0.06093647840210048, 0.07918374195974243, 0.09574241705873665, 0.08695947846691798, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042146956255246226, 0.036517198681656704, 0.035362094746274275, 0.0365432127280747, 0.04215168528520841, 0.047026369196826234, 0.03411105673657899, 0.03372253707369166, 0.0330915211204692, 0.27628958892088384, 0.2801673973753426, 0.2633484401475672, 0.28819738217471724, 0.301830537005787, 0.27898342798799736, 0.30195359726078996, 0.2752167040591036, 0.27864943426884703, 0.059742109998854764, 0.07829458306897363, 0.05877632075802264, 0.058569033483667265, 0.060626315799628516, 0.06907993060435547, 0.06682400398067889, 0.06105494347039808, 0.07345581404610457, 0.1348792352568633, 0.107150147113242, 0.1344148900036295, 0.12583955685157722, 0.12508842024999833, 0.13377870472009723, 0.12578393789898368, 0.1444582810807038, 0.16346187731400263, 0.1892159659486199, 0.17207046295316764, 0.18540840581534246, 0.17530362463774185, 0.18216728922547176, 0.17691040132274116, 0.19513939764826993, 0.20679817860279381, 0.2095975430516035, 0.12839982201478106, 0.12970459377238452, 0.12419419037389923, 0.12584985341835686, 0.1257200020550816, 0.12568354308469354, 0.13176153416501657, 0.1432766665107087, 0.14600350027804365, 0.18444850681373692, 0.16426295539611147, 0.17388264828155864, 0.16246757775546683, 0.1569171266611269, 0.18988773063378306, 0.19175365486872142, 0.18316170802244958, 0.17577865228958567, 0.16140349992399738, 0.1642389701959177, 0.163945038826109, 0.1477685619660426, 0.16499193025681202, 0.15425026754154092, 0.16760261137752264, 0.1652678877452285, 0.16225127340666134, 0.1944052271909309, 0.14138065402256794, 0.15329822613113264, 0.15409645014881113, 0.12315301633415221, 0.15077746298651074, 0.12699934291195425, 0.14167057997053345, 0.13037973838829597, 0.197369105012562, 0.16180699731530335, 0.13555325204209656, 0.1522317737454807, 0.1739869826982785, 0.11163742047025405, 0.17645503996843348, 0.17966434121854458, 0.15331100164412548, 0.17397440084734517, 0.1803761503234349, 0.2039150871971096, 0.17106791276886235, 0.19784236320396198, 0.16962817893688897, 0.19032509091764482, 0.17821234159195387, 0.19287687322524683, 0.06311162397576431, 0.07384897708406135, 0.05951795864713372, 0.06905968624536618, 0.06452558891401894, 0.06263407673310195, 0.06367451772222088, 0.07884048909070884, 0.061629393734776605]}, "mutation_prompt": null}
{"id": "faf53121-f32a-4dda-b3d6-7790be3805b0", "solution": "import numpy as np\n\nclass AdaptiveOppositionDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.7  # Increased differential weight for enhanced exploration\n        self.CR = 0.85  # Adjusted crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def opposition_based_learning(self, population):\n        return self.lower_bound + self.upper_bound - population\n\n    def local_search(self, x, func):\n        trial = x + np.random.uniform(-0.05, 0.05, self.dim)  # Narrowed exploration range\n        trial = np.clip(trial, self.lower_bound, self.upper_bound)\n        if func(trial) < func(x):\n            x = trial\n        return x\n\n    def mutate(self, population, idx):\n        a, b, c = np.random.choice(self.population_size, 3, replace=False)\n        mutant = population[a] + self.F * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.CR\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        budget_used = self.population_size\n\n        while budget_used < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(population, i)\n                trial = self.crossover(population[i], mutant)\n                trial = self.local_search(trial, func)\n\n                trial_fitness = func(trial)\n                budget_used += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if budget_used < self.budget:\n                    opposite = self.opposition_based_learning(population[i])\n                    opposite_fitness = func(opposite)\n                    budget_used += 1\n                    if opposite_fitness < fitness[i]:\n                        population[i] = opposite\n                        fitness[i] = opposite_fitness\n\n                if budget_used >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveOppositionDifferentialEvolution", "description": "Improved adaptive differential evolution with streamlined operations and dynamic parameter adjustment for enhanced convergence.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8b4798a7-48ea-4997-ad53-8c2d8d1033bc", "metadata": {"aucs": [0.32089995619972067, 0.28764108336101657, 0.30427615702934274, 0.3450863267218862, 0.3115607102400493, 0.3246001071450614, 0.33835905137992217, 0.30111700961189813, 0.2826228032458208, 0.06950232555729141, 0.0494348944026507, 0.0695430146692908, 0.05879424399136279, 0.0874270108605888, 0.08450978602005121, 0.0804781940020981, 0.056728219256904744, 0.06572757919085837, 0.07385559053344004, 0.06655948104385301, 0.0711210656661524, 0.06474699623280833, 0.07071756966108311, 0.07010290238442829, 0.07644910551807405, 0.07286864492906575, 0.060006843435301604, 0.07023335334959735, 0.058846649303867515, 0.04862318190210624, 0.05766170699201645, 0.06041291300339813, 0.05461078582529699, 0.06743469404415958, 0.06724488306528853, 0.06641605526152838, 0.703387997120521, 0.8472871532257036, 0.7550073739898624, 0.866110932630028, 0.8440542395118598, 0.8433768117005536, 0.6206882644365246, 0.8422142330417006, 0.7837008775230981, 0.10802522707619933, 0.1039764298836926, 0.09747443104464892, 0.1099171028369672, 0.11046128645973807, 0.08893846444538345, 0.10887994011442692, 0.12750997925988028, 0.11422226872547414, 0.2079566024609264, 0.18450246717094565, 0.17641617667176268, 0.18986340877321306, 0.18410915737767242, 0.18156670572923506, 0.15941660193452267, 0.1894420809897237, 0.16977291820029272, 0.06692842215780526, 0.0707492225949592, 0.07186821582648084, 0.07493662125919853, 0.051755638744614085, 0.07779779902392825, 0.06556097496629687, 0.06916477591761161, 0.06043413743533688, 0.06648320802841112, 0.0474134160102927, 0.03580204228080597, 0.07956056164944836, 0.07869398848942988, 0.07635390455295199, 0.06332782581639274, 0.05661528231689994, 0.05239414921694863, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005543272137173982, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08422529739019413, 0.07567635923093041, 0.08608757839925618, 0.08881800405671125, 0.05007550201674016, 0.06093647840210048, 0.07918374195974243, 0.09574241705873665, 0.08695947846691798, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042146956255246226, 0.036517198681656704, 0.035362094746274275, 0.0365432127280747, 0.04215168528520841, 0.047026369196826234, 0.03411105673657899, 0.03372253707369166, 0.0330915211204692, 0.27628958892088384, 0.2801673973753426, 0.2633484401475672, 0.28819738217471724, 0.301830537005787, 0.27898342798799736, 0.30195359726078996, 0.2752167040591036, 0.27864943426884703, 0.059742109998854764, 0.07829458306897363, 0.05877632075802264, 0.058569033483667265, 0.060626315799628516, 0.06907993060435547, 0.06682400398067889, 0.06105494347039808, 0.07345581404610457, 0.1348792352568633, 0.107150147113242, 0.1344148900036295, 0.12583955685157722, 0.12508842024999833, 0.13377870472009723, 0.12578393789898368, 0.1444582810807038, 0.16346187731400263, 0.1892159659486199, 0.17207046295316764, 0.18540840581534246, 0.17530362463774185, 0.18216728922547176, 0.17691040132274116, 0.19513939764826993, 0.20679817860279381, 0.2095975430516035, 0.12839982201478106, 0.12970459377238452, 0.12419419037389923, 0.12584985341835686, 0.1257200020550816, 0.12568354308469354, 0.13176153416501657, 0.1432766665107087, 0.14600350027804365, 0.18444850681373692, 0.16426295539611147, 0.17388264828155864, 0.16246757775546683, 0.1569171266611269, 0.18988773063378306, 0.19175365486872142, 0.18316170802244958, 0.17577865228958567, 0.16140349992399738, 0.1642389701959177, 0.163945038826109, 0.1477685619660426, 0.16499193025681202, 0.15425026754154092, 0.16760261137752264, 0.1652678877452285, 0.16225127340666134, 0.1944052271909309, 0.14138065402256794, 0.15329822613113264, 0.15409645014881113, 0.12315301633415221, 0.15077746298651074, 0.12699934291195425, 0.14167057997053345, 0.13037973838829597, 0.197369105012562, 0.16180699731530335, 0.13555325204209656, 0.1522317737454807, 0.1739869826982785, 0.11163742047025405, 0.17645503996843348, 0.17966434121854458, 0.15331100164412548, 0.17397440084734517, 0.1803761503234349, 0.2039150871971096, 0.17106791276886235, 0.19784236320396198, 0.16962817893688897, 0.19032509091764482, 0.17821234159195387, 0.19287687322524683, 0.06311162397576431, 0.07384897708406135, 0.05951795864713372, 0.06905968624536618, 0.06452558891401894, 0.06263407673310195, 0.06367451772222088, 0.07884048909070884, 0.061629393734776605]}, "mutation_prompt": null}
{"id": "1377cd52-7586-41c6-999f-540c6f5c9b10", "solution": "import numpy as np\n\nclass AdaptiveOppositionDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.7  # Increased differential weight for enhanced exploration\n        self.CR = 0.85  # Adjusted crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def opposition_based_learning(self, population):\n        return self.lower_bound + self.upper_bound - population\n\n    def local_search(self, x, func):\n        trial = x + np.random.uniform(-0.05, 0.05, self.dim)  # Narrowed exploration range\n        trial = np.clip(trial, self.lower_bound, self.upper_bound)\n        if func(trial) < func(x):\n            x = trial\n        return x\n\n    def mutate(self, population, idx):\n        a, b, c = np.random.choice(self.population_size, 3, replace=False)\n        mutant = population[a] + self.F * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.CR\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        budget_used = self.population_size\n\n        while budget_used < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(population, i)\n                trial = self.crossover(population[i], mutant)\n                trial = self.local_search(trial, func)\n\n                trial_fitness = func(trial)\n                budget_used += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if budget_used < self.budget:\n                    opposite = self.opposition_based_learning(population[i])\n                    opposite_fitness = func(opposite)\n                    budget_used += 1\n                    if opposite_fitness < fitness[i]:\n                        population[i] = opposite\n                        fitness[i] = opposite_fitness\n\n                if budget_used >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveOppositionDifferentialEvolution", "description": "Improved adaptive differential evolution with streamlined operations and dynamic parameter adjustment for enhanced convergence.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8b4798a7-48ea-4997-ad53-8c2d8d1033bc", "metadata": {"aucs": [0.32089995619972067, 0.28764108336101657, 0.30427615702934274, 0.3450863267218862, 0.3115607102400493, 0.3246001071450614, 0.33835905137992217, 0.30111700961189813, 0.2826228032458208, 0.06950232555729141, 0.0494348944026507, 0.0695430146692908, 0.05879424399136279, 0.0874270108605888, 0.08450978602005121, 0.0804781940020981, 0.056728219256904744, 0.06572757919085837, 0.07385559053344004, 0.06655948104385301, 0.0711210656661524, 0.06474699623280833, 0.07071756966108311, 0.07010290238442829, 0.07644910551807405, 0.07286864492906575, 0.060006843435301604, 0.07023335334959735, 0.058846649303867515, 0.04862318190210624, 0.05766170699201645, 0.06041291300339813, 0.05461078582529699, 0.06743469404415958, 0.06724488306528853, 0.06641605526152838, 0.703387997120521, 0.8472871532257036, 0.7550073739898624, 0.866110932630028, 0.8440542395118598, 0.8433768117005536, 0.6206882644365246, 0.8422142330417006, 0.7837008775230981, 0.10802522707619933, 0.1039764298836926, 0.09747443104464892, 0.1099171028369672, 0.11046128645973807, 0.08893846444538345, 0.10887994011442692, 0.12750997925988028, 0.11422226872547414, 0.2079566024609264, 0.18450246717094565, 0.17641617667176268, 0.18986340877321306, 0.18410915737767242, 0.18156670572923506, 0.15941660193452267, 0.1894420809897237, 0.16977291820029272, 0.06692842215780526, 0.0707492225949592, 0.07186821582648084, 0.07493662125919853, 0.051755638744614085, 0.07779779902392825, 0.06556097496629687, 0.06916477591761161, 0.06043413743533688, 0.06648320802841112, 0.0474134160102927, 0.03580204228080597, 0.07956056164944836, 0.07869398848942988, 0.07635390455295199, 0.06332782581639274, 0.05661528231689994, 0.05239414921694863, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005543272137173982, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08422529739019413, 0.07567635923093041, 0.08608757839925618, 0.08881800405671125, 0.05007550201674016, 0.06093647840210048, 0.07918374195974243, 0.09574241705873665, 0.08695947846691798, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042146956255246226, 0.036517198681656704, 0.035362094746274275, 0.0365432127280747, 0.04215168528520841, 0.047026369196826234, 0.03411105673657899, 0.03372253707369166, 0.0330915211204692, 0.27628958892088384, 0.2801673973753426, 0.2633484401475672, 0.28819738217471724, 0.301830537005787, 0.27898342798799736, 0.30195359726078996, 0.2752167040591036, 0.27864943426884703, 0.059742109998854764, 0.07829458306897363, 0.05877632075802264, 0.058569033483667265, 0.060626315799628516, 0.06907993060435547, 0.06682400398067889, 0.06105494347039808, 0.07345581404610457, 0.1348792352568633, 0.107150147113242, 0.1344148900036295, 0.12583955685157722, 0.12508842024999833, 0.13377870472009723, 0.12578393789898368, 0.1444582810807038, 0.16346187731400263, 0.1892159659486199, 0.17207046295316764, 0.18540840581534246, 0.17530362463774185, 0.18216728922547176, 0.17691040132274116, 0.19513939764826993, 0.20679817860279381, 0.2095975430516035, 0.12839982201478106, 0.12970459377238452, 0.12419419037389923, 0.12584985341835686, 0.1257200020550816, 0.12568354308469354, 0.13176153416501657, 0.1432766665107087, 0.14600350027804365, 0.18444850681373692, 0.16426295539611147, 0.17388264828155864, 0.16246757775546683, 0.1569171266611269, 0.18988773063378306, 0.19175365486872142, 0.18316170802244958, 0.17577865228958567, 0.16140349992399738, 0.1642389701959177, 0.163945038826109, 0.1477685619660426, 0.16499193025681202, 0.15425026754154092, 0.16760261137752264, 0.1652678877452285, 0.16225127340666134, 0.1944052271909309, 0.14138065402256794, 0.15329822613113264, 0.15409645014881113, 0.12315301633415221, 0.15077746298651074, 0.12699934291195425, 0.14167057997053345, 0.13037973838829597, 0.197369105012562, 0.16180699731530335, 0.13555325204209656, 0.1522317737454807, 0.1739869826982785, 0.11163742047025405, 0.17645503996843348, 0.17966434121854458, 0.15331100164412548, 0.17397440084734517, 0.1803761503234349, 0.2039150871971096, 0.17106791276886235, 0.19784236320396198, 0.16962817893688897, 0.19032509091764482, 0.17821234159195387, 0.19287687322524683, 0.06311162397576431, 0.07384897708406135, 0.05951795864713372, 0.06905968624536618, 0.06452558891401894, 0.06263407673310195, 0.06367451772222088, 0.07884048909070884, 0.061629393734776605]}, "mutation_prompt": null}
{"id": "927583e1-d3b5-46f2-8751-b970c22fce1c", "solution": "import numpy as np\n\nclass AdaptiveOppositionDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.7  # Increased differential weight for enhanced exploration\n        self.CR = 0.85  # Adjusted crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def opposition_based_learning(self, population):\n        return self.lower_bound + self.upper_bound - population\n\n    def local_search(self, x, func):\n        trial = x + np.random.uniform(-0.05, 0.05, self.dim)  # Narrowed exploration range\n        trial = np.clip(trial, self.lower_bound, self.upper_bound)\n        if func(trial) < func(x):\n            x = trial\n        return x\n\n    def mutate(self, population, idx):\n        a, b, c = np.random.choice(self.population_size, 3, replace=False)\n        mutant = population[a] + self.F * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.CR\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        budget_used = self.population_size\n\n        while budget_used < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(population, i)\n                trial = self.crossover(population[i], mutant)\n                trial = self.local_search(trial, func)\n\n                trial_fitness = func(trial)\n                budget_used += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if budget_used < self.budget:\n                    opposite = self.opposition_based_learning(population[i])\n                    opposite_fitness = func(opposite)\n                    budget_used += 1\n                    if opposite_fitness < fitness[i]:\n                        population[i] = opposite\n                        fitness[i] = opposite_fitness\n\n                if budget_used >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveOppositionDifferentialEvolution", "description": "Improved adaptive differential evolution with streamlined operations and dynamic parameter adjustment for enhanced convergence.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8b4798a7-48ea-4997-ad53-8c2d8d1033bc", "metadata": {"aucs": [0.32089995619972067, 0.28764108336101657, 0.30427615702934274, 0.3450863267218862, 0.3115607102400493, 0.3246001071450614, 0.33835905137992217, 0.30111700961189813, 0.2826228032458208, 0.06950232555729141, 0.0494348944026507, 0.0695430146692908, 0.05879424399136279, 0.0874270108605888, 0.08450978602005121, 0.0804781940020981, 0.056728219256904744, 0.06572757919085837, 0.07385559053344004, 0.06655948104385301, 0.0711210656661524, 0.06474699623280833, 0.07071756966108311, 0.07010290238442829, 0.07644910551807405, 0.07286864492906575, 0.060006843435301604, 0.07023335334959735, 0.058846649303867515, 0.04862318190210624, 0.05766170699201645, 0.06041291300339813, 0.05461078582529699, 0.06743469404415958, 0.06724488306528853, 0.06641605526152838, 0.703387997120521, 0.8472871532257036, 0.7550073739898624, 0.866110932630028, 0.8440542395118598, 0.8433768117005536, 0.6206882644365246, 0.8422142330417006, 0.7837008775230981, 0.10802522707619933, 0.1039764298836926, 0.09747443104464892, 0.1099171028369672, 0.11046128645973807, 0.08893846444538345, 0.10887994011442692, 0.12750997925988028, 0.11422226872547414, 0.2079566024609264, 0.18450246717094565, 0.17641617667176268, 0.18986340877321306, 0.18410915737767242, 0.18156670572923506, 0.15941660193452267, 0.1894420809897237, 0.16977291820029272, 0.06692842215780526, 0.0707492225949592, 0.07186821582648084, 0.07493662125919853, 0.051755638744614085, 0.07779779902392825, 0.06556097496629687, 0.06916477591761161, 0.06043413743533688, 0.06648320802841112, 0.0474134160102927, 0.03580204228080597, 0.07956056164944836, 0.07869398848942988, 0.07635390455295199, 0.06332782581639274, 0.05661528231689994, 0.05239414921694863, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005543272137173982, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08422529739019413, 0.07567635923093041, 0.08608757839925618, 0.08881800405671125, 0.05007550201674016, 0.06093647840210048, 0.07918374195974243, 0.09574241705873665, 0.08695947846691798, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042146956255246226, 0.036517198681656704, 0.035362094746274275, 0.0365432127280747, 0.04215168528520841, 0.047026369196826234, 0.03411105673657899, 0.03372253707369166, 0.0330915211204692, 0.27628958892088384, 0.2801673973753426, 0.2633484401475672, 0.28819738217471724, 0.301830537005787, 0.27898342798799736, 0.30195359726078996, 0.2752167040591036, 0.27864943426884703, 0.059742109998854764, 0.07829458306897363, 0.05877632075802264, 0.058569033483667265, 0.060626315799628516, 0.06907993060435547, 0.06682400398067889, 0.06105494347039808, 0.07345581404610457, 0.1348792352568633, 0.107150147113242, 0.1344148900036295, 0.12583955685157722, 0.12508842024999833, 0.13377870472009723, 0.12578393789898368, 0.1444582810807038, 0.16346187731400263, 0.1892159659486199, 0.17207046295316764, 0.18540840581534246, 0.17530362463774185, 0.18216728922547176, 0.17691040132274116, 0.19513939764826993, 0.20679817860279381, 0.2095975430516035, 0.12839982201478106, 0.12970459377238452, 0.12419419037389923, 0.12584985341835686, 0.1257200020550816, 0.12568354308469354, 0.13176153416501657, 0.1432766665107087, 0.14600350027804365, 0.18444850681373692, 0.16426295539611147, 0.17388264828155864, 0.16246757775546683, 0.1569171266611269, 0.18988773063378306, 0.19175365486872142, 0.18316170802244958, 0.17577865228958567, 0.16140349992399738, 0.1642389701959177, 0.163945038826109, 0.1477685619660426, 0.16499193025681202, 0.15425026754154092, 0.16760261137752264, 0.1652678877452285, 0.16225127340666134, 0.1944052271909309, 0.14138065402256794, 0.15329822613113264, 0.15409645014881113, 0.12315301633415221, 0.15077746298651074, 0.12699934291195425, 0.14167057997053345, 0.13037973838829597, 0.197369105012562, 0.16180699731530335, 0.13555325204209656, 0.1522317737454807, 0.1739869826982785, 0.11163742047025405, 0.17645503996843348, 0.17966434121854458, 0.15331100164412548, 0.17397440084734517, 0.1803761503234349, 0.2039150871971096, 0.17106791276886235, 0.19784236320396198, 0.16962817893688897, 0.19032509091764482, 0.17821234159195387, 0.19287687322524683, 0.06311162397576431, 0.07384897708406135, 0.05951795864713372, 0.06905968624536618, 0.06452558891401894, 0.06263407673310195, 0.06367451772222088, 0.07884048909070884, 0.061629393734776605]}, "mutation_prompt": null}
{"id": "5ae5eb84-ad95-49a1-82b6-d2d75e7a6b0f", "solution": "import numpy as np\n\nclass AdaptiveOppositionDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.7  # Increased differential weight for enhanced exploration\n        self.CR = 0.85  # Adjusted crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def opposition_based_learning(self, population):\n        return self.lower_bound + self.upper_bound - population\n\n    def local_search(self, x, func):\n        trial = x + np.random.uniform(-0.05, 0.05, self.dim)  # Narrowed exploration range\n        trial = np.clip(trial, self.lower_bound, self.upper_bound)\n        if func(trial) < func(x):\n            x = trial\n        return x\n\n    def mutate(self, population, idx):\n        a, b, c = np.random.choice(self.population_size, 3, replace=False)\n        mutant = population[a] + self.F * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.CR\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        budget_used = self.population_size\n\n        while budget_used < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(population, i)\n                trial = self.crossover(population[i], mutant)\n                trial = self.local_search(trial, func)\n\n                trial_fitness = func(trial)\n                budget_used += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if budget_used < self.budget:\n                    opposite = self.opposition_based_learning(population[i])\n                    opposite_fitness = func(opposite)\n                    budget_used += 1\n                    if opposite_fitness < fitness[i]:\n                        population[i] = opposite\n                        fitness[i] = opposite_fitness\n\n                if budget_used >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveOppositionDifferentialEvolution", "description": "Improved adaptive differential evolution with streamlined operations and dynamic parameter adjustment for enhanced convergence.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8b4798a7-48ea-4997-ad53-8c2d8d1033bc", "metadata": {"aucs": [0.32089995619972067, 0.28764108336101657, 0.30427615702934274, 0.3450863267218862, 0.3115607102400493, 0.3246001071450614, 0.33835905137992217, 0.30111700961189813, 0.2826228032458208, 0.06950232555729141, 0.0494348944026507, 0.0695430146692908, 0.05879424399136279, 0.0874270108605888, 0.08450978602005121, 0.0804781940020981, 0.056728219256904744, 0.06572757919085837, 0.07385559053344004, 0.06655948104385301, 0.0711210656661524, 0.06474699623280833, 0.07071756966108311, 0.07010290238442829, 0.07644910551807405, 0.07286864492906575, 0.060006843435301604, 0.07023335334959735, 0.058846649303867515, 0.04862318190210624, 0.05766170699201645, 0.06041291300339813, 0.05461078582529699, 0.06743469404415958, 0.06724488306528853, 0.06641605526152838, 0.703387997120521, 0.8472871532257036, 0.7550073739898624, 0.866110932630028, 0.8440542395118598, 0.8433768117005536, 0.6206882644365246, 0.8422142330417006, 0.7837008775230981, 0.10802522707619933, 0.1039764298836926, 0.09747443104464892, 0.1099171028369672, 0.11046128645973807, 0.08893846444538345, 0.10887994011442692, 0.12750997925988028, 0.11422226872547414, 0.2079566024609264, 0.18450246717094565, 0.17641617667176268, 0.18986340877321306, 0.18410915737767242, 0.18156670572923506, 0.15941660193452267, 0.1894420809897237, 0.16977291820029272, 0.06692842215780526, 0.0707492225949592, 0.07186821582648084, 0.07493662125919853, 0.051755638744614085, 0.07779779902392825, 0.06556097496629687, 0.06916477591761161, 0.06043413743533688, 0.06648320802841112, 0.0474134160102927, 0.03580204228080597, 0.07956056164944836, 0.07869398848942988, 0.07635390455295199, 0.06332782581639274, 0.05661528231689994, 0.05239414921694863, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005543272137173982, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08422529739019413, 0.07567635923093041, 0.08608757839925618, 0.08881800405671125, 0.05007550201674016, 0.06093647840210048, 0.07918374195974243, 0.09574241705873665, 0.08695947846691798, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042146956255246226, 0.036517198681656704, 0.035362094746274275, 0.0365432127280747, 0.04215168528520841, 0.047026369196826234, 0.03411105673657899, 0.03372253707369166, 0.0330915211204692, 0.27628958892088384, 0.2801673973753426, 0.2633484401475672, 0.28819738217471724, 0.301830537005787, 0.27898342798799736, 0.30195359726078996, 0.2752167040591036, 0.27864943426884703, 0.059742109998854764, 0.07829458306897363, 0.05877632075802264, 0.058569033483667265, 0.060626315799628516, 0.06907993060435547, 0.06682400398067889, 0.06105494347039808, 0.07345581404610457, 0.1348792352568633, 0.107150147113242, 0.1344148900036295, 0.12583955685157722, 0.12508842024999833, 0.13377870472009723, 0.12578393789898368, 0.1444582810807038, 0.16346187731400263, 0.1892159659486199, 0.17207046295316764, 0.18540840581534246, 0.17530362463774185, 0.18216728922547176, 0.17691040132274116, 0.19513939764826993, 0.20679817860279381, 0.2095975430516035, 0.12839982201478106, 0.12970459377238452, 0.12419419037389923, 0.12584985341835686, 0.1257200020550816, 0.12568354308469354, 0.13176153416501657, 0.1432766665107087, 0.14600350027804365, 0.18444850681373692, 0.16426295539611147, 0.17388264828155864, 0.16246757775546683, 0.1569171266611269, 0.18988773063378306, 0.19175365486872142, 0.18316170802244958, 0.17577865228958567, 0.16140349992399738, 0.1642389701959177, 0.163945038826109, 0.1477685619660426, 0.16499193025681202, 0.15425026754154092, 0.16760261137752264, 0.1652678877452285, 0.16225127340666134, 0.1944052271909309, 0.14138065402256794, 0.15329822613113264, 0.15409645014881113, 0.12315301633415221, 0.15077746298651074, 0.12699934291195425, 0.14167057997053345, 0.13037973838829597, 0.197369105012562, 0.16180699731530335, 0.13555325204209656, 0.1522317737454807, 0.1739869826982785, 0.11163742047025405, 0.17645503996843348, 0.17966434121854458, 0.15331100164412548, 0.17397440084734517, 0.1803761503234349, 0.2039150871971096, 0.17106791276886235, 0.19784236320396198, 0.16962817893688897, 0.19032509091764482, 0.17821234159195387, 0.19287687322524683, 0.06311162397576431, 0.07384897708406135, 0.05951795864713372, 0.06905968624536618, 0.06452558891401894, 0.06263407673310195, 0.06367451772222088, 0.07884048909070884, 0.061629393734776605]}, "mutation_prompt": null}
{"id": "d0e96fe4-77c6-4c78-9479-7e6d8d895ed7", "solution": "import numpy as np\n\nclass AdaptiveOppositionDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.7  # Increased differential weight for enhanced exploration\n        self.CR = 0.85  # Adjusted crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def opposition_based_learning(self, population):\n        return self.lower_bound + self.upper_bound - population\n\n    def local_search(self, x, func):\n        trial = x + np.random.uniform(-0.05, 0.05, self.dim)  # Narrowed exploration range\n        trial = np.clip(trial, self.lower_bound, self.upper_bound)\n        if func(trial) < func(x):\n            x = trial\n        return x\n\n    def mutate(self, population, idx):\n        a, b, c = np.random.choice(self.population_size, 3, replace=False)\n        mutant = population[a] + self.F * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.CR\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        budget_used = self.population_size\n\n        while budget_used < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(population, i)\n                trial = self.crossover(population[i], mutant)\n                trial = self.local_search(trial, func)\n\n                trial_fitness = func(trial)\n                budget_used += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if budget_used < self.budget:\n                    opposite = self.opposition_based_learning(population[i])\n                    opposite_fitness = func(opposite)\n                    budget_used += 1\n                    if opposite_fitness < fitness[i]:\n                        population[i] = opposite\n                        fitness[i] = opposite_fitness\n\n                if budget_used >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveOppositionDifferentialEvolution", "description": "Improved adaptive differential evolution with streamlined operations and dynamic parameter adjustment for enhanced convergence.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8b4798a7-48ea-4997-ad53-8c2d8d1033bc", "metadata": {"aucs": [0.32089995619972067, 0.28764108336101657, 0.30427615702934274, 0.3450863267218862, 0.3115607102400493, 0.3246001071450614, 0.33835905137992217, 0.30111700961189813, 0.2826228032458208, 0.06950232555729141, 0.0494348944026507, 0.0695430146692908, 0.05879424399136279, 0.0874270108605888, 0.08450978602005121, 0.0804781940020981, 0.056728219256904744, 0.06572757919085837, 0.07385559053344004, 0.06655948104385301, 0.0711210656661524, 0.06474699623280833, 0.07071756966108311, 0.07010290238442829, 0.07644910551807405, 0.07286864492906575, 0.060006843435301604, 0.07023335334959735, 0.058846649303867515, 0.04862318190210624, 0.05766170699201645, 0.06041291300339813, 0.05461078582529699, 0.06743469404415958, 0.06724488306528853, 0.06641605526152838, 0.703387997120521, 0.8472871532257036, 0.7550073739898624, 0.866110932630028, 0.8440542395118598, 0.8433768117005536, 0.6206882644365246, 0.8422142330417006, 0.7837008775230981, 0.10802522707619933, 0.1039764298836926, 0.09747443104464892, 0.1099171028369672, 0.11046128645973807, 0.08893846444538345, 0.10887994011442692, 0.12750997925988028, 0.11422226872547414, 0.2079566024609264, 0.18450246717094565, 0.17641617667176268, 0.18986340877321306, 0.18410915737767242, 0.18156670572923506, 0.15941660193452267, 0.1894420809897237, 0.16977291820029272, 0.06692842215780526, 0.0707492225949592, 0.07186821582648084, 0.07493662125919853, 0.051755638744614085, 0.07779779902392825, 0.06556097496629687, 0.06916477591761161, 0.06043413743533688, 0.06648320802841112, 0.0474134160102927, 0.03580204228080597, 0.07956056164944836, 0.07869398848942988, 0.07635390455295199, 0.06332782581639274, 0.05661528231689994, 0.05239414921694863, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005543272137173982, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08422529739019413, 0.07567635923093041, 0.08608757839925618, 0.08881800405671125, 0.05007550201674016, 0.06093647840210048, 0.07918374195974243, 0.09574241705873665, 0.08695947846691798, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042146956255246226, 0.036517198681656704, 0.035362094746274275, 0.0365432127280747, 0.04215168528520841, 0.047026369196826234, 0.03411105673657899, 0.03372253707369166, 0.0330915211204692, 0.27628958892088384, 0.2801673973753426, 0.2633484401475672, 0.28819738217471724, 0.301830537005787, 0.27898342798799736, 0.30195359726078996, 0.2752167040591036, 0.27864943426884703, 0.059742109998854764, 0.07829458306897363, 0.05877632075802264, 0.058569033483667265, 0.060626315799628516, 0.06907993060435547, 0.06682400398067889, 0.06105494347039808, 0.07345581404610457, 0.1348792352568633, 0.107150147113242, 0.1344148900036295, 0.12583955685157722, 0.12508842024999833, 0.13377870472009723, 0.12578393789898368, 0.1444582810807038, 0.16346187731400263, 0.1892159659486199, 0.17207046295316764, 0.18540840581534246, 0.17530362463774185, 0.18216728922547176, 0.17691040132274116, 0.19513939764826993, 0.20679817860279381, 0.2095975430516035, 0.12839982201478106, 0.12970459377238452, 0.12419419037389923, 0.12584985341835686, 0.1257200020550816, 0.12568354308469354, 0.13176153416501657, 0.1432766665107087, 0.14600350027804365, 0.18444850681373692, 0.16426295539611147, 0.17388264828155864, 0.16246757775546683, 0.1569171266611269, 0.18988773063378306, 0.19175365486872142, 0.18316170802244958, 0.17577865228958567, 0.16140349992399738, 0.1642389701959177, 0.163945038826109, 0.1477685619660426, 0.16499193025681202, 0.15425026754154092, 0.16760261137752264, 0.1652678877452285, 0.16225127340666134, 0.1944052271909309, 0.14138065402256794, 0.15329822613113264, 0.15409645014881113, 0.12315301633415221, 0.15077746298651074, 0.12699934291195425, 0.14167057997053345, 0.13037973838829597, 0.197369105012562, 0.16180699731530335, 0.13555325204209656, 0.1522317737454807, 0.1739869826982785, 0.11163742047025405, 0.17645503996843348, 0.17966434121854458, 0.15331100164412548, 0.17397440084734517, 0.1803761503234349, 0.2039150871971096, 0.17106791276886235, 0.19784236320396198, 0.16962817893688897, 0.19032509091764482, 0.17821234159195387, 0.19287687322524683, 0.06311162397576431, 0.07384897708406135, 0.05951795864713372, 0.06905968624536618, 0.06452558891401894, 0.06263407673310195, 0.06367451772222088, 0.07884048909070884, 0.061629393734776605]}, "mutation_prompt": null}
{"id": "86b4c6ed-c2a7-4af1-8e86-b8809e8feaa4", "solution": "import numpy as np\n\nclass AdaptiveOppositionDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.7  # Increased differential weight for enhanced exploration\n        self.CR = 0.85  # Adjusted crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def opposition_based_learning(self, population):\n        return self.lower_bound + self.upper_bound - population\n\n    def local_search(self, x, func):\n        trial = x + np.random.uniform(-0.05, 0.05, self.dim)  # Narrowed exploration range\n        trial = np.clip(trial, self.lower_bound, self.upper_bound)\n        if func(trial) < func(x):\n            x = trial\n        return x\n\n    def mutate(self, population, idx):\n        a, b, c = np.random.choice(self.population_size, 3, replace=False)\n        mutant = population[a] + self.F * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.CR\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        budget_used = self.population_size\n\n        while budget_used < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(population, i)\n                trial = self.crossover(population[i], mutant)\n                trial = self.local_search(trial, func)\n\n                trial_fitness = func(trial)\n                budget_used += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if budget_used < self.budget:\n                    opposite = self.opposition_based_learning(population[i])\n                    opposite_fitness = func(opposite)\n                    budget_used += 1\n                    if opposite_fitness < fitness[i]:\n                        population[i] = opposite\n                        fitness[i] = opposite_fitness\n\n                if budget_used >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveOppositionDifferentialEvolution", "description": "Improved adaptive differential evolution with streamlined operations and dynamic parameter adjustment for enhanced convergence.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8b4798a7-48ea-4997-ad53-8c2d8d1033bc", "metadata": {"aucs": [0.32089995619972067, 0.28764108336101657, 0.30427615702934274, 0.3450863267218862, 0.3115607102400493, 0.3246001071450614, 0.33835905137992217, 0.30111700961189813, 0.2826228032458208, 0.06950232555729141, 0.0494348944026507, 0.0695430146692908, 0.05879424399136279, 0.0874270108605888, 0.08450978602005121, 0.0804781940020981, 0.056728219256904744, 0.06572757919085837, 0.07385559053344004, 0.06655948104385301, 0.0711210656661524, 0.06474699623280833, 0.07071756966108311, 0.07010290238442829, 0.07644910551807405, 0.07286864492906575, 0.060006843435301604, 0.07023335334959735, 0.058846649303867515, 0.04862318190210624, 0.05766170699201645, 0.06041291300339813, 0.05461078582529699, 0.06743469404415958, 0.06724488306528853, 0.06641605526152838, 0.703387997120521, 0.8472871532257036, 0.7550073739898624, 0.866110932630028, 0.8440542395118598, 0.8433768117005536, 0.6206882644365246, 0.8422142330417006, 0.7837008775230981, 0.10802522707619933, 0.1039764298836926, 0.09747443104464892, 0.1099171028369672, 0.11046128645973807, 0.08893846444538345, 0.10887994011442692, 0.12750997925988028, 0.11422226872547414, 0.2079566024609264, 0.18450246717094565, 0.17641617667176268, 0.18986340877321306, 0.18410915737767242, 0.18156670572923506, 0.15941660193452267, 0.1894420809897237, 0.16977291820029272, 0.06692842215780526, 0.0707492225949592, 0.07186821582648084, 0.07493662125919853, 0.051755638744614085, 0.07779779902392825, 0.06556097496629687, 0.06916477591761161, 0.06043413743533688, 0.06648320802841112, 0.0474134160102927, 0.03580204228080597, 0.07956056164944836, 0.07869398848942988, 0.07635390455295199, 0.06332782581639274, 0.05661528231689994, 0.05239414921694863, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005543272137173982, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08422529739019413, 0.07567635923093041, 0.08608757839925618, 0.08881800405671125, 0.05007550201674016, 0.06093647840210048, 0.07918374195974243, 0.09574241705873665, 0.08695947846691798, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042146956255246226, 0.036517198681656704, 0.035362094746274275, 0.0365432127280747, 0.04215168528520841, 0.047026369196826234, 0.03411105673657899, 0.03372253707369166, 0.0330915211204692, 0.27628958892088384, 0.2801673973753426, 0.2633484401475672, 0.28819738217471724, 0.301830537005787, 0.27898342798799736, 0.30195359726078996, 0.2752167040591036, 0.27864943426884703, 0.059742109998854764, 0.07829458306897363, 0.05877632075802264, 0.058569033483667265, 0.060626315799628516, 0.06907993060435547, 0.06682400398067889, 0.06105494347039808, 0.07345581404610457, 0.1348792352568633, 0.107150147113242, 0.1344148900036295, 0.12583955685157722, 0.12508842024999833, 0.13377870472009723, 0.12578393789898368, 0.1444582810807038, 0.16346187731400263, 0.1892159659486199, 0.17207046295316764, 0.18540840581534246, 0.17530362463774185, 0.18216728922547176, 0.17691040132274116, 0.19513939764826993, 0.20679817860279381, 0.2095975430516035, 0.12839982201478106, 0.12970459377238452, 0.12419419037389923, 0.12584985341835686, 0.1257200020550816, 0.12568354308469354, 0.13176153416501657, 0.1432766665107087, 0.14600350027804365, 0.18444850681373692, 0.16426295539611147, 0.17388264828155864, 0.16246757775546683, 0.1569171266611269, 0.18988773063378306, 0.19175365486872142, 0.18316170802244958, 0.17577865228958567, 0.16140349992399738, 0.1642389701959177, 0.163945038826109, 0.1477685619660426, 0.16499193025681202, 0.15425026754154092, 0.16760261137752264, 0.1652678877452285, 0.16225127340666134, 0.1944052271909309, 0.14138065402256794, 0.15329822613113264, 0.15409645014881113, 0.12315301633415221, 0.15077746298651074, 0.12699934291195425, 0.14167057997053345, 0.13037973838829597, 0.197369105012562, 0.16180699731530335, 0.13555325204209656, 0.1522317737454807, 0.1739869826982785, 0.11163742047025405, 0.17645503996843348, 0.17966434121854458, 0.15331100164412548, 0.17397440084734517, 0.1803761503234349, 0.2039150871971096, 0.17106791276886235, 0.19784236320396198, 0.16962817893688897, 0.19032509091764482, 0.17821234159195387, 0.19287687322524683, 0.06311162397576431, 0.07384897708406135, 0.05951795864713372, 0.06905968624536618, 0.06452558891401894, 0.06263407673310195, 0.06367451772222088, 0.07884048909070884, 0.061629393734776605]}, "mutation_prompt": null}
{"id": "6cf2869e-f795-4e1d-8290-b691513293fa", "solution": "import numpy as np\n\nclass AdaptiveOppositionDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.7  # Increased differential weight for enhanced exploration\n        self.CR = 0.85  # Adjusted crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def opposition_based_learning(self, population):\n        return self.lower_bound + self.upper_bound - population\n\n    def local_search(self, x, func):\n        trial = x + np.random.uniform(-0.05, 0.05, self.dim)  # Narrowed exploration range\n        trial = np.clip(trial, self.lower_bound, self.upper_bound)\n        if func(trial) < func(x):\n            x = trial\n        return x\n\n    def mutate(self, population, idx):\n        a, b, c = np.random.choice(self.population_size, 3, replace=False)\n        mutant = population[a] + self.F * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.CR\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        budget_used = self.population_size\n\n        while budget_used < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(population, i)\n                trial = self.crossover(population[i], mutant)\n                trial = self.local_search(trial, func)\n\n                trial_fitness = func(trial)\n                budget_used += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if budget_used < self.budget:\n                    opposite = self.opposition_based_learning(population[i])\n                    opposite_fitness = func(opposite)\n                    budget_used += 1\n                    if opposite_fitness < fitness[i]:\n                        population[i] = opposite\n                        fitness[i] = opposite_fitness\n\n                if budget_used >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveOppositionDifferentialEvolution", "description": "Improved adaptive differential evolution with streamlined operations and dynamic parameter adjustment for enhanced convergence.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8b4798a7-48ea-4997-ad53-8c2d8d1033bc", "metadata": {"aucs": [0.32089995619972067, 0.28764108336101657, 0.30427615702934274, 0.3450863267218862, 0.3115607102400493, 0.3246001071450614, 0.33835905137992217, 0.30111700961189813, 0.2826228032458208, 0.06950232555729141, 0.0494348944026507, 0.0695430146692908, 0.05879424399136279, 0.0874270108605888, 0.08450978602005121, 0.0804781940020981, 0.056728219256904744, 0.06572757919085837, 0.07385559053344004, 0.06655948104385301, 0.0711210656661524, 0.06474699623280833, 0.07071756966108311, 0.07010290238442829, 0.07644910551807405, 0.07286864492906575, 0.060006843435301604, 0.07023335334959735, 0.058846649303867515, 0.04862318190210624, 0.05766170699201645, 0.06041291300339813, 0.05461078582529699, 0.06743469404415958, 0.06724488306528853, 0.06641605526152838, 0.703387997120521, 0.8472871532257036, 0.7550073739898624, 0.866110932630028, 0.8440542395118598, 0.8433768117005536, 0.6206882644365246, 0.8422142330417006, 0.7837008775230981, 0.10802522707619933, 0.1039764298836926, 0.09747443104464892, 0.1099171028369672, 0.11046128645973807, 0.08893846444538345, 0.10887994011442692, 0.12750997925988028, 0.11422226872547414, 0.2079566024609264, 0.18450246717094565, 0.17641617667176268, 0.18986340877321306, 0.18410915737767242, 0.18156670572923506, 0.15941660193452267, 0.1894420809897237, 0.16977291820029272, 0.06692842215780526, 0.0707492225949592, 0.07186821582648084, 0.07493662125919853, 0.051755638744614085, 0.07779779902392825, 0.06556097496629687, 0.06916477591761161, 0.06043413743533688, 0.06648320802841112, 0.0474134160102927, 0.03580204228080597, 0.07956056164944836, 0.07869398848942988, 0.07635390455295199, 0.06332782581639274, 0.05661528231689994, 0.05239414921694863, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005543272137173982, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08422529739019413, 0.07567635923093041, 0.08608757839925618, 0.08881800405671125, 0.05007550201674016, 0.06093647840210048, 0.07918374195974243, 0.09574241705873665, 0.08695947846691798, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042146956255246226, 0.036517198681656704, 0.035362094746274275, 0.0365432127280747, 0.04215168528520841, 0.047026369196826234, 0.03411105673657899, 0.03372253707369166, 0.0330915211204692, 0.27628958892088384, 0.2801673973753426, 0.2633484401475672, 0.28819738217471724, 0.301830537005787, 0.27898342798799736, 0.30195359726078996, 0.2752167040591036, 0.27864943426884703, 0.059742109998854764, 0.07829458306897363, 0.05877632075802264, 0.058569033483667265, 0.060626315799628516, 0.06907993060435547, 0.06682400398067889, 0.06105494347039808, 0.07345581404610457, 0.1348792352568633, 0.107150147113242, 0.1344148900036295, 0.12583955685157722, 0.12508842024999833, 0.13377870472009723, 0.12578393789898368, 0.1444582810807038, 0.16346187731400263, 0.1892159659486199, 0.17207046295316764, 0.18540840581534246, 0.17530362463774185, 0.18216728922547176, 0.17691040132274116, 0.19513939764826993, 0.20679817860279381, 0.2095975430516035, 0.12839982201478106, 0.12970459377238452, 0.12419419037389923, 0.12584985341835686, 0.1257200020550816, 0.12568354308469354, 0.13176153416501657, 0.1432766665107087, 0.14600350027804365, 0.18444850681373692, 0.16426295539611147, 0.17388264828155864, 0.16246757775546683, 0.1569171266611269, 0.18988773063378306, 0.19175365486872142, 0.18316170802244958, 0.17577865228958567, 0.16140349992399738, 0.1642389701959177, 0.163945038826109, 0.1477685619660426, 0.16499193025681202, 0.15425026754154092, 0.16760261137752264, 0.1652678877452285, 0.16225127340666134, 0.1944052271909309, 0.14138065402256794, 0.15329822613113264, 0.15409645014881113, 0.12315301633415221, 0.15077746298651074, 0.12699934291195425, 0.14167057997053345, 0.13037973838829597, 0.197369105012562, 0.16180699731530335, 0.13555325204209656, 0.1522317737454807, 0.1739869826982785, 0.11163742047025405, 0.17645503996843348, 0.17966434121854458, 0.15331100164412548, 0.17397440084734517, 0.1803761503234349, 0.2039150871971096, 0.17106791276886235, 0.19784236320396198, 0.16962817893688897, 0.19032509091764482, 0.17821234159195387, 0.19287687322524683, 0.06311162397576431, 0.07384897708406135, 0.05951795864713372, 0.06905968624536618, 0.06452558891401894, 0.06263407673310195, 0.06367451772222088, 0.07884048909070884, 0.061629393734776605]}, "mutation_prompt": null}
{"id": "3213f68e-007c-4f52-948a-5244b69a09d0", "solution": "import numpy as np\n\nclass AdaptiveOppositionDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.7  # Increased differential weight for enhanced exploration\n        self.CR = 0.85  # Adjusted crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def opposition_based_learning(self, population):\n        return self.lower_bound + self.upper_bound - population\n\n    def local_search(self, x, func):\n        trial = x + np.random.uniform(-0.05, 0.05, self.dim)  # Narrowed exploration range\n        trial = np.clip(trial, self.lower_bound, self.upper_bound)\n        if func(trial) < func(x):\n            x = trial\n        return x\n\n    def mutate(self, population, idx):\n        a, b, c = np.random.choice(self.population_size, 3, replace=False)\n        mutant = population[a] + self.F * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.CR\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        budget_used = self.population_size\n\n        while budget_used < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(population, i)\n                trial = self.crossover(population[i], mutant)\n                trial = self.local_search(trial, func)\n\n                trial_fitness = func(trial)\n                budget_used += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if budget_used < self.budget:\n                    opposite = self.opposition_based_learning(population[i])\n                    opposite_fitness = func(opposite)\n                    budget_used += 1\n                    if opposite_fitness < fitness[i]:\n                        population[i] = opposite\n                        fitness[i] = opposite_fitness\n\n                if budget_used >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveOppositionDifferentialEvolution", "description": "Improved adaptive differential evolution with streamlined operations and dynamic parameter adjustment for enhanced convergence.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8b4798a7-48ea-4997-ad53-8c2d8d1033bc", "metadata": {"aucs": [0.32089995619972067, 0.28764108336101657, 0.30427615702934274, 0.3450863267218862, 0.3115607102400493, 0.3246001071450614, 0.33835905137992217, 0.30111700961189813, 0.2826228032458208, 0.06950232555729141, 0.0494348944026507, 0.0695430146692908, 0.05879424399136279, 0.0874270108605888, 0.08450978602005121, 0.0804781940020981, 0.056728219256904744, 0.06572757919085837, 0.07385559053344004, 0.06655948104385301, 0.0711210656661524, 0.06474699623280833, 0.07071756966108311, 0.07010290238442829, 0.07644910551807405, 0.07286864492906575, 0.060006843435301604, 0.07023335334959735, 0.058846649303867515, 0.04862318190210624, 0.05766170699201645, 0.06041291300339813, 0.05461078582529699, 0.06743469404415958, 0.06724488306528853, 0.06641605526152838, 0.703387997120521, 0.8472871532257036, 0.7550073739898624, 0.866110932630028, 0.8440542395118598, 0.8433768117005536, 0.6206882644365246, 0.8422142330417006, 0.7837008775230981, 0.10802522707619933, 0.1039764298836926, 0.09747443104464892, 0.1099171028369672, 0.11046128645973807, 0.08893846444538345, 0.10887994011442692, 0.12750997925988028, 0.11422226872547414, 0.2079566024609264, 0.18450246717094565, 0.17641617667176268, 0.18986340877321306, 0.18410915737767242, 0.18156670572923506, 0.15941660193452267, 0.1894420809897237, 0.16977291820029272, 0.06692842215780526, 0.0707492225949592, 0.07186821582648084, 0.07493662125919853, 0.051755638744614085, 0.07779779902392825, 0.06556097496629687, 0.06916477591761161, 0.06043413743533688, 0.06648320802841112, 0.0474134160102927, 0.03580204228080597, 0.07956056164944836, 0.07869398848942988, 0.07635390455295199, 0.06332782581639274, 0.05661528231689994, 0.05239414921694863, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005543272137173982, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08422529739019413, 0.07567635923093041, 0.08608757839925618, 0.08881800405671125, 0.05007550201674016, 0.06093647840210048, 0.07918374195974243, 0.09574241705873665, 0.08695947846691798, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042146956255246226, 0.036517198681656704, 0.035362094746274275, 0.0365432127280747, 0.04215168528520841, 0.047026369196826234, 0.03411105673657899, 0.03372253707369166, 0.0330915211204692, 0.27628958892088384, 0.2801673973753426, 0.2633484401475672, 0.28819738217471724, 0.301830537005787, 0.27898342798799736, 0.30195359726078996, 0.2752167040591036, 0.27864943426884703, 0.059742109998854764, 0.07829458306897363, 0.05877632075802264, 0.058569033483667265, 0.060626315799628516, 0.06907993060435547, 0.06682400398067889, 0.06105494347039808, 0.07345581404610457, 0.1348792352568633, 0.107150147113242, 0.1344148900036295, 0.12583955685157722, 0.12508842024999833, 0.13377870472009723, 0.12578393789898368, 0.1444582810807038, 0.16346187731400263, 0.1892159659486199, 0.17207046295316764, 0.18540840581534246, 0.17530362463774185, 0.18216728922547176, 0.17691040132274116, 0.19513939764826993, 0.20679817860279381, 0.2095975430516035, 0.12839982201478106, 0.12970459377238452, 0.12419419037389923, 0.12584985341835686, 0.1257200020550816, 0.12568354308469354, 0.13176153416501657, 0.1432766665107087, 0.14600350027804365, 0.18444850681373692, 0.16426295539611147, 0.17388264828155864, 0.16246757775546683, 0.1569171266611269, 0.18988773063378306, 0.19175365486872142, 0.18316170802244958, 0.17577865228958567, 0.16140349992399738, 0.1642389701959177, 0.163945038826109, 0.1477685619660426, 0.16499193025681202, 0.15425026754154092, 0.16760261137752264, 0.1652678877452285, 0.16225127340666134, 0.1944052271909309, 0.14138065402256794, 0.15329822613113264, 0.15409645014881113, 0.12315301633415221, 0.15077746298651074, 0.12699934291195425, 0.14167057997053345, 0.13037973838829597, 0.197369105012562, 0.16180699731530335, 0.13555325204209656, 0.1522317737454807, 0.1739869826982785, 0.11163742047025405, 0.17645503996843348, 0.17966434121854458, 0.15331100164412548, 0.17397440084734517, 0.1803761503234349, 0.2039150871971096, 0.17106791276886235, 0.19784236320396198, 0.16962817893688897, 0.19032509091764482, 0.17821234159195387, 0.19287687322524683, 0.06311162397576431, 0.07384897708406135, 0.05951795864713372, 0.06905968624536618, 0.06452558891401894, 0.06263407673310195, 0.06367451772222088, 0.07884048909070884, 0.061629393734776605]}, "mutation_prompt": null}
{"id": "c1be312a-669e-48a1-8ff8-ca9ed79d1601", "solution": "import numpy as np\n\nclass AdaptiveOppositionDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.7  # Increased differential weight for enhanced exploration\n        self.CR = 0.85  # Adjusted crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def opposition_based_learning(self, population):\n        return self.lower_bound + self.upper_bound - population\n\n    def local_search(self, x, func):\n        trial = x + np.random.uniform(-0.05, 0.05, self.dim)  # Narrowed exploration range\n        trial = np.clip(trial, self.lower_bound, self.upper_bound)\n        if func(trial) < func(x):\n            x = trial\n        return x\n\n    def mutate(self, population, idx):\n        a, b, c = np.random.choice(self.population_size, 3, replace=False)\n        mutant = population[a] + self.F * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.CR\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        budget_used = self.population_size\n\n        while budget_used < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(population, i)\n                trial = self.crossover(population[i], mutant)\n                trial = self.local_search(trial, func)\n\n                trial_fitness = func(trial)\n                budget_used += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if budget_used < self.budget:\n                    opposite = self.opposition_based_learning(population[i])\n                    opposite_fitness = func(opposite)\n                    budget_used += 1\n                    if opposite_fitness < fitness[i]:\n                        population[i] = opposite\n                        fitness[i] = opposite_fitness\n\n                if budget_used >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveOppositionDifferentialEvolution", "description": "Improved adaptive differential evolution with streamlined operations and dynamic parameter adjustment for enhanced convergence.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8b4798a7-48ea-4997-ad53-8c2d8d1033bc", "metadata": {"aucs": [0.32089995619972067, 0.28764108336101657, 0.30427615702934274, 0.3450863267218862, 0.3115607102400493, 0.3246001071450614, 0.33835905137992217, 0.30111700961189813, 0.2826228032458208, 0.06950232555729141, 0.0494348944026507, 0.0695430146692908, 0.05879424399136279, 0.0874270108605888, 0.08450978602005121, 0.0804781940020981, 0.056728219256904744, 0.06572757919085837, 0.07385559053344004, 0.06655948104385301, 0.0711210656661524, 0.06474699623280833, 0.07071756966108311, 0.07010290238442829, 0.07644910551807405, 0.07286864492906575, 0.060006843435301604, 0.07023335334959735, 0.058846649303867515, 0.04862318190210624, 0.05766170699201645, 0.06041291300339813, 0.05461078582529699, 0.06743469404415958, 0.06724488306528853, 0.06641605526152838, 0.703387997120521, 0.8472871532257036, 0.7550073739898624, 0.866110932630028, 0.8440542395118598, 0.8433768117005536, 0.6206882644365246, 0.8422142330417006, 0.7837008775230981, 0.10802522707619933, 0.1039764298836926, 0.09747443104464892, 0.1099171028369672, 0.11046128645973807, 0.08893846444538345, 0.10887994011442692, 0.12750997925988028, 0.11422226872547414, 0.2079566024609264, 0.18450246717094565, 0.17641617667176268, 0.18986340877321306, 0.18410915737767242, 0.18156670572923506, 0.15941660193452267, 0.1894420809897237, 0.16977291820029272, 0.06692842215780526, 0.0707492225949592, 0.07186821582648084, 0.07493662125919853, 0.051755638744614085, 0.07779779902392825, 0.06556097496629687, 0.06916477591761161, 0.06043413743533688, 0.06648320802841112, 0.0474134160102927, 0.03580204228080597, 0.07956056164944836, 0.07869398848942988, 0.07635390455295199, 0.06332782581639274, 0.05661528231689994, 0.05239414921694863, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005543272137173982, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08422529739019413, 0.07567635923093041, 0.08608757839925618, 0.08881800405671125, 0.05007550201674016, 0.06093647840210048, 0.07918374195974243, 0.09574241705873665, 0.08695947846691798, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042146956255246226, 0.036517198681656704, 0.035362094746274275, 0.0365432127280747, 0.04215168528520841, 0.047026369196826234, 0.03411105673657899, 0.03372253707369166, 0.0330915211204692, 0.27628958892088384, 0.2801673973753426, 0.2633484401475672, 0.28819738217471724, 0.301830537005787, 0.27898342798799736, 0.30195359726078996, 0.2752167040591036, 0.27864943426884703, 0.059742109998854764, 0.07829458306897363, 0.05877632075802264, 0.058569033483667265, 0.060626315799628516, 0.06907993060435547, 0.06682400398067889, 0.06105494347039808, 0.07345581404610457, 0.1348792352568633, 0.107150147113242, 0.1344148900036295, 0.12583955685157722, 0.12508842024999833, 0.13377870472009723, 0.12578393789898368, 0.1444582810807038, 0.16346187731400263, 0.1892159659486199, 0.17207046295316764, 0.18540840581534246, 0.17530362463774185, 0.18216728922547176, 0.17691040132274116, 0.19513939764826993, 0.20679817860279381, 0.2095975430516035, 0.12839982201478106, 0.12970459377238452, 0.12419419037389923, 0.12584985341835686, 0.1257200020550816, 0.12568354308469354, 0.13176153416501657, 0.1432766665107087, 0.14600350027804365, 0.18444850681373692, 0.16426295539611147, 0.17388264828155864, 0.16246757775546683, 0.1569171266611269, 0.18988773063378306, 0.19175365486872142, 0.18316170802244958, 0.17577865228958567, 0.16140349992399738, 0.1642389701959177, 0.163945038826109, 0.1477685619660426, 0.16499193025681202, 0.15425026754154092, 0.16760261137752264, 0.1652678877452285, 0.16225127340666134, 0.1944052271909309, 0.14138065402256794, 0.15329822613113264, 0.15409645014881113, 0.12315301633415221, 0.15077746298651074, 0.12699934291195425, 0.14167057997053345, 0.13037973838829597, 0.197369105012562, 0.16180699731530335, 0.13555325204209656, 0.1522317737454807, 0.1739869826982785, 0.11163742047025405, 0.17645503996843348, 0.17966434121854458, 0.15331100164412548, 0.17397440084734517, 0.1803761503234349, 0.2039150871971096, 0.17106791276886235, 0.19784236320396198, 0.16962817893688897, 0.19032509091764482, 0.17821234159195387, 0.19287687322524683, 0.06311162397576431, 0.07384897708406135, 0.05951795864713372, 0.06905968624536618, 0.06452558891401894, 0.06263407673310195, 0.06367451772222088, 0.07884048909070884, 0.061629393734776605]}, "mutation_prompt": null}
{"id": "a349a91a-1400-44e5-a463-944fd8807a85", "solution": "import numpy as np\n\nclass AdaptiveOppositionDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.7  # Increased differential weight for enhanced exploration\n        self.CR = 0.85  # Adjusted crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def opposition_based_learning(self, population):\n        return self.lower_bound + self.upper_bound - population\n\n    def local_search(self, x, func):\n        trial = x + np.random.uniform(-0.05, 0.05, self.dim)  # Narrowed exploration range\n        trial = np.clip(trial, self.lower_bound, self.upper_bound)\n        if func(trial) < func(x):\n            x = trial\n        return x\n\n    def mutate(self, population, idx):\n        a, b, c = np.random.choice(self.population_size, 3, replace=False)\n        mutant = population[a] + self.F * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.CR\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        budget_used = self.population_size\n\n        while budget_used < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(population, i)\n                trial = self.crossover(population[i], mutant)\n                trial = self.local_search(trial, func)\n\n                trial_fitness = func(trial)\n                budget_used += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if budget_used < self.budget:\n                    opposite = self.opposition_based_learning(population[i])\n                    opposite_fitness = func(opposite)\n                    budget_used += 1\n                    if opposite_fitness < fitness[i]:\n                        population[i] = opposite\n                        fitness[i] = opposite_fitness\n\n                if budget_used >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveOppositionDifferentialEvolution", "description": "Improved adaptive differential evolution with streamlined operations and dynamic parameter adjustment for enhanced convergence.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8b4798a7-48ea-4997-ad53-8c2d8d1033bc", "metadata": {"aucs": [0.32089995619972067, 0.28764108336101657, 0.30427615702934274, 0.3450863267218862, 0.3115607102400493, 0.3246001071450614, 0.33835905137992217, 0.30111700961189813, 0.2826228032458208, 0.06950232555729141, 0.0494348944026507, 0.0695430146692908, 0.05879424399136279, 0.0874270108605888, 0.08450978602005121, 0.0804781940020981, 0.056728219256904744, 0.06572757919085837, 0.07385559053344004, 0.06655948104385301, 0.0711210656661524, 0.06474699623280833, 0.07071756966108311, 0.07010290238442829, 0.07644910551807405, 0.07286864492906575, 0.060006843435301604, 0.07023335334959735, 0.058846649303867515, 0.04862318190210624, 0.05766170699201645, 0.06041291300339813, 0.05461078582529699, 0.06743469404415958, 0.06724488306528853, 0.06641605526152838, 0.703387997120521, 0.8472871532257036, 0.7550073739898624, 0.866110932630028, 0.8440542395118598, 0.8433768117005536, 0.6206882644365246, 0.8422142330417006, 0.7837008775230981, 0.10802522707619933, 0.1039764298836926, 0.09747443104464892, 0.1099171028369672, 0.11046128645973807, 0.08893846444538345, 0.10887994011442692, 0.12750997925988028, 0.11422226872547414, 0.2079566024609264, 0.18450246717094565, 0.17641617667176268, 0.18986340877321306, 0.18410915737767242, 0.18156670572923506, 0.15941660193452267, 0.1894420809897237, 0.16977291820029272, 0.06692842215780526, 0.0707492225949592, 0.07186821582648084, 0.07493662125919853, 0.051755638744614085, 0.07779779902392825, 0.06556097496629687, 0.06916477591761161, 0.06043413743533688, 0.06648320802841112, 0.0474134160102927, 0.03580204228080597, 0.07956056164944836, 0.07869398848942988, 0.07635390455295199, 0.06332782581639274, 0.05661528231689994, 0.05239414921694863, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005543272137173982, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08422529739019413, 0.07567635923093041, 0.08608757839925618, 0.08881800405671125, 0.05007550201674016, 0.06093647840210048, 0.07918374195974243, 0.09574241705873665, 0.08695947846691798, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042146956255246226, 0.036517198681656704, 0.035362094746274275, 0.0365432127280747, 0.04215168528520841, 0.047026369196826234, 0.03411105673657899, 0.03372253707369166, 0.0330915211204692, 0.27628958892088384, 0.2801673973753426, 0.2633484401475672, 0.28819738217471724, 0.301830537005787, 0.27898342798799736, 0.30195359726078996, 0.2752167040591036, 0.27864943426884703, 0.059742109998854764, 0.07829458306897363, 0.05877632075802264, 0.058569033483667265, 0.060626315799628516, 0.06907993060435547, 0.06682400398067889, 0.06105494347039808, 0.07345581404610457, 0.1348792352568633, 0.107150147113242, 0.1344148900036295, 0.12583955685157722, 0.12508842024999833, 0.13377870472009723, 0.12578393789898368, 0.1444582810807038, 0.16346187731400263, 0.1892159659486199, 0.17207046295316764, 0.18540840581534246, 0.17530362463774185, 0.18216728922547176, 0.17691040132274116, 0.19513939764826993, 0.20679817860279381, 0.2095975430516035, 0.12839982201478106, 0.12970459377238452, 0.12419419037389923, 0.12584985341835686, 0.1257200020550816, 0.12568354308469354, 0.13176153416501657, 0.1432766665107087, 0.14600350027804365, 0.18444850681373692, 0.16426295539611147, 0.17388264828155864, 0.16246757775546683, 0.1569171266611269, 0.18988773063378306, 0.19175365486872142, 0.18316170802244958, 0.17577865228958567, 0.16140349992399738, 0.1642389701959177, 0.163945038826109, 0.1477685619660426, 0.16499193025681202, 0.15425026754154092, 0.16760261137752264, 0.1652678877452285, 0.16225127340666134, 0.1944052271909309, 0.14138065402256794, 0.15329822613113264, 0.15409645014881113, 0.12315301633415221, 0.15077746298651074, 0.12699934291195425, 0.14167057997053345, 0.13037973838829597, 0.197369105012562, 0.16180699731530335, 0.13555325204209656, 0.1522317737454807, 0.1739869826982785, 0.11163742047025405, 0.17645503996843348, 0.17966434121854458, 0.15331100164412548, 0.17397440084734517, 0.1803761503234349, 0.2039150871971096, 0.17106791276886235, 0.19784236320396198, 0.16962817893688897, 0.19032509091764482, 0.17821234159195387, 0.19287687322524683, 0.06311162397576431, 0.07384897708406135, 0.05951795864713372, 0.06905968624536618, 0.06452558891401894, 0.06263407673310195, 0.06367451772222088, 0.07884048909070884, 0.061629393734776605]}, "mutation_prompt": null}
{"id": "937802b7-5211-4055-a50f-34acee23bdae", "solution": "import numpy as np\n\nclass AdaptiveOppositionDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.7  # Increased differential weight for enhanced exploration\n        self.CR = 0.85  # Adjusted crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def opposition_based_learning(self, population):\n        return self.lower_bound + self.upper_bound - population\n\n    def local_search(self, x, func):\n        trial = x + np.random.uniform(-0.05, 0.05, self.dim)  # Narrowed exploration range\n        trial = np.clip(trial, self.lower_bound, self.upper_bound)\n        if func(trial) < func(x):\n            x = trial\n        return x\n\n    def mutate(self, population, idx):\n        a, b, c = np.random.choice(self.population_size, 3, replace=False)\n        mutant = population[a] + self.F * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.CR\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        budget_used = self.population_size\n\n        while budget_used < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(population, i)\n                trial = self.crossover(population[i], mutant)\n                trial = self.local_search(trial, func)\n\n                trial_fitness = func(trial)\n                budget_used += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if budget_used < self.budget:\n                    opposite = self.opposition_based_learning(population[i])\n                    opposite_fitness = func(opposite)\n                    budget_used += 1\n                    if opposite_fitness < fitness[i]:\n                        population[i] = opposite\n                        fitness[i] = opposite_fitness\n\n                if budget_used >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveOppositionDifferentialEvolution", "description": "Improved adaptive differential evolution with streamlined operations and dynamic parameter adjustment for enhanced convergence.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8b4798a7-48ea-4997-ad53-8c2d8d1033bc", "metadata": {"aucs": [0.32089995619972067, 0.28764108336101657, 0.30427615702934274, 0.3450863267218862, 0.3115607102400493, 0.3246001071450614, 0.33835905137992217, 0.30111700961189813, 0.2826228032458208, 0.06950232555729141, 0.0494348944026507, 0.0695430146692908, 0.05879424399136279, 0.0874270108605888, 0.08450978602005121, 0.0804781940020981, 0.056728219256904744, 0.06572757919085837, 0.07385559053344004, 0.06655948104385301, 0.0711210656661524, 0.06474699623280833, 0.07071756966108311, 0.07010290238442829, 0.07644910551807405, 0.07286864492906575, 0.060006843435301604, 0.07023335334959735, 0.058846649303867515, 0.04862318190210624, 0.05766170699201645, 0.06041291300339813, 0.05461078582529699, 0.06743469404415958, 0.06724488306528853, 0.06641605526152838, 0.703387997120521, 0.8472871532257036, 0.7550073739898624, 0.866110932630028, 0.8440542395118598, 0.8433768117005536, 0.6206882644365246, 0.8422142330417006, 0.7837008775230981, 0.10802522707619933, 0.1039764298836926, 0.09747443104464892, 0.1099171028369672, 0.11046128645973807, 0.08893846444538345, 0.10887994011442692, 0.12750997925988028, 0.11422226872547414, 0.2079566024609264, 0.18450246717094565, 0.17641617667176268, 0.18986340877321306, 0.18410915737767242, 0.18156670572923506, 0.15941660193452267, 0.1894420809897237, 0.16977291820029272, 0.06692842215780526, 0.0707492225949592, 0.07186821582648084, 0.07493662125919853, 0.051755638744614085, 0.07779779902392825, 0.06556097496629687, 0.06916477591761161, 0.06043413743533688, 0.06648320802841112, 0.0474134160102927, 0.03580204228080597, 0.07956056164944836, 0.07869398848942988, 0.07635390455295199, 0.06332782581639274, 0.05661528231689994, 0.05239414921694863, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005543272137173982, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08422529739019413, 0.07567635923093041, 0.08608757839925618, 0.08881800405671125, 0.05007550201674016, 0.06093647840210048, 0.07918374195974243, 0.09574241705873665, 0.08695947846691798, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042146956255246226, 0.036517198681656704, 0.035362094746274275, 0.0365432127280747, 0.04215168528520841, 0.047026369196826234, 0.03411105673657899, 0.03372253707369166, 0.0330915211204692, 0.27628958892088384, 0.2801673973753426, 0.2633484401475672, 0.28819738217471724, 0.301830537005787, 0.27898342798799736, 0.30195359726078996, 0.2752167040591036, 0.27864943426884703, 0.059742109998854764, 0.07829458306897363, 0.05877632075802264, 0.058569033483667265, 0.060626315799628516, 0.06907993060435547, 0.06682400398067889, 0.06105494347039808, 0.07345581404610457, 0.1348792352568633, 0.107150147113242, 0.1344148900036295, 0.12583955685157722, 0.12508842024999833, 0.13377870472009723, 0.12578393789898368, 0.1444582810807038, 0.16346187731400263, 0.1892159659486199, 0.17207046295316764, 0.18540840581534246, 0.17530362463774185, 0.18216728922547176, 0.17691040132274116, 0.19513939764826993, 0.20679817860279381, 0.2095975430516035, 0.12839982201478106, 0.12970459377238452, 0.12419419037389923, 0.12584985341835686, 0.1257200020550816, 0.12568354308469354, 0.13176153416501657, 0.1432766665107087, 0.14600350027804365, 0.18444850681373692, 0.16426295539611147, 0.17388264828155864, 0.16246757775546683, 0.1569171266611269, 0.18988773063378306, 0.19175365486872142, 0.18316170802244958, 0.17577865228958567, 0.16140349992399738, 0.1642389701959177, 0.163945038826109, 0.1477685619660426, 0.16499193025681202, 0.15425026754154092, 0.16760261137752264, 0.1652678877452285, 0.16225127340666134, 0.1944052271909309, 0.14138065402256794, 0.15329822613113264, 0.15409645014881113, 0.12315301633415221, 0.15077746298651074, 0.12699934291195425, 0.14167057997053345, 0.13037973838829597, 0.197369105012562, 0.16180699731530335, 0.13555325204209656, 0.1522317737454807, 0.1739869826982785, 0.11163742047025405, 0.17645503996843348, 0.17966434121854458, 0.15331100164412548, 0.17397440084734517, 0.1803761503234349, 0.2039150871971096, 0.17106791276886235, 0.19784236320396198, 0.16962817893688897, 0.19032509091764482, 0.17821234159195387, 0.19287687322524683, 0.06311162397576431, 0.07384897708406135, 0.05951795864713372, 0.06905968624536618, 0.06452558891401894, 0.06263407673310195, 0.06367451772222088, 0.07884048909070884, 0.061629393734776605]}, "mutation_prompt": null}
{"id": "ff81b326-a226-410a-ada7-07fabd87f15b", "solution": "import numpy as np\n\nclass AdaptiveOppositionDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.7  # Increased differential weight for enhanced exploration\n        self.CR = 0.85  # Adjusted crossover probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def opposition_based_learning(self, population):\n        return self.lower_bound + self.upper_bound - population\n\n    def local_search(self, x, func):\n        trial = x + np.random.uniform(-0.05, 0.05, self.dim)  # Narrowed exploration range\n        trial = np.clip(trial, self.lower_bound, self.upper_bound)\n        if func(trial) < func(x):\n            x = trial\n        return x\n\n    def mutate(self, population, idx):\n        a, b, c = np.random.choice(self.population_size, 3, replace=False)\n        mutant = population[a] + self.F * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.CR\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        budget_used = self.population_size\n\n        while budget_used < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(population, i)\n                trial = self.crossover(population[i], mutant)\n                trial = self.local_search(trial, func)\n\n                trial_fitness = func(trial)\n                budget_used += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if budget_used < self.budget:\n                    opposite = self.opposition_based_learning(population[i])\n                    opposite_fitness = func(opposite)\n                    budget_used += 1\n                    if opposite_fitness < fitness[i]:\n                        population[i] = opposite\n                        fitness[i] = opposite_fitness\n\n                if budget_used >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveOppositionDifferentialEvolution", "description": "Improved adaptive differential evolution with streamlined operations and dynamic parameter adjustment for enhanced convergence.", "configspace": "", "generation": 13, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8b4798a7-48ea-4997-ad53-8c2d8d1033bc", "metadata": {"aucs": [0.32089995619972067, 0.28764108336101657, 0.30427615702934274, 0.3450863267218862, 0.3115607102400493, 0.3246001071450614, 0.33835905137992217, 0.30111700961189813, 0.2826228032458208, 0.06950232555729141, 0.0494348944026507, 0.0695430146692908, 0.05879424399136279, 0.0874270108605888, 0.08450978602005121, 0.0804781940020981, 0.056728219256904744, 0.06572757919085837, 0.07385559053344004, 0.06655948104385301, 0.0711210656661524, 0.06474699623280833, 0.07071756966108311, 0.07010290238442829, 0.07644910551807405, 0.07286864492906575, 0.060006843435301604, 0.07023335334959735, 0.058846649303867515, 0.04862318190210624, 0.05766170699201645, 0.06041291300339813, 0.05461078582529699, 0.06743469404415958, 0.06724488306528853, 0.06641605526152838, 0.703387997120521, 0.8472871532257036, 0.7550073739898624, 0.866110932630028, 0.8440542395118598, 0.8433768117005536, 0.6206882644365246, 0.8422142330417006, 0.7837008775230981, 0.10802522707619933, 0.1039764298836926, 0.09747443104464892, 0.1099171028369672, 0.11046128645973807, 0.08893846444538345, 0.10887994011442692, 0.12750997925988028, 0.11422226872547414, 0.2079566024609264, 0.18450246717094565, 0.17641617667176268, 0.18986340877321306, 0.18410915737767242, 0.18156670572923506, 0.15941660193452267, 0.1894420809897237, 0.16977291820029272, 0.06692842215780526, 0.0707492225949592, 0.07186821582648084, 0.07493662125919853, 0.051755638744614085, 0.07779779902392825, 0.06556097496629687, 0.06916477591761161, 0.06043413743533688, 0.06648320802841112, 0.0474134160102927, 0.03580204228080597, 0.07956056164944836, 0.07869398848942988, 0.07635390455295199, 0.06332782581639274, 0.05661528231689994, 0.05239414921694863, 9.999999999998899e-05, 9.999999999998899e-05, 0.0005543272137173982, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08422529739019413, 0.07567635923093041, 0.08608757839925618, 0.08881800405671125, 0.05007550201674016, 0.06093647840210048, 0.07918374195974243, 0.09574241705873665, 0.08695947846691798, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042146956255246226, 0.036517198681656704, 0.035362094746274275, 0.0365432127280747, 0.04215168528520841, 0.047026369196826234, 0.03411105673657899, 0.03372253707369166, 0.0330915211204692, 0.27628958892088384, 0.2801673973753426, 0.2633484401475672, 0.28819738217471724, 0.301830537005787, 0.27898342798799736, 0.30195359726078996, 0.2752167040591036, 0.27864943426884703, 0.059742109998854764, 0.07829458306897363, 0.05877632075802264, 0.058569033483667265, 0.060626315799628516, 0.06907993060435547, 0.06682400398067889, 0.06105494347039808, 0.07345581404610457, 0.1348792352568633, 0.107150147113242, 0.1344148900036295, 0.12583955685157722, 0.12508842024999833, 0.13377870472009723, 0.12578393789898368, 0.1444582810807038, 0.16346187731400263, 0.1892159659486199, 0.17207046295316764, 0.18540840581534246, 0.17530362463774185, 0.18216728922547176, 0.17691040132274116, 0.19513939764826993, 0.20679817860279381, 0.2095975430516035, 0.12839982201478106, 0.12970459377238452, 0.12419419037389923, 0.12584985341835686, 0.1257200020550816, 0.12568354308469354, 0.13176153416501657, 0.1432766665107087, 0.14600350027804365, 0.18444850681373692, 0.16426295539611147, 0.17388264828155864, 0.16246757775546683, 0.1569171266611269, 0.18988773063378306, 0.19175365486872142, 0.18316170802244958, 0.17577865228958567, 0.16140349992399738, 0.1642389701959177, 0.163945038826109, 0.1477685619660426, 0.16499193025681202, 0.15425026754154092, 0.16760261137752264, 0.1652678877452285, 0.16225127340666134, 0.1944052271909309, 0.14138065402256794, 0.15329822613113264, 0.15409645014881113, 0.12315301633415221, 0.15077746298651074, 0.12699934291195425, 0.14167057997053345, 0.13037973838829597, 0.197369105012562, 0.16180699731530335, 0.13555325204209656, 0.1522317737454807, 0.1739869826982785, 0.11163742047025405, 0.17645503996843348, 0.17966434121854458, 0.15331100164412548, 0.17397440084734517, 0.1803761503234349, 0.2039150871971096, 0.17106791276886235, 0.19784236320396198, 0.16962817893688897, 0.19032509091764482, 0.17821234159195387, 0.19287687322524683, 0.06311162397576431, 0.07384897708406135, 0.05951795864713372, 0.06905968624536618, 0.06452558891401894, 0.06263407673310195, 0.06367451772222088, 0.07884048909070884, 0.061629393734776605]}, "mutation_prompt": null}
{"id": "06855ff7-a830-4655-a18d-9eabdd14ca6c", "solution": "import numpy as np\n\nclass AdaptiveOppositionDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.7\n        self.CR = 0.85\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def opposition_based_learning(self, population):\n        return self.lower_bound + self.upper_bound - population\n\n    def local_search(self, x, func):\n        trial = x + np.random.uniform(-0.05, 0.05, self.dim)\n        trial = np.clip(trial, self.lower_bound, self.upper_bound)\n        return trial if func(trial) < func(x) else x\n\n    def mutate(self, population, idx):\n        a, b, c = np.random.choice(self.population_size, 3, replace=False)\n        mutant = population[a] + self.F * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.CR\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        budget_used = self.population_size\n\n        while budget_used < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(population, i)\n                trial = self.crossover(population[i], mutant)\n                trial = self.local_search(trial, func)\n\n                trial_fitness = func(trial)\n                budget_used += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if budget_used < self.budget and np.random.rand() < 0.5:  # Reduced opposition checks\n                    opposite = self.opposition_based_learning(population[i])\n                    opposite_fitness = func(opposite)\n                    budget_used += 1\n                    if opposite_fitness < fitness[i]:\n                        population[i] = opposite\n                        fitness[i] = opposite_fitness\n\n                if budget_used >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveOppositionDifferentialEvolution", "description": "Enhanced exploration efficiency in adaptive differential evolution with improved mutation strategy and reduced unnecessary opposition checks.", "configspace": "", "generation": 30, "fitness": 0.15588798714294894, "feedback": "The algorithm AdaptiveOppositionDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.15.", "error": "", "parent_id": "8b4798a7-48ea-4997-ad53-8c2d8d1033bc", "metadata": {"aucs": [0.34775342409064947, 0.3271808573207262, 0.34762061239251896, 0.3268678689232386, 0.32325504010319095, 0.34609241963148984, 0.3634349245390327, 0.3406413711584564, 0.3177754402719576, 0.07873727225875737, 0.08938327071181973, 0.12535182230800312, 0.08485812980060803, 0.12673791160962666, 0.09835886702653573, 0.07808121139126378, 0.07639692387675734, 0.10051112024692033, 0.07743343249907264, 0.08111339794738759, 0.0815804687062579, 0.06836427090211561, 0.08357576969909386, 0.07163433075019043, 0.06935266953199659, 0.07714813862598424, 0.07591846180358774, 0.06834550111002557, 0.058781773786886204, 0.061870061102504814, 0.06838571060770593, 0.06569184673188289, 0.06734526032728372, 0.0609792601539757, 0.0505941254429354, 0.08064570083114453, 0.7754376986812079, 0.7035718970464515, 0.827737815703762, 0.6890101026001954, 0.8254580651427534, 0.7115700559148829, 0.6539879885686125, 0.8309900120521889, 0.8361787460218102, 0.1264120111227337, 0.12369819121995074, 0.12134891497658096, 0.10678310050329798, 0.13555044677188066, 0.13500521973192203, 0.15325164948054137, 0.12874752293242564, 0.12283985534134134, 0.18063222064450457, 0.18139869727348412, 0.20145748413540832, 0.20856903937926263, 0.233578955484807, 0.19007483688497395, 0.18072863082604707, 0.19617923654796354, 0.20419826906219196, 0.08297410466935251, 0.07286920467067481, 0.07924182233633748, 0.08002149047089147, 0.07402157699490541, 0.08561026288213613, 0.09110752791444976, 0.08650363601408118, 0.08738058205910293, 0.07393414816987265, 0.07058158022144256, 0.05080206385175334, 0.08397578647148696, 0.08633551480611623, 0.0926265032812249, 0.07852834440648371, 0.053360060854983016, 0.0856191780150719, 9.999999999998899e-05, 0.001031614807603165, 0.006393614044152285, 0.0033777569611270764, 0.008163104395223164, 0.012578890458147196, 9.999999999998899e-05, 0.007681231859978266, 0.0026095010135873675, 0.10489038778181803, 0.11693043159373862, 0.08698209551831593, 0.11305576852551802, 0.07026485729636767, 0.0873440178463265, 0.0979317630001606, 0.10577532392758804, 0.12183263301786595, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04081151895903479, 0.04838888813158304, 0.04573789055666877, 0.042316026018589636, 0.04255011614348492, 0.05112861645260214, 0.04163391880805556, 0.05531765093093455, 0.059824519140814436, 0.3163044755548553, 0.3030308660406785, 0.3129088089303659, 0.3328438652989868, 0.3131525856226639, 0.3205094223826819, 0.30947074779854244, 0.3085464872349126, 0.29914703375987484, 0.07506625510825038, 0.07480902431770753, 0.07323819046606006, 0.07505814265454469, 0.07040281215089672, 0.06942936059430016, 0.06472821147907815, 0.06087780191084602, 0.06386022313939377, 0.13759440163430225, 0.14163775613834984, 0.13623267680948503, 0.12166460943847757, 0.1272816317880292, 0.1346856315785402, 0.11397791806016555, 0.1511406288772783, 0.13544641901147592, 0.19569705191849518, 0.20084963110115306, 0.1991436016421908, 0.19776413621116962, 0.1826370278098851, 0.18704203750626736, 0.2181807791897049, 0.2177947649706955, 0.21061619260339093, 0.13177604247256347, 0.14196702202783762, 0.14066320530800536, 0.12958657361304304, 0.14079113539389, 0.13462135041078638, 0.15402684363349595, 0.15024560502724038, 0.1425346446865855, 0.17155460983732396, 0.17287761712584038, 0.17762452891080627, 0.1720234006566338, 0.1856354922511324, 0.1614997325168369, 0.18406838086682653, 0.15934996110087463, 0.18497306491654641, 0.16027977993306797, 0.1517992911971403, 0.17281743390623017, 0.159403499594994, 0.16010569327614288, 0.1583098482834766, 0.14390208574083607, 0.1584919654740634, 0.15920275240607784, 0.1710568606518007, 0.20375896880005284, 0.16911818832584014, 0.2674437053802461, 0.13178779146252784, 0.14490719084643566, 0.14768366318197823, 0.11225043762194342, 0.11847998914070013, 0.15916193768422804, 0.16578634966116146, 0.16653152341684396, 0.1561336341417715, 0.1335197843378677, 0.1216804702952613, 0.18201002411979117, 0.2555938402315401, 0.18858081105826263, 0.18683904028791531, 0.19493695292480473, 0.18104463053001063, 0.18231498812500146, 0.1772644212362835, 0.167019006480134, 0.18304337999942832, 0.19841481325326238, 0.18886938622374383, 0.059020700973024254, 0.060417381003947, 0.0596491063050445, 0.07566352717441827, 0.060309759088848613, 0.05679300494571071, 0.06581104063174004, 0.06390565601815801, 0.05875962846282401]}, "mutation_prompt": null}
{"id": "d55331b0-a1b1-4e66-b8a0-00eafc5c10aa", "solution": "import numpy as np\n\nclass AdaptiveOppositionDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.7\n        self.CR = 0.85\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def opposition_based_learning(self, population):\n        return self.lower_bound + self.upper_bound - population\n\n    def local_search(self, x, func):\n        trial = x + np.random.uniform(-0.05, 0.05, self.dim)\n        trial = np.clip(trial, self.lower_bound, self.upper_bound)\n        return trial if func(trial) < func(x) else x\n\n    def mutate(self, population, idx):\n        a, b, c = np.random.choice(self.population_size, 3, replace=False)\n        mutant = population[a] + self.F * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.CR\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        budget_used = self.population_size\n\n        while budget_used < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(population, i)\n                trial = self.crossover(population[i], mutant)\n                trial = self.local_search(trial, func)\n\n                trial_fitness = func(trial)\n                budget_used += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if budget_used < self.budget and np.random.rand() < 0.5:  # Reduced opposition checks\n                    opposite = self.opposition_based_learning(population[i])\n                    opposite_fitness = func(opposite)\n                    budget_used += 1\n                    if opposite_fitness < fitness[i]:\n                        population[i] = opposite\n                        fitness[i] = opposite_fitness\n\n                if budget_used >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveOppositionDifferentialEvolution", "description": "Enhanced exploration efficiency in adaptive differential evolution with improved mutation strategy and reduced unnecessary opposition checks.", "configspace": "", "generation": 31, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "06855ff7-a830-4655-a18d-9eabdd14ca6c", "metadata": {"aucs": [0.34775342409064947, 0.3271808573207262, 0.34762061239251896, 0.3268678689232386, 0.32325504010319095, 0.34609241963148984, 0.3634349245390327, 0.3406413711584564, 0.3177754402719576, 0.07873727225875737, 0.08938327071181973, 0.12535182230800312, 0.08485812980060803, 0.12673791160962666, 0.09835886702653573, 0.07808121139126378, 0.07639692387675734, 0.10051112024692033, 0.07743343249907264, 0.08111339794738759, 0.0815804687062579, 0.06836427090211561, 0.08357576969909386, 0.07163433075019043, 0.06935266953199659, 0.07714813862598424, 0.07591846180358774, 0.06834550111002557, 0.058781773786886204, 0.061870061102504814, 0.06838571060770593, 0.06569184673188289, 0.06734526032728372, 0.0609792601539757, 0.0505941254429354, 0.08064570083114453, 0.7754376986812079, 0.7035718970464515, 0.827737815703762, 0.6890101026001954, 0.8254580651427534, 0.7115700559148829, 0.6539879885686125, 0.8309900120521889, 0.8361787460218102, 0.1264120111227337, 0.12369819121995074, 0.12134891497658096, 0.10678310050329798, 0.13555044677188066, 0.13500521973192203, 0.15325164948054137, 0.12874752293242564, 0.12283985534134134, 0.18063222064450457, 0.18139869727348412, 0.20145748413540832, 0.20856903937926263, 0.233578955484807, 0.19007483688497395, 0.18072863082604707, 0.19617923654796354, 0.20419826906219196, 0.08297410466935251, 0.07286920467067481, 0.07924182233633748, 0.08002149047089147, 0.07402157699490541, 0.08561026288213613, 0.09110752791444976, 0.08650363601408118, 0.08738058205910293, 0.07393414816987265, 0.07058158022144256, 0.05080206385175334, 0.08397578647148696, 0.08633551480611623, 0.0926265032812249, 0.07852834440648371, 0.053360060854983016, 0.0856191780150719, 9.999999999998899e-05, 0.001031614807603165, 0.006393614044152285, 0.0033777569611270764, 0.008163104395223164, 0.012578890458147196, 9.999999999998899e-05, 0.007681231859978266, 0.0026095010135873675, 0.10489038778181803, 0.11693043159373862, 0.08698209551831593, 0.11305576852551802, 0.07026485729636767, 0.0873440178463265, 0.0979317630001606, 0.10577532392758804, 0.12183263301786595, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04081151895903479, 0.04838888813158304, 0.04573789055666877, 0.042316026018589636, 0.04255011614348492, 0.05112861645260214, 0.04163391880805556, 0.05531765093093455, 0.059824519140814436, 0.3163044755548553, 0.3030308660406785, 0.3129088089303659, 0.3328438652989868, 0.3131525856226639, 0.3205094223826819, 0.30947074779854244, 0.3085464872349126, 0.29914703375987484, 0.07506625510825038, 0.07480902431770753, 0.07323819046606006, 0.07505814265454469, 0.07040281215089672, 0.06942936059430016, 0.06472821147907815, 0.06087780191084602, 0.06386022313939377, 0.13759440163430225, 0.14163775613834984, 0.13623267680948503, 0.12166460943847757, 0.1272816317880292, 0.1346856315785402, 0.11397791806016555, 0.1511406288772783, 0.13544641901147592, 0.19569705191849518, 0.20084963110115306, 0.1991436016421908, 0.19776413621116962, 0.1826370278098851, 0.18704203750626736, 0.2181807791897049, 0.2177947649706955, 0.21061619260339093, 0.13177604247256347, 0.14196702202783762, 0.14066320530800536, 0.12958657361304304, 0.14079113539389, 0.13462135041078638, 0.15402684363349595, 0.15024560502724038, 0.1425346446865855, 0.17155460983732396, 0.17287761712584038, 0.17762452891080627, 0.1720234006566338, 0.1856354922511324, 0.1614997325168369, 0.18406838086682653, 0.15934996110087463, 0.18497306491654641, 0.16027977993306797, 0.1517992911971403, 0.17281743390623017, 0.159403499594994, 0.16010569327614288, 0.1583098482834766, 0.14390208574083607, 0.1584919654740634, 0.15920275240607784, 0.1710568606518007, 0.20375896880005284, 0.16911818832584014, 0.2674437053802461, 0.13178779146252784, 0.14490719084643566, 0.14768366318197823, 0.11225043762194342, 0.11847998914070013, 0.15916193768422804, 0.16578634966116146, 0.16653152341684396, 0.1561336341417715, 0.1335197843378677, 0.1216804702952613, 0.18201002411979117, 0.2555938402315401, 0.18858081105826263, 0.18683904028791531, 0.19493695292480473, 0.18104463053001063, 0.18231498812500146, 0.1772644212362835, 0.167019006480134, 0.18304337999942832, 0.19841481325326238, 0.18886938622374383, 0.059020700973024254, 0.060417381003947, 0.0596491063050445, 0.07566352717441827, 0.060309759088848613, 0.05679300494571071, 0.06581104063174004, 0.06390565601815801, 0.05875962846282401]}, "mutation_prompt": null}
{"id": "c468c320-fed3-4f45-91a6-63d538e2fa7f", "solution": "import numpy as np\n\nclass AdaptiveOppositionDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.7\n        self.CR = 0.85\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def opposition_based_learning(self, population):\n        return self.lower_bound + self.upper_bound - population\n\n    def local_search(self, x, func):\n        trial = x + np.random.uniform(-0.05, 0.05, self.dim)\n        trial = np.clip(trial, self.lower_bound, self.upper_bound)\n        return trial if func(trial) < func(x) else x\n\n    def mutate(self, population, idx):\n        a, b, c = np.random.choice(self.population_size, 3, replace=False)\n        mutant = population[a] + self.F * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.CR\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        budget_used = self.population_size\n\n        while budget_used < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(population, i)\n                trial = self.crossover(population[i], mutant)\n                trial = self.local_search(trial, func)\n\n                trial_fitness = func(trial)\n                budget_used += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if budget_used < self.budget and np.random.rand() < 0.5:  # Reduced opposition checks\n                    opposite = self.opposition_based_learning(population[i])\n                    opposite_fitness = func(opposite)\n                    budget_used += 1\n                    if opposite_fitness < fitness[i]:\n                        population[i] = opposite\n                        fitness[i] = opposite_fitness\n\n                if budget_used >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveOppositionDifferentialEvolution", "description": "Enhanced exploration efficiency in adaptive differential evolution with improved mutation strategy and reduced unnecessary opposition checks.", "configspace": "", "generation": 31, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "06855ff7-a830-4655-a18d-9eabdd14ca6c", "metadata": {"aucs": [0.34775342409064947, 0.3271808573207262, 0.34762061239251896, 0.3268678689232386, 0.32325504010319095, 0.34609241963148984, 0.3634349245390327, 0.3406413711584564, 0.3177754402719576, 0.07873727225875737, 0.08938327071181973, 0.12535182230800312, 0.08485812980060803, 0.12673791160962666, 0.09835886702653573, 0.07808121139126378, 0.07639692387675734, 0.10051112024692033, 0.07743343249907264, 0.08111339794738759, 0.0815804687062579, 0.06836427090211561, 0.08357576969909386, 0.07163433075019043, 0.06935266953199659, 0.07714813862598424, 0.07591846180358774, 0.06834550111002557, 0.058781773786886204, 0.061870061102504814, 0.06838571060770593, 0.06569184673188289, 0.06734526032728372, 0.0609792601539757, 0.0505941254429354, 0.08064570083114453, 0.7754376986812079, 0.7035718970464515, 0.827737815703762, 0.6890101026001954, 0.8254580651427534, 0.7115700559148829, 0.6539879885686125, 0.8309900120521889, 0.8361787460218102, 0.1264120111227337, 0.12369819121995074, 0.12134891497658096, 0.10678310050329798, 0.13555044677188066, 0.13500521973192203, 0.15325164948054137, 0.12874752293242564, 0.12283985534134134, 0.18063222064450457, 0.18139869727348412, 0.20145748413540832, 0.20856903937926263, 0.233578955484807, 0.19007483688497395, 0.18072863082604707, 0.19617923654796354, 0.20419826906219196, 0.08297410466935251, 0.07286920467067481, 0.07924182233633748, 0.08002149047089147, 0.07402157699490541, 0.08561026288213613, 0.09110752791444976, 0.08650363601408118, 0.08738058205910293, 0.07393414816987265, 0.07058158022144256, 0.05080206385175334, 0.08397578647148696, 0.08633551480611623, 0.0926265032812249, 0.07852834440648371, 0.053360060854983016, 0.0856191780150719, 9.999999999998899e-05, 0.001031614807603165, 0.006393614044152285, 0.0033777569611270764, 0.008163104395223164, 0.012578890458147196, 9.999999999998899e-05, 0.007681231859978266, 0.0026095010135873675, 0.10489038778181803, 0.11693043159373862, 0.08698209551831593, 0.11305576852551802, 0.07026485729636767, 0.0873440178463265, 0.0979317630001606, 0.10577532392758804, 0.12183263301786595, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04081151895903479, 0.04838888813158304, 0.04573789055666877, 0.042316026018589636, 0.04255011614348492, 0.05112861645260214, 0.04163391880805556, 0.05531765093093455, 0.059824519140814436, 0.3163044755548553, 0.3030308660406785, 0.3129088089303659, 0.3328438652989868, 0.3131525856226639, 0.3205094223826819, 0.30947074779854244, 0.3085464872349126, 0.29914703375987484, 0.07506625510825038, 0.07480902431770753, 0.07323819046606006, 0.07505814265454469, 0.07040281215089672, 0.06942936059430016, 0.06472821147907815, 0.06087780191084602, 0.06386022313939377, 0.13759440163430225, 0.14163775613834984, 0.13623267680948503, 0.12166460943847757, 0.1272816317880292, 0.1346856315785402, 0.11397791806016555, 0.1511406288772783, 0.13544641901147592, 0.19569705191849518, 0.20084963110115306, 0.1991436016421908, 0.19776413621116962, 0.1826370278098851, 0.18704203750626736, 0.2181807791897049, 0.2177947649706955, 0.21061619260339093, 0.13177604247256347, 0.14196702202783762, 0.14066320530800536, 0.12958657361304304, 0.14079113539389, 0.13462135041078638, 0.15402684363349595, 0.15024560502724038, 0.1425346446865855, 0.17155460983732396, 0.17287761712584038, 0.17762452891080627, 0.1720234006566338, 0.1856354922511324, 0.1614997325168369, 0.18406838086682653, 0.15934996110087463, 0.18497306491654641, 0.16027977993306797, 0.1517992911971403, 0.17281743390623017, 0.159403499594994, 0.16010569327614288, 0.1583098482834766, 0.14390208574083607, 0.1584919654740634, 0.15920275240607784, 0.1710568606518007, 0.20375896880005284, 0.16911818832584014, 0.2674437053802461, 0.13178779146252784, 0.14490719084643566, 0.14768366318197823, 0.11225043762194342, 0.11847998914070013, 0.15916193768422804, 0.16578634966116146, 0.16653152341684396, 0.1561336341417715, 0.1335197843378677, 0.1216804702952613, 0.18201002411979117, 0.2555938402315401, 0.18858081105826263, 0.18683904028791531, 0.19493695292480473, 0.18104463053001063, 0.18231498812500146, 0.1772644212362835, 0.167019006480134, 0.18304337999942832, 0.19841481325326238, 0.18886938622374383, 0.059020700973024254, 0.060417381003947, 0.0596491063050445, 0.07566352717441827, 0.060309759088848613, 0.05679300494571071, 0.06581104063174004, 0.06390565601815801, 0.05875962846282401]}, "mutation_prompt": null}
{"id": "b7d6725f-a768-4d45-a325-e0586ea268e2", "solution": "import numpy as np\n\nclass AdaptiveOppositionDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.7\n        self.CR = 0.85\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def opposition_based_learning(self, population):\n        return self.lower_bound + self.upper_bound - population\n\n    def local_search(self, x, func):\n        trial = x + np.random.uniform(-0.05, 0.05, self.dim)\n        trial = np.clip(trial, self.lower_bound, self.upper_bound)\n        return trial if func(trial) < func(x) else x\n\n    def mutate(self, population, idx):\n        a, b, c = np.random.choice(self.population_size, 3, replace=False)\n        mutant = population[a] + self.F * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.CR\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        budget_used = self.population_size\n\n        while budget_used < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(population, i)\n                trial = self.crossover(population[i], mutant)\n                trial = self.local_search(trial, func)\n\n                trial_fitness = func(trial)\n                budget_used += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if budget_used < self.budget and np.random.rand() < 0.5:  # Reduced opposition checks\n                    opposite = self.opposition_based_learning(population[i])\n                    opposite_fitness = func(opposite)\n                    budget_used += 1\n                    if opposite_fitness < fitness[i]:\n                        population[i] = opposite\n                        fitness[i] = opposite_fitness\n\n                if budget_used >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveOppositionDifferentialEvolution", "description": "Enhanced exploration efficiency in adaptive differential evolution with improved mutation strategy and reduced unnecessary opposition checks.", "configspace": "", "generation": 31, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "06855ff7-a830-4655-a18d-9eabdd14ca6c", "metadata": {"aucs": [0.34775342409064947, 0.3271808573207262, 0.34762061239251896, 0.3268678689232386, 0.32325504010319095, 0.34609241963148984, 0.3634349245390327, 0.3406413711584564, 0.3177754402719576, 0.07873727225875737, 0.08938327071181973, 0.12535182230800312, 0.08485812980060803, 0.12673791160962666, 0.09835886702653573, 0.07808121139126378, 0.07639692387675734, 0.10051112024692033, 0.07743343249907264, 0.08111339794738759, 0.0815804687062579, 0.06836427090211561, 0.08357576969909386, 0.07163433075019043, 0.06935266953199659, 0.07714813862598424, 0.07591846180358774, 0.06834550111002557, 0.058781773786886204, 0.061870061102504814, 0.06838571060770593, 0.06569184673188289, 0.06734526032728372, 0.0609792601539757, 0.0505941254429354, 0.08064570083114453, 0.7754376986812079, 0.7035718970464515, 0.827737815703762, 0.6890101026001954, 0.8254580651427534, 0.7115700559148829, 0.6539879885686125, 0.8309900120521889, 0.8361787460218102, 0.1264120111227337, 0.12369819121995074, 0.12134891497658096, 0.10678310050329798, 0.13555044677188066, 0.13500521973192203, 0.15325164948054137, 0.12874752293242564, 0.12283985534134134, 0.18063222064450457, 0.18139869727348412, 0.20145748413540832, 0.20856903937926263, 0.233578955484807, 0.19007483688497395, 0.18072863082604707, 0.19617923654796354, 0.20419826906219196, 0.08297410466935251, 0.07286920467067481, 0.07924182233633748, 0.08002149047089147, 0.07402157699490541, 0.08561026288213613, 0.09110752791444976, 0.08650363601408118, 0.08738058205910293, 0.07393414816987265, 0.07058158022144256, 0.05080206385175334, 0.08397578647148696, 0.08633551480611623, 0.0926265032812249, 0.07852834440648371, 0.053360060854983016, 0.0856191780150719, 9.999999999998899e-05, 0.001031614807603165, 0.006393614044152285, 0.0033777569611270764, 0.008163104395223164, 0.012578890458147196, 9.999999999998899e-05, 0.007681231859978266, 0.0026095010135873675, 0.10489038778181803, 0.11693043159373862, 0.08698209551831593, 0.11305576852551802, 0.07026485729636767, 0.0873440178463265, 0.0979317630001606, 0.10577532392758804, 0.12183263301786595, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04081151895903479, 0.04838888813158304, 0.04573789055666877, 0.042316026018589636, 0.04255011614348492, 0.05112861645260214, 0.04163391880805556, 0.05531765093093455, 0.059824519140814436, 0.3163044755548553, 0.3030308660406785, 0.3129088089303659, 0.3328438652989868, 0.3131525856226639, 0.3205094223826819, 0.30947074779854244, 0.3085464872349126, 0.29914703375987484, 0.07506625510825038, 0.07480902431770753, 0.07323819046606006, 0.07505814265454469, 0.07040281215089672, 0.06942936059430016, 0.06472821147907815, 0.06087780191084602, 0.06386022313939377, 0.13759440163430225, 0.14163775613834984, 0.13623267680948503, 0.12166460943847757, 0.1272816317880292, 0.1346856315785402, 0.11397791806016555, 0.1511406288772783, 0.13544641901147592, 0.19569705191849518, 0.20084963110115306, 0.1991436016421908, 0.19776413621116962, 0.1826370278098851, 0.18704203750626736, 0.2181807791897049, 0.2177947649706955, 0.21061619260339093, 0.13177604247256347, 0.14196702202783762, 0.14066320530800536, 0.12958657361304304, 0.14079113539389, 0.13462135041078638, 0.15402684363349595, 0.15024560502724038, 0.1425346446865855, 0.17155460983732396, 0.17287761712584038, 0.17762452891080627, 0.1720234006566338, 0.1856354922511324, 0.1614997325168369, 0.18406838086682653, 0.15934996110087463, 0.18497306491654641, 0.16027977993306797, 0.1517992911971403, 0.17281743390623017, 0.159403499594994, 0.16010569327614288, 0.1583098482834766, 0.14390208574083607, 0.1584919654740634, 0.15920275240607784, 0.1710568606518007, 0.20375896880005284, 0.16911818832584014, 0.2674437053802461, 0.13178779146252784, 0.14490719084643566, 0.14768366318197823, 0.11225043762194342, 0.11847998914070013, 0.15916193768422804, 0.16578634966116146, 0.16653152341684396, 0.1561336341417715, 0.1335197843378677, 0.1216804702952613, 0.18201002411979117, 0.2555938402315401, 0.18858081105826263, 0.18683904028791531, 0.19493695292480473, 0.18104463053001063, 0.18231498812500146, 0.1772644212362835, 0.167019006480134, 0.18304337999942832, 0.19841481325326238, 0.18886938622374383, 0.059020700973024254, 0.060417381003947, 0.0596491063050445, 0.07566352717441827, 0.060309759088848613, 0.05679300494571071, 0.06581104063174004, 0.06390565601815801, 0.05875962846282401]}, "mutation_prompt": null}
{"id": "468b1fe8-4522-4f1a-ac3e-3c95ad3b83c7", "solution": "import numpy as np\n\nclass AdaptiveOppositionDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.7\n        self.CR = 0.85\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def opposition_based_learning(self, population):\n        return self.lower_bound + self.upper_bound - population\n\n    def local_search(self, x, func):\n        trial = x + np.random.uniform(-0.05, 0.05, self.dim)\n        trial = np.clip(trial, self.lower_bound, self.upper_bound)\n        return trial if func(trial) < func(x) else x\n\n    def mutate(self, population, idx):\n        a, b, c = np.random.choice(self.population_size, 3, replace=False)\n        mutant = population[a] + self.F * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.CR\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        budget_used = self.population_size\n\n        while budget_used < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(population, i)\n                trial = self.crossover(population[i], mutant)\n                trial = self.local_search(trial, func)\n\n                trial_fitness = func(trial)\n                budget_used += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if budget_used < self.budget and np.random.rand() < 0.5:  # Reduced opposition checks\n                    opposite = self.opposition_based_learning(population[i])\n                    opposite_fitness = func(opposite)\n                    budget_used += 1\n                    if opposite_fitness < fitness[i]:\n                        population[i] = opposite\n                        fitness[i] = opposite_fitness\n\n                if budget_used >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveOppositionDifferentialEvolution", "description": "Enhanced exploration efficiency in adaptive differential evolution with improved mutation strategy and reduced unnecessary opposition checks.", "configspace": "", "generation": 31, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "06855ff7-a830-4655-a18d-9eabdd14ca6c", "metadata": {"aucs": [0.34775342409064947, 0.3271808573207262, 0.34762061239251896, 0.3268678689232386, 0.32325504010319095, 0.34609241963148984, 0.3634349245390327, 0.3406413711584564, 0.3177754402719576, 0.07873727225875737, 0.08938327071181973, 0.12535182230800312, 0.08485812980060803, 0.12673791160962666, 0.09835886702653573, 0.07808121139126378, 0.07639692387675734, 0.10051112024692033, 0.07743343249907264, 0.08111339794738759, 0.0815804687062579, 0.06836427090211561, 0.08357576969909386, 0.07163433075019043, 0.06935266953199659, 0.07714813862598424, 0.07591846180358774, 0.06834550111002557, 0.058781773786886204, 0.061870061102504814, 0.06838571060770593, 0.06569184673188289, 0.06734526032728372, 0.0609792601539757, 0.0505941254429354, 0.08064570083114453, 0.7754376986812079, 0.7035718970464515, 0.827737815703762, 0.6890101026001954, 0.8254580651427534, 0.7115700559148829, 0.6539879885686125, 0.8309900120521889, 0.8361787460218102, 0.1264120111227337, 0.12369819121995074, 0.12134891497658096, 0.10678310050329798, 0.13555044677188066, 0.13500521973192203, 0.15325164948054137, 0.12874752293242564, 0.12283985534134134, 0.18063222064450457, 0.18139869727348412, 0.20145748413540832, 0.20856903937926263, 0.233578955484807, 0.19007483688497395, 0.18072863082604707, 0.19617923654796354, 0.20419826906219196, 0.08297410466935251, 0.07286920467067481, 0.07924182233633748, 0.08002149047089147, 0.07402157699490541, 0.08561026288213613, 0.09110752791444976, 0.08650363601408118, 0.08738058205910293, 0.07393414816987265, 0.07058158022144256, 0.05080206385175334, 0.08397578647148696, 0.08633551480611623, 0.0926265032812249, 0.07852834440648371, 0.053360060854983016, 0.0856191780150719, 9.999999999998899e-05, 0.001031614807603165, 0.006393614044152285, 0.0033777569611270764, 0.008163104395223164, 0.012578890458147196, 9.999999999998899e-05, 0.007681231859978266, 0.0026095010135873675, 0.10489038778181803, 0.11693043159373862, 0.08698209551831593, 0.11305576852551802, 0.07026485729636767, 0.0873440178463265, 0.0979317630001606, 0.10577532392758804, 0.12183263301786595, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04081151895903479, 0.04838888813158304, 0.04573789055666877, 0.042316026018589636, 0.04255011614348492, 0.05112861645260214, 0.04163391880805556, 0.05531765093093455, 0.059824519140814436, 0.3163044755548553, 0.3030308660406785, 0.3129088089303659, 0.3328438652989868, 0.3131525856226639, 0.3205094223826819, 0.30947074779854244, 0.3085464872349126, 0.29914703375987484, 0.07506625510825038, 0.07480902431770753, 0.07323819046606006, 0.07505814265454469, 0.07040281215089672, 0.06942936059430016, 0.06472821147907815, 0.06087780191084602, 0.06386022313939377, 0.13759440163430225, 0.14163775613834984, 0.13623267680948503, 0.12166460943847757, 0.1272816317880292, 0.1346856315785402, 0.11397791806016555, 0.1511406288772783, 0.13544641901147592, 0.19569705191849518, 0.20084963110115306, 0.1991436016421908, 0.19776413621116962, 0.1826370278098851, 0.18704203750626736, 0.2181807791897049, 0.2177947649706955, 0.21061619260339093, 0.13177604247256347, 0.14196702202783762, 0.14066320530800536, 0.12958657361304304, 0.14079113539389, 0.13462135041078638, 0.15402684363349595, 0.15024560502724038, 0.1425346446865855, 0.17155460983732396, 0.17287761712584038, 0.17762452891080627, 0.1720234006566338, 0.1856354922511324, 0.1614997325168369, 0.18406838086682653, 0.15934996110087463, 0.18497306491654641, 0.16027977993306797, 0.1517992911971403, 0.17281743390623017, 0.159403499594994, 0.16010569327614288, 0.1583098482834766, 0.14390208574083607, 0.1584919654740634, 0.15920275240607784, 0.1710568606518007, 0.20375896880005284, 0.16911818832584014, 0.2674437053802461, 0.13178779146252784, 0.14490719084643566, 0.14768366318197823, 0.11225043762194342, 0.11847998914070013, 0.15916193768422804, 0.16578634966116146, 0.16653152341684396, 0.1561336341417715, 0.1335197843378677, 0.1216804702952613, 0.18201002411979117, 0.2555938402315401, 0.18858081105826263, 0.18683904028791531, 0.19493695292480473, 0.18104463053001063, 0.18231498812500146, 0.1772644212362835, 0.167019006480134, 0.18304337999942832, 0.19841481325326238, 0.18886938622374383, 0.059020700973024254, 0.060417381003947, 0.0596491063050445, 0.07566352717441827, 0.060309759088848613, 0.05679300494571071, 0.06581104063174004, 0.06390565601815801, 0.05875962846282401]}, "mutation_prompt": null}
{"id": "775038c1-cd76-42d1-a3f3-ca8cf06a610c", "solution": "import numpy as np\n\nclass OptimizedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.7\n        self.CR = 0.85\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def opposition_based_learning(self, population):\n        return self.lower_bound + self.upper_bound - population\n\n    def local_search(self, x, func):\n        trial = x + np.random.uniform(-0.05, 0.05, self.dim)\n        trial = np.clip(trial, self.lower_bound, self.upper_bound)\n        return trial if func(trial) < func(x) else x\n\n    def mutate(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = indices\n        while a == idx:\n            a = np.random.choice(self.population_size)  # Ensure a != idx\n        mutant = population[a] + self.F * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.CR\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        budget_used = self.population_size\n\n        while budget_used < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(population, i)\n                trial = self.crossover(population[i], mutant)\n                trial = self.local_search(trial, func)\n\n                trial_fitness = func(trial)\n                budget_used += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if budget_used < self.budget and np.random.rand() < 0.5:\n                    opposite = self.opposition_based_learning(population[i])\n                    opposite_fitness = func(opposite)\n                    budget_used += 1\n                    if opposite_fitness < fitness[i]:\n                        population[i] = opposite\n                        fitness[i] = opposite_fitness\n\n                if budget_used >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "OptimizedAdaptiveDifferentialEvolution", "description": "Improved efficiency in adaptive differential evolution by optimizing mutation selection and reducing population evaluations.", "configspace": "", "generation": 35, "fitness": 0.15665470969084438, "feedback": "The algorithm OptimizedAdaptiveDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.16.", "error": "", "parent_id": "06855ff7-a830-4655-a18d-9eabdd14ca6c", "metadata": {"aucs": [0.33271498090671625, 0.33821180086479685, 0.3453880899533187, 0.3185157140302781, 0.3277189934835031, 0.33835035417125225, 0.3155396853302348, 0.3722190825887045, 0.3510782935562472, 0.10606202667262621, 0.10777992647655665, 0.08732584071840943, 0.08344360086015312, 0.0767127887495157, 0.08766969239290812, 0.09234268168337822, 0.10222252037641888, 0.10283775361398151, 0.070175477781659, 0.0755431298808682, 0.08025920612697768, 0.07122059047080165, 0.06920280391839839, 0.06779216174895208, 0.08089700114514775, 0.0670630638048304, 0.07496264772631689, 0.06557291651393482, 0.07102787952461564, 0.06542028096800301, 0.08265048247269646, 0.05926260103547554, 0.07980771005053267, 0.06292809086049311, 0.06872009855832206, 0.06591255083743786, 0.7874838770242283, 0.7684764757152933, 0.8192759527427476, 0.8274344470763491, 0.9048667662852031, 0.6387465594718346, 0.8030603421930287, 0.9034111674516269, 0.8031181323441676, 0.11385324800022589, 0.11004671414205802, 0.10858897289515845, 0.11905970788445552, 0.12920851025803148, 0.1374139494968789, 0.12944940389379067, 0.12824243333158591, 0.12088931057378649, 0.2068114055648106, 0.19484080079630206, 0.20078880009611344, 0.2024553744361377, 0.2047052918654606, 0.20293180777538034, 0.19009560192648256, 0.19024068052920706, 0.20233683008439562, 0.08045779386042451, 0.06674973994924349, 0.08252680373320631, 0.08843319073988021, 0.07104390875760325, 0.053257550136494136, 0.0963892176520802, 0.07353836546625048, 0.08164405018834753, 0.11391603982168685, 0.08413567044187054, 0.07243991604162259, 0.07615232809051709, 0.07995355313017483, 0.10040968927027405, 0.07795530685120888, 0.05618672054372076, 0.08781757611007046, 0.0191659749956834, 9.999999999998899e-05, 9.999999999998899e-05, 0.0016786762848313153, 0.00257776244855068, 0.004754062488484534, 0.0006582197422636549, 0.0008373641864156678, 0.00979214889523683, 0.0873875631009432, 0.11155885688419442, 0.07875403150009752, 0.0968981231182352, 0.11237863954164351, 0.09255799005559506, 0.1278113471258614, 0.0970678607288894, 0.11185935483640208, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.049870909681668074, 0.048000769250102215, 0.041362165963631736, 0.03975642483650299, 0.041902016388282726, 0.054174460286720794, 0.04431073081465897, 0.05282787282459356, 0.05837241013152816, 0.2804652445187443, 0.30177984662503354, 0.3309211382264202, 0.31121295242496916, 0.3170055031912047, 0.31031849840138637, 0.31577138237236235, 0.3201386243096125, 0.29525674394490675, 0.06950083554940556, 0.06717856796372634, 0.08655506006713154, 0.07118178549493337, 0.058185281324001914, 0.06792162458746387, 0.06045003326484366, 0.0674067694519268, 0.08752424219705301, 0.14304623720275722, 0.12507036219116596, 0.12533006805393265, 0.13835827452813232, 0.1265589526473645, 0.10957709646367897, 0.12369721181722182, 0.11914316135967207, 0.1301434906318163, 0.1935916422177092, 0.19989635057915567, 0.20361755243976376, 0.20050122644588786, 0.18961944507012674, 0.20413117181559814, 0.20501452084215055, 0.22852044933705917, 0.2086591960339712, 0.1386718768734816, 0.1400963892327569, 0.129920224091299, 0.12793652089144525, 0.1653125839746874, 0.15382231041517425, 0.14244879620150752, 0.14616398481082438, 0.14304214071931454, 0.19322817154660255, 0.16501070674892948, 0.1771701464764026, 0.16465657368781617, 0.20238968014165237, 0.16806918338466914, 0.18697764485326185, 0.16988460225763824, 0.16847388454769552, 0.15820849124732994, 0.1487460579494857, 0.17366481489629937, 0.17047229695462096, 0.16577276320888645, 0.15806045785149436, 0.16261776242167414, 0.1543503470174986, 0.1588527407535788, 0.16177925074616573, 0.13297040550785366, 0.13777854690581448, 0.18564045633239834, 0.12289868375077495, 0.14854321466549414, 0.14912793395219326, 0.13382719014185218, 0.1425519247457212, 0.16249170460529472, 0.1432063817901833, 0.13029251830444788, 0.15629183038414363, 0.14474774579630234, 0.13078546152924064, 0.18728736076065133, 0.17657106140145207, 0.21182919152024238, 0.1742159353058429, 0.19493896412048262, 0.18695038790719176, 0.18412388735097573, 0.18402058123336473, 0.17408568794913704, 0.18193849421306718, 0.18008773583247162, 0.18845090267986941, 0.06255040525368827, 0.061482142654500804, 0.06221283843147907, 0.06117578816456648, 0.06856535102535632, 0.06254301809863916, 0.06295883468724262, 0.05936610862231917, 0.05904942949875491]}, "mutation_prompt": null}
{"id": "81fdcf17-9546-40cb-a7f2-60ea251068bd", "solution": "import numpy as np\n\nclass OptimizedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.7\n        self.CR = 0.85\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def opposition_based_learning(self, population):\n        return self.lower_bound + self.upper_bound - population\n\n    def local_search(self, x, func):\n        trial = x + np.random.uniform(-0.05, 0.05, self.dim)\n        trial = np.clip(trial, self.lower_bound, self.upper_bound)\n        return trial if func(trial) < func(x) else x\n\n    def mutate(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = indices\n        while a == idx:\n            a = np.random.choice(self.population_size)  # Ensure a != idx\n        mutant = population[a] + self.F * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.CR\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        budget_used = self.population_size\n\n        while budget_used < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(population, i)\n                trial = self.crossover(population[i], mutant)\n                trial = self.local_search(trial, func)\n\n                trial_fitness = func(trial)\n                budget_used += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if budget_used < self.budget and np.random.rand() < 0.5:\n                    opposite = self.opposition_based_learning(population[i])\n                    opposite_fitness = func(opposite)\n                    budget_used += 1\n                    if opposite_fitness < fitness[i]:\n                        population[i] = opposite\n                        fitness[i] = opposite_fitness\n\n                if budget_used >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "OptimizedAdaptiveDifferentialEvolution", "description": "Improved efficiency in adaptive differential evolution by optimizing mutation selection and reducing population evaluations.", "configspace": "", "generation": 36, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "775038c1-cd76-42d1-a3f3-ca8cf06a610c", "metadata": {"aucs": [0.33271498090671625, 0.33821180086479685, 0.3453880899533187, 0.3185157140302781, 0.3277189934835031, 0.33835035417125225, 0.3155396853302348, 0.3722190825887045, 0.3510782935562472, 0.10606202667262621, 0.10777992647655665, 0.08732584071840943, 0.08344360086015312, 0.0767127887495157, 0.08766969239290812, 0.09234268168337822, 0.10222252037641888, 0.10283775361398151, 0.070175477781659, 0.0755431298808682, 0.08025920612697768, 0.07122059047080165, 0.06920280391839839, 0.06779216174895208, 0.08089700114514775, 0.0670630638048304, 0.07496264772631689, 0.06557291651393482, 0.07102787952461564, 0.06542028096800301, 0.08265048247269646, 0.05926260103547554, 0.07980771005053267, 0.06292809086049311, 0.06872009855832206, 0.06591255083743786, 0.7874838770242283, 0.7684764757152933, 0.8192759527427476, 0.8274344470763491, 0.9048667662852031, 0.6387465594718346, 0.8030603421930287, 0.9034111674516269, 0.8031181323441676, 0.11385324800022589, 0.11004671414205802, 0.10858897289515845, 0.11905970788445552, 0.12920851025803148, 0.1374139494968789, 0.12944940389379067, 0.12824243333158591, 0.12088931057378649, 0.2068114055648106, 0.19484080079630206, 0.20078880009611344, 0.2024553744361377, 0.2047052918654606, 0.20293180777538034, 0.19009560192648256, 0.19024068052920706, 0.20233683008439562, 0.08045779386042451, 0.06674973994924349, 0.08252680373320631, 0.08843319073988021, 0.07104390875760325, 0.053257550136494136, 0.0963892176520802, 0.07353836546625048, 0.08164405018834753, 0.11391603982168685, 0.08413567044187054, 0.07243991604162259, 0.07615232809051709, 0.07995355313017483, 0.10040968927027405, 0.07795530685120888, 0.05618672054372076, 0.08781757611007046, 0.0191659749956834, 9.999999999998899e-05, 9.999999999998899e-05, 0.0016786762848313153, 0.00257776244855068, 0.004754062488484534, 0.0006582197422636549, 0.0008373641864156678, 0.00979214889523683, 0.0873875631009432, 0.11155885688419442, 0.07875403150009752, 0.0968981231182352, 0.11237863954164351, 0.09255799005559506, 0.1278113471258614, 0.0970678607288894, 0.11185935483640208, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.049870909681668074, 0.048000769250102215, 0.041362165963631736, 0.03975642483650299, 0.041902016388282726, 0.054174460286720794, 0.04431073081465897, 0.05282787282459356, 0.05837241013152816, 0.2804652445187443, 0.30177984662503354, 0.3309211382264202, 0.31121295242496916, 0.3170055031912047, 0.31031849840138637, 0.31577138237236235, 0.3201386243096125, 0.29525674394490675, 0.06950083554940556, 0.06717856796372634, 0.08655506006713154, 0.07118178549493337, 0.058185281324001914, 0.06792162458746387, 0.06045003326484366, 0.0674067694519268, 0.08752424219705301, 0.14304623720275722, 0.12507036219116596, 0.12533006805393265, 0.13835827452813232, 0.1265589526473645, 0.10957709646367897, 0.12369721181722182, 0.11914316135967207, 0.1301434906318163, 0.1935916422177092, 0.19989635057915567, 0.20361755243976376, 0.20050122644588786, 0.18961944507012674, 0.20413117181559814, 0.20501452084215055, 0.22852044933705917, 0.2086591960339712, 0.1386718768734816, 0.1400963892327569, 0.129920224091299, 0.12793652089144525, 0.1653125839746874, 0.15382231041517425, 0.14244879620150752, 0.14616398481082438, 0.14304214071931454, 0.19322817154660255, 0.16501070674892948, 0.1771701464764026, 0.16465657368781617, 0.20238968014165237, 0.16806918338466914, 0.18697764485326185, 0.16988460225763824, 0.16847388454769552, 0.15820849124732994, 0.1487460579494857, 0.17366481489629937, 0.17047229695462096, 0.16577276320888645, 0.15806045785149436, 0.16261776242167414, 0.1543503470174986, 0.1588527407535788, 0.16177925074616573, 0.13297040550785366, 0.13777854690581448, 0.18564045633239834, 0.12289868375077495, 0.14854321466549414, 0.14912793395219326, 0.13382719014185218, 0.1425519247457212, 0.16249170460529472, 0.1432063817901833, 0.13029251830444788, 0.15629183038414363, 0.14474774579630234, 0.13078546152924064, 0.18728736076065133, 0.17657106140145207, 0.21182919152024238, 0.1742159353058429, 0.19493896412048262, 0.18695038790719176, 0.18412388735097573, 0.18402058123336473, 0.17408568794913704, 0.18193849421306718, 0.18008773583247162, 0.18845090267986941, 0.06255040525368827, 0.061482142654500804, 0.06221283843147907, 0.06117578816456648, 0.06856535102535632, 0.06254301809863916, 0.06295883468724262, 0.05936610862231917, 0.05904942949875491]}, "mutation_prompt": null}
{"id": "8bee9f2c-505d-4034-bdcf-6c423659a5d1", "solution": "import numpy as np\n\nclass OptimizedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.7\n        self.CR = 0.85\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def opposition_based_learning(self, population):\n        return self.lower_bound + self.upper_bound - population\n\n    def local_search(self, x, func):\n        trial = x + np.random.uniform(-0.05, 0.05, self.dim)\n        trial = np.clip(trial, self.lower_bound, self.upper_bound)\n        return trial if func(trial) < func(x) else x\n\n    def mutate(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = indices\n        while a == idx:\n            a = np.random.choice(self.population_size)  # Ensure a != idx\n        mutant = population[a] + self.F * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.CR\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        budget_used = self.population_size\n\n        while budget_used < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(population, i)\n                trial = self.crossover(population[i], mutant)\n                trial = self.local_search(trial, func)\n\n                trial_fitness = func(trial)\n                budget_used += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if budget_used < self.budget and np.random.rand() < 0.5:\n                    opposite = self.opposition_based_learning(population[i])\n                    opposite_fitness = func(opposite)\n                    budget_used += 1\n                    if opposite_fitness < fitness[i]:\n                        population[i] = opposite\n                        fitness[i] = opposite_fitness\n\n                if budget_used >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "OptimizedAdaptiveDifferentialEvolution", "description": "Improved efficiency in adaptive differential evolution by optimizing mutation selection and reducing population evaluations.", "configspace": "", "generation": 36, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "775038c1-cd76-42d1-a3f3-ca8cf06a610c", "metadata": {"aucs": [0.33271498090671625, 0.33821180086479685, 0.3453880899533187, 0.3185157140302781, 0.3277189934835031, 0.33835035417125225, 0.3155396853302348, 0.3722190825887045, 0.3510782935562472, 0.10606202667262621, 0.10777992647655665, 0.08732584071840943, 0.08344360086015312, 0.0767127887495157, 0.08766969239290812, 0.09234268168337822, 0.10222252037641888, 0.10283775361398151, 0.070175477781659, 0.0755431298808682, 0.08025920612697768, 0.07122059047080165, 0.06920280391839839, 0.06779216174895208, 0.08089700114514775, 0.0670630638048304, 0.07496264772631689, 0.06557291651393482, 0.07102787952461564, 0.06542028096800301, 0.08265048247269646, 0.05926260103547554, 0.07980771005053267, 0.06292809086049311, 0.06872009855832206, 0.06591255083743786, 0.7874838770242283, 0.7684764757152933, 0.8192759527427476, 0.8274344470763491, 0.9048667662852031, 0.6387465594718346, 0.8030603421930287, 0.9034111674516269, 0.8031181323441676, 0.11385324800022589, 0.11004671414205802, 0.10858897289515845, 0.11905970788445552, 0.12920851025803148, 0.1374139494968789, 0.12944940389379067, 0.12824243333158591, 0.12088931057378649, 0.2068114055648106, 0.19484080079630206, 0.20078880009611344, 0.2024553744361377, 0.2047052918654606, 0.20293180777538034, 0.19009560192648256, 0.19024068052920706, 0.20233683008439562, 0.08045779386042451, 0.06674973994924349, 0.08252680373320631, 0.08843319073988021, 0.07104390875760325, 0.053257550136494136, 0.0963892176520802, 0.07353836546625048, 0.08164405018834753, 0.11391603982168685, 0.08413567044187054, 0.07243991604162259, 0.07615232809051709, 0.07995355313017483, 0.10040968927027405, 0.07795530685120888, 0.05618672054372076, 0.08781757611007046, 0.0191659749956834, 9.999999999998899e-05, 9.999999999998899e-05, 0.0016786762848313153, 0.00257776244855068, 0.004754062488484534, 0.0006582197422636549, 0.0008373641864156678, 0.00979214889523683, 0.0873875631009432, 0.11155885688419442, 0.07875403150009752, 0.0968981231182352, 0.11237863954164351, 0.09255799005559506, 0.1278113471258614, 0.0970678607288894, 0.11185935483640208, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.049870909681668074, 0.048000769250102215, 0.041362165963631736, 0.03975642483650299, 0.041902016388282726, 0.054174460286720794, 0.04431073081465897, 0.05282787282459356, 0.05837241013152816, 0.2804652445187443, 0.30177984662503354, 0.3309211382264202, 0.31121295242496916, 0.3170055031912047, 0.31031849840138637, 0.31577138237236235, 0.3201386243096125, 0.29525674394490675, 0.06950083554940556, 0.06717856796372634, 0.08655506006713154, 0.07118178549493337, 0.058185281324001914, 0.06792162458746387, 0.06045003326484366, 0.0674067694519268, 0.08752424219705301, 0.14304623720275722, 0.12507036219116596, 0.12533006805393265, 0.13835827452813232, 0.1265589526473645, 0.10957709646367897, 0.12369721181722182, 0.11914316135967207, 0.1301434906318163, 0.1935916422177092, 0.19989635057915567, 0.20361755243976376, 0.20050122644588786, 0.18961944507012674, 0.20413117181559814, 0.20501452084215055, 0.22852044933705917, 0.2086591960339712, 0.1386718768734816, 0.1400963892327569, 0.129920224091299, 0.12793652089144525, 0.1653125839746874, 0.15382231041517425, 0.14244879620150752, 0.14616398481082438, 0.14304214071931454, 0.19322817154660255, 0.16501070674892948, 0.1771701464764026, 0.16465657368781617, 0.20238968014165237, 0.16806918338466914, 0.18697764485326185, 0.16988460225763824, 0.16847388454769552, 0.15820849124732994, 0.1487460579494857, 0.17366481489629937, 0.17047229695462096, 0.16577276320888645, 0.15806045785149436, 0.16261776242167414, 0.1543503470174986, 0.1588527407535788, 0.16177925074616573, 0.13297040550785366, 0.13777854690581448, 0.18564045633239834, 0.12289868375077495, 0.14854321466549414, 0.14912793395219326, 0.13382719014185218, 0.1425519247457212, 0.16249170460529472, 0.1432063817901833, 0.13029251830444788, 0.15629183038414363, 0.14474774579630234, 0.13078546152924064, 0.18728736076065133, 0.17657106140145207, 0.21182919152024238, 0.1742159353058429, 0.19493896412048262, 0.18695038790719176, 0.18412388735097573, 0.18402058123336473, 0.17408568794913704, 0.18193849421306718, 0.18008773583247162, 0.18845090267986941, 0.06255040525368827, 0.061482142654500804, 0.06221283843147907, 0.06117578816456648, 0.06856535102535632, 0.06254301809863916, 0.06295883468724262, 0.05936610862231917, 0.05904942949875491]}, "mutation_prompt": null}
{"id": "970ffad8-5c14-4a73-9a73-6b82d2aa49de", "solution": "import numpy as np\n\nclass OptimizedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.7\n        self.CR = 0.85\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def opposition_based_learning(self, population):\n        return self.lower_bound + self.upper_bound - population\n\n    def local_search(self, x, func):\n        trial = x + np.random.uniform(-0.05, 0.05, self.dim)\n        trial = np.clip(trial, self.lower_bound, self.upper_bound)\n        return trial if func(trial) < func(x) else x\n\n    def mutate(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = indices\n        while a == idx:\n            a = np.random.choice(self.population_size)  # Ensure a != idx\n        mutant = population[a] + self.F * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.CR\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        budget_used = self.population_size\n\n        while budget_used < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(population, i)\n                trial = self.crossover(population[i], mutant)\n                trial = self.local_search(trial, func)\n\n                trial_fitness = func(trial)\n                budget_used += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if budget_used < self.budget and np.random.rand() < 0.5:\n                    opposite = self.opposition_based_learning(population[i])\n                    opposite_fitness = func(opposite)\n                    budget_used += 1\n                    if opposite_fitness < fitness[i]:\n                        population[i] = opposite\n                        fitness[i] = opposite_fitness\n\n                if budget_used >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "OptimizedAdaptiveDifferentialEvolution", "description": "Improved efficiency in adaptive differential evolution by optimizing mutation selection and reducing population evaluations.", "configspace": "", "generation": 36, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "775038c1-cd76-42d1-a3f3-ca8cf06a610c", "metadata": {"aucs": [0.33271498090671625, 0.33821180086479685, 0.3453880899533187, 0.3185157140302781, 0.3277189934835031, 0.33835035417125225, 0.3155396853302348, 0.3722190825887045, 0.3510782935562472, 0.10606202667262621, 0.10777992647655665, 0.08732584071840943, 0.08344360086015312, 0.0767127887495157, 0.08766969239290812, 0.09234268168337822, 0.10222252037641888, 0.10283775361398151, 0.070175477781659, 0.0755431298808682, 0.08025920612697768, 0.07122059047080165, 0.06920280391839839, 0.06779216174895208, 0.08089700114514775, 0.0670630638048304, 0.07496264772631689, 0.06557291651393482, 0.07102787952461564, 0.06542028096800301, 0.08265048247269646, 0.05926260103547554, 0.07980771005053267, 0.06292809086049311, 0.06872009855832206, 0.06591255083743786, 0.7874838770242283, 0.7684764757152933, 0.8192759527427476, 0.8274344470763491, 0.9048667662852031, 0.6387465594718346, 0.8030603421930287, 0.9034111674516269, 0.8031181323441676, 0.11385324800022589, 0.11004671414205802, 0.10858897289515845, 0.11905970788445552, 0.12920851025803148, 0.1374139494968789, 0.12944940389379067, 0.12824243333158591, 0.12088931057378649, 0.2068114055648106, 0.19484080079630206, 0.20078880009611344, 0.2024553744361377, 0.2047052918654606, 0.20293180777538034, 0.19009560192648256, 0.19024068052920706, 0.20233683008439562, 0.08045779386042451, 0.06674973994924349, 0.08252680373320631, 0.08843319073988021, 0.07104390875760325, 0.053257550136494136, 0.0963892176520802, 0.07353836546625048, 0.08164405018834753, 0.11391603982168685, 0.08413567044187054, 0.07243991604162259, 0.07615232809051709, 0.07995355313017483, 0.10040968927027405, 0.07795530685120888, 0.05618672054372076, 0.08781757611007046, 0.0191659749956834, 9.999999999998899e-05, 9.999999999998899e-05, 0.0016786762848313153, 0.00257776244855068, 0.004754062488484534, 0.0006582197422636549, 0.0008373641864156678, 0.00979214889523683, 0.0873875631009432, 0.11155885688419442, 0.07875403150009752, 0.0968981231182352, 0.11237863954164351, 0.09255799005559506, 0.1278113471258614, 0.0970678607288894, 0.11185935483640208, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.049870909681668074, 0.048000769250102215, 0.041362165963631736, 0.03975642483650299, 0.041902016388282726, 0.054174460286720794, 0.04431073081465897, 0.05282787282459356, 0.05837241013152816, 0.2804652445187443, 0.30177984662503354, 0.3309211382264202, 0.31121295242496916, 0.3170055031912047, 0.31031849840138637, 0.31577138237236235, 0.3201386243096125, 0.29525674394490675, 0.06950083554940556, 0.06717856796372634, 0.08655506006713154, 0.07118178549493337, 0.058185281324001914, 0.06792162458746387, 0.06045003326484366, 0.0674067694519268, 0.08752424219705301, 0.14304623720275722, 0.12507036219116596, 0.12533006805393265, 0.13835827452813232, 0.1265589526473645, 0.10957709646367897, 0.12369721181722182, 0.11914316135967207, 0.1301434906318163, 0.1935916422177092, 0.19989635057915567, 0.20361755243976376, 0.20050122644588786, 0.18961944507012674, 0.20413117181559814, 0.20501452084215055, 0.22852044933705917, 0.2086591960339712, 0.1386718768734816, 0.1400963892327569, 0.129920224091299, 0.12793652089144525, 0.1653125839746874, 0.15382231041517425, 0.14244879620150752, 0.14616398481082438, 0.14304214071931454, 0.19322817154660255, 0.16501070674892948, 0.1771701464764026, 0.16465657368781617, 0.20238968014165237, 0.16806918338466914, 0.18697764485326185, 0.16988460225763824, 0.16847388454769552, 0.15820849124732994, 0.1487460579494857, 0.17366481489629937, 0.17047229695462096, 0.16577276320888645, 0.15806045785149436, 0.16261776242167414, 0.1543503470174986, 0.1588527407535788, 0.16177925074616573, 0.13297040550785366, 0.13777854690581448, 0.18564045633239834, 0.12289868375077495, 0.14854321466549414, 0.14912793395219326, 0.13382719014185218, 0.1425519247457212, 0.16249170460529472, 0.1432063817901833, 0.13029251830444788, 0.15629183038414363, 0.14474774579630234, 0.13078546152924064, 0.18728736076065133, 0.17657106140145207, 0.21182919152024238, 0.1742159353058429, 0.19493896412048262, 0.18695038790719176, 0.18412388735097573, 0.18402058123336473, 0.17408568794913704, 0.18193849421306718, 0.18008773583247162, 0.18845090267986941, 0.06255040525368827, 0.061482142654500804, 0.06221283843147907, 0.06117578816456648, 0.06856535102535632, 0.06254301809863916, 0.06295883468724262, 0.05936610862231917, 0.05904942949875491]}, "mutation_prompt": null}
{"id": "2a284b20-bccb-49a6-9c2b-c319b978e66f", "solution": "import numpy as np\n\nclass OptimizedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.8  # Adjusted mutation factor\n        self.CR = 0.85\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def opposition_based_learning(self, population):\n        return self.lower_bound + self.upper_bound - population\n\n    def local_search(self, x, func):\n        trial = x + np.random.uniform(-0.05, 0.05, self.dim)\n        trial = np.clip(trial, self.lower_bound, self.upper_bound)\n        return trial if func(trial) < func(x) else x\n\n    def mutate(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = indices\n        while a == idx:\n            a = np.random.choice(self.population_size)  # Ensure a != idx\n        mutant = population[a] + self.F * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.CR\n        for d in range(self.dim):  # Enhanced: more efficient local combination\n            if not cross_points[d]:\n                mutant[d] = target[d] + np.random.uniform(-0.1, 0.1)\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        budget_used = self.population_size\n\n        while budget_used < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(population, i)\n                trial = self.crossover(population[i], mutant)\n                trial = self.local_search(trial, func)\n\n                trial_fitness = func(trial)\n                budget_used += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if budget_used < self.budget and np.random.rand() < 0.5:\n                    opposite = self.opposition_based_learning(population[i])\n                    opposite_fitness = func(opposite)\n                    budget_used += 1\n                    if opposite_fitness < fitness[i]:\n                        population[i] = opposite\n                        fitness[i] = opposite_fitness\n\n                if budget_used >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "OptimizedAdaptiveDifferentialEvolution", "description": "Enhanced mutation strategy and population diversity in adaptive differential evolution for performance improvement.", "configspace": "", "generation": 39, "fitness": 0.14412360337951763, "feedback": "The algorithm OptimizedAdaptiveDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.16.", "error": "", "parent_id": "775038c1-cd76-42d1-a3f3-ca8cf06a610c", "metadata": {"aucs": [0.2608819112505829, 0.27425191543776206, 0.2942868366015182, 0.27502555280238494, 0.285135056779078, 0.2963830157425926, 0.3164663554703133, 0.3109602752262045, 0.30281984377927884, 0.057048313212745394, 0.040952185603014724, 0.04756458356593907, 0.04905485638948104, 0.03909886144962382, 0.047827816767693876, 0.05058099637404734, 0.053726266151960966, 0.06158239702218471, 0.06372390279716889, 0.07647894445767178, 0.07730049297572883, 0.07502629758609292, 0.06671020897980784, 0.06708200146205379, 0.07205334235050942, 0.07049750487252571, 0.06444114341908558, 0.055296764342551485, 0.05529460840299616, 0.06202450463350684, 0.07254664369883945, 0.059945411566679985, 0.05276445493389892, 0.05789880046859741, 0.049725197910828856, 0.05383209933935795, 0.8233339385371141, 0.7493690285457736, 0.7045788812071392, 0.9147470845290839, 0.9246678137250397, 0.8273136190784347, 0.7094861791103236, 0.7644825523997342, 0.8684270984044176, 0.12353054096396376, 0.10421813974457439, 0.09748676892879793, 0.1311056147345504, 0.10907314840129179, 0.10667168331198373, 0.12854141533551044, 0.10916411973542506, 0.11005709224191251, 0.1587346657788179, 0.17620012106938265, 0.17532668364248816, 0.16944599408293615, 0.1844079241482084, 0.17245087963009775, 0.18521120670670566, 0.16110729833322057, 0.1584588289765304, 0.06708797232734709, 0.0775430194291945, 0.06648234422629318, 0.052595977005837846, 0.059471894569985806, 0.0598763201062924, 0.062356831648442856, 0.062358657202034706, 0.05957950002842094, 0.06749111592105894, 0.08198910141266846, 0.05168667882828559, 0.060168890870066605, 0.035700518477322696, 0.04106183223753446, 0.040013652515732745, 0.055835861028915135, 0.03920898499212633, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004355133560547286, 0.009431041385344341, 0.07725863672943634, 0.11396154328860864, 0.06654437977475569, 0.07846438463633854, 0.0507863430309653, 0.04587689093262359, 0.059860306802450025, 0.0877268045421683, 0.11040619915025596, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043104085049419205, 0.057147420859475995, 0.024119366760695038, 0.03770074766314646, 0.026124757717659985, 0.03420304800599372, 0.04804511054284122, 0.050574597963631285, 0.029495144092666292, 0.2815568957688305, 0.2643932907340064, 0.27860865755592856, 0.2876524478481566, 0.261081678819859, 0.2783892120275605, 0.28652415028144573, 0.26458369851648644, 0.292556621647999, 0.0701039391663002, 0.06583677533819488, 0.07020477089466182, 0.06729720099050118, 0.05770977270192612, 0.0508278361098049, 0.056329231440995, 0.052373172921280964, 0.05147087663347505, 0.13504440497348402, 0.16051837585431572, 0.128727855097451, 0.11650868217196564, 0.13026695575266622, 0.1215204764857788, 0.13949183547573352, 0.13208625636005267, 0.12360179700172502, 0.1729516973272608, 0.19385188233800676, 0.19310009639562964, 0.17313179426213188, 0.17514912727790177, 0.17460541324866186, 0.18800287616196087, 0.20563690744039775, 0.20435441390238862, 0.1242375718797406, 0.12320881902953518, 0.1442586209468384, 0.11727815560351396, 0.11746426180934488, 0.13356645781198673, 0.13690534996348236, 0.13213764982740717, 0.14357958018103367, 0.1649715711140226, 0.15689655419873394, 0.17888100149552133, 0.16255869595445616, 0.15287037257816805, 0.1668189485567615, 0.17229146074287904, 0.19228357323775258, 0.18523961078622164, 0.145380253326586, 0.14686049811813884, 0.15045524624586282, 0.14007297145327646, 0.1429937085463111, 0.1594624717834131, 0.15102041654701426, 0.15354821910834615, 0.16428659080756847, 0.1911527048515126, 0.13426021041368985, 0.132310444400354, 0.1822461452932429, 0.12772813536678218, 0.19329155579080415, 0.11514308715305432, 0.16676422454969342, 0.11913496601654805, 0.12242827523663413, 0.15034327835510408, 0.15321799909566358, 0.1317584634010851, 0.16791536132036122, 0.15356574362184205, 0.19055910183994473, 0.22221886400114732, 0.18276645689812632, 0.17079057021096034, 0.1683284212637991, 0.19250548790993438, 0.18505179467567456, 0.1804696871932967, 0.19038356260744194, 0.17603112535505583, 0.18407187740891606, 0.191896755224911, 0.05523863898010972, 0.056852092553827616, 0.053978766237977704, 0.06130023699907705, 0.05414655585346495, 0.059075207454296286, 0.07125437337461193, 0.05391345856949881, 0.06184221147416902]}, "mutation_prompt": null}
{"id": "1b6bd6d8-9eb2-40c7-820b-fc972c59a035", "solution": "import numpy as np\n\nclass OptimizedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.7\n        self.CR = 0.85\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def opposition_based_learning(self, population):\n        return self.lower_bound + self.upper_bound - population\n\n    def local_search(self, x, func):\n        trial = x + np.random.uniform(-0.05, 0.05, self.dim)\n        trial = np.clip(trial, self.lower_bound, self.upper_bound)\n        return trial if func(trial) < func(x) else x\n\n    def mutate(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = indices\n        while a == idx:\n            a = np.random.choice(self.population_size)  # Ensure a != idx\n        diversity_factor = np.exp(-np.std(population, axis=0))\n        mutant = population[a] + self.F * diversity_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.CR\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        budget_used = self.population_size\n\n        while budget_used < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(population, i)\n                trial = self.crossover(population[i], mutant)\n                trial = self.local_search(trial, func)\n\n                trial_fitness = func(trial)\n                budget_used += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if budget_used < self.budget and np.random.rand() < 0.5:\n                    opposite = self.opposition_based_learning(population[i])\n                    opposite_fitness = func(opposite)\n                    budget_used += 1\n                    if opposite_fitness < fitness[i]:\n                        population[i] = opposite\n                        fitness[i] = opposite_fitness\n\n                if budget_used >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "OptimizedAdaptiveDifferentialEvolution", "description": "Enhanced diversity control and adaptive mutation scales in differential evolution for improved convergence.", "configspace": "", "generation": 40, "fitness": 0.1973663705699234, "feedback": "The algorithm OptimizedAdaptiveDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.15.", "error": "", "parent_id": "775038c1-cd76-42d1-a3f3-ca8cf06a610c", "metadata": {"aucs": [0.41638628740398986, 0.44087325269180033, 0.4148527099840317, 0.4494462269351437, 0.45193254970586993, 0.4285732387966792, 0.44233668370072377, 0.4045058513435973, 0.40706917071791804, 0.1562348237788359, 0.15192398214247638, 0.19183830873033048, 0.11381342957337981, 0.18253295699273964, 0.14272737290371573, 0.08846635899383604, 0.13486940581886375, 0.16489947751109757, 0.09317325606414628, 0.10696667839175555, 0.10276607628314649, 0.1066556397268118, 0.10133276222620391, 0.10134781381068114, 0.10159155141906873, 0.0901995645432998, 0.10509441139984699, 0.06806531814270966, 0.07894718250219235, 0.08788733843608554, 0.09294185312740444, 0.07705995206656369, 0.07368205419953333, 0.10419076658204407, 0.0896965987353242, 0.08815952290802143, 0.6059931965801326, 0.7914365707933382, 0.5760794573600078, 0.561713682476779, 0.7086335664820342, 0.6452585638163797, 0.6959416057843615, 0.6355955630595329, 0.6636100793953132, 0.19221989496815872, 0.10332686353816078, 0.18837420523322868, 0.13842586244140254, 0.17270548708936606, 0.16168346446808646, 0.1982730526521349, 0.14187849143274145, 0.19291431839998419, 0.3149695205576962, 0.2595867246075664, 0.21468094573007523, 0.39691674293502, 0.28011783803112544, 0.32077562845532637, 0.2335122721580145, 0.19562231692521959, 0.25279105680017966, 0.14364206278757863, 0.15889426199008472, 0.11539101729590606, 0.1606552380129358, 0.15120944018170634, 0.12507950469305396, 0.17243158632006794, 0.1420475226452298, 0.13407427344722023, 0.16145755211215873, 0.13148714690624996, 0.20276949839399028, 0.14874837478690806, 0.1182266779603347, 0.14557943932470718, 0.19015554815967017, 0.08532572534241134, 0.14417958986613888, 0.03217636608843555, 0.0007379536527092334, 0.0025431148211513266, 0.016582066015109587, 0.000941492678347311, 0.03791076508601021, 0.0003448465572233328, 0.008166758575097632, 0.042413233778395454, 0.07351655254502854, 0.062221920608671266, 0.0517168496793472, 0.0675980580459824, 0.03327085320180834, 0.03201560615170751, 0.06865884810948752, 0.05518686854318111, 0.06681685261149328, 9.999999999998899e-05, 0.0061690263580926885, 0.00731791371156576, 0.005433194974177602, 0.0036315412884874165, 0.0038959490571085498, 0.00012958357094705608, 0.020460540404770966, 0.0002662276605875924, 0.10605736351777773, 0.0845013950908653, 0.10399473660424041, 0.07649102149896103, 0.091700765522166, 0.05537006946474632, 0.10560415356716235, 0.11431948078903953, 0.10187288260477412, 0.38469084306538937, 0.4058310578234404, 0.40124745946048834, 0.38697165722643045, 0.36736331399944766, 0.3697234589914331, 0.4337822383368265, 0.39045608204548365, 0.4058754844285949, 0.085379159284794, 0.08450770620605164, 0.07548395136855779, 0.09230646472905557, 0.08201319149952246, 0.09860571416665331, 0.09122061545389315, 0.09209619751079823, 0.08159151180087443, 0.23687293759081463, 0.2083543049023061, 0.14983314558672878, 0.2868310036036179, 0.2659690907494805, 0.1777716472085824, 0.1870720260171711, 0.2234160237913484, 0.18732756527798144, 0.19656465635664966, 0.19553812608002585, 0.25931850956357005, 0.24229846332452087, 0.2250174639885929, 0.28010161441964443, 0.2688585824659956, 0.2810649591037214, 0.26414899044929696, 0.1621107183380136, 0.20181336837685215, 0.19339056335943283, 0.20086067313704414, 0.1538944901491306, 0.21056230743393967, 0.19871728154861967, 0.21489953287856134, 0.19770653086363943, 0.2013583729532108, 0.20210157193565426, 0.2055483036583592, 0.2120592533223543, 0.20789367116380608, 0.19194591488113977, 0.19774616801824973, 0.18545679358942435, 0.1939589611623308, 0.16317018423427276, 0.18156000499103953, 0.17418779380624005, 0.19007234958777175, 0.16639798503105563, 0.1893131590187892, 0.1686725846803443, 0.17023293311013044, 0.17213995400900717, 0.17542140189516753, 0.1771963044977134, 0.4839969877902699, 0.6009308414757439, 0.18999351316992918, 0.530935967825332, 0.13792153722266465, 0.3734771170240567, 0.1516949287463194, 0.22009816070813126, 0.19199836920716684, 0.32493515667382733, 0.5900271304582425, 0.507310238580846, 0.44739320183756404, 0.15319812408756095, 0.44509067425564286, 0.19222562020981782, 0.17754667663510737, 0.19558958724394138, 0.19560938891866686, 0.16942196945566956, 0.1632401743308416, 0.18854457962518, 0.18399252901189111, 0.17576635256430895, 0.1798781961675131, 0.07443908089959572, 0.08092541002146447, 0.07122686837473025, 0.06722958292022208, 0.08348623378316611, 0.06856320221614243, 0.08109639864250873, 0.07278327672841112, 0.06710790365965547]}, "mutation_prompt": null}
{"id": "103cd3a3-13b1-403f-98cb-25e6ceacda4d", "solution": "import numpy as np\n\nclass OptimizedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.7\n        self.CR = 0.85\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def opposition_based_learning(self, population):\n        return self.lower_bound + self.upper_bound - population\n\n    def local_search(self, x, func):\n        trial = x + np.random.uniform(-0.05, 0.05, self.dim)\n        trial = np.clip(trial, self.lower_bound, self.upper_bound)\n        return trial if func(trial) < func(x) else x\n\n    def mutate(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = indices\n        while a == idx or b == idx or c == idx:\n            a, b, c = np.random.choice(self.population_size, 3, replace=False) \n        diversity_factor = np.exp(-np.std(population, axis=0))\n        mutant = population[a] + self.F * diversity_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.CR\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        budget_used = self.population_size\n\n        while budget_used < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(population, i)\n                trial = self.crossover(population[i], mutant)\n                trial = self.local_search(trial, func)\n\n                trial_fitness = func(trial)\n                budget_used += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if budget_used < self.budget and np.random.rand() < 0.5:\n                    opposite = self.opposition_based_learning(population[i])\n                    opposite_fitness = func(opposite)\n                    budget_used += 1\n                    if opposite_fitness < fitness[i]:\n                        population[i] = opposite\n                        fitness[i] = opposite_fitness\n\n                if budget_used >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "OptimizedAdaptiveDifferentialEvolution", "description": "Streamlined differential mutation and reduced redundant fitness evaluations for enhanced efficiency.", "configspace": "", "generation": 41, "fitness": 0.1930648007412307, "feedback": "The algorithm OptimizedAdaptiveDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.14.", "error": "", "parent_id": "1b6bd6d8-9eb2-40c7-820b-fc972c59a035", "metadata": {"aucs": [0.4281452055610063, 0.4611902265853016, 0.39578529003414753, 0.4463571511161294, 0.46019488344935444, 0.4740481102153564, 0.4203118910714937, 0.4432352080386407, 0.4394320781268053, 0.07118121872983318, 0.10631737635910865, 0.12325688050801131, 0.14438484396686413, 0.16827220083249161, 0.07516292771807953, 0.11781740351183656, 0.15465281894874883, 0.15547557211029395, 0.10506359414330291, 0.09499354447794517, 0.1039555398339842, 0.10153815452655834, 0.0937105025177154, 0.09333731684322044, 0.09148694572532223, 0.10165188179000706, 0.09988973291905257, 0.08052241149991946, 0.09542372042036973, 0.09243788405455167, 0.10786404320654963, 0.09930217479329362, 0.07257074268439379, 0.07583219688497334, 0.08894327102415778, 0.0877095573528548, 0.626773037737232, 0.577609298423434, 0.5406292898095095, 0.7050473264974848, 0.5191337273256367, 0.5640234189991915, 0.6415651614373044, 0.5662596546104248, 0.647189486849307, 0.20652900236692828, 0.15229551523593288, 0.17680139937730233, 0.16527783471464785, 0.14272062024402765, 0.1909718494425341, 0.19168282393994496, 0.19356655606021045, 0.20777588824231674, 0.18936206731304928, 0.23601846138225557, 0.18211555054765238, 0.4261123100140535, 0.46483043191335516, 0.31763378650632335, 0.3387443471214907, 0.3111687986516096, 0.2778739625535712, 0.13050430564490978, 0.13876121380798645, 0.09458618004776365, 0.1682670426316607, 0.07746433120605545, 0.10835039467302099, 0.1699907404955211, 0.09764071502837468, 0.15069565841731514, 0.1285846864863317, 0.1445907184471945, 0.15153031409171303, 0.16874593024532458, 0.1407529698348592, 0.1328240120358809, 0.15097583197243314, 0.08266685700443266, 0.1646266817924077, 0.0457194588305716, 0.006759904321821164, 9.999999999998899e-05, 9.999999999998899e-05, 0.0138190751465318, 0.0153628860741446, 0.0029733808495401304, 9.999999999998899e-05, 0.011664971985577144, 0.06446413055427125, 0.09170645811384526, 0.12320612609635495, 0.06902883903535895, 0.052796829884577345, 0.06109965680568841, 0.1191413863655062, 0.052012832578193224, 0.06931041669338756, 0.017200486730201914, 0.006151972084604496, 0.0017998893231295776, 0.011940949611150442, 0.00503181034721234, 9.999999999998899e-05, 0.0022870205673203303, 9.999999999998899e-05, 0.005409141761800518, 0.08336614841735013, 0.08477735714064893, 0.10223750125793252, 0.09610369911643268, 0.07462257821733842, 0.10336898813618922, 0.10007902681743786, 0.08862490092322517, 0.107718681772068, 0.34835855067220334, 0.38524691615873374, 0.3786566183640584, 0.3744060048702137, 0.38225914403446204, 0.3799993979352565, 0.40483425532180084, 0.3873501960024808, 0.40149375799897447, 0.082420970125896, 0.09094407186220999, 0.10321253586847867, 0.07919983558742283, 0.0713205170078447, 0.101115264838747, 0.08502469619545194, 0.09079749149197891, 0.10332365638859953, 0.25058579997192687, 0.1408627747258664, 0.21639120680623425, 0.16669993629048985, 0.1653494702298116, 0.18074888663878486, 0.29845177389240773, 0.1770454897213276, 0.27729923779805654, 0.22989149312605328, 0.22559558775177524, 0.25101491731025105, 0.2529452466911922, 0.2539949790878032, 0.2630599121194438, 0.2464559819287726, 0.26336300004916935, 0.24235394762086326, 0.14440374112403187, 0.20927975594436676, 0.20181846779377766, 0.22447232123033645, 0.20198505597179262, 0.19316977772468402, 0.2096979741894548, 0.2116341131555528, 0.16391673087376568, 0.18446438067617577, 0.1895947635122791, 0.1879586913281749, 0.2401878339497845, 0.19315089529832008, 0.20323133611187183, 0.1826657732084036, 0.17702354212420013, 0.19457367980398244, 0.18345781763550773, 0.1924953627062731, 0.18081656093287646, 0.1833569159995091, 0.1841177058993072, 0.15818597695348657, 0.16595365702011367, 0.16969104747831987, 0.17882555325462457, 0.17458205736297372, 0.19766037824592075, 0.36307426873328685, 0.5420002175709447, 0.18892150715464673, 0.43244892032410376, 0.1374554739925803, 0.1458378903682115, 0.4409962597391788, 0.3425184485263364, 0.19761470750795873, 0.35239236199524604, 0.44163212285858877, 0.3269257542135061, 0.4422345115299753, 0.28462800240588426, 0.19271780455873144, 0.10820573759303043, 0.1794745130951707, 0.17473754134541541, 0.18088749798252124, 0.18442699653640215, 0.1776012675485381, 0.16919177995225076, 0.17927277889420146, 0.17839104465136002, 0.18442307654347145, 0.08037251403528278, 0.0788744293000262, 0.07023365724891406, 0.07975682097495573, 0.07489897875638818, 0.08164469970151733, 0.07779230501885426, 0.0814536231562577, 0.07150285797618416]}, "mutation_prompt": null}
{"id": "fbcb25d9-4751-428c-80e8-275ce76a64dc", "solution": "import numpy as np\n\nclass OptimizedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.7\n        self.CR = 0.85\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def opposition_based_learning(self, population):\n        return self.lower_bound + self.upper_bound - population\n\n    def local_search(self, x, func):\n        trial = x + np.random.uniform(-0.05, 0.05, self.dim)\n        trial = np.clip(trial, self.lower_bound, self.upper_bound)\n        return trial if func(trial) < func(x) else x\n\n    def mutate(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = indices\n        while a == idx:\n            a = np.random.choice(self.population_size)  # Ensure a != idx\n        diversity_factor = np.exp(-np.std(population, axis=0))\n        mutant = population[a] + self.F * diversity_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.CR\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        budget_used = self.population_size\n\n        while budget_used < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(population, i)\n                trial = self.crossover(population[i], mutant)\n                trial = self.local_search(trial, func)\n\n                trial_fitness = func(trial)\n                budget_used += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if budget_used < self.budget and np.random.rand() < 0.5:\n                    opposite = self.opposition_based_learning(population[i])\n                    opposite_fitness = func(opposite)\n                    budget_used += 1\n                    if opposite_fitness < fitness[i]:\n                        population[i] = opposite\n                        fitness[i] = opposite_fitness\n\n                if budget_used >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "OptimizedAdaptiveDifferentialEvolution", "description": "Enhanced diversity control and adaptive mutation scales in differential evolution for improved convergence.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b6bd6d8-9eb2-40c7-820b-fc972c59a035", "metadata": {"aucs": [0.41638628740398986, 0.44087325269180033, 0.4148527099840317, 0.4494462269351437, 0.45193254970586993, 0.4285732387966792, 0.44233668370072377, 0.4045058513435973, 0.40706917071791804, 0.1562348237788359, 0.15192398214247638, 0.19183830873033048, 0.11381342957337981, 0.18253295699273964, 0.14272737290371573, 0.08846635899383604, 0.13486940581886375, 0.16489947751109757, 0.09317325606414628, 0.10696667839175555, 0.10276607628314649, 0.1066556397268118, 0.10133276222620391, 0.10134781381068114, 0.10159155141906873, 0.0901995645432998, 0.10509441139984699, 0.06806531814270966, 0.07894718250219235, 0.08788733843608554, 0.09294185312740444, 0.07705995206656369, 0.07368205419953333, 0.10419076658204407, 0.0896965987353242, 0.08815952290802143, 0.6059931965801326, 0.7914365707933382, 0.5760794573600078, 0.561713682476779, 0.7086335664820342, 0.6452585638163797, 0.6959416057843615, 0.6355955630595329, 0.6636100793953132, 0.19221989496815872, 0.10332686353816078, 0.18837420523322868, 0.13842586244140254, 0.17270548708936606, 0.16168346446808646, 0.1982730526521349, 0.14187849143274145, 0.19291431839998419, 0.3149695205576962, 0.2595867246075664, 0.21468094573007523, 0.39691674293502, 0.28011783803112544, 0.32077562845532637, 0.2335122721580145, 0.19562231692521959, 0.25279105680017966, 0.14364206278757863, 0.15889426199008472, 0.11539101729590606, 0.1606552380129358, 0.15120944018170634, 0.12507950469305396, 0.17243158632006794, 0.1420475226452298, 0.13407427344722023, 0.16145755211215873, 0.13148714690624996, 0.20276949839399028, 0.14874837478690806, 0.1182266779603347, 0.14557943932470718, 0.19015554815967017, 0.08532572534241134, 0.14417958986613888, 0.03217636608843555, 0.0007379536527092334, 0.0025431148211513266, 0.016582066015109587, 0.000941492678347311, 0.03791076508601021, 0.0003448465572233328, 0.008166758575097632, 0.042413233778395454, 0.07351655254502854, 0.062221920608671266, 0.0517168496793472, 0.0675980580459824, 0.03327085320180834, 0.03201560615170751, 0.06865884810948752, 0.05518686854318111, 0.06681685261149328, 9.999999999998899e-05, 0.0061690263580926885, 0.00731791371156576, 0.005433194974177602, 0.0036315412884874165, 0.0038959490571085498, 0.00012958357094705608, 0.020460540404770966, 0.0002662276605875924, 0.10605736351777773, 0.0845013950908653, 0.10399473660424041, 0.07649102149896103, 0.091700765522166, 0.05537006946474632, 0.10560415356716235, 0.11431948078903953, 0.10187288260477412, 0.38469084306538937, 0.4058310578234404, 0.40124745946048834, 0.38697165722643045, 0.36736331399944766, 0.3697234589914331, 0.4337822383368265, 0.39045608204548365, 0.4058754844285949, 0.085379159284794, 0.08450770620605164, 0.07548395136855779, 0.09230646472905557, 0.08201319149952246, 0.09860571416665331, 0.09122061545389315, 0.09209619751079823, 0.08159151180087443, 0.23687293759081463, 0.2083543049023061, 0.14983314558672878, 0.2868310036036179, 0.2659690907494805, 0.1777716472085824, 0.1870720260171711, 0.2234160237913484, 0.18732756527798144, 0.19656465635664966, 0.19553812608002585, 0.25931850956357005, 0.24229846332452087, 0.2250174639885929, 0.28010161441964443, 0.2688585824659956, 0.2810649591037214, 0.26414899044929696, 0.1621107183380136, 0.20181336837685215, 0.19339056335943283, 0.20086067313704414, 0.1538944901491306, 0.21056230743393967, 0.19871728154861967, 0.21489953287856134, 0.19770653086363943, 0.2013583729532108, 0.20210157193565426, 0.2055483036583592, 0.2120592533223543, 0.20789367116380608, 0.19194591488113977, 0.19774616801824973, 0.18545679358942435, 0.1939589611623308, 0.16317018423427276, 0.18156000499103953, 0.17418779380624005, 0.19007234958777175, 0.16639798503105563, 0.1893131590187892, 0.1686725846803443, 0.17023293311013044, 0.17213995400900717, 0.17542140189516753, 0.1771963044977134, 0.4839969877902699, 0.6009308414757439, 0.18999351316992918, 0.530935967825332, 0.13792153722266465, 0.3734771170240567, 0.1516949287463194, 0.22009816070813126, 0.19199836920716684, 0.32493515667382733, 0.5900271304582425, 0.507310238580846, 0.44739320183756404, 0.15319812408756095, 0.44509067425564286, 0.19222562020981782, 0.17754667663510737, 0.19558958724394138, 0.19560938891866686, 0.16942196945566956, 0.1632401743308416, 0.18854457962518, 0.18399252901189111, 0.17576635256430895, 0.1798781961675131, 0.07443908089959572, 0.08092541002146447, 0.07122686837473025, 0.06722958292022208, 0.08348623378316611, 0.06856320221614243, 0.08109639864250873, 0.07278327672841112, 0.06710790365965547]}, "mutation_prompt": null}
{"id": "d06d9572-7e05-434b-978d-83b512a4cd17", "solution": "import numpy as np\n\nclass OptimizedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.7\n        self.CR = 0.85\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def opposition_based_learning(self, population):\n        return self.lower_bound + self.upper_bound - population\n\n    def local_search(self, x, func):\n        trial = x + np.random.uniform(-0.05, 0.05, self.dim)\n        trial = np.clip(trial, self.lower_bound, self.upper_bound)\n        return trial if func(trial) < func(x) else x\n\n    def mutate(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = indices\n        while a == idx:\n            a = np.random.choice(self.population_size)  # Ensure a != idx\n        diversity_factor = np.exp(-np.std(population, axis=0))\n        mutant = population[a] + self.F * diversity_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.CR\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        budget_used = self.population_size\n\n        while budget_used < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(population, i)\n                trial = self.crossover(population[i], mutant)\n                trial = self.local_search(trial, func)\n\n                trial_fitness = func(trial)\n                budget_used += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if budget_used < self.budget and np.random.rand() < 0.5:\n                    opposite = self.opposition_based_learning(population[i])\n                    opposite_fitness = func(opposite)\n                    budget_used += 1\n                    if opposite_fitness < fitness[i]:\n                        population[i] = opposite\n                        fitness[i] = opposite_fitness\n\n                if budget_used >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "OptimizedAdaptiveDifferentialEvolution", "description": "Enhanced diversity control and adaptive mutation scales in differential evolution for improved convergence.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b6bd6d8-9eb2-40c7-820b-fc972c59a035", "metadata": {"aucs": [0.41638628740398986, 0.44087325269180033, 0.4148527099840317, 0.4494462269351437, 0.45193254970586993, 0.4285732387966792, 0.44233668370072377, 0.4045058513435973, 0.40706917071791804, 0.1562348237788359, 0.15192398214247638, 0.19183830873033048, 0.11381342957337981, 0.18253295699273964, 0.14272737290371573, 0.08846635899383604, 0.13486940581886375, 0.16489947751109757, 0.09317325606414628, 0.10696667839175555, 0.10276607628314649, 0.1066556397268118, 0.10133276222620391, 0.10134781381068114, 0.10159155141906873, 0.0901995645432998, 0.10509441139984699, 0.06806531814270966, 0.07894718250219235, 0.08788733843608554, 0.09294185312740444, 0.07705995206656369, 0.07368205419953333, 0.10419076658204407, 0.0896965987353242, 0.08815952290802143, 0.6059931965801326, 0.7914365707933382, 0.5760794573600078, 0.561713682476779, 0.7086335664820342, 0.6452585638163797, 0.6959416057843615, 0.6355955630595329, 0.6636100793953132, 0.19221989496815872, 0.10332686353816078, 0.18837420523322868, 0.13842586244140254, 0.17270548708936606, 0.16168346446808646, 0.1982730526521349, 0.14187849143274145, 0.19291431839998419, 0.3149695205576962, 0.2595867246075664, 0.21468094573007523, 0.39691674293502, 0.28011783803112544, 0.32077562845532637, 0.2335122721580145, 0.19562231692521959, 0.25279105680017966, 0.14364206278757863, 0.15889426199008472, 0.11539101729590606, 0.1606552380129358, 0.15120944018170634, 0.12507950469305396, 0.17243158632006794, 0.1420475226452298, 0.13407427344722023, 0.16145755211215873, 0.13148714690624996, 0.20276949839399028, 0.14874837478690806, 0.1182266779603347, 0.14557943932470718, 0.19015554815967017, 0.08532572534241134, 0.14417958986613888, 0.03217636608843555, 0.0007379536527092334, 0.0025431148211513266, 0.016582066015109587, 0.000941492678347311, 0.03791076508601021, 0.0003448465572233328, 0.008166758575097632, 0.042413233778395454, 0.07351655254502854, 0.062221920608671266, 0.0517168496793472, 0.0675980580459824, 0.03327085320180834, 0.03201560615170751, 0.06865884810948752, 0.05518686854318111, 0.06681685261149328, 9.999999999998899e-05, 0.0061690263580926885, 0.00731791371156576, 0.005433194974177602, 0.0036315412884874165, 0.0038959490571085498, 0.00012958357094705608, 0.020460540404770966, 0.0002662276605875924, 0.10605736351777773, 0.0845013950908653, 0.10399473660424041, 0.07649102149896103, 0.091700765522166, 0.05537006946474632, 0.10560415356716235, 0.11431948078903953, 0.10187288260477412, 0.38469084306538937, 0.4058310578234404, 0.40124745946048834, 0.38697165722643045, 0.36736331399944766, 0.3697234589914331, 0.4337822383368265, 0.39045608204548365, 0.4058754844285949, 0.085379159284794, 0.08450770620605164, 0.07548395136855779, 0.09230646472905557, 0.08201319149952246, 0.09860571416665331, 0.09122061545389315, 0.09209619751079823, 0.08159151180087443, 0.23687293759081463, 0.2083543049023061, 0.14983314558672878, 0.2868310036036179, 0.2659690907494805, 0.1777716472085824, 0.1870720260171711, 0.2234160237913484, 0.18732756527798144, 0.19656465635664966, 0.19553812608002585, 0.25931850956357005, 0.24229846332452087, 0.2250174639885929, 0.28010161441964443, 0.2688585824659956, 0.2810649591037214, 0.26414899044929696, 0.1621107183380136, 0.20181336837685215, 0.19339056335943283, 0.20086067313704414, 0.1538944901491306, 0.21056230743393967, 0.19871728154861967, 0.21489953287856134, 0.19770653086363943, 0.2013583729532108, 0.20210157193565426, 0.2055483036583592, 0.2120592533223543, 0.20789367116380608, 0.19194591488113977, 0.19774616801824973, 0.18545679358942435, 0.1939589611623308, 0.16317018423427276, 0.18156000499103953, 0.17418779380624005, 0.19007234958777175, 0.16639798503105563, 0.1893131590187892, 0.1686725846803443, 0.17023293311013044, 0.17213995400900717, 0.17542140189516753, 0.1771963044977134, 0.4839969877902699, 0.6009308414757439, 0.18999351316992918, 0.530935967825332, 0.13792153722266465, 0.3734771170240567, 0.1516949287463194, 0.22009816070813126, 0.19199836920716684, 0.32493515667382733, 0.5900271304582425, 0.507310238580846, 0.44739320183756404, 0.15319812408756095, 0.44509067425564286, 0.19222562020981782, 0.17754667663510737, 0.19558958724394138, 0.19560938891866686, 0.16942196945566956, 0.1632401743308416, 0.18854457962518, 0.18399252901189111, 0.17576635256430895, 0.1798781961675131, 0.07443908089959572, 0.08092541002146447, 0.07122686837473025, 0.06722958292022208, 0.08348623378316611, 0.06856320221614243, 0.08109639864250873, 0.07278327672841112, 0.06710790365965547]}, "mutation_prompt": null}
{"id": "0c435de6-b159-4507-bcdf-e0cfaa8015fa", "solution": "import numpy as np\n\nclass OptimizedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.7\n        self.CR = 0.85\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def opposition_based_learning(self, population):\n        return self.lower_bound + self.upper_bound - population\n\n    def local_search(self, x, func):\n        trial = x + np.random.uniform(-0.05, 0.05, self.dim)\n        trial = np.clip(trial, self.lower_bound, self.upper_bound)\n        return trial if func(trial) < func(x) else x\n\n    def mutate(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = indices\n        while a == idx:\n            a = np.random.choice(self.population_size)  # Ensure a != idx\n        diversity_factor = np.exp(-np.std(population, axis=0))\n        mutant = population[a] + self.F * diversity_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.CR\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        budget_used = self.population_size\n\n        while budget_used < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(population, i)\n                trial = self.crossover(population[i], mutant)\n                trial = self.local_search(trial, func)\n\n                trial_fitness = func(trial)\n                budget_used += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if budget_used < self.budget and np.random.rand() < 0.5:\n                    opposite = self.opposition_based_learning(population[i])\n                    opposite_fitness = func(opposite)\n                    budget_used += 1\n                    if opposite_fitness < fitness[i]:\n                        population[i] = opposite\n                        fitness[i] = opposite_fitness\n\n                if budget_used >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "OptimizedAdaptiveDifferentialEvolution", "description": "Enhanced diversity control and adaptive mutation scales in differential evolution for improved convergence.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b6bd6d8-9eb2-40c7-820b-fc972c59a035", "metadata": {"aucs": [0.41638628740398986, 0.44087325269180033, 0.4148527099840317, 0.4494462269351437, 0.45193254970586993, 0.4285732387966792, 0.44233668370072377, 0.4045058513435973, 0.40706917071791804, 0.1562348237788359, 0.15192398214247638, 0.19183830873033048, 0.11381342957337981, 0.18253295699273964, 0.14272737290371573, 0.08846635899383604, 0.13486940581886375, 0.16489947751109757, 0.09317325606414628, 0.10696667839175555, 0.10276607628314649, 0.1066556397268118, 0.10133276222620391, 0.10134781381068114, 0.10159155141906873, 0.0901995645432998, 0.10509441139984699, 0.06806531814270966, 0.07894718250219235, 0.08788733843608554, 0.09294185312740444, 0.07705995206656369, 0.07368205419953333, 0.10419076658204407, 0.0896965987353242, 0.08815952290802143, 0.6059931965801326, 0.7914365707933382, 0.5760794573600078, 0.561713682476779, 0.7086335664820342, 0.6452585638163797, 0.6959416057843615, 0.6355955630595329, 0.6636100793953132, 0.19221989496815872, 0.10332686353816078, 0.18837420523322868, 0.13842586244140254, 0.17270548708936606, 0.16168346446808646, 0.1982730526521349, 0.14187849143274145, 0.19291431839998419, 0.3149695205576962, 0.2595867246075664, 0.21468094573007523, 0.39691674293502, 0.28011783803112544, 0.32077562845532637, 0.2335122721580145, 0.19562231692521959, 0.25279105680017966, 0.14364206278757863, 0.15889426199008472, 0.11539101729590606, 0.1606552380129358, 0.15120944018170634, 0.12507950469305396, 0.17243158632006794, 0.1420475226452298, 0.13407427344722023, 0.16145755211215873, 0.13148714690624996, 0.20276949839399028, 0.14874837478690806, 0.1182266779603347, 0.14557943932470718, 0.19015554815967017, 0.08532572534241134, 0.14417958986613888, 0.03217636608843555, 0.0007379536527092334, 0.0025431148211513266, 0.016582066015109587, 0.000941492678347311, 0.03791076508601021, 0.0003448465572233328, 0.008166758575097632, 0.042413233778395454, 0.07351655254502854, 0.062221920608671266, 0.0517168496793472, 0.0675980580459824, 0.03327085320180834, 0.03201560615170751, 0.06865884810948752, 0.05518686854318111, 0.06681685261149328, 9.999999999998899e-05, 0.0061690263580926885, 0.00731791371156576, 0.005433194974177602, 0.0036315412884874165, 0.0038959490571085498, 0.00012958357094705608, 0.020460540404770966, 0.0002662276605875924, 0.10605736351777773, 0.0845013950908653, 0.10399473660424041, 0.07649102149896103, 0.091700765522166, 0.05537006946474632, 0.10560415356716235, 0.11431948078903953, 0.10187288260477412, 0.38469084306538937, 0.4058310578234404, 0.40124745946048834, 0.38697165722643045, 0.36736331399944766, 0.3697234589914331, 0.4337822383368265, 0.39045608204548365, 0.4058754844285949, 0.085379159284794, 0.08450770620605164, 0.07548395136855779, 0.09230646472905557, 0.08201319149952246, 0.09860571416665331, 0.09122061545389315, 0.09209619751079823, 0.08159151180087443, 0.23687293759081463, 0.2083543049023061, 0.14983314558672878, 0.2868310036036179, 0.2659690907494805, 0.1777716472085824, 0.1870720260171711, 0.2234160237913484, 0.18732756527798144, 0.19656465635664966, 0.19553812608002585, 0.25931850956357005, 0.24229846332452087, 0.2250174639885929, 0.28010161441964443, 0.2688585824659956, 0.2810649591037214, 0.26414899044929696, 0.1621107183380136, 0.20181336837685215, 0.19339056335943283, 0.20086067313704414, 0.1538944901491306, 0.21056230743393967, 0.19871728154861967, 0.21489953287856134, 0.19770653086363943, 0.2013583729532108, 0.20210157193565426, 0.2055483036583592, 0.2120592533223543, 0.20789367116380608, 0.19194591488113977, 0.19774616801824973, 0.18545679358942435, 0.1939589611623308, 0.16317018423427276, 0.18156000499103953, 0.17418779380624005, 0.19007234958777175, 0.16639798503105563, 0.1893131590187892, 0.1686725846803443, 0.17023293311013044, 0.17213995400900717, 0.17542140189516753, 0.1771963044977134, 0.4839969877902699, 0.6009308414757439, 0.18999351316992918, 0.530935967825332, 0.13792153722266465, 0.3734771170240567, 0.1516949287463194, 0.22009816070813126, 0.19199836920716684, 0.32493515667382733, 0.5900271304582425, 0.507310238580846, 0.44739320183756404, 0.15319812408756095, 0.44509067425564286, 0.19222562020981782, 0.17754667663510737, 0.19558958724394138, 0.19560938891866686, 0.16942196945566956, 0.1632401743308416, 0.18854457962518, 0.18399252901189111, 0.17576635256430895, 0.1798781961675131, 0.07443908089959572, 0.08092541002146447, 0.07122686837473025, 0.06722958292022208, 0.08348623378316611, 0.06856320221614243, 0.08109639864250873, 0.07278327672841112, 0.06710790365965547]}, "mutation_prompt": null}
{"id": "df120fab-9885-4492-8788-21aa0c9a23c6", "solution": "import numpy as np\n\nclass OptimizedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.7\n        self.CR = 0.85\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def opposition_based_learning(self, population):\n        return self.lower_bound + self.upper_bound - population\n\n    def local_search(self, x, func):\n        trial = x + np.random.uniform(-0.05, 0.05, self.dim)\n        trial = np.clip(trial, self.lower_bound, self.upper_bound)\n        return trial if func(trial) < func(x) else x\n\n    def mutate(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = indices\n        while a == idx:\n            a = np.random.choice(self.population_size)  # Ensure a != idx\n        diversity_factor = np.exp(-np.std(population, axis=0))\n        mutant = population[a] + self.F * diversity_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.CR\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        budget_used = self.population_size\n\n        while budget_used < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(population, i)\n                trial = self.crossover(population[i], mutant)\n                trial = self.local_search(trial, func)\n\n                trial_fitness = func(trial)\n                budget_used += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if budget_used < self.budget and np.random.rand() < 0.5:\n                    opposite = self.opposition_based_learning(population[i])\n                    opposite_fitness = func(opposite)\n                    budget_used += 1\n                    if opposite_fitness < fitness[i]:\n                        population[i] = opposite\n                        fitness[i] = opposite_fitness\n\n                if budget_used >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "OptimizedAdaptiveDifferentialEvolution", "description": "Enhanced diversity control and adaptive mutation scales in differential evolution for improved convergence.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b6bd6d8-9eb2-40c7-820b-fc972c59a035", "metadata": {"aucs": [0.41638628740398986, 0.44087325269180033, 0.4148527099840317, 0.4494462269351437, 0.45193254970586993, 0.4285732387966792, 0.44233668370072377, 0.4045058513435973, 0.40706917071791804, 0.1562348237788359, 0.15192398214247638, 0.19183830873033048, 0.11381342957337981, 0.18253295699273964, 0.14272737290371573, 0.08846635899383604, 0.13486940581886375, 0.16489947751109757, 0.09317325606414628, 0.10696667839175555, 0.10276607628314649, 0.1066556397268118, 0.10133276222620391, 0.10134781381068114, 0.10159155141906873, 0.0901995645432998, 0.10509441139984699, 0.06806531814270966, 0.07894718250219235, 0.08788733843608554, 0.09294185312740444, 0.07705995206656369, 0.07368205419953333, 0.10419076658204407, 0.0896965987353242, 0.08815952290802143, 0.6059931965801326, 0.7914365707933382, 0.5760794573600078, 0.561713682476779, 0.7086335664820342, 0.6452585638163797, 0.6959416057843615, 0.6355955630595329, 0.6636100793953132, 0.19221989496815872, 0.10332686353816078, 0.18837420523322868, 0.13842586244140254, 0.17270548708936606, 0.16168346446808646, 0.1982730526521349, 0.14187849143274145, 0.19291431839998419, 0.3149695205576962, 0.2595867246075664, 0.21468094573007523, 0.39691674293502, 0.28011783803112544, 0.32077562845532637, 0.2335122721580145, 0.19562231692521959, 0.25279105680017966, 0.14364206278757863, 0.15889426199008472, 0.11539101729590606, 0.1606552380129358, 0.15120944018170634, 0.12507950469305396, 0.17243158632006794, 0.1420475226452298, 0.13407427344722023, 0.16145755211215873, 0.13148714690624996, 0.20276949839399028, 0.14874837478690806, 0.1182266779603347, 0.14557943932470718, 0.19015554815967017, 0.08532572534241134, 0.14417958986613888, 0.03217636608843555, 0.0007379536527092334, 0.0025431148211513266, 0.016582066015109587, 0.000941492678347311, 0.03791076508601021, 0.0003448465572233328, 0.008166758575097632, 0.042413233778395454, 0.07351655254502854, 0.062221920608671266, 0.0517168496793472, 0.0675980580459824, 0.03327085320180834, 0.03201560615170751, 0.06865884810948752, 0.05518686854318111, 0.06681685261149328, 9.999999999998899e-05, 0.0061690263580926885, 0.00731791371156576, 0.005433194974177602, 0.0036315412884874165, 0.0038959490571085498, 0.00012958357094705608, 0.020460540404770966, 0.0002662276605875924, 0.10605736351777773, 0.0845013950908653, 0.10399473660424041, 0.07649102149896103, 0.091700765522166, 0.05537006946474632, 0.10560415356716235, 0.11431948078903953, 0.10187288260477412, 0.38469084306538937, 0.4058310578234404, 0.40124745946048834, 0.38697165722643045, 0.36736331399944766, 0.3697234589914331, 0.4337822383368265, 0.39045608204548365, 0.4058754844285949, 0.085379159284794, 0.08450770620605164, 0.07548395136855779, 0.09230646472905557, 0.08201319149952246, 0.09860571416665331, 0.09122061545389315, 0.09209619751079823, 0.08159151180087443, 0.23687293759081463, 0.2083543049023061, 0.14983314558672878, 0.2868310036036179, 0.2659690907494805, 0.1777716472085824, 0.1870720260171711, 0.2234160237913484, 0.18732756527798144, 0.19656465635664966, 0.19553812608002585, 0.25931850956357005, 0.24229846332452087, 0.2250174639885929, 0.28010161441964443, 0.2688585824659956, 0.2810649591037214, 0.26414899044929696, 0.1621107183380136, 0.20181336837685215, 0.19339056335943283, 0.20086067313704414, 0.1538944901491306, 0.21056230743393967, 0.19871728154861967, 0.21489953287856134, 0.19770653086363943, 0.2013583729532108, 0.20210157193565426, 0.2055483036583592, 0.2120592533223543, 0.20789367116380608, 0.19194591488113977, 0.19774616801824973, 0.18545679358942435, 0.1939589611623308, 0.16317018423427276, 0.18156000499103953, 0.17418779380624005, 0.19007234958777175, 0.16639798503105563, 0.1893131590187892, 0.1686725846803443, 0.17023293311013044, 0.17213995400900717, 0.17542140189516753, 0.1771963044977134, 0.4839969877902699, 0.6009308414757439, 0.18999351316992918, 0.530935967825332, 0.13792153722266465, 0.3734771170240567, 0.1516949287463194, 0.22009816070813126, 0.19199836920716684, 0.32493515667382733, 0.5900271304582425, 0.507310238580846, 0.44739320183756404, 0.15319812408756095, 0.44509067425564286, 0.19222562020981782, 0.17754667663510737, 0.19558958724394138, 0.19560938891866686, 0.16942196945566956, 0.1632401743308416, 0.18854457962518, 0.18399252901189111, 0.17576635256430895, 0.1798781961675131, 0.07443908089959572, 0.08092541002146447, 0.07122686837473025, 0.06722958292022208, 0.08348623378316611, 0.06856320221614243, 0.08109639864250873, 0.07278327672841112, 0.06710790365965547]}, "mutation_prompt": null}
{"id": "491d9976-8b42-4634-bac6-264f2dbcc387", "solution": "import numpy as np\n\nclass OptimizedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.7\n        self.CR = 0.85\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def opposition_based_learning(self, population):\n        return self.lower_bound + self.upper_bound - population\n\n    def local_search(self, x, func):\n        trial = x + np.random.uniform(-0.05, 0.05, self.dim)\n        trial = np.clip(trial, self.lower_bound, self.upper_bound)\n        return trial if func(trial) < func(x) else x\n\n    def mutate(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = indices\n        while a == idx:\n            a = np.random.choice(self.population_size)  # Ensure a != idx\n        diversity_factor = np.exp(-np.std(population, axis=0))\n        mutant = population[a] + self.F * diversity_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.CR\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        budget_used = self.population_size\n\n        while budget_used < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(population, i)\n                trial = self.crossover(population[i], mutant)\n                trial = self.local_search(trial, func)\n\n                trial_fitness = func(trial)\n                budget_used += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if budget_used < self.budget and np.random.rand() < 0.5:\n                    opposite = self.opposition_based_learning(population[i])\n                    opposite_fitness = func(opposite)\n                    budget_used += 1\n                    if opposite_fitness < fitness[i]:\n                        population[i] = opposite\n                        fitness[i] = opposite_fitness\n\n                if budget_used >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "OptimizedAdaptiveDifferentialEvolution", "description": "Enhanced diversity control and adaptive mutation scales in differential evolution for improved convergence.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b6bd6d8-9eb2-40c7-820b-fc972c59a035", "metadata": {"aucs": [0.41638628740398986, 0.44087325269180033, 0.4148527099840317, 0.4494462269351437, 0.45193254970586993, 0.4285732387966792, 0.44233668370072377, 0.4045058513435973, 0.40706917071791804, 0.1562348237788359, 0.15192398214247638, 0.19183830873033048, 0.11381342957337981, 0.18253295699273964, 0.14272737290371573, 0.08846635899383604, 0.13486940581886375, 0.16489947751109757, 0.09317325606414628, 0.10696667839175555, 0.10276607628314649, 0.1066556397268118, 0.10133276222620391, 0.10134781381068114, 0.10159155141906873, 0.0901995645432998, 0.10509441139984699, 0.06806531814270966, 0.07894718250219235, 0.08788733843608554, 0.09294185312740444, 0.07705995206656369, 0.07368205419953333, 0.10419076658204407, 0.0896965987353242, 0.08815952290802143, 0.6059931965801326, 0.7914365707933382, 0.5760794573600078, 0.561713682476779, 0.7086335664820342, 0.6452585638163797, 0.6959416057843615, 0.6355955630595329, 0.6636100793953132, 0.19221989496815872, 0.10332686353816078, 0.18837420523322868, 0.13842586244140254, 0.17270548708936606, 0.16168346446808646, 0.1982730526521349, 0.14187849143274145, 0.19291431839998419, 0.3149695205576962, 0.2595867246075664, 0.21468094573007523, 0.39691674293502, 0.28011783803112544, 0.32077562845532637, 0.2335122721580145, 0.19562231692521959, 0.25279105680017966, 0.14364206278757863, 0.15889426199008472, 0.11539101729590606, 0.1606552380129358, 0.15120944018170634, 0.12507950469305396, 0.17243158632006794, 0.1420475226452298, 0.13407427344722023, 0.16145755211215873, 0.13148714690624996, 0.20276949839399028, 0.14874837478690806, 0.1182266779603347, 0.14557943932470718, 0.19015554815967017, 0.08532572534241134, 0.14417958986613888, 0.03217636608843555, 0.0007379536527092334, 0.0025431148211513266, 0.016582066015109587, 0.000941492678347311, 0.03791076508601021, 0.0003448465572233328, 0.008166758575097632, 0.042413233778395454, 0.07351655254502854, 0.062221920608671266, 0.0517168496793472, 0.0675980580459824, 0.03327085320180834, 0.03201560615170751, 0.06865884810948752, 0.05518686854318111, 0.06681685261149328, 9.999999999998899e-05, 0.0061690263580926885, 0.00731791371156576, 0.005433194974177602, 0.0036315412884874165, 0.0038959490571085498, 0.00012958357094705608, 0.020460540404770966, 0.0002662276605875924, 0.10605736351777773, 0.0845013950908653, 0.10399473660424041, 0.07649102149896103, 0.091700765522166, 0.05537006946474632, 0.10560415356716235, 0.11431948078903953, 0.10187288260477412, 0.38469084306538937, 0.4058310578234404, 0.40124745946048834, 0.38697165722643045, 0.36736331399944766, 0.3697234589914331, 0.4337822383368265, 0.39045608204548365, 0.4058754844285949, 0.085379159284794, 0.08450770620605164, 0.07548395136855779, 0.09230646472905557, 0.08201319149952246, 0.09860571416665331, 0.09122061545389315, 0.09209619751079823, 0.08159151180087443, 0.23687293759081463, 0.2083543049023061, 0.14983314558672878, 0.2868310036036179, 0.2659690907494805, 0.1777716472085824, 0.1870720260171711, 0.2234160237913484, 0.18732756527798144, 0.19656465635664966, 0.19553812608002585, 0.25931850956357005, 0.24229846332452087, 0.2250174639885929, 0.28010161441964443, 0.2688585824659956, 0.2810649591037214, 0.26414899044929696, 0.1621107183380136, 0.20181336837685215, 0.19339056335943283, 0.20086067313704414, 0.1538944901491306, 0.21056230743393967, 0.19871728154861967, 0.21489953287856134, 0.19770653086363943, 0.2013583729532108, 0.20210157193565426, 0.2055483036583592, 0.2120592533223543, 0.20789367116380608, 0.19194591488113977, 0.19774616801824973, 0.18545679358942435, 0.1939589611623308, 0.16317018423427276, 0.18156000499103953, 0.17418779380624005, 0.19007234958777175, 0.16639798503105563, 0.1893131590187892, 0.1686725846803443, 0.17023293311013044, 0.17213995400900717, 0.17542140189516753, 0.1771963044977134, 0.4839969877902699, 0.6009308414757439, 0.18999351316992918, 0.530935967825332, 0.13792153722266465, 0.3734771170240567, 0.1516949287463194, 0.22009816070813126, 0.19199836920716684, 0.32493515667382733, 0.5900271304582425, 0.507310238580846, 0.44739320183756404, 0.15319812408756095, 0.44509067425564286, 0.19222562020981782, 0.17754667663510737, 0.19558958724394138, 0.19560938891866686, 0.16942196945566956, 0.1632401743308416, 0.18854457962518, 0.18399252901189111, 0.17576635256430895, 0.1798781961675131, 0.07443908089959572, 0.08092541002146447, 0.07122686837473025, 0.06722958292022208, 0.08348623378316611, 0.06856320221614243, 0.08109639864250873, 0.07278327672841112, 0.06710790365965547]}, "mutation_prompt": null}
{"id": "4d7feb02-eb7d-4882-bd9e-279b45a89724", "solution": "import numpy as np\n\nclass OptimizedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.7\n        self.CR = 0.85\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def opposition_based_learning(self, individual):\n        return self.lower_bound + self.upper_bound - individual\n\n    def local_search(self, x, func):\n        trial = x + np.random.uniform(-0.05, 0.05, self.dim)\n        trial = np.clip(trial, self.lower_bound, self.upper_bound)\n        return trial if func(trial) < func(x) else x\n\n    def mutate(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = indices\n        while a == idx:\n            a = np.random.choice(self.population_size) \n        diversity_factor = np.exp(-np.std(population, axis=0))\n        mutant = population[a] + self.F * diversity_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.CR\n        return np.where(cross_points, mutant, target)\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        budget_used = self.population_size\n\n        while budget_used < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(population, i)\n                trial = self.crossover(population[i], mutant)\n                trial = self.local_search(trial, func)\n\n                trial_fitness = func(trial)\n                budget_used += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if budget_used < self.budget and np.random.rand() < 0.5:\n                    opposite = self.opposition_based_learning(population[i])\n                    opposite_fitness = func(opposite)\n                    budget_used += 1\n                    if opposite_fitness < fitness[i]:\n                        population[i] = opposite\n                        fitness[i] = opposite_fitness\n\n                if budget_used >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "OptimizedAdaptiveDifferentialEvolution", "description": "Improved trial vector generation efficiency and streamlined opposition-based learning for faster convergence.", "configspace": "", "generation": 47, "fitness": 0.1973663705699234, "feedback": "The algorithm OptimizedAdaptiveDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.15.", "error": "", "parent_id": "1b6bd6d8-9eb2-40c7-820b-fc972c59a035", "metadata": {"aucs": [0.41638628740398986, 0.44087325269180033, 0.4148527099840317, 0.4494462269351437, 0.45193254970586993, 0.4285732387966792, 0.44233668370072377, 0.4045058513435973, 0.40706917071791804, 0.1562348237788359, 0.15192398214247638, 0.19183830873033048, 0.11381342957337981, 0.18253295699273964, 0.14272737290371573, 0.08846635899383604, 0.13486940581886375, 0.16489947751109757, 0.09317325606414628, 0.10696667839175555, 0.10276607628314649, 0.1066556397268118, 0.10133276222620391, 0.10134781381068114, 0.10159155141906873, 0.0901995645432998, 0.10509441139984699, 0.06806531814270966, 0.07894718250219235, 0.08788733843608554, 0.09294185312740444, 0.07705995206656369, 0.07368205419953333, 0.10419076658204407, 0.0896965987353242, 0.08815952290802143, 0.6059931965801326, 0.7914365707933382, 0.5760794573600078, 0.561713682476779, 0.7086335664820342, 0.6452585638163797, 0.6959416057843615, 0.6355955630595329, 0.6636100793953132, 0.19221989496815872, 0.10332686353816078, 0.18837420523322868, 0.13842586244140254, 0.17270548708936606, 0.16168346446808646, 0.1982730526521349, 0.14187849143274145, 0.19291431839998419, 0.3149695205576962, 0.2595867246075664, 0.21468094573007523, 0.39691674293502, 0.28011783803112544, 0.32077562845532637, 0.2335122721580145, 0.19562231692521959, 0.25279105680017966, 0.14364206278757863, 0.15889426199008472, 0.11539101729590606, 0.1606552380129358, 0.15120944018170634, 0.12507950469305396, 0.17243158632006794, 0.1420475226452298, 0.13407427344722023, 0.16145755211215873, 0.13148714690624996, 0.20276949839399028, 0.14874837478690806, 0.1182266779603347, 0.14557943932470718, 0.19015554815967017, 0.08532572534241134, 0.14417958986613888, 0.03217636608843555, 0.0007379536527092334, 0.0025431148211513266, 0.016582066015109587, 0.000941492678347311, 0.03791076508601021, 0.0003448465572233328, 0.008166758575097632, 0.042413233778395454, 0.07351655254502854, 0.062221920608671266, 0.0517168496793472, 0.0675980580459824, 0.03327085320180834, 0.03201560615170751, 0.06865884810948752, 0.05518686854318111, 0.06681685261149328, 9.999999999998899e-05, 0.0061690263580926885, 0.00731791371156576, 0.005433194974177602, 0.0036315412884874165, 0.0038959490571085498, 0.00012958357094705608, 0.020460540404770966, 0.0002662276605875924, 0.10605736351777773, 0.0845013950908653, 0.10399473660424041, 0.07649102149896103, 0.091700765522166, 0.05537006946474632, 0.10560415356716235, 0.11431948078903953, 0.10187288260477412, 0.38469084306538937, 0.4058310578234404, 0.40124745946048834, 0.38697165722643045, 0.36736331399944766, 0.3697234589914331, 0.4337822383368265, 0.39045608204548365, 0.4058754844285949, 0.085379159284794, 0.08450770620605164, 0.07548395136855779, 0.09230646472905557, 0.08201319149952246, 0.09860571416665331, 0.09122061545389315, 0.09209619751079823, 0.08159151180087443, 0.23687293759081463, 0.2083543049023061, 0.14983314558672878, 0.2868310036036179, 0.2659690907494805, 0.1777716472085824, 0.1870720260171711, 0.2234160237913484, 0.18732756527798144, 0.19656465635664966, 0.19553812608002585, 0.25931850956357005, 0.24229846332452087, 0.2250174639885929, 0.28010161441964443, 0.2688585824659956, 0.2810649591037214, 0.26414899044929696, 0.1621107183380136, 0.20181336837685215, 0.19339056335943283, 0.20086067313704414, 0.1538944901491306, 0.21056230743393967, 0.19871728154861967, 0.21489953287856134, 0.19770653086363943, 0.2013583729532108, 0.20210157193565426, 0.2055483036583592, 0.2120592533223543, 0.20789367116380608, 0.19194591488113977, 0.19774616801824973, 0.18545679358942435, 0.1939589611623308, 0.16317018423427276, 0.18156000499103953, 0.17418779380624005, 0.19007234958777175, 0.16639798503105563, 0.1893131590187892, 0.1686725846803443, 0.17023293311013044, 0.17213995400900717, 0.17542140189516753, 0.1771963044977134, 0.4839969877902699, 0.6009308414757439, 0.18999351316992918, 0.530935967825332, 0.13792153722266465, 0.3734771170240567, 0.1516949287463194, 0.22009816070813126, 0.19199836920716684, 0.32493515667382733, 0.5900271304582425, 0.507310238580846, 0.44739320183756404, 0.15319812408756095, 0.44509067425564286, 0.19222562020981782, 0.17754667663510737, 0.19558958724394138, 0.19560938891866686, 0.16942196945566956, 0.1632401743308416, 0.18854457962518, 0.18399252901189111, 0.17576635256430895, 0.1798781961675131, 0.07443908089959572, 0.08092541002146447, 0.07122686837473025, 0.06722958292022208, 0.08348623378316611, 0.06856320221614243, 0.08109639864250873, 0.07278327672841112, 0.06710790365965547]}, "mutation_prompt": null}
{"id": "cb3ae271-5de9-4303-aa08-bef62c951e66", "solution": "import numpy as np\n\nclass OptimizedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.7\n        self.CR = 0.85\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def opposition_based_learning(self, population):\n        return self.lower_bound + self.upper_bound - population\n\n    def local_search(self, x, func):\n        trial = x + np.random.uniform(-0.05, 0.05, self.dim)\n        trial = np.clip(trial, self.lower_bound, self.upper_bound)\n        return trial if func(trial) < func(x) else x\n\n    def mutate(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = indices\n        while a == idx:\n            a = np.random.choice(self.population_size)  # Ensure a != idx\n        diversity_factor = np.exp(-np.std(population, axis=0))\n        mutant = population[a] + self.F * diversity_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.CR\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        budget_used = self.population_size\n\n        while budget_used < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(population, i)\n                trial = self.crossover(population[i], mutant)\n                trial = self.local_search(trial, func)\n\n                trial_fitness = func(trial)\n                budget_used += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if budget_used < self.budget and np.random.rand() < 0.5:\n                    opposite = self.opposition_based_learning(population[i])\n                    opposite_fitness = func(opposite)\n                    budget_used += 1\n                    if opposite_fitness < fitness[i]:\n                        population[i] = opposite\n                        fitness[i] = opposite_fitness\n\n                if budget_used >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "OptimizedAdaptiveDifferentialEvolution", "description": "Enhanced diversity control and adaptive mutation scales in differential evolution for improved convergence.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b6bd6d8-9eb2-40c7-820b-fc972c59a035", "metadata": {"aucs": [0.41638628740398986, 0.44087325269180033, 0.4148527099840317, 0.4494462269351437, 0.45193254970586993, 0.4285732387966792, 0.44233668370072377, 0.4045058513435973, 0.40706917071791804, 0.1562348237788359, 0.15192398214247638, 0.19183830873033048, 0.11381342957337981, 0.18253295699273964, 0.14272737290371573, 0.08846635899383604, 0.13486940581886375, 0.16489947751109757, 0.09317325606414628, 0.10696667839175555, 0.10276607628314649, 0.1066556397268118, 0.10133276222620391, 0.10134781381068114, 0.10159155141906873, 0.0901995645432998, 0.10509441139984699, 0.06806531814270966, 0.07894718250219235, 0.08788733843608554, 0.09294185312740444, 0.07705995206656369, 0.07368205419953333, 0.10419076658204407, 0.0896965987353242, 0.08815952290802143, 0.6059931965801326, 0.7914365707933382, 0.5760794573600078, 0.561713682476779, 0.7086335664820342, 0.6452585638163797, 0.6959416057843615, 0.6355955630595329, 0.6636100793953132, 0.19221989496815872, 0.10332686353816078, 0.18837420523322868, 0.13842586244140254, 0.17270548708936606, 0.16168346446808646, 0.1982730526521349, 0.14187849143274145, 0.19291431839998419, 0.3149695205576962, 0.2595867246075664, 0.21468094573007523, 0.39691674293502, 0.28011783803112544, 0.32077562845532637, 0.2335122721580145, 0.19562231692521959, 0.25279105680017966, 0.14364206278757863, 0.15889426199008472, 0.11539101729590606, 0.1606552380129358, 0.15120944018170634, 0.12507950469305396, 0.17243158632006794, 0.1420475226452298, 0.13407427344722023, 0.16145755211215873, 0.13148714690624996, 0.20276949839399028, 0.14874837478690806, 0.1182266779603347, 0.14557943932470718, 0.19015554815967017, 0.08532572534241134, 0.14417958986613888, 0.03217636608843555, 0.0007379536527092334, 0.0025431148211513266, 0.016582066015109587, 0.000941492678347311, 0.03791076508601021, 0.0003448465572233328, 0.008166758575097632, 0.042413233778395454, 0.07351655254502854, 0.062221920608671266, 0.0517168496793472, 0.0675980580459824, 0.03327085320180834, 0.03201560615170751, 0.06865884810948752, 0.05518686854318111, 0.06681685261149328, 9.999999999998899e-05, 0.0061690263580926885, 0.00731791371156576, 0.005433194974177602, 0.0036315412884874165, 0.0038959490571085498, 0.00012958357094705608, 0.020460540404770966, 0.0002662276605875924, 0.10605736351777773, 0.0845013950908653, 0.10399473660424041, 0.07649102149896103, 0.091700765522166, 0.05537006946474632, 0.10560415356716235, 0.11431948078903953, 0.10187288260477412, 0.38469084306538937, 0.4058310578234404, 0.40124745946048834, 0.38697165722643045, 0.36736331399944766, 0.3697234589914331, 0.4337822383368265, 0.39045608204548365, 0.4058754844285949, 0.085379159284794, 0.08450770620605164, 0.07548395136855779, 0.09230646472905557, 0.08201319149952246, 0.09860571416665331, 0.09122061545389315, 0.09209619751079823, 0.08159151180087443, 0.23687293759081463, 0.2083543049023061, 0.14983314558672878, 0.2868310036036179, 0.2659690907494805, 0.1777716472085824, 0.1870720260171711, 0.2234160237913484, 0.18732756527798144, 0.19656465635664966, 0.19553812608002585, 0.25931850956357005, 0.24229846332452087, 0.2250174639885929, 0.28010161441964443, 0.2688585824659956, 0.2810649591037214, 0.26414899044929696, 0.1621107183380136, 0.20181336837685215, 0.19339056335943283, 0.20086067313704414, 0.1538944901491306, 0.21056230743393967, 0.19871728154861967, 0.21489953287856134, 0.19770653086363943, 0.2013583729532108, 0.20210157193565426, 0.2055483036583592, 0.2120592533223543, 0.20789367116380608, 0.19194591488113977, 0.19774616801824973, 0.18545679358942435, 0.1939589611623308, 0.16317018423427276, 0.18156000499103953, 0.17418779380624005, 0.19007234958777175, 0.16639798503105563, 0.1893131590187892, 0.1686725846803443, 0.17023293311013044, 0.17213995400900717, 0.17542140189516753, 0.1771963044977134, 0.4839969877902699, 0.6009308414757439, 0.18999351316992918, 0.530935967825332, 0.13792153722266465, 0.3734771170240567, 0.1516949287463194, 0.22009816070813126, 0.19199836920716684, 0.32493515667382733, 0.5900271304582425, 0.507310238580846, 0.44739320183756404, 0.15319812408756095, 0.44509067425564286, 0.19222562020981782, 0.17754667663510737, 0.19558958724394138, 0.19560938891866686, 0.16942196945566956, 0.1632401743308416, 0.18854457962518, 0.18399252901189111, 0.17576635256430895, 0.1798781961675131, 0.07443908089959572, 0.08092541002146447, 0.07122686837473025, 0.06722958292022208, 0.08348623378316611, 0.06856320221614243, 0.08109639864250873, 0.07278327672841112, 0.06710790365965547]}, "mutation_prompt": null}
{"id": "5342bedd-d7c3-43be-863b-eb298a7150ce", "solution": "import numpy as np\n\nclass OptimizedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.7\n        self.CR = 0.85\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def opposition_based_learning(self, population):\n        return self.lower_bound + self.upper_bound - population\n\n    def local_search(self, x, func):\n        trial = x + np.random.uniform(-0.05, 0.05, self.dim)\n        trial = np.clip(trial, self.lower_bound, self.upper_bound)\n        return trial if func(trial) < func(x) else x\n\n    def mutate(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = indices\n        while a == idx:\n            a = np.random.choice(self.population_size)  # Ensure a != idx\n        diversity_factor = np.exp(-np.std(population, axis=0))\n        mutant = population[a] + self.F * diversity_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.CR\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        budget_used = self.population_size\n\n        while budget_used < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(population, i)\n                trial = self.crossover(population[i], mutant)\n                trial = self.local_search(trial, func)\n\n                trial_fitness = func(trial)\n                budget_used += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if budget_used < self.budget and np.random.rand() < 0.5:\n                    opposite = self.opposition_based_learning(population[i])\n                    opposite_fitness = func(opposite)\n                    budget_used += 1\n                    if opposite_fitness < fitness[i]:\n                        population[i] = opposite\n                        fitness[i] = opposite_fitness\n\n                if budget_used >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "OptimizedAdaptiveDifferentialEvolution", "description": "Enhanced diversity control and adaptive mutation scales in differential evolution for improved convergence.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b6bd6d8-9eb2-40c7-820b-fc972c59a035", "metadata": {"aucs": [0.41638628740398986, 0.44087325269180033, 0.4148527099840317, 0.4494462269351437, 0.45193254970586993, 0.4285732387966792, 0.44233668370072377, 0.4045058513435973, 0.40706917071791804, 0.1562348237788359, 0.15192398214247638, 0.19183830873033048, 0.11381342957337981, 0.18253295699273964, 0.14272737290371573, 0.08846635899383604, 0.13486940581886375, 0.16489947751109757, 0.09317325606414628, 0.10696667839175555, 0.10276607628314649, 0.1066556397268118, 0.10133276222620391, 0.10134781381068114, 0.10159155141906873, 0.0901995645432998, 0.10509441139984699, 0.06806531814270966, 0.07894718250219235, 0.08788733843608554, 0.09294185312740444, 0.07705995206656369, 0.07368205419953333, 0.10419076658204407, 0.0896965987353242, 0.08815952290802143, 0.6059931965801326, 0.7914365707933382, 0.5760794573600078, 0.561713682476779, 0.7086335664820342, 0.6452585638163797, 0.6959416057843615, 0.6355955630595329, 0.6636100793953132, 0.19221989496815872, 0.10332686353816078, 0.18837420523322868, 0.13842586244140254, 0.17270548708936606, 0.16168346446808646, 0.1982730526521349, 0.14187849143274145, 0.19291431839998419, 0.3149695205576962, 0.2595867246075664, 0.21468094573007523, 0.39691674293502, 0.28011783803112544, 0.32077562845532637, 0.2335122721580145, 0.19562231692521959, 0.25279105680017966, 0.14364206278757863, 0.15889426199008472, 0.11539101729590606, 0.1606552380129358, 0.15120944018170634, 0.12507950469305396, 0.17243158632006794, 0.1420475226452298, 0.13407427344722023, 0.16145755211215873, 0.13148714690624996, 0.20276949839399028, 0.14874837478690806, 0.1182266779603347, 0.14557943932470718, 0.19015554815967017, 0.08532572534241134, 0.14417958986613888, 0.03217636608843555, 0.0007379536527092334, 0.0025431148211513266, 0.016582066015109587, 0.000941492678347311, 0.03791076508601021, 0.0003448465572233328, 0.008166758575097632, 0.042413233778395454, 0.07351655254502854, 0.062221920608671266, 0.0517168496793472, 0.0675980580459824, 0.03327085320180834, 0.03201560615170751, 0.06865884810948752, 0.05518686854318111, 0.06681685261149328, 9.999999999998899e-05, 0.0061690263580926885, 0.00731791371156576, 0.005433194974177602, 0.0036315412884874165, 0.0038959490571085498, 0.00012958357094705608, 0.020460540404770966, 0.0002662276605875924, 0.10605736351777773, 0.0845013950908653, 0.10399473660424041, 0.07649102149896103, 0.091700765522166, 0.05537006946474632, 0.10560415356716235, 0.11431948078903953, 0.10187288260477412, 0.38469084306538937, 0.4058310578234404, 0.40124745946048834, 0.38697165722643045, 0.36736331399944766, 0.3697234589914331, 0.4337822383368265, 0.39045608204548365, 0.4058754844285949, 0.085379159284794, 0.08450770620605164, 0.07548395136855779, 0.09230646472905557, 0.08201319149952246, 0.09860571416665331, 0.09122061545389315, 0.09209619751079823, 0.08159151180087443, 0.23687293759081463, 0.2083543049023061, 0.14983314558672878, 0.2868310036036179, 0.2659690907494805, 0.1777716472085824, 0.1870720260171711, 0.2234160237913484, 0.18732756527798144, 0.19656465635664966, 0.19553812608002585, 0.25931850956357005, 0.24229846332452087, 0.2250174639885929, 0.28010161441964443, 0.2688585824659956, 0.2810649591037214, 0.26414899044929696, 0.1621107183380136, 0.20181336837685215, 0.19339056335943283, 0.20086067313704414, 0.1538944901491306, 0.21056230743393967, 0.19871728154861967, 0.21489953287856134, 0.19770653086363943, 0.2013583729532108, 0.20210157193565426, 0.2055483036583592, 0.2120592533223543, 0.20789367116380608, 0.19194591488113977, 0.19774616801824973, 0.18545679358942435, 0.1939589611623308, 0.16317018423427276, 0.18156000499103953, 0.17418779380624005, 0.19007234958777175, 0.16639798503105563, 0.1893131590187892, 0.1686725846803443, 0.17023293311013044, 0.17213995400900717, 0.17542140189516753, 0.1771963044977134, 0.4839969877902699, 0.6009308414757439, 0.18999351316992918, 0.530935967825332, 0.13792153722266465, 0.3734771170240567, 0.1516949287463194, 0.22009816070813126, 0.19199836920716684, 0.32493515667382733, 0.5900271304582425, 0.507310238580846, 0.44739320183756404, 0.15319812408756095, 0.44509067425564286, 0.19222562020981782, 0.17754667663510737, 0.19558958724394138, 0.19560938891866686, 0.16942196945566956, 0.1632401743308416, 0.18854457962518, 0.18399252901189111, 0.17576635256430895, 0.1798781961675131, 0.07443908089959572, 0.08092541002146447, 0.07122686837473025, 0.06722958292022208, 0.08348623378316611, 0.06856320221614243, 0.08109639864250873, 0.07278327672841112, 0.06710790365965547]}, "mutation_prompt": null}
{"id": "4c6381e4-4643-4f9e-9d55-6c6453a1d42c", "solution": "import numpy as np\n\nclass OptimizedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.7\n        self.CR = 0.85\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def opposition_based_learning(self, population):\n        return self.lower_bound + self.upper_bound - population\n\n    def local_search(self, x, func):\n        trial = x + np.random.uniform(-0.05, 0.05, self.dim)\n        trial = np.clip(trial, self.lower_bound, self.upper_bound)\n        return trial if func(trial) < func(x) else x\n\n    def mutate(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = indices\n        while a == idx:\n            a = np.random.choice(self.population_size)  # Ensure a != idx\n        diversity_factor = np.exp(-np.std(population, axis=0))\n        mutant = population[a] + self.F * diversity_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.CR\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        budget_used = self.population_size\n\n        while budget_used < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(population, i)\n                trial = self.crossover(population[i], mutant)\n                trial = self.local_search(trial, func)\n\n                trial_fitness = func(trial)\n                budget_used += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if budget_used < self.budget and np.random.rand() < 0.5:\n                    opposite = self.opposition_based_learning(population[i])\n                    opposite_fitness = func(opposite)\n                    budget_used += 1\n                    if opposite_fitness < fitness[i]:\n                        population[i] = opposite\n                        fitness[i] = opposite_fitness\n\n                if budget_used >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "OptimizedAdaptiveDifferentialEvolution", "description": "Enhanced diversity control and adaptive mutation scales in differential evolution for improved convergence.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b6bd6d8-9eb2-40c7-820b-fc972c59a035", "metadata": {"aucs": [0.41638628740398986, 0.44087325269180033, 0.4148527099840317, 0.4494462269351437, 0.45193254970586993, 0.4285732387966792, 0.44233668370072377, 0.4045058513435973, 0.40706917071791804, 0.1562348237788359, 0.15192398214247638, 0.19183830873033048, 0.11381342957337981, 0.18253295699273964, 0.14272737290371573, 0.08846635899383604, 0.13486940581886375, 0.16489947751109757, 0.09317325606414628, 0.10696667839175555, 0.10276607628314649, 0.1066556397268118, 0.10133276222620391, 0.10134781381068114, 0.10159155141906873, 0.0901995645432998, 0.10509441139984699, 0.06806531814270966, 0.07894718250219235, 0.08788733843608554, 0.09294185312740444, 0.07705995206656369, 0.07368205419953333, 0.10419076658204407, 0.0896965987353242, 0.08815952290802143, 0.6059931965801326, 0.7914365707933382, 0.5760794573600078, 0.561713682476779, 0.7086335664820342, 0.6452585638163797, 0.6959416057843615, 0.6355955630595329, 0.6636100793953132, 0.19221989496815872, 0.10332686353816078, 0.18837420523322868, 0.13842586244140254, 0.17270548708936606, 0.16168346446808646, 0.1982730526521349, 0.14187849143274145, 0.19291431839998419, 0.3149695205576962, 0.2595867246075664, 0.21468094573007523, 0.39691674293502, 0.28011783803112544, 0.32077562845532637, 0.2335122721580145, 0.19562231692521959, 0.25279105680017966, 0.14364206278757863, 0.15889426199008472, 0.11539101729590606, 0.1606552380129358, 0.15120944018170634, 0.12507950469305396, 0.17243158632006794, 0.1420475226452298, 0.13407427344722023, 0.16145755211215873, 0.13148714690624996, 0.20276949839399028, 0.14874837478690806, 0.1182266779603347, 0.14557943932470718, 0.19015554815967017, 0.08532572534241134, 0.14417958986613888, 0.03217636608843555, 0.0007379536527092334, 0.0025431148211513266, 0.016582066015109587, 0.000941492678347311, 0.03791076508601021, 0.0003448465572233328, 0.008166758575097632, 0.042413233778395454, 0.07351655254502854, 0.062221920608671266, 0.0517168496793472, 0.0675980580459824, 0.03327085320180834, 0.03201560615170751, 0.06865884810948752, 0.05518686854318111, 0.06681685261149328, 9.999999999998899e-05, 0.0061690263580926885, 0.00731791371156576, 0.005433194974177602, 0.0036315412884874165, 0.0038959490571085498, 0.00012958357094705608, 0.020460540404770966, 0.0002662276605875924, 0.10605736351777773, 0.0845013950908653, 0.10399473660424041, 0.07649102149896103, 0.091700765522166, 0.05537006946474632, 0.10560415356716235, 0.11431948078903953, 0.10187288260477412, 0.38469084306538937, 0.4058310578234404, 0.40124745946048834, 0.38697165722643045, 0.36736331399944766, 0.3697234589914331, 0.4337822383368265, 0.39045608204548365, 0.4058754844285949, 0.085379159284794, 0.08450770620605164, 0.07548395136855779, 0.09230646472905557, 0.08201319149952246, 0.09860571416665331, 0.09122061545389315, 0.09209619751079823, 0.08159151180087443, 0.23687293759081463, 0.2083543049023061, 0.14983314558672878, 0.2868310036036179, 0.2659690907494805, 0.1777716472085824, 0.1870720260171711, 0.2234160237913484, 0.18732756527798144, 0.19656465635664966, 0.19553812608002585, 0.25931850956357005, 0.24229846332452087, 0.2250174639885929, 0.28010161441964443, 0.2688585824659956, 0.2810649591037214, 0.26414899044929696, 0.1621107183380136, 0.20181336837685215, 0.19339056335943283, 0.20086067313704414, 0.1538944901491306, 0.21056230743393967, 0.19871728154861967, 0.21489953287856134, 0.19770653086363943, 0.2013583729532108, 0.20210157193565426, 0.2055483036583592, 0.2120592533223543, 0.20789367116380608, 0.19194591488113977, 0.19774616801824973, 0.18545679358942435, 0.1939589611623308, 0.16317018423427276, 0.18156000499103953, 0.17418779380624005, 0.19007234958777175, 0.16639798503105563, 0.1893131590187892, 0.1686725846803443, 0.17023293311013044, 0.17213995400900717, 0.17542140189516753, 0.1771963044977134, 0.4839969877902699, 0.6009308414757439, 0.18999351316992918, 0.530935967825332, 0.13792153722266465, 0.3734771170240567, 0.1516949287463194, 0.22009816070813126, 0.19199836920716684, 0.32493515667382733, 0.5900271304582425, 0.507310238580846, 0.44739320183756404, 0.15319812408756095, 0.44509067425564286, 0.19222562020981782, 0.17754667663510737, 0.19558958724394138, 0.19560938891866686, 0.16942196945566956, 0.1632401743308416, 0.18854457962518, 0.18399252901189111, 0.17576635256430895, 0.1798781961675131, 0.07443908089959572, 0.08092541002146447, 0.07122686837473025, 0.06722958292022208, 0.08348623378316611, 0.06856320221614243, 0.08109639864250873, 0.07278327672841112, 0.06710790365965547]}, "mutation_prompt": null}
{"id": "989a5d40-4bbe-406b-b29d-91ca0bb21e99", "solution": "import numpy as np\n\nclass OptimizedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.7\n        self.CR = 0.85\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def opposition_based_learning(self, population):\n        return self.lower_bound + self.upper_bound - population\n\n    def local_search(self, x, func):\n        trial = x + np.random.uniform(-0.05, 0.05, self.dim)\n        trial = np.clip(trial, self.lower_bound, self.upper_bound)\n        return trial if func(trial) < func(x) else x\n\n    def mutate(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = indices\n        while a == idx:\n            a = np.random.choice(self.population_size)  # Ensure a != idx\n        diversity_factor = np.exp(-np.std(population, axis=0))\n        mutant = population[a] + self.F * diversity_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.CR\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        budget_used = self.population_size\n\n        while budget_used < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(population, i)\n                trial = self.crossover(population[i], mutant)\n                trial = self.local_search(trial, func)\n\n                trial_fitness = func(trial)\n                budget_used += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if budget_used < self.budget and np.random.rand() < 0.5:\n                    opposite = self.opposition_based_learning(population[i])\n                    opposite_fitness = func(opposite)\n                    budget_used += 1\n                    if opposite_fitness < fitness[i]:\n                        population[i] = opposite\n                        fitness[i] = opposite_fitness\n\n                if budget_used >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "OptimizedAdaptiveDifferentialEvolution", "description": "Enhanced diversity control and adaptive mutation scales in differential evolution for improved convergence.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b6bd6d8-9eb2-40c7-820b-fc972c59a035", "metadata": {"aucs": [0.41638628740398986, 0.44087325269180033, 0.4148527099840317, 0.4494462269351437, 0.45193254970586993, 0.4285732387966792, 0.44233668370072377, 0.4045058513435973, 0.40706917071791804, 0.1562348237788359, 0.15192398214247638, 0.19183830873033048, 0.11381342957337981, 0.18253295699273964, 0.14272737290371573, 0.08846635899383604, 0.13486940581886375, 0.16489947751109757, 0.09317325606414628, 0.10696667839175555, 0.10276607628314649, 0.1066556397268118, 0.10133276222620391, 0.10134781381068114, 0.10159155141906873, 0.0901995645432998, 0.10509441139984699, 0.06806531814270966, 0.07894718250219235, 0.08788733843608554, 0.09294185312740444, 0.07705995206656369, 0.07368205419953333, 0.10419076658204407, 0.0896965987353242, 0.08815952290802143, 0.6059931965801326, 0.7914365707933382, 0.5760794573600078, 0.561713682476779, 0.7086335664820342, 0.6452585638163797, 0.6959416057843615, 0.6355955630595329, 0.6636100793953132, 0.19221989496815872, 0.10332686353816078, 0.18837420523322868, 0.13842586244140254, 0.17270548708936606, 0.16168346446808646, 0.1982730526521349, 0.14187849143274145, 0.19291431839998419, 0.3149695205576962, 0.2595867246075664, 0.21468094573007523, 0.39691674293502, 0.28011783803112544, 0.32077562845532637, 0.2335122721580145, 0.19562231692521959, 0.25279105680017966, 0.14364206278757863, 0.15889426199008472, 0.11539101729590606, 0.1606552380129358, 0.15120944018170634, 0.12507950469305396, 0.17243158632006794, 0.1420475226452298, 0.13407427344722023, 0.16145755211215873, 0.13148714690624996, 0.20276949839399028, 0.14874837478690806, 0.1182266779603347, 0.14557943932470718, 0.19015554815967017, 0.08532572534241134, 0.14417958986613888, 0.03217636608843555, 0.0007379536527092334, 0.0025431148211513266, 0.016582066015109587, 0.000941492678347311, 0.03791076508601021, 0.0003448465572233328, 0.008166758575097632, 0.042413233778395454, 0.07351655254502854, 0.062221920608671266, 0.0517168496793472, 0.0675980580459824, 0.03327085320180834, 0.03201560615170751, 0.06865884810948752, 0.05518686854318111, 0.06681685261149328, 9.999999999998899e-05, 0.0061690263580926885, 0.00731791371156576, 0.005433194974177602, 0.0036315412884874165, 0.0038959490571085498, 0.00012958357094705608, 0.020460540404770966, 0.0002662276605875924, 0.10605736351777773, 0.0845013950908653, 0.10399473660424041, 0.07649102149896103, 0.091700765522166, 0.05537006946474632, 0.10560415356716235, 0.11431948078903953, 0.10187288260477412, 0.38469084306538937, 0.4058310578234404, 0.40124745946048834, 0.38697165722643045, 0.36736331399944766, 0.3697234589914331, 0.4337822383368265, 0.39045608204548365, 0.4058754844285949, 0.085379159284794, 0.08450770620605164, 0.07548395136855779, 0.09230646472905557, 0.08201319149952246, 0.09860571416665331, 0.09122061545389315, 0.09209619751079823, 0.08159151180087443, 0.23687293759081463, 0.2083543049023061, 0.14983314558672878, 0.2868310036036179, 0.2659690907494805, 0.1777716472085824, 0.1870720260171711, 0.2234160237913484, 0.18732756527798144, 0.19656465635664966, 0.19553812608002585, 0.25931850956357005, 0.24229846332452087, 0.2250174639885929, 0.28010161441964443, 0.2688585824659956, 0.2810649591037214, 0.26414899044929696, 0.1621107183380136, 0.20181336837685215, 0.19339056335943283, 0.20086067313704414, 0.1538944901491306, 0.21056230743393967, 0.19871728154861967, 0.21489953287856134, 0.19770653086363943, 0.2013583729532108, 0.20210157193565426, 0.2055483036583592, 0.2120592533223543, 0.20789367116380608, 0.19194591488113977, 0.19774616801824973, 0.18545679358942435, 0.1939589611623308, 0.16317018423427276, 0.18156000499103953, 0.17418779380624005, 0.19007234958777175, 0.16639798503105563, 0.1893131590187892, 0.1686725846803443, 0.17023293311013044, 0.17213995400900717, 0.17542140189516753, 0.1771963044977134, 0.4839969877902699, 0.6009308414757439, 0.18999351316992918, 0.530935967825332, 0.13792153722266465, 0.3734771170240567, 0.1516949287463194, 0.22009816070813126, 0.19199836920716684, 0.32493515667382733, 0.5900271304582425, 0.507310238580846, 0.44739320183756404, 0.15319812408756095, 0.44509067425564286, 0.19222562020981782, 0.17754667663510737, 0.19558958724394138, 0.19560938891866686, 0.16942196945566956, 0.1632401743308416, 0.18854457962518, 0.18399252901189111, 0.17576635256430895, 0.1798781961675131, 0.07443908089959572, 0.08092541002146447, 0.07122686837473025, 0.06722958292022208, 0.08348623378316611, 0.06856320221614243, 0.08109639864250873, 0.07278327672841112, 0.06710790365965547]}, "mutation_prompt": null}
{"id": "4a98812f-fd8c-45af-a5fb-9710580bff1b", "solution": "import numpy as np\n\nclass OptimizedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.7\n        self.CR = 0.85\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def opposition_based_learning(self, population):\n        return self.lower_bound + self.upper_bound - population\n\n    def local_search(self, x, func):\n        trial = x + np.random.uniform(-0.05, 0.05, self.dim)\n        trial = np.clip(trial, self.lower_bound, self.upper_bound)\n        return trial if func(trial) < func(x) else x\n\n    def mutate(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = indices\n        while a == idx:\n            a = np.random.choice(self.population_size)  # Ensure a != idx\n        diversity_factor = np.exp(-np.std(population, axis=0))\n        mutant = population[a] + self.F * diversity_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.CR\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        budget_used = self.population_size\n\n        while budget_used < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(population, i)\n                trial = self.crossover(population[i], mutant)\n                trial = self.local_search(trial, func)\n\n                trial_fitness = func(trial)\n                budget_used += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if budget_used < self.budget and np.random.rand() < 0.5:\n                    opposite = self.opposition_based_learning(population[i])\n                    opposite_fitness = func(opposite)\n                    budget_used += 1\n                    if opposite_fitness < fitness[i]:\n                        population[i] = opposite\n                        fitness[i] = opposite_fitness\n\n                if budget_used >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "OptimizedAdaptiveDifferentialEvolution", "description": "Enhanced diversity control and adaptive mutation scales in differential evolution for improved convergence.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b6bd6d8-9eb2-40c7-820b-fc972c59a035", "metadata": {"aucs": [0.41638628740398986, 0.44087325269180033, 0.4148527099840317, 0.4494462269351437, 0.45193254970586993, 0.4285732387966792, 0.44233668370072377, 0.4045058513435973, 0.40706917071791804, 0.1562348237788359, 0.15192398214247638, 0.19183830873033048, 0.11381342957337981, 0.18253295699273964, 0.14272737290371573, 0.08846635899383604, 0.13486940581886375, 0.16489947751109757, 0.09317325606414628, 0.10696667839175555, 0.10276607628314649, 0.1066556397268118, 0.10133276222620391, 0.10134781381068114, 0.10159155141906873, 0.0901995645432998, 0.10509441139984699, 0.06806531814270966, 0.07894718250219235, 0.08788733843608554, 0.09294185312740444, 0.07705995206656369, 0.07368205419953333, 0.10419076658204407, 0.0896965987353242, 0.08815952290802143, 0.6059931965801326, 0.7914365707933382, 0.5760794573600078, 0.561713682476779, 0.7086335664820342, 0.6452585638163797, 0.6959416057843615, 0.6355955630595329, 0.6636100793953132, 0.19221989496815872, 0.10332686353816078, 0.18837420523322868, 0.13842586244140254, 0.17270548708936606, 0.16168346446808646, 0.1982730526521349, 0.14187849143274145, 0.19291431839998419, 0.3149695205576962, 0.2595867246075664, 0.21468094573007523, 0.39691674293502, 0.28011783803112544, 0.32077562845532637, 0.2335122721580145, 0.19562231692521959, 0.25279105680017966, 0.14364206278757863, 0.15889426199008472, 0.11539101729590606, 0.1606552380129358, 0.15120944018170634, 0.12507950469305396, 0.17243158632006794, 0.1420475226452298, 0.13407427344722023, 0.16145755211215873, 0.13148714690624996, 0.20276949839399028, 0.14874837478690806, 0.1182266779603347, 0.14557943932470718, 0.19015554815967017, 0.08532572534241134, 0.14417958986613888, 0.03217636608843555, 0.0007379536527092334, 0.0025431148211513266, 0.016582066015109587, 0.000941492678347311, 0.03791076508601021, 0.0003448465572233328, 0.008166758575097632, 0.042413233778395454, 0.07351655254502854, 0.062221920608671266, 0.0517168496793472, 0.0675980580459824, 0.03327085320180834, 0.03201560615170751, 0.06865884810948752, 0.05518686854318111, 0.06681685261149328, 9.999999999998899e-05, 0.0061690263580926885, 0.00731791371156576, 0.005433194974177602, 0.0036315412884874165, 0.0038959490571085498, 0.00012958357094705608, 0.020460540404770966, 0.0002662276605875924, 0.10605736351777773, 0.0845013950908653, 0.10399473660424041, 0.07649102149896103, 0.091700765522166, 0.05537006946474632, 0.10560415356716235, 0.11431948078903953, 0.10187288260477412, 0.38469084306538937, 0.4058310578234404, 0.40124745946048834, 0.38697165722643045, 0.36736331399944766, 0.3697234589914331, 0.4337822383368265, 0.39045608204548365, 0.4058754844285949, 0.085379159284794, 0.08450770620605164, 0.07548395136855779, 0.09230646472905557, 0.08201319149952246, 0.09860571416665331, 0.09122061545389315, 0.09209619751079823, 0.08159151180087443, 0.23687293759081463, 0.2083543049023061, 0.14983314558672878, 0.2868310036036179, 0.2659690907494805, 0.1777716472085824, 0.1870720260171711, 0.2234160237913484, 0.18732756527798144, 0.19656465635664966, 0.19553812608002585, 0.25931850956357005, 0.24229846332452087, 0.2250174639885929, 0.28010161441964443, 0.2688585824659956, 0.2810649591037214, 0.26414899044929696, 0.1621107183380136, 0.20181336837685215, 0.19339056335943283, 0.20086067313704414, 0.1538944901491306, 0.21056230743393967, 0.19871728154861967, 0.21489953287856134, 0.19770653086363943, 0.2013583729532108, 0.20210157193565426, 0.2055483036583592, 0.2120592533223543, 0.20789367116380608, 0.19194591488113977, 0.19774616801824973, 0.18545679358942435, 0.1939589611623308, 0.16317018423427276, 0.18156000499103953, 0.17418779380624005, 0.19007234958777175, 0.16639798503105563, 0.1893131590187892, 0.1686725846803443, 0.17023293311013044, 0.17213995400900717, 0.17542140189516753, 0.1771963044977134, 0.4839969877902699, 0.6009308414757439, 0.18999351316992918, 0.530935967825332, 0.13792153722266465, 0.3734771170240567, 0.1516949287463194, 0.22009816070813126, 0.19199836920716684, 0.32493515667382733, 0.5900271304582425, 0.507310238580846, 0.44739320183756404, 0.15319812408756095, 0.44509067425564286, 0.19222562020981782, 0.17754667663510737, 0.19558958724394138, 0.19560938891866686, 0.16942196945566956, 0.1632401743308416, 0.18854457962518, 0.18399252901189111, 0.17576635256430895, 0.1798781961675131, 0.07443908089959572, 0.08092541002146447, 0.07122686837473025, 0.06722958292022208, 0.08348623378316611, 0.06856320221614243, 0.08109639864250873, 0.07278327672841112, 0.06710790365965547]}, "mutation_prompt": null}
{"id": "9aac502e-14bc-4f0e-9a17-f386c4fbac58", "solution": "import numpy as np\n\nclass OptimizedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.7\n        self.CR = 0.85\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def opposition_based_learning(self, population):\n        return self.lower_bound + self.upper_bound - population\n\n    def local_search(self, x, func):\n        trial = x + np.random.uniform(-0.05, 0.05, self.dim)\n        trial = np.clip(trial, self.lower_bound, self.upper_bound)\n        return trial if func(trial) < func(x) else x\n\n    def mutate(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = indices\n        while a == idx:\n            a = np.random.choice(self.population_size)  # Ensure a != idx\n        diversity_factor = np.exp(-np.std(population, axis=0))\n        mutant = population[a] + self.F * diversity_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.CR\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        budget_used = self.population_size\n\n        while budget_used < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(population, i)\n                trial = self.crossover(population[i], mutant)\n                trial = self.local_search(trial, func)\n\n                trial_fitness = func(trial)\n                budget_used += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if budget_used < self.budget and np.random.rand() < 0.5:\n                    opposite = self.opposition_based_learning(population[i])\n                    opposite_fitness = func(opposite)\n                    budget_used += 1\n                    if opposite_fitness < fitness[i]:\n                        population[i] = opposite\n                        fitness[i] = opposite_fitness\n\n                if budget_used >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "OptimizedAdaptiveDifferentialEvolution", "description": "Enhanced diversity control and adaptive mutation scales in differential evolution for improved convergence.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b6bd6d8-9eb2-40c7-820b-fc972c59a035", "metadata": {"aucs": [0.41638628740398986, 0.44087325269180033, 0.4148527099840317, 0.4494462269351437, 0.45193254970586993, 0.4285732387966792, 0.44233668370072377, 0.4045058513435973, 0.40706917071791804, 0.1562348237788359, 0.15192398214247638, 0.19183830873033048, 0.11381342957337981, 0.18253295699273964, 0.14272737290371573, 0.08846635899383604, 0.13486940581886375, 0.16489947751109757, 0.09317325606414628, 0.10696667839175555, 0.10276607628314649, 0.1066556397268118, 0.10133276222620391, 0.10134781381068114, 0.10159155141906873, 0.0901995645432998, 0.10509441139984699, 0.06806531814270966, 0.07894718250219235, 0.08788733843608554, 0.09294185312740444, 0.07705995206656369, 0.07368205419953333, 0.10419076658204407, 0.0896965987353242, 0.08815952290802143, 0.6059931965801326, 0.7914365707933382, 0.5760794573600078, 0.561713682476779, 0.7086335664820342, 0.6452585638163797, 0.6959416057843615, 0.6355955630595329, 0.6636100793953132, 0.19221989496815872, 0.10332686353816078, 0.18837420523322868, 0.13842586244140254, 0.17270548708936606, 0.16168346446808646, 0.1982730526521349, 0.14187849143274145, 0.19291431839998419, 0.3149695205576962, 0.2595867246075664, 0.21468094573007523, 0.39691674293502, 0.28011783803112544, 0.32077562845532637, 0.2335122721580145, 0.19562231692521959, 0.25279105680017966, 0.14364206278757863, 0.15889426199008472, 0.11539101729590606, 0.1606552380129358, 0.15120944018170634, 0.12507950469305396, 0.17243158632006794, 0.1420475226452298, 0.13407427344722023, 0.16145755211215873, 0.13148714690624996, 0.20276949839399028, 0.14874837478690806, 0.1182266779603347, 0.14557943932470718, 0.19015554815967017, 0.08532572534241134, 0.14417958986613888, 0.03217636608843555, 0.0007379536527092334, 0.0025431148211513266, 0.016582066015109587, 0.000941492678347311, 0.03791076508601021, 0.0003448465572233328, 0.008166758575097632, 0.042413233778395454, 0.07351655254502854, 0.062221920608671266, 0.0517168496793472, 0.0675980580459824, 0.03327085320180834, 0.03201560615170751, 0.06865884810948752, 0.05518686854318111, 0.06681685261149328, 9.999999999998899e-05, 0.0061690263580926885, 0.00731791371156576, 0.005433194974177602, 0.0036315412884874165, 0.0038959490571085498, 0.00012958357094705608, 0.020460540404770966, 0.0002662276605875924, 0.10605736351777773, 0.0845013950908653, 0.10399473660424041, 0.07649102149896103, 0.091700765522166, 0.05537006946474632, 0.10560415356716235, 0.11431948078903953, 0.10187288260477412, 0.38469084306538937, 0.4058310578234404, 0.40124745946048834, 0.38697165722643045, 0.36736331399944766, 0.3697234589914331, 0.4337822383368265, 0.39045608204548365, 0.4058754844285949, 0.085379159284794, 0.08450770620605164, 0.07548395136855779, 0.09230646472905557, 0.08201319149952246, 0.09860571416665331, 0.09122061545389315, 0.09209619751079823, 0.08159151180087443, 0.23687293759081463, 0.2083543049023061, 0.14983314558672878, 0.2868310036036179, 0.2659690907494805, 0.1777716472085824, 0.1870720260171711, 0.2234160237913484, 0.18732756527798144, 0.19656465635664966, 0.19553812608002585, 0.25931850956357005, 0.24229846332452087, 0.2250174639885929, 0.28010161441964443, 0.2688585824659956, 0.2810649591037214, 0.26414899044929696, 0.1621107183380136, 0.20181336837685215, 0.19339056335943283, 0.20086067313704414, 0.1538944901491306, 0.21056230743393967, 0.19871728154861967, 0.21489953287856134, 0.19770653086363943, 0.2013583729532108, 0.20210157193565426, 0.2055483036583592, 0.2120592533223543, 0.20789367116380608, 0.19194591488113977, 0.19774616801824973, 0.18545679358942435, 0.1939589611623308, 0.16317018423427276, 0.18156000499103953, 0.17418779380624005, 0.19007234958777175, 0.16639798503105563, 0.1893131590187892, 0.1686725846803443, 0.17023293311013044, 0.17213995400900717, 0.17542140189516753, 0.1771963044977134, 0.4839969877902699, 0.6009308414757439, 0.18999351316992918, 0.530935967825332, 0.13792153722266465, 0.3734771170240567, 0.1516949287463194, 0.22009816070813126, 0.19199836920716684, 0.32493515667382733, 0.5900271304582425, 0.507310238580846, 0.44739320183756404, 0.15319812408756095, 0.44509067425564286, 0.19222562020981782, 0.17754667663510737, 0.19558958724394138, 0.19560938891866686, 0.16942196945566956, 0.1632401743308416, 0.18854457962518, 0.18399252901189111, 0.17576635256430895, 0.1798781961675131, 0.07443908089959572, 0.08092541002146447, 0.07122686837473025, 0.06722958292022208, 0.08348623378316611, 0.06856320221614243, 0.08109639864250873, 0.07278327672841112, 0.06710790365965547]}, "mutation_prompt": null}
{"id": "439fd38d-844e-4528-809a-6673b04ec595", "solution": "import numpy as np\n\nclass OptimizedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.7\n        self.CR = 0.85\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def opposition_based_learning(self, population):\n        return self.lower_bound + self.upper_bound - population\n\n    def local_search(self, x, func):\n        trial = x + np.random.uniform(-0.05, 0.05, self.dim)\n        trial = np.clip(trial, self.lower_bound, self.upper_bound)\n        return trial if func(trial) < func(x) else x\n\n    def mutate(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = indices\n        while a == idx:\n            a = np.random.choice(self.population_size)  # Ensure a != idx\n        diversity_factor = np.exp(-np.std(population, axis=0))\n        mutant = population[a] + self.F * diversity_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.CR\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        budget_used = self.population_size\n\n        while budget_used < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(population, i)\n                trial = self.crossover(population[i], mutant)\n                trial = self.local_search(trial, func)\n\n                trial_fitness = func(trial)\n                budget_used += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if budget_used < self.budget and np.random.rand() < 0.5:\n                    opposite = self.opposition_based_learning(population[i])\n                    opposite_fitness = func(opposite)\n                    budget_used += 1\n                    if opposite_fitness < fitness[i]:\n                        population[i] = opposite\n                        fitness[i] = opposite_fitness\n\n                if budget_used >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "OptimizedAdaptiveDifferentialEvolution", "description": "Enhanced diversity control and adaptive mutation scales in differential evolution for improved convergence.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b6bd6d8-9eb2-40c7-820b-fc972c59a035", "metadata": {"aucs": [0.41638628740398986, 0.44087325269180033, 0.4148527099840317, 0.4494462269351437, 0.45193254970586993, 0.4285732387966792, 0.44233668370072377, 0.4045058513435973, 0.40706917071791804, 0.1562348237788359, 0.15192398214247638, 0.19183830873033048, 0.11381342957337981, 0.18253295699273964, 0.14272737290371573, 0.08846635899383604, 0.13486940581886375, 0.16489947751109757, 0.09317325606414628, 0.10696667839175555, 0.10276607628314649, 0.1066556397268118, 0.10133276222620391, 0.10134781381068114, 0.10159155141906873, 0.0901995645432998, 0.10509441139984699, 0.06806531814270966, 0.07894718250219235, 0.08788733843608554, 0.09294185312740444, 0.07705995206656369, 0.07368205419953333, 0.10419076658204407, 0.0896965987353242, 0.08815952290802143, 0.6059931965801326, 0.7914365707933382, 0.5760794573600078, 0.561713682476779, 0.7086335664820342, 0.6452585638163797, 0.6959416057843615, 0.6355955630595329, 0.6636100793953132, 0.19221989496815872, 0.10332686353816078, 0.18837420523322868, 0.13842586244140254, 0.17270548708936606, 0.16168346446808646, 0.1982730526521349, 0.14187849143274145, 0.19291431839998419, 0.3149695205576962, 0.2595867246075664, 0.21468094573007523, 0.39691674293502, 0.28011783803112544, 0.32077562845532637, 0.2335122721580145, 0.19562231692521959, 0.25279105680017966, 0.14364206278757863, 0.15889426199008472, 0.11539101729590606, 0.1606552380129358, 0.15120944018170634, 0.12507950469305396, 0.17243158632006794, 0.1420475226452298, 0.13407427344722023, 0.16145755211215873, 0.13148714690624996, 0.20276949839399028, 0.14874837478690806, 0.1182266779603347, 0.14557943932470718, 0.19015554815967017, 0.08532572534241134, 0.14417958986613888, 0.03217636608843555, 0.0007379536527092334, 0.0025431148211513266, 0.016582066015109587, 0.000941492678347311, 0.03791076508601021, 0.0003448465572233328, 0.008166758575097632, 0.042413233778395454, 0.07351655254502854, 0.062221920608671266, 0.0517168496793472, 0.0675980580459824, 0.03327085320180834, 0.03201560615170751, 0.06865884810948752, 0.05518686854318111, 0.06681685261149328, 9.999999999998899e-05, 0.0061690263580926885, 0.00731791371156576, 0.005433194974177602, 0.0036315412884874165, 0.0038959490571085498, 0.00012958357094705608, 0.020460540404770966, 0.0002662276605875924, 0.10605736351777773, 0.0845013950908653, 0.10399473660424041, 0.07649102149896103, 0.091700765522166, 0.05537006946474632, 0.10560415356716235, 0.11431948078903953, 0.10187288260477412, 0.38469084306538937, 0.4058310578234404, 0.40124745946048834, 0.38697165722643045, 0.36736331399944766, 0.3697234589914331, 0.4337822383368265, 0.39045608204548365, 0.4058754844285949, 0.085379159284794, 0.08450770620605164, 0.07548395136855779, 0.09230646472905557, 0.08201319149952246, 0.09860571416665331, 0.09122061545389315, 0.09209619751079823, 0.08159151180087443, 0.23687293759081463, 0.2083543049023061, 0.14983314558672878, 0.2868310036036179, 0.2659690907494805, 0.1777716472085824, 0.1870720260171711, 0.2234160237913484, 0.18732756527798144, 0.19656465635664966, 0.19553812608002585, 0.25931850956357005, 0.24229846332452087, 0.2250174639885929, 0.28010161441964443, 0.2688585824659956, 0.2810649591037214, 0.26414899044929696, 0.1621107183380136, 0.20181336837685215, 0.19339056335943283, 0.20086067313704414, 0.1538944901491306, 0.21056230743393967, 0.19871728154861967, 0.21489953287856134, 0.19770653086363943, 0.2013583729532108, 0.20210157193565426, 0.2055483036583592, 0.2120592533223543, 0.20789367116380608, 0.19194591488113977, 0.19774616801824973, 0.18545679358942435, 0.1939589611623308, 0.16317018423427276, 0.18156000499103953, 0.17418779380624005, 0.19007234958777175, 0.16639798503105563, 0.1893131590187892, 0.1686725846803443, 0.17023293311013044, 0.17213995400900717, 0.17542140189516753, 0.1771963044977134, 0.4839969877902699, 0.6009308414757439, 0.18999351316992918, 0.530935967825332, 0.13792153722266465, 0.3734771170240567, 0.1516949287463194, 0.22009816070813126, 0.19199836920716684, 0.32493515667382733, 0.5900271304582425, 0.507310238580846, 0.44739320183756404, 0.15319812408756095, 0.44509067425564286, 0.19222562020981782, 0.17754667663510737, 0.19558958724394138, 0.19560938891866686, 0.16942196945566956, 0.1632401743308416, 0.18854457962518, 0.18399252901189111, 0.17576635256430895, 0.1798781961675131, 0.07443908089959572, 0.08092541002146447, 0.07122686837473025, 0.06722958292022208, 0.08348623378316611, 0.06856320221614243, 0.08109639864250873, 0.07278327672841112, 0.06710790365965547]}, "mutation_prompt": null}
{"id": "9e422cb6-5d9e-4111-9199-c39f4e650b00", "solution": "import numpy as np\n\nclass OptimizedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.7\n        self.CR = 0.85\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def opposition_based_learning(self, population):\n        return self.lower_bound + self.upper_bound - population\n\n    def local_search(self, x, func):\n        trial = x + np.random.uniform(-0.05, 0.05, self.dim)\n        trial = np.clip(trial, self.lower_bound, self.upper_bound)\n        return trial if func(trial) < func(x) else x\n\n    def mutate(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = indices\n        while a == idx:\n            a = np.random.choice(self.population_size)  # Ensure a != idx\n        diversity_factor = np.exp(-np.std(population, axis=0))\n        mutant = population[a] + self.F * diversity_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.CR\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        budget_used = self.population_size\n\n        while budget_used < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(population, i)\n                trial = self.crossover(population[i], mutant)\n                trial = self.local_search(trial, func)\n\n                trial_fitness = func(trial)\n                budget_used += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if budget_used < self.budget and np.random.rand() < 0.5:\n                    opposite = self.opposition_based_learning(population[i])\n                    opposite_fitness = func(opposite)\n                    budget_used += 1\n                    if opposite_fitness < fitness[i]:\n                        population[i] = opposite\n                        fitness[i] = opposite_fitness\n\n                if budget_used >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "OptimizedAdaptiveDifferentialEvolution", "description": "Enhanced diversity control and adaptive mutation scales in differential evolution for improved convergence.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b6bd6d8-9eb2-40c7-820b-fc972c59a035", "metadata": {"aucs": [0.41638628740398986, 0.44087325269180033, 0.4148527099840317, 0.4494462269351437, 0.45193254970586993, 0.4285732387966792, 0.44233668370072377, 0.4045058513435973, 0.40706917071791804, 0.1562348237788359, 0.15192398214247638, 0.19183830873033048, 0.11381342957337981, 0.18253295699273964, 0.14272737290371573, 0.08846635899383604, 0.13486940581886375, 0.16489947751109757, 0.09317325606414628, 0.10696667839175555, 0.10276607628314649, 0.1066556397268118, 0.10133276222620391, 0.10134781381068114, 0.10159155141906873, 0.0901995645432998, 0.10509441139984699, 0.06806531814270966, 0.07894718250219235, 0.08788733843608554, 0.09294185312740444, 0.07705995206656369, 0.07368205419953333, 0.10419076658204407, 0.0896965987353242, 0.08815952290802143, 0.6059931965801326, 0.7914365707933382, 0.5760794573600078, 0.561713682476779, 0.7086335664820342, 0.6452585638163797, 0.6959416057843615, 0.6355955630595329, 0.6636100793953132, 0.19221989496815872, 0.10332686353816078, 0.18837420523322868, 0.13842586244140254, 0.17270548708936606, 0.16168346446808646, 0.1982730526521349, 0.14187849143274145, 0.19291431839998419, 0.3149695205576962, 0.2595867246075664, 0.21468094573007523, 0.39691674293502, 0.28011783803112544, 0.32077562845532637, 0.2335122721580145, 0.19562231692521959, 0.25279105680017966, 0.14364206278757863, 0.15889426199008472, 0.11539101729590606, 0.1606552380129358, 0.15120944018170634, 0.12507950469305396, 0.17243158632006794, 0.1420475226452298, 0.13407427344722023, 0.16145755211215873, 0.13148714690624996, 0.20276949839399028, 0.14874837478690806, 0.1182266779603347, 0.14557943932470718, 0.19015554815967017, 0.08532572534241134, 0.14417958986613888, 0.03217636608843555, 0.0007379536527092334, 0.0025431148211513266, 0.016582066015109587, 0.000941492678347311, 0.03791076508601021, 0.0003448465572233328, 0.008166758575097632, 0.042413233778395454, 0.07351655254502854, 0.062221920608671266, 0.0517168496793472, 0.0675980580459824, 0.03327085320180834, 0.03201560615170751, 0.06865884810948752, 0.05518686854318111, 0.06681685261149328, 9.999999999998899e-05, 0.0061690263580926885, 0.00731791371156576, 0.005433194974177602, 0.0036315412884874165, 0.0038959490571085498, 0.00012958357094705608, 0.020460540404770966, 0.0002662276605875924, 0.10605736351777773, 0.0845013950908653, 0.10399473660424041, 0.07649102149896103, 0.091700765522166, 0.05537006946474632, 0.10560415356716235, 0.11431948078903953, 0.10187288260477412, 0.38469084306538937, 0.4058310578234404, 0.40124745946048834, 0.38697165722643045, 0.36736331399944766, 0.3697234589914331, 0.4337822383368265, 0.39045608204548365, 0.4058754844285949, 0.085379159284794, 0.08450770620605164, 0.07548395136855779, 0.09230646472905557, 0.08201319149952246, 0.09860571416665331, 0.09122061545389315, 0.09209619751079823, 0.08159151180087443, 0.23687293759081463, 0.2083543049023061, 0.14983314558672878, 0.2868310036036179, 0.2659690907494805, 0.1777716472085824, 0.1870720260171711, 0.2234160237913484, 0.18732756527798144, 0.19656465635664966, 0.19553812608002585, 0.25931850956357005, 0.24229846332452087, 0.2250174639885929, 0.28010161441964443, 0.2688585824659956, 0.2810649591037214, 0.26414899044929696, 0.1621107183380136, 0.20181336837685215, 0.19339056335943283, 0.20086067313704414, 0.1538944901491306, 0.21056230743393967, 0.19871728154861967, 0.21489953287856134, 0.19770653086363943, 0.2013583729532108, 0.20210157193565426, 0.2055483036583592, 0.2120592533223543, 0.20789367116380608, 0.19194591488113977, 0.19774616801824973, 0.18545679358942435, 0.1939589611623308, 0.16317018423427276, 0.18156000499103953, 0.17418779380624005, 0.19007234958777175, 0.16639798503105563, 0.1893131590187892, 0.1686725846803443, 0.17023293311013044, 0.17213995400900717, 0.17542140189516753, 0.1771963044977134, 0.4839969877902699, 0.6009308414757439, 0.18999351316992918, 0.530935967825332, 0.13792153722266465, 0.3734771170240567, 0.1516949287463194, 0.22009816070813126, 0.19199836920716684, 0.32493515667382733, 0.5900271304582425, 0.507310238580846, 0.44739320183756404, 0.15319812408756095, 0.44509067425564286, 0.19222562020981782, 0.17754667663510737, 0.19558958724394138, 0.19560938891866686, 0.16942196945566956, 0.1632401743308416, 0.18854457962518, 0.18399252901189111, 0.17576635256430895, 0.1798781961675131, 0.07443908089959572, 0.08092541002146447, 0.07122686837473025, 0.06722958292022208, 0.08348623378316611, 0.06856320221614243, 0.08109639864250873, 0.07278327672841112, 0.06710790365965547]}, "mutation_prompt": null}
{"id": "56237924-2208-436e-b1a6-d2a667977441", "solution": "import numpy as np\n\nclass OptimizedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.7\n        self.CR = 0.85\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def opposition_based_learning(self, population):\n        return self.lower_bound + self.upper_bound - population\n\n    def local_search(self, x, func):\n        trial = x + np.random.uniform(-0.05, 0.05, self.dim)\n        trial = np.clip(trial, self.lower_bound, self.upper_bound)\n        return trial if func(trial) < func(x) else x\n\n    def mutate(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = indices\n        while a == idx:\n            a = np.random.choice(self.population_size)  # Ensure a != idx\n        diversity_factor = np.exp(-np.std(population, axis=0))\n        mutant = population[a] + self.F * diversity_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.CR\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        budget_used = self.population_size\n\n        while budget_used < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(population, i)\n                trial = self.crossover(population[i], mutant)\n                trial = self.local_search(trial, func)\n\n                trial_fitness = func(trial)\n                budget_used += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if budget_used < self.budget and np.random.rand() < 0.5:\n                    opposite = self.opposition_based_learning(population[i])\n                    opposite_fitness = func(opposite)\n                    budget_used += 1\n                    if opposite_fitness < fitness[i]:\n                        population[i] = opposite\n                        fitness[i] = opposite_fitness\n\n                if budget_used >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "OptimizedAdaptiveDifferentialEvolution", "description": "Enhanced diversity control and adaptive mutation scales in differential evolution for improved convergence.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b6bd6d8-9eb2-40c7-820b-fc972c59a035", "metadata": {"aucs": [0.41638628740398986, 0.44087325269180033, 0.4148527099840317, 0.4494462269351437, 0.45193254970586993, 0.4285732387966792, 0.44233668370072377, 0.4045058513435973, 0.40706917071791804, 0.1562348237788359, 0.15192398214247638, 0.19183830873033048, 0.11381342957337981, 0.18253295699273964, 0.14272737290371573, 0.08846635899383604, 0.13486940581886375, 0.16489947751109757, 0.09317325606414628, 0.10696667839175555, 0.10276607628314649, 0.1066556397268118, 0.10133276222620391, 0.10134781381068114, 0.10159155141906873, 0.0901995645432998, 0.10509441139984699, 0.06806531814270966, 0.07894718250219235, 0.08788733843608554, 0.09294185312740444, 0.07705995206656369, 0.07368205419953333, 0.10419076658204407, 0.0896965987353242, 0.08815952290802143, 0.6059931965801326, 0.7914365707933382, 0.5760794573600078, 0.561713682476779, 0.7086335664820342, 0.6452585638163797, 0.6959416057843615, 0.6355955630595329, 0.6636100793953132, 0.19221989496815872, 0.10332686353816078, 0.18837420523322868, 0.13842586244140254, 0.17270548708936606, 0.16168346446808646, 0.1982730526521349, 0.14187849143274145, 0.19291431839998419, 0.3149695205576962, 0.2595867246075664, 0.21468094573007523, 0.39691674293502, 0.28011783803112544, 0.32077562845532637, 0.2335122721580145, 0.19562231692521959, 0.25279105680017966, 0.14364206278757863, 0.15889426199008472, 0.11539101729590606, 0.1606552380129358, 0.15120944018170634, 0.12507950469305396, 0.17243158632006794, 0.1420475226452298, 0.13407427344722023, 0.16145755211215873, 0.13148714690624996, 0.20276949839399028, 0.14874837478690806, 0.1182266779603347, 0.14557943932470718, 0.19015554815967017, 0.08532572534241134, 0.14417958986613888, 0.03217636608843555, 0.0007379536527092334, 0.0025431148211513266, 0.016582066015109587, 0.000941492678347311, 0.03791076508601021, 0.0003448465572233328, 0.008166758575097632, 0.042413233778395454, 0.07351655254502854, 0.062221920608671266, 0.0517168496793472, 0.0675980580459824, 0.03327085320180834, 0.03201560615170751, 0.06865884810948752, 0.05518686854318111, 0.06681685261149328, 9.999999999998899e-05, 0.0061690263580926885, 0.00731791371156576, 0.005433194974177602, 0.0036315412884874165, 0.0038959490571085498, 0.00012958357094705608, 0.020460540404770966, 0.0002662276605875924, 0.10605736351777773, 0.0845013950908653, 0.10399473660424041, 0.07649102149896103, 0.091700765522166, 0.05537006946474632, 0.10560415356716235, 0.11431948078903953, 0.10187288260477412, 0.38469084306538937, 0.4058310578234404, 0.40124745946048834, 0.38697165722643045, 0.36736331399944766, 0.3697234589914331, 0.4337822383368265, 0.39045608204548365, 0.4058754844285949, 0.085379159284794, 0.08450770620605164, 0.07548395136855779, 0.09230646472905557, 0.08201319149952246, 0.09860571416665331, 0.09122061545389315, 0.09209619751079823, 0.08159151180087443, 0.23687293759081463, 0.2083543049023061, 0.14983314558672878, 0.2868310036036179, 0.2659690907494805, 0.1777716472085824, 0.1870720260171711, 0.2234160237913484, 0.18732756527798144, 0.19656465635664966, 0.19553812608002585, 0.25931850956357005, 0.24229846332452087, 0.2250174639885929, 0.28010161441964443, 0.2688585824659956, 0.2810649591037214, 0.26414899044929696, 0.1621107183380136, 0.20181336837685215, 0.19339056335943283, 0.20086067313704414, 0.1538944901491306, 0.21056230743393967, 0.19871728154861967, 0.21489953287856134, 0.19770653086363943, 0.2013583729532108, 0.20210157193565426, 0.2055483036583592, 0.2120592533223543, 0.20789367116380608, 0.19194591488113977, 0.19774616801824973, 0.18545679358942435, 0.1939589611623308, 0.16317018423427276, 0.18156000499103953, 0.17418779380624005, 0.19007234958777175, 0.16639798503105563, 0.1893131590187892, 0.1686725846803443, 0.17023293311013044, 0.17213995400900717, 0.17542140189516753, 0.1771963044977134, 0.4839969877902699, 0.6009308414757439, 0.18999351316992918, 0.530935967825332, 0.13792153722266465, 0.3734771170240567, 0.1516949287463194, 0.22009816070813126, 0.19199836920716684, 0.32493515667382733, 0.5900271304582425, 0.507310238580846, 0.44739320183756404, 0.15319812408756095, 0.44509067425564286, 0.19222562020981782, 0.17754667663510737, 0.19558958724394138, 0.19560938891866686, 0.16942196945566956, 0.1632401743308416, 0.18854457962518, 0.18399252901189111, 0.17576635256430895, 0.1798781961675131, 0.07443908089959572, 0.08092541002146447, 0.07122686837473025, 0.06722958292022208, 0.08348623378316611, 0.06856320221614243, 0.08109639864250873, 0.07278327672841112, 0.06710790365965547]}, "mutation_prompt": null}
{"id": "b0a3809c-01cb-42d8-a09e-a0eaf5ceb4f4", "solution": "import numpy as np\n\nclass OptimizedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.7\n        self.CR = 0.85\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def opposition_based_learning(self, population):\n        return self.lower_bound + self.upper_bound - population\n\n    def local_search(self, x, func):\n        trial = x + np.random.uniform(-0.05, 0.05, self.dim)\n        trial = np.clip(trial, self.lower_bound, self.upper_bound)\n        return trial if func(trial) < func(x) else x\n\n    def mutate(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = indices\n        while a == idx:\n            a = np.random.choice(self.population_size)  # Ensure a != idx\n        diversity_factor = np.exp(-np.std(population, axis=0))\n        mutant = population[a] + self.F * diversity_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.CR\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        budget_used = self.population_size\n\n        while budget_used < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(population, i)\n                trial = self.crossover(population[i], mutant)\n                trial = self.local_search(trial, func)\n\n                trial_fitness = func(trial)\n                budget_used += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if budget_used < self.budget and np.random.rand() < 0.5:\n                    opposite = self.opposition_based_learning(population[i])\n                    opposite_fitness = func(opposite)\n                    budget_used += 1\n                    if opposite_fitness < fitness[i]:\n                        population[i] = opposite\n                        fitness[i] = opposite_fitness\n\n                if budget_used >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "OptimizedAdaptiveDifferentialEvolution", "description": "Enhanced diversity control and adaptive mutation scales in differential evolution for improved convergence.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b6bd6d8-9eb2-40c7-820b-fc972c59a035", "metadata": {"aucs": [0.41638628740398986, 0.44087325269180033, 0.4148527099840317, 0.4494462269351437, 0.45193254970586993, 0.4285732387966792, 0.44233668370072377, 0.4045058513435973, 0.40706917071791804, 0.1562348237788359, 0.15192398214247638, 0.19183830873033048, 0.11381342957337981, 0.18253295699273964, 0.14272737290371573, 0.08846635899383604, 0.13486940581886375, 0.16489947751109757, 0.09317325606414628, 0.10696667839175555, 0.10276607628314649, 0.1066556397268118, 0.10133276222620391, 0.10134781381068114, 0.10159155141906873, 0.0901995645432998, 0.10509441139984699, 0.06806531814270966, 0.07894718250219235, 0.08788733843608554, 0.09294185312740444, 0.07705995206656369, 0.07368205419953333, 0.10419076658204407, 0.0896965987353242, 0.08815952290802143, 0.6059931965801326, 0.7914365707933382, 0.5760794573600078, 0.561713682476779, 0.7086335664820342, 0.6452585638163797, 0.6959416057843615, 0.6355955630595329, 0.6636100793953132, 0.19221989496815872, 0.10332686353816078, 0.18837420523322868, 0.13842586244140254, 0.17270548708936606, 0.16168346446808646, 0.1982730526521349, 0.14187849143274145, 0.19291431839998419, 0.3149695205576962, 0.2595867246075664, 0.21468094573007523, 0.39691674293502, 0.28011783803112544, 0.32077562845532637, 0.2335122721580145, 0.19562231692521959, 0.25279105680017966, 0.14364206278757863, 0.15889426199008472, 0.11539101729590606, 0.1606552380129358, 0.15120944018170634, 0.12507950469305396, 0.17243158632006794, 0.1420475226452298, 0.13407427344722023, 0.16145755211215873, 0.13148714690624996, 0.20276949839399028, 0.14874837478690806, 0.1182266779603347, 0.14557943932470718, 0.19015554815967017, 0.08532572534241134, 0.14417958986613888, 0.03217636608843555, 0.0007379536527092334, 0.0025431148211513266, 0.016582066015109587, 0.000941492678347311, 0.03791076508601021, 0.0003448465572233328, 0.008166758575097632, 0.042413233778395454, 0.07351655254502854, 0.062221920608671266, 0.0517168496793472, 0.0675980580459824, 0.03327085320180834, 0.03201560615170751, 0.06865884810948752, 0.05518686854318111, 0.06681685261149328, 9.999999999998899e-05, 0.0061690263580926885, 0.00731791371156576, 0.005433194974177602, 0.0036315412884874165, 0.0038959490571085498, 0.00012958357094705608, 0.020460540404770966, 0.0002662276605875924, 0.10605736351777773, 0.0845013950908653, 0.10399473660424041, 0.07649102149896103, 0.091700765522166, 0.05537006946474632, 0.10560415356716235, 0.11431948078903953, 0.10187288260477412, 0.38469084306538937, 0.4058310578234404, 0.40124745946048834, 0.38697165722643045, 0.36736331399944766, 0.3697234589914331, 0.4337822383368265, 0.39045608204548365, 0.4058754844285949, 0.085379159284794, 0.08450770620605164, 0.07548395136855779, 0.09230646472905557, 0.08201319149952246, 0.09860571416665331, 0.09122061545389315, 0.09209619751079823, 0.08159151180087443, 0.23687293759081463, 0.2083543049023061, 0.14983314558672878, 0.2868310036036179, 0.2659690907494805, 0.1777716472085824, 0.1870720260171711, 0.2234160237913484, 0.18732756527798144, 0.19656465635664966, 0.19553812608002585, 0.25931850956357005, 0.24229846332452087, 0.2250174639885929, 0.28010161441964443, 0.2688585824659956, 0.2810649591037214, 0.26414899044929696, 0.1621107183380136, 0.20181336837685215, 0.19339056335943283, 0.20086067313704414, 0.1538944901491306, 0.21056230743393967, 0.19871728154861967, 0.21489953287856134, 0.19770653086363943, 0.2013583729532108, 0.20210157193565426, 0.2055483036583592, 0.2120592533223543, 0.20789367116380608, 0.19194591488113977, 0.19774616801824973, 0.18545679358942435, 0.1939589611623308, 0.16317018423427276, 0.18156000499103953, 0.17418779380624005, 0.19007234958777175, 0.16639798503105563, 0.1893131590187892, 0.1686725846803443, 0.17023293311013044, 0.17213995400900717, 0.17542140189516753, 0.1771963044977134, 0.4839969877902699, 0.6009308414757439, 0.18999351316992918, 0.530935967825332, 0.13792153722266465, 0.3734771170240567, 0.1516949287463194, 0.22009816070813126, 0.19199836920716684, 0.32493515667382733, 0.5900271304582425, 0.507310238580846, 0.44739320183756404, 0.15319812408756095, 0.44509067425564286, 0.19222562020981782, 0.17754667663510737, 0.19558958724394138, 0.19560938891866686, 0.16942196945566956, 0.1632401743308416, 0.18854457962518, 0.18399252901189111, 0.17576635256430895, 0.1798781961675131, 0.07443908089959572, 0.08092541002146447, 0.07122686837473025, 0.06722958292022208, 0.08348623378316611, 0.06856320221614243, 0.08109639864250873, 0.07278327672841112, 0.06710790365965547]}, "mutation_prompt": null}
{"id": "1a4ca420-0f9e-444f-8e92-ecb55f831177", "solution": "import numpy as np\n\nclass OptimizedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.7\n        self.CR = 0.85\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def opposition_based_learning(self, population):\n        return self.lower_bound + self.upper_bound - population\n\n    def local_search(self, x, func):\n        trial = x + np.random.uniform(-0.05, 0.05, self.dim)\n        trial = np.clip(trial, self.lower_bound, self.upper_bound)\n        return trial if func(trial) < func(x) else x\n\n    def mutate(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = indices\n        while a == idx:\n            a = np.random.choice(self.population_size)  # Ensure a != idx\n        diversity_factor = np.exp(-np.std(population, axis=0))\n        mutant = population[a] + self.F * diversity_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.CR\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        budget_used = self.population_size\n\n        while budget_used < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(population, i)\n                trial = self.crossover(population[i], mutant)\n                trial = self.local_search(trial, func)\n\n                trial_fitness = func(trial)\n                budget_used += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if budget_used < self.budget and np.random.rand() < 0.5:\n                    opposite = self.opposition_based_learning(population[i])\n                    opposite_fitness = func(opposite)\n                    budget_used += 1\n                    if opposite_fitness < fitness[i]:\n                        population[i] = opposite\n                        fitness[i] = opposite_fitness\n\n                if budget_used >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "OptimizedAdaptiveDifferentialEvolution", "description": "Enhanced diversity control and adaptive mutation scales in differential evolution for improved convergence.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b6bd6d8-9eb2-40c7-820b-fc972c59a035", "metadata": {"aucs": [0.41638628740398986, 0.44087325269180033, 0.4148527099840317, 0.4494462269351437, 0.45193254970586993, 0.4285732387966792, 0.44233668370072377, 0.4045058513435973, 0.40706917071791804, 0.1562348237788359, 0.15192398214247638, 0.19183830873033048, 0.11381342957337981, 0.18253295699273964, 0.14272737290371573, 0.08846635899383604, 0.13486940581886375, 0.16489947751109757, 0.09317325606414628, 0.10696667839175555, 0.10276607628314649, 0.1066556397268118, 0.10133276222620391, 0.10134781381068114, 0.10159155141906873, 0.0901995645432998, 0.10509441139984699, 0.06806531814270966, 0.07894718250219235, 0.08788733843608554, 0.09294185312740444, 0.07705995206656369, 0.07368205419953333, 0.10419076658204407, 0.0896965987353242, 0.08815952290802143, 0.6059931965801326, 0.7914365707933382, 0.5760794573600078, 0.561713682476779, 0.7086335664820342, 0.6452585638163797, 0.6959416057843615, 0.6355955630595329, 0.6636100793953132, 0.19221989496815872, 0.10332686353816078, 0.18837420523322868, 0.13842586244140254, 0.17270548708936606, 0.16168346446808646, 0.1982730526521349, 0.14187849143274145, 0.19291431839998419, 0.3149695205576962, 0.2595867246075664, 0.21468094573007523, 0.39691674293502, 0.28011783803112544, 0.32077562845532637, 0.2335122721580145, 0.19562231692521959, 0.25279105680017966, 0.14364206278757863, 0.15889426199008472, 0.11539101729590606, 0.1606552380129358, 0.15120944018170634, 0.12507950469305396, 0.17243158632006794, 0.1420475226452298, 0.13407427344722023, 0.16145755211215873, 0.13148714690624996, 0.20276949839399028, 0.14874837478690806, 0.1182266779603347, 0.14557943932470718, 0.19015554815967017, 0.08532572534241134, 0.14417958986613888, 0.03217636608843555, 0.0007379536527092334, 0.0025431148211513266, 0.016582066015109587, 0.000941492678347311, 0.03791076508601021, 0.0003448465572233328, 0.008166758575097632, 0.042413233778395454, 0.07351655254502854, 0.062221920608671266, 0.0517168496793472, 0.0675980580459824, 0.03327085320180834, 0.03201560615170751, 0.06865884810948752, 0.05518686854318111, 0.06681685261149328, 9.999999999998899e-05, 0.0061690263580926885, 0.00731791371156576, 0.005433194974177602, 0.0036315412884874165, 0.0038959490571085498, 0.00012958357094705608, 0.020460540404770966, 0.0002662276605875924, 0.10605736351777773, 0.0845013950908653, 0.10399473660424041, 0.07649102149896103, 0.091700765522166, 0.05537006946474632, 0.10560415356716235, 0.11431948078903953, 0.10187288260477412, 0.38469084306538937, 0.4058310578234404, 0.40124745946048834, 0.38697165722643045, 0.36736331399944766, 0.3697234589914331, 0.4337822383368265, 0.39045608204548365, 0.4058754844285949, 0.085379159284794, 0.08450770620605164, 0.07548395136855779, 0.09230646472905557, 0.08201319149952246, 0.09860571416665331, 0.09122061545389315, 0.09209619751079823, 0.08159151180087443, 0.23687293759081463, 0.2083543049023061, 0.14983314558672878, 0.2868310036036179, 0.2659690907494805, 0.1777716472085824, 0.1870720260171711, 0.2234160237913484, 0.18732756527798144, 0.19656465635664966, 0.19553812608002585, 0.25931850956357005, 0.24229846332452087, 0.2250174639885929, 0.28010161441964443, 0.2688585824659956, 0.2810649591037214, 0.26414899044929696, 0.1621107183380136, 0.20181336837685215, 0.19339056335943283, 0.20086067313704414, 0.1538944901491306, 0.21056230743393967, 0.19871728154861967, 0.21489953287856134, 0.19770653086363943, 0.2013583729532108, 0.20210157193565426, 0.2055483036583592, 0.2120592533223543, 0.20789367116380608, 0.19194591488113977, 0.19774616801824973, 0.18545679358942435, 0.1939589611623308, 0.16317018423427276, 0.18156000499103953, 0.17418779380624005, 0.19007234958777175, 0.16639798503105563, 0.1893131590187892, 0.1686725846803443, 0.17023293311013044, 0.17213995400900717, 0.17542140189516753, 0.1771963044977134, 0.4839969877902699, 0.6009308414757439, 0.18999351316992918, 0.530935967825332, 0.13792153722266465, 0.3734771170240567, 0.1516949287463194, 0.22009816070813126, 0.19199836920716684, 0.32493515667382733, 0.5900271304582425, 0.507310238580846, 0.44739320183756404, 0.15319812408756095, 0.44509067425564286, 0.19222562020981782, 0.17754667663510737, 0.19558958724394138, 0.19560938891866686, 0.16942196945566956, 0.1632401743308416, 0.18854457962518, 0.18399252901189111, 0.17576635256430895, 0.1798781961675131, 0.07443908089959572, 0.08092541002146447, 0.07122686837473025, 0.06722958292022208, 0.08348623378316611, 0.06856320221614243, 0.08109639864250873, 0.07278327672841112, 0.06710790365965547]}, "mutation_prompt": null}
{"id": "c6afcbc1-1efc-4d2b-b606-73c859a53366", "solution": "import numpy as np\n\nclass OptimizedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.7\n        self.CR = 0.85\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def opposition_based_learning(self, population):\n        return self.lower_bound + self.upper_bound - population\n\n    def local_search(self, x, func):\n        trial = x + np.random.uniform(-0.05, 0.05, self.dim)\n        trial = np.clip(trial, self.lower_bound, self.upper_bound)\n        return trial if func(trial) < func(x) else x\n\n    def mutate(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = indices\n        while a == idx:\n            a = np.random.choice(self.population_size)  # Ensure a != idx\n        diversity_factor = np.exp(-np.std(population, axis=0))\n        mutant = population[a] + self.F * diversity_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.CR\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        budget_used = self.population_size\n\n        while budget_used < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(population, i)\n                trial = self.crossover(population[i], mutant)\n                trial = self.local_search(trial, func)\n\n                trial_fitness = func(trial)\n                budget_used += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if budget_used < self.budget and np.random.rand() < 0.5:\n                    opposite = self.opposition_based_learning(population[i])\n                    opposite_fitness = func(opposite)\n                    budget_used += 1\n                    if opposite_fitness < fitness[i]:\n                        population[i] = opposite\n                        fitness[i] = opposite_fitness\n\n                if budget_used >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "OptimizedAdaptiveDifferentialEvolution", "description": "Enhanced diversity control and adaptive mutation scales in differential evolution for improved convergence.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b6bd6d8-9eb2-40c7-820b-fc972c59a035", "metadata": {"aucs": [0.41638628740398986, 0.44087325269180033, 0.4148527099840317, 0.4494462269351437, 0.45193254970586993, 0.4285732387966792, 0.44233668370072377, 0.4045058513435973, 0.40706917071791804, 0.1562348237788359, 0.15192398214247638, 0.19183830873033048, 0.11381342957337981, 0.18253295699273964, 0.14272737290371573, 0.08846635899383604, 0.13486940581886375, 0.16489947751109757, 0.09317325606414628, 0.10696667839175555, 0.10276607628314649, 0.1066556397268118, 0.10133276222620391, 0.10134781381068114, 0.10159155141906873, 0.0901995645432998, 0.10509441139984699, 0.06806531814270966, 0.07894718250219235, 0.08788733843608554, 0.09294185312740444, 0.07705995206656369, 0.07368205419953333, 0.10419076658204407, 0.0896965987353242, 0.08815952290802143, 0.6059931965801326, 0.7914365707933382, 0.5760794573600078, 0.561713682476779, 0.7086335664820342, 0.6452585638163797, 0.6959416057843615, 0.6355955630595329, 0.6636100793953132, 0.19221989496815872, 0.10332686353816078, 0.18837420523322868, 0.13842586244140254, 0.17270548708936606, 0.16168346446808646, 0.1982730526521349, 0.14187849143274145, 0.19291431839998419, 0.3149695205576962, 0.2595867246075664, 0.21468094573007523, 0.39691674293502, 0.28011783803112544, 0.32077562845532637, 0.2335122721580145, 0.19562231692521959, 0.25279105680017966, 0.14364206278757863, 0.15889426199008472, 0.11539101729590606, 0.1606552380129358, 0.15120944018170634, 0.12507950469305396, 0.17243158632006794, 0.1420475226452298, 0.13407427344722023, 0.16145755211215873, 0.13148714690624996, 0.20276949839399028, 0.14874837478690806, 0.1182266779603347, 0.14557943932470718, 0.19015554815967017, 0.08532572534241134, 0.14417958986613888, 0.03217636608843555, 0.0007379536527092334, 0.0025431148211513266, 0.016582066015109587, 0.000941492678347311, 0.03791076508601021, 0.0003448465572233328, 0.008166758575097632, 0.042413233778395454, 0.07351655254502854, 0.062221920608671266, 0.0517168496793472, 0.0675980580459824, 0.03327085320180834, 0.03201560615170751, 0.06865884810948752, 0.05518686854318111, 0.06681685261149328, 9.999999999998899e-05, 0.0061690263580926885, 0.00731791371156576, 0.005433194974177602, 0.0036315412884874165, 0.0038959490571085498, 0.00012958357094705608, 0.020460540404770966, 0.0002662276605875924, 0.10605736351777773, 0.0845013950908653, 0.10399473660424041, 0.07649102149896103, 0.091700765522166, 0.05537006946474632, 0.10560415356716235, 0.11431948078903953, 0.10187288260477412, 0.38469084306538937, 0.4058310578234404, 0.40124745946048834, 0.38697165722643045, 0.36736331399944766, 0.3697234589914331, 0.4337822383368265, 0.39045608204548365, 0.4058754844285949, 0.085379159284794, 0.08450770620605164, 0.07548395136855779, 0.09230646472905557, 0.08201319149952246, 0.09860571416665331, 0.09122061545389315, 0.09209619751079823, 0.08159151180087443, 0.23687293759081463, 0.2083543049023061, 0.14983314558672878, 0.2868310036036179, 0.2659690907494805, 0.1777716472085824, 0.1870720260171711, 0.2234160237913484, 0.18732756527798144, 0.19656465635664966, 0.19553812608002585, 0.25931850956357005, 0.24229846332452087, 0.2250174639885929, 0.28010161441964443, 0.2688585824659956, 0.2810649591037214, 0.26414899044929696, 0.1621107183380136, 0.20181336837685215, 0.19339056335943283, 0.20086067313704414, 0.1538944901491306, 0.21056230743393967, 0.19871728154861967, 0.21489953287856134, 0.19770653086363943, 0.2013583729532108, 0.20210157193565426, 0.2055483036583592, 0.2120592533223543, 0.20789367116380608, 0.19194591488113977, 0.19774616801824973, 0.18545679358942435, 0.1939589611623308, 0.16317018423427276, 0.18156000499103953, 0.17418779380624005, 0.19007234958777175, 0.16639798503105563, 0.1893131590187892, 0.1686725846803443, 0.17023293311013044, 0.17213995400900717, 0.17542140189516753, 0.1771963044977134, 0.4839969877902699, 0.6009308414757439, 0.18999351316992918, 0.530935967825332, 0.13792153722266465, 0.3734771170240567, 0.1516949287463194, 0.22009816070813126, 0.19199836920716684, 0.32493515667382733, 0.5900271304582425, 0.507310238580846, 0.44739320183756404, 0.15319812408756095, 0.44509067425564286, 0.19222562020981782, 0.17754667663510737, 0.19558958724394138, 0.19560938891866686, 0.16942196945566956, 0.1632401743308416, 0.18854457962518, 0.18399252901189111, 0.17576635256430895, 0.1798781961675131, 0.07443908089959572, 0.08092541002146447, 0.07122686837473025, 0.06722958292022208, 0.08348623378316611, 0.06856320221614243, 0.08109639864250873, 0.07278327672841112, 0.06710790365965547]}, "mutation_prompt": null}
{"id": "40f50fba-5b17-4d08-b107-5ad8d7879b33", "solution": "import numpy as np\n\nclass OptimizedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.7\n        self.CR = 0.85\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def opposition_based_learning(self, population):\n        return self.lower_bound + self.upper_bound - population\n\n    def local_search(self, x, func):\n        trial = x + np.random.uniform(-0.05, 0.05, self.dim)\n        trial = np.clip(trial, self.lower_bound, self.upper_bound)\n        return trial if func(trial) < func(x) else x\n\n    def mutate(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = indices\n        while a == idx:\n            a = np.random.choice(self.population_size)  # Ensure a != idx\n        diversity_factor = np.exp(-np.std(population, axis=0))\n        mutant = population[a] + self.F * diversity_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.CR\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        budget_used = self.population_size\n\n        while budget_used < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(population, i)\n                trial = self.crossover(population[i], mutant)\n                trial = self.local_search(trial, func)\n\n                trial_fitness = func(trial)\n                budget_used += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if budget_used < self.budget and np.random.rand() < 0.5:\n                    opposite = self.opposition_based_learning(population[i])\n                    opposite_fitness = func(opposite)\n                    budget_used += 1\n                    if opposite_fitness < fitness[i]:\n                        population[i] = opposite\n                        fitness[i] = opposite_fitness\n\n                if budget_used >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "OptimizedAdaptiveDifferentialEvolution", "description": "Enhanced diversity control and adaptive mutation scales in differential evolution for improved convergence.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b6bd6d8-9eb2-40c7-820b-fc972c59a035", "metadata": {"aucs": [0.41638628740398986, 0.44087325269180033, 0.4148527099840317, 0.4494462269351437, 0.45193254970586993, 0.4285732387966792, 0.44233668370072377, 0.4045058513435973, 0.40706917071791804, 0.1562348237788359, 0.15192398214247638, 0.19183830873033048, 0.11381342957337981, 0.18253295699273964, 0.14272737290371573, 0.08846635899383604, 0.13486940581886375, 0.16489947751109757, 0.09317325606414628, 0.10696667839175555, 0.10276607628314649, 0.1066556397268118, 0.10133276222620391, 0.10134781381068114, 0.10159155141906873, 0.0901995645432998, 0.10509441139984699, 0.06806531814270966, 0.07894718250219235, 0.08788733843608554, 0.09294185312740444, 0.07705995206656369, 0.07368205419953333, 0.10419076658204407, 0.0896965987353242, 0.08815952290802143, 0.6059931965801326, 0.7914365707933382, 0.5760794573600078, 0.561713682476779, 0.7086335664820342, 0.6452585638163797, 0.6959416057843615, 0.6355955630595329, 0.6636100793953132, 0.19221989496815872, 0.10332686353816078, 0.18837420523322868, 0.13842586244140254, 0.17270548708936606, 0.16168346446808646, 0.1982730526521349, 0.14187849143274145, 0.19291431839998419, 0.3149695205576962, 0.2595867246075664, 0.21468094573007523, 0.39691674293502, 0.28011783803112544, 0.32077562845532637, 0.2335122721580145, 0.19562231692521959, 0.25279105680017966, 0.14364206278757863, 0.15889426199008472, 0.11539101729590606, 0.1606552380129358, 0.15120944018170634, 0.12507950469305396, 0.17243158632006794, 0.1420475226452298, 0.13407427344722023, 0.16145755211215873, 0.13148714690624996, 0.20276949839399028, 0.14874837478690806, 0.1182266779603347, 0.14557943932470718, 0.19015554815967017, 0.08532572534241134, 0.14417958986613888, 0.03217636608843555, 0.0007379536527092334, 0.0025431148211513266, 0.016582066015109587, 0.000941492678347311, 0.03791076508601021, 0.0003448465572233328, 0.008166758575097632, 0.042413233778395454, 0.07351655254502854, 0.062221920608671266, 0.0517168496793472, 0.0675980580459824, 0.03327085320180834, 0.03201560615170751, 0.06865884810948752, 0.05518686854318111, 0.06681685261149328, 9.999999999998899e-05, 0.0061690263580926885, 0.00731791371156576, 0.005433194974177602, 0.0036315412884874165, 0.0038959490571085498, 0.00012958357094705608, 0.020460540404770966, 0.0002662276605875924, 0.10605736351777773, 0.0845013950908653, 0.10399473660424041, 0.07649102149896103, 0.091700765522166, 0.05537006946474632, 0.10560415356716235, 0.11431948078903953, 0.10187288260477412, 0.38469084306538937, 0.4058310578234404, 0.40124745946048834, 0.38697165722643045, 0.36736331399944766, 0.3697234589914331, 0.4337822383368265, 0.39045608204548365, 0.4058754844285949, 0.085379159284794, 0.08450770620605164, 0.07548395136855779, 0.09230646472905557, 0.08201319149952246, 0.09860571416665331, 0.09122061545389315, 0.09209619751079823, 0.08159151180087443, 0.23687293759081463, 0.2083543049023061, 0.14983314558672878, 0.2868310036036179, 0.2659690907494805, 0.1777716472085824, 0.1870720260171711, 0.2234160237913484, 0.18732756527798144, 0.19656465635664966, 0.19553812608002585, 0.25931850956357005, 0.24229846332452087, 0.2250174639885929, 0.28010161441964443, 0.2688585824659956, 0.2810649591037214, 0.26414899044929696, 0.1621107183380136, 0.20181336837685215, 0.19339056335943283, 0.20086067313704414, 0.1538944901491306, 0.21056230743393967, 0.19871728154861967, 0.21489953287856134, 0.19770653086363943, 0.2013583729532108, 0.20210157193565426, 0.2055483036583592, 0.2120592533223543, 0.20789367116380608, 0.19194591488113977, 0.19774616801824973, 0.18545679358942435, 0.1939589611623308, 0.16317018423427276, 0.18156000499103953, 0.17418779380624005, 0.19007234958777175, 0.16639798503105563, 0.1893131590187892, 0.1686725846803443, 0.17023293311013044, 0.17213995400900717, 0.17542140189516753, 0.1771963044977134, 0.4839969877902699, 0.6009308414757439, 0.18999351316992918, 0.530935967825332, 0.13792153722266465, 0.3734771170240567, 0.1516949287463194, 0.22009816070813126, 0.19199836920716684, 0.32493515667382733, 0.5900271304582425, 0.507310238580846, 0.44739320183756404, 0.15319812408756095, 0.44509067425564286, 0.19222562020981782, 0.17754667663510737, 0.19558958724394138, 0.19560938891866686, 0.16942196945566956, 0.1632401743308416, 0.18854457962518, 0.18399252901189111, 0.17576635256430895, 0.1798781961675131, 0.07443908089959572, 0.08092541002146447, 0.07122686837473025, 0.06722958292022208, 0.08348623378316611, 0.06856320221614243, 0.08109639864250873, 0.07278327672841112, 0.06710790365965547]}, "mutation_prompt": null}
{"id": "200600cc-6e3f-4832-9030-4db307472a38", "solution": "import numpy as np\n\nclass OptimizedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.7\n        self.CR = 0.85\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def opposition_based_learning(self, population):\n        return self.lower_bound + self.upper_bound - population\n\n    def local_search(self, x, func):\n        trial = x + np.random.uniform(-0.05, 0.05, self.dim)\n        trial = np.clip(trial, self.lower_bound, self.upper_bound)\n        return trial if func(trial) < func(x) else x\n\n    def mutate(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = indices\n        while a == idx:\n            a = np.random.choice(self.population_size)  # Ensure a != idx\n        diversity_factor = np.exp(-np.std(population, axis=0))\n        mutant = population[a] + self.F * diversity_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.CR\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        budget_used = self.population_size\n\n        while budget_used < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(population, i)\n                trial = self.crossover(population[i], mutant)\n                trial = self.local_search(trial, func)\n\n                trial_fitness = func(trial)\n                budget_used += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if budget_used < self.budget and np.random.rand() < 0.5:\n                    opposite = self.opposition_based_learning(population[i])\n                    opposite_fitness = func(opposite)\n                    budget_used += 1\n                    if opposite_fitness < fitness[i]:\n                        population[i] = opposite\n                        fitness[i] = opposite_fitness\n\n                if budget_used >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "OptimizedAdaptiveDifferentialEvolution", "description": "Enhanced diversity control and adaptive mutation scales in differential evolution for improved convergence.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b6bd6d8-9eb2-40c7-820b-fc972c59a035", "metadata": {"aucs": [0.41638628740398986, 0.44087325269180033, 0.4148527099840317, 0.4494462269351437, 0.45193254970586993, 0.4285732387966792, 0.44233668370072377, 0.4045058513435973, 0.40706917071791804, 0.1562348237788359, 0.15192398214247638, 0.19183830873033048, 0.11381342957337981, 0.18253295699273964, 0.14272737290371573, 0.08846635899383604, 0.13486940581886375, 0.16489947751109757, 0.09317325606414628, 0.10696667839175555, 0.10276607628314649, 0.1066556397268118, 0.10133276222620391, 0.10134781381068114, 0.10159155141906873, 0.0901995645432998, 0.10509441139984699, 0.06806531814270966, 0.07894718250219235, 0.08788733843608554, 0.09294185312740444, 0.07705995206656369, 0.07368205419953333, 0.10419076658204407, 0.0896965987353242, 0.08815952290802143, 0.6059931965801326, 0.7914365707933382, 0.5760794573600078, 0.561713682476779, 0.7086335664820342, 0.6452585638163797, 0.6959416057843615, 0.6355955630595329, 0.6636100793953132, 0.19221989496815872, 0.10332686353816078, 0.18837420523322868, 0.13842586244140254, 0.17270548708936606, 0.16168346446808646, 0.1982730526521349, 0.14187849143274145, 0.19291431839998419, 0.3149695205576962, 0.2595867246075664, 0.21468094573007523, 0.39691674293502, 0.28011783803112544, 0.32077562845532637, 0.2335122721580145, 0.19562231692521959, 0.25279105680017966, 0.14364206278757863, 0.15889426199008472, 0.11539101729590606, 0.1606552380129358, 0.15120944018170634, 0.12507950469305396, 0.17243158632006794, 0.1420475226452298, 0.13407427344722023, 0.16145755211215873, 0.13148714690624996, 0.20276949839399028, 0.14874837478690806, 0.1182266779603347, 0.14557943932470718, 0.19015554815967017, 0.08532572534241134, 0.14417958986613888, 0.03217636608843555, 0.0007379536527092334, 0.0025431148211513266, 0.016582066015109587, 0.000941492678347311, 0.03791076508601021, 0.0003448465572233328, 0.008166758575097632, 0.042413233778395454, 0.07351655254502854, 0.062221920608671266, 0.0517168496793472, 0.0675980580459824, 0.03327085320180834, 0.03201560615170751, 0.06865884810948752, 0.05518686854318111, 0.06681685261149328, 9.999999999998899e-05, 0.0061690263580926885, 0.00731791371156576, 0.005433194974177602, 0.0036315412884874165, 0.0038959490571085498, 0.00012958357094705608, 0.020460540404770966, 0.0002662276605875924, 0.10605736351777773, 0.0845013950908653, 0.10399473660424041, 0.07649102149896103, 0.091700765522166, 0.05537006946474632, 0.10560415356716235, 0.11431948078903953, 0.10187288260477412, 0.38469084306538937, 0.4058310578234404, 0.40124745946048834, 0.38697165722643045, 0.36736331399944766, 0.3697234589914331, 0.4337822383368265, 0.39045608204548365, 0.4058754844285949, 0.085379159284794, 0.08450770620605164, 0.07548395136855779, 0.09230646472905557, 0.08201319149952246, 0.09860571416665331, 0.09122061545389315, 0.09209619751079823, 0.08159151180087443, 0.23687293759081463, 0.2083543049023061, 0.14983314558672878, 0.2868310036036179, 0.2659690907494805, 0.1777716472085824, 0.1870720260171711, 0.2234160237913484, 0.18732756527798144, 0.19656465635664966, 0.19553812608002585, 0.25931850956357005, 0.24229846332452087, 0.2250174639885929, 0.28010161441964443, 0.2688585824659956, 0.2810649591037214, 0.26414899044929696, 0.1621107183380136, 0.20181336837685215, 0.19339056335943283, 0.20086067313704414, 0.1538944901491306, 0.21056230743393967, 0.19871728154861967, 0.21489953287856134, 0.19770653086363943, 0.2013583729532108, 0.20210157193565426, 0.2055483036583592, 0.2120592533223543, 0.20789367116380608, 0.19194591488113977, 0.19774616801824973, 0.18545679358942435, 0.1939589611623308, 0.16317018423427276, 0.18156000499103953, 0.17418779380624005, 0.19007234958777175, 0.16639798503105563, 0.1893131590187892, 0.1686725846803443, 0.17023293311013044, 0.17213995400900717, 0.17542140189516753, 0.1771963044977134, 0.4839969877902699, 0.6009308414757439, 0.18999351316992918, 0.530935967825332, 0.13792153722266465, 0.3734771170240567, 0.1516949287463194, 0.22009816070813126, 0.19199836920716684, 0.32493515667382733, 0.5900271304582425, 0.507310238580846, 0.44739320183756404, 0.15319812408756095, 0.44509067425564286, 0.19222562020981782, 0.17754667663510737, 0.19558958724394138, 0.19560938891866686, 0.16942196945566956, 0.1632401743308416, 0.18854457962518, 0.18399252901189111, 0.17576635256430895, 0.1798781961675131, 0.07443908089959572, 0.08092541002146447, 0.07122686837473025, 0.06722958292022208, 0.08348623378316611, 0.06856320221614243, 0.08109639864250873, 0.07278327672841112, 0.06710790365965547]}, "mutation_prompt": null}
{"id": "de7a1545-b806-4931-bfa0-dc9499663dee", "solution": "import numpy as np\n\nclass OptimizedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.7\n        self.CR = 0.85\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def opposition_based_learning(self, population):\n        return self.lower_bound + self.upper_bound - population\n\n    def local_search(self, x, func):\n        trial = x + np.random.uniform(-0.05, 0.05, self.dim)\n        trial = np.clip(trial, self.lower_bound, self.upper_bound)\n        return trial if func(trial) < func(x) else x\n\n    def mutate(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = indices\n        while a == idx:\n            a = np.random.choice(self.population_size)  # Ensure a != idx\n        diversity_factor = np.exp(-np.std(population, axis=0))\n        mutant = population[a] + self.F * diversity_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.CR\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        budget_used = self.population_size\n\n        while budget_used < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(population, i)\n                trial = self.crossover(population[i], mutant)\n                trial = self.local_search(trial, func)\n\n                trial_fitness = func(trial)\n                budget_used += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if budget_used < self.budget and np.random.rand() < 0.5:\n                    opposite = self.opposition_based_learning(population[i])\n                    opposite_fitness = func(opposite)\n                    budget_used += 1\n                    if opposite_fitness < fitness[i]:\n                        population[i] = opposite\n                        fitness[i] = opposite_fitness\n\n                if budget_used >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "OptimizedAdaptiveDifferentialEvolution", "description": "Enhanced diversity control and adaptive mutation scales in differential evolution for improved convergence.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b6bd6d8-9eb2-40c7-820b-fc972c59a035", "metadata": {"aucs": [0.41638628740398986, 0.44087325269180033, 0.4148527099840317, 0.4494462269351437, 0.45193254970586993, 0.4285732387966792, 0.44233668370072377, 0.4045058513435973, 0.40706917071791804, 0.1562348237788359, 0.15192398214247638, 0.19183830873033048, 0.11381342957337981, 0.18253295699273964, 0.14272737290371573, 0.08846635899383604, 0.13486940581886375, 0.16489947751109757, 0.09317325606414628, 0.10696667839175555, 0.10276607628314649, 0.1066556397268118, 0.10133276222620391, 0.10134781381068114, 0.10159155141906873, 0.0901995645432998, 0.10509441139984699, 0.06806531814270966, 0.07894718250219235, 0.08788733843608554, 0.09294185312740444, 0.07705995206656369, 0.07368205419953333, 0.10419076658204407, 0.0896965987353242, 0.08815952290802143, 0.6059931965801326, 0.7914365707933382, 0.5760794573600078, 0.561713682476779, 0.7086335664820342, 0.6452585638163797, 0.6959416057843615, 0.6355955630595329, 0.6636100793953132, 0.19221989496815872, 0.10332686353816078, 0.18837420523322868, 0.13842586244140254, 0.17270548708936606, 0.16168346446808646, 0.1982730526521349, 0.14187849143274145, 0.19291431839998419, 0.3149695205576962, 0.2595867246075664, 0.21468094573007523, 0.39691674293502, 0.28011783803112544, 0.32077562845532637, 0.2335122721580145, 0.19562231692521959, 0.25279105680017966, 0.14364206278757863, 0.15889426199008472, 0.11539101729590606, 0.1606552380129358, 0.15120944018170634, 0.12507950469305396, 0.17243158632006794, 0.1420475226452298, 0.13407427344722023, 0.16145755211215873, 0.13148714690624996, 0.20276949839399028, 0.14874837478690806, 0.1182266779603347, 0.14557943932470718, 0.19015554815967017, 0.08532572534241134, 0.14417958986613888, 0.03217636608843555, 0.0007379536527092334, 0.0025431148211513266, 0.016582066015109587, 0.000941492678347311, 0.03791076508601021, 0.0003448465572233328, 0.008166758575097632, 0.042413233778395454, 0.07351655254502854, 0.062221920608671266, 0.0517168496793472, 0.0675980580459824, 0.03327085320180834, 0.03201560615170751, 0.06865884810948752, 0.05518686854318111, 0.06681685261149328, 9.999999999998899e-05, 0.0061690263580926885, 0.00731791371156576, 0.005433194974177602, 0.0036315412884874165, 0.0038959490571085498, 0.00012958357094705608, 0.020460540404770966, 0.0002662276605875924, 0.10605736351777773, 0.0845013950908653, 0.10399473660424041, 0.07649102149896103, 0.091700765522166, 0.05537006946474632, 0.10560415356716235, 0.11431948078903953, 0.10187288260477412, 0.38469084306538937, 0.4058310578234404, 0.40124745946048834, 0.38697165722643045, 0.36736331399944766, 0.3697234589914331, 0.4337822383368265, 0.39045608204548365, 0.4058754844285949, 0.085379159284794, 0.08450770620605164, 0.07548395136855779, 0.09230646472905557, 0.08201319149952246, 0.09860571416665331, 0.09122061545389315, 0.09209619751079823, 0.08159151180087443, 0.23687293759081463, 0.2083543049023061, 0.14983314558672878, 0.2868310036036179, 0.2659690907494805, 0.1777716472085824, 0.1870720260171711, 0.2234160237913484, 0.18732756527798144, 0.19656465635664966, 0.19553812608002585, 0.25931850956357005, 0.24229846332452087, 0.2250174639885929, 0.28010161441964443, 0.2688585824659956, 0.2810649591037214, 0.26414899044929696, 0.1621107183380136, 0.20181336837685215, 0.19339056335943283, 0.20086067313704414, 0.1538944901491306, 0.21056230743393967, 0.19871728154861967, 0.21489953287856134, 0.19770653086363943, 0.2013583729532108, 0.20210157193565426, 0.2055483036583592, 0.2120592533223543, 0.20789367116380608, 0.19194591488113977, 0.19774616801824973, 0.18545679358942435, 0.1939589611623308, 0.16317018423427276, 0.18156000499103953, 0.17418779380624005, 0.19007234958777175, 0.16639798503105563, 0.1893131590187892, 0.1686725846803443, 0.17023293311013044, 0.17213995400900717, 0.17542140189516753, 0.1771963044977134, 0.4839969877902699, 0.6009308414757439, 0.18999351316992918, 0.530935967825332, 0.13792153722266465, 0.3734771170240567, 0.1516949287463194, 0.22009816070813126, 0.19199836920716684, 0.32493515667382733, 0.5900271304582425, 0.507310238580846, 0.44739320183756404, 0.15319812408756095, 0.44509067425564286, 0.19222562020981782, 0.17754667663510737, 0.19558958724394138, 0.19560938891866686, 0.16942196945566956, 0.1632401743308416, 0.18854457962518, 0.18399252901189111, 0.17576635256430895, 0.1798781961675131, 0.07443908089959572, 0.08092541002146447, 0.07122686837473025, 0.06722958292022208, 0.08348623378316611, 0.06856320221614243, 0.08109639864250873, 0.07278327672841112, 0.06710790365965547]}, "mutation_prompt": null}
{"id": "deab0dd1-0007-4008-91ce-699651fefcf9", "solution": "import numpy as np\n\nclass OptimizedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.7\n        self.CR = 0.85\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def opposition_based_learning(self, population):\n        return self.lower_bound + self.upper_bound - population\n\n    def local_search(self, x, func):\n        trial = x + np.random.uniform(-0.05, 0.05, self.dim)\n        trial = np.clip(trial, self.lower_bound, self.upper_bound)\n        return trial if func(trial) < func(x) else x\n\n    def mutate(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = indices\n        while a == idx:\n            a = np.random.choice(self.population_size)  # Ensure a != idx\n        diversity_factor = np.exp(-np.std(population, axis=0))\n        mutant = population[a] + self.F * diversity_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.CR\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        budget_used = self.population_size\n\n        while budget_used < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(population, i)\n                trial = self.crossover(population[i], mutant)\n                trial = self.local_search(trial, func)\n\n                trial_fitness = func(trial)\n                budget_used += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if budget_used < self.budget and np.random.rand() < 0.5:\n                    opposite = self.opposition_based_learning(population[i])\n                    opposite_fitness = func(opposite)\n                    budget_used += 1\n                    if opposite_fitness < fitness[i]:\n                        population[i] = opposite\n                        fitness[i] = opposite_fitness\n\n                if budget_used >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "OptimizedAdaptiveDifferentialEvolution", "description": "Enhanced diversity control and adaptive mutation scales in differential evolution for improved convergence.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b6bd6d8-9eb2-40c7-820b-fc972c59a035", "metadata": {"aucs": [0.41638628740398986, 0.44087325269180033, 0.4148527099840317, 0.4494462269351437, 0.45193254970586993, 0.4285732387966792, 0.44233668370072377, 0.4045058513435973, 0.40706917071791804, 0.1562348237788359, 0.15192398214247638, 0.19183830873033048, 0.11381342957337981, 0.18253295699273964, 0.14272737290371573, 0.08846635899383604, 0.13486940581886375, 0.16489947751109757, 0.09317325606414628, 0.10696667839175555, 0.10276607628314649, 0.1066556397268118, 0.10133276222620391, 0.10134781381068114, 0.10159155141906873, 0.0901995645432998, 0.10509441139984699, 0.06806531814270966, 0.07894718250219235, 0.08788733843608554, 0.09294185312740444, 0.07705995206656369, 0.07368205419953333, 0.10419076658204407, 0.0896965987353242, 0.08815952290802143, 0.6059931965801326, 0.7914365707933382, 0.5760794573600078, 0.561713682476779, 0.7086335664820342, 0.6452585638163797, 0.6959416057843615, 0.6355955630595329, 0.6636100793953132, 0.19221989496815872, 0.10332686353816078, 0.18837420523322868, 0.13842586244140254, 0.17270548708936606, 0.16168346446808646, 0.1982730526521349, 0.14187849143274145, 0.19291431839998419, 0.3149695205576962, 0.2595867246075664, 0.21468094573007523, 0.39691674293502, 0.28011783803112544, 0.32077562845532637, 0.2335122721580145, 0.19562231692521959, 0.25279105680017966, 0.14364206278757863, 0.15889426199008472, 0.11539101729590606, 0.1606552380129358, 0.15120944018170634, 0.12507950469305396, 0.17243158632006794, 0.1420475226452298, 0.13407427344722023, 0.16145755211215873, 0.13148714690624996, 0.20276949839399028, 0.14874837478690806, 0.1182266779603347, 0.14557943932470718, 0.19015554815967017, 0.08532572534241134, 0.14417958986613888, 0.03217636608843555, 0.0007379536527092334, 0.0025431148211513266, 0.016582066015109587, 0.000941492678347311, 0.03791076508601021, 0.0003448465572233328, 0.008166758575097632, 0.042413233778395454, 0.07351655254502854, 0.062221920608671266, 0.0517168496793472, 0.0675980580459824, 0.03327085320180834, 0.03201560615170751, 0.06865884810948752, 0.05518686854318111, 0.06681685261149328, 9.999999999998899e-05, 0.0061690263580926885, 0.00731791371156576, 0.005433194974177602, 0.0036315412884874165, 0.0038959490571085498, 0.00012958357094705608, 0.020460540404770966, 0.0002662276605875924, 0.10605736351777773, 0.0845013950908653, 0.10399473660424041, 0.07649102149896103, 0.091700765522166, 0.05537006946474632, 0.10560415356716235, 0.11431948078903953, 0.10187288260477412, 0.38469084306538937, 0.4058310578234404, 0.40124745946048834, 0.38697165722643045, 0.36736331399944766, 0.3697234589914331, 0.4337822383368265, 0.39045608204548365, 0.4058754844285949, 0.085379159284794, 0.08450770620605164, 0.07548395136855779, 0.09230646472905557, 0.08201319149952246, 0.09860571416665331, 0.09122061545389315, 0.09209619751079823, 0.08159151180087443, 0.23687293759081463, 0.2083543049023061, 0.14983314558672878, 0.2868310036036179, 0.2659690907494805, 0.1777716472085824, 0.1870720260171711, 0.2234160237913484, 0.18732756527798144, 0.19656465635664966, 0.19553812608002585, 0.25931850956357005, 0.24229846332452087, 0.2250174639885929, 0.28010161441964443, 0.2688585824659956, 0.2810649591037214, 0.26414899044929696, 0.1621107183380136, 0.20181336837685215, 0.19339056335943283, 0.20086067313704414, 0.1538944901491306, 0.21056230743393967, 0.19871728154861967, 0.21489953287856134, 0.19770653086363943, 0.2013583729532108, 0.20210157193565426, 0.2055483036583592, 0.2120592533223543, 0.20789367116380608, 0.19194591488113977, 0.19774616801824973, 0.18545679358942435, 0.1939589611623308, 0.16317018423427276, 0.18156000499103953, 0.17418779380624005, 0.19007234958777175, 0.16639798503105563, 0.1893131590187892, 0.1686725846803443, 0.17023293311013044, 0.17213995400900717, 0.17542140189516753, 0.1771963044977134, 0.4839969877902699, 0.6009308414757439, 0.18999351316992918, 0.530935967825332, 0.13792153722266465, 0.3734771170240567, 0.1516949287463194, 0.22009816070813126, 0.19199836920716684, 0.32493515667382733, 0.5900271304582425, 0.507310238580846, 0.44739320183756404, 0.15319812408756095, 0.44509067425564286, 0.19222562020981782, 0.17754667663510737, 0.19558958724394138, 0.19560938891866686, 0.16942196945566956, 0.1632401743308416, 0.18854457962518, 0.18399252901189111, 0.17576635256430895, 0.1798781961675131, 0.07443908089959572, 0.08092541002146447, 0.07122686837473025, 0.06722958292022208, 0.08348623378316611, 0.06856320221614243, 0.08109639864250873, 0.07278327672841112, 0.06710790365965547]}, "mutation_prompt": null}
{"id": "b980d7a2-b6fc-4d33-9d7f-0a0addd2af05", "solution": "import numpy as np\n\nclass OptimizedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.7\n        self.CR = 0.85\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def opposition_based_learning(self, individual):\n        return self.lower_bound + self.upper_bound - individual\n\n    def local_search(self, x, func):\n        trial = x + np.random.uniform(-0.05, 0.05, self.dim)\n        trial = np.clip(trial, self.lower_bound, self.upper_bound)\n        return trial if func(trial) < func(x) else x\n\n    def mutate(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = indices\n        while a == idx:\n            a = np.random.choice(self.population_size)  # Ensure a != idx\n        diversity_factor = np.exp(-np.std(population, axis=0))\n        mutant = population[a] + self.F * diversity_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.CR\n        return np.where(cross_points, mutant, target)\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.empty(self.population_size)\n        for i in range(self.population_size):\n            fitness[i] = func(population[i])\n        budget_used = self.population_size\n\n        while budget_used < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(population, i)\n                trial = self.crossover(population[i], mutant)\n                trial = self.local_search(trial, func)\n\n                trial_fitness = func(trial)\n                budget_used += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if budget_used < self.budget and np.random.rand() < 0.5:\n                    opposite = self.opposition_based_learning(population[i])\n                    opposite_fitness = func(opposite)\n                    budget_used += 1\n                    if opposite_fitness < fitness[i]:\n                        population[i] = opposite\n                        fitness[i] = opposite_fitness\n\n                if budget_used >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "OptimizedAdaptiveDifferentialEvolution", "description": "Optimized memory management and adaptive learning rates in differential evolution for enhanced performance.", "configspace": "", "generation": 64, "fitness": 0.1973663705699234, "feedback": "The algorithm OptimizedAdaptiveDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.15.", "error": "", "parent_id": "1b6bd6d8-9eb2-40c7-820b-fc972c59a035", "metadata": {"aucs": [0.41638628740398986, 0.44087325269180033, 0.4148527099840317, 0.4494462269351437, 0.45193254970586993, 0.4285732387966792, 0.44233668370072377, 0.4045058513435973, 0.40706917071791804, 0.1562348237788359, 0.15192398214247638, 0.19183830873033048, 0.11381342957337981, 0.18253295699273964, 0.14272737290371573, 0.08846635899383604, 0.13486940581886375, 0.16489947751109757, 0.09317325606414628, 0.10696667839175555, 0.10276607628314649, 0.1066556397268118, 0.10133276222620391, 0.10134781381068114, 0.10159155141906873, 0.0901995645432998, 0.10509441139984699, 0.06806531814270966, 0.07894718250219235, 0.08788733843608554, 0.09294185312740444, 0.07705995206656369, 0.07368205419953333, 0.10419076658204407, 0.0896965987353242, 0.08815952290802143, 0.6059931965801326, 0.7914365707933382, 0.5760794573600078, 0.561713682476779, 0.7086335664820342, 0.6452585638163797, 0.6959416057843615, 0.6355955630595329, 0.6636100793953132, 0.19221989496815872, 0.10332686353816078, 0.18837420523322868, 0.13842586244140254, 0.17270548708936606, 0.16168346446808646, 0.1982730526521349, 0.14187849143274145, 0.19291431839998419, 0.3149695205576962, 0.2595867246075664, 0.21468094573007523, 0.39691674293502, 0.28011783803112544, 0.32077562845532637, 0.2335122721580145, 0.19562231692521959, 0.25279105680017966, 0.14364206278757863, 0.15889426199008472, 0.11539101729590606, 0.1606552380129358, 0.15120944018170634, 0.12507950469305396, 0.17243158632006794, 0.1420475226452298, 0.13407427344722023, 0.16145755211215873, 0.13148714690624996, 0.20276949839399028, 0.14874837478690806, 0.1182266779603347, 0.14557943932470718, 0.19015554815967017, 0.08532572534241134, 0.14417958986613888, 0.03217636608843555, 0.0007379536527092334, 0.0025431148211513266, 0.016582066015109587, 0.000941492678347311, 0.03791076508601021, 0.0003448465572233328, 0.008166758575097632, 0.042413233778395454, 0.07351655254502854, 0.062221920608671266, 0.0517168496793472, 0.0675980580459824, 0.03327085320180834, 0.03201560615170751, 0.06865884810948752, 0.05518686854318111, 0.06681685261149328, 9.999999999998899e-05, 0.0061690263580926885, 0.00731791371156576, 0.005433194974177602, 0.0036315412884874165, 0.0038959490571085498, 0.00012958357094705608, 0.020460540404770966, 0.0002662276605875924, 0.10605736351777773, 0.0845013950908653, 0.10399473660424041, 0.07649102149896103, 0.091700765522166, 0.05537006946474632, 0.10560415356716235, 0.11431948078903953, 0.10187288260477412, 0.38469084306538937, 0.4058310578234404, 0.40124745946048834, 0.38697165722643045, 0.36736331399944766, 0.3697234589914331, 0.4337822383368265, 0.39045608204548365, 0.4058754844285949, 0.085379159284794, 0.08450770620605164, 0.07548395136855779, 0.09230646472905557, 0.08201319149952246, 0.09860571416665331, 0.09122061545389315, 0.09209619751079823, 0.08159151180087443, 0.23687293759081463, 0.2083543049023061, 0.14983314558672878, 0.2868310036036179, 0.2659690907494805, 0.1777716472085824, 0.1870720260171711, 0.2234160237913484, 0.18732756527798144, 0.19656465635664966, 0.19553812608002585, 0.25931850956357005, 0.24229846332452087, 0.2250174639885929, 0.28010161441964443, 0.2688585824659956, 0.2810649591037214, 0.26414899044929696, 0.1621107183380136, 0.20181336837685215, 0.19339056335943283, 0.20086067313704414, 0.1538944901491306, 0.21056230743393967, 0.19871728154861967, 0.21489953287856134, 0.19770653086363943, 0.2013583729532108, 0.20210157193565426, 0.2055483036583592, 0.2120592533223543, 0.20789367116380608, 0.19194591488113977, 0.19774616801824973, 0.18545679358942435, 0.1939589611623308, 0.16317018423427276, 0.18156000499103953, 0.17418779380624005, 0.19007234958777175, 0.16639798503105563, 0.1893131590187892, 0.1686725846803443, 0.17023293311013044, 0.17213995400900717, 0.17542140189516753, 0.1771963044977134, 0.4839969877902699, 0.6009308414757439, 0.18999351316992918, 0.530935967825332, 0.13792153722266465, 0.3734771170240567, 0.1516949287463194, 0.22009816070813126, 0.19199836920716684, 0.32493515667382733, 0.5900271304582425, 0.507310238580846, 0.44739320183756404, 0.15319812408756095, 0.44509067425564286, 0.19222562020981782, 0.17754667663510737, 0.19558958724394138, 0.19560938891866686, 0.16942196945566956, 0.1632401743308416, 0.18854457962518, 0.18399252901189111, 0.17576635256430895, 0.1798781961675131, 0.07443908089959572, 0.08092541002146447, 0.07122686837473025, 0.06722958292022208, 0.08348623378316611, 0.06856320221614243, 0.08109639864250873, 0.07278327672841112, 0.06710790365965547]}, "mutation_prompt": null}
{"id": "4f1946d7-570a-4740-9386-9c92f7172e53", "solution": "import numpy as np\n\nclass OptimizedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.7\n        self.CR = 0.85\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def opposition_based_learning(self, population):\n        return self.lower_bound + self.upper_bound - population\n\n    def local_search(self, x, func):\n        trial = x + np.random.uniform(-0.05, 0.05, self.dim)\n        trial = np.clip(trial, self.lower_bound, self.upper_bound)\n        return trial if func(trial) < func(x) else x\n\n    def mutate(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = indices\n        while a == idx:\n            a = np.random.choice(self.population_size)  # Ensure a != idx\n        diversity_factor = np.exp(-np.std(population, axis=0))\n        mutant = population[a] + self.F * diversity_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.CR\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        budget_used = self.population_size\n\n        while budget_used < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(population, i)\n                trial = self.crossover(population[i], mutant)\n                trial = self.local_search(trial, func)\n\n                trial_fitness = func(trial)\n                budget_used += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if budget_used < self.budget and np.random.rand() < 0.5:\n                    opposite = self.opposition_based_learning(population[i])\n                    opposite_fitness = func(opposite)\n                    budget_used += 1\n                    if opposite_fitness < fitness[i]:\n                        population[i] = opposite\n                        fitness[i] = opposite_fitness\n\n                if budget_used >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "OptimizedAdaptiveDifferentialEvolution", "description": "Enhanced diversity control and adaptive mutation scales in differential evolution for improved convergence.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b6bd6d8-9eb2-40c7-820b-fc972c59a035", "metadata": {"aucs": [0.41638628740398986, 0.44087325269180033, 0.4148527099840317, 0.4494462269351437, 0.45193254970586993, 0.4285732387966792, 0.44233668370072377, 0.4045058513435973, 0.40706917071791804, 0.1562348237788359, 0.15192398214247638, 0.19183830873033048, 0.11381342957337981, 0.18253295699273964, 0.14272737290371573, 0.08846635899383604, 0.13486940581886375, 0.16489947751109757, 0.09317325606414628, 0.10696667839175555, 0.10276607628314649, 0.1066556397268118, 0.10133276222620391, 0.10134781381068114, 0.10159155141906873, 0.0901995645432998, 0.10509441139984699, 0.06806531814270966, 0.07894718250219235, 0.08788733843608554, 0.09294185312740444, 0.07705995206656369, 0.07368205419953333, 0.10419076658204407, 0.0896965987353242, 0.08815952290802143, 0.6059931965801326, 0.7914365707933382, 0.5760794573600078, 0.561713682476779, 0.7086335664820342, 0.6452585638163797, 0.6959416057843615, 0.6355955630595329, 0.6636100793953132, 0.19221989496815872, 0.10332686353816078, 0.18837420523322868, 0.13842586244140254, 0.17270548708936606, 0.16168346446808646, 0.1982730526521349, 0.14187849143274145, 0.19291431839998419, 0.3149695205576962, 0.2595867246075664, 0.21468094573007523, 0.39691674293502, 0.28011783803112544, 0.32077562845532637, 0.2335122721580145, 0.19562231692521959, 0.25279105680017966, 0.14364206278757863, 0.15889426199008472, 0.11539101729590606, 0.1606552380129358, 0.15120944018170634, 0.12507950469305396, 0.17243158632006794, 0.1420475226452298, 0.13407427344722023, 0.16145755211215873, 0.13148714690624996, 0.20276949839399028, 0.14874837478690806, 0.1182266779603347, 0.14557943932470718, 0.19015554815967017, 0.08532572534241134, 0.14417958986613888, 0.03217636608843555, 0.0007379536527092334, 0.0025431148211513266, 0.016582066015109587, 0.000941492678347311, 0.03791076508601021, 0.0003448465572233328, 0.008166758575097632, 0.042413233778395454, 0.07351655254502854, 0.062221920608671266, 0.0517168496793472, 0.0675980580459824, 0.03327085320180834, 0.03201560615170751, 0.06865884810948752, 0.05518686854318111, 0.06681685261149328, 9.999999999998899e-05, 0.0061690263580926885, 0.00731791371156576, 0.005433194974177602, 0.0036315412884874165, 0.0038959490571085498, 0.00012958357094705608, 0.020460540404770966, 0.0002662276605875924, 0.10605736351777773, 0.0845013950908653, 0.10399473660424041, 0.07649102149896103, 0.091700765522166, 0.05537006946474632, 0.10560415356716235, 0.11431948078903953, 0.10187288260477412, 0.38469084306538937, 0.4058310578234404, 0.40124745946048834, 0.38697165722643045, 0.36736331399944766, 0.3697234589914331, 0.4337822383368265, 0.39045608204548365, 0.4058754844285949, 0.085379159284794, 0.08450770620605164, 0.07548395136855779, 0.09230646472905557, 0.08201319149952246, 0.09860571416665331, 0.09122061545389315, 0.09209619751079823, 0.08159151180087443, 0.23687293759081463, 0.2083543049023061, 0.14983314558672878, 0.2868310036036179, 0.2659690907494805, 0.1777716472085824, 0.1870720260171711, 0.2234160237913484, 0.18732756527798144, 0.19656465635664966, 0.19553812608002585, 0.25931850956357005, 0.24229846332452087, 0.2250174639885929, 0.28010161441964443, 0.2688585824659956, 0.2810649591037214, 0.26414899044929696, 0.1621107183380136, 0.20181336837685215, 0.19339056335943283, 0.20086067313704414, 0.1538944901491306, 0.21056230743393967, 0.19871728154861967, 0.21489953287856134, 0.19770653086363943, 0.2013583729532108, 0.20210157193565426, 0.2055483036583592, 0.2120592533223543, 0.20789367116380608, 0.19194591488113977, 0.19774616801824973, 0.18545679358942435, 0.1939589611623308, 0.16317018423427276, 0.18156000499103953, 0.17418779380624005, 0.19007234958777175, 0.16639798503105563, 0.1893131590187892, 0.1686725846803443, 0.17023293311013044, 0.17213995400900717, 0.17542140189516753, 0.1771963044977134, 0.4839969877902699, 0.6009308414757439, 0.18999351316992918, 0.530935967825332, 0.13792153722266465, 0.3734771170240567, 0.1516949287463194, 0.22009816070813126, 0.19199836920716684, 0.32493515667382733, 0.5900271304582425, 0.507310238580846, 0.44739320183756404, 0.15319812408756095, 0.44509067425564286, 0.19222562020981782, 0.17754667663510737, 0.19558958724394138, 0.19560938891866686, 0.16942196945566956, 0.1632401743308416, 0.18854457962518, 0.18399252901189111, 0.17576635256430895, 0.1798781961675131, 0.07443908089959572, 0.08092541002146447, 0.07122686837473025, 0.06722958292022208, 0.08348623378316611, 0.06856320221614243, 0.08109639864250873, 0.07278327672841112, 0.06710790365965547]}, "mutation_prompt": null}
{"id": "dfb8c95c-8f52-443a-b430-cdb8f5b75866", "solution": "import numpy as np\n\nclass OptimizedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.7\n        self.CR = 0.85\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def opposition_based_learning(self, population):\n        return self.lower_bound + self.upper_bound - population\n\n    def local_search(self, x, func):\n        trial = x + np.random.uniform(-0.05, 0.05, self.dim)\n        trial = np.clip(trial, self.lower_bound, self.upper_bound)\n        return trial if func(trial) < func(x) else x\n\n    def mutate(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = indices\n        while a == idx:\n            a = np.random.choice(self.population_size)  # Ensure a != idx\n        diversity_factor = np.exp(-np.std(population, axis=0))\n        mutant = population[a] + self.F * diversity_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.CR\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        budget_used = self.population_size\n\n        while budget_used < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(population, i)\n                trial = self.crossover(population[i], mutant)\n                trial = self.local_search(trial, func)\n\n                trial_fitness = func(trial)\n                budget_used += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if budget_used < self.budget and np.random.rand() < 0.5:\n                    opposite = self.opposition_based_learning(population[i])\n                    opposite_fitness = func(opposite)\n                    budget_used += 1\n                    if opposite_fitness < fitness[i]:\n                        population[i] = opposite\n                        fitness[i] = opposite_fitness\n\n                if budget_used >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "OptimizedAdaptiveDifferentialEvolution", "description": "Enhanced diversity control and adaptive mutation scales in differential evolution for improved convergence.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b6bd6d8-9eb2-40c7-820b-fc972c59a035", "metadata": {"aucs": [0.41638628740398986, 0.44087325269180033, 0.4148527099840317, 0.4494462269351437, 0.45193254970586993, 0.4285732387966792, 0.44233668370072377, 0.4045058513435973, 0.40706917071791804, 0.1562348237788359, 0.15192398214247638, 0.19183830873033048, 0.11381342957337981, 0.18253295699273964, 0.14272737290371573, 0.08846635899383604, 0.13486940581886375, 0.16489947751109757, 0.09317325606414628, 0.10696667839175555, 0.10276607628314649, 0.1066556397268118, 0.10133276222620391, 0.10134781381068114, 0.10159155141906873, 0.0901995645432998, 0.10509441139984699, 0.06806531814270966, 0.07894718250219235, 0.08788733843608554, 0.09294185312740444, 0.07705995206656369, 0.07368205419953333, 0.10419076658204407, 0.0896965987353242, 0.08815952290802143, 0.6059931965801326, 0.7914365707933382, 0.5760794573600078, 0.561713682476779, 0.7086335664820342, 0.6452585638163797, 0.6959416057843615, 0.6355955630595329, 0.6636100793953132, 0.19221989496815872, 0.10332686353816078, 0.18837420523322868, 0.13842586244140254, 0.17270548708936606, 0.16168346446808646, 0.1982730526521349, 0.14187849143274145, 0.19291431839998419, 0.3149695205576962, 0.2595867246075664, 0.21468094573007523, 0.39691674293502, 0.28011783803112544, 0.32077562845532637, 0.2335122721580145, 0.19562231692521959, 0.25279105680017966, 0.14364206278757863, 0.15889426199008472, 0.11539101729590606, 0.1606552380129358, 0.15120944018170634, 0.12507950469305396, 0.17243158632006794, 0.1420475226452298, 0.13407427344722023, 0.16145755211215873, 0.13148714690624996, 0.20276949839399028, 0.14874837478690806, 0.1182266779603347, 0.14557943932470718, 0.19015554815967017, 0.08532572534241134, 0.14417958986613888, 0.03217636608843555, 0.0007379536527092334, 0.0025431148211513266, 0.016582066015109587, 0.000941492678347311, 0.03791076508601021, 0.0003448465572233328, 0.008166758575097632, 0.042413233778395454, 0.07351655254502854, 0.062221920608671266, 0.0517168496793472, 0.0675980580459824, 0.03327085320180834, 0.03201560615170751, 0.06865884810948752, 0.05518686854318111, 0.06681685261149328, 9.999999999998899e-05, 0.0061690263580926885, 0.00731791371156576, 0.005433194974177602, 0.0036315412884874165, 0.0038959490571085498, 0.00012958357094705608, 0.020460540404770966, 0.0002662276605875924, 0.10605736351777773, 0.0845013950908653, 0.10399473660424041, 0.07649102149896103, 0.091700765522166, 0.05537006946474632, 0.10560415356716235, 0.11431948078903953, 0.10187288260477412, 0.38469084306538937, 0.4058310578234404, 0.40124745946048834, 0.38697165722643045, 0.36736331399944766, 0.3697234589914331, 0.4337822383368265, 0.39045608204548365, 0.4058754844285949, 0.085379159284794, 0.08450770620605164, 0.07548395136855779, 0.09230646472905557, 0.08201319149952246, 0.09860571416665331, 0.09122061545389315, 0.09209619751079823, 0.08159151180087443, 0.23687293759081463, 0.2083543049023061, 0.14983314558672878, 0.2868310036036179, 0.2659690907494805, 0.1777716472085824, 0.1870720260171711, 0.2234160237913484, 0.18732756527798144, 0.19656465635664966, 0.19553812608002585, 0.25931850956357005, 0.24229846332452087, 0.2250174639885929, 0.28010161441964443, 0.2688585824659956, 0.2810649591037214, 0.26414899044929696, 0.1621107183380136, 0.20181336837685215, 0.19339056335943283, 0.20086067313704414, 0.1538944901491306, 0.21056230743393967, 0.19871728154861967, 0.21489953287856134, 0.19770653086363943, 0.2013583729532108, 0.20210157193565426, 0.2055483036583592, 0.2120592533223543, 0.20789367116380608, 0.19194591488113977, 0.19774616801824973, 0.18545679358942435, 0.1939589611623308, 0.16317018423427276, 0.18156000499103953, 0.17418779380624005, 0.19007234958777175, 0.16639798503105563, 0.1893131590187892, 0.1686725846803443, 0.17023293311013044, 0.17213995400900717, 0.17542140189516753, 0.1771963044977134, 0.4839969877902699, 0.6009308414757439, 0.18999351316992918, 0.530935967825332, 0.13792153722266465, 0.3734771170240567, 0.1516949287463194, 0.22009816070813126, 0.19199836920716684, 0.32493515667382733, 0.5900271304582425, 0.507310238580846, 0.44739320183756404, 0.15319812408756095, 0.44509067425564286, 0.19222562020981782, 0.17754667663510737, 0.19558958724394138, 0.19560938891866686, 0.16942196945566956, 0.1632401743308416, 0.18854457962518, 0.18399252901189111, 0.17576635256430895, 0.1798781961675131, 0.07443908089959572, 0.08092541002146447, 0.07122686837473025, 0.06722958292022208, 0.08348623378316611, 0.06856320221614243, 0.08109639864250873, 0.07278327672841112, 0.06710790365965547]}, "mutation_prompt": null}
{"id": "2561981a-e3a2-4eb7-8e0b-d28cbcc50c97", "solution": "import numpy as np\n\nclass OptimizedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.7\n        self.CR = 0.85\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def opposition_based_learning(self, population):\n        return self.lower_bound + self.upper_bound - population\n\n    def local_search(self, x, func):\n        trial = x + np.random.uniform(-0.05, 0.05, self.dim)\n        trial = np.clip(trial, self.lower_bound, self.upper_bound)\n        return trial if func(trial) < func(x) else x\n\n    def mutate(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = indices\n        while a == idx:\n            a = np.random.choice(self.population_size)  # Ensure a != idx\n        diversity_factor = np.exp(-np.std(population, axis=0))\n        mutant = population[a] + self.F * diversity_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.CR\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        budget_used = self.population_size\n\n        while budget_used < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(population, i)\n                trial = self.crossover(population[i], mutant)\n                trial = self.local_search(trial, func)\n\n                trial_fitness = func(trial)\n                budget_used += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if budget_used < self.budget and np.random.rand() < 0.5:\n                    opposite = self.opposition_based_learning(population[i])\n                    opposite_fitness = func(opposite)\n                    budget_used += 1\n                    if opposite_fitness < fitness[i]:\n                        population[i] = opposite\n                        fitness[i] = opposite_fitness\n\n                if budget_used >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "OptimizedAdaptiveDifferentialEvolution", "description": "Enhanced diversity control and adaptive mutation scales in differential evolution for improved convergence.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b6bd6d8-9eb2-40c7-820b-fc972c59a035", "metadata": {"aucs": [0.41638628740398986, 0.44087325269180033, 0.4148527099840317, 0.4494462269351437, 0.45193254970586993, 0.4285732387966792, 0.44233668370072377, 0.4045058513435973, 0.40706917071791804, 0.1562348237788359, 0.15192398214247638, 0.19183830873033048, 0.11381342957337981, 0.18253295699273964, 0.14272737290371573, 0.08846635899383604, 0.13486940581886375, 0.16489947751109757, 0.09317325606414628, 0.10696667839175555, 0.10276607628314649, 0.1066556397268118, 0.10133276222620391, 0.10134781381068114, 0.10159155141906873, 0.0901995645432998, 0.10509441139984699, 0.06806531814270966, 0.07894718250219235, 0.08788733843608554, 0.09294185312740444, 0.07705995206656369, 0.07368205419953333, 0.10419076658204407, 0.0896965987353242, 0.08815952290802143, 0.6059931965801326, 0.7914365707933382, 0.5760794573600078, 0.561713682476779, 0.7086335664820342, 0.6452585638163797, 0.6959416057843615, 0.6355955630595329, 0.6636100793953132, 0.19221989496815872, 0.10332686353816078, 0.18837420523322868, 0.13842586244140254, 0.17270548708936606, 0.16168346446808646, 0.1982730526521349, 0.14187849143274145, 0.19291431839998419, 0.3149695205576962, 0.2595867246075664, 0.21468094573007523, 0.39691674293502, 0.28011783803112544, 0.32077562845532637, 0.2335122721580145, 0.19562231692521959, 0.25279105680017966, 0.14364206278757863, 0.15889426199008472, 0.11539101729590606, 0.1606552380129358, 0.15120944018170634, 0.12507950469305396, 0.17243158632006794, 0.1420475226452298, 0.13407427344722023, 0.16145755211215873, 0.13148714690624996, 0.20276949839399028, 0.14874837478690806, 0.1182266779603347, 0.14557943932470718, 0.19015554815967017, 0.08532572534241134, 0.14417958986613888, 0.03217636608843555, 0.0007379536527092334, 0.0025431148211513266, 0.016582066015109587, 0.000941492678347311, 0.03791076508601021, 0.0003448465572233328, 0.008166758575097632, 0.042413233778395454, 0.07351655254502854, 0.062221920608671266, 0.0517168496793472, 0.0675980580459824, 0.03327085320180834, 0.03201560615170751, 0.06865884810948752, 0.05518686854318111, 0.06681685261149328, 9.999999999998899e-05, 0.0061690263580926885, 0.00731791371156576, 0.005433194974177602, 0.0036315412884874165, 0.0038959490571085498, 0.00012958357094705608, 0.020460540404770966, 0.0002662276605875924, 0.10605736351777773, 0.0845013950908653, 0.10399473660424041, 0.07649102149896103, 0.091700765522166, 0.05537006946474632, 0.10560415356716235, 0.11431948078903953, 0.10187288260477412, 0.38469084306538937, 0.4058310578234404, 0.40124745946048834, 0.38697165722643045, 0.36736331399944766, 0.3697234589914331, 0.4337822383368265, 0.39045608204548365, 0.4058754844285949, 0.085379159284794, 0.08450770620605164, 0.07548395136855779, 0.09230646472905557, 0.08201319149952246, 0.09860571416665331, 0.09122061545389315, 0.09209619751079823, 0.08159151180087443, 0.23687293759081463, 0.2083543049023061, 0.14983314558672878, 0.2868310036036179, 0.2659690907494805, 0.1777716472085824, 0.1870720260171711, 0.2234160237913484, 0.18732756527798144, 0.19656465635664966, 0.19553812608002585, 0.25931850956357005, 0.24229846332452087, 0.2250174639885929, 0.28010161441964443, 0.2688585824659956, 0.2810649591037214, 0.26414899044929696, 0.1621107183380136, 0.20181336837685215, 0.19339056335943283, 0.20086067313704414, 0.1538944901491306, 0.21056230743393967, 0.19871728154861967, 0.21489953287856134, 0.19770653086363943, 0.2013583729532108, 0.20210157193565426, 0.2055483036583592, 0.2120592533223543, 0.20789367116380608, 0.19194591488113977, 0.19774616801824973, 0.18545679358942435, 0.1939589611623308, 0.16317018423427276, 0.18156000499103953, 0.17418779380624005, 0.19007234958777175, 0.16639798503105563, 0.1893131590187892, 0.1686725846803443, 0.17023293311013044, 0.17213995400900717, 0.17542140189516753, 0.1771963044977134, 0.4839969877902699, 0.6009308414757439, 0.18999351316992918, 0.530935967825332, 0.13792153722266465, 0.3734771170240567, 0.1516949287463194, 0.22009816070813126, 0.19199836920716684, 0.32493515667382733, 0.5900271304582425, 0.507310238580846, 0.44739320183756404, 0.15319812408756095, 0.44509067425564286, 0.19222562020981782, 0.17754667663510737, 0.19558958724394138, 0.19560938891866686, 0.16942196945566956, 0.1632401743308416, 0.18854457962518, 0.18399252901189111, 0.17576635256430895, 0.1798781961675131, 0.07443908089959572, 0.08092541002146447, 0.07122686837473025, 0.06722958292022208, 0.08348623378316611, 0.06856320221614243, 0.08109639864250873, 0.07278327672841112, 0.06710790365965547]}, "mutation_prompt": null}
{"id": "3a8d66c8-04f2-4951-9d89-d02eaa1db597", "solution": "import numpy as np\n\nclass OptimizedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.75  # Adjusted mutation factor\n        self.CR = 0.85\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def opposition_based_learning(self, population):\n        return self.lower_bound + self.upper_bound - population\n\n    def local_search(self, x, func):\n        trial = x + np.random.uniform(-0.05, 0.05, self.dim)\n        trial = np.clip(trial, self.lower_bound, self.upper_bound)\n        return trial if func(trial) < func(x) else x\n\n    def mutate(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = indices\n        while a == idx:\n            a = np.random.choice(self.population_size)\n        diversity_factor = np.exp(-np.std(population))\n        mutant = population[a] + self.F * diversity_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.CR\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        budget_used = self.population_size\n\n        while budget_used < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(population, i)\n                trial = self.crossover(population[i], mutant)\n                trial = self.local_search(trial, func)\n\n                trial_fitness = func(trial)\n                budget_used += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if budget_used < self.budget and np.random.rand() < 0.5:\n                    opposite = self.opposition_based_learning(population[i])\n                    opposite_fitness = func(opposite)\n                    budget_used += 1\n                    if opposite_fitness < fitness[i]:\n                        population[i] = opposite\n                        fitness[i] = opposite_fitness\n\n                if budget_used >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "OptimizedAdaptiveDifferentialEvolution", "description": "Improved population diversity and selection efficiency in differential evolution using strategic updates.", "configspace": "", "generation": 68, "fitness": 0.16505237598804823, "feedback": "The algorithm OptimizedAdaptiveDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.11.", "error": "", "parent_id": "1b6bd6d8-9eb2-40c7-820b-fc972c59a035", "metadata": {"aucs": [0.41965969838857586, 0.5157778054069732, 0.5343692920084104, 0.46778325816422694, 0.4115427693037841, 0.384365433727183, 0.5394653999004847, 0.41650686868452946, 0.43144522414934594, 0.20886411123605497, 0.03635090987545975, 9.999999999998899e-05, 0.04456906047761344, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05333356852267168, 0.07659500256770169, 0.12346102001387027, 0.08091135062165034, 0.12671391135644572, 0.10026963064582872, 0.07821607488687787, 0.1330207357933081, 0.1441824368422665, 0.13849678106804053, 0.13286331000266305, 0.0798742967476832, 0.10241086418554968, 0.10886219979291367, 0.17234202647919972, 0.08953277820716776, 0.10971732085028985, 0.11205723196633322, 0.10171853873501846, 0.10440830193873207, 0.14903520451068453, 0.135250280723216, 0.1292729817592061, 0.09757195118201367, 0.14606419972529527, 0.1118549755061451, 0.14088245801638732, 0.16096706989537657, 0.12563267235155107, 0.12537270526464706, 0.017877414948711312, 0.07322378271525798, 0.07908809902355529, 0.05519048351335565, 0.12464225533734519, 0.13730318902385863, 0.0572429567620204, 0.13392011934723214, 0.19347884184695463, 0.21062391961326032, 0.4167075732418378, 0.26477226745629434, 0.25678172772212515, 0.15333038836821966, 0.10302085743228295, 0.20917508355607695, 0.20743267486371197, 0.11510098729685214, 0.19802536935367854, 0.12401592936550465, 0.271427217380651, 0.08679761889613058, 0.15974173747240328, 0.2880972184550411, 0.1733326954263512, 0.11650681893353954, 0.12651029913155254, 0.14195705274303327, 0.2334728067610241, 0.20609677745996946, 0.11379389893696112, 0.15757524053066885, 0.17887800556529432, 0.11315267308202981, 0.1469923198516424, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03302897232916546, 0.02837124996056828, 9.999999999998899e-05, 0.06163500432444757, 0.10956210778351305, 0.0893446347843957, 0.09482980876314906, 0.056045965857634106, 0.05812790323914452, 0.10139948339801064, 0.10781477853302335, 0.06234472867444496, 0.07322375677417203, 0.03979531664764069, 0.009840569868307059, 0.02098271812629282, 0.021695679134454804, 0.0349622666919428, 0.04520048282159295, 0.07924141463241763, 0.05046346529712176, 0.05090435236248647, 0.1379644818358502, 0.0379811660177678, 0.06591183968301284, 0.022003915758501136, 0.026449871196595587, 0.01326848316045448, 0.08649169911191146, 0.09984250126084493, 0.06795833817784369, 0.34195972285641696, 0.3446770088193146, 0.42147701977195484, 0.33251386491590695, 0.3729826894411227, 0.19611618864426483, 0.44710794854455893, 0.2947585693123135, 0.44131073310702573, 0.0805310511416496, 0.0725186579701731, 0.09275897968911107, 0.1060747847677268, 0.12245026938814574, 0.09593037220764922, 0.1334125973985414, 0.0769834048511282, 0.07916222743145207, 0.17155028593877653, 0.24709827824902464, 0.19794665034865222, 0.2301781841875179, 0.23712704328541712, 0.21302442554941736, 0.24034201547787948, 0.1897767195514457, 0.16891593608837252, 0.19868416611625372, 0.21423108959415005, 0.30448558039004825, 0.26463133381241044, 0.25920686181542796, 0.294990739832102, 0.23043425141903495, 0.26269153866055894, 0.26091603771771854, 0.18192473065497838, 0.2336750323709338, 0.22943918673570884, 0.17663600604983454, 0.14664088847298062, 0.2542078490770068, 0.1566505110130474, 0.2009103679842359, 0.22696975537595965, 0.19908667630267463, 0.18236396908583863, 0.2157022502063375, 0.22657137975090513, 0.1909835468573179, 0.19521003034611262, 0.2000445974393158, 0.19623206868562526, 0.18759393149347126, 0.17995223410415007, 0.18414114826145433, 0.1920889476998805, 0.19629652798526154, 0.1822267068171285, 0.20939976667781268, 0.18035133728824748, 0.18783400017620722, 0.18308746249636798, 0.1671252696485993, 0.15953955961191735, 0.24532510564723486, 0.18469835007095048, 0.19029899358135594, 0.24803072689952244, 0.13713050175641894, 0.1581588689052844, 0.15189878527758405, 0.37168847225763013, 0.1506967569950981, 0.24105376272879153, 0.40982307311680166, 0.38150212154062835, 0.36992389689685146, 0.15715266749558543, 0.5808944536265523, 0.15990985039894423, 0.18661612845059294, 0.17706142727661667, 0.16987158382049383, 0.17216818602955464, 0.17338227181507937, 0.1849551654972652, 0.17766280372860788, 0.17803022025847315, 0.17623560396392857, 0.07676376241538396, 0.08715449129395669, 0.07665352361987388, 0.08575005646090739, 0.07411669633592277, 0.0987914765974931, 0.07247400012617122, 0.07577290191933972, 0.0732585905490345]}, "mutation_prompt": null}
{"id": "fdac8e79-1952-4862-ab3f-8882f88998d5", "solution": "import numpy as np\n\nclass OptimizedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.7\n        self.CR = 0.85\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def opposition_based_learning(self, population):\n        return self.lower_bound + self.upper_bound - population\n\n    def local_search(self, x, func):\n        trial = x + np.random.uniform(-0.05, 0.05, self.dim)\n        trial = np.clip(trial, self.lower_bound, self.upper_bound)\n        return trial if func(trial) < func(x) else x\n\n    def mutate(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = indices\n        while a == idx:\n            a = np.random.choice(self.population_size)  # Ensure a != idx\n        diversity_factor = np.exp(-np.std(population, axis=0))\n        mutant = population[a] + self.F * diversity_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.CR\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        budget_used = self.population_size\n\n        while budget_used < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(population, i)\n                trial = self.crossover(population[i], mutant)\n                trial = self.local_search(trial, func)\n\n                trial_fitness = func(trial)\n                budget_used += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if budget_used < self.budget and np.random.rand() < 0.5:\n                    opposite = self.opposition_based_learning(population[i])\n                    opposite_fitness = func(opposite)\n                    budget_used += 1\n                    if opposite_fitness < fitness[i]:\n                        population[i] = opposite\n                        fitness[i] = opposite_fitness\n\n                if budget_used >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "OptimizedAdaptiveDifferentialEvolution", "description": "Enhanced diversity control and adaptive mutation scales in differential evolution for improved convergence.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b6bd6d8-9eb2-40c7-820b-fc972c59a035", "metadata": {"aucs": [0.41638628740398986, 0.44087325269180033, 0.4148527099840317, 0.4494462269351437, 0.45193254970586993, 0.4285732387966792, 0.44233668370072377, 0.4045058513435973, 0.40706917071791804, 0.1562348237788359, 0.15192398214247638, 0.19183830873033048, 0.11381342957337981, 0.18253295699273964, 0.14272737290371573, 0.08846635899383604, 0.13486940581886375, 0.16489947751109757, 0.09317325606414628, 0.10696667839175555, 0.10276607628314649, 0.1066556397268118, 0.10133276222620391, 0.10134781381068114, 0.10159155141906873, 0.0901995645432998, 0.10509441139984699, 0.06806531814270966, 0.07894718250219235, 0.08788733843608554, 0.09294185312740444, 0.07705995206656369, 0.07368205419953333, 0.10419076658204407, 0.0896965987353242, 0.08815952290802143, 0.6059931965801326, 0.7914365707933382, 0.5760794573600078, 0.561713682476779, 0.7086335664820342, 0.6452585638163797, 0.6959416057843615, 0.6355955630595329, 0.6636100793953132, 0.19221989496815872, 0.10332686353816078, 0.18837420523322868, 0.13842586244140254, 0.17270548708936606, 0.16168346446808646, 0.1982730526521349, 0.14187849143274145, 0.19291431839998419, 0.3149695205576962, 0.2595867246075664, 0.21468094573007523, 0.39691674293502, 0.28011783803112544, 0.32077562845532637, 0.2335122721580145, 0.19562231692521959, 0.25279105680017966, 0.14364206278757863, 0.15889426199008472, 0.11539101729590606, 0.1606552380129358, 0.15120944018170634, 0.12507950469305396, 0.17243158632006794, 0.1420475226452298, 0.13407427344722023, 0.16145755211215873, 0.13148714690624996, 0.20276949839399028, 0.14874837478690806, 0.1182266779603347, 0.14557943932470718, 0.19015554815967017, 0.08532572534241134, 0.14417958986613888, 0.03217636608843555, 0.0007379536527092334, 0.0025431148211513266, 0.016582066015109587, 0.000941492678347311, 0.03791076508601021, 0.0003448465572233328, 0.008166758575097632, 0.042413233778395454, 0.07351655254502854, 0.062221920608671266, 0.0517168496793472, 0.0675980580459824, 0.03327085320180834, 0.03201560615170751, 0.06865884810948752, 0.05518686854318111, 0.06681685261149328, 9.999999999998899e-05, 0.0061690263580926885, 0.00731791371156576, 0.005433194974177602, 0.0036315412884874165, 0.0038959490571085498, 0.00012958357094705608, 0.020460540404770966, 0.0002662276605875924, 0.10605736351777773, 0.0845013950908653, 0.10399473660424041, 0.07649102149896103, 0.091700765522166, 0.05537006946474632, 0.10560415356716235, 0.11431948078903953, 0.10187288260477412, 0.38469084306538937, 0.4058310578234404, 0.40124745946048834, 0.38697165722643045, 0.36736331399944766, 0.3697234589914331, 0.4337822383368265, 0.39045608204548365, 0.4058754844285949, 0.085379159284794, 0.08450770620605164, 0.07548395136855779, 0.09230646472905557, 0.08201319149952246, 0.09860571416665331, 0.09122061545389315, 0.09209619751079823, 0.08159151180087443, 0.23687293759081463, 0.2083543049023061, 0.14983314558672878, 0.2868310036036179, 0.2659690907494805, 0.1777716472085824, 0.1870720260171711, 0.2234160237913484, 0.18732756527798144, 0.19656465635664966, 0.19553812608002585, 0.25931850956357005, 0.24229846332452087, 0.2250174639885929, 0.28010161441964443, 0.2688585824659956, 0.2810649591037214, 0.26414899044929696, 0.1621107183380136, 0.20181336837685215, 0.19339056335943283, 0.20086067313704414, 0.1538944901491306, 0.21056230743393967, 0.19871728154861967, 0.21489953287856134, 0.19770653086363943, 0.2013583729532108, 0.20210157193565426, 0.2055483036583592, 0.2120592533223543, 0.20789367116380608, 0.19194591488113977, 0.19774616801824973, 0.18545679358942435, 0.1939589611623308, 0.16317018423427276, 0.18156000499103953, 0.17418779380624005, 0.19007234958777175, 0.16639798503105563, 0.1893131590187892, 0.1686725846803443, 0.17023293311013044, 0.17213995400900717, 0.17542140189516753, 0.1771963044977134, 0.4839969877902699, 0.6009308414757439, 0.18999351316992918, 0.530935967825332, 0.13792153722266465, 0.3734771170240567, 0.1516949287463194, 0.22009816070813126, 0.19199836920716684, 0.32493515667382733, 0.5900271304582425, 0.507310238580846, 0.44739320183756404, 0.15319812408756095, 0.44509067425564286, 0.19222562020981782, 0.17754667663510737, 0.19558958724394138, 0.19560938891866686, 0.16942196945566956, 0.1632401743308416, 0.18854457962518, 0.18399252901189111, 0.17576635256430895, 0.1798781961675131, 0.07443908089959572, 0.08092541002146447, 0.07122686837473025, 0.06722958292022208, 0.08348623378316611, 0.06856320221614243, 0.08109639864250873, 0.07278327672841112, 0.06710790365965547]}, "mutation_prompt": null}
{"id": "9633c2d2-6dcf-41b2-b053-bace0e993fd8", "solution": "import numpy as np\n\nclass OptimizedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.7\n        self.CR = 0.85\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def opposition_based_learning(self, population):\n        return self.lower_bound + self.upper_bound - population\n\n    def local_search(self, x, func):\n        trial = x + np.random.uniform(-0.05, 0.05, self.dim)\n        trial = np.clip(trial, self.lower_bound, self.upper_bound)\n        if func(trial) < func(x):\n            return trial\n        else:\n            perturbation = x + np.random.uniform(-0.02, 0.02, self.dim)\n            perturbation = np.clip(perturbation, self.lower_bound, self.upper_bound)\n            return perturbation if func(perturbation) < func(x) else x\n\n    def mutate(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = indices\n        while a == idx:\n            a = np.random.choice(self.population_size)\n        diversity_factor = np.exp(-np.std(population, axis=0))\n        mutant = population[a] + self.F * diversity_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.CR\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        budget_used = self.population_size\n\n        while budget_used < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(population, i)\n                trial = self.crossover(population[i], mutant)\n                trial = self.local_search(trial, func)\n\n                trial_fitness = func(trial)\n                budget_used += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if budget_used < self.budget and np.random.rand() < 0.5:\n                    opposite = self.opposition_based_learning(population[i])\n                    opposite_fitness = func(opposite)\n                    budget_used += 1\n                    if opposite_fitness < fitness[i]:\n                        population[i] = opposite\n                        fitness[i] = opposite_fitness\n\n                if budget_used >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "OptimizedAdaptiveDifferentialEvolution", "description": "Improved convergence by refining local search and mutation strategies while optimizing computational efficiency.", "configspace": "", "generation": 70, "fitness": 0.16878344025570846, "feedback": "The algorithm OptimizedAdaptiveDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.12.", "error": "", "parent_id": "1b6bd6d8-9eb2-40c7-820b-fc972c59a035", "metadata": {"aucs": [0.42266795117672373, 0.35655726938651155, 0.3534097125387773, 0.37657126833550647, 0.3665956615948417, 0.40872196364450875, 0.3772906305489039, 0.36531093281819427, 0.36424707799531475, 0.06446811304815714, 0.11045539779473734, 0.07922496986661154, 0.07650109270952454, 0.04141215999651593, 0.11719492978172252, 0.12286148571103872, 0.1243678739183608, 0.10707577164654558, 0.08991861269427315, 0.08649367982629375, 0.09182158853231703, 0.0827554234605572, 0.09633910943909374, 0.10229315139772044, 0.07432114508783239, 0.08135600457930048, 0.08027761318747528, 0.07253030009436967, 0.07739373457127952, 0.09767363019968811, 0.07561487178698512, 0.07153374910276367, 0.08177982308770648, 0.08999164399612858, 0.08388293867698338, 0.08303947325772221, 0.46248852570275367, 0.4814397656748365, 0.5182143359726195, 0.5330776682833132, 0.5695379192046275, 0.5495065078661429, 0.5929906015450619, 0.47966550549075304, 0.3788031305406818, 0.16079069125520218, 0.1294935311588188, 0.167157329922896, 0.12163585309684388, 0.12077019440571346, 0.1341686698711546, 0.16913939165158465, 0.1497467428699083, 0.18064640536354748, 0.21882962505266546, 0.19905419164617766, 0.22058044477635663, 0.276190033363501, 0.18254353035597592, 0.18791603751603603, 0.15218010314090968, 0.22668748663720717, 0.3361526270389179, 0.09507131020247694, 0.09234473207390348, 0.12622325243983468, 0.1319431402245662, 0.11813777748601151, 0.016406895678751088, 0.11131388665844644, 0.15020376793980883, 0.12177174076549946, 0.14246051657488512, 0.12508920450513306, 0.13074802199417423, 0.1379481302508484, 0.0975191118937826, 0.1357345241185023, 0.14786982619769928, 0.14479551089467846, 0.11899723975012766, 0.0018229402318130639, 9.999999999998899e-05, 0.001817875231912014, 0.013361681665237657, 0.003888974954703417, 0.01914171845990309, 0.0003994019899773438, 9.999999999998899e-05, 0.022326505716411482, 0.0585750346585161, 0.04820367652620938, 0.05395984488663019, 0.06579592060541584, 0.00799971481865136, 0.02956331059800177, 0.14448699457496406, 0.05743075192920699, 0.08644428872345744, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0056856812164224335, 9.999999999998899e-05, 0.0006635155494546519, 0.00019017395401021986, 9.999999999998899e-05, 9.999999999998899e-05, 0.08559787670947516, 0.08745306131612707, 0.055674159127146905, 0.07225049115232174, 0.06740040676160952, 0.08119408670701744, 0.06541011529321017, 0.07799252533861634, 0.06921003541678239, 0.3335012158245958, 0.35037728620664765, 0.35869550285042506, 0.3477962520075023, 0.33761405417143076, 0.3476196678012762, 0.39466314801814983, 0.2975077541455209, 0.34348724409416886, 0.08905765520997722, 0.08660379161875464, 0.07099538480062129, 0.11622575098375676, 0.08918492776908182, 0.08210313294867666, 0.07421409068451468, 0.06432804744922227, 0.07569693615082418, 0.18524429390361752, 0.20451381433248794, 0.18872367130500178, 0.18890453063761425, 0.26413042597426806, 0.2041201251181859, 0.21493283950284425, 0.2252194523083716, 0.15626136727982654, 0.21432749254181138, 0.20339441019813487, 0.24656848591278235, 0.2466283070956109, 0.24359018574127445, 0.2390633353469258, 0.24019397734337444, 0.2529828392059006, 0.24981969388016245, 0.17552078870790933, 0.1829506935926184, 0.20142614427617445, 0.15962251197797395, 0.1441358565385208, 0.19039916747747543, 0.16074916313131504, 0.19989137236251142, 0.18661322715693185, 0.18796729049863392, 0.19528003235725344, 0.1746952973477942, 0.20446626751347619, 0.19712146267424324, 0.17755614732242975, 0.2086704766313212, 0.19717096371896303, 0.19598841231348152, 0.1776336958903868, 0.16092267506262137, 0.16204053273127939, 0.17968572095237356, 0.17759852968982393, 0.17619740712060317, 0.17916071040578863, 0.17589548272206035, 0.1786922544958135, 0.16881383209151823, 0.15817555940956407, 0.3364101653245778, 0.47170702765865136, 0.18383708629861872, 0.4332733034991525, 0.35999965986954585, 0.16151179800657878, 0.16230519494213136, 0.2784231965461088, 0.1464688139188689, 0.26356674471683617, 0.3231109243756841, 0.15921449092925888, 0.15857240445732512, 0.13537800957878132, 0.31536271876930666, 0.10021662082815708, 0.18459564093409975, 0.17782600030467277, 0.18596769005219627, 0.18665530468510128, 0.17698314980532892, 0.214116156515069, 0.1803239123669378, 0.1845297349280156, 0.16671499159550163, 0.06710687115710157, 0.08029576382686354, 0.07153635105968148, 0.07833247777955343, 0.07774565904767583, 0.06860076708672946, 0.07842659723853973, 0.07196453541617176, 0.07013360652247425]}, "mutation_prompt": null}
{"id": "dc086abb-b2f0-4ae7-81f0-fc71b288436d", "solution": "import numpy as np\n\nclass OptimizedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.7\n        self.CR = 0.85\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def opposition_based_learning(self, population):\n        return self.lower_bound + self.upper_bound - population\n\n    def local_search(self, x, func):\n        trial = x + np.random.uniform(-0.05, 0.05, self.dim)\n        trial = np.clip(trial, self.lower_bound, self.upper_bound)\n        return trial if func(trial) < func(x) else x\n\n    def mutate(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = indices\n        while a == idx:\n            a = np.random.choice(self.population_size)  # Ensure a != idx\n        diversity_factor = np.exp(-np.std(population, axis=0))\n        mutant = population[a] + self.F * diversity_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.CR\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        budget_used = self.population_size\n\n        while budget_used < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(population, i)\n                trial = self.crossover(population[i], mutant)\n                trial = self.local_search(trial, func)\n\n                trial_fitness = func(trial)\n                budget_used += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if budget_used < self.budget and np.random.rand() < 0.5:\n                    opposite = self.opposition_based_learning(population[i])\n                    opposite_fitness = func(opposite)\n                    budget_used += 1\n                    if opposite_fitness < fitness[i]:\n                        population[i] = opposite\n                        fitness[i] = opposite_fitness\n\n                if budget_used >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "OptimizedAdaptiveDifferentialEvolution", "description": "Enhanced diversity control and adaptive mutation scales in differential evolution for improved convergence.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b6bd6d8-9eb2-40c7-820b-fc972c59a035", "metadata": {"aucs": [0.41638628740398986, 0.44087325269180033, 0.4148527099840317, 0.4494462269351437, 0.45193254970586993, 0.4285732387966792, 0.44233668370072377, 0.4045058513435973, 0.40706917071791804, 0.1562348237788359, 0.15192398214247638, 0.19183830873033048, 0.11381342957337981, 0.18253295699273964, 0.14272737290371573, 0.08846635899383604, 0.13486940581886375, 0.16489947751109757, 0.09317325606414628, 0.10696667839175555, 0.10276607628314649, 0.1066556397268118, 0.10133276222620391, 0.10134781381068114, 0.10159155141906873, 0.0901995645432998, 0.10509441139984699, 0.06806531814270966, 0.07894718250219235, 0.08788733843608554, 0.09294185312740444, 0.07705995206656369, 0.07368205419953333, 0.10419076658204407, 0.0896965987353242, 0.08815952290802143, 0.6059931965801326, 0.7914365707933382, 0.5760794573600078, 0.561713682476779, 0.7086335664820342, 0.6452585638163797, 0.6959416057843615, 0.6355955630595329, 0.6636100793953132, 0.19221989496815872, 0.10332686353816078, 0.18837420523322868, 0.13842586244140254, 0.17270548708936606, 0.16168346446808646, 0.1982730526521349, 0.14187849143274145, 0.19291431839998419, 0.3149695205576962, 0.2595867246075664, 0.21468094573007523, 0.39691674293502, 0.28011783803112544, 0.32077562845532637, 0.2335122721580145, 0.19562231692521959, 0.25279105680017966, 0.14364206278757863, 0.15889426199008472, 0.11539101729590606, 0.1606552380129358, 0.15120944018170634, 0.12507950469305396, 0.17243158632006794, 0.1420475226452298, 0.13407427344722023, 0.16145755211215873, 0.13148714690624996, 0.20276949839399028, 0.14874837478690806, 0.1182266779603347, 0.14557943932470718, 0.19015554815967017, 0.08532572534241134, 0.14417958986613888, 0.03217636608843555, 0.0007379536527092334, 0.0025431148211513266, 0.016582066015109587, 0.000941492678347311, 0.03791076508601021, 0.0003448465572233328, 0.008166758575097632, 0.042413233778395454, 0.07351655254502854, 0.062221920608671266, 0.0517168496793472, 0.0675980580459824, 0.03327085320180834, 0.03201560615170751, 0.06865884810948752, 0.05518686854318111, 0.06681685261149328, 9.999999999998899e-05, 0.0061690263580926885, 0.00731791371156576, 0.005433194974177602, 0.0036315412884874165, 0.0038959490571085498, 0.00012958357094705608, 0.020460540404770966, 0.0002662276605875924, 0.10605736351777773, 0.0845013950908653, 0.10399473660424041, 0.07649102149896103, 0.091700765522166, 0.05537006946474632, 0.10560415356716235, 0.11431948078903953, 0.10187288260477412, 0.38469084306538937, 0.4058310578234404, 0.40124745946048834, 0.38697165722643045, 0.36736331399944766, 0.3697234589914331, 0.4337822383368265, 0.39045608204548365, 0.4058754844285949, 0.085379159284794, 0.08450770620605164, 0.07548395136855779, 0.09230646472905557, 0.08201319149952246, 0.09860571416665331, 0.09122061545389315, 0.09209619751079823, 0.08159151180087443, 0.23687293759081463, 0.2083543049023061, 0.14983314558672878, 0.2868310036036179, 0.2659690907494805, 0.1777716472085824, 0.1870720260171711, 0.2234160237913484, 0.18732756527798144, 0.19656465635664966, 0.19553812608002585, 0.25931850956357005, 0.24229846332452087, 0.2250174639885929, 0.28010161441964443, 0.2688585824659956, 0.2810649591037214, 0.26414899044929696, 0.1621107183380136, 0.20181336837685215, 0.19339056335943283, 0.20086067313704414, 0.1538944901491306, 0.21056230743393967, 0.19871728154861967, 0.21489953287856134, 0.19770653086363943, 0.2013583729532108, 0.20210157193565426, 0.2055483036583592, 0.2120592533223543, 0.20789367116380608, 0.19194591488113977, 0.19774616801824973, 0.18545679358942435, 0.1939589611623308, 0.16317018423427276, 0.18156000499103953, 0.17418779380624005, 0.19007234958777175, 0.16639798503105563, 0.1893131590187892, 0.1686725846803443, 0.17023293311013044, 0.17213995400900717, 0.17542140189516753, 0.1771963044977134, 0.4839969877902699, 0.6009308414757439, 0.18999351316992918, 0.530935967825332, 0.13792153722266465, 0.3734771170240567, 0.1516949287463194, 0.22009816070813126, 0.19199836920716684, 0.32493515667382733, 0.5900271304582425, 0.507310238580846, 0.44739320183756404, 0.15319812408756095, 0.44509067425564286, 0.19222562020981782, 0.17754667663510737, 0.19558958724394138, 0.19560938891866686, 0.16942196945566956, 0.1632401743308416, 0.18854457962518, 0.18399252901189111, 0.17576635256430895, 0.1798781961675131, 0.07443908089959572, 0.08092541002146447, 0.07122686837473025, 0.06722958292022208, 0.08348623378316611, 0.06856320221614243, 0.08109639864250873, 0.07278327672841112, 0.06710790365965547]}, "mutation_prompt": null}
{"id": "a3caf631-5c4c-4bfd-97d5-d4e5cccdda2b", "solution": "import numpy as np\n\nclass OptimizedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.7\n        self.CR = 0.85\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def opposition_based_learning(self, population):\n        return self.lower_bound + self.upper_bound - population\n\n    def local_search(self, x, func):\n        trial = x + np.random.uniform(-0.05, 0.05, self.dim)\n        trial = np.clip(trial, self.lower_bound, self.upper_bound)\n        return trial if func(trial) < func(x) else x\n\n    def mutate(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = indices\n        while a == idx:\n            a = np.random.choice(self.population_size)  # Ensure a != idx\n        diversity_factor = np.exp(-np.std(population, axis=0))\n        mutant = population[a] + self.F * diversity_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.CR\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        budget_used = self.population_size\n\n        while budget_used < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(population, i)\n                trial = self.crossover(population[i], mutant)\n                trial = self.local_search(trial, func)\n\n                trial_fitness = func(trial)\n                budget_used += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if budget_used < self.budget and np.random.rand() < 0.5:\n                    opposite = self.opposition_based_learning(population[i])\n                    opposite_fitness = func(opposite)\n                    budget_used += 1\n                    if opposite_fitness < fitness[i]:\n                        population[i] = opposite\n                        fitness[i] = opposite_fitness\n\n                if budget_used >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "OptimizedAdaptiveDifferentialEvolution", "description": "Enhanced diversity control and adaptive mutation scales in differential evolution for improved convergence.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b6bd6d8-9eb2-40c7-820b-fc972c59a035", "metadata": {"aucs": [0.41638628740398986, 0.44087325269180033, 0.4148527099840317, 0.4494462269351437, 0.45193254970586993, 0.4285732387966792, 0.44233668370072377, 0.4045058513435973, 0.40706917071791804, 0.1562348237788359, 0.15192398214247638, 0.19183830873033048, 0.11381342957337981, 0.18253295699273964, 0.14272737290371573, 0.08846635899383604, 0.13486940581886375, 0.16489947751109757, 0.09317325606414628, 0.10696667839175555, 0.10276607628314649, 0.1066556397268118, 0.10133276222620391, 0.10134781381068114, 0.10159155141906873, 0.0901995645432998, 0.10509441139984699, 0.06806531814270966, 0.07894718250219235, 0.08788733843608554, 0.09294185312740444, 0.07705995206656369, 0.07368205419953333, 0.10419076658204407, 0.0896965987353242, 0.08815952290802143, 0.6059931965801326, 0.7914365707933382, 0.5760794573600078, 0.561713682476779, 0.7086335664820342, 0.6452585638163797, 0.6959416057843615, 0.6355955630595329, 0.6636100793953132, 0.19221989496815872, 0.10332686353816078, 0.18837420523322868, 0.13842586244140254, 0.17270548708936606, 0.16168346446808646, 0.1982730526521349, 0.14187849143274145, 0.19291431839998419, 0.3149695205576962, 0.2595867246075664, 0.21468094573007523, 0.39691674293502, 0.28011783803112544, 0.32077562845532637, 0.2335122721580145, 0.19562231692521959, 0.25279105680017966, 0.14364206278757863, 0.15889426199008472, 0.11539101729590606, 0.1606552380129358, 0.15120944018170634, 0.12507950469305396, 0.17243158632006794, 0.1420475226452298, 0.13407427344722023, 0.16145755211215873, 0.13148714690624996, 0.20276949839399028, 0.14874837478690806, 0.1182266779603347, 0.14557943932470718, 0.19015554815967017, 0.08532572534241134, 0.14417958986613888, 0.03217636608843555, 0.0007379536527092334, 0.0025431148211513266, 0.016582066015109587, 0.000941492678347311, 0.03791076508601021, 0.0003448465572233328, 0.008166758575097632, 0.042413233778395454, 0.07351655254502854, 0.062221920608671266, 0.0517168496793472, 0.0675980580459824, 0.03327085320180834, 0.03201560615170751, 0.06865884810948752, 0.05518686854318111, 0.06681685261149328, 9.999999999998899e-05, 0.0061690263580926885, 0.00731791371156576, 0.005433194974177602, 0.0036315412884874165, 0.0038959490571085498, 0.00012958357094705608, 0.020460540404770966, 0.0002662276605875924, 0.10605736351777773, 0.0845013950908653, 0.10399473660424041, 0.07649102149896103, 0.091700765522166, 0.05537006946474632, 0.10560415356716235, 0.11431948078903953, 0.10187288260477412, 0.38469084306538937, 0.4058310578234404, 0.40124745946048834, 0.38697165722643045, 0.36736331399944766, 0.3697234589914331, 0.4337822383368265, 0.39045608204548365, 0.4058754844285949, 0.085379159284794, 0.08450770620605164, 0.07548395136855779, 0.09230646472905557, 0.08201319149952246, 0.09860571416665331, 0.09122061545389315, 0.09209619751079823, 0.08159151180087443, 0.23687293759081463, 0.2083543049023061, 0.14983314558672878, 0.2868310036036179, 0.2659690907494805, 0.1777716472085824, 0.1870720260171711, 0.2234160237913484, 0.18732756527798144, 0.19656465635664966, 0.19553812608002585, 0.25931850956357005, 0.24229846332452087, 0.2250174639885929, 0.28010161441964443, 0.2688585824659956, 0.2810649591037214, 0.26414899044929696, 0.1621107183380136, 0.20181336837685215, 0.19339056335943283, 0.20086067313704414, 0.1538944901491306, 0.21056230743393967, 0.19871728154861967, 0.21489953287856134, 0.19770653086363943, 0.2013583729532108, 0.20210157193565426, 0.2055483036583592, 0.2120592533223543, 0.20789367116380608, 0.19194591488113977, 0.19774616801824973, 0.18545679358942435, 0.1939589611623308, 0.16317018423427276, 0.18156000499103953, 0.17418779380624005, 0.19007234958777175, 0.16639798503105563, 0.1893131590187892, 0.1686725846803443, 0.17023293311013044, 0.17213995400900717, 0.17542140189516753, 0.1771963044977134, 0.4839969877902699, 0.6009308414757439, 0.18999351316992918, 0.530935967825332, 0.13792153722266465, 0.3734771170240567, 0.1516949287463194, 0.22009816070813126, 0.19199836920716684, 0.32493515667382733, 0.5900271304582425, 0.507310238580846, 0.44739320183756404, 0.15319812408756095, 0.44509067425564286, 0.19222562020981782, 0.17754667663510737, 0.19558958724394138, 0.19560938891866686, 0.16942196945566956, 0.1632401743308416, 0.18854457962518, 0.18399252901189111, 0.17576635256430895, 0.1798781961675131, 0.07443908089959572, 0.08092541002146447, 0.07122686837473025, 0.06722958292022208, 0.08348623378316611, 0.06856320221614243, 0.08109639864250873, 0.07278327672841112, 0.06710790365965547]}, "mutation_prompt": null}
{"id": "ea3716d1-1f9f-4f6a-a2f5-ab7c674eef93", "solution": "import numpy as np\n\nclass OptimizedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.7\n        self.CR = 0.85\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def opposition_based_learning(self, population):\n        return self.lower_bound + self.upper_bound - population\n\n    def local_search(self, x, func):\n        trial = x + np.random.uniform(-0.05, 0.05, self.dim)\n        trial = np.clip(trial, self.lower_bound, self.upper_bound)\n        return trial if func(trial) < func(x) else x\n\n    def mutate(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = indices\n        while a == idx:\n            a = np.random.choice(self.population_size)  # Ensure a != idx\n        diversity_factor = np.exp(-np.std(population, axis=0))\n        mutant = population[a] + self.F * diversity_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.CR\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        budget_used = self.population_size\n\n        while budget_used < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(population, i)\n                trial = self.crossover(population[i], mutant)\n                trial = self.local_search(trial, func)\n\n                trial_fitness = func(trial)\n                budget_used += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if budget_used < self.budget and np.random.rand() < 0.5:\n                    opposite = self.opposition_based_learning(population[i])\n                    opposite_fitness = func(opposite)\n                    budget_used += 1\n                    if opposite_fitness < fitness[i]:\n                        population[i] = opposite\n                        fitness[i] = opposite_fitness\n\n                if budget_used >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "OptimizedAdaptiveDifferentialEvolution", "description": "Enhanced diversity control and adaptive mutation scales in differential evolution for improved convergence.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b6bd6d8-9eb2-40c7-820b-fc972c59a035", "metadata": {"aucs": [0.41638628740398986, 0.44087325269180033, 0.4148527099840317, 0.4494462269351437, 0.45193254970586993, 0.4285732387966792, 0.44233668370072377, 0.4045058513435973, 0.40706917071791804, 0.1562348237788359, 0.15192398214247638, 0.19183830873033048, 0.11381342957337981, 0.18253295699273964, 0.14272737290371573, 0.08846635899383604, 0.13486940581886375, 0.16489947751109757, 0.09317325606414628, 0.10696667839175555, 0.10276607628314649, 0.1066556397268118, 0.10133276222620391, 0.10134781381068114, 0.10159155141906873, 0.0901995645432998, 0.10509441139984699, 0.06806531814270966, 0.07894718250219235, 0.08788733843608554, 0.09294185312740444, 0.07705995206656369, 0.07368205419953333, 0.10419076658204407, 0.0896965987353242, 0.08815952290802143, 0.6059931965801326, 0.7914365707933382, 0.5760794573600078, 0.561713682476779, 0.7086335664820342, 0.6452585638163797, 0.6959416057843615, 0.6355955630595329, 0.6636100793953132, 0.19221989496815872, 0.10332686353816078, 0.18837420523322868, 0.13842586244140254, 0.17270548708936606, 0.16168346446808646, 0.1982730526521349, 0.14187849143274145, 0.19291431839998419, 0.3149695205576962, 0.2595867246075664, 0.21468094573007523, 0.39691674293502, 0.28011783803112544, 0.32077562845532637, 0.2335122721580145, 0.19562231692521959, 0.25279105680017966, 0.14364206278757863, 0.15889426199008472, 0.11539101729590606, 0.1606552380129358, 0.15120944018170634, 0.12507950469305396, 0.17243158632006794, 0.1420475226452298, 0.13407427344722023, 0.16145755211215873, 0.13148714690624996, 0.20276949839399028, 0.14874837478690806, 0.1182266779603347, 0.14557943932470718, 0.19015554815967017, 0.08532572534241134, 0.14417958986613888, 0.03217636608843555, 0.0007379536527092334, 0.0025431148211513266, 0.016582066015109587, 0.000941492678347311, 0.03791076508601021, 0.0003448465572233328, 0.008166758575097632, 0.042413233778395454, 0.07351655254502854, 0.062221920608671266, 0.0517168496793472, 0.0675980580459824, 0.03327085320180834, 0.03201560615170751, 0.06865884810948752, 0.05518686854318111, 0.06681685261149328, 9.999999999998899e-05, 0.0061690263580926885, 0.00731791371156576, 0.005433194974177602, 0.0036315412884874165, 0.0038959490571085498, 0.00012958357094705608, 0.020460540404770966, 0.0002662276605875924, 0.10605736351777773, 0.0845013950908653, 0.10399473660424041, 0.07649102149896103, 0.091700765522166, 0.05537006946474632, 0.10560415356716235, 0.11431948078903953, 0.10187288260477412, 0.38469084306538937, 0.4058310578234404, 0.40124745946048834, 0.38697165722643045, 0.36736331399944766, 0.3697234589914331, 0.4337822383368265, 0.39045608204548365, 0.4058754844285949, 0.085379159284794, 0.08450770620605164, 0.07548395136855779, 0.09230646472905557, 0.08201319149952246, 0.09860571416665331, 0.09122061545389315, 0.09209619751079823, 0.08159151180087443, 0.23687293759081463, 0.2083543049023061, 0.14983314558672878, 0.2868310036036179, 0.2659690907494805, 0.1777716472085824, 0.1870720260171711, 0.2234160237913484, 0.18732756527798144, 0.19656465635664966, 0.19553812608002585, 0.25931850956357005, 0.24229846332452087, 0.2250174639885929, 0.28010161441964443, 0.2688585824659956, 0.2810649591037214, 0.26414899044929696, 0.1621107183380136, 0.20181336837685215, 0.19339056335943283, 0.20086067313704414, 0.1538944901491306, 0.21056230743393967, 0.19871728154861967, 0.21489953287856134, 0.19770653086363943, 0.2013583729532108, 0.20210157193565426, 0.2055483036583592, 0.2120592533223543, 0.20789367116380608, 0.19194591488113977, 0.19774616801824973, 0.18545679358942435, 0.1939589611623308, 0.16317018423427276, 0.18156000499103953, 0.17418779380624005, 0.19007234958777175, 0.16639798503105563, 0.1893131590187892, 0.1686725846803443, 0.17023293311013044, 0.17213995400900717, 0.17542140189516753, 0.1771963044977134, 0.4839969877902699, 0.6009308414757439, 0.18999351316992918, 0.530935967825332, 0.13792153722266465, 0.3734771170240567, 0.1516949287463194, 0.22009816070813126, 0.19199836920716684, 0.32493515667382733, 0.5900271304582425, 0.507310238580846, 0.44739320183756404, 0.15319812408756095, 0.44509067425564286, 0.19222562020981782, 0.17754667663510737, 0.19558958724394138, 0.19560938891866686, 0.16942196945566956, 0.1632401743308416, 0.18854457962518, 0.18399252901189111, 0.17576635256430895, 0.1798781961675131, 0.07443908089959572, 0.08092541002146447, 0.07122686837473025, 0.06722958292022208, 0.08348623378316611, 0.06856320221614243, 0.08109639864250873, 0.07278327672841112, 0.06710790365965547]}, "mutation_prompt": null}
{"id": "c8b1c35a-4628-4c34-8900-71f92ace3340", "solution": "import numpy as np\n\nclass OptimizedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.7\n        self.CR = 0.85\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def opposition_based_learning(self, population):\n        return self.lower_bound + self.upper_bound - population\n\n    def local_search(self, x, func):\n        trial = x + np.random.uniform(-0.05, 0.05, self.dim)\n        trial = np.clip(trial, self.lower_bound, self.upper_bound)\n        return trial if func(trial) < func(x) else x\n\n    def mutate(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = indices\n        while a == idx:\n            a = np.random.choice(self.population_size)  # Ensure a != idx\n        diversity_factor = np.exp(-np.std(population, axis=0))\n        mutant = population[a] + self.F * diversity_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.CR\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        budget_used = self.population_size\n\n        while budget_used < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(population, i)\n                trial = self.crossover(population[i], mutant)\n                trial = self.local_search(trial, func)\n\n                trial_fitness = func(trial)\n                budget_used += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if budget_used < self.budget and np.random.rand() < 0.5:\n                    opposite = self.opposition_based_learning(population[i])\n                    opposite_fitness = func(opposite)\n                    budget_used += 1\n                    if opposite_fitness < fitness[i]:\n                        population[i] = opposite\n                        fitness[i] = opposite_fitness\n\n                if budget_used >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "OptimizedAdaptiveDifferentialEvolution", "description": "Enhanced diversity control and adaptive mutation scales in differential evolution for improved convergence.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b6bd6d8-9eb2-40c7-820b-fc972c59a035", "metadata": {"aucs": [0.41638628740398986, 0.44087325269180033, 0.4148527099840317, 0.4494462269351437, 0.45193254970586993, 0.4285732387966792, 0.44233668370072377, 0.4045058513435973, 0.40706917071791804, 0.1562348237788359, 0.15192398214247638, 0.19183830873033048, 0.11381342957337981, 0.18253295699273964, 0.14272737290371573, 0.08846635899383604, 0.13486940581886375, 0.16489947751109757, 0.09317325606414628, 0.10696667839175555, 0.10276607628314649, 0.1066556397268118, 0.10133276222620391, 0.10134781381068114, 0.10159155141906873, 0.0901995645432998, 0.10509441139984699, 0.06806531814270966, 0.07894718250219235, 0.08788733843608554, 0.09294185312740444, 0.07705995206656369, 0.07368205419953333, 0.10419076658204407, 0.0896965987353242, 0.08815952290802143, 0.6059931965801326, 0.7914365707933382, 0.5760794573600078, 0.561713682476779, 0.7086335664820342, 0.6452585638163797, 0.6959416057843615, 0.6355955630595329, 0.6636100793953132, 0.19221989496815872, 0.10332686353816078, 0.18837420523322868, 0.13842586244140254, 0.17270548708936606, 0.16168346446808646, 0.1982730526521349, 0.14187849143274145, 0.19291431839998419, 0.3149695205576962, 0.2595867246075664, 0.21468094573007523, 0.39691674293502, 0.28011783803112544, 0.32077562845532637, 0.2335122721580145, 0.19562231692521959, 0.25279105680017966, 0.14364206278757863, 0.15889426199008472, 0.11539101729590606, 0.1606552380129358, 0.15120944018170634, 0.12507950469305396, 0.17243158632006794, 0.1420475226452298, 0.13407427344722023, 0.16145755211215873, 0.13148714690624996, 0.20276949839399028, 0.14874837478690806, 0.1182266779603347, 0.14557943932470718, 0.19015554815967017, 0.08532572534241134, 0.14417958986613888, 0.03217636608843555, 0.0007379536527092334, 0.0025431148211513266, 0.016582066015109587, 0.000941492678347311, 0.03791076508601021, 0.0003448465572233328, 0.008166758575097632, 0.042413233778395454, 0.07351655254502854, 0.062221920608671266, 0.0517168496793472, 0.0675980580459824, 0.03327085320180834, 0.03201560615170751, 0.06865884810948752, 0.05518686854318111, 0.06681685261149328, 9.999999999998899e-05, 0.0061690263580926885, 0.00731791371156576, 0.005433194974177602, 0.0036315412884874165, 0.0038959490571085498, 0.00012958357094705608, 0.020460540404770966, 0.0002662276605875924, 0.10605736351777773, 0.0845013950908653, 0.10399473660424041, 0.07649102149896103, 0.091700765522166, 0.05537006946474632, 0.10560415356716235, 0.11431948078903953, 0.10187288260477412, 0.38469084306538937, 0.4058310578234404, 0.40124745946048834, 0.38697165722643045, 0.36736331399944766, 0.3697234589914331, 0.4337822383368265, 0.39045608204548365, 0.4058754844285949, 0.085379159284794, 0.08450770620605164, 0.07548395136855779, 0.09230646472905557, 0.08201319149952246, 0.09860571416665331, 0.09122061545389315, 0.09209619751079823, 0.08159151180087443, 0.23687293759081463, 0.2083543049023061, 0.14983314558672878, 0.2868310036036179, 0.2659690907494805, 0.1777716472085824, 0.1870720260171711, 0.2234160237913484, 0.18732756527798144, 0.19656465635664966, 0.19553812608002585, 0.25931850956357005, 0.24229846332452087, 0.2250174639885929, 0.28010161441964443, 0.2688585824659956, 0.2810649591037214, 0.26414899044929696, 0.1621107183380136, 0.20181336837685215, 0.19339056335943283, 0.20086067313704414, 0.1538944901491306, 0.21056230743393967, 0.19871728154861967, 0.21489953287856134, 0.19770653086363943, 0.2013583729532108, 0.20210157193565426, 0.2055483036583592, 0.2120592533223543, 0.20789367116380608, 0.19194591488113977, 0.19774616801824973, 0.18545679358942435, 0.1939589611623308, 0.16317018423427276, 0.18156000499103953, 0.17418779380624005, 0.19007234958777175, 0.16639798503105563, 0.1893131590187892, 0.1686725846803443, 0.17023293311013044, 0.17213995400900717, 0.17542140189516753, 0.1771963044977134, 0.4839969877902699, 0.6009308414757439, 0.18999351316992918, 0.530935967825332, 0.13792153722266465, 0.3734771170240567, 0.1516949287463194, 0.22009816070813126, 0.19199836920716684, 0.32493515667382733, 0.5900271304582425, 0.507310238580846, 0.44739320183756404, 0.15319812408756095, 0.44509067425564286, 0.19222562020981782, 0.17754667663510737, 0.19558958724394138, 0.19560938891866686, 0.16942196945566956, 0.1632401743308416, 0.18854457962518, 0.18399252901189111, 0.17576635256430895, 0.1798781961675131, 0.07443908089959572, 0.08092541002146447, 0.07122686837473025, 0.06722958292022208, 0.08348623378316611, 0.06856320221614243, 0.08109639864250873, 0.07278327672841112, 0.06710790365965547]}, "mutation_prompt": null}
{"id": "bbbf503d-52b9-4257-addb-b34be7d0bd89", "solution": "import numpy as np\n\nclass OptimizedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.7\n        self.CR = 0.85\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def opposition_based_learning(self, population):\n        return self.lower_bound + self.upper_bound - population\n\n    def local_search(self, x, func):\n        trial = x + np.random.uniform(-0.05, 0.05, self.dim)\n        trial = np.clip(trial, self.lower_bound, self.upper_bound)\n        return trial if func(trial) < func(x) else x\n\n    def mutate(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = indices\n        while a == idx:\n            a = np.random.choice(self.population_size)  # Ensure a != idx\n        diversity_factor = np.exp(-np.std(population, axis=0))\n        mutant = population[a] + self.F * diversity_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.CR\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        budget_used = self.population_size\n\n        while budget_used < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(population, i)\n                trial = self.crossover(population[i], mutant)\n                trial = self.local_search(trial, func)\n\n                trial_fitness = func(trial)\n                budget_used += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if budget_used < self.budget and np.random.rand() < 0.5:\n                    opposite = self.opposition_based_learning(population[i])\n                    opposite_fitness = func(opposite)\n                    budget_used += 1\n                    if opposite_fitness < fitness[i]:\n                        population[i] = opposite\n                        fitness[i] = opposite_fitness\n\n                if budget_used >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "OptimizedAdaptiveDifferentialEvolution", "description": "Enhanced diversity control and adaptive mutation scales in differential evolution for improved convergence.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b6bd6d8-9eb2-40c7-820b-fc972c59a035", "metadata": {"aucs": [0.41638628740398986, 0.44087325269180033, 0.4148527099840317, 0.4494462269351437, 0.45193254970586993, 0.4285732387966792, 0.44233668370072377, 0.4045058513435973, 0.40706917071791804, 0.1562348237788359, 0.15192398214247638, 0.19183830873033048, 0.11381342957337981, 0.18253295699273964, 0.14272737290371573, 0.08846635899383604, 0.13486940581886375, 0.16489947751109757, 0.09317325606414628, 0.10696667839175555, 0.10276607628314649, 0.1066556397268118, 0.10133276222620391, 0.10134781381068114, 0.10159155141906873, 0.0901995645432998, 0.10509441139984699, 0.06806531814270966, 0.07894718250219235, 0.08788733843608554, 0.09294185312740444, 0.07705995206656369, 0.07368205419953333, 0.10419076658204407, 0.0896965987353242, 0.08815952290802143, 0.6059931965801326, 0.7914365707933382, 0.5760794573600078, 0.561713682476779, 0.7086335664820342, 0.6452585638163797, 0.6959416057843615, 0.6355955630595329, 0.6636100793953132, 0.19221989496815872, 0.10332686353816078, 0.18837420523322868, 0.13842586244140254, 0.17270548708936606, 0.16168346446808646, 0.1982730526521349, 0.14187849143274145, 0.19291431839998419, 0.3149695205576962, 0.2595867246075664, 0.21468094573007523, 0.39691674293502, 0.28011783803112544, 0.32077562845532637, 0.2335122721580145, 0.19562231692521959, 0.25279105680017966, 0.14364206278757863, 0.15889426199008472, 0.11539101729590606, 0.1606552380129358, 0.15120944018170634, 0.12507950469305396, 0.17243158632006794, 0.1420475226452298, 0.13407427344722023, 0.16145755211215873, 0.13148714690624996, 0.20276949839399028, 0.14874837478690806, 0.1182266779603347, 0.14557943932470718, 0.19015554815967017, 0.08532572534241134, 0.14417958986613888, 0.03217636608843555, 0.0007379536527092334, 0.0025431148211513266, 0.016582066015109587, 0.000941492678347311, 0.03791076508601021, 0.0003448465572233328, 0.008166758575097632, 0.042413233778395454, 0.07351655254502854, 0.062221920608671266, 0.0517168496793472, 0.0675980580459824, 0.03327085320180834, 0.03201560615170751, 0.06865884810948752, 0.05518686854318111, 0.06681685261149328, 9.999999999998899e-05, 0.0061690263580926885, 0.00731791371156576, 0.005433194974177602, 0.0036315412884874165, 0.0038959490571085498, 0.00012958357094705608, 0.020460540404770966, 0.0002662276605875924, 0.10605736351777773, 0.0845013950908653, 0.10399473660424041, 0.07649102149896103, 0.091700765522166, 0.05537006946474632, 0.10560415356716235, 0.11431948078903953, 0.10187288260477412, 0.38469084306538937, 0.4058310578234404, 0.40124745946048834, 0.38697165722643045, 0.36736331399944766, 0.3697234589914331, 0.4337822383368265, 0.39045608204548365, 0.4058754844285949, 0.085379159284794, 0.08450770620605164, 0.07548395136855779, 0.09230646472905557, 0.08201319149952246, 0.09860571416665331, 0.09122061545389315, 0.09209619751079823, 0.08159151180087443, 0.23687293759081463, 0.2083543049023061, 0.14983314558672878, 0.2868310036036179, 0.2659690907494805, 0.1777716472085824, 0.1870720260171711, 0.2234160237913484, 0.18732756527798144, 0.19656465635664966, 0.19553812608002585, 0.25931850956357005, 0.24229846332452087, 0.2250174639885929, 0.28010161441964443, 0.2688585824659956, 0.2810649591037214, 0.26414899044929696, 0.1621107183380136, 0.20181336837685215, 0.19339056335943283, 0.20086067313704414, 0.1538944901491306, 0.21056230743393967, 0.19871728154861967, 0.21489953287856134, 0.19770653086363943, 0.2013583729532108, 0.20210157193565426, 0.2055483036583592, 0.2120592533223543, 0.20789367116380608, 0.19194591488113977, 0.19774616801824973, 0.18545679358942435, 0.1939589611623308, 0.16317018423427276, 0.18156000499103953, 0.17418779380624005, 0.19007234958777175, 0.16639798503105563, 0.1893131590187892, 0.1686725846803443, 0.17023293311013044, 0.17213995400900717, 0.17542140189516753, 0.1771963044977134, 0.4839969877902699, 0.6009308414757439, 0.18999351316992918, 0.530935967825332, 0.13792153722266465, 0.3734771170240567, 0.1516949287463194, 0.22009816070813126, 0.19199836920716684, 0.32493515667382733, 0.5900271304582425, 0.507310238580846, 0.44739320183756404, 0.15319812408756095, 0.44509067425564286, 0.19222562020981782, 0.17754667663510737, 0.19558958724394138, 0.19560938891866686, 0.16942196945566956, 0.1632401743308416, 0.18854457962518, 0.18399252901189111, 0.17576635256430895, 0.1798781961675131, 0.07443908089959572, 0.08092541002146447, 0.07122686837473025, 0.06722958292022208, 0.08348623378316611, 0.06856320221614243, 0.08109639864250873, 0.07278327672841112, 0.06710790365965547]}, "mutation_prompt": null}
{"id": "f473dcd3-ef95-4dba-9a8e-20b559e572b5", "solution": "import numpy as np\n\nclass OptimizedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.7\n        self.CR = 0.85\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def opposition_based_learning(self, population):\n        return self.lower_bound + self.upper_bound - population\n\n    def local_search(self, x, func):\n        trial = x + np.random.uniform(-0.05, 0.05, self.dim)\n        trial = np.clip(trial, self.lower_bound, self.upper_bound)\n        return trial if func(trial) < func(x) else x\n\n    def mutate(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = indices\n        while a == idx:\n            a = np.random.choice(self.population_size)  # Ensure a != idx\n        diversity_factor = np.exp(-np.std(population, axis=0))\n        mutant = population[a] + self.F * diversity_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.CR\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        budget_used = self.population_size\n\n        while budget_used < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(population, i)\n                trial = self.crossover(population[i], mutant)\n                trial = self.local_search(trial, func)\n\n                trial_fitness = func(trial)\n                budget_used += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if budget_used < self.budget and np.random.rand() < 0.5:\n                    opposite = self.opposition_based_learning(population[i])\n                    opposite_fitness = func(opposite)\n                    budget_used += 1\n                    if opposite_fitness < fitness[i]:\n                        population[i] = opposite\n                        fitness[i] = opposite_fitness\n\n                if budget_used >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "OptimizedAdaptiveDifferentialEvolution", "description": "Enhanced diversity control and adaptive mutation scales in differential evolution for improved convergence.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b6bd6d8-9eb2-40c7-820b-fc972c59a035", "metadata": {"aucs": [0.41638628740398986, 0.44087325269180033, 0.4148527099840317, 0.4494462269351437, 0.45193254970586993, 0.4285732387966792, 0.44233668370072377, 0.4045058513435973, 0.40706917071791804, 0.1562348237788359, 0.15192398214247638, 0.19183830873033048, 0.11381342957337981, 0.18253295699273964, 0.14272737290371573, 0.08846635899383604, 0.13486940581886375, 0.16489947751109757, 0.09317325606414628, 0.10696667839175555, 0.10276607628314649, 0.1066556397268118, 0.10133276222620391, 0.10134781381068114, 0.10159155141906873, 0.0901995645432998, 0.10509441139984699, 0.06806531814270966, 0.07894718250219235, 0.08788733843608554, 0.09294185312740444, 0.07705995206656369, 0.07368205419953333, 0.10419076658204407, 0.0896965987353242, 0.08815952290802143, 0.6059931965801326, 0.7914365707933382, 0.5760794573600078, 0.561713682476779, 0.7086335664820342, 0.6452585638163797, 0.6959416057843615, 0.6355955630595329, 0.6636100793953132, 0.19221989496815872, 0.10332686353816078, 0.18837420523322868, 0.13842586244140254, 0.17270548708936606, 0.16168346446808646, 0.1982730526521349, 0.14187849143274145, 0.19291431839998419, 0.3149695205576962, 0.2595867246075664, 0.21468094573007523, 0.39691674293502, 0.28011783803112544, 0.32077562845532637, 0.2335122721580145, 0.19562231692521959, 0.25279105680017966, 0.14364206278757863, 0.15889426199008472, 0.11539101729590606, 0.1606552380129358, 0.15120944018170634, 0.12507950469305396, 0.17243158632006794, 0.1420475226452298, 0.13407427344722023, 0.16145755211215873, 0.13148714690624996, 0.20276949839399028, 0.14874837478690806, 0.1182266779603347, 0.14557943932470718, 0.19015554815967017, 0.08532572534241134, 0.14417958986613888, 0.03217636608843555, 0.0007379536527092334, 0.0025431148211513266, 0.016582066015109587, 0.000941492678347311, 0.03791076508601021, 0.0003448465572233328, 0.008166758575097632, 0.042413233778395454, 0.07351655254502854, 0.062221920608671266, 0.0517168496793472, 0.0675980580459824, 0.03327085320180834, 0.03201560615170751, 0.06865884810948752, 0.05518686854318111, 0.06681685261149328, 9.999999999998899e-05, 0.0061690263580926885, 0.00731791371156576, 0.005433194974177602, 0.0036315412884874165, 0.0038959490571085498, 0.00012958357094705608, 0.020460540404770966, 0.0002662276605875924, 0.10605736351777773, 0.0845013950908653, 0.10399473660424041, 0.07649102149896103, 0.091700765522166, 0.05537006946474632, 0.10560415356716235, 0.11431948078903953, 0.10187288260477412, 0.38469084306538937, 0.4058310578234404, 0.40124745946048834, 0.38697165722643045, 0.36736331399944766, 0.3697234589914331, 0.4337822383368265, 0.39045608204548365, 0.4058754844285949, 0.085379159284794, 0.08450770620605164, 0.07548395136855779, 0.09230646472905557, 0.08201319149952246, 0.09860571416665331, 0.09122061545389315, 0.09209619751079823, 0.08159151180087443, 0.23687293759081463, 0.2083543049023061, 0.14983314558672878, 0.2868310036036179, 0.2659690907494805, 0.1777716472085824, 0.1870720260171711, 0.2234160237913484, 0.18732756527798144, 0.19656465635664966, 0.19553812608002585, 0.25931850956357005, 0.24229846332452087, 0.2250174639885929, 0.28010161441964443, 0.2688585824659956, 0.2810649591037214, 0.26414899044929696, 0.1621107183380136, 0.20181336837685215, 0.19339056335943283, 0.20086067313704414, 0.1538944901491306, 0.21056230743393967, 0.19871728154861967, 0.21489953287856134, 0.19770653086363943, 0.2013583729532108, 0.20210157193565426, 0.2055483036583592, 0.2120592533223543, 0.20789367116380608, 0.19194591488113977, 0.19774616801824973, 0.18545679358942435, 0.1939589611623308, 0.16317018423427276, 0.18156000499103953, 0.17418779380624005, 0.19007234958777175, 0.16639798503105563, 0.1893131590187892, 0.1686725846803443, 0.17023293311013044, 0.17213995400900717, 0.17542140189516753, 0.1771963044977134, 0.4839969877902699, 0.6009308414757439, 0.18999351316992918, 0.530935967825332, 0.13792153722266465, 0.3734771170240567, 0.1516949287463194, 0.22009816070813126, 0.19199836920716684, 0.32493515667382733, 0.5900271304582425, 0.507310238580846, 0.44739320183756404, 0.15319812408756095, 0.44509067425564286, 0.19222562020981782, 0.17754667663510737, 0.19558958724394138, 0.19560938891866686, 0.16942196945566956, 0.1632401743308416, 0.18854457962518, 0.18399252901189111, 0.17576635256430895, 0.1798781961675131, 0.07443908089959572, 0.08092541002146447, 0.07122686837473025, 0.06722958292022208, 0.08348623378316611, 0.06856320221614243, 0.08109639864250873, 0.07278327672841112, 0.06710790365965547]}, "mutation_prompt": null}
{"id": "58086ab3-7c86-41e2-a37a-d23f94997748", "solution": "import numpy as np\n\nclass OptimizedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.7\n        self.CR = 0.85\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def opposition_based_learning(self, population):\n        return self.lower_bound + self.upper_bound - population\n\n    def local_search(self, x, func):\n        trial = x + np.random.uniform(-0.05, 0.05, self.dim)\n        trial = np.clip(trial, self.lower_bound, self.upper_bound)\n        return trial if func(trial) < func(x) else x\n\n    def mutate(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = indices\n        while a == idx:\n            a = np.random.choice(self.population_size)  # Ensure a != idx\n        diversity_factor = np.exp(-np.std(population, axis=0))\n        mutant = population[a] + self.F * diversity_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.CR\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        budget_used = self.population_size\n\n        while budget_used < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(population, i)\n                trial = self.crossover(population[i], mutant)\n                trial = self.local_search(trial, func)\n\n                trial_fitness = func(trial)\n                budget_used += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if budget_used < self.budget and np.random.rand() < 0.5:\n                    opposite = self.opposition_based_learning(population[i])\n                    opposite_fitness = func(opposite)\n                    budget_used += 1\n                    if opposite_fitness < fitness[i]:\n                        population[i] = opposite\n                        fitness[i] = opposite_fitness\n\n                if budget_used >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "OptimizedAdaptiveDifferentialEvolution", "description": "Enhanced diversity control and adaptive mutation scales in differential evolution for improved convergence.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b6bd6d8-9eb2-40c7-820b-fc972c59a035", "metadata": {"aucs": [0.41638628740398986, 0.44087325269180033, 0.4148527099840317, 0.4494462269351437, 0.45193254970586993, 0.4285732387966792, 0.44233668370072377, 0.4045058513435973, 0.40706917071791804, 0.1562348237788359, 0.15192398214247638, 0.19183830873033048, 0.11381342957337981, 0.18253295699273964, 0.14272737290371573, 0.08846635899383604, 0.13486940581886375, 0.16489947751109757, 0.09317325606414628, 0.10696667839175555, 0.10276607628314649, 0.1066556397268118, 0.10133276222620391, 0.10134781381068114, 0.10159155141906873, 0.0901995645432998, 0.10509441139984699, 0.06806531814270966, 0.07894718250219235, 0.08788733843608554, 0.09294185312740444, 0.07705995206656369, 0.07368205419953333, 0.10419076658204407, 0.0896965987353242, 0.08815952290802143, 0.6059931965801326, 0.7914365707933382, 0.5760794573600078, 0.561713682476779, 0.7086335664820342, 0.6452585638163797, 0.6959416057843615, 0.6355955630595329, 0.6636100793953132, 0.19221989496815872, 0.10332686353816078, 0.18837420523322868, 0.13842586244140254, 0.17270548708936606, 0.16168346446808646, 0.1982730526521349, 0.14187849143274145, 0.19291431839998419, 0.3149695205576962, 0.2595867246075664, 0.21468094573007523, 0.39691674293502, 0.28011783803112544, 0.32077562845532637, 0.2335122721580145, 0.19562231692521959, 0.25279105680017966, 0.14364206278757863, 0.15889426199008472, 0.11539101729590606, 0.1606552380129358, 0.15120944018170634, 0.12507950469305396, 0.17243158632006794, 0.1420475226452298, 0.13407427344722023, 0.16145755211215873, 0.13148714690624996, 0.20276949839399028, 0.14874837478690806, 0.1182266779603347, 0.14557943932470718, 0.19015554815967017, 0.08532572534241134, 0.14417958986613888, 0.03217636608843555, 0.0007379536527092334, 0.0025431148211513266, 0.016582066015109587, 0.000941492678347311, 0.03791076508601021, 0.0003448465572233328, 0.008166758575097632, 0.042413233778395454, 0.07351655254502854, 0.062221920608671266, 0.0517168496793472, 0.0675980580459824, 0.03327085320180834, 0.03201560615170751, 0.06865884810948752, 0.05518686854318111, 0.06681685261149328, 9.999999999998899e-05, 0.0061690263580926885, 0.00731791371156576, 0.005433194974177602, 0.0036315412884874165, 0.0038959490571085498, 0.00012958357094705608, 0.020460540404770966, 0.0002662276605875924, 0.10605736351777773, 0.0845013950908653, 0.10399473660424041, 0.07649102149896103, 0.091700765522166, 0.05537006946474632, 0.10560415356716235, 0.11431948078903953, 0.10187288260477412, 0.38469084306538937, 0.4058310578234404, 0.40124745946048834, 0.38697165722643045, 0.36736331399944766, 0.3697234589914331, 0.4337822383368265, 0.39045608204548365, 0.4058754844285949, 0.085379159284794, 0.08450770620605164, 0.07548395136855779, 0.09230646472905557, 0.08201319149952246, 0.09860571416665331, 0.09122061545389315, 0.09209619751079823, 0.08159151180087443, 0.23687293759081463, 0.2083543049023061, 0.14983314558672878, 0.2868310036036179, 0.2659690907494805, 0.1777716472085824, 0.1870720260171711, 0.2234160237913484, 0.18732756527798144, 0.19656465635664966, 0.19553812608002585, 0.25931850956357005, 0.24229846332452087, 0.2250174639885929, 0.28010161441964443, 0.2688585824659956, 0.2810649591037214, 0.26414899044929696, 0.1621107183380136, 0.20181336837685215, 0.19339056335943283, 0.20086067313704414, 0.1538944901491306, 0.21056230743393967, 0.19871728154861967, 0.21489953287856134, 0.19770653086363943, 0.2013583729532108, 0.20210157193565426, 0.2055483036583592, 0.2120592533223543, 0.20789367116380608, 0.19194591488113977, 0.19774616801824973, 0.18545679358942435, 0.1939589611623308, 0.16317018423427276, 0.18156000499103953, 0.17418779380624005, 0.19007234958777175, 0.16639798503105563, 0.1893131590187892, 0.1686725846803443, 0.17023293311013044, 0.17213995400900717, 0.17542140189516753, 0.1771963044977134, 0.4839969877902699, 0.6009308414757439, 0.18999351316992918, 0.530935967825332, 0.13792153722266465, 0.3734771170240567, 0.1516949287463194, 0.22009816070813126, 0.19199836920716684, 0.32493515667382733, 0.5900271304582425, 0.507310238580846, 0.44739320183756404, 0.15319812408756095, 0.44509067425564286, 0.19222562020981782, 0.17754667663510737, 0.19558958724394138, 0.19560938891866686, 0.16942196945566956, 0.1632401743308416, 0.18854457962518, 0.18399252901189111, 0.17576635256430895, 0.1798781961675131, 0.07443908089959572, 0.08092541002146447, 0.07122686837473025, 0.06722958292022208, 0.08348623378316611, 0.06856320221614243, 0.08109639864250873, 0.07278327672841112, 0.06710790365965547]}, "mutation_prompt": null}
{"id": "f6ba961f-346e-4fa9-9bd2-c6a6819ced30", "solution": "import numpy as np\n\nclass OptimizedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.7\n        self.CR = 0.85\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def opposition_based_learning(self, population):\n        return self.lower_bound + self.upper_bound - population\n\n    def local_search(self, x, func):\n        trial = x + np.random.uniform(-0.05, 0.05, self.dim)\n        trial = np.clip(trial, self.lower_bound, self.upper_bound)\n        return trial if func(trial) < func(x) else x\n\n    def mutate(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = indices\n        while a == idx:\n            a = np.random.choice(self.population_size)  # Ensure a != idx\n        diversity_factor = np.exp(-np.std(population, axis=0))\n        mutant = population[a] + self.F * diversity_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.CR\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        budget_used = self.population_size\n\n        while budget_used < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(population, i)\n                trial = self.crossover(population[i], mutant)\n                trial = self.local_search(trial, func)\n\n                trial_fitness = func(trial)\n                budget_used += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if budget_used < self.budget and np.random.rand() < 0.5:\n                    opposite = self.opposition_based_learning(population[i])\n                    opposite_fitness = func(opposite)\n                    budget_used += 1\n                    if opposite_fitness < fitness[i]:\n                        population[i] = opposite\n                        fitness[i] = opposite_fitness\n\n                if budget_used >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "OptimizedAdaptiveDifferentialEvolution", "description": "Enhanced diversity control and adaptive mutation scales in differential evolution for improved convergence.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b6bd6d8-9eb2-40c7-820b-fc972c59a035", "metadata": {"aucs": [0.41638628740398986, 0.44087325269180033, 0.4148527099840317, 0.4494462269351437, 0.45193254970586993, 0.4285732387966792, 0.44233668370072377, 0.4045058513435973, 0.40706917071791804, 0.1562348237788359, 0.15192398214247638, 0.19183830873033048, 0.11381342957337981, 0.18253295699273964, 0.14272737290371573, 0.08846635899383604, 0.13486940581886375, 0.16489947751109757, 0.09317325606414628, 0.10696667839175555, 0.10276607628314649, 0.1066556397268118, 0.10133276222620391, 0.10134781381068114, 0.10159155141906873, 0.0901995645432998, 0.10509441139984699, 0.06806531814270966, 0.07894718250219235, 0.08788733843608554, 0.09294185312740444, 0.07705995206656369, 0.07368205419953333, 0.10419076658204407, 0.0896965987353242, 0.08815952290802143, 0.6059931965801326, 0.7914365707933382, 0.5760794573600078, 0.561713682476779, 0.7086335664820342, 0.6452585638163797, 0.6959416057843615, 0.6355955630595329, 0.6636100793953132, 0.19221989496815872, 0.10332686353816078, 0.18837420523322868, 0.13842586244140254, 0.17270548708936606, 0.16168346446808646, 0.1982730526521349, 0.14187849143274145, 0.19291431839998419, 0.3149695205576962, 0.2595867246075664, 0.21468094573007523, 0.39691674293502, 0.28011783803112544, 0.32077562845532637, 0.2335122721580145, 0.19562231692521959, 0.25279105680017966, 0.14364206278757863, 0.15889426199008472, 0.11539101729590606, 0.1606552380129358, 0.15120944018170634, 0.12507950469305396, 0.17243158632006794, 0.1420475226452298, 0.13407427344722023, 0.16145755211215873, 0.13148714690624996, 0.20276949839399028, 0.14874837478690806, 0.1182266779603347, 0.14557943932470718, 0.19015554815967017, 0.08532572534241134, 0.14417958986613888, 0.03217636608843555, 0.0007379536527092334, 0.0025431148211513266, 0.016582066015109587, 0.000941492678347311, 0.03791076508601021, 0.0003448465572233328, 0.008166758575097632, 0.042413233778395454, 0.07351655254502854, 0.062221920608671266, 0.0517168496793472, 0.0675980580459824, 0.03327085320180834, 0.03201560615170751, 0.06865884810948752, 0.05518686854318111, 0.06681685261149328, 9.999999999998899e-05, 0.0061690263580926885, 0.00731791371156576, 0.005433194974177602, 0.0036315412884874165, 0.0038959490571085498, 0.00012958357094705608, 0.020460540404770966, 0.0002662276605875924, 0.10605736351777773, 0.0845013950908653, 0.10399473660424041, 0.07649102149896103, 0.091700765522166, 0.05537006946474632, 0.10560415356716235, 0.11431948078903953, 0.10187288260477412, 0.38469084306538937, 0.4058310578234404, 0.40124745946048834, 0.38697165722643045, 0.36736331399944766, 0.3697234589914331, 0.4337822383368265, 0.39045608204548365, 0.4058754844285949, 0.085379159284794, 0.08450770620605164, 0.07548395136855779, 0.09230646472905557, 0.08201319149952246, 0.09860571416665331, 0.09122061545389315, 0.09209619751079823, 0.08159151180087443, 0.23687293759081463, 0.2083543049023061, 0.14983314558672878, 0.2868310036036179, 0.2659690907494805, 0.1777716472085824, 0.1870720260171711, 0.2234160237913484, 0.18732756527798144, 0.19656465635664966, 0.19553812608002585, 0.25931850956357005, 0.24229846332452087, 0.2250174639885929, 0.28010161441964443, 0.2688585824659956, 0.2810649591037214, 0.26414899044929696, 0.1621107183380136, 0.20181336837685215, 0.19339056335943283, 0.20086067313704414, 0.1538944901491306, 0.21056230743393967, 0.19871728154861967, 0.21489953287856134, 0.19770653086363943, 0.2013583729532108, 0.20210157193565426, 0.2055483036583592, 0.2120592533223543, 0.20789367116380608, 0.19194591488113977, 0.19774616801824973, 0.18545679358942435, 0.1939589611623308, 0.16317018423427276, 0.18156000499103953, 0.17418779380624005, 0.19007234958777175, 0.16639798503105563, 0.1893131590187892, 0.1686725846803443, 0.17023293311013044, 0.17213995400900717, 0.17542140189516753, 0.1771963044977134, 0.4839969877902699, 0.6009308414757439, 0.18999351316992918, 0.530935967825332, 0.13792153722266465, 0.3734771170240567, 0.1516949287463194, 0.22009816070813126, 0.19199836920716684, 0.32493515667382733, 0.5900271304582425, 0.507310238580846, 0.44739320183756404, 0.15319812408756095, 0.44509067425564286, 0.19222562020981782, 0.17754667663510737, 0.19558958724394138, 0.19560938891866686, 0.16942196945566956, 0.1632401743308416, 0.18854457962518, 0.18399252901189111, 0.17576635256430895, 0.1798781961675131, 0.07443908089959572, 0.08092541002146447, 0.07122686837473025, 0.06722958292022208, 0.08348623378316611, 0.06856320221614243, 0.08109639864250873, 0.07278327672841112, 0.06710790365965547]}, "mutation_prompt": null}
{"id": "c17fce12-87fe-4788-bea7-e327bcc22985", "solution": "import numpy as np\n\nclass OptimizedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.7\n        self.CR = 0.85\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def opposition_based_learning(self, population):\n        return self.lower_bound + self.upper_bound - population\n\n    def local_search(self, x, func):\n        trial = x + np.random.uniform(-0.05, 0.05, self.dim)\n        trial = np.clip(trial, self.lower_bound, self.upper_bound)\n        return trial if func(trial) < func(x) else x\n\n    def mutate(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = indices\n        while a == idx:\n            a = np.random.choice(self.population_size)  # Ensure a != idx\n        diversity_factor = np.exp(-np.std(population, axis=0))\n        mutant = population[a] + self.F * diversity_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.CR\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        budget_used = self.population_size\n\n        while budget_used < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(population, i)\n                trial = self.crossover(population[i], mutant)\n                trial = self.local_search(trial, func)\n\n                trial_fitness = func(trial)\n                budget_used += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if budget_used < self.budget and np.random.rand() < 0.5:\n                    opposite = self.opposition_based_learning(population[i])\n                    opposite_fitness = func(opposite)\n                    budget_used += 1\n                    if opposite_fitness < fitness[i]:\n                        population[i] = opposite\n                        fitness[i] = opposite_fitness\n\n                if budget_used >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "OptimizedAdaptiveDifferentialEvolution", "description": "Enhanced diversity control and adaptive mutation scales in differential evolution for improved convergence.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b6bd6d8-9eb2-40c7-820b-fc972c59a035", "metadata": {"aucs": [0.41638628740398986, 0.44087325269180033, 0.4148527099840317, 0.4494462269351437, 0.45193254970586993, 0.4285732387966792, 0.44233668370072377, 0.4045058513435973, 0.40706917071791804, 0.1562348237788359, 0.15192398214247638, 0.19183830873033048, 0.11381342957337981, 0.18253295699273964, 0.14272737290371573, 0.08846635899383604, 0.13486940581886375, 0.16489947751109757, 0.09317325606414628, 0.10696667839175555, 0.10276607628314649, 0.1066556397268118, 0.10133276222620391, 0.10134781381068114, 0.10159155141906873, 0.0901995645432998, 0.10509441139984699, 0.06806531814270966, 0.07894718250219235, 0.08788733843608554, 0.09294185312740444, 0.07705995206656369, 0.07368205419953333, 0.10419076658204407, 0.0896965987353242, 0.08815952290802143, 0.6059931965801326, 0.7914365707933382, 0.5760794573600078, 0.561713682476779, 0.7086335664820342, 0.6452585638163797, 0.6959416057843615, 0.6355955630595329, 0.6636100793953132, 0.19221989496815872, 0.10332686353816078, 0.18837420523322868, 0.13842586244140254, 0.17270548708936606, 0.16168346446808646, 0.1982730526521349, 0.14187849143274145, 0.19291431839998419, 0.3149695205576962, 0.2595867246075664, 0.21468094573007523, 0.39691674293502, 0.28011783803112544, 0.32077562845532637, 0.2335122721580145, 0.19562231692521959, 0.25279105680017966, 0.14364206278757863, 0.15889426199008472, 0.11539101729590606, 0.1606552380129358, 0.15120944018170634, 0.12507950469305396, 0.17243158632006794, 0.1420475226452298, 0.13407427344722023, 0.16145755211215873, 0.13148714690624996, 0.20276949839399028, 0.14874837478690806, 0.1182266779603347, 0.14557943932470718, 0.19015554815967017, 0.08532572534241134, 0.14417958986613888, 0.03217636608843555, 0.0007379536527092334, 0.0025431148211513266, 0.016582066015109587, 0.000941492678347311, 0.03791076508601021, 0.0003448465572233328, 0.008166758575097632, 0.042413233778395454, 0.07351655254502854, 0.062221920608671266, 0.0517168496793472, 0.0675980580459824, 0.03327085320180834, 0.03201560615170751, 0.06865884810948752, 0.05518686854318111, 0.06681685261149328, 9.999999999998899e-05, 0.0061690263580926885, 0.00731791371156576, 0.005433194974177602, 0.0036315412884874165, 0.0038959490571085498, 0.00012958357094705608, 0.020460540404770966, 0.0002662276605875924, 0.10605736351777773, 0.0845013950908653, 0.10399473660424041, 0.07649102149896103, 0.091700765522166, 0.05537006946474632, 0.10560415356716235, 0.11431948078903953, 0.10187288260477412, 0.38469084306538937, 0.4058310578234404, 0.40124745946048834, 0.38697165722643045, 0.36736331399944766, 0.3697234589914331, 0.4337822383368265, 0.39045608204548365, 0.4058754844285949, 0.085379159284794, 0.08450770620605164, 0.07548395136855779, 0.09230646472905557, 0.08201319149952246, 0.09860571416665331, 0.09122061545389315, 0.09209619751079823, 0.08159151180087443, 0.23687293759081463, 0.2083543049023061, 0.14983314558672878, 0.2868310036036179, 0.2659690907494805, 0.1777716472085824, 0.1870720260171711, 0.2234160237913484, 0.18732756527798144, 0.19656465635664966, 0.19553812608002585, 0.25931850956357005, 0.24229846332452087, 0.2250174639885929, 0.28010161441964443, 0.2688585824659956, 0.2810649591037214, 0.26414899044929696, 0.1621107183380136, 0.20181336837685215, 0.19339056335943283, 0.20086067313704414, 0.1538944901491306, 0.21056230743393967, 0.19871728154861967, 0.21489953287856134, 0.19770653086363943, 0.2013583729532108, 0.20210157193565426, 0.2055483036583592, 0.2120592533223543, 0.20789367116380608, 0.19194591488113977, 0.19774616801824973, 0.18545679358942435, 0.1939589611623308, 0.16317018423427276, 0.18156000499103953, 0.17418779380624005, 0.19007234958777175, 0.16639798503105563, 0.1893131590187892, 0.1686725846803443, 0.17023293311013044, 0.17213995400900717, 0.17542140189516753, 0.1771963044977134, 0.4839969877902699, 0.6009308414757439, 0.18999351316992918, 0.530935967825332, 0.13792153722266465, 0.3734771170240567, 0.1516949287463194, 0.22009816070813126, 0.19199836920716684, 0.32493515667382733, 0.5900271304582425, 0.507310238580846, 0.44739320183756404, 0.15319812408756095, 0.44509067425564286, 0.19222562020981782, 0.17754667663510737, 0.19558958724394138, 0.19560938891866686, 0.16942196945566956, 0.1632401743308416, 0.18854457962518, 0.18399252901189111, 0.17576635256430895, 0.1798781961675131, 0.07443908089959572, 0.08092541002146447, 0.07122686837473025, 0.06722958292022208, 0.08348623378316611, 0.06856320221614243, 0.08109639864250873, 0.07278327672841112, 0.06710790365965547]}, "mutation_prompt": null}
{"id": "1a778829-4350-4367-b171-364b036efb6d", "solution": "import numpy as np\n\nclass OptimizedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.7\n        self.CR = 0.85\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def opposition_based_learning(self, population):\n        return self.lower_bound + self.upper_bound - population\n\n    def local_search(self, x, func):\n        trial = x + np.random.uniform(-0.05, 0.05, self.dim)\n        trial = np.clip(trial, self.lower_bound, self.upper_bound)\n        return trial if func(trial) < func(x) else x\n\n    def mutate(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = indices\n        while a == idx:\n            a = np.random.choice(self.population_size)  # Ensure a != idx\n        diversity_factor = np.exp(-np.std(population, axis=0))\n        mutant = population[a] + self.F * diversity_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.CR\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        budget_used = self.population_size\n\n        while budget_used < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(population, i)\n                trial = self.crossover(population[i], mutant)\n                trial = self.local_search(trial, func)\n\n                trial_fitness = func(trial)\n                budget_used += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if budget_used < self.budget and np.random.rand() < 0.5:\n                    opposite = self.opposition_based_learning(population[i])\n                    opposite_fitness = func(opposite)\n                    budget_used += 1\n                    if opposite_fitness < fitness[i]:\n                        population[i] = opposite\n                        fitness[i] = opposite_fitness\n\n                if budget_used >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "OptimizedAdaptiveDifferentialEvolution", "description": "Enhanced diversity control and adaptive mutation scales in differential evolution for improved convergence.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b6bd6d8-9eb2-40c7-820b-fc972c59a035", "metadata": {"aucs": [0.41638628740398986, 0.44087325269180033, 0.4148527099840317, 0.4494462269351437, 0.45193254970586993, 0.4285732387966792, 0.44233668370072377, 0.4045058513435973, 0.40706917071791804, 0.1562348237788359, 0.15192398214247638, 0.19183830873033048, 0.11381342957337981, 0.18253295699273964, 0.14272737290371573, 0.08846635899383604, 0.13486940581886375, 0.16489947751109757, 0.09317325606414628, 0.10696667839175555, 0.10276607628314649, 0.1066556397268118, 0.10133276222620391, 0.10134781381068114, 0.10159155141906873, 0.0901995645432998, 0.10509441139984699, 0.06806531814270966, 0.07894718250219235, 0.08788733843608554, 0.09294185312740444, 0.07705995206656369, 0.07368205419953333, 0.10419076658204407, 0.0896965987353242, 0.08815952290802143, 0.6059931965801326, 0.7914365707933382, 0.5760794573600078, 0.561713682476779, 0.7086335664820342, 0.6452585638163797, 0.6959416057843615, 0.6355955630595329, 0.6636100793953132, 0.19221989496815872, 0.10332686353816078, 0.18837420523322868, 0.13842586244140254, 0.17270548708936606, 0.16168346446808646, 0.1982730526521349, 0.14187849143274145, 0.19291431839998419, 0.3149695205576962, 0.2595867246075664, 0.21468094573007523, 0.39691674293502, 0.28011783803112544, 0.32077562845532637, 0.2335122721580145, 0.19562231692521959, 0.25279105680017966, 0.14364206278757863, 0.15889426199008472, 0.11539101729590606, 0.1606552380129358, 0.15120944018170634, 0.12507950469305396, 0.17243158632006794, 0.1420475226452298, 0.13407427344722023, 0.16145755211215873, 0.13148714690624996, 0.20276949839399028, 0.14874837478690806, 0.1182266779603347, 0.14557943932470718, 0.19015554815967017, 0.08532572534241134, 0.14417958986613888, 0.03217636608843555, 0.0007379536527092334, 0.0025431148211513266, 0.016582066015109587, 0.000941492678347311, 0.03791076508601021, 0.0003448465572233328, 0.008166758575097632, 0.042413233778395454, 0.07351655254502854, 0.062221920608671266, 0.0517168496793472, 0.0675980580459824, 0.03327085320180834, 0.03201560615170751, 0.06865884810948752, 0.05518686854318111, 0.06681685261149328, 9.999999999998899e-05, 0.0061690263580926885, 0.00731791371156576, 0.005433194974177602, 0.0036315412884874165, 0.0038959490571085498, 0.00012958357094705608, 0.020460540404770966, 0.0002662276605875924, 0.10605736351777773, 0.0845013950908653, 0.10399473660424041, 0.07649102149896103, 0.091700765522166, 0.05537006946474632, 0.10560415356716235, 0.11431948078903953, 0.10187288260477412, 0.38469084306538937, 0.4058310578234404, 0.40124745946048834, 0.38697165722643045, 0.36736331399944766, 0.3697234589914331, 0.4337822383368265, 0.39045608204548365, 0.4058754844285949, 0.085379159284794, 0.08450770620605164, 0.07548395136855779, 0.09230646472905557, 0.08201319149952246, 0.09860571416665331, 0.09122061545389315, 0.09209619751079823, 0.08159151180087443, 0.23687293759081463, 0.2083543049023061, 0.14983314558672878, 0.2868310036036179, 0.2659690907494805, 0.1777716472085824, 0.1870720260171711, 0.2234160237913484, 0.18732756527798144, 0.19656465635664966, 0.19553812608002585, 0.25931850956357005, 0.24229846332452087, 0.2250174639885929, 0.28010161441964443, 0.2688585824659956, 0.2810649591037214, 0.26414899044929696, 0.1621107183380136, 0.20181336837685215, 0.19339056335943283, 0.20086067313704414, 0.1538944901491306, 0.21056230743393967, 0.19871728154861967, 0.21489953287856134, 0.19770653086363943, 0.2013583729532108, 0.20210157193565426, 0.2055483036583592, 0.2120592533223543, 0.20789367116380608, 0.19194591488113977, 0.19774616801824973, 0.18545679358942435, 0.1939589611623308, 0.16317018423427276, 0.18156000499103953, 0.17418779380624005, 0.19007234958777175, 0.16639798503105563, 0.1893131590187892, 0.1686725846803443, 0.17023293311013044, 0.17213995400900717, 0.17542140189516753, 0.1771963044977134, 0.4839969877902699, 0.6009308414757439, 0.18999351316992918, 0.530935967825332, 0.13792153722266465, 0.3734771170240567, 0.1516949287463194, 0.22009816070813126, 0.19199836920716684, 0.32493515667382733, 0.5900271304582425, 0.507310238580846, 0.44739320183756404, 0.15319812408756095, 0.44509067425564286, 0.19222562020981782, 0.17754667663510737, 0.19558958724394138, 0.19560938891866686, 0.16942196945566956, 0.1632401743308416, 0.18854457962518, 0.18399252901189111, 0.17576635256430895, 0.1798781961675131, 0.07443908089959572, 0.08092541002146447, 0.07122686837473025, 0.06722958292022208, 0.08348623378316611, 0.06856320221614243, 0.08109639864250873, 0.07278327672841112, 0.06710790365965547]}, "mutation_prompt": null}
{"id": "ad1d9cc2-aa70-4364-8c90-591cb675027d", "solution": "import numpy as np\n\nclass OptimizedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.7\n        self.CR = 0.85\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def opposition_based_learning(self, population):\n        return self.lower_bound + self.upper_bound - population\n\n    def local_search(self, x, func):\n        trial = x + np.random.uniform(-0.05, 0.05, self.dim)\n        trial = np.clip(trial, self.lower_bound, self.upper_bound)\n        return trial if func(trial) < func(x) else x\n\n    def mutate(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = indices\n        while a == idx:\n            a = np.random.choice(self.population_size)  # Ensure a != idx\n        diversity_factor = np.exp(-np.std(population, axis=0))\n        mutant = population[a] + self.F * diversity_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.CR\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        budget_used = self.population_size\n\n        while budget_used < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(population, i)\n                trial = self.crossover(population[i], mutant)\n                trial = self.local_search(trial, func)\n\n                trial_fitness = func(trial)\n                budget_used += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if budget_used < self.budget and np.random.rand() < 0.5:\n                    opposite = self.opposition_based_learning(population[i])\n                    opposite_fitness = func(opposite)\n                    budget_used += 1\n                    if opposite_fitness < fitness[i]:\n                        population[i] = opposite\n                        fitness[i] = opposite_fitness\n\n                if budget_used >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "OptimizedAdaptiveDifferentialEvolution", "description": "Enhanced diversity control and adaptive mutation scales in differential evolution for improved convergence.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b6bd6d8-9eb2-40c7-820b-fc972c59a035", "metadata": {"aucs": [0.41638628740398986, 0.44087325269180033, 0.4148527099840317, 0.4494462269351437, 0.45193254970586993, 0.4285732387966792, 0.44233668370072377, 0.4045058513435973, 0.40706917071791804, 0.1562348237788359, 0.15192398214247638, 0.19183830873033048, 0.11381342957337981, 0.18253295699273964, 0.14272737290371573, 0.08846635899383604, 0.13486940581886375, 0.16489947751109757, 0.09317325606414628, 0.10696667839175555, 0.10276607628314649, 0.1066556397268118, 0.10133276222620391, 0.10134781381068114, 0.10159155141906873, 0.0901995645432998, 0.10509441139984699, 0.06806531814270966, 0.07894718250219235, 0.08788733843608554, 0.09294185312740444, 0.07705995206656369, 0.07368205419953333, 0.10419076658204407, 0.0896965987353242, 0.08815952290802143, 0.6059931965801326, 0.7914365707933382, 0.5760794573600078, 0.561713682476779, 0.7086335664820342, 0.6452585638163797, 0.6959416057843615, 0.6355955630595329, 0.6636100793953132, 0.19221989496815872, 0.10332686353816078, 0.18837420523322868, 0.13842586244140254, 0.17270548708936606, 0.16168346446808646, 0.1982730526521349, 0.14187849143274145, 0.19291431839998419, 0.3149695205576962, 0.2595867246075664, 0.21468094573007523, 0.39691674293502, 0.28011783803112544, 0.32077562845532637, 0.2335122721580145, 0.19562231692521959, 0.25279105680017966, 0.14364206278757863, 0.15889426199008472, 0.11539101729590606, 0.1606552380129358, 0.15120944018170634, 0.12507950469305396, 0.17243158632006794, 0.1420475226452298, 0.13407427344722023, 0.16145755211215873, 0.13148714690624996, 0.20276949839399028, 0.14874837478690806, 0.1182266779603347, 0.14557943932470718, 0.19015554815967017, 0.08532572534241134, 0.14417958986613888, 0.03217636608843555, 0.0007379536527092334, 0.0025431148211513266, 0.016582066015109587, 0.000941492678347311, 0.03791076508601021, 0.0003448465572233328, 0.008166758575097632, 0.042413233778395454, 0.07351655254502854, 0.062221920608671266, 0.0517168496793472, 0.0675980580459824, 0.03327085320180834, 0.03201560615170751, 0.06865884810948752, 0.05518686854318111, 0.06681685261149328, 9.999999999998899e-05, 0.0061690263580926885, 0.00731791371156576, 0.005433194974177602, 0.0036315412884874165, 0.0038959490571085498, 0.00012958357094705608, 0.020460540404770966, 0.0002662276605875924, 0.10605736351777773, 0.0845013950908653, 0.10399473660424041, 0.07649102149896103, 0.091700765522166, 0.05537006946474632, 0.10560415356716235, 0.11431948078903953, 0.10187288260477412, 0.38469084306538937, 0.4058310578234404, 0.40124745946048834, 0.38697165722643045, 0.36736331399944766, 0.3697234589914331, 0.4337822383368265, 0.39045608204548365, 0.4058754844285949, 0.085379159284794, 0.08450770620605164, 0.07548395136855779, 0.09230646472905557, 0.08201319149952246, 0.09860571416665331, 0.09122061545389315, 0.09209619751079823, 0.08159151180087443, 0.23687293759081463, 0.2083543049023061, 0.14983314558672878, 0.2868310036036179, 0.2659690907494805, 0.1777716472085824, 0.1870720260171711, 0.2234160237913484, 0.18732756527798144, 0.19656465635664966, 0.19553812608002585, 0.25931850956357005, 0.24229846332452087, 0.2250174639885929, 0.28010161441964443, 0.2688585824659956, 0.2810649591037214, 0.26414899044929696, 0.1621107183380136, 0.20181336837685215, 0.19339056335943283, 0.20086067313704414, 0.1538944901491306, 0.21056230743393967, 0.19871728154861967, 0.21489953287856134, 0.19770653086363943, 0.2013583729532108, 0.20210157193565426, 0.2055483036583592, 0.2120592533223543, 0.20789367116380608, 0.19194591488113977, 0.19774616801824973, 0.18545679358942435, 0.1939589611623308, 0.16317018423427276, 0.18156000499103953, 0.17418779380624005, 0.19007234958777175, 0.16639798503105563, 0.1893131590187892, 0.1686725846803443, 0.17023293311013044, 0.17213995400900717, 0.17542140189516753, 0.1771963044977134, 0.4839969877902699, 0.6009308414757439, 0.18999351316992918, 0.530935967825332, 0.13792153722266465, 0.3734771170240567, 0.1516949287463194, 0.22009816070813126, 0.19199836920716684, 0.32493515667382733, 0.5900271304582425, 0.507310238580846, 0.44739320183756404, 0.15319812408756095, 0.44509067425564286, 0.19222562020981782, 0.17754667663510737, 0.19558958724394138, 0.19560938891866686, 0.16942196945566956, 0.1632401743308416, 0.18854457962518, 0.18399252901189111, 0.17576635256430895, 0.1798781961675131, 0.07443908089959572, 0.08092541002146447, 0.07122686837473025, 0.06722958292022208, 0.08348623378316611, 0.06856320221614243, 0.08109639864250873, 0.07278327672841112, 0.06710790365965547]}, "mutation_prompt": null}
{"id": "5c296e9b-3aab-42be-8952-e71642b52df2", "solution": "import numpy as np\n\nclass OptimizedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.7\n        self.CR = 0.85\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def opposition_based_learning(self, population):\n        return self.lower_bound + self.upper_bound - population\n\n    def local_search(self, x, func):\n        trial = x + np.random.uniform(-0.05, 0.05, self.dim)\n        trial = np.clip(trial, self.lower_bound, self.upper_bound)\n        return trial if func(trial) < func(x) else x\n\n    def mutate(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = indices\n        while a == idx:\n            a = np.random.choice(self.population_size)  # Ensure a != idx\n        diversity_factor = np.exp(-np.std(population, axis=0))\n        mutant = population[a] + self.F * diversity_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.CR\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        budget_used = self.population_size\n\n        while budget_used < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(population, i)\n                trial = self.crossover(population[i], mutant)\n                trial = self.local_search(trial, func)\n\n                trial_fitness = func(trial)\n                budget_used += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if budget_used < self.budget and np.random.rand() < 0.5:\n                    opposite = self.opposition_based_learning(population[i])\n                    opposite_fitness = func(opposite)\n                    budget_used += 1\n                    if opposite_fitness < fitness[i]:\n                        population[i] = opposite\n                        fitness[i] = opposite_fitness\n\n                if budget_used >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "OptimizedAdaptiveDifferentialEvolution", "description": "Enhanced diversity control and adaptive mutation scales in differential evolution for improved convergence.", "configspace": "", "generation": 41, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1b6bd6d8-9eb2-40c7-820b-fc972c59a035", "metadata": {"aucs": [0.41638628740398986, 0.44087325269180033, 0.4148527099840317, 0.4494462269351437, 0.45193254970586993, 0.4285732387966792, 0.44233668370072377, 0.4045058513435973, 0.40706917071791804, 0.1562348237788359, 0.15192398214247638, 0.19183830873033048, 0.11381342957337981, 0.18253295699273964, 0.14272737290371573, 0.08846635899383604, 0.13486940581886375, 0.16489947751109757, 0.09317325606414628, 0.10696667839175555, 0.10276607628314649, 0.1066556397268118, 0.10133276222620391, 0.10134781381068114, 0.10159155141906873, 0.0901995645432998, 0.10509441139984699, 0.06806531814270966, 0.07894718250219235, 0.08788733843608554, 0.09294185312740444, 0.07705995206656369, 0.07368205419953333, 0.10419076658204407, 0.0896965987353242, 0.08815952290802143, 0.6059931965801326, 0.7914365707933382, 0.5760794573600078, 0.561713682476779, 0.7086335664820342, 0.6452585638163797, 0.6959416057843615, 0.6355955630595329, 0.6636100793953132, 0.19221989496815872, 0.10332686353816078, 0.18837420523322868, 0.13842586244140254, 0.17270548708936606, 0.16168346446808646, 0.1982730526521349, 0.14187849143274145, 0.19291431839998419, 0.3149695205576962, 0.2595867246075664, 0.21468094573007523, 0.39691674293502, 0.28011783803112544, 0.32077562845532637, 0.2335122721580145, 0.19562231692521959, 0.25279105680017966, 0.14364206278757863, 0.15889426199008472, 0.11539101729590606, 0.1606552380129358, 0.15120944018170634, 0.12507950469305396, 0.17243158632006794, 0.1420475226452298, 0.13407427344722023, 0.16145755211215873, 0.13148714690624996, 0.20276949839399028, 0.14874837478690806, 0.1182266779603347, 0.14557943932470718, 0.19015554815967017, 0.08532572534241134, 0.14417958986613888, 0.03217636608843555, 0.0007379536527092334, 0.0025431148211513266, 0.016582066015109587, 0.000941492678347311, 0.03791076508601021, 0.0003448465572233328, 0.008166758575097632, 0.042413233778395454, 0.07351655254502854, 0.062221920608671266, 0.0517168496793472, 0.0675980580459824, 0.03327085320180834, 0.03201560615170751, 0.06865884810948752, 0.05518686854318111, 0.06681685261149328, 9.999999999998899e-05, 0.0061690263580926885, 0.00731791371156576, 0.005433194974177602, 0.0036315412884874165, 0.0038959490571085498, 0.00012958357094705608, 0.020460540404770966, 0.0002662276605875924, 0.10605736351777773, 0.0845013950908653, 0.10399473660424041, 0.07649102149896103, 0.091700765522166, 0.05537006946474632, 0.10560415356716235, 0.11431948078903953, 0.10187288260477412, 0.38469084306538937, 0.4058310578234404, 0.40124745946048834, 0.38697165722643045, 0.36736331399944766, 0.3697234589914331, 0.4337822383368265, 0.39045608204548365, 0.4058754844285949, 0.085379159284794, 0.08450770620605164, 0.07548395136855779, 0.09230646472905557, 0.08201319149952246, 0.09860571416665331, 0.09122061545389315, 0.09209619751079823, 0.08159151180087443, 0.23687293759081463, 0.2083543049023061, 0.14983314558672878, 0.2868310036036179, 0.2659690907494805, 0.1777716472085824, 0.1870720260171711, 0.2234160237913484, 0.18732756527798144, 0.19656465635664966, 0.19553812608002585, 0.25931850956357005, 0.24229846332452087, 0.2250174639885929, 0.28010161441964443, 0.2688585824659956, 0.2810649591037214, 0.26414899044929696, 0.1621107183380136, 0.20181336837685215, 0.19339056335943283, 0.20086067313704414, 0.1538944901491306, 0.21056230743393967, 0.19871728154861967, 0.21489953287856134, 0.19770653086363943, 0.2013583729532108, 0.20210157193565426, 0.2055483036583592, 0.2120592533223543, 0.20789367116380608, 0.19194591488113977, 0.19774616801824973, 0.18545679358942435, 0.1939589611623308, 0.16317018423427276, 0.18156000499103953, 0.17418779380624005, 0.19007234958777175, 0.16639798503105563, 0.1893131590187892, 0.1686725846803443, 0.17023293311013044, 0.17213995400900717, 0.17542140189516753, 0.1771963044977134, 0.4839969877902699, 0.6009308414757439, 0.18999351316992918, 0.530935967825332, 0.13792153722266465, 0.3734771170240567, 0.1516949287463194, 0.22009816070813126, 0.19199836920716684, 0.32493515667382733, 0.5900271304582425, 0.507310238580846, 0.44739320183756404, 0.15319812408756095, 0.44509067425564286, 0.19222562020981782, 0.17754667663510737, 0.19558958724394138, 0.19560938891866686, 0.16942196945566956, 0.1632401743308416, 0.18854457962518, 0.18399252901189111, 0.17576635256430895, 0.1798781961675131, 0.07443908089959572, 0.08092541002146447, 0.07122686837473025, 0.06722958292022208, 0.08348623378316611, 0.06856320221614243, 0.08109639864250873, 0.07278327672841112, 0.06710790365965547]}, "mutation_prompt": null}
{"id": "fee4dec4-c581-4c24-8676-7ade8021b828", "solution": "import numpy as np\n\nclass OptimizedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.7\n        self.CR = 0.85\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def opposition_based_learning(self, individual):\n        return self.lower_bound + self.upper_bound - individual\n\n    def local_search(self, x, func):\n        trial = x + np.random.uniform(-0.05, 0.05, self.dim)\n        trial = np.clip(trial, self.lower_bound, self.upper_bound)\n        return trial if func(trial) < func(x) else x\n\n    def mutate(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = indices\n        while a == idx:\n            a = np.random.choice(self.population_size)\n        diversity_factor = np.exp(-np.std(population, axis=0).mean())  # Simplified calculation\n        mutant = population[a] + self.F * diversity_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.CR\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        budget_used = self.population_size\n\n        while budget_used < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(population, i)\n                trial = self.crossover(population[i], mutant)\n                trial = self.local_search(trial, func)\n\n                trial_fitness = func(trial)\n                budget_used += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if budget_used < self.budget and np.random.rand() < 0.5:\n                    opposite = self.opposition_based_learning(population[i])\n                    opposite_fitness = func(opposite)\n                    budget_used += 1\n                    if opposite_fitness < fitness[i]:\n                        population[i] = opposite\n                        fitness[i] = opposite_fitness\n\n                if budget_used >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "OptimizedAdaptiveDifferentialEvolution", "description": "Optimized differential evolution with reduced complexity through efficient mutation and crossover processes.", "configspace": "", "generation": 83, "fitness": 0.2053661534888753, "feedback": "The algorithm OptimizedAdaptiveDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.15.", "error": "", "parent_id": "1b6bd6d8-9eb2-40c7-820b-fc972c59a035", "metadata": {"aucs": [0.4289818566732434, 0.46504556031436284, 0.43525593459029077, 0.42072093476378924, 0.48310392086724974, 0.4604419276351438, 0.4255475671180051, 0.4385677822339934, 0.39129332439736886, 0.22615912269606386, 0.18813670995690368, 0.18362503179108347, 0.15708002218634187, 0.23833650834531572, 0.18769582941876994, 0.17996583090882212, 0.1815468689820775, 0.19476113683897134, 0.11565825078071235, 0.09210561935595829, 0.11332196678391016, 0.09840940271027065, 0.0916034326461389, 0.10451724407003038, 0.10829919624889262, 0.12531775815417312, 0.09790640192598221, 0.08229744219375701, 0.08086307244439273, 0.09734405269319013, 0.11146290008601822, 0.0968437944511421, 0.08349046482219491, 0.09928237107755444, 0.08422827817048295, 0.07554372614758176, 0.6337860281224914, 0.5580045894527108, 0.7025490636384191, 0.6646140483440439, 0.5860942780322385, 0.5107154117571258, 0.5340508133157191, 0.7478740644577289, 0.5662071261772881, 0.2280089364094724, 0.0730460761307622, 0.13932780784909027, 0.15778877444130213, 0.13268998723901493, 0.18066797340737506, 0.17820212034589566, 0.1753396039527655, 0.1878256919469905, 0.43408676232792165, 0.43499514115711113, 0.24951272969147908, 0.4931185352854143, 0.46586616628534927, 0.1779448893079414, 0.2865313074610619, 0.4755680292982887, 0.24254225182786593, 0.13258418129062688, 0.16348186126799047, 0.1391946846396055, 0.16832814888451852, 0.12941097108378707, 0.14026561660391068, 0.20436800790679432, 0.15362774580057703, 0.14177341511181474, 0.14166469793141767, 0.13134433347898633, 0.18708178255820718, 0.16931592315245647, 0.153004695739544, 0.1749684663124622, 0.15131187485809283, 0.15348500905116702, 0.17217715842312087, 0.03129171039613121, 0.05036910218917223, 0.0264253556940941, 0.05993229594315197, 0.06597382919628147, 0.06472108682101696, 0.06344553838790556, 0.02860636135175898, 0.11061832466029575, 0.1249596566543163, 0.11579602866455374, 0.11738772892523686, 0.08748385703626793, 0.07134608142998278, 0.13893725969288184, 0.12996353323829968, 0.0847610892931725, 0.23852877831614838, 0.005162331687069255, 0.015370047779079132, 0.0018007731921994008, 0.01636163699909743, 0.020512174046345866, 0.010637913663928744, 0.005273157781771065, 0.014567954676070305, 0.021043424509668673, 0.11418434080985629, 0.1080374708151639, 0.09747263472633927, 0.10841491222251465, 0.1067271408462499, 0.10674034663561327, 0.09908586950661469, 0.11127026855869993, 0.09784106734475095, 0.3765545740660794, 0.3995381805970435, 0.4363760532422356, 0.36526098015295483, 0.38407155009975835, 0.35049005478499706, 0.42310368089170725, 0.3752063191282373, 0.4117985298524096, 0.09876805839673652, 0.0738664984802544, 0.09742999877716751, 0.0918941017311723, 0.08503828373283762, 0.08225397091571773, 0.07728519944707513, 0.08467231238598816, 0.08635767125310745, 0.23456997105586697, 0.1948904657963939, 0.21185468573129784, 0.19339736893776582, 0.22317547447015973, 0.2552605635962628, 0.18821835164290368, 0.18696315985848044, 0.17864098837858422, 0.20954602086033702, 0.2586965544273878, 0.2684095013672372, 0.2534102244412326, 0.23836886464774898, 0.28021879750687007, 0.27232349445493675, 0.2788897189163384, 0.24146103694475962, 0.16801638407965713, 0.1920358202275967, 0.2147091559747648, 0.20448736708873905, 0.16725954811847454, 0.21385673080221745, 0.21923191559366106, 0.23105239850398673, 0.212303613417948, 0.2011822900299911, 0.18607988292333444, 0.19852504473522115, 0.20700653769942423, 0.19130686012456422, 0.20215389179825805, 0.20240116218482918, 0.20073504507014728, 0.2209221658850754, 0.16302768942091295, 0.18151208584100276, 0.17554910509854504, 0.1818308153426107, 0.17317598642441268, 0.18110092476260686, 0.17800223578594965, 0.1666338670287436, 0.16591785065399234, 0.17184531274768855, 0.15981369454874716, 0.401016440524271, 0.1846041102179784, 0.18948963769846883, 0.4347636678856771, 0.1373628394323959, 0.13136281211594447, 0.15149744120570652, 0.3126102794543759, 0.1513522188629346, 0.4205209547434958, 0.47658994152073775, 0.4471065026351603, 0.4977676310269219, 0.155219175492337, 0.5759265940691272, 0.16060955998553672, 0.19325502953103446, 0.1666576823234056, 0.20777785649570146, 0.18466124155475327, 0.18060564174710148, 0.18248362373521387, 0.18496250041352136, 0.21581371792155402, 0.18701106332125683, 0.08023679390886151, 0.06898813768752221, 0.06904177953387547, 0.08082310929797532, 0.08065111365499489, 0.08256694686766786, 0.06863959783990103, 0.08113800479305933, 0.07587975328561658]}, "mutation_prompt": null}
{"id": "a13b2879-b8f9-4365-869c-892240c3f606", "solution": "import numpy as np\n\nclass OptimizedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.7\n        self.CR = 0.85  # Initial crossover rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def opposition_based_learning(self, individual):\n        return self.lower_bound + self.upper_bound - individual\n\n    def local_search(self, x, func):\n        trial = x + np.random.uniform(-0.05, 0.05, self.dim)\n        trial = np.clip(trial, self.lower_bound, self.upper_bound)\n        return trial if func(trial) < func(x) else x\n\n    def mutate(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = indices\n        while a == idx:\n            a = np.random.choice(self.population_size)\n        diversity_factor = np.exp(-np.std(population, axis=0).mean())\n        mutant = population[a] + self.F * diversity_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant, current_iteration, max_iterations):\n        dynamic_CR = self.CR - (0.5 * current_iteration / max_iterations)  # Dynamic crossover adjustment\n        cross_points = np.random.rand(self.dim) < dynamic_CR\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        budget_used = self.population_size\n        max_iterations = self.budget // self.population_size\n\n        for current_iteration in range(max_iterations):\n            if budget_used >= self.budget:\n                break\n            for i in range(self.population_size):\n                mutant = self.mutate(population, i)\n                trial = self.crossover(population[i], mutant, current_iteration, max_iterations)\n                trial = self.local_search(trial, func)\n\n                trial_fitness = func(trial)\n                budget_used += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if budget_used < self.budget and np.random.rand() < 0.5:\n                    opposite = self.opposition_based_learning(population[i])\n                    opposite_fitness = func(opposite)\n                    budget_used += 1\n                    if opposite_fitness < fitness[i]:\n                        population[i] = opposite\n                        fitness[i] = opposite_fitness\n\n                if budget_used >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "OptimizedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution utilizing a dynamic crossover rate for improved exploration-exploitation balance.", "configspace": "", "generation": 84, "fitness": 0.1961312787152561, "feedback": "The algorithm OptimizedAdaptiveDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.14.", "error": "", "parent_id": "fee4dec4-c581-4c24-8676-7ade8021b828", "metadata": {"aucs": [0.4361358733196862, 0.46664055731693066, 0.4280617278313137, 0.4553372660734175, 0.4564025037294397, 0.4505379335941524, 0.4571913403928892, 0.4572085002849361, 0.39562360020770726, 0.16639627438132443, 0.2099193804779831, 0.1842247513158266, 0.20487673538263296, 0.2255893501518137, 0.20285513417478707, 0.21115574830698447, 0.17959000305531825, 0.19575737259283377, 0.12359021194355047, 0.11566866364034434, 0.1070736000220408, 0.1057530923987906, 0.09585348951217043, 0.10032222392990953, 0.13238386865280805, 0.08916702732458182, 0.09735720513603796, 0.07633735715584822, 0.08390943096831305, 0.09852976367398392, 0.10450779986714698, 0.09545595115092509, 0.08875828726978707, 0.09553932373223473, 0.08503950696030038, 0.09315940166515668, 0.6276425789170064, 0.6670538308749725, 0.6127233861040333, 0.5861995412252989, 0.6590519156660632, 0.6299677859750199, 0.68600139454563, 0.7038581326194575, 0.6188422282420634, 0.1917108223543038, 0.06709072384411574, 0.15104343524343622, 0.13925752743011233, 0.11005870575079812, 0.16668822923386628, 0.17790055731157195, 0.18474029267264835, 0.15196017877373602, 0.25130837462392563, 0.32505677981439707, 0.23395622140436922, 0.25989237319395053, 0.4701961935689615, 0.28937996484242756, 0.1874666222317768, 0.20015307698270057, 0.23671379207751642, 0.14546587881206563, 0.16503430635123373, 0.13507687851399386, 0.18192512584137177, 0.12691886666392327, 0.14743590673474505, 0.1661577668868155, 0.12420444248205609, 0.12476745561043423, 0.1337595175046563, 0.15682093976010625, 0.1660795925064874, 0.1431874566910898, 0.14400866698528247, 0.1384724104783952, 0.14455077411369843, 0.1051961741844134, 0.1283852387828458, 9.999999999998899e-05, 0.04396049219975795, 0.003561956678409639, 0.0306384579795298, 0.03400124245964031, 0.027453406793684576, 0.018025684612878123, 0.012379720187804755, 0.08029293534322768, 0.13522296943415202, 0.1281154664150459, 0.09423130555732895, 0.07648632536859079, 0.05795414509330754, 0.07145114195350066, 0.0947002895371154, 0.08224216768222581, 0.13889289623606638, 9.999999999998899e-05, 9.999999999998899e-05, 0.0014650051883386972, 0.002339696023737403, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0009878597920324195, 9.999999999998899e-05, 0.10219938555482988, 0.08608204402420983, 0.08970040491085751, 0.07931496420922757, 0.09273450738260558, 0.06859867786603213, 0.09099848006674038, 0.10484022286636996, 0.09443614537775324, 0.37708369529856367, 0.38447342887940317, 0.417593004337681, 0.3709401510086544, 0.3802465765315963, 0.3701357632806114, 0.3935523199201363, 0.38727210819161595, 0.39682683716198275, 0.08514580142101458, 0.08671343454483371, 0.09059298812584182, 0.09409433500599662, 0.09085264408854565, 0.09294702767752627, 0.08247398758796665, 0.07405385752182869, 0.09726607060140724, 0.23959885524108615, 0.19307077406661544, 0.21916040835989947, 0.16899122933828403, 0.2242745144199102, 0.16934615183616897, 0.16058345970159082, 0.16351210029868601, 0.1628903690593586, 0.2018638819255113, 0.25196969150652715, 0.253390717121453, 0.24557945995201025, 0.23615815778531235, 0.275528214630512, 0.25629910565600034, 0.27988198958077215, 0.24625153833083746, 0.16076952231632513, 0.19640413142201185, 0.21311164920416648, 0.18768349093216352, 0.1500833905116502, 0.20294498365630376, 0.22365779608600278, 0.2208889039680214, 0.20365782143484656, 0.19600310836610035, 0.1810961117449027, 0.22696003349656435, 0.21017157641241868, 0.17286619902283296, 0.19529429593854886, 0.1991332964596786, 0.18528360030099233, 0.2102792761992689, 0.16731495137956864, 0.1867738291234794, 0.18021449848408988, 0.19536391623557925, 0.19044822959807284, 0.18710171536403886, 0.17634245325340558, 0.1710723254821096, 0.17551567049781447, 0.16987290764129048, 0.1658529396380951, 0.3961304637086559, 0.29586695217785897, 0.18973250334556624, 0.34058999178907645, 0.13607837491642438, 0.15748601884843205, 0.15162420939158416, 0.2578071301911399, 0.14974989372563463, 0.4204176331194479, 0.497001262891012, 0.460575461813444, 0.37009042254864444, 0.15645191982491868, 0.39882360117217486, 0.16109789484928183, 0.19328019568821642, 0.19997721752447262, 0.19836877618414772, 0.18442260133746757, 0.18050763456307684, 0.18638392118106517, 0.18456279405327114, 0.20607404893124326, 0.18994227330009084, 0.0875264416326842, 0.08429701498486997, 0.06951507316444872, 0.0730957707347627, 0.08361182107155818, 0.07608251598621207, 0.08127838069132431, 0.07009499032091804, 0.07375340384942775]}, "mutation_prompt": null}
{"id": "53aa6865-e748-4cfc-a958-62445c4701a0", "solution": "import numpy as np\n\nclass OptimizedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.7\n        self.CR = 0.85\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def opposition_based_learning(self, individual):\n        return self.lower_bound + self.upper_bound - individual\n\n    def local_search(self, x, func):\n        trial = x + np.random.uniform(-0.05, 0.05, self.dim)\n        trial = np.clip(trial, self.lower_bound, self.upper_bound)\n        return trial if func(trial) < func(x) else x\n\n    def mutate(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = indices\n        while a == idx:\n            a = np.random.choice(self.population_size)\n        diversity_factor = np.exp(-np.std(population, axis=0).mean())  # Simplified calculation\n        mutant = population[a] + self.F * diversity_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.CR\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        budget_used = self.population_size\n\n        while budget_used < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(population, i)\n                trial = self.crossover(population[i], mutant)\n                trial = self.local_search(trial, func)\n\n                trial_fitness = func(trial)\n                budget_used += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if budget_used < self.budget and np.random.rand() < 0.5:\n                    opposite = self.opposition_based_learning(population[i])\n                    opposite_fitness = func(opposite)\n                    budget_used += 1\n                    if opposite_fitness < fitness[i]:\n                        population[i] = opposite\n                        fitness[i] = opposite_fitness\n\n                if budget_used >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "OptimizedAdaptiveDifferentialEvolution", "description": "Optimized differential evolution with reduced complexity through efficient mutation and crossover processes.", "configspace": "", "generation": 84, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fee4dec4-c581-4c24-8676-7ade8021b828", "metadata": {"aucs": [0.4289818566732434, 0.46504556031436284, 0.43525593459029077, 0.42072093476378924, 0.48310392086724974, 0.4604419276351438, 0.4255475671180051, 0.4385677822339934, 0.39129332439736886, 0.22615912269606386, 0.18813670995690368, 0.18362503179108347, 0.15708002218634187, 0.23833650834531572, 0.18769582941876994, 0.17996583090882212, 0.1815468689820775, 0.19476113683897134, 0.11565825078071235, 0.09210561935595829, 0.11332196678391016, 0.09840940271027065, 0.0916034326461389, 0.10451724407003038, 0.10829919624889262, 0.12531775815417312, 0.09790640192598221, 0.08229744219375701, 0.08086307244439273, 0.09734405269319013, 0.11146290008601822, 0.0968437944511421, 0.08349046482219491, 0.09928237107755444, 0.08422827817048295, 0.07554372614758176, 0.6337860281224914, 0.5580045894527108, 0.7025490636384191, 0.6646140483440439, 0.5860942780322385, 0.5107154117571258, 0.5340508133157191, 0.7478740644577289, 0.5662071261772881, 0.2280089364094724, 0.0730460761307622, 0.13932780784909027, 0.15778877444130213, 0.13268998723901493, 0.18066797340737506, 0.17820212034589566, 0.1753396039527655, 0.1878256919469905, 0.43408676232792165, 0.43499514115711113, 0.24951272969147908, 0.4931185352854143, 0.46586616628534927, 0.1779448893079414, 0.2865313074610619, 0.4755680292982887, 0.24254225182786593, 0.13258418129062688, 0.16348186126799047, 0.1391946846396055, 0.16832814888451852, 0.12941097108378707, 0.14026561660391068, 0.20436800790679432, 0.15362774580057703, 0.14177341511181474, 0.14166469793141767, 0.13134433347898633, 0.18708178255820718, 0.16931592315245647, 0.153004695739544, 0.1749684663124622, 0.15131187485809283, 0.15348500905116702, 0.17217715842312087, 0.03129171039613121, 0.05036910218917223, 0.0264253556940941, 0.05993229594315197, 0.06597382919628147, 0.06472108682101696, 0.06344553838790556, 0.02860636135175898, 0.11061832466029575, 0.1249596566543163, 0.11579602866455374, 0.11738772892523686, 0.08748385703626793, 0.07134608142998278, 0.13893725969288184, 0.12996353323829968, 0.0847610892931725, 0.23852877831614838, 0.005162331687069255, 0.015370047779079132, 0.0018007731921994008, 0.01636163699909743, 0.020512174046345866, 0.010637913663928744, 0.005273157781771065, 0.014567954676070305, 0.021043424509668673, 0.11418434080985629, 0.1080374708151639, 0.09747263472633927, 0.10841491222251465, 0.1067271408462499, 0.10674034663561327, 0.09908586950661469, 0.11127026855869993, 0.09784106734475095, 0.3765545740660794, 0.3995381805970435, 0.4363760532422356, 0.36526098015295483, 0.38407155009975835, 0.35049005478499706, 0.42310368089170725, 0.3752063191282373, 0.4117985298524096, 0.09876805839673652, 0.0738664984802544, 0.09742999877716751, 0.0918941017311723, 0.08503828373283762, 0.08225397091571773, 0.07728519944707513, 0.08467231238598816, 0.08635767125310745, 0.23456997105586697, 0.1948904657963939, 0.21185468573129784, 0.19339736893776582, 0.22317547447015973, 0.2552605635962628, 0.18821835164290368, 0.18696315985848044, 0.17864098837858422, 0.20954602086033702, 0.2586965544273878, 0.2684095013672372, 0.2534102244412326, 0.23836886464774898, 0.28021879750687007, 0.27232349445493675, 0.2788897189163384, 0.24146103694475962, 0.16801638407965713, 0.1920358202275967, 0.2147091559747648, 0.20448736708873905, 0.16725954811847454, 0.21385673080221745, 0.21923191559366106, 0.23105239850398673, 0.212303613417948, 0.2011822900299911, 0.18607988292333444, 0.19852504473522115, 0.20700653769942423, 0.19130686012456422, 0.20215389179825805, 0.20240116218482918, 0.20073504507014728, 0.2209221658850754, 0.16302768942091295, 0.18151208584100276, 0.17554910509854504, 0.1818308153426107, 0.17317598642441268, 0.18110092476260686, 0.17800223578594965, 0.1666338670287436, 0.16591785065399234, 0.17184531274768855, 0.15981369454874716, 0.401016440524271, 0.1846041102179784, 0.18948963769846883, 0.4347636678856771, 0.1373628394323959, 0.13136281211594447, 0.15149744120570652, 0.3126102794543759, 0.1513522188629346, 0.4205209547434958, 0.47658994152073775, 0.4471065026351603, 0.4977676310269219, 0.155219175492337, 0.5759265940691272, 0.16060955998553672, 0.19325502953103446, 0.1666576823234056, 0.20777785649570146, 0.18466124155475327, 0.18060564174710148, 0.18248362373521387, 0.18496250041352136, 0.21581371792155402, 0.18701106332125683, 0.08023679390886151, 0.06898813768752221, 0.06904177953387547, 0.08082310929797532, 0.08065111365499489, 0.08256694686766786, 0.06863959783990103, 0.08113800479305933, 0.07587975328561658]}, "mutation_prompt": null}
{"id": "ad04e7a9-bda0-48be-8f02-d4d0627abfd1", "solution": "import numpy as np\n\nclass OptimizedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.7\n        self.CR = 0.85\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def opposition_based_learning(self, individual):\n        return self.lower_bound + self.upper_bound - individual\n\n    def local_search(self, x, func):\n        trial = x + np.random.uniform(-0.05, 0.05, self.dim)\n        trial = np.clip(trial, self.lower_bound, self.upper_bound)\n        return trial if func(trial) < func(x) else x\n\n    def mutate(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = indices\n        while a == idx:\n            a = np.random.choice(self.population_size)\n        diversity_factor = np.exp(-np.std(population, axis=0).mean())  # Simplified calculation\n        mutant = population[a] + self.F * diversity_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.CR\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        budget_used = self.population_size\n\n        while budget_used < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(population, i)\n                trial = self.crossover(population[i], mutant)\n                trial = self.local_search(trial, func)\n\n                trial_fitness = func(trial)\n                budget_used += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if budget_used < self.budget and np.random.rand() < 0.5:\n                    opposite = self.opposition_based_learning(population[i])\n                    opposite_fitness = func(opposite)\n                    budget_used += 1\n                    if opposite_fitness < fitness[i]:\n                        population[i] = opposite\n                        fitness[i] = opposite_fitness\n\n                if budget_used >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "OptimizedAdaptiveDifferentialEvolution", "description": "Optimized differential evolution with reduced complexity through efficient mutation and crossover processes.", "configspace": "", "generation": 84, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fee4dec4-c581-4c24-8676-7ade8021b828", "metadata": {"aucs": [0.4289818566732434, 0.46504556031436284, 0.43525593459029077, 0.42072093476378924, 0.48310392086724974, 0.4604419276351438, 0.4255475671180051, 0.4385677822339934, 0.39129332439736886, 0.22615912269606386, 0.18813670995690368, 0.18362503179108347, 0.15708002218634187, 0.23833650834531572, 0.18769582941876994, 0.17996583090882212, 0.1815468689820775, 0.19476113683897134, 0.11565825078071235, 0.09210561935595829, 0.11332196678391016, 0.09840940271027065, 0.0916034326461389, 0.10451724407003038, 0.10829919624889262, 0.12531775815417312, 0.09790640192598221, 0.08229744219375701, 0.08086307244439273, 0.09734405269319013, 0.11146290008601822, 0.0968437944511421, 0.08349046482219491, 0.09928237107755444, 0.08422827817048295, 0.07554372614758176, 0.6337860281224914, 0.5580045894527108, 0.7025490636384191, 0.6646140483440439, 0.5860942780322385, 0.5107154117571258, 0.5340508133157191, 0.7478740644577289, 0.5662071261772881, 0.2280089364094724, 0.0730460761307622, 0.13932780784909027, 0.15778877444130213, 0.13268998723901493, 0.18066797340737506, 0.17820212034589566, 0.1753396039527655, 0.1878256919469905, 0.43408676232792165, 0.43499514115711113, 0.24951272969147908, 0.4931185352854143, 0.46586616628534927, 0.1779448893079414, 0.2865313074610619, 0.4755680292982887, 0.24254225182786593, 0.13258418129062688, 0.16348186126799047, 0.1391946846396055, 0.16832814888451852, 0.12941097108378707, 0.14026561660391068, 0.20436800790679432, 0.15362774580057703, 0.14177341511181474, 0.14166469793141767, 0.13134433347898633, 0.18708178255820718, 0.16931592315245647, 0.153004695739544, 0.1749684663124622, 0.15131187485809283, 0.15348500905116702, 0.17217715842312087, 0.03129171039613121, 0.05036910218917223, 0.0264253556940941, 0.05993229594315197, 0.06597382919628147, 0.06472108682101696, 0.06344553838790556, 0.02860636135175898, 0.11061832466029575, 0.1249596566543163, 0.11579602866455374, 0.11738772892523686, 0.08748385703626793, 0.07134608142998278, 0.13893725969288184, 0.12996353323829968, 0.0847610892931725, 0.23852877831614838, 0.005162331687069255, 0.015370047779079132, 0.0018007731921994008, 0.01636163699909743, 0.020512174046345866, 0.010637913663928744, 0.005273157781771065, 0.014567954676070305, 0.021043424509668673, 0.11418434080985629, 0.1080374708151639, 0.09747263472633927, 0.10841491222251465, 0.1067271408462499, 0.10674034663561327, 0.09908586950661469, 0.11127026855869993, 0.09784106734475095, 0.3765545740660794, 0.3995381805970435, 0.4363760532422356, 0.36526098015295483, 0.38407155009975835, 0.35049005478499706, 0.42310368089170725, 0.3752063191282373, 0.4117985298524096, 0.09876805839673652, 0.0738664984802544, 0.09742999877716751, 0.0918941017311723, 0.08503828373283762, 0.08225397091571773, 0.07728519944707513, 0.08467231238598816, 0.08635767125310745, 0.23456997105586697, 0.1948904657963939, 0.21185468573129784, 0.19339736893776582, 0.22317547447015973, 0.2552605635962628, 0.18821835164290368, 0.18696315985848044, 0.17864098837858422, 0.20954602086033702, 0.2586965544273878, 0.2684095013672372, 0.2534102244412326, 0.23836886464774898, 0.28021879750687007, 0.27232349445493675, 0.2788897189163384, 0.24146103694475962, 0.16801638407965713, 0.1920358202275967, 0.2147091559747648, 0.20448736708873905, 0.16725954811847454, 0.21385673080221745, 0.21923191559366106, 0.23105239850398673, 0.212303613417948, 0.2011822900299911, 0.18607988292333444, 0.19852504473522115, 0.20700653769942423, 0.19130686012456422, 0.20215389179825805, 0.20240116218482918, 0.20073504507014728, 0.2209221658850754, 0.16302768942091295, 0.18151208584100276, 0.17554910509854504, 0.1818308153426107, 0.17317598642441268, 0.18110092476260686, 0.17800223578594965, 0.1666338670287436, 0.16591785065399234, 0.17184531274768855, 0.15981369454874716, 0.401016440524271, 0.1846041102179784, 0.18948963769846883, 0.4347636678856771, 0.1373628394323959, 0.13136281211594447, 0.15149744120570652, 0.3126102794543759, 0.1513522188629346, 0.4205209547434958, 0.47658994152073775, 0.4471065026351603, 0.4977676310269219, 0.155219175492337, 0.5759265940691272, 0.16060955998553672, 0.19325502953103446, 0.1666576823234056, 0.20777785649570146, 0.18466124155475327, 0.18060564174710148, 0.18248362373521387, 0.18496250041352136, 0.21581371792155402, 0.18701106332125683, 0.08023679390886151, 0.06898813768752221, 0.06904177953387547, 0.08082310929797532, 0.08065111365499489, 0.08256694686766786, 0.06863959783990103, 0.08113800479305933, 0.07587975328561658]}, "mutation_prompt": null}
{"id": "cc4db28d-fb67-474c-a7a6-f77a3a190e49", "solution": "import numpy as np\n\nclass OptimizedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.7\n        self.CR = 0.85\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def opposition_based_learning(self, individual):\n        return self.lower_bound + self.upper_bound - individual\n\n    def local_search(self, x, func):\n        trial = x + np.random.uniform(-0.05, 0.05, self.dim)\n        trial = np.clip(trial, self.lower_bound, self.upper_bound)\n        return trial if func(trial) < func(x) else x\n\n    def mutate(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = indices\n        while a == idx:\n            a = np.random.choice(self.population_size)\n        diversity_factor = np.exp(-np.std(population, axis=0).mean())  # Simplified calculation\n        mutant = population[a] + self.F * diversity_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.CR\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        budget_used = self.population_size\n\n        while budget_used < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(population, i)\n                trial = self.crossover(population[i], mutant)\n                trial = self.local_search(trial, func)\n\n                trial_fitness = func(trial)\n                budget_used += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if budget_used < self.budget and np.random.rand() < 0.5:\n                    opposite = self.opposition_based_learning(population[i])\n                    opposite_fitness = func(opposite)\n                    budget_used += 1\n                    if opposite_fitness < fitness[i]:\n                        population[i] = opposite\n                        fitness[i] = opposite_fitness\n\n                if budget_used >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "OptimizedAdaptiveDifferentialEvolution", "description": "Optimized differential evolution with reduced complexity through efficient mutation and crossover processes.", "configspace": "", "generation": 84, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fee4dec4-c581-4c24-8676-7ade8021b828", "metadata": {"aucs": [0.4289818566732434, 0.46504556031436284, 0.43525593459029077, 0.42072093476378924, 0.48310392086724974, 0.4604419276351438, 0.4255475671180051, 0.4385677822339934, 0.39129332439736886, 0.22615912269606386, 0.18813670995690368, 0.18362503179108347, 0.15708002218634187, 0.23833650834531572, 0.18769582941876994, 0.17996583090882212, 0.1815468689820775, 0.19476113683897134, 0.11565825078071235, 0.09210561935595829, 0.11332196678391016, 0.09840940271027065, 0.0916034326461389, 0.10451724407003038, 0.10829919624889262, 0.12531775815417312, 0.09790640192598221, 0.08229744219375701, 0.08086307244439273, 0.09734405269319013, 0.11146290008601822, 0.0968437944511421, 0.08349046482219491, 0.09928237107755444, 0.08422827817048295, 0.07554372614758176, 0.6337860281224914, 0.5580045894527108, 0.7025490636384191, 0.6646140483440439, 0.5860942780322385, 0.5107154117571258, 0.5340508133157191, 0.7478740644577289, 0.5662071261772881, 0.2280089364094724, 0.0730460761307622, 0.13932780784909027, 0.15778877444130213, 0.13268998723901493, 0.18066797340737506, 0.17820212034589566, 0.1753396039527655, 0.1878256919469905, 0.43408676232792165, 0.43499514115711113, 0.24951272969147908, 0.4931185352854143, 0.46586616628534927, 0.1779448893079414, 0.2865313074610619, 0.4755680292982887, 0.24254225182786593, 0.13258418129062688, 0.16348186126799047, 0.1391946846396055, 0.16832814888451852, 0.12941097108378707, 0.14026561660391068, 0.20436800790679432, 0.15362774580057703, 0.14177341511181474, 0.14166469793141767, 0.13134433347898633, 0.18708178255820718, 0.16931592315245647, 0.153004695739544, 0.1749684663124622, 0.15131187485809283, 0.15348500905116702, 0.17217715842312087, 0.03129171039613121, 0.05036910218917223, 0.0264253556940941, 0.05993229594315197, 0.06597382919628147, 0.06472108682101696, 0.06344553838790556, 0.02860636135175898, 0.11061832466029575, 0.1249596566543163, 0.11579602866455374, 0.11738772892523686, 0.08748385703626793, 0.07134608142998278, 0.13893725969288184, 0.12996353323829968, 0.0847610892931725, 0.23852877831614838, 0.005162331687069255, 0.015370047779079132, 0.0018007731921994008, 0.01636163699909743, 0.020512174046345866, 0.010637913663928744, 0.005273157781771065, 0.014567954676070305, 0.021043424509668673, 0.11418434080985629, 0.1080374708151639, 0.09747263472633927, 0.10841491222251465, 0.1067271408462499, 0.10674034663561327, 0.09908586950661469, 0.11127026855869993, 0.09784106734475095, 0.3765545740660794, 0.3995381805970435, 0.4363760532422356, 0.36526098015295483, 0.38407155009975835, 0.35049005478499706, 0.42310368089170725, 0.3752063191282373, 0.4117985298524096, 0.09876805839673652, 0.0738664984802544, 0.09742999877716751, 0.0918941017311723, 0.08503828373283762, 0.08225397091571773, 0.07728519944707513, 0.08467231238598816, 0.08635767125310745, 0.23456997105586697, 0.1948904657963939, 0.21185468573129784, 0.19339736893776582, 0.22317547447015973, 0.2552605635962628, 0.18821835164290368, 0.18696315985848044, 0.17864098837858422, 0.20954602086033702, 0.2586965544273878, 0.2684095013672372, 0.2534102244412326, 0.23836886464774898, 0.28021879750687007, 0.27232349445493675, 0.2788897189163384, 0.24146103694475962, 0.16801638407965713, 0.1920358202275967, 0.2147091559747648, 0.20448736708873905, 0.16725954811847454, 0.21385673080221745, 0.21923191559366106, 0.23105239850398673, 0.212303613417948, 0.2011822900299911, 0.18607988292333444, 0.19852504473522115, 0.20700653769942423, 0.19130686012456422, 0.20215389179825805, 0.20240116218482918, 0.20073504507014728, 0.2209221658850754, 0.16302768942091295, 0.18151208584100276, 0.17554910509854504, 0.1818308153426107, 0.17317598642441268, 0.18110092476260686, 0.17800223578594965, 0.1666338670287436, 0.16591785065399234, 0.17184531274768855, 0.15981369454874716, 0.401016440524271, 0.1846041102179784, 0.18948963769846883, 0.4347636678856771, 0.1373628394323959, 0.13136281211594447, 0.15149744120570652, 0.3126102794543759, 0.1513522188629346, 0.4205209547434958, 0.47658994152073775, 0.4471065026351603, 0.4977676310269219, 0.155219175492337, 0.5759265940691272, 0.16060955998553672, 0.19325502953103446, 0.1666576823234056, 0.20777785649570146, 0.18466124155475327, 0.18060564174710148, 0.18248362373521387, 0.18496250041352136, 0.21581371792155402, 0.18701106332125683, 0.08023679390886151, 0.06898813768752221, 0.06904177953387547, 0.08082310929797532, 0.08065111365499489, 0.08256694686766786, 0.06863959783990103, 0.08113800479305933, 0.07587975328561658]}, "mutation_prompt": null}
{"id": "dd2c4484-d3e7-4379-837f-a2c4ec4cace8", "solution": "import numpy as np\n\nclass OptimizedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.7\n        self.CR = 0.85\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def opposition_based_learning(self, individual):\n        return self.lower_bound + self.upper_bound - individual\n\n    def local_search(self, x, func):\n        trial = x + np.random.uniform(-0.05, 0.05, self.dim)\n        trial = np.clip(trial, self.lower_bound, self.upper_bound)\n        return trial if func(trial) < func(x) else x\n\n    def mutate(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = indices\n        while a == idx:\n            a = np.random.choice(self.population_size)\n        diversity_factor = np.exp(-np.std(population, axis=0).mean())  # Simplified calculation\n        mutant = population[a] + self.F * diversity_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.CR\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        budget_used = self.population_size\n\n        while budget_used < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(population, i)\n                trial = self.crossover(population[i], mutant)\n                trial = self.local_search(trial, func)\n\n                trial_fitness = func(trial)\n                budget_used += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if budget_used < self.budget and np.random.rand() < 0.5:\n                    opposite = self.opposition_based_learning(population[i])\n                    opposite_fitness = func(opposite)\n                    budget_used += 1\n                    if opposite_fitness < fitness[i]:\n                        population[i] = opposite\n                        fitness[i] = opposite_fitness\n\n                if budget_used >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "OptimizedAdaptiveDifferentialEvolution", "description": "Optimized differential evolution with reduced complexity through efficient mutation and crossover processes.", "configspace": "", "generation": 84, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fee4dec4-c581-4c24-8676-7ade8021b828", "metadata": {"aucs": [0.4289818566732434, 0.46504556031436284, 0.43525593459029077, 0.42072093476378924, 0.48310392086724974, 0.4604419276351438, 0.4255475671180051, 0.4385677822339934, 0.39129332439736886, 0.22615912269606386, 0.18813670995690368, 0.18362503179108347, 0.15708002218634187, 0.23833650834531572, 0.18769582941876994, 0.17996583090882212, 0.1815468689820775, 0.19476113683897134, 0.11565825078071235, 0.09210561935595829, 0.11332196678391016, 0.09840940271027065, 0.0916034326461389, 0.10451724407003038, 0.10829919624889262, 0.12531775815417312, 0.09790640192598221, 0.08229744219375701, 0.08086307244439273, 0.09734405269319013, 0.11146290008601822, 0.0968437944511421, 0.08349046482219491, 0.09928237107755444, 0.08422827817048295, 0.07554372614758176, 0.6337860281224914, 0.5580045894527108, 0.7025490636384191, 0.6646140483440439, 0.5860942780322385, 0.5107154117571258, 0.5340508133157191, 0.7478740644577289, 0.5662071261772881, 0.2280089364094724, 0.0730460761307622, 0.13932780784909027, 0.15778877444130213, 0.13268998723901493, 0.18066797340737506, 0.17820212034589566, 0.1753396039527655, 0.1878256919469905, 0.43408676232792165, 0.43499514115711113, 0.24951272969147908, 0.4931185352854143, 0.46586616628534927, 0.1779448893079414, 0.2865313074610619, 0.4755680292982887, 0.24254225182786593, 0.13258418129062688, 0.16348186126799047, 0.1391946846396055, 0.16832814888451852, 0.12941097108378707, 0.14026561660391068, 0.20436800790679432, 0.15362774580057703, 0.14177341511181474, 0.14166469793141767, 0.13134433347898633, 0.18708178255820718, 0.16931592315245647, 0.153004695739544, 0.1749684663124622, 0.15131187485809283, 0.15348500905116702, 0.17217715842312087, 0.03129171039613121, 0.05036910218917223, 0.0264253556940941, 0.05993229594315197, 0.06597382919628147, 0.06472108682101696, 0.06344553838790556, 0.02860636135175898, 0.11061832466029575, 0.1249596566543163, 0.11579602866455374, 0.11738772892523686, 0.08748385703626793, 0.07134608142998278, 0.13893725969288184, 0.12996353323829968, 0.0847610892931725, 0.23852877831614838, 0.005162331687069255, 0.015370047779079132, 0.0018007731921994008, 0.01636163699909743, 0.020512174046345866, 0.010637913663928744, 0.005273157781771065, 0.014567954676070305, 0.021043424509668673, 0.11418434080985629, 0.1080374708151639, 0.09747263472633927, 0.10841491222251465, 0.1067271408462499, 0.10674034663561327, 0.09908586950661469, 0.11127026855869993, 0.09784106734475095, 0.3765545740660794, 0.3995381805970435, 0.4363760532422356, 0.36526098015295483, 0.38407155009975835, 0.35049005478499706, 0.42310368089170725, 0.3752063191282373, 0.4117985298524096, 0.09876805839673652, 0.0738664984802544, 0.09742999877716751, 0.0918941017311723, 0.08503828373283762, 0.08225397091571773, 0.07728519944707513, 0.08467231238598816, 0.08635767125310745, 0.23456997105586697, 0.1948904657963939, 0.21185468573129784, 0.19339736893776582, 0.22317547447015973, 0.2552605635962628, 0.18821835164290368, 0.18696315985848044, 0.17864098837858422, 0.20954602086033702, 0.2586965544273878, 0.2684095013672372, 0.2534102244412326, 0.23836886464774898, 0.28021879750687007, 0.27232349445493675, 0.2788897189163384, 0.24146103694475962, 0.16801638407965713, 0.1920358202275967, 0.2147091559747648, 0.20448736708873905, 0.16725954811847454, 0.21385673080221745, 0.21923191559366106, 0.23105239850398673, 0.212303613417948, 0.2011822900299911, 0.18607988292333444, 0.19852504473522115, 0.20700653769942423, 0.19130686012456422, 0.20215389179825805, 0.20240116218482918, 0.20073504507014728, 0.2209221658850754, 0.16302768942091295, 0.18151208584100276, 0.17554910509854504, 0.1818308153426107, 0.17317598642441268, 0.18110092476260686, 0.17800223578594965, 0.1666338670287436, 0.16591785065399234, 0.17184531274768855, 0.15981369454874716, 0.401016440524271, 0.1846041102179784, 0.18948963769846883, 0.4347636678856771, 0.1373628394323959, 0.13136281211594447, 0.15149744120570652, 0.3126102794543759, 0.1513522188629346, 0.4205209547434958, 0.47658994152073775, 0.4471065026351603, 0.4977676310269219, 0.155219175492337, 0.5759265940691272, 0.16060955998553672, 0.19325502953103446, 0.1666576823234056, 0.20777785649570146, 0.18466124155475327, 0.18060564174710148, 0.18248362373521387, 0.18496250041352136, 0.21581371792155402, 0.18701106332125683, 0.08023679390886151, 0.06898813768752221, 0.06904177953387547, 0.08082310929797532, 0.08065111365499489, 0.08256694686766786, 0.06863959783990103, 0.08113800479305933, 0.07587975328561658]}, "mutation_prompt": null}
{"id": "d524dab5-f22d-4f94-a344-0f994c7d85aa", "solution": "import numpy as np\n\nclass OptimizedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.7\n        self.CR = 0.85\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def opposition_based_learning(self, individual):\n        return self.lower_bound + self.upper_bound - individual\n\n    def local_search(self, x, func):\n        trial = x + np.random.uniform(-0.05, 0.05, self.dim)\n        trial = np.clip(trial, self.lower_bound, self.upper_bound)\n        return trial if func(trial) < func(x) else x\n\n    def mutate(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = indices\n        while a == idx:\n            a = np.random.choice(self.population_size)\n        diversity_factor = np.exp(-np.std(population, axis=0).mean())  # Simplified calculation\n        mutant = population[a] + self.F * diversity_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.CR\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        budget_used = self.population_size\n\n        while budget_used < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(population, i)\n                trial = self.crossover(population[i], mutant)\n                trial = self.local_search(trial, func)\n\n                trial_fitness = func(trial)\n                budget_used += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if budget_used < self.budget and np.random.rand() < 0.5:\n                    opposite = self.opposition_based_learning(population[i])\n                    opposite_fitness = func(opposite)\n                    budget_used += 1\n                    if opposite_fitness < fitness[i]:\n                        population[i] = opposite\n                        fitness[i] = opposite_fitness\n\n                if budget_used >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "OptimizedAdaptiveDifferentialEvolution", "description": "Optimized differential evolution with reduced complexity through efficient mutation and crossover processes.", "configspace": "", "generation": 84, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fee4dec4-c581-4c24-8676-7ade8021b828", "metadata": {"aucs": [0.4289818566732434, 0.46504556031436284, 0.43525593459029077, 0.42072093476378924, 0.48310392086724974, 0.4604419276351438, 0.4255475671180051, 0.4385677822339934, 0.39129332439736886, 0.22615912269606386, 0.18813670995690368, 0.18362503179108347, 0.15708002218634187, 0.23833650834531572, 0.18769582941876994, 0.17996583090882212, 0.1815468689820775, 0.19476113683897134, 0.11565825078071235, 0.09210561935595829, 0.11332196678391016, 0.09840940271027065, 0.0916034326461389, 0.10451724407003038, 0.10829919624889262, 0.12531775815417312, 0.09790640192598221, 0.08229744219375701, 0.08086307244439273, 0.09734405269319013, 0.11146290008601822, 0.0968437944511421, 0.08349046482219491, 0.09928237107755444, 0.08422827817048295, 0.07554372614758176, 0.6337860281224914, 0.5580045894527108, 0.7025490636384191, 0.6646140483440439, 0.5860942780322385, 0.5107154117571258, 0.5340508133157191, 0.7478740644577289, 0.5662071261772881, 0.2280089364094724, 0.0730460761307622, 0.13932780784909027, 0.15778877444130213, 0.13268998723901493, 0.18066797340737506, 0.17820212034589566, 0.1753396039527655, 0.1878256919469905, 0.43408676232792165, 0.43499514115711113, 0.24951272969147908, 0.4931185352854143, 0.46586616628534927, 0.1779448893079414, 0.2865313074610619, 0.4755680292982887, 0.24254225182786593, 0.13258418129062688, 0.16348186126799047, 0.1391946846396055, 0.16832814888451852, 0.12941097108378707, 0.14026561660391068, 0.20436800790679432, 0.15362774580057703, 0.14177341511181474, 0.14166469793141767, 0.13134433347898633, 0.18708178255820718, 0.16931592315245647, 0.153004695739544, 0.1749684663124622, 0.15131187485809283, 0.15348500905116702, 0.17217715842312087, 0.03129171039613121, 0.05036910218917223, 0.0264253556940941, 0.05993229594315197, 0.06597382919628147, 0.06472108682101696, 0.06344553838790556, 0.02860636135175898, 0.11061832466029575, 0.1249596566543163, 0.11579602866455374, 0.11738772892523686, 0.08748385703626793, 0.07134608142998278, 0.13893725969288184, 0.12996353323829968, 0.0847610892931725, 0.23852877831614838, 0.005162331687069255, 0.015370047779079132, 0.0018007731921994008, 0.01636163699909743, 0.020512174046345866, 0.010637913663928744, 0.005273157781771065, 0.014567954676070305, 0.021043424509668673, 0.11418434080985629, 0.1080374708151639, 0.09747263472633927, 0.10841491222251465, 0.1067271408462499, 0.10674034663561327, 0.09908586950661469, 0.11127026855869993, 0.09784106734475095, 0.3765545740660794, 0.3995381805970435, 0.4363760532422356, 0.36526098015295483, 0.38407155009975835, 0.35049005478499706, 0.42310368089170725, 0.3752063191282373, 0.4117985298524096, 0.09876805839673652, 0.0738664984802544, 0.09742999877716751, 0.0918941017311723, 0.08503828373283762, 0.08225397091571773, 0.07728519944707513, 0.08467231238598816, 0.08635767125310745, 0.23456997105586697, 0.1948904657963939, 0.21185468573129784, 0.19339736893776582, 0.22317547447015973, 0.2552605635962628, 0.18821835164290368, 0.18696315985848044, 0.17864098837858422, 0.20954602086033702, 0.2586965544273878, 0.2684095013672372, 0.2534102244412326, 0.23836886464774898, 0.28021879750687007, 0.27232349445493675, 0.2788897189163384, 0.24146103694475962, 0.16801638407965713, 0.1920358202275967, 0.2147091559747648, 0.20448736708873905, 0.16725954811847454, 0.21385673080221745, 0.21923191559366106, 0.23105239850398673, 0.212303613417948, 0.2011822900299911, 0.18607988292333444, 0.19852504473522115, 0.20700653769942423, 0.19130686012456422, 0.20215389179825805, 0.20240116218482918, 0.20073504507014728, 0.2209221658850754, 0.16302768942091295, 0.18151208584100276, 0.17554910509854504, 0.1818308153426107, 0.17317598642441268, 0.18110092476260686, 0.17800223578594965, 0.1666338670287436, 0.16591785065399234, 0.17184531274768855, 0.15981369454874716, 0.401016440524271, 0.1846041102179784, 0.18948963769846883, 0.4347636678856771, 0.1373628394323959, 0.13136281211594447, 0.15149744120570652, 0.3126102794543759, 0.1513522188629346, 0.4205209547434958, 0.47658994152073775, 0.4471065026351603, 0.4977676310269219, 0.155219175492337, 0.5759265940691272, 0.16060955998553672, 0.19325502953103446, 0.1666576823234056, 0.20777785649570146, 0.18466124155475327, 0.18060564174710148, 0.18248362373521387, 0.18496250041352136, 0.21581371792155402, 0.18701106332125683, 0.08023679390886151, 0.06898813768752221, 0.06904177953387547, 0.08082310929797532, 0.08065111365499489, 0.08256694686766786, 0.06863959783990103, 0.08113800479305933, 0.07587975328561658]}, "mutation_prompt": null}
{"id": "88b070d1-4313-4525-a52a-1dcc2d229e0d", "solution": "import numpy as np\n\nclass OptimizedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.7\n        self.CR = 0.85\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def opposition_based_learning(self, individual):\n        return self.lower_bound + self.upper_bound - individual\n\n    def local_search(self, x, func):\n        trial = x + np.random.uniform(-0.05, 0.05, self.dim)\n        trial = np.clip(trial, self.lower_bound, self.upper_bound)\n        return trial if func(trial) < func(x) else x\n\n    def mutate(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = indices\n        while a == idx:\n            a = np.random.choice(self.population_size)\n        diversity_factor = np.exp(-np.var(population, axis=0).mean())  # Changed std to var for variance\n        mutant = population[a] + self.F * diversity_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.CR\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def adapt_params(self):\n        self.F = np.clip(self.F + np.random.normal(0, 0.1), 0.5, 1.0)\n        self.CR = np.clip(self.CR + np.random.normal(0, 0.1), 0.4, 0.9)\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        budget_used = self.population_size\n\n        while budget_used < self.budget:\n            self.adapt_params()  # Dynamically adapt F and CR\n            for i in range(self.population_size):\n                mutant = self.mutate(population, i)\n                trial = self.crossover(population[i], mutant)\n                trial = self.local_search(trial, func)\n\n                trial_fitness = func(trial)\n                budget_used += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if budget_used < self.budget and np.random.rand() < 0.5:\n                    opposite = self.opposition_based_learning(population[i])\n                    opposite_fitness = func(opposite)\n                    budget_used += 1\n                    if opposite_fitness < fitness[i]:\n                        population[i] = opposite\n                        fitness[i] = opposite_fitness\n\n                if budget_used >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "OptimizedAdaptiveDifferentialEvolution", "description": "Enhanced differential evolution using dynamic adaptation of control parameters and improved population diversity management.", "configspace": "", "generation": 90, "fitness": 0.1862438785625112, "feedback": "The algorithm OptimizedAdaptiveDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.15.", "error": "", "parent_id": "fee4dec4-c581-4c24-8676-7ade8021b828", "metadata": {"aucs": [0.4200029613289712, 0.4461690395962642, 0.43840953626407553, 0.42898417144729906, 0.46107164685546853, 0.4113230309993998, 0.4180732792852968, 0.4313557354290286, 0.39399824524530835, 0.07053513924360755, 0.00020997356778118537, 0.11309533300807018, 0.1296107372315184, 0.20863236067821178, 0.08454884643419902, 9.999999999998899e-05, 0.13166723013725568, 0.15194985603117273, 0.11858684121772656, 0.09252147033551139, 0.1007636974934829, 0.1274551687447676, 0.13641984089557424, 0.11057741665318677, 0.09977851874808652, 0.09571256352404256, 0.10253941822450396, 0.09935869371530659, 0.09863077787908336, 0.08806622808034426, 0.1154203447333717, 0.0884342199822733, 0.08891784131081004, 0.10107808940076524, 0.07597141885602399, 0.08743010284083996, 0.682237725274431, 0.6747239073366065, 0.6337454805554211, 0.666463949804452, 0.528687972251169, 0.7066740890667357, 0.7533377927720712, 0.6865451838608343, 0.6844319744068104, 0.14790682023564494, 0.13902754998387812, 0.17272813006935517, 0.12584076156139523, 0.1249642632221809, 0.1585782041054412, 0.16073212872029785, 0.15228939717297107, 0.1859129470628712, 0.20141472485589307, 0.2979710721967813, 0.19180507362543053, 0.4013276438753566, 0.2949288779367035, 0.24944675139089345, 0.2122126215567498, 0.22677428839552782, 0.2480472995574461, 0.14440911904751952, 0.16415869075006684, 0.130662446512407, 0.13500267084843987, 0.09846142042834749, 0.11107716754236263, 0.21954346375352274, 0.18072976424657972, 0.11369885342907893, 0.1554896401666963, 0.10234361501542699, 0.12531153283354357, 0.16521366497939471, 0.13228792799655698, 0.13874069555984336, 0.16118317119971948, 0.07834373188931909, 0.11323622630033425, 9.999999999998899e-05, 0.034199278281996204, 0.02663601012721739, 9.999999999998899e-05, 0.017476955046786147, 0.0022026518049041988, 0.0005179689363665752, 0.07018948411305137, 0.030914349382755613, 0.08195368606621067, 0.04371558992753888, 0.07004825791857017, 0.06209505054478648, 0.04484474788564019, 0.034215928667188145, 0.07544552671011495, 0.06302713710080765, 0.13390005218451062, 9.999999999998899e-05, 9.999999999998899e-05, 0.0004818592872876115, 9.999999999998899e-05, 9.999999999998899e-05, 0.0014525499625930305, 9.999999999998899e-05, 9.999999999998899e-05, 0.012131560300790434, 0.09402905156990693, 0.06692829325821437, 0.09310612948353592, 0.06397820278941202, 0.06845999622223009, 0.09321884365504807, 0.059081127460507976, 0.10776539780129935, 0.0800205615634152, 0.341974779821679, 0.40634215329906775, 0.3636631271741818, 0.3333249021621405, 0.353490108123492, 0.3558261908124998, 0.40797984307872115, 0.3662567839182317, 0.41314234249842563, 0.06995378381338646, 0.09410808357080491, 0.07717660436971252, 0.08973355392582094, 0.07803597119013739, 0.09003395469478404, 0.0965245280804995, 0.063083014320087, 0.07720505293760505, 0.2645585646536721, 0.1584198614738036, 0.2811819483651087, 0.17403045179106125, 0.2144103329084025, 0.3239797964115605, 0.18474224002771344, 0.16627657253590622, 0.14482585574424955, 0.19948888828771916, 0.15655669386559534, 0.2610237596710634, 0.22395685819319644, 0.2237662366940686, 0.2435879039809863, 0.2624284629964304, 0.2893513772999773, 0.27850056534496404, 0.16536526683073094, 0.1928992529916571, 0.2004562925093213, 0.1869512824804821, 0.13370747886405954, 0.21053026362058047, 0.20687748472879786, 0.22741862072553187, 0.1834336468606298, 0.21559510934281068, 0.1964716996830298, 0.18686449024559915, 0.19576199027230912, 0.18868747653290274, 0.19751859616388978, 0.2052624542648096, 0.16853132560148498, 0.2062464204788712, 0.1781911612899053, 0.1802393239840292, 0.17505846454112017, 0.20112024343000534, 0.1667400980003596, 0.16507787911582184, 0.17148010023527027, 0.19175570494312122, 0.17467340485222427, 0.16780016414053867, 0.1740411218123511, 0.13873977940472848, 0.35125482358989757, 0.18571372071847436, 0.16436124349453762, 0.13724055318616024, 0.13635097622286174, 0.15316817961370455, 0.2967275232178018, 0.16015202190666622, 0.31610766108170607, 0.47960027477301537, 0.31343154195766343, 0.15806872921041482, 0.1573170511775177, 0.4873063025227692, 0.24207061363270987, 0.19514383604539165, 0.23000506168990864, 0.20480442052636272, 0.17923001937839544, 0.17222264191378722, 0.2026307906867556, 0.1905225220619764, 0.2076825376415702, 0.2285807970446836, 0.07371245904246082, 0.081168107852572, 0.07296878833905229, 0.07297884928423004, 0.08004916002480955, 0.089720428889289, 0.09848726629191074, 0.06960881403911368, 0.07896584963669007]}, "mutation_prompt": null}
{"id": "d263299e-5113-44a5-9a11-dea4633fb434", "solution": "import numpy as np\n\nclass OptimizedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.7\n        self.CR = 0.85\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def opposition_based_learning(self, individual):\n        return self.lower_bound + self.upper_bound - individual\n\n    def local_search(self, x, func):\n        trial = x + np.random.uniform(-0.05, 0.05, self.dim)\n        trial = np.clip(trial, self.lower_bound, self.upper_bound)\n        return trial if func(trial) < func(x) else x\n\n    def mutate(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = indices\n        while a == idx:\n            a = np.random.choice(self.population_size)\n        diversity_factor = np.exp(-np.std(population, axis=0).mean())  # Simplified calculation\n        mutant = population[a] + self.F * diversity_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.CR\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        budget_used = self.population_size\n\n        while budget_used < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(population, i)\n                trial = self.crossover(population[i], mutant)\n                trial = self.local_search(trial, func)\n\n                trial_fitness = func(trial)\n                budget_used += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if budget_used < self.budget and np.random.rand() < 0.5:\n                    opposite = self.opposition_based_learning(population[i])\n                    opposite_fitness = func(opposite)\n                    budget_used += 1\n                    if opposite_fitness < fitness[i]:\n                        population[i] = opposite\n                        fitness[i] = opposite_fitness\n\n                if budget_used >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "OptimizedAdaptiveDifferentialEvolution", "description": "Optimized differential evolution with reduced complexity through efficient mutation and crossover processes.", "configspace": "", "generation": 84, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fee4dec4-c581-4c24-8676-7ade8021b828", "metadata": {"aucs": [0.4289818566732434, 0.46504556031436284, 0.43525593459029077, 0.42072093476378924, 0.48310392086724974, 0.4604419276351438, 0.4255475671180051, 0.4385677822339934, 0.39129332439736886, 0.22615912269606386, 0.18813670995690368, 0.18362503179108347, 0.15708002218634187, 0.23833650834531572, 0.18769582941876994, 0.17996583090882212, 0.1815468689820775, 0.19476113683897134, 0.11565825078071235, 0.09210561935595829, 0.11332196678391016, 0.09840940271027065, 0.0916034326461389, 0.10451724407003038, 0.10829919624889262, 0.12531775815417312, 0.09790640192598221, 0.08229744219375701, 0.08086307244439273, 0.09734405269319013, 0.11146290008601822, 0.0968437944511421, 0.08349046482219491, 0.09928237107755444, 0.08422827817048295, 0.07554372614758176, 0.6337860281224914, 0.5580045894527108, 0.7025490636384191, 0.6646140483440439, 0.5860942780322385, 0.5107154117571258, 0.5340508133157191, 0.7478740644577289, 0.5662071261772881, 0.2280089364094724, 0.0730460761307622, 0.13932780784909027, 0.15778877444130213, 0.13268998723901493, 0.18066797340737506, 0.17820212034589566, 0.1753396039527655, 0.1878256919469905, 0.43408676232792165, 0.43499514115711113, 0.24951272969147908, 0.4931185352854143, 0.46586616628534927, 0.1779448893079414, 0.2865313074610619, 0.4755680292982887, 0.24254225182786593, 0.13258418129062688, 0.16348186126799047, 0.1391946846396055, 0.16832814888451852, 0.12941097108378707, 0.14026561660391068, 0.20436800790679432, 0.15362774580057703, 0.14177341511181474, 0.14166469793141767, 0.13134433347898633, 0.18708178255820718, 0.16931592315245647, 0.153004695739544, 0.1749684663124622, 0.15131187485809283, 0.15348500905116702, 0.17217715842312087, 0.03129171039613121, 0.05036910218917223, 0.0264253556940941, 0.05993229594315197, 0.06597382919628147, 0.06472108682101696, 0.06344553838790556, 0.02860636135175898, 0.11061832466029575, 0.1249596566543163, 0.11579602866455374, 0.11738772892523686, 0.08748385703626793, 0.07134608142998278, 0.13893725969288184, 0.12996353323829968, 0.0847610892931725, 0.23852877831614838, 0.005162331687069255, 0.015370047779079132, 0.0018007731921994008, 0.01636163699909743, 0.020512174046345866, 0.010637913663928744, 0.005273157781771065, 0.014567954676070305, 0.021043424509668673, 0.11418434080985629, 0.1080374708151639, 0.09747263472633927, 0.10841491222251465, 0.1067271408462499, 0.10674034663561327, 0.09908586950661469, 0.11127026855869993, 0.09784106734475095, 0.3765545740660794, 0.3995381805970435, 0.4363760532422356, 0.36526098015295483, 0.38407155009975835, 0.35049005478499706, 0.42310368089170725, 0.3752063191282373, 0.4117985298524096, 0.09876805839673652, 0.0738664984802544, 0.09742999877716751, 0.0918941017311723, 0.08503828373283762, 0.08225397091571773, 0.07728519944707513, 0.08467231238598816, 0.08635767125310745, 0.23456997105586697, 0.1948904657963939, 0.21185468573129784, 0.19339736893776582, 0.22317547447015973, 0.2552605635962628, 0.18821835164290368, 0.18696315985848044, 0.17864098837858422, 0.20954602086033702, 0.2586965544273878, 0.2684095013672372, 0.2534102244412326, 0.23836886464774898, 0.28021879750687007, 0.27232349445493675, 0.2788897189163384, 0.24146103694475962, 0.16801638407965713, 0.1920358202275967, 0.2147091559747648, 0.20448736708873905, 0.16725954811847454, 0.21385673080221745, 0.21923191559366106, 0.23105239850398673, 0.212303613417948, 0.2011822900299911, 0.18607988292333444, 0.19852504473522115, 0.20700653769942423, 0.19130686012456422, 0.20215389179825805, 0.20240116218482918, 0.20073504507014728, 0.2209221658850754, 0.16302768942091295, 0.18151208584100276, 0.17554910509854504, 0.1818308153426107, 0.17317598642441268, 0.18110092476260686, 0.17800223578594965, 0.1666338670287436, 0.16591785065399234, 0.17184531274768855, 0.15981369454874716, 0.401016440524271, 0.1846041102179784, 0.18948963769846883, 0.4347636678856771, 0.1373628394323959, 0.13136281211594447, 0.15149744120570652, 0.3126102794543759, 0.1513522188629346, 0.4205209547434958, 0.47658994152073775, 0.4471065026351603, 0.4977676310269219, 0.155219175492337, 0.5759265940691272, 0.16060955998553672, 0.19325502953103446, 0.1666576823234056, 0.20777785649570146, 0.18466124155475327, 0.18060564174710148, 0.18248362373521387, 0.18496250041352136, 0.21581371792155402, 0.18701106332125683, 0.08023679390886151, 0.06898813768752221, 0.06904177953387547, 0.08082310929797532, 0.08065111365499489, 0.08256694686766786, 0.06863959783990103, 0.08113800479305933, 0.07587975328561658]}, "mutation_prompt": null}
{"id": "c3a50c6e-b388-4ea2-bc78-663df1d8260b", "solution": "import numpy as np\n\nclass OptimizedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.7\n        self.CR = 0.85\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def opposition_based_learning(self, individual):\n        return self.lower_bound + self.upper_bound - individual\n\n    def local_search(self, x, func):\n        trial = x + np.random.uniform(-0.05, 0.05, self.dim)\n        trial = np.clip(trial, self.lower_bound, self.upper_bound)\n        return trial if func(trial) < func(x) else x\n\n    def mutate(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = indices\n        while a == idx:\n            a = np.random.choice(self.population_size)\n        diversity_factor = np.exp(-np.std(population, axis=0).mean())  # Simplified calculation\n        mutant = population[a] + self.F * diversity_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.CR\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        budget_used = self.population_size\n\n        while budget_used < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(population, i)\n                trial = self.crossover(population[i], mutant)\n                trial = self.local_search(trial, func)\n\n                trial_fitness = func(trial)\n                budget_used += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if budget_used < self.budget and np.random.rand() < 0.5:\n                    opposite = self.opposition_based_learning(population[i])\n                    opposite_fitness = func(opposite)\n                    budget_used += 1\n                    if opposite_fitness < fitness[i]:\n                        population[i] = opposite\n                        fitness[i] = opposite_fitness\n\n                if budget_used >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "OptimizedAdaptiveDifferentialEvolution", "description": "Optimized differential evolution with reduced complexity through efficient mutation and crossover processes.", "configspace": "", "generation": 84, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fee4dec4-c581-4c24-8676-7ade8021b828", "metadata": {"aucs": [0.4289818566732434, 0.46504556031436284, 0.43525593459029077, 0.42072093476378924, 0.48310392086724974, 0.4604419276351438, 0.4255475671180051, 0.4385677822339934, 0.39129332439736886, 0.22615912269606386, 0.18813670995690368, 0.18362503179108347, 0.15708002218634187, 0.23833650834531572, 0.18769582941876994, 0.17996583090882212, 0.1815468689820775, 0.19476113683897134, 0.11565825078071235, 0.09210561935595829, 0.11332196678391016, 0.09840940271027065, 0.0916034326461389, 0.10451724407003038, 0.10829919624889262, 0.12531775815417312, 0.09790640192598221, 0.08229744219375701, 0.08086307244439273, 0.09734405269319013, 0.11146290008601822, 0.0968437944511421, 0.08349046482219491, 0.09928237107755444, 0.08422827817048295, 0.07554372614758176, 0.6337860281224914, 0.5580045894527108, 0.7025490636384191, 0.6646140483440439, 0.5860942780322385, 0.5107154117571258, 0.5340508133157191, 0.7478740644577289, 0.5662071261772881, 0.2280089364094724, 0.0730460761307622, 0.13932780784909027, 0.15778877444130213, 0.13268998723901493, 0.18066797340737506, 0.17820212034589566, 0.1753396039527655, 0.1878256919469905, 0.43408676232792165, 0.43499514115711113, 0.24951272969147908, 0.4931185352854143, 0.46586616628534927, 0.1779448893079414, 0.2865313074610619, 0.4755680292982887, 0.24254225182786593, 0.13258418129062688, 0.16348186126799047, 0.1391946846396055, 0.16832814888451852, 0.12941097108378707, 0.14026561660391068, 0.20436800790679432, 0.15362774580057703, 0.14177341511181474, 0.14166469793141767, 0.13134433347898633, 0.18708178255820718, 0.16931592315245647, 0.153004695739544, 0.1749684663124622, 0.15131187485809283, 0.15348500905116702, 0.17217715842312087, 0.03129171039613121, 0.05036910218917223, 0.0264253556940941, 0.05993229594315197, 0.06597382919628147, 0.06472108682101696, 0.06344553838790556, 0.02860636135175898, 0.11061832466029575, 0.1249596566543163, 0.11579602866455374, 0.11738772892523686, 0.08748385703626793, 0.07134608142998278, 0.13893725969288184, 0.12996353323829968, 0.0847610892931725, 0.23852877831614838, 0.005162331687069255, 0.015370047779079132, 0.0018007731921994008, 0.01636163699909743, 0.020512174046345866, 0.010637913663928744, 0.005273157781771065, 0.014567954676070305, 0.021043424509668673, 0.11418434080985629, 0.1080374708151639, 0.09747263472633927, 0.10841491222251465, 0.1067271408462499, 0.10674034663561327, 0.09908586950661469, 0.11127026855869993, 0.09784106734475095, 0.3765545740660794, 0.3995381805970435, 0.4363760532422356, 0.36526098015295483, 0.38407155009975835, 0.35049005478499706, 0.42310368089170725, 0.3752063191282373, 0.4117985298524096, 0.09876805839673652, 0.0738664984802544, 0.09742999877716751, 0.0918941017311723, 0.08503828373283762, 0.08225397091571773, 0.07728519944707513, 0.08467231238598816, 0.08635767125310745, 0.23456997105586697, 0.1948904657963939, 0.21185468573129784, 0.19339736893776582, 0.22317547447015973, 0.2552605635962628, 0.18821835164290368, 0.18696315985848044, 0.17864098837858422, 0.20954602086033702, 0.2586965544273878, 0.2684095013672372, 0.2534102244412326, 0.23836886464774898, 0.28021879750687007, 0.27232349445493675, 0.2788897189163384, 0.24146103694475962, 0.16801638407965713, 0.1920358202275967, 0.2147091559747648, 0.20448736708873905, 0.16725954811847454, 0.21385673080221745, 0.21923191559366106, 0.23105239850398673, 0.212303613417948, 0.2011822900299911, 0.18607988292333444, 0.19852504473522115, 0.20700653769942423, 0.19130686012456422, 0.20215389179825805, 0.20240116218482918, 0.20073504507014728, 0.2209221658850754, 0.16302768942091295, 0.18151208584100276, 0.17554910509854504, 0.1818308153426107, 0.17317598642441268, 0.18110092476260686, 0.17800223578594965, 0.1666338670287436, 0.16591785065399234, 0.17184531274768855, 0.15981369454874716, 0.401016440524271, 0.1846041102179784, 0.18948963769846883, 0.4347636678856771, 0.1373628394323959, 0.13136281211594447, 0.15149744120570652, 0.3126102794543759, 0.1513522188629346, 0.4205209547434958, 0.47658994152073775, 0.4471065026351603, 0.4977676310269219, 0.155219175492337, 0.5759265940691272, 0.16060955998553672, 0.19325502953103446, 0.1666576823234056, 0.20777785649570146, 0.18466124155475327, 0.18060564174710148, 0.18248362373521387, 0.18496250041352136, 0.21581371792155402, 0.18701106332125683, 0.08023679390886151, 0.06898813768752221, 0.06904177953387547, 0.08082310929797532, 0.08065111365499489, 0.08256694686766786, 0.06863959783990103, 0.08113800479305933, 0.07587975328561658]}, "mutation_prompt": null}
{"id": "4aa33642-9a5a-4ee4-8ba5-1d5884825d2f", "solution": "import numpy as np\n\nclass OptimizedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.7\n        self.CR = 0.85\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def opposition_based_learning(self, individual):\n        return self.lower_bound + self.upper_bound - individual\n\n    def local_search(self, x, func):\n        trial = x + np.random.uniform(-0.05, 0.05, self.dim)\n        trial = np.clip(trial, self.lower_bound, self.upper_bound)\n        return trial if func(trial) < func(x) else x\n\n    def mutate(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = indices\n        while a == idx:\n            a = np.random.choice(self.population_size)\n        diversity_factor = np.exp(-np.std(population, axis=0).mean())  # Simplified calculation\n        mutant = population[a] + self.F * diversity_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.CR\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        budget_used = self.population_size\n\n        while budget_used < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(population, i)\n                trial = self.crossover(population[i], mutant)\n                trial = self.local_search(trial, func)\n\n                trial_fitness = func(trial)\n                budget_used += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if budget_used < self.budget and np.random.rand() < 0.5:\n                    opposite = self.opposition_based_learning(population[i])\n                    opposite_fitness = func(opposite)\n                    budget_used += 1\n                    if opposite_fitness < fitness[i]:\n                        population[i] = opposite\n                        fitness[i] = opposite_fitness\n\n                if budget_used >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "OptimizedAdaptiveDifferentialEvolution", "description": "Optimized differential evolution with reduced complexity through efficient mutation and crossover processes.", "configspace": "", "generation": 84, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fee4dec4-c581-4c24-8676-7ade8021b828", "metadata": {"aucs": [0.4289818566732434, 0.46504556031436284, 0.43525593459029077, 0.42072093476378924, 0.48310392086724974, 0.4604419276351438, 0.4255475671180051, 0.4385677822339934, 0.39129332439736886, 0.22615912269606386, 0.18813670995690368, 0.18362503179108347, 0.15708002218634187, 0.23833650834531572, 0.18769582941876994, 0.17996583090882212, 0.1815468689820775, 0.19476113683897134, 0.11565825078071235, 0.09210561935595829, 0.11332196678391016, 0.09840940271027065, 0.0916034326461389, 0.10451724407003038, 0.10829919624889262, 0.12531775815417312, 0.09790640192598221, 0.08229744219375701, 0.08086307244439273, 0.09734405269319013, 0.11146290008601822, 0.0968437944511421, 0.08349046482219491, 0.09928237107755444, 0.08422827817048295, 0.07554372614758176, 0.6337860281224914, 0.5580045894527108, 0.7025490636384191, 0.6646140483440439, 0.5860942780322385, 0.5107154117571258, 0.5340508133157191, 0.7478740644577289, 0.5662071261772881, 0.2280089364094724, 0.0730460761307622, 0.13932780784909027, 0.15778877444130213, 0.13268998723901493, 0.18066797340737506, 0.17820212034589566, 0.1753396039527655, 0.1878256919469905, 0.43408676232792165, 0.43499514115711113, 0.24951272969147908, 0.4931185352854143, 0.46586616628534927, 0.1779448893079414, 0.2865313074610619, 0.4755680292982887, 0.24254225182786593, 0.13258418129062688, 0.16348186126799047, 0.1391946846396055, 0.16832814888451852, 0.12941097108378707, 0.14026561660391068, 0.20436800790679432, 0.15362774580057703, 0.14177341511181474, 0.14166469793141767, 0.13134433347898633, 0.18708178255820718, 0.16931592315245647, 0.153004695739544, 0.1749684663124622, 0.15131187485809283, 0.15348500905116702, 0.17217715842312087, 0.03129171039613121, 0.05036910218917223, 0.0264253556940941, 0.05993229594315197, 0.06597382919628147, 0.06472108682101696, 0.06344553838790556, 0.02860636135175898, 0.11061832466029575, 0.1249596566543163, 0.11579602866455374, 0.11738772892523686, 0.08748385703626793, 0.07134608142998278, 0.13893725969288184, 0.12996353323829968, 0.0847610892931725, 0.23852877831614838, 0.005162331687069255, 0.015370047779079132, 0.0018007731921994008, 0.01636163699909743, 0.020512174046345866, 0.010637913663928744, 0.005273157781771065, 0.014567954676070305, 0.021043424509668673, 0.11418434080985629, 0.1080374708151639, 0.09747263472633927, 0.10841491222251465, 0.1067271408462499, 0.10674034663561327, 0.09908586950661469, 0.11127026855869993, 0.09784106734475095, 0.3765545740660794, 0.3995381805970435, 0.4363760532422356, 0.36526098015295483, 0.38407155009975835, 0.35049005478499706, 0.42310368089170725, 0.3752063191282373, 0.4117985298524096, 0.09876805839673652, 0.0738664984802544, 0.09742999877716751, 0.0918941017311723, 0.08503828373283762, 0.08225397091571773, 0.07728519944707513, 0.08467231238598816, 0.08635767125310745, 0.23456997105586697, 0.1948904657963939, 0.21185468573129784, 0.19339736893776582, 0.22317547447015973, 0.2552605635962628, 0.18821835164290368, 0.18696315985848044, 0.17864098837858422, 0.20954602086033702, 0.2586965544273878, 0.2684095013672372, 0.2534102244412326, 0.23836886464774898, 0.28021879750687007, 0.27232349445493675, 0.2788897189163384, 0.24146103694475962, 0.16801638407965713, 0.1920358202275967, 0.2147091559747648, 0.20448736708873905, 0.16725954811847454, 0.21385673080221745, 0.21923191559366106, 0.23105239850398673, 0.212303613417948, 0.2011822900299911, 0.18607988292333444, 0.19852504473522115, 0.20700653769942423, 0.19130686012456422, 0.20215389179825805, 0.20240116218482918, 0.20073504507014728, 0.2209221658850754, 0.16302768942091295, 0.18151208584100276, 0.17554910509854504, 0.1818308153426107, 0.17317598642441268, 0.18110092476260686, 0.17800223578594965, 0.1666338670287436, 0.16591785065399234, 0.17184531274768855, 0.15981369454874716, 0.401016440524271, 0.1846041102179784, 0.18948963769846883, 0.4347636678856771, 0.1373628394323959, 0.13136281211594447, 0.15149744120570652, 0.3126102794543759, 0.1513522188629346, 0.4205209547434958, 0.47658994152073775, 0.4471065026351603, 0.4977676310269219, 0.155219175492337, 0.5759265940691272, 0.16060955998553672, 0.19325502953103446, 0.1666576823234056, 0.20777785649570146, 0.18466124155475327, 0.18060564174710148, 0.18248362373521387, 0.18496250041352136, 0.21581371792155402, 0.18701106332125683, 0.08023679390886151, 0.06898813768752221, 0.06904177953387547, 0.08082310929797532, 0.08065111365499489, 0.08256694686766786, 0.06863959783990103, 0.08113800479305933, 0.07587975328561658]}, "mutation_prompt": null}
{"id": "632ce8c5-25a6-48c2-8e6a-6d455ed389dc", "solution": "import numpy as np\n\nclass OptimizedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.7\n        self.CR = 0.85\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def opposition_based_learning(self, individual):\n        return self.lower_bound + self.upper_bound - individual\n\n    def local_search(self, x, func):\n        trial = x + np.random.uniform(-0.05, 0.05, self.dim)\n        trial = np.clip(trial, self.lower_bound, self.upper_bound)\n        return trial if func(trial) < func(x) else x\n\n    def mutate(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = indices\n        while a == idx:\n            a = np.random.choice(self.population_size)\n        diversity_factor = np.exp(-np.std(population, axis=0).mean())  # Simplified calculation\n        mutant = population[a] + self.F * diversity_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.CR\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        budget_used = self.population_size\n\n        while budget_used < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(population, i)\n                trial = self.crossover(population[i], mutant)\n                trial = self.local_search(trial, func)\n\n                trial_fitness = func(trial)\n                budget_used += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if budget_used < self.budget and np.random.rand() < 0.5:\n                    opposite = self.opposition_based_learning(population[i])\n                    opposite_fitness = func(opposite)\n                    budget_used += 1\n                    if opposite_fitness < fitness[i]:\n                        population[i] = opposite\n                        fitness[i] = opposite_fitness\n\n                if budget_used >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "OptimizedAdaptiveDifferentialEvolution", "description": "Optimized differential evolution with reduced complexity through efficient mutation and crossover processes.", "configspace": "", "generation": 84, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fee4dec4-c581-4c24-8676-7ade8021b828", "metadata": {"aucs": [0.4289818566732434, 0.46504556031436284, 0.43525593459029077, 0.42072093476378924, 0.48310392086724974, 0.4604419276351438, 0.4255475671180051, 0.4385677822339934, 0.39129332439736886, 0.22615912269606386, 0.18813670995690368, 0.18362503179108347, 0.15708002218634187, 0.23833650834531572, 0.18769582941876994, 0.17996583090882212, 0.1815468689820775, 0.19476113683897134, 0.11565825078071235, 0.09210561935595829, 0.11332196678391016, 0.09840940271027065, 0.0916034326461389, 0.10451724407003038, 0.10829919624889262, 0.12531775815417312, 0.09790640192598221, 0.08229744219375701, 0.08086307244439273, 0.09734405269319013, 0.11146290008601822, 0.0968437944511421, 0.08349046482219491, 0.09928237107755444, 0.08422827817048295, 0.07554372614758176, 0.6337860281224914, 0.5580045894527108, 0.7025490636384191, 0.6646140483440439, 0.5860942780322385, 0.5107154117571258, 0.5340508133157191, 0.7478740644577289, 0.5662071261772881, 0.2280089364094724, 0.0730460761307622, 0.13932780784909027, 0.15778877444130213, 0.13268998723901493, 0.18066797340737506, 0.17820212034589566, 0.1753396039527655, 0.1878256919469905, 0.43408676232792165, 0.43499514115711113, 0.24951272969147908, 0.4931185352854143, 0.46586616628534927, 0.1779448893079414, 0.2865313074610619, 0.4755680292982887, 0.24254225182786593, 0.13258418129062688, 0.16348186126799047, 0.1391946846396055, 0.16832814888451852, 0.12941097108378707, 0.14026561660391068, 0.20436800790679432, 0.15362774580057703, 0.14177341511181474, 0.14166469793141767, 0.13134433347898633, 0.18708178255820718, 0.16931592315245647, 0.153004695739544, 0.1749684663124622, 0.15131187485809283, 0.15348500905116702, 0.17217715842312087, 0.03129171039613121, 0.05036910218917223, 0.0264253556940941, 0.05993229594315197, 0.06597382919628147, 0.06472108682101696, 0.06344553838790556, 0.02860636135175898, 0.11061832466029575, 0.1249596566543163, 0.11579602866455374, 0.11738772892523686, 0.08748385703626793, 0.07134608142998278, 0.13893725969288184, 0.12996353323829968, 0.0847610892931725, 0.23852877831614838, 0.005162331687069255, 0.015370047779079132, 0.0018007731921994008, 0.01636163699909743, 0.020512174046345866, 0.010637913663928744, 0.005273157781771065, 0.014567954676070305, 0.021043424509668673, 0.11418434080985629, 0.1080374708151639, 0.09747263472633927, 0.10841491222251465, 0.1067271408462499, 0.10674034663561327, 0.09908586950661469, 0.11127026855869993, 0.09784106734475095, 0.3765545740660794, 0.3995381805970435, 0.4363760532422356, 0.36526098015295483, 0.38407155009975835, 0.35049005478499706, 0.42310368089170725, 0.3752063191282373, 0.4117985298524096, 0.09876805839673652, 0.0738664984802544, 0.09742999877716751, 0.0918941017311723, 0.08503828373283762, 0.08225397091571773, 0.07728519944707513, 0.08467231238598816, 0.08635767125310745, 0.23456997105586697, 0.1948904657963939, 0.21185468573129784, 0.19339736893776582, 0.22317547447015973, 0.2552605635962628, 0.18821835164290368, 0.18696315985848044, 0.17864098837858422, 0.20954602086033702, 0.2586965544273878, 0.2684095013672372, 0.2534102244412326, 0.23836886464774898, 0.28021879750687007, 0.27232349445493675, 0.2788897189163384, 0.24146103694475962, 0.16801638407965713, 0.1920358202275967, 0.2147091559747648, 0.20448736708873905, 0.16725954811847454, 0.21385673080221745, 0.21923191559366106, 0.23105239850398673, 0.212303613417948, 0.2011822900299911, 0.18607988292333444, 0.19852504473522115, 0.20700653769942423, 0.19130686012456422, 0.20215389179825805, 0.20240116218482918, 0.20073504507014728, 0.2209221658850754, 0.16302768942091295, 0.18151208584100276, 0.17554910509854504, 0.1818308153426107, 0.17317598642441268, 0.18110092476260686, 0.17800223578594965, 0.1666338670287436, 0.16591785065399234, 0.17184531274768855, 0.15981369454874716, 0.401016440524271, 0.1846041102179784, 0.18948963769846883, 0.4347636678856771, 0.1373628394323959, 0.13136281211594447, 0.15149744120570652, 0.3126102794543759, 0.1513522188629346, 0.4205209547434958, 0.47658994152073775, 0.4471065026351603, 0.4977676310269219, 0.155219175492337, 0.5759265940691272, 0.16060955998553672, 0.19325502953103446, 0.1666576823234056, 0.20777785649570146, 0.18466124155475327, 0.18060564174710148, 0.18248362373521387, 0.18496250041352136, 0.21581371792155402, 0.18701106332125683, 0.08023679390886151, 0.06898813768752221, 0.06904177953387547, 0.08082310929797532, 0.08065111365499489, 0.08256694686766786, 0.06863959783990103, 0.08113800479305933, 0.07587975328561658]}, "mutation_prompt": null}
{"id": "44d118c8-a6b9-40ca-aeb5-d8e79e3b95d4", "solution": "import numpy as np\n\nclass OptimizedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.7\n        self.CR = 0.85\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def opposition_based_learning(self, individual):\n        return self.lower_bound + self.upper_bound - individual\n\n    def local_search(self, x, func):\n        trial = x + np.random.uniform(-0.05, 0.05, self.dim)\n        trial = np.clip(trial, self.lower_bound, self.upper_bound)\n        return trial if func(trial) < func(x) else x\n\n    def mutate(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = indices\n        while a == idx:\n            a = np.random.choice(self.population_size)\n        diversity_factor = np.exp(-np.std(population, axis=0).mean())  # Simplified calculation\n        mutant = population[a] + self.F * diversity_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.CR\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        budget_used = self.population_size\n\n        while budget_used < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(population, i)\n                trial = self.crossover(population[i], mutant)\n                trial = self.local_search(trial, func)\n\n                trial_fitness = func(trial)\n                budget_used += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if budget_used < self.budget and np.random.rand() < 0.5:\n                    opposite = self.opposition_based_learning(population[i])\n                    opposite_fitness = func(opposite)\n                    budget_used += 1\n                    if opposite_fitness < fitness[i]:\n                        population[i] = opposite\n                        fitness[i] = opposite_fitness\n\n                if budget_used >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "OptimizedAdaptiveDifferentialEvolution", "description": "Optimized differential evolution with reduced complexity through efficient mutation and crossover processes.", "configspace": "", "generation": 84, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fee4dec4-c581-4c24-8676-7ade8021b828", "metadata": {"aucs": [0.4289818566732434, 0.46504556031436284, 0.43525593459029077, 0.42072093476378924, 0.48310392086724974, 0.4604419276351438, 0.4255475671180051, 0.4385677822339934, 0.39129332439736886, 0.22615912269606386, 0.18813670995690368, 0.18362503179108347, 0.15708002218634187, 0.23833650834531572, 0.18769582941876994, 0.17996583090882212, 0.1815468689820775, 0.19476113683897134, 0.11565825078071235, 0.09210561935595829, 0.11332196678391016, 0.09840940271027065, 0.0916034326461389, 0.10451724407003038, 0.10829919624889262, 0.12531775815417312, 0.09790640192598221, 0.08229744219375701, 0.08086307244439273, 0.09734405269319013, 0.11146290008601822, 0.0968437944511421, 0.08349046482219491, 0.09928237107755444, 0.08422827817048295, 0.07554372614758176, 0.6337860281224914, 0.5580045894527108, 0.7025490636384191, 0.6646140483440439, 0.5860942780322385, 0.5107154117571258, 0.5340508133157191, 0.7478740644577289, 0.5662071261772881, 0.2280089364094724, 0.0730460761307622, 0.13932780784909027, 0.15778877444130213, 0.13268998723901493, 0.18066797340737506, 0.17820212034589566, 0.1753396039527655, 0.1878256919469905, 0.43408676232792165, 0.43499514115711113, 0.24951272969147908, 0.4931185352854143, 0.46586616628534927, 0.1779448893079414, 0.2865313074610619, 0.4755680292982887, 0.24254225182786593, 0.13258418129062688, 0.16348186126799047, 0.1391946846396055, 0.16832814888451852, 0.12941097108378707, 0.14026561660391068, 0.20436800790679432, 0.15362774580057703, 0.14177341511181474, 0.14166469793141767, 0.13134433347898633, 0.18708178255820718, 0.16931592315245647, 0.153004695739544, 0.1749684663124622, 0.15131187485809283, 0.15348500905116702, 0.17217715842312087, 0.03129171039613121, 0.05036910218917223, 0.0264253556940941, 0.05993229594315197, 0.06597382919628147, 0.06472108682101696, 0.06344553838790556, 0.02860636135175898, 0.11061832466029575, 0.1249596566543163, 0.11579602866455374, 0.11738772892523686, 0.08748385703626793, 0.07134608142998278, 0.13893725969288184, 0.12996353323829968, 0.0847610892931725, 0.23852877831614838, 0.005162331687069255, 0.015370047779079132, 0.0018007731921994008, 0.01636163699909743, 0.020512174046345866, 0.010637913663928744, 0.005273157781771065, 0.014567954676070305, 0.021043424509668673, 0.11418434080985629, 0.1080374708151639, 0.09747263472633927, 0.10841491222251465, 0.1067271408462499, 0.10674034663561327, 0.09908586950661469, 0.11127026855869993, 0.09784106734475095, 0.3765545740660794, 0.3995381805970435, 0.4363760532422356, 0.36526098015295483, 0.38407155009975835, 0.35049005478499706, 0.42310368089170725, 0.3752063191282373, 0.4117985298524096, 0.09876805839673652, 0.0738664984802544, 0.09742999877716751, 0.0918941017311723, 0.08503828373283762, 0.08225397091571773, 0.07728519944707513, 0.08467231238598816, 0.08635767125310745, 0.23456997105586697, 0.1948904657963939, 0.21185468573129784, 0.19339736893776582, 0.22317547447015973, 0.2552605635962628, 0.18821835164290368, 0.18696315985848044, 0.17864098837858422, 0.20954602086033702, 0.2586965544273878, 0.2684095013672372, 0.2534102244412326, 0.23836886464774898, 0.28021879750687007, 0.27232349445493675, 0.2788897189163384, 0.24146103694475962, 0.16801638407965713, 0.1920358202275967, 0.2147091559747648, 0.20448736708873905, 0.16725954811847454, 0.21385673080221745, 0.21923191559366106, 0.23105239850398673, 0.212303613417948, 0.2011822900299911, 0.18607988292333444, 0.19852504473522115, 0.20700653769942423, 0.19130686012456422, 0.20215389179825805, 0.20240116218482918, 0.20073504507014728, 0.2209221658850754, 0.16302768942091295, 0.18151208584100276, 0.17554910509854504, 0.1818308153426107, 0.17317598642441268, 0.18110092476260686, 0.17800223578594965, 0.1666338670287436, 0.16591785065399234, 0.17184531274768855, 0.15981369454874716, 0.401016440524271, 0.1846041102179784, 0.18948963769846883, 0.4347636678856771, 0.1373628394323959, 0.13136281211594447, 0.15149744120570652, 0.3126102794543759, 0.1513522188629346, 0.4205209547434958, 0.47658994152073775, 0.4471065026351603, 0.4977676310269219, 0.155219175492337, 0.5759265940691272, 0.16060955998553672, 0.19325502953103446, 0.1666576823234056, 0.20777785649570146, 0.18466124155475327, 0.18060564174710148, 0.18248362373521387, 0.18496250041352136, 0.21581371792155402, 0.18701106332125683, 0.08023679390886151, 0.06898813768752221, 0.06904177953387547, 0.08082310929797532, 0.08065111365499489, 0.08256694686766786, 0.06863959783990103, 0.08113800479305933, 0.07587975328561658]}, "mutation_prompt": null}
{"id": "586dd6c7-2a1f-4f0e-be8c-c0d28bd7680c", "solution": "import numpy as np\n\nclass OptimizedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.7\n        self.CR = 0.85\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def opposition_based_learning(self, individual):\n        return self.lower_bound + self.upper_bound - individual\n\n    def local_search(self, x, func):\n        trial = x + np.random.uniform(-0.05, 0.05, self.dim)\n        trial = np.clip(trial, self.lower_bound, self.upper_bound)\n        return trial if func(trial) < func(x) else x\n\n    def mutate(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = indices\n        while a == idx:\n            a = np.random.choice(self.population_size)\n        diversity_factor = np.exp(-np.std(population, axis=0).mean())  # Simplified calculation\n        mutant = population[a] + self.F * diversity_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.CR\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        budget_used = self.population_size\n\n        while budget_used < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(population, i)\n                trial = self.crossover(population[i], mutant)\n                trial = self.local_search(trial, func)\n\n                trial_fitness = func(trial)\n                budget_used += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if budget_used < self.budget and np.random.rand() < 0.5:\n                    opposite = self.opposition_based_learning(population[i])\n                    opposite_fitness = func(opposite)\n                    budget_used += 1\n                    if opposite_fitness < fitness[i]:\n                        population[i] = opposite\n                        fitness[i] = opposite_fitness\n\n                if budget_used >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "OptimizedAdaptiveDifferentialEvolution", "description": "Optimized differential evolution with reduced complexity through efficient mutation and crossover processes.", "configspace": "", "generation": 84, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fee4dec4-c581-4c24-8676-7ade8021b828", "metadata": {"aucs": [0.4289818566732434, 0.46504556031436284, 0.43525593459029077, 0.42072093476378924, 0.48310392086724974, 0.4604419276351438, 0.4255475671180051, 0.4385677822339934, 0.39129332439736886, 0.22615912269606386, 0.18813670995690368, 0.18362503179108347, 0.15708002218634187, 0.23833650834531572, 0.18769582941876994, 0.17996583090882212, 0.1815468689820775, 0.19476113683897134, 0.11565825078071235, 0.09210561935595829, 0.11332196678391016, 0.09840940271027065, 0.0916034326461389, 0.10451724407003038, 0.10829919624889262, 0.12531775815417312, 0.09790640192598221, 0.08229744219375701, 0.08086307244439273, 0.09734405269319013, 0.11146290008601822, 0.0968437944511421, 0.08349046482219491, 0.09928237107755444, 0.08422827817048295, 0.07554372614758176, 0.6337860281224914, 0.5580045894527108, 0.7025490636384191, 0.6646140483440439, 0.5860942780322385, 0.5107154117571258, 0.5340508133157191, 0.7478740644577289, 0.5662071261772881, 0.2280089364094724, 0.0730460761307622, 0.13932780784909027, 0.15778877444130213, 0.13268998723901493, 0.18066797340737506, 0.17820212034589566, 0.1753396039527655, 0.1878256919469905, 0.43408676232792165, 0.43499514115711113, 0.24951272969147908, 0.4931185352854143, 0.46586616628534927, 0.1779448893079414, 0.2865313074610619, 0.4755680292982887, 0.24254225182786593, 0.13258418129062688, 0.16348186126799047, 0.1391946846396055, 0.16832814888451852, 0.12941097108378707, 0.14026561660391068, 0.20436800790679432, 0.15362774580057703, 0.14177341511181474, 0.14166469793141767, 0.13134433347898633, 0.18708178255820718, 0.16931592315245647, 0.153004695739544, 0.1749684663124622, 0.15131187485809283, 0.15348500905116702, 0.17217715842312087, 0.03129171039613121, 0.05036910218917223, 0.0264253556940941, 0.05993229594315197, 0.06597382919628147, 0.06472108682101696, 0.06344553838790556, 0.02860636135175898, 0.11061832466029575, 0.1249596566543163, 0.11579602866455374, 0.11738772892523686, 0.08748385703626793, 0.07134608142998278, 0.13893725969288184, 0.12996353323829968, 0.0847610892931725, 0.23852877831614838, 0.005162331687069255, 0.015370047779079132, 0.0018007731921994008, 0.01636163699909743, 0.020512174046345866, 0.010637913663928744, 0.005273157781771065, 0.014567954676070305, 0.021043424509668673, 0.11418434080985629, 0.1080374708151639, 0.09747263472633927, 0.10841491222251465, 0.1067271408462499, 0.10674034663561327, 0.09908586950661469, 0.11127026855869993, 0.09784106734475095, 0.3765545740660794, 0.3995381805970435, 0.4363760532422356, 0.36526098015295483, 0.38407155009975835, 0.35049005478499706, 0.42310368089170725, 0.3752063191282373, 0.4117985298524096, 0.09876805839673652, 0.0738664984802544, 0.09742999877716751, 0.0918941017311723, 0.08503828373283762, 0.08225397091571773, 0.07728519944707513, 0.08467231238598816, 0.08635767125310745, 0.23456997105586697, 0.1948904657963939, 0.21185468573129784, 0.19339736893776582, 0.22317547447015973, 0.2552605635962628, 0.18821835164290368, 0.18696315985848044, 0.17864098837858422, 0.20954602086033702, 0.2586965544273878, 0.2684095013672372, 0.2534102244412326, 0.23836886464774898, 0.28021879750687007, 0.27232349445493675, 0.2788897189163384, 0.24146103694475962, 0.16801638407965713, 0.1920358202275967, 0.2147091559747648, 0.20448736708873905, 0.16725954811847454, 0.21385673080221745, 0.21923191559366106, 0.23105239850398673, 0.212303613417948, 0.2011822900299911, 0.18607988292333444, 0.19852504473522115, 0.20700653769942423, 0.19130686012456422, 0.20215389179825805, 0.20240116218482918, 0.20073504507014728, 0.2209221658850754, 0.16302768942091295, 0.18151208584100276, 0.17554910509854504, 0.1818308153426107, 0.17317598642441268, 0.18110092476260686, 0.17800223578594965, 0.1666338670287436, 0.16591785065399234, 0.17184531274768855, 0.15981369454874716, 0.401016440524271, 0.1846041102179784, 0.18948963769846883, 0.4347636678856771, 0.1373628394323959, 0.13136281211594447, 0.15149744120570652, 0.3126102794543759, 0.1513522188629346, 0.4205209547434958, 0.47658994152073775, 0.4471065026351603, 0.4977676310269219, 0.155219175492337, 0.5759265940691272, 0.16060955998553672, 0.19325502953103446, 0.1666576823234056, 0.20777785649570146, 0.18466124155475327, 0.18060564174710148, 0.18248362373521387, 0.18496250041352136, 0.21581371792155402, 0.18701106332125683, 0.08023679390886151, 0.06898813768752221, 0.06904177953387547, 0.08082310929797532, 0.08065111365499489, 0.08256694686766786, 0.06863959783990103, 0.08113800479305933, 0.07587975328561658]}, "mutation_prompt": null}
{"id": "e70b22e9-a633-475f-a4df-4be4de00df79", "solution": "import numpy as np\n\nclass OptimizedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.7\n        self.CR = 0.85\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def opposition_based_learning(self, individual):\n        return self.lower_bound + self.upper_bound - individual\n\n    def local_search(self, x, func):\n        trial = x + np.random.uniform(-0.05, 0.05, self.dim)\n        trial = np.clip(trial, self.lower_bound, self.upper_bound)\n        return trial if func(trial) < func(x) else x\n\n    def mutate(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = indices\n        while a == idx:\n            a = np.random.choice(self.population_size)\n        diversity_factor = np.exp(-np.std(population, axis=0).mean())  # Simplified calculation\n        mutant = population[a] + self.F * diversity_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.CR\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        budget_used = self.population_size\n\n        while budget_used < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(population, i)\n                trial = self.crossover(population[i], mutant)\n                trial = self.local_search(trial, func)\n\n                trial_fitness = func(trial)\n                budget_used += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if budget_used < self.budget and np.random.rand() < 0.5:\n                    opposite = self.opposition_based_learning(population[i])\n                    opposite_fitness = func(opposite)\n                    budget_used += 1\n                    if opposite_fitness < fitness[i]:\n                        population[i] = opposite\n                        fitness[i] = opposite_fitness\n\n                if budget_used >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "OptimizedAdaptiveDifferentialEvolution", "description": "Optimized differential evolution with reduced complexity through efficient mutation and crossover processes.", "configspace": "", "generation": 84, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fee4dec4-c581-4c24-8676-7ade8021b828", "metadata": {"aucs": [0.4289818566732434, 0.46504556031436284, 0.43525593459029077, 0.42072093476378924, 0.48310392086724974, 0.4604419276351438, 0.4255475671180051, 0.4385677822339934, 0.39129332439736886, 0.22615912269606386, 0.18813670995690368, 0.18362503179108347, 0.15708002218634187, 0.23833650834531572, 0.18769582941876994, 0.17996583090882212, 0.1815468689820775, 0.19476113683897134, 0.11565825078071235, 0.09210561935595829, 0.11332196678391016, 0.09840940271027065, 0.0916034326461389, 0.10451724407003038, 0.10829919624889262, 0.12531775815417312, 0.09790640192598221, 0.08229744219375701, 0.08086307244439273, 0.09734405269319013, 0.11146290008601822, 0.0968437944511421, 0.08349046482219491, 0.09928237107755444, 0.08422827817048295, 0.07554372614758176, 0.6337860281224914, 0.5580045894527108, 0.7025490636384191, 0.6646140483440439, 0.5860942780322385, 0.5107154117571258, 0.5340508133157191, 0.7478740644577289, 0.5662071261772881, 0.2280089364094724, 0.0730460761307622, 0.13932780784909027, 0.15778877444130213, 0.13268998723901493, 0.18066797340737506, 0.17820212034589566, 0.1753396039527655, 0.1878256919469905, 0.43408676232792165, 0.43499514115711113, 0.24951272969147908, 0.4931185352854143, 0.46586616628534927, 0.1779448893079414, 0.2865313074610619, 0.4755680292982887, 0.24254225182786593, 0.13258418129062688, 0.16348186126799047, 0.1391946846396055, 0.16832814888451852, 0.12941097108378707, 0.14026561660391068, 0.20436800790679432, 0.15362774580057703, 0.14177341511181474, 0.14166469793141767, 0.13134433347898633, 0.18708178255820718, 0.16931592315245647, 0.153004695739544, 0.1749684663124622, 0.15131187485809283, 0.15348500905116702, 0.17217715842312087, 0.03129171039613121, 0.05036910218917223, 0.0264253556940941, 0.05993229594315197, 0.06597382919628147, 0.06472108682101696, 0.06344553838790556, 0.02860636135175898, 0.11061832466029575, 0.1249596566543163, 0.11579602866455374, 0.11738772892523686, 0.08748385703626793, 0.07134608142998278, 0.13893725969288184, 0.12996353323829968, 0.0847610892931725, 0.23852877831614838, 0.005162331687069255, 0.015370047779079132, 0.0018007731921994008, 0.01636163699909743, 0.020512174046345866, 0.010637913663928744, 0.005273157781771065, 0.014567954676070305, 0.021043424509668673, 0.11418434080985629, 0.1080374708151639, 0.09747263472633927, 0.10841491222251465, 0.1067271408462499, 0.10674034663561327, 0.09908586950661469, 0.11127026855869993, 0.09784106734475095, 0.3765545740660794, 0.3995381805970435, 0.4363760532422356, 0.36526098015295483, 0.38407155009975835, 0.35049005478499706, 0.42310368089170725, 0.3752063191282373, 0.4117985298524096, 0.09876805839673652, 0.0738664984802544, 0.09742999877716751, 0.0918941017311723, 0.08503828373283762, 0.08225397091571773, 0.07728519944707513, 0.08467231238598816, 0.08635767125310745, 0.23456997105586697, 0.1948904657963939, 0.21185468573129784, 0.19339736893776582, 0.22317547447015973, 0.2552605635962628, 0.18821835164290368, 0.18696315985848044, 0.17864098837858422, 0.20954602086033702, 0.2586965544273878, 0.2684095013672372, 0.2534102244412326, 0.23836886464774898, 0.28021879750687007, 0.27232349445493675, 0.2788897189163384, 0.24146103694475962, 0.16801638407965713, 0.1920358202275967, 0.2147091559747648, 0.20448736708873905, 0.16725954811847454, 0.21385673080221745, 0.21923191559366106, 0.23105239850398673, 0.212303613417948, 0.2011822900299911, 0.18607988292333444, 0.19852504473522115, 0.20700653769942423, 0.19130686012456422, 0.20215389179825805, 0.20240116218482918, 0.20073504507014728, 0.2209221658850754, 0.16302768942091295, 0.18151208584100276, 0.17554910509854504, 0.1818308153426107, 0.17317598642441268, 0.18110092476260686, 0.17800223578594965, 0.1666338670287436, 0.16591785065399234, 0.17184531274768855, 0.15981369454874716, 0.401016440524271, 0.1846041102179784, 0.18948963769846883, 0.4347636678856771, 0.1373628394323959, 0.13136281211594447, 0.15149744120570652, 0.3126102794543759, 0.1513522188629346, 0.4205209547434958, 0.47658994152073775, 0.4471065026351603, 0.4977676310269219, 0.155219175492337, 0.5759265940691272, 0.16060955998553672, 0.19325502953103446, 0.1666576823234056, 0.20777785649570146, 0.18466124155475327, 0.18060564174710148, 0.18248362373521387, 0.18496250041352136, 0.21581371792155402, 0.18701106332125683, 0.08023679390886151, 0.06898813768752221, 0.06904177953387547, 0.08082310929797532, 0.08065111365499489, 0.08256694686766786, 0.06863959783990103, 0.08113800479305933, 0.07587975328561658]}, "mutation_prompt": null}
{"id": "b481b1a9-80dc-484f-84a0-1d2f95b97878", "solution": "import numpy as np\n\nclass OptimizedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.7\n        self.CR = 0.85\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def opposition_based_learning(self, individual):\n        return self.lower_bound + self.upper_bound - individual\n\n    def local_search(self, x, func):\n        trial = x + np.random.uniform(-0.05, 0.05, self.dim)\n        trial = np.clip(trial, self.lower_bound, self.upper_bound)\n        return trial if func(trial) < func(x) else x\n\n    def mutate(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = indices\n        while a == idx:\n            a = np.random.choice(self.population_size)\n        diversity_factor = np.exp(-np.std(population, axis=0).mean())  # Simplified calculation\n        mutant = population[a] + self.F * diversity_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.CR\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        budget_used = self.population_size\n\n        while budget_used < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(population, i)\n                trial = self.crossover(population[i], mutant)\n                trial = self.local_search(trial, func)\n\n                trial_fitness = func(trial)\n                budget_used += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if budget_used < self.budget and np.random.rand() < 0.5:\n                    opposite = self.opposition_based_learning(population[i])\n                    opposite_fitness = func(opposite)\n                    budget_used += 1\n                    if opposite_fitness < fitness[i]:\n                        population[i] = opposite\n                        fitness[i] = opposite_fitness\n\n                if budget_used >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "OptimizedAdaptiveDifferentialEvolution", "description": "Optimized differential evolution with reduced complexity through efficient mutation and crossover processes.", "configspace": "", "generation": 84, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fee4dec4-c581-4c24-8676-7ade8021b828", "metadata": {"aucs": [0.4289818566732434, 0.46504556031436284, 0.43525593459029077, 0.42072093476378924, 0.48310392086724974, 0.4604419276351438, 0.4255475671180051, 0.4385677822339934, 0.39129332439736886, 0.22615912269606386, 0.18813670995690368, 0.18362503179108347, 0.15708002218634187, 0.23833650834531572, 0.18769582941876994, 0.17996583090882212, 0.1815468689820775, 0.19476113683897134, 0.11565825078071235, 0.09210561935595829, 0.11332196678391016, 0.09840940271027065, 0.0916034326461389, 0.10451724407003038, 0.10829919624889262, 0.12531775815417312, 0.09790640192598221, 0.08229744219375701, 0.08086307244439273, 0.09734405269319013, 0.11146290008601822, 0.0968437944511421, 0.08349046482219491, 0.09928237107755444, 0.08422827817048295, 0.07554372614758176, 0.6337860281224914, 0.5580045894527108, 0.7025490636384191, 0.6646140483440439, 0.5860942780322385, 0.5107154117571258, 0.5340508133157191, 0.7478740644577289, 0.5662071261772881, 0.2280089364094724, 0.0730460761307622, 0.13932780784909027, 0.15778877444130213, 0.13268998723901493, 0.18066797340737506, 0.17820212034589566, 0.1753396039527655, 0.1878256919469905, 0.43408676232792165, 0.43499514115711113, 0.24951272969147908, 0.4931185352854143, 0.46586616628534927, 0.1779448893079414, 0.2865313074610619, 0.4755680292982887, 0.24254225182786593, 0.13258418129062688, 0.16348186126799047, 0.1391946846396055, 0.16832814888451852, 0.12941097108378707, 0.14026561660391068, 0.20436800790679432, 0.15362774580057703, 0.14177341511181474, 0.14166469793141767, 0.13134433347898633, 0.18708178255820718, 0.16931592315245647, 0.153004695739544, 0.1749684663124622, 0.15131187485809283, 0.15348500905116702, 0.17217715842312087, 0.03129171039613121, 0.05036910218917223, 0.0264253556940941, 0.05993229594315197, 0.06597382919628147, 0.06472108682101696, 0.06344553838790556, 0.02860636135175898, 0.11061832466029575, 0.1249596566543163, 0.11579602866455374, 0.11738772892523686, 0.08748385703626793, 0.07134608142998278, 0.13893725969288184, 0.12996353323829968, 0.0847610892931725, 0.23852877831614838, 0.005162331687069255, 0.015370047779079132, 0.0018007731921994008, 0.01636163699909743, 0.020512174046345866, 0.010637913663928744, 0.005273157781771065, 0.014567954676070305, 0.021043424509668673, 0.11418434080985629, 0.1080374708151639, 0.09747263472633927, 0.10841491222251465, 0.1067271408462499, 0.10674034663561327, 0.09908586950661469, 0.11127026855869993, 0.09784106734475095, 0.3765545740660794, 0.3995381805970435, 0.4363760532422356, 0.36526098015295483, 0.38407155009975835, 0.35049005478499706, 0.42310368089170725, 0.3752063191282373, 0.4117985298524096, 0.09876805839673652, 0.0738664984802544, 0.09742999877716751, 0.0918941017311723, 0.08503828373283762, 0.08225397091571773, 0.07728519944707513, 0.08467231238598816, 0.08635767125310745, 0.23456997105586697, 0.1948904657963939, 0.21185468573129784, 0.19339736893776582, 0.22317547447015973, 0.2552605635962628, 0.18821835164290368, 0.18696315985848044, 0.17864098837858422, 0.20954602086033702, 0.2586965544273878, 0.2684095013672372, 0.2534102244412326, 0.23836886464774898, 0.28021879750687007, 0.27232349445493675, 0.2788897189163384, 0.24146103694475962, 0.16801638407965713, 0.1920358202275967, 0.2147091559747648, 0.20448736708873905, 0.16725954811847454, 0.21385673080221745, 0.21923191559366106, 0.23105239850398673, 0.212303613417948, 0.2011822900299911, 0.18607988292333444, 0.19852504473522115, 0.20700653769942423, 0.19130686012456422, 0.20215389179825805, 0.20240116218482918, 0.20073504507014728, 0.2209221658850754, 0.16302768942091295, 0.18151208584100276, 0.17554910509854504, 0.1818308153426107, 0.17317598642441268, 0.18110092476260686, 0.17800223578594965, 0.1666338670287436, 0.16591785065399234, 0.17184531274768855, 0.15981369454874716, 0.401016440524271, 0.1846041102179784, 0.18948963769846883, 0.4347636678856771, 0.1373628394323959, 0.13136281211594447, 0.15149744120570652, 0.3126102794543759, 0.1513522188629346, 0.4205209547434958, 0.47658994152073775, 0.4471065026351603, 0.4977676310269219, 0.155219175492337, 0.5759265940691272, 0.16060955998553672, 0.19325502953103446, 0.1666576823234056, 0.20777785649570146, 0.18466124155475327, 0.18060564174710148, 0.18248362373521387, 0.18496250041352136, 0.21581371792155402, 0.18701106332125683, 0.08023679390886151, 0.06898813768752221, 0.06904177953387547, 0.08082310929797532, 0.08065111365499489, 0.08256694686766786, 0.06863959783990103, 0.08113800479305933, 0.07587975328561658]}, "mutation_prompt": null}
{"id": "011c8751-d5ca-430c-8457-6ff1a972dd5d", "solution": "import numpy as np\n\nclass OptimizedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 * dim\n        self.F = 0.7\n        self.CR = 0.85\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def opposition_based_learning(self, individual):\n        return self.lower_bound + self.upper_bound - individual\n\n    def local_search(self, x, func):\n        trial = x + np.random.uniform(-0.05, 0.05, self.dim)\n        trial = np.clip(trial, self.lower_bound, self.upper_bound)\n        return trial if func(trial) < func(x) else x\n\n    def mutate(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = indices\n        while a == idx:\n            a = np.random.choice(self.population_size)\n        diversity_factor = np.exp(-np.std(population, axis=0).mean())  # Simplified calculation\n        mutant = population[a] + self.F * diversity_factor * (population[b] - population[c])\n        return np.clip(mutant, self.lower_bound, self.upper_bound)\n\n    def crossover(self, target, mutant):\n        cross_points = np.random.rand(self.dim) < self.CR\n        trial = np.where(cross_points, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        budget_used = self.population_size\n\n        while budget_used < self.budget:\n            for i in range(self.population_size):\n                mutant = self.mutate(population, i)\n                trial = self.crossover(population[i], mutant)\n                trial = self.local_search(trial, func)\n\n                trial_fitness = func(trial)\n                budget_used += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n\n                if budget_used < self.budget and np.random.rand() < 0.5:\n                    opposite = self.opposition_based_learning(population[i])\n                    opposite_fitness = func(opposite)\n                    budget_used += 1\n                    if opposite_fitness < fitness[i]:\n                        population[i] = opposite\n                        fitness[i] = opposite_fitness\n\n                if budget_used >= self.budget:\n                    break\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "OptimizedAdaptiveDifferentialEvolution", "description": "Optimized differential evolution with reduced complexity through efficient mutation and crossover processes.", "configspace": "", "generation": 84, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fee4dec4-c581-4c24-8676-7ade8021b828", "metadata": {"aucs": [0.4289818566732434, 0.46504556031436284, 0.43525593459029077, 0.42072093476378924, 0.48310392086724974, 0.4604419276351438, 0.4255475671180051, 0.4385677822339934, 0.39129332439736886, 0.22615912269606386, 0.18813670995690368, 0.18362503179108347, 0.15708002218634187, 0.23833650834531572, 0.18769582941876994, 0.17996583090882212, 0.1815468689820775, 0.19476113683897134, 0.11565825078071235, 0.09210561935595829, 0.11332196678391016, 0.09840940271027065, 0.0916034326461389, 0.10451724407003038, 0.10829919624889262, 0.12531775815417312, 0.09790640192598221, 0.08229744219375701, 0.08086307244439273, 0.09734405269319013, 0.11146290008601822, 0.0968437944511421, 0.08349046482219491, 0.09928237107755444, 0.08422827817048295, 0.07554372614758176, 0.6337860281224914, 0.5580045894527108, 0.7025490636384191, 0.6646140483440439, 0.5860942780322385, 0.5107154117571258, 0.5340508133157191, 0.7478740644577289, 0.5662071261772881, 0.2280089364094724, 0.0730460761307622, 0.13932780784909027, 0.15778877444130213, 0.13268998723901493, 0.18066797340737506, 0.17820212034589566, 0.1753396039527655, 0.1878256919469905, 0.43408676232792165, 0.43499514115711113, 0.24951272969147908, 0.4931185352854143, 0.46586616628534927, 0.1779448893079414, 0.2865313074610619, 0.4755680292982887, 0.24254225182786593, 0.13258418129062688, 0.16348186126799047, 0.1391946846396055, 0.16832814888451852, 0.12941097108378707, 0.14026561660391068, 0.20436800790679432, 0.15362774580057703, 0.14177341511181474, 0.14166469793141767, 0.13134433347898633, 0.18708178255820718, 0.16931592315245647, 0.153004695739544, 0.1749684663124622, 0.15131187485809283, 0.15348500905116702, 0.17217715842312087, 0.03129171039613121, 0.05036910218917223, 0.0264253556940941, 0.05993229594315197, 0.06597382919628147, 0.06472108682101696, 0.06344553838790556, 0.02860636135175898, 0.11061832466029575, 0.1249596566543163, 0.11579602866455374, 0.11738772892523686, 0.08748385703626793, 0.07134608142998278, 0.13893725969288184, 0.12996353323829968, 0.0847610892931725, 0.23852877831614838, 0.005162331687069255, 0.015370047779079132, 0.0018007731921994008, 0.01636163699909743, 0.020512174046345866, 0.010637913663928744, 0.005273157781771065, 0.014567954676070305, 0.021043424509668673, 0.11418434080985629, 0.1080374708151639, 0.09747263472633927, 0.10841491222251465, 0.1067271408462499, 0.10674034663561327, 0.09908586950661469, 0.11127026855869993, 0.09784106734475095, 0.3765545740660794, 0.3995381805970435, 0.4363760532422356, 0.36526098015295483, 0.38407155009975835, 0.35049005478499706, 0.42310368089170725, 0.3752063191282373, 0.4117985298524096, 0.09876805839673652, 0.0738664984802544, 0.09742999877716751, 0.0918941017311723, 0.08503828373283762, 0.08225397091571773, 0.07728519944707513, 0.08467231238598816, 0.08635767125310745, 0.23456997105586697, 0.1948904657963939, 0.21185468573129784, 0.19339736893776582, 0.22317547447015973, 0.2552605635962628, 0.18821835164290368, 0.18696315985848044, 0.17864098837858422, 0.20954602086033702, 0.2586965544273878, 0.2684095013672372, 0.2534102244412326, 0.23836886464774898, 0.28021879750687007, 0.27232349445493675, 0.2788897189163384, 0.24146103694475962, 0.16801638407965713, 0.1920358202275967, 0.2147091559747648, 0.20448736708873905, 0.16725954811847454, 0.21385673080221745, 0.21923191559366106, 0.23105239850398673, 0.212303613417948, 0.2011822900299911, 0.18607988292333444, 0.19852504473522115, 0.20700653769942423, 0.19130686012456422, 0.20215389179825805, 0.20240116218482918, 0.20073504507014728, 0.2209221658850754, 0.16302768942091295, 0.18151208584100276, 0.17554910509854504, 0.1818308153426107, 0.17317598642441268, 0.18110092476260686, 0.17800223578594965, 0.1666338670287436, 0.16591785065399234, 0.17184531274768855, 0.15981369454874716, 0.401016440524271, 0.1846041102179784, 0.18948963769846883, 0.4347636678856771, 0.1373628394323959, 0.13136281211594447, 0.15149744120570652, 0.3126102794543759, 0.1513522188629346, 0.4205209547434958, 0.47658994152073775, 0.4471065026351603, 0.4977676310269219, 0.155219175492337, 0.5759265940691272, 0.16060955998553672, 0.19325502953103446, 0.1666576823234056, 0.20777785649570146, 0.18466124155475327, 0.18060564174710148, 0.18248362373521387, 0.18496250041352136, 0.21581371792155402, 0.18701106332125683, 0.08023679390886151, 0.06898813768752221, 0.06904177953387547, 0.08082310929797532, 0.08065111365499489, 0.08256694686766786, 0.06863959783990103, 0.08113800479305933, 0.07587975328561658]}, "mutation_prompt": null}
