{"id": "6385e31d-f8df-4660-b533-30ec5e4c74b1", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.cross_prob = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        eval_count = 0\n\n        while eval_count < self.budget:\n            # Evaluate the population\n            for i in range(self.population_size):\n                score = func(self.population[i])\n                eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n                if eval_count >= self.budget:\n                    break\n\n            # Update velocities and positions using PSO\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            cognitive_component = self.cognitive_coeff * r1 * (self.personal_best_positions - self.population)\n            social_component = self.social_coeff * r2 * (self.global_best_position - self.population)\n            self.velocities = (self.inertia_weight * self.velocities) + cognitive_component + social_component\n            self.population = self.population + self.velocities\n\n            # Boundary handling\n            self.population = np.clip(self.population, self.lower_bound, self.upper_bound)\n\n            # Apply Differential Evolution\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = self.population[np.random.choice(indices, 3, replace=False)]\n                mutant = a + self.mutation_factor * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cross_prob:\n                        trial[j] = mutant[j]\n\n                # Evaluate the trial vector\n                trial_score = func(trial)\n                eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.population[i] = trial\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial\n                if eval_count >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_score", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization and Differential Evolution algorithm combining social learning with adaptive mutation strategies for robust exploration and exploitation.", "configspace": "", "generation": 0, "fitness": 0.26203064480036997, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.25.", "error": "", "parent_id": null, "metadata": {"aucs": [0.783369121696936, 0.7540062080559535, 0.754257945073288, 0.7812798481585049, 0.18205015457240792, 0.7470079076511263, 0.7841816579576906, 0.793952557303216, 0.7813933353103462, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.476535050486925, 0.3311878684916266, 0.0570265399358415, 0.04797237969752988, 0.4666392371010111, 0.442728511613914, 0.11873013422806311, 0.4708434120937586, 0.1691834210302543, 0.15948582762120245, 0.1711827172657715, 0.11896549987541516, 0.11369517006444707, 0.10840264331942784, 0.1379273437248134, 0.11348283058191733, 0.15225389126960232, 0.10415928613976433, 0.11597682397747755, 0.12119450000075871, 0.10925822342785196, 0.14389726096044775, 0.13969472499246438, 0.10409945448825564, 0.9811726399582292, 0.983585891406837, 0.9903852869234648, 0.9816662533303343, 0.9812357395525232, 0.9740713174637124, 0.9863207434092428, 0.9812679627716403, 0.9799747849358218, 0.4825834318902751, 0.059222807589588644, 0.5364450129077725, 0.14956062540379478, 0.14974070759818714, 0.1504083279976267, 0.12475049345639144, 0.5202001578827373, 0.08733957606986509, 0.8414407159226724, 0.6935604588229619, 0.22085150745274085, 0.27615214066505256, 0.20484489777889914, 0.7689733937714077, 0.20294112073522164, 0.666618721926004, 0.672908581846309, 0.1961999481035105, 0.1268084322027384, 0.20667402466389817, 0.12906483656609802, 0.19686103473504668, 0.12127131709185957, 0.29890696359777136, 0.18097311413196926, 0.20106496542668528, 0.19018025927277515, 0.02145416165746794, 0.10030589590228922, 0.22621961130304402, 0.2008281580837371, 0.17763144280818344, 0.2721786823467671, 0.09612737388143955, 0.16638136187464547, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03322801322465607, 0.035921545831875124, 0.00497787990809806, 0.023123886196437127, 9.999999999998899e-05, 0.004568180618535367, 0.06649535558330699, 0.030033626569416216, 0.03615727033780092, 0.07223293068605707, 0.012467913756721294, 0.0244189094924665, 0.043358272681152776, 0.053795629553270885, 0.021555068429300994, 0.04088148622995247, 0.041855743465371575, 0.0864446164379773, 0.1608696150781458, 0.1709434672365323, 0.06595839776449008, 0.08708936788379273, 0.1380936579234815, 0.06190026341691701, 0.041164384749847516, 0.06817357594991968, 0.13998368280070028, 0.2601001363896771, 0.006145449000296899, 0.27634062890531974, 0.04760788260711468, 9.999999999998899e-05, 0.07963887154889848, 0.5352257254069192, 0.4926445692822802, 0.4868476295793738, 0.49350519130802994, 0.13803947704925246, 0.2084397451428205, 0.5243352044767713, 0.5575162435585321, 0.5317775551709312, 0.10673484374352793, 0.09977774471318246, 0.036941890708753866, 0.09748279549743344, 0.13418709129711204, 0.12918371479766244, 0.10515696710505873, 0.1347632959522398, 0.09561351704975618, 0.2639591111846459, 0.21057386565262481, 0.1394202026849285, 0.20953310302848083, 0.3094244395880107, 0.18148045516419486, 0.3765107874067294, 0.20338097733985294, 0.22034691653282978, 0.4683699662321885, 0.24862877494977464, 0.3091058557979114, 0.348521018311851, 0.23580844921293742, 0.41412605610266706, 0.21310209187301166, 0.40434553620268143, 0.4254615600255893, 0.19621282659722794, 0.28606554000670525, 0.2731963088627337, 0.24153929064745494, 0.1844316582633495, 0.21724518978226037, 0.2907346860720488, 0.2542851834729476, 0.19063842596666314, 0.22203597682758847, 0.14306149756238662, 0.20387247316416202, 0.1876070800470988, 0.20987230931394396, 0.19921904182048567, 0.20875211752833855, 0.1878933539465748, 0.23709776701580954, 0.24264797803071225, 0.19232519867032027, 0.19556165974859874, 0.21314678464683168, 0.19994292104650657, 0.20067582836671105, 0.23792675397639673, 0.21539788900510037, 0.21936214668368803, 0.8433072566353328, 0.18525388077860638, 0.11473721027264305, 0.8421119955294103, 0.20029143214625467, 0.7572885106952021, 0.09958502178859108, 0.16907811438839293, 0.21032842228145399, 0.6358618471044024, 0.15596548625541695, 0.11223274077253431, 0.2085165101039611, 0.22356467284593096, 0.5381149589209318, 0.20624436387165657, 0.18796364159987222, 0.5947758633450155, 0.18188294237529667, 0.18877845784222314, 0.19042811926096448, 0.17949071873739597, 0.18736348708101225, 0.1929845256138557, 0.2010255001395781, 0.19388786145119608, 0.18156658461292252, 0.11650543617723996, 0.09393179521441886, 0.08568723921139387, 0.08394030782952744, 0.09669962009139743, 0.08614544967788862, 0.07374019522124386, 0.08977446624180951, 0.09884230301696084]}, "mutation_prompt": null}
{"id": "f19e1c7b-0817-43cc-a83a-5819fa094bee", "solution": "import numpy as np\n\nclass RefinedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.9  # Increased mutation factor for diversity\n        self.cross_prob = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        eval_count = 0\n        inertia_dampening = 0.99  # New parameter for adaptive inertia\n\n        while eval_count < self.budget:\n            # Evaluate the population\n            for i in range(self.population_size):\n                score = func(self.population[i])\n                eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n                if eval_count >= self.budget:\n                    break\n\n            # Update velocities and positions using PSO\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            cognitive_component = self.cognitive_coeff * r1 * (self.personal_best_positions - self.population)\n            social_component = self.social_coeff * r2 * (self.global_best_position - self.population)\n            self.velocities = (self.inertia_weight * self.velocities) + cognitive_component + social_component\n            self.population = self.population + self.velocities\n\n            # Boundary handling\n            self.population = np.clip(self.population, self.lower_bound, self.upper_bound)\n\n            # Apply Differential Evolution\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = self.population[np.random.choice(indices, 3, replace=False)]\n                mutant = a + self.mutation_factor * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cross_prob:\n                        trial[j] = mutant[j]\n\n                # Evaluate the trial vector\n                trial_score = func(trial)\n                eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.population[i] = trial\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial\n                if eval_count >= self.budget:\n                    break\n\n            # Adapt inertia weight\n            self.inertia_weight *= inertia_dampening\n\n        return self.global_best_position, self.global_best_score", "name": "RefinedHybridPSODE", "description": "A refined Hybrid PSO-DE with enhanced mutation strategy and adaptive coefficients for faster convergence.", "configspace": "", "generation": 1, "fitness": 0.2756373204854005, "feedback": "The algorithm RefinedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.26.", "error": "", "parent_id": "6385e31d-f8df-4660-b533-30ec5e4c74b1", "metadata": {"aucs": [0.8525861049524731, 0.8341466154518679, 0.8441223436437375, 0.18269698908917742, 0.1890075553343279, 0.18301978447547185, 0.8399361226305768, 0.8449248880953911, 0.8392850759968354, 0.54909502439807, 0.03909033705421494, 9.999999999998899e-05, 0.7129362076322339, 0.04473622446874037, 0.05303766996286796, 0.7037576833978865, 0.7104260341605507, 0.6877178492307702, 0.1739499478698775, 0.1537550647482271, 0.15074959370582441, 0.126986541948911, 0.07069958875019788, 0.14885413341973475, 0.1468449854523004, 0.12473655853086385, 0.171843587394371, 0.11271032801737058, 0.1282501869487367, 0.1454051281104103, 0.1216410282006003, 0.15285718620922395, 0.10344542396114798, 0.11387321261647543, 0.10079998020967029, 0.13485914419812728, 0.9813651019200026, 0.9812764333925476, 0.9904151528934609, 0.9861594114786512, 0.985105373218556, 0.9793955666805356, 0.9864023323852331, 0.981793397995802, 0.9793976469358979, 0.6520341501424753, 0.6146047151600582, 0.5456072986143079, 0.18700741862951764, 0.15012897045296236, 0.7254122028945182, 0.08774823792888897, 0.6485739667946857, 0.08810231699246251, 0.22484424433446226, 0.7749342356602382, 0.3690011208397186, 0.8340227540998424, 0.18975717588607477, 0.18859772488737214, 0.12189656715987385, 0.16799125753338284, 0.22464529759785057, 0.09423311317944938, 0.21760128753535124, 0.17933059557799658, 0.10238558723106272, 0.19185959727719715, 0.1267659983042727, 0.20499069402183112, 0.10826964799369287, 0.19222749838200714, 0.2363484130004272, 0.016131836800826527, 0.24353987421703127, 0.20862002487076348, 0.2234833058274679, 0.141509156205203, 0.21259883186891515, 0.13005228610754727, 0.11495318537374677, 0.0022741567540295327, 9.999999999998899e-05, 9.999999999998899e-05, 0.002671778746464737, 0.01660879163970186, 9.999999999998899e-05, 0.006478542994684755, 9.999999999998899e-05, 0.00013846850468179905, 0.02727558775891792, 0.037237219521592646, 0.030639168089908853, 0.11270579241442935, 0.018113327956473912, 0.024945507069943917, 0.05889119695150169, 0.07169513068483135, 0.05161850021985048, 0.04613311904034367, 0.03128173612110918, 0.15106895711892243, 0.14833361274922519, 0.35343552774470577, 0.07289388940013541, 0.0966446178192859, 0.08335626600720458, 0.07905588317497181, 0.1868320334132202, 0.12544797786591166, 0.1331194669443052, 0.10682385113233972, 0.007973367930777076, 0.08462793197929674, 0.048200167025398866, 0.08019746345779677, 0.1506758883126762, 0.5205391203458946, 0.5088092147730119, 0.5403131544650759, 0.5892663179947903, 0.17984388924972372, 0.20821869398196036, 0.5695782179063877, 0.5527687799400978, 0.5584362793717441, 0.07014846144400222, 0.09908261497493809, 0.0999585796765714, 0.14911189395241142, 0.10309274288337233, 0.1347248628907295, 0.0784210895891112, 0.10129512851376699, 0.12279116010201419, 0.16375494127525558, 0.3241682967287842, 0.2495157071887445, 0.32966675492902175, 0.29531086916463967, 0.2956296314559236, 0.3956082436022931, 0.21114772140787386, 0.20008798829920282, 0.222346278945036, 0.5854047879398006, 0.28392093502583293, 0.27398697065906996, 0.42672857476378745, 0.4585771682294475, 0.2905954969204604, 0.2879990109133038, 0.2090528000742281, 0.3970990790053923, 0.3708392620689597, 0.27848535975126154, 0.24996185154599804, 0.2694533470994508, 0.23392155922049984, 0.28820988548670134, 0.31042708360848115, 0.3791500361303535, 0.2486131216579096, 0.16526464937186136, 0.22924803835868202, 0.21059721048111346, 0.20145753847122838, 0.23469956102660283, 0.23596776433845612, 0.19506919421827107, 0.2406146077870892, 0.21953378741929197, 0.20202305023600786, 0.7344483598028229, 0.23735648560062106, 0.21247357033910597, 0.2090177400226455, 0.21079821948836064, 0.20410850707384698, 0.21941993052690567, 0.8765124481778688, 0.18578394761168793, 0.11289412731863468, 0.1753329041392917, 0.20072791412663382, 0.19844800882863267, 0.12999639935631568, 0.16871988794524206, 0.9021894522939599, 0.8360351602060936, 0.15578604261097573, 0.20773341522171318, 0.20694698680388257, 0.2232358440178216, 0.795103653475956, 0.20399366944394814, 0.19837447885491077, 0.7817526727712869, 0.19967180382201877, 0.21168195454154104, 0.19413197210392508, 0.19789545452459745, 0.18711896086239044, 0.19156421299995274, 0.19179167554712595, 0.1791054162849286, 0.19502423082838893, 0.09780749530784283, 0.09349867556174174, 0.08688190597181378, 0.09863107778104763, 0.10390585901889171, 0.08859945772432598, 0.08652058381610717, 0.08385430274307559, 0.08044792938964329]}, "mutation_prompt": null}
{"id": "a38917bb-838a-47b0-9f34-928a6da3fcbd", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8  # Reduced mutation factor for faster exploitation\n        self.cross_prob = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.dynamic_population_threshold = int(0.5 * self.budget)\n\n    def __call__(self, func):\n        eval_count = 0\n        inertia_dampening = 0.98  # Slightly increased dampening for better convergence control\n\n        while eval_count < self.budget:\n            # Evaluate the population\n            for i in range(self.population_size):\n                score = func(self.population[i])\n                eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n                if eval_count >= self.budget:\n                    break\n\n            # Dynamically adjust population size\n            if eval_count < self.dynamic_population_threshold and self.population_size < 40:\n                self.population_size += 1\n                self.population = np.concatenate((self.population, np.random.uniform(self.lower_bound, self.upper_bound, (1, self.dim))))\n                self.velocities = np.concatenate((self.velocities, np.random.uniform(-1, 1, (1, self.dim))))\n                self.personal_best_positions = np.concatenate((self.personal_best_positions, np.copy(self.population[-1:])))\n\n            # Update velocities and positions using PSO\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            cognitive_component = self.cognitive_coeff * r1 * (self.personal_best_positions - self.population)\n            social_component = self.social_coeff * r2 * (self.global_best_position - self.population)\n            self.velocities = (self.inertia_weight * self.velocities) + cognitive_component + social_component\n            self.population = self.population + self.velocities\n\n            # Boundary handling\n            self.population = np.clip(self.population, self.lower_bound, self.upper_bound)\n\n            # Apply Differential Evolution\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = self.population[np.random.choice(indices, 3, replace=False)]\n                mutant = a + self.mutation_factor * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cross_prob:\n                        trial[j] = mutant[j]\n\n                # Evaluate the trial vector\n                trial_score = func(trial)\n                eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.population[i] = trial\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial\n                if eval_count >= self.budget:\n                    break\n\n            # Adapt inertia weight\n            self.inertia_weight *= inertia_dampening\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedHybridPSODE", "description": "Enhanced Hybrid PSO-DE with dynamic swarm size and adaptive mutation for faster convergence.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('index 30 is out of bounds for axis 0 with size 30').", "error": "IndexError('index 30 is out of bounds for axis 0 with size 30')", "parent_id": "f19e1c7b-0817-43cc-a83a-5819fa094bee", "metadata": {}, "mutation_prompt": null}
{"id": "0192f6eb-61e5-499b-a3d4-c0230e13c11e", "solution": "import numpy as np\n\nclass RefinedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 30\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.9  # Increased mutation factor for diversity\n        self.cross_prob = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        eval_count = 0\n        inertia_dampening = 0.99  # New parameter for adaptive inertia\n\n        while eval_count < self.budget:\n            # Evaluate the population\n            for i in range(self.population_size):\n                score = func(self.population[i])\n                eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n                if eval_count >= self.budget:\n                    break\n\n            # Update velocities and positions using PSO\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            cognitive_component = self.cognitive_coeff * r1 * (self.personal_best_positions - self.population)\n            social_component = self.social_coeff * r2 * (self.global_best_position - self.population)\n            self.velocities = (self.inertia_weight * self.velocities) + cognitive_component + social_component\n            self.population = self.population + self.velocities\n\n            # Boundary handling\n            self.population = np.clip(self.population, self.lower_bound, self.upper_bound)\n\n            # Apply Differential Evolution\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = self.population[np.random.choice(indices, 3, replace=False)]\n                mutant = a + self.mutation_factor * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cross_prob:\n                        trial[j] = mutant[j]\n\n                # Evaluate the trial vector\n                trial_score = func(trial)\n                eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.population[i] = trial\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial\n                if eval_count >= self.budget:\n                    break\n\n            # Adapt inertia weight\n            self.inertia_weight *= inertia_dampening\n\n        return self.global_best_position, self.global_best_score", "name": "RefinedHybridPSODE", "description": "A refined Hybrid PSO-DE with enhanced mutation strategy and adaptive coefficients for faster convergence.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f19e1c7b-0817-43cc-a83a-5819fa094bee", "metadata": {"aucs": [0.8525861049524731, 0.8341466154518679, 0.8441223436437375, 0.18269698908917742, 0.1890075553343279, 0.18301978447547185, 0.8399361226305768, 0.8449248880953911, 0.8392850759968354, 0.54909502439807, 0.03909033705421494, 9.999999999998899e-05, 0.7129362076322339, 0.04473622446874037, 0.05303766996286796, 0.7037576833978865, 0.7104260341605507, 0.6877178492307702, 0.1739499478698775, 0.1537550647482271, 0.15074959370582441, 0.126986541948911, 0.07069958875019788, 0.14885413341973475, 0.1468449854523004, 0.12473655853086385, 0.171843587394371, 0.11271032801737058, 0.1282501869487367, 0.1454051281104103, 0.1216410282006003, 0.15285718620922395, 0.10344542396114798, 0.11387321261647543, 0.10079998020967029, 0.13485914419812728, 0.9813651019200026, 0.9812764333925476, 0.9904151528934609, 0.9861594114786512, 0.985105373218556, 0.9793955666805356, 0.9864023323852331, 0.981793397995802, 0.9793976469358979, 0.6520341501424753, 0.6146047151600582, 0.5456072986143079, 0.18700741862951764, 0.15012897045296236, 0.7254122028945182, 0.08774823792888897, 0.6485739667946857, 0.08810231699246251, 0.22484424433446226, 0.7749342356602382, 0.3690011208397186, 0.8340227540998424, 0.18975717588607477, 0.18859772488737214, 0.12189656715987385, 0.16799125753338284, 0.22464529759785057, 0.09423311317944938, 0.21760128753535124, 0.17933059557799658, 0.10238558723106272, 0.19185959727719715, 0.1267659983042727, 0.20499069402183112, 0.10826964799369287, 0.19222749838200714, 0.2363484130004272, 0.016131836800826527, 0.24353987421703127, 0.20862002487076348, 0.2234833058274679, 0.141509156205203, 0.21259883186891515, 0.13005228610754727, 0.11495318537374677, 0.0022741567540295327, 9.999999999998899e-05, 9.999999999998899e-05, 0.002671778746464737, 0.01660879163970186, 9.999999999998899e-05, 0.006478542994684755, 9.999999999998899e-05, 0.00013846850468179905, 0.02727558775891792, 0.037237219521592646, 0.030639168089908853, 0.11270579241442935, 0.018113327956473912, 0.024945507069943917, 0.05889119695150169, 0.07169513068483135, 0.05161850021985048, 0.04613311904034367, 0.03128173612110918, 0.15106895711892243, 0.14833361274922519, 0.35343552774470577, 0.07289388940013541, 0.0966446178192859, 0.08335626600720458, 0.07905588317497181, 0.1868320334132202, 0.12544797786591166, 0.1331194669443052, 0.10682385113233972, 0.007973367930777076, 0.08462793197929674, 0.048200167025398866, 0.08019746345779677, 0.1506758883126762, 0.5205391203458946, 0.5088092147730119, 0.5403131544650759, 0.5892663179947903, 0.17984388924972372, 0.20821869398196036, 0.5695782179063877, 0.5527687799400978, 0.5584362793717441, 0.07014846144400222, 0.09908261497493809, 0.0999585796765714, 0.14911189395241142, 0.10309274288337233, 0.1347248628907295, 0.0784210895891112, 0.10129512851376699, 0.12279116010201419, 0.16375494127525558, 0.3241682967287842, 0.2495157071887445, 0.32966675492902175, 0.29531086916463967, 0.2956296314559236, 0.3956082436022931, 0.21114772140787386, 0.20008798829920282, 0.222346278945036, 0.5854047879398006, 0.28392093502583293, 0.27398697065906996, 0.42672857476378745, 0.4585771682294475, 0.2905954969204604, 0.2879990109133038, 0.2090528000742281, 0.3970990790053923, 0.3708392620689597, 0.27848535975126154, 0.24996185154599804, 0.2694533470994508, 0.23392155922049984, 0.28820988548670134, 0.31042708360848115, 0.3791500361303535, 0.2486131216579096, 0.16526464937186136, 0.22924803835868202, 0.21059721048111346, 0.20145753847122838, 0.23469956102660283, 0.23596776433845612, 0.19506919421827107, 0.2406146077870892, 0.21953378741929197, 0.20202305023600786, 0.7344483598028229, 0.23735648560062106, 0.21247357033910597, 0.2090177400226455, 0.21079821948836064, 0.20410850707384698, 0.21941993052690567, 0.8765124481778688, 0.18578394761168793, 0.11289412731863468, 0.1753329041392917, 0.20072791412663382, 0.19844800882863267, 0.12999639935631568, 0.16871988794524206, 0.9021894522939599, 0.8360351602060936, 0.15578604261097573, 0.20773341522171318, 0.20694698680388257, 0.2232358440178216, 0.795103653475956, 0.20399366944394814, 0.19837447885491077, 0.7817526727712869, 0.19967180382201877, 0.21168195454154104, 0.19413197210392508, 0.19789545452459745, 0.18711896086239044, 0.19156421299995274, 0.19179167554712595, 0.1791054162849286, 0.19502423082838893, 0.09780749530784283, 0.09349867556174174, 0.08688190597181378, 0.09863107778104763, 0.10390585901889171, 0.08859945772432598, 0.08652058381610717, 0.08385430274307559, 0.08044792938964329]}, "mutation_prompt": null}
{"id": "d81ea752-811f-4298-adc0-df966fcbee6e", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30\n        self.final_population_size = 20  # Dynamic population resizing\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor_init = 0.9  # Variable mutation factor\n        self.cross_prob = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.initial_population_size, dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.initial_population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        eval_count = 0\n        inertia_dampening = 0.99\n        mutation_factor_change = (self.mutation_factor_init - 0.5) / self.budget  # Smooth mutation decrease\n\n        while eval_count < self.budget:\n            population_size = self.initial_population_size - int(\n                (eval_count / self.budget) * (self.initial_population_size - self.final_population_size))\n\n            # Evaluate the population\n            for i in range(population_size):\n                score = func(self.population[i])\n                eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n                if eval_count >= self.budget:\n                    break\n\n            # Update velocities and positions using PSO\n            r1 = np.random.rand(population_size, self.dim)\n            r2 = np.random.rand(population_size, self.dim)\n            cognitive_component = self.cognitive_coeff * r1 * (self.personal_best_positions[:population_size] - self.population[:population_size])\n            social_component = self.social_coeff * r2 * (self.global_best_position - self.population[:population_size])\n            self.velocities[:population_size] = (self.inertia_weight * self.velocities[:population_size]) + cognitive_component + social_component\n            self.population[:population_size] = self.population[:population_size] + self.velocities[:population_size]\n\n            # Boundary handling\n            self.population[:population_size] = np.clip(self.population[:population_size], self.lower_bound, self.upper_bound)\n\n            # Apply Differential Evolution\n            for i in range(population_size):\n                indices = np.random.choice(np.delete(np.arange(population_size), i), 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = a + (self.mutation_factor_init - mutation_factor_change * eval_count) * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cross_prob:\n                        trial[j] = mutant[j]\n\n                # Evaluate the trial vector\n                trial_score = func(trial)\n                eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.population[i] = trial\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial\n                if eval_count >= self.budget:\n                    break\n\n            # Adapt inertia weight\n            self.inertia_weight *= inertia_dampening\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedHybridPSODE", "description": "Enhanced Hybrid PSO-DE with adaptive mutation factor and dynamic population resizing to boost convergence speed.", "configspace": "", "generation": 4, "fitness": 0.2789931100648925, "feedback": "The algorithm EnhancedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.26.", "error": "", "parent_id": "f19e1c7b-0817-43cc-a83a-5819fa094bee", "metadata": {"aucs": [0.8024137414851267, 0.8006411364558498, 0.8257804635350513, 0.18280270676626886, 0.7829059969821749, 0.18295589759217368, 0.8257773623232987, 0.824873347292263, 0.8235221710305493, 0.5373128543686083, 0.631275059346407, 0.48658718721239425, 0.303781754430793, 0.6898234251969828, 0.43535078831410035, 0.6259374193999114, 0.6897553467109929, 0.6238087308605842, 0.14723196118623183, 0.14813389198287608, 0.07373570192956524, 0.14997147313329184, 0.07452371618447451, 0.13325069804270262, 0.1272380846422968, 0.15254901942727606, 0.09751234279074394, 0.1285502449274054, 0.08361979289910793, 0.10833648694371367, 0.11313285775425974, 0.11992292043457908, 0.10920930656626227, 0.13039133627957766, 0.10125338619400648, 0.10271763349172447, 0.9813436412243789, 0.9812748483845867, 0.9904145752053538, 0.9861591218943472, 0.9808352410614216, 0.9757276696390603, 0.9864025558664381, 0.9817962368342137, 0.9793985765415845, 0.40552191714826014, 0.6475020035349068, 0.058404060878034625, 0.17792645331308288, 0.14985702230085607, 0.6980877094984859, 0.08765937836876858, 0.6494100311898745, 0.08788149826921032, 0.17077412817079896, 0.2136265431298089, 0.20272529327522615, 0.27318076942943414, 0.18997442730535874, 0.1865410577992389, 0.11866899253427887, 0.1260692330312757, 0.7313785282721083, 0.1665738186801895, 0.16900067606112767, 0.18563632979517297, 0.16917232709958774, 0.19460976439679734, 0.16377167370029366, 0.17904347466789572, 0.16719660660447988, 0.3264156219630642, 0.21317611616356447, 0.01649784190998216, 0.11906376882035807, 0.14782747153637954, 0.4682192803731533, 0.17515043434626443, 0.1234213188881349, 0.12885009461457608, 0.1124692703087834, 0.02758666330024262, 9.999999999998899e-05, 9.999999999998899e-05, 0.01868915257583681, 9.999999999998899e-05, 0.023430684632652077, 0.002064738527946197, 9.999999999998899e-05, 9.999999999998899e-05, 0.05751544056530855, 0.07527759239052068, 0.032624511664189004, 0.0624595699267273, 0.0720480861789381, 9.999999999998899e-05, 0.059748064717479066, 0.05629073316583977, 0.07073492184313035, 0.04551396384916229, 0.041711352912474076, 0.08896672971678676, 0.0833665363220022, 0.15279149499267897, 0.06923754491794376, 0.08812910673892715, 0.14812623061531227, 0.062220186109946396, 0.13113565724434428, 0.07009429950337687, 0.05140023498074919, 0.10946946675966451, 0.00589351526099291, 0.22170084510153132, 0.04863775112075508, 0.07691220061550652, 0.10829144755693887, 0.53145408213482, 0.5773218835856992, 0.528373925594301, 0.20715495800097583, 0.5635138839430314, 0.20791895933670967, 0.577420425229094, 0.5500429867298036, 0.5318159255399155, 0.0852382869669791, 0.10102577321085537, 0.08792578758958591, 0.15094733735366594, 0.08834524641106656, 0.13380451335192178, 0.10473749094998563, 0.12632425617772336, 0.1313262910693116, 0.1945824681525784, 0.2523468178171835, 0.14128594199530564, 0.2088956204316259, 0.39097620576470205, 0.28602550592655085, 0.19366978450131977, 0.24194475072827581, 0.22096129305663914, 0.49484621470366774, 0.43372678569898226, 0.39968103926626763, 0.3586916550039533, 0.4736058976241777, 0.4442862655768115, 0.5179216033384293, 0.47435992114676995, 0.551752220067439, 0.1671046258750073, 0.26495781754889935, 0.3594648426686018, 0.21236870139751796, 0.2667238212445604, 0.27801743349061014, 0.29897001584867766, 0.34608030511733634, 0.32570213455174746, 0.24095660857563295, 0.1336940870256389, 0.21300957112040042, 0.2093734772124537, 0.2046643582885952, 0.19358368292428008, 0.20674910705494065, 0.21367163763249242, 0.2138472786502177, 0.23985286076771328, 0.20009725031473968, 0.20306002358093245, 0.20993596009155457, 0.19970133346209684, 0.7062923877443766, 0.2388261324552945, 0.24395746536541396, 0.23672168352544742, 0.890036334884579, 0.1855309511189257, 0.11289258488800791, 0.8320118699218528, 0.1997433713061142, 0.19862524376160606, 0.1586413333914286, 0.16855495865681935, 0.8632264824228042, 0.5700148185833549, 0.15285900980400946, 0.20737825004137345, 0.20792182332458586, 0.2220171900253246, 0.5954737734438181, 0.10501429156699671, 0.1984992782469387, 0.7621030551423937, 0.1907434320735778, 0.19784766799771314, 0.24789331783251878, 0.2059755442392266, 0.19337564844695043, 0.19817561566480701, 0.22122836137733937, 0.19448300264105312, 0.20254513350540715, 0.08618297560921617, 0.0918947264074097, 0.0939949292507154, 0.08206973591068345, 0.09021106199026985, 0.08342788018762182, 0.09031713946578201, 0.09651626589540352, 0.08955573552712082]}, "mutation_prompt": null}
{"id": "0b6d7685-f8f9-4963-9b6d-e4fb2cfdcc6e", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30\n        self.final_population_size = 20  # Dynamic population resizing\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor_init = 0.9  # Variable mutation factor\n        self.cross_prob = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.initial_population_size, dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.initial_population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        eval_count = 0\n        inertia_dampening = 0.99\n        mutation_factor_change = (self.mutation_factor_init - 0.5) / self.budget  # Smooth mutation decrease\n\n        while eval_count < self.budget:\n            population_size = self.initial_population_size - int(\n                (eval_count / self.budget) * (self.initial_population_size - self.final_population_size))\n\n            # Evaluate the population\n            for i in range(population_size):\n                score = func(self.population[i])\n                eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n                if eval_count >= self.budget:\n                    break\n\n            # Update velocities and positions using PSO\n            r1 = np.random.rand(population_size, self.dim)\n            r2 = np.random.rand(population_size, self.dim)\n            cognitive_component = self.cognitive_coeff * r1 * (self.personal_best_positions[:population_size] - self.population[:population_size])\n            social_component = self.social_coeff * r2 * (self.global_best_position - self.population[:population_size])\n            self.velocities[:population_size] = (self.inertia_weight * self.velocities[:population_size]) + cognitive_component + social_component\n            self.population[:population_size] = self.population[:population_size] + self.velocities[:population_size]\n\n            # Boundary handling\n            self.population[:population_size] = np.clip(self.population[:population_size], self.lower_bound, self.upper_bound)\n\n            # Apply Differential Evolution\n            for i in range(population_size):\n                indices = np.random.choice(np.delete(np.arange(population_size), i), 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = a + (self.mutation_factor_init - mutation_factor_change * eval_count) * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cross_prob:\n                        trial[j] = mutant[j]\n\n                # Evaluate the trial vector\n                trial_score = func(trial)\n                eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.population[i] = trial\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial\n                if eval_count >= self.budget:\n                    break\n\n            # Adapt inertia weight\n            self.inertia_weight *= inertia_dampening\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedHybridPSODE", "description": "Enhanced Hybrid PSO-DE with adaptive mutation factor and dynamic population resizing to boost convergence speed.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d81ea752-811f-4298-adc0-df966fcbee6e", "metadata": {"aucs": [0.8024137414851267, 0.8006411364558498, 0.8257804635350513, 0.18280270676626886, 0.7829059969821749, 0.18295589759217368, 0.8257773623232987, 0.824873347292263, 0.8235221710305493, 0.5373128543686083, 0.631275059346407, 0.48658718721239425, 0.303781754430793, 0.6898234251969828, 0.43535078831410035, 0.6259374193999114, 0.6897553467109929, 0.6238087308605842, 0.14723196118623183, 0.14813389198287608, 0.07373570192956524, 0.14997147313329184, 0.07452371618447451, 0.13325069804270262, 0.1272380846422968, 0.15254901942727606, 0.09751234279074394, 0.1285502449274054, 0.08361979289910793, 0.10833648694371367, 0.11313285775425974, 0.11992292043457908, 0.10920930656626227, 0.13039133627957766, 0.10125338619400648, 0.10271763349172447, 0.9813436412243789, 0.9812748483845867, 0.9904145752053538, 0.9861591218943472, 0.9808352410614216, 0.9757276696390603, 0.9864025558664381, 0.9817962368342137, 0.9793985765415845, 0.40552191714826014, 0.6475020035349068, 0.058404060878034625, 0.17792645331308288, 0.14985702230085607, 0.6980877094984859, 0.08765937836876858, 0.6494100311898745, 0.08788149826921032, 0.17077412817079896, 0.2136265431298089, 0.20272529327522615, 0.27318076942943414, 0.18997442730535874, 0.1865410577992389, 0.11866899253427887, 0.1260692330312757, 0.7313785282721083, 0.1665738186801895, 0.16900067606112767, 0.18563632979517297, 0.16917232709958774, 0.19460976439679734, 0.16377167370029366, 0.17904347466789572, 0.16719660660447988, 0.3264156219630642, 0.21317611616356447, 0.01649784190998216, 0.11906376882035807, 0.14782747153637954, 0.4682192803731533, 0.17515043434626443, 0.1234213188881349, 0.12885009461457608, 0.1124692703087834, 0.02758666330024262, 9.999999999998899e-05, 9.999999999998899e-05, 0.01868915257583681, 9.999999999998899e-05, 0.023430684632652077, 0.002064738527946197, 9.999999999998899e-05, 9.999999999998899e-05, 0.05751544056530855, 0.07527759239052068, 0.032624511664189004, 0.0624595699267273, 0.0720480861789381, 9.999999999998899e-05, 0.059748064717479066, 0.05629073316583977, 0.07073492184313035, 0.04551396384916229, 0.041711352912474076, 0.08896672971678676, 0.0833665363220022, 0.15279149499267897, 0.06923754491794376, 0.08812910673892715, 0.14812623061531227, 0.062220186109946396, 0.13113565724434428, 0.07009429950337687, 0.05140023498074919, 0.10946946675966451, 0.00589351526099291, 0.22170084510153132, 0.04863775112075508, 0.07691220061550652, 0.10829144755693887, 0.53145408213482, 0.5773218835856992, 0.528373925594301, 0.20715495800097583, 0.5635138839430314, 0.20791895933670967, 0.577420425229094, 0.5500429867298036, 0.5318159255399155, 0.0852382869669791, 0.10102577321085537, 0.08792578758958591, 0.15094733735366594, 0.08834524641106656, 0.13380451335192178, 0.10473749094998563, 0.12632425617772336, 0.1313262910693116, 0.1945824681525784, 0.2523468178171835, 0.14128594199530564, 0.2088956204316259, 0.39097620576470205, 0.28602550592655085, 0.19366978450131977, 0.24194475072827581, 0.22096129305663914, 0.49484621470366774, 0.43372678569898226, 0.39968103926626763, 0.3586916550039533, 0.4736058976241777, 0.4442862655768115, 0.5179216033384293, 0.47435992114676995, 0.551752220067439, 0.1671046258750073, 0.26495781754889935, 0.3594648426686018, 0.21236870139751796, 0.2667238212445604, 0.27801743349061014, 0.29897001584867766, 0.34608030511733634, 0.32570213455174746, 0.24095660857563295, 0.1336940870256389, 0.21300957112040042, 0.2093734772124537, 0.2046643582885952, 0.19358368292428008, 0.20674910705494065, 0.21367163763249242, 0.2138472786502177, 0.23985286076771328, 0.20009725031473968, 0.20306002358093245, 0.20993596009155457, 0.19970133346209684, 0.7062923877443766, 0.2388261324552945, 0.24395746536541396, 0.23672168352544742, 0.890036334884579, 0.1855309511189257, 0.11289258488800791, 0.8320118699218528, 0.1997433713061142, 0.19862524376160606, 0.1586413333914286, 0.16855495865681935, 0.8632264824228042, 0.5700148185833549, 0.15285900980400946, 0.20737825004137345, 0.20792182332458586, 0.2220171900253246, 0.5954737734438181, 0.10501429156699671, 0.1984992782469387, 0.7621030551423937, 0.1907434320735778, 0.19784766799771314, 0.24789331783251878, 0.2059755442392266, 0.19337564844695043, 0.19817561566480701, 0.22122836137733937, 0.19448300264105312, 0.20254513350540715, 0.08618297560921617, 0.0918947264074097, 0.0939949292507154, 0.08206973591068345, 0.09021106199026985, 0.08342788018762182, 0.09031713946578201, 0.09651626589540352, 0.08955573552712082]}, "mutation_prompt": null}
{"id": "84ca836c-71a5-4cb9-b1af-be505067e583", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30\n        self.final_population_size = 20  # Dynamic population resizing\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor_init = 0.9  # Variable mutation factor\n        self.cross_prob = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.initial_population_size, dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.initial_population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        eval_count = 0\n        inertia_dampening = 0.99\n        mutation_factor_change = (self.mutation_factor_init - 0.5) / self.budget  # Smooth mutation decrease\n\n        while eval_count < self.budget:\n            population_size = self.initial_population_size - int(\n                (eval_count / self.budget) * (self.initial_population_size - self.final_population_size))\n\n            # Evaluate the population\n            for i in range(population_size):\n                score = func(self.population[i])\n                eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n                if eval_count >= self.budget:\n                    break\n\n            # Update velocities and positions using PSO\n            r1 = np.random.rand(population_size, self.dim)\n            r2 = np.random.rand(population_size, self.dim)\n            cognitive_component = self.cognitive_coeff * r1 * (self.personal_best_positions[:population_size] - self.population[:population_size])\n            social_component = self.social_coeff * r2 * (self.global_best_position - self.population[:population_size])\n            self.velocities[:population_size] = (self.inertia_weight * self.velocities[:population_size]) + cognitive_component + social_component\n            self.population[:population_size] = self.population[:population_size] + self.velocities[:population_size]\n\n            # Boundary handling\n            self.population[:population_size] = np.clip(self.population[:population_size], self.lower_bound, self.upper_bound)\n\n            # Apply Differential Evolution\n            for i in range(population_size):\n                indices = np.random.choice(np.delete(np.arange(population_size), i), 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = a + (self.mutation_factor_init - mutation_factor_change * eval_count) * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cross_prob:\n                        trial[j] = mutant[j]\n\n                # Evaluate the trial vector\n                trial_score = func(trial)\n                eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.population[i] = trial\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial\n                if eval_count >= self.budget:\n                    break\n\n            # Adapt inertia weight\n            self.inertia_weight *= inertia_dampening\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedHybridPSODE", "description": "Enhanced Hybrid PSO-DE with adaptive mutation factor and dynamic population resizing to boost convergence speed.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d81ea752-811f-4298-adc0-df966fcbee6e", "metadata": {"aucs": [0.8024137414851267, 0.8006411364558498, 0.8257804635350513, 0.18280270676626886, 0.7829059969821749, 0.18295589759217368, 0.8257773623232987, 0.824873347292263, 0.8235221710305493, 0.5373128543686083, 0.631275059346407, 0.48658718721239425, 0.303781754430793, 0.6898234251969828, 0.43535078831410035, 0.6259374193999114, 0.6897553467109929, 0.6238087308605842, 0.14723196118623183, 0.14813389198287608, 0.07373570192956524, 0.14997147313329184, 0.07452371618447451, 0.13325069804270262, 0.1272380846422968, 0.15254901942727606, 0.09751234279074394, 0.1285502449274054, 0.08361979289910793, 0.10833648694371367, 0.11313285775425974, 0.11992292043457908, 0.10920930656626227, 0.13039133627957766, 0.10125338619400648, 0.10271763349172447, 0.9813436412243789, 0.9812748483845867, 0.9904145752053538, 0.9861591218943472, 0.9808352410614216, 0.9757276696390603, 0.9864025558664381, 0.9817962368342137, 0.9793985765415845, 0.40552191714826014, 0.6475020035349068, 0.058404060878034625, 0.17792645331308288, 0.14985702230085607, 0.6980877094984859, 0.08765937836876858, 0.6494100311898745, 0.08788149826921032, 0.17077412817079896, 0.2136265431298089, 0.20272529327522615, 0.27318076942943414, 0.18997442730535874, 0.1865410577992389, 0.11866899253427887, 0.1260692330312757, 0.7313785282721083, 0.1665738186801895, 0.16900067606112767, 0.18563632979517297, 0.16917232709958774, 0.19460976439679734, 0.16377167370029366, 0.17904347466789572, 0.16719660660447988, 0.3264156219630642, 0.21317611616356447, 0.01649784190998216, 0.11906376882035807, 0.14782747153637954, 0.4682192803731533, 0.17515043434626443, 0.1234213188881349, 0.12885009461457608, 0.1124692703087834, 0.02758666330024262, 9.999999999998899e-05, 9.999999999998899e-05, 0.01868915257583681, 9.999999999998899e-05, 0.023430684632652077, 0.002064738527946197, 9.999999999998899e-05, 9.999999999998899e-05, 0.05751544056530855, 0.07527759239052068, 0.032624511664189004, 0.0624595699267273, 0.0720480861789381, 9.999999999998899e-05, 0.059748064717479066, 0.05629073316583977, 0.07073492184313035, 0.04551396384916229, 0.041711352912474076, 0.08896672971678676, 0.0833665363220022, 0.15279149499267897, 0.06923754491794376, 0.08812910673892715, 0.14812623061531227, 0.062220186109946396, 0.13113565724434428, 0.07009429950337687, 0.05140023498074919, 0.10946946675966451, 0.00589351526099291, 0.22170084510153132, 0.04863775112075508, 0.07691220061550652, 0.10829144755693887, 0.53145408213482, 0.5773218835856992, 0.528373925594301, 0.20715495800097583, 0.5635138839430314, 0.20791895933670967, 0.577420425229094, 0.5500429867298036, 0.5318159255399155, 0.0852382869669791, 0.10102577321085537, 0.08792578758958591, 0.15094733735366594, 0.08834524641106656, 0.13380451335192178, 0.10473749094998563, 0.12632425617772336, 0.1313262910693116, 0.1945824681525784, 0.2523468178171835, 0.14128594199530564, 0.2088956204316259, 0.39097620576470205, 0.28602550592655085, 0.19366978450131977, 0.24194475072827581, 0.22096129305663914, 0.49484621470366774, 0.43372678569898226, 0.39968103926626763, 0.3586916550039533, 0.4736058976241777, 0.4442862655768115, 0.5179216033384293, 0.47435992114676995, 0.551752220067439, 0.1671046258750073, 0.26495781754889935, 0.3594648426686018, 0.21236870139751796, 0.2667238212445604, 0.27801743349061014, 0.29897001584867766, 0.34608030511733634, 0.32570213455174746, 0.24095660857563295, 0.1336940870256389, 0.21300957112040042, 0.2093734772124537, 0.2046643582885952, 0.19358368292428008, 0.20674910705494065, 0.21367163763249242, 0.2138472786502177, 0.23985286076771328, 0.20009725031473968, 0.20306002358093245, 0.20993596009155457, 0.19970133346209684, 0.7062923877443766, 0.2388261324552945, 0.24395746536541396, 0.23672168352544742, 0.890036334884579, 0.1855309511189257, 0.11289258488800791, 0.8320118699218528, 0.1997433713061142, 0.19862524376160606, 0.1586413333914286, 0.16855495865681935, 0.8632264824228042, 0.5700148185833549, 0.15285900980400946, 0.20737825004137345, 0.20792182332458586, 0.2220171900253246, 0.5954737734438181, 0.10501429156699671, 0.1984992782469387, 0.7621030551423937, 0.1907434320735778, 0.19784766799771314, 0.24789331783251878, 0.2059755442392266, 0.19337564844695043, 0.19817561566480701, 0.22122836137733937, 0.19448300264105312, 0.20254513350540715, 0.08618297560921617, 0.0918947264074097, 0.0939949292507154, 0.08206973591068345, 0.09021106199026985, 0.08342788018762182, 0.09031713946578201, 0.09651626589540352, 0.08955573552712082]}, "mutation_prompt": null}
{"id": "7031f68d-c592-4c64-abd6-77134d32dfac", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30\n        self.final_population_size = 20  # Dynamic population resizing\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor_init = 0.9  # Variable mutation factor\n        self.cross_prob = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.initial_population_size, dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.initial_population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        eval_count = 0\n        inertia_dampening = 0.99\n        mutation_factor_change = (self.mutation_factor_init - 0.5) / self.budget  # Smooth mutation decrease\n\n        while eval_count < self.budget:\n            population_size = self.initial_population_size - int(\n                (eval_count / self.budget) * (self.initial_population_size - self.final_population_size))\n\n            # Evaluate the population\n            for i in range(population_size):\n                score = func(self.population[i])\n                eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n                if eval_count >= self.budget:\n                    break\n\n            # Update velocities and positions using PSO\n            r1 = np.random.rand(population_size, self.dim)\n            r2 = np.random.rand(population_size, self.dim)\n            cognitive_component = self.cognitive_coeff * r1 * (self.personal_best_positions[:population_size] - self.population[:population_size])\n            social_component = self.social_coeff * r2 * (self.global_best_position - self.population[:population_size])\n            self.velocities[:population_size] = (self.inertia_weight * self.velocities[:population_size]) + cognitive_component + social_component\n            self.population[:population_size] = self.population[:population_size] + self.velocities[:population_size]\n\n            # Boundary handling\n            self.population[:population_size] = np.clip(self.population[:population_size], self.lower_bound, self.upper_bound)\n\n            # Apply Differential Evolution\n            for i in range(population_size):\n                indices = np.random.choice(np.delete(np.arange(population_size), i), 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = a + (self.mutation_factor_init - mutation_factor_change * eval_count) * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cross_prob:\n                        trial[j] = mutant[j]\n\n                # Evaluate the trial vector\n                trial_score = func(trial)\n                eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.population[i] = trial\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial\n                if eval_count >= self.budget:\n                    break\n\n            # Adapt inertia weight\n            self.inertia_weight *= inertia_dampening\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedHybridPSODE", "description": "Enhanced Hybrid PSO-DE with adaptive mutation factor and dynamic population resizing to boost convergence speed.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d81ea752-811f-4298-adc0-df966fcbee6e", "metadata": {"aucs": [0.8024137414851267, 0.8006411364558498, 0.8257804635350513, 0.18280270676626886, 0.7829059969821749, 0.18295589759217368, 0.8257773623232987, 0.824873347292263, 0.8235221710305493, 0.5373128543686083, 0.631275059346407, 0.48658718721239425, 0.303781754430793, 0.6898234251969828, 0.43535078831410035, 0.6259374193999114, 0.6897553467109929, 0.6238087308605842, 0.14723196118623183, 0.14813389198287608, 0.07373570192956524, 0.14997147313329184, 0.07452371618447451, 0.13325069804270262, 0.1272380846422968, 0.15254901942727606, 0.09751234279074394, 0.1285502449274054, 0.08361979289910793, 0.10833648694371367, 0.11313285775425974, 0.11992292043457908, 0.10920930656626227, 0.13039133627957766, 0.10125338619400648, 0.10271763349172447, 0.9813436412243789, 0.9812748483845867, 0.9904145752053538, 0.9861591218943472, 0.9808352410614216, 0.9757276696390603, 0.9864025558664381, 0.9817962368342137, 0.9793985765415845, 0.40552191714826014, 0.6475020035349068, 0.058404060878034625, 0.17792645331308288, 0.14985702230085607, 0.6980877094984859, 0.08765937836876858, 0.6494100311898745, 0.08788149826921032, 0.17077412817079896, 0.2136265431298089, 0.20272529327522615, 0.27318076942943414, 0.18997442730535874, 0.1865410577992389, 0.11866899253427887, 0.1260692330312757, 0.7313785282721083, 0.1665738186801895, 0.16900067606112767, 0.18563632979517297, 0.16917232709958774, 0.19460976439679734, 0.16377167370029366, 0.17904347466789572, 0.16719660660447988, 0.3264156219630642, 0.21317611616356447, 0.01649784190998216, 0.11906376882035807, 0.14782747153637954, 0.4682192803731533, 0.17515043434626443, 0.1234213188881349, 0.12885009461457608, 0.1124692703087834, 0.02758666330024262, 9.999999999998899e-05, 9.999999999998899e-05, 0.01868915257583681, 9.999999999998899e-05, 0.023430684632652077, 0.002064738527946197, 9.999999999998899e-05, 9.999999999998899e-05, 0.05751544056530855, 0.07527759239052068, 0.032624511664189004, 0.0624595699267273, 0.0720480861789381, 9.999999999998899e-05, 0.059748064717479066, 0.05629073316583977, 0.07073492184313035, 0.04551396384916229, 0.041711352912474076, 0.08896672971678676, 0.0833665363220022, 0.15279149499267897, 0.06923754491794376, 0.08812910673892715, 0.14812623061531227, 0.062220186109946396, 0.13113565724434428, 0.07009429950337687, 0.05140023498074919, 0.10946946675966451, 0.00589351526099291, 0.22170084510153132, 0.04863775112075508, 0.07691220061550652, 0.10829144755693887, 0.53145408213482, 0.5773218835856992, 0.528373925594301, 0.20715495800097583, 0.5635138839430314, 0.20791895933670967, 0.577420425229094, 0.5500429867298036, 0.5318159255399155, 0.0852382869669791, 0.10102577321085537, 0.08792578758958591, 0.15094733735366594, 0.08834524641106656, 0.13380451335192178, 0.10473749094998563, 0.12632425617772336, 0.1313262910693116, 0.1945824681525784, 0.2523468178171835, 0.14128594199530564, 0.2088956204316259, 0.39097620576470205, 0.28602550592655085, 0.19366978450131977, 0.24194475072827581, 0.22096129305663914, 0.49484621470366774, 0.43372678569898226, 0.39968103926626763, 0.3586916550039533, 0.4736058976241777, 0.4442862655768115, 0.5179216033384293, 0.47435992114676995, 0.551752220067439, 0.1671046258750073, 0.26495781754889935, 0.3594648426686018, 0.21236870139751796, 0.2667238212445604, 0.27801743349061014, 0.29897001584867766, 0.34608030511733634, 0.32570213455174746, 0.24095660857563295, 0.1336940870256389, 0.21300957112040042, 0.2093734772124537, 0.2046643582885952, 0.19358368292428008, 0.20674910705494065, 0.21367163763249242, 0.2138472786502177, 0.23985286076771328, 0.20009725031473968, 0.20306002358093245, 0.20993596009155457, 0.19970133346209684, 0.7062923877443766, 0.2388261324552945, 0.24395746536541396, 0.23672168352544742, 0.890036334884579, 0.1855309511189257, 0.11289258488800791, 0.8320118699218528, 0.1997433713061142, 0.19862524376160606, 0.1586413333914286, 0.16855495865681935, 0.8632264824228042, 0.5700148185833549, 0.15285900980400946, 0.20737825004137345, 0.20792182332458586, 0.2220171900253246, 0.5954737734438181, 0.10501429156699671, 0.1984992782469387, 0.7621030551423937, 0.1907434320735778, 0.19784766799771314, 0.24789331783251878, 0.2059755442392266, 0.19337564844695043, 0.19817561566480701, 0.22122836137733937, 0.19448300264105312, 0.20254513350540715, 0.08618297560921617, 0.0918947264074097, 0.0939949292507154, 0.08206973591068345, 0.09021106199026985, 0.08342788018762182, 0.09031713946578201, 0.09651626589540352, 0.08955573552712082]}, "mutation_prompt": null}
{"id": "bc77ccb6-50c7-4344-b386-3c2edeb7bb74", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30\n        self.final_population_size = 25  # More gradual population resizing\n        self.inertia_weight = 0.6  # Reduced inertia weight for faster convergence\n        self.cognitive_coeff = 1.7  # Slightly increased to enhance exploration\n        self.social_coeff = 1.4  # Slightly decreased for better balance\n        self.mutation_factor_init = 0.85  # Adjusted mutation factor\n        self.cross_prob = 0.95  # Increased cross probability for more aggressive trial acceptance\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.initial_population_size, dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.initial_population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        eval_count = 0\n        inertia_dampening = 0.98  # Slightly faster inertia dampening\n        mutation_factor_change = (self.mutation_factor_init - 0.5) / self.budget\n\n        while eval_count < self.budget:\n            population_size = self.initial_population_size - int(\n                (eval_count / self.budget) * (self.initial_population_size - self.final_population_size))\n\n            for i in range(population_size):\n                score = func(self.population[i])\n                eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n                if eval_count >= self.budget:\n                    break\n\n            r1 = np.random.rand(population_size, self.dim)\n            r2 = np.random.rand(population_size, self.dim)\n            cognitive_component = self.cognitive_coeff * r1 * (self.personal_best_positions[:population_size] - self.population[:population_size])\n            social_component = self.social_coeff * r2 * (self.global_best_position - self.population[:population_size])\n            self.velocities[:population_size] = (self.inertia_weight * self.velocities[:population_size]) + cognitive_component + social_component\n            self.population[:population_size] = self.population[:population_size] + self.velocities[:population_size]\n\n            self.population[:population_size] = np.clip(self.population[:population_size], self.lower_bound, self.upper_bound)\n\n            for i in range(population_size):\n                indices = np.random.choice(np.delete(np.arange(population_size), i), 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = a + (self.mutation_factor_init - mutation_factor_change * eval_count) * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cross_prob:\n                        trial[j] = mutant[j]\n\n                trial_score = func(trial)\n                eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.population[i] = trial\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial\n                if eval_count >= self.budget:\n                    break\n\n            self.inertia_weight *= inertia_dampening\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedHybridPSODE", "description": "EnhancedHybridPSODE with strategic parameter tuning and convergence acceleration for improved solution discovery.", "configspace": "", "generation": 8, "fitness": 0.2937404685353952, "feedback": "The algorithm EnhancedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.27.", "error": "", "parent_id": "d81ea752-811f-4298-adc0-df966fcbee6e", "metadata": {"aucs": [0.8790086340197295, 0.8594809718503991, 0.8714262695213816, 0.8716207678780874, 0.8148118753439718, 0.8861515777171897, 0.8837698586196663, 0.8642760586676631, 0.8875415051650409, 0.17615915760563494, 0.040666035401233924, 0.7659295256535265, 0.7823578748417368, 0.5914234958185203, 0.7737192496914153, 0.09191439566829707, 0.7807869480152533, 0.7210407329277733, 0.7590331568653765, 0.11314459675360233, 0.1407305539432988, 0.13631009901996916, 0.17845428088125936, 0.1267983471526002, 0.11386342865106003, 0.7676500932417867, 0.7356018349826263, 0.09414670979277939, 0.10193276386032069, 0.11305088395546858, 0.09035188810275085, 0.11106680270323754, 0.07999216304702972, 0.13030784844424492, 0.1090903000904827, 0.10358403771667746, 0.9812208644686673, 0.990148163785257, 0.986321950263512, 0.9743452358825869, 0.9818659685636542, 0.9748072437211964, 0.98661971764974, 0.9812156557752502, 0.9740022926488223, 0.6833852700092474, 0.05942439096003904, 0.4465217175737798, 0.1514783845395712, 0.15123678199973534, 0.5170565092662427, 0.08814293903164183, 0.08876749261175287, 0.08747262658556376, 0.845701053771103, 0.22080061120268113, 0.2221265392974867, 0.1951747597340192, 0.1873530869107406, 0.21150550975519744, 0.7824621767610765, 0.2369892543861204, 0.22985526164499193, 0.1480386817577546, 0.1770782741373862, 0.18761944281912457, 0.13221331799248015, 0.15624693520631971, 0.166306497598123, 0.176788284570921, 0.18538267855681922, 0.168125587221999, 0.22545986869821455, 0.01691749011125654, 0.16766231711449908, 0.16335467370892842, 0.17787696690836274, 0.18453451111061947, 0.20021626088724775, 0.14917080393166593, 0.10231439881330207, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04227577453509179, 9.999999999998899e-05, 0.015463406937756163, 9.999999999998899e-05, 9.999999999998899e-05, 0.007912297409857327, 0.05474190849592975, 0.0347173953392379, 0.06333406881715675, 0.08871671805517234, 9.999999999998899e-05, 0.03861299327396939, 0.08687706815471752, 0.054730514896239923, 0.0950761773747294, 0.04775251971242633, 0.039690469816313634, 0.05801034121549731, 0.07899798940116598, 0.12123208331162583, 0.07751605849919285, 0.10272287603858754, 0.1667072975290561, 0.08097680103844229, 0.21386019817923785, 0.29479961095671137, 0.12545230467112922, 0.1014620627460765, 0.18605330707971834, 0.0811152816510583, 0.04888538530107778, 0.16911168435320667, 0.08200525644254175, 0.5789713400219295, 0.5043819370195604, 0.5705854377131928, 0.6163712517873601, 0.1816223944309462, 0.4651433234149117, 0.5980790126143987, 0.541162923293524, 0.5641267812012832, 0.09878025836774917, 0.09868763046288298, 0.07579817115720011, 0.1370973715510745, 0.11095610730595085, 0.1089961420522001, 0.0772660606942116, 0.0907145769773724, 0.09370847262624771, 0.16405289293500191, 0.2887828416758609, 0.19000827183424995, 0.24056496988958453, 0.39234844462579455, 0.31893961924211134, 0.3395656710000532, 0.18397597950738231, 0.1905479658229332, 0.4031565466702731, 0.33260677792399607, 0.43983189821281454, 0.36254220485256616, 0.615311087137856, 0.4226488410038012, 0.5149162942423011, 0.6435465997550542, 0.5975442376758364, 0.17652395519029507, 0.33385298819738696, 0.26706626250844223, 0.15110845801174178, 0.19033927360902692, 0.29297880793709596, 0.32074966798170135, 0.2786212190051407, 0.26592013582011964, 0.20626387691568626, 0.23533300364269227, 0.21960140332542588, 0.2166261284030666, 0.21925626195719738, 0.19723829545081528, 0.239014051222031, 0.22764164621031946, 0.2065795991169087, 0.20809659194959107, 0.18777939130854893, 0.18809690808592905, 0.20055815767971685, 0.24841047782516412, 0.2154025357234416, 0.20900733796249704, 0.24370747974556117, 0.1988601853636287, 0.16528498454319784, 0.1664887652897813, 0.1529090081731017, 0.8941348821818921, 0.20070456927090463, 0.19854116635388375, 0.11323241925174188, 0.16872427211354857, 0.8866933534022886, 0.5752327821528157, 0.15641477929591274, 0.20921159029213, 0.4599269982906907, 0.22210038428329704, 0.610196133677235, 0.2118384614919675, 0.10507112973519561, 0.7060655692943145, 0.18783309517007818, 0.19180891923347498, 0.2060947082681177, 0.18466423013486566, 0.22624582819961336, 0.18989499923664865, 0.1742474071569774, 0.1691272711386469, 0.19322196335618247, 0.10818493538237195, 0.09510691300887442, 0.10941114447661404, 0.08886654951766637, 0.09665151145532214, 0.09813607733786744, 0.10580537301912951, 0.08833639634802604, 0.10554517047363443]}, "mutation_prompt": null}
{"id": "647d985d-d8ca-4d49-a1e5-bdd1abd2e76d", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30\n        self.final_population_size = 25  # More gradual population resizing\n        self.inertia_weight = 0.6  # Reduced inertia weight for faster convergence\n        self.cognitive_coeff = 1.7  # Slightly increased to enhance exploration\n        self.social_coeff = 1.4  # Slightly decreased for better balance\n        self.mutation_factor_init = 0.85  # Adjusted mutation factor\n        self.cross_prob = 0.95  # Increased cross probability for more aggressive trial acceptance\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.initial_population_size, dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.initial_population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        eval_count = 0\n        inertia_dampening = 0.98  # Slightly faster inertia dampening\n        mutation_factor_change = (self.mutation_factor_init - 0.5) / self.budget\n\n        while eval_count < self.budget:\n            population_size = self.initial_population_size - int(\n                (eval_count / self.budget) * (self.initial_population_size - self.final_population_size))\n\n            for i in range(population_size):\n                score = func(self.population[i])\n                eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n                if eval_count >= self.budget:\n                    break\n\n            r1 = np.random.rand(population_size, self.dim)\n            r2 = np.random.rand(population_size, self.dim)\n            cognitive_component = self.cognitive_coeff * r1 * (self.personal_best_positions[:population_size] - self.population[:population_size])\n            social_component = self.social_coeff * r2 * (self.global_best_position - self.population[:population_size])\n            self.velocities[:population_size] = (self.inertia_weight * self.velocities[:population_size]) + cognitive_component + social_component\n            self.population[:population_size] = self.population[:population_size] + self.velocities[:population_size]\n\n            self.population[:population_size] = np.clip(self.population[:population_size], self.lower_bound, self.upper_bound)\n\n            for i in range(population_size):\n                indices = np.random.choice(np.delete(np.arange(population_size), i), 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = a + (self.mutation_factor_init - mutation_factor_change * eval_count) * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cross_prob:\n                        trial[j] = mutant[j]\n\n                trial_score = func(trial)\n                eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.population[i] = trial\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial\n                if eval_count >= self.budget:\n                    break\n\n            self.inertia_weight *= inertia_dampening\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedHybridPSODE", "description": "EnhancedHybridPSODE with strategic parameter tuning and convergence acceleration for improved solution discovery.", "configspace": "", "generation": 9, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bc77ccb6-50c7-4344-b386-3c2edeb7bb74", "metadata": {"aucs": [0.8790086340197295, 0.8594809718503991, 0.8714262695213816, 0.8716207678780874, 0.8148118753439718, 0.8861515777171897, 0.8837698586196663, 0.8642760586676631, 0.8875415051650409, 0.17615915760563494, 0.040666035401233924, 0.7659295256535265, 0.7823578748417368, 0.5914234958185203, 0.7737192496914153, 0.09191439566829707, 0.7807869480152533, 0.7210407329277733, 0.7590331568653765, 0.11314459675360233, 0.1407305539432988, 0.13631009901996916, 0.17845428088125936, 0.1267983471526002, 0.11386342865106003, 0.7676500932417867, 0.7356018349826263, 0.09414670979277939, 0.10193276386032069, 0.11305088395546858, 0.09035188810275085, 0.11106680270323754, 0.07999216304702972, 0.13030784844424492, 0.1090903000904827, 0.10358403771667746, 0.9812208644686673, 0.990148163785257, 0.986321950263512, 0.9743452358825869, 0.9818659685636542, 0.9748072437211964, 0.98661971764974, 0.9812156557752502, 0.9740022926488223, 0.6833852700092474, 0.05942439096003904, 0.4465217175737798, 0.1514783845395712, 0.15123678199973534, 0.5170565092662427, 0.08814293903164183, 0.08876749261175287, 0.08747262658556376, 0.845701053771103, 0.22080061120268113, 0.2221265392974867, 0.1951747597340192, 0.1873530869107406, 0.21150550975519744, 0.7824621767610765, 0.2369892543861204, 0.22985526164499193, 0.1480386817577546, 0.1770782741373862, 0.18761944281912457, 0.13221331799248015, 0.15624693520631971, 0.166306497598123, 0.176788284570921, 0.18538267855681922, 0.168125587221999, 0.22545986869821455, 0.01691749011125654, 0.16766231711449908, 0.16335467370892842, 0.17787696690836274, 0.18453451111061947, 0.20021626088724775, 0.14917080393166593, 0.10231439881330207, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04227577453509179, 9.999999999998899e-05, 0.015463406937756163, 9.999999999998899e-05, 9.999999999998899e-05, 0.007912297409857327, 0.05474190849592975, 0.0347173953392379, 0.06333406881715675, 0.08871671805517234, 9.999999999998899e-05, 0.03861299327396939, 0.08687706815471752, 0.054730514896239923, 0.0950761773747294, 0.04775251971242633, 0.039690469816313634, 0.05801034121549731, 0.07899798940116598, 0.12123208331162583, 0.07751605849919285, 0.10272287603858754, 0.1667072975290561, 0.08097680103844229, 0.21386019817923785, 0.29479961095671137, 0.12545230467112922, 0.1014620627460765, 0.18605330707971834, 0.0811152816510583, 0.04888538530107778, 0.16911168435320667, 0.08200525644254175, 0.5789713400219295, 0.5043819370195604, 0.5705854377131928, 0.6163712517873601, 0.1816223944309462, 0.4651433234149117, 0.5980790126143987, 0.541162923293524, 0.5641267812012832, 0.09878025836774917, 0.09868763046288298, 0.07579817115720011, 0.1370973715510745, 0.11095610730595085, 0.1089961420522001, 0.0772660606942116, 0.0907145769773724, 0.09370847262624771, 0.16405289293500191, 0.2887828416758609, 0.19000827183424995, 0.24056496988958453, 0.39234844462579455, 0.31893961924211134, 0.3395656710000532, 0.18397597950738231, 0.1905479658229332, 0.4031565466702731, 0.33260677792399607, 0.43983189821281454, 0.36254220485256616, 0.615311087137856, 0.4226488410038012, 0.5149162942423011, 0.6435465997550542, 0.5975442376758364, 0.17652395519029507, 0.33385298819738696, 0.26706626250844223, 0.15110845801174178, 0.19033927360902692, 0.29297880793709596, 0.32074966798170135, 0.2786212190051407, 0.26592013582011964, 0.20626387691568626, 0.23533300364269227, 0.21960140332542588, 0.2166261284030666, 0.21925626195719738, 0.19723829545081528, 0.239014051222031, 0.22764164621031946, 0.2065795991169087, 0.20809659194959107, 0.18777939130854893, 0.18809690808592905, 0.20055815767971685, 0.24841047782516412, 0.2154025357234416, 0.20900733796249704, 0.24370747974556117, 0.1988601853636287, 0.16528498454319784, 0.1664887652897813, 0.1529090081731017, 0.8941348821818921, 0.20070456927090463, 0.19854116635388375, 0.11323241925174188, 0.16872427211354857, 0.8866933534022886, 0.5752327821528157, 0.15641477929591274, 0.20921159029213, 0.4599269982906907, 0.22210038428329704, 0.610196133677235, 0.2118384614919675, 0.10507112973519561, 0.7060655692943145, 0.18783309517007818, 0.19180891923347498, 0.2060947082681177, 0.18466423013486566, 0.22624582819961336, 0.18989499923664865, 0.1742474071569774, 0.1691272711386469, 0.19322196335618247, 0.10818493538237195, 0.09510691300887442, 0.10941114447661404, 0.08886654951766637, 0.09665151145532214, 0.09813607733786744, 0.10580537301912951, 0.08833639634802604, 0.10554517047363443]}, "mutation_prompt": null}
{"id": "d30e172e-95a2-479b-aaab-fe8e5576bad4", "solution": "import numpy as np\n\nclass AdaptiveHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30\n        self.final_population_size = 25\n        self.inertia_weight = 0.6\n        self.cognitive_coeff = 1.75  # Slight increase for better exploration\n        self.social_coeff = 1.35  # Slight decrease for improved balance\n        self.mutation_factor_init = 0.87  # Increased for higher diversity\n        self.cross_prob = 0.9  # Slightly reduced for controlled trial acceptance\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.initial_population_size, dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.initial_population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        eval_count = 0\n        inertia_dampening = 0.96  # Faster dampening for quicker stabilization\n        mutation_factor_change = (self.mutation_factor_init - 0.5) / self.budget\n\n        while eval_count < self.budget:\n            population_size = self.initial_population_size - int(\n                (eval_count / self.budget) * (self.initial_population_size - self.final_population_size))\n\n            for i in range(population_size):\n                score = func(self.population[i])\n                eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n                if eval_count >= self.budget:\n                    break\n\n            r1 = np.random.rand(population_size, self.dim)\n            r2 = np.random.rand(population_size, self.dim)\n            cognitive_component = self.cognitive_coeff * r1 * (self.personal_best_positions[:population_size] - self.population[:population_size])\n            social_component = self.social_coeff * r2 * (self.global_best_position - self.population[:population_size])\n            self.velocities[:population_size] = (self.inertia_weight * self.velocities[:population_size]) + cognitive_component + social_component\n            self.population[:population_size] = self.population[:population_size] + self.velocities[:population_size]\n\n            self.population[:population_size] = np.clip(self.population[:population_size], self.lower_bound, self.upper_bound)\n\n            for i in range(population_size):\n                indices = np.random.choice(np.delete(np.arange(population_size), i), 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = a + (self.mutation_factor_init - mutation_factor_change * eval_count) * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cross_prob:\n                        trial[j] = mutant[j]\n\n                trial_score = func(trial)\n                eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.population[i] = trial\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial\n                if eval_count >= self.budget:\n                    break\n\n            self.inertia_weight *= inertia_dampening\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptiveHybridPSODE", "description": "Adaptive Hybrid PSODE with dynamic parameter tuning and population strategy refinement for enhanced convergence.", "configspace": "", "generation": 10, "fitness": 0.27248154461410984, "feedback": "The algorithm AdaptiveHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.26.", "error": "", "parent_id": "bc77ccb6-50c7-4344-b386-3c2edeb7bb74", "metadata": {"aucs": [0.8858507806156204, 0.8950091104703868, 0.8922837352194003, 0.8986231202118635, 0.42522457384918044, 0.903328811895133, 0.8950639016060085, 0.9035025697890308, 0.893907614727979, 0.1571585266841663, 0.7707689203111712, 0.8344513733355453, 0.8073482088806536, 0.7640469507967942, 9.999999999998899e-05, 0.11901347313103416, 0.8030028428087583, 0.04743208147883793, 0.15840491034563786, 0.11238297092848848, 0.14186790933952942, 0.1309295768237816, 0.15594937972955436, 0.15423481252114413, 0.1136282443739326, 0.15558035196044473, 0.155665230532689, 0.11203193648718102, 0.1125585087635067, 0.10764451542613773, 0.125031214535951, 0.15055052214532494, 0.11636478217027046, 0.13609758752941647, 0.17562842741871187, 0.09352271269331414, 0.9807773851475245, 0.9790746912056262, 0.9863418044573163, 0.986136983995288, 0.9852894393398055, 0.9753115594691968, 0.9814948295605802, 0.9798102603176708, 0.9755923942329822, 0.058707217886335594, 0.059162849556035346, 0.11310449816150725, 0.24057331666429727, 0.152791296060513, 0.5167765341769535, 0.08366429932905417, 0.5841986686085092, 0.08663375968206621, 0.1710734522629116, 0.17051565092533094, 0.1689429957346108, 0.8639726225675075, 0.11698407759082818, 0.20532332548178267, 0.3917715686172234, 0.1303943661443916, 0.3797860047764059, 0.149639394670516, 0.3498346933485862, 0.13088062113280452, 0.19382896475314826, 0.14924684225768337, 0.14307249555174462, 0.15418015263969898, 0.22886297367941622, 0.19153142704856896, 0.22101990352907674, 0.1192346456632698, 0.21932530212361656, 0.16656579696040186, 0.11269861870330222, 0.14854732790215508, 0.1694451868069462, 0.26841471485555535, 0.15593316193592477, 0.006682622671799976, 0.00046879516650866204, 0.07597305288168177, 0.04242211005457652, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.059509313293787613, 0.022693623904702864, 0.10766072228887547, 0.07313622810044074, 0.009632347825923038, 0.0352751920987352, 0.0958690264269344, 0.049654062852498626, 0.04262088223546745, 0.08196078855402433, 0.05029658071856269, 0.15755722845087128, 0.078480869421098, 0.09514616177856772, 0.07838130174451874, 0.09721075086161124, 0.07343781826389872, 0.09122174374667125, 0.16056297839888134, 0.09382613818903773, 0.1552010358601572, 0.12324815086832208, 0.2529819423527593, 0.12639635321773734, 0.056554749466611653, 0.08173119557412667, 0.20176635624823347, 0.5374340522705741, 0.47487893791535085, 0.5131714645697824, 0.5619278150549987, 0.18185405120837073, 0.5813143234044179, 0.5225430450638127, 0.6155079772182088, 0.5297852801323828, 0.1387426810144896, 0.07951582399295642, 0.13389190903246506, 0.11453729326177597, 0.1716250298914198, 0.17812996983954854, 0.13898778347621232, 0.12268360932942068, 0.09183973284042113, 0.21675410957908725, 0.3291264742021298, 0.1803730145266922, 0.21222393626038383, 0.2666904076426395, 0.17491169639390558, 0.4272561212666731, 0.2242726151691682, 0.18190819097884037, 0.3791651649802218, 0.34227980042006834, 0.33923884991456366, 0.3228742535498066, 0.3632702850885443, 0.30616024627815575, 0.5204208642803627, 0.3827454837637192, 0.4518461713071119, 0.2237694449659502, 0.24101835898998925, 0.2339938893899245, 0.21546714554769808, 0.21770743845019502, 0.26985634162817274, 0.23183600627014844, 0.2806209684014761, 0.27996983514722285, 0.23946127037079468, 0.2028872470107721, 0.20619729914699036, 0.30501895468098195, 0.19659518345695726, 0.24671414494848865, 0.22224305991039495, 0.21942237113794516, 0.24493951865918318, 0.1955290357879469, 0.17707638533713121, 0.1897719983517161, 0.1968311849702955, 0.22419571149662043, 0.19033457162377687, 0.1978423430395, 0.2208641821970868, 0.17647889298904573, 0.6066877677422029, 0.18721541207272574, 0.15426044144217854, 0.9184862665514546, 0.2009465796921529, 0.20024415521984307, 0.09970445265744388, 0.16900457119275236, 0.2121156578194211, 0.4988553908926985, 0.15632835215816143, 0.21191285440150676, 0.21044659878221605, 0.3617966422152511, 0.5032312217134156, 0.10509395747984074, 0.10397423393209759, 0.3456823912429976, 0.1984062988094235, 0.19227656503049573, 0.20592017084594139, 0.19163411644919037, 0.22861659084620545, 0.19041870220046653, 0.23128192260771308, 0.19309640118718085, 0.18754580410673172, 0.09395881996779809, 0.09843673993300983, 0.08923063394554087, 0.1109176682154066, 0.09738303134749582, 0.08748328528186433, 0.08928312434722463, 0.09879695303451441, 0.09009022368920583]}, "mutation_prompt": null}
{"id": "cd10471b-7a77-40a6-9c57-6700d25a9a89", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30\n        self.final_population_size = 25  # More gradual population resizing\n        self.inertia_weight = 0.6  # Reduced inertia weight for faster convergence\n        self.cognitive_coeff = 1.7  # Slightly increased to enhance exploration\n        self.social_coeff = 1.4  # Slightly decreased for better balance\n        self.mutation_factor_init = 0.85  # Adjusted mutation factor\n        self.cross_prob = 0.95  # Increased cross probability for more aggressive trial acceptance\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.initial_population_size, dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.initial_population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        eval_count = 0\n        inertia_dampening = 0.98  # Slightly faster inertia dampening\n        mutation_factor_change = (self.mutation_factor_init - 0.5) / self.budget\n\n        while eval_count < self.budget:\n            population_size = self.initial_population_size - int(\n                (eval_count / self.budget) * (self.initial_population_size - self.final_population_size))\n\n            for i in range(population_size):\n                score = func(self.population[i])\n                eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n                if eval_count >= self.budget:\n                    break\n\n            r1 = np.random.rand(population_size, self.dim)\n            r2 = np.random.rand(population_size, self.dim)\n            cognitive_component = self.cognitive_coeff * r1 * (self.personal_best_positions[:population_size] - self.population[:population_size])\n            social_component = self.social_coeff * r2 * (self.global_best_position - self.population[:population_size])\n            self.velocities[:population_size] = (self.inertia_weight * self.velocities[:population_size]) + cognitive_component + social_component\n            self.population[:population_size] = self.population[:population_size] + self.velocities[:population_size]\n\n            self.population[:population_size] = np.clip(self.population[:population_size], self.lower_bound, self.upper_bound)\n\n            for i in range(population_size):\n                indices = np.random.choice(np.delete(np.arange(population_size), i), 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = a + (self.mutation_factor_init - mutation_factor_change * eval_count) * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cross_prob:\n                        trial[j] = mutant[j]\n\n                trial_score = func(trial)\n                eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.population[i] = trial\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial\n                if eval_count >= self.budget:\n                    break\n\n            self.inertia_weight *= inertia_dampening\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedHybridPSODE", "description": "EnhancedHybridPSODE with strategic parameter tuning and convergence acceleration for improved solution discovery.", "configspace": "", "generation": 9, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bc77ccb6-50c7-4344-b386-3c2edeb7bb74", "metadata": {"aucs": [0.8790086340197295, 0.8594809718503991, 0.8714262695213816, 0.8716207678780874, 0.8148118753439718, 0.8861515777171897, 0.8837698586196663, 0.8642760586676631, 0.8875415051650409, 0.17615915760563494, 0.040666035401233924, 0.7659295256535265, 0.7823578748417368, 0.5914234958185203, 0.7737192496914153, 0.09191439566829707, 0.7807869480152533, 0.7210407329277733, 0.7590331568653765, 0.11314459675360233, 0.1407305539432988, 0.13631009901996916, 0.17845428088125936, 0.1267983471526002, 0.11386342865106003, 0.7676500932417867, 0.7356018349826263, 0.09414670979277939, 0.10193276386032069, 0.11305088395546858, 0.09035188810275085, 0.11106680270323754, 0.07999216304702972, 0.13030784844424492, 0.1090903000904827, 0.10358403771667746, 0.9812208644686673, 0.990148163785257, 0.986321950263512, 0.9743452358825869, 0.9818659685636542, 0.9748072437211964, 0.98661971764974, 0.9812156557752502, 0.9740022926488223, 0.6833852700092474, 0.05942439096003904, 0.4465217175737798, 0.1514783845395712, 0.15123678199973534, 0.5170565092662427, 0.08814293903164183, 0.08876749261175287, 0.08747262658556376, 0.845701053771103, 0.22080061120268113, 0.2221265392974867, 0.1951747597340192, 0.1873530869107406, 0.21150550975519744, 0.7824621767610765, 0.2369892543861204, 0.22985526164499193, 0.1480386817577546, 0.1770782741373862, 0.18761944281912457, 0.13221331799248015, 0.15624693520631971, 0.166306497598123, 0.176788284570921, 0.18538267855681922, 0.168125587221999, 0.22545986869821455, 0.01691749011125654, 0.16766231711449908, 0.16335467370892842, 0.17787696690836274, 0.18453451111061947, 0.20021626088724775, 0.14917080393166593, 0.10231439881330207, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04227577453509179, 9.999999999998899e-05, 0.015463406937756163, 9.999999999998899e-05, 9.999999999998899e-05, 0.007912297409857327, 0.05474190849592975, 0.0347173953392379, 0.06333406881715675, 0.08871671805517234, 9.999999999998899e-05, 0.03861299327396939, 0.08687706815471752, 0.054730514896239923, 0.0950761773747294, 0.04775251971242633, 0.039690469816313634, 0.05801034121549731, 0.07899798940116598, 0.12123208331162583, 0.07751605849919285, 0.10272287603858754, 0.1667072975290561, 0.08097680103844229, 0.21386019817923785, 0.29479961095671137, 0.12545230467112922, 0.1014620627460765, 0.18605330707971834, 0.0811152816510583, 0.04888538530107778, 0.16911168435320667, 0.08200525644254175, 0.5789713400219295, 0.5043819370195604, 0.5705854377131928, 0.6163712517873601, 0.1816223944309462, 0.4651433234149117, 0.5980790126143987, 0.541162923293524, 0.5641267812012832, 0.09878025836774917, 0.09868763046288298, 0.07579817115720011, 0.1370973715510745, 0.11095610730595085, 0.1089961420522001, 0.0772660606942116, 0.0907145769773724, 0.09370847262624771, 0.16405289293500191, 0.2887828416758609, 0.19000827183424995, 0.24056496988958453, 0.39234844462579455, 0.31893961924211134, 0.3395656710000532, 0.18397597950738231, 0.1905479658229332, 0.4031565466702731, 0.33260677792399607, 0.43983189821281454, 0.36254220485256616, 0.615311087137856, 0.4226488410038012, 0.5149162942423011, 0.6435465997550542, 0.5975442376758364, 0.17652395519029507, 0.33385298819738696, 0.26706626250844223, 0.15110845801174178, 0.19033927360902692, 0.29297880793709596, 0.32074966798170135, 0.2786212190051407, 0.26592013582011964, 0.20626387691568626, 0.23533300364269227, 0.21960140332542588, 0.2166261284030666, 0.21925626195719738, 0.19723829545081528, 0.239014051222031, 0.22764164621031946, 0.2065795991169087, 0.20809659194959107, 0.18777939130854893, 0.18809690808592905, 0.20055815767971685, 0.24841047782516412, 0.2154025357234416, 0.20900733796249704, 0.24370747974556117, 0.1988601853636287, 0.16528498454319784, 0.1664887652897813, 0.1529090081731017, 0.8941348821818921, 0.20070456927090463, 0.19854116635388375, 0.11323241925174188, 0.16872427211354857, 0.8866933534022886, 0.5752327821528157, 0.15641477929591274, 0.20921159029213, 0.4599269982906907, 0.22210038428329704, 0.610196133677235, 0.2118384614919675, 0.10507112973519561, 0.7060655692943145, 0.18783309517007818, 0.19180891923347498, 0.2060947082681177, 0.18466423013486566, 0.22624582819961336, 0.18989499923664865, 0.1742474071569774, 0.1691272711386469, 0.19322196335618247, 0.10818493538237195, 0.09510691300887442, 0.10941114447661404, 0.08886654951766637, 0.09665151145532214, 0.09813607733786744, 0.10580537301912951, 0.08833639634802604, 0.10554517047363443]}, "mutation_prompt": null}
{"id": "1c8a25a2-3f6c-4c34-8b71-771163051a41", "solution": "import numpy as np\n\nclass AdaptiveHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30\n        self.final_population_size = 25\n        self.inertia_weight = 0.65  # Slightly increased inertia weight for stability\n        self.cognitive_coeff = 1.8  # Further increased for stronger exploration\n        self.social_coeff = 1.3  # Further decreased for reduced over-concentration\n        self.mutation_factor_init = 0.9  # Slightly increased mutation factor for more diversity\n        self.cross_prob = 0.92  # Slightly decreased for better precision\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.initial_population_size, dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.initial_population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        eval_count = 0\n        inertia_dampening = 0.975  # Further reduced dampening rate for faster adaptation\n        mutation_factor_change = (self.mutation_factor_init - 0.5) / self.budget\n\n        while eval_count < self.budget:\n            population_size = self.initial_population_size - int(\n                (eval_count / self.budget) * (self.initial_population_size - self.final_population_size))\n\n            for i in range(population_size):\n                score = func(self.population[i])\n                eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n                if eval_count >= self.budget:\n                    break\n\n            r1 = np.random.rand(population_size, self.dim)\n            r2 = np.random.rand(population_size, self.dim)\n            cognitive_component = self.cognitive_coeff * r1 * (self.personal_best_positions[:population_size] - self.population[:population_size])\n            social_component = self.social_coeff * r2 * (self.global_best_position - self.population[:population_size])\n            self.velocities[:population_size] = (self.inertia_weight * self.velocities[:population_size]) + cognitive_component + social_component\n            self.population[:population_size] = self.population[:population_size] + self.velocities[:population_size]\n            self.population[:population_size] = np.clip(self.population[:population_size], self.lower_bound, self.upper_bound)\n\n            for i in range(population_size):\n                indices = np.random.choice(np.delete(np.arange(population_size), i), 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = a + (self.mutation_factor_init - mutation_factor_change * eval_count) * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cross_prob:\n                        trial[j] = mutant[j]\n\n                trial_score = func(trial)\n                eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.population[i] = trial\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial\n                if eval_count >= self.budget:\n                    break\n\n            self.inertia_weight *= inertia_dampening\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptiveHybridPSODE", "description": "AdaptiveHybridPSODE with dynamic component tuning and adaptive trial vector adjustment for enhanced convergence.", "configspace": "", "generation": 12, "fitness": 0.2912287607366566, "feedback": "The algorithm AdaptiveHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.27.", "error": "", "parent_id": "bc77ccb6-50c7-4344-b386-3c2edeb7bb74", "metadata": {"aucs": [0.886227984017828, 0.8788498919061183, 0.8791717408381952, 0.8824342157570002, 0.7805234153307655, 0.8887208109498808, 0.8777546909109334, 0.8751620230349113, 0.8743390020546014, 0.7690945419629749, 0.7529200261463977, 0.6637621151962102, 0.7670609043410148, 0.039615042545385615, 0.7897818455875121, 0.7159285478611442, 0.7752826387005205, 0.626767449529293, 0.7677701168465662, 0.14501180425746207, 0.1687167769520318, 0.1177059006292096, 0.13617813986822824, 0.13664327137707555, 0.1153382590803188, 0.15324254562508433, 0.15132906876212748, 0.11944117827730238, 0.10913842525259221, 0.16973267730790098, 0.13314451133558192, 0.09491152842465767, 0.11086838828159307, 0.11990439010750764, 0.13807792401408991, 0.10572970003454574, 0.9808826274538122, 0.9762710274027924, 0.9868689918612535, 0.9861077470677874, 0.9826324352562412, 0.9547244822549036, 0.9859759702912408, 0.9771584393028374, 0.9803589532066146, 0.059543318861545624, 0.714979942073767, 0.5679774704847116, 0.15089315738235054, 0.15020862634171628, 0.5005988100846999, 0.0880008356461387, 0.5088545725931046, 0.5110300260475058, 0.8819763812514714, 0.22183124625134176, 0.2353812433457958, 0.27963348624922824, 0.11653256200098527, 0.1920366162544055, 0.24017744577215805, 0.8591041392464773, 0.37442633908490974, 0.09593089500094043, 0.12691226361912145, 0.1822692551584787, 0.26784816654148635, 0.1807153080840611, 0.1581860424880992, 0.1280993069889621, 0.1522507247643563, 0.169552924397668, 0.21571144891207794, 0.05229213908222374, 0.17369833163211856, 0.17580160078506635, 0.18647976786973797, 0.19038695612027867, 0.1974794067260286, 0.0974823189211218, 0.10710097371444605, 0.04040794394692726, 0.0021529810344903533, 0.08469475517580527, 0.05516236305198485, 9.999999999998899e-05, 9.999999999998899e-05, 0.08648385183038232, 9.999999999998899e-05, 0.04693722320009752, 0.06678289066894161, 0.06097201527800589, 0.06568903837892537, 0.0671629514358767, 0.0602201370920562, 0.0033751545597556776, 0.09412062201313542, 0.11849265518821062, 0.05245149675905503, 0.10856853737565453, 0.12734666183808208, 0.12366096697378948, 0.07700814026604019, 0.08536718092581719, 0.08139001562082726, 0.07251586727165527, 0.07412916623455457, 0.09221872563767142, 0.3288850136362631, 0.0423818780600308, 0.094769121545348, 0.0715098463167344, 9.999999999998899e-05, 0.37774936742396215, 0.04831560545417346, 0.08136557386642052, 0.14459364695175136, 0.510122725863823, 0.5409298578292319, 0.5487408953236579, 0.5646447340919979, 0.6700570469618194, 0.5496976551777284, 0.579187091317114, 0.5789657824834091, 0.5389412257519753, 0.10380042007631929, 0.12759222630356448, 0.15331574536407355, 0.1460138630755371, 0.13554675410352635, 0.0983158610922894, 0.1054176290421115, 0.12318277603614769, 0.09138367868854225, 0.41470044738259193, 0.34503271533228086, 0.4441550053771133, 0.19784238554872768, 0.22778479501142213, 0.27258464193028276, 0.2748476468328285, 0.2416407735041931, 0.20419831959470358, 0.4558294144785826, 0.5207195129941549, 0.38714516308082336, 0.34516059176930625, 0.24063846174835268, 0.26506560379811495, 0.6285586737223445, 0.4090002680323329, 0.2593167500955639, 0.23178035414513398, 0.2655293927335528, 0.3714336639871947, 0.20719612056726877, 0.21312531108021693, 0.1938303508602185, 0.2181253971950563, 0.25001391975664033, 0.26550656283144547, 0.23751818125507318, 0.1627581030069234, 0.22746445521886427, 0.21068989048314823, 0.23349736469016913, 0.22169585578212447, 0.21798911794910258, 0.21863718822621192, 0.22993601351567783, 0.2236306705443324, 0.2222589150063623, 0.22378352495819953, 0.18769588359040223, 0.21020533586543821, 0.19630542402132, 0.24710716285643752, 0.20673067110261123, 0.18314497866451085, 0.1648790956385363, 0.20005138326813487, 0.15376059170962508, 0.17548200521838586, 0.20117007745640136, 0.19950044165656866, 0.09990816972940497, 0.16916174289772112, 0.17088630495474755, 0.4766493383164546, 0.15631470998114239, 0.10504625688074098, 0.12756673347791425, 0.6075365932446777, 0.513150260600655, 0.10501467699748446, 0.20977856832567354, 0.1793770825069516, 0.17922411851857578, 0.18972455059554216, 0.18424798134599463, 0.19137191714767243, 0.1997551044246103, 0.2152514604228538, 0.1802836758561962, 0.17996003432490504, 0.1930512694559734, 0.10840547235051745, 0.0841880595296336, 0.08362369091170863, 0.0942524822149653, 0.0770599898281844, 0.09419385715225903, 0.09670223380120846, 0.095776659933838, 0.08951116773868939]}, "mutation_prompt": null}
{"id": "f24f5a86-478d-4042-859d-baecf14f9c3c", "solution": "import numpy as np\n\nclass AdaptiveVelocityHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30\n        self.final_population_size = 25\n        self.inertia_weight = 0.55  # Slightly reduced for faster convergence\n        self.cognitive_coeff = 1.6  # Adjusted for refined balance\n        self.social_coeff = 1.5  # Slightly increased for better social learning\n        self.mutation_factor_init = 0.88  # Increased for wider exploration\n        self.cross_prob = 0.92  # Slightly decreased for improved stability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.initial_population_size, dim))  # Reduced initial velocity magnitude\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.initial_population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        eval_count = 0\n        inertia_dampening = 0.97  # Increased to stabilize convergence\n        mutation_factor_change = (self.mutation_factor_init - 0.5) / self.budget\n\n        while eval_count < self.budget:\n            population_size = self.initial_population_size - int(\n                (eval_count / self.budget) * (self.initial_population_size - self.final_population_size))\n\n            for i in range(population_size):\n                score = func(self.population[i])\n                eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n                if eval_count >= self.budget:\n                    break\n\n            r1 = np.random.rand(population_size, self.dim)\n            r2 = np.random.rand(population_size, self.dim)\n            cognitive_component = self.cognitive_coeff * r1 * (self.personal_best_positions[:population_size] - self.population[:population_size])\n            social_component = self.social_coeff * r2 * (self.global_best_position - self.population[:population_size])\n            self.velocities[:population_size] = (self.inertia_weight * self.velocities[:population_size]) + cognitive_component + social_component\n            self.population[:population_size] = self.population[:population_size] + self.velocities[:population_size]\n\n            self.population[:population_size] = np.clip(self.population[:population_size], self.lower_bound, self.upper_bound)\n\n            for i in range(population_size):\n                indices = np.random.choice(np.delete(np.arange(population_size), i), 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = a + (self.mutation_factor_init - mutation_factor_change * eval_count) * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cross_prob:\n                        trial[j] = mutant[j]\n\n                trial_score = func(trial)\n                eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.population[i] = trial\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial\n                if eval_count >= self.budget:\n                    break\n\n            self.inertia_weight *= inertia_dampening\n\n        return self.global_best_position, self.global_best_score", "name": "AdaptiveVelocityHybridPSODE", "description": "AdaptiveVelocityHybridPSODE with fine-tuned velocity adaptation and crossover strategy for accelerated convergence.", "configspace": "", "generation": 13, "fitness": 0.2869658991756611, "feedback": "The algorithm AdaptiveVelocityHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.27.", "error": "", "parent_id": "bc77ccb6-50c7-4344-b386-3c2edeb7bb74", "metadata": {"aucs": [0.8947952017320151, 0.8832837190154795, 0.8784459605844008, 0.8947594177088259, 0.8957722480798163, 0.871747594088694, 0.8944372377341718, 0.8917501154039201, 0.8891147211493713, 9.999999999998899e-05, 0.8139045200343655, 0.05338667272976161, 0.7857099048738635, 0.8046321498868176, 0.7884493505667243, 0.7962725550469028, 0.7803474001595057, 0.7265237025866724, 0.12095612496391062, 0.803769713667289, 0.11298924640615737, 0.1813364203992246, 0.1098769749389763, 0.13607966963373452, 0.1415447668002494, 0.09896783890045135, 0.1575635807120188, 0.14069056502070232, 0.10619094624642567, 0.14987628281751986, 0.0950279185592604, 0.18119282878528253, 0.15558973639098816, 0.11929864630507292, 0.11328692834173781, 0.1680252731245191, 0.9835174792096797, 0.9893613896811848, 0.9868135150653866, 0.9861885155331815, 0.9817348361701457, 0.9753007712450975, 0.9893845400867223, 0.98001679470122, 0.9797762688448824, 0.3337861412671741, 0.05927028206977503, 0.06182318455411384, 0.15266514133353215, 0.14868192284794846, 0.7069788210211984, 0.08368425552930858, 0.685056726225141, 0.08763702452476518, 0.3778236339389529, 0.22435243059386034, 0.24012498006883554, 0.1946275697104043, 0.11729663281925917, 0.19113847132398953, 0.22826298836341807, 0.1260090982310228, 0.22914230612167408, 0.0964738264838465, 0.2001011183550394, 0.18808790360491723, 0.16505496517723006, 0.12933425516101038, 0.16975512926078862, 0.181633511346463, 0.19724400586449997, 0.1935362915342448, 0.2455692579274127, 0.18709130414003083, 0.11752173138322708, 0.14223367825668598, 0.12783290479443854, 0.183791346301322, 0.19666402195453703, 9.999999999998899e-05, 0.12304295529231635, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009548105394587725, 9.999999999998899e-05, 0.04411653510417468, 9.999999999998899e-05, 9.999999999998899e-05, 0.06664190367891587, 0.01611917409168473, 0.1080617306283218, 0.06186215624471292, 0.021455044059452866, 0.01220232733221549, 0.14170186746280833, 0.07311130240743569, 0.07036233147279491, 9.999999999998899e-05, 0.4858651340926826, 0.05267566563576942, 0.2670954081152187, 0.10802373572216661, 0.07981437035630301, 0.11508586139953991, 0.0721710178586703, 0.07291904377961633, 0.044159652713293474, 0.06313284007850983, 0.05858141591814725, 0.08375008309803966, 0.24751494744583213, 0.35902299168887253, 0.052761469928305216, 0.04882901448965826, 0.1268475455133926, 0.518710913998076, 0.6881117849481317, 0.6003006799353225, 0.574982086112624, 0.507633173547827, 0.5734036683576229, 0.554846831135849, 0.560779485864552, 0.5839882912814078, 0.4414428173159912, 0.06332332076812874, 0.06928950248551369, 0.12284437944215065, 0.15298092168587696, 0.1518210103221248, 0.07885616678481366, 0.13192026563894232, 0.12383832109877935, 0.18605363270704778, 0.1981286088580172, 0.6946294497903893, 0.20884375465856642, 0.3689627576159802, 0.1739148491224265, 0.19353385416460345, 0.23970677928906003, 0.19936515665203824, 0.34857803068087356, 0.23710319150282266, 0.39276136566363673, 0.3504184263485032, 0.2363205872751455, 0.3111580419355239, 0.511070896052173, 0.41433693531858895, 0.21298451662110274, 0.18264374292968866, 0.27065002485279555, 0.24127488567613242, 0.32269322664452016, 0.2560587397851265, 0.3203415146947034, 0.4781525704978119, 0.3071519767166295, 0.32758372629440846, 0.22820333388078118, 0.17900989931375022, 0.21379225790458545, 0.21049470229814038, 0.26019880762625014, 0.21558095884495565, 0.23274551494894213, 0.2420309728933735, 0.2587480866095203, 0.19767504749567244, 0.244877015895135, 0.21147649409793168, 0.18258814071637175, 0.1783351020471564, 0.20057043836297583, 0.20800357345527476, 0.19856344674916016, 0.24683409917571486, 0.16557420172638337, 0.17736954170032293, 0.1244095673377753, 0.9042953818107681, 0.2005848789691418, 0.1986094384643482, 0.09945745191500077, 0.16944140396372642, 0.21247599602534195, 0.5502968765220191, 0.1561875604119516, 0.2582668141307537, 0.28962093301622727, 0.31367707687613855, 0.8365478230474143, 0.10394052918770103, 0.1984834952217157, 0.3086248634075811, 0.20224904408050193, 0.20103284594335402, 0.2091272337632496, 0.19409227470826007, 0.17643181290953147, 0.17579054689027485, 0.18029671809583991, 0.18696759672886243, 0.17603168608939868, 0.11094080544619245, 0.07756055479230128, 0.11101413092096368, 0.08871595091976525, 0.11137524927810705, 0.1029723319669702, 0.09019160311523888, 0.09297052005214923, 0.09033419009394839]}, "mutation_prompt": null}
{"id": "ba5343e3-af57-411e-b52b-eda4b1ec668f", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30\n        self.final_population_size = 25  # More gradual population resizing\n        self.inertia_weight = 0.6  # Reduced inertia weight for faster convergence\n        self.cognitive_coeff = 1.7  # Slightly increased to enhance exploration\n        self.social_coeff = 1.4  # Slightly decreased for better balance\n        self.mutation_factor_init = 0.85  # Adjusted mutation factor\n        self.cross_prob = 0.95  # Increased cross probability for more aggressive trial acceptance\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.initial_population_size, dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.initial_population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        eval_count = 0\n        inertia_dampening = 0.98  # Slightly faster inertia dampening\n        mutation_factor_change = (self.mutation_factor_init - 0.5) / self.budget\n\n        while eval_count < self.budget:\n            population_size = self.initial_population_size - int(\n                (eval_count / self.budget) * (self.initial_population_size - self.final_population_size))\n\n            for i in range(population_size):\n                score = func(self.population[i])\n                eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n                if eval_count >= self.budget:\n                    break\n\n            r1 = np.random.rand(population_size, self.dim)\n            r2 = np.random.rand(population_size, self.dim)\n            cognitive_component = self.cognitive_coeff * r1 * (self.personal_best_positions[:population_size] - self.population[:population_size])\n            social_component = self.social_coeff * r2 * (self.global_best_position - self.population[:population_size])\n            self.velocities[:population_size] = (self.inertia_weight * self.velocities[:population_size]) + cognitive_component + social_component\n            self.population[:population_size] = self.population[:population_size] + self.velocities[:population_size]\n\n            self.population[:population_size] = np.clip(self.population[:population_size], self.lower_bound, self.upper_bound)\n\n            for i in range(population_size):\n                indices = np.random.choice(np.delete(np.arange(population_size), i), 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = a + (self.mutation_factor_init - mutation_factor_change * eval_count) * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cross_prob:\n                        trial[j] = mutant[j]\n\n                trial_score = func(trial)\n                eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.population[i] = trial\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial\n                if eval_count >= self.budget:\n                    break\n\n            self.inertia_weight *= inertia_dampening\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedHybridPSODE", "description": "EnhancedHybridPSODE with strategic parameter tuning and convergence acceleration for improved solution discovery.", "configspace": "", "generation": 9, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bc77ccb6-50c7-4344-b386-3c2edeb7bb74", "metadata": {"aucs": [0.8790086340197295, 0.8594809718503991, 0.8714262695213816, 0.8716207678780874, 0.8148118753439718, 0.8861515777171897, 0.8837698586196663, 0.8642760586676631, 0.8875415051650409, 0.17615915760563494, 0.040666035401233924, 0.7659295256535265, 0.7823578748417368, 0.5914234958185203, 0.7737192496914153, 0.09191439566829707, 0.7807869480152533, 0.7210407329277733, 0.7590331568653765, 0.11314459675360233, 0.1407305539432988, 0.13631009901996916, 0.17845428088125936, 0.1267983471526002, 0.11386342865106003, 0.7676500932417867, 0.7356018349826263, 0.09414670979277939, 0.10193276386032069, 0.11305088395546858, 0.09035188810275085, 0.11106680270323754, 0.07999216304702972, 0.13030784844424492, 0.1090903000904827, 0.10358403771667746, 0.9812208644686673, 0.990148163785257, 0.986321950263512, 0.9743452358825869, 0.9818659685636542, 0.9748072437211964, 0.98661971764974, 0.9812156557752502, 0.9740022926488223, 0.6833852700092474, 0.05942439096003904, 0.4465217175737798, 0.1514783845395712, 0.15123678199973534, 0.5170565092662427, 0.08814293903164183, 0.08876749261175287, 0.08747262658556376, 0.845701053771103, 0.22080061120268113, 0.2221265392974867, 0.1951747597340192, 0.1873530869107406, 0.21150550975519744, 0.7824621767610765, 0.2369892543861204, 0.22985526164499193, 0.1480386817577546, 0.1770782741373862, 0.18761944281912457, 0.13221331799248015, 0.15624693520631971, 0.166306497598123, 0.176788284570921, 0.18538267855681922, 0.168125587221999, 0.22545986869821455, 0.01691749011125654, 0.16766231711449908, 0.16335467370892842, 0.17787696690836274, 0.18453451111061947, 0.20021626088724775, 0.14917080393166593, 0.10231439881330207, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04227577453509179, 9.999999999998899e-05, 0.015463406937756163, 9.999999999998899e-05, 9.999999999998899e-05, 0.007912297409857327, 0.05474190849592975, 0.0347173953392379, 0.06333406881715675, 0.08871671805517234, 9.999999999998899e-05, 0.03861299327396939, 0.08687706815471752, 0.054730514896239923, 0.0950761773747294, 0.04775251971242633, 0.039690469816313634, 0.05801034121549731, 0.07899798940116598, 0.12123208331162583, 0.07751605849919285, 0.10272287603858754, 0.1667072975290561, 0.08097680103844229, 0.21386019817923785, 0.29479961095671137, 0.12545230467112922, 0.1014620627460765, 0.18605330707971834, 0.0811152816510583, 0.04888538530107778, 0.16911168435320667, 0.08200525644254175, 0.5789713400219295, 0.5043819370195604, 0.5705854377131928, 0.6163712517873601, 0.1816223944309462, 0.4651433234149117, 0.5980790126143987, 0.541162923293524, 0.5641267812012832, 0.09878025836774917, 0.09868763046288298, 0.07579817115720011, 0.1370973715510745, 0.11095610730595085, 0.1089961420522001, 0.0772660606942116, 0.0907145769773724, 0.09370847262624771, 0.16405289293500191, 0.2887828416758609, 0.19000827183424995, 0.24056496988958453, 0.39234844462579455, 0.31893961924211134, 0.3395656710000532, 0.18397597950738231, 0.1905479658229332, 0.4031565466702731, 0.33260677792399607, 0.43983189821281454, 0.36254220485256616, 0.615311087137856, 0.4226488410038012, 0.5149162942423011, 0.6435465997550542, 0.5975442376758364, 0.17652395519029507, 0.33385298819738696, 0.26706626250844223, 0.15110845801174178, 0.19033927360902692, 0.29297880793709596, 0.32074966798170135, 0.2786212190051407, 0.26592013582011964, 0.20626387691568626, 0.23533300364269227, 0.21960140332542588, 0.2166261284030666, 0.21925626195719738, 0.19723829545081528, 0.239014051222031, 0.22764164621031946, 0.2065795991169087, 0.20809659194959107, 0.18777939130854893, 0.18809690808592905, 0.20055815767971685, 0.24841047782516412, 0.2154025357234416, 0.20900733796249704, 0.24370747974556117, 0.1988601853636287, 0.16528498454319784, 0.1664887652897813, 0.1529090081731017, 0.8941348821818921, 0.20070456927090463, 0.19854116635388375, 0.11323241925174188, 0.16872427211354857, 0.8866933534022886, 0.5752327821528157, 0.15641477929591274, 0.20921159029213, 0.4599269982906907, 0.22210038428329704, 0.610196133677235, 0.2118384614919675, 0.10507112973519561, 0.7060655692943145, 0.18783309517007818, 0.19180891923347498, 0.2060947082681177, 0.18466423013486566, 0.22624582819961336, 0.18989499923664865, 0.1742474071569774, 0.1691272711386469, 0.19322196335618247, 0.10818493538237195, 0.09510691300887442, 0.10941114447661404, 0.08886654951766637, 0.09665151145532214, 0.09813607733786744, 0.10580537301912951, 0.08833639634802604, 0.10554517047363443]}, "mutation_prompt": null}
{"id": "2664f1be-a7b3-4943-a723-48f0b4e95529", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30\n        self.final_population_size = 25  # More gradual population resizing\n        self.inertia_weight = 0.6  # Reduced inertia weight for faster convergence\n        self.cognitive_coeff = 1.7  # Slightly increased to enhance exploration\n        self.social_coeff = 1.4  # Slightly decreased for better balance\n        self.mutation_factor_init = 0.85  # Adjusted mutation factor\n        self.cross_prob = 0.95  # Increased cross probability for more aggressive trial acceptance\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.initial_population_size, dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.initial_population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        eval_count = 0\n        inertia_dampening = 0.98  # Slightly faster inertia dampening\n        mutation_factor_change = (self.mutation_factor_init - 0.5) / self.budget\n\n        while eval_count < self.budget:\n            population_size = self.initial_population_size - int(\n                (eval_count / self.budget) * (self.initial_population_size - self.final_population_size))\n\n            for i in range(population_size):\n                score = func(self.population[i])\n                eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n                if eval_count >= self.budget:\n                    break\n\n            r1 = np.random.rand(population_size, self.dim)\n            r2 = np.random.rand(population_size, self.dim)\n            cognitive_component = self.cognitive_coeff * r1 * (self.personal_best_positions[:population_size] - self.population[:population_size])\n            social_component = self.social_coeff * r2 * (self.global_best_position - self.population[:population_size])\n            self.velocities[:population_size] = (self.inertia_weight * self.velocities[:population_size]) + cognitive_component + social_component\n            self.population[:population_size] = self.population[:population_size] + self.velocities[:population_size]\n\n            self.population[:population_size] = np.clip(self.population[:population_size], self.lower_bound, self.upper_bound)\n\n            for i in range(population_size):\n                indices = np.random.choice(np.delete(np.arange(population_size), i), 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = a + (self.mutation_factor_init - mutation_factor_change * eval_count) * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cross_prob:\n                        trial[j] = mutant[j]\n\n                trial_score = func(trial)\n                eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.population[i] = trial\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial\n                if eval_count >= self.budget:\n                    break\n\n            self.inertia_weight *= inertia_dampening\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedHybridPSODE", "description": "EnhancedHybridPSODE with strategic parameter tuning and convergence acceleration for improved solution discovery.", "configspace": "", "generation": 9, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bc77ccb6-50c7-4344-b386-3c2edeb7bb74", "metadata": {"aucs": [0.8790086340197295, 0.8594809718503991, 0.8714262695213816, 0.8716207678780874, 0.8148118753439718, 0.8861515777171897, 0.8837698586196663, 0.8642760586676631, 0.8875415051650409, 0.17615915760563494, 0.040666035401233924, 0.7659295256535265, 0.7823578748417368, 0.5914234958185203, 0.7737192496914153, 0.09191439566829707, 0.7807869480152533, 0.7210407329277733, 0.7590331568653765, 0.11314459675360233, 0.1407305539432988, 0.13631009901996916, 0.17845428088125936, 0.1267983471526002, 0.11386342865106003, 0.7676500932417867, 0.7356018349826263, 0.09414670979277939, 0.10193276386032069, 0.11305088395546858, 0.09035188810275085, 0.11106680270323754, 0.07999216304702972, 0.13030784844424492, 0.1090903000904827, 0.10358403771667746, 0.9812208644686673, 0.990148163785257, 0.986321950263512, 0.9743452358825869, 0.9818659685636542, 0.9748072437211964, 0.98661971764974, 0.9812156557752502, 0.9740022926488223, 0.6833852700092474, 0.05942439096003904, 0.4465217175737798, 0.1514783845395712, 0.15123678199973534, 0.5170565092662427, 0.08814293903164183, 0.08876749261175287, 0.08747262658556376, 0.845701053771103, 0.22080061120268113, 0.2221265392974867, 0.1951747597340192, 0.1873530869107406, 0.21150550975519744, 0.7824621767610765, 0.2369892543861204, 0.22985526164499193, 0.1480386817577546, 0.1770782741373862, 0.18761944281912457, 0.13221331799248015, 0.15624693520631971, 0.166306497598123, 0.176788284570921, 0.18538267855681922, 0.168125587221999, 0.22545986869821455, 0.01691749011125654, 0.16766231711449908, 0.16335467370892842, 0.17787696690836274, 0.18453451111061947, 0.20021626088724775, 0.14917080393166593, 0.10231439881330207, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04227577453509179, 9.999999999998899e-05, 0.015463406937756163, 9.999999999998899e-05, 9.999999999998899e-05, 0.007912297409857327, 0.05474190849592975, 0.0347173953392379, 0.06333406881715675, 0.08871671805517234, 9.999999999998899e-05, 0.03861299327396939, 0.08687706815471752, 0.054730514896239923, 0.0950761773747294, 0.04775251971242633, 0.039690469816313634, 0.05801034121549731, 0.07899798940116598, 0.12123208331162583, 0.07751605849919285, 0.10272287603858754, 0.1667072975290561, 0.08097680103844229, 0.21386019817923785, 0.29479961095671137, 0.12545230467112922, 0.1014620627460765, 0.18605330707971834, 0.0811152816510583, 0.04888538530107778, 0.16911168435320667, 0.08200525644254175, 0.5789713400219295, 0.5043819370195604, 0.5705854377131928, 0.6163712517873601, 0.1816223944309462, 0.4651433234149117, 0.5980790126143987, 0.541162923293524, 0.5641267812012832, 0.09878025836774917, 0.09868763046288298, 0.07579817115720011, 0.1370973715510745, 0.11095610730595085, 0.1089961420522001, 0.0772660606942116, 0.0907145769773724, 0.09370847262624771, 0.16405289293500191, 0.2887828416758609, 0.19000827183424995, 0.24056496988958453, 0.39234844462579455, 0.31893961924211134, 0.3395656710000532, 0.18397597950738231, 0.1905479658229332, 0.4031565466702731, 0.33260677792399607, 0.43983189821281454, 0.36254220485256616, 0.615311087137856, 0.4226488410038012, 0.5149162942423011, 0.6435465997550542, 0.5975442376758364, 0.17652395519029507, 0.33385298819738696, 0.26706626250844223, 0.15110845801174178, 0.19033927360902692, 0.29297880793709596, 0.32074966798170135, 0.2786212190051407, 0.26592013582011964, 0.20626387691568626, 0.23533300364269227, 0.21960140332542588, 0.2166261284030666, 0.21925626195719738, 0.19723829545081528, 0.239014051222031, 0.22764164621031946, 0.2065795991169087, 0.20809659194959107, 0.18777939130854893, 0.18809690808592905, 0.20055815767971685, 0.24841047782516412, 0.2154025357234416, 0.20900733796249704, 0.24370747974556117, 0.1988601853636287, 0.16528498454319784, 0.1664887652897813, 0.1529090081731017, 0.8941348821818921, 0.20070456927090463, 0.19854116635388375, 0.11323241925174188, 0.16872427211354857, 0.8866933534022886, 0.5752327821528157, 0.15641477929591274, 0.20921159029213, 0.4599269982906907, 0.22210038428329704, 0.610196133677235, 0.2118384614919675, 0.10507112973519561, 0.7060655692943145, 0.18783309517007818, 0.19180891923347498, 0.2060947082681177, 0.18466423013486566, 0.22624582819961336, 0.18989499923664865, 0.1742474071569774, 0.1691272711386469, 0.19322196335618247, 0.10818493538237195, 0.09510691300887442, 0.10941114447661404, 0.08886654951766637, 0.09665151145532214, 0.09813607733786744, 0.10580537301912951, 0.08833639634802604, 0.10554517047363443]}, "mutation_prompt": null}
{"id": "37053163-6ea5-484e-9524-27cc1a256529", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30\n        self.final_population_size = 25  # More gradual population resizing\n        self.inertia_weight = 0.6  # Reduced inertia weight for faster convergence\n        self.cognitive_coeff = 1.7  # Slightly increased to enhance exploration\n        self.social_coeff = 1.4  # Slightly decreased for better balance\n        self.mutation_factor_init = 0.85  # Adjusted mutation factor\n        self.cross_prob = 0.95  # Increased cross probability for more aggressive trial acceptance\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.initial_population_size, dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.initial_population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        eval_count = 0\n        inertia_dampening = 0.98  # Slightly faster inertia dampening\n        mutation_factor_change = (self.mutation_factor_init - 0.5) / self.budget\n\n        while eval_count < self.budget:\n            population_size = self.initial_population_size - int(\n                (eval_count / self.budget) * (self.initial_population_size - self.final_population_size))\n\n            for i in range(population_size):\n                score = func(self.population[i])\n                eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n                if eval_count >= self.budget:\n                    break\n\n            r1 = np.random.rand(population_size, self.dim)\n            r2 = np.random.rand(population_size, self.dim)\n            cognitive_component = self.cognitive_coeff * r1 * (self.personal_best_positions[:population_size] - self.population[:population_size])\n            social_component = self.social_coeff * r2 * (self.global_best_position - self.population[:population_size])\n            self.velocities[:population_size] = (self.inertia_weight * self.velocities[:population_size]) + cognitive_component + social_component\n            self.population[:population_size] = self.population[:population_size] + self.velocities[:population_size]\n\n            self.population[:population_size] = np.clip(self.population[:population_size], self.lower_bound, self.upper_bound)\n\n            for i in range(population_size):\n                indices = np.random.choice(np.delete(np.arange(population_size), i), 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = a + (self.mutation_factor_init - mutation_factor_change * eval_count) * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cross_prob:\n                        trial[j] = mutant[j]\n\n                trial_score = func(trial)\n                eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.population[i] = trial\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial\n                if eval_count >= self.budget:\n                    break\n\n            self.inertia_weight *= inertia_dampening\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedHybridPSODE", "description": "EnhancedHybridPSODE with strategic parameter tuning and convergence acceleration for improved solution discovery.", "configspace": "", "generation": 9, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bc77ccb6-50c7-4344-b386-3c2edeb7bb74", "metadata": {"aucs": [0.8790086340197295, 0.8594809718503991, 0.8714262695213816, 0.8716207678780874, 0.8148118753439718, 0.8861515777171897, 0.8837698586196663, 0.8642760586676631, 0.8875415051650409, 0.17615915760563494, 0.040666035401233924, 0.7659295256535265, 0.7823578748417368, 0.5914234958185203, 0.7737192496914153, 0.09191439566829707, 0.7807869480152533, 0.7210407329277733, 0.7590331568653765, 0.11314459675360233, 0.1407305539432988, 0.13631009901996916, 0.17845428088125936, 0.1267983471526002, 0.11386342865106003, 0.7676500932417867, 0.7356018349826263, 0.09414670979277939, 0.10193276386032069, 0.11305088395546858, 0.09035188810275085, 0.11106680270323754, 0.07999216304702972, 0.13030784844424492, 0.1090903000904827, 0.10358403771667746, 0.9812208644686673, 0.990148163785257, 0.986321950263512, 0.9743452358825869, 0.9818659685636542, 0.9748072437211964, 0.98661971764974, 0.9812156557752502, 0.9740022926488223, 0.6833852700092474, 0.05942439096003904, 0.4465217175737798, 0.1514783845395712, 0.15123678199973534, 0.5170565092662427, 0.08814293903164183, 0.08876749261175287, 0.08747262658556376, 0.845701053771103, 0.22080061120268113, 0.2221265392974867, 0.1951747597340192, 0.1873530869107406, 0.21150550975519744, 0.7824621767610765, 0.2369892543861204, 0.22985526164499193, 0.1480386817577546, 0.1770782741373862, 0.18761944281912457, 0.13221331799248015, 0.15624693520631971, 0.166306497598123, 0.176788284570921, 0.18538267855681922, 0.168125587221999, 0.22545986869821455, 0.01691749011125654, 0.16766231711449908, 0.16335467370892842, 0.17787696690836274, 0.18453451111061947, 0.20021626088724775, 0.14917080393166593, 0.10231439881330207, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04227577453509179, 9.999999999998899e-05, 0.015463406937756163, 9.999999999998899e-05, 9.999999999998899e-05, 0.007912297409857327, 0.05474190849592975, 0.0347173953392379, 0.06333406881715675, 0.08871671805517234, 9.999999999998899e-05, 0.03861299327396939, 0.08687706815471752, 0.054730514896239923, 0.0950761773747294, 0.04775251971242633, 0.039690469816313634, 0.05801034121549731, 0.07899798940116598, 0.12123208331162583, 0.07751605849919285, 0.10272287603858754, 0.1667072975290561, 0.08097680103844229, 0.21386019817923785, 0.29479961095671137, 0.12545230467112922, 0.1014620627460765, 0.18605330707971834, 0.0811152816510583, 0.04888538530107778, 0.16911168435320667, 0.08200525644254175, 0.5789713400219295, 0.5043819370195604, 0.5705854377131928, 0.6163712517873601, 0.1816223944309462, 0.4651433234149117, 0.5980790126143987, 0.541162923293524, 0.5641267812012832, 0.09878025836774917, 0.09868763046288298, 0.07579817115720011, 0.1370973715510745, 0.11095610730595085, 0.1089961420522001, 0.0772660606942116, 0.0907145769773724, 0.09370847262624771, 0.16405289293500191, 0.2887828416758609, 0.19000827183424995, 0.24056496988958453, 0.39234844462579455, 0.31893961924211134, 0.3395656710000532, 0.18397597950738231, 0.1905479658229332, 0.4031565466702731, 0.33260677792399607, 0.43983189821281454, 0.36254220485256616, 0.615311087137856, 0.4226488410038012, 0.5149162942423011, 0.6435465997550542, 0.5975442376758364, 0.17652395519029507, 0.33385298819738696, 0.26706626250844223, 0.15110845801174178, 0.19033927360902692, 0.29297880793709596, 0.32074966798170135, 0.2786212190051407, 0.26592013582011964, 0.20626387691568626, 0.23533300364269227, 0.21960140332542588, 0.2166261284030666, 0.21925626195719738, 0.19723829545081528, 0.239014051222031, 0.22764164621031946, 0.2065795991169087, 0.20809659194959107, 0.18777939130854893, 0.18809690808592905, 0.20055815767971685, 0.24841047782516412, 0.2154025357234416, 0.20900733796249704, 0.24370747974556117, 0.1988601853636287, 0.16528498454319784, 0.1664887652897813, 0.1529090081731017, 0.8941348821818921, 0.20070456927090463, 0.19854116635388375, 0.11323241925174188, 0.16872427211354857, 0.8866933534022886, 0.5752327821528157, 0.15641477929591274, 0.20921159029213, 0.4599269982906907, 0.22210038428329704, 0.610196133677235, 0.2118384614919675, 0.10507112973519561, 0.7060655692943145, 0.18783309517007818, 0.19180891923347498, 0.2060947082681177, 0.18466423013486566, 0.22624582819961336, 0.18989499923664865, 0.1742474071569774, 0.1691272711386469, 0.19322196335618247, 0.10818493538237195, 0.09510691300887442, 0.10941114447661404, 0.08886654951766637, 0.09665151145532214, 0.09813607733786744, 0.10580537301912951, 0.08833639634802604, 0.10554517047363443]}, "mutation_prompt": null}
{"id": "409c232e-7c65-4cd2-b925-301ff982b06a", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30\n        self.final_population_size = 25\n        self.inertia_weight = 0.65  # Increased slightly for initial exploration\n        self.cognitive_coeff = 1.5  # Reduced to balance exploration and exploitation\n        self.social_coeff = 1.5  # Adjusted for better convergence\n        self.mutation_factor_init = 0.9  # Slightly increased for stronger mutation impact initially\n        self.cross_prob = 0.9  # Reduced cross probability to focus on strong candidates\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.initial_population_size, dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.initial_population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        eval_count = 0\n        inertia_dampening = 0.975  # Slightly faster dampening for quicker focus\n        mutation_factor_change = (self.mutation_factor_init - 0.6) / self.budget  # Adjust mutation factor decay\n\n        while eval_count < self.budget:\n            population_size = self.initial_population_size - int(\n                (eval_count / self.budget) * (self.initial_population_size - self.final_population_size))\n\n            for i in range(population_size):\n                score = func(self.population[i])\n                eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n                if eval_count >= self.budget:\n                    break\n\n            r1 = np.random.rand(population_size, self.dim)\n            r2 = np.random.rand(population_size, self.dim)\n            cognitive_component = self.cognitive_coeff * r1 * (self.personal_best_positions[:population_size] - self.population[:population_size])\n            social_component = self.social_coeff * r2 * (self.global_best_position - self.population[:population_size])\n            self.velocities[:population_size] = (self.inertia_weight * self.velocities[:population_size]) + cognitive_component + social_component\n            self.population[:population_size] = self.population[:population_size] + self.velocities[:population_size]\n\n            self.population[:population_size] = np.clip(self.population[:population_size], self.lower_bound, self.upper_bound)\n\n            for i in range(population_size):\n                indices = np.random.choice(np.delete(np.arange(population_size), i), 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = a + (self.mutation_factor_init - mutation_factor_change * eval_count) * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cross_prob:\n                        trial[j] = mutant[j]\n\n                trial_score = func(trial)\n                eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.population[i] = trial\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial\n                if eval_count >= self.budget:\n                    break\n\n            self.inertia_weight *= inertia_dampening\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedHybridPSODE", "description": "EnhancedHybridPSODE with refined inertia adaptation and dynamic mutation for improved convergence efficiency.", "configspace": "", "generation": 17, "fitness": 0.2724714396292575, "feedback": "The algorithm EnhancedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.25.", "error": "", "parent_id": "bc77ccb6-50c7-4344-b386-3c2edeb7bb74", "metadata": {"aucs": [0.8729134738413982, 0.866583648961041, 0.8720736900215377, 0.1825272302641583, 0.18103552693061786, 0.18303252383512225, 0.8705659595978715, 0.8637848735036859, 0.869407910346619, 0.7223723966491105, 0.7429223610500653, 0.6473788851248236, 0.7451486628816777, 0.7375330652272705, 0.6462079381105159, 0.7570502546398648, 0.7512828646224987, 0.3171784276413444, 0.1673251402265925, 0.12174832806052838, 0.11954161109866546, 0.1366731231600541, 0.1381236040887992, 0.12204828065291262, 0.11266786795437589, 0.12141912231148744, 0.14876963915030283, 0.11082765723509669, 0.13501636263226902, 0.17129160428819923, 0.1224858414658182, 0.08434955196569605, 0.10639153418843161, 0.10207174087372584, 0.11224389515969646, 0.12101157437990373, 0.9812481568449444, 0.9812475213511365, 0.9862153220212252, 0.9861625899177503, 0.9851188273016003, 0.9770874342973137, 0.9863930370415728, 0.9812011757245394, 0.9805263925861187, 0.39152724454890464, 0.05899847022089777, 0.48398918780778866, 0.4712169963531324, 0.1494688460763549, 0.15049001480594748, 0.11903535930687936, 0.5764102291672334, 0.08698524665693208, 0.2310821236781948, 0.30373782054980836, 0.16855030894808554, 0.27515848365567586, 0.21473095006232856, 0.2048339561354695, 0.22907128035578694, 0.23991092676473014, 0.217710746805585, 0.13280424425385373, 0.24654381991149865, 0.18634915197591584, 0.14540581983986411, 0.12608180328882024, 0.16380077130882675, 0.19257244856074096, 0.2036700073390968, 0.14189292420431376, 0.21637578891734388, 0.10554405560227864, 0.14959031754908791, 0.13685209196537929, 0.1270484288329069, 0.1834318149041434, 0.13145327811323693, 0.13442211153182237, 0.11573361030413254, 0.010584279697551158, 9.999999999998899e-05, 0.07453208984714388, 0.0645512465552911, 0.001560281077875314, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029319299808099775, 0.035020557433988686, 0.047206181752169174, 0.07222734033074107, 0.002308755670902829, 0.009682387123443159, 0.05394680894716242, 0.044973752770109954, 0.06857167602223013, 0.04898875023612037, 0.03412913189776168, 0.2449847889612865, 0.2256981460337497, 0.381892277021614, 0.07485783194345152, 0.13055830190324103, 0.12141341298048702, 0.07411515910822997, 0.175843494300718, 0.05537939080692744, 0.218901362705061, 0.11692870035089487, 0.047676408758307254, 0.03766600140940668, 0.04810554728654226, 0.08235994431214655, 0.22354636130646255, 0.5610453628716836, 0.5569998531857234, 0.5505111876296434, 0.555184785173493, 0.1811572135141204, 0.608499423846008, 0.5895656554470069, 0.5016639650414718, 0.5644899928202748, 0.08454010785930022, 0.10127058333111216, 0.07359651283632085, 0.1242959189152616, 0.11563743529309867, 0.12360129687540666, 0.07839729716232346, 0.08201502358835622, 0.12833775432689687, 0.3285379544485223, 0.16743825219506603, 0.19423753055384518, 0.16553297029824576, 0.22337268299011326, 0.2704621559480672, 0.19786810162114588, 0.1937688338761745, 0.17009974223959357, 0.2741151395629522, 0.2718540429785604, 0.3228145400554999, 0.4420103384545322, 0.22635572089409028, 0.27250542612704165, 0.5243195127094002, 0.2926201456112467, 0.2080152083183735, 0.36701486774491154, 0.26525797173056, 0.21035846859963026, 0.30038882948600076, 0.21096838721678712, 0.269084988347714, 0.26009279272241015, 0.3147381185952077, 0.15018259462510364, 0.20797168120619958, 0.15742782764880614, 0.20380399020007867, 0.22173496530508996, 0.2436985076051823, 0.21492453516042553, 0.24275101756325224, 0.2147666769242622, 0.28700638998068084, 0.18267060259754742, 0.21757398090010072, 0.20338008431148513, 0.2043263315354047, 0.21152587690872082, 0.22136441547698282, 0.1972677975568191, 0.19115497918655633, 0.2131286143764134, 0.9042330526275412, 0.18617011096783065, 0.12404613239979245, 0.17651742372645474, 0.20031563350971737, 0.1985224601576444, 0.1305395124573886, 0.1695196821447229, 0.8944854124316323, 0.873716139107142, 0.15585917241294434, 0.20885548322864866, 0.5157214486468817, 0.3872441264968335, 0.31295964697451983, 0.21044719373054455, 0.21122193984504833, 0.731202422674885, 0.19054049219801672, 0.18014278815937046, 0.19262319081881418, 0.18156964462434044, 0.19774978015807987, 0.1781453553340192, 0.1977480061049297, 0.1912852182025182, 0.18716850590392076, 0.08935363408403407, 0.09383780973392408, 0.10047875982168242, 0.09227949836165084, 0.10243119660153388, 0.10480925999910906, 0.08642237705556566, 0.1002700177759227, 0.0853784914396134]}, "mutation_prompt": null}
{"id": "66fbf20a-6ca9-4f88-b1db-2b1728c27aeb", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30\n        self.final_population_size = 25  # More gradual population resizing\n        self.inertia_weight = 0.6  # Reduced inertia weight for faster convergence\n        self.cognitive_coeff = 1.7  # Slightly increased to enhance exploration\n        self.social_coeff = 1.4  # Slightly decreased for better balance\n        self.mutation_factor_init = 0.85  # Adjusted mutation factor\n        self.cross_prob = 0.95  # Increased cross probability for more aggressive trial acceptance\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.initial_population_size, dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.initial_population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        eval_count = 0\n        inertia_dampening = 0.98  # Slightly faster inertia dampening\n        mutation_factor_change = (self.mutation_factor_init - 0.5) / self.budget\n\n        while eval_count < self.budget:\n            population_size = self.initial_population_size - int(\n                (eval_count / self.budget) * (self.initial_population_size - self.final_population_size))\n\n            for i in range(population_size):\n                score = func(self.population[i])\n                eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n                if eval_count >= self.budget:\n                    break\n\n            r1 = np.random.rand(population_size, self.dim)\n            r2 = np.random.rand(population_size, self.dim)\n            cognitive_component = self.cognitive_coeff * r1 * (self.personal_best_positions[:population_size] - self.population[:population_size])\n            social_component = self.social_coeff * r2 * (self.global_best_position - self.population[:population_size])\n            self.velocities[:population_size] = (self.inertia_weight * self.velocities[:population_size]) + cognitive_component + social_component\n            self.population[:population_size] = self.population[:population_size] + self.velocities[:population_size]\n\n            self.population[:population_size] = np.clip(self.population[:population_size], self.lower_bound, self.upper_bound)\n\n            for i in range(population_size):\n                indices = np.random.choice(np.delete(np.arange(population_size), i), 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = a + (self.mutation_factor_init - mutation_factor_change * eval_count) * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cross_prob:\n                        trial[j] = mutant[j]\n\n                trial_score = func(trial)\n                eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.population[i] = trial\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial\n                if eval_count >= self.budget:\n                    break\n\n            self.inertia_weight *= inertia_dampening\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedHybridPSODE", "description": "EnhancedHybridPSODE with strategic parameter tuning and convergence acceleration for improved solution discovery.", "configspace": "", "generation": 9, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bc77ccb6-50c7-4344-b386-3c2edeb7bb74", "metadata": {"aucs": [0.8790086340197295, 0.8594809718503991, 0.8714262695213816, 0.8716207678780874, 0.8148118753439718, 0.8861515777171897, 0.8837698586196663, 0.8642760586676631, 0.8875415051650409, 0.17615915760563494, 0.040666035401233924, 0.7659295256535265, 0.7823578748417368, 0.5914234958185203, 0.7737192496914153, 0.09191439566829707, 0.7807869480152533, 0.7210407329277733, 0.7590331568653765, 0.11314459675360233, 0.1407305539432988, 0.13631009901996916, 0.17845428088125936, 0.1267983471526002, 0.11386342865106003, 0.7676500932417867, 0.7356018349826263, 0.09414670979277939, 0.10193276386032069, 0.11305088395546858, 0.09035188810275085, 0.11106680270323754, 0.07999216304702972, 0.13030784844424492, 0.1090903000904827, 0.10358403771667746, 0.9812208644686673, 0.990148163785257, 0.986321950263512, 0.9743452358825869, 0.9818659685636542, 0.9748072437211964, 0.98661971764974, 0.9812156557752502, 0.9740022926488223, 0.6833852700092474, 0.05942439096003904, 0.4465217175737798, 0.1514783845395712, 0.15123678199973534, 0.5170565092662427, 0.08814293903164183, 0.08876749261175287, 0.08747262658556376, 0.845701053771103, 0.22080061120268113, 0.2221265392974867, 0.1951747597340192, 0.1873530869107406, 0.21150550975519744, 0.7824621767610765, 0.2369892543861204, 0.22985526164499193, 0.1480386817577546, 0.1770782741373862, 0.18761944281912457, 0.13221331799248015, 0.15624693520631971, 0.166306497598123, 0.176788284570921, 0.18538267855681922, 0.168125587221999, 0.22545986869821455, 0.01691749011125654, 0.16766231711449908, 0.16335467370892842, 0.17787696690836274, 0.18453451111061947, 0.20021626088724775, 0.14917080393166593, 0.10231439881330207, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04227577453509179, 9.999999999998899e-05, 0.015463406937756163, 9.999999999998899e-05, 9.999999999998899e-05, 0.007912297409857327, 0.05474190849592975, 0.0347173953392379, 0.06333406881715675, 0.08871671805517234, 9.999999999998899e-05, 0.03861299327396939, 0.08687706815471752, 0.054730514896239923, 0.0950761773747294, 0.04775251971242633, 0.039690469816313634, 0.05801034121549731, 0.07899798940116598, 0.12123208331162583, 0.07751605849919285, 0.10272287603858754, 0.1667072975290561, 0.08097680103844229, 0.21386019817923785, 0.29479961095671137, 0.12545230467112922, 0.1014620627460765, 0.18605330707971834, 0.0811152816510583, 0.04888538530107778, 0.16911168435320667, 0.08200525644254175, 0.5789713400219295, 0.5043819370195604, 0.5705854377131928, 0.6163712517873601, 0.1816223944309462, 0.4651433234149117, 0.5980790126143987, 0.541162923293524, 0.5641267812012832, 0.09878025836774917, 0.09868763046288298, 0.07579817115720011, 0.1370973715510745, 0.11095610730595085, 0.1089961420522001, 0.0772660606942116, 0.0907145769773724, 0.09370847262624771, 0.16405289293500191, 0.2887828416758609, 0.19000827183424995, 0.24056496988958453, 0.39234844462579455, 0.31893961924211134, 0.3395656710000532, 0.18397597950738231, 0.1905479658229332, 0.4031565466702731, 0.33260677792399607, 0.43983189821281454, 0.36254220485256616, 0.615311087137856, 0.4226488410038012, 0.5149162942423011, 0.6435465997550542, 0.5975442376758364, 0.17652395519029507, 0.33385298819738696, 0.26706626250844223, 0.15110845801174178, 0.19033927360902692, 0.29297880793709596, 0.32074966798170135, 0.2786212190051407, 0.26592013582011964, 0.20626387691568626, 0.23533300364269227, 0.21960140332542588, 0.2166261284030666, 0.21925626195719738, 0.19723829545081528, 0.239014051222031, 0.22764164621031946, 0.2065795991169087, 0.20809659194959107, 0.18777939130854893, 0.18809690808592905, 0.20055815767971685, 0.24841047782516412, 0.2154025357234416, 0.20900733796249704, 0.24370747974556117, 0.1988601853636287, 0.16528498454319784, 0.1664887652897813, 0.1529090081731017, 0.8941348821818921, 0.20070456927090463, 0.19854116635388375, 0.11323241925174188, 0.16872427211354857, 0.8866933534022886, 0.5752327821528157, 0.15641477929591274, 0.20921159029213, 0.4599269982906907, 0.22210038428329704, 0.610196133677235, 0.2118384614919675, 0.10507112973519561, 0.7060655692943145, 0.18783309517007818, 0.19180891923347498, 0.2060947082681177, 0.18466423013486566, 0.22624582819961336, 0.18989499923664865, 0.1742474071569774, 0.1691272711386469, 0.19322196335618247, 0.10818493538237195, 0.09510691300887442, 0.10941114447661404, 0.08886654951766637, 0.09665151145532214, 0.09813607733786744, 0.10580537301912951, 0.08833639634802604, 0.10554517047363443]}, "mutation_prompt": null}
{"id": "d38918da-54f0-4db8-8c77-282164de9c99", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30\n        self.final_population_size = 25  # More gradual population resizing\n        self.inertia_weight = 0.6  # Reduced inertia weight for faster convergence\n        self.cognitive_coeff = 1.7  # Slightly increased to enhance exploration\n        self.social_coeff = 1.4  # Slightly decreased for better balance\n        self.mutation_factor_init = 0.85  # Adjusted mutation factor\n        self.cross_prob = 0.95  # Increased cross probability for more aggressive trial acceptance\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.initial_population_size, dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.initial_population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        eval_count = 0\n        inertia_dampening = 0.98  # Slightly faster inertia dampening\n        mutation_factor_change = (self.mutation_factor_init - 0.5) / self.budget\n\n        while eval_count < self.budget:\n            population_size = self.initial_population_size - int(\n                (eval_count / self.budget) * (self.initial_population_size - self.final_population_size))\n\n            for i in range(population_size):\n                score = func(self.population[i])\n                eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n                if eval_count >= self.budget:\n                    break\n\n            r1 = np.random.rand(population_size, self.dim)\n            r2 = np.random.rand(population_size, self.dim)\n            cognitive_component = self.cognitive_coeff * r1 * (self.personal_best_positions[:population_size] - self.population[:population_size])\n            social_component = self.social_coeff * r2 * (self.global_best_position - self.population[:population_size])\n            self.velocities[:population_size] = (self.inertia_weight * self.velocities[:population_size]) + cognitive_component + social_component\n            self.population[:population_size] = self.population[:population_size] + self.velocities[:population_size]\n\n            self.population[:population_size] = np.clip(self.population[:population_size], self.lower_bound, self.upper_bound)\n\n            for i in range(population_size):\n                indices = np.random.choice(np.delete(np.arange(population_size), i), 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = a + (self.mutation_factor_init - mutation_factor_change * eval_count) * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cross_prob:\n                        trial[j] = mutant[j]\n\n                trial_score = func(trial)\n                eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.population[i] = trial\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial\n                if eval_count >= self.budget:\n                    break\n\n            self.inertia_weight *= inertia_dampening\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedHybridPSODE", "description": "EnhancedHybridPSODE with strategic parameter tuning and convergence acceleration for improved solution discovery.", "configspace": "", "generation": 9, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bc77ccb6-50c7-4344-b386-3c2edeb7bb74", "metadata": {"aucs": [0.8790086340197295, 0.8594809718503991, 0.8714262695213816, 0.8716207678780874, 0.8148118753439718, 0.8861515777171897, 0.8837698586196663, 0.8642760586676631, 0.8875415051650409, 0.17615915760563494, 0.040666035401233924, 0.7659295256535265, 0.7823578748417368, 0.5914234958185203, 0.7737192496914153, 0.09191439566829707, 0.7807869480152533, 0.7210407329277733, 0.7590331568653765, 0.11314459675360233, 0.1407305539432988, 0.13631009901996916, 0.17845428088125936, 0.1267983471526002, 0.11386342865106003, 0.7676500932417867, 0.7356018349826263, 0.09414670979277939, 0.10193276386032069, 0.11305088395546858, 0.09035188810275085, 0.11106680270323754, 0.07999216304702972, 0.13030784844424492, 0.1090903000904827, 0.10358403771667746, 0.9812208644686673, 0.990148163785257, 0.986321950263512, 0.9743452358825869, 0.9818659685636542, 0.9748072437211964, 0.98661971764974, 0.9812156557752502, 0.9740022926488223, 0.6833852700092474, 0.05942439096003904, 0.4465217175737798, 0.1514783845395712, 0.15123678199973534, 0.5170565092662427, 0.08814293903164183, 0.08876749261175287, 0.08747262658556376, 0.845701053771103, 0.22080061120268113, 0.2221265392974867, 0.1951747597340192, 0.1873530869107406, 0.21150550975519744, 0.7824621767610765, 0.2369892543861204, 0.22985526164499193, 0.1480386817577546, 0.1770782741373862, 0.18761944281912457, 0.13221331799248015, 0.15624693520631971, 0.166306497598123, 0.176788284570921, 0.18538267855681922, 0.168125587221999, 0.22545986869821455, 0.01691749011125654, 0.16766231711449908, 0.16335467370892842, 0.17787696690836274, 0.18453451111061947, 0.20021626088724775, 0.14917080393166593, 0.10231439881330207, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04227577453509179, 9.999999999998899e-05, 0.015463406937756163, 9.999999999998899e-05, 9.999999999998899e-05, 0.007912297409857327, 0.05474190849592975, 0.0347173953392379, 0.06333406881715675, 0.08871671805517234, 9.999999999998899e-05, 0.03861299327396939, 0.08687706815471752, 0.054730514896239923, 0.0950761773747294, 0.04775251971242633, 0.039690469816313634, 0.05801034121549731, 0.07899798940116598, 0.12123208331162583, 0.07751605849919285, 0.10272287603858754, 0.1667072975290561, 0.08097680103844229, 0.21386019817923785, 0.29479961095671137, 0.12545230467112922, 0.1014620627460765, 0.18605330707971834, 0.0811152816510583, 0.04888538530107778, 0.16911168435320667, 0.08200525644254175, 0.5789713400219295, 0.5043819370195604, 0.5705854377131928, 0.6163712517873601, 0.1816223944309462, 0.4651433234149117, 0.5980790126143987, 0.541162923293524, 0.5641267812012832, 0.09878025836774917, 0.09868763046288298, 0.07579817115720011, 0.1370973715510745, 0.11095610730595085, 0.1089961420522001, 0.0772660606942116, 0.0907145769773724, 0.09370847262624771, 0.16405289293500191, 0.2887828416758609, 0.19000827183424995, 0.24056496988958453, 0.39234844462579455, 0.31893961924211134, 0.3395656710000532, 0.18397597950738231, 0.1905479658229332, 0.4031565466702731, 0.33260677792399607, 0.43983189821281454, 0.36254220485256616, 0.615311087137856, 0.4226488410038012, 0.5149162942423011, 0.6435465997550542, 0.5975442376758364, 0.17652395519029507, 0.33385298819738696, 0.26706626250844223, 0.15110845801174178, 0.19033927360902692, 0.29297880793709596, 0.32074966798170135, 0.2786212190051407, 0.26592013582011964, 0.20626387691568626, 0.23533300364269227, 0.21960140332542588, 0.2166261284030666, 0.21925626195719738, 0.19723829545081528, 0.239014051222031, 0.22764164621031946, 0.2065795991169087, 0.20809659194959107, 0.18777939130854893, 0.18809690808592905, 0.20055815767971685, 0.24841047782516412, 0.2154025357234416, 0.20900733796249704, 0.24370747974556117, 0.1988601853636287, 0.16528498454319784, 0.1664887652897813, 0.1529090081731017, 0.8941348821818921, 0.20070456927090463, 0.19854116635388375, 0.11323241925174188, 0.16872427211354857, 0.8866933534022886, 0.5752327821528157, 0.15641477929591274, 0.20921159029213, 0.4599269982906907, 0.22210038428329704, 0.610196133677235, 0.2118384614919675, 0.10507112973519561, 0.7060655692943145, 0.18783309517007818, 0.19180891923347498, 0.2060947082681177, 0.18466423013486566, 0.22624582819961336, 0.18989499923664865, 0.1742474071569774, 0.1691272711386469, 0.19322196335618247, 0.10818493538237195, 0.09510691300887442, 0.10941114447661404, 0.08886654951766637, 0.09665151145532214, 0.09813607733786744, 0.10580537301912951, 0.08833639634802604, 0.10554517047363443]}, "mutation_prompt": null}
{"id": "7936b653-2587-40c3-a652-24555cdfec7d", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30\n        self.final_population_size = 25  # More gradual population resizing\n        self.inertia_weight = 0.6  # Reduced inertia weight for faster convergence\n        self.cognitive_coeff = 1.7  # Slightly increased to enhance exploration\n        self.social_coeff = 1.4  # Slightly decreased for better balance\n        self.mutation_factor_init = 0.85  # Adjusted mutation factor\n        self.cross_prob = 0.95  # Increased cross probability for more aggressive trial acceptance\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.initial_population_size, dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.initial_population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        eval_count = 0\n        inertia_dampening = 0.98  # Slightly faster inertia dampening\n        mutation_factor_change = (self.mutation_factor_init - 0.5) / self.budget\n\n        while eval_count < self.budget:\n            population_size = self.initial_population_size - int(\n                (eval_count / self.budget) * (self.initial_population_size - self.final_population_size))\n\n            for i in range(population_size):\n                score = func(self.population[i])\n                eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n                if eval_count >= self.budget:\n                    break\n\n            r1 = np.random.rand(population_size, self.dim)\n            r2 = np.random.rand(population_size, self.dim)\n            cognitive_component = self.cognitive_coeff * r1 * (self.personal_best_positions[:population_size] - self.population[:population_size])\n            social_component = self.social_coeff * r2 * (self.global_best_position - self.population[:population_size])\n            self.velocities[:population_size] = (self.inertia_weight * self.velocities[:population_size]) + cognitive_component + social_component\n            self.population[:population_size] = self.population[:population_size] + self.velocities[:population_size]\n\n            self.population[:population_size] = np.clip(self.population[:population_size], self.lower_bound, self.upper_bound)\n\n            for i in range(population_size):\n                indices = np.random.choice(np.delete(np.arange(population_size), i), 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = a + (self.mutation_factor_init - mutation_factor_change * eval_count) * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cross_prob:\n                        trial[j] = mutant[j]\n\n                trial_score = func(trial)\n                eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.population[i] = trial\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial\n                if eval_count >= self.budget:\n                    break\n\n            self.inertia_weight *= inertia_dampening\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedHybridPSODE", "description": "EnhancedHybridPSODE with strategic parameter tuning and convergence acceleration for improved solution discovery.", "configspace": "", "generation": 9, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bc77ccb6-50c7-4344-b386-3c2edeb7bb74", "metadata": {"aucs": [0.8790086340197295, 0.8594809718503991, 0.8714262695213816, 0.8716207678780874, 0.8148118753439718, 0.8861515777171897, 0.8837698586196663, 0.8642760586676631, 0.8875415051650409, 0.17615915760563494, 0.040666035401233924, 0.7659295256535265, 0.7823578748417368, 0.5914234958185203, 0.7737192496914153, 0.09191439566829707, 0.7807869480152533, 0.7210407329277733, 0.7590331568653765, 0.11314459675360233, 0.1407305539432988, 0.13631009901996916, 0.17845428088125936, 0.1267983471526002, 0.11386342865106003, 0.7676500932417867, 0.7356018349826263, 0.09414670979277939, 0.10193276386032069, 0.11305088395546858, 0.09035188810275085, 0.11106680270323754, 0.07999216304702972, 0.13030784844424492, 0.1090903000904827, 0.10358403771667746, 0.9812208644686673, 0.990148163785257, 0.986321950263512, 0.9743452358825869, 0.9818659685636542, 0.9748072437211964, 0.98661971764974, 0.9812156557752502, 0.9740022926488223, 0.6833852700092474, 0.05942439096003904, 0.4465217175737798, 0.1514783845395712, 0.15123678199973534, 0.5170565092662427, 0.08814293903164183, 0.08876749261175287, 0.08747262658556376, 0.845701053771103, 0.22080061120268113, 0.2221265392974867, 0.1951747597340192, 0.1873530869107406, 0.21150550975519744, 0.7824621767610765, 0.2369892543861204, 0.22985526164499193, 0.1480386817577546, 0.1770782741373862, 0.18761944281912457, 0.13221331799248015, 0.15624693520631971, 0.166306497598123, 0.176788284570921, 0.18538267855681922, 0.168125587221999, 0.22545986869821455, 0.01691749011125654, 0.16766231711449908, 0.16335467370892842, 0.17787696690836274, 0.18453451111061947, 0.20021626088724775, 0.14917080393166593, 0.10231439881330207, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04227577453509179, 9.999999999998899e-05, 0.015463406937756163, 9.999999999998899e-05, 9.999999999998899e-05, 0.007912297409857327, 0.05474190849592975, 0.0347173953392379, 0.06333406881715675, 0.08871671805517234, 9.999999999998899e-05, 0.03861299327396939, 0.08687706815471752, 0.054730514896239923, 0.0950761773747294, 0.04775251971242633, 0.039690469816313634, 0.05801034121549731, 0.07899798940116598, 0.12123208331162583, 0.07751605849919285, 0.10272287603858754, 0.1667072975290561, 0.08097680103844229, 0.21386019817923785, 0.29479961095671137, 0.12545230467112922, 0.1014620627460765, 0.18605330707971834, 0.0811152816510583, 0.04888538530107778, 0.16911168435320667, 0.08200525644254175, 0.5789713400219295, 0.5043819370195604, 0.5705854377131928, 0.6163712517873601, 0.1816223944309462, 0.4651433234149117, 0.5980790126143987, 0.541162923293524, 0.5641267812012832, 0.09878025836774917, 0.09868763046288298, 0.07579817115720011, 0.1370973715510745, 0.11095610730595085, 0.1089961420522001, 0.0772660606942116, 0.0907145769773724, 0.09370847262624771, 0.16405289293500191, 0.2887828416758609, 0.19000827183424995, 0.24056496988958453, 0.39234844462579455, 0.31893961924211134, 0.3395656710000532, 0.18397597950738231, 0.1905479658229332, 0.4031565466702731, 0.33260677792399607, 0.43983189821281454, 0.36254220485256616, 0.615311087137856, 0.4226488410038012, 0.5149162942423011, 0.6435465997550542, 0.5975442376758364, 0.17652395519029507, 0.33385298819738696, 0.26706626250844223, 0.15110845801174178, 0.19033927360902692, 0.29297880793709596, 0.32074966798170135, 0.2786212190051407, 0.26592013582011964, 0.20626387691568626, 0.23533300364269227, 0.21960140332542588, 0.2166261284030666, 0.21925626195719738, 0.19723829545081528, 0.239014051222031, 0.22764164621031946, 0.2065795991169087, 0.20809659194959107, 0.18777939130854893, 0.18809690808592905, 0.20055815767971685, 0.24841047782516412, 0.2154025357234416, 0.20900733796249704, 0.24370747974556117, 0.1988601853636287, 0.16528498454319784, 0.1664887652897813, 0.1529090081731017, 0.8941348821818921, 0.20070456927090463, 0.19854116635388375, 0.11323241925174188, 0.16872427211354857, 0.8866933534022886, 0.5752327821528157, 0.15641477929591274, 0.20921159029213, 0.4599269982906907, 0.22210038428329704, 0.610196133677235, 0.2118384614919675, 0.10507112973519561, 0.7060655692943145, 0.18783309517007818, 0.19180891923347498, 0.2060947082681177, 0.18466423013486566, 0.22624582819961336, 0.18989499923664865, 0.1742474071569774, 0.1691272711386469, 0.19322196335618247, 0.10818493538237195, 0.09510691300887442, 0.10941114447661404, 0.08886654951766637, 0.09665151145532214, 0.09813607733786744, 0.10580537301912951, 0.08833639634802604, 0.10554517047363443]}, "mutation_prompt": null}
{"id": "822e3b21-b320-4638-9718-3ab8d1074dfd", "solution": "import numpy as np\n\nclass RefinedEnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30\n        self.final_population_size = 25\n        self.inertia_weight = 0.5  # Further reduced inertia weight for faster convergence\n        self.cognitive_coeff = 1.8  # Enhanced exploration through slightly increased cognitive coefficient\n        self.social_coeff = 1.5  # Enhanced social component for better collective behavior\n        self.mutation_factor_init = 0.9  # Increased mutation factor for variability\n        self.cross_prob = 0.93  # Adjusted cross probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.initial_population_size, dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.initial_population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        eval_count = 0\n        inertia_dampening = 0.99  # Increased inertia dampening for smoother convergence\n        mutation_factor_change = (self.mutation_factor_init - 0.55) / self.budget\n\n        while eval_count < self.budget:\n            population_size = self.initial_population_size - int(\n                (eval_count / self.budget) * (self.initial_population_size - self.final_population_size))\n\n            for i in range(population_size):\n                score = func(self.population[i])\n                eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n                if eval_count >= self.budget:\n                    break\n\n            r1 = np.random.rand(population_size, self.dim)\n            r2 = np.random.rand(population_size, self.dim)\n            cognitive_component = self.cognitive_coeff * r1 * (self.personal_best_positions[:population_size] - self.population[:population_size])\n            social_component = self.social_coeff * r2 * (self.global_best_position - self.population[:population_size])\n            self.velocities[:population_size] = (self.inertia_weight * self.velocities[:population_size]) + cognitive_component + social_component\n            self.population[:population_size] = self.population[:population_size] + self.velocities[:population_size]\n\n            self.population[:population_size] = np.clip(self.population[:population_size], self.lower_bound, self.upper_bound)\n\n            for i in range(population_size):\n                indices = np.random.choice(np.delete(np.arange(population_size), i), 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = a + (self.mutation_factor_init - mutation_factor_change * eval_count) * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cross_prob:\n                        trial[j] = mutant[j]\n\n                trial_score = func(trial)\n                eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.population[i] = trial\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial\n                if eval_count >= self.budget:\n                    break\n\n            self.inertia_weight *= inertia_dampening\n\n        return self.global_best_position, self.global_best_score", "name": "RefinedEnhancedHybridPSODE", "description": "RefinedEnhancedHybridPSODE with adaptive parameter adjustment and multi-strategy selection for improved convergence.", "configspace": "", "generation": 21, "fitness": 0.28609145594593005, "feedback": "The algorithm RefinedEnhancedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.27.", "error": "", "parent_id": "bc77ccb6-50c7-4344-b386-3c2edeb7bb74", "metadata": {"aucs": [0.8768738621039038, 0.8714572677988071, 0.867718601554218, 0.7906278328003592, 0.8598026760142902, 0.8775309747299402, 0.8747454900099724, 0.8833790696049764, 0.8622319492365011, 0.7248309218058004, 0.7206214626325981, 0.52689393332331, 0.7688215847255171, 0.7352681209771357, 0.0636907717405637, 0.7590655528045825, 0.7546655366557624, 0.765180058706328, 0.17283940155622335, 0.15707766138807588, 0.15243065902610997, 0.15212342265075862, 0.14380479994996842, 0.1693429318542259, 0.1399425569586007, 0.16790331627203636, 0.14013651880637623, 0.09669634846855679, 0.1097117216036424, 0.1539029018667878, 0.11995209042013921, 0.10626860388913106, 0.13997408557726554, 0.1180477800769546, 0.13255683778855032, 0.13833764062466902, 0.9810386427181261, 0.981228613876274, 0.9868155435727832, 0.9861707504435738, 0.9851620243214589, 0.9699104052228655, 0.9893711454110816, 0.981004674708686, 0.9805265341343777, 0.059843602661177275, 0.059437791727988576, 0.06001746109015893, 0.7605655469173601, 0.1508977852289034, 0.15007517496858125, 0.08705306911152855, 0.7468526625540014, 0.08802689819510501, 0.22769176315093642, 0.33220124356066505, 0.22614845499583447, 0.2130826233268459, 0.18922662952791502, 0.19029833018921893, 0.33550224285462116, 0.12609098877007563, 0.23883727461733684, 0.10650553560217613, 0.17990825877360295, 0.1854231100758047, 0.17747910092646602, 0.18820378898854073, 0.16295099799339186, 0.17299703431989222, 0.20165929167365015, 0.16666452647578212, 0.12997120115832383, 0.19438983107811214, 0.19957366140056043, 0.19349358488107005, 0.19550036163122042, 0.19390166364029637, 0.22874234234144186, 0.033564044457750075, 0.21603473393644634, 0.0009998334203082937, 0.0016055168529440778, 0.035387329038339854, 0.04519139450101428, 9.999999999998899e-05, 0.015581646642826685, 0.03634958587162418, 9.999999999998899e-05, 9.999999999998899e-05, 0.06814427992809358, 0.04147025109064584, 0.06677064572294389, 0.058167782026388726, 0.0072067009302302365, 0.058203629208839036, 0.059023289488561725, 0.08185039212340472, 0.07046683875166915, 0.05320915738998688, 0.23105865010664384, 0.06647282851005798, 0.15721029332033265, 0.13068390251834394, 0.07802707096822437, 0.14779712321022231, 0.1839244108317306, 0.08432631216407205, 0.09321473285252235, 0.042393080477429845, 0.011094028957478574, 0.08790267915097105, 0.07160328524414072, 0.1563642918389755, 0.060829500529656966, 0.0814389058887135, 0.22403697121519117, 0.5426833882720435, 0.5408254113631371, 0.5254436289647318, 0.5786698426278597, 0.5855861178947745, 0.20855212139289914, 0.5918946684626509, 0.5352028368800026, 0.5652489988674573, 0.08977872472433535, 0.10501085155939949, 0.08106939363357957, 0.1192871649617111, 0.1229217621752805, 0.11255126542732974, 0.14625097264000597, 0.11277498997986424, 0.09499935900107759, 0.16772878226465093, 0.19708273913012564, 0.2246492096808661, 0.2669117906923253, 0.28281222011463647, 0.20374635747319547, 0.40608420365553577, 0.3253401118482633, 0.21712220890266898, 0.2185890795594967, 0.3065598698897869, 0.29796512608256376, 0.4052570606131941, 0.2114591751128605, 0.39661343791300596, 0.517842060502103, 0.4485760827426739, 0.4206475194713928, 0.41196621047885773, 0.29020570304303606, 0.24737809051606152, 0.24568665485132868, 0.30578203376112245, 0.24965596499787324, 0.373785746953049, 0.28021669914424463, 0.2932849973903128, 0.2140969869735836, 0.15077602744654395, 0.26601683266735077, 0.18952212205322772, 0.2519797237505431, 0.21023167396136544, 0.21533683920287772, 0.20075072391808302, 0.19486125560242817, 0.19080862082011296, 0.19774906960423155, 0.24698877569538358, 0.22775724514421614, 0.2443872355091865, 0.1863350709930507, 0.18203391365416077, 0.24606870453479301, 0.19792587085738245, 0.16573481435356552, 0.18601293121504892, 0.1536059018684387, 0.9025333388686281, 0.20147212630536793, 0.198191979931033, 0.09945446882995079, 0.17011687584035184, 0.8992105396628137, 0.7046109294332129, 0.21152400512383096, 0.20941631221854717, 0.6971708404578143, 0.22050640776436425, 0.5167527128843462, 0.10391257411236443, 0.20818063574328383, 0.748361647126685, 0.1716380695847589, 0.18146966682542176, 0.19989401994693, 0.19860028746164016, 0.16598080929706305, 0.20174078335351353, 0.19005093989249655, 0.20858029629623331, 0.20544421636763566, 0.11575248977522312, 0.09443139313193893, 0.09858110974153, 0.08929693019740093, 0.1043184729736889, 0.08584336586825814, 0.10682948350629373, 0.08796801247309938, 0.09443553389904269]}, "mutation_prompt": null}
{"id": "c5937561-5879-417a-a498-fa465a7b6c01", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 28  # Slightly reduced initial population size for quicker convergence\n        self.final_population_size = 22  # Adjusted final population size for consistent improvement\n        self.inertia_weight = 0.55  # Further reduced inertia weight to speed up convergence\n        self.cognitive_coeff = 1.8  # Increased for enhanced exploration\n        self.social_coeff = 1.5  # Slightly increased for better global exploration\n        self.mutation_factor_init = 0.83  # Fine-tuned mutation factor for better diversity\n        self.cross_prob = 0.92  # Slightly reduced cross probability for more controlled exploration\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.initial_population_size, dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.initial_population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        eval_count = 0\n        inertia_dampening = 0.975  # Modified to balance exploration and exploitation\n        mutation_factor_change = (self.mutation_factor_init - 0.5) / self.budget\n\n        while eval_count < self.budget:\n            population_size = self.initial_population_size - int(\n                (eval_count / self.budget) * (self.initial_population_size - self.final_population_size))\n\n            for i in range(population_size):\n                score = func(self.population[i])\n                eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n                if eval_count >= self.budget:\n                    break\n\n            r1 = np.random.rand(population_size, self.dim)\n            r2 = np.random.rand(population_size, self.dim)\n            cognitive_component = self.cognitive_coeff * r1 * (self.personal_best_positions[:population_size] - self.population[:population_size])\n            social_component = self.social_coeff * r2 * (self.global_best_position - self.population[:population_size])\n            self.velocities[:population_size] = (self.inertia_weight * self.velocities[:population_size]) + cognitive_component + social_component\n            self.population[:population_size] = self.population[:population_size] + self.velocities[:population_size]\n\n            self.population[:population_size] = np.clip(self.population[:population_size], self.lower_bound, self.upper_bound)\n\n            for i in range(population_size):\n                indices = np.random.choice(np.delete(np.arange(population_size), i), 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = a + (self.mutation_factor_init - mutation_factor_change * eval_count) * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cross_prob:\n                        trial[j] = mutant[j]\n\n                trial_score = func(trial)\n                eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.population[i] = trial\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial\n                if eval_count >= self.budget:\n                    break\n\n            self.inertia_weight *= inertia_dampening\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedHybridPSODE", "description": "EnhancedHybridPSODE with fine-tuned parameter adjustments for improved convergence and solution precision.", "configspace": "", "generation": 22, "fitness": 0.28266698178730604, "feedback": "The algorithm EnhancedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.27.", "error": "", "parent_id": "bc77ccb6-50c7-4344-b386-3c2edeb7bb74", "metadata": {"aucs": [0.8838654722694922, 0.899690157109474, 0.8787963122758102, 0.8972666280622976, 0.8971456709889598, 0.19083423309661451, 0.8989869921135221, 0.8899441337552686, 0.8973932708436703, 0.8190047936378605, 0.06560360897681405, 0.7612196115180967, 0.8139936687294539, 0.5802690227871028, 0.6916276374552836, 0.8108787620612994, 0.7859608072984846, 0.8020956679091138, 0.15504607107497448, 0.18229619190141577, 0.1215219631769292, 0.8078004978432127, 0.1533525297999917, 0.1449997831783919, 0.159333356547945, 0.11341397945331522, 0.10090632428979518, 0.13104861321136319, 0.10938275357601157, 0.09610746831103367, 0.1395019858833042, 0.1367439236086604, 0.09511089955933716, 0.15721170054243472, 0.10859059323076348, 0.1378495835302328, 0.9815516820682574, 0.9916745680448672, 0.9850717579382422, 0.9669281273220046, 0.982433738346367, 0.9778367321725653, 0.9826546021999829, 0.9820688703548354, 0.9820314303276674, 0.6761259120243925, 0.24010940456820695, 0.4543121812263201, 0.5684435781399666, 0.15107559102716783, 0.1503652580178938, 0.5776824144990141, 0.6722739178528642, 0.08395023536122004, 0.225716214400285, 0.22078514695353157, 0.15096725224382024, 0.19327844262973537, 0.2104064641541894, 0.27206015184007015, 0.23298445955754232, 0.3744392178453534, 0.3593015273631266, 0.17939890982358242, 0.12536794055336287, 0.17095138505601848, 0.1284518178988434, 0.11937014959540049, 0.13013667713620436, 0.1692618888758658, 0.16039142109624083, 0.17405985144566372, 0.12587241668757665, 0.0530367663480632, 0.14275610265250538, 0.3096859435652076, 0.20731092526986317, 0.1840923378457131, 9.999999999998899e-05, 0.1342330105462496, 0.10995785204199271, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0009882338973656868, 9.999999999998899e-05, 0.08734829681488754, 9.999999999998899e-05, 0.06462221611072638, 0.10522203871224045, 0.03523863391362869, 0.11101285970860686, 0.04938400070243787, 0.025523157890168457, 0.02893826290810375, 0.2545606407338582, 0.05692437259269045, 0.0428636603097039, 0.14798688831954765, 0.027275319289466804, 0.06966683946241414, 0.09500059498698266, 0.0788788679153084, 0.14146171755831105, 0.09977152679412049, 0.10061326766288003, 0.07444907044746829, 0.14510413153679014, 0.17377969088801914, 0.11270062386068735, 0.04792020127895069, 0.006365623618945548, 0.04306627116260875, 0.13633474192763062, 0.08258156900319369, 0.2400901155222902, 0.5892829601699833, 0.5503920938281255, 0.5254997021931156, 0.5683281849118358, 0.6627680961902211, 0.6050592998190945, 0.5591746489206135, 0.5854861846165154, 0.5606404761516091, 0.15350331624241476, 0.0659009203093679, 0.057771735030220595, 0.11375553930800364, 0.08984563006487456, 0.15818528571132462, 0.06883626218404315, 0.11724093822664672, 0.17836248485592565, 0.2834261353528422, 0.30736929306426597, 0.18989747513967914, 0.24656445240761016, 0.2595632233086482, 0.40164500831093175, 0.23439958663779858, 0.18612018143029707, 0.21258773363886407, 0.3194014333605867, 0.39552154387478966, 0.33263287247822204, 0.34531210699449655, 0.24972262393290579, 0.3792247709496349, 0.37050907771160224, 0.3378669918827166, 0.47989167070438143, 0.2321166053328758, 0.19366385391936125, 0.20102436429514725, 0.14005273308704402, 0.23365537603428788, 0.26002107223830995, 0.3297895571489192, 0.26946788460569426, 0.22579868259805513, 0.20433174952931965, 0.16279465220214662, 0.19422704750530229, 0.19640700313372694, 0.18743610795453158, 0.21765971106356052, 0.23146005857004082, 0.21086743469732294, 0.2507396069129594, 0.1796265075135991, 0.21984698591135543, 0.24907371052346083, 0.209020933350889, 0.2223241875808395, 0.2034171070089581, 0.8083698807473789, 0.1851535359575751, 0.22517117080741045, 0.10448064008455438, 0.16955087819733838, 0.15354467911481584, 0.16786184647577407, 0.20070660107733207, 0.2000537295406657, 0.09969446584826314, 0.16926126376686534, 0.9072343738192199, 0.4737136237043803, 0.15694359737461805, 0.11233437054581996, 0.20697758867638416, 0.16755796865489936, 0.21057917928474923, 0.10514557971910365, 0.10436429253735313, 0.10346125457757538, 0.1928720128350263, 0.21385925560176267, 0.19262277278990836, 0.1933144991216763, 0.19749727228593883, 0.1857848635823025, 0.19435743450390675, 0.1996046819549654, 0.18729198923704782, 0.10410446849764632, 0.07940041350850402, 0.10411337135373178, 0.07660064554163859, 0.10082046206454143, 0.09230296767352375, 0.08757117306054008, 0.09093236620336398, 0.09231164304248107]}, "mutation_prompt": null}
{"id": "a39f399d-4b63-46a1-81a6-c99686714aa4", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30\n        self.final_population_size = 24  # Slightly decreased final population size\n        self.inertia_weight = 0.55  # Further reduced inertia weight for faster convergence\n        self.cognitive_coeff = 1.8  # Increased cognitive coefficient to enhance exploration\n        self.social_coeff = 1.3  # Further decreased social coefficient for better balance\n        self.mutation_factor_init = 0.9  # Increased mutation factor for more aggressive search\n        self.cross_prob = 0.9  # Reduced cross probability to maintain diversity\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.initial_population_size, dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.initial_population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        eval_count = 0\n        inertia_dampening = 0.97  # More aggressive inertia dampening\n        mutation_factor_reduction = (self.mutation_factor_init - 0.4) / self.budget\n\n        while eval_count < self.budget:\n            population_size = self.initial_population_size - int(\n                (eval_count / self.budget) * (self.initial_population_size - self.final_population_size))\n\n            for i in range(population_size):\n                score = func(self.population[i])\n                eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n                if eval_count >= self.budget:\n                    break\n\n            r1 = np.random.rand(population_size, self.dim)\n            r2 = np.random.rand(population_size, self.dim)\n            cognitive_component = self.cognitive_coeff * r1 * (self.personal_best_positions[:population_size] - self.population[:population_size])\n            social_component = self.social_coeff * r2 * (self.global_best_position - self.population[:population_size])\n            self.velocities[:population_size] = (self.inertia_weight * self.velocities[:population_size]) + cognitive_component + social_component\n            self.population[:population_size] = self.population[:population_size] + self.velocities[:population_size]\n\n            self.population[:population_size] = np.clip(self.population[:population_size], self.lower_bound, self.upper_bound)\n\n            for i in range(population_size):\n                indices = np.random.choice(np.delete(np.arange(population_size), i), 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = a + (self.mutation_factor_init - mutation_factor_reduction * eval_count) * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cross_prob:\n                        trial[j] = mutant[j]\n\n                trial_score = func(trial)\n                eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.population[i] = trial\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial\n                if eval_count >= self.budget:\n                    break\n\n            self.inertia_weight *= inertia_dampening\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedHybridPSODE", "description": "EnhancedHybridPSODE with improved convergence through adaptive mutation and diversified exploration-exploitation balance.", "configspace": "", "generation": 23, "fitness": 0.28826650656804936, "feedback": "The algorithm EnhancedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.27.", "error": "", "parent_id": "bc77ccb6-50c7-4344-b386-3c2edeb7bb74", "metadata": {"aucs": [0.9015940093849679, 0.8951893338428678, 0.899652170956285, 0.8953186605838135, 0.898406017455642, 0.9005142990145931, 0.8955883131042088, 0.901424880156738, 0.8889188238171132, 0.8054931008405868, 0.15414226606488168, 0.7973930122433445, 0.809344547580916, 0.7817921598240448, 0.09449920131789091, 0.7957682285211347, 0.7993956423060674, 0.7672062970355142, 0.15944379762218308, 0.12273948585584382, 0.13891377544507355, 0.13226991447230008, 0.7332098933077412, 0.17091765852122098, 0.15203803607015087, 0.17709221238570494, 0.15769809707108928, 0.1396682461666242, 0.1298341580922332, 0.10705207160454411, 0.10953079724570403, 0.1134296065728142, 0.107509871908266, 0.177598888549806, 0.08966809677658061, 0.10770521027958913, 0.9803166994118678, 0.9802014252743935, 0.9869077391356125, 0.979447839974879, 0.9825005424659274, 0.9648178648586775, 0.9862981997833613, 0.9798735704781565, 0.9745133615421594, 0.2608680652633836, 0.5162593335342578, 0.3246801843264785, 0.2506738464756191, 0.1517011161671986, 0.3999025314731498, 0.12656289630143291, 0.43691702901101603, 0.08645887875783442, 0.22586936996360707, 0.16931599895504645, 0.20893341506324536, 0.27898946984002515, 0.21212893477785433, 0.2007782849871954, 0.21889912729868943, 0.3498848283461694, 0.23014559057159523, 0.17919762036361897, 0.12652125326803798, 0.19409835551083776, 0.13272522624247196, 0.16256105156703893, 0.15754332306481478, 0.11516218189356364, 0.12959216963083764, 0.17138255453469287, 0.19988025883395788, 0.11979307153985552, 0.1272399117059242, 0.1354748942997187, 0.1916513573195413, 0.19830766400307864, 0.1774099617444843, 0.10192869548374328, 9.999999999998899e-05, 0.008316307482019725, 0.029492503132650172, 0.05091852354604365, 0.039850392295681325, 9.999999999998899e-05, 0.03273896127839071, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08591341790329277, 0.02903881787347873, 0.05553484656570584, 0.09581432238801424, 0.005386650654592984, 0.033309733595177526, 0.09700086359003324, 0.12211115374234471, 0.10800092016387264, 0.036733173257220364, 0.12616125055871585, 0.316429067814217, 0.07991145572515723, 0.07880972945520293, 0.09982866372670995, 0.09196564393838458, 0.08027963774268987, 0.07408366132701172, 0.08801413887451359, 0.1434846054571235, 0.11779383488162098, 0.018241128760745906, 0.13789050813906745, 0.2027392242446605, 0.07529584722456306, 0.04924099296992224, 0.09140995841188326, 0.5294640554345242, 0.5872928045505964, 0.6212498185776849, 0.6179322000486509, 0.5998860859241048, 0.5484918674419352, 0.5639382526601555, 0.5341201214274001, 0.555808587714397, 0.13602197693581053, 0.06662287833816882, 0.10258691846903167, 0.13105862032978055, 0.1075644628588136, 0.09512498276864512, 0.10858110006451283, 0.09418798259222605, 0.10959798230944195, 0.14893440886309306, 0.23118863575653203, 0.24941699511035498, 0.18342408443825808, 0.42174958206470836, 0.19712089510463227, 0.42541295430128656, 0.25037090706553644, 0.23167974422675608, 0.2503718437222935, 0.3798838762130743, 0.2878458710111246, 0.28092452746225505, 0.3739088626917231, 0.2767051165796406, 0.39024155487796475, 0.4277833130827271, 0.5725936386491944, 0.36422666952283034, 0.24780322707173708, 0.300464788312822, 0.17090442936431793, 0.23034682723054622, 0.2143537798933146, 0.26285471889742473, 0.27200488822826296, 0.25284532668613824, 0.20036349993023272, 0.23682100840609033, 0.25368490264131505, 0.18325111546249906, 0.25173884932846824, 0.19965174222016557, 0.22495388684357154, 0.25183974111820895, 0.1996974790944701, 0.19782651582262967, 0.1924726402534439, 0.20574490821053437, 0.20093218666918722, 0.7406782884586444, 0.20071638522815183, 0.20945162155329478, 0.20367900432838892, 0.20403439875829188, 0.1857258948528948, 0.17546356388384343, 0.15384431271571697, 0.9243336385490106, 0.201595130825589, 0.19991444254684876, 0.13517108375554632, 0.16933490241050964, 0.21188350486535124, 0.5156944970839239, 0.798097485708032, 0.16833591584170482, 0.5241472813990917, 0.2793135211758937, 0.6024800293443431, 0.1050205379854211, 0.1045524389999064, 0.21124320571196842, 0.19836562616690767, 0.2022940983044368, 0.1877020820181825, 0.19268381887366715, 0.18664853816658433, 0.1914012718936018, 0.1866203631835347, 0.1855831601250676, 0.19906198477851056, 0.09001151643575489, 0.09419276087337003, 0.09039108772574278, 0.07951221126338037, 0.08402441615922307, 0.09316471372091983, 0.09246866938609799, 0.10189976912395282, 0.08644118987826965]}, "mutation_prompt": null}
{"id": "d61d2fb9-1175-4cf8-b847-8053a2ac9c5e", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30\n        self.final_population_size = 25  # More gradual population resizing\n        self.inertia_weight = 0.6  # Reduced inertia weight for faster convergence\n        self.cognitive_coeff = 1.7  # Slightly increased to enhance exploration\n        self.social_coeff = 1.4  # Slightly decreased for better balance\n        self.mutation_factor_init = 0.85  # Adjusted mutation factor\n        self.cross_prob = 0.95  # Increased cross probability for more aggressive trial acceptance\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.initial_population_size, dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.initial_population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        eval_count = 0\n        inertia_dampening = 0.98  # Slightly faster inertia dampening\n        mutation_factor_change = (self.mutation_factor_init - 0.5) / self.budget\n\n        while eval_count < self.budget:\n            population_size = self.initial_population_size - int(\n                (eval_count / self.budget) * (self.initial_population_size - self.final_population_size))\n\n            for i in range(population_size):\n                score = func(self.population[i])\n                eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n                if eval_count >= self.budget:\n                    break\n\n            r1 = np.random.rand(population_size, self.dim)\n            r2 = np.random.rand(population_size, self.dim)\n            cognitive_component = self.cognitive_coeff * r1 * (self.personal_best_positions[:population_size] - self.population[:population_size])\n            social_component = self.social_coeff * r2 * (self.global_best_position - self.population[:population_size])\n            self.velocities[:population_size] = (self.inertia_weight * self.velocities[:population_size]) + cognitive_component + social_component\n            self.population[:population_size] = self.population[:population_size] + self.velocities[:population_size]\n\n            self.population[:population_size] = np.clip(self.population[:population_size], self.lower_bound, self.upper_bound)\n\n            for i in range(population_size):\n                indices = np.random.choice(np.delete(np.arange(population_size), i), 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = a + (self.mutation_factor_init - mutation_factor_change * eval_count) * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cross_prob:\n                        trial[j] = mutant[j]\n\n                trial_score = func(trial)\n                eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.population[i] = trial\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial\n                if eval_count >= self.budget:\n                    break\n\n            self.inertia_weight *= inertia_dampening\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedHybridPSODE", "description": "EnhancedHybridPSODE with strategic parameter tuning and convergence acceleration for improved solution discovery.", "configspace": "", "generation": 9, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bc77ccb6-50c7-4344-b386-3c2edeb7bb74", "metadata": {"aucs": [0.8790086340197295, 0.8594809718503991, 0.8714262695213816, 0.8716207678780874, 0.8148118753439718, 0.8861515777171897, 0.8837698586196663, 0.8642760586676631, 0.8875415051650409, 0.17615915760563494, 0.040666035401233924, 0.7659295256535265, 0.7823578748417368, 0.5914234958185203, 0.7737192496914153, 0.09191439566829707, 0.7807869480152533, 0.7210407329277733, 0.7590331568653765, 0.11314459675360233, 0.1407305539432988, 0.13631009901996916, 0.17845428088125936, 0.1267983471526002, 0.11386342865106003, 0.7676500932417867, 0.7356018349826263, 0.09414670979277939, 0.10193276386032069, 0.11305088395546858, 0.09035188810275085, 0.11106680270323754, 0.07999216304702972, 0.13030784844424492, 0.1090903000904827, 0.10358403771667746, 0.9812208644686673, 0.990148163785257, 0.986321950263512, 0.9743452358825869, 0.9818659685636542, 0.9748072437211964, 0.98661971764974, 0.9812156557752502, 0.9740022926488223, 0.6833852700092474, 0.05942439096003904, 0.4465217175737798, 0.1514783845395712, 0.15123678199973534, 0.5170565092662427, 0.08814293903164183, 0.08876749261175287, 0.08747262658556376, 0.845701053771103, 0.22080061120268113, 0.2221265392974867, 0.1951747597340192, 0.1873530869107406, 0.21150550975519744, 0.7824621767610765, 0.2369892543861204, 0.22985526164499193, 0.1480386817577546, 0.1770782741373862, 0.18761944281912457, 0.13221331799248015, 0.15624693520631971, 0.166306497598123, 0.176788284570921, 0.18538267855681922, 0.168125587221999, 0.22545986869821455, 0.01691749011125654, 0.16766231711449908, 0.16335467370892842, 0.17787696690836274, 0.18453451111061947, 0.20021626088724775, 0.14917080393166593, 0.10231439881330207, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04227577453509179, 9.999999999998899e-05, 0.015463406937756163, 9.999999999998899e-05, 9.999999999998899e-05, 0.007912297409857327, 0.05474190849592975, 0.0347173953392379, 0.06333406881715675, 0.08871671805517234, 9.999999999998899e-05, 0.03861299327396939, 0.08687706815471752, 0.054730514896239923, 0.0950761773747294, 0.04775251971242633, 0.039690469816313634, 0.05801034121549731, 0.07899798940116598, 0.12123208331162583, 0.07751605849919285, 0.10272287603858754, 0.1667072975290561, 0.08097680103844229, 0.21386019817923785, 0.29479961095671137, 0.12545230467112922, 0.1014620627460765, 0.18605330707971834, 0.0811152816510583, 0.04888538530107778, 0.16911168435320667, 0.08200525644254175, 0.5789713400219295, 0.5043819370195604, 0.5705854377131928, 0.6163712517873601, 0.1816223944309462, 0.4651433234149117, 0.5980790126143987, 0.541162923293524, 0.5641267812012832, 0.09878025836774917, 0.09868763046288298, 0.07579817115720011, 0.1370973715510745, 0.11095610730595085, 0.1089961420522001, 0.0772660606942116, 0.0907145769773724, 0.09370847262624771, 0.16405289293500191, 0.2887828416758609, 0.19000827183424995, 0.24056496988958453, 0.39234844462579455, 0.31893961924211134, 0.3395656710000532, 0.18397597950738231, 0.1905479658229332, 0.4031565466702731, 0.33260677792399607, 0.43983189821281454, 0.36254220485256616, 0.615311087137856, 0.4226488410038012, 0.5149162942423011, 0.6435465997550542, 0.5975442376758364, 0.17652395519029507, 0.33385298819738696, 0.26706626250844223, 0.15110845801174178, 0.19033927360902692, 0.29297880793709596, 0.32074966798170135, 0.2786212190051407, 0.26592013582011964, 0.20626387691568626, 0.23533300364269227, 0.21960140332542588, 0.2166261284030666, 0.21925626195719738, 0.19723829545081528, 0.239014051222031, 0.22764164621031946, 0.2065795991169087, 0.20809659194959107, 0.18777939130854893, 0.18809690808592905, 0.20055815767971685, 0.24841047782516412, 0.2154025357234416, 0.20900733796249704, 0.24370747974556117, 0.1988601853636287, 0.16528498454319784, 0.1664887652897813, 0.1529090081731017, 0.8941348821818921, 0.20070456927090463, 0.19854116635388375, 0.11323241925174188, 0.16872427211354857, 0.8866933534022886, 0.5752327821528157, 0.15641477929591274, 0.20921159029213, 0.4599269982906907, 0.22210038428329704, 0.610196133677235, 0.2118384614919675, 0.10507112973519561, 0.7060655692943145, 0.18783309517007818, 0.19180891923347498, 0.2060947082681177, 0.18466423013486566, 0.22624582819961336, 0.18989499923664865, 0.1742474071569774, 0.1691272711386469, 0.19322196335618247, 0.10818493538237195, 0.09510691300887442, 0.10941114447661404, 0.08886654951766637, 0.09665151145532214, 0.09813607733786744, 0.10580537301912951, 0.08833639634802604, 0.10554517047363443]}, "mutation_prompt": null}
{"id": "09158324-57f4-4d46-ace1-0816103a0b6a", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30\n        self.final_population_size = 20  # More gradual population resizing\n        self.inertia_weight_init = 0.7  # Slightly increased for broader exploration initially\n        self.inertia_weight_final = 0.3  # Decrease inertia more towards the end for exploitation\n        self.cognitive_coeff = 1.8  # Increased to enhance exploration\n        self.social_coeff = 1.3  # Decreased for better balance\n        self.mutation_factor_init = 0.9  # Adjusted mutation factor for more aggressive exploration\n        self.cross_prob = 0.9  # Slightly decreased cross probability for selective trial acceptance\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.initial_population_size, dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.initial_population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        eval_count = 0\n        inertia_dampening = (self.inertia_weight_final / self.inertia_weight_init) ** (1 / self.budget)\n        \n        while eval_count < self.budget:\n            population_size = self.initial_population_size - int(\n                (eval_count / self.budget) * (self.initial_population_size - self.final_population_size))\n            \n            for i in range(population_size):\n                score = func(self.population[i])\n                eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n                if eval_count >= self.budget:\n                    break\n\n            r1 = np.random.rand(population_size, self.dim)\n            r2 = np.random.rand(population_size, self.dim)\n            cognitive_component = self.cognitive_coeff * r1 * (self.personal_best_positions[:population_size] - self.population[:population_size])\n            social_component = self.social_coeff * r2 * (self.global_best_position - self.population[:population_size])\n            self.velocities[:population_size] = (self.inertia_weight_init * self.velocities[:population_size]) + cognitive_component + social_component\n            self.population[:population_size] = self.population[:population_size] + self.velocities[:population_size]\n\n            self.population[:population_size] = np.clip(self.population[:population_size], self.lower_bound, self.upper_bound)\n\n            for i in range(population_size):\n                indices = np.random.choice(np.delete(np.arange(population_size), i), 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = a + (self.mutation_factor_init - (eval_count / self.budget) * 0.4) * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cross_prob:\n                        trial[j] = mutant[j]\n\n                trial_score = func(trial)\n                eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.population[i] = trial\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial\n                if eval_count >= self.budget:\n                    break\n\n            self.inertia_weight_init *= inertia_dampening\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedHybridPSODE", "description": "EnhancedHybridPSODE with adaptive parameter adjustment and convergence control for improved speed and precision.", "configspace": "", "generation": 25, "fitness": 0.23430750149185278, "feedback": "The algorithm EnhancedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.22.", "error": "", "parent_id": "bc77ccb6-50c7-4344-b386-3c2edeb7bb74", "metadata": {"aucs": [0.6038020602177396, 0.6913350331442458, 0.684253810858984, 0.5155600010287285, 0.18833096777557168, 0.7012954486126111, 0.6128754302142452, 0.6706064533951516, 0.7038578386035108, 0.3126358449409724, 0.33289628139031047, 0.25616503920348854, 0.2649225206134913, 0.4089391301852755, 0.25071180120896874, 0.378905108837579, 0.30293846718681283, 0.3019322012523711, 0.1117223842561269, 0.10937431155147337, 0.16863771252919235, 0.13762781766603238, 0.14565147428140912, 0.11153809586485264, 0.11418187973361815, 0.10285553624548716, 0.21106178903579098, 0.12858508317721318, 0.099947991554164, 0.11973932929986697, 0.08255956869551251, 0.11168677085459788, 0.1276790113382389, 0.0948126244414732, 0.13037629111701554, 0.13415362014381793, 0.9809940962359576, 0.9793303218485929, 0.9876972355155893, 0.9758054203121272, 0.9853181429917753, 0.9747620053267396, 0.9862274467348484, 0.9817270068324843, 0.9762634448831164, 0.05921773841877964, 0.05867186351138587, 0.31536645248969053, 0.14818136254250835, 0.14551872748821149, 0.39538650571476763, 0.11765489960339004, 0.08821409793657708, 0.08623088688619973, 0.17004167411489268, 0.5604239126254609, 0.5995442575440317, 0.30924447580900505, 0.11635348954014846, 0.6171691079267145, 0.2272261393744659, 0.22240476702772882, 0.21274515260933458, 0.1159538210822253, 0.15297066004345072, 0.18697092565146578, 0.17321793906631477, 0.16550955183473548, 0.16869947961820309, 0.16682609243356106, 0.1746589141032986, 0.16843831636196993, 0.134788859511227, 0.052192780941486716, 0.1085706747228452, 0.16687776476892902, 0.1639933082587307, 0.18727655255880205, 0.19183775020993266, 0.17915929793715368, 0.1266221261400844, 9.999999999998899e-05, 0.0008879054550421372, 0.039857235185764894, 0.03151389308916075, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07746954703550346, 0.025302623204021657, 0.11060649260096511, 0.07096662428980949, 0.04517147606561267, 0.06568136000003066, 0.05590152979093055, 0.07656802181040112, 0.08004897818725698, 0.036194677421280574, 0.07159717837605362, 0.03861390835891487, 0.05920839999555649, 0.06451054970526315, 0.05373770564568736, 0.07961096012046343, 0.04974949422877284, 0.052658004054671026, 0.1136649788285029, 0.1287185681648889, 0.10029944702712035, 0.04491417447023838, 0.168914992944308, 0.1184339860286796, 0.04581517810130098, 0.05438372767925048, 0.11592126437008787, 0.47042938181295235, 0.4687568887232122, 0.45766099643525027, 0.4840832689023371, 0.41643782163048615, 0.4588160319285294, 0.45252605450453587, 0.47056646582749895, 0.5008420510623809, 0.09062694750307787, 0.08058630462290062, 0.11462370948990608, 0.11934243168958603, 0.10178005617433883, 0.09500643965471356, 0.10874805235097662, 0.09507291386685135, 0.09839878630266319, 0.15169837770850658, 0.18974071255068592, 0.18122693285286018, 0.18918527723730005, 0.13166809845025962, 0.15964267816479383, 0.2575790374213788, 0.2013968463502558, 0.1833989549052456, 0.2905490602706966, 0.3006187811673273, 0.30760132720889954, 0.3074737322235169, 0.22067750776126782, 0.32470866086488115, 0.36288893492050645, 0.3461913343009857, 0.35528797826254044, 0.17272769226359574, 0.1733633032059797, 0.29538281248547504, 0.23112993796966452, 0.2000302637192939, 0.21139768330657827, 0.249769506435068, 0.27733167816816573, 0.23500391012887323, 0.24138877806256465, 0.15284853268802034, 0.2066572312586218, 0.2020648424323216, 0.17749577596348065, 0.19437524174855914, 0.18913316388766022, 0.19651293208695275, 0.19306506502053467, 0.21704360298661063, 0.1858165590141403, 0.29453930062537925, 0.18425009058475983, 0.23283238861987632, 0.19379768696937194, 0.1899368527399291, 0.21970638859580272, 0.19890205433187835, 0.1631309395194961, 0.16750840533789746, 0.1515094147199335, 0.17056093772872105, 0.19861467972040736, 0.1975873910128757, 0.15266315961714993, 0.16803921787243759, 0.20890634892054094, 0.599352301448316, 0.1551462732274056, 0.16611212203443537, 0.20366398591991142, 0.4888517788118547, 0.6998895606822122, 0.10371653430905936, 0.19316836650976799, 0.10415669042615205, 0.19946538610875908, 0.1987773012074069, 0.21634656241351613, 0.1755920522680937, 0.1771228184713709, 0.18918713415775545, 0.18152547146115006, 0.1861152899210955, 0.21353322945816866, 0.0866880950642811, 0.07720863540404355, 0.07513540823773746, 0.08302581613886373, 0.08453500603418251, 0.09636416960768579, 0.08795845456593254, 0.08148977532963508, 0.08146643838826273]}, "mutation_prompt": null}
{"id": "d5e71859-46d3-4147-ae1c-93e1fb35dc7e", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30\n        self.final_population_size = 25  # More gradual population resizing\n        self.inertia_weight = 0.6  # Reduced inertia weight for faster convergence\n        self.cognitive_coeff = 1.7  # Slightly increased to enhance exploration\n        self.social_coeff = 1.4  # Slightly decreased for better balance\n        self.mutation_factor_init = 0.85  # Adjusted mutation factor\n        self.cross_prob = 0.95  # Increased cross probability for more aggressive trial acceptance\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.initial_population_size, dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.initial_population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        eval_count = 0\n        inertia_dampening = 0.98  # Slightly faster inertia dampening\n        mutation_factor_change = (self.mutation_factor_init - 0.5) / self.budget\n\n        while eval_count < self.budget:\n            population_size = self.initial_population_size - int(\n                (eval_count / self.budget) * (self.initial_population_size - self.final_population_size))\n\n            for i in range(population_size):\n                score = func(self.population[i])\n                eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n                if eval_count >= self.budget:\n                    break\n\n            r1 = np.random.rand(population_size, self.dim)\n            r2 = np.random.rand(population_size, self.dim)\n            cognitive_component = self.cognitive_coeff * r1 * (self.personal_best_positions[:population_size] - self.population[:population_size])\n            social_component = self.social_coeff * r2 * (self.global_best_position - self.population[:population_size])\n            self.velocities[:population_size] = (self.inertia_weight * self.velocities[:population_size]) + cognitive_component + social_component\n            self.population[:population_size] = self.population[:population_size] + self.velocities[:population_size]\n\n            self.population[:population_size] = np.clip(self.population[:population_size], self.lower_bound, self.upper_bound)\n\n            for i in range(population_size):\n                indices = np.random.choice(np.delete(np.arange(population_size), i), 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = a + (self.mutation_factor_init - mutation_factor_change * eval_count) * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cross_prob:\n                        trial[j] = mutant[j]\n\n                trial_score = func(trial)\n                eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.population[i] = trial\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial\n                if eval_count >= self.budget:\n                    break\n\n            self.inertia_weight *= inertia_dampening\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedHybridPSODE", "description": "EnhancedHybridPSODE with strategic parameter tuning and convergence acceleration for improved solution discovery.", "configspace": "", "generation": 9, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bc77ccb6-50c7-4344-b386-3c2edeb7bb74", "metadata": {"aucs": [0.8790086340197295, 0.8594809718503991, 0.8714262695213816, 0.8716207678780874, 0.8148118753439718, 0.8861515777171897, 0.8837698586196663, 0.8642760586676631, 0.8875415051650409, 0.17615915760563494, 0.040666035401233924, 0.7659295256535265, 0.7823578748417368, 0.5914234958185203, 0.7737192496914153, 0.09191439566829707, 0.7807869480152533, 0.7210407329277733, 0.7590331568653765, 0.11314459675360233, 0.1407305539432988, 0.13631009901996916, 0.17845428088125936, 0.1267983471526002, 0.11386342865106003, 0.7676500932417867, 0.7356018349826263, 0.09414670979277939, 0.10193276386032069, 0.11305088395546858, 0.09035188810275085, 0.11106680270323754, 0.07999216304702972, 0.13030784844424492, 0.1090903000904827, 0.10358403771667746, 0.9812208644686673, 0.990148163785257, 0.986321950263512, 0.9743452358825869, 0.9818659685636542, 0.9748072437211964, 0.98661971764974, 0.9812156557752502, 0.9740022926488223, 0.6833852700092474, 0.05942439096003904, 0.4465217175737798, 0.1514783845395712, 0.15123678199973534, 0.5170565092662427, 0.08814293903164183, 0.08876749261175287, 0.08747262658556376, 0.845701053771103, 0.22080061120268113, 0.2221265392974867, 0.1951747597340192, 0.1873530869107406, 0.21150550975519744, 0.7824621767610765, 0.2369892543861204, 0.22985526164499193, 0.1480386817577546, 0.1770782741373862, 0.18761944281912457, 0.13221331799248015, 0.15624693520631971, 0.166306497598123, 0.176788284570921, 0.18538267855681922, 0.168125587221999, 0.22545986869821455, 0.01691749011125654, 0.16766231711449908, 0.16335467370892842, 0.17787696690836274, 0.18453451111061947, 0.20021626088724775, 0.14917080393166593, 0.10231439881330207, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04227577453509179, 9.999999999998899e-05, 0.015463406937756163, 9.999999999998899e-05, 9.999999999998899e-05, 0.007912297409857327, 0.05474190849592975, 0.0347173953392379, 0.06333406881715675, 0.08871671805517234, 9.999999999998899e-05, 0.03861299327396939, 0.08687706815471752, 0.054730514896239923, 0.0950761773747294, 0.04775251971242633, 0.039690469816313634, 0.05801034121549731, 0.07899798940116598, 0.12123208331162583, 0.07751605849919285, 0.10272287603858754, 0.1667072975290561, 0.08097680103844229, 0.21386019817923785, 0.29479961095671137, 0.12545230467112922, 0.1014620627460765, 0.18605330707971834, 0.0811152816510583, 0.04888538530107778, 0.16911168435320667, 0.08200525644254175, 0.5789713400219295, 0.5043819370195604, 0.5705854377131928, 0.6163712517873601, 0.1816223944309462, 0.4651433234149117, 0.5980790126143987, 0.541162923293524, 0.5641267812012832, 0.09878025836774917, 0.09868763046288298, 0.07579817115720011, 0.1370973715510745, 0.11095610730595085, 0.1089961420522001, 0.0772660606942116, 0.0907145769773724, 0.09370847262624771, 0.16405289293500191, 0.2887828416758609, 0.19000827183424995, 0.24056496988958453, 0.39234844462579455, 0.31893961924211134, 0.3395656710000532, 0.18397597950738231, 0.1905479658229332, 0.4031565466702731, 0.33260677792399607, 0.43983189821281454, 0.36254220485256616, 0.615311087137856, 0.4226488410038012, 0.5149162942423011, 0.6435465997550542, 0.5975442376758364, 0.17652395519029507, 0.33385298819738696, 0.26706626250844223, 0.15110845801174178, 0.19033927360902692, 0.29297880793709596, 0.32074966798170135, 0.2786212190051407, 0.26592013582011964, 0.20626387691568626, 0.23533300364269227, 0.21960140332542588, 0.2166261284030666, 0.21925626195719738, 0.19723829545081528, 0.239014051222031, 0.22764164621031946, 0.2065795991169087, 0.20809659194959107, 0.18777939130854893, 0.18809690808592905, 0.20055815767971685, 0.24841047782516412, 0.2154025357234416, 0.20900733796249704, 0.24370747974556117, 0.1988601853636287, 0.16528498454319784, 0.1664887652897813, 0.1529090081731017, 0.8941348821818921, 0.20070456927090463, 0.19854116635388375, 0.11323241925174188, 0.16872427211354857, 0.8866933534022886, 0.5752327821528157, 0.15641477929591274, 0.20921159029213, 0.4599269982906907, 0.22210038428329704, 0.610196133677235, 0.2118384614919675, 0.10507112973519561, 0.7060655692943145, 0.18783309517007818, 0.19180891923347498, 0.2060947082681177, 0.18466423013486566, 0.22624582819961336, 0.18989499923664865, 0.1742474071569774, 0.1691272711386469, 0.19322196335618247, 0.10818493538237195, 0.09510691300887442, 0.10941114447661404, 0.08886654951766637, 0.09665151145532214, 0.09813607733786744, 0.10580537301912951, 0.08833639634802604, 0.10554517047363443]}, "mutation_prompt": null}
{"id": "b164b4ed-1254-48c9-8cf1-da481bc62710", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 32  # Slightly increased initial population size\n        self.final_population_size = 27  # Slightly increased final population size\n        self.inertia_weight = 0.62  # Adjusted inertia weight for improved convergence balance\n        self.cognitive_coeff = 1.75  # Fine-tuned cognitive coefficient\n        self.social_coeff = 1.35  # Fine-tuned social coefficient for better information sharing\n        self.mutation_factor_init = 0.87  # Enhanced mutation factor\n        self.cross_prob = 0.93  # Slight decrease in cross probability for refined exploration\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.initial_population_size, dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.initial_population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        eval_count = 0\n        inertia_dampening = 0.975  # Adjusted inertia dampening rate\n        mutation_factor_change = (self.mutation_factor_init - 0.5) / self.budget\n\n        while eval_count < self.budget:\n            population_size = self.initial_population_size - int(\n                (eval_count / self.budget) * (self.initial_population_size - self.final_population_size))\n\n            for i in range(population_size):\n                score = func(self.population[i])\n                eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n                if eval_count >= self.budget:\n                    break\n\n            r1 = np.random.rand(population_size, self.dim)\n            r2 = np.random.rand(population_size, self.dim)\n            cognitive_component = self.cognitive_coeff * r1 * (self.personal_best_positions[:population_size] - self.population[:population_size])\n            social_component = self.social_coeff * r2 * (self.global_best_position - self.population[:population_size])\n            self.velocities[:population_size] = (self.inertia_weight * self.velocities[:population_size]) + cognitive_component + social_component\n            self.population[:population_size] = self.population[:population_size] + self.velocities[:population_size]\n\n            self.population[:population_size] = np.clip(self.population[:population_size], self.lower_bound, self.upper_bound)\n\n            for i in range(population_size):\n                indices = np.random.choice(np.delete(np.arange(population_size), i), 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = a + (self.mutation_factor_init - mutation_factor_change * eval_count) * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cross_prob:\n                        trial[j] = mutant[j]\n\n                trial_score = func(trial)\n                eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.population[i] = trial\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial\n                if eval_count >= self.budget:\n                    break\n\n            self.inertia_weight *= inertia_dampening\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedHybridPSODE", "description": "Fine-tune EnhancedHybridPSODE by slightly adjusting parameters and implementing differential adaptation for enhanced convergence speed.", "configspace": "", "generation": 27, "fitness": 0.2928985567557518, "feedback": "The algorithm EnhancedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.27.", "error": "", "parent_id": "bc77ccb6-50c7-4344-b386-3c2edeb7bb74", "metadata": {"aucs": [0.868171151659263, 0.8669873548516616, 0.8787917953567186, 0.8794952115608978, 0.8740965967286554, 0.8476336998898607, 0.8806126708308281, 0.8839720305519431, 0.1828158752330995, 0.7498182440216914, 0.7226266634221156, 9.999999999998899e-05, 0.7687913524182108, 0.7016200929130476, 0.7714728053755675, 0.7715770291720575, 0.058625757485417984, 0.04330565421479482, 0.1058271968440655, 0.1671877194291106, 0.13773195574810015, 0.1308222613340393, 0.10746175913672473, 0.13764200069371346, 0.12360220666640709, 0.1534681943394326, 0.13066294024995662, 0.1265789648449892, 0.11245448549174675, 0.08603446841709739, 0.13112058911305413, 0.13499963813781468, 0.11091492028657812, 0.12261773981721757, 0.10595490093080884, 0.09439491593639504, 0.9857132728288297, 0.9748053134685443, 0.9884467000980489, 0.9848932261762514, 0.9775817874984842, 0.9792724736190971, 0.9905612348555402, 0.9781238995157029, 0.9798634944956456, 0.2942454371221803, 0.5995088326230111, 0.571026832607995, 0.7738536518015953, 0.15082956306991824, 0.4135122998555243, 0.5125084953397184, 0.5746157509502243, 0.6864156331944282, 0.2211038283126896, 0.8894294969904695, 0.3813116278611496, 0.36521426781482047, 0.20361558554810266, 0.2109757998573053, 0.1245832220499804, 0.2386889742266669, 0.3566849431936763, 0.1667105059163314, 0.17535446115877562, 0.16002839392644275, 0.19134551583580817, 0.10449479695636088, 0.14829178450064806, 0.1859324650514228, 0.18810530691301797, 0.14847280523156337, 0.25988417012591214, 0.052645628021044444, 0.17411974029320665, 0.1803122901284211, 0.15022474348560977, 0.12834147352838376, 0.17695483712144355, 0.13391185972442654, 0.20319537989439385, 9.999999999998899e-05, 9.999999999998899e-05, 0.05536488955421737, 9.999999999998899e-05, 0.023355206811746965, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005443005883398633, 0.13855469882131255, 0.05371824317700391, 0.1577026506039212, 0.08217696781380668, 0.022473524035804937, 0.006817260462889885, 0.08706800024438088, 0.110540037101575, 0.07480630295470114, 0.04881678273618617, 0.0421441624533454, 0.11420009902529205, 0.10288712115340382, 0.09294324941862797, 0.08012763415750324, 0.09903650590590551, 0.10733353152349223, 0.0694416090476987, 0.18778377160682302, 0.19146172049858812, 0.11001372756663785, 0.06829646144328494, 0.11899104204933375, 0.006361587569521321, 0.07822143325997222, 0.054201826469552405, 0.0835689941313047, 0.5479879295637435, 0.5459621628386636, 0.5653255482158566, 0.5631216869352151, 0.5595857406146503, 0.20768715272154692, 0.6200966182558489, 0.5446589141861528, 0.4995233520153599, 0.1293261414167619, 0.12351223213457818, 0.15219322390439338, 0.13935608851500658, 0.12587117575750162, 0.1384548103937303, 0.11590116296011987, 0.08657291331479278, 0.1479328929038729, 0.17027840266273797, 0.25430275613415876, 0.1841923659441046, 0.3165976193578114, 0.2612362466929654, 0.2642866034198058, 0.1447343241260871, 0.1405789087511644, 0.23937855277322984, 0.39526233519708076, 0.46164791656725024, 0.353635819946982, 0.2798042669598797, 0.2762248549888878, 0.5103867677267695, 0.2947173024621088, 0.45896791420902505, 0.46754211339400087, 0.23594001272656728, 0.2689509157811669, 0.3056674679055371, 0.24236150275372115, 0.20839598308365204, 0.2865624394159819, 0.46318728362051287, 0.35950139206565646, 0.23970815017391212, 0.21789683225534817, 0.1528247096969646, 0.2113237201346566, 0.20256835243255167, 0.24292390231949523, 0.18647375127029076, 0.20693572564655138, 0.20335467672766472, 0.20985605456252288, 0.18355870074917502, 0.25089895696136577, 0.21953751599560223, 0.18859036389508765, 0.19508034841563981, 0.2444413008258578, 0.22360889207697232, 0.24457597233117956, 0.22053241922017075, 0.9045391396581955, 0.16273029929833616, 0.15411887710831074, 0.91147293688785, 0.19725533740067125, 0.19768341224857877, 0.12127156506775516, 0.1699209256510943, 0.8944548699905223, 0.5487982523092243, 0.21142127817225442, 0.11168074938031625, 0.7102205280557343, 0.6892152699889538, 0.21045353382100407, 0.18603716138170256, 0.40126373786609915, 0.39786830745576385, 0.22236605411971144, 0.1955879122119587, 0.1910297726881106, 0.1920352888400889, 0.188917494261008, 0.19788742858354158, 0.18827702007454994, 0.21654853160804866, 0.18957635847909915, 0.09446476245283086, 0.1009898979167918, 0.09403324061397911, 0.08519321111188494, 0.10604612737835728, 0.0897485555094849, 0.08327870662687897, 0.08039211250747647, 0.08705274813744457]}, "mutation_prompt": null}
{"id": "3d41f5e6-c99f-4b28-9e0d-707d8951ea2e", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30\n        self.final_population_size = 25  # More gradual population resizing\n        self.inertia_weight = 0.6  # Reduced inertia weight for faster convergence\n        self.cognitive_coeff = 1.7  # Slightly increased to enhance exploration\n        self.social_coeff = 1.4  # Slightly decreased for better balance\n        self.mutation_factor_init = 0.85  # Adjusted mutation factor\n        self.cross_prob = 0.95  # Increased cross probability for more aggressive trial acceptance\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.initial_population_size, dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.initial_population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        eval_count = 0\n        inertia_dampening = 0.98  # Slightly faster inertia dampening\n        mutation_factor_change = (self.mutation_factor_init - 0.5) / self.budget\n\n        while eval_count < self.budget:\n            population_size = self.initial_population_size - int(\n                (eval_count / self.budget) * (self.initial_population_size - self.final_population_size))\n\n            for i in range(population_size):\n                score = func(self.population[i])\n                eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n                if eval_count >= self.budget:\n                    break\n\n            r1 = np.random.rand(population_size, self.dim)\n            r2 = np.random.rand(population_size, self.dim)\n            cognitive_component = self.cognitive_coeff * r1 * (self.personal_best_positions[:population_size] - self.population[:population_size])\n            social_component = self.social_coeff * r2 * (self.global_best_position - self.population[:population_size])\n            self.velocities[:population_size] = (self.inertia_weight * self.velocities[:population_size]) + cognitive_component + social_component\n            self.population[:population_size] = self.population[:population_size] + self.velocities[:population_size]\n\n            self.population[:population_size] = np.clip(self.population[:population_size], self.lower_bound, self.upper_bound)\n\n            for i in range(population_size):\n                indices = np.random.choice(np.delete(np.arange(population_size), i), 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = a + (self.mutation_factor_init - mutation_factor_change * eval_count) * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cross_prob:\n                        trial[j] = mutant[j]\n\n                trial_score = func(trial)\n                eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.population[i] = trial\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial\n                if eval_count >= self.budget:\n                    break\n\n            self.inertia_weight *= inertia_dampening\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedHybridPSODE", "description": "EnhancedHybridPSODE with strategic parameter tuning and convergence acceleration for improved solution discovery.", "configspace": "", "generation": 9, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bc77ccb6-50c7-4344-b386-3c2edeb7bb74", "metadata": {"aucs": [0.8790086340197295, 0.8594809718503991, 0.8714262695213816, 0.8716207678780874, 0.8148118753439718, 0.8861515777171897, 0.8837698586196663, 0.8642760586676631, 0.8875415051650409, 0.17615915760563494, 0.040666035401233924, 0.7659295256535265, 0.7823578748417368, 0.5914234958185203, 0.7737192496914153, 0.09191439566829707, 0.7807869480152533, 0.7210407329277733, 0.7590331568653765, 0.11314459675360233, 0.1407305539432988, 0.13631009901996916, 0.17845428088125936, 0.1267983471526002, 0.11386342865106003, 0.7676500932417867, 0.7356018349826263, 0.09414670979277939, 0.10193276386032069, 0.11305088395546858, 0.09035188810275085, 0.11106680270323754, 0.07999216304702972, 0.13030784844424492, 0.1090903000904827, 0.10358403771667746, 0.9812208644686673, 0.990148163785257, 0.986321950263512, 0.9743452358825869, 0.9818659685636542, 0.9748072437211964, 0.98661971764974, 0.9812156557752502, 0.9740022926488223, 0.6833852700092474, 0.05942439096003904, 0.4465217175737798, 0.1514783845395712, 0.15123678199973534, 0.5170565092662427, 0.08814293903164183, 0.08876749261175287, 0.08747262658556376, 0.845701053771103, 0.22080061120268113, 0.2221265392974867, 0.1951747597340192, 0.1873530869107406, 0.21150550975519744, 0.7824621767610765, 0.2369892543861204, 0.22985526164499193, 0.1480386817577546, 0.1770782741373862, 0.18761944281912457, 0.13221331799248015, 0.15624693520631971, 0.166306497598123, 0.176788284570921, 0.18538267855681922, 0.168125587221999, 0.22545986869821455, 0.01691749011125654, 0.16766231711449908, 0.16335467370892842, 0.17787696690836274, 0.18453451111061947, 0.20021626088724775, 0.14917080393166593, 0.10231439881330207, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04227577453509179, 9.999999999998899e-05, 0.015463406937756163, 9.999999999998899e-05, 9.999999999998899e-05, 0.007912297409857327, 0.05474190849592975, 0.0347173953392379, 0.06333406881715675, 0.08871671805517234, 9.999999999998899e-05, 0.03861299327396939, 0.08687706815471752, 0.054730514896239923, 0.0950761773747294, 0.04775251971242633, 0.039690469816313634, 0.05801034121549731, 0.07899798940116598, 0.12123208331162583, 0.07751605849919285, 0.10272287603858754, 0.1667072975290561, 0.08097680103844229, 0.21386019817923785, 0.29479961095671137, 0.12545230467112922, 0.1014620627460765, 0.18605330707971834, 0.0811152816510583, 0.04888538530107778, 0.16911168435320667, 0.08200525644254175, 0.5789713400219295, 0.5043819370195604, 0.5705854377131928, 0.6163712517873601, 0.1816223944309462, 0.4651433234149117, 0.5980790126143987, 0.541162923293524, 0.5641267812012832, 0.09878025836774917, 0.09868763046288298, 0.07579817115720011, 0.1370973715510745, 0.11095610730595085, 0.1089961420522001, 0.0772660606942116, 0.0907145769773724, 0.09370847262624771, 0.16405289293500191, 0.2887828416758609, 0.19000827183424995, 0.24056496988958453, 0.39234844462579455, 0.31893961924211134, 0.3395656710000532, 0.18397597950738231, 0.1905479658229332, 0.4031565466702731, 0.33260677792399607, 0.43983189821281454, 0.36254220485256616, 0.615311087137856, 0.4226488410038012, 0.5149162942423011, 0.6435465997550542, 0.5975442376758364, 0.17652395519029507, 0.33385298819738696, 0.26706626250844223, 0.15110845801174178, 0.19033927360902692, 0.29297880793709596, 0.32074966798170135, 0.2786212190051407, 0.26592013582011964, 0.20626387691568626, 0.23533300364269227, 0.21960140332542588, 0.2166261284030666, 0.21925626195719738, 0.19723829545081528, 0.239014051222031, 0.22764164621031946, 0.2065795991169087, 0.20809659194959107, 0.18777939130854893, 0.18809690808592905, 0.20055815767971685, 0.24841047782516412, 0.2154025357234416, 0.20900733796249704, 0.24370747974556117, 0.1988601853636287, 0.16528498454319784, 0.1664887652897813, 0.1529090081731017, 0.8941348821818921, 0.20070456927090463, 0.19854116635388375, 0.11323241925174188, 0.16872427211354857, 0.8866933534022886, 0.5752327821528157, 0.15641477929591274, 0.20921159029213, 0.4599269982906907, 0.22210038428329704, 0.610196133677235, 0.2118384614919675, 0.10507112973519561, 0.7060655692943145, 0.18783309517007818, 0.19180891923347498, 0.2060947082681177, 0.18466423013486566, 0.22624582819961336, 0.18989499923664865, 0.1742474071569774, 0.1691272711386469, 0.19322196335618247, 0.10818493538237195, 0.09510691300887442, 0.10941114447661404, 0.08886654951766637, 0.09665151145532214, 0.09813607733786744, 0.10580537301912951, 0.08833639634802604, 0.10554517047363443]}, "mutation_prompt": null}
{"id": "f72da0d0-be3e-497c-b51e-e4f50537327d", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30\n        self.final_population_size = 25  # More gradual population resizing\n        self.inertia_weight = 0.6  # Reduced inertia weight for faster convergence\n        self.cognitive_coeff = 1.7  # Slightly increased to enhance exploration\n        self.social_coeff = 1.4  # Slightly decreased for better balance\n        self.mutation_factor_init = 0.85  # Adjusted mutation factor\n        self.cross_prob = 0.95  # Increased cross probability for more aggressive trial acceptance\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.initial_population_size, dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.initial_population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        eval_count = 0\n        inertia_dampening = 0.98  # Slightly faster inertia dampening\n        mutation_factor_change = (self.mutation_factor_init - 0.5) / self.budget\n\n        while eval_count < self.budget:\n            population_size = self.initial_population_size - int(\n                (eval_count / self.budget) * (self.initial_population_size - self.final_population_size))\n\n            for i in range(population_size):\n                score = func(self.population[i])\n                eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n                if eval_count >= self.budget:\n                    break\n\n            r1 = np.random.rand(population_size, self.dim)\n            r2 = np.random.rand(population_size, self.dim)\n            cognitive_component = self.cognitive_coeff * r1 * (self.personal_best_positions[:population_size] - self.population[:population_size])\n            social_component = self.social_coeff * r2 * (self.global_best_position - self.population[:population_size])\n            self.velocities[:population_size] = (self.inertia_weight * self.velocities[:population_size]) + cognitive_component + social_component\n            self.population[:population_size] = self.population[:population_size] + self.velocities[:population_size]\n\n            self.population[:population_size] = np.clip(self.population[:population_size], self.lower_bound, self.upper_bound)\n\n            for i in range(population_size):\n                indices = np.random.choice(np.delete(np.arange(population_size), i), 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = a + (self.mutation_factor_init - mutation_factor_change * eval_count) * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cross_prob:\n                        trial[j] = mutant[j]\n\n                trial_score = func(trial)\n                eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.population[i] = trial\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial\n                if eval_count >= self.budget:\n                    break\n\n            self.inertia_weight *= inertia_dampening\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedHybridPSODE", "description": "EnhancedHybridPSODE with strategic parameter tuning and convergence acceleration for improved solution discovery.", "configspace": "", "generation": 9, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bc77ccb6-50c7-4344-b386-3c2edeb7bb74", "metadata": {"aucs": [0.8790086340197295, 0.8594809718503991, 0.8714262695213816, 0.8716207678780874, 0.8148118753439718, 0.8861515777171897, 0.8837698586196663, 0.8642760586676631, 0.8875415051650409, 0.17615915760563494, 0.040666035401233924, 0.7659295256535265, 0.7823578748417368, 0.5914234958185203, 0.7737192496914153, 0.09191439566829707, 0.7807869480152533, 0.7210407329277733, 0.7590331568653765, 0.11314459675360233, 0.1407305539432988, 0.13631009901996916, 0.17845428088125936, 0.1267983471526002, 0.11386342865106003, 0.7676500932417867, 0.7356018349826263, 0.09414670979277939, 0.10193276386032069, 0.11305088395546858, 0.09035188810275085, 0.11106680270323754, 0.07999216304702972, 0.13030784844424492, 0.1090903000904827, 0.10358403771667746, 0.9812208644686673, 0.990148163785257, 0.986321950263512, 0.9743452358825869, 0.9818659685636542, 0.9748072437211964, 0.98661971764974, 0.9812156557752502, 0.9740022926488223, 0.6833852700092474, 0.05942439096003904, 0.4465217175737798, 0.1514783845395712, 0.15123678199973534, 0.5170565092662427, 0.08814293903164183, 0.08876749261175287, 0.08747262658556376, 0.845701053771103, 0.22080061120268113, 0.2221265392974867, 0.1951747597340192, 0.1873530869107406, 0.21150550975519744, 0.7824621767610765, 0.2369892543861204, 0.22985526164499193, 0.1480386817577546, 0.1770782741373862, 0.18761944281912457, 0.13221331799248015, 0.15624693520631971, 0.166306497598123, 0.176788284570921, 0.18538267855681922, 0.168125587221999, 0.22545986869821455, 0.01691749011125654, 0.16766231711449908, 0.16335467370892842, 0.17787696690836274, 0.18453451111061947, 0.20021626088724775, 0.14917080393166593, 0.10231439881330207, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04227577453509179, 9.999999999998899e-05, 0.015463406937756163, 9.999999999998899e-05, 9.999999999998899e-05, 0.007912297409857327, 0.05474190849592975, 0.0347173953392379, 0.06333406881715675, 0.08871671805517234, 9.999999999998899e-05, 0.03861299327396939, 0.08687706815471752, 0.054730514896239923, 0.0950761773747294, 0.04775251971242633, 0.039690469816313634, 0.05801034121549731, 0.07899798940116598, 0.12123208331162583, 0.07751605849919285, 0.10272287603858754, 0.1667072975290561, 0.08097680103844229, 0.21386019817923785, 0.29479961095671137, 0.12545230467112922, 0.1014620627460765, 0.18605330707971834, 0.0811152816510583, 0.04888538530107778, 0.16911168435320667, 0.08200525644254175, 0.5789713400219295, 0.5043819370195604, 0.5705854377131928, 0.6163712517873601, 0.1816223944309462, 0.4651433234149117, 0.5980790126143987, 0.541162923293524, 0.5641267812012832, 0.09878025836774917, 0.09868763046288298, 0.07579817115720011, 0.1370973715510745, 0.11095610730595085, 0.1089961420522001, 0.0772660606942116, 0.0907145769773724, 0.09370847262624771, 0.16405289293500191, 0.2887828416758609, 0.19000827183424995, 0.24056496988958453, 0.39234844462579455, 0.31893961924211134, 0.3395656710000532, 0.18397597950738231, 0.1905479658229332, 0.4031565466702731, 0.33260677792399607, 0.43983189821281454, 0.36254220485256616, 0.615311087137856, 0.4226488410038012, 0.5149162942423011, 0.6435465997550542, 0.5975442376758364, 0.17652395519029507, 0.33385298819738696, 0.26706626250844223, 0.15110845801174178, 0.19033927360902692, 0.29297880793709596, 0.32074966798170135, 0.2786212190051407, 0.26592013582011964, 0.20626387691568626, 0.23533300364269227, 0.21960140332542588, 0.2166261284030666, 0.21925626195719738, 0.19723829545081528, 0.239014051222031, 0.22764164621031946, 0.2065795991169087, 0.20809659194959107, 0.18777939130854893, 0.18809690808592905, 0.20055815767971685, 0.24841047782516412, 0.2154025357234416, 0.20900733796249704, 0.24370747974556117, 0.1988601853636287, 0.16528498454319784, 0.1664887652897813, 0.1529090081731017, 0.8941348821818921, 0.20070456927090463, 0.19854116635388375, 0.11323241925174188, 0.16872427211354857, 0.8866933534022886, 0.5752327821528157, 0.15641477929591274, 0.20921159029213, 0.4599269982906907, 0.22210038428329704, 0.610196133677235, 0.2118384614919675, 0.10507112973519561, 0.7060655692943145, 0.18783309517007818, 0.19180891923347498, 0.2060947082681177, 0.18466423013486566, 0.22624582819961336, 0.18989499923664865, 0.1742474071569774, 0.1691272711386469, 0.19322196335618247, 0.10818493538237195, 0.09510691300887442, 0.10941114447661404, 0.08886654951766637, 0.09665151145532214, 0.09813607733786744, 0.10580537301912951, 0.08833639634802604, 0.10554517047363443]}, "mutation_prompt": null}
{"id": "f7f2963a-731c-4c0b-a6e8-0fdb623be894", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30\n        self.final_population_size = 24  # Marginally more gradual population resizing\n        self.inertia_weight = 0.65  # Slightly increased inertia weight for better exploration\n        self.cognitive_coeff = 1.6  # Reduced to balance exploration and exploitation\n        self.social_coeff = 1.5  # Increased to improve convergence\n        self.mutation_factor_init = 0.8  # Adjusted mutation factor for refined balance\n        self.cross_prob = 0.9  # Reduced cross probability for controlled diversity\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.initial_population_size, dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.initial_population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        eval_count = 0\n        inertia_dampening = 0.97  # More gradual inertia dampening\n        mutation_factor_change = (self.mutation_factor_init - 0.55) / self.budget\n\n        while eval_count < self.budget:\n            population_size = self.initial_population_size - int(\n                (eval_count / self.budget) * (self.initial_population_size - self.final_population_size))\n\n            for i in range(population_size):\n                score = func(self.population[i])\n                eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n                if eval_count >= self.budget:\n                    break\n\n            r1 = np.random.rand(population_size, self.dim)\n            r2 = np.random.rand(population_size, self.dim)\n            cognitive_component = self.cognitive_coeff * r1 * (self.personal_best_positions[:population_size] - self.population[:population_size])\n            social_component = self.social_coeff * r2 * (self.global_best_position - self.population[:population_size])\n            self.velocities[:population_size] = (self.inertia_weight * self.velocities[:population_size]) + cognitive_component + social_component\n            self.population[:population_size] = self.population[:population_size] + self.velocities[:population_size]\n\n            self.population[:population_size] = np.clip(self.population[:population_size], self.lower_bound, self.upper_bound)\n\n            for i in range(population_size):\n                indices = np.random.choice(np.delete(np.arange(population_size), i), 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = a + (self.mutation_factor_init - mutation_factor_change * eval_count) * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cross_prob:\n                        trial[j] = mutant[j]\n\n                trial_score = func(trial)\n                eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.population[i] = trial\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial\n                if eval_count >= self.budget:\n                    break\n\n            self.inertia_weight *= inertia_dampening\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedHybridPSODE", "description": "EnhancedHybridPSODE with refined exploration-exploitation balance and dynamic parameter adjustment for improved convergence speed.", "configspace": "", "generation": 30, "fitness": 0.2797635816008652, "feedback": "The algorithm EnhancedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.26.", "error": "", "parent_id": "bc77ccb6-50c7-4344-b386-3c2edeb7bb74", "metadata": {"aucs": [0.8779869738231713, 0.8653631883080755, 0.8801835285381877, 0.892421491947181, 0.1824643431222739, 0.887038499369579, 0.8803285058414535, 0.8938219809711574, 0.8837883652711165, 0.6636924933027357, 0.04137650938167603, 0.07331702302959453, 0.7419607048769115, 0.3254454245072058, 0.723140546846025, 0.268924666771285, 0.7372288752702808, 0.049283610164020275, 0.15398869203577525, 0.10462526315229859, 0.1548067709176556, 0.10766025563610893, 0.1465695138587646, 0.15559001075103984, 0.11834986395491864, 0.18081512889004592, 0.13789561209404833, 0.12743034517253016, 0.1251072415037885, 0.10120515773894856, 0.11706836972263612, 0.10110268180935222, 0.15161805142806484, 0.15098424344907402, 0.11016680245788557, 0.0974802022543354, 0.9808882498272831, 0.9836064763670415, 0.9864280369020457, 0.9812723441208807, 0.9812749979530075, 0.9735537765354103, 0.9863291887839427, 0.9809568959033206, 0.9802157509175254, 0.3526281873481846, 0.05831205756305369, 0.42402294748575553, 0.1508804967199996, 0.17742922714230136, 0.21368667185456203, 0.08379866445386197, 0.5721009856134418, 0.7656264376260293, 0.8875313794095769, 0.2229288984569493, 0.16945780727759607, 0.21240590084340716, 0.11673130356506811, 0.1990933886159152, 0.17439640897932385, 0.347322982268628, 0.22971074265939284, 0.1537060189149655, 0.1296340848429991, 0.16657314415993807, 0.2743283202785687, 0.1272262942215009, 0.18001143737271286, 0.1812830074756856, 0.12680886142435988, 0.2048865551859168, 0.1744929018971768, 0.05321989132427429, 0.11198720327225453, 0.20543460948047254, 0.15785040069599376, 0.12985733498391694, 0.12464713328096899, 0.12721329944719306, 0.12278763919588842, 0.12333879421857141, 9.999999999998899e-05, 0.005240857962931833, 9.999999999998899e-05, 0.03226502006803844, 0.033335012816371634, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05177654456400815, 0.03361718490176702, 0.05067151333112874, 0.11438817532346024, 0.00020385892267549277, 0.04145906649943776, 0.07333514895750881, 0.04393295353179105, 0.030688636523229618, 0.06798776532047157, 0.035104117051102945, 0.15666055788528688, 0.19955292869123975, 0.19141999156916012, 0.07593412096645114, 0.09865961990753236, 0.2180359840609094, 0.07189030888312742, 0.042192910806120976, 0.2165246039606883, 0.25814564736567047, 0.21187224856384712, 0.03586554202002168, 0.11108904900244654, 0.05607737962912451, 0.08365798400297753, 0.09515707797639406, 0.46716303473918774, 0.5727485370063023, 0.5638428333207349, 0.5431139812118804, 0.5311687016213605, 0.20854173671462484, 0.5525539047993879, 0.5692576480833876, 0.5711450988577614, 0.1303562251707424, 0.10061289062197998, 0.08402143454223387, 0.10167526239486813, 0.09522903412367922, 0.09509905585968137, 0.11166181089032035, 0.09262590707482865, 0.10091335334717533, 0.1982203841818826, 0.2682295052320849, 0.2083249388023064, 0.16596850324566093, 0.2324604389709921, 0.15594616600474276, 0.6642607105558287, 0.3169894991642137, 0.22808016287023625, 0.35064634250457527, 0.3895485791197618, 0.36756902870588326, 0.1873231132462656, 0.4730807273859219, 0.42026702604991917, 0.4463461487465069, 0.4797360800018823, 0.19537518320174962, 0.2522877554746704, 0.2552080110225997, 0.311850321254852, 0.24061396191839635, 0.23588604692284854, 0.2931995415642775, 0.257352034253033, 0.41634847557549737, 0.3452625826178488, 0.2177400497272951, 0.15543370675249957, 0.21480537950043466, 0.20168708583159134, 0.21009006772865324, 0.2305833780898513, 0.1893224225241945, 0.1893823769172538, 0.21966438455913784, 0.21216020245744327, 0.19334128796360894, 0.18142864444845874, 0.22317683848866665, 0.20998795877770282, 0.21072288258640504, 0.20926239906484956, 0.20690920032687177, 0.17411531569778071, 0.895755944386334, 0.18654787976849063, 0.152111924111484, 0.9106390542210768, 0.2007435689608993, 0.8760315344889413, 0.1212683822918571, 0.16855302999102473, 0.20813381463891034, 0.6055566229730254, 0.15645762726253853, 0.16727629916220554, 0.7382753455713618, 0.5518296095599522, 0.316397235498153, 0.2103255274812441, 0.19417853658074913, 0.6861492048588909, 0.18647714949545025, 0.1885749925941801, 0.220216558853623, 0.19250653594528777, 0.19633038179429818, 0.17959900431405973, 0.20681004390567292, 0.18553451475461413, 0.19322865082429297, 0.0816588997723473, 0.08642095789630899, 0.1034756390952063, 0.08125935489941516, 0.09594620032135481, 0.08492447027471695, 0.10028160450417634, 0.10201736070533352, 0.08416497751114582]}, "mutation_prompt": null}
{"id": "c1133501-5486-4ad3-a5e6-17528b340a7a", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30\n        self.final_population_size = 25  # More gradual population resizing\n        self.inertia_weight = 0.6  # Reduced inertia weight for faster convergence\n        self.cognitive_coeff = 1.7  # Slightly increased to enhance exploration\n        self.social_coeff = 1.4  # Slightly decreased for better balance\n        self.mutation_factor_init = 0.85  # Adjusted mutation factor\n        self.cross_prob = 0.95  # Increased cross probability for more aggressive trial acceptance\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.initial_population_size, dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.initial_population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        eval_count = 0\n        inertia_dampening = 0.98  # Slightly faster inertia dampening\n        mutation_factor_change = (self.mutation_factor_init - 0.5) / self.budget\n\n        while eval_count < self.budget:\n            population_size = self.initial_population_size - int(\n                (eval_count / self.budget) * (self.initial_population_size - self.final_population_size))\n\n            for i in range(population_size):\n                score = func(self.population[i])\n                eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n                if eval_count >= self.budget:\n                    break\n\n            r1 = np.random.rand(population_size, self.dim)\n            r2 = np.random.rand(population_size, self.dim)\n            cognitive_component = self.cognitive_coeff * r1 * (self.personal_best_positions[:population_size] - self.population[:population_size])\n            social_component = self.social_coeff * r2 * (self.global_best_position - self.population[:population_size])\n            self.velocities[:population_size] = (self.inertia_weight * self.velocities[:population_size]) + cognitive_component + social_component\n            self.population[:population_size] = self.population[:population_size] + self.velocities[:population_size]\n\n            self.population[:population_size] = np.clip(self.population[:population_size], self.lower_bound, self.upper_bound)\n\n            for i in range(population_size):\n                indices = np.random.choice(np.delete(np.arange(population_size), i), 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = a + (self.mutation_factor_init - mutation_factor_change * eval_count) * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cross_prob:\n                        trial[j] = mutant[j]\n\n                trial_score = func(trial)\n                eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.population[i] = trial\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial\n                if eval_count >= self.budget:\n                    break\n\n            self.inertia_weight *= inertia_dampening\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedHybridPSODE", "description": "EnhancedHybridPSODE with strategic parameter tuning and convergence acceleration for improved solution discovery.", "configspace": "", "generation": 9, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bc77ccb6-50c7-4344-b386-3c2edeb7bb74", "metadata": {"aucs": [0.8790086340197295, 0.8594809718503991, 0.8714262695213816, 0.8716207678780874, 0.8148118753439718, 0.8861515777171897, 0.8837698586196663, 0.8642760586676631, 0.8875415051650409, 0.17615915760563494, 0.040666035401233924, 0.7659295256535265, 0.7823578748417368, 0.5914234958185203, 0.7737192496914153, 0.09191439566829707, 0.7807869480152533, 0.7210407329277733, 0.7590331568653765, 0.11314459675360233, 0.1407305539432988, 0.13631009901996916, 0.17845428088125936, 0.1267983471526002, 0.11386342865106003, 0.7676500932417867, 0.7356018349826263, 0.09414670979277939, 0.10193276386032069, 0.11305088395546858, 0.09035188810275085, 0.11106680270323754, 0.07999216304702972, 0.13030784844424492, 0.1090903000904827, 0.10358403771667746, 0.9812208644686673, 0.990148163785257, 0.986321950263512, 0.9743452358825869, 0.9818659685636542, 0.9748072437211964, 0.98661971764974, 0.9812156557752502, 0.9740022926488223, 0.6833852700092474, 0.05942439096003904, 0.4465217175737798, 0.1514783845395712, 0.15123678199973534, 0.5170565092662427, 0.08814293903164183, 0.08876749261175287, 0.08747262658556376, 0.845701053771103, 0.22080061120268113, 0.2221265392974867, 0.1951747597340192, 0.1873530869107406, 0.21150550975519744, 0.7824621767610765, 0.2369892543861204, 0.22985526164499193, 0.1480386817577546, 0.1770782741373862, 0.18761944281912457, 0.13221331799248015, 0.15624693520631971, 0.166306497598123, 0.176788284570921, 0.18538267855681922, 0.168125587221999, 0.22545986869821455, 0.01691749011125654, 0.16766231711449908, 0.16335467370892842, 0.17787696690836274, 0.18453451111061947, 0.20021626088724775, 0.14917080393166593, 0.10231439881330207, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04227577453509179, 9.999999999998899e-05, 0.015463406937756163, 9.999999999998899e-05, 9.999999999998899e-05, 0.007912297409857327, 0.05474190849592975, 0.0347173953392379, 0.06333406881715675, 0.08871671805517234, 9.999999999998899e-05, 0.03861299327396939, 0.08687706815471752, 0.054730514896239923, 0.0950761773747294, 0.04775251971242633, 0.039690469816313634, 0.05801034121549731, 0.07899798940116598, 0.12123208331162583, 0.07751605849919285, 0.10272287603858754, 0.1667072975290561, 0.08097680103844229, 0.21386019817923785, 0.29479961095671137, 0.12545230467112922, 0.1014620627460765, 0.18605330707971834, 0.0811152816510583, 0.04888538530107778, 0.16911168435320667, 0.08200525644254175, 0.5789713400219295, 0.5043819370195604, 0.5705854377131928, 0.6163712517873601, 0.1816223944309462, 0.4651433234149117, 0.5980790126143987, 0.541162923293524, 0.5641267812012832, 0.09878025836774917, 0.09868763046288298, 0.07579817115720011, 0.1370973715510745, 0.11095610730595085, 0.1089961420522001, 0.0772660606942116, 0.0907145769773724, 0.09370847262624771, 0.16405289293500191, 0.2887828416758609, 0.19000827183424995, 0.24056496988958453, 0.39234844462579455, 0.31893961924211134, 0.3395656710000532, 0.18397597950738231, 0.1905479658229332, 0.4031565466702731, 0.33260677792399607, 0.43983189821281454, 0.36254220485256616, 0.615311087137856, 0.4226488410038012, 0.5149162942423011, 0.6435465997550542, 0.5975442376758364, 0.17652395519029507, 0.33385298819738696, 0.26706626250844223, 0.15110845801174178, 0.19033927360902692, 0.29297880793709596, 0.32074966798170135, 0.2786212190051407, 0.26592013582011964, 0.20626387691568626, 0.23533300364269227, 0.21960140332542588, 0.2166261284030666, 0.21925626195719738, 0.19723829545081528, 0.239014051222031, 0.22764164621031946, 0.2065795991169087, 0.20809659194959107, 0.18777939130854893, 0.18809690808592905, 0.20055815767971685, 0.24841047782516412, 0.2154025357234416, 0.20900733796249704, 0.24370747974556117, 0.1988601853636287, 0.16528498454319784, 0.1664887652897813, 0.1529090081731017, 0.8941348821818921, 0.20070456927090463, 0.19854116635388375, 0.11323241925174188, 0.16872427211354857, 0.8866933534022886, 0.5752327821528157, 0.15641477929591274, 0.20921159029213, 0.4599269982906907, 0.22210038428329704, 0.610196133677235, 0.2118384614919675, 0.10507112973519561, 0.7060655692943145, 0.18783309517007818, 0.19180891923347498, 0.2060947082681177, 0.18466423013486566, 0.22624582819961336, 0.18989499923664865, 0.1742474071569774, 0.1691272711386469, 0.19322196335618247, 0.10818493538237195, 0.09510691300887442, 0.10941114447661404, 0.08886654951766637, 0.09665151145532214, 0.09813607733786744, 0.10580537301912951, 0.08833639634802604, 0.10554517047363443]}, "mutation_prompt": null}
{"id": "cc520127-7f2f-47b5-b0e9-0f4083d4d57d", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30\n        self.final_population_size = 25  # More gradual population resizing\n        self.inertia_weight = 0.6  # Reduced inertia weight for faster convergence\n        self.cognitive_coeff = 1.7  # Slightly increased to enhance exploration\n        self.social_coeff = 1.4  # Slightly decreased for better balance\n        self.mutation_factor_init = 0.85  # Adjusted mutation factor\n        self.cross_prob = 0.95  # Increased cross probability for more aggressive trial acceptance\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.initial_population_size, dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.initial_population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        eval_count = 0\n        inertia_dampening = 0.98  # Slightly faster inertia dampening\n        mutation_factor_change = (self.mutation_factor_init - 0.5) / self.budget\n\n        while eval_count < self.budget:\n            population_size = self.initial_population_size - int(\n                (eval_count / self.budget) * (self.initial_population_size - self.final_population_size))\n\n            for i in range(population_size):\n                score = func(self.population[i])\n                eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n                if eval_count >= self.budget:\n                    break\n\n            r1 = np.random.rand(population_size, self.dim)\n            r2 = np.random.rand(population_size, self.dim)\n            cognitive_component = self.cognitive_coeff * r1 * (self.personal_best_positions[:population_size] - self.population[:population_size])\n            social_component = self.social_coeff * r2 * (self.global_best_position - self.population[:population_size])\n            self.velocities[:population_size] = (self.inertia_weight * self.velocities[:population_size]) + cognitive_component + social_component\n            self.population[:population_size] = self.population[:population_size] + self.velocities[:population_size]\n\n            self.population[:population_size] = np.clip(self.population[:population_size], self.lower_bound, self.upper_bound)\n\n            for i in range(population_size):\n                indices = np.random.choice(np.delete(np.arange(population_size), i), 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = a + (self.mutation_factor_init - mutation_factor_change * eval_count) * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cross_prob:\n                        trial[j] = mutant[j]\n\n                trial_score = func(trial)\n                eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.population[i] = trial\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial\n                if eval_count >= self.budget:\n                    break\n\n            self.inertia_weight *= inertia_dampening\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedHybridPSODE", "description": "EnhancedHybridPSODE with strategic parameter tuning and convergence acceleration for improved solution discovery.", "configspace": "", "generation": 9, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bc77ccb6-50c7-4344-b386-3c2edeb7bb74", "metadata": {"aucs": [0.8790086340197295, 0.8594809718503991, 0.8714262695213816, 0.8716207678780874, 0.8148118753439718, 0.8861515777171897, 0.8837698586196663, 0.8642760586676631, 0.8875415051650409, 0.17615915760563494, 0.040666035401233924, 0.7659295256535265, 0.7823578748417368, 0.5914234958185203, 0.7737192496914153, 0.09191439566829707, 0.7807869480152533, 0.7210407329277733, 0.7590331568653765, 0.11314459675360233, 0.1407305539432988, 0.13631009901996916, 0.17845428088125936, 0.1267983471526002, 0.11386342865106003, 0.7676500932417867, 0.7356018349826263, 0.09414670979277939, 0.10193276386032069, 0.11305088395546858, 0.09035188810275085, 0.11106680270323754, 0.07999216304702972, 0.13030784844424492, 0.1090903000904827, 0.10358403771667746, 0.9812208644686673, 0.990148163785257, 0.986321950263512, 0.9743452358825869, 0.9818659685636542, 0.9748072437211964, 0.98661971764974, 0.9812156557752502, 0.9740022926488223, 0.6833852700092474, 0.05942439096003904, 0.4465217175737798, 0.1514783845395712, 0.15123678199973534, 0.5170565092662427, 0.08814293903164183, 0.08876749261175287, 0.08747262658556376, 0.845701053771103, 0.22080061120268113, 0.2221265392974867, 0.1951747597340192, 0.1873530869107406, 0.21150550975519744, 0.7824621767610765, 0.2369892543861204, 0.22985526164499193, 0.1480386817577546, 0.1770782741373862, 0.18761944281912457, 0.13221331799248015, 0.15624693520631971, 0.166306497598123, 0.176788284570921, 0.18538267855681922, 0.168125587221999, 0.22545986869821455, 0.01691749011125654, 0.16766231711449908, 0.16335467370892842, 0.17787696690836274, 0.18453451111061947, 0.20021626088724775, 0.14917080393166593, 0.10231439881330207, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04227577453509179, 9.999999999998899e-05, 0.015463406937756163, 9.999999999998899e-05, 9.999999999998899e-05, 0.007912297409857327, 0.05474190849592975, 0.0347173953392379, 0.06333406881715675, 0.08871671805517234, 9.999999999998899e-05, 0.03861299327396939, 0.08687706815471752, 0.054730514896239923, 0.0950761773747294, 0.04775251971242633, 0.039690469816313634, 0.05801034121549731, 0.07899798940116598, 0.12123208331162583, 0.07751605849919285, 0.10272287603858754, 0.1667072975290561, 0.08097680103844229, 0.21386019817923785, 0.29479961095671137, 0.12545230467112922, 0.1014620627460765, 0.18605330707971834, 0.0811152816510583, 0.04888538530107778, 0.16911168435320667, 0.08200525644254175, 0.5789713400219295, 0.5043819370195604, 0.5705854377131928, 0.6163712517873601, 0.1816223944309462, 0.4651433234149117, 0.5980790126143987, 0.541162923293524, 0.5641267812012832, 0.09878025836774917, 0.09868763046288298, 0.07579817115720011, 0.1370973715510745, 0.11095610730595085, 0.1089961420522001, 0.0772660606942116, 0.0907145769773724, 0.09370847262624771, 0.16405289293500191, 0.2887828416758609, 0.19000827183424995, 0.24056496988958453, 0.39234844462579455, 0.31893961924211134, 0.3395656710000532, 0.18397597950738231, 0.1905479658229332, 0.4031565466702731, 0.33260677792399607, 0.43983189821281454, 0.36254220485256616, 0.615311087137856, 0.4226488410038012, 0.5149162942423011, 0.6435465997550542, 0.5975442376758364, 0.17652395519029507, 0.33385298819738696, 0.26706626250844223, 0.15110845801174178, 0.19033927360902692, 0.29297880793709596, 0.32074966798170135, 0.2786212190051407, 0.26592013582011964, 0.20626387691568626, 0.23533300364269227, 0.21960140332542588, 0.2166261284030666, 0.21925626195719738, 0.19723829545081528, 0.239014051222031, 0.22764164621031946, 0.2065795991169087, 0.20809659194959107, 0.18777939130854893, 0.18809690808592905, 0.20055815767971685, 0.24841047782516412, 0.2154025357234416, 0.20900733796249704, 0.24370747974556117, 0.1988601853636287, 0.16528498454319784, 0.1664887652897813, 0.1529090081731017, 0.8941348821818921, 0.20070456927090463, 0.19854116635388375, 0.11323241925174188, 0.16872427211354857, 0.8866933534022886, 0.5752327821528157, 0.15641477929591274, 0.20921159029213, 0.4599269982906907, 0.22210038428329704, 0.610196133677235, 0.2118384614919675, 0.10507112973519561, 0.7060655692943145, 0.18783309517007818, 0.19180891923347498, 0.2060947082681177, 0.18466423013486566, 0.22624582819961336, 0.18989499923664865, 0.1742474071569774, 0.1691272711386469, 0.19322196335618247, 0.10818493538237195, 0.09510691300887442, 0.10941114447661404, 0.08886654951766637, 0.09665151145532214, 0.09813607733786744, 0.10580537301912951, 0.08833639634802604, 0.10554517047363443]}, "mutation_prompt": null}
{"id": "af9c7347-3908-47a4-bd67-990d4874ebde", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 32  # Slightly increased initial population\n        self.final_population_size = 24  # More dynamic population resizing\n        self.inertia_weight = 0.59  # Further reduced inertia weight for quicker convergence\n        self.cognitive_coeff = 1.8  # Increased to further enhance exploration\n        self.social_coeff = 1.3  # Slightly decreased to improve balance\n        self.mutation_factor_init = 0.88  # Adjusted mutation factor for diversity\n        self.cross_prob = 0.96  # Higher cross probability for more aggressive trial acceptance\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.initial_population_size, dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.initial_population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        eval_count = 0\n        inertia_dampening = 0.99  # Adjusted for slightly faster dampening\n        mutation_factor_change = (self.mutation_factor_init - 0.5) / self.budget\n\n        while eval_count < self.budget:\n            population_size = self.initial_population_size - int(\n                (eval_count / self.budget) * (self.initial_population_size - self.final_population_size))\n\n            for i in range(population_size):\n                score = func(self.population[i])\n                eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n                if eval_count >= self.budget:\n                    break\n\n            r1 = np.random.rand(population_size, self.dim)\n            r2 = np.random.rand(population_size, self.dim)\n            cognitive_component = self.cognitive_coeff * r1 * (self.personal_best_positions[:population_size] - self.population[:population_size])\n            social_component = self.social_coeff * r2 * (self.global_best_position - self.population[:population_size])\n            self.velocities[:population_size] = (self.inertia_weight * self.velocities[:population_size]) + cognitive_component + social_component\n            self.population[:population_size] = self.population[:population_size] + self.velocities[:population_size]\n\n            self.population[:population_size] = np.clip(self.population[:population_size], self.lower_bound, self.upper_bound)\n\n            for i in range(population_size):\n                indices = np.random.choice(np.delete(np.arange(population_size), i), 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = a + (self.mutation_factor_init - mutation_factor_change * eval_count) * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cross_prob:\n                        trial[j] = mutant[j]\n\n                trial_score = func(trial)\n                eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.population[i] = trial\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial\n                if eval_count >= self.budget:\n                    break\n\n            self.inertia_weight *= inertia_dampening\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedHybridPSODE", "description": "EnhancedHybridPSODE with dynamic parameter tuning and adaptive population control for faster convergence.", "configspace": "", "generation": 33, "fitness": 0.33640811566423456, "feedback": "The algorithm EnhancedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.29.", "error": "", "parent_id": "bc77ccb6-50c7-4344-b386-3c2edeb7bb74", "metadata": {"aucs": [0.854841170199753, 0.8337434860933706, 0.8469967212274282, 0.8455483575894931, 0.8180411099900293, 0.8538268412181504, 0.8661472530299321, 0.8586874660363351, 0.8309962951446832, 0.7294235129780255, 0.6998937295171335, 0.6094117259358, 0.7323993392336852, 0.7178626996713835, 0.7527717430435938, 0.7303553160756826, 0.7398023539588414, 0.7345810602280723, 0.14931063233199515, 0.13351555112136448, 0.6622369060538811, 0.14066429175160333, 0.1726157421192509, 0.13536244333222003, 0.16927292151669604, 0.17310903385891174, 0.16665051046678891, 0.10286767970176403, 0.11062674053789101, 0.09841548178142223, 0.11766048483176039, 0.13749285478756756, 0.1497628696663631, 0.12877821416404456, 0.10536676396505973, 0.14711824380142302, 0.9856512933902406, 0.9787812971815051, 0.9884286877792379, 0.9839714483074401, 0.9785587651669921, 0.9797841168656637, 0.9905617241107126, 0.9770933132040401, 0.9833577911084052, 0.7048655414793028, 0.7211467168240129, 0.7052216937557363, 0.7191710474747863, 0.14908004501186256, 0.7445236695618853, 0.7205652174423838, 0.5511206013439216, 0.6527132167092512, 0.3481079237327044, 0.2220022876779414, 0.22260963171491, 0.2773721531139688, 0.8106141678517857, 0.193143748525206, 0.7282030748672175, 0.2380711802780806, 0.1150872978406785, 0.15842663143275082, 0.12928270349161397, 0.1819346820411205, 0.16708296455829608, 0.20992905560266106, 0.12237661338006744, 0.3351147961480979, 0.19017807601288228, 0.21338139704086945, 0.18076589346594996, 0.13757489068267315, 0.22643758141871184, 0.18454500747880243, 0.24556725003162827, 0.18134559209726409, 0.22223500435779941, 0.13360190580985276, 0.12530423963151405, 9.999999999998899e-05, 0.04106590289391676, 0.009052554914146471, 9.999999999998899e-05, 0.035304986290289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07486847503284044, 0.07747999204176736, 0.03671692122265646, 0.12597768691781308, 0.08375568218519003, 9.999999999998899e-05, 0.025237010735392862, 0.09410909002513912, 0.0728437426819526, 0.042060846996438195, 0.046510822810082564, 0.07634599429344835, 0.1226496143325938, 0.09744350257911849, 0.14932735382092965, 0.07586047305840182, 0.2842119416221408, 0.08389114588004398, 0.08772702619431327, 0.06467686522928273, 9.999999999998899e-05, 0.1307702082894382, 0.00630684225609679, 0.20421519971616386, 0.08524348655987957, 0.19106498023883534, 0.04781213433341358, 0.09314857491772333, 0.5185871615500623, 0.5649049736705083, 0.5689980628370421, 0.5514152013975806, 0.5490509555687053, 0.20790007435716462, 0.5973916126254126, 0.6530010078799888, 0.5781118929648357, 0.08304826450485725, 0.07600267204559463, 0.11491859562690787, 0.12362571842962733, 0.13043972677666205, 0.13716767684518238, 0.12653952287696635, 0.13657113960499223, 0.09709974675359878, 0.14374469357949093, 0.18695456979770098, 0.18923957478194653, 0.2981175702971416, 0.24944309371380124, 0.1406468119143186, 0.3294200634479776, 0.17120108790425115, 0.28248616584533215, 0.48908365950123567, 0.6094958590761, 0.6544264222405355, 0.2899814886249241, 0.5453506268139661, 0.36763381267556094, 0.4436084820302868, 0.49875119412574753, 0.5928333162885812, 0.32402022101522454, 0.25792803367766615, 0.2829233453807415, 0.4076522537381234, 0.2622079541846637, 0.32710742616195454, 0.3432538164896639, 0.23390776228649435, 0.30096566980124007, 0.25365634866961995, 0.18875259829404345, 0.267932015646579, 0.20209338773698615, 0.21300809713335944, 0.23998942892561703, 0.24237800148333477, 0.22644071122299358, 0.246895492041457, 0.2407489637587219, 0.7381993016559744, 0.24476307319944546, 0.7596076646020812, 0.238690415179029, 0.2126182009475257, 0.21898585008086835, 0.21703275509314346, 0.2161411307226221, 0.8804029305720451, 0.878470043102824, 0.154132523530214, 0.882908229087604, 0.19873057126016025, 0.19745108635270425, 0.8419510619466086, 0.16897779637434018, 0.8931557330242321, 0.7672084987916588, 0.1683188460864965, 0.2078508423927442, 0.7558544886253658, 0.16710346584180424, 0.2089793176375876, 0.2082782456388691, 0.7949888960681359, 0.8308106177184313, 0.19654164232329197, 0.19487711470545, 0.19335537842386907, 0.19706767001895187, 0.21178877924311013, 0.21062142901655512, 0.20665390909466186, 0.18865726577078357, 0.18353189923188806, 0.09784604018523879, 0.09464449116249218, 0.09282370571545195, 0.08584127053615209, 0.08156069572947378, 0.089102552583189, 0.13650074412598556, 0.07560180769216351, 0.07904243372709896]}, "mutation_prompt": null}
{"id": "338977c7-4aa7-45b2-8638-9093dcd83d15", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 32  # Slightly increased initial population\n        self.final_population_size = 24  # More dynamic population resizing\n        self.inertia_weight = 0.59  # Further reduced inertia weight for quicker convergence\n        self.cognitive_coeff = 1.8  # Increased to further enhance exploration\n        self.social_coeff = 1.3  # Slightly decreased to improve balance\n        self.mutation_factor_init = 0.88  # Adjusted mutation factor for diversity\n        self.cross_prob = 0.96  # Higher cross probability for more aggressive trial acceptance\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.initial_population_size, dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.initial_population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        eval_count = 0\n        inertia_dampening = 0.99  # Adjusted for slightly faster dampening\n        mutation_factor_change = (self.mutation_factor_init - 0.5) / self.budget\n\n        while eval_count < self.budget:\n            population_size = self.initial_population_size - int(\n                (eval_count / self.budget) * (self.initial_population_size - self.final_population_size))\n\n            for i in range(population_size):\n                score = func(self.population[i])\n                eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n                if eval_count >= self.budget:\n                    break\n\n            r1 = np.random.rand(population_size, self.dim)\n            r2 = np.random.rand(population_size, self.dim)\n            cognitive_component = self.cognitive_coeff * r1 * (self.personal_best_positions[:population_size] - self.population[:population_size])\n            social_component = self.social_coeff * r2 * (self.global_best_position - self.population[:population_size])\n            self.velocities[:population_size] = (self.inertia_weight * self.velocities[:population_size]) + cognitive_component + social_component\n            self.population[:population_size] = self.population[:population_size] + self.velocities[:population_size]\n\n            self.population[:population_size] = np.clip(self.population[:population_size], self.lower_bound, self.upper_bound)\n\n            for i in range(population_size):\n                indices = np.random.choice(np.delete(np.arange(population_size), i), 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = a + (self.mutation_factor_init - mutation_factor_change * eval_count) * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cross_prob:\n                        trial[j] = mutant[j]\n\n                trial_score = func(trial)\n                eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.population[i] = trial\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial\n                if eval_count >= self.budget:\n                    break\n\n            self.inertia_weight *= inertia_dampening\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedHybridPSODE", "description": "EnhancedHybridPSODE with dynamic parameter tuning and adaptive population control for faster convergence.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "af9c7347-3908-47a4-bd67-990d4874ebde", "metadata": {"aucs": [0.854841170199753, 0.8337434860933706, 0.8469967212274282, 0.8455483575894931, 0.8180411099900293, 0.8538268412181504, 0.8661472530299321, 0.8586874660363351, 0.8309962951446832, 0.7294235129780255, 0.6998937295171335, 0.6094117259358, 0.7323993392336852, 0.7178626996713835, 0.7527717430435938, 0.7303553160756826, 0.7398023539588414, 0.7345810602280723, 0.14931063233199515, 0.13351555112136448, 0.6622369060538811, 0.14066429175160333, 0.1726157421192509, 0.13536244333222003, 0.16927292151669604, 0.17310903385891174, 0.16665051046678891, 0.10286767970176403, 0.11062674053789101, 0.09841548178142223, 0.11766048483176039, 0.13749285478756756, 0.1497628696663631, 0.12877821416404456, 0.10536676396505973, 0.14711824380142302, 0.9856512933902406, 0.9787812971815051, 0.9884286877792379, 0.9839714483074401, 0.9785587651669921, 0.9797841168656637, 0.9905617241107126, 0.9770933132040401, 0.9833577911084052, 0.7048655414793028, 0.7211467168240129, 0.7052216937557363, 0.7191710474747863, 0.14908004501186256, 0.7445236695618853, 0.7205652174423838, 0.5511206013439216, 0.6527132167092512, 0.3481079237327044, 0.2220022876779414, 0.22260963171491, 0.2773721531139688, 0.8106141678517857, 0.193143748525206, 0.7282030748672175, 0.2380711802780806, 0.1150872978406785, 0.15842663143275082, 0.12928270349161397, 0.1819346820411205, 0.16708296455829608, 0.20992905560266106, 0.12237661338006744, 0.3351147961480979, 0.19017807601288228, 0.21338139704086945, 0.18076589346594996, 0.13757489068267315, 0.22643758141871184, 0.18454500747880243, 0.24556725003162827, 0.18134559209726409, 0.22223500435779941, 0.13360190580985276, 0.12530423963151405, 9.999999999998899e-05, 0.04106590289391676, 0.009052554914146471, 9.999999999998899e-05, 0.035304986290289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07486847503284044, 0.07747999204176736, 0.03671692122265646, 0.12597768691781308, 0.08375568218519003, 9.999999999998899e-05, 0.025237010735392862, 0.09410909002513912, 0.0728437426819526, 0.042060846996438195, 0.046510822810082564, 0.07634599429344835, 0.1226496143325938, 0.09744350257911849, 0.14932735382092965, 0.07586047305840182, 0.2842119416221408, 0.08389114588004398, 0.08772702619431327, 0.06467686522928273, 9.999999999998899e-05, 0.1307702082894382, 0.00630684225609679, 0.20421519971616386, 0.08524348655987957, 0.19106498023883534, 0.04781213433341358, 0.09314857491772333, 0.5185871615500623, 0.5649049736705083, 0.5689980628370421, 0.5514152013975806, 0.5490509555687053, 0.20790007435716462, 0.5973916126254126, 0.6530010078799888, 0.5781118929648357, 0.08304826450485725, 0.07600267204559463, 0.11491859562690787, 0.12362571842962733, 0.13043972677666205, 0.13716767684518238, 0.12653952287696635, 0.13657113960499223, 0.09709974675359878, 0.14374469357949093, 0.18695456979770098, 0.18923957478194653, 0.2981175702971416, 0.24944309371380124, 0.1406468119143186, 0.3294200634479776, 0.17120108790425115, 0.28248616584533215, 0.48908365950123567, 0.6094958590761, 0.6544264222405355, 0.2899814886249241, 0.5453506268139661, 0.36763381267556094, 0.4436084820302868, 0.49875119412574753, 0.5928333162885812, 0.32402022101522454, 0.25792803367766615, 0.2829233453807415, 0.4076522537381234, 0.2622079541846637, 0.32710742616195454, 0.3432538164896639, 0.23390776228649435, 0.30096566980124007, 0.25365634866961995, 0.18875259829404345, 0.267932015646579, 0.20209338773698615, 0.21300809713335944, 0.23998942892561703, 0.24237800148333477, 0.22644071122299358, 0.246895492041457, 0.2407489637587219, 0.7381993016559744, 0.24476307319944546, 0.7596076646020812, 0.238690415179029, 0.2126182009475257, 0.21898585008086835, 0.21703275509314346, 0.2161411307226221, 0.8804029305720451, 0.878470043102824, 0.154132523530214, 0.882908229087604, 0.19873057126016025, 0.19745108635270425, 0.8419510619466086, 0.16897779637434018, 0.8931557330242321, 0.7672084987916588, 0.1683188460864965, 0.2078508423927442, 0.7558544886253658, 0.16710346584180424, 0.2089793176375876, 0.2082782456388691, 0.7949888960681359, 0.8308106177184313, 0.19654164232329197, 0.19487711470545, 0.19335537842386907, 0.19706767001895187, 0.21178877924311013, 0.21062142901655512, 0.20665390909466186, 0.18865726577078357, 0.18353189923188806, 0.09784604018523879, 0.09464449116249218, 0.09282370571545195, 0.08584127053615209, 0.08156069572947378, 0.089102552583189, 0.13650074412598556, 0.07560180769216351, 0.07904243372709896]}, "mutation_prompt": null}
{"id": "8a413c01-7155-4972-9588-03fc26d65fa4", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 32  # Slightly increased initial population\n        self.final_population_size = 24  # More dynamic population resizing\n        self.inertia_weight = 0.59  # Further reduced inertia weight for quicker convergence\n        self.cognitive_coeff = 1.8  # Increased to further enhance exploration\n        self.social_coeff = 1.3  # Slightly decreased to improve balance\n        self.mutation_factor_init = 0.88  # Adjusted mutation factor for diversity\n        self.cross_prob = 0.96  # Higher cross probability for more aggressive trial acceptance\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.initial_population_size, dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.initial_population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        eval_count = 0\n        inertia_dampening = 0.99  # Adjusted for slightly faster dampening\n        mutation_factor_change = (self.mutation_factor_init - 0.5) / self.budget\n\n        while eval_count < self.budget:\n            population_size = self.initial_population_size - int(\n                (eval_count / self.budget) * (self.initial_population_size - self.final_population_size))\n\n            for i in range(population_size):\n                score = func(self.population[i])\n                eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n                if eval_count >= self.budget:\n                    break\n\n            r1 = np.random.rand(population_size, self.dim)\n            r2 = np.random.rand(population_size, self.dim)\n            cognitive_component = self.cognitive_coeff * r1 * (self.personal_best_positions[:population_size] - self.population[:population_size])\n            social_component = self.social_coeff * r2 * (self.global_best_position - self.population[:population_size])\n            self.velocities[:population_size] = (self.inertia_weight * self.velocities[:population_size]) + cognitive_component + social_component\n            self.population[:population_size] = self.population[:population_size] + self.velocities[:population_size]\n\n            self.population[:population_size] = np.clip(self.population[:population_size], self.lower_bound, self.upper_bound)\n\n            for i in range(population_size):\n                indices = np.random.choice(np.delete(np.arange(population_size), i), 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = a + (self.mutation_factor_init - mutation_factor_change * eval_count) * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cross_prob:\n                        trial[j] = mutant[j]\n\n                trial_score = func(trial)\n                eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.population[i] = trial\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial\n                if eval_count >= self.budget:\n                    break\n\n            self.inertia_weight *= inertia_dampening\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedHybridPSODE", "description": "EnhancedHybridPSODE with dynamic parameter tuning and adaptive population control for faster convergence.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "af9c7347-3908-47a4-bd67-990d4874ebde", "metadata": {"aucs": [0.854841170199753, 0.8337434860933706, 0.8469967212274282, 0.8455483575894931, 0.8180411099900293, 0.8538268412181504, 0.8661472530299321, 0.8586874660363351, 0.8309962951446832, 0.7294235129780255, 0.6998937295171335, 0.6094117259358, 0.7323993392336852, 0.7178626996713835, 0.7527717430435938, 0.7303553160756826, 0.7398023539588414, 0.7345810602280723, 0.14931063233199515, 0.13351555112136448, 0.6622369060538811, 0.14066429175160333, 0.1726157421192509, 0.13536244333222003, 0.16927292151669604, 0.17310903385891174, 0.16665051046678891, 0.10286767970176403, 0.11062674053789101, 0.09841548178142223, 0.11766048483176039, 0.13749285478756756, 0.1497628696663631, 0.12877821416404456, 0.10536676396505973, 0.14711824380142302, 0.9856512933902406, 0.9787812971815051, 0.9884286877792379, 0.9839714483074401, 0.9785587651669921, 0.9797841168656637, 0.9905617241107126, 0.9770933132040401, 0.9833577911084052, 0.7048655414793028, 0.7211467168240129, 0.7052216937557363, 0.7191710474747863, 0.14908004501186256, 0.7445236695618853, 0.7205652174423838, 0.5511206013439216, 0.6527132167092512, 0.3481079237327044, 0.2220022876779414, 0.22260963171491, 0.2773721531139688, 0.8106141678517857, 0.193143748525206, 0.7282030748672175, 0.2380711802780806, 0.1150872978406785, 0.15842663143275082, 0.12928270349161397, 0.1819346820411205, 0.16708296455829608, 0.20992905560266106, 0.12237661338006744, 0.3351147961480979, 0.19017807601288228, 0.21338139704086945, 0.18076589346594996, 0.13757489068267315, 0.22643758141871184, 0.18454500747880243, 0.24556725003162827, 0.18134559209726409, 0.22223500435779941, 0.13360190580985276, 0.12530423963151405, 9.999999999998899e-05, 0.04106590289391676, 0.009052554914146471, 9.999999999998899e-05, 0.035304986290289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07486847503284044, 0.07747999204176736, 0.03671692122265646, 0.12597768691781308, 0.08375568218519003, 9.999999999998899e-05, 0.025237010735392862, 0.09410909002513912, 0.0728437426819526, 0.042060846996438195, 0.046510822810082564, 0.07634599429344835, 0.1226496143325938, 0.09744350257911849, 0.14932735382092965, 0.07586047305840182, 0.2842119416221408, 0.08389114588004398, 0.08772702619431327, 0.06467686522928273, 9.999999999998899e-05, 0.1307702082894382, 0.00630684225609679, 0.20421519971616386, 0.08524348655987957, 0.19106498023883534, 0.04781213433341358, 0.09314857491772333, 0.5185871615500623, 0.5649049736705083, 0.5689980628370421, 0.5514152013975806, 0.5490509555687053, 0.20790007435716462, 0.5973916126254126, 0.6530010078799888, 0.5781118929648357, 0.08304826450485725, 0.07600267204559463, 0.11491859562690787, 0.12362571842962733, 0.13043972677666205, 0.13716767684518238, 0.12653952287696635, 0.13657113960499223, 0.09709974675359878, 0.14374469357949093, 0.18695456979770098, 0.18923957478194653, 0.2981175702971416, 0.24944309371380124, 0.1406468119143186, 0.3294200634479776, 0.17120108790425115, 0.28248616584533215, 0.48908365950123567, 0.6094958590761, 0.6544264222405355, 0.2899814886249241, 0.5453506268139661, 0.36763381267556094, 0.4436084820302868, 0.49875119412574753, 0.5928333162885812, 0.32402022101522454, 0.25792803367766615, 0.2829233453807415, 0.4076522537381234, 0.2622079541846637, 0.32710742616195454, 0.3432538164896639, 0.23390776228649435, 0.30096566980124007, 0.25365634866961995, 0.18875259829404345, 0.267932015646579, 0.20209338773698615, 0.21300809713335944, 0.23998942892561703, 0.24237800148333477, 0.22644071122299358, 0.246895492041457, 0.2407489637587219, 0.7381993016559744, 0.24476307319944546, 0.7596076646020812, 0.238690415179029, 0.2126182009475257, 0.21898585008086835, 0.21703275509314346, 0.2161411307226221, 0.8804029305720451, 0.878470043102824, 0.154132523530214, 0.882908229087604, 0.19873057126016025, 0.19745108635270425, 0.8419510619466086, 0.16897779637434018, 0.8931557330242321, 0.7672084987916588, 0.1683188460864965, 0.2078508423927442, 0.7558544886253658, 0.16710346584180424, 0.2089793176375876, 0.2082782456388691, 0.7949888960681359, 0.8308106177184313, 0.19654164232329197, 0.19487711470545, 0.19335537842386907, 0.19706767001895187, 0.21178877924311013, 0.21062142901655512, 0.20665390909466186, 0.18865726577078357, 0.18353189923188806, 0.09784604018523879, 0.09464449116249218, 0.09282370571545195, 0.08584127053615209, 0.08156069572947378, 0.089102552583189, 0.13650074412598556, 0.07560180769216351, 0.07904243372709896]}, "mutation_prompt": null}
{"id": "6d1a4ffb-975f-473f-832a-5bfbd91b766c", "solution": "import numpy as np\n\nclass OptimizedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 32\n        self.final_population_size = 24\n        self.inertia_weight = 0.56  # Reduced further for enhanced convergence\n        self.cognitive_coeff = 1.85  # Slightly increased for better exploration\n        self.social_coeff = 1.35  # Slightly increased to enhance social learning\n        self.mutation_factor_init = 0.86  # Minor reduction for more controlled diversity\n        self.cross_prob = 0.95  # Reduced slightly for balanced exploitation\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.initial_population_size, dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.initial_population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        eval_count = 0\n        inertia_dampening = 0.995  # Adjusted for more stable dampening\n        mutation_factor_change = (self.mutation_factor_init - 0.5) / self.budget\n\n        while eval_count < self.budget:\n            population_size = self.initial_population_size - int(\n                (eval_count / self.budget) * (self.initial_population_size - self.final_population_size))\n\n            for i in range(population_size):\n                score = func(self.population[i])\n                eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n                if eval_count >= self.budget:\n                    break\n\n            r1 = np.random.rand(population_size, self.dim)\n            r2 = np.random.rand(population_size, self.dim)\n            cognitive_component = self.cognitive_coeff * r1 * (self.personal_best_positions[:population_size] - self.population[:population_size])\n            social_component = self.social_coeff * r2 * (self.global_best_position - self.population[:population_size])\n            self.velocities[:population_size] = (self.inertia_weight * self.velocities[:population_size]) + cognitive_component + social_component\n            self.population[:population_size] = self.population[:population_size] + self.velocities[:population_size]\n\n            self.population[:population_size] = np.clip(self.population[:population_size], self.lower_bound, self.upper_bound)\n\n            for i in range(population_size):\n                indices = np.random.choice(np.delete(np.arange(population_size), i), 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = a + (self.mutation_factor_init - mutation_factor_change * eval_count) * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cross_prob:\n                        trial[j] = mutant[j]\n\n                trial_score = func(trial)\n                eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.population[i] = trial\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial\n                if eval_count >= self.budget:\n                    break\n\n            self.inertia_weight *= inertia_dampening\n\n        return self.global_best_position, self.global_best_score", "name": "OptimizedHybridPSODE", "description": "OptimizedHybridPSODE with fine-tuned inertia and mutation parameters for enhanced convergence speed.", "configspace": "", "generation": 36, "fitness": 0.3128355526590737, "feedback": "The algorithm OptimizedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.28.", "error": "", "parent_id": "af9c7347-3908-47a4-bd67-990d4874ebde", "metadata": {"aucs": [0.8210536439377845, 0.8379344983619875, 0.8428794537814706, 0.8609926728109226, 0.18189564491002186, 0.8454637845374138, 0.8438821393577317, 0.8483094937909388, 0.18291371183181804, 0.7142335298246654, 0.6400544097743612, 0.707626373805391, 0.7047751856073319, 0.40464182663390535, 0.6871702145853891, 0.6424880868634926, 0.7011999395790911, 0.7213774286689155, 0.10695840147821478, 0.17034904551887597, 0.1356376266986472, 0.13978297977857224, 0.17462399106950233, 0.16761486909890666, 0.13411492564600025, 0.17123536839315334, 0.14644165852108149, 0.15139149983965705, 0.1260891309580816, 0.11094936465990557, 0.11442222232573063, 0.13331233796738584, 0.13573606557796125, 0.12430982321435491, 0.09814105899372572, 0.11122592140047405, 0.9856313418995867, 0.9778144382463831, 0.9884197920653354, 0.9847654016873725, 0.9783688566357001, 0.9745336375253916, 0.9780853708586091, 0.9796244880552659, 0.9799479562276404, 0.6596992770855324, 0.6906470631473981, 0.6731980355193721, 0.6809848494615105, 0.666826769711787, 0.7097420901550421, 0.6813796146070514, 0.08759248077638804, 0.6834490800479385, 0.2253866229201199, 0.801484303074998, 0.803131633245749, 0.26862599536891707, 0.15863283976625808, 0.19337004939693614, 0.16618536162164887, 0.22718537097223757, 0.7343491964486153, 0.18089876537948624, 0.2401165526186082, 0.1813051057901679, 0.20826679229407297, 0.20809760670501476, 0.18128443974737896, 0.18815556980025727, 0.21369249235958288, 0.1853859007426718, 0.23735154229524724, 0.11022747584425452, 0.12844963161359524, 0.14232876129980154, 0.12992984049553757, 0.18195445865293014, 0.13171937830725577, 0.09314574591832747, 0.15139345334492083, 0.0039633592389698435, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006221935138012169, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11089317347131777, 0.029811290262937273, 0.1194570735951318, 0.09497158569800546, 0.014101887444384786, 0.03209593469130745, 0.07388694710238286, 0.06857597592330456, 0.061088322665133865, 0.046176493472484426, 9.999999999998899e-05, 0.2039758929533182, 0.08760645588497085, 0.089770355161374, 0.09514682478792913, 0.17670969387452973, 0.06916174070554026, 0.06675284824061423, 0.14207690794083028, 9.999999999998899e-05, 0.1780725100731606, 0.006187468981011968, 0.12848997184810595, 0.18306581732089156, 0.10779485353066753, 0.038295752549475814, 0.12215576329675626, 0.5071011280302201, 0.5548104042750299, 0.5700206629247352, 0.5486030851133932, 0.5642209282191732, 0.5444706750604942, 0.5778134380684885, 0.5825173106205144, 0.5729515629460724, 0.13428382097785485, 0.0666590578128955, 0.08801917842585205, 0.08586623654692427, 0.1419117836919962, 0.1358611867017817, 0.10213286712043468, 0.11318270442959288, 0.12805285463570415, 0.1969443358373092, 0.13835833163319544, 0.1673208625376823, 0.20142076242521545, 0.256874332270451, 0.2238556476574407, 0.15373657150745001, 0.193048474601074, 0.2504648687381986, 0.34590160083607846, 0.5179398536263558, 0.43002683225408966, 0.4009690483114948, 0.3764247659343951, 0.2681234168607213, 0.6351332768417293, 0.4868700889333494, 0.2076817104558556, 0.24257148148865348, 0.29992530620157953, 0.24062169670387046, 0.22778609971879327, 0.14215965127336838, 0.25314268576556487, 0.27533170535733786, 0.2118474747509439, 0.25934283273298875, 0.2252642316357385, 0.1532863410414559, 0.22987905887363203, 0.2465728526890264, 0.20344418701792033, 0.23739521434207123, 0.23051822408569556, 0.20416478315720676, 0.21869906890295276, 0.21314154788490924, 0.23930126600734403, 0.7277907811371331, 0.22715040086235627, 0.24167953290063882, 0.20373897491151916, 0.20731785550978943, 0.7448187184529895, 0.19171544841082389, 0.8867817020466202, 0.8519781715331032, 0.15395738707096984, 0.862270094853308, 0.1986893097599266, 0.19785875487708227, 0.846481713792042, 0.16900521480312858, 0.8819314115180714, 0.745859346875589, 0.20573634333830726, 0.20475088603769243, 0.7230888615592548, 0.16700663204765842, 0.21098378890301261, 0.20600576761158185, 0.1547986373480842, 0.7629993272242137, 0.19652308331625779, 0.19633820551136583, 0.1918137833501643, 0.1793570974652141, 0.19586223085431143, 0.19119018036994517, 0.20194201338628348, 0.18331095302192457, 0.18104978681790684, 0.11176062475313919, 0.09254848157961293, 0.09624987233653315, 0.09315691903036294, 0.09081186805187813, 0.08331085170671504, 0.08107810642067237, 0.10160453430765959, 0.08040548843167472]}, "mutation_prompt": null}
{"id": "a4f42533-0bff-4484-bbb5-00e80bb79992", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 32  # Slightly increased initial population\n        self.final_population_size = 24  # More dynamic population resizing\n        self.inertia_weight = 0.59  # Further reduced inertia weight for quicker convergence\n        self.cognitive_coeff = 1.8  # Increased to further enhance exploration\n        self.social_coeff = 1.3  # Slightly decreased to improve balance\n        self.mutation_factor_init = 0.88  # Adjusted mutation factor for diversity\n        self.cross_prob = 0.96  # Higher cross probability for more aggressive trial acceptance\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.initial_population_size, dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.initial_population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        eval_count = 0\n        inertia_dampening = 0.99  # Adjusted for slightly faster dampening\n        mutation_factor_change = (self.mutation_factor_init - 0.5) / self.budget\n\n        while eval_count < self.budget:\n            population_size = self.initial_population_size - int(\n                (eval_count / self.budget) * (self.initial_population_size - self.final_population_size))\n\n            for i in range(population_size):\n                score = func(self.population[i])\n                eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n                if eval_count >= self.budget:\n                    break\n\n            r1 = np.random.rand(population_size, self.dim)\n            r2 = np.random.rand(population_size, self.dim)\n            cognitive_component = self.cognitive_coeff * r1 * (self.personal_best_positions[:population_size] - self.population[:population_size])\n            social_component = self.social_coeff * r2 * (self.global_best_position - self.population[:population_size])\n            self.velocities[:population_size] = (self.inertia_weight * self.velocities[:population_size]) + cognitive_component + social_component\n            self.population[:population_size] = self.population[:population_size] + self.velocities[:population_size]\n\n            self.population[:population_size] = np.clip(self.population[:population_size], self.lower_bound, self.upper_bound)\n\n            for i in range(population_size):\n                indices = np.random.choice(np.delete(np.arange(population_size), i), 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = a + (self.mutation_factor_init - mutation_factor_change * eval_count) * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cross_prob:\n                        trial[j] = mutant[j]\n\n                trial_score = func(trial)\n                eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.population[i] = trial\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial\n                if eval_count >= self.budget:\n                    break\n\n            self.inertia_weight *= inertia_dampening\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedHybridPSODE", "description": "EnhancedHybridPSODE with dynamic parameter tuning and adaptive population control for faster convergence.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "af9c7347-3908-47a4-bd67-990d4874ebde", "metadata": {"aucs": [0.854841170199753, 0.8337434860933706, 0.8469967212274282, 0.8455483575894931, 0.8180411099900293, 0.8538268412181504, 0.8661472530299321, 0.8586874660363351, 0.8309962951446832, 0.7294235129780255, 0.6998937295171335, 0.6094117259358, 0.7323993392336852, 0.7178626996713835, 0.7527717430435938, 0.7303553160756826, 0.7398023539588414, 0.7345810602280723, 0.14931063233199515, 0.13351555112136448, 0.6622369060538811, 0.14066429175160333, 0.1726157421192509, 0.13536244333222003, 0.16927292151669604, 0.17310903385891174, 0.16665051046678891, 0.10286767970176403, 0.11062674053789101, 0.09841548178142223, 0.11766048483176039, 0.13749285478756756, 0.1497628696663631, 0.12877821416404456, 0.10536676396505973, 0.14711824380142302, 0.9856512933902406, 0.9787812971815051, 0.9884286877792379, 0.9839714483074401, 0.9785587651669921, 0.9797841168656637, 0.9905617241107126, 0.9770933132040401, 0.9833577911084052, 0.7048655414793028, 0.7211467168240129, 0.7052216937557363, 0.7191710474747863, 0.14908004501186256, 0.7445236695618853, 0.7205652174423838, 0.5511206013439216, 0.6527132167092512, 0.3481079237327044, 0.2220022876779414, 0.22260963171491, 0.2773721531139688, 0.8106141678517857, 0.193143748525206, 0.7282030748672175, 0.2380711802780806, 0.1150872978406785, 0.15842663143275082, 0.12928270349161397, 0.1819346820411205, 0.16708296455829608, 0.20992905560266106, 0.12237661338006744, 0.3351147961480979, 0.19017807601288228, 0.21338139704086945, 0.18076589346594996, 0.13757489068267315, 0.22643758141871184, 0.18454500747880243, 0.24556725003162827, 0.18134559209726409, 0.22223500435779941, 0.13360190580985276, 0.12530423963151405, 9.999999999998899e-05, 0.04106590289391676, 0.009052554914146471, 9.999999999998899e-05, 0.035304986290289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07486847503284044, 0.07747999204176736, 0.03671692122265646, 0.12597768691781308, 0.08375568218519003, 9.999999999998899e-05, 0.025237010735392862, 0.09410909002513912, 0.0728437426819526, 0.042060846996438195, 0.046510822810082564, 0.07634599429344835, 0.1226496143325938, 0.09744350257911849, 0.14932735382092965, 0.07586047305840182, 0.2842119416221408, 0.08389114588004398, 0.08772702619431327, 0.06467686522928273, 9.999999999998899e-05, 0.1307702082894382, 0.00630684225609679, 0.20421519971616386, 0.08524348655987957, 0.19106498023883534, 0.04781213433341358, 0.09314857491772333, 0.5185871615500623, 0.5649049736705083, 0.5689980628370421, 0.5514152013975806, 0.5490509555687053, 0.20790007435716462, 0.5973916126254126, 0.6530010078799888, 0.5781118929648357, 0.08304826450485725, 0.07600267204559463, 0.11491859562690787, 0.12362571842962733, 0.13043972677666205, 0.13716767684518238, 0.12653952287696635, 0.13657113960499223, 0.09709974675359878, 0.14374469357949093, 0.18695456979770098, 0.18923957478194653, 0.2981175702971416, 0.24944309371380124, 0.1406468119143186, 0.3294200634479776, 0.17120108790425115, 0.28248616584533215, 0.48908365950123567, 0.6094958590761, 0.6544264222405355, 0.2899814886249241, 0.5453506268139661, 0.36763381267556094, 0.4436084820302868, 0.49875119412574753, 0.5928333162885812, 0.32402022101522454, 0.25792803367766615, 0.2829233453807415, 0.4076522537381234, 0.2622079541846637, 0.32710742616195454, 0.3432538164896639, 0.23390776228649435, 0.30096566980124007, 0.25365634866961995, 0.18875259829404345, 0.267932015646579, 0.20209338773698615, 0.21300809713335944, 0.23998942892561703, 0.24237800148333477, 0.22644071122299358, 0.246895492041457, 0.2407489637587219, 0.7381993016559744, 0.24476307319944546, 0.7596076646020812, 0.238690415179029, 0.2126182009475257, 0.21898585008086835, 0.21703275509314346, 0.2161411307226221, 0.8804029305720451, 0.878470043102824, 0.154132523530214, 0.882908229087604, 0.19873057126016025, 0.19745108635270425, 0.8419510619466086, 0.16897779637434018, 0.8931557330242321, 0.7672084987916588, 0.1683188460864965, 0.2078508423927442, 0.7558544886253658, 0.16710346584180424, 0.2089793176375876, 0.2082782456388691, 0.7949888960681359, 0.8308106177184313, 0.19654164232329197, 0.19487711470545, 0.19335537842386907, 0.19706767001895187, 0.21178877924311013, 0.21062142901655512, 0.20665390909466186, 0.18865726577078357, 0.18353189923188806, 0.09784604018523879, 0.09464449116249218, 0.09282370571545195, 0.08584127053615209, 0.08156069572947378, 0.089102552583189, 0.13650074412598556, 0.07560180769216351, 0.07904243372709896]}, "mutation_prompt": null}
{"id": "5f193c6f-f781-4265-bb53-43f810264c9f", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 32  # Slightly increased initial population\n        self.final_population_size = 24  # More dynamic population resizing\n        self.inertia_weight = 0.59  # Further reduced inertia weight for quicker convergence\n        self.cognitive_coeff = 1.8  # Increased to further enhance exploration\n        self.social_coeff = 1.3  # Slightly decreased to improve balance\n        self.mutation_factor_init = 0.88  # Adjusted mutation factor for diversity\n        self.cross_prob = 0.96  # Higher cross probability for more aggressive trial acceptance\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.initial_population_size, dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.initial_population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        eval_count = 0\n        inertia_dampening = 0.99  # Adjusted for slightly faster dampening\n        mutation_factor_change = (self.mutation_factor_init - 0.5) / self.budget\n\n        while eval_count < self.budget:\n            population_size = self.initial_population_size - int(\n                (eval_count / self.budget) * (self.initial_population_size - self.final_population_size))\n\n            for i in range(population_size):\n                score = func(self.population[i])\n                eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n                if eval_count >= self.budget:\n                    break\n\n            r1 = np.random.rand(population_size, self.dim)\n            r2 = np.random.rand(population_size, self.dim)\n            cognitive_component = self.cognitive_coeff * r1 * (self.personal_best_positions[:population_size] - self.population[:population_size])\n            social_component = self.social_coeff * r2 * (self.global_best_position - self.population[:population_size])\n            self.velocities[:population_size] = (self.inertia_weight * self.velocities[:population_size]) + cognitive_component + social_component\n            self.population[:population_size] = self.population[:population_size] + self.velocities[:population_size]\n\n            self.population[:population_size] = np.clip(self.population[:population_size], self.lower_bound, self.upper_bound)\n\n            for i in range(population_size):\n                indices = np.random.choice(np.delete(np.arange(population_size), i), 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = a + (self.mutation_factor_init - mutation_factor_change * eval_count) * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cross_prob:\n                        trial[j] = mutant[j]\n\n                trial_score = func(trial)\n                eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.population[i] = trial\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial\n                if eval_count >= self.budget:\n                    break\n\n            self.inertia_weight *= inertia_dampening\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedHybridPSODE", "description": "EnhancedHybridPSODE with dynamic parameter tuning and adaptive population control for faster convergence.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "af9c7347-3908-47a4-bd67-990d4874ebde", "metadata": {"aucs": [0.854841170199753, 0.8337434860933706, 0.8469967212274282, 0.8455483575894931, 0.8180411099900293, 0.8538268412181504, 0.8661472530299321, 0.8586874660363351, 0.8309962951446832, 0.7294235129780255, 0.6998937295171335, 0.6094117259358, 0.7323993392336852, 0.7178626996713835, 0.7527717430435938, 0.7303553160756826, 0.7398023539588414, 0.7345810602280723, 0.14931063233199515, 0.13351555112136448, 0.6622369060538811, 0.14066429175160333, 0.1726157421192509, 0.13536244333222003, 0.16927292151669604, 0.17310903385891174, 0.16665051046678891, 0.10286767970176403, 0.11062674053789101, 0.09841548178142223, 0.11766048483176039, 0.13749285478756756, 0.1497628696663631, 0.12877821416404456, 0.10536676396505973, 0.14711824380142302, 0.9856512933902406, 0.9787812971815051, 0.9884286877792379, 0.9839714483074401, 0.9785587651669921, 0.9797841168656637, 0.9905617241107126, 0.9770933132040401, 0.9833577911084052, 0.7048655414793028, 0.7211467168240129, 0.7052216937557363, 0.7191710474747863, 0.14908004501186256, 0.7445236695618853, 0.7205652174423838, 0.5511206013439216, 0.6527132167092512, 0.3481079237327044, 0.2220022876779414, 0.22260963171491, 0.2773721531139688, 0.8106141678517857, 0.193143748525206, 0.7282030748672175, 0.2380711802780806, 0.1150872978406785, 0.15842663143275082, 0.12928270349161397, 0.1819346820411205, 0.16708296455829608, 0.20992905560266106, 0.12237661338006744, 0.3351147961480979, 0.19017807601288228, 0.21338139704086945, 0.18076589346594996, 0.13757489068267315, 0.22643758141871184, 0.18454500747880243, 0.24556725003162827, 0.18134559209726409, 0.22223500435779941, 0.13360190580985276, 0.12530423963151405, 9.999999999998899e-05, 0.04106590289391676, 0.009052554914146471, 9.999999999998899e-05, 0.035304986290289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07486847503284044, 0.07747999204176736, 0.03671692122265646, 0.12597768691781308, 0.08375568218519003, 9.999999999998899e-05, 0.025237010735392862, 0.09410909002513912, 0.0728437426819526, 0.042060846996438195, 0.046510822810082564, 0.07634599429344835, 0.1226496143325938, 0.09744350257911849, 0.14932735382092965, 0.07586047305840182, 0.2842119416221408, 0.08389114588004398, 0.08772702619431327, 0.06467686522928273, 9.999999999998899e-05, 0.1307702082894382, 0.00630684225609679, 0.20421519971616386, 0.08524348655987957, 0.19106498023883534, 0.04781213433341358, 0.09314857491772333, 0.5185871615500623, 0.5649049736705083, 0.5689980628370421, 0.5514152013975806, 0.5490509555687053, 0.20790007435716462, 0.5973916126254126, 0.6530010078799888, 0.5781118929648357, 0.08304826450485725, 0.07600267204559463, 0.11491859562690787, 0.12362571842962733, 0.13043972677666205, 0.13716767684518238, 0.12653952287696635, 0.13657113960499223, 0.09709974675359878, 0.14374469357949093, 0.18695456979770098, 0.18923957478194653, 0.2981175702971416, 0.24944309371380124, 0.1406468119143186, 0.3294200634479776, 0.17120108790425115, 0.28248616584533215, 0.48908365950123567, 0.6094958590761, 0.6544264222405355, 0.2899814886249241, 0.5453506268139661, 0.36763381267556094, 0.4436084820302868, 0.49875119412574753, 0.5928333162885812, 0.32402022101522454, 0.25792803367766615, 0.2829233453807415, 0.4076522537381234, 0.2622079541846637, 0.32710742616195454, 0.3432538164896639, 0.23390776228649435, 0.30096566980124007, 0.25365634866961995, 0.18875259829404345, 0.267932015646579, 0.20209338773698615, 0.21300809713335944, 0.23998942892561703, 0.24237800148333477, 0.22644071122299358, 0.246895492041457, 0.2407489637587219, 0.7381993016559744, 0.24476307319944546, 0.7596076646020812, 0.238690415179029, 0.2126182009475257, 0.21898585008086835, 0.21703275509314346, 0.2161411307226221, 0.8804029305720451, 0.878470043102824, 0.154132523530214, 0.882908229087604, 0.19873057126016025, 0.19745108635270425, 0.8419510619466086, 0.16897779637434018, 0.8931557330242321, 0.7672084987916588, 0.1683188460864965, 0.2078508423927442, 0.7558544886253658, 0.16710346584180424, 0.2089793176375876, 0.2082782456388691, 0.7949888960681359, 0.8308106177184313, 0.19654164232329197, 0.19487711470545, 0.19335537842386907, 0.19706767001895187, 0.21178877924311013, 0.21062142901655512, 0.20665390909466186, 0.18865726577078357, 0.18353189923188806, 0.09784604018523879, 0.09464449116249218, 0.09282370571545195, 0.08584127053615209, 0.08156069572947378, 0.089102552583189, 0.13650074412598556, 0.07560180769216351, 0.07904243372709896]}, "mutation_prompt": null}
{"id": "dcfe501d-138a-4d12-8149-d35c94aa78a9", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30  # Slightly reduced initial population for faster iterations\n        self.final_population_size = 20  # More aggressive population resizing\n        self.inertia_weight = 0.58  # Further reduced inertia weight to enhance convergence speed\n        self.cognitive_coeff = 1.9  # Increased to improve personal exploration\n        self.social_coeff = 1.2  # Further decreased to fine-tune social influence\n        self.mutation_factor_init = 0.87  # Slightly adjusted to enhance mutation effectiveness\n        self.cross_prob = 0.97  # Increased cross probability for more frequent trial acceptance\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.velocities = np.random.uniform(-0.5, 0.5, (self.initial_population_size, dim))  # Reduced velocity range\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.initial_population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        eval_count = 0\n        inertia_dampening = 0.985  # Increased dampening rate for inertia weight\n        mutation_factor_decay = (self.mutation_factor_init - 0.5) / self.budget\n\n        while eval_count < self.budget:\n            population_size = self.initial_population_size - int(\n                (eval_count / self.budget) * (self.initial_population_size - self.final_population_size))\n\n            for i in range(population_size):\n                score = func(self.population[i])\n                eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n                if eval_count >= self.budget:\n                    break\n\n            r1 = np.random.rand(population_size, self.dim)\n            r2 = np.random.rand(population_size, self.dim)\n            cognitive_component = self.cognitive_coeff * r1 * (self.personal_best_positions[:population_size] - self.population[:population_size])\n            social_component = self.social_coeff * r2 * (self.global_best_position - self.population[:population_size])\n            self.velocities[:population_size] = (self.inertia_weight * self.velocities[:population_size]) + cognitive_component + social_component\n            self.population[:population_size] = self.population[:population_size] + self.velocities[:population_size]\n\n            self.population[:population_size] = np.clip(self.population[:population_size], self.lower_bound, self.upper_bound)\n\n            for i in range(population_size):\n                indices = np.random.choice(np.delete(np.arange(population_size), i), 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = a + (self.mutation_factor_init - mutation_factor_decay * eval_count) * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cross_prob:\n                        trial[j] = mutant[j]\n\n                trial_score = func(trial)\n                eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.population[i] = trial\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial\n                if eval_count >= self.budget:\n                    break\n\n            self.inertia_weight *= inertia_dampening\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedHybridPSODE", "description": "Improved EnhancedHybridPSODE with refined dynamic adjustments for enhanced exploration and convergence efficiency.", "configspace": "", "generation": 39, "fitness": 0.3018708707840049, "feedback": "The algorithm EnhancedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.28.", "error": "", "parent_id": "af9c7347-3908-47a4-bd67-990d4874ebde", "metadata": {"aucs": [0.8857462375413075, 0.8744792364043716, 0.882537834240732, 0.18246632781901218, 0.8942869836067899, 0.8921962598676253, 0.8638552100027956, 0.8804744189023453, 0.8678064313754346, 0.762980684560231, 0.7922234456465291, 0.7611763112831729, 0.7951210979741103, 0.784649186890144, 0.767212762465526, 0.7635329985259848, 0.7877487314662481, 0.6775587639756284, 0.11637280249797188, 0.7322856965999442, 0.17803472222646255, 0.18022399663928523, 0.13825121963276887, 0.1274012551825574, 0.13906048449929986, 0.14724328086094607, 0.7887562239002773, 0.10612440424235614, 0.10982646331143264, 0.17701640755737658, 0.10983561228842298, 0.11364176925712621, 0.11202038376400092, 0.1114708374031439, 0.09395020752106553, 0.11934245486617567, 0.9766012386716609, 0.9708417694230053, 0.9914046433899353, 0.9798248122321599, 0.9870132323504989, 0.9695175689788418, 0.9858821599706604, 0.9759773685979447, 0.9786660365482626, 0.7072493444145513, 0.6724764861918223, 0.7250038344930232, 0.8010767461009731, 0.5787594540354171, 0.7861309064398363, 0.08324042801016607, 0.08847242417304191, 9.999999999998899e-05, 0.22644799978702645, 0.224157540973413, 0.2116636049044922, 0.19504435374571272, 0.21093776760488403, 0.1926185236695035, 0.11636444730647977, 0.23167543934396995, 0.23245437752222975, 0.12816565743836816, 0.1953941402440169, 0.215152435341741, 0.15413264075548505, 0.1567119001753262, 0.1325003117408582, 0.165961193317942, 0.25548008671584466, 0.18318176259077268, 0.20171206638531158, 0.14466238998042358, 0.19330553591495125, 0.17215716637299316, 0.13642567936830818, 0.17744554035342486, 0.21268823729793873, 0.12424933660319326, 0.10143018736793508, 9.999999999998899e-05, 9.999999999998899e-05, 0.007188217930066854, 0.0009273039872039757, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0029306611950647987, 0.10964211773407229, 0.041416954308793, 0.08595513190769521, 0.07749342373468171, 0.01116822085999225, 0.018603588187013353, 0.16700076775204176, 0.07305900163970891, 0.04703058174781549, 0.048092759940275065, 0.1117295441301388, 0.20691535959445784, 0.09705191904502097, 0.09555817390745325, 0.10732454059343821, 9.999999999998899e-05, 0.07105935498422955, 0.07031911921446243, 0.04235994400709098, 0.10927459412486207, 0.19733462364072885, 0.006415336471340183, 0.14887082164055465, 0.13750160259804523, 0.0490631606637042, 0.11867606397294717, 0.08209720389751474, 0.6058991497112954, 0.5540305828610643, 0.5286402507368386, 0.5481512892741163, 0.5226023127531529, 0.5520743414142721, 0.6081920210594502, 0.5733926689369062, 0.599304193102047, 0.136619294380525, 0.12204478976488431, 0.1377603166457535, 0.13501088754656743, 0.1173706129606662, 0.09834945455896993, 0.11693641695768497, 0.10112931584394613, 0.10468664532374805, 0.151031966058639, 0.25458704150477474, 0.16900865943729182, 0.2702197964371802, 0.2577096683639385, 0.3434321623122154, 0.17732633056934033, 0.17832055420549442, 0.22509945878335103, 0.2967292330206893, 0.3833515645173391, 0.5379796221991978, 0.4529651923562785, 0.4864921945420758, 0.2669586524074994, 0.5997779562984795, 0.7121891440748469, 0.4277081448061474, 0.2736488616735335, 0.22956320260030627, 0.26067625455948296, 0.20898209033853465, 0.19809346373622483, 0.23828058827108167, 0.4073612385434989, 0.29966646281685083, 0.23209771282953995, 0.21395144477262218, 0.19656517275876761, 0.20493038598301083, 0.220490906956344, 0.2213940210966776, 0.1976097611638331, 0.22354663007071085, 0.22991290237468998, 0.24298391713616319, 0.20612295594824115, 0.187718499257153, 0.2248504752460332, 0.7893637798789095, 0.24607407502322198, 0.22053279453970298, 0.24465128089163302, 0.2069971828705629, 0.2060060566531502, 0.16567269471396961, 0.17636898071263474, 0.15372097319126055, 0.17136873636314887, 0.20134653648996315, 0.1996607826425888, 0.09021594585252302, 0.16967242987493414, 0.890306935943944, 0.6658811436230855, 0.1687877736319202, 0.37663532392289134, 0.21032386433419248, 0.20902619979126302, 0.20911658291207535, 0.2099546461938645, 0.20697113175409798, 0.6759648770509744, 0.21299230135836278, 0.20029237434874558, 0.19350561351312556, 0.19711072459087386, 0.18249945152174474, 0.1976211686274073, 0.21383118587927263, 0.2287560942427903, 0.18674541668318645, 0.09055798872158116, 0.08658580973884966, 0.08709357972336929, 0.09027892930419934, 0.08951860008146817, 0.08803301495852522, 0.12229785083569822, 0.09652423397566456, 0.09368417347033642]}, "mutation_prompt": null}
{"id": "ba2b616a-241a-48e8-b362-09a87a5e9a6d", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 32  # Slightly increased initial population\n        self.final_population_size = 24  # More dynamic population resizing\n        self.inertia_weight = 0.59  # Further reduced inertia weight for quicker convergence\n        self.cognitive_coeff = 1.8  # Increased to further enhance exploration\n        self.social_coeff = 1.3  # Slightly decreased to improve balance\n        self.mutation_factor_init = 0.88  # Adjusted mutation factor for diversity\n        self.cross_prob = 0.96  # Higher cross probability for more aggressive trial acceptance\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.initial_population_size, dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.initial_population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        eval_count = 0\n        inertia_dampening = 0.99  # Adjusted for slightly faster dampening\n        mutation_factor_change = (self.mutation_factor_init - 0.5) / self.budget\n\n        while eval_count < self.budget:\n            population_size = self.initial_population_size - int(\n                (eval_count / self.budget) * (self.initial_population_size - self.final_population_size))\n\n            for i in range(population_size):\n                score = func(self.population[i])\n                eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n                if eval_count >= self.budget:\n                    break\n\n            r1 = np.random.rand(population_size, self.dim)\n            r2 = np.random.rand(population_size, self.dim)\n            cognitive_component = self.cognitive_coeff * r1 * (self.personal_best_positions[:population_size] - self.population[:population_size])\n            social_component = self.social_coeff * r2 * (self.global_best_position - self.population[:population_size])\n            self.velocities[:population_size] = (self.inertia_weight * self.velocities[:population_size]) + cognitive_component + social_component\n            self.population[:population_size] = self.population[:population_size] + self.velocities[:population_size]\n\n            self.population[:population_size] = np.clip(self.population[:population_size], self.lower_bound, self.upper_bound)\n\n            for i in range(population_size):\n                indices = np.random.choice(np.delete(np.arange(population_size), i), 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = a + (self.mutation_factor_init - mutation_factor_change * eval_count) * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cross_prob:\n                        trial[j] = mutant[j]\n\n                trial_score = func(trial)\n                eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.population[i] = trial\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial\n                if eval_count >= self.budget:\n                    break\n\n            self.inertia_weight *= inertia_dampening\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedHybridPSODE", "description": "EnhancedHybridPSODE with dynamic parameter tuning and adaptive population control for faster convergence.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "af9c7347-3908-47a4-bd67-990d4874ebde", "metadata": {"aucs": [0.854841170199753, 0.8337434860933706, 0.8469967212274282, 0.8455483575894931, 0.8180411099900293, 0.8538268412181504, 0.8661472530299321, 0.8586874660363351, 0.8309962951446832, 0.7294235129780255, 0.6998937295171335, 0.6094117259358, 0.7323993392336852, 0.7178626996713835, 0.7527717430435938, 0.7303553160756826, 0.7398023539588414, 0.7345810602280723, 0.14931063233199515, 0.13351555112136448, 0.6622369060538811, 0.14066429175160333, 0.1726157421192509, 0.13536244333222003, 0.16927292151669604, 0.17310903385891174, 0.16665051046678891, 0.10286767970176403, 0.11062674053789101, 0.09841548178142223, 0.11766048483176039, 0.13749285478756756, 0.1497628696663631, 0.12877821416404456, 0.10536676396505973, 0.14711824380142302, 0.9856512933902406, 0.9787812971815051, 0.9884286877792379, 0.9839714483074401, 0.9785587651669921, 0.9797841168656637, 0.9905617241107126, 0.9770933132040401, 0.9833577911084052, 0.7048655414793028, 0.7211467168240129, 0.7052216937557363, 0.7191710474747863, 0.14908004501186256, 0.7445236695618853, 0.7205652174423838, 0.5511206013439216, 0.6527132167092512, 0.3481079237327044, 0.2220022876779414, 0.22260963171491, 0.2773721531139688, 0.8106141678517857, 0.193143748525206, 0.7282030748672175, 0.2380711802780806, 0.1150872978406785, 0.15842663143275082, 0.12928270349161397, 0.1819346820411205, 0.16708296455829608, 0.20992905560266106, 0.12237661338006744, 0.3351147961480979, 0.19017807601288228, 0.21338139704086945, 0.18076589346594996, 0.13757489068267315, 0.22643758141871184, 0.18454500747880243, 0.24556725003162827, 0.18134559209726409, 0.22223500435779941, 0.13360190580985276, 0.12530423963151405, 9.999999999998899e-05, 0.04106590289391676, 0.009052554914146471, 9.999999999998899e-05, 0.035304986290289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07486847503284044, 0.07747999204176736, 0.03671692122265646, 0.12597768691781308, 0.08375568218519003, 9.999999999998899e-05, 0.025237010735392862, 0.09410909002513912, 0.0728437426819526, 0.042060846996438195, 0.046510822810082564, 0.07634599429344835, 0.1226496143325938, 0.09744350257911849, 0.14932735382092965, 0.07586047305840182, 0.2842119416221408, 0.08389114588004398, 0.08772702619431327, 0.06467686522928273, 9.999999999998899e-05, 0.1307702082894382, 0.00630684225609679, 0.20421519971616386, 0.08524348655987957, 0.19106498023883534, 0.04781213433341358, 0.09314857491772333, 0.5185871615500623, 0.5649049736705083, 0.5689980628370421, 0.5514152013975806, 0.5490509555687053, 0.20790007435716462, 0.5973916126254126, 0.6530010078799888, 0.5781118929648357, 0.08304826450485725, 0.07600267204559463, 0.11491859562690787, 0.12362571842962733, 0.13043972677666205, 0.13716767684518238, 0.12653952287696635, 0.13657113960499223, 0.09709974675359878, 0.14374469357949093, 0.18695456979770098, 0.18923957478194653, 0.2981175702971416, 0.24944309371380124, 0.1406468119143186, 0.3294200634479776, 0.17120108790425115, 0.28248616584533215, 0.48908365950123567, 0.6094958590761, 0.6544264222405355, 0.2899814886249241, 0.5453506268139661, 0.36763381267556094, 0.4436084820302868, 0.49875119412574753, 0.5928333162885812, 0.32402022101522454, 0.25792803367766615, 0.2829233453807415, 0.4076522537381234, 0.2622079541846637, 0.32710742616195454, 0.3432538164896639, 0.23390776228649435, 0.30096566980124007, 0.25365634866961995, 0.18875259829404345, 0.267932015646579, 0.20209338773698615, 0.21300809713335944, 0.23998942892561703, 0.24237800148333477, 0.22644071122299358, 0.246895492041457, 0.2407489637587219, 0.7381993016559744, 0.24476307319944546, 0.7596076646020812, 0.238690415179029, 0.2126182009475257, 0.21898585008086835, 0.21703275509314346, 0.2161411307226221, 0.8804029305720451, 0.878470043102824, 0.154132523530214, 0.882908229087604, 0.19873057126016025, 0.19745108635270425, 0.8419510619466086, 0.16897779637434018, 0.8931557330242321, 0.7672084987916588, 0.1683188460864965, 0.2078508423927442, 0.7558544886253658, 0.16710346584180424, 0.2089793176375876, 0.2082782456388691, 0.7949888960681359, 0.8308106177184313, 0.19654164232329197, 0.19487711470545, 0.19335537842386907, 0.19706767001895187, 0.21178877924311013, 0.21062142901655512, 0.20665390909466186, 0.18865726577078357, 0.18353189923188806, 0.09784604018523879, 0.09464449116249218, 0.09282370571545195, 0.08584127053615209, 0.08156069572947378, 0.089102552583189, 0.13650074412598556, 0.07560180769216351, 0.07904243372709896]}, "mutation_prompt": null}
{"id": "1fecabdb-cc41-4650-a3c3-74e55a84900b", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 32\n        self.final_population_size = 24\n        self.inertia_weight = 0.58  # Slightly reduced inertia weight\n        self.cognitive_coeff = 1.85  # Increased cognitive coefficient\n        self.social_coeff = 1.3\n        self.mutation_factor_init = 0.90  # Adjusted mutation factor\n        self.cross_prob = 0.95  # Slightly reduced cross probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.initial_population_size, dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.initial_population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        eval_count = 0\n        inertia_dampening = 0.98  # Faster inertia dampening\n        mutation_factor_change = (self.mutation_factor_init - 0.5) / self.budget\n\n        while eval_count < self.budget:\n            population_size = self.initial_population_size - int(\n                (eval_count / self.budget) * (self.initial_population_size - self.final_population_size))\n\n            for i in range(population_size):\n                score = func(self.population[i])\n                eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n                if eval_count >= self.budget:\n                    break\n\n            r1 = np.random.rand(population_size, self.dim)\n            r2 = np.random.rand(population_size, self.dim)\n            cognitive_component = self.cognitive_coeff * r1 * (self.personal_best_positions[:population_size] - self.population[:population_size])\n            social_component = self.social_coeff * r2 * (self.global_best_position - self.population[:population_size])\n            self.velocities[:population_size] = (self.inertia_weight * self.velocities[:population_size]) + cognitive_component + social_component\n            self.population[:population_size] = self.population[:population_size] + self.velocities[:population_size]\n\n            self.population[:population_size] = np.clip(self.population[:population_size], self.lower_bound, self.upper_bound)\n\n            for i in range(population_size):\n                indices = np.random.choice(np.delete(np.arange(population_size), i), 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = a + (self.mutation_factor_init - mutation_factor_change * eval_count) * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cross_prob:\n                        trial[j] = mutant[j]\n\n                trial_score = func(trial)\n                eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.population[i] = trial\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial\n                if eval_count >= self.budget:\n                    break\n\n            self.inertia_weight *= inertia_dampening\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedHybridPSODE", "description": "EnhancedHybridPSODE with refined inertia adjustment and improved mutation strategy for accelerated convergence.", "configspace": "", "generation": 41, "fitness": 0.3007503208520805, "feedback": "The algorithm EnhancedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.27.", "error": "", "parent_id": "af9c7347-3908-47a4-bd67-990d4874ebde", "metadata": {"aucs": [0.8731029331367727, 0.8633017579109191, 0.8761966616042138, 0.873870669246738, 0.6852466118735, 0.8585613799873073, 0.878276945758554, 0.8740891043575233, 0.18276698393157176, 0.7875513576187736, 0.6997588409865223, 0.6292639019168852, 0.755255054358273, 0.732947648980293, 0.766016551579788, 0.7669471042768092, 0.765586431331889, 0.7564865384285471, 0.13892171042174506, 0.13953030367408592, 0.1085088517645254, 0.15640376662569966, 0.06729637486573026, 0.15190349483575516, 0.12778376598444807, 0.15163641958118856, 0.11737268516658583, 0.08598185059750763, 0.15727464677969494, 0.10662718763675672, 0.17636082706364176, 0.17729272610991487, 0.13622208361830668, 0.102871715577461, 0.10634020416601087, 0.11251375845569, 0.9858102264652873, 0.9781007797808281, 0.9884265857477962, 0.983960358313245, 0.9754090417219187, 0.979364611472392, 0.9905609845502734, 0.9794722442027295, 0.9778319741512399, 0.7611148474762507, 0.5390145534721666, 0.060021756170609675, 0.41303016161753414, 0.15167190533973895, 0.6915680779276709, 0.6620280601051511, 0.052122683717867435, 0.7626507424368716, 0.22621373831447478, 0.22278005263463319, 0.22042207877331044, 0.21129846601852564, 0.3722062656783689, 0.19312519257481942, 0.2360589033385797, 0.23259485169746064, 0.22797017220724236, 0.12477256017437066, 0.12848882863910238, 0.146468880964986, 0.12649401377167602, 0.18241705622395654, 0.1630922959937703, 0.16214987096028544, 0.18134803638163555, 0.1684534522587504, 0.25587832603618044, 0.16790267738207965, 0.12920503808181494, 0.1310580322521322, 0.14118137480549486, 0.1405944399017589, 0.23757404177948127, 0.21573800670430332, 0.20095442884337067, 9.999999999998899e-05, 0.008229001574022954, 0.07940924079362444, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039704280330735475, 9.999999999998899e-05, 0.10077875745252218, 0.08728276094095433, 0.11812842200561713, 0.09654898322372496, 0.08811528173422489, 0.006940650600773424, 0.027596006230956482, 0.1246339244276482, 0.06694008698390408, 0.10952579907540261, 0.0492155334318235, 0.044178419193756424, 0.11998220542199067, 0.09554374893026574, 0.112561749659847, 0.08046187082619649, 0.10575889673779115, 0.07382828955149434, 0.07293881813603553, 0.05497585560322549, 0.08488164549265953, 0.1462801328292428, 0.006411048540076791, 0.13726354323027445, 0.13907688321488954, 0.1844282210154553, 9.999999999998899e-05, 0.08127426362262691, 0.571637903663905, 0.5484328173805015, 0.548500346003324, 0.5513115560573679, 0.5508549810891372, 0.2078738783990035, 0.5660242317618727, 0.570788294376563, 0.562723879355936, 0.08458517054839065, 0.08354376872497615, 0.13922052444266808, 0.14088706683184482, 0.1237872595003362, 0.1299051519841412, 0.08792053158892488, 0.11565505540213705, 0.08583484860757307, 0.24108396125685472, 0.2545615969861257, 0.1842972659723069, 0.31759593809736497, 0.2786333203676792, 0.1958929401012034, 0.15385539245621094, 0.3054517490003613, 0.2646840693944803, 0.3845222289647341, 0.44816596634500305, 0.42274666591738164, 0.435774794673067, 0.3485999639510272, 0.34942116704414106, 0.38682176332870344, 0.5776848122104103, 0.32443616679320353, 0.30002265231877967, 0.23119843902234494, 0.24541538628888415, 0.1752954094331659, 0.18490455698454833, 0.36705717309767116, 0.35017667988409873, 0.4931443980664634, 0.4537733943415798, 0.217564132016963, 0.14861166987208196, 0.2154280955576654, 0.22118705170815434, 0.21924138744502697, 0.2233607592345317, 0.2364270065492463, 0.2240395051734827, 0.23238421712903035, 0.19861224657318366, 0.22651234095262662, 0.24688660918899696, 0.1876142059718534, 0.20967554732320381, 0.1912537406862238, 0.20788110150364425, 0.24410553852268801, 0.222724470726976, 0.8746159336145978, 0.8769279107666184, 0.15420673706893706, 0.9034654709163099, 0.19912746772759926, 0.19627996200370323, 0.0995836139856694, 0.16867935473765516, 0.9042981902197825, 0.7322901363798705, 0.21105834199364737, 0.5959733839659714, 0.6867603053347989, 0.16727211990034652, 0.20905800925491236, 0.12801138437328097, 0.30703861340787575, 0.10437568522523033, 0.19195460406169285, 0.18823988714565676, 0.20143366444064836, 0.19994257209749167, 0.18777298147739352, 0.18260887684249005, 0.21992121110270946, 0.20900671772195234, 0.1890367408446263, 0.10764427640461949, 0.10079707911212699, 0.09424700403648345, 0.09489884993002828, 0.09917076210607234, 0.0919395348603026, 0.10139445749869791, 0.10120176202332865, 0.09545710923075024]}, "mutation_prompt": null}
{"id": "c1da71b5-50d0-43bd-9473-a3dd3f73fb4c", "solution": "import numpy as np\n\nclass RefinedDynamicPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30  # Reduced initial population for faster convergence\n        self.final_population_size = 20  # Slightly more aggressive population resizing\n        self.inertia_weight = 0.57  # Further reduced inertia weight to enhance responsiveness\n        self.cognitive_coeff = 1.9  # Increased cognitive coefficient for exploration\n        self.social_coeff = 1.35  # Balanced social coefficient for improved coordination\n        self.mutation_factor_init = 0.9  # Enhanced mutation factor for diversity\n        self.cross_prob = 0.95  # Aggressive trial acceptance for exploration\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.initial_population_size, dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.initial_population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        eval_count = 0\n        inertia_dampening = 0.98  # Faster dampening for quicker parameter adaptation\n        mutation_factor_change = (self.mutation_factor_init - 0.5) / self.budget\n\n        while eval_count < self.budget:\n            population_size = self.initial_population_size - int(\n                (eval_count / self.budget) * (self.initial_population_size - self.final_population_size))\n\n            for i in range(population_size):\n                score = func(self.population[i])\n                eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n                if eval_count >= self.budget:\n                    break\n\n            r1 = np.random.rand(population_size, self.dim)\n            r2 = np.random.rand(population_size, self.dim)\n            cognitive_component = self.cognitive_coeff * r1 * (self.personal_best_positions[:population_size] - self.population[:population_size])\n            social_component = self.social_coeff * r2 * (self.global_best_position - self.population[:population_size])\n            self.velocities[:population_size] = (self.inertia_weight * self.velocities[:population_size]) + cognitive_component + social_component\n            self.population[:population_size] = self.population[:population_size] + self.velocities[:population_size]\n\n            self.population[:population_size] = np.clip(self.population[:population_size], self.lower_bound, self.upper_bound)\n\n            for i in range(population_size):\n                indices = np.random.choice(np.delete(np.arange(population_size), i), 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = a + (self.mutation_factor_init - mutation_factor_change * eval_count) * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cross_prob:\n                        trial[j] = mutant[j]\n\n                trial_score = func(trial)\n                eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.population[i] = trial\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial\n                if eval_count >= self.budget:\n                    break\n\n            self.inertia_weight *= inertia_dampening\n\n        return self.global_best_position, self.global_best_score", "name": "RefinedDynamicPSODE", "description": "RefinedDynamicPSODE optimizing convergence speed with enhanced parameter tuning and diversity strategies.", "configspace": "", "generation": 42, "fitness": 0.2910975071437564, "feedback": "The algorithm RefinedDynamicPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.26.", "error": "", "parent_id": "af9c7347-3908-47a4-bd67-990d4874ebde", "metadata": {"aucs": [0.8781023242872152, 0.8690218987000506, 0.8738572122328759, 0.19018896376798478, 0.879051218591343, 0.8794744436005764, 0.8886563540105968, 0.8704483566568582, 0.8797372889558258, 0.7539509373481688, 0.7485612672157755, 0.7764309450748433, 0.7892097609719594, 0.785866784192555, 0.7589640485816618, 0.7837032402823906, 0.7972705609853348, 0.6195149553908852, 0.12107571794100402, 0.13241346245519503, 0.1518292428762923, 0.18239325961297648, 0.07340213069878732, 0.13945930770813197, 0.17855294338860406, 0.13732413212406136, 0.15662303720760262, 0.09430101215067843, 0.09372753634109265, 0.1264104731258704, 0.11732042980893753, 0.11761256555610622, 0.10135964086238547, 0.11111751788944835, 0.10568782946125554, 0.09440832374342933, 0.9797829323123416, 0.9859407507034978, 0.9867831441166693, 0.9706994431740245, 0.9817079140660606, 0.9652764296611736, 0.9860690386386198, 0.9804110348740058, 0.980550509583421, 0.557145962404957, 0.05920304554563005, 0.5237597147318535, 0.21099848979104285, 0.2011843055629422, 0.5579218832306418, 0.1201361602059191, 0.5866756934249922, 0.4730332104498304, 0.17083742589899897, 0.7993734383022937, 0.2226085080955621, 0.21157284256538478, 0.18589230966210546, 0.19164969590991932, 0.2322451768192374, 0.12575961835349114, 0.8432423819179997, 0.23971882238789932, 0.16863484753672764, 0.18276425071102953, 0.18857243895333065, 0.17736552135772, 0.19650814035239383, 0.1717581877702472, 0.18959340892919152, 0.16486412535352735, 0.21282031787077016, 0.1168491286815233, 0.14672222896525344, 0.13722222140291573, 0.12474794516336374, 0.20144791106856508, 0.12737598311302623, 0.11171893892723894, 0.16839365091267322, 0.06846707519087902, 0.013968958943204046, 0.09387680567780188, 0.04051802404553839, 0.048991775855940056, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03693402588568462, 0.06163458907850328, 0.04635779065127699, 0.09349632187252122, 0.058033954972407265, 0.0057986704160226665, 0.033970895787163724, 0.07733432578683264, 0.13014945079066054, 0.03011613622128262, 0.12291590661834073, 0.16007783165595446, 0.1569104140427824, 0.07903329140076676, 0.07868987378857784, 0.07550372662227023, 0.18160486395728026, 0.23732747472076499, 0.0714844416614826, 0.042974304943573904, 0.042977863364775604, 0.26078001171809795, 0.08851264425680472, 0.03794762837426746, 0.29261602127256314, 0.13114457584320427, 0.139346263822977, 0.09996924920481165, 0.5244886977779705, 0.5216468493384713, 0.5875926909697502, 0.5382357350580388, 0.18184249039995382, 0.5588624124497583, 0.6003009022791911, 0.5564844598458223, 0.5421365292102234, 0.1493852202875109, 0.1737878151858958, 0.13206105499337661, 0.11887715018716993, 0.11526228560811147, 0.11963909667053718, 0.13115765332164486, 0.0968663507126768, 0.10618177120638028, 0.1756677979504262, 0.1587399939497307, 0.16870836216090979, 0.23548799305746815, 0.26087380096021184, 0.17342642397444452, 0.27058839604055107, 0.2500862413043604, 0.17708427822277373, 0.4053157312629386, 0.44852870238948905, 0.29414487102599873, 0.3969880549812458, 0.24291050963379301, 0.5660173518364289, 0.4232119680194816, 0.4402468827144761, 0.43152276651386046, 0.30801820395043156, 0.25916627342861975, 0.2464567064823302, 0.2618561983478046, 0.24124198944635233, 0.3052132364058102, 0.3005396576492674, 0.2767815521544966, 0.3831557266646275, 0.22888397604321187, 0.20440953155344377, 0.20764839929998358, 0.23826433151862758, 0.179577483484486, 0.2245634199062041, 0.2043556919108359, 0.20975671688774933, 0.22841362492906614, 0.19658673065556143, 0.23958509121825744, 0.22231836666505778, 0.1951428545485243, 0.21976562352484974, 0.18394725871887074, 0.22053063944820683, 0.1932393690123837, 0.24579330439778435, 0.16508735333881464, 0.9004297909789138, 0.15403925772813165, 0.17657730292161944, 0.20135849581322562, 0.1994124381314637, 0.09995225983349432, 0.1689064608301627, 0.2109701685491152, 0.5420757844704522, 0.5326564630879933, 0.07309957921724086, 0.2065092971759107, 0.3554137774398687, 0.5706227800408289, 0.20959415035145124, 0.10497364130278697, 0.21107087533637892, 0.18606358433455739, 0.18277681779122168, 0.19546673638492662, 0.20026488512649243, 0.19117879430577056, 0.19702236715931343, 0.18655557247627186, 0.1996823981126309, 0.18285979933321306, 0.09068731030543131, 0.09130120261043262, 0.09573812489884481, 0.08264115859024135, 0.10098629901658662, 0.09640629234168896, 0.1216876467519723, 0.09757269207163677, 0.08151529343458064]}, "mutation_prompt": null}
{"id": "ee29b127-c82f-4b28-b1ab-23f331640e6d", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30  # Slightly reduced for early stage focused search\n        self.final_population_size = 22  # Further dynamic population size adjustment\n        self.inertia_weight = 0.57  # Lowered to encourage faster convergence\n        self.cognitive_coeff = 1.85  # Slightly increased for better local search\n        self.social_coeff = 1.35  # Increased to enhance global exploration\n        self.mutation_factor_init = 0.87  # Fine-tuned mutation factor for balance\n        self.cross_prob = 0.97  # Increased cross probability for more aggressive trial updates\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.initial_population_size, dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.initial_population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        eval_count = 0\n        inertia_dampening = 0.98  # Decreased for quicker inertia reduction\n        mutation_factor_change = (self.mutation_factor_init - 0.52) / self.budget  # Adjusted range for mutation factor\n\n        while eval_count < self.budget:\n            population_size = self.initial_population_size - int(\n                (eval_count / self.budget) * (self.initial_population_size - self.final_population_size))\n\n            for i in range(population_size):\n                score = func(self.population[i])\n                eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n                if eval_count >= self.budget:\n                    break\n\n            r1 = np.random.rand(population_size, self.dim)\n            r2 = np.random.rand(population_size, self.dim)\n            cognitive_component = self.cognitive_coeff * r1 * (self.personal_best_positions[:population_size] - self.population[:population_size])\n            social_component = self.social_coeff * r2 * (self.global_best_position - self.population[:population_size])\n            self.velocities[:population_size] = (self.inertia_weight * self.velocities[:population_size]) + cognitive_component + social_component\n            self.population[:population_size] = self.population[:population_size] + self.velocities[:population_size]\n\n            self.population[:population_size] = np.clip(self.population[:population_size], self.lower_bound, self.upper_bound)\n\n            for i in range(population_size):\n                indices = np.random.choice(np.delete(np.arange(population_size), i), 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = a + (self.mutation_factor_init - mutation_factor_change * eval_count) * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cross_prob:\n                        trial[j] = mutant[j]\n\n                trial_score = func(trial)\n                eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.population[i] = trial\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial\n                if eval_count >= self.budget:\n                    break\n\n            self.inertia_weight *= inertia_dampening\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedHybridPSODE", "description": "EnhancedHybridPSODE with fine-tuned dynamic strategies for improved convergence and solution quality.", "configspace": "", "generation": 43, "fitness": 0.29842177491656363, "feedback": "The algorithm EnhancedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.27.", "error": "", "parent_id": "af9c7347-3908-47a4-bd67-990d4874ebde", "metadata": {"aucs": [0.8755256035906835, 0.8824336556776395, 0.8738131720996589, 0.8720737071286169, 0.8580346053634728, 0.8883743231752513, 0.8741064973807269, 0.8834648172981028, 0.8892690127017878, 0.777180082514809, 0.7074097624818833, 0.7462721811018715, 0.7881991979303539, 0.7930126351674789, 0.05345699063802645, 0.7699431341077088, 0.7424375820954343, 0.6214669594733897, 0.140899718473955, 0.6121085532881001, 0.1606086223365939, 0.15232893823379823, 0.07268884389410613, 0.17734727609816003, 0.13812111199845045, 0.17597276526068595, 0.153575424132684, 0.10876297682588443, 0.1278428076950322, 0.1123412520265743, 0.11083998361218528, 0.1080803471894769, 0.10662701730228041, 0.14903048369852145, 0.1073385687710372, 0.13514778731156407, 0.9813406583071951, 0.9859380159587411, 0.9867572723666085, 0.9653388264001761, 0.9836926688695234, 0.9752742715227138, 0.98595589251358, 0.9772281152297637, 0.9790086699280769, 0.05967922959430039, 0.059093239390600516, 0.6466553688975858, 0.5001936917520442, 0.1518767777302883, 0.5386448311676807, 0.08399604173818676, 0.594812926129623, 0.5962023059994985, 0.22584311979877025, 0.8412895934821364, 0.17064841085107396, 0.27948252833464604, 0.19142333714239135, 0.21639907806103598, 0.23415319535539858, 0.8521361235594893, 0.36271797406893735, 0.15817449109794524, 0.16365003826491287, 0.16160281393827536, 0.18403773233265852, 0.1686609806245808, 0.15795342358458198, 0.17380020192915202, 0.2881295255084927, 0.17102791762169767, 0.14419148549246452, 0.11835609353985932, 0.15971027102552127, 0.1802635893999439, 0.1745588989874588, 0.13201709347234158, 0.20536519563263178, 0.03423302812025342, 0.1464419097063373, 0.03262015747448899, 9.999999999998899e-05, 0.07530386094377206, 0.0639842613903977, 9.999999999998899e-05, 0.004184544105094168, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11542911423509683, 0.08917752893149322, 0.09078849816463519, 0.04968707633128633, 0.06103664653659835, 0.018735061504974837, 0.1264137285507202, 0.1287883662174123, 0.05332449616442714, 0.19533548839376103, 0.035340220193233685, 0.13528857820041407, 0.07884370631502602, 0.07931819980353871, 0.07654713736607865, 0.09970950780701437, 0.07267890314831071, 0.07378777861526509, 0.2172226472432206, 0.04272866544340759, 0.09554405424738122, 0.10328267842328043, 0.14807574685066682, 0.16831331055972054, 0.048606058808041364, 0.20514145188061272, 0.08125973519269014, 0.5733437639055876, 0.526103350152969, 0.4777510095625461, 0.5683141510287117, 0.18209898951666592, 0.2086236038373226, 0.5636336619086586, 0.5613020568623215, 0.5825692547334533, 0.1364966466254034, 0.10300490968779141, 0.05587004612157276, 0.1091042394209999, 0.13192037397580147, 0.09896498856324665, 0.13551566303623108, 0.12045923680788928, 0.09613931279323007, 0.1327771628944754, 0.1836268290774694, 0.2663167953941168, 0.2176088210723538, 0.416397509364407, 0.1516745082973976, 0.47437927854920126, 0.19540573062446542, 0.1584587150748501, 0.2876960617620957, 0.45613452545246513, 0.37271034736697506, 0.29739988134592954, 0.20809917960859114, 0.33768582967530636, 0.45829991277383164, 0.4366320914252063, 0.48649294064914816, 0.19618518675490415, 0.3196795513060655, 0.25496968722211466, 0.34007139278917653, 0.20393918456725746, 0.3161257003864095, 0.37254791029050305, 0.2656015247938397, 0.2667799314274033, 0.22368897786484132, 0.21829864032260315, 0.261772782682551, 0.2323808617019768, 0.23982030044324099, 0.20928184053882148, 0.21058809234561415, 0.2677812361259698, 0.21148433842903847, 0.20868391846749146, 0.2456738226728642, 0.20729420418435607, 0.2184042623265824, 0.7907038566867168, 0.24275657097474013, 0.18061290100823058, 0.18759721200296986, 0.20062747131429892, 0.16546642330924222, 0.18568541915087722, 0.15410090793359288, 0.8919072984389749, 0.20141143538557094, 0.19873648531076782, 0.11421407025679231, 0.16830552159435752, 0.9086243994092258, 0.6768711304952193, 0.15557865801509074, 0.11040565158690374, 0.2090117403759305, 0.4044706269693684, 0.8583146723587499, 0.2116205273612045, 0.21026149401390604, 0.21175779343852597, 0.21752042033136376, 0.19022473419037078, 0.18890176037646766, 0.1818082021116877, 0.19840352452293197, 0.19006652108903177, 0.18175313911207147, 0.188095815463598, 0.20876816439652968, 0.0834473980960071, 0.10050177644359115, 0.09773278488460602, 0.09455857371276966, 0.101648872878212, 0.09875624322252263, 0.0908262737551131, 0.09597595588705332, 0.0899157659730212]}, "mutation_prompt": null}
{"id": "3537bdf6-bd4b-407c-b3ba-b04d38cb5f36", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 32\n        self.final_population_size = 26  # Enhanced dynamic population resizing\n        self.inertia_weight = 0.57  # Further reduced inertia weight for quicker convergence\n        self.cognitive_coeff = 1.85  # Slightly increased for improved exploration\n        self.social_coeff = 1.35  # Slightly increased for better exploitation\n        self.mutation_factor_init = 0.87  # Adjusted mutation factor for more diversity\n        self.cross_prob = 0.95  # High cross probability to maintain diversity\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.initial_population_size, dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.initial_population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        eval_count = 0\n        inertia_dampening = 0.985  # Slightly adjusted for faster dampening\n        mutation_factor_change = (self.mutation_factor_init - 0.5) / self.budget\n\n        while eval_count < self.budget:\n            population_size = self.initial_population_size - int(\n                (eval_count / self.budget) * (self.initial_population_size - self.final_population_size))\n\n            for i in range(population_size):\n                score = func(self.population[i])\n                eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n                if eval_count >= self.budget:\n                    break\n\n            r1 = np.random.rand(population_size, self.dim)\n            r2 = np.random.rand(population_size, self.dim)\n            cognitive_component = self.cognitive_coeff * r1 * (self.personal_best_positions[:population_size] - self.population[:population_size])\n            social_component = self.social_coeff * r2 * (self.global_best_position - self.population[:population_size])\n            self.velocities[:population_size] = (self.inertia_weight * self.velocities[:population_size]) + cognitive_component + social_component\n            self.population[:population_size] = self.population[:population_size] + self.velocities[:population_size]\n\n            self.population[:population_size] = np.clip(self.population[:population_size], self.lower_bound, self.upper_bound)\n\n            for i in range(population_size):\n                indices = np.random.choice(np.delete(np.arange(population_size), i), 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = a + (self.mutation_factor_init - mutation_factor_change * eval_count) * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cross_prob:\n                        trial[j] = mutant[j]\n\n                trial_score = func(trial)\n                eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.population[i] = trial\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial\n                if eval_count >= self.budget:\n                    break\n\n            self.inertia_weight *= inertia_dampening\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedHybridPSODE", "description": "Slightly enhanced adaptive hybrid PSO-DE with improved diversity and convergence adjustments for better performance.", "configspace": "", "generation": 44, "fitness": 0.3142984807057508, "feedback": "The algorithm EnhancedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.28.", "error": "", "parent_id": "af9c7347-3908-47a4-bd67-990d4874ebde", "metadata": {"aucs": [0.8665112806806949, 0.8488962133532335, 0.8595350971967237, 0.8787099921412764, 0.6472708393784601, 0.8656621376419107, 0.8645435544957769, 0.8644828059908795, 0.1829439565809443, 0.7524391083479371, 0.03954669639073416, 0.7044074045087565, 0.32645664327951307, 0.5907712952225752, 0.7442516625420255, 0.749772025489081, 0.7582277614818397, 0.7385905385019871, 0.1413005428041968, 0.117303002980923, 0.14874348646039237, 0.11079559277329332, 0.1478364675691557, 0.13928984003756772, 0.17310453906727274, 0.1462188475781122, 0.10517678709045053, 0.11419247405707589, 0.1355322155369928, 0.1074712007437647, 0.1155481932592094, 0.11398452771348233, 0.13462730891553087, 0.11848337632723671, 0.1032099857318377, 0.10448467432296527, 0.9857073321323422, 0.975445309388353, 0.9884289249101037, 0.984796919953763, 0.9783955731546042, 0.9745795800330908, 0.990559998027616, 0.9796433699589255, 0.9799995834093396, 0.6593408398866616, 0.7476753257418762, 0.7044348754457822, 0.6339279490306471, 0.6057286143895473, 0.6449235323959942, 0.6321000337504085, 0.08784091864378296, 0.6194668028229608, 0.844747488005964, 0.37373850218762783, 0.7918265660197055, 0.21282302405984022, 0.20755312913363566, 0.20042161926031554, 0.22867494828822588, 0.8049464029559797, 0.23063235721651676, 0.16063663761369684, 0.21707691191886103, 0.1834046756043881, 0.1606971625734026, 0.13193028248986816, 0.17226464629046845, 0.1547519744185223, 0.23323861459631234, 0.18166495172398023, 0.19692298059350588, 0.10250499134711166, 0.4284658553829458, 0.14382424302516228, 0.33248248970116867, 0.20758559856302905, 0.2233432004223691, 0.06755368990838106, 0.2229978243789702, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03068470915824728, 0.02769026441014688, 0.006052021760529547, 0.012109937662437509, 9.999999999998899e-05, 0.08680207814281271, 0.1688009841824878, 0.12754939079003524, 0.09312009420657508, 0.002769890732221003, 0.018755155694989534, 0.038479612935361174, 0.07594906328715734, 0.048005895141801425, 0.04709461581776708, 0.03385279467778313, 0.3055832400195021, 0.12160172665006608, 0.09265072691063791, 0.11174381180503568, 0.16389798545402878, 0.0698810172915797, 0.08665738077617557, 0.12472866993704013, 0.040813434608072074, 0.1290113043279545, 0.006345790950098906, 0.10950423145317578, 0.08656942342060991, 0.14372536144556092, 0.055375027048245595, 0.26150850734989384, 0.5960940941040842, 0.5984231888314943, 0.5644473017959483, 0.5607451784006077, 0.5477273730984644, 0.604457115162272, 0.5825081967857357, 0.560405425205696, 0.5752474440219427, 0.1528285889835368, 0.10888106247459595, 0.10458477619801165, 0.10739306313371266, 0.12117877690067802, 0.13483892767564665, 0.0696861167452516, 0.08647028211304464, 0.11960256832729788, 0.14706318594937606, 0.5999101562583395, 0.20462560336312496, 0.26994641206513903, 0.3202681392155591, 0.2125666771219178, 0.2575779260396902, 0.2019266950269033, 0.2669518715963236, 0.38719350942890274, 0.33119817524396344, 0.46367763442641763, 0.4505288333479478, 0.2235854834160289, 0.3363175200401287, 0.21368572991847568, 0.3086160269266959, 0.30941938600478736, 0.33626023058638654, 0.30887798493441676, 0.3699797116654958, 0.19379293496981775, 0.23574147284310698, 0.2047011823176278, 0.3352910521085153, 0.19487370966654194, 0.3124892049719369, 0.230162550487498, 0.19150915546197478, 0.20238041253792916, 0.2016438258601554, 0.19933030591662948, 0.2115834775690263, 0.2248706516764717, 0.20495488575953236, 0.19531988118975596, 0.7470904358844015, 0.24063633565099574, 0.205596755954786, 0.24369832322819074, 0.24226117460133145, 0.2427568698444993, 0.19436279593313788, 0.19799254196554927, 0.22015963503077718, 0.8896590782757026, 0.8685593893930817, 0.15398378526145529, 0.8905575670544428, 0.1984716751621941, 0.19782959064879602, 0.850218204908677, 0.16899234109554706, 0.8909594132780683, 0.5638769051127037, 0.20952844342516508, 0.11223570371540859, 0.865501722645272, 0.16726885860310636, 0.2097084272403169, 0.20893467156860934, 0.15493779583551892, 0.21097039039510368, 0.19764931209280812, 0.18375412599405072, 0.20378370567381954, 0.18951377081300858, 0.1834720540231226, 0.20233214460192095, 0.19221735689962705, 0.2046867518136859, 0.1887775559120708, 0.08948884984894523, 0.09777935608503485, 0.09737894343233422, 0.08643808966215716, 0.08797603703967072, 0.07778051102875139, 0.14292245047924645, 0.08628291499578811, 0.09730551946513566]}, "mutation_prompt": null}
{"id": "6f9cc4b1-c208-4fc8-b32f-aa471abada9e", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30  # Slightly reduced initial population for quicker adaptation\n        self.final_population_size = 22  # Adjusted final population size for better convergence balance\n        self.inertia_weight = 0.58  # Further reduced inertia weight for enhanced convergence speed\n        self.cognitive_coeff = 1.9  # Increased cognitive coefficient for improved local search\n        self.social_coeff = 1.4  # Slightly increased social coefficient to enhance global convergence\n        self.mutation_factor_init = 0.87  # Adjusted mutation factor for better diversity\n        self.cross_prob = 0.95  # Slightly decreased cross probability for a more balanced exploration\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.initial_population_size, dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.initial_population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        eval_count = 0\n        inertia_dampening = 0.98  # Adjusted for slightly faster dampening\n        mutation_factor_change = (self.mutation_factor_init - 0.52) / self.budget  # Modified mutation factor change\n\n        while eval_count < self.budget:\n            population_size = self.initial_population_size - int(\n                (eval_count / self.budget) * (self.initial_population_size - self.final_population_size))\n\n            for i in range(population_size):\n                score = func(self.population[i])\n                eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n                if eval_count >= self.budget:\n                    break\n\n            r1 = np.random.rand(population_size, self.dim)\n            r2 = np.random.rand(population_size, self.dim)\n            cognitive_component = self.cognitive_coeff * r1 * (self.personal_best_positions[:population_size] - self.population[:population_size])\n            social_component = self.social_coeff * r2 * (self.global_best_position - self.population[:population_size])\n            self.velocities[:population_size] = (self.inertia_weight * self.velocities[:population_size]) + cognitive_component + social_component\n            self.population[:population_size] = self.population[:population_size] + self.velocities[:population_size]\n\n            self.population[:population_size] = np.clip(self.population[:population_size], self.lower_bound, self.upper_bound)\n\n            for i in range(population_size):\n                indices = np.random.choice(np.delete(np.arange(population_size), i), 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = a + (self.mutation_factor_init - mutation_factor_change * eval_count) * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cross_prob:\n                        trial[j] = mutant[j]\n\n                trial_score = func(trial)\n                eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.population[i] = trial\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial\n                if eval_count >= self.budget:\n                    break\n\n            self.inertia_weight *= inertia_dampening\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedHybridPSODE", "description": "An enhanced version of EnhancedHybridPSODE with refined parameter adjustments and hybridization for improved exploration-exploitation balance.", "configspace": "", "generation": 45, "fitness": 0.2974426312089378, "feedback": "The algorithm EnhancedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.27.", "error": "", "parent_id": "af9c7347-3908-47a4-bd67-990d4874ebde", "metadata": {"aucs": [0.8777011634450087, 0.8712473615872642, 0.8870266447277454, 0.19027995715768675, 0.8675720108090015, 0.887077487648825, 0.8887321840314895, 0.868994380398176, 0.8783299909564017, 0.7566253303726711, 0.7809321112523481, 0.7779819027011623, 0.7843778308906261, 0.7777261040165158, 0.7105379115687005, 0.7557792537553414, 0.7931774686417179, 0.7402349203410361, 0.13846806764574504, 0.13942750360570955, 0.10779662093872089, 0.1529040014424119, 0.107708869131806, 0.1422731633477632, 0.15080246854210688, 0.12829050942133746, 0.15614863546153956, 0.12565150280165382, 0.11584598125252055, 0.10989542520864848, 0.11527245565660305, 0.12749453355460738, 0.1378384583005462, 0.11195894678048046, 0.10203805011522982, 0.1121743746765036, 0.9801831000151262, 0.9901456039605324, 0.9862891634886398, 0.9742455617037848, 0.9854647048358872, 0.9805607643057572, 0.9861559148195321, 0.9807967319918375, 0.9806611640981167, 0.5058617896596022, 0.05934685001396023, 0.5529181379903922, 0.15198829576807638, 0.1507065134612099, 0.6578491596101159, 0.5651533236457003, 0.08851663191996484, 0.08727675937616186, 0.2268921360219036, 0.22635220365804298, 0.22324746604029766, 0.3511547333925029, 0.18902946999299397, 0.1908941747567776, 0.22993851130828036, 0.21689594229612008, 0.38230084015408106, 0.17113491963492689, 0.17005520932693163, 0.180709704164008, 0.17359370655362127, 0.13006365315737134, 0.15858572108306968, 0.1733825424029668, 0.19334198913700829, 0.15313872842415732, 0.1413201555615058, 0.05357357728146872, 0.20604279813400062, 0.14689218036559104, 0.168937021004941, 0.23819623916723853, 0.2079736393197954, 0.16100181598692764, 0.10169647670013271, 9.999999999998899e-05, 0.025829992586593242, 0.06304920752204213, 0.10309635139250295, 0.043374027737264065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08035058528824102, 0.10464858371397967, 0.06467297375718173, 0.05233400493742191, 0.0438689090783293, 0.044342618252476096, 0.07510338745939282, 0.1281062588999966, 0.07969625612089293, 0.0304401473373348, 0.04906288235128342, 0.21037225845683438, 0.07865154748946102, 0.26150536121493695, 0.08473967704602803, 0.08071135464432477, 0.13110479122641794, 0.17931697644454148, 0.08242893659637407, 0.1357447703660979, 0.15731443481902718, 0.2301869807133713, 0.06344385870849889, 0.06443062616143924, 0.17310831299532348, 0.13574230794626363, 0.1048787322407434, 0.08461856179523042, 0.486849097171297, 0.562117568105237, 0.5653662160308959, 0.5421800533611243, 0.617819872732056, 0.5687146678085573, 0.5762051578836036, 0.6338192034532808, 0.6308507256172255, 0.08981672950388964, 0.09485110294804877, 0.08669320415667459, 0.11627423504829681, 0.10484426341316044, 0.14650605839089115, 0.1398045147139092, 0.11797423597000556, 0.1151595829621227, 0.2032188404043478, 0.21474641408651274, 0.17535423438399445, 0.2818772965833237, 0.22538169075429015, 0.19432631904441955, 0.3991411578126598, 0.19996629599087312, 0.2530326604678904, 0.38059684717807607, 0.4447592030304931, 0.39052725420848766, 0.36072265030029116, 0.24549913782471688, 0.48868325708200655, 0.535425529646347, 0.4852216591304609, 0.2851005417216459, 0.21938792674523078, 0.3576630783452408, 0.22253867834722874, 0.2102593516649338, 0.15151653238001417, 0.25896999652545716, 0.34897915369967947, 0.4404031373482642, 0.28676411144190983, 0.20110473427087083, 0.24345199013395136, 0.20239930868445488, 0.20923169528006091, 0.2191386332525237, 0.222604860061554, 0.21510350520151944, 0.19333981707484937, 0.22680576252339513, 0.19343270123502898, 0.20073468555100626, 0.20452496339562254, 0.19943549377344538, 0.20231076782051005, 0.21520748780254673, 0.18794227890162196, 0.8071034107470829, 0.20490189622321708, 0.16512033433311613, 0.18619781069757502, 0.1535326503771074, 0.17652744727589653, 0.2011917220126508, 0.19954590988143928, 0.8429405023143028, 0.16879619859737227, 0.8978449619785429, 0.7710254438762907, 0.15641738736525534, 0.19609265661352926, 0.206682241577399, 0.3868947744184036, 0.852323848215764, 0.20993408431040184, 0.10508983197847432, 0.5322713579080425, 0.18301223170315384, 0.20052784303301752, 0.2004038687802565, 0.17533757272462136, 0.19100737880088992, 0.18459082884982958, 0.1838582347809482, 0.1997518290253385, 0.18896551810066642, 0.09212384309942223, 0.09768750051962327, 0.09276662013243109, 0.09853128811874945, 0.0824294436367119, 0.0893107968768827, 0.13633588857710432, 0.0865215733175575, 0.0978684967929121]}, "mutation_prompt": null}
{"id": "0b1c8748-bcbc-4c3c-9660-1a892e8204eb", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 32  # Slightly increased initial population\n        self.final_population_size = 24  # More dynamic population resizing\n        self.inertia_weight = 0.59  # Further reduced inertia weight for quicker convergence\n        self.cognitive_coeff = 1.8  # Increased to further enhance exploration\n        self.social_coeff = 1.3  # Slightly decreased to improve balance\n        self.mutation_factor_init = 0.88  # Adjusted mutation factor for diversity\n        self.cross_prob = 0.96  # Higher cross probability for more aggressive trial acceptance\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.initial_population_size, dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.initial_population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        eval_count = 0\n        inertia_dampening = 0.99  # Adjusted for slightly faster dampening\n        mutation_factor_change = (self.mutation_factor_init - 0.5) / self.budget\n\n        while eval_count < self.budget:\n            population_size = self.initial_population_size - int(\n                (eval_count / self.budget) * (self.initial_population_size - self.final_population_size))\n\n            for i in range(population_size):\n                score = func(self.population[i])\n                eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n                if eval_count >= self.budget:\n                    break\n\n            r1 = np.random.rand(population_size, self.dim)\n            r2 = np.random.rand(population_size, self.dim)\n            cognitive_component = self.cognitive_coeff * r1 * (self.personal_best_positions[:population_size] - self.population[:population_size])\n            social_component = self.social_coeff * r2 * (self.global_best_position - self.population[:population_size])\n            self.velocities[:population_size] = (self.inertia_weight * self.velocities[:population_size]) + cognitive_component + social_component\n            self.population[:population_size] = self.population[:population_size] + self.velocities[:population_size]\n\n            self.population[:population_size] = np.clip(self.population[:population_size], self.lower_bound, self.upper_bound)\n\n            for i in range(population_size):\n                indices = np.random.choice(np.delete(np.arange(population_size), i), 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = a + (self.mutation_factor_init - mutation_factor_change * eval_count) * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cross_prob:\n                        trial[j] = mutant[j]\n\n                trial_score = func(trial)\n                eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.population[i] = trial\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial\n                if eval_count >= self.budget:\n                    break\n\n            self.inertia_weight *= inertia_dampening\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedHybridPSODE", "description": "EnhancedHybridPSODE with dynamic parameter tuning and adaptive population control for faster convergence.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "af9c7347-3908-47a4-bd67-990d4874ebde", "metadata": {"aucs": [0.854841170199753, 0.8337434860933706, 0.8469967212274282, 0.8455483575894931, 0.8180411099900293, 0.8538268412181504, 0.8661472530299321, 0.8586874660363351, 0.8309962951446832, 0.7294235129780255, 0.6998937295171335, 0.6094117259358, 0.7323993392336852, 0.7178626996713835, 0.7527717430435938, 0.7303553160756826, 0.7398023539588414, 0.7345810602280723, 0.14931063233199515, 0.13351555112136448, 0.6622369060538811, 0.14066429175160333, 0.1726157421192509, 0.13536244333222003, 0.16927292151669604, 0.17310903385891174, 0.16665051046678891, 0.10286767970176403, 0.11062674053789101, 0.09841548178142223, 0.11766048483176039, 0.13749285478756756, 0.1497628696663631, 0.12877821416404456, 0.10536676396505973, 0.14711824380142302, 0.9856512933902406, 0.9787812971815051, 0.9884286877792379, 0.9839714483074401, 0.9785587651669921, 0.9797841168656637, 0.9905617241107126, 0.9770933132040401, 0.9833577911084052, 0.7048655414793028, 0.7211467168240129, 0.7052216937557363, 0.7191710474747863, 0.14908004501186256, 0.7445236695618853, 0.7205652174423838, 0.5511206013439216, 0.6527132167092512, 0.3481079237327044, 0.2220022876779414, 0.22260963171491, 0.2773721531139688, 0.8106141678517857, 0.193143748525206, 0.7282030748672175, 0.2380711802780806, 0.1150872978406785, 0.15842663143275082, 0.12928270349161397, 0.1819346820411205, 0.16708296455829608, 0.20992905560266106, 0.12237661338006744, 0.3351147961480979, 0.19017807601288228, 0.21338139704086945, 0.18076589346594996, 0.13757489068267315, 0.22643758141871184, 0.18454500747880243, 0.24556725003162827, 0.18134559209726409, 0.22223500435779941, 0.13360190580985276, 0.12530423963151405, 9.999999999998899e-05, 0.04106590289391676, 0.009052554914146471, 9.999999999998899e-05, 0.035304986290289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07486847503284044, 0.07747999204176736, 0.03671692122265646, 0.12597768691781308, 0.08375568218519003, 9.999999999998899e-05, 0.025237010735392862, 0.09410909002513912, 0.0728437426819526, 0.042060846996438195, 0.046510822810082564, 0.07634599429344835, 0.1226496143325938, 0.09744350257911849, 0.14932735382092965, 0.07586047305840182, 0.2842119416221408, 0.08389114588004398, 0.08772702619431327, 0.06467686522928273, 9.999999999998899e-05, 0.1307702082894382, 0.00630684225609679, 0.20421519971616386, 0.08524348655987957, 0.19106498023883534, 0.04781213433341358, 0.09314857491772333, 0.5185871615500623, 0.5649049736705083, 0.5689980628370421, 0.5514152013975806, 0.5490509555687053, 0.20790007435716462, 0.5973916126254126, 0.6530010078799888, 0.5781118929648357, 0.08304826450485725, 0.07600267204559463, 0.11491859562690787, 0.12362571842962733, 0.13043972677666205, 0.13716767684518238, 0.12653952287696635, 0.13657113960499223, 0.09709974675359878, 0.14374469357949093, 0.18695456979770098, 0.18923957478194653, 0.2981175702971416, 0.24944309371380124, 0.1406468119143186, 0.3294200634479776, 0.17120108790425115, 0.28248616584533215, 0.48908365950123567, 0.6094958590761, 0.6544264222405355, 0.2899814886249241, 0.5453506268139661, 0.36763381267556094, 0.4436084820302868, 0.49875119412574753, 0.5928333162885812, 0.32402022101522454, 0.25792803367766615, 0.2829233453807415, 0.4076522537381234, 0.2622079541846637, 0.32710742616195454, 0.3432538164896639, 0.23390776228649435, 0.30096566980124007, 0.25365634866961995, 0.18875259829404345, 0.267932015646579, 0.20209338773698615, 0.21300809713335944, 0.23998942892561703, 0.24237800148333477, 0.22644071122299358, 0.246895492041457, 0.2407489637587219, 0.7381993016559744, 0.24476307319944546, 0.7596076646020812, 0.238690415179029, 0.2126182009475257, 0.21898585008086835, 0.21703275509314346, 0.2161411307226221, 0.8804029305720451, 0.878470043102824, 0.154132523530214, 0.882908229087604, 0.19873057126016025, 0.19745108635270425, 0.8419510619466086, 0.16897779637434018, 0.8931557330242321, 0.7672084987916588, 0.1683188460864965, 0.2078508423927442, 0.7558544886253658, 0.16710346584180424, 0.2089793176375876, 0.2082782456388691, 0.7949888960681359, 0.8308106177184313, 0.19654164232329197, 0.19487711470545, 0.19335537842386907, 0.19706767001895187, 0.21178877924311013, 0.21062142901655512, 0.20665390909466186, 0.18865726577078357, 0.18353189923188806, 0.09784604018523879, 0.09464449116249218, 0.09282370571545195, 0.08584127053615209, 0.08156069572947378, 0.089102552583189, 0.13650074412598556, 0.07560180769216351, 0.07904243372709896]}, "mutation_prompt": null}
{"id": "b8f4dcb5-b103-46ee-8229-c83e4b6136c6", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 32  # Slightly increased initial population\n        self.final_population_size = 24  # More dynamic population resizing\n        self.inertia_weight = 0.59  # Further reduced inertia weight for quicker convergence\n        self.cognitive_coeff = 1.8  # Increased to further enhance exploration\n        self.social_coeff = 1.3  # Slightly decreased to improve balance\n        self.mutation_factor_init = 0.88  # Adjusted mutation factor for diversity\n        self.cross_prob = 0.96  # Higher cross probability for more aggressive trial acceptance\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.initial_population_size, dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.initial_population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        eval_count = 0\n        inertia_dampening = 0.99  # Adjusted for slightly faster dampening\n        mutation_factor_change = (self.mutation_factor_init - 0.5) / self.budget\n\n        while eval_count < self.budget:\n            population_size = self.initial_population_size - int(\n                (eval_count / self.budget) * (self.initial_population_size - self.final_population_size))\n\n            for i in range(population_size):\n                score = func(self.population[i])\n                eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n                if eval_count >= self.budget:\n                    break\n\n            r1 = np.random.rand(population_size, self.dim)\n            r2 = np.random.rand(population_size, self.dim)\n            cognitive_component = self.cognitive_coeff * r1 * (self.personal_best_positions[:population_size] - self.population[:population_size])\n            social_component = self.social_coeff * r2 * (self.global_best_position - self.population[:population_size])\n            self.velocities[:population_size] = (self.inertia_weight * self.velocities[:population_size]) + cognitive_component + social_component\n            self.population[:population_size] = self.population[:population_size] + self.velocities[:population_size]\n\n            self.population[:population_size] = np.clip(self.population[:population_size], self.lower_bound, self.upper_bound)\n\n            for i in range(population_size):\n                indices = np.random.choice(np.delete(np.arange(population_size), i), 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = a + (self.mutation_factor_init - mutation_factor_change * eval_count) * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cross_prob:\n                        trial[j] = mutant[j]\n\n                trial_score = func(trial)\n                eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.population[i] = trial\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial\n                if eval_count >= self.budget:\n                    break\n\n            self.inertia_weight *= inertia_dampening\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedHybridPSODE", "description": "EnhancedHybridPSODE with dynamic parameter tuning and adaptive population control for faster convergence.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "af9c7347-3908-47a4-bd67-990d4874ebde", "metadata": {"aucs": [0.854841170199753, 0.8337434860933706, 0.8469967212274282, 0.8455483575894931, 0.8180411099900293, 0.8538268412181504, 0.8661472530299321, 0.8586874660363351, 0.8309962951446832, 0.7294235129780255, 0.6998937295171335, 0.6094117259358, 0.7323993392336852, 0.7178626996713835, 0.7527717430435938, 0.7303553160756826, 0.7398023539588414, 0.7345810602280723, 0.14931063233199515, 0.13351555112136448, 0.6622369060538811, 0.14066429175160333, 0.1726157421192509, 0.13536244333222003, 0.16927292151669604, 0.17310903385891174, 0.16665051046678891, 0.10286767970176403, 0.11062674053789101, 0.09841548178142223, 0.11766048483176039, 0.13749285478756756, 0.1497628696663631, 0.12877821416404456, 0.10536676396505973, 0.14711824380142302, 0.9856512933902406, 0.9787812971815051, 0.9884286877792379, 0.9839714483074401, 0.9785587651669921, 0.9797841168656637, 0.9905617241107126, 0.9770933132040401, 0.9833577911084052, 0.7048655414793028, 0.7211467168240129, 0.7052216937557363, 0.7191710474747863, 0.14908004501186256, 0.7445236695618853, 0.7205652174423838, 0.5511206013439216, 0.6527132167092512, 0.3481079237327044, 0.2220022876779414, 0.22260963171491, 0.2773721531139688, 0.8106141678517857, 0.193143748525206, 0.7282030748672175, 0.2380711802780806, 0.1150872978406785, 0.15842663143275082, 0.12928270349161397, 0.1819346820411205, 0.16708296455829608, 0.20992905560266106, 0.12237661338006744, 0.3351147961480979, 0.19017807601288228, 0.21338139704086945, 0.18076589346594996, 0.13757489068267315, 0.22643758141871184, 0.18454500747880243, 0.24556725003162827, 0.18134559209726409, 0.22223500435779941, 0.13360190580985276, 0.12530423963151405, 9.999999999998899e-05, 0.04106590289391676, 0.009052554914146471, 9.999999999998899e-05, 0.035304986290289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07486847503284044, 0.07747999204176736, 0.03671692122265646, 0.12597768691781308, 0.08375568218519003, 9.999999999998899e-05, 0.025237010735392862, 0.09410909002513912, 0.0728437426819526, 0.042060846996438195, 0.046510822810082564, 0.07634599429344835, 0.1226496143325938, 0.09744350257911849, 0.14932735382092965, 0.07586047305840182, 0.2842119416221408, 0.08389114588004398, 0.08772702619431327, 0.06467686522928273, 9.999999999998899e-05, 0.1307702082894382, 0.00630684225609679, 0.20421519971616386, 0.08524348655987957, 0.19106498023883534, 0.04781213433341358, 0.09314857491772333, 0.5185871615500623, 0.5649049736705083, 0.5689980628370421, 0.5514152013975806, 0.5490509555687053, 0.20790007435716462, 0.5973916126254126, 0.6530010078799888, 0.5781118929648357, 0.08304826450485725, 0.07600267204559463, 0.11491859562690787, 0.12362571842962733, 0.13043972677666205, 0.13716767684518238, 0.12653952287696635, 0.13657113960499223, 0.09709974675359878, 0.14374469357949093, 0.18695456979770098, 0.18923957478194653, 0.2981175702971416, 0.24944309371380124, 0.1406468119143186, 0.3294200634479776, 0.17120108790425115, 0.28248616584533215, 0.48908365950123567, 0.6094958590761, 0.6544264222405355, 0.2899814886249241, 0.5453506268139661, 0.36763381267556094, 0.4436084820302868, 0.49875119412574753, 0.5928333162885812, 0.32402022101522454, 0.25792803367766615, 0.2829233453807415, 0.4076522537381234, 0.2622079541846637, 0.32710742616195454, 0.3432538164896639, 0.23390776228649435, 0.30096566980124007, 0.25365634866961995, 0.18875259829404345, 0.267932015646579, 0.20209338773698615, 0.21300809713335944, 0.23998942892561703, 0.24237800148333477, 0.22644071122299358, 0.246895492041457, 0.2407489637587219, 0.7381993016559744, 0.24476307319944546, 0.7596076646020812, 0.238690415179029, 0.2126182009475257, 0.21898585008086835, 0.21703275509314346, 0.2161411307226221, 0.8804029305720451, 0.878470043102824, 0.154132523530214, 0.882908229087604, 0.19873057126016025, 0.19745108635270425, 0.8419510619466086, 0.16897779637434018, 0.8931557330242321, 0.7672084987916588, 0.1683188460864965, 0.2078508423927442, 0.7558544886253658, 0.16710346584180424, 0.2089793176375876, 0.2082782456388691, 0.7949888960681359, 0.8308106177184313, 0.19654164232329197, 0.19487711470545, 0.19335537842386907, 0.19706767001895187, 0.21178877924311013, 0.21062142901655512, 0.20665390909466186, 0.18865726577078357, 0.18353189923188806, 0.09784604018523879, 0.09464449116249218, 0.09282370571545195, 0.08584127053615209, 0.08156069572947378, 0.089102552583189, 0.13650074412598556, 0.07560180769216351, 0.07904243372709896]}, "mutation_prompt": null}
{"id": "46cd14d6-90ec-4d62-ae69-a1c9eb406485", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 32  # Slightly increased initial population\n        self.final_population_size = 24  # More dynamic population resizing\n        self.inertia_weight = 0.59  # Further reduced inertia weight for quicker convergence\n        self.cognitive_coeff = 1.8  # Increased to further enhance exploration\n        self.social_coeff = 1.3  # Slightly decreased to improve balance\n        self.mutation_factor_init = 0.88  # Adjusted mutation factor for diversity\n        self.cross_prob = 0.96  # Higher cross probability for more aggressive trial acceptance\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.initial_population_size, dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.initial_population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        eval_count = 0\n        inertia_dampening = 0.99  # Adjusted for slightly faster dampening\n        mutation_factor_change = (self.mutation_factor_init - 0.5) / self.budget\n\n        while eval_count < self.budget:\n            population_size = self.initial_population_size - int(\n                (eval_count / self.budget) * (self.initial_population_size - self.final_population_size))\n\n            for i in range(population_size):\n                score = func(self.population[i])\n                eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n                if eval_count >= self.budget:\n                    break\n\n            r1 = np.random.rand(population_size, self.dim)\n            r2 = np.random.rand(population_size, self.dim)\n            cognitive_component = self.cognitive_coeff * r1 * (self.personal_best_positions[:population_size] - self.population[:population_size])\n            social_component = self.social_coeff * r2 * (self.global_best_position - self.population[:population_size])\n            self.velocities[:population_size] = (self.inertia_weight * self.velocities[:population_size]) + cognitive_component + social_component\n            self.population[:population_size] = self.population[:population_size] + self.velocities[:population_size]\n\n            self.population[:population_size] = np.clip(self.population[:population_size], self.lower_bound, self.upper_bound)\n\n            for i in range(population_size):\n                indices = np.random.choice(np.delete(np.arange(population_size), i), 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = a + (self.mutation_factor_init - mutation_factor_change * eval_count) * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cross_prob:\n                        trial[j] = mutant[j]\n\n                trial_score = func(trial)\n                eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.population[i] = trial\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial\n                if eval_count >= self.budget:\n                    break\n\n            self.inertia_weight *= inertia_dampening\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedHybridPSODE", "description": "EnhancedHybridPSODE with dynamic parameter tuning and adaptive population control for faster convergence.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "af9c7347-3908-47a4-bd67-990d4874ebde", "metadata": {"aucs": [0.854841170199753, 0.8337434860933706, 0.8469967212274282, 0.8455483575894931, 0.8180411099900293, 0.8538268412181504, 0.8661472530299321, 0.8586874660363351, 0.8309962951446832, 0.7294235129780255, 0.6998937295171335, 0.6094117259358, 0.7323993392336852, 0.7178626996713835, 0.7527717430435938, 0.7303553160756826, 0.7398023539588414, 0.7345810602280723, 0.14931063233199515, 0.13351555112136448, 0.6622369060538811, 0.14066429175160333, 0.1726157421192509, 0.13536244333222003, 0.16927292151669604, 0.17310903385891174, 0.16665051046678891, 0.10286767970176403, 0.11062674053789101, 0.09841548178142223, 0.11766048483176039, 0.13749285478756756, 0.1497628696663631, 0.12877821416404456, 0.10536676396505973, 0.14711824380142302, 0.9856512933902406, 0.9787812971815051, 0.9884286877792379, 0.9839714483074401, 0.9785587651669921, 0.9797841168656637, 0.9905617241107126, 0.9770933132040401, 0.9833577911084052, 0.7048655414793028, 0.7211467168240129, 0.7052216937557363, 0.7191710474747863, 0.14908004501186256, 0.7445236695618853, 0.7205652174423838, 0.5511206013439216, 0.6527132167092512, 0.3481079237327044, 0.2220022876779414, 0.22260963171491, 0.2773721531139688, 0.8106141678517857, 0.193143748525206, 0.7282030748672175, 0.2380711802780806, 0.1150872978406785, 0.15842663143275082, 0.12928270349161397, 0.1819346820411205, 0.16708296455829608, 0.20992905560266106, 0.12237661338006744, 0.3351147961480979, 0.19017807601288228, 0.21338139704086945, 0.18076589346594996, 0.13757489068267315, 0.22643758141871184, 0.18454500747880243, 0.24556725003162827, 0.18134559209726409, 0.22223500435779941, 0.13360190580985276, 0.12530423963151405, 9.999999999998899e-05, 0.04106590289391676, 0.009052554914146471, 9.999999999998899e-05, 0.035304986290289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07486847503284044, 0.07747999204176736, 0.03671692122265646, 0.12597768691781308, 0.08375568218519003, 9.999999999998899e-05, 0.025237010735392862, 0.09410909002513912, 0.0728437426819526, 0.042060846996438195, 0.046510822810082564, 0.07634599429344835, 0.1226496143325938, 0.09744350257911849, 0.14932735382092965, 0.07586047305840182, 0.2842119416221408, 0.08389114588004398, 0.08772702619431327, 0.06467686522928273, 9.999999999998899e-05, 0.1307702082894382, 0.00630684225609679, 0.20421519971616386, 0.08524348655987957, 0.19106498023883534, 0.04781213433341358, 0.09314857491772333, 0.5185871615500623, 0.5649049736705083, 0.5689980628370421, 0.5514152013975806, 0.5490509555687053, 0.20790007435716462, 0.5973916126254126, 0.6530010078799888, 0.5781118929648357, 0.08304826450485725, 0.07600267204559463, 0.11491859562690787, 0.12362571842962733, 0.13043972677666205, 0.13716767684518238, 0.12653952287696635, 0.13657113960499223, 0.09709974675359878, 0.14374469357949093, 0.18695456979770098, 0.18923957478194653, 0.2981175702971416, 0.24944309371380124, 0.1406468119143186, 0.3294200634479776, 0.17120108790425115, 0.28248616584533215, 0.48908365950123567, 0.6094958590761, 0.6544264222405355, 0.2899814886249241, 0.5453506268139661, 0.36763381267556094, 0.4436084820302868, 0.49875119412574753, 0.5928333162885812, 0.32402022101522454, 0.25792803367766615, 0.2829233453807415, 0.4076522537381234, 0.2622079541846637, 0.32710742616195454, 0.3432538164896639, 0.23390776228649435, 0.30096566980124007, 0.25365634866961995, 0.18875259829404345, 0.267932015646579, 0.20209338773698615, 0.21300809713335944, 0.23998942892561703, 0.24237800148333477, 0.22644071122299358, 0.246895492041457, 0.2407489637587219, 0.7381993016559744, 0.24476307319944546, 0.7596076646020812, 0.238690415179029, 0.2126182009475257, 0.21898585008086835, 0.21703275509314346, 0.2161411307226221, 0.8804029305720451, 0.878470043102824, 0.154132523530214, 0.882908229087604, 0.19873057126016025, 0.19745108635270425, 0.8419510619466086, 0.16897779637434018, 0.8931557330242321, 0.7672084987916588, 0.1683188460864965, 0.2078508423927442, 0.7558544886253658, 0.16710346584180424, 0.2089793176375876, 0.2082782456388691, 0.7949888960681359, 0.8308106177184313, 0.19654164232329197, 0.19487711470545, 0.19335537842386907, 0.19706767001895187, 0.21178877924311013, 0.21062142901655512, 0.20665390909466186, 0.18865726577078357, 0.18353189923188806, 0.09784604018523879, 0.09464449116249218, 0.09282370571545195, 0.08584127053615209, 0.08156069572947378, 0.089102552583189, 0.13650074412598556, 0.07560180769216351, 0.07904243372709896]}, "mutation_prompt": null}
{"id": "199dd126-1022-4357-8511-6cda767312a2", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30  # Slight decrease in initial population for faster adaptation\n        self.final_population_size = 25  # Adjusted final population size for enhanced exploitation\n        self.inertia_weight = 0.57  # Further reduced inertia weight to aid convergence\n        self.cognitive_coeff = 1.85  # Slightly increased to enhance local search\n        self.social_coeff = 1.35  # Slightly increased to boost global search abilities\n        self.mutation_factor_init = 0.90  # Increased for greater diversity in solutions\n        self.cross_prob = 0.95  # Slightly reduced to fine-tune trial acceptance\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.initial_population_size, dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.initial_population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        eval_count = 0\n        inertia_dampening = 0.98  # Slightly faster dampening for quicker convergence\n        mutation_factor_change = (self.mutation_factor_init - 0.55) / self.budget  # Adjusted linear decline\n\n        while eval_count < self.budget:\n            population_size = self.initial_population_size - int(\n                (eval_count / self.budget) * (self.initial_population_size - self.final_population_size))\n\n            for i in range(population_size):\n                score = func(self.population[i])\n                eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n                if eval_count >= self.budget:\n                    break\n\n            r1 = np.random.rand(population_size, self.dim)\n            r2 = np.random.rand(population_size, self.dim)\n            cognitive_component = self.cognitive_coeff * r1 * (self.personal_best_positions[:population_size] - self.population[:population_size])\n            social_component = self.social_coeff * r2 * (self.global_best_position - self.population[:population_size])\n            self.velocities[:population_size] = (self.inertia_weight * self.velocities[:population_size]) + cognitive_component + social_component\n            self.population[:population_size] = self.population[:population_size] + self.velocities[:population_size]\n\n            self.population[:population_size] = np.clip(self.population[:population_size], self.lower_bound, self.upper_bound)\n\n            for i in range(population_size):\n                indices = np.random.choice(np.delete(np.arange(population_size), i), 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = a + (self.mutation_factor_init - mutation_factor_change * eval_count) * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cross_prob:\n                        trial[j] = mutant[j]\n\n                trial_score = func(trial)\n                eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.population[i] = trial\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial\n                if eval_count >= self.budget:\n                    break\n\n            self.inertia_weight *= inertia_dampening\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedHybridPSODE", "description": "Modified EnhancedHybridPSODE with adjusted parameters for improved exploration-exploitation balance and convergence speed.", "configspace": "", "generation": 49, "fitness": 0.2914107373691683, "feedback": "The algorithm EnhancedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.27.", "error": "", "parent_id": "af9c7347-3908-47a4-bd67-990d4874ebde", "metadata": {"aucs": [0.882672422002263, 0.8732833472561667, 0.8846595709591145, 0.19015551254453988, 0.8717055381738003, 0.8837536570541453, 0.8787759918163529, 0.8767011494794412, 0.8793675197901079, 9.999999999998899e-05, 0.7367017709996089, 0.7237336955899903, 0.7151126730321853, 0.6004989746490287, 0.21537621005282703, 0.7241045449199742, 0.7624053278785242, 0.7833187046620504, 0.12221062979633157, 0.13255544377998996, 0.12933035910381163, 0.14772548938333607, 0.1677566650579282, 0.1562956893577946, 0.12935078068504913, 0.12908220956751215, 0.16941708874241668, 0.13528535939436848, 0.11247100307872826, 0.0877576651398726, 0.10588211852744156, 0.13563585438204295, 0.1743116670955175, 0.1118572941150584, 0.10261564400381662, 0.1111104418854788, 0.9797777082671972, 0.9859405923365308, 0.9867833383000733, 0.9704846875213117, 0.9817082559269877, 0.9651882124062194, 0.9860690926373706, 0.9804231976100812, 0.9805559413458431, 0.7346488086793168, 0.05920826921274225, 0.7120532333101284, 0.28809231297309645, 0.15169521919917228, 0.14954464002630175, 0.19892569688033968, 0.21982115821023274, 0.6302885686744166, 0.22401254713690122, 0.7896237102715372, 0.22445234231888844, 0.21453989649621819, 0.20607888874418423, 0.19168697772287158, 0.23148601861910478, 0.8527483871273013, 0.23126787074195643, 0.17753177051458446, 0.16430091118128187, 0.12811949031587322, 0.24585703205546483, 0.16703452079790948, 0.17384638155290977, 0.2369362347971914, 0.1571710335313311, 0.15538044001093698, 0.13142224123632418, 0.12122556643702409, 0.1271179622171501, 0.14697237709779454, 0.17367274244825515, 0.18940450614293125, 0.2023593494685212, 0.11141099141363286, 0.20875515213944995, 0.055390428556392535, 0.0027184922006601164, 0.08562272869318643, 0.04820269677503586, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10695083345494005, 0.03249903644150942, 0.11738237577676469, 0.08041472357494928, 0.011214438990491571, 0.015953459835835737, 0.10789690487987957, 0.06464443693015232, 0.03056672308456143, 0.15042549994678134, 0.03493946103956236, 0.15382950075680124, 0.07731288614340504, 0.07609631469034861, 0.07767038795933823, 0.09946162486352716, 0.15985876800659682, 0.07956839734902299, 0.07777043296712327, 0.04284873343726381, 0.189221293968307, 0.18130892189283554, 0.03848724168785944, 0.2575221330876548, 0.0896311368700402, 0.11575805962152741, 0.08054318055471454, 0.4828966214901086, 0.5132209109170245, 0.5441707732193339, 0.5407158261536458, 0.5652993387211471, 0.5768499980937942, 0.5950290422032851, 0.6126567888486085, 0.5878371388348196, 0.14013362985744993, 0.12803503778019554, 0.09915709098446346, 0.12340742265560112, 0.1294219723830502, 0.12164229178245445, 0.13037656317923352, 0.07876059486498177, 0.127749494438952, 0.19178130272036653, 0.2584898261423537, 0.17687739551817194, 0.23541394079471412, 0.3182165405125219, 0.24861404424446798, 0.19803495719667508, 0.1997572847672986, 0.23287681549415462, 0.21414033866088888, 0.3618780493714163, 0.4146987136397996, 0.4357054799702418, 0.2199971236351157, 0.5008098653509311, 0.3776472385218387, 0.504308875953013, 0.7010239653238801, 0.24579580815784718, 0.2951358594643868, 0.3371139902633702, 0.2627230219153619, 0.24362573449518177, 0.25074684073792164, 0.35189453167230955, 0.2708565482801031, 0.3109219055024486, 0.22154437251452175, 0.21591607698830828, 0.1962992821322116, 0.2309180990473867, 0.2454342976741678, 0.20730980943999244, 0.23071113026444034, 0.21040338881680176, 0.2863914084020328, 0.19025878388086837, 0.22123552127781532, 0.7953276842039517, 0.2225272419386366, 0.18448175344765128, 0.19615156702820746, 0.1967956535047738, 0.1959033659600683, 0.24586972871771773, 0.16522711482554697, 0.1673656727994901, 0.15417232231279598, 0.8989410990077685, 0.20145730567889875, 0.1991952816041448, 0.09996597039205912, 0.1688322296026128, 0.21098043799609234, 0.8046560252330529, 0.49493050986698706, 0.10902967511643746, 0.2080908893197292, 0.5040837682369437, 0.6116290732161069, 0.207764461649121, 0.20986410837649083, 0.2100769886959416, 0.20613239216090995, 0.20588090248074897, 0.20527435040758568, 0.20934593142166447, 0.20148003991695373, 0.20194058785680413, 0.18899704921343852, 0.18048809671758625, 0.17470154430558382, 0.11566532686207953, 0.09322905149047933, 0.09121248410995919, 0.08778898439956762, 0.1035966108211902, 0.09690984429497362, 0.10487315675062037, 0.08744936379572688, 0.08265137680119694]}, "mutation_prompt": null}
{"id": "d5bedd88-f300-401a-83a3-11422ce6bcd3", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30  # Adjusted population for balance\n        self.final_population_size = 22  # More dynamic population resizing\n        self.inertia_weight = 0.57  # Reduced inertia for better convergence\n        self.cognitive_coeff = 1.9  # Slightly increased for enhanced exploration\n        self.social_coeff = 1.35  # Adjusted for improved social learning balance\n        self.mutation_factor_init = 0.85  # Reduced mutation factor for controlled diversity\n        self.cross_prob = 0.95  # Balanced cross probability for effective trial acceptance\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.initial_population_size, dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.initial_population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        eval_count = 0\n        inertia_dampening = 0.985  # Slightly faster dampening for quicker convergence\n        mutation_factor_change = (self.mutation_factor_init - 0.55) / self.budget\n\n        while eval_count < self.budget:\n            population_size = self.initial_population_size - int(\n                (eval_count / self.budget) * (self.initial_population_size - self.final_population_size))\n\n            for i in range(population_size):\n                score = func(self.population[i])\n                eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n                if eval_count >= self.budget:\n                    break\n\n            r1 = np.random.rand(population_size, self.dim)\n            r2 = np.random.rand(population_size, self.dim)\n            cognitive_component = self.cognitive_coeff * r1 * (self.personal_best_positions[:population_size] - self.population[:population_size])\n            social_component = self.social_coeff * r2 * (self.global_best_position - self.population[:population_size])\n            self.velocities[:population_size] = (self.inertia_weight * self.velocities[:population_size]) + cognitive_component + social_component\n            self.population[:population_size] = self.population[:population_size] + self.velocities[:population_size]\n\n            self.population[:population_size] = np.clip(self.population[:population_size], self.lower_bound, self.upper_bound)\n\n            for i in range(population_size):\n                indices = np.random.choice(np.delete(np.arange(population_size), i), 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = a + (self.mutation_factor_init - mutation_factor_change * eval_count) * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cross_prob:\n                        trial[j] = mutant[j]\n\n                trial_score = func(trial)\n                eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.population[i] = trial\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial\n                if eval_count >= self.budget:\n                    break\n\n            self.inertia_weight *= inertia_dampening\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedHybridPSODE", "description": "Hybrid PSO with enhanced adaptive dynamics and refined parameter controls for improved convergence speed.", "configspace": "", "generation": 50, "fitness": 0.29531598155682953, "feedback": "The algorithm EnhancedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.27.", "error": "", "parent_id": "af9c7347-3908-47a4-bd67-990d4874ebde", "metadata": {"aucs": [0.8671561460860797, 0.871675498816158, 0.8561069630146817, 0.8757618086194094, 0.8872564004951606, 0.8760995387380701, 0.8728291158819249, 0.8872266094789403, 0.8663636673083654, 0.7558610899520293, 0.7539526444914482, 0.7003946303685817, 0.761365983771932, 0.7770827038015986, 0.7336737813868841, 0.7073596682539874, 0.776263609800226, 0.7430567640988097, 0.1370789107978666, 0.682276616749774, 0.1448040261918936, 0.15480997763966575, 0.15209297284382461, 0.1194135164432526, 0.14501976203262423, 0.11867544211156578, 0.17479780979549542, 0.12856753498202522, 0.10414202587853838, 0.16055247299546105, 0.13011076818901912, 0.10094406616396279, 0.11169419561653249, 0.11767803697231716, 0.12611262144283186, 0.11004584560872499, 0.9764640420660284, 0.9859243955533183, 0.986293382483881, 0.9708986791873565, 0.9817965783396091, 0.9688921806312358, 0.9861237923739526, 0.9776454543090999, 0.9804363853835194, 0.059642682442408335, 0.15617867062711843, 0.46714169439865183, 0.23531043998484946, 0.1518991892693874, 0.6651368979747531, 0.17134325618245727, 0.08848750404060224, 0.4693088237155282, 0.3753815708548416, 0.8405276894795894, 0.2265376577951047, 0.2762740476596697, 0.18620316527194347, 0.19067740658397803, 0.1377746775956854, 0.22733309723321937, 0.32609585317800593, 0.10859441762236022, 0.15282566568828604, 0.185480948667734, 0.20275376774656217, 0.12867333862197738, 0.15809332367626305, 0.17881647909636145, 0.1627763428891047, 0.19928024706362013, 0.2020417854722052, 0.10444314610222549, 0.13859945189641854, 0.12900634574203107, 0.1764136599393683, 0.19511103414482456, 0.19152099741158768, 9.999999999998899e-05, 0.19335598181719482, 0.041524698947310035, 0.023349101538422623, 0.06777751149073996, 0.05589518285822437, 9.999999999998899e-05, 0.004839780511795788, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16275875129509698, 0.12864218288147677, 0.0921910388034235, 0.07930474402777421, 0.012148830087611584, 0.04332451463245002, 0.12483747422529978, 0.09186572967114393, 0.06735884952455584, 0.047275684421531294, 0.2097146744253392, 0.07762693028107315, 0.07713936390713716, 0.075049400533727, 0.07630949920005625, 0.08913172865958074, 0.06841688527680945, 0.0704578822703712, 0.06037598394116561, 0.15487371295147623, 0.14949188407544012, 0.23872071243627757, 0.16997169988323424, 0.18730904623368938, 0.06300769061800404, 0.08061395598806342, 0.05574031698264714, 0.5071141521879583, 0.5309139128100584, 0.6023946476631132, 0.5502769248064892, 0.5803387642510218, 0.6157275207193311, 0.5985942978163155, 0.5801888883719235, 0.5855002308971253, 0.09914632587237016, 0.07892740588849101, 0.10730361862317006, 0.13572262718364747, 0.16062255196985986, 0.1257046272968324, 0.17290123893744658, 0.08687954860567737, 0.12729908015200853, 0.2962545216309126, 0.16696235868966036, 0.20271651431524862, 0.23367299613869996, 0.22995297721413188, 0.2845543423742092, 0.2808452809574995, 0.20161128647830784, 0.22758519598102678, 0.45959684946698565, 0.28889336712322455, 0.43384912575085477, 0.3730965743357457, 0.4890058090377326, 0.49558695920582485, 0.5396973274967305, 0.3652442443601842, 0.28580563233386547, 0.19588783112511088, 0.20006306817768682, 0.2733954846971056, 0.1998605448938815, 0.19445177839577366, 0.2840693211079831, 0.36115107736729324, 0.3019511536815753, 0.39473516392946717, 0.21910525890206745, 0.2271124575981115, 0.2441500912735386, 0.1929243805490779, 0.1947458189216974, 0.18929468077449207, 0.219566611798508, 0.22043848763489327, 0.23565162297474607, 0.19164892504105469, 0.23994757606728445, 0.1894316832155808, 0.2064322010065197, 0.24264445431506454, 0.20747544864003298, 0.1985235328816507, 0.1947639425008899, 0.19849317712019743, 0.16548773689006158, 0.16539481696000835, 0.15321031722443545, 0.8992409730774242, 0.20129398197249826, 0.19937564934165664, 0.09993807546196443, 0.16843547922061952, 0.21086969547426282, 0.6088995586595591, 0.1560990894338583, 0.16349553069484113, 0.6560179314958045, 0.4871841491799904, 0.8507464120147497, 0.21019836182637697, 0.104953912449669, 0.10399907744466674, 0.17283808811358925, 0.2028127478566325, 0.18008313874296278, 0.20642078298076993, 0.18894963615947813, 0.20427549011853186, 0.19056310339983484, 0.1873918541826225, 0.195169244110312, 0.08968510922537498, 0.09031368323841193, 0.09765166900948952, 0.10579709955278538, 0.0835969726364163, 0.09315107089365615, 0.089821799642959, 0.09276523477745835, 0.08435622366194406]}, "mutation_prompt": null}
{"id": "91ca83ef-629a-43a3-9a1c-6f1c3314ee47", "solution": "import numpy as np\n\nclass EnhancedAdaptivePSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 32\n        self.final_population_size = 24\n        self.inertia_weight = 0.57  # Reduced inertia weight for quicker adaptation\n        self.cognitive_coeff = 1.85  # Slightly increased for better exploration\n        self.social_coeff = 1.35  # Restored social coefficient to balance exploration and exploitation\n        self.mutation_factor_init = 0.9  # Increased mutation factor for enhanced diversity\n        self.cross_prob = 0.95  # High cross probability for robust trial solutions\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.initial_population_size, dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.initial_population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        eval_count = 0\n        inertia_dampening = 0.995  # Slower dampening for sustained momentum\n        mutation_factor_change = (self.mutation_factor_init - 0.5) / self.budget\n\n        while eval_count < self.budget:\n            population_size = self.initial_population_size - int(\n                (eval_count / self.budget) * (self.initial_population_size - self.final_population_size))\n\n            for i in range(population_size):\n                score = func(self.population[i])\n                eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n                if eval_count >= self.budget:\n                    break\n\n            r1 = np.random.rand(population_size, self.dim)\n            r2 = np.random.rand(population_size, self.dim)\n            cognitive_component = self.cognitive_coeff * r1 * (self.personal_best_positions[:population_size] - self.population[:population_size])\n            social_component = self.social_coeff * r2 * (self.global_best_position - self.population[:population_size])\n            self.velocities[:population_size] = (self.inertia_weight * self.velocities[:population_size]) + cognitive_component + social_component\n            self.population[:population_size] = self.population[:population_size] + self.velocities[:population_size]\n\n            self.population[:population_size] = np.clip(self.population[:population_size], self.lower_bound, self.upper_bound)\n\n            for i in range(population_size):\n                indices = np.random.choice(np.delete(np.arange(population_size), i), 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = a + (self.mutation_factor_init - mutation_factor_change * eval_count) * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cross_prob and np.random.rand() < self.cross_prob:  # Dual check for diversified crossover\n                        trial[j] = mutant[j]\n\n                trial_score = func(trial)\n                eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.population[i] = trial\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial\n                if eval_count >= self.budget:\n                    break\n\n            self.inertia_weight *= inertia_dampening\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedAdaptivePSODE", "description": "EnhancedAdaptivePSODE introduces finer-grained parameter tuning and diversified mutation strategies for improved convergence speed.", "configspace": "", "generation": 51, "fitness": 0.3059342894211382, "feedback": "The algorithm EnhancedAdaptivePSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.27.", "error": "", "parent_id": "af9c7347-3908-47a4-bd67-990d4874ebde", "metadata": {"aucs": [0.836376613292641, 0.8203544975198681, 0.8533832252155296, 0.8349260398821305, 0.18110826048109707, 0.8368608610144017, 0.8242196557941728, 0.8264876291705623, 0.8408977720212867, 0.7195356609208111, 0.7015388886282503, 0.6572909804757112, 0.6920435238641157, 0.6627494248594674, 0.7009080151436116, 0.6875847139716574, 0.7085692409365663, 0.6815931653746428, 0.15171252067004548, 0.17496953271489457, 0.1199974888675035, 0.12528412649921394, 0.1309590179550767, 0.1646815383476844, 0.17096068622494787, 0.11001722760958677, 0.10595706917193914, 0.1343046456972421, 0.1585798146793198, 0.1235409088676841, 0.13221744234640664, 0.1419304640997976, 0.10654614720940392, 0.10648871289681339, 0.12652169748110642, 0.14639410492086558, 0.9850728169464308, 0.9854484187242609, 0.9888966534102444, 0.9897980400315748, 0.9787104618523593, 0.9736234682080704, 0.9845477202929833, 0.9785105502925883, 0.979360405609945, 0.612282546873973, 0.6656371063869686, 0.6444013699072222, 0.37733340325037656, 0.6388356086158293, 0.14942546141412627, 0.7037732768932338, 0.6199946012516412, 0.6853140020605514, 0.8373127605184982, 0.22294609866498072, 0.7687824379769075, 0.2756293733932835, 0.36061137630137285, 0.37467040854637423, 0.22755725347809874, 0.3273624628827986, 0.3745282203158845, 0.18885183978432996, 0.21275130853563384, 0.15455387573615353, 0.24812586602847775, 0.1796177738309328, 0.1961143390363672, 0.17757446650848474, 0.12621797484016495, 0.18589076781320268, 0.12982571403170617, 0.13229962242158366, 0.19723065446067733, 0.20428603178665816, 0.10161197999983984, 0.20660233737866152, 0.24353233944013886, 9.999999999998899e-05, 0.1232117413187177, 9.999999999998899e-05, 9.999999999998899e-05, 0.046382834512478044, 0.034086130908647316, 0.0005527455900684597, 9.999999999998899e-05, 0.040762787471043005, 9.999999999998899e-05, 9.999999999998899e-05, 0.07021711560865018, 0.03744614987243344, 0.0585521120290281, 0.12037237346249752, 0.020260123187749057, 0.011494898388098918, 0.09533482646260494, 0.08672139538927437, 0.028952780391495958, 0.0444837342748029, 0.03739184020150643, 0.18607528837747966, 0.15090034529369445, 0.08562674613736998, 0.08912709792511397, 0.09637914712839268, 0.10393895272449094, 0.2731091650817997, 0.11687683658456172, 9.999999999998899e-05, 0.1382838436443632, 0.037774853662869146, 0.03928091518129062, 0.2369331537820858, 0.22943327226650712, 0.061085123008344455, 0.21661034720661265, 0.5696422916262063, 0.5391084553912759, 0.5342385795865237, 0.5539268466739664, 0.5435027930637806, 0.2083331393110408, 0.5600345461517652, 0.5650989392888083, 0.5611158482983449, 0.10605430238257119, 0.07561935683397081, 0.1335665878356549, 0.13926884810787, 0.13866637935840298, 0.12160705326376609, 0.12517949817141616, 0.11046155896814125, 0.0980253364457001, 0.330288001349309, 0.20326732851246765, 0.17921319559339666, 0.2125932520405064, 0.32244287431434215, 0.23833499596450658, 0.18761433087470103, 0.22461934636205738, 0.24875723949252293, 0.2262204906965284, 0.5081541473518953, 0.32647782624256627, 0.4500771978345016, 0.3069229456058178, 0.3811871843724596, 0.6391344837528378, 0.48006178113663533, 0.21996162137461195, 0.28371944819364003, 0.1943285574674385, 0.29071715123037634, 0.25860477038340934, 0.22709679677641736, 0.3556108844936684, 0.3147111685780396, 0.48674085139043877, 0.3370324551883255, 0.20643025372063983, 0.1558862376227369, 0.2197416207127969, 0.22676096912279187, 0.20728502923811465, 0.2409834272663589, 0.20909599233595777, 0.21825212997945675, 0.2076056715208311, 0.24526603073964903, 0.7544187455590374, 0.21925545691859538, 0.1844894872886622, 0.23330251882101694, 0.2434362957199162, 0.24259568267733378, 0.21899723978750685, 0.1928815765908789, 0.8649827559279931, 0.16844409132135407, 0.15358942172947243, 0.8807942379482203, 0.19922412024201064, 0.19786168380165892, 0.15780958204639173, 0.1697632268580861, 0.16017129573850086, 0.7858278328060351, 0.21196129843876188, 0.5965388461239924, 0.5427916805278747, 0.1682046145357493, 0.20867552862245142, 0.10381327449283051, 0.21036728174656705, 0.19799835796463772, 0.1844774796534263, 0.18851953004143496, 0.20508936954135548, 0.18795820790410434, 0.19282832069847133, 0.20511720801126776, 0.20163263544050136, 0.18838040138509482, 0.18641125739561637, 0.09073050422657414, 0.08401885815507126, 0.09501659898708747, 0.08696827525085649, 0.08760879594938975, 0.08587294663114065, 0.09426865325241196, 0.08969852843461956, 0.09306157254621572]}, "mutation_prompt": null}
{"id": "86ed2f01-54fd-4867-8f43-06f4366f2547", "solution": "import numpy as np\n\nclass EnhancedHybridPSODEPlusPlus:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 32\n        self.final_population_size = 22  # Further dynamic population resizing\n        self.inertia_weight = 0.58  # Slightly reduced inertia weight for faster convergence\n        self.cognitive_coeff = 2.0  # Increased to improve exploration capabilities\n        self.social_coeff = 1.2  # Slightly decreased for better balance\n        self.mutation_factor_init = 0.9  # Adjusted mutation factor for enhanced exploration\n        self.cross_prob = 0.97  # Increased cross probability for more aggressive trial acceptance\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.initial_population_size, dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.initial_population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        eval_count = 0\n        inertia_dampening = 0.98  # Adjusted for faster dampening\n        mutation_factor_change = (self.mutation_factor_init - 0.6) / self.budget\n\n        while eval_count < self.budget:\n            population_size = self.initial_population_size - int(\n                (eval_count / self.budget) * (self.initial_population_size - self.final_population_size))\n\n            for i in range(population_size):\n                score = func(self.population[i])\n                eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n                if eval_count >= self.budget:\n                    break\n\n            r1 = np.random.rand(population_size, self.dim)\n            r2 = np.random.rand(population_size, self.dim)\n            cognitive_component = self.cognitive_coeff * r1 * (self.personal_best_positions[:population_size] - self.population[:population_size])\n            social_component = self.social_coeff * r2 * (self.global_best_position - self.population[:population_size])\n            self.velocities[:population_size] = (self.inertia_weight * self.velocities[:population_size]) + cognitive_component + social_component\n            self.population[:population_size] = self.population[:population_size] + self.velocities[:population_size]\n\n            self.population[:population_size] = np.clip(self.population[:population_size], self.lower_bound, self.upper_bound)\n\n            for i in range(population_size):\n                indices = np.random.choice(np.delete(np.arange(population_size), i), 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = a + (self.mutation_factor_init - mutation_factor_change * eval_count) * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cross_prob:\n                        trial[j] = mutant[j]\n\n                trial_score = func(trial)\n                eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.population[i] = trial\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial\n                if eval_count >= self.budget:\n                    break\n\n            self.inertia_weight *= inertia_dampening\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedHybridPSODEPlusPlus", "description": "EnhancedHybridPSODE++ with fine-tuned parameter adjustments and a strategic mutation strategy for improved convergence speed.", "configspace": "", "generation": 52, "fitness": 0.3227273381024333, "feedback": "The algorithm EnhancedHybridPSODEPlusPlus got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.28.", "error": "", "parent_id": "af9c7347-3908-47a4-bd67-990d4874ebde", "metadata": {"aucs": [0.8805239594113693, 0.8673787152093986, 0.8774353626229374, 0.8792471657572193, 0.8785843916376219, 0.8859939540134169, 0.874182446080759, 0.18199827564160398, 0.8232586530799515, 0.7627895545885823, 0.6937541048154894, 0.7705400785519345, 0.7539326015691106, 0.763242712581509, 0.7244132329468415, 0.7291190130140442, 0.7780494516532586, 0.7198013254690911, 0.13717068839749613, 0.1374575205866435, 0.7290139370369821, 0.16721925036352236, 0.07087655845884078, 0.14958765516387174, 0.17655159674414755, 0.15525299176522367, 0.17808016576603136, 0.10644233505307088, 0.10644504408144273, 0.12739023201717503, 0.11149894819067363, 0.15505799866907, 0.10404041128544683, 0.1047600004924758, 0.11739649154420972, 0.10623297608956506, 0.9837123236262816, 0.97799532871395, 0.98827224008702, 0.9838102964212647, 0.9724849109056559, 0.9738185925392651, 0.9851899607062264, 0.9756782196109165, 0.9774693954505073, 0.6836321817517638, 0.6250239468363773, 0.7068315188701857, 0.703013406896364, 0.451515616979446, 0.5214924443789882, 0.553956536511512, 0.431213054221547, 0.4515298795805225, 0.367548944321177, 0.6766704782936883, 0.22396861364042442, 0.27055060666880015, 0.8862794586699057, 0.20827638290983508, 0.22635253692682322, 0.22707230570798054, 0.8715516944394439, 0.1169023775764283, 0.19160622244330594, 0.17019420486610926, 0.18468418721224344, 0.20473783612306196, 0.12949638192003676, 0.12446930983655913, 0.12385798883671573, 0.18500249501871724, 0.1859366591292524, 0.18013912073438298, 0.2913337298040215, 0.18968965688598904, 0.5136889993718607, 0.17851234847158304, 0.21018725547487238, 9.999999999998899e-05, 0.12543687199734466, 0.027694027845904357, 0.009775437638179785, 0.00489685330584122, 0.004245519899890304, 0.020929224989194473, 0.06067954770501505, 0.006991079893034602, 9.999999999998899e-05, 0.036646693027878374, 0.09140825185173074, 0.10013265540361571, 0.09132611922893719, 0.14411758695767551, 0.006818806986075843, 0.049070397990520376, 0.10868010724357902, 0.07732572829325768, 0.041014664478482565, 0.04885370825975821, 0.06747556482163886, 0.2137854670826571, 0.0904502965838756, 0.1213269595033073, 0.12561838242230083, 0.09763944467655905, 0.07110879243881396, 0.1567064847243428, 0.09865992197748308, 0.2316239914838325, 0.08216559194364603, 0.09685298389278252, 0.318438726620743, 0.19487612837535662, 0.05607977418054211, 0.04903982976781662, 0.08217740907355386, 0.5539590885350489, 0.5919104248249483, 0.5263120530858247, 0.5536172446442185, 0.5380081016955147, 0.20820041226731578, 0.559343785540497, 0.5412611320448232, 0.6267588481748179, 0.12877298114842384, 0.14460543439817253, 0.1333549614231906, 0.1280061496664594, 0.13672459566882755, 0.1047739971149082, 0.1286996449709812, 0.13589623628858516, 0.09124193133754821, 0.2922981778514727, 0.18694435233629336, 0.20969250902780245, 0.3350000732746151, 0.2098711032433035, 0.17957468178300062, 0.15172567581700036, 0.19966631040542449, 0.3034001259283131, 0.4099848163198728, 0.3913978423376363, 0.32869501845606397, 0.3991848825621023, 0.22421712014159356, 0.3986821761793601, 0.47601254558282513, 0.325957374422025, 0.5166211957310375, 0.3268493573288811, 0.3573218463727138, 0.29742047353074363, 0.2994071351756338, 0.1475407872065151, 0.23557381578114023, 0.2601846357769534, 0.2612932307012953, 0.38175392440620315, 0.21390178644758973, 0.1656077297367039, 0.21502816954398685, 0.21308969407493072, 0.21586956113688516, 0.2289051116219304, 0.2076141928249403, 0.22120536877292585, 0.22551130856753843, 0.19393783880846382, 0.20841617350198116, 0.2200276682348158, 0.249003645326767, 0.18659632147269922, 0.21163270592749672, 0.22403398082024495, 0.21976553669155696, 0.19957037434753322, 0.9057513953465172, 0.9004636958462169, 0.15128103772709023, 0.9013344984636084, 0.20111987011241272, 0.1997172997359392, 0.158437860472592, 0.16890194647431345, 0.9132275702918206, 0.7125084908672146, 0.21033198323488522, 0.4995756315209653, 0.8302011446949994, 0.1686204894815353, 0.3717339238479431, 0.20486779197928195, 0.6958387268541504, 0.10498372565138325, 0.1853801616165085, 0.17660254354167615, 0.19937984354293325, 0.20960083280026476, 0.1823778954756392, 0.19876602264377485, 0.18081621891100885, 0.20338684010353214, 0.19374139260335255, 0.10059398085280902, 0.09356822231704298, 0.09455627345644735, 0.09350449992396292, 0.09113616417457382, 0.0941401722999965, 0.09432041998815821, 0.09559119638427949, 0.08497140623164856]}, "mutation_prompt": null}
{"id": "228974dc-53b2-41dd-baee-86220027d167", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 32\n        self.final_population_size = 24\n        self.inertia_weight = 0.57  # Reduced inertia weight for quicker convergence\n        self.cognitive_coeff = 1.9  # Increased to enhance exploration\n        self.social_coeff = 1.4  # Increased to strengthen social influence\n        self.mutation_factor_init = 0.86  # Slightly reduced for adaptive diversity\n        self.cross_prob = 0.93  # Adjusted for balanced crossover\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.initial_population_size, dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.initial_population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        eval_count = 0\n        inertia_dampening = 0.98  # Adjusted for more gradual dampening\n        mutation_factor_change = (self.mutation_factor_init - 0.52) / self.budget\n\n        while eval_count < self.budget:\n            population_size = self.initial_population_size - int(\n                (eval_count / self.budget) * (self.initial_population_size - self.final_population_size))\n\n            for i in range(population_size):\n                score = func(self.population[i])\n                eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n                if eval_count >= self.budget:\n                    break\n\n            r1 = np.random.rand(population_size, self.dim)\n            r2 = np.random.rand(population_size, self.dim)\n            cognitive_component = self.cognitive_coeff * r1 * (self.personal_best_positions[:population_size] - self.population[:population_size])\n            social_component = self.social_coeff * r2 * (self.global_best_position - self.population[:population_size])\n            self.velocities[:population_size] = (self.inertia_weight * self.velocities[:population_size]) + cognitive_component + social_component\n            self.population[:population_size] = self.population[:population_size] + self.velocities[:population_size]\n\n            self.population[:population_size] = np.clip(self.population[:population_size], self.lower_bound, self.upper_bound)\n\n            for i in range(population_size):\n                indices = np.random.choice(np.delete(np.arange(population_size), i), 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = a + (self.mutation_factor_init - mutation_factor_change * eval_count) * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n\n                crossover_threshold = 0.5 + 0.5 * (self.cross_prob - (eval_count / self.budget) * (self.cross_prob - 0.6))\n                for j in range(self.dim):\n                    if np.random.rand() < crossover_threshold:\n                        trial[j] = mutant[j]\n\n                trial_score = func(trial)\n                eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.population[i] = trial\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial\n                if eval_count >= self.budget:\n                    break\n\n            self.inertia_weight *= inertia_dampening\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedHybridPSODE", "description": "EnhancedHybridPSODE with refined inertia, crossover strategy, and adaptive mutation for accelerated convergence.", "configspace": "", "generation": 53, "fitness": 0.2927178922779358, "feedback": "The algorithm EnhancedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.26.", "error": "", "parent_id": "af9c7347-3908-47a4-bd67-990d4874ebde", "metadata": {"aucs": [0.8695019867145765, 0.8657714741487958, 0.8771985960579748, 0.8705194847240617, 0.8550980426622576, 0.8655135675917345, 0.8831084742404142, 0.871102358239537, 0.1829355582144131, 0.7778694091910932, 0.726482925162065, 9.999999999998899e-05, 9.999999999998899e-05, 0.762221663453638, 0.7807432701343687, 0.7650312049239831, 0.779503313045264, 0.2202773432826185, 0.14882084098947979, 0.13641812190308988, 0.1548358348743084, 0.12620033965347754, 0.1512519557879225, 0.15612190260064984, 0.14765393702582663, 0.11989494114018595, 0.14131237121211382, 0.09437174821207484, 0.13542041366277957, 0.15087146364054238, 0.12075032329843072, 0.13710475118493592, 0.12565629859115612, 0.17297484483582082, 0.12368618314433477, 0.128816515399241, 0.9854649686245588, 0.978015282283123, 0.9859573241453207, 0.9840025197727057, 0.9770683319938656, 0.9779273487196168, 0.978155330664794, 0.9792736877270637, 0.9800049882599776, 0.11814889926163541, 0.6224452968240749, 0.7533437649970958, 0.17528950583142944, 0.466937533201799, 0.4838220255372587, 0.6012163393748459, 0.14225437929587348, 0.6507911754637581, 0.3694661497145848, 0.17005911650033978, 0.16876039498805406, 0.19374073099728395, 0.20839349174950972, 0.20150604274735684, 0.12323696711451793, 0.3759395216971094, 0.22654103897444455, 0.11098509364098497, 0.1705410330691215, 0.2001235227383038, 0.16405831518809577, 0.12750443554613466, 0.16585525782027, 0.17975443857869922, 0.18491390263553065, 0.16123857113201379, 0.17433695646978198, 0.09894523647787867, 0.16628873140896794, 0.17445845473940047, 0.12596409653565765, 0.202066684974455, 0.189992372053165, 0.0828682109931973, 0.1930063254100184, 0.08715343670839626, 9.999999999998899e-05, 0.01078328138560214, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06441470158860962, 0.06441569185609386, 0.094450638567806, 0.07984861806918575, 0.08284917122253899, 0.025045698847799613, 0.02953204747590188, 0.07478270138671783, 0.05960746808414186, 0.035988700313316024, 0.047053296508284825, 0.03844306959098576, 0.048609821970750255, 0.131038302244741, 0.10363987241373429, 0.0755193989792653, 0.09770461801307084, 0.07029583336025025, 0.09228876557855714, 0.13141481241069164, 0.2182414510335433, 0.19055305920192545, 0.09182423913491022, 0.10413203644705882, 0.2652691017354396, 0.28282475381096495, 0.03687798362531869, 0.08556191606949015, 0.5364294326037014, 0.5384562148619061, 0.5730152662219921, 0.5747394398368333, 0.553931877247062, 0.3782621683708587, 0.5728293129840065, 0.5684980805423674, 0.5523971229142517, 0.15438521019929963, 0.09993515224230065, 0.05999352371800504, 0.10712403580865071, 0.13579723532085775, 0.1350415054072488, 0.10735663788224414, 0.0923239523992253, 0.11545897310117403, 0.26675522378347105, 0.18581014990065092, 0.16325165242580464, 0.36463865113507055, 0.16903922289604756, 0.3618278304114251, 0.46660883272132747, 0.2271379347322916, 0.26311426116185954, 0.38728652624728, 0.38137824045642377, 0.3086885605966495, 0.4108160167946956, 0.4280160734277413, 0.521561886883588, 0.5142671948318072, 0.4892753165214252, 0.4470066487744372, 0.2187644543356857, 0.3455929410228594, 0.3025192530600733, 0.28331450373995026, 0.17894830026046982, 0.39946434893739746, 0.3736674999324793, 0.25638731535806303, 0.249432900871563, 0.19341393442347243, 0.23486754941717014, 0.18539579318156307, 0.23492283052758112, 0.20535797361917407, 0.22134091300581693, 0.2165924504098925, 0.2203138958192381, 0.23471031993036395, 0.1800733452768969, 0.21623225107750454, 0.7866551384898472, 0.19949034989169845, 0.22118809843327214, 0.24391450228116096, 0.2244965655144554, 0.19522968091971726, 0.1943647332152073, 0.16460002305359378, 0.4927501760817059, 0.15336006653893586, 0.9103189180406944, 0.19789369614829322, 0.1985355755862327, 0.09200876116911749, 0.16852195540887127, 0.8885140968105714, 0.6690148442504003, 0.21201063186463187, 0.20873752264084366, 0.4388117147019459, 0.16765124735131032, 0.20612056352637242, 0.20966642068759134, 0.2066054051365065, 0.7388939434094718, 0.21513858430693578, 0.21121595682767402, 0.21223639889409918, 0.1893562108691762, 0.1949294420301816, 0.19041827741080852, 0.21345878398557694, 0.17779796737037956, 0.1829549297574371, 0.09589893112218273, 0.08778730764251175, 0.09355278084197272, 0.10627039284163076, 0.10121283759179622, 0.09864180928340904, 0.12190368264307727, 0.08747441500556674, 0.09702351043415147]}, "mutation_prompt": null}
{"id": "8f68d476-f291-4507-bcc0-d935c5085b48", "solution": "import numpy as np\n\nclass RefinedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 34  # Slightly increased initial population for diversity\n        self.final_population_size = 25  # Dynamic population resizing for resource efficiency\n        self.inertia_weight = 0.57  # Further reduced for quicker convergence\n        self.cognitive_coeff = 1.85  # Optimized for enhanced exploration\n        self.social_coeff = 1.35  # Slightly adjusted for better balance\n        self.mutation_factor_init = 0.86  # Adjusted for improved diversity\n        self.cross_prob = 0.97  # Slightly higher for more aggressive acceptance\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.initial_population_size, dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.initial_population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        eval_count = 0\n        inertia_dampening = 0.98  # Faster dampening for improved convergence\n        mutation_factor_change = (self.mutation_factor_init - 0.5) / self.budget\n\n        while eval_count < self.budget:\n            population_size = self.initial_population_size - int(\n                (eval_count / self.budget) * (self.initial_population_size - self.final_population_size))\n\n            for i in range(population_size):\n                score = func(self.population[i])\n                eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n                if eval_count >= self.budget:\n                    break\n\n            r1 = np.random.rand(population_size, self.dim)\n            r2 = np.random.rand(population_size, self.dim)\n            cognitive_component = self.cognitive_coeff * r1 * (self.personal_best_positions[:population_size] - self.population[:population_size])\n            social_component = self.social_coeff * r2 * (self.global_best_position - self.population[:population_size])\n            self.velocities[:population_size] = (self.inertia_weight * self.velocities[:population_size]) + cognitive_component + social_component\n            self.population[:population_size] = self.population[:population_size] + self.velocities[:population_size]\n\n            self.population[:population_size] = np.clip(self.population[:population_size], self.lower_bound, self.upper_bound)\n\n            for i in range(population_size):\n                indices = np.random.choice(np.delete(np.arange(population_size), i), 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = a + (self.mutation_factor_init - mutation_factor_change * eval_count) * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cross_prob:\n                        trial[j] = mutant[j]\n\n                trial_score = func(trial)\n                eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.population[i] = trial\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial\n                if eval_count >= self.budget:\n                    break\n\n            self.inertia_weight *= inertia_dampening\n\n        return self.global_best_position, self.global_best_score", "name": "RefinedHybridPSODE", "description": "RefinedHybridPSODE with enhanced convergence through adaptive parameters and efficient mutation strategy adjustments.", "configspace": "", "generation": 54, "fitness": 0.3143676096453668, "feedback": "The algorithm RefinedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.28.", "error": "", "parent_id": "af9c7347-3908-47a4-bd67-990d4874ebde", "metadata": {"aucs": [0.8750308473226942, 0.8725122504296504, 0.8698502986216718, 0.8719410835368966, 0.883623031466227, 0.8779807986802926, 0.8714591576582577, 0.8687337362749352, 0.8641933579591872, 0.7602136549267686, 0.7496989670358192, 0.7019634189398078, 0.7381892678782314, 0.7664834130270789, 0.754593792515295, 0.05116560080966426, 0.7857283801428275, 0.7572497552286074, 0.17628776143308056, 0.14693348583889587, 0.11760103490819074, 0.1521562073422945, 0.09169234820024563, 0.15321262821532766, 0.17521663197427884, 0.147916767338243, 0.17460967591692023, 0.10904058478381062, 0.10136249831138833, 0.09754263007327135, 0.12075313207366689, 0.12610402578032354, 0.10421770144985931, 0.13120180701244444, 0.11657411232438519, 0.12851428337339588, 0.9781154996381288, 0.9845026489182284, 0.9831009723335655, 0.9816477775135208, 0.9898759576501198, 0.979127436031894, 0.9834644634764746, 0.9787917634969787, 0.9787662236611876, 0.6198341820875432, 0.5564445836889644, 0.7603564181274245, 0.7647244418413448, 0.6462157530351129, 0.7540695333255788, 0.567776523373955, 0.5238818954836769, 0.6369562166629478, 0.35974130542083327, 0.37130173547545287, 0.37717054820708595, 0.2771263317977245, 0.2694465479276492, 0.27492152424888705, 0.23115475736774538, 0.23980250348683452, 0.23123850042816407, 0.19028373422707623, 0.200588352491883, 0.18183503329516604, 0.1249277552897392, 0.1295982956498083, 0.12204948483217792, 0.12697474800111208, 0.20308227333280515, 0.17563370132307932, 0.22896438585964984, 0.1785598629931463, 0.22329559693607248, 0.1288010150858263, 0.2064904471049399, 0.18237614834905236, 0.18936384922849447, 0.13284047950223232, 0.13227066446558744, 9.999999999998899e-05, 0.057872461435499845, 0.047753065711960696, 9.999999999998899e-05, 9.999999999998899e-05, 0.03268142114214512, 9.999999999998899e-05, 9.999999999998899e-05, 0.11184533912127004, 0.13783004949077515, 0.0439209319065611, 0.08277963929234777, 0.10658774780623959, 0.07760584062985654, 0.05751275343107354, 0.1144625643158923, 0.03630310099606682, 0.028776334803718107, 0.062265603699474203, 0.03510939583413364, 0.048050533652104654, 0.2128315503261381, 0.1037006730268647, 0.07555156501155269, 0.0971781020265422, 0.13157384861899868, 0.1862850725614944, 0.28587772435520087, 0.03981452089959514, 0.0791878507005378, 0.04783893042359555, 0.0063408223389406215, 0.06603765137677242, 0.07843719956820572, 0.05539192831698625, 0.12232406353001857, 0.548016003114967, 0.5217533068820073, 0.5980064491956718, 0.6451414061054145, 0.5976862339557434, 0.5215103392815281, 0.6031986631760896, 0.5867516704876719, 0.592798375236165, 0.11681443420918936, 0.16552330511581914, 0.10547163752744948, 0.14626335925675304, 0.13884089168663938, 0.10521401676598219, 0.14276778061295403, 0.1085111218720689, 0.1060433670083325, 0.23970002597030093, 0.26593856496318347, 0.14996851816888634, 0.22962185750085462, 0.19537196231559606, 0.22174620146171165, 0.2985274431345276, 0.31411513796439894, 0.17948305778856066, 0.2698913347514573, 0.2548050640271313, 0.44584929909726967, 0.5174595323053217, 0.4928241738607887, 0.3581755147807505, 0.5723545201353131, 0.595523872807413, 0.33561533230113694, 0.25903551841121686, 0.2980890530885556, 0.335783846573559, 0.24022190767944207, 0.3349875421990872, 0.2201908385206175, 0.3215358058165363, 0.29063174424332183, 0.3108849159260245, 0.198965478373608, 0.20670127675427485, 0.20341573942862856, 0.2334213637247634, 0.2125992575844986, 0.19473538045684058, 0.226774447048799, 0.2903673741579341, 0.23196763578360824, 0.20366435814588335, 0.20258016572879867, 0.19817011334589907, 0.20678033179330668, 0.2053992164054862, 0.21879415499074728, 0.2054579239491846, 0.21918835901029765, 0.19839907889999808, 0.9017462061381704, 0.3555276632542975, 0.1523275150238136, 0.8826519045655796, 0.20013098255599338, 0.1986741468021721, 0.14186352848438033, 0.1679770687415295, 0.8696466795683927, 0.6455786331333202, 0.1675056638989979, 0.20571294142315744, 0.3459718265560213, 0.20858491667175194, 0.7562261038978303, 0.20800224147782875, 0.20738445568306874, 0.6620557610834819, 0.19183964013701982, 0.18302575571738477, 0.23238724776552, 0.1968502570519688, 0.18276837617458208, 0.20187672570513449, 0.188506010356832, 0.18358087111500354, 0.1849145289681955, 0.08971130545068196, 0.08614777892099212, 0.07805530566865759, 0.09250939910061462, 0.07680394444012761, 0.1049574619271485, 0.08705934315451813, 0.10014703725983032, 0.0893995648298922]}, "mutation_prompt": null}
{"id": "225dfbbe-e500-4119-b6c3-51e333aa54c5", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 32  # Slightly increased initial population\n        self.final_population_size = 24  # More dynamic population resizing\n        self.inertia_weight = 0.59  # Further reduced inertia weight for quicker convergence\n        self.cognitive_coeff = 1.8  # Increased to further enhance exploration\n        self.social_coeff = 1.3  # Slightly decreased to improve balance\n        self.mutation_factor_init = 0.88  # Adjusted mutation factor for diversity\n        self.cross_prob = 0.96  # Higher cross probability for more aggressive trial acceptance\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.initial_population_size, dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.initial_population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        eval_count = 0\n        inertia_dampening = 0.99  # Adjusted for slightly faster dampening\n        mutation_factor_change = (self.mutation_factor_init - 0.5) / self.budget\n\n        while eval_count < self.budget:\n            population_size = self.initial_population_size - int(\n                (eval_count / self.budget) * (self.initial_population_size - self.final_population_size))\n\n            for i in range(population_size):\n                score = func(self.population[i])\n                eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n                if eval_count >= self.budget:\n                    break\n\n            r1 = np.random.rand(population_size, self.dim)\n            r2 = np.random.rand(population_size, self.dim)\n            cognitive_component = self.cognitive_coeff * r1 * (self.personal_best_positions[:population_size] - self.population[:population_size])\n            social_component = self.social_coeff * r2 * (self.global_best_position - self.population[:population_size])\n            self.velocities[:population_size] = (self.inertia_weight * self.velocities[:population_size]) + cognitive_component + social_component\n            self.population[:population_size] = self.population[:population_size] + self.velocities[:population_size]\n\n            self.population[:population_size] = np.clip(self.population[:population_size], self.lower_bound, self.upper_bound)\n\n            for i in range(population_size):\n                indices = np.random.choice(np.delete(np.arange(population_size), i), 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = a + (self.mutation_factor_init - mutation_factor_change * eval_count) * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cross_prob:\n                        trial[j] = mutant[j]\n\n                trial_score = func(trial)\n                eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.population[i] = trial\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial\n                if eval_count >= self.budget:\n                    break\n\n            self.inertia_weight *= inertia_dampening\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedHybridPSODE", "description": "EnhancedHybridPSODE with dynamic parameter tuning and adaptive population control for faster convergence.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "af9c7347-3908-47a4-bd67-990d4874ebde", "metadata": {"aucs": [0.854841170199753, 0.8337434860933706, 0.8469967212274282, 0.8455483575894931, 0.8180411099900293, 0.8538268412181504, 0.8661472530299321, 0.8586874660363351, 0.8309962951446832, 0.7294235129780255, 0.6998937295171335, 0.6094117259358, 0.7323993392336852, 0.7178626996713835, 0.7527717430435938, 0.7303553160756826, 0.7398023539588414, 0.7345810602280723, 0.14931063233199515, 0.13351555112136448, 0.6622369060538811, 0.14066429175160333, 0.1726157421192509, 0.13536244333222003, 0.16927292151669604, 0.17310903385891174, 0.16665051046678891, 0.10286767970176403, 0.11062674053789101, 0.09841548178142223, 0.11766048483176039, 0.13749285478756756, 0.1497628696663631, 0.12877821416404456, 0.10536676396505973, 0.14711824380142302, 0.9856512933902406, 0.9787812971815051, 0.9884286877792379, 0.9839714483074401, 0.9785587651669921, 0.9797841168656637, 0.9905617241107126, 0.9770933132040401, 0.9833577911084052, 0.7048655414793028, 0.7211467168240129, 0.7052216937557363, 0.7191710474747863, 0.14908004501186256, 0.7445236695618853, 0.7205652174423838, 0.5511206013439216, 0.6527132167092512, 0.3481079237327044, 0.2220022876779414, 0.22260963171491, 0.2773721531139688, 0.8106141678517857, 0.193143748525206, 0.7282030748672175, 0.2380711802780806, 0.1150872978406785, 0.15842663143275082, 0.12928270349161397, 0.1819346820411205, 0.16708296455829608, 0.20992905560266106, 0.12237661338006744, 0.3351147961480979, 0.19017807601288228, 0.21338139704086945, 0.18076589346594996, 0.13757489068267315, 0.22643758141871184, 0.18454500747880243, 0.24556725003162827, 0.18134559209726409, 0.22223500435779941, 0.13360190580985276, 0.12530423963151405, 9.999999999998899e-05, 0.04106590289391676, 0.009052554914146471, 9.999999999998899e-05, 0.035304986290289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07486847503284044, 0.07747999204176736, 0.03671692122265646, 0.12597768691781308, 0.08375568218519003, 9.999999999998899e-05, 0.025237010735392862, 0.09410909002513912, 0.0728437426819526, 0.042060846996438195, 0.046510822810082564, 0.07634599429344835, 0.1226496143325938, 0.09744350257911849, 0.14932735382092965, 0.07586047305840182, 0.2842119416221408, 0.08389114588004398, 0.08772702619431327, 0.06467686522928273, 9.999999999998899e-05, 0.1307702082894382, 0.00630684225609679, 0.20421519971616386, 0.08524348655987957, 0.19106498023883534, 0.04781213433341358, 0.09314857491772333, 0.5185871615500623, 0.5649049736705083, 0.5689980628370421, 0.5514152013975806, 0.5490509555687053, 0.20790007435716462, 0.5973916126254126, 0.6530010078799888, 0.5781118929648357, 0.08304826450485725, 0.07600267204559463, 0.11491859562690787, 0.12362571842962733, 0.13043972677666205, 0.13716767684518238, 0.12653952287696635, 0.13657113960499223, 0.09709974675359878, 0.14374469357949093, 0.18695456979770098, 0.18923957478194653, 0.2981175702971416, 0.24944309371380124, 0.1406468119143186, 0.3294200634479776, 0.17120108790425115, 0.28248616584533215, 0.48908365950123567, 0.6094958590761, 0.6544264222405355, 0.2899814886249241, 0.5453506268139661, 0.36763381267556094, 0.4436084820302868, 0.49875119412574753, 0.5928333162885812, 0.32402022101522454, 0.25792803367766615, 0.2829233453807415, 0.4076522537381234, 0.2622079541846637, 0.32710742616195454, 0.3432538164896639, 0.23390776228649435, 0.30096566980124007, 0.25365634866961995, 0.18875259829404345, 0.267932015646579, 0.20209338773698615, 0.21300809713335944, 0.23998942892561703, 0.24237800148333477, 0.22644071122299358, 0.246895492041457, 0.2407489637587219, 0.7381993016559744, 0.24476307319944546, 0.7596076646020812, 0.238690415179029, 0.2126182009475257, 0.21898585008086835, 0.21703275509314346, 0.2161411307226221, 0.8804029305720451, 0.878470043102824, 0.154132523530214, 0.882908229087604, 0.19873057126016025, 0.19745108635270425, 0.8419510619466086, 0.16897779637434018, 0.8931557330242321, 0.7672084987916588, 0.1683188460864965, 0.2078508423927442, 0.7558544886253658, 0.16710346584180424, 0.2089793176375876, 0.2082782456388691, 0.7949888960681359, 0.8308106177184313, 0.19654164232329197, 0.19487711470545, 0.19335537842386907, 0.19706767001895187, 0.21178877924311013, 0.21062142901655512, 0.20665390909466186, 0.18865726577078357, 0.18353189923188806, 0.09784604018523879, 0.09464449116249218, 0.09282370571545195, 0.08584127053615209, 0.08156069572947378, 0.089102552583189, 0.13650074412598556, 0.07560180769216351, 0.07904243372709896]}, "mutation_prompt": null}
{"id": "01779bbf-bd9e-4836-a2ff-75460328e8ad", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 32\n        self.final_population_size = 24\n        self.inertia_weight = 0.57  # Slightly reduced for faster convergence\n        self.cognitive_coeff = 1.85  # Slightly increased to boost exploration\n        self.social_coeff = 1.25  # Further decreased for better balance\n        self.mutation_factor_init = 0.90  # Increased to enhance diversity\n        self.cross_prob = 0.95  # Slightly adjusted for more trial acceptance\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.initial_population_size, dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.initial_population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        eval_count = 0\n        inertia_dampening = 0.985  # Slightly faster dampening\n        mutation_factor_change = (self.mutation_factor_init - 0.5) / self.budget\n\n        while eval_count < self.budget:\n            population_size = self.initial_population_size - int(\n                (eval_count / self.budget) * (self.initial_population_size - self.final_population_size))\n\n            for i in range(population_size):\n                score = func(self.population[i])\n                eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n                if eval_count >= self.budget:\n                    break\n\n            r1 = np.random.rand(population_size, self.dim)\n            r2 = np.random.rand(population_size, self.dim)\n            cognitive_component = self.cognitive_coeff * r1 * (self.personal_best_positions[:population_size] - self.population[:population_size])\n            social_component = self.social_coeff * r2 * (self.global_best_position - self.population[:population_size])\n            self.velocities[:population_size] = (self.inertia_weight * self.velocities[:population_size]) + cognitive_component + social_component\n            self.population[:population_size] = self.population[:population_size] + self.velocities[:population_size]\n\n            self.population[:population_size] = np.clip(self.population[:population_size], self.lower_bound, self.upper_bound)\n\n            for i in range(population_size):\n                indices = np.random.choice(np.delete(np.arange(population_size), i), 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = a + (self.mutation_factor_init - mutation_factor_change * eval_count) * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cross_prob or j == np.random.randint(0, self.dim):  # Ensure at least one mutation per dimension\n                        trial[j] = mutant[j]\n\n                trial_score = func(trial)\n                eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.population[i] = trial\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial\n                if eval_count >= self.budget:\n                    break\n\n            self.inertia_weight *= inertia_dampening\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedHybridPSODE", "description": "Minor parameter adjustments and enhanced mutation strategy for improved convergence speed in EnhancedHybridPSODE.", "configspace": "", "generation": 56, "fitness": 0.32889143000104676, "feedback": "The algorithm EnhancedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.28.", "error": "", "parent_id": "af9c7347-3908-47a4-bd67-990d4874ebde", "metadata": {"aucs": [0.8669844617043967, 0.871825972309072, 0.8737029784922237, 0.8744891171309159, 0.8643259174152955, 0.8646227242361205, 0.7924733513026762, 0.8739302643673261, 0.8558430343334811, 0.7705097746136796, 0.7222115974882715, 0.7401251462561438, 0.7412460955360796, 0.7346588550591137, 0.7697027841684463, 0.7696333280656072, 0.7674163472377324, 0.771122413800774, 0.15026348783983434, 0.15443524080548543, 0.1239092221730611, 0.11125855753726188, 0.15884605602218216, 0.1503417472459736, 0.662382607151816, 0.11321667395384771, 0.18212741661652776, 0.09407870619514724, 0.1352375271609486, 0.12497682153872625, 0.1540820510754375, 0.1132194108610336, 0.15028643517532214, 0.13257410640183953, 0.1107911126356419, 0.13879517193004254, 0.9893963185375304, 0.9907919212508468, 0.9799344997322756, 0.9844905839748362, 0.9790847243640128, 0.9743490111386098, 0.9847574886319127, 0.973247496101983, 0.9770080362917737, 0.6502795361510662, 0.5296070259826466, 0.7396190033321002, 0.26465055962647577, 0.7478954744381963, 0.3617240738743548, 0.6141883659651214, 0.08781804788439163, 0.7289539288282163, 0.8706114007200507, 0.225192670425585, 0.7746294137048702, 0.27958123734877605, 0.8418769802809245, 0.27488814642198545, 0.12589924612319758, 0.22846677748457356, 0.34737162525990606, 0.11357579315865063, 0.12064163038336173, 0.16740133192948503, 0.17586009123918245, 0.11552220812536962, 0.13026616350322107, 0.18910905583940962, 0.18465002717104562, 0.19415642476081107, 0.12455804333114684, 0.12038825779793805, 0.15716916105455203, 0.14215265942808586, 0.1975886539141094, 0.17803507200396618, 0.167273222627347, 0.18631875645612428, 0.09535789082045698, 9.999999999998899e-05, 0.06429154452713626, 0.008923851436106411, 9.999999999998899e-05, 0.0031977081634411153, 0.0037859522660961265, 0.021998857928976268, 9.999999999998899e-05, 0.004434492765734155, 0.04865257694085956, 0.09802768921320626, 0.05841191027379178, 0.08177370303343778, 0.0842700315851489, 0.10254790032001415, 0.16885988831541576, 0.06889605807818333, 0.03473437211852337, 0.034186696690141405, 0.3173395678052182, 0.12299635328610925, 0.12836506786245394, 0.09099689611126394, 0.07605697667668465, 0.09894450802607568, 0.07762713354002249, 0.09348446382005882, 0.1633206371782011, 0.19153430520073522, 0.15943863334323127, 0.15942415022780132, 0.0771855202018642, 0.2547177587394862, 0.11565954543109147, 0.05644630118754268, 0.12251504757999576, 0.5313609251565423, 0.5538362026510686, 0.5560006603081531, 0.6228682377262131, 0.5781721270647782, 0.5632653049125972, 0.5575028749976634, 0.5460464885931685, 0.6325080768016494, 0.16491201022198076, 0.1320931623821081, 0.1202312222868075, 0.15466506370175304, 0.13165601678686834, 0.11328640319937167, 0.07336056933174462, 0.13281156892701473, 0.13481276641740225, 0.2741046688991391, 0.1861091616781615, 0.3287929811009006, 0.40933477561538256, 0.211227938877526, 0.18789491982242368, 0.25521824097946744, 0.21317972196139723, 0.2648988939597169, 0.36052663173886557, 0.23704511099005832, 0.6892334382684042, 0.3075216663742869, 0.30222213246867535, 0.41551841452573557, 0.5180096196330433, 0.6926169107760836, 0.5292228686367317, 0.19498976732515116, 0.1983057908687733, 0.24003769661000052, 0.3189240055258131, 0.4481113153150975, 0.4048449498000741, 0.29499782783464124, 0.45376011793357274, 0.44191480409283856, 0.24400040291348946, 0.1942599337052714, 0.21293828760416034, 0.2576836257869871, 0.224862132857639, 0.21998259313076984, 0.23135232157705943, 0.23968461825061493, 0.21562890534945034, 0.7821643101784048, 0.220338280155996, 0.2482312550064778, 0.19983948732493562, 0.24254078874244178, 0.21929895305423597, 0.24238772107309492, 0.20505745256026553, 0.22027863539101844, 0.9140208791820751, 0.16006179679109045, 0.15387071975671318, 0.9175595457030634, 0.19990882725584602, 0.1977575964072834, 0.12451973793511117, 0.16814413318954835, 0.9058166416734729, 0.8145069941084984, 0.21110579790718254, 0.4314872021924617, 0.8089334540095173, 0.1682915838547302, 0.1533276133231618, 0.12811883416939596, 0.5045006361011979, 0.21170257192034792, 0.19165952789288498, 0.17758658356776647, 0.18726823389378822, 0.21649855465461199, 0.1989422728155401, 0.19133342078907678, 0.19654039545501745, 0.21299935400849945, 0.18641351342520418, 0.09317447503933984, 0.10148284933308149, 0.08229409167362123, 0.09903430323085372, 0.09288688931721412, 0.09380562845083129, 0.09104953774990676, 0.09492268757820677, 0.09520758499678739]}, "mutation_prompt": null}
{"id": "b34da9ba-d977-4b7d-a7e4-9c0ba99745b8", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 32  # Slightly increased initial population\n        self.final_population_size = 24  # More dynamic population resizing\n        self.inertia_weight = 0.59  # Further reduced inertia weight for quicker convergence\n        self.cognitive_coeff = 1.8  # Increased to further enhance exploration\n        self.social_coeff = 1.3  # Slightly decreased to improve balance\n        self.mutation_factor_init = 0.88  # Adjusted mutation factor for diversity\n        self.cross_prob = 0.96  # Higher cross probability for more aggressive trial acceptance\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.initial_population_size, dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.initial_population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        eval_count = 0\n        inertia_dampening = 0.99  # Adjusted for slightly faster dampening\n        mutation_factor_change = (self.mutation_factor_init - 0.5) / self.budget\n\n        while eval_count < self.budget:\n            population_size = self.initial_population_size - int(\n                (eval_count / self.budget) * (self.initial_population_size - self.final_population_size))\n\n            for i in range(population_size):\n                score = func(self.population[i])\n                eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n                if eval_count >= self.budget:\n                    break\n\n            r1 = np.random.rand(population_size, self.dim)\n            r2 = np.random.rand(population_size, self.dim)\n            cognitive_component = self.cognitive_coeff * r1 * (self.personal_best_positions[:population_size] - self.population[:population_size])\n            social_component = self.social_coeff * r2 * (self.global_best_position - self.population[:population_size])\n            self.velocities[:population_size] = (self.inertia_weight * self.velocities[:population_size]) + cognitive_component + social_component\n            self.population[:population_size] = self.population[:population_size] + self.velocities[:population_size]\n\n            self.population[:population_size] = np.clip(self.population[:population_size], self.lower_bound, self.upper_bound)\n\n            for i in range(population_size):\n                indices = np.random.choice(np.delete(np.arange(population_size), i), 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = a + (self.mutation_factor_init - mutation_factor_change * eval_count) * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cross_prob:\n                        trial[j] = mutant[j]\n\n                trial_score = func(trial)\n                eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.population[i] = trial\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial\n                if eval_count >= self.budget:\n                    break\n\n            self.inertia_weight *= inertia_dampening\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedHybridPSODE", "description": "EnhancedHybridPSODE with dynamic parameter tuning and adaptive population control for faster convergence.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "af9c7347-3908-47a4-bd67-990d4874ebde", "metadata": {"aucs": [0.854841170199753, 0.8337434860933706, 0.8469967212274282, 0.8455483575894931, 0.8180411099900293, 0.8538268412181504, 0.8661472530299321, 0.8586874660363351, 0.8309962951446832, 0.7294235129780255, 0.6998937295171335, 0.6094117259358, 0.7323993392336852, 0.7178626996713835, 0.7527717430435938, 0.7303553160756826, 0.7398023539588414, 0.7345810602280723, 0.14931063233199515, 0.13351555112136448, 0.6622369060538811, 0.14066429175160333, 0.1726157421192509, 0.13536244333222003, 0.16927292151669604, 0.17310903385891174, 0.16665051046678891, 0.10286767970176403, 0.11062674053789101, 0.09841548178142223, 0.11766048483176039, 0.13749285478756756, 0.1497628696663631, 0.12877821416404456, 0.10536676396505973, 0.14711824380142302, 0.9856512933902406, 0.9787812971815051, 0.9884286877792379, 0.9839714483074401, 0.9785587651669921, 0.9797841168656637, 0.9905617241107126, 0.9770933132040401, 0.9833577911084052, 0.7048655414793028, 0.7211467168240129, 0.7052216937557363, 0.7191710474747863, 0.14908004501186256, 0.7445236695618853, 0.7205652174423838, 0.5511206013439216, 0.6527132167092512, 0.3481079237327044, 0.2220022876779414, 0.22260963171491, 0.2773721531139688, 0.8106141678517857, 0.193143748525206, 0.7282030748672175, 0.2380711802780806, 0.1150872978406785, 0.15842663143275082, 0.12928270349161397, 0.1819346820411205, 0.16708296455829608, 0.20992905560266106, 0.12237661338006744, 0.3351147961480979, 0.19017807601288228, 0.21338139704086945, 0.18076589346594996, 0.13757489068267315, 0.22643758141871184, 0.18454500747880243, 0.24556725003162827, 0.18134559209726409, 0.22223500435779941, 0.13360190580985276, 0.12530423963151405, 9.999999999998899e-05, 0.04106590289391676, 0.009052554914146471, 9.999999999998899e-05, 0.035304986290289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07486847503284044, 0.07747999204176736, 0.03671692122265646, 0.12597768691781308, 0.08375568218519003, 9.999999999998899e-05, 0.025237010735392862, 0.09410909002513912, 0.0728437426819526, 0.042060846996438195, 0.046510822810082564, 0.07634599429344835, 0.1226496143325938, 0.09744350257911849, 0.14932735382092965, 0.07586047305840182, 0.2842119416221408, 0.08389114588004398, 0.08772702619431327, 0.06467686522928273, 9.999999999998899e-05, 0.1307702082894382, 0.00630684225609679, 0.20421519971616386, 0.08524348655987957, 0.19106498023883534, 0.04781213433341358, 0.09314857491772333, 0.5185871615500623, 0.5649049736705083, 0.5689980628370421, 0.5514152013975806, 0.5490509555687053, 0.20790007435716462, 0.5973916126254126, 0.6530010078799888, 0.5781118929648357, 0.08304826450485725, 0.07600267204559463, 0.11491859562690787, 0.12362571842962733, 0.13043972677666205, 0.13716767684518238, 0.12653952287696635, 0.13657113960499223, 0.09709974675359878, 0.14374469357949093, 0.18695456979770098, 0.18923957478194653, 0.2981175702971416, 0.24944309371380124, 0.1406468119143186, 0.3294200634479776, 0.17120108790425115, 0.28248616584533215, 0.48908365950123567, 0.6094958590761, 0.6544264222405355, 0.2899814886249241, 0.5453506268139661, 0.36763381267556094, 0.4436084820302868, 0.49875119412574753, 0.5928333162885812, 0.32402022101522454, 0.25792803367766615, 0.2829233453807415, 0.4076522537381234, 0.2622079541846637, 0.32710742616195454, 0.3432538164896639, 0.23390776228649435, 0.30096566980124007, 0.25365634866961995, 0.18875259829404345, 0.267932015646579, 0.20209338773698615, 0.21300809713335944, 0.23998942892561703, 0.24237800148333477, 0.22644071122299358, 0.246895492041457, 0.2407489637587219, 0.7381993016559744, 0.24476307319944546, 0.7596076646020812, 0.238690415179029, 0.2126182009475257, 0.21898585008086835, 0.21703275509314346, 0.2161411307226221, 0.8804029305720451, 0.878470043102824, 0.154132523530214, 0.882908229087604, 0.19873057126016025, 0.19745108635270425, 0.8419510619466086, 0.16897779637434018, 0.8931557330242321, 0.7672084987916588, 0.1683188460864965, 0.2078508423927442, 0.7558544886253658, 0.16710346584180424, 0.2089793176375876, 0.2082782456388691, 0.7949888960681359, 0.8308106177184313, 0.19654164232329197, 0.19487711470545, 0.19335537842386907, 0.19706767001895187, 0.21178877924311013, 0.21062142901655512, 0.20665390909466186, 0.18865726577078357, 0.18353189923188806, 0.09784604018523879, 0.09464449116249218, 0.09282370571545195, 0.08584127053615209, 0.08156069572947378, 0.089102552583189, 0.13650074412598556, 0.07560180769216351, 0.07904243372709896]}, "mutation_prompt": null}
{"id": "ec362e7e-0092-472e-9356-3fc121521da9", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 32  # Slightly increased initial population\n        self.final_population_size = 24  # More dynamic population resizing\n        self.inertia_weight = 0.59  # Further reduced inertia weight for quicker convergence\n        self.cognitive_coeff = 1.8  # Increased to further enhance exploration\n        self.social_coeff = 1.3  # Slightly decreased to improve balance\n        self.mutation_factor_init = 0.88  # Adjusted mutation factor for diversity\n        self.cross_prob = 0.96  # Higher cross probability for more aggressive trial acceptance\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.initial_population_size, dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.initial_population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        eval_count = 0\n        inertia_dampening = 0.99  # Adjusted for slightly faster dampening\n        mutation_factor_change = (self.mutation_factor_init - 0.5) / self.budget\n\n        while eval_count < self.budget:\n            population_size = self.initial_population_size - int(\n                (eval_count / self.budget) * (self.initial_population_size - self.final_population_size))\n\n            for i in range(population_size):\n                score = func(self.population[i])\n                eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n                if eval_count >= self.budget:\n                    break\n\n            r1 = np.random.rand(population_size, self.dim)\n            r2 = np.random.rand(population_size, self.dim)\n            cognitive_component = self.cognitive_coeff * r1 * (self.personal_best_positions[:population_size] - self.population[:population_size])\n            social_component = self.social_coeff * r2 * (self.global_best_position - self.population[:population_size])\n            self.velocities[:population_size] = (self.inertia_weight * self.velocities[:population_size]) + cognitive_component + social_component\n            self.population[:population_size] = self.population[:population_size] + self.velocities[:population_size]\n\n            self.population[:population_size] = np.clip(self.population[:population_size], self.lower_bound, self.upper_bound)\n\n            for i in range(population_size):\n                indices = np.random.choice(np.delete(np.arange(population_size), i), 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = a + (self.mutation_factor_init - mutation_factor_change * eval_count) * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cross_prob:\n                        trial[j] = mutant[j]\n\n                trial_score = func(trial)\n                eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.population[i] = trial\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial\n                if eval_count >= self.budget:\n                    break\n\n            self.inertia_weight *= inertia_dampening\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedHybridPSODE", "description": "EnhancedHybridPSODE with dynamic parameter tuning and adaptive population control for faster convergence.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "af9c7347-3908-47a4-bd67-990d4874ebde", "metadata": {"aucs": [0.854841170199753, 0.8337434860933706, 0.8469967212274282, 0.8455483575894931, 0.8180411099900293, 0.8538268412181504, 0.8661472530299321, 0.8586874660363351, 0.8309962951446832, 0.7294235129780255, 0.6998937295171335, 0.6094117259358, 0.7323993392336852, 0.7178626996713835, 0.7527717430435938, 0.7303553160756826, 0.7398023539588414, 0.7345810602280723, 0.14931063233199515, 0.13351555112136448, 0.6622369060538811, 0.14066429175160333, 0.1726157421192509, 0.13536244333222003, 0.16927292151669604, 0.17310903385891174, 0.16665051046678891, 0.10286767970176403, 0.11062674053789101, 0.09841548178142223, 0.11766048483176039, 0.13749285478756756, 0.1497628696663631, 0.12877821416404456, 0.10536676396505973, 0.14711824380142302, 0.9856512933902406, 0.9787812971815051, 0.9884286877792379, 0.9839714483074401, 0.9785587651669921, 0.9797841168656637, 0.9905617241107126, 0.9770933132040401, 0.9833577911084052, 0.7048655414793028, 0.7211467168240129, 0.7052216937557363, 0.7191710474747863, 0.14908004501186256, 0.7445236695618853, 0.7205652174423838, 0.5511206013439216, 0.6527132167092512, 0.3481079237327044, 0.2220022876779414, 0.22260963171491, 0.2773721531139688, 0.8106141678517857, 0.193143748525206, 0.7282030748672175, 0.2380711802780806, 0.1150872978406785, 0.15842663143275082, 0.12928270349161397, 0.1819346820411205, 0.16708296455829608, 0.20992905560266106, 0.12237661338006744, 0.3351147961480979, 0.19017807601288228, 0.21338139704086945, 0.18076589346594996, 0.13757489068267315, 0.22643758141871184, 0.18454500747880243, 0.24556725003162827, 0.18134559209726409, 0.22223500435779941, 0.13360190580985276, 0.12530423963151405, 9.999999999998899e-05, 0.04106590289391676, 0.009052554914146471, 9.999999999998899e-05, 0.035304986290289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07486847503284044, 0.07747999204176736, 0.03671692122265646, 0.12597768691781308, 0.08375568218519003, 9.999999999998899e-05, 0.025237010735392862, 0.09410909002513912, 0.0728437426819526, 0.042060846996438195, 0.046510822810082564, 0.07634599429344835, 0.1226496143325938, 0.09744350257911849, 0.14932735382092965, 0.07586047305840182, 0.2842119416221408, 0.08389114588004398, 0.08772702619431327, 0.06467686522928273, 9.999999999998899e-05, 0.1307702082894382, 0.00630684225609679, 0.20421519971616386, 0.08524348655987957, 0.19106498023883534, 0.04781213433341358, 0.09314857491772333, 0.5185871615500623, 0.5649049736705083, 0.5689980628370421, 0.5514152013975806, 0.5490509555687053, 0.20790007435716462, 0.5973916126254126, 0.6530010078799888, 0.5781118929648357, 0.08304826450485725, 0.07600267204559463, 0.11491859562690787, 0.12362571842962733, 0.13043972677666205, 0.13716767684518238, 0.12653952287696635, 0.13657113960499223, 0.09709974675359878, 0.14374469357949093, 0.18695456979770098, 0.18923957478194653, 0.2981175702971416, 0.24944309371380124, 0.1406468119143186, 0.3294200634479776, 0.17120108790425115, 0.28248616584533215, 0.48908365950123567, 0.6094958590761, 0.6544264222405355, 0.2899814886249241, 0.5453506268139661, 0.36763381267556094, 0.4436084820302868, 0.49875119412574753, 0.5928333162885812, 0.32402022101522454, 0.25792803367766615, 0.2829233453807415, 0.4076522537381234, 0.2622079541846637, 0.32710742616195454, 0.3432538164896639, 0.23390776228649435, 0.30096566980124007, 0.25365634866961995, 0.18875259829404345, 0.267932015646579, 0.20209338773698615, 0.21300809713335944, 0.23998942892561703, 0.24237800148333477, 0.22644071122299358, 0.246895492041457, 0.2407489637587219, 0.7381993016559744, 0.24476307319944546, 0.7596076646020812, 0.238690415179029, 0.2126182009475257, 0.21898585008086835, 0.21703275509314346, 0.2161411307226221, 0.8804029305720451, 0.878470043102824, 0.154132523530214, 0.882908229087604, 0.19873057126016025, 0.19745108635270425, 0.8419510619466086, 0.16897779637434018, 0.8931557330242321, 0.7672084987916588, 0.1683188460864965, 0.2078508423927442, 0.7558544886253658, 0.16710346584180424, 0.2089793176375876, 0.2082782456388691, 0.7949888960681359, 0.8308106177184313, 0.19654164232329197, 0.19487711470545, 0.19335537842386907, 0.19706767001895187, 0.21178877924311013, 0.21062142901655512, 0.20665390909466186, 0.18865726577078357, 0.18353189923188806, 0.09784604018523879, 0.09464449116249218, 0.09282370571545195, 0.08584127053615209, 0.08156069572947378, 0.089102552583189, 0.13650074412598556, 0.07560180769216351, 0.07904243372709896]}, "mutation_prompt": null}
{"id": "b6e05274-32b7-44a4-a9dc-89aed63a3173", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 32  # Slightly increased initial population\n        self.final_population_size = 24  # More dynamic population resizing\n        self.inertia_weight = 0.59  # Further reduced inertia weight for quicker convergence\n        self.cognitive_coeff = 1.8  # Increased to further enhance exploration\n        self.social_coeff = 1.3  # Slightly decreased to improve balance\n        self.mutation_factor_init = 0.88  # Adjusted mutation factor for diversity\n        self.cross_prob = 0.96  # Higher cross probability for more aggressive trial acceptance\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.initial_population_size, dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.initial_population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        eval_count = 0\n        inertia_dampening = 0.99  # Adjusted for slightly faster dampening\n        mutation_factor_change = (self.mutation_factor_init - 0.5) / self.budget\n\n        while eval_count < self.budget:\n            population_size = self.initial_population_size - int(\n                (eval_count / self.budget) * (self.initial_population_size - self.final_population_size))\n\n            for i in range(population_size):\n                score = func(self.population[i])\n                eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n                if eval_count >= self.budget:\n                    break\n\n            r1 = np.random.rand(population_size, self.dim)\n            r2 = np.random.rand(population_size, self.dim)\n            cognitive_component = self.cognitive_coeff * r1 * (self.personal_best_positions[:population_size] - self.population[:population_size])\n            social_component = self.social_coeff * r2 * (self.global_best_position - self.population[:population_size])\n            self.velocities[:population_size] = (self.inertia_weight * self.velocities[:population_size]) + cognitive_component + social_component\n            self.population[:population_size] = self.population[:population_size] + self.velocities[:population_size]\n\n            self.population[:population_size] = np.clip(self.population[:population_size], self.lower_bound, self.upper_bound)\n\n            for i in range(population_size):\n                indices = np.random.choice(np.delete(np.arange(population_size), i), 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = a + (self.mutation_factor_init - mutation_factor_change * eval_count) * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cross_prob:\n                        trial[j] = mutant[j]\n\n                trial_score = func(trial)\n                eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.population[i] = trial\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial\n                if eval_count >= self.budget:\n                    break\n\n            self.inertia_weight *= inertia_dampening\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedHybridPSODE", "description": "EnhancedHybridPSODE with dynamic parameter tuning and adaptive population control for faster convergence.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "af9c7347-3908-47a4-bd67-990d4874ebde", "metadata": {"aucs": [0.854841170199753, 0.8337434860933706, 0.8469967212274282, 0.8455483575894931, 0.8180411099900293, 0.8538268412181504, 0.8661472530299321, 0.8586874660363351, 0.8309962951446832, 0.7294235129780255, 0.6998937295171335, 0.6094117259358, 0.7323993392336852, 0.7178626996713835, 0.7527717430435938, 0.7303553160756826, 0.7398023539588414, 0.7345810602280723, 0.14931063233199515, 0.13351555112136448, 0.6622369060538811, 0.14066429175160333, 0.1726157421192509, 0.13536244333222003, 0.16927292151669604, 0.17310903385891174, 0.16665051046678891, 0.10286767970176403, 0.11062674053789101, 0.09841548178142223, 0.11766048483176039, 0.13749285478756756, 0.1497628696663631, 0.12877821416404456, 0.10536676396505973, 0.14711824380142302, 0.9856512933902406, 0.9787812971815051, 0.9884286877792379, 0.9839714483074401, 0.9785587651669921, 0.9797841168656637, 0.9905617241107126, 0.9770933132040401, 0.9833577911084052, 0.7048655414793028, 0.7211467168240129, 0.7052216937557363, 0.7191710474747863, 0.14908004501186256, 0.7445236695618853, 0.7205652174423838, 0.5511206013439216, 0.6527132167092512, 0.3481079237327044, 0.2220022876779414, 0.22260963171491, 0.2773721531139688, 0.8106141678517857, 0.193143748525206, 0.7282030748672175, 0.2380711802780806, 0.1150872978406785, 0.15842663143275082, 0.12928270349161397, 0.1819346820411205, 0.16708296455829608, 0.20992905560266106, 0.12237661338006744, 0.3351147961480979, 0.19017807601288228, 0.21338139704086945, 0.18076589346594996, 0.13757489068267315, 0.22643758141871184, 0.18454500747880243, 0.24556725003162827, 0.18134559209726409, 0.22223500435779941, 0.13360190580985276, 0.12530423963151405, 9.999999999998899e-05, 0.04106590289391676, 0.009052554914146471, 9.999999999998899e-05, 0.035304986290289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07486847503284044, 0.07747999204176736, 0.03671692122265646, 0.12597768691781308, 0.08375568218519003, 9.999999999998899e-05, 0.025237010735392862, 0.09410909002513912, 0.0728437426819526, 0.042060846996438195, 0.046510822810082564, 0.07634599429344835, 0.1226496143325938, 0.09744350257911849, 0.14932735382092965, 0.07586047305840182, 0.2842119416221408, 0.08389114588004398, 0.08772702619431327, 0.06467686522928273, 9.999999999998899e-05, 0.1307702082894382, 0.00630684225609679, 0.20421519971616386, 0.08524348655987957, 0.19106498023883534, 0.04781213433341358, 0.09314857491772333, 0.5185871615500623, 0.5649049736705083, 0.5689980628370421, 0.5514152013975806, 0.5490509555687053, 0.20790007435716462, 0.5973916126254126, 0.6530010078799888, 0.5781118929648357, 0.08304826450485725, 0.07600267204559463, 0.11491859562690787, 0.12362571842962733, 0.13043972677666205, 0.13716767684518238, 0.12653952287696635, 0.13657113960499223, 0.09709974675359878, 0.14374469357949093, 0.18695456979770098, 0.18923957478194653, 0.2981175702971416, 0.24944309371380124, 0.1406468119143186, 0.3294200634479776, 0.17120108790425115, 0.28248616584533215, 0.48908365950123567, 0.6094958590761, 0.6544264222405355, 0.2899814886249241, 0.5453506268139661, 0.36763381267556094, 0.4436084820302868, 0.49875119412574753, 0.5928333162885812, 0.32402022101522454, 0.25792803367766615, 0.2829233453807415, 0.4076522537381234, 0.2622079541846637, 0.32710742616195454, 0.3432538164896639, 0.23390776228649435, 0.30096566980124007, 0.25365634866961995, 0.18875259829404345, 0.267932015646579, 0.20209338773698615, 0.21300809713335944, 0.23998942892561703, 0.24237800148333477, 0.22644071122299358, 0.246895492041457, 0.2407489637587219, 0.7381993016559744, 0.24476307319944546, 0.7596076646020812, 0.238690415179029, 0.2126182009475257, 0.21898585008086835, 0.21703275509314346, 0.2161411307226221, 0.8804029305720451, 0.878470043102824, 0.154132523530214, 0.882908229087604, 0.19873057126016025, 0.19745108635270425, 0.8419510619466086, 0.16897779637434018, 0.8931557330242321, 0.7672084987916588, 0.1683188460864965, 0.2078508423927442, 0.7558544886253658, 0.16710346584180424, 0.2089793176375876, 0.2082782456388691, 0.7949888960681359, 0.8308106177184313, 0.19654164232329197, 0.19487711470545, 0.19335537842386907, 0.19706767001895187, 0.21178877924311013, 0.21062142901655512, 0.20665390909466186, 0.18865726577078357, 0.18353189923188806, 0.09784604018523879, 0.09464449116249218, 0.09282370571545195, 0.08584127053615209, 0.08156069572947378, 0.089102552583189, 0.13650074412598556, 0.07560180769216351, 0.07904243372709896]}, "mutation_prompt": null}
{"id": "e6c6fd59-97c1-42db-9c68-2c3297c4f8af", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 32  # Slightly increased initial population\n        self.final_population_size = 24  # More dynamic population resizing\n        self.inertia_weight = 0.59  # Further reduced inertia weight for quicker convergence\n        self.cognitive_coeff = 1.8  # Increased to further enhance exploration\n        self.social_coeff = 1.3  # Slightly decreased to improve balance\n        self.mutation_factor_init = 0.88  # Adjusted mutation factor for diversity\n        self.cross_prob = 0.96  # Higher cross probability for more aggressive trial acceptance\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.initial_population_size, dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.initial_population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        eval_count = 0\n        inertia_dampening = 0.99  # Adjusted for slightly faster dampening\n        mutation_factor_change = (self.mutation_factor_init - 0.5) / self.budget\n\n        while eval_count < self.budget:\n            population_size = self.initial_population_size - int(\n                (eval_count / self.budget) * (self.initial_population_size - self.final_population_size))\n\n            for i in range(population_size):\n                score = func(self.population[i])\n                eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n                if eval_count >= self.budget:\n                    break\n\n            r1 = np.random.rand(population_size, self.dim)\n            r2 = np.random.rand(population_size, self.dim)\n            cognitive_component = self.cognitive_coeff * r1 * (self.personal_best_positions[:population_size] - self.population[:population_size])\n            social_component = self.social_coeff * r2 * (self.global_best_position - self.population[:population_size])\n            self.velocities[:population_size] = (self.inertia_weight * self.velocities[:population_size]) + cognitive_component + social_component\n            self.population[:population_size] = self.population[:population_size] + self.velocities[:population_size]\n\n            self.population[:population_size] = np.clip(self.population[:population_size], self.lower_bound, self.upper_bound)\n\n            for i in range(population_size):\n                indices = np.random.choice(np.delete(np.arange(population_size), i), 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = a + (self.mutation_factor_init - mutation_factor_change * eval_count) * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cross_prob:\n                        trial[j] = mutant[j]\n\n                trial_score = func(trial)\n                eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.population[i] = trial\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial\n                if eval_count >= self.budget:\n                    break\n\n            self.inertia_weight *= inertia_dampening\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedHybridPSODE", "description": "EnhancedHybridPSODE with dynamic parameter tuning and adaptive population control for faster convergence.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "af9c7347-3908-47a4-bd67-990d4874ebde", "metadata": {"aucs": [0.854841170199753, 0.8337434860933706, 0.8469967212274282, 0.8455483575894931, 0.8180411099900293, 0.8538268412181504, 0.8661472530299321, 0.8586874660363351, 0.8309962951446832, 0.7294235129780255, 0.6998937295171335, 0.6094117259358, 0.7323993392336852, 0.7178626996713835, 0.7527717430435938, 0.7303553160756826, 0.7398023539588414, 0.7345810602280723, 0.14931063233199515, 0.13351555112136448, 0.6622369060538811, 0.14066429175160333, 0.1726157421192509, 0.13536244333222003, 0.16927292151669604, 0.17310903385891174, 0.16665051046678891, 0.10286767970176403, 0.11062674053789101, 0.09841548178142223, 0.11766048483176039, 0.13749285478756756, 0.1497628696663631, 0.12877821416404456, 0.10536676396505973, 0.14711824380142302, 0.9856512933902406, 0.9787812971815051, 0.9884286877792379, 0.9839714483074401, 0.9785587651669921, 0.9797841168656637, 0.9905617241107126, 0.9770933132040401, 0.9833577911084052, 0.7048655414793028, 0.7211467168240129, 0.7052216937557363, 0.7191710474747863, 0.14908004501186256, 0.7445236695618853, 0.7205652174423838, 0.5511206013439216, 0.6527132167092512, 0.3481079237327044, 0.2220022876779414, 0.22260963171491, 0.2773721531139688, 0.8106141678517857, 0.193143748525206, 0.7282030748672175, 0.2380711802780806, 0.1150872978406785, 0.15842663143275082, 0.12928270349161397, 0.1819346820411205, 0.16708296455829608, 0.20992905560266106, 0.12237661338006744, 0.3351147961480979, 0.19017807601288228, 0.21338139704086945, 0.18076589346594996, 0.13757489068267315, 0.22643758141871184, 0.18454500747880243, 0.24556725003162827, 0.18134559209726409, 0.22223500435779941, 0.13360190580985276, 0.12530423963151405, 9.999999999998899e-05, 0.04106590289391676, 0.009052554914146471, 9.999999999998899e-05, 0.035304986290289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07486847503284044, 0.07747999204176736, 0.03671692122265646, 0.12597768691781308, 0.08375568218519003, 9.999999999998899e-05, 0.025237010735392862, 0.09410909002513912, 0.0728437426819526, 0.042060846996438195, 0.046510822810082564, 0.07634599429344835, 0.1226496143325938, 0.09744350257911849, 0.14932735382092965, 0.07586047305840182, 0.2842119416221408, 0.08389114588004398, 0.08772702619431327, 0.06467686522928273, 9.999999999998899e-05, 0.1307702082894382, 0.00630684225609679, 0.20421519971616386, 0.08524348655987957, 0.19106498023883534, 0.04781213433341358, 0.09314857491772333, 0.5185871615500623, 0.5649049736705083, 0.5689980628370421, 0.5514152013975806, 0.5490509555687053, 0.20790007435716462, 0.5973916126254126, 0.6530010078799888, 0.5781118929648357, 0.08304826450485725, 0.07600267204559463, 0.11491859562690787, 0.12362571842962733, 0.13043972677666205, 0.13716767684518238, 0.12653952287696635, 0.13657113960499223, 0.09709974675359878, 0.14374469357949093, 0.18695456979770098, 0.18923957478194653, 0.2981175702971416, 0.24944309371380124, 0.1406468119143186, 0.3294200634479776, 0.17120108790425115, 0.28248616584533215, 0.48908365950123567, 0.6094958590761, 0.6544264222405355, 0.2899814886249241, 0.5453506268139661, 0.36763381267556094, 0.4436084820302868, 0.49875119412574753, 0.5928333162885812, 0.32402022101522454, 0.25792803367766615, 0.2829233453807415, 0.4076522537381234, 0.2622079541846637, 0.32710742616195454, 0.3432538164896639, 0.23390776228649435, 0.30096566980124007, 0.25365634866961995, 0.18875259829404345, 0.267932015646579, 0.20209338773698615, 0.21300809713335944, 0.23998942892561703, 0.24237800148333477, 0.22644071122299358, 0.246895492041457, 0.2407489637587219, 0.7381993016559744, 0.24476307319944546, 0.7596076646020812, 0.238690415179029, 0.2126182009475257, 0.21898585008086835, 0.21703275509314346, 0.2161411307226221, 0.8804029305720451, 0.878470043102824, 0.154132523530214, 0.882908229087604, 0.19873057126016025, 0.19745108635270425, 0.8419510619466086, 0.16897779637434018, 0.8931557330242321, 0.7672084987916588, 0.1683188460864965, 0.2078508423927442, 0.7558544886253658, 0.16710346584180424, 0.2089793176375876, 0.2082782456388691, 0.7949888960681359, 0.8308106177184313, 0.19654164232329197, 0.19487711470545, 0.19335537842386907, 0.19706767001895187, 0.21178877924311013, 0.21062142901655512, 0.20665390909466186, 0.18865726577078357, 0.18353189923188806, 0.09784604018523879, 0.09464449116249218, 0.09282370571545195, 0.08584127053615209, 0.08156069572947378, 0.089102552583189, 0.13650074412598556, 0.07560180769216351, 0.07904243372709896]}, "mutation_prompt": null}
{"id": "f2e47dd3-5518-4088-bcb3-be3cdbe240a5", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 32  # Slightly increased initial population\n        self.final_population_size = 24  # More dynamic population resizing\n        self.inertia_weight = 0.59  # Further reduced inertia weight for quicker convergence\n        self.cognitive_coeff = 1.8  # Increased to further enhance exploration\n        self.social_coeff = 1.3  # Slightly decreased to improve balance\n        self.mutation_factor_init = 0.88  # Adjusted mutation factor for diversity\n        self.cross_prob = 0.96  # Higher cross probability for more aggressive trial acceptance\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.initial_population_size, dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.initial_population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        eval_count = 0\n        inertia_dampening = 0.99  # Adjusted for slightly faster dampening\n        mutation_factor_change = (self.mutation_factor_init - 0.5) / self.budget\n\n        while eval_count < self.budget:\n            population_size = self.initial_population_size - int(\n                (eval_count / self.budget) * (self.initial_population_size - self.final_population_size))\n\n            for i in range(population_size):\n                score = func(self.population[i])\n                eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n                if eval_count >= self.budget:\n                    break\n\n            r1 = np.random.rand(population_size, self.dim)\n            r2 = np.random.rand(population_size, self.dim)\n            cognitive_component = self.cognitive_coeff * r1 * (self.personal_best_positions[:population_size] - self.population[:population_size])\n            social_component = self.social_coeff * r2 * (self.global_best_position - self.population[:population_size])\n            self.velocities[:population_size] = (self.inertia_weight * self.velocities[:population_size]) + cognitive_component + social_component\n            self.population[:population_size] = self.population[:population_size] + self.velocities[:population_size]\n\n            self.population[:population_size] = np.clip(self.population[:population_size], self.lower_bound, self.upper_bound)\n\n            for i in range(population_size):\n                indices = np.random.choice(np.delete(np.arange(population_size), i), 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = a + (self.mutation_factor_init - mutation_factor_change * eval_count) * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cross_prob:\n                        trial[j] = mutant[j]\n\n                trial_score = func(trial)\n                eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.population[i] = trial\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial\n                if eval_count >= self.budget:\n                    break\n\n            self.inertia_weight *= inertia_dampening\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedHybridPSODE", "description": "EnhancedHybridPSODE with dynamic parameter tuning and adaptive population control for faster convergence.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "af9c7347-3908-47a4-bd67-990d4874ebde", "metadata": {"aucs": [0.854841170199753, 0.8337434860933706, 0.8469967212274282, 0.8455483575894931, 0.8180411099900293, 0.8538268412181504, 0.8661472530299321, 0.8586874660363351, 0.8309962951446832, 0.7294235129780255, 0.6998937295171335, 0.6094117259358, 0.7323993392336852, 0.7178626996713835, 0.7527717430435938, 0.7303553160756826, 0.7398023539588414, 0.7345810602280723, 0.14931063233199515, 0.13351555112136448, 0.6622369060538811, 0.14066429175160333, 0.1726157421192509, 0.13536244333222003, 0.16927292151669604, 0.17310903385891174, 0.16665051046678891, 0.10286767970176403, 0.11062674053789101, 0.09841548178142223, 0.11766048483176039, 0.13749285478756756, 0.1497628696663631, 0.12877821416404456, 0.10536676396505973, 0.14711824380142302, 0.9856512933902406, 0.9787812971815051, 0.9884286877792379, 0.9839714483074401, 0.9785587651669921, 0.9797841168656637, 0.9905617241107126, 0.9770933132040401, 0.9833577911084052, 0.7048655414793028, 0.7211467168240129, 0.7052216937557363, 0.7191710474747863, 0.14908004501186256, 0.7445236695618853, 0.7205652174423838, 0.5511206013439216, 0.6527132167092512, 0.3481079237327044, 0.2220022876779414, 0.22260963171491, 0.2773721531139688, 0.8106141678517857, 0.193143748525206, 0.7282030748672175, 0.2380711802780806, 0.1150872978406785, 0.15842663143275082, 0.12928270349161397, 0.1819346820411205, 0.16708296455829608, 0.20992905560266106, 0.12237661338006744, 0.3351147961480979, 0.19017807601288228, 0.21338139704086945, 0.18076589346594996, 0.13757489068267315, 0.22643758141871184, 0.18454500747880243, 0.24556725003162827, 0.18134559209726409, 0.22223500435779941, 0.13360190580985276, 0.12530423963151405, 9.999999999998899e-05, 0.04106590289391676, 0.009052554914146471, 9.999999999998899e-05, 0.035304986290289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07486847503284044, 0.07747999204176736, 0.03671692122265646, 0.12597768691781308, 0.08375568218519003, 9.999999999998899e-05, 0.025237010735392862, 0.09410909002513912, 0.0728437426819526, 0.042060846996438195, 0.046510822810082564, 0.07634599429344835, 0.1226496143325938, 0.09744350257911849, 0.14932735382092965, 0.07586047305840182, 0.2842119416221408, 0.08389114588004398, 0.08772702619431327, 0.06467686522928273, 9.999999999998899e-05, 0.1307702082894382, 0.00630684225609679, 0.20421519971616386, 0.08524348655987957, 0.19106498023883534, 0.04781213433341358, 0.09314857491772333, 0.5185871615500623, 0.5649049736705083, 0.5689980628370421, 0.5514152013975806, 0.5490509555687053, 0.20790007435716462, 0.5973916126254126, 0.6530010078799888, 0.5781118929648357, 0.08304826450485725, 0.07600267204559463, 0.11491859562690787, 0.12362571842962733, 0.13043972677666205, 0.13716767684518238, 0.12653952287696635, 0.13657113960499223, 0.09709974675359878, 0.14374469357949093, 0.18695456979770098, 0.18923957478194653, 0.2981175702971416, 0.24944309371380124, 0.1406468119143186, 0.3294200634479776, 0.17120108790425115, 0.28248616584533215, 0.48908365950123567, 0.6094958590761, 0.6544264222405355, 0.2899814886249241, 0.5453506268139661, 0.36763381267556094, 0.4436084820302868, 0.49875119412574753, 0.5928333162885812, 0.32402022101522454, 0.25792803367766615, 0.2829233453807415, 0.4076522537381234, 0.2622079541846637, 0.32710742616195454, 0.3432538164896639, 0.23390776228649435, 0.30096566980124007, 0.25365634866961995, 0.18875259829404345, 0.267932015646579, 0.20209338773698615, 0.21300809713335944, 0.23998942892561703, 0.24237800148333477, 0.22644071122299358, 0.246895492041457, 0.2407489637587219, 0.7381993016559744, 0.24476307319944546, 0.7596076646020812, 0.238690415179029, 0.2126182009475257, 0.21898585008086835, 0.21703275509314346, 0.2161411307226221, 0.8804029305720451, 0.878470043102824, 0.154132523530214, 0.882908229087604, 0.19873057126016025, 0.19745108635270425, 0.8419510619466086, 0.16897779637434018, 0.8931557330242321, 0.7672084987916588, 0.1683188460864965, 0.2078508423927442, 0.7558544886253658, 0.16710346584180424, 0.2089793176375876, 0.2082782456388691, 0.7949888960681359, 0.8308106177184313, 0.19654164232329197, 0.19487711470545, 0.19335537842386907, 0.19706767001895187, 0.21178877924311013, 0.21062142901655512, 0.20665390909466186, 0.18865726577078357, 0.18353189923188806, 0.09784604018523879, 0.09464449116249218, 0.09282370571545195, 0.08584127053615209, 0.08156069572947378, 0.089102552583189, 0.13650074412598556, 0.07560180769216351, 0.07904243372709896]}, "mutation_prompt": null}
{"id": "ce8dcf68-df7c-4cb5-8363-7bd2199ec80f", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 32  # Slightly increased initial population\n        self.final_population_size = 24  # More dynamic population resizing\n        self.inertia_weight = 0.59  # Further reduced inertia weight for quicker convergence\n        self.cognitive_coeff = 1.8  # Increased to further enhance exploration\n        self.social_coeff = 1.3  # Slightly decreased to improve balance\n        self.mutation_factor_init = 0.88  # Adjusted mutation factor for diversity\n        self.cross_prob = 0.96  # Higher cross probability for more aggressive trial acceptance\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.initial_population_size, dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.initial_population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        eval_count = 0\n        inertia_dampening = 0.99  # Adjusted for slightly faster dampening\n        mutation_factor_change = (self.mutation_factor_init - 0.5) / self.budget\n\n        while eval_count < self.budget:\n            population_size = self.initial_population_size - int(\n                (eval_count / self.budget) * (self.initial_population_size - self.final_population_size))\n\n            for i in range(population_size):\n                score = func(self.population[i])\n                eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n                if eval_count >= self.budget:\n                    break\n\n            r1 = np.random.rand(population_size, self.dim)\n            r2 = np.random.rand(population_size, self.dim)\n            cognitive_component = self.cognitive_coeff * r1 * (self.personal_best_positions[:population_size] - self.population[:population_size])\n            social_component = self.social_coeff * r2 * (self.global_best_position - self.population[:population_size])\n            self.velocities[:population_size] = (self.inertia_weight * self.velocities[:population_size]) + cognitive_component + social_component\n            self.population[:population_size] = self.population[:population_size] + self.velocities[:population_size]\n\n            self.population[:population_size] = np.clip(self.population[:population_size], self.lower_bound, self.upper_bound)\n\n            for i in range(population_size):\n                indices = np.random.choice(np.delete(np.arange(population_size), i), 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = a + (self.mutation_factor_init - mutation_factor_change * eval_count) * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cross_prob:\n                        trial[j] = mutant[j]\n\n                trial_score = func(trial)\n                eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.population[i] = trial\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial\n                if eval_count >= self.budget:\n                    break\n\n            self.inertia_weight *= inertia_dampening\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedHybridPSODE", "description": "EnhancedHybridPSODE with dynamic parameter tuning and adaptive population control for faster convergence.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "af9c7347-3908-47a4-bd67-990d4874ebde", "metadata": {"aucs": [0.854841170199753, 0.8337434860933706, 0.8469967212274282, 0.8455483575894931, 0.8180411099900293, 0.8538268412181504, 0.8661472530299321, 0.8586874660363351, 0.8309962951446832, 0.7294235129780255, 0.6998937295171335, 0.6094117259358, 0.7323993392336852, 0.7178626996713835, 0.7527717430435938, 0.7303553160756826, 0.7398023539588414, 0.7345810602280723, 0.14931063233199515, 0.13351555112136448, 0.6622369060538811, 0.14066429175160333, 0.1726157421192509, 0.13536244333222003, 0.16927292151669604, 0.17310903385891174, 0.16665051046678891, 0.10286767970176403, 0.11062674053789101, 0.09841548178142223, 0.11766048483176039, 0.13749285478756756, 0.1497628696663631, 0.12877821416404456, 0.10536676396505973, 0.14711824380142302, 0.9856512933902406, 0.9787812971815051, 0.9884286877792379, 0.9839714483074401, 0.9785587651669921, 0.9797841168656637, 0.9905617241107126, 0.9770933132040401, 0.9833577911084052, 0.7048655414793028, 0.7211467168240129, 0.7052216937557363, 0.7191710474747863, 0.14908004501186256, 0.7445236695618853, 0.7205652174423838, 0.5511206013439216, 0.6527132167092512, 0.3481079237327044, 0.2220022876779414, 0.22260963171491, 0.2773721531139688, 0.8106141678517857, 0.193143748525206, 0.7282030748672175, 0.2380711802780806, 0.1150872978406785, 0.15842663143275082, 0.12928270349161397, 0.1819346820411205, 0.16708296455829608, 0.20992905560266106, 0.12237661338006744, 0.3351147961480979, 0.19017807601288228, 0.21338139704086945, 0.18076589346594996, 0.13757489068267315, 0.22643758141871184, 0.18454500747880243, 0.24556725003162827, 0.18134559209726409, 0.22223500435779941, 0.13360190580985276, 0.12530423963151405, 9.999999999998899e-05, 0.04106590289391676, 0.009052554914146471, 9.999999999998899e-05, 0.035304986290289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07486847503284044, 0.07747999204176736, 0.03671692122265646, 0.12597768691781308, 0.08375568218519003, 9.999999999998899e-05, 0.025237010735392862, 0.09410909002513912, 0.0728437426819526, 0.042060846996438195, 0.046510822810082564, 0.07634599429344835, 0.1226496143325938, 0.09744350257911849, 0.14932735382092965, 0.07586047305840182, 0.2842119416221408, 0.08389114588004398, 0.08772702619431327, 0.06467686522928273, 9.999999999998899e-05, 0.1307702082894382, 0.00630684225609679, 0.20421519971616386, 0.08524348655987957, 0.19106498023883534, 0.04781213433341358, 0.09314857491772333, 0.5185871615500623, 0.5649049736705083, 0.5689980628370421, 0.5514152013975806, 0.5490509555687053, 0.20790007435716462, 0.5973916126254126, 0.6530010078799888, 0.5781118929648357, 0.08304826450485725, 0.07600267204559463, 0.11491859562690787, 0.12362571842962733, 0.13043972677666205, 0.13716767684518238, 0.12653952287696635, 0.13657113960499223, 0.09709974675359878, 0.14374469357949093, 0.18695456979770098, 0.18923957478194653, 0.2981175702971416, 0.24944309371380124, 0.1406468119143186, 0.3294200634479776, 0.17120108790425115, 0.28248616584533215, 0.48908365950123567, 0.6094958590761, 0.6544264222405355, 0.2899814886249241, 0.5453506268139661, 0.36763381267556094, 0.4436084820302868, 0.49875119412574753, 0.5928333162885812, 0.32402022101522454, 0.25792803367766615, 0.2829233453807415, 0.4076522537381234, 0.2622079541846637, 0.32710742616195454, 0.3432538164896639, 0.23390776228649435, 0.30096566980124007, 0.25365634866961995, 0.18875259829404345, 0.267932015646579, 0.20209338773698615, 0.21300809713335944, 0.23998942892561703, 0.24237800148333477, 0.22644071122299358, 0.246895492041457, 0.2407489637587219, 0.7381993016559744, 0.24476307319944546, 0.7596076646020812, 0.238690415179029, 0.2126182009475257, 0.21898585008086835, 0.21703275509314346, 0.2161411307226221, 0.8804029305720451, 0.878470043102824, 0.154132523530214, 0.882908229087604, 0.19873057126016025, 0.19745108635270425, 0.8419510619466086, 0.16897779637434018, 0.8931557330242321, 0.7672084987916588, 0.1683188460864965, 0.2078508423927442, 0.7558544886253658, 0.16710346584180424, 0.2089793176375876, 0.2082782456388691, 0.7949888960681359, 0.8308106177184313, 0.19654164232329197, 0.19487711470545, 0.19335537842386907, 0.19706767001895187, 0.21178877924311013, 0.21062142901655512, 0.20665390909466186, 0.18865726577078357, 0.18353189923188806, 0.09784604018523879, 0.09464449116249218, 0.09282370571545195, 0.08584127053615209, 0.08156069572947378, 0.089102552583189, 0.13650074412598556, 0.07560180769216351, 0.07904243372709896]}, "mutation_prompt": null}
{"id": "f9cc3fbc-0c4d-49a0-9326-4cddfa0a8f1c", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 32  # Slightly increased initial population\n        self.final_population_size = 24  # More dynamic population resizing\n        self.inertia_weight = 0.59  # Further reduced inertia weight for quicker convergence\n        self.cognitive_coeff = 1.8  # Increased to further enhance exploration\n        self.social_coeff = 1.3  # Slightly decreased to improve balance\n        self.mutation_factor_init = 0.88  # Adjusted mutation factor for diversity\n        self.cross_prob = 0.96  # Higher cross probability for more aggressive trial acceptance\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.initial_population_size, dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.initial_population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        eval_count = 0\n        inertia_dampening = 0.99  # Adjusted for slightly faster dampening\n        mutation_factor_change = (self.mutation_factor_init - 0.5) / self.budget\n\n        while eval_count < self.budget:\n            population_size = self.initial_population_size - int(\n                (eval_count / self.budget) * (self.initial_population_size - self.final_population_size))\n\n            for i in range(population_size):\n                score = func(self.population[i])\n                eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n                if eval_count >= self.budget:\n                    break\n\n            r1 = np.random.rand(population_size, self.dim)\n            r2 = np.random.rand(population_size, self.dim)\n            cognitive_component = self.cognitive_coeff * r1 * (self.personal_best_positions[:population_size] - self.population[:population_size])\n            social_component = self.social_coeff * r2 * (self.global_best_position - self.population[:population_size])\n            self.velocities[:population_size] = (self.inertia_weight * self.velocities[:population_size]) + cognitive_component + social_component\n            self.population[:population_size] = self.population[:population_size] + self.velocities[:population_size]\n\n            self.population[:population_size] = np.clip(self.population[:population_size], self.lower_bound, self.upper_bound)\n\n            for i in range(population_size):\n                indices = np.random.choice(np.delete(np.arange(population_size), i), 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = a + (self.mutation_factor_init - mutation_factor_change * eval_count) * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cross_prob:\n                        trial[j] = mutant[j]\n\n                trial_score = func(trial)\n                eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.population[i] = trial\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial\n                if eval_count >= self.budget:\n                    break\n\n            self.inertia_weight *= inertia_dampening\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedHybridPSODE", "description": "EnhancedHybridPSODE with dynamic parameter tuning and adaptive population control for faster convergence.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "af9c7347-3908-47a4-bd67-990d4874ebde", "metadata": {"aucs": [0.854841170199753, 0.8337434860933706, 0.8469967212274282, 0.8455483575894931, 0.8180411099900293, 0.8538268412181504, 0.8661472530299321, 0.8586874660363351, 0.8309962951446832, 0.7294235129780255, 0.6998937295171335, 0.6094117259358, 0.7323993392336852, 0.7178626996713835, 0.7527717430435938, 0.7303553160756826, 0.7398023539588414, 0.7345810602280723, 0.14931063233199515, 0.13351555112136448, 0.6622369060538811, 0.14066429175160333, 0.1726157421192509, 0.13536244333222003, 0.16927292151669604, 0.17310903385891174, 0.16665051046678891, 0.10286767970176403, 0.11062674053789101, 0.09841548178142223, 0.11766048483176039, 0.13749285478756756, 0.1497628696663631, 0.12877821416404456, 0.10536676396505973, 0.14711824380142302, 0.9856512933902406, 0.9787812971815051, 0.9884286877792379, 0.9839714483074401, 0.9785587651669921, 0.9797841168656637, 0.9905617241107126, 0.9770933132040401, 0.9833577911084052, 0.7048655414793028, 0.7211467168240129, 0.7052216937557363, 0.7191710474747863, 0.14908004501186256, 0.7445236695618853, 0.7205652174423838, 0.5511206013439216, 0.6527132167092512, 0.3481079237327044, 0.2220022876779414, 0.22260963171491, 0.2773721531139688, 0.8106141678517857, 0.193143748525206, 0.7282030748672175, 0.2380711802780806, 0.1150872978406785, 0.15842663143275082, 0.12928270349161397, 0.1819346820411205, 0.16708296455829608, 0.20992905560266106, 0.12237661338006744, 0.3351147961480979, 0.19017807601288228, 0.21338139704086945, 0.18076589346594996, 0.13757489068267315, 0.22643758141871184, 0.18454500747880243, 0.24556725003162827, 0.18134559209726409, 0.22223500435779941, 0.13360190580985276, 0.12530423963151405, 9.999999999998899e-05, 0.04106590289391676, 0.009052554914146471, 9.999999999998899e-05, 0.035304986290289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07486847503284044, 0.07747999204176736, 0.03671692122265646, 0.12597768691781308, 0.08375568218519003, 9.999999999998899e-05, 0.025237010735392862, 0.09410909002513912, 0.0728437426819526, 0.042060846996438195, 0.046510822810082564, 0.07634599429344835, 0.1226496143325938, 0.09744350257911849, 0.14932735382092965, 0.07586047305840182, 0.2842119416221408, 0.08389114588004398, 0.08772702619431327, 0.06467686522928273, 9.999999999998899e-05, 0.1307702082894382, 0.00630684225609679, 0.20421519971616386, 0.08524348655987957, 0.19106498023883534, 0.04781213433341358, 0.09314857491772333, 0.5185871615500623, 0.5649049736705083, 0.5689980628370421, 0.5514152013975806, 0.5490509555687053, 0.20790007435716462, 0.5973916126254126, 0.6530010078799888, 0.5781118929648357, 0.08304826450485725, 0.07600267204559463, 0.11491859562690787, 0.12362571842962733, 0.13043972677666205, 0.13716767684518238, 0.12653952287696635, 0.13657113960499223, 0.09709974675359878, 0.14374469357949093, 0.18695456979770098, 0.18923957478194653, 0.2981175702971416, 0.24944309371380124, 0.1406468119143186, 0.3294200634479776, 0.17120108790425115, 0.28248616584533215, 0.48908365950123567, 0.6094958590761, 0.6544264222405355, 0.2899814886249241, 0.5453506268139661, 0.36763381267556094, 0.4436084820302868, 0.49875119412574753, 0.5928333162885812, 0.32402022101522454, 0.25792803367766615, 0.2829233453807415, 0.4076522537381234, 0.2622079541846637, 0.32710742616195454, 0.3432538164896639, 0.23390776228649435, 0.30096566980124007, 0.25365634866961995, 0.18875259829404345, 0.267932015646579, 0.20209338773698615, 0.21300809713335944, 0.23998942892561703, 0.24237800148333477, 0.22644071122299358, 0.246895492041457, 0.2407489637587219, 0.7381993016559744, 0.24476307319944546, 0.7596076646020812, 0.238690415179029, 0.2126182009475257, 0.21898585008086835, 0.21703275509314346, 0.2161411307226221, 0.8804029305720451, 0.878470043102824, 0.154132523530214, 0.882908229087604, 0.19873057126016025, 0.19745108635270425, 0.8419510619466086, 0.16897779637434018, 0.8931557330242321, 0.7672084987916588, 0.1683188460864965, 0.2078508423927442, 0.7558544886253658, 0.16710346584180424, 0.2089793176375876, 0.2082782456388691, 0.7949888960681359, 0.8308106177184313, 0.19654164232329197, 0.19487711470545, 0.19335537842386907, 0.19706767001895187, 0.21178877924311013, 0.21062142901655512, 0.20665390909466186, 0.18865726577078357, 0.18353189923188806, 0.09784604018523879, 0.09464449116249218, 0.09282370571545195, 0.08584127053615209, 0.08156069572947378, 0.089102552583189, 0.13650074412598556, 0.07560180769216351, 0.07904243372709896]}, "mutation_prompt": null}
{"id": "d68b6eed-6f28-4c00-9c66-e5e00adb182b", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 32  # Slightly increased initial population\n        self.final_population_size = 24  # More dynamic population resizing\n        self.inertia_weight = 0.59  # Further reduced inertia weight for quicker convergence\n        self.cognitive_coeff = 1.8  # Increased to further enhance exploration\n        self.social_coeff = 1.3  # Slightly decreased to improve balance\n        self.mutation_factor_init = 0.88  # Adjusted mutation factor for diversity\n        self.cross_prob = 0.96  # Higher cross probability for more aggressive trial acceptance\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.initial_population_size, dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.initial_population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        eval_count = 0\n        inertia_dampening = 0.99  # Adjusted for slightly faster dampening\n        mutation_factor_change = (self.mutation_factor_init - 0.5) / self.budget\n\n        while eval_count < self.budget:\n            population_size = self.initial_population_size - int(\n                (eval_count / self.budget) * (self.initial_population_size - self.final_population_size))\n\n            for i in range(population_size):\n                score = func(self.population[i])\n                eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n                if eval_count >= self.budget:\n                    break\n\n            r1 = np.random.rand(population_size, self.dim)\n            r2 = np.random.rand(population_size, self.dim)\n            cognitive_component = self.cognitive_coeff * r1 * (self.personal_best_positions[:population_size] - self.population[:population_size])\n            social_component = self.social_coeff * r2 * (self.global_best_position - self.population[:population_size])\n            self.velocities[:population_size] = (self.inertia_weight * self.velocities[:population_size]) + cognitive_component + social_component\n            self.population[:population_size] = self.population[:population_size] + self.velocities[:population_size]\n\n            self.population[:population_size] = np.clip(self.population[:population_size], self.lower_bound, self.upper_bound)\n\n            for i in range(population_size):\n                indices = np.random.choice(np.delete(np.arange(population_size), i), 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = a + (self.mutation_factor_init - mutation_factor_change * eval_count) * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cross_prob:\n                        trial[j] = mutant[j]\n\n                trial_score = func(trial)\n                eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.population[i] = trial\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial\n                if eval_count >= self.budget:\n                    break\n\n            self.inertia_weight *= inertia_dampening\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedHybridPSODE", "description": "EnhancedHybridPSODE with dynamic parameter tuning and adaptive population control for faster convergence.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "af9c7347-3908-47a4-bd67-990d4874ebde", "metadata": {"aucs": [0.854841170199753, 0.8337434860933706, 0.8469967212274282, 0.8455483575894931, 0.8180411099900293, 0.8538268412181504, 0.8661472530299321, 0.8586874660363351, 0.8309962951446832, 0.7294235129780255, 0.6998937295171335, 0.6094117259358, 0.7323993392336852, 0.7178626996713835, 0.7527717430435938, 0.7303553160756826, 0.7398023539588414, 0.7345810602280723, 0.14931063233199515, 0.13351555112136448, 0.6622369060538811, 0.14066429175160333, 0.1726157421192509, 0.13536244333222003, 0.16927292151669604, 0.17310903385891174, 0.16665051046678891, 0.10286767970176403, 0.11062674053789101, 0.09841548178142223, 0.11766048483176039, 0.13749285478756756, 0.1497628696663631, 0.12877821416404456, 0.10536676396505973, 0.14711824380142302, 0.9856512933902406, 0.9787812971815051, 0.9884286877792379, 0.9839714483074401, 0.9785587651669921, 0.9797841168656637, 0.9905617241107126, 0.9770933132040401, 0.9833577911084052, 0.7048655414793028, 0.7211467168240129, 0.7052216937557363, 0.7191710474747863, 0.14908004501186256, 0.7445236695618853, 0.7205652174423838, 0.5511206013439216, 0.6527132167092512, 0.3481079237327044, 0.2220022876779414, 0.22260963171491, 0.2773721531139688, 0.8106141678517857, 0.193143748525206, 0.7282030748672175, 0.2380711802780806, 0.1150872978406785, 0.15842663143275082, 0.12928270349161397, 0.1819346820411205, 0.16708296455829608, 0.20992905560266106, 0.12237661338006744, 0.3351147961480979, 0.19017807601288228, 0.21338139704086945, 0.18076589346594996, 0.13757489068267315, 0.22643758141871184, 0.18454500747880243, 0.24556725003162827, 0.18134559209726409, 0.22223500435779941, 0.13360190580985276, 0.12530423963151405, 9.999999999998899e-05, 0.04106590289391676, 0.009052554914146471, 9.999999999998899e-05, 0.035304986290289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07486847503284044, 0.07747999204176736, 0.03671692122265646, 0.12597768691781308, 0.08375568218519003, 9.999999999998899e-05, 0.025237010735392862, 0.09410909002513912, 0.0728437426819526, 0.042060846996438195, 0.046510822810082564, 0.07634599429344835, 0.1226496143325938, 0.09744350257911849, 0.14932735382092965, 0.07586047305840182, 0.2842119416221408, 0.08389114588004398, 0.08772702619431327, 0.06467686522928273, 9.999999999998899e-05, 0.1307702082894382, 0.00630684225609679, 0.20421519971616386, 0.08524348655987957, 0.19106498023883534, 0.04781213433341358, 0.09314857491772333, 0.5185871615500623, 0.5649049736705083, 0.5689980628370421, 0.5514152013975806, 0.5490509555687053, 0.20790007435716462, 0.5973916126254126, 0.6530010078799888, 0.5781118929648357, 0.08304826450485725, 0.07600267204559463, 0.11491859562690787, 0.12362571842962733, 0.13043972677666205, 0.13716767684518238, 0.12653952287696635, 0.13657113960499223, 0.09709974675359878, 0.14374469357949093, 0.18695456979770098, 0.18923957478194653, 0.2981175702971416, 0.24944309371380124, 0.1406468119143186, 0.3294200634479776, 0.17120108790425115, 0.28248616584533215, 0.48908365950123567, 0.6094958590761, 0.6544264222405355, 0.2899814886249241, 0.5453506268139661, 0.36763381267556094, 0.4436084820302868, 0.49875119412574753, 0.5928333162885812, 0.32402022101522454, 0.25792803367766615, 0.2829233453807415, 0.4076522537381234, 0.2622079541846637, 0.32710742616195454, 0.3432538164896639, 0.23390776228649435, 0.30096566980124007, 0.25365634866961995, 0.18875259829404345, 0.267932015646579, 0.20209338773698615, 0.21300809713335944, 0.23998942892561703, 0.24237800148333477, 0.22644071122299358, 0.246895492041457, 0.2407489637587219, 0.7381993016559744, 0.24476307319944546, 0.7596076646020812, 0.238690415179029, 0.2126182009475257, 0.21898585008086835, 0.21703275509314346, 0.2161411307226221, 0.8804029305720451, 0.878470043102824, 0.154132523530214, 0.882908229087604, 0.19873057126016025, 0.19745108635270425, 0.8419510619466086, 0.16897779637434018, 0.8931557330242321, 0.7672084987916588, 0.1683188460864965, 0.2078508423927442, 0.7558544886253658, 0.16710346584180424, 0.2089793176375876, 0.2082782456388691, 0.7949888960681359, 0.8308106177184313, 0.19654164232329197, 0.19487711470545, 0.19335537842386907, 0.19706767001895187, 0.21178877924311013, 0.21062142901655512, 0.20665390909466186, 0.18865726577078357, 0.18353189923188806, 0.09784604018523879, 0.09464449116249218, 0.09282370571545195, 0.08584127053615209, 0.08156069572947378, 0.089102552583189, 0.13650074412598556, 0.07560180769216351, 0.07904243372709896]}, "mutation_prompt": null}
{"id": "6433a40d-6c4f-49d1-9073-37b0f2e49be8", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 32  # Slightly increased initial population\n        self.final_population_size = 24  # More dynamic population resizing\n        self.inertia_weight = 0.59  # Further reduced inertia weight for quicker convergence\n        self.cognitive_coeff = 1.8  # Increased to further enhance exploration\n        self.social_coeff = 1.3  # Slightly decreased to improve balance\n        self.mutation_factor_init = 0.88  # Adjusted mutation factor for diversity\n        self.cross_prob = 0.96  # Higher cross probability for more aggressive trial acceptance\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.initial_population_size, dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.initial_population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        eval_count = 0\n        inertia_dampening = 0.99  # Adjusted for slightly faster dampening\n        mutation_factor_change = (self.mutation_factor_init - 0.5) / self.budget\n\n        while eval_count < self.budget:\n            population_size = self.initial_population_size - int(\n                (eval_count / self.budget) * (self.initial_population_size - self.final_population_size))\n\n            for i in range(population_size):\n                score = func(self.population[i])\n                eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n                if eval_count >= self.budget:\n                    break\n\n            r1 = np.random.rand(population_size, self.dim)\n            r2 = np.random.rand(population_size, self.dim)\n            cognitive_component = self.cognitive_coeff * r1 * (self.personal_best_positions[:population_size] - self.population[:population_size])\n            social_component = self.social_coeff * r2 * (self.global_best_position - self.population[:population_size])\n            self.velocities[:population_size] = (self.inertia_weight * self.velocities[:population_size]) + cognitive_component + social_component\n            self.population[:population_size] = self.population[:population_size] + self.velocities[:population_size]\n\n            self.population[:population_size] = np.clip(self.population[:population_size], self.lower_bound, self.upper_bound)\n\n            for i in range(population_size):\n                indices = np.random.choice(np.delete(np.arange(population_size), i), 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = a + (self.mutation_factor_init - mutation_factor_change * eval_count) * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cross_prob:\n                        trial[j] = mutant[j]\n\n                trial_score = func(trial)\n                eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.population[i] = trial\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial\n                if eval_count >= self.budget:\n                    break\n\n            self.inertia_weight *= inertia_dampening\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedHybridPSODE", "description": "EnhancedHybridPSODE with dynamic parameter tuning and adaptive population control for faster convergence.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "af9c7347-3908-47a4-bd67-990d4874ebde", "metadata": {"aucs": [0.854841170199753, 0.8337434860933706, 0.8469967212274282, 0.8455483575894931, 0.8180411099900293, 0.8538268412181504, 0.8661472530299321, 0.8586874660363351, 0.8309962951446832, 0.7294235129780255, 0.6998937295171335, 0.6094117259358, 0.7323993392336852, 0.7178626996713835, 0.7527717430435938, 0.7303553160756826, 0.7398023539588414, 0.7345810602280723, 0.14931063233199515, 0.13351555112136448, 0.6622369060538811, 0.14066429175160333, 0.1726157421192509, 0.13536244333222003, 0.16927292151669604, 0.17310903385891174, 0.16665051046678891, 0.10286767970176403, 0.11062674053789101, 0.09841548178142223, 0.11766048483176039, 0.13749285478756756, 0.1497628696663631, 0.12877821416404456, 0.10536676396505973, 0.14711824380142302, 0.9856512933902406, 0.9787812971815051, 0.9884286877792379, 0.9839714483074401, 0.9785587651669921, 0.9797841168656637, 0.9905617241107126, 0.9770933132040401, 0.9833577911084052, 0.7048655414793028, 0.7211467168240129, 0.7052216937557363, 0.7191710474747863, 0.14908004501186256, 0.7445236695618853, 0.7205652174423838, 0.5511206013439216, 0.6527132167092512, 0.3481079237327044, 0.2220022876779414, 0.22260963171491, 0.2773721531139688, 0.8106141678517857, 0.193143748525206, 0.7282030748672175, 0.2380711802780806, 0.1150872978406785, 0.15842663143275082, 0.12928270349161397, 0.1819346820411205, 0.16708296455829608, 0.20992905560266106, 0.12237661338006744, 0.3351147961480979, 0.19017807601288228, 0.21338139704086945, 0.18076589346594996, 0.13757489068267315, 0.22643758141871184, 0.18454500747880243, 0.24556725003162827, 0.18134559209726409, 0.22223500435779941, 0.13360190580985276, 0.12530423963151405, 9.999999999998899e-05, 0.04106590289391676, 0.009052554914146471, 9.999999999998899e-05, 0.035304986290289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07486847503284044, 0.07747999204176736, 0.03671692122265646, 0.12597768691781308, 0.08375568218519003, 9.999999999998899e-05, 0.025237010735392862, 0.09410909002513912, 0.0728437426819526, 0.042060846996438195, 0.046510822810082564, 0.07634599429344835, 0.1226496143325938, 0.09744350257911849, 0.14932735382092965, 0.07586047305840182, 0.2842119416221408, 0.08389114588004398, 0.08772702619431327, 0.06467686522928273, 9.999999999998899e-05, 0.1307702082894382, 0.00630684225609679, 0.20421519971616386, 0.08524348655987957, 0.19106498023883534, 0.04781213433341358, 0.09314857491772333, 0.5185871615500623, 0.5649049736705083, 0.5689980628370421, 0.5514152013975806, 0.5490509555687053, 0.20790007435716462, 0.5973916126254126, 0.6530010078799888, 0.5781118929648357, 0.08304826450485725, 0.07600267204559463, 0.11491859562690787, 0.12362571842962733, 0.13043972677666205, 0.13716767684518238, 0.12653952287696635, 0.13657113960499223, 0.09709974675359878, 0.14374469357949093, 0.18695456979770098, 0.18923957478194653, 0.2981175702971416, 0.24944309371380124, 0.1406468119143186, 0.3294200634479776, 0.17120108790425115, 0.28248616584533215, 0.48908365950123567, 0.6094958590761, 0.6544264222405355, 0.2899814886249241, 0.5453506268139661, 0.36763381267556094, 0.4436084820302868, 0.49875119412574753, 0.5928333162885812, 0.32402022101522454, 0.25792803367766615, 0.2829233453807415, 0.4076522537381234, 0.2622079541846637, 0.32710742616195454, 0.3432538164896639, 0.23390776228649435, 0.30096566980124007, 0.25365634866961995, 0.18875259829404345, 0.267932015646579, 0.20209338773698615, 0.21300809713335944, 0.23998942892561703, 0.24237800148333477, 0.22644071122299358, 0.246895492041457, 0.2407489637587219, 0.7381993016559744, 0.24476307319944546, 0.7596076646020812, 0.238690415179029, 0.2126182009475257, 0.21898585008086835, 0.21703275509314346, 0.2161411307226221, 0.8804029305720451, 0.878470043102824, 0.154132523530214, 0.882908229087604, 0.19873057126016025, 0.19745108635270425, 0.8419510619466086, 0.16897779637434018, 0.8931557330242321, 0.7672084987916588, 0.1683188460864965, 0.2078508423927442, 0.7558544886253658, 0.16710346584180424, 0.2089793176375876, 0.2082782456388691, 0.7949888960681359, 0.8308106177184313, 0.19654164232329197, 0.19487711470545, 0.19335537842386907, 0.19706767001895187, 0.21178877924311013, 0.21062142901655512, 0.20665390909466186, 0.18865726577078357, 0.18353189923188806, 0.09784604018523879, 0.09464449116249218, 0.09282370571545195, 0.08584127053615209, 0.08156069572947378, 0.089102552583189, 0.13650074412598556, 0.07560180769216351, 0.07904243372709896]}, "mutation_prompt": null}
{"id": "de045b96-4509-4de4-b62b-c12922c666a5", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 32  # Slightly increased initial population\n        self.final_population_size = 24  # More dynamic population resizing\n        self.inertia_weight = 0.59  # Further reduced inertia weight for quicker convergence\n        self.cognitive_coeff = 1.8  # Increased to further enhance exploration\n        self.social_coeff = 1.3  # Slightly decreased to improve balance\n        self.mutation_factor_init = 0.88  # Adjusted mutation factor for diversity\n        self.cross_prob = 0.96  # Higher cross probability for more aggressive trial acceptance\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.initial_population_size, dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.initial_population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        eval_count = 0\n        inertia_dampening = 0.99  # Adjusted for slightly faster dampening\n        mutation_factor_change = (self.mutation_factor_init - 0.5) / self.budget\n\n        while eval_count < self.budget:\n            population_size = self.initial_population_size - int(\n                (eval_count / self.budget) * (self.initial_population_size - self.final_population_size))\n\n            for i in range(population_size):\n                score = func(self.population[i])\n                eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n                if eval_count >= self.budget:\n                    break\n\n            r1 = np.random.rand(population_size, self.dim)\n            r2 = np.random.rand(population_size, self.dim)\n            cognitive_component = self.cognitive_coeff * r1 * (self.personal_best_positions[:population_size] - self.population[:population_size])\n            social_component = self.social_coeff * r2 * (self.global_best_position - self.population[:population_size])\n            self.velocities[:population_size] = (self.inertia_weight * self.velocities[:population_size]) + cognitive_component + social_component\n            self.population[:population_size] = self.population[:population_size] + self.velocities[:population_size]\n\n            self.population[:population_size] = np.clip(self.population[:population_size], self.lower_bound, self.upper_bound)\n\n            for i in range(population_size):\n                indices = np.random.choice(np.delete(np.arange(population_size), i), 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = a + (self.mutation_factor_init - mutation_factor_change * eval_count) * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cross_prob:\n                        trial[j] = mutant[j]\n\n                trial_score = func(trial)\n                eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.population[i] = trial\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial\n                if eval_count >= self.budget:\n                    break\n\n            self.inertia_weight *= inertia_dampening\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedHybridPSODE", "description": "EnhancedHybridPSODE with dynamic parameter tuning and adaptive population control for faster convergence.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "af9c7347-3908-47a4-bd67-990d4874ebde", "metadata": {"aucs": [0.854841170199753, 0.8337434860933706, 0.8469967212274282, 0.8455483575894931, 0.8180411099900293, 0.8538268412181504, 0.8661472530299321, 0.8586874660363351, 0.8309962951446832, 0.7294235129780255, 0.6998937295171335, 0.6094117259358, 0.7323993392336852, 0.7178626996713835, 0.7527717430435938, 0.7303553160756826, 0.7398023539588414, 0.7345810602280723, 0.14931063233199515, 0.13351555112136448, 0.6622369060538811, 0.14066429175160333, 0.1726157421192509, 0.13536244333222003, 0.16927292151669604, 0.17310903385891174, 0.16665051046678891, 0.10286767970176403, 0.11062674053789101, 0.09841548178142223, 0.11766048483176039, 0.13749285478756756, 0.1497628696663631, 0.12877821416404456, 0.10536676396505973, 0.14711824380142302, 0.9856512933902406, 0.9787812971815051, 0.9884286877792379, 0.9839714483074401, 0.9785587651669921, 0.9797841168656637, 0.9905617241107126, 0.9770933132040401, 0.9833577911084052, 0.7048655414793028, 0.7211467168240129, 0.7052216937557363, 0.7191710474747863, 0.14908004501186256, 0.7445236695618853, 0.7205652174423838, 0.5511206013439216, 0.6527132167092512, 0.3481079237327044, 0.2220022876779414, 0.22260963171491, 0.2773721531139688, 0.8106141678517857, 0.193143748525206, 0.7282030748672175, 0.2380711802780806, 0.1150872978406785, 0.15842663143275082, 0.12928270349161397, 0.1819346820411205, 0.16708296455829608, 0.20992905560266106, 0.12237661338006744, 0.3351147961480979, 0.19017807601288228, 0.21338139704086945, 0.18076589346594996, 0.13757489068267315, 0.22643758141871184, 0.18454500747880243, 0.24556725003162827, 0.18134559209726409, 0.22223500435779941, 0.13360190580985276, 0.12530423963151405, 9.999999999998899e-05, 0.04106590289391676, 0.009052554914146471, 9.999999999998899e-05, 0.035304986290289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07486847503284044, 0.07747999204176736, 0.03671692122265646, 0.12597768691781308, 0.08375568218519003, 9.999999999998899e-05, 0.025237010735392862, 0.09410909002513912, 0.0728437426819526, 0.042060846996438195, 0.046510822810082564, 0.07634599429344835, 0.1226496143325938, 0.09744350257911849, 0.14932735382092965, 0.07586047305840182, 0.2842119416221408, 0.08389114588004398, 0.08772702619431327, 0.06467686522928273, 9.999999999998899e-05, 0.1307702082894382, 0.00630684225609679, 0.20421519971616386, 0.08524348655987957, 0.19106498023883534, 0.04781213433341358, 0.09314857491772333, 0.5185871615500623, 0.5649049736705083, 0.5689980628370421, 0.5514152013975806, 0.5490509555687053, 0.20790007435716462, 0.5973916126254126, 0.6530010078799888, 0.5781118929648357, 0.08304826450485725, 0.07600267204559463, 0.11491859562690787, 0.12362571842962733, 0.13043972677666205, 0.13716767684518238, 0.12653952287696635, 0.13657113960499223, 0.09709974675359878, 0.14374469357949093, 0.18695456979770098, 0.18923957478194653, 0.2981175702971416, 0.24944309371380124, 0.1406468119143186, 0.3294200634479776, 0.17120108790425115, 0.28248616584533215, 0.48908365950123567, 0.6094958590761, 0.6544264222405355, 0.2899814886249241, 0.5453506268139661, 0.36763381267556094, 0.4436084820302868, 0.49875119412574753, 0.5928333162885812, 0.32402022101522454, 0.25792803367766615, 0.2829233453807415, 0.4076522537381234, 0.2622079541846637, 0.32710742616195454, 0.3432538164896639, 0.23390776228649435, 0.30096566980124007, 0.25365634866961995, 0.18875259829404345, 0.267932015646579, 0.20209338773698615, 0.21300809713335944, 0.23998942892561703, 0.24237800148333477, 0.22644071122299358, 0.246895492041457, 0.2407489637587219, 0.7381993016559744, 0.24476307319944546, 0.7596076646020812, 0.238690415179029, 0.2126182009475257, 0.21898585008086835, 0.21703275509314346, 0.2161411307226221, 0.8804029305720451, 0.878470043102824, 0.154132523530214, 0.882908229087604, 0.19873057126016025, 0.19745108635270425, 0.8419510619466086, 0.16897779637434018, 0.8931557330242321, 0.7672084987916588, 0.1683188460864965, 0.2078508423927442, 0.7558544886253658, 0.16710346584180424, 0.2089793176375876, 0.2082782456388691, 0.7949888960681359, 0.8308106177184313, 0.19654164232329197, 0.19487711470545, 0.19335537842386907, 0.19706767001895187, 0.21178877924311013, 0.21062142901655512, 0.20665390909466186, 0.18865726577078357, 0.18353189923188806, 0.09784604018523879, 0.09464449116249218, 0.09282370571545195, 0.08584127053615209, 0.08156069572947378, 0.089102552583189, 0.13650074412598556, 0.07560180769216351, 0.07904243372709896]}, "mutation_prompt": null}
{"id": "4e18ce50-9bea-47d9-abbb-7586abc65da6", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 32  # Slightly increased initial population\n        self.final_population_size = 24  # More dynamic population resizing\n        self.inertia_weight = 0.59  # Further reduced inertia weight for quicker convergence\n        self.cognitive_coeff = 1.8  # Increased to further enhance exploration\n        self.social_coeff = 1.3  # Slightly decreased to improve balance\n        self.mutation_factor_init = 0.88  # Adjusted mutation factor for diversity\n        self.cross_prob = 0.96  # Higher cross probability for more aggressive trial acceptance\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.initial_population_size, dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.initial_population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        eval_count = 0\n        inertia_dampening = 0.99  # Adjusted for slightly faster dampening\n        mutation_factor_change = (self.mutation_factor_init - 0.5) / self.budget\n\n        while eval_count < self.budget:\n            population_size = self.initial_population_size - int(\n                (eval_count / self.budget) * (self.initial_population_size - self.final_population_size))\n\n            for i in range(population_size):\n                score = func(self.population[i])\n                eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n                if eval_count >= self.budget:\n                    break\n\n            r1 = np.random.rand(population_size, self.dim)\n            r2 = np.random.rand(population_size, self.dim)\n            cognitive_component = self.cognitive_coeff * r1 * (self.personal_best_positions[:population_size] - self.population[:population_size])\n            social_component = self.social_coeff * r2 * (self.global_best_position - self.population[:population_size])\n            self.velocities[:population_size] = (self.inertia_weight * self.velocities[:population_size]) + cognitive_component + social_component\n            self.population[:population_size] = self.population[:population_size] + self.velocities[:population_size]\n\n            self.population[:population_size] = np.clip(self.population[:population_size], self.lower_bound, self.upper_bound)\n\n            for i in range(population_size):\n                indices = np.random.choice(np.delete(np.arange(population_size), i), 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = a + (self.mutation_factor_init - mutation_factor_change * eval_count) * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cross_prob:\n                        trial[j] = mutant[j]\n\n                trial_score = func(trial)\n                eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.population[i] = trial\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial\n                if eval_count >= self.budget:\n                    break\n\n            self.inertia_weight *= inertia_dampening\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedHybridPSODE", "description": "EnhancedHybridPSODE with dynamic parameter tuning and adaptive population control for faster convergence.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "af9c7347-3908-47a4-bd67-990d4874ebde", "metadata": {"aucs": [0.854841170199753, 0.8337434860933706, 0.8469967212274282, 0.8455483575894931, 0.8180411099900293, 0.8538268412181504, 0.8661472530299321, 0.8586874660363351, 0.8309962951446832, 0.7294235129780255, 0.6998937295171335, 0.6094117259358, 0.7323993392336852, 0.7178626996713835, 0.7527717430435938, 0.7303553160756826, 0.7398023539588414, 0.7345810602280723, 0.14931063233199515, 0.13351555112136448, 0.6622369060538811, 0.14066429175160333, 0.1726157421192509, 0.13536244333222003, 0.16927292151669604, 0.17310903385891174, 0.16665051046678891, 0.10286767970176403, 0.11062674053789101, 0.09841548178142223, 0.11766048483176039, 0.13749285478756756, 0.1497628696663631, 0.12877821416404456, 0.10536676396505973, 0.14711824380142302, 0.9856512933902406, 0.9787812971815051, 0.9884286877792379, 0.9839714483074401, 0.9785587651669921, 0.9797841168656637, 0.9905617241107126, 0.9770933132040401, 0.9833577911084052, 0.7048655414793028, 0.7211467168240129, 0.7052216937557363, 0.7191710474747863, 0.14908004501186256, 0.7445236695618853, 0.7205652174423838, 0.5511206013439216, 0.6527132167092512, 0.3481079237327044, 0.2220022876779414, 0.22260963171491, 0.2773721531139688, 0.8106141678517857, 0.193143748525206, 0.7282030748672175, 0.2380711802780806, 0.1150872978406785, 0.15842663143275082, 0.12928270349161397, 0.1819346820411205, 0.16708296455829608, 0.20992905560266106, 0.12237661338006744, 0.3351147961480979, 0.19017807601288228, 0.21338139704086945, 0.18076589346594996, 0.13757489068267315, 0.22643758141871184, 0.18454500747880243, 0.24556725003162827, 0.18134559209726409, 0.22223500435779941, 0.13360190580985276, 0.12530423963151405, 9.999999999998899e-05, 0.04106590289391676, 0.009052554914146471, 9.999999999998899e-05, 0.035304986290289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07486847503284044, 0.07747999204176736, 0.03671692122265646, 0.12597768691781308, 0.08375568218519003, 9.999999999998899e-05, 0.025237010735392862, 0.09410909002513912, 0.0728437426819526, 0.042060846996438195, 0.046510822810082564, 0.07634599429344835, 0.1226496143325938, 0.09744350257911849, 0.14932735382092965, 0.07586047305840182, 0.2842119416221408, 0.08389114588004398, 0.08772702619431327, 0.06467686522928273, 9.999999999998899e-05, 0.1307702082894382, 0.00630684225609679, 0.20421519971616386, 0.08524348655987957, 0.19106498023883534, 0.04781213433341358, 0.09314857491772333, 0.5185871615500623, 0.5649049736705083, 0.5689980628370421, 0.5514152013975806, 0.5490509555687053, 0.20790007435716462, 0.5973916126254126, 0.6530010078799888, 0.5781118929648357, 0.08304826450485725, 0.07600267204559463, 0.11491859562690787, 0.12362571842962733, 0.13043972677666205, 0.13716767684518238, 0.12653952287696635, 0.13657113960499223, 0.09709974675359878, 0.14374469357949093, 0.18695456979770098, 0.18923957478194653, 0.2981175702971416, 0.24944309371380124, 0.1406468119143186, 0.3294200634479776, 0.17120108790425115, 0.28248616584533215, 0.48908365950123567, 0.6094958590761, 0.6544264222405355, 0.2899814886249241, 0.5453506268139661, 0.36763381267556094, 0.4436084820302868, 0.49875119412574753, 0.5928333162885812, 0.32402022101522454, 0.25792803367766615, 0.2829233453807415, 0.4076522537381234, 0.2622079541846637, 0.32710742616195454, 0.3432538164896639, 0.23390776228649435, 0.30096566980124007, 0.25365634866961995, 0.18875259829404345, 0.267932015646579, 0.20209338773698615, 0.21300809713335944, 0.23998942892561703, 0.24237800148333477, 0.22644071122299358, 0.246895492041457, 0.2407489637587219, 0.7381993016559744, 0.24476307319944546, 0.7596076646020812, 0.238690415179029, 0.2126182009475257, 0.21898585008086835, 0.21703275509314346, 0.2161411307226221, 0.8804029305720451, 0.878470043102824, 0.154132523530214, 0.882908229087604, 0.19873057126016025, 0.19745108635270425, 0.8419510619466086, 0.16897779637434018, 0.8931557330242321, 0.7672084987916588, 0.1683188460864965, 0.2078508423927442, 0.7558544886253658, 0.16710346584180424, 0.2089793176375876, 0.2082782456388691, 0.7949888960681359, 0.8308106177184313, 0.19654164232329197, 0.19487711470545, 0.19335537842386907, 0.19706767001895187, 0.21178877924311013, 0.21062142901655512, 0.20665390909466186, 0.18865726577078357, 0.18353189923188806, 0.09784604018523879, 0.09464449116249218, 0.09282370571545195, 0.08584127053615209, 0.08156069572947378, 0.089102552583189, 0.13650074412598556, 0.07560180769216351, 0.07904243372709896]}, "mutation_prompt": null}
{"id": "3a9fbb60-5758-4400-811d-337283c89231", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 32  # Slightly increased initial population\n        self.final_population_size = 24  # More dynamic population resizing\n        self.inertia_weight = 0.59  # Further reduced inertia weight for quicker convergence\n        self.cognitive_coeff = 1.8  # Increased to further enhance exploration\n        self.social_coeff = 1.3  # Slightly decreased to improve balance\n        self.mutation_factor_init = 0.88  # Adjusted mutation factor for diversity\n        self.cross_prob = 0.96  # Higher cross probability for more aggressive trial acceptance\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.initial_population_size, dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.initial_population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        eval_count = 0\n        inertia_dampening = 0.99  # Adjusted for slightly faster dampening\n        mutation_factor_change = (self.mutation_factor_init - 0.5) / self.budget\n\n        while eval_count < self.budget:\n            population_size = self.initial_population_size - int(\n                (eval_count / self.budget) * (self.initial_population_size - self.final_population_size))\n\n            for i in range(population_size):\n                score = func(self.population[i])\n                eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n                if eval_count >= self.budget:\n                    break\n\n            r1 = np.random.rand(population_size, self.dim)\n            r2 = np.random.rand(population_size, self.dim)\n            cognitive_component = self.cognitive_coeff * r1 * (self.personal_best_positions[:population_size] - self.population[:population_size])\n            social_component = self.social_coeff * r2 * (self.global_best_position - self.population[:population_size])\n            self.velocities[:population_size] = (self.inertia_weight * self.velocities[:population_size]) + cognitive_component + social_component\n            self.population[:population_size] = self.population[:population_size] + self.velocities[:population_size]\n\n            self.population[:population_size] = np.clip(self.population[:population_size], self.lower_bound, self.upper_bound)\n\n            for i in range(population_size):\n                indices = np.random.choice(np.delete(np.arange(population_size), i), 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = a + (self.mutation_factor_init - mutation_factor_change * eval_count) * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cross_prob:\n                        trial[j] = mutant[j]\n\n                trial_score = func(trial)\n                eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.population[i] = trial\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial\n                if eval_count >= self.budget:\n                    break\n\n            self.inertia_weight *= inertia_dampening\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedHybridPSODE", "description": "EnhancedHybridPSODE with dynamic parameter tuning and adaptive population control for faster convergence.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "af9c7347-3908-47a4-bd67-990d4874ebde", "metadata": {"aucs": [0.854841170199753, 0.8337434860933706, 0.8469967212274282, 0.8455483575894931, 0.8180411099900293, 0.8538268412181504, 0.8661472530299321, 0.8586874660363351, 0.8309962951446832, 0.7294235129780255, 0.6998937295171335, 0.6094117259358, 0.7323993392336852, 0.7178626996713835, 0.7527717430435938, 0.7303553160756826, 0.7398023539588414, 0.7345810602280723, 0.14931063233199515, 0.13351555112136448, 0.6622369060538811, 0.14066429175160333, 0.1726157421192509, 0.13536244333222003, 0.16927292151669604, 0.17310903385891174, 0.16665051046678891, 0.10286767970176403, 0.11062674053789101, 0.09841548178142223, 0.11766048483176039, 0.13749285478756756, 0.1497628696663631, 0.12877821416404456, 0.10536676396505973, 0.14711824380142302, 0.9856512933902406, 0.9787812971815051, 0.9884286877792379, 0.9839714483074401, 0.9785587651669921, 0.9797841168656637, 0.9905617241107126, 0.9770933132040401, 0.9833577911084052, 0.7048655414793028, 0.7211467168240129, 0.7052216937557363, 0.7191710474747863, 0.14908004501186256, 0.7445236695618853, 0.7205652174423838, 0.5511206013439216, 0.6527132167092512, 0.3481079237327044, 0.2220022876779414, 0.22260963171491, 0.2773721531139688, 0.8106141678517857, 0.193143748525206, 0.7282030748672175, 0.2380711802780806, 0.1150872978406785, 0.15842663143275082, 0.12928270349161397, 0.1819346820411205, 0.16708296455829608, 0.20992905560266106, 0.12237661338006744, 0.3351147961480979, 0.19017807601288228, 0.21338139704086945, 0.18076589346594996, 0.13757489068267315, 0.22643758141871184, 0.18454500747880243, 0.24556725003162827, 0.18134559209726409, 0.22223500435779941, 0.13360190580985276, 0.12530423963151405, 9.999999999998899e-05, 0.04106590289391676, 0.009052554914146471, 9.999999999998899e-05, 0.035304986290289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07486847503284044, 0.07747999204176736, 0.03671692122265646, 0.12597768691781308, 0.08375568218519003, 9.999999999998899e-05, 0.025237010735392862, 0.09410909002513912, 0.0728437426819526, 0.042060846996438195, 0.046510822810082564, 0.07634599429344835, 0.1226496143325938, 0.09744350257911849, 0.14932735382092965, 0.07586047305840182, 0.2842119416221408, 0.08389114588004398, 0.08772702619431327, 0.06467686522928273, 9.999999999998899e-05, 0.1307702082894382, 0.00630684225609679, 0.20421519971616386, 0.08524348655987957, 0.19106498023883534, 0.04781213433341358, 0.09314857491772333, 0.5185871615500623, 0.5649049736705083, 0.5689980628370421, 0.5514152013975806, 0.5490509555687053, 0.20790007435716462, 0.5973916126254126, 0.6530010078799888, 0.5781118929648357, 0.08304826450485725, 0.07600267204559463, 0.11491859562690787, 0.12362571842962733, 0.13043972677666205, 0.13716767684518238, 0.12653952287696635, 0.13657113960499223, 0.09709974675359878, 0.14374469357949093, 0.18695456979770098, 0.18923957478194653, 0.2981175702971416, 0.24944309371380124, 0.1406468119143186, 0.3294200634479776, 0.17120108790425115, 0.28248616584533215, 0.48908365950123567, 0.6094958590761, 0.6544264222405355, 0.2899814886249241, 0.5453506268139661, 0.36763381267556094, 0.4436084820302868, 0.49875119412574753, 0.5928333162885812, 0.32402022101522454, 0.25792803367766615, 0.2829233453807415, 0.4076522537381234, 0.2622079541846637, 0.32710742616195454, 0.3432538164896639, 0.23390776228649435, 0.30096566980124007, 0.25365634866961995, 0.18875259829404345, 0.267932015646579, 0.20209338773698615, 0.21300809713335944, 0.23998942892561703, 0.24237800148333477, 0.22644071122299358, 0.246895492041457, 0.2407489637587219, 0.7381993016559744, 0.24476307319944546, 0.7596076646020812, 0.238690415179029, 0.2126182009475257, 0.21898585008086835, 0.21703275509314346, 0.2161411307226221, 0.8804029305720451, 0.878470043102824, 0.154132523530214, 0.882908229087604, 0.19873057126016025, 0.19745108635270425, 0.8419510619466086, 0.16897779637434018, 0.8931557330242321, 0.7672084987916588, 0.1683188460864965, 0.2078508423927442, 0.7558544886253658, 0.16710346584180424, 0.2089793176375876, 0.2082782456388691, 0.7949888960681359, 0.8308106177184313, 0.19654164232329197, 0.19487711470545, 0.19335537842386907, 0.19706767001895187, 0.21178877924311013, 0.21062142901655512, 0.20665390909466186, 0.18865726577078357, 0.18353189923188806, 0.09784604018523879, 0.09464449116249218, 0.09282370571545195, 0.08584127053615209, 0.08156069572947378, 0.089102552583189, 0.13650074412598556, 0.07560180769216351, 0.07904243372709896]}, "mutation_prompt": null}
{"id": "b5cd3a88-6839-4c79-afe6-948164344857", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 32  # Slightly increased initial population\n        self.final_population_size = 24  # More dynamic population resizing\n        self.inertia_weight = 0.59  # Further reduced inertia weight for quicker convergence\n        self.cognitive_coeff = 1.8  # Increased to further enhance exploration\n        self.social_coeff = 1.3  # Slightly decreased to improve balance\n        self.mutation_factor_init = 0.88  # Adjusted mutation factor for diversity\n        self.cross_prob = 0.96  # Higher cross probability for more aggressive trial acceptance\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.initial_population_size, dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.initial_population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        eval_count = 0\n        inertia_dampening = 0.99  # Adjusted for slightly faster dampening\n        mutation_factor_change = (self.mutation_factor_init - 0.5) / self.budget\n\n        while eval_count < self.budget:\n            population_size = self.initial_population_size - int(\n                (eval_count / self.budget) * (self.initial_population_size - self.final_population_size))\n\n            for i in range(population_size):\n                score = func(self.population[i])\n                eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n                if eval_count >= self.budget:\n                    break\n\n            r1 = np.random.rand(population_size, self.dim)\n            r2 = np.random.rand(population_size, self.dim)\n            cognitive_component = self.cognitive_coeff * r1 * (self.personal_best_positions[:population_size] - self.population[:population_size])\n            social_component = self.social_coeff * r2 * (self.global_best_position - self.population[:population_size])\n            self.velocities[:population_size] = (self.inertia_weight * self.velocities[:population_size]) + cognitive_component + social_component\n            self.population[:population_size] = self.population[:population_size] + self.velocities[:population_size]\n\n            self.population[:population_size] = np.clip(self.population[:population_size], self.lower_bound, self.upper_bound)\n\n            for i in range(population_size):\n                indices = np.random.choice(np.delete(np.arange(population_size), i), 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = a + (self.mutation_factor_init - mutation_factor_change * eval_count) * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cross_prob:\n                        trial[j] = mutant[j]\n\n                trial_score = func(trial)\n                eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.population[i] = trial\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial\n                if eval_count >= self.budget:\n                    break\n\n            self.inertia_weight *= inertia_dampening\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedHybridPSODE", "description": "EnhancedHybridPSODE with dynamic parameter tuning and adaptive population control for faster convergence.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "af9c7347-3908-47a4-bd67-990d4874ebde", "metadata": {"aucs": [0.854841170199753, 0.8337434860933706, 0.8469967212274282, 0.8455483575894931, 0.8180411099900293, 0.8538268412181504, 0.8661472530299321, 0.8586874660363351, 0.8309962951446832, 0.7294235129780255, 0.6998937295171335, 0.6094117259358, 0.7323993392336852, 0.7178626996713835, 0.7527717430435938, 0.7303553160756826, 0.7398023539588414, 0.7345810602280723, 0.14931063233199515, 0.13351555112136448, 0.6622369060538811, 0.14066429175160333, 0.1726157421192509, 0.13536244333222003, 0.16927292151669604, 0.17310903385891174, 0.16665051046678891, 0.10286767970176403, 0.11062674053789101, 0.09841548178142223, 0.11766048483176039, 0.13749285478756756, 0.1497628696663631, 0.12877821416404456, 0.10536676396505973, 0.14711824380142302, 0.9856512933902406, 0.9787812971815051, 0.9884286877792379, 0.9839714483074401, 0.9785587651669921, 0.9797841168656637, 0.9905617241107126, 0.9770933132040401, 0.9833577911084052, 0.7048655414793028, 0.7211467168240129, 0.7052216937557363, 0.7191710474747863, 0.14908004501186256, 0.7445236695618853, 0.7205652174423838, 0.5511206013439216, 0.6527132167092512, 0.3481079237327044, 0.2220022876779414, 0.22260963171491, 0.2773721531139688, 0.8106141678517857, 0.193143748525206, 0.7282030748672175, 0.2380711802780806, 0.1150872978406785, 0.15842663143275082, 0.12928270349161397, 0.1819346820411205, 0.16708296455829608, 0.20992905560266106, 0.12237661338006744, 0.3351147961480979, 0.19017807601288228, 0.21338139704086945, 0.18076589346594996, 0.13757489068267315, 0.22643758141871184, 0.18454500747880243, 0.24556725003162827, 0.18134559209726409, 0.22223500435779941, 0.13360190580985276, 0.12530423963151405, 9.999999999998899e-05, 0.04106590289391676, 0.009052554914146471, 9.999999999998899e-05, 0.035304986290289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07486847503284044, 0.07747999204176736, 0.03671692122265646, 0.12597768691781308, 0.08375568218519003, 9.999999999998899e-05, 0.025237010735392862, 0.09410909002513912, 0.0728437426819526, 0.042060846996438195, 0.046510822810082564, 0.07634599429344835, 0.1226496143325938, 0.09744350257911849, 0.14932735382092965, 0.07586047305840182, 0.2842119416221408, 0.08389114588004398, 0.08772702619431327, 0.06467686522928273, 9.999999999998899e-05, 0.1307702082894382, 0.00630684225609679, 0.20421519971616386, 0.08524348655987957, 0.19106498023883534, 0.04781213433341358, 0.09314857491772333, 0.5185871615500623, 0.5649049736705083, 0.5689980628370421, 0.5514152013975806, 0.5490509555687053, 0.20790007435716462, 0.5973916126254126, 0.6530010078799888, 0.5781118929648357, 0.08304826450485725, 0.07600267204559463, 0.11491859562690787, 0.12362571842962733, 0.13043972677666205, 0.13716767684518238, 0.12653952287696635, 0.13657113960499223, 0.09709974675359878, 0.14374469357949093, 0.18695456979770098, 0.18923957478194653, 0.2981175702971416, 0.24944309371380124, 0.1406468119143186, 0.3294200634479776, 0.17120108790425115, 0.28248616584533215, 0.48908365950123567, 0.6094958590761, 0.6544264222405355, 0.2899814886249241, 0.5453506268139661, 0.36763381267556094, 0.4436084820302868, 0.49875119412574753, 0.5928333162885812, 0.32402022101522454, 0.25792803367766615, 0.2829233453807415, 0.4076522537381234, 0.2622079541846637, 0.32710742616195454, 0.3432538164896639, 0.23390776228649435, 0.30096566980124007, 0.25365634866961995, 0.18875259829404345, 0.267932015646579, 0.20209338773698615, 0.21300809713335944, 0.23998942892561703, 0.24237800148333477, 0.22644071122299358, 0.246895492041457, 0.2407489637587219, 0.7381993016559744, 0.24476307319944546, 0.7596076646020812, 0.238690415179029, 0.2126182009475257, 0.21898585008086835, 0.21703275509314346, 0.2161411307226221, 0.8804029305720451, 0.878470043102824, 0.154132523530214, 0.882908229087604, 0.19873057126016025, 0.19745108635270425, 0.8419510619466086, 0.16897779637434018, 0.8931557330242321, 0.7672084987916588, 0.1683188460864965, 0.2078508423927442, 0.7558544886253658, 0.16710346584180424, 0.2089793176375876, 0.2082782456388691, 0.7949888960681359, 0.8308106177184313, 0.19654164232329197, 0.19487711470545, 0.19335537842386907, 0.19706767001895187, 0.21178877924311013, 0.21062142901655512, 0.20665390909466186, 0.18865726577078357, 0.18353189923188806, 0.09784604018523879, 0.09464449116249218, 0.09282370571545195, 0.08584127053615209, 0.08156069572947378, 0.089102552583189, 0.13650074412598556, 0.07560180769216351, 0.07904243372709896]}, "mutation_prompt": null}
{"id": "a6309b63-6bb4-4ca3-9130-85a197427af6", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30  # Slightly reduced initial population for faster adaptation\n        self.final_population_size = 22  # More aggressive population resizing\n        self.inertia_weight = 0.57  # Further reduced inertia weight for quicker convergence\n        self.cognitive_coeff = 1.9  # Further increased to enhance exploration\n        self.social_coeff = 1.2  # Further decreased to refine balance\n        self.mutation_factor_init = 0.85  # Slightly adjusted mutation factor for better diversity\n        self.cross_prob = 0.95  # Slightly reduced cross probability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.initial_population_size, dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.initial_population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        eval_count = 0\n        inertia_dampening = 0.98  # Faster dampening\n        mutation_factor_change = (self.mutation_factor_init - 0.52) / self.budget\n\n        while eval_count < self.budget:\n            population_size = self.initial_population_size - int(\n                (eval_count / self.budget) * (self.initial_population_size - self.final_population_size))\n\n            for i in range(population_size):\n                score = func(self.population[i])\n                eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n                if eval_count >= self.budget:\n                    break\n\n            r1 = np.random.rand(population_size, self.dim)\n            r2 = np.random.rand(population_size, self.dim)\n            cognitive_component = self.cognitive_coeff * r1 * (self.personal_best_positions[:population_size] - self.population[:population_size])\n            social_component = self.social_coeff * r2 * (self.global_best_position - self.population[:population_size])\n            self.velocities[:population_size] = (self.inertia_weight * self.velocities[:population_size]) + cognitive_component + social_component\n            self.population[:population_size] = self.population[:population_size] + self.velocities[:population_size]\n\n            self.population[:population_size] = np.clip(self.population[:population_size], self.lower_bound, self.upper_bound)\n\n            for i in range(population_size):\n                indices = np.random.choice(np.delete(np.arange(population_size), i), 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = a + (self.mutation_factor_init - mutation_factor_change * eval_count) * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cross_prob:\n                        trial[j] = mutant[j]\n\n                trial_score = func(trial)\n                eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.population[i] = trial\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial\n                if eval_count >= self.budget:\n                    break\n\n            self.inertia_weight *= inertia_dampening\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedHybridPSODE", "description": "EnhancedHybridPSODE with refined adaptation strategies and quicker inertia weight reduction for improved convergence speed.", "configspace": "", "generation": 70, "fitness": 0.2958384413541045, "feedback": "The algorithm EnhancedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.27.", "error": "", "parent_id": "af9c7347-3908-47a4-bd67-990d4874ebde", "metadata": {"aucs": [0.8953146099945177, 0.8832313400244779, 0.8895121290982587, 0.8876997874991551, 0.8909034439489415, 0.8842642741364702, 0.889002750375496, 0.8881201762057279, 0.8822111235569637, 0.7710543605908923, 0.7863551331736097, 0.5931655060846013, 0.7973303049035199, 0.7857070594564216, 0.7769202149633696, 0.7912677078413265, 0.7555758063711661, 0.7445243213522073, 0.12901630516705387, 0.13794379232070075, 0.17307710623555816, 0.11893425625750564, 0.18058695575764083, 0.15479434622084887, 0.12183116780662873, 0.14204173333902037, 0.1725654304848494, 0.1349989173141697, 0.10761625821019971, 0.11144772158775962, 0.1337157340646543, 0.140159233451012, 0.13812754438692953, 0.1401110910780059, 0.1276905610452419, 0.13888186719439655, 0.9809751149053982, 0.9795733406066947, 0.9863752465634045, 0.9701686006302294, 0.9847437345710702, 0.9657183234293761, 0.9860388740223922, 0.9769114778107272, 0.9756440093871386, 0.49693872545011886, 0.5576317410739783, 0.7071999322784641, 0.1508028122392383, 0.15202811300337493, 0.4279121865342974, 0.08764662743821339, 0.08792237275463155, 0.46182032496740544, 0.22807516607122247, 0.3723243537760157, 0.2231078671055693, 0.21353832142648388, 0.27882304431926463, 0.2130193478702228, 0.23178739316261443, 0.22101271849701454, 0.6894160804375327, 0.12963572097748688, 0.16996741031547502, 0.166620855472998, 0.19263689172695508, 0.1294423981923981, 0.19443577499673448, 0.1677790456774768, 0.12125674034038914, 0.12956518632803216, 0.12153037549133372, 0.13055824185014264, 0.15883744886088647, 0.1306838663459179, 0.2791806239051595, 0.15831475186118638, 0.18287468257960604, 0.1797404751304439, 0.16591821815948427, 9.999999999998899e-05, 0.041255688343349584, 0.04734351403593973, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.024232171201188257, 0.05391336475197006, 0.07116459224822169, 0.15220309112019492, 0.08660071716702478, 0.022123485023927802, 0.05240207362936833, 0.08426465507251868, 0.08889041787998686, 0.055128279739646624, 0.0486269791060715, 0.10510978077818778, 0.11548815836666126, 0.07824901972572973, 0.0783225981463136, 0.22125639107166506, 0.0987054746359427, 0.08127366296017058, 0.07356064751018854, 0.1723833799237795, 0.22856057491882154, 0.16823590996162607, 0.17395517411323158, 0.04450922833055415, 0.21179548628839817, 0.0488397150866674, 0.3488306307899064, 0.20677503976672595, 0.5346677216384714, 0.5962630147901176, 0.5727798872003511, 0.6314030741441776, 0.5369484245489959, 0.5816446430686917, 0.5843038463006037, 0.5645644613793389, 0.592252864890686, 0.09948788348060622, 0.08557402738971065, 0.11899984545754783, 0.15643070218270005, 0.08352676350781985, 0.1816871574852713, 0.0964353512697651, 0.08998836596953008, 0.13570091626032532, 0.19582629743564484, 0.21445573574720034, 0.2210026493066798, 0.18762635997289367, 0.23864809359461092, 0.22462649365620235, 0.20018727782284462, 0.2077628690852551, 0.18861466244761527, 0.42494257999109364, 0.37096914863217845, 0.3350954012455579, 0.5844746654354096, 0.3818927759347478, 0.5506154812282525, 0.4403420909226894, 0.49557341201050564, 0.21309393706698188, 0.21563262614710255, 0.21194012157150632, 0.3520468751579511, 0.17369726292351328, 0.19344257828029543, 0.2659554811910112, 0.2825788176070281, 0.29899495464459624, 0.2241167024600812, 0.22597393457332027, 0.19639108723791954, 0.22714500068283627, 0.20472861463370873, 0.18588847031290678, 0.20045286314379718, 0.22500865625161792, 0.24433358336352506, 0.2257288626467695, 0.18808363391621574, 0.2248571370991782, 0.22117635830975668, 0.22386873094122306, 0.19344803197761617, 0.2237559071507882, 0.21132438717172486, 0.1918488575328694, 0.2098126605772236, 0.1650065668099684, 0.18714654852396795, 0.15321438917824237, 0.8988013654411018, 0.20145069286977224, 0.19940483885438132, 0.09956135504878516, 0.17013643947391743, 0.8932740172536863, 0.45793214194954857, 0.1567872943596471, 0.19077582405508697, 0.1275684345657594, 0.5245491392431245, 0.21025336655466131, 0.104198643811094, 0.2105128879026199, 0.33331898252030556, 0.18252833585496553, 0.19031902739651751, 0.184995860859842, 0.20595045024785708, 0.20212046233991454, 0.18601584228684032, 0.18453450739382082, 0.20094344506075945, 0.1821253635063963, 0.08434108945197882, 0.09746425777463263, 0.09236653467056966, 0.08945314867064103, 0.09606157147160577, 0.09159802309865261, 0.08013843686168132, 0.1175090378597321, 0.0916693975198486]}, "mutation_prompt": null}
{"id": "9f25627e-74e1-45e0-ac89-94bc6cfb0396", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 32\n        self.final_population_size = 24\n        self.inertia_weight = 0.57  # Reduced for quicker convergence\n        self.cognitive_coeff = 1.9  # Enhanced exploration\n        self.social_coeff = 1.4  # Improved social learning\n        self.mutation_factor_init = 0.85  # Adjusted for better diversity\n        self.cross_prob = 0.97  # More aggressive trial acceptance\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.initial_population_size, dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.initial_population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        eval_count = 0\n        inertia_dampening = 0.995  # Slightly slower dampening for stability\n        mutation_factor_change = (self.mutation_factor_init - 0.5) / self.budget\n\n        while eval_count < self.budget:\n            population_size = self.initial_population_size - int(\n                (eval_count / self.budget) * (self.initial_population_size - self.final_population_size))\n\n            for i in range(population_size):\n                score = func(self.population[i])\n                eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n                if eval_count >= self.budget:\n                    break\n\n            r1 = np.random.rand(population_size, self.dim)\n            r2 = np.random.rand(population_size, self.dim)\n            cognitive_component = self.cognitive_coeff * r1 * (self.personal_best_positions[:population_size] - self.population[:population_size])\n            social_component = self.social_coeff * r2 * (self.global_best_position - self.population[:population_size])\n            self.velocities[:population_size] = (self.inertia_weight * self.velocities[:population_size]) + cognitive_component + social_component\n            self.population[:population_size] = self.population[:population_size] + self.velocities[:population_size]\n\n            self.population[:population_size] = np.clip(self.population[:population_size], self.lower_bound, self.upper_bound)\n\n            for i in range(population_size):\n                indices = np.random.choice(np.delete(np.arange(population_size), i), 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = a + (self.mutation_factor_init - mutation_factor_change * eval_count) * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cross_prob:\n                        trial[j] = mutant[j]\n\n                trial_score = func(trial)\n                eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.population[i] = trial\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial\n                if eval_count >= self.budget:\n                    break\n\n            self.inertia_weight *= inertia_dampening\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedHybridPSODE", "description": "A refined EnhancedHybridPSODE with improved exploration-exploitation balance and adaptive parameters for faster convergence.", "configspace": "", "generation": 71, "fitness": 0.2984641078470399, "feedback": "The algorithm EnhancedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.26.", "error": "", "parent_id": "af9c7347-3908-47a4-bd67-990d4874ebde", "metadata": {"aucs": [0.8151115106995852, 0.8257560966564204, 0.8574197663713294, 0.8433124249156634, 0.8426431748976785, 0.7976790260207689, 0.8388757287565827, 0.1820059192684974, 0.8213703857223361, 0.6891734589608265, 0.6723852610821771, 0.5990396566725171, 0.06657770641907668, 0.6705505446444804, 0.6830980563716877, 0.05652360245597743, 0.6496820840852118, 0.6486686551859735, 0.1542064390672333, 0.13719249304017145, 0.14506725961657774, 0.09291528563755325, 0.1477735631876983, 0.15122881338435668, 0.1564978702974913, 0.13212575688160488, 0.12397893462349863, 0.1380830096328287, 0.10141445227686197, 0.10808468432942753, 0.1555874413234909, 0.11232928313510926, 0.1239775754729282, 0.14607637297879394, 0.14414223639106927, 0.11096569463029793, 0.9841225540202823, 0.9789057282166552, 0.9858108913257696, 0.9846242883549805, 0.9770803150801335, 0.9767770219121533, 0.9848677997399958, 0.9792192109334305, 0.9729318728777524, 0.6480141473864756, 0.6448911261923723, 0.05987642105981472, 0.665187135918913, 0.6261875668284296, 0.1491309717817898, 0.6485944743557475, 0.08829058387983313, 0.6572103248092014, 0.804747132157269, 0.21985765725698592, 0.8371408347146162, 0.2682610918622258, 0.20991671149940305, 0.204298013865999, 0.22585063321122256, 0.3599165590709954, 0.22869422620294588, 0.36571921208680946, 0.1822417251586954, 0.11380107663937633, 0.19518165825035338, 0.10072430992393511, 0.23140920224237504, 0.2048136771761595, 0.2006602662948349, 0.13035288396160127, 0.18419030113576496, 0.05312695182800964, 0.20580043475906873, 0.12798430595488552, 0.2144999816127815, 0.18382953254695333, 0.4450211137310094, 0.03274842750327678, 0.240531087590931, 0.001100497392853006, 0.006162077584433434, 0.007829582166297366, 9.999999999998899e-05, 9.999999999998899e-05, 0.00010176767217362492, 9.999999999998899e-05, 0.010695478270693837, 9.999999999998899e-05, 0.12425063284088156, 0.07155743103462775, 0.08060434729725074, 0.14294563142335848, 0.0302953235268294, 0.049417010434159026, 0.1360585697739991, 0.051883303663574964, 0.06376026509899202, 0.04560760108473383, 0.16756635836500278, 0.1422970845538637, 0.10592472493114968, 0.16570738478377756, 0.11747683778307205, 0.0940135615287121, 0.14330017370914372, 0.0705171013184216, 0.18259745780791903, 9.999999999998899e-05, 0.27847725540392454, 0.14506273932793834, 0.06853332189180661, 0.24948611002412568, 0.12011263850684284, 9.999999999998899e-05, 0.08859655174852976, 0.542282110112768, 0.5130302631461678, 0.5317440605762622, 0.5367396700344489, 0.5403878185190549, 0.5387806625467289, 0.555747498560641, 0.5633285622688007, 0.6219597463536788, 0.16900839534336487, 0.09971568116763097, 0.09509973036219199, 0.11591911325333148, 0.14397422938799587, 0.14387634786681813, 0.13489416272117394, 0.6402272515165621, 0.11921084054718101, 0.2728092324858312, 0.1931791577138503, 0.25323831405743225, 0.18076051756546496, 0.32664816972339095, 0.30384548699700076, 0.2588784768655661, 0.14639276432092885, 0.30077066168848476, 0.37614625568435067, 0.3514220871845445, 0.30224485229424447, 0.3784204358231724, 0.36099338611329357, 0.44916027317759133, 0.50541621989093, 0.530172109163383, 0.5210139643781602, 0.26659979526890243, 0.2634623245960601, 0.26432249553444775, 0.2806366198024982, 0.20463172289360365, 0.30515822691068073, 0.27158466507847145, 0.38343928281584394, 0.2377621453683313, 0.22232961518333694, 0.2005102522634793, 0.2100632665164599, 0.25551009752846787, 0.1864215328930069, 0.20897197047131044, 0.24851929371833614, 0.20985089578046467, 0.202319506439956, 0.23123009009640683, 0.19798897471797106, 0.20286237426051956, 0.2191244263382287, 0.1879737252549275, 0.22273618153687924, 0.21116349320158778, 0.22076491282787003, 0.20246612699956867, 0.16463987446394368, 0.8515661194862849, 0.1526386247659116, 0.8727113535951647, 0.19913416701267894, 0.19822107889955132, 0.09920720597665111, 0.16849413248922396, 0.894074770990726, 0.7152983122509788, 0.20972869550998074, 0.16602356866147527, 0.7457398562471815, 0.16539079279814684, 0.2049376890064477, 0.1276446175843703, 0.20668554093004166, 0.10401632880783851, 0.18396387942249426, 0.19766091375274497, 0.20365780826083835, 0.20036983880396242, 0.19547948883809063, 0.18818748345219904, 0.19829914812149352, 0.21304964411617588, 0.19187158420631745, 0.08946509162385974, 0.07634698887842839, 0.08725247695279814, 0.09224479063837976, 0.07533192888744011, 0.09509490507036333, 0.10916098312672473, 0.12138979098629721, 0.08032480768029182]}, "mutation_prompt": null}
{"id": "ed938359-9b8b-42ce-9ab6-c1f840a66a92", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 32  # Slightly increased initial population\n        self.final_population_size = 24  # More dynamic population resizing\n        self.inertia_weight = 0.59  # Further reduced inertia weight for quicker convergence\n        self.cognitive_coeff = 1.8  # Increased to further enhance exploration\n        self.social_coeff = 1.3  # Slightly decreased to improve balance\n        self.mutation_factor_init = 0.88  # Adjusted mutation factor for diversity\n        self.cross_prob = 0.96  # Higher cross probability for more aggressive trial acceptance\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.initial_population_size, dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.initial_population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        eval_count = 0\n        inertia_dampening = 0.99  # Adjusted for slightly faster dampening\n        mutation_factor_change = (self.mutation_factor_init - 0.5) / self.budget\n\n        while eval_count < self.budget:\n            population_size = self.initial_population_size - int(\n                (eval_count / self.budget) * (self.initial_population_size - self.final_population_size))\n\n            for i in range(population_size):\n                score = func(self.population[i])\n                eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n                if eval_count >= self.budget:\n                    break\n\n            r1 = np.random.rand(population_size, self.dim)\n            r2 = np.random.rand(population_size, self.dim)\n            cognitive_component = self.cognitive_coeff * r1 * (self.personal_best_positions[:population_size] - self.population[:population_size])\n            social_component = self.social_coeff * r2 * (self.global_best_position - self.population[:population_size])\n            self.velocities[:population_size] = (self.inertia_weight * self.velocities[:population_size]) + cognitive_component + social_component\n            self.population[:population_size] = self.population[:population_size] + self.velocities[:population_size]\n\n            self.population[:population_size] = np.clip(self.population[:population_size], self.lower_bound, self.upper_bound)\n\n            for i in range(population_size):\n                indices = np.random.choice(np.delete(np.arange(population_size), i), 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = a + (self.mutation_factor_init - mutation_factor_change * eval_count) * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cross_prob:\n                        trial[j] = mutant[j]\n\n                trial_score = func(trial)\n                eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.population[i] = trial\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial\n                if eval_count >= self.budget:\n                    break\n\n            self.inertia_weight *= inertia_dampening\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedHybridPSODE", "description": "EnhancedHybridPSODE with dynamic parameter tuning and adaptive population control for faster convergence.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "af9c7347-3908-47a4-bd67-990d4874ebde", "metadata": {"aucs": [0.854841170199753, 0.8337434860933706, 0.8469967212274282, 0.8455483575894931, 0.8180411099900293, 0.8538268412181504, 0.8661472530299321, 0.8586874660363351, 0.8309962951446832, 0.7294235129780255, 0.6998937295171335, 0.6094117259358, 0.7323993392336852, 0.7178626996713835, 0.7527717430435938, 0.7303553160756826, 0.7398023539588414, 0.7345810602280723, 0.14931063233199515, 0.13351555112136448, 0.6622369060538811, 0.14066429175160333, 0.1726157421192509, 0.13536244333222003, 0.16927292151669604, 0.17310903385891174, 0.16665051046678891, 0.10286767970176403, 0.11062674053789101, 0.09841548178142223, 0.11766048483176039, 0.13749285478756756, 0.1497628696663631, 0.12877821416404456, 0.10536676396505973, 0.14711824380142302, 0.9856512933902406, 0.9787812971815051, 0.9884286877792379, 0.9839714483074401, 0.9785587651669921, 0.9797841168656637, 0.9905617241107126, 0.9770933132040401, 0.9833577911084052, 0.7048655414793028, 0.7211467168240129, 0.7052216937557363, 0.7191710474747863, 0.14908004501186256, 0.7445236695618853, 0.7205652174423838, 0.5511206013439216, 0.6527132167092512, 0.3481079237327044, 0.2220022876779414, 0.22260963171491, 0.2773721531139688, 0.8106141678517857, 0.193143748525206, 0.7282030748672175, 0.2380711802780806, 0.1150872978406785, 0.15842663143275082, 0.12928270349161397, 0.1819346820411205, 0.16708296455829608, 0.20992905560266106, 0.12237661338006744, 0.3351147961480979, 0.19017807601288228, 0.21338139704086945, 0.18076589346594996, 0.13757489068267315, 0.22643758141871184, 0.18454500747880243, 0.24556725003162827, 0.18134559209726409, 0.22223500435779941, 0.13360190580985276, 0.12530423963151405, 9.999999999998899e-05, 0.04106590289391676, 0.009052554914146471, 9.999999999998899e-05, 0.035304986290289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07486847503284044, 0.07747999204176736, 0.03671692122265646, 0.12597768691781308, 0.08375568218519003, 9.999999999998899e-05, 0.025237010735392862, 0.09410909002513912, 0.0728437426819526, 0.042060846996438195, 0.046510822810082564, 0.07634599429344835, 0.1226496143325938, 0.09744350257911849, 0.14932735382092965, 0.07586047305840182, 0.2842119416221408, 0.08389114588004398, 0.08772702619431327, 0.06467686522928273, 9.999999999998899e-05, 0.1307702082894382, 0.00630684225609679, 0.20421519971616386, 0.08524348655987957, 0.19106498023883534, 0.04781213433341358, 0.09314857491772333, 0.5185871615500623, 0.5649049736705083, 0.5689980628370421, 0.5514152013975806, 0.5490509555687053, 0.20790007435716462, 0.5973916126254126, 0.6530010078799888, 0.5781118929648357, 0.08304826450485725, 0.07600267204559463, 0.11491859562690787, 0.12362571842962733, 0.13043972677666205, 0.13716767684518238, 0.12653952287696635, 0.13657113960499223, 0.09709974675359878, 0.14374469357949093, 0.18695456979770098, 0.18923957478194653, 0.2981175702971416, 0.24944309371380124, 0.1406468119143186, 0.3294200634479776, 0.17120108790425115, 0.28248616584533215, 0.48908365950123567, 0.6094958590761, 0.6544264222405355, 0.2899814886249241, 0.5453506268139661, 0.36763381267556094, 0.4436084820302868, 0.49875119412574753, 0.5928333162885812, 0.32402022101522454, 0.25792803367766615, 0.2829233453807415, 0.4076522537381234, 0.2622079541846637, 0.32710742616195454, 0.3432538164896639, 0.23390776228649435, 0.30096566980124007, 0.25365634866961995, 0.18875259829404345, 0.267932015646579, 0.20209338773698615, 0.21300809713335944, 0.23998942892561703, 0.24237800148333477, 0.22644071122299358, 0.246895492041457, 0.2407489637587219, 0.7381993016559744, 0.24476307319944546, 0.7596076646020812, 0.238690415179029, 0.2126182009475257, 0.21898585008086835, 0.21703275509314346, 0.2161411307226221, 0.8804029305720451, 0.878470043102824, 0.154132523530214, 0.882908229087604, 0.19873057126016025, 0.19745108635270425, 0.8419510619466086, 0.16897779637434018, 0.8931557330242321, 0.7672084987916588, 0.1683188460864965, 0.2078508423927442, 0.7558544886253658, 0.16710346584180424, 0.2089793176375876, 0.2082782456388691, 0.7949888960681359, 0.8308106177184313, 0.19654164232329197, 0.19487711470545, 0.19335537842386907, 0.19706767001895187, 0.21178877924311013, 0.21062142901655512, 0.20665390909466186, 0.18865726577078357, 0.18353189923188806, 0.09784604018523879, 0.09464449116249218, 0.09282370571545195, 0.08584127053615209, 0.08156069572947378, 0.089102552583189, 0.13650074412598556, 0.07560180769216351, 0.07904243372709896]}, "mutation_prompt": null}
{"id": "89c3ae96-f889-4c4d-971a-c6fa4615e56c", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 32\n        self.final_population_size = 24\n        self.inertia_weight = 0.57  # Further reduced inertia weight\n        self.cognitive_coeff = 1.9  # Slightly increased cognitive coefficient\n        self.social_coeff = 1.2  # Further decreased social coefficient\n        self.mutation_factor_init = 0.89  # Increased mutation factor for diversity\n        self.cross_prob = 0.97  # Higher cross probability for aggressive exploration\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.initial_population_size, dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.initial_population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        eval_count = 0\n        inertia_dampening = 0.985  # Fine-tuned for balance\n        mutation_factor_change = (self.mutation_factor_init - 0.5) / self.budget\n\n        while eval_count < self.budget:\n            population_size = self.initial_population_size - int(\n                (eval_count / self.budget) * (self.initial_population_size - self.final_population_size))\n\n            for i in range(population_size):\n                score = func(self.population[i])\n                eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n                if eval_count >= self.budget:\n                    break\n\n            r1 = np.random.rand(population_size, self.dim)\n            r2 = np.random.rand(population_size, self.dim)\n            cognitive_component = self.cognitive_coeff * r1 * (self.personal_best_positions[:population_size] - self.population[:population_size])\n            social_component = self.social_coeff * r2 * (self.global_best_position - self.population[:population_size])\n            self.velocities[:population_size] = (self.inertia_weight * self.velocities[:population_size]) + cognitive_component + social_component\n            self.population[:population_size] = self.population[:population_size] + self.velocities[:population_size]\n\n            self.population[:population_size] = np.clip(self.population[:population_size], self.lower_bound, self.upper_bound)\n\n            for i in range(population_size):\n                indices = np.random.choice(np.delete(np.arange(population_size), i), 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = a + (self.mutation_factor_init - mutation_factor_change * eval_count) * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cross_prob:\n                        trial[j] = mutant[j]\n\n                trial_score = func(trial)\n                eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.population[i] = trial\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial\n                if eval_count >= self.budget:\n                    break\n\n            self.inertia_weight *= inertia_dampening\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedHybridPSODE", "description": "Adjusted EnhancedHybridPSODE with fine-tuned inertia, adaptive mutation, and increased exploratory behavior for improved convergence.", "configspace": "", "generation": 73, "fitness": 0.3236562341509497, "feedback": "The algorithm EnhancedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.29.", "error": "", "parent_id": "af9c7347-3908-47a4-bd67-990d4874ebde", "metadata": {"aucs": [0.8821291776135185, 0.8627276796908077, 0.8738092062949984, 0.8796947175271643, 0.8711219503192558, 0.8797793772299084, 0.8545396389433386, 0.8484092711334871, 0.8587024388960367, 0.7777142609797827, 0.6399912293025645, 0.07098315242141107, 0.728788335428274, 0.7274555555346434, 0.7731347774033622, 0.7216714205690042, 0.7559157540009822, 0.5591983018515909, 0.1769217122356218, 0.16731603334803435, 0.12126543288970737, 0.14411371068405332, 0.06848340193646507, 0.13706427032987922, 0.11759146752948146, 0.6824816356143633, 0.11355667597929842, 0.1068704605983759, 0.09511556213954919, 0.09103471958300757, 0.695622116063475, 0.1768232363741059, 0.15271430897725602, 0.10929782631635332, 0.10780603121495391, 0.10680768699394572, 0.9834422059417688, 0.9780107756091906, 0.9882641050486318, 0.9838101533880467, 0.9725026697631554, 0.968694132167421, 0.9851476893280661, 0.9757027491653478, 0.9774621166217792, 0.7224461499086564, 0.7083650864503035, 0.6553551686561948, 0.463601109307309, 0.7066816837073504, 0.5649233749996928, 0.7753093489415374, 0.4437081261516379, 0.5996804075042568, 0.8702566192076753, 0.2231808335304427, 0.8066064179139862, 0.2760435703854929, 0.37130332629166607, 0.2767389234661548, 0.22913116644643838, 0.2101578029000788, 0.22964028256162206, 0.1867700337248983, 0.19322882226178784, 0.15563074264570953, 0.1823782693210364, 0.1179967998789152, 0.17258914033373185, 0.12603051980696578, 0.12265249961913527, 0.19458711676266283, 0.2103546020152135, 0.12474208603710069, 0.18194518822674277, 0.13007695565330557, 0.12841941685924263, 0.19603081479699158, 0.1777301862758428, 9.999999999998899e-05, 0.12818840176028512, 0.0028309442680770625, 0.044188274595280186, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08079791935476044, 0.08848384059181391, 0.04169361466546673, 0.12843259890654535, 0.07655753616024719, 0.03900041451525116, 0.01809182958893729, 0.07689655673969265, 0.07656280630096757, 0.05023336532351619, 0.04844556079824924, 0.0634082688390124, 0.1008363911131741, 0.11626998304521607, 0.07503216499640752, 0.0754162716124811, 9.999999999998899e-05, 0.079318380491336, 0.07777132094826389, 0.09844209200903897, 0.09613516481767115, 0.20404249314246503, 0.08609330403052973, 0.10294745925351145, 0.0582154055989349, 0.09166660724063491, 0.056544715536774315, 0.09082354479489219, 0.6622283585809493, 0.5322833699355348, 0.5479422414888115, 0.5865849598567017, 0.5525352750477335, 0.20800263091615356, 0.6383348038567407, 0.5719721171758017, 0.570069060021897, 0.0783130072301006, 0.1147076569337605, 0.10405724349356937, 0.15590024212306786, 0.15723054304081396, 0.11031798386006153, 0.06955447772974854, 0.13851686706331945, 0.14013306015839266, 0.3309495892940991, 0.18415387602040922, 0.17335197672259905, 0.1720748604744451, 0.2198010423356207, 0.1502173869547867, 0.17367484483249973, 0.21396757204237538, 0.23882771107290746, 0.4822623471511158, 0.29926208705655466, 0.5643686150200181, 0.35828070143560886, 0.2561345180156437, 0.3544364368165458, 0.5718178391122666, 0.5891252598684652, 0.4537800830279324, 0.3012799287952903, 0.2607152317414181, 0.42226780377209705, 0.32522020655130945, 0.15867744682499907, 0.2847298221367912, 0.3302172616321586, 0.23400329022002586, 0.1986488507000017, 0.2186718946154399, 0.23637384637250802, 0.2090646035914714, 0.22230162652311303, 0.20040282169191104, 0.21413129863853375, 0.23848461088041273, 0.23312555085443631, 0.2522948724530324, 0.19239819246944334, 0.24064714051953606, 0.1956422355393831, 0.22415288853715698, 0.241339228566831, 0.20485976880501944, 0.189540738739174, 0.7038594968689283, 0.1867277187681845, 0.9014462800979102, 0.9051963444690502, 0.15330400046604697, 0.9104991257607964, 0.20062238301911495, 0.1998368592041192, 0.15831447250778252, 0.1688802739779499, 0.8967284144624564, 0.7166380939940142, 0.2117437267063037, 0.6001025642343163, 0.8098544599814388, 0.16865878759331532, 0.5680450385418334, 0.20584338328250873, 0.8373333609986978, 0.20433762768370245, 0.17428423791033143, 0.2040511885078644, 0.19264905000709542, 0.19122832154999192, 0.19981215959651932, 0.20235046641721632, 0.1809846775026538, 0.18285224977119774, 0.2189873626618074, 0.084992294797132, 0.0976317997724917, 0.08379874677598564, 0.08888136211828701, 0.09006872471471472, 0.08465956560441024, 0.12421819521514044, 0.09210228473480453, 0.09571071481980054]}, "mutation_prompt": null}
{"id": "634798ce-4bfc-4982-b540-d2149aec3420", "solution": "import numpy as np\n\nclass RefinedEnhancedPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 32\n        self.final_population_size = 24\n        self.inertia_weight = 0.6  # Slightly increased for better exploration\n        self.cognitive_coeff = 1.85  # Increased to boost self-recognition\n        self.social_coeff = 1.28  # Decreased slightly for balanced influence\n        self.mutation_factor_init = 0.9  # Increased for more aggressive mutation early on\n        self.cross_prob = 0.95  # Minor reduction for more conservative trial acceptance\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.initial_population_size, dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.initial_population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        eval_count = 0\n        inertia_dampening = 0.98  # Adjusted for gradual inertia reduction\n        mutation_factor_change = (self.mutation_factor_init - 0.55) / self.budget\n\n        while eval_count < self.budget:\n            population_size = self.initial_population_size - int(\n                (eval_count / self.budget) * (self.initial_population_size - self.final_population_size))\n\n            for i in range(population_size):\n                score = func(self.population[i])\n                eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n                if eval_count >= self.budget:\n                    break\n\n            r1 = np.random.rand(population_size, self.dim)\n            r2 = np.random.rand(population_size, self.dim)\n            cognitive_component = self.cognitive_coeff * r1 * (self.personal_best_positions[:population_size] - self.population[:population_size])\n            social_component = self.social_coeff * r2 * (self.global_best_position - self.population[:population_size])\n            self.velocities[:population_size] = (self.inertia_weight * self.velocities[:population_size]) + cognitive_component + social_component\n            self.population[:population_size] = self.population[:population_size] + self.velocities[:population_size]\n\n            self.population[:population_size] = np.clip(self.population[:population_size], self.lower_bound, self.upper_bound)\n\n            for i in range(population_size):\n                indices = np.random.choice(np.delete(np.arange(population_size), i), 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = a + (self.mutation_factor_init - mutation_factor_change * eval_count) * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cross_prob:\n                        trial[j] = mutant[j]\n\n                trial_score = func(trial)\n                eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.population[i] = trial\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial\n                if eval_count >= self.budget:\n                    break\n\n            self.inertia_weight *= inertia_dampening\n\n        return self.global_best_position, self.global_best_score", "name": "RefinedEnhancedPSODE", "description": "RefinedEnhancedPSODE with improved balance between exploration and exploitation through dynamic inertia and mutation adjustments.", "configspace": "", "generation": 74, "fitness": 0.3036944566377405, "feedback": "The algorithm RefinedEnhancedPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.28.", "error": "", "parent_id": "af9c7347-3908-47a4-bd67-990d4874ebde", "metadata": {"aucs": [0.8650464213558704, 0.8655802289359535, 0.866319394689247, 0.864537303430339, 0.8337746134760664, 0.8562963018269177, 0.8759252786557374, 0.8795439571709092, 0.8674032459218196, 0.7685585779310362, 0.6530480938833152, 0.03635925771673376, 0.7550935890993774, 0.04537695712893053, 0.5513368308853523, 0.7532915722372946, 0.7693451246521588, 0.737571256548178, 0.09872456359090542, 0.14248718645973935, 0.14092871557459552, 0.1544042325520939, 0.15219687956465877, 0.14916079414199468, 0.12193053814532373, 0.08530207556520031, 0.14091730913745726, 0.11056875143054823, 0.1679963347681298, 0.09566753812570172, 0.1499848971345089, 0.15061812189815282, 0.1799362270595133, 0.10527339812790759, 0.1278567743267549, 0.14760603366990632, 0.9857431736663742, 0.9779600193675133, 0.9884321553244241, 0.9839476287489012, 0.9750832658928261, 0.9793651925547183, 0.9905628195375544, 0.9794625670473092, 0.9849478311031771, 0.5373000861151351, 0.7741873212529103, 0.7322771572491915, 0.5938009283190746, 0.6088980235521331, 0.5342984530048669, 0.5482271692302962, 0.08524190298362011, 0.6325726506320294, 0.378752711228483, 0.33134216444511466, 0.16139061641262065, 0.278824024989324, 0.21555251622047966, 0.19388554996799345, 0.34580067040943185, 0.12412384915782082, 0.842650019569599, 0.11241749066815176, 0.12002669606306027, 0.2149004145553869, 0.17680169149980995, 0.13117748394031314, 0.1203205503842979, 0.21424544664564849, 0.16266390374782858, 0.19827378702668197, 0.18037406838219427, 0.12430597094609652, 0.23549960901165445, 0.12773753090580742, 0.1488772325678418, 0.12939904166640104, 0.1738048753606879, 0.09763906412518242, 0.2092983361542743, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001910365194822572, 0.021666446026213593, 0.014380475648612667, 0.03243988521963925, 0.09456966453241289, 0.14132542146082816, 0.10883695666771742, 0.10997501907936225, 0.0889637876520365, 9.999999999998899e-05, 0.03825757483826786, 0.12321474057214399, 0.10968452049387412, 0.15535688786974422, 0.04821136344110344, 9.999999999998899e-05, 0.05902091792733677, 0.13056377621551962, 0.09303452032686765, 0.0783011438885689, 0.09851844394661624, 0.07049679026028333, 0.07020091697051556, 0.24155048386595024, 0.04103440980877915, 0.10094739887799387, 0.022654589380703638, 0.17428518157130835, 0.08738979424881821, 0.11082464166235095, 0.04839333928277045, 0.0809132604195858, 0.5517962654795465, 0.4997113701149929, 0.5576997921783273, 0.5587999416496244, 0.5373520740334348, 0.20760046393406006, 0.5713916161657882, 0.5791371824029707, 0.5855474564181183, 0.0883407822572797, 0.11195288481211352, 0.1079176466940116, 0.1564522810414577, 0.1285176111303823, 0.12063818224986167, 0.13015286115739166, 0.14916122685225897, 0.10614515341754283, 0.20907869749145702, 0.22028939378731438, 0.17969583763929786, 0.23917996371881922, 0.3062513825256, 0.250323257781792, 0.27847438811221736, 0.1719128156792572, 0.31427666584687597, 0.3754837482378921, 0.43658116153147297, 0.2940109016947312, 0.32350429951491233, 0.5103881949030871, 0.31548373148134023, 0.5095423324360786, 0.5299234531210689, 0.37780349837903415, 0.22623783064447056, 0.2943226185776656, 0.2745603707846158, 0.16950799556142016, 0.18469891659240667, 0.22183320613034863, 0.27292458479638115, 0.4142571761551762, 0.22458029498527043, 0.21195194557143737, 0.19821090772406336, 0.18941889035849913, 0.22416764891753693, 0.2156029277180761, 0.20371516819827884, 0.222761643381716, 0.198506238475196, 0.24906383417965694, 0.20915809524615914, 0.18913619916549673, 0.22442138339507023, 0.24841739629244264, 0.2476889340510734, 0.2502539381831329, 0.2469895730382895, 0.18411830306316956, 0.19946224669865897, 0.16485497590068177, 0.8830524824214147, 0.153846601980268, 0.9037992093528374, 0.1986742971800718, 0.1976727032204897, 0.8754625222461945, 0.1695702485461128, 0.8999025854781024, 0.8559973626711583, 0.21176935441306266, 0.20684032384488182, 0.3493666996583843, 0.6096900798715623, 0.20938996151885858, 0.12796525935404768, 0.634116351959462, 0.10804766971728808, 0.2071612384992425, 0.18385870442522345, 0.18432264096621298, 0.1842037294973875, 0.18820908003144354, 0.1838531096299293, 0.1897252245148061, 0.18540559882602348, 0.20347450829441438, 0.0933965299324564, 0.11508071489597804, 0.09017579006081688, 0.08588414935664912, 0.08747904669021556, 0.08757630921135151, 0.09221857439940562, 0.0949518903588511, 0.08863556526623306]}, "mutation_prompt": null}
{"id": "afb185e0-4066-4e18-b920-10db990f3ca5", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 32\n        self.final_population_size = 24\n        self.inertia_weight = 0.58  # Slightly reduced for quicker convergence\n        self.cognitive_coeff = 1.85  # Further increased to enhance exploration\n        self.social_coeff = 1.35  # Adjusted for better balance\n        self.mutation_factor_init = 0.87  # Slightly adjusted for better diversity\n        self.cross_prob = 0.97  # Increased for more aggressive trials\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.initial_population_size, dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.initial_population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        eval_count = 0\n        inertia_dampening = 0.985  # Adjusted for slightly faster dampening\n        mutation_factor_change = (self.mutation_factor_init - 0.55) / self.budget\n\n        while eval_count < self.budget:\n            population_size = self.initial_population_size - int(\n                (eval_count / self.budget) * (self.initial_population_size - self.final_population_size))\n\n            for i in range(population_size):\n                score = func(self.population[i])\n                eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n                if eval_count >= self.budget:\n                    break\n\n            r1 = np.random.rand(population_size, self.dim)\n            r2 = np.random.rand(population_size, self.dim)\n            cognitive_component = self.cognitive_coeff * r1 * (self.personal_best_positions[:population_size] - self.population[:population_size])\n            social_component = self.social_coeff * r2 * (self.global_best_position - self.population[:population_size])\n            self.velocities[:population_size] = (self.inertia_weight * self.velocities[:population_size]) + cognitive_component + social_component\n            self.population[:population_size] = self.population[:population_size] + self.velocities[:population_size]\n\n            self.population[:population_size] = np.clip(self.population[:population_size], self.lower_bound, self.upper_bound)\n\n            for i in range(population_size):\n                indices = np.random.choice(np.delete(np.arange(population_size), i), 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = a + (self.mutation_factor_init - mutation_factor_change * eval_count) * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cross_prob:\n                        trial[j] = mutant[j]\n\n                trial_score = func(trial)\n                eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.population[i] = trial\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial\n                if eval_count >= self.budget:\n                    break\n\n            self.inertia_weight *= inertia_dampening\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedHybridPSODE", "description": "EnhancedHybridPSODE with fine-tuned inertia dampening and mutation factor adaptation for improved convergence speed.", "configspace": "", "generation": 75, "fitness": 0.30364136062555597, "feedback": "The algorithm EnhancedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.28.", "error": "", "parent_id": "af9c7347-3908-47a4-bd67-990d4874ebde", "metadata": {"aucs": [0.8616022369752763, 0.8587053903059079, 0.8721082349079695, 0.8567239741239594, 0.18212931576169067, 0.870645007484685, 0.8601179534263389, 0.8665947337559847, 0.8636736141483203, 0.7178397825036849, 0.7367211689305938, 0.7567798056987513, 0.7389861094194357, 0.04441029332264934, 0.7674669595342365, 0.7546612529845069, 0.7564097798224176, 0.7122352782318316, 0.17237510010177015, 0.15193498570486497, 0.13492613278181909, 0.1342566253268782, 0.11407535214478137, 0.1524511062169409, 0.17503500085984758, 0.14754244750685397, 0.12778727667385936, 0.1779142690520248, 0.12521667283423144, 0.10105084594290858, 0.13383923714720114, 0.13726394615304782, 0.15250184826281188, 0.09644644103285083, 0.13592777036284065, 0.14022400702933535, 0.9844320716422271, 0.9847775570725547, 0.9882958837326135, 0.9799836077508919, 0.9759603777704746, 0.9782696275550465, 0.9905588979703549, 0.9778780442614435, 0.9771723238323548, 0.11257829321457102, 0.7571163392316974, 0.7102470565944049, 0.5954171742457836, 0.15200762205756235, 0.1501274020335588, 0.7150523979148056, 0.08837695702279469, 0.6696303755416597, 0.22577863055552727, 0.7900325022037897, 0.18047665903579124, 0.2081943619891895, 0.18948243783289298, 0.8474604837413486, 0.12429751114317156, 0.2286648887731958, 0.22816587736452754, 0.11672285649490077, 0.2006034999359364, 0.1763551607859667, 0.16739341200296587, 0.1693489728824501, 0.14675116914156028, 0.17411627468141744, 0.16320238844059587, 0.2048400148992986, 0.16734617780342653, 0.11634221038692705, 0.19713956449452974, 0.19620859014060432, 0.15736423033078395, 0.22482661593365083, 0.2428052480259021, 9.999999999998899e-05, 0.2447174774761024, 9.999999999998899e-05, 0.029997085682124447, 0.010475402718154725, 9.999999999998899e-05, 0.01053356492085955, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00590681073785182, 0.0688344579741248, 0.06543947992197519, 0.0991504068215916, 0.08375951981578367, 0.001559939503922969, 0.031206624571763264, 0.14450034831385405, 0.06004091133083689, 0.03950228598554617, 0.054688528488667565, 0.22291902624938786, 0.11820643230848926, 0.10440797996977724, 0.09063897429536993, 0.12103313323674214, 0.13986910874743075, 0.07119538433614292, 0.08852206264285689, 0.16512645640298707, 0.047355723443174846, 0.3964445443959935, 0.006243196043437815, 0.1417717952903177, 0.011521989803079613, 0.13926038735111612, 0.045982816054841336, 0.0809253175766953, 0.5123461822379947, 0.5191345406853005, 0.5469769640816258, 0.5228765197776392, 0.5626909240843203, 0.20735902537932926, 0.6412540993408533, 0.5374064790770511, 0.5875774626034524, 0.11205497173326695, 0.10321646102336124, 0.15022991156414756, 0.1524765742283425, 0.12529208823886695, 0.1375277923336896, 0.1366785788542889, 0.11852720341854839, 0.11493275101012024, 0.18985242041967154, 0.2123358923488453, 0.2758068562694429, 0.18683038435282118, 0.2008608094631722, 0.19670763400422198, 0.1840628360129153, 0.21990822963541745, 0.2665591068889407, 0.49715929558164085, 0.3574781364650159, 0.48893025034997095, 0.2531926253066843, 0.33190566683351086, 0.37624397027144807, 0.4395188603661704, 0.6117156956122467, 0.2698080409177681, 0.3500075696995144, 0.26237318916325836, 0.3434547566389682, 0.3616708992439236, 0.19273746854662155, 0.3046071718468357, 0.28284271124575266, 0.32027318929911996, 0.2943035905179662, 0.22076237427651535, 0.14050146149194498, 0.20867703335635057, 0.20579140871406787, 0.2130531844151824, 0.18154170104169043, 0.22923193550938825, 0.21391146058581212, 0.19967696543816638, 0.2158078881044777, 0.7253232806159529, 0.20210937459922174, 0.19240438905276913, 0.7708241414517216, 0.2061794915587556, 0.20591755278736057, 0.18395297709897918, 0.18504650391009558, 0.8908896194800203, 0.16174939497978635, 0.15390398717080256, 0.8927673355685894, 0.19845360842390314, 0.1979880918868665, 0.8494801258616301, 0.168781600571012, 0.8944248892451953, 0.6774909421177304, 0.20840776757805335, 0.2077399838072299, 0.5095728745823858, 0.22307362916830964, 0.2085745429825162, 0.3854106526100579, 0.2106335735943352, 0.10436013685007128, 0.1901891344662079, 0.20700439321693187, 0.18820528122536495, 0.17677886150722133, 0.17084500001308256, 0.18833495282883583, 0.1907168801351259, 0.18913678562944813, 0.186524234102169, 0.09042760096079128, 0.08690118990121953, 0.09102328239867186, 0.08771222388670663, 0.08703449368306315, 0.09655988251733982, 0.1035946498396525, 0.08826896357191094, 0.10043554042606573]}, "mutation_prompt": null}
{"id": "cebb4828-ff2f-4f26-9b14-812cc6120fdb", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 32  # Slightly increased initial population\n        self.final_population_size = 24  # More dynamic population resizing\n        self.inertia_weight = 0.59  # Further reduced inertia weight for quicker convergence\n        self.cognitive_coeff = 1.8  # Increased to further enhance exploration\n        self.social_coeff = 1.3  # Slightly decreased to improve balance\n        self.mutation_factor_init = 0.88  # Adjusted mutation factor for diversity\n        self.cross_prob = 0.96  # Higher cross probability for more aggressive trial acceptance\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.initial_population_size, dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.initial_population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        eval_count = 0\n        inertia_dampening = 0.99  # Adjusted for slightly faster dampening\n        mutation_factor_change = (self.mutation_factor_init - 0.5) / self.budget\n\n        while eval_count < self.budget:\n            population_size = self.initial_population_size - int(\n                (eval_count / self.budget) * (self.initial_population_size - self.final_population_size))\n\n            for i in range(population_size):\n                score = func(self.population[i])\n                eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n                if eval_count >= self.budget:\n                    break\n\n            r1 = np.random.rand(population_size, self.dim)\n            r2 = np.random.rand(population_size, self.dim)\n            cognitive_component = self.cognitive_coeff * r1 * (self.personal_best_positions[:population_size] - self.population[:population_size])\n            social_component = self.social_coeff * r2 * (self.global_best_position - self.population[:population_size])\n            self.velocities[:population_size] = (self.inertia_weight * self.velocities[:population_size]) + cognitive_component + social_component\n            self.population[:population_size] = self.population[:population_size] + self.velocities[:population_size]\n\n            self.population[:population_size] = np.clip(self.population[:population_size], self.lower_bound, self.upper_bound)\n\n            for i in range(population_size):\n                indices = np.random.choice(np.delete(np.arange(population_size), i), 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = a + (self.mutation_factor_init - mutation_factor_change * eval_count) * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cross_prob:\n                        trial[j] = mutant[j]\n\n                trial_score = func(trial)\n                eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.population[i] = trial\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial\n                if eval_count >= self.budget:\n                    break\n\n            self.inertia_weight *= inertia_dampening\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedHybridPSODE", "description": "EnhancedHybridPSODE with dynamic parameter tuning and adaptive population control for faster convergence.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "af9c7347-3908-47a4-bd67-990d4874ebde", "metadata": {"aucs": [0.854841170199753, 0.8337434860933706, 0.8469967212274282, 0.8455483575894931, 0.8180411099900293, 0.8538268412181504, 0.8661472530299321, 0.8586874660363351, 0.8309962951446832, 0.7294235129780255, 0.6998937295171335, 0.6094117259358, 0.7323993392336852, 0.7178626996713835, 0.7527717430435938, 0.7303553160756826, 0.7398023539588414, 0.7345810602280723, 0.14931063233199515, 0.13351555112136448, 0.6622369060538811, 0.14066429175160333, 0.1726157421192509, 0.13536244333222003, 0.16927292151669604, 0.17310903385891174, 0.16665051046678891, 0.10286767970176403, 0.11062674053789101, 0.09841548178142223, 0.11766048483176039, 0.13749285478756756, 0.1497628696663631, 0.12877821416404456, 0.10536676396505973, 0.14711824380142302, 0.9856512933902406, 0.9787812971815051, 0.9884286877792379, 0.9839714483074401, 0.9785587651669921, 0.9797841168656637, 0.9905617241107126, 0.9770933132040401, 0.9833577911084052, 0.7048655414793028, 0.7211467168240129, 0.7052216937557363, 0.7191710474747863, 0.14908004501186256, 0.7445236695618853, 0.7205652174423838, 0.5511206013439216, 0.6527132167092512, 0.3481079237327044, 0.2220022876779414, 0.22260963171491, 0.2773721531139688, 0.8106141678517857, 0.193143748525206, 0.7282030748672175, 0.2380711802780806, 0.1150872978406785, 0.15842663143275082, 0.12928270349161397, 0.1819346820411205, 0.16708296455829608, 0.20992905560266106, 0.12237661338006744, 0.3351147961480979, 0.19017807601288228, 0.21338139704086945, 0.18076589346594996, 0.13757489068267315, 0.22643758141871184, 0.18454500747880243, 0.24556725003162827, 0.18134559209726409, 0.22223500435779941, 0.13360190580985276, 0.12530423963151405, 9.999999999998899e-05, 0.04106590289391676, 0.009052554914146471, 9.999999999998899e-05, 0.035304986290289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07486847503284044, 0.07747999204176736, 0.03671692122265646, 0.12597768691781308, 0.08375568218519003, 9.999999999998899e-05, 0.025237010735392862, 0.09410909002513912, 0.0728437426819526, 0.042060846996438195, 0.046510822810082564, 0.07634599429344835, 0.1226496143325938, 0.09744350257911849, 0.14932735382092965, 0.07586047305840182, 0.2842119416221408, 0.08389114588004398, 0.08772702619431327, 0.06467686522928273, 9.999999999998899e-05, 0.1307702082894382, 0.00630684225609679, 0.20421519971616386, 0.08524348655987957, 0.19106498023883534, 0.04781213433341358, 0.09314857491772333, 0.5185871615500623, 0.5649049736705083, 0.5689980628370421, 0.5514152013975806, 0.5490509555687053, 0.20790007435716462, 0.5973916126254126, 0.6530010078799888, 0.5781118929648357, 0.08304826450485725, 0.07600267204559463, 0.11491859562690787, 0.12362571842962733, 0.13043972677666205, 0.13716767684518238, 0.12653952287696635, 0.13657113960499223, 0.09709974675359878, 0.14374469357949093, 0.18695456979770098, 0.18923957478194653, 0.2981175702971416, 0.24944309371380124, 0.1406468119143186, 0.3294200634479776, 0.17120108790425115, 0.28248616584533215, 0.48908365950123567, 0.6094958590761, 0.6544264222405355, 0.2899814886249241, 0.5453506268139661, 0.36763381267556094, 0.4436084820302868, 0.49875119412574753, 0.5928333162885812, 0.32402022101522454, 0.25792803367766615, 0.2829233453807415, 0.4076522537381234, 0.2622079541846637, 0.32710742616195454, 0.3432538164896639, 0.23390776228649435, 0.30096566980124007, 0.25365634866961995, 0.18875259829404345, 0.267932015646579, 0.20209338773698615, 0.21300809713335944, 0.23998942892561703, 0.24237800148333477, 0.22644071122299358, 0.246895492041457, 0.2407489637587219, 0.7381993016559744, 0.24476307319944546, 0.7596076646020812, 0.238690415179029, 0.2126182009475257, 0.21898585008086835, 0.21703275509314346, 0.2161411307226221, 0.8804029305720451, 0.878470043102824, 0.154132523530214, 0.882908229087604, 0.19873057126016025, 0.19745108635270425, 0.8419510619466086, 0.16897779637434018, 0.8931557330242321, 0.7672084987916588, 0.1683188460864965, 0.2078508423927442, 0.7558544886253658, 0.16710346584180424, 0.2089793176375876, 0.2082782456388691, 0.7949888960681359, 0.8308106177184313, 0.19654164232329197, 0.19487711470545, 0.19335537842386907, 0.19706767001895187, 0.21178877924311013, 0.21062142901655512, 0.20665390909466186, 0.18865726577078357, 0.18353189923188806, 0.09784604018523879, 0.09464449116249218, 0.09282370571545195, 0.08584127053615209, 0.08156069572947378, 0.089102552583189, 0.13650074412598556, 0.07560180769216351, 0.07904243372709896]}, "mutation_prompt": null}
{"id": "ba6b4d05-6d94-484b-a1e3-4cc0c34a320b", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30  # Slightly decreased initial population\n        self.final_population_size = 22  # More dynamic population resizing\n        self.inertia_weight = 0.57  # Further reduced inertia weight for quicker convergence\n        self.cognitive_coeff = 1.9  # More increased to enhance exploration\n        self.social_coeff = 1.2  # Reduced to improve balance\n        self.mutation_factor_init = 0.85  # Adjusted mutation factor for diversity\n        self.cross_prob = 0.95  # Slightly reduced cross probability for selective trial acceptance\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.initial_population_size, dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.initial_population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        eval_count = 0\n        inertia_dampening = 0.98  # Adjusted for slightly faster dampening\n        mutation_factor_change = (self.mutation_factor_init - 0.5) / self.budget\n\n        while eval_count < self.budget:\n            population_size = self.initial_population_size - int(\n                (eval_count / self.budget) * (self.initial_population_size - self.final_population_size))\n\n            for i in range(population_size):\n                score = func(self.population[i])\n                eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n                if eval_count >= self.budget:\n                    break\n\n            r1 = np.random.rand(population_size, self.dim)\n            r2 = np.random.rand(population_size, self.dim)\n            cognitive_component = self.cognitive_coeff * r1 * (self.personal_best_positions[:population_size] - self.population[:population_size])\n            social_component = self.social_coeff * r2 * (self.global_best_position - self.population[:population_size])\n            self.velocities[:population_size] = (self.inertia_weight * self.velocities[:population_size]) + cognitive_component + social_component\n            self.population[:population_size] = self.population[:population_size] + self.velocities[:population_size]\n\n            self.population[:population_size] = np.clip(self.population[:population_size], self.lower_bound, self.upper_bound)\n\n            for i in range(population_size):\n                indices = np.random.choice(np.delete(np.arange(population_size), i), 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = a + (self.mutation_factor_init - mutation_factor_change * eval_count) * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cross_prob:\n                        trial[j] = mutant[j]\n\n                trial_score = func(trial)\n                eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.population[i] = trial\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial\n                if eval_count >= self.budget:\n                    break\n\n            self.inertia_weight *= inertia_dampening\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedHybridPSODE", "description": "EnhancedHybridPSODE with adaptive mutation and selective elitism for improved convergence speed.", "configspace": "", "generation": 77, "fitness": 0.29266061160883056, "feedback": "The algorithm EnhancedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.26.", "error": "", "parent_id": "af9c7347-3908-47a4-bd67-990d4874ebde", "metadata": {"aucs": [0.8982288108514825, 0.886157683382023, 0.8883273896266991, 0.8853337228338339, 0.8891126070752718, 0.8887744086657208, 0.8877211478570042, 0.8882018437340129, 0.8835599625470257, 0.7458177708274891, 0.7872902035032181, 0.729207267011013, 0.7963275475476058, 0.7636128322192516, 0.776733618515379, 0.7999377473057291, 0.7868539236782552, 0.047967089121337625, 0.1405927863222456, 0.1282085857457056, 0.11416257539217001, 0.11895861277724673, 0.18234216839561845, 0.15159473501833232, 0.18363645915155202, 0.11337252532743025, 0.17585434895711238, 0.13529818422934403, 0.10325741160808999, 0.11882998694499802, 0.12432223978025214, 0.09151922493472953, 0.16928677103863943, 0.09587302814265386, 0.12786220608470633, 0.13897377119364973, 0.9809747461552688, 0.9795723539521046, 0.9863751399222622, 0.9701672642613768, 0.984744282474534, 0.9657156201733192, 0.9860383800365341, 0.9769115853586555, 0.9756441036387883, 0.5033838443874319, 0.6866765496886305, 0.5516850931909294, 0.15091200584110698, 0.15209557778386917, 0.4879061883431325, 0.08344368487623055, 0.08792175679491243, 0.5895114263194807, 0.22810591000157743, 0.2225378377514936, 0.22279135803526628, 0.21358642771124137, 0.27906972529744023, 0.21299353947775435, 0.2248890390682463, 0.22033422281146509, 0.5005864256419741, 0.12908648406148526, 0.18330634591180284, 0.17418968497952314, 0.1953866370972246, 0.1297947133931575, 0.2054753414833974, 0.1960638586508071, 0.19719119979775113, 0.12846987570967117, 0.12205664572961794, 0.1302921133525713, 0.20005164197066683, 0.12825435701858368, 0.2821805457235993, 0.1707311453531556, 0.18552006524900433, 0.16563913238755523, 0.192027102679454, 9.999999999998899e-05, 0.06354784874123565, 0.0523743189547502, 0.00017669935800113112, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04937117168907279, 0.06401650842436224, 0.09997426910114482, 0.10785230273600466, 0.1059777704030237, 0.020366742352553646, 0.050504000702014884, 0.13978590921349054, 0.06323299056030096, 0.06005321216887438, 0.049169105032781935, 0.10617123110388349, 0.11554739739218622, 0.07829557886993588, 0.07813345602385202, 0.22437469798849996, 0.09971861246680414, 0.08169039930100153, 0.07472012362247138, 0.17726738229954841, 0.1358770017277975, 0.13564862604304995, 0.17308545437166778, 0.16507503803610546, 0.2371285124210757, 0.04883597709700194, 0.34892015165540646, 0.1758981643575671, 0.5460412411245732, 0.520543151653335, 0.564795190781269, 0.5887561113129278, 0.5846110403294962, 0.5538402154681741, 0.5827160078453408, 0.49639175840434024, 0.6205369508531702, 0.11249288411276881, 0.09660714089996036, 0.16132990141245196, 0.15653094101642473, 0.09883698322727397, 0.18164328519268946, 0.10535857056508269, 0.10824386872623526, 0.13907117511554967, 0.23135315500299514, 0.22855105534014586, 0.17824145059498064, 0.17722785337563596, 0.3020941703354517, 0.22780053618114793, 0.20037673358244057, 0.21528306874055558, 0.19354344229565035, 0.4279985014852885, 0.30412988376522876, 0.31492562134824, 0.32948147259098537, 0.32437602550688116, 0.400733463032486, 0.4603652377131152, 0.5363237854053035, 0.22380100233519717, 0.21150394394676708, 0.25565712347445013, 0.36276850382197967, 0.17139034828602784, 0.32439596925179015, 0.2222445272396557, 0.27926348592948136, 0.30906066871926974, 0.30998830897442575, 0.21059657941563426, 0.21624165508714166, 0.2110026286387663, 0.21131537324660976, 0.1899689917459133, 0.18673521277792526, 0.2038523854640505, 0.24678416814550963, 0.20111573066581545, 0.17837929894315696, 0.22468091376095645, 0.18803709998159324, 0.20689093108014212, 0.2454544226449965, 0.21072676404275403, 0.21135250168891329, 0.23824793828320312, 0.2097928466094945, 0.1643642084166771, 0.18714480691011248, 0.15321778352234727, 0.8991181211410093, 0.2014509583987657, 0.19940520917238513, 0.09956114814763983, 0.1701363731831108, 0.8989724243219572, 0.45972129794279826, 0.15679142505604615, 0.20090789489146765, 0.12756108871110605, 0.4398597891412812, 0.21025355838555504, 0.1041986475745913, 0.2105063761506013, 0.49020772242162525, 0.1914046521967009, 0.18878055331781374, 0.19508594231367937, 0.18548112732250222, 0.1873752358945101, 0.18836179395272534, 0.19022639486114135, 0.1927832201859201, 0.1937678123206621, 0.09269803882826433, 0.0850100844181223, 0.09689755490853391, 0.09006559069384545, 0.08822054500406107, 0.08705512343457811, 0.101144761399518, 0.09130287220003352, 0.09655794112015903]}, "mutation_prompt": null}
{"id": "d8dd515d-faf4-4489-b040-11090844704c", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 32  # Slightly increased initial population\n        self.final_population_size = 24  # More dynamic population resizing\n        self.inertia_weight = 0.59  # Further reduced inertia weight for quicker convergence\n        self.cognitive_coeff = 1.8  # Increased to further enhance exploration\n        self.social_coeff = 1.3  # Slightly decreased to improve balance\n        self.mutation_factor_init = 0.88  # Adjusted mutation factor for diversity\n        self.cross_prob = 0.96  # Higher cross probability for more aggressive trial acceptance\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.initial_population_size, dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.initial_population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        eval_count = 0\n        inertia_dampening = 0.99  # Adjusted for slightly faster dampening\n        mutation_factor_change = (self.mutation_factor_init - 0.5) / self.budget\n\n        while eval_count < self.budget:\n            population_size = self.initial_population_size - int(\n                (eval_count / self.budget) * (self.initial_population_size - self.final_population_size))\n\n            for i in range(population_size):\n                score = func(self.population[i])\n                eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n                if eval_count >= self.budget:\n                    break\n\n            r1 = np.random.rand(population_size, self.dim)\n            r2 = np.random.rand(population_size, self.dim)\n            cognitive_component = self.cognitive_coeff * r1 * (self.personal_best_positions[:population_size] - self.population[:population_size])\n            social_component = self.social_coeff * r2 * (self.global_best_position - self.population[:population_size])\n            self.velocities[:population_size] = (self.inertia_weight * self.velocities[:population_size]) + cognitive_component + social_component\n            self.population[:population_size] = self.population[:population_size] + self.velocities[:population_size]\n\n            self.population[:population_size] = np.clip(self.population[:population_size], self.lower_bound, self.upper_bound)\n\n            for i in range(population_size):\n                indices = np.random.choice(np.delete(np.arange(population_size), i), 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = a + (self.mutation_factor_init - mutation_factor_change * eval_count) * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cross_prob:\n                        trial[j] = mutant[j]\n\n                trial_score = func(trial)\n                eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.population[i] = trial\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial\n                if eval_count >= self.budget:\n                    break\n\n            self.inertia_weight *= inertia_dampening\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedHybridPSODE", "description": "EnhancedHybridPSODE with dynamic parameter tuning and adaptive population control for faster convergence.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "af9c7347-3908-47a4-bd67-990d4874ebde", "metadata": {"aucs": [0.854841170199753, 0.8337434860933706, 0.8469967212274282, 0.8455483575894931, 0.8180411099900293, 0.8538268412181504, 0.8661472530299321, 0.8586874660363351, 0.8309962951446832, 0.7294235129780255, 0.6998937295171335, 0.6094117259358, 0.7323993392336852, 0.7178626996713835, 0.7527717430435938, 0.7303553160756826, 0.7398023539588414, 0.7345810602280723, 0.14931063233199515, 0.13351555112136448, 0.6622369060538811, 0.14066429175160333, 0.1726157421192509, 0.13536244333222003, 0.16927292151669604, 0.17310903385891174, 0.16665051046678891, 0.10286767970176403, 0.11062674053789101, 0.09841548178142223, 0.11766048483176039, 0.13749285478756756, 0.1497628696663631, 0.12877821416404456, 0.10536676396505973, 0.14711824380142302, 0.9856512933902406, 0.9787812971815051, 0.9884286877792379, 0.9839714483074401, 0.9785587651669921, 0.9797841168656637, 0.9905617241107126, 0.9770933132040401, 0.9833577911084052, 0.7048655414793028, 0.7211467168240129, 0.7052216937557363, 0.7191710474747863, 0.14908004501186256, 0.7445236695618853, 0.7205652174423838, 0.5511206013439216, 0.6527132167092512, 0.3481079237327044, 0.2220022876779414, 0.22260963171491, 0.2773721531139688, 0.8106141678517857, 0.193143748525206, 0.7282030748672175, 0.2380711802780806, 0.1150872978406785, 0.15842663143275082, 0.12928270349161397, 0.1819346820411205, 0.16708296455829608, 0.20992905560266106, 0.12237661338006744, 0.3351147961480979, 0.19017807601288228, 0.21338139704086945, 0.18076589346594996, 0.13757489068267315, 0.22643758141871184, 0.18454500747880243, 0.24556725003162827, 0.18134559209726409, 0.22223500435779941, 0.13360190580985276, 0.12530423963151405, 9.999999999998899e-05, 0.04106590289391676, 0.009052554914146471, 9.999999999998899e-05, 0.035304986290289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07486847503284044, 0.07747999204176736, 0.03671692122265646, 0.12597768691781308, 0.08375568218519003, 9.999999999998899e-05, 0.025237010735392862, 0.09410909002513912, 0.0728437426819526, 0.042060846996438195, 0.046510822810082564, 0.07634599429344835, 0.1226496143325938, 0.09744350257911849, 0.14932735382092965, 0.07586047305840182, 0.2842119416221408, 0.08389114588004398, 0.08772702619431327, 0.06467686522928273, 9.999999999998899e-05, 0.1307702082894382, 0.00630684225609679, 0.20421519971616386, 0.08524348655987957, 0.19106498023883534, 0.04781213433341358, 0.09314857491772333, 0.5185871615500623, 0.5649049736705083, 0.5689980628370421, 0.5514152013975806, 0.5490509555687053, 0.20790007435716462, 0.5973916126254126, 0.6530010078799888, 0.5781118929648357, 0.08304826450485725, 0.07600267204559463, 0.11491859562690787, 0.12362571842962733, 0.13043972677666205, 0.13716767684518238, 0.12653952287696635, 0.13657113960499223, 0.09709974675359878, 0.14374469357949093, 0.18695456979770098, 0.18923957478194653, 0.2981175702971416, 0.24944309371380124, 0.1406468119143186, 0.3294200634479776, 0.17120108790425115, 0.28248616584533215, 0.48908365950123567, 0.6094958590761, 0.6544264222405355, 0.2899814886249241, 0.5453506268139661, 0.36763381267556094, 0.4436084820302868, 0.49875119412574753, 0.5928333162885812, 0.32402022101522454, 0.25792803367766615, 0.2829233453807415, 0.4076522537381234, 0.2622079541846637, 0.32710742616195454, 0.3432538164896639, 0.23390776228649435, 0.30096566980124007, 0.25365634866961995, 0.18875259829404345, 0.267932015646579, 0.20209338773698615, 0.21300809713335944, 0.23998942892561703, 0.24237800148333477, 0.22644071122299358, 0.246895492041457, 0.2407489637587219, 0.7381993016559744, 0.24476307319944546, 0.7596076646020812, 0.238690415179029, 0.2126182009475257, 0.21898585008086835, 0.21703275509314346, 0.2161411307226221, 0.8804029305720451, 0.878470043102824, 0.154132523530214, 0.882908229087604, 0.19873057126016025, 0.19745108635270425, 0.8419510619466086, 0.16897779637434018, 0.8931557330242321, 0.7672084987916588, 0.1683188460864965, 0.2078508423927442, 0.7558544886253658, 0.16710346584180424, 0.2089793176375876, 0.2082782456388691, 0.7949888960681359, 0.8308106177184313, 0.19654164232329197, 0.19487711470545, 0.19335537842386907, 0.19706767001895187, 0.21178877924311013, 0.21062142901655512, 0.20665390909466186, 0.18865726577078357, 0.18353189923188806, 0.09784604018523879, 0.09464449116249218, 0.09282370571545195, 0.08584127053615209, 0.08156069572947378, 0.089102552583189, 0.13650074412598556, 0.07560180769216351, 0.07904243372709896]}, "mutation_prompt": null}
{"id": "c1e008e8-7d82-4f40-a712-ecc2b064be8b", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 32  # Slightly increased initial population\n        self.final_population_size = 24  # More dynamic population resizing\n        self.inertia_weight = 0.59  # Further reduced inertia weight for quicker convergence\n        self.cognitive_coeff = 1.8  # Increased to further enhance exploration\n        self.social_coeff = 1.3  # Slightly decreased to improve balance\n        self.mutation_factor_init = 0.88  # Adjusted mutation factor for diversity\n        self.cross_prob = 0.96  # Higher cross probability for more aggressive trial acceptance\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.initial_population_size, dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.initial_population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        eval_count = 0\n        inertia_dampening = 0.99  # Adjusted for slightly faster dampening\n        mutation_factor_change = (self.mutation_factor_init - 0.5) / self.budget\n\n        while eval_count < self.budget:\n            population_size = self.initial_population_size - int(\n                (eval_count / self.budget) * (self.initial_population_size - self.final_population_size))\n\n            for i in range(population_size):\n                score = func(self.population[i])\n                eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n                if eval_count >= self.budget:\n                    break\n\n            r1 = np.random.rand(population_size, self.dim)\n            r2 = np.random.rand(population_size, self.dim)\n            cognitive_component = self.cognitive_coeff * r1 * (self.personal_best_positions[:population_size] - self.population[:population_size])\n            social_component = self.social_coeff * r2 * (self.global_best_position - self.population[:population_size])\n            self.velocities[:population_size] = (self.inertia_weight * self.velocities[:population_size]) + cognitive_component + social_component\n            self.population[:population_size] = self.population[:population_size] + self.velocities[:population_size]\n\n            self.population[:population_size] = np.clip(self.population[:population_size], self.lower_bound, self.upper_bound)\n\n            for i in range(population_size):\n                indices = np.random.choice(np.delete(np.arange(population_size), i), 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = a + (self.mutation_factor_init - mutation_factor_change * eval_count) * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cross_prob:\n                        trial[j] = mutant[j]\n\n                trial_score = func(trial)\n                eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.population[i] = trial\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial\n                if eval_count >= self.budget:\n                    break\n\n            self.inertia_weight *= inertia_dampening\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedHybridPSODE", "description": "EnhancedHybridPSODE with dynamic parameter tuning and adaptive population control for faster convergence.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "af9c7347-3908-47a4-bd67-990d4874ebde", "metadata": {"aucs": [0.854841170199753, 0.8337434860933706, 0.8469967212274282, 0.8455483575894931, 0.8180411099900293, 0.8538268412181504, 0.8661472530299321, 0.8586874660363351, 0.8309962951446832, 0.7294235129780255, 0.6998937295171335, 0.6094117259358, 0.7323993392336852, 0.7178626996713835, 0.7527717430435938, 0.7303553160756826, 0.7398023539588414, 0.7345810602280723, 0.14931063233199515, 0.13351555112136448, 0.6622369060538811, 0.14066429175160333, 0.1726157421192509, 0.13536244333222003, 0.16927292151669604, 0.17310903385891174, 0.16665051046678891, 0.10286767970176403, 0.11062674053789101, 0.09841548178142223, 0.11766048483176039, 0.13749285478756756, 0.1497628696663631, 0.12877821416404456, 0.10536676396505973, 0.14711824380142302, 0.9856512933902406, 0.9787812971815051, 0.9884286877792379, 0.9839714483074401, 0.9785587651669921, 0.9797841168656637, 0.9905617241107126, 0.9770933132040401, 0.9833577911084052, 0.7048655414793028, 0.7211467168240129, 0.7052216937557363, 0.7191710474747863, 0.14908004501186256, 0.7445236695618853, 0.7205652174423838, 0.5511206013439216, 0.6527132167092512, 0.3481079237327044, 0.2220022876779414, 0.22260963171491, 0.2773721531139688, 0.8106141678517857, 0.193143748525206, 0.7282030748672175, 0.2380711802780806, 0.1150872978406785, 0.15842663143275082, 0.12928270349161397, 0.1819346820411205, 0.16708296455829608, 0.20992905560266106, 0.12237661338006744, 0.3351147961480979, 0.19017807601288228, 0.21338139704086945, 0.18076589346594996, 0.13757489068267315, 0.22643758141871184, 0.18454500747880243, 0.24556725003162827, 0.18134559209726409, 0.22223500435779941, 0.13360190580985276, 0.12530423963151405, 9.999999999998899e-05, 0.04106590289391676, 0.009052554914146471, 9.999999999998899e-05, 0.035304986290289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07486847503284044, 0.07747999204176736, 0.03671692122265646, 0.12597768691781308, 0.08375568218519003, 9.999999999998899e-05, 0.025237010735392862, 0.09410909002513912, 0.0728437426819526, 0.042060846996438195, 0.046510822810082564, 0.07634599429344835, 0.1226496143325938, 0.09744350257911849, 0.14932735382092965, 0.07586047305840182, 0.2842119416221408, 0.08389114588004398, 0.08772702619431327, 0.06467686522928273, 9.999999999998899e-05, 0.1307702082894382, 0.00630684225609679, 0.20421519971616386, 0.08524348655987957, 0.19106498023883534, 0.04781213433341358, 0.09314857491772333, 0.5185871615500623, 0.5649049736705083, 0.5689980628370421, 0.5514152013975806, 0.5490509555687053, 0.20790007435716462, 0.5973916126254126, 0.6530010078799888, 0.5781118929648357, 0.08304826450485725, 0.07600267204559463, 0.11491859562690787, 0.12362571842962733, 0.13043972677666205, 0.13716767684518238, 0.12653952287696635, 0.13657113960499223, 0.09709974675359878, 0.14374469357949093, 0.18695456979770098, 0.18923957478194653, 0.2981175702971416, 0.24944309371380124, 0.1406468119143186, 0.3294200634479776, 0.17120108790425115, 0.28248616584533215, 0.48908365950123567, 0.6094958590761, 0.6544264222405355, 0.2899814886249241, 0.5453506268139661, 0.36763381267556094, 0.4436084820302868, 0.49875119412574753, 0.5928333162885812, 0.32402022101522454, 0.25792803367766615, 0.2829233453807415, 0.4076522537381234, 0.2622079541846637, 0.32710742616195454, 0.3432538164896639, 0.23390776228649435, 0.30096566980124007, 0.25365634866961995, 0.18875259829404345, 0.267932015646579, 0.20209338773698615, 0.21300809713335944, 0.23998942892561703, 0.24237800148333477, 0.22644071122299358, 0.246895492041457, 0.2407489637587219, 0.7381993016559744, 0.24476307319944546, 0.7596076646020812, 0.238690415179029, 0.2126182009475257, 0.21898585008086835, 0.21703275509314346, 0.2161411307226221, 0.8804029305720451, 0.878470043102824, 0.154132523530214, 0.882908229087604, 0.19873057126016025, 0.19745108635270425, 0.8419510619466086, 0.16897779637434018, 0.8931557330242321, 0.7672084987916588, 0.1683188460864965, 0.2078508423927442, 0.7558544886253658, 0.16710346584180424, 0.2089793176375876, 0.2082782456388691, 0.7949888960681359, 0.8308106177184313, 0.19654164232329197, 0.19487711470545, 0.19335537842386907, 0.19706767001895187, 0.21178877924311013, 0.21062142901655512, 0.20665390909466186, 0.18865726577078357, 0.18353189923188806, 0.09784604018523879, 0.09464449116249218, 0.09282370571545195, 0.08584127053615209, 0.08156069572947378, 0.089102552583189, 0.13650074412598556, 0.07560180769216351, 0.07904243372709896]}, "mutation_prompt": null}
{"id": "a0584714-aac3-4ba2-a9ba-595ed17e2633", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 32  # Slightly increased initial population\n        self.final_population_size = 24  # More dynamic population resizing\n        self.inertia_weight = 0.59  # Further reduced inertia weight for quicker convergence\n        self.cognitive_coeff = 1.8  # Increased to further enhance exploration\n        self.social_coeff = 1.3  # Slightly decreased to improve balance\n        self.mutation_factor_init = 0.88  # Adjusted mutation factor for diversity\n        self.cross_prob = 0.96  # Higher cross probability for more aggressive trial acceptance\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.initial_population_size, dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.initial_population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        eval_count = 0\n        inertia_dampening = 0.99  # Adjusted for slightly faster dampening\n        mutation_factor_change = (self.mutation_factor_init - 0.5) / self.budget\n\n        while eval_count < self.budget:\n            population_size = self.initial_population_size - int(\n                (eval_count / self.budget) * (self.initial_population_size - self.final_population_size))\n\n            for i in range(population_size):\n                score = func(self.population[i])\n                eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n                if eval_count >= self.budget:\n                    break\n\n            r1 = np.random.rand(population_size, self.dim)\n            r2 = np.random.rand(population_size, self.dim)\n            cognitive_component = self.cognitive_coeff * r1 * (self.personal_best_positions[:population_size] - self.population[:population_size])\n            social_component = self.social_coeff * r2 * (self.global_best_position - self.population[:population_size])\n            self.velocities[:population_size] = (self.inertia_weight * self.velocities[:population_size]) + cognitive_component + social_component\n            self.population[:population_size] = self.population[:population_size] + self.velocities[:population_size]\n\n            self.population[:population_size] = np.clip(self.population[:population_size], self.lower_bound, self.upper_bound)\n\n            for i in range(population_size):\n                indices = np.random.choice(np.delete(np.arange(population_size), i), 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = a + (self.mutation_factor_init - mutation_factor_change * eval_count) * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cross_prob:\n                        trial[j] = mutant[j]\n\n                trial_score = func(trial)\n                eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.population[i] = trial\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial\n                if eval_count >= self.budget:\n                    break\n\n            self.inertia_weight *= inertia_dampening\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedHybridPSODE", "description": "EnhancedHybridPSODE with dynamic parameter tuning and adaptive population control for faster convergence.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "af9c7347-3908-47a4-bd67-990d4874ebde", "metadata": {"aucs": [0.854841170199753, 0.8337434860933706, 0.8469967212274282, 0.8455483575894931, 0.8180411099900293, 0.8538268412181504, 0.8661472530299321, 0.8586874660363351, 0.8309962951446832, 0.7294235129780255, 0.6998937295171335, 0.6094117259358, 0.7323993392336852, 0.7178626996713835, 0.7527717430435938, 0.7303553160756826, 0.7398023539588414, 0.7345810602280723, 0.14931063233199515, 0.13351555112136448, 0.6622369060538811, 0.14066429175160333, 0.1726157421192509, 0.13536244333222003, 0.16927292151669604, 0.17310903385891174, 0.16665051046678891, 0.10286767970176403, 0.11062674053789101, 0.09841548178142223, 0.11766048483176039, 0.13749285478756756, 0.1497628696663631, 0.12877821416404456, 0.10536676396505973, 0.14711824380142302, 0.9856512933902406, 0.9787812971815051, 0.9884286877792379, 0.9839714483074401, 0.9785587651669921, 0.9797841168656637, 0.9905617241107126, 0.9770933132040401, 0.9833577911084052, 0.7048655414793028, 0.7211467168240129, 0.7052216937557363, 0.7191710474747863, 0.14908004501186256, 0.7445236695618853, 0.7205652174423838, 0.5511206013439216, 0.6527132167092512, 0.3481079237327044, 0.2220022876779414, 0.22260963171491, 0.2773721531139688, 0.8106141678517857, 0.193143748525206, 0.7282030748672175, 0.2380711802780806, 0.1150872978406785, 0.15842663143275082, 0.12928270349161397, 0.1819346820411205, 0.16708296455829608, 0.20992905560266106, 0.12237661338006744, 0.3351147961480979, 0.19017807601288228, 0.21338139704086945, 0.18076589346594996, 0.13757489068267315, 0.22643758141871184, 0.18454500747880243, 0.24556725003162827, 0.18134559209726409, 0.22223500435779941, 0.13360190580985276, 0.12530423963151405, 9.999999999998899e-05, 0.04106590289391676, 0.009052554914146471, 9.999999999998899e-05, 0.035304986290289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07486847503284044, 0.07747999204176736, 0.03671692122265646, 0.12597768691781308, 0.08375568218519003, 9.999999999998899e-05, 0.025237010735392862, 0.09410909002513912, 0.0728437426819526, 0.042060846996438195, 0.046510822810082564, 0.07634599429344835, 0.1226496143325938, 0.09744350257911849, 0.14932735382092965, 0.07586047305840182, 0.2842119416221408, 0.08389114588004398, 0.08772702619431327, 0.06467686522928273, 9.999999999998899e-05, 0.1307702082894382, 0.00630684225609679, 0.20421519971616386, 0.08524348655987957, 0.19106498023883534, 0.04781213433341358, 0.09314857491772333, 0.5185871615500623, 0.5649049736705083, 0.5689980628370421, 0.5514152013975806, 0.5490509555687053, 0.20790007435716462, 0.5973916126254126, 0.6530010078799888, 0.5781118929648357, 0.08304826450485725, 0.07600267204559463, 0.11491859562690787, 0.12362571842962733, 0.13043972677666205, 0.13716767684518238, 0.12653952287696635, 0.13657113960499223, 0.09709974675359878, 0.14374469357949093, 0.18695456979770098, 0.18923957478194653, 0.2981175702971416, 0.24944309371380124, 0.1406468119143186, 0.3294200634479776, 0.17120108790425115, 0.28248616584533215, 0.48908365950123567, 0.6094958590761, 0.6544264222405355, 0.2899814886249241, 0.5453506268139661, 0.36763381267556094, 0.4436084820302868, 0.49875119412574753, 0.5928333162885812, 0.32402022101522454, 0.25792803367766615, 0.2829233453807415, 0.4076522537381234, 0.2622079541846637, 0.32710742616195454, 0.3432538164896639, 0.23390776228649435, 0.30096566980124007, 0.25365634866961995, 0.18875259829404345, 0.267932015646579, 0.20209338773698615, 0.21300809713335944, 0.23998942892561703, 0.24237800148333477, 0.22644071122299358, 0.246895492041457, 0.2407489637587219, 0.7381993016559744, 0.24476307319944546, 0.7596076646020812, 0.238690415179029, 0.2126182009475257, 0.21898585008086835, 0.21703275509314346, 0.2161411307226221, 0.8804029305720451, 0.878470043102824, 0.154132523530214, 0.882908229087604, 0.19873057126016025, 0.19745108635270425, 0.8419510619466086, 0.16897779637434018, 0.8931557330242321, 0.7672084987916588, 0.1683188460864965, 0.2078508423927442, 0.7558544886253658, 0.16710346584180424, 0.2089793176375876, 0.2082782456388691, 0.7949888960681359, 0.8308106177184313, 0.19654164232329197, 0.19487711470545, 0.19335537842386907, 0.19706767001895187, 0.21178877924311013, 0.21062142901655512, 0.20665390909466186, 0.18865726577078357, 0.18353189923188806, 0.09784604018523879, 0.09464449116249218, 0.09282370571545195, 0.08584127053615209, 0.08156069572947378, 0.089102552583189, 0.13650074412598556, 0.07560180769216351, 0.07904243372709896]}, "mutation_prompt": null}
{"id": "74a93e57-24bb-4092-a62f-b2edd85be2bc", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 32  # Slightly increased initial population\n        self.final_population_size = 24  # More dynamic population resizing\n        self.inertia_weight = 0.59  # Further reduced inertia weight for quicker convergence\n        self.cognitive_coeff = 1.8  # Increased to further enhance exploration\n        self.social_coeff = 1.3  # Slightly decreased to improve balance\n        self.mutation_factor_init = 0.88  # Adjusted mutation factor for diversity\n        self.cross_prob = 0.96  # Higher cross probability for more aggressive trial acceptance\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.initial_population_size, dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.initial_population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        eval_count = 0\n        inertia_dampening = 0.99  # Adjusted for slightly faster dampening\n        mutation_factor_change = (self.mutation_factor_init - 0.5) / self.budget\n\n        while eval_count < self.budget:\n            population_size = self.initial_population_size - int(\n                (eval_count / self.budget) * (self.initial_population_size - self.final_population_size))\n\n            for i in range(population_size):\n                score = func(self.population[i])\n                eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n                if eval_count >= self.budget:\n                    break\n\n            r1 = np.random.rand(population_size, self.dim)\n            r2 = np.random.rand(population_size, self.dim)\n            cognitive_component = self.cognitive_coeff * r1 * (self.personal_best_positions[:population_size] - self.population[:population_size])\n            social_component = self.social_coeff * r2 * (self.global_best_position - self.population[:population_size])\n            self.velocities[:population_size] = (self.inertia_weight * self.velocities[:population_size]) + cognitive_component + social_component\n            self.population[:population_size] = self.population[:population_size] + self.velocities[:population_size]\n\n            self.population[:population_size] = np.clip(self.population[:population_size], self.lower_bound, self.upper_bound)\n\n            for i in range(population_size):\n                indices = np.random.choice(np.delete(np.arange(population_size), i), 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = a + (self.mutation_factor_init - mutation_factor_change * eval_count) * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cross_prob:\n                        trial[j] = mutant[j]\n\n                trial_score = func(trial)\n                eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.population[i] = trial\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial\n                if eval_count >= self.budget:\n                    break\n\n            self.inertia_weight *= inertia_dampening\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedHybridPSODE", "description": "EnhancedHybridPSODE with dynamic parameter tuning and adaptive population control for faster convergence.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "af9c7347-3908-47a4-bd67-990d4874ebde", "metadata": {"aucs": [0.854841170199753, 0.8337434860933706, 0.8469967212274282, 0.8455483575894931, 0.8180411099900293, 0.8538268412181504, 0.8661472530299321, 0.8586874660363351, 0.8309962951446832, 0.7294235129780255, 0.6998937295171335, 0.6094117259358, 0.7323993392336852, 0.7178626996713835, 0.7527717430435938, 0.7303553160756826, 0.7398023539588414, 0.7345810602280723, 0.14931063233199515, 0.13351555112136448, 0.6622369060538811, 0.14066429175160333, 0.1726157421192509, 0.13536244333222003, 0.16927292151669604, 0.17310903385891174, 0.16665051046678891, 0.10286767970176403, 0.11062674053789101, 0.09841548178142223, 0.11766048483176039, 0.13749285478756756, 0.1497628696663631, 0.12877821416404456, 0.10536676396505973, 0.14711824380142302, 0.9856512933902406, 0.9787812971815051, 0.9884286877792379, 0.9839714483074401, 0.9785587651669921, 0.9797841168656637, 0.9905617241107126, 0.9770933132040401, 0.9833577911084052, 0.7048655414793028, 0.7211467168240129, 0.7052216937557363, 0.7191710474747863, 0.14908004501186256, 0.7445236695618853, 0.7205652174423838, 0.5511206013439216, 0.6527132167092512, 0.3481079237327044, 0.2220022876779414, 0.22260963171491, 0.2773721531139688, 0.8106141678517857, 0.193143748525206, 0.7282030748672175, 0.2380711802780806, 0.1150872978406785, 0.15842663143275082, 0.12928270349161397, 0.1819346820411205, 0.16708296455829608, 0.20992905560266106, 0.12237661338006744, 0.3351147961480979, 0.19017807601288228, 0.21338139704086945, 0.18076589346594996, 0.13757489068267315, 0.22643758141871184, 0.18454500747880243, 0.24556725003162827, 0.18134559209726409, 0.22223500435779941, 0.13360190580985276, 0.12530423963151405, 9.999999999998899e-05, 0.04106590289391676, 0.009052554914146471, 9.999999999998899e-05, 0.035304986290289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07486847503284044, 0.07747999204176736, 0.03671692122265646, 0.12597768691781308, 0.08375568218519003, 9.999999999998899e-05, 0.025237010735392862, 0.09410909002513912, 0.0728437426819526, 0.042060846996438195, 0.046510822810082564, 0.07634599429344835, 0.1226496143325938, 0.09744350257911849, 0.14932735382092965, 0.07586047305840182, 0.2842119416221408, 0.08389114588004398, 0.08772702619431327, 0.06467686522928273, 9.999999999998899e-05, 0.1307702082894382, 0.00630684225609679, 0.20421519971616386, 0.08524348655987957, 0.19106498023883534, 0.04781213433341358, 0.09314857491772333, 0.5185871615500623, 0.5649049736705083, 0.5689980628370421, 0.5514152013975806, 0.5490509555687053, 0.20790007435716462, 0.5973916126254126, 0.6530010078799888, 0.5781118929648357, 0.08304826450485725, 0.07600267204559463, 0.11491859562690787, 0.12362571842962733, 0.13043972677666205, 0.13716767684518238, 0.12653952287696635, 0.13657113960499223, 0.09709974675359878, 0.14374469357949093, 0.18695456979770098, 0.18923957478194653, 0.2981175702971416, 0.24944309371380124, 0.1406468119143186, 0.3294200634479776, 0.17120108790425115, 0.28248616584533215, 0.48908365950123567, 0.6094958590761, 0.6544264222405355, 0.2899814886249241, 0.5453506268139661, 0.36763381267556094, 0.4436084820302868, 0.49875119412574753, 0.5928333162885812, 0.32402022101522454, 0.25792803367766615, 0.2829233453807415, 0.4076522537381234, 0.2622079541846637, 0.32710742616195454, 0.3432538164896639, 0.23390776228649435, 0.30096566980124007, 0.25365634866961995, 0.18875259829404345, 0.267932015646579, 0.20209338773698615, 0.21300809713335944, 0.23998942892561703, 0.24237800148333477, 0.22644071122299358, 0.246895492041457, 0.2407489637587219, 0.7381993016559744, 0.24476307319944546, 0.7596076646020812, 0.238690415179029, 0.2126182009475257, 0.21898585008086835, 0.21703275509314346, 0.2161411307226221, 0.8804029305720451, 0.878470043102824, 0.154132523530214, 0.882908229087604, 0.19873057126016025, 0.19745108635270425, 0.8419510619466086, 0.16897779637434018, 0.8931557330242321, 0.7672084987916588, 0.1683188460864965, 0.2078508423927442, 0.7558544886253658, 0.16710346584180424, 0.2089793176375876, 0.2082782456388691, 0.7949888960681359, 0.8308106177184313, 0.19654164232329197, 0.19487711470545, 0.19335537842386907, 0.19706767001895187, 0.21178877924311013, 0.21062142901655512, 0.20665390909466186, 0.18865726577078357, 0.18353189923188806, 0.09784604018523879, 0.09464449116249218, 0.09282370571545195, 0.08584127053615209, 0.08156069572947378, 0.089102552583189, 0.13650074412598556, 0.07560180769216351, 0.07904243372709896]}, "mutation_prompt": null}
{"id": "5d755f2c-1859-4d2b-97e5-b7544aae2812", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30  # Reduced population for quicker evaluations\n        self.final_population_size = 22  # Adjusted for slightly smaller final population\n        self.inertia_weight = 0.57  # Further reduced to promote quicker convergence\n        self.cognitive_coeff = 1.9  # Enhanced cognitive term for better exploration\n        self.social_coeff = 1.2  # Lowered to maintain balance\n        self.mutation_factor_init = 0.85  # Slightly adjusted for stable mutation\n        self.cross_prob = 0.95  # Retained for aggressive trial acceptance\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.initial_population_size, dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.initial_population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        eval_count = 0\n        inertia_dampening = 0.98  # Faster dampening for reduced inertia over time\n        mutation_factor_change = (self.mutation_factor_init - 0.5) / self.budget\n\n        while eval_count < self.budget:\n            population_size = self.initial_population_size - int(\n                (eval_count / self.budget) * (self.initial_population_size - self.final_population_size))\n\n            for i in range(population_size):\n                score = func(self.population[i])\n                eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n                if eval_count >= self.budget:\n                    break\n\n            r1 = np.random.rand(population_size, self.dim)\n            r2 = np.random.rand(population_size, self.dim)\n            cognitive_component = self.cognitive_coeff * r1 * (self.personal_best_positions[:population_size] - self.population[:population_size])\n            social_component = self.social_coeff * r2 * (self.global_best_position - self.population[:population_size])\n            self.velocities[:population_size] = (self.inertia_weight * self.velocities[:population_size]) + cognitive_component + social_component\n            self.population[:population_size] = self.population[:population_size] + self.velocities[:population_size]\n            self.population[:population_size] = np.clip(self.population[:population_size], self.lower_bound, self.upper_bound)\n\n            for i in range(population_size):\n                indices = np.random.choice(np.delete(np.arange(population_size), i), 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = a + (self.mutation_factor_init - mutation_factor_change * eval_count) * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cross_prob:\n                        trial[j] = mutant[j]\n\n                trial_score = func(trial)\n                eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.population[i] = trial\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial\n                if eval_count >= self.budget:\n                    break\n\n            self.inertia_weight *= inertia_dampening\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedHybridPSODE", "description": "Optimized EnhancedHybridPSODE with refined exploration and exploitation balance and adaptive mutation for faster convergence.", "configspace": "", "generation": 82, "fitness": 0.29266061160883056, "feedback": "The algorithm EnhancedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.26.", "error": "", "parent_id": "af9c7347-3908-47a4-bd67-990d4874ebde", "metadata": {"aucs": [0.8982288108514825, 0.886157683382023, 0.8883273896266991, 0.8853337228338339, 0.8891126070752718, 0.8887744086657208, 0.8877211478570042, 0.8882018437340129, 0.8835599625470257, 0.7458177708274891, 0.7872902035032181, 0.729207267011013, 0.7963275475476058, 0.7636128322192516, 0.776733618515379, 0.7999377473057291, 0.7868539236782552, 0.047967089121337625, 0.1405927863222456, 0.1282085857457056, 0.11416257539217001, 0.11895861277724673, 0.18234216839561845, 0.15159473501833232, 0.18363645915155202, 0.11337252532743025, 0.17585434895711238, 0.13529818422934403, 0.10325741160808999, 0.11882998694499802, 0.12432223978025214, 0.09151922493472953, 0.16928677103863943, 0.09587302814265386, 0.12786220608470633, 0.13897377119364973, 0.9809747461552688, 0.9795723539521046, 0.9863751399222622, 0.9701672642613768, 0.984744282474534, 0.9657156201733192, 0.9860383800365341, 0.9769115853586555, 0.9756441036387883, 0.5033838443874319, 0.6866765496886305, 0.5516850931909294, 0.15091200584110698, 0.15209557778386917, 0.4879061883431325, 0.08344368487623055, 0.08792175679491243, 0.5895114263194807, 0.22810591000157743, 0.2225378377514936, 0.22279135803526628, 0.21358642771124137, 0.27906972529744023, 0.21299353947775435, 0.2248890390682463, 0.22033422281146509, 0.5005864256419741, 0.12908648406148526, 0.18330634591180284, 0.17418968497952314, 0.1953866370972246, 0.1297947133931575, 0.2054753414833974, 0.1960638586508071, 0.19719119979775113, 0.12846987570967117, 0.12205664572961794, 0.1302921133525713, 0.20005164197066683, 0.12825435701858368, 0.2821805457235993, 0.1707311453531556, 0.18552006524900433, 0.16563913238755523, 0.192027102679454, 9.999999999998899e-05, 0.06354784874123565, 0.0523743189547502, 0.00017669935800113112, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04937117168907279, 0.06401650842436224, 0.09997426910114482, 0.10785230273600466, 0.1059777704030237, 0.020366742352553646, 0.050504000702014884, 0.13978590921349054, 0.06323299056030096, 0.06005321216887438, 0.049169105032781935, 0.10617123110388349, 0.11554739739218622, 0.07829557886993588, 0.07813345602385202, 0.22437469798849996, 0.09971861246680414, 0.08169039930100153, 0.07472012362247138, 0.17726738229954841, 0.1358770017277975, 0.13564862604304995, 0.17308545437166778, 0.16507503803610546, 0.2371285124210757, 0.04883597709700194, 0.34892015165540646, 0.1758981643575671, 0.5460412411245732, 0.520543151653335, 0.564795190781269, 0.5887561113129278, 0.5846110403294962, 0.5538402154681741, 0.5827160078453408, 0.49639175840434024, 0.6205369508531702, 0.11249288411276881, 0.09660714089996036, 0.16132990141245196, 0.15653094101642473, 0.09883698322727397, 0.18164328519268946, 0.10535857056508269, 0.10824386872623526, 0.13907117511554967, 0.23135315500299514, 0.22855105534014586, 0.17824145059498064, 0.17722785337563596, 0.3020941703354517, 0.22780053618114793, 0.20037673358244057, 0.21528306874055558, 0.19354344229565035, 0.4279985014852885, 0.30412988376522876, 0.31492562134824, 0.32948147259098537, 0.32437602550688116, 0.400733463032486, 0.4603652377131152, 0.5363237854053035, 0.22380100233519717, 0.21150394394676708, 0.25565712347445013, 0.36276850382197967, 0.17139034828602784, 0.32439596925179015, 0.2222445272396557, 0.27926348592948136, 0.30906066871926974, 0.30998830897442575, 0.21059657941563426, 0.21624165508714166, 0.2110026286387663, 0.21131537324660976, 0.1899689917459133, 0.18673521277792526, 0.2038523854640505, 0.24678416814550963, 0.20111573066581545, 0.17837929894315696, 0.22468091376095645, 0.18803709998159324, 0.20689093108014212, 0.2454544226449965, 0.21072676404275403, 0.21135250168891329, 0.23824793828320312, 0.2097928466094945, 0.1643642084166771, 0.18714480691011248, 0.15321778352234727, 0.8991181211410093, 0.2014509583987657, 0.19940520917238513, 0.09956114814763983, 0.1701363731831108, 0.8989724243219572, 0.45972129794279826, 0.15679142505604615, 0.20090789489146765, 0.12756108871110605, 0.4398597891412812, 0.21025355838555504, 0.1041986475745913, 0.2105063761506013, 0.49020772242162525, 0.1914046521967009, 0.18878055331781374, 0.19508594231367937, 0.18548112732250222, 0.1873752358945101, 0.18836179395272534, 0.19022639486114135, 0.1927832201859201, 0.1937678123206621, 0.09269803882826433, 0.0850100844181223, 0.09689755490853391, 0.09006559069384545, 0.08822054500406107, 0.08705512343457811, 0.101144761399518, 0.09130287220003352, 0.09655794112015903]}, "mutation_prompt": null}
{"id": "6d890b97-6ff3-41d1-8c01-d08d05e17034", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 32  # Slightly increased initial population\n        self.final_population_size = 24  # More dynamic population resizing\n        self.inertia_weight = 0.59  # Further reduced inertia weight for quicker convergence\n        self.cognitive_coeff = 1.8  # Increased to further enhance exploration\n        self.social_coeff = 1.3  # Slightly decreased to improve balance\n        self.mutation_factor_init = 0.88  # Adjusted mutation factor for diversity\n        self.cross_prob = 0.96  # Higher cross probability for more aggressive trial acceptance\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.initial_population_size, dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.initial_population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        eval_count = 0\n        inertia_dampening = 0.99  # Adjusted for slightly faster dampening\n        mutation_factor_change = (self.mutation_factor_init - 0.5) / self.budget\n\n        while eval_count < self.budget:\n            population_size = self.initial_population_size - int(\n                (eval_count / self.budget) * (self.initial_population_size - self.final_population_size))\n\n            for i in range(population_size):\n                score = func(self.population[i])\n                eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n                if eval_count >= self.budget:\n                    break\n\n            r1 = np.random.rand(population_size, self.dim)\n            r2 = np.random.rand(population_size, self.dim)\n            cognitive_component = self.cognitive_coeff * r1 * (self.personal_best_positions[:population_size] - self.population[:population_size])\n            social_component = self.social_coeff * r2 * (self.global_best_position - self.population[:population_size])\n            self.velocities[:population_size] = (self.inertia_weight * self.velocities[:population_size]) + cognitive_component + social_component\n            self.population[:population_size] = self.population[:population_size] + self.velocities[:population_size]\n\n            self.population[:population_size] = np.clip(self.population[:population_size], self.lower_bound, self.upper_bound)\n\n            for i in range(population_size):\n                indices = np.random.choice(np.delete(np.arange(population_size), i), 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = a + (self.mutation_factor_init - mutation_factor_change * eval_count) * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cross_prob:\n                        trial[j] = mutant[j]\n\n                trial_score = func(trial)\n                eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.population[i] = trial\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial\n                if eval_count >= self.budget:\n                    break\n\n            self.inertia_weight *= inertia_dampening\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedHybridPSODE", "description": "EnhancedHybridPSODE with dynamic parameter tuning and adaptive population control for faster convergence.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "af9c7347-3908-47a4-bd67-990d4874ebde", "metadata": {"aucs": [0.854841170199753, 0.8337434860933706, 0.8469967212274282, 0.8455483575894931, 0.8180411099900293, 0.8538268412181504, 0.8661472530299321, 0.8586874660363351, 0.8309962951446832, 0.7294235129780255, 0.6998937295171335, 0.6094117259358, 0.7323993392336852, 0.7178626996713835, 0.7527717430435938, 0.7303553160756826, 0.7398023539588414, 0.7345810602280723, 0.14931063233199515, 0.13351555112136448, 0.6622369060538811, 0.14066429175160333, 0.1726157421192509, 0.13536244333222003, 0.16927292151669604, 0.17310903385891174, 0.16665051046678891, 0.10286767970176403, 0.11062674053789101, 0.09841548178142223, 0.11766048483176039, 0.13749285478756756, 0.1497628696663631, 0.12877821416404456, 0.10536676396505973, 0.14711824380142302, 0.9856512933902406, 0.9787812971815051, 0.9884286877792379, 0.9839714483074401, 0.9785587651669921, 0.9797841168656637, 0.9905617241107126, 0.9770933132040401, 0.9833577911084052, 0.7048655414793028, 0.7211467168240129, 0.7052216937557363, 0.7191710474747863, 0.14908004501186256, 0.7445236695618853, 0.7205652174423838, 0.5511206013439216, 0.6527132167092512, 0.3481079237327044, 0.2220022876779414, 0.22260963171491, 0.2773721531139688, 0.8106141678517857, 0.193143748525206, 0.7282030748672175, 0.2380711802780806, 0.1150872978406785, 0.15842663143275082, 0.12928270349161397, 0.1819346820411205, 0.16708296455829608, 0.20992905560266106, 0.12237661338006744, 0.3351147961480979, 0.19017807601288228, 0.21338139704086945, 0.18076589346594996, 0.13757489068267315, 0.22643758141871184, 0.18454500747880243, 0.24556725003162827, 0.18134559209726409, 0.22223500435779941, 0.13360190580985276, 0.12530423963151405, 9.999999999998899e-05, 0.04106590289391676, 0.009052554914146471, 9.999999999998899e-05, 0.035304986290289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07486847503284044, 0.07747999204176736, 0.03671692122265646, 0.12597768691781308, 0.08375568218519003, 9.999999999998899e-05, 0.025237010735392862, 0.09410909002513912, 0.0728437426819526, 0.042060846996438195, 0.046510822810082564, 0.07634599429344835, 0.1226496143325938, 0.09744350257911849, 0.14932735382092965, 0.07586047305840182, 0.2842119416221408, 0.08389114588004398, 0.08772702619431327, 0.06467686522928273, 9.999999999998899e-05, 0.1307702082894382, 0.00630684225609679, 0.20421519971616386, 0.08524348655987957, 0.19106498023883534, 0.04781213433341358, 0.09314857491772333, 0.5185871615500623, 0.5649049736705083, 0.5689980628370421, 0.5514152013975806, 0.5490509555687053, 0.20790007435716462, 0.5973916126254126, 0.6530010078799888, 0.5781118929648357, 0.08304826450485725, 0.07600267204559463, 0.11491859562690787, 0.12362571842962733, 0.13043972677666205, 0.13716767684518238, 0.12653952287696635, 0.13657113960499223, 0.09709974675359878, 0.14374469357949093, 0.18695456979770098, 0.18923957478194653, 0.2981175702971416, 0.24944309371380124, 0.1406468119143186, 0.3294200634479776, 0.17120108790425115, 0.28248616584533215, 0.48908365950123567, 0.6094958590761, 0.6544264222405355, 0.2899814886249241, 0.5453506268139661, 0.36763381267556094, 0.4436084820302868, 0.49875119412574753, 0.5928333162885812, 0.32402022101522454, 0.25792803367766615, 0.2829233453807415, 0.4076522537381234, 0.2622079541846637, 0.32710742616195454, 0.3432538164896639, 0.23390776228649435, 0.30096566980124007, 0.25365634866961995, 0.18875259829404345, 0.267932015646579, 0.20209338773698615, 0.21300809713335944, 0.23998942892561703, 0.24237800148333477, 0.22644071122299358, 0.246895492041457, 0.2407489637587219, 0.7381993016559744, 0.24476307319944546, 0.7596076646020812, 0.238690415179029, 0.2126182009475257, 0.21898585008086835, 0.21703275509314346, 0.2161411307226221, 0.8804029305720451, 0.878470043102824, 0.154132523530214, 0.882908229087604, 0.19873057126016025, 0.19745108635270425, 0.8419510619466086, 0.16897779637434018, 0.8931557330242321, 0.7672084987916588, 0.1683188460864965, 0.2078508423927442, 0.7558544886253658, 0.16710346584180424, 0.2089793176375876, 0.2082782456388691, 0.7949888960681359, 0.8308106177184313, 0.19654164232329197, 0.19487711470545, 0.19335537842386907, 0.19706767001895187, 0.21178877924311013, 0.21062142901655512, 0.20665390909466186, 0.18865726577078357, 0.18353189923188806, 0.09784604018523879, 0.09464449116249218, 0.09282370571545195, 0.08584127053615209, 0.08156069572947378, 0.089102552583189, 0.13650074412598556, 0.07560180769216351, 0.07904243372709896]}, "mutation_prompt": null}
{"id": "6fb73487-2677-4f11-847b-19116e05e705", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 32  # Slightly increased initial population\n        self.final_population_size = 24  # More dynamic population resizing\n        self.inertia_weight = 0.59  # Further reduced inertia weight for quicker convergence\n        self.cognitive_coeff = 1.8  # Increased to further enhance exploration\n        self.social_coeff = 1.3  # Slightly decreased to improve balance\n        self.mutation_factor_init = 0.88  # Adjusted mutation factor for diversity\n        self.cross_prob = 0.96  # Higher cross probability for more aggressive trial acceptance\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.initial_population_size, dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.initial_population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        eval_count = 0\n        inertia_dampening = 0.99  # Adjusted for slightly faster dampening\n        mutation_factor_change = (self.mutation_factor_init - 0.5) / self.budget\n\n        while eval_count < self.budget:\n            population_size = self.initial_population_size - int(\n                (eval_count / self.budget) * (self.initial_population_size - self.final_population_size))\n\n            for i in range(population_size):\n                score = func(self.population[i])\n                eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n                if eval_count >= self.budget:\n                    break\n\n            r1 = np.random.rand(population_size, self.dim)\n            r2 = np.random.rand(population_size, self.dim)\n            cognitive_component = self.cognitive_coeff * r1 * (self.personal_best_positions[:population_size] - self.population[:population_size])\n            social_component = self.social_coeff * r2 * (self.global_best_position - self.population[:population_size])\n            self.velocities[:population_size] = (self.inertia_weight * self.velocities[:population_size]) + cognitive_component + social_component\n            self.population[:population_size] = self.population[:population_size] + self.velocities[:population_size]\n\n            self.population[:population_size] = np.clip(self.population[:population_size], self.lower_bound, self.upper_bound)\n\n            for i in range(population_size):\n                indices = np.random.choice(np.delete(np.arange(population_size), i), 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = a + (self.mutation_factor_init - mutation_factor_change * eval_count) * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cross_prob:\n                        trial[j] = mutant[j]\n\n                trial_score = func(trial)\n                eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.population[i] = trial\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial\n                if eval_count >= self.budget:\n                    break\n\n            self.inertia_weight *= inertia_dampening\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedHybridPSODE", "description": "EnhancedHybridPSODE with dynamic parameter tuning and adaptive population control for faster convergence.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "af9c7347-3908-47a4-bd67-990d4874ebde", "metadata": {"aucs": [0.854841170199753, 0.8337434860933706, 0.8469967212274282, 0.8455483575894931, 0.8180411099900293, 0.8538268412181504, 0.8661472530299321, 0.8586874660363351, 0.8309962951446832, 0.7294235129780255, 0.6998937295171335, 0.6094117259358, 0.7323993392336852, 0.7178626996713835, 0.7527717430435938, 0.7303553160756826, 0.7398023539588414, 0.7345810602280723, 0.14931063233199515, 0.13351555112136448, 0.6622369060538811, 0.14066429175160333, 0.1726157421192509, 0.13536244333222003, 0.16927292151669604, 0.17310903385891174, 0.16665051046678891, 0.10286767970176403, 0.11062674053789101, 0.09841548178142223, 0.11766048483176039, 0.13749285478756756, 0.1497628696663631, 0.12877821416404456, 0.10536676396505973, 0.14711824380142302, 0.9856512933902406, 0.9787812971815051, 0.9884286877792379, 0.9839714483074401, 0.9785587651669921, 0.9797841168656637, 0.9905617241107126, 0.9770933132040401, 0.9833577911084052, 0.7048655414793028, 0.7211467168240129, 0.7052216937557363, 0.7191710474747863, 0.14908004501186256, 0.7445236695618853, 0.7205652174423838, 0.5511206013439216, 0.6527132167092512, 0.3481079237327044, 0.2220022876779414, 0.22260963171491, 0.2773721531139688, 0.8106141678517857, 0.193143748525206, 0.7282030748672175, 0.2380711802780806, 0.1150872978406785, 0.15842663143275082, 0.12928270349161397, 0.1819346820411205, 0.16708296455829608, 0.20992905560266106, 0.12237661338006744, 0.3351147961480979, 0.19017807601288228, 0.21338139704086945, 0.18076589346594996, 0.13757489068267315, 0.22643758141871184, 0.18454500747880243, 0.24556725003162827, 0.18134559209726409, 0.22223500435779941, 0.13360190580985276, 0.12530423963151405, 9.999999999998899e-05, 0.04106590289391676, 0.009052554914146471, 9.999999999998899e-05, 0.035304986290289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07486847503284044, 0.07747999204176736, 0.03671692122265646, 0.12597768691781308, 0.08375568218519003, 9.999999999998899e-05, 0.025237010735392862, 0.09410909002513912, 0.0728437426819526, 0.042060846996438195, 0.046510822810082564, 0.07634599429344835, 0.1226496143325938, 0.09744350257911849, 0.14932735382092965, 0.07586047305840182, 0.2842119416221408, 0.08389114588004398, 0.08772702619431327, 0.06467686522928273, 9.999999999998899e-05, 0.1307702082894382, 0.00630684225609679, 0.20421519971616386, 0.08524348655987957, 0.19106498023883534, 0.04781213433341358, 0.09314857491772333, 0.5185871615500623, 0.5649049736705083, 0.5689980628370421, 0.5514152013975806, 0.5490509555687053, 0.20790007435716462, 0.5973916126254126, 0.6530010078799888, 0.5781118929648357, 0.08304826450485725, 0.07600267204559463, 0.11491859562690787, 0.12362571842962733, 0.13043972677666205, 0.13716767684518238, 0.12653952287696635, 0.13657113960499223, 0.09709974675359878, 0.14374469357949093, 0.18695456979770098, 0.18923957478194653, 0.2981175702971416, 0.24944309371380124, 0.1406468119143186, 0.3294200634479776, 0.17120108790425115, 0.28248616584533215, 0.48908365950123567, 0.6094958590761, 0.6544264222405355, 0.2899814886249241, 0.5453506268139661, 0.36763381267556094, 0.4436084820302868, 0.49875119412574753, 0.5928333162885812, 0.32402022101522454, 0.25792803367766615, 0.2829233453807415, 0.4076522537381234, 0.2622079541846637, 0.32710742616195454, 0.3432538164896639, 0.23390776228649435, 0.30096566980124007, 0.25365634866961995, 0.18875259829404345, 0.267932015646579, 0.20209338773698615, 0.21300809713335944, 0.23998942892561703, 0.24237800148333477, 0.22644071122299358, 0.246895492041457, 0.2407489637587219, 0.7381993016559744, 0.24476307319944546, 0.7596076646020812, 0.238690415179029, 0.2126182009475257, 0.21898585008086835, 0.21703275509314346, 0.2161411307226221, 0.8804029305720451, 0.878470043102824, 0.154132523530214, 0.882908229087604, 0.19873057126016025, 0.19745108635270425, 0.8419510619466086, 0.16897779637434018, 0.8931557330242321, 0.7672084987916588, 0.1683188460864965, 0.2078508423927442, 0.7558544886253658, 0.16710346584180424, 0.2089793176375876, 0.2082782456388691, 0.7949888960681359, 0.8308106177184313, 0.19654164232329197, 0.19487711470545, 0.19335537842386907, 0.19706767001895187, 0.21178877924311013, 0.21062142901655512, 0.20665390909466186, 0.18865726577078357, 0.18353189923188806, 0.09784604018523879, 0.09464449116249218, 0.09282370571545195, 0.08584127053615209, 0.08156069572947378, 0.089102552583189, 0.13650074412598556, 0.07560180769216351, 0.07904243372709896]}, "mutation_prompt": null}
{"id": "93772672-a676-494e-ab33-3618fefa867a", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 32\n        self.final_population_size = 24\n        self.inertia_weight = 0.57  # Reduced inertia weight slightly for faster velocity reduction\n        self.cognitive_coeff = 1.85  # Increased cognitive coefficient to enhance exploration\n        self.social_coeff = 1.35  # Adjusted slightly to maintain balance\n        self.mutation_factor_init = 0.87  # Slightly decreased to improve diversity control\n        self.cross_prob = 0.97  # Increased crossover probability for more aggressive genetic diversity\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.initial_population_size, dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.initial_population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        eval_count = 0\n        inertia_dampening = 0.985  # Slightly faster dampening for inertia weight\n        mutation_factor_change = (self.mutation_factor_init - 0.5) / self.budget\n\n        while eval_count < self.budget:\n            population_size = self.initial_population_size - int(\n                (eval_count / self.budget) * (self.initial_population_size - self.final_population_size))\n\n            for i in range(population_size):\n                score = func(self.population[i])\n                eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n                if eval_count >= self.budget:\n                    break\n\n            r1 = np.random.rand(population_size, self.dim)\n            r2 = np.random.rand(population_size, self.dim)\n            cognitive_component = self.cognitive_coeff * r1 * (self.personal_best_positions[:population_size] - self.population[:population_size])\n            social_component = self.social_coeff * r2 * (self.global_best_position - self.population[:population_size])\n            self.velocities[:population_size] = (self.inertia_weight * self.velocities[:population_size]) + cognitive_component + social_component\n            self.population[:population_size] = self.population[:population_size] + self.velocities[:population_size]\n\n            self.population[:population_size] = np.clip(self.population[:population_size], self.lower_bound, self.upper_bound)\n\n            for i in range(population_size):\n                indices = np.random.choice(np.delete(np.arange(population_size), i), 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = a + (self.mutation_factor_init - mutation_factor_change * eval_count) * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cross_prob:\n                        trial[j] = mutant[j]\n\n                trial_score = func(trial)\n                eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.population[i] = trial\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial\n                if eval_count >= self.budget:\n                    break\n\n            self.inertia_weight *= inertia_dampening\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedHybridPSODE", "description": "A slightly adapted EnhancedHybridPSODE with refined parameter tuning for improved convergence speed.", "configspace": "", "generation": 85, "fitness": 0.3085291752383656, "feedback": "The algorithm EnhancedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.27.", "error": "", "parent_id": "af9c7347-3908-47a4-bd67-990d4874ebde", "metadata": {"aucs": [0.8524845290136849, 0.8612952045284668, 0.8671477059900425, 0.8756983012604166, 0.18208319083011104, 0.8808936495820463, 0.8587984056630493, 0.8522621259630744, 0.18302545681487892, 0.7516740060630076, 0.7015393440975038, 0.7566628400539104, 0.6976236290500757, 0.046408510601999464, 0.7509798530841235, 0.7770595494000538, 0.7467467763458198, 0.7424103469376131, 0.10277544570688024, 0.17033663364939933, 0.09763190866170501, 0.17363720437710273, 0.13578810701538224, 0.11807032716719057, 0.1341582703577573, 0.14304883428561188, 0.13602905571459234, 0.1536553810741712, 0.14817331287730717, 0.1063068835489146, 0.0993925741267736, 0.10954728790543156, 0.15141698727964337, 0.16853887434069748, 0.10481852088061883, 0.13734220130874053, 0.9841539534636883, 0.9847769598780555, 0.9882859540472179, 0.9800420119691027, 0.9759343329016379, 0.97825118665693, 0.9905585747780465, 0.9778931853274698, 0.9770460855834485, 0.5186989834012534, 0.7566531122465795, 0.42370570922034223, 0.7352728583462553, 0.1488535731601165, 0.64650731300562, 0.6253107049267885, 0.08837221997180877, 0.7361546776731631, 0.38917338757020525, 0.7861338470213349, 0.16788879435221338, 0.27365274863433875, 0.18866221721290422, 0.37178938694645947, 0.20928604424178143, 0.856514940517945, 0.22957393529595316, 0.11031699844570653, 0.385628355256295, 0.20062334682418037, 0.18070221956880306, 0.18659276206894082, 0.24616485638311203, 0.19529373970115316, 0.47336385869353004, 0.19755224585541398, 0.14818993712109663, 0.10543310226789804, 0.21552335868020078, 0.15615005193243137, 0.1343373911309369, 0.20536654502648677, 0.201003166032945, 9.999999999998899e-05, 0.2421500001776441, 9.999999999998899e-05, 0.006145825327100285, 0.08173143181896103, 0.0006860713276864994, 0.0085040548266887, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0044443508774505425, 0.05558391634782134, 0.14721590738487356, 0.11005846666970742, 0.14019531617381875, 0.018820578455288506, 0.07191312221414392, 0.12402016042355413, 0.10970525791718788, 0.06698623584518304, 0.04693965760639862, 0.22487606907581514, 0.18136448004543948, 0.17380817465603704, 0.09237807679815035, 0.07244607627621247, 0.0967493701675719, 0.07239730234572894, 0.09181817165578254, 0.1715398652030462, 0.04224590078916335, 0.16963058751435078, 0.0064080320118231615, 0.05475607430712626, 0.006131837690889319, 0.05459054240736927, 0.046816405315120435, 0.12913311821732187, 0.5182144485654496, 0.5473353407096379, 0.5411549542331076, 0.5560744655371235, 0.6187330682891108, 0.2074146247332388, 0.5802862349122694, 0.5413042936832115, 0.5932525437110181, 0.09953195608988152, 0.13663166246424152, 0.11302050399145114, 0.08232364168915951, 0.10435693874385998, 0.15103146183316696, 0.10778559481369243, 0.08725896239721331, 0.1528542453672187, 0.18950832139268203, 0.40545742811324703, 0.20275229988174015, 0.17210190529665614, 0.5298500997844352, 0.16499047079766493, 0.4171351239939646, 0.19548299539807434, 0.33032444020516316, 0.2934604673188487, 0.46141391843797497, 0.38333969623420816, 0.3901220160695025, 0.45985237383077815, 0.26334059509350616, 0.49502795801784294, 0.4769859335829275, 0.5489492805343, 0.3696999245967588, 0.41331321150191735, 0.30785758718216283, 0.2218430827683462, 0.1739412257847589, 0.2656279532206539, 0.3017833877137487, 0.4096486297475923, 0.3012345880355045, 0.21560615718159604, 0.21237615102409313, 0.2140872047554806, 0.22250013568125948, 0.19025878848105504, 0.20425991824195044, 0.21398648971605494, 0.2604352080426624, 0.22687352697642238, 0.23978512113491546, 0.1954490831831155, 0.22496866423501205, 0.192042318062274, 0.19210670335454727, 0.20213215801306827, 0.1771281450587685, 0.21990839592257494, 0.19406418574882633, 0.8897386001555667, 0.1616849222140494, 0.15400681292681984, 0.9091511636404734, 0.19847201391484537, 0.1973240364478127, 0.8749281719755607, 0.16988676312347784, 0.9193628152755839, 0.7611803273169857, 0.16829667467675447, 0.16585171282916766, 0.6668516532302189, 0.37253793764133136, 0.20911767520899105, 0.19640569793827778, 0.20684668712918264, 0.10440043371175667, 0.20353740580675972, 0.19139144773606986, 0.19646383327063655, 0.17658205205918442, 0.20135475894528132, 0.19113006211920947, 0.20728659155344875, 0.19610028627737064, 0.18237928122114455, 0.0925116118166317, 0.10212614780779006, 0.0982781712375852, 0.08778582064997498, 0.09841990022959912, 0.09910937199167724, 0.10590000570424496, 0.08861861759184009, 0.08616386823092503]}, "mutation_prompt": null}
{"id": "1103e1de-3d7e-46a7-b4cb-047fa60878b0", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 32\n        self.final_population_size = 22  # Slightly more dynamic resizing\n        self.inertia_weight = 0.58  # Reduced inertia for quicker responsiveness\n        self.cognitive_coeff = 1.85  # Tweaked to enhance exploration in early stages\n        self.social_coeff = 1.25  # Further fine-tuned for better balance\n        self.mutation_factor_init = 0.9  # Small increase to maintain diversity\n        self.cross_prob = 0.94  # Adjusted for balanced trial acceptance\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.initial_population_size, dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.initial_population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        eval_count = 0\n        inertia_dampening = 0.985  # Slightly faster dampening\n        mutation_factor_change = (self.mutation_factor_init - 0.5) / self.budget\n\n        while eval_count < self.budget:\n            population_size = self.initial_population_size - int(\n                (eval_count / self.budget) * (self.initial_population_size - self.final_population_size))\n\n            for i in range(population_size):\n                score = func(self.population[i])\n                eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n                if eval_count >= self.budget:\n                    break\n\n            r1 = np.random.rand(population_size, self.dim)\n            r2 = np.random.rand(population_size, self.dim)\n            cognitive_component = self.cognitive_coeff * r1 * (self.personal_best_positions[:population_size] - self.population[:population_size])\n            social_component = self.social_coeff * r2 * (self.global_best_position - self.population[:population_size])\n            self.velocities[:population_size] = (self.inertia_weight * self.velocities[:population_size]) + cognitive_component + social_component\n            self.population[:population_size] = self.population[:population_size] + self.velocities[:population_size]\n\n            self.population[:population_size] = np.clip(self.population[:population_size], self.lower_bound, self.upper_bound)\n\n            for i in range(population_size):\n                indices = np.random.choice(np.delete(np.arange(population_size), i), 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = a + (self.mutation_factor_init - mutation_factor_change * eval_count) * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cross_prob:\n                        trial[j] = mutant[j]\n\n                trial_score = func(trial)\n                eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.population[i] = trial\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial\n                if eval_count >= self.budget:\n                    break\n\n            self.inertia_weight *= inertia_dampening\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedHybridPSODE", "description": "EnhancedHybridPSODE with refined inertia dampening, adaptive coefficients, and improved diversity for faster convergence.", "configspace": "", "generation": 86, "fitness": 0.30895553942211657, "feedback": "The algorithm EnhancedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.28.", "error": "", "parent_id": "af9c7347-3908-47a4-bd67-990d4874ebde", "metadata": {"aucs": [0.8541832465470977, 0.8386362390440504, 0.8777557787904177, 0.8638518533988357, 0.182160811280365, 0.8640498970352489, 0.872889696679831, 0.7495260088818153, 0.18270835318744572, 0.7519567027692637, 0.7552917405738763, 0.6582413862582213, 0.7547158700670975, 0.7386973122877295, 0.5980006886675714, 0.7645291829866316, 0.7233194553371508, 0.06808356197314258, 0.1330631345353953, 0.17034076712006752, 0.1703693239051669, 0.17325467563750008, 0.15005173775750058, 0.1502255889969476, 0.17005988783681403, 0.1138910686472192, 0.14873714723811904, 0.1045240619928487, 0.14171574511271157, 0.134596282644327, 0.0954028442171404, 0.15303060517876987, 0.12797333489748675, 0.10859727322237045, 0.10101359767641294, 0.10576171982258475, 0.9856557764187025, 0.9779981761879778, 0.9884182046056992, 0.9839706367199247, 0.9756384101579809, 0.9793066985814339, 0.9905637405781205, 0.9773694209530202, 0.9848514641434633, 0.7471468777299016, 0.6783189255713256, 0.7495301711118187, 0.5241847745879464, 0.15070524481135983, 0.5896048620421914, 0.7207536208014743, 0.5935510952307028, 0.7415950241501892, 0.3780766338509457, 0.8242017148817324, 0.7814373119276712, 0.19294769426972935, 0.21468132714867916, 0.20560193614422773, 0.21885885451943743, 0.21541317355961753, 0.23202448851518065, 0.16856686473715055, 0.12304283913919678, 0.1766495856827751, 0.13139001686419993, 0.12509251791212594, 0.15651314564548557, 0.23952121608739196, 0.12864415909290805, 0.15652636571330836, 0.2307069758458984, 0.1951454088708111, 0.12754524269557443, 0.150905355817607, 0.17805315660267662, 0.22563323237256405, 0.20665419611825686, 0.13193499963331468, 0.1262681881522152, 0.054149249294178525, 9.999999999998899e-05, 0.02822937912018786, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05096531545049343, 9.999999999998899e-05, 9.999999999998899e-05, 0.09440469035674237, 0.06337126835674678, 0.1579203950132818, 0.12027441850047582, 0.016181090487345506, 0.04900947426757507, 0.17580474367942822, 0.060287368561332766, 0.055482672332659244, 0.048543636710396076, 0.03433296703450428, 0.21891230536336403, 0.12692875969306783, 0.09439651314660447, 0.10094814904248017, 0.09587727528010581, 0.10015467074489748, 0.07109581052494718, 0.07667064168103521, 0.04149049284083961, 0.2027992783574224, 0.00629747757446808, 0.07396738035307282, 0.07955276998051597, 0.08686512818246594, 0.054902374041796986, 0.08123586711955288, 0.5575291054192465, 0.5143945014330829, 0.6101975516171633, 0.5918222517101417, 0.5775189151656124, 0.5500786689705779, 0.5711219237776929, 0.5680008775904698, 0.5654799201158682, 0.11169463690354076, 0.07892400236276242, 0.09261747165852663, 0.17915631572899327, 0.12535369234700844, 0.11727090479255509, 0.09890224870458719, 0.11109616618559592, 0.1114087121881202, 0.20533667253183174, 0.22771428819947803, 0.3148240051999769, 0.2669759962098306, 0.3278136986782271, 0.18808746628895656, 0.1909689834404107, 0.194175136061297, 0.19217265604198774, 0.2845003411623922, 0.37434568262038614, 0.396756193889072, 0.40387418155743804, 0.21245460810054317, 0.26955795300629226, 0.4296722600198817, 0.528699715556739, 0.46200439475915556, 0.24782868329154395, 0.4149048853452685, 0.2899641964885039, 0.2751395120355157, 0.22727297938133284, 0.25111594077307564, 0.2979340364389029, 0.2757293824559064, 0.3334755641715814, 0.2208021663550913, 0.20473876012660297, 0.1979631655231162, 0.19547822969888307, 0.24072236391860502, 0.19382287673672893, 0.1982689337312289, 0.22216625597224982, 0.2069015451445434, 0.20988860661631903, 0.22056241359577322, 0.20786108408941328, 0.7526486095105547, 0.1781944203866458, 0.1962213183671604, 0.24682308588538382, 0.18249976365346898, 0.19181713800379352, 0.9109717093118057, 0.4264031851583796, 0.15357935713870396, 0.9058065615512002, 0.20085310332175355, 0.19792400872356908, 0.0996903590978383, 0.1693430251907635, 0.9086147139787354, 0.870628162320933, 0.21156725725694747, 0.7795445977098135, 0.7066801645098463, 0.2235279461821078, 0.20889093280655757, 0.1282143862888857, 0.7228489124361527, 0.1119819009022256, 0.20841849702663362, 0.17540241104324195, 0.19746029930780018, 0.23691300459500575, 0.18856079495709588, 0.1972008121701443, 0.17801186824429782, 0.20183680143655391, 0.19316421621946545, 0.10549900842134374, 0.08799545606383186, 0.10299544244381886, 0.08937383965468815, 0.09785968555903923, 0.09606866165505201, 0.12841314872346588, 0.08409900151320893, 0.09074739308256308]}, "mutation_prompt": null}
{"id": "229cdd91-ea98-4f19-bbbc-5a6467339a48", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 34  # Slightly increased initial population\n        self.final_population_size = 26  # More dynamic population resizing\n        self.inertia_weight = 0.57  # Further reduced inertia for quicker convergence\n        self.cognitive_coeff = 1.85  # Increased for enhanced exploration\n        self.social_coeff = 1.35  # Slightly adjusted for better balance\n        self.mutation_factor_init = 0.86  # Modified mutation factor for diversity\n        self.cross_prob = 0.94  # Adjusted cross probability for trial acceptance\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.initial_population_size, dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.initial_population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n        self.random_restart_threshold = 0.07  # New parameter for random restarts\n\n    def __call__(self, func):\n        eval_count = 0\n        inertia_dampening = 0.985  # Slightly faster dampening\n        mutation_factor_change = (self.mutation_factor_init - 0.5) / self.budget\n        restart_counter = 0\n\n        while eval_count < self.budget:\n            population_size = self.initial_population_size - int(\n                (eval_count / self.budget) * (self.initial_population_size - self.final_population_size))\n\n            for i in range(population_size):\n                score = func(self.population[i])\n                eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n                if eval_count >= self.budget:\n                    break\n\n            r1 = np.random.rand(population_size, self.dim)\n            r2 = np.random.rand(population_size, self.dim)\n            cognitive_component = self.cognitive_coeff * r1 * (self.personal_best_positions[:population_size] - self.population[:population_size])\n            social_component = self.social_coeff * r2 * (self.global_best_position - self.population[:population_size])\n            self.velocities[:population_size] = (self.inertia_weight * self.velocities[:population_size]) + cognitive_component + social_component\n            self.population[:population_size] = self.population[:population_size] + self.velocities[:population_size]\n\n            self.population[:population_size] = np.clip(self.population[:population_size], self.lower_bound, self.upper_bound)\n\n            for i in range(population_size):\n                indices = np.random.choice(np.delete(np.arange(population_size), i), 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = a + (self.mutation_factor_init - mutation_factor_change * eval_count) * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cross_prob:\n                        trial[j] = mutant[j]\n\n                trial_score = func(trial)\n                eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.population[i] = trial\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial\n                if eval_count >= self.budget:\n                    break\n\n            self.inertia_weight *= inertia_dampening\n\n            if eval_count / self.budget > self.random_restart_threshold:\n                restart_counter += 1\n                if restart_counter % int(1 / self.random_restart_threshold) == 0:\n                    restart_index = np.random.randint(0, population_size)\n                    self.population[restart_index] = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedHybridPSODE", "description": "EnhancedHybridPSODE with refined parameter adjustments and novel random restart strategy for improved convergence.", "configspace": "", "generation": 87, "fitness": 0.30758261631514194, "feedback": "The algorithm EnhancedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.27.", "error": "", "parent_id": "af9c7347-3908-47a4-bd67-990d4874ebde", "metadata": {"aucs": [0.8431251019604464, 0.8536690857925804, 0.866003046831708, 0.8617763214936561, 0.1887554979753301, 0.8622896766441617, 0.8551325494319483, 0.8575651000847296, 0.8675413530112762, 0.7436816659235272, 0.7451113657697123, 0.7042363702417243, 0.7397521856801736, 0.6028965092640359, 0.7193657476763177, 0.05017904534098472, 0.7571190735223293, 0.6020313216752169, 0.13311412978907444, 0.11430187470841757, 0.14725530542858944, 0.1342712483894165, 0.12385193617879287, 0.13285909885267844, 0.17026079007452177, 0.1228798594906626, 0.1327879364006158, 0.14843455121892746, 0.10316733563573288, 0.1355480268209649, 0.12267075013143003, 0.1028830735573596, 0.14814858007962828, 0.14280565676427992, 0.12792279259884476, 0.1074971455224808, 0.9829521546676151, 0.9849645348834025, 0.9831181023200232, 0.9741479704023331, 0.9826245044326032, 0.9790110504538697, 0.9832667765481204, 0.978380311151235, 0.9807635193065806, 0.6509432192627496, 0.40124173624681503, 0.616782958506471, 0.7021405861015009, 0.4757562923513615, 0.6981834881416961, 0.5900527684092753, 0.569121801979728, 0.6251029090736346, 0.3866239985400022, 0.3404234513362565, 0.22608402134708916, 0.27404490684940797, 0.18980448377916215, 0.27513072590416277, 0.8321581369488531, 0.1262378831016474, 0.8495452625165315, 0.2086231366017257, 0.22838857892101172, 0.2158096819755101, 0.1032139124516458, 0.1903640372214207, 0.12908262939795145, 0.2203655845933017, 0.16554180886751235, 0.16773587387696076, 0.20719372733903063, 0.20301871129130145, 0.17212526774063186, 0.1444889634225368, 0.16409230330733116, 0.18164319403466367, 0.18630302599782322, 0.16922446100060118, 0.12773622264183881, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03848516508234312, 9.999999999998899e-05, 0.01268699237616766, 0.008406175560213391, 9.999999999998899e-05, 0.03694481461726595, 0.1514915606882825, 0.02923817967705178, 0.09668891427529636, 0.08084105441076916, 0.05079788785579242, 0.03012959379770286, 0.118729156402125, 0.061203365840292845, 0.03565720129705552, 0.11567702130520341, 0.03448860681918431, 0.046992149621840285, 0.11841067457061072, 0.13918735264489845, 0.1684499644842683, 0.09497334981788808, 0.09559902537812581, 0.09416147663429741, 0.12979583614766943, 0.04147903256852037, 0.09809366870506842, 0.044581913239260085, 0.026718272506694674, 0.2565632063013088, 0.0427773950588356, 0.054205853644119784, 0.08012251176075824, 0.5740692678819115, 0.5053241978071881, 0.5366985774970543, 0.5635780670848359, 0.5550164041101111, 0.5479651327669023, 0.6007740586235, 0.5628089613778702, 0.5578985185560351, 0.10545333190069284, 0.11406713416617698, 0.08895355988048936, 0.11024930473113836, 0.12405231664500571, 0.11928929188972193, 0.12944820384167066, 0.11054093721673686, 0.08029156577038643, 0.6101640716694574, 0.2649531236162409, 0.2503205413548141, 0.2631627799807903, 0.32589256357406515, 0.18715550797938618, 0.19948650596843065, 0.2375724940624947, 0.306571816323878, 0.3107117273038449, 0.3885719173473854, 0.3013044294297934, 0.45773278957953367, 0.31706793759120555, 0.3410504474506991, 0.458145298911632, 0.6315666714210126, 0.47167144910158953, 0.32990785887040674, 0.20936063482068723, 0.2199829424442581, 0.17993214488472442, 0.29446811077539725, 0.2356579292384109, 0.21541551470765008, 0.27271224634022984, 0.3296705040849447, 0.2202947037021541, 0.21257254061700293, 0.21061080990158265, 0.1897818422415002, 0.26497025172696165, 0.20680009697518376, 0.20347772116077223, 0.23022136170070462, 0.2242868493895247, 0.20881625890357158, 0.19199191485106337, 0.2182125173089453, 0.19811876322809108, 0.21776078882961492, 0.23995678633487816, 0.20464806960140924, 0.23873285094457086, 0.19688783483456407, 0.880094258373643, 0.8913490176168325, 0.15296616291679166, 0.17799352629169518, 0.2001328393214723, 0.1982667817976268, 0.1414113572478709, 0.16793471869281185, 0.8864716201462304, 0.4942011505163446, 0.16778725969251485, 0.3892322746619422, 0.10449235375772947, 0.19818413380961042, 0.7867537432539141, 0.21051170310399292, 0.155451876009433, 0.776096118953528, 0.20376025500086703, 0.19912780826624654, 0.19856797859738817, 0.20599376963150584, 0.19176526611819444, 0.18416074342741362, 0.20903501787663015, 0.20088628614639248, 0.17933318548857657, 0.12343264391045128, 0.08758631620948931, 0.09701929628155359, 0.08357005201478263, 0.09808742326120934, 0.09797287421877299, 0.08618117314054541, 0.0878967934658158, 0.10077943372224085]}, "mutation_prompt": null}
{"id": "8fa10ae5-cc2a-4290-bd23-39e1f31405f1", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 32  # Slightly increased initial population\n        self.final_population_size = 24  # More dynamic population resizing\n        self.inertia_weight = 0.59  # Further reduced inertia weight for quicker convergence\n        self.cognitive_coeff = 1.8  # Increased to further enhance exploration\n        self.social_coeff = 1.3  # Slightly decreased to improve balance\n        self.mutation_factor_init = 0.88  # Adjusted mutation factor for diversity\n        self.cross_prob = 0.96  # Higher cross probability for more aggressive trial acceptance\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.initial_population_size, dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.initial_population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        eval_count = 0\n        inertia_dampening = 0.99  # Adjusted for slightly faster dampening\n        mutation_factor_change = (self.mutation_factor_init - 0.5) / self.budget\n\n        while eval_count < self.budget:\n            population_size = self.initial_population_size - int(\n                (eval_count / self.budget) * (self.initial_population_size - self.final_population_size))\n\n            for i in range(population_size):\n                score = func(self.population[i])\n                eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n                if eval_count >= self.budget:\n                    break\n\n            r1 = np.random.rand(population_size, self.dim)\n            r2 = np.random.rand(population_size, self.dim)\n            cognitive_component = self.cognitive_coeff * r1 * (self.personal_best_positions[:population_size] - self.population[:population_size])\n            social_component = self.social_coeff * r2 * (self.global_best_position - self.population[:population_size])\n            self.velocities[:population_size] = (self.inertia_weight * self.velocities[:population_size]) + cognitive_component + social_component\n            self.population[:population_size] = self.population[:population_size] + self.velocities[:population_size]\n\n            self.population[:population_size] = np.clip(self.population[:population_size], self.lower_bound, self.upper_bound)\n\n            for i in range(population_size):\n                indices = np.random.choice(np.delete(np.arange(population_size), i), 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = a + (self.mutation_factor_init - mutation_factor_change * eval_count) * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cross_prob:\n                        trial[j] = mutant[j]\n\n                trial_score = func(trial)\n                eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.population[i] = trial\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial\n                if eval_count >= self.budget:\n                    break\n\n            self.inertia_weight *= inertia_dampening\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedHybridPSODE", "description": "EnhancedHybridPSODE with dynamic parameter tuning and adaptive population control for faster convergence.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "af9c7347-3908-47a4-bd67-990d4874ebde", "metadata": {"aucs": [0.854841170199753, 0.8337434860933706, 0.8469967212274282, 0.8455483575894931, 0.8180411099900293, 0.8538268412181504, 0.8661472530299321, 0.8586874660363351, 0.8309962951446832, 0.7294235129780255, 0.6998937295171335, 0.6094117259358, 0.7323993392336852, 0.7178626996713835, 0.7527717430435938, 0.7303553160756826, 0.7398023539588414, 0.7345810602280723, 0.14931063233199515, 0.13351555112136448, 0.6622369060538811, 0.14066429175160333, 0.1726157421192509, 0.13536244333222003, 0.16927292151669604, 0.17310903385891174, 0.16665051046678891, 0.10286767970176403, 0.11062674053789101, 0.09841548178142223, 0.11766048483176039, 0.13749285478756756, 0.1497628696663631, 0.12877821416404456, 0.10536676396505973, 0.14711824380142302, 0.9856512933902406, 0.9787812971815051, 0.9884286877792379, 0.9839714483074401, 0.9785587651669921, 0.9797841168656637, 0.9905617241107126, 0.9770933132040401, 0.9833577911084052, 0.7048655414793028, 0.7211467168240129, 0.7052216937557363, 0.7191710474747863, 0.14908004501186256, 0.7445236695618853, 0.7205652174423838, 0.5511206013439216, 0.6527132167092512, 0.3481079237327044, 0.2220022876779414, 0.22260963171491, 0.2773721531139688, 0.8106141678517857, 0.193143748525206, 0.7282030748672175, 0.2380711802780806, 0.1150872978406785, 0.15842663143275082, 0.12928270349161397, 0.1819346820411205, 0.16708296455829608, 0.20992905560266106, 0.12237661338006744, 0.3351147961480979, 0.19017807601288228, 0.21338139704086945, 0.18076589346594996, 0.13757489068267315, 0.22643758141871184, 0.18454500747880243, 0.24556725003162827, 0.18134559209726409, 0.22223500435779941, 0.13360190580985276, 0.12530423963151405, 9.999999999998899e-05, 0.04106590289391676, 0.009052554914146471, 9.999999999998899e-05, 0.035304986290289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07486847503284044, 0.07747999204176736, 0.03671692122265646, 0.12597768691781308, 0.08375568218519003, 9.999999999998899e-05, 0.025237010735392862, 0.09410909002513912, 0.0728437426819526, 0.042060846996438195, 0.046510822810082564, 0.07634599429344835, 0.1226496143325938, 0.09744350257911849, 0.14932735382092965, 0.07586047305840182, 0.2842119416221408, 0.08389114588004398, 0.08772702619431327, 0.06467686522928273, 9.999999999998899e-05, 0.1307702082894382, 0.00630684225609679, 0.20421519971616386, 0.08524348655987957, 0.19106498023883534, 0.04781213433341358, 0.09314857491772333, 0.5185871615500623, 0.5649049736705083, 0.5689980628370421, 0.5514152013975806, 0.5490509555687053, 0.20790007435716462, 0.5973916126254126, 0.6530010078799888, 0.5781118929648357, 0.08304826450485725, 0.07600267204559463, 0.11491859562690787, 0.12362571842962733, 0.13043972677666205, 0.13716767684518238, 0.12653952287696635, 0.13657113960499223, 0.09709974675359878, 0.14374469357949093, 0.18695456979770098, 0.18923957478194653, 0.2981175702971416, 0.24944309371380124, 0.1406468119143186, 0.3294200634479776, 0.17120108790425115, 0.28248616584533215, 0.48908365950123567, 0.6094958590761, 0.6544264222405355, 0.2899814886249241, 0.5453506268139661, 0.36763381267556094, 0.4436084820302868, 0.49875119412574753, 0.5928333162885812, 0.32402022101522454, 0.25792803367766615, 0.2829233453807415, 0.4076522537381234, 0.2622079541846637, 0.32710742616195454, 0.3432538164896639, 0.23390776228649435, 0.30096566980124007, 0.25365634866961995, 0.18875259829404345, 0.267932015646579, 0.20209338773698615, 0.21300809713335944, 0.23998942892561703, 0.24237800148333477, 0.22644071122299358, 0.246895492041457, 0.2407489637587219, 0.7381993016559744, 0.24476307319944546, 0.7596076646020812, 0.238690415179029, 0.2126182009475257, 0.21898585008086835, 0.21703275509314346, 0.2161411307226221, 0.8804029305720451, 0.878470043102824, 0.154132523530214, 0.882908229087604, 0.19873057126016025, 0.19745108635270425, 0.8419510619466086, 0.16897779637434018, 0.8931557330242321, 0.7672084987916588, 0.1683188460864965, 0.2078508423927442, 0.7558544886253658, 0.16710346584180424, 0.2089793176375876, 0.2082782456388691, 0.7949888960681359, 0.8308106177184313, 0.19654164232329197, 0.19487711470545, 0.19335537842386907, 0.19706767001895187, 0.21178877924311013, 0.21062142901655512, 0.20665390909466186, 0.18865726577078357, 0.18353189923188806, 0.09784604018523879, 0.09464449116249218, 0.09282370571545195, 0.08584127053615209, 0.08156069572947378, 0.089102552583189, 0.13650074412598556, 0.07560180769216351, 0.07904243372709896]}, "mutation_prompt": null}
{"id": "61a80017-7b8a-4127-8197-d93dd06b725c", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 32\n        self.final_population_size = 24\n        self.inertia_weight = 0.57  # Slightly reduced inertia weight for quicker convergence\n        self.cognitive_coeff = 1.85  # Slightly increased to enhance exploration\n        self.social_coeff = 1.25  # Slightly decreased for better balance\n        self.mutation_factor_init = 0.9  # Adjusted for more diversity\n        self.cross_prob = 0.98  # Increased crossover probability for aggressive acceptance\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.initial_population_size, dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.initial_population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        eval_count = 0\n        inertia_dampening = 0.985  # Faster dampening for enhanced convergence\n        mutation_factor_change = (self.mutation_factor_init - 0.5) / self.budget\n\n        while eval_count < self.budget:\n            population_size = self.initial_population_size - int(\n                (eval_count / self.budget) * (self.initial_population_size - self.final_population_size))\n\n            for i in range(population_size):\n                score = func(self.population[i])\n                eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n                if eval_count >= self.budget:\n                    break\n\n            r1 = np.random.rand(population_size, self.dim)\n            r2 = np.random.rand(population_size, self.dim)\n            cognitive_component = self.cognitive_coeff * r1 * (self.personal_best_positions[:population_size] - self.population[:population_size])\n            social_component = self.social_coeff * r2 * (self.global_best_position - self.population[:population_size])\n            self.velocities[:population_size] = (self.inertia_weight * self.velocities[:population_size]) + cognitive_component + social_component\n            self.population[:population_size] += self.velocities[:population_size]\n\n            self.population[:population_size] = np.clip(self.population[:population_size], self.lower_bound, self.upper_bound)\n\n            for i in range(population_size):\n                indices = np.random.choice(np.delete(np.arange(population_size), i), 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = a + (self.mutation_factor_init - mutation_factor_change * eval_count) * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cross_prob:\n                        trial[j] = mutant[j]\n\n                trial_score = func(trial)\n                eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.population[i] = trial\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial\n                if eval_count >= self.budget:\n                    break\n\n            self.inertia_weight *= inertia_dampening\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedHybridPSODE", "description": "EnhancedHybridPSODE with refined inertia and mutation strategies for improved convergence.", "configspace": "", "generation": 89, "fitness": 0.30914429381985886, "feedback": "The algorithm EnhancedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.28.", "error": "", "parent_id": "af9c7347-3908-47a4-bd67-990d4874ebde", "metadata": {"aucs": [0.8738883595732903, 0.8679266501708363, 0.8688302852533657, 0.8762064968261893, 0.18229742659697212, 0.8792433152923049, 0.8714311447487786, 0.7932159612833825, 0.8759609353634527, 0.7547650437445307, 0.751356362560909, 0.7329647964928476, 0.5438673265564958, 0.18922194261168868, 0.7615001845834053, 0.7653965034352723, 0.7648432690233293, 0.7531131682456703, 0.1807032234011131, 0.13736382146704507, 0.12690208597332897, 0.13699957224413062, 0.13037150844422618, 0.7286377014433641, 0.17676422381497936, 0.16993485496858007, 0.1284549852727509, 0.10712100063540198, 0.12058688998404343, 0.1450674396474213, 0.121387171834617, 0.12657507448141136, 0.13281293124912041, 0.08202130539264674, 0.1334712346226815, 0.12073890396101028, 0.9833919798254458, 0.9788784527975196, 0.9844401976759725, 0.9791823547638868, 0.9772469511163503, 0.9795639462817193, 0.9904446465048189, 0.9716371024865054, 0.9848922861460128, 0.5690858612344317, 0.7209114221746142, 0.7628023094008267, 0.5287118025536786, 0.5542564288561176, 0.5336778738500871, 0.4705645549609616, 0.08797261534142453, 0.636408058251959, 0.22753109459708665, 0.2129525870105119, 0.21935276988883146, 0.20726018925750944, 0.2690988174299409, 0.19987244309534968, 0.12591098355171104, 0.15037535809528668, 0.22977323570979413, 0.12273705056367057, 0.12805582420408246, 0.13064487880505382, 0.17987084382062457, 0.12447452221725597, 0.1621476227646963, 0.18452704866026126, 0.1267349849404893, 0.16861295093471906, 0.18234351937493598, 0.12640653139551128, 0.15120121823502342, 0.15144499326115712, 0.19288738502035674, 0.18133769945355027, 0.21554121919677216, 0.1401279694495835, 0.31461196838964856, 9.999999999998899e-05, 9.999999999998899e-05, 0.010983698867381597, 9.999999999998899e-05, 9.999999999998899e-05, 0.0077914479945682125, 9.999999999998899e-05, 9.999999999998899e-05, 0.13647648079712327, 0.07722530413502737, 0.09413647445672957, 0.08565097741481187, 0.10277198791164832, 0.022752431981022503, 0.006742048410731005, 0.14437496157663632, 0.10552067919495944, 0.07116615478571098, 0.03537865451263411, 0.18653359717603057, 0.15747703000898328, 0.09326084958118042, 0.0919595011706511, 0.0760071032410855, 0.09864798653366158, 0.12585434336861345, 0.06907234219171277, 0.011107436323131492, 0.04745605417504051, 0.10817011824635014, 0.00627432829237673, 0.39137015573953027, 0.07881901093664434, 0.1829896041741902, 0.041843501791014925, 0.08310536318625705, 0.5387063049798712, 0.5480748617615661, 0.6085615966005485, 0.655940493806796, 0.5650149092797448, 0.5422307811383364, 0.527880196731114, 0.5440594766061232, 0.5731595325630594, 0.1256927289351505, 0.06702671412081074, 0.08357592945128056, 0.14533136491291243, 0.09120298696297213, 0.1693173335013718, 0.09049039700735506, 0.1027598290823909, 0.09600394256724698, 0.29984483064114753, 0.26003542535904256, 0.16494466691134058, 0.15468327118874736, 0.3407445750352728, 0.2047514061398359, 0.6024565102532748, 0.18308871450220798, 0.22718432528008914, 0.30216145385983595, 0.24814164004356187, 0.29547153821847716, 0.6492399095379485, 0.4098242555764715, 0.45922222104398247, 0.4618112810949391, 0.6173684743926213, 0.22248727305462246, 0.33116000911224597, 0.25164162488263686, 0.29135567579047483, 0.2843153049499605, 0.19514537630665185, 0.21720007253707452, 0.2992944903517557, 0.3443202837008995, 0.3633300960011733, 0.18833259747337805, 0.19967578636136085, 0.21833699055378264, 0.21582228633747846, 0.2282859797821244, 0.21062499971056625, 0.23937260183929332, 0.20475966819283054, 0.22823995560264254, 0.17815892271938538, 0.2190065872662147, 0.17944386199866857, 0.2257974041557279, 0.20762333752396955, 0.2097849985606649, 0.24576900569916726, 0.2229716046244693, 0.18134637180083713, 0.903016041482805, 0.9079200824551867, 0.15363258978432603, 0.8945138546038807, 0.19878275727850903, 0.19681625531630265, 0.09940391702605189, 0.1697291835992626, 0.9127347213441812, 0.7703340697893362, 0.21186546335602274, 0.6959442073146791, 0.4745038686600961, 0.16660124050818015, 0.20779979996774245, 0.20930319545539522, 0.8105744729468846, 0.30776908140813664, 0.19477582775844537, 0.1823875860957206, 0.19844068240060886, 0.1901088123474186, 0.19154840312671628, 0.19879590405993108, 0.17838413466474723, 0.1809245123764852, 0.19108373547142654, 0.09002949783746395, 0.09629973549630466, 0.0879778776950183, 0.09562763238211014, 0.09676163615136335, 0.09139195918289733, 0.1021037224548983, 0.09108139810797133, 0.08322527628372245]}, "mutation_prompt": null}
{"id": "9570fb73-ed56-4ef8-878e-99d814cf1e6e", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 32\n        self.final_population_size = 24\n        self.inertia_weight = 0.57  # Reduced inertia weight for even faster convergence\n        self.cognitive_coeff = 1.9  # Further increased to enhance personal best attraction\n        self.social_coeff = 1.4  # Increased to boost global best attraction\n        self.mutation_factor_init = 0.9  # Slightly increased mutation factor for more diversity\n        self.cross_prob = 0.97  # Increased cross probability for promoting variability\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.initial_population_size, dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.initial_population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        eval_count = 0\n        inertia_dampening = 0.98  # Slightly faster inertia dampening\n        mutation_factor_change = (self.mutation_factor_init - 0.6) / self.budget  # Adaptive mutation strategy\n\n        while eval_count < self.budget:\n            population_size = self.initial_population_size - int(\n                (eval_count / self.budget) * (self.initial_population_size - self.final_population_size))\n\n            for i in range(population_size):\n                score = func(self.population[i])\n                eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n                if eval_count >= self.budget:\n                    break\n\n            r1 = np.random.rand(population_size, self.dim)\n            r2 = np.random.rand(population_size, self.dim)\n            cognitive_component = self.cognitive_coeff * r1 * (self.personal_best_positions[:population_size] - self.population[:population_size])\n            social_component = self.social_coeff * r2 * (self.global_best_position - self.population[:population_size])\n            self.velocities[:population_size] = (self.inertia_weight * self.velocities[:population_size]) + cognitive_component + social_component\n            self.population[:population_size] = self.population[:population_size] + self.velocities[:population_size]\n\n            self.population[:population_size] = np.clip(self.population[:population_size], self.lower_bound, self.upper_bound)\n\n            for i in range(population_size):\n                indices = np.random.choice(np.delete(np.arange(population_size), i), 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = a + (self.mutation_factor_init - mutation_factor_change * eval_count) * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cross_prob:\n                        trial[j] = mutant[j]\n\n                trial_score = func(trial)\n                eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.population[i] = trial\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial\n                if eval_count >= self.budget:\n                    break\n\n            self.inertia_weight *= inertia_dampening\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedHybridPSODE", "description": "EnhancedHybridPSODE with improved convergence through dynamic learning coefficients and adaptive mutation strategies.", "configspace": "", "generation": 90, "fitness": 0.29804815645424587, "feedback": "The algorithm EnhancedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.28.", "error": "", "parent_id": "af9c7347-3908-47a4-bd67-990d4874ebde", "metadata": {"aucs": [0.8655193257727649, 0.8553494625317991, 0.8866036571029441, 0.8793252612072616, 0.8690221038025071, 0.8806784463355879, 0.8755059583133468, 0.8665542955189888, 0.18286078326892796, 0.7761709320730261, 0.701828610127125, 0.7431245114579204, 0.7642085480032734, 0.04455962237039146, 0.7374080506260624, 0.7155380252761443, 0.017562106830856128, 0.04799650096278296, 0.13363700024283265, 0.14916609023844796, 0.07013486577033123, 0.15445101151546026, 0.11526161413086378, 0.17214781148625702, 0.14059742088912075, 0.17486529311311427, 0.12544400653505705, 0.1370862157477808, 0.1450309296714175, 0.11831104459640451, 0.11285544198145459, 0.11613406122599645, 0.13214815351456766, 0.10606339156932332, 0.1176456748676139, 0.15100361957963393, 0.9841752783723718, 0.9793458146386838, 0.9859861272193223, 0.9846269011012049, 0.9716221714312074, 0.9742921361943632, 0.9905533072569822, 0.9851980990549104, 0.9747785261521431, 0.6966084314905048, 0.7418050328793923, 0.06000212406798999, 0.15076531268861837, 0.2026693091931977, 0.6578045075896486, 0.7504217698434219, 0.4672381901808893, 0.6657747766219309, 0.22466896263964686, 0.8510275367156558, 0.8255385539960947, 0.8819730457905082, 0.19101714155291927, 0.20661634899152137, 0.12855215693211708, 0.48345070166802706, 0.22892646566340025, 0.10509085510320382, 0.1612094986501481, 0.17502568973653598, 0.1504476848642966, 0.12519897267149716, 0.2607599797513185, 0.16187765930204423, 0.17396816431974838, 0.12966509250147407, 0.1592014044279214, 0.0162520024259607, 0.20072956922166796, 0.14524231739488236, 0.17438490924004169, 0.2083393338791648, 0.18825091484684642, 9.999999999998899e-05, 0.2174054564472616, 9.999999999998899e-05, 9.999999999998899e-05, 0.06853494892873169, 0.026307156180201297, 9.999999999998899e-05, 0.03182535016756027, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0652793690327329, 0.07950076271441686, 0.04451929410559774, 0.08589136652333473, 0.03216727125577168, 0.014187068674032743, 0.1756952535285523, 0.13911559482232772, 0.05651303932277418, 0.04671270965682106, 0.07699037565128963, 0.12127743732924778, 0.14440354958040136, 0.09011937525863045, 0.07542460879305002, 0.10229934845600452, 0.07716455161759572, 0.07308004174311389, 0.1688009857141255, 9.999999999998899e-05, 0.21947179148724383, 0.34987481703271917, 0.08785784973751631, 0.006384729708937664, 0.16236649209725473, 0.047937122025337287, 0.09088323401401399, 0.5546778656442845, 0.5917889351950432, 0.5673801563403662, 0.592791436764998, 0.5834557332224629, 0.5363934309741305, 0.583991531185482, 0.6239846355995263, 0.6069323004650945, 0.1392452776755696, 0.12814868578574556, 0.11809566231334268, 0.11287553975241094, 0.11273529401279925, 0.08039030442869877, 0.13592564195376056, 0.08808582043581903, 0.15412615530746987, 0.19932433649364334, 0.1968938742676838, 0.2849959351826161, 0.37732002683038524, 0.2563133008953502, 0.1608054026179383, 0.1543823560575498, 0.15205079038826153, 0.24851631081863934, 0.33723692981049547, 0.4508974282901863, 0.478409206558036, 0.2936458311128878, 0.27090445602106206, 0.38580014575259447, 0.5417864161512405, 0.5561032375397245, 0.49333273257926014, 0.26311736447602285, 0.26936371390180014, 0.48636025524321114, 0.2716391706990826, 0.17403900648099146, 0.2056259510174251, 0.28413477058375103, 0.3921992283156951, 0.3518684844855239, 0.21204047160489958, 0.1933996596273505, 0.2101944490666251, 0.20256140823672808, 0.2211685167606624, 0.21853849193105057, 0.26901035062533907, 0.2508592993161366, 0.21317378696016087, 0.19511732474745813, 0.2211802873047074, 0.252406497334672, 0.22269695627749764, 0.20314853475939643, 0.18631060580204717, 0.21362497454487217, 0.20761882039853807, 0.20540376114079917, 0.16442292782748824, 0.1617363842218269, 0.15360656195082323, 0.8958159416085202, 0.1982362852941284, 0.19791016532898453, 0.12510499952479281, 0.1687657060485872, 0.899554582734308, 0.8357912841444188, 0.21122570566246313, 0.20403100845517674, 0.4151011116158564, 0.16707070479622488, 0.20907961510078588, 0.20909229473250512, 0.20808012699469236, 0.8072692592552332, 0.17638161951620512, 0.21756918702607408, 0.193022195164254, 0.19743349863569215, 0.19805137050578436, 0.1886213834745457, 0.1798466647649446, 0.1835982572141004, 0.1865063636654829, 0.09467318706310013, 0.08842784543149629, 0.10077109154412378, 0.08769943506156419, 0.08864713576332617, 0.089158515245219, 0.11257180125296107, 0.08936428105233263, 0.0859444522446694]}, "mutation_prompt": null}
{"id": "3a7ddd3e-a343-4533-80fc-22dc3453243b", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 32\n        self.final_population_size = 24\n        self.inertia_weight = 0.6  # Slightly adjusted inertia weight for balance\n        self.cognitive_coeff = 1.8\n        self.social_coeff = 1.3\n        self.mutation_factor_init = 0.9  # Increased mutation factor for enhanced diversity\n        self.cross_prob = 0.95  # Adjusted cross probability for exploration-exploitation balance\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.initial_population_size, dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.initial_population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        eval_count = 0\n        inertia_dampening = 0.98  # Slightly faster dampening rate\n        mutation_factor_change = (self.mutation_factor_init - 0.5) / self.budget\n\n        while eval_count < self.budget:\n            population_size = self.initial_population_size - int(\n                (eval_count / self.budget) * (self.initial_population_size - self.final_population_size))\n\n            for i in range(population_size):\n                score = func(self.population[i])\n                eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n                if eval_count >= self.budget:\n                    break\n\n            r1 = np.random.rand(population_size, self.dim)\n            r2 = np.random.rand(population_size, self.dim)\n            cognitive_component = self.cognitive_coeff * r1 * (self.personal_best_positions[:population_size] - self.population[:population_size])\n            social_component = self.social_coeff * r2 * (self.global_best_position - self.population[:population_size])\n            self.velocities[:population_size] = (self.inertia_weight * self.velocities[:population_size]) + cognitive_component + social_component\n            self.population[:population_size] = self.population[:population_size] + self.velocities[:population_size]\n\n            self.population[:population_size] = np.clip(self.population[:population_size], self.lower_bound, self.upper_bound)\n\n            for i in range(population_size):\n                indices = np.random.choice(np.delete(np.arange(population_size), i), 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = a + (self.mutation_factor_init - mutation_factor_change * eval_count) * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cross_prob:\n                        trial[j] = mutant[j]\n\n                trial_score = func(trial)\n                eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.population[i] = trial\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial\n                if eval_count >= self.budget:\n                    break\n\n            self.inertia_weight *= inertia_dampening\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedHybridPSODE", "description": "EnhancedHybridPSODE with adaptive inertia and mutation factors for improved convergence speed.", "configspace": "", "generation": 91, "fitness": 0.30539904637767185, "feedback": "The algorithm EnhancedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.28.", "error": "", "parent_id": "af9c7347-3908-47a4-bd67-990d4874ebde", "metadata": {"aucs": [0.8709428695134711, 0.8563207513767044, 0.8839050074837311, 0.8783096653849959, 0.18205447370968253, 0.8642007646959523, 0.8704203437399087, 0.8677194852469052, 0.8570328110914531, 0.7839304579460832, 9.999999999998899e-05, 0.24043663775839286, 0.7463957838168243, 0.7545450877617551, 0.7715326211702646, 0.7050478033926108, 0.7674718728586417, 0.05323891930682001, 0.7423860532596337, 0.15465005749330973, 0.13923438537212185, 0.14390427152882035, 0.13947034518836499, 0.1118541133994253, 0.154321535865236, 0.12237532397019024, 0.1495428973547268, 0.11518154809825154, 0.10577198886739847, 0.08085285582562773, 0.10809660184894165, 0.13139647042650848, 0.12572928507343872, 0.14398127004155592, 0.09946423171165575, 0.13585896452773705, 0.9858202507048758, 0.9780428365808767, 0.9884329735466668, 0.9839527292516703, 0.9753698633899557, 0.9793870378695569, 0.9905617679535479, 0.9794977284859983, 0.9783347065123194, 0.5419104921062543, 0.6745013085343324, 0.060047721627475736, 0.745536948412743, 0.5657045296482552, 0.5104389058406946, 0.5482005200789973, 0.5361136584495227, 0.7424879079278934, 0.8581418641332202, 0.21904418073057264, 0.8223369777958843, 0.20575949213491784, 0.20970306023629293, 0.19313532529224708, 0.17304713561610274, 0.14999734732026604, 0.23420324179811713, 0.12596479505197133, 0.12703165804409733, 0.12981028091950664, 0.18617064608740908, 0.13179134257538394, 0.12296060429366151, 0.1869608299691199, 0.13272137004041928, 0.1593187873074141, 0.18253133086621942, 0.1198661143030717, 0.1402635185591551, 0.23821309435234295, 0.14805147775632999, 0.21231501535992603, 0.20491642144723377, 0.12847747741627535, 0.1352972704265114, 9.999999999998899e-05, 0.07853840466643691, 0.19383379458318484, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00011714405446527909, 9.999999999998899e-05, 9.999999999998899e-05, 0.09323848183574723, 0.08434000576236145, 0.09181073803284978, 0.13395965484421435, 0.027001013758772063, 0.03809723764918471, 0.08266388745355724, 0.05011837306827094, 0.0563846320964736, 0.048868252088736686, 0.04209056038429859, 0.3581076601252109, 0.10594684463673931, 0.10533077612420294, 0.07644275859715088, 0.09403474484397956, 0.07120991530794585, 0.06976625025799565, 0.027498710969155016, 0.13492926598352173, 0.08279430993924486, 0.006324595294964874, 0.20646354578360893, 0.23319055263047872, 0.17372091114719623, 0.0462958004456675, 0.08081785294636867, 0.5883291490715821, 0.5450746688505146, 0.5335136578815107, 0.6216876065301951, 0.612135915491202, 0.20757795956021896, 0.5606736980115582, 0.5569979126233449, 0.5820500001138326, 0.12389217651941076, 0.12335152305992503, 0.30307930567185437, 0.1370872925763883, 0.10650172958605175, 0.16706176911843884, 0.15179066466497915, 0.11997128240813926, 0.1057148078537894, 0.24551464580288007, 0.1497148565286125, 0.2110018839407628, 0.3306976605411993, 0.2943638335726487, 0.23469948700493204, 0.215495580935672, 0.16938114365204615, 0.20054183025839856, 0.32553857013213794, 0.4861804894600811, 0.3774750113137547, 0.3576469753613011, 0.4033907079997726, 0.6186850357305312, 0.48919967200754966, 0.4202505324087098, 0.5276569712924715, 0.38163281136741134, 0.24083744195464218, 0.2692455711987264, 0.25002902114492187, 0.22822949097003142, 0.3493489989812988, 0.36879320507427316, 0.32137437398638113, 0.18713456209542312, 0.21571916418738035, 0.15960885913610545, 0.2026833576536614, 0.19514626400041601, 0.21607226720874917, 0.1816982660649492, 0.2457549378457553, 0.21157938496012807, 0.22299213465729906, 0.19095477617237544, 0.1977161460437742, 0.2235273261269194, 0.20698961944655636, 0.20521013480178674, 0.22068256884732973, 0.2180584158684623, 0.24593041452770725, 0.2521692502270605, 0.16345546636903585, 0.2621000695754365, 0.1541507481418415, 0.8976460611450224, 0.19900823189485195, 0.19782256090003947, 0.863950773761972, 0.8738110332073035, 0.9040838628622281, 0.7583934120484496, 0.21012022309029366, 0.43834025043871994, 0.5632595200103954, 0.16726440294787082, 0.21006564561810004, 0.12812237630111378, 0.15468883293282054, 0.15411559989289636, 0.20234095057730395, 0.19043054901416978, 0.2012632147274841, 0.20450279889903977, 0.19294250550205982, 0.19625043335484793, 0.19447581243672651, 0.17979436483591305, 0.18256432682918244, 0.11988058445778282, 0.11054942266286194, 0.10205577234592944, 0.08442033353980527, 0.09657138207825122, 0.08312941137957819, 0.12128476099716068, 0.09927241945814935, 0.09643435308213832]}, "mutation_prompt": null}
{"id": "6a284ab4-5a30-42b9-bca7-9fdc13ed142a", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 32  # Slightly increased initial population\n        self.final_population_size = 24  # More dynamic population resizing\n        self.inertia_weight = 0.59  # Further reduced inertia weight for quicker convergence\n        self.cognitive_coeff = 1.8  # Increased to further enhance exploration\n        self.social_coeff = 1.3  # Slightly decreased to improve balance\n        self.mutation_factor_init = 0.88  # Adjusted mutation factor for diversity\n        self.cross_prob = 0.96  # Higher cross probability for more aggressive trial acceptance\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.initial_population_size, dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.initial_population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        eval_count = 0\n        inertia_dampening = 0.99  # Adjusted for slightly faster dampening\n        mutation_factor_change = (self.mutation_factor_init - 0.5) / self.budget\n\n        while eval_count < self.budget:\n            population_size = self.initial_population_size - int(\n                (eval_count / self.budget) * (self.initial_population_size - self.final_population_size))\n\n            for i in range(population_size):\n                score = func(self.population[i])\n                eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n                if eval_count >= self.budget:\n                    break\n\n            r1 = np.random.rand(population_size, self.dim)\n            r2 = np.random.rand(population_size, self.dim)\n            cognitive_component = self.cognitive_coeff * r1 * (self.personal_best_positions[:population_size] - self.population[:population_size])\n            social_component = self.social_coeff * r2 * (self.global_best_position - self.population[:population_size])\n            self.velocities[:population_size] = (self.inertia_weight * self.velocities[:population_size]) + cognitive_component + social_component\n            self.population[:population_size] = self.population[:population_size] + self.velocities[:population_size]\n\n            self.population[:population_size] = np.clip(self.population[:population_size], self.lower_bound, self.upper_bound)\n\n            for i in range(population_size):\n                indices = np.random.choice(np.delete(np.arange(population_size), i), 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = a + (self.mutation_factor_init - mutation_factor_change * eval_count) * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cross_prob:\n                        trial[j] = mutant[j]\n\n                trial_score = func(trial)\n                eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.population[i] = trial\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial\n                if eval_count >= self.budget:\n                    break\n\n            self.inertia_weight *= inertia_dampening\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedHybridPSODE", "description": "EnhancedHybridPSODE with dynamic parameter tuning and adaptive population control for faster convergence.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "af9c7347-3908-47a4-bd67-990d4874ebde", "metadata": {"aucs": [0.854841170199753, 0.8337434860933706, 0.8469967212274282, 0.8455483575894931, 0.8180411099900293, 0.8538268412181504, 0.8661472530299321, 0.8586874660363351, 0.8309962951446832, 0.7294235129780255, 0.6998937295171335, 0.6094117259358, 0.7323993392336852, 0.7178626996713835, 0.7527717430435938, 0.7303553160756826, 0.7398023539588414, 0.7345810602280723, 0.14931063233199515, 0.13351555112136448, 0.6622369060538811, 0.14066429175160333, 0.1726157421192509, 0.13536244333222003, 0.16927292151669604, 0.17310903385891174, 0.16665051046678891, 0.10286767970176403, 0.11062674053789101, 0.09841548178142223, 0.11766048483176039, 0.13749285478756756, 0.1497628696663631, 0.12877821416404456, 0.10536676396505973, 0.14711824380142302, 0.9856512933902406, 0.9787812971815051, 0.9884286877792379, 0.9839714483074401, 0.9785587651669921, 0.9797841168656637, 0.9905617241107126, 0.9770933132040401, 0.9833577911084052, 0.7048655414793028, 0.7211467168240129, 0.7052216937557363, 0.7191710474747863, 0.14908004501186256, 0.7445236695618853, 0.7205652174423838, 0.5511206013439216, 0.6527132167092512, 0.3481079237327044, 0.2220022876779414, 0.22260963171491, 0.2773721531139688, 0.8106141678517857, 0.193143748525206, 0.7282030748672175, 0.2380711802780806, 0.1150872978406785, 0.15842663143275082, 0.12928270349161397, 0.1819346820411205, 0.16708296455829608, 0.20992905560266106, 0.12237661338006744, 0.3351147961480979, 0.19017807601288228, 0.21338139704086945, 0.18076589346594996, 0.13757489068267315, 0.22643758141871184, 0.18454500747880243, 0.24556725003162827, 0.18134559209726409, 0.22223500435779941, 0.13360190580985276, 0.12530423963151405, 9.999999999998899e-05, 0.04106590289391676, 0.009052554914146471, 9.999999999998899e-05, 0.035304986290289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07486847503284044, 0.07747999204176736, 0.03671692122265646, 0.12597768691781308, 0.08375568218519003, 9.999999999998899e-05, 0.025237010735392862, 0.09410909002513912, 0.0728437426819526, 0.042060846996438195, 0.046510822810082564, 0.07634599429344835, 0.1226496143325938, 0.09744350257911849, 0.14932735382092965, 0.07586047305840182, 0.2842119416221408, 0.08389114588004398, 0.08772702619431327, 0.06467686522928273, 9.999999999998899e-05, 0.1307702082894382, 0.00630684225609679, 0.20421519971616386, 0.08524348655987957, 0.19106498023883534, 0.04781213433341358, 0.09314857491772333, 0.5185871615500623, 0.5649049736705083, 0.5689980628370421, 0.5514152013975806, 0.5490509555687053, 0.20790007435716462, 0.5973916126254126, 0.6530010078799888, 0.5781118929648357, 0.08304826450485725, 0.07600267204559463, 0.11491859562690787, 0.12362571842962733, 0.13043972677666205, 0.13716767684518238, 0.12653952287696635, 0.13657113960499223, 0.09709974675359878, 0.14374469357949093, 0.18695456979770098, 0.18923957478194653, 0.2981175702971416, 0.24944309371380124, 0.1406468119143186, 0.3294200634479776, 0.17120108790425115, 0.28248616584533215, 0.48908365950123567, 0.6094958590761, 0.6544264222405355, 0.2899814886249241, 0.5453506268139661, 0.36763381267556094, 0.4436084820302868, 0.49875119412574753, 0.5928333162885812, 0.32402022101522454, 0.25792803367766615, 0.2829233453807415, 0.4076522537381234, 0.2622079541846637, 0.32710742616195454, 0.3432538164896639, 0.23390776228649435, 0.30096566980124007, 0.25365634866961995, 0.18875259829404345, 0.267932015646579, 0.20209338773698615, 0.21300809713335944, 0.23998942892561703, 0.24237800148333477, 0.22644071122299358, 0.246895492041457, 0.2407489637587219, 0.7381993016559744, 0.24476307319944546, 0.7596076646020812, 0.238690415179029, 0.2126182009475257, 0.21898585008086835, 0.21703275509314346, 0.2161411307226221, 0.8804029305720451, 0.878470043102824, 0.154132523530214, 0.882908229087604, 0.19873057126016025, 0.19745108635270425, 0.8419510619466086, 0.16897779637434018, 0.8931557330242321, 0.7672084987916588, 0.1683188460864965, 0.2078508423927442, 0.7558544886253658, 0.16710346584180424, 0.2089793176375876, 0.2082782456388691, 0.7949888960681359, 0.8308106177184313, 0.19654164232329197, 0.19487711470545, 0.19335537842386907, 0.19706767001895187, 0.21178877924311013, 0.21062142901655512, 0.20665390909466186, 0.18865726577078357, 0.18353189923188806, 0.09784604018523879, 0.09464449116249218, 0.09282370571545195, 0.08584127053615209, 0.08156069572947378, 0.089102552583189, 0.13650074412598556, 0.07560180769216351, 0.07904243372709896]}, "mutation_prompt": null}
{"id": "bbe7d96c-8f17-45b9-88fc-2d1cd7796d13", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30  # Slightly decreased initial population for faster iteration\n        self.final_population_size = 20  # More aggressive population reduction\n        self.inertia_weight = 0.57  # Further reduced inertia weight for quicker adaptation\n        self.cognitive_coeff = 1.9  # Enhanced cognitive coefficient for better personal exploration\n        self.social_coeff = 1.35  # Slightly balanced social component\n        self.mutation_factor_init = 0.9  # Increased mutation factor for greater diversity\n        self.cross_prob = 0.97  # Elevated cross probability to enhance trial acceptance rate\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.initial_population_size, dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.initial_population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        eval_count = 0\n        inertia_dampening = 0.985  # Adjusted for slightly faster adaptation\n        mutation_factor_change = (self.mutation_factor_init - 0.5) / self.budget\n\n        while eval_count < self.budget:\n            population_size = self.initial_population_size - int(\n                (eval_count / self.budget) * (self.initial_population_size - self.final_population_size))\n\n            for i in range(population_size):\n                score = func(self.population[i])\n                eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n                if eval_count >= self.budget:\n                    break\n\n            r1 = np.random.rand(population_size, self.dim)\n            r2 = np.random.rand(population_size, self.dim)\n            cognitive_component = self.cognitive_coeff * r1 * (self.personal_best_positions[:population_size] - self.population[:population_size])\n            social_component = self.social_coeff * r2 * (self.global_best_position - self.population[:population_size])\n            self.velocities[:population_size] = (self.inertia_weight * self.velocities[:population_size]) + cognitive_component + social_component\n\n            # Introduce random velocity reset to escape local minima\n            reset_indices = np.random.choice(population_size, size=(population_size // 10), replace=False)\n            self.velocities[reset_indices] = np.random.uniform(-1, 1, (len(reset_indices), self.dim))\n\n            self.population[:population_size] = self.population[:population_size] + self.velocities[:population_size]\n            self.population[:population_size] = np.clip(self.population[:population_size], self.lower_bound, self.upper_bound)\n\n            for i in range(population_size):\n                indices = np.random.choice(np.delete(np.arange(population_size), i), 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = a + (self.mutation_factor_init - mutation_factor_change * eval_count) * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cross_prob:\n                        trial[j] = mutant[j]\n\n                trial_score = func(trial)\n                eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.population[i] = trial\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial\n                if eval_count >= self.budget:\n                    break\n\n            self.inertia_weight *= inertia_dampening\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedHybridPSODE", "description": "EnhancedHybridPSODE with refined parameter tuning and strategic velocity reset for faster convergence.", "configspace": "", "generation": 93, "fitness": 0.27464784792165153, "feedback": "The algorithm EnhancedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.24.", "error": "", "parent_id": "af9c7347-3908-47a4-bd67-990d4874ebde", "metadata": {"aucs": [0.7832317877885092, 0.7763239010405216, 0.8346804028683027, 0.7368137409059062, 0.7314529357184201, 0.8589892347037443, 0.7458319619838952, 0.8261916475535869, 0.835453511366787, 0.21467918687447307, 0.1811516552190675, 0.10303612988036226, 0.542549471370964, 0.4699583655521753, 0.3393549738815409, 0.6572201983973788, 0.49967982516155607, 0.271155685433891, 0.16773345483187418, 0.15567594214940605, 0.14211352964078072, 0.12888139962835798, 0.10537989633777234, 0.13826162904033412, 0.14588482761390242, 0.1416064820832693, 0.12393530723221824, 0.10859723102835073, 0.13315658541609077, 0.1471062449179109, 0.10156708373144452, 0.10629617451317896, 0.10735960161116087, 0.11768393090825524, 0.10806284856258641, 0.1085936914263752, 0.9809217492641054, 0.9862446267137778, 0.9808811846791583, 0.9892251062369785, 0.9769998642016647, 0.978884284658245, 0.9851954952254537, 0.9807992494719536, 0.9862826452471629, 0.49476082347693384, 0.36098394231054676, 0.33685880570836213, 0.43916793350295036, 0.48636199031402094, 0.34963391333946625, 0.5011845039400915, 0.4451438522025275, 0.3889034432466255, 0.3478106739224319, 0.6235338511600392, 0.2186231636599396, 0.27804052337031093, 0.2610043916548751, 0.19201058121957038, 0.7398229140803196, 0.22649770133732805, 0.21997221194855587, 0.12342514963081552, 0.15507129012631216, 0.16241823720462711, 0.18011524681517077, 0.12721460316733535, 0.17244094668964827, 0.17172443044968, 0.17774800096646703, 0.16810156485705052, 0.1762772656694227, 0.09231580352117763, 0.22420890166639373, 0.13084549958394476, 0.1717966317705637, 0.15178755391701293, 0.20001666289085418, 0.19110044281916094, 0.20730048420758262, 0.0022893988128660503, 9.999999999998899e-05, 9.999999999998899e-05, 0.040644066406856805, 9.999999999998899e-05, 9.999999999998899e-05, 0.006534983392729732, 9.999999999998899e-05, 0.0002991390075746114, 0.08895482348504102, 0.05724562524933663, 0.06659140697262722, 0.09308370443794045, 0.042235110532554576, 0.03974768219337399, 0.07611777823612609, 0.06595290489164385, 0.08103601433295493, 0.025733534365764754, 0.03314607047584528, 0.0885046627062056, 0.07443712406094383, 0.11393638724873112, 0.0935470149036175, 0.09069859416811576, 0.08042777609162954, 0.07491504443634389, 0.15216698172679421, 0.08845300579749638, 0.22499136437244827, 0.08228228597322118, 0.1738775819368369, 0.11865138157512811, 0.07781679715293577, 0.10728708758579308, 0.08051558764601885, 0.47829727338122197, 0.46561874728021624, 0.4437039305464998, 0.48012655810661886, 0.4814684670829008, 0.5048473588736927, 0.48000739722119834, 0.5330612090393745, 0.4822475701459742, 0.10547005031959267, 0.10213523623915699, 0.13423260241906743, 0.11983028849301314, 0.13233824200881572, 0.09734293109996128, 0.12167577336257795, 0.1417361852154294, 0.1195421798137688, 0.38663193659578887, 0.2956510340123748, 0.2009843212354252, 0.28805204067674417, 0.20714132122680418, 0.2542462408665628, 0.1830590036891987, 0.14059936041184318, 0.1720023283454053, 0.3795333846640443, 0.25989716027919796, 0.4167881860258308, 0.22247335930121415, 0.35544831001055055, 0.39334062607694553, 0.3251080741531981, 0.3531183037292007, 0.26251519771373377, 0.19487855624971784, 0.26576023866549814, 0.2212359620333424, 0.21097373849975565, 0.2283928389861556, 0.3733262040920484, 0.23407225023402178, 0.2787195296345911, 0.2829519451308975, 0.20488162015077538, 0.2213910037896134, 0.19719132603365352, 0.20810179794305694, 0.20480296526408714, 0.19189808240437822, 0.2184651760136288, 0.214220241302309, 0.229822750642786, 0.4029802976456026, 0.19665166576639614, 0.2055637840160638, 0.2279780746853618, 0.20960559279077073, 0.19586553484492586, 0.22083963379000948, 0.22226543217674866, 0.20571008633464327, 0.16468076439768842, 0.17572011876275917, 0.1535323634627328, 0.8925736933824637, 0.19933046031359636, 0.1301797041295909, 0.8719410117691637, 0.16675635595369298, 0.2070048234860623, 0.48696807201776715, 0.15556611282754185, 0.20526487569108975, 0.49363470914504015, 0.6658514031828141, 0.20947598148795898, 0.5065626053702403, 0.20804454643929926, 0.1658184050144691, 0.18608126789716173, 0.20002513964153512, 0.19667924648579405, 0.19268521194199684, 0.18569373108067588, 0.22521120735763944, 0.2305249638246969, 0.2078292287909288, 0.1955006671340298, 0.08761959014958265, 0.08875627808129904, 0.08699275442033083, 0.08881362331258591, 0.08075961260831233, 0.09032338080491609, 0.08196852541516908, 0.0912729435175339, 0.0815437143981309]}, "mutation_prompt": null}
{"id": "0da8e33f-266b-456a-a9a4-f1dd63ad233a", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 32  # Slightly increased initial population\n        self.final_population_size = 24  # More dynamic population resizing\n        self.inertia_weight = 0.59  # Further reduced inertia weight for quicker convergence\n        self.cognitive_coeff = 1.8  # Increased to further enhance exploration\n        self.social_coeff = 1.3  # Slightly decreased to improve balance\n        self.mutation_factor_init = 0.88  # Adjusted mutation factor for diversity\n        self.cross_prob = 0.96  # Higher cross probability for more aggressive trial acceptance\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.initial_population_size, dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.initial_population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        eval_count = 0\n        inertia_dampening = 0.99  # Adjusted for slightly faster dampening\n        mutation_factor_change = (self.mutation_factor_init - 0.5) / self.budget\n\n        while eval_count < self.budget:\n            population_size = self.initial_population_size - int(\n                (eval_count / self.budget) * (self.initial_population_size - self.final_population_size))\n\n            for i in range(population_size):\n                score = func(self.population[i])\n                eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n                if eval_count >= self.budget:\n                    break\n\n            r1 = np.random.rand(population_size, self.dim)\n            r2 = np.random.rand(population_size, self.dim)\n            cognitive_component = self.cognitive_coeff * r1 * (self.personal_best_positions[:population_size] - self.population[:population_size])\n            social_component = self.social_coeff * r2 * (self.global_best_position - self.population[:population_size])\n            self.velocities[:population_size] = (self.inertia_weight * self.velocities[:population_size]) + cognitive_component + social_component\n            self.population[:population_size] = self.population[:population_size] + self.velocities[:population_size]\n\n            self.population[:population_size] = np.clip(self.population[:population_size], self.lower_bound, self.upper_bound)\n\n            for i in range(population_size):\n                indices = np.random.choice(np.delete(np.arange(population_size), i), 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = a + (self.mutation_factor_init - mutation_factor_change * eval_count) * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cross_prob:\n                        trial[j] = mutant[j]\n\n                trial_score = func(trial)\n                eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.population[i] = trial\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial\n                if eval_count >= self.budget:\n                    break\n\n            self.inertia_weight *= inertia_dampening\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedHybridPSODE", "description": "EnhancedHybridPSODE with dynamic parameter tuning and adaptive population control for faster convergence.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "af9c7347-3908-47a4-bd67-990d4874ebde", "metadata": {"aucs": [0.854841170199753, 0.8337434860933706, 0.8469967212274282, 0.8455483575894931, 0.8180411099900293, 0.8538268412181504, 0.8661472530299321, 0.8586874660363351, 0.8309962951446832, 0.7294235129780255, 0.6998937295171335, 0.6094117259358, 0.7323993392336852, 0.7178626996713835, 0.7527717430435938, 0.7303553160756826, 0.7398023539588414, 0.7345810602280723, 0.14931063233199515, 0.13351555112136448, 0.6622369060538811, 0.14066429175160333, 0.1726157421192509, 0.13536244333222003, 0.16927292151669604, 0.17310903385891174, 0.16665051046678891, 0.10286767970176403, 0.11062674053789101, 0.09841548178142223, 0.11766048483176039, 0.13749285478756756, 0.1497628696663631, 0.12877821416404456, 0.10536676396505973, 0.14711824380142302, 0.9856512933902406, 0.9787812971815051, 0.9884286877792379, 0.9839714483074401, 0.9785587651669921, 0.9797841168656637, 0.9905617241107126, 0.9770933132040401, 0.9833577911084052, 0.7048655414793028, 0.7211467168240129, 0.7052216937557363, 0.7191710474747863, 0.14908004501186256, 0.7445236695618853, 0.7205652174423838, 0.5511206013439216, 0.6527132167092512, 0.3481079237327044, 0.2220022876779414, 0.22260963171491, 0.2773721531139688, 0.8106141678517857, 0.193143748525206, 0.7282030748672175, 0.2380711802780806, 0.1150872978406785, 0.15842663143275082, 0.12928270349161397, 0.1819346820411205, 0.16708296455829608, 0.20992905560266106, 0.12237661338006744, 0.3351147961480979, 0.19017807601288228, 0.21338139704086945, 0.18076589346594996, 0.13757489068267315, 0.22643758141871184, 0.18454500747880243, 0.24556725003162827, 0.18134559209726409, 0.22223500435779941, 0.13360190580985276, 0.12530423963151405, 9.999999999998899e-05, 0.04106590289391676, 0.009052554914146471, 9.999999999998899e-05, 0.035304986290289, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07486847503284044, 0.07747999204176736, 0.03671692122265646, 0.12597768691781308, 0.08375568218519003, 9.999999999998899e-05, 0.025237010735392862, 0.09410909002513912, 0.0728437426819526, 0.042060846996438195, 0.046510822810082564, 0.07634599429344835, 0.1226496143325938, 0.09744350257911849, 0.14932735382092965, 0.07586047305840182, 0.2842119416221408, 0.08389114588004398, 0.08772702619431327, 0.06467686522928273, 9.999999999998899e-05, 0.1307702082894382, 0.00630684225609679, 0.20421519971616386, 0.08524348655987957, 0.19106498023883534, 0.04781213433341358, 0.09314857491772333, 0.5185871615500623, 0.5649049736705083, 0.5689980628370421, 0.5514152013975806, 0.5490509555687053, 0.20790007435716462, 0.5973916126254126, 0.6530010078799888, 0.5781118929648357, 0.08304826450485725, 0.07600267204559463, 0.11491859562690787, 0.12362571842962733, 0.13043972677666205, 0.13716767684518238, 0.12653952287696635, 0.13657113960499223, 0.09709974675359878, 0.14374469357949093, 0.18695456979770098, 0.18923957478194653, 0.2981175702971416, 0.24944309371380124, 0.1406468119143186, 0.3294200634479776, 0.17120108790425115, 0.28248616584533215, 0.48908365950123567, 0.6094958590761, 0.6544264222405355, 0.2899814886249241, 0.5453506268139661, 0.36763381267556094, 0.4436084820302868, 0.49875119412574753, 0.5928333162885812, 0.32402022101522454, 0.25792803367766615, 0.2829233453807415, 0.4076522537381234, 0.2622079541846637, 0.32710742616195454, 0.3432538164896639, 0.23390776228649435, 0.30096566980124007, 0.25365634866961995, 0.18875259829404345, 0.267932015646579, 0.20209338773698615, 0.21300809713335944, 0.23998942892561703, 0.24237800148333477, 0.22644071122299358, 0.246895492041457, 0.2407489637587219, 0.7381993016559744, 0.24476307319944546, 0.7596076646020812, 0.238690415179029, 0.2126182009475257, 0.21898585008086835, 0.21703275509314346, 0.2161411307226221, 0.8804029305720451, 0.878470043102824, 0.154132523530214, 0.882908229087604, 0.19873057126016025, 0.19745108635270425, 0.8419510619466086, 0.16897779637434018, 0.8931557330242321, 0.7672084987916588, 0.1683188460864965, 0.2078508423927442, 0.7558544886253658, 0.16710346584180424, 0.2089793176375876, 0.2082782456388691, 0.7949888960681359, 0.8308106177184313, 0.19654164232329197, 0.19487711470545, 0.19335537842386907, 0.19706767001895187, 0.21178877924311013, 0.21062142901655512, 0.20665390909466186, 0.18865726577078357, 0.18353189923188806, 0.09784604018523879, 0.09464449116249218, 0.09282370571545195, 0.08584127053615209, 0.08156069572947378, 0.089102552583189, 0.13650074412598556, 0.07560180769216351, 0.07904243372709896]}, "mutation_prompt": null}
{"id": "236de184-786a-40f3-8979-d804186116c7", "solution": "import numpy as np\n\nclass OptimizedEnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30  # Slightly reduced initial population\n        self.final_population_size = 22  # More aggressive population resizing\n        self.inertia_weight = 0.55  # Further reduced inertia weight for faster convergence\n        self.cognitive_coeff = 2.0  # Increased to enhance personal best attraction\n        self.social_coeff = 1.2  # Slightly decreased to balance global exploration\n        self.mutation_factor_init = 0.9  # Adjusted mutation factor for maintaining diversity\n        self.cross_prob = 0.95  # High cross probability for consistent trial acceptance\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.initial_population_size, dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.initial_population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        eval_count = 0\n        inertia_dampening = 0.98  # Adjusted for faster inertia reduction\n        mutation_factor_change = (self.mutation_factor_init - 0.5) / self.budget\n\n        while eval_count < self.budget:\n            population_size = self.initial_population_size - int(\n                (eval_count / self.budget) * (self.initial_population_size - self.final_population_size))\n\n            r1 = np.random.rand(population_size, self.dim)\n            r2 = np.random.rand(population_size, self.dim)\n\n            for i in range(population_size):\n                score = func(self.population[i])\n                eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n                if eval_count >= self.budget:\n                    break\n\n            cognitive_component = self.cognitive_coeff * r1 * (self.personal_best_positions[:population_size] - self.population[:population_size])\n            social_component = self.social_coeff * r2 * (self.global_best_position - self.population[:population_size])\n            self.velocities[:population_size] = (self.inertia_weight * self.velocities[:population_size]) + cognitive_component + social_component\n            self.population[:population_size] = self.population[:population_size] + self.velocities[:population_size]\n\n            self.population[:population_size] = np.clip(self.population[:population_size], self.lower_bound, self.upper_bound)\n\n            for i in range(population_size):\n                indices = np.random.choice(np.delete(np.arange(population_size), i), 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = a + (self.mutation_factor_init - mutation_factor_change * eval_count) * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cross_prob:\n                        trial[j] = mutant[j]\n\n                trial_score = func(trial)\n                eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.population[i] = trial\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial\n                if eval_count >= self.budget:\n                    break\n\n            self.inertia_weight *= inertia_dampening\n\n        return self.global_best_position, self.global_best_score", "name": "OptimizedEnhancedHybridPSODE", "description": "OptimizedEnhancedHybridPSODE with improved convergence dynamics through refined parameter adjustments and exploration strategies.", "configspace": "", "generation": 95, "fitness": 0.30596249283503746, "feedback": "The algorithm OptimizedEnhancedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.28.", "error": "", "parent_id": "af9c7347-3908-47a4-bd67-990d4874ebde", "metadata": {"aucs": [0.8973225782713514, 0.888229880661404, 0.895288773198321, 0.889172760415382, 0.8818498635625011, 0.8961230292657202, 0.8913899669887926, 0.8966186981595081, 0.895046117150694, 0.07444301795395514, 0.8069926671307006, 0.8073480763800281, 0.7974588663468257, 0.7769963124714132, 0.7887796104016512, 0.7958560725076709, 0.7874617740088159, 0.7992156027574433, 0.1790131931927612, 0.17359134500443874, 0.14494353371872748, 0.1381459962621615, 0.07211298672248834, 0.15611138984123796, 0.1287513736693825, 0.18847008307538204, 0.1394433977582541, 0.15511644140513836, 0.13989216220779765, 0.12462208073031666, 0.09254497699062703, 0.12073099751945304, 0.1149113816490297, 0.150395583348774, 0.11136930522207089, 0.14919170178765906, 0.981009312126898, 0.9801649447215338, 0.9914402513704287, 0.9683141719143656, 0.9863645133260731, 0.9696037958725573, 0.9859670402906473, 0.979565410036616, 0.9771396316958987, 0.6537297834142034, 0.05954531141802544, 0.6994125271068108, 0.14953555387289108, 0.6673097283540559, 0.5530004979525073, 0.5539019126205824, 0.08845062921159497, 0.40130399531110983, 0.8601796637262241, 0.21577961492973996, 0.21912591614405796, 0.21465465915200888, 0.27705028850047986, 0.19169801229186467, 0.12476887510729506, 0.37148817219255914, 0.2245596685454242, 0.15841920550040844, 0.20868614829139243, 0.12810531559070437, 0.1613993495749133, 0.12715496500125612, 0.17450852370507652, 0.20277600277929086, 0.13274369048269996, 0.16380931417568678, 0.13031062583182762, 0.25602198197635995, 0.1302838050177757, 0.22698340843314924, 0.11187561218031605, 0.31341262563987715, 0.18295609734072726, 0.20205003040153502, 0.1351118812068851, 0.08107094854501629, 9.999999999998899e-05, 0.016263217603573632, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09392656896347673, 0.09505462850964652, 0.09317162238835064, 0.11090204522225089, 0.06281625373742716, 0.04262036715553641, 0.08977873768974076, 0.04376632766324817, 0.04245476507007662, 0.12954278465514724, 0.05907952402443406, 0.11869595124404186, 0.09481549756883323, 0.07720516301237279, 0.07585383103071819, 0.09964478352519468, 0.07281259952487729, 0.0724096511888942, 0.07906681105740299, 0.09791644955631074, 0.160092564557607, 0.06528819696801513, 0.16099565426106055, 0.13761689378407738, 0.1242755919665065, 0.0743596809312077, 0.12643786463440243, 0.5263374003172614, 0.590937666103977, 0.5545711106143582, 0.5805173572192637, 0.562441650293137, 0.5619115539010169, 0.5898130933964657, 0.5380783337052921, 0.550781101920589, 0.13971270151177162, 0.13528367967574562, 0.10927764396270545, 0.15349934082138517, 0.10194978920270714, 0.15966722365012698, 0.11497801634696503, 0.11098134625912626, 0.11614340993443661, 0.26490479227159536, 0.3383443941412374, 0.25776059301807464, 0.3184868517219769, 0.16467792838663464, 0.22663216233508343, 0.2703314651524662, 0.27772957101870466, 0.19909881887679104, 0.3960522829136973, 0.42811739570500396, 0.34131787481214326, 0.3180747627006837, 0.4050325784033062, 0.3898766659039212, 0.5092846662334701, 0.52270352184726, 0.6321095758467891, 0.20703596274768954, 0.18004599914373953, 0.19976109610515058, 0.3616374948344956, 0.1961349016279752, 0.2164364123978042, 0.2596574345402759, 0.44346252524343566, 0.3622427397157446, 0.22430871239047145, 0.21233309841927117, 0.20031589440593056, 0.1981509566494848, 0.2521967641888815, 0.18855341906271794, 0.20555311821071787, 0.21527407666344311, 0.2727794296796826, 0.18992637093391984, 0.20997206711405625, 0.7625400293578243, 0.22315162039079783, 0.19787801122532123, 0.20753268536382874, 0.21034764791551597, 0.18514836699570036, 0.2460150580471584, 0.3755582857372256, 0.9035444734567787, 0.1535855043473794, 0.17218048954460718, 0.20139069555703426, 0.199572280375105, 0.09912110828774934, 0.17017968466809785, 0.904576640253644, 0.7100980856755728, 0.1569594436506886, 0.15468292674945028, 0.21091615506792527, 0.28755751675128594, 0.6897232636578643, 0.10421055082481145, 0.21194795224043705, 0.4746853210382892, 0.18408502362091228, 0.21561215039541248, 0.18853732279781976, 0.20273334677439847, 0.19004487351879484, 0.19866434809835876, 0.19741526654042563, 0.19703163571499094, 0.18984887828306007, 0.09956158512326652, 0.09120207636852806, 0.0804782659446226, 0.07939362403865236, 0.09480320853587021, 0.10256000011170241, 0.08831103203249535, 0.08189787100643864, 0.10415831396853614]}, "mutation_prompt": null}
{"id": "4c71d1ea-9247-49e3-829f-1b13d01cd065", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 30  # Slightly reduced for focused exploration\n        self.final_population_size = 20  # Further reduce final population size\n        self.inertia_weight = 0.57  # Reduced further for quicker responsiveness\n        self.cognitive_coeff = 1.9  # Enhanced for better exploration\n        self.social_coeff = 1.4  # Adjusted for improved convergence dynamics\n        self.mutation_factor_init = 0.85  # Tuning for balanced diversity\n        self.cross_prob = 0.97  # Slight increase for more aggressive trial acceptance\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.initial_population_size, dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.initial_population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        eval_count = 0\n        inertia_dampening = 0.98  # Adjusted slightly for moderate dampening\n        mutation_factor_change = (self.mutation_factor_init - 0.5) / self.budget\n\n        while eval_count < self.budget:\n            population_size = self.initial_population_size - int(\n                (eval_count / self.budget) * (self.initial_population_size - self.final_population_size))\n\n            for i in range(population_size):\n                score = func(self.population[i])\n                eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n                if eval_count >= self.budget:\n                    break\n\n            r1 = np.random.rand(population_size, self.dim)\n            r2 = np.random.rand(population_size, self.dim)\n            cognitive_component = self.cognitive_coeff * r1 * (self.personal_best_positions[:population_size] - self.population[:population_size])\n            social_component = self.social_coeff * r2 * (self.global_best_position - self.population[:population_size])\n            self.velocities[:population_size] = (self.inertia_weight * self.velocities[:population_size]) + cognitive_component + social_component\n            self.population[:population_size] = self.population[:population_size] + self.velocities[:population_size]\n\n            self.population[:population_size] = np.clip(self.population[:population_size], self.lower_bound, self.upper_bound)\n\n            for i in range(population_size):\n                indices = np.random.choice(np.delete(np.arange(population_size), i), 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = a + (self.mutation_factor_init - mutation_factor_change * eval_count) * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cross_prob:\n                        trial[j] = mutant[j]\n\n                trial_score = func(trial)\n                eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.population[i] = trial\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial\n                if eval_count >= self.budget:\n                    break\n\n            self.inertia_weight *= inertia_dampening\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedHybridPSODE", "description": "EnhancedHybridPSODE with improved parameter tuning and refined mutation mechanisms to accelerate convergence.", "configspace": "", "generation": 96, "fitness": 0.28550054282454285, "feedback": "The algorithm EnhancedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.27.", "error": "", "parent_id": "af9c7347-3908-47a4-bd67-990d4874ebde", "metadata": {"aucs": [0.8738999946174024, 0.8784388405972051, 0.8875306665327487, 0.19011484220363006, 0.8876093327846359, 0.8715488014283141, 0.8739976522092973, 0.882323844669067, 0.8869880514050565, 0.7742817991273439, 0.7320759824772021, 0.7749896697220549, 0.7949287695803455, 0.046486046082519494, 0.7807326054299736, 0.7810802575687399, 0.7753038653430222, 0.047599232104379885, 0.14123927509506684, 0.17059127664272455, 0.12859689582899914, 0.1176400613927866, 0.11579349662818572, 0.09384721621611847, 0.14005296544694834, 0.15056296609349107, 0.13923597166664514, 0.15022640889612415, 0.10647608532850061, 0.09086312940182306, 0.10263614110453123, 0.111258255846023, 0.08423349120612544, 0.09513638582208228, 0.11078924624109698, 0.10790472552759567, 0.9811965200126334, 0.9797874772576549, 0.9853227020913529, 0.9712954522117085, 0.9835892867840509, 0.9792412791050816, 0.9863537601202848, 0.9810585195639585, 0.9718774342090223, 0.645324285514084, 0.05924011449849309, 0.42228871643015997, 0.559424374098936, 0.15115044257303778, 0.15210809459865327, 0.12521152827818638, 0.5072893340738752, 0.5203267043796405, 0.22729761587750485, 0.22348355652525342, 0.22109160434542008, 0.8988396916576724, 0.19130709318959072, 0.19201404307501058, 0.8781773528039626, 0.19942617020231868, 0.23361645128231834, 0.09961740801860963, 0.23203105321721673, 0.18149158096852958, 0.15681759733257428, 0.1293645346870499, 0.2156627932400661, 0.17951820648973393, 0.14965941544957218, 0.18845169890102165, 0.16755278182533462, 0.1174502508860853, 0.19173975275742283, 0.15044183443544212, 0.2003684468933561, 0.22361023269152724, 0.1901967733086164, 0.03301772431347849, 0.0997892290924225, 0.0035295196945213103, 0.06063721890686524, 0.06818942904812397, 0.041272545109917846, 9.999999999998899e-05, 0.047618579653061155, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07562964274922379, 0.051544532732039294, 0.057110790441937564, 0.05964710523005001, 0.04973485586663007, 0.03485229178473459, 0.14295703160105755, 0.03568213949340371, 0.1695901051268318, 0.0491006677150273, 0.26894533855001235, 0.3751771066397177, 0.0763097443636338, 0.0768519497887723, 0.07686687151002791, 0.10690867846867225, 0.21530515115552462, 0.08139076824878322, 0.21297905036442666, 0.042231701818000844, 0.12733040230482895, 0.0700732142316498, 0.15862150904068362, 0.1403423081814974, 0.05228413829852652, 0.09862160594679148, 0.08026194700734579, 0.5120456817854224, 0.6398593280296884, 0.546108375699788, 0.5986124132110318, 0.18210758529508708, 0.5706304510159028, 0.5741567424150527, 0.6069028670998391, 0.5717219750628404, 0.14141054485000037, 0.1378084973437277, 0.0642299823685607, 0.10983935375183285, 0.07229129147464775, 0.14986238823472064, 0.11346797049158064, 0.1516147205371683, 0.13438274384895577, 0.17694218860187394, 0.15311406251009796, 0.16457732612028264, 0.3169054607270445, 0.2000770831128299, 0.24253304040664136, 0.37080408054592073, 0.21243941904597008, 0.20459849340649894, 0.41761365393156513, 0.33657737590065173, 0.38188526605349493, 0.37140214070597477, 0.20530406085119657, 0.2914001689672664, 0.3945155463444958, 0.5170659149726707, 0.35120540089782515, 0.21692809446989336, 0.2655855943591351, 0.3718313486940369, 0.24834567721222423, 0.22259711770913893, 0.20522917727202616, 0.27387795946728843, 0.28800103532098087, 0.32554824546671723, 0.23234058483867837, 0.1592103986967801, 0.20466072277554404, 0.2228678344998024, 0.23460651871268523, 0.18795909995332039, 0.38905868898937057, 0.22793811857232016, 0.19772009456521533, 0.21891000724254495, 0.18285137764468606, 0.20753194751510606, 0.21931220051392375, 0.20521165475608039, 0.18904123839901454, 0.1876738025435556, 0.2177094750347346, 0.22133528404852443, 0.16515994402247147, 0.18586404727958106, 0.15293272413043468, 0.17644293463002647, 0.20143877605261096, 0.19909331302983813, 0.11936370288063025, 0.16938493395456156, 0.892994086222611, 0.5182876653397492, 0.15625689945689425, 0.11132283501669049, 0.20968395274856966, 0.3790444226084433, 0.744854639182732, 0.20200331091673318, 0.1049194307167256, 0.6047771291244236, 0.21681669185078223, 0.1935289698082796, 0.19190441283091353, 0.21253576077413405, 0.18372064713904468, 0.2103898144893216, 0.2112742559965206, 0.1832807124837713, 0.20204699512929547, 0.09605858124963595, 0.08240600286220656, 0.0904706269265858, 0.08648447647553825, 0.10507380628118668, 0.08620286185072457, 0.09295270750801377, 0.08564732788249696, 0.09446784774954342]}, "mutation_prompt": null}
{"id": "e6b8dc3f-885d-4a14-a7d2-fbfa8754680a", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 34  # Increased population for better diversity\n        self.final_population_size = 26  # More dynamic population resizing\n        self.inertia_weight = 0.58  # Further reduced inertia weight for quicker convergence\n        self.cognitive_coeff = 1.9  # Increased to enhance exploration capability\n        self.social_coeff = 1.2  # Decreased to reduce premature convergence\n        self.mutation_factor_init = 0.86  # Adjusted mutation factor for diversity\n        self.cross_prob = 0.95  # High cross probability for more aggressive trial acceptance\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.initial_population_size, dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.initial_population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        eval_count = 0\n        inertia_dampening = 0.98  # Slightly increased dampening for more dynamic weight adjustment\n        mutation_factor_change = (self.mutation_factor_init - 0.5) / self.budget\n\n        while eval_count < self.budget:\n            population_size = self.initial_population_size - int(\n                (eval_count / self.budget) * (self.initial_population_size - self.final_population_size))\n\n            for i in range(population_size):\n                score = func(self.population[i])\n                eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n                if eval_count >= self.budget:\n                    break\n\n            r1 = np.random.rand(population_size, self.dim)\n            r2 = np.random.rand(population_size, self.dim)\n            cognitive_component = self.cognitive_coeff * r1 * (self.personal_best_positions[:population_size] - self.population[:population_size])\n            social_component = self.social_coeff * r2 * (self.global_best_position - self.population[:population_size])\n            self.velocities[:population_size] = (self.inertia_weight * self.velocities[:population_size]) + cognitive_component + social_component\n            self.population[:population_size] = self.population[:population_size] + self.velocities[:population_size]\n\n            self.population[:population_size] = np.clip(self.population[:population_size], self.lower_bound, self.upper_bound)\n\n            for i in range(population_size):\n                indices = np.random.choice(np.delete(np.arange(population_size), i), 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = a + (self.mutation_factor_init - mutation_factor_change * eval_count) * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cross_prob:\n                        trial[j] = mutant[j]\n\n                trial_score = func(trial)\n                eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.population[i] = trial\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial\n                if eval_count >= self.budget:\n                    break\n\n            self.inertia_weight *= inertia_dampening\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedHybridPSODE", "description": "EnhancedHybridPSODE with refined inertia dynamics, adaptive mutation scaling, and strategic position refinement for improved convergence speed.", "configspace": "", "generation": 97, "fitness": 0.29670481992400016, "feedback": "The algorithm EnhancedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.27.", "error": "", "parent_id": "af9c7347-3908-47a4-bd67-990d4874ebde", "metadata": {"aucs": [0.8824281644868598, 0.8708022296984048, 0.8737211414315913, 0.8767553111267892, 0.8580214758352337, 0.8789868959530271, 0.8740789241535776, 0.8838683763860249, 0.871733438767422, 0.7568303273667407, 0.0410338441302851, 0.6910534064560421, 0.7535959877143544, 0.04656455611632937, 0.7541174205236502, 0.19511356620833198, 0.7631551741429251, 0.7493089479443791, 0.14007622523380292, 0.17430138956768337, 0.17828101609850655, 0.1520991377991766, 0.173395102466659, 0.17044848863898499, 0.09500851597269955, 0.13995186654651148, 0.12931779463510662, 0.10027525177329788, 0.11203903651999225, 0.13733257611336158, 0.11803596800281535, 0.10422025942392377, 0.13285341617725877, 0.10594674650443703, 0.10820002680283614, 0.1067422275519031, 0.9830518556180012, 0.9837671102887272, 0.9735655771025898, 0.9720773835561257, 0.9892593812584596, 0.9755459253530645, 0.9831048224304052, 0.9775211588975232, 0.9706252440618921, 0.6486336900004841, 0.5120686691444871, 0.6218021538358283, 0.239038713296008, 0.14910220314819178, 0.15178259481094192, 0.5437668758610825, 0.5831966069001379, 0.73794237152479, 0.21193411159050968, 0.8027082496346084, 0.22249749570076893, 0.21899113641129053, 0.27109077842166407, 0.27296086227569505, 0.22769336015699404, 0.17845730959112793, 0.1723536168802069, 0.22180099339468862, 0.16649098034532395, 0.1645586334968986, 0.15934589506587948, 0.11780053609226038, 0.12695183426404277, 0.12472779858860117, 0.12756414165715546, 0.17295820177483567, 0.18906542648907176, 0.20888225091235912, 0.1867721663675186, 0.23058227948964582, 0.18206388548224006, 0.1636025799002484, 0.22973535188994865, 9.999999999998899e-05, 0.21282896096883208, 9.999999999998899e-05, 0.03072613668068136, 0.026464493770839925, 9.999999999998899e-05, 9.999999999998899e-05, 0.018704454485179656, 0.023020807800271048, 9.999999999998899e-05, 9.999999999998899e-05, 0.0664052192949508, 0.06227395812508407, 0.13422018361903265, 0.10223320309050654, 0.003472001566512839, 0.018204641593202564, 0.17259233099248072, 0.0445088625932043, 0.07232478179978985, 0.20389033051646455, 0.03573524419406182, 0.18685332742980698, 0.09764334230108507, 0.2320545689772262, 0.07740258087705099, 0.09913890895926647, 0.09977926376520796, 0.2515474480878406, 0.148006201752635, 0.05325990391863866, 0.1874193794477459, 0.038231306199765225, 0.03962445314222296, 0.10688840352905848, 0.1437501340803603, 0.05517077065353282, 0.08120621895847002, 0.5818468514046538, 0.525872092093755, 0.5398067675139178, 0.2084944645107898, 0.5996233559531885, 0.5389835866620727, 0.6105017384688456, 0.5559631731829968, 0.5905058935781148, 0.12831022281025284, 0.1504483060667703, 0.09877727464166142, 0.14922579308922346, 0.15189375072962885, 0.11782716106285518, 0.10210005890338492, 0.17197498450635884, 0.11787587368788677, 0.2559773572223839, 0.4223593689101989, 0.33164295265921906, 0.22488791298207456, 0.2820393203991082, 0.18149339508538442, 0.2829747742530472, 0.1605591790693479, 0.1838115328436425, 0.29490384189494157, 0.28279297011838467, 0.39720205766879757, 0.44610950920905923, 0.4512662652601026, 0.3841182315465972, 0.42986406086622775, 0.41255833335695213, 0.4443991902734913, 0.3437519577535644, 0.2416803188652351, 0.21446433880700122, 0.28570285908252313, 0.20003252608865418, 0.23984215961023392, 0.3535256981405155, 0.2454334392757973, 0.2723126285328088, 0.20473277361313114, 0.227425772945399, 0.19728268652724634, 0.22450578517629494, 0.22717908021952182, 0.20167280893709094, 0.2197393996093212, 0.22826196222535178, 0.2123320690573377, 0.19922264446720406, 0.18724460481718674, 0.2243708092456146, 0.18304099108883887, 0.19318364923515963, 0.22350999602412602, 0.22208656174086672, 0.2056272249464003, 0.2213367931412299, 0.8994562249554746, 0.1665092894593545, 0.15374820350807894, 0.9127848654887918, 0.19925538066646542, 0.1993846696909659, 0.14147585629106485, 0.16248379558505277, 0.8885375733845222, 0.4999169326552302, 0.7924298579827144, 0.1125636605871625, 0.3282686397475779, 0.20757365761668045, 0.21109553995305386, 0.12714417935764266, 0.15306788946949257, 0.8160435680809011, 0.19075574281434027, 0.2057329410777622, 0.20909904705640947, 0.2140766675615099, 0.19846178925899682, 0.19990306640084976, 0.19194375391377683, 0.19616283699442139, 0.17953640546842686, 0.0919847298164248, 0.09966676516536077, 0.08873361620890041, 0.09282248291987238, 0.09632853365495031, 0.09404176918292217, 0.10044224298944826, 0.09371031318468959, 0.09128720337152263]}, "mutation_prompt": null}
{"id": "5b5072f9-ab26-4877-a32e-b601945febf4", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 32\n        self.final_population_size = 24\n        self.inertia_weight = 0.58  # Slightly reduced for quicker adaptation\n        self.cognitive_coeff = 1.85  # Slightly increased to enhance local search\n        self.social_coeff = 1.2  # Reduced to balance exploration/exploitation\n        self.mutation_factor_init = 0.87  # Adjusted for incremental diversity control\n        self.cross_prob = 0.95  # Adjusted for balanced trial acceptance\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.initial_population_size, dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.initial_population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        eval_count = 0\n        inertia_dampening = 0.985  # Adjusted to encourage faster convergence\n        mutation_factor_change = (self.mutation_factor_init - 0.55) / self.budget  # Modified for smoother transition\n\n        while eval_count < self.budget:\n            population_size = self.initial_population_size - int(\n                (eval_count / self.budget) * (self.initial_population_size - self.final_population_size))\n\n            for i in range(population_size):\n                score = func(self.population[i])\n                eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n                if eval_count >= self.budget:\n                    break\n\n            r1 = np.random.rand(population_size, self.dim)\n            r2 = np.random.rand(population_size, self.dim)\n            cognitive_component = self.cognitive_coeff * r1 * (self.personal_best_positions[:population_size] - self.population[:population_size])\n            social_component = self.social_coeff * r2 * (self.global_best_position - self.population[:population_size])\n            self.velocities[:population_size] = (self.inertia_weight * self.velocities[:population_size]) + cognitive_component + social_component\n            self.population[:population_size] = self.population[:population_size] + self.velocities[:population_size]\n\n            self.population[:population_size] = np.clip(self.population[:population_size], self.lower_bound, self.upper_bound)\n\n            for i in range(population_size):\n                indices = np.random.choice(np.delete(np.arange(population_size), i), 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = a + (self.mutation_factor_init - mutation_factor_change * eval_count) * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cross_prob:\n                        trial[j] = mutant[j]\n\n                trial_score = func(trial)\n                eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.population[i] = trial\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial\n                if eval_count >= self.budget:\n                    break\n\n            self.inertia_weight *= inertia_dampening\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedHybridPSODE", "description": "EnhancedHybridPSODE with fine-tuned inertia reduction, dynamic cognitive-social balance, and adaptive mutation for improved convergence speed.", "configspace": "", "generation": 98, "fitness": 0.30375847544075, "feedback": "The algorithm EnhancedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.28.", "error": "", "parent_id": "af9c7347-3908-47a4-bd67-990d4874ebde", "metadata": {"aucs": [0.8731702169596759, 0.8700501942012644, 0.8700519923974661, 0.8826812799012285, 0.8725659079139712, 0.5563382549206476, 0.8676233986232464, 0.8011624742754944, 0.18285657955985846, 0.7695400329046738, 0.041016809016049094, 9.999999999998899e-05, 0.7545220537137936, 0.7263921780565052, 0.061242452099583566, 0.7617272060192845, 0.7636100048698582, 0.05026379381341939, 0.15667393912312222, 0.16683937926865944, 0.17906518825114925, 0.12851766175012802, 0.13444117937153965, 0.15082245533395544, 0.720075521711121, 0.14992643548894613, 0.1552204983012596, 0.15250144617377226, 0.15343411251280503, 0.13850135348612236, 0.13756781325640022, 0.11938602043231672, 0.11262292943996521, 0.13747320863556522, 0.13544052556170905, 0.1382009781634852, 0.985467698894161, 0.9770436434342816, 0.9883800315586463, 0.9838936713669488, 0.9784884094904076, 0.9772410313369415, 0.9856423752620754, 0.9749062505767924, 0.9830451333385782, 0.7794646696564581, 0.7236081784028894, 0.5098504969256488, 0.752494755701549, 0.2531055084348818, 0.7719642222579839, 0.765857489725659, 0.08744349980848054, 0.7141875869410161, 0.36398672622293593, 0.8205806260316717, 0.22160987588650338, 0.8627054478893753, 0.19000985480243937, 0.1919056709680652, 0.35395364656588013, 0.22812842602100414, 0.336564693032407, 0.12861755016199983, 0.12646889738019218, 0.174380322703807, 0.15802306885083617, 0.1301273630983436, 0.2363185910975416, 0.16777387787090536, 0.12867792183092985, 0.13010719723900233, 0.18614936018827988, 0.15249719309714216, 0.2080044800879558, 0.1561920720721126, 0.20447750958498923, 0.19875531532086077, 0.16105748571967504, 9.999999999998899e-05, 0.2836954338076597, 9.999999999998899e-05, 0.0042822777102106135, 0.07910399384198896, 9.999999999998899e-05, 9.999999999998899e-05, 0.008718425521312523, 0.1815159174261305, 9.999999999998899e-05, 0.08135812377654816, 0.1595276973723141, 0.049913668287244195, 0.14618200112438062, 0.10660567134693377, 0.000497572579125527, 0.026069642034556972, 0.0568674856689948, 0.08825048102261357, 0.03990323924899186, 0.04854715658624298, 0.035167180356197036, 0.10970956034519674, 0.10276190414492425, 0.07559826769451305, 0.08804649617300053, 0.0989464927071031, 0.10253060110655843, 0.09296121184779327, 0.14750115183665657, 0.10554590971829236, 0.16191742229947104, 0.10491495901705561, 0.07862497764628695, 0.11416293628903118, 0.13250203295567442, 0.08068362548148456, 0.08169952061646835, 0.5497388963149143, 0.5446353850941263, 0.5196751048308043, 0.5645939422377773, 0.5356630148417183, 0.2068816381240346, 0.5660869253113303, 0.551726974785308, 0.5866525365864506, 0.1521100033041295, 0.1000902911659538, 0.15103790902697833, 0.15841965124610402, 0.12767971502707787, 0.12242914293313512, 0.08888377647380152, 0.1067754860422574, 0.14156100463183174, 0.1692249249508212, 0.2395552062412063, 0.2136098024119254, 0.23329572440137558, 0.3591390071322449, 0.2288246897753048, 0.14775596643934497, 0.2197138727239747, 0.3088341943356212, 0.2738602850447781, 0.4738561780549636, 0.41549298516115907, 0.4016423198786496, 0.33253469875681085, 0.46971206058824233, 0.5254240944675491, 0.4860645421932799, 0.5631719035686551, 0.2662141547843959, 0.2129073739334506, 0.1719170951325224, 0.19405108652805536, 0.23293137000681574, 0.369851890173848, 0.29549842272109084, 0.2640409680210011, 0.24840396277062327, 0.2055859850461248, 0.19402452022271932, 0.1989379226499295, 0.22153299085940303, 0.22902007494959364, 0.20630085668341858, 0.2378840165446653, 0.22790357753672996, 0.2280173241797553, 0.18826784939318808, 0.20806117664424484, 0.24607129049263143, 0.7623314197930035, 0.24113086972721487, 0.1988380034360313, 0.1984513893335249, 0.7249345053495908, 0.1754181279784658, 0.8996399514044751, 0.26143810529240397, 0.15216812454530737, 0.9173077713263166, 0.20083573424378842, 0.8817670067228224, 0.09939062866768689, 0.1692181923427295, 0.209186324418265, 0.890532980057626, 0.21182184956501648, 0.1419187828650984, 0.7313044578477614, 0.16858950819021778, 0.21050782960909442, 0.20942637257440055, 0.1924146842736878, 0.10401164449797784, 0.19796238932373988, 0.20910746160821025, 0.18917983595579113, 0.19587311813775432, 0.1785023562703052, 0.17864182324107258, 0.1928311782234604, 0.20105629433982208, 0.21466486629969606, 0.08779977853928811, 0.10019913972035843, 0.09225293417756497, 0.09420558331030915, 0.09616513579133301, 0.0938723772265917, 0.12090005490968792, 0.08399546278286141, 0.09266253796654855]}, "mutation_prompt": null}
{"id": "b20b3415-8104-42c2-a8ac-8033bcaa6fff", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_population_size = 34  # Increased initial population for diversity\n        self.final_population_size = 22  # More aggressive population reduction\n        self.inertia_weight = 0.57  # Reduced inertia weight for faster convergence\n        self.cognitive_coeff = 1.9  # Enhanced cognitive coefficient for improved local search\n        self.social_coeff = 1.35  # Slightly increased social coefficient for better global search\n        self.mutation_factor_init = 0.9  # Higher mutation factor for enhanced exploration\n        self.cross_prob = 0.95  # Slightly reduced cross probability to stabilize\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, dim))\n        self.velocities = np.random.uniform(-1, 1, (self.initial_population_size, dim))\n        self.personal_best_positions = np.copy(self.population)\n        self.personal_best_scores = np.full(self.initial_population_size, np.inf)\n        self.global_best_position = None\n        self.global_best_score = np.inf\n\n    def __call__(self, func):\n        eval_count = 0\n        inertia_dampening = 0.98  # Faster dampening for inertia weight\n        mutation_factor_change = (self.mutation_factor_init - 0.5) / (self.budget * 0.9)  # Adjusted mutation factor change for better adaptation\n\n        while eval_count < self.budget:\n            population_size = self.initial_population_size - int(\n                (eval_count / self.budget) * (self.initial_population_size - self.final_population_size))\n\n            for i in range(population_size):\n                score = func(self.population[i])\n                eval_count += 1\n                if score < self.personal_best_scores[i]:\n                    self.personal_best_scores[i] = score\n                    self.personal_best_positions[i] = self.population[i]\n                if score < self.global_best_score:\n                    self.global_best_score = score\n                    self.global_best_position = self.population[i]\n                if eval_count >= self.budget:\n                    break\n\n            r1 = np.random.rand(population_size, self.dim)\n            r2 = np.random.rand(population_size, self.dim)\n            cognitive_component = self.cognitive_coeff * r1 * (self.personal_best_positions[:population_size] - self.population[:population_size])\n            social_component = self.social_coeff * r2 * (self.global_best_position - self.population[:population_size])\n            self.velocities[:population_size] = (self.inertia_weight * self.velocities[:population_size]) + cognitive_component + social_component\n            self.population[:population_size] = self.population[:population_size] + self.velocities[:population_size]\n\n            self.population[:population_size] = np.clip(self.population[:population_size], self.lower_bound, self.upper_bound)\n\n            for i in range(population_size):\n                indices = np.random.choice(np.delete(np.arange(population_size), i), 3, replace=False)\n                a, b, c = self.population[indices]\n                mutant = a + (self.mutation_factor_init - mutation_factor_change * eval_count) * (b - c)\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n\n                for j in range(self.dim):\n                    if np.random.rand() < self.cross_prob:\n                        trial[j] = mutant[j]\n\n                trial_score = func(trial)\n                eval_count += 1\n                if trial_score < self.personal_best_scores[i]:\n                    self.population[i] = trial\n                    self.personal_best_scores[i] = trial_score\n                    self.personal_best_positions[i] = trial\n                if trial_score < self.global_best_score:\n                    self.global_best_score = trial_score\n                    self.global_best_position = trial\n                if eval_count >= self.budget:\n                    break\n\n            self.inertia_weight *= inertia_dampening\n\n        return self.global_best_position, self.global_best_score", "name": "EnhancedHybridPSODE", "description": "EnhancedHybridPSODE with refined adaptive tuning of parameters and improved diversity mechanisms for faster convergence.", "configspace": "", "generation": 99, "fitness": 0.31288394042513246, "feedback": "The algorithm EnhancedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.28.", "error": "", "parent_id": "af9c7347-3908-47a4-bd67-990d4874ebde", "metadata": {"aucs": [0.8666903842330685, 0.8634205289490345, 0.87738034779119, 0.8721484866630582, 0.8610518045360913, 0.868719096941562, 0.8697041016898364, 0.8726337152921647, 0.8762518126994381, 0.06001866951623558, 0.764138080862208, 0.7620526256547122, 0.7614784522712504, 0.6728804583029626, 0.7696956083193639, 0.25814955640876114, 0.7710295853769372, 0.7055765822483123, 0.1343195294602889, 0.13549497033635072, 0.1772113695489279, 0.177816880485265, 0.14978343161055585, 0.15450901800505834, 0.11909626643031157, 0.14912779680859256, 0.14987012380920006, 0.10678726935296923, 0.11422648650881817, 0.13460697353114082, 0.12980491742628653, 0.14031633563372092, 0.1395014161814323, 0.11409240448340663, 0.15234986008749196, 0.13486462246375164, 0.9837807586805422, 0.9845526692740599, 0.978880528392971, 0.9743064176414832, 0.9899222861497216, 0.9763995485026283, 0.9832021317739215, 0.9776818749520536, 0.9775699501866373, 0.6014385704992291, 0.5980357923635435, 0.6720542247777775, 0.26877609652019996, 0.5647130502998038, 0.590137606626839, 0.6058226626657808, 0.08780242946754735, 0.5016487086679668, 0.8570501975194827, 0.5604817781156493, 0.8351915857932075, 0.2765709410386, 0.36502103943520403, 0.3687741707430632, 0.339630524925539, 0.14831998855218587, 0.22612663456357585, 0.1942703662167089, 0.18675512528284122, 0.20609632978237968, 0.10597221921227795, 0.15170012807405708, 0.1618661476651465, 0.17902181607278012, 0.14957511381988775, 0.18236578853411467, 0.1308747273264358, 0.15944152618538554, 0.18998711683851655, 0.24577250722618627, 0.152868759678785, 0.12863971868640478, 0.12515358886509098, 0.03368540770867745, 0.1268535158524028, 0.058173242559309446, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.036775163678766876, 9.999999999998899e-05, 0.009969390210219142, 9.999999999998899e-05, 0.052874235928790814, 0.06684508271477552, 0.0402355980672493, 0.11916111942964469, 0.03512577525023208, 0.07254006320741868, 0.0299873797985849, 0.1384525290226145, 0.054177443485157295, 0.055020860646057934, 0.10715429354757833, 9.999999999998899e-05, 0.04854587832826507, 0.12571541063342517, 0.0919107825848754, 0.0759368715647184, 0.09548538923890515, 0.18639314714331834, 0.22096250240952509, 0.1050371973651405, 0.03988912511435805, 0.03774366529674389, 0.10553565388380559, 0.0063196313319761055, 0.22338713991224957, 0.0479983344572098, 0.06017756600166868, 0.07982646024620843, 0.5218779736417307, 0.5545634549830827, 0.5439203683297973, 0.5678010846013688, 0.6187614847633386, 0.524776627298389, 0.5908516829303769, 0.5426264507480092, 0.5331324252697291, 0.1218599046386396, 0.14784656629397008, 0.11225469416647593, 0.13398193938358272, 0.11741529662888484, 0.1649084802470514, 0.1539458673755042, 0.10577207123296195, 0.13677303949576147, 0.19273238367495904, 0.26277483987952877, 0.17584091622400844, 0.26609445788622255, 0.2444515267470081, 0.3355358096749733, 0.214597964578785, 0.17064111309284202, 0.17532064074338627, 0.4321415294497145, 0.33334899353019054, 0.4732672212600725, 0.3545338542803431, 0.2583847919807375, 0.39982807073642757, 0.5453072008605835, 0.378639594802469, 0.4857151990271499, 0.19551176275343174, 0.25310155563571457, 0.273464366067661, 0.3390540583739776, 0.25335528251939154, 0.2661516836142195, 0.23394022427856687, 0.2238166624404484, 0.4370010598486288, 0.21191450894503217, 0.2082370868111807, 0.19529045089011454, 0.192483457859442, 0.20908858617147574, 0.18972796496869182, 0.21143045186217901, 0.25626830270112355, 0.31677182964443795, 0.20349935593003876, 0.22136300366019024, 0.2064352709549776, 0.2126228407010573, 0.18667704456355472, 0.2254771699313417, 0.2122117896409874, 0.21343417348903448, 0.21985965643826322, 0.8814228011048892, 0.1645599864083248, 0.15260231276361247, 0.8941829084758722, 0.19950807736920007, 0.19852378619344135, 0.8337771155727447, 0.16803433875522966, 0.8848087281379603, 0.5012992562886605, 0.16776452082260862, 0.3797171715246177, 0.31082926138595834, 0.6024198430288781, 0.720793502104486, 0.20987454263282113, 0.15312009995334142, 0.8259866557413236, 0.19141970126609764, 0.2043801450783409, 0.177283874803845, 0.20467847548612095, 0.18431121468336242, 0.18553997738668027, 0.18879099811625222, 0.22558840874033081, 0.2126720305848887, 0.14042587912700177, 0.09009805965466533, 0.1320599455656054, 0.09548323576988782, 0.08638842090646226, 0.09794771368171018, 0.08093371817465833, 0.07461690991510261, 0.1011238193345716]}, "mutation_prompt": null}
