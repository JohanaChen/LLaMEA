{"id": "848b60b8-1e79-4fe2-8d47-c2b718158fc4", "solution": "import numpy as np\n\nclass AHPE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.7\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _evaluate_population(self, population, func):\n        return np.array([func(ind) for ind in population])\n\n    def _update_velocity(self, velocities, population, personal_best, global_best):\n        r1, r2 = np.random.rand(2, self.population_size, self.dim)\n        cognitive = self.c1 * r1 * (personal_best - population)\n        social = self.c2 * r2 * (global_best - population)\n        return velocities + cognitive + social\n\n    def _apply_bounds(self, population):\n        return np.clip(population, self.lower_bound, self.upper_bound)\n\n    def _differential_mutation(self, population, best_idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = population[indices]\n        mutant = a + self.mutation_factor * (b - c)\n        target = population[best_idx]\n        trial = np.where(np.random.rand(self.dim) < self.crossover_prob, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_value = self._evaluate_population(population, func)\n        \n        global_best_idx = np.argmin(personal_best_value)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_value[global_best_idx]\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            velocities = self._update_velocity(velocities, population, personal_best, global_best)\n            population = self._apply_bounds(population + velocities)\n\n            new_population_value = self._evaluate_population(population, func)\n            evaluations += self.population_size\n\n            for i in range(self.population_size):\n                if new_population_value[i] < personal_best_value[i]:\n                    personal_best[i] = population[i]\n                    personal_best_value[i] = new_population_value[i]\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n            # Differential Evolution step\n            for i in range(self.population_size):\n                trial = self._differential_mutation(population, i)\n                trial_value = func(trial)\n                evaluations += 1\n\n                if trial_value < personal_best_value[i]:\n                    population[i] = trial\n                    personal_best[i] = trial\n                    personal_best_value[i] = trial_value\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n                if evaluations >= self.budget:\n                    break\n        \n        return global_best", "name": "AHPE", "description": "Adaptive Hybrid Particle Evolution (AHPE) fuses concepts from Particle Swarm Optimization and Differential Evolution to dynamically adjust exploration and exploitation based on swarm diversity and population success.", "configspace": "", "generation": 0, "fitness": 0.14318218854209525, "feedback": "The algorithm AHPE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.19.", "error": "", "parent_id": null, "metadata": {"aucs": [0.22211226226751046, 0.21986840014755016, 0.2963100959824455, 0.2643802287385909, 0.2696857303165686, 0.2730152487837104, 0.3283806325612689, 0.24810010481238465, 0.2417145847153197, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04800329129064462, 0.080363637242307, 0.05771329228247468, 0.06716040854003391, 0.04892114444775275, 0.071075081050605, 0.07068352602580275, 0.06465177209367134, 0.051119951543396436, 0.061189768551837886, 0.03776915709506179, 0.04048196341346322, 0.05941349219712444, 0.0520880020295883, 0.040756521351995034, 0.04555545843239417, 0.048380973212945766, 0.05466886501820212, 0.9836783223171812, 0.9680578262172431, 0.9794425170957711, 0.9698147990450061, 0.9767365784554304, 0.976925887572157, 0.9788280858948085, 0.9746936230539132, 0.9765260663991234, 0.12399512039805582, 0.11712582052290688, 0.05581303458868514, 0.14033998581991491, 0.0989188315359103, 0.149190773161755, 0.11191104257156126, 0.08652359070491489, 0.11762546683962427, 0.16609109912356235, 0.14248355543707947, 0.15871133971756557, 0.17781429871170262, 0.14136548530518267, 0.17402764358365963, 0.11074863593802964, 0.14890311350672436, 0.1811603298531017, 0.028589293817662065, 0.01525551788407431, 0.04203094636269511, 0.03174995527147617, 0.031083142637881256, 0.00746431091476929, 0.05013717122664163, 0.057323613369962945, 0.0672703284599504, 0.05373550284380546, 0.029890973528340692, 0.0007857070550620904, 0.04552429262527513, 0.003146714632559111, 0.08471960752272867, 0.0222783299266317, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05100410831322666, 0.011538761546511345, 0.02252302265142503, 0.06630421688987043, 0.049083359214261546, 0.020141025691745362, 0.009907963200590841, 0.03583608680340444, 0.02771055067172734, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002578526352997601, 0.011032091777774311, 0.01336498971514899, 0.01708359660364056, 0.03665387765102002, 9.999999999998899e-05, 0.024475642786605523, 0.03210573461359523, 0.018847712328288413, 0.26330638845428134, 0.2618731844961917, 0.3023221214235182, 0.20398648060993674, 0.20172300148273614, 0.20282192984947445, 0.2958566255308913, 0.20992003771394352, 0.23859911772152442, 0.07411683454833018, 0.05425451576049978, 0.07951961289216758, 0.06525605431158565, 0.06417407542911246, 0.05399457254390361, 0.06117886233648584, 0.054555965817384866, 0.05974928664925805, 0.1394573287798052, 0.1327484967911594, 0.12205895382717413, 0.18457144661878344, 0.13833177742019265, 0.13073333297734457, 0.14575037717881623, 0.13832940538969396, 0.130639114042725, 0.18077882357087638, 0.18051692478838322, 0.18935818858721754, 0.17512210700839237, 0.1994497066030565, 0.16996156895888348, 0.20411917083030562, 0.20003826464957242, 0.19723147320819312, 0.13519232548899962, 0.12628596024183192, 0.15355331202673406, 0.1138461016205149, 0.15186591589499676, 0.1374884829117391, 0.14216462657907591, 0.15388490911802277, 0.16644077921866685, 0.15638378147887466, 0.17382728587427687, 0.16477286829428506, 0.18323294373500654, 0.15537204268947336, 0.15869702615534043, 0.18871609930258315, 0.17404464558750365, 0.16211446263857432, 0.15654363172342878, 0.16680590145277785, 0.1567158023543156, 0.1567100557803608, 0.15301278934461293, 0.15853855048831034, 0.1559227819745298, 0.1597965204873657, 0.14980283208055512, 0.14864541868817127, 0.16337412293018572, 0.12292236534987588, 0.3084430699191084, 0.1818330961836877, 0.16808907376987192, 0.12742923573702392, 0.22780489696294148, 0.22456939262651132, 0.26878398495503675, 0.17451378862523237, 0.15736303249423256, 0.16759220389700202, 0.1916210541230846, 0.11770585569235659, 0.18397797271901672, 0.14174623602126335, 0.17868326145408286, 0.1831696516879079, 0.1933451033201673, 0.19269451668519189, 0.1753616773490807, 0.17097332286992883, 0.1843841376463614, 0.17892732231460828, 0.17880842489826498, 0.18257257895182744, 0.06065795565017229, 0.05669177748394083, 0.0610559978686015, 0.0593572199986645, 0.06046944050334746, 0.05007633300129133, 0.07780563860071565, 0.05878922357133687, 0.05610430850905468]}, "mutation_prompt": null}
{"id": "341bada4-43c8-47e4-b874-785009d21271", "solution": "import numpy as np\n\nclass AHPE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.7\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _evaluate_population(self, population, func):\n        return np.array([func(ind) for ind in population])\n\n    def _update_velocity(self, velocities, population, personal_best, global_best):\n        r1, r2 = np.random.rand(2, self.population_size, self.dim)\n        cognitive = self.c1 * r1 * (personal_best - population)\n        social = self.c2 * r2 * (global_best - population)\n        return velocities + cognitive + social\n\n    def _apply_bounds(self, population):\n        return np.clip(population, self.lower_bound, self.upper_bound)\n\n    def _differential_mutation(self, population, best_idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = population[indices]\n        mutant = a + self.mutation_factor * (b - c)\n        target = population[best_idx]\n        trial = np.where(np.random.rand(self.dim) < self.crossover_prob, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_value = self._evaluate_population(population, func)\n        \n        global_best_idx = np.argmin(personal_best_value)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_value[global_best_idx]\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            velocities = self._update_velocity(velocities, population, personal_best, global_best)\n            population = self._apply_bounds(population + velocities)\n\n            new_population_value = self._evaluate_population(population, func)\n            evaluations += self.population_size\n\n            for i in range(self.population_size):\n                if new_population_value[i] < personal_best_value[i]:\n                    personal_best[i] = population[i]\n                    personal_best_value[i] = new_population_value[i]\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n            # Differential Evolution step\n            for i in range(self.population_size):\n                trial = self._differential_mutation(population, i)\n                trial_value = func(trial)\n                evaluations += 1\n\n                if trial_value < personal_best_value[i]:\n                    population[i] = trial\n                    personal_best[i] = trial\n                    personal_best_value[i] = trial_value\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n                if evaluations >= self.budget:\n                    break\n        \n        return global_best", "name": "AHPE", "description": "Adaptive Hybrid Particle Evolution (AHPE) fuses concepts from Particle Swarm Optimization and Differential Evolution to dynamically adjust exploration and exploitation based on swarm diversity and population success.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "848b60b8-1e79-4fe2-8d47-c2b718158fc4", "metadata": {"aucs": [0.22211226226751046, 0.21986840014755016, 0.2963100959824455, 0.2643802287385909, 0.2696857303165686, 0.2730152487837104, 0.3283806325612689, 0.24810010481238465, 0.2417145847153197, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04800329129064462, 0.080363637242307, 0.05771329228247468, 0.06716040854003391, 0.04892114444775275, 0.071075081050605, 0.07068352602580275, 0.06465177209367134, 0.051119951543396436, 0.061189768551837886, 0.03776915709506179, 0.04048196341346322, 0.05941349219712444, 0.0520880020295883, 0.040756521351995034, 0.04555545843239417, 0.048380973212945766, 0.05466886501820212, 0.9836783223171812, 0.9680578262172431, 0.9794425170957711, 0.9698147990450061, 0.9767365784554304, 0.976925887572157, 0.9788280858948085, 0.9746936230539132, 0.9765260663991234, 0.12399512039805582, 0.11712582052290688, 0.05581303458868514, 0.14033998581991491, 0.0989188315359103, 0.149190773161755, 0.11191104257156126, 0.08652359070491489, 0.11762546683962427, 0.16609109912356235, 0.14248355543707947, 0.15871133971756557, 0.17781429871170262, 0.14136548530518267, 0.17402764358365963, 0.11074863593802964, 0.14890311350672436, 0.1811603298531017, 0.028589293817662065, 0.01525551788407431, 0.04203094636269511, 0.03174995527147617, 0.031083142637881256, 0.00746431091476929, 0.05013717122664163, 0.057323613369962945, 0.0672703284599504, 0.05373550284380546, 0.029890973528340692, 0.0007857070550620904, 0.04552429262527513, 0.003146714632559111, 0.08471960752272867, 0.0222783299266317, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05100410831322666, 0.011538761546511345, 0.02252302265142503, 0.06630421688987043, 0.049083359214261546, 0.020141025691745362, 0.009907963200590841, 0.03583608680340444, 0.02771055067172734, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002578526352997601, 0.011032091777774311, 0.01336498971514899, 0.01708359660364056, 0.03665387765102002, 9.999999999998899e-05, 0.024475642786605523, 0.03210573461359523, 0.018847712328288413, 0.26330638845428134, 0.2618731844961917, 0.3023221214235182, 0.20398648060993674, 0.20172300148273614, 0.20282192984947445, 0.2958566255308913, 0.20992003771394352, 0.23859911772152442, 0.07411683454833018, 0.05425451576049978, 0.07951961289216758, 0.06525605431158565, 0.06417407542911246, 0.05399457254390361, 0.06117886233648584, 0.054555965817384866, 0.05974928664925805, 0.1394573287798052, 0.1327484967911594, 0.12205895382717413, 0.18457144661878344, 0.13833177742019265, 0.13073333297734457, 0.14575037717881623, 0.13832940538969396, 0.130639114042725, 0.18077882357087638, 0.18051692478838322, 0.18935818858721754, 0.17512210700839237, 0.1994497066030565, 0.16996156895888348, 0.20411917083030562, 0.20003826464957242, 0.19723147320819312, 0.13519232548899962, 0.12628596024183192, 0.15355331202673406, 0.1138461016205149, 0.15186591589499676, 0.1374884829117391, 0.14216462657907591, 0.15388490911802277, 0.16644077921866685, 0.15638378147887466, 0.17382728587427687, 0.16477286829428506, 0.18323294373500654, 0.15537204268947336, 0.15869702615534043, 0.18871609930258315, 0.17404464558750365, 0.16211446263857432, 0.15654363172342878, 0.16680590145277785, 0.1567158023543156, 0.1567100557803608, 0.15301278934461293, 0.15853855048831034, 0.1559227819745298, 0.1597965204873657, 0.14980283208055512, 0.14864541868817127, 0.16337412293018572, 0.12292236534987588, 0.3084430699191084, 0.1818330961836877, 0.16808907376987192, 0.12742923573702392, 0.22780489696294148, 0.22456939262651132, 0.26878398495503675, 0.17451378862523237, 0.15736303249423256, 0.16759220389700202, 0.1916210541230846, 0.11770585569235659, 0.18397797271901672, 0.14174623602126335, 0.17868326145408286, 0.1831696516879079, 0.1933451033201673, 0.19269451668519189, 0.1753616773490807, 0.17097332286992883, 0.1843841376463614, 0.17892732231460828, 0.17880842489826498, 0.18257257895182744, 0.06065795565017229, 0.05669177748394083, 0.0610559978686015, 0.0593572199986645, 0.06046944050334746, 0.05007633300129133, 0.07780563860071565, 0.05878922357133687, 0.05610430850905468]}, "mutation_prompt": null}
{"id": "22b78e5a-b898-444a-9789-baee0be23595", "solution": "import numpy as np\n\nclass AHPE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.7\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _evaluate_population(self, population, func):\n        return np.array([func(ind) for ind in population])\n\n    def _update_velocity(self, velocities, population, personal_best, global_best):\n        r1, r2 = np.random.rand(2, self.population_size, self.dim)\n        cognitive = self.c1 * r1 * (personal_best - population)\n        social = self.c2 * r2 * (global_best - population)\n        return velocities + cognitive + social\n\n    def _apply_bounds(self, population):\n        return np.clip(population, self.lower_bound, self.upper_bound)\n\n    def _differential_mutation(self, population, best_idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = population[indices]\n        mutant = a + self.mutation_factor * (b - c)\n        target = population[best_idx]\n        trial = np.where(np.random.rand(self.dim) < self.crossover_prob, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_value = self._evaluate_population(population, func)\n        \n        global_best_idx = np.argmin(personal_best_value)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_value[global_best_idx]\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            velocities = self._update_velocity(velocities, population, personal_best, global_best)\n            population = self._apply_bounds(population + velocities)\n\n            new_population_value = self._evaluate_population(population, func)\n            evaluations += self.population_size\n\n            for i in range(self.population_size):\n                if new_population_value[i] < personal_best_value[i]:\n                    personal_best[i] = population[i]\n                    personal_best_value[i] = new_population_value[i]\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n            # Differential Evolution step\n            for i in range(self.population_size):\n                trial = self._differential_mutation(population, i)\n                trial_value = func(trial)\n                evaluations += 1\n\n                if trial_value < personal_best_value[i]:\n                    population[i] = trial\n                    personal_best[i] = trial\n                    personal_best_value[i] = trial_value\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n                if evaluations >= self.budget:\n                    break\n        \n        return global_best", "name": "AHPE", "description": "Adaptive Hybrid Particle Evolution (AHPE) fuses concepts from Particle Swarm Optimization and Differential Evolution to dynamically adjust exploration and exploitation based on swarm diversity and population success.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "848b60b8-1e79-4fe2-8d47-c2b718158fc4", "metadata": {"aucs": [0.22211226226751046, 0.21986840014755016, 0.2963100959824455, 0.2643802287385909, 0.2696857303165686, 0.2730152487837104, 0.3283806325612689, 0.24810010481238465, 0.2417145847153197, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04800329129064462, 0.080363637242307, 0.05771329228247468, 0.06716040854003391, 0.04892114444775275, 0.071075081050605, 0.07068352602580275, 0.06465177209367134, 0.051119951543396436, 0.061189768551837886, 0.03776915709506179, 0.04048196341346322, 0.05941349219712444, 0.0520880020295883, 0.040756521351995034, 0.04555545843239417, 0.048380973212945766, 0.05466886501820212, 0.9836783223171812, 0.9680578262172431, 0.9794425170957711, 0.9698147990450061, 0.9767365784554304, 0.976925887572157, 0.9788280858948085, 0.9746936230539132, 0.9765260663991234, 0.12399512039805582, 0.11712582052290688, 0.05581303458868514, 0.14033998581991491, 0.0989188315359103, 0.149190773161755, 0.11191104257156126, 0.08652359070491489, 0.11762546683962427, 0.16609109912356235, 0.14248355543707947, 0.15871133971756557, 0.17781429871170262, 0.14136548530518267, 0.17402764358365963, 0.11074863593802964, 0.14890311350672436, 0.1811603298531017, 0.028589293817662065, 0.01525551788407431, 0.04203094636269511, 0.03174995527147617, 0.031083142637881256, 0.00746431091476929, 0.05013717122664163, 0.057323613369962945, 0.0672703284599504, 0.05373550284380546, 0.029890973528340692, 0.0007857070550620904, 0.04552429262527513, 0.003146714632559111, 0.08471960752272867, 0.0222783299266317, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05100410831322666, 0.011538761546511345, 0.02252302265142503, 0.06630421688987043, 0.049083359214261546, 0.020141025691745362, 0.009907963200590841, 0.03583608680340444, 0.02771055067172734, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002578526352997601, 0.011032091777774311, 0.01336498971514899, 0.01708359660364056, 0.03665387765102002, 9.999999999998899e-05, 0.024475642786605523, 0.03210573461359523, 0.018847712328288413, 0.26330638845428134, 0.2618731844961917, 0.3023221214235182, 0.20398648060993674, 0.20172300148273614, 0.20282192984947445, 0.2958566255308913, 0.20992003771394352, 0.23859911772152442, 0.07411683454833018, 0.05425451576049978, 0.07951961289216758, 0.06525605431158565, 0.06417407542911246, 0.05399457254390361, 0.06117886233648584, 0.054555965817384866, 0.05974928664925805, 0.1394573287798052, 0.1327484967911594, 0.12205895382717413, 0.18457144661878344, 0.13833177742019265, 0.13073333297734457, 0.14575037717881623, 0.13832940538969396, 0.130639114042725, 0.18077882357087638, 0.18051692478838322, 0.18935818858721754, 0.17512210700839237, 0.1994497066030565, 0.16996156895888348, 0.20411917083030562, 0.20003826464957242, 0.19723147320819312, 0.13519232548899962, 0.12628596024183192, 0.15355331202673406, 0.1138461016205149, 0.15186591589499676, 0.1374884829117391, 0.14216462657907591, 0.15388490911802277, 0.16644077921866685, 0.15638378147887466, 0.17382728587427687, 0.16477286829428506, 0.18323294373500654, 0.15537204268947336, 0.15869702615534043, 0.18871609930258315, 0.17404464558750365, 0.16211446263857432, 0.15654363172342878, 0.16680590145277785, 0.1567158023543156, 0.1567100557803608, 0.15301278934461293, 0.15853855048831034, 0.1559227819745298, 0.1597965204873657, 0.14980283208055512, 0.14864541868817127, 0.16337412293018572, 0.12292236534987588, 0.3084430699191084, 0.1818330961836877, 0.16808907376987192, 0.12742923573702392, 0.22780489696294148, 0.22456939262651132, 0.26878398495503675, 0.17451378862523237, 0.15736303249423256, 0.16759220389700202, 0.1916210541230846, 0.11770585569235659, 0.18397797271901672, 0.14174623602126335, 0.17868326145408286, 0.1831696516879079, 0.1933451033201673, 0.19269451668519189, 0.1753616773490807, 0.17097332286992883, 0.1843841376463614, 0.17892732231460828, 0.17880842489826498, 0.18257257895182744, 0.06065795565017229, 0.05669177748394083, 0.0610559978686015, 0.0593572199986645, 0.06046944050334746, 0.05007633300129133, 0.07780563860071565, 0.05878922357133687, 0.05610430850905468]}, "mutation_prompt": null}
{"id": "5a893c5c-12d4-4101-b172-b0e715d2a965", "solution": "import numpy as np\n\nclass AHPE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.7\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _evaluate_population(self, population, func):\n        return np.array([func(ind) for ind in population])\n\n    def _update_velocity(self, velocities, population, personal_best, global_best):\n        r1, r2 = np.random.rand(2, self.population_size, self.dim)\n        cognitive = self.c1 * r1 * (personal_best - population)\n        social = self.c2 * r2 * (global_best - population)\n        return velocities + cognitive + social\n\n    def _apply_bounds(self, population):\n        return np.clip(population, self.lower_bound, self.upper_bound)\n\n    def _differential_mutation(self, population, best_idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = population[indices]\n        mutant = a + self.mutation_factor * (b - c)\n        target = population[best_idx]\n        trial = np.where(np.random.rand(self.dim) < self.crossover_prob, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_value = self._evaluate_population(population, func)\n        \n        global_best_idx = np.argmin(personal_best_value)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_value[global_best_idx]\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            velocities = self._update_velocity(velocities, population, personal_best, global_best)\n            population = self._apply_bounds(population + velocities)\n\n            new_population_value = self._evaluate_population(population, func)\n            evaluations += self.population_size\n\n            for i in range(self.population_size):\n                if new_population_value[i] < personal_best_value[i]:\n                    personal_best[i] = population[i]\n                    personal_best_value[i] = new_population_value[i]\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n            # Differential Evolution step\n            for i in range(self.population_size):\n                trial = self._differential_mutation(population, i)\n                trial_value = func(trial)\n                evaluations += 1\n\n                if trial_value < personal_best_value[i]:\n                    population[i] = trial\n                    personal_best[i] = trial\n                    personal_best_value[i] = trial_value\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n                if evaluations >= self.budget:\n                    break\n        \n        return global_best", "name": "AHPE", "description": "Adaptive Hybrid Particle Evolution (AHPE) fuses concepts from Particle Swarm Optimization and Differential Evolution to dynamically adjust exploration and exploitation based on swarm diversity and population success.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "848b60b8-1e79-4fe2-8d47-c2b718158fc4", "metadata": {"aucs": [0.22211226226751046, 0.21986840014755016, 0.2963100959824455, 0.2643802287385909, 0.2696857303165686, 0.2730152487837104, 0.3283806325612689, 0.24810010481238465, 0.2417145847153197, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04800329129064462, 0.080363637242307, 0.05771329228247468, 0.06716040854003391, 0.04892114444775275, 0.071075081050605, 0.07068352602580275, 0.06465177209367134, 0.051119951543396436, 0.061189768551837886, 0.03776915709506179, 0.04048196341346322, 0.05941349219712444, 0.0520880020295883, 0.040756521351995034, 0.04555545843239417, 0.048380973212945766, 0.05466886501820212, 0.9836783223171812, 0.9680578262172431, 0.9794425170957711, 0.9698147990450061, 0.9767365784554304, 0.976925887572157, 0.9788280858948085, 0.9746936230539132, 0.9765260663991234, 0.12399512039805582, 0.11712582052290688, 0.05581303458868514, 0.14033998581991491, 0.0989188315359103, 0.149190773161755, 0.11191104257156126, 0.08652359070491489, 0.11762546683962427, 0.16609109912356235, 0.14248355543707947, 0.15871133971756557, 0.17781429871170262, 0.14136548530518267, 0.17402764358365963, 0.11074863593802964, 0.14890311350672436, 0.1811603298531017, 0.028589293817662065, 0.01525551788407431, 0.04203094636269511, 0.03174995527147617, 0.031083142637881256, 0.00746431091476929, 0.05013717122664163, 0.057323613369962945, 0.0672703284599504, 0.05373550284380546, 0.029890973528340692, 0.0007857070550620904, 0.04552429262527513, 0.003146714632559111, 0.08471960752272867, 0.0222783299266317, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05100410831322666, 0.011538761546511345, 0.02252302265142503, 0.06630421688987043, 0.049083359214261546, 0.020141025691745362, 0.009907963200590841, 0.03583608680340444, 0.02771055067172734, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002578526352997601, 0.011032091777774311, 0.01336498971514899, 0.01708359660364056, 0.03665387765102002, 9.999999999998899e-05, 0.024475642786605523, 0.03210573461359523, 0.018847712328288413, 0.26330638845428134, 0.2618731844961917, 0.3023221214235182, 0.20398648060993674, 0.20172300148273614, 0.20282192984947445, 0.2958566255308913, 0.20992003771394352, 0.23859911772152442, 0.07411683454833018, 0.05425451576049978, 0.07951961289216758, 0.06525605431158565, 0.06417407542911246, 0.05399457254390361, 0.06117886233648584, 0.054555965817384866, 0.05974928664925805, 0.1394573287798052, 0.1327484967911594, 0.12205895382717413, 0.18457144661878344, 0.13833177742019265, 0.13073333297734457, 0.14575037717881623, 0.13832940538969396, 0.130639114042725, 0.18077882357087638, 0.18051692478838322, 0.18935818858721754, 0.17512210700839237, 0.1994497066030565, 0.16996156895888348, 0.20411917083030562, 0.20003826464957242, 0.19723147320819312, 0.13519232548899962, 0.12628596024183192, 0.15355331202673406, 0.1138461016205149, 0.15186591589499676, 0.1374884829117391, 0.14216462657907591, 0.15388490911802277, 0.16644077921866685, 0.15638378147887466, 0.17382728587427687, 0.16477286829428506, 0.18323294373500654, 0.15537204268947336, 0.15869702615534043, 0.18871609930258315, 0.17404464558750365, 0.16211446263857432, 0.15654363172342878, 0.16680590145277785, 0.1567158023543156, 0.1567100557803608, 0.15301278934461293, 0.15853855048831034, 0.1559227819745298, 0.1597965204873657, 0.14980283208055512, 0.14864541868817127, 0.16337412293018572, 0.12292236534987588, 0.3084430699191084, 0.1818330961836877, 0.16808907376987192, 0.12742923573702392, 0.22780489696294148, 0.22456939262651132, 0.26878398495503675, 0.17451378862523237, 0.15736303249423256, 0.16759220389700202, 0.1916210541230846, 0.11770585569235659, 0.18397797271901672, 0.14174623602126335, 0.17868326145408286, 0.1831696516879079, 0.1933451033201673, 0.19269451668519189, 0.1753616773490807, 0.17097332286992883, 0.1843841376463614, 0.17892732231460828, 0.17880842489826498, 0.18257257895182744, 0.06065795565017229, 0.05669177748394083, 0.0610559978686015, 0.0593572199986645, 0.06046944050334746, 0.05007633300129133, 0.07780563860071565, 0.05878922357133687, 0.05610430850905468]}, "mutation_prompt": null}
{"id": "4ca91e6d-b1ec-41f1-ae2a-a13287a4eebb", "solution": "import numpy as np\n\nclass AHPE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.7\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _evaluate_population(self, population, func):\n        return np.array([func(ind) for ind in population])\n\n    def _update_velocity(self, velocities, population, personal_best, global_best):\n        r1, r2 = np.random.rand(2, self.population_size, self.dim)\n        cognitive = self.c1 * r1 * (personal_best - population)\n        social = self.c2 * r2 * (global_best - population)\n        return velocities + cognitive + social\n\n    def _apply_bounds(self, population):\n        return np.clip(population, self.lower_bound, self.upper_bound)\n\n    def _differential_mutation(self, population, best_idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = population[indices]\n        mutant = a + self.mutation_factor * (b - c)\n        target = population[best_idx]\n        trial = np.where(np.random.rand(self.dim) < self.crossover_prob, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_value = self._evaluate_population(population, func)\n        \n        global_best_idx = np.argmin(personal_best_value)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_value[global_best_idx]\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            velocities = self._update_velocity(velocities, population, personal_best, global_best)\n            population = self._apply_bounds(population + velocities)\n\n            new_population_value = self._evaluate_population(population, func)\n            evaluations += self.population_size\n\n            for i in range(self.population_size):\n                if new_population_value[i] < personal_best_value[i]:\n                    personal_best[i] = population[i]\n                    personal_best_value[i] = new_population_value[i]\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n            # Differential Evolution step\n            for i in range(self.population_size):\n                trial = self._differential_mutation(population, i)\n                trial_value = func(trial)\n                evaluations += 1\n\n                if trial_value < personal_best_value[i]:\n                    population[i] = trial\n                    personal_best[i] = trial\n                    personal_best_value[i] = trial_value\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n                if evaluations >= self.budget:\n                    break\n        \n        return global_best", "name": "AHPE", "description": "Adaptive Hybrid Particle Evolution (AHPE) fuses concepts from Particle Swarm Optimization and Differential Evolution to dynamically adjust exploration and exploitation based on swarm diversity and population success.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "848b60b8-1e79-4fe2-8d47-c2b718158fc4", "metadata": {"aucs": [0.22211226226751046, 0.21986840014755016, 0.2963100959824455, 0.2643802287385909, 0.2696857303165686, 0.2730152487837104, 0.3283806325612689, 0.24810010481238465, 0.2417145847153197, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04800329129064462, 0.080363637242307, 0.05771329228247468, 0.06716040854003391, 0.04892114444775275, 0.071075081050605, 0.07068352602580275, 0.06465177209367134, 0.051119951543396436, 0.061189768551837886, 0.03776915709506179, 0.04048196341346322, 0.05941349219712444, 0.0520880020295883, 0.040756521351995034, 0.04555545843239417, 0.048380973212945766, 0.05466886501820212, 0.9836783223171812, 0.9680578262172431, 0.9794425170957711, 0.9698147990450061, 0.9767365784554304, 0.976925887572157, 0.9788280858948085, 0.9746936230539132, 0.9765260663991234, 0.12399512039805582, 0.11712582052290688, 0.05581303458868514, 0.14033998581991491, 0.0989188315359103, 0.149190773161755, 0.11191104257156126, 0.08652359070491489, 0.11762546683962427, 0.16609109912356235, 0.14248355543707947, 0.15871133971756557, 0.17781429871170262, 0.14136548530518267, 0.17402764358365963, 0.11074863593802964, 0.14890311350672436, 0.1811603298531017, 0.028589293817662065, 0.01525551788407431, 0.04203094636269511, 0.03174995527147617, 0.031083142637881256, 0.00746431091476929, 0.05013717122664163, 0.057323613369962945, 0.0672703284599504, 0.05373550284380546, 0.029890973528340692, 0.0007857070550620904, 0.04552429262527513, 0.003146714632559111, 0.08471960752272867, 0.0222783299266317, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05100410831322666, 0.011538761546511345, 0.02252302265142503, 0.06630421688987043, 0.049083359214261546, 0.020141025691745362, 0.009907963200590841, 0.03583608680340444, 0.02771055067172734, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002578526352997601, 0.011032091777774311, 0.01336498971514899, 0.01708359660364056, 0.03665387765102002, 9.999999999998899e-05, 0.024475642786605523, 0.03210573461359523, 0.018847712328288413, 0.26330638845428134, 0.2618731844961917, 0.3023221214235182, 0.20398648060993674, 0.20172300148273614, 0.20282192984947445, 0.2958566255308913, 0.20992003771394352, 0.23859911772152442, 0.07411683454833018, 0.05425451576049978, 0.07951961289216758, 0.06525605431158565, 0.06417407542911246, 0.05399457254390361, 0.06117886233648584, 0.054555965817384866, 0.05974928664925805, 0.1394573287798052, 0.1327484967911594, 0.12205895382717413, 0.18457144661878344, 0.13833177742019265, 0.13073333297734457, 0.14575037717881623, 0.13832940538969396, 0.130639114042725, 0.18077882357087638, 0.18051692478838322, 0.18935818858721754, 0.17512210700839237, 0.1994497066030565, 0.16996156895888348, 0.20411917083030562, 0.20003826464957242, 0.19723147320819312, 0.13519232548899962, 0.12628596024183192, 0.15355331202673406, 0.1138461016205149, 0.15186591589499676, 0.1374884829117391, 0.14216462657907591, 0.15388490911802277, 0.16644077921866685, 0.15638378147887466, 0.17382728587427687, 0.16477286829428506, 0.18323294373500654, 0.15537204268947336, 0.15869702615534043, 0.18871609930258315, 0.17404464558750365, 0.16211446263857432, 0.15654363172342878, 0.16680590145277785, 0.1567158023543156, 0.1567100557803608, 0.15301278934461293, 0.15853855048831034, 0.1559227819745298, 0.1597965204873657, 0.14980283208055512, 0.14864541868817127, 0.16337412293018572, 0.12292236534987588, 0.3084430699191084, 0.1818330961836877, 0.16808907376987192, 0.12742923573702392, 0.22780489696294148, 0.22456939262651132, 0.26878398495503675, 0.17451378862523237, 0.15736303249423256, 0.16759220389700202, 0.1916210541230846, 0.11770585569235659, 0.18397797271901672, 0.14174623602126335, 0.17868326145408286, 0.1831696516879079, 0.1933451033201673, 0.19269451668519189, 0.1753616773490807, 0.17097332286992883, 0.1843841376463614, 0.17892732231460828, 0.17880842489826498, 0.18257257895182744, 0.06065795565017229, 0.05669177748394083, 0.0610559978686015, 0.0593572199986645, 0.06046944050334746, 0.05007633300129133, 0.07780563860071565, 0.05878922357133687, 0.05610430850905468]}, "mutation_prompt": null}
{"id": "a21a232f-465a-4ed0-a27e-ab84e5309a1b", "solution": "import numpy as np\n\nclass AHPE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.7\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _evaluate_population(self, population, func):\n        return np.array([func(ind) for ind in population])\n\n    def _update_velocity(self, velocities, population, personal_best, global_best):\n        r1, r2 = np.random.rand(2, self.population_size, self.dim)\n        cognitive = self.c1 * r1 * (personal_best - population)\n        social = self.c2 * r2 * (global_best - population)\n        return velocities + cognitive + social\n\n    def _apply_bounds(self, population):\n        return np.clip(population, self.lower_bound, self.upper_bound)\n\n    def _differential_mutation(self, population, best_idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = population[indices]\n        mutant = a + self.mutation_factor * (b - c)\n        target = population[best_idx]\n        trial = np.where(np.random.rand(self.dim) < self.crossover_prob, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_value = self._evaluate_population(population, func)\n        \n        global_best_idx = np.argmin(personal_best_value)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_value[global_best_idx]\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            velocities = self._update_velocity(velocities, population, personal_best, global_best)\n            population = self._apply_bounds(population + velocities)\n\n            new_population_value = self._evaluate_population(population, func)\n            evaluations += self.population_size\n\n            for i in range(self.population_size):\n                if new_population_value[i] < personal_best_value[i]:\n                    personal_best[i] = population[i]\n                    personal_best_value[i] = new_population_value[i]\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n            # Differential Evolution step\n            for i in range(self.population_size):\n                trial = self._differential_mutation(population, i)\n                trial_value = func(trial)\n                evaluations += 1\n\n                if trial_value < personal_best_value[i]:\n                    population[i] = trial\n                    personal_best[i] = trial\n                    personal_best_value[i] = trial_value\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n                if evaluations >= self.budget:\n                    break\n        \n        return global_best", "name": "AHPE", "description": "Adaptive Hybrid Particle Evolution (AHPE) fuses concepts from Particle Swarm Optimization and Differential Evolution to dynamically adjust exploration and exploitation based on swarm diversity and population success.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "848b60b8-1e79-4fe2-8d47-c2b718158fc4", "metadata": {"aucs": [0.22211226226751046, 0.21986840014755016, 0.2963100959824455, 0.2643802287385909, 0.2696857303165686, 0.2730152487837104, 0.3283806325612689, 0.24810010481238465, 0.2417145847153197, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04800329129064462, 0.080363637242307, 0.05771329228247468, 0.06716040854003391, 0.04892114444775275, 0.071075081050605, 0.07068352602580275, 0.06465177209367134, 0.051119951543396436, 0.061189768551837886, 0.03776915709506179, 0.04048196341346322, 0.05941349219712444, 0.0520880020295883, 0.040756521351995034, 0.04555545843239417, 0.048380973212945766, 0.05466886501820212, 0.9836783223171812, 0.9680578262172431, 0.9794425170957711, 0.9698147990450061, 0.9767365784554304, 0.976925887572157, 0.9788280858948085, 0.9746936230539132, 0.9765260663991234, 0.12399512039805582, 0.11712582052290688, 0.05581303458868514, 0.14033998581991491, 0.0989188315359103, 0.149190773161755, 0.11191104257156126, 0.08652359070491489, 0.11762546683962427, 0.16609109912356235, 0.14248355543707947, 0.15871133971756557, 0.17781429871170262, 0.14136548530518267, 0.17402764358365963, 0.11074863593802964, 0.14890311350672436, 0.1811603298531017, 0.028589293817662065, 0.01525551788407431, 0.04203094636269511, 0.03174995527147617, 0.031083142637881256, 0.00746431091476929, 0.05013717122664163, 0.057323613369962945, 0.0672703284599504, 0.05373550284380546, 0.029890973528340692, 0.0007857070550620904, 0.04552429262527513, 0.003146714632559111, 0.08471960752272867, 0.0222783299266317, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05100410831322666, 0.011538761546511345, 0.02252302265142503, 0.06630421688987043, 0.049083359214261546, 0.020141025691745362, 0.009907963200590841, 0.03583608680340444, 0.02771055067172734, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002578526352997601, 0.011032091777774311, 0.01336498971514899, 0.01708359660364056, 0.03665387765102002, 9.999999999998899e-05, 0.024475642786605523, 0.03210573461359523, 0.018847712328288413, 0.26330638845428134, 0.2618731844961917, 0.3023221214235182, 0.20398648060993674, 0.20172300148273614, 0.20282192984947445, 0.2958566255308913, 0.20992003771394352, 0.23859911772152442, 0.07411683454833018, 0.05425451576049978, 0.07951961289216758, 0.06525605431158565, 0.06417407542911246, 0.05399457254390361, 0.06117886233648584, 0.054555965817384866, 0.05974928664925805, 0.1394573287798052, 0.1327484967911594, 0.12205895382717413, 0.18457144661878344, 0.13833177742019265, 0.13073333297734457, 0.14575037717881623, 0.13832940538969396, 0.130639114042725, 0.18077882357087638, 0.18051692478838322, 0.18935818858721754, 0.17512210700839237, 0.1994497066030565, 0.16996156895888348, 0.20411917083030562, 0.20003826464957242, 0.19723147320819312, 0.13519232548899962, 0.12628596024183192, 0.15355331202673406, 0.1138461016205149, 0.15186591589499676, 0.1374884829117391, 0.14216462657907591, 0.15388490911802277, 0.16644077921866685, 0.15638378147887466, 0.17382728587427687, 0.16477286829428506, 0.18323294373500654, 0.15537204268947336, 0.15869702615534043, 0.18871609930258315, 0.17404464558750365, 0.16211446263857432, 0.15654363172342878, 0.16680590145277785, 0.1567158023543156, 0.1567100557803608, 0.15301278934461293, 0.15853855048831034, 0.1559227819745298, 0.1597965204873657, 0.14980283208055512, 0.14864541868817127, 0.16337412293018572, 0.12292236534987588, 0.3084430699191084, 0.1818330961836877, 0.16808907376987192, 0.12742923573702392, 0.22780489696294148, 0.22456939262651132, 0.26878398495503675, 0.17451378862523237, 0.15736303249423256, 0.16759220389700202, 0.1916210541230846, 0.11770585569235659, 0.18397797271901672, 0.14174623602126335, 0.17868326145408286, 0.1831696516879079, 0.1933451033201673, 0.19269451668519189, 0.1753616773490807, 0.17097332286992883, 0.1843841376463614, 0.17892732231460828, 0.17880842489826498, 0.18257257895182744, 0.06065795565017229, 0.05669177748394083, 0.0610559978686015, 0.0593572199986645, 0.06046944050334746, 0.05007633300129133, 0.07780563860071565, 0.05878922357133687, 0.05610430850905468]}, "mutation_prompt": null}
{"id": "7d7f6feb-ed00-46c6-8d98-4da4f056e925", "solution": "import numpy as np\n\nclass AHPE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.7\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _evaluate_population(self, population, func):\n        return np.array([func(ind) for ind in population])\n\n    def _update_velocity(self, velocities, population, personal_best, global_best):\n        r1, r2 = np.random.rand(2, self.population_size, self.dim)\n        cognitive = self.c1 * r1 * (personal_best - population)\n        social = self.c2 * r2 * (global_best - population)\n        return velocities + cognitive + social\n\n    def _apply_bounds(self, population):\n        return np.clip(population, self.lower_bound, self.upper_bound)\n\n    def _differential_mutation(self, population, best_idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = population[indices]\n        mutant = a + self.mutation_factor * (b - c)\n        target = population[best_idx]\n        trial = np.where(np.random.rand(self.dim) < self.crossover_prob, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_value = self._evaluate_population(population, func)\n        \n        global_best_idx = np.argmin(personal_best_value)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_value[global_best_idx]\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            velocities = self._update_velocity(velocities, population, personal_best, global_best)\n            population = self._apply_bounds(population + velocities)\n\n            new_population_value = self._evaluate_population(population, func)\n            evaluations += self.population_size\n\n            for i in range(self.population_size):\n                if new_population_value[i] < personal_best_value[i]:\n                    personal_best[i] = population[i]\n                    personal_best_value[i] = new_population_value[i]\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n            # Differential Evolution step\n            for i in range(self.population_size):\n                trial = self._differential_mutation(population, i)\n                trial_value = func(trial)\n                evaluations += 1\n\n                if trial_value < personal_best_value[i]:\n                    population[i] = trial\n                    personal_best[i] = trial\n                    personal_best_value[i] = trial_value\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n                if evaluations >= self.budget:\n                    break\n        \n        return global_best", "name": "AHPE", "description": "Adaptive Hybrid Particle Evolution (AHPE) fuses concepts from Particle Swarm Optimization and Differential Evolution to dynamically adjust exploration and exploitation based on swarm diversity and population success.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "848b60b8-1e79-4fe2-8d47-c2b718158fc4", "metadata": {"aucs": [0.22211226226751046, 0.21986840014755016, 0.2963100959824455, 0.2643802287385909, 0.2696857303165686, 0.2730152487837104, 0.3283806325612689, 0.24810010481238465, 0.2417145847153197, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04800329129064462, 0.080363637242307, 0.05771329228247468, 0.06716040854003391, 0.04892114444775275, 0.071075081050605, 0.07068352602580275, 0.06465177209367134, 0.051119951543396436, 0.061189768551837886, 0.03776915709506179, 0.04048196341346322, 0.05941349219712444, 0.0520880020295883, 0.040756521351995034, 0.04555545843239417, 0.048380973212945766, 0.05466886501820212, 0.9836783223171812, 0.9680578262172431, 0.9794425170957711, 0.9698147990450061, 0.9767365784554304, 0.976925887572157, 0.9788280858948085, 0.9746936230539132, 0.9765260663991234, 0.12399512039805582, 0.11712582052290688, 0.05581303458868514, 0.14033998581991491, 0.0989188315359103, 0.149190773161755, 0.11191104257156126, 0.08652359070491489, 0.11762546683962427, 0.16609109912356235, 0.14248355543707947, 0.15871133971756557, 0.17781429871170262, 0.14136548530518267, 0.17402764358365963, 0.11074863593802964, 0.14890311350672436, 0.1811603298531017, 0.028589293817662065, 0.01525551788407431, 0.04203094636269511, 0.03174995527147617, 0.031083142637881256, 0.00746431091476929, 0.05013717122664163, 0.057323613369962945, 0.0672703284599504, 0.05373550284380546, 0.029890973528340692, 0.0007857070550620904, 0.04552429262527513, 0.003146714632559111, 0.08471960752272867, 0.0222783299266317, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05100410831322666, 0.011538761546511345, 0.02252302265142503, 0.06630421688987043, 0.049083359214261546, 0.020141025691745362, 0.009907963200590841, 0.03583608680340444, 0.02771055067172734, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002578526352997601, 0.011032091777774311, 0.01336498971514899, 0.01708359660364056, 0.03665387765102002, 9.999999999998899e-05, 0.024475642786605523, 0.03210573461359523, 0.018847712328288413, 0.26330638845428134, 0.2618731844961917, 0.3023221214235182, 0.20398648060993674, 0.20172300148273614, 0.20282192984947445, 0.2958566255308913, 0.20992003771394352, 0.23859911772152442, 0.07411683454833018, 0.05425451576049978, 0.07951961289216758, 0.06525605431158565, 0.06417407542911246, 0.05399457254390361, 0.06117886233648584, 0.054555965817384866, 0.05974928664925805, 0.1394573287798052, 0.1327484967911594, 0.12205895382717413, 0.18457144661878344, 0.13833177742019265, 0.13073333297734457, 0.14575037717881623, 0.13832940538969396, 0.130639114042725, 0.18077882357087638, 0.18051692478838322, 0.18935818858721754, 0.17512210700839237, 0.1994497066030565, 0.16996156895888348, 0.20411917083030562, 0.20003826464957242, 0.19723147320819312, 0.13519232548899962, 0.12628596024183192, 0.15355331202673406, 0.1138461016205149, 0.15186591589499676, 0.1374884829117391, 0.14216462657907591, 0.15388490911802277, 0.16644077921866685, 0.15638378147887466, 0.17382728587427687, 0.16477286829428506, 0.18323294373500654, 0.15537204268947336, 0.15869702615534043, 0.18871609930258315, 0.17404464558750365, 0.16211446263857432, 0.15654363172342878, 0.16680590145277785, 0.1567158023543156, 0.1567100557803608, 0.15301278934461293, 0.15853855048831034, 0.1559227819745298, 0.1597965204873657, 0.14980283208055512, 0.14864541868817127, 0.16337412293018572, 0.12292236534987588, 0.3084430699191084, 0.1818330961836877, 0.16808907376987192, 0.12742923573702392, 0.22780489696294148, 0.22456939262651132, 0.26878398495503675, 0.17451378862523237, 0.15736303249423256, 0.16759220389700202, 0.1916210541230846, 0.11770585569235659, 0.18397797271901672, 0.14174623602126335, 0.17868326145408286, 0.1831696516879079, 0.1933451033201673, 0.19269451668519189, 0.1753616773490807, 0.17097332286992883, 0.1843841376463614, 0.17892732231460828, 0.17880842489826498, 0.18257257895182744, 0.06065795565017229, 0.05669177748394083, 0.0610559978686015, 0.0593572199986645, 0.06046944050334746, 0.05007633300129133, 0.07780563860071565, 0.05878922357133687, 0.05610430850905468]}, "mutation_prompt": null}
{"id": "7944d082-3782-4542-ade0-160606d0c0a4", "solution": "import numpy as np\n\nclass AHPE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.7\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _evaluate_population(self, population, func):\n        return np.array([func(ind) for ind in population])\n\n    def _update_velocity(self, velocities, population, personal_best, global_best):\n        r1, r2 = np.random.rand(2, self.population_size, self.dim)\n        cognitive = self.c1 * r1 * (personal_best - population)\n        social = self.c2 * r2 * (global_best - population)\n        return velocities + cognitive + social\n\n    def _apply_bounds(self, population):\n        return np.clip(population, self.lower_bound, self.upper_bound)\n\n    def _differential_mutation(self, population, best_idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = population[indices]\n        mutant = a + self.mutation_factor * (b - c)\n        target = population[best_idx]\n        trial = np.where(np.random.rand(self.dim) < self.crossover_prob, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_value = self._evaluate_population(population, func)\n        \n        global_best_idx = np.argmin(personal_best_value)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_value[global_best_idx]\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            velocities = self._update_velocity(velocities, population, personal_best, global_best)\n            population = self._apply_bounds(population + velocities)\n\n            new_population_value = self._evaluate_population(population, func)\n            evaluations += self.population_size\n\n            for i in range(self.population_size):\n                if new_population_value[i] < personal_best_value[i]:\n                    personal_best[i] = population[i]\n                    personal_best_value[i] = new_population_value[i]\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n            # Differential Evolution step\n            for i in range(self.population_size):\n                trial = self._differential_mutation(population, i)\n                trial_value = func(trial)\n                evaluations += 1\n\n                if trial_value < personal_best_value[i]:\n                    population[i] = trial\n                    personal_best[i] = trial\n                    personal_best_value[i] = trial_value\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n                if evaluations >= self.budget:\n                    break\n        \n        return global_best", "name": "AHPE", "description": "Adaptive Hybrid Particle Evolution (AHPE) fuses concepts from Particle Swarm Optimization and Differential Evolution to dynamically adjust exploration and exploitation based on swarm diversity and population success.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "848b60b8-1e79-4fe2-8d47-c2b718158fc4", "metadata": {"aucs": [0.22211226226751046, 0.21986840014755016, 0.2963100959824455, 0.2643802287385909, 0.2696857303165686, 0.2730152487837104, 0.3283806325612689, 0.24810010481238465, 0.2417145847153197, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04800329129064462, 0.080363637242307, 0.05771329228247468, 0.06716040854003391, 0.04892114444775275, 0.071075081050605, 0.07068352602580275, 0.06465177209367134, 0.051119951543396436, 0.061189768551837886, 0.03776915709506179, 0.04048196341346322, 0.05941349219712444, 0.0520880020295883, 0.040756521351995034, 0.04555545843239417, 0.048380973212945766, 0.05466886501820212, 0.9836783223171812, 0.9680578262172431, 0.9794425170957711, 0.9698147990450061, 0.9767365784554304, 0.976925887572157, 0.9788280858948085, 0.9746936230539132, 0.9765260663991234, 0.12399512039805582, 0.11712582052290688, 0.05581303458868514, 0.14033998581991491, 0.0989188315359103, 0.149190773161755, 0.11191104257156126, 0.08652359070491489, 0.11762546683962427, 0.16609109912356235, 0.14248355543707947, 0.15871133971756557, 0.17781429871170262, 0.14136548530518267, 0.17402764358365963, 0.11074863593802964, 0.14890311350672436, 0.1811603298531017, 0.028589293817662065, 0.01525551788407431, 0.04203094636269511, 0.03174995527147617, 0.031083142637881256, 0.00746431091476929, 0.05013717122664163, 0.057323613369962945, 0.0672703284599504, 0.05373550284380546, 0.029890973528340692, 0.0007857070550620904, 0.04552429262527513, 0.003146714632559111, 0.08471960752272867, 0.0222783299266317, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05100410831322666, 0.011538761546511345, 0.02252302265142503, 0.06630421688987043, 0.049083359214261546, 0.020141025691745362, 0.009907963200590841, 0.03583608680340444, 0.02771055067172734, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002578526352997601, 0.011032091777774311, 0.01336498971514899, 0.01708359660364056, 0.03665387765102002, 9.999999999998899e-05, 0.024475642786605523, 0.03210573461359523, 0.018847712328288413, 0.26330638845428134, 0.2618731844961917, 0.3023221214235182, 0.20398648060993674, 0.20172300148273614, 0.20282192984947445, 0.2958566255308913, 0.20992003771394352, 0.23859911772152442, 0.07411683454833018, 0.05425451576049978, 0.07951961289216758, 0.06525605431158565, 0.06417407542911246, 0.05399457254390361, 0.06117886233648584, 0.054555965817384866, 0.05974928664925805, 0.1394573287798052, 0.1327484967911594, 0.12205895382717413, 0.18457144661878344, 0.13833177742019265, 0.13073333297734457, 0.14575037717881623, 0.13832940538969396, 0.130639114042725, 0.18077882357087638, 0.18051692478838322, 0.18935818858721754, 0.17512210700839237, 0.1994497066030565, 0.16996156895888348, 0.20411917083030562, 0.20003826464957242, 0.19723147320819312, 0.13519232548899962, 0.12628596024183192, 0.15355331202673406, 0.1138461016205149, 0.15186591589499676, 0.1374884829117391, 0.14216462657907591, 0.15388490911802277, 0.16644077921866685, 0.15638378147887466, 0.17382728587427687, 0.16477286829428506, 0.18323294373500654, 0.15537204268947336, 0.15869702615534043, 0.18871609930258315, 0.17404464558750365, 0.16211446263857432, 0.15654363172342878, 0.16680590145277785, 0.1567158023543156, 0.1567100557803608, 0.15301278934461293, 0.15853855048831034, 0.1559227819745298, 0.1597965204873657, 0.14980283208055512, 0.14864541868817127, 0.16337412293018572, 0.12292236534987588, 0.3084430699191084, 0.1818330961836877, 0.16808907376987192, 0.12742923573702392, 0.22780489696294148, 0.22456939262651132, 0.26878398495503675, 0.17451378862523237, 0.15736303249423256, 0.16759220389700202, 0.1916210541230846, 0.11770585569235659, 0.18397797271901672, 0.14174623602126335, 0.17868326145408286, 0.1831696516879079, 0.1933451033201673, 0.19269451668519189, 0.1753616773490807, 0.17097332286992883, 0.1843841376463614, 0.17892732231460828, 0.17880842489826498, 0.18257257895182744, 0.06065795565017229, 0.05669177748394083, 0.0610559978686015, 0.0593572199986645, 0.06046944050334746, 0.05007633300129133, 0.07780563860071565, 0.05878922357133687, 0.05610430850905468]}, "mutation_prompt": null}
{"id": "496e5bda-50e7-4cd2-883a-0457ed9c9d02", "solution": "import numpy as np\n\nclass AHPE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.7\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _evaluate_population(self, population, func):\n        return np.array([func(ind) for ind in population])\n\n    def _update_velocity(self, velocities, population, personal_best, global_best):\n        r1, r2 = np.random.rand(2, self.population_size, self.dim)\n        cognitive = self.c1 * r1 * (personal_best - population)\n        social = self.c2 * r2 * (global_best - population)\n        return velocities + cognitive + social\n\n    def _apply_bounds(self, population):\n        return np.clip(population, self.lower_bound, self.upper_bound)\n\n    def _differential_mutation(self, population, best_idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = population[indices]\n        mutant = a + self.mutation_factor * (b - c)\n        target = population[best_idx]\n        trial = np.where(np.random.rand(self.dim) < self.crossover_prob, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_value = self._evaluate_population(population, func)\n        \n        global_best_idx = np.argmin(personal_best_value)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_value[global_best_idx]\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            velocities = self._update_velocity(velocities, population, personal_best, global_best)\n            population = self._apply_bounds(population + velocities)\n\n            new_population_value = self._evaluate_population(population, func)\n            evaluations += self.population_size\n\n            for i in range(self.population_size):\n                if new_population_value[i] < personal_best_value[i]:\n                    personal_best[i] = population[i]\n                    personal_best_value[i] = new_population_value[i]\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n            # Differential Evolution step\n            for i in range(self.population_size):\n                trial = self._differential_mutation(population, i)\n                trial_value = func(trial)\n                evaluations += 1\n\n                if trial_value < personal_best_value[i]:\n                    population[i] = trial\n                    personal_best[i] = trial\n                    personal_best_value[i] = trial_value\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n                if evaluations >= self.budget:\n                    break\n        \n        return global_best", "name": "AHPE", "description": "Adaptive Hybrid Particle Evolution (AHPE) fuses concepts from Particle Swarm Optimization and Differential Evolution to dynamically adjust exploration and exploitation based on swarm diversity and population success.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "848b60b8-1e79-4fe2-8d47-c2b718158fc4", "metadata": {"aucs": [0.22211226226751046, 0.21986840014755016, 0.2963100959824455, 0.2643802287385909, 0.2696857303165686, 0.2730152487837104, 0.3283806325612689, 0.24810010481238465, 0.2417145847153197, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04800329129064462, 0.080363637242307, 0.05771329228247468, 0.06716040854003391, 0.04892114444775275, 0.071075081050605, 0.07068352602580275, 0.06465177209367134, 0.051119951543396436, 0.061189768551837886, 0.03776915709506179, 0.04048196341346322, 0.05941349219712444, 0.0520880020295883, 0.040756521351995034, 0.04555545843239417, 0.048380973212945766, 0.05466886501820212, 0.9836783223171812, 0.9680578262172431, 0.9794425170957711, 0.9698147990450061, 0.9767365784554304, 0.976925887572157, 0.9788280858948085, 0.9746936230539132, 0.9765260663991234, 0.12399512039805582, 0.11712582052290688, 0.05581303458868514, 0.14033998581991491, 0.0989188315359103, 0.149190773161755, 0.11191104257156126, 0.08652359070491489, 0.11762546683962427, 0.16609109912356235, 0.14248355543707947, 0.15871133971756557, 0.17781429871170262, 0.14136548530518267, 0.17402764358365963, 0.11074863593802964, 0.14890311350672436, 0.1811603298531017, 0.028589293817662065, 0.01525551788407431, 0.04203094636269511, 0.03174995527147617, 0.031083142637881256, 0.00746431091476929, 0.05013717122664163, 0.057323613369962945, 0.0672703284599504, 0.05373550284380546, 0.029890973528340692, 0.0007857070550620904, 0.04552429262527513, 0.003146714632559111, 0.08471960752272867, 0.0222783299266317, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05100410831322666, 0.011538761546511345, 0.02252302265142503, 0.06630421688987043, 0.049083359214261546, 0.020141025691745362, 0.009907963200590841, 0.03583608680340444, 0.02771055067172734, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002578526352997601, 0.011032091777774311, 0.01336498971514899, 0.01708359660364056, 0.03665387765102002, 9.999999999998899e-05, 0.024475642786605523, 0.03210573461359523, 0.018847712328288413, 0.26330638845428134, 0.2618731844961917, 0.3023221214235182, 0.20398648060993674, 0.20172300148273614, 0.20282192984947445, 0.2958566255308913, 0.20992003771394352, 0.23859911772152442, 0.07411683454833018, 0.05425451576049978, 0.07951961289216758, 0.06525605431158565, 0.06417407542911246, 0.05399457254390361, 0.06117886233648584, 0.054555965817384866, 0.05974928664925805, 0.1394573287798052, 0.1327484967911594, 0.12205895382717413, 0.18457144661878344, 0.13833177742019265, 0.13073333297734457, 0.14575037717881623, 0.13832940538969396, 0.130639114042725, 0.18077882357087638, 0.18051692478838322, 0.18935818858721754, 0.17512210700839237, 0.1994497066030565, 0.16996156895888348, 0.20411917083030562, 0.20003826464957242, 0.19723147320819312, 0.13519232548899962, 0.12628596024183192, 0.15355331202673406, 0.1138461016205149, 0.15186591589499676, 0.1374884829117391, 0.14216462657907591, 0.15388490911802277, 0.16644077921866685, 0.15638378147887466, 0.17382728587427687, 0.16477286829428506, 0.18323294373500654, 0.15537204268947336, 0.15869702615534043, 0.18871609930258315, 0.17404464558750365, 0.16211446263857432, 0.15654363172342878, 0.16680590145277785, 0.1567158023543156, 0.1567100557803608, 0.15301278934461293, 0.15853855048831034, 0.1559227819745298, 0.1597965204873657, 0.14980283208055512, 0.14864541868817127, 0.16337412293018572, 0.12292236534987588, 0.3084430699191084, 0.1818330961836877, 0.16808907376987192, 0.12742923573702392, 0.22780489696294148, 0.22456939262651132, 0.26878398495503675, 0.17451378862523237, 0.15736303249423256, 0.16759220389700202, 0.1916210541230846, 0.11770585569235659, 0.18397797271901672, 0.14174623602126335, 0.17868326145408286, 0.1831696516879079, 0.1933451033201673, 0.19269451668519189, 0.1753616773490807, 0.17097332286992883, 0.1843841376463614, 0.17892732231460828, 0.17880842489826498, 0.18257257895182744, 0.06065795565017229, 0.05669177748394083, 0.0610559978686015, 0.0593572199986645, 0.06046944050334746, 0.05007633300129133, 0.07780563860071565, 0.05878922357133687, 0.05610430850905468]}, "mutation_prompt": null}
{"id": "c4e20c85-54ac-4d4f-8611-ccb8aff986a3", "solution": "import numpy as np\n\nclass AHPE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.7\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _evaluate_population(self, population, func):\n        return np.array([func(ind) for ind in population])\n\n    def _update_velocity(self, velocities, population, personal_best, global_best):\n        r1, r2 = np.random.rand(2, self.population_size, self.dim)\n        cognitive = self.c1 * r1 * (personal_best - population)\n        social = self.c2 * r2 * (global_best - population)\n        return velocities + cognitive + social\n\n    def _apply_bounds(self, population):\n        return np.clip(population, self.lower_bound, self.upper_bound)\n\n    def _differential_mutation(self, population, best_idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = population[indices]\n        mutant = a + self.mutation_factor * (b - c)\n        target = population[best_idx]\n        trial = np.where(np.random.rand(self.dim) < self.crossover_prob, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_value = self._evaluate_population(population, func)\n        \n        global_best_idx = np.argmin(personal_best_value)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_value[global_best_idx]\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            velocities = self._update_velocity(velocities, population, personal_best, global_best)\n            population = self._apply_bounds(population + velocities)\n\n            new_population_value = self._evaluate_population(population, func)\n            evaluations += self.population_size\n\n            for i in range(self.population_size):\n                if new_population_value[i] < personal_best_value[i]:\n                    personal_best[i] = population[i]\n                    personal_best_value[i] = new_population_value[i]\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n            # Differential Evolution step\n            for i in range(self.population_size):\n                trial = self._differential_mutation(population, i)\n                trial_value = func(trial)\n                evaluations += 1\n\n                if trial_value < personal_best_value[i]:\n                    population[i] = trial\n                    personal_best[i] = trial\n                    personal_best_value[i] = trial_value\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n                if evaluations >= self.budget:\n                    break\n        \n        return global_best", "name": "AHPE", "description": "Adaptive Hybrid Particle Evolution (AHPE) fuses concepts from Particle Swarm Optimization and Differential Evolution to dynamically adjust exploration and exploitation based on swarm diversity and population success.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "848b60b8-1e79-4fe2-8d47-c2b718158fc4", "metadata": {"aucs": [0.22211226226751046, 0.21986840014755016, 0.2963100959824455, 0.2643802287385909, 0.2696857303165686, 0.2730152487837104, 0.3283806325612689, 0.24810010481238465, 0.2417145847153197, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04800329129064462, 0.080363637242307, 0.05771329228247468, 0.06716040854003391, 0.04892114444775275, 0.071075081050605, 0.07068352602580275, 0.06465177209367134, 0.051119951543396436, 0.061189768551837886, 0.03776915709506179, 0.04048196341346322, 0.05941349219712444, 0.0520880020295883, 0.040756521351995034, 0.04555545843239417, 0.048380973212945766, 0.05466886501820212, 0.9836783223171812, 0.9680578262172431, 0.9794425170957711, 0.9698147990450061, 0.9767365784554304, 0.976925887572157, 0.9788280858948085, 0.9746936230539132, 0.9765260663991234, 0.12399512039805582, 0.11712582052290688, 0.05581303458868514, 0.14033998581991491, 0.0989188315359103, 0.149190773161755, 0.11191104257156126, 0.08652359070491489, 0.11762546683962427, 0.16609109912356235, 0.14248355543707947, 0.15871133971756557, 0.17781429871170262, 0.14136548530518267, 0.17402764358365963, 0.11074863593802964, 0.14890311350672436, 0.1811603298531017, 0.028589293817662065, 0.01525551788407431, 0.04203094636269511, 0.03174995527147617, 0.031083142637881256, 0.00746431091476929, 0.05013717122664163, 0.057323613369962945, 0.0672703284599504, 0.05373550284380546, 0.029890973528340692, 0.0007857070550620904, 0.04552429262527513, 0.003146714632559111, 0.08471960752272867, 0.0222783299266317, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05100410831322666, 0.011538761546511345, 0.02252302265142503, 0.06630421688987043, 0.049083359214261546, 0.020141025691745362, 0.009907963200590841, 0.03583608680340444, 0.02771055067172734, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002578526352997601, 0.011032091777774311, 0.01336498971514899, 0.01708359660364056, 0.03665387765102002, 9.999999999998899e-05, 0.024475642786605523, 0.03210573461359523, 0.018847712328288413, 0.26330638845428134, 0.2618731844961917, 0.3023221214235182, 0.20398648060993674, 0.20172300148273614, 0.20282192984947445, 0.2958566255308913, 0.20992003771394352, 0.23859911772152442, 0.07411683454833018, 0.05425451576049978, 0.07951961289216758, 0.06525605431158565, 0.06417407542911246, 0.05399457254390361, 0.06117886233648584, 0.054555965817384866, 0.05974928664925805, 0.1394573287798052, 0.1327484967911594, 0.12205895382717413, 0.18457144661878344, 0.13833177742019265, 0.13073333297734457, 0.14575037717881623, 0.13832940538969396, 0.130639114042725, 0.18077882357087638, 0.18051692478838322, 0.18935818858721754, 0.17512210700839237, 0.1994497066030565, 0.16996156895888348, 0.20411917083030562, 0.20003826464957242, 0.19723147320819312, 0.13519232548899962, 0.12628596024183192, 0.15355331202673406, 0.1138461016205149, 0.15186591589499676, 0.1374884829117391, 0.14216462657907591, 0.15388490911802277, 0.16644077921866685, 0.15638378147887466, 0.17382728587427687, 0.16477286829428506, 0.18323294373500654, 0.15537204268947336, 0.15869702615534043, 0.18871609930258315, 0.17404464558750365, 0.16211446263857432, 0.15654363172342878, 0.16680590145277785, 0.1567158023543156, 0.1567100557803608, 0.15301278934461293, 0.15853855048831034, 0.1559227819745298, 0.1597965204873657, 0.14980283208055512, 0.14864541868817127, 0.16337412293018572, 0.12292236534987588, 0.3084430699191084, 0.1818330961836877, 0.16808907376987192, 0.12742923573702392, 0.22780489696294148, 0.22456939262651132, 0.26878398495503675, 0.17451378862523237, 0.15736303249423256, 0.16759220389700202, 0.1916210541230846, 0.11770585569235659, 0.18397797271901672, 0.14174623602126335, 0.17868326145408286, 0.1831696516879079, 0.1933451033201673, 0.19269451668519189, 0.1753616773490807, 0.17097332286992883, 0.1843841376463614, 0.17892732231460828, 0.17880842489826498, 0.18257257895182744, 0.06065795565017229, 0.05669177748394083, 0.0610559978686015, 0.0593572199986645, 0.06046944050334746, 0.05007633300129133, 0.07780563860071565, 0.05878922357133687, 0.05610430850905468]}, "mutation_prompt": null}
{"id": "343f5510-8c4f-4e18-a912-25f325082d26", "solution": "import numpy as np\n\nclass AHPE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.7\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _evaluate_population(self, population, func):\n        return np.array([func(ind) for ind in population])\n\n    def _update_velocity(self, velocities, population, personal_best, global_best):\n        r1, r2 = np.random.rand(2, self.population_size, self.dim)\n        cognitive = self.c1 * r1 * (personal_best - population)\n        social = self.c2 * r2 * (global_best - population)\n        return velocities + cognitive + social\n\n    def _apply_bounds(self, population):\n        return np.clip(population, self.lower_bound, self.upper_bound)\n\n    def _differential_mutation(self, population, best_idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = population[indices]\n        mutant = a + self.mutation_factor * (b - c)\n        target = population[best_idx]\n        trial = np.where(np.random.rand(self.dim) < self.crossover_prob, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_value = self._evaluate_population(population, func)\n        \n        global_best_idx = np.argmin(personal_best_value)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_value[global_best_idx]\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            velocities = self._update_velocity(velocities, population, personal_best, global_best)\n            population = self._apply_bounds(population + velocities)\n\n            new_population_value = self._evaluate_population(population, func)\n            evaluations += self.population_size\n\n            for i in range(self.population_size):\n                if new_population_value[i] < personal_best_value[i]:\n                    personal_best[i] = population[i]\n                    personal_best_value[i] = new_population_value[i]\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n            # Differential Evolution step\n            for i in range(self.population_size):\n                trial = self._differential_mutation(population, i)\n                trial_value = func(trial)\n                evaluations += 1\n\n                if trial_value < personal_best_value[i]:\n                    population[i] = trial\n                    personal_best[i] = trial\n                    personal_best_value[i] = trial_value\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n                if evaluations >= self.budget:\n                    break\n        \n        return global_best", "name": "AHPE", "description": "Adaptive Hybrid Particle Evolution (AHPE) fuses concepts from Particle Swarm Optimization and Differential Evolution to dynamically adjust exploration and exploitation based on swarm diversity and population success.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "848b60b8-1e79-4fe2-8d47-c2b718158fc4", "metadata": {"aucs": [0.22211226226751046, 0.21986840014755016, 0.2963100959824455, 0.2643802287385909, 0.2696857303165686, 0.2730152487837104, 0.3283806325612689, 0.24810010481238465, 0.2417145847153197, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04800329129064462, 0.080363637242307, 0.05771329228247468, 0.06716040854003391, 0.04892114444775275, 0.071075081050605, 0.07068352602580275, 0.06465177209367134, 0.051119951543396436, 0.061189768551837886, 0.03776915709506179, 0.04048196341346322, 0.05941349219712444, 0.0520880020295883, 0.040756521351995034, 0.04555545843239417, 0.048380973212945766, 0.05466886501820212, 0.9836783223171812, 0.9680578262172431, 0.9794425170957711, 0.9698147990450061, 0.9767365784554304, 0.976925887572157, 0.9788280858948085, 0.9746936230539132, 0.9765260663991234, 0.12399512039805582, 0.11712582052290688, 0.05581303458868514, 0.14033998581991491, 0.0989188315359103, 0.149190773161755, 0.11191104257156126, 0.08652359070491489, 0.11762546683962427, 0.16609109912356235, 0.14248355543707947, 0.15871133971756557, 0.17781429871170262, 0.14136548530518267, 0.17402764358365963, 0.11074863593802964, 0.14890311350672436, 0.1811603298531017, 0.028589293817662065, 0.01525551788407431, 0.04203094636269511, 0.03174995527147617, 0.031083142637881256, 0.00746431091476929, 0.05013717122664163, 0.057323613369962945, 0.0672703284599504, 0.05373550284380546, 0.029890973528340692, 0.0007857070550620904, 0.04552429262527513, 0.003146714632559111, 0.08471960752272867, 0.0222783299266317, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05100410831322666, 0.011538761546511345, 0.02252302265142503, 0.06630421688987043, 0.049083359214261546, 0.020141025691745362, 0.009907963200590841, 0.03583608680340444, 0.02771055067172734, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002578526352997601, 0.011032091777774311, 0.01336498971514899, 0.01708359660364056, 0.03665387765102002, 9.999999999998899e-05, 0.024475642786605523, 0.03210573461359523, 0.018847712328288413, 0.26330638845428134, 0.2618731844961917, 0.3023221214235182, 0.20398648060993674, 0.20172300148273614, 0.20282192984947445, 0.2958566255308913, 0.20992003771394352, 0.23859911772152442, 0.07411683454833018, 0.05425451576049978, 0.07951961289216758, 0.06525605431158565, 0.06417407542911246, 0.05399457254390361, 0.06117886233648584, 0.054555965817384866, 0.05974928664925805, 0.1394573287798052, 0.1327484967911594, 0.12205895382717413, 0.18457144661878344, 0.13833177742019265, 0.13073333297734457, 0.14575037717881623, 0.13832940538969396, 0.130639114042725, 0.18077882357087638, 0.18051692478838322, 0.18935818858721754, 0.17512210700839237, 0.1994497066030565, 0.16996156895888348, 0.20411917083030562, 0.20003826464957242, 0.19723147320819312, 0.13519232548899962, 0.12628596024183192, 0.15355331202673406, 0.1138461016205149, 0.15186591589499676, 0.1374884829117391, 0.14216462657907591, 0.15388490911802277, 0.16644077921866685, 0.15638378147887466, 0.17382728587427687, 0.16477286829428506, 0.18323294373500654, 0.15537204268947336, 0.15869702615534043, 0.18871609930258315, 0.17404464558750365, 0.16211446263857432, 0.15654363172342878, 0.16680590145277785, 0.1567158023543156, 0.1567100557803608, 0.15301278934461293, 0.15853855048831034, 0.1559227819745298, 0.1597965204873657, 0.14980283208055512, 0.14864541868817127, 0.16337412293018572, 0.12292236534987588, 0.3084430699191084, 0.1818330961836877, 0.16808907376987192, 0.12742923573702392, 0.22780489696294148, 0.22456939262651132, 0.26878398495503675, 0.17451378862523237, 0.15736303249423256, 0.16759220389700202, 0.1916210541230846, 0.11770585569235659, 0.18397797271901672, 0.14174623602126335, 0.17868326145408286, 0.1831696516879079, 0.1933451033201673, 0.19269451668519189, 0.1753616773490807, 0.17097332286992883, 0.1843841376463614, 0.17892732231460828, 0.17880842489826498, 0.18257257895182744, 0.06065795565017229, 0.05669177748394083, 0.0610559978686015, 0.0593572199986645, 0.06046944050334746, 0.05007633300129133, 0.07780563860071565, 0.05878922357133687, 0.05610430850905468]}, "mutation_prompt": null}
{"id": "36aeef0a-dadd-4a42-a01f-db5206a549d6", "solution": "import numpy as np\n\nclass AHPE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.7\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _evaluate_population(self, population, func):\n        return np.array([func(ind) for ind in population])\n\n    def _update_velocity(self, velocities, population, personal_best, global_best):\n        r1, r2 = np.random.rand(2, self.population_size, self.dim)\n        cognitive = self.c1 * r1 * (personal_best - population)\n        social = self.c2 * r2 * (global_best - population)\n        return velocities + cognitive + social\n\n    def _apply_bounds(self, population):\n        return np.clip(population, self.lower_bound, self.upper_bound)\n\n    def _differential_mutation(self, population, best_idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = population[indices]\n        mutant = a + self.mutation_factor * (b - c)\n        target = population[best_idx]\n        trial = np.where(np.random.rand(self.dim) < self.crossover_prob, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_value = self._evaluate_population(population, func)\n        \n        global_best_idx = np.argmin(personal_best_value)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_value[global_best_idx]\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            velocities = self._update_velocity(velocities, population, personal_best, global_best)\n            population = self._apply_bounds(population + velocities)\n\n            new_population_value = self._evaluate_population(population, func)\n            evaluations += self.population_size\n\n            for i in range(self.population_size):\n                if new_population_value[i] < personal_best_value[i]:\n                    personal_best[i] = population[i]\n                    personal_best_value[i] = new_population_value[i]\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n            # Differential Evolution step\n            for i in range(self.population_size):\n                trial = self._differential_mutation(population, i)\n                trial_value = func(trial)\n                evaluations += 1\n\n                if trial_value < personal_best_value[i]:\n                    population[i] = trial\n                    personal_best[i] = trial\n                    personal_best_value[i] = trial_value\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n                if evaluations >= self.budget:\n                    break\n        \n        return global_best", "name": "AHPE", "description": "Adaptive Hybrid Particle Evolution (AHPE) fuses concepts from Particle Swarm Optimization and Differential Evolution to dynamically adjust exploration and exploitation based on swarm diversity and population success.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "848b60b8-1e79-4fe2-8d47-c2b718158fc4", "metadata": {"aucs": [0.22211226226751046, 0.21986840014755016, 0.2963100959824455, 0.2643802287385909, 0.2696857303165686, 0.2730152487837104, 0.3283806325612689, 0.24810010481238465, 0.2417145847153197, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04800329129064462, 0.080363637242307, 0.05771329228247468, 0.06716040854003391, 0.04892114444775275, 0.071075081050605, 0.07068352602580275, 0.06465177209367134, 0.051119951543396436, 0.061189768551837886, 0.03776915709506179, 0.04048196341346322, 0.05941349219712444, 0.0520880020295883, 0.040756521351995034, 0.04555545843239417, 0.048380973212945766, 0.05466886501820212, 0.9836783223171812, 0.9680578262172431, 0.9794425170957711, 0.9698147990450061, 0.9767365784554304, 0.976925887572157, 0.9788280858948085, 0.9746936230539132, 0.9765260663991234, 0.12399512039805582, 0.11712582052290688, 0.05581303458868514, 0.14033998581991491, 0.0989188315359103, 0.149190773161755, 0.11191104257156126, 0.08652359070491489, 0.11762546683962427, 0.16609109912356235, 0.14248355543707947, 0.15871133971756557, 0.17781429871170262, 0.14136548530518267, 0.17402764358365963, 0.11074863593802964, 0.14890311350672436, 0.1811603298531017, 0.028589293817662065, 0.01525551788407431, 0.04203094636269511, 0.03174995527147617, 0.031083142637881256, 0.00746431091476929, 0.05013717122664163, 0.057323613369962945, 0.0672703284599504, 0.05373550284380546, 0.029890973528340692, 0.0007857070550620904, 0.04552429262527513, 0.003146714632559111, 0.08471960752272867, 0.0222783299266317, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05100410831322666, 0.011538761546511345, 0.02252302265142503, 0.06630421688987043, 0.049083359214261546, 0.020141025691745362, 0.009907963200590841, 0.03583608680340444, 0.02771055067172734, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002578526352997601, 0.011032091777774311, 0.01336498971514899, 0.01708359660364056, 0.03665387765102002, 9.999999999998899e-05, 0.024475642786605523, 0.03210573461359523, 0.018847712328288413, 0.26330638845428134, 0.2618731844961917, 0.3023221214235182, 0.20398648060993674, 0.20172300148273614, 0.20282192984947445, 0.2958566255308913, 0.20992003771394352, 0.23859911772152442, 0.07411683454833018, 0.05425451576049978, 0.07951961289216758, 0.06525605431158565, 0.06417407542911246, 0.05399457254390361, 0.06117886233648584, 0.054555965817384866, 0.05974928664925805, 0.1394573287798052, 0.1327484967911594, 0.12205895382717413, 0.18457144661878344, 0.13833177742019265, 0.13073333297734457, 0.14575037717881623, 0.13832940538969396, 0.130639114042725, 0.18077882357087638, 0.18051692478838322, 0.18935818858721754, 0.17512210700839237, 0.1994497066030565, 0.16996156895888348, 0.20411917083030562, 0.20003826464957242, 0.19723147320819312, 0.13519232548899962, 0.12628596024183192, 0.15355331202673406, 0.1138461016205149, 0.15186591589499676, 0.1374884829117391, 0.14216462657907591, 0.15388490911802277, 0.16644077921866685, 0.15638378147887466, 0.17382728587427687, 0.16477286829428506, 0.18323294373500654, 0.15537204268947336, 0.15869702615534043, 0.18871609930258315, 0.17404464558750365, 0.16211446263857432, 0.15654363172342878, 0.16680590145277785, 0.1567158023543156, 0.1567100557803608, 0.15301278934461293, 0.15853855048831034, 0.1559227819745298, 0.1597965204873657, 0.14980283208055512, 0.14864541868817127, 0.16337412293018572, 0.12292236534987588, 0.3084430699191084, 0.1818330961836877, 0.16808907376987192, 0.12742923573702392, 0.22780489696294148, 0.22456939262651132, 0.26878398495503675, 0.17451378862523237, 0.15736303249423256, 0.16759220389700202, 0.1916210541230846, 0.11770585569235659, 0.18397797271901672, 0.14174623602126335, 0.17868326145408286, 0.1831696516879079, 0.1933451033201673, 0.19269451668519189, 0.1753616773490807, 0.17097332286992883, 0.1843841376463614, 0.17892732231460828, 0.17880842489826498, 0.18257257895182744, 0.06065795565017229, 0.05669177748394083, 0.0610559978686015, 0.0593572199986645, 0.06046944050334746, 0.05007633300129133, 0.07780563860071565, 0.05878922357133687, 0.05610430850905468]}, "mutation_prompt": null}
{"id": "dfdd8d56-e19a-45b9-9dd9-112bb2beb3df", "solution": "import numpy as np\n\nclass AHPE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.7\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _evaluate_population(self, population, func):\n        return np.array([func(ind) for ind in population])\n\n    def _update_velocity(self, velocities, population, personal_best, global_best):\n        r1, r2 = np.random.rand(2, self.population_size, self.dim)\n        cognitive = self.c1 * r1 * (personal_best - population)\n        social = self.c2 * r2 * (global_best - population)\n        return velocities + cognitive + social\n\n    def _apply_bounds(self, population):\n        return np.clip(population, self.lower_bound, self.upper_bound)\n\n    def _differential_mutation(self, population, best_idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = population[indices]\n        mutant = a + self.mutation_factor * (b - c)\n        target = population[best_idx]\n        trial = np.where(np.random.rand(self.dim) < self.crossover_prob, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_value = self._evaluate_population(population, func)\n        \n        global_best_idx = np.argmin(personal_best_value)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_value[global_best_idx]\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            velocities = self._update_velocity(velocities, population, personal_best, global_best)\n            population = self._apply_bounds(population + velocities)\n\n            new_population_value = self._evaluate_population(population, func)\n            evaluations += self.population_size\n\n            for i in range(self.population_size):\n                if new_population_value[i] < personal_best_value[i]:\n                    personal_best[i] = population[i]\n                    personal_best_value[i] = new_population_value[i]\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n            # Differential Evolution step\n            for i in range(self.population_size):\n                trial = self._differential_mutation(population, i)\n                trial_value = func(trial)\n                evaluations += 1\n\n                if trial_value < personal_best_value[i]:\n                    population[i] = trial\n                    personal_best[i] = trial\n                    personal_best_value[i] = trial_value\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n                if evaluations >= self.budget:\n                    break\n        \n        return global_best", "name": "AHPE", "description": "Adaptive Hybrid Particle Evolution (AHPE) fuses concepts from Particle Swarm Optimization and Differential Evolution to dynamically adjust exploration and exploitation based on swarm diversity and population success.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "848b60b8-1e79-4fe2-8d47-c2b718158fc4", "metadata": {"aucs": [0.22211226226751046, 0.21986840014755016, 0.2963100959824455, 0.2643802287385909, 0.2696857303165686, 0.2730152487837104, 0.3283806325612689, 0.24810010481238465, 0.2417145847153197, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04800329129064462, 0.080363637242307, 0.05771329228247468, 0.06716040854003391, 0.04892114444775275, 0.071075081050605, 0.07068352602580275, 0.06465177209367134, 0.051119951543396436, 0.061189768551837886, 0.03776915709506179, 0.04048196341346322, 0.05941349219712444, 0.0520880020295883, 0.040756521351995034, 0.04555545843239417, 0.048380973212945766, 0.05466886501820212, 0.9836783223171812, 0.9680578262172431, 0.9794425170957711, 0.9698147990450061, 0.9767365784554304, 0.976925887572157, 0.9788280858948085, 0.9746936230539132, 0.9765260663991234, 0.12399512039805582, 0.11712582052290688, 0.05581303458868514, 0.14033998581991491, 0.0989188315359103, 0.149190773161755, 0.11191104257156126, 0.08652359070491489, 0.11762546683962427, 0.16609109912356235, 0.14248355543707947, 0.15871133971756557, 0.17781429871170262, 0.14136548530518267, 0.17402764358365963, 0.11074863593802964, 0.14890311350672436, 0.1811603298531017, 0.028589293817662065, 0.01525551788407431, 0.04203094636269511, 0.03174995527147617, 0.031083142637881256, 0.00746431091476929, 0.05013717122664163, 0.057323613369962945, 0.0672703284599504, 0.05373550284380546, 0.029890973528340692, 0.0007857070550620904, 0.04552429262527513, 0.003146714632559111, 0.08471960752272867, 0.0222783299266317, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05100410831322666, 0.011538761546511345, 0.02252302265142503, 0.06630421688987043, 0.049083359214261546, 0.020141025691745362, 0.009907963200590841, 0.03583608680340444, 0.02771055067172734, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002578526352997601, 0.011032091777774311, 0.01336498971514899, 0.01708359660364056, 0.03665387765102002, 9.999999999998899e-05, 0.024475642786605523, 0.03210573461359523, 0.018847712328288413, 0.26330638845428134, 0.2618731844961917, 0.3023221214235182, 0.20398648060993674, 0.20172300148273614, 0.20282192984947445, 0.2958566255308913, 0.20992003771394352, 0.23859911772152442, 0.07411683454833018, 0.05425451576049978, 0.07951961289216758, 0.06525605431158565, 0.06417407542911246, 0.05399457254390361, 0.06117886233648584, 0.054555965817384866, 0.05974928664925805, 0.1394573287798052, 0.1327484967911594, 0.12205895382717413, 0.18457144661878344, 0.13833177742019265, 0.13073333297734457, 0.14575037717881623, 0.13832940538969396, 0.130639114042725, 0.18077882357087638, 0.18051692478838322, 0.18935818858721754, 0.17512210700839237, 0.1994497066030565, 0.16996156895888348, 0.20411917083030562, 0.20003826464957242, 0.19723147320819312, 0.13519232548899962, 0.12628596024183192, 0.15355331202673406, 0.1138461016205149, 0.15186591589499676, 0.1374884829117391, 0.14216462657907591, 0.15388490911802277, 0.16644077921866685, 0.15638378147887466, 0.17382728587427687, 0.16477286829428506, 0.18323294373500654, 0.15537204268947336, 0.15869702615534043, 0.18871609930258315, 0.17404464558750365, 0.16211446263857432, 0.15654363172342878, 0.16680590145277785, 0.1567158023543156, 0.1567100557803608, 0.15301278934461293, 0.15853855048831034, 0.1559227819745298, 0.1597965204873657, 0.14980283208055512, 0.14864541868817127, 0.16337412293018572, 0.12292236534987588, 0.3084430699191084, 0.1818330961836877, 0.16808907376987192, 0.12742923573702392, 0.22780489696294148, 0.22456939262651132, 0.26878398495503675, 0.17451378862523237, 0.15736303249423256, 0.16759220389700202, 0.1916210541230846, 0.11770585569235659, 0.18397797271901672, 0.14174623602126335, 0.17868326145408286, 0.1831696516879079, 0.1933451033201673, 0.19269451668519189, 0.1753616773490807, 0.17097332286992883, 0.1843841376463614, 0.17892732231460828, 0.17880842489826498, 0.18257257895182744, 0.06065795565017229, 0.05669177748394083, 0.0610559978686015, 0.0593572199986645, 0.06046944050334746, 0.05007633300129133, 0.07780563860071565, 0.05878922357133687, 0.05610430850905468]}, "mutation_prompt": null}
{"id": "f6b0d7d6-2770-4d5a-9d4b-7934d793d254", "solution": "import numpy as np\n\nclass AHPE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.7\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _evaluate_population(self, population, func):\n        return np.array([func(ind) for ind in population])\n\n    def _update_velocity(self, velocities, population, personal_best, global_best):\n        r1, r2 = np.random.rand(2, self.population_size, self.dim)\n        cognitive = self.c1 * r1 * (personal_best - population)\n        social = self.c2 * r2 * (global_best - population)\n        return velocities + cognitive + social\n\n    def _apply_bounds(self, population):\n        return np.clip(population, self.lower_bound, self.upper_bound)\n\n    def _differential_mutation(self, population, best_idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = population[indices]\n        mutant = a + self.mutation_factor * (b - c)\n        target = population[best_idx]\n        trial = np.where(np.random.rand(self.dim) < self.crossover_prob, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_value = self._evaluate_population(population, func)\n        \n        global_best_idx = np.argmin(personal_best_value)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_value[global_best_idx]\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            velocities = self._update_velocity(velocities, population, personal_best, global_best)\n            population = self._apply_bounds(population + velocities)\n\n            new_population_value = self._evaluate_population(population, func)\n            evaluations += self.population_size\n\n            for i in range(self.population_size):\n                if new_population_value[i] < personal_best_value[i]:\n                    personal_best[i] = population[i]\n                    personal_best_value[i] = new_population_value[i]\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n            # Differential Evolution step\n            for i in range(self.population_size):\n                trial = self._differential_mutation(population, i)\n                trial_value = func(trial)\n                evaluations += 1\n\n                if trial_value < personal_best_value[i]:\n                    population[i] = trial\n                    personal_best[i] = trial\n                    personal_best_value[i] = trial_value\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n                if evaluations >= self.budget:\n                    break\n        \n        return global_best", "name": "AHPE", "description": "Adaptive Hybrid Particle Evolution (AHPE) fuses concepts from Particle Swarm Optimization and Differential Evolution to dynamically adjust exploration and exploitation based on swarm diversity and population success.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "848b60b8-1e79-4fe2-8d47-c2b718158fc4", "metadata": {"aucs": [0.22211226226751046, 0.21986840014755016, 0.2963100959824455, 0.2643802287385909, 0.2696857303165686, 0.2730152487837104, 0.3283806325612689, 0.24810010481238465, 0.2417145847153197, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04800329129064462, 0.080363637242307, 0.05771329228247468, 0.06716040854003391, 0.04892114444775275, 0.071075081050605, 0.07068352602580275, 0.06465177209367134, 0.051119951543396436, 0.061189768551837886, 0.03776915709506179, 0.04048196341346322, 0.05941349219712444, 0.0520880020295883, 0.040756521351995034, 0.04555545843239417, 0.048380973212945766, 0.05466886501820212, 0.9836783223171812, 0.9680578262172431, 0.9794425170957711, 0.9698147990450061, 0.9767365784554304, 0.976925887572157, 0.9788280858948085, 0.9746936230539132, 0.9765260663991234, 0.12399512039805582, 0.11712582052290688, 0.05581303458868514, 0.14033998581991491, 0.0989188315359103, 0.149190773161755, 0.11191104257156126, 0.08652359070491489, 0.11762546683962427, 0.16609109912356235, 0.14248355543707947, 0.15871133971756557, 0.17781429871170262, 0.14136548530518267, 0.17402764358365963, 0.11074863593802964, 0.14890311350672436, 0.1811603298531017, 0.028589293817662065, 0.01525551788407431, 0.04203094636269511, 0.03174995527147617, 0.031083142637881256, 0.00746431091476929, 0.05013717122664163, 0.057323613369962945, 0.0672703284599504, 0.05373550284380546, 0.029890973528340692, 0.0007857070550620904, 0.04552429262527513, 0.003146714632559111, 0.08471960752272867, 0.0222783299266317, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05100410831322666, 0.011538761546511345, 0.02252302265142503, 0.06630421688987043, 0.049083359214261546, 0.020141025691745362, 0.009907963200590841, 0.03583608680340444, 0.02771055067172734, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002578526352997601, 0.011032091777774311, 0.01336498971514899, 0.01708359660364056, 0.03665387765102002, 9.999999999998899e-05, 0.024475642786605523, 0.03210573461359523, 0.018847712328288413, 0.26330638845428134, 0.2618731844961917, 0.3023221214235182, 0.20398648060993674, 0.20172300148273614, 0.20282192984947445, 0.2958566255308913, 0.20992003771394352, 0.23859911772152442, 0.07411683454833018, 0.05425451576049978, 0.07951961289216758, 0.06525605431158565, 0.06417407542911246, 0.05399457254390361, 0.06117886233648584, 0.054555965817384866, 0.05974928664925805, 0.1394573287798052, 0.1327484967911594, 0.12205895382717413, 0.18457144661878344, 0.13833177742019265, 0.13073333297734457, 0.14575037717881623, 0.13832940538969396, 0.130639114042725, 0.18077882357087638, 0.18051692478838322, 0.18935818858721754, 0.17512210700839237, 0.1994497066030565, 0.16996156895888348, 0.20411917083030562, 0.20003826464957242, 0.19723147320819312, 0.13519232548899962, 0.12628596024183192, 0.15355331202673406, 0.1138461016205149, 0.15186591589499676, 0.1374884829117391, 0.14216462657907591, 0.15388490911802277, 0.16644077921866685, 0.15638378147887466, 0.17382728587427687, 0.16477286829428506, 0.18323294373500654, 0.15537204268947336, 0.15869702615534043, 0.18871609930258315, 0.17404464558750365, 0.16211446263857432, 0.15654363172342878, 0.16680590145277785, 0.1567158023543156, 0.1567100557803608, 0.15301278934461293, 0.15853855048831034, 0.1559227819745298, 0.1597965204873657, 0.14980283208055512, 0.14864541868817127, 0.16337412293018572, 0.12292236534987588, 0.3084430699191084, 0.1818330961836877, 0.16808907376987192, 0.12742923573702392, 0.22780489696294148, 0.22456939262651132, 0.26878398495503675, 0.17451378862523237, 0.15736303249423256, 0.16759220389700202, 0.1916210541230846, 0.11770585569235659, 0.18397797271901672, 0.14174623602126335, 0.17868326145408286, 0.1831696516879079, 0.1933451033201673, 0.19269451668519189, 0.1753616773490807, 0.17097332286992883, 0.1843841376463614, 0.17892732231460828, 0.17880842489826498, 0.18257257895182744, 0.06065795565017229, 0.05669177748394083, 0.0610559978686015, 0.0593572199986645, 0.06046944050334746, 0.05007633300129133, 0.07780563860071565, 0.05878922357133687, 0.05610430850905468]}, "mutation_prompt": null}
{"id": "21b61c2e-ed59-4b1a-a5b9-0b9041067af0", "solution": "import numpy as np\n\nclass AHPE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.7\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _evaluate_population(self, population, func):\n        return np.array([func(ind) for ind in population])\n\n    def _update_velocity(self, velocities, population, personal_best, global_best):\n        r1, r2 = np.random.rand(2, self.population_size, self.dim)\n        cognitive = self.c1 * r1 * (personal_best - population)\n        social = self.c2 * r2 * (global_best - population)\n        return velocities + cognitive + social\n\n    def _apply_bounds(self, population):\n        return np.clip(population, self.lower_bound, self.upper_bound)\n\n    def _differential_mutation(self, population, best_idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = population[indices]\n        mutant = a + self.mutation_factor * (b - c)\n        target = population[best_idx]\n        trial = np.where(np.random.rand(self.dim) < self.crossover_prob, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_value = self._evaluate_population(population, func)\n        \n        global_best_idx = np.argmin(personal_best_value)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_value[global_best_idx]\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            velocities = self._update_velocity(velocities, population, personal_best, global_best)\n            population = self._apply_bounds(population + velocities)\n\n            new_population_value = self._evaluate_population(population, func)\n            evaluations += self.population_size\n\n            for i in range(self.population_size):\n                if new_population_value[i] < personal_best_value[i]:\n                    personal_best[i] = population[i]\n                    personal_best_value[i] = new_population_value[i]\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n            # Differential Evolution step\n            for i in range(self.population_size):\n                trial = self._differential_mutation(population, i)\n                trial_value = func(trial)\n                evaluations += 1\n\n                if trial_value < personal_best_value[i]:\n                    population[i] = trial\n                    personal_best[i] = trial\n                    personal_best_value[i] = trial_value\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n                if evaluations >= self.budget:\n                    break\n        \n        return global_best", "name": "AHPE", "description": "Adaptive Hybrid Particle Evolution (AHPE) fuses concepts from Particle Swarm Optimization and Differential Evolution to dynamically adjust exploration and exploitation based on swarm diversity and population success.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "848b60b8-1e79-4fe2-8d47-c2b718158fc4", "metadata": {"aucs": [0.22211226226751046, 0.21986840014755016, 0.2963100959824455, 0.2643802287385909, 0.2696857303165686, 0.2730152487837104, 0.3283806325612689, 0.24810010481238465, 0.2417145847153197, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04800329129064462, 0.080363637242307, 0.05771329228247468, 0.06716040854003391, 0.04892114444775275, 0.071075081050605, 0.07068352602580275, 0.06465177209367134, 0.051119951543396436, 0.061189768551837886, 0.03776915709506179, 0.04048196341346322, 0.05941349219712444, 0.0520880020295883, 0.040756521351995034, 0.04555545843239417, 0.048380973212945766, 0.05466886501820212, 0.9836783223171812, 0.9680578262172431, 0.9794425170957711, 0.9698147990450061, 0.9767365784554304, 0.976925887572157, 0.9788280858948085, 0.9746936230539132, 0.9765260663991234, 0.12399512039805582, 0.11712582052290688, 0.05581303458868514, 0.14033998581991491, 0.0989188315359103, 0.149190773161755, 0.11191104257156126, 0.08652359070491489, 0.11762546683962427, 0.16609109912356235, 0.14248355543707947, 0.15871133971756557, 0.17781429871170262, 0.14136548530518267, 0.17402764358365963, 0.11074863593802964, 0.14890311350672436, 0.1811603298531017, 0.028589293817662065, 0.01525551788407431, 0.04203094636269511, 0.03174995527147617, 0.031083142637881256, 0.00746431091476929, 0.05013717122664163, 0.057323613369962945, 0.0672703284599504, 0.05373550284380546, 0.029890973528340692, 0.0007857070550620904, 0.04552429262527513, 0.003146714632559111, 0.08471960752272867, 0.0222783299266317, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05100410831322666, 0.011538761546511345, 0.02252302265142503, 0.06630421688987043, 0.049083359214261546, 0.020141025691745362, 0.009907963200590841, 0.03583608680340444, 0.02771055067172734, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002578526352997601, 0.011032091777774311, 0.01336498971514899, 0.01708359660364056, 0.03665387765102002, 9.999999999998899e-05, 0.024475642786605523, 0.03210573461359523, 0.018847712328288413, 0.26330638845428134, 0.2618731844961917, 0.3023221214235182, 0.20398648060993674, 0.20172300148273614, 0.20282192984947445, 0.2958566255308913, 0.20992003771394352, 0.23859911772152442, 0.07411683454833018, 0.05425451576049978, 0.07951961289216758, 0.06525605431158565, 0.06417407542911246, 0.05399457254390361, 0.06117886233648584, 0.054555965817384866, 0.05974928664925805, 0.1394573287798052, 0.1327484967911594, 0.12205895382717413, 0.18457144661878344, 0.13833177742019265, 0.13073333297734457, 0.14575037717881623, 0.13832940538969396, 0.130639114042725, 0.18077882357087638, 0.18051692478838322, 0.18935818858721754, 0.17512210700839237, 0.1994497066030565, 0.16996156895888348, 0.20411917083030562, 0.20003826464957242, 0.19723147320819312, 0.13519232548899962, 0.12628596024183192, 0.15355331202673406, 0.1138461016205149, 0.15186591589499676, 0.1374884829117391, 0.14216462657907591, 0.15388490911802277, 0.16644077921866685, 0.15638378147887466, 0.17382728587427687, 0.16477286829428506, 0.18323294373500654, 0.15537204268947336, 0.15869702615534043, 0.18871609930258315, 0.17404464558750365, 0.16211446263857432, 0.15654363172342878, 0.16680590145277785, 0.1567158023543156, 0.1567100557803608, 0.15301278934461293, 0.15853855048831034, 0.1559227819745298, 0.1597965204873657, 0.14980283208055512, 0.14864541868817127, 0.16337412293018572, 0.12292236534987588, 0.3084430699191084, 0.1818330961836877, 0.16808907376987192, 0.12742923573702392, 0.22780489696294148, 0.22456939262651132, 0.26878398495503675, 0.17451378862523237, 0.15736303249423256, 0.16759220389700202, 0.1916210541230846, 0.11770585569235659, 0.18397797271901672, 0.14174623602126335, 0.17868326145408286, 0.1831696516879079, 0.1933451033201673, 0.19269451668519189, 0.1753616773490807, 0.17097332286992883, 0.1843841376463614, 0.17892732231460828, 0.17880842489826498, 0.18257257895182744, 0.06065795565017229, 0.05669177748394083, 0.0610559978686015, 0.0593572199986645, 0.06046944050334746, 0.05007633300129133, 0.07780563860071565, 0.05878922357133687, 0.05610430850905468]}, "mutation_prompt": null}
{"id": "97cba90d-dc4b-4414-b225-7dc1fd324d83", "solution": "import numpy as np\n\nclass AHPE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.7\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _evaluate_population(self, population, func):\n        return np.array([func(ind) for ind in population])\n\n    def _update_velocity(self, velocities, population, personal_best, global_best):\n        r1, r2 = np.random.rand(2, self.population_size, self.dim)\n        cognitive = self.c1 * r1 * (personal_best - population)\n        social = self.c2 * r2 * (global_best - population)\n        return velocities + cognitive + social\n\n    def _apply_bounds(self, population):\n        return np.clip(population, self.lower_bound, self.upper_bound)\n\n    def _differential_mutation(self, population, best_idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = population[indices]\n        mutant = a + self.mutation_factor * (b - c)\n        target = population[best_idx]\n        trial = np.where(np.random.rand(self.dim) < self.crossover_prob, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_value = self._evaluate_population(population, func)\n        \n        global_best_idx = np.argmin(personal_best_value)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_value[global_best_idx]\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            velocities = self._update_velocity(velocities, population, personal_best, global_best)\n            population = self._apply_bounds(population + velocities)\n\n            new_population_value = self._evaluate_population(population, func)\n            evaluations += self.population_size\n\n            for i in range(self.population_size):\n                if new_population_value[i] < personal_best_value[i]:\n                    personal_best[i] = population[i]\n                    personal_best_value[i] = new_population_value[i]\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n            # Differential Evolution step\n            for i in range(self.population_size):\n                trial = self._differential_mutation(population, i)\n                trial_value = func(trial)\n                evaluations += 1\n\n                if trial_value < personal_best_value[i]:\n                    population[i] = trial\n                    personal_best[i] = trial\n                    personal_best_value[i] = trial_value\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n                if evaluations >= self.budget:\n                    break\n        \n        return global_best", "name": "AHPE", "description": "Adaptive Hybrid Particle Evolution (AHPE) fuses concepts from Particle Swarm Optimization and Differential Evolution to dynamically adjust exploration and exploitation based on swarm diversity and population success.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "848b60b8-1e79-4fe2-8d47-c2b718158fc4", "metadata": {"aucs": [0.22211226226751046, 0.21986840014755016, 0.2963100959824455, 0.2643802287385909, 0.2696857303165686, 0.2730152487837104, 0.3283806325612689, 0.24810010481238465, 0.2417145847153197, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04800329129064462, 0.080363637242307, 0.05771329228247468, 0.06716040854003391, 0.04892114444775275, 0.071075081050605, 0.07068352602580275, 0.06465177209367134, 0.051119951543396436, 0.061189768551837886, 0.03776915709506179, 0.04048196341346322, 0.05941349219712444, 0.0520880020295883, 0.040756521351995034, 0.04555545843239417, 0.048380973212945766, 0.05466886501820212, 0.9836783223171812, 0.9680578262172431, 0.9794425170957711, 0.9698147990450061, 0.9767365784554304, 0.976925887572157, 0.9788280858948085, 0.9746936230539132, 0.9765260663991234, 0.12399512039805582, 0.11712582052290688, 0.05581303458868514, 0.14033998581991491, 0.0989188315359103, 0.149190773161755, 0.11191104257156126, 0.08652359070491489, 0.11762546683962427, 0.16609109912356235, 0.14248355543707947, 0.15871133971756557, 0.17781429871170262, 0.14136548530518267, 0.17402764358365963, 0.11074863593802964, 0.14890311350672436, 0.1811603298531017, 0.028589293817662065, 0.01525551788407431, 0.04203094636269511, 0.03174995527147617, 0.031083142637881256, 0.00746431091476929, 0.05013717122664163, 0.057323613369962945, 0.0672703284599504, 0.05373550284380546, 0.029890973528340692, 0.0007857070550620904, 0.04552429262527513, 0.003146714632559111, 0.08471960752272867, 0.0222783299266317, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05100410831322666, 0.011538761546511345, 0.02252302265142503, 0.06630421688987043, 0.049083359214261546, 0.020141025691745362, 0.009907963200590841, 0.03583608680340444, 0.02771055067172734, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002578526352997601, 0.011032091777774311, 0.01336498971514899, 0.01708359660364056, 0.03665387765102002, 9.999999999998899e-05, 0.024475642786605523, 0.03210573461359523, 0.018847712328288413, 0.26330638845428134, 0.2618731844961917, 0.3023221214235182, 0.20398648060993674, 0.20172300148273614, 0.20282192984947445, 0.2958566255308913, 0.20992003771394352, 0.23859911772152442, 0.07411683454833018, 0.05425451576049978, 0.07951961289216758, 0.06525605431158565, 0.06417407542911246, 0.05399457254390361, 0.06117886233648584, 0.054555965817384866, 0.05974928664925805, 0.1394573287798052, 0.1327484967911594, 0.12205895382717413, 0.18457144661878344, 0.13833177742019265, 0.13073333297734457, 0.14575037717881623, 0.13832940538969396, 0.130639114042725, 0.18077882357087638, 0.18051692478838322, 0.18935818858721754, 0.17512210700839237, 0.1994497066030565, 0.16996156895888348, 0.20411917083030562, 0.20003826464957242, 0.19723147320819312, 0.13519232548899962, 0.12628596024183192, 0.15355331202673406, 0.1138461016205149, 0.15186591589499676, 0.1374884829117391, 0.14216462657907591, 0.15388490911802277, 0.16644077921866685, 0.15638378147887466, 0.17382728587427687, 0.16477286829428506, 0.18323294373500654, 0.15537204268947336, 0.15869702615534043, 0.18871609930258315, 0.17404464558750365, 0.16211446263857432, 0.15654363172342878, 0.16680590145277785, 0.1567158023543156, 0.1567100557803608, 0.15301278934461293, 0.15853855048831034, 0.1559227819745298, 0.1597965204873657, 0.14980283208055512, 0.14864541868817127, 0.16337412293018572, 0.12292236534987588, 0.3084430699191084, 0.1818330961836877, 0.16808907376987192, 0.12742923573702392, 0.22780489696294148, 0.22456939262651132, 0.26878398495503675, 0.17451378862523237, 0.15736303249423256, 0.16759220389700202, 0.1916210541230846, 0.11770585569235659, 0.18397797271901672, 0.14174623602126335, 0.17868326145408286, 0.1831696516879079, 0.1933451033201673, 0.19269451668519189, 0.1753616773490807, 0.17097332286992883, 0.1843841376463614, 0.17892732231460828, 0.17880842489826498, 0.18257257895182744, 0.06065795565017229, 0.05669177748394083, 0.0610559978686015, 0.0593572199986645, 0.06046944050334746, 0.05007633300129133, 0.07780563860071565, 0.05878922357133687, 0.05610430850905468]}, "mutation_prompt": null}
{"id": "c69107e5-f5e1-4bf5-9bb7-c11bca0e7b19", "solution": "import numpy as np\n\nclass AHPE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.7\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _evaluate_population(self, population, func):\n        return np.array([func(ind) for ind in population])\n\n    def _update_velocity(self, velocities, population, personal_best, global_best):\n        r1, r2 = np.random.rand(2, self.population_size, self.dim)\n        cognitive = self.c1 * r1 * (personal_best - population)\n        social = self.c2 * r2 * (global_best - population)\n        return velocities + cognitive + social\n\n    def _apply_bounds(self, population):\n        return np.clip(population, self.lower_bound, self.upper_bound)\n\n    def _differential_mutation(self, population, best_idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = population[indices]\n        mutant = a + self.mutation_factor * (b - c)\n        target = population[best_idx]\n        trial = np.where(np.random.rand(self.dim) < self.crossover_prob, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_value = self._evaluate_population(population, func)\n        \n        global_best_idx = np.argmin(personal_best_value)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_value[global_best_idx]\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            velocities = self._update_velocity(velocities, population, personal_best, global_best)\n            population = self._apply_bounds(population + velocities)\n\n            new_population_value = self._evaluate_population(population, func)\n            evaluations += self.population_size\n\n            for i in range(self.population_size):\n                if new_population_value[i] < personal_best_value[i]:\n                    personal_best[i] = population[i]\n                    personal_best_value[i] = new_population_value[i]\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n            # Differential Evolution step\n            for i in range(self.population_size):\n                trial = self._differential_mutation(population, i)\n                trial_value = func(trial)\n                evaluations += 1\n\n                if trial_value < personal_best_value[i]:\n                    population[i] = trial\n                    personal_best[i] = trial\n                    personal_best_value[i] = trial_value\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n                if evaluations >= self.budget:\n                    break\n        \n        return global_best", "name": "AHPE", "description": "Adaptive Hybrid Particle Evolution (AHPE) fuses concepts from Particle Swarm Optimization and Differential Evolution to dynamically adjust exploration and exploitation based on swarm diversity and population success.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "848b60b8-1e79-4fe2-8d47-c2b718158fc4", "metadata": {"aucs": [0.22211226226751046, 0.21986840014755016, 0.2963100959824455, 0.2643802287385909, 0.2696857303165686, 0.2730152487837104, 0.3283806325612689, 0.24810010481238465, 0.2417145847153197, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04800329129064462, 0.080363637242307, 0.05771329228247468, 0.06716040854003391, 0.04892114444775275, 0.071075081050605, 0.07068352602580275, 0.06465177209367134, 0.051119951543396436, 0.061189768551837886, 0.03776915709506179, 0.04048196341346322, 0.05941349219712444, 0.0520880020295883, 0.040756521351995034, 0.04555545843239417, 0.048380973212945766, 0.05466886501820212, 0.9836783223171812, 0.9680578262172431, 0.9794425170957711, 0.9698147990450061, 0.9767365784554304, 0.976925887572157, 0.9788280858948085, 0.9746936230539132, 0.9765260663991234, 0.12399512039805582, 0.11712582052290688, 0.05581303458868514, 0.14033998581991491, 0.0989188315359103, 0.149190773161755, 0.11191104257156126, 0.08652359070491489, 0.11762546683962427, 0.16609109912356235, 0.14248355543707947, 0.15871133971756557, 0.17781429871170262, 0.14136548530518267, 0.17402764358365963, 0.11074863593802964, 0.14890311350672436, 0.1811603298531017, 0.028589293817662065, 0.01525551788407431, 0.04203094636269511, 0.03174995527147617, 0.031083142637881256, 0.00746431091476929, 0.05013717122664163, 0.057323613369962945, 0.0672703284599504, 0.05373550284380546, 0.029890973528340692, 0.0007857070550620904, 0.04552429262527513, 0.003146714632559111, 0.08471960752272867, 0.0222783299266317, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05100410831322666, 0.011538761546511345, 0.02252302265142503, 0.06630421688987043, 0.049083359214261546, 0.020141025691745362, 0.009907963200590841, 0.03583608680340444, 0.02771055067172734, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002578526352997601, 0.011032091777774311, 0.01336498971514899, 0.01708359660364056, 0.03665387765102002, 9.999999999998899e-05, 0.024475642786605523, 0.03210573461359523, 0.018847712328288413, 0.26330638845428134, 0.2618731844961917, 0.3023221214235182, 0.20398648060993674, 0.20172300148273614, 0.20282192984947445, 0.2958566255308913, 0.20992003771394352, 0.23859911772152442, 0.07411683454833018, 0.05425451576049978, 0.07951961289216758, 0.06525605431158565, 0.06417407542911246, 0.05399457254390361, 0.06117886233648584, 0.054555965817384866, 0.05974928664925805, 0.1394573287798052, 0.1327484967911594, 0.12205895382717413, 0.18457144661878344, 0.13833177742019265, 0.13073333297734457, 0.14575037717881623, 0.13832940538969396, 0.130639114042725, 0.18077882357087638, 0.18051692478838322, 0.18935818858721754, 0.17512210700839237, 0.1994497066030565, 0.16996156895888348, 0.20411917083030562, 0.20003826464957242, 0.19723147320819312, 0.13519232548899962, 0.12628596024183192, 0.15355331202673406, 0.1138461016205149, 0.15186591589499676, 0.1374884829117391, 0.14216462657907591, 0.15388490911802277, 0.16644077921866685, 0.15638378147887466, 0.17382728587427687, 0.16477286829428506, 0.18323294373500654, 0.15537204268947336, 0.15869702615534043, 0.18871609930258315, 0.17404464558750365, 0.16211446263857432, 0.15654363172342878, 0.16680590145277785, 0.1567158023543156, 0.1567100557803608, 0.15301278934461293, 0.15853855048831034, 0.1559227819745298, 0.1597965204873657, 0.14980283208055512, 0.14864541868817127, 0.16337412293018572, 0.12292236534987588, 0.3084430699191084, 0.1818330961836877, 0.16808907376987192, 0.12742923573702392, 0.22780489696294148, 0.22456939262651132, 0.26878398495503675, 0.17451378862523237, 0.15736303249423256, 0.16759220389700202, 0.1916210541230846, 0.11770585569235659, 0.18397797271901672, 0.14174623602126335, 0.17868326145408286, 0.1831696516879079, 0.1933451033201673, 0.19269451668519189, 0.1753616773490807, 0.17097332286992883, 0.1843841376463614, 0.17892732231460828, 0.17880842489826498, 0.18257257895182744, 0.06065795565017229, 0.05669177748394083, 0.0610559978686015, 0.0593572199986645, 0.06046944050334746, 0.05007633300129133, 0.07780563860071565, 0.05878922357133687, 0.05610430850905468]}, "mutation_prompt": null}
{"id": "cc4e3de2-d958-4d45-b68b-2c829c2875d0", "solution": "import numpy as np\n\nclass AHPE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.7\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _evaluate_population(self, population, func):\n        return np.array([func(ind) for ind in population])\n\n    def _update_velocity(self, velocities, population, personal_best, global_best):\n        r1, r2 = np.random.rand(2, self.population_size, self.dim)\n        cognitive = self.c1 * r1 * (personal_best - population)\n        social = self.c2 * r2 * (global_best - population)\n        return velocities + cognitive + social\n\n    def _apply_bounds(self, population):\n        return np.clip(population, self.lower_bound, self.upper_bound)\n\n    def _differential_mutation(self, population, best_idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = population[indices]\n        mutant = a + self.mutation_factor * (b - c)\n        target = population[best_idx]\n        trial = np.where(np.random.rand(self.dim) < self.crossover_prob, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_value = self._evaluate_population(population, func)\n        \n        global_best_idx = np.argmin(personal_best_value)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_value[global_best_idx]\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            velocities = self._update_velocity(velocities, population, personal_best, global_best)\n            population = self._apply_bounds(population + velocities)\n\n            new_population_value = self._evaluate_population(population, func)\n            evaluations += self.population_size\n\n            for i in range(self.population_size):\n                if new_population_value[i] < personal_best_value[i]:\n                    personal_best[i] = population[i]\n                    personal_best_value[i] = new_population_value[i]\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n            # Differential Evolution step\n            for i in range(self.population_size):\n                trial = self._differential_mutation(population, i)\n                trial_value = func(trial)\n                evaluations += 1\n\n                if trial_value < personal_best_value[i]:\n                    population[i] = trial\n                    personal_best[i] = trial\n                    personal_best_value[i] = trial_value\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n                if evaluations >= self.budget:\n                    break\n        \n        return global_best", "name": "AHPE", "description": "Adaptive Hybrid Particle Evolution (AHPE) fuses concepts from Particle Swarm Optimization and Differential Evolution to dynamically adjust exploration and exploitation based on swarm diversity and population success.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "848b60b8-1e79-4fe2-8d47-c2b718158fc4", "metadata": {"aucs": [0.22211226226751046, 0.21986840014755016, 0.2963100959824455, 0.2643802287385909, 0.2696857303165686, 0.2730152487837104, 0.3283806325612689, 0.24810010481238465, 0.2417145847153197, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04800329129064462, 0.080363637242307, 0.05771329228247468, 0.06716040854003391, 0.04892114444775275, 0.071075081050605, 0.07068352602580275, 0.06465177209367134, 0.051119951543396436, 0.061189768551837886, 0.03776915709506179, 0.04048196341346322, 0.05941349219712444, 0.0520880020295883, 0.040756521351995034, 0.04555545843239417, 0.048380973212945766, 0.05466886501820212, 0.9836783223171812, 0.9680578262172431, 0.9794425170957711, 0.9698147990450061, 0.9767365784554304, 0.976925887572157, 0.9788280858948085, 0.9746936230539132, 0.9765260663991234, 0.12399512039805582, 0.11712582052290688, 0.05581303458868514, 0.14033998581991491, 0.0989188315359103, 0.149190773161755, 0.11191104257156126, 0.08652359070491489, 0.11762546683962427, 0.16609109912356235, 0.14248355543707947, 0.15871133971756557, 0.17781429871170262, 0.14136548530518267, 0.17402764358365963, 0.11074863593802964, 0.14890311350672436, 0.1811603298531017, 0.028589293817662065, 0.01525551788407431, 0.04203094636269511, 0.03174995527147617, 0.031083142637881256, 0.00746431091476929, 0.05013717122664163, 0.057323613369962945, 0.0672703284599504, 0.05373550284380546, 0.029890973528340692, 0.0007857070550620904, 0.04552429262527513, 0.003146714632559111, 0.08471960752272867, 0.0222783299266317, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05100410831322666, 0.011538761546511345, 0.02252302265142503, 0.06630421688987043, 0.049083359214261546, 0.020141025691745362, 0.009907963200590841, 0.03583608680340444, 0.02771055067172734, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002578526352997601, 0.011032091777774311, 0.01336498971514899, 0.01708359660364056, 0.03665387765102002, 9.999999999998899e-05, 0.024475642786605523, 0.03210573461359523, 0.018847712328288413, 0.26330638845428134, 0.2618731844961917, 0.3023221214235182, 0.20398648060993674, 0.20172300148273614, 0.20282192984947445, 0.2958566255308913, 0.20992003771394352, 0.23859911772152442, 0.07411683454833018, 0.05425451576049978, 0.07951961289216758, 0.06525605431158565, 0.06417407542911246, 0.05399457254390361, 0.06117886233648584, 0.054555965817384866, 0.05974928664925805, 0.1394573287798052, 0.1327484967911594, 0.12205895382717413, 0.18457144661878344, 0.13833177742019265, 0.13073333297734457, 0.14575037717881623, 0.13832940538969396, 0.130639114042725, 0.18077882357087638, 0.18051692478838322, 0.18935818858721754, 0.17512210700839237, 0.1994497066030565, 0.16996156895888348, 0.20411917083030562, 0.20003826464957242, 0.19723147320819312, 0.13519232548899962, 0.12628596024183192, 0.15355331202673406, 0.1138461016205149, 0.15186591589499676, 0.1374884829117391, 0.14216462657907591, 0.15388490911802277, 0.16644077921866685, 0.15638378147887466, 0.17382728587427687, 0.16477286829428506, 0.18323294373500654, 0.15537204268947336, 0.15869702615534043, 0.18871609930258315, 0.17404464558750365, 0.16211446263857432, 0.15654363172342878, 0.16680590145277785, 0.1567158023543156, 0.1567100557803608, 0.15301278934461293, 0.15853855048831034, 0.1559227819745298, 0.1597965204873657, 0.14980283208055512, 0.14864541868817127, 0.16337412293018572, 0.12292236534987588, 0.3084430699191084, 0.1818330961836877, 0.16808907376987192, 0.12742923573702392, 0.22780489696294148, 0.22456939262651132, 0.26878398495503675, 0.17451378862523237, 0.15736303249423256, 0.16759220389700202, 0.1916210541230846, 0.11770585569235659, 0.18397797271901672, 0.14174623602126335, 0.17868326145408286, 0.1831696516879079, 0.1933451033201673, 0.19269451668519189, 0.1753616773490807, 0.17097332286992883, 0.1843841376463614, 0.17892732231460828, 0.17880842489826498, 0.18257257895182744, 0.06065795565017229, 0.05669177748394083, 0.0610559978686015, 0.0593572199986645, 0.06046944050334746, 0.05007633300129133, 0.07780563860071565, 0.05878922357133687, 0.05610430850905468]}, "mutation_prompt": null}
{"id": "92a0964e-a50e-4aa6-8c3a-54c722f9fb64", "solution": "import numpy as np\n\nclass AHPE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.7\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _evaluate_population(self, population, func):\n        return np.array([func(ind) for ind in population])\n\n    def _update_velocity(self, velocities, population, personal_best, global_best):\n        r1, r2 = np.random.rand(2, self.population_size, self.dim)\n        cognitive = self.c1 * r1 * (personal_best - population)\n        social = self.c2 * r2 * (global_best - population)\n        return velocities + cognitive + social\n\n    def _apply_bounds(self, population):\n        return np.clip(population, self.lower_bound, self.upper_bound)\n\n    def _differential_mutation(self, population, best_idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = population[indices]\n        mutant = a + self.mutation_factor * (b - c)\n        target = population[best_idx]\n        trial = np.where(np.random.rand(self.dim) < self.crossover_prob, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_value = self._evaluate_population(population, func)\n        \n        global_best_idx = np.argmin(personal_best_value)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_value[global_best_idx]\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            velocities = self._update_velocity(velocities, population, personal_best, global_best)\n            population = self._apply_bounds(population + velocities)\n\n            new_population_value = self._evaluate_population(population, func)\n            evaluations += self.population_size\n\n            for i in range(self.population_size):\n                if new_population_value[i] < personal_best_value[i]:\n                    personal_best[i] = population[i]\n                    personal_best_value[i] = new_population_value[i]\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n            # Differential Evolution step\n            for i in range(self.population_size):\n                trial = self._differential_mutation(population, i)\n                trial_value = func(trial)\n                evaluations += 1\n\n                if trial_value < personal_best_value[i]:\n                    population[i] = trial\n                    personal_best[i] = trial\n                    personal_best_value[i] = trial_value\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n                if evaluations >= self.budget:\n                    break\n        \n        return global_best", "name": "AHPE", "description": "Adaptive Hybrid Particle Evolution (AHPE) fuses concepts from Particle Swarm Optimization and Differential Evolution to dynamically adjust exploration and exploitation based on swarm diversity and population success.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "848b60b8-1e79-4fe2-8d47-c2b718158fc4", "metadata": {"aucs": [0.22211226226751046, 0.21986840014755016, 0.2963100959824455, 0.2643802287385909, 0.2696857303165686, 0.2730152487837104, 0.3283806325612689, 0.24810010481238465, 0.2417145847153197, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04800329129064462, 0.080363637242307, 0.05771329228247468, 0.06716040854003391, 0.04892114444775275, 0.071075081050605, 0.07068352602580275, 0.06465177209367134, 0.051119951543396436, 0.061189768551837886, 0.03776915709506179, 0.04048196341346322, 0.05941349219712444, 0.0520880020295883, 0.040756521351995034, 0.04555545843239417, 0.048380973212945766, 0.05466886501820212, 0.9836783223171812, 0.9680578262172431, 0.9794425170957711, 0.9698147990450061, 0.9767365784554304, 0.976925887572157, 0.9788280858948085, 0.9746936230539132, 0.9765260663991234, 0.12399512039805582, 0.11712582052290688, 0.05581303458868514, 0.14033998581991491, 0.0989188315359103, 0.149190773161755, 0.11191104257156126, 0.08652359070491489, 0.11762546683962427, 0.16609109912356235, 0.14248355543707947, 0.15871133971756557, 0.17781429871170262, 0.14136548530518267, 0.17402764358365963, 0.11074863593802964, 0.14890311350672436, 0.1811603298531017, 0.028589293817662065, 0.01525551788407431, 0.04203094636269511, 0.03174995527147617, 0.031083142637881256, 0.00746431091476929, 0.05013717122664163, 0.057323613369962945, 0.0672703284599504, 0.05373550284380546, 0.029890973528340692, 0.0007857070550620904, 0.04552429262527513, 0.003146714632559111, 0.08471960752272867, 0.0222783299266317, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05100410831322666, 0.011538761546511345, 0.02252302265142503, 0.06630421688987043, 0.049083359214261546, 0.020141025691745362, 0.009907963200590841, 0.03583608680340444, 0.02771055067172734, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002578526352997601, 0.011032091777774311, 0.01336498971514899, 0.01708359660364056, 0.03665387765102002, 9.999999999998899e-05, 0.024475642786605523, 0.03210573461359523, 0.018847712328288413, 0.26330638845428134, 0.2618731844961917, 0.3023221214235182, 0.20398648060993674, 0.20172300148273614, 0.20282192984947445, 0.2958566255308913, 0.20992003771394352, 0.23859911772152442, 0.07411683454833018, 0.05425451576049978, 0.07951961289216758, 0.06525605431158565, 0.06417407542911246, 0.05399457254390361, 0.06117886233648584, 0.054555965817384866, 0.05974928664925805, 0.1394573287798052, 0.1327484967911594, 0.12205895382717413, 0.18457144661878344, 0.13833177742019265, 0.13073333297734457, 0.14575037717881623, 0.13832940538969396, 0.130639114042725, 0.18077882357087638, 0.18051692478838322, 0.18935818858721754, 0.17512210700839237, 0.1994497066030565, 0.16996156895888348, 0.20411917083030562, 0.20003826464957242, 0.19723147320819312, 0.13519232548899962, 0.12628596024183192, 0.15355331202673406, 0.1138461016205149, 0.15186591589499676, 0.1374884829117391, 0.14216462657907591, 0.15388490911802277, 0.16644077921866685, 0.15638378147887466, 0.17382728587427687, 0.16477286829428506, 0.18323294373500654, 0.15537204268947336, 0.15869702615534043, 0.18871609930258315, 0.17404464558750365, 0.16211446263857432, 0.15654363172342878, 0.16680590145277785, 0.1567158023543156, 0.1567100557803608, 0.15301278934461293, 0.15853855048831034, 0.1559227819745298, 0.1597965204873657, 0.14980283208055512, 0.14864541868817127, 0.16337412293018572, 0.12292236534987588, 0.3084430699191084, 0.1818330961836877, 0.16808907376987192, 0.12742923573702392, 0.22780489696294148, 0.22456939262651132, 0.26878398495503675, 0.17451378862523237, 0.15736303249423256, 0.16759220389700202, 0.1916210541230846, 0.11770585569235659, 0.18397797271901672, 0.14174623602126335, 0.17868326145408286, 0.1831696516879079, 0.1933451033201673, 0.19269451668519189, 0.1753616773490807, 0.17097332286992883, 0.1843841376463614, 0.17892732231460828, 0.17880842489826498, 0.18257257895182744, 0.06065795565017229, 0.05669177748394083, 0.0610559978686015, 0.0593572199986645, 0.06046944050334746, 0.05007633300129133, 0.07780563860071565, 0.05878922357133687, 0.05610430850905468]}, "mutation_prompt": null}
{"id": "ed8267a7-6ec4-4c52-ac2a-fabe69d5c16d", "solution": "import numpy as np\n\nclass AHPE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.7\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _evaluate_population(self, population, func):\n        return np.array([func(ind) for ind in population])\n\n    def _update_velocity(self, velocities, population, personal_best, global_best):\n        r1, r2 = np.random.rand(2, self.population_size, self.dim)\n        cognitive = self.c1 * r1 * (personal_best - population)\n        social = self.c2 * r2 * (global_best - population)\n        return velocities + cognitive + social\n\n    def _apply_bounds(self, population):\n        return np.clip(population, self.lower_bound, self.upper_bound)\n\n    def _differential_mutation(self, population, best_idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = population[indices]\n        mutant = a + self.mutation_factor * (b - c)\n        target = population[best_idx]\n        trial = np.where(np.random.rand(self.dim) < self.crossover_prob, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_value = self._evaluate_population(population, func)\n        \n        global_best_idx = np.argmin(personal_best_value)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_value[global_best_idx]\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            velocities = self._update_velocity(velocities, population, personal_best, global_best)\n            population = self._apply_bounds(population + velocities)\n\n            new_population_value = self._evaluate_population(population, func)\n            evaluations += self.population_size\n\n            for i in range(self.population_size):\n                if new_population_value[i] < personal_best_value[i]:\n                    personal_best[i] = population[i]\n                    personal_best_value[i] = new_population_value[i]\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n            # Differential Evolution step\n            for i in range(self.population_size):\n                trial = self._differential_mutation(population, i)\n                trial_value = func(trial)\n                evaluations += 1\n\n                if trial_value < personal_best_value[i]:\n                    population[i] = trial\n                    personal_best[i] = trial\n                    personal_best_value[i] = trial_value\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n                if evaluations >= self.budget:\n                    break\n        \n        return global_best", "name": "AHPE", "description": "Adaptive Hybrid Particle Evolution (AHPE) fuses concepts from Particle Swarm Optimization and Differential Evolution to dynamically adjust exploration and exploitation based on swarm diversity and population success.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "848b60b8-1e79-4fe2-8d47-c2b718158fc4", "metadata": {"aucs": [0.22211226226751046, 0.21986840014755016, 0.2963100959824455, 0.2643802287385909, 0.2696857303165686, 0.2730152487837104, 0.3283806325612689, 0.24810010481238465, 0.2417145847153197, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04800329129064462, 0.080363637242307, 0.05771329228247468, 0.06716040854003391, 0.04892114444775275, 0.071075081050605, 0.07068352602580275, 0.06465177209367134, 0.051119951543396436, 0.061189768551837886, 0.03776915709506179, 0.04048196341346322, 0.05941349219712444, 0.0520880020295883, 0.040756521351995034, 0.04555545843239417, 0.048380973212945766, 0.05466886501820212, 0.9836783223171812, 0.9680578262172431, 0.9794425170957711, 0.9698147990450061, 0.9767365784554304, 0.976925887572157, 0.9788280858948085, 0.9746936230539132, 0.9765260663991234, 0.12399512039805582, 0.11712582052290688, 0.05581303458868514, 0.14033998581991491, 0.0989188315359103, 0.149190773161755, 0.11191104257156126, 0.08652359070491489, 0.11762546683962427, 0.16609109912356235, 0.14248355543707947, 0.15871133971756557, 0.17781429871170262, 0.14136548530518267, 0.17402764358365963, 0.11074863593802964, 0.14890311350672436, 0.1811603298531017, 0.028589293817662065, 0.01525551788407431, 0.04203094636269511, 0.03174995527147617, 0.031083142637881256, 0.00746431091476929, 0.05013717122664163, 0.057323613369962945, 0.0672703284599504, 0.05373550284380546, 0.029890973528340692, 0.0007857070550620904, 0.04552429262527513, 0.003146714632559111, 0.08471960752272867, 0.0222783299266317, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05100410831322666, 0.011538761546511345, 0.02252302265142503, 0.06630421688987043, 0.049083359214261546, 0.020141025691745362, 0.009907963200590841, 0.03583608680340444, 0.02771055067172734, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002578526352997601, 0.011032091777774311, 0.01336498971514899, 0.01708359660364056, 0.03665387765102002, 9.999999999998899e-05, 0.024475642786605523, 0.03210573461359523, 0.018847712328288413, 0.26330638845428134, 0.2618731844961917, 0.3023221214235182, 0.20398648060993674, 0.20172300148273614, 0.20282192984947445, 0.2958566255308913, 0.20992003771394352, 0.23859911772152442, 0.07411683454833018, 0.05425451576049978, 0.07951961289216758, 0.06525605431158565, 0.06417407542911246, 0.05399457254390361, 0.06117886233648584, 0.054555965817384866, 0.05974928664925805, 0.1394573287798052, 0.1327484967911594, 0.12205895382717413, 0.18457144661878344, 0.13833177742019265, 0.13073333297734457, 0.14575037717881623, 0.13832940538969396, 0.130639114042725, 0.18077882357087638, 0.18051692478838322, 0.18935818858721754, 0.17512210700839237, 0.1994497066030565, 0.16996156895888348, 0.20411917083030562, 0.20003826464957242, 0.19723147320819312, 0.13519232548899962, 0.12628596024183192, 0.15355331202673406, 0.1138461016205149, 0.15186591589499676, 0.1374884829117391, 0.14216462657907591, 0.15388490911802277, 0.16644077921866685, 0.15638378147887466, 0.17382728587427687, 0.16477286829428506, 0.18323294373500654, 0.15537204268947336, 0.15869702615534043, 0.18871609930258315, 0.17404464558750365, 0.16211446263857432, 0.15654363172342878, 0.16680590145277785, 0.1567158023543156, 0.1567100557803608, 0.15301278934461293, 0.15853855048831034, 0.1559227819745298, 0.1597965204873657, 0.14980283208055512, 0.14864541868817127, 0.16337412293018572, 0.12292236534987588, 0.3084430699191084, 0.1818330961836877, 0.16808907376987192, 0.12742923573702392, 0.22780489696294148, 0.22456939262651132, 0.26878398495503675, 0.17451378862523237, 0.15736303249423256, 0.16759220389700202, 0.1916210541230846, 0.11770585569235659, 0.18397797271901672, 0.14174623602126335, 0.17868326145408286, 0.1831696516879079, 0.1933451033201673, 0.19269451668519189, 0.1753616773490807, 0.17097332286992883, 0.1843841376463614, 0.17892732231460828, 0.17880842489826498, 0.18257257895182744, 0.06065795565017229, 0.05669177748394083, 0.0610559978686015, 0.0593572199986645, 0.06046944050334746, 0.05007633300129133, 0.07780563860071565, 0.05878922357133687, 0.05610430850905468]}, "mutation_prompt": null}
{"id": "fa6e9679-582c-477f-a0cd-f2e8225cdc60", "solution": "import numpy as np\n\nclass AHPE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.7\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _evaluate_population(self, population, func):\n        return np.array([func(ind) for ind in population])\n\n    def _update_velocity(self, velocities, population, personal_best, global_best):\n        r1, r2 = np.random.rand(2, self.population_size, self.dim)\n        cognitive = self.c1 * r1 * (personal_best - population)\n        social = self.c2 * r2 * (global_best - population)\n        return velocities + cognitive + social\n\n    def _apply_bounds(self, population):\n        return np.clip(population, self.lower_bound, self.upper_bound)\n\n    def _differential_mutation(self, population, best_idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = population[indices]\n        mutant = a + self.mutation_factor * (b - c)\n        target = population[best_idx]\n        trial = np.where(np.random.rand(self.dim) < self.crossover_prob, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_value = self._evaluate_population(population, func)\n        \n        global_best_idx = np.argmin(personal_best_value)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_value[global_best_idx]\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            velocities = self._update_velocity(velocities, population, personal_best, global_best)\n            population = self._apply_bounds(population + velocities)\n\n            new_population_value = self._evaluate_population(population, func)\n            evaluations += self.population_size\n\n            for i in range(self.population_size):\n                if new_population_value[i] < personal_best_value[i]:\n                    personal_best[i] = population[i]\n                    personal_best_value[i] = new_population_value[i]\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n            # Differential Evolution step\n            for i in range(self.population_size):\n                trial = self._differential_mutation(population, i)\n                trial_value = func(trial)\n                evaluations += 1\n\n                if trial_value < personal_best_value[i]:\n                    population[i] = trial\n                    personal_best[i] = trial\n                    personal_best_value[i] = trial_value\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n                if evaluations >= self.budget:\n                    break\n        \n        return global_best", "name": "AHPE", "description": "Adaptive Hybrid Particle Evolution (AHPE) fuses concepts from Particle Swarm Optimization and Differential Evolution to dynamically adjust exploration and exploitation based on swarm diversity and population success.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "848b60b8-1e79-4fe2-8d47-c2b718158fc4", "metadata": {"aucs": [0.22211226226751046, 0.21986840014755016, 0.2963100959824455, 0.2643802287385909, 0.2696857303165686, 0.2730152487837104, 0.3283806325612689, 0.24810010481238465, 0.2417145847153197, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04800329129064462, 0.080363637242307, 0.05771329228247468, 0.06716040854003391, 0.04892114444775275, 0.071075081050605, 0.07068352602580275, 0.06465177209367134, 0.051119951543396436, 0.061189768551837886, 0.03776915709506179, 0.04048196341346322, 0.05941349219712444, 0.0520880020295883, 0.040756521351995034, 0.04555545843239417, 0.048380973212945766, 0.05466886501820212, 0.9836783223171812, 0.9680578262172431, 0.9794425170957711, 0.9698147990450061, 0.9767365784554304, 0.976925887572157, 0.9788280858948085, 0.9746936230539132, 0.9765260663991234, 0.12399512039805582, 0.11712582052290688, 0.05581303458868514, 0.14033998581991491, 0.0989188315359103, 0.149190773161755, 0.11191104257156126, 0.08652359070491489, 0.11762546683962427, 0.16609109912356235, 0.14248355543707947, 0.15871133971756557, 0.17781429871170262, 0.14136548530518267, 0.17402764358365963, 0.11074863593802964, 0.14890311350672436, 0.1811603298531017, 0.028589293817662065, 0.01525551788407431, 0.04203094636269511, 0.03174995527147617, 0.031083142637881256, 0.00746431091476929, 0.05013717122664163, 0.057323613369962945, 0.0672703284599504, 0.05373550284380546, 0.029890973528340692, 0.0007857070550620904, 0.04552429262527513, 0.003146714632559111, 0.08471960752272867, 0.0222783299266317, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05100410831322666, 0.011538761546511345, 0.02252302265142503, 0.06630421688987043, 0.049083359214261546, 0.020141025691745362, 0.009907963200590841, 0.03583608680340444, 0.02771055067172734, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002578526352997601, 0.011032091777774311, 0.01336498971514899, 0.01708359660364056, 0.03665387765102002, 9.999999999998899e-05, 0.024475642786605523, 0.03210573461359523, 0.018847712328288413, 0.26330638845428134, 0.2618731844961917, 0.3023221214235182, 0.20398648060993674, 0.20172300148273614, 0.20282192984947445, 0.2958566255308913, 0.20992003771394352, 0.23859911772152442, 0.07411683454833018, 0.05425451576049978, 0.07951961289216758, 0.06525605431158565, 0.06417407542911246, 0.05399457254390361, 0.06117886233648584, 0.054555965817384866, 0.05974928664925805, 0.1394573287798052, 0.1327484967911594, 0.12205895382717413, 0.18457144661878344, 0.13833177742019265, 0.13073333297734457, 0.14575037717881623, 0.13832940538969396, 0.130639114042725, 0.18077882357087638, 0.18051692478838322, 0.18935818858721754, 0.17512210700839237, 0.1994497066030565, 0.16996156895888348, 0.20411917083030562, 0.20003826464957242, 0.19723147320819312, 0.13519232548899962, 0.12628596024183192, 0.15355331202673406, 0.1138461016205149, 0.15186591589499676, 0.1374884829117391, 0.14216462657907591, 0.15388490911802277, 0.16644077921866685, 0.15638378147887466, 0.17382728587427687, 0.16477286829428506, 0.18323294373500654, 0.15537204268947336, 0.15869702615534043, 0.18871609930258315, 0.17404464558750365, 0.16211446263857432, 0.15654363172342878, 0.16680590145277785, 0.1567158023543156, 0.1567100557803608, 0.15301278934461293, 0.15853855048831034, 0.1559227819745298, 0.1597965204873657, 0.14980283208055512, 0.14864541868817127, 0.16337412293018572, 0.12292236534987588, 0.3084430699191084, 0.1818330961836877, 0.16808907376987192, 0.12742923573702392, 0.22780489696294148, 0.22456939262651132, 0.26878398495503675, 0.17451378862523237, 0.15736303249423256, 0.16759220389700202, 0.1916210541230846, 0.11770585569235659, 0.18397797271901672, 0.14174623602126335, 0.17868326145408286, 0.1831696516879079, 0.1933451033201673, 0.19269451668519189, 0.1753616773490807, 0.17097332286992883, 0.1843841376463614, 0.17892732231460828, 0.17880842489826498, 0.18257257895182744, 0.06065795565017229, 0.05669177748394083, 0.0610559978686015, 0.0593572199986645, 0.06046944050334746, 0.05007633300129133, 0.07780563860071565, 0.05878922357133687, 0.05610430850905468]}, "mutation_prompt": null}
{"id": "2cef457b-972b-4e41-b22b-640f44b7d3a1", "solution": "import numpy as np\n\nclass AHPE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.7\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _evaluate_population(self, population, func):\n        return np.array([func(ind) for ind in population])\n\n    def _update_velocity(self, velocities, population, personal_best, global_best):\n        r1, r2 = np.random.rand(2, self.population_size, self.dim)\n        cognitive = self.c1 * r1 * (personal_best - population)\n        social = self.c2 * r2 * (global_best - population)\n        return velocities + cognitive + social\n\n    def _apply_bounds(self, population):\n        return np.clip(population, self.lower_bound, self.upper_bound)\n\n    def _differential_mutation(self, population, best_idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = population[indices]\n        mutant = a + self.mutation_factor * (b - c)\n        target = population[best_idx]\n        trial = np.where(np.random.rand(self.dim) < self.crossover_prob, mutant, target)\n        return trial\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_value = self._evaluate_population(population, func)\n        \n        global_best_idx = np.argmin(personal_best_value)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_value[global_best_idx]\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            velocities = self._update_velocity(velocities, population, personal_best, global_best)\n            population = self._apply_bounds(population + velocities)\n\n            new_population_value = self._evaluate_population(population, func)\n            evaluations += self.population_size\n\n            for i in range(self.population_size):\n                if new_population_value[i] < personal_best_value[i]:\n                    personal_best[i] = population[i]\n                    personal_best_value[i] = new_population_value[i]\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n            # Differential Evolution step\n            for i in range(self.population_size):\n                trial = self._differential_mutation(population, i)\n                trial_value = func(trial)\n                evaluations += 1\n\n                if trial_value < personal_best_value[i]:\n                    population[i] = trial\n                    personal_best[i] = trial\n                    personal_best_value[i] = trial_value\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n                if evaluations >= self.budget:\n                    break\n        \n        return global_best", "name": "AHPE", "description": "Adaptive Hybrid Particle Evolution (AHPE) fuses concepts from Particle Swarm Optimization and Differential Evolution to dynamically adjust exploration and exploitation based on swarm diversity and population success.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "848b60b8-1e79-4fe2-8d47-c2b718158fc4", "metadata": {"aucs": [0.22211226226751046, 0.21986840014755016, 0.2963100959824455, 0.2643802287385909, 0.2696857303165686, 0.2730152487837104, 0.3283806325612689, 0.24810010481238465, 0.2417145847153197, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04800329129064462, 0.080363637242307, 0.05771329228247468, 0.06716040854003391, 0.04892114444775275, 0.071075081050605, 0.07068352602580275, 0.06465177209367134, 0.051119951543396436, 0.061189768551837886, 0.03776915709506179, 0.04048196341346322, 0.05941349219712444, 0.0520880020295883, 0.040756521351995034, 0.04555545843239417, 0.048380973212945766, 0.05466886501820212, 0.9836783223171812, 0.9680578262172431, 0.9794425170957711, 0.9698147990450061, 0.9767365784554304, 0.976925887572157, 0.9788280858948085, 0.9746936230539132, 0.9765260663991234, 0.12399512039805582, 0.11712582052290688, 0.05581303458868514, 0.14033998581991491, 0.0989188315359103, 0.149190773161755, 0.11191104257156126, 0.08652359070491489, 0.11762546683962427, 0.16609109912356235, 0.14248355543707947, 0.15871133971756557, 0.17781429871170262, 0.14136548530518267, 0.17402764358365963, 0.11074863593802964, 0.14890311350672436, 0.1811603298531017, 0.028589293817662065, 0.01525551788407431, 0.04203094636269511, 0.03174995527147617, 0.031083142637881256, 0.00746431091476929, 0.05013717122664163, 0.057323613369962945, 0.0672703284599504, 0.05373550284380546, 0.029890973528340692, 0.0007857070550620904, 0.04552429262527513, 0.003146714632559111, 0.08471960752272867, 0.0222783299266317, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05100410831322666, 0.011538761546511345, 0.02252302265142503, 0.06630421688987043, 0.049083359214261546, 0.020141025691745362, 0.009907963200590841, 0.03583608680340444, 0.02771055067172734, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0002578526352997601, 0.011032091777774311, 0.01336498971514899, 0.01708359660364056, 0.03665387765102002, 9.999999999998899e-05, 0.024475642786605523, 0.03210573461359523, 0.018847712328288413, 0.26330638845428134, 0.2618731844961917, 0.3023221214235182, 0.20398648060993674, 0.20172300148273614, 0.20282192984947445, 0.2958566255308913, 0.20992003771394352, 0.23859911772152442, 0.07411683454833018, 0.05425451576049978, 0.07951961289216758, 0.06525605431158565, 0.06417407542911246, 0.05399457254390361, 0.06117886233648584, 0.054555965817384866, 0.05974928664925805, 0.1394573287798052, 0.1327484967911594, 0.12205895382717413, 0.18457144661878344, 0.13833177742019265, 0.13073333297734457, 0.14575037717881623, 0.13832940538969396, 0.130639114042725, 0.18077882357087638, 0.18051692478838322, 0.18935818858721754, 0.17512210700839237, 0.1994497066030565, 0.16996156895888348, 0.20411917083030562, 0.20003826464957242, 0.19723147320819312, 0.13519232548899962, 0.12628596024183192, 0.15355331202673406, 0.1138461016205149, 0.15186591589499676, 0.1374884829117391, 0.14216462657907591, 0.15388490911802277, 0.16644077921866685, 0.15638378147887466, 0.17382728587427687, 0.16477286829428506, 0.18323294373500654, 0.15537204268947336, 0.15869702615534043, 0.18871609930258315, 0.17404464558750365, 0.16211446263857432, 0.15654363172342878, 0.16680590145277785, 0.1567158023543156, 0.1567100557803608, 0.15301278934461293, 0.15853855048831034, 0.1559227819745298, 0.1597965204873657, 0.14980283208055512, 0.14864541868817127, 0.16337412293018572, 0.12292236534987588, 0.3084430699191084, 0.1818330961836877, 0.16808907376987192, 0.12742923573702392, 0.22780489696294148, 0.22456939262651132, 0.26878398495503675, 0.17451378862523237, 0.15736303249423256, 0.16759220389700202, 0.1916210541230846, 0.11770585569235659, 0.18397797271901672, 0.14174623602126335, 0.17868326145408286, 0.1831696516879079, 0.1933451033201673, 0.19269451668519189, 0.1753616773490807, 0.17097332286992883, 0.1843841376463614, 0.17892732231460828, 0.17880842489826498, 0.18257257895182744, 0.06065795565017229, 0.05669177748394083, 0.0610559978686015, 0.0593572199986645, 0.06046944050334746, 0.05007633300129133, 0.07780563860071565, 0.05878922357133687, 0.05610430850905468]}, "mutation_prompt": null}
{"id": "21c0e717-3be7-4538-90a8-3f84512ce9cb", "solution": "import numpy as np\n\nclass OAHPE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.7\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _evaluate_population(self, population, func):\n        return np.array([func(ind) for ind in population])\n\n    def _update_velocity(self, velocities, population, personal_best, global_best):\n        r1, r2 = np.random.rand(2, self.population_size, self.dim)\n        cognitive = self.c1 * r1 * (personal_best - population)\n        social = self.c2 * r2 * (global_best - population)\n        return velocities + cognitive + social\n\n    def _apply_bounds(self, population):\n        np.clip(population, self.lower_bound, self.upper_bound, out=population)\n\n    def _differential_mutation(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = population[indices]\n        mutant = a + self.mutation_factor * (b - c)\n        np.clip(mutant, self.lower_bound, self.upper_bound, out=mutant)\n        trial = np.where(np.random.rand(self.dim) < self.crossover_prob, mutant, population[idx])\n        np.clip(trial, self.lower_bound, self.upper_bound, out=trial)\n        return trial\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_value = self._evaluate_population(population, func)\n        \n        global_best_idx = np.argmin(personal_best_value)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_value[global_best_idx]\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            velocities = self._update_velocity(velocities, population, personal_best, global_best)\n            population += velocities\n            self._apply_bounds(population)\n\n            new_population_value = self._evaluate_population(population, func)\n            evaluations += self.population_size\n\n            for i in range(self.population_size):\n                if new_population_value[i] < personal_best_value[i]:\n                    personal_best[i] = population[i]\n                    personal_best_value[i] = new_population_value[i]\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n            for i in range(self.population_size):\n                trial = self._differential_mutation(population, i)\n                trial_value = func(trial)\n                evaluations += 1\n\n                if trial_value < personal_best_value[i]:\n                    population[i] = trial\n                    personal_best[i] = trial\n                    personal_best_value[i] = trial_value\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n                if evaluations >= self.budget:\n                    break\n        \n        return global_best", "name": "OAHPE", "description": "Optimized Adaptive Hybrid Particle Evolution (OAHPE) introduces efficient trial selection and reduced evaluations by merging velocity updates and differential mutation.", "configspace": "", "generation": 22, "fitness": 0.1463230892755794, "feedback": "The algorithm OAHPE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.19.", "error": "", "parent_id": "848b60b8-1e79-4fe2-8d47-c2b718158fc4", "metadata": {"aucs": [0.2221500879841256, 0.24307259200235876, 0.22753088061095816, 0.24857692597636427, 0.29601770125445637, 0.2804718430029084, 0.24358382528404932, 0.26508987080283997, 0.24258775345289907, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.082227127837323, 0.06183473289079067, 0.05657350636876779, 0.05784421516024818, 0.06346659854250225, 0.058558481958294606, 0.06272164829207394, 0.0667370890451271, 0.07983163563661089, 0.061189768551837886, 0.03401878213401155, 0.04019515726740086, 0.056204836077746734, 0.0475351947083098, 0.03985620650560395, 0.05748214823134146, 0.056339425010037525, 0.05542765240730274, 0.9836783223171812, 0.9677620860375415, 0.9794658301285181, 0.9690396055130268, 0.9767353672763911, 0.9684262449856995, 0.9787023398508176, 0.9746929135351794, 0.9755335618149915, 0.11220471057429382, 0.13300640995429636, 0.07484007126704195, 0.11187042710715744, 0.10998656109210136, 0.14037184893890076, 0.08615967745064412, 0.1022461273459827, 0.07646862023614198, 0.16609109912356235, 0.1405845625712594, 0.2025679442189473, 0.18615798466411448, 0.16665972691115383, 0.17518425171499497, 0.1345484664884785, 0.1743948022662516, 0.15685454085192319, 0.08205094156632153, 0.016622670644971582, 0.021950752598170253, 0.0379343016070689, 9.999999999998899e-05, 0.04978144099748261, 0.0814465816630523, 0.01939074527113227, 0.0517184424462197, 0.05373550284380546, 0.0585752738814157, 0.0005213772220001855, 0.04552429262527513, 0.004998497286513692, 0.08471960752272867, 0.0222783299266317, 0.0008080630453800586, 0.002805637690122653, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02664524528492007, 0.013623651590440433, 0.05204337835841366, 0.06630421688987043, 9.999999999998899e-05, 0.021948552249879683, 0.05375178075262388, 0.04541396083542715, 0.030733292275746837, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03176961451513305, 0.002941253580335812, 9.999999999998899e-05, 0.019111086059913074, 9.999999999998899e-05, 0.00031990107075086094, 0.03050014577305593, 0.03320293260329177, 0.024935309574795617, 0.27190800081241173, 0.2700665354644808, 0.2841595412431098, 0.20506060400710335, 0.2829855485902524, 0.24439850404544528, 0.24150191632824636, 0.21145360279107484, 0.25293214258293717, 0.06450971297520569, 0.05915195182504085, 0.06505834954339973, 0.05940480187459651, 0.0666368370171676, 0.06418051225335553, 0.04843184410425205, 0.0698931085059048, 0.05754051889579026, 0.1524170121415398, 0.15840403750402798, 0.14232447712143625, 0.17623026876365855, 0.1836377624130523, 0.1575370316483664, 0.17989141420631627, 0.14702662196205396, 0.1533234727297368, 0.1862822329694631, 0.19782961902015872, 0.18935818858721754, 0.19418964140948614, 0.19675604273380887, 0.16757549957091145, 0.19398286449366908, 0.20298787293703102, 0.19110072176323334, 0.13237224142120774, 0.12380745289889206, 0.14490108750904585, 0.12768798996087516, 0.13944662118405415, 0.1462526744001027, 0.15773730965906674, 0.16887967620644972, 0.12445639924504626, 0.15636928487862656, 0.15875296630320468, 0.19003915578761876, 0.15575853469084433, 0.156805658482577, 0.15869702615534043, 0.18871609930258315, 0.17853791915914352, 0.17062911396536873, 0.15654363172342878, 0.17401775063074287, 0.1567158023543156, 0.16536016512961982, 0.15301278934461293, 0.15853855048831034, 0.16441175747354886, 0.15337321282625305, 0.16920102317497954, 0.31098446220579024, 0.16386119318128456, 0.14790765514677573, 0.22666368519166458, 0.16399162206845197, 0.17842294459770947, 0.13093829633465526, 0.2572849545140916, 0.26408971017659166, 0.2827735889004709, 0.19029280301853357, 0.16033821630678735, 0.17019810746580444, 0.19444799727075657, 0.13938141572985097, 0.1870473501264055, 0.12613439228450551, 0.22586456954817336, 0.22176375806176185, 0.1896854841383684, 0.18965484687636291, 0.17690255866849802, 0.1891986570962516, 0.17388360028403427, 0.18730901707198633, 0.18273772054235604, 0.17811507009536454, 0.062474652646362094, 0.06038076551325178, 0.05905372775085127, 0.05119338956613351, 0.054899809793484966, 0.054712232458198895, 0.07780563860071565, 0.06507852331440322, 0.06659758630188795]}, "mutation_prompt": null}
{"id": "af1c86a1-4982-4348-abe3-a8360d55329d", "solution": "import numpy as np\n\nclass OAHPE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.7\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _evaluate_population(self, population, func):\n        return np.array([func(ind) for ind in population])\n\n    def _update_velocity(self, velocities, population, personal_best, global_best):\n        r1, r2 = np.random.rand(2, self.population_size, self.dim)\n        cognitive = self.c1 * r1 * (personal_best - population)\n        social = self.c2 * r2 * (global_best - population)\n        return velocities + cognitive + social\n\n    def _apply_bounds(self, population):\n        np.clip(population, self.lower_bound, self.upper_bound, out=population)\n\n    def _differential_mutation(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = population[indices]\n        mutant = a + self.mutation_factor * (b - c)\n        np.clip(mutant, self.lower_bound, self.upper_bound, out=mutant)\n        trial = np.where(np.random.rand(self.dim) < self.crossover_prob, mutant, population[idx])\n        np.clip(trial, self.lower_bound, self.upper_bound, out=trial)\n        return trial\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_value = self._evaluate_population(population, func)\n        \n        global_best_idx = np.argmin(personal_best_value)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_value[global_best_idx]\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            velocities = self._update_velocity(velocities, population, personal_best, global_best)\n            population += velocities\n            self._apply_bounds(population)\n\n            new_population_value = self._evaluate_population(population, func)\n            evaluations += self.population_size\n\n            for i in range(self.population_size):\n                if new_population_value[i] < personal_best_value[i]:\n                    personal_best[i] = population[i]\n                    personal_best_value[i] = new_population_value[i]\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n            for i in range(self.population_size):\n                trial = self._differential_mutation(population, i)\n                trial_value = func(trial)\n                evaluations += 1\n\n                if trial_value < personal_best_value[i]:\n                    population[i] = trial\n                    personal_best[i] = trial\n                    personal_best_value[i] = trial_value\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n                if evaluations >= self.budget:\n                    break\n        \n        return global_best", "name": "OAHPE", "description": "Optimized Adaptive Hybrid Particle Evolution (OAHPE) introduces efficient trial selection and reduced evaluations by merging velocity updates and differential mutation.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "21c0e717-3be7-4538-90a8-3f84512ce9cb", "metadata": {"aucs": [0.2221500879841256, 0.24307259200235876, 0.22753088061095816, 0.24857692597636427, 0.29601770125445637, 0.2804718430029084, 0.24358382528404932, 0.26508987080283997, 0.24258775345289907, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.082227127837323, 0.06183473289079067, 0.05657350636876779, 0.05784421516024818, 0.06346659854250225, 0.058558481958294606, 0.06272164829207394, 0.0667370890451271, 0.07983163563661089, 0.061189768551837886, 0.03401878213401155, 0.04019515726740086, 0.056204836077746734, 0.0475351947083098, 0.03985620650560395, 0.05748214823134146, 0.056339425010037525, 0.05542765240730274, 0.9836783223171812, 0.9677620860375415, 0.9794658301285181, 0.9690396055130268, 0.9767353672763911, 0.9684262449856995, 0.9787023398508176, 0.9746929135351794, 0.9755335618149915, 0.11220471057429382, 0.13300640995429636, 0.07484007126704195, 0.11187042710715744, 0.10998656109210136, 0.14037184893890076, 0.08615967745064412, 0.1022461273459827, 0.07646862023614198, 0.16609109912356235, 0.1405845625712594, 0.2025679442189473, 0.18615798466411448, 0.16665972691115383, 0.17518425171499497, 0.1345484664884785, 0.1743948022662516, 0.15685454085192319, 0.08205094156632153, 0.016622670644971582, 0.021950752598170253, 0.0379343016070689, 9.999999999998899e-05, 0.04978144099748261, 0.0814465816630523, 0.01939074527113227, 0.0517184424462197, 0.05373550284380546, 0.0585752738814157, 0.0005213772220001855, 0.04552429262527513, 0.004998497286513692, 0.08471960752272867, 0.0222783299266317, 0.0008080630453800586, 0.002805637690122653, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02664524528492007, 0.013623651590440433, 0.05204337835841366, 0.06630421688987043, 9.999999999998899e-05, 0.021948552249879683, 0.05375178075262388, 0.04541396083542715, 0.030733292275746837, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03176961451513305, 0.002941253580335812, 9.999999999998899e-05, 0.019111086059913074, 9.999999999998899e-05, 0.00031990107075086094, 0.03050014577305593, 0.03320293260329177, 0.024935309574795617, 0.27190800081241173, 0.2700665354644808, 0.2841595412431098, 0.20506060400710335, 0.2829855485902524, 0.24439850404544528, 0.24150191632824636, 0.21145360279107484, 0.25293214258293717, 0.06450971297520569, 0.05915195182504085, 0.06505834954339973, 0.05940480187459651, 0.0666368370171676, 0.06418051225335553, 0.04843184410425205, 0.0698931085059048, 0.05754051889579026, 0.1524170121415398, 0.15840403750402798, 0.14232447712143625, 0.17623026876365855, 0.1836377624130523, 0.1575370316483664, 0.17989141420631627, 0.14702662196205396, 0.1533234727297368, 0.1862822329694631, 0.19782961902015872, 0.18935818858721754, 0.19418964140948614, 0.19675604273380887, 0.16757549957091145, 0.19398286449366908, 0.20298787293703102, 0.19110072176323334, 0.13237224142120774, 0.12380745289889206, 0.14490108750904585, 0.12768798996087516, 0.13944662118405415, 0.1462526744001027, 0.15773730965906674, 0.16887967620644972, 0.12445639924504626, 0.15636928487862656, 0.15875296630320468, 0.19003915578761876, 0.15575853469084433, 0.156805658482577, 0.15869702615534043, 0.18871609930258315, 0.17853791915914352, 0.17062911396536873, 0.15654363172342878, 0.17401775063074287, 0.1567158023543156, 0.16536016512961982, 0.15301278934461293, 0.15853855048831034, 0.16441175747354886, 0.15337321282625305, 0.16920102317497954, 0.31098446220579024, 0.16386119318128456, 0.14790765514677573, 0.22666368519166458, 0.16399162206845197, 0.17842294459770947, 0.13093829633465526, 0.2572849545140916, 0.26408971017659166, 0.2827735889004709, 0.19029280301853357, 0.16033821630678735, 0.17019810746580444, 0.19444799727075657, 0.13938141572985097, 0.1870473501264055, 0.12613439228450551, 0.22586456954817336, 0.22176375806176185, 0.1896854841383684, 0.18965484687636291, 0.17690255866849802, 0.1891986570962516, 0.17388360028403427, 0.18730901707198633, 0.18273772054235604, 0.17811507009536454, 0.062474652646362094, 0.06038076551325178, 0.05905372775085127, 0.05119338956613351, 0.054899809793484966, 0.054712232458198895, 0.07780563860071565, 0.06507852331440322, 0.06659758630188795]}, "mutation_prompt": null}
{"id": "cdda9914-8a52-4dc8-9f4f-53407ec6f006", "solution": "import numpy as np\n\nclass OAHPE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.7\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _evaluate_population(self, population, func):\n        return np.array([func(ind) for ind in population])\n\n    def _update_velocity(self, velocities, population, personal_best, global_best):\n        r1, r2 = np.random.rand(2, self.population_size, self.dim)\n        cognitive = self.c1 * r1 * (personal_best - population)\n        social = self.c2 * r2 * (global_best - population)\n        return velocities + cognitive + social\n\n    def _apply_bounds(self, population):\n        np.clip(population, self.lower_bound, self.upper_bound, out=population)\n\n    def _differential_mutation(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = population[indices]\n        mutant = a + self.mutation_factor * (b - c)\n        np.clip(mutant, self.lower_bound, self.upper_bound, out=mutant)\n        trial = np.where(np.random.rand(self.dim) < self.crossover_prob, mutant, population[idx])\n        np.clip(trial, self.lower_bound, self.upper_bound, out=trial)\n        return trial\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_value = self._evaluate_population(population, func)\n        \n        global_best_idx = np.argmin(personal_best_value)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_value[global_best_idx]\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            velocities = self._update_velocity(velocities, population, personal_best, global_best)\n            population += velocities\n            self._apply_bounds(population)\n\n            new_population_value = self._evaluate_population(population, func)\n            evaluations += self.population_size\n\n            for i in range(self.population_size):\n                if new_population_value[i] < personal_best_value[i]:\n                    personal_best[i] = population[i]\n                    personal_best_value[i] = new_population_value[i]\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n            for i in range(self.population_size):\n                trial = self._differential_mutation(population, i)\n                trial_value = func(trial)\n                evaluations += 1\n\n                if trial_value < personal_best_value[i]:\n                    population[i] = trial\n                    personal_best[i] = trial\n                    personal_best_value[i] = trial_value\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n                if evaluations >= self.budget:\n                    break\n        \n        return global_best", "name": "OAHPE", "description": "Optimized Adaptive Hybrid Particle Evolution (OAHPE) introduces efficient trial selection and reduced evaluations by merging velocity updates and differential mutation.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "21c0e717-3be7-4538-90a8-3f84512ce9cb", "metadata": {"aucs": [0.2221500879841256, 0.24307259200235876, 0.22753088061095816, 0.24857692597636427, 0.29601770125445637, 0.2804718430029084, 0.24358382528404932, 0.26508987080283997, 0.24258775345289907, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.082227127837323, 0.06183473289079067, 0.05657350636876779, 0.05784421516024818, 0.06346659854250225, 0.058558481958294606, 0.06272164829207394, 0.0667370890451271, 0.07983163563661089, 0.061189768551837886, 0.03401878213401155, 0.04019515726740086, 0.056204836077746734, 0.0475351947083098, 0.03985620650560395, 0.05748214823134146, 0.056339425010037525, 0.05542765240730274, 0.9836783223171812, 0.9677620860375415, 0.9794658301285181, 0.9690396055130268, 0.9767353672763911, 0.9684262449856995, 0.9787023398508176, 0.9746929135351794, 0.9755335618149915, 0.11220471057429382, 0.13300640995429636, 0.07484007126704195, 0.11187042710715744, 0.10998656109210136, 0.14037184893890076, 0.08615967745064412, 0.1022461273459827, 0.07646862023614198, 0.16609109912356235, 0.1405845625712594, 0.2025679442189473, 0.18615798466411448, 0.16665972691115383, 0.17518425171499497, 0.1345484664884785, 0.1743948022662516, 0.15685454085192319, 0.08205094156632153, 0.016622670644971582, 0.021950752598170253, 0.0379343016070689, 9.999999999998899e-05, 0.04978144099748261, 0.0814465816630523, 0.01939074527113227, 0.0517184424462197, 0.05373550284380546, 0.0585752738814157, 0.0005213772220001855, 0.04552429262527513, 0.004998497286513692, 0.08471960752272867, 0.0222783299266317, 0.0008080630453800586, 0.002805637690122653, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02664524528492007, 0.013623651590440433, 0.05204337835841366, 0.06630421688987043, 9.999999999998899e-05, 0.021948552249879683, 0.05375178075262388, 0.04541396083542715, 0.030733292275746837, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03176961451513305, 0.002941253580335812, 9.999999999998899e-05, 0.019111086059913074, 9.999999999998899e-05, 0.00031990107075086094, 0.03050014577305593, 0.03320293260329177, 0.024935309574795617, 0.27190800081241173, 0.2700665354644808, 0.2841595412431098, 0.20506060400710335, 0.2829855485902524, 0.24439850404544528, 0.24150191632824636, 0.21145360279107484, 0.25293214258293717, 0.06450971297520569, 0.05915195182504085, 0.06505834954339973, 0.05940480187459651, 0.0666368370171676, 0.06418051225335553, 0.04843184410425205, 0.0698931085059048, 0.05754051889579026, 0.1524170121415398, 0.15840403750402798, 0.14232447712143625, 0.17623026876365855, 0.1836377624130523, 0.1575370316483664, 0.17989141420631627, 0.14702662196205396, 0.1533234727297368, 0.1862822329694631, 0.19782961902015872, 0.18935818858721754, 0.19418964140948614, 0.19675604273380887, 0.16757549957091145, 0.19398286449366908, 0.20298787293703102, 0.19110072176323334, 0.13237224142120774, 0.12380745289889206, 0.14490108750904585, 0.12768798996087516, 0.13944662118405415, 0.1462526744001027, 0.15773730965906674, 0.16887967620644972, 0.12445639924504626, 0.15636928487862656, 0.15875296630320468, 0.19003915578761876, 0.15575853469084433, 0.156805658482577, 0.15869702615534043, 0.18871609930258315, 0.17853791915914352, 0.17062911396536873, 0.15654363172342878, 0.17401775063074287, 0.1567158023543156, 0.16536016512961982, 0.15301278934461293, 0.15853855048831034, 0.16441175747354886, 0.15337321282625305, 0.16920102317497954, 0.31098446220579024, 0.16386119318128456, 0.14790765514677573, 0.22666368519166458, 0.16399162206845197, 0.17842294459770947, 0.13093829633465526, 0.2572849545140916, 0.26408971017659166, 0.2827735889004709, 0.19029280301853357, 0.16033821630678735, 0.17019810746580444, 0.19444799727075657, 0.13938141572985097, 0.1870473501264055, 0.12613439228450551, 0.22586456954817336, 0.22176375806176185, 0.1896854841383684, 0.18965484687636291, 0.17690255866849802, 0.1891986570962516, 0.17388360028403427, 0.18730901707198633, 0.18273772054235604, 0.17811507009536454, 0.062474652646362094, 0.06038076551325178, 0.05905372775085127, 0.05119338956613351, 0.054899809793484966, 0.054712232458198895, 0.07780563860071565, 0.06507852331440322, 0.06659758630188795]}, "mutation_prompt": null}
{"id": "86ae1d6b-a911-4ad6-9bb2-ce74d347acda", "solution": "import numpy as np\n\nclass OAHPE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.7\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _evaluate_population(self, population, func):\n        return np.array([func(ind) for ind in population])\n\n    def _update_velocity(self, velocities, population, personal_best, global_best):\n        r1, r2 = np.random.rand(2, self.population_size, self.dim)\n        cognitive = self.c1 * r1 * (personal_best - population)\n        social = self.c2 * r2 * (global_best - population)\n        return velocities + cognitive + social\n\n    def _apply_bounds(self, population):\n        np.clip(population, self.lower_bound, self.upper_bound, out=population)\n\n    def _differential_mutation(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = population[indices]\n        mutant = a + self.mutation_factor * (b - c)\n        np.clip(mutant, self.lower_bound, self.upper_bound, out=mutant)\n        trial = np.where(np.random.rand(self.dim) < self.crossover_prob, mutant, population[idx])\n        np.clip(trial, self.lower_bound, self.upper_bound, out=trial)\n        return trial\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_value = self._evaluate_population(population, func)\n        \n        global_best_idx = np.argmin(personal_best_value)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_value[global_best_idx]\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            velocities = self._update_velocity(velocities, population, personal_best, global_best)\n            population += velocities\n            self._apply_bounds(population)\n\n            new_population_value = self._evaluate_population(population, func)\n            evaluations += self.population_size\n\n            for i in range(self.population_size):\n                if new_population_value[i] < personal_best_value[i]:\n                    personal_best[i] = population[i]\n                    personal_best_value[i] = new_population_value[i]\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n            for i in range(self.population_size):\n                trial = self._differential_mutation(population, i)\n                trial_value = func(trial)\n                evaluations += 1\n\n                if trial_value < personal_best_value[i]:\n                    population[i] = trial\n                    personal_best[i] = trial\n                    personal_best_value[i] = trial_value\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n                if evaluations >= self.budget:\n                    break\n        \n        return global_best", "name": "OAHPE", "description": "Optimized Adaptive Hybrid Particle Evolution (OAHPE) introduces efficient trial selection and reduced evaluations by merging velocity updates and differential mutation.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "21c0e717-3be7-4538-90a8-3f84512ce9cb", "metadata": {"aucs": [0.2221500879841256, 0.24307259200235876, 0.22753088061095816, 0.24857692597636427, 0.29601770125445637, 0.2804718430029084, 0.24358382528404932, 0.26508987080283997, 0.24258775345289907, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.082227127837323, 0.06183473289079067, 0.05657350636876779, 0.05784421516024818, 0.06346659854250225, 0.058558481958294606, 0.06272164829207394, 0.0667370890451271, 0.07983163563661089, 0.061189768551837886, 0.03401878213401155, 0.04019515726740086, 0.056204836077746734, 0.0475351947083098, 0.03985620650560395, 0.05748214823134146, 0.056339425010037525, 0.05542765240730274, 0.9836783223171812, 0.9677620860375415, 0.9794658301285181, 0.9690396055130268, 0.9767353672763911, 0.9684262449856995, 0.9787023398508176, 0.9746929135351794, 0.9755335618149915, 0.11220471057429382, 0.13300640995429636, 0.07484007126704195, 0.11187042710715744, 0.10998656109210136, 0.14037184893890076, 0.08615967745064412, 0.1022461273459827, 0.07646862023614198, 0.16609109912356235, 0.1405845625712594, 0.2025679442189473, 0.18615798466411448, 0.16665972691115383, 0.17518425171499497, 0.1345484664884785, 0.1743948022662516, 0.15685454085192319, 0.08205094156632153, 0.016622670644971582, 0.021950752598170253, 0.0379343016070689, 9.999999999998899e-05, 0.04978144099748261, 0.0814465816630523, 0.01939074527113227, 0.0517184424462197, 0.05373550284380546, 0.0585752738814157, 0.0005213772220001855, 0.04552429262527513, 0.004998497286513692, 0.08471960752272867, 0.0222783299266317, 0.0008080630453800586, 0.002805637690122653, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02664524528492007, 0.013623651590440433, 0.05204337835841366, 0.06630421688987043, 9.999999999998899e-05, 0.021948552249879683, 0.05375178075262388, 0.04541396083542715, 0.030733292275746837, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03176961451513305, 0.002941253580335812, 9.999999999998899e-05, 0.019111086059913074, 9.999999999998899e-05, 0.00031990107075086094, 0.03050014577305593, 0.03320293260329177, 0.024935309574795617, 0.27190800081241173, 0.2700665354644808, 0.2841595412431098, 0.20506060400710335, 0.2829855485902524, 0.24439850404544528, 0.24150191632824636, 0.21145360279107484, 0.25293214258293717, 0.06450971297520569, 0.05915195182504085, 0.06505834954339973, 0.05940480187459651, 0.0666368370171676, 0.06418051225335553, 0.04843184410425205, 0.0698931085059048, 0.05754051889579026, 0.1524170121415398, 0.15840403750402798, 0.14232447712143625, 0.17623026876365855, 0.1836377624130523, 0.1575370316483664, 0.17989141420631627, 0.14702662196205396, 0.1533234727297368, 0.1862822329694631, 0.19782961902015872, 0.18935818858721754, 0.19418964140948614, 0.19675604273380887, 0.16757549957091145, 0.19398286449366908, 0.20298787293703102, 0.19110072176323334, 0.13237224142120774, 0.12380745289889206, 0.14490108750904585, 0.12768798996087516, 0.13944662118405415, 0.1462526744001027, 0.15773730965906674, 0.16887967620644972, 0.12445639924504626, 0.15636928487862656, 0.15875296630320468, 0.19003915578761876, 0.15575853469084433, 0.156805658482577, 0.15869702615534043, 0.18871609930258315, 0.17853791915914352, 0.17062911396536873, 0.15654363172342878, 0.17401775063074287, 0.1567158023543156, 0.16536016512961982, 0.15301278934461293, 0.15853855048831034, 0.16441175747354886, 0.15337321282625305, 0.16920102317497954, 0.31098446220579024, 0.16386119318128456, 0.14790765514677573, 0.22666368519166458, 0.16399162206845197, 0.17842294459770947, 0.13093829633465526, 0.2572849545140916, 0.26408971017659166, 0.2827735889004709, 0.19029280301853357, 0.16033821630678735, 0.17019810746580444, 0.19444799727075657, 0.13938141572985097, 0.1870473501264055, 0.12613439228450551, 0.22586456954817336, 0.22176375806176185, 0.1896854841383684, 0.18965484687636291, 0.17690255866849802, 0.1891986570962516, 0.17388360028403427, 0.18730901707198633, 0.18273772054235604, 0.17811507009536454, 0.062474652646362094, 0.06038076551325178, 0.05905372775085127, 0.05119338956613351, 0.054899809793484966, 0.054712232458198895, 0.07780563860071565, 0.06507852331440322, 0.06659758630188795]}, "mutation_prompt": null}
{"id": "85a742b7-257f-461b-bf16-69879e17c6b0", "solution": "import numpy as np\n\nclass OAHPE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.7\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _evaluate_population(self, population, func):\n        return np.array([func(ind) for ind in population])\n\n    def _update_velocity(self, velocities, population, personal_best, global_best):\n        r1, r2 = np.random.rand(2, self.population_size, self.dim)\n        cognitive = self.c1 * r1 * (personal_best - population)\n        social = self.c2 * r2 * (global_best - population)\n        return velocities + cognitive + social\n\n    def _apply_bounds(self, population):\n        np.clip(population, self.lower_bound, self.upper_bound, out=population)\n\n    def _differential_mutation(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = population[indices]\n        mutant = a + self.mutation_factor * (b - c)\n        np.clip(mutant, self.lower_bound, self.upper_bound, out=mutant)\n        trial = np.where(np.random.rand(self.dim) < self.crossover_prob, mutant, population[idx])\n        np.clip(trial, self.lower_bound, self.upper_bound, out=trial)\n        return trial\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_value = self._evaluate_population(population, func)\n        \n        global_best_idx = np.argmin(personal_best_value)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_value[global_best_idx]\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            velocities = self._update_velocity(velocities, population, personal_best, global_best)\n            population += velocities\n            self._apply_bounds(population)\n\n            new_population_value = self._evaluate_population(population, func)\n            evaluations += self.population_size\n\n            for i in range(self.population_size):\n                if new_population_value[i] < personal_best_value[i]:\n                    personal_best[i] = population[i]\n                    personal_best_value[i] = new_population_value[i]\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n            for i in range(self.population_size):\n                trial = self._differential_mutation(population, i)\n                trial_value = func(trial)\n                evaluations += 1\n\n                if trial_value < personal_best_value[i]:\n                    population[i] = trial\n                    personal_best[i] = trial\n                    personal_best_value[i] = trial_value\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n                if evaluations >= self.budget:\n                    break\n        \n        return global_best", "name": "OAHPE", "description": "Optimized Adaptive Hybrid Particle Evolution (OAHPE) introduces efficient trial selection and reduced evaluations by merging velocity updates and differential mutation.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "21c0e717-3be7-4538-90a8-3f84512ce9cb", "metadata": {"aucs": [0.2221500879841256, 0.24307259200235876, 0.22753088061095816, 0.24857692597636427, 0.29601770125445637, 0.2804718430029084, 0.24358382528404932, 0.26508987080283997, 0.24258775345289907, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.082227127837323, 0.06183473289079067, 0.05657350636876779, 0.05784421516024818, 0.06346659854250225, 0.058558481958294606, 0.06272164829207394, 0.0667370890451271, 0.07983163563661089, 0.061189768551837886, 0.03401878213401155, 0.04019515726740086, 0.056204836077746734, 0.0475351947083098, 0.03985620650560395, 0.05748214823134146, 0.056339425010037525, 0.05542765240730274, 0.9836783223171812, 0.9677620860375415, 0.9794658301285181, 0.9690396055130268, 0.9767353672763911, 0.9684262449856995, 0.9787023398508176, 0.9746929135351794, 0.9755335618149915, 0.11220471057429382, 0.13300640995429636, 0.07484007126704195, 0.11187042710715744, 0.10998656109210136, 0.14037184893890076, 0.08615967745064412, 0.1022461273459827, 0.07646862023614198, 0.16609109912356235, 0.1405845625712594, 0.2025679442189473, 0.18615798466411448, 0.16665972691115383, 0.17518425171499497, 0.1345484664884785, 0.1743948022662516, 0.15685454085192319, 0.08205094156632153, 0.016622670644971582, 0.021950752598170253, 0.0379343016070689, 9.999999999998899e-05, 0.04978144099748261, 0.0814465816630523, 0.01939074527113227, 0.0517184424462197, 0.05373550284380546, 0.0585752738814157, 0.0005213772220001855, 0.04552429262527513, 0.004998497286513692, 0.08471960752272867, 0.0222783299266317, 0.0008080630453800586, 0.002805637690122653, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02664524528492007, 0.013623651590440433, 0.05204337835841366, 0.06630421688987043, 9.999999999998899e-05, 0.021948552249879683, 0.05375178075262388, 0.04541396083542715, 0.030733292275746837, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03176961451513305, 0.002941253580335812, 9.999999999998899e-05, 0.019111086059913074, 9.999999999998899e-05, 0.00031990107075086094, 0.03050014577305593, 0.03320293260329177, 0.024935309574795617, 0.27190800081241173, 0.2700665354644808, 0.2841595412431098, 0.20506060400710335, 0.2829855485902524, 0.24439850404544528, 0.24150191632824636, 0.21145360279107484, 0.25293214258293717, 0.06450971297520569, 0.05915195182504085, 0.06505834954339973, 0.05940480187459651, 0.0666368370171676, 0.06418051225335553, 0.04843184410425205, 0.0698931085059048, 0.05754051889579026, 0.1524170121415398, 0.15840403750402798, 0.14232447712143625, 0.17623026876365855, 0.1836377624130523, 0.1575370316483664, 0.17989141420631627, 0.14702662196205396, 0.1533234727297368, 0.1862822329694631, 0.19782961902015872, 0.18935818858721754, 0.19418964140948614, 0.19675604273380887, 0.16757549957091145, 0.19398286449366908, 0.20298787293703102, 0.19110072176323334, 0.13237224142120774, 0.12380745289889206, 0.14490108750904585, 0.12768798996087516, 0.13944662118405415, 0.1462526744001027, 0.15773730965906674, 0.16887967620644972, 0.12445639924504626, 0.15636928487862656, 0.15875296630320468, 0.19003915578761876, 0.15575853469084433, 0.156805658482577, 0.15869702615534043, 0.18871609930258315, 0.17853791915914352, 0.17062911396536873, 0.15654363172342878, 0.17401775063074287, 0.1567158023543156, 0.16536016512961982, 0.15301278934461293, 0.15853855048831034, 0.16441175747354886, 0.15337321282625305, 0.16920102317497954, 0.31098446220579024, 0.16386119318128456, 0.14790765514677573, 0.22666368519166458, 0.16399162206845197, 0.17842294459770947, 0.13093829633465526, 0.2572849545140916, 0.26408971017659166, 0.2827735889004709, 0.19029280301853357, 0.16033821630678735, 0.17019810746580444, 0.19444799727075657, 0.13938141572985097, 0.1870473501264055, 0.12613439228450551, 0.22586456954817336, 0.22176375806176185, 0.1896854841383684, 0.18965484687636291, 0.17690255866849802, 0.1891986570962516, 0.17388360028403427, 0.18730901707198633, 0.18273772054235604, 0.17811507009536454, 0.062474652646362094, 0.06038076551325178, 0.05905372775085127, 0.05119338956613351, 0.054899809793484966, 0.054712232458198895, 0.07780563860071565, 0.06507852331440322, 0.06659758630188795]}, "mutation_prompt": null}
{"id": "108b1953-1d0b-47e6-8bcd-690258177f65", "solution": "import numpy as np\n\nclass OAHPE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.7\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _evaluate_population(self, population, func):\n        return np.array([func(ind) for ind in population])\n\n    def _update_velocity(self, velocities, population, personal_best, global_best):\n        r1, r2 = np.random.rand(2, self.population_size, self.dim)\n        cognitive = self.c1 * r1 * (personal_best - population)\n        social = self.c2 * r2 * (global_best - population)\n        return velocities + cognitive + social\n\n    def _apply_bounds(self, population):\n        np.clip(population, self.lower_bound, self.upper_bound, out=population)\n\n    def _differential_mutation(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = population[indices]\n        mutant = a + self.mutation_factor * (b - c)\n        np.clip(mutant, self.lower_bound, self.upper_bound, out=mutant)\n        trial = np.where(np.random.rand(self.dim) < self.crossover_prob, mutant, population[idx])\n        np.clip(trial, self.lower_bound, self.upper_bound, out=trial)\n        return trial\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_value = self._evaluate_population(population, func)\n        \n        global_best_idx = np.argmin(personal_best_value)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_value[global_best_idx]\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            velocities = self._update_velocity(velocities, population, personal_best, global_best)\n            population += velocities\n            self._apply_bounds(population)\n\n            new_population_value = self._evaluate_population(population, func)\n            evaluations += self.population_size\n\n            for i in range(self.population_size):\n                if new_population_value[i] < personal_best_value[i]:\n                    personal_best[i] = population[i]\n                    personal_best_value[i] = new_population_value[i]\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n            for i in range(self.population_size):\n                trial = self._differential_mutation(population, i)\n                trial_value = func(trial)\n                evaluations += 1\n\n                if trial_value < personal_best_value[i]:\n                    population[i] = trial\n                    personal_best[i] = trial\n                    personal_best_value[i] = trial_value\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n                if evaluations >= self.budget:\n                    break\n        \n        return global_best", "name": "OAHPE", "description": "Optimized Adaptive Hybrid Particle Evolution (OAHPE) introduces efficient trial selection and reduced evaluations by merging velocity updates and differential mutation.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "21c0e717-3be7-4538-90a8-3f84512ce9cb", "metadata": {"aucs": [0.2221500879841256, 0.24307259200235876, 0.22753088061095816, 0.24857692597636427, 0.29601770125445637, 0.2804718430029084, 0.24358382528404932, 0.26508987080283997, 0.24258775345289907, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.082227127837323, 0.06183473289079067, 0.05657350636876779, 0.05784421516024818, 0.06346659854250225, 0.058558481958294606, 0.06272164829207394, 0.0667370890451271, 0.07983163563661089, 0.061189768551837886, 0.03401878213401155, 0.04019515726740086, 0.056204836077746734, 0.0475351947083098, 0.03985620650560395, 0.05748214823134146, 0.056339425010037525, 0.05542765240730274, 0.9836783223171812, 0.9677620860375415, 0.9794658301285181, 0.9690396055130268, 0.9767353672763911, 0.9684262449856995, 0.9787023398508176, 0.9746929135351794, 0.9755335618149915, 0.11220471057429382, 0.13300640995429636, 0.07484007126704195, 0.11187042710715744, 0.10998656109210136, 0.14037184893890076, 0.08615967745064412, 0.1022461273459827, 0.07646862023614198, 0.16609109912356235, 0.1405845625712594, 0.2025679442189473, 0.18615798466411448, 0.16665972691115383, 0.17518425171499497, 0.1345484664884785, 0.1743948022662516, 0.15685454085192319, 0.08205094156632153, 0.016622670644971582, 0.021950752598170253, 0.0379343016070689, 9.999999999998899e-05, 0.04978144099748261, 0.0814465816630523, 0.01939074527113227, 0.0517184424462197, 0.05373550284380546, 0.0585752738814157, 0.0005213772220001855, 0.04552429262527513, 0.004998497286513692, 0.08471960752272867, 0.0222783299266317, 0.0008080630453800586, 0.002805637690122653, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02664524528492007, 0.013623651590440433, 0.05204337835841366, 0.06630421688987043, 9.999999999998899e-05, 0.021948552249879683, 0.05375178075262388, 0.04541396083542715, 0.030733292275746837, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03176961451513305, 0.002941253580335812, 9.999999999998899e-05, 0.019111086059913074, 9.999999999998899e-05, 0.00031990107075086094, 0.03050014577305593, 0.03320293260329177, 0.024935309574795617, 0.27190800081241173, 0.2700665354644808, 0.2841595412431098, 0.20506060400710335, 0.2829855485902524, 0.24439850404544528, 0.24150191632824636, 0.21145360279107484, 0.25293214258293717, 0.06450971297520569, 0.05915195182504085, 0.06505834954339973, 0.05940480187459651, 0.0666368370171676, 0.06418051225335553, 0.04843184410425205, 0.0698931085059048, 0.05754051889579026, 0.1524170121415398, 0.15840403750402798, 0.14232447712143625, 0.17623026876365855, 0.1836377624130523, 0.1575370316483664, 0.17989141420631627, 0.14702662196205396, 0.1533234727297368, 0.1862822329694631, 0.19782961902015872, 0.18935818858721754, 0.19418964140948614, 0.19675604273380887, 0.16757549957091145, 0.19398286449366908, 0.20298787293703102, 0.19110072176323334, 0.13237224142120774, 0.12380745289889206, 0.14490108750904585, 0.12768798996087516, 0.13944662118405415, 0.1462526744001027, 0.15773730965906674, 0.16887967620644972, 0.12445639924504626, 0.15636928487862656, 0.15875296630320468, 0.19003915578761876, 0.15575853469084433, 0.156805658482577, 0.15869702615534043, 0.18871609930258315, 0.17853791915914352, 0.17062911396536873, 0.15654363172342878, 0.17401775063074287, 0.1567158023543156, 0.16536016512961982, 0.15301278934461293, 0.15853855048831034, 0.16441175747354886, 0.15337321282625305, 0.16920102317497954, 0.31098446220579024, 0.16386119318128456, 0.14790765514677573, 0.22666368519166458, 0.16399162206845197, 0.17842294459770947, 0.13093829633465526, 0.2572849545140916, 0.26408971017659166, 0.2827735889004709, 0.19029280301853357, 0.16033821630678735, 0.17019810746580444, 0.19444799727075657, 0.13938141572985097, 0.1870473501264055, 0.12613439228450551, 0.22586456954817336, 0.22176375806176185, 0.1896854841383684, 0.18965484687636291, 0.17690255866849802, 0.1891986570962516, 0.17388360028403427, 0.18730901707198633, 0.18273772054235604, 0.17811507009536454, 0.062474652646362094, 0.06038076551325178, 0.05905372775085127, 0.05119338956613351, 0.054899809793484966, 0.054712232458198895, 0.07780563860071565, 0.06507852331440322, 0.06659758630188795]}, "mutation_prompt": null}
{"id": "77aafe99-f929-4acb-9dc3-3d6e21e41a29", "solution": "import numpy as np\n\nclass OAHPE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.7\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _evaluate_population(self, population, func):\n        return np.array([func(ind) for ind in population])\n\n    def _update_velocity(self, velocities, population, personal_best, global_best):\n        r1, r2 = np.random.rand(2, self.population_size, self.dim)\n        cognitive = self.c1 * r1 * (personal_best - population)\n        social = self.c2 * r2 * (global_best - population)\n        return velocities + cognitive + social\n\n    def _apply_bounds(self, population):\n        np.clip(population, self.lower_bound, self.upper_bound, out=population)\n\n    def _differential_mutation(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = population[indices]\n        mutant = a + self.mutation_factor * (b - c)\n        np.clip(mutant, self.lower_bound, self.upper_bound, out=mutant)\n        trial = np.where(np.random.rand(self.dim) < self.crossover_prob, mutant, population[idx])\n        np.clip(trial, self.lower_bound, self.upper_bound, out=trial)\n        return trial\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_value = self._evaluate_population(population, func)\n        \n        global_best_idx = np.argmin(personal_best_value)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_value[global_best_idx]\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            velocities = self._update_velocity(velocities, population, personal_best, global_best)\n            population += velocities\n            self._apply_bounds(population)\n\n            new_population_value = self._evaluate_population(population, func)\n            evaluations += self.population_size\n\n            for i in range(self.population_size):\n                if new_population_value[i] < personal_best_value[i]:\n                    personal_best[i] = population[i]\n                    personal_best_value[i] = new_population_value[i]\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n            for i in range(self.population_size):\n                trial = self._differential_mutation(population, i)\n                trial_value = func(trial)\n                evaluations += 1\n\n                if trial_value < personal_best_value[i]:\n                    population[i] = trial\n                    personal_best[i] = trial\n                    personal_best_value[i] = trial_value\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n                if evaluations >= self.budget:\n                    break\n        \n        return global_best", "name": "OAHPE", "description": "Optimized Adaptive Hybrid Particle Evolution (OAHPE) introduces efficient trial selection and reduced evaluations by merging velocity updates and differential mutation.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "21c0e717-3be7-4538-90a8-3f84512ce9cb", "metadata": {"aucs": [0.2221500879841256, 0.24307259200235876, 0.22753088061095816, 0.24857692597636427, 0.29601770125445637, 0.2804718430029084, 0.24358382528404932, 0.26508987080283997, 0.24258775345289907, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.082227127837323, 0.06183473289079067, 0.05657350636876779, 0.05784421516024818, 0.06346659854250225, 0.058558481958294606, 0.06272164829207394, 0.0667370890451271, 0.07983163563661089, 0.061189768551837886, 0.03401878213401155, 0.04019515726740086, 0.056204836077746734, 0.0475351947083098, 0.03985620650560395, 0.05748214823134146, 0.056339425010037525, 0.05542765240730274, 0.9836783223171812, 0.9677620860375415, 0.9794658301285181, 0.9690396055130268, 0.9767353672763911, 0.9684262449856995, 0.9787023398508176, 0.9746929135351794, 0.9755335618149915, 0.11220471057429382, 0.13300640995429636, 0.07484007126704195, 0.11187042710715744, 0.10998656109210136, 0.14037184893890076, 0.08615967745064412, 0.1022461273459827, 0.07646862023614198, 0.16609109912356235, 0.1405845625712594, 0.2025679442189473, 0.18615798466411448, 0.16665972691115383, 0.17518425171499497, 0.1345484664884785, 0.1743948022662516, 0.15685454085192319, 0.08205094156632153, 0.016622670644971582, 0.021950752598170253, 0.0379343016070689, 9.999999999998899e-05, 0.04978144099748261, 0.0814465816630523, 0.01939074527113227, 0.0517184424462197, 0.05373550284380546, 0.0585752738814157, 0.0005213772220001855, 0.04552429262527513, 0.004998497286513692, 0.08471960752272867, 0.0222783299266317, 0.0008080630453800586, 0.002805637690122653, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02664524528492007, 0.013623651590440433, 0.05204337835841366, 0.06630421688987043, 9.999999999998899e-05, 0.021948552249879683, 0.05375178075262388, 0.04541396083542715, 0.030733292275746837, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03176961451513305, 0.002941253580335812, 9.999999999998899e-05, 0.019111086059913074, 9.999999999998899e-05, 0.00031990107075086094, 0.03050014577305593, 0.03320293260329177, 0.024935309574795617, 0.27190800081241173, 0.2700665354644808, 0.2841595412431098, 0.20506060400710335, 0.2829855485902524, 0.24439850404544528, 0.24150191632824636, 0.21145360279107484, 0.25293214258293717, 0.06450971297520569, 0.05915195182504085, 0.06505834954339973, 0.05940480187459651, 0.0666368370171676, 0.06418051225335553, 0.04843184410425205, 0.0698931085059048, 0.05754051889579026, 0.1524170121415398, 0.15840403750402798, 0.14232447712143625, 0.17623026876365855, 0.1836377624130523, 0.1575370316483664, 0.17989141420631627, 0.14702662196205396, 0.1533234727297368, 0.1862822329694631, 0.19782961902015872, 0.18935818858721754, 0.19418964140948614, 0.19675604273380887, 0.16757549957091145, 0.19398286449366908, 0.20298787293703102, 0.19110072176323334, 0.13237224142120774, 0.12380745289889206, 0.14490108750904585, 0.12768798996087516, 0.13944662118405415, 0.1462526744001027, 0.15773730965906674, 0.16887967620644972, 0.12445639924504626, 0.15636928487862656, 0.15875296630320468, 0.19003915578761876, 0.15575853469084433, 0.156805658482577, 0.15869702615534043, 0.18871609930258315, 0.17853791915914352, 0.17062911396536873, 0.15654363172342878, 0.17401775063074287, 0.1567158023543156, 0.16536016512961982, 0.15301278934461293, 0.15853855048831034, 0.16441175747354886, 0.15337321282625305, 0.16920102317497954, 0.31098446220579024, 0.16386119318128456, 0.14790765514677573, 0.22666368519166458, 0.16399162206845197, 0.17842294459770947, 0.13093829633465526, 0.2572849545140916, 0.26408971017659166, 0.2827735889004709, 0.19029280301853357, 0.16033821630678735, 0.17019810746580444, 0.19444799727075657, 0.13938141572985097, 0.1870473501264055, 0.12613439228450551, 0.22586456954817336, 0.22176375806176185, 0.1896854841383684, 0.18965484687636291, 0.17690255866849802, 0.1891986570962516, 0.17388360028403427, 0.18730901707198633, 0.18273772054235604, 0.17811507009536454, 0.062474652646362094, 0.06038076551325178, 0.05905372775085127, 0.05119338956613351, 0.054899809793484966, 0.054712232458198895, 0.07780563860071565, 0.06507852331440322, 0.06659758630188795]}, "mutation_prompt": null}
{"id": "32b8430d-b1bf-4e2a-95f4-0f75fa695d5b", "solution": "import numpy as np\n\nclass OAHPE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.7\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _evaluate_population(self, population, func):\n        return np.array([func(ind) for ind in population])\n\n    def _update_velocity(self, velocities, population, personal_best, global_best):\n        r1, r2 = np.random.rand(2, self.population_size, self.dim)\n        cognitive = self.c1 * r1 * (personal_best - population)\n        social = self.c2 * r2 * (global_best - population)\n        return velocities + cognitive + social\n\n    def _apply_bounds(self, population):\n        np.clip(population, self.lower_bound, self.upper_bound, out=population)\n\n    def _differential_mutation(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = population[indices]\n        mutant = a + self.mutation_factor * (b - c)\n        np.clip(mutant, self.lower_bound, self.upper_bound, out=mutant)\n        trial = np.where(np.random.rand(self.dim) < self.crossover_prob, mutant, population[idx])\n        np.clip(trial, self.lower_bound, self.upper_bound, out=trial)\n        return trial\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_value = self._evaluate_population(population, func)\n        \n        global_best_idx = np.argmin(personal_best_value)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_value[global_best_idx]\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            velocities = self._update_velocity(velocities, population, personal_best, global_best)\n            population += velocities\n            self._apply_bounds(population)\n\n            new_population_value = self._evaluate_population(population, func)\n            evaluations += self.population_size\n\n            for i in range(self.population_size):\n                if new_population_value[i] < personal_best_value[i]:\n                    personal_best[i] = population[i]\n                    personal_best_value[i] = new_population_value[i]\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n            for i in range(self.population_size):\n                trial = self._differential_mutation(population, i)\n                trial_value = func(trial)\n                evaluations += 1\n\n                if trial_value < personal_best_value[i]:\n                    population[i] = trial\n                    personal_best[i] = trial\n                    personal_best_value[i] = trial_value\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n                if evaluations >= self.budget:\n                    break\n        \n        return global_best", "name": "OAHPE", "description": "Optimized Adaptive Hybrid Particle Evolution (OAHPE) introduces efficient trial selection and reduced evaluations by merging velocity updates and differential mutation.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "21c0e717-3be7-4538-90a8-3f84512ce9cb", "metadata": {"aucs": [0.2221500879841256, 0.24307259200235876, 0.22753088061095816, 0.24857692597636427, 0.29601770125445637, 0.2804718430029084, 0.24358382528404932, 0.26508987080283997, 0.24258775345289907, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.082227127837323, 0.06183473289079067, 0.05657350636876779, 0.05784421516024818, 0.06346659854250225, 0.058558481958294606, 0.06272164829207394, 0.0667370890451271, 0.07983163563661089, 0.061189768551837886, 0.03401878213401155, 0.04019515726740086, 0.056204836077746734, 0.0475351947083098, 0.03985620650560395, 0.05748214823134146, 0.056339425010037525, 0.05542765240730274, 0.9836783223171812, 0.9677620860375415, 0.9794658301285181, 0.9690396055130268, 0.9767353672763911, 0.9684262449856995, 0.9787023398508176, 0.9746929135351794, 0.9755335618149915, 0.11220471057429382, 0.13300640995429636, 0.07484007126704195, 0.11187042710715744, 0.10998656109210136, 0.14037184893890076, 0.08615967745064412, 0.1022461273459827, 0.07646862023614198, 0.16609109912356235, 0.1405845625712594, 0.2025679442189473, 0.18615798466411448, 0.16665972691115383, 0.17518425171499497, 0.1345484664884785, 0.1743948022662516, 0.15685454085192319, 0.08205094156632153, 0.016622670644971582, 0.021950752598170253, 0.0379343016070689, 9.999999999998899e-05, 0.04978144099748261, 0.0814465816630523, 0.01939074527113227, 0.0517184424462197, 0.05373550284380546, 0.0585752738814157, 0.0005213772220001855, 0.04552429262527513, 0.004998497286513692, 0.08471960752272867, 0.0222783299266317, 0.0008080630453800586, 0.002805637690122653, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02664524528492007, 0.013623651590440433, 0.05204337835841366, 0.06630421688987043, 9.999999999998899e-05, 0.021948552249879683, 0.05375178075262388, 0.04541396083542715, 0.030733292275746837, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03176961451513305, 0.002941253580335812, 9.999999999998899e-05, 0.019111086059913074, 9.999999999998899e-05, 0.00031990107075086094, 0.03050014577305593, 0.03320293260329177, 0.024935309574795617, 0.27190800081241173, 0.2700665354644808, 0.2841595412431098, 0.20506060400710335, 0.2829855485902524, 0.24439850404544528, 0.24150191632824636, 0.21145360279107484, 0.25293214258293717, 0.06450971297520569, 0.05915195182504085, 0.06505834954339973, 0.05940480187459651, 0.0666368370171676, 0.06418051225335553, 0.04843184410425205, 0.0698931085059048, 0.05754051889579026, 0.1524170121415398, 0.15840403750402798, 0.14232447712143625, 0.17623026876365855, 0.1836377624130523, 0.1575370316483664, 0.17989141420631627, 0.14702662196205396, 0.1533234727297368, 0.1862822329694631, 0.19782961902015872, 0.18935818858721754, 0.19418964140948614, 0.19675604273380887, 0.16757549957091145, 0.19398286449366908, 0.20298787293703102, 0.19110072176323334, 0.13237224142120774, 0.12380745289889206, 0.14490108750904585, 0.12768798996087516, 0.13944662118405415, 0.1462526744001027, 0.15773730965906674, 0.16887967620644972, 0.12445639924504626, 0.15636928487862656, 0.15875296630320468, 0.19003915578761876, 0.15575853469084433, 0.156805658482577, 0.15869702615534043, 0.18871609930258315, 0.17853791915914352, 0.17062911396536873, 0.15654363172342878, 0.17401775063074287, 0.1567158023543156, 0.16536016512961982, 0.15301278934461293, 0.15853855048831034, 0.16441175747354886, 0.15337321282625305, 0.16920102317497954, 0.31098446220579024, 0.16386119318128456, 0.14790765514677573, 0.22666368519166458, 0.16399162206845197, 0.17842294459770947, 0.13093829633465526, 0.2572849545140916, 0.26408971017659166, 0.2827735889004709, 0.19029280301853357, 0.16033821630678735, 0.17019810746580444, 0.19444799727075657, 0.13938141572985097, 0.1870473501264055, 0.12613439228450551, 0.22586456954817336, 0.22176375806176185, 0.1896854841383684, 0.18965484687636291, 0.17690255866849802, 0.1891986570962516, 0.17388360028403427, 0.18730901707198633, 0.18273772054235604, 0.17811507009536454, 0.062474652646362094, 0.06038076551325178, 0.05905372775085127, 0.05119338956613351, 0.054899809793484966, 0.054712232458198895, 0.07780563860071565, 0.06507852331440322, 0.06659758630188795]}, "mutation_prompt": null}
{"id": "c450edf2-5229-4de3-8649-8077d58ed76b", "solution": "import numpy as np\n\nclass OAHPE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.7\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _evaluate_population(self, population, func):\n        return np.array([func(ind) for ind in population])\n\n    def _update_velocity(self, velocities, population, personal_best, global_best):\n        r1, r2 = np.random.rand(2, self.population_size, self.dim)\n        cognitive = self.c1 * r1 * (personal_best - population)\n        social = self.c2 * r2 * (global_best - population)\n        return velocities + cognitive + social\n\n    def _apply_bounds(self, population):\n        np.clip(population, self.lower_bound, self.upper_bound, out=population)\n\n    def _differential_mutation(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = population[indices]\n        mutant = a + self.mutation_factor * (b - c)\n        np.clip(mutant, self.lower_bound, self.upper_bound, out=mutant)\n        trial = np.where(np.random.rand(self.dim) < self.crossover_prob, mutant, population[idx])\n        np.clip(trial, self.lower_bound, self.upper_bound, out=trial)\n        return trial\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_value = self._evaluate_population(population, func)\n        \n        global_best_idx = np.argmin(personal_best_value)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_value[global_best_idx]\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            velocities = self._update_velocity(velocities, population, personal_best, global_best)\n            population += velocities\n            self._apply_bounds(population)\n\n            new_population_value = self._evaluate_population(population, func)\n            evaluations += self.population_size\n\n            for i in range(self.population_size):\n                if new_population_value[i] < personal_best_value[i]:\n                    personal_best[i] = population[i]\n                    personal_best_value[i] = new_population_value[i]\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n            for i in range(self.population_size):\n                trial = self._differential_mutation(population, i)\n                trial_value = func(trial)\n                evaluations += 1\n\n                if trial_value < personal_best_value[i]:\n                    population[i] = trial\n                    personal_best[i] = trial\n                    personal_best_value[i] = trial_value\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n                if evaluations >= self.budget:\n                    break\n        \n        return global_best", "name": "OAHPE", "description": "Optimized Adaptive Hybrid Particle Evolution (OAHPE) introduces efficient trial selection and reduced evaluations by merging velocity updates and differential mutation.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "21c0e717-3be7-4538-90a8-3f84512ce9cb", "metadata": {"aucs": [0.2221500879841256, 0.24307259200235876, 0.22753088061095816, 0.24857692597636427, 0.29601770125445637, 0.2804718430029084, 0.24358382528404932, 0.26508987080283997, 0.24258775345289907, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.082227127837323, 0.06183473289079067, 0.05657350636876779, 0.05784421516024818, 0.06346659854250225, 0.058558481958294606, 0.06272164829207394, 0.0667370890451271, 0.07983163563661089, 0.061189768551837886, 0.03401878213401155, 0.04019515726740086, 0.056204836077746734, 0.0475351947083098, 0.03985620650560395, 0.05748214823134146, 0.056339425010037525, 0.05542765240730274, 0.9836783223171812, 0.9677620860375415, 0.9794658301285181, 0.9690396055130268, 0.9767353672763911, 0.9684262449856995, 0.9787023398508176, 0.9746929135351794, 0.9755335618149915, 0.11220471057429382, 0.13300640995429636, 0.07484007126704195, 0.11187042710715744, 0.10998656109210136, 0.14037184893890076, 0.08615967745064412, 0.1022461273459827, 0.07646862023614198, 0.16609109912356235, 0.1405845625712594, 0.2025679442189473, 0.18615798466411448, 0.16665972691115383, 0.17518425171499497, 0.1345484664884785, 0.1743948022662516, 0.15685454085192319, 0.08205094156632153, 0.016622670644971582, 0.021950752598170253, 0.0379343016070689, 9.999999999998899e-05, 0.04978144099748261, 0.0814465816630523, 0.01939074527113227, 0.0517184424462197, 0.05373550284380546, 0.0585752738814157, 0.0005213772220001855, 0.04552429262527513, 0.004998497286513692, 0.08471960752272867, 0.0222783299266317, 0.0008080630453800586, 0.002805637690122653, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02664524528492007, 0.013623651590440433, 0.05204337835841366, 0.06630421688987043, 9.999999999998899e-05, 0.021948552249879683, 0.05375178075262388, 0.04541396083542715, 0.030733292275746837, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03176961451513305, 0.002941253580335812, 9.999999999998899e-05, 0.019111086059913074, 9.999999999998899e-05, 0.00031990107075086094, 0.03050014577305593, 0.03320293260329177, 0.024935309574795617, 0.27190800081241173, 0.2700665354644808, 0.2841595412431098, 0.20506060400710335, 0.2829855485902524, 0.24439850404544528, 0.24150191632824636, 0.21145360279107484, 0.25293214258293717, 0.06450971297520569, 0.05915195182504085, 0.06505834954339973, 0.05940480187459651, 0.0666368370171676, 0.06418051225335553, 0.04843184410425205, 0.0698931085059048, 0.05754051889579026, 0.1524170121415398, 0.15840403750402798, 0.14232447712143625, 0.17623026876365855, 0.1836377624130523, 0.1575370316483664, 0.17989141420631627, 0.14702662196205396, 0.1533234727297368, 0.1862822329694631, 0.19782961902015872, 0.18935818858721754, 0.19418964140948614, 0.19675604273380887, 0.16757549957091145, 0.19398286449366908, 0.20298787293703102, 0.19110072176323334, 0.13237224142120774, 0.12380745289889206, 0.14490108750904585, 0.12768798996087516, 0.13944662118405415, 0.1462526744001027, 0.15773730965906674, 0.16887967620644972, 0.12445639924504626, 0.15636928487862656, 0.15875296630320468, 0.19003915578761876, 0.15575853469084433, 0.156805658482577, 0.15869702615534043, 0.18871609930258315, 0.17853791915914352, 0.17062911396536873, 0.15654363172342878, 0.17401775063074287, 0.1567158023543156, 0.16536016512961982, 0.15301278934461293, 0.15853855048831034, 0.16441175747354886, 0.15337321282625305, 0.16920102317497954, 0.31098446220579024, 0.16386119318128456, 0.14790765514677573, 0.22666368519166458, 0.16399162206845197, 0.17842294459770947, 0.13093829633465526, 0.2572849545140916, 0.26408971017659166, 0.2827735889004709, 0.19029280301853357, 0.16033821630678735, 0.17019810746580444, 0.19444799727075657, 0.13938141572985097, 0.1870473501264055, 0.12613439228450551, 0.22586456954817336, 0.22176375806176185, 0.1896854841383684, 0.18965484687636291, 0.17690255866849802, 0.1891986570962516, 0.17388360028403427, 0.18730901707198633, 0.18273772054235604, 0.17811507009536454, 0.062474652646362094, 0.06038076551325178, 0.05905372775085127, 0.05119338956613351, 0.054899809793484966, 0.054712232458198895, 0.07780563860071565, 0.06507852331440322, 0.06659758630188795]}, "mutation_prompt": null}
{"id": "e6a421bc-3d3d-48f9-a4b1-861dffa1a934", "solution": "import numpy as np\n\nclass OAHPE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.7\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _evaluate_population(self, population, func):\n        return np.array([func(ind) for ind in population])\n\n    def _update_velocity(self, velocities, population, personal_best, global_best):\n        r1, r2 = np.random.rand(2, self.population_size, self.dim)\n        cognitive = self.c1 * r1 * (personal_best - population)\n        social = self.c2 * r2 * (global_best - population)\n        return velocities + cognitive + social\n\n    def _apply_bounds(self, population):\n        np.clip(population, self.lower_bound, self.upper_bound, out=population)\n\n    def _differential_mutation(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = population[indices]\n        mutant = a + self.mutation_factor * (b - c)\n        np.clip(mutant, self.lower_bound, self.upper_bound, out=mutant)\n        trial = np.where(np.random.rand(self.dim) < self.crossover_prob, mutant, population[idx])\n        np.clip(trial, self.lower_bound, self.upper_bound, out=trial)\n        return trial\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_value = self._evaluate_population(population, func)\n        \n        global_best_idx = np.argmin(personal_best_value)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_value[global_best_idx]\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            velocities = self._update_velocity(velocities, population, personal_best, global_best)\n            population += velocities\n            self._apply_bounds(population)\n\n            new_population_value = self._evaluate_population(population, func)\n            evaluations += self.population_size\n\n            for i in range(self.population_size):\n                if new_population_value[i] < personal_best_value[i]:\n                    personal_best[i] = population[i]\n                    personal_best_value[i] = new_population_value[i]\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n            for i in range(self.population_size):\n                trial = self._differential_mutation(population, i)\n                trial_value = func(trial)\n                evaluations += 1\n\n                if trial_value < personal_best_value[i]:\n                    population[i] = trial\n                    personal_best[i] = trial\n                    personal_best_value[i] = trial_value\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n                if evaluations >= self.budget:\n                    break\n        \n        return global_best", "name": "OAHPE", "description": "Optimized Adaptive Hybrid Particle Evolution (OAHPE) introduces efficient trial selection and reduced evaluations by merging velocity updates and differential mutation.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "21c0e717-3be7-4538-90a8-3f84512ce9cb", "metadata": {"aucs": [0.2221500879841256, 0.24307259200235876, 0.22753088061095816, 0.24857692597636427, 0.29601770125445637, 0.2804718430029084, 0.24358382528404932, 0.26508987080283997, 0.24258775345289907, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.082227127837323, 0.06183473289079067, 0.05657350636876779, 0.05784421516024818, 0.06346659854250225, 0.058558481958294606, 0.06272164829207394, 0.0667370890451271, 0.07983163563661089, 0.061189768551837886, 0.03401878213401155, 0.04019515726740086, 0.056204836077746734, 0.0475351947083098, 0.03985620650560395, 0.05748214823134146, 0.056339425010037525, 0.05542765240730274, 0.9836783223171812, 0.9677620860375415, 0.9794658301285181, 0.9690396055130268, 0.9767353672763911, 0.9684262449856995, 0.9787023398508176, 0.9746929135351794, 0.9755335618149915, 0.11220471057429382, 0.13300640995429636, 0.07484007126704195, 0.11187042710715744, 0.10998656109210136, 0.14037184893890076, 0.08615967745064412, 0.1022461273459827, 0.07646862023614198, 0.16609109912356235, 0.1405845625712594, 0.2025679442189473, 0.18615798466411448, 0.16665972691115383, 0.17518425171499497, 0.1345484664884785, 0.1743948022662516, 0.15685454085192319, 0.08205094156632153, 0.016622670644971582, 0.021950752598170253, 0.0379343016070689, 9.999999999998899e-05, 0.04978144099748261, 0.0814465816630523, 0.01939074527113227, 0.0517184424462197, 0.05373550284380546, 0.0585752738814157, 0.0005213772220001855, 0.04552429262527513, 0.004998497286513692, 0.08471960752272867, 0.0222783299266317, 0.0008080630453800586, 0.002805637690122653, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02664524528492007, 0.013623651590440433, 0.05204337835841366, 0.06630421688987043, 9.999999999998899e-05, 0.021948552249879683, 0.05375178075262388, 0.04541396083542715, 0.030733292275746837, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03176961451513305, 0.002941253580335812, 9.999999999998899e-05, 0.019111086059913074, 9.999999999998899e-05, 0.00031990107075086094, 0.03050014577305593, 0.03320293260329177, 0.024935309574795617, 0.27190800081241173, 0.2700665354644808, 0.2841595412431098, 0.20506060400710335, 0.2829855485902524, 0.24439850404544528, 0.24150191632824636, 0.21145360279107484, 0.25293214258293717, 0.06450971297520569, 0.05915195182504085, 0.06505834954339973, 0.05940480187459651, 0.0666368370171676, 0.06418051225335553, 0.04843184410425205, 0.0698931085059048, 0.05754051889579026, 0.1524170121415398, 0.15840403750402798, 0.14232447712143625, 0.17623026876365855, 0.1836377624130523, 0.1575370316483664, 0.17989141420631627, 0.14702662196205396, 0.1533234727297368, 0.1862822329694631, 0.19782961902015872, 0.18935818858721754, 0.19418964140948614, 0.19675604273380887, 0.16757549957091145, 0.19398286449366908, 0.20298787293703102, 0.19110072176323334, 0.13237224142120774, 0.12380745289889206, 0.14490108750904585, 0.12768798996087516, 0.13944662118405415, 0.1462526744001027, 0.15773730965906674, 0.16887967620644972, 0.12445639924504626, 0.15636928487862656, 0.15875296630320468, 0.19003915578761876, 0.15575853469084433, 0.156805658482577, 0.15869702615534043, 0.18871609930258315, 0.17853791915914352, 0.17062911396536873, 0.15654363172342878, 0.17401775063074287, 0.1567158023543156, 0.16536016512961982, 0.15301278934461293, 0.15853855048831034, 0.16441175747354886, 0.15337321282625305, 0.16920102317497954, 0.31098446220579024, 0.16386119318128456, 0.14790765514677573, 0.22666368519166458, 0.16399162206845197, 0.17842294459770947, 0.13093829633465526, 0.2572849545140916, 0.26408971017659166, 0.2827735889004709, 0.19029280301853357, 0.16033821630678735, 0.17019810746580444, 0.19444799727075657, 0.13938141572985097, 0.1870473501264055, 0.12613439228450551, 0.22586456954817336, 0.22176375806176185, 0.1896854841383684, 0.18965484687636291, 0.17690255866849802, 0.1891986570962516, 0.17388360028403427, 0.18730901707198633, 0.18273772054235604, 0.17811507009536454, 0.062474652646362094, 0.06038076551325178, 0.05905372775085127, 0.05119338956613351, 0.054899809793484966, 0.054712232458198895, 0.07780563860071565, 0.06507852331440322, 0.06659758630188795]}, "mutation_prompt": null}
{"id": "36f81105-c04c-44bb-a58d-fbbf19476cd0", "solution": "import numpy as np\n\nclass OAHPE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.7\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _evaluate_population(self, population, func):\n        return np.array([func(ind) for ind in population])\n\n    def _update_velocity(self, velocities, population, personal_best, global_best):\n        r1, r2 = np.random.rand(2, self.population_size, self.dim)\n        cognitive = self.c1 * r1 * (personal_best - population)\n        social = self.c2 * r2 * (global_best - population)\n        return velocities + cognitive + social\n\n    def _apply_bounds(self, population):\n        np.clip(population, self.lower_bound, self.upper_bound, out=population)\n\n    def _differential_mutation(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = population[indices]\n        mutant = a + self.mutation_factor * (b - c)\n        np.clip(mutant, self.lower_bound, self.upper_bound, out=mutant)\n        trial = np.where(np.random.rand(self.dim) < self.crossover_prob, mutant, population[idx])\n        np.clip(trial, self.lower_bound, self.upper_bound, out=trial)\n        return trial\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_value = self._evaluate_population(population, func)\n        \n        global_best_idx = np.argmin(personal_best_value)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_value[global_best_idx]\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            velocities = self._update_velocity(velocities, population, personal_best, global_best)\n            population += velocities\n            self._apply_bounds(population)\n\n            new_population_value = self._evaluate_population(population, func)\n            evaluations += self.population_size\n\n            for i in range(self.population_size):\n                if new_population_value[i] < personal_best_value[i]:\n                    personal_best[i] = population[i]\n                    personal_best_value[i] = new_population_value[i]\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n            for i in range(self.population_size):\n                trial = self._differential_mutation(population, i)\n                trial_value = func(trial)\n                evaluations += 1\n\n                if trial_value < personal_best_value[i]:\n                    population[i] = trial\n                    personal_best[i] = trial\n                    personal_best_value[i] = trial_value\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n                if evaluations >= self.budget:\n                    break\n        \n        return global_best", "name": "OAHPE", "description": "Optimized Adaptive Hybrid Particle Evolution (OAHPE) introduces efficient trial selection and reduced evaluations by merging velocity updates and differential mutation.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "21c0e717-3be7-4538-90a8-3f84512ce9cb", "metadata": {"aucs": [0.2221500879841256, 0.24307259200235876, 0.22753088061095816, 0.24857692597636427, 0.29601770125445637, 0.2804718430029084, 0.24358382528404932, 0.26508987080283997, 0.24258775345289907, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.082227127837323, 0.06183473289079067, 0.05657350636876779, 0.05784421516024818, 0.06346659854250225, 0.058558481958294606, 0.06272164829207394, 0.0667370890451271, 0.07983163563661089, 0.061189768551837886, 0.03401878213401155, 0.04019515726740086, 0.056204836077746734, 0.0475351947083098, 0.03985620650560395, 0.05748214823134146, 0.056339425010037525, 0.05542765240730274, 0.9836783223171812, 0.9677620860375415, 0.9794658301285181, 0.9690396055130268, 0.9767353672763911, 0.9684262449856995, 0.9787023398508176, 0.9746929135351794, 0.9755335618149915, 0.11220471057429382, 0.13300640995429636, 0.07484007126704195, 0.11187042710715744, 0.10998656109210136, 0.14037184893890076, 0.08615967745064412, 0.1022461273459827, 0.07646862023614198, 0.16609109912356235, 0.1405845625712594, 0.2025679442189473, 0.18615798466411448, 0.16665972691115383, 0.17518425171499497, 0.1345484664884785, 0.1743948022662516, 0.15685454085192319, 0.08205094156632153, 0.016622670644971582, 0.021950752598170253, 0.0379343016070689, 9.999999999998899e-05, 0.04978144099748261, 0.0814465816630523, 0.01939074527113227, 0.0517184424462197, 0.05373550284380546, 0.0585752738814157, 0.0005213772220001855, 0.04552429262527513, 0.004998497286513692, 0.08471960752272867, 0.0222783299266317, 0.0008080630453800586, 0.002805637690122653, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02664524528492007, 0.013623651590440433, 0.05204337835841366, 0.06630421688987043, 9.999999999998899e-05, 0.021948552249879683, 0.05375178075262388, 0.04541396083542715, 0.030733292275746837, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03176961451513305, 0.002941253580335812, 9.999999999998899e-05, 0.019111086059913074, 9.999999999998899e-05, 0.00031990107075086094, 0.03050014577305593, 0.03320293260329177, 0.024935309574795617, 0.27190800081241173, 0.2700665354644808, 0.2841595412431098, 0.20506060400710335, 0.2829855485902524, 0.24439850404544528, 0.24150191632824636, 0.21145360279107484, 0.25293214258293717, 0.06450971297520569, 0.05915195182504085, 0.06505834954339973, 0.05940480187459651, 0.0666368370171676, 0.06418051225335553, 0.04843184410425205, 0.0698931085059048, 0.05754051889579026, 0.1524170121415398, 0.15840403750402798, 0.14232447712143625, 0.17623026876365855, 0.1836377624130523, 0.1575370316483664, 0.17989141420631627, 0.14702662196205396, 0.1533234727297368, 0.1862822329694631, 0.19782961902015872, 0.18935818858721754, 0.19418964140948614, 0.19675604273380887, 0.16757549957091145, 0.19398286449366908, 0.20298787293703102, 0.19110072176323334, 0.13237224142120774, 0.12380745289889206, 0.14490108750904585, 0.12768798996087516, 0.13944662118405415, 0.1462526744001027, 0.15773730965906674, 0.16887967620644972, 0.12445639924504626, 0.15636928487862656, 0.15875296630320468, 0.19003915578761876, 0.15575853469084433, 0.156805658482577, 0.15869702615534043, 0.18871609930258315, 0.17853791915914352, 0.17062911396536873, 0.15654363172342878, 0.17401775063074287, 0.1567158023543156, 0.16536016512961982, 0.15301278934461293, 0.15853855048831034, 0.16441175747354886, 0.15337321282625305, 0.16920102317497954, 0.31098446220579024, 0.16386119318128456, 0.14790765514677573, 0.22666368519166458, 0.16399162206845197, 0.17842294459770947, 0.13093829633465526, 0.2572849545140916, 0.26408971017659166, 0.2827735889004709, 0.19029280301853357, 0.16033821630678735, 0.17019810746580444, 0.19444799727075657, 0.13938141572985097, 0.1870473501264055, 0.12613439228450551, 0.22586456954817336, 0.22176375806176185, 0.1896854841383684, 0.18965484687636291, 0.17690255866849802, 0.1891986570962516, 0.17388360028403427, 0.18730901707198633, 0.18273772054235604, 0.17811507009536454, 0.062474652646362094, 0.06038076551325178, 0.05905372775085127, 0.05119338956613351, 0.054899809793484966, 0.054712232458198895, 0.07780563860071565, 0.06507852331440322, 0.06659758630188795]}, "mutation_prompt": null}
{"id": "370fe135-c380-43ba-8fe1-adfcd830103f", "solution": "import numpy as np\n\nclass OAHPE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.7\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _evaluate_population(self, population, func):\n        return np.array([func(ind) for ind in population])\n\n    def _update_velocity(self, velocities, population, personal_best, global_best):\n        r1, r2 = np.random.rand(2, self.population_size, self.dim)\n        cognitive = self.c1 * r1 * (personal_best - population)\n        social = self.c2 * r2 * (global_best - population)\n        return velocities + cognitive + social\n\n    def _apply_bounds(self, population):\n        np.clip(population, self.lower_bound, self.upper_bound, out=population)\n\n    def _differential_mutation(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = population[indices]\n        mutant = a + self.mutation_factor * (b - c)\n        np.clip(mutant, self.lower_bound, self.upper_bound, out=mutant)\n        trial = np.where(np.random.rand(self.dim) < self.crossover_prob, mutant, population[idx])\n        np.clip(trial, self.lower_bound, self.upper_bound, out=trial)\n        return trial\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_value = self._evaluate_population(population, func)\n        \n        global_best_idx = np.argmin(personal_best_value)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_value[global_best_idx]\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            velocities = self._update_velocity(velocities, population, personal_best, global_best)\n            population += velocities\n            self._apply_bounds(population)\n\n            new_population_value = self._evaluate_population(population, func)\n            evaluations += self.population_size\n\n            for i in range(self.population_size):\n                if new_population_value[i] < personal_best_value[i]:\n                    personal_best[i] = population[i]\n                    personal_best_value[i] = new_population_value[i]\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n            for i in range(self.population_size):\n                trial = self._differential_mutation(population, i)\n                trial_value = func(trial)\n                evaluations += 1\n\n                if trial_value < personal_best_value[i]:\n                    population[i] = trial\n                    personal_best[i] = trial\n                    personal_best_value[i] = trial_value\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n                if evaluations >= self.budget:\n                    break\n        \n        return global_best", "name": "OAHPE", "description": "Optimized Adaptive Hybrid Particle Evolution (OAHPE) introduces efficient trial selection and reduced evaluations by merging velocity updates and differential mutation.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "21c0e717-3be7-4538-90a8-3f84512ce9cb", "metadata": {"aucs": [0.2221500879841256, 0.24307259200235876, 0.22753088061095816, 0.24857692597636427, 0.29601770125445637, 0.2804718430029084, 0.24358382528404932, 0.26508987080283997, 0.24258775345289907, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.082227127837323, 0.06183473289079067, 0.05657350636876779, 0.05784421516024818, 0.06346659854250225, 0.058558481958294606, 0.06272164829207394, 0.0667370890451271, 0.07983163563661089, 0.061189768551837886, 0.03401878213401155, 0.04019515726740086, 0.056204836077746734, 0.0475351947083098, 0.03985620650560395, 0.05748214823134146, 0.056339425010037525, 0.05542765240730274, 0.9836783223171812, 0.9677620860375415, 0.9794658301285181, 0.9690396055130268, 0.9767353672763911, 0.9684262449856995, 0.9787023398508176, 0.9746929135351794, 0.9755335618149915, 0.11220471057429382, 0.13300640995429636, 0.07484007126704195, 0.11187042710715744, 0.10998656109210136, 0.14037184893890076, 0.08615967745064412, 0.1022461273459827, 0.07646862023614198, 0.16609109912356235, 0.1405845625712594, 0.2025679442189473, 0.18615798466411448, 0.16665972691115383, 0.17518425171499497, 0.1345484664884785, 0.1743948022662516, 0.15685454085192319, 0.08205094156632153, 0.016622670644971582, 0.021950752598170253, 0.0379343016070689, 9.999999999998899e-05, 0.04978144099748261, 0.0814465816630523, 0.01939074527113227, 0.0517184424462197, 0.05373550284380546, 0.0585752738814157, 0.0005213772220001855, 0.04552429262527513, 0.004998497286513692, 0.08471960752272867, 0.0222783299266317, 0.0008080630453800586, 0.002805637690122653, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02664524528492007, 0.013623651590440433, 0.05204337835841366, 0.06630421688987043, 9.999999999998899e-05, 0.021948552249879683, 0.05375178075262388, 0.04541396083542715, 0.030733292275746837, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03176961451513305, 0.002941253580335812, 9.999999999998899e-05, 0.019111086059913074, 9.999999999998899e-05, 0.00031990107075086094, 0.03050014577305593, 0.03320293260329177, 0.024935309574795617, 0.27190800081241173, 0.2700665354644808, 0.2841595412431098, 0.20506060400710335, 0.2829855485902524, 0.24439850404544528, 0.24150191632824636, 0.21145360279107484, 0.25293214258293717, 0.06450971297520569, 0.05915195182504085, 0.06505834954339973, 0.05940480187459651, 0.0666368370171676, 0.06418051225335553, 0.04843184410425205, 0.0698931085059048, 0.05754051889579026, 0.1524170121415398, 0.15840403750402798, 0.14232447712143625, 0.17623026876365855, 0.1836377624130523, 0.1575370316483664, 0.17989141420631627, 0.14702662196205396, 0.1533234727297368, 0.1862822329694631, 0.19782961902015872, 0.18935818858721754, 0.19418964140948614, 0.19675604273380887, 0.16757549957091145, 0.19398286449366908, 0.20298787293703102, 0.19110072176323334, 0.13237224142120774, 0.12380745289889206, 0.14490108750904585, 0.12768798996087516, 0.13944662118405415, 0.1462526744001027, 0.15773730965906674, 0.16887967620644972, 0.12445639924504626, 0.15636928487862656, 0.15875296630320468, 0.19003915578761876, 0.15575853469084433, 0.156805658482577, 0.15869702615534043, 0.18871609930258315, 0.17853791915914352, 0.17062911396536873, 0.15654363172342878, 0.17401775063074287, 0.1567158023543156, 0.16536016512961982, 0.15301278934461293, 0.15853855048831034, 0.16441175747354886, 0.15337321282625305, 0.16920102317497954, 0.31098446220579024, 0.16386119318128456, 0.14790765514677573, 0.22666368519166458, 0.16399162206845197, 0.17842294459770947, 0.13093829633465526, 0.2572849545140916, 0.26408971017659166, 0.2827735889004709, 0.19029280301853357, 0.16033821630678735, 0.17019810746580444, 0.19444799727075657, 0.13938141572985097, 0.1870473501264055, 0.12613439228450551, 0.22586456954817336, 0.22176375806176185, 0.1896854841383684, 0.18965484687636291, 0.17690255866849802, 0.1891986570962516, 0.17388360028403427, 0.18730901707198633, 0.18273772054235604, 0.17811507009536454, 0.062474652646362094, 0.06038076551325178, 0.05905372775085127, 0.05119338956613351, 0.054899809793484966, 0.054712232458198895, 0.07780563860071565, 0.06507852331440322, 0.06659758630188795]}, "mutation_prompt": null}
{"id": "c68e1221-f148-4c8c-9653-e12793954e8f", "solution": "import numpy as np\n\nclass EAPE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.c1 = 1.4  # Slightly reduce cognitive component\n        self.c2 = 1.6  # Slightly increase social component\n        self.mutation_factor = 0.85  # Increase mutation strength slightly\n        self.crossover_prob = 0.75  # Increase crossover probability\n        self.decay_rate = 0.99  # Introduce a decay rate for adaptive behavior\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _evaluate_population(self, population, func):\n        return np.array([func(ind) for ind in population])\n\n    def _update_velocity(self, velocities, population, personal_best, global_best):\n        r1, r2 = np.random.rand(2, self.population_size, self.dim)\n        cognitive = self.c1 * r1 * (personal_best - population)\n        social = self.c2 * r2 * (global_best - population)\n        velocities = velocities * self.decay_rate  # Apply decay to velocities\n        return velocities + cognitive + social\n\n    def _apply_bounds(self, population):\n        np.clip(population, self.lower_bound, self.upper_bound, out=population)\n\n    def _differential_mutation(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = population[indices]\n        mutant = a + self.mutation_factor * (b - c)\n        np.clip(mutant, self.lower_bound, self.upper_bound, out=mutant)\n        trial = np.where(np.random.rand(self.dim) < self.crossover_prob, mutant, population[idx])\n        np.clip(trial, self.lower_bound, self.upper_bound, out=trial)\n        return trial\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_value = self._evaluate_population(population, func)\n        \n        global_best_idx = np.argmin(personal_best_value)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_value[global_best_idx]\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            velocities = self._update_velocity(velocities, population, personal_best, global_best)\n            population += velocities\n            self._apply_bounds(population)\n\n            new_population_value = self._evaluate_population(population, func)\n            evaluations += self.population_size\n\n            for i in range(self.population_size):\n                if new_population_value[i] < personal_best_value[i]:\n                    personal_best[i] = population[i]\n                    personal_best_value[i] = new_population_value[i]\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n            for i in range(self.population_size):\n                trial = self._differential_mutation(population, i)\n                trial_value = func(trial)\n                evaluations += 1\n\n                if trial_value < personal_best_value[i]:\n                    population[i] = trial\n                    personal_best[i] = trial\n                    personal_best_value[i] = trial_value\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n                if evaluations >= self.budget:\n                    break\n        \n        return global_best", "name": "EAPE", "description": "Enhanced Adaptive Particle Evolution (EAPE) optimizes search efficiency by refining update strategies and incorporating adaptive parameters.", "configspace": "", "generation": 34, "fitness": 0.1424341778618363, "feedback": "The algorithm EAPE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.19.", "error": "", "parent_id": "21c0e717-3be7-4538-90a8-3f84512ce9cb", "metadata": {"aucs": [0.21853245637580576, 0.23075795837432755, 0.235109953035602, 0.26803921510898243, 0.27391787929792855, 0.3188151990759639, 0.24718735325932462, 0.24303349915684858, 0.25226357271973987, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06461747568233767, 0.07419573516330169, 0.06759725837292807, 0.05343205581258115, 0.05548082088862938, 0.051523661080416616, 0.06493759550936007, 0.10053085760286828, 0.06069908278329983, 0.03946650967740484, 0.03929986492185722, 0.041611219063868, 0.05540517527536304, 0.04888489203149715, 0.051708736667417154, 0.062229271109538575, 0.049593743995131834, 0.0464218162117489, 0.9789494937168681, 0.9773267884884119, 0.9830812827074817, 0.9688167875688064, 0.977393994563452, 0.9683522105609119, 0.9815905865239684, 0.9768791879078963, 0.9755312772074997, 0.14757763954393, 0.11028750073506455, 0.05562212727262772, 0.12098893447002523, 0.11363479829065581, 0.13920141097711836, 0.08797701358789123, 0.08541131571373539, 0.11331021132849961, 0.15966640813316135, 0.15856134556414925, 0.16702156497177234, 0.21117382007205066, 0.17171803113288298, 0.17139961640751322, 0.12405385706397343, 0.20509856725672004, 0.15131667359967638, 0.009870288663395121, 0.015700864844681917, 0.02940964912328259, 0.03573826964758031, 0.04625432820123154, 0.005686902431601415, 0.05707153830082845, 0.049725739175904726, 0.014970884670756801, 0.04525932551302647, 0.013337098094526878, 0.02803986504942002, 9.999999999998899e-05, 0.009319738659742005, 0.07280562149082637, 0.041101561267001485, 0.002433903192798237, 0.03029592698271577, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04390504735772904, 0.00016255275813525927, 0.04354103300755252, 0.01959361015200667, 0.0038656364300373447, 0.015319137621451762, 0.015025552742219728, 0.028439628146779028, 0.03019801844164849, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009511744165284663, 9.999999999998899e-05, 0.015124651075745121, 9.999999999998899e-05, 0.008730762655800195, 0.00010989585428122783, 0.030088660785457466, 0.03337633580943333, 0.01365264295859614, 0.23208790634475218, 0.24499391909987267, 0.2507987825620256, 0.26651214468517015, 0.20106568126215496, 0.20019949434844997, 0.2590290130269184, 0.2343944970010572, 0.23124057636252693, 0.06345028896061633, 0.06574319618914815, 0.084516445172241, 0.06934763677818101, 0.0539941185860473, 0.06120755462154559, 0.07650160513524129, 0.0664561036658251, 0.0745388628916629, 0.16739288775067585, 0.11760333978995241, 0.13044574542237275, 0.17831746072749644, 0.167083339247452, 0.12446121429220114, 0.14855672497698413, 0.13705872541982556, 0.14526517900199654, 0.18208596054423665, 0.22488349621732517, 0.19397636539716945, 0.17562271530977136, 0.19560468987703317, 0.1703389957218313, 0.20028569594475176, 0.212758329263107, 0.20421508104590702, 0.1288250423810523, 0.14120531999943164, 0.14349612973395687, 0.11417840598966011, 0.15342149067565902, 0.12385955811779514, 0.15365984902905405, 0.14919319275349685, 0.132469068176866, 0.16048077512141878, 0.13440415736170985, 0.16702051263765227, 0.15301688432756033, 0.16621373528741845, 0.1509159702514311, 0.16461092097918095, 0.16454779850374457, 0.15447796269519753, 0.16037465268453766, 0.1800416003563663, 0.154324582724771, 0.1619904542451306, 0.1549927281974548, 0.15766011575579375, 0.1587242820871796, 0.16419008242790623, 0.16272751716232636, 0.22099453781924183, 0.1662312713202031, 0.14933753066738487, 0.19959908269160376, 0.1751748673617043, 0.16836109419889234, 0.13410233075450373, 0.14565863320148076, 0.2692424923063642, 0.3378105597391339, 0.1685870539128318, 0.15954501589466652, 0.20357013232080268, 0.16445110253609296, 0.13042189086770417, 0.18491445085012537, 0.11113402366767389, 0.17802330944987554, 0.1833211482790157, 0.18254919079049337, 0.17938265120429897, 0.18869112613058137, 0.17415113251816583, 0.1731833310213191, 0.17487628762520213, 0.17687954438824782, 0.18250731444974022, 0.07574878179077826, 0.047807327067732386, 0.05945349578047776, 0.058305796659168796, 0.06181464129106862, 0.06682189942647365, 0.05300535707992127, 0.05804418718068971, 0.06112154471340869]}, "mutation_prompt": null}
{"id": "a2fe4302-e7db-40bc-9e7c-5690e91ab6df", "solution": "import numpy as np\n\nclass OAHPE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.7\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _evaluate_population(self, population, func):\n        return np.array([func(ind) for ind in population])\n\n    def _update_velocity(self, velocities, population, personal_best, global_best):\n        r1, r2 = np.random.rand(2, self.population_size, self.dim)\n        cognitive = self.c1 * r1 * (personal_best - population)\n        social = self.c2 * r2 * (global_best - population)\n        return velocities + cognitive + social\n\n    def _apply_bounds(self, population):\n        np.clip(population, self.lower_bound, self.upper_bound, out=population)\n\n    def _differential_mutation(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = population[indices]\n        mutant = a + self.mutation_factor * (b - c)\n        np.clip(mutant, self.lower_bound, self.upper_bound, out=mutant)\n        trial = np.where(np.random.rand(self.dim) < self.crossover_prob, mutant, population[idx])\n        np.clip(trial, self.lower_bound, self.upper_bound, out=trial)\n        return trial\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_value = self._evaluate_population(population, func)\n        \n        global_best_idx = np.argmin(personal_best_value)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_value[global_best_idx]\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            velocities = self._update_velocity(velocities, population, personal_best, global_best)\n            population += velocities\n            self._apply_bounds(population)\n\n            new_population_value = self._evaluate_population(population, func)\n            evaluations += self.population_size\n\n            for i in range(self.population_size):\n                if new_population_value[i] < personal_best_value[i]:\n                    personal_best[i] = population[i]\n                    personal_best_value[i] = new_population_value[i]\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n            for i in range(self.population_size):\n                trial = self._differential_mutation(population, i)\n                trial_value = func(trial)\n                evaluations += 1\n\n                if trial_value < personal_best_value[i]:\n                    population[i] = trial\n                    personal_best[i] = trial\n                    personal_best_value[i] = trial_value\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n                if evaluations >= self.budget:\n                    break\n        \n        return global_best", "name": "OAHPE", "description": "Optimized Adaptive Hybrid Particle Evolution (OAHPE) introduces efficient trial selection and reduced evaluations by merging velocity updates and differential mutation.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "21c0e717-3be7-4538-90a8-3f84512ce9cb", "metadata": {"aucs": [0.2221500879841256, 0.24307259200235876, 0.22753088061095816, 0.24857692597636427, 0.29601770125445637, 0.2804718430029084, 0.24358382528404932, 0.26508987080283997, 0.24258775345289907, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.082227127837323, 0.06183473289079067, 0.05657350636876779, 0.05784421516024818, 0.06346659854250225, 0.058558481958294606, 0.06272164829207394, 0.0667370890451271, 0.07983163563661089, 0.061189768551837886, 0.03401878213401155, 0.04019515726740086, 0.056204836077746734, 0.0475351947083098, 0.03985620650560395, 0.05748214823134146, 0.056339425010037525, 0.05542765240730274, 0.9836783223171812, 0.9677620860375415, 0.9794658301285181, 0.9690396055130268, 0.9767353672763911, 0.9684262449856995, 0.9787023398508176, 0.9746929135351794, 0.9755335618149915, 0.11220471057429382, 0.13300640995429636, 0.07484007126704195, 0.11187042710715744, 0.10998656109210136, 0.14037184893890076, 0.08615967745064412, 0.1022461273459827, 0.07646862023614198, 0.16609109912356235, 0.1405845625712594, 0.2025679442189473, 0.18615798466411448, 0.16665972691115383, 0.17518425171499497, 0.1345484664884785, 0.1743948022662516, 0.15685454085192319, 0.08205094156632153, 0.016622670644971582, 0.021950752598170253, 0.0379343016070689, 9.999999999998899e-05, 0.04978144099748261, 0.0814465816630523, 0.01939074527113227, 0.0517184424462197, 0.05373550284380546, 0.0585752738814157, 0.0005213772220001855, 0.04552429262527513, 0.004998497286513692, 0.08471960752272867, 0.0222783299266317, 0.0008080630453800586, 0.002805637690122653, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02664524528492007, 0.013623651590440433, 0.05204337835841366, 0.06630421688987043, 9.999999999998899e-05, 0.021948552249879683, 0.05375178075262388, 0.04541396083542715, 0.030733292275746837, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03176961451513305, 0.002941253580335812, 9.999999999998899e-05, 0.019111086059913074, 9.999999999998899e-05, 0.00031990107075086094, 0.03050014577305593, 0.03320293260329177, 0.024935309574795617, 0.27190800081241173, 0.2700665354644808, 0.2841595412431098, 0.20506060400710335, 0.2829855485902524, 0.24439850404544528, 0.24150191632824636, 0.21145360279107484, 0.25293214258293717, 0.06450971297520569, 0.05915195182504085, 0.06505834954339973, 0.05940480187459651, 0.0666368370171676, 0.06418051225335553, 0.04843184410425205, 0.0698931085059048, 0.05754051889579026, 0.1524170121415398, 0.15840403750402798, 0.14232447712143625, 0.17623026876365855, 0.1836377624130523, 0.1575370316483664, 0.17989141420631627, 0.14702662196205396, 0.1533234727297368, 0.1862822329694631, 0.19782961902015872, 0.18935818858721754, 0.19418964140948614, 0.19675604273380887, 0.16757549957091145, 0.19398286449366908, 0.20298787293703102, 0.19110072176323334, 0.13237224142120774, 0.12380745289889206, 0.14490108750904585, 0.12768798996087516, 0.13944662118405415, 0.1462526744001027, 0.15773730965906674, 0.16887967620644972, 0.12445639924504626, 0.15636928487862656, 0.15875296630320468, 0.19003915578761876, 0.15575853469084433, 0.156805658482577, 0.15869702615534043, 0.18871609930258315, 0.17853791915914352, 0.17062911396536873, 0.15654363172342878, 0.17401775063074287, 0.1567158023543156, 0.16536016512961982, 0.15301278934461293, 0.15853855048831034, 0.16441175747354886, 0.15337321282625305, 0.16920102317497954, 0.31098446220579024, 0.16386119318128456, 0.14790765514677573, 0.22666368519166458, 0.16399162206845197, 0.17842294459770947, 0.13093829633465526, 0.2572849545140916, 0.26408971017659166, 0.2827735889004709, 0.19029280301853357, 0.16033821630678735, 0.17019810746580444, 0.19444799727075657, 0.13938141572985097, 0.1870473501264055, 0.12613439228450551, 0.22586456954817336, 0.22176375806176185, 0.1896854841383684, 0.18965484687636291, 0.17690255866849802, 0.1891986570962516, 0.17388360028403427, 0.18730901707198633, 0.18273772054235604, 0.17811507009536454, 0.062474652646362094, 0.06038076551325178, 0.05905372775085127, 0.05119338956613351, 0.054899809793484966, 0.054712232458198895, 0.07780563860071565, 0.06507852331440322, 0.06659758630188795]}, "mutation_prompt": null}
{"id": "a9c712d4-5f15-4cd6-bcac-4827825b7d1f", "solution": "import numpy as np\n\nclass OAHPE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.7\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _evaluate_population(self, population, func):\n        return np.array([func(ind) for ind in population])\n\n    def _update_velocity(self, velocities, population, personal_best, global_best):\n        r1, r2 = np.random.rand(2, self.population_size, self.dim)\n        cognitive = self.c1 * r1 * (personal_best - population)\n        social = self.c2 * r2 * (global_best - population)\n        return velocities + cognitive + social\n\n    def _apply_bounds(self, population):\n        np.clip(population, self.lower_bound, self.upper_bound, out=population)\n\n    def _differential_mutation(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = population[indices]\n        mutant = a + self.mutation_factor * (b - c)\n        np.clip(mutant, self.lower_bound, self.upper_bound, out=mutant)\n        trial = np.where(np.random.rand(self.dim) < self.crossover_prob, mutant, population[idx])\n        np.clip(trial, self.lower_bound, self.upper_bound, out=trial)\n        return trial\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_value = self._evaluate_population(population, func)\n        \n        global_best_idx = np.argmin(personal_best_value)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_value[global_best_idx]\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            velocities = self._update_velocity(velocities, population, personal_best, global_best)\n            population += velocities\n            self._apply_bounds(population)\n\n            new_population_value = self._evaluate_population(population, func)\n            evaluations += self.population_size\n\n            for i in range(self.population_size):\n                if new_population_value[i] < personal_best_value[i]:\n                    personal_best[i] = population[i]\n                    personal_best_value[i] = new_population_value[i]\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n            for i in range(self.population_size):\n                trial = self._differential_mutation(population, i)\n                trial_value = func(trial)\n                evaluations += 1\n\n                if trial_value < personal_best_value[i]:\n                    population[i] = trial\n                    personal_best[i] = trial\n                    personal_best_value[i] = trial_value\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n                if evaluations >= self.budget:\n                    break\n        \n        return global_best", "name": "OAHPE", "description": "Optimized Adaptive Hybrid Particle Evolution (OAHPE) introduces efficient trial selection and reduced evaluations by merging velocity updates and differential mutation.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "21c0e717-3be7-4538-90a8-3f84512ce9cb", "metadata": {"aucs": [0.2221500879841256, 0.24307259200235876, 0.22753088061095816, 0.24857692597636427, 0.29601770125445637, 0.2804718430029084, 0.24358382528404932, 0.26508987080283997, 0.24258775345289907, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.082227127837323, 0.06183473289079067, 0.05657350636876779, 0.05784421516024818, 0.06346659854250225, 0.058558481958294606, 0.06272164829207394, 0.0667370890451271, 0.07983163563661089, 0.061189768551837886, 0.03401878213401155, 0.04019515726740086, 0.056204836077746734, 0.0475351947083098, 0.03985620650560395, 0.05748214823134146, 0.056339425010037525, 0.05542765240730274, 0.9836783223171812, 0.9677620860375415, 0.9794658301285181, 0.9690396055130268, 0.9767353672763911, 0.9684262449856995, 0.9787023398508176, 0.9746929135351794, 0.9755335618149915, 0.11220471057429382, 0.13300640995429636, 0.07484007126704195, 0.11187042710715744, 0.10998656109210136, 0.14037184893890076, 0.08615967745064412, 0.1022461273459827, 0.07646862023614198, 0.16609109912356235, 0.1405845625712594, 0.2025679442189473, 0.18615798466411448, 0.16665972691115383, 0.17518425171499497, 0.1345484664884785, 0.1743948022662516, 0.15685454085192319, 0.08205094156632153, 0.016622670644971582, 0.021950752598170253, 0.0379343016070689, 9.999999999998899e-05, 0.04978144099748261, 0.0814465816630523, 0.01939074527113227, 0.0517184424462197, 0.05373550284380546, 0.0585752738814157, 0.0005213772220001855, 0.04552429262527513, 0.004998497286513692, 0.08471960752272867, 0.0222783299266317, 0.0008080630453800586, 0.002805637690122653, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02664524528492007, 0.013623651590440433, 0.05204337835841366, 0.06630421688987043, 9.999999999998899e-05, 0.021948552249879683, 0.05375178075262388, 0.04541396083542715, 0.030733292275746837, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03176961451513305, 0.002941253580335812, 9.999999999998899e-05, 0.019111086059913074, 9.999999999998899e-05, 0.00031990107075086094, 0.03050014577305593, 0.03320293260329177, 0.024935309574795617, 0.27190800081241173, 0.2700665354644808, 0.2841595412431098, 0.20506060400710335, 0.2829855485902524, 0.24439850404544528, 0.24150191632824636, 0.21145360279107484, 0.25293214258293717, 0.06450971297520569, 0.05915195182504085, 0.06505834954339973, 0.05940480187459651, 0.0666368370171676, 0.06418051225335553, 0.04843184410425205, 0.0698931085059048, 0.05754051889579026, 0.1524170121415398, 0.15840403750402798, 0.14232447712143625, 0.17623026876365855, 0.1836377624130523, 0.1575370316483664, 0.17989141420631627, 0.14702662196205396, 0.1533234727297368, 0.1862822329694631, 0.19782961902015872, 0.18935818858721754, 0.19418964140948614, 0.19675604273380887, 0.16757549957091145, 0.19398286449366908, 0.20298787293703102, 0.19110072176323334, 0.13237224142120774, 0.12380745289889206, 0.14490108750904585, 0.12768798996087516, 0.13944662118405415, 0.1462526744001027, 0.15773730965906674, 0.16887967620644972, 0.12445639924504626, 0.15636928487862656, 0.15875296630320468, 0.19003915578761876, 0.15575853469084433, 0.156805658482577, 0.15869702615534043, 0.18871609930258315, 0.17853791915914352, 0.17062911396536873, 0.15654363172342878, 0.17401775063074287, 0.1567158023543156, 0.16536016512961982, 0.15301278934461293, 0.15853855048831034, 0.16441175747354886, 0.15337321282625305, 0.16920102317497954, 0.31098446220579024, 0.16386119318128456, 0.14790765514677573, 0.22666368519166458, 0.16399162206845197, 0.17842294459770947, 0.13093829633465526, 0.2572849545140916, 0.26408971017659166, 0.2827735889004709, 0.19029280301853357, 0.16033821630678735, 0.17019810746580444, 0.19444799727075657, 0.13938141572985097, 0.1870473501264055, 0.12613439228450551, 0.22586456954817336, 0.22176375806176185, 0.1896854841383684, 0.18965484687636291, 0.17690255866849802, 0.1891986570962516, 0.17388360028403427, 0.18730901707198633, 0.18273772054235604, 0.17811507009536454, 0.062474652646362094, 0.06038076551325178, 0.05905372775085127, 0.05119338956613351, 0.054899809793484966, 0.054712232458198895, 0.07780563860071565, 0.06507852331440322, 0.06659758630188795]}, "mutation_prompt": null}
{"id": "896bd39a-54b5-4cea-8968-37643daf133e", "solution": "import numpy as np\n\nclass OAHPE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.7\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _evaluate_population(self, population, func):\n        return np.array([func(ind) for ind in population])\n\n    def _update_velocity(self, velocities, population, personal_best, global_best):\n        r1, r2 = np.random.rand(2, self.population_size, self.dim)\n        cognitive = self.c1 * r1 * (personal_best - population)\n        social = self.c2 * r2 * (global_best - population)\n        return velocities + cognitive + social\n\n    def _apply_bounds(self, population):\n        np.clip(population, self.lower_bound, self.upper_bound, out=population)\n\n    def _differential_mutation(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = population[indices]\n        mutant = a + self.mutation_factor * (b - c)\n        np.clip(mutant, self.lower_bound, self.upper_bound, out=mutant)\n        trial = np.where(np.random.rand(self.dim) < self.crossover_prob, mutant, population[idx])\n        np.clip(trial, self.lower_bound, self.upper_bound, out=trial)\n        return trial\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_value = self._evaluate_population(population, func)\n        \n        global_best_idx = np.argmin(personal_best_value)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_value[global_best_idx]\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            velocities = self._update_velocity(velocities, population, personal_best, global_best)\n            population += velocities\n            self._apply_bounds(population)\n\n            new_population_value = self._evaluate_population(population, func)\n            evaluations += self.population_size\n\n            for i in range(self.population_size):\n                if new_population_value[i] < personal_best_value[i]:\n                    personal_best[i] = population[i]\n                    personal_best_value[i] = new_population_value[i]\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n            for i in range(self.population_size):\n                trial = self._differential_mutation(population, i)\n                trial_value = func(trial)\n                evaluations += 1\n\n                if trial_value < personal_best_value[i]:\n                    population[i] = trial\n                    personal_best[i] = trial\n                    personal_best_value[i] = trial_value\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n                if evaluations >= self.budget:\n                    break\n        \n        return global_best", "name": "OAHPE", "description": "Optimized Adaptive Hybrid Particle Evolution (OAHPE) introduces efficient trial selection and reduced evaluations by merging velocity updates and differential mutation.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "21c0e717-3be7-4538-90a8-3f84512ce9cb", "metadata": {"aucs": [0.2221500879841256, 0.24307259200235876, 0.22753088061095816, 0.24857692597636427, 0.29601770125445637, 0.2804718430029084, 0.24358382528404932, 0.26508987080283997, 0.24258775345289907, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.082227127837323, 0.06183473289079067, 0.05657350636876779, 0.05784421516024818, 0.06346659854250225, 0.058558481958294606, 0.06272164829207394, 0.0667370890451271, 0.07983163563661089, 0.061189768551837886, 0.03401878213401155, 0.04019515726740086, 0.056204836077746734, 0.0475351947083098, 0.03985620650560395, 0.05748214823134146, 0.056339425010037525, 0.05542765240730274, 0.9836783223171812, 0.9677620860375415, 0.9794658301285181, 0.9690396055130268, 0.9767353672763911, 0.9684262449856995, 0.9787023398508176, 0.9746929135351794, 0.9755335618149915, 0.11220471057429382, 0.13300640995429636, 0.07484007126704195, 0.11187042710715744, 0.10998656109210136, 0.14037184893890076, 0.08615967745064412, 0.1022461273459827, 0.07646862023614198, 0.16609109912356235, 0.1405845625712594, 0.2025679442189473, 0.18615798466411448, 0.16665972691115383, 0.17518425171499497, 0.1345484664884785, 0.1743948022662516, 0.15685454085192319, 0.08205094156632153, 0.016622670644971582, 0.021950752598170253, 0.0379343016070689, 9.999999999998899e-05, 0.04978144099748261, 0.0814465816630523, 0.01939074527113227, 0.0517184424462197, 0.05373550284380546, 0.0585752738814157, 0.0005213772220001855, 0.04552429262527513, 0.004998497286513692, 0.08471960752272867, 0.0222783299266317, 0.0008080630453800586, 0.002805637690122653, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02664524528492007, 0.013623651590440433, 0.05204337835841366, 0.06630421688987043, 9.999999999998899e-05, 0.021948552249879683, 0.05375178075262388, 0.04541396083542715, 0.030733292275746837, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03176961451513305, 0.002941253580335812, 9.999999999998899e-05, 0.019111086059913074, 9.999999999998899e-05, 0.00031990107075086094, 0.03050014577305593, 0.03320293260329177, 0.024935309574795617, 0.27190800081241173, 0.2700665354644808, 0.2841595412431098, 0.20506060400710335, 0.2829855485902524, 0.24439850404544528, 0.24150191632824636, 0.21145360279107484, 0.25293214258293717, 0.06450971297520569, 0.05915195182504085, 0.06505834954339973, 0.05940480187459651, 0.0666368370171676, 0.06418051225335553, 0.04843184410425205, 0.0698931085059048, 0.05754051889579026, 0.1524170121415398, 0.15840403750402798, 0.14232447712143625, 0.17623026876365855, 0.1836377624130523, 0.1575370316483664, 0.17989141420631627, 0.14702662196205396, 0.1533234727297368, 0.1862822329694631, 0.19782961902015872, 0.18935818858721754, 0.19418964140948614, 0.19675604273380887, 0.16757549957091145, 0.19398286449366908, 0.20298787293703102, 0.19110072176323334, 0.13237224142120774, 0.12380745289889206, 0.14490108750904585, 0.12768798996087516, 0.13944662118405415, 0.1462526744001027, 0.15773730965906674, 0.16887967620644972, 0.12445639924504626, 0.15636928487862656, 0.15875296630320468, 0.19003915578761876, 0.15575853469084433, 0.156805658482577, 0.15869702615534043, 0.18871609930258315, 0.17853791915914352, 0.17062911396536873, 0.15654363172342878, 0.17401775063074287, 0.1567158023543156, 0.16536016512961982, 0.15301278934461293, 0.15853855048831034, 0.16441175747354886, 0.15337321282625305, 0.16920102317497954, 0.31098446220579024, 0.16386119318128456, 0.14790765514677573, 0.22666368519166458, 0.16399162206845197, 0.17842294459770947, 0.13093829633465526, 0.2572849545140916, 0.26408971017659166, 0.2827735889004709, 0.19029280301853357, 0.16033821630678735, 0.17019810746580444, 0.19444799727075657, 0.13938141572985097, 0.1870473501264055, 0.12613439228450551, 0.22586456954817336, 0.22176375806176185, 0.1896854841383684, 0.18965484687636291, 0.17690255866849802, 0.1891986570962516, 0.17388360028403427, 0.18730901707198633, 0.18273772054235604, 0.17811507009536454, 0.062474652646362094, 0.06038076551325178, 0.05905372775085127, 0.05119338956613351, 0.054899809793484966, 0.054712232458198895, 0.07780563860071565, 0.06507852331440322, 0.06659758630188795]}, "mutation_prompt": null}
{"id": "0a41c478-0a54-4e64-9b4c-a528229334e3", "solution": "import numpy as np\n\nclass OAHPE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.7\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _evaluate_population(self, population, func):\n        return np.array([func(ind) for ind in population])\n\n    def _update_velocity(self, velocities, population, personal_best, global_best):\n        r1, r2 = np.random.rand(2, self.population_size, self.dim)\n        cognitive = self.c1 * r1 * (personal_best - population)\n        social = self.c2 * r2 * (global_best - population)\n        return velocities + cognitive + social\n\n    def _apply_bounds(self, population):\n        np.clip(population, self.lower_bound, self.upper_bound, out=population)\n\n    def _differential_mutation(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = population[indices]\n        mutant = a + self.mutation_factor * (b - c)\n        np.clip(mutant, self.lower_bound, self.upper_bound, out=mutant)\n        trial = np.where(np.random.rand(self.dim) < self.crossover_prob, mutant, population[idx])\n        np.clip(trial, self.lower_bound, self.upper_bound, out=trial)\n        return trial\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_value = self._evaluate_population(population, func)\n        \n        global_best_idx = np.argmin(personal_best_value)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_value[global_best_idx]\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            velocities = self._update_velocity(velocities, population, personal_best, global_best)\n            population += velocities\n            self._apply_bounds(population)\n\n            new_population_value = self._evaluate_population(population, func)\n            evaluations += self.population_size\n\n            for i in range(self.population_size):\n                if new_population_value[i] < personal_best_value[i]:\n                    personal_best[i] = population[i]\n                    personal_best_value[i] = new_population_value[i]\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n            for i in range(self.population_size):\n                trial = self._differential_mutation(population, i)\n                trial_value = func(trial)\n                evaluations += 1\n\n                if trial_value < personal_best_value[i]:\n                    population[i] = trial\n                    personal_best[i] = trial\n                    personal_best_value[i] = trial_value\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n                if evaluations >= self.budget:\n                    break\n        \n        return global_best", "name": "OAHPE", "description": "Optimized Adaptive Hybrid Particle Evolution (OAHPE) introduces efficient trial selection and reduced evaluations by merging velocity updates and differential mutation.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "21c0e717-3be7-4538-90a8-3f84512ce9cb", "metadata": {"aucs": [0.2221500879841256, 0.24307259200235876, 0.22753088061095816, 0.24857692597636427, 0.29601770125445637, 0.2804718430029084, 0.24358382528404932, 0.26508987080283997, 0.24258775345289907, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.082227127837323, 0.06183473289079067, 0.05657350636876779, 0.05784421516024818, 0.06346659854250225, 0.058558481958294606, 0.06272164829207394, 0.0667370890451271, 0.07983163563661089, 0.061189768551837886, 0.03401878213401155, 0.04019515726740086, 0.056204836077746734, 0.0475351947083098, 0.03985620650560395, 0.05748214823134146, 0.056339425010037525, 0.05542765240730274, 0.9836783223171812, 0.9677620860375415, 0.9794658301285181, 0.9690396055130268, 0.9767353672763911, 0.9684262449856995, 0.9787023398508176, 0.9746929135351794, 0.9755335618149915, 0.11220471057429382, 0.13300640995429636, 0.07484007126704195, 0.11187042710715744, 0.10998656109210136, 0.14037184893890076, 0.08615967745064412, 0.1022461273459827, 0.07646862023614198, 0.16609109912356235, 0.1405845625712594, 0.2025679442189473, 0.18615798466411448, 0.16665972691115383, 0.17518425171499497, 0.1345484664884785, 0.1743948022662516, 0.15685454085192319, 0.08205094156632153, 0.016622670644971582, 0.021950752598170253, 0.0379343016070689, 9.999999999998899e-05, 0.04978144099748261, 0.0814465816630523, 0.01939074527113227, 0.0517184424462197, 0.05373550284380546, 0.0585752738814157, 0.0005213772220001855, 0.04552429262527513, 0.004998497286513692, 0.08471960752272867, 0.0222783299266317, 0.0008080630453800586, 0.002805637690122653, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02664524528492007, 0.013623651590440433, 0.05204337835841366, 0.06630421688987043, 9.999999999998899e-05, 0.021948552249879683, 0.05375178075262388, 0.04541396083542715, 0.030733292275746837, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03176961451513305, 0.002941253580335812, 9.999999999998899e-05, 0.019111086059913074, 9.999999999998899e-05, 0.00031990107075086094, 0.03050014577305593, 0.03320293260329177, 0.024935309574795617, 0.27190800081241173, 0.2700665354644808, 0.2841595412431098, 0.20506060400710335, 0.2829855485902524, 0.24439850404544528, 0.24150191632824636, 0.21145360279107484, 0.25293214258293717, 0.06450971297520569, 0.05915195182504085, 0.06505834954339973, 0.05940480187459651, 0.0666368370171676, 0.06418051225335553, 0.04843184410425205, 0.0698931085059048, 0.05754051889579026, 0.1524170121415398, 0.15840403750402798, 0.14232447712143625, 0.17623026876365855, 0.1836377624130523, 0.1575370316483664, 0.17989141420631627, 0.14702662196205396, 0.1533234727297368, 0.1862822329694631, 0.19782961902015872, 0.18935818858721754, 0.19418964140948614, 0.19675604273380887, 0.16757549957091145, 0.19398286449366908, 0.20298787293703102, 0.19110072176323334, 0.13237224142120774, 0.12380745289889206, 0.14490108750904585, 0.12768798996087516, 0.13944662118405415, 0.1462526744001027, 0.15773730965906674, 0.16887967620644972, 0.12445639924504626, 0.15636928487862656, 0.15875296630320468, 0.19003915578761876, 0.15575853469084433, 0.156805658482577, 0.15869702615534043, 0.18871609930258315, 0.17853791915914352, 0.17062911396536873, 0.15654363172342878, 0.17401775063074287, 0.1567158023543156, 0.16536016512961982, 0.15301278934461293, 0.15853855048831034, 0.16441175747354886, 0.15337321282625305, 0.16920102317497954, 0.31098446220579024, 0.16386119318128456, 0.14790765514677573, 0.22666368519166458, 0.16399162206845197, 0.17842294459770947, 0.13093829633465526, 0.2572849545140916, 0.26408971017659166, 0.2827735889004709, 0.19029280301853357, 0.16033821630678735, 0.17019810746580444, 0.19444799727075657, 0.13938141572985097, 0.1870473501264055, 0.12613439228450551, 0.22586456954817336, 0.22176375806176185, 0.1896854841383684, 0.18965484687636291, 0.17690255866849802, 0.1891986570962516, 0.17388360028403427, 0.18730901707198633, 0.18273772054235604, 0.17811507009536454, 0.062474652646362094, 0.06038076551325178, 0.05905372775085127, 0.05119338956613351, 0.054899809793484966, 0.054712232458198895, 0.07780563860071565, 0.06507852331440322, 0.06659758630188795]}, "mutation_prompt": null}
{"id": "6993d1a1-0ac7-47bb-9908-b8ef51888eb3", "solution": "import numpy as np\n\nclass OAHPE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.7\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _evaluate_population(self, population, func):\n        return np.array([func(ind) for ind in population])\n\n    def _update_velocity(self, velocities, population, personal_best, global_best):\n        r1, r2 = np.random.rand(2, self.population_size, self.dim)\n        cognitive = self.c1 * r1 * (personal_best - population)\n        social = self.c2 * r2 * (global_best - population)\n        return velocities + cognitive + social\n\n    def _apply_bounds(self, population):\n        np.clip(population, self.lower_bound, self.upper_bound, out=population)\n\n    def _differential_mutation(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = population[indices]\n        mutant = a + self.mutation_factor * (b - c)\n        np.clip(mutant, self.lower_bound, self.upper_bound, out=mutant)\n        trial = np.where(np.random.rand(self.dim) < self.crossover_prob, mutant, population[idx])\n        np.clip(trial, self.lower_bound, self.upper_bound, out=trial)\n        return trial\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_value = self._evaluate_population(population, func)\n        \n        global_best_idx = np.argmin(personal_best_value)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_value[global_best_idx]\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            velocities = self._update_velocity(velocities, population, personal_best, global_best)\n            population += velocities\n            self._apply_bounds(population)\n\n            new_population_value = self._evaluate_population(population, func)\n            evaluations += self.population_size\n\n            for i in range(self.population_size):\n                if new_population_value[i] < personal_best_value[i]:\n                    personal_best[i] = population[i]\n                    personal_best_value[i] = new_population_value[i]\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n            for i in range(self.population_size):\n                trial = self._differential_mutation(population, i)\n                trial_value = func(trial)\n                evaluations += 1\n\n                if trial_value < personal_best_value[i]:\n                    population[i] = trial\n                    personal_best[i] = trial\n                    personal_best_value[i] = trial_value\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n                if evaluations >= self.budget:\n                    break\n        \n        return global_best", "name": "OAHPE", "description": "Optimized Adaptive Hybrid Particle Evolution (OAHPE) introduces efficient trial selection and reduced evaluations by merging velocity updates and differential mutation.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "21c0e717-3be7-4538-90a8-3f84512ce9cb", "metadata": {"aucs": [0.2221500879841256, 0.24307259200235876, 0.22753088061095816, 0.24857692597636427, 0.29601770125445637, 0.2804718430029084, 0.24358382528404932, 0.26508987080283997, 0.24258775345289907, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.082227127837323, 0.06183473289079067, 0.05657350636876779, 0.05784421516024818, 0.06346659854250225, 0.058558481958294606, 0.06272164829207394, 0.0667370890451271, 0.07983163563661089, 0.061189768551837886, 0.03401878213401155, 0.04019515726740086, 0.056204836077746734, 0.0475351947083098, 0.03985620650560395, 0.05748214823134146, 0.056339425010037525, 0.05542765240730274, 0.9836783223171812, 0.9677620860375415, 0.9794658301285181, 0.9690396055130268, 0.9767353672763911, 0.9684262449856995, 0.9787023398508176, 0.9746929135351794, 0.9755335618149915, 0.11220471057429382, 0.13300640995429636, 0.07484007126704195, 0.11187042710715744, 0.10998656109210136, 0.14037184893890076, 0.08615967745064412, 0.1022461273459827, 0.07646862023614198, 0.16609109912356235, 0.1405845625712594, 0.2025679442189473, 0.18615798466411448, 0.16665972691115383, 0.17518425171499497, 0.1345484664884785, 0.1743948022662516, 0.15685454085192319, 0.08205094156632153, 0.016622670644971582, 0.021950752598170253, 0.0379343016070689, 9.999999999998899e-05, 0.04978144099748261, 0.0814465816630523, 0.01939074527113227, 0.0517184424462197, 0.05373550284380546, 0.0585752738814157, 0.0005213772220001855, 0.04552429262527513, 0.004998497286513692, 0.08471960752272867, 0.0222783299266317, 0.0008080630453800586, 0.002805637690122653, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02664524528492007, 0.013623651590440433, 0.05204337835841366, 0.06630421688987043, 9.999999999998899e-05, 0.021948552249879683, 0.05375178075262388, 0.04541396083542715, 0.030733292275746837, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03176961451513305, 0.002941253580335812, 9.999999999998899e-05, 0.019111086059913074, 9.999999999998899e-05, 0.00031990107075086094, 0.03050014577305593, 0.03320293260329177, 0.024935309574795617, 0.27190800081241173, 0.2700665354644808, 0.2841595412431098, 0.20506060400710335, 0.2829855485902524, 0.24439850404544528, 0.24150191632824636, 0.21145360279107484, 0.25293214258293717, 0.06450971297520569, 0.05915195182504085, 0.06505834954339973, 0.05940480187459651, 0.0666368370171676, 0.06418051225335553, 0.04843184410425205, 0.0698931085059048, 0.05754051889579026, 0.1524170121415398, 0.15840403750402798, 0.14232447712143625, 0.17623026876365855, 0.1836377624130523, 0.1575370316483664, 0.17989141420631627, 0.14702662196205396, 0.1533234727297368, 0.1862822329694631, 0.19782961902015872, 0.18935818858721754, 0.19418964140948614, 0.19675604273380887, 0.16757549957091145, 0.19398286449366908, 0.20298787293703102, 0.19110072176323334, 0.13237224142120774, 0.12380745289889206, 0.14490108750904585, 0.12768798996087516, 0.13944662118405415, 0.1462526744001027, 0.15773730965906674, 0.16887967620644972, 0.12445639924504626, 0.15636928487862656, 0.15875296630320468, 0.19003915578761876, 0.15575853469084433, 0.156805658482577, 0.15869702615534043, 0.18871609930258315, 0.17853791915914352, 0.17062911396536873, 0.15654363172342878, 0.17401775063074287, 0.1567158023543156, 0.16536016512961982, 0.15301278934461293, 0.15853855048831034, 0.16441175747354886, 0.15337321282625305, 0.16920102317497954, 0.31098446220579024, 0.16386119318128456, 0.14790765514677573, 0.22666368519166458, 0.16399162206845197, 0.17842294459770947, 0.13093829633465526, 0.2572849545140916, 0.26408971017659166, 0.2827735889004709, 0.19029280301853357, 0.16033821630678735, 0.17019810746580444, 0.19444799727075657, 0.13938141572985097, 0.1870473501264055, 0.12613439228450551, 0.22586456954817336, 0.22176375806176185, 0.1896854841383684, 0.18965484687636291, 0.17690255866849802, 0.1891986570962516, 0.17388360028403427, 0.18730901707198633, 0.18273772054235604, 0.17811507009536454, 0.062474652646362094, 0.06038076551325178, 0.05905372775085127, 0.05119338956613351, 0.054899809793484966, 0.054712232458198895, 0.07780563860071565, 0.06507852331440322, 0.06659758630188795]}, "mutation_prompt": null}
{"id": "8a1b0a6d-c294-45f0-afde-c0f03bb10368", "solution": "import numpy as np\n\nclass OAHPE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.7\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _evaluate_population(self, population, func):\n        return np.array([func(ind) for ind in population])\n\n    def _update_velocity(self, velocities, population, personal_best, global_best):\n        r1, r2 = np.random.rand(2, self.population_size, self.dim)\n        cognitive = self.c1 * r1 * (personal_best - population)\n        social = self.c2 * r2 * (global_best - population)\n        return velocities + cognitive + social\n\n    def _apply_bounds(self, population):\n        np.clip(population, self.lower_bound, self.upper_bound, out=population)\n\n    def _differential_mutation(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = population[indices]\n        mutant = a + self.mutation_factor * (b - c)\n        np.clip(mutant, self.lower_bound, self.upper_bound, out=mutant)\n        trial = np.where(np.random.rand(self.dim) < self.crossover_prob, mutant, population[idx])\n        np.clip(trial, self.lower_bound, self.upper_bound, out=trial)\n        return trial\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_value = self._evaluate_population(population, func)\n        \n        global_best_idx = np.argmin(personal_best_value)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_value[global_best_idx]\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            velocities = self._update_velocity(velocities, population, personal_best, global_best)\n            population += velocities\n            self._apply_bounds(population)\n\n            new_population_value = self._evaluate_population(population, func)\n            evaluations += self.population_size\n\n            for i in range(self.population_size):\n                if new_population_value[i] < personal_best_value[i]:\n                    personal_best[i] = population[i]\n                    personal_best_value[i] = new_population_value[i]\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n            for i in range(self.population_size):\n                trial = self._differential_mutation(population, i)\n                trial_value = func(trial)\n                evaluations += 1\n\n                if trial_value < personal_best_value[i]:\n                    population[i] = trial\n                    personal_best[i] = trial\n                    personal_best_value[i] = trial_value\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n                if evaluations >= self.budget:\n                    break\n        \n        return global_best", "name": "OAHPE", "description": "Optimized Adaptive Hybrid Particle Evolution (OAHPE) introduces efficient trial selection and reduced evaluations by merging velocity updates and differential mutation.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "21c0e717-3be7-4538-90a8-3f84512ce9cb", "metadata": {"aucs": [0.2221500879841256, 0.24307259200235876, 0.22753088061095816, 0.24857692597636427, 0.29601770125445637, 0.2804718430029084, 0.24358382528404932, 0.26508987080283997, 0.24258775345289907, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.082227127837323, 0.06183473289079067, 0.05657350636876779, 0.05784421516024818, 0.06346659854250225, 0.058558481958294606, 0.06272164829207394, 0.0667370890451271, 0.07983163563661089, 0.061189768551837886, 0.03401878213401155, 0.04019515726740086, 0.056204836077746734, 0.0475351947083098, 0.03985620650560395, 0.05748214823134146, 0.056339425010037525, 0.05542765240730274, 0.9836783223171812, 0.9677620860375415, 0.9794658301285181, 0.9690396055130268, 0.9767353672763911, 0.9684262449856995, 0.9787023398508176, 0.9746929135351794, 0.9755335618149915, 0.11220471057429382, 0.13300640995429636, 0.07484007126704195, 0.11187042710715744, 0.10998656109210136, 0.14037184893890076, 0.08615967745064412, 0.1022461273459827, 0.07646862023614198, 0.16609109912356235, 0.1405845625712594, 0.2025679442189473, 0.18615798466411448, 0.16665972691115383, 0.17518425171499497, 0.1345484664884785, 0.1743948022662516, 0.15685454085192319, 0.08205094156632153, 0.016622670644971582, 0.021950752598170253, 0.0379343016070689, 9.999999999998899e-05, 0.04978144099748261, 0.0814465816630523, 0.01939074527113227, 0.0517184424462197, 0.05373550284380546, 0.0585752738814157, 0.0005213772220001855, 0.04552429262527513, 0.004998497286513692, 0.08471960752272867, 0.0222783299266317, 0.0008080630453800586, 0.002805637690122653, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02664524528492007, 0.013623651590440433, 0.05204337835841366, 0.06630421688987043, 9.999999999998899e-05, 0.021948552249879683, 0.05375178075262388, 0.04541396083542715, 0.030733292275746837, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03176961451513305, 0.002941253580335812, 9.999999999998899e-05, 0.019111086059913074, 9.999999999998899e-05, 0.00031990107075086094, 0.03050014577305593, 0.03320293260329177, 0.024935309574795617, 0.27190800081241173, 0.2700665354644808, 0.2841595412431098, 0.20506060400710335, 0.2829855485902524, 0.24439850404544528, 0.24150191632824636, 0.21145360279107484, 0.25293214258293717, 0.06450971297520569, 0.05915195182504085, 0.06505834954339973, 0.05940480187459651, 0.0666368370171676, 0.06418051225335553, 0.04843184410425205, 0.0698931085059048, 0.05754051889579026, 0.1524170121415398, 0.15840403750402798, 0.14232447712143625, 0.17623026876365855, 0.1836377624130523, 0.1575370316483664, 0.17989141420631627, 0.14702662196205396, 0.1533234727297368, 0.1862822329694631, 0.19782961902015872, 0.18935818858721754, 0.19418964140948614, 0.19675604273380887, 0.16757549957091145, 0.19398286449366908, 0.20298787293703102, 0.19110072176323334, 0.13237224142120774, 0.12380745289889206, 0.14490108750904585, 0.12768798996087516, 0.13944662118405415, 0.1462526744001027, 0.15773730965906674, 0.16887967620644972, 0.12445639924504626, 0.15636928487862656, 0.15875296630320468, 0.19003915578761876, 0.15575853469084433, 0.156805658482577, 0.15869702615534043, 0.18871609930258315, 0.17853791915914352, 0.17062911396536873, 0.15654363172342878, 0.17401775063074287, 0.1567158023543156, 0.16536016512961982, 0.15301278934461293, 0.15853855048831034, 0.16441175747354886, 0.15337321282625305, 0.16920102317497954, 0.31098446220579024, 0.16386119318128456, 0.14790765514677573, 0.22666368519166458, 0.16399162206845197, 0.17842294459770947, 0.13093829633465526, 0.2572849545140916, 0.26408971017659166, 0.2827735889004709, 0.19029280301853357, 0.16033821630678735, 0.17019810746580444, 0.19444799727075657, 0.13938141572985097, 0.1870473501264055, 0.12613439228450551, 0.22586456954817336, 0.22176375806176185, 0.1896854841383684, 0.18965484687636291, 0.17690255866849802, 0.1891986570962516, 0.17388360028403427, 0.18730901707198633, 0.18273772054235604, 0.17811507009536454, 0.062474652646362094, 0.06038076551325178, 0.05905372775085127, 0.05119338956613351, 0.054899809793484966, 0.054712232458198895, 0.07780563860071565, 0.06507852331440322, 0.06659758630188795]}, "mutation_prompt": null}
{"id": "803c92ac-a877-4e04-a8cf-498c7cb0129b", "solution": "import numpy as np\n\nclass OAHPE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.7\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _evaluate_population(self, population, func):\n        return np.array([func(ind) for ind in population])\n\n    def _update_velocity(self, velocities, population, personal_best, global_best):\n        r1, r2 = np.random.rand(2, self.population_size, self.dim)\n        cognitive = self.c1 * r1 * (personal_best - population)\n        social = self.c2 * r2 * (global_best - population)\n        return velocities + cognitive + social\n\n    def _apply_bounds(self, population):\n        np.clip(population, self.lower_bound, self.upper_bound, out=population)\n\n    def _differential_mutation(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = population[indices]\n        mutant = a + self.mutation_factor * (b - c)\n        np.clip(mutant, self.lower_bound, self.upper_bound, out=mutant)\n        trial = np.where(np.random.rand(self.dim) < self.crossover_prob, mutant, population[idx])\n        np.clip(trial, self.lower_bound, self.upper_bound, out=trial)\n        return trial\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_value = self._evaluate_population(population, func)\n        \n        global_best_idx = np.argmin(personal_best_value)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_value[global_best_idx]\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            velocities = self._update_velocity(velocities, population, personal_best, global_best)\n            population += velocities\n            self._apply_bounds(population)\n\n            new_population_value = self._evaluate_population(population, func)\n            evaluations += self.population_size\n\n            for i in range(self.population_size):\n                if new_population_value[i] < personal_best_value[i]:\n                    personal_best[i] = population[i]\n                    personal_best_value[i] = new_population_value[i]\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n            for i in range(self.population_size):\n                trial = self._differential_mutation(population, i)\n                trial_value = func(trial)\n                evaluations += 1\n\n                if trial_value < personal_best_value[i]:\n                    population[i] = trial\n                    personal_best[i] = trial\n                    personal_best_value[i] = trial_value\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n                if evaluations >= self.budget:\n                    break\n        \n        return global_best", "name": "OAHPE", "description": "Optimized Adaptive Hybrid Particle Evolution (OAHPE) introduces efficient trial selection and reduced evaluations by merging velocity updates and differential mutation.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "21c0e717-3be7-4538-90a8-3f84512ce9cb", "metadata": {"aucs": [0.2221500879841256, 0.24307259200235876, 0.22753088061095816, 0.24857692597636427, 0.29601770125445637, 0.2804718430029084, 0.24358382528404932, 0.26508987080283997, 0.24258775345289907, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.082227127837323, 0.06183473289079067, 0.05657350636876779, 0.05784421516024818, 0.06346659854250225, 0.058558481958294606, 0.06272164829207394, 0.0667370890451271, 0.07983163563661089, 0.061189768551837886, 0.03401878213401155, 0.04019515726740086, 0.056204836077746734, 0.0475351947083098, 0.03985620650560395, 0.05748214823134146, 0.056339425010037525, 0.05542765240730274, 0.9836783223171812, 0.9677620860375415, 0.9794658301285181, 0.9690396055130268, 0.9767353672763911, 0.9684262449856995, 0.9787023398508176, 0.9746929135351794, 0.9755335618149915, 0.11220471057429382, 0.13300640995429636, 0.07484007126704195, 0.11187042710715744, 0.10998656109210136, 0.14037184893890076, 0.08615967745064412, 0.1022461273459827, 0.07646862023614198, 0.16609109912356235, 0.1405845625712594, 0.2025679442189473, 0.18615798466411448, 0.16665972691115383, 0.17518425171499497, 0.1345484664884785, 0.1743948022662516, 0.15685454085192319, 0.08205094156632153, 0.016622670644971582, 0.021950752598170253, 0.0379343016070689, 9.999999999998899e-05, 0.04978144099748261, 0.0814465816630523, 0.01939074527113227, 0.0517184424462197, 0.05373550284380546, 0.0585752738814157, 0.0005213772220001855, 0.04552429262527513, 0.004998497286513692, 0.08471960752272867, 0.0222783299266317, 0.0008080630453800586, 0.002805637690122653, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02664524528492007, 0.013623651590440433, 0.05204337835841366, 0.06630421688987043, 9.999999999998899e-05, 0.021948552249879683, 0.05375178075262388, 0.04541396083542715, 0.030733292275746837, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03176961451513305, 0.002941253580335812, 9.999999999998899e-05, 0.019111086059913074, 9.999999999998899e-05, 0.00031990107075086094, 0.03050014577305593, 0.03320293260329177, 0.024935309574795617, 0.27190800081241173, 0.2700665354644808, 0.2841595412431098, 0.20506060400710335, 0.2829855485902524, 0.24439850404544528, 0.24150191632824636, 0.21145360279107484, 0.25293214258293717, 0.06450971297520569, 0.05915195182504085, 0.06505834954339973, 0.05940480187459651, 0.0666368370171676, 0.06418051225335553, 0.04843184410425205, 0.0698931085059048, 0.05754051889579026, 0.1524170121415398, 0.15840403750402798, 0.14232447712143625, 0.17623026876365855, 0.1836377624130523, 0.1575370316483664, 0.17989141420631627, 0.14702662196205396, 0.1533234727297368, 0.1862822329694631, 0.19782961902015872, 0.18935818858721754, 0.19418964140948614, 0.19675604273380887, 0.16757549957091145, 0.19398286449366908, 0.20298787293703102, 0.19110072176323334, 0.13237224142120774, 0.12380745289889206, 0.14490108750904585, 0.12768798996087516, 0.13944662118405415, 0.1462526744001027, 0.15773730965906674, 0.16887967620644972, 0.12445639924504626, 0.15636928487862656, 0.15875296630320468, 0.19003915578761876, 0.15575853469084433, 0.156805658482577, 0.15869702615534043, 0.18871609930258315, 0.17853791915914352, 0.17062911396536873, 0.15654363172342878, 0.17401775063074287, 0.1567158023543156, 0.16536016512961982, 0.15301278934461293, 0.15853855048831034, 0.16441175747354886, 0.15337321282625305, 0.16920102317497954, 0.31098446220579024, 0.16386119318128456, 0.14790765514677573, 0.22666368519166458, 0.16399162206845197, 0.17842294459770947, 0.13093829633465526, 0.2572849545140916, 0.26408971017659166, 0.2827735889004709, 0.19029280301853357, 0.16033821630678735, 0.17019810746580444, 0.19444799727075657, 0.13938141572985097, 0.1870473501264055, 0.12613439228450551, 0.22586456954817336, 0.22176375806176185, 0.1896854841383684, 0.18965484687636291, 0.17690255866849802, 0.1891986570962516, 0.17388360028403427, 0.18730901707198633, 0.18273772054235604, 0.17811507009536454, 0.062474652646362094, 0.06038076551325178, 0.05905372775085127, 0.05119338956613351, 0.054899809793484966, 0.054712232458198895, 0.07780563860071565, 0.06507852331440322, 0.06659758630188795]}, "mutation_prompt": null}
{"id": "3e21c30c-b20a-472a-b7cf-8d285c369997", "solution": "import numpy as np\n\nclass OAHPE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.7\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _evaluate_population(self, population, func):\n        return np.array([func(ind) for ind in population])\n\n    def _update_velocity(self, velocities, population, personal_best, global_best):\n        r1, r2 = np.random.rand(2, self.population_size, self.dim)\n        cognitive = self.c1 * r1 * (personal_best - population)\n        social = self.c2 * r2 * (global_best - population)\n        return velocities + cognitive + social\n\n    def _apply_bounds(self, population):\n        np.clip(population, self.lower_bound, self.upper_bound, out=population)\n\n    def _differential_mutation(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = population[indices]\n        mutant = a + self.mutation_factor * (b - c)\n        np.clip(mutant, self.lower_bound, self.upper_bound, out=mutant)\n        trial = np.where(np.random.rand(self.dim) < self.crossover_prob, mutant, population[idx])\n        np.clip(trial, self.lower_bound, self.upper_bound, out=trial)\n        return trial\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_value = self._evaluate_population(population, func)\n        \n        global_best_idx = np.argmin(personal_best_value)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_value[global_best_idx]\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            velocities = self._update_velocity(velocities, population, personal_best, global_best)\n            population += velocities\n            self._apply_bounds(population)\n\n            new_population_value = self._evaluate_population(population, func)\n            evaluations += self.population_size\n\n            for i in range(self.population_size):\n                if new_population_value[i] < personal_best_value[i]:\n                    personal_best[i] = population[i]\n                    personal_best_value[i] = new_population_value[i]\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n            for i in range(self.population_size):\n                trial = self._differential_mutation(population, i)\n                trial_value = func(trial)\n                evaluations += 1\n\n                if trial_value < personal_best_value[i]:\n                    population[i] = trial\n                    personal_best[i] = trial\n                    personal_best_value[i] = trial_value\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n                if evaluations >= self.budget:\n                    break\n        \n        return global_best", "name": "OAHPE", "description": "Optimized Adaptive Hybrid Particle Evolution (OAHPE) introduces efficient trial selection and reduced evaluations by merging velocity updates and differential mutation.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "21c0e717-3be7-4538-90a8-3f84512ce9cb", "metadata": {"aucs": [0.2221500879841256, 0.24307259200235876, 0.22753088061095816, 0.24857692597636427, 0.29601770125445637, 0.2804718430029084, 0.24358382528404932, 0.26508987080283997, 0.24258775345289907, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.082227127837323, 0.06183473289079067, 0.05657350636876779, 0.05784421516024818, 0.06346659854250225, 0.058558481958294606, 0.06272164829207394, 0.0667370890451271, 0.07983163563661089, 0.061189768551837886, 0.03401878213401155, 0.04019515726740086, 0.056204836077746734, 0.0475351947083098, 0.03985620650560395, 0.05748214823134146, 0.056339425010037525, 0.05542765240730274, 0.9836783223171812, 0.9677620860375415, 0.9794658301285181, 0.9690396055130268, 0.9767353672763911, 0.9684262449856995, 0.9787023398508176, 0.9746929135351794, 0.9755335618149915, 0.11220471057429382, 0.13300640995429636, 0.07484007126704195, 0.11187042710715744, 0.10998656109210136, 0.14037184893890076, 0.08615967745064412, 0.1022461273459827, 0.07646862023614198, 0.16609109912356235, 0.1405845625712594, 0.2025679442189473, 0.18615798466411448, 0.16665972691115383, 0.17518425171499497, 0.1345484664884785, 0.1743948022662516, 0.15685454085192319, 0.08205094156632153, 0.016622670644971582, 0.021950752598170253, 0.0379343016070689, 9.999999999998899e-05, 0.04978144099748261, 0.0814465816630523, 0.01939074527113227, 0.0517184424462197, 0.05373550284380546, 0.0585752738814157, 0.0005213772220001855, 0.04552429262527513, 0.004998497286513692, 0.08471960752272867, 0.0222783299266317, 0.0008080630453800586, 0.002805637690122653, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02664524528492007, 0.013623651590440433, 0.05204337835841366, 0.06630421688987043, 9.999999999998899e-05, 0.021948552249879683, 0.05375178075262388, 0.04541396083542715, 0.030733292275746837, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03176961451513305, 0.002941253580335812, 9.999999999998899e-05, 0.019111086059913074, 9.999999999998899e-05, 0.00031990107075086094, 0.03050014577305593, 0.03320293260329177, 0.024935309574795617, 0.27190800081241173, 0.2700665354644808, 0.2841595412431098, 0.20506060400710335, 0.2829855485902524, 0.24439850404544528, 0.24150191632824636, 0.21145360279107484, 0.25293214258293717, 0.06450971297520569, 0.05915195182504085, 0.06505834954339973, 0.05940480187459651, 0.0666368370171676, 0.06418051225335553, 0.04843184410425205, 0.0698931085059048, 0.05754051889579026, 0.1524170121415398, 0.15840403750402798, 0.14232447712143625, 0.17623026876365855, 0.1836377624130523, 0.1575370316483664, 0.17989141420631627, 0.14702662196205396, 0.1533234727297368, 0.1862822329694631, 0.19782961902015872, 0.18935818858721754, 0.19418964140948614, 0.19675604273380887, 0.16757549957091145, 0.19398286449366908, 0.20298787293703102, 0.19110072176323334, 0.13237224142120774, 0.12380745289889206, 0.14490108750904585, 0.12768798996087516, 0.13944662118405415, 0.1462526744001027, 0.15773730965906674, 0.16887967620644972, 0.12445639924504626, 0.15636928487862656, 0.15875296630320468, 0.19003915578761876, 0.15575853469084433, 0.156805658482577, 0.15869702615534043, 0.18871609930258315, 0.17853791915914352, 0.17062911396536873, 0.15654363172342878, 0.17401775063074287, 0.1567158023543156, 0.16536016512961982, 0.15301278934461293, 0.15853855048831034, 0.16441175747354886, 0.15337321282625305, 0.16920102317497954, 0.31098446220579024, 0.16386119318128456, 0.14790765514677573, 0.22666368519166458, 0.16399162206845197, 0.17842294459770947, 0.13093829633465526, 0.2572849545140916, 0.26408971017659166, 0.2827735889004709, 0.19029280301853357, 0.16033821630678735, 0.17019810746580444, 0.19444799727075657, 0.13938141572985097, 0.1870473501264055, 0.12613439228450551, 0.22586456954817336, 0.22176375806176185, 0.1896854841383684, 0.18965484687636291, 0.17690255866849802, 0.1891986570962516, 0.17388360028403427, 0.18730901707198633, 0.18273772054235604, 0.17811507009536454, 0.062474652646362094, 0.06038076551325178, 0.05905372775085127, 0.05119338956613351, 0.054899809793484966, 0.054712232458198895, 0.07780563860071565, 0.06507852331440322, 0.06659758630188795]}, "mutation_prompt": null}
{"id": "666543b4-a84a-4aa0-8889-e86054175651", "solution": "import numpy as np\n\nclass OAHPE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.7\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _evaluate_population(self, population, func):\n        return np.array([func(ind) for ind in population])\n\n    def _update_velocity(self, velocities, population, personal_best, global_best):\n        r1, r2 = np.random.rand(2, self.population_size, self.dim)\n        cognitive = self.c1 * r1 * (personal_best - population)\n        social = self.c2 * r2 * (global_best - population)\n        return velocities + cognitive + social\n\n    def _apply_bounds(self, population):\n        np.clip(population, self.lower_bound, self.upper_bound, out=population)\n\n    def _differential_mutation(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = population[indices]\n        mutant = a + self.mutation_factor * (b - c)\n        np.clip(mutant, self.lower_bound, self.upper_bound, out=mutant)\n        trial = np.where(np.random.rand(self.dim) < self.crossover_prob, mutant, population[idx])\n        np.clip(trial, self.lower_bound, self.upper_bound, out=trial)\n        return trial\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_value = self._evaluate_population(population, func)\n        \n        global_best_idx = np.argmin(personal_best_value)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_value[global_best_idx]\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            velocities = self._update_velocity(velocities, population, personal_best, global_best)\n            population += velocities\n            self._apply_bounds(population)\n\n            new_population_value = self._evaluate_population(population, func)\n            evaluations += self.population_size\n\n            for i in range(self.population_size):\n                if new_population_value[i] < personal_best_value[i]:\n                    personal_best[i] = population[i]\n                    personal_best_value[i] = new_population_value[i]\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n            for i in range(self.population_size):\n                trial = self._differential_mutation(population, i)\n                trial_value = func(trial)\n                evaluations += 1\n\n                if trial_value < personal_best_value[i]:\n                    population[i] = trial\n                    personal_best[i] = trial\n                    personal_best_value[i] = trial_value\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n                if evaluations >= self.budget:\n                    break\n        \n        return global_best", "name": "OAHPE", "description": "Optimized Adaptive Hybrid Particle Evolution (OAHPE) introduces efficient trial selection and reduced evaluations by merging velocity updates and differential mutation.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "21c0e717-3be7-4538-90a8-3f84512ce9cb", "metadata": {"aucs": [0.2221500879841256, 0.24307259200235876, 0.22753088061095816, 0.24857692597636427, 0.29601770125445637, 0.2804718430029084, 0.24358382528404932, 0.26508987080283997, 0.24258775345289907, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.082227127837323, 0.06183473289079067, 0.05657350636876779, 0.05784421516024818, 0.06346659854250225, 0.058558481958294606, 0.06272164829207394, 0.0667370890451271, 0.07983163563661089, 0.061189768551837886, 0.03401878213401155, 0.04019515726740086, 0.056204836077746734, 0.0475351947083098, 0.03985620650560395, 0.05748214823134146, 0.056339425010037525, 0.05542765240730274, 0.9836783223171812, 0.9677620860375415, 0.9794658301285181, 0.9690396055130268, 0.9767353672763911, 0.9684262449856995, 0.9787023398508176, 0.9746929135351794, 0.9755335618149915, 0.11220471057429382, 0.13300640995429636, 0.07484007126704195, 0.11187042710715744, 0.10998656109210136, 0.14037184893890076, 0.08615967745064412, 0.1022461273459827, 0.07646862023614198, 0.16609109912356235, 0.1405845625712594, 0.2025679442189473, 0.18615798466411448, 0.16665972691115383, 0.17518425171499497, 0.1345484664884785, 0.1743948022662516, 0.15685454085192319, 0.08205094156632153, 0.016622670644971582, 0.021950752598170253, 0.0379343016070689, 9.999999999998899e-05, 0.04978144099748261, 0.0814465816630523, 0.01939074527113227, 0.0517184424462197, 0.05373550284380546, 0.0585752738814157, 0.0005213772220001855, 0.04552429262527513, 0.004998497286513692, 0.08471960752272867, 0.0222783299266317, 0.0008080630453800586, 0.002805637690122653, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02664524528492007, 0.013623651590440433, 0.05204337835841366, 0.06630421688987043, 9.999999999998899e-05, 0.021948552249879683, 0.05375178075262388, 0.04541396083542715, 0.030733292275746837, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03176961451513305, 0.002941253580335812, 9.999999999998899e-05, 0.019111086059913074, 9.999999999998899e-05, 0.00031990107075086094, 0.03050014577305593, 0.03320293260329177, 0.024935309574795617, 0.27190800081241173, 0.2700665354644808, 0.2841595412431098, 0.20506060400710335, 0.2829855485902524, 0.24439850404544528, 0.24150191632824636, 0.21145360279107484, 0.25293214258293717, 0.06450971297520569, 0.05915195182504085, 0.06505834954339973, 0.05940480187459651, 0.0666368370171676, 0.06418051225335553, 0.04843184410425205, 0.0698931085059048, 0.05754051889579026, 0.1524170121415398, 0.15840403750402798, 0.14232447712143625, 0.17623026876365855, 0.1836377624130523, 0.1575370316483664, 0.17989141420631627, 0.14702662196205396, 0.1533234727297368, 0.1862822329694631, 0.19782961902015872, 0.18935818858721754, 0.19418964140948614, 0.19675604273380887, 0.16757549957091145, 0.19398286449366908, 0.20298787293703102, 0.19110072176323334, 0.13237224142120774, 0.12380745289889206, 0.14490108750904585, 0.12768798996087516, 0.13944662118405415, 0.1462526744001027, 0.15773730965906674, 0.16887967620644972, 0.12445639924504626, 0.15636928487862656, 0.15875296630320468, 0.19003915578761876, 0.15575853469084433, 0.156805658482577, 0.15869702615534043, 0.18871609930258315, 0.17853791915914352, 0.17062911396536873, 0.15654363172342878, 0.17401775063074287, 0.1567158023543156, 0.16536016512961982, 0.15301278934461293, 0.15853855048831034, 0.16441175747354886, 0.15337321282625305, 0.16920102317497954, 0.31098446220579024, 0.16386119318128456, 0.14790765514677573, 0.22666368519166458, 0.16399162206845197, 0.17842294459770947, 0.13093829633465526, 0.2572849545140916, 0.26408971017659166, 0.2827735889004709, 0.19029280301853357, 0.16033821630678735, 0.17019810746580444, 0.19444799727075657, 0.13938141572985097, 0.1870473501264055, 0.12613439228450551, 0.22586456954817336, 0.22176375806176185, 0.1896854841383684, 0.18965484687636291, 0.17690255866849802, 0.1891986570962516, 0.17388360028403427, 0.18730901707198633, 0.18273772054235604, 0.17811507009536454, 0.062474652646362094, 0.06038076551325178, 0.05905372775085127, 0.05119338956613351, 0.054899809793484966, 0.054712232458198895, 0.07780563860071565, 0.06507852331440322, 0.06659758630188795]}, "mutation_prompt": null}
{"id": "3f53e357-ea6f-4586-ad66-9c563edd4a1d", "solution": "import numpy as np\n\nclass OAHPE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.7\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _evaluate_population(self, population, func):\n        return np.array([func(ind) for ind in population])\n\n    def _update_velocity(self, velocities, population, personal_best, global_best):\n        r1, r2 = np.random.rand(2, self.population_size, self.dim)\n        cognitive = self.c1 * r1 * (personal_best - population)\n        social = self.c2 * r2 * (global_best - population)\n        return velocities + cognitive + social\n\n    def _apply_bounds(self, population):\n        np.clip(population, self.lower_bound, self.upper_bound, out=population)\n\n    def _differential_mutation(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = population[indices]\n        mutant = a + self.mutation_factor * (b - c)\n        np.clip(mutant, self.lower_bound, self.upper_bound, out=mutant)\n        trial = np.where(np.random.rand(self.dim) < self.crossover_prob, mutant, population[idx])\n        np.clip(trial, self.lower_bound, self.upper_bound, out=trial)\n        return trial\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_value = self._evaluate_population(population, func)\n        \n        global_best_idx = np.argmin(personal_best_value)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_value[global_best_idx]\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            velocities = self._update_velocity(velocities, population, personal_best, global_best)\n            population += velocities\n            self._apply_bounds(population)\n\n            new_population_value = self._evaluate_population(population, func)\n            evaluations += self.population_size\n\n            for i in range(self.population_size):\n                if new_population_value[i] < personal_best_value[i]:\n                    personal_best[i] = population[i]\n                    personal_best_value[i] = new_population_value[i]\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n            for i in range(self.population_size):\n                trial = self._differential_mutation(population, i)\n                trial_value = func(trial)\n                evaluations += 1\n\n                if trial_value < personal_best_value[i]:\n                    population[i] = trial\n                    personal_best[i] = trial\n                    personal_best_value[i] = trial_value\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n                if evaluations >= self.budget:\n                    break\n        \n        return global_best", "name": "OAHPE", "description": "Optimized Adaptive Hybrid Particle Evolution (OAHPE) introduces efficient trial selection and reduced evaluations by merging velocity updates and differential mutation.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "21c0e717-3be7-4538-90a8-3f84512ce9cb", "metadata": {"aucs": [0.2221500879841256, 0.24307259200235876, 0.22753088061095816, 0.24857692597636427, 0.29601770125445637, 0.2804718430029084, 0.24358382528404932, 0.26508987080283997, 0.24258775345289907, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.082227127837323, 0.06183473289079067, 0.05657350636876779, 0.05784421516024818, 0.06346659854250225, 0.058558481958294606, 0.06272164829207394, 0.0667370890451271, 0.07983163563661089, 0.061189768551837886, 0.03401878213401155, 0.04019515726740086, 0.056204836077746734, 0.0475351947083098, 0.03985620650560395, 0.05748214823134146, 0.056339425010037525, 0.05542765240730274, 0.9836783223171812, 0.9677620860375415, 0.9794658301285181, 0.9690396055130268, 0.9767353672763911, 0.9684262449856995, 0.9787023398508176, 0.9746929135351794, 0.9755335618149915, 0.11220471057429382, 0.13300640995429636, 0.07484007126704195, 0.11187042710715744, 0.10998656109210136, 0.14037184893890076, 0.08615967745064412, 0.1022461273459827, 0.07646862023614198, 0.16609109912356235, 0.1405845625712594, 0.2025679442189473, 0.18615798466411448, 0.16665972691115383, 0.17518425171499497, 0.1345484664884785, 0.1743948022662516, 0.15685454085192319, 0.08205094156632153, 0.016622670644971582, 0.021950752598170253, 0.0379343016070689, 9.999999999998899e-05, 0.04978144099748261, 0.0814465816630523, 0.01939074527113227, 0.0517184424462197, 0.05373550284380546, 0.0585752738814157, 0.0005213772220001855, 0.04552429262527513, 0.004998497286513692, 0.08471960752272867, 0.0222783299266317, 0.0008080630453800586, 0.002805637690122653, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02664524528492007, 0.013623651590440433, 0.05204337835841366, 0.06630421688987043, 9.999999999998899e-05, 0.021948552249879683, 0.05375178075262388, 0.04541396083542715, 0.030733292275746837, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03176961451513305, 0.002941253580335812, 9.999999999998899e-05, 0.019111086059913074, 9.999999999998899e-05, 0.00031990107075086094, 0.03050014577305593, 0.03320293260329177, 0.024935309574795617, 0.27190800081241173, 0.2700665354644808, 0.2841595412431098, 0.20506060400710335, 0.2829855485902524, 0.24439850404544528, 0.24150191632824636, 0.21145360279107484, 0.25293214258293717, 0.06450971297520569, 0.05915195182504085, 0.06505834954339973, 0.05940480187459651, 0.0666368370171676, 0.06418051225335553, 0.04843184410425205, 0.0698931085059048, 0.05754051889579026, 0.1524170121415398, 0.15840403750402798, 0.14232447712143625, 0.17623026876365855, 0.1836377624130523, 0.1575370316483664, 0.17989141420631627, 0.14702662196205396, 0.1533234727297368, 0.1862822329694631, 0.19782961902015872, 0.18935818858721754, 0.19418964140948614, 0.19675604273380887, 0.16757549957091145, 0.19398286449366908, 0.20298787293703102, 0.19110072176323334, 0.13237224142120774, 0.12380745289889206, 0.14490108750904585, 0.12768798996087516, 0.13944662118405415, 0.1462526744001027, 0.15773730965906674, 0.16887967620644972, 0.12445639924504626, 0.15636928487862656, 0.15875296630320468, 0.19003915578761876, 0.15575853469084433, 0.156805658482577, 0.15869702615534043, 0.18871609930258315, 0.17853791915914352, 0.17062911396536873, 0.15654363172342878, 0.17401775063074287, 0.1567158023543156, 0.16536016512961982, 0.15301278934461293, 0.15853855048831034, 0.16441175747354886, 0.15337321282625305, 0.16920102317497954, 0.31098446220579024, 0.16386119318128456, 0.14790765514677573, 0.22666368519166458, 0.16399162206845197, 0.17842294459770947, 0.13093829633465526, 0.2572849545140916, 0.26408971017659166, 0.2827735889004709, 0.19029280301853357, 0.16033821630678735, 0.17019810746580444, 0.19444799727075657, 0.13938141572985097, 0.1870473501264055, 0.12613439228450551, 0.22586456954817336, 0.22176375806176185, 0.1896854841383684, 0.18965484687636291, 0.17690255866849802, 0.1891986570962516, 0.17388360028403427, 0.18730901707198633, 0.18273772054235604, 0.17811507009536454, 0.062474652646362094, 0.06038076551325178, 0.05905372775085127, 0.05119338956613351, 0.054899809793484966, 0.054712232458198895, 0.07780563860071565, 0.06507852331440322, 0.06659758630188795]}, "mutation_prompt": null}
{"id": "73088e99-89ea-46d7-8cdd-0292357710d4", "solution": "import numpy as np\n\nclass OAHPE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.7\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _evaluate_population(self, population, func):\n        return np.array([func(ind) for ind in population])\n\n    def _update_velocity(self, velocities, population, personal_best, global_best):\n        r1, r2 = np.random.rand(2, self.population_size, self.dim)\n        cognitive = self.c1 * r1 * (personal_best - population)\n        social = self.c2 * r2 * (global_best - population)\n        return velocities + cognitive + social\n\n    def _apply_bounds(self, population):\n        np.clip(population, self.lower_bound, self.upper_bound, out=population)\n\n    def _differential_mutation(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = population[indices]\n        mutant = a + self.mutation_factor * (b - c)\n        np.clip(mutant, self.lower_bound, self.upper_bound, out=mutant)\n        trial = np.where(np.random.rand(self.dim) < self.crossover_prob, mutant, population[idx])\n        np.clip(trial, self.lower_bound, self.upper_bound, out=trial)\n        return trial\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_value = self._evaluate_population(population, func)\n        \n        global_best_idx = np.argmin(personal_best_value)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_value[global_best_idx]\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            velocities = self._update_velocity(velocities, population, personal_best, global_best)\n            population += velocities\n            self._apply_bounds(population)\n\n            new_population_value = self._evaluate_population(population, func)\n            evaluations += self.population_size\n\n            for i in range(self.population_size):\n                if new_population_value[i] < personal_best_value[i]:\n                    personal_best[i] = population[i]\n                    personal_best_value[i] = new_population_value[i]\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n            for i in range(self.population_size):\n                trial = self._differential_mutation(population, i)\n                trial_value = func(trial)\n                evaluations += 1\n\n                if trial_value < personal_best_value[i]:\n                    population[i] = trial\n                    personal_best[i] = trial\n                    personal_best_value[i] = trial_value\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n                if evaluations >= self.budget:\n                    break\n        \n        return global_best", "name": "OAHPE", "description": "Optimized Adaptive Hybrid Particle Evolution (OAHPE) introduces efficient trial selection and reduced evaluations by merging velocity updates and differential mutation.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "21c0e717-3be7-4538-90a8-3f84512ce9cb", "metadata": {"aucs": [0.2221500879841256, 0.24307259200235876, 0.22753088061095816, 0.24857692597636427, 0.29601770125445637, 0.2804718430029084, 0.24358382528404932, 0.26508987080283997, 0.24258775345289907, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.082227127837323, 0.06183473289079067, 0.05657350636876779, 0.05784421516024818, 0.06346659854250225, 0.058558481958294606, 0.06272164829207394, 0.0667370890451271, 0.07983163563661089, 0.061189768551837886, 0.03401878213401155, 0.04019515726740086, 0.056204836077746734, 0.0475351947083098, 0.03985620650560395, 0.05748214823134146, 0.056339425010037525, 0.05542765240730274, 0.9836783223171812, 0.9677620860375415, 0.9794658301285181, 0.9690396055130268, 0.9767353672763911, 0.9684262449856995, 0.9787023398508176, 0.9746929135351794, 0.9755335618149915, 0.11220471057429382, 0.13300640995429636, 0.07484007126704195, 0.11187042710715744, 0.10998656109210136, 0.14037184893890076, 0.08615967745064412, 0.1022461273459827, 0.07646862023614198, 0.16609109912356235, 0.1405845625712594, 0.2025679442189473, 0.18615798466411448, 0.16665972691115383, 0.17518425171499497, 0.1345484664884785, 0.1743948022662516, 0.15685454085192319, 0.08205094156632153, 0.016622670644971582, 0.021950752598170253, 0.0379343016070689, 9.999999999998899e-05, 0.04978144099748261, 0.0814465816630523, 0.01939074527113227, 0.0517184424462197, 0.05373550284380546, 0.0585752738814157, 0.0005213772220001855, 0.04552429262527513, 0.004998497286513692, 0.08471960752272867, 0.0222783299266317, 0.0008080630453800586, 0.002805637690122653, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02664524528492007, 0.013623651590440433, 0.05204337835841366, 0.06630421688987043, 9.999999999998899e-05, 0.021948552249879683, 0.05375178075262388, 0.04541396083542715, 0.030733292275746837, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03176961451513305, 0.002941253580335812, 9.999999999998899e-05, 0.019111086059913074, 9.999999999998899e-05, 0.00031990107075086094, 0.03050014577305593, 0.03320293260329177, 0.024935309574795617, 0.27190800081241173, 0.2700665354644808, 0.2841595412431098, 0.20506060400710335, 0.2829855485902524, 0.24439850404544528, 0.24150191632824636, 0.21145360279107484, 0.25293214258293717, 0.06450971297520569, 0.05915195182504085, 0.06505834954339973, 0.05940480187459651, 0.0666368370171676, 0.06418051225335553, 0.04843184410425205, 0.0698931085059048, 0.05754051889579026, 0.1524170121415398, 0.15840403750402798, 0.14232447712143625, 0.17623026876365855, 0.1836377624130523, 0.1575370316483664, 0.17989141420631627, 0.14702662196205396, 0.1533234727297368, 0.1862822329694631, 0.19782961902015872, 0.18935818858721754, 0.19418964140948614, 0.19675604273380887, 0.16757549957091145, 0.19398286449366908, 0.20298787293703102, 0.19110072176323334, 0.13237224142120774, 0.12380745289889206, 0.14490108750904585, 0.12768798996087516, 0.13944662118405415, 0.1462526744001027, 0.15773730965906674, 0.16887967620644972, 0.12445639924504626, 0.15636928487862656, 0.15875296630320468, 0.19003915578761876, 0.15575853469084433, 0.156805658482577, 0.15869702615534043, 0.18871609930258315, 0.17853791915914352, 0.17062911396536873, 0.15654363172342878, 0.17401775063074287, 0.1567158023543156, 0.16536016512961982, 0.15301278934461293, 0.15853855048831034, 0.16441175747354886, 0.15337321282625305, 0.16920102317497954, 0.31098446220579024, 0.16386119318128456, 0.14790765514677573, 0.22666368519166458, 0.16399162206845197, 0.17842294459770947, 0.13093829633465526, 0.2572849545140916, 0.26408971017659166, 0.2827735889004709, 0.19029280301853357, 0.16033821630678735, 0.17019810746580444, 0.19444799727075657, 0.13938141572985097, 0.1870473501264055, 0.12613439228450551, 0.22586456954817336, 0.22176375806176185, 0.1896854841383684, 0.18965484687636291, 0.17690255866849802, 0.1891986570962516, 0.17388360028403427, 0.18730901707198633, 0.18273772054235604, 0.17811507009536454, 0.062474652646362094, 0.06038076551325178, 0.05905372775085127, 0.05119338956613351, 0.054899809793484966, 0.054712232458198895, 0.07780563860071565, 0.06507852331440322, 0.06659758630188795]}, "mutation_prompt": null}
{"id": "6407e895-5b1b-4681-b461-0b2447e00df8", "solution": "import numpy as np\n\nclass OAHPE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.7\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _evaluate_population(self, population, func):\n        return np.array([func(ind) for ind in population])\n\n    def _update_velocity(self, velocities, population, personal_best, global_best):\n        r1, r2 = np.random.rand(2, self.population_size, self.dim)\n        cognitive = self.c1 * r1 * (personal_best - population)\n        social = self.c2 * r2 * (global_best - population)\n        return velocities + cognitive + social\n\n    def _apply_bounds(self, population):\n        np.clip(population, self.lower_bound, self.upper_bound, out=population)\n\n    def _differential_mutation(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = population[indices]\n        mutant = a + self.mutation_factor * (b - c)\n        np.clip(mutant, self.lower_bound, self.upper_bound, out=mutant)\n        trial = np.where(np.random.rand(self.dim) < self.crossover_prob, mutant, population[idx])\n        np.clip(trial, self.lower_bound, self.upper_bound, out=trial)\n        return trial\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_value = self._evaluate_population(population, func)\n        \n        global_best_idx = np.argmin(personal_best_value)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_value[global_best_idx]\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            velocities = self._update_velocity(velocities, population, personal_best, global_best)\n            population += velocities\n            self._apply_bounds(population)\n\n            new_population_value = self._evaluate_population(population, func)\n            evaluations += self.population_size\n\n            for i in range(self.population_size):\n                if new_population_value[i] < personal_best_value[i]:\n                    personal_best[i] = population[i]\n                    personal_best_value[i] = new_population_value[i]\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n            for i in range(self.population_size):\n                trial = self._differential_mutation(population, i)\n                trial_value = func(trial)\n                evaluations += 1\n\n                if trial_value < personal_best_value[i]:\n                    population[i] = trial\n                    personal_best[i] = trial\n                    personal_best_value[i] = trial_value\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n                if evaluations >= self.budget:\n                    break\n        \n        return global_best", "name": "OAHPE", "description": "Optimized Adaptive Hybrid Particle Evolution (OAHPE) introduces efficient trial selection and reduced evaluations by merging velocity updates and differential mutation.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "21c0e717-3be7-4538-90a8-3f84512ce9cb", "metadata": {"aucs": [0.2221500879841256, 0.24307259200235876, 0.22753088061095816, 0.24857692597636427, 0.29601770125445637, 0.2804718430029084, 0.24358382528404932, 0.26508987080283997, 0.24258775345289907, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.082227127837323, 0.06183473289079067, 0.05657350636876779, 0.05784421516024818, 0.06346659854250225, 0.058558481958294606, 0.06272164829207394, 0.0667370890451271, 0.07983163563661089, 0.061189768551837886, 0.03401878213401155, 0.04019515726740086, 0.056204836077746734, 0.0475351947083098, 0.03985620650560395, 0.05748214823134146, 0.056339425010037525, 0.05542765240730274, 0.9836783223171812, 0.9677620860375415, 0.9794658301285181, 0.9690396055130268, 0.9767353672763911, 0.9684262449856995, 0.9787023398508176, 0.9746929135351794, 0.9755335618149915, 0.11220471057429382, 0.13300640995429636, 0.07484007126704195, 0.11187042710715744, 0.10998656109210136, 0.14037184893890076, 0.08615967745064412, 0.1022461273459827, 0.07646862023614198, 0.16609109912356235, 0.1405845625712594, 0.2025679442189473, 0.18615798466411448, 0.16665972691115383, 0.17518425171499497, 0.1345484664884785, 0.1743948022662516, 0.15685454085192319, 0.08205094156632153, 0.016622670644971582, 0.021950752598170253, 0.0379343016070689, 9.999999999998899e-05, 0.04978144099748261, 0.0814465816630523, 0.01939074527113227, 0.0517184424462197, 0.05373550284380546, 0.0585752738814157, 0.0005213772220001855, 0.04552429262527513, 0.004998497286513692, 0.08471960752272867, 0.0222783299266317, 0.0008080630453800586, 0.002805637690122653, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02664524528492007, 0.013623651590440433, 0.05204337835841366, 0.06630421688987043, 9.999999999998899e-05, 0.021948552249879683, 0.05375178075262388, 0.04541396083542715, 0.030733292275746837, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03176961451513305, 0.002941253580335812, 9.999999999998899e-05, 0.019111086059913074, 9.999999999998899e-05, 0.00031990107075086094, 0.03050014577305593, 0.03320293260329177, 0.024935309574795617, 0.27190800081241173, 0.2700665354644808, 0.2841595412431098, 0.20506060400710335, 0.2829855485902524, 0.24439850404544528, 0.24150191632824636, 0.21145360279107484, 0.25293214258293717, 0.06450971297520569, 0.05915195182504085, 0.06505834954339973, 0.05940480187459651, 0.0666368370171676, 0.06418051225335553, 0.04843184410425205, 0.0698931085059048, 0.05754051889579026, 0.1524170121415398, 0.15840403750402798, 0.14232447712143625, 0.17623026876365855, 0.1836377624130523, 0.1575370316483664, 0.17989141420631627, 0.14702662196205396, 0.1533234727297368, 0.1862822329694631, 0.19782961902015872, 0.18935818858721754, 0.19418964140948614, 0.19675604273380887, 0.16757549957091145, 0.19398286449366908, 0.20298787293703102, 0.19110072176323334, 0.13237224142120774, 0.12380745289889206, 0.14490108750904585, 0.12768798996087516, 0.13944662118405415, 0.1462526744001027, 0.15773730965906674, 0.16887967620644972, 0.12445639924504626, 0.15636928487862656, 0.15875296630320468, 0.19003915578761876, 0.15575853469084433, 0.156805658482577, 0.15869702615534043, 0.18871609930258315, 0.17853791915914352, 0.17062911396536873, 0.15654363172342878, 0.17401775063074287, 0.1567158023543156, 0.16536016512961982, 0.15301278934461293, 0.15853855048831034, 0.16441175747354886, 0.15337321282625305, 0.16920102317497954, 0.31098446220579024, 0.16386119318128456, 0.14790765514677573, 0.22666368519166458, 0.16399162206845197, 0.17842294459770947, 0.13093829633465526, 0.2572849545140916, 0.26408971017659166, 0.2827735889004709, 0.19029280301853357, 0.16033821630678735, 0.17019810746580444, 0.19444799727075657, 0.13938141572985097, 0.1870473501264055, 0.12613439228450551, 0.22586456954817336, 0.22176375806176185, 0.1896854841383684, 0.18965484687636291, 0.17690255866849802, 0.1891986570962516, 0.17388360028403427, 0.18730901707198633, 0.18273772054235604, 0.17811507009536454, 0.062474652646362094, 0.06038076551325178, 0.05905372775085127, 0.05119338956613351, 0.054899809793484966, 0.054712232458198895, 0.07780563860071565, 0.06507852331440322, 0.06659758630188795]}, "mutation_prompt": null}
{"id": "98549f92-3a90-4983-8de3-3306388efcf9", "solution": "import numpy as np\n\nclass OAHPE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.7\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _evaluate_population(self, population, func):\n        return np.array([func(ind) for ind in population])\n\n    def _update_velocity(self, velocities, population, personal_best, global_best):\n        r1, r2 = np.random.rand(2, self.population_size, self.dim)\n        cognitive = self.c1 * r1 * (personal_best - population)\n        social = self.c2 * r2 * (global_best - population)\n        return velocities + cognitive + social\n\n    def _apply_bounds(self, population):\n        np.clip(population, self.lower_bound, self.upper_bound, out=population)\n\n    def _differential_mutation(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = population[indices]\n        mutant = a + self.mutation_factor * (b - c)\n        np.clip(mutant, self.lower_bound, self.upper_bound, out=mutant)\n        trial = np.where(np.random.rand(self.dim) < self.crossover_prob, mutant, population[idx])\n        np.clip(trial, self.lower_bound, self.upper_bound, out=trial)\n        return trial\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_value = self._evaluate_population(population, func)\n        \n        global_best_idx = np.argmin(personal_best_value)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_value[global_best_idx]\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            velocities = self._update_velocity(velocities, population, personal_best, global_best)\n            population += velocities\n            self._apply_bounds(population)\n\n            new_population_value = self._evaluate_population(population, func)\n            evaluations += self.population_size\n\n            for i in range(self.population_size):\n                if new_population_value[i] < personal_best_value[i]:\n                    personal_best[i] = population[i]\n                    personal_best_value[i] = new_population_value[i]\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n            for i in range(self.population_size):\n                trial = self._differential_mutation(population, i)\n                trial_value = func(trial)\n                evaluations += 1\n\n                if trial_value < personal_best_value[i]:\n                    population[i] = trial\n                    personal_best[i] = trial\n                    personal_best_value[i] = trial_value\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n                if evaluations >= self.budget:\n                    break\n        \n        return global_best", "name": "OAHPE", "description": "Optimized Adaptive Hybrid Particle Evolution (OAHPE) introduces efficient trial selection and reduced evaluations by merging velocity updates and differential mutation.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "21c0e717-3be7-4538-90a8-3f84512ce9cb", "metadata": {"aucs": [0.2221500879841256, 0.24307259200235876, 0.22753088061095816, 0.24857692597636427, 0.29601770125445637, 0.2804718430029084, 0.24358382528404932, 0.26508987080283997, 0.24258775345289907, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.082227127837323, 0.06183473289079067, 0.05657350636876779, 0.05784421516024818, 0.06346659854250225, 0.058558481958294606, 0.06272164829207394, 0.0667370890451271, 0.07983163563661089, 0.061189768551837886, 0.03401878213401155, 0.04019515726740086, 0.056204836077746734, 0.0475351947083098, 0.03985620650560395, 0.05748214823134146, 0.056339425010037525, 0.05542765240730274, 0.9836783223171812, 0.9677620860375415, 0.9794658301285181, 0.9690396055130268, 0.9767353672763911, 0.9684262449856995, 0.9787023398508176, 0.9746929135351794, 0.9755335618149915, 0.11220471057429382, 0.13300640995429636, 0.07484007126704195, 0.11187042710715744, 0.10998656109210136, 0.14037184893890076, 0.08615967745064412, 0.1022461273459827, 0.07646862023614198, 0.16609109912356235, 0.1405845625712594, 0.2025679442189473, 0.18615798466411448, 0.16665972691115383, 0.17518425171499497, 0.1345484664884785, 0.1743948022662516, 0.15685454085192319, 0.08205094156632153, 0.016622670644971582, 0.021950752598170253, 0.0379343016070689, 9.999999999998899e-05, 0.04978144099748261, 0.0814465816630523, 0.01939074527113227, 0.0517184424462197, 0.05373550284380546, 0.0585752738814157, 0.0005213772220001855, 0.04552429262527513, 0.004998497286513692, 0.08471960752272867, 0.0222783299266317, 0.0008080630453800586, 0.002805637690122653, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02664524528492007, 0.013623651590440433, 0.05204337835841366, 0.06630421688987043, 9.999999999998899e-05, 0.021948552249879683, 0.05375178075262388, 0.04541396083542715, 0.030733292275746837, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03176961451513305, 0.002941253580335812, 9.999999999998899e-05, 0.019111086059913074, 9.999999999998899e-05, 0.00031990107075086094, 0.03050014577305593, 0.03320293260329177, 0.024935309574795617, 0.27190800081241173, 0.2700665354644808, 0.2841595412431098, 0.20506060400710335, 0.2829855485902524, 0.24439850404544528, 0.24150191632824636, 0.21145360279107484, 0.25293214258293717, 0.06450971297520569, 0.05915195182504085, 0.06505834954339973, 0.05940480187459651, 0.0666368370171676, 0.06418051225335553, 0.04843184410425205, 0.0698931085059048, 0.05754051889579026, 0.1524170121415398, 0.15840403750402798, 0.14232447712143625, 0.17623026876365855, 0.1836377624130523, 0.1575370316483664, 0.17989141420631627, 0.14702662196205396, 0.1533234727297368, 0.1862822329694631, 0.19782961902015872, 0.18935818858721754, 0.19418964140948614, 0.19675604273380887, 0.16757549957091145, 0.19398286449366908, 0.20298787293703102, 0.19110072176323334, 0.13237224142120774, 0.12380745289889206, 0.14490108750904585, 0.12768798996087516, 0.13944662118405415, 0.1462526744001027, 0.15773730965906674, 0.16887967620644972, 0.12445639924504626, 0.15636928487862656, 0.15875296630320468, 0.19003915578761876, 0.15575853469084433, 0.156805658482577, 0.15869702615534043, 0.18871609930258315, 0.17853791915914352, 0.17062911396536873, 0.15654363172342878, 0.17401775063074287, 0.1567158023543156, 0.16536016512961982, 0.15301278934461293, 0.15853855048831034, 0.16441175747354886, 0.15337321282625305, 0.16920102317497954, 0.31098446220579024, 0.16386119318128456, 0.14790765514677573, 0.22666368519166458, 0.16399162206845197, 0.17842294459770947, 0.13093829633465526, 0.2572849545140916, 0.26408971017659166, 0.2827735889004709, 0.19029280301853357, 0.16033821630678735, 0.17019810746580444, 0.19444799727075657, 0.13938141572985097, 0.1870473501264055, 0.12613439228450551, 0.22586456954817336, 0.22176375806176185, 0.1896854841383684, 0.18965484687636291, 0.17690255866849802, 0.1891986570962516, 0.17388360028403427, 0.18730901707198633, 0.18273772054235604, 0.17811507009536454, 0.062474652646362094, 0.06038076551325178, 0.05905372775085127, 0.05119338956613351, 0.054899809793484966, 0.054712232458198895, 0.07780563860071565, 0.06507852331440322, 0.06659758630188795]}, "mutation_prompt": null}
{"id": "0261c71e-cc46-4fe9-abaa-de04b9caab1d", "solution": "import numpy as np\n\nclass OAHPE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.7\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _evaluate_population(self, population, func):\n        return np.array([func(ind) for ind in population])\n\n    def _update_velocity(self, velocities, population, personal_best, global_best):\n        r1, r2 = np.random.rand(2, self.population_size, self.dim)\n        cognitive = self.c1 * r1 * (personal_best - population)\n        social = self.c2 * r2 * (global_best - population)\n        return velocities + cognitive + social\n\n    def _apply_bounds(self, population):\n        np.clip(population, self.lower_bound, self.upper_bound, out=population)\n\n    def _differential_mutation(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = population[indices]\n        mutant = a + self.mutation_factor * (b - c)\n        np.clip(mutant, self.lower_bound, self.upper_bound, out=mutant)\n        trial = np.where(np.random.rand(self.dim) < self.crossover_prob, mutant, population[idx])\n        np.clip(trial, self.lower_bound, self.upper_bound, out=trial)\n        return trial\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_value = self._evaluate_population(population, func)\n        \n        global_best_idx = np.argmin(personal_best_value)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_value[global_best_idx]\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            velocities = self._update_velocity(velocities, population, personal_best, global_best)\n            population += velocities\n            self._apply_bounds(population)\n\n            new_population_value = self._evaluate_population(population, func)\n            evaluations += self.population_size\n\n            for i in range(self.population_size):\n                if new_population_value[i] < personal_best_value[i]:\n                    personal_best[i] = population[i]\n                    personal_best_value[i] = new_population_value[i]\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n            for i in range(self.population_size):\n                trial = self._differential_mutation(population, i)\n                trial_value = func(trial)\n                evaluations += 1\n\n                if trial_value < personal_best_value[i]:\n                    population[i] = trial\n                    personal_best[i] = trial\n                    personal_best_value[i] = trial_value\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n                if evaluations >= self.budget:\n                    break\n        \n        return global_best", "name": "OAHPE", "description": "Optimized Adaptive Hybrid Particle Evolution (OAHPE) introduces efficient trial selection and reduced evaluations by merging velocity updates and differential mutation.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "21c0e717-3be7-4538-90a8-3f84512ce9cb", "metadata": {"aucs": [0.2221500879841256, 0.24307259200235876, 0.22753088061095816, 0.24857692597636427, 0.29601770125445637, 0.2804718430029084, 0.24358382528404932, 0.26508987080283997, 0.24258775345289907, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.082227127837323, 0.06183473289079067, 0.05657350636876779, 0.05784421516024818, 0.06346659854250225, 0.058558481958294606, 0.06272164829207394, 0.0667370890451271, 0.07983163563661089, 0.061189768551837886, 0.03401878213401155, 0.04019515726740086, 0.056204836077746734, 0.0475351947083098, 0.03985620650560395, 0.05748214823134146, 0.056339425010037525, 0.05542765240730274, 0.9836783223171812, 0.9677620860375415, 0.9794658301285181, 0.9690396055130268, 0.9767353672763911, 0.9684262449856995, 0.9787023398508176, 0.9746929135351794, 0.9755335618149915, 0.11220471057429382, 0.13300640995429636, 0.07484007126704195, 0.11187042710715744, 0.10998656109210136, 0.14037184893890076, 0.08615967745064412, 0.1022461273459827, 0.07646862023614198, 0.16609109912356235, 0.1405845625712594, 0.2025679442189473, 0.18615798466411448, 0.16665972691115383, 0.17518425171499497, 0.1345484664884785, 0.1743948022662516, 0.15685454085192319, 0.08205094156632153, 0.016622670644971582, 0.021950752598170253, 0.0379343016070689, 9.999999999998899e-05, 0.04978144099748261, 0.0814465816630523, 0.01939074527113227, 0.0517184424462197, 0.05373550284380546, 0.0585752738814157, 0.0005213772220001855, 0.04552429262527513, 0.004998497286513692, 0.08471960752272867, 0.0222783299266317, 0.0008080630453800586, 0.002805637690122653, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02664524528492007, 0.013623651590440433, 0.05204337835841366, 0.06630421688987043, 9.999999999998899e-05, 0.021948552249879683, 0.05375178075262388, 0.04541396083542715, 0.030733292275746837, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03176961451513305, 0.002941253580335812, 9.999999999998899e-05, 0.019111086059913074, 9.999999999998899e-05, 0.00031990107075086094, 0.03050014577305593, 0.03320293260329177, 0.024935309574795617, 0.27190800081241173, 0.2700665354644808, 0.2841595412431098, 0.20506060400710335, 0.2829855485902524, 0.24439850404544528, 0.24150191632824636, 0.21145360279107484, 0.25293214258293717, 0.06450971297520569, 0.05915195182504085, 0.06505834954339973, 0.05940480187459651, 0.0666368370171676, 0.06418051225335553, 0.04843184410425205, 0.0698931085059048, 0.05754051889579026, 0.1524170121415398, 0.15840403750402798, 0.14232447712143625, 0.17623026876365855, 0.1836377624130523, 0.1575370316483664, 0.17989141420631627, 0.14702662196205396, 0.1533234727297368, 0.1862822329694631, 0.19782961902015872, 0.18935818858721754, 0.19418964140948614, 0.19675604273380887, 0.16757549957091145, 0.19398286449366908, 0.20298787293703102, 0.19110072176323334, 0.13237224142120774, 0.12380745289889206, 0.14490108750904585, 0.12768798996087516, 0.13944662118405415, 0.1462526744001027, 0.15773730965906674, 0.16887967620644972, 0.12445639924504626, 0.15636928487862656, 0.15875296630320468, 0.19003915578761876, 0.15575853469084433, 0.156805658482577, 0.15869702615534043, 0.18871609930258315, 0.17853791915914352, 0.17062911396536873, 0.15654363172342878, 0.17401775063074287, 0.1567158023543156, 0.16536016512961982, 0.15301278934461293, 0.15853855048831034, 0.16441175747354886, 0.15337321282625305, 0.16920102317497954, 0.31098446220579024, 0.16386119318128456, 0.14790765514677573, 0.22666368519166458, 0.16399162206845197, 0.17842294459770947, 0.13093829633465526, 0.2572849545140916, 0.26408971017659166, 0.2827735889004709, 0.19029280301853357, 0.16033821630678735, 0.17019810746580444, 0.19444799727075657, 0.13938141572985097, 0.1870473501264055, 0.12613439228450551, 0.22586456954817336, 0.22176375806176185, 0.1896854841383684, 0.18965484687636291, 0.17690255866849802, 0.1891986570962516, 0.17388360028403427, 0.18730901707198633, 0.18273772054235604, 0.17811507009536454, 0.062474652646362094, 0.06038076551325178, 0.05905372775085127, 0.05119338956613351, 0.054899809793484966, 0.054712232458198895, 0.07780563860071565, 0.06507852331440322, 0.06659758630188795]}, "mutation_prompt": null}
{"id": "d7e6c4ab-8922-4273-917d-3e5bfa828985", "solution": "import numpy as np\n\nclass OAHPE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.7\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _evaluate_population(self, population, func):\n        return np.array([func(ind) for ind in population])\n\n    def _update_velocity(self, velocities, population, personal_best, global_best):\n        r1, r2 = np.random.rand(2, self.population_size, self.dim)\n        cognitive = self.c1 * r1 * (personal_best - population)\n        social = self.c2 * r2 * (global_best - population)\n        return velocities + cognitive + social\n\n    def _apply_bounds(self, population):\n        np.clip(population, self.lower_bound, self.upper_bound, out=population)\n\n    def _differential_mutation(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = population[indices]\n        mutant = a + self.mutation_factor * (b - c)\n        np.clip(mutant, self.lower_bound, self.upper_bound, out=mutant)\n        trial = np.where(np.random.rand(self.dim) < self.crossover_prob, mutant, population[idx])\n        np.clip(trial, self.lower_bound, self.upper_bound, out=trial)\n        return trial\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_value = self._evaluate_population(population, func)\n        \n        global_best_idx = np.argmin(personal_best_value)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_value[global_best_idx]\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            velocities = self._update_velocity(velocities, population, personal_best, global_best)\n            population += velocities\n            self._apply_bounds(population)\n\n            new_population_value = self._evaluate_population(population, func)\n            evaluations += self.population_size\n\n            for i in range(self.population_size):\n                if new_population_value[i] < personal_best_value[i]:\n                    personal_best[i] = population[i]\n                    personal_best_value[i] = new_population_value[i]\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n            for i in range(self.population_size):\n                trial = self._differential_mutation(population, i)\n                trial_value = func(trial)\n                evaluations += 1\n\n                if trial_value < personal_best_value[i]:\n                    population[i] = trial\n                    personal_best[i] = trial\n                    personal_best_value[i] = trial_value\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n                if evaluations >= self.budget:\n                    break\n        \n        return global_best", "name": "OAHPE", "description": "Optimized Adaptive Hybrid Particle Evolution (OAHPE) introduces efficient trial selection and reduced evaluations by merging velocity updates and differential mutation.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "21c0e717-3be7-4538-90a8-3f84512ce9cb", "metadata": {"aucs": [0.2221500879841256, 0.24307259200235876, 0.22753088061095816, 0.24857692597636427, 0.29601770125445637, 0.2804718430029084, 0.24358382528404932, 0.26508987080283997, 0.24258775345289907, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.082227127837323, 0.06183473289079067, 0.05657350636876779, 0.05784421516024818, 0.06346659854250225, 0.058558481958294606, 0.06272164829207394, 0.0667370890451271, 0.07983163563661089, 0.061189768551837886, 0.03401878213401155, 0.04019515726740086, 0.056204836077746734, 0.0475351947083098, 0.03985620650560395, 0.05748214823134146, 0.056339425010037525, 0.05542765240730274, 0.9836783223171812, 0.9677620860375415, 0.9794658301285181, 0.9690396055130268, 0.9767353672763911, 0.9684262449856995, 0.9787023398508176, 0.9746929135351794, 0.9755335618149915, 0.11220471057429382, 0.13300640995429636, 0.07484007126704195, 0.11187042710715744, 0.10998656109210136, 0.14037184893890076, 0.08615967745064412, 0.1022461273459827, 0.07646862023614198, 0.16609109912356235, 0.1405845625712594, 0.2025679442189473, 0.18615798466411448, 0.16665972691115383, 0.17518425171499497, 0.1345484664884785, 0.1743948022662516, 0.15685454085192319, 0.08205094156632153, 0.016622670644971582, 0.021950752598170253, 0.0379343016070689, 9.999999999998899e-05, 0.04978144099748261, 0.0814465816630523, 0.01939074527113227, 0.0517184424462197, 0.05373550284380546, 0.0585752738814157, 0.0005213772220001855, 0.04552429262527513, 0.004998497286513692, 0.08471960752272867, 0.0222783299266317, 0.0008080630453800586, 0.002805637690122653, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02664524528492007, 0.013623651590440433, 0.05204337835841366, 0.06630421688987043, 9.999999999998899e-05, 0.021948552249879683, 0.05375178075262388, 0.04541396083542715, 0.030733292275746837, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03176961451513305, 0.002941253580335812, 9.999999999998899e-05, 0.019111086059913074, 9.999999999998899e-05, 0.00031990107075086094, 0.03050014577305593, 0.03320293260329177, 0.024935309574795617, 0.27190800081241173, 0.2700665354644808, 0.2841595412431098, 0.20506060400710335, 0.2829855485902524, 0.24439850404544528, 0.24150191632824636, 0.21145360279107484, 0.25293214258293717, 0.06450971297520569, 0.05915195182504085, 0.06505834954339973, 0.05940480187459651, 0.0666368370171676, 0.06418051225335553, 0.04843184410425205, 0.0698931085059048, 0.05754051889579026, 0.1524170121415398, 0.15840403750402798, 0.14232447712143625, 0.17623026876365855, 0.1836377624130523, 0.1575370316483664, 0.17989141420631627, 0.14702662196205396, 0.1533234727297368, 0.1862822329694631, 0.19782961902015872, 0.18935818858721754, 0.19418964140948614, 0.19675604273380887, 0.16757549957091145, 0.19398286449366908, 0.20298787293703102, 0.19110072176323334, 0.13237224142120774, 0.12380745289889206, 0.14490108750904585, 0.12768798996087516, 0.13944662118405415, 0.1462526744001027, 0.15773730965906674, 0.16887967620644972, 0.12445639924504626, 0.15636928487862656, 0.15875296630320468, 0.19003915578761876, 0.15575853469084433, 0.156805658482577, 0.15869702615534043, 0.18871609930258315, 0.17853791915914352, 0.17062911396536873, 0.15654363172342878, 0.17401775063074287, 0.1567158023543156, 0.16536016512961982, 0.15301278934461293, 0.15853855048831034, 0.16441175747354886, 0.15337321282625305, 0.16920102317497954, 0.31098446220579024, 0.16386119318128456, 0.14790765514677573, 0.22666368519166458, 0.16399162206845197, 0.17842294459770947, 0.13093829633465526, 0.2572849545140916, 0.26408971017659166, 0.2827735889004709, 0.19029280301853357, 0.16033821630678735, 0.17019810746580444, 0.19444799727075657, 0.13938141572985097, 0.1870473501264055, 0.12613439228450551, 0.22586456954817336, 0.22176375806176185, 0.1896854841383684, 0.18965484687636291, 0.17690255866849802, 0.1891986570962516, 0.17388360028403427, 0.18730901707198633, 0.18273772054235604, 0.17811507009536454, 0.062474652646362094, 0.06038076551325178, 0.05905372775085127, 0.05119338956613351, 0.054899809793484966, 0.054712232458198895, 0.07780563860071565, 0.06507852331440322, 0.06659758630188795]}, "mutation_prompt": null}
{"id": "aaca2e64-8d99-480d-9199-61fe05c18488", "solution": "import numpy as np\n\nclass OAHPE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.7\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _evaluate_population(self, population, func):\n        return np.array([func(ind) for ind in population])\n\n    def _update_velocity(self, velocities, population, personal_best, global_best):\n        r1, r2 = np.random.rand(2, self.population_size, self.dim)\n        cognitive = self.c1 * r1 * (personal_best - population)\n        social = self.c2 * r2 * (global_best - population)\n        return velocities + cognitive + social\n\n    def _apply_bounds(self, population):\n        np.clip(population, self.lower_bound, self.upper_bound, out=population)\n\n    def _differential_mutation(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = population[indices]\n        mutant = a + self.mutation_factor * (b - c)\n        np.clip(mutant, self.lower_bound, self.upper_bound, out=mutant)\n        trial = np.where(np.random.rand(self.dim) < self.crossover_prob, mutant, population[idx])\n        np.clip(trial, self.lower_bound, self.upper_bound, out=trial)\n        return trial\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_value = self._evaluate_population(population, func)\n        \n        global_best_idx = np.argmin(personal_best_value)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_value[global_best_idx]\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            velocities = self._update_velocity(velocities, population, personal_best, global_best)\n            population += velocities\n            self._apply_bounds(population)\n\n            new_population_value = self._evaluate_population(population, func)\n            evaluations += self.population_size\n\n            for i in range(self.population_size):\n                if new_population_value[i] < personal_best_value[i]:\n                    personal_best[i] = population[i]\n                    personal_best_value[i] = new_population_value[i]\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n            for i in range(self.population_size):\n                trial = self._differential_mutation(population, i)\n                trial_value = func(trial)\n                evaluations += 1\n\n                if trial_value < personal_best_value[i]:\n                    population[i] = trial\n                    personal_best[i] = trial\n                    personal_best_value[i] = trial_value\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n                if evaluations >= self.budget:\n                    break\n        \n        return global_best", "name": "OAHPE", "description": "Optimized Adaptive Hybrid Particle Evolution (OAHPE) introduces efficient trial selection and reduced evaluations by merging velocity updates and differential mutation.", "configspace": "", "generation": 23, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "21c0e717-3be7-4538-90a8-3f84512ce9cb", "metadata": {"aucs": [0.2221500879841256, 0.24307259200235876, 0.22753088061095816, 0.24857692597636427, 0.29601770125445637, 0.2804718430029084, 0.24358382528404932, 0.26508987080283997, 0.24258775345289907, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.082227127837323, 0.06183473289079067, 0.05657350636876779, 0.05784421516024818, 0.06346659854250225, 0.058558481958294606, 0.06272164829207394, 0.0667370890451271, 0.07983163563661089, 0.061189768551837886, 0.03401878213401155, 0.04019515726740086, 0.056204836077746734, 0.0475351947083098, 0.03985620650560395, 0.05748214823134146, 0.056339425010037525, 0.05542765240730274, 0.9836783223171812, 0.9677620860375415, 0.9794658301285181, 0.9690396055130268, 0.9767353672763911, 0.9684262449856995, 0.9787023398508176, 0.9746929135351794, 0.9755335618149915, 0.11220471057429382, 0.13300640995429636, 0.07484007126704195, 0.11187042710715744, 0.10998656109210136, 0.14037184893890076, 0.08615967745064412, 0.1022461273459827, 0.07646862023614198, 0.16609109912356235, 0.1405845625712594, 0.2025679442189473, 0.18615798466411448, 0.16665972691115383, 0.17518425171499497, 0.1345484664884785, 0.1743948022662516, 0.15685454085192319, 0.08205094156632153, 0.016622670644971582, 0.021950752598170253, 0.0379343016070689, 9.999999999998899e-05, 0.04978144099748261, 0.0814465816630523, 0.01939074527113227, 0.0517184424462197, 0.05373550284380546, 0.0585752738814157, 0.0005213772220001855, 0.04552429262527513, 0.004998497286513692, 0.08471960752272867, 0.0222783299266317, 0.0008080630453800586, 0.002805637690122653, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02664524528492007, 0.013623651590440433, 0.05204337835841366, 0.06630421688987043, 9.999999999998899e-05, 0.021948552249879683, 0.05375178075262388, 0.04541396083542715, 0.030733292275746837, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03176961451513305, 0.002941253580335812, 9.999999999998899e-05, 0.019111086059913074, 9.999999999998899e-05, 0.00031990107075086094, 0.03050014577305593, 0.03320293260329177, 0.024935309574795617, 0.27190800081241173, 0.2700665354644808, 0.2841595412431098, 0.20506060400710335, 0.2829855485902524, 0.24439850404544528, 0.24150191632824636, 0.21145360279107484, 0.25293214258293717, 0.06450971297520569, 0.05915195182504085, 0.06505834954339973, 0.05940480187459651, 0.0666368370171676, 0.06418051225335553, 0.04843184410425205, 0.0698931085059048, 0.05754051889579026, 0.1524170121415398, 0.15840403750402798, 0.14232447712143625, 0.17623026876365855, 0.1836377624130523, 0.1575370316483664, 0.17989141420631627, 0.14702662196205396, 0.1533234727297368, 0.1862822329694631, 0.19782961902015872, 0.18935818858721754, 0.19418964140948614, 0.19675604273380887, 0.16757549957091145, 0.19398286449366908, 0.20298787293703102, 0.19110072176323334, 0.13237224142120774, 0.12380745289889206, 0.14490108750904585, 0.12768798996087516, 0.13944662118405415, 0.1462526744001027, 0.15773730965906674, 0.16887967620644972, 0.12445639924504626, 0.15636928487862656, 0.15875296630320468, 0.19003915578761876, 0.15575853469084433, 0.156805658482577, 0.15869702615534043, 0.18871609930258315, 0.17853791915914352, 0.17062911396536873, 0.15654363172342878, 0.17401775063074287, 0.1567158023543156, 0.16536016512961982, 0.15301278934461293, 0.15853855048831034, 0.16441175747354886, 0.15337321282625305, 0.16920102317497954, 0.31098446220579024, 0.16386119318128456, 0.14790765514677573, 0.22666368519166458, 0.16399162206845197, 0.17842294459770947, 0.13093829633465526, 0.2572849545140916, 0.26408971017659166, 0.2827735889004709, 0.19029280301853357, 0.16033821630678735, 0.17019810746580444, 0.19444799727075657, 0.13938141572985097, 0.1870473501264055, 0.12613439228450551, 0.22586456954817336, 0.22176375806176185, 0.1896854841383684, 0.18965484687636291, 0.17690255866849802, 0.1891986570962516, 0.17388360028403427, 0.18730901707198633, 0.18273772054235604, 0.17811507009536454, 0.062474652646362094, 0.06038076551325178, 0.05905372775085127, 0.05119338956613351, 0.054899809793484966, 0.054712232458198895, 0.07780563860071565, 0.06507852331440322, 0.06659758630188795]}, "mutation_prompt": null}
{"id": "62759aee-5050-42d6-ab55-f3f9b55ea641", "solution": "import numpy as np\n\nclass OAHPE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.c1 = 1.4  # Slightly reduced\n        self.c2 = 1.6  # Slightly increased\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.7\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _evaluate_population(self, population, func):\n        return np.array([func(ind) for ind in population])\n\n    def _update_velocity(self, velocities, population, personal_best, global_best):\n        r1, r2 = np.random.rand(2, self.population_size, self.dim)\n        cognitive = self.c1 * r1 * (personal_best - population)\n        social = self.c2 * r2 * (global_best - population)\n        return velocities * 0.5 + cognitive + social  # Added inertia weight reduction\n\n    def _apply_bounds(self, population):\n        np.clip(population, self.lower_bound, self.upper_bound, out=population)\n\n    def _differential_mutation(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = population[indices]\n        mutant = a + self.mutation_factor * (b - c)\n        np.clip(mutant, self.lower_bound, self.upper_bound, out=mutant)\n        trial = np.where(np.random.rand(self.dim) < self.crossover_prob, mutant, population[idx])\n        return np.clip(trial, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_value = self._evaluate_population(population, func)\n        \n        global_best_idx = np.argmin(personal_best_value)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_value[global_best_idx]\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            velocities = self._update_velocity(velocities, population, personal_best, global_best)\n            population += velocities\n            self._apply_bounds(population)\n\n            new_population_value = self._evaluate_population(population, func)\n            evaluations += self.population_size\n\n            for i in range(self.population_size):\n                if new_population_value[i] < personal_best_value[i]:\n                    personal_best[i] = population[i]\n                    personal_best_value[i] = new_population_value[i]\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n            for i in range(self.population_size):\n                trial = self._differential_mutation(population, i)\n                trial_value = func(trial)\n                evaluations += 1\n\n                if trial_value < personal_best_value[i]:\n                    population[i] = trial\n                    personal_best[i] = trial\n                    personal_best_value[i] = trial_value\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n                if evaluations >= self.budget:\n                    break\n        \n        return global_best", "name": "OAHPE", "description": "Enhanced OAHPE with optimized candidate selection and velocity updates for improved convergence efficiency.", "configspace": "", "generation": 51, "fitness": 0.29663948849756505, "feedback": "The algorithm OAHPE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.26.", "error": "", "parent_id": "21c0e717-3be7-4538-90a8-3f84512ce9cb", "metadata": {"aucs": [0.8159236950925167, 0.8324201792419391, 0.8102904336984376, 0.811431722035837, 0.8290745011441323, 0.8235376409618669, 0.8133085877520472, 0.8200178669009376, 0.8107976558348658, 0.627808970238806, 0.571151333910783, 9.999999999998899e-05, 0.6217574350478705, 0.6167523076016177, 0.604428944045903, 0.6309690511330558, 0.6354956241179057, 0.05479896302065734, 0.11324855586526994, 0.11313953663006238, 0.15201191451537266, 0.12445036701379508, 0.1713542927563989, 0.11911734189640033, 0.13467848332983812, 0.13597938069796023, 0.1369704145271604, 0.10816790336490212, 0.09201995495441329, 0.1194043167181299, 0.12785880487475276, 0.12395663088161779, 0.1082830905362685, 0.16814690925961973, 0.12566538158007956, 0.147387004734014, 0.9778820982011294, 0.9678719359341229, 0.9748371229523952, 0.9703286597919706, 0.9747630643029682, 0.9665979735420803, 0.9781025841650282, 0.9688647206900384, 0.9685065256635469, 0.5936981536361684, 0.5623336123323516, 0.05820140278635422, 0.1512113147327131, 0.527001884409395, 0.5787304244466125, 0.546925789127676, 0.08799108164808822, 0.6124440976768566, 0.1722516018480632, 0.22520924042259505, 0.22620223009933482, 0.27874894970681063, 0.2785507318620952, 0.8198782800535707, 0.17793663756149347, 0.2434347278317347, 0.772207822749397, 0.26650480586292125, 0.12356484913047694, 0.19259940185664592, 0.09787703440129769, 0.11788301640087717, 0.18658660740915034, 0.24385517327560358, 0.21592964298053963, 0.22064916997581385, 0.1311484681126205, 0.21134260262946436, 0.19871934851672646, 0.24720492832225638, 0.22382154392325382, 0.23852809044719936, 0.2513858461020422, 0.03251127455865954, 0.1108861390603968, 9.999999999998899e-05, 0.00867128367390102, 0.005774082007703685, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0006640565889541872, 0.12079598100676103, 0.02603736814137514, 0.050176104166000046, 0.07050865123099359, 0.021561952591816258, 0.010242969934413537, 0.023575415780405118, 0.07941155931329902, 0.0322500363788929, 0.0701713699331925, 0.03979478768311351, 0.031777935918442024, 0.07012801806365332, 0.08383689895736601, 0.06909301386298972, 0.1190716075960212, 0.09163885538410743, 0.06694650496522714, 0.26194601570008613, 0.04074322537914499, 0.2329337757871932, 0.1595428880160703, 0.24252506037740373, 0.34732014474830675, 0.09146560953393323, 0.17289623130749532, 0.0804290191625705, 0.5380233875645377, 0.5122337747375986, 0.5501706112740009, 0.5640344664543595, 0.5075866628235668, 0.5894079376773949, 0.566102131367217, 0.5975382224790579, 0.5436713380377365, 0.08477967083854687, 0.11021254426233829, 0.15125039264249152, 0.12722613613864964, 0.1332861808293686, 0.10456751032741973, 0.07249014351997662, 0.07790592222804371, 0.11140254441052821, 0.24479921733825005, 0.2026245543134294, 0.20041110806095375, 0.24737491824477797, 0.5745019043864151, 0.37530372809995427, 0.173408796266315, 0.33206768628850813, 0.25718078266942135, 0.3662877977036201, 0.5217533639735448, 0.33999942960413077, 0.4291203346168855, 0.33618131845507415, 0.2739011712580405, 0.47420642502871146, 0.4853242110729571, 0.5148261270115319, 0.2997377585627675, 0.32909082136902, 0.19235319438528187, 0.22317648476290852, 0.21466460358490647, 0.32860519412919886, 0.2523835457336485, 0.25390955333993426, 0.3124013001358159, 0.21923185796442834, 0.19077070819805086, 0.22022552360060843, 0.22033236587623373, 0.20715377985635564, 0.23117264429328366, 0.1979074315597944, 0.2096562716731275, 0.21462440449770348, 0.24170238352996998, 0.686279477054144, 0.20546722314312527, 0.2440307587725039, 0.2347388189711752, 0.21663713411337904, 0.20559437695798788, 0.6410235193428246, 0.1870606194590132, 0.8840821288565964, 0.1265978827627856, 0.15296941847423573, 0.8821562458999049, 0.20052897661784186, 0.19964552432397298, 0.14253962722615054, 0.16312909209077786, 0.8992154856347759, 0.6833488889405916, 0.21027883604061526, 0.2089276184209895, 0.10476501327505372, 0.16775444453923138, 0.1536253148238591, 0.10372851842394615, 0.15354580305249488, 0.7267428087434846, 0.18718355995918623, 0.18819861240270352, 0.1846907343684141, 0.20970904874868157, 0.1854313198562061, 0.19616619562343718, 0.20295948997461644, 0.19720094440273672, 0.2017941036641726, 0.11986917027778432, 0.08422062319015333, 0.10163496983499187, 0.09411186827609341, 0.09436053630999797, 0.09446530355715599, 0.14120956473084412, 0.10926893512812041, 0.10083246990230199]}, "mutation_prompt": null}
{"id": "cc2a56ca-4306-49ce-a0ed-cbad1e8d2983", "solution": "import numpy as np\n\nclass OAHPE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.c1 = 1.4\n        self.c2 = 1.6\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.7\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _evaluate_population(self, population, func):\n        return np.array([func(ind) for ind in population])\n\n    def _update_velocity(self, velocities, population, personal_best, global_best):\n        r1, r2 = np.random.rand(2, self.population_size, self.dim)\n        cognitive = self.c1 * r1 * (personal_best - population)\n        social = self.c2 * r2 * (global_best - population)\n        return velocities * 0.5 + cognitive + social\n\n    def _apply_bounds(self, population):\n        np.clip(population, self.lower_bound, self.upper_bound, out=population)\n\n    def _differential_mutation(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = population[indices]\n        mutant = a + self.mutation_factor * (b - c)\n        np.clip(mutant, self.lower_bound, self.upper_bound, out=mutant)\n        trial = np.where(np.random.rand(self.dim) < self.crossover_prob, mutant, population[idx])\n        return np.clip(trial, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_value = self._evaluate_population(population, func)\n        \n        global_best_idx = np.argmin(personal_best_value)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_value[global_best_idx]\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            self.crossover_prob = 0.6 + 0.2 * (1 - evaluations/self.budget)  # Adaptive crossover probability\n            velocities = self._update_velocity(velocities, population, personal_best, global_best)\n            population += velocities\n            self._apply_bounds(population)\n\n            new_population_value = self._evaluate_population(population, func)\n            evaluations += self.population_size\n\n            for i in range(self.population_size):\n                if new_population_value[i] < personal_best_value[i]:\n                    personal_best[i] = population[i]\n                    personal_best_value[i] = new_population_value[i]\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n            for i in range(self.population_size):\n                trial = self._differential_mutation(population, i)\n                trial_value = func(trial)\n                evaluations += 1\n\n                if trial_value < personal_best_value[i]:\n                    population[i] = trial\n                    personal_best[i] = trial\n                    personal_best_value[i] = trial_value\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n                if evaluations >= self.budget:\n                    break\n        \n        return global_best", "name": "OAHPE", "description": "Enhanced OAHPE with adaptive crossover probability and dynamic population size for efficient exploration and exploitation.", "configspace": "", "generation": 52, "fitness": 0.30284648670987635, "feedback": "The algorithm OAHPE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.26.", "error": "", "parent_id": "62759aee-5050-42d6-ab55-f3f9b55ea641", "metadata": {"aucs": [0.8258584683794526, 0.8247463460494411, 0.8269536032930617, 0.8264423771616127, 0.8187053352124055, 0.8268250951788442, 0.8243569858556771, 0.8102273202742118, 0.8156549380486094, 0.5937765293185613, 0.5859472818829594, 0.5739012006889475, 0.6103632223380779, 0.5998487938166991, 0.6121983842829903, 0.646197640482842, 0.6343842522129564, 0.5762572523144471, 0.11343532490425112, 0.11323910300479001, 0.14900451916101187, 0.1071051196192091, 0.13224709401896595, 0.11576377724195264, 0.1388111483805936, 0.13175428155994773, 0.14829557116037706, 0.10276834600285345, 0.08051155714682412, 0.12097429603846599, 0.13250757981354278, 0.10151151625036381, 0.12005521163701016, 0.16207835824452488, 0.13716239320583956, 0.10314850374820217, 0.9769792233412117, 0.9774995148960353, 0.9750819728299106, 0.9694218578163669, 0.977315767587394, 0.9678816885123068, 0.9815898903265602, 0.9707762073148396, 0.9680775080444013, 0.6133326357508125, 0.5740426006389479, 0.47173536212252243, 0.601814112724556, 0.5663360764678477, 0.1499010266084182, 0.5257734990092763, 0.5361346949337269, 0.6113176176907933, 0.1722516018480632, 0.17063710977580449, 0.3689006375882621, 0.2777287358979005, 0.352425778427512, 0.3632431881960877, 0.12459846851209955, 0.23905861682688234, 0.7784089206691387, 0.22962497569616347, 0.09712013924040985, 0.18806826190336579, 0.09987155183041518, 0.12831189768341322, 0.19212577115535556, 0.217856634863133, 0.2060013586337034, 0.20031019665966554, 0.17996905920851203, 0.21929871794644318, 0.18179839449052237, 0.22159531543770472, 0.22498203537799, 0.2165565610625355, 0.2172065469621831, 0.24110764673841945, 0.25001711292782947, 0.059408634822048056, 9.999999999998899e-05, 9.999999999998899e-05, 0.019436480723336702, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11605094047591824, 0.07915756670311203, 0.06000081358803144, 0.0871085857484557, 0.08396158293619005, 0.008179550669233704, 0.008838205707823898, 0.04131373135764027, 0.07534310623744278, 0.03630806483057836, 0.04357755046670775, 0.03308034470583787, 0.020644171612756557, 0.07213030929192177, 0.14603829430840198, 0.1494477655240518, 0.13930292017366375, 0.09150536877553972, 0.09289946877413391, 0.2573663276697974, 0.04126075232296955, 0.19289852643423044, 0.07996359062450897, 0.14065758592256972, 0.1501853744469468, 0.2645025852942715, 0.08439782319347755, 0.08052022056335206, 0.5444141289494172, 0.5477890468692534, 0.5014217789042476, 0.20888735629970223, 0.49575989557560474, 0.5225696997803588, 0.5505972392476903, 0.5579001936668722, 0.5468709569832131, 0.08399950940310896, 0.07636758997417636, 0.096976948560205, 0.10016998160302082, 0.13510815644238594, 0.13764209886403478, 0.08935385261498163, 0.14991400571679747, 0.1023359852543605, 0.18788022907197255, 0.16878206942770302, 0.3722635039467679, 0.20060213358978007, 0.5573812389087214, 0.1432988222692515, 0.2764439998494661, 0.1636964100325744, 0.17831577539709909, 0.3726951184616547, 0.41462565600384504, 0.29112176661225975, 0.544464977324852, 0.21381178755461772, 0.47483587963534446, 0.27074952926784757, 0.5808785989734038, 0.49483368257875315, 0.3419805734243062, 0.25882103984205085, 0.26469467757268994, 0.1795556474138431, 0.19227217856172152, 0.23545876701641022, 0.23504996583172943, 0.3173551787294171, 0.26195921033326186, 0.20025815448447581, 0.14721894322839402, 0.2012919160273149, 0.21565800604286334, 0.20388262954865422, 0.2256142963939599, 0.2083706773339159, 0.21788849736399418, 0.19914380013271515, 0.6543105881370248, 0.18745083661098638, 0.19004328682867122, 0.19006863799229212, 0.21820506822225483, 0.21925856160477541, 0.1865587888458473, 0.6536044431931639, 0.22154648228218987, 0.8576967513308489, 0.1266978030845507, 0.15364061157655273, 0.8867774921929048, 0.19940438503014446, 0.19957498070009994, 0.14239059382218167, 0.16302644217805717, 0.8832261079756261, 0.6887026942892589, 0.2102582629120664, 0.20699215560896467, 0.5836809675575543, 0.6485411563782875, 0.1513509179171859, 0.10439330108266853, 0.1540909726541997, 0.7064117213123016, 0.1855241218859961, 0.20178545903923328, 0.20391324123644794, 0.17895631736533069, 0.1820295123696628, 0.1962944450131262, 0.18458222262608304, 0.19254658312113748, 0.18922884366832582, 0.102527565458858, 0.07868819491597845, 0.08467370343741498, 0.10246706866112876, 0.08848333212193593, 0.10306894074570772, 0.12795858225431145, 0.09877587318185654, 0.09100788400212145]}, "mutation_prompt": null}
{"id": "1e8a14e8-dcdf-4526-b165-8858b4b40514", "solution": "import numpy as np\n\nclass OAHPE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.c1 = 1.4\n        self.c2 = 1.6\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.7\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _evaluate_population(self, population, func):\n        return np.array([func(ind) for ind in population])\n\n    def _update_velocity(self, velocities, population, personal_best, global_best):\n        r1, r2 = np.random.rand(2, self.population_size, self.dim)\n        cognitive = self.c1 * r1 * (personal_best - population)\n        social = self.c2 * r2 * (global_best - population)\n        return velocities * 0.5 + cognitive + social * 0.9  # Reduced social factor for stability\n\n    def _apply_bounds(self, population):\n        np.clip(population, self.lower_bound, self.upper_bound, out=population)\n\n    def _differential_mutation(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = population[indices]\n        mutant = a + self.mutation_factor * (b - c)\n        np.clip(mutant, self.lower_bound, self.upper_bound, out=mutant)\n        trial = np.where(np.random.rand(self.dim) < self.crossover_prob * 0.9, mutant, population[idx])  # Adjusted crossover probability\n        return np.clip(trial, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_value = self._evaluate_population(population, func)\n        \n        global_best_idx = np.argmin(personal_best_value)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_value[global_best_idx]\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            self.crossover_prob = 0.6 + 0.2 * (1 - evaluations/self.budget)\n            velocities = self._update_velocity(velocities, population, personal_best, global_best)\n            population += velocities\n            self._apply_bounds(population)\n\n            new_population_value = self._evaluate_population(population, func)\n            evaluations += self.population_size\n\n            for i in range(self.population_size):\n                if new_population_value[i] < personal_best_value[i]:\n                    personal_best[i] = population[i]\n                    personal_best_value[i] = new_population_value[i]\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n            for i in range(self.population_size):\n                trial = self._differential_mutation(population, i)\n                trial_value = func(trial)\n                evaluations += 1\n\n                if trial_value < personal_best_value[i]:\n                    population[i] = trial\n                    personal_best[i] = trial\n                    personal_best_value[i] = trial_value\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n                if evaluations >= self.budget:\n                    break\n        \n        return global_best", "name": "OAHPE", "description": "Optimized OAHPE with efficient velocity update and mutation selection for improved exploration-exploitation balance.", "configspace": "", "generation": 53, "fitness": 0.31509255657308377, "feedback": "The algorithm OAHPE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.27.", "error": "", "parent_id": "cc2a56ca-4306-49ce-a0ed-cbad1e8d2983", "metadata": {"aucs": [0.8396326722535066, 0.8290614459347239, 0.8274731864421396, 0.8189507234347362, 0.839865900421241, 0.831449903671901, 0.8382265637686481, 0.8309034735601343, 0.8470057008464363, 0.6833207228809455, 0.6069564157393202, 0.5945905004876613, 0.6415603184270499, 0.6591468624786404, 0.6500960812266078, 0.6418610250163356, 0.6536916132070236, 0.6364804240565023, 0.11345316992443699, 0.1190727204353208, 0.13534313147321497, 0.13504451423820996, 0.06567412240877657, 0.1407774603807449, 0.5981407143702517, 0.1360363436430182, 0.16252881540888353, 0.10909459807141009, 0.1245241564400158, 0.14145330019588676, 0.14951016461818256, 0.1026524400572838, 0.10330147741150464, 0.10895927601060318, 0.14227349749229068, 0.17398147968944655, 0.9680238545138287, 0.9596016702381339, 0.9749423262381121, 0.9683400669070573, 0.9762134771506259, 0.9584274376949998, 0.9800893706685985, 0.9680153881965523, 0.9683698636049057, 0.6569068878944555, 0.6384653216959448, 0.6021624222129853, 0.6276455905496213, 0.15177334027889244, 0.6263136473647748, 0.6155724581251987, 0.6216919483214169, 0.6104930295109527, 0.22736298860369697, 0.22623770041781943, 0.22130004628098165, 0.19461003913767805, 0.21220022294074747, 0.2750427704097794, 0.12292117461234953, 0.22105196390020687, 0.23123499350655885, 0.34747247121475944, 0.13522721063185195, 0.20755165081197802, 0.11432235163124282, 0.22786740059408295, 0.2012449733040761, 0.22380599066228646, 0.2460914268244787, 0.22229364212326397, 0.2240361652777556, 0.12674460567193868, 0.16068332400917829, 0.12944338836954428, 0.20583650710461565, 0.2392152093382589, 0.22507641650136623, 0.3486503265790475, 0.2082703492812914, 9.999999999998899e-05, 9.999999999998899e-05, 0.00029033970383118834, 0.04426046684813245, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002562429311680936, 0.04452446913861963, 0.10329359020397588, 0.056961711072895604, 0.11443384950085234, 0.11746786787000785, 0.024612854012090013, 0.026387127376213737, 0.053944056195878165, 0.07861500159082391, 0.050479763150470314, 0.04635348378949089, 9.999999999998899e-05, 0.2696212128171428, 0.21536393432467404, 0.08672219887480026, 0.07163590280754839, 0.0920732424119618, 0.16965927051187824, 0.0810183066109561, 0.05560727152465583, 0.038088911149965266, 0.16383238600643435, 0.07657080597591959, 0.037959653097694335, 0.35745784761546207, 0.1998150109918907, 0.05617572417734229, 0.08339497122315331, 0.5165278134461501, 0.5353554706859993, 0.5765691481302573, 0.5539186139627517, 0.5256637801973099, 0.5558872597079343, 0.5407711639286672, 0.5800596987065136, 0.5573220761195699, 0.12562263572129906, 0.16678750374060713, 0.09456415069486446, 0.16752901876965864, 0.09466044069032653, 0.11775405992191768, 0.11374645757442015, 0.13614873507375358, 0.08412425435000992, 0.26940877383818373, 0.24962305067511348, 0.21877250635122836, 0.4911543652715995, 0.25174303705617984, 0.20884494735980497, 0.38458133982623377, 0.2650086121470008, 0.26713608900287045, 0.4696550963715479, 0.3830294285287439, 0.4424332443486071, 0.34736447526484093, 0.28129474576760527, 0.2409674135192469, 0.5778661647918439, 0.47588379171728934, 0.36618570906319436, 0.25321872819904534, 0.2595140915087798, 0.22456088492304538, 0.23215858004236567, 0.16925657166159003, 0.18577196074519953, 0.3012844539985413, 0.30632475575989904, 0.4102907511319559, 0.20693534916095824, 0.18612903699239747, 0.23252905341182495, 0.26744108003993006, 0.2162112801554985, 0.1944535289171051, 0.24403970411226672, 0.26081486540341403, 0.22361616044918775, 0.2166832036749078, 0.2464312259910626, 0.19867102315638352, 0.1900740699250072, 0.22288467544476964, 0.2171864163503321, 0.20747949694391887, 0.2041438029359468, 0.2433014504043588, 0.8873971227615863, 0.12662244872756345, 0.1526449584084203, 0.9019416250053169, 0.19930155921940973, 0.1996793076505231, 0.1423759461905031, 0.8934614265731591, 0.8937100806819075, 0.776840504569809, 0.208390211878288, 0.0734836236548887, 0.7167028629409943, 0.6066120475134926, 0.15310311657511588, 0.7318128282218278, 0.15464545511135097, 0.7382171176892398, 0.18247673962584687, 0.1829146392702391, 0.19809593706075246, 0.18705197716384647, 0.19858607855353472, 0.18831284824314054, 0.1983562404795599, 0.1936460039138458, 0.19258112004268058, 0.09254624280076729, 0.09353965314843993, 0.07264361009071041, 0.07194694429938131, 0.0871606406952029, 0.08058449839688164, 0.09520975764001938, 0.0950659265962186, 0.0862378577114219]}, "mutation_prompt": null}
{"id": "1cf4df17-0815-4994-9db0-a4573b520f98", "solution": "import numpy as np\n\nclass OAHPE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.c1 = 1.4\n        self.c2 = 1.6\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.7\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _evaluate_population(self, population, func):\n        return np.array([func(ind) for ind in population])\n\n    def _update_velocity(self, velocities, population, personal_best, global_best):\n        r1, r2 = np.random.rand(2, self.population_size, self.dim)\n        cognitive = self.c1 * r1 * (personal_best - population)\n        social = self.c2 * r2 * (global_best - population)\n        return velocities * 0.5 + cognitive + social * 0.9\n\n    def _apply_bounds(self, population):\n        np.clip(population, self.lower_bound, self.upper_bound, out=population)\n\n    def _differential_mutation(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = population[indices]\n        mutant = a + self.mutation_factor * (b - c)\n        np.clip(mutant, self.lower_bound, self.upper_bound, out=mutant)\n        trial = np.where(np.random.rand(self.dim) < self.crossover_prob * 0.9, mutant, population[idx])\n        return np.clip(trial, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_value = self._evaluate_population(population, func)\n        \n        global_best_idx = np.argmin(personal_best_value)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_value[global_best_idx]\n        \n        evaluations = self.population_size\n        adjust_rate = int(self.budget * 0.01)  # Adaptive adjustment for population size\n\n        while evaluations < self.budget:\n            self.population_size = max(10, self.population_size - adjust_rate)\n            velocities = self._update_velocity(velocities, population, personal_best, global_best)\n            population += velocities\n            self._apply_bounds(population)\n\n            new_population_value = self._evaluate_population(population, func)\n            evaluations += self.population_size\n\n            for i in range(self.population_size):\n                if new_population_value[i] < personal_best_value[i]:\n                    personal_best[i] = population[i]\n                    personal_best_value[i] = new_population_value[i]\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n            for i in range(self.population_size):\n                trial = self._differential_mutation(population, i)\n                trial_value = func(trial)\n                evaluations += 1\n\n                if trial_value < personal_best_value[i]:\n                    population[i] = trial\n                    personal_best[i] = trial\n                    personal_best_value[i] = trial_value\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n                if evaluations >= self.budget:\n                    break\n        \n        return global_best", "name": "OAHPE", "description": "Optimized OAHPE with adaptive population size adjustment for improved resource allocation and exploration efficiency.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('operands could not be broadcast together with shapes (10,5) (50,5) ').", "error": "ValueError('operands could not be broadcast together with shapes (10,5) (50,5) ')", "parent_id": "1e8a14e8-dcdf-4526-b165-8858b4b40514", "metadata": {}, "mutation_prompt": null}
{"id": "d51358fb-8342-45f5-9062-82e2e994e5a0", "solution": "import numpy as np\n\nclass OAHPE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.c1 = 1.4\n        self.c2 = 1.6\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.7\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _evaluate_population(self, population, func):\n        return np.array([func(ind) for ind in population])\n\n    def _update_velocity(self, velocities, population, personal_best, global_best):\n        r1, r2 = np.random.rand(2, self.population_size, self.dim)\n        cognitive = self.c1 * r1 * (personal_best - population)\n        social = self.c2 * r2 * (global_best - population)\n        return velocities * 0.5 + cognitive + social * 0.9  # Reduced social factor for stability\n\n    def _apply_bounds(self, population):\n        np.clip(population, self.lower_bound, self.upper_bound, out=population)\n\n    def _differential_mutation(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = population[indices]\n        mutant = a + self.mutation_factor * (b - c)\n        np.clip(mutant, self.lower_bound, self.upper_bound, out=mutant)\n        trial = np.where(np.random.rand(self.dim) < self.crossover_prob * 0.9, mutant, population[idx])  # Adjusted crossover probability\n        return np.clip(trial, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_value = self._evaluate_population(population, func)\n        \n        global_best_idx = np.argmin(personal_best_value)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_value[global_best_idx]\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            self.crossover_prob = 0.6 + 0.2 * (1 - evaluations/self.budget)\n            velocities = self._update_velocity(velocities, population, personal_best, global_best)\n            population += velocities\n            self._apply_bounds(population)\n\n            new_population_value = self._evaluate_population(population, func)\n            evaluations += self.population_size\n\n            for i in range(self.population_size):\n                if new_population_value[i] < personal_best_value[i]:\n                    personal_best[i] = population[i]\n                    personal_best_value[i] = new_population_value[i]\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n            for i in range(self.population_size):\n                trial = self._differential_mutation(population, i)\n                trial_value = func(trial)\n                evaluations += 1\n\n                if trial_value < personal_best_value[i]:\n                    population[i] = trial\n                    personal_best[i] = trial\n                    personal_best_value[i] = trial_value\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n                if evaluations >= self.budget:\n                    break\n        \n        return global_best", "name": "OAHPE", "description": "Optimized OAHPE with efficient velocity update and mutation selection for improved exploration-exploitation balance.", "configspace": "", "generation": 54, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1e8a14e8-dcdf-4526-b165-8858b4b40514", "metadata": {"aucs": [0.8396326722535066, 0.8290614459347239, 0.8274731864421396, 0.8189507234347362, 0.839865900421241, 0.831449903671901, 0.8382265637686481, 0.8309034735601343, 0.8470057008464363, 0.6833207228809455, 0.6069564157393202, 0.5945905004876613, 0.6415603184270499, 0.6591468624786404, 0.6500960812266078, 0.6418610250163356, 0.6536916132070236, 0.6364804240565023, 0.11345316992443699, 0.1190727204353208, 0.13534313147321497, 0.13504451423820996, 0.06567412240877657, 0.1407774603807449, 0.5981407143702517, 0.1360363436430182, 0.16252881540888353, 0.10909459807141009, 0.1245241564400158, 0.14145330019588676, 0.14951016461818256, 0.1026524400572838, 0.10330147741150464, 0.10895927601060318, 0.14227349749229068, 0.17398147968944655, 0.9680238545138287, 0.9596016702381339, 0.9749423262381121, 0.9683400669070573, 0.9762134771506259, 0.9584274376949998, 0.9800893706685985, 0.9680153881965523, 0.9683698636049057, 0.6569068878944555, 0.6384653216959448, 0.6021624222129853, 0.6276455905496213, 0.15177334027889244, 0.6263136473647748, 0.6155724581251987, 0.6216919483214169, 0.6104930295109527, 0.22736298860369697, 0.22623770041781943, 0.22130004628098165, 0.19461003913767805, 0.21220022294074747, 0.2750427704097794, 0.12292117461234953, 0.22105196390020687, 0.23123499350655885, 0.34747247121475944, 0.13522721063185195, 0.20755165081197802, 0.11432235163124282, 0.22786740059408295, 0.2012449733040761, 0.22380599066228646, 0.2460914268244787, 0.22229364212326397, 0.2240361652777556, 0.12674460567193868, 0.16068332400917829, 0.12944338836954428, 0.20583650710461565, 0.2392152093382589, 0.22507641650136623, 0.3486503265790475, 0.2082703492812914, 9.999999999998899e-05, 9.999999999998899e-05, 0.00029033970383118834, 0.04426046684813245, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002562429311680936, 0.04452446913861963, 0.10329359020397588, 0.056961711072895604, 0.11443384950085234, 0.11746786787000785, 0.024612854012090013, 0.026387127376213737, 0.053944056195878165, 0.07861500159082391, 0.050479763150470314, 0.04635348378949089, 9.999999999998899e-05, 0.2696212128171428, 0.21536393432467404, 0.08672219887480026, 0.07163590280754839, 0.0920732424119618, 0.16965927051187824, 0.0810183066109561, 0.05560727152465583, 0.038088911149965266, 0.16383238600643435, 0.07657080597591959, 0.037959653097694335, 0.35745784761546207, 0.1998150109918907, 0.05617572417734229, 0.08339497122315331, 0.5165278134461501, 0.5353554706859993, 0.5765691481302573, 0.5539186139627517, 0.5256637801973099, 0.5558872597079343, 0.5407711639286672, 0.5800596987065136, 0.5573220761195699, 0.12562263572129906, 0.16678750374060713, 0.09456415069486446, 0.16752901876965864, 0.09466044069032653, 0.11775405992191768, 0.11374645757442015, 0.13614873507375358, 0.08412425435000992, 0.26940877383818373, 0.24962305067511348, 0.21877250635122836, 0.4911543652715995, 0.25174303705617984, 0.20884494735980497, 0.38458133982623377, 0.2650086121470008, 0.26713608900287045, 0.4696550963715479, 0.3830294285287439, 0.4424332443486071, 0.34736447526484093, 0.28129474576760527, 0.2409674135192469, 0.5778661647918439, 0.47588379171728934, 0.36618570906319436, 0.25321872819904534, 0.2595140915087798, 0.22456088492304538, 0.23215858004236567, 0.16925657166159003, 0.18577196074519953, 0.3012844539985413, 0.30632475575989904, 0.4102907511319559, 0.20693534916095824, 0.18612903699239747, 0.23252905341182495, 0.26744108003993006, 0.2162112801554985, 0.1944535289171051, 0.24403970411226672, 0.26081486540341403, 0.22361616044918775, 0.2166832036749078, 0.2464312259910626, 0.19867102315638352, 0.1900740699250072, 0.22288467544476964, 0.2171864163503321, 0.20747949694391887, 0.2041438029359468, 0.2433014504043588, 0.8873971227615863, 0.12662244872756345, 0.1526449584084203, 0.9019416250053169, 0.19930155921940973, 0.1996793076505231, 0.1423759461905031, 0.8934614265731591, 0.8937100806819075, 0.776840504569809, 0.208390211878288, 0.0734836236548887, 0.7167028629409943, 0.6066120475134926, 0.15310311657511588, 0.7318128282218278, 0.15464545511135097, 0.7382171176892398, 0.18247673962584687, 0.1829146392702391, 0.19809593706075246, 0.18705197716384647, 0.19858607855353472, 0.18831284824314054, 0.1983562404795599, 0.1936460039138458, 0.19258112004268058, 0.09254624280076729, 0.09353965314843993, 0.07264361009071041, 0.07194694429938131, 0.0871606406952029, 0.08058449839688164, 0.09520975764001938, 0.0950659265962186, 0.0862378577114219]}, "mutation_prompt": null}
{"id": "a22ad2f3-c40e-447b-94ba-5c04e812621d", "solution": "import numpy as np\n\nclass OAHPE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.c1 = 1.4\n        self.c2 = 1.6\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.7\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _evaluate_population(self, population, func):\n        return np.array([func(ind) for ind in population])\n\n    def _update_velocity(self, velocities, population, personal_best, global_best):\n        r1, r2 = np.random.rand(2, self.population_size, self.dim)\n        cognitive = self.c1 * r1 * (personal_best - population)\n        social = self.c2 * r2 * (global_best - population)\n        return velocities * 0.4 + cognitive + social * 0.85  # Modified velocity update coefficients\n\n    def _apply_bounds(self, population):\n        np.clip(population, self.lower_bound, self.upper_bound, out=population)\n\n    def _differential_mutation(self, population, idx):\n        # Using weighted probabilistic selection for indices\n        indices = np.random.choice(self.population_size, 3, replace=False, p=np.full(self.population_size, 1/self.population_size))\n        a, b, c = population[indices]\n        mutant = a + self.mutation_factor * (b - c)\n        np.clip(mutant, self.lower_bound, self.upper_bound, out=mutant)\n        trial = np.where(np.random.rand(self.dim) < self.crossover_prob * 0.95, mutant, population[idx])  # Refined crossover probability\n        return np.clip(trial, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_value = self._evaluate_population(population, func)\n        \n        global_best_idx = np.argmin(personal_best_value)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_value[global_best_idx]\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            self.crossover_prob = 0.6 + 0.2 * (1 - evaluations/self.budget)\n            velocities = self._update_velocity(velocities, population, personal_best, global_best)\n            population += velocities\n            self._apply_bounds(population)\n\n            new_population_value = self._evaluate_population(population, func)\n            evaluations += self.population_size\n\n            for i in range(self.population_size):\n                if new_population_value[i] < personal_best_value[i]:\n                    personal_best[i] = population[i]\n                    personal_best_value[i] = new_population_value[i]\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                trial = self._differential_mutation(population, i)\n                trial_value = func(trial)\n                evaluations += 1\n\n                if trial_value < personal_best_value[i]:\n                    population[i] = trial\n                    personal_best[i] = trial\n                    personal_best_value[i] = trial_value\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n        return global_best", "name": "OAHPE", "description": "Optimized OAHPE with probabilistic selection mechanism for mutation and enhanced velocity update for faster convergence.", "configspace": "", "generation": 56, "fitness": 0.31647138875354985, "feedback": "The algorithm OAHPE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.28.", "error": "", "parent_id": "1e8a14e8-dcdf-4526-b165-8858b4b40514", "metadata": {"aucs": [0.876762627973233, 0.865687606070489, 0.869474901991891, 0.868958621699837, 0.871272907279236, 0.8719098696070868, 0.8571268765618335, 0.8699242518904279, 0.869506967959103, 0.7150515931756207, 0.041483182334745794, 0.6668863921850523, 0.7310647991107077, 0.7249529912744412, 0.6780807992648707, 0.6770339179309204, 0.7349804093809116, 0.7369112932142314, 0.4272562287618161, 0.18171664716421077, 0.11699695957409295, 0.15296835498422956, 0.15092453269721917, 0.7031493654689933, 0.12947044673296626, 0.18291553339835698, 0.17571096889177784, 0.09936716918254385, 0.1389024522164728, 0.12048465335102376, 0.12257432647204314, 0.13464192853849233, 0.114800768224811, 0.1495449196136529, 0.10927395631570902, 0.12075047073419898, 0.9662135100338272, 0.9680486554643299, 0.9698821625514551, 0.9659619711394809, 0.9729134598831186, 0.9773445091832792, 0.980778391325679, 0.9715012887741158, 0.9686797161380987, 0.7418780195653796, 0.7047421139966228, 0.5968348730915319, 0.5280650675183174, 0.6903813681176264, 0.7294630915162637, 0.7006908908765562, 0.6760389681391477, 0.7093980235903612, 0.22790650998222928, 0.8204663085918387, 0.22700035066736168, 0.213806115931495, 0.37066976544521335, 0.20736183273599473, 0.12116927259487642, 0.23190472776529014, 0.8069637152140764, 0.20282621053889427, 0.12515464323129544, 0.15790365183933008, 0.10283309920105876, 0.1329290927807668, 0.16175760269278305, 0.18369956808589272, 0.12879267164137453, 0.1789953572104217, 0.13204404418312954, 0.20697236114501938, 0.11285578077101166, 0.16981013047128923, 0.1283216098357014, 0.15801992252497532, 0.13043105331123384, 0.10026389314538431, 0.18792140195353335, 9.999999999998899e-05, 0.0013159509171110084, 0.01411661809284892, 0.042595583010935134, 0.04784370408194505, 9.999999999998899e-05, 9.999999999998899e-05, 0.014100215704906272, 0.004195282646976883, 0.06330358744725273, 0.045381563482789766, 0.10046612906480545, 0.07355606716931784, 0.0001275419658417487, 0.05252506330933848, 0.06432986272925778, 0.08370974836015688, 0.06781864253225145, 0.04777091367996511, 0.16266077147405045, 0.3084843933438338, 0.12304764426635884, 0.1382895576528128, 0.15322911486401736, 0.09871171108807264, 0.19164115375418855, 0.15563500884562687, 0.1656638318695992, 0.04212740075352139, 0.21591886973073304, 0.06817870895252576, 0.12372434241924202, 0.07998457549733484, 0.05654390610811755, 0.05645838201469744, 0.08800565946926175, 0.5249300978524136, 0.6022700625864215, 0.5974533218487985, 0.5531644842540339, 0.531870184799389, 0.5471834273181466, 0.5855062509839023, 0.6046751614110013, 0.5999836579954149, 0.10359407142412724, 0.1442449478555774, 0.15801465307113371, 0.0730049116102266, 0.09267633893262339, 0.11275168206137476, 0.09843760845158833, 0.10064041822063863, 0.11012543198060032, 0.3287986699131522, 0.23135716835136277, 0.21130520691816224, 0.3260890362804404, 0.39488696831672565, 0.2431891863147092, 0.21269020774166925, 0.2005619134996235, 0.27464468225905125, 0.24521636373648603, 0.36278596637656835, 0.5898442829891292, 0.29713628684076265, 0.21070613492762214, 0.4102439097629441, 0.44223518869551304, 0.3837342980459011, 0.615772348565389, 0.2831308451709883, 0.2619756257102368, 0.20157438396657745, 0.2345722281743522, 0.22704007070205667, 0.29561255353425686, 0.29579203828448997, 0.35425978114441603, 0.24157660670441605, 0.24497749537394964, 0.19076577119856908, 0.21934762263935692, 0.23674513285459797, 0.2068436474908233, 0.24121192263693225, 0.2270839743641332, 0.21201510474919028, 0.19867446025331104, 0.2508976989618882, 0.18855608669799617, 0.22219382928927534, 0.207615075247212, 0.1860859798749529, 0.2068328261461463, 0.19150764849251523, 0.2199464639920753, 0.194929471645647, 0.9083354404169204, 0.12658670172294717, 0.15378169026501398, 0.9042482354227105, 0.20008460853607934, 0.16949277678442753, 0.1422957020847827, 0.16322373817650315, 0.9194009270565904, 0.8686079048384163, 0.2123178996672993, 0.20916569093986448, 0.5330324277021994, 0.16837819510241903, 0.154571277138975, 0.10507302934887053, 0.104459564028764, 0.7324592548955646, 0.21242563121806934, 0.22107028464325595, 0.187549192428633, 0.18096904164550653, 0.1891844582339598, 0.19169064523180446, 0.19580994437159716, 0.18569570768133836, 0.2096049019539673, 0.10734359455193132, 0.10530217525379526, 0.10443157316588803, 0.09326272897544385, 0.08135909212380388, 0.09144140218397057, 0.1153332656761884, 0.10021313152662659, 0.08825128635603852]}, "mutation_prompt": null}
{"id": "3120b994-c3c2-471c-b9bd-c73654481b8f", "solution": "import numpy as np\n\nclass OAHPE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.c1 = 1.4\n        self.c2 = 1.6\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.7\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _evaluate_population(self, population, func):\n        return np.array([func(ind) for ind in population])\n\n    def _update_velocity(self, velocities, population, personal_best, global_best):\n        r1, r2 = np.random.rand(2, self.population_size, self.dim)\n        cognitive = self.c1 * r1 * (personal_best - population)\n        social = self.c2 * r2 * (global_best - population)\n        return velocities * 0.4 + cognitive + social * 0.85\n\n    def _apply_bounds(self, population):\n        np.clip(population, self.lower_bound, self.upper_bound, out=population)\n\n    def _differential_mutation(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = population[indices]\n        self.mutation_factor = 0.7 + 0.3 * (1 - np.linalg.norm(b - c) / (2 * np.sqrt(self.dim)))  # Adaptive mutation factor\n        mutant = a + self.mutation_factor * (b - c)\n        trial = np.where(np.random.rand(self.dim) < self.crossover_prob * 0.95, mutant, population[idx])\n        return np.clip(trial, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_value = self._evaluate_population(population, func)\n        \n        global_best_idx = np.argmin(personal_best_value)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_value[global_best_idx]\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            self.crossover_prob = 0.6 + 0.2 * (1 - evaluations/self.budget)\n            velocities = self._update_velocity(velocities, population, personal_best, global_best)\n            population += velocities\n            self._apply_bounds(population)\n\n            new_population_value = self._evaluate_population(population, func)\n            evaluations += self.population_size\n\n            for i in range(self.population_size):\n                if new_population_value[i] < personal_best_value[i]:\n                    personal_best[i] = population[i]\n                    personal_best_value[i] = new_population_value[i]\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                trial = self._differential_mutation(population, i)\n                trial_value = func(trial)\n                if trial_value < personal_best_value[i]:  # Simplified check logic\n                    evaluations += 1\n                    population[i] = trial\n                    personal_best[i] = trial\n                    personal_best_value[i] = trial_value\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n        return global_best", "name": "OAHPE", "description": "An enhanced OAHPE with adaptive mutation factor and streamlined evaluations to improve convergence speed and efficiency.", "configspace": "", "generation": 57, "fitness": 0.3196136891908909, "feedback": "The algorithm OAHPE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.28.", "error": "", "parent_id": "a22ad2f3-c40e-447b-94ba-5c04e812621d", "metadata": {"aucs": [0.8668348600324541, 0.8611005175267618, 0.8595363620990507, 0.8748613574260196, 0.8660451128204074, 0.8687978327620154, 0.8683873279178499, 0.8561195048447305, 0.8670443034633353, 0.7284170435184483, 0.04183025942019325, 0.5531449896823765, 0.7118588379605382, 0.7113976675206496, 0.737665508993827, 0.6900803723634554, 0.7090743231839416, 0.6654647776405871, 0.13755666515095377, 0.10933386887237517, 0.11673072508678417, 0.11306952762905986, 0.1677525895013443, 0.14609843552526147, 0.11887953657481287, 0.18398095467509457, 0.14839657186661848, 0.15193475442386373, 0.1400880666637686, 0.10889210455404918, 0.14099254359334334, 0.14714037010476455, 0.1325733727982108, 0.11275971371269555, 0.13977551335753413, 0.12808015950155516, 0.9645212205726398, 0.9761492737972657, 0.9746892724244693, 0.9501808525480977, 0.9687563510003965, 0.9525637249460471, 0.9778834822484883, 0.9600772060679164, 0.9647672510807135, 0.6479761075029533, 0.7051173057108101, 0.6885891485429403, 0.1938539096666434, 0.6943932567035305, 0.6724950467164483, 0.7119410398402154, 0.6695998217885912, 0.6959327990603225, 0.38330618483321566, 0.22846501886821569, 0.3697500447112134, 0.2785964499153327, 0.19417904301946332, 0.27829399035998803, 0.851324017403165, 0.7659172777310529, 0.8695454593854912, 0.22089245745025943, 0.13416448543609316, 0.1950465335317726, 0.18774745232778522, 0.12835466696972964, 0.19236646079742226, 0.20009732212761588, 0.1753608790397142, 0.1293048109706877, 0.13080002224486376, 0.1794288810433673, 0.2078719826043035, 0.1565635602988088, 0.2564661376268952, 0.20441316459512515, 0.1249838252187292, 0.13634687583796934, 0.2237970495069478, 0.10724862951878456, 0.010767708313981661, 9.999999999998899e-05, 0.007444193438304159, 9.999999999998899e-05, 0.0220201806718624, 9.999999999998899e-05, 0.002602690581584133, 0.12447269464395727, 0.10072544672944839, 0.03395795775759236, 0.14553698758999944, 0.047279744830477255, 0.012890642366753857, 0.03639343802338901, 0.060370407076058785, 0.07501790218932292, 0.042947140436754516, 0.12333244333024629, 0.035078822040175095, 0.24626297655606288, 0.1391063004999552, 0.09311857113168898, 0.08083782756328439, 0.12184381278914991, 0.09887828882346272, 0.07061207384336488, 0.05558883911319845, 0.042229618380132394, 0.19919250533551236, 0.05457840477897602, 0.23345874799753397, 0.24106343331508262, 0.1362997740184685, 0.05668299773957408, 0.09090087762382759, 0.5319436489952678, 0.5387156656151443, 0.5629376666348236, 0.5177651053707459, 0.6229005303051913, 0.5514117593151024, 0.5703079303034599, 0.5670852211166324, 0.5695396711047345, 0.135127816742439, 0.11536832444862866, 0.11277232557081951, 0.09337115579400301, 0.0745472336152403, 0.12059340188390488, 0.10763146168627824, 0.11026019976159318, 0.10954411048826618, 0.47829215239646106, 0.3004836072950158, 0.17413000179320393, 0.24860055687933758, 0.21718465593130676, 0.21337956946406145, 0.4174623442338876, 0.33728236478325424, 0.2782853303936469, 0.4929587646180781, 0.3854513070860923, 0.24946961657720057, 0.28654430416459187, 0.3108555816864875, 0.5857544593930797, 0.2577155614056096, 0.6807381801752441, 0.22541636408167287, 0.24624002450144045, 0.2052769451016918, 0.30081984712905585, 0.23892814575468568, 0.38068078076345824, 0.28630947733291634, 0.2945516119824616, 0.317476630231627, 0.25857106751128744, 0.22788832216121602, 0.20216652613363495, 0.2070188049092454, 0.2332724971025666, 0.22536628818433768, 0.27155707364826787, 0.23744535926317556, 0.23655064580391139, 0.24009573480527813, 0.1986224713610143, 0.2083111055106106, 0.2068723977528426, 0.7605377362048941, 0.24197103719882185, 0.1891601387884334, 0.22102599880385165, 0.1864865995039895, 0.2166077972076439, 0.1641543580635627, 0.12659372806876745, 0.15389611889550414, 0.8979887738047796, 0.2000296970833194, 0.1997079993840465, 0.1721877713652008, 0.16138912697998076, 0.9128608774288254, 0.7608919691468662, 0.21123288145482677, 0.20887341058469833, 0.2095767946476833, 0.6873980815788463, 0.1547865796828366, 0.5730857325080261, 0.21042520099659545, 0.765336801638925, 0.20829392340013797, 0.18368933942511234, 0.18239522005696807, 0.19368722918581027, 0.19389827677910265, 0.19069100693564267, 0.1898798858193138, 0.1889055966004577, 0.19637087829418443, 0.0991190431816038, 0.0895626999909156, 0.077542623691787, 0.10093615195790029, 0.09284836058604484, 0.09154303766878347, 0.10169471507945904, 0.08502197119856991, 0.10481235041405523]}, "mutation_prompt": null}
{"id": "2b6fa3e5-4741-4a08-947e-21bb8403c382", "solution": "import numpy as np\n\nclass OAHPE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.c1 = 1.4\n        self.c2 = 1.6\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.7\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _evaluate_population(self, population, func):\n        return np.array([func(ind) for ind in population])\n\n    def _update_velocity(self, velocities, population, personal_best, global_best):\n        r1, r2 = np.random.rand(2, self.population_size, self.dim)\n        cognitive = self.c1 * r1 * (personal_best - population)\n        social = self.c2 * r2 * (global_best - population)\n        return velocities * 0.4 + cognitive + social * 0.85\n\n    def _apply_bounds(self, population):\n        np.clip(population, self.lower_bound, self.upper_bound, out=population)\n\n    def _differential_mutation(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = population[indices]\n        self.mutation_factor = 0.7 + 0.3 * (1 - np.linalg.norm(b - c) / (2 * np.sqrt(self.dim)))  # Adaptive mutation factor\n        mutant = a + self.mutation_factor * (b - c)\n        trial = np.where(np.random.rand(self.dim) < self.crossover_prob * 0.95, mutant, population[idx])\n        return np.clip(trial, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_value = self._evaluate_population(population, func)\n        \n        global_best_idx = np.argmin(personal_best_value)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_value[global_best_idx]\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            self.crossover_prob = 0.6 + 0.2 * (1 - evaluations/self.budget)\n            velocities = self._update_velocity(velocities, population, personal_best, global_best)\n            population += velocities\n            self._apply_bounds(population)\n\n            new_population_value = self._evaluate_population(population, func)\n            evaluations += self.population_size\n\n            for i in range(self.population_size):\n                if new_population_value[i] < personal_best_value[i]:\n                    personal_best[i] = population[i]\n                    personal_best_value[i] = new_population_value[i]\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                trial = self._differential_mutation(population, i)\n                trial_value = func(trial)\n                if trial_value < personal_best_value[i]:  # Simplified check logic\n                    evaluations += 1\n                    population[i] = trial\n                    personal_best[i] = trial\n                    personal_best_value[i] = trial_value\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n        return global_best", "name": "OAHPE", "description": "An enhanced OAHPE with adaptive mutation factor and streamlined evaluations to improve convergence speed and efficiency.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3120b994-c3c2-471c-b9bd-c73654481b8f", "metadata": {"aucs": [0.8668348600324541, 0.8611005175267618, 0.8595363620990507, 0.8748613574260196, 0.8660451128204074, 0.8687978327620154, 0.8683873279178499, 0.8561195048447305, 0.8670443034633353, 0.7284170435184483, 0.04183025942019325, 0.5531449896823765, 0.7118588379605382, 0.7113976675206496, 0.737665508993827, 0.6900803723634554, 0.7090743231839416, 0.6654647776405871, 0.13755666515095377, 0.10933386887237517, 0.11673072508678417, 0.11306952762905986, 0.1677525895013443, 0.14609843552526147, 0.11887953657481287, 0.18398095467509457, 0.14839657186661848, 0.15193475442386373, 0.1400880666637686, 0.10889210455404918, 0.14099254359334334, 0.14714037010476455, 0.1325733727982108, 0.11275971371269555, 0.13977551335753413, 0.12808015950155516, 0.9645212205726398, 0.9761492737972657, 0.9746892724244693, 0.9501808525480977, 0.9687563510003965, 0.9525637249460471, 0.9778834822484883, 0.9600772060679164, 0.9647672510807135, 0.6479761075029533, 0.7051173057108101, 0.6885891485429403, 0.1938539096666434, 0.6943932567035305, 0.6724950467164483, 0.7119410398402154, 0.6695998217885912, 0.6959327990603225, 0.38330618483321566, 0.22846501886821569, 0.3697500447112134, 0.2785964499153327, 0.19417904301946332, 0.27829399035998803, 0.851324017403165, 0.7659172777310529, 0.8695454593854912, 0.22089245745025943, 0.13416448543609316, 0.1950465335317726, 0.18774745232778522, 0.12835466696972964, 0.19236646079742226, 0.20009732212761588, 0.1753608790397142, 0.1293048109706877, 0.13080002224486376, 0.1794288810433673, 0.2078719826043035, 0.1565635602988088, 0.2564661376268952, 0.20441316459512515, 0.1249838252187292, 0.13634687583796934, 0.2237970495069478, 0.10724862951878456, 0.010767708313981661, 9.999999999998899e-05, 0.007444193438304159, 9.999999999998899e-05, 0.0220201806718624, 9.999999999998899e-05, 0.002602690581584133, 0.12447269464395727, 0.10072544672944839, 0.03395795775759236, 0.14553698758999944, 0.047279744830477255, 0.012890642366753857, 0.03639343802338901, 0.060370407076058785, 0.07501790218932292, 0.042947140436754516, 0.12333244333024629, 0.035078822040175095, 0.24626297655606288, 0.1391063004999552, 0.09311857113168898, 0.08083782756328439, 0.12184381278914991, 0.09887828882346272, 0.07061207384336488, 0.05558883911319845, 0.042229618380132394, 0.19919250533551236, 0.05457840477897602, 0.23345874799753397, 0.24106343331508262, 0.1362997740184685, 0.05668299773957408, 0.09090087762382759, 0.5319436489952678, 0.5387156656151443, 0.5629376666348236, 0.5177651053707459, 0.6229005303051913, 0.5514117593151024, 0.5703079303034599, 0.5670852211166324, 0.5695396711047345, 0.135127816742439, 0.11536832444862866, 0.11277232557081951, 0.09337115579400301, 0.0745472336152403, 0.12059340188390488, 0.10763146168627824, 0.11026019976159318, 0.10954411048826618, 0.47829215239646106, 0.3004836072950158, 0.17413000179320393, 0.24860055687933758, 0.21718465593130676, 0.21337956946406145, 0.4174623442338876, 0.33728236478325424, 0.2782853303936469, 0.4929587646180781, 0.3854513070860923, 0.24946961657720057, 0.28654430416459187, 0.3108555816864875, 0.5857544593930797, 0.2577155614056096, 0.6807381801752441, 0.22541636408167287, 0.24624002450144045, 0.2052769451016918, 0.30081984712905585, 0.23892814575468568, 0.38068078076345824, 0.28630947733291634, 0.2945516119824616, 0.317476630231627, 0.25857106751128744, 0.22788832216121602, 0.20216652613363495, 0.2070188049092454, 0.2332724971025666, 0.22536628818433768, 0.27155707364826787, 0.23744535926317556, 0.23655064580391139, 0.24009573480527813, 0.1986224713610143, 0.2083111055106106, 0.2068723977528426, 0.7605377362048941, 0.24197103719882185, 0.1891601387884334, 0.22102599880385165, 0.1864865995039895, 0.2166077972076439, 0.1641543580635627, 0.12659372806876745, 0.15389611889550414, 0.8979887738047796, 0.2000296970833194, 0.1997079993840465, 0.1721877713652008, 0.16138912697998076, 0.9128608774288254, 0.7608919691468662, 0.21123288145482677, 0.20887341058469833, 0.2095767946476833, 0.6873980815788463, 0.1547865796828366, 0.5730857325080261, 0.21042520099659545, 0.765336801638925, 0.20829392340013797, 0.18368933942511234, 0.18239522005696807, 0.19368722918581027, 0.19389827677910265, 0.19069100693564267, 0.1898798858193138, 0.1889055966004577, 0.19637087829418443, 0.0991190431816038, 0.0895626999909156, 0.077542623691787, 0.10093615195790029, 0.09284836058604484, 0.09154303766878347, 0.10169471507945904, 0.08502197119856991, 0.10481235041405523]}, "mutation_prompt": null}
{"id": "da8f2932-e7c2-4f67-b10e-2d6f8d3672ae", "solution": "import numpy as np\n\nclass OAHPE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.c1 = 1.4\n        self.c2 = 1.6\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.7\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _evaluate_population(self, population, func):\n        return np.array([func(ind) for ind in population])\n\n    def _update_velocity(self, velocities, population, personal_best, global_best):\n        r1, r2 = np.random.rand(2, self.population_size, self.dim)\n        cognitive = self.c1 * r1 * (personal_best - population)\n        social = self.c2 * r2 * (global_best - population)\n        return velocities * 0.4 + cognitive + social * 0.85\n\n    def _apply_bounds(self, population):\n        np.clip(population, self.lower_bound, self.upper_bound, out=population)\n\n    def _differential_mutation(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = population[indices]\n        self.mutation_factor = 0.7 + 0.3 * (1 - np.linalg.norm(b - c) / (2 * np.sqrt(self.dim)))  # Adaptive mutation factor\n        mutant = a + self.mutation_factor * (b - c)\n        trial = np.where(np.random.rand(self.dim) < self.crossover_prob * 0.95, mutant, population[idx])\n        return np.clip(trial, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_value = self._evaluate_population(population, func)\n        \n        global_best_idx = np.argmin(personal_best_value)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_value[global_best_idx]\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            self.crossover_prob = 0.6 + 0.2 * (1 - evaluations/self.budget)\n            velocities = self._update_velocity(velocities, population, personal_best, global_best)\n            population += velocities\n            self._apply_bounds(population)\n\n            new_population_value = self._evaluate_population(population, func)\n            evaluations += self.population_size\n\n            for i in range(self.population_size):\n                if new_population_value[i] < personal_best_value[i]:\n                    personal_best[i] = population[i]\n                    personal_best_value[i] = new_population_value[i]\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                trial = self._differential_mutation(population, i)\n                trial_value = func(trial)\n                if trial_value < personal_best_value[i]:  # Simplified check logic\n                    evaluations += 1\n                    population[i] = trial\n                    personal_best[i] = trial\n                    personal_best_value[i] = trial_value\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n        return global_best", "name": "OAHPE", "description": "An enhanced OAHPE with adaptive mutation factor and streamlined evaluations to improve convergence speed and efficiency.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3120b994-c3c2-471c-b9bd-c73654481b8f", "metadata": {"aucs": [0.8668348600324541, 0.8611005175267618, 0.8595363620990507, 0.8748613574260196, 0.8660451128204074, 0.8687978327620154, 0.8683873279178499, 0.8561195048447305, 0.8670443034633353, 0.7284170435184483, 0.04183025942019325, 0.5531449896823765, 0.7118588379605382, 0.7113976675206496, 0.737665508993827, 0.6900803723634554, 0.7090743231839416, 0.6654647776405871, 0.13755666515095377, 0.10933386887237517, 0.11673072508678417, 0.11306952762905986, 0.1677525895013443, 0.14609843552526147, 0.11887953657481287, 0.18398095467509457, 0.14839657186661848, 0.15193475442386373, 0.1400880666637686, 0.10889210455404918, 0.14099254359334334, 0.14714037010476455, 0.1325733727982108, 0.11275971371269555, 0.13977551335753413, 0.12808015950155516, 0.9645212205726398, 0.9761492737972657, 0.9746892724244693, 0.9501808525480977, 0.9687563510003965, 0.9525637249460471, 0.9778834822484883, 0.9600772060679164, 0.9647672510807135, 0.6479761075029533, 0.7051173057108101, 0.6885891485429403, 0.1938539096666434, 0.6943932567035305, 0.6724950467164483, 0.7119410398402154, 0.6695998217885912, 0.6959327990603225, 0.38330618483321566, 0.22846501886821569, 0.3697500447112134, 0.2785964499153327, 0.19417904301946332, 0.27829399035998803, 0.851324017403165, 0.7659172777310529, 0.8695454593854912, 0.22089245745025943, 0.13416448543609316, 0.1950465335317726, 0.18774745232778522, 0.12835466696972964, 0.19236646079742226, 0.20009732212761588, 0.1753608790397142, 0.1293048109706877, 0.13080002224486376, 0.1794288810433673, 0.2078719826043035, 0.1565635602988088, 0.2564661376268952, 0.20441316459512515, 0.1249838252187292, 0.13634687583796934, 0.2237970495069478, 0.10724862951878456, 0.010767708313981661, 9.999999999998899e-05, 0.007444193438304159, 9.999999999998899e-05, 0.0220201806718624, 9.999999999998899e-05, 0.002602690581584133, 0.12447269464395727, 0.10072544672944839, 0.03395795775759236, 0.14553698758999944, 0.047279744830477255, 0.012890642366753857, 0.03639343802338901, 0.060370407076058785, 0.07501790218932292, 0.042947140436754516, 0.12333244333024629, 0.035078822040175095, 0.24626297655606288, 0.1391063004999552, 0.09311857113168898, 0.08083782756328439, 0.12184381278914991, 0.09887828882346272, 0.07061207384336488, 0.05558883911319845, 0.042229618380132394, 0.19919250533551236, 0.05457840477897602, 0.23345874799753397, 0.24106343331508262, 0.1362997740184685, 0.05668299773957408, 0.09090087762382759, 0.5319436489952678, 0.5387156656151443, 0.5629376666348236, 0.5177651053707459, 0.6229005303051913, 0.5514117593151024, 0.5703079303034599, 0.5670852211166324, 0.5695396711047345, 0.135127816742439, 0.11536832444862866, 0.11277232557081951, 0.09337115579400301, 0.0745472336152403, 0.12059340188390488, 0.10763146168627824, 0.11026019976159318, 0.10954411048826618, 0.47829215239646106, 0.3004836072950158, 0.17413000179320393, 0.24860055687933758, 0.21718465593130676, 0.21337956946406145, 0.4174623442338876, 0.33728236478325424, 0.2782853303936469, 0.4929587646180781, 0.3854513070860923, 0.24946961657720057, 0.28654430416459187, 0.3108555816864875, 0.5857544593930797, 0.2577155614056096, 0.6807381801752441, 0.22541636408167287, 0.24624002450144045, 0.2052769451016918, 0.30081984712905585, 0.23892814575468568, 0.38068078076345824, 0.28630947733291634, 0.2945516119824616, 0.317476630231627, 0.25857106751128744, 0.22788832216121602, 0.20216652613363495, 0.2070188049092454, 0.2332724971025666, 0.22536628818433768, 0.27155707364826787, 0.23744535926317556, 0.23655064580391139, 0.24009573480527813, 0.1986224713610143, 0.2083111055106106, 0.2068723977528426, 0.7605377362048941, 0.24197103719882185, 0.1891601387884334, 0.22102599880385165, 0.1864865995039895, 0.2166077972076439, 0.1641543580635627, 0.12659372806876745, 0.15389611889550414, 0.8979887738047796, 0.2000296970833194, 0.1997079993840465, 0.1721877713652008, 0.16138912697998076, 0.9128608774288254, 0.7608919691468662, 0.21123288145482677, 0.20887341058469833, 0.2095767946476833, 0.6873980815788463, 0.1547865796828366, 0.5730857325080261, 0.21042520099659545, 0.765336801638925, 0.20829392340013797, 0.18368933942511234, 0.18239522005696807, 0.19368722918581027, 0.19389827677910265, 0.19069100693564267, 0.1898798858193138, 0.1889055966004577, 0.19637087829418443, 0.0991190431816038, 0.0895626999909156, 0.077542623691787, 0.10093615195790029, 0.09284836058604484, 0.09154303766878347, 0.10169471507945904, 0.08502197119856991, 0.10481235041405523]}, "mutation_prompt": null}
{"id": "5359dd50-7e77-466e-b0f7-a24a04f31e0f", "solution": "import numpy as np\n\nclass OAHPE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.c1 = 1.4\n        self.c2 = 1.6\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.7\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _evaluate_population(self, population, func):\n        return np.array([func(ind) for ind in population])\n\n    def _update_velocity(self, velocities, population, personal_best, global_best):\n        r1, r2 = np.random.rand(2, self.population_size, self.dim)\n        cognitive = self.c1 * r1 * (personal_best - population)\n        social = self.c2 * r2 * (global_best - population)\n        return velocities * 0.4 + cognitive + social * 0.85\n\n    def _apply_bounds(self, population):\n        np.clip(population, self.lower_bound, self.upper_bound, out=population)\n\n    def _differential_mutation(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = population[indices]\n        self.mutation_factor = 0.7 + 0.3 * (1 - np.linalg.norm(b - c) / (2 * np.sqrt(self.dim)))  # Adaptive mutation factor\n        mutant = a + self.mutation_factor * (b - c)\n        trial = np.where(np.random.rand(self.dim) < self.crossover_prob * 0.95, mutant, population[idx])\n        return np.clip(trial, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_value = self._evaluate_population(population, func)\n        \n        global_best_idx = np.argmin(personal_best_value)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_value[global_best_idx]\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            self.crossover_prob = 0.6 + 0.2 * (1 - evaluations/self.budget)\n            velocities = self._update_velocity(velocities, population, personal_best, global_best)\n            population += velocities\n            self._apply_bounds(population)\n\n            new_population_value = self._evaluate_population(population, func)\n            evaluations += self.population_size\n\n            for i in range(self.population_size):\n                if new_population_value[i] < personal_best_value[i]:\n                    personal_best[i] = population[i]\n                    personal_best_value[i] = new_population_value[i]\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                trial = self._differential_mutation(population, i)\n                trial_value = func(trial)\n                if trial_value < personal_best_value[i]:  # Simplified check logic\n                    evaluations += 1\n                    population[i] = trial\n                    personal_best[i] = trial\n                    personal_best_value[i] = trial_value\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n        return global_best", "name": "OAHPE", "description": "An enhanced OAHPE with adaptive mutation factor and streamlined evaluations to improve convergence speed and efficiency.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3120b994-c3c2-471c-b9bd-c73654481b8f", "metadata": {"aucs": [0.8668348600324541, 0.8611005175267618, 0.8595363620990507, 0.8748613574260196, 0.8660451128204074, 0.8687978327620154, 0.8683873279178499, 0.8561195048447305, 0.8670443034633353, 0.7284170435184483, 0.04183025942019325, 0.5531449896823765, 0.7118588379605382, 0.7113976675206496, 0.737665508993827, 0.6900803723634554, 0.7090743231839416, 0.6654647776405871, 0.13755666515095377, 0.10933386887237517, 0.11673072508678417, 0.11306952762905986, 0.1677525895013443, 0.14609843552526147, 0.11887953657481287, 0.18398095467509457, 0.14839657186661848, 0.15193475442386373, 0.1400880666637686, 0.10889210455404918, 0.14099254359334334, 0.14714037010476455, 0.1325733727982108, 0.11275971371269555, 0.13977551335753413, 0.12808015950155516, 0.9645212205726398, 0.9761492737972657, 0.9746892724244693, 0.9501808525480977, 0.9687563510003965, 0.9525637249460471, 0.9778834822484883, 0.9600772060679164, 0.9647672510807135, 0.6479761075029533, 0.7051173057108101, 0.6885891485429403, 0.1938539096666434, 0.6943932567035305, 0.6724950467164483, 0.7119410398402154, 0.6695998217885912, 0.6959327990603225, 0.38330618483321566, 0.22846501886821569, 0.3697500447112134, 0.2785964499153327, 0.19417904301946332, 0.27829399035998803, 0.851324017403165, 0.7659172777310529, 0.8695454593854912, 0.22089245745025943, 0.13416448543609316, 0.1950465335317726, 0.18774745232778522, 0.12835466696972964, 0.19236646079742226, 0.20009732212761588, 0.1753608790397142, 0.1293048109706877, 0.13080002224486376, 0.1794288810433673, 0.2078719826043035, 0.1565635602988088, 0.2564661376268952, 0.20441316459512515, 0.1249838252187292, 0.13634687583796934, 0.2237970495069478, 0.10724862951878456, 0.010767708313981661, 9.999999999998899e-05, 0.007444193438304159, 9.999999999998899e-05, 0.0220201806718624, 9.999999999998899e-05, 0.002602690581584133, 0.12447269464395727, 0.10072544672944839, 0.03395795775759236, 0.14553698758999944, 0.047279744830477255, 0.012890642366753857, 0.03639343802338901, 0.060370407076058785, 0.07501790218932292, 0.042947140436754516, 0.12333244333024629, 0.035078822040175095, 0.24626297655606288, 0.1391063004999552, 0.09311857113168898, 0.08083782756328439, 0.12184381278914991, 0.09887828882346272, 0.07061207384336488, 0.05558883911319845, 0.042229618380132394, 0.19919250533551236, 0.05457840477897602, 0.23345874799753397, 0.24106343331508262, 0.1362997740184685, 0.05668299773957408, 0.09090087762382759, 0.5319436489952678, 0.5387156656151443, 0.5629376666348236, 0.5177651053707459, 0.6229005303051913, 0.5514117593151024, 0.5703079303034599, 0.5670852211166324, 0.5695396711047345, 0.135127816742439, 0.11536832444862866, 0.11277232557081951, 0.09337115579400301, 0.0745472336152403, 0.12059340188390488, 0.10763146168627824, 0.11026019976159318, 0.10954411048826618, 0.47829215239646106, 0.3004836072950158, 0.17413000179320393, 0.24860055687933758, 0.21718465593130676, 0.21337956946406145, 0.4174623442338876, 0.33728236478325424, 0.2782853303936469, 0.4929587646180781, 0.3854513070860923, 0.24946961657720057, 0.28654430416459187, 0.3108555816864875, 0.5857544593930797, 0.2577155614056096, 0.6807381801752441, 0.22541636408167287, 0.24624002450144045, 0.2052769451016918, 0.30081984712905585, 0.23892814575468568, 0.38068078076345824, 0.28630947733291634, 0.2945516119824616, 0.317476630231627, 0.25857106751128744, 0.22788832216121602, 0.20216652613363495, 0.2070188049092454, 0.2332724971025666, 0.22536628818433768, 0.27155707364826787, 0.23744535926317556, 0.23655064580391139, 0.24009573480527813, 0.1986224713610143, 0.2083111055106106, 0.2068723977528426, 0.7605377362048941, 0.24197103719882185, 0.1891601387884334, 0.22102599880385165, 0.1864865995039895, 0.2166077972076439, 0.1641543580635627, 0.12659372806876745, 0.15389611889550414, 0.8979887738047796, 0.2000296970833194, 0.1997079993840465, 0.1721877713652008, 0.16138912697998076, 0.9128608774288254, 0.7608919691468662, 0.21123288145482677, 0.20887341058469833, 0.2095767946476833, 0.6873980815788463, 0.1547865796828366, 0.5730857325080261, 0.21042520099659545, 0.765336801638925, 0.20829392340013797, 0.18368933942511234, 0.18239522005696807, 0.19368722918581027, 0.19389827677910265, 0.19069100693564267, 0.1898798858193138, 0.1889055966004577, 0.19637087829418443, 0.0991190431816038, 0.0895626999909156, 0.077542623691787, 0.10093615195790029, 0.09284836058604484, 0.09154303766878347, 0.10169471507945904, 0.08502197119856991, 0.10481235041405523]}, "mutation_prompt": null}
{"id": "531ab5fa-1d9d-4bc9-8d71-672264d8b7fe", "solution": "import numpy as np\n\nclass OAHPE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.c1 = 1.4\n        self.c2 = 1.6\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.7\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _evaluate_population(self, population, func):\n        return np.array([func(ind) for ind in population])\n\n    def _update_velocity(self, velocities, population, personal_best, global_best):\n        r1, r2 = np.random.rand(2, self.population_size, self.dim)\n        cognitive = self.c1 * r1 * (personal_best - population)\n        social = self.c2 * r2 * (global_best - population)\n        return velocities * 0.4 + cognitive + social * 0.85\n\n    def _apply_bounds(self, population):\n        np.clip(population, self.lower_bound, self.upper_bound, out=population)\n\n    def _differential_mutation(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = population[indices]\n        self.mutation_factor = 0.7 + 0.3 * (1 - np.linalg.norm(b - c) / (2 * np.sqrt(self.dim)))  # Adaptive mutation factor\n        mutant = a + self.mutation_factor * (b - c)\n        trial = np.where(np.random.rand(self.dim) < self.crossover_prob * 0.95, mutant, population[idx])\n        return np.clip(trial, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_value = self._evaluate_population(population, func)\n        \n        global_best_idx = np.argmin(personal_best_value)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_value[global_best_idx]\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            self.crossover_prob = 0.6 + 0.2 * (1 - evaluations/self.budget)\n            velocities = self._update_velocity(velocities, population, personal_best, global_best)\n            population += velocities\n            self._apply_bounds(population)\n\n            new_population_value = self._evaluate_population(population, func)\n            evaluations += self.population_size\n\n            for i in range(self.population_size):\n                if new_population_value[i] < personal_best_value[i]:\n                    personal_best[i] = population[i]\n                    personal_best_value[i] = new_population_value[i]\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                trial = self._differential_mutation(population, i)\n                trial_value = func(trial)\n                if trial_value < personal_best_value[i]:  # Simplified check logic\n                    evaluations += 1\n                    population[i] = trial\n                    personal_best[i] = trial\n                    personal_best_value[i] = trial_value\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n        return global_best", "name": "OAHPE", "description": "An enhanced OAHPE with adaptive mutation factor and streamlined evaluations to improve convergence speed and efficiency.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3120b994-c3c2-471c-b9bd-c73654481b8f", "metadata": {"aucs": [0.8668348600324541, 0.8611005175267618, 0.8595363620990507, 0.8748613574260196, 0.8660451128204074, 0.8687978327620154, 0.8683873279178499, 0.8561195048447305, 0.8670443034633353, 0.7284170435184483, 0.04183025942019325, 0.5531449896823765, 0.7118588379605382, 0.7113976675206496, 0.737665508993827, 0.6900803723634554, 0.7090743231839416, 0.6654647776405871, 0.13755666515095377, 0.10933386887237517, 0.11673072508678417, 0.11306952762905986, 0.1677525895013443, 0.14609843552526147, 0.11887953657481287, 0.18398095467509457, 0.14839657186661848, 0.15193475442386373, 0.1400880666637686, 0.10889210455404918, 0.14099254359334334, 0.14714037010476455, 0.1325733727982108, 0.11275971371269555, 0.13977551335753413, 0.12808015950155516, 0.9645212205726398, 0.9761492737972657, 0.9746892724244693, 0.9501808525480977, 0.9687563510003965, 0.9525637249460471, 0.9778834822484883, 0.9600772060679164, 0.9647672510807135, 0.6479761075029533, 0.7051173057108101, 0.6885891485429403, 0.1938539096666434, 0.6943932567035305, 0.6724950467164483, 0.7119410398402154, 0.6695998217885912, 0.6959327990603225, 0.38330618483321566, 0.22846501886821569, 0.3697500447112134, 0.2785964499153327, 0.19417904301946332, 0.27829399035998803, 0.851324017403165, 0.7659172777310529, 0.8695454593854912, 0.22089245745025943, 0.13416448543609316, 0.1950465335317726, 0.18774745232778522, 0.12835466696972964, 0.19236646079742226, 0.20009732212761588, 0.1753608790397142, 0.1293048109706877, 0.13080002224486376, 0.1794288810433673, 0.2078719826043035, 0.1565635602988088, 0.2564661376268952, 0.20441316459512515, 0.1249838252187292, 0.13634687583796934, 0.2237970495069478, 0.10724862951878456, 0.010767708313981661, 9.999999999998899e-05, 0.007444193438304159, 9.999999999998899e-05, 0.0220201806718624, 9.999999999998899e-05, 0.002602690581584133, 0.12447269464395727, 0.10072544672944839, 0.03395795775759236, 0.14553698758999944, 0.047279744830477255, 0.012890642366753857, 0.03639343802338901, 0.060370407076058785, 0.07501790218932292, 0.042947140436754516, 0.12333244333024629, 0.035078822040175095, 0.24626297655606288, 0.1391063004999552, 0.09311857113168898, 0.08083782756328439, 0.12184381278914991, 0.09887828882346272, 0.07061207384336488, 0.05558883911319845, 0.042229618380132394, 0.19919250533551236, 0.05457840477897602, 0.23345874799753397, 0.24106343331508262, 0.1362997740184685, 0.05668299773957408, 0.09090087762382759, 0.5319436489952678, 0.5387156656151443, 0.5629376666348236, 0.5177651053707459, 0.6229005303051913, 0.5514117593151024, 0.5703079303034599, 0.5670852211166324, 0.5695396711047345, 0.135127816742439, 0.11536832444862866, 0.11277232557081951, 0.09337115579400301, 0.0745472336152403, 0.12059340188390488, 0.10763146168627824, 0.11026019976159318, 0.10954411048826618, 0.47829215239646106, 0.3004836072950158, 0.17413000179320393, 0.24860055687933758, 0.21718465593130676, 0.21337956946406145, 0.4174623442338876, 0.33728236478325424, 0.2782853303936469, 0.4929587646180781, 0.3854513070860923, 0.24946961657720057, 0.28654430416459187, 0.3108555816864875, 0.5857544593930797, 0.2577155614056096, 0.6807381801752441, 0.22541636408167287, 0.24624002450144045, 0.2052769451016918, 0.30081984712905585, 0.23892814575468568, 0.38068078076345824, 0.28630947733291634, 0.2945516119824616, 0.317476630231627, 0.25857106751128744, 0.22788832216121602, 0.20216652613363495, 0.2070188049092454, 0.2332724971025666, 0.22536628818433768, 0.27155707364826787, 0.23744535926317556, 0.23655064580391139, 0.24009573480527813, 0.1986224713610143, 0.2083111055106106, 0.2068723977528426, 0.7605377362048941, 0.24197103719882185, 0.1891601387884334, 0.22102599880385165, 0.1864865995039895, 0.2166077972076439, 0.1641543580635627, 0.12659372806876745, 0.15389611889550414, 0.8979887738047796, 0.2000296970833194, 0.1997079993840465, 0.1721877713652008, 0.16138912697998076, 0.9128608774288254, 0.7608919691468662, 0.21123288145482677, 0.20887341058469833, 0.2095767946476833, 0.6873980815788463, 0.1547865796828366, 0.5730857325080261, 0.21042520099659545, 0.765336801638925, 0.20829392340013797, 0.18368933942511234, 0.18239522005696807, 0.19368722918581027, 0.19389827677910265, 0.19069100693564267, 0.1898798858193138, 0.1889055966004577, 0.19637087829418443, 0.0991190431816038, 0.0895626999909156, 0.077542623691787, 0.10093615195790029, 0.09284836058604484, 0.09154303766878347, 0.10169471507945904, 0.08502197119856991, 0.10481235041405523]}, "mutation_prompt": null}
{"id": "2cd5a28b-90a6-42c0-a586-0fe3e3844d71", "solution": "import numpy as np\n\nclass OAHPE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.c1 = 1.4\n        self.c2 = 1.6\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.7\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _evaluate_population(self, population, func):\n        return np.array([func(ind) for ind in population])\n\n    def _update_velocity(self, velocities, population, personal_best, global_best):\n        r1, r2 = np.random.rand(2, self.population_size, self.dim)\n        cognitive = self.c1 * r1 * (personal_best - population)\n        social = self.c2 * r2 * (global_best - population)\n        return velocities * 0.4 + cognitive + social * 0.85\n\n    def _apply_bounds(self, population):\n        np.clip(population, self.lower_bound, self.upper_bound, out=population)\n\n    def _differential_mutation(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = population[indices]\n        self.mutation_factor = 0.7 + 0.3 * (1 - np.linalg.norm(b - c) / (2 * np.sqrt(self.dim)))  # Adaptive mutation factor\n        mutant = a + self.mutation_factor * (b - c)\n        trial = np.where(np.random.rand(self.dim) < self.crossover_prob * 0.95, mutant, population[idx])\n        return np.clip(trial, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_value = self._evaluate_population(population, func)\n        \n        global_best_idx = np.argmin(personal_best_value)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_value[global_best_idx]\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            self.crossover_prob = 0.6 + 0.2 * (1 - evaluations/self.budget)\n            velocities = self._update_velocity(velocities, population, personal_best, global_best)\n            population += velocities\n            self._apply_bounds(population)\n\n            new_population_value = self._evaluate_population(population, func)\n            evaluations += self.population_size\n\n            for i in range(self.population_size):\n                if new_population_value[i] < personal_best_value[i]:\n                    personal_best[i] = population[i]\n                    personal_best_value[i] = new_population_value[i]\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                trial = self._differential_mutation(population, i)\n                trial_value = func(trial)\n                if trial_value < personal_best_value[i]:  # Simplified check logic\n                    evaluations += 1\n                    population[i] = trial\n                    personal_best[i] = trial\n                    personal_best_value[i] = trial_value\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n        return global_best", "name": "OAHPE", "description": "An enhanced OAHPE with adaptive mutation factor and streamlined evaluations to improve convergence speed and efficiency.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3120b994-c3c2-471c-b9bd-c73654481b8f", "metadata": {"aucs": [0.8668348600324541, 0.8611005175267618, 0.8595363620990507, 0.8748613574260196, 0.8660451128204074, 0.8687978327620154, 0.8683873279178499, 0.8561195048447305, 0.8670443034633353, 0.7284170435184483, 0.04183025942019325, 0.5531449896823765, 0.7118588379605382, 0.7113976675206496, 0.737665508993827, 0.6900803723634554, 0.7090743231839416, 0.6654647776405871, 0.13755666515095377, 0.10933386887237517, 0.11673072508678417, 0.11306952762905986, 0.1677525895013443, 0.14609843552526147, 0.11887953657481287, 0.18398095467509457, 0.14839657186661848, 0.15193475442386373, 0.1400880666637686, 0.10889210455404918, 0.14099254359334334, 0.14714037010476455, 0.1325733727982108, 0.11275971371269555, 0.13977551335753413, 0.12808015950155516, 0.9645212205726398, 0.9761492737972657, 0.9746892724244693, 0.9501808525480977, 0.9687563510003965, 0.9525637249460471, 0.9778834822484883, 0.9600772060679164, 0.9647672510807135, 0.6479761075029533, 0.7051173057108101, 0.6885891485429403, 0.1938539096666434, 0.6943932567035305, 0.6724950467164483, 0.7119410398402154, 0.6695998217885912, 0.6959327990603225, 0.38330618483321566, 0.22846501886821569, 0.3697500447112134, 0.2785964499153327, 0.19417904301946332, 0.27829399035998803, 0.851324017403165, 0.7659172777310529, 0.8695454593854912, 0.22089245745025943, 0.13416448543609316, 0.1950465335317726, 0.18774745232778522, 0.12835466696972964, 0.19236646079742226, 0.20009732212761588, 0.1753608790397142, 0.1293048109706877, 0.13080002224486376, 0.1794288810433673, 0.2078719826043035, 0.1565635602988088, 0.2564661376268952, 0.20441316459512515, 0.1249838252187292, 0.13634687583796934, 0.2237970495069478, 0.10724862951878456, 0.010767708313981661, 9.999999999998899e-05, 0.007444193438304159, 9.999999999998899e-05, 0.0220201806718624, 9.999999999998899e-05, 0.002602690581584133, 0.12447269464395727, 0.10072544672944839, 0.03395795775759236, 0.14553698758999944, 0.047279744830477255, 0.012890642366753857, 0.03639343802338901, 0.060370407076058785, 0.07501790218932292, 0.042947140436754516, 0.12333244333024629, 0.035078822040175095, 0.24626297655606288, 0.1391063004999552, 0.09311857113168898, 0.08083782756328439, 0.12184381278914991, 0.09887828882346272, 0.07061207384336488, 0.05558883911319845, 0.042229618380132394, 0.19919250533551236, 0.05457840477897602, 0.23345874799753397, 0.24106343331508262, 0.1362997740184685, 0.05668299773957408, 0.09090087762382759, 0.5319436489952678, 0.5387156656151443, 0.5629376666348236, 0.5177651053707459, 0.6229005303051913, 0.5514117593151024, 0.5703079303034599, 0.5670852211166324, 0.5695396711047345, 0.135127816742439, 0.11536832444862866, 0.11277232557081951, 0.09337115579400301, 0.0745472336152403, 0.12059340188390488, 0.10763146168627824, 0.11026019976159318, 0.10954411048826618, 0.47829215239646106, 0.3004836072950158, 0.17413000179320393, 0.24860055687933758, 0.21718465593130676, 0.21337956946406145, 0.4174623442338876, 0.33728236478325424, 0.2782853303936469, 0.4929587646180781, 0.3854513070860923, 0.24946961657720057, 0.28654430416459187, 0.3108555816864875, 0.5857544593930797, 0.2577155614056096, 0.6807381801752441, 0.22541636408167287, 0.24624002450144045, 0.2052769451016918, 0.30081984712905585, 0.23892814575468568, 0.38068078076345824, 0.28630947733291634, 0.2945516119824616, 0.317476630231627, 0.25857106751128744, 0.22788832216121602, 0.20216652613363495, 0.2070188049092454, 0.2332724971025666, 0.22536628818433768, 0.27155707364826787, 0.23744535926317556, 0.23655064580391139, 0.24009573480527813, 0.1986224713610143, 0.2083111055106106, 0.2068723977528426, 0.7605377362048941, 0.24197103719882185, 0.1891601387884334, 0.22102599880385165, 0.1864865995039895, 0.2166077972076439, 0.1641543580635627, 0.12659372806876745, 0.15389611889550414, 0.8979887738047796, 0.2000296970833194, 0.1997079993840465, 0.1721877713652008, 0.16138912697998076, 0.9128608774288254, 0.7608919691468662, 0.21123288145482677, 0.20887341058469833, 0.2095767946476833, 0.6873980815788463, 0.1547865796828366, 0.5730857325080261, 0.21042520099659545, 0.765336801638925, 0.20829392340013797, 0.18368933942511234, 0.18239522005696807, 0.19368722918581027, 0.19389827677910265, 0.19069100693564267, 0.1898798858193138, 0.1889055966004577, 0.19637087829418443, 0.0991190431816038, 0.0895626999909156, 0.077542623691787, 0.10093615195790029, 0.09284836058604484, 0.09154303766878347, 0.10169471507945904, 0.08502197119856991, 0.10481235041405523]}, "mutation_prompt": null}
{"id": "3d5edc90-b7b9-4d4a-8e85-c2586770ae03", "solution": "import numpy as np\n\nclass OAHPE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.c1 = 1.4\n        self.c2 = 1.6\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.7\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _evaluate_population(self, population, func):\n        return np.array([func(ind) for ind in population])\n\n    def _update_velocity(self, velocities, population, personal_best, global_best):\n        r1, r2 = np.random.rand(2, self.population_size, self.dim)\n        cognitive = self.c1 * r1 * (personal_best - population)\n        social = self.c2 * r2 * (global_best - population)\n        return velocities * 0.4 + cognitive + social * 0.85\n\n    def _apply_bounds(self, population):\n        np.clip(population, self.lower_bound, self.upper_bound, out=population)\n\n    def _differential_mutation(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = population[indices]\n        self.mutation_factor = 0.7 + 0.3 * (1 - np.linalg.norm(b - c) / (2 * np.sqrt(self.dim)))  # Adaptive mutation factor\n        mutant = a + self.mutation_factor * (b - c)\n        trial = np.where(np.random.rand(self.dim) < self.crossover_prob * 0.95, mutant, population[idx])\n        return np.clip(trial, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_value = self._evaluate_population(population, func)\n        \n        global_best_idx = np.argmin(personal_best_value)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_value[global_best_idx]\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            self.crossover_prob = 0.6 + 0.2 * (1 - evaluations/self.budget)\n            velocities = self._update_velocity(velocities, population, personal_best, global_best)\n            population += velocities\n            self._apply_bounds(population)\n\n            new_population_value = self._evaluate_population(population, func)\n            evaluations += self.population_size\n\n            for i in range(self.population_size):\n                if new_population_value[i] < personal_best_value[i]:\n                    personal_best[i] = population[i]\n                    personal_best_value[i] = new_population_value[i]\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                trial = self._differential_mutation(population, i)\n                trial_value = func(trial)\n                if trial_value < personal_best_value[i]:  # Simplified check logic\n                    evaluations += 1\n                    population[i] = trial\n                    personal_best[i] = trial\n                    personal_best_value[i] = trial_value\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n        return global_best", "name": "OAHPE", "description": "An enhanced OAHPE with adaptive mutation factor and streamlined evaluations to improve convergence speed and efficiency.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3120b994-c3c2-471c-b9bd-c73654481b8f", "metadata": {"aucs": [0.8668348600324541, 0.8611005175267618, 0.8595363620990507, 0.8748613574260196, 0.8660451128204074, 0.8687978327620154, 0.8683873279178499, 0.8561195048447305, 0.8670443034633353, 0.7284170435184483, 0.04183025942019325, 0.5531449896823765, 0.7118588379605382, 0.7113976675206496, 0.737665508993827, 0.6900803723634554, 0.7090743231839416, 0.6654647776405871, 0.13755666515095377, 0.10933386887237517, 0.11673072508678417, 0.11306952762905986, 0.1677525895013443, 0.14609843552526147, 0.11887953657481287, 0.18398095467509457, 0.14839657186661848, 0.15193475442386373, 0.1400880666637686, 0.10889210455404918, 0.14099254359334334, 0.14714037010476455, 0.1325733727982108, 0.11275971371269555, 0.13977551335753413, 0.12808015950155516, 0.9645212205726398, 0.9761492737972657, 0.9746892724244693, 0.9501808525480977, 0.9687563510003965, 0.9525637249460471, 0.9778834822484883, 0.9600772060679164, 0.9647672510807135, 0.6479761075029533, 0.7051173057108101, 0.6885891485429403, 0.1938539096666434, 0.6943932567035305, 0.6724950467164483, 0.7119410398402154, 0.6695998217885912, 0.6959327990603225, 0.38330618483321566, 0.22846501886821569, 0.3697500447112134, 0.2785964499153327, 0.19417904301946332, 0.27829399035998803, 0.851324017403165, 0.7659172777310529, 0.8695454593854912, 0.22089245745025943, 0.13416448543609316, 0.1950465335317726, 0.18774745232778522, 0.12835466696972964, 0.19236646079742226, 0.20009732212761588, 0.1753608790397142, 0.1293048109706877, 0.13080002224486376, 0.1794288810433673, 0.2078719826043035, 0.1565635602988088, 0.2564661376268952, 0.20441316459512515, 0.1249838252187292, 0.13634687583796934, 0.2237970495069478, 0.10724862951878456, 0.010767708313981661, 9.999999999998899e-05, 0.007444193438304159, 9.999999999998899e-05, 0.0220201806718624, 9.999999999998899e-05, 0.002602690581584133, 0.12447269464395727, 0.10072544672944839, 0.03395795775759236, 0.14553698758999944, 0.047279744830477255, 0.012890642366753857, 0.03639343802338901, 0.060370407076058785, 0.07501790218932292, 0.042947140436754516, 0.12333244333024629, 0.035078822040175095, 0.24626297655606288, 0.1391063004999552, 0.09311857113168898, 0.08083782756328439, 0.12184381278914991, 0.09887828882346272, 0.07061207384336488, 0.05558883911319845, 0.042229618380132394, 0.19919250533551236, 0.05457840477897602, 0.23345874799753397, 0.24106343331508262, 0.1362997740184685, 0.05668299773957408, 0.09090087762382759, 0.5319436489952678, 0.5387156656151443, 0.5629376666348236, 0.5177651053707459, 0.6229005303051913, 0.5514117593151024, 0.5703079303034599, 0.5670852211166324, 0.5695396711047345, 0.135127816742439, 0.11536832444862866, 0.11277232557081951, 0.09337115579400301, 0.0745472336152403, 0.12059340188390488, 0.10763146168627824, 0.11026019976159318, 0.10954411048826618, 0.47829215239646106, 0.3004836072950158, 0.17413000179320393, 0.24860055687933758, 0.21718465593130676, 0.21337956946406145, 0.4174623442338876, 0.33728236478325424, 0.2782853303936469, 0.4929587646180781, 0.3854513070860923, 0.24946961657720057, 0.28654430416459187, 0.3108555816864875, 0.5857544593930797, 0.2577155614056096, 0.6807381801752441, 0.22541636408167287, 0.24624002450144045, 0.2052769451016918, 0.30081984712905585, 0.23892814575468568, 0.38068078076345824, 0.28630947733291634, 0.2945516119824616, 0.317476630231627, 0.25857106751128744, 0.22788832216121602, 0.20216652613363495, 0.2070188049092454, 0.2332724971025666, 0.22536628818433768, 0.27155707364826787, 0.23744535926317556, 0.23655064580391139, 0.24009573480527813, 0.1986224713610143, 0.2083111055106106, 0.2068723977528426, 0.7605377362048941, 0.24197103719882185, 0.1891601387884334, 0.22102599880385165, 0.1864865995039895, 0.2166077972076439, 0.1641543580635627, 0.12659372806876745, 0.15389611889550414, 0.8979887738047796, 0.2000296970833194, 0.1997079993840465, 0.1721877713652008, 0.16138912697998076, 0.9128608774288254, 0.7608919691468662, 0.21123288145482677, 0.20887341058469833, 0.2095767946476833, 0.6873980815788463, 0.1547865796828366, 0.5730857325080261, 0.21042520099659545, 0.765336801638925, 0.20829392340013797, 0.18368933942511234, 0.18239522005696807, 0.19368722918581027, 0.19389827677910265, 0.19069100693564267, 0.1898798858193138, 0.1889055966004577, 0.19637087829418443, 0.0991190431816038, 0.0895626999909156, 0.077542623691787, 0.10093615195790029, 0.09284836058604484, 0.09154303766878347, 0.10169471507945904, 0.08502197119856991, 0.10481235041405523]}, "mutation_prompt": null}
{"id": "88539430-79e1-4a2b-aaa7-78f58f0e3ebb", "solution": "import numpy as np\n\nclass OAHPE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.c1 = 1.4\n        self.c2 = 1.6\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.7\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _evaluate_population(self, population, func):\n        return np.array([func(ind) for ind in population])\n\n    def _update_velocity(self, velocities, population, personal_best, global_best):\n        r1, r2 = np.random.rand(2, self.population_size, self.dim)\n        cognitive = self.c1 * r1 * (personal_best - population)\n        social = self.c2 * r2 * (global_best - population)\n        return velocities * 0.4 + cognitive + social * 0.85\n\n    def _apply_bounds(self, population):\n        np.clip(population, self.lower_bound, self.upper_bound, out=population)\n\n    def _differential_mutation(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = population[indices]\n        self.mutation_factor = 0.7 + 0.3 * (1 - np.linalg.norm(b - c) / (2 * np.sqrt(self.dim)))  # Adaptive mutation factor\n        mutant = a + self.mutation_factor * (b - c)\n        trial = np.where(np.random.rand(self.dim) < self.crossover_prob * 0.95, mutant, population[idx])\n        return np.clip(trial, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_value = self._evaluate_population(population, func)\n        \n        global_best_idx = np.argmin(personal_best_value)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_value[global_best_idx]\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            self.crossover_prob = 0.6 + 0.2 * (1 - evaluations/self.budget)\n            velocities = self._update_velocity(velocities, population, personal_best, global_best)\n            population += velocities\n            self._apply_bounds(population)\n\n            new_population_value = self._evaluate_population(population, func)\n            evaluations += self.population_size\n\n            for i in range(self.population_size):\n                if new_population_value[i] < personal_best_value[i]:\n                    personal_best[i] = population[i]\n                    personal_best_value[i] = new_population_value[i]\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                trial = self._differential_mutation(population, i)\n                trial_value = func(trial)\n                if trial_value < personal_best_value[i]:  # Simplified check logic\n                    evaluations += 1\n                    population[i] = trial\n                    personal_best[i] = trial\n                    personal_best_value[i] = trial_value\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n        return global_best", "name": "OAHPE", "description": "An enhanced OAHPE with adaptive mutation factor and streamlined evaluations to improve convergence speed and efficiency.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3120b994-c3c2-471c-b9bd-c73654481b8f", "metadata": {"aucs": [0.8668348600324541, 0.8611005175267618, 0.8595363620990507, 0.8748613574260196, 0.8660451128204074, 0.8687978327620154, 0.8683873279178499, 0.8561195048447305, 0.8670443034633353, 0.7284170435184483, 0.04183025942019325, 0.5531449896823765, 0.7118588379605382, 0.7113976675206496, 0.737665508993827, 0.6900803723634554, 0.7090743231839416, 0.6654647776405871, 0.13755666515095377, 0.10933386887237517, 0.11673072508678417, 0.11306952762905986, 0.1677525895013443, 0.14609843552526147, 0.11887953657481287, 0.18398095467509457, 0.14839657186661848, 0.15193475442386373, 0.1400880666637686, 0.10889210455404918, 0.14099254359334334, 0.14714037010476455, 0.1325733727982108, 0.11275971371269555, 0.13977551335753413, 0.12808015950155516, 0.9645212205726398, 0.9761492737972657, 0.9746892724244693, 0.9501808525480977, 0.9687563510003965, 0.9525637249460471, 0.9778834822484883, 0.9600772060679164, 0.9647672510807135, 0.6479761075029533, 0.7051173057108101, 0.6885891485429403, 0.1938539096666434, 0.6943932567035305, 0.6724950467164483, 0.7119410398402154, 0.6695998217885912, 0.6959327990603225, 0.38330618483321566, 0.22846501886821569, 0.3697500447112134, 0.2785964499153327, 0.19417904301946332, 0.27829399035998803, 0.851324017403165, 0.7659172777310529, 0.8695454593854912, 0.22089245745025943, 0.13416448543609316, 0.1950465335317726, 0.18774745232778522, 0.12835466696972964, 0.19236646079742226, 0.20009732212761588, 0.1753608790397142, 0.1293048109706877, 0.13080002224486376, 0.1794288810433673, 0.2078719826043035, 0.1565635602988088, 0.2564661376268952, 0.20441316459512515, 0.1249838252187292, 0.13634687583796934, 0.2237970495069478, 0.10724862951878456, 0.010767708313981661, 9.999999999998899e-05, 0.007444193438304159, 9.999999999998899e-05, 0.0220201806718624, 9.999999999998899e-05, 0.002602690581584133, 0.12447269464395727, 0.10072544672944839, 0.03395795775759236, 0.14553698758999944, 0.047279744830477255, 0.012890642366753857, 0.03639343802338901, 0.060370407076058785, 0.07501790218932292, 0.042947140436754516, 0.12333244333024629, 0.035078822040175095, 0.24626297655606288, 0.1391063004999552, 0.09311857113168898, 0.08083782756328439, 0.12184381278914991, 0.09887828882346272, 0.07061207384336488, 0.05558883911319845, 0.042229618380132394, 0.19919250533551236, 0.05457840477897602, 0.23345874799753397, 0.24106343331508262, 0.1362997740184685, 0.05668299773957408, 0.09090087762382759, 0.5319436489952678, 0.5387156656151443, 0.5629376666348236, 0.5177651053707459, 0.6229005303051913, 0.5514117593151024, 0.5703079303034599, 0.5670852211166324, 0.5695396711047345, 0.135127816742439, 0.11536832444862866, 0.11277232557081951, 0.09337115579400301, 0.0745472336152403, 0.12059340188390488, 0.10763146168627824, 0.11026019976159318, 0.10954411048826618, 0.47829215239646106, 0.3004836072950158, 0.17413000179320393, 0.24860055687933758, 0.21718465593130676, 0.21337956946406145, 0.4174623442338876, 0.33728236478325424, 0.2782853303936469, 0.4929587646180781, 0.3854513070860923, 0.24946961657720057, 0.28654430416459187, 0.3108555816864875, 0.5857544593930797, 0.2577155614056096, 0.6807381801752441, 0.22541636408167287, 0.24624002450144045, 0.2052769451016918, 0.30081984712905585, 0.23892814575468568, 0.38068078076345824, 0.28630947733291634, 0.2945516119824616, 0.317476630231627, 0.25857106751128744, 0.22788832216121602, 0.20216652613363495, 0.2070188049092454, 0.2332724971025666, 0.22536628818433768, 0.27155707364826787, 0.23744535926317556, 0.23655064580391139, 0.24009573480527813, 0.1986224713610143, 0.2083111055106106, 0.2068723977528426, 0.7605377362048941, 0.24197103719882185, 0.1891601387884334, 0.22102599880385165, 0.1864865995039895, 0.2166077972076439, 0.1641543580635627, 0.12659372806876745, 0.15389611889550414, 0.8979887738047796, 0.2000296970833194, 0.1997079993840465, 0.1721877713652008, 0.16138912697998076, 0.9128608774288254, 0.7608919691468662, 0.21123288145482677, 0.20887341058469833, 0.2095767946476833, 0.6873980815788463, 0.1547865796828366, 0.5730857325080261, 0.21042520099659545, 0.765336801638925, 0.20829392340013797, 0.18368933942511234, 0.18239522005696807, 0.19368722918581027, 0.19389827677910265, 0.19069100693564267, 0.1898798858193138, 0.1889055966004577, 0.19637087829418443, 0.0991190431816038, 0.0895626999909156, 0.077542623691787, 0.10093615195790029, 0.09284836058604484, 0.09154303766878347, 0.10169471507945904, 0.08502197119856991, 0.10481235041405523]}, "mutation_prompt": null}
{"id": "74da68db-b522-422f-bfac-9b1827e0fd1b", "solution": "import numpy as np\n\nclass OAHPE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.c1 = 1.4\n        self.c2 = 1.6\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.7\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _evaluate_population(self, population, func):\n        return np.array([func(ind) for ind in population])\n\n    def _update_velocity(self, velocities, population, personal_best, global_best):\n        r1, r2 = np.random.rand(2, self.population_size, self.dim)\n        cognitive = self.c1 * r1 * (personal_best - population)\n        social = self.c2 * r2 * (global_best - population)\n        return velocities * 0.4 + cognitive + social * 0.85\n\n    def _apply_bounds(self, population):\n        np.clip(population, self.lower_bound, self.upper_bound, out=population)\n\n    def _differential_mutation(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = population[indices]\n        self.mutation_factor = 0.7 + 0.3 * (1 - np.linalg.norm(b - c) / (2 * np.sqrt(self.dim)))  # Adaptive mutation factor\n        mutant = a + self.mutation_factor * (b - c)\n        trial = np.where(np.random.rand(self.dim) < self.crossover_prob * 0.95, mutant, population[idx])\n        return np.clip(trial, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_value = self._evaluate_population(population, func)\n        \n        global_best_idx = np.argmin(personal_best_value)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_value[global_best_idx]\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            self.crossover_prob = 0.6 + 0.2 * (1 - evaluations/self.budget)\n            velocities = self._update_velocity(velocities, population, personal_best, global_best)\n            population += velocities\n            self._apply_bounds(population)\n\n            new_population_value = self._evaluate_population(population, func)\n            evaluations += self.population_size\n\n            for i in range(self.population_size):\n                if new_population_value[i] < personal_best_value[i]:\n                    personal_best[i] = population[i]\n                    personal_best_value[i] = new_population_value[i]\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                trial = self._differential_mutation(population, i)\n                trial_value = func(trial)\n                if trial_value < personal_best_value[i]:  # Simplified check logic\n                    evaluations += 1\n                    population[i] = trial\n                    personal_best[i] = trial\n                    personal_best_value[i] = trial_value\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n        return global_best", "name": "OAHPE", "description": "An enhanced OAHPE with adaptive mutation factor and streamlined evaluations to improve convergence speed and efficiency.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3120b994-c3c2-471c-b9bd-c73654481b8f", "metadata": {"aucs": [0.8668348600324541, 0.8611005175267618, 0.8595363620990507, 0.8748613574260196, 0.8660451128204074, 0.8687978327620154, 0.8683873279178499, 0.8561195048447305, 0.8670443034633353, 0.7284170435184483, 0.04183025942019325, 0.5531449896823765, 0.7118588379605382, 0.7113976675206496, 0.737665508993827, 0.6900803723634554, 0.7090743231839416, 0.6654647776405871, 0.13755666515095377, 0.10933386887237517, 0.11673072508678417, 0.11306952762905986, 0.1677525895013443, 0.14609843552526147, 0.11887953657481287, 0.18398095467509457, 0.14839657186661848, 0.15193475442386373, 0.1400880666637686, 0.10889210455404918, 0.14099254359334334, 0.14714037010476455, 0.1325733727982108, 0.11275971371269555, 0.13977551335753413, 0.12808015950155516, 0.9645212205726398, 0.9761492737972657, 0.9746892724244693, 0.9501808525480977, 0.9687563510003965, 0.9525637249460471, 0.9778834822484883, 0.9600772060679164, 0.9647672510807135, 0.6479761075029533, 0.7051173057108101, 0.6885891485429403, 0.1938539096666434, 0.6943932567035305, 0.6724950467164483, 0.7119410398402154, 0.6695998217885912, 0.6959327990603225, 0.38330618483321566, 0.22846501886821569, 0.3697500447112134, 0.2785964499153327, 0.19417904301946332, 0.27829399035998803, 0.851324017403165, 0.7659172777310529, 0.8695454593854912, 0.22089245745025943, 0.13416448543609316, 0.1950465335317726, 0.18774745232778522, 0.12835466696972964, 0.19236646079742226, 0.20009732212761588, 0.1753608790397142, 0.1293048109706877, 0.13080002224486376, 0.1794288810433673, 0.2078719826043035, 0.1565635602988088, 0.2564661376268952, 0.20441316459512515, 0.1249838252187292, 0.13634687583796934, 0.2237970495069478, 0.10724862951878456, 0.010767708313981661, 9.999999999998899e-05, 0.007444193438304159, 9.999999999998899e-05, 0.0220201806718624, 9.999999999998899e-05, 0.002602690581584133, 0.12447269464395727, 0.10072544672944839, 0.03395795775759236, 0.14553698758999944, 0.047279744830477255, 0.012890642366753857, 0.03639343802338901, 0.060370407076058785, 0.07501790218932292, 0.042947140436754516, 0.12333244333024629, 0.035078822040175095, 0.24626297655606288, 0.1391063004999552, 0.09311857113168898, 0.08083782756328439, 0.12184381278914991, 0.09887828882346272, 0.07061207384336488, 0.05558883911319845, 0.042229618380132394, 0.19919250533551236, 0.05457840477897602, 0.23345874799753397, 0.24106343331508262, 0.1362997740184685, 0.05668299773957408, 0.09090087762382759, 0.5319436489952678, 0.5387156656151443, 0.5629376666348236, 0.5177651053707459, 0.6229005303051913, 0.5514117593151024, 0.5703079303034599, 0.5670852211166324, 0.5695396711047345, 0.135127816742439, 0.11536832444862866, 0.11277232557081951, 0.09337115579400301, 0.0745472336152403, 0.12059340188390488, 0.10763146168627824, 0.11026019976159318, 0.10954411048826618, 0.47829215239646106, 0.3004836072950158, 0.17413000179320393, 0.24860055687933758, 0.21718465593130676, 0.21337956946406145, 0.4174623442338876, 0.33728236478325424, 0.2782853303936469, 0.4929587646180781, 0.3854513070860923, 0.24946961657720057, 0.28654430416459187, 0.3108555816864875, 0.5857544593930797, 0.2577155614056096, 0.6807381801752441, 0.22541636408167287, 0.24624002450144045, 0.2052769451016918, 0.30081984712905585, 0.23892814575468568, 0.38068078076345824, 0.28630947733291634, 0.2945516119824616, 0.317476630231627, 0.25857106751128744, 0.22788832216121602, 0.20216652613363495, 0.2070188049092454, 0.2332724971025666, 0.22536628818433768, 0.27155707364826787, 0.23744535926317556, 0.23655064580391139, 0.24009573480527813, 0.1986224713610143, 0.2083111055106106, 0.2068723977528426, 0.7605377362048941, 0.24197103719882185, 0.1891601387884334, 0.22102599880385165, 0.1864865995039895, 0.2166077972076439, 0.1641543580635627, 0.12659372806876745, 0.15389611889550414, 0.8979887738047796, 0.2000296970833194, 0.1997079993840465, 0.1721877713652008, 0.16138912697998076, 0.9128608774288254, 0.7608919691468662, 0.21123288145482677, 0.20887341058469833, 0.2095767946476833, 0.6873980815788463, 0.1547865796828366, 0.5730857325080261, 0.21042520099659545, 0.765336801638925, 0.20829392340013797, 0.18368933942511234, 0.18239522005696807, 0.19368722918581027, 0.19389827677910265, 0.19069100693564267, 0.1898798858193138, 0.1889055966004577, 0.19637087829418443, 0.0991190431816038, 0.0895626999909156, 0.077542623691787, 0.10093615195790029, 0.09284836058604484, 0.09154303766878347, 0.10169471507945904, 0.08502197119856991, 0.10481235041405523]}, "mutation_prompt": null}
{"id": "cc4fe4f4-ef91-44d8-9782-ae4ff56981ff", "solution": "import numpy as np\n\nclass OAHPE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.c1 = 1.4\n        self.c2 = 1.6\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.7\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _evaluate_population(self, population, func):\n        return np.array([func(ind) for ind in population])\n\n    def _update_velocity(self, velocities, population, personal_best, global_best):\n        r1, r2 = np.random.rand(2, self.population_size, self.dim)\n        cognitive = self.c1 * r1 * (personal_best - population)\n        social = self.c2 * r2 * (global_best - population)\n        return velocities * 0.4 + cognitive + social * 0.85\n\n    def _apply_bounds(self, population):\n        np.clip(population, self.lower_bound, self.upper_bound, out=population)\n\n    def _differential_mutation(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = population[indices]\n        self.mutation_factor = 0.7 + 0.3 * (1 - np.linalg.norm(b - c) / (2 * np.sqrt(self.dim)))  # Adaptive mutation factor\n        mutant = a + self.mutation_factor * (b - c)\n        trial = np.where(np.random.rand(self.dim) < self.crossover_prob * 0.95, mutant, population[idx])\n        return np.clip(trial, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_value = self._evaluate_population(population, func)\n        \n        global_best_idx = np.argmin(personal_best_value)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_value[global_best_idx]\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            self.crossover_prob = 0.6 + 0.2 * (1 - evaluations/self.budget)\n            velocities = self._update_velocity(velocities, population, personal_best, global_best)\n            population += velocities\n            self._apply_bounds(population)\n\n            new_population_value = self._evaluate_population(population, func)\n            evaluations += self.population_size\n\n            for i in range(self.population_size):\n                if new_population_value[i] < personal_best_value[i]:\n                    personal_best[i] = population[i]\n                    personal_best_value[i] = new_population_value[i]\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                trial = self._differential_mutation(population, i)\n                trial_value = func(trial)\n                if trial_value < personal_best_value[i]:  # Simplified check logic\n                    evaluations += 1\n                    population[i] = trial\n                    personal_best[i] = trial\n                    personal_best_value[i] = trial_value\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n        return global_best", "name": "OAHPE", "description": "An enhanced OAHPE with adaptive mutation factor and streamlined evaluations to improve convergence speed and efficiency.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3120b994-c3c2-471c-b9bd-c73654481b8f", "metadata": {"aucs": [0.8668348600324541, 0.8611005175267618, 0.8595363620990507, 0.8748613574260196, 0.8660451128204074, 0.8687978327620154, 0.8683873279178499, 0.8561195048447305, 0.8670443034633353, 0.7284170435184483, 0.04183025942019325, 0.5531449896823765, 0.7118588379605382, 0.7113976675206496, 0.737665508993827, 0.6900803723634554, 0.7090743231839416, 0.6654647776405871, 0.13755666515095377, 0.10933386887237517, 0.11673072508678417, 0.11306952762905986, 0.1677525895013443, 0.14609843552526147, 0.11887953657481287, 0.18398095467509457, 0.14839657186661848, 0.15193475442386373, 0.1400880666637686, 0.10889210455404918, 0.14099254359334334, 0.14714037010476455, 0.1325733727982108, 0.11275971371269555, 0.13977551335753413, 0.12808015950155516, 0.9645212205726398, 0.9761492737972657, 0.9746892724244693, 0.9501808525480977, 0.9687563510003965, 0.9525637249460471, 0.9778834822484883, 0.9600772060679164, 0.9647672510807135, 0.6479761075029533, 0.7051173057108101, 0.6885891485429403, 0.1938539096666434, 0.6943932567035305, 0.6724950467164483, 0.7119410398402154, 0.6695998217885912, 0.6959327990603225, 0.38330618483321566, 0.22846501886821569, 0.3697500447112134, 0.2785964499153327, 0.19417904301946332, 0.27829399035998803, 0.851324017403165, 0.7659172777310529, 0.8695454593854912, 0.22089245745025943, 0.13416448543609316, 0.1950465335317726, 0.18774745232778522, 0.12835466696972964, 0.19236646079742226, 0.20009732212761588, 0.1753608790397142, 0.1293048109706877, 0.13080002224486376, 0.1794288810433673, 0.2078719826043035, 0.1565635602988088, 0.2564661376268952, 0.20441316459512515, 0.1249838252187292, 0.13634687583796934, 0.2237970495069478, 0.10724862951878456, 0.010767708313981661, 9.999999999998899e-05, 0.007444193438304159, 9.999999999998899e-05, 0.0220201806718624, 9.999999999998899e-05, 0.002602690581584133, 0.12447269464395727, 0.10072544672944839, 0.03395795775759236, 0.14553698758999944, 0.047279744830477255, 0.012890642366753857, 0.03639343802338901, 0.060370407076058785, 0.07501790218932292, 0.042947140436754516, 0.12333244333024629, 0.035078822040175095, 0.24626297655606288, 0.1391063004999552, 0.09311857113168898, 0.08083782756328439, 0.12184381278914991, 0.09887828882346272, 0.07061207384336488, 0.05558883911319845, 0.042229618380132394, 0.19919250533551236, 0.05457840477897602, 0.23345874799753397, 0.24106343331508262, 0.1362997740184685, 0.05668299773957408, 0.09090087762382759, 0.5319436489952678, 0.5387156656151443, 0.5629376666348236, 0.5177651053707459, 0.6229005303051913, 0.5514117593151024, 0.5703079303034599, 0.5670852211166324, 0.5695396711047345, 0.135127816742439, 0.11536832444862866, 0.11277232557081951, 0.09337115579400301, 0.0745472336152403, 0.12059340188390488, 0.10763146168627824, 0.11026019976159318, 0.10954411048826618, 0.47829215239646106, 0.3004836072950158, 0.17413000179320393, 0.24860055687933758, 0.21718465593130676, 0.21337956946406145, 0.4174623442338876, 0.33728236478325424, 0.2782853303936469, 0.4929587646180781, 0.3854513070860923, 0.24946961657720057, 0.28654430416459187, 0.3108555816864875, 0.5857544593930797, 0.2577155614056096, 0.6807381801752441, 0.22541636408167287, 0.24624002450144045, 0.2052769451016918, 0.30081984712905585, 0.23892814575468568, 0.38068078076345824, 0.28630947733291634, 0.2945516119824616, 0.317476630231627, 0.25857106751128744, 0.22788832216121602, 0.20216652613363495, 0.2070188049092454, 0.2332724971025666, 0.22536628818433768, 0.27155707364826787, 0.23744535926317556, 0.23655064580391139, 0.24009573480527813, 0.1986224713610143, 0.2083111055106106, 0.2068723977528426, 0.7605377362048941, 0.24197103719882185, 0.1891601387884334, 0.22102599880385165, 0.1864865995039895, 0.2166077972076439, 0.1641543580635627, 0.12659372806876745, 0.15389611889550414, 0.8979887738047796, 0.2000296970833194, 0.1997079993840465, 0.1721877713652008, 0.16138912697998076, 0.9128608774288254, 0.7608919691468662, 0.21123288145482677, 0.20887341058469833, 0.2095767946476833, 0.6873980815788463, 0.1547865796828366, 0.5730857325080261, 0.21042520099659545, 0.765336801638925, 0.20829392340013797, 0.18368933942511234, 0.18239522005696807, 0.19368722918581027, 0.19389827677910265, 0.19069100693564267, 0.1898798858193138, 0.1889055966004577, 0.19637087829418443, 0.0991190431816038, 0.0895626999909156, 0.077542623691787, 0.10093615195790029, 0.09284836058604484, 0.09154303766878347, 0.10169471507945904, 0.08502197119856991, 0.10481235041405523]}, "mutation_prompt": null}
{"id": "28f436a8-f3a5-41f9-9676-1c7e91289434", "solution": "import numpy as np\n\nclass OAHPE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.c1 = 1.4\n        self.c2 = 1.6\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.7\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _evaluate_population(self, population, func):\n        return np.array([func(ind) for ind in population])\n\n    def _update_velocity(self, velocities, population, personal_best, global_best):\n        r1, r2 = np.random.rand(2, self.population_size, self.dim)\n        cognitive = self.c1 * r1 * (personal_best - population)\n        social = self.c2 * r2 * (global_best - population)\n        return velocities * 0.4 + cognitive + social * 0.85\n\n    def _apply_bounds(self, population):\n        np.clip(population, self.lower_bound, self.upper_bound, out=population)\n\n    def _differential_mutation(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = population[indices]\n        self.mutation_factor = 0.7 + 0.3 * (1 - np.linalg.norm(b - c) / (2 * np.sqrt(self.dim)))  # Adaptive mutation factor\n        mutant = a + self.mutation_factor * (b - c)\n        trial = np.where(np.random.rand(self.dim) < self.crossover_prob * 0.95, mutant, population[idx])\n        return np.clip(trial, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_value = self._evaluate_population(population, func)\n        \n        global_best_idx = np.argmin(personal_best_value)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_value[global_best_idx]\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            self.crossover_prob = 0.6 + 0.2 * (1 - evaluations/self.budget)\n            velocities = self._update_velocity(velocities, population, personal_best, global_best)\n            population += velocities\n            self._apply_bounds(population)\n\n            new_population_value = self._evaluate_population(population, func)\n            evaluations += self.population_size\n\n            for i in range(self.population_size):\n                if new_population_value[i] < personal_best_value[i]:\n                    personal_best[i] = population[i]\n                    personal_best_value[i] = new_population_value[i]\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                trial = self._differential_mutation(population, i)\n                trial_value = func(trial)\n                if trial_value < personal_best_value[i]:  # Simplified check logic\n                    evaluations += 1\n                    population[i] = trial\n                    personal_best[i] = trial\n                    personal_best_value[i] = trial_value\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n        return global_best", "name": "OAHPE", "description": "An enhanced OAHPE with adaptive mutation factor and streamlined evaluations to improve convergence speed and efficiency.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3120b994-c3c2-471c-b9bd-c73654481b8f", "metadata": {"aucs": [0.8668348600324541, 0.8611005175267618, 0.8595363620990507, 0.8748613574260196, 0.8660451128204074, 0.8687978327620154, 0.8683873279178499, 0.8561195048447305, 0.8670443034633353, 0.7284170435184483, 0.04183025942019325, 0.5531449896823765, 0.7118588379605382, 0.7113976675206496, 0.737665508993827, 0.6900803723634554, 0.7090743231839416, 0.6654647776405871, 0.13755666515095377, 0.10933386887237517, 0.11673072508678417, 0.11306952762905986, 0.1677525895013443, 0.14609843552526147, 0.11887953657481287, 0.18398095467509457, 0.14839657186661848, 0.15193475442386373, 0.1400880666637686, 0.10889210455404918, 0.14099254359334334, 0.14714037010476455, 0.1325733727982108, 0.11275971371269555, 0.13977551335753413, 0.12808015950155516, 0.9645212205726398, 0.9761492737972657, 0.9746892724244693, 0.9501808525480977, 0.9687563510003965, 0.9525637249460471, 0.9778834822484883, 0.9600772060679164, 0.9647672510807135, 0.6479761075029533, 0.7051173057108101, 0.6885891485429403, 0.1938539096666434, 0.6943932567035305, 0.6724950467164483, 0.7119410398402154, 0.6695998217885912, 0.6959327990603225, 0.38330618483321566, 0.22846501886821569, 0.3697500447112134, 0.2785964499153327, 0.19417904301946332, 0.27829399035998803, 0.851324017403165, 0.7659172777310529, 0.8695454593854912, 0.22089245745025943, 0.13416448543609316, 0.1950465335317726, 0.18774745232778522, 0.12835466696972964, 0.19236646079742226, 0.20009732212761588, 0.1753608790397142, 0.1293048109706877, 0.13080002224486376, 0.1794288810433673, 0.2078719826043035, 0.1565635602988088, 0.2564661376268952, 0.20441316459512515, 0.1249838252187292, 0.13634687583796934, 0.2237970495069478, 0.10724862951878456, 0.010767708313981661, 9.999999999998899e-05, 0.007444193438304159, 9.999999999998899e-05, 0.0220201806718624, 9.999999999998899e-05, 0.002602690581584133, 0.12447269464395727, 0.10072544672944839, 0.03395795775759236, 0.14553698758999944, 0.047279744830477255, 0.012890642366753857, 0.03639343802338901, 0.060370407076058785, 0.07501790218932292, 0.042947140436754516, 0.12333244333024629, 0.035078822040175095, 0.24626297655606288, 0.1391063004999552, 0.09311857113168898, 0.08083782756328439, 0.12184381278914991, 0.09887828882346272, 0.07061207384336488, 0.05558883911319845, 0.042229618380132394, 0.19919250533551236, 0.05457840477897602, 0.23345874799753397, 0.24106343331508262, 0.1362997740184685, 0.05668299773957408, 0.09090087762382759, 0.5319436489952678, 0.5387156656151443, 0.5629376666348236, 0.5177651053707459, 0.6229005303051913, 0.5514117593151024, 0.5703079303034599, 0.5670852211166324, 0.5695396711047345, 0.135127816742439, 0.11536832444862866, 0.11277232557081951, 0.09337115579400301, 0.0745472336152403, 0.12059340188390488, 0.10763146168627824, 0.11026019976159318, 0.10954411048826618, 0.47829215239646106, 0.3004836072950158, 0.17413000179320393, 0.24860055687933758, 0.21718465593130676, 0.21337956946406145, 0.4174623442338876, 0.33728236478325424, 0.2782853303936469, 0.4929587646180781, 0.3854513070860923, 0.24946961657720057, 0.28654430416459187, 0.3108555816864875, 0.5857544593930797, 0.2577155614056096, 0.6807381801752441, 0.22541636408167287, 0.24624002450144045, 0.2052769451016918, 0.30081984712905585, 0.23892814575468568, 0.38068078076345824, 0.28630947733291634, 0.2945516119824616, 0.317476630231627, 0.25857106751128744, 0.22788832216121602, 0.20216652613363495, 0.2070188049092454, 0.2332724971025666, 0.22536628818433768, 0.27155707364826787, 0.23744535926317556, 0.23655064580391139, 0.24009573480527813, 0.1986224713610143, 0.2083111055106106, 0.2068723977528426, 0.7605377362048941, 0.24197103719882185, 0.1891601387884334, 0.22102599880385165, 0.1864865995039895, 0.2166077972076439, 0.1641543580635627, 0.12659372806876745, 0.15389611889550414, 0.8979887738047796, 0.2000296970833194, 0.1997079993840465, 0.1721877713652008, 0.16138912697998076, 0.9128608774288254, 0.7608919691468662, 0.21123288145482677, 0.20887341058469833, 0.2095767946476833, 0.6873980815788463, 0.1547865796828366, 0.5730857325080261, 0.21042520099659545, 0.765336801638925, 0.20829392340013797, 0.18368933942511234, 0.18239522005696807, 0.19368722918581027, 0.19389827677910265, 0.19069100693564267, 0.1898798858193138, 0.1889055966004577, 0.19637087829418443, 0.0991190431816038, 0.0895626999909156, 0.077542623691787, 0.10093615195790029, 0.09284836058604484, 0.09154303766878347, 0.10169471507945904, 0.08502197119856991, 0.10481235041405523]}, "mutation_prompt": null}
{"id": "3c0ff48c-7163-4151-b715-f4a30b16f4f1", "solution": "import numpy as np\n\nclass OAHPE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.c1 = 1.4\n        self.c2 = 1.6\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.7\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _evaluate_population(self, population, func):\n        return np.array([func(ind) for ind in population])\n\n    def _update_velocity(self, velocities, population, personal_best, global_best):\n        r1, r2 = np.random.rand(2, self.population_size, self.dim)\n        cognitive = self.c1 * r1 * (personal_best - population)\n        social = self.c2 * r2 * (global_best - population)\n        return velocities * 0.4 + cognitive + social * 0.85\n\n    def _apply_bounds(self, population):\n        np.clip(population, self.lower_bound, self.upper_bound, out=population)\n\n    def _differential_mutation(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = population[indices]\n        self.mutation_factor = 0.7 + 0.3 * (1 - np.linalg.norm(b - c) / (2 * np.sqrt(self.dim)))  # Adaptive mutation factor\n        mutant = a + self.mutation_factor * (b - c)\n        trial = np.where(np.random.rand(self.dim) < self.crossover_prob * 0.95, mutant, population[idx])\n        return np.clip(trial, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_value = self._evaluate_population(population, func)\n        \n        global_best_idx = np.argmin(personal_best_value)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_value[global_best_idx]\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            self.crossover_prob = 0.6 + 0.2 * (1 - evaluations/self.budget)\n            velocities = self._update_velocity(velocities, population, personal_best, global_best)\n            population += velocities\n            self._apply_bounds(population)\n\n            new_population_value = self._evaluate_population(population, func)\n            evaluations += self.population_size\n\n            for i in range(self.population_size):\n                if new_population_value[i] < personal_best_value[i]:\n                    personal_best[i] = population[i]\n                    personal_best_value[i] = new_population_value[i]\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                trial = self._differential_mutation(population, i)\n                trial_value = func(trial)\n                if trial_value < personal_best_value[i]:  # Simplified check logic\n                    evaluations += 1\n                    population[i] = trial\n                    personal_best[i] = trial\n                    personal_best_value[i] = trial_value\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n        return global_best", "name": "OAHPE", "description": "An enhanced OAHPE with adaptive mutation factor and streamlined evaluations to improve convergence speed and efficiency.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3120b994-c3c2-471c-b9bd-c73654481b8f", "metadata": {"aucs": [0.8668348600324541, 0.8611005175267618, 0.8595363620990507, 0.8748613574260196, 0.8660451128204074, 0.8687978327620154, 0.8683873279178499, 0.8561195048447305, 0.8670443034633353, 0.7284170435184483, 0.04183025942019325, 0.5531449896823765, 0.7118588379605382, 0.7113976675206496, 0.737665508993827, 0.6900803723634554, 0.7090743231839416, 0.6654647776405871, 0.13755666515095377, 0.10933386887237517, 0.11673072508678417, 0.11306952762905986, 0.1677525895013443, 0.14609843552526147, 0.11887953657481287, 0.18398095467509457, 0.14839657186661848, 0.15193475442386373, 0.1400880666637686, 0.10889210455404918, 0.14099254359334334, 0.14714037010476455, 0.1325733727982108, 0.11275971371269555, 0.13977551335753413, 0.12808015950155516, 0.9645212205726398, 0.9761492737972657, 0.9746892724244693, 0.9501808525480977, 0.9687563510003965, 0.9525637249460471, 0.9778834822484883, 0.9600772060679164, 0.9647672510807135, 0.6479761075029533, 0.7051173057108101, 0.6885891485429403, 0.1938539096666434, 0.6943932567035305, 0.6724950467164483, 0.7119410398402154, 0.6695998217885912, 0.6959327990603225, 0.38330618483321566, 0.22846501886821569, 0.3697500447112134, 0.2785964499153327, 0.19417904301946332, 0.27829399035998803, 0.851324017403165, 0.7659172777310529, 0.8695454593854912, 0.22089245745025943, 0.13416448543609316, 0.1950465335317726, 0.18774745232778522, 0.12835466696972964, 0.19236646079742226, 0.20009732212761588, 0.1753608790397142, 0.1293048109706877, 0.13080002224486376, 0.1794288810433673, 0.2078719826043035, 0.1565635602988088, 0.2564661376268952, 0.20441316459512515, 0.1249838252187292, 0.13634687583796934, 0.2237970495069478, 0.10724862951878456, 0.010767708313981661, 9.999999999998899e-05, 0.007444193438304159, 9.999999999998899e-05, 0.0220201806718624, 9.999999999998899e-05, 0.002602690581584133, 0.12447269464395727, 0.10072544672944839, 0.03395795775759236, 0.14553698758999944, 0.047279744830477255, 0.012890642366753857, 0.03639343802338901, 0.060370407076058785, 0.07501790218932292, 0.042947140436754516, 0.12333244333024629, 0.035078822040175095, 0.24626297655606288, 0.1391063004999552, 0.09311857113168898, 0.08083782756328439, 0.12184381278914991, 0.09887828882346272, 0.07061207384336488, 0.05558883911319845, 0.042229618380132394, 0.19919250533551236, 0.05457840477897602, 0.23345874799753397, 0.24106343331508262, 0.1362997740184685, 0.05668299773957408, 0.09090087762382759, 0.5319436489952678, 0.5387156656151443, 0.5629376666348236, 0.5177651053707459, 0.6229005303051913, 0.5514117593151024, 0.5703079303034599, 0.5670852211166324, 0.5695396711047345, 0.135127816742439, 0.11536832444862866, 0.11277232557081951, 0.09337115579400301, 0.0745472336152403, 0.12059340188390488, 0.10763146168627824, 0.11026019976159318, 0.10954411048826618, 0.47829215239646106, 0.3004836072950158, 0.17413000179320393, 0.24860055687933758, 0.21718465593130676, 0.21337956946406145, 0.4174623442338876, 0.33728236478325424, 0.2782853303936469, 0.4929587646180781, 0.3854513070860923, 0.24946961657720057, 0.28654430416459187, 0.3108555816864875, 0.5857544593930797, 0.2577155614056096, 0.6807381801752441, 0.22541636408167287, 0.24624002450144045, 0.2052769451016918, 0.30081984712905585, 0.23892814575468568, 0.38068078076345824, 0.28630947733291634, 0.2945516119824616, 0.317476630231627, 0.25857106751128744, 0.22788832216121602, 0.20216652613363495, 0.2070188049092454, 0.2332724971025666, 0.22536628818433768, 0.27155707364826787, 0.23744535926317556, 0.23655064580391139, 0.24009573480527813, 0.1986224713610143, 0.2083111055106106, 0.2068723977528426, 0.7605377362048941, 0.24197103719882185, 0.1891601387884334, 0.22102599880385165, 0.1864865995039895, 0.2166077972076439, 0.1641543580635627, 0.12659372806876745, 0.15389611889550414, 0.8979887738047796, 0.2000296970833194, 0.1997079993840465, 0.1721877713652008, 0.16138912697998076, 0.9128608774288254, 0.7608919691468662, 0.21123288145482677, 0.20887341058469833, 0.2095767946476833, 0.6873980815788463, 0.1547865796828366, 0.5730857325080261, 0.21042520099659545, 0.765336801638925, 0.20829392340013797, 0.18368933942511234, 0.18239522005696807, 0.19368722918581027, 0.19389827677910265, 0.19069100693564267, 0.1898798858193138, 0.1889055966004577, 0.19637087829418443, 0.0991190431816038, 0.0895626999909156, 0.077542623691787, 0.10093615195790029, 0.09284836058604484, 0.09154303766878347, 0.10169471507945904, 0.08502197119856991, 0.10481235041405523]}, "mutation_prompt": null}
{"id": "0c50ab1d-bdc4-4e8c-9d54-bfef1237cb71", "solution": "import numpy as np\n\nclass OAHPE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.c1 = 1.4\n        self.c2 = 1.6\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.7\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _evaluate_population(self, population, func):\n        return np.array([func(ind) for ind in population])\n\n    def _update_velocity(self, velocities, population, personal_best, global_best):\n        r1, r2 = np.random.rand(2, self.population_size, self.dim)\n        cognitive = self.c1 * r1 * (personal_best - population)\n        social = self.c2 * r2 * (global_best - population)\n        return velocities * 0.4 + cognitive + social * 0.85\n\n    def _apply_bounds(self, population):\n        np.clip(population, self.lower_bound, self.upper_bound, out=population)\n\n    def _differential_mutation(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = population[indices]\n        self.mutation_factor = 0.7 + 0.3 * (1 - np.linalg.norm(b - c) / (2 * np.sqrt(self.dim)))  # Adaptive mutation factor\n        mutant = a + self.mutation_factor * (b - c)\n        trial = np.where(np.random.rand(self.dim) < self.crossover_prob * 0.95, mutant, population[idx])\n        return np.clip(trial, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_value = self._evaluate_population(population, func)\n        \n        global_best_idx = np.argmin(personal_best_value)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_value[global_best_idx]\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            self.crossover_prob = 0.6 + 0.2 * (1 - evaluations/self.budget)\n            velocities = self._update_velocity(velocities, population, personal_best, global_best)\n            population += velocities\n            self._apply_bounds(population)\n\n            new_population_value = self._evaluate_population(population, func)\n            evaluations += self.population_size\n\n            for i in range(self.population_size):\n                if new_population_value[i] < personal_best_value[i]:\n                    personal_best[i] = population[i]\n                    personal_best_value[i] = new_population_value[i]\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                trial = self._differential_mutation(population, i)\n                trial_value = func(trial)\n                if trial_value < personal_best_value[i]:  # Simplified check logic\n                    evaluations += 1\n                    population[i] = trial\n                    personal_best[i] = trial\n                    personal_best_value[i] = trial_value\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n        return global_best", "name": "OAHPE", "description": "An enhanced OAHPE with adaptive mutation factor and streamlined evaluations to improve convergence speed and efficiency.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3120b994-c3c2-471c-b9bd-c73654481b8f", "metadata": {"aucs": [0.8668348600324541, 0.8611005175267618, 0.8595363620990507, 0.8748613574260196, 0.8660451128204074, 0.8687978327620154, 0.8683873279178499, 0.8561195048447305, 0.8670443034633353, 0.7284170435184483, 0.04183025942019325, 0.5531449896823765, 0.7118588379605382, 0.7113976675206496, 0.737665508993827, 0.6900803723634554, 0.7090743231839416, 0.6654647776405871, 0.13755666515095377, 0.10933386887237517, 0.11673072508678417, 0.11306952762905986, 0.1677525895013443, 0.14609843552526147, 0.11887953657481287, 0.18398095467509457, 0.14839657186661848, 0.15193475442386373, 0.1400880666637686, 0.10889210455404918, 0.14099254359334334, 0.14714037010476455, 0.1325733727982108, 0.11275971371269555, 0.13977551335753413, 0.12808015950155516, 0.9645212205726398, 0.9761492737972657, 0.9746892724244693, 0.9501808525480977, 0.9687563510003965, 0.9525637249460471, 0.9778834822484883, 0.9600772060679164, 0.9647672510807135, 0.6479761075029533, 0.7051173057108101, 0.6885891485429403, 0.1938539096666434, 0.6943932567035305, 0.6724950467164483, 0.7119410398402154, 0.6695998217885912, 0.6959327990603225, 0.38330618483321566, 0.22846501886821569, 0.3697500447112134, 0.2785964499153327, 0.19417904301946332, 0.27829399035998803, 0.851324017403165, 0.7659172777310529, 0.8695454593854912, 0.22089245745025943, 0.13416448543609316, 0.1950465335317726, 0.18774745232778522, 0.12835466696972964, 0.19236646079742226, 0.20009732212761588, 0.1753608790397142, 0.1293048109706877, 0.13080002224486376, 0.1794288810433673, 0.2078719826043035, 0.1565635602988088, 0.2564661376268952, 0.20441316459512515, 0.1249838252187292, 0.13634687583796934, 0.2237970495069478, 0.10724862951878456, 0.010767708313981661, 9.999999999998899e-05, 0.007444193438304159, 9.999999999998899e-05, 0.0220201806718624, 9.999999999998899e-05, 0.002602690581584133, 0.12447269464395727, 0.10072544672944839, 0.03395795775759236, 0.14553698758999944, 0.047279744830477255, 0.012890642366753857, 0.03639343802338901, 0.060370407076058785, 0.07501790218932292, 0.042947140436754516, 0.12333244333024629, 0.035078822040175095, 0.24626297655606288, 0.1391063004999552, 0.09311857113168898, 0.08083782756328439, 0.12184381278914991, 0.09887828882346272, 0.07061207384336488, 0.05558883911319845, 0.042229618380132394, 0.19919250533551236, 0.05457840477897602, 0.23345874799753397, 0.24106343331508262, 0.1362997740184685, 0.05668299773957408, 0.09090087762382759, 0.5319436489952678, 0.5387156656151443, 0.5629376666348236, 0.5177651053707459, 0.6229005303051913, 0.5514117593151024, 0.5703079303034599, 0.5670852211166324, 0.5695396711047345, 0.135127816742439, 0.11536832444862866, 0.11277232557081951, 0.09337115579400301, 0.0745472336152403, 0.12059340188390488, 0.10763146168627824, 0.11026019976159318, 0.10954411048826618, 0.47829215239646106, 0.3004836072950158, 0.17413000179320393, 0.24860055687933758, 0.21718465593130676, 0.21337956946406145, 0.4174623442338876, 0.33728236478325424, 0.2782853303936469, 0.4929587646180781, 0.3854513070860923, 0.24946961657720057, 0.28654430416459187, 0.3108555816864875, 0.5857544593930797, 0.2577155614056096, 0.6807381801752441, 0.22541636408167287, 0.24624002450144045, 0.2052769451016918, 0.30081984712905585, 0.23892814575468568, 0.38068078076345824, 0.28630947733291634, 0.2945516119824616, 0.317476630231627, 0.25857106751128744, 0.22788832216121602, 0.20216652613363495, 0.2070188049092454, 0.2332724971025666, 0.22536628818433768, 0.27155707364826787, 0.23744535926317556, 0.23655064580391139, 0.24009573480527813, 0.1986224713610143, 0.2083111055106106, 0.2068723977528426, 0.7605377362048941, 0.24197103719882185, 0.1891601387884334, 0.22102599880385165, 0.1864865995039895, 0.2166077972076439, 0.1641543580635627, 0.12659372806876745, 0.15389611889550414, 0.8979887738047796, 0.2000296970833194, 0.1997079993840465, 0.1721877713652008, 0.16138912697998076, 0.9128608774288254, 0.7608919691468662, 0.21123288145482677, 0.20887341058469833, 0.2095767946476833, 0.6873980815788463, 0.1547865796828366, 0.5730857325080261, 0.21042520099659545, 0.765336801638925, 0.20829392340013797, 0.18368933942511234, 0.18239522005696807, 0.19368722918581027, 0.19389827677910265, 0.19069100693564267, 0.1898798858193138, 0.1889055966004577, 0.19637087829418443, 0.0991190431816038, 0.0895626999909156, 0.077542623691787, 0.10093615195790029, 0.09284836058604484, 0.09154303766878347, 0.10169471507945904, 0.08502197119856991, 0.10481235041405523]}, "mutation_prompt": null}
{"id": "ec20a3ae-548f-455b-95f5-24ed9a5aeff6", "solution": "import numpy as np\n\nclass OAHPE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.c1 = 1.4\n        self.c2 = 1.6\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.7\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _evaluate_population(self, population, func):\n        return np.array([func(ind) for ind in population])\n\n    def _update_velocity(self, velocities, population, personal_best, global_best):\n        r1, r2 = np.random.rand(2, self.population_size, self.dim)\n        cognitive = self.c1 * r1 * (personal_best - population)\n        social = self.c2 * r2 * (global_best - population)\n        return velocities * 0.4 + cognitive + social * 0.85\n\n    def _apply_bounds(self, population):\n        np.clip(population, self.lower_bound, self.upper_bound, out=population)\n\n    def _differential_mutation(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = population[indices]\n        self.mutation_factor = 0.7 + 0.3 * (1 - np.linalg.norm(b - c) / (2 * np.sqrt(self.dim)))  # Adaptive mutation factor\n        mutant = a + self.mutation_factor * (b - c)\n        trial = np.where(np.random.rand(self.dim) < self.crossover_prob * 0.95, mutant, population[idx])\n        return np.clip(trial, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_value = self._evaluate_population(population, func)\n        \n        global_best_idx = np.argmin(personal_best_value)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_value[global_best_idx]\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            self.crossover_prob = 0.6 + 0.2 * (1 - evaluations/self.budget)\n            velocities = self._update_velocity(velocities, population, personal_best, global_best)\n            population += velocities\n            self._apply_bounds(population)\n\n            new_population_value = self._evaluate_population(population, func)\n            evaluations += self.population_size\n\n            for i in range(self.population_size):\n                if new_population_value[i] < personal_best_value[i]:\n                    personal_best[i] = population[i]\n                    personal_best_value[i] = new_population_value[i]\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                trial = self._differential_mutation(population, i)\n                trial_value = func(trial)\n                if trial_value < personal_best_value[i]:  # Simplified check logic\n                    evaluations += 1\n                    population[i] = trial\n                    personal_best[i] = trial\n                    personal_best_value[i] = trial_value\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n        return global_best", "name": "OAHPE", "description": "An enhanced OAHPE with adaptive mutation factor and streamlined evaluations to improve convergence speed and efficiency.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3120b994-c3c2-471c-b9bd-c73654481b8f", "metadata": {"aucs": [0.8668348600324541, 0.8611005175267618, 0.8595363620990507, 0.8748613574260196, 0.8660451128204074, 0.8687978327620154, 0.8683873279178499, 0.8561195048447305, 0.8670443034633353, 0.7284170435184483, 0.04183025942019325, 0.5531449896823765, 0.7118588379605382, 0.7113976675206496, 0.737665508993827, 0.6900803723634554, 0.7090743231839416, 0.6654647776405871, 0.13755666515095377, 0.10933386887237517, 0.11673072508678417, 0.11306952762905986, 0.1677525895013443, 0.14609843552526147, 0.11887953657481287, 0.18398095467509457, 0.14839657186661848, 0.15193475442386373, 0.1400880666637686, 0.10889210455404918, 0.14099254359334334, 0.14714037010476455, 0.1325733727982108, 0.11275971371269555, 0.13977551335753413, 0.12808015950155516, 0.9645212205726398, 0.9761492737972657, 0.9746892724244693, 0.9501808525480977, 0.9687563510003965, 0.9525637249460471, 0.9778834822484883, 0.9600772060679164, 0.9647672510807135, 0.6479761075029533, 0.7051173057108101, 0.6885891485429403, 0.1938539096666434, 0.6943932567035305, 0.6724950467164483, 0.7119410398402154, 0.6695998217885912, 0.6959327990603225, 0.38330618483321566, 0.22846501886821569, 0.3697500447112134, 0.2785964499153327, 0.19417904301946332, 0.27829399035998803, 0.851324017403165, 0.7659172777310529, 0.8695454593854912, 0.22089245745025943, 0.13416448543609316, 0.1950465335317726, 0.18774745232778522, 0.12835466696972964, 0.19236646079742226, 0.20009732212761588, 0.1753608790397142, 0.1293048109706877, 0.13080002224486376, 0.1794288810433673, 0.2078719826043035, 0.1565635602988088, 0.2564661376268952, 0.20441316459512515, 0.1249838252187292, 0.13634687583796934, 0.2237970495069478, 0.10724862951878456, 0.010767708313981661, 9.999999999998899e-05, 0.007444193438304159, 9.999999999998899e-05, 0.0220201806718624, 9.999999999998899e-05, 0.002602690581584133, 0.12447269464395727, 0.10072544672944839, 0.03395795775759236, 0.14553698758999944, 0.047279744830477255, 0.012890642366753857, 0.03639343802338901, 0.060370407076058785, 0.07501790218932292, 0.042947140436754516, 0.12333244333024629, 0.035078822040175095, 0.24626297655606288, 0.1391063004999552, 0.09311857113168898, 0.08083782756328439, 0.12184381278914991, 0.09887828882346272, 0.07061207384336488, 0.05558883911319845, 0.042229618380132394, 0.19919250533551236, 0.05457840477897602, 0.23345874799753397, 0.24106343331508262, 0.1362997740184685, 0.05668299773957408, 0.09090087762382759, 0.5319436489952678, 0.5387156656151443, 0.5629376666348236, 0.5177651053707459, 0.6229005303051913, 0.5514117593151024, 0.5703079303034599, 0.5670852211166324, 0.5695396711047345, 0.135127816742439, 0.11536832444862866, 0.11277232557081951, 0.09337115579400301, 0.0745472336152403, 0.12059340188390488, 0.10763146168627824, 0.11026019976159318, 0.10954411048826618, 0.47829215239646106, 0.3004836072950158, 0.17413000179320393, 0.24860055687933758, 0.21718465593130676, 0.21337956946406145, 0.4174623442338876, 0.33728236478325424, 0.2782853303936469, 0.4929587646180781, 0.3854513070860923, 0.24946961657720057, 0.28654430416459187, 0.3108555816864875, 0.5857544593930797, 0.2577155614056096, 0.6807381801752441, 0.22541636408167287, 0.24624002450144045, 0.2052769451016918, 0.30081984712905585, 0.23892814575468568, 0.38068078076345824, 0.28630947733291634, 0.2945516119824616, 0.317476630231627, 0.25857106751128744, 0.22788832216121602, 0.20216652613363495, 0.2070188049092454, 0.2332724971025666, 0.22536628818433768, 0.27155707364826787, 0.23744535926317556, 0.23655064580391139, 0.24009573480527813, 0.1986224713610143, 0.2083111055106106, 0.2068723977528426, 0.7605377362048941, 0.24197103719882185, 0.1891601387884334, 0.22102599880385165, 0.1864865995039895, 0.2166077972076439, 0.1641543580635627, 0.12659372806876745, 0.15389611889550414, 0.8979887738047796, 0.2000296970833194, 0.1997079993840465, 0.1721877713652008, 0.16138912697998076, 0.9128608774288254, 0.7608919691468662, 0.21123288145482677, 0.20887341058469833, 0.2095767946476833, 0.6873980815788463, 0.1547865796828366, 0.5730857325080261, 0.21042520099659545, 0.765336801638925, 0.20829392340013797, 0.18368933942511234, 0.18239522005696807, 0.19368722918581027, 0.19389827677910265, 0.19069100693564267, 0.1898798858193138, 0.1889055966004577, 0.19637087829418443, 0.0991190431816038, 0.0895626999909156, 0.077542623691787, 0.10093615195790029, 0.09284836058604484, 0.09154303766878347, 0.10169471507945904, 0.08502197119856991, 0.10481235041405523]}, "mutation_prompt": null}
{"id": "8cc756e3-b197-4eb8-af6f-dffc5ea81f64", "solution": "import numpy as np\n\nclass OAHPE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.c1 = 1.4\n        self.c2 = 1.6\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.7\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _evaluate_population(self, population, func):\n        return np.array([func(ind) for ind in population])\n\n    def _update_velocity(self, velocities, population, personal_best, global_best):\n        r1, r2 = np.random.rand(2, self.population_size, self.dim)\n        cognitive = self.c1 * r1 * (personal_best - population)\n        social = self.c2 * r2 * (global_best - population)\n        return velocities * 0.4 + cognitive + social * 0.85\n\n    def _apply_bounds(self, population):\n        np.clip(population, self.lower_bound, self.upper_bound, out=population)\n\n    def _differential_mutation(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = population[indices]\n        self.mutation_factor = 0.7 + 0.3 * (1 - np.linalg.norm(b - c) / (2 * np.sqrt(self.dim)))  # Adaptive mutation factor\n        mutant = a + self.mutation_factor * (b - c)\n        trial = np.where(np.random.rand(self.dim) < self.crossover_prob * 0.95, mutant, population[idx])\n        return np.clip(trial, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_value = self._evaluate_population(population, func)\n        \n        global_best_idx = np.argmin(personal_best_value)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_value[global_best_idx]\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            self.crossover_prob = 0.6 + 0.2 * (1 - evaluations/self.budget)\n            velocities = self._update_velocity(velocities, population, personal_best, global_best)\n            population += velocities\n            self._apply_bounds(population)\n\n            new_population_value = self._evaluate_population(population, func)\n            evaluations += self.population_size\n\n            for i in range(self.population_size):\n                if new_population_value[i] < personal_best_value[i]:\n                    personal_best[i] = population[i]\n                    personal_best_value[i] = new_population_value[i]\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                trial = self._differential_mutation(population, i)\n                trial_value = func(trial)\n                if trial_value < personal_best_value[i]:  # Simplified check logic\n                    evaluations += 1\n                    population[i] = trial\n                    personal_best[i] = trial\n                    personal_best_value[i] = trial_value\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n        return global_best", "name": "OAHPE", "description": "An enhanced OAHPE with adaptive mutation factor and streamlined evaluations to improve convergence speed and efficiency.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3120b994-c3c2-471c-b9bd-c73654481b8f", "metadata": {"aucs": [0.8668348600324541, 0.8611005175267618, 0.8595363620990507, 0.8748613574260196, 0.8660451128204074, 0.8687978327620154, 0.8683873279178499, 0.8561195048447305, 0.8670443034633353, 0.7284170435184483, 0.04183025942019325, 0.5531449896823765, 0.7118588379605382, 0.7113976675206496, 0.737665508993827, 0.6900803723634554, 0.7090743231839416, 0.6654647776405871, 0.13755666515095377, 0.10933386887237517, 0.11673072508678417, 0.11306952762905986, 0.1677525895013443, 0.14609843552526147, 0.11887953657481287, 0.18398095467509457, 0.14839657186661848, 0.15193475442386373, 0.1400880666637686, 0.10889210455404918, 0.14099254359334334, 0.14714037010476455, 0.1325733727982108, 0.11275971371269555, 0.13977551335753413, 0.12808015950155516, 0.9645212205726398, 0.9761492737972657, 0.9746892724244693, 0.9501808525480977, 0.9687563510003965, 0.9525637249460471, 0.9778834822484883, 0.9600772060679164, 0.9647672510807135, 0.6479761075029533, 0.7051173057108101, 0.6885891485429403, 0.1938539096666434, 0.6943932567035305, 0.6724950467164483, 0.7119410398402154, 0.6695998217885912, 0.6959327990603225, 0.38330618483321566, 0.22846501886821569, 0.3697500447112134, 0.2785964499153327, 0.19417904301946332, 0.27829399035998803, 0.851324017403165, 0.7659172777310529, 0.8695454593854912, 0.22089245745025943, 0.13416448543609316, 0.1950465335317726, 0.18774745232778522, 0.12835466696972964, 0.19236646079742226, 0.20009732212761588, 0.1753608790397142, 0.1293048109706877, 0.13080002224486376, 0.1794288810433673, 0.2078719826043035, 0.1565635602988088, 0.2564661376268952, 0.20441316459512515, 0.1249838252187292, 0.13634687583796934, 0.2237970495069478, 0.10724862951878456, 0.010767708313981661, 9.999999999998899e-05, 0.007444193438304159, 9.999999999998899e-05, 0.0220201806718624, 9.999999999998899e-05, 0.002602690581584133, 0.12447269464395727, 0.10072544672944839, 0.03395795775759236, 0.14553698758999944, 0.047279744830477255, 0.012890642366753857, 0.03639343802338901, 0.060370407076058785, 0.07501790218932292, 0.042947140436754516, 0.12333244333024629, 0.035078822040175095, 0.24626297655606288, 0.1391063004999552, 0.09311857113168898, 0.08083782756328439, 0.12184381278914991, 0.09887828882346272, 0.07061207384336488, 0.05558883911319845, 0.042229618380132394, 0.19919250533551236, 0.05457840477897602, 0.23345874799753397, 0.24106343331508262, 0.1362997740184685, 0.05668299773957408, 0.09090087762382759, 0.5319436489952678, 0.5387156656151443, 0.5629376666348236, 0.5177651053707459, 0.6229005303051913, 0.5514117593151024, 0.5703079303034599, 0.5670852211166324, 0.5695396711047345, 0.135127816742439, 0.11536832444862866, 0.11277232557081951, 0.09337115579400301, 0.0745472336152403, 0.12059340188390488, 0.10763146168627824, 0.11026019976159318, 0.10954411048826618, 0.47829215239646106, 0.3004836072950158, 0.17413000179320393, 0.24860055687933758, 0.21718465593130676, 0.21337956946406145, 0.4174623442338876, 0.33728236478325424, 0.2782853303936469, 0.4929587646180781, 0.3854513070860923, 0.24946961657720057, 0.28654430416459187, 0.3108555816864875, 0.5857544593930797, 0.2577155614056096, 0.6807381801752441, 0.22541636408167287, 0.24624002450144045, 0.2052769451016918, 0.30081984712905585, 0.23892814575468568, 0.38068078076345824, 0.28630947733291634, 0.2945516119824616, 0.317476630231627, 0.25857106751128744, 0.22788832216121602, 0.20216652613363495, 0.2070188049092454, 0.2332724971025666, 0.22536628818433768, 0.27155707364826787, 0.23744535926317556, 0.23655064580391139, 0.24009573480527813, 0.1986224713610143, 0.2083111055106106, 0.2068723977528426, 0.7605377362048941, 0.24197103719882185, 0.1891601387884334, 0.22102599880385165, 0.1864865995039895, 0.2166077972076439, 0.1641543580635627, 0.12659372806876745, 0.15389611889550414, 0.8979887738047796, 0.2000296970833194, 0.1997079993840465, 0.1721877713652008, 0.16138912697998076, 0.9128608774288254, 0.7608919691468662, 0.21123288145482677, 0.20887341058469833, 0.2095767946476833, 0.6873980815788463, 0.1547865796828366, 0.5730857325080261, 0.21042520099659545, 0.765336801638925, 0.20829392340013797, 0.18368933942511234, 0.18239522005696807, 0.19368722918581027, 0.19389827677910265, 0.19069100693564267, 0.1898798858193138, 0.1889055966004577, 0.19637087829418443, 0.0991190431816038, 0.0895626999909156, 0.077542623691787, 0.10093615195790029, 0.09284836058604484, 0.09154303766878347, 0.10169471507945904, 0.08502197119856991, 0.10481235041405523]}, "mutation_prompt": null}
{"id": "406a26f4-a2da-4abc-8e0d-4b1fe6e00401", "solution": "import numpy as np\n\nclass OAHPE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.c1 = 1.4\n        self.c2 = 1.6\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.7\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _evaluate_population(self, population, func):\n        return np.array([func(ind) for ind in population])\n\n    def _update_velocity(self, velocities, population, personal_best, global_best):\n        r1, r2 = np.random.rand(2, self.population_size, self.dim)\n        cognitive = self.c1 * r1 * (personal_best - population)\n        social = self.c2 * r2 * (global_best - population)\n        return velocities * 0.4 + cognitive + social * 0.85\n\n    def _apply_bounds(self, population):\n        np.clip(population, self.lower_bound, self.upper_bound, out=population)\n\n    def _differential_mutation(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = population[indices]\n        self.mutation_factor = 0.7 + 0.3 * (1 - np.linalg.norm(b - c) / (2 * np.sqrt(self.dim)))  # Adaptive mutation factor\n        mutant = a + self.mutation_factor * (b - c)\n        trial = np.where(np.random.rand(self.dim) < self.crossover_prob * 0.95, mutant, population[idx])\n        return np.clip(trial, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_value = self._evaluate_population(population, func)\n        \n        global_best_idx = np.argmin(personal_best_value)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_value[global_best_idx]\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            self.crossover_prob = 0.6 + 0.2 * (1 - evaluations/self.budget)\n            velocities = self._update_velocity(velocities, population, personal_best, global_best)\n            population += velocities\n            self._apply_bounds(population)\n\n            new_population_value = self._evaluate_population(population, func)\n            evaluations += self.population_size\n\n            for i in range(self.population_size):\n                if new_population_value[i] < personal_best_value[i]:\n                    personal_best[i] = population[i]\n                    personal_best_value[i] = new_population_value[i]\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                trial = self._differential_mutation(population, i)\n                trial_value = func(trial)\n                if trial_value < personal_best_value[i]:  # Simplified check logic\n                    evaluations += 1\n                    population[i] = trial\n                    personal_best[i] = trial\n                    personal_best_value[i] = trial_value\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n        return global_best", "name": "OAHPE", "description": "An enhanced OAHPE with adaptive mutation factor and streamlined evaluations to improve convergence speed and efficiency.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3120b994-c3c2-471c-b9bd-c73654481b8f", "metadata": {"aucs": [0.8668348600324541, 0.8611005175267618, 0.8595363620990507, 0.8748613574260196, 0.8660451128204074, 0.8687978327620154, 0.8683873279178499, 0.8561195048447305, 0.8670443034633353, 0.7284170435184483, 0.04183025942019325, 0.5531449896823765, 0.7118588379605382, 0.7113976675206496, 0.737665508993827, 0.6900803723634554, 0.7090743231839416, 0.6654647776405871, 0.13755666515095377, 0.10933386887237517, 0.11673072508678417, 0.11306952762905986, 0.1677525895013443, 0.14609843552526147, 0.11887953657481287, 0.18398095467509457, 0.14839657186661848, 0.15193475442386373, 0.1400880666637686, 0.10889210455404918, 0.14099254359334334, 0.14714037010476455, 0.1325733727982108, 0.11275971371269555, 0.13977551335753413, 0.12808015950155516, 0.9645212205726398, 0.9761492737972657, 0.9746892724244693, 0.9501808525480977, 0.9687563510003965, 0.9525637249460471, 0.9778834822484883, 0.9600772060679164, 0.9647672510807135, 0.6479761075029533, 0.7051173057108101, 0.6885891485429403, 0.1938539096666434, 0.6943932567035305, 0.6724950467164483, 0.7119410398402154, 0.6695998217885912, 0.6959327990603225, 0.38330618483321566, 0.22846501886821569, 0.3697500447112134, 0.2785964499153327, 0.19417904301946332, 0.27829399035998803, 0.851324017403165, 0.7659172777310529, 0.8695454593854912, 0.22089245745025943, 0.13416448543609316, 0.1950465335317726, 0.18774745232778522, 0.12835466696972964, 0.19236646079742226, 0.20009732212761588, 0.1753608790397142, 0.1293048109706877, 0.13080002224486376, 0.1794288810433673, 0.2078719826043035, 0.1565635602988088, 0.2564661376268952, 0.20441316459512515, 0.1249838252187292, 0.13634687583796934, 0.2237970495069478, 0.10724862951878456, 0.010767708313981661, 9.999999999998899e-05, 0.007444193438304159, 9.999999999998899e-05, 0.0220201806718624, 9.999999999998899e-05, 0.002602690581584133, 0.12447269464395727, 0.10072544672944839, 0.03395795775759236, 0.14553698758999944, 0.047279744830477255, 0.012890642366753857, 0.03639343802338901, 0.060370407076058785, 0.07501790218932292, 0.042947140436754516, 0.12333244333024629, 0.035078822040175095, 0.24626297655606288, 0.1391063004999552, 0.09311857113168898, 0.08083782756328439, 0.12184381278914991, 0.09887828882346272, 0.07061207384336488, 0.05558883911319845, 0.042229618380132394, 0.19919250533551236, 0.05457840477897602, 0.23345874799753397, 0.24106343331508262, 0.1362997740184685, 0.05668299773957408, 0.09090087762382759, 0.5319436489952678, 0.5387156656151443, 0.5629376666348236, 0.5177651053707459, 0.6229005303051913, 0.5514117593151024, 0.5703079303034599, 0.5670852211166324, 0.5695396711047345, 0.135127816742439, 0.11536832444862866, 0.11277232557081951, 0.09337115579400301, 0.0745472336152403, 0.12059340188390488, 0.10763146168627824, 0.11026019976159318, 0.10954411048826618, 0.47829215239646106, 0.3004836072950158, 0.17413000179320393, 0.24860055687933758, 0.21718465593130676, 0.21337956946406145, 0.4174623442338876, 0.33728236478325424, 0.2782853303936469, 0.4929587646180781, 0.3854513070860923, 0.24946961657720057, 0.28654430416459187, 0.3108555816864875, 0.5857544593930797, 0.2577155614056096, 0.6807381801752441, 0.22541636408167287, 0.24624002450144045, 0.2052769451016918, 0.30081984712905585, 0.23892814575468568, 0.38068078076345824, 0.28630947733291634, 0.2945516119824616, 0.317476630231627, 0.25857106751128744, 0.22788832216121602, 0.20216652613363495, 0.2070188049092454, 0.2332724971025666, 0.22536628818433768, 0.27155707364826787, 0.23744535926317556, 0.23655064580391139, 0.24009573480527813, 0.1986224713610143, 0.2083111055106106, 0.2068723977528426, 0.7605377362048941, 0.24197103719882185, 0.1891601387884334, 0.22102599880385165, 0.1864865995039895, 0.2166077972076439, 0.1641543580635627, 0.12659372806876745, 0.15389611889550414, 0.8979887738047796, 0.2000296970833194, 0.1997079993840465, 0.1721877713652008, 0.16138912697998076, 0.9128608774288254, 0.7608919691468662, 0.21123288145482677, 0.20887341058469833, 0.2095767946476833, 0.6873980815788463, 0.1547865796828366, 0.5730857325080261, 0.21042520099659545, 0.765336801638925, 0.20829392340013797, 0.18368933942511234, 0.18239522005696807, 0.19368722918581027, 0.19389827677910265, 0.19069100693564267, 0.1898798858193138, 0.1889055966004577, 0.19637087829418443, 0.0991190431816038, 0.0895626999909156, 0.077542623691787, 0.10093615195790029, 0.09284836058604484, 0.09154303766878347, 0.10169471507945904, 0.08502197119856991, 0.10481235041405523]}, "mutation_prompt": null}
{"id": "748c7ae8-97c5-4083-a05e-ac37b13aa88f", "solution": "import numpy as np\n\nclass OAHPE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.c1 = 1.4\n        self.c2 = 1.6\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.7\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _evaluate_population(self, population, func):\n        return np.array([func(ind) for ind in population])\n\n    def _update_velocity(self, velocities, population, personal_best, global_best):\n        r1, r2 = np.random.rand(2, self.population_size, self.dim)\n        cognitive = self.c1 * r1 * (personal_best - population)\n        social = self.c2 * r2 * (global_best - population)\n        return velocities * 0.4 + cognitive + social * 0.85\n\n    def _apply_bounds(self, population):\n        np.clip(population, self.lower_bound, self.upper_bound, out=population)\n\n    def _differential_mutation(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = population[indices]\n        self.mutation_factor = 0.7 + 0.3 * (1 - np.linalg.norm(b - c) / (2 * np.sqrt(self.dim)))  # Adaptive mutation factor\n        mutant = a + self.mutation_factor * (b - c)\n        trial = np.where(np.random.rand(self.dim) < self.crossover_prob * 0.95, mutant, population[idx])\n        return np.clip(trial, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_value = self._evaluate_population(population, func)\n        \n        global_best_idx = np.argmin(personal_best_value)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_value[global_best_idx]\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            self.crossover_prob = 0.6 + 0.2 * (1 - evaluations/self.budget)\n            velocities = self._update_velocity(velocities, population, personal_best, global_best)\n            population += velocities\n            self._apply_bounds(population)\n\n            new_population_value = self._evaluate_population(population, func)\n            evaluations += self.population_size\n\n            for i in range(self.population_size):\n                if new_population_value[i] < personal_best_value[i]:\n                    personal_best[i] = population[i]\n                    personal_best_value[i] = new_population_value[i]\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                trial = self._differential_mutation(population, i)\n                trial_value = func(trial)\n                if trial_value < personal_best_value[i]:  # Simplified check logic\n                    evaluations += 1\n                    population[i] = trial\n                    personal_best[i] = trial\n                    personal_best_value[i] = trial_value\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n        return global_best", "name": "OAHPE", "description": "An enhanced OAHPE with adaptive mutation factor and streamlined evaluations to improve convergence speed and efficiency.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3120b994-c3c2-471c-b9bd-c73654481b8f", "metadata": {"aucs": [0.8668348600324541, 0.8611005175267618, 0.8595363620990507, 0.8748613574260196, 0.8660451128204074, 0.8687978327620154, 0.8683873279178499, 0.8561195048447305, 0.8670443034633353, 0.7284170435184483, 0.04183025942019325, 0.5531449896823765, 0.7118588379605382, 0.7113976675206496, 0.737665508993827, 0.6900803723634554, 0.7090743231839416, 0.6654647776405871, 0.13755666515095377, 0.10933386887237517, 0.11673072508678417, 0.11306952762905986, 0.1677525895013443, 0.14609843552526147, 0.11887953657481287, 0.18398095467509457, 0.14839657186661848, 0.15193475442386373, 0.1400880666637686, 0.10889210455404918, 0.14099254359334334, 0.14714037010476455, 0.1325733727982108, 0.11275971371269555, 0.13977551335753413, 0.12808015950155516, 0.9645212205726398, 0.9761492737972657, 0.9746892724244693, 0.9501808525480977, 0.9687563510003965, 0.9525637249460471, 0.9778834822484883, 0.9600772060679164, 0.9647672510807135, 0.6479761075029533, 0.7051173057108101, 0.6885891485429403, 0.1938539096666434, 0.6943932567035305, 0.6724950467164483, 0.7119410398402154, 0.6695998217885912, 0.6959327990603225, 0.38330618483321566, 0.22846501886821569, 0.3697500447112134, 0.2785964499153327, 0.19417904301946332, 0.27829399035998803, 0.851324017403165, 0.7659172777310529, 0.8695454593854912, 0.22089245745025943, 0.13416448543609316, 0.1950465335317726, 0.18774745232778522, 0.12835466696972964, 0.19236646079742226, 0.20009732212761588, 0.1753608790397142, 0.1293048109706877, 0.13080002224486376, 0.1794288810433673, 0.2078719826043035, 0.1565635602988088, 0.2564661376268952, 0.20441316459512515, 0.1249838252187292, 0.13634687583796934, 0.2237970495069478, 0.10724862951878456, 0.010767708313981661, 9.999999999998899e-05, 0.007444193438304159, 9.999999999998899e-05, 0.0220201806718624, 9.999999999998899e-05, 0.002602690581584133, 0.12447269464395727, 0.10072544672944839, 0.03395795775759236, 0.14553698758999944, 0.047279744830477255, 0.012890642366753857, 0.03639343802338901, 0.060370407076058785, 0.07501790218932292, 0.042947140436754516, 0.12333244333024629, 0.035078822040175095, 0.24626297655606288, 0.1391063004999552, 0.09311857113168898, 0.08083782756328439, 0.12184381278914991, 0.09887828882346272, 0.07061207384336488, 0.05558883911319845, 0.042229618380132394, 0.19919250533551236, 0.05457840477897602, 0.23345874799753397, 0.24106343331508262, 0.1362997740184685, 0.05668299773957408, 0.09090087762382759, 0.5319436489952678, 0.5387156656151443, 0.5629376666348236, 0.5177651053707459, 0.6229005303051913, 0.5514117593151024, 0.5703079303034599, 0.5670852211166324, 0.5695396711047345, 0.135127816742439, 0.11536832444862866, 0.11277232557081951, 0.09337115579400301, 0.0745472336152403, 0.12059340188390488, 0.10763146168627824, 0.11026019976159318, 0.10954411048826618, 0.47829215239646106, 0.3004836072950158, 0.17413000179320393, 0.24860055687933758, 0.21718465593130676, 0.21337956946406145, 0.4174623442338876, 0.33728236478325424, 0.2782853303936469, 0.4929587646180781, 0.3854513070860923, 0.24946961657720057, 0.28654430416459187, 0.3108555816864875, 0.5857544593930797, 0.2577155614056096, 0.6807381801752441, 0.22541636408167287, 0.24624002450144045, 0.2052769451016918, 0.30081984712905585, 0.23892814575468568, 0.38068078076345824, 0.28630947733291634, 0.2945516119824616, 0.317476630231627, 0.25857106751128744, 0.22788832216121602, 0.20216652613363495, 0.2070188049092454, 0.2332724971025666, 0.22536628818433768, 0.27155707364826787, 0.23744535926317556, 0.23655064580391139, 0.24009573480527813, 0.1986224713610143, 0.2083111055106106, 0.2068723977528426, 0.7605377362048941, 0.24197103719882185, 0.1891601387884334, 0.22102599880385165, 0.1864865995039895, 0.2166077972076439, 0.1641543580635627, 0.12659372806876745, 0.15389611889550414, 0.8979887738047796, 0.2000296970833194, 0.1997079993840465, 0.1721877713652008, 0.16138912697998076, 0.9128608774288254, 0.7608919691468662, 0.21123288145482677, 0.20887341058469833, 0.2095767946476833, 0.6873980815788463, 0.1547865796828366, 0.5730857325080261, 0.21042520099659545, 0.765336801638925, 0.20829392340013797, 0.18368933942511234, 0.18239522005696807, 0.19368722918581027, 0.19389827677910265, 0.19069100693564267, 0.1898798858193138, 0.1889055966004577, 0.19637087829418443, 0.0991190431816038, 0.0895626999909156, 0.077542623691787, 0.10093615195790029, 0.09284836058604484, 0.09154303766878347, 0.10169471507945904, 0.08502197119856991, 0.10481235041405523]}, "mutation_prompt": null}
{"id": "fc5fdbc8-4419-460e-bdfd-e15a242acadd", "solution": "import numpy as np\n\nclass OAHPE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.c1 = 1.4\n        self.c2 = 1.6\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.7\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _evaluate_population(self, population, func):\n        return np.array([func(ind) for ind in population])\n\n    def _update_velocity(self, velocities, population, personal_best, global_best):\n        r1, r2 = np.random.rand(2, self.population_size, self.dim)\n        cognitive = self.c1 * r1 * (personal_best - population)\n        # Removed redundant scaling factor to simplify computation\n        social = self.c2 * r2 * (global_best - population)\n        return velocities * 0.5 + cognitive + social\n\n    def _apply_bounds(self, population):\n        np.clip(population, self.lower_bound, self.upper_bound, out=population)\n\n    def _differential_mutation(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = population[indices]\n        # Reduced calculation by simplifying mutation factor logic\n        self.mutation_factor = 0.7\n        mutant = a + self.mutation_factor * (b - c)\n        trial = np.where(np.random.rand(self.dim) < self.crossover_prob * 0.95, mutant, population[idx])\n        return np.clip(trial, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_value = self._evaluate_population(population, func)\n        \n        global_best_idx = np.argmin(personal_best_value)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_value[global_best_idx]\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            self.crossover_prob = 0.6 + 0.2 * (1 - evaluations/self.budget)\n            velocities = self._update_velocity(velocities, population, personal_best, global_best)\n            population += velocities\n            self._apply_bounds(population)\n\n            new_population_value = self._evaluate_population(population, func)\n            evaluations += self.population_size\n\n            for i in range(self.population_size):\n                if new_population_value[i] < personal_best_value[i]:\n                    personal_best[i] = population[i]\n                    personal_best_value[i] = new_population_value[i]\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                trial = self._differential_mutation(population, i)\n                trial_value = func(trial)\n                if trial_value < personal_best_value[i]:\n                    evaluations += 1\n                    population[i] = trial\n                    personal_best[i] = trial\n                    personal_best_value[i] = trial_value\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n        return global_best", "name": "OAHPE", "description": "Optimized OAHPE by refining velocity updates and reducing redundant mutation calculations to enhance efficiency.", "configspace": "", "generation": 74, "fitness": 0.3043469466486532, "feedback": "The algorithm OAHPE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.27.", "error": "", "parent_id": "3120b994-c3c2-471c-b9bd-c73654481b8f", "metadata": {"aucs": [0.8309311493031695, 0.8015228221009941, 0.812222096611577, 0.8161047144671342, 0.8345868714402475, 0.8364345695422708, 0.8319368013950407, 0.8421977740266239, 0.8124140109391926, 0.6365903748593384, 0.6033166821601036, 0.5382370531582683, 0.631320035893822, 0.628541244726067, 0.6051656053369152, 0.639982531562912, 0.6275954819165949, 9.999999999998899e-05, 0.11686799024909755, 0.11793343603203177, 0.16608082394584256, 0.11060151486910841, 0.06695778629262406, 0.14068437092537822, 0.14585860332917677, 0.1375405813407149, 0.11294750210304261, 0.11000339095030287, 0.12392477013067837, 0.12945176828191285, 0.10390083378409254, 0.12168038403654113, 0.09570047607471555, 0.11438547270564536, 0.15289449528645727, 0.1091522226711581, 0.9769389043819122, 0.9764865035471436, 0.9753057029555756, 0.969111917652275, 0.9773026478602027, 0.9584990710459996, 0.9815958511028979, 0.9688086642918022, 0.9682701709024651, 0.5774935559916814, 0.617278629833992, 0.05865453166255852, 0.5952093551965689, 0.14989985263926353, 0.6218633348506106, 0.5714216258925986, 0.5521299495514607, 0.5919778160756959, 0.22320539975767884, 0.17084971604719645, 0.7255915260457544, 0.27822028991704595, 0.8450953623381503, 0.21868690312035033, 0.2227745277854255, 0.36756945882957504, 0.38365491806305607, 0.21089990012896664, 0.09741800833411507, 0.204152088782367, 0.18675839990218923, 0.274746354519413, 0.16584899048826884, 0.23746393054047243, 0.39374353678656826, 0.2067500605098549, 0.12967246598683413, 0.22654837524155658, 0.21888217067036286, 0.16694216248534033, 0.2344533783560211, 0.2271485889799355, 0.25308716934933195, 0.2600015732044533, 0.15507152380949374, 9.999999999998899e-05, 0.0162037221202177, 9.999999999998899e-05, 0.018547509547288232, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00010045370405964427, 0.07525066719188511, 0.04107978615288843, 0.10319904398938995, 0.06978717110406873, 0.0011678388725578914, 0.05233066216681692, 0.03207813362494838, 0.052626133097299466, 0.0677741650065744, 0.17898982295740573, 9.999999999998899e-05, 0.08099342015663968, 0.07118270557735218, 0.08316980095864979, 0.07024575900561925, 0.12467219502665572, 0.09045314892108691, 0.06583290256979435, 0.32206282416908627, 0.06042717481801263, 0.1387694923339935, 0.12033819277537827, 0.17174506345603002, 0.19425506552605631, 0.1217867707236936, 0.05494058261693313, 0.08200892773752932, 0.5063978797678124, 0.5459485524334657, 0.5502330172519441, 0.513303912495139, 0.5515225108530115, 0.5261891662058553, 0.5560394019977328, 0.5518607257336268, 0.5445952418982394, 0.12455483323474603, 0.12212542277465477, 0.06789013841433933, 0.1815657106221943, 0.11927774249477519, 0.15061255457684108, 0.1324752437133715, 0.08124073497000972, 0.08954046534776294, 0.21183571535512324, 0.2368224094930188, 0.18383130013680793, 0.24851313532204433, 0.17278892687443326, 0.3010107360213711, 0.4503120181428434, 0.2872429151571215, 0.19578995535071142, 0.2533997760114136, 0.5073556300499535, 0.3964411535753738, 0.35512481024633613, 0.2016770537894541, 0.5123543877876453, 0.5577580406210991, 0.5679409072768757, 0.556633115086247, 0.2442549908900976, 0.24478999278314562, 0.2746389169946516, 0.18578098706234192, 0.20478369355840753, 0.30580640330394615, 0.2284716016580034, 0.2498036062026313, 0.3296139627708049, 0.20886746918182275, 0.20208352606044777, 0.19634049644424167, 0.22617155482172602, 0.24370595354731672, 0.23805441079538536, 0.2207329222377271, 0.22613377686277913, 0.22405756854781278, 0.21863458375173805, 0.23942837354655544, 0.19971043866474136, 0.21756751174407274, 0.24366416494471999, 0.21389619242456404, 0.1878671394478606, 0.2471584724529221, 0.20357365227638613, 0.8974358984458973, 0.1681291192485016, 0.1538936844306178, 0.8998634724853123, 0.19951067612233586, 0.19967009534140956, 0.14255485183361383, 0.16381359837949072, 0.893954921607455, 0.7191375768558184, 0.2106400199309213, 0.20905076281067103, 0.6617494185668071, 0.6647142135627508, 0.1518817850210331, 0.10471447986808102, 0.1545308128477233, 0.7422189748234791, 0.19604077894779726, 0.1904446376696033, 0.19639525264968516, 0.20967539600923224, 0.1868149727053665, 0.18927900115083318, 0.18851195081815142, 0.1896316221429083, 0.20492624925871183, 0.098584373691459, 0.10649412365374866, 0.10632731339316559, 0.09551186530238975, 0.08981652270216856, 0.08969964984921008, 0.08920987522232793, 0.09031432727438493, 0.10403035365459579]}, "mutation_prompt": null}
{"id": "9d6ce201-a17c-4d4b-bbb5-3e42b2acf378", "solution": "import numpy as np\n\nclass OAHPE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.c1 = 1.4\n        self.c2 = 1.6\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.7\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _evaluate_population(self, population, func):\n        return np.array([func(ind) for ind in population])\n\n    def _update_velocity(self, velocities, population, personal_best, global_best):\n        r1, r2 = np.random.rand(2, self.population_size, self.dim)\n        cognitive = self.c1 * r1 * (personal_best - population)\n        social = self.c2 * r2 * (global_best - population)\n        return velocities * 0.4 + cognitive + social * 0.85\n\n    def _apply_bounds(self, population):\n        np.clip(population, self.lower_bound, self.upper_bound, out=population)\n\n    def _differential_mutation(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = population[indices]\n        self.mutation_factor = 0.7 + 0.3 * (1 - np.linalg.norm(b - c) / (2 * np.sqrt(self.dim)))  # Adaptive mutation factor\n        mutant = a + self.mutation_factor * (b - c)\n        trial = np.where(np.random.rand(self.dim) < self.crossover_prob * 0.95, mutant, population[idx])\n        return np.clip(trial, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_value = self._evaluate_population(population, func)\n        \n        global_best_idx = np.argmin(personal_best_value)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_value[global_best_idx]\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            self.crossover_prob = 0.6 + 0.2 * (1 - evaluations/self.budget)\n            velocities = self._update_velocity(velocities, population, personal_best, global_best)\n            population += velocities\n            self._apply_bounds(population)\n\n            new_population_value = self._evaluate_population(population, func)\n            evaluations += self.population_size\n\n            for i in range(self.population_size):\n                if new_population_value[i] < personal_best_value[i]:\n                    personal_best[i] = population[i]\n                    personal_best_value[i] = new_population_value[i]\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                trial = self._differential_mutation(population, i)\n                trial_value = func(trial)\n                if trial_value < personal_best_value[i]:  # Simplified check logic\n                    evaluations += 1\n                    population[i] = trial\n                    personal_best[i] = trial\n                    personal_best_value[i] = trial_value\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n        return global_best", "name": "OAHPE", "description": "An enhanced OAHPE with adaptive mutation factor and streamlined evaluations to improve convergence speed and efficiency.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3120b994-c3c2-471c-b9bd-c73654481b8f", "metadata": {"aucs": [0.8668348600324541, 0.8611005175267618, 0.8595363620990507, 0.8748613574260196, 0.8660451128204074, 0.8687978327620154, 0.8683873279178499, 0.8561195048447305, 0.8670443034633353, 0.7284170435184483, 0.04183025942019325, 0.5531449896823765, 0.7118588379605382, 0.7113976675206496, 0.737665508993827, 0.6900803723634554, 0.7090743231839416, 0.6654647776405871, 0.13755666515095377, 0.10933386887237517, 0.11673072508678417, 0.11306952762905986, 0.1677525895013443, 0.14609843552526147, 0.11887953657481287, 0.18398095467509457, 0.14839657186661848, 0.15193475442386373, 0.1400880666637686, 0.10889210455404918, 0.14099254359334334, 0.14714037010476455, 0.1325733727982108, 0.11275971371269555, 0.13977551335753413, 0.12808015950155516, 0.9645212205726398, 0.9761492737972657, 0.9746892724244693, 0.9501808525480977, 0.9687563510003965, 0.9525637249460471, 0.9778834822484883, 0.9600772060679164, 0.9647672510807135, 0.6479761075029533, 0.7051173057108101, 0.6885891485429403, 0.1938539096666434, 0.6943932567035305, 0.6724950467164483, 0.7119410398402154, 0.6695998217885912, 0.6959327990603225, 0.38330618483321566, 0.22846501886821569, 0.3697500447112134, 0.2785964499153327, 0.19417904301946332, 0.27829399035998803, 0.851324017403165, 0.7659172777310529, 0.8695454593854912, 0.22089245745025943, 0.13416448543609316, 0.1950465335317726, 0.18774745232778522, 0.12835466696972964, 0.19236646079742226, 0.20009732212761588, 0.1753608790397142, 0.1293048109706877, 0.13080002224486376, 0.1794288810433673, 0.2078719826043035, 0.1565635602988088, 0.2564661376268952, 0.20441316459512515, 0.1249838252187292, 0.13634687583796934, 0.2237970495069478, 0.10724862951878456, 0.010767708313981661, 9.999999999998899e-05, 0.007444193438304159, 9.999999999998899e-05, 0.0220201806718624, 9.999999999998899e-05, 0.002602690581584133, 0.12447269464395727, 0.10072544672944839, 0.03395795775759236, 0.14553698758999944, 0.047279744830477255, 0.012890642366753857, 0.03639343802338901, 0.060370407076058785, 0.07501790218932292, 0.042947140436754516, 0.12333244333024629, 0.035078822040175095, 0.24626297655606288, 0.1391063004999552, 0.09311857113168898, 0.08083782756328439, 0.12184381278914991, 0.09887828882346272, 0.07061207384336488, 0.05558883911319845, 0.042229618380132394, 0.19919250533551236, 0.05457840477897602, 0.23345874799753397, 0.24106343331508262, 0.1362997740184685, 0.05668299773957408, 0.09090087762382759, 0.5319436489952678, 0.5387156656151443, 0.5629376666348236, 0.5177651053707459, 0.6229005303051913, 0.5514117593151024, 0.5703079303034599, 0.5670852211166324, 0.5695396711047345, 0.135127816742439, 0.11536832444862866, 0.11277232557081951, 0.09337115579400301, 0.0745472336152403, 0.12059340188390488, 0.10763146168627824, 0.11026019976159318, 0.10954411048826618, 0.47829215239646106, 0.3004836072950158, 0.17413000179320393, 0.24860055687933758, 0.21718465593130676, 0.21337956946406145, 0.4174623442338876, 0.33728236478325424, 0.2782853303936469, 0.4929587646180781, 0.3854513070860923, 0.24946961657720057, 0.28654430416459187, 0.3108555816864875, 0.5857544593930797, 0.2577155614056096, 0.6807381801752441, 0.22541636408167287, 0.24624002450144045, 0.2052769451016918, 0.30081984712905585, 0.23892814575468568, 0.38068078076345824, 0.28630947733291634, 0.2945516119824616, 0.317476630231627, 0.25857106751128744, 0.22788832216121602, 0.20216652613363495, 0.2070188049092454, 0.2332724971025666, 0.22536628818433768, 0.27155707364826787, 0.23744535926317556, 0.23655064580391139, 0.24009573480527813, 0.1986224713610143, 0.2083111055106106, 0.2068723977528426, 0.7605377362048941, 0.24197103719882185, 0.1891601387884334, 0.22102599880385165, 0.1864865995039895, 0.2166077972076439, 0.1641543580635627, 0.12659372806876745, 0.15389611889550414, 0.8979887738047796, 0.2000296970833194, 0.1997079993840465, 0.1721877713652008, 0.16138912697998076, 0.9128608774288254, 0.7608919691468662, 0.21123288145482677, 0.20887341058469833, 0.2095767946476833, 0.6873980815788463, 0.1547865796828366, 0.5730857325080261, 0.21042520099659545, 0.765336801638925, 0.20829392340013797, 0.18368933942511234, 0.18239522005696807, 0.19368722918581027, 0.19389827677910265, 0.19069100693564267, 0.1898798858193138, 0.1889055966004577, 0.19637087829418443, 0.0991190431816038, 0.0895626999909156, 0.077542623691787, 0.10093615195790029, 0.09284836058604484, 0.09154303766878347, 0.10169471507945904, 0.08502197119856991, 0.10481235041405523]}, "mutation_prompt": null}
{"id": "43fba301-ac2e-46c1-9bc8-43e1e24cca81", "solution": "import numpy as np\n\nclass OAHPE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.c1 = 1.4\n        self.c2 = 1.6\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.7\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _evaluate_population(self, population, func):\n        return np.array([func(ind) for ind in population])\n\n    def _update_velocity(self, velocities, population, personal_best, global_best):\n        r1, r2 = np.random.rand(2, self.population_size, self.dim)\n        cognitive = self.c1 * r1 * (personal_best - population)\n        social = self.c2 * r2 * (global_best - population)\n        return velocities * 0.4 + cognitive + social * 0.85\n\n    def _apply_bounds(self, population):\n        np.clip(population, self.lower_bound, self.upper_bound, out=population)\n\n    def _differential_mutation(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = population[indices]\n        self.mutation_factor = 0.7 + 0.3 * (1 - np.linalg.norm(b - c) / (2 * np.sqrt(self.dim)))  # Adaptive mutation factor\n        mutant = a + self.mutation_factor * (b - c)\n        trial = np.where(np.random.rand(self.dim) < self.crossover_prob * 0.95, mutant, population[idx])\n        return np.clip(trial, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_value = self._evaluate_population(population, func)\n        \n        global_best_idx = np.argmin(personal_best_value)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_value[global_best_idx]\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            self.crossover_prob = 0.6 + 0.2 * (1 - evaluations/self.budget)\n            velocities = self._update_velocity(velocities, population, personal_best, global_best)\n            population += velocities\n            self._apply_bounds(population)\n\n            new_population_value = self._evaluate_population(population, func)\n            evaluations += self.population_size\n\n            for i in range(self.population_size):\n                if new_population_value[i] < personal_best_value[i]:\n                    personal_best[i] = population[i]\n                    personal_best_value[i] = new_population_value[i]\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                trial = self._differential_mutation(population, i)\n                trial_value = func(trial)\n                if trial_value < personal_best_value[i]:  # Simplified check logic\n                    evaluations += 1\n                    population[i] = trial\n                    personal_best[i] = trial\n                    personal_best_value[i] = trial_value\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n        return global_best", "name": "OAHPE", "description": "An enhanced OAHPE with adaptive mutation factor and streamlined evaluations to improve convergence speed and efficiency.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3120b994-c3c2-471c-b9bd-c73654481b8f", "metadata": {"aucs": [0.8668348600324541, 0.8611005175267618, 0.8595363620990507, 0.8748613574260196, 0.8660451128204074, 0.8687978327620154, 0.8683873279178499, 0.8561195048447305, 0.8670443034633353, 0.7284170435184483, 0.04183025942019325, 0.5531449896823765, 0.7118588379605382, 0.7113976675206496, 0.737665508993827, 0.6900803723634554, 0.7090743231839416, 0.6654647776405871, 0.13755666515095377, 0.10933386887237517, 0.11673072508678417, 0.11306952762905986, 0.1677525895013443, 0.14609843552526147, 0.11887953657481287, 0.18398095467509457, 0.14839657186661848, 0.15193475442386373, 0.1400880666637686, 0.10889210455404918, 0.14099254359334334, 0.14714037010476455, 0.1325733727982108, 0.11275971371269555, 0.13977551335753413, 0.12808015950155516, 0.9645212205726398, 0.9761492737972657, 0.9746892724244693, 0.9501808525480977, 0.9687563510003965, 0.9525637249460471, 0.9778834822484883, 0.9600772060679164, 0.9647672510807135, 0.6479761075029533, 0.7051173057108101, 0.6885891485429403, 0.1938539096666434, 0.6943932567035305, 0.6724950467164483, 0.7119410398402154, 0.6695998217885912, 0.6959327990603225, 0.38330618483321566, 0.22846501886821569, 0.3697500447112134, 0.2785964499153327, 0.19417904301946332, 0.27829399035998803, 0.851324017403165, 0.7659172777310529, 0.8695454593854912, 0.22089245745025943, 0.13416448543609316, 0.1950465335317726, 0.18774745232778522, 0.12835466696972964, 0.19236646079742226, 0.20009732212761588, 0.1753608790397142, 0.1293048109706877, 0.13080002224486376, 0.1794288810433673, 0.2078719826043035, 0.1565635602988088, 0.2564661376268952, 0.20441316459512515, 0.1249838252187292, 0.13634687583796934, 0.2237970495069478, 0.10724862951878456, 0.010767708313981661, 9.999999999998899e-05, 0.007444193438304159, 9.999999999998899e-05, 0.0220201806718624, 9.999999999998899e-05, 0.002602690581584133, 0.12447269464395727, 0.10072544672944839, 0.03395795775759236, 0.14553698758999944, 0.047279744830477255, 0.012890642366753857, 0.03639343802338901, 0.060370407076058785, 0.07501790218932292, 0.042947140436754516, 0.12333244333024629, 0.035078822040175095, 0.24626297655606288, 0.1391063004999552, 0.09311857113168898, 0.08083782756328439, 0.12184381278914991, 0.09887828882346272, 0.07061207384336488, 0.05558883911319845, 0.042229618380132394, 0.19919250533551236, 0.05457840477897602, 0.23345874799753397, 0.24106343331508262, 0.1362997740184685, 0.05668299773957408, 0.09090087762382759, 0.5319436489952678, 0.5387156656151443, 0.5629376666348236, 0.5177651053707459, 0.6229005303051913, 0.5514117593151024, 0.5703079303034599, 0.5670852211166324, 0.5695396711047345, 0.135127816742439, 0.11536832444862866, 0.11277232557081951, 0.09337115579400301, 0.0745472336152403, 0.12059340188390488, 0.10763146168627824, 0.11026019976159318, 0.10954411048826618, 0.47829215239646106, 0.3004836072950158, 0.17413000179320393, 0.24860055687933758, 0.21718465593130676, 0.21337956946406145, 0.4174623442338876, 0.33728236478325424, 0.2782853303936469, 0.4929587646180781, 0.3854513070860923, 0.24946961657720057, 0.28654430416459187, 0.3108555816864875, 0.5857544593930797, 0.2577155614056096, 0.6807381801752441, 0.22541636408167287, 0.24624002450144045, 0.2052769451016918, 0.30081984712905585, 0.23892814575468568, 0.38068078076345824, 0.28630947733291634, 0.2945516119824616, 0.317476630231627, 0.25857106751128744, 0.22788832216121602, 0.20216652613363495, 0.2070188049092454, 0.2332724971025666, 0.22536628818433768, 0.27155707364826787, 0.23744535926317556, 0.23655064580391139, 0.24009573480527813, 0.1986224713610143, 0.2083111055106106, 0.2068723977528426, 0.7605377362048941, 0.24197103719882185, 0.1891601387884334, 0.22102599880385165, 0.1864865995039895, 0.2166077972076439, 0.1641543580635627, 0.12659372806876745, 0.15389611889550414, 0.8979887738047796, 0.2000296970833194, 0.1997079993840465, 0.1721877713652008, 0.16138912697998076, 0.9128608774288254, 0.7608919691468662, 0.21123288145482677, 0.20887341058469833, 0.2095767946476833, 0.6873980815788463, 0.1547865796828366, 0.5730857325080261, 0.21042520099659545, 0.765336801638925, 0.20829392340013797, 0.18368933942511234, 0.18239522005696807, 0.19368722918581027, 0.19389827677910265, 0.19069100693564267, 0.1898798858193138, 0.1889055966004577, 0.19637087829418443, 0.0991190431816038, 0.0895626999909156, 0.077542623691787, 0.10093615195790029, 0.09284836058604484, 0.09154303766878347, 0.10169471507945904, 0.08502197119856991, 0.10481235041405523]}, "mutation_prompt": null}
{"id": "272b61c1-0944-4dd3-8631-f4b728572e58", "solution": "import numpy as np\n\nclass OAHPE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.c1 = 1.4\n        self.c2 = 1.6\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.7\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _evaluate_population(self, population, func):\n        return np.array([func(ind) for ind in population])\n\n    def _update_velocity(self, velocities, population, personal_best, global_best):\n        r1, r2 = np.random.rand(2, self.population_size, self.dim)\n        cognitive = self.c1 * r1 * (personal_best - population)\n        social = self.c2 * r2 * (global_best - population)\n        return velocities * 0.4 + cognitive + social * 0.85\n\n    def _apply_bounds(self, population):\n        np.clip(population, self.lower_bound, self.upper_bound, out=population)\n\n    def _differential_mutation(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = population[indices]\n        self.mutation_factor = 0.7 + 0.3 * (1 - np.linalg.norm(b - c) / (2 * np.sqrt(self.dim)))  # Adaptive mutation factor\n        mutant = a + self.mutation_factor * (b - c)\n        trial = np.where(np.random.rand(self.dim) < self.crossover_prob * 0.95, mutant, population[idx])\n        return np.clip(trial, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_value = self._evaluate_population(population, func)\n        \n        global_best_idx = np.argmin(personal_best_value)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_value[global_best_idx]\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            self.crossover_prob = 0.6 + 0.2 * (1 - evaluations/self.budget)\n            velocities = self._update_velocity(velocities, population, personal_best, global_best)\n            population += velocities\n            self._apply_bounds(population)\n\n            new_population_value = self._evaluate_population(population, func)\n            evaluations += self.population_size\n\n            for i in range(self.population_size):\n                if new_population_value[i] < personal_best_value[i]:\n                    personal_best[i] = population[i]\n                    personal_best_value[i] = new_population_value[i]\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                trial = self._differential_mutation(population, i)\n                trial_value = func(trial)\n                if trial_value < personal_best_value[i]:  # Simplified check logic\n                    evaluations += 1\n                    population[i] = trial\n                    personal_best[i] = trial\n                    personal_best_value[i] = trial_value\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n        return global_best", "name": "OAHPE", "description": "An enhanced OAHPE with adaptive mutation factor and streamlined evaluations to improve convergence speed and efficiency.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3120b994-c3c2-471c-b9bd-c73654481b8f", "metadata": {"aucs": [0.8668348600324541, 0.8611005175267618, 0.8595363620990507, 0.8748613574260196, 0.8660451128204074, 0.8687978327620154, 0.8683873279178499, 0.8561195048447305, 0.8670443034633353, 0.7284170435184483, 0.04183025942019325, 0.5531449896823765, 0.7118588379605382, 0.7113976675206496, 0.737665508993827, 0.6900803723634554, 0.7090743231839416, 0.6654647776405871, 0.13755666515095377, 0.10933386887237517, 0.11673072508678417, 0.11306952762905986, 0.1677525895013443, 0.14609843552526147, 0.11887953657481287, 0.18398095467509457, 0.14839657186661848, 0.15193475442386373, 0.1400880666637686, 0.10889210455404918, 0.14099254359334334, 0.14714037010476455, 0.1325733727982108, 0.11275971371269555, 0.13977551335753413, 0.12808015950155516, 0.9645212205726398, 0.9761492737972657, 0.9746892724244693, 0.9501808525480977, 0.9687563510003965, 0.9525637249460471, 0.9778834822484883, 0.9600772060679164, 0.9647672510807135, 0.6479761075029533, 0.7051173057108101, 0.6885891485429403, 0.1938539096666434, 0.6943932567035305, 0.6724950467164483, 0.7119410398402154, 0.6695998217885912, 0.6959327990603225, 0.38330618483321566, 0.22846501886821569, 0.3697500447112134, 0.2785964499153327, 0.19417904301946332, 0.27829399035998803, 0.851324017403165, 0.7659172777310529, 0.8695454593854912, 0.22089245745025943, 0.13416448543609316, 0.1950465335317726, 0.18774745232778522, 0.12835466696972964, 0.19236646079742226, 0.20009732212761588, 0.1753608790397142, 0.1293048109706877, 0.13080002224486376, 0.1794288810433673, 0.2078719826043035, 0.1565635602988088, 0.2564661376268952, 0.20441316459512515, 0.1249838252187292, 0.13634687583796934, 0.2237970495069478, 0.10724862951878456, 0.010767708313981661, 9.999999999998899e-05, 0.007444193438304159, 9.999999999998899e-05, 0.0220201806718624, 9.999999999998899e-05, 0.002602690581584133, 0.12447269464395727, 0.10072544672944839, 0.03395795775759236, 0.14553698758999944, 0.047279744830477255, 0.012890642366753857, 0.03639343802338901, 0.060370407076058785, 0.07501790218932292, 0.042947140436754516, 0.12333244333024629, 0.035078822040175095, 0.24626297655606288, 0.1391063004999552, 0.09311857113168898, 0.08083782756328439, 0.12184381278914991, 0.09887828882346272, 0.07061207384336488, 0.05558883911319845, 0.042229618380132394, 0.19919250533551236, 0.05457840477897602, 0.23345874799753397, 0.24106343331508262, 0.1362997740184685, 0.05668299773957408, 0.09090087762382759, 0.5319436489952678, 0.5387156656151443, 0.5629376666348236, 0.5177651053707459, 0.6229005303051913, 0.5514117593151024, 0.5703079303034599, 0.5670852211166324, 0.5695396711047345, 0.135127816742439, 0.11536832444862866, 0.11277232557081951, 0.09337115579400301, 0.0745472336152403, 0.12059340188390488, 0.10763146168627824, 0.11026019976159318, 0.10954411048826618, 0.47829215239646106, 0.3004836072950158, 0.17413000179320393, 0.24860055687933758, 0.21718465593130676, 0.21337956946406145, 0.4174623442338876, 0.33728236478325424, 0.2782853303936469, 0.4929587646180781, 0.3854513070860923, 0.24946961657720057, 0.28654430416459187, 0.3108555816864875, 0.5857544593930797, 0.2577155614056096, 0.6807381801752441, 0.22541636408167287, 0.24624002450144045, 0.2052769451016918, 0.30081984712905585, 0.23892814575468568, 0.38068078076345824, 0.28630947733291634, 0.2945516119824616, 0.317476630231627, 0.25857106751128744, 0.22788832216121602, 0.20216652613363495, 0.2070188049092454, 0.2332724971025666, 0.22536628818433768, 0.27155707364826787, 0.23744535926317556, 0.23655064580391139, 0.24009573480527813, 0.1986224713610143, 0.2083111055106106, 0.2068723977528426, 0.7605377362048941, 0.24197103719882185, 0.1891601387884334, 0.22102599880385165, 0.1864865995039895, 0.2166077972076439, 0.1641543580635627, 0.12659372806876745, 0.15389611889550414, 0.8979887738047796, 0.2000296970833194, 0.1997079993840465, 0.1721877713652008, 0.16138912697998076, 0.9128608774288254, 0.7608919691468662, 0.21123288145482677, 0.20887341058469833, 0.2095767946476833, 0.6873980815788463, 0.1547865796828366, 0.5730857325080261, 0.21042520099659545, 0.765336801638925, 0.20829392340013797, 0.18368933942511234, 0.18239522005696807, 0.19368722918581027, 0.19389827677910265, 0.19069100693564267, 0.1898798858193138, 0.1889055966004577, 0.19637087829418443, 0.0991190431816038, 0.0895626999909156, 0.077542623691787, 0.10093615195790029, 0.09284836058604484, 0.09154303766878347, 0.10169471507945904, 0.08502197119856991, 0.10481235041405523]}, "mutation_prompt": null}
{"id": "030f822b-6cc7-4891-a8c3-c81fddd86c03", "solution": "import numpy as np\n\nclass OAHPE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.c1 = 1.4\n        self.c2 = 1.6\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.7\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _evaluate_population(self, population, func):\n        return np.array([func(ind) for ind in population])\n\n    def _update_velocity(self, velocities, population, personal_best, global_best):\n        r1, r2 = np.random.rand(2, self.population_size, self.dim)\n        cognitive = self.c1 * r1 * (personal_best - population)\n        social = self.c2 * r2 * (global_best - population)\n        return velocities * 0.4 + cognitive + social * 0.85\n\n    def _apply_bounds(self, population):\n        np.clip(population, self.lower_bound, self.upper_bound, out=population)\n\n    def _differential_mutation(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = population[indices]\n        self.mutation_factor = 0.7 + 0.3 * (1 - np.linalg.norm(b - c) / (2 * np.sqrt(self.dim)))  # Adaptive mutation factor\n        mutant = a + self.mutation_factor * (b - c)\n        trial = np.where(np.random.rand(self.dim) < self.crossover_prob * 0.95, mutant, population[idx])\n        return np.clip(trial, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_value = self._evaluate_population(population, func)\n        \n        global_best_idx = np.argmin(personal_best_value)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_value[global_best_idx]\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            self.crossover_prob = 0.6 + 0.2 * (1 - evaluations/self.budget)\n            velocities = self._update_velocity(velocities, population, personal_best, global_best)\n            population += velocities\n            self._apply_bounds(population)\n\n            new_population_value = self._evaluate_population(population, func)\n            evaluations += self.population_size\n\n            for i in range(self.population_size):\n                if new_population_value[i] < personal_best_value[i]:\n                    personal_best[i] = population[i]\n                    personal_best_value[i] = new_population_value[i]\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                trial = self._differential_mutation(population, i)\n                trial_value = func(trial)\n                if trial_value < personal_best_value[i]:  # Simplified check logic\n                    evaluations += 1\n                    population[i] = trial\n                    personal_best[i] = trial\n                    personal_best_value[i] = trial_value\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n        return global_best", "name": "OAHPE", "description": "An enhanced OAHPE with adaptive mutation factor and streamlined evaluations to improve convergence speed and efficiency.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3120b994-c3c2-471c-b9bd-c73654481b8f", "metadata": {"aucs": [0.8668348600324541, 0.8611005175267618, 0.8595363620990507, 0.8748613574260196, 0.8660451128204074, 0.8687978327620154, 0.8683873279178499, 0.8561195048447305, 0.8670443034633353, 0.7284170435184483, 0.04183025942019325, 0.5531449896823765, 0.7118588379605382, 0.7113976675206496, 0.737665508993827, 0.6900803723634554, 0.7090743231839416, 0.6654647776405871, 0.13755666515095377, 0.10933386887237517, 0.11673072508678417, 0.11306952762905986, 0.1677525895013443, 0.14609843552526147, 0.11887953657481287, 0.18398095467509457, 0.14839657186661848, 0.15193475442386373, 0.1400880666637686, 0.10889210455404918, 0.14099254359334334, 0.14714037010476455, 0.1325733727982108, 0.11275971371269555, 0.13977551335753413, 0.12808015950155516, 0.9645212205726398, 0.9761492737972657, 0.9746892724244693, 0.9501808525480977, 0.9687563510003965, 0.9525637249460471, 0.9778834822484883, 0.9600772060679164, 0.9647672510807135, 0.6479761075029533, 0.7051173057108101, 0.6885891485429403, 0.1938539096666434, 0.6943932567035305, 0.6724950467164483, 0.7119410398402154, 0.6695998217885912, 0.6959327990603225, 0.38330618483321566, 0.22846501886821569, 0.3697500447112134, 0.2785964499153327, 0.19417904301946332, 0.27829399035998803, 0.851324017403165, 0.7659172777310529, 0.8695454593854912, 0.22089245745025943, 0.13416448543609316, 0.1950465335317726, 0.18774745232778522, 0.12835466696972964, 0.19236646079742226, 0.20009732212761588, 0.1753608790397142, 0.1293048109706877, 0.13080002224486376, 0.1794288810433673, 0.2078719826043035, 0.1565635602988088, 0.2564661376268952, 0.20441316459512515, 0.1249838252187292, 0.13634687583796934, 0.2237970495069478, 0.10724862951878456, 0.010767708313981661, 9.999999999998899e-05, 0.007444193438304159, 9.999999999998899e-05, 0.0220201806718624, 9.999999999998899e-05, 0.002602690581584133, 0.12447269464395727, 0.10072544672944839, 0.03395795775759236, 0.14553698758999944, 0.047279744830477255, 0.012890642366753857, 0.03639343802338901, 0.060370407076058785, 0.07501790218932292, 0.042947140436754516, 0.12333244333024629, 0.035078822040175095, 0.24626297655606288, 0.1391063004999552, 0.09311857113168898, 0.08083782756328439, 0.12184381278914991, 0.09887828882346272, 0.07061207384336488, 0.05558883911319845, 0.042229618380132394, 0.19919250533551236, 0.05457840477897602, 0.23345874799753397, 0.24106343331508262, 0.1362997740184685, 0.05668299773957408, 0.09090087762382759, 0.5319436489952678, 0.5387156656151443, 0.5629376666348236, 0.5177651053707459, 0.6229005303051913, 0.5514117593151024, 0.5703079303034599, 0.5670852211166324, 0.5695396711047345, 0.135127816742439, 0.11536832444862866, 0.11277232557081951, 0.09337115579400301, 0.0745472336152403, 0.12059340188390488, 0.10763146168627824, 0.11026019976159318, 0.10954411048826618, 0.47829215239646106, 0.3004836072950158, 0.17413000179320393, 0.24860055687933758, 0.21718465593130676, 0.21337956946406145, 0.4174623442338876, 0.33728236478325424, 0.2782853303936469, 0.4929587646180781, 0.3854513070860923, 0.24946961657720057, 0.28654430416459187, 0.3108555816864875, 0.5857544593930797, 0.2577155614056096, 0.6807381801752441, 0.22541636408167287, 0.24624002450144045, 0.2052769451016918, 0.30081984712905585, 0.23892814575468568, 0.38068078076345824, 0.28630947733291634, 0.2945516119824616, 0.317476630231627, 0.25857106751128744, 0.22788832216121602, 0.20216652613363495, 0.2070188049092454, 0.2332724971025666, 0.22536628818433768, 0.27155707364826787, 0.23744535926317556, 0.23655064580391139, 0.24009573480527813, 0.1986224713610143, 0.2083111055106106, 0.2068723977528426, 0.7605377362048941, 0.24197103719882185, 0.1891601387884334, 0.22102599880385165, 0.1864865995039895, 0.2166077972076439, 0.1641543580635627, 0.12659372806876745, 0.15389611889550414, 0.8979887738047796, 0.2000296970833194, 0.1997079993840465, 0.1721877713652008, 0.16138912697998076, 0.9128608774288254, 0.7608919691468662, 0.21123288145482677, 0.20887341058469833, 0.2095767946476833, 0.6873980815788463, 0.1547865796828366, 0.5730857325080261, 0.21042520099659545, 0.765336801638925, 0.20829392340013797, 0.18368933942511234, 0.18239522005696807, 0.19368722918581027, 0.19389827677910265, 0.19069100693564267, 0.1898798858193138, 0.1889055966004577, 0.19637087829418443, 0.0991190431816038, 0.0895626999909156, 0.077542623691787, 0.10093615195790029, 0.09284836058604484, 0.09154303766878347, 0.10169471507945904, 0.08502197119856991, 0.10481235041405523]}, "mutation_prompt": null}
{"id": "170ad323-90d3-4635-9ed2-54985096ba61", "solution": "import numpy as np\n\nclass OAHPE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.c1 = 1.4\n        self.c2 = 1.6\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.7\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _evaluate_population(self, population, func):\n        return np.array([func(ind) for ind in population])\n\n    def _update_velocity(self, velocities, population, personal_best, global_best):\n        r1, r2 = np.random.rand(2, self.population_size, self.dim)\n        cognitive = self.c1 * r1 * (personal_best - population)\n        social = self.c2 * r2 * (global_best - population)\n        return velocities * 0.4 + cognitive + social * 0.85\n\n    def _apply_bounds(self, population):\n        np.clip(population, self.lower_bound, self.upper_bound, out=population)\n\n    def _differential_mutation(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = population[indices]\n        self.mutation_factor = 0.7 + 0.3 * (1 - np.linalg.norm(b - c) / (2 * np.sqrt(self.dim)))  # Adaptive mutation factor\n        mutant = a + self.mutation_factor * (b - c)\n        trial = np.where(np.random.rand(self.dim) < self.crossover_prob * 0.95, mutant, population[idx])\n        return np.clip(trial, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_value = self._evaluate_population(population, func)\n        \n        global_best_idx = np.argmin(personal_best_value)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_value[global_best_idx]\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            self.crossover_prob = 0.6 + 0.2 * (1 - evaluations/self.budget)\n            velocities = self._update_velocity(velocities, population, personal_best, global_best)\n            population += velocities\n            self._apply_bounds(population)\n\n            new_population_value = self._evaluate_population(population, func)\n            evaluations += self.population_size\n\n            for i in range(self.population_size):\n                if new_population_value[i] < personal_best_value[i]:\n                    personal_best[i] = population[i]\n                    personal_best_value[i] = new_population_value[i]\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                trial = self._differential_mutation(population, i)\n                trial_value = func(trial)\n                if trial_value < personal_best_value[i]:  # Simplified check logic\n                    evaluations += 1\n                    population[i] = trial\n                    personal_best[i] = trial\n                    personal_best_value[i] = trial_value\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n        return global_best", "name": "OAHPE", "description": "An enhanced OAHPE with adaptive mutation factor and streamlined evaluations to improve convergence speed and efficiency.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3120b994-c3c2-471c-b9bd-c73654481b8f", "metadata": {"aucs": [0.8668348600324541, 0.8611005175267618, 0.8595363620990507, 0.8748613574260196, 0.8660451128204074, 0.8687978327620154, 0.8683873279178499, 0.8561195048447305, 0.8670443034633353, 0.7284170435184483, 0.04183025942019325, 0.5531449896823765, 0.7118588379605382, 0.7113976675206496, 0.737665508993827, 0.6900803723634554, 0.7090743231839416, 0.6654647776405871, 0.13755666515095377, 0.10933386887237517, 0.11673072508678417, 0.11306952762905986, 0.1677525895013443, 0.14609843552526147, 0.11887953657481287, 0.18398095467509457, 0.14839657186661848, 0.15193475442386373, 0.1400880666637686, 0.10889210455404918, 0.14099254359334334, 0.14714037010476455, 0.1325733727982108, 0.11275971371269555, 0.13977551335753413, 0.12808015950155516, 0.9645212205726398, 0.9761492737972657, 0.9746892724244693, 0.9501808525480977, 0.9687563510003965, 0.9525637249460471, 0.9778834822484883, 0.9600772060679164, 0.9647672510807135, 0.6479761075029533, 0.7051173057108101, 0.6885891485429403, 0.1938539096666434, 0.6943932567035305, 0.6724950467164483, 0.7119410398402154, 0.6695998217885912, 0.6959327990603225, 0.38330618483321566, 0.22846501886821569, 0.3697500447112134, 0.2785964499153327, 0.19417904301946332, 0.27829399035998803, 0.851324017403165, 0.7659172777310529, 0.8695454593854912, 0.22089245745025943, 0.13416448543609316, 0.1950465335317726, 0.18774745232778522, 0.12835466696972964, 0.19236646079742226, 0.20009732212761588, 0.1753608790397142, 0.1293048109706877, 0.13080002224486376, 0.1794288810433673, 0.2078719826043035, 0.1565635602988088, 0.2564661376268952, 0.20441316459512515, 0.1249838252187292, 0.13634687583796934, 0.2237970495069478, 0.10724862951878456, 0.010767708313981661, 9.999999999998899e-05, 0.007444193438304159, 9.999999999998899e-05, 0.0220201806718624, 9.999999999998899e-05, 0.002602690581584133, 0.12447269464395727, 0.10072544672944839, 0.03395795775759236, 0.14553698758999944, 0.047279744830477255, 0.012890642366753857, 0.03639343802338901, 0.060370407076058785, 0.07501790218932292, 0.042947140436754516, 0.12333244333024629, 0.035078822040175095, 0.24626297655606288, 0.1391063004999552, 0.09311857113168898, 0.08083782756328439, 0.12184381278914991, 0.09887828882346272, 0.07061207384336488, 0.05558883911319845, 0.042229618380132394, 0.19919250533551236, 0.05457840477897602, 0.23345874799753397, 0.24106343331508262, 0.1362997740184685, 0.05668299773957408, 0.09090087762382759, 0.5319436489952678, 0.5387156656151443, 0.5629376666348236, 0.5177651053707459, 0.6229005303051913, 0.5514117593151024, 0.5703079303034599, 0.5670852211166324, 0.5695396711047345, 0.135127816742439, 0.11536832444862866, 0.11277232557081951, 0.09337115579400301, 0.0745472336152403, 0.12059340188390488, 0.10763146168627824, 0.11026019976159318, 0.10954411048826618, 0.47829215239646106, 0.3004836072950158, 0.17413000179320393, 0.24860055687933758, 0.21718465593130676, 0.21337956946406145, 0.4174623442338876, 0.33728236478325424, 0.2782853303936469, 0.4929587646180781, 0.3854513070860923, 0.24946961657720057, 0.28654430416459187, 0.3108555816864875, 0.5857544593930797, 0.2577155614056096, 0.6807381801752441, 0.22541636408167287, 0.24624002450144045, 0.2052769451016918, 0.30081984712905585, 0.23892814575468568, 0.38068078076345824, 0.28630947733291634, 0.2945516119824616, 0.317476630231627, 0.25857106751128744, 0.22788832216121602, 0.20216652613363495, 0.2070188049092454, 0.2332724971025666, 0.22536628818433768, 0.27155707364826787, 0.23744535926317556, 0.23655064580391139, 0.24009573480527813, 0.1986224713610143, 0.2083111055106106, 0.2068723977528426, 0.7605377362048941, 0.24197103719882185, 0.1891601387884334, 0.22102599880385165, 0.1864865995039895, 0.2166077972076439, 0.1641543580635627, 0.12659372806876745, 0.15389611889550414, 0.8979887738047796, 0.2000296970833194, 0.1997079993840465, 0.1721877713652008, 0.16138912697998076, 0.9128608774288254, 0.7608919691468662, 0.21123288145482677, 0.20887341058469833, 0.2095767946476833, 0.6873980815788463, 0.1547865796828366, 0.5730857325080261, 0.21042520099659545, 0.765336801638925, 0.20829392340013797, 0.18368933942511234, 0.18239522005696807, 0.19368722918581027, 0.19389827677910265, 0.19069100693564267, 0.1898798858193138, 0.1889055966004577, 0.19637087829418443, 0.0991190431816038, 0.0895626999909156, 0.077542623691787, 0.10093615195790029, 0.09284836058604484, 0.09154303766878347, 0.10169471507945904, 0.08502197119856991, 0.10481235041405523]}, "mutation_prompt": null}
{"id": "80edd0ad-ca6c-430c-8c20-a078b8d56f51", "solution": "import numpy as np\n\nclass OAHPE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.c1 = 1.4\n        self.c2 = 1.6\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.7\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _evaluate_population(self, population, func):\n        return np.array([func(ind) for ind in population])\n\n    def _update_velocity(self, velocities, population, personal_best, global_best):\n        r1, r2 = np.random.rand(2, self.population_size, self.dim)\n        cognitive = self.c1 * r1 * (personal_best - population)\n        social = self.c2 * r2 * (global_best - population)\n        return velocities * 0.4 + cognitive + social * 0.85\n\n    def _apply_bounds(self, population):\n        np.clip(population, self.lower_bound, self.upper_bound, out=population)\n\n    def _differential_mutation(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = population[indices]\n        self.mutation_factor = 0.7 + 0.3 * (1 - np.linalg.norm(b - c) / (2 * np.sqrt(self.dim)))  # Adaptive mutation factor\n        mutant = a + self.mutation_factor * (b - c)\n        trial = np.where(np.random.rand(self.dim) < self.crossover_prob * 0.95, mutant, population[idx])\n        return np.clip(trial, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_value = self._evaluate_population(population, func)\n        \n        global_best_idx = np.argmin(personal_best_value)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_value[global_best_idx]\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            self.crossover_prob = 0.6 + 0.2 * (1 - evaluations/self.budget)\n            velocities = self._update_velocity(velocities, population, personal_best, global_best)\n            population += velocities\n            self._apply_bounds(population)\n\n            new_population_value = self._evaluate_population(population, func)\n            evaluations += self.population_size\n\n            for i in range(self.population_size):\n                if new_population_value[i] < personal_best_value[i]:\n                    personal_best[i] = population[i]\n                    personal_best_value[i] = new_population_value[i]\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                trial = self._differential_mutation(population, i)\n                trial_value = func(trial)\n                if trial_value < personal_best_value[i]:  # Simplified check logic\n                    evaluations += 1\n                    population[i] = trial\n                    personal_best[i] = trial\n                    personal_best_value[i] = trial_value\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n        return global_best", "name": "OAHPE", "description": "An enhanced OAHPE with adaptive mutation factor and streamlined evaluations to improve convergence speed and efficiency.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3120b994-c3c2-471c-b9bd-c73654481b8f", "metadata": {"aucs": [0.8668348600324541, 0.8611005175267618, 0.8595363620990507, 0.8748613574260196, 0.8660451128204074, 0.8687978327620154, 0.8683873279178499, 0.8561195048447305, 0.8670443034633353, 0.7284170435184483, 0.04183025942019325, 0.5531449896823765, 0.7118588379605382, 0.7113976675206496, 0.737665508993827, 0.6900803723634554, 0.7090743231839416, 0.6654647776405871, 0.13755666515095377, 0.10933386887237517, 0.11673072508678417, 0.11306952762905986, 0.1677525895013443, 0.14609843552526147, 0.11887953657481287, 0.18398095467509457, 0.14839657186661848, 0.15193475442386373, 0.1400880666637686, 0.10889210455404918, 0.14099254359334334, 0.14714037010476455, 0.1325733727982108, 0.11275971371269555, 0.13977551335753413, 0.12808015950155516, 0.9645212205726398, 0.9761492737972657, 0.9746892724244693, 0.9501808525480977, 0.9687563510003965, 0.9525637249460471, 0.9778834822484883, 0.9600772060679164, 0.9647672510807135, 0.6479761075029533, 0.7051173057108101, 0.6885891485429403, 0.1938539096666434, 0.6943932567035305, 0.6724950467164483, 0.7119410398402154, 0.6695998217885912, 0.6959327990603225, 0.38330618483321566, 0.22846501886821569, 0.3697500447112134, 0.2785964499153327, 0.19417904301946332, 0.27829399035998803, 0.851324017403165, 0.7659172777310529, 0.8695454593854912, 0.22089245745025943, 0.13416448543609316, 0.1950465335317726, 0.18774745232778522, 0.12835466696972964, 0.19236646079742226, 0.20009732212761588, 0.1753608790397142, 0.1293048109706877, 0.13080002224486376, 0.1794288810433673, 0.2078719826043035, 0.1565635602988088, 0.2564661376268952, 0.20441316459512515, 0.1249838252187292, 0.13634687583796934, 0.2237970495069478, 0.10724862951878456, 0.010767708313981661, 9.999999999998899e-05, 0.007444193438304159, 9.999999999998899e-05, 0.0220201806718624, 9.999999999998899e-05, 0.002602690581584133, 0.12447269464395727, 0.10072544672944839, 0.03395795775759236, 0.14553698758999944, 0.047279744830477255, 0.012890642366753857, 0.03639343802338901, 0.060370407076058785, 0.07501790218932292, 0.042947140436754516, 0.12333244333024629, 0.035078822040175095, 0.24626297655606288, 0.1391063004999552, 0.09311857113168898, 0.08083782756328439, 0.12184381278914991, 0.09887828882346272, 0.07061207384336488, 0.05558883911319845, 0.042229618380132394, 0.19919250533551236, 0.05457840477897602, 0.23345874799753397, 0.24106343331508262, 0.1362997740184685, 0.05668299773957408, 0.09090087762382759, 0.5319436489952678, 0.5387156656151443, 0.5629376666348236, 0.5177651053707459, 0.6229005303051913, 0.5514117593151024, 0.5703079303034599, 0.5670852211166324, 0.5695396711047345, 0.135127816742439, 0.11536832444862866, 0.11277232557081951, 0.09337115579400301, 0.0745472336152403, 0.12059340188390488, 0.10763146168627824, 0.11026019976159318, 0.10954411048826618, 0.47829215239646106, 0.3004836072950158, 0.17413000179320393, 0.24860055687933758, 0.21718465593130676, 0.21337956946406145, 0.4174623442338876, 0.33728236478325424, 0.2782853303936469, 0.4929587646180781, 0.3854513070860923, 0.24946961657720057, 0.28654430416459187, 0.3108555816864875, 0.5857544593930797, 0.2577155614056096, 0.6807381801752441, 0.22541636408167287, 0.24624002450144045, 0.2052769451016918, 0.30081984712905585, 0.23892814575468568, 0.38068078076345824, 0.28630947733291634, 0.2945516119824616, 0.317476630231627, 0.25857106751128744, 0.22788832216121602, 0.20216652613363495, 0.2070188049092454, 0.2332724971025666, 0.22536628818433768, 0.27155707364826787, 0.23744535926317556, 0.23655064580391139, 0.24009573480527813, 0.1986224713610143, 0.2083111055106106, 0.2068723977528426, 0.7605377362048941, 0.24197103719882185, 0.1891601387884334, 0.22102599880385165, 0.1864865995039895, 0.2166077972076439, 0.1641543580635627, 0.12659372806876745, 0.15389611889550414, 0.8979887738047796, 0.2000296970833194, 0.1997079993840465, 0.1721877713652008, 0.16138912697998076, 0.9128608774288254, 0.7608919691468662, 0.21123288145482677, 0.20887341058469833, 0.2095767946476833, 0.6873980815788463, 0.1547865796828366, 0.5730857325080261, 0.21042520099659545, 0.765336801638925, 0.20829392340013797, 0.18368933942511234, 0.18239522005696807, 0.19368722918581027, 0.19389827677910265, 0.19069100693564267, 0.1898798858193138, 0.1889055966004577, 0.19637087829418443, 0.0991190431816038, 0.0895626999909156, 0.077542623691787, 0.10093615195790029, 0.09284836058604484, 0.09154303766878347, 0.10169471507945904, 0.08502197119856991, 0.10481235041405523]}, "mutation_prompt": null}
{"id": "e766430e-4c44-4487-99ac-517368120a2f", "solution": "import numpy as np\n\nclass OAHPE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.c1 = 1.4\n        self.c2 = 1.6\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.7\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _evaluate_population(self, population, func):\n        return np.array([func(ind) for ind in population])\n\n    def _update_velocity(self, velocities, population, personal_best, global_best):\n        r1, r2 = np.random.rand(2, self.population_size, self.dim)\n        cognitive = self.c1 * r1 * (personal_best - population)\n        social = self.c2 * r2 * (global_best - population)\n        return velocities * 0.4 + cognitive + social * 0.85\n\n    def _apply_bounds(self, population):\n        np.clip(population, self.lower_bound, self.upper_bound, out=population)\n\n    def _differential_mutation(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = population[indices]\n        self.mutation_factor = 0.7 + 0.3 * (1 - np.linalg.norm(b - c) / (2 * np.sqrt(self.dim)))  # Adaptive mutation factor\n        mutant = a + self.mutation_factor * (b - c)\n        trial = np.where(np.random.rand(self.dim) < self.crossover_prob * 0.95, mutant, population[idx])\n        return np.clip(trial, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_value = self._evaluate_population(population, func)\n        \n        global_best_idx = np.argmin(personal_best_value)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_value[global_best_idx]\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            self.crossover_prob = 0.6 + 0.2 * (1 - evaluations/self.budget)\n            velocities = self._update_velocity(velocities, population, personal_best, global_best)\n            population += velocities\n            self._apply_bounds(population)\n\n            new_population_value = self._evaluate_population(population, func)\n            evaluations += self.population_size\n\n            for i in range(self.population_size):\n                if new_population_value[i] < personal_best_value[i]:\n                    personal_best[i] = population[i]\n                    personal_best_value[i] = new_population_value[i]\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                trial = self._differential_mutation(population, i)\n                trial_value = func(trial)\n                if trial_value < personal_best_value[i]:  # Simplified check logic\n                    evaluations += 1\n                    population[i] = trial\n                    personal_best[i] = trial\n                    personal_best_value[i] = trial_value\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n        return global_best", "name": "OAHPE", "description": "An enhanced OAHPE with adaptive mutation factor and streamlined evaluations to improve convergence speed and efficiency.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3120b994-c3c2-471c-b9bd-c73654481b8f", "metadata": {"aucs": [0.8668348600324541, 0.8611005175267618, 0.8595363620990507, 0.8748613574260196, 0.8660451128204074, 0.8687978327620154, 0.8683873279178499, 0.8561195048447305, 0.8670443034633353, 0.7284170435184483, 0.04183025942019325, 0.5531449896823765, 0.7118588379605382, 0.7113976675206496, 0.737665508993827, 0.6900803723634554, 0.7090743231839416, 0.6654647776405871, 0.13755666515095377, 0.10933386887237517, 0.11673072508678417, 0.11306952762905986, 0.1677525895013443, 0.14609843552526147, 0.11887953657481287, 0.18398095467509457, 0.14839657186661848, 0.15193475442386373, 0.1400880666637686, 0.10889210455404918, 0.14099254359334334, 0.14714037010476455, 0.1325733727982108, 0.11275971371269555, 0.13977551335753413, 0.12808015950155516, 0.9645212205726398, 0.9761492737972657, 0.9746892724244693, 0.9501808525480977, 0.9687563510003965, 0.9525637249460471, 0.9778834822484883, 0.9600772060679164, 0.9647672510807135, 0.6479761075029533, 0.7051173057108101, 0.6885891485429403, 0.1938539096666434, 0.6943932567035305, 0.6724950467164483, 0.7119410398402154, 0.6695998217885912, 0.6959327990603225, 0.38330618483321566, 0.22846501886821569, 0.3697500447112134, 0.2785964499153327, 0.19417904301946332, 0.27829399035998803, 0.851324017403165, 0.7659172777310529, 0.8695454593854912, 0.22089245745025943, 0.13416448543609316, 0.1950465335317726, 0.18774745232778522, 0.12835466696972964, 0.19236646079742226, 0.20009732212761588, 0.1753608790397142, 0.1293048109706877, 0.13080002224486376, 0.1794288810433673, 0.2078719826043035, 0.1565635602988088, 0.2564661376268952, 0.20441316459512515, 0.1249838252187292, 0.13634687583796934, 0.2237970495069478, 0.10724862951878456, 0.010767708313981661, 9.999999999998899e-05, 0.007444193438304159, 9.999999999998899e-05, 0.0220201806718624, 9.999999999998899e-05, 0.002602690581584133, 0.12447269464395727, 0.10072544672944839, 0.03395795775759236, 0.14553698758999944, 0.047279744830477255, 0.012890642366753857, 0.03639343802338901, 0.060370407076058785, 0.07501790218932292, 0.042947140436754516, 0.12333244333024629, 0.035078822040175095, 0.24626297655606288, 0.1391063004999552, 0.09311857113168898, 0.08083782756328439, 0.12184381278914991, 0.09887828882346272, 0.07061207384336488, 0.05558883911319845, 0.042229618380132394, 0.19919250533551236, 0.05457840477897602, 0.23345874799753397, 0.24106343331508262, 0.1362997740184685, 0.05668299773957408, 0.09090087762382759, 0.5319436489952678, 0.5387156656151443, 0.5629376666348236, 0.5177651053707459, 0.6229005303051913, 0.5514117593151024, 0.5703079303034599, 0.5670852211166324, 0.5695396711047345, 0.135127816742439, 0.11536832444862866, 0.11277232557081951, 0.09337115579400301, 0.0745472336152403, 0.12059340188390488, 0.10763146168627824, 0.11026019976159318, 0.10954411048826618, 0.47829215239646106, 0.3004836072950158, 0.17413000179320393, 0.24860055687933758, 0.21718465593130676, 0.21337956946406145, 0.4174623442338876, 0.33728236478325424, 0.2782853303936469, 0.4929587646180781, 0.3854513070860923, 0.24946961657720057, 0.28654430416459187, 0.3108555816864875, 0.5857544593930797, 0.2577155614056096, 0.6807381801752441, 0.22541636408167287, 0.24624002450144045, 0.2052769451016918, 0.30081984712905585, 0.23892814575468568, 0.38068078076345824, 0.28630947733291634, 0.2945516119824616, 0.317476630231627, 0.25857106751128744, 0.22788832216121602, 0.20216652613363495, 0.2070188049092454, 0.2332724971025666, 0.22536628818433768, 0.27155707364826787, 0.23744535926317556, 0.23655064580391139, 0.24009573480527813, 0.1986224713610143, 0.2083111055106106, 0.2068723977528426, 0.7605377362048941, 0.24197103719882185, 0.1891601387884334, 0.22102599880385165, 0.1864865995039895, 0.2166077972076439, 0.1641543580635627, 0.12659372806876745, 0.15389611889550414, 0.8979887738047796, 0.2000296970833194, 0.1997079993840465, 0.1721877713652008, 0.16138912697998076, 0.9128608774288254, 0.7608919691468662, 0.21123288145482677, 0.20887341058469833, 0.2095767946476833, 0.6873980815788463, 0.1547865796828366, 0.5730857325080261, 0.21042520099659545, 0.765336801638925, 0.20829392340013797, 0.18368933942511234, 0.18239522005696807, 0.19368722918581027, 0.19389827677910265, 0.19069100693564267, 0.1898798858193138, 0.1889055966004577, 0.19637087829418443, 0.0991190431816038, 0.0895626999909156, 0.077542623691787, 0.10093615195790029, 0.09284836058604484, 0.09154303766878347, 0.10169471507945904, 0.08502197119856991, 0.10481235041405523]}, "mutation_prompt": null}
{"id": "97068e39-31e4-473e-b8f3-cf123a95db1f", "solution": "import numpy as np\n\nclass OAHPE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.c1 = 1.4\n        self.c2 = 1.6\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.7\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _evaluate_population(self, population, func):\n        return np.array([func(ind) for ind in population])\n\n    def _update_velocity(self, velocities, population, personal_best, global_best):\n        r1, r2 = np.random.rand(2, self.population_size, self.dim)\n        cognitive = self.c1 * r1 * (personal_best - population)\n        social = self.c2 * r2 * (global_best - population)\n        return velocities * 0.4 + cognitive + social * 0.85\n\n    def _apply_bounds(self, population):\n        np.clip(population, self.lower_bound, self.upper_bound, out=population)\n\n    def _differential_mutation(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = population[indices]\n        self.mutation_factor = 0.7 + 0.3 * (1 - np.linalg.norm(b - c) / (2 * np.sqrt(self.dim)))  # Adaptive mutation factor\n        mutant = a + self.mutation_factor * (b - c)\n        trial = np.where(np.random.rand(self.dim) < self.crossover_prob * 0.95, mutant, population[idx])\n        return np.clip(trial, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_value = self._evaluate_population(population, func)\n        \n        global_best_idx = np.argmin(personal_best_value)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_value[global_best_idx]\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            self.crossover_prob = 0.6 + 0.2 * (1 - evaluations/self.budget)\n            velocities = self._update_velocity(velocities, population, personal_best, global_best)\n            population += velocities\n            self._apply_bounds(population)\n\n            new_population_value = self._evaluate_population(population, func)\n            evaluations += self.population_size\n\n            for i in range(self.population_size):\n                if new_population_value[i] < personal_best_value[i]:\n                    personal_best[i] = population[i]\n                    personal_best_value[i] = new_population_value[i]\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                trial = self._differential_mutation(population, i)\n                trial_value = func(trial)\n                if trial_value < personal_best_value[i]:  # Simplified check logic\n                    evaluations += 1\n                    population[i] = trial\n                    personal_best[i] = trial\n                    personal_best_value[i] = trial_value\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n        return global_best", "name": "OAHPE", "description": "An enhanced OAHPE with adaptive mutation factor and streamlined evaluations to improve convergence speed and efficiency.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3120b994-c3c2-471c-b9bd-c73654481b8f", "metadata": {"aucs": [0.8668348600324541, 0.8611005175267618, 0.8595363620990507, 0.8748613574260196, 0.8660451128204074, 0.8687978327620154, 0.8683873279178499, 0.8561195048447305, 0.8670443034633353, 0.7284170435184483, 0.04183025942019325, 0.5531449896823765, 0.7118588379605382, 0.7113976675206496, 0.737665508993827, 0.6900803723634554, 0.7090743231839416, 0.6654647776405871, 0.13755666515095377, 0.10933386887237517, 0.11673072508678417, 0.11306952762905986, 0.1677525895013443, 0.14609843552526147, 0.11887953657481287, 0.18398095467509457, 0.14839657186661848, 0.15193475442386373, 0.1400880666637686, 0.10889210455404918, 0.14099254359334334, 0.14714037010476455, 0.1325733727982108, 0.11275971371269555, 0.13977551335753413, 0.12808015950155516, 0.9645212205726398, 0.9761492737972657, 0.9746892724244693, 0.9501808525480977, 0.9687563510003965, 0.9525637249460471, 0.9778834822484883, 0.9600772060679164, 0.9647672510807135, 0.6479761075029533, 0.7051173057108101, 0.6885891485429403, 0.1938539096666434, 0.6943932567035305, 0.6724950467164483, 0.7119410398402154, 0.6695998217885912, 0.6959327990603225, 0.38330618483321566, 0.22846501886821569, 0.3697500447112134, 0.2785964499153327, 0.19417904301946332, 0.27829399035998803, 0.851324017403165, 0.7659172777310529, 0.8695454593854912, 0.22089245745025943, 0.13416448543609316, 0.1950465335317726, 0.18774745232778522, 0.12835466696972964, 0.19236646079742226, 0.20009732212761588, 0.1753608790397142, 0.1293048109706877, 0.13080002224486376, 0.1794288810433673, 0.2078719826043035, 0.1565635602988088, 0.2564661376268952, 0.20441316459512515, 0.1249838252187292, 0.13634687583796934, 0.2237970495069478, 0.10724862951878456, 0.010767708313981661, 9.999999999998899e-05, 0.007444193438304159, 9.999999999998899e-05, 0.0220201806718624, 9.999999999998899e-05, 0.002602690581584133, 0.12447269464395727, 0.10072544672944839, 0.03395795775759236, 0.14553698758999944, 0.047279744830477255, 0.012890642366753857, 0.03639343802338901, 0.060370407076058785, 0.07501790218932292, 0.042947140436754516, 0.12333244333024629, 0.035078822040175095, 0.24626297655606288, 0.1391063004999552, 0.09311857113168898, 0.08083782756328439, 0.12184381278914991, 0.09887828882346272, 0.07061207384336488, 0.05558883911319845, 0.042229618380132394, 0.19919250533551236, 0.05457840477897602, 0.23345874799753397, 0.24106343331508262, 0.1362997740184685, 0.05668299773957408, 0.09090087762382759, 0.5319436489952678, 0.5387156656151443, 0.5629376666348236, 0.5177651053707459, 0.6229005303051913, 0.5514117593151024, 0.5703079303034599, 0.5670852211166324, 0.5695396711047345, 0.135127816742439, 0.11536832444862866, 0.11277232557081951, 0.09337115579400301, 0.0745472336152403, 0.12059340188390488, 0.10763146168627824, 0.11026019976159318, 0.10954411048826618, 0.47829215239646106, 0.3004836072950158, 0.17413000179320393, 0.24860055687933758, 0.21718465593130676, 0.21337956946406145, 0.4174623442338876, 0.33728236478325424, 0.2782853303936469, 0.4929587646180781, 0.3854513070860923, 0.24946961657720057, 0.28654430416459187, 0.3108555816864875, 0.5857544593930797, 0.2577155614056096, 0.6807381801752441, 0.22541636408167287, 0.24624002450144045, 0.2052769451016918, 0.30081984712905585, 0.23892814575468568, 0.38068078076345824, 0.28630947733291634, 0.2945516119824616, 0.317476630231627, 0.25857106751128744, 0.22788832216121602, 0.20216652613363495, 0.2070188049092454, 0.2332724971025666, 0.22536628818433768, 0.27155707364826787, 0.23744535926317556, 0.23655064580391139, 0.24009573480527813, 0.1986224713610143, 0.2083111055106106, 0.2068723977528426, 0.7605377362048941, 0.24197103719882185, 0.1891601387884334, 0.22102599880385165, 0.1864865995039895, 0.2166077972076439, 0.1641543580635627, 0.12659372806876745, 0.15389611889550414, 0.8979887738047796, 0.2000296970833194, 0.1997079993840465, 0.1721877713652008, 0.16138912697998076, 0.9128608774288254, 0.7608919691468662, 0.21123288145482677, 0.20887341058469833, 0.2095767946476833, 0.6873980815788463, 0.1547865796828366, 0.5730857325080261, 0.21042520099659545, 0.765336801638925, 0.20829392340013797, 0.18368933942511234, 0.18239522005696807, 0.19368722918581027, 0.19389827677910265, 0.19069100693564267, 0.1898798858193138, 0.1889055966004577, 0.19637087829418443, 0.0991190431816038, 0.0895626999909156, 0.077542623691787, 0.10093615195790029, 0.09284836058604484, 0.09154303766878347, 0.10169471507945904, 0.08502197119856991, 0.10481235041405523]}, "mutation_prompt": null}
{"id": "82ed749e-be73-4d50-a404-0cdf7cce533a", "solution": "import numpy as np\n\nclass OAHPE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.c1 = 1.4\n        self.c2 = 1.6\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.7\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _evaluate_population(self, population, func):\n        return np.array([func(ind) for ind in population])\n\n    def _update_velocity(self, velocities, population, personal_best, global_best):\n        r1, r2 = np.random.rand(2, self.population_size, self.dim)\n        cognitive = self.c1 * r1 * (personal_best - population)\n        social = self.c2 * r2 * (global_best - population)\n        return velocities * 0.4 + cognitive + social * 0.85\n\n    def _apply_bounds(self, population):\n        np.clip(population, self.lower_bound, self.upper_bound, out=population)\n\n    def _differential_mutation(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = population[indices]\n        self.mutation_factor = 0.7 + 0.3 * (1 - np.linalg.norm(b - c) / (2 * np.sqrt(self.dim)))  # Adaptive mutation factor\n        mutant = a + self.mutation_factor * (b - c)\n        trial = np.where(np.random.rand(self.dim) < self.crossover_prob * 0.95, mutant, population[idx])\n        return np.clip(trial, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_value = self._evaluate_population(population, func)\n        \n        global_best_idx = np.argmin(personal_best_value)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_value[global_best_idx]\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            self.crossover_prob = 0.6 + 0.2 * (1 - evaluations/self.budget)\n            velocities = self._update_velocity(velocities, population, personal_best, global_best)\n            population += velocities\n            self._apply_bounds(population)\n\n            new_population_value = self._evaluate_population(population, func)\n            evaluations += self.population_size\n\n            for i in range(self.population_size):\n                if new_population_value[i] < personal_best_value[i]:\n                    personal_best[i] = population[i]\n                    personal_best_value[i] = new_population_value[i]\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                trial = self._differential_mutation(population, i)\n                trial_value = func(trial)\n                if trial_value < personal_best_value[i]:  # Simplified check logic\n                    evaluations += 1\n                    population[i] = trial\n                    personal_best[i] = trial\n                    personal_best_value[i] = trial_value\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n        return global_best", "name": "OAHPE", "description": "An enhanced OAHPE with adaptive mutation factor and streamlined evaluations to improve convergence speed and efficiency.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3120b994-c3c2-471c-b9bd-c73654481b8f", "metadata": {"aucs": [0.8668348600324541, 0.8611005175267618, 0.8595363620990507, 0.8748613574260196, 0.8660451128204074, 0.8687978327620154, 0.8683873279178499, 0.8561195048447305, 0.8670443034633353, 0.7284170435184483, 0.04183025942019325, 0.5531449896823765, 0.7118588379605382, 0.7113976675206496, 0.737665508993827, 0.6900803723634554, 0.7090743231839416, 0.6654647776405871, 0.13755666515095377, 0.10933386887237517, 0.11673072508678417, 0.11306952762905986, 0.1677525895013443, 0.14609843552526147, 0.11887953657481287, 0.18398095467509457, 0.14839657186661848, 0.15193475442386373, 0.1400880666637686, 0.10889210455404918, 0.14099254359334334, 0.14714037010476455, 0.1325733727982108, 0.11275971371269555, 0.13977551335753413, 0.12808015950155516, 0.9645212205726398, 0.9761492737972657, 0.9746892724244693, 0.9501808525480977, 0.9687563510003965, 0.9525637249460471, 0.9778834822484883, 0.9600772060679164, 0.9647672510807135, 0.6479761075029533, 0.7051173057108101, 0.6885891485429403, 0.1938539096666434, 0.6943932567035305, 0.6724950467164483, 0.7119410398402154, 0.6695998217885912, 0.6959327990603225, 0.38330618483321566, 0.22846501886821569, 0.3697500447112134, 0.2785964499153327, 0.19417904301946332, 0.27829399035998803, 0.851324017403165, 0.7659172777310529, 0.8695454593854912, 0.22089245745025943, 0.13416448543609316, 0.1950465335317726, 0.18774745232778522, 0.12835466696972964, 0.19236646079742226, 0.20009732212761588, 0.1753608790397142, 0.1293048109706877, 0.13080002224486376, 0.1794288810433673, 0.2078719826043035, 0.1565635602988088, 0.2564661376268952, 0.20441316459512515, 0.1249838252187292, 0.13634687583796934, 0.2237970495069478, 0.10724862951878456, 0.010767708313981661, 9.999999999998899e-05, 0.007444193438304159, 9.999999999998899e-05, 0.0220201806718624, 9.999999999998899e-05, 0.002602690581584133, 0.12447269464395727, 0.10072544672944839, 0.03395795775759236, 0.14553698758999944, 0.047279744830477255, 0.012890642366753857, 0.03639343802338901, 0.060370407076058785, 0.07501790218932292, 0.042947140436754516, 0.12333244333024629, 0.035078822040175095, 0.24626297655606288, 0.1391063004999552, 0.09311857113168898, 0.08083782756328439, 0.12184381278914991, 0.09887828882346272, 0.07061207384336488, 0.05558883911319845, 0.042229618380132394, 0.19919250533551236, 0.05457840477897602, 0.23345874799753397, 0.24106343331508262, 0.1362997740184685, 0.05668299773957408, 0.09090087762382759, 0.5319436489952678, 0.5387156656151443, 0.5629376666348236, 0.5177651053707459, 0.6229005303051913, 0.5514117593151024, 0.5703079303034599, 0.5670852211166324, 0.5695396711047345, 0.135127816742439, 0.11536832444862866, 0.11277232557081951, 0.09337115579400301, 0.0745472336152403, 0.12059340188390488, 0.10763146168627824, 0.11026019976159318, 0.10954411048826618, 0.47829215239646106, 0.3004836072950158, 0.17413000179320393, 0.24860055687933758, 0.21718465593130676, 0.21337956946406145, 0.4174623442338876, 0.33728236478325424, 0.2782853303936469, 0.4929587646180781, 0.3854513070860923, 0.24946961657720057, 0.28654430416459187, 0.3108555816864875, 0.5857544593930797, 0.2577155614056096, 0.6807381801752441, 0.22541636408167287, 0.24624002450144045, 0.2052769451016918, 0.30081984712905585, 0.23892814575468568, 0.38068078076345824, 0.28630947733291634, 0.2945516119824616, 0.317476630231627, 0.25857106751128744, 0.22788832216121602, 0.20216652613363495, 0.2070188049092454, 0.2332724971025666, 0.22536628818433768, 0.27155707364826787, 0.23744535926317556, 0.23655064580391139, 0.24009573480527813, 0.1986224713610143, 0.2083111055106106, 0.2068723977528426, 0.7605377362048941, 0.24197103719882185, 0.1891601387884334, 0.22102599880385165, 0.1864865995039895, 0.2166077972076439, 0.1641543580635627, 0.12659372806876745, 0.15389611889550414, 0.8979887738047796, 0.2000296970833194, 0.1997079993840465, 0.1721877713652008, 0.16138912697998076, 0.9128608774288254, 0.7608919691468662, 0.21123288145482677, 0.20887341058469833, 0.2095767946476833, 0.6873980815788463, 0.1547865796828366, 0.5730857325080261, 0.21042520099659545, 0.765336801638925, 0.20829392340013797, 0.18368933942511234, 0.18239522005696807, 0.19368722918581027, 0.19389827677910265, 0.19069100693564267, 0.1898798858193138, 0.1889055966004577, 0.19637087829418443, 0.0991190431816038, 0.0895626999909156, 0.077542623691787, 0.10093615195790029, 0.09284836058604484, 0.09154303766878347, 0.10169471507945904, 0.08502197119856991, 0.10481235041405523]}, "mutation_prompt": null}
{"id": "9eae4811-7178-4018-9309-ea310b5a8592", "solution": "import numpy as np\n\nclass OAHPE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.c1 = 1.4\n        self.c2 = 1.6\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.7\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _evaluate_population(self, population, func):\n        return np.array([func(ind) for ind in population])\n\n    def _update_velocity(self, velocities, population, personal_best, global_best):\n        r1, r2 = np.random.rand(2, self.population_size, self.dim)\n        cognitive = self.c1 * r1 * (personal_best - population)\n        social = self.c2 * r2 * (global_best - population)\n        return velocities * 0.4 + cognitive + social * 0.85\n\n    def _apply_bounds(self, population):\n        np.clip(population, self.lower_bound, self.upper_bound, out=population)\n\n    def _differential_mutation(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = population[indices]\n        self.mutation_factor = 0.7 + 0.3 * (1 - np.linalg.norm(b - c) / (2 * np.sqrt(self.dim)))  # Adaptive mutation factor\n        mutant = a + self.mutation_factor * (b - c)\n        trial = np.where(np.random.rand(self.dim) < self.crossover_prob * 0.95, mutant, population[idx])\n        return np.clip(trial, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_value = self._evaluate_population(population, func)\n        \n        global_best_idx = np.argmin(personal_best_value)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_value[global_best_idx]\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            self.crossover_prob = 0.6 + 0.2 * (1 - evaluations/self.budget)\n            velocities = self._update_velocity(velocities, population, personal_best, global_best)\n            population += velocities\n            self._apply_bounds(population)\n\n            new_population_value = self._evaluate_population(population, func)\n            evaluations += self.population_size\n\n            for i in range(self.population_size):\n                if new_population_value[i] < personal_best_value[i]:\n                    personal_best[i] = population[i]\n                    personal_best_value[i] = new_population_value[i]\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                trial = self._differential_mutation(population, i)\n                trial_value = func(trial)\n                if trial_value < personal_best_value[i]:  # Simplified check logic\n                    evaluations += 1\n                    population[i] = trial\n                    personal_best[i] = trial\n                    personal_best_value[i] = trial_value\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n        return global_best", "name": "OAHPE", "description": "An enhanced OAHPE with adaptive mutation factor and streamlined evaluations to improve convergence speed and efficiency.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3120b994-c3c2-471c-b9bd-c73654481b8f", "metadata": {"aucs": [0.8668348600324541, 0.8611005175267618, 0.8595363620990507, 0.8748613574260196, 0.8660451128204074, 0.8687978327620154, 0.8683873279178499, 0.8561195048447305, 0.8670443034633353, 0.7284170435184483, 0.04183025942019325, 0.5531449896823765, 0.7118588379605382, 0.7113976675206496, 0.737665508993827, 0.6900803723634554, 0.7090743231839416, 0.6654647776405871, 0.13755666515095377, 0.10933386887237517, 0.11673072508678417, 0.11306952762905986, 0.1677525895013443, 0.14609843552526147, 0.11887953657481287, 0.18398095467509457, 0.14839657186661848, 0.15193475442386373, 0.1400880666637686, 0.10889210455404918, 0.14099254359334334, 0.14714037010476455, 0.1325733727982108, 0.11275971371269555, 0.13977551335753413, 0.12808015950155516, 0.9645212205726398, 0.9761492737972657, 0.9746892724244693, 0.9501808525480977, 0.9687563510003965, 0.9525637249460471, 0.9778834822484883, 0.9600772060679164, 0.9647672510807135, 0.6479761075029533, 0.7051173057108101, 0.6885891485429403, 0.1938539096666434, 0.6943932567035305, 0.6724950467164483, 0.7119410398402154, 0.6695998217885912, 0.6959327990603225, 0.38330618483321566, 0.22846501886821569, 0.3697500447112134, 0.2785964499153327, 0.19417904301946332, 0.27829399035998803, 0.851324017403165, 0.7659172777310529, 0.8695454593854912, 0.22089245745025943, 0.13416448543609316, 0.1950465335317726, 0.18774745232778522, 0.12835466696972964, 0.19236646079742226, 0.20009732212761588, 0.1753608790397142, 0.1293048109706877, 0.13080002224486376, 0.1794288810433673, 0.2078719826043035, 0.1565635602988088, 0.2564661376268952, 0.20441316459512515, 0.1249838252187292, 0.13634687583796934, 0.2237970495069478, 0.10724862951878456, 0.010767708313981661, 9.999999999998899e-05, 0.007444193438304159, 9.999999999998899e-05, 0.0220201806718624, 9.999999999998899e-05, 0.002602690581584133, 0.12447269464395727, 0.10072544672944839, 0.03395795775759236, 0.14553698758999944, 0.047279744830477255, 0.012890642366753857, 0.03639343802338901, 0.060370407076058785, 0.07501790218932292, 0.042947140436754516, 0.12333244333024629, 0.035078822040175095, 0.24626297655606288, 0.1391063004999552, 0.09311857113168898, 0.08083782756328439, 0.12184381278914991, 0.09887828882346272, 0.07061207384336488, 0.05558883911319845, 0.042229618380132394, 0.19919250533551236, 0.05457840477897602, 0.23345874799753397, 0.24106343331508262, 0.1362997740184685, 0.05668299773957408, 0.09090087762382759, 0.5319436489952678, 0.5387156656151443, 0.5629376666348236, 0.5177651053707459, 0.6229005303051913, 0.5514117593151024, 0.5703079303034599, 0.5670852211166324, 0.5695396711047345, 0.135127816742439, 0.11536832444862866, 0.11277232557081951, 0.09337115579400301, 0.0745472336152403, 0.12059340188390488, 0.10763146168627824, 0.11026019976159318, 0.10954411048826618, 0.47829215239646106, 0.3004836072950158, 0.17413000179320393, 0.24860055687933758, 0.21718465593130676, 0.21337956946406145, 0.4174623442338876, 0.33728236478325424, 0.2782853303936469, 0.4929587646180781, 0.3854513070860923, 0.24946961657720057, 0.28654430416459187, 0.3108555816864875, 0.5857544593930797, 0.2577155614056096, 0.6807381801752441, 0.22541636408167287, 0.24624002450144045, 0.2052769451016918, 0.30081984712905585, 0.23892814575468568, 0.38068078076345824, 0.28630947733291634, 0.2945516119824616, 0.317476630231627, 0.25857106751128744, 0.22788832216121602, 0.20216652613363495, 0.2070188049092454, 0.2332724971025666, 0.22536628818433768, 0.27155707364826787, 0.23744535926317556, 0.23655064580391139, 0.24009573480527813, 0.1986224713610143, 0.2083111055106106, 0.2068723977528426, 0.7605377362048941, 0.24197103719882185, 0.1891601387884334, 0.22102599880385165, 0.1864865995039895, 0.2166077972076439, 0.1641543580635627, 0.12659372806876745, 0.15389611889550414, 0.8979887738047796, 0.2000296970833194, 0.1997079993840465, 0.1721877713652008, 0.16138912697998076, 0.9128608774288254, 0.7608919691468662, 0.21123288145482677, 0.20887341058469833, 0.2095767946476833, 0.6873980815788463, 0.1547865796828366, 0.5730857325080261, 0.21042520099659545, 0.765336801638925, 0.20829392340013797, 0.18368933942511234, 0.18239522005696807, 0.19368722918581027, 0.19389827677910265, 0.19069100693564267, 0.1898798858193138, 0.1889055966004577, 0.19637087829418443, 0.0991190431816038, 0.0895626999909156, 0.077542623691787, 0.10093615195790029, 0.09284836058604484, 0.09154303766878347, 0.10169471507945904, 0.08502197119856991, 0.10481235041405523]}, "mutation_prompt": null}
{"id": "c9cb9b34-9084-4f5d-a2ce-aa6e6e3a814e", "solution": "import numpy as np\n\nclass OAHPE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.c1 = 1.4\n        self.c2 = 1.6\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.7\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _evaluate_population(self, population, func):\n        return np.array([func(ind) for ind in population])\n\n    def _update_velocity(self, velocities, population, personal_best, global_best):\n        r1, r2 = np.random.rand(2, self.population_size, self.dim)\n        cognitive = self.c1 * r1 * (personal_best - population)\n        social = self.c2 * r2 * (global_best - population)\n        return velocities * 0.4 + cognitive + social * 0.85\n\n    def _apply_bounds(self, population):\n        np.clip(population, self.lower_bound, self.upper_bound, out=population)\n\n    def _differential_mutation(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = population[indices]\n        self.mutation_factor = 0.7 + 0.3 * (1 - np.linalg.norm(b - c) / (2 * np.sqrt(self.dim)))  # Adaptive mutation factor\n        mutant = a + self.mutation_factor * (b - c)\n        trial = np.where(np.random.rand(self.dim) < self.crossover_prob * 0.95, mutant, population[idx])\n        return np.clip(trial, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_value = self._evaluate_population(population, func)\n        \n        global_best_idx = np.argmin(personal_best_value)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_value[global_best_idx]\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            self.crossover_prob = 0.6 + 0.2 * (1 - evaluations/self.budget)\n            velocities = self._update_velocity(velocities, population, personal_best, global_best)\n            population += velocities\n            self._apply_bounds(population)\n\n            new_population_value = self._evaluate_population(population, func)\n            evaluations += self.population_size\n\n            for i in range(self.population_size):\n                if new_population_value[i] < personal_best_value[i]:\n                    personal_best[i] = population[i]\n                    personal_best_value[i] = new_population_value[i]\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                trial = self._differential_mutation(population, i)\n                trial_value = func(trial)\n                if trial_value < personal_best_value[i]:  # Simplified check logic\n                    evaluations += 1\n                    population[i] = trial\n                    personal_best[i] = trial\n                    personal_best_value[i] = trial_value\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n        return global_best", "name": "OAHPE", "description": "An enhanced OAHPE with adaptive mutation factor and streamlined evaluations to improve convergence speed and efficiency.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3120b994-c3c2-471c-b9bd-c73654481b8f", "metadata": {"aucs": [0.8668348600324541, 0.8611005175267618, 0.8595363620990507, 0.8748613574260196, 0.8660451128204074, 0.8687978327620154, 0.8683873279178499, 0.8561195048447305, 0.8670443034633353, 0.7284170435184483, 0.04183025942019325, 0.5531449896823765, 0.7118588379605382, 0.7113976675206496, 0.737665508993827, 0.6900803723634554, 0.7090743231839416, 0.6654647776405871, 0.13755666515095377, 0.10933386887237517, 0.11673072508678417, 0.11306952762905986, 0.1677525895013443, 0.14609843552526147, 0.11887953657481287, 0.18398095467509457, 0.14839657186661848, 0.15193475442386373, 0.1400880666637686, 0.10889210455404918, 0.14099254359334334, 0.14714037010476455, 0.1325733727982108, 0.11275971371269555, 0.13977551335753413, 0.12808015950155516, 0.9645212205726398, 0.9761492737972657, 0.9746892724244693, 0.9501808525480977, 0.9687563510003965, 0.9525637249460471, 0.9778834822484883, 0.9600772060679164, 0.9647672510807135, 0.6479761075029533, 0.7051173057108101, 0.6885891485429403, 0.1938539096666434, 0.6943932567035305, 0.6724950467164483, 0.7119410398402154, 0.6695998217885912, 0.6959327990603225, 0.38330618483321566, 0.22846501886821569, 0.3697500447112134, 0.2785964499153327, 0.19417904301946332, 0.27829399035998803, 0.851324017403165, 0.7659172777310529, 0.8695454593854912, 0.22089245745025943, 0.13416448543609316, 0.1950465335317726, 0.18774745232778522, 0.12835466696972964, 0.19236646079742226, 0.20009732212761588, 0.1753608790397142, 0.1293048109706877, 0.13080002224486376, 0.1794288810433673, 0.2078719826043035, 0.1565635602988088, 0.2564661376268952, 0.20441316459512515, 0.1249838252187292, 0.13634687583796934, 0.2237970495069478, 0.10724862951878456, 0.010767708313981661, 9.999999999998899e-05, 0.007444193438304159, 9.999999999998899e-05, 0.0220201806718624, 9.999999999998899e-05, 0.002602690581584133, 0.12447269464395727, 0.10072544672944839, 0.03395795775759236, 0.14553698758999944, 0.047279744830477255, 0.012890642366753857, 0.03639343802338901, 0.060370407076058785, 0.07501790218932292, 0.042947140436754516, 0.12333244333024629, 0.035078822040175095, 0.24626297655606288, 0.1391063004999552, 0.09311857113168898, 0.08083782756328439, 0.12184381278914991, 0.09887828882346272, 0.07061207384336488, 0.05558883911319845, 0.042229618380132394, 0.19919250533551236, 0.05457840477897602, 0.23345874799753397, 0.24106343331508262, 0.1362997740184685, 0.05668299773957408, 0.09090087762382759, 0.5319436489952678, 0.5387156656151443, 0.5629376666348236, 0.5177651053707459, 0.6229005303051913, 0.5514117593151024, 0.5703079303034599, 0.5670852211166324, 0.5695396711047345, 0.135127816742439, 0.11536832444862866, 0.11277232557081951, 0.09337115579400301, 0.0745472336152403, 0.12059340188390488, 0.10763146168627824, 0.11026019976159318, 0.10954411048826618, 0.47829215239646106, 0.3004836072950158, 0.17413000179320393, 0.24860055687933758, 0.21718465593130676, 0.21337956946406145, 0.4174623442338876, 0.33728236478325424, 0.2782853303936469, 0.4929587646180781, 0.3854513070860923, 0.24946961657720057, 0.28654430416459187, 0.3108555816864875, 0.5857544593930797, 0.2577155614056096, 0.6807381801752441, 0.22541636408167287, 0.24624002450144045, 0.2052769451016918, 0.30081984712905585, 0.23892814575468568, 0.38068078076345824, 0.28630947733291634, 0.2945516119824616, 0.317476630231627, 0.25857106751128744, 0.22788832216121602, 0.20216652613363495, 0.2070188049092454, 0.2332724971025666, 0.22536628818433768, 0.27155707364826787, 0.23744535926317556, 0.23655064580391139, 0.24009573480527813, 0.1986224713610143, 0.2083111055106106, 0.2068723977528426, 0.7605377362048941, 0.24197103719882185, 0.1891601387884334, 0.22102599880385165, 0.1864865995039895, 0.2166077972076439, 0.1641543580635627, 0.12659372806876745, 0.15389611889550414, 0.8979887738047796, 0.2000296970833194, 0.1997079993840465, 0.1721877713652008, 0.16138912697998076, 0.9128608774288254, 0.7608919691468662, 0.21123288145482677, 0.20887341058469833, 0.2095767946476833, 0.6873980815788463, 0.1547865796828366, 0.5730857325080261, 0.21042520099659545, 0.765336801638925, 0.20829392340013797, 0.18368933942511234, 0.18239522005696807, 0.19368722918581027, 0.19389827677910265, 0.19069100693564267, 0.1898798858193138, 0.1889055966004577, 0.19637087829418443, 0.0991190431816038, 0.0895626999909156, 0.077542623691787, 0.10093615195790029, 0.09284836058604484, 0.09154303766878347, 0.10169471507945904, 0.08502197119856991, 0.10481235041405523]}, "mutation_prompt": null}
{"id": "3b56c738-cb86-403d-ad8b-4225838c39d9", "solution": "import numpy as np\n\nclass OAHPE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.c1 = 1.4\n        self.c2 = 1.6\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.7\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _evaluate_population(self, population, func):\n        return np.array([func(ind) for ind in population])\n\n    def _update_velocity(self, velocities, population, personal_best, global_best):\n        r1, r2 = np.random.rand(2, self.population_size, self.dim)\n        cognitive = self.c1 * r1 * (personal_best - population)\n        social = self.c2 * r2 * (global_best - population)\n        return velocities * 0.4 + cognitive + social * 0.85\n\n    def _apply_bounds(self, population):\n        np.clip(population, self.lower_bound, self.upper_bound, out=population)\n\n    def _differential_mutation(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = population[indices]\n        self.mutation_factor = 0.7 + 0.3 * (1 - np.linalg.norm(b - c) / (2 * np.sqrt(self.dim)))  # Adaptive mutation factor\n        mutant = a + self.mutation_factor * (b - c)\n        trial = np.where(np.random.rand(self.dim) < self.crossover_prob * 0.95, mutant, population[idx])\n        return np.clip(trial, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_value = self._evaluate_population(population, func)\n        \n        global_best_idx = np.argmin(personal_best_value)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_value[global_best_idx]\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            self.crossover_prob = 0.6 + 0.2 * (1 - evaluations/self.budget)\n            velocities = self._update_velocity(velocities, population, personal_best, global_best)\n            population += velocities\n            self._apply_bounds(population)\n\n            new_population_value = self._evaluate_population(population, func)\n            evaluations += self.population_size\n\n            for i in range(self.population_size):\n                if new_population_value[i] < personal_best_value[i]:\n                    personal_best[i] = population[i]\n                    personal_best_value[i] = new_population_value[i]\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                trial = self._differential_mutation(population, i)\n                trial_value = func(trial)\n                if trial_value < personal_best_value[i]:  # Simplified check logic\n                    evaluations += 1\n                    population[i] = trial\n                    personal_best[i] = trial\n                    personal_best_value[i] = trial_value\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n        return global_best", "name": "OAHPE", "description": "An enhanced OAHPE with adaptive mutation factor and streamlined evaluations to improve convergence speed and efficiency.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3120b994-c3c2-471c-b9bd-c73654481b8f", "metadata": {"aucs": [0.8668348600324541, 0.8611005175267618, 0.8595363620990507, 0.8748613574260196, 0.8660451128204074, 0.8687978327620154, 0.8683873279178499, 0.8561195048447305, 0.8670443034633353, 0.7284170435184483, 0.04183025942019325, 0.5531449896823765, 0.7118588379605382, 0.7113976675206496, 0.737665508993827, 0.6900803723634554, 0.7090743231839416, 0.6654647776405871, 0.13755666515095377, 0.10933386887237517, 0.11673072508678417, 0.11306952762905986, 0.1677525895013443, 0.14609843552526147, 0.11887953657481287, 0.18398095467509457, 0.14839657186661848, 0.15193475442386373, 0.1400880666637686, 0.10889210455404918, 0.14099254359334334, 0.14714037010476455, 0.1325733727982108, 0.11275971371269555, 0.13977551335753413, 0.12808015950155516, 0.9645212205726398, 0.9761492737972657, 0.9746892724244693, 0.9501808525480977, 0.9687563510003965, 0.9525637249460471, 0.9778834822484883, 0.9600772060679164, 0.9647672510807135, 0.6479761075029533, 0.7051173057108101, 0.6885891485429403, 0.1938539096666434, 0.6943932567035305, 0.6724950467164483, 0.7119410398402154, 0.6695998217885912, 0.6959327990603225, 0.38330618483321566, 0.22846501886821569, 0.3697500447112134, 0.2785964499153327, 0.19417904301946332, 0.27829399035998803, 0.851324017403165, 0.7659172777310529, 0.8695454593854912, 0.22089245745025943, 0.13416448543609316, 0.1950465335317726, 0.18774745232778522, 0.12835466696972964, 0.19236646079742226, 0.20009732212761588, 0.1753608790397142, 0.1293048109706877, 0.13080002224486376, 0.1794288810433673, 0.2078719826043035, 0.1565635602988088, 0.2564661376268952, 0.20441316459512515, 0.1249838252187292, 0.13634687583796934, 0.2237970495069478, 0.10724862951878456, 0.010767708313981661, 9.999999999998899e-05, 0.007444193438304159, 9.999999999998899e-05, 0.0220201806718624, 9.999999999998899e-05, 0.002602690581584133, 0.12447269464395727, 0.10072544672944839, 0.03395795775759236, 0.14553698758999944, 0.047279744830477255, 0.012890642366753857, 0.03639343802338901, 0.060370407076058785, 0.07501790218932292, 0.042947140436754516, 0.12333244333024629, 0.035078822040175095, 0.24626297655606288, 0.1391063004999552, 0.09311857113168898, 0.08083782756328439, 0.12184381278914991, 0.09887828882346272, 0.07061207384336488, 0.05558883911319845, 0.042229618380132394, 0.19919250533551236, 0.05457840477897602, 0.23345874799753397, 0.24106343331508262, 0.1362997740184685, 0.05668299773957408, 0.09090087762382759, 0.5319436489952678, 0.5387156656151443, 0.5629376666348236, 0.5177651053707459, 0.6229005303051913, 0.5514117593151024, 0.5703079303034599, 0.5670852211166324, 0.5695396711047345, 0.135127816742439, 0.11536832444862866, 0.11277232557081951, 0.09337115579400301, 0.0745472336152403, 0.12059340188390488, 0.10763146168627824, 0.11026019976159318, 0.10954411048826618, 0.47829215239646106, 0.3004836072950158, 0.17413000179320393, 0.24860055687933758, 0.21718465593130676, 0.21337956946406145, 0.4174623442338876, 0.33728236478325424, 0.2782853303936469, 0.4929587646180781, 0.3854513070860923, 0.24946961657720057, 0.28654430416459187, 0.3108555816864875, 0.5857544593930797, 0.2577155614056096, 0.6807381801752441, 0.22541636408167287, 0.24624002450144045, 0.2052769451016918, 0.30081984712905585, 0.23892814575468568, 0.38068078076345824, 0.28630947733291634, 0.2945516119824616, 0.317476630231627, 0.25857106751128744, 0.22788832216121602, 0.20216652613363495, 0.2070188049092454, 0.2332724971025666, 0.22536628818433768, 0.27155707364826787, 0.23744535926317556, 0.23655064580391139, 0.24009573480527813, 0.1986224713610143, 0.2083111055106106, 0.2068723977528426, 0.7605377362048941, 0.24197103719882185, 0.1891601387884334, 0.22102599880385165, 0.1864865995039895, 0.2166077972076439, 0.1641543580635627, 0.12659372806876745, 0.15389611889550414, 0.8979887738047796, 0.2000296970833194, 0.1997079993840465, 0.1721877713652008, 0.16138912697998076, 0.9128608774288254, 0.7608919691468662, 0.21123288145482677, 0.20887341058469833, 0.2095767946476833, 0.6873980815788463, 0.1547865796828366, 0.5730857325080261, 0.21042520099659545, 0.765336801638925, 0.20829392340013797, 0.18368933942511234, 0.18239522005696807, 0.19368722918581027, 0.19389827677910265, 0.19069100693564267, 0.1898798858193138, 0.1889055966004577, 0.19637087829418443, 0.0991190431816038, 0.0895626999909156, 0.077542623691787, 0.10093615195790029, 0.09284836058604484, 0.09154303766878347, 0.10169471507945904, 0.08502197119856991, 0.10481235041405523]}, "mutation_prompt": null}
{"id": "2bc12f8b-2b24-4119-984b-d34709c0e7d7", "solution": "import numpy as np\n\nclass OAHPE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.c1 = 1.4\n        self.c2 = 1.6\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.7\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _evaluate_population(self, population, func):\n        return np.array([func(ind) for ind in population])\n\n    def _update_velocity(self, velocities, population, personal_best, global_best):\n        r1, r2 = np.random.rand(2, self.population_size, self.dim)\n        cognitive = self.c1 * r1 * (personal_best - population)\n        social = self.c2 * r2 * (global_best - population)\n        return velocities * 0.4 + cognitive + social * 0.85\n\n    def _apply_bounds(self, population):\n        np.clip(population, self.lower_bound, self.upper_bound, out=population)\n\n    def _differential_mutation(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = population[indices]\n        self.mutation_factor = 0.7 + 0.3 * (1 - np.linalg.norm(b - c) / (2 * np.sqrt(self.dim)))  # Adaptive mutation factor\n        mutant = a + self.mutation_factor * (b - c)\n        trial = np.where(np.random.rand(self.dim) < self.crossover_prob * 0.95, mutant, population[idx])\n        return np.clip(trial, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_value = self._evaluate_population(population, func)\n        \n        global_best_idx = np.argmin(personal_best_value)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_value[global_best_idx]\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            self.crossover_prob = 0.6 + 0.2 * (1 - evaluations/self.budget)\n            velocities = self._update_velocity(velocities, population, personal_best, global_best)\n            population += velocities\n            self._apply_bounds(population)\n\n            new_population_value = self._evaluate_population(population, func)\n            evaluations += self.population_size\n\n            for i in range(self.population_size):\n                if new_population_value[i] < personal_best_value[i]:\n                    personal_best[i] = population[i]\n                    personal_best_value[i] = new_population_value[i]\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                trial = self._differential_mutation(population, i)\n                trial_value = func(trial)\n                if trial_value < personal_best_value[i]:  # Simplified check logic\n                    evaluations += 1\n                    population[i] = trial\n                    personal_best[i] = trial\n                    personal_best_value[i] = trial_value\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n        return global_best", "name": "OAHPE", "description": "An enhanced OAHPE with adaptive mutation factor and streamlined evaluations to improve convergence speed and efficiency.", "configspace": "", "generation": 58, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3120b994-c3c2-471c-b9bd-c73654481b8f", "metadata": {"aucs": [0.8668348600324541, 0.8611005175267618, 0.8595363620990507, 0.8748613574260196, 0.8660451128204074, 0.8687978327620154, 0.8683873279178499, 0.8561195048447305, 0.8670443034633353, 0.7284170435184483, 0.04183025942019325, 0.5531449896823765, 0.7118588379605382, 0.7113976675206496, 0.737665508993827, 0.6900803723634554, 0.7090743231839416, 0.6654647776405871, 0.13755666515095377, 0.10933386887237517, 0.11673072508678417, 0.11306952762905986, 0.1677525895013443, 0.14609843552526147, 0.11887953657481287, 0.18398095467509457, 0.14839657186661848, 0.15193475442386373, 0.1400880666637686, 0.10889210455404918, 0.14099254359334334, 0.14714037010476455, 0.1325733727982108, 0.11275971371269555, 0.13977551335753413, 0.12808015950155516, 0.9645212205726398, 0.9761492737972657, 0.9746892724244693, 0.9501808525480977, 0.9687563510003965, 0.9525637249460471, 0.9778834822484883, 0.9600772060679164, 0.9647672510807135, 0.6479761075029533, 0.7051173057108101, 0.6885891485429403, 0.1938539096666434, 0.6943932567035305, 0.6724950467164483, 0.7119410398402154, 0.6695998217885912, 0.6959327990603225, 0.38330618483321566, 0.22846501886821569, 0.3697500447112134, 0.2785964499153327, 0.19417904301946332, 0.27829399035998803, 0.851324017403165, 0.7659172777310529, 0.8695454593854912, 0.22089245745025943, 0.13416448543609316, 0.1950465335317726, 0.18774745232778522, 0.12835466696972964, 0.19236646079742226, 0.20009732212761588, 0.1753608790397142, 0.1293048109706877, 0.13080002224486376, 0.1794288810433673, 0.2078719826043035, 0.1565635602988088, 0.2564661376268952, 0.20441316459512515, 0.1249838252187292, 0.13634687583796934, 0.2237970495069478, 0.10724862951878456, 0.010767708313981661, 9.999999999998899e-05, 0.007444193438304159, 9.999999999998899e-05, 0.0220201806718624, 9.999999999998899e-05, 0.002602690581584133, 0.12447269464395727, 0.10072544672944839, 0.03395795775759236, 0.14553698758999944, 0.047279744830477255, 0.012890642366753857, 0.03639343802338901, 0.060370407076058785, 0.07501790218932292, 0.042947140436754516, 0.12333244333024629, 0.035078822040175095, 0.24626297655606288, 0.1391063004999552, 0.09311857113168898, 0.08083782756328439, 0.12184381278914991, 0.09887828882346272, 0.07061207384336488, 0.05558883911319845, 0.042229618380132394, 0.19919250533551236, 0.05457840477897602, 0.23345874799753397, 0.24106343331508262, 0.1362997740184685, 0.05668299773957408, 0.09090087762382759, 0.5319436489952678, 0.5387156656151443, 0.5629376666348236, 0.5177651053707459, 0.6229005303051913, 0.5514117593151024, 0.5703079303034599, 0.5670852211166324, 0.5695396711047345, 0.135127816742439, 0.11536832444862866, 0.11277232557081951, 0.09337115579400301, 0.0745472336152403, 0.12059340188390488, 0.10763146168627824, 0.11026019976159318, 0.10954411048826618, 0.47829215239646106, 0.3004836072950158, 0.17413000179320393, 0.24860055687933758, 0.21718465593130676, 0.21337956946406145, 0.4174623442338876, 0.33728236478325424, 0.2782853303936469, 0.4929587646180781, 0.3854513070860923, 0.24946961657720057, 0.28654430416459187, 0.3108555816864875, 0.5857544593930797, 0.2577155614056096, 0.6807381801752441, 0.22541636408167287, 0.24624002450144045, 0.2052769451016918, 0.30081984712905585, 0.23892814575468568, 0.38068078076345824, 0.28630947733291634, 0.2945516119824616, 0.317476630231627, 0.25857106751128744, 0.22788832216121602, 0.20216652613363495, 0.2070188049092454, 0.2332724971025666, 0.22536628818433768, 0.27155707364826787, 0.23744535926317556, 0.23655064580391139, 0.24009573480527813, 0.1986224713610143, 0.2083111055106106, 0.2068723977528426, 0.7605377362048941, 0.24197103719882185, 0.1891601387884334, 0.22102599880385165, 0.1864865995039895, 0.2166077972076439, 0.1641543580635627, 0.12659372806876745, 0.15389611889550414, 0.8979887738047796, 0.2000296970833194, 0.1997079993840465, 0.1721877713652008, 0.16138912697998076, 0.9128608774288254, 0.7608919691468662, 0.21123288145482677, 0.20887341058469833, 0.2095767946476833, 0.6873980815788463, 0.1547865796828366, 0.5730857325080261, 0.21042520099659545, 0.765336801638925, 0.20829392340013797, 0.18368933942511234, 0.18239522005696807, 0.19368722918581027, 0.19389827677910265, 0.19069100693564267, 0.1898798858193138, 0.1889055966004577, 0.19637087829418443, 0.0991190431816038, 0.0895626999909156, 0.077542623691787, 0.10093615195790029, 0.09284836058604484, 0.09154303766878347, 0.10169471507945904, 0.08502197119856991, 0.10481235041405523]}, "mutation_prompt": null}
{"id": "0324ec16-47b3-46f3-b27b-3f81751e79c3", "solution": "import numpy as np\n\nclass OAHPE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.c1 = 1.4\n        self.c2 = 1.6\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.7\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _evaluate_population(self, population, func):\n        return np.array([func(ind) for ind in population])\n\n    def _update_velocity(self, velocities, population, personal_best, global_best):\n        r1, r2 = np.random.rand(2, self.population_size, self.dim)\n        cognitive = self.c1 * r1 * (personal_best - population)\n        social = self.c2 * r2 * (global_best - population)\n        return velocities * 0.4 + cognitive + social * 0.85\n\n    def _apply_bounds(self, population):\n        np.clip(population, self.lower_bound, self.upper_bound, out=population)\n\n    def _differential_mutation(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = population[indices]\n        self.mutation_factor = 0.7 + 0.3 * (1 - np.linalg.norm(b - c) / (2 * np.sqrt(self.dim)))  # Adaptive mutation factor\n        mutant = a + self.mutation_factor * (b - c)\n        trial = np.where(np.random.rand(self.dim) < self.crossover_prob, mutant, population[idx])\n        return np.clip(trial, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_value = self._evaluate_population(population, func)\n\n        global_best_idx = np.argmin(personal_best_value)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_value[global_best_idx]\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            self.crossover_prob = 0.6 + 0.2 * (1 - evaluations/self.budget)\n            velocities = self._update_velocity(velocities, population, personal_best, global_best)\n            population += velocities\n            self._apply_bounds(population)\n\n            new_population_value = self._evaluate_population(population, func)\n            evaluations += self.population_size\n\n            for i in range(self.population_size):\n                if new_population_value[i] < personal_best_value[i]:\n                    personal_best[i] = population[i]\n                    personal_best_value[i] = new_population_value[i]\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                trial = self._differential_mutation(population, i)\n                trial_value = func(trial)\n                if trial_value < personal_best_value[i]:\n                    evaluations += 1\n                    population[i] = trial\n                    personal_best[i] = trial\n                    personal_best_value[i] = trial_value\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n        return global_best", "name": "OAHPE", "description": "Optimized OAHPE by refining memory operations and enhancing adaptive parameters for accelerated convergence.", "configspace": "", "generation": 88, "fitness": 0.3211262738428306, "feedback": "The algorithm OAHPE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.28.", "error": "", "parent_id": "3120b994-c3c2-471c-b9bd-c73654481b8f", "metadata": {"aucs": [0.8702528635367375, 0.8705075273512579, 0.8616338725107104, 0.875645122099232, 0.8728979790106592, 0.8631077921600713, 0.8581323846911456, 0.8642353759829109, 0.8684862952849295, 0.691037526669874, 0.5339067003619554, 9.999999999998899e-05, 0.6941274874561698, 0.7142044527546305, 0.7200040264601056, 0.6738224611614424, 0.7344925900688823, 0.6897440236491045, 0.1418153722232992, 0.10846911562754591, 0.12277794311662948, 0.12971358653316, 0.17984112841156763, 0.5456933902771317, 0.11379538359915697, 0.1769248798352595, 0.11486913263890797, 0.10634538894543166, 0.11541986125435466, 0.10967515272917083, 0.12085317525370576, 0.10936703175618001, 0.11156900526100577, 0.13920459548676645, 0.1396901848182226, 0.15564739374828573, 0.966942901557619, 0.97616780799158, 0.9746813021464993, 0.9508323144164261, 0.968692405194026, 0.9541294716218044, 0.9778834822484883, 0.9601547528369845, 0.9623492414376636, 0.6887719442401743, 0.6745291545122658, 0.6866039911629285, 0.6942396524241754, 0.7197049582249316, 0.7265084405132611, 0.7077321703922461, 0.6791629164026431, 0.6840821329046644, 0.8696829976348277, 0.38150426010030336, 0.22544696618395843, 0.27774672505760123, 0.2791031026527193, 0.21366315299956629, 0.21788212637080207, 0.8983893141620884, 0.32590918597274965, 0.21369864952687845, 0.1253303801975546, 0.17313615898922585, 0.11086421550442516, 0.17737964223188407, 0.2048967267484647, 0.19697609367561086, 0.13413899455437728, 0.22239358147804222, 0.13102917719804685, 0.16630526076322094, 0.19197304189428033, 0.20886554860193196, 0.2350041055358688, 0.20776091375133054, 0.12568429571034156, 0.13533274261684491, 0.20963992486646765, 0.10717882792532041, 0.014744650837168805, 0.07964058680896902, 0.055081182920796, 9.999999999998899e-05, 0.013801549967721982, 0.00019219297400374646, 0.06806429101611833, 0.026147737902854296, 0.12028133746118908, 0.05563592983936594, 0.04938774435697746, 0.038144672442057215, 0.031974816431667885, 0.024994704793318667, 0.06950411273007595, 0.08734071680481281, 0.042682494516432246, 0.09897841513156569, 0.13488825384880088, 0.1721371959395105, 0.26352979755653627, 0.2347943226293162, 0.08253683015570135, 0.13195220750947012, 0.09580928969987668, 0.18385771466584955, 0.06304908458784098, 0.06405266776974006, 0.2848092830415656, 0.09613696553318007, 0.27565376527797947, 0.1320054578931431, 0.056474263828603766, 0.048781444513650074, 0.0828397071706668, 0.5545481382751856, 0.5600884944653572, 0.5725907365051012, 0.5666813417468817, 0.5715587446745052, 0.5758540385356621, 0.573019538459834, 0.6133804520354518, 0.5786237856322488, 0.13810423412628847, 0.10428281762553993, 0.0775551867227996, 0.09340964082827796, 0.1079447222492036, 0.17827277967393862, 0.13890451647582835, 0.08810539469263279, 0.06723409671849445, 0.47671062500451744, 0.14575373994910878, 0.1647058860777233, 0.24558022621804843, 0.37597884194570574, 0.22067638123723632, 0.2220176212883046, 0.3367981280304395, 0.2701704604829015, 0.2088262062347841, 0.5261425173265439, 0.29012460107196447, 0.3613494081730333, 0.26116669560519123, 0.337205282794276, 0.24802468691921842, 0.3554784735499168, 0.6571049294931619, 0.27993697273025586, 0.2059510480415293, 0.2844093700859105, 0.3212225102097803, 0.1893788086939251, 0.2860533736702491, 0.2718187877447189, 0.32382475566841606, 0.22107239108566645, 0.2717992177544204, 0.16424281647939587, 0.22922041135284876, 0.21190743930914036, 0.2429186554754601, 0.19215814495213968, 0.21233406996812199, 0.21613745237326354, 0.23475296379053778, 0.20982822445602878, 0.20623099017004487, 0.2240223953425844, 0.22952794887574723, 0.21625560278697575, 0.2510516264359861, 0.2478391142547386, 0.21865804283768253, 0.1800751899817875, 0.16419261237589344, 0.8172969583163242, 0.15382719704651282, 0.910220170036147, 0.20039440017964605, 0.19952942740090174, 0.1424688071765179, 0.1645707454557993, 0.9009405960410137, 0.7893373347479191, 0.21156378201475112, 0.20898470307931083, 0.2104298639713924, 0.6427266292909175, 0.15472846837522447, 0.4809354762193151, 0.21014995633395028, 0.7762885542231943, 0.1900758993971844, 0.19354906826081375, 0.21709388699879417, 0.19540418425881045, 0.19297051551430977, 0.19511939774914788, 0.2017976199824416, 0.2101603147058947, 0.20306504312204277, 0.09169284368434094, 0.10019127852633936, 0.07962681999560206, 0.09799949325075263, 0.09184855130179748, 0.0878191638438569, 0.087514855482836, 0.08296642440479096, 0.10109166749901399]}, "mutation_prompt": null}
{"id": "e4b51970-798f-46c2-a466-8355452104bd", "solution": "import numpy as np\n\nclass OAHPE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.c1 = 1.4\n        self.c2 = 1.6\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.7\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _evaluate_population(self, population, func):\n        return np.array([func(ind) for ind in population])\n\n    def _update_velocity(self, velocities, population, personal_best, global_best):\n        r1, r2 = np.random.rand(2, self.population_size, self.dim)\n        cognitive = self.c1 * r1 * (personal_best - population)\n        social = self.c2 * r2 * (global_best - population)\n        return velocities * 0.4 + cognitive + social * 0.85\n\n    def _apply_bounds(self, population):\n        np.clip(population, self.lower_bound, self.upper_bound, out=population)\n\n    def _differential_mutation(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = population[indices]\n        self.mutation_factor = 0.7 + 0.3 * (1 - np.linalg.norm(b - c) / (2 * np.sqrt(self.dim)))  # Adaptive mutation factor\n        mutant = a + self.mutation_factor * (b - c)\n        trial = np.where(np.random.rand(self.dim) < self.crossover_prob, mutant, population[idx])\n        return np.clip(trial, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_value = self._evaluate_population(population, func)\n\n        global_best_idx = np.argmin(personal_best_value)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_value[global_best_idx]\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            self.crossover_prob = 0.6 + 0.2 * (1 - evaluations/self.budget)\n            velocities = self._update_velocity(velocities, population, personal_best, global_best)\n            population += velocities\n            self._apply_bounds(population)\n\n            new_population_value = self._evaluate_population(population, func)\n            evaluations += self.population_size\n\n            for i in range(self.population_size):\n                if new_population_value[i] < personal_best_value[i]:\n                    personal_best[i] = population[i]\n                    personal_best_value[i] = new_population_value[i]\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                trial = self._differential_mutation(population, i)\n                trial_value = func(trial)\n                if trial_value < personal_best_value[i]:\n                    evaluations += 1\n                    population[i] = trial\n                    personal_best[i] = trial\n                    personal_best_value[i] = trial_value\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n        return global_best", "name": "OAHPE", "description": "Optimized OAHPE by refining memory operations and enhancing adaptive parameters for accelerated convergence.", "configspace": "", "generation": 89, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0324ec16-47b3-46f3-b27b-3f81751e79c3", "metadata": {"aucs": [0.8702528635367375, 0.8705075273512579, 0.8616338725107104, 0.875645122099232, 0.8728979790106592, 0.8631077921600713, 0.8581323846911456, 0.8642353759829109, 0.8684862952849295, 0.691037526669874, 0.5339067003619554, 9.999999999998899e-05, 0.6941274874561698, 0.7142044527546305, 0.7200040264601056, 0.6738224611614424, 0.7344925900688823, 0.6897440236491045, 0.1418153722232992, 0.10846911562754591, 0.12277794311662948, 0.12971358653316, 0.17984112841156763, 0.5456933902771317, 0.11379538359915697, 0.1769248798352595, 0.11486913263890797, 0.10634538894543166, 0.11541986125435466, 0.10967515272917083, 0.12085317525370576, 0.10936703175618001, 0.11156900526100577, 0.13920459548676645, 0.1396901848182226, 0.15564739374828573, 0.966942901557619, 0.97616780799158, 0.9746813021464993, 0.9508323144164261, 0.968692405194026, 0.9541294716218044, 0.9778834822484883, 0.9601547528369845, 0.9623492414376636, 0.6887719442401743, 0.6745291545122658, 0.6866039911629285, 0.6942396524241754, 0.7197049582249316, 0.7265084405132611, 0.7077321703922461, 0.6791629164026431, 0.6840821329046644, 0.8696829976348277, 0.38150426010030336, 0.22544696618395843, 0.27774672505760123, 0.2791031026527193, 0.21366315299956629, 0.21788212637080207, 0.8983893141620884, 0.32590918597274965, 0.21369864952687845, 0.1253303801975546, 0.17313615898922585, 0.11086421550442516, 0.17737964223188407, 0.2048967267484647, 0.19697609367561086, 0.13413899455437728, 0.22239358147804222, 0.13102917719804685, 0.16630526076322094, 0.19197304189428033, 0.20886554860193196, 0.2350041055358688, 0.20776091375133054, 0.12568429571034156, 0.13533274261684491, 0.20963992486646765, 0.10717882792532041, 0.014744650837168805, 0.07964058680896902, 0.055081182920796, 9.999999999998899e-05, 0.013801549967721982, 0.00019219297400374646, 0.06806429101611833, 0.026147737902854296, 0.12028133746118908, 0.05563592983936594, 0.04938774435697746, 0.038144672442057215, 0.031974816431667885, 0.024994704793318667, 0.06950411273007595, 0.08734071680481281, 0.042682494516432246, 0.09897841513156569, 0.13488825384880088, 0.1721371959395105, 0.26352979755653627, 0.2347943226293162, 0.08253683015570135, 0.13195220750947012, 0.09580928969987668, 0.18385771466584955, 0.06304908458784098, 0.06405266776974006, 0.2848092830415656, 0.09613696553318007, 0.27565376527797947, 0.1320054578931431, 0.056474263828603766, 0.048781444513650074, 0.0828397071706668, 0.5545481382751856, 0.5600884944653572, 0.5725907365051012, 0.5666813417468817, 0.5715587446745052, 0.5758540385356621, 0.573019538459834, 0.6133804520354518, 0.5786237856322488, 0.13810423412628847, 0.10428281762553993, 0.0775551867227996, 0.09340964082827796, 0.1079447222492036, 0.17827277967393862, 0.13890451647582835, 0.08810539469263279, 0.06723409671849445, 0.47671062500451744, 0.14575373994910878, 0.1647058860777233, 0.24558022621804843, 0.37597884194570574, 0.22067638123723632, 0.2220176212883046, 0.3367981280304395, 0.2701704604829015, 0.2088262062347841, 0.5261425173265439, 0.29012460107196447, 0.3613494081730333, 0.26116669560519123, 0.337205282794276, 0.24802468691921842, 0.3554784735499168, 0.6571049294931619, 0.27993697273025586, 0.2059510480415293, 0.2844093700859105, 0.3212225102097803, 0.1893788086939251, 0.2860533736702491, 0.2718187877447189, 0.32382475566841606, 0.22107239108566645, 0.2717992177544204, 0.16424281647939587, 0.22922041135284876, 0.21190743930914036, 0.2429186554754601, 0.19215814495213968, 0.21233406996812199, 0.21613745237326354, 0.23475296379053778, 0.20982822445602878, 0.20623099017004487, 0.2240223953425844, 0.22952794887574723, 0.21625560278697575, 0.2510516264359861, 0.2478391142547386, 0.21865804283768253, 0.1800751899817875, 0.16419261237589344, 0.8172969583163242, 0.15382719704651282, 0.910220170036147, 0.20039440017964605, 0.19952942740090174, 0.1424688071765179, 0.1645707454557993, 0.9009405960410137, 0.7893373347479191, 0.21156378201475112, 0.20898470307931083, 0.2104298639713924, 0.6427266292909175, 0.15472846837522447, 0.4809354762193151, 0.21014995633395028, 0.7762885542231943, 0.1900758993971844, 0.19354906826081375, 0.21709388699879417, 0.19540418425881045, 0.19297051551430977, 0.19511939774914788, 0.2017976199824416, 0.2101603147058947, 0.20306504312204277, 0.09169284368434094, 0.10019127852633936, 0.07962681999560206, 0.09799949325075263, 0.09184855130179748, 0.0878191638438569, 0.087514855482836, 0.08296642440479096, 0.10109166749901399]}, "mutation_prompt": null}
{"id": "60940a09-1564-4f0f-a95e-5e20b9a1d650", "solution": "import numpy as np\n\nclass OAHPE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.c1 = 1.4\n        self.c2 = 1.6\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.7\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _evaluate_population(self, population, func):\n        return np.array([func(ind) for ind in population])\n\n    def _update_velocity(self, velocities, population, personal_best, global_best):\n        r1, r2 = np.random.rand(2, self.population_size, self.dim)\n        cognitive = self.c1 * r1 * (personal_best - population)\n        social = self.c2 * r2 * (global_best - population)\n        return velocities * 0.4 + cognitive + social * 0.85\n\n    def _apply_bounds(self, population):\n        np.clip(population, self.lower_bound, self.upper_bound, out=population)\n\n    def _differential_mutation(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = population[indices]\n        self.mutation_factor = 0.7 + 0.3 * (1 - np.linalg.norm(b - c) / (2 * np.sqrt(self.dim)))  # Adaptive mutation factor\n        mutant = a + self.mutation_factor * (b - c)\n        trial = np.where(np.random.rand(self.dim) < self.crossover_prob, mutant, population[idx])\n        return np.clip(trial, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_value = self._evaluate_population(population, func)\n\n        global_best_idx = np.argmin(personal_best_value)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_value[global_best_idx]\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            self.crossover_prob = 0.6 + 0.2 * (1 - evaluations/self.budget)\n            velocities = self._update_velocity(velocities, population, personal_best, global_best)\n            population += velocities\n            self._apply_bounds(population)\n\n            new_population_value = self._evaluate_population(population, func)\n            evaluations += self.population_size\n\n            for i in range(self.population_size):\n                if new_population_value[i] < personal_best_value[i]:\n                    personal_best[i] = population[i]\n                    personal_best_value[i] = new_population_value[i]\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                trial = self._differential_mutation(population, i)\n                trial_value = func(trial)\n                if trial_value < personal_best_value[i]:\n                    evaluations += 1\n                    population[i] = trial\n                    personal_best[i] = trial\n                    personal_best_value[i] = trial_value\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n        return global_best", "name": "OAHPE", "description": "Optimized OAHPE by refining memory operations and enhancing adaptive parameters for accelerated convergence.", "configspace": "", "generation": 89, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0324ec16-47b3-46f3-b27b-3f81751e79c3", "metadata": {"aucs": [0.8702528635367375, 0.8705075273512579, 0.8616338725107104, 0.875645122099232, 0.8728979790106592, 0.8631077921600713, 0.8581323846911456, 0.8642353759829109, 0.8684862952849295, 0.691037526669874, 0.5339067003619554, 9.999999999998899e-05, 0.6941274874561698, 0.7142044527546305, 0.7200040264601056, 0.6738224611614424, 0.7344925900688823, 0.6897440236491045, 0.1418153722232992, 0.10846911562754591, 0.12277794311662948, 0.12971358653316, 0.17984112841156763, 0.5456933902771317, 0.11379538359915697, 0.1769248798352595, 0.11486913263890797, 0.10634538894543166, 0.11541986125435466, 0.10967515272917083, 0.12085317525370576, 0.10936703175618001, 0.11156900526100577, 0.13920459548676645, 0.1396901848182226, 0.15564739374828573, 0.966942901557619, 0.97616780799158, 0.9746813021464993, 0.9508323144164261, 0.968692405194026, 0.9541294716218044, 0.9778834822484883, 0.9601547528369845, 0.9623492414376636, 0.6887719442401743, 0.6745291545122658, 0.6866039911629285, 0.6942396524241754, 0.7197049582249316, 0.7265084405132611, 0.7077321703922461, 0.6791629164026431, 0.6840821329046644, 0.8696829976348277, 0.38150426010030336, 0.22544696618395843, 0.27774672505760123, 0.2791031026527193, 0.21366315299956629, 0.21788212637080207, 0.8983893141620884, 0.32590918597274965, 0.21369864952687845, 0.1253303801975546, 0.17313615898922585, 0.11086421550442516, 0.17737964223188407, 0.2048967267484647, 0.19697609367561086, 0.13413899455437728, 0.22239358147804222, 0.13102917719804685, 0.16630526076322094, 0.19197304189428033, 0.20886554860193196, 0.2350041055358688, 0.20776091375133054, 0.12568429571034156, 0.13533274261684491, 0.20963992486646765, 0.10717882792532041, 0.014744650837168805, 0.07964058680896902, 0.055081182920796, 9.999999999998899e-05, 0.013801549967721982, 0.00019219297400374646, 0.06806429101611833, 0.026147737902854296, 0.12028133746118908, 0.05563592983936594, 0.04938774435697746, 0.038144672442057215, 0.031974816431667885, 0.024994704793318667, 0.06950411273007595, 0.08734071680481281, 0.042682494516432246, 0.09897841513156569, 0.13488825384880088, 0.1721371959395105, 0.26352979755653627, 0.2347943226293162, 0.08253683015570135, 0.13195220750947012, 0.09580928969987668, 0.18385771466584955, 0.06304908458784098, 0.06405266776974006, 0.2848092830415656, 0.09613696553318007, 0.27565376527797947, 0.1320054578931431, 0.056474263828603766, 0.048781444513650074, 0.0828397071706668, 0.5545481382751856, 0.5600884944653572, 0.5725907365051012, 0.5666813417468817, 0.5715587446745052, 0.5758540385356621, 0.573019538459834, 0.6133804520354518, 0.5786237856322488, 0.13810423412628847, 0.10428281762553993, 0.0775551867227996, 0.09340964082827796, 0.1079447222492036, 0.17827277967393862, 0.13890451647582835, 0.08810539469263279, 0.06723409671849445, 0.47671062500451744, 0.14575373994910878, 0.1647058860777233, 0.24558022621804843, 0.37597884194570574, 0.22067638123723632, 0.2220176212883046, 0.3367981280304395, 0.2701704604829015, 0.2088262062347841, 0.5261425173265439, 0.29012460107196447, 0.3613494081730333, 0.26116669560519123, 0.337205282794276, 0.24802468691921842, 0.3554784735499168, 0.6571049294931619, 0.27993697273025586, 0.2059510480415293, 0.2844093700859105, 0.3212225102097803, 0.1893788086939251, 0.2860533736702491, 0.2718187877447189, 0.32382475566841606, 0.22107239108566645, 0.2717992177544204, 0.16424281647939587, 0.22922041135284876, 0.21190743930914036, 0.2429186554754601, 0.19215814495213968, 0.21233406996812199, 0.21613745237326354, 0.23475296379053778, 0.20982822445602878, 0.20623099017004487, 0.2240223953425844, 0.22952794887574723, 0.21625560278697575, 0.2510516264359861, 0.2478391142547386, 0.21865804283768253, 0.1800751899817875, 0.16419261237589344, 0.8172969583163242, 0.15382719704651282, 0.910220170036147, 0.20039440017964605, 0.19952942740090174, 0.1424688071765179, 0.1645707454557993, 0.9009405960410137, 0.7893373347479191, 0.21156378201475112, 0.20898470307931083, 0.2104298639713924, 0.6427266292909175, 0.15472846837522447, 0.4809354762193151, 0.21014995633395028, 0.7762885542231943, 0.1900758993971844, 0.19354906826081375, 0.21709388699879417, 0.19540418425881045, 0.19297051551430977, 0.19511939774914788, 0.2017976199824416, 0.2101603147058947, 0.20306504312204277, 0.09169284368434094, 0.10019127852633936, 0.07962681999560206, 0.09799949325075263, 0.09184855130179748, 0.0878191638438569, 0.087514855482836, 0.08296642440479096, 0.10109166749901399]}, "mutation_prompt": null}
{"id": "3f58bbc9-d850-4187-bf4c-1b6be24b98b0", "solution": "import numpy as np\n\nclass OAHPE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.c1 = 1.4\n        self.c2 = 1.6\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.7\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _evaluate_population(self, population, func):\n        return np.array([func(ind) for ind in population])\n\n    def _update_velocity(self, velocities, population, personal_best, global_best):\n        r1, r2 = np.random.rand(2, self.population_size, self.dim)\n        cognitive = self.c1 * r1 * (personal_best - population)\n        social = self.c2 * r2 * (global_best - population)\n        return velocities * 0.4 + cognitive + social * 0.85\n\n    def _apply_bounds(self, population):\n        np.clip(population, self.lower_bound, self.upper_bound, out=population)\n\n    def _differential_mutation(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = population[indices]\n        self.mutation_factor = 0.7 + 0.3 * (1 - np.linalg.norm(b - c) / (2 * np.sqrt(self.dim)))  # Adaptive mutation factor\n        mutant = a + self.mutation_factor * (b - c)\n        trial = np.where(np.random.rand(self.dim) < self.crossover_prob, mutant, population[idx])\n        return np.clip(trial, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_value = self._evaluate_population(population, func)\n\n        global_best_idx = np.argmin(personal_best_value)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_value[global_best_idx]\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            self.crossover_prob = 0.6 + 0.2 * (1 - evaluations/self.budget)\n            velocities = self._update_velocity(velocities, population, personal_best, global_best)\n            population += velocities\n            self._apply_bounds(population)\n\n            new_population_value = self._evaluate_population(population, func)\n            evaluations += self.population_size\n\n            for i in range(self.population_size):\n                if new_population_value[i] < personal_best_value[i]:\n                    personal_best[i] = population[i]\n                    personal_best_value[i] = new_population_value[i]\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                trial = self._differential_mutation(population, i)\n                trial_value = func(trial)\n                if trial_value < personal_best_value[i]:\n                    evaluations += 1\n                    population[i] = trial\n                    personal_best[i] = trial\n                    personal_best_value[i] = trial_value\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n        return global_best", "name": "OAHPE", "description": "Optimized OAHPE by refining memory operations and enhancing adaptive parameters for accelerated convergence.", "configspace": "", "generation": 89, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0324ec16-47b3-46f3-b27b-3f81751e79c3", "metadata": {"aucs": [0.8702528635367375, 0.8705075273512579, 0.8616338725107104, 0.875645122099232, 0.8728979790106592, 0.8631077921600713, 0.8581323846911456, 0.8642353759829109, 0.8684862952849295, 0.691037526669874, 0.5339067003619554, 9.999999999998899e-05, 0.6941274874561698, 0.7142044527546305, 0.7200040264601056, 0.6738224611614424, 0.7344925900688823, 0.6897440236491045, 0.1418153722232992, 0.10846911562754591, 0.12277794311662948, 0.12971358653316, 0.17984112841156763, 0.5456933902771317, 0.11379538359915697, 0.1769248798352595, 0.11486913263890797, 0.10634538894543166, 0.11541986125435466, 0.10967515272917083, 0.12085317525370576, 0.10936703175618001, 0.11156900526100577, 0.13920459548676645, 0.1396901848182226, 0.15564739374828573, 0.966942901557619, 0.97616780799158, 0.9746813021464993, 0.9508323144164261, 0.968692405194026, 0.9541294716218044, 0.9778834822484883, 0.9601547528369845, 0.9623492414376636, 0.6887719442401743, 0.6745291545122658, 0.6866039911629285, 0.6942396524241754, 0.7197049582249316, 0.7265084405132611, 0.7077321703922461, 0.6791629164026431, 0.6840821329046644, 0.8696829976348277, 0.38150426010030336, 0.22544696618395843, 0.27774672505760123, 0.2791031026527193, 0.21366315299956629, 0.21788212637080207, 0.8983893141620884, 0.32590918597274965, 0.21369864952687845, 0.1253303801975546, 0.17313615898922585, 0.11086421550442516, 0.17737964223188407, 0.2048967267484647, 0.19697609367561086, 0.13413899455437728, 0.22239358147804222, 0.13102917719804685, 0.16630526076322094, 0.19197304189428033, 0.20886554860193196, 0.2350041055358688, 0.20776091375133054, 0.12568429571034156, 0.13533274261684491, 0.20963992486646765, 0.10717882792532041, 0.014744650837168805, 0.07964058680896902, 0.055081182920796, 9.999999999998899e-05, 0.013801549967721982, 0.00019219297400374646, 0.06806429101611833, 0.026147737902854296, 0.12028133746118908, 0.05563592983936594, 0.04938774435697746, 0.038144672442057215, 0.031974816431667885, 0.024994704793318667, 0.06950411273007595, 0.08734071680481281, 0.042682494516432246, 0.09897841513156569, 0.13488825384880088, 0.1721371959395105, 0.26352979755653627, 0.2347943226293162, 0.08253683015570135, 0.13195220750947012, 0.09580928969987668, 0.18385771466584955, 0.06304908458784098, 0.06405266776974006, 0.2848092830415656, 0.09613696553318007, 0.27565376527797947, 0.1320054578931431, 0.056474263828603766, 0.048781444513650074, 0.0828397071706668, 0.5545481382751856, 0.5600884944653572, 0.5725907365051012, 0.5666813417468817, 0.5715587446745052, 0.5758540385356621, 0.573019538459834, 0.6133804520354518, 0.5786237856322488, 0.13810423412628847, 0.10428281762553993, 0.0775551867227996, 0.09340964082827796, 0.1079447222492036, 0.17827277967393862, 0.13890451647582835, 0.08810539469263279, 0.06723409671849445, 0.47671062500451744, 0.14575373994910878, 0.1647058860777233, 0.24558022621804843, 0.37597884194570574, 0.22067638123723632, 0.2220176212883046, 0.3367981280304395, 0.2701704604829015, 0.2088262062347841, 0.5261425173265439, 0.29012460107196447, 0.3613494081730333, 0.26116669560519123, 0.337205282794276, 0.24802468691921842, 0.3554784735499168, 0.6571049294931619, 0.27993697273025586, 0.2059510480415293, 0.2844093700859105, 0.3212225102097803, 0.1893788086939251, 0.2860533736702491, 0.2718187877447189, 0.32382475566841606, 0.22107239108566645, 0.2717992177544204, 0.16424281647939587, 0.22922041135284876, 0.21190743930914036, 0.2429186554754601, 0.19215814495213968, 0.21233406996812199, 0.21613745237326354, 0.23475296379053778, 0.20982822445602878, 0.20623099017004487, 0.2240223953425844, 0.22952794887574723, 0.21625560278697575, 0.2510516264359861, 0.2478391142547386, 0.21865804283768253, 0.1800751899817875, 0.16419261237589344, 0.8172969583163242, 0.15382719704651282, 0.910220170036147, 0.20039440017964605, 0.19952942740090174, 0.1424688071765179, 0.1645707454557993, 0.9009405960410137, 0.7893373347479191, 0.21156378201475112, 0.20898470307931083, 0.2104298639713924, 0.6427266292909175, 0.15472846837522447, 0.4809354762193151, 0.21014995633395028, 0.7762885542231943, 0.1900758993971844, 0.19354906826081375, 0.21709388699879417, 0.19540418425881045, 0.19297051551430977, 0.19511939774914788, 0.2017976199824416, 0.2101603147058947, 0.20306504312204277, 0.09169284368434094, 0.10019127852633936, 0.07962681999560206, 0.09799949325075263, 0.09184855130179748, 0.0878191638438569, 0.087514855482836, 0.08296642440479096, 0.10109166749901399]}, "mutation_prompt": null}
{"id": "9b84161b-4206-41f2-8db5-9bf67fd6cfda", "solution": "import numpy as np\n\nclass OAHPE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.c1 = 1.4\n        self.c2 = 1.6\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.7\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _evaluate_population(self, population, func):\n        return np.array([func(ind) for ind in population])\n\n    def _update_velocity(self, velocities, population, personal_best, global_best):\n        r1, r2 = np.random.rand(2, self.population_size, self.dim)\n        cognitive = self.c1 * r1 * (personal_best - population)\n        social = self.c2 * r2 * (global_best - population)\n        return velocities * 0.4 + cognitive + social * 0.85\n\n    def _apply_bounds(self, population):\n        np.clip(population, self.lower_bound, self.upper_bound, out=population)\n\n    def _differential_mutation(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = population[indices]\n        self.mutation_factor = 0.7 + 0.3 * (1 - np.linalg.norm(b - c) / (2 * np.sqrt(self.dim)))  # Adaptive mutation factor\n        mutant = a + self.mutation_factor * (b - c)\n        trial = np.where(np.random.rand(self.dim) < self.crossover_prob, mutant, population[idx])\n        return np.clip(trial, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_value = self._evaluate_population(population, func)\n\n        global_best_idx = np.argmin(personal_best_value)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_value[global_best_idx]\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            self.crossover_prob = 0.6 + 0.2 * (1 - evaluations/self.budget)\n            velocities = self._update_velocity(velocities, population, personal_best, global_best)\n            population += velocities\n            self._apply_bounds(population)\n\n            new_population_value = self._evaluate_population(population, func)\n            evaluations += self.population_size\n\n            for i in range(self.population_size):\n                if new_population_value[i] < personal_best_value[i]:\n                    personal_best[i] = population[i]\n                    personal_best_value[i] = new_population_value[i]\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                trial = self._differential_mutation(population, i)\n                trial_value = func(trial)\n                if trial_value < personal_best_value[i]:\n                    evaluations += 1\n                    population[i] = trial\n                    personal_best[i] = trial\n                    personal_best_value[i] = trial_value\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n        return global_best", "name": "OAHPE", "description": "Optimized OAHPE by refining memory operations and enhancing adaptive parameters for accelerated convergence.", "configspace": "", "generation": 89, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0324ec16-47b3-46f3-b27b-3f81751e79c3", "metadata": {"aucs": [0.8702528635367375, 0.8705075273512579, 0.8616338725107104, 0.875645122099232, 0.8728979790106592, 0.8631077921600713, 0.8581323846911456, 0.8642353759829109, 0.8684862952849295, 0.691037526669874, 0.5339067003619554, 9.999999999998899e-05, 0.6941274874561698, 0.7142044527546305, 0.7200040264601056, 0.6738224611614424, 0.7344925900688823, 0.6897440236491045, 0.1418153722232992, 0.10846911562754591, 0.12277794311662948, 0.12971358653316, 0.17984112841156763, 0.5456933902771317, 0.11379538359915697, 0.1769248798352595, 0.11486913263890797, 0.10634538894543166, 0.11541986125435466, 0.10967515272917083, 0.12085317525370576, 0.10936703175618001, 0.11156900526100577, 0.13920459548676645, 0.1396901848182226, 0.15564739374828573, 0.966942901557619, 0.97616780799158, 0.9746813021464993, 0.9508323144164261, 0.968692405194026, 0.9541294716218044, 0.9778834822484883, 0.9601547528369845, 0.9623492414376636, 0.6887719442401743, 0.6745291545122658, 0.6866039911629285, 0.6942396524241754, 0.7197049582249316, 0.7265084405132611, 0.7077321703922461, 0.6791629164026431, 0.6840821329046644, 0.8696829976348277, 0.38150426010030336, 0.22544696618395843, 0.27774672505760123, 0.2791031026527193, 0.21366315299956629, 0.21788212637080207, 0.8983893141620884, 0.32590918597274965, 0.21369864952687845, 0.1253303801975546, 0.17313615898922585, 0.11086421550442516, 0.17737964223188407, 0.2048967267484647, 0.19697609367561086, 0.13413899455437728, 0.22239358147804222, 0.13102917719804685, 0.16630526076322094, 0.19197304189428033, 0.20886554860193196, 0.2350041055358688, 0.20776091375133054, 0.12568429571034156, 0.13533274261684491, 0.20963992486646765, 0.10717882792532041, 0.014744650837168805, 0.07964058680896902, 0.055081182920796, 9.999999999998899e-05, 0.013801549967721982, 0.00019219297400374646, 0.06806429101611833, 0.026147737902854296, 0.12028133746118908, 0.05563592983936594, 0.04938774435697746, 0.038144672442057215, 0.031974816431667885, 0.024994704793318667, 0.06950411273007595, 0.08734071680481281, 0.042682494516432246, 0.09897841513156569, 0.13488825384880088, 0.1721371959395105, 0.26352979755653627, 0.2347943226293162, 0.08253683015570135, 0.13195220750947012, 0.09580928969987668, 0.18385771466584955, 0.06304908458784098, 0.06405266776974006, 0.2848092830415656, 0.09613696553318007, 0.27565376527797947, 0.1320054578931431, 0.056474263828603766, 0.048781444513650074, 0.0828397071706668, 0.5545481382751856, 0.5600884944653572, 0.5725907365051012, 0.5666813417468817, 0.5715587446745052, 0.5758540385356621, 0.573019538459834, 0.6133804520354518, 0.5786237856322488, 0.13810423412628847, 0.10428281762553993, 0.0775551867227996, 0.09340964082827796, 0.1079447222492036, 0.17827277967393862, 0.13890451647582835, 0.08810539469263279, 0.06723409671849445, 0.47671062500451744, 0.14575373994910878, 0.1647058860777233, 0.24558022621804843, 0.37597884194570574, 0.22067638123723632, 0.2220176212883046, 0.3367981280304395, 0.2701704604829015, 0.2088262062347841, 0.5261425173265439, 0.29012460107196447, 0.3613494081730333, 0.26116669560519123, 0.337205282794276, 0.24802468691921842, 0.3554784735499168, 0.6571049294931619, 0.27993697273025586, 0.2059510480415293, 0.2844093700859105, 0.3212225102097803, 0.1893788086939251, 0.2860533736702491, 0.2718187877447189, 0.32382475566841606, 0.22107239108566645, 0.2717992177544204, 0.16424281647939587, 0.22922041135284876, 0.21190743930914036, 0.2429186554754601, 0.19215814495213968, 0.21233406996812199, 0.21613745237326354, 0.23475296379053778, 0.20982822445602878, 0.20623099017004487, 0.2240223953425844, 0.22952794887574723, 0.21625560278697575, 0.2510516264359861, 0.2478391142547386, 0.21865804283768253, 0.1800751899817875, 0.16419261237589344, 0.8172969583163242, 0.15382719704651282, 0.910220170036147, 0.20039440017964605, 0.19952942740090174, 0.1424688071765179, 0.1645707454557993, 0.9009405960410137, 0.7893373347479191, 0.21156378201475112, 0.20898470307931083, 0.2104298639713924, 0.6427266292909175, 0.15472846837522447, 0.4809354762193151, 0.21014995633395028, 0.7762885542231943, 0.1900758993971844, 0.19354906826081375, 0.21709388699879417, 0.19540418425881045, 0.19297051551430977, 0.19511939774914788, 0.2017976199824416, 0.2101603147058947, 0.20306504312204277, 0.09169284368434094, 0.10019127852633936, 0.07962681999560206, 0.09799949325075263, 0.09184855130179748, 0.0878191638438569, 0.087514855482836, 0.08296642440479096, 0.10109166749901399]}, "mutation_prompt": null}
{"id": "d03ed375-c8a1-4d35-a1ed-c5603485cdd6", "solution": "import numpy as np\n\nclass OAHPE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.c1 = 1.4\n        self.c2 = 1.6\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.7\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _evaluate_population(self, population, func):\n        return np.array([func(ind) for ind in population])\n\n    def _update_velocity(self, velocities, population, personal_best, global_best):\n        r1, r2 = np.random.rand(2, self.population_size, self.dim)\n        cognitive = self.c1 * r1 * (personal_best - population)\n        social = self.c2 * r2 * (global_best - population)\n        return velocities * 0.4 + cognitive + social * 0.85\n\n    def _apply_bounds(self, population):\n        np.clip(population, self.lower_bound, self.upper_bound, out=population)\n\n    def _differential_mutation(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = population[indices]\n        self.mutation_factor = 0.7 + 0.3 * (1 - np.linalg.norm(b - c) / (2 * np.sqrt(self.dim)))  # Adaptive mutation factor\n        mutant = a + self.mutation_factor * (b - c)\n        trial = np.where(np.random.rand(self.dim) < self.crossover_prob, mutant, population[idx])\n        return np.clip(trial, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_value = self._evaluate_population(population, func)\n\n        global_best_idx = np.argmin(personal_best_value)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_value[global_best_idx]\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            self.crossover_prob = 0.6 + 0.2 * (1 - evaluations/self.budget)\n            velocities = self._update_velocity(velocities, population, personal_best, global_best)\n            population += velocities\n            self._apply_bounds(population)\n\n            new_population_value = self._evaluate_population(population, func)\n            evaluations += self.population_size\n\n            for i in range(self.population_size):\n                if new_population_value[i] < personal_best_value[i]:\n                    personal_best[i] = population[i]\n                    personal_best_value[i] = new_population_value[i]\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                trial = self._differential_mutation(population, i)\n                trial_value = func(trial)\n                if trial_value < personal_best_value[i]:\n                    evaluations += 1\n                    population[i] = trial\n                    personal_best[i] = trial\n                    personal_best_value[i] = trial_value\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n        return global_best", "name": "OAHPE", "description": "Optimized OAHPE by refining memory operations and enhancing adaptive parameters for accelerated convergence.", "configspace": "", "generation": 89, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0324ec16-47b3-46f3-b27b-3f81751e79c3", "metadata": {"aucs": [0.8702528635367375, 0.8705075273512579, 0.8616338725107104, 0.875645122099232, 0.8728979790106592, 0.8631077921600713, 0.8581323846911456, 0.8642353759829109, 0.8684862952849295, 0.691037526669874, 0.5339067003619554, 9.999999999998899e-05, 0.6941274874561698, 0.7142044527546305, 0.7200040264601056, 0.6738224611614424, 0.7344925900688823, 0.6897440236491045, 0.1418153722232992, 0.10846911562754591, 0.12277794311662948, 0.12971358653316, 0.17984112841156763, 0.5456933902771317, 0.11379538359915697, 0.1769248798352595, 0.11486913263890797, 0.10634538894543166, 0.11541986125435466, 0.10967515272917083, 0.12085317525370576, 0.10936703175618001, 0.11156900526100577, 0.13920459548676645, 0.1396901848182226, 0.15564739374828573, 0.966942901557619, 0.97616780799158, 0.9746813021464993, 0.9508323144164261, 0.968692405194026, 0.9541294716218044, 0.9778834822484883, 0.9601547528369845, 0.9623492414376636, 0.6887719442401743, 0.6745291545122658, 0.6866039911629285, 0.6942396524241754, 0.7197049582249316, 0.7265084405132611, 0.7077321703922461, 0.6791629164026431, 0.6840821329046644, 0.8696829976348277, 0.38150426010030336, 0.22544696618395843, 0.27774672505760123, 0.2791031026527193, 0.21366315299956629, 0.21788212637080207, 0.8983893141620884, 0.32590918597274965, 0.21369864952687845, 0.1253303801975546, 0.17313615898922585, 0.11086421550442516, 0.17737964223188407, 0.2048967267484647, 0.19697609367561086, 0.13413899455437728, 0.22239358147804222, 0.13102917719804685, 0.16630526076322094, 0.19197304189428033, 0.20886554860193196, 0.2350041055358688, 0.20776091375133054, 0.12568429571034156, 0.13533274261684491, 0.20963992486646765, 0.10717882792532041, 0.014744650837168805, 0.07964058680896902, 0.055081182920796, 9.999999999998899e-05, 0.013801549967721982, 0.00019219297400374646, 0.06806429101611833, 0.026147737902854296, 0.12028133746118908, 0.05563592983936594, 0.04938774435697746, 0.038144672442057215, 0.031974816431667885, 0.024994704793318667, 0.06950411273007595, 0.08734071680481281, 0.042682494516432246, 0.09897841513156569, 0.13488825384880088, 0.1721371959395105, 0.26352979755653627, 0.2347943226293162, 0.08253683015570135, 0.13195220750947012, 0.09580928969987668, 0.18385771466584955, 0.06304908458784098, 0.06405266776974006, 0.2848092830415656, 0.09613696553318007, 0.27565376527797947, 0.1320054578931431, 0.056474263828603766, 0.048781444513650074, 0.0828397071706668, 0.5545481382751856, 0.5600884944653572, 0.5725907365051012, 0.5666813417468817, 0.5715587446745052, 0.5758540385356621, 0.573019538459834, 0.6133804520354518, 0.5786237856322488, 0.13810423412628847, 0.10428281762553993, 0.0775551867227996, 0.09340964082827796, 0.1079447222492036, 0.17827277967393862, 0.13890451647582835, 0.08810539469263279, 0.06723409671849445, 0.47671062500451744, 0.14575373994910878, 0.1647058860777233, 0.24558022621804843, 0.37597884194570574, 0.22067638123723632, 0.2220176212883046, 0.3367981280304395, 0.2701704604829015, 0.2088262062347841, 0.5261425173265439, 0.29012460107196447, 0.3613494081730333, 0.26116669560519123, 0.337205282794276, 0.24802468691921842, 0.3554784735499168, 0.6571049294931619, 0.27993697273025586, 0.2059510480415293, 0.2844093700859105, 0.3212225102097803, 0.1893788086939251, 0.2860533736702491, 0.2718187877447189, 0.32382475566841606, 0.22107239108566645, 0.2717992177544204, 0.16424281647939587, 0.22922041135284876, 0.21190743930914036, 0.2429186554754601, 0.19215814495213968, 0.21233406996812199, 0.21613745237326354, 0.23475296379053778, 0.20982822445602878, 0.20623099017004487, 0.2240223953425844, 0.22952794887574723, 0.21625560278697575, 0.2510516264359861, 0.2478391142547386, 0.21865804283768253, 0.1800751899817875, 0.16419261237589344, 0.8172969583163242, 0.15382719704651282, 0.910220170036147, 0.20039440017964605, 0.19952942740090174, 0.1424688071765179, 0.1645707454557993, 0.9009405960410137, 0.7893373347479191, 0.21156378201475112, 0.20898470307931083, 0.2104298639713924, 0.6427266292909175, 0.15472846837522447, 0.4809354762193151, 0.21014995633395028, 0.7762885542231943, 0.1900758993971844, 0.19354906826081375, 0.21709388699879417, 0.19540418425881045, 0.19297051551430977, 0.19511939774914788, 0.2017976199824416, 0.2101603147058947, 0.20306504312204277, 0.09169284368434094, 0.10019127852633936, 0.07962681999560206, 0.09799949325075263, 0.09184855130179748, 0.0878191638438569, 0.087514855482836, 0.08296642440479096, 0.10109166749901399]}, "mutation_prompt": null}
{"id": "f691b312-46df-4e41-bde0-18bf67050764", "solution": "import numpy as np\n\nclass OAHPE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.c1 = 1.4\n        self.c2 = 1.6\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.7\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _evaluate_population(self, population, func):\n        return np.array([func(ind) for ind in population])\n\n    def _update_velocity(self, velocities, population, personal_best, global_best):\n        r1, r2 = np.random.rand(2, self.population_size, self.dim)\n        cognitive = self.c1 * r1 * (personal_best - population)\n        social = self.c2 * r2 * (global_best - population)\n        return velocities * 0.4 + cognitive + social * 0.85\n\n    def _apply_bounds(self, population):\n        np.clip(population, self.lower_bound, self.upper_bound, out=population)\n\n    def _differential_mutation(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = population[indices]\n        self.mutation_factor = 0.7 + 0.3 * (1 - np.linalg.norm(b - c) / (2 * np.sqrt(self.dim)))  # Adaptive mutation factor\n        mutant = a + self.mutation_factor * (b - c)\n        trial = np.where(np.random.rand(self.dim) < self.crossover_prob, mutant, population[idx])\n        return np.clip(trial, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_value = self._evaluate_population(population, func)\n\n        global_best_idx = np.argmin(personal_best_value)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_value[global_best_idx]\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            self.crossover_prob = 0.6 + 0.2 * (1 - evaluations/self.budget)\n            velocities = self._update_velocity(velocities, population, personal_best, global_best)\n            population += velocities\n            self._apply_bounds(population)\n\n            new_population_value = self._evaluate_population(population, func)\n            evaluations += self.population_size\n\n            for i in range(self.population_size):\n                if new_population_value[i] < personal_best_value[i]:\n                    personal_best[i] = population[i]\n                    personal_best_value[i] = new_population_value[i]\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                trial = self._differential_mutation(population, i)\n                trial_value = func(trial)\n                if trial_value < personal_best_value[i]:\n                    evaluations += 1\n                    population[i] = trial\n                    personal_best[i] = trial\n                    personal_best_value[i] = trial_value\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n        return global_best", "name": "OAHPE", "description": "Optimized OAHPE by refining memory operations and enhancing adaptive parameters for accelerated convergence.", "configspace": "", "generation": 89, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0324ec16-47b3-46f3-b27b-3f81751e79c3", "metadata": {"aucs": [0.8702528635367375, 0.8705075273512579, 0.8616338725107104, 0.875645122099232, 0.8728979790106592, 0.8631077921600713, 0.8581323846911456, 0.8642353759829109, 0.8684862952849295, 0.691037526669874, 0.5339067003619554, 9.999999999998899e-05, 0.6941274874561698, 0.7142044527546305, 0.7200040264601056, 0.6738224611614424, 0.7344925900688823, 0.6897440236491045, 0.1418153722232992, 0.10846911562754591, 0.12277794311662948, 0.12971358653316, 0.17984112841156763, 0.5456933902771317, 0.11379538359915697, 0.1769248798352595, 0.11486913263890797, 0.10634538894543166, 0.11541986125435466, 0.10967515272917083, 0.12085317525370576, 0.10936703175618001, 0.11156900526100577, 0.13920459548676645, 0.1396901848182226, 0.15564739374828573, 0.966942901557619, 0.97616780799158, 0.9746813021464993, 0.9508323144164261, 0.968692405194026, 0.9541294716218044, 0.9778834822484883, 0.9601547528369845, 0.9623492414376636, 0.6887719442401743, 0.6745291545122658, 0.6866039911629285, 0.6942396524241754, 0.7197049582249316, 0.7265084405132611, 0.7077321703922461, 0.6791629164026431, 0.6840821329046644, 0.8696829976348277, 0.38150426010030336, 0.22544696618395843, 0.27774672505760123, 0.2791031026527193, 0.21366315299956629, 0.21788212637080207, 0.8983893141620884, 0.32590918597274965, 0.21369864952687845, 0.1253303801975546, 0.17313615898922585, 0.11086421550442516, 0.17737964223188407, 0.2048967267484647, 0.19697609367561086, 0.13413899455437728, 0.22239358147804222, 0.13102917719804685, 0.16630526076322094, 0.19197304189428033, 0.20886554860193196, 0.2350041055358688, 0.20776091375133054, 0.12568429571034156, 0.13533274261684491, 0.20963992486646765, 0.10717882792532041, 0.014744650837168805, 0.07964058680896902, 0.055081182920796, 9.999999999998899e-05, 0.013801549967721982, 0.00019219297400374646, 0.06806429101611833, 0.026147737902854296, 0.12028133746118908, 0.05563592983936594, 0.04938774435697746, 0.038144672442057215, 0.031974816431667885, 0.024994704793318667, 0.06950411273007595, 0.08734071680481281, 0.042682494516432246, 0.09897841513156569, 0.13488825384880088, 0.1721371959395105, 0.26352979755653627, 0.2347943226293162, 0.08253683015570135, 0.13195220750947012, 0.09580928969987668, 0.18385771466584955, 0.06304908458784098, 0.06405266776974006, 0.2848092830415656, 0.09613696553318007, 0.27565376527797947, 0.1320054578931431, 0.056474263828603766, 0.048781444513650074, 0.0828397071706668, 0.5545481382751856, 0.5600884944653572, 0.5725907365051012, 0.5666813417468817, 0.5715587446745052, 0.5758540385356621, 0.573019538459834, 0.6133804520354518, 0.5786237856322488, 0.13810423412628847, 0.10428281762553993, 0.0775551867227996, 0.09340964082827796, 0.1079447222492036, 0.17827277967393862, 0.13890451647582835, 0.08810539469263279, 0.06723409671849445, 0.47671062500451744, 0.14575373994910878, 0.1647058860777233, 0.24558022621804843, 0.37597884194570574, 0.22067638123723632, 0.2220176212883046, 0.3367981280304395, 0.2701704604829015, 0.2088262062347841, 0.5261425173265439, 0.29012460107196447, 0.3613494081730333, 0.26116669560519123, 0.337205282794276, 0.24802468691921842, 0.3554784735499168, 0.6571049294931619, 0.27993697273025586, 0.2059510480415293, 0.2844093700859105, 0.3212225102097803, 0.1893788086939251, 0.2860533736702491, 0.2718187877447189, 0.32382475566841606, 0.22107239108566645, 0.2717992177544204, 0.16424281647939587, 0.22922041135284876, 0.21190743930914036, 0.2429186554754601, 0.19215814495213968, 0.21233406996812199, 0.21613745237326354, 0.23475296379053778, 0.20982822445602878, 0.20623099017004487, 0.2240223953425844, 0.22952794887574723, 0.21625560278697575, 0.2510516264359861, 0.2478391142547386, 0.21865804283768253, 0.1800751899817875, 0.16419261237589344, 0.8172969583163242, 0.15382719704651282, 0.910220170036147, 0.20039440017964605, 0.19952942740090174, 0.1424688071765179, 0.1645707454557993, 0.9009405960410137, 0.7893373347479191, 0.21156378201475112, 0.20898470307931083, 0.2104298639713924, 0.6427266292909175, 0.15472846837522447, 0.4809354762193151, 0.21014995633395028, 0.7762885542231943, 0.1900758993971844, 0.19354906826081375, 0.21709388699879417, 0.19540418425881045, 0.19297051551430977, 0.19511939774914788, 0.2017976199824416, 0.2101603147058947, 0.20306504312204277, 0.09169284368434094, 0.10019127852633936, 0.07962681999560206, 0.09799949325075263, 0.09184855130179748, 0.0878191638438569, 0.087514855482836, 0.08296642440479096, 0.10109166749901399]}, "mutation_prompt": null}
{"id": "c3d1a49d-b908-41d1-b642-22af6d7f8f4b", "solution": "import numpy as np\n\nclass OAHPE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.c1 = 1.4\n        self.c2 = 1.6\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.7\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _evaluate_population(self, population, func):\n        return np.array([func(ind) for ind in population])\n\n    def _update_velocity(self, velocities, population, personal_best, global_best):\n        r1, r2 = np.random.rand(2, self.population_size, self.dim)\n        cognitive = self.c1 * r1 * (personal_best - population)\n        social = self.c2 * r2 * (global_best - population)\n        return velocities * 0.4 + cognitive + social * 0.85\n\n    def _apply_bounds(self, population):\n        np.clip(population, self.lower_bound, self.upper_bound, out=population)\n\n    def _differential_mutation(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = population[indices]\n        self.mutation_factor = 0.7 + 0.3 * (1 - np.linalg.norm(b - c) / (2 * np.sqrt(self.dim)))  # Adaptive mutation factor\n        mutant = a + self.mutation_factor * (b - c)\n        trial = np.where(np.random.rand(self.dim) < self.crossover_prob, mutant, population[idx])\n        return np.clip(trial, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_value = self._evaluate_population(population, func)\n\n        global_best_idx = np.argmin(personal_best_value)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_value[global_best_idx]\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            self.crossover_prob = 0.6 + 0.2 * (1 - evaluations/self.budget)\n            velocities = self._update_velocity(velocities, population, personal_best, global_best)\n            population += velocities\n            self._apply_bounds(population)\n\n            new_population_value = self._evaluate_population(population, func)\n            evaluations += self.population_size\n\n            for i in range(self.population_size):\n                if new_population_value[i] < personal_best_value[i]:\n                    personal_best[i] = population[i]\n                    personal_best_value[i] = new_population_value[i]\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                trial = self._differential_mutation(population, i)\n                trial_value = func(trial)\n                if trial_value < personal_best_value[i]:\n                    evaluations += 1\n                    population[i] = trial\n                    personal_best[i] = trial\n                    personal_best_value[i] = trial_value\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n        return global_best", "name": "OAHPE", "description": "Optimized OAHPE by refining memory operations and enhancing adaptive parameters for accelerated convergence.", "configspace": "", "generation": 89, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0324ec16-47b3-46f3-b27b-3f81751e79c3", "metadata": {"aucs": [0.8702528635367375, 0.8705075273512579, 0.8616338725107104, 0.875645122099232, 0.8728979790106592, 0.8631077921600713, 0.8581323846911456, 0.8642353759829109, 0.8684862952849295, 0.691037526669874, 0.5339067003619554, 9.999999999998899e-05, 0.6941274874561698, 0.7142044527546305, 0.7200040264601056, 0.6738224611614424, 0.7344925900688823, 0.6897440236491045, 0.1418153722232992, 0.10846911562754591, 0.12277794311662948, 0.12971358653316, 0.17984112841156763, 0.5456933902771317, 0.11379538359915697, 0.1769248798352595, 0.11486913263890797, 0.10634538894543166, 0.11541986125435466, 0.10967515272917083, 0.12085317525370576, 0.10936703175618001, 0.11156900526100577, 0.13920459548676645, 0.1396901848182226, 0.15564739374828573, 0.966942901557619, 0.97616780799158, 0.9746813021464993, 0.9508323144164261, 0.968692405194026, 0.9541294716218044, 0.9778834822484883, 0.9601547528369845, 0.9623492414376636, 0.6887719442401743, 0.6745291545122658, 0.6866039911629285, 0.6942396524241754, 0.7197049582249316, 0.7265084405132611, 0.7077321703922461, 0.6791629164026431, 0.6840821329046644, 0.8696829976348277, 0.38150426010030336, 0.22544696618395843, 0.27774672505760123, 0.2791031026527193, 0.21366315299956629, 0.21788212637080207, 0.8983893141620884, 0.32590918597274965, 0.21369864952687845, 0.1253303801975546, 0.17313615898922585, 0.11086421550442516, 0.17737964223188407, 0.2048967267484647, 0.19697609367561086, 0.13413899455437728, 0.22239358147804222, 0.13102917719804685, 0.16630526076322094, 0.19197304189428033, 0.20886554860193196, 0.2350041055358688, 0.20776091375133054, 0.12568429571034156, 0.13533274261684491, 0.20963992486646765, 0.10717882792532041, 0.014744650837168805, 0.07964058680896902, 0.055081182920796, 9.999999999998899e-05, 0.013801549967721982, 0.00019219297400374646, 0.06806429101611833, 0.026147737902854296, 0.12028133746118908, 0.05563592983936594, 0.04938774435697746, 0.038144672442057215, 0.031974816431667885, 0.024994704793318667, 0.06950411273007595, 0.08734071680481281, 0.042682494516432246, 0.09897841513156569, 0.13488825384880088, 0.1721371959395105, 0.26352979755653627, 0.2347943226293162, 0.08253683015570135, 0.13195220750947012, 0.09580928969987668, 0.18385771466584955, 0.06304908458784098, 0.06405266776974006, 0.2848092830415656, 0.09613696553318007, 0.27565376527797947, 0.1320054578931431, 0.056474263828603766, 0.048781444513650074, 0.0828397071706668, 0.5545481382751856, 0.5600884944653572, 0.5725907365051012, 0.5666813417468817, 0.5715587446745052, 0.5758540385356621, 0.573019538459834, 0.6133804520354518, 0.5786237856322488, 0.13810423412628847, 0.10428281762553993, 0.0775551867227996, 0.09340964082827796, 0.1079447222492036, 0.17827277967393862, 0.13890451647582835, 0.08810539469263279, 0.06723409671849445, 0.47671062500451744, 0.14575373994910878, 0.1647058860777233, 0.24558022621804843, 0.37597884194570574, 0.22067638123723632, 0.2220176212883046, 0.3367981280304395, 0.2701704604829015, 0.2088262062347841, 0.5261425173265439, 0.29012460107196447, 0.3613494081730333, 0.26116669560519123, 0.337205282794276, 0.24802468691921842, 0.3554784735499168, 0.6571049294931619, 0.27993697273025586, 0.2059510480415293, 0.2844093700859105, 0.3212225102097803, 0.1893788086939251, 0.2860533736702491, 0.2718187877447189, 0.32382475566841606, 0.22107239108566645, 0.2717992177544204, 0.16424281647939587, 0.22922041135284876, 0.21190743930914036, 0.2429186554754601, 0.19215814495213968, 0.21233406996812199, 0.21613745237326354, 0.23475296379053778, 0.20982822445602878, 0.20623099017004487, 0.2240223953425844, 0.22952794887574723, 0.21625560278697575, 0.2510516264359861, 0.2478391142547386, 0.21865804283768253, 0.1800751899817875, 0.16419261237589344, 0.8172969583163242, 0.15382719704651282, 0.910220170036147, 0.20039440017964605, 0.19952942740090174, 0.1424688071765179, 0.1645707454557993, 0.9009405960410137, 0.7893373347479191, 0.21156378201475112, 0.20898470307931083, 0.2104298639713924, 0.6427266292909175, 0.15472846837522447, 0.4809354762193151, 0.21014995633395028, 0.7762885542231943, 0.1900758993971844, 0.19354906826081375, 0.21709388699879417, 0.19540418425881045, 0.19297051551430977, 0.19511939774914788, 0.2017976199824416, 0.2101603147058947, 0.20306504312204277, 0.09169284368434094, 0.10019127852633936, 0.07962681999560206, 0.09799949325075263, 0.09184855130179748, 0.0878191638438569, 0.087514855482836, 0.08296642440479096, 0.10109166749901399]}, "mutation_prompt": null}
{"id": "d4c8c673-9fe1-4f11-8338-598abd902ab5", "solution": "import numpy as np\n\nclass OAHPE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.c1 = 1.3  # Slightly adjusted parameter for faster convergence\n        self.c2 = 1.7\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.7\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _evaluate_population(self, population, func):\n        return np.array([func(ind) for ind in population])\n\n    def _update_velocity(self, velocities, population, personal_best, global_best):\n        r1, r2 = np.random.rand(2, self.population_size, self.dim)\n        cognitive = self.c1 * r1 * (personal_best - population)\n        social = self.c2 * r2 * (global_best - population)\n        inertia_weight = 0.5 + (0.5 * (self.budget - self.population_size) / self.budget)  # Dynamically adjusted inertia\n        return velocities * inertia_weight + cognitive + social * 0.85\n\n    def _apply_bounds(self, population):\n        np.clip(population, self.lower_bound, self.upper_bound, out=population)\n\n    def _differential_mutation(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = population[indices]\n        self.mutation_factor = 0.7 + 0.3 * (1 - np.linalg.norm(b - c) / (2 * np.sqrt(self.dim)))  # Adaptive mutation factor\n        mutant = a + self.mutation_factor * (b - c)\n        trial = np.where(np.random.rand(self.dim) < self.crossover_prob, mutant, population[idx])\n        return np.clip(trial, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_value = self._evaluate_population(population, func)\n\n        global_best_idx = np.argmin(personal_best_value)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_value[global_best_idx]\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            self.crossover_prob = 0.6 + 0.2 * (1 - evaluations/self.budget)\n            velocities = self._update_velocity(velocities, population, personal_best, global_best)\n            population += velocities\n            self._apply_bounds(population)\n\n            new_population_value = self._evaluate_population(population, func)\n            evaluations += self.population_size\n\n            for i in range(self.population_size):\n                if new_population_value[i] < personal_best_value[i]:\n                    personal_best[i] = population[i]\n                    personal_best_value[i] = new_population_value[i]\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                trial = self._differential_mutation(population, i)\n                trial_value = func(trial)\n                if trial_value < personal_best_value[i]:\n                    evaluations += 1\n                    population[i] = trial\n                    personal_best[i] = trial\n                    personal_best_value[i] = trial_value\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n        return global_best", "name": "OAHPE", "description": "OAHPE++: Enhanced OAHPE with refined velocity update strategy for improved convergence efficiency.", "configspace": "", "generation": 96, "fitness": 0.14913778105201783, "feedback": "The algorithm OAHPE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.19.", "error": "", "parent_id": "0324ec16-47b3-46f3-b27b-3f81751e79c3", "metadata": {"aucs": [0.21218000372340962, 0.2283216101549611, 0.26689176743397247, 0.3002434779750647, 0.26977672374614137, 0.2730705932452868, 0.30617924138461017, 0.31543149136310455, 0.2577699528596522, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07899560804367889, 0.08881587541245572, 0.05783083256498356, 0.05863480927026399, 0.05447955657245929, 0.07203823851826563, 0.05875903793430848, 0.06293778044015141, 0.11352996835143891, 0.050974340797808826, 0.045507990187469316, 0.05101928699547531, 0.04481867621269198, 0.06403019399075238, 0.038740585375134806, 0.0547112189520782, 0.06485004979778097, 0.05786348340150693, 0.9766386589073273, 0.9771588848456639, 0.979082750871926, 0.968551680636384, 0.9768201877354514, 0.9679946800513723, 0.9786094476766994, 0.975272870493206, 0.9743503692282832, 0.14552838552364666, 0.12443492910672305, 0.1225653531176586, 0.114996907779361, 0.11790161486681539, 0.12780829136419947, 0.09550703953583528, 0.08614454154959073, 0.11555290772252846, 0.18948939621904348, 0.18771196652593514, 0.25073293751924874, 0.15904938103232813, 0.1752032062321136, 0.17735089756113354, 0.11766377301984032, 0.16399724893701317, 0.16372923804718664, 0.06235718415683311, 0.023384173278367615, 0.03255257180503868, 0.04639594284774362, 0.06577691446283329, 9.999999999998899e-05, 0.04278509368999461, 0.03602558678665879, 0.0821811438173754, 0.019669782277437098, 0.027887723182339896, 0.03505685356543731, 0.01640692032325919, 0.04298941476441742, 0.04802640079077103, 0.02444580737783908, 0.028410062903957756, 0.025169556390668535, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10671731399265061, 0.05318915049833428, 0.09517129563344118, 0.05659266728317813, 0.012386910240635318, 9.999999999998899e-05, 0.03662824622527572, 0.07173610121881702, 0.024796050169194284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0162987421436952, 0.0204837927456043, 0.028555742137808426, 0.03467630753600004, 0.014978223532157386, 0.05720029929570303, 0.03297998389044954, 0.04151583378168655, 0.02504262016757397, 0.3130264667986512, 0.30278654637592006, 0.26805675568842535, 0.20503379919573628, 0.2140278783042341, 0.20363541616796765, 0.2787540241077353, 0.25706970213179225, 0.27084030790053426, 0.07528723562756989, 0.05418882591295804, 0.07092523993801625, 0.06647367518546232, 0.066338912703095, 0.0715870313846323, 0.059136327889584006, 0.054081670918007196, 0.06213466297852266, 0.14203809408518975, 0.15204574843935337, 0.13763436505636395, 0.18153705544990673, 0.16351431997893529, 0.14207352982694488, 0.17279501572200207, 0.1482444311990737, 0.17056436175047673, 0.21281741835879053, 0.21054366258709623, 0.19985278559364184, 0.18594127101819558, 0.19114036974114146, 0.16969312720935903, 0.220643827453882, 0.2116974189362012, 0.18826050349760803, 0.15507774915871653, 0.1372282498964641, 0.1512887761485877, 0.14766367547459758, 0.13369153857901606, 0.1439085084898707, 0.14099561189726662, 0.1500978256528921, 0.13142418064485806, 0.15767507612335574, 0.1333095069761352, 0.1752124014367581, 0.16753054906796028, 0.15644043591448276, 0.1604794931859317, 0.1748282310266719, 0.16914095421241182, 0.18975825446319616, 0.1595645628135791, 0.1563942640718713, 0.16035533109070343, 0.16404639959936407, 0.15865642547595127, 0.17116136246904456, 0.1583666832419378, 0.15731349905049663, 0.15785084620992007, 0.15371761645937054, 0.15971049170763485, 0.15093614827020918, 0.21806053047888319, 0.17209859828199392, 0.18307617202418658, 0.12133417725366957, 0.1968245843973856, 0.25268700956523127, 0.3456420734110949, 0.1793822469416576, 0.16448253848736327, 0.17729663644181415, 0.20491607548396018, 0.11936419554473521, 0.19087701203897045, 0.13875166458409116, 0.1817953275571419, 0.17688815659755586, 0.19689021672613582, 0.17657187696999865, 0.22047237256717067, 0.19198449870172196, 0.1856579788469267, 0.1742675539264359, 0.1823920948254656, 0.1982310145903945, 0.06562711230084728, 0.05074197199614705, 0.0686116723878557, 0.05468443338345752, 0.060800832030029395, 0.05962274457090011, 0.0587223280557706, 0.05535222677987117, 0.06178599184012712]}, "mutation_prompt": null}
{"id": "0ff5d9cb-38b3-4f57-8b0b-4a0bcd9f34ee", "solution": "import numpy as np\n\nclass OAHPE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.c1 = 1.4\n        self.c2 = 1.6\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.7\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _evaluate_population(self, population, func):\n        return np.array([func(ind) for ind in population])\n\n    def _update_velocity(self, velocities, population, personal_best, global_best):\n        r1, r2 = np.random.rand(2, self.population_size, self.dim)\n        cognitive = self.c1 * r1 * (personal_best - population)\n        social = self.c2 * r2 * (global_best - population)\n        return velocities * 0.4 + cognitive + social * 0.85\n\n    def _apply_bounds(self, population):\n        np.clip(population, self.lower_bound, self.upper_bound, out=population)\n\n    def _differential_mutation(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = population[indices]\n        self.mutation_factor = 0.7 + 0.3 * (1 - np.linalg.norm(b - c) / (2 * np.sqrt(self.dim)))  # Adaptive mutation factor\n        mutant = a + self.mutation_factor * (b - c)\n        trial = np.where(np.random.rand(self.dim) < self.crossover_prob, mutant, population[idx])\n        return np.clip(trial, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_value = self._evaluate_population(population, func)\n\n        global_best_idx = np.argmin(personal_best_value)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_value[global_best_idx]\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            self.crossover_prob = 0.6 + 0.2 * (1 - evaluations/self.budget)\n            velocities = self._update_velocity(velocities, population, personal_best, global_best)\n            population += velocities\n            self._apply_bounds(population)\n\n            new_population_value = self._evaluate_population(population, func)\n            evaluations += self.population_size\n\n            for i in range(self.population_size):\n                if new_population_value[i] < personal_best_value[i]:\n                    personal_best[i] = population[i]\n                    personal_best_value[i] = new_population_value[i]\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                trial = self._differential_mutation(population, i)\n                trial_value = func(trial)\n                if trial_value < personal_best_value[i]:\n                    evaluations += 1\n                    population[i] = trial\n                    personal_best[i] = trial\n                    personal_best_value[i] = trial_value\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n        return global_best", "name": "OAHPE", "description": "Optimized OAHPE by refining memory operations and enhancing adaptive parameters for accelerated convergence.", "configspace": "", "generation": 89, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0324ec16-47b3-46f3-b27b-3f81751e79c3", "metadata": {"aucs": [0.8702528635367375, 0.8705075273512579, 0.8616338725107104, 0.875645122099232, 0.8728979790106592, 0.8631077921600713, 0.8581323846911456, 0.8642353759829109, 0.8684862952849295, 0.691037526669874, 0.5339067003619554, 9.999999999998899e-05, 0.6941274874561698, 0.7142044527546305, 0.7200040264601056, 0.6738224611614424, 0.7344925900688823, 0.6897440236491045, 0.1418153722232992, 0.10846911562754591, 0.12277794311662948, 0.12971358653316, 0.17984112841156763, 0.5456933902771317, 0.11379538359915697, 0.1769248798352595, 0.11486913263890797, 0.10634538894543166, 0.11541986125435466, 0.10967515272917083, 0.12085317525370576, 0.10936703175618001, 0.11156900526100577, 0.13920459548676645, 0.1396901848182226, 0.15564739374828573, 0.966942901557619, 0.97616780799158, 0.9746813021464993, 0.9508323144164261, 0.968692405194026, 0.9541294716218044, 0.9778834822484883, 0.9601547528369845, 0.9623492414376636, 0.6887719442401743, 0.6745291545122658, 0.6866039911629285, 0.6942396524241754, 0.7197049582249316, 0.7265084405132611, 0.7077321703922461, 0.6791629164026431, 0.6840821329046644, 0.8696829976348277, 0.38150426010030336, 0.22544696618395843, 0.27774672505760123, 0.2791031026527193, 0.21366315299956629, 0.21788212637080207, 0.8983893141620884, 0.32590918597274965, 0.21369864952687845, 0.1253303801975546, 0.17313615898922585, 0.11086421550442516, 0.17737964223188407, 0.2048967267484647, 0.19697609367561086, 0.13413899455437728, 0.22239358147804222, 0.13102917719804685, 0.16630526076322094, 0.19197304189428033, 0.20886554860193196, 0.2350041055358688, 0.20776091375133054, 0.12568429571034156, 0.13533274261684491, 0.20963992486646765, 0.10717882792532041, 0.014744650837168805, 0.07964058680896902, 0.055081182920796, 9.999999999998899e-05, 0.013801549967721982, 0.00019219297400374646, 0.06806429101611833, 0.026147737902854296, 0.12028133746118908, 0.05563592983936594, 0.04938774435697746, 0.038144672442057215, 0.031974816431667885, 0.024994704793318667, 0.06950411273007595, 0.08734071680481281, 0.042682494516432246, 0.09897841513156569, 0.13488825384880088, 0.1721371959395105, 0.26352979755653627, 0.2347943226293162, 0.08253683015570135, 0.13195220750947012, 0.09580928969987668, 0.18385771466584955, 0.06304908458784098, 0.06405266776974006, 0.2848092830415656, 0.09613696553318007, 0.27565376527797947, 0.1320054578931431, 0.056474263828603766, 0.048781444513650074, 0.0828397071706668, 0.5545481382751856, 0.5600884944653572, 0.5725907365051012, 0.5666813417468817, 0.5715587446745052, 0.5758540385356621, 0.573019538459834, 0.6133804520354518, 0.5786237856322488, 0.13810423412628847, 0.10428281762553993, 0.0775551867227996, 0.09340964082827796, 0.1079447222492036, 0.17827277967393862, 0.13890451647582835, 0.08810539469263279, 0.06723409671849445, 0.47671062500451744, 0.14575373994910878, 0.1647058860777233, 0.24558022621804843, 0.37597884194570574, 0.22067638123723632, 0.2220176212883046, 0.3367981280304395, 0.2701704604829015, 0.2088262062347841, 0.5261425173265439, 0.29012460107196447, 0.3613494081730333, 0.26116669560519123, 0.337205282794276, 0.24802468691921842, 0.3554784735499168, 0.6571049294931619, 0.27993697273025586, 0.2059510480415293, 0.2844093700859105, 0.3212225102097803, 0.1893788086939251, 0.2860533736702491, 0.2718187877447189, 0.32382475566841606, 0.22107239108566645, 0.2717992177544204, 0.16424281647939587, 0.22922041135284876, 0.21190743930914036, 0.2429186554754601, 0.19215814495213968, 0.21233406996812199, 0.21613745237326354, 0.23475296379053778, 0.20982822445602878, 0.20623099017004487, 0.2240223953425844, 0.22952794887574723, 0.21625560278697575, 0.2510516264359861, 0.2478391142547386, 0.21865804283768253, 0.1800751899817875, 0.16419261237589344, 0.8172969583163242, 0.15382719704651282, 0.910220170036147, 0.20039440017964605, 0.19952942740090174, 0.1424688071765179, 0.1645707454557993, 0.9009405960410137, 0.7893373347479191, 0.21156378201475112, 0.20898470307931083, 0.2104298639713924, 0.6427266292909175, 0.15472846837522447, 0.4809354762193151, 0.21014995633395028, 0.7762885542231943, 0.1900758993971844, 0.19354906826081375, 0.21709388699879417, 0.19540418425881045, 0.19297051551430977, 0.19511939774914788, 0.2017976199824416, 0.2101603147058947, 0.20306504312204277, 0.09169284368434094, 0.10019127852633936, 0.07962681999560206, 0.09799949325075263, 0.09184855130179748, 0.0878191638438569, 0.087514855482836, 0.08296642440479096, 0.10109166749901399]}, "mutation_prompt": null}
{"id": "2f6f903c-e6f4-433a-af4b-efd09c6c45d2", "solution": "import numpy as np\n\nclass OAHPE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 50\n        self.population_size = self.initial_population_size\n        self.c1 = 1.4\n        self.c2 = 1.6\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.7\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _evaluate_population(self, population, func):\n        return np.array([func(ind) for ind in population])\n\n    def _update_velocity(self, velocities, population, personal_best, global_best):\n        r1, r2 = np.random.rand(2, self.population_size, self.dim)\n        cognitive = self.c1 * r1 * (personal_best - population)\n        social = self.c2 * r2 * (global_best - population)\n        return velocities * 0.4 + cognitive + social * 0.85\n\n    def _apply_bounds(self, population):\n        np.clip(population, self.lower_bound, self.upper_bound, out=population)\n\n    def _differential_mutation(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = population[indices]\n        self.mutation_factor = 0.7 + 0.3 * (1 - np.linalg.norm(b - c) / (2 * np.sqrt(self.dim)))\n        mutant = a + self.mutation_factor * (b - c)\n        trial = np.where(np.random.rand(self.dim) < self.crossover_prob, mutant, population[idx])\n        return np.clip(trial, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_value = self._evaluate_population(population, func)\n\n        global_best_idx = np.argmin(personal_best_value)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_value[global_best_idx]\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            self.crossover_prob = 0.6 + 0.2 * (1 - evaluations/self.budget)\n            velocities = self._update_velocity(velocities, population, personal_best, global_best)\n            population += velocities\n            self._apply_bounds(population)\n\n            new_population_value = self._evaluate_population(population, func)\n            evaluations += self.population_size\n\n            for i in range(self.population_size):\n                if new_population_value[i] < personal_best_value[i]:\n                    personal_best[i] = population[i]\n                    personal_best_value[i] = new_population_value[i]\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n            for i in range(0, self.population_size, 2):\n                if evaluations >= self.budget:\n                    break\n                trial = self._differential_mutation(population, i)\n                trial_value = func(trial)\n                if trial_value < personal_best_value[i]:\n                    evaluations += 1\n                    population[i] = trial\n                    personal_best[i] = trial\n                    personal_best_value[i] = trial_value\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n            if evaluations > 0.5 * self.budget and self.population_size > 20:\n                self.population_size = int(self.population_size * 0.9)\n\n        return global_best", "name": "OAHPE", "description": "Enhanced OAHPE by implementing adaptive population size reduction and reducing the number of trial evaluations for improved efficiency.", "configspace": "", "generation": 98, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('operands could not be broadcast together with shapes (45,5) (50,5) ').", "error": "ValueError('operands could not be broadcast together with shapes (45,5) (50,5) ')", "parent_id": "0324ec16-47b3-46f3-b27b-3f81751e79c3", "metadata": {}, "mutation_prompt": null}
{"id": "a3b2c9d5-159d-466e-ad75-74a868d286e5", "solution": "import numpy as np\n\nclass OAHPE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50\n        self.c1 = 1.4\n        self.c2 = 1.6\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.7\n\n    def _initialize_population(self):\n        return np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n\n    def _evaluate_population(self, population, func):\n        return np.array([func(ind) for ind in population])\n\n    def _update_velocity(self, velocities, population, personal_best, global_best):\n        r1, r2 = np.random.rand(2, self.population_size, self.dim)\n        cognitive = self.c1 * r1 * (personal_best - population)\n        social = self.c2 * r2 * (global_best - population)\n        return velocities * 0.4 + cognitive + social * 0.85\n\n    def _apply_bounds(self, population):\n        np.clip(population, self.lower_bound, self.upper_bound, out=population)\n\n    def _differential_mutation(self, population, idx):\n        indices = np.random.choice(self.population_size, 3, replace=False)\n        a, b, c = population[indices]\n        self.mutation_factor = 0.7 + 0.3 * (1 - np.linalg.norm(b - c) / (2 * np.sqrt(self.dim)))  # Adaptive mutation factor\n        mutant = a + self.mutation_factor * (b - c)\n        trial = np.where(np.random.rand(self.dim) < self.crossover_prob, mutant, population[idx])\n        return np.clip(trial, self.lower_bound, self.upper_bound)\n\n    def __call__(self, func):\n        population = self._initialize_population()\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best = population.copy()\n        personal_best_value = self._evaluate_population(population, func)\n\n        global_best_idx = np.argmin(personal_best_value)\n        global_best = personal_best[global_best_idx]\n        global_best_value = personal_best_value[global_best_idx]\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            self.crossover_prob = 0.6 + 0.2 * (1 - evaluations/self.budget)\n            velocities = self._update_velocity(velocities, population, personal_best, global_best)\n            population += velocities\n            self._apply_bounds(population)\n\n            new_population_value = self._evaluate_population(population, func)\n            evaluations += self.population_size\n\n            for i in range(self.population_size):\n                if new_population_value[i] < personal_best_value[i]:\n                    personal_best[i] = population[i]\n                    personal_best_value[i] = new_population_value[i]\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                trial = self._differential_mutation(population, i)\n                trial_value = func(trial)\n                if trial_value < personal_best_value[i]:\n                    evaluations += 1\n                    population[i] = trial\n                    personal_best[i] = trial\n                    personal_best_value[i] = trial_value\n\n                if personal_best_value[i] < global_best_value:\n                    global_best = personal_best[i]\n                    global_best_value = personal_best_value[i]\n\n        return global_best", "name": "OAHPE", "description": "Optimized OAHPE by refining memory operations and enhancing adaptive parameters for accelerated convergence.", "configspace": "", "generation": 89, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0324ec16-47b3-46f3-b27b-3f81751e79c3", "metadata": {"aucs": [0.8702528635367375, 0.8705075273512579, 0.8616338725107104, 0.875645122099232, 0.8728979790106592, 0.8631077921600713, 0.8581323846911456, 0.8642353759829109, 0.8684862952849295, 0.691037526669874, 0.5339067003619554, 9.999999999998899e-05, 0.6941274874561698, 0.7142044527546305, 0.7200040264601056, 0.6738224611614424, 0.7344925900688823, 0.6897440236491045, 0.1418153722232992, 0.10846911562754591, 0.12277794311662948, 0.12971358653316, 0.17984112841156763, 0.5456933902771317, 0.11379538359915697, 0.1769248798352595, 0.11486913263890797, 0.10634538894543166, 0.11541986125435466, 0.10967515272917083, 0.12085317525370576, 0.10936703175618001, 0.11156900526100577, 0.13920459548676645, 0.1396901848182226, 0.15564739374828573, 0.966942901557619, 0.97616780799158, 0.9746813021464993, 0.9508323144164261, 0.968692405194026, 0.9541294716218044, 0.9778834822484883, 0.9601547528369845, 0.9623492414376636, 0.6887719442401743, 0.6745291545122658, 0.6866039911629285, 0.6942396524241754, 0.7197049582249316, 0.7265084405132611, 0.7077321703922461, 0.6791629164026431, 0.6840821329046644, 0.8696829976348277, 0.38150426010030336, 0.22544696618395843, 0.27774672505760123, 0.2791031026527193, 0.21366315299956629, 0.21788212637080207, 0.8983893141620884, 0.32590918597274965, 0.21369864952687845, 0.1253303801975546, 0.17313615898922585, 0.11086421550442516, 0.17737964223188407, 0.2048967267484647, 0.19697609367561086, 0.13413899455437728, 0.22239358147804222, 0.13102917719804685, 0.16630526076322094, 0.19197304189428033, 0.20886554860193196, 0.2350041055358688, 0.20776091375133054, 0.12568429571034156, 0.13533274261684491, 0.20963992486646765, 0.10717882792532041, 0.014744650837168805, 0.07964058680896902, 0.055081182920796, 9.999999999998899e-05, 0.013801549967721982, 0.00019219297400374646, 0.06806429101611833, 0.026147737902854296, 0.12028133746118908, 0.05563592983936594, 0.04938774435697746, 0.038144672442057215, 0.031974816431667885, 0.024994704793318667, 0.06950411273007595, 0.08734071680481281, 0.042682494516432246, 0.09897841513156569, 0.13488825384880088, 0.1721371959395105, 0.26352979755653627, 0.2347943226293162, 0.08253683015570135, 0.13195220750947012, 0.09580928969987668, 0.18385771466584955, 0.06304908458784098, 0.06405266776974006, 0.2848092830415656, 0.09613696553318007, 0.27565376527797947, 0.1320054578931431, 0.056474263828603766, 0.048781444513650074, 0.0828397071706668, 0.5545481382751856, 0.5600884944653572, 0.5725907365051012, 0.5666813417468817, 0.5715587446745052, 0.5758540385356621, 0.573019538459834, 0.6133804520354518, 0.5786237856322488, 0.13810423412628847, 0.10428281762553993, 0.0775551867227996, 0.09340964082827796, 0.1079447222492036, 0.17827277967393862, 0.13890451647582835, 0.08810539469263279, 0.06723409671849445, 0.47671062500451744, 0.14575373994910878, 0.1647058860777233, 0.24558022621804843, 0.37597884194570574, 0.22067638123723632, 0.2220176212883046, 0.3367981280304395, 0.2701704604829015, 0.2088262062347841, 0.5261425173265439, 0.29012460107196447, 0.3613494081730333, 0.26116669560519123, 0.337205282794276, 0.24802468691921842, 0.3554784735499168, 0.6571049294931619, 0.27993697273025586, 0.2059510480415293, 0.2844093700859105, 0.3212225102097803, 0.1893788086939251, 0.2860533736702491, 0.2718187877447189, 0.32382475566841606, 0.22107239108566645, 0.2717992177544204, 0.16424281647939587, 0.22922041135284876, 0.21190743930914036, 0.2429186554754601, 0.19215814495213968, 0.21233406996812199, 0.21613745237326354, 0.23475296379053778, 0.20982822445602878, 0.20623099017004487, 0.2240223953425844, 0.22952794887574723, 0.21625560278697575, 0.2510516264359861, 0.2478391142547386, 0.21865804283768253, 0.1800751899817875, 0.16419261237589344, 0.8172969583163242, 0.15382719704651282, 0.910220170036147, 0.20039440017964605, 0.19952942740090174, 0.1424688071765179, 0.1645707454557993, 0.9009405960410137, 0.7893373347479191, 0.21156378201475112, 0.20898470307931083, 0.2104298639713924, 0.6427266292909175, 0.15472846837522447, 0.4809354762193151, 0.21014995633395028, 0.7762885542231943, 0.1900758993971844, 0.19354906826081375, 0.21709388699879417, 0.19540418425881045, 0.19297051551430977, 0.19511939774914788, 0.2017976199824416, 0.2101603147058947, 0.20306504312204277, 0.09169284368434094, 0.10019127852633936, 0.07962681999560206, 0.09799949325075263, 0.09184855130179748, 0.0878191638438569, 0.087514855482836, 0.08296642440479096, 0.10109166749901399]}, "mutation_prompt": null}
