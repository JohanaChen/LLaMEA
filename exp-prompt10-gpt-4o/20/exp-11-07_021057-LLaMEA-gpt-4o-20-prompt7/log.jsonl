{"id": "86b3e4f1-22cc-4fb2-97cc-bf4bb4405e19", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 100\n        self.inertia_weight = 0.5\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros_like(particles)\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([float('inf')] * self.population_size)\n        \n        # Evaluate initial population\n        for i in range(self.population_size):\n            score = func(particles[i])\n            personal_best_scores[i] = score\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            # PSO update\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coef * r1 * (personal_best_positions[i] - particles[i])\n                                 + self.social_coef * r2 * (global_best_position - particles[i]))\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n            # Differential Evolution update with crossover\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = particles[np.random.choice(idxs, 3, replace=False)]\n                mutant_vector = a + self.mutation_factor * (b - c)\n                trial_vector = np.copy(particles[i])\n                \n                crossover_mask = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover_mask] = mutant_vector[crossover_mask]\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_score = func(trial_vector)\n                eval_count += 1\n\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial_vector\n                    personal_best_scores[i] = trial_score\n\n                # Update global best\n                if trial_score < personal_best_scores[global_best_index]:\n                    global_best_position = trial_vector\n                    global_best_index = i\n\n        return global_best_position", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization with Differential Evolution for improved global search and fine-tuning capabilities.", "configspace": "", "generation": 0, "fitness": 0.2673907506072614, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.22.", "error": "", "parent_id": null, "metadata": {"aucs": [0.4882472281863305, 0.5164996094393812, 0.49627912463063206, 0.5339702752982873, 0.5404857484433038, 0.547033222410221, 0.49399054113020424, 0.5367743327470891, 0.5119730119579462, 0.1706997127269757, 0.16635505076312052, 0.18446456584479554, 0.18604242012498118, 0.18385268429613089, 0.19889041587631473, 0.19350555897906274, 0.18935136805081465, 0.186113004482099, 0.1307654169093807, 0.0896874251953903, 0.1412118423293054, 0.12142484023944233, 0.08837419841250671, 0.10400118280198245, 0.0964554587419576, 0.11658723844656671, 0.11926491685202545, 0.08929049749518203, 0.09355381931055196, 0.09727303635479634, 0.09026961265237132, 0.09423101095621911, 0.09339318029108867, 0.08134358186533541, 0.08978638175382525, 0.0790833264319073, 0.9624677687815185, 0.9855801791358813, 0.9816224124392043, 0.9588006997707941, 0.9759509140344366, 0.9710092523361906, 0.9847789324109596, 0.9782110500998692, 0.98016966668225, 0.3034460677447628, 0.3070791946049275, 0.3162936841526668, 0.26956904150950545, 0.27971313253914787, 0.2897636724461585, 0.30055476618523735, 0.3091051582244504, 0.29971065338511116, 0.575103760195953, 0.6579369174912328, 0.5756957078252307, 0.578457448384498, 0.62268343346853, 0.5348743605197566, 0.5437377063519533, 0.5750864631031573, 0.6026443184059901, 0.19122557781747151, 0.219926728416182, 0.17708813534241585, 0.1523831002292707, 0.17127873663224114, 0.24081197620533124, 0.18821531399816682, 0.10537279412279565, 0.21402145621295277, 0.2046246795081199, 0.19412499079843515, 0.20112124180673951, 0.20074072515046604, 0.18249195134365226, 0.1905082713072752, 0.2089302453317663, 0.19436623916189255, 0.2049281654583116, 0.0068166536550172685, 0.0837911965861654, 0.050516084582435505, 0.08976494540162006, 0.024829806428101286, 0.059188024680768336, 0.07305783740295468, 0.0964648656103706, 0.05769154514049968, 0.16280677835660884, 0.13777513171727374, 0.1716677221194739, 0.16142186592296115, 0.1234805081916649, 0.1397229977283585, 0.1689893019576535, 0.19814437959424513, 0.10939187298388475, 0.03371722574371072, 0.01923355698663376, 0.005416925536914974, 0.04565091917775321, 0.05293169986076862, 0.0184420315537287, 0.04294472623437107, 0.05384869480282728, 0.06862652834993865, 0.1434727307465219, 0.13014516524304764, 0.14283094183897305, 0.15476437716028124, 0.14335469825078906, 0.15476551997128118, 0.15389314040201207, 0.14499099412110517, 0.1646586539936239, 0.42255470889347735, 0.46454075466293065, 0.44103809128390825, 0.4445627656988088, 0.47217832809756455, 0.45296131431367226, 0.44219202469859464, 0.44168740411218377, 0.44493214750241983, 0.11182782387379753, 0.11173558176568021, 0.10138240106614815, 0.12488674551975909, 0.10273332347253195, 0.0970848950327079, 0.10894600019138578, 0.1130670277428173, 0.11829577546665515, 0.14540727231836847, 0.28447483892739733, 0.26440216718424314, 0.1827169809011342, 0.1967818721167539, 0.1290231784956315, 0.22484703138983853, 0.2435070355954998, 0.14288332363901612, 0.3074153083721701, 0.3034971554251098, 0.323958818223814, 0.3218228418410899, 0.3013796916450162, 0.3152165178622156, 0.3027670634632387, 0.3207432053900766, 0.3102628188868207, 0.2426007391435272, 0.21945623775416667, 0.268208028565292, 0.24495150191609605, 0.22065384399611787, 0.2703326499446467, 0.2520514025458884, 0.2640574256321997, 0.23775578206788373, 0.22330900122434794, 0.20084061105721895, 0.20237536743761497, 0.19086571663572038, 0.20448237248981416, 0.1846514790920929, 0.18829689955191709, 0.22010501926862958, 0.20704392112805026, 0.19970469159745197, 0.18850720732108373, 0.18254084549289917, 0.25912294469449937, 0.19604031895930163, 0.17935684116599004, 0.19282140363331945, 0.19175608739215821, 0.18992982248363355, 0.5541751596749267, 0.18046459927013492, 0.7235462915111932, 0.5502756818579533, 0.19248006472901402, 0.6572431188512124, 0.49559553012688085, 0.17391510325816872, 0.6707153637156391, 0.6286220117657617, 0.16964131868621912, 0.1908374933944862, 0.587157252836209, 0.5686223380915884, 0.6500050281667298, 0.20784635578758293, 0.12598989547462092, 0.6967624706510098, 0.1691155437474563, 0.19560187661169282, 0.1967090441389101, 0.17095352215511195, 0.1891195529401717, 0.1773154045473122, 0.18015985376441856, 0.1865000452760659, 0.18157214803937605, 0.07491902707087594, 0.07967315296110045, 0.07822741346497764, 0.0905098924597636, 0.08109982530064042, 0.08927050950122395, 0.08599735345014836, 0.07840666898783799, 0.07588224010329336]}, "mutation_prompt": null}
{"id": "6d101220-59f8-4b97-9be9-3004389731e8", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 100\n        self.inertia_weight = 0.5\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros_like(particles)\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([float('inf')] * self.population_size)\n        \n        # Evaluate initial population\n        for i in range(self.population_size):\n            score = func(particles[i])\n            personal_best_scores[i] = score\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            # PSO update\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coef * r1 * (personal_best_positions[i] - particles[i])\n                                 + self.social_coef * r2 * (global_best_position - particles[i]))\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n            # Differential Evolution update with crossover\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = particles[np.random.choice(idxs, 3, replace=False)]\n                mutant_vector = a + self.mutation_factor * (b - c)\n                trial_vector = np.copy(particles[i])\n                \n                crossover_mask = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover_mask] = mutant_vector[crossover_mask]\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_score = func(trial_vector)\n                eval_count += 1\n\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial_vector\n                    personal_best_scores[i] = trial_score\n\n                # Update global best\n                if trial_score < personal_best_scores[global_best_index]:\n                    global_best_position = trial_vector\n                    global_best_index = i\n\n        return global_best_position", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization with Differential Evolution for improved global search and fine-tuning capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "86b3e4f1-22cc-4fb2-97cc-bf4bb4405e19", "metadata": {"aucs": [0.4882472281863305, 0.5164996094393812, 0.49627912463063206, 0.5339702752982873, 0.5404857484433038, 0.547033222410221, 0.49399054113020424, 0.5367743327470891, 0.5119730119579462, 0.1706997127269757, 0.16635505076312052, 0.18446456584479554, 0.18604242012498118, 0.18385268429613089, 0.19889041587631473, 0.19350555897906274, 0.18935136805081465, 0.186113004482099, 0.1307654169093807, 0.0896874251953903, 0.1412118423293054, 0.12142484023944233, 0.08837419841250671, 0.10400118280198245, 0.0964554587419576, 0.11658723844656671, 0.11926491685202545, 0.08929049749518203, 0.09355381931055196, 0.09727303635479634, 0.09026961265237132, 0.09423101095621911, 0.09339318029108867, 0.08134358186533541, 0.08978638175382525, 0.0790833264319073, 0.9624677687815185, 0.9855801791358813, 0.9816224124392043, 0.9588006997707941, 0.9759509140344366, 0.9710092523361906, 0.9847789324109596, 0.9782110500998692, 0.98016966668225, 0.3034460677447628, 0.3070791946049275, 0.3162936841526668, 0.26956904150950545, 0.27971313253914787, 0.2897636724461585, 0.30055476618523735, 0.3091051582244504, 0.29971065338511116, 0.575103760195953, 0.6579369174912328, 0.5756957078252307, 0.578457448384498, 0.62268343346853, 0.5348743605197566, 0.5437377063519533, 0.5750864631031573, 0.6026443184059901, 0.19122557781747151, 0.219926728416182, 0.17708813534241585, 0.1523831002292707, 0.17127873663224114, 0.24081197620533124, 0.18821531399816682, 0.10537279412279565, 0.21402145621295277, 0.2046246795081199, 0.19412499079843515, 0.20112124180673951, 0.20074072515046604, 0.18249195134365226, 0.1905082713072752, 0.2089302453317663, 0.19436623916189255, 0.2049281654583116, 0.0068166536550172685, 0.0837911965861654, 0.050516084582435505, 0.08976494540162006, 0.024829806428101286, 0.059188024680768336, 0.07305783740295468, 0.0964648656103706, 0.05769154514049968, 0.16280677835660884, 0.13777513171727374, 0.1716677221194739, 0.16142186592296115, 0.1234805081916649, 0.1397229977283585, 0.1689893019576535, 0.19814437959424513, 0.10939187298388475, 0.03371722574371072, 0.01923355698663376, 0.005416925536914974, 0.04565091917775321, 0.05293169986076862, 0.0184420315537287, 0.04294472623437107, 0.05384869480282728, 0.06862652834993865, 0.1434727307465219, 0.13014516524304764, 0.14283094183897305, 0.15476437716028124, 0.14335469825078906, 0.15476551997128118, 0.15389314040201207, 0.14499099412110517, 0.1646586539936239, 0.42255470889347735, 0.46454075466293065, 0.44103809128390825, 0.4445627656988088, 0.47217832809756455, 0.45296131431367226, 0.44219202469859464, 0.44168740411218377, 0.44493214750241983, 0.11182782387379753, 0.11173558176568021, 0.10138240106614815, 0.12488674551975909, 0.10273332347253195, 0.0970848950327079, 0.10894600019138578, 0.1130670277428173, 0.11829577546665515, 0.14540727231836847, 0.28447483892739733, 0.26440216718424314, 0.1827169809011342, 0.1967818721167539, 0.1290231784956315, 0.22484703138983853, 0.2435070355954998, 0.14288332363901612, 0.3074153083721701, 0.3034971554251098, 0.323958818223814, 0.3218228418410899, 0.3013796916450162, 0.3152165178622156, 0.3027670634632387, 0.3207432053900766, 0.3102628188868207, 0.2426007391435272, 0.21945623775416667, 0.268208028565292, 0.24495150191609605, 0.22065384399611787, 0.2703326499446467, 0.2520514025458884, 0.2640574256321997, 0.23775578206788373, 0.22330900122434794, 0.20084061105721895, 0.20237536743761497, 0.19086571663572038, 0.20448237248981416, 0.1846514790920929, 0.18829689955191709, 0.22010501926862958, 0.20704392112805026, 0.19970469159745197, 0.18850720732108373, 0.18254084549289917, 0.25912294469449937, 0.19604031895930163, 0.17935684116599004, 0.19282140363331945, 0.19175608739215821, 0.18992982248363355, 0.5541751596749267, 0.18046459927013492, 0.7235462915111932, 0.5502756818579533, 0.19248006472901402, 0.6572431188512124, 0.49559553012688085, 0.17391510325816872, 0.6707153637156391, 0.6286220117657617, 0.16964131868621912, 0.1908374933944862, 0.587157252836209, 0.5686223380915884, 0.6500050281667298, 0.20784635578758293, 0.12598989547462092, 0.6967624706510098, 0.1691155437474563, 0.19560187661169282, 0.1967090441389101, 0.17095352215511195, 0.1891195529401717, 0.1773154045473122, 0.18015985376441856, 0.1865000452760659, 0.18157214803937605, 0.07491902707087594, 0.07967315296110045, 0.07822741346497764, 0.0905098924597636, 0.08109982530064042, 0.08927050950122395, 0.08599735345014836, 0.07840666898783799, 0.07588224010329336]}, "mutation_prompt": null}
{"id": "9ae354f6-04e3-4886-ae19-04c2c048e96e", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 100\n        self.inertia_weight = 0.5\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros_like(particles)\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([float('inf')] * self.population_size)\n        \n        # Evaluate initial population\n        for i in range(self.population_size):\n            score = func(particles[i])\n            personal_best_scores[i] = score\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            # PSO update\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coef * r1 * (personal_best_positions[i] - particles[i])\n                                 + self.social_coef * r2 * (global_best_position - particles[i]))\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n            # Differential Evolution update with crossover\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = particles[np.random.choice(idxs, 3, replace=False)]\n                mutant_vector = a + self.mutation_factor * (b - c)\n                trial_vector = np.copy(particles[i])\n                \n                crossover_mask = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover_mask] = mutant_vector[crossover_mask]\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_score = func(trial_vector)\n                eval_count += 1\n\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial_vector\n                    personal_best_scores[i] = trial_score\n\n                # Update global best\n                if trial_score < personal_best_scores[global_best_index]:\n                    global_best_position = trial_vector\n                    global_best_index = i\n\n        return global_best_position", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization with Differential Evolution for improved global search and fine-tuning capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "86b3e4f1-22cc-4fb2-97cc-bf4bb4405e19", "metadata": {"aucs": [0.4882472281863305, 0.5164996094393812, 0.49627912463063206, 0.5339702752982873, 0.5404857484433038, 0.547033222410221, 0.49399054113020424, 0.5367743327470891, 0.5119730119579462, 0.1706997127269757, 0.16635505076312052, 0.18446456584479554, 0.18604242012498118, 0.18385268429613089, 0.19889041587631473, 0.19350555897906274, 0.18935136805081465, 0.186113004482099, 0.1307654169093807, 0.0896874251953903, 0.1412118423293054, 0.12142484023944233, 0.08837419841250671, 0.10400118280198245, 0.0964554587419576, 0.11658723844656671, 0.11926491685202545, 0.08929049749518203, 0.09355381931055196, 0.09727303635479634, 0.09026961265237132, 0.09423101095621911, 0.09339318029108867, 0.08134358186533541, 0.08978638175382525, 0.0790833264319073, 0.9624677687815185, 0.9855801791358813, 0.9816224124392043, 0.9588006997707941, 0.9759509140344366, 0.9710092523361906, 0.9847789324109596, 0.9782110500998692, 0.98016966668225, 0.3034460677447628, 0.3070791946049275, 0.3162936841526668, 0.26956904150950545, 0.27971313253914787, 0.2897636724461585, 0.30055476618523735, 0.3091051582244504, 0.29971065338511116, 0.575103760195953, 0.6579369174912328, 0.5756957078252307, 0.578457448384498, 0.62268343346853, 0.5348743605197566, 0.5437377063519533, 0.5750864631031573, 0.6026443184059901, 0.19122557781747151, 0.219926728416182, 0.17708813534241585, 0.1523831002292707, 0.17127873663224114, 0.24081197620533124, 0.18821531399816682, 0.10537279412279565, 0.21402145621295277, 0.2046246795081199, 0.19412499079843515, 0.20112124180673951, 0.20074072515046604, 0.18249195134365226, 0.1905082713072752, 0.2089302453317663, 0.19436623916189255, 0.2049281654583116, 0.0068166536550172685, 0.0837911965861654, 0.050516084582435505, 0.08976494540162006, 0.024829806428101286, 0.059188024680768336, 0.07305783740295468, 0.0964648656103706, 0.05769154514049968, 0.16280677835660884, 0.13777513171727374, 0.1716677221194739, 0.16142186592296115, 0.1234805081916649, 0.1397229977283585, 0.1689893019576535, 0.19814437959424513, 0.10939187298388475, 0.03371722574371072, 0.01923355698663376, 0.005416925536914974, 0.04565091917775321, 0.05293169986076862, 0.0184420315537287, 0.04294472623437107, 0.05384869480282728, 0.06862652834993865, 0.1434727307465219, 0.13014516524304764, 0.14283094183897305, 0.15476437716028124, 0.14335469825078906, 0.15476551997128118, 0.15389314040201207, 0.14499099412110517, 0.1646586539936239, 0.42255470889347735, 0.46454075466293065, 0.44103809128390825, 0.4445627656988088, 0.47217832809756455, 0.45296131431367226, 0.44219202469859464, 0.44168740411218377, 0.44493214750241983, 0.11182782387379753, 0.11173558176568021, 0.10138240106614815, 0.12488674551975909, 0.10273332347253195, 0.0970848950327079, 0.10894600019138578, 0.1130670277428173, 0.11829577546665515, 0.14540727231836847, 0.28447483892739733, 0.26440216718424314, 0.1827169809011342, 0.1967818721167539, 0.1290231784956315, 0.22484703138983853, 0.2435070355954998, 0.14288332363901612, 0.3074153083721701, 0.3034971554251098, 0.323958818223814, 0.3218228418410899, 0.3013796916450162, 0.3152165178622156, 0.3027670634632387, 0.3207432053900766, 0.3102628188868207, 0.2426007391435272, 0.21945623775416667, 0.268208028565292, 0.24495150191609605, 0.22065384399611787, 0.2703326499446467, 0.2520514025458884, 0.2640574256321997, 0.23775578206788373, 0.22330900122434794, 0.20084061105721895, 0.20237536743761497, 0.19086571663572038, 0.20448237248981416, 0.1846514790920929, 0.18829689955191709, 0.22010501926862958, 0.20704392112805026, 0.19970469159745197, 0.18850720732108373, 0.18254084549289917, 0.25912294469449937, 0.19604031895930163, 0.17935684116599004, 0.19282140363331945, 0.19175608739215821, 0.18992982248363355, 0.5541751596749267, 0.18046459927013492, 0.7235462915111932, 0.5502756818579533, 0.19248006472901402, 0.6572431188512124, 0.49559553012688085, 0.17391510325816872, 0.6707153637156391, 0.6286220117657617, 0.16964131868621912, 0.1908374933944862, 0.587157252836209, 0.5686223380915884, 0.6500050281667298, 0.20784635578758293, 0.12598989547462092, 0.6967624706510098, 0.1691155437474563, 0.19560187661169282, 0.1967090441389101, 0.17095352215511195, 0.1891195529401717, 0.1773154045473122, 0.18015985376441856, 0.1865000452760659, 0.18157214803937605, 0.07491902707087594, 0.07967315296110045, 0.07822741346497764, 0.0905098924597636, 0.08109982530064042, 0.08927050950122395, 0.08599735345014836, 0.07840666898783799, 0.07588224010329336]}, "mutation_prompt": null}
{"id": "84777a35-40c9-4e39-89e3-0b3d240c6c43", "solution": "import numpy as np\n\nclass HybridPSOADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 50  # Reduced to enhance speed\n        self.inertia_weight = 0.5\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros_like(particles)\n        personal_best_positions = particles.copy()\n        personal_best_scores = np.full(self.population_size, float('inf'))\n\n        scores = np.apply_along_axis(func, 1, particles)  # Vectorized evaluation\n        eval_count = self.population_size\n        personal_best_scores = scores.copy()\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n\n        while eval_count < self.budget:\n            # Adaptive PSO update\n            inertia_weight = 0.9 - (0.5 * eval_count / self.budget)\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (inertia_weight * velocities[i]\n                                 + self.cognitive_coef * r1 * (personal_best_positions[i] - particles[i])\n                                 + self.social_coef * r2 * (global_best_position - particles[i]))\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n            # Adaptive Differential Evolution update\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = particles[idxs]\n                mutant_vector = a + self.mutation_factor * (b - c)\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_prob, mutant_vector, particles[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_score = func(trial_vector)\n                eval_count += 1\n\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial_vector\n                    personal_best_scores[i] = trial_score\n\n            # Update global best\n            current_global_best_index = np.argmin(personal_best_scores)\n            if personal_best_scores[current_global_best_index] < personal_best_scores[global_best_index]:\n                global_best_position = personal_best_positions[current_global_best_index]\n                global_best_index = current_global_best_index\n\n        return global_best_position", "name": "HybridPSOADE", "description": "A hybrid Particle Swarm Optimization with Adaptive Differential Evolution for dynamic exploration and exploitation balance.", "configspace": "", "generation": 3, "fitness": 0.23433769312695377, "feedback": "The algorithm HybridPSOADE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.20.", "error": "", "parent_id": "86b3e4f1-22cc-4fb2-97cc-bf4bb4405e19", "metadata": {"aucs": [0.4760410565081704, 0.44992074476127286, 0.4347004332898943, 0.5210032442513624, 0.518702243796666, 0.4811452206830731, 0.4903207105527535, 0.4927746976057593, 0.4725152343410922, 0.16727864889155297, 0.11876286084503695, 0.17093776337876765, 0.17320525477864324, 0.14465092251323952, 0.15129783088304338, 0.12550787295077392, 0.19099511858950424, 0.1515778499086804, 0.09500994775059879, 0.0925893642658302, 0.077036626312328, 0.09468305298365653, 0.07995713497491175, 0.08965625349328932, 0.13129883809767995, 0.11466961887976046, 0.09874168782319215, 0.0863652266980427, 0.0700439837289798, 0.08414225899466055, 0.08392419002642693, 0.07014481066515632, 0.08150156071444437, 0.077844358128481, 0.08287422301231728, 0.07809946831663639, 0.9851934095130082, 0.9803387336343667, 0.9885103207383126, 0.9340538485247513, 0.9891583639300109, 0.9675226750653415, 0.98614834952003, 0.983747906336771, 0.9856837500679795, 0.2600786986500514, 0.26036097292578053, 0.2602999124260792, 0.2670916485598548, 0.24577347974299513, 0.26211761188305127, 0.25440133186822544, 0.276154451974455, 0.2604556199632908, 0.41972102389889054, 0.47637763721390713, 0.429951022489367, 0.4991265850451274, 0.45922296248902517, 0.49813653083793785, 0.5003906930530402, 0.4609590044751867, 0.5191167463121548, 0.16508215247461633, 0.15198613718309228, 0.1416912733350305, 0.1342951565363828, 0.15081863035713938, 0.1403422140916053, 0.1581697135750486, 0.17288147308188184, 0.14660892378812151, 0.13450193580634584, 0.020105413963975693, 0.14148569183045767, 0.16708809655355794, 0.14138084718487676, 0.15510461040641188, 0.17718208195945861, 0.1873919550558245, 0.1620104825832137, 0.08671401278923063, 0.07207988881912697, 0.06353931433626714, 0.084760962726672, 0.08911385259970106, 0.07023207624354932, 0.04416286343726861, 0.105174261864176, 0.07666457781973679, 0.1611739350748489, 0.09406239487719414, 0.12791649367409064, 0.0749864344600848, 0.022920107129374645, 0.1056079697635236, 0.13492338249159397, 0.14749191282469232, 0.15840463649722658, 0.052135930191471, 0.014113773200211677, 0.020372614873305772, 0.055865282517180814, 0.04587453862752722, 0.038938037108856904, 0.034392834786635795, 0.05267048765679916, 0.04042395002512689, 0.12257898242364085, 0.1239998457756315, 0.11897441468344228, 0.12152119498084502, 0.12159631116127279, 0.13002294018347293, 0.14215330839826712, 0.12416920635231232, 0.11215330101074505, 0.39811575391081455, 0.39715444031828895, 0.3712160258236189, 0.42042761333962864, 0.42144489312509237, 0.42793511824186214, 0.43223164821089244, 0.41920939154432413, 0.4188174069797357, 0.10536028357399718, 0.09501622823553202, 0.10193317333911023, 0.10790758871620476, 0.09013263223718382, 0.07557419900598938, 0.09286045922495156, 0.08460032199685008, 0.07788893502205896, 0.14345575543225864, 0.2599135381940143, 0.16545536552052087, 0.1533040294134198, 0.30827936789217714, 0.16260220704457695, 0.18493226283321706, 0.1364759541299383, 0.1560204362452996, 0.2714912697777915, 0.29034899322768715, 0.27612667431737525, 0.2954509636329721, 0.27075645575813256, 0.265691739456249, 0.29391393200029037, 0.29065021584548445, 0.28649018395176207, 0.2117396923909085, 0.20391577719677623, 0.22259717648999566, 0.2407573515054321, 0.21824941831064903, 0.22281968279735653, 0.2337202425729683, 0.25732387360156894, 0.2367360487962452, 0.18155434427949912, 0.1752410991934248, 0.18461921583181617, 0.18886847141790353, 0.17995843827687563, 0.17527639306415077, 0.22189132857328608, 0.17283203369226063, 0.18342811917042623, 0.2034977176420697, 0.22668108041469026, 0.1757066303865542, 0.19205738711450526, 0.18115913838674647, 0.243537068543202, 0.2561973522511626, 0.24024876988321253, 0.1658549721859678, 0.16177067690278457, 0.1634575090080037, 0.15244936443670398, 0.5142778561433092, 0.18644738174552056, 0.15978659105776605, 0.13701846445741872, 0.5204410971879045, 0.17572537910654973, 0.4965816906353707, 0.20293727362249614, 0.4581604089207074, 0.19291856828389597, 0.5076769899740672, 0.39855264058817197, 0.20491559092172162, 0.2059931629115681, 0.5381517146148695, 0.18231039328552157, 0.19162598788050667, 0.1808522700091293, 0.1899613086083215, 0.18626822915817898, 0.17974305736697682, 0.20925422234653024, 0.1848243503354997, 0.17803428547497258, 0.07220335234237374, 0.06922610894068038, 0.07305209583916861, 0.06522204725032132, 0.07215683411492524, 0.0779390100925682, 0.07301008299740586, 0.06728828255794961, 0.07102672912638208]}, "mutation_prompt": null}
{"id": "162525fd-f89b-4f9b-822b-4342a91a00d5", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 100\n        self.inertia_weight = 0.5\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros_like(particles)\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([float('inf')] * self.population_size)\n        \n        # Evaluate initial population\n        for i in range(self.population_size):\n            score = func(particles[i])\n            personal_best_scores[i] = score\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            # PSO update\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coef * r1 * (personal_best_positions[i] - particles[i])\n                                 + self.social_coef * r2 * (global_best_position - particles[i]))\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n            # Differential Evolution update with crossover\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = particles[np.random.choice(idxs, 3, replace=False)]\n                mutant_vector = a + self.mutation_factor * (b - c)\n                trial_vector = np.copy(particles[i])\n                \n                crossover_mask = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover_mask] = mutant_vector[crossover_mask]\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_score = func(trial_vector)\n                eval_count += 1\n\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial_vector\n                    personal_best_scores[i] = trial_score\n\n                # Update global best\n                if trial_score < personal_best_scores[global_best_index]:\n                    global_best_position = trial_vector\n                    global_best_index = i\n\n        return global_best_position", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization with Differential Evolution for improved global search and fine-tuning capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "86b3e4f1-22cc-4fb2-97cc-bf4bb4405e19", "metadata": {"aucs": [0.4882472281863305, 0.5164996094393812, 0.49627912463063206, 0.5339702752982873, 0.5404857484433038, 0.547033222410221, 0.49399054113020424, 0.5367743327470891, 0.5119730119579462, 0.1706997127269757, 0.16635505076312052, 0.18446456584479554, 0.18604242012498118, 0.18385268429613089, 0.19889041587631473, 0.19350555897906274, 0.18935136805081465, 0.186113004482099, 0.1307654169093807, 0.0896874251953903, 0.1412118423293054, 0.12142484023944233, 0.08837419841250671, 0.10400118280198245, 0.0964554587419576, 0.11658723844656671, 0.11926491685202545, 0.08929049749518203, 0.09355381931055196, 0.09727303635479634, 0.09026961265237132, 0.09423101095621911, 0.09339318029108867, 0.08134358186533541, 0.08978638175382525, 0.0790833264319073, 0.9624677687815185, 0.9855801791358813, 0.9816224124392043, 0.9588006997707941, 0.9759509140344366, 0.9710092523361906, 0.9847789324109596, 0.9782110500998692, 0.98016966668225, 0.3034460677447628, 0.3070791946049275, 0.3162936841526668, 0.26956904150950545, 0.27971313253914787, 0.2897636724461585, 0.30055476618523735, 0.3091051582244504, 0.29971065338511116, 0.575103760195953, 0.6579369174912328, 0.5756957078252307, 0.578457448384498, 0.62268343346853, 0.5348743605197566, 0.5437377063519533, 0.5750864631031573, 0.6026443184059901, 0.19122557781747151, 0.219926728416182, 0.17708813534241585, 0.1523831002292707, 0.17127873663224114, 0.24081197620533124, 0.18821531399816682, 0.10537279412279565, 0.21402145621295277, 0.2046246795081199, 0.19412499079843515, 0.20112124180673951, 0.20074072515046604, 0.18249195134365226, 0.1905082713072752, 0.2089302453317663, 0.19436623916189255, 0.2049281654583116, 0.0068166536550172685, 0.0837911965861654, 0.050516084582435505, 0.08976494540162006, 0.024829806428101286, 0.059188024680768336, 0.07305783740295468, 0.0964648656103706, 0.05769154514049968, 0.16280677835660884, 0.13777513171727374, 0.1716677221194739, 0.16142186592296115, 0.1234805081916649, 0.1397229977283585, 0.1689893019576535, 0.19814437959424513, 0.10939187298388475, 0.03371722574371072, 0.01923355698663376, 0.005416925536914974, 0.04565091917775321, 0.05293169986076862, 0.0184420315537287, 0.04294472623437107, 0.05384869480282728, 0.06862652834993865, 0.1434727307465219, 0.13014516524304764, 0.14283094183897305, 0.15476437716028124, 0.14335469825078906, 0.15476551997128118, 0.15389314040201207, 0.14499099412110517, 0.1646586539936239, 0.42255470889347735, 0.46454075466293065, 0.44103809128390825, 0.4445627656988088, 0.47217832809756455, 0.45296131431367226, 0.44219202469859464, 0.44168740411218377, 0.44493214750241983, 0.11182782387379753, 0.11173558176568021, 0.10138240106614815, 0.12488674551975909, 0.10273332347253195, 0.0970848950327079, 0.10894600019138578, 0.1130670277428173, 0.11829577546665515, 0.14540727231836847, 0.28447483892739733, 0.26440216718424314, 0.1827169809011342, 0.1967818721167539, 0.1290231784956315, 0.22484703138983853, 0.2435070355954998, 0.14288332363901612, 0.3074153083721701, 0.3034971554251098, 0.323958818223814, 0.3218228418410899, 0.3013796916450162, 0.3152165178622156, 0.3027670634632387, 0.3207432053900766, 0.3102628188868207, 0.2426007391435272, 0.21945623775416667, 0.268208028565292, 0.24495150191609605, 0.22065384399611787, 0.2703326499446467, 0.2520514025458884, 0.2640574256321997, 0.23775578206788373, 0.22330900122434794, 0.20084061105721895, 0.20237536743761497, 0.19086571663572038, 0.20448237248981416, 0.1846514790920929, 0.18829689955191709, 0.22010501926862958, 0.20704392112805026, 0.19970469159745197, 0.18850720732108373, 0.18254084549289917, 0.25912294469449937, 0.19604031895930163, 0.17935684116599004, 0.19282140363331945, 0.19175608739215821, 0.18992982248363355, 0.5541751596749267, 0.18046459927013492, 0.7235462915111932, 0.5502756818579533, 0.19248006472901402, 0.6572431188512124, 0.49559553012688085, 0.17391510325816872, 0.6707153637156391, 0.6286220117657617, 0.16964131868621912, 0.1908374933944862, 0.587157252836209, 0.5686223380915884, 0.6500050281667298, 0.20784635578758293, 0.12598989547462092, 0.6967624706510098, 0.1691155437474563, 0.19560187661169282, 0.1967090441389101, 0.17095352215511195, 0.1891195529401717, 0.1773154045473122, 0.18015985376441856, 0.1865000452760659, 0.18157214803937605, 0.07491902707087594, 0.07967315296110045, 0.07822741346497764, 0.0905098924597636, 0.08109982530064042, 0.08927050950122395, 0.08599735345014836, 0.07840666898783799, 0.07588224010329336]}, "mutation_prompt": null}
{"id": "d5870481-7baa-4216-984f-43ef38ca658c", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 100\n        self.inertia_weight = 0.5\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros_like(particles)\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([float('inf')] * self.population_size)\n        \n        # Evaluate initial population\n        for i in range(self.population_size):\n            score = func(particles[i])\n            personal_best_scores[i] = score\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            # PSO update\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coef * r1 * (personal_best_positions[i] - particles[i])\n                                 + self.social_coef * r2 * (global_best_position - particles[i]))\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n            # Differential Evolution update with crossover\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = particles[np.random.choice(idxs, 3, replace=False)]\n                mutant_vector = a + self.mutation_factor * (b - c)\n                trial_vector = np.copy(particles[i])\n                \n                crossover_mask = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover_mask] = mutant_vector[crossover_mask]\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_score = func(trial_vector)\n                eval_count += 1\n\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial_vector\n                    personal_best_scores[i] = trial_score\n\n                # Update global best\n                if trial_score < personal_best_scores[global_best_index]:\n                    global_best_position = trial_vector\n                    global_best_index = i\n\n        return global_best_position", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization with Differential Evolution for improved global search and fine-tuning capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "86b3e4f1-22cc-4fb2-97cc-bf4bb4405e19", "metadata": {"aucs": [0.4882472281863305, 0.5164996094393812, 0.49627912463063206, 0.5339702752982873, 0.5404857484433038, 0.547033222410221, 0.49399054113020424, 0.5367743327470891, 0.5119730119579462, 0.1706997127269757, 0.16635505076312052, 0.18446456584479554, 0.18604242012498118, 0.18385268429613089, 0.19889041587631473, 0.19350555897906274, 0.18935136805081465, 0.186113004482099, 0.1307654169093807, 0.0896874251953903, 0.1412118423293054, 0.12142484023944233, 0.08837419841250671, 0.10400118280198245, 0.0964554587419576, 0.11658723844656671, 0.11926491685202545, 0.08929049749518203, 0.09355381931055196, 0.09727303635479634, 0.09026961265237132, 0.09423101095621911, 0.09339318029108867, 0.08134358186533541, 0.08978638175382525, 0.0790833264319073, 0.9624677687815185, 0.9855801791358813, 0.9816224124392043, 0.9588006997707941, 0.9759509140344366, 0.9710092523361906, 0.9847789324109596, 0.9782110500998692, 0.98016966668225, 0.3034460677447628, 0.3070791946049275, 0.3162936841526668, 0.26956904150950545, 0.27971313253914787, 0.2897636724461585, 0.30055476618523735, 0.3091051582244504, 0.29971065338511116, 0.575103760195953, 0.6579369174912328, 0.5756957078252307, 0.578457448384498, 0.62268343346853, 0.5348743605197566, 0.5437377063519533, 0.5750864631031573, 0.6026443184059901, 0.19122557781747151, 0.219926728416182, 0.17708813534241585, 0.1523831002292707, 0.17127873663224114, 0.24081197620533124, 0.18821531399816682, 0.10537279412279565, 0.21402145621295277, 0.2046246795081199, 0.19412499079843515, 0.20112124180673951, 0.20074072515046604, 0.18249195134365226, 0.1905082713072752, 0.2089302453317663, 0.19436623916189255, 0.2049281654583116, 0.0068166536550172685, 0.0837911965861654, 0.050516084582435505, 0.08976494540162006, 0.024829806428101286, 0.059188024680768336, 0.07305783740295468, 0.0964648656103706, 0.05769154514049968, 0.16280677835660884, 0.13777513171727374, 0.1716677221194739, 0.16142186592296115, 0.1234805081916649, 0.1397229977283585, 0.1689893019576535, 0.19814437959424513, 0.10939187298388475, 0.03371722574371072, 0.01923355698663376, 0.005416925536914974, 0.04565091917775321, 0.05293169986076862, 0.0184420315537287, 0.04294472623437107, 0.05384869480282728, 0.06862652834993865, 0.1434727307465219, 0.13014516524304764, 0.14283094183897305, 0.15476437716028124, 0.14335469825078906, 0.15476551997128118, 0.15389314040201207, 0.14499099412110517, 0.1646586539936239, 0.42255470889347735, 0.46454075466293065, 0.44103809128390825, 0.4445627656988088, 0.47217832809756455, 0.45296131431367226, 0.44219202469859464, 0.44168740411218377, 0.44493214750241983, 0.11182782387379753, 0.11173558176568021, 0.10138240106614815, 0.12488674551975909, 0.10273332347253195, 0.0970848950327079, 0.10894600019138578, 0.1130670277428173, 0.11829577546665515, 0.14540727231836847, 0.28447483892739733, 0.26440216718424314, 0.1827169809011342, 0.1967818721167539, 0.1290231784956315, 0.22484703138983853, 0.2435070355954998, 0.14288332363901612, 0.3074153083721701, 0.3034971554251098, 0.323958818223814, 0.3218228418410899, 0.3013796916450162, 0.3152165178622156, 0.3027670634632387, 0.3207432053900766, 0.3102628188868207, 0.2426007391435272, 0.21945623775416667, 0.268208028565292, 0.24495150191609605, 0.22065384399611787, 0.2703326499446467, 0.2520514025458884, 0.2640574256321997, 0.23775578206788373, 0.22330900122434794, 0.20084061105721895, 0.20237536743761497, 0.19086571663572038, 0.20448237248981416, 0.1846514790920929, 0.18829689955191709, 0.22010501926862958, 0.20704392112805026, 0.19970469159745197, 0.18850720732108373, 0.18254084549289917, 0.25912294469449937, 0.19604031895930163, 0.17935684116599004, 0.19282140363331945, 0.19175608739215821, 0.18992982248363355, 0.5541751596749267, 0.18046459927013492, 0.7235462915111932, 0.5502756818579533, 0.19248006472901402, 0.6572431188512124, 0.49559553012688085, 0.17391510325816872, 0.6707153637156391, 0.6286220117657617, 0.16964131868621912, 0.1908374933944862, 0.587157252836209, 0.5686223380915884, 0.6500050281667298, 0.20784635578758293, 0.12598989547462092, 0.6967624706510098, 0.1691155437474563, 0.19560187661169282, 0.1967090441389101, 0.17095352215511195, 0.1891195529401717, 0.1773154045473122, 0.18015985376441856, 0.1865000452760659, 0.18157214803937605, 0.07491902707087594, 0.07967315296110045, 0.07822741346497764, 0.0905098924597636, 0.08109982530064042, 0.08927050950122395, 0.08599735345014836, 0.07840666898783799, 0.07588224010329336]}, "mutation_prompt": null}
{"id": "7b55dd80-84e0-4d66-a6bc-5bbb04b943c0", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 100\n        self.inertia_weight = 0.5\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros_like(particles)\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([float('inf')] * self.population_size)\n        \n        # Evaluate initial population\n        for i in range(self.population_size):\n            score = func(particles[i])\n            personal_best_scores[i] = score\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            # PSO update\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coef * r1 * (personal_best_positions[i] - particles[i])\n                                 + self.social_coef * r2 * (global_best_position - particles[i]))\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n            # Differential Evolution update with crossover\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = particles[np.random.choice(idxs, 3, replace=False)]\n                mutant_vector = a + self.mutation_factor * (b - c)\n                trial_vector = np.copy(particles[i])\n                \n                crossover_mask = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover_mask] = mutant_vector[crossover_mask]\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_score = func(trial_vector)\n                eval_count += 1\n\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial_vector\n                    personal_best_scores[i] = trial_score\n\n                # Update global best\n                if trial_score < personal_best_scores[global_best_index]:\n                    global_best_position = trial_vector\n                    global_best_index = i\n\n        return global_best_position", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization with Differential Evolution for improved global search and fine-tuning capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "86b3e4f1-22cc-4fb2-97cc-bf4bb4405e19", "metadata": {"aucs": [0.4882472281863305, 0.5164996094393812, 0.49627912463063206, 0.5339702752982873, 0.5404857484433038, 0.547033222410221, 0.49399054113020424, 0.5367743327470891, 0.5119730119579462, 0.1706997127269757, 0.16635505076312052, 0.18446456584479554, 0.18604242012498118, 0.18385268429613089, 0.19889041587631473, 0.19350555897906274, 0.18935136805081465, 0.186113004482099, 0.1307654169093807, 0.0896874251953903, 0.1412118423293054, 0.12142484023944233, 0.08837419841250671, 0.10400118280198245, 0.0964554587419576, 0.11658723844656671, 0.11926491685202545, 0.08929049749518203, 0.09355381931055196, 0.09727303635479634, 0.09026961265237132, 0.09423101095621911, 0.09339318029108867, 0.08134358186533541, 0.08978638175382525, 0.0790833264319073, 0.9624677687815185, 0.9855801791358813, 0.9816224124392043, 0.9588006997707941, 0.9759509140344366, 0.9710092523361906, 0.9847789324109596, 0.9782110500998692, 0.98016966668225, 0.3034460677447628, 0.3070791946049275, 0.3162936841526668, 0.26956904150950545, 0.27971313253914787, 0.2897636724461585, 0.30055476618523735, 0.3091051582244504, 0.29971065338511116, 0.575103760195953, 0.6579369174912328, 0.5756957078252307, 0.578457448384498, 0.62268343346853, 0.5348743605197566, 0.5437377063519533, 0.5750864631031573, 0.6026443184059901, 0.19122557781747151, 0.219926728416182, 0.17708813534241585, 0.1523831002292707, 0.17127873663224114, 0.24081197620533124, 0.18821531399816682, 0.10537279412279565, 0.21402145621295277, 0.2046246795081199, 0.19412499079843515, 0.20112124180673951, 0.20074072515046604, 0.18249195134365226, 0.1905082713072752, 0.2089302453317663, 0.19436623916189255, 0.2049281654583116, 0.0068166536550172685, 0.0837911965861654, 0.050516084582435505, 0.08976494540162006, 0.024829806428101286, 0.059188024680768336, 0.07305783740295468, 0.0964648656103706, 0.05769154514049968, 0.16280677835660884, 0.13777513171727374, 0.1716677221194739, 0.16142186592296115, 0.1234805081916649, 0.1397229977283585, 0.1689893019576535, 0.19814437959424513, 0.10939187298388475, 0.03371722574371072, 0.01923355698663376, 0.005416925536914974, 0.04565091917775321, 0.05293169986076862, 0.0184420315537287, 0.04294472623437107, 0.05384869480282728, 0.06862652834993865, 0.1434727307465219, 0.13014516524304764, 0.14283094183897305, 0.15476437716028124, 0.14335469825078906, 0.15476551997128118, 0.15389314040201207, 0.14499099412110517, 0.1646586539936239, 0.42255470889347735, 0.46454075466293065, 0.44103809128390825, 0.4445627656988088, 0.47217832809756455, 0.45296131431367226, 0.44219202469859464, 0.44168740411218377, 0.44493214750241983, 0.11182782387379753, 0.11173558176568021, 0.10138240106614815, 0.12488674551975909, 0.10273332347253195, 0.0970848950327079, 0.10894600019138578, 0.1130670277428173, 0.11829577546665515, 0.14540727231836847, 0.28447483892739733, 0.26440216718424314, 0.1827169809011342, 0.1967818721167539, 0.1290231784956315, 0.22484703138983853, 0.2435070355954998, 0.14288332363901612, 0.3074153083721701, 0.3034971554251098, 0.323958818223814, 0.3218228418410899, 0.3013796916450162, 0.3152165178622156, 0.3027670634632387, 0.3207432053900766, 0.3102628188868207, 0.2426007391435272, 0.21945623775416667, 0.268208028565292, 0.24495150191609605, 0.22065384399611787, 0.2703326499446467, 0.2520514025458884, 0.2640574256321997, 0.23775578206788373, 0.22330900122434794, 0.20084061105721895, 0.20237536743761497, 0.19086571663572038, 0.20448237248981416, 0.1846514790920929, 0.18829689955191709, 0.22010501926862958, 0.20704392112805026, 0.19970469159745197, 0.18850720732108373, 0.18254084549289917, 0.25912294469449937, 0.19604031895930163, 0.17935684116599004, 0.19282140363331945, 0.19175608739215821, 0.18992982248363355, 0.5541751596749267, 0.18046459927013492, 0.7235462915111932, 0.5502756818579533, 0.19248006472901402, 0.6572431188512124, 0.49559553012688085, 0.17391510325816872, 0.6707153637156391, 0.6286220117657617, 0.16964131868621912, 0.1908374933944862, 0.587157252836209, 0.5686223380915884, 0.6500050281667298, 0.20784635578758293, 0.12598989547462092, 0.6967624706510098, 0.1691155437474563, 0.19560187661169282, 0.1967090441389101, 0.17095352215511195, 0.1891195529401717, 0.1773154045473122, 0.18015985376441856, 0.1865000452760659, 0.18157214803937605, 0.07491902707087594, 0.07967315296110045, 0.07822741346497764, 0.0905098924597636, 0.08109982530064042, 0.08927050950122395, 0.08599735345014836, 0.07840666898783799, 0.07588224010329336]}, "mutation_prompt": null}
{"id": "572343ab-5c8a-49a9-b94c-e6d5ebbb6aa7", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 100\n        self.inertia_weight = 0.5\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros_like(particles)\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([float('inf')] * self.population_size)\n        \n        # Evaluate initial population\n        for i in range(self.population_size):\n            score = func(particles[i])\n            personal_best_scores[i] = score\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            # PSO update\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coef * r1 * (personal_best_positions[i] - particles[i])\n                                 + self.social_coef * r2 * (global_best_position - particles[i]))\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n            # Differential Evolution update with crossover\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = particles[np.random.choice(idxs, 3, replace=False)]\n                mutant_vector = a + self.mutation_factor * (b - c)\n                trial_vector = np.copy(particles[i])\n                \n                crossover_mask = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover_mask] = mutant_vector[crossover_mask]\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_score = func(trial_vector)\n                eval_count += 1\n\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial_vector\n                    personal_best_scores[i] = trial_score\n\n                # Update global best\n                if trial_score < personal_best_scores[global_best_index]:\n                    global_best_position = trial_vector\n                    global_best_index = i\n\n        return global_best_position", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization with Differential Evolution for improved global search and fine-tuning capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "86b3e4f1-22cc-4fb2-97cc-bf4bb4405e19", "metadata": {"aucs": [0.4882472281863305, 0.5164996094393812, 0.49627912463063206, 0.5339702752982873, 0.5404857484433038, 0.547033222410221, 0.49399054113020424, 0.5367743327470891, 0.5119730119579462, 0.1706997127269757, 0.16635505076312052, 0.18446456584479554, 0.18604242012498118, 0.18385268429613089, 0.19889041587631473, 0.19350555897906274, 0.18935136805081465, 0.186113004482099, 0.1307654169093807, 0.0896874251953903, 0.1412118423293054, 0.12142484023944233, 0.08837419841250671, 0.10400118280198245, 0.0964554587419576, 0.11658723844656671, 0.11926491685202545, 0.08929049749518203, 0.09355381931055196, 0.09727303635479634, 0.09026961265237132, 0.09423101095621911, 0.09339318029108867, 0.08134358186533541, 0.08978638175382525, 0.0790833264319073, 0.9624677687815185, 0.9855801791358813, 0.9816224124392043, 0.9588006997707941, 0.9759509140344366, 0.9710092523361906, 0.9847789324109596, 0.9782110500998692, 0.98016966668225, 0.3034460677447628, 0.3070791946049275, 0.3162936841526668, 0.26956904150950545, 0.27971313253914787, 0.2897636724461585, 0.30055476618523735, 0.3091051582244504, 0.29971065338511116, 0.575103760195953, 0.6579369174912328, 0.5756957078252307, 0.578457448384498, 0.62268343346853, 0.5348743605197566, 0.5437377063519533, 0.5750864631031573, 0.6026443184059901, 0.19122557781747151, 0.219926728416182, 0.17708813534241585, 0.1523831002292707, 0.17127873663224114, 0.24081197620533124, 0.18821531399816682, 0.10537279412279565, 0.21402145621295277, 0.2046246795081199, 0.19412499079843515, 0.20112124180673951, 0.20074072515046604, 0.18249195134365226, 0.1905082713072752, 0.2089302453317663, 0.19436623916189255, 0.2049281654583116, 0.0068166536550172685, 0.0837911965861654, 0.050516084582435505, 0.08976494540162006, 0.024829806428101286, 0.059188024680768336, 0.07305783740295468, 0.0964648656103706, 0.05769154514049968, 0.16280677835660884, 0.13777513171727374, 0.1716677221194739, 0.16142186592296115, 0.1234805081916649, 0.1397229977283585, 0.1689893019576535, 0.19814437959424513, 0.10939187298388475, 0.03371722574371072, 0.01923355698663376, 0.005416925536914974, 0.04565091917775321, 0.05293169986076862, 0.0184420315537287, 0.04294472623437107, 0.05384869480282728, 0.06862652834993865, 0.1434727307465219, 0.13014516524304764, 0.14283094183897305, 0.15476437716028124, 0.14335469825078906, 0.15476551997128118, 0.15389314040201207, 0.14499099412110517, 0.1646586539936239, 0.42255470889347735, 0.46454075466293065, 0.44103809128390825, 0.4445627656988088, 0.47217832809756455, 0.45296131431367226, 0.44219202469859464, 0.44168740411218377, 0.44493214750241983, 0.11182782387379753, 0.11173558176568021, 0.10138240106614815, 0.12488674551975909, 0.10273332347253195, 0.0970848950327079, 0.10894600019138578, 0.1130670277428173, 0.11829577546665515, 0.14540727231836847, 0.28447483892739733, 0.26440216718424314, 0.1827169809011342, 0.1967818721167539, 0.1290231784956315, 0.22484703138983853, 0.2435070355954998, 0.14288332363901612, 0.3074153083721701, 0.3034971554251098, 0.323958818223814, 0.3218228418410899, 0.3013796916450162, 0.3152165178622156, 0.3027670634632387, 0.3207432053900766, 0.3102628188868207, 0.2426007391435272, 0.21945623775416667, 0.268208028565292, 0.24495150191609605, 0.22065384399611787, 0.2703326499446467, 0.2520514025458884, 0.2640574256321997, 0.23775578206788373, 0.22330900122434794, 0.20084061105721895, 0.20237536743761497, 0.19086571663572038, 0.20448237248981416, 0.1846514790920929, 0.18829689955191709, 0.22010501926862958, 0.20704392112805026, 0.19970469159745197, 0.18850720732108373, 0.18254084549289917, 0.25912294469449937, 0.19604031895930163, 0.17935684116599004, 0.19282140363331945, 0.19175608739215821, 0.18992982248363355, 0.5541751596749267, 0.18046459927013492, 0.7235462915111932, 0.5502756818579533, 0.19248006472901402, 0.6572431188512124, 0.49559553012688085, 0.17391510325816872, 0.6707153637156391, 0.6286220117657617, 0.16964131868621912, 0.1908374933944862, 0.587157252836209, 0.5686223380915884, 0.6500050281667298, 0.20784635578758293, 0.12598989547462092, 0.6967624706510098, 0.1691155437474563, 0.19560187661169282, 0.1967090441389101, 0.17095352215511195, 0.1891195529401717, 0.1773154045473122, 0.18015985376441856, 0.1865000452760659, 0.18157214803937605, 0.07491902707087594, 0.07967315296110045, 0.07822741346497764, 0.0905098924597636, 0.08109982530064042, 0.08927050950122395, 0.08599735345014836, 0.07840666898783799, 0.07588224010329336]}, "mutation_prompt": null}
{"id": "9b982ea7-0183-45f9-b959-89b2a865ddda", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 100\n        self.initial_population_size = self.population_size\n        self.inertia_weight = 0.9\n        self.inertia_weight_min = 0.4\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros_like(particles)\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([float('inf')] * self.population_size)\n        \n        # Evaluate initial population\n        for i in range(self.population_size):\n            score = func(particles[i])\n            personal_best_scores[i] = score\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            # Adaptive inertia weight\n            self.inertia_weight = max(self.inertia_weight_min, self.inertia_weight * 0.99)\n            \n            # PSO update\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coef * r1 * (personal_best_positions[i] - particles[i])\n                                 + self.social_coef * r2 * (global_best_position - particles[i]))\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n            # Dynamic population reduction\n            if self.budget - eval_count < self.initial_population_size:\n                self.population_size = max(2, self.budget - eval_count)\n\n            # Differential Evolution update with crossover\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = particles[np.random.choice(idxs, 3, replace=False)]\n                mutant_vector = a + self.mutation_factor * (b - c)\n                trial_vector = np.copy(particles[i])\n                \n                crossover_mask = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover_mask] = mutant_vector[crossover_mask]\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_score = func(trial_vector)\n                eval_count += 1\n\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial_vector\n                    personal_best_scores[i] = trial_score\n\n                # Update global best\n                if trial_score < personal_best_scores[global_best_index]:\n                    global_best_position = trial_vector\n                    global_best_index = i\n\n        return global_best_position", "name": "HybridPSODE", "description": "Introduced adaptive inertia weight and dynamic population size reduction to improve convergence speed and efficiency.", "configspace": "", "generation": 8, "fitness": 0.21497323603045188, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.20.", "error": "", "parent_id": "86b3e4f1-22cc-4fb2-97cc-bf4bb4405e19", "metadata": {"aucs": [0.38184195853375646, 0.39351509553806596, 0.4031043500179192, 0.44555784918218844, 0.4149540871484627, 0.4288129765598335, 0.3868182339254145, 0.4087583258813201, 0.42595929850387115, 0.0894317819992837, 0.049671093309398784, 0.10395684384396608, 0.0814290741929028, 0.08292700713478751, 0.09396107005498566, 0.09219018488963682, 0.10384994656888591, 0.08727732884594075, 0.08968504785890197, 0.08913628673002949, 0.08263510470063573, 0.09480594216226712, 0.09145604282427267, 0.09150715136966192, 0.08519584069007557, 0.10109251140969955, 0.08212320946532814, 0.08412016508081921, 0.07698925472770857, 0.0843202681281342, 0.0714694136422277, 0.08310959343696811, 0.08175372183911389, 0.08042106619764511, 0.07026013039966639, 0.0752725889587249, 0.968064355777051, 0.9855801791358813, 0.98046318417476, 0.9719266299142992, 0.9762836731762572, 0.9770967171612708, 0.9847789324109596, 0.9785635672963758, 0.9792142810064787, 0.2045310484927516, 0.23252104017849085, 0.22910084476439285, 0.20749247995543796, 0.19745627237900376, 0.23148384108687592, 0.17791848164506885, 0.2380004877183023, 0.2316753564460029, 0.33926370981869036, 0.42004309810921237, 0.40968211329010085, 0.40297281995670897, 0.43688773278896775, 0.18008619160334494, 0.3551491150175863, 0.3924447727996918, 0.41142212676103906, 0.12977275703949542, 0.13972340109047543, 0.13410507701805763, 0.10749538823015303, 0.13514625482516673, 0.13133491817046672, 0.1258666074428123, 0.1033992611034138, 0.12182017876091944, 0.0935011218238182, 0.08408804609669973, 0.10337741110779008, 0.10631435464931804, 0.1336374368173987, 0.1165124465571622, 0.09804901593614901, 0.10966897402609321, 0.10325851612753745, 0.03800383550756248, 0.014013820215877382, 0.0546615167743385, 0.019670496233937795, 0.03321770952671266, 0.02448741401933352, 0.0596562520336249, 0.037224160128728756, 0.017095385208387937, 0.07530031434631479, 0.06587737168849339, 0.10702583771442387, 0.11253754492208135, 0.1268724620598456, 0.0810813823065033, 0.11831299346985646, 0.10334341898280652, 0.12221629668433487, 0.012125523354966528, 0.022213787673266983, 0.007626270531110868, 0.010097700735050008, 0.01664377816921092, 0.019014262851979713, 0.017584520008827154, 0.016462818334498475, 0.02137799258861084, 0.08410522286817013, 0.09388920376075327, 0.09337009715126787, 0.11132135122461462, 0.08750238022912449, 0.09506724909265063, 0.06119326427338079, 0.09708301200656955, 0.1039767220924821, 0.3583411148561283, 0.3477259187070968, 0.3548298139679097, 0.37572536897198083, 0.36897449903333546, 0.37906470911738843, 0.3505136605590444, 0.32240930877063745, 0.3603796418871268, 0.09681198472712149, 0.10179955510518246, 0.10987288066168277, 0.08156807467465055, 0.07656886169122334, 0.09277968521920432, 0.07841053097266126, 0.08094007932815916, 0.08687572112548603, 0.1411885743399478, 0.13397631456130843, 0.14184400892937443, 0.14214903219195474, 0.14550831858927782, 0.1552437512144481, 0.15519589486037544, 0.19227585039067618, 0.12196672424083521, 0.23764024182660715, 0.24860848614618025, 0.26696447912547683, 0.23905036586668005, 0.2529783513986179, 0.2656486111069445, 0.268658341486797, 0.2676202188225434, 0.264296274507443, 0.1984915035878666, 0.16800570335864473, 0.2167822889630464, 0.18705395849242934, 0.14734108819312264, 0.22119115117707555, 0.21078798099968654, 0.2159064223549474, 0.19796155941830873, 0.16908164248581348, 0.18552444990420935, 0.18345115869763495, 0.17539700403930825, 0.1688590331911648, 0.19383471268301578, 0.20806186911094482, 0.19974599886588806, 0.225311638988123, 0.18424831178460654, 0.18102315777083733, 0.1675218937881, 0.1740073079727379, 0.1757579234881088, 0.16439341115233963, 0.17966735972101067, 0.19863303672553656, 0.18419989907563117, 0.1460094739295067, 0.49252324080819576, 0.5668703954540664, 0.46981040205404623, 0.47082366077484616, 0.44353831668841537, 0.3270418930894222, 0.45914935484900454, 0.4569216156589242, 0.3779003432201834, 0.1694839776371182, 0.19139121390089453, 0.4009523651601672, 0.45818109665318785, 0.4001259087410426, 0.3254570446852424, 0.3768103953018155, 0.43875935520794784, 0.18847872905525676, 0.21246428599517309, 0.1746499212134902, 0.18272415513039053, 0.18446979006421815, 0.17300109417141252, 0.1916577603273617, 0.1939000850134489, 0.1999827833726514, 0.07130059270769029, 0.07244877354386159, 0.08183960829896386, 0.06986569290800049, 0.07402372119555733, 0.07660900358461475, 0.07205678130094662, 0.0765887311279384, 0.07196327057082286]}, "mutation_prompt": null}
{"id": "d53d311d-3a34-4285-b497-030f8c48c623", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 100\n        self.inertia_weight = 0.5\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros_like(particles)\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([float('inf')] * self.population_size)\n        \n        # Evaluate initial population\n        for i in range(self.population_size):\n            score = func(particles[i])\n            personal_best_scores[i] = score\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            # PSO update\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coef * r1 * (personal_best_positions[i] - particles[i])\n                                 + self.social_coef * r2 * (global_best_position - particles[i]))\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n            # Differential Evolution update with crossover\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = particles[np.random.choice(idxs, 3, replace=False)]\n                mutant_vector = a + self.mutation_factor * (b - c)\n                trial_vector = np.copy(particles[i])\n                \n                crossover_mask = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover_mask] = mutant_vector[crossover_mask]\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_score = func(trial_vector)\n                eval_count += 1\n\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial_vector\n                    personal_best_scores[i] = trial_score\n\n                # Update global best\n                if trial_score < personal_best_scores[global_best_index]:\n                    global_best_position = trial_vector\n                    global_best_index = i\n\n        return global_best_position", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization with Differential Evolution for improved global search and fine-tuning capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "86b3e4f1-22cc-4fb2-97cc-bf4bb4405e19", "metadata": {"aucs": [0.4882472281863305, 0.5164996094393812, 0.49627912463063206, 0.5339702752982873, 0.5404857484433038, 0.547033222410221, 0.49399054113020424, 0.5367743327470891, 0.5119730119579462, 0.1706997127269757, 0.16635505076312052, 0.18446456584479554, 0.18604242012498118, 0.18385268429613089, 0.19889041587631473, 0.19350555897906274, 0.18935136805081465, 0.186113004482099, 0.1307654169093807, 0.0896874251953903, 0.1412118423293054, 0.12142484023944233, 0.08837419841250671, 0.10400118280198245, 0.0964554587419576, 0.11658723844656671, 0.11926491685202545, 0.08929049749518203, 0.09355381931055196, 0.09727303635479634, 0.09026961265237132, 0.09423101095621911, 0.09339318029108867, 0.08134358186533541, 0.08978638175382525, 0.0790833264319073, 0.9624677687815185, 0.9855801791358813, 0.9816224124392043, 0.9588006997707941, 0.9759509140344366, 0.9710092523361906, 0.9847789324109596, 0.9782110500998692, 0.98016966668225, 0.3034460677447628, 0.3070791946049275, 0.3162936841526668, 0.26956904150950545, 0.27971313253914787, 0.2897636724461585, 0.30055476618523735, 0.3091051582244504, 0.29971065338511116, 0.575103760195953, 0.6579369174912328, 0.5756957078252307, 0.578457448384498, 0.62268343346853, 0.5348743605197566, 0.5437377063519533, 0.5750864631031573, 0.6026443184059901, 0.19122557781747151, 0.219926728416182, 0.17708813534241585, 0.1523831002292707, 0.17127873663224114, 0.24081197620533124, 0.18821531399816682, 0.10537279412279565, 0.21402145621295277, 0.2046246795081199, 0.19412499079843515, 0.20112124180673951, 0.20074072515046604, 0.18249195134365226, 0.1905082713072752, 0.2089302453317663, 0.19436623916189255, 0.2049281654583116, 0.0068166536550172685, 0.0837911965861654, 0.050516084582435505, 0.08976494540162006, 0.024829806428101286, 0.059188024680768336, 0.07305783740295468, 0.0964648656103706, 0.05769154514049968, 0.16280677835660884, 0.13777513171727374, 0.1716677221194739, 0.16142186592296115, 0.1234805081916649, 0.1397229977283585, 0.1689893019576535, 0.19814437959424513, 0.10939187298388475, 0.03371722574371072, 0.01923355698663376, 0.005416925536914974, 0.04565091917775321, 0.05293169986076862, 0.0184420315537287, 0.04294472623437107, 0.05384869480282728, 0.06862652834993865, 0.1434727307465219, 0.13014516524304764, 0.14283094183897305, 0.15476437716028124, 0.14335469825078906, 0.15476551997128118, 0.15389314040201207, 0.14499099412110517, 0.1646586539936239, 0.42255470889347735, 0.46454075466293065, 0.44103809128390825, 0.4445627656988088, 0.47217832809756455, 0.45296131431367226, 0.44219202469859464, 0.44168740411218377, 0.44493214750241983, 0.11182782387379753, 0.11173558176568021, 0.10138240106614815, 0.12488674551975909, 0.10273332347253195, 0.0970848950327079, 0.10894600019138578, 0.1130670277428173, 0.11829577546665515, 0.14540727231836847, 0.28447483892739733, 0.26440216718424314, 0.1827169809011342, 0.1967818721167539, 0.1290231784956315, 0.22484703138983853, 0.2435070355954998, 0.14288332363901612, 0.3074153083721701, 0.3034971554251098, 0.323958818223814, 0.3218228418410899, 0.3013796916450162, 0.3152165178622156, 0.3027670634632387, 0.3207432053900766, 0.3102628188868207, 0.2426007391435272, 0.21945623775416667, 0.268208028565292, 0.24495150191609605, 0.22065384399611787, 0.2703326499446467, 0.2520514025458884, 0.2640574256321997, 0.23775578206788373, 0.22330900122434794, 0.20084061105721895, 0.20237536743761497, 0.19086571663572038, 0.20448237248981416, 0.1846514790920929, 0.18829689955191709, 0.22010501926862958, 0.20704392112805026, 0.19970469159745197, 0.18850720732108373, 0.18254084549289917, 0.25912294469449937, 0.19604031895930163, 0.17935684116599004, 0.19282140363331945, 0.19175608739215821, 0.18992982248363355, 0.5541751596749267, 0.18046459927013492, 0.7235462915111932, 0.5502756818579533, 0.19248006472901402, 0.6572431188512124, 0.49559553012688085, 0.17391510325816872, 0.6707153637156391, 0.6286220117657617, 0.16964131868621912, 0.1908374933944862, 0.587157252836209, 0.5686223380915884, 0.6500050281667298, 0.20784635578758293, 0.12598989547462092, 0.6967624706510098, 0.1691155437474563, 0.19560187661169282, 0.1967090441389101, 0.17095352215511195, 0.1891195529401717, 0.1773154045473122, 0.18015985376441856, 0.1865000452760659, 0.18157214803937605, 0.07491902707087594, 0.07967315296110045, 0.07822741346497764, 0.0905098924597636, 0.08109982530064042, 0.08927050950122395, 0.08599735345014836, 0.07840666898783799, 0.07588224010329336]}, "mutation_prompt": null}
{"id": "0241879e-58b8-4817-9cd5-703321142ced", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 100\n        self.inertia_weight = 0.5\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros_like(particles)\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([float('inf')] * self.population_size)\n        \n        # Evaluate initial population\n        for i in range(self.population_size):\n            score = func(particles[i])\n            personal_best_scores[i] = score\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            # PSO update\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coef * r1 * (personal_best_positions[i] - particles[i])\n                                 + self.social_coef * r2 * (global_best_position - particles[i]))\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n            # Differential Evolution update with crossover\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = particles[np.random.choice(idxs, 3, replace=False)]\n                mutant_vector = a + self.mutation_factor * (b - c)\n                trial_vector = np.copy(particles[i])\n                \n                crossover_mask = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover_mask] = mutant_vector[crossover_mask]\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_score = func(trial_vector)\n                eval_count += 1\n\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial_vector\n                    personal_best_scores[i] = trial_score\n\n                # Update global best\n                if trial_score < personal_best_scores[global_best_index]:\n                    global_best_position = trial_vector\n                    global_best_index = i\n\n        return global_best_position", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization with Differential Evolution for improved global search and fine-tuning capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "86b3e4f1-22cc-4fb2-97cc-bf4bb4405e19", "metadata": {"aucs": [0.4882472281863305, 0.5164996094393812, 0.49627912463063206, 0.5339702752982873, 0.5404857484433038, 0.547033222410221, 0.49399054113020424, 0.5367743327470891, 0.5119730119579462, 0.1706997127269757, 0.16635505076312052, 0.18446456584479554, 0.18604242012498118, 0.18385268429613089, 0.19889041587631473, 0.19350555897906274, 0.18935136805081465, 0.186113004482099, 0.1307654169093807, 0.0896874251953903, 0.1412118423293054, 0.12142484023944233, 0.08837419841250671, 0.10400118280198245, 0.0964554587419576, 0.11658723844656671, 0.11926491685202545, 0.08929049749518203, 0.09355381931055196, 0.09727303635479634, 0.09026961265237132, 0.09423101095621911, 0.09339318029108867, 0.08134358186533541, 0.08978638175382525, 0.0790833264319073, 0.9624677687815185, 0.9855801791358813, 0.9816224124392043, 0.9588006997707941, 0.9759509140344366, 0.9710092523361906, 0.9847789324109596, 0.9782110500998692, 0.98016966668225, 0.3034460677447628, 0.3070791946049275, 0.3162936841526668, 0.26956904150950545, 0.27971313253914787, 0.2897636724461585, 0.30055476618523735, 0.3091051582244504, 0.29971065338511116, 0.575103760195953, 0.6579369174912328, 0.5756957078252307, 0.578457448384498, 0.62268343346853, 0.5348743605197566, 0.5437377063519533, 0.5750864631031573, 0.6026443184059901, 0.19122557781747151, 0.219926728416182, 0.17708813534241585, 0.1523831002292707, 0.17127873663224114, 0.24081197620533124, 0.18821531399816682, 0.10537279412279565, 0.21402145621295277, 0.2046246795081199, 0.19412499079843515, 0.20112124180673951, 0.20074072515046604, 0.18249195134365226, 0.1905082713072752, 0.2089302453317663, 0.19436623916189255, 0.2049281654583116, 0.0068166536550172685, 0.0837911965861654, 0.050516084582435505, 0.08976494540162006, 0.024829806428101286, 0.059188024680768336, 0.07305783740295468, 0.0964648656103706, 0.05769154514049968, 0.16280677835660884, 0.13777513171727374, 0.1716677221194739, 0.16142186592296115, 0.1234805081916649, 0.1397229977283585, 0.1689893019576535, 0.19814437959424513, 0.10939187298388475, 0.03371722574371072, 0.01923355698663376, 0.005416925536914974, 0.04565091917775321, 0.05293169986076862, 0.0184420315537287, 0.04294472623437107, 0.05384869480282728, 0.06862652834993865, 0.1434727307465219, 0.13014516524304764, 0.14283094183897305, 0.15476437716028124, 0.14335469825078906, 0.15476551997128118, 0.15389314040201207, 0.14499099412110517, 0.1646586539936239, 0.42255470889347735, 0.46454075466293065, 0.44103809128390825, 0.4445627656988088, 0.47217832809756455, 0.45296131431367226, 0.44219202469859464, 0.44168740411218377, 0.44493214750241983, 0.11182782387379753, 0.11173558176568021, 0.10138240106614815, 0.12488674551975909, 0.10273332347253195, 0.0970848950327079, 0.10894600019138578, 0.1130670277428173, 0.11829577546665515, 0.14540727231836847, 0.28447483892739733, 0.26440216718424314, 0.1827169809011342, 0.1967818721167539, 0.1290231784956315, 0.22484703138983853, 0.2435070355954998, 0.14288332363901612, 0.3074153083721701, 0.3034971554251098, 0.323958818223814, 0.3218228418410899, 0.3013796916450162, 0.3152165178622156, 0.3027670634632387, 0.3207432053900766, 0.3102628188868207, 0.2426007391435272, 0.21945623775416667, 0.268208028565292, 0.24495150191609605, 0.22065384399611787, 0.2703326499446467, 0.2520514025458884, 0.2640574256321997, 0.23775578206788373, 0.22330900122434794, 0.20084061105721895, 0.20237536743761497, 0.19086571663572038, 0.20448237248981416, 0.1846514790920929, 0.18829689955191709, 0.22010501926862958, 0.20704392112805026, 0.19970469159745197, 0.18850720732108373, 0.18254084549289917, 0.25912294469449937, 0.19604031895930163, 0.17935684116599004, 0.19282140363331945, 0.19175608739215821, 0.18992982248363355, 0.5541751596749267, 0.18046459927013492, 0.7235462915111932, 0.5502756818579533, 0.19248006472901402, 0.6572431188512124, 0.49559553012688085, 0.17391510325816872, 0.6707153637156391, 0.6286220117657617, 0.16964131868621912, 0.1908374933944862, 0.587157252836209, 0.5686223380915884, 0.6500050281667298, 0.20784635578758293, 0.12598989547462092, 0.6967624706510098, 0.1691155437474563, 0.19560187661169282, 0.1967090441389101, 0.17095352215511195, 0.1891195529401717, 0.1773154045473122, 0.18015985376441856, 0.1865000452760659, 0.18157214803937605, 0.07491902707087594, 0.07967315296110045, 0.07822741346497764, 0.0905098924597636, 0.08109982530064042, 0.08927050950122395, 0.08599735345014836, 0.07840666898783799, 0.07588224010329336]}, "mutation_prompt": null}
{"id": "23a75755-a336-48ab-99fb-59c3d7600883", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 100\n        self.inertia_weight = 0.5\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros_like(particles)\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([float('inf')] * self.population_size)\n        \n        # Evaluate initial population\n        for i in range(self.population_size):\n            score = func(particles[i])\n            personal_best_scores[i] = score\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            # PSO update\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coef * r1 * (personal_best_positions[i] - particles[i])\n                                 + self.social_coef * r2 * (global_best_position - particles[i]))\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n            # Differential Evolution update with crossover\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = particles[np.random.choice(idxs, 3, replace=False)]\n                mutant_vector = a + self.mutation_factor * (b - c)\n                trial_vector = np.copy(particles[i])\n                \n                crossover_mask = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover_mask] = mutant_vector[crossover_mask]\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_score = func(trial_vector)\n                eval_count += 1\n\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial_vector\n                    personal_best_scores[i] = trial_score\n\n                # Update global best\n                if trial_score < personal_best_scores[global_best_index]:\n                    global_best_position = trial_vector\n                    global_best_index = i\n\n        return global_best_position", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization with Differential Evolution for improved global search and fine-tuning capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "86b3e4f1-22cc-4fb2-97cc-bf4bb4405e19", "metadata": {"aucs": [0.4882472281863305, 0.5164996094393812, 0.49627912463063206, 0.5339702752982873, 0.5404857484433038, 0.547033222410221, 0.49399054113020424, 0.5367743327470891, 0.5119730119579462, 0.1706997127269757, 0.16635505076312052, 0.18446456584479554, 0.18604242012498118, 0.18385268429613089, 0.19889041587631473, 0.19350555897906274, 0.18935136805081465, 0.186113004482099, 0.1307654169093807, 0.0896874251953903, 0.1412118423293054, 0.12142484023944233, 0.08837419841250671, 0.10400118280198245, 0.0964554587419576, 0.11658723844656671, 0.11926491685202545, 0.08929049749518203, 0.09355381931055196, 0.09727303635479634, 0.09026961265237132, 0.09423101095621911, 0.09339318029108867, 0.08134358186533541, 0.08978638175382525, 0.0790833264319073, 0.9624677687815185, 0.9855801791358813, 0.9816224124392043, 0.9588006997707941, 0.9759509140344366, 0.9710092523361906, 0.9847789324109596, 0.9782110500998692, 0.98016966668225, 0.3034460677447628, 0.3070791946049275, 0.3162936841526668, 0.26956904150950545, 0.27971313253914787, 0.2897636724461585, 0.30055476618523735, 0.3091051582244504, 0.29971065338511116, 0.575103760195953, 0.6579369174912328, 0.5756957078252307, 0.578457448384498, 0.62268343346853, 0.5348743605197566, 0.5437377063519533, 0.5750864631031573, 0.6026443184059901, 0.19122557781747151, 0.219926728416182, 0.17708813534241585, 0.1523831002292707, 0.17127873663224114, 0.24081197620533124, 0.18821531399816682, 0.10537279412279565, 0.21402145621295277, 0.2046246795081199, 0.19412499079843515, 0.20112124180673951, 0.20074072515046604, 0.18249195134365226, 0.1905082713072752, 0.2089302453317663, 0.19436623916189255, 0.2049281654583116, 0.0068166536550172685, 0.0837911965861654, 0.050516084582435505, 0.08976494540162006, 0.024829806428101286, 0.059188024680768336, 0.07305783740295468, 0.0964648656103706, 0.05769154514049968, 0.16280677835660884, 0.13777513171727374, 0.1716677221194739, 0.16142186592296115, 0.1234805081916649, 0.1397229977283585, 0.1689893019576535, 0.19814437959424513, 0.10939187298388475, 0.03371722574371072, 0.01923355698663376, 0.005416925536914974, 0.04565091917775321, 0.05293169986076862, 0.0184420315537287, 0.04294472623437107, 0.05384869480282728, 0.06862652834993865, 0.1434727307465219, 0.13014516524304764, 0.14283094183897305, 0.15476437716028124, 0.14335469825078906, 0.15476551997128118, 0.15389314040201207, 0.14499099412110517, 0.1646586539936239, 0.42255470889347735, 0.46454075466293065, 0.44103809128390825, 0.4445627656988088, 0.47217832809756455, 0.45296131431367226, 0.44219202469859464, 0.44168740411218377, 0.44493214750241983, 0.11182782387379753, 0.11173558176568021, 0.10138240106614815, 0.12488674551975909, 0.10273332347253195, 0.0970848950327079, 0.10894600019138578, 0.1130670277428173, 0.11829577546665515, 0.14540727231836847, 0.28447483892739733, 0.26440216718424314, 0.1827169809011342, 0.1967818721167539, 0.1290231784956315, 0.22484703138983853, 0.2435070355954998, 0.14288332363901612, 0.3074153083721701, 0.3034971554251098, 0.323958818223814, 0.3218228418410899, 0.3013796916450162, 0.3152165178622156, 0.3027670634632387, 0.3207432053900766, 0.3102628188868207, 0.2426007391435272, 0.21945623775416667, 0.268208028565292, 0.24495150191609605, 0.22065384399611787, 0.2703326499446467, 0.2520514025458884, 0.2640574256321997, 0.23775578206788373, 0.22330900122434794, 0.20084061105721895, 0.20237536743761497, 0.19086571663572038, 0.20448237248981416, 0.1846514790920929, 0.18829689955191709, 0.22010501926862958, 0.20704392112805026, 0.19970469159745197, 0.18850720732108373, 0.18254084549289917, 0.25912294469449937, 0.19604031895930163, 0.17935684116599004, 0.19282140363331945, 0.19175608739215821, 0.18992982248363355, 0.5541751596749267, 0.18046459927013492, 0.7235462915111932, 0.5502756818579533, 0.19248006472901402, 0.6572431188512124, 0.49559553012688085, 0.17391510325816872, 0.6707153637156391, 0.6286220117657617, 0.16964131868621912, 0.1908374933944862, 0.587157252836209, 0.5686223380915884, 0.6500050281667298, 0.20784635578758293, 0.12598989547462092, 0.6967624706510098, 0.1691155437474563, 0.19560187661169282, 0.1967090441389101, 0.17095352215511195, 0.1891195529401717, 0.1773154045473122, 0.18015985376441856, 0.1865000452760659, 0.18157214803937605, 0.07491902707087594, 0.07967315296110045, 0.07822741346497764, 0.0905098924597636, 0.08109982530064042, 0.08927050950122395, 0.08599735345014836, 0.07840666898783799, 0.07588224010329336]}, "mutation_prompt": null}
{"id": "54e5c825-82e8-47d8-88c9-571aeff83469", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 100\n        self.inertia_weight = 0.5\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros_like(particles)\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([float('inf')] * self.population_size)\n        \n        # Evaluate initial population\n        for i in range(self.population_size):\n            score = func(particles[i])\n            personal_best_scores[i] = score\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            # PSO update\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coef * r1 * (personal_best_positions[i] - particles[i])\n                                 + self.social_coef * r2 * (global_best_position - particles[i]))\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n            # Differential Evolution update with crossover\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = particles[np.random.choice(idxs, 3, replace=False)]\n                mutant_vector = a + self.mutation_factor * (b - c)\n                trial_vector = np.copy(particles[i])\n                \n                crossover_mask = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover_mask] = mutant_vector[crossover_mask]\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_score = func(trial_vector)\n                eval_count += 1\n\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial_vector\n                    personal_best_scores[i] = trial_score\n\n                # Update global best\n                if trial_score < personal_best_scores[global_best_index]:\n                    global_best_position = trial_vector\n                    global_best_index = i\n\n        return global_best_position", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization with Differential Evolution for improved global search and fine-tuning capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "86b3e4f1-22cc-4fb2-97cc-bf4bb4405e19", "metadata": {"aucs": [0.4882472281863305, 0.5164996094393812, 0.49627912463063206, 0.5339702752982873, 0.5404857484433038, 0.547033222410221, 0.49399054113020424, 0.5367743327470891, 0.5119730119579462, 0.1706997127269757, 0.16635505076312052, 0.18446456584479554, 0.18604242012498118, 0.18385268429613089, 0.19889041587631473, 0.19350555897906274, 0.18935136805081465, 0.186113004482099, 0.1307654169093807, 0.0896874251953903, 0.1412118423293054, 0.12142484023944233, 0.08837419841250671, 0.10400118280198245, 0.0964554587419576, 0.11658723844656671, 0.11926491685202545, 0.08929049749518203, 0.09355381931055196, 0.09727303635479634, 0.09026961265237132, 0.09423101095621911, 0.09339318029108867, 0.08134358186533541, 0.08978638175382525, 0.0790833264319073, 0.9624677687815185, 0.9855801791358813, 0.9816224124392043, 0.9588006997707941, 0.9759509140344366, 0.9710092523361906, 0.9847789324109596, 0.9782110500998692, 0.98016966668225, 0.3034460677447628, 0.3070791946049275, 0.3162936841526668, 0.26956904150950545, 0.27971313253914787, 0.2897636724461585, 0.30055476618523735, 0.3091051582244504, 0.29971065338511116, 0.575103760195953, 0.6579369174912328, 0.5756957078252307, 0.578457448384498, 0.62268343346853, 0.5348743605197566, 0.5437377063519533, 0.5750864631031573, 0.6026443184059901, 0.19122557781747151, 0.219926728416182, 0.17708813534241585, 0.1523831002292707, 0.17127873663224114, 0.24081197620533124, 0.18821531399816682, 0.10537279412279565, 0.21402145621295277, 0.2046246795081199, 0.19412499079843515, 0.20112124180673951, 0.20074072515046604, 0.18249195134365226, 0.1905082713072752, 0.2089302453317663, 0.19436623916189255, 0.2049281654583116, 0.0068166536550172685, 0.0837911965861654, 0.050516084582435505, 0.08976494540162006, 0.024829806428101286, 0.059188024680768336, 0.07305783740295468, 0.0964648656103706, 0.05769154514049968, 0.16280677835660884, 0.13777513171727374, 0.1716677221194739, 0.16142186592296115, 0.1234805081916649, 0.1397229977283585, 0.1689893019576535, 0.19814437959424513, 0.10939187298388475, 0.03371722574371072, 0.01923355698663376, 0.005416925536914974, 0.04565091917775321, 0.05293169986076862, 0.0184420315537287, 0.04294472623437107, 0.05384869480282728, 0.06862652834993865, 0.1434727307465219, 0.13014516524304764, 0.14283094183897305, 0.15476437716028124, 0.14335469825078906, 0.15476551997128118, 0.15389314040201207, 0.14499099412110517, 0.1646586539936239, 0.42255470889347735, 0.46454075466293065, 0.44103809128390825, 0.4445627656988088, 0.47217832809756455, 0.45296131431367226, 0.44219202469859464, 0.44168740411218377, 0.44493214750241983, 0.11182782387379753, 0.11173558176568021, 0.10138240106614815, 0.12488674551975909, 0.10273332347253195, 0.0970848950327079, 0.10894600019138578, 0.1130670277428173, 0.11829577546665515, 0.14540727231836847, 0.28447483892739733, 0.26440216718424314, 0.1827169809011342, 0.1967818721167539, 0.1290231784956315, 0.22484703138983853, 0.2435070355954998, 0.14288332363901612, 0.3074153083721701, 0.3034971554251098, 0.323958818223814, 0.3218228418410899, 0.3013796916450162, 0.3152165178622156, 0.3027670634632387, 0.3207432053900766, 0.3102628188868207, 0.2426007391435272, 0.21945623775416667, 0.268208028565292, 0.24495150191609605, 0.22065384399611787, 0.2703326499446467, 0.2520514025458884, 0.2640574256321997, 0.23775578206788373, 0.22330900122434794, 0.20084061105721895, 0.20237536743761497, 0.19086571663572038, 0.20448237248981416, 0.1846514790920929, 0.18829689955191709, 0.22010501926862958, 0.20704392112805026, 0.19970469159745197, 0.18850720732108373, 0.18254084549289917, 0.25912294469449937, 0.19604031895930163, 0.17935684116599004, 0.19282140363331945, 0.19175608739215821, 0.18992982248363355, 0.5541751596749267, 0.18046459927013492, 0.7235462915111932, 0.5502756818579533, 0.19248006472901402, 0.6572431188512124, 0.49559553012688085, 0.17391510325816872, 0.6707153637156391, 0.6286220117657617, 0.16964131868621912, 0.1908374933944862, 0.587157252836209, 0.5686223380915884, 0.6500050281667298, 0.20784635578758293, 0.12598989547462092, 0.6967624706510098, 0.1691155437474563, 0.19560187661169282, 0.1967090441389101, 0.17095352215511195, 0.1891195529401717, 0.1773154045473122, 0.18015985376441856, 0.1865000452760659, 0.18157214803937605, 0.07491902707087594, 0.07967315296110045, 0.07822741346497764, 0.0905098924597636, 0.08109982530064042, 0.08927050950122395, 0.08599735345014836, 0.07840666898783799, 0.07588224010329336]}, "mutation_prompt": null}
{"id": "7a2d277c-5d32-4322-b74c-63bb76184712", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 100\n        self.inertia_weight = 0.5\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros_like(particles)\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([float('inf')] * self.population_size)\n        \n        # Evaluate initial population\n        for i in range(self.population_size):\n            score = func(particles[i])\n            personal_best_scores[i] = score\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            # PSO update\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coef * r1 * (personal_best_positions[i] - particles[i])\n                                 + self.social_coef * r2 * (global_best_position - particles[i]))\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n            # Differential Evolution update with crossover\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = particles[np.random.choice(idxs, 3, replace=False)]\n                mutant_vector = a + self.mutation_factor * (b - c)\n                trial_vector = np.copy(particles[i])\n                \n                crossover_mask = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover_mask] = mutant_vector[crossover_mask]\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_score = func(trial_vector)\n                eval_count += 1\n\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial_vector\n                    personal_best_scores[i] = trial_score\n\n                # Update global best\n                if trial_score < personal_best_scores[global_best_index]:\n                    global_best_position = trial_vector\n                    global_best_index = i\n\n        return global_best_position", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization with Differential Evolution for improved global search and fine-tuning capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "86b3e4f1-22cc-4fb2-97cc-bf4bb4405e19", "metadata": {"aucs": [0.4882472281863305, 0.5164996094393812, 0.49627912463063206, 0.5339702752982873, 0.5404857484433038, 0.547033222410221, 0.49399054113020424, 0.5367743327470891, 0.5119730119579462, 0.1706997127269757, 0.16635505076312052, 0.18446456584479554, 0.18604242012498118, 0.18385268429613089, 0.19889041587631473, 0.19350555897906274, 0.18935136805081465, 0.186113004482099, 0.1307654169093807, 0.0896874251953903, 0.1412118423293054, 0.12142484023944233, 0.08837419841250671, 0.10400118280198245, 0.0964554587419576, 0.11658723844656671, 0.11926491685202545, 0.08929049749518203, 0.09355381931055196, 0.09727303635479634, 0.09026961265237132, 0.09423101095621911, 0.09339318029108867, 0.08134358186533541, 0.08978638175382525, 0.0790833264319073, 0.9624677687815185, 0.9855801791358813, 0.9816224124392043, 0.9588006997707941, 0.9759509140344366, 0.9710092523361906, 0.9847789324109596, 0.9782110500998692, 0.98016966668225, 0.3034460677447628, 0.3070791946049275, 0.3162936841526668, 0.26956904150950545, 0.27971313253914787, 0.2897636724461585, 0.30055476618523735, 0.3091051582244504, 0.29971065338511116, 0.575103760195953, 0.6579369174912328, 0.5756957078252307, 0.578457448384498, 0.62268343346853, 0.5348743605197566, 0.5437377063519533, 0.5750864631031573, 0.6026443184059901, 0.19122557781747151, 0.219926728416182, 0.17708813534241585, 0.1523831002292707, 0.17127873663224114, 0.24081197620533124, 0.18821531399816682, 0.10537279412279565, 0.21402145621295277, 0.2046246795081199, 0.19412499079843515, 0.20112124180673951, 0.20074072515046604, 0.18249195134365226, 0.1905082713072752, 0.2089302453317663, 0.19436623916189255, 0.2049281654583116, 0.0068166536550172685, 0.0837911965861654, 0.050516084582435505, 0.08976494540162006, 0.024829806428101286, 0.059188024680768336, 0.07305783740295468, 0.0964648656103706, 0.05769154514049968, 0.16280677835660884, 0.13777513171727374, 0.1716677221194739, 0.16142186592296115, 0.1234805081916649, 0.1397229977283585, 0.1689893019576535, 0.19814437959424513, 0.10939187298388475, 0.03371722574371072, 0.01923355698663376, 0.005416925536914974, 0.04565091917775321, 0.05293169986076862, 0.0184420315537287, 0.04294472623437107, 0.05384869480282728, 0.06862652834993865, 0.1434727307465219, 0.13014516524304764, 0.14283094183897305, 0.15476437716028124, 0.14335469825078906, 0.15476551997128118, 0.15389314040201207, 0.14499099412110517, 0.1646586539936239, 0.42255470889347735, 0.46454075466293065, 0.44103809128390825, 0.4445627656988088, 0.47217832809756455, 0.45296131431367226, 0.44219202469859464, 0.44168740411218377, 0.44493214750241983, 0.11182782387379753, 0.11173558176568021, 0.10138240106614815, 0.12488674551975909, 0.10273332347253195, 0.0970848950327079, 0.10894600019138578, 0.1130670277428173, 0.11829577546665515, 0.14540727231836847, 0.28447483892739733, 0.26440216718424314, 0.1827169809011342, 0.1967818721167539, 0.1290231784956315, 0.22484703138983853, 0.2435070355954998, 0.14288332363901612, 0.3074153083721701, 0.3034971554251098, 0.323958818223814, 0.3218228418410899, 0.3013796916450162, 0.3152165178622156, 0.3027670634632387, 0.3207432053900766, 0.3102628188868207, 0.2426007391435272, 0.21945623775416667, 0.268208028565292, 0.24495150191609605, 0.22065384399611787, 0.2703326499446467, 0.2520514025458884, 0.2640574256321997, 0.23775578206788373, 0.22330900122434794, 0.20084061105721895, 0.20237536743761497, 0.19086571663572038, 0.20448237248981416, 0.1846514790920929, 0.18829689955191709, 0.22010501926862958, 0.20704392112805026, 0.19970469159745197, 0.18850720732108373, 0.18254084549289917, 0.25912294469449937, 0.19604031895930163, 0.17935684116599004, 0.19282140363331945, 0.19175608739215821, 0.18992982248363355, 0.5541751596749267, 0.18046459927013492, 0.7235462915111932, 0.5502756818579533, 0.19248006472901402, 0.6572431188512124, 0.49559553012688085, 0.17391510325816872, 0.6707153637156391, 0.6286220117657617, 0.16964131868621912, 0.1908374933944862, 0.587157252836209, 0.5686223380915884, 0.6500050281667298, 0.20784635578758293, 0.12598989547462092, 0.6967624706510098, 0.1691155437474563, 0.19560187661169282, 0.1967090441389101, 0.17095352215511195, 0.1891195529401717, 0.1773154045473122, 0.18015985376441856, 0.1865000452760659, 0.18157214803937605, 0.07491902707087594, 0.07967315296110045, 0.07822741346497764, 0.0905098924597636, 0.08109982530064042, 0.08927050950122395, 0.08599735345014836, 0.07840666898783799, 0.07588224010329336]}, "mutation_prompt": null}
{"id": "8f473be2-9e2c-464f-baa5-016236be0a7b", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 100\n        self.inertia_weight = 0.5\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros_like(particles)\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([float('inf')] * self.population_size)\n        \n        # Evaluate initial population\n        for i in range(self.population_size):\n            score = func(particles[i])\n            personal_best_scores[i] = score\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            # PSO update\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coef * r1 * (personal_best_positions[i] - particles[i])\n                                 + self.social_coef * r2 * (global_best_position - particles[i]))\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n            # Differential Evolution update with crossover\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = particles[np.random.choice(idxs, 3, replace=False)]\n                mutant_vector = a + self.mutation_factor * (b - c)\n                trial_vector = np.copy(particles[i])\n                \n                crossover_mask = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover_mask] = mutant_vector[crossover_mask]\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_score = func(trial_vector)\n                eval_count += 1\n\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial_vector\n                    personal_best_scores[i] = trial_score\n\n                # Update global best\n                if trial_score < personal_best_scores[global_best_index]:\n                    global_best_position = trial_vector\n                    global_best_index = i\n\n        return global_best_position", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization with Differential Evolution for improved global search and fine-tuning capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "86b3e4f1-22cc-4fb2-97cc-bf4bb4405e19", "metadata": {"aucs": [0.4882472281863305, 0.5164996094393812, 0.49627912463063206, 0.5339702752982873, 0.5404857484433038, 0.547033222410221, 0.49399054113020424, 0.5367743327470891, 0.5119730119579462, 0.1706997127269757, 0.16635505076312052, 0.18446456584479554, 0.18604242012498118, 0.18385268429613089, 0.19889041587631473, 0.19350555897906274, 0.18935136805081465, 0.186113004482099, 0.1307654169093807, 0.0896874251953903, 0.1412118423293054, 0.12142484023944233, 0.08837419841250671, 0.10400118280198245, 0.0964554587419576, 0.11658723844656671, 0.11926491685202545, 0.08929049749518203, 0.09355381931055196, 0.09727303635479634, 0.09026961265237132, 0.09423101095621911, 0.09339318029108867, 0.08134358186533541, 0.08978638175382525, 0.0790833264319073, 0.9624677687815185, 0.9855801791358813, 0.9816224124392043, 0.9588006997707941, 0.9759509140344366, 0.9710092523361906, 0.9847789324109596, 0.9782110500998692, 0.98016966668225, 0.3034460677447628, 0.3070791946049275, 0.3162936841526668, 0.26956904150950545, 0.27971313253914787, 0.2897636724461585, 0.30055476618523735, 0.3091051582244504, 0.29971065338511116, 0.575103760195953, 0.6579369174912328, 0.5756957078252307, 0.578457448384498, 0.62268343346853, 0.5348743605197566, 0.5437377063519533, 0.5750864631031573, 0.6026443184059901, 0.19122557781747151, 0.219926728416182, 0.17708813534241585, 0.1523831002292707, 0.17127873663224114, 0.24081197620533124, 0.18821531399816682, 0.10537279412279565, 0.21402145621295277, 0.2046246795081199, 0.19412499079843515, 0.20112124180673951, 0.20074072515046604, 0.18249195134365226, 0.1905082713072752, 0.2089302453317663, 0.19436623916189255, 0.2049281654583116, 0.0068166536550172685, 0.0837911965861654, 0.050516084582435505, 0.08976494540162006, 0.024829806428101286, 0.059188024680768336, 0.07305783740295468, 0.0964648656103706, 0.05769154514049968, 0.16280677835660884, 0.13777513171727374, 0.1716677221194739, 0.16142186592296115, 0.1234805081916649, 0.1397229977283585, 0.1689893019576535, 0.19814437959424513, 0.10939187298388475, 0.03371722574371072, 0.01923355698663376, 0.005416925536914974, 0.04565091917775321, 0.05293169986076862, 0.0184420315537287, 0.04294472623437107, 0.05384869480282728, 0.06862652834993865, 0.1434727307465219, 0.13014516524304764, 0.14283094183897305, 0.15476437716028124, 0.14335469825078906, 0.15476551997128118, 0.15389314040201207, 0.14499099412110517, 0.1646586539936239, 0.42255470889347735, 0.46454075466293065, 0.44103809128390825, 0.4445627656988088, 0.47217832809756455, 0.45296131431367226, 0.44219202469859464, 0.44168740411218377, 0.44493214750241983, 0.11182782387379753, 0.11173558176568021, 0.10138240106614815, 0.12488674551975909, 0.10273332347253195, 0.0970848950327079, 0.10894600019138578, 0.1130670277428173, 0.11829577546665515, 0.14540727231836847, 0.28447483892739733, 0.26440216718424314, 0.1827169809011342, 0.1967818721167539, 0.1290231784956315, 0.22484703138983853, 0.2435070355954998, 0.14288332363901612, 0.3074153083721701, 0.3034971554251098, 0.323958818223814, 0.3218228418410899, 0.3013796916450162, 0.3152165178622156, 0.3027670634632387, 0.3207432053900766, 0.3102628188868207, 0.2426007391435272, 0.21945623775416667, 0.268208028565292, 0.24495150191609605, 0.22065384399611787, 0.2703326499446467, 0.2520514025458884, 0.2640574256321997, 0.23775578206788373, 0.22330900122434794, 0.20084061105721895, 0.20237536743761497, 0.19086571663572038, 0.20448237248981416, 0.1846514790920929, 0.18829689955191709, 0.22010501926862958, 0.20704392112805026, 0.19970469159745197, 0.18850720732108373, 0.18254084549289917, 0.25912294469449937, 0.19604031895930163, 0.17935684116599004, 0.19282140363331945, 0.19175608739215821, 0.18992982248363355, 0.5541751596749267, 0.18046459927013492, 0.7235462915111932, 0.5502756818579533, 0.19248006472901402, 0.6572431188512124, 0.49559553012688085, 0.17391510325816872, 0.6707153637156391, 0.6286220117657617, 0.16964131868621912, 0.1908374933944862, 0.587157252836209, 0.5686223380915884, 0.6500050281667298, 0.20784635578758293, 0.12598989547462092, 0.6967624706510098, 0.1691155437474563, 0.19560187661169282, 0.1967090441389101, 0.17095352215511195, 0.1891195529401717, 0.1773154045473122, 0.18015985376441856, 0.1865000452760659, 0.18157214803937605, 0.07491902707087594, 0.07967315296110045, 0.07822741346497764, 0.0905098924597636, 0.08109982530064042, 0.08927050950122395, 0.08599735345014836, 0.07840666898783799, 0.07588224010329336]}, "mutation_prompt": null}
{"id": "e0992dda-736b-4643-a92c-d478ba5b1879", "solution": "import numpy as np\n\nclass ImprovedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 80  # Reduced for efficiency\n        self.inertia_weight = 0.7  # Adaptive inertia\n        self.cognitive_coef = 2.0  # Increased for faster convergence\n        self.social_coef = 2.0\n        self.mutation_factor = 0.9  # Optimized mutation factor\n        self.crossover_prob = 0.8\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros_like(particles)\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        \n        for i in range(self.population_size):\n            score = func(particles[i])\n            personal_best_scores[i] = score\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            r1, r2 = np.random.rand(2, self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities\n                          + self.cognitive_coef * r1 * (personal_best_positions - particles)\n                          + self.social_coef * r2 * (global_best_position - particles))\n            particles = np.clip(particles + velocities, self.lower_bound, self.upper_bound)\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = particles[np.random.choice(idxs, 3, replace=False)]\n                mutant_vector = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector = np.where(crossover_mask, mutant_vector, particles[i])\n\n                trial_score = func(trial_vector)\n                eval_count += 1\n\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial_vector\n                    personal_best_scores[i] = trial_score\n\n                    if trial_score < personal_best_scores[global_best_index]:\n                        global_best_position = trial_vector\n                        global_best_index = i\n\n        return global_best_position", "name": "ImprovedHybridPSODE", "description": "A refined Hybrid PSO-DE algorithm leveraging adaptive parameters and a streamlined evaluation process for enhanced convergence speed.", "configspace": "", "generation": 15, "fitness": 0.1466343766542071, "feedback": "The algorithm ImprovedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.19.", "error": "", "parent_id": "86b3e4f1-22cc-4fb2-97cc-bf4bb4405e19", "metadata": {"aucs": [0.21978781104197986, 0.22079719610859616, 0.23264161719422216, 0.2701490886278316, 0.29226543389322734, 0.313116213409258, 0.28660400659695373, 0.24336629683909206, 0.26303093791267407, 9.999999999998899e-05, 0.009432091901185213, 0.000820707873785409, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00028326763817387857, 9.999999999998899e-05, 0.05027939281269933, 0.06311042129160593, 0.05239856294192646, 0.06647847074824609, 0.0550101152495206, 0.052929983875594, 0.07850869747401179, 0.060968678778508534, 0.056461581900014046, 0.05634108796416204, 0.04541202816052614, 0.047556147984957886, 0.04678750315349134, 0.04587669509368275, 0.04859497157931547, 0.04353262116836554, 0.045910634334066724, 0.04824803771578878, 0.9777963928372415, 0.9847332197271501, 0.9801767376701089, 0.9789404667445275, 0.9837113450438673, 0.9770985832889368, 0.9815033134999352, 0.9784938113019584, 0.98428022333153, 0.10543940894284165, 0.1308132148172162, 0.11862711237485513, 0.14211361395605215, 0.11592250042255203, 0.10668528991626658, 0.1275865298498322, 0.12460871335582924, 0.17904596351538526, 0.1488211858361801, 0.1781286227068788, 0.13897840262230254, 0.1821892556359902, 0.16612377019639046, 0.16155163945058282, 0.20858143659906403, 0.16056446390144175, 0.16229157571571218, 0.0322636320542562, 0.025075856846543454, 0.03194245395159889, 0.030518830459701163, 0.04712453302944508, 0.04922360906123502, 0.10380177119242329, 0.0828409717502604, 0.030621543822301978, 0.02413931694768434, 0.0724484746743197, 0.044172588683976, 0.024966271256158468, 0.009336145121944694, 0.027715912844402335, 0.005098430068530835, 0.04208474917785621, 0.00786120929802614, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010687656689084335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.039601374425784375, 0.018847764299094183, 0.034159756430052535, 0.04283749820367777, 0.055779528652305066, 0.046672074359084936, 0.06494970538055655, 0.04090068199969232, 0.02820720429345125, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005055719084776866, 0.024520664326832198, 0.005991248366503332, 0.010878771499971074, 0.018287073018470767, 0.00882688649331742, 0.023684146948617646, 0.023547766061767672, 0.03421219349781768, 0.21622346853254615, 0.27421641305135824, 0.2403431898060654, 0.2567780499758664, 0.25485133391881654, 0.2559580299551866, 0.2350273454368439, 0.25103729159121735, 0.23586225052582444, 0.06910476266029619, 0.06707602084595599, 0.06768035380803195, 0.0652553660541011, 0.07986862937168204, 0.112519778470338, 0.0529151722487452, 0.05869818432354246, 0.06351133569188327, 0.1489853421632149, 0.144131424414514, 0.13670370810997046, 0.23631133811991611, 0.12799464373839242, 0.15761285393615743, 0.15007001923796137, 0.1495229178917018, 0.13263296338839592, 0.2034557415655559, 0.17152923800499298, 0.1950651369696238, 0.18053809816946054, 0.1803206273889536, 0.1642439891943528, 0.21468641093968377, 0.2242386136306591, 0.19890670345681338, 0.13409751285453642, 0.1281723311556665, 0.12614506919040291, 0.1188179232519353, 0.12046755375024643, 0.120556611204507, 0.15606824984014822, 0.1375611690788272, 0.12092683340589372, 0.15358666162650625, 0.1617386898385117, 0.15389682950545835, 0.15295200803259834, 0.15431150933989957, 0.1571794240431662, 0.1663738418264895, 0.19690941675243434, 0.17209498537025014, 0.1515723900370014, 0.15887490937075976, 0.15569046323363345, 0.1569875875664224, 0.1596990734482744, 0.1496605520474048, 0.14638067735461535, 0.157637446036355, 0.14794821797327717, 0.14407843923013974, 0.2360544672683348, 0.3072735611497126, 0.22847221666152484, 0.1708077583146662, 0.1587693651446902, 0.22305147625378374, 0.16021807121287635, 0.1786486310759121, 0.16157568948395096, 0.1790778222105066, 0.17447002598900851, 0.13641809084294165, 0.1723640916974628, 0.11713009168878374, 0.23927667556030352, 0.1936480674123665, 0.2643890232588836, 0.18290044833274477, 0.1847257299341062, 0.195450626181508, 0.19218545651919317, 0.17524755540413683, 0.17362553775518041, 0.20799664545638274, 0.1825455050948087, 0.18209949733259523, 0.06040495341774077, 0.05002659611451876, 0.05698948624740019, 0.06319613372863331, 0.06594873560240577, 0.0579712269191186, 0.052148695812704315, 0.05735267332150673, 0.06361049715874034]}, "mutation_prompt": null}
{"id": "e7f3c64d-e400-45a0-a745-bf726a973b1c", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 100\n        self.inertia_weight = 0.5\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros_like(particles)\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([float('inf')] * self.population_size)\n        \n        # Evaluate initial population\n        for i in range(self.population_size):\n            score = func(particles[i])\n            personal_best_scores[i] = score\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            # PSO update\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coef * r1 * (personal_best_positions[i] - particles[i])\n                                 + self.social_coef * r2 * (global_best_position - particles[i]))\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n            # Differential Evolution update with crossover\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = particles[np.random.choice(idxs, 3, replace=False)]\n                mutant_vector = a + self.mutation_factor * (b - c)\n                trial_vector = np.copy(particles[i])\n                \n                crossover_mask = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover_mask] = mutant_vector[crossover_mask]\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_score = func(trial_vector)\n                eval_count += 1\n\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial_vector\n                    personal_best_scores[i] = trial_score\n\n                # Update global best\n                if trial_score < personal_best_scores[global_best_index]:\n                    global_best_position = trial_vector\n                    global_best_index = i\n\n        return global_best_position", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization with Differential Evolution for improved global search and fine-tuning capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "86b3e4f1-22cc-4fb2-97cc-bf4bb4405e19", "metadata": {"aucs": [0.4882472281863305, 0.5164996094393812, 0.49627912463063206, 0.5339702752982873, 0.5404857484433038, 0.547033222410221, 0.49399054113020424, 0.5367743327470891, 0.5119730119579462, 0.1706997127269757, 0.16635505076312052, 0.18446456584479554, 0.18604242012498118, 0.18385268429613089, 0.19889041587631473, 0.19350555897906274, 0.18935136805081465, 0.186113004482099, 0.1307654169093807, 0.0896874251953903, 0.1412118423293054, 0.12142484023944233, 0.08837419841250671, 0.10400118280198245, 0.0964554587419576, 0.11658723844656671, 0.11926491685202545, 0.08929049749518203, 0.09355381931055196, 0.09727303635479634, 0.09026961265237132, 0.09423101095621911, 0.09339318029108867, 0.08134358186533541, 0.08978638175382525, 0.0790833264319073, 0.9624677687815185, 0.9855801791358813, 0.9816224124392043, 0.9588006997707941, 0.9759509140344366, 0.9710092523361906, 0.9847789324109596, 0.9782110500998692, 0.98016966668225, 0.3034460677447628, 0.3070791946049275, 0.3162936841526668, 0.26956904150950545, 0.27971313253914787, 0.2897636724461585, 0.30055476618523735, 0.3091051582244504, 0.29971065338511116, 0.575103760195953, 0.6579369174912328, 0.5756957078252307, 0.578457448384498, 0.62268343346853, 0.5348743605197566, 0.5437377063519533, 0.5750864631031573, 0.6026443184059901, 0.19122557781747151, 0.219926728416182, 0.17708813534241585, 0.1523831002292707, 0.17127873663224114, 0.24081197620533124, 0.18821531399816682, 0.10537279412279565, 0.21402145621295277, 0.2046246795081199, 0.19412499079843515, 0.20112124180673951, 0.20074072515046604, 0.18249195134365226, 0.1905082713072752, 0.2089302453317663, 0.19436623916189255, 0.2049281654583116, 0.0068166536550172685, 0.0837911965861654, 0.050516084582435505, 0.08976494540162006, 0.024829806428101286, 0.059188024680768336, 0.07305783740295468, 0.0964648656103706, 0.05769154514049968, 0.16280677835660884, 0.13777513171727374, 0.1716677221194739, 0.16142186592296115, 0.1234805081916649, 0.1397229977283585, 0.1689893019576535, 0.19814437959424513, 0.10939187298388475, 0.03371722574371072, 0.01923355698663376, 0.005416925536914974, 0.04565091917775321, 0.05293169986076862, 0.0184420315537287, 0.04294472623437107, 0.05384869480282728, 0.06862652834993865, 0.1434727307465219, 0.13014516524304764, 0.14283094183897305, 0.15476437716028124, 0.14335469825078906, 0.15476551997128118, 0.15389314040201207, 0.14499099412110517, 0.1646586539936239, 0.42255470889347735, 0.46454075466293065, 0.44103809128390825, 0.4445627656988088, 0.47217832809756455, 0.45296131431367226, 0.44219202469859464, 0.44168740411218377, 0.44493214750241983, 0.11182782387379753, 0.11173558176568021, 0.10138240106614815, 0.12488674551975909, 0.10273332347253195, 0.0970848950327079, 0.10894600019138578, 0.1130670277428173, 0.11829577546665515, 0.14540727231836847, 0.28447483892739733, 0.26440216718424314, 0.1827169809011342, 0.1967818721167539, 0.1290231784956315, 0.22484703138983853, 0.2435070355954998, 0.14288332363901612, 0.3074153083721701, 0.3034971554251098, 0.323958818223814, 0.3218228418410899, 0.3013796916450162, 0.3152165178622156, 0.3027670634632387, 0.3207432053900766, 0.3102628188868207, 0.2426007391435272, 0.21945623775416667, 0.268208028565292, 0.24495150191609605, 0.22065384399611787, 0.2703326499446467, 0.2520514025458884, 0.2640574256321997, 0.23775578206788373, 0.22330900122434794, 0.20084061105721895, 0.20237536743761497, 0.19086571663572038, 0.20448237248981416, 0.1846514790920929, 0.18829689955191709, 0.22010501926862958, 0.20704392112805026, 0.19970469159745197, 0.18850720732108373, 0.18254084549289917, 0.25912294469449937, 0.19604031895930163, 0.17935684116599004, 0.19282140363331945, 0.19175608739215821, 0.18992982248363355, 0.5541751596749267, 0.18046459927013492, 0.7235462915111932, 0.5502756818579533, 0.19248006472901402, 0.6572431188512124, 0.49559553012688085, 0.17391510325816872, 0.6707153637156391, 0.6286220117657617, 0.16964131868621912, 0.1908374933944862, 0.587157252836209, 0.5686223380915884, 0.6500050281667298, 0.20784635578758293, 0.12598989547462092, 0.6967624706510098, 0.1691155437474563, 0.19560187661169282, 0.1967090441389101, 0.17095352215511195, 0.1891195529401717, 0.1773154045473122, 0.18015985376441856, 0.1865000452760659, 0.18157214803937605, 0.07491902707087594, 0.07967315296110045, 0.07822741346497764, 0.0905098924597636, 0.08109982530064042, 0.08927050950122395, 0.08599735345014836, 0.07840666898783799, 0.07588224010329336]}, "mutation_prompt": null}
{"id": "a5939a85-5e29-4f21-a874-b3f970247742", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 100\n        self.inertia_weight = 0.5\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros_like(particles)\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([float('inf')] * self.population_size)\n        \n        # Evaluate initial population\n        for i in range(self.population_size):\n            score = func(particles[i])\n            personal_best_scores[i] = score\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            # PSO update\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coef * r1 * (personal_best_positions[i] - particles[i])\n                                 + self.social_coef * r2 * (global_best_position - particles[i]))\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n            # Differential Evolution update with crossover\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = particles[np.random.choice(idxs, 3, replace=False)]\n                mutant_vector = a + self.mutation_factor * (b - c)\n                trial_vector = np.copy(particles[i])\n                \n                crossover_mask = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover_mask] = mutant_vector[crossover_mask]\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_score = func(trial_vector)\n                eval_count += 1\n\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial_vector\n                    personal_best_scores[i] = trial_score\n\n                # Update global best\n                if trial_score < personal_best_scores[global_best_index]:\n                    global_best_position = trial_vector\n                    global_best_index = i\n\n        return global_best_position", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization with Differential Evolution for improved global search and fine-tuning capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "86b3e4f1-22cc-4fb2-97cc-bf4bb4405e19", "metadata": {"aucs": [0.4882472281863305, 0.5164996094393812, 0.49627912463063206, 0.5339702752982873, 0.5404857484433038, 0.547033222410221, 0.49399054113020424, 0.5367743327470891, 0.5119730119579462, 0.1706997127269757, 0.16635505076312052, 0.18446456584479554, 0.18604242012498118, 0.18385268429613089, 0.19889041587631473, 0.19350555897906274, 0.18935136805081465, 0.186113004482099, 0.1307654169093807, 0.0896874251953903, 0.1412118423293054, 0.12142484023944233, 0.08837419841250671, 0.10400118280198245, 0.0964554587419576, 0.11658723844656671, 0.11926491685202545, 0.08929049749518203, 0.09355381931055196, 0.09727303635479634, 0.09026961265237132, 0.09423101095621911, 0.09339318029108867, 0.08134358186533541, 0.08978638175382525, 0.0790833264319073, 0.9624677687815185, 0.9855801791358813, 0.9816224124392043, 0.9588006997707941, 0.9759509140344366, 0.9710092523361906, 0.9847789324109596, 0.9782110500998692, 0.98016966668225, 0.3034460677447628, 0.3070791946049275, 0.3162936841526668, 0.26956904150950545, 0.27971313253914787, 0.2897636724461585, 0.30055476618523735, 0.3091051582244504, 0.29971065338511116, 0.575103760195953, 0.6579369174912328, 0.5756957078252307, 0.578457448384498, 0.62268343346853, 0.5348743605197566, 0.5437377063519533, 0.5750864631031573, 0.6026443184059901, 0.19122557781747151, 0.219926728416182, 0.17708813534241585, 0.1523831002292707, 0.17127873663224114, 0.24081197620533124, 0.18821531399816682, 0.10537279412279565, 0.21402145621295277, 0.2046246795081199, 0.19412499079843515, 0.20112124180673951, 0.20074072515046604, 0.18249195134365226, 0.1905082713072752, 0.2089302453317663, 0.19436623916189255, 0.2049281654583116, 0.0068166536550172685, 0.0837911965861654, 0.050516084582435505, 0.08976494540162006, 0.024829806428101286, 0.059188024680768336, 0.07305783740295468, 0.0964648656103706, 0.05769154514049968, 0.16280677835660884, 0.13777513171727374, 0.1716677221194739, 0.16142186592296115, 0.1234805081916649, 0.1397229977283585, 0.1689893019576535, 0.19814437959424513, 0.10939187298388475, 0.03371722574371072, 0.01923355698663376, 0.005416925536914974, 0.04565091917775321, 0.05293169986076862, 0.0184420315537287, 0.04294472623437107, 0.05384869480282728, 0.06862652834993865, 0.1434727307465219, 0.13014516524304764, 0.14283094183897305, 0.15476437716028124, 0.14335469825078906, 0.15476551997128118, 0.15389314040201207, 0.14499099412110517, 0.1646586539936239, 0.42255470889347735, 0.46454075466293065, 0.44103809128390825, 0.4445627656988088, 0.47217832809756455, 0.45296131431367226, 0.44219202469859464, 0.44168740411218377, 0.44493214750241983, 0.11182782387379753, 0.11173558176568021, 0.10138240106614815, 0.12488674551975909, 0.10273332347253195, 0.0970848950327079, 0.10894600019138578, 0.1130670277428173, 0.11829577546665515, 0.14540727231836847, 0.28447483892739733, 0.26440216718424314, 0.1827169809011342, 0.1967818721167539, 0.1290231784956315, 0.22484703138983853, 0.2435070355954998, 0.14288332363901612, 0.3074153083721701, 0.3034971554251098, 0.323958818223814, 0.3218228418410899, 0.3013796916450162, 0.3152165178622156, 0.3027670634632387, 0.3207432053900766, 0.3102628188868207, 0.2426007391435272, 0.21945623775416667, 0.268208028565292, 0.24495150191609605, 0.22065384399611787, 0.2703326499446467, 0.2520514025458884, 0.2640574256321997, 0.23775578206788373, 0.22330900122434794, 0.20084061105721895, 0.20237536743761497, 0.19086571663572038, 0.20448237248981416, 0.1846514790920929, 0.18829689955191709, 0.22010501926862958, 0.20704392112805026, 0.19970469159745197, 0.18850720732108373, 0.18254084549289917, 0.25912294469449937, 0.19604031895930163, 0.17935684116599004, 0.19282140363331945, 0.19175608739215821, 0.18992982248363355, 0.5541751596749267, 0.18046459927013492, 0.7235462915111932, 0.5502756818579533, 0.19248006472901402, 0.6572431188512124, 0.49559553012688085, 0.17391510325816872, 0.6707153637156391, 0.6286220117657617, 0.16964131868621912, 0.1908374933944862, 0.587157252836209, 0.5686223380915884, 0.6500050281667298, 0.20784635578758293, 0.12598989547462092, 0.6967624706510098, 0.1691155437474563, 0.19560187661169282, 0.1967090441389101, 0.17095352215511195, 0.1891195529401717, 0.1773154045473122, 0.18015985376441856, 0.1865000452760659, 0.18157214803937605, 0.07491902707087594, 0.07967315296110045, 0.07822741346497764, 0.0905098924597636, 0.08109982530064042, 0.08927050950122395, 0.08599735345014836, 0.07840666898783799, 0.07588224010329336]}, "mutation_prompt": null}
{"id": "ad2bd2a6-e59f-4a03-b581-c573b1c69e5a", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 100\n        self.inertia_weight = 0.5\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros_like(particles)\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([float('inf')] * self.population_size)\n        \n        # Evaluate initial population\n        for i in range(self.population_size):\n            score = func(particles[i])\n            personal_best_scores[i] = score\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            # PSO update\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coef * r1 * (personal_best_positions[i] - particles[i])\n                                 + self.social_coef * r2 * (global_best_position - particles[i]))\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n            # Differential Evolution update with crossover\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = particles[np.random.choice(idxs, 3, replace=False)]\n                mutant_vector = a + self.mutation_factor * (b - c)\n                trial_vector = np.copy(particles[i])\n                \n                crossover_mask = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover_mask] = mutant_vector[crossover_mask]\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_score = func(trial_vector)\n                eval_count += 1\n\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial_vector\n                    personal_best_scores[i] = trial_score\n\n                # Update global best\n                if trial_score < personal_best_scores[global_best_index]:\n                    global_best_position = trial_vector\n                    global_best_index = i\n\n        return global_best_position", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization with Differential Evolution for improved global search and fine-tuning capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "86b3e4f1-22cc-4fb2-97cc-bf4bb4405e19", "metadata": {"aucs": [0.4882472281863305, 0.5164996094393812, 0.49627912463063206, 0.5339702752982873, 0.5404857484433038, 0.547033222410221, 0.49399054113020424, 0.5367743327470891, 0.5119730119579462, 0.1706997127269757, 0.16635505076312052, 0.18446456584479554, 0.18604242012498118, 0.18385268429613089, 0.19889041587631473, 0.19350555897906274, 0.18935136805081465, 0.186113004482099, 0.1307654169093807, 0.0896874251953903, 0.1412118423293054, 0.12142484023944233, 0.08837419841250671, 0.10400118280198245, 0.0964554587419576, 0.11658723844656671, 0.11926491685202545, 0.08929049749518203, 0.09355381931055196, 0.09727303635479634, 0.09026961265237132, 0.09423101095621911, 0.09339318029108867, 0.08134358186533541, 0.08978638175382525, 0.0790833264319073, 0.9624677687815185, 0.9855801791358813, 0.9816224124392043, 0.9588006997707941, 0.9759509140344366, 0.9710092523361906, 0.9847789324109596, 0.9782110500998692, 0.98016966668225, 0.3034460677447628, 0.3070791946049275, 0.3162936841526668, 0.26956904150950545, 0.27971313253914787, 0.2897636724461585, 0.30055476618523735, 0.3091051582244504, 0.29971065338511116, 0.575103760195953, 0.6579369174912328, 0.5756957078252307, 0.578457448384498, 0.62268343346853, 0.5348743605197566, 0.5437377063519533, 0.5750864631031573, 0.6026443184059901, 0.19122557781747151, 0.219926728416182, 0.17708813534241585, 0.1523831002292707, 0.17127873663224114, 0.24081197620533124, 0.18821531399816682, 0.10537279412279565, 0.21402145621295277, 0.2046246795081199, 0.19412499079843515, 0.20112124180673951, 0.20074072515046604, 0.18249195134365226, 0.1905082713072752, 0.2089302453317663, 0.19436623916189255, 0.2049281654583116, 0.0068166536550172685, 0.0837911965861654, 0.050516084582435505, 0.08976494540162006, 0.024829806428101286, 0.059188024680768336, 0.07305783740295468, 0.0964648656103706, 0.05769154514049968, 0.16280677835660884, 0.13777513171727374, 0.1716677221194739, 0.16142186592296115, 0.1234805081916649, 0.1397229977283585, 0.1689893019576535, 0.19814437959424513, 0.10939187298388475, 0.03371722574371072, 0.01923355698663376, 0.005416925536914974, 0.04565091917775321, 0.05293169986076862, 0.0184420315537287, 0.04294472623437107, 0.05384869480282728, 0.06862652834993865, 0.1434727307465219, 0.13014516524304764, 0.14283094183897305, 0.15476437716028124, 0.14335469825078906, 0.15476551997128118, 0.15389314040201207, 0.14499099412110517, 0.1646586539936239, 0.42255470889347735, 0.46454075466293065, 0.44103809128390825, 0.4445627656988088, 0.47217832809756455, 0.45296131431367226, 0.44219202469859464, 0.44168740411218377, 0.44493214750241983, 0.11182782387379753, 0.11173558176568021, 0.10138240106614815, 0.12488674551975909, 0.10273332347253195, 0.0970848950327079, 0.10894600019138578, 0.1130670277428173, 0.11829577546665515, 0.14540727231836847, 0.28447483892739733, 0.26440216718424314, 0.1827169809011342, 0.1967818721167539, 0.1290231784956315, 0.22484703138983853, 0.2435070355954998, 0.14288332363901612, 0.3074153083721701, 0.3034971554251098, 0.323958818223814, 0.3218228418410899, 0.3013796916450162, 0.3152165178622156, 0.3027670634632387, 0.3207432053900766, 0.3102628188868207, 0.2426007391435272, 0.21945623775416667, 0.268208028565292, 0.24495150191609605, 0.22065384399611787, 0.2703326499446467, 0.2520514025458884, 0.2640574256321997, 0.23775578206788373, 0.22330900122434794, 0.20084061105721895, 0.20237536743761497, 0.19086571663572038, 0.20448237248981416, 0.1846514790920929, 0.18829689955191709, 0.22010501926862958, 0.20704392112805026, 0.19970469159745197, 0.18850720732108373, 0.18254084549289917, 0.25912294469449937, 0.19604031895930163, 0.17935684116599004, 0.19282140363331945, 0.19175608739215821, 0.18992982248363355, 0.5541751596749267, 0.18046459927013492, 0.7235462915111932, 0.5502756818579533, 0.19248006472901402, 0.6572431188512124, 0.49559553012688085, 0.17391510325816872, 0.6707153637156391, 0.6286220117657617, 0.16964131868621912, 0.1908374933944862, 0.587157252836209, 0.5686223380915884, 0.6500050281667298, 0.20784635578758293, 0.12598989547462092, 0.6967624706510098, 0.1691155437474563, 0.19560187661169282, 0.1967090441389101, 0.17095352215511195, 0.1891195529401717, 0.1773154045473122, 0.18015985376441856, 0.1865000452760659, 0.18157214803937605, 0.07491902707087594, 0.07967315296110045, 0.07822741346497764, 0.0905098924597636, 0.08109982530064042, 0.08927050950122395, 0.08599735345014836, 0.07840666898783799, 0.07588224010329336]}, "mutation_prompt": null}
{"id": "56209965-f5c5-4836-a91e-aac583f0ef76", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 100\n        self.inertia_weight = 0.5\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros_like(particles)\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([float('inf')] * self.population_size)\n        \n        # Evaluate initial population\n        for i in range(self.population_size):\n            score = func(particles[i])\n            personal_best_scores[i] = score\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            # PSO update\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coef * r1 * (personal_best_positions[i] - particles[i])\n                                 + self.social_coef * r2 * (global_best_position - particles[i]))\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n            # Differential Evolution update with crossover\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = particles[np.random.choice(idxs, 3, replace=False)]\n                mutant_vector = a + self.mutation_factor * (b - c)\n                trial_vector = np.copy(particles[i])\n                \n                crossover_mask = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover_mask] = mutant_vector[crossover_mask]\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_score = func(trial_vector)\n                eval_count += 1\n\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial_vector\n                    personal_best_scores[i] = trial_score\n\n                # Update global best\n                if trial_score < personal_best_scores[global_best_index]:\n                    global_best_position = trial_vector\n                    global_best_index = i\n\n        return global_best_position", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization with Differential Evolution for improved global search and fine-tuning capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "86b3e4f1-22cc-4fb2-97cc-bf4bb4405e19", "metadata": {"aucs": [0.4882472281863305, 0.5164996094393812, 0.49627912463063206, 0.5339702752982873, 0.5404857484433038, 0.547033222410221, 0.49399054113020424, 0.5367743327470891, 0.5119730119579462, 0.1706997127269757, 0.16635505076312052, 0.18446456584479554, 0.18604242012498118, 0.18385268429613089, 0.19889041587631473, 0.19350555897906274, 0.18935136805081465, 0.186113004482099, 0.1307654169093807, 0.0896874251953903, 0.1412118423293054, 0.12142484023944233, 0.08837419841250671, 0.10400118280198245, 0.0964554587419576, 0.11658723844656671, 0.11926491685202545, 0.08929049749518203, 0.09355381931055196, 0.09727303635479634, 0.09026961265237132, 0.09423101095621911, 0.09339318029108867, 0.08134358186533541, 0.08978638175382525, 0.0790833264319073, 0.9624677687815185, 0.9855801791358813, 0.9816224124392043, 0.9588006997707941, 0.9759509140344366, 0.9710092523361906, 0.9847789324109596, 0.9782110500998692, 0.98016966668225, 0.3034460677447628, 0.3070791946049275, 0.3162936841526668, 0.26956904150950545, 0.27971313253914787, 0.2897636724461585, 0.30055476618523735, 0.3091051582244504, 0.29971065338511116, 0.575103760195953, 0.6579369174912328, 0.5756957078252307, 0.578457448384498, 0.62268343346853, 0.5348743605197566, 0.5437377063519533, 0.5750864631031573, 0.6026443184059901, 0.19122557781747151, 0.219926728416182, 0.17708813534241585, 0.1523831002292707, 0.17127873663224114, 0.24081197620533124, 0.18821531399816682, 0.10537279412279565, 0.21402145621295277, 0.2046246795081199, 0.19412499079843515, 0.20112124180673951, 0.20074072515046604, 0.18249195134365226, 0.1905082713072752, 0.2089302453317663, 0.19436623916189255, 0.2049281654583116, 0.0068166536550172685, 0.0837911965861654, 0.050516084582435505, 0.08976494540162006, 0.024829806428101286, 0.059188024680768336, 0.07305783740295468, 0.0964648656103706, 0.05769154514049968, 0.16280677835660884, 0.13777513171727374, 0.1716677221194739, 0.16142186592296115, 0.1234805081916649, 0.1397229977283585, 0.1689893019576535, 0.19814437959424513, 0.10939187298388475, 0.03371722574371072, 0.01923355698663376, 0.005416925536914974, 0.04565091917775321, 0.05293169986076862, 0.0184420315537287, 0.04294472623437107, 0.05384869480282728, 0.06862652834993865, 0.1434727307465219, 0.13014516524304764, 0.14283094183897305, 0.15476437716028124, 0.14335469825078906, 0.15476551997128118, 0.15389314040201207, 0.14499099412110517, 0.1646586539936239, 0.42255470889347735, 0.46454075466293065, 0.44103809128390825, 0.4445627656988088, 0.47217832809756455, 0.45296131431367226, 0.44219202469859464, 0.44168740411218377, 0.44493214750241983, 0.11182782387379753, 0.11173558176568021, 0.10138240106614815, 0.12488674551975909, 0.10273332347253195, 0.0970848950327079, 0.10894600019138578, 0.1130670277428173, 0.11829577546665515, 0.14540727231836847, 0.28447483892739733, 0.26440216718424314, 0.1827169809011342, 0.1967818721167539, 0.1290231784956315, 0.22484703138983853, 0.2435070355954998, 0.14288332363901612, 0.3074153083721701, 0.3034971554251098, 0.323958818223814, 0.3218228418410899, 0.3013796916450162, 0.3152165178622156, 0.3027670634632387, 0.3207432053900766, 0.3102628188868207, 0.2426007391435272, 0.21945623775416667, 0.268208028565292, 0.24495150191609605, 0.22065384399611787, 0.2703326499446467, 0.2520514025458884, 0.2640574256321997, 0.23775578206788373, 0.22330900122434794, 0.20084061105721895, 0.20237536743761497, 0.19086571663572038, 0.20448237248981416, 0.1846514790920929, 0.18829689955191709, 0.22010501926862958, 0.20704392112805026, 0.19970469159745197, 0.18850720732108373, 0.18254084549289917, 0.25912294469449937, 0.19604031895930163, 0.17935684116599004, 0.19282140363331945, 0.19175608739215821, 0.18992982248363355, 0.5541751596749267, 0.18046459927013492, 0.7235462915111932, 0.5502756818579533, 0.19248006472901402, 0.6572431188512124, 0.49559553012688085, 0.17391510325816872, 0.6707153637156391, 0.6286220117657617, 0.16964131868621912, 0.1908374933944862, 0.587157252836209, 0.5686223380915884, 0.6500050281667298, 0.20784635578758293, 0.12598989547462092, 0.6967624706510098, 0.1691155437474563, 0.19560187661169282, 0.1967090441389101, 0.17095352215511195, 0.1891195529401717, 0.1773154045473122, 0.18015985376441856, 0.1865000452760659, 0.18157214803937605, 0.07491902707087594, 0.07967315296110045, 0.07822741346497764, 0.0905098924597636, 0.08109982530064042, 0.08927050950122395, 0.08599735345014836, 0.07840666898783799, 0.07588224010329336]}, "mutation_prompt": null}
{"id": "904dbd04-587a-4fdd-ad31-c7e5442974ad", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 100\n        self.inertia_weight = 0.5\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros_like(particles)\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([float('inf')] * self.population_size)\n        \n        # Evaluate initial population\n        for i in range(self.population_size):\n            score = func(particles[i])\n            personal_best_scores[i] = score\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            # PSO update\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coef * r1 * (personal_best_positions[i] - particles[i])\n                                 + self.social_coef * r2 * (global_best_position - particles[i]))\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n            # Differential Evolution update with crossover\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = particles[np.random.choice(idxs, 3, replace=False)]\n                mutant_vector = a + self.mutation_factor * (b - c)\n                trial_vector = np.copy(particles[i])\n                \n                crossover_mask = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover_mask] = mutant_vector[crossover_mask]\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_score = func(trial_vector)\n                eval_count += 1\n\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial_vector\n                    personal_best_scores[i] = trial_score\n\n                # Update global best\n                if trial_score < personal_best_scores[global_best_index]:\n                    global_best_position = trial_vector\n                    global_best_index = i\n\n        return global_best_position", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization with Differential Evolution for improved global search and fine-tuning capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "86b3e4f1-22cc-4fb2-97cc-bf4bb4405e19", "metadata": {"aucs": [0.4882472281863305, 0.5164996094393812, 0.49627912463063206, 0.5339702752982873, 0.5404857484433038, 0.547033222410221, 0.49399054113020424, 0.5367743327470891, 0.5119730119579462, 0.1706997127269757, 0.16635505076312052, 0.18446456584479554, 0.18604242012498118, 0.18385268429613089, 0.19889041587631473, 0.19350555897906274, 0.18935136805081465, 0.186113004482099, 0.1307654169093807, 0.0896874251953903, 0.1412118423293054, 0.12142484023944233, 0.08837419841250671, 0.10400118280198245, 0.0964554587419576, 0.11658723844656671, 0.11926491685202545, 0.08929049749518203, 0.09355381931055196, 0.09727303635479634, 0.09026961265237132, 0.09423101095621911, 0.09339318029108867, 0.08134358186533541, 0.08978638175382525, 0.0790833264319073, 0.9624677687815185, 0.9855801791358813, 0.9816224124392043, 0.9588006997707941, 0.9759509140344366, 0.9710092523361906, 0.9847789324109596, 0.9782110500998692, 0.98016966668225, 0.3034460677447628, 0.3070791946049275, 0.3162936841526668, 0.26956904150950545, 0.27971313253914787, 0.2897636724461585, 0.30055476618523735, 0.3091051582244504, 0.29971065338511116, 0.575103760195953, 0.6579369174912328, 0.5756957078252307, 0.578457448384498, 0.62268343346853, 0.5348743605197566, 0.5437377063519533, 0.5750864631031573, 0.6026443184059901, 0.19122557781747151, 0.219926728416182, 0.17708813534241585, 0.1523831002292707, 0.17127873663224114, 0.24081197620533124, 0.18821531399816682, 0.10537279412279565, 0.21402145621295277, 0.2046246795081199, 0.19412499079843515, 0.20112124180673951, 0.20074072515046604, 0.18249195134365226, 0.1905082713072752, 0.2089302453317663, 0.19436623916189255, 0.2049281654583116, 0.0068166536550172685, 0.0837911965861654, 0.050516084582435505, 0.08976494540162006, 0.024829806428101286, 0.059188024680768336, 0.07305783740295468, 0.0964648656103706, 0.05769154514049968, 0.16280677835660884, 0.13777513171727374, 0.1716677221194739, 0.16142186592296115, 0.1234805081916649, 0.1397229977283585, 0.1689893019576535, 0.19814437959424513, 0.10939187298388475, 0.03371722574371072, 0.01923355698663376, 0.005416925536914974, 0.04565091917775321, 0.05293169986076862, 0.0184420315537287, 0.04294472623437107, 0.05384869480282728, 0.06862652834993865, 0.1434727307465219, 0.13014516524304764, 0.14283094183897305, 0.15476437716028124, 0.14335469825078906, 0.15476551997128118, 0.15389314040201207, 0.14499099412110517, 0.1646586539936239, 0.42255470889347735, 0.46454075466293065, 0.44103809128390825, 0.4445627656988088, 0.47217832809756455, 0.45296131431367226, 0.44219202469859464, 0.44168740411218377, 0.44493214750241983, 0.11182782387379753, 0.11173558176568021, 0.10138240106614815, 0.12488674551975909, 0.10273332347253195, 0.0970848950327079, 0.10894600019138578, 0.1130670277428173, 0.11829577546665515, 0.14540727231836847, 0.28447483892739733, 0.26440216718424314, 0.1827169809011342, 0.1967818721167539, 0.1290231784956315, 0.22484703138983853, 0.2435070355954998, 0.14288332363901612, 0.3074153083721701, 0.3034971554251098, 0.323958818223814, 0.3218228418410899, 0.3013796916450162, 0.3152165178622156, 0.3027670634632387, 0.3207432053900766, 0.3102628188868207, 0.2426007391435272, 0.21945623775416667, 0.268208028565292, 0.24495150191609605, 0.22065384399611787, 0.2703326499446467, 0.2520514025458884, 0.2640574256321997, 0.23775578206788373, 0.22330900122434794, 0.20084061105721895, 0.20237536743761497, 0.19086571663572038, 0.20448237248981416, 0.1846514790920929, 0.18829689955191709, 0.22010501926862958, 0.20704392112805026, 0.19970469159745197, 0.18850720732108373, 0.18254084549289917, 0.25912294469449937, 0.19604031895930163, 0.17935684116599004, 0.19282140363331945, 0.19175608739215821, 0.18992982248363355, 0.5541751596749267, 0.18046459927013492, 0.7235462915111932, 0.5502756818579533, 0.19248006472901402, 0.6572431188512124, 0.49559553012688085, 0.17391510325816872, 0.6707153637156391, 0.6286220117657617, 0.16964131868621912, 0.1908374933944862, 0.587157252836209, 0.5686223380915884, 0.6500050281667298, 0.20784635578758293, 0.12598989547462092, 0.6967624706510098, 0.1691155437474563, 0.19560187661169282, 0.1967090441389101, 0.17095352215511195, 0.1891195529401717, 0.1773154045473122, 0.18015985376441856, 0.1865000452760659, 0.18157214803937605, 0.07491902707087594, 0.07967315296110045, 0.07822741346497764, 0.0905098924597636, 0.08109982530064042, 0.08927050950122395, 0.08599735345014836, 0.07840666898783799, 0.07588224010329336]}, "mutation_prompt": null}
{"id": "6feca2a1-6645-4dd3-b2a5-34d77910b814", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 100\n        self.inertia_weight = 0.5\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros_like(particles)\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([float('inf')] * self.population_size)\n        \n        # Evaluate initial population\n        for i in range(self.population_size):\n            score = func(particles[i])\n            personal_best_scores[i] = score\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            # PSO update\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coef * r1 * (personal_best_positions[i] - particles[i])\n                                 + self.social_coef * r2 * (global_best_position - particles[i]))\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n            # Differential Evolution update with crossover\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = particles[np.random.choice(idxs, 3, replace=False)]\n                mutant_vector = a + self.mutation_factor * (b - c)\n                trial_vector = np.copy(particles[i])\n                \n                crossover_mask = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover_mask] = mutant_vector[crossover_mask]\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_score = func(trial_vector)\n                eval_count += 1\n\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial_vector\n                    personal_best_scores[i] = trial_score\n\n                # Update global best\n                if trial_score < personal_best_scores[global_best_index]:\n                    global_best_position = trial_vector\n                    global_best_index = i\n\n        return global_best_position", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization with Differential Evolution for improved global search and fine-tuning capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "86b3e4f1-22cc-4fb2-97cc-bf4bb4405e19", "metadata": {"aucs": [0.4882472281863305, 0.5164996094393812, 0.49627912463063206, 0.5339702752982873, 0.5404857484433038, 0.547033222410221, 0.49399054113020424, 0.5367743327470891, 0.5119730119579462, 0.1706997127269757, 0.16635505076312052, 0.18446456584479554, 0.18604242012498118, 0.18385268429613089, 0.19889041587631473, 0.19350555897906274, 0.18935136805081465, 0.186113004482099, 0.1307654169093807, 0.0896874251953903, 0.1412118423293054, 0.12142484023944233, 0.08837419841250671, 0.10400118280198245, 0.0964554587419576, 0.11658723844656671, 0.11926491685202545, 0.08929049749518203, 0.09355381931055196, 0.09727303635479634, 0.09026961265237132, 0.09423101095621911, 0.09339318029108867, 0.08134358186533541, 0.08978638175382525, 0.0790833264319073, 0.9624677687815185, 0.9855801791358813, 0.9816224124392043, 0.9588006997707941, 0.9759509140344366, 0.9710092523361906, 0.9847789324109596, 0.9782110500998692, 0.98016966668225, 0.3034460677447628, 0.3070791946049275, 0.3162936841526668, 0.26956904150950545, 0.27971313253914787, 0.2897636724461585, 0.30055476618523735, 0.3091051582244504, 0.29971065338511116, 0.575103760195953, 0.6579369174912328, 0.5756957078252307, 0.578457448384498, 0.62268343346853, 0.5348743605197566, 0.5437377063519533, 0.5750864631031573, 0.6026443184059901, 0.19122557781747151, 0.219926728416182, 0.17708813534241585, 0.1523831002292707, 0.17127873663224114, 0.24081197620533124, 0.18821531399816682, 0.10537279412279565, 0.21402145621295277, 0.2046246795081199, 0.19412499079843515, 0.20112124180673951, 0.20074072515046604, 0.18249195134365226, 0.1905082713072752, 0.2089302453317663, 0.19436623916189255, 0.2049281654583116, 0.0068166536550172685, 0.0837911965861654, 0.050516084582435505, 0.08976494540162006, 0.024829806428101286, 0.059188024680768336, 0.07305783740295468, 0.0964648656103706, 0.05769154514049968, 0.16280677835660884, 0.13777513171727374, 0.1716677221194739, 0.16142186592296115, 0.1234805081916649, 0.1397229977283585, 0.1689893019576535, 0.19814437959424513, 0.10939187298388475, 0.03371722574371072, 0.01923355698663376, 0.005416925536914974, 0.04565091917775321, 0.05293169986076862, 0.0184420315537287, 0.04294472623437107, 0.05384869480282728, 0.06862652834993865, 0.1434727307465219, 0.13014516524304764, 0.14283094183897305, 0.15476437716028124, 0.14335469825078906, 0.15476551997128118, 0.15389314040201207, 0.14499099412110517, 0.1646586539936239, 0.42255470889347735, 0.46454075466293065, 0.44103809128390825, 0.4445627656988088, 0.47217832809756455, 0.45296131431367226, 0.44219202469859464, 0.44168740411218377, 0.44493214750241983, 0.11182782387379753, 0.11173558176568021, 0.10138240106614815, 0.12488674551975909, 0.10273332347253195, 0.0970848950327079, 0.10894600019138578, 0.1130670277428173, 0.11829577546665515, 0.14540727231836847, 0.28447483892739733, 0.26440216718424314, 0.1827169809011342, 0.1967818721167539, 0.1290231784956315, 0.22484703138983853, 0.2435070355954998, 0.14288332363901612, 0.3074153083721701, 0.3034971554251098, 0.323958818223814, 0.3218228418410899, 0.3013796916450162, 0.3152165178622156, 0.3027670634632387, 0.3207432053900766, 0.3102628188868207, 0.2426007391435272, 0.21945623775416667, 0.268208028565292, 0.24495150191609605, 0.22065384399611787, 0.2703326499446467, 0.2520514025458884, 0.2640574256321997, 0.23775578206788373, 0.22330900122434794, 0.20084061105721895, 0.20237536743761497, 0.19086571663572038, 0.20448237248981416, 0.1846514790920929, 0.18829689955191709, 0.22010501926862958, 0.20704392112805026, 0.19970469159745197, 0.18850720732108373, 0.18254084549289917, 0.25912294469449937, 0.19604031895930163, 0.17935684116599004, 0.19282140363331945, 0.19175608739215821, 0.18992982248363355, 0.5541751596749267, 0.18046459927013492, 0.7235462915111932, 0.5502756818579533, 0.19248006472901402, 0.6572431188512124, 0.49559553012688085, 0.17391510325816872, 0.6707153637156391, 0.6286220117657617, 0.16964131868621912, 0.1908374933944862, 0.587157252836209, 0.5686223380915884, 0.6500050281667298, 0.20784635578758293, 0.12598989547462092, 0.6967624706510098, 0.1691155437474563, 0.19560187661169282, 0.1967090441389101, 0.17095352215511195, 0.1891195529401717, 0.1773154045473122, 0.18015985376441856, 0.1865000452760659, 0.18157214803937605, 0.07491902707087594, 0.07967315296110045, 0.07822741346497764, 0.0905098924597636, 0.08109982530064042, 0.08927050950122395, 0.08599735345014836, 0.07840666898783799, 0.07588224010329336]}, "mutation_prompt": null}
{"id": "610be946-b647-4f47-9063-e0f3dda9b773", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 100\n        self.inertia_weight = 0.7  # Adjusted for better exploration\n        self.cognitive_coef = 1.4  # Fine-tuned coefficients\n        self.social_coef = 1.6\n        self.mutation_factor = 0.9  # Increased mutation factor\n        self.crossover_prob = 0.85  # Fine-tuned crossover probability\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros_like(particles)\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        \n        for i in range(self.population_size):\n            score = func(particles[i])\n            personal_best_scores[i] = score\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = np.copy(personal_best_positions[global_best_index])\n\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            r1, r2 = np.random.rand(2)\n            for i in range(self.population_size):\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coef * r1 * (personal_best_positions[i] - particles[i])\n                                 + self.social_coef * r2 * (global_best_position - particles[i]))\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = np.random.choice(np.delete(np.arange(self.population_size), i), 3, replace=False)\n                a, b, c = particles[idxs]\n                mutant_vector = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector = np.where(crossover_mask, mutant_vector, particles[i])\n\n                trial_score = func(trial_vector)\n                eval_count += 1\n\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial_vector\n                    personal_best_scores[i] = trial_score\n\n                if trial_score < personal_best_scores[global_best_index]:\n                    global_best_position = np.copy(trial_vector)\n                    global_best_index = i\n\n        return global_best_position", "name": "HybridPSODE", "description": "An enhanced hybrid PSO with DE using adaptive parameters for efficient exploration and exploitation balance.", "configspace": "", "generation": 22, "fitness": 0.2107500313009881, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.20.", "error": "", "parent_id": "86b3e4f1-22cc-4fb2-97cc-bf4bb4405e19", "metadata": {"aucs": [0.3876421533647383, 0.41782726956057337, 0.3779539059183733, 0.39526941888671896, 0.4754963725829293, 0.46297389359484065, 0.3976436986251639, 0.44195392727867167, 0.4108619402070198, 0.06848428016236141, 0.11219426751674377, 0.06091733757337148, 0.037170520170722976, 0.05264148672740232, 9.999999999998899e-05, 0.05943853897137119, 0.11089880383084272, 0.03944734088262669, 0.09111237546366902, 0.0966710934335906, 0.10096422133573668, 0.07766414804912347, 0.1198757196178647, 0.09211653652697493, 0.09566204219581576, 0.09418253000890131, 0.08132949508606002, 0.07078304611816855, 0.08920680619412014, 0.08474321572170407, 0.0885106729444064, 0.0769821169008661, 0.09201754068016454, 0.06701508829172487, 0.0900244960243548, 0.09142250671342045, 0.9721642965434244, 0.98060985204727, 0.9539889799545656, 0.964105781920273, 0.9793210791873384, 0.9586906977316064, 0.979262288414261, 0.9712269723035121, 0.9624496415539673, 0.19094718484485007, 0.2562339445395727, 0.2440594022239927, 0.20863855860214187, 0.2659554410112658, 0.20891979531586113, 0.1608794910189285, 0.25062799174722605, 0.25030962232964193, 0.3010487310964386, 0.4274657183224416, 0.45752511134469365, 0.257575523565458, 0.4799114487693473, 0.23927615412054914, 0.3052011333725603, 0.519153286604257, 0.4094450859481247, 0.13623623377277616, 0.15260044076671875, 0.18325006520226983, 0.10429164250227163, 0.1036691399067986, 0.1426352088666576, 0.14540484133943465, 0.1603969239271804, 0.14143208339001356, 0.1420859767230972, 0.10120106356680936, 0.10631518875123769, 0.13836830226648578, 0.1795216381174185, 0.18029105991562777, 0.11174472813223746, 0.19304400176415015, 0.06132874188263626, 0.015321047168974977, 0.05506241795402855, 0.029459352078336942, 0.014991235869184272, 9.999999999998899e-05, 0.00550568213440783, 0.013984185671517158, 0.03452808305572708, 0.016948787852755443, 0.11664472684781557, 0.15907507644796548, 0.08516808214073934, 0.09730266357576711, 0.15490055239123446, 0.04850525636357217, 0.05493432479803484, 0.12914994712613048, 0.08153375430917531, 0.0053932446949612745, 9.999999999998899e-05, 0.01004138094588325, 0.0022502544728409957, 0.016758399389014134, 0.01711504439736311, 0.012973970390212752, 0.01889249072382504, 0.01464972070767856, 0.08383918802026313, 0.09889076299549693, 0.071252031655059, 0.07605314670372576, 0.10981161539724893, 0.10443352960320884, 0.057149448246075374, 0.09791211001174871, 0.11003468082967716, 0.34417799219703726, 0.38571958074203094, 0.3953744652343847, 0.3658675817324347, 0.3777445414591688, 0.3866149954888177, 0.3797774428327274, 0.3965282503881694, 0.38340032172063343, 0.09573762901923832, 0.09917795598246193, 0.10470421388478357, 0.08218674751256894, 0.09843947231379446, 0.09154591721630201, 0.0884522582549847, 0.10035578788570187, 0.08138444166667813, 0.22121639047983688, 0.14194697406757062, 0.2596220743196074, 0.15121459024656192, 0.18552733088607698, 0.14160134641648114, 0.17397855303518595, 0.1806001390124644, 0.17283601214342037, 0.25333396967287514, 0.26296134235048707, 0.27494916589528184, 0.24032932874012936, 0.2654230098184255, 0.2837152583854887, 0.25052327709744227, 0.2807908717984231, 0.27742989404480767, 0.186964876455048, 0.21635155720130728, 0.1555113388711954, 0.20560554151066146, 0.20881304864189332, 0.21392481989717094, 0.17003904980956808, 0.2208698014545264, 0.22811847268583807, 0.1842654145291105, 0.188394381830021, 0.1919906531111365, 0.18608090068616545, 0.19640587732937687, 0.20365383944691318, 0.19373751307317022, 0.18800274829847208, 0.20506403294951114, 0.19452188466058884, 0.2542500689285563, 0.1842763705949385, 0.17731546358651373, 0.25255440739801294, 0.17433331298601495, 0.20067830350856908, 0.1840189971751841, 0.17850911656431923, 0.17281071613591503, 0.5726642441850047, 0.24987678974830319, 0.17870559183230383, 0.19195688681611867, 0.16249838591625498, 0.5008987187281038, 0.18070900013029, 0.17590360251307535, 0.4101335568605733, 0.16564049543404435, 0.19392820223096707, 0.318733524246827, 0.18799134819774033, 0.5281160068794506, 0.16201652589381332, 0.5065622979947075, 0.14982872506963618, 0.189939406842769, 0.1833903751817053, 0.17861067875382508, 0.1862949103629652, 0.1776959537612438, 0.17926374188578287, 0.17960884695623958, 0.18107072798565504, 0.17765582305336225, 0.07392851047755156, 0.08215836178245894, 0.07198745804290718, 0.07337712015778797, 0.07315617549609998, 0.06969857108636479, 0.07093729186153686, 0.09356157720616287, 0.08258019682144058]}, "mutation_prompt": null}
{"id": "787ad1bb-6a33-4b2c-8875-689c800aded0", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 100\n        self.inertia_weight = 0.5\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros_like(particles)\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([float('inf')] * self.population_size)\n        \n        # Evaluate initial population\n        for i in range(self.population_size):\n            score = func(particles[i])\n            personal_best_scores[i] = score\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            # PSO update\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coef * r1 * (personal_best_positions[i] - particles[i])\n                                 + self.social_coef * r2 * (global_best_position - particles[i]))\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n            # Differential Evolution update with crossover\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = particles[np.random.choice(idxs, 3, replace=False)]\n                mutant_vector = a + self.mutation_factor * (b - c)\n                trial_vector = np.copy(particles[i])\n                \n                crossover_mask = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover_mask] = mutant_vector[crossover_mask]\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_score = func(trial_vector)\n                eval_count += 1\n\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial_vector\n                    personal_best_scores[i] = trial_score\n\n                # Update global best\n                if trial_score < personal_best_scores[global_best_index]:\n                    global_best_position = trial_vector\n                    global_best_index = i\n\n        return global_best_position", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization with Differential Evolution for improved global search and fine-tuning capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "86b3e4f1-22cc-4fb2-97cc-bf4bb4405e19", "metadata": {"aucs": [0.4882472281863305, 0.5164996094393812, 0.49627912463063206, 0.5339702752982873, 0.5404857484433038, 0.547033222410221, 0.49399054113020424, 0.5367743327470891, 0.5119730119579462, 0.1706997127269757, 0.16635505076312052, 0.18446456584479554, 0.18604242012498118, 0.18385268429613089, 0.19889041587631473, 0.19350555897906274, 0.18935136805081465, 0.186113004482099, 0.1307654169093807, 0.0896874251953903, 0.1412118423293054, 0.12142484023944233, 0.08837419841250671, 0.10400118280198245, 0.0964554587419576, 0.11658723844656671, 0.11926491685202545, 0.08929049749518203, 0.09355381931055196, 0.09727303635479634, 0.09026961265237132, 0.09423101095621911, 0.09339318029108867, 0.08134358186533541, 0.08978638175382525, 0.0790833264319073, 0.9624677687815185, 0.9855801791358813, 0.9816224124392043, 0.9588006997707941, 0.9759509140344366, 0.9710092523361906, 0.9847789324109596, 0.9782110500998692, 0.98016966668225, 0.3034460677447628, 0.3070791946049275, 0.3162936841526668, 0.26956904150950545, 0.27971313253914787, 0.2897636724461585, 0.30055476618523735, 0.3091051582244504, 0.29971065338511116, 0.575103760195953, 0.6579369174912328, 0.5756957078252307, 0.578457448384498, 0.62268343346853, 0.5348743605197566, 0.5437377063519533, 0.5750864631031573, 0.6026443184059901, 0.19122557781747151, 0.219926728416182, 0.17708813534241585, 0.1523831002292707, 0.17127873663224114, 0.24081197620533124, 0.18821531399816682, 0.10537279412279565, 0.21402145621295277, 0.2046246795081199, 0.19412499079843515, 0.20112124180673951, 0.20074072515046604, 0.18249195134365226, 0.1905082713072752, 0.2089302453317663, 0.19436623916189255, 0.2049281654583116, 0.0068166536550172685, 0.0837911965861654, 0.050516084582435505, 0.08976494540162006, 0.024829806428101286, 0.059188024680768336, 0.07305783740295468, 0.0964648656103706, 0.05769154514049968, 0.16280677835660884, 0.13777513171727374, 0.1716677221194739, 0.16142186592296115, 0.1234805081916649, 0.1397229977283585, 0.1689893019576535, 0.19814437959424513, 0.10939187298388475, 0.03371722574371072, 0.01923355698663376, 0.005416925536914974, 0.04565091917775321, 0.05293169986076862, 0.0184420315537287, 0.04294472623437107, 0.05384869480282728, 0.06862652834993865, 0.1434727307465219, 0.13014516524304764, 0.14283094183897305, 0.15476437716028124, 0.14335469825078906, 0.15476551997128118, 0.15389314040201207, 0.14499099412110517, 0.1646586539936239, 0.42255470889347735, 0.46454075466293065, 0.44103809128390825, 0.4445627656988088, 0.47217832809756455, 0.45296131431367226, 0.44219202469859464, 0.44168740411218377, 0.44493214750241983, 0.11182782387379753, 0.11173558176568021, 0.10138240106614815, 0.12488674551975909, 0.10273332347253195, 0.0970848950327079, 0.10894600019138578, 0.1130670277428173, 0.11829577546665515, 0.14540727231836847, 0.28447483892739733, 0.26440216718424314, 0.1827169809011342, 0.1967818721167539, 0.1290231784956315, 0.22484703138983853, 0.2435070355954998, 0.14288332363901612, 0.3074153083721701, 0.3034971554251098, 0.323958818223814, 0.3218228418410899, 0.3013796916450162, 0.3152165178622156, 0.3027670634632387, 0.3207432053900766, 0.3102628188868207, 0.2426007391435272, 0.21945623775416667, 0.268208028565292, 0.24495150191609605, 0.22065384399611787, 0.2703326499446467, 0.2520514025458884, 0.2640574256321997, 0.23775578206788373, 0.22330900122434794, 0.20084061105721895, 0.20237536743761497, 0.19086571663572038, 0.20448237248981416, 0.1846514790920929, 0.18829689955191709, 0.22010501926862958, 0.20704392112805026, 0.19970469159745197, 0.18850720732108373, 0.18254084549289917, 0.25912294469449937, 0.19604031895930163, 0.17935684116599004, 0.19282140363331945, 0.19175608739215821, 0.18992982248363355, 0.5541751596749267, 0.18046459927013492, 0.7235462915111932, 0.5502756818579533, 0.19248006472901402, 0.6572431188512124, 0.49559553012688085, 0.17391510325816872, 0.6707153637156391, 0.6286220117657617, 0.16964131868621912, 0.1908374933944862, 0.587157252836209, 0.5686223380915884, 0.6500050281667298, 0.20784635578758293, 0.12598989547462092, 0.6967624706510098, 0.1691155437474563, 0.19560187661169282, 0.1967090441389101, 0.17095352215511195, 0.1891195529401717, 0.1773154045473122, 0.18015985376441856, 0.1865000452760659, 0.18157214803937605, 0.07491902707087594, 0.07967315296110045, 0.07822741346497764, 0.0905098924597636, 0.08109982530064042, 0.08927050950122395, 0.08599735345014836, 0.07840666898783799, 0.07588224010329336]}, "mutation_prompt": null}
{"id": "737b6640-3584-40e3-8575-b99d12b234c7", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 100\n        self.inertia_weight = 0.5\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros_like(particles)\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([float('inf')] * self.population_size)\n        \n        # Evaluate initial population\n        for i in range(self.population_size):\n            score = func(particles[i])\n            personal_best_scores[i] = score\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            # PSO update\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coef * r1 * (personal_best_positions[i] - particles[i])\n                                 + self.social_coef * r2 * (global_best_position - particles[i]))\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n            # Differential Evolution update with crossover\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = particles[np.random.choice(idxs, 3, replace=False)]\n                mutant_vector = a + self.mutation_factor * (b - c)\n                trial_vector = np.copy(particles[i])\n                \n                crossover_mask = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover_mask] = mutant_vector[crossover_mask]\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_score = func(trial_vector)\n                eval_count += 1\n\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial_vector\n                    personal_best_scores[i] = trial_score\n\n                # Update global best\n                if trial_score < personal_best_scores[global_best_index]:\n                    global_best_position = trial_vector\n                    global_best_index = i\n\n        return global_best_position", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization with Differential Evolution for improved global search and fine-tuning capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "86b3e4f1-22cc-4fb2-97cc-bf4bb4405e19", "metadata": {"aucs": [0.4882472281863305, 0.5164996094393812, 0.49627912463063206, 0.5339702752982873, 0.5404857484433038, 0.547033222410221, 0.49399054113020424, 0.5367743327470891, 0.5119730119579462, 0.1706997127269757, 0.16635505076312052, 0.18446456584479554, 0.18604242012498118, 0.18385268429613089, 0.19889041587631473, 0.19350555897906274, 0.18935136805081465, 0.186113004482099, 0.1307654169093807, 0.0896874251953903, 0.1412118423293054, 0.12142484023944233, 0.08837419841250671, 0.10400118280198245, 0.0964554587419576, 0.11658723844656671, 0.11926491685202545, 0.08929049749518203, 0.09355381931055196, 0.09727303635479634, 0.09026961265237132, 0.09423101095621911, 0.09339318029108867, 0.08134358186533541, 0.08978638175382525, 0.0790833264319073, 0.9624677687815185, 0.9855801791358813, 0.9816224124392043, 0.9588006997707941, 0.9759509140344366, 0.9710092523361906, 0.9847789324109596, 0.9782110500998692, 0.98016966668225, 0.3034460677447628, 0.3070791946049275, 0.3162936841526668, 0.26956904150950545, 0.27971313253914787, 0.2897636724461585, 0.30055476618523735, 0.3091051582244504, 0.29971065338511116, 0.575103760195953, 0.6579369174912328, 0.5756957078252307, 0.578457448384498, 0.62268343346853, 0.5348743605197566, 0.5437377063519533, 0.5750864631031573, 0.6026443184059901, 0.19122557781747151, 0.219926728416182, 0.17708813534241585, 0.1523831002292707, 0.17127873663224114, 0.24081197620533124, 0.18821531399816682, 0.10537279412279565, 0.21402145621295277, 0.2046246795081199, 0.19412499079843515, 0.20112124180673951, 0.20074072515046604, 0.18249195134365226, 0.1905082713072752, 0.2089302453317663, 0.19436623916189255, 0.2049281654583116, 0.0068166536550172685, 0.0837911965861654, 0.050516084582435505, 0.08976494540162006, 0.024829806428101286, 0.059188024680768336, 0.07305783740295468, 0.0964648656103706, 0.05769154514049968, 0.16280677835660884, 0.13777513171727374, 0.1716677221194739, 0.16142186592296115, 0.1234805081916649, 0.1397229977283585, 0.1689893019576535, 0.19814437959424513, 0.10939187298388475, 0.03371722574371072, 0.01923355698663376, 0.005416925536914974, 0.04565091917775321, 0.05293169986076862, 0.0184420315537287, 0.04294472623437107, 0.05384869480282728, 0.06862652834993865, 0.1434727307465219, 0.13014516524304764, 0.14283094183897305, 0.15476437716028124, 0.14335469825078906, 0.15476551997128118, 0.15389314040201207, 0.14499099412110517, 0.1646586539936239, 0.42255470889347735, 0.46454075466293065, 0.44103809128390825, 0.4445627656988088, 0.47217832809756455, 0.45296131431367226, 0.44219202469859464, 0.44168740411218377, 0.44493214750241983, 0.11182782387379753, 0.11173558176568021, 0.10138240106614815, 0.12488674551975909, 0.10273332347253195, 0.0970848950327079, 0.10894600019138578, 0.1130670277428173, 0.11829577546665515, 0.14540727231836847, 0.28447483892739733, 0.26440216718424314, 0.1827169809011342, 0.1967818721167539, 0.1290231784956315, 0.22484703138983853, 0.2435070355954998, 0.14288332363901612, 0.3074153083721701, 0.3034971554251098, 0.323958818223814, 0.3218228418410899, 0.3013796916450162, 0.3152165178622156, 0.3027670634632387, 0.3207432053900766, 0.3102628188868207, 0.2426007391435272, 0.21945623775416667, 0.268208028565292, 0.24495150191609605, 0.22065384399611787, 0.2703326499446467, 0.2520514025458884, 0.2640574256321997, 0.23775578206788373, 0.22330900122434794, 0.20084061105721895, 0.20237536743761497, 0.19086571663572038, 0.20448237248981416, 0.1846514790920929, 0.18829689955191709, 0.22010501926862958, 0.20704392112805026, 0.19970469159745197, 0.18850720732108373, 0.18254084549289917, 0.25912294469449937, 0.19604031895930163, 0.17935684116599004, 0.19282140363331945, 0.19175608739215821, 0.18992982248363355, 0.5541751596749267, 0.18046459927013492, 0.7235462915111932, 0.5502756818579533, 0.19248006472901402, 0.6572431188512124, 0.49559553012688085, 0.17391510325816872, 0.6707153637156391, 0.6286220117657617, 0.16964131868621912, 0.1908374933944862, 0.587157252836209, 0.5686223380915884, 0.6500050281667298, 0.20784635578758293, 0.12598989547462092, 0.6967624706510098, 0.1691155437474563, 0.19560187661169282, 0.1967090441389101, 0.17095352215511195, 0.1891195529401717, 0.1773154045473122, 0.18015985376441856, 0.1865000452760659, 0.18157214803937605, 0.07491902707087594, 0.07967315296110045, 0.07822741346497764, 0.0905098924597636, 0.08109982530064042, 0.08927050950122395, 0.08599735345014836, 0.07840666898783799, 0.07588224010329336]}, "mutation_prompt": null}
{"id": "738ea5d8-fc16-4b6d-9f70-36705c0caa4d", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 100\n        self.inertia_weight = 0.5\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros_like(particles)\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([float('inf')] * self.population_size)\n        \n        # Evaluate initial population\n        for i in range(self.population_size):\n            score = func(particles[i])\n            personal_best_scores[i] = score\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            # PSO update\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coef * r1 * (personal_best_positions[i] - particles[i])\n                                 + self.social_coef * r2 * (global_best_position - particles[i]))\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n            # Differential Evolution update with crossover\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = particles[np.random.choice(idxs, 3, replace=False)]\n                mutant_vector = a + self.mutation_factor * (b - c)\n                trial_vector = np.copy(particles[i])\n                \n                crossover_mask = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover_mask] = mutant_vector[crossover_mask]\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_score = func(trial_vector)\n                eval_count += 1\n\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial_vector\n                    personal_best_scores[i] = trial_score\n\n                # Update global best\n                if trial_score < personal_best_scores[global_best_index]:\n                    global_best_position = trial_vector\n                    global_best_index = i\n\n        return global_best_position", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization with Differential Evolution for improved global search and fine-tuning capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "86b3e4f1-22cc-4fb2-97cc-bf4bb4405e19", "metadata": {"aucs": [0.4882472281863305, 0.5164996094393812, 0.49627912463063206, 0.5339702752982873, 0.5404857484433038, 0.547033222410221, 0.49399054113020424, 0.5367743327470891, 0.5119730119579462, 0.1706997127269757, 0.16635505076312052, 0.18446456584479554, 0.18604242012498118, 0.18385268429613089, 0.19889041587631473, 0.19350555897906274, 0.18935136805081465, 0.186113004482099, 0.1307654169093807, 0.0896874251953903, 0.1412118423293054, 0.12142484023944233, 0.08837419841250671, 0.10400118280198245, 0.0964554587419576, 0.11658723844656671, 0.11926491685202545, 0.08929049749518203, 0.09355381931055196, 0.09727303635479634, 0.09026961265237132, 0.09423101095621911, 0.09339318029108867, 0.08134358186533541, 0.08978638175382525, 0.0790833264319073, 0.9624677687815185, 0.9855801791358813, 0.9816224124392043, 0.9588006997707941, 0.9759509140344366, 0.9710092523361906, 0.9847789324109596, 0.9782110500998692, 0.98016966668225, 0.3034460677447628, 0.3070791946049275, 0.3162936841526668, 0.26956904150950545, 0.27971313253914787, 0.2897636724461585, 0.30055476618523735, 0.3091051582244504, 0.29971065338511116, 0.575103760195953, 0.6579369174912328, 0.5756957078252307, 0.578457448384498, 0.62268343346853, 0.5348743605197566, 0.5437377063519533, 0.5750864631031573, 0.6026443184059901, 0.19122557781747151, 0.219926728416182, 0.17708813534241585, 0.1523831002292707, 0.17127873663224114, 0.24081197620533124, 0.18821531399816682, 0.10537279412279565, 0.21402145621295277, 0.2046246795081199, 0.19412499079843515, 0.20112124180673951, 0.20074072515046604, 0.18249195134365226, 0.1905082713072752, 0.2089302453317663, 0.19436623916189255, 0.2049281654583116, 0.0068166536550172685, 0.0837911965861654, 0.050516084582435505, 0.08976494540162006, 0.024829806428101286, 0.059188024680768336, 0.07305783740295468, 0.0964648656103706, 0.05769154514049968, 0.16280677835660884, 0.13777513171727374, 0.1716677221194739, 0.16142186592296115, 0.1234805081916649, 0.1397229977283585, 0.1689893019576535, 0.19814437959424513, 0.10939187298388475, 0.03371722574371072, 0.01923355698663376, 0.005416925536914974, 0.04565091917775321, 0.05293169986076862, 0.0184420315537287, 0.04294472623437107, 0.05384869480282728, 0.06862652834993865, 0.1434727307465219, 0.13014516524304764, 0.14283094183897305, 0.15476437716028124, 0.14335469825078906, 0.15476551997128118, 0.15389314040201207, 0.14499099412110517, 0.1646586539936239, 0.42255470889347735, 0.46454075466293065, 0.44103809128390825, 0.4445627656988088, 0.47217832809756455, 0.45296131431367226, 0.44219202469859464, 0.44168740411218377, 0.44493214750241983, 0.11182782387379753, 0.11173558176568021, 0.10138240106614815, 0.12488674551975909, 0.10273332347253195, 0.0970848950327079, 0.10894600019138578, 0.1130670277428173, 0.11829577546665515, 0.14540727231836847, 0.28447483892739733, 0.26440216718424314, 0.1827169809011342, 0.1967818721167539, 0.1290231784956315, 0.22484703138983853, 0.2435070355954998, 0.14288332363901612, 0.3074153083721701, 0.3034971554251098, 0.323958818223814, 0.3218228418410899, 0.3013796916450162, 0.3152165178622156, 0.3027670634632387, 0.3207432053900766, 0.3102628188868207, 0.2426007391435272, 0.21945623775416667, 0.268208028565292, 0.24495150191609605, 0.22065384399611787, 0.2703326499446467, 0.2520514025458884, 0.2640574256321997, 0.23775578206788373, 0.22330900122434794, 0.20084061105721895, 0.20237536743761497, 0.19086571663572038, 0.20448237248981416, 0.1846514790920929, 0.18829689955191709, 0.22010501926862958, 0.20704392112805026, 0.19970469159745197, 0.18850720732108373, 0.18254084549289917, 0.25912294469449937, 0.19604031895930163, 0.17935684116599004, 0.19282140363331945, 0.19175608739215821, 0.18992982248363355, 0.5541751596749267, 0.18046459927013492, 0.7235462915111932, 0.5502756818579533, 0.19248006472901402, 0.6572431188512124, 0.49559553012688085, 0.17391510325816872, 0.6707153637156391, 0.6286220117657617, 0.16964131868621912, 0.1908374933944862, 0.587157252836209, 0.5686223380915884, 0.6500050281667298, 0.20784635578758293, 0.12598989547462092, 0.6967624706510098, 0.1691155437474563, 0.19560187661169282, 0.1967090441389101, 0.17095352215511195, 0.1891195529401717, 0.1773154045473122, 0.18015985376441856, 0.1865000452760659, 0.18157214803937605, 0.07491902707087594, 0.07967315296110045, 0.07822741346497764, 0.0905098924597636, 0.08109982530064042, 0.08927050950122395, 0.08599735345014836, 0.07840666898783799, 0.07588224010329336]}, "mutation_prompt": null}
{"id": "974bd565-2418-443d-8cb4-27b9c7bee148", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 100\n        self.inertia_weight = 0.5\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros_like(particles)\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([float('inf')] * self.population_size)\n        \n        # Evaluate initial population\n        for i in range(self.population_size):\n            score = func(particles[i])\n            personal_best_scores[i] = score\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            # PSO update\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coef * r1 * (personal_best_positions[i] - particles[i])\n                                 + self.social_coef * r2 * (global_best_position - particles[i]))\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n            # Differential Evolution update with crossover\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = particles[np.random.choice(idxs, 3, replace=False)]\n                mutant_vector = a + self.mutation_factor * (b - c)\n                trial_vector = np.copy(particles[i])\n                \n                crossover_mask = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover_mask] = mutant_vector[crossover_mask]\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_score = func(trial_vector)\n                eval_count += 1\n\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial_vector\n                    personal_best_scores[i] = trial_score\n\n                # Update global best\n                if trial_score < personal_best_scores[global_best_index]:\n                    global_best_position = trial_vector\n                    global_best_index = i\n\n        return global_best_position", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization with Differential Evolution for improved global search and fine-tuning capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "86b3e4f1-22cc-4fb2-97cc-bf4bb4405e19", "metadata": {"aucs": [0.4882472281863305, 0.5164996094393812, 0.49627912463063206, 0.5339702752982873, 0.5404857484433038, 0.547033222410221, 0.49399054113020424, 0.5367743327470891, 0.5119730119579462, 0.1706997127269757, 0.16635505076312052, 0.18446456584479554, 0.18604242012498118, 0.18385268429613089, 0.19889041587631473, 0.19350555897906274, 0.18935136805081465, 0.186113004482099, 0.1307654169093807, 0.0896874251953903, 0.1412118423293054, 0.12142484023944233, 0.08837419841250671, 0.10400118280198245, 0.0964554587419576, 0.11658723844656671, 0.11926491685202545, 0.08929049749518203, 0.09355381931055196, 0.09727303635479634, 0.09026961265237132, 0.09423101095621911, 0.09339318029108867, 0.08134358186533541, 0.08978638175382525, 0.0790833264319073, 0.9624677687815185, 0.9855801791358813, 0.9816224124392043, 0.9588006997707941, 0.9759509140344366, 0.9710092523361906, 0.9847789324109596, 0.9782110500998692, 0.98016966668225, 0.3034460677447628, 0.3070791946049275, 0.3162936841526668, 0.26956904150950545, 0.27971313253914787, 0.2897636724461585, 0.30055476618523735, 0.3091051582244504, 0.29971065338511116, 0.575103760195953, 0.6579369174912328, 0.5756957078252307, 0.578457448384498, 0.62268343346853, 0.5348743605197566, 0.5437377063519533, 0.5750864631031573, 0.6026443184059901, 0.19122557781747151, 0.219926728416182, 0.17708813534241585, 0.1523831002292707, 0.17127873663224114, 0.24081197620533124, 0.18821531399816682, 0.10537279412279565, 0.21402145621295277, 0.2046246795081199, 0.19412499079843515, 0.20112124180673951, 0.20074072515046604, 0.18249195134365226, 0.1905082713072752, 0.2089302453317663, 0.19436623916189255, 0.2049281654583116, 0.0068166536550172685, 0.0837911965861654, 0.050516084582435505, 0.08976494540162006, 0.024829806428101286, 0.059188024680768336, 0.07305783740295468, 0.0964648656103706, 0.05769154514049968, 0.16280677835660884, 0.13777513171727374, 0.1716677221194739, 0.16142186592296115, 0.1234805081916649, 0.1397229977283585, 0.1689893019576535, 0.19814437959424513, 0.10939187298388475, 0.03371722574371072, 0.01923355698663376, 0.005416925536914974, 0.04565091917775321, 0.05293169986076862, 0.0184420315537287, 0.04294472623437107, 0.05384869480282728, 0.06862652834993865, 0.1434727307465219, 0.13014516524304764, 0.14283094183897305, 0.15476437716028124, 0.14335469825078906, 0.15476551997128118, 0.15389314040201207, 0.14499099412110517, 0.1646586539936239, 0.42255470889347735, 0.46454075466293065, 0.44103809128390825, 0.4445627656988088, 0.47217832809756455, 0.45296131431367226, 0.44219202469859464, 0.44168740411218377, 0.44493214750241983, 0.11182782387379753, 0.11173558176568021, 0.10138240106614815, 0.12488674551975909, 0.10273332347253195, 0.0970848950327079, 0.10894600019138578, 0.1130670277428173, 0.11829577546665515, 0.14540727231836847, 0.28447483892739733, 0.26440216718424314, 0.1827169809011342, 0.1967818721167539, 0.1290231784956315, 0.22484703138983853, 0.2435070355954998, 0.14288332363901612, 0.3074153083721701, 0.3034971554251098, 0.323958818223814, 0.3218228418410899, 0.3013796916450162, 0.3152165178622156, 0.3027670634632387, 0.3207432053900766, 0.3102628188868207, 0.2426007391435272, 0.21945623775416667, 0.268208028565292, 0.24495150191609605, 0.22065384399611787, 0.2703326499446467, 0.2520514025458884, 0.2640574256321997, 0.23775578206788373, 0.22330900122434794, 0.20084061105721895, 0.20237536743761497, 0.19086571663572038, 0.20448237248981416, 0.1846514790920929, 0.18829689955191709, 0.22010501926862958, 0.20704392112805026, 0.19970469159745197, 0.18850720732108373, 0.18254084549289917, 0.25912294469449937, 0.19604031895930163, 0.17935684116599004, 0.19282140363331945, 0.19175608739215821, 0.18992982248363355, 0.5541751596749267, 0.18046459927013492, 0.7235462915111932, 0.5502756818579533, 0.19248006472901402, 0.6572431188512124, 0.49559553012688085, 0.17391510325816872, 0.6707153637156391, 0.6286220117657617, 0.16964131868621912, 0.1908374933944862, 0.587157252836209, 0.5686223380915884, 0.6500050281667298, 0.20784635578758293, 0.12598989547462092, 0.6967624706510098, 0.1691155437474563, 0.19560187661169282, 0.1967090441389101, 0.17095352215511195, 0.1891195529401717, 0.1773154045473122, 0.18015985376441856, 0.1865000452760659, 0.18157214803937605, 0.07491902707087594, 0.07967315296110045, 0.07822741346497764, 0.0905098924597636, 0.08109982530064042, 0.08927050950122395, 0.08599735345014836, 0.07840666898783799, 0.07588224010329336]}, "mutation_prompt": null}
{"id": "29d2cb64-324e-43f2-9128-9e47224a8763", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 100\n        self.inertia_weight = 0.5\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros_like(particles)\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([float('inf')] * self.population_size)\n        \n        # Evaluate initial population\n        for i in range(self.population_size):\n            score = func(particles[i])\n            personal_best_scores[i] = score\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            # PSO update\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coef * r1 * (personal_best_positions[i] - particles[i])\n                                 + self.social_coef * r2 * (global_best_position - particles[i]))\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n            # Differential Evolution update with crossover\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = particles[np.random.choice(idxs, 3, replace=False)]\n                mutant_vector = a + self.mutation_factor * (b - c)\n                trial_vector = np.copy(particles[i])\n                \n                crossover_mask = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover_mask] = mutant_vector[crossover_mask]\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_score = func(trial_vector)\n                eval_count += 1\n\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial_vector\n                    personal_best_scores[i] = trial_score\n\n                # Update global best\n                if trial_score < personal_best_scores[global_best_index]:\n                    global_best_position = trial_vector\n                    global_best_index = i\n\n        return global_best_position", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization with Differential Evolution for improved global search and fine-tuning capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "86b3e4f1-22cc-4fb2-97cc-bf4bb4405e19", "metadata": {"aucs": [0.4882472281863305, 0.5164996094393812, 0.49627912463063206, 0.5339702752982873, 0.5404857484433038, 0.547033222410221, 0.49399054113020424, 0.5367743327470891, 0.5119730119579462, 0.1706997127269757, 0.16635505076312052, 0.18446456584479554, 0.18604242012498118, 0.18385268429613089, 0.19889041587631473, 0.19350555897906274, 0.18935136805081465, 0.186113004482099, 0.1307654169093807, 0.0896874251953903, 0.1412118423293054, 0.12142484023944233, 0.08837419841250671, 0.10400118280198245, 0.0964554587419576, 0.11658723844656671, 0.11926491685202545, 0.08929049749518203, 0.09355381931055196, 0.09727303635479634, 0.09026961265237132, 0.09423101095621911, 0.09339318029108867, 0.08134358186533541, 0.08978638175382525, 0.0790833264319073, 0.9624677687815185, 0.9855801791358813, 0.9816224124392043, 0.9588006997707941, 0.9759509140344366, 0.9710092523361906, 0.9847789324109596, 0.9782110500998692, 0.98016966668225, 0.3034460677447628, 0.3070791946049275, 0.3162936841526668, 0.26956904150950545, 0.27971313253914787, 0.2897636724461585, 0.30055476618523735, 0.3091051582244504, 0.29971065338511116, 0.575103760195953, 0.6579369174912328, 0.5756957078252307, 0.578457448384498, 0.62268343346853, 0.5348743605197566, 0.5437377063519533, 0.5750864631031573, 0.6026443184059901, 0.19122557781747151, 0.219926728416182, 0.17708813534241585, 0.1523831002292707, 0.17127873663224114, 0.24081197620533124, 0.18821531399816682, 0.10537279412279565, 0.21402145621295277, 0.2046246795081199, 0.19412499079843515, 0.20112124180673951, 0.20074072515046604, 0.18249195134365226, 0.1905082713072752, 0.2089302453317663, 0.19436623916189255, 0.2049281654583116, 0.0068166536550172685, 0.0837911965861654, 0.050516084582435505, 0.08976494540162006, 0.024829806428101286, 0.059188024680768336, 0.07305783740295468, 0.0964648656103706, 0.05769154514049968, 0.16280677835660884, 0.13777513171727374, 0.1716677221194739, 0.16142186592296115, 0.1234805081916649, 0.1397229977283585, 0.1689893019576535, 0.19814437959424513, 0.10939187298388475, 0.03371722574371072, 0.01923355698663376, 0.005416925536914974, 0.04565091917775321, 0.05293169986076862, 0.0184420315537287, 0.04294472623437107, 0.05384869480282728, 0.06862652834993865, 0.1434727307465219, 0.13014516524304764, 0.14283094183897305, 0.15476437716028124, 0.14335469825078906, 0.15476551997128118, 0.15389314040201207, 0.14499099412110517, 0.1646586539936239, 0.42255470889347735, 0.46454075466293065, 0.44103809128390825, 0.4445627656988088, 0.47217832809756455, 0.45296131431367226, 0.44219202469859464, 0.44168740411218377, 0.44493214750241983, 0.11182782387379753, 0.11173558176568021, 0.10138240106614815, 0.12488674551975909, 0.10273332347253195, 0.0970848950327079, 0.10894600019138578, 0.1130670277428173, 0.11829577546665515, 0.14540727231836847, 0.28447483892739733, 0.26440216718424314, 0.1827169809011342, 0.1967818721167539, 0.1290231784956315, 0.22484703138983853, 0.2435070355954998, 0.14288332363901612, 0.3074153083721701, 0.3034971554251098, 0.323958818223814, 0.3218228418410899, 0.3013796916450162, 0.3152165178622156, 0.3027670634632387, 0.3207432053900766, 0.3102628188868207, 0.2426007391435272, 0.21945623775416667, 0.268208028565292, 0.24495150191609605, 0.22065384399611787, 0.2703326499446467, 0.2520514025458884, 0.2640574256321997, 0.23775578206788373, 0.22330900122434794, 0.20084061105721895, 0.20237536743761497, 0.19086571663572038, 0.20448237248981416, 0.1846514790920929, 0.18829689955191709, 0.22010501926862958, 0.20704392112805026, 0.19970469159745197, 0.18850720732108373, 0.18254084549289917, 0.25912294469449937, 0.19604031895930163, 0.17935684116599004, 0.19282140363331945, 0.19175608739215821, 0.18992982248363355, 0.5541751596749267, 0.18046459927013492, 0.7235462915111932, 0.5502756818579533, 0.19248006472901402, 0.6572431188512124, 0.49559553012688085, 0.17391510325816872, 0.6707153637156391, 0.6286220117657617, 0.16964131868621912, 0.1908374933944862, 0.587157252836209, 0.5686223380915884, 0.6500050281667298, 0.20784635578758293, 0.12598989547462092, 0.6967624706510098, 0.1691155437474563, 0.19560187661169282, 0.1967090441389101, 0.17095352215511195, 0.1891195529401717, 0.1773154045473122, 0.18015985376441856, 0.1865000452760659, 0.18157214803937605, 0.07491902707087594, 0.07967315296110045, 0.07822741346497764, 0.0905098924597636, 0.08109982530064042, 0.08927050950122395, 0.08599735345014836, 0.07840666898783799, 0.07588224010329336]}, "mutation_prompt": null}
{"id": "7c50a9e8-dbd1-453a-9d60-9a8e74085c6f", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 80  # Reduced size for quicker evaluations\n        self.inertia_weight = 0.7  # Adaptive inertia weight\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.9  # Slightly higher mutation factor\n        self.crossover_prob = 0.8  # Adjusted crossover probability\n\n    def __call__(self, func):\n        # Initialize particles with slight improvement\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))  # Simplified initialization\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.full(self.population_size, np.inf)\n        \n        # Evaluate initial population\n        scores = np.apply_along_axis(func, 1, particles)\n        personal_best_scores = np.minimum(personal_best_scores, scores)\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        global_best_score = personal_best_scores[global_best_index]\n\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            # PSO update\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coef * r1 * (personal_best_positions[i] - particles[i])\n                                 + self.social_coef * r2 * (global_best_position - particles[i]))\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n            # Differential Evolution update with crossover\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = particles[idxs]\n                mutant_vector = a + self.mutation_factor * (b - c)\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_prob, mutant_vector, particles[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_score = func(trial_vector)\n                eval_count += 1\n\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial_vector\n                    personal_best_scores[i] = trial_score\n\n                # Update global best\n                if trial_score < global_best_score:\n                    global_best_position = trial_vector\n                    global_best_score = trial_score\n\n            # Adaptive adjustment to parameters\n            self.inertia_weight *= 0.99  # Gradually reduce inertia weight for convergence\n\n            # Early stopping if no improvement\n            if eval_count > self.budget * 0.8 and np.isclose(global_best_score, np.min(personal_best_scores), atol=1e-8):\n                break\n\n        return global_best_position", "name": "EnhancedHybridPSODE", "description": "An enhanced HybridPSODE with adaptive parameters and strategic early stopping for improved convergence efficiency.", "configspace": "", "generation": 28, "fitness": 0.2672705895797296, "feedback": "The algorithm EnhancedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.22.", "error": "", "parent_id": "86b3e4f1-22cc-4fb2-97cc-bf4bb4405e19", "metadata": {"aucs": [0.5943083114778801, 0.5832341281149467, 0.5771051391476356, 0.5974773243163367, 0.6234942682060634, 0.6346433765003066, 0.6191378544111203, 0.5802197613317372, 0.6238049930440615, 0.26577846114762926, 0.26852252232023244, 0.2810749437448965, 0.2785934370741605, 0.26659203969101686, 0.2559472381123328, 0.3006706891343244, 0.26427759759219194, 0.2935835165150753, 0.11115481015473783, 0.09983243517000306, 0.12154414797150714, 0.1189590417162173, 0.11187605661414946, 0.11032978032429985, 0.10511622379753027, 0.11167134566930437, 0.10998595492448915, 0.09502340004343279, 0.09138763387944204, 0.09580802386192822, 0.09808786696237459, 0.09394065499435744, 0.10441761824708551, 0.08437623860234411, 0.10286000281188623, 0.1279375718741127, 0.978621475178485, 0.989399921938833, 0.9847671109965719, 0.9714198956608088, 0.977504939080642, 0.9777700362028804, 0.9852854521470089, 0.9847794321506607, 0.983958498194169, 0.29490743183030976, 0.30592091799985466, 0.30998741453831735, 0.3314826594528062, 0.32863120606011675, 0.3382737902104562, 0.30500848806590497, 0.3424364426153297, 0.35042730718974213, 0.5772959168412242, 0.6470504188733956, 0.5927874699524451, 0.5875872231038847, 0.6392219164456566, 0.19464395128675227, 0.56159975019212, 0.5645036456981083, 0.6301162543749661, 0.14526362747068255, 0.18401107505193504, 0.18561170433456686, 0.11105354914030541, 0.19228513207729414, 0.204566502208666, 0.22398784003128225, 0.13024431172818185, 0.21045523315030656, 0.21406624754855152, 0.15732551611837875, 0.19703979378949832, 0.1570178104827049, 0.19259354270350393, 0.21331165959627385, 0.22203756404170738, 0.185522283291488, 0.22549783229729348, 0.09232357189235896, 0.055335768240734384, 0.03524130600399533, 0.02329196702701941, 0.006440322965829415, 0.059282321571334395, 0.10186794846325009, 0.08562082565940476, 0.09175995697328121, 0.1465042163558664, 0.12907023425204567, 0.1766558101290655, 0.173382722846379, 0.09800529386237777, 0.16221099497360825, 0.1172122211859693, 0.16150753982501886, 0.2165287343376454, 0.03450420134044019, 0.020966355351397903, 0.049142044379390626, 0.049118058075110604, 0.05261585946207181, 0.0482257190739136, 0.06460459284653242, 0.03878825082596249, 0.03267642555125383, 0.1644082432247258, 0.14446505165158707, 0.1579372797039903, 0.1554706994341979, 0.15960057452145915, 0.17387683549188238, 0.15100745289531003, 0.14169815738959457, 0.1352902412353575, 0.46077632353428866, 0.4725025076439938, 0.4532971446241342, 0.48914761399537754, 0.4440046650973788, 0.4767403005033367, 0.4698551887109709, 0.47093891453135295, 0.47457858974423617, 0.1322415129681589, 0.1275238685212431, 0.10463263816589385, 0.10474417627285781, 0.09797464325053118, 0.11881327147705556, 0.11921082899428892, 0.10025553875879956, 0.0943654854548448, 0.2900821266607795, 0.22498406632216172, 0.16749933162310626, 0.14771765490303146, 0.1666141666135067, 0.14089436322096693, 0.19216642774492176, 0.1664388861171967, 0.1527394788013111, 0.319381572812762, 0.3313807555840511, 0.32251142413234735, 0.3289120971702274, 0.32770822166345615, 0.32152019501286466, 0.32797928968661216, 0.34802465780512304, 0.3466267828226104, 0.2033571000940919, 0.23596238043415674, 0.26540232875513703, 0.24382748052805192, 0.24492935040047792, 0.24814258798239885, 0.26886162614789233, 0.26898193248508906, 0.25046360817263824, 0.18233943948878117, 0.17961190349645562, 0.18301297375266534, 0.18361068797544233, 0.19068148427456444, 0.18552589467453595, 0.20693295282479507, 0.2108681917395695, 0.18690507496372188, 0.2058957236157437, 0.18904744883559488, 0.29334828758321596, 0.20958040296269442, 0.34265198201487157, 0.22416691966989066, 0.2082080809641743, 0.18841234328862888, 0.18596435402302636, 0.14433127575133353, 0.17920369204853503, 0.5914090154227469, 0.19996778792197134, 0.1913988504749382, 0.16515238340164506, 0.13824220290922473, 0.7051819814899352, 0.6689534652956599, 0.5745744468589616, 0.2025314320580216, 0.19669799508411845, 0.6264307563780506, 0.16185405194249292, 0.14905339279724283, 0.20508881526471656, 0.20480070748120272, 0.6099177697766837, 0.1713713435357599, 0.18260789192649374, 0.19739550390273364, 0.17247629131604025, 0.1826558237790037, 0.17336754178116986, 0.20537660435892335, 0.1927601208956219, 0.19789515664157686, 0.08135699251493933, 0.07936194811043829, 0.06860850112179573, 0.07968099303166964, 0.08233576474917392, 0.08664734776450644, 0.07920054896868767, 0.08342050687744051, 0.08096879362945908]}, "mutation_prompt": null}
{"id": "946597cf-bcc4-42bb-ad03-41e9e755053e", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 100\n        self.inertia_weight = 0.5\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros_like(particles)\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([float('inf')] * self.population_size)\n        \n        # Evaluate initial population\n        for i in range(self.population_size):\n            score = func(particles[i])\n            personal_best_scores[i] = score\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            # PSO update\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coef * r1 * (personal_best_positions[i] - particles[i])\n                                 + self.social_coef * r2 * (global_best_position - particles[i]))\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n            # Differential Evolution update with crossover\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = particles[np.random.choice(idxs, 3, replace=False)]\n                mutant_vector = a + self.mutation_factor * (b - c)\n                trial_vector = np.copy(particles[i])\n                \n                crossover_mask = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover_mask] = mutant_vector[crossover_mask]\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_score = func(trial_vector)\n                eval_count += 1\n\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial_vector\n                    personal_best_scores[i] = trial_score\n\n                # Update global best\n                if trial_score < personal_best_scores[global_best_index]:\n                    global_best_position = trial_vector\n                    global_best_index = i\n\n        return global_best_position", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization with Differential Evolution for improved global search and fine-tuning capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "86b3e4f1-22cc-4fb2-97cc-bf4bb4405e19", "metadata": {"aucs": [0.4882472281863305, 0.5164996094393812, 0.49627912463063206, 0.5339702752982873, 0.5404857484433038, 0.547033222410221, 0.49399054113020424, 0.5367743327470891, 0.5119730119579462, 0.1706997127269757, 0.16635505076312052, 0.18446456584479554, 0.18604242012498118, 0.18385268429613089, 0.19889041587631473, 0.19350555897906274, 0.18935136805081465, 0.186113004482099, 0.1307654169093807, 0.0896874251953903, 0.1412118423293054, 0.12142484023944233, 0.08837419841250671, 0.10400118280198245, 0.0964554587419576, 0.11658723844656671, 0.11926491685202545, 0.08929049749518203, 0.09355381931055196, 0.09727303635479634, 0.09026961265237132, 0.09423101095621911, 0.09339318029108867, 0.08134358186533541, 0.08978638175382525, 0.0790833264319073, 0.9624677687815185, 0.9855801791358813, 0.9816224124392043, 0.9588006997707941, 0.9759509140344366, 0.9710092523361906, 0.9847789324109596, 0.9782110500998692, 0.98016966668225, 0.3034460677447628, 0.3070791946049275, 0.3162936841526668, 0.26956904150950545, 0.27971313253914787, 0.2897636724461585, 0.30055476618523735, 0.3091051582244504, 0.29971065338511116, 0.575103760195953, 0.6579369174912328, 0.5756957078252307, 0.578457448384498, 0.62268343346853, 0.5348743605197566, 0.5437377063519533, 0.5750864631031573, 0.6026443184059901, 0.19122557781747151, 0.219926728416182, 0.17708813534241585, 0.1523831002292707, 0.17127873663224114, 0.24081197620533124, 0.18821531399816682, 0.10537279412279565, 0.21402145621295277, 0.2046246795081199, 0.19412499079843515, 0.20112124180673951, 0.20074072515046604, 0.18249195134365226, 0.1905082713072752, 0.2089302453317663, 0.19436623916189255, 0.2049281654583116, 0.0068166536550172685, 0.0837911965861654, 0.050516084582435505, 0.08976494540162006, 0.024829806428101286, 0.059188024680768336, 0.07305783740295468, 0.0964648656103706, 0.05769154514049968, 0.16280677835660884, 0.13777513171727374, 0.1716677221194739, 0.16142186592296115, 0.1234805081916649, 0.1397229977283585, 0.1689893019576535, 0.19814437959424513, 0.10939187298388475, 0.03371722574371072, 0.01923355698663376, 0.005416925536914974, 0.04565091917775321, 0.05293169986076862, 0.0184420315537287, 0.04294472623437107, 0.05384869480282728, 0.06862652834993865, 0.1434727307465219, 0.13014516524304764, 0.14283094183897305, 0.15476437716028124, 0.14335469825078906, 0.15476551997128118, 0.15389314040201207, 0.14499099412110517, 0.1646586539936239, 0.42255470889347735, 0.46454075466293065, 0.44103809128390825, 0.4445627656988088, 0.47217832809756455, 0.45296131431367226, 0.44219202469859464, 0.44168740411218377, 0.44493214750241983, 0.11182782387379753, 0.11173558176568021, 0.10138240106614815, 0.12488674551975909, 0.10273332347253195, 0.0970848950327079, 0.10894600019138578, 0.1130670277428173, 0.11829577546665515, 0.14540727231836847, 0.28447483892739733, 0.26440216718424314, 0.1827169809011342, 0.1967818721167539, 0.1290231784956315, 0.22484703138983853, 0.2435070355954998, 0.14288332363901612, 0.3074153083721701, 0.3034971554251098, 0.323958818223814, 0.3218228418410899, 0.3013796916450162, 0.3152165178622156, 0.3027670634632387, 0.3207432053900766, 0.3102628188868207, 0.2426007391435272, 0.21945623775416667, 0.268208028565292, 0.24495150191609605, 0.22065384399611787, 0.2703326499446467, 0.2520514025458884, 0.2640574256321997, 0.23775578206788373, 0.22330900122434794, 0.20084061105721895, 0.20237536743761497, 0.19086571663572038, 0.20448237248981416, 0.1846514790920929, 0.18829689955191709, 0.22010501926862958, 0.20704392112805026, 0.19970469159745197, 0.18850720732108373, 0.18254084549289917, 0.25912294469449937, 0.19604031895930163, 0.17935684116599004, 0.19282140363331945, 0.19175608739215821, 0.18992982248363355, 0.5541751596749267, 0.18046459927013492, 0.7235462915111932, 0.5502756818579533, 0.19248006472901402, 0.6572431188512124, 0.49559553012688085, 0.17391510325816872, 0.6707153637156391, 0.6286220117657617, 0.16964131868621912, 0.1908374933944862, 0.587157252836209, 0.5686223380915884, 0.6500050281667298, 0.20784635578758293, 0.12598989547462092, 0.6967624706510098, 0.1691155437474563, 0.19560187661169282, 0.1967090441389101, 0.17095352215511195, 0.1891195529401717, 0.1773154045473122, 0.18015985376441856, 0.1865000452760659, 0.18157214803937605, 0.07491902707087594, 0.07967315296110045, 0.07822741346497764, 0.0905098924597636, 0.08109982530064042, 0.08927050950122395, 0.08599735345014836, 0.07840666898783799, 0.07588224010329336]}, "mutation_prompt": null}
{"id": "0d5a741f-36fd-41e7-a60b-49fc4ac7101d", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 100\n        self.inertia_weight = 0.5\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros_like(particles)\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([float('inf')] * self.population_size)\n        \n        # Evaluate initial population\n        for i in range(self.population_size):\n            score = func(particles[i])\n            personal_best_scores[i] = score\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            # PSO update\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coef * r1 * (personal_best_positions[i] - particles[i])\n                                 + self.social_coef * r2 * (global_best_position - particles[i]))\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n            # Differential Evolution update with crossover\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = particles[np.random.choice(idxs, 3, replace=False)]\n                mutant_vector = a + self.mutation_factor * (b - c)\n                trial_vector = np.copy(particles[i])\n                \n                crossover_mask = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover_mask] = mutant_vector[crossover_mask]\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_score = func(trial_vector)\n                eval_count += 1\n\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial_vector\n                    personal_best_scores[i] = trial_score\n\n                # Update global best\n                if trial_score < personal_best_scores[global_best_index]:\n                    global_best_position = trial_vector\n                    global_best_index = i\n\n        return global_best_position", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization with Differential Evolution for improved global search and fine-tuning capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "86b3e4f1-22cc-4fb2-97cc-bf4bb4405e19", "metadata": {"aucs": [0.4882472281863305, 0.5164996094393812, 0.49627912463063206, 0.5339702752982873, 0.5404857484433038, 0.547033222410221, 0.49399054113020424, 0.5367743327470891, 0.5119730119579462, 0.1706997127269757, 0.16635505076312052, 0.18446456584479554, 0.18604242012498118, 0.18385268429613089, 0.19889041587631473, 0.19350555897906274, 0.18935136805081465, 0.186113004482099, 0.1307654169093807, 0.0896874251953903, 0.1412118423293054, 0.12142484023944233, 0.08837419841250671, 0.10400118280198245, 0.0964554587419576, 0.11658723844656671, 0.11926491685202545, 0.08929049749518203, 0.09355381931055196, 0.09727303635479634, 0.09026961265237132, 0.09423101095621911, 0.09339318029108867, 0.08134358186533541, 0.08978638175382525, 0.0790833264319073, 0.9624677687815185, 0.9855801791358813, 0.9816224124392043, 0.9588006997707941, 0.9759509140344366, 0.9710092523361906, 0.9847789324109596, 0.9782110500998692, 0.98016966668225, 0.3034460677447628, 0.3070791946049275, 0.3162936841526668, 0.26956904150950545, 0.27971313253914787, 0.2897636724461585, 0.30055476618523735, 0.3091051582244504, 0.29971065338511116, 0.575103760195953, 0.6579369174912328, 0.5756957078252307, 0.578457448384498, 0.62268343346853, 0.5348743605197566, 0.5437377063519533, 0.5750864631031573, 0.6026443184059901, 0.19122557781747151, 0.219926728416182, 0.17708813534241585, 0.1523831002292707, 0.17127873663224114, 0.24081197620533124, 0.18821531399816682, 0.10537279412279565, 0.21402145621295277, 0.2046246795081199, 0.19412499079843515, 0.20112124180673951, 0.20074072515046604, 0.18249195134365226, 0.1905082713072752, 0.2089302453317663, 0.19436623916189255, 0.2049281654583116, 0.0068166536550172685, 0.0837911965861654, 0.050516084582435505, 0.08976494540162006, 0.024829806428101286, 0.059188024680768336, 0.07305783740295468, 0.0964648656103706, 0.05769154514049968, 0.16280677835660884, 0.13777513171727374, 0.1716677221194739, 0.16142186592296115, 0.1234805081916649, 0.1397229977283585, 0.1689893019576535, 0.19814437959424513, 0.10939187298388475, 0.03371722574371072, 0.01923355698663376, 0.005416925536914974, 0.04565091917775321, 0.05293169986076862, 0.0184420315537287, 0.04294472623437107, 0.05384869480282728, 0.06862652834993865, 0.1434727307465219, 0.13014516524304764, 0.14283094183897305, 0.15476437716028124, 0.14335469825078906, 0.15476551997128118, 0.15389314040201207, 0.14499099412110517, 0.1646586539936239, 0.42255470889347735, 0.46454075466293065, 0.44103809128390825, 0.4445627656988088, 0.47217832809756455, 0.45296131431367226, 0.44219202469859464, 0.44168740411218377, 0.44493214750241983, 0.11182782387379753, 0.11173558176568021, 0.10138240106614815, 0.12488674551975909, 0.10273332347253195, 0.0970848950327079, 0.10894600019138578, 0.1130670277428173, 0.11829577546665515, 0.14540727231836847, 0.28447483892739733, 0.26440216718424314, 0.1827169809011342, 0.1967818721167539, 0.1290231784956315, 0.22484703138983853, 0.2435070355954998, 0.14288332363901612, 0.3074153083721701, 0.3034971554251098, 0.323958818223814, 0.3218228418410899, 0.3013796916450162, 0.3152165178622156, 0.3027670634632387, 0.3207432053900766, 0.3102628188868207, 0.2426007391435272, 0.21945623775416667, 0.268208028565292, 0.24495150191609605, 0.22065384399611787, 0.2703326499446467, 0.2520514025458884, 0.2640574256321997, 0.23775578206788373, 0.22330900122434794, 0.20084061105721895, 0.20237536743761497, 0.19086571663572038, 0.20448237248981416, 0.1846514790920929, 0.18829689955191709, 0.22010501926862958, 0.20704392112805026, 0.19970469159745197, 0.18850720732108373, 0.18254084549289917, 0.25912294469449937, 0.19604031895930163, 0.17935684116599004, 0.19282140363331945, 0.19175608739215821, 0.18992982248363355, 0.5541751596749267, 0.18046459927013492, 0.7235462915111932, 0.5502756818579533, 0.19248006472901402, 0.6572431188512124, 0.49559553012688085, 0.17391510325816872, 0.6707153637156391, 0.6286220117657617, 0.16964131868621912, 0.1908374933944862, 0.587157252836209, 0.5686223380915884, 0.6500050281667298, 0.20784635578758293, 0.12598989547462092, 0.6967624706510098, 0.1691155437474563, 0.19560187661169282, 0.1967090441389101, 0.17095352215511195, 0.1891195529401717, 0.1773154045473122, 0.18015985376441856, 0.1865000452760659, 0.18157214803937605, 0.07491902707087594, 0.07967315296110045, 0.07822741346497764, 0.0905098924597636, 0.08109982530064042, 0.08927050950122395, 0.08599735345014836, 0.07840666898783799, 0.07588224010329336]}, "mutation_prompt": null}
{"id": "895f82e3-26f2-42d6-a0fb-39a3a7a4a0cd", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 100\n        self.inertia_weight = 0.5\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros_like(particles)\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([float('inf')] * self.population_size)\n        \n        # Evaluate initial population\n        for i in range(self.population_size):\n            score = func(particles[i])\n            personal_best_scores[i] = score\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            # PSO update\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coef * r1 * (personal_best_positions[i] - particles[i])\n                                 + self.social_coef * r2 * (global_best_position - particles[i]))\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n            # Differential Evolution update with crossover\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = particles[np.random.choice(idxs, 3, replace=False)]\n                mutant_vector = a + self.mutation_factor * (b - c)\n                trial_vector = np.copy(particles[i])\n                \n                crossover_mask = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover_mask] = mutant_vector[crossover_mask]\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_score = func(trial_vector)\n                eval_count += 1\n\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial_vector\n                    personal_best_scores[i] = trial_score\n\n                # Update global best\n                if trial_score < personal_best_scores[global_best_index]:\n                    global_best_position = trial_vector\n                    global_best_index = i\n\n        return global_best_position", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization with Differential Evolution for improved global search and fine-tuning capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "86b3e4f1-22cc-4fb2-97cc-bf4bb4405e19", "metadata": {"aucs": [0.4882472281863305, 0.5164996094393812, 0.49627912463063206, 0.5339702752982873, 0.5404857484433038, 0.547033222410221, 0.49399054113020424, 0.5367743327470891, 0.5119730119579462, 0.1706997127269757, 0.16635505076312052, 0.18446456584479554, 0.18604242012498118, 0.18385268429613089, 0.19889041587631473, 0.19350555897906274, 0.18935136805081465, 0.186113004482099, 0.1307654169093807, 0.0896874251953903, 0.1412118423293054, 0.12142484023944233, 0.08837419841250671, 0.10400118280198245, 0.0964554587419576, 0.11658723844656671, 0.11926491685202545, 0.08929049749518203, 0.09355381931055196, 0.09727303635479634, 0.09026961265237132, 0.09423101095621911, 0.09339318029108867, 0.08134358186533541, 0.08978638175382525, 0.0790833264319073, 0.9624677687815185, 0.9855801791358813, 0.9816224124392043, 0.9588006997707941, 0.9759509140344366, 0.9710092523361906, 0.9847789324109596, 0.9782110500998692, 0.98016966668225, 0.3034460677447628, 0.3070791946049275, 0.3162936841526668, 0.26956904150950545, 0.27971313253914787, 0.2897636724461585, 0.30055476618523735, 0.3091051582244504, 0.29971065338511116, 0.575103760195953, 0.6579369174912328, 0.5756957078252307, 0.578457448384498, 0.62268343346853, 0.5348743605197566, 0.5437377063519533, 0.5750864631031573, 0.6026443184059901, 0.19122557781747151, 0.219926728416182, 0.17708813534241585, 0.1523831002292707, 0.17127873663224114, 0.24081197620533124, 0.18821531399816682, 0.10537279412279565, 0.21402145621295277, 0.2046246795081199, 0.19412499079843515, 0.20112124180673951, 0.20074072515046604, 0.18249195134365226, 0.1905082713072752, 0.2089302453317663, 0.19436623916189255, 0.2049281654583116, 0.0068166536550172685, 0.0837911965861654, 0.050516084582435505, 0.08976494540162006, 0.024829806428101286, 0.059188024680768336, 0.07305783740295468, 0.0964648656103706, 0.05769154514049968, 0.16280677835660884, 0.13777513171727374, 0.1716677221194739, 0.16142186592296115, 0.1234805081916649, 0.1397229977283585, 0.1689893019576535, 0.19814437959424513, 0.10939187298388475, 0.03371722574371072, 0.01923355698663376, 0.005416925536914974, 0.04565091917775321, 0.05293169986076862, 0.0184420315537287, 0.04294472623437107, 0.05384869480282728, 0.06862652834993865, 0.1434727307465219, 0.13014516524304764, 0.14283094183897305, 0.15476437716028124, 0.14335469825078906, 0.15476551997128118, 0.15389314040201207, 0.14499099412110517, 0.1646586539936239, 0.42255470889347735, 0.46454075466293065, 0.44103809128390825, 0.4445627656988088, 0.47217832809756455, 0.45296131431367226, 0.44219202469859464, 0.44168740411218377, 0.44493214750241983, 0.11182782387379753, 0.11173558176568021, 0.10138240106614815, 0.12488674551975909, 0.10273332347253195, 0.0970848950327079, 0.10894600019138578, 0.1130670277428173, 0.11829577546665515, 0.14540727231836847, 0.28447483892739733, 0.26440216718424314, 0.1827169809011342, 0.1967818721167539, 0.1290231784956315, 0.22484703138983853, 0.2435070355954998, 0.14288332363901612, 0.3074153083721701, 0.3034971554251098, 0.323958818223814, 0.3218228418410899, 0.3013796916450162, 0.3152165178622156, 0.3027670634632387, 0.3207432053900766, 0.3102628188868207, 0.2426007391435272, 0.21945623775416667, 0.268208028565292, 0.24495150191609605, 0.22065384399611787, 0.2703326499446467, 0.2520514025458884, 0.2640574256321997, 0.23775578206788373, 0.22330900122434794, 0.20084061105721895, 0.20237536743761497, 0.19086571663572038, 0.20448237248981416, 0.1846514790920929, 0.18829689955191709, 0.22010501926862958, 0.20704392112805026, 0.19970469159745197, 0.18850720732108373, 0.18254084549289917, 0.25912294469449937, 0.19604031895930163, 0.17935684116599004, 0.19282140363331945, 0.19175608739215821, 0.18992982248363355, 0.5541751596749267, 0.18046459927013492, 0.7235462915111932, 0.5502756818579533, 0.19248006472901402, 0.6572431188512124, 0.49559553012688085, 0.17391510325816872, 0.6707153637156391, 0.6286220117657617, 0.16964131868621912, 0.1908374933944862, 0.587157252836209, 0.5686223380915884, 0.6500050281667298, 0.20784635578758293, 0.12598989547462092, 0.6967624706510098, 0.1691155437474563, 0.19560187661169282, 0.1967090441389101, 0.17095352215511195, 0.1891195529401717, 0.1773154045473122, 0.18015985376441856, 0.1865000452760659, 0.18157214803937605, 0.07491902707087594, 0.07967315296110045, 0.07822741346497764, 0.0905098924597636, 0.08109982530064042, 0.08927050950122395, 0.08599735345014836, 0.07840666898783799, 0.07588224010329336]}, "mutation_prompt": null}
{"id": "9afac318-eb0d-4008-91b9-77739ce89a7d", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 80  # Reduced population for efficiency\n        self.initial_inertia_weight = 0.9\n        self.final_inertia_weight = 0.4\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros((self.population_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.full(self.population_size, np.inf)\n\n        # Evaluate initial population\n        for i in range(self.population_size):\n            personal_best_scores[i] = func(particles[i])\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = np.copy(personal_best_positions[global_best_index])\n\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            # Adaptive inertia weight\n            inertia_weight = self.initial_inertia_weight - (self.initial_inertia_weight - self.final_inertia_weight) * (eval_count / self.budget)\n\n            # PSO and DE combined update\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (inertia_weight * velocities[i]\n                                 + self.cognitive_coef * r1 * (personal_best_positions[i] - particles[i])\n                                 + self.social_coef * r2 * (global_best_position - particles[i]))\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n                # Conduct DE mutation and crossover\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = particles[np.random.choice(idxs, 3, replace=False)]\n                mutant_vector = a + self.mutation_factor * (b - c)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector = np.where(crossover_mask, mutant_vector, particles[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_score = func(trial_vector)\n                eval_count += 1\n\n                # Update personal and global bests\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial_vector\n                    personal_best_scores[i] = trial_score\n                    if trial_score < personal_best_scores[global_best_index]:\n                        global_best_position = np.copy(trial_vector)\n                        global_best_index = i\n\n        return global_best_position", "name": "EnhancedHybridPSODE", "description": "An enhanced Hybrid PSO-DE with adaptive inertia and reduced complexity for improved convergence efficiency.", "configspace": "", "generation": 32, "fitness": 0.19023836647494768, "feedback": "The algorithm EnhancedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.19.", "error": "", "parent_id": "86b3e4f1-22cc-4fb2-97cc-bf4bb4405e19", "metadata": {"aucs": [0.3574209257168889, 0.3629753999353704, 0.3329259028641218, 0.3936829443885487, 0.3989927261791949, 0.3810630691584681, 0.37386379077628085, 0.37368127092686276, 0.35741893046723816, 0.07140312654508763, 0.07227081324386386, 0.05066931855682599, 0.07868719147231817, 0.07460124967648263, 0.06607502060123538, 0.09598929659705069, 0.0709266955403316, 0.056155446922441454, 0.09721996780248776, 0.08813863333869609, 0.07791677139785957, 0.08913410269880773, 0.11500551196934339, 0.07420869862157653, 0.08645578526552544, 0.09277694907391432, 0.08644740482686253, 0.06155402664357956, 0.07420402499247503, 0.057329977443189795, 0.06687944580206351, 0.07291419614340666, 0.06854742842060058, 0.06407525109345302, 0.07095027149726407, 0.06103296108690681, 0.9825595856876383, 0.9893273533342064, 0.982088835155761, 0.9803506908602965, 0.9712079353804298, 0.9699762558322653, 0.9799045738381491, 0.9829210423922632, 0.9809707477395259, 0.20028978558817112, 0.20423649812807376, 0.18038335652900694, 0.212191791949927, 0.2151845093562662, 0.1779858204221091, 0.2094483232058869, 0.14679206390400346, 0.194484208302243, 0.33448498421156525, 0.3727245153531842, 0.2954511640682471, 0.40918173154596904, 0.39651676509227807, 0.17643006564498498, 0.3487234596229829, 0.3126554813958389, 0.3880438629034949, 0.10450368691672707, 0.10395917630411222, 0.09439899594827017, 0.0999070597304893, 0.11771864481256111, 0.12918147037010042, 0.11408808991434838, 0.0997762617106186, 0.12159713179319642, 0.09322347856318225, 0.10517766719497246, 0.12305536057344801, 0.11595758591228189, 0.12539662421633024, 0.09965386048911828, 0.11980548706613814, 0.070575043876695, 0.08731176241427197, 0.023556347977029324, 0.020375880295057325, 0.009607981532578358, 0.0014197901086790976, 0.007827941210248546, 0.006800339911408271, 0.02664311828941668, 0.010752720807316485, 0.008833750876470203, 0.05893675809011967, 0.07465645993919856, 0.13175843129524, 0.07028305716203798, 0.08494156443006451, 0.07093898178070246, 0.1001277845255869, 0.07155658869569181, 0.05383822214633216, 0.013753449259804262, 0.003069004483719384, 0.001296225479739177, 0.00656277856593801, 0.0033144378638986227, 0.004667389657380783, 0.010872425159708876, 0.009140192544889958, 0.015317673082465677, 0.07657346038344237, 0.08069452771317231, 0.08796994647121159, 0.07584867935457928, 0.08160033854187043, 0.08884482977821062, 0.07077435237248442, 0.08206112729304227, 0.08896601886343491, 0.3140638651454759, 0.34464537011831675, 0.32268608487475936, 0.37407012202488976, 0.3443831788860281, 0.3684966462987457, 0.3396886158863385, 0.3342271529640599, 0.3430835426875001, 0.07740639886813605, 0.09697887640317293, 0.09110950391925798, 0.07976005759220939, 0.09016330765943481, 0.08152994306343475, 0.07535088341462792, 0.07795857973358866, 0.08583503787094127, 0.1538806071216655, 0.13720956538811802, 0.1396050381345354, 0.188595803762456, 0.2111490296378411, 0.14925014895076982, 0.18736541547498464, 0.17381751783753685, 0.17580304501304744, 0.23484997525250895, 0.2356965740609317, 0.2421013579473007, 0.23701892428272298, 0.23646488218494588, 0.227988654848281, 0.252496555344759, 0.2625394148071981, 0.24661174612722836, 0.17409580339984554, 0.1693078081982572, 0.17279866853610892, 0.16491949263274563, 0.17177320039791588, 0.16976617906402802, 0.2019375705994142, 0.1942694146820727, 0.18794038123544288, 0.1822213791197509, 0.19918836218721925, 0.1928873200357787, 0.1814243470027228, 0.18630092507506957, 0.16803235481022816, 0.16715703758325984, 0.18556504727398493, 0.18784447277638738, 0.17110063820163557, 0.1663681714936298, 0.1617302402499421, 0.17966597389149452, 0.1776463583736404, 0.17108880380565583, 0.17367422728379422, 0.16730217260455615, 0.1825636079325973, 0.18495507034309155, 0.14554193830523576, 0.16223937132061494, 0.1948161092851045, 0.1567896331063695, 0.17648979850195834, 0.3632940682755691, 0.1788280328599785, 0.14640777208096822, 0.2787916961300392, 0.19182870363650484, 0.15979892771832638, 0.39131848069348196, 0.3627121068007422, 0.17142207708416268, 0.19036771894562998, 0.28915587734197057, 0.14280726445284309, 0.1918636967181282, 0.1810680776244855, 0.17929778965160237, 0.1942202800957813, 0.20281775877917485, 0.18594743187151508, 0.1907469251405438, 0.18751812483054298, 0.18735888856736926, 0.07218438768580582, 0.06891315782131457, 0.07982118562044127, 0.06931926106742992, 0.06799789600297534, 0.0668634562093594, 0.06583164962027555, 0.07033633072892587, 0.07178493275508224]}, "mutation_prompt": null}
{"id": "fe264601-e2c9-4e08-8c84-b00f15a1f5da", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 100\n        self.inertia_weight = 0.5\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros_like(particles)\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([float('inf')] * self.population_size)\n        \n        # Evaluate initial population\n        for i in range(self.population_size):\n            score = func(particles[i])\n            personal_best_scores[i] = score\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            # PSO update\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coef * r1 * (personal_best_positions[i] - particles[i])\n                                 + self.social_coef * r2 * (global_best_position - particles[i]))\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n            # Differential Evolution update with crossover\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = particles[np.random.choice(idxs, 3, replace=False)]\n                mutant_vector = a + self.mutation_factor * (b - c)\n                trial_vector = np.copy(particles[i])\n                \n                crossover_mask = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover_mask] = mutant_vector[crossover_mask]\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_score = func(trial_vector)\n                eval_count += 1\n\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial_vector\n                    personal_best_scores[i] = trial_score\n\n                # Update global best\n                if trial_score < personal_best_scores[global_best_index]:\n                    global_best_position = trial_vector\n                    global_best_index = i\n\n        return global_best_position", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization with Differential Evolution for improved global search and fine-tuning capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "86b3e4f1-22cc-4fb2-97cc-bf4bb4405e19", "metadata": {"aucs": [0.4882472281863305, 0.5164996094393812, 0.49627912463063206, 0.5339702752982873, 0.5404857484433038, 0.547033222410221, 0.49399054113020424, 0.5367743327470891, 0.5119730119579462, 0.1706997127269757, 0.16635505076312052, 0.18446456584479554, 0.18604242012498118, 0.18385268429613089, 0.19889041587631473, 0.19350555897906274, 0.18935136805081465, 0.186113004482099, 0.1307654169093807, 0.0896874251953903, 0.1412118423293054, 0.12142484023944233, 0.08837419841250671, 0.10400118280198245, 0.0964554587419576, 0.11658723844656671, 0.11926491685202545, 0.08929049749518203, 0.09355381931055196, 0.09727303635479634, 0.09026961265237132, 0.09423101095621911, 0.09339318029108867, 0.08134358186533541, 0.08978638175382525, 0.0790833264319073, 0.9624677687815185, 0.9855801791358813, 0.9816224124392043, 0.9588006997707941, 0.9759509140344366, 0.9710092523361906, 0.9847789324109596, 0.9782110500998692, 0.98016966668225, 0.3034460677447628, 0.3070791946049275, 0.3162936841526668, 0.26956904150950545, 0.27971313253914787, 0.2897636724461585, 0.30055476618523735, 0.3091051582244504, 0.29971065338511116, 0.575103760195953, 0.6579369174912328, 0.5756957078252307, 0.578457448384498, 0.62268343346853, 0.5348743605197566, 0.5437377063519533, 0.5750864631031573, 0.6026443184059901, 0.19122557781747151, 0.219926728416182, 0.17708813534241585, 0.1523831002292707, 0.17127873663224114, 0.24081197620533124, 0.18821531399816682, 0.10537279412279565, 0.21402145621295277, 0.2046246795081199, 0.19412499079843515, 0.20112124180673951, 0.20074072515046604, 0.18249195134365226, 0.1905082713072752, 0.2089302453317663, 0.19436623916189255, 0.2049281654583116, 0.0068166536550172685, 0.0837911965861654, 0.050516084582435505, 0.08976494540162006, 0.024829806428101286, 0.059188024680768336, 0.07305783740295468, 0.0964648656103706, 0.05769154514049968, 0.16280677835660884, 0.13777513171727374, 0.1716677221194739, 0.16142186592296115, 0.1234805081916649, 0.1397229977283585, 0.1689893019576535, 0.19814437959424513, 0.10939187298388475, 0.03371722574371072, 0.01923355698663376, 0.005416925536914974, 0.04565091917775321, 0.05293169986076862, 0.0184420315537287, 0.04294472623437107, 0.05384869480282728, 0.06862652834993865, 0.1434727307465219, 0.13014516524304764, 0.14283094183897305, 0.15476437716028124, 0.14335469825078906, 0.15476551997128118, 0.15389314040201207, 0.14499099412110517, 0.1646586539936239, 0.42255470889347735, 0.46454075466293065, 0.44103809128390825, 0.4445627656988088, 0.47217832809756455, 0.45296131431367226, 0.44219202469859464, 0.44168740411218377, 0.44493214750241983, 0.11182782387379753, 0.11173558176568021, 0.10138240106614815, 0.12488674551975909, 0.10273332347253195, 0.0970848950327079, 0.10894600019138578, 0.1130670277428173, 0.11829577546665515, 0.14540727231836847, 0.28447483892739733, 0.26440216718424314, 0.1827169809011342, 0.1967818721167539, 0.1290231784956315, 0.22484703138983853, 0.2435070355954998, 0.14288332363901612, 0.3074153083721701, 0.3034971554251098, 0.323958818223814, 0.3218228418410899, 0.3013796916450162, 0.3152165178622156, 0.3027670634632387, 0.3207432053900766, 0.3102628188868207, 0.2426007391435272, 0.21945623775416667, 0.268208028565292, 0.24495150191609605, 0.22065384399611787, 0.2703326499446467, 0.2520514025458884, 0.2640574256321997, 0.23775578206788373, 0.22330900122434794, 0.20084061105721895, 0.20237536743761497, 0.19086571663572038, 0.20448237248981416, 0.1846514790920929, 0.18829689955191709, 0.22010501926862958, 0.20704392112805026, 0.19970469159745197, 0.18850720732108373, 0.18254084549289917, 0.25912294469449937, 0.19604031895930163, 0.17935684116599004, 0.19282140363331945, 0.19175608739215821, 0.18992982248363355, 0.5541751596749267, 0.18046459927013492, 0.7235462915111932, 0.5502756818579533, 0.19248006472901402, 0.6572431188512124, 0.49559553012688085, 0.17391510325816872, 0.6707153637156391, 0.6286220117657617, 0.16964131868621912, 0.1908374933944862, 0.587157252836209, 0.5686223380915884, 0.6500050281667298, 0.20784635578758293, 0.12598989547462092, 0.6967624706510098, 0.1691155437474563, 0.19560187661169282, 0.1967090441389101, 0.17095352215511195, 0.1891195529401717, 0.1773154045473122, 0.18015985376441856, 0.1865000452760659, 0.18157214803937605, 0.07491902707087594, 0.07967315296110045, 0.07822741346497764, 0.0905098924597636, 0.08109982530064042, 0.08927050950122395, 0.08599735345014836, 0.07840666898783799, 0.07588224010329336]}, "mutation_prompt": null}
{"id": "edb7af9f-aecf-4fda-80a6-8b14098826cc", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 100\n        self.inertia_weight = 0.5\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros_like(particles)\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([float('inf')] * self.population_size)\n        \n        # Evaluate initial population\n        for i in range(self.population_size):\n            score = func(particles[i])\n            personal_best_scores[i] = score\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            # PSO update\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coef * r1 * (personal_best_positions[i] - particles[i])\n                                 + self.social_coef * r2 * (global_best_position - particles[i]))\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n            # Differential Evolution update with crossover\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = particles[np.random.choice(idxs, 3, replace=False)]\n                mutant_vector = a + self.mutation_factor * (b - c)\n                trial_vector = np.copy(particles[i])\n                \n                crossover_mask = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover_mask] = mutant_vector[crossover_mask]\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_score = func(trial_vector)\n                eval_count += 1\n\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial_vector\n                    personal_best_scores[i] = trial_score\n\n                # Update global best\n                if trial_score < personal_best_scores[global_best_index]:\n                    global_best_position = trial_vector\n                    global_best_index = i\n\n        return global_best_position", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization with Differential Evolution for improved global search and fine-tuning capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "86b3e4f1-22cc-4fb2-97cc-bf4bb4405e19", "metadata": {"aucs": [0.4882472281863305, 0.5164996094393812, 0.49627912463063206, 0.5339702752982873, 0.5404857484433038, 0.547033222410221, 0.49399054113020424, 0.5367743327470891, 0.5119730119579462, 0.1706997127269757, 0.16635505076312052, 0.18446456584479554, 0.18604242012498118, 0.18385268429613089, 0.19889041587631473, 0.19350555897906274, 0.18935136805081465, 0.186113004482099, 0.1307654169093807, 0.0896874251953903, 0.1412118423293054, 0.12142484023944233, 0.08837419841250671, 0.10400118280198245, 0.0964554587419576, 0.11658723844656671, 0.11926491685202545, 0.08929049749518203, 0.09355381931055196, 0.09727303635479634, 0.09026961265237132, 0.09423101095621911, 0.09339318029108867, 0.08134358186533541, 0.08978638175382525, 0.0790833264319073, 0.9624677687815185, 0.9855801791358813, 0.9816224124392043, 0.9588006997707941, 0.9759509140344366, 0.9710092523361906, 0.9847789324109596, 0.9782110500998692, 0.98016966668225, 0.3034460677447628, 0.3070791946049275, 0.3162936841526668, 0.26956904150950545, 0.27971313253914787, 0.2897636724461585, 0.30055476618523735, 0.3091051582244504, 0.29971065338511116, 0.575103760195953, 0.6579369174912328, 0.5756957078252307, 0.578457448384498, 0.62268343346853, 0.5348743605197566, 0.5437377063519533, 0.5750864631031573, 0.6026443184059901, 0.19122557781747151, 0.219926728416182, 0.17708813534241585, 0.1523831002292707, 0.17127873663224114, 0.24081197620533124, 0.18821531399816682, 0.10537279412279565, 0.21402145621295277, 0.2046246795081199, 0.19412499079843515, 0.20112124180673951, 0.20074072515046604, 0.18249195134365226, 0.1905082713072752, 0.2089302453317663, 0.19436623916189255, 0.2049281654583116, 0.0068166536550172685, 0.0837911965861654, 0.050516084582435505, 0.08976494540162006, 0.024829806428101286, 0.059188024680768336, 0.07305783740295468, 0.0964648656103706, 0.05769154514049968, 0.16280677835660884, 0.13777513171727374, 0.1716677221194739, 0.16142186592296115, 0.1234805081916649, 0.1397229977283585, 0.1689893019576535, 0.19814437959424513, 0.10939187298388475, 0.03371722574371072, 0.01923355698663376, 0.005416925536914974, 0.04565091917775321, 0.05293169986076862, 0.0184420315537287, 0.04294472623437107, 0.05384869480282728, 0.06862652834993865, 0.1434727307465219, 0.13014516524304764, 0.14283094183897305, 0.15476437716028124, 0.14335469825078906, 0.15476551997128118, 0.15389314040201207, 0.14499099412110517, 0.1646586539936239, 0.42255470889347735, 0.46454075466293065, 0.44103809128390825, 0.4445627656988088, 0.47217832809756455, 0.45296131431367226, 0.44219202469859464, 0.44168740411218377, 0.44493214750241983, 0.11182782387379753, 0.11173558176568021, 0.10138240106614815, 0.12488674551975909, 0.10273332347253195, 0.0970848950327079, 0.10894600019138578, 0.1130670277428173, 0.11829577546665515, 0.14540727231836847, 0.28447483892739733, 0.26440216718424314, 0.1827169809011342, 0.1967818721167539, 0.1290231784956315, 0.22484703138983853, 0.2435070355954998, 0.14288332363901612, 0.3074153083721701, 0.3034971554251098, 0.323958818223814, 0.3218228418410899, 0.3013796916450162, 0.3152165178622156, 0.3027670634632387, 0.3207432053900766, 0.3102628188868207, 0.2426007391435272, 0.21945623775416667, 0.268208028565292, 0.24495150191609605, 0.22065384399611787, 0.2703326499446467, 0.2520514025458884, 0.2640574256321997, 0.23775578206788373, 0.22330900122434794, 0.20084061105721895, 0.20237536743761497, 0.19086571663572038, 0.20448237248981416, 0.1846514790920929, 0.18829689955191709, 0.22010501926862958, 0.20704392112805026, 0.19970469159745197, 0.18850720732108373, 0.18254084549289917, 0.25912294469449937, 0.19604031895930163, 0.17935684116599004, 0.19282140363331945, 0.19175608739215821, 0.18992982248363355, 0.5541751596749267, 0.18046459927013492, 0.7235462915111932, 0.5502756818579533, 0.19248006472901402, 0.6572431188512124, 0.49559553012688085, 0.17391510325816872, 0.6707153637156391, 0.6286220117657617, 0.16964131868621912, 0.1908374933944862, 0.587157252836209, 0.5686223380915884, 0.6500050281667298, 0.20784635578758293, 0.12598989547462092, 0.6967624706510098, 0.1691155437474563, 0.19560187661169282, 0.1967090441389101, 0.17095352215511195, 0.1891195529401717, 0.1773154045473122, 0.18015985376441856, 0.1865000452760659, 0.18157214803937605, 0.07491902707087594, 0.07967315296110045, 0.07822741346497764, 0.0905098924597636, 0.08109982530064042, 0.08927050950122395, 0.08599735345014836, 0.07840666898783799, 0.07588224010329336]}, "mutation_prompt": null}
{"id": "333b4ddc-a7a1-4e64-b655-a5ce941cd1ad", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 100\n        self.inertia_weight = 0.5\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros_like(particles)\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([float('inf')] * self.population_size)\n        \n        # Evaluate initial population\n        for i in range(self.population_size):\n            score = func(particles[i])\n            personal_best_scores[i] = score\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            # PSO update\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coef * r1 * (personal_best_positions[i] - particles[i])\n                                 + self.social_coef * r2 * (global_best_position - particles[i]))\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n            # Differential Evolution update with crossover\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = particles[np.random.choice(idxs, 3, replace=False)]\n                mutant_vector = a + self.mutation_factor * (b - c)\n                trial_vector = np.copy(particles[i])\n                \n                crossover_mask = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover_mask] = mutant_vector[crossover_mask]\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_score = func(trial_vector)\n                eval_count += 1\n\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial_vector\n                    personal_best_scores[i] = trial_score\n\n                # Update global best\n                if trial_score < personal_best_scores[global_best_index]:\n                    global_best_position = trial_vector\n                    global_best_index = i\n\n        return global_best_position", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization with Differential Evolution for improved global search and fine-tuning capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "86b3e4f1-22cc-4fb2-97cc-bf4bb4405e19", "metadata": {"aucs": [0.4882472281863305, 0.5164996094393812, 0.49627912463063206, 0.5339702752982873, 0.5404857484433038, 0.547033222410221, 0.49399054113020424, 0.5367743327470891, 0.5119730119579462, 0.1706997127269757, 0.16635505076312052, 0.18446456584479554, 0.18604242012498118, 0.18385268429613089, 0.19889041587631473, 0.19350555897906274, 0.18935136805081465, 0.186113004482099, 0.1307654169093807, 0.0896874251953903, 0.1412118423293054, 0.12142484023944233, 0.08837419841250671, 0.10400118280198245, 0.0964554587419576, 0.11658723844656671, 0.11926491685202545, 0.08929049749518203, 0.09355381931055196, 0.09727303635479634, 0.09026961265237132, 0.09423101095621911, 0.09339318029108867, 0.08134358186533541, 0.08978638175382525, 0.0790833264319073, 0.9624677687815185, 0.9855801791358813, 0.9816224124392043, 0.9588006997707941, 0.9759509140344366, 0.9710092523361906, 0.9847789324109596, 0.9782110500998692, 0.98016966668225, 0.3034460677447628, 0.3070791946049275, 0.3162936841526668, 0.26956904150950545, 0.27971313253914787, 0.2897636724461585, 0.30055476618523735, 0.3091051582244504, 0.29971065338511116, 0.575103760195953, 0.6579369174912328, 0.5756957078252307, 0.578457448384498, 0.62268343346853, 0.5348743605197566, 0.5437377063519533, 0.5750864631031573, 0.6026443184059901, 0.19122557781747151, 0.219926728416182, 0.17708813534241585, 0.1523831002292707, 0.17127873663224114, 0.24081197620533124, 0.18821531399816682, 0.10537279412279565, 0.21402145621295277, 0.2046246795081199, 0.19412499079843515, 0.20112124180673951, 0.20074072515046604, 0.18249195134365226, 0.1905082713072752, 0.2089302453317663, 0.19436623916189255, 0.2049281654583116, 0.0068166536550172685, 0.0837911965861654, 0.050516084582435505, 0.08976494540162006, 0.024829806428101286, 0.059188024680768336, 0.07305783740295468, 0.0964648656103706, 0.05769154514049968, 0.16280677835660884, 0.13777513171727374, 0.1716677221194739, 0.16142186592296115, 0.1234805081916649, 0.1397229977283585, 0.1689893019576535, 0.19814437959424513, 0.10939187298388475, 0.03371722574371072, 0.01923355698663376, 0.005416925536914974, 0.04565091917775321, 0.05293169986076862, 0.0184420315537287, 0.04294472623437107, 0.05384869480282728, 0.06862652834993865, 0.1434727307465219, 0.13014516524304764, 0.14283094183897305, 0.15476437716028124, 0.14335469825078906, 0.15476551997128118, 0.15389314040201207, 0.14499099412110517, 0.1646586539936239, 0.42255470889347735, 0.46454075466293065, 0.44103809128390825, 0.4445627656988088, 0.47217832809756455, 0.45296131431367226, 0.44219202469859464, 0.44168740411218377, 0.44493214750241983, 0.11182782387379753, 0.11173558176568021, 0.10138240106614815, 0.12488674551975909, 0.10273332347253195, 0.0970848950327079, 0.10894600019138578, 0.1130670277428173, 0.11829577546665515, 0.14540727231836847, 0.28447483892739733, 0.26440216718424314, 0.1827169809011342, 0.1967818721167539, 0.1290231784956315, 0.22484703138983853, 0.2435070355954998, 0.14288332363901612, 0.3074153083721701, 0.3034971554251098, 0.323958818223814, 0.3218228418410899, 0.3013796916450162, 0.3152165178622156, 0.3027670634632387, 0.3207432053900766, 0.3102628188868207, 0.2426007391435272, 0.21945623775416667, 0.268208028565292, 0.24495150191609605, 0.22065384399611787, 0.2703326499446467, 0.2520514025458884, 0.2640574256321997, 0.23775578206788373, 0.22330900122434794, 0.20084061105721895, 0.20237536743761497, 0.19086571663572038, 0.20448237248981416, 0.1846514790920929, 0.18829689955191709, 0.22010501926862958, 0.20704392112805026, 0.19970469159745197, 0.18850720732108373, 0.18254084549289917, 0.25912294469449937, 0.19604031895930163, 0.17935684116599004, 0.19282140363331945, 0.19175608739215821, 0.18992982248363355, 0.5541751596749267, 0.18046459927013492, 0.7235462915111932, 0.5502756818579533, 0.19248006472901402, 0.6572431188512124, 0.49559553012688085, 0.17391510325816872, 0.6707153637156391, 0.6286220117657617, 0.16964131868621912, 0.1908374933944862, 0.587157252836209, 0.5686223380915884, 0.6500050281667298, 0.20784635578758293, 0.12598989547462092, 0.6967624706510098, 0.1691155437474563, 0.19560187661169282, 0.1967090441389101, 0.17095352215511195, 0.1891195529401717, 0.1773154045473122, 0.18015985376441856, 0.1865000452760659, 0.18157214803937605, 0.07491902707087594, 0.07967315296110045, 0.07822741346497764, 0.0905098924597636, 0.08109982530064042, 0.08927050950122395, 0.08599735345014836, 0.07840666898783799, 0.07588224010329336]}, "mutation_prompt": null}
{"id": "72c8cbea-4d11-45a4-98d8-1c373fd22900", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 100\n        \n        # Adaptive parameters\n        self.inertia_weight = 0.5\n        self.cognitive_coef = np.random.uniform(1.4, 1.6)\n        self.social_coef = np.random.uniform(1.4, 1.6)\n        \n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros_like(particles)\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        \n        # Evaluate initial population\n        scores = np.apply_along_axis(func, 1, particles)\n        personal_best_scores = scores.copy()\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            # PSO update\n            r1, r2 = np.random.rand(2, self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities\n                          + self.cognitive_coef * r1 * (personal_best_positions - particles)\n                          + self.social_coef * r2 * (global_best_position - particles))\n            particles += velocities\n            particles = np.clip(particles, self.lower_bound, self.upper_bound)\n\n            # Differential Evolution update with crossover\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = particles[idxs]\n                mutant_vector = a + self.mutation_factor * (b - c)\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_prob, mutant_vector, particles[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_score = func(trial_vector)\n                eval_count += 1\n\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial_vector\n                    personal_best_scores[i] = trial_score\n\n                # Update global best\n                if trial_score < personal_best_scores[global_best_index]:\n                    global_best_position = trial_vector\n                    global_best_index = i\n\n        return global_best_position", "name": "EnhancedHybridPSODE", "description": "Enhanced Hybrid PSODE with adaptive parameters and streamlined operations for improved efficiency and convergence.", "configspace": "", "generation": 36, "fitness": 0.21170179234969452, "feedback": "The algorithm EnhancedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.20.", "error": "", "parent_id": "86b3e4f1-22cc-4fb2-97cc-bf4bb4405e19", "metadata": {"aucs": [0.4540625189285864, 0.4563476542477636, 0.42687872592595655, 0.47071848046678477, 0.46616256550596114, 0.48849653387152536, 0.4582389816646377, 0.45202336273823707, 0.4619890225959825, 0.1381271581911565, 0.1908736899881769, 0.15727724850762193, 0.13736275944356235, 0.1628027843513592, 0.16523180125541315, 0.1673226230775663, 0.1389218582251458, 0.17308822486532194, 0.11036749373337318, 0.09781026746974275, 0.10195612611345661, 0.08349575476595805, 0.11538201730795594, 0.10614687680233037, 0.09242106452270304, 0.0980530498556842, 0.08360598998130264, 0.09377256918497301, 0.08252586452952748, 0.08154266781480068, 0.0825817371347739, 0.08432227100075507, 0.08443926492435161, 0.07091943237218745, 0.10055592748158593, 0.0939864451696305, 0.9791563558747672, 0.9758516871991312, 0.9712260086766371, 0.9713414639249335, 0.9714771197175719, 0.9716968509945905, 0.9703684541005857, 0.9784842876156264, 0.97153155795087, 0.2266814113766833, 0.23652126043694255, 0.23469808202351028, 0.2257737179244218, 0.2205010155403162, 0.24165905451509673, 0.21409134357914184, 0.2390244261121105, 0.22185394048301832, 0.32200545929328617, 0.26567559646026484, 0.2634034813834294, 0.3696506789506415, 0.19243078246223633, 0.3292039624898293, 0.34517346733578014, 0.26241964959050745, 0.40432177032875205, 0.11696371638933156, 0.14683763427007124, 0.1184875892602748, 0.12185927732125323, 0.09601189998397786, 0.13299235844319557, 0.119685660115043, 0.13416889667865484, 0.1306793393211474, 0.1239616879587635, 0.15890585974650362, 0.15750225933554263, 0.13464190467960957, 0.11487639333118804, 0.15091805922421975, 0.13836391333646803, 0.1438470570490037, 0.11952470483572708, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009220128702955854, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06581667121013945, 0.039931128836311336, 0.05329732465788184, 0.07810061818045921, 0.0665844873315884, 0.0743434434025938, 0.0785942102559225, 0.05631480008996481, 0.07835535495261137, 0.01330042902876305, 9.999999999998899e-05, 0.011231285697636317, 0.002976855086356811, 0.01073808723556302, 0.020236202692431315, 0.006474336435201566, 0.004458409287167897, 0.0015768700217486664, 0.06012080843401002, 0.09169186847038457, 0.07966437695286022, 0.08210978364975541, 0.062195013310279657, 0.07507787025859758, 0.0624642064180736, 0.05946165585396068, 0.04896996610398985, 0.34454841195512775, 0.3875057615316341, 0.3919666763347046, 0.392152232274232, 0.3941122090560826, 0.38592824405696136, 0.3852472903313836, 0.38648986106814576, 0.39872918251398193, 0.10113307004818162, 0.08818150805998193, 0.08236796563054172, 0.09466615510873622, 0.08934021420199734, 0.10886193917230613, 0.08628460301975571, 0.09389567159130163, 0.10658885965949338, 0.13869410005522154, 0.15627694958818883, 0.14859558807638418, 0.16561173411571328, 0.1494592398618796, 0.13362539466853263, 0.13842710882708276, 0.11972099202999831, 0.16364709053591597, 0.27111805799759436, 0.2788965368222448, 0.25082496669799337, 0.275789681085018, 0.27191876356152456, 0.2658132278964651, 0.28182677844181503, 0.28758635617547257, 0.27208590932860066, 0.19985911843860094, 0.1871881605501502, 0.19062086384858823, 0.16729171189189673, 0.20450785758844903, 0.16813945032983924, 0.20373858713285664, 0.1879702111633622, 0.209716865938542, 0.19085450949576555, 0.18333607602939928, 0.1951423303203238, 0.1984128621952984, 0.2055665800656814, 0.1745009308621538, 0.1863253385433944, 0.2001527530936481, 0.19934255773847454, 0.16438005348160856, 0.17321140471122942, 0.19692572396536412, 0.18826523494016345, 0.18507219121390517, 0.1921272425171876, 0.18979207048270796, 0.17840176820818832, 0.2086743987004479, 0.1989855776114594, 0.15219530456627106, 0.48534100213802467, 0.38702042429451844, 0.3279955158864062, 0.43480086828766595, 0.5330964351565894, 0.47940313926224554, 0.18866990382012605, 0.16663239627912008, 0.2624423245815567, 0.3788779194096916, 0.2930477901820937, 0.19619603476469905, 0.19463038303435753, 0.16215490114561504, 0.3887360453752696, 0.4403857539698838, 0.19845173933028326, 0.17556013117566382, 0.2021993925111979, 0.18831762069555968, 0.19288962533126652, 0.17412652159659758, 0.17561927099157038, 0.1713949378962607, 0.19756722661700354, 0.05964516251915719, 0.08382100369898038, 0.07761299004120026, 0.07376893514181226, 0.08940416402375673, 0.0793800451445742, 0.08702510271969555, 0.07709352957049576, 0.07519473974220614]}, "mutation_prompt": null}
{"id": "cb067cd2-4c5a-4975-adad-e5ff556991b8", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 100\n        self.inertia_weight = 0.5\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros_like(particles)\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([float('inf')] * self.population_size)\n        \n        # Evaluate initial population\n        for i in range(self.population_size):\n            score = func(particles[i])\n            personal_best_scores[i] = score\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            # PSO update\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coef * r1 * (personal_best_positions[i] - particles[i])\n                                 + self.social_coef * r2 * (global_best_position - particles[i]))\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n            # Differential Evolution update with crossover\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = particles[np.random.choice(idxs, 3, replace=False)]\n                mutant_vector = a + self.mutation_factor * (b - c)\n                trial_vector = np.copy(particles[i])\n                \n                crossover_mask = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover_mask] = mutant_vector[crossover_mask]\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_score = func(trial_vector)\n                eval_count += 1\n\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial_vector\n                    personal_best_scores[i] = trial_score\n\n                # Update global best\n                if trial_score < personal_best_scores[global_best_index]:\n                    global_best_position = trial_vector\n                    global_best_index = i\n\n        return global_best_position", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization with Differential Evolution for improved global search and fine-tuning capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "86b3e4f1-22cc-4fb2-97cc-bf4bb4405e19", "metadata": {"aucs": [0.4882472281863305, 0.5164996094393812, 0.49627912463063206, 0.5339702752982873, 0.5404857484433038, 0.547033222410221, 0.49399054113020424, 0.5367743327470891, 0.5119730119579462, 0.1706997127269757, 0.16635505076312052, 0.18446456584479554, 0.18604242012498118, 0.18385268429613089, 0.19889041587631473, 0.19350555897906274, 0.18935136805081465, 0.186113004482099, 0.1307654169093807, 0.0896874251953903, 0.1412118423293054, 0.12142484023944233, 0.08837419841250671, 0.10400118280198245, 0.0964554587419576, 0.11658723844656671, 0.11926491685202545, 0.08929049749518203, 0.09355381931055196, 0.09727303635479634, 0.09026961265237132, 0.09423101095621911, 0.09339318029108867, 0.08134358186533541, 0.08978638175382525, 0.0790833264319073, 0.9624677687815185, 0.9855801791358813, 0.9816224124392043, 0.9588006997707941, 0.9759509140344366, 0.9710092523361906, 0.9847789324109596, 0.9782110500998692, 0.98016966668225, 0.3034460677447628, 0.3070791946049275, 0.3162936841526668, 0.26956904150950545, 0.27971313253914787, 0.2897636724461585, 0.30055476618523735, 0.3091051582244504, 0.29971065338511116, 0.575103760195953, 0.6579369174912328, 0.5756957078252307, 0.578457448384498, 0.62268343346853, 0.5348743605197566, 0.5437377063519533, 0.5750864631031573, 0.6026443184059901, 0.19122557781747151, 0.219926728416182, 0.17708813534241585, 0.1523831002292707, 0.17127873663224114, 0.24081197620533124, 0.18821531399816682, 0.10537279412279565, 0.21402145621295277, 0.2046246795081199, 0.19412499079843515, 0.20112124180673951, 0.20074072515046604, 0.18249195134365226, 0.1905082713072752, 0.2089302453317663, 0.19436623916189255, 0.2049281654583116, 0.0068166536550172685, 0.0837911965861654, 0.050516084582435505, 0.08976494540162006, 0.024829806428101286, 0.059188024680768336, 0.07305783740295468, 0.0964648656103706, 0.05769154514049968, 0.16280677835660884, 0.13777513171727374, 0.1716677221194739, 0.16142186592296115, 0.1234805081916649, 0.1397229977283585, 0.1689893019576535, 0.19814437959424513, 0.10939187298388475, 0.03371722574371072, 0.01923355698663376, 0.005416925536914974, 0.04565091917775321, 0.05293169986076862, 0.0184420315537287, 0.04294472623437107, 0.05384869480282728, 0.06862652834993865, 0.1434727307465219, 0.13014516524304764, 0.14283094183897305, 0.15476437716028124, 0.14335469825078906, 0.15476551997128118, 0.15389314040201207, 0.14499099412110517, 0.1646586539936239, 0.42255470889347735, 0.46454075466293065, 0.44103809128390825, 0.4445627656988088, 0.47217832809756455, 0.45296131431367226, 0.44219202469859464, 0.44168740411218377, 0.44493214750241983, 0.11182782387379753, 0.11173558176568021, 0.10138240106614815, 0.12488674551975909, 0.10273332347253195, 0.0970848950327079, 0.10894600019138578, 0.1130670277428173, 0.11829577546665515, 0.14540727231836847, 0.28447483892739733, 0.26440216718424314, 0.1827169809011342, 0.1967818721167539, 0.1290231784956315, 0.22484703138983853, 0.2435070355954998, 0.14288332363901612, 0.3074153083721701, 0.3034971554251098, 0.323958818223814, 0.3218228418410899, 0.3013796916450162, 0.3152165178622156, 0.3027670634632387, 0.3207432053900766, 0.3102628188868207, 0.2426007391435272, 0.21945623775416667, 0.268208028565292, 0.24495150191609605, 0.22065384399611787, 0.2703326499446467, 0.2520514025458884, 0.2640574256321997, 0.23775578206788373, 0.22330900122434794, 0.20084061105721895, 0.20237536743761497, 0.19086571663572038, 0.20448237248981416, 0.1846514790920929, 0.18829689955191709, 0.22010501926862958, 0.20704392112805026, 0.19970469159745197, 0.18850720732108373, 0.18254084549289917, 0.25912294469449937, 0.19604031895930163, 0.17935684116599004, 0.19282140363331945, 0.19175608739215821, 0.18992982248363355, 0.5541751596749267, 0.18046459927013492, 0.7235462915111932, 0.5502756818579533, 0.19248006472901402, 0.6572431188512124, 0.49559553012688085, 0.17391510325816872, 0.6707153637156391, 0.6286220117657617, 0.16964131868621912, 0.1908374933944862, 0.587157252836209, 0.5686223380915884, 0.6500050281667298, 0.20784635578758293, 0.12598989547462092, 0.6967624706510098, 0.1691155437474563, 0.19560187661169282, 0.1967090441389101, 0.17095352215511195, 0.1891195529401717, 0.1773154045473122, 0.18015985376441856, 0.1865000452760659, 0.18157214803937605, 0.07491902707087594, 0.07967315296110045, 0.07822741346497764, 0.0905098924597636, 0.08109982530064042, 0.08927050950122395, 0.08599735345014836, 0.07840666898783799, 0.07588224010329336]}, "mutation_prompt": null}
{"id": "488008fb-a279-45e5-80f3-b3be664a644c", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 100\n        self.inertia_weight = 0.5\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros_like(particles)\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([float('inf')] * self.population_size)\n        \n        # Evaluate initial population\n        for i in range(self.population_size):\n            score = func(particles[i])\n            personal_best_scores[i] = score\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            # PSO update\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coef * r1 * (personal_best_positions[i] - particles[i])\n                                 + self.social_coef * r2 * (global_best_position - particles[i]))\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n            # Differential Evolution update with crossover\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = particles[np.random.choice(idxs, 3, replace=False)]\n                mutant_vector = a + self.mutation_factor * (b - c)\n                trial_vector = np.copy(particles[i])\n                \n                crossover_mask = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover_mask] = mutant_vector[crossover_mask]\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_score = func(trial_vector)\n                eval_count += 1\n\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial_vector\n                    personal_best_scores[i] = trial_score\n\n                # Update global best\n                if trial_score < personal_best_scores[global_best_index]:\n                    global_best_position = trial_vector\n                    global_best_index = i\n\n        return global_best_position", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization with Differential Evolution for improved global search and fine-tuning capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "86b3e4f1-22cc-4fb2-97cc-bf4bb4405e19", "metadata": {"aucs": [0.4882472281863305, 0.5164996094393812, 0.49627912463063206, 0.5339702752982873, 0.5404857484433038, 0.547033222410221, 0.49399054113020424, 0.5367743327470891, 0.5119730119579462, 0.1706997127269757, 0.16635505076312052, 0.18446456584479554, 0.18604242012498118, 0.18385268429613089, 0.19889041587631473, 0.19350555897906274, 0.18935136805081465, 0.186113004482099, 0.1307654169093807, 0.0896874251953903, 0.1412118423293054, 0.12142484023944233, 0.08837419841250671, 0.10400118280198245, 0.0964554587419576, 0.11658723844656671, 0.11926491685202545, 0.08929049749518203, 0.09355381931055196, 0.09727303635479634, 0.09026961265237132, 0.09423101095621911, 0.09339318029108867, 0.08134358186533541, 0.08978638175382525, 0.0790833264319073, 0.9624677687815185, 0.9855801791358813, 0.9816224124392043, 0.9588006997707941, 0.9759509140344366, 0.9710092523361906, 0.9847789324109596, 0.9782110500998692, 0.98016966668225, 0.3034460677447628, 0.3070791946049275, 0.3162936841526668, 0.26956904150950545, 0.27971313253914787, 0.2897636724461585, 0.30055476618523735, 0.3091051582244504, 0.29971065338511116, 0.575103760195953, 0.6579369174912328, 0.5756957078252307, 0.578457448384498, 0.62268343346853, 0.5348743605197566, 0.5437377063519533, 0.5750864631031573, 0.6026443184059901, 0.19122557781747151, 0.219926728416182, 0.17708813534241585, 0.1523831002292707, 0.17127873663224114, 0.24081197620533124, 0.18821531399816682, 0.10537279412279565, 0.21402145621295277, 0.2046246795081199, 0.19412499079843515, 0.20112124180673951, 0.20074072515046604, 0.18249195134365226, 0.1905082713072752, 0.2089302453317663, 0.19436623916189255, 0.2049281654583116, 0.0068166536550172685, 0.0837911965861654, 0.050516084582435505, 0.08976494540162006, 0.024829806428101286, 0.059188024680768336, 0.07305783740295468, 0.0964648656103706, 0.05769154514049968, 0.16280677835660884, 0.13777513171727374, 0.1716677221194739, 0.16142186592296115, 0.1234805081916649, 0.1397229977283585, 0.1689893019576535, 0.19814437959424513, 0.10939187298388475, 0.03371722574371072, 0.01923355698663376, 0.005416925536914974, 0.04565091917775321, 0.05293169986076862, 0.0184420315537287, 0.04294472623437107, 0.05384869480282728, 0.06862652834993865, 0.1434727307465219, 0.13014516524304764, 0.14283094183897305, 0.15476437716028124, 0.14335469825078906, 0.15476551997128118, 0.15389314040201207, 0.14499099412110517, 0.1646586539936239, 0.42255470889347735, 0.46454075466293065, 0.44103809128390825, 0.4445627656988088, 0.47217832809756455, 0.45296131431367226, 0.44219202469859464, 0.44168740411218377, 0.44493214750241983, 0.11182782387379753, 0.11173558176568021, 0.10138240106614815, 0.12488674551975909, 0.10273332347253195, 0.0970848950327079, 0.10894600019138578, 0.1130670277428173, 0.11829577546665515, 0.14540727231836847, 0.28447483892739733, 0.26440216718424314, 0.1827169809011342, 0.1967818721167539, 0.1290231784956315, 0.22484703138983853, 0.2435070355954998, 0.14288332363901612, 0.3074153083721701, 0.3034971554251098, 0.323958818223814, 0.3218228418410899, 0.3013796916450162, 0.3152165178622156, 0.3027670634632387, 0.3207432053900766, 0.3102628188868207, 0.2426007391435272, 0.21945623775416667, 0.268208028565292, 0.24495150191609605, 0.22065384399611787, 0.2703326499446467, 0.2520514025458884, 0.2640574256321997, 0.23775578206788373, 0.22330900122434794, 0.20084061105721895, 0.20237536743761497, 0.19086571663572038, 0.20448237248981416, 0.1846514790920929, 0.18829689955191709, 0.22010501926862958, 0.20704392112805026, 0.19970469159745197, 0.18850720732108373, 0.18254084549289917, 0.25912294469449937, 0.19604031895930163, 0.17935684116599004, 0.19282140363331945, 0.19175608739215821, 0.18992982248363355, 0.5541751596749267, 0.18046459927013492, 0.7235462915111932, 0.5502756818579533, 0.19248006472901402, 0.6572431188512124, 0.49559553012688085, 0.17391510325816872, 0.6707153637156391, 0.6286220117657617, 0.16964131868621912, 0.1908374933944862, 0.587157252836209, 0.5686223380915884, 0.6500050281667298, 0.20784635578758293, 0.12598989547462092, 0.6967624706510098, 0.1691155437474563, 0.19560187661169282, 0.1967090441389101, 0.17095352215511195, 0.1891195529401717, 0.1773154045473122, 0.18015985376441856, 0.1865000452760659, 0.18157214803937605, 0.07491902707087594, 0.07967315296110045, 0.07822741346497764, 0.0905098924597636, 0.08109982530064042, 0.08927050950122395, 0.08599735345014836, 0.07840666898783799, 0.07588224010329336]}, "mutation_prompt": null}
{"id": "ff71a01d-b3ac-4310-90ee-6f86922f17c7", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 100\n        self.inertia_weight = 0.5\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros_like(particles)\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([float('inf')] * self.population_size)\n        \n        # Evaluate initial population\n        for i in range(self.population_size):\n            score = func(particles[i])\n            personal_best_scores[i] = score\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            # PSO update\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coef * r1 * (personal_best_positions[i] - particles[i])\n                                 + self.social_coef * r2 * (global_best_position - particles[i]))\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n            # Differential Evolution update with crossover\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = particles[np.random.choice(idxs, 3, replace=False)]\n                mutant_vector = a + self.mutation_factor * (b - c)\n                trial_vector = np.copy(particles[i])\n                \n                crossover_mask = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover_mask] = mutant_vector[crossover_mask]\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_score = func(trial_vector)\n                eval_count += 1\n\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial_vector\n                    personal_best_scores[i] = trial_score\n\n                # Update global best\n                if trial_score < personal_best_scores[global_best_index]:\n                    global_best_position = trial_vector\n                    global_best_index = i\n\n        return global_best_position", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization with Differential Evolution for improved global search and fine-tuning capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "86b3e4f1-22cc-4fb2-97cc-bf4bb4405e19", "metadata": {"aucs": [0.4882472281863305, 0.5164996094393812, 0.49627912463063206, 0.5339702752982873, 0.5404857484433038, 0.547033222410221, 0.49399054113020424, 0.5367743327470891, 0.5119730119579462, 0.1706997127269757, 0.16635505076312052, 0.18446456584479554, 0.18604242012498118, 0.18385268429613089, 0.19889041587631473, 0.19350555897906274, 0.18935136805081465, 0.186113004482099, 0.1307654169093807, 0.0896874251953903, 0.1412118423293054, 0.12142484023944233, 0.08837419841250671, 0.10400118280198245, 0.0964554587419576, 0.11658723844656671, 0.11926491685202545, 0.08929049749518203, 0.09355381931055196, 0.09727303635479634, 0.09026961265237132, 0.09423101095621911, 0.09339318029108867, 0.08134358186533541, 0.08978638175382525, 0.0790833264319073, 0.9624677687815185, 0.9855801791358813, 0.9816224124392043, 0.9588006997707941, 0.9759509140344366, 0.9710092523361906, 0.9847789324109596, 0.9782110500998692, 0.98016966668225, 0.3034460677447628, 0.3070791946049275, 0.3162936841526668, 0.26956904150950545, 0.27971313253914787, 0.2897636724461585, 0.30055476618523735, 0.3091051582244504, 0.29971065338511116, 0.575103760195953, 0.6579369174912328, 0.5756957078252307, 0.578457448384498, 0.62268343346853, 0.5348743605197566, 0.5437377063519533, 0.5750864631031573, 0.6026443184059901, 0.19122557781747151, 0.219926728416182, 0.17708813534241585, 0.1523831002292707, 0.17127873663224114, 0.24081197620533124, 0.18821531399816682, 0.10537279412279565, 0.21402145621295277, 0.2046246795081199, 0.19412499079843515, 0.20112124180673951, 0.20074072515046604, 0.18249195134365226, 0.1905082713072752, 0.2089302453317663, 0.19436623916189255, 0.2049281654583116, 0.0068166536550172685, 0.0837911965861654, 0.050516084582435505, 0.08976494540162006, 0.024829806428101286, 0.059188024680768336, 0.07305783740295468, 0.0964648656103706, 0.05769154514049968, 0.16280677835660884, 0.13777513171727374, 0.1716677221194739, 0.16142186592296115, 0.1234805081916649, 0.1397229977283585, 0.1689893019576535, 0.19814437959424513, 0.10939187298388475, 0.03371722574371072, 0.01923355698663376, 0.005416925536914974, 0.04565091917775321, 0.05293169986076862, 0.0184420315537287, 0.04294472623437107, 0.05384869480282728, 0.06862652834993865, 0.1434727307465219, 0.13014516524304764, 0.14283094183897305, 0.15476437716028124, 0.14335469825078906, 0.15476551997128118, 0.15389314040201207, 0.14499099412110517, 0.1646586539936239, 0.42255470889347735, 0.46454075466293065, 0.44103809128390825, 0.4445627656988088, 0.47217832809756455, 0.45296131431367226, 0.44219202469859464, 0.44168740411218377, 0.44493214750241983, 0.11182782387379753, 0.11173558176568021, 0.10138240106614815, 0.12488674551975909, 0.10273332347253195, 0.0970848950327079, 0.10894600019138578, 0.1130670277428173, 0.11829577546665515, 0.14540727231836847, 0.28447483892739733, 0.26440216718424314, 0.1827169809011342, 0.1967818721167539, 0.1290231784956315, 0.22484703138983853, 0.2435070355954998, 0.14288332363901612, 0.3074153083721701, 0.3034971554251098, 0.323958818223814, 0.3218228418410899, 0.3013796916450162, 0.3152165178622156, 0.3027670634632387, 0.3207432053900766, 0.3102628188868207, 0.2426007391435272, 0.21945623775416667, 0.268208028565292, 0.24495150191609605, 0.22065384399611787, 0.2703326499446467, 0.2520514025458884, 0.2640574256321997, 0.23775578206788373, 0.22330900122434794, 0.20084061105721895, 0.20237536743761497, 0.19086571663572038, 0.20448237248981416, 0.1846514790920929, 0.18829689955191709, 0.22010501926862958, 0.20704392112805026, 0.19970469159745197, 0.18850720732108373, 0.18254084549289917, 0.25912294469449937, 0.19604031895930163, 0.17935684116599004, 0.19282140363331945, 0.19175608739215821, 0.18992982248363355, 0.5541751596749267, 0.18046459927013492, 0.7235462915111932, 0.5502756818579533, 0.19248006472901402, 0.6572431188512124, 0.49559553012688085, 0.17391510325816872, 0.6707153637156391, 0.6286220117657617, 0.16964131868621912, 0.1908374933944862, 0.587157252836209, 0.5686223380915884, 0.6500050281667298, 0.20784635578758293, 0.12598989547462092, 0.6967624706510098, 0.1691155437474563, 0.19560187661169282, 0.1967090441389101, 0.17095352215511195, 0.1891195529401717, 0.1773154045473122, 0.18015985376441856, 0.1865000452760659, 0.18157214803937605, 0.07491902707087594, 0.07967315296110045, 0.07822741346497764, 0.0905098924597636, 0.08109982530064042, 0.08927050950122395, 0.08599735345014836, 0.07840666898783799, 0.07588224010329336]}, "mutation_prompt": null}
{"id": "3680660e-8dff-42a2-ac0f-0d9fff3c387b", "solution": "import numpy as np\n\nclass HybridPSODERefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 80  # Reduced population size\n        self.inertia_weight = 0.7\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.9  # Increased mutation factor\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros_like(particles)\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([float('inf')] * self.population_size)\n        \n        for i in range(self.population_size):\n            score = func(particles[i])\n            personal_best_scores[i] = score\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            inertia_weight = 0.4 + 0.3 * (1 - eval_count / self.budget)  # Adaptive inertia\n\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (inertia_weight * velocities[i]\n                                 + self.cognitive_coef * r1 * (personal_best_positions[i] - particles[i])\n                                 + self.social_coef * r2 * (global_best_position - particles[i]))\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = particles[np.random.choice(idxs, 3, replace=False)]\n                mutant_vector = a + self.mutation_factor * (b - c)\n                trial_vector = np.copy(particles[i])\n                \n                crossover_mask = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover_mask] = mutant_vector[crossover_mask]\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_score = func(trial_vector)\n                eval_count += 1\n\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial_vector\n                    personal_best_scores[i] = trial_score\n\n                    if trial_score < personal_best_scores[global_best_index]:  # Greedy selection\n                        global_best_position = trial_vector\n                        global_best_index = i\n\n        return global_best_position", "name": "HybridPSODERefined", "description": "A refined version of HybridPSODE where velocities are updated using adaptive inertia and DE is enhanced with a greedy selection.", "configspace": "", "generation": 40, "fitness": 0.23584218498244333, "feedback": "The algorithm HybridPSODERefined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.21.", "error": "", "parent_id": "86b3e4f1-22cc-4fb2-97cc-bf4bb4405e19", "metadata": {"aucs": [0.45865251945887886, 0.4440618923293571, 0.4594889228803719, 0.5360555172543758, 0.4822015527684589, 0.4711029999333559, 0.47601226780214745, 0.4927365248322806, 0.46230992455246867, 0.17169777918404272, 0.1623644436677396, 0.1725984754635076, 0.15879457216640436, 0.17475597641347718, 0.16062601459857928, 0.1661731996084267, 0.1473329720529808, 0.1520220560169233, 0.10017315745838185, 0.09733673777621277, 0.08959478400781751, 0.08319510953591525, 0.0973913966905795, 0.08195279406084932, 0.10608022832150965, 0.08957540414768739, 0.0946682313144247, 0.08490745252879228, 0.07090410821493964, 0.08109204318906815, 0.08454891864035341, 0.0839676351020533, 0.09306972703590177, 0.08185421338386734, 0.08582246294581641, 0.07455847693005813, 0.9828576364038836, 0.989199319260609, 0.9833613813312847, 0.9732926936792892, 0.9786180662463542, 0.9712067792725884, 0.9822916847542997, 0.9851293792661927, 0.9874383268882965, 0.2754121137153154, 0.27982098565670666, 0.23819011853093097, 0.2656359256876756, 0.2850189449285807, 0.23851115389062139, 0.25657297575712457, 0.25695459924965935, 0.24559873392769627, 0.4638458015691542, 0.47768466636723106, 0.44969059080685014, 0.521028938882041, 0.4932491275650973, 0.5169794456337655, 0.4826024703308802, 0.47407418729270834, 0.4478806156331606, 0.15593957690079718, 0.17142528678849156, 0.12342622780772838, 0.10392593876475453, 0.158558393852969, 0.1574471396159275, 0.18723549590087618, 0.15681478244014124, 0.15387720776242908, 0.17201097634898088, 0.1054503061697567, 0.10156710780634925, 0.14293975055544883, 0.17260963683445985, 0.16804871910615216, 0.15799464373339944, 0.1263011991741021, 0.11753676839528471, 0.055298300240240184, 0.06769390753015525, 0.05538664384923975, 0.022619377741959212, 0.02513494584099485, 0.01672493941071118, 0.04069767587494422, 0.07564479863011098, 0.017863586429085476, 0.15834486284674354, 0.1286229129675709, 0.12011904242453642, 0.126439403568825, 0.12227133161608095, 0.08334176784845837, 0.156335139890298, 0.09433134178000258, 0.14591471840587222, 0.007049256839883111, 0.01377818049369739, 0.03250975154093072, 0.034614921401249776, 0.038133265851646336, 0.01134284988376899, 0.040786125347207935, 0.023112552559815258, 0.044996079223340035, 0.12247174421536167, 0.1083947844189832, 0.12368110821720935, 0.1387490121557554, 0.12313058182040437, 0.11352333786074031, 0.11701674409624319, 0.10630153133031839, 0.14273947960113254, 0.4075845075712776, 0.4071875716959876, 0.40189017876988553, 0.4268957092687986, 0.41970412017674874, 0.42029605667800407, 0.41550655911439816, 0.44419521019769903, 0.4217536692821393, 0.09065990680489944, 0.09154789287412513, 0.09188903767219814, 0.11041279182708208, 0.10057212447644759, 0.11154108206302804, 0.09560239562172734, 0.10920875840016508, 0.08883513755057304, 0.1576186699813985, 0.15205700604774375, 0.13502122512558712, 0.1466153214589484, 0.11580242579044753, 0.14667357969693817, 0.2130633915235709, 0.14860682812435988, 0.13293712048290618, 0.28183050656565745, 0.2701594479071733, 0.2954508793837479, 0.27486621457061333, 0.27250998935246085, 0.2747634797910259, 0.29478230804610117, 0.30072399776947323, 0.29369687374216014, 0.18634134320090434, 0.19906344213077887, 0.2144585718197799, 0.2302913137475091, 0.20172123088432647, 0.1933818374612909, 0.23858528952976576, 0.23780700114616682, 0.2068129400914719, 0.2055320296613684, 0.19859075941798676, 0.2159486437746473, 0.2100920716958894, 0.18290968620642278, 0.1964260655563279, 0.18847125541126597, 0.20252501163419345, 0.1806332909525652, 0.2025413214150823, 0.17083590303486307, 0.17566222867419767, 0.18970739462110653, 0.2050461103963268, 0.18266198402042966, 0.17377134015132156, 0.21454481614242682, 0.18405381380354646, 0.13949991710299325, 0.6230324897168371, 0.6609603216176374, 0.15302996851866013, 0.509067173404894, 0.16224516547454204, 0.46907088803334807, 0.18103144112866687, 0.49673045094984347, 0.5757190680681463, 0.19653921109024175, 0.445441453617218, 0.1947778830823551, 0.46075080825584025, 0.14967986433338787, 0.20095058840330327, 0.20685961645750917, 0.457666173870912, 0.17822442016188722, 0.18862344290326094, 0.2001912287695804, 0.19845908344315843, 0.17854747484424882, 0.21812225456563117, 0.18625274245772705, 0.1818656202585227, 0.17806215200271525, 0.07458897935300068, 0.07457451654354641, 0.07820618273150026, 0.07692207189317812, 0.07380229802946103, 0.07840829427076657, 0.06842219922321147, 0.07548175188755357, 0.07917377124745184]}, "mutation_prompt": null}
{"id": "627793a5-d17b-4db1-96f3-38515e2cc092", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 100\n        self.inertia_weight = 0.5\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros_like(particles)\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([float('inf')] * self.population_size)\n        \n        # Evaluate initial population\n        for i in range(self.population_size):\n            score = func(particles[i])\n            personal_best_scores[i] = score\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            # PSO update\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coef * r1 * (personal_best_positions[i] - particles[i])\n                                 + self.social_coef * r2 * (global_best_position - particles[i]))\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n            # Differential Evolution update with crossover\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = particles[np.random.choice(idxs, 3, replace=False)]\n                mutant_vector = a + self.mutation_factor * (b - c)\n                trial_vector = np.copy(particles[i])\n                \n                crossover_mask = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover_mask] = mutant_vector[crossover_mask]\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_score = func(trial_vector)\n                eval_count += 1\n\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial_vector\n                    personal_best_scores[i] = trial_score\n\n                # Update global best\n                if trial_score < personal_best_scores[global_best_index]:\n                    global_best_position = trial_vector\n                    global_best_index = i\n\n        return global_best_position", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization with Differential Evolution for improved global search and fine-tuning capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "86b3e4f1-22cc-4fb2-97cc-bf4bb4405e19", "metadata": {"aucs": [0.4882472281863305, 0.5164996094393812, 0.49627912463063206, 0.5339702752982873, 0.5404857484433038, 0.547033222410221, 0.49399054113020424, 0.5367743327470891, 0.5119730119579462, 0.1706997127269757, 0.16635505076312052, 0.18446456584479554, 0.18604242012498118, 0.18385268429613089, 0.19889041587631473, 0.19350555897906274, 0.18935136805081465, 0.186113004482099, 0.1307654169093807, 0.0896874251953903, 0.1412118423293054, 0.12142484023944233, 0.08837419841250671, 0.10400118280198245, 0.0964554587419576, 0.11658723844656671, 0.11926491685202545, 0.08929049749518203, 0.09355381931055196, 0.09727303635479634, 0.09026961265237132, 0.09423101095621911, 0.09339318029108867, 0.08134358186533541, 0.08978638175382525, 0.0790833264319073, 0.9624677687815185, 0.9855801791358813, 0.9816224124392043, 0.9588006997707941, 0.9759509140344366, 0.9710092523361906, 0.9847789324109596, 0.9782110500998692, 0.98016966668225, 0.3034460677447628, 0.3070791946049275, 0.3162936841526668, 0.26956904150950545, 0.27971313253914787, 0.2897636724461585, 0.30055476618523735, 0.3091051582244504, 0.29971065338511116, 0.575103760195953, 0.6579369174912328, 0.5756957078252307, 0.578457448384498, 0.62268343346853, 0.5348743605197566, 0.5437377063519533, 0.5750864631031573, 0.6026443184059901, 0.19122557781747151, 0.219926728416182, 0.17708813534241585, 0.1523831002292707, 0.17127873663224114, 0.24081197620533124, 0.18821531399816682, 0.10537279412279565, 0.21402145621295277, 0.2046246795081199, 0.19412499079843515, 0.20112124180673951, 0.20074072515046604, 0.18249195134365226, 0.1905082713072752, 0.2089302453317663, 0.19436623916189255, 0.2049281654583116, 0.0068166536550172685, 0.0837911965861654, 0.050516084582435505, 0.08976494540162006, 0.024829806428101286, 0.059188024680768336, 0.07305783740295468, 0.0964648656103706, 0.05769154514049968, 0.16280677835660884, 0.13777513171727374, 0.1716677221194739, 0.16142186592296115, 0.1234805081916649, 0.1397229977283585, 0.1689893019576535, 0.19814437959424513, 0.10939187298388475, 0.03371722574371072, 0.01923355698663376, 0.005416925536914974, 0.04565091917775321, 0.05293169986076862, 0.0184420315537287, 0.04294472623437107, 0.05384869480282728, 0.06862652834993865, 0.1434727307465219, 0.13014516524304764, 0.14283094183897305, 0.15476437716028124, 0.14335469825078906, 0.15476551997128118, 0.15389314040201207, 0.14499099412110517, 0.1646586539936239, 0.42255470889347735, 0.46454075466293065, 0.44103809128390825, 0.4445627656988088, 0.47217832809756455, 0.45296131431367226, 0.44219202469859464, 0.44168740411218377, 0.44493214750241983, 0.11182782387379753, 0.11173558176568021, 0.10138240106614815, 0.12488674551975909, 0.10273332347253195, 0.0970848950327079, 0.10894600019138578, 0.1130670277428173, 0.11829577546665515, 0.14540727231836847, 0.28447483892739733, 0.26440216718424314, 0.1827169809011342, 0.1967818721167539, 0.1290231784956315, 0.22484703138983853, 0.2435070355954998, 0.14288332363901612, 0.3074153083721701, 0.3034971554251098, 0.323958818223814, 0.3218228418410899, 0.3013796916450162, 0.3152165178622156, 0.3027670634632387, 0.3207432053900766, 0.3102628188868207, 0.2426007391435272, 0.21945623775416667, 0.268208028565292, 0.24495150191609605, 0.22065384399611787, 0.2703326499446467, 0.2520514025458884, 0.2640574256321997, 0.23775578206788373, 0.22330900122434794, 0.20084061105721895, 0.20237536743761497, 0.19086571663572038, 0.20448237248981416, 0.1846514790920929, 0.18829689955191709, 0.22010501926862958, 0.20704392112805026, 0.19970469159745197, 0.18850720732108373, 0.18254084549289917, 0.25912294469449937, 0.19604031895930163, 0.17935684116599004, 0.19282140363331945, 0.19175608739215821, 0.18992982248363355, 0.5541751596749267, 0.18046459927013492, 0.7235462915111932, 0.5502756818579533, 0.19248006472901402, 0.6572431188512124, 0.49559553012688085, 0.17391510325816872, 0.6707153637156391, 0.6286220117657617, 0.16964131868621912, 0.1908374933944862, 0.587157252836209, 0.5686223380915884, 0.6500050281667298, 0.20784635578758293, 0.12598989547462092, 0.6967624706510098, 0.1691155437474563, 0.19560187661169282, 0.1967090441389101, 0.17095352215511195, 0.1891195529401717, 0.1773154045473122, 0.18015985376441856, 0.1865000452760659, 0.18157214803937605, 0.07491902707087594, 0.07967315296110045, 0.07822741346497764, 0.0905098924597636, 0.08109982530064042, 0.08927050950122395, 0.08599735345014836, 0.07840666898783799, 0.07588224010329336]}, "mutation_prompt": null}
{"id": "852f3e04-02e9-4d67-8858-463cb8f24d58", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 100\n        self.inertia_weight = 0.5\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros_like(particles)\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([float('inf')] * self.population_size)\n        \n        # Evaluate initial population\n        for i in range(self.population_size):\n            score = func(particles[i])\n            personal_best_scores[i] = score\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            # PSO update\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coef * r1 * (personal_best_positions[i] - particles[i])\n                                 + self.social_coef * r2 * (global_best_position - particles[i]))\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n            # Differential Evolution update with crossover\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = particles[np.random.choice(idxs, 3, replace=False)]\n                mutant_vector = a + self.mutation_factor * (b - c)\n                trial_vector = np.copy(particles[i])\n                \n                crossover_mask = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover_mask] = mutant_vector[crossover_mask]\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_score = func(trial_vector)\n                eval_count += 1\n\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial_vector\n                    personal_best_scores[i] = trial_score\n\n                # Update global best\n                if trial_score < personal_best_scores[global_best_index]:\n                    global_best_position = trial_vector\n                    global_best_index = i\n\n        return global_best_position", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization with Differential Evolution for improved global search and fine-tuning capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "86b3e4f1-22cc-4fb2-97cc-bf4bb4405e19", "metadata": {"aucs": [0.4882472281863305, 0.5164996094393812, 0.49627912463063206, 0.5339702752982873, 0.5404857484433038, 0.547033222410221, 0.49399054113020424, 0.5367743327470891, 0.5119730119579462, 0.1706997127269757, 0.16635505076312052, 0.18446456584479554, 0.18604242012498118, 0.18385268429613089, 0.19889041587631473, 0.19350555897906274, 0.18935136805081465, 0.186113004482099, 0.1307654169093807, 0.0896874251953903, 0.1412118423293054, 0.12142484023944233, 0.08837419841250671, 0.10400118280198245, 0.0964554587419576, 0.11658723844656671, 0.11926491685202545, 0.08929049749518203, 0.09355381931055196, 0.09727303635479634, 0.09026961265237132, 0.09423101095621911, 0.09339318029108867, 0.08134358186533541, 0.08978638175382525, 0.0790833264319073, 0.9624677687815185, 0.9855801791358813, 0.9816224124392043, 0.9588006997707941, 0.9759509140344366, 0.9710092523361906, 0.9847789324109596, 0.9782110500998692, 0.98016966668225, 0.3034460677447628, 0.3070791946049275, 0.3162936841526668, 0.26956904150950545, 0.27971313253914787, 0.2897636724461585, 0.30055476618523735, 0.3091051582244504, 0.29971065338511116, 0.575103760195953, 0.6579369174912328, 0.5756957078252307, 0.578457448384498, 0.62268343346853, 0.5348743605197566, 0.5437377063519533, 0.5750864631031573, 0.6026443184059901, 0.19122557781747151, 0.219926728416182, 0.17708813534241585, 0.1523831002292707, 0.17127873663224114, 0.24081197620533124, 0.18821531399816682, 0.10537279412279565, 0.21402145621295277, 0.2046246795081199, 0.19412499079843515, 0.20112124180673951, 0.20074072515046604, 0.18249195134365226, 0.1905082713072752, 0.2089302453317663, 0.19436623916189255, 0.2049281654583116, 0.0068166536550172685, 0.0837911965861654, 0.050516084582435505, 0.08976494540162006, 0.024829806428101286, 0.059188024680768336, 0.07305783740295468, 0.0964648656103706, 0.05769154514049968, 0.16280677835660884, 0.13777513171727374, 0.1716677221194739, 0.16142186592296115, 0.1234805081916649, 0.1397229977283585, 0.1689893019576535, 0.19814437959424513, 0.10939187298388475, 0.03371722574371072, 0.01923355698663376, 0.005416925536914974, 0.04565091917775321, 0.05293169986076862, 0.0184420315537287, 0.04294472623437107, 0.05384869480282728, 0.06862652834993865, 0.1434727307465219, 0.13014516524304764, 0.14283094183897305, 0.15476437716028124, 0.14335469825078906, 0.15476551997128118, 0.15389314040201207, 0.14499099412110517, 0.1646586539936239, 0.42255470889347735, 0.46454075466293065, 0.44103809128390825, 0.4445627656988088, 0.47217832809756455, 0.45296131431367226, 0.44219202469859464, 0.44168740411218377, 0.44493214750241983, 0.11182782387379753, 0.11173558176568021, 0.10138240106614815, 0.12488674551975909, 0.10273332347253195, 0.0970848950327079, 0.10894600019138578, 0.1130670277428173, 0.11829577546665515, 0.14540727231836847, 0.28447483892739733, 0.26440216718424314, 0.1827169809011342, 0.1967818721167539, 0.1290231784956315, 0.22484703138983853, 0.2435070355954998, 0.14288332363901612, 0.3074153083721701, 0.3034971554251098, 0.323958818223814, 0.3218228418410899, 0.3013796916450162, 0.3152165178622156, 0.3027670634632387, 0.3207432053900766, 0.3102628188868207, 0.2426007391435272, 0.21945623775416667, 0.268208028565292, 0.24495150191609605, 0.22065384399611787, 0.2703326499446467, 0.2520514025458884, 0.2640574256321997, 0.23775578206788373, 0.22330900122434794, 0.20084061105721895, 0.20237536743761497, 0.19086571663572038, 0.20448237248981416, 0.1846514790920929, 0.18829689955191709, 0.22010501926862958, 0.20704392112805026, 0.19970469159745197, 0.18850720732108373, 0.18254084549289917, 0.25912294469449937, 0.19604031895930163, 0.17935684116599004, 0.19282140363331945, 0.19175608739215821, 0.18992982248363355, 0.5541751596749267, 0.18046459927013492, 0.7235462915111932, 0.5502756818579533, 0.19248006472901402, 0.6572431188512124, 0.49559553012688085, 0.17391510325816872, 0.6707153637156391, 0.6286220117657617, 0.16964131868621912, 0.1908374933944862, 0.587157252836209, 0.5686223380915884, 0.6500050281667298, 0.20784635578758293, 0.12598989547462092, 0.6967624706510098, 0.1691155437474563, 0.19560187661169282, 0.1967090441389101, 0.17095352215511195, 0.1891195529401717, 0.1773154045473122, 0.18015985376441856, 0.1865000452760659, 0.18157214803937605, 0.07491902707087594, 0.07967315296110045, 0.07822741346497764, 0.0905098924597636, 0.08109982530064042, 0.08927050950122395, 0.08599735345014836, 0.07840666898783799, 0.07588224010329336]}, "mutation_prompt": null}
{"id": "5d557eb4-44a3-4abe-bf54-3ae2b8dbd8c8", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 100\n        self.inertia_weight = 0.5\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros_like(particles)\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([float('inf')] * self.population_size)\n        \n        # Evaluate initial population\n        for i in range(self.population_size):\n            score = func(particles[i])\n            personal_best_scores[i] = score\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            # PSO update\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coef * r1 * (personal_best_positions[i] - particles[i])\n                                 + self.social_coef * r2 * (global_best_position - particles[i]))\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n            # Differential Evolution update with crossover\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = particles[np.random.choice(idxs, 3, replace=False)]\n                mutant_vector = a + self.mutation_factor * (b - c)\n                trial_vector = np.copy(particles[i])\n                \n                crossover_mask = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover_mask] = mutant_vector[crossover_mask]\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_score = func(trial_vector)\n                eval_count += 1\n\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial_vector\n                    personal_best_scores[i] = trial_score\n\n                # Update global best\n                if trial_score < personal_best_scores[global_best_index]:\n                    global_best_position = trial_vector\n                    global_best_index = i\n\n        return global_best_position", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization with Differential Evolution for improved global search and fine-tuning capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "86b3e4f1-22cc-4fb2-97cc-bf4bb4405e19", "metadata": {"aucs": [0.4882472281863305, 0.5164996094393812, 0.49627912463063206, 0.5339702752982873, 0.5404857484433038, 0.547033222410221, 0.49399054113020424, 0.5367743327470891, 0.5119730119579462, 0.1706997127269757, 0.16635505076312052, 0.18446456584479554, 0.18604242012498118, 0.18385268429613089, 0.19889041587631473, 0.19350555897906274, 0.18935136805081465, 0.186113004482099, 0.1307654169093807, 0.0896874251953903, 0.1412118423293054, 0.12142484023944233, 0.08837419841250671, 0.10400118280198245, 0.0964554587419576, 0.11658723844656671, 0.11926491685202545, 0.08929049749518203, 0.09355381931055196, 0.09727303635479634, 0.09026961265237132, 0.09423101095621911, 0.09339318029108867, 0.08134358186533541, 0.08978638175382525, 0.0790833264319073, 0.9624677687815185, 0.9855801791358813, 0.9816224124392043, 0.9588006997707941, 0.9759509140344366, 0.9710092523361906, 0.9847789324109596, 0.9782110500998692, 0.98016966668225, 0.3034460677447628, 0.3070791946049275, 0.3162936841526668, 0.26956904150950545, 0.27971313253914787, 0.2897636724461585, 0.30055476618523735, 0.3091051582244504, 0.29971065338511116, 0.575103760195953, 0.6579369174912328, 0.5756957078252307, 0.578457448384498, 0.62268343346853, 0.5348743605197566, 0.5437377063519533, 0.5750864631031573, 0.6026443184059901, 0.19122557781747151, 0.219926728416182, 0.17708813534241585, 0.1523831002292707, 0.17127873663224114, 0.24081197620533124, 0.18821531399816682, 0.10537279412279565, 0.21402145621295277, 0.2046246795081199, 0.19412499079843515, 0.20112124180673951, 0.20074072515046604, 0.18249195134365226, 0.1905082713072752, 0.2089302453317663, 0.19436623916189255, 0.2049281654583116, 0.0068166536550172685, 0.0837911965861654, 0.050516084582435505, 0.08976494540162006, 0.024829806428101286, 0.059188024680768336, 0.07305783740295468, 0.0964648656103706, 0.05769154514049968, 0.16280677835660884, 0.13777513171727374, 0.1716677221194739, 0.16142186592296115, 0.1234805081916649, 0.1397229977283585, 0.1689893019576535, 0.19814437959424513, 0.10939187298388475, 0.03371722574371072, 0.01923355698663376, 0.005416925536914974, 0.04565091917775321, 0.05293169986076862, 0.0184420315537287, 0.04294472623437107, 0.05384869480282728, 0.06862652834993865, 0.1434727307465219, 0.13014516524304764, 0.14283094183897305, 0.15476437716028124, 0.14335469825078906, 0.15476551997128118, 0.15389314040201207, 0.14499099412110517, 0.1646586539936239, 0.42255470889347735, 0.46454075466293065, 0.44103809128390825, 0.4445627656988088, 0.47217832809756455, 0.45296131431367226, 0.44219202469859464, 0.44168740411218377, 0.44493214750241983, 0.11182782387379753, 0.11173558176568021, 0.10138240106614815, 0.12488674551975909, 0.10273332347253195, 0.0970848950327079, 0.10894600019138578, 0.1130670277428173, 0.11829577546665515, 0.14540727231836847, 0.28447483892739733, 0.26440216718424314, 0.1827169809011342, 0.1967818721167539, 0.1290231784956315, 0.22484703138983853, 0.2435070355954998, 0.14288332363901612, 0.3074153083721701, 0.3034971554251098, 0.323958818223814, 0.3218228418410899, 0.3013796916450162, 0.3152165178622156, 0.3027670634632387, 0.3207432053900766, 0.3102628188868207, 0.2426007391435272, 0.21945623775416667, 0.268208028565292, 0.24495150191609605, 0.22065384399611787, 0.2703326499446467, 0.2520514025458884, 0.2640574256321997, 0.23775578206788373, 0.22330900122434794, 0.20084061105721895, 0.20237536743761497, 0.19086571663572038, 0.20448237248981416, 0.1846514790920929, 0.18829689955191709, 0.22010501926862958, 0.20704392112805026, 0.19970469159745197, 0.18850720732108373, 0.18254084549289917, 0.25912294469449937, 0.19604031895930163, 0.17935684116599004, 0.19282140363331945, 0.19175608739215821, 0.18992982248363355, 0.5541751596749267, 0.18046459927013492, 0.7235462915111932, 0.5502756818579533, 0.19248006472901402, 0.6572431188512124, 0.49559553012688085, 0.17391510325816872, 0.6707153637156391, 0.6286220117657617, 0.16964131868621912, 0.1908374933944862, 0.587157252836209, 0.5686223380915884, 0.6500050281667298, 0.20784635578758293, 0.12598989547462092, 0.6967624706510098, 0.1691155437474563, 0.19560187661169282, 0.1967090441389101, 0.17095352215511195, 0.1891195529401717, 0.1773154045473122, 0.18015985376441856, 0.1865000452760659, 0.18157214803937605, 0.07491902707087594, 0.07967315296110045, 0.07822741346497764, 0.0905098924597636, 0.08109982530064042, 0.08927050950122395, 0.08599735345014836, 0.07840666898783799, 0.07588224010329336]}, "mutation_prompt": null}
{"id": "2a0f8821-f5bb-46bd-b02f-83b768633688", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 100\n        self.inertia_weight = 0.5\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros_like(particles)\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([float('inf')] * self.population_size)\n        \n        # Evaluate initial population\n        for i in range(self.population_size):\n            score = func(particles[i])\n            personal_best_scores[i] = score\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            # PSO update\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coef * r1 * (personal_best_positions[i] - particles[i])\n                                 + self.social_coef * r2 * (global_best_position - particles[i]))\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n            # Differential Evolution update with crossover\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = particles[np.random.choice(idxs, 3, replace=False)]\n                mutant_vector = a + self.mutation_factor * (b - c)\n                trial_vector = np.copy(particles[i])\n                \n                crossover_mask = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover_mask] = mutant_vector[crossover_mask]\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_score = func(trial_vector)\n                eval_count += 1\n\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial_vector\n                    personal_best_scores[i] = trial_score\n\n                # Update global best\n                if trial_score < personal_best_scores[global_best_index]:\n                    global_best_position = trial_vector\n                    global_best_index = i\n\n        return global_best_position", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization with Differential Evolution for improved global search and fine-tuning capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "86b3e4f1-22cc-4fb2-97cc-bf4bb4405e19", "metadata": {"aucs": [0.4882472281863305, 0.5164996094393812, 0.49627912463063206, 0.5339702752982873, 0.5404857484433038, 0.547033222410221, 0.49399054113020424, 0.5367743327470891, 0.5119730119579462, 0.1706997127269757, 0.16635505076312052, 0.18446456584479554, 0.18604242012498118, 0.18385268429613089, 0.19889041587631473, 0.19350555897906274, 0.18935136805081465, 0.186113004482099, 0.1307654169093807, 0.0896874251953903, 0.1412118423293054, 0.12142484023944233, 0.08837419841250671, 0.10400118280198245, 0.0964554587419576, 0.11658723844656671, 0.11926491685202545, 0.08929049749518203, 0.09355381931055196, 0.09727303635479634, 0.09026961265237132, 0.09423101095621911, 0.09339318029108867, 0.08134358186533541, 0.08978638175382525, 0.0790833264319073, 0.9624677687815185, 0.9855801791358813, 0.9816224124392043, 0.9588006997707941, 0.9759509140344366, 0.9710092523361906, 0.9847789324109596, 0.9782110500998692, 0.98016966668225, 0.3034460677447628, 0.3070791946049275, 0.3162936841526668, 0.26956904150950545, 0.27971313253914787, 0.2897636724461585, 0.30055476618523735, 0.3091051582244504, 0.29971065338511116, 0.575103760195953, 0.6579369174912328, 0.5756957078252307, 0.578457448384498, 0.62268343346853, 0.5348743605197566, 0.5437377063519533, 0.5750864631031573, 0.6026443184059901, 0.19122557781747151, 0.219926728416182, 0.17708813534241585, 0.1523831002292707, 0.17127873663224114, 0.24081197620533124, 0.18821531399816682, 0.10537279412279565, 0.21402145621295277, 0.2046246795081199, 0.19412499079843515, 0.20112124180673951, 0.20074072515046604, 0.18249195134365226, 0.1905082713072752, 0.2089302453317663, 0.19436623916189255, 0.2049281654583116, 0.0068166536550172685, 0.0837911965861654, 0.050516084582435505, 0.08976494540162006, 0.024829806428101286, 0.059188024680768336, 0.07305783740295468, 0.0964648656103706, 0.05769154514049968, 0.16280677835660884, 0.13777513171727374, 0.1716677221194739, 0.16142186592296115, 0.1234805081916649, 0.1397229977283585, 0.1689893019576535, 0.19814437959424513, 0.10939187298388475, 0.03371722574371072, 0.01923355698663376, 0.005416925536914974, 0.04565091917775321, 0.05293169986076862, 0.0184420315537287, 0.04294472623437107, 0.05384869480282728, 0.06862652834993865, 0.1434727307465219, 0.13014516524304764, 0.14283094183897305, 0.15476437716028124, 0.14335469825078906, 0.15476551997128118, 0.15389314040201207, 0.14499099412110517, 0.1646586539936239, 0.42255470889347735, 0.46454075466293065, 0.44103809128390825, 0.4445627656988088, 0.47217832809756455, 0.45296131431367226, 0.44219202469859464, 0.44168740411218377, 0.44493214750241983, 0.11182782387379753, 0.11173558176568021, 0.10138240106614815, 0.12488674551975909, 0.10273332347253195, 0.0970848950327079, 0.10894600019138578, 0.1130670277428173, 0.11829577546665515, 0.14540727231836847, 0.28447483892739733, 0.26440216718424314, 0.1827169809011342, 0.1967818721167539, 0.1290231784956315, 0.22484703138983853, 0.2435070355954998, 0.14288332363901612, 0.3074153083721701, 0.3034971554251098, 0.323958818223814, 0.3218228418410899, 0.3013796916450162, 0.3152165178622156, 0.3027670634632387, 0.3207432053900766, 0.3102628188868207, 0.2426007391435272, 0.21945623775416667, 0.268208028565292, 0.24495150191609605, 0.22065384399611787, 0.2703326499446467, 0.2520514025458884, 0.2640574256321997, 0.23775578206788373, 0.22330900122434794, 0.20084061105721895, 0.20237536743761497, 0.19086571663572038, 0.20448237248981416, 0.1846514790920929, 0.18829689955191709, 0.22010501926862958, 0.20704392112805026, 0.19970469159745197, 0.18850720732108373, 0.18254084549289917, 0.25912294469449937, 0.19604031895930163, 0.17935684116599004, 0.19282140363331945, 0.19175608739215821, 0.18992982248363355, 0.5541751596749267, 0.18046459927013492, 0.7235462915111932, 0.5502756818579533, 0.19248006472901402, 0.6572431188512124, 0.49559553012688085, 0.17391510325816872, 0.6707153637156391, 0.6286220117657617, 0.16964131868621912, 0.1908374933944862, 0.587157252836209, 0.5686223380915884, 0.6500050281667298, 0.20784635578758293, 0.12598989547462092, 0.6967624706510098, 0.1691155437474563, 0.19560187661169282, 0.1967090441389101, 0.17095352215511195, 0.1891195529401717, 0.1773154045473122, 0.18015985376441856, 0.1865000452760659, 0.18157214803937605, 0.07491902707087594, 0.07967315296110045, 0.07822741346497764, 0.0905098924597636, 0.08109982530064042, 0.08927050950122395, 0.08599735345014836, 0.07840666898783799, 0.07588224010329336]}, "mutation_prompt": null}
{"id": "fa7737c8-dfdc-4ce8-b5f9-b4539164dd12", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 100\n        self.inertia_weight = 0.5\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros_like(particles)\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([float('inf')] * self.population_size)\n        \n        # Evaluate initial population\n        for i in range(self.population_size):\n            score = func(particles[i])\n            personal_best_scores[i] = score\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            # PSO update\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coef * r1 * (personal_best_positions[i] - particles[i])\n                                 + self.social_coef * r2 * (global_best_position - particles[i]))\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n            # Differential Evolution update with crossover\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = particles[np.random.choice(idxs, 3, replace=False)]\n                mutant_vector = a + self.mutation_factor * (b - c)\n                trial_vector = np.copy(particles[i])\n                \n                crossover_mask = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover_mask] = mutant_vector[crossover_mask]\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_score = func(trial_vector)\n                eval_count += 1\n\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial_vector\n                    personal_best_scores[i] = trial_score\n\n                # Update global best\n                if trial_score < personal_best_scores[global_best_index]:\n                    global_best_position = trial_vector\n                    global_best_index = i\n\n        return global_best_position", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization with Differential Evolution for improved global search and fine-tuning capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "86b3e4f1-22cc-4fb2-97cc-bf4bb4405e19", "metadata": {"aucs": [0.4882472281863305, 0.5164996094393812, 0.49627912463063206, 0.5339702752982873, 0.5404857484433038, 0.547033222410221, 0.49399054113020424, 0.5367743327470891, 0.5119730119579462, 0.1706997127269757, 0.16635505076312052, 0.18446456584479554, 0.18604242012498118, 0.18385268429613089, 0.19889041587631473, 0.19350555897906274, 0.18935136805081465, 0.186113004482099, 0.1307654169093807, 0.0896874251953903, 0.1412118423293054, 0.12142484023944233, 0.08837419841250671, 0.10400118280198245, 0.0964554587419576, 0.11658723844656671, 0.11926491685202545, 0.08929049749518203, 0.09355381931055196, 0.09727303635479634, 0.09026961265237132, 0.09423101095621911, 0.09339318029108867, 0.08134358186533541, 0.08978638175382525, 0.0790833264319073, 0.9624677687815185, 0.9855801791358813, 0.9816224124392043, 0.9588006997707941, 0.9759509140344366, 0.9710092523361906, 0.9847789324109596, 0.9782110500998692, 0.98016966668225, 0.3034460677447628, 0.3070791946049275, 0.3162936841526668, 0.26956904150950545, 0.27971313253914787, 0.2897636724461585, 0.30055476618523735, 0.3091051582244504, 0.29971065338511116, 0.575103760195953, 0.6579369174912328, 0.5756957078252307, 0.578457448384498, 0.62268343346853, 0.5348743605197566, 0.5437377063519533, 0.5750864631031573, 0.6026443184059901, 0.19122557781747151, 0.219926728416182, 0.17708813534241585, 0.1523831002292707, 0.17127873663224114, 0.24081197620533124, 0.18821531399816682, 0.10537279412279565, 0.21402145621295277, 0.2046246795081199, 0.19412499079843515, 0.20112124180673951, 0.20074072515046604, 0.18249195134365226, 0.1905082713072752, 0.2089302453317663, 0.19436623916189255, 0.2049281654583116, 0.0068166536550172685, 0.0837911965861654, 0.050516084582435505, 0.08976494540162006, 0.024829806428101286, 0.059188024680768336, 0.07305783740295468, 0.0964648656103706, 0.05769154514049968, 0.16280677835660884, 0.13777513171727374, 0.1716677221194739, 0.16142186592296115, 0.1234805081916649, 0.1397229977283585, 0.1689893019576535, 0.19814437959424513, 0.10939187298388475, 0.03371722574371072, 0.01923355698663376, 0.005416925536914974, 0.04565091917775321, 0.05293169986076862, 0.0184420315537287, 0.04294472623437107, 0.05384869480282728, 0.06862652834993865, 0.1434727307465219, 0.13014516524304764, 0.14283094183897305, 0.15476437716028124, 0.14335469825078906, 0.15476551997128118, 0.15389314040201207, 0.14499099412110517, 0.1646586539936239, 0.42255470889347735, 0.46454075466293065, 0.44103809128390825, 0.4445627656988088, 0.47217832809756455, 0.45296131431367226, 0.44219202469859464, 0.44168740411218377, 0.44493214750241983, 0.11182782387379753, 0.11173558176568021, 0.10138240106614815, 0.12488674551975909, 0.10273332347253195, 0.0970848950327079, 0.10894600019138578, 0.1130670277428173, 0.11829577546665515, 0.14540727231836847, 0.28447483892739733, 0.26440216718424314, 0.1827169809011342, 0.1967818721167539, 0.1290231784956315, 0.22484703138983853, 0.2435070355954998, 0.14288332363901612, 0.3074153083721701, 0.3034971554251098, 0.323958818223814, 0.3218228418410899, 0.3013796916450162, 0.3152165178622156, 0.3027670634632387, 0.3207432053900766, 0.3102628188868207, 0.2426007391435272, 0.21945623775416667, 0.268208028565292, 0.24495150191609605, 0.22065384399611787, 0.2703326499446467, 0.2520514025458884, 0.2640574256321997, 0.23775578206788373, 0.22330900122434794, 0.20084061105721895, 0.20237536743761497, 0.19086571663572038, 0.20448237248981416, 0.1846514790920929, 0.18829689955191709, 0.22010501926862958, 0.20704392112805026, 0.19970469159745197, 0.18850720732108373, 0.18254084549289917, 0.25912294469449937, 0.19604031895930163, 0.17935684116599004, 0.19282140363331945, 0.19175608739215821, 0.18992982248363355, 0.5541751596749267, 0.18046459927013492, 0.7235462915111932, 0.5502756818579533, 0.19248006472901402, 0.6572431188512124, 0.49559553012688085, 0.17391510325816872, 0.6707153637156391, 0.6286220117657617, 0.16964131868621912, 0.1908374933944862, 0.587157252836209, 0.5686223380915884, 0.6500050281667298, 0.20784635578758293, 0.12598989547462092, 0.6967624706510098, 0.1691155437474563, 0.19560187661169282, 0.1967090441389101, 0.17095352215511195, 0.1891195529401717, 0.1773154045473122, 0.18015985376441856, 0.1865000452760659, 0.18157214803937605, 0.07491902707087594, 0.07967315296110045, 0.07822741346497764, 0.0905098924597636, 0.08109982530064042, 0.08927050950122395, 0.08599735345014836, 0.07840666898783799, 0.07588224010329336]}, "mutation_prompt": null}
{"id": "e4876d3b-9e8e-4339-816d-dfd5e0774fe8", "solution": "import numpy as np\n\nclass OptimizedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 100\n        self.inertia_weight = 0.5\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros_like(particles)\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([float('inf')] * self.population_size)\n\n        for i in range(self.population_size):\n            score = func(particles[i])\n            personal_best_scores[i] = score\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            r1, r2 = np.random.rand(self.population_size), np.random.rand(self.population_size)\n            velocities = (self.inertia_weight * velocities\n                          + self.cognitive_coef * r1[:, None] * (personal_best_positions - particles)\n                          + self.social_coef * r2[:, None] * (global_best_position - particles))\n                          \n            particles += velocities\n            particles = np.clip(particles, self.lower_bound, self.upper_bound)\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = np.random.permutation(self.population_size)\n                idxs = idxs[idxs != i][:3]\n                a, b, c = particles[idxs]\n                mutant_vector = a + self.mutation_factor * (b - c)\n\n                jrand = np.random.randint(self.dim)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_prob\n                crossover_mask[jrand] = True\n                trial_vector = np.where(crossover_mask, mutant_vector, particles[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_score = func(trial_vector)\n                eval_count += 1\n\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial_vector\n                    personal_best_scores[i] = trial_score\n\n                if trial_score < personal_best_scores[global_best_index]:\n                    global_best_position = trial_vector\n                    global_best_index = i\n\n        return global_best_position", "name": "OptimizedHybridPSODE", "description": "Optimized HybridPSODE by reducing velocity calculations and enhancing DE crossover by selecting random dimensions.", "configspace": "", "generation": 46, "fitness": 0.2626841914372868, "feedback": "The algorithm OptimizedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.21.", "error": "", "parent_id": "86b3e4f1-22cc-4fb2-97cc-bf4bb4405e19", "metadata": {"aucs": [0.5357863562643479, 0.5141316517899062, 0.4925564715930647, 0.5171658954049774, 0.532537147485304, 0.5358052176559113, 0.5055867844270225, 0.5197824937876263, 0.5164016183896999, 0.18302293517252233, 0.18816775115138573, 0.1798339015493915, 0.17055116376016433, 0.1870714214744832, 0.18120764528478495, 0.1913682754061159, 0.17471713589303695, 0.165216183780445, 0.10308009389453743, 0.08876195215349814, 0.10341806328712244, 0.11085420975398241, 0.1152748735193867, 0.09837212064098899, 0.1069249745677966, 0.1319298562718304, 0.12016039208296048, 0.08417893900714568, 0.09187180581752963, 0.1023444339321884, 0.08357166769339197, 0.09990727375551955, 0.09166777906960266, 0.08827520387263199, 0.0932207768876051, 0.10315436072037287, 0.9798791321963051, 0.9871420516928462, 0.9730871648587347, 0.9545610000615511, 0.9732450417627614, 0.9706425499656843, 0.9821034230298317, 0.9889125979831996, 0.9707157887695458, 0.28306818523795685, 0.2832751147670163, 0.2856299149413031, 0.287997240013559, 0.27751760794220626, 0.2909993710258363, 0.2959027546823261, 0.2961656987731942, 0.29169096325740773, 0.5748455410014836, 0.5829586008512075, 0.4103226552806195, 0.6513007819458412, 0.5962832285187498, 0.5531121962309029, 0.5779364431311788, 0.60362489063772, 0.635616603149239, 0.17939018684547958, 0.1918027593547501, 0.20343832819877283, 0.1584216176536566, 0.22103301276517218, 0.18826215394542756, 0.1830061363558565, 0.1495489039714737, 0.20236459744082957, 0.1935349077463424, 0.1174515256803379, 0.20032782681271577, 0.15883184487855906, 0.2284541930208176, 0.2344920685539995, 0.21402204194939745, 0.2176042769319093, 0.22303959461098888, 0.1308010904737501, 0.06186952246655497, 0.08855872760171335, 0.024253318214888187, 0.05604451150869505, 0.08389859428275248, 0.06358142775248055, 0.10264806900248691, 0.13958637447832045, 0.25455061193511874, 0.17421114599722076, 0.20839542909867137, 0.19523951294113795, 0.1829579845633721, 0.12153072113025043, 0.16726399092212396, 0.11220903903941015, 0.18094864427644564, 0.0626936440128455, 0.020703529800822462, 0.04855303998376859, 0.057138709445539115, 0.07233557830724857, 0.038867283900674066, 0.052234264153186105, 0.02062590367645112, 0.03753624658443533, 0.14183831135734726, 0.14192414952817456, 0.14420869177378903, 0.12796198997278974, 0.150228494669416, 0.15353632036187115, 0.14447704386513582, 0.14481916613890045, 0.14512320905316778, 0.4701476281947239, 0.4424619434271221, 0.4547856831904059, 0.4400595179792518, 0.4841801842482145, 0.46462312561170027, 0.4615619073348073, 0.4636383068897957, 0.43603667177673866, 0.10781366763324496, 0.10240978476693252, 0.11215447831248748, 0.09749894266367787, 0.10173698060299996, 0.09979198961476776, 0.08609901803989961, 0.1162994832892913, 0.08668527155847972, 0.15674403335505682, 0.1444652425560463, 0.26708352682724257, 0.20749349918278137, 0.22282385975014973, 0.2272286850369697, 0.16289899288160303, 0.1646771067980799, 0.17599533347038776, 0.2985309247540484, 0.3002737468398834, 0.31174521823148726, 0.3153783220342833, 0.30828947918906746, 0.309723473529136, 0.3212936681040468, 0.31576293719630044, 0.3069030283608336, 0.23718238563918426, 0.2365288184956078, 0.22982169563557386, 0.22436193730791099, 0.2649947726086148, 0.23969450867257824, 0.23854366127368654, 0.23810245745624303, 0.216783763054743, 0.19279169175823496, 0.19517162650058895, 0.22148497441277892, 0.17963102832810895, 0.2132227819661381, 0.19926111617823583, 0.21433124876446974, 0.21572773095418174, 0.1849898314146179, 0.21633545746958327, 0.18001445375298009, 0.18509096680036297, 0.21213524375565485, 0.17491264924608463, 0.21645582088872373, 0.17896310597916965, 0.19269455961864868, 0.19509194480434922, 0.5901544504301781, 0.17996561003693345, 0.7011478088377361, 0.1646091647376563, 0.18977204030424222, 0.16354598395374054, 0.13632909013810846, 0.1585845583235036, 0.7127123779386344, 0.6338751162821636, 0.16784245600104442, 0.19719245667568286, 0.6277161202056982, 0.5968535993593287, 0.5900371986327293, 0.20534868291944441, 0.20929277903332377, 0.6542941075211125, 0.18284313952045927, 0.1782414658605439, 0.19506753083547912, 0.17146607687539706, 0.17882592441409106, 0.18555531377321355, 0.1939616428069686, 0.19756102206947057, 0.20171214289611128, 0.08194405239137892, 0.08274908818213933, 0.08716941537241729, 0.08841994294804822, 0.08290821300301066, 0.08292265175917324, 0.08208921411670311, 0.08378568541258813, 0.07887769302255399]}, "mutation_prompt": null}
{"id": "a62b0599-b2fa-4664-a78b-ea827dce363f", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 100\n        self.inertia_weight = 0.5\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros_like(particles)\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([float('inf')] * self.population_size)\n        \n        # Evaluate initial population\n        for i in range(self.population_size):\n            score = func(particles[i])\n            personal_best_scores[i] = score\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            # PSO update\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coef * r1 * (personal_best_positions[i] - particles[i])\n                                 + self.social_coef * r2 * (global_best_position - particles[i]))\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n            # Differential Evolution update with crossover\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = particles[np.random.choice(idxs, 3, replace=False)]\n                mutant_vector = a + self.mutation_factor * (b - c)\n                trial_vector = np.copy(particles[i])\n                \n                crossover_mask = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover_mask] = mutant_vector[crossover_mask]\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_score = func(trial_vector)\n                eval_count += 1\n\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial_vector\n                    personal_best_scores[i] = trial_score\n\n                # Update global best\n                if trial_score < personal_best_scores[global_best_index]:\n                    global_best_position = trial_vector\n                    global_best_index = i\n\n        return global_best_position", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization with Differential Evolution for improved global search and fine-tuning capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "86b3e4f1-22cc-4fb2-97cc-bf4bb4405e19", "metadata": {"aucs": [0.4882472281863305, 0.5164996094393812, 0.49627912463063206, 0.5339702752982873, 0.5404857484433038, 0.547033222410221, 0.49399054113020424, 0.5367743327470891, 0.5119730119579462, 0.1706997127269757, 0.16635505076312052, 0.18446456584479554, 0.18604242012498118, 0.18385268429613089, 0.19889041587631473, 0.19350555897906274, 0.18935136805081465, 0.186113004482099, 0.1307654169093807, 0.0896874251953903, 0.1412118423293054, 0.12142484023944233, 0.08837419841250671, 0.10400118280198245, 0.0964554587419576, 0.11658723844656671, 0.11926491685202545, 0.08929049749518203, 0.09355381931055196, 0.09727303635479634, 0.09026961265237132, 0.09423101095621911, 0.09339318029108867, 0.08134358186533541, 0.08978638175382525, 0.0790833264319073, 0.9624677687815185, 0.9855801791358813, 0.9816224124392043, 0.9588006997707941, 0.9759509140344366, 0.9710092523361906, 0.9847789324109596, 0.9782110500998692, 0.98016966668225, 0.3034460677447628, 0.3070791946049275, 0.3162936841526668, 0.26956904150950545, 0.27971313253914787, 0.2897636724461585, 0.30055476618523735, 0.3091051582244504, 0.29971065338511116, 0.575103760195953, 0.6579369174912328, 0.5756957078252307, 0.578457448384498, 0.62268343346853, 0.5348743605197566, 0.5437377063519533, 0.5750864631031573, 0.6026443184059901, 0.19122557781747151, 0.219926728416182, 0.17708813534241585, 0.1523831002292707, 0.17127873663224114, 0.24081197620533124, 0.18821531399816682, 0.10537279412279565, 0.21402145621295277, 0.2046246795081199, 0.19412499079843515, 0.20112124180673951, 0.20074072515046604, 0.18249195134365226, 0.1905082713072752, 0.2089302453317663, 0.19436623916189255, 0.2049281654583116, 0.0068166536550172685, 0.0837911965861654, 0.050516084582435505, 0.08976494540162006, 0.024829806428101286, 0.059188024680768336, 0.07305783740295468, 0.0964648656103706, 0.05769154514049968, 0.16280677835660884, 0.13777513171727374, 0.1716677221194739, 0.16142186592296115, 0.1234805081916649, 0.1397229977283585, 0.1689893019576535, 0.19814437959424513, 0.10939187298388475, 0.03371722574371072, 0.01923355698663376, 0.005416925536914974, 0.04565091917775321, 0.05293169986076862, 0.0184420315537287, 0.04294472623437107, 0.05384869480282728, 0.06862652834993865, 0.1434727307465219, 0.13014516524304764, 0.14283094183897305, 0.15476437716028124, 0.14335469825078906, 0.15476551997128118, 0.15389314040201207, 0.14499099412110517, 0.1646586539936239, 0.42255470889347735, 0.46454075466293065, 0.44103809128390825, 0.4445627656988088, 0.47217832809756455, 0.45296131431367226, 0.44219202469859464, 0.44168740411218377, 0.44493214750241983, 0.11182782387379753, 0.11173558176568021, 0.10138240106614815, 0.12488674551975909, 0.10273332347253195, 0.0970848950327079, 0.10894600019138578, 0.1130670277428173, 0.11829577546665515, 0.14540727231836847, 0.28447483892739733, 0.26440216718424314, 0.1827169809011342, 0.1967818721167539, 0.1290231784956315, 0.22484703138983853, 0.2435070355954998, 0.14288332363901612, 0.3074153083721701, 0.3034971554251098, 0.323958818223814, 0.3218228418410899, 0.3013796916450162, 0.3152165178622156, 0.3027670634632387, 0.3207432053900766, 0.3102628188868207, 0.2426007391435272, 0.21945623775416667, 0.268208028565292, 0.24495150191609605, 0.22065384399611787, 0.2703326499446467, 0.2520514025458884, 0.2640574256321997, 0.23775578206788373, 0.22330900122434794, 0.20084061105721895, 0.20237536743761497, 0.19086571663572038, 0.20448237248981416, 0.1846514790920929, 0.18829689955191709, 0.22010501926862958, 0.20704392112805026, 0.19970469159745197, 0.18850720732108373, 0.18254084549289917, 0.25912294469449937, 0.19604031895930163, 0.17935684116599004, 0.19282140363331945, 0.19175608739215821, 0.18992982248363355, 0.5541751596749267, 0.18046459927013492, 0.7235462915111932, 0.5502756818579533, 0.19248006472901402, 0.6572431188512124, 0.49559553012688085, 0.17391510325816872, 0.6707153637156391, 0.6286220117657617, 0.16964131868621912, 0.1908374933944862, 0.587157252836209, 0.5686223380915884, 0.6500050281667298, 0.20784635578758293, 0.12598989547462092, 0.6967624706510098, 0.1691155437474563, 0.19560187661169282, 0.1967090441389101, 0.17095352215511195, 0.1891195529401717, 0.1773154045473122, 0.18015985376441856, 0.1865000452760659, 0.18157214803937605, 0.07491902707087594, 0.07967315296110045, 0.07822741346497764, 0.0905098924597636, 0.08109982530064042, 0.08927050950122395, 0.08599735345014836, 0.07840666898783799, 0.07588224010329336]}, "mutation_prompt": null}
{"id": "4f466a5b-f4bd-48dc-8b7e-94ee097c3086", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 100\n        self.inertia_weight = 0.5\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros_like(particles)\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([float('inf')] * self.population_size)\n        \n        # Evaluate initial population\n        for i in range(self.population_size):\n            score = func(particles[i])\n            personal_best_scores[i] = score\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            # PSO update\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coef * r1 * (personal_best_positions[i] - particles[i])\n                                 + self.social_coef * r2 * (global_best_position - particles[i]))\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n            # Differential Evolution update with crossover\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = particles[np.random.choice(idxs, 3, replace=False)]\n                mutant_vector = a + self.mutation_factor * (b - c)\n                trial_vector = np.copy(particles[i])\n                \n                crossover_mask = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover_mask] = mutant_vector[crossover_mask]\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_score = func(trial_vector)\n                eval_count += 1\n\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial_vector\n                    personal_best_scores[i] = trial_score\n\n                # Update global best\n                if trial_score < personal_best_scores[global_best_index]:\n                    global_best_position = trial_vector\n                    global_best_index = i\n\n        return global_best_position", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization with Differential Evolution for improved global search and fine-tuning capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "86b3e4f1-22cc-4fb2-97cc-bf4bb4405e19", "metadata": {"aucs": [0.4882472281863305, 0.5164996094393812, 0.49627912463063206, 0.5339702752982873, 0.5404857484433038, 0.547033222410221, 0.49399054113020424, 0.5367743327470891, 0.5119730119579462, 0.1706997127269757, 0.16635505076312052, 0.18446456584479554, 0.18604242012498118, 0.18385268429613089, 0.19889041587631473, 0.19350555897906274, 0.18935136805081465, 0.186113004482099, 0.1307654169093807, 0.0896874251953903, 0.1412118423293054, 0.12142484023944233, 0.08837419841250671, 0.10400118280198245, 0.0964554587419576, 0.11658723844656671, 0.11926491685202545, 0.08929049749518203, 0.09355381931055196, 0.09727303635479634, 0.09026961265237132, 0.09423101095621911, 0.09339318029108867, 0.08134358186533541, 0.08978638175382525, 0.0790833264319073, 0.9624677687815185, 0.9855801791358813, 0.9816224124392043, 0.9588006997707941, 0.9759509140344366, 0.9710092523361906, 0.9847789324109596, 0.9782110500998692, 0.98016966668225, 0.3034460677447628, 0.3070791946049275, 0.3162936841526668, 0.26956904150950545, 0.27971313253914787, 0.2897636724461585, 0.30055476618523735, 0.3091051582244504, 0.29971065338511116, 0.575103760195953, 0.6579369174912328, 0.5756957078252307, 0.578457448384498, 0.62268343346853, 0.5348743605197566, 0.5437377063519533, 0.5750864631031573, 0.6026443184059901, 0.19122557781747151, 0.219926728416182, 0.17708813534241585, 0.1523831002292707, 0.17127873663224114, 0.24081197620533124, 0.18821531399816682, 0.10537279412279565, 0.21402145621295277, 0.2046246795081199, 0.19412499079843515, 0.20112124180673951, 0.20074072515046604, 0.18249195134365226, 0.1905082713072752, 0.2089302453317663, 0.19436623916189255, 0.2049281654583116, 0.0068166536550172685, 0.0837911965861654, 0.050516084582435505, 0.08976494540162006, 0.024829806428101286, 0.059188024680768336, 0.07305783740295468, 0.0964648656103706, 0.05769154514049968, 0.16280677835660884, 0.13777513171727374, 0.1716677221194739, 0.16142186592296115, 0.1234805081916649, 0.1397229977283585, 0.1689893019576535, 0.19814437959424513, 0.10939187298388475, 0.03371722574371072, 0.01923355698663376, 0.005416925536914974, 0.04565091917775321, 0.05293169986076862, 0.0184420315537287, 0.04294472623437107, 0.05384869480282728, 0.06862652834993865, 0.1434727307465219, 0.13014516524304764, 0.14283094183897305, 0.15476437716028124, 0.14335469825078906, 0.15476551997128118, 0.15389314040201207, 0.14499099412110517, 0.1646586539936239, 0.42255470889347735, 0.46454075466293065, 0.44103809128390825, 0.4445627656988088, 0.47217832809756455, 0.45296131431367226, 0.44219202469859464, 0.44168740411218377, 0.44493214750241983, 0.11182782387379753, 0.11173558176568021, 0.10138240106614815, 0.12488674551975909, 0.10273332347253195, 0.0970848950327079, 0.10894600019138578, 0.1130670277428173, 0.11829577546665515, 0.14540727231836847, 0.28447483892739733, 0.26440216718424314, 0.1827169809011342, 0.1967818721167539, 0.1290231784956315, 0.22484703138983853, 0.2435070355954998, 0.14288332363901612, 0.3074153083721701, 0.3034971554251098, 0.323958818223814, 0.3218228418410899, 0.3013796916450162, 0.3152165178622156, 0.3027670634632387, 0.3207432053900766, 0.3102628188868207, 0.2426007391435272, 0.21945623775416667, 0.268208028565292, 0.24495150191609605, 0.22065384399611787, 0.2703326499446467, 0.2520514025458884, 0.2640574256321997, 0.23775578206788373, 0.22330900122434794, 0.20084061105721895, 0.20237536743761497, 0.19086571663572038, 0.20448237248981416, 0.1846514790920929, 0.18829689955191709, 0.22010501926862958, 0.20704392112805026, 0.19970469159745197, 0.18850720732108373, 0.18254084549289917, 0.25912294469449937, 0.19604031895930163, 0.17935684116599004, 0.19282140363331945, 0.19175608739215821, 0.18992982248363355, 0.5541751596749267, 0.18046459927013492, 0.7235462915111932, 0.5502756818579533, 0.19248006472901402, 0.6572431188512124, 0.49559553012688085, 0.17391510325816872, 0.6707153637156391, 0.6286220117657617, 0.16964131868621912, 0.1908374933944862, 0.587157252836209, 0.5686223380915884, 0.6500050281667298, 0.20784635578758293, 0.12598989547462092, 0.6967624706510098, 0.1691155437474563, 0.19560187661169282, 0.1967090441389101, 0.17095352215511195, 0.1891195529401717, 0.1773154045473122, 0.18015985376441856, 0.1865000452760659, 0.18157214803937605, 0.07491902707087594, 0.07967315296110045, 0.07822741346497764, 0.0905098924597636, 0.08109982530064042, 0.08927050950122395, 0.08599735345014836, 0.07840666898783799, 0.07588224010329336]}, "mutation_prompt": null}
{"id": "2f93879e-849b-471e-bc3c-22da68b8e553", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 100\n        self.inertia_weight = 0.5\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros_like(particles)\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([float('inf')] * self.population_size)\n        \n        # Evaluate initial population\n        for i in range(self.population_size):\n            score = func(particles[i])\n            personal_best_scores[i] = score\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            # PSO update\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coef * r1 * (personal_best_positions[i] - particles[i])\n                                 + self.social_coef * r2 * (global_best_position - particles[i]))\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n            # Differential Evolution update with crossover\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = particles[np.random.choice(idxs, 3, replace=False)]\n                mutant_vector = a + self.mutation_factor * (b - c)\n                trial_vector = np.copy(particles[i])\n                \n                crossover_mask = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover_mask] = mutant_vector[crossover_mask]\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_score = func(trial_vector)\n                eval_count += 1\n\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial_vector\n                    personal_best_scores[i] = trial_score\n\n                # Update global best\n                if trial_score < personal_best_scores[global_best_index]:\n                    global_best_position = trial_vector\n                    global_best_index = i\n\n        return global_best_position", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization with Differential Evolution for improved global search and fine-tuning capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "86b3e4f1-22cc-4fb2-97cc-bf4bb4405e19", "metadata": {"aucs": [0.4882472281863305, 0.5164996094393812, 0.49627912463063206, 0.5339702752982873, 0.5404857484433038, 0.547033222410221, 0.49399054113020424, 0.5367743327470891, 0.5119730119579462, 0.1706997127269757, 0.16635505076312052, 0.18446456584479554, 0.18604242012498118, 0.18385268429613089, 0.19889041587631473, 0.19350555897906274, 0.18935136805081465, 0.186113004482099, 0.1307654169093807, 0.0896874251953903, 0.1412118423293054, 0.12142484023944233, 0.08837419841250671, 0.10400118280198245, 0.0964554587419576, 0.11658723844656671, 0.11926491685202545, 0.08929049749518203, 0.09355381931055196, 0.09727303635479634, 0.09026961265237132, 0.09423101095621911, 0.09339318029108867, 0.08134358186533541, 0.08978638175382525, 0.0790833264319073, 0.9624677687815185, 0.9855801791358813, 0.9816224124392043, 0.9588006997707941, 0.9759509140344366, 0.9710092523361906, 0.9847789324109596, 0.9782110500998692, 0.98016966668225, 0.3034460677447628, 0.3070791946049275, 0.3162936841526668, 0.26956904150950545, 0.27971313253914787, 0.2897636724461585, 0.30055476618523735, 0.3091051582244504, 0.29971065338511116, 0.575103760195953, 0.6579369174912328, 0.5756957078252307, 0.578457448384498, 0.62268343346853, 0.5348743605197566, 0.5437377063519533, 0.5750864631031573, 0.6026443184059901, 0.19122557781747151, 0.219926728416182, 0.17708813534241585, 0.1523831002292707, 0.17127873663224114, 0.24081197620533124, 0.18821531399816682, 0.10537279412279565, 0.21402145621295277, 0.2046246795081199, 0.19412499079843515, 0.20112124180673951, 0.20074072515046604, 0.18249195134365226, 0.1905082713072752, 0.2089302453317663, 0.19436623916189255, 0.2049281654583116, 0.0068166536550172685, 0.0837911965861654, 0.050516084582435505, 0.08976494540162006, 0.024829806428101286, 0.059188024680768336, 0.07305783740295468, 0.0964648656103706, 0.05769154514049968, 0.16280677835660884, 0.13777513171727374, 0.1716677221194739, 0.16142186592296115, 0.1234805081916649, 0.1397229977283585, 0.1689893019576535, 0.19814437959424513, 0.10939187298388475, 0.03371722574371072, 0.01923355698663376, 0.005416925536914974, 0.04565091917775321, 0.05293169986076862, 0.0184420315537287, 0.04294472623437107, 0.05384869480282728, 0.06862652834993865, 0.1434727307465219, 0.13014516524304764, 0.14283094183897305, 0.15476437716028124, 0.14335469825078906, 0.15476551997128118, 0.15389314040201207, 0.14499099412110517, 0.1646586539936239, 0.42255470889347735, 0.46454075466293065, 0.44103809128390825, 0.4445627656988088, 0.47217832809756455, 0.45296131431367226, 0.44219202469859464, 0.44168740411218377, 0.44493214750241983, 0.11182782387379753, 0.11173558176568021, 0.10138240106614815, 0.12488674551975909, 0.10273332347253195, 0.0970848950327079, 0.10894600019138578, 0.1130670277428173, 0.11829577546665515, 0.14540727231836847, 0.28447483892739733, 0.26440216718424314, 0.1827169809011342, 0.1967818721167539, 0.1290231784956315, 0.22484703138983853, 0.2435070355954998, 0.14288332363901612, 0.3074153083721701, 0.3034971554251098, 0.323958818223814, 0.3218228418410899, 0.3013796916450162, 0.3152165178622156, 0.3027670634632387, 0.3207432053900766, 0.3102628188868207, 0.2426007391435272, 0.21945623775416667, 0.268208028565292, 0.24495150191609605, 0.22065384399611787, 0.2703326499446467, 0.2520514025458884, 0.2640574256321997, 0.23775578206788373, 0.22330900122434794, 0.20084061105721895, 0.20237536743761497, 0.19086571663572038, 0.20448237248981416, 0.1846514790920929, 0.18829689955191709, 0.22010501926862958, 0.20704392112805026, 0.19970469159745197, 0.18850720732108373, 0.18254084549289917, 0.25912294469449937, 0.19604031895930163, 0.17935684116599004, 0.19282140363331945, 0.19175608739215821, 0.18992982248363355, 0.5541751596749267, 0.18046459927013492, 0.7235462915111932, 0.5502756818579533, 0.19248006472901402, 0.6572431188512124, 0.49559553012688085, 0.17391510325816872, 0.6707153637156391, 0.6286220117657617, 0.16964131868621912, 0.1908374933944862, 0.587157252836209, 0.5686223380915884, 0.6500050281667298, 0.20784635578758293, 0.12598989547462092, 0.6967624706510098, 0.1691155437474563, 0.19560187661169282, 0.1967090441389101, 0.17095352215511195, 0.1891195529401717, 0.1773154045473122, 0.18015985376441856, 0.1865000452760659, 0.18157214803937605, 0.07491902707087594, 0.07967315296110045, 0.07822741346497764, 0.0905098924597636, 0.08109982530064042, 0.08927050950122395, 0.08599735345014836, 0.07840666898783799, 0.07588224010329336]}, "mutation_prompt": null}
{"id": "e2de97d3-0db2-410e-9d96-384343fe9ce3", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 100\n        self.inertia_weight = 0.5\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros_like(particles)\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([float('inf')] * self.population_size)\n        \n        # Evaluate initial population\n        for i in range(self.population_size):\n            score = func(particles[i])\n            personal_best_scores[i] = score\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            # PSO update\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coef * r1 * (personal_best_positions[i] - particles[i])\n                                 + self.social_coef * r2 * (global_best_position - particles[i]))\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n            # Differential Evolution update with crossover\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = particles[np.random.choice(idxs, 3, replace=False)]\n                mutant_vector = a + self.mutation_factor * (b - c)\n                trial_vector = np.copy(particles[i])\n                \n                crossover_mask = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover_mask] = mutant_vector[crossover_mask]\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_score = func(trial_vector)\n                eval_count += 1\n\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial_vector\n                    personal_best_scores[i] = trial_score\n\n                # Update global best\n                if trial_score < personal_best_scores[global_best_index]:\n                    global_best_position = trial_vector\n                    global_best_index = i\n\n        return global_best_position", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization with Differential Evolution for improved global search and fine-tuning capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "86b3e4f1-22cc-4fb2-97cc-bf4bb4405e19", "metadata": {"aucs": [0.4882472281863305, 0.5164996094393812, 0.49627912463063206, 0.5339702752982873, 0.5404857484433038, 0.547033222410221, 0.49399054113020424, 0.5367743327470891, 0.5119730119579462, 0.1706997127269757, 0.16635505076312052, 0.18446456584479554, 0.18604242012498118, 0.18385268429613089, 0.19889041587631473, 0.19350555897906274, 0.18935136805081465, 0.186113004482099, 0.1307654169093807, 0.0896874251953903, 0.1412118423293054, 0.12142484023944233, 0.08837419841250671, 0.10400118280198245, 0.0964554587419576, 0.11658723844656671, 0.11926491685202545, 0.08929049749518203, 0.09355381931055196, 0.09727303635479634, 0.09026961265237132, 0.09423101095621911, 0.09339318029108867, 0.08134358186533541, 0.08978638175382525, 0.0790833264319073, 0.9624677687815185, 0.9855801791358813, 0.9816224124392043, 0.9588006997707941, 0.9759509140344366, 0.9710092523361906, 0.9847789324109596, 0.9782110500998692, 0.98016966668225, 0.3034460677447628, 0.3070791946049275, 0.3162936841526668, 0.26956904150950545, 0.27971313253914787, 0.2897636724461585, 0.30055476618523735, 0.3091051582244504, 0.29971065338511116, 0.575103760195953, 0.6579369174912328, 0.5756957078252307, 0.578457448384498, 0.62268343346853, 0.5348743605197566, 0.5437377063519533, 0.5750864631031573, 0.6026443184059901, 0.19122557781747151, 0.219926728416182, 0.17708813534241585, 0.1523831002292707, 0.17127873663224114, 0.24081197620533124, 0.18821531399816682, 0.10537279412279565, 0.21402145621295277, 0.2046246795081199, 0.19412499079843515, 0.20112124180673951, 0.20074072515046604, 0.18249195134365226, 0.1905082713072752, 0.2089302453317663, 0.19436623916189255, 0.2049281654583116, 0.0068166536550172685, 0.0837911965861654, 0.050516084582435505, 0.08976494540162006, 0.024829806428101286, 0.059188024680768336, 0.07305783740295468, 0.0964648656103706, 0.05769154514049968, 0.16280677835660884, 0.13777513171727374, 0.1716677221194739, 0.16142186592296115, 0.1234805081916649, 0.1397229977283585, 0.1689893019576535, 0.19814437959424513, 0.10939187298388475, 0.03371722574371072, 0.01923355698663376, 0.005416925536914974, 0.04565091917775321, 0.05293169986076862, 0.0184420315537287, 0.04294472623437107, 0.05384869480282728, 0.06862652834993865, 0.1434727307465219, 0.13014516524304764, 0.14283094183897305, 0.15476437716028124, 0.14335469825078906, 0.15476551997128118, 0.15389314040201207, 0.14499099412110517, 0.1646586539936239, 0.42255470889347735, 0.46454075466293065, 0.44103809128390825, 0.4445627656988088, 0.47217832809756455, 0.45296131431367226, 0.44219202469859464, 0.44168740411218377, 0.44493214750241983, 0.11182782387379753, 0.11173558176568021, 0.10138240106614815, 0.12488674551975909, 0.10273332347253195, 0.0970848950327079, 0.10894600019138578, 0.1130670277428173, 0.11829577546665515, 0.14540727231836847, 0.28447483892739733, 0.26440216718424314, 0.1827169809011342, 0.1967818721167539, 0.1290231784956315, 0.22484703138983853, 0.2435070355954998, 0.14288332363901612, 0.3074153083721701, 0.3034971554251098, 0.323958818223814, 0.3218228418410899, 0.3013796916450162, 0.3152165178622156, 0.3027670634632387, 0.3207432053900766, 0.3102628188868207, 0.2426007391435272, 0.21945623775416667, 0.268208028565292, 0.24495150191609605, 0.22065384399611787, 0.2703326499446467, 0.2520514025458884, 0.2640574256321997, 0.23775578206788373, 0.22330900122434794, 0.20084061105721895, 0.20237536743761497, 0.19086571663572038, 0.20448237248981416, 0.1846514790920929, 0.18829689955191709, 0.22010501926862958, 0.20704392112805026, 0.19970469159745197, 0.18850720732108373, 0.18254084549289917, 0.25912294469449937, 0.19604031895930163, 0.17935684116599004, 0.19282140363331945, 0.19175608739215821, 0.18992982248363355, 0.5541751596749267, 0.18046459927013492, 0.7235462915111932, 0.5502756818579533, 0.19248006472901402, 0.6572431188512124, 0.49559553012688085, 0.17391510325816872, 0.6707153637156391, 0.6286220117657617, 0.16964131868621912, 0.1908374933944862, 0.587157252836209, 0.5686223380915884, 0.6500050281667298, 0.20784635578758293, 0.12598989547462092, 0.6967624706510098, 0.1691155437474563, 0.19560187661169282, 0.1967090441389101, 0.17095352215511195, 0.1891195529401717, 0.1773154045473122, 0.18015985376441856, 0.1865000452760659, 0.18157214803937605, 0.07491902707087594, 0.07967315296110045, 0.07822741346497764, 0.0905098924597636, 0.08109982530064042, 0.08927050950122395, 0.08599735345014836, 0.07840666898783799, 0.07588224010329336]}, "mutation_prompt": null}
{"id": "16366350-14ed-47ea-8f23-a8f423d866be", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 100\n        self.inertia_weight = 0.5\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros_like(particles)\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([float('inf')] * self.population_size)\n        \n        # Evaluate initial population\n        for i in range(self.population_size):\n            score = func(particles[i])\n            personal_best_scores[i] = score\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            # PSO update\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coef * r1 * (personal_best_positions[i] - particles[i])\n                                 + self.social_coef * r2 * (global_best_position - particles[i]))\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n            # Differential Evolution update with crossover\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = particles[np.random.choice(idxs, 3, replace=False)]\n                mutant_vector = a + self.mutation_factor * (b - c)\n                trial_vector = np.copy(particles[i])\n                \n                crossover_mask = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover_mask] = mutant_vector[crossover_mask]\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_score = func(trial_vector)\n                eval_count += 1\n\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial_vector\n                    personal_best_scores[i] = trial_score\n\n                # Update global best\n                if trial_score < personal_best_scores[global_best_index]:\n                    global_best_position = trial_vector\n                    global_best_index = i\n\n        return global_best_position", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization with Differential Evolution for improved global search and fine-tuning capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "86b3e4f1-22cc-4fb2-97cc-bf4bb4405e19", "metadata": {"aucs": [0.4882472281863305, 0.5164996094393812, 0.49627912463063206, 0.5339702752982873, 0.5404857484433038, 0.547033222410221, 0.49399054113020424, 0.5367743327470891, 0.5119730119579462, 0.1706997127269757, 0.16635505076312052, 0.18446456584479554, 0.18604242012498118, 0.18385268429613089, 0.19889041587631473, 0.19350555897906274, 0.18935136805081465, 0.186113004482099, 0.1307654169093807, 0.0896874251953903, 0.1412118423293054, 0.12142484023944233, 0.08837419841250671, 0.10400118280198245, 0.0964554587419576, 0.11658723844656671, 0.11926491685202545, 0.08929049749518203, 0.09355381931055196, 0.09727303635479634, 0.09026961265237132, 0.09423101095621911, 0.09339318029108867, 0.08134358186533541, 0.08978638175382525, 0.0790833264319073, 0.9624677687815185, 0.9855801791358813, 0.9816224124392043, 0.9588006997707941, 0.9759509140344366, 0.9710092523361906, 0.9847789324109596, 0.9782110500998692, 0.98016966668225, 0.3034460677447628, 0.3070791946049275, 0.3162936841526668, 0.26956904150950545, 0.27971313253914787, 0.2897636724461585, 0.30055476618523735, 0.3091051582244504, 0.29971065338511116, 0.575103760195953, 0.6579369174912328, 0.5756957078252307, 0.578457448384498, 0.62268343346853, 0.5348743605197566, 0.5437377063519533, 0.5750864631031573, 0.6026443184059901, 0.19122557781747151, 0.219926728416182, 0.17708813534241585, 0.1523831002292707, 0.17127873663224114, 0.24081197620533124, 0.18821531399816682, 0.10537279412279565, 0.21402145621295277, 0.2046246795081199, 0.19412499079843515, 0.20112124180673951, 0.20074072515046604, 0.18249195134365226, 0.1905082713072752, 0.2089302453317663, 0.19436623916189255, 0.2049281654583116, 0.0068166536550172685, 0.0837911965861654, 0.050516084582435505, 0.08976494540162006, 0.024829806428101286, 0.059188024680768336, 0.07305783740295468, 0.0964648656103706, 0.05769154514049968, 0.16280677835660884, 0.13777513171727374, 0.1716677221194739, 0.16142186592296115, 0.1234805081916649, 0.1397229977283585, 0.1689893019576535, 0.19814437959424513, 0.10939187298388475, 0.03371722574371072, 0.01923355698663376, 0.005416925536914974, 0.04565091917775321, 0.05293169986076862, 0.0184420315537287, 0.04294472623437107, 0.05384869480282728, 0.06862652834993865, 0.1434727307465219, 0.13014516524304764, 0.14283094183897305, 0.15476437716028124, 0.14335469825078906, 0.15476551997128118, 0.15389314040201207, 0.14499099412110517, 0.1646586539936239, 0.42255470889347735, 0.46454075466293065, 0.44103809128390825, 0.4445627656988088, 0.47217832809756455, 0.45296131431367226, 0.44219202469859464, 0.44168740411218377, 0.44493214750241983, 0.11182782387379753, 0.11173558176568021, 0.10138240106614815, 0.12488674551975909, 0.10273332347253195, 0.0970848950327079, 0.10894600019138578, 0.1130670277428173, 0.11829577546665515, 0.14540727231836847, 0.28447483892739733, 0.26440216718424314, 0.1827169809011342, 0.1967818721167539, 0.1290231784956315, 0.22484703138983853, 0.2435070355954998, 0.14288332363901612, 0.3074153083721701, 0.3034971554251098, 0.323958818223814, 0.3218228418410899, 0.3013796916450162, 0.3152165178622156, 0.3027670634632387, 0.3207432053900766, 0.3102628188868207, 0.2426007391435272, 0.21945623775416667, 0.268208028565292, 0.24495150191609605, 0.22065384399611787, 0.2703326499446467, 0.2520514025458884, 0.2640574256321997, 0.23775578206788373, 0.22330900122434794, 0.20084061105721895, 0.20237536743761497, 0.19086571663572038, 0.20448237248981416, 0.1846514790920929, 0.18829689955191709, 0.22010501926862958, 0.20704392112805026, 0.19970469159745197, 0.18850720732108373, 0.18254084549289917, 0.25912294469449937, 0.19604031895930163, 0.17935684116599004, 0.19282140363331945, 0.19175608739215821, 0.18992982248363355, 0.5541751596749267, 0.18046459927013492, 0.7235462915111932, 0.5502756818579533, 0.19248006472901402, 0.6572431188512124, 0.49559553012688085, 0.17391510325816872, 0.6707153637156391, 0.6286220117657617, 0.16964131868621912, 0.1908374933944862, 0.587157252836209, 0.5686223380915884, 0.6500050281667298, 0.20784635578758293, 0.12598989547462092, 0.6967624706510098, 0.1691155437474563, 0.19560187661169282, 0.1967090441389101, 0.17095352215511195, 0.1891195529401717, 0.1773154045473122, 0.18015985376441856, 0.1865000452760659, 0.18157214803937605, 0.07491902707087594, 0.07967315296110045, 0.07822741346497764, 0.0905098924597636, 0.08109982530064042, 0.08927050950122395, 0.08599735345014836, 0.07840666898783799, 0.07588224010329336]}, "mutation_prompt": null}
{"id": "91b639f4-942d-4235-bbd7-1e73ea5da96e", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 100\n        self.inertia_weight = 0.5\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros_like(particles)\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([float('inf')] * self.population_size)\n        \n        # Evaluate initial population\n        for i in range(self.population_size):\n            score = func(particles[i])\n            personal_best_scores[i] = score\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            # PSO update\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coef * r1 * (personal_best_positions[i] - particles[i])\n                                 + self.social_coef * r2 * (global_best_position - particles[i]))\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n            # Differential Evolution update with crossover\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = particles[np.random.choice(idxs, 3, replace=False)]\n                mutant_vector = a + self.mutation_factor * (b - c)\n                trial_vector = np.copy(particles[i])\n                \n                crossover_mask = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover_mask] = mutant_vector[crossover_mask]\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_score = func(trial_vector)\n                eval_count += 1\n\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial_vector\n                    personal_best_scores[i] = trial_score\n\n                # Update global best\n                if trial_score < personal_best_scores[global_best_index]:\n                    global_best_position = trial_vector\n                    global_best_index = i\n\n        return global_best_position", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization with Differential Evolution for improved global search and fine-tuning capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "86b3e4f1-22cc-4fb2-97cc-bf4bb4405e19", "metadata": {"aucs": [0.4882472281863305, 0.5164996094393812, 0.49627912463063206, 0.5339702752982873, 0.5404857484433038, 0.547033222410221, 0.49399054113020424, 0.5367743327470891, 0.5119730119579462, 0.1706997127269757, 0.16635505076312052, 0.18446456584479554, 0.18604242012498118, 0.18385268429613089, 0.19889041587631473, 0.19350555897906274, 0.18935136805081465, 0.186113004482099, 0.1307654169093807, 0.0896874251953903, 0.1412118423293054, 0.12142484023944233, 0.08837419841250671, 0.10400118280198245, 0.0964554587419576, 0.11658723844656671, 0.11926491685202545, 0.08929049749518203, 0.09355381931055196, 0.09727303635479634, 0.09026961265237132, 0.09423101095621911, 0.09339318029108867, 0.08134358186533541, 0.08978638175382525, 0.0790833264319073, 0.9624677687815185, 0.9855801791358813, 0.9816224124392043, 0.9588006997707941, 0.9759509140344366, 0.9710092523361906, 0.9847789324109596, 0.9782110500998692, 0.98016966668225, 0.3034460677447628, 0.3070791946049275, 0.3162936841526668, 0.26956904150950545, 0.27971313253914787, 0.2897636724461585, 0.30055476618523735, 0.3091051582244504, 0.29971065338511116, 0.575103760195953, 0.6579369174912328, 0.5756957078252307, 0.578457448384498, 0.62268343346853, 0.5348743605197566, 0.5437377063519533, 0.5750864631031573, 0.6026443184059901, 0.19122557781747151, 0.219926728416182, 0.17708813534241585, 0.1523831002292707, 0.17127873663224114, 0.24081197620533124, 0.18821531399816682, 0.10537279412279565, 0.21402145621295277, 0.2046246795081199, 0.19412499079843515, 0.20112124180673951, 0.20074072515046604, 0.18249195134365226, 0.1905082713072752, 0.2089302453317663, 0.19436623916189255, 0.2049281654583116, 0.0068166536550172685, 0.0837911965861654, 0.050516084582435505, 0.08976494540162006, 0.024829806428101286, 0.059188024680768336, 0.07305783740295468, 0.0964648656103706, 0.05769154514049968, 0.16280677835660884, 0.13777513171727374, 0.1716677221194739, 0.16142186592296115, 0.1234805081916649, 0.1397229977283585, 0.1689893019576535, 0.19814437959424513, 0.10939187298388475, 0.03371722574371072, 0.01923355698663376, 0.005416925536914974, 0.04565091917775321, 0.05293169986076862, 0.0184420315537287, 0.04294472623437107, 0.05384869480282728, 0.06862652834993865, 0.1434727307465219, 0.13014516524304764, 0.14283094183897305, 0.15476437716028124, 0.14335469825078906, 0.15476551997128118, 0.15389314040201207, 0.14499099412110517, 0.1646586539936239, 0.42255470889347735, 0.46454075466293065, 0.44103809128390825, 0.4445627656988088, 0.47217832809756455, 0.45296131431367226, 0.44219202469859464, 0.44168740411218377, 0.44493214750241983, 0.11182782387379753, 0.11173558176568021, 0.10138240106614815, 0.12488674551975909, 0.10273332347253195, 0.0970848950327079, 0.10894600019138578, 0.1130670277428173, 0.11829577546665515, 0.14540727231836847, 0.28447483892739733, 0.26440216718424314, 0.1827169809011342, 0.1967818721167539, 0.1290231784956315, 0.22484703138983853, 0.2435070355954998, 0.14288332363901612, 0.3074153083721701, 0.3034971554251098, 0.323958818223814, 0.3218228418410899, 0.3013796916450162, 0.3152165178622156, 0.3027670634632387, 0.3207432053900766, 0.3102628188868207, 0.2426007391435272, 0.21945623775416667, 0.268208028565292, 0.24495150191609605, 0.22065384399611787, 0.2703326499446467, 0.2520514025458884, 0.2640574256321997, 0.23775578206788373, 0.22330900122434794, 0.20084061105721895, 0.20237536743761497, 0.19086571663572038, 0.20448237248981416, 0.1846514790920929, 0.18829689955191709, 0.22010501926862958, 0.20704392112805026, 0.19970469159745197, 0.18850720732108373, 0.18254084549289917, 0.25912294469449937, 0.19604031895930163, 0.17935684116599004, 0.19282140363331945, 0.19175608739215821, 0.18992982248363355, 0.5541751596749267, 0.18046459927013492, 0.7235462915111932, 0.5502756818579533, 0.19248006472901402, 0.6572431188512124, 0.49559553012688085, 0.17391510325816872, 0.6707153637156391, 0.6286220117657617, 0.16964131868621912, 0.1908374933944862, 0.587157252836209, 0.5686223380915884, 0.6500050281667298, 0.20784635578758293, 0.12598989547462092, 0.6967624706510098, 0.1691155437474563, 0.19560187661169282, 0.1967090441389101, 0.17095352215511195, 0.1891195529401717, 0.1773154045473122, 0.18015985376441856, 0.1865000452760659, 0.18157214803937605, 0.07491902707087594, 0.07967315296110045, 0.07822741346497764, 0.0905098924597636, 0.08109982530064042, 0.08927050950122395, 0.08599735345014836, 0.07840666898783799, 0.07588224010329336]}, "mutation_prompt": null}
{"id": "0d52c375-65c1-4848-89a0-3f55c0504422", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 100\n        self.inertia_weight = 0.5\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros_like(particles)\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([float('inf')] * self.population_size)\n        \n        # Evaluate initial population\n        for i in range(self.population_size):\n            score = func(particles[i])\n            personal_best_scores[i] = score\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            # PSO update\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coef * r1 * (personal_best_positions[i] - particles[i])\n                                 + self.social_coef * r2 * (global_best_position - particles[i]))\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n            # Differential Evolution update with crossover\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = particles[np.random.choice(idxs, 3, replace=False)]\n                mutant_vector = a + self.mutation_factor * (b - c)\n                trial_vector = np.copy(particles[i])\n                \n                crossover_mask = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover_mask] = mutant_vector[crossover_mask]\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_score = func(trial_vector)\n                eval_count += 1\n\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial_vector\n                    personal_best_scores[i] = trial_score\n\n                # Update global best\n                if trial_score < personal_best_scores[global_best_index]:\n                    global_best_position = trial_vector\n                    global_best_index = i\n\n        return global_best_position", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization with Differential Evolution for improved global search and fine-tuning capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "86b3e4f1-22cc-4fb2-97cc-bf4bb4405e19", "metadata": {"aucs": [0.4882472281863305, 0.5164996094393812, 0.49627912463063206, 0.5339702752982873, 0.5404857484433038, 0.547033222410221, 0.49399054113020424, 0.5367743327470891, 0.5119730119579462, 0.1706997127269757, 0.16635505076312052, 0.18446456584479554, 0.18604242012498118, 0.18385268429613089, 0.19889041587631473, 0.19350555897906274, 0.18935136805081465, 0.186113004482099, 0.1307654169093807, 0.0896874251953903, 0.1412118423293054, 0.12142484023944233, 0.08837419841250671, 0.10400118280198245, 0.0964554587419576, 0.11658723844656671, 0.11926491685202545, 0.08929049749518203, 0.09355381931055196, 0.09727303635479634, 0.09026961265237132, 0.09423101095621911, 0.09339318029108867, 0.08134358186533541, 0.08978638175382525, 0.0790833264319073, 0.9624677687815185, 0.9855801791358813, 0.9816224124392043, 0.9588006997707941, 0.9759509140344366, 0.9710092523361906, 0.9847789324109596, 0.9782110500998692, 0.98016966668225, 0.3034460677447628, 0.3070791946049275, 0.3162936841526668, 0.26956904150950545, 0.27971313253914787, 0.2897636724461585, 0.30055476618523735, 0.3091051582244504, 0.29971065338511116, 0.575103760195953, 0.6579369174912328, 0.5756957078252307, 0.578457448384498, 0.62268343346853, 0.5348743605197566, 0.5437377063519533, 0.5750864631031573, 0.6026443184059901, 0.19122557781747151, 0.219926728416182, 0.17708813534241585, 0.1523831002292707, 0.17127873663224114, 0.24081197620533124, 0.18821531399816682, 0.10537279412279565, 0.21402145621295277, 0.2046246795081199, 0.19412499079843515, 0.20112124180673951, 0.20074072515046604, 0.18249195134365226, 0.1905082713072752, 0.2089302453317663, 0.19436623916189255, 0.2049281654583116, 0.0068166536550172685, 0.0837911965861654, 0.050516084582435505, 0.08976494540162006, 0.024829806428101286, 0.059188024680768336, 0.07305783740295468, 0.0964648656103706, 0.05769154514049968, 0.16280677835660884, 0.13777513171727374, 0.1716677221194739, 0.16142186592296115, 0.1234805081916649, 0.1397229977283585, 0.1689893019576535, 0.19814437959424513, 0.10939187298388475, 0.03371722574371072, 0.01923355698663376, 0.005416925536914974, 0.04565091917775321, 0.05293169986076862, 0.0184420315537287, 0.04294472623437107, 0.05384869480282728, 0.06862652834993865, 0.1434727307465219, 0.13014516524304764, 0.14283094183897305, 0.15476437716028124, 0.14335469825078906, 0.15476551997128118, 0.15389314040201207, 0.14499099412110517, 0.1646586539936239, 0.42255470889347735, 0.46454075466293065, 0.44103809128390825, 0.4445627656988088, 0.47217832809756455, 0.45296131431367226, 0.44219202469859464, 0.44168740411218377, 0.44493214750241983, 0.11182782387379753, 0.11173558176568021, 0.10138240106614815, 0.12488674551975909, 0.10273332347253195, 0.0970848950327079, 0.10894600019138578, 0.1130670277428173, 0.11829577546665515, 0.14540727231836847, 0.28447483892739733, 0.26440216718424314, 0.1827169809011342, 0.1967818721167539, 0.1290231784956315, 0.22484703138983853, 0.2435070355954998, 0.14288332363901612, 0.3074153083721701, 0.3034971554251098, 0.323958818223814, 0.3218228418410899, 0.3013796916450162, 0.3152165178622156, 0.3027670634632387, 0.3207432053900766, 0.3102628188868207, 0.2426007391435272, 0.21945623775416667, 0.268208028565292, 0.24495150191609605, 0.22065384399611787, 0.2703326499446467, 0.2520514025458884, 0.2640574256321997, 0.23775578206788373, 0.22330900122434794, 0.20084061105721895, 0.20237536743761497, 0.19086571663572038, 0.20448237248981416, 0.1846514790920929, 0.18829689955191709, 0.22010501926862958, 0.20704392112805026, 0.19970469159745197, 0.18850720732108373, 0.18254084549289917, 0.25912294469449937, 0.19604031895930163, 0.17935684116599004, 0.19282140363331945, 0.19175608739215821, 0.18992982248363355, 0.5541751596749267, 0.18046459927013492, 0.7235462915111932, 0.5502756818579533, 0.19248006472901402, 0.6572431188512124, 0.49559553012688085, 0.17391510325816872, 0.6707153637156391, 0.6286220117657617, 0.16964131868621912, 0.1908374933944862, 0.587157252836209, 0.5686223380915884, 0.6500050281667298, 0.20784635578758293, 0.12598989547462092, 0.6967624706510098, 0.1691155437474563, 0.19560187661169282, 0.1967090441389101, 0.17095352215511195, 0.1891195529401717, 0.1773154045473122, 0.18015985376441856, 0.1865000452760659, 0.18157214803937605, 0.07491902707087594, 0.07967315296110045, 0.07822741346497764, 0.0905098924597636, 0.08109982530064042, 0.08927050950122395, 0.08599735345014836, 0.07840666898783799, 0.07588224010329336]}, "mutation_prompt": null}
{"id": "0d92b81e-fa06-40b3-8657-61f584f4105a", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 80  # Reduced population size for efficiency\n        self.inertia_weight = 0.6  # Adaptive inertia\n        self.cognitive_coef = 1.4  # Slightly tuned coefficients\n        self.social_coef = 1.6\n        self.mutation_factor = 0.9  # Adjusted mutation factor\n        self.crossover_prob = 0.8  # Adjusted crossover probability\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros_like(particles)\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.full(self.population_size, np.inf)  # Simplified initialization\n        \n        scores = np.apply_along_axis(func, 1, particles)  # Vectorized evaluation\n        personal_best_scores = np.minimum(personal_best_scores, scores)\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n        \n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            r1, r2 = np.random.rand(2, self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities\n                          + self.cognitive_coef * r1 * (personal_best_positions - particles)\n                          + self.social_coef * r2 * (global_best_position - particles))\n            particles += velocities\n            particles = np.clip(particles, self.lower_bound, self.upper_bound)\n\n            # Differential Evolution update\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = particles[idxs]\n                mutant_vector = a + self.mutation_factor * (b - c)\n                crossover_mask = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector = np.where(crossover_mask, mutant_vector, particles[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_score = func(trial_vector)\n                eval_count += 1\n\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial_vector\n                    personal_best_scores[i] = trial_score\n\n                if trial_score < personal_best_scores[global_best_index]:\n                    global_best_position = trial_vector\n                    global_best_index = i\n\n        return global_best_position", "name": "HybridPSODE", "description": "A refined Hybrid PSO-DE algorithm using adaptive parameters and optimized data structures for improved efficiency.", "configspace": "", "generation": 54, "fitness": 0.20427805216460115, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.20.", "error": "", "parent_id": "86b3e4f1-22cc-4fb2-97cc-bf4bb4405e19", "metadata": {"aucs": [0.45395815105216597, 0.43487497604175884, 0.44509041700996355, 0.473442823799916, 0.4907302231010361, 0.4839305889952239, 0.4601751234917195, 0.4720401422459751, 0.4722420246858454, 0.17708082511605994, 0.15789062359822414, 0.16828432875433463, 0.17552299499042423, 0.14398178222336333, 0.15922091933632676, 0.03919128432325891, 0.1696999754027826, 0.16664964786446745, 0.10502916558676734, 0.08892193082781874, 0.08279320352537811, 0.08597525851107624, 0.08071758319814848, 0.0890844459446185, 0.07949167616264785, 0.09081902983914081, 0.09101142939056894, 0.07643217015021131, 0.09495837113102445, 0.0833441318571122, 0.0896713768020152, 0.07112272711112, 0.09230987762215459, 0.087651977009087, 0.0810734943964797, 0.0799716694988678, 0.979835222238537, 0.9899162027623123, 0.982998759246149, 0.9767509248573712, 0.9849383966995128, 0.9726423669173898, 0.9808206425946863, 0.9783666047865708, 0.978649737498196, 0.24853803905174454, 0.21265534415325382, 0.19280165801775295, 0.2082290701952012, 0.20199590491895814, 0.2353032636964133, 0.23298764266933214, 0.22453527641705895, 0.22074692347142422, 0.28034835412984016, 0.2487107106483899, 0.25666295427860397, 0.20028783088508517, 0.31986275691325117, 0.19901057928786448, 0.21318907457384584, 0.2928160554278497, 0.250739745636287, 0.1336083295284447, 0.12760185562588577, 0.12723900077227046, 0.12972707762095748, 0.1182862987126102, 0.12118339348060014, 0.14220425825885852, 0.12623992957426822, 0.13696963693750552, 0.12688558595096022, 0.1358921850999505, 0.13157283725563196, 0.1349607232392004, 0.13249494010674057, 0.15043656905654912, 0.10423356012589446, 0.08610166511620232, 0.0943473121718078, 0.0008550563527415234, 0.0002570686653223797, 9.999999999998899e-05, 0.02504489129877674, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002144065949738816, 0.03889220686309691, 0.06949974458120456, 0.059835017972533544, 0.03269597288720816, 0.0383286183816135, 0.07852118251730134, 0.050837996997835755, 0.05247988277888127, 0.030980088510331405, 0.011182381117433748, 0.0023461181087197636, 0.016614606202933868, 0.0074508409589069124, 0.01960861471908415, 0.02453438461306323, 0.002729697763654615, 0.0001990067603327983, 9.999999999998899e-05, 0.09569247089773036, 0.06637605963291482, 0.0688332163613522, 0.07297314530029397, 0.08403774870606395, 0.08291699983958911, 0.10114804732628724, 0.06383262419698899, 0.08851829506700937, 0.39356233532823504, 0.39411224143801926, 0.39300486840919957, 0.3801988667764785, 0.40132190437052784, 0.39212231964114974, 0.40515373252463693, 0.3845638523716104, 0.37042885596157926, 0.08023624484260472, 0.09803304219519882, 0.1072838628845375, 0.08721191694455466, 0.09306919474659514, 0.09532373169285768, 0.09825612764679914, 0.09904800590025498, 0.09094814569481424, 0.2007589307539358, 0.1377325581856791, 0.15705522636178215, 0.14985303653572268, 0.14716538140643187, 0.14160408838341976, 0.14351539528813284, 0.12663701388648918, 0.15083698139417723, 0.26799703556148424, 0.2625698750479023, 0.3030864090577946, 0.25033042418297313, 0.2811429452328533, 0.26574399905218693, 0.27807166446369436, 0.2943170066042602, 0.27839184803553363, 0.18954181616301435, 0.18690044312100418, 0.19310633129865173, 0.1787745910714138, 0.1664158212679545, 0.22995962807731307, 0.20951868762197812, 0.2270232257695226, 0.18467600775129778, 0.18314190997732227, 0.1797714466492225, 0.17787651344417132, 0.1951890579961979, 0.16899560823361748, 0.17952621981042316, 0.18596586382062907, 0.21596733970927984, 0.23138175272838302, 0.19324742920680538, 0.17893500217316838, 0.1727420478319458, 0.22026176651643414, 0.16764722094735063, 0.19348297338830533, 0.19416056237667068, 0.1712214499465433, 0.20876014290520972, 0.1434621919703999, 0.17840300394442343, 0.5492955812683058, 0.15909045378830866, 0.5555681085445747, 0.16338800545120324, 0.1988215954675513, 0.16772150891183124, 0.18480705270718534, 0.29611179932624876, 0.16464069472700793, 0.16161992001756098, 0.352009265169837, 0.3301002283298119, 0.1578349395917521, 0.3159703918302431, 0.35643784279967017, 0.3430152665913495, 0.1688658900662533, 0.16276500694716456, 0.18495529256707477, 0.17082918394731783, 0.1815871850398928, 0.18896235207424394, 0.1769006050000579, 0.18899248782518796, 0.17992755225474633, 0.07211863088263781, 0.07870835726669756, 0.06983989173067817, 0.062032076974694816, 0.07336196292499642, 0.06924962762986053, 0.06766075683347195, 0.07804302486127723, 0.07740398114913583]}, "mutation_prompt": null}
{"id": "06114662-09ae-4d74-a568-fd51e678f728", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 80  # Reduced population size for faster convergence\n        self.inertia_weight = 0.7  # Adaptive inertia weight for better exploration\n        self.cognitive_coef = 1.4\n        self.social_coef = 1.6\n        self.mutation_factor = 0.85  # Slightly increased mutation for diversity\n        self.crossover_prob = 0.7  # Lower crossover probability for more selection pressure\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros_like(particles)\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n\n        # Compact evaluation loop\n        scores = np.apply_along_axis(func, 1, particles)\n        personal_best_scores = np.minimum(personal_best_scores, scores)\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            # Efficient PSO update loop\n            r1, r2 = np.random.rand(self.population_size, 2).T\n            velocities = (self.inertia_weight * velocities\n                          + self.cognitive_coef * r1[:, np.newaxis] * (personal_best_positions - particles)\n                          + self.social_coef * r2[:, np.newaxis] * (global_best_position - particles))\n            particles += velocities\n            np.clip(particles, self.lower_bound, self.upper_bound, out=particles)\n\n            # Simplified DE update\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = np.random.choice(list(range(i)) + list(range(i+1, self.population_size)), 3, replace=False)\n                a, b, c = particles[idxs]\n                mutant_vector = a + self.mutation_factor * (b - c)\n                \n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_prob, mutant_vector, particles[i])\n                np.clip(trial_vector, self.lower_bound, self.upper_bound, out=trial_vector)\n\n                trial_score = func(trial_vector)\n                eval_count += 1\n\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial_vector\n                    personal_best_scores[i] = trial_score\n\n                if trial_score < personal_best_scores[global_best_index]:\n                    global_best_position = trial_vector\n                    global_best_index = i\n\n        return global_best_position", "name": "EnhancedHybridPSODE", "description": "Enhanced HybridPSODE with adaptive parameters for improved convergence and performance.", "configspace": "", "generation": 55, "fitness": 0.21114694179655655, "feedback": "The algorithm EnhancedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.20.", "error": "", "parent_id": "86b3e4f1-22cc-4fb2-97cc-bf4bb4405e19", "metadata": {"aucs": [0.415418562849983, 0.4293536337783189, 0.4245027038025704, 0.46263801847561226, 0.44409873599576877, 0.4691972844660246, 0.45147257044695166, 0.4446692945965973, 0.42723641615392627, 0.10506640182913685, 0.10233054344079506, 0.1129386849299564, 0.11055399621963169, 0.10727958858305597, 0.10571362054522393, 0.07941792722640417, 0.11354150133878083, 0.11273901284511578, 0.09614079332877157, 0.1028979752647099, 0.09441187046913346, 0.08620328228495222, 0.10366351225375037, 0.08545931163399878, 0.09652289945235093, 0.10658732842394025, 0.0958877884029582, 0.08635959357852185, 0.08304969589282396, 0.0889630208498533, 0.08496450061050131, 0.07760713732366709, 0.09553643769322884, 0.09961649109957693, 0.09396817654415279, 0.1030203697423453, 0.9772472030566958, 0.985008277283079, 0.9812035235938059, 0.9795874221261456, 0.9811420726461666, 0.975593635581566, 0.9825846930461908, 0.9850011917891698, 0.9813049031743091, 0.23284498699187195, 0.21869829918935668, 0.206147083780985, 0.2247212940915937, 0.2501001948898589, 0.23150106251235625, 0.224611967156375, 0.23658389316523054, 0.2375349355845855, 0.4245032627712688, 0.42616058765354914, 0.3447778730126444, 0.4639936599263763, 0.44377933451441554, 0.42354727509887535, 0.3952331916380326, 0.3291413398360049, 0.41678095444001817, 0.15381844875066586, 0.12728713979025164, 0.13024543453067328, 0.17361373341017994, 0.12901052728705087, 0.1461667668486052, 0.11957151557623236, 0.15109387488209192, 0.16076928222670284, 0.13385929268856012, 0.12850266646868458, 0.08764845484713901, 0.14396815261058604, 0.12175164062833244, 0.13008933500163988, 0.1739279734530299, 0.1414325151974426, 0.13359299599636865, 9.999999999998899e-05, 9.999999999998899e-05, 0.010721777512760267, 0.036553006458249326, 0.00048120241040539025, 9.999999999998899e-05, 0.008534228731979288, 0.025383035532560827, 0.002952890676366171, 0.09084862821165285, 0.07176991372477515, 0.12130835854887279, 0.12004704959664159, 0.032197235205881025, 0.07287646351917232, 0.08973139132056018, 0.04539275057273229, 0.0474835345490886, 0.018061948067757294, 0.017330234279651635, 0.016826754092772345, 0.023683409862895077, 0.015628951760981002, 0.026834979596911612, 0.05663602253974309, 9.999999999998899e-05, 0.010735820259062168, 0.08998988103215344, 0.08099105651498761, 0.1055058367701206, 0.10997727332573615, 0.10167006814639334, 0.10773734456078088, 0.07328052991274214, 0.09427446874226675, 0.06329849899916062, 0.37421541813816694, 0.39419349569969386, 0.389057936313457, 0.37807083004683395, 0.3825400954448359, 0.421366610266513, 0.3693689815626957, 0.3841118215862209, 0.3789307126893685, 0.09580562222636113, 0.0945213892807758, 0.08186557322967725, 0.08876694869064417, 0.08749025789560838, 0.08537921351531208, 0.11179960487276908, 0.08619688955124616, 0.09657330149266541, 0.1852216896311416, 0.2610321080319804, 0.18278591311737635, 0.13890311578518755, 0.19970294380375597, 0.12649992707339097, 0.17175747078261738, 0.15639044258062518, 0.15026696977073284, 0.2670068982568553, 0.26912586710021924, 0.2506124484463643, 0.28694941615171843, 0.254212242095453, 0.2517464590696814, 0.261586392867989, 0.3113518070673542, 0.2896632706634594, 0.20416597757483967, 0.18641074001700564, 0.1856493201107452, 0.2086565934991721, 0.20236733769740267, 0.19838819614933023, 0.2167552288130069, 0.19601300365240604, 0.15188153488581468, 0.19372076469901545, 0.18845662014008635, 0.19211046373455753, 0.20228558881529124, 0.1824552549246682, 0.20288177067283986, 0.17481150418079394, 0.20434497534682905, 0.18797552323121425, 0.17373767457927025, 0.1835914778910135, 0.18026813412464815, 0.19202284050530993, 0.18703732265947226, 0.17111477923346863, 0.17493422556241167, 0.1877464736014307, 0.18071908448508822, 0.1649886536781474, 0.5179269674777349, 0.40688442991318907, 0.19999039025421106, 0.19156456446324888, 0.16495502136865303, 0.18111963502853923, 0.15871129372679993, 0.2049708245940246, 0.42570909307261495, 0.1662421669392763, 0.1617928935404016, 0.16159631293919974, 0.4252375096853298, 0.16296827704634376, 0.1641435653780361, 0.20783857355161073, 0.30756608442252953, 0.18502603947775587, 0.18172181515679797, 0.19653250943839562, 0.18806482899297605, 0.1850708093584682, 0.18998080666973305, 0.18053494259973923, 0.1971166619215523, 0.17924656659618288, 0.08432095622075308, 0.06830760363050903, 0.08559777683715497, 0.07975087335507813, 0.07766036385007868, 0.07521900445536633, 0.08075674062899907, 0.06930632567369066, 0.06988895437354281]}, "mutation_prompt": null}
{"id": "cfd19d48-732b-477e-8d69-230e3f7f9776", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 100\n        self.inertia_weight = 0.5\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros_like(particles)\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([float('inf')] * self.population_size)\n        \n        # Evaluate initial population\n        for i in range(self.population_size):\n            score = func(particles[i])\n            personal_best_scores[i] = score\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            # PSO update\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coef * r1 * (personal_best_positions[i] - particles[i])\n                                 + self.social_coef * r2 * (global_best_position - particles[i]))\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n            # Differential Evolution update with crossover\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = particles[np.random.choice(idxs, 3, replace=False)]\n                mutant_vector = a + self.mutation_factor * (b - c)\n                trial_vector = np.copy(particles[i])\n                \n                crossover_mask = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover_mask] = mutant_vector[crossover_mask]\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_score = func(trial_vector)\n                eval_count += 1\n\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial_vector\n                    personal_best_scores[i] = trial_score\n\n                # Update global best\n                if trial_score < personal_best_scores[global_best_index]:\n                    global_best_position = trial_vector\n                    global_best_index = i\n\n        return global_best_position", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization with Differential Evolution for improved global search and fine-tuning capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "86b3e4f1-22cc-4fb2-97cc-bf4bb4405e19", "metadata": {"aucs": [0.4882472281863305, 0.5164996094393812, 0.49627912463063206, 0.5339702752982873, 0.5404857484433038, 0.547033222410221, 0.49399054113020424, 0.5367743327470891, 0.5119730119579462, 0.1706997127269757, 0.16635505076312052, 0.18446456584479554, 0.18604242012498118, 0.18385268429613089, 0.19889041587631473, 0.19350555897906274, 0.18935136805081465, 0.186113004482099, 0.1307654169093807, 0.0896874251953903, 0.1412118423293054, 0.12142484023944233, 0.08837419841250671, 0.10400118280198245, 0.0964554587419576, 0.11658723844656671, 0.11926491685202545, 0.08929049749518203, 0.09355381931055196, 0.09727303635479634, 0.09026961265237132, 0.09423101095621911, 0.09339318029108867, 0.08134358186533541, 0.08978638175382525, 0.0790833264319073, 0.9624677687815185, 0.9855801791358813, 0.9816224124392043, 0.9588006997707941, 0.9759509140344366, 0.9710092523361906, 0.9847789324109596, 0.9782110500998692, 0.98016966668225, 0.3034460677447628, 0.3070791946049275, 0.3162936841526668, 0.26956904150950545, 0.27971313253914787, 0.2897636724461585, 0.30055476618523735, 0.3091051582244504, 0.29971065338511116, 0.575103760195953, 0.6579369174912328, 0.5756957078252307, 0.578457448384498, 0.62268343346853, 0.5348743605197566, 0.5437377063519533, 0.5750864631031573, 0.6026443184059901, 0.19122557781747151, 0.219926728416182, 0.17708813534241585, 0.1523831002292707, 0.17127873663224114, 0.24081197620533124, 0.18821531399816682, 0.10537279412279565, 0.21402145621295277, 0.2046246795081199, 0.19412499079843515, 0.20112124180673951, 0.20074072515046604, 0.18249195134365226, 0.1905082713072752, 0.2089302453317663, 0.19436623916189255, 0.2049281654583116, 0.0068166536550172685, 0.0837911965861654, 0.050516084582435505, 0.08976494540162006, 0.024829806428101286, 0.059188024680768336, 0.07305783740295468, 0.0964648656103706, 0.05769154514049968, 0.16280677835660884, 0.13777513171727374, 0.1716677221194739, 0.16142186592296115, 0.1234805081916649, 0.1397229977283585, 0.1689893019576535, 0.19814437959424513, 0.10939187298388475, 0.03371722574371072, 0.01923355698663376, 0.005416925536914974, 0.04565091917775321, 0.05293169986076862, 0.0184420315537287, 0.04294472623437107, 0.05384869480282728, 0.06862652834993865, 0.1434727307465219, 0.13014516524304764, 0.14283094183897305, 0.15476437716028124, 0.14335469825078906, 0.15476551997128118, 0.15389314040201207, 0.14499099412110517, 0.1646586539936239, 0.42255470889347735, 0.46454075466293065, 0.44103809128390825, 0.4445627656988088, 0.47217832809756455, 0.45296131431367226, 0.44219202469859464, 0.44168740411218377, 0.44493214750241983, 0.11182782387379753, 0.11173558176568021, 0.10138240106614815, 0.12488674551975909, 0.10273332347253195, 0.0970848950327079, 0.10894600019138578, 0.1130670277428173, 0.11829577546665515, 0.14540727231836847, 0.28447483892739733, 0.26440216718424314, 0.1827169809011342, 0.1967818721167539, 0.1290231784956315, 0.22484703138983853, 0.2435070355954998, 0.14288332363901612, 0.3074153083721701, 0.3034971554251098, 0.323958818223814, 0.3218228418410899, 0.3013796916450162, 0.3152165178622156, 0.3027670634632387, 0.3207432053900766, 0.3102628188868207, 0.2426007391435272, 0.21945623775416667, 0.268208028565292, 0.24495150191609605, 0.22065384399611787, 0.2703326499446467, 0.2520514025458884, 0.2640574256321997, 0.23775578206788373, 0.22330900122434794, 0.20084061105721895, 0.20237536743761497, 0.19086571663572038, 0.20448237248981416, 0.1846514790920929, 0.18829689955191709, 0.22010501926862958, 0.20704392112805026, 0.19970469159745197, 0.18850720732108373, 0.18254084549289917, 0.25912294469449937, 0.19604031895930163, 0.17935684116599004, 0.19282140363331945, 0.19175608739215821, 0.18992982248363355, 0.5541751596749267, 0.18046459927013492, 0.7235462915111932, 0.5502756818579533, 0.19248006472901402, 0.6572431188512124, 0.49559553012688085, 0.17391510325816872, 0.6707153637156391, 0.6286220117657617, 0.16964131868621912, 0.1908374933944862, 0.587157252836209, 0.5686223380915884, 0.6500050281667298, 0.20784635578758293, 0.12598989547462092, 0.6967624706510098, 0.1691155437474563, 0.19560187661169282, 0.1967090441389101, 0.17095352215511195, 0.1891195529401717, 0.1773154045473122, 0.18015985376441856, 0.1865000452760659, 0.18157214803937605, 0.07491902707087594, 0.07967315296110045, 0.07822741346497764, 0.0905098924597636, 0.08109982530064042, 0.08927050950122395, 0.08599735345014836, 0.07840666898783799, 0.07588224010329336]}, "mutation_prompt": null}
{"id": "c5468d7b-b000-4ac6-b8b9-abf9cf0d0210", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 100\n        self.inertia_weight = 0.5\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros_like(particles)\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([float('inf')] * self.population_size)\n        \n        # Evaluate initial population\n        for i in range(self.population_size):\n            score = func(particles[i])\n            personal_best_scores[i] = score\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            # PSO update\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coef * r1 * (personal_best_positions[i] - particles[i])\n                                 + self.social_coef * r2 * (global_best_position - particles[i]))\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n            # Differential Evolution update with crossover\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = particles[np.random.choice(idxs, 3, replace=False)]\n                mutant_vector = a + self.mutation_factor * (b - c)\n                trial_vector = np.copy(particles[i])\n                \n                crossover_mask = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover_mask] = mutant_vector[crossover_mask]\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_score = func(trial_vector)\n                eval_count += 1\n\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial_vector\n                    personal_best_scores[i] = trial_score\n\n                # Update global best\n                if trial_score < personal_best_scores[global_best_index]:\n                    global_best_position = trial_vector\n                    global_best_index = i\n\n        return global_best_position", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization with Differential Evolution for improved global search and fine-tuning capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "86b3e4f1-22cc-4fb2-97cc-bf4bb4405e19", "metadata": {"aucs": [0.4882472281863305, 0.5164996094393812, 0.49627912463063206, 0.5339702752982873, 0.5404857484433038, 0.547033222410221, 0.49399054113020424, 0.5367743327470891, 0.5119730119579462, 0.1706997127269757, 0.16635505076312052, 0.18446456584479554, 0.18604242012498118, 0.18385268429613089, 0.19889041587631473, 0.19350555897906274, 0.18935136805081465, 0.186113004482099, 0.1307654169093807, 0.0896874251953903, 0.1412118423293054, 0.12142484023944233, 0.08837419841250671, 0.10400118280198245, 0.0964554587419576, 0.11658723844656671, 0.11926491685202545, 0.08929049749518203, 0.09355381931055196, 0.09727303635479634, 0.09026961265237132, 0.09423101095621911, 0.09339318029108867, 0.08134358186533541, 0.08978638175382525, 0.0790833264319073, 0.9624677687815185, 0.9855801791358813, 0.9816224124392043, 0.9588006997707941, 0.9759509140344366, 0.9710092523361906, 0.9847789324109596, 0.9782110500998692, 0.98016966668225, 0.3034460677447628, 0.3070791946049275, 0.3162936841526668, 0.26956904150950545, 0.27971313253914787, 0.2897636724461585, 0.30055476618523735, 0.3091051582244504, 0.29971065338511116, 0.575103760195953, 0.6579369174912328, 0.5756957078252307, 0.578457448384498, 0.62268343346853, 0.5348743605197566, 0.5437377063519533, 0.5750864631031573, 0.6026443184059901, 0.19122557781747151, 0.219926728416182, 0.17708813534241585, 0.1523831002292707, 0.17127873663224114, 0.24081197620533124, 0.18821531399816682, 0.10537279412279565, 0.21402145621295277, 0.2046246795081199, 0.19412499079843515, 0.20112124180673951, 0.20074072515046604, 0.18249195134365226, 0.1905082713072752, 0.2089302453317663, 0.19436623916189255, 0.2049281654583116, 0.0068166536550172685, 0.0837911965861654, 0.050516084582435505, 0.08976494540162006, 0.024829806428101286, 0.059188024680768336, 0.07305783740295468, 0.0964648656103706, 0.05769154514049968, 0.16280677835660884, 0.13777513171727374, 0.1716677221194739, 0.16142186592296115, 0.1234805081916649, 0.1397229977283585, 0.1689893019576535, 0.19814437959424513, 0.10939187298388475, 0.03371722574371072, 0.01923355698663376, 0.005416925536914974, 0.04565091917775321, 0.05293169986076862, 0.0184420315537287, 0.04294472623437107, 0.05384869480282728, 0.06862652834993865, 0.1434727307465219, 0.13014516524304764, 0.14283094183897305, 0.15476437716028124, 0.14335469825078906, 0.15476551997128118, 0.15389314040201207, 0.14499099412110517, 0.1646586539936239, 0.42255470889347735, 0.46454075466293065, 0.44103809128390825, 0.4445627656988088, 0.47217832809756455, 0.45296131431367226, 0.44219202469859464, 0.44168740411218377, 0.44493214750241983, 0.11182782387379753, 0.11173558176568021, 0.10138240106614815, 0.12488674551975909, 0.10273332347253195, 0.0970848950327079, 0.10894600019138578, 0.1130670277428173, 0.11829577546665515, 0.14540727231836847, 0.28447483892739733, 0.26440216718424314, 0.1827169809011342, 0.1967818721167539, 0.1290231784956315, 0.22484703138983853, 0.2435070355954998, 0.14288332363901612, 0.3074153083721701, 0.3034971554251098, 0.323958818223814, 0.3218228418410899, 0.3013796916450162, 0.3152165178622156, 0.3027670634632387, 0.3207432053900766, 0.3102628188868207, 0.2426007391435272, 0.21945623775416667, 0.268208028565292, 0.24495150191609605, 0.22065384399611787, 0.2703326499446467, 0.2520514025458884, 0.2640574256321997, 0.23775578206788373, 0.22330900122434794, 0.20084061105721895, 0.20237536743761497, 0.19086571663572038, 0.20448237248981416, 0.1846514790920929, 0.18829689955191709, 0.22010501926862958, 0.20704392112805026, 0.19970469159745197, 0.18850720732108373, 0.18254084549289917, 0.25912294469449937, 0.19604031895930163, 0.17935684116599004, 0.19282140363331945, 0.19175608739215821, 0.18992982248363355, 0.5541751596749267, 0.18046459927013492, 0.7235462915111932, 0.5502756818579533, 0.19248006472901402, 0.6572431188512124, 0.49559553012688085, 0.17391510325816872, 0.6707153637156391, 0.6286220117657617, 0.16964131868621912, 0.1908374933944862, 0.587157252836209, 0.5686223380915884, 0.6500050281667298, 0.20784635578758293, 0.12598989547462092, 0.6967624706510098, 0.1691155437474563, 0.19560187661169282, 0.1967090441389101, 0.17095352215511195, 0.1891195529401717, 0.1773154045473122, 0.18015985376441856, 0.1865000452760659, 0.18157214803937605, 0.07491902707087594, 0.07967315296110045, 0.07822741346497764, 0.0905098924597636, 0.08109982530064042, 0.08927050950122395, 0.08599735345014836, 0.07840666898783799, 0.07588224010329336]}, "mutation_prompt": null}
{"id": "a43e9649-0fd6-4e8f-85cd-c1010aff289f", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 100\n        self.inertia_weight = 0.5\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros_like(particles)\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([float('inf')] * self.population_size)\n        \n        # Evaluate initial population\n        for i in range(self.population_size):\n            score = func(particles[i])\n            personal_best_scores[i] = score\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            # PSO update\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coef * r1 * (personal_best_positions[i] - particles[i])\n                                 + self.social_coef * r2 * (global_best_position - particles[i]))\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n            # Differential Evolution update with crossover\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = particles[np.random.choice(idxs, 3, replace=False)]\n                mutant_vector = a + self.mutation_factor * (b - c)\n                trial_vector = np.copy(particles[i])\n                \n                crossover_mask = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover_mask] = mutant_vector[crossover_mask]\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_score = func(trial_vector)\n                eval_count += 1\n\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial_vector\n                    personal_best_scores[i] = trial_score\n\n                # Update global best\n                if trial_score < personal_best_scores[global_best_index]:\n                    global_best_position = trial_vector\n                    global_best_index = i\n\n        return global_best_position", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization with Differential Evolution for improved global search and fine-tuning capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "86b3e4f1-22cc-4fb2-97cc-bf4bb4405e19", "metadata": {"aucs": [0.4882472281863305, 0.5164996094393812, 0.49627912463063206, 0.5339702752982873, 0.5404857484433038, 0.547033222410221, 0.49399054113020424, 0.5367743327470891, 0.5119730119579462, 0.1706997127269757, 0.16635505076312052, 0.18446456584479554, 0.18604242012498118, 0.18385268429613089, 0.19889041587631473, 0.19350555897906274, 0.18935136805081465, 0.186113004482099, 0.1307654169093807, 0.0896874251953903, 0.1412118423293054, 0.12142484023944233, 0.08837419841250671, 0.10400118280198245, 0.0964554587419576, 0.11658723844656671, 0.11926491685202545, 0.08929049749518203, 0.09355381931055196, 0.09727303635479634, 0.09026961265237132, 0.09423101095621911, 0.09339318029108867, 0.08134358186533541, 0.08978638175382525, 0.0790833264319073, 0.9624677687815185, 0.9855801791358813, 0.9816224124392043, 0.9588006997707941, 0.9759509140344366, 0.9710092523361906, 0.9847789324109596, 0.9782110500998692, 0.98016966668225, 0.3034460677447628, 0.3070791946049275, 0.3162936841526668, 0.26956904150950545, 0.27971313253914787, 0.2897636724461585, 0.30055476618523735, 0.3091051582244504, 0.29971065338511116, 0.575103760195953, 0.6579369174912328, 0.5756957078252307, 0.578457448384498, 0.62268343346853, 0.5348743605197566, 0.5437377063519533, 0.5750864631031573, 0.6026443184059901, 0.19122557781747151, 0.219926728416182, 0.17708813534241585, 0.1523831002292707, 0.17127873663224114, 0.24081197620533124, 0.18821531399816682, 0.10537279412279565, 0.21402145621295277, 0.2046246795081199, 0.19412499079843515, 0.20112124180673951, 0.20074072515046604, 0.18249195134365226, 0.1905082713072752, 0.2089302453317663, 0.19436623916189255, 0.2049281654583116, 0.0068166536550172685, 0.0837911965861654, 0.050516084582435505, 0.08976494540162006, 0.024829806428101286, 0.059188024680768336, 0.07305783740295468, 0.0964648656103706, 0.05769154514049968, 0.16280677835660884, 0.13777513171727374, 0.1716677221194739, 0.16142186592296115, 0.1234805081916649, 0.1397229977283585, 0.1689893019576535, 0.19814437959424513, 0.10939187298388475, 0.03371722574371072, 0.01923355698663376, 0.005416925536914974, 0.04565091917775321, 0.05293169986076862, 0.0184420315537287, 0.04294472623437107, 0.05384869480282728, 0.06862652834993865, 0.1434727307465219, 0.13014516524304764, 0.14283094183897305, 0.15476437716028124, 0.14335469825078906, 0.15476551997128118, 0.15389314040201207, 0.14499099412110517, 0.1646586539936239, 0.42255470889347735, 0.46454075466293065, 0.44103809128390825, 0.4445627656988088, 0.47217832809756455, 0.45296131431367226, 0.44219202469859464, 0.44168740411218377, 0.44493214750241983, 0.11182782387379753, 0.11173558176568021, 0.10138240106614815, 0.12488674551975909, 0.10273332347253195, 0.0970848950327079, 0.10894600019138578, 0.1130670277428173, 0.11829577546665515, 0.14540727231836847, 0.28447483892739733, 0.26440216718424314, 0.1827169809011342, 0.1967818721167539, 0.1290231784956315, 0.22484703138983853, 0.2435070355954998, 0.14288332363901612, 0.3074153083721701, 0.3034971554251098, 0.323958818223814, 0.3218228418410899, 0.3013796916450162, 0.3152165178622156, 0.3027670634632387, 0.3207432053900766, 0.3102628188868207, 0.2426007391435272, 0.21945623775416667, 0.268208028565292, 0.24495150191609605, 0.22065384399611787, 0.2703326499446467, 0.2520514025458884, 0.2640574256321997, 0.23775578206788373, 0.22330900122434794, 0.20084061105721895, 0.20237536743761497, 0.19086571663572038, 0.20448237248981416, 0.1846514790920929, 0.18829689955191709, 0.22010501926862958, 0.20704392112805026, 0.19970469159745197, 0.18850720732108373, 0.18254084549289917, 0.25912294469449937, 0.19604031895930163, 0.17935684116599004, 0.19282140363331945, 0.19175608739215821, 0.18992982248363355, 0.5541751596749267, 0.18046459927013492, 0.7235462915111932, 0.5502756818579533, 0.19248006472901402, 0.6572431188512124, 0.49559553012688085, 0.17391510325816872, 0.6707153637156391, 0.6286220117657617, 0.16964131868621912, 0.1908374933944862, 0.587157252836209, 0.5686223380915884, 0.6500050281667298, 0.20784635578758293, 0.12598989547462092, 0.6967624706510098, 0.1691155437474563, 0.19560187661169282, 0.1967090441389101, 0.17095352215511195, 0.1891195529401717, 0.1773154045473122, 0.18015985376441856, 0.1865000452760659, 0.18157214803937605, 0.07491902707087594, 0.07967315296110045, 0.07822741346497764, 0.0905098924597636, 0.08109982530064042, 0.08927050950122395, 0.08599735345014836, 0.07840666898783799, 0.07588224010329336]}, "mutation_prompt": null}
{"id": "cb603b35-2a36-4454-bf67-e6c46f29d961", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 100\n        self.inertia_weight = 0.5\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros_like(particles)\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([float('inf')] * self.population_size)\n        \n        # Evaluate initial population\n        for i in range(self.population_size):\n            score = func(particles[i])\n            personal_best_scores[i] = score\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            # PSO update\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coef * r1 * (personal_best_positions[i] - particles[i])\n                                 + self.social_coef * r2 * (global_best_position - particles[i]))\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n            # Differential Evolution update with crossover\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = particles[np.random.choice(idxs, 3, replace=False)]\n                mutant_vector = a + self.mutation_factor * (b - c)\n                trial_vector = np.copy(particles[i])\n                \n                crossover_mask = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover_mask] = mutant_vector[crossover_mask]\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_score = func(trial_vector)\n                eval_count += 1\n\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial_vector\n                    personal_best_scores[i] = trial_score\n\n                # Update global best\n                if trial_score < personal_best_scores[global_best_index]:\n                    global_best_position = trial_vector\n                    global_best_index = i\n\n        return global_best_position", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization with Differential Evolution for improved global search and fine-tuning capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "86b3e4f1-22cc-4fb2-97cc-bf4bb4405e19", "metadata": {"aucs": [0.4882472281863305, 0.5164996094393812, 0.49627912463063206, 0.5339702752982873, 0.5404857484433038, 0.547033222410221, 0.49399054113020424, 0.5367743327470891, 0.5119730119579462, 0.1706997127269757, 0.16635505076312052, 0.18446456584479554, 0.18604242012498118, 0.18385268429613089, 0.19889041587631473, 0.19350555897906274, 0.18935136805081465, 0.186113004482099, 0.1307654169093807, 0.0896874251953903, 0.1412118423293054, 0.12142484023944233, 0.08837419841250671, 0.10400118280198245, 0.0964554587419576, 0.11658723844656671, 0.11926491685202545, 0.08929049749518203, 0.09355381931055196, 0.09727303635479634, 0.09026961265237132, 0.09423101095621911, 0.09339318029108867, 0.08134358186533541, 0.08978638175382525, 0.0790833264319073, 0.9624677687815185, 0.9855801791358813, 0.9816224124392043, 0.9588006997707941, 0.9759509140344366, 0.9710092523361906, 0.9847789324109596, 0.9782110500998692, 0.98016966668225, 0.3034460677447628, 0.3070791946049275, 0.3162936841526668, 0.26956904150950545, 0.27971313253914787, 0.2897636724461585, 0.30055476618523735, 0.3091051582244504, 0.29971065338511116, 0.575103760195953, 0.6579369174912328, 0.5756957078252307, 0.578457448384498, 0.62268343346853, 0.5348743605197566, 0.5437377063519533, 0.5750864631031573, 0.6026443184059901, 0.19122557781747151, 0.219926728416182, 0.17708813534241585, 0.1523831002292707, 0.17127873663224114, 0.24081197620533124, 0.18821531399816682, 0.10537279412279565, 0.21402145621295277, 0.2046246795081199, 0.19412499079843515, 0.20112124180673951, 0.20074072515046604, 0.18249195134365226, 0.1905082713072752, 0.2089302453317663, 0.19436623916189255, 0.2049281654583116, 0.0068166536550172685, 0.0837911965861654, 0.050516084582435505, 0.08976494540162006, 0.024829806428101286, 0.059188024680768336, 0.07305783740295468, 0.0964648656103706, 0.05769154514049968, 0.16280677835660884, 0.13777513171727374, 0.1716677221194739, 0.16142186592296115, 0.1234805081916649, 0.1397229977283585, 0.1689893019576535, 0.19814437959424513, 0.10939187298388475, 0.03371722574371072, 0.01923355698663376, 0.005416925536914974, 0.04565091917775321, 0.05293169986076862, 0.0184420315537287, 0.04294472623437107, 0.05384869480282728, 0.06862652834993865, 0.1434727307465219, 0.13014516524304764, 0.14283094183897305, 0.15476437716028124, 0.14335469825078906, 0.15476551997128118, 0.15389314040201207, 0.14499099412110517, 0.1646586539936239, 0.42255470889347735, 0.46454075466293065, 0.44103809128390825, 0.4445627656988088, 0.47217832809756455, 0.45296131431367226, 0.44219202469859464, 0.44168740411218377, 0.44493214750241983, 0.11182782387379753, 0.11173558176568021, 0.10138240106614815, 0.12488674551975909, 0.10273332347253195, 0.0970848950327079, 0.10894600019138578, 0.1130670277428173, 0.11829577546665515, 0.14540727231836847, 0.28447483892739733, 0.26440216718424314, 0.1827169809011342, 0.1967818721167539, 0.1290231784956315, 0.22484703138983853, 0.2435070355954998, 0.14288332363901612, 0.3074153083721701, 0.3034971554251098, 0.323958818223814, 0.3218228418410899, 0.3013796916450162, 0.3152165178622156, 0.3027670634632387, 0.3207432053900766, 0.3102628188868207, 0.2426007391435272, 0.21945623775416667, 0.268208028565292, 0.24495150191609605, 0.22065384399611787, 0.2703326499446467, 0.2520514025458884, 0.2640574256321997, 0.23775578206788373, 0.22330900122434794, 0.20084061105721895, 0.20237536743761497, 0.19086571663572038, 0.20448237248981416, 0.1846514790920929, 0.18829689955191709, 0.22010501926862958, 0.20704392112805026, 0.19970469159745197, 0.18850720732108373, 0.18254084549289917, 0.25912294469449937, 0.19604031895930163, 0.17935684116599004, 0.19282140363331945, 0.19175608739215821, 0.18992982248363355, 0.5541751596749267, 0.18046459927013492, 0.7235462915111932, 0.5502756818579533, 0.19248006472901402, 0.6572431188512124, 0.49559553012688085, 0.17391510325816872, 0.6707153637156391, 0.6286220117657617, 0.16964131868621912, 0.1908374933944862, 0.587157252836209, 0.5686223380915884, 0.6500050281667298, 0.20784635578758293, 0.12598989547462092, 0.6967624706510098, 0.1691155437474563, 0.19560187661169282, 0.1967090441389101, 0.17095352215511195, 0.1891195529401717, 0.1773154045473122, 0.18015985376441856, 0.1865000452760659, 0.18157214803937605, 0.07491902707087594, 0.07967315296110045, 0.07822741346497764, 0.0905098924597636, 0.08109982530064042, 0.08927050950122395, 0.08599735345014836, 0.07840666898783799, 0.07588224010329336]}, "mutation_prompt": null}
{"id": "cc46abc1-1b89-4593-b424-70f62c17ba63", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 100\n        self.inertia_weight = 0.5\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros_like(particles)\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([float('inf')] * self.population_size)\n        \n        # Evaluate initial population\n        for i in range(self.population_size):\n            score = func(particles[i])\n            personal_best_scores[i] = score\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            # PSO update\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coef * r1 * (personal_best_positions[i] - particles[i])\n                                 + self.social_coef * r2 * (global_best_position - particles[i]))\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n            # Differential Evolution update with crossover\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = particles[np.random.choice(idxs, 3, replace=False)]\n                mutant_vector = a + self.mutation_factor * (b - c)\n                trial_vector = np.copy(particles[i])\n                \n                crossover_mask = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover_mask] = mutant_vector[crossover_mask]\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_score = func(trial_vector)\n                eval_count += 1\n\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial_vector\n                    personal_best_scores[i] = trial_score\n\n                # Update global best\n                if trial_score < personal_best_scores[global_best_index]:\n                    global_best_position = trial_vector\n                    global_best_index = i\n\n        return global_best_position", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization with Differential Evolution for improved global search and fine-tuning capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "86b3e4f1-22cc-4fb2-97cc-bf4bb4405e19", "metadata": {"aucs": [0.4882472281863305, 0.5164996094393812, 0.49627912463063206, 0.5339702752982873, 0.5404857484433038, 0.547033222410221, 0.49399054113020424, 0.5367743327470891, 0.5119730119579462, 0.1706997127269757, 0.16635505076312052, 0.18446456584479554, 0.18604242012498118, 0.18385268429613089, 0.19889041587631473, 0.19350555897906274, 0.18935136805081465, 0.186113004482099, 0.1307654169093807, 0.0896874251953903, 0.1412118423293054, 0.12142484023944233, 0.08837419841250671, 0.10400118280198245, 0.0964554587419576, 0.11658723844656671, 0.11926491685202545, 0.08929049749518203, 0.09355381931055196, 0.09727303635479634, 0.09026961265237132, 0.09423101095621911, 0.09339318029108867, 0.08134358186533541, 0.08978638175382525, 0.0790833264319073, 0.9624677687815185, 0.9855801791358813, 0.9816224124392043, 0.9588006997707941, 0.9759509140344366, 0.9710092523361906, 0.9847789324109596, 0.9782110500998692, 0.98016966668225, 0.3034460677447628, 0.3070791946049275, 0.3162936841526668, 0.26956904150950545, 0.27971313253914787, 0.2897636724461585, 0.30055476618523735, 0.3091051582244504, 0.29971065338511116, 0.575103760195953, 0.6579369174912328, 0.5756957078252307, 0.578457448384498, 0.62268343346853, 0.5348743605197566, 0.5437377063519533, 0.5750864631031573, 0.6026443184059901, 0.19122557781747151, 0.219926728416182, 0.17708813534241585, 0.1523831002292707, 0.17127873663224114, 0.24081197620533124, 0.18821531399816682, 0.10537279412279565, 0.21402145621295277, 0.2046246795081199, 0.19412499079843515, 0.20112124180673951, 0.20074072515046604, 0.18249195134365226, 0.1905082713072752, 0.2089302453317663, 0.19436623916189255, 0.2049281654583116, 0.0068166536550172685, 0.0837911965861654, 0.050516084582435505, 0.08976494540162006, 0.024829806428101286, 0.059188024680768336, 0.07305783740295468, 0.0964648656103706, 0.05769154514049968, 0.16280677835660884, 0.13777513171727374, 0.1716677221194739, 0.16142186592296115, 0.1234805081916649, 0.1397229977283585, 0.1689893019576535, 0.19814437959424513, 0.10939187298388475, 0.03371722574371072, 0.01923355698663376, 0.005416925536914974, 0.04565091917775321, 0.05293169986076862, 0.0184420315537287, 0.04294472623437107, 0.05384869480282728, 0.06862652834993865, 0.1434727307465219, 0.13014516524304764, 0.14283094183897305, 0.15476437716028124, 0.14335469825078906, 0.15476551997128118, 0.15389314040201207, 0.14499099412110517, 0.1646586539936239, 0.42255470889347735, 0.46454075466293065, 0.44103809128390825, 0.4445627656988088, 0.47217832809756455, 0.45296131431367226, 0.44219202469859464, 0.44168740411218377, 0.44493214750241983, 0.11182782387379753, 0.11173558176568021, 0.10138240106614815, 0.12488674551975909, 0.10273332347253195, 0.0970848950327079, 0.10894600019138578, 0.1130670277428173, 0.11829577546665515, 0.14540727231836847, 0.28447483892739733, 0.26440216718424314, 0.1827169809011342, 0.1967818721167539, 0.1290231784956315, 0.22484703138983853, 0.2435070355954998, 0.14288332363901612, 0.3074153083721701, 0.3034971554251098, 0.323958818223814, 0.3218228418410899, 0.3013796916450162, 0.3152165178622156, 0.3027670634632387, 0.3207432053900766, 0.3102628188868207, 0.2426007391435272, 0.21945623775416667, 0.268208028565292, 0.24495150191609605, 0.22065384399611787, 0.2703326499446467, 0.2520514025458884, 0.2640574256321997, 0.23775578206788373, 0.22330900122434794, 0.20084061105721895, 0.20237536743761497, 0.19086571663572038, 0.20448237248981416, 0.1846514790920929, 0.18829689955191709, 0.22010501926862958, 0.20704392112805026, 0.19970469159745197, 0.18850720732108373, 0.18254084549289917, 0.25912294469449937, 0.19604031895930163, 0.17935684116599004, 0.19282140363331945, 0.19175608739215821, 0.18992982248363355, 0.5541751596749267, 0.18046459927013492, 0.7235462915111932, 0.5502756818579533, 0.19248006472901402, 0.6572431188512124, 0.49559553012688085, 0.17391510325816872, 0.6707153637156391, 0.6286220117657617, 0.16964131868621912, 0.1908374933944862, 0.587157252836209, 0.5686223380915884, 0.6500050281667298, 0.20784635578758293, 0.12598989547462092, 0.6967624706510098, 0.1691155437474563, 0.19560187661169282, 0.1967090441389101, 0.17095352215511195, 0.1891195529401717, 0.1773154045473122, 0.18015985376441856, 0.1865000452760659, 0.18157214803937605, 0.07491902707087594, 0.07967315296110045, 0.07822741346497764, 0.0905098924597636, 0.08109982530064042, 0.08927050950122395, 0.08599735345014836, 0.07840666898783799, 0.07588224010329336]}, "mutation_prompt": null}
{"id": "61c2ebc6-7e32-4aa4-9a9c-dd279ada1d56", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 100\n        self.inertia_weight = 0.5\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros_like(particles)\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([float('inf')] * self.population_size)\n        \n        # Evaluate initial population\n        for i in range(self.population_size):\n            score = func(particles[i])\n            personal_best_scores[i] = score\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            # PSO update\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coef * r1 * (personal_best_positions[i] - particles[i])\n                                 + self.social_coef * r2 * (global_best_position - particles[i]))\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n            # Differential Evolution update with crossover\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = particles[np.random.choice(idxs, 3, replace=False)]\n                mutant_vector = a + self.mutation_factor * (b - c)\n                trial_vector = np.copy(particles[i])\n                \n                crossover_mask = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover_mask] = mutant_vector[crossover_mask]\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_score = func(trial_vector)\n                eval_count += 1\n\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial_vector\n                    personal_best_scores[i] = trial_score\n\n                # Update global best\n                if trial_score < personal_best_scores[global_best_index]:\n                    global_best_position = trial_vector\n                    global_best_index = i\n\n        return global_best_position", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization with Differential Evolution for improved global search and fine-tuning capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "86b3e4f1-22cc-4fb2-97cc-bf4bb4405e19", "metadata": {"aucs": [0.4882472281863305, 0.5164996094393812, 0.49627912463063206, 0.5339702752982873, 0.5404857484433038, 0.547033222410221, 0.49399054113020424, 0.5367743327470891, 0.5119730119579462, 0.1706997127269757, 0.16635505076312052, 0.18446456584479554, 0.18604242012498118, 0.18385268429613089, 0.19889041587631473, 0.19350555897906274, 0.18935136805081465, 0.186113004482099, 0.1307654169093807, 0.0896874251953903, 0.1412118423293054, 0.12142484023944233, 0.08837419841250671, 0.10400118280198245, 0.0964554587419576, 0.11658723844656671, 0.11926491685202545, 0.08929049749518203, 0.09355381931055196, 0.09727303635479634, 0.09026961265237132, 0.09423101095621911, 0.09339318029108867, 0.08134358186533541, 0.08978638175382525, 0.0790833264319073, 0.9624677687815185, 0.9855801791358813, 0.9816224124392043, 0.9588006997707941, 0.9759509140344366, 0.9710092523361906, 0.9847789324109596, 0.9782110500998692, 0.98016966668225, 0.3034460677447628, 0.3070791946049275, 0.3162936841526668, 0.26956904150950545, 0.27971313253914787, 0.2897636724461585, 0.30055476618523735, 0.3091051582244504, 0.29971065338511116, 0.575103760195953, 0.6579369174912328, 0.5756957078252307, 0.578457448384498, 0.62268343346853, 0.5348743605197566, 0.5437377063519533, 0.5750864631031573, 0.6026443184059901, 0.19122557781747151, 0.219926728416182, 0.17708813534241585, 0.1523831002292707, 0.17127873663224114, 0.24081197620533124, 0.18821531399816682, 0.10537279412279565, 0.21402145621295277, 0.2046246795081199, 0.19412499079843515, 0.20112124180673951, 0.20074072515046604, 0.18249195134365226, 0.1905082713072752, 0.2089302453317663, 0.19436623916189255, 0.2049281654583116, 0.0068166536550172685, 0.0837911965861654, 0.050516084582435505, 0.08976494540162006, 0.024829806428101286, 0.059188024680768336, 0.07305783740295468, 0.0964648656103706, 0.05769154514049968, 0.16280677835660884, 0.13777513171727374, 0.1716677221194739, 0.16142186592296115, 0.1234805081916649, 0.1397229977283585, 0.1689893019576535, 0.19814437959424513, 0.10939187298388475, 0.03371722574371072, 0.01923355698663376, 0.005416925536914974, 0.04565091917775321, 0.05293169986076862, 0.0184420315537287, 0.04294472623437107, 0.05384869480282728, 0.06862652834993865, 0.1434727307465219, 0.13014516524304764, 0.14283094183897305, 0.15476437716028124, 0.14335469825078906, 0.15476551997128118, 0.15389314040201207, 0.14499099412110517, 0.1646586539936239, 0.42255470889347735, 0.46454075466293065, 0.44103809128390825, 0.4445627656988088, 0.47217832809756455, 0.45296131431367226, 0.44219202469859464, 0.44168740411218377, 0.44493214750241983, 0.11182782387379753, 0.11173558176568021, 0.10138240106614815, 0.12488674551975909, 0.10273332347253195, 0.0970848950327079, 0.10894600019138578, 0.1130670277428173, 0.11829577546665515, 0.14540727231836847, 0.28447483892739733, 0.26440216718424314, 0.1827169809011342, 0.1967818721167539, 0.1290231784956315, 0.22484703138983853, 0.2435070355954998, 0.14288332363901612, 0.3074153083721701, 0.3034971554251098, 0.323958818223814, 0.3218228418410899, 0.3013796916450162, 0.3152165178622156, 0.3027670634632387, 0.3207432053900766, 0.3102628188868207, 0.2426007391435272, 0.21945623775416667, 0.268208028565292, 0.24495150191609605, 0.22065384399611787, 0.2703326499446467, 0.2520514025458884, 0.2640574256321997, 0.23775578206788373, 0.22330900122434794, 0.20084061105721895, 0.20237536743761497, 0.19086571663572038, 0.20448237248981416, 0.1846514790920929, 0.18829689955191709, 0.22010501926862958, 0.20704392112805026, 0.19970469159745197, 0.18850720732108373, 0.18254084549289917, 0.25912294469449937, 0.19604031895930163, 0.17935684116599004, 0.19282140363331945, 0.19175608739215821, 0.18992982248363355, 0.5541751596749267, 0.18046459927013492, 0.7235462915111932, 0.5502756818579533, 0.19248006472901402, 0.6572431188512124, 0.49559553012688085, 0.17391510325816872, 0.6707153637156391, 0.6286220117657617, 0.16964131868621912, 0.1908374933944862, 0.587157252836209, 0.5686223380915884, 0.6500050281667298, 0.20784635578758293, 0.12598989547462092, 0.6967624706510098, 0.1691155437474563, 0.19560187661169282, 0.1967090441389101, 0.17095352215511195, 0.1891195529401717, 0.1773154045473122, 0.18015985376441856, 0.1865000452760659, 0.18157214803937605, 0.07491902707087594, 0.07967315296110045, 0.07822741346497764, 0.0905098924597636, 0.08109982530064042, 0.08927050950122395, 0.08599735345014836, 0.07840666898783799, 0.07588224010329336]}, "mutation_prompt": null}
{"id": "ab99fbbc-f8a3-4aff-b346-de29b2f5b5a2", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 100\n        self.inertia_weight = 0.5\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros_like(particles)\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([float('inf')] * self.population_size)\n        \n        # Evaluate initial population\n        for i in range(self.population_size):\n            score = func(particles[i])\n            personal_best_scores[i] = score\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            # PSO update\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coef * r1 * (personal_best_positions[i] - particles[i])\n                                 + self.social_coef * r2 * (global_best_position - particles[i]))\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n            # Differential Evolution update with crossover\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = particles[np.random.choice(idxs, 3, replace=False)]\n                mutant_vector = a + self.mutation_factor * (b - c)\n                trial_vector = np.copy(particles[i])\n                \n                crossover_mask = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover_mask] = mutant_vector[crossover_mask]\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_score = func(trial_vector)\n                eval_count += 1\n\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial_vector\n                    personal_best_scores[i] = trial_score\n\n                # Update global best\n                if trial_score < personal_best_scores[global_best_index]:\n                    global_best_position = trial_vector\n                    global_best_index = i\n\n        return global_best_position", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization with Differential Evolution for improved global search and fine-tuning capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "86b3e4f1-22cc-4fb2-97cc-bf4bb4405e19", "metadata": {"aucs": [0.4882472281863305, 0.5164996094393812, 0.49627912463063206, 0.5339702752982873, 0.5404857484433038, 0.547033222410221, 0.49399054113020424, 0.5367743327470891, 0.5119730119579462, 0.1706997127269757, 0.16635505076312052, 0.18446456584479554, 0.18604242012498118, 0.18385268429613089, 0.19889041587631473, 0.19350555897906274, 0.18935136805081465, 0.186113004482099, 0.1307654169093807, 0.0896874251953903, 0.1412118423293054, 0.12142484023944233, 0.08837419841250671, 0.10400118280198245, 0.0964554587419576, 0.11658723844656671, 0.11926491685202545, 0.08929049749518203, 0.09355381931055196, 0.09727303635479634, 0.09026961265237132, 0.09423101095621911, 0.09339318029108867, 0.08134358186533541, 0.08978638175382525, 0.0790833264319073, 0.9624677687815185, 0.9855801791358813, 0.9816224124392043, 0.9588006997707941, 0.9759509140344366, 0.9710092523361906, 0.9847789324109596, 0.9782110500998692, 0.98016966668225, 0.3034460677447628, 0.3070791946049275, 0.3162936841526668, 0.26956904150950545, 0.27971313253914787, 0.2897636724461585, 0.30055476618523735, 0.3091051582244504, 0.29971065338511116, 0.575103760195953, 0.6579369174912328, 0.5756957078252307, 0.578457448384498, 0.62268343346853, 0.5348743605197566, 0.5437377063519533, 0.5750864631031573, 0.6026443184059901, 0.19122557781747151, 0.219926728416182, 0.17708813534241585, 0.1523831002292707, 0.17127873663224114, 0.24081197620533124, 0.18821531399816682, 0.10537279412279565, 0.21402145621295277, 0.2046246795081199, 0.19412499079843515, 0.20112124180673951, 0.20074072515046604, 0.18249195134365226, 0.1905082713072752, 0.2089302453317663, 0.19436623916189255, 0.2049281654583116, 0.0068166536550172685, 0.0837911965861654, 0.050516084582435505, 0.08976494540162006, 0.024829806428101286, 0.059188024680768336, 0.07305783740295468, 0.0964648656103706, 0.05769154514049968, 0.16280677835660884, 0.13777513171727374, 0.1716677221194739, 0.16142186592296115, 0.1234805081916649, 0.1397229977283585, 0.1689893019576535, 0.19814437959424513, 0.10939187298388475, 0.03371722574371072, 0.01923355698663376, 0.005416925536914974, 0.04565091917775321, 0.05293169986076862, 0.0184420315537287, 0.04294472623437107, 0.05384869480282728, 0.06862652834993865, 0.1434727307465219, 0.13014516524304764, 0.14283094183897305, 0.15476437716028124, 0.14335469825078906, 0.15476551997128118, 0.15389314040201207, 0.14499099412110517, 0.1646586539936239, 0.42255470889347735, 0.46454075466293065, 0.44103809128390825, 0.4445627656988088, 0.47217832809756455, 0.45296131431367226, 0.44219202469859464, 0.44168740411218377, 0.44493214750241983, 0.11182782387379753, 0.11173558176568021, 0.10138240106614815, 0.12488674551975909, 0.10273332347253195, 0.0970848950327079, 0.10894600019138578, 0.1130670277428173, 0.11829577546665515, 0.14540727231836847, 0.28447483892739733, 0.26440216718424314, 0.1827169809011342, 0.1967818721167539, 0.1290231784956315, 0.22484703138983853, 0.2435070355954998, 0.14288332363901612, 0.3074153083721701, 0.3034971554251098, 0.323958818223814, 0.3218228418410899, 0.3013796916450162, 0.3152165178622156, 0.3027670634632387, 0.3207432053900766, 0.3102628188868207, 0.2426007391435272, 0.21945623775416667, 0.268208028565292, 0.24495150191609605, 0.22065384399611787, 0.2703326499446467, 0.2520514025458884, 0.2640574256321997, 0.23775578206788373, 0.22330900122434794, 0.20084061105721895, 0.20237536743761497, 0.19086571663572038, 0.20448237248981416, 0.1846514790920929, 0.18829689955191709, 0.22010501926862958, 0.20704392112805026, 0.19970469159745197, 0.18850720732108373, 0.18254084549289917, 0.25912294469449937, 0.19604031895930163, 0.17935684116599004, 0.19282140363331945, 0.19175608739215821, 0.18992982248363355, 0.5541751596749267, 0.18046459927013492, 0.7235462915111932, 0.5502756818579533, 0.19248006472901402, 0.6572431188512124, 0.49559553012688085, 0.17391510325816872, 0.6707153637156391, 0.6286220117657617, 0.16964131868621912, 0.1908374933944862, 0.587157252836209, 0.5686223380915884, 0.6500050281667298, 0.20784635578758293, 0.12598989547462092, 0.6967624706510098, 0.1691155437474563, 0.19560187661169282, 0.1967090441389101, 0.17095352215511195, 0.1891195529401717, 0.1773154045473122, 0.18015985376441856, 0.1865000452760659, 0.18157214803937605, 0.07491902707087594, 0.07967315296110045, 0.07822741346497764, 0.0905098924597636, 0.08109982530064042, 0.08927050950122395, 0.08599735345014836, 0.07840666898783799, 0.07588224010329336]}, "mutation_prompt": null}
{"id": "bb5d23fe-a661-4634-b8b1-5a7fc4946423", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 100\n        self.inertia_weight = 0.5\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros_like(particles)\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([float('inf')] * self.population_size)\n        \n        # Evaluate initial population\n        for i in range(self.population_size):\n            score = func(particles[i])\n            personal_best_scores[i] = score\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            # PSO update\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coef * r1 * (personal_best_positions[i] - particles[i])\n                                 + self.social_coef * r2 * (global_best_position - particles[i]))\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n            # Differential Evolution update with crossover\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = particles[np.random.choice(idxs, 3, replace=False)]\n                mutant_vector = a + self.mutation_factor * (b - c)\n                trial_vector = np.copy(particles[i])\n                \n                crossover_mask = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover_mask] = mutant_vector[crossover_mask]\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_score = func(trial_vector)\n                eval_count += 1\n\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial_vector\n                    personal_best_scores[i] = trial_score\n\n                # Update global best\n                if trial_score < personal_best_scores[global_best_index]:\n                    global_best_position = trial_vector\n                    global_best_index = i\n\n        return global_best_position", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization with Differential Evolution for improved global search and fine-tuning capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "86b3e4f1-22cc-4fb2-97cc-bf4bb4405e19", "metadata": {"aucs": [0.4882472281863305, 0.5164996094393812, 0.49627912463063206, 0.5339702752982873, 0.5404857484433038, 0.547033222410221, 0.49399054113020424, 0.5367743327470891, 0.5119730119579462, 0.1706997127269757, 0.16635505076312052, 0.18446456584479554, 0.18604242012498118, 0.18385268429613089, 0.19889041587631473, 0.19350555897906274, 0.18935136805081465, 0.186113004482099, 0.1307654169093807, 0.0896874251953903, 0.1412118423293054, 0.12142484023944233, 0.08837419841250671, 0.10400118280198245, 0.0964554587419576, 0.11658723844656671, 0.11926491685202545, 0.08929049749518203, 0.09355381931055196, 0.09727303635479634, 0.09026961265237132, 0.09423101095621911, 0.09339318029108867, 0.08134358186533541, 0.08978638175382525, 0.0790833264319073, 0.9624677687815185, 0.9855801791358813, 0.9816224124392043, 0.9588006997707941, 0.9759509140344366, 0.9710092523361906, 0.9847789324109596, 0.9782110500998692, 0.98016966668225, 0.3034460677447628, 0.3070791946049275, 0.3162936841526668, 0.26956904150950545, 0.27971313253914787, 0.2897636724461585, 0.30055476618523735, 0.3091051582244504, 0.29971065338511116, 0.575103760195953, 0.6579369174912328, 0.5756957078252307, 0.578457448384498, 0.62268343346853, 0.5348743605197566, 0.5437377063519533, 0.5750864631031573, 0.6026443184059901, 0.19122557781747151, 0.219926728416182, 0.17708813534241585, 0.1523831002292707, 0.17127873663224114, 0.24081197620533124, 0.18821531399816682, 0.10537279412279565, 0.21402145621295277, 0.2046246795081199, 0.19412499079843515, 0.20112124180673951, 0.20074072515046604, 0.18249195134365226, 0.1905082713072752, 0.2089302453317663, 0.19436623916189255, 0.2049281654583116, 0.0068166536550172685, 0.0837911965861654, 0.050516084582435505, 0.08976494540162006, 0.024829806428101286, 0.059188024680768336, 0.07305783740295468, 0.0964648656103706, 0.05769154514049968, 0.16280677835660884, 0.13777513171727374, 0.1716677221194739, 0.16142186592296115, 0.1234805081916649, 0.1397229977283585, 0.1689893019576535, 0.19814437959424513, 0.10939187298388475, 0.03371722574371072, 0.01923355698663376, 0.005416925536914974, 0.04565091917775321, 0.05293169986076862, 0.0184420315537287, 0.04294472623437107, 0.05384869480282728, 0.06862652834993865, 0.1434727307465219, 0.13014516524304764, 0.14283094183897305, 0.15476437716028124, 0.14335469825078906, 0.15476551997128118, 0.15389314040201207, 0.14499099412110517, 0.1646586539936239, 0.42255470889347735, 0.46454075466293065, 0.44103809128390825, 0.4445627656988088, 0.47217832809756455, 0.45296131431367226, 0.44219202469859464, 0.44168740411218377, 0.44493214750241983, 0.11182782387379753, 0.11173558176568021, 0.10138240106614815, 0.12488674551975909, 0.10273332347253195, 0.0970848950327079, 0.10894600019138578, 0.1130670277428173, 0.11829577546665515, 0.14540727231836847, 0.28447483892739733, 0.26440216718424314, 0.1827169809011342, 0.1967818721167539, 0.1290231784956315, 0.22484703138983853, 0.2435070355954998, 0.14288332363901612, 0.3074153083721701, 0.3034971554251098, 0.323958818223814, 0.3218228418410899, 0.3013796916450162, 0.3152165178622156, 0.3027670634632387, 0.3207432053900766, 0.3102628188868207, 0.2426007391435272, 0.21945623775416667, 0.268208028565292, 0.24495150191609605, 0.22065384399611787, 0.2703326499446467, 0.2520514025458884, 0.2640574256321997, 0.23775578206788373, 0.22330900122434794, 0.20084061105721895, 0.20237536743761497, 0.19086571663572038, 0.20448237248981416, 0.1846514790920929, 0.18829689955191709, 0.22010501926862958, 0.20704392112805026, 0.19970469159745197, 0.18850720732108373, 0.18254084549289917, 0.25912294469449937, 0.19604031895930163, 0.17935684116599004, 0.19282140363331945, 0.19175608739215821, 0.18992982248363355, 0.5541751596749267, 0.18046459927013492, 0.7235462915111932, 0.5502756818579533, 0.19248006472901402, 0.6572431188512124, 0.49559553012688085, 0.17391510325816872, 0.6707153637156391, 0.6286220117657617, 0.16964131868621912, 0.1908374933944862, 0.587157252836209, 0.5686223380915884, 0.6500050281667298, 0.20784635578758293, 0.12598989547462092, 0.6967624706510098, 0.1691155437474563, 0.19560187661169282, 0.1967090441389101, 0.17095352215511195, 0.1891195529401717, 0.1773154045473122, 0.18015985376441856, 0.1865000452760659, 0.18157214803937605, 0.07491902707087594, 0.07967315296110045, 0.07822741346497764, 0.0905098924597636, 0.08109982530064042, 0.08927050950122395, 0.08599735345014836, 0.07840666898783799, 0.07588224010329336]}, "mutation_prompt": null}
{"id": "a10c53f9-491b-44fd-bb12-2a9a3e6bdad2", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 100\n        self.inertia_weight = 0.5\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros_like(particles)\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([float('inf')] * self.population_size)\n        \n        # Evaluate initial population\n        for i in range(self.population_size):\n            score = func(particles[i])\n            personal_best_scores[i] = score\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            # PSO update\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coef * r1 * (personal_best_positions[i] - particles[i])\n                                 + self.social_coef * r2 * (global_best_position - particles[i]))\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n            # Differential Evolution update with crossover\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = particles[np.random.choice(idxs, 3, replace=False)]\n                mutant_vector = a + self.mutation_factor * (b - c)\n                trial_vector = np.copy(particles[i])\n                \n                crossover_mask = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover_mask] = mutant_vector[crossover_mask]\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_score = func(trial_vector)\n                eval_count += 1\n\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial_vector\n                    personal_best_scores[i] = trial_score\n\n                # Update global best\n                if trial_score < personal_best_scores[global_best_index]:\n                    global_best_position = trial_vector\n                    global_best_index = i\n\n        return global_best_position", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization with Differential Evolution for improved global search and fine-tuning capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "86b3e4f1-22cc-4fb2-97cc-bf4bb4405e19", "metadata": {"aucs": [0.4882472281863305, 0.5164996094393812, 0.49627912463063206, 0.5339702752982873, 0.5404857484433038, 0.547033222410221, 0.49399054113020424, 0.5367743327470891, 0.5119730119579462, 0.1706997127269757, 0.16635505076312052, 0.18446456584479554, 0.18604242012498118, 0.18385268429613089, 0.19889041587631473, 0.19350555897906274, 0.18935136805081465, 0.186113004482099, 0.1307654169093807, 0.0896874251953903, 0.1412118423293054, 0.12142484023944233, 0.08837419841250671, 0.10400118280198245, 0.0964554587419576, 0.11658723844656671, 0.11926491685202545, 0.08929049749518203, 0.09355381931055196, 0.09727303635479634, 0.09026961265237132, 0.09423101095621911, 0.09339318029108867, 0.08134358186533541, 0.08978638175382525, 0.0790833264319073, 0.9624677687815185, 0.9855801791358813, 0.9816224124392043, 0.9588006997707941, 0.9759509140344366, 0.9710092523361906, 0.9847789324109596, 0.9782110500998692, 0.98016966668225, 0.3034460677447628, 0.3070791946049275, 0.3162936841526668, 0.26956904150950545, 0.27971313253914787, 0.2897636724461585, 0.30055476618523735, 0.3091051582244504, 0.29971065338511116, 0.575103760195953, 0.6579369174912328, 0.5756957078252307, 0.578457448384498, 0.62268343346853, 0.5348743605197566, 0.5437377063519533, 0.5750864631031573, 0.6026443184059901, 0.19122557781747151, 0.219926728416182, 0.17708813534241585, 0.1523831002292707, 0.17127873663224114, 0.24081197620533124, 0.18821531399816682, 0.10537279412279565, 0.21402145621295277, 0.2046246795081199, 0.19412499079843515, 0.20112124180673951, 0.20074072515046604, 0.18249195134365226, 0.1905082713072752, 0.2089302453317663, 0.19436623916189255, 0.2049281654583116, 0.0068166536550172685, 0.0837911965861654, 0.050516084582435505, 0.08976494540162006, 0.024829806428101286, 0.059188024680768336, 0.07305783740295468, 0.0964648656103706, 0.05769154514049968, 0.16280677835660884, 0.13777513171727374, 0.1716677221194739, 0.16142186592296115, 0.1234805081916649, 0.1397229977283585, 0.1689893019576535, 0.19814437959424513, 0.10939187298388475, 0.03371722574371072, 0.01923355698663376, 0.005416925536914974, 0.04565091917775321, 0.05293169986076862, 0.0184420315537287, 0.04294472623437107, 0.05384869480282728, 0.06862652834993865, 0.1434727307465219, 0.13014516524304764, 0.14283094183897305, 0.15476437716028124, 0.14335469825078906, 0.15476551997128118, 0.15389314040201207, 0.14499099412110517, 0.1646586539936239, 0.42255470889347735, 0.46454075466293065, 0.44103809128390825, 0.4445627656988088, 0.47217832809756455, 0.45296131431367226, 0.44219202469859464, 0.44168740411218377, 0.44493214750241983, 0.11182782387379753, 0.11173558176568021, 0.10138240106614815, 0.12488674551975909, 0.10273332347253195, 0.0970848950327079, 0.10894600019138578, 0.1130670277428173, 0.11829577546665515, 0.14540727231836847, 0.28447483892739733, 0.26440216718424314, 0.1827169809011342, 0.1967818721167539, 0.1290231784956315, 0.22484703138983853, 0.2435070355954998, 0.14288332363901612, 0.3074153083721701, 0.3034971554251098, 0.323958818223814, 0.3218228418410899, 0.3013796916450162, 0.3152165178622156, 0.3027670634632387, 0.3207432053900766, 0.3102628188868207, 0.2426007391435272, 0.21945623775416667, 0.268208028565292, 0.24495150191609605, 0.22065384399611787, 0.2703326499446467, 0.2520514025458884, 0.2640574256321997, 0.23775578206788373, 0.22330900122434794, 0.20084061105721895, 0.20237536743761497, 0.19086571663572038, 0.20448237248981416, 0.1846514790920929, 0.18829689955191709, 0.22010501926862958, 0.20704392112805026, 0.19970469159745197, 0.18850720732108373, 0.18254084549289917, 0.25912294469449937, 0.19604031895930163, 0.17935684116599004, 0.19282140363331945, 0.19175608739215821, 0.18992982248363355, 0.5541751596749267, 0.18046459927013492, 0.7235462915111932, 0.5502756818579533, 0.19248006472901402, 0.6572431188512124, 0.49559553012688085, 0.17391510325816872, 0.6707153637156391, 0.6286220117657617, 0.16964131868621912, 0.1908374933944862, 0.587157252836209, 0.5686223380915884, 0.6500050281667298, 0.20784635578758293, 0.12598989547462092, 0.6967624706510098, 0.1691155437474563, 0.19560187661169282, 0.1967090441389101, 0.17095352215511195, 0.1891195529401717, 0.1773154045473122, 0.18015985376441856, 0.1865000452760659, 0.18157214803937605, 0.07491902707087594, 0.07967315296110045, 0.07822741346497764, 0.0905098924597636, 0.08109982530064042, 0.08927050950122395, 0.08599735345014836, 0.07840666898783799, 0.07588224010329336]}, "mutation_prompt": null}
{"id": "c4611777-c3e1-429d-a777-f9d2ca63d298", "solution": "import numpy as np\n\nclass OptimizedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 80  # Reduced population for efficiency\n        self.inertia_weight = 0.7  # Adaptive inertia weight\n        self.cognitive_coef = 1.7  # Adjusted cognitive coefficient\n        self.social_coef = 1.3  # Adjusted social coefficient\n        self.mutation_factor = 0.85  # Slightly increased mutation factor\n        self.crossover_prob = 0.8  # Slightly lowered crossover probability\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros_like(particles)\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n\n        # Evaluate initial population\n        personal_best_scores = np.apply_along_axis(func, 1, particles)\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            # PSO update with adaptive inertia\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coef * r1 * (personal_best_positions[i] - particles[i])\n                                 + self.social_coef * r2 * (global_best_position - particles[i]))\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n            # Differential Evolution update with crossover\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = particles[np.random.choice(idxs, 3, replace=False)]\n                mutant_vector = a + self.mutation_factor * (b - c)\n                trial_vector = np.copy(particles[i])\n                \n                crossover_mask = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover_mask] = mutant_vector[crossover_mask]\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_score = func(trial_vector)\n                eval_count += 1\n\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial_vector\n                    personal_best_scores[i] = trial_score\n\n                # Update global best\n                if trial_score < personal_best_scores[global_best_index]:\n                    global_best_position = trial_vector\n                    global_best_index = i\n\n        return global_best_position", "name": "OptimizedHybridPSODE", "description": "An optimized variant of HybridPSODE with adaptive parameters and improved loop efficiency for enhanced convergence.", "configspace": "", "generation": 65, "fitness": 0.19403723101952305, "feedback": "The algorithm OptimizedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.19.", "error": "", "parent_id": "86b3e4f1-22cc-4fb2-97cc-bf4bb4405e19", "metadata": {"aucs": [0.39770515585247335, 0.3626733011133484, 0.3572296981666161, 0.4253931595415025, 0.42317943905684374, 0.4166827055142225, 0.3895379248540364, 0.3727636842331681, 0.38607955973027563, 0.10116001864912127, 0.07127973170359403, 0.07543068214523296, 0.08681184457352442, 0.06741826990108835, 0.08529736310943592, 0.10125022643461101, 0.08283166421165356, 0.09120073615885416, 0.09202417176699751, 0.0925784267018156, 0.08587012881075518, 0.08479454352475968, 0.07974833247665536, 0.08605466860686573, 0.09315317518756128, 0.09292335125808637, 0.09832729062842338, 0.08834729468897973, 0.07030853244181123, 0.08111878882691548, 0.07656960947602076, 0.07796919105684241, 0.06671271473457674, 0.07183056344964112, 0.08220744314889139, 0.08145284698573718, 0.9765174832448636, 0.9891030233629557, 0.9781341060148031, 0.9745273028874892, 0.9782257154100327, 0.9703789480833142, 0.9818610647251922, 0.9847483801999886, 0.9834203513827267, 0.21074372390970864, 0.1950973553501777, 0.16467423479701537, 0.19559933668618046, 0.1916570674638567, 0.18605443592910187, 0.21883927880960696, 0.21029510726381173, 0.18034190264877215, 0.3642644012319305, 0.255479365207708, 0.25409439346529084, 0.2592142264760281, 0.29503757348026016, 0.25589582482380957, 0.2694029722153113, 0.2700130781437209, 0.27010916973242616, 0.12029738352430408, 0.11430235237280462, 0.12286853468074077, 0.12519931372320936, 0.1390434070027864, 0.12654360364137462, 0.1270910194853645, 0.14277546143202724, 0.10164419314455886, 0.12245343947051734, 0.09760686753241976, 0.10425366057457941, 0.11396186306952882, 0.12414537161156258, 0.12431792210896597, 0.11300444013267985, 0.12140259162540257, 0.1244527126645838, 0.014571228551071402, 0.02566544262394055, 0.003242379412372931, 0.017840472191804846, 0.0014449594609026173, 9.999999999998899e-05, 0.0008172246514935866, 9.999999999998899e-05, 9.999999999998899e-05, 0.11005394030874938, 0.058425611002943856, 0.07020904624563373, 0.07778341198226868, 0.07417724925367553, 0.07782800008915869, 0.06320711694026215, 0.04737234026181736, 0.0868258795415986, 0.0005052808324282898, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07085964171085068, 0.06803108392606882, 0.07059702755470132, 0.08102543704654641, 0.09322906320032165, 0.06519175183905768, 0.08462839750804729, 0.06835394583211363, 0.07649267800555115, 0.4016365773021884, 0.3452836044253864, 0.3511559774394728, 0.3775278797869055, 0.3534190066486078, 0.35372595633545567, 0.3534716912346195, 0.34187054405017014, 0.3624871287752254, 0.08978771829972543, 0.09020803616064099, 0.08737604874905336, 0.10399432988766333, 0.07562846356386488, 0.08192462017330926, 0.08028657583221777, 0.09891801467478001, 0.08227810795815971, 0.1774839591503149, 0.14141392951026177, 0.15093280652109042, 0.1385172415830923, 0.13489042273252672, 0.13902981450018748, 0.15507526599071841, 0.13488312328087226, 0.1523151402593983, 0.24014218824228595, 0.25033025616059223, 0.25152516929092716, 0.24382184453729705, 0.25472016616970705, 0.2464189436941504, 0.25024706189039947, 0.2727973790858058, 0.24273764210338544, 0.1809159476404305, 0.1767725056669558, 0.20561972578850918, 0.17824658858360576, 0.17881285195370455, 0.17480816918088726, 0.1995216127225944, 0.19091730031926335, 0.17243484343394588, 0.19710881731522345, 0.1800340846852534, 0.19824054560754845, 0.19651397495477518, 0.20128998823982802, 0.18518064660851885, 0.20615367709377974, 0.20645956050460657, 0.2266514728610174, 0.1760054690238727, 0.1848203846006592, 0.19210133517896488, 0.17599958774533986, 0.1817201816225742, 0.1747240514072822, 0.16979962654773917, 0.16924339661024423, 0.169880635487068, 0.14457293286041373, 0.17870965740366662, 0.48561915704861724, 0.17155659836581494, 0.18773088996459897, 0.16569922687238847, 0.1387908483140825, 0.3317949600873048, 0.39160411059286226, 0.38273209816104614, 0.20365038277869507, 0.2916738284781656, 0.30093163508131204, 0.16304081613706478, 0.13916061625362786, 0.2034066646990359, 0.2017632731014728, 0.3938265708590686, 0.19380382106758276, 0.20046808762253832, 0.17941224203367767, 0.18528466374766672, 0.1867124133380278, 0.19243405601425734, 0.18546627330930987, 0.18689988061753826, 0.1845147889294485, 0.07901839317586112, 0.06266895559831787, 0.07616739570373376, 0.06847736631374846, 0.07791045595824486, 0.0698204106807474, 0.07463522131169742, 0.06755560245760428, 0.07179917845527362]}, "mutation_prompt": null}
{"id": "5b5806dc-69a8-4c6a-b0fa-fecbf37da7cf", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 100\n        self.inertia_weight = 0.5\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros_like(particles)\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([float('inf')] * self.population_size)\n        \n        # Evaluate initial population\n        for i in range(self.population_size):\n            score = func(particles[i])\n            personal_best_scores[i] = score\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            # PSO update\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coef * r1 * (personal_best_positions[i] - particles[i])\n                                 + self.social_coef * r2 * (global_best_position - particles[i]))\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n            # Differential Evolution update with crossover\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = particles[np.random.choice(idxs, 3, replace=False)]\n                mutant_vector = a + self.mutation_factor * (b - c)\n                trial_vector = np.copy(particles[i])\n                \n                crossover_mask = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover_mask] = mutant_vector[crossover_mask]\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_score = func(trial_vector)\n                eval_count += 1\n\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial_vector\n                    personal_best_scores[i] = trial_score\n\n                # Update global best\n                if trial_score < personal_best_scores[global_best_index]:\n                    global_best_position = trial_vector\n                    global_best_index = i\n\n        return global_best_position", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization with Differential Evolution for improved global search and fine-tuning capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "86b3e4f1-22cc-4fb2-97cc-bf4bb4405e19", "metadata": {"aucs": [0.4882472281863305, 0.5164996094393812, 0.49627912463063206, 0.5339702752982873, 0.5404857484433038, 0.547033222410221, 0.49399054113020424, 0.5367743327470891, 0.5119730119579462, 0.1706997127269757, 0.16635505076312052, 0.18446456584479554, 0.18604242012498118, 0.18385268429613089, 0.19889041587631473, 0.19350555897906274, 0.18935136805081465, 0.186113004482099, 0.1307654169093807, 0.0896874251953903, 0.1412118423293054, 0.12142484023944233, 0.08837419841250671, 0.10400118280198245, 0.0964554587419576, 0.11658723844656671, 0.11926491685202545, 0.08929049749518203, 0.09355381931055196, 0.09727303635479634, 0.09026961265237132, 0.09423101095621911, 0.09339318029108867, 0.08134358186533541, 0.08978638175382525, 0.0790833264319073, 0.9624677687815185, 0.9855801791358813, 0.9816224124392043, 0.9588006997707941, 0.9759509140344366, 0.9710092523361906, 0.9847789324109596, 0.9782110500998692, 0.98016966668225, 0.3034460677447628, 0.3070791946049275, 0.3162936841526668, 0.26956904150950545, 0.27971313253914787, 0.2897636724461585, 0.30055476618523735, 0.3091051582244504, 0.29971065338511116, 0.575103760195953, 0.6579369174912328, 0.5756957078252307, 0.578457448384498, 0.62268343346853, 0.5348743605197566, 0.5437377063519533, 0.5750864631031573, 0.6026443184059901, 0.19122557781747151, 0.219926728416182, 0.17708813534241585, 0.1523831002292707, 0.17127873663224114, 0.24081197620533124, 0.18821531399816682, 0.10537279412279565, 0.21402145621295277, 0.2046246795081199, 0.19412499079843515, 0.20112124180673951, 0.20074072515046604, 0.18249195134365226, 0.1905082713072752, 0.2089302453317663, 0.19436623916189255, 0.2049281654583116, 0.0068166536550172685, 0.0837911965861654, 0.050516084582435505, 0.08976494540162006, 0.024829806428101286, 0.059188024680768336, 0.07305783740295468, 0.0964648656103706, 0.05769154514049968, 0.16280677835660884, 0.13777513171727374, 0.1716677221194739, 0.16142186592296115, 0.1234805081916649, 0.1397229977283585, 0.1689893019576535, 0.19814437959424513, 0.10939187298388475, 0.03371722574371072, 0.01923355698663376, 0.005416925536914974, 0.04565091917775321, 0.05293169986076862, 0.0184420315537287, 0.04294472623437107, 0.05384869480282728, 0.06862652834993865, 0.1434727307465219, 0.13014516524304764, 0.14283094183897305, 0.15476437716028124, 0.14335469825078906, 0.15476551997128118, 0.15389314040201207, 0.14499099412110517, 0.1646586539936239, 0.42255470889347735, 0.46454075466293065, 0.44103809128390825, 0.4445627656988088, 0.47217832809756455, 0.45296131431367226, 0.44219202469859464, 0.44168740411218377, 0.44493214750241983, 0.11182782387379753, 0.11173558176568021, 0.10138240106614815, 0.12488674551975909, 0.10273332347253195, 0.0970848950327079, 0.10894600019138578, 0.1130670277428173, 0.11829577546665515, 0.14540727231836847, 0.28447483892739733, 0.26440216718424314, 0.1827169809011342, 0.1967818721167539, 0.1290231784956315, 0.22484703138983853, 0.2435070355954998, 0.14288332363901612, 0.3074153083721701, 0.3034971554251098, 0.323958818223814, 0.3218228418410899, 0.3013796916450162, 0.3152165178622156, 0.3027670634632387, 0.3207432053900766, 0.3102628188868207, 0.2426007391435272, 0.21945623775416667, 0.268208028565292, 0.24495150191609605, 0.22065384399611787, 0.2703326499446467, 0.2520514025458884, 0.2640574256321997, 0.23775578206788373, 0.22330900122434794, 0.20084061105721895, 0.20237536743761497, 0.19086571663572038, 0.20448237248981416, 0.1846514790920929, 0.18829689955191709, 0.22010501926862958, 0.20704392112805026, 0.19970469159745197, 0.18850720732108373, 0.18254084549289917, 0.25912294469449937, 0.19604031895930163, 0.17935684116599004, 0.19282140363331945, 0.19175608739215821, 0.18992982248363355, 0.5541751596749267, 0.18046459927013492, 0.7235462915111932, 0.5502756818579533, 0.19248006472901402, 0.6572431188512124, 0.49559553012688085, 0.17391510325816872, 0.6707153637156391, 0.6286220117657617, 0.16964131868621912, 0.1908374933944862, 0.587157252836209, 0.5686223380915884, 0.6500050281667298, 0.20784635578758293, 0.12598989547462092, 0.6967624706510098, 0.1691155437474563, 0.19560187661169282, 0.1967090441389101, 0.17095352215511195, 0.1891195529401717, 0.1773154045473122, 0.18015985376441856, 0.1865000452760659, 0.18157214803937605, 0.07491902707087594, 0.07967315296110045, 0.07822741346497764, 0.0905098924597636, 0.08109982530064042, 0.08927050950122395, 0.08599735345014836, 0.07840666898783799, 0.07588224010329336]}, "mutation_prompt": null}
{"id": "acbeb8ca-4116-46a4-9104-f84a410cfd6d", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 100\n        self.inertia_weight = 0.5\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros_like(particles)\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([float('inf')] * self.population_size)\n        \n        # Evaluate initial population\n        for i in range(self.population_size):\n            score = func(particles[i])\n            personal_best_scores[i] = score\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            # PSO update\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coef * r1 * (personal_best_positions[i] - particles[i])\n                                 + self.social_coef * r2 * (global_best_position - particles[i]))\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n            # Differential Evolution update with crossover\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = particles[np.random.choice(idxs, 3, replace=False)]\n                mutant_vector = a + self.mutation_factor * (b - c)\n                trial_vector = np.copy(particles[i])\n                \n                crossover_mask = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover_mask] = mutant_vector[crossover_mask]\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_score = func(trial_vector)\n                eval_count += 1\n\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial_vector\n                    personal_best_scores[i] = trial_score\n\n                # Update global best\n                if trial_score < personal_best_scores[global_best_index]:\n                    global_best_position = trial_vector\n                    global_best_index = i\n\n        return global_best_position", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization with Differential Evolution for improved global search and fine-tuning capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "86b3e4f1-22cc-4fb2-97cc-bf4bb4405e19", "metadata": {"aucs": [0.4882472281863305, 0.5164996094393812, 0.49627912463063206, 0.5339702752982873, 0.5404857484433038, 0.547033222410221, 0.49399054113020424, 0.5367743327470891, 0.5119730119579462, 0.1706997127269757, 0.16635505076312052, 0.18446456584479554, 0.18604242012498118, 0.18385268429613089, 0.19889041587631473, 0.19350555897906274, 0.18935136805081465, 0.186113004482099, 0.1307654169093807, 0.0896874251953903, 0.1412118423293054, 0.12142484023944233, 0.08837419841250671, 0.10400118280198245, 0.0964554587419576, 0.11658723844656671, 0.11926491685202545, 0.08929049749518203, 0.09355381931055196, 0.09727303635479634, 0.09026961265237132, 0.09423101095621911, 0.09339318029108867, 0.08134358186533541, 0.08978638175382525, 0.0790833264319073, 0.9624677687815185, 0.9855801791358813, 0.9816224124392043, 0.9588006997707941, 0.9759509140344366, 0.9710092523361906, 0.9847789324109596, 0.9782110500998692, 0.98016966668225, 0.3034460677447628, 0.3070791946049275, 0.3162936841526668, 0.26956904150950545, 0.27971313253914787, 0.2897636724461585, 0.30055476618523735, 0.3091051582244504, 0.29971065338511116, 0.575103760195953, 0.6579369174912328, 0.5756957078252307, 0.578457448384498, 0.62268343346853, 0.5348743605197566, 0.5437377063519533, 0.5750864631031573, 0.6026443184059901, 0.19122557781747151, 0.219926728416182, 0.17708813534241585, 0.1523831002292707, 0.17127873663224114, 0.24081197620533124, 0.18821531399816682, 0.10537279412279565, 0.21402145621295277, 0.2046246795081199, 0.19412499079843515, 0.20112124180673951, 0.20074072515046604, 0.18249195134365226, 0.1905082713072752, 0.2089302453317663, 0.19436623916189255, 0.2049281654583116, 0.0068166536550172685, 0.0837911965861654, 0.050516084582435505, 0.08976494540162006, 0.024829806428101286, 0.059188024680768336, 0.07305783740295468, 0.0964648656103706, 0.05769154514049968, 0.16280677835660884, 0.13777513171727374, 0.1716677221194739, 0.16142186592296115, 0.1234805081916649, 0.1397229977283585, 0.1689893019576535, 0.19814437959424513, 0.10939187298388475, 0.03371722574371072, 0.01923355698663376, 0.005416925536914974, 0.04565091917775321, 0.05293169986076862, 0.0184420315537287, 0.04294472623437107, 0.05384869480282728, 0.06862652834993865, 0.1434727307465219, 0.13014516524304764, 0.14283094183897305, 0.15476437716028124, 0.14335469825078906, 0.15476551997128118, 0.15389314040201207, 0.14499099412110517, 0.1646586539936239, 0.42255470889347735, 0.46454075466293065, 0.44103809128390825, 0.4445627656988088, 0.47217832809756455, 0.45296131431367226, 0.44219202469859464, 0.44168740411218377, 0.44493214750241983, 0.11182782387379753, 0.11173558176568021, 0.10138240106614815, 0.12488674551975909, 0.10273332347253195, 0.0970848950327079, 0.10894600019138578, 0.1130670277428173, 0.11829577546665515, 0.14540727231836847, 0.28447483892739733, 0.26440216718424314, 0.1827169809011342, 0.1967818721167539, 0.1290231784956315, 0.22484703138983853, 0.2435070355954998, 0.14288332363901612, 0.3074153083721701, 0.3034971554251098, 0.323958818223814, 0.3218228418410899, 0.3013796916450162, 0.3152165178622156, 0.3027670634632387, 0.3207432053900766, 0.3102628188868207, 0.2426007391435272, 0.21945623775416667, 0.268208028565292, 0.24495150191609605, 0.22065384399611787, 0.2703326499446467, 0.2520514025458884, 0.2640574256321997, 0.23775578206788373, 0.22330900122434794, 0.20084061105721895, 0.20237536743761497, 0.19086571663572038, 0.20448237248981416, 0.1846514790920929, 0.18829689955191709, 0.22010501926862958, 0.20704392112805026, 0.19970469159745197, 0.18850720732108373, 0.18254084549289917, 0.25912294469449937, 0.19604031895930163, 0.17935684116599004, 0.19282140363331945, 0.19175608739215821, 0.18992982248363355, 0.5541751596749267, 0.18046459927013492, 0.7235462915111932, 0.5502756818579533, 0.19248006472901402, 0.6572431188512124, 0.49559553012688085, 0.17391510325816872, 0.6707153637156391, 0.6286220117657617, 0.16964131868621912, 0.1908374933944862, 0.587157252836209, 0.5686223380915884, 0.6500050281667298, 0.20784635578758293, 0.12598989547462092, 0.6967624706510098, 0.1691155437474563, 0.19560187661169282, 0.1967090441389101, 0.17095352215511195, 0.1891195529401717, 0.1773154045473122, 0.18015985376441856, 0.1865000452760659, 0.18157214803937605, 0.07491902707087594, 0.07967315296110045, 0.07822741346497764, 0.0905098924597636, 0.08109982530064042, 0.08927050950122395, 0.08599735345014836, 0.07840666898783799, 0.07588224010329336]}, "mutation_prompt": null}
{"id": "ad57fcea-c200-4b92-a84f-42bb8ff48503", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 100\n        self.inertia_weight = 0.7  # Increased for better exploration\n        self.cognitive_coef = 1.2  # Adjusted for convergence\n        self.social_coef = 1.8  # Slightly increased for social learning\n        self.mutation_factor = 0.7  # Slightly reduced for diversity\n        self.crossover_prob = 0.85  # Adjusted for exploration-exploitation balance\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))  # Non-zero initial velocities\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.full(self.population_size, float('inf'))  # Simplified initialization\n\n        global_best_index = 0\n        eval_count = 0\n\n        while eval_count < self.budget:\n            scores = np.apply_along_axis(func, 1, particles)  # Vectorized function evaluation\n            eval_count += self.population_size\n\n            improved = scores < personal_best_scores  # Identify improvements\n            personal_best_scores[improved] = scores[improved]\n            personal_best_positions[improved] = particles[improved]\n\n            global_best_index = np.argmin(personal_best_scores)\n            global_best_position = personal_best_positions[global_best_index]\n\n            if eval_count >= self.budget:\n                break\n\n            r1, r2 = np.random.rand(2, self.population_size, self.dim)\n            velocities = (self.inertia_weight * velocities\n                          + self.cognitive_coef * r1 * (personal_best_positions - particles)\n                          + self.social_coef * r2 * (global_best_position - particles))\n            particles += velocities\n            particles = np.clip(particles, self.lower_bound, self.upper_bound)\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = particles[np.random.choice(idxs, 3, replace=False)]\n                mutant_vector = a + self.mutation_factor * (b - c)\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_prob, mutant_vector, particles[i])\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_score = func(trial_vector)\n                eval_count += 1\n\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial_vector\n                    personal_best_scores[i] = trial_score\n\n                    if trial_score < personal_best_scores[global_best_index]:\n                        global_best_position = trial_vector\n                        global_best_index = i\n\n        return global_best_position", "name": "HybridPSODE", "description": "Enhanced HybridPSODE by leveraging adaptive parameters and streamlined operations for improved efficiency.", "configspace": "", "generation": 68, "fitness": 0.19831901446802883, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.20.", "error": "", "parent_id": "86b3e4f1-22cc-4fb2-97cc-bf4bb4405e19", "metadata": {"aucs": [0.4178163191176485, 0.4069999353725531, 0.4099076966520996, 0.4647489942164096, 0.41654110793086296, 0.40445736073532124, 0.4207241555055865, 0.4202120903705828, 0.41877289761364933, 0.018640834792130634, 0.015232023291506969, 0.008343571029753027, 0.056065896713977104, 0.08365487727831733, 0.05844803957285605, 0.02821328182053018, 0.07877307677304146, 0.03717176651263476, 0.11568039691579324, 0.08504514706026889, 0.11135671558597604, 0.10656720706251255, 0.11647912533394844, 0.11258599410020453, 0.12865418780010807, 0.10374433729259869, 0.14950050492992772, 0.08077461557585852, 0.0888497334731243, 0.09212819295024588, 0.0771777776690884, 0.10528696134651816, 0.08730593163170886, 0.09907727634874686, 0.08050341790454552, 0.0810557888390987, 0.9636372677358308, 0.9723520581457771, 0.9552802875613126, 0.9549141315653654, 0.9571711598371292, 0.9557408662023394, 0.9729391601315749, 0.9676525555857665, 0.9721564854990855, 0.22381005635780216, 0.21481255879216732, 0.20583217790534802, 0.22661922225813425, 0.23848503113064212, 0.20282295685059215, 0.20232203635882529, 0.20614657804342673, 0.24623480908630013, 0.2636760629502254, 0.21096466228004906, 0.3674047478980784, 0.20490533797571076, 0.20371252519615357, 0.2520985603878577, 0.1625367660131597, 0.4219636162955783, 0.32045127618150115, 0.12518942358485619, 0.13384990908563799, 0.09179572528753344, 0.12855963054632424, 0.1079865866592985, 0.1128051584560189, 0.14727262622851833, 0.13676584948665893, 0.12174780887418679, 0.11175648836387986, 0.1063158279769797, 0.13689531852358283, 0.1273446663245682, 0.117164146831232, 0.11444531373505873, 0.14392734431981313, 0.06360780691377987, 0.1498044459513025, 0.0023392518048018784, 9.999999999998899e-05, 9.999999999998899e-05, 0.015940610518828335, 9.999999999998899e-05, 9.999999999998899e-05, 0.0031383254579657738, 0.0025447539802371244, 0.0009956268947984848, 0.05914384839607645, 0.04898621700623773, 0.08636834506608826, 0.06701779221509152, 0.09165103784881534, 0.028475055294413743, 0.10804396426900453, 0.04063914573510796, 0.031101936749685644, 0.006513571667954965, 0.007301509898850367, 0.00935415142849394, 0.01238910652210401, 0.007522910012589645, 0.012844018740688301, 0.022785688450796315, 0.010964032490138553, 0.00791097496200277, 0.04412792268215693, 0.006960804629733142, 0.1164203704428266, 0.02798118140103234, 0.07929685777401352, 0.05494750727362685, 0.06035007657179936, 0.036307545386961126, 0.042535946801265156, 0.3837225837108562, 0.3536659738134117, 0.42267749648497066, 0.3797123585123642, 0.3615676390975876, 0.40597619760377623, 0.35730742532400894, 0.3604727391408149, 0.37161989793267525, 0.08207624484699227, 0.10713993937420041, 0.07725707458773745, 0.08782791606152951, 0.10092582608804446, 0.08219028599986666, 0.07034624801172118, 0.07464633387684205, 0.08384380835518457, 0.18266994455885932, 0.204930120976752, 0.161373688173311, 0.16562711949811204, 0.2076954940112241, 0.15454282880710468, 0.17049608952162398, 0.15284915313102743, 0.18715639805650486, 0.2782025166439205, 0.2539110617016982, 0.229343058402662, 0.23978844274507183, 0.2584474718370955, 0.25342969100320856, 0.26840689844932053, 0.2738247646109565, 0.28715918124872664, 0.19634005209111705, 0.1655996964902915, 0.17931820996670889, 0.18962842436023453, 0.2122192317921353, 0.20734854359984212, 0.19526174813793218, 0.2097006140770411, 0.17735567592147305, 0.2084718973266556, 0.19241666086067533, 0.19063065827853798, 0.18299028559453412, 0.21844057408646156, 0.15217594172145732, 0.17756075188993714, 0.1967089900555774, 0.17437812722633883, 0.2209660010171518, 0.19416596452860646, 0.1899287947045426, 0.17763216077729282, 0.19279177034885464, 0.20670221354697427, 0.18388849338535296, 0.19036291537232342, 0.17619423066803774, 0.19916905936275897, 0.4871787161996197, 0.1999526906683513, 0.12803905404392957, 0.19212998286570826, 0.1630643807491644, 0.16607250351019542, 0.17286348614131564, 0.5168600473748637, 0.5600605328166437, 0.16598906536373248, 0.1942031605757365, 0.28386950352546114, 0.34183412562641713, 0.39787421565951053, 0.16168748114846, 0.12437938352823186, 0.38240754550158207, 0.18488512999153695, 0.19378919359962976, 0.17860221402620668, 0.18351562320969894, 0.1833809520157581, 0.191775286044644, 0.18092178327266084, 0.17388880710667687, 0.18083296615970024, 0.08610578438272054, 0.07718525248369734, 0.0776250967506561, 0.07883925988376628, 0.09114694470533236, 0.08220290682809539, 0.07913107292817256, 0.08004668067605836, 0.07971433947279605]}, "mutation_prompt": null}
{"id": "917af6ad-dcd2-4ae9-bcc3-97f0ba2c36bd", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 100\n        self.inertia_weight = 0.5\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros_like(particles)\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([float('inf')] * self.population_size)\n        \n        # Evaluate initial population\n        for i in range(self.population_size):\n            score = func(particles[i])\n            personal_best_scores[i] = score\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            # PSO update\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coef * r1 * (personal_best_positions[i] - particles[i])\n                                 + self.social_coef * r2 * (global_best_position - particles[i]))\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n            # Differential Evolution update with crossover\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = particles[np.random.choice(idxs, 3, replace=False)]\n                mutant_vector = a + self.mutation_factor * (b - c)\n                trial_vector = np.copy(particles[i])\n                \n                crossover_mask = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover_mask] = mutant_vector[crossover_mask]\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_score = func(trial_vector)\n                eval_count += 1\n\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial_vector\n                    personal_best_scores[i] = trial_score\n\n                # Update global best\n                if trial_score < personal_best_scores[global_best_index]:\n                    global_best_position = trial_vector\n                    global_best_index = i\n\n        return global_best_position", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization with Differential Evolution for improved global search and fine-tuning capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "86b3e4f1-22cc-4fb2-97cc-bf4bb4405e19", "metadata": {"aucs": [0.4882472281863305, 0.5164996094393812, 0.49627912463063206, 0.5339702752982873, 0.5404857484433038, 0.547033222410221, 0.49399054113020424, 0.5367743327470891, 0.5119730119579462, 0.1706997127269757, 0.16635505076312052, 0.18446456584479554, 0.18604242012498118, 0.18385268429613089, 0.19889041587631473, 0.19350555897906274, 0.18935136805081465, 0.186113004482099, 0.1307654169093807, 0.0896874251953903, 0.1412118423293054, 0.12142484023944233, 0.08837419841250671, 0.10400118280198245, 0.0964554587419576, 0.11658723844656671, 0.11926491685202545, 0.08929049749518203, 0.09355381931055196, 0.09727303635479634, 0.09026961265237132, 0.09423101095621911, 0.09339318029108867, 0.08134358186533541, 0.08978638175382525, 0.0790833264319073, 0.9624677687815185, 0.9855801791358813, 0.9816224124392043, 0.9588006997707941, 0.9759509140344366, 0.9710092523361906, 0.9847789324109596, 0.9782110500998692, 0.98016966668225, 0.3034460677447628, 0.3070791946049275, 0.3162936841526668, 0.26956904150950545, 0.27971313253914787, 0.2897636724461585, 0.30055476618523735, 0.3091051582244504, 0.29971065338511116, 0.575103760195953, 0.6579369174912328, 0.5756957078252307, 0.578457448384498, 0.62268343346853, 0.5348743605197566, 0.5437377063519533, 0.5750864631031573, 0.6026443184059901, 0.19122557781747151, 0.219926728416182, 0.17708813534241585, 0.1523831002292707, 0.17127873663224114, 0.24081197620533124, 0.18821531399816682, 0.10537279412279565, 0.21402145621295277, 0.2046246795081199, 0.19412499079843515, 0.20112124180673951, 0.20074072515046604, 0.18249195134365226, 0.1905082713072752, 0.2089302453317663, 0.19436623916189255, 0.2049281654583116, 0.0068166536550172685, 0.0837911965861654, 0.050516084582435505, 0.08976494540162006, 0.024829806428101286, 0.059188024680768336, 0.07305783740295468, 0.0964648656103706, 0.05769154514049968, 0.16280677835660884, 0.13777513171727374, 0.1716677221194739, 0.16142186592296115, 0.1234805081916649, 0.1397229977283585, 0.1689893019576535, 0.19814437959424513, 0.10939187298388475, 0.03371722574371072, 0.01923355698663376, 0.005416925536914974, 0.04565091917775321, 0.05293169986076862, 0.0184420315537287, 0.04294472623437107, 0.05384869480282728, 0.06862652834993865, 0.1434727307465219, 0.13014516524304764, 0.14283094183897305, 0.15476437716028124, 0.14335469825078906, 0.15476551997128118, 0.15389314040201207, 0.14499099412110517, 0.1646586539936239, 0.42255470889347735, 0.46454075466293065, 0.44103809128390825, 0.4445627656988088, 0.47217832809756455, 0.45296131431367226, 0.44219202469859464, 0.44168740411218377, 0.44493214750241983, 0.11182782387379753, 0.11173558176568021, 0.10138240106614815, 0.12488674551975909, 0.10273332347253195, 0.0970848950327079, 0.10894600019138578, 0.1130670277428173, 0.11829577546665515, 0.14540727231836847, 0.28447483892739733, 0.26440216718424314, 0.1827169809011342, 0.1967818721167539, 0.1290231784956315, 0.22484703138983853, 0.2435070355954998, 0.14288332363901612, 0.3074153083721701, 0.3034971554251098, 0.323958818223814, 0.3218228418410899, 0.3013796916450162, 0.3152165178622156, 0.3027670634632387, 0.3207432053900766, 0.3102628188868207, 0.2426007391435272, 0.21945623775416667, 0.268208028565292, 0.24495150191609605, 0.22065384399611787, 0.2703326499446467, 0.2520514025458884, 0.2640574256321997, 0.23775578206788373, 0.22330900122434794, 0.20084061105721895, 0.20237536743761497, 0.19086571663572038, 0.20448237248981416, 0.1846514790920929, 0.18829689955191709, 0.22010501926862958, 0.20704392112805026, 0.19970469159745197, 0.18850720732108373, 0.18254084549289917, 0.25912294469449937, 0.19604031895930163, 0.17935684116599004, 0.19282140363331945, 0.19175608739215821, 0.18992982248363355, 0.5541751596749267, 0.18046459927013492, 0.7235462915111932, 0.5502756818579533, 0.19248006472901402, 0.6572431188512124, 0.49559553012688085, 0.17391510325816872, 0.6707153637156391, 0.6286220117657617, 0.16964131868621912, 0.1908374933944862, 0.587157252836209, 0.5686223380915884, 0.6500050281667298, 0.20784635578758293, 0.12598989547462092, 0.6967624706510098, 0.1691155437474563, 0.19560187661169282, 0.1967090441389101, 0.17095352215511195, 0.1891195529401717, 0.1773154045473122, 0.18015985376441856, 0.1865000452760659, 0.18157214803937605, 0.07491902707087594, 0.07967315296110045, 0.07822741346497764, 0.0905098924597636, 0.08109982530064042, 0.08927050950122395, 0.08599735345014836, 0.07840666898783799, 0.07588224010329336]}, "mutation_prompt": null}
{"id": "7970cdea-ce8a-4ee4-9488-16c66dd904f1", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 100\n        self.inertia_weight = 0.5\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros_like(particles)\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([float('inf')] * self.population_size)\n        \n        # Evaluate initial population\n        for i in range(self.population_size):\n            score = func(particles[i])\n            personal_best_scores[i] = score\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            # PSO update\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coef * r1 * (personal_best_positions[i] - particles[i])\n                                 + self.social_coef * r2 * (global_best_position - particles[i]))\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n            # Differential Evolution update with crossover\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = particles[np.random.choice(idxs, 3, replace=False)]\n                mutant_vector = a + self.mutation_factor * (b - c)\n                trial_vector = np.copy(particles[i])\n                \n                crossover_mask = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover_mask] = mutant_vector[crossover_mask]\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_score = func(trial_vector)\n                eval_count += 1\n\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial_vector\n                    personal_best_scores[i] = trial_score\n\n                # Update global best\n                if trial_score < personal_best_scores[global_best_index]:\n                    global_best_position = trial_vector\n                    global_best_index = i\n\n        return global_best_position", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization with Differential Evolution for improved global search and fine-tuning capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "86b3e4f1-22cc-4fb2-97cc-bf4bb4405e19", "metadata": {"aucs": [0.4882472281863305, 0.5164996094393812, 0.49627912463063206, 0.5339702752982873, 0.5404857484433038, 0.547033222410221, 0.49399054113020424, 0.5367743327470891, 0.5119730119579462, 0.1706997127269757, 0.16635505076312052, 0.18446456584479554, 0.18604242012498118, 0.18385268429613089, 0.19889041587631473, 0.19350555897906274, 0.18935136805081465, 0.186113004482099, 0.1307654169093807, 0.0896874251953903, 0.1412118423293054, 0.12142484023944233, 0.08837419841250671, 0.10400118280198245, 0.0964554587419576, 0.11658723844656671, 0.11926491685202545, 0.08929049749518203, 0.09355381931055196, 0.09727303635479634, 0.09026961265237132, 0.09423101095621911, 0.09339318029108867, 0.08134358186533541, 0.08978638175382525, 0.0790833264319073, 0.9624677687815185, 0.9855801791358813, 0.9816224124392043, 0.9588006997707941, 0.9759509140344366, 0.9710092523361906, 0.9847789324109596, 0.9782110500998692, 0.98016966668225, 0.3034460677447628, 0.3070791946049275, 0.3162936841526668, 0.26956904150950545, 0.27971313253914787, 0.2897636724461585, 0.30055476618523735, 0.3091051582244504, 0.29971065338511116, 0.575103760195953, 0.6579369174912328, 0.5756957078252307, 0.578457448384498, 0.62268343346853, 0.5348743605197566, 0.5437377063519533, 0.5750864631031573, 0.6026443184059901, 0.19122557781747151, 0.219926728416182, 0.17708813534241585, 0.1523831002292707, 0.17127873663224114, 0.24081197620533124, 0.18821531399816682, 0.10537279412279565, 0.21402145621295277, 0.2046246795081199, 0.19412499079843515, 0.20112124180673951, 0.20074072515046604, 0.18249195134365226, 0.1905082713072752, 0.2089302453317663, 0.19436623916189255, 0.2049281654583116, 0.0068166536550172685, 0.0837911965861654, 0.050516084582435505, 0.08976494540162006, 0.024829806428101286, 0.059188024680768336, 0.07305783740295468, 0.0964648656103706, 0.05769154514049968, 0.16280677835660884, 0.13777513171727374, 0.1716677221194739, 0.16142186592296115, 0.1234805081916649, 0.1397229977283585, 0.1689893019576535, 0.19814437959424513, 0.10939187298388475, 0.03371722574371072, 0.01923355698663376, 0.005416925536914974, 0.04565091917775321, 0.05293169986076862, 0.0184420315537287, 0.04294472623437107, 0.05384869480282728, 0.06862652834993865, 0.1434727307465219, 0.13014516524304764, 0.14283094183897305, 0.15476437716028124, 0.14335469825078906, 0.15476551997128118, 0.15389314040201207, 0.14499099412110517, 0.1646586539936239, 0.42255470889347735, 0.46454075466293065, 0.44103809128390825, 0.4445627656988088, 0.47217832809756455, 0.45296131431367226, 0.44219202469859464, 0.44168740411218377, 0.44493214750241983, 0.11182782387379753, 0.11173558176568021, 0.10138240106614815, 0.12488674551975909, 0.10273332347253195, 0.0970848950327079, 0.10894600019138578, 0.1130670277428173, 0.11829577546665515, 0.14540727231836847, 0.28447483892739733, 0.26440216718424314, 0.1827169809011342, 0.1967818721167539, 0.1290231784956315, 0.22484703138983853, 0.2435070355954998, 0.14288332363901612, 0.3074153083721701, 0.3034971554251098, 0.323958818223814, 0.3218228418410899, 0.3013796916450162, 0.3152165178622156, 0.3027670634632387, 0.3207432053900766, 0.3102628188868207, 0.2426007391435272, 0.21945623775416667, 0.268208028565292, 0.24495150191609605, 0.22065384399611787, 0.2703326499446467, 0.2520514025458884, 0.2640574256321997, 0.23775578206788373, 0.22330900122434794, 0.20084061105721895, 0.20237536743761497, 0.19086571663572038, 0.20448237248981416, 0.1846514790920929, 0.18829689955191709, 0.22010501926862958, 0.20704392112805026, 0.19970469159745197, 0.18850720732108373, 0.18254084549289917, 0.25912294469449937, 0.19604031895930163, 0.17935684116599004, 0.19282140363331945, 0.19175608739215821, 0.18992982248363355, 0.5541751596749267, 0.18046459927013492, 0.7235462915111932, 0.5502756818579533, 0.19248006472901402, 0.6572431188512124, 0.49559553012688085, 0.17391510325816872, 0.6707153637156391, 0.6286220117657617, 0.16964131868621912, 0.1908374933944862, 0.587157252836209, 0.5686223380915884, 0.6500050281667298, 0.20784635578758293, 0.12598989547462092, 0.6967624706510098, 0.1691155437474563, 0.19560187661169282, 0.1967090441389101, 0.17095352215511195, 0.1891195529401717, 0.1773154045473122, 0.18015985376441856, 0.1865000452760659, 0.18157214803937605, 0.07491902707087594, 0.07967315296110045, 0.07822741346497764, 0.0905098924597636, 0.08109982530064042, 0.08927050950122395, 0.08599735345014836, 0.07840666898783799, 0.07588224010329336]}, "mutation_prompt": null}
{"id": "4905e917-824e-44aa-8676-45406a01da88", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 100\n        self.inertia_weight = 0.5\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n\n    def __call__(self, func):\n        # Initialize particles\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.zeros_like(particles)\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.array([float('inf')] * self.population_size)\n        \n        # Evaluate initial population\n        for i in range(self.population_size):\n            score = func(particles[i])\n            personal_best_scores[i] = score\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            # PSO update\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coef * r1 * (personal_best_positions[i] - particles[i])\n                                 + self.social_coef * r2 * (global_best_position - particles[i]))\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n            # Differential Evolution update with crossover\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = particles[np.random.choice(idxs, 3, replace=False)]\n                mutant_vector = a + self.mutation_factor * (b - c)\n                trial_vector = np.copy(particles[i])\n                \n                crossover_mask = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover_mask] = mutant_vector[crossover_mask]\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_score = func(trial_vector)\n                eval_count += 1\n\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial_vector\n                    personal_best_scores[i] = trial_score\n\n                # Update global best\n                if trial_score < personal_best_scores[global_best_index]:\n                    global_best_position = trial_vector\n                    global_best_index = i\n\n        return global_best_position", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization with Differential Evolution for improved global search and fine-tuning capabilities.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "86b3e4f1-22cc-4fb2-97cc-bf4bb4405e19", "metadata": {"aucs": [0.4882472281863305, 0.5164996094393812, 0.49627912463063206, 0.5339702752982873, 0.5404857484433038, 0.547033222410221, 0.49399054113020424, 0.5367743327470891, 0.5119730119579462, 0.1706997127269757, 0.16635505076312052, 0.18446456584479554, 0.18604242012498118, 0.18385268429613089, 0.19889041587631473, 0.19350555897906274, 0.18935136805081465, 0.186113004482099, 0.1307654169093807, 0.0896874251953903, 0.1412118423293054, 0.12142484023944233, 0.08837419841250671, 0.10400118280198245, 0.0964554587419576, 0.11658723844656671, 0.11926491685202545, 0.08929049749518203, 0.09355381931055196, 0.09727303635479634, 0.09026961265237132, 0.09423101095621911, 0.09339318029108867, 0.08134358186533541, 0.08978638175382525, 0.0790833264319073, 0.9624677687815185, 0.9855801791358813, 0.9816224124392043, 0.9588006997707941, 0.9759509140344366, 0.9710092523361906, 0.9847789324109596, 0.9782110500998692, 0.98016966668225, 0.3034460677447628, 0.3070791946049275, 0.3162936841526668, 0.26956904150950545, 0.27971313253914787, 0.2897636724461585, 0.30055476618523735, 0.3091051582244504, 0.29971065338511116, 0.575103760195953, 0.6579369174912328, 0.5756957078252307, 0.578457448384498, 0.62268343346853, 0.5348743605197566, 0.5437377063519533, 0.5750864631031573, 0.6026443184059901, 0.19122557781747151, 0.219926728416182, 0.17708813534241585, 0.1523831002292707, 0.17127873663224114, 0.24081197620533124, 0.18821531399816682, 0.10537279412279565, 0.21402145621295277, 0.2046246795081199, 0.19412499079843515, 0.20112124180673951, 0.20074072515046604, 0.18249195134365226, 0.1905082713072752, 0.2089302453317663, 0.19436623916189255, 0.2049281654583116, 0.0068166536550172685, 0.0837911965861654, 0.050516084582435505, 0.08976494540162006, 0.024829806428101286, 0.059188024680768336, 0.07305783740295468, 0.0964648656103706, 0.05769154514049968, 0.16280677835660884, 0.13777513171727374, 0.1716677221194739, 0.16142186592296115, 0.1234805081916649, 0.1397229977283585, 0.1689893019576535, 0.19814437959424513, 0.10939187298388475, 0.03371722574371072, 0.01923355698663376, 0.005416925536914974, 0.04565091917775321, 0.05293169986076862, 0.0184420315537287, 0.04294472623437107, 0.05384869480282728, 0.06862652834993865, 0.1434727307465219, 0.13014516524304764, 0.14283094183897305, 0.15476437716028124, 0.14335469825078906, 0.15476551997128118, 0.15389314040201207, 0.14499099412110517, 0.1646586539936239, 0.42255470889347735, 0.46454075466293065, 0.44103809128390825, 0.4445627656988088, 0.47217832809756455, 0.45296131431367226, 0.44219202469859464, 0.44168740411218377, 0.44493214750241983, 0.11182782387379753, 0.11173558176568021, 0.10138240106614815, 0.12488674551975909, 0.10273332347253195, 0.0970848950327079, 0.10894600019138578, 0.1130670277428173, 0.11829577546665515, 0.14540727231836847, 0.28447483892739733, 0.26440216718424314, 0.1827169809011342, 0.1967818721167539, 0.1290231784956315, 0.22484703138983853, 0.2435070355954998, 0.14288332363901612, 0.3074153083721701, 0.3034971554251098, 0.323958818223814, 0.3218228418410899, 0.3013796916450162, 0.3152165178622156, 0.3027670634632387, 0.3207432053900766, 0.3102628188868207, 0.2426007391435272, 0.21945623775416667, 0.268208028565292, 0.24495150191609605, 0.22065384399611787, 0.2703326499446467, 0.2520514025458884, 0.2640574256321997, 0.23775578206788373, 0.22330900122434794, 0.20084061105721895, 0.20237536743761497, 0.19086571663572038, 0.20448237248981416, 0.1846514790920929, 0.18829689955191709, 0.22010501926862958, 0.20704392112805026, 0.19970469159745197, 0.18850720732108373, 0.18254084549289917, 0.25912294469449937, 0.19604031895930163, 0.17935684116599004, 0.19282140363331945, 0.19175608739215821, 0.18992982248363355, 0.5541751596749267, 0.18046459927013492, 0.7235462915111932, 0.5502756818579533, 0.19248006472901402, 0.6572431188512124, 0.49559553012688085, 0.17391510325816872, 0.6707153637156391, 0.6286220117657617, 0.16964131868621912, 0.1908374933944862, 0.587157252836209, 0.5686223380915884, 0.6500050281667298, 0.20784635578758293, 0.12598989547462092, 0.6967624706510098, 0.1691155437474563, 0.19560187661169282, 0.1967090441389101, 0.17095352215511195, 0.1891195529401717, 0.1773154045473122, 0.18015985376441856, 0.1865000452760659, 0.18157214803937605, 0.07491902707087594, 0.07967315296110045, 0.07822741346497764, 0.0905098924597636, 0.08109982530064042, 0.08927050950122395, 0.08599735345014836, 0.07840666898783799, 0.07588224010329336]}, "mutation_prompt": null}
{"id": "43138693-7d4a-40d3-9a8b-0a5af63f6ab5", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 100\n        self.inertia_weight = 0.5\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.population_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        \n        for i in range(self.population_size):\n            score = func(particles[i])\n            personal_best_scores[i] = score\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coef * r1 * (personal_best_positions[i] - particles[i])\n                                 + self.social_coef * r2 * (global_best_position - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = np.random.choice(self.population_size, 3, replace=False)\n                while i in idxs:\n                    idxs = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = particles[idxs]\n                adaptive_mutation = self.mutation_factor * (1 - eval_count / self.budget)\n                mutant_vector = a + adaptive_mutation * (b - c)\n                trial_vector = np.copy(particles[i])\n                \n                crossover_mask = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover_mask] = mutant_vector[crossover_mask]\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_score = func(trial_vector)\n                eval_count += 1\n\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial_vector\n                    personal_best_scores[i] = trial_score\n\n                if trial_score < personal_best_scores[global_best_index]:\n                    global_best_position = trial_vector\n                    global_best_index = i\n\n        return global_best_position", "name": "EnhancedHybridPSODE", "description": "Enhanced HybridPSODE using adaptive mutation factors and dynamic velocities for improved convergence.", "configspace": "", "generation": 72, "fitness": 0.3300394144012656, "feedback": "The algorithm EnhancedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.22.", "error": "", "parent_id": "86b3e4f1-22cc-4fb2-97cc-bf4bb4405e19", "metadata": {"aucs": [0.6662416661548809, 0.6513623018132353, 0.6633375871038292, 0.6545229616175576, 0.6598521763290217, 0.6474942331665055, 0.6548421184499535, 0.6605922871738547, 0.6498376514717851, 0.3252265281491423, 0.3510259524679392, 0.3547799137549077, 0.33640688391667783, 0.3579326919492658, 0.3407071405262826, 0.33654008245099387, 0.30225059095684514, 0.28588814189514133, 0.13888218033040034, 0.13981789872150618, 0.13523826413724616, 0.13522623183099136, 0.1292161103513093, 0.10565333463443405, 0.13523519822897323, 0.14520141875006343, 0.1548767547731108, 0.10556802839667911, 0.11181783913715448, 0.1368273731403844, 0.10733898880726833, 0.1413152532399421, 0.09957327751337453, 0.11020018860334968, 0.10601090205277908, 0.1068701579604664, 0.8701107950519178, 0.9166887014360969, 0.8794648297326908, 0.9026539959793303, 0.8369619383304856, 0.8604145782515467, 0.9136974646365729, 0.9034019571919122, 0.9168048868124753, 0.41646521665402225, 0.4241346594772567, 0.41685719080547035, 0.40390160272271514, 0.4223263340599608, 0.4329914433198492, 0.41158512692677673, 0.45174629047723647, 0.4031325118483102, 0.7689625586478606, 0.7120792369613278, 0.6647638220352601, 0.7214056095517793, 0.7016038680258551, 0.7260738422829174, 0.7196359226545717, 0.6756751079011458, 0.7269586214774447, 0.2665472527943039, 0.34547332009356246, 0.3459350638919163, 0.3136391218037553, 0.30464081550628186, 0.26137387758303054, 0.3159145361358491, 0.3377514811778316, 0.29848543966482943, 0.33887163202728365, 0.35276602292079084, 0.35462593188132474, 0.3446172097067144, 0.3196751063196446, 0.3153739572147367, 0.315643516093868, 0.30481547769258843, 0.34182067210563605, 0.0850894595524353, 0.05542626847760912, 0.14420850781667816, 0.16014201884332147, 0.17690552478630617, 0.14279018289142842, 0.11886121095820856, 0.09345365566081765, 0.1909218723966133, 0.14724285474621635, 0.15337090552801202, 0.17699764762644155, 0.18214036040331427, 0.11221169784630525, 0.1738307037978144, 0.15501096873452347, 0.2670132877479501, 0.14408088864141755, 0.14131859523532453, 0.05390415685733119, 0.1285326602397081, 0.13955275510303067, 0.08911750907489147, 0.053027779621542814, 0.1470311857972858, 0.11697327772000465, 0.09972096237763739, 0.2084926677455452, 0.1950739349169286, 0.23248903278192512, 0.2219504995507391, 0.21369219233440273, 0.2033363839520843, 0.21772205376322762, 0.21947223839216734, 0.2038130642931686, 0.5418142571923248, 0.5715349798567688, 0.566306153379492, 0.5485678119399933, 0.5722668817937469, 0.5591402757218054, 0.5743573339213391, 0.5828282023792253, 0.5722065871164348, 0.11666433953108224, 0.12191263433733401, 0.11139237501135157, 0.12207774102857383, 0.14883396217191824, 0.1458835595343453, 0.12225882755378148, 0.2529681624990927, 0.10629139003186794, 0.22460128778038846, 0.3579847048510111, 0.3101993510848733, 0.26379436196001194, 0.38052211852504747, 0.30094712177300165, 0.2408862247416429, 0.2960275487005132, 0.15195401594644375, 0.38098176308097387, 0.3794163096733052, 0.37816472767583453, 0.37493577690797764, 0.3704251166591842, 0.3753909190764133, 0.3779285961801109, 0.40210295296163423, 0.3620210548756817, 0.29554911578099285, 0.30396476415195384, 0.3216392813225105, 0.302622995423631, 0.30385048279295657, 0.31224157570057265, 0.31449166426240094, 0.319339847669852, 0.30251875777998105, 0.2327900923555155, 0.21582617426830486, 0.22828135713221587, 0.21570212811727774, 0.22529775004146013, 0.23444901076418223, 0.23347341881177464, 0.21034337002569015, 0.2554020164624038, 0.20970708288714968, 0.2008656167170363, 0.43736074385625034, 0.22626484818198545, 0.2126009968965037, 0.20254009442281595, 0.20343779527603045, 0.21976731979189879, 0.1812775890274736, 0.1818641025670611, 0.18585327422378517, 0.7759918343498198, 0.19277173941302284, 0.19488516320695481, 0.16264452794463158, 0.7695269760076111, 0.16488617322867938, 0.8055525153563015, 0.7846525834302637, 0.20500907749803776, 0.7397912506852184, 0.7163037834967514, 0.725526771656576, 0.7133716928762615, 0.16572972072283465, 0.6898865075054132, 0.7093561515873469, 0.18054457633927146, 0.1905789633882018, 0.20666156379619793, 0.17711241838455993, 0.18210015354562026, 0.20901798103786706, 0.18263104734030844, 0.19011451317160077, 0.20031371357434224, 0.10179471963720554, 0.08695200091185684, 0.09527404220642643, 0.09368741906676281, 0.09143212884073892, 0.08949556664686242, 0.08700130650706528, 0.07833483776281269, 0.08756957134740628]}, "mutation_prompt": null}
{"id": "8ae14081-6829-4986-9167-dcaba1989a23", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 100\n        self.inertia_weight = 0.5\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.population_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        \n        for i in range(self.population_size):\n            score = func(particles[i])\n            personal_best_scores[i] = score\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coef * r1 * (personal_best_positions[i] - particles[i])\n                                 + self.social_coef * r2 * (global_best_position - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = np.random.choice(self.population_size, 3, replace=False)\n                while i in idxs:\n                    idxs = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = particles[idxs]\n                adaptive_mutation = self.mutation_factor * (1 - eval_count / self.budget)\n                mutant_vector = a + adaptive_mutation * (b - c)\n                trial_vector = np.copy(particles[i])\n                \n                crossover_mask = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover_mask] = mutant_vector[crossover_mask]\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_score = func(trial_vector)\n                eval_count += 1\n\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial_vector\n                    personal_best_scores[i] = trial_score\n\n                if trial_score < personal_best_scores[global_best_index]:\n                    global_best_position = trial_vector\n                    global_best_index = i\n\n        return global_best_position", "name": "EnhancedHybridPSODE", "description": "Enhanced HybridPSODE using adaptive mutation factors and dynamic velocities for improved convergence.", "configspace": "", "generation": 73, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "43138693-7d4a-40d3-9a8b-0a5af63f6ab5", "metadata": {"aucs": [0.6662416661548809, 0.6513623018132353, 0.6633375871038292, 0.6545229616175576, 0.6598521763290217, 0.6474942331665055, 0.6548421184499535, 0.6605922871738547, 0.6498376514717851, 0.3252265281491423, 0.3510259524679392, 0.3547799137549077, 0.33640688391667783, 0.3579326919492658, 0.3407071405262826, 0.33654008245099387, 0.30225059095684514, 0.28588814189514133, 0.13888218033040034, 0.13981789872150618, 0.13523826413724616, 0.13522623183099136, 0.1292161103513093, 0.10565333463443405, 0.13523519822897323, 0.14520141875006343, 0.1548767547731108, 0.10556802839667911, 0.11181783913715448, 0.1368273731403844, 0.10733898880726833, 0.1413152532399421, 0.09957327751337453, 0.11020018860334968, 0.10601090205277908, 0.1068701579604664, 0.8701107950519178, 0.9166887014360969, 0.8794648297326908, 0.9026539959793303, 0.8369619383304856, 0.8604145782515467, 0.9136974646365729, 0.9034019571919122, 0.9168048868124753, 0.41646521665402225, 0.4241346594772567, 0.41685719080547035, 0.40390160272271514, 0.4223263340599608, 0.4329914433198492, 0.41158512692677673, 0.45174629047723647, 0.4031325118483102, 0.7689625586478606, 0.7120792369613278, 0.6647638220352601, 0.7214056095517793, 0.7016038680258551, 0.7260738422829174, 0.7196359226545717, 0.6756751079011458, 0.7269586214774447, 0.2665472527943039, 0.34547332009356246, 0.3459350638919163, 0.3136391218037553, 0.30464081550628186, 0.26137387758303054, 0.3159145361358491, 0.3377514811778316, 0.29848543966482943, 0.33887163202728365, 0.35276602292079084, 0.35462593188132474, 0.3446172097067144, 0.3196751063196446, 0.3153739572147367, 0.315643516093868, 0.30481547769258843, 0.34182067210563605, 0.0850894595524353, 0.05542626847760912, 0.14420850781667816, 0.16014201884332147, 0.17690552478630617, 0.14279018289142842, 0.11886121095820856, 0.09345365566081765, 0.1909218723966133, 0.14724285474621635, 0.15337090552801202, 0.17699764762644155, 0.18214036040331427, 0.11221169784630525, 0.1738307037978144, 0.15501096873452347, 0.2670132877479501, 0.14408088864141755, 0.14131859523532453, 0.05390415685733119, 0.1285326602397081, 0.13955275510303067, 0.08911750907489147, 0.053027779621542814, 0.1470311857972858, 0.11697327772000465, 0.09972096237763739, 0.2084926677455452, 0.1950739349169286, 0.23248903278192512, 0.2219504995507391, 0.21369219233440273, 0.2033363839520843, 0.21772205376322762, 0.21947223839216734, 0.2038130642931686, 0.5418142571923248, 0.5715349798567688, 0.566306153379492, 0.5485678119399933, 0.5722668817937469, 0.5591402757218054, 0.5743573339213391, 0.5828282023792253, 0.5722065871164348, 0.11666433953108224, 0.12191263433733401, 0.11139237501135157, 0.12207774102857383, 0.14883396217191824, 0.1458835595343453, 0.12225882755378148, 0.2529681624990927, 0.10629139003186794, 0.22460128778038846, 0.3579847048510111, 0.3101993510848733, 0.26379436196001194, 0.38052211852504747, 0.30094712177300165, 0.2408862247416429, 0.2960275487005132, 0.15195401594644375, 0.38098176308097387, 0.3794163096733052, 0.37816472767583453, 0.37493577690797764, 0.3704251166591842, 0.3753909190764133, 0.3779285961801109, 0.40210295296163423, 0.3620210548756817, 0.29554911578099285, 0.30396476415195384, 0.3216392813225105, 0.302622995423631, 0.30385048279295657, 0.31224157570057265, 0.31449166426240094, 0.319339847669852, 0.30251875777998105, 0.2327900923555155, 0.21582617426830486, 0.22828135713221587, 0.21570212811727774, 0.22529775004146013, 0.23444901076418223, 0.23347341881177464, 0.21034337002569015, 0.2554020164624038, 0.20970708288714968, 0.2008656167170363, 0.43736074385625034, 0.22626484818198545, 0.2126009968965037, 0.20254009442281595, 0.20343779527603045, 0.21976731979189879, 0.1812775890274736, 0.1818641025670611, 0.18585327422378517, 0.7759918343498198, 0.19277173941302284, 0.19488516320695481, 0.16264452794463158, 0.7695269760076111, 0.16488617322867938, 0.8055525153563015, 0.7846525834302637, 0.20500907749803776, 0.7397912506852184, 0.7163037834967514, 0.725526771656576, 0.7133716928762615, 0.16572972072283465, 0.6898865075054132, 0.7093561515873469, 0.18054457633927146, 0.1905789633882018, 0.20666156379619793, 0.17711241838455993, 0.18210015354562026, 0.20901798103786706, 0.18263104734030844, 0.19011451317160077, 0.20031371357434224, 0.10179471963720554, 0.08695200091185684, 0.09527404220642643, 0.09368741906676281, 0.09143212884073892, 0.08949556664686242, 0.08700130650706528, 0.07833483776281269, 0.08756957134740628]}, "mutation_prompt": null}
{"id": "92752665-7f6b-4879-97dd-853192ff6dcb", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 100\n        self.inertia_weight = 0.5\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.population_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        \n        for i in range(self.population_size):\n            score = func(particles[i])\n            personal_best_scores[i] = score\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coef * r1 * (personal_best_positions[i] - particles[i])\n                                 + self.social_coef * r2 * (global_best_position - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = np.random.choice(self.population_size, 3, replace=False)\n                while i in idxs:\n                    idxs = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = particles[idxs]\n                adaptive_mutation = self.mutation_factor * (1 - eval_count / self.budget)\n                mutant_vector = a + adaptive_mutation * (b - c)\n                trial_vector = np.copy(particles[i])\n                \n                crossover_mask = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover_mask] = mutant_vector[crossover_mask]\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_score = func(trial_vector)\n                eval_count += 1\n\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial_vector\n                    personal_best_scores[i] = trial_score\n\n                if trial_score < personal_best_scores[global_best_index]:\n                    global_best_position = trial_vector\n                    global_best_index = i\n\n        return global_best_position", "name": "EnhancedHybridPSODE", "description": "Enhanced HybridPSODE using adaptive mutation factors and dynamic velocities for improved convergence.", "configspace": "", "generation": 73, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "43138693-7d4a-40d3-9a8b-0a5af63f6ab5", "metadata": {"aucs": [0.6662416661548809, 0.6513623018132353, 0.6633375871038292, 0.6545229616175576, 0.6598521763290217, 0.6474942331665055, 0.6548421184499535, 0.6605922871738547, 0.6498376514717851, 0.3252265281491423, 0.3510259524679392, 0.3547799137549077, 0.33640688391667783, 0.3579326919492658, 0.3407071405262826, 0.33654008245099387, 0.30225059095684514, 0.28588814189514133, 0.13888218033040034, 0.13981789872150618, 0.13523826413724616, 0.13522623183099136, 0.1292161103513093, 0.10565333463443405, 0.13523519822897323, 0.14520141875006343, 0.1548767547731108, 0.10556802839667911, 0.11181783913715448, 0.1368273731403844, 0.10733898880726833, 0.1413152532399421, 0.09957327751337453, 0.11020018860334968, 0.10601090205277908, 0.1068701579604664, 0.8701107950519178, 0.9166887014360969, 0.8794648297326908, 0.9026539959793303, 0.8369619383304856, 0.8604145782515467, 0.9136974646365729, 0.9034019571919122, 0.9168048868124753, 0.41646521665402225, 0.4241346594772567, 0.41685719080547035, 0.40390160272271514, 0.4223263340599608, 0.4329914433198492, 0.41158512692677673, 0.45174629047723647, 0.4031325118483102, 0.7689625586478606, 0.7120792369613278, 0.6647638220352601, 0.7214056095517793, 0.7016038680258551, 0.7260738422829174, 0.7196359226545717, 0.6756751079011458, 0.7269586214774447, 0.2665472527943039, 0.34547332009356246, 0.3459350638919163, 0.3136391218037553, 0.30464081550628186, 0.26137387758303054, 0.3159145361358491, 0.3377514811778316, 0.29848543966482943, 0.33887163202728365, 0.35276602292079084, 0.35462593188132474, 0.3446172097067144, 0.3196751063196446, 0.3153739572147367, 0.315643516093868, 0.30481547769258843, 0.34182067210563605, 0.0850894595524353, 0.05542626847760912, 0.14420850781667816, 0.16014201884332147, 0.17690552478630617, 0.14279018289142842, 0.11886121095820856, 0.09345365566081765, 0.1909218723966133, 0.14724285474621635, 0.15337090552801202, 0.17699764762644155, 0.18214036040331427, 0.11221169784630525, 0.1738307037978144, 0.15501096873452347, 0.2670132877479501, 0.14408088864141755, 0.14131859523532453, 0.05390415685733119, 0.1285326602397081, 0.13955275510303067, 0.08911750907489147, 0.053027779621542814, 0.1470311857972858, 0.11697327772000465, 0.09972096237763739, 0.2084926677455452, 0.1950739349169286, 0.23248903278192512, 0.2219504995507391, 0.21369219233440273, 0.2033363839520843, 0.21772205376322762, 0.21947223839216734, 0.2038130642931686, 0.5418142571923248, 0.5715349798567688, 0.566306153379492, 0.5485678119399933, 0.5722668817937469, 0.5591402757218054, 0.5743573339213391, 0.5828282023792253, 0.5722065871164348, 0.11666433953108224, 0.12191263433733401, 0.11139237501135157, 0.12207774102857383, 0.14883396217191824, 0.1458835595343453, 0.12225882755378148, 0.2529681624990927, 0.10629139003186794, 0.22460128778038846, 0.3579847048510111, 0.3101993510848733, 0.26379436196001194, 0.38052211852504747, 0.30094712177300165, 0.2408862247416429, 0.2960275487005132, 0.15195401594644375, 0.38098176308097387, 0.3794163096733052, 0.37816472767583453, 0.37493577690797764, 0.3704251166591842, 0.3753909190764133, 0.3779285961801109, 0.40210295296163423, 0.3620210548756817, 0.29554911578099285, 0.30396476415195384, 0.3216392813225105, 0.302622995423631, 0.30385048279295657, 0.31224157570057265, 0.31449166426240094, 0.319339847669852, 0.30251875777998105, 0.2327900923555155, 0.21582617426830486, 0.22828135713221587, 0.21570212811727774, 0.22529775004146013, 0.23444901076418223, 0.23347341881177464, 0.21034337002569015, 0.2554020164624038, 0.20970708288714968, 0.2008656167170363, 0.43736074385625034, 0.22626484818198545, 0.2126009968965037, 0.20254009442281595, 0.20343779527603045, 0.21976731979189879, 0.1812775890274736, 0.1818641025670611, 0.18585327422378517, 0.7759918343498198, 0.19277173941302284, 0.19488516320695481, 0.16264452794463158, 0.7695269760076111, 0.16488617322867938, 0.8055525153563015, 0.7846525834302637, 0.20500907749803776, 0.7397912506852184, 0.7163037834967514, 0.725526771656576, 0.7133716928762615, 0.16572972072283465, 0.6898865075054132, 0.7093561515873469, 0.18054457633927146, 0.1905789633882018, 0.20666156379619793, 0.17711241838455993, 0.18210015354562026, 0.20901798103786706, 0.18263104734030844, 0.19011451317160077, 0.20031371357434224, 0.10179471963720554, 0.08695200091185684, 0.09527404220642643, 0.09368741906676281, 0.09143212884073892, 0.08949556664686242, 0.08700130650706528, 0.07833483776281269, 0.08756957134740628]}, "mutation_prompt": null}
{"id": "3857a9c7-e3ca-44d2-b3fd-b27ac86b61ef", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 100\n        self.inertia_weight = 0.5\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.population_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        \n        for i in range(self.population_size):\n            score = func(particles[i])\n            personal_best_scores[i] = score\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coef * r1 * (personal_best_positions[i] - particles[i])\n                                 + self.social_coef * r2 * (global_best_position - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = np.random.choice(self.population_size, 3, replace=False)\n                while i in idxs:\n                    idxs = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = particles[idxs]\n                adaptive_mutation = self.mutation_factor * (1 - eval_count / self.budget)\n                mutant_vector = a + adaptive_mutation * (b - c)\n                trial_vector = np.copy(particles[i])\n                \n                crossover_mask = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover_mask] = mutant_vector[crossover_mask]\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_score = func(trial_vector)\n                eval_count += 1\n\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial_vector\n                    personal_best_scores[i] = trial_score\n\n                if trial_score < personal_best_scores[global_best_index]:\n                    global_best_position = trial_vector\n                    global_best_index = i\n\n        return global_best_position", "name": "EnhancedHybridPSODE", "description": "Enhanced HybridPSODE using adaptive mutation factors and dynamic velocities for improved convergence.", "configspace": "", "generation": 73, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "43138693-7d4a-40d3-9a8b-0a5af63f6ab5", "metadata": {"aucs": [0.6662416661548809, 0.6513623018132353, 0.6633375871038292, 0.6545229616175576, 0.6598521763290217, 0.6474942331665055, 0.6548421184499535, 0.6605922871738547, 0.6498376514717851, 0.3252265281491423, 0.3510259524679392, 0.3547799137549077, 0.33640688391667783, 0.3579326919492658, 0.3407071405262826, 0.33654008245099387, 0.30225059095684514, 0.28588814189514133, 0.13888218033040034, 0.13981789872150618, 0.13523826413724616, 0.13522623183099136, 0.1292161103513093, 0.10565333463443405, 0.13523519822897323, 0.14520141875006343, 0.1548767547731108, 0.10556802839667911, 0.11181783913715448, 0.1368273731403844, 0.10733898880726833, 0.1413152532399421, 0.09957327751337453, 0.11020018860334968, 0.10601090205277908, 0.1068701579604664, 0.8701107950519178, 0.9166887014360969, 0.8794648297326908, 0.9026539959793303, 0.8369619383304856, 0.8604145782515467, 0.9136974646365729, 0.9034019571919122, 0.9168048868124753, 0.41646521665402225, 0.4241346594772567, 0.41685719080547035, 0.40390160272271514, 0.4223263340599608, 0.4329914433198492, 0.41158512692677673, 0.45174629047723647, 0.4031325118483102, 0.7689625586478606, 0.7120792369613278, 0.6647638220352601, 0.7214056095517793, 0.7016038680258551, 0.7260738422829174, 0.7196359226545717, 0.6756751079011458, 0.7269586214774447, 0.2665472527943039, 0.34547332009356246, 0.3459350638919163, 0.3136391218037553, 0.30464081550628186, 0.26137387758303054, 0.3159145361358491, 0.3377514811778316, 0.29848543966482943, 0.33887163202728365, 0.35276602292079084, 0.35462593188132474, 0.3446172097067144, 0.3196751063196446, 0.3153739572147367, 0.315643516093868, 0.30481547769258843, 0.34182067210563605, 0.0850894595524353, 0.05542626847760912, 0.14420850781667816, 0.16014201884332147, 0.17690552478630617, 0.14279018289142842, 0.11886121095820856, 0.09345365566081765, 0.1909218723966133, 0.14724285474621635, 0.15337090552801202, 0.17699764762644155, 0.18214036040331427, 0.11221169784630525, 0.1738307037978144, 0.15501096873452347, 0.2670132877479501, 0.14408088864141755, 0.14131859523532453, 0.05390415685733119, 0.1285326602397081, 0.13955275510303067, 0.08911750907489147, 0.053027779621542814, 0.1470311857972858, 0.11697327772000465, 0.09972096237763739, 0.2084926677455452, 0.1950739349169286, 0.23248903278192512, 0.2219504995507391, 0.21369219233440273, 0.2033363839520843, 0.21772205376322762, 0.21947223839216734, 0.2038130642931686, 0.5418142571923248, 0.5715349798567688, 0.566306153379492, 0.5485678119399933, 0.5722668817937469, 0.5591402757218054, 0.5743573339213391, 0.5828282023792253, 0.5722065871164348, 0.11666433953108224, 0.12191263433733401, 0.11139237501135157, 0.12207774102857383, 0.14883396217191824, 0.1458835595343453, 0.12225882755378148, 0.2529681624990927, 0.10629139003186794, 0.22460128778038846, 0.3579847048510111, 0.3101993510848733, 0.26379436196001194, 0.38052211852504747, 0.30094712177300165, 0.2408862247416429, 0.2960275487005132, 0.15195401594644375, 0.38098176308097387, 0.3794163096733052, 0.37816472767583453, 0.37493577690797764, 0.3704251166591842, 0.3753909190764133, 0.3779285961801109, 0.40210295296163423, 0.3620210548756817, 0.29554911578099285, 0.30396476415195384, 0.3216392813225105, 0.302622995423631, 0.30385048279295657, 0.31224157570057265, 0.31449166426240094, 0.319339847669852, 0.30251875777998105, 0.2327900923555155, 0.21582617426830486, 0.22828135713221587, 0.21570212811727774, 0.22529775004146013, 0.23444901076418223, 0.23347341881177464, 0.21034337002569015, 0.2554020164624038, 0.20970708288714968, 0.2008656167170363, 0.43736074385625034, 0.22626484818198545, 0.2126009968965037, 0.20254009442281595, 0.20343779527603045, 0.21976731979189879, 0.1812775890274736, 0.1818641025670611, 0.18585327422378517, 0.7759918343498198, 0.19277173941302284, 0.19488516320695481, 0.16264452794463158, 0.7695269760076111, 0.16488617322867938, 0.8055525153563015, 0.7846525834302637, 0.20500907749803776, 0.7397912506852184, 0.7163037834967514, 0.725526771656576, 0.7133716928762615, 0.16572972072283465, 0.6898865075054132, 0.7093561515873469, 0.18054457633927146, 0.1905789633882018, 0.20666156379619793, 0.17711241838455993, 0.18210015354562026, 0.20901798103786706, 0.18263104734030844, 0.19011451317160077, 0.20031371357434224, 0.10179471963720554, 0.08695200091185684, 0.09527404220642643, 0.09368741906676281, 0.09143212884073892, 0.08949556664686242, 0.08700130650706528, 0.07833483776281269, 0.08756957134740628]}, "mutation_prompt": null}
{"id": "d9746172-8215-4748-b47d-75c045f8f169", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 100\n        self.inertia_weight = 0.5\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.population_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        \n        for i in range(self.population_size):\n            score = func(particles[i])\n            personal_best_scores[i] = score\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coef * r1 * (personal_best_positions[i] - particles[i])\n                                 + self.social_coef * r2 * (global_best_position - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = np.random.choice(self.population_size, 3, replace=False)\n                while i in idxs:\n                    idxs = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = particles[idxs]\n                adaptive_mutation = self.mutation_factor * (1 - eval_count / self.budget)\n                mutant_vector = a + adaptive_mutation * (b - c)\n                trial_vector = np.copy(particles[i])\n                \n                crossover_mask = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover_mask] = mutant_vector[crossover_mask]\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_score = func(trial_vector)\n                eval_count += 1\n\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial_vector\n                    personal_best_scores[i] = trial_score\n\n                if trial_score < personal_best_scores[global_best_index]:\n                    global_best_position = trial_vector\n                    global_best_index = i\n\n        return global_best_position", "name": "EnhancedHybridPSODE", "description": "Enhanced HybridPSODE using adaptive mutation factors and dynamic velocities for improved convergence.", "configspace": "", "generation": 73, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "43138693-7d4a-40d3-9a8b-0a5af63f6ab5", "metadata": {"aucs": [0.6662416661548809, 0.6513623018132353, 0.6633375871038292, 0.6545229616175576, 0.6598521763290217, 0.6474942331665055, 0.6548421184499535, 0.6605922871738547, 0.6498376514717851, 0.3252265281491423, 0.3510259524679392, 0.3547799137549077, 0.33640688391667783, 0.3579326919492658, 0.3407071405262826, 0.33654008245099387, 0.30225059095684514, 0.28588814189514133, 0.13888218033040034, 0.13981789872150618, 0.13523826413724616, 0.13522623183099136, 0.1292161103513093, 0.10565333463443405, 0.13523519822897323, 0.14520141875006343, 0.1548767547731108, 0.10556802839667911, 0.11181783913715448, 0.1368273731403844, 0.10733898880726833, 0.1413152532399421, 0.09957327751337453, 0.11020018860334968, 0.10601090205277908, 0.1068701579604664, 0.8701107950519178, 0.9166887014360969, 0.8794648297326908, 0.9026539959793303, 0.8369619383304856, 0.8604145782515467, 0.9136974646365729, 0.9034019571919122, 0.9168048868124753, 0.41646521665402225, 0.4241346594772567, 0.41685719080547035, 0.40390160272271514, 0.4223263340599608, 0.4329914433198492, 0.41158512692677673, 0.45174629047723647, 0.4031325118483102, 0.7689625586478606, 0.7120792369613278, 0.6647638220352601, 0.7214056095517793, 0.7016038680258551, 0.7260738422829174, 0.7196359226545717, 0.6756751079011458, 0.7269586214774447, 0.2665472527943039, 0.34547332009356246, 0.3459350638919163, 0.3136391218037553, 0.30464081550628186, 0.26137387758303054, 0.3159145361358491, 0.3377514811778316, 0.29848543966482943, 0.33887163202728365, 0.35276602292079084, 0.35462593188132474, 0.3446172097067144, 0.3196751063196446, 0.3153739572147367, 0.315643516093868, 0.30481547769258843, 0.34182067210563605, 0.0850894595524353, 0.05542626847760912, 0.14420850781667816, 0.16014201884332147, 0.17690552478630617, 0.14279018289142842, 0.11886121095820856, 0.09345365566081765, 0.1909218723966133, 0.14724285474621635, 0.15337090552801202, 0.17699764762644155, 0.18214036040331427, 0.11221169784630525, 0.1738307037978144, 0.15501096873452347, 0.2670132877479501, 0.14408088864141755, 0.14131859523532453, 0.05390415685733119, 0.1285326602397081, 0.13955275510303067, 0.08911750907489147, 0.053027779621542814, 0.1470311857972858, 0.11697327772000465, 0.09972096237763739, 0.2084926677455452, 0.1950739349169286, 0.23248903278192512, 0.2219504995507391, 0.21369219233440273, 0.2033363839520843, 0.21772205376322762, 0.21947223839216734, 0.2038130642931686, 0.5418142571923248, 0.5715349798567688, 0.566306153379492, 0.5485678119399933, 0.5722668817937469, 0.5591402757218054, 0.5743573339213391, 0.5828282023792253, 0.5722065871164348, 0.11666433953108224, 0.12191263433733401, 0.11139237501135157, 0.12207774102857383, 0.14883396217191824, 0.1458835595343453, 0.12225882755378148, 0.2529681624990927, 0.10629139003186794, 0.22460128778038846, 0.3579847048510111, 0.3101993510848733, 0.26379436196001194, 0.38052211852504747, 0.30094712177300165, 0.2408862247416429, 0.2960275487005132, 0.15195401594644375, 0.38098176308097387, 0.3794163096733052, 0.37816472767583453, 0.37493577690797764, 0.3704251166591842, 0.3753909190764133, 0.3779285961801109, 0.40210295296163423, 0.3620210548756817, 0.29554911578099285, 0.30396476415195384, 0.3216392813225105, 0.302622995423631, 0.30385048279295657, 0.31224157570057265, 0.31449166426240094, 0.319339847669852, 0.30251875777998105, 0.2327900923555155, 0.21582617426830486, 0.22828135713221587, 0.21570212811727774, 0.22529775004146013, 0.23444901076418223, 0.23347341881177464, 0.21034337002569015, 0.2554020164624038, 0.20970708288714968, 0.2008656167170363, 0.43736074385625034, 0.22626484818198545, 0.2126009968965037, 0.20254009442281595, 0.20343779527603045, 0.21976731979189879, 0.1812775890274736, 0.1818641025670611, 0.18585327422378517, 0.7759918343498198, 0.19277173941302284, 0.19488516320695481, 0.16264452794463158, 0.7695269760076111, 0.16488617322867938, 0.8055525153563015, 0.7846525834302637, 0.20500907749803776, 0.7397912506852184, 0.7163037834967514, 0.725526771656576, 0.7133716928762615, 0.16572972072283465, 0.6898865075054132, 0.7093561515873469, 0.18054457633927146, 0.1905789633882018, 0.20666156379619793, 0.17711241838455993, 0.18210015354562026, 0.20901798103786706, 0.18263104734030844, 0.19011451317160077, 0.20031371357434224, 0.10179471963720554, 0.08695200091185684, 0.09527404220642643, 0.09368741906676281, 0.09143212884073892, 0.08949556664686242, 0.08700130650706528, 0.07833483776281269, 0.08756957134740628]}, "mutation_prompt": null}
{"id": "a3433fbf-1147-4d4a-9787-217228142dc4", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 100\n        self.inertia_weight = 0.5\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.population_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        \n        for i in range(self.population_size):\n            score = func(particles[i])\n            personal_best_scores[i] = score\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coef * r1 * (personal_best_positions[i] - particles[i])\n                                 + self.social_coef * r2 * (global_best_position - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = np.random.choice(self.population_size, 3, replace=False)\n                while i in idxs:\n                    idxs = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = particles[idxs]\n                adaptive_mutation = self.mutation_factor * (1 - eval_count / self.budget)\n                mutant_vector = a + adaptive_mutation * (b - c)\n                trial_vector = np.copy(particles[i])\n                \n                crossover_mask = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover_mask] = mutant_vector[crossover_mask]\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_score = func(trial_vector)\n                eval_count += 1\n\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial_vector\n                    personal_best_scores[i] = trial_score\n\n                if trial_score < personal_best_scores[global_best_index]:\n                    global_best_position = trial_vector\n                    global_best_index = i\n\n        return global_best_position", "name": "EnhancedHybridPSODE", "description": "Enhanced HybridPSODE using adaptive mutation factors and dynamic velocities for improved convergence.", "configspace": "", "generation": 73, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "43138693-7d4a-40d3-9a8b-0a5af63f6ab5", "metadata": {"aucs": [0.6662416661548809, 0.6513623018132353, 0.6633375871038292, 0.6545229616175576, 0.6598521763290217, 0.6474942331665055, 0.6548421184499535, 0.6605922871738547, 0.6498376514717851, 0.3252265281491423, 0.3510259524679392, 0.3547799137549077, 0.33640688391667783, 0.3579326919492658, 0.3407071405262826, 0.33654008245099387, 0.30225059095684514, 0.28588814189514133, 0.13888218033040034, 0.13981789872150618, 0.13523826413724616, 0.13522623183099136, 0.1292161103513093, 0.10565333463443405, 0.13523519822897323, 0.14520141875006343, 0.1548767547731108, 0.10556802839667911, 0.11181783913715448, 0.1368273731403844, 0.10733898880726833, 0.1413152532399421, 0.09957327751337453, 0.11020018860334968, 0.10601090205277908, 0.1068701579604664, 0.8701107950519178, 0.9166887014360969, 0.8794648297326908, 0.9026539959793303, 0.8369619383304856, 0.8604145782515467, 0.9136974646365729, 0.9034019571919122, 0.9168048868124753, 0.41646521665402225, 0.4241346594772567, 0.41685719080547035, 0.40390160272271514, 0.4223263340599608, 0.4329914433198492, 0.41158512692677673, 0.45174629047723647, 0.4031325118483102, 0.7689625586478606, 0.7120792369613278, 0.6647638220352601, 0.7214056095517793, 0.7016038680258551, 0.7260738422829174, 0.7196359226545717, 0.6756751079011458, 0.7269586214774447, 0.2665472527943039, 0.34547332009356246, 0.3459350638919163, 0.3136391218037553, 0.30464081550628186, 0.26137387758303054, 0.3159145361358491, 0.3377514811778316, 0.29848543966482943, 0.33887163202728365, 0.35276602292079084, 0.35462593188132474, 0.3446172097067144, 0.3196751063196446, 0.3153739572147367, 0.315643516093868, 0.30481547769258843, 0.34182067210563605, 0.0850894595524353, 0.05542626847760912, 0.14420850781667816, 0.16014201884332147, 0.17690552478630617, 0.14279018289142842, 0.11886121095820856, 0.09345365566081765, 0.1909218723966133, 0.14724285474621635, 0.15337090552801202, 0.17699764762644155, 0.18214036040331427, 0.11221169784630525, 0.1738307037978144, 0.15501096873452347, 0.2670132877479501, 0.14408088864141755, 0.14131859523532453, 0.05390415685733119, 0.1285326602397081, 0.13955275510303067, 0.08911750907489147, 0.053027779621542814, 0.1470311857972858, 0.11697327772000465, 0.09972096237763739, 0.2084926677455452, 0.1950739349169286, 0.23248903278192512, 0.2219504995507391, 0.21369219233440273, 0.2033363839520843, 0.21772205376322762, 0.21947223839216734, 0.2038130642931686, 0.5418142571923248, 0.5715349798567688, 0.566306153379492, 0.5485678119399933, 0.5722668817937469, 0.5591402757218054, 0.5743573339213391, 0.5828282023792253, 0.5722065871164348, 0.11666433953108224, 0.12191263433733401, 0.11139237501135157, 0.12207774102857383, 0.14883396217191824, 0.1458835595343453, 0.12225882755378148, 0.2529681624990927, 0.10629139003186794, 0.22460128778038846, 0.3579847048510111, 0.3101993510848733, 0.26379436196001194, 0.38052211852504747, 0.30094712177300165, 0.2408862247416429, 0.2960275487005132, 0.15195401594644375, 0.38098176308097387, 0.3794163096733052, 0.37816472767583453, 0.37493577690797764, 0.3704251166591842, 0.3753909190764133, 0.3779285961801109, 0.40210295296163423, 0.3620210548756817, 0.29554911578099285, 0.30396476415195384, 0.3216392813225105, 0.302622995423631, 0.30385048279295657, 0.31224157570057265, 0.31449166426240094, 0.319339847669852, 0.30251875777998105, 0.2327900923555155, 0.21582617426830486, 0.22828135713221587, 0.21570212811727774, 0.22529775004146013, 0.23444901076418223, 0.23347341881177464, 0.21034337002569015, 0.2554020164624038, 0.20970708288714968, 0.2008656167170363, 0.43736074385625034, 0.22626484818198545, 0.2126009968965037, 0.20254009442281595, 0.20343779527603045, 0.21976731979189879, 0.1812775890274736, 0.1818641025670611, 0.18585327422378517, 0.7759918343498198, 0.19277173941302284, 0.19488516320695481, 0.16264452794463158, 0.7695269760076111, 0.16488617322867938, 0.8055525153563015, 0.7846525834302637, 0.20500907749803776, 0.7397912506852184, 0.7163037834967514, 0.725526771656576, 0.7133716928762615, 0.16572972072283465, 0.6898865075054132, 0.7093561515873469, 0.18054457633927146, 0.1905789633882018, 0.20666156379619793, 0.17711241838455993, 0.18210015354562026, 0.20901798103786706, 0.18263104734030844, 0.19011451317160077, 0.20031371357434224, 0.10179471963720554, 0.08695200091185684, 0.09527404220642643, 0.09368741906676281, 0.09143212884073892, 0.08949556664686242, 0.08700130650706528, 0.07833483776281269, 0.08756957134740628]}, "mutation_prompt": null}
{"id": "e413d888-d52f-4020-96da-3361087ee862", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 100\n        self.inertia_weight = 0.5\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.population_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        \n        for i in range(self.population_size):\n            score = func(particles[i])\n            personal_best_scores[i] = score\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coef * r1 * (personal_best_positions[i] - particles[i])\n                                 + self.social_coef * r2 * (global_best_position - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = np.random.choice(self.population_size, 3, replace=False)\n                while i in idxs:\n                    idxs = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = particles[idxs]\n                adaptive_mutation = self.mutation_factor * (1 - eval_count / self.budget)\n                mutant_vector = a + adaptive_mutation * (b - c)\n                trial_vector = np.copy(particles[i])\n                \n                crossover_mask = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover_mask] = mutant_vector[crossover_mask]\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_score = func(trial_vector)\n                eval_count += 1\n\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial_vector\n                    personal_best_scores[i] = trial_score\n\n                if trial_score < personal_best_scores[global_best_index]:\n                    global_best_position = trial_vector\n                    global_best_index = i\n\n        return global_best_position", "name": "EnhancedHybridPSODE", "description": "Enhanced HybridPSODE using adaptive mutation factors and dynamic velocities for improved convergence.", "configspace": "", "generation": 73, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "43138693-7d4a-40d3-9a8b-0a5af63f6ab5", "metadata": {"aucs": [0.6662416661548809, 0.6513623018132353, 0.6633375871038292, 0.6545229616175576, 0.6598521763290217, 0.6474942331665055, 0.6548421184499535, 0.6605922871738547, 0.6498376514717851, 0.3252265281491423, 0.3510259524679392, 0.3547799137549077, 0.33640688391667783, 0.3579326919492658, 0.3407071405262826, 0.33654008245099387, 0.30225059095684514, 0.28588814189514133, 0.13888218033040034, 0.13981789872150618, 0.13523826413724616, 0.13522623183099136, 0.1292161103513093, 0.10565333463443405, 0.13523519822897323, 0.14520141875006343, 0.1548767547731108, 0.10556802839667911, 0.11181783913715448, 0.1368273731403844, 0.10733898880726833, 0.1413152532399421, 0.09957327751337453, 0.11020018860334968, 0.10601090205277908, 0.1068701579604664, 0.8701107950519178, 0.9166887014360969, 0.8794648297326908, 0.9026539959793303, 0.8369619383304856, 0.8604145782515467, 0.9136974646365729, 0.9034019571919122, 0.9168048868124753, 0.41646521665402225, 0.4241346594772567, 0.41685719080547035, 0.40390160272271514, 0.4223263340599608, 0.4329914433198492, 0.41158512692677673, 0.45174629047723647, 0.4031325118483102, 0.7689625586478606, 0.7120792369613278, 0.6647638220352601, 0.7214056095517793, 0.7016038680258551, 0.7260738422829174, 0.7196359226545717, 0.6756751079011458, 0.7269586214774447, 0.2665472527943039, 0.34547332009356246, 0.3459350638919163, 0.3136391218037553, 0.30464081550628186, 0.26137387758303054, 0.3159145361358491, 0.3377514811778316, 0.29848543966482943, 0.33887163202728365, 0.35276602292079084, 0.35462593188132474, 0.3446172097067144, 0.3196751063196446, 0.3153739572147367, 0.315643516093868, 0.30481547769258843, 0.34182067210563605, 0.0850894595524353, 0.05542626847760912, 0.14420850781667816, 0.16014201884332147, 0.17690552478630617, 0.14279018289142842, 0.11886121095820856, 0.09345365566081765, 0.1909218723966133, 0.14724285474621635, 0.15337090552801202, 0.17699764762644155, 0.18214036040331427, 0.11221169784630525, 0.1738307037978144, 0.15501096873452347, 0.2670132877479501, 0.14408088864141755, 0.14131859523532453, 0.05390415685733119, 0.1285326602397081, 0.13955275510303067, 0.08911750907489147, 0.053027779621542814, 0.1470311857972858, 0.11697327772000465, 0.09972096237763739, 0.2084926677455452, 0.1950739349169286, 0.23248903278192512, 0.2219504995507391, 0.21369219233440273, 0.2033363839520843, 0.21772205376322762, 0.21947223839216734, 0.2038130642931686, 0.5418142571923248, 0.5715349798567688, 0.566306153379492, 0.5485678119399933, 0.5722668817937469, 0.5591402757218054, 0.5743573339213391, 0.5828282023792253, 0.5722065871164348, 0.11666433953108224, 0.12191263433733401, 0.11139237501135157, 0.12207774102857383, 0.14883396217191824, 0.1458835595343453, 0.12225882755378148, 0.2529681624990927, 0.10629139003186794, 0.22460128778038846, 0.3579847048510111, 0.3101993510848733, 0.26379436196001194, 0.38052211852504747, 0.30094712177300165, 0.2408862247416429, 0.2960275487005132, 0.15195401594644375, 0.38098176308097387, 0.3794163096733052, 0.37816472767583453, 0.37493577690797764, 0.3704251166591842, 0.3753909190764133, 0.3779285961801109, 0.40210295296163423, 0.3620210548756817, 0.29554911578099285, 0.30396476415195384, 0.3216392813225105, 0.302622995423631, 0.30385048279295657, 0.31224157570057265, 0.31449166426240094, 0.319339847669852, 0.30251875777998105, 0.2327900923555155, 0.21582617426830486, 0.22828135713221587, 0.21570212811727774, 0.22529775004146013, 0.23444901076418223, 0.23347341881177464, 0.21034337002569015, 0.2554020164624038, 0.20970708288714968, 0.2008656167170363, 0.43736074385625034, 0.22626484818198545, 0.2126009968965037, 0.20254009442281595, 0.20343779527603045, 0.21976731979189879, 0.1812775890274736, 0.1818641025670611, 0.18585327422378517, 0.7759918343498198, 0.19277173941302284, 0.19488516320695481, 0.16264452794463158, 0.7695269760076111, 0.16488617322867938, 0.8055525153563015, 0.7846525834302637, 0.20500907749803776, 0.7397912506852184, 0.7163037834967514, 0.725526771656576, 0.7133716928762615, 0.16572972072283465, 0.6898865075054132, 0.7093561515873469, 0.18054457633927146, 0.1905789633882018, 0.20666156379619793, 0.17711241838455993, 0.18210015354562026, 0.20901798103786706, 0.18263104734030844, 0.19011451317160077, 0.20031371357434224, 0.10179471963720554, 0.08695200091185684, 0.09527404220642643, 0.09368741906676281, 0.09143212884073892, 0.08949556664686242, 0.08700130650706528, 0.07833483776281269, 0.08756957134740628]}, "mutation_prompt": null}
{"id": "3d26a70d-e3db-4537-8ed0-1da2809d2b7f", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 100\n        self.inertia_weight = 0.5\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.population_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        \n        for i in range(self.population_size):\n            score = func(particles[i])\n            personal_best_scores[i] = score\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coef * r1 * (personal_best_positions[i] - particles[i])\n                                 + self.social_coef * r2 * (global_best_position - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = np.random.choice(self.population_size, 3, replace=False)\n                while i in idxs:\n                    idxs = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = particles[idxs]\n                adaptive_mutation = self.mutation_factor * (1 - eval_count / self.budget)\n                mutant_vector = a + adaptive_mutation * (b - c)\n                trial_vector = np.copy(particles[i])\n                \n                crossover_mask = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover_mask] = mutant_vector[crossover_mask]\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_score = func(trial_vector)\n                eval_count += 1\n\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial_vector\n                    personal_best_scores[i] = trial_score\n\n                if trial_score < personal_best_scores[global_best_index]:\n                    global_best_position = trial_vector\n                    global_best_index = i\n\n        return global_best_position", "name": "EnhancedHybridPSODE", "description": "Enhanced HybridPSODE using adaptive mutation factors and dynamic velocities for improved convergence.", "configspace": "", "generation": 73, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "43138693-7d4a-40d3-9a8b-0a5af63f6ab5", "metadata": {"aucs": [0.6662416661548809, 0.6513623018132353, 0.6633375871038292, 0.6545229616175576, 0.6598521763290217, 0.6474942331665055, 0.6548421184499535, 0.6605922871738547, 0.6498376514717851, 0.3252265281491423, 0.3510259524679392, 0.3547799137549077, 0.33640688391667783, 0.3579326919492658, 0.3407071405262826, 0.33654008245099387, 0.30225059095684514, 0.28588814189514133, 0.13888218033040034, 0.13981789872150618, 0.13523826413724616, 0.13522623183099136, 0.1292161103513093, 0.10565333463443405, 0.13523519822897323, 0.14520141875006343, 0.1548767547731108, 0.10556802839667911, 0.11181783913715448, 0.1368273731403844, 0.10733898880726833, 0.1413152532399421, 0.09957327751337453, 0.11020018860334968, 0.10601090205277908, 0.1068701579604664, 0.8701107950519178, 0.9166887014360969, 0.8794648297326908, 0.9026539959793303, 0.8369619383304856, 0.8604145782515467, 0.9136974646365729, 0.9034019571919122, 0.9168048868124753, 0.41646521665402225, 0.4241346594772567, 0.41685719080547035, 0.40390160272271514, 0.4223263340599608, 0.4329914433198492, 0.41158512692677673, 0.45174629047723647, 0.4031325118483102, 0.7689625586478606, 0.7120792369613278, 0.6647638220352601, 0.7214056095517793, 0.7016038680258551, 0.7260738422829174, 0.7196359226545717, 0.6756751079011458, 0.7269586214774447, 0.2665472527943039, 0.34547332009356246, 0.3459350638919163, 0.3136391218037553, 0.30464081550628186, 0.26137387758303054, 0.3159145361358491, 0.3377514811778316, 0.29848543966482943, 0.33887163202728365, 0.35276602292079084, 0.35462593188132474, 0.3446172097067144, 0.3196751063196446, 0.3153739572147367, 0.315643516093868, 0.30481547769258843, 0.34182067210563605, 0.0850894595524353, 0.05542626847760912, 0.14420850781667816, 0.16014201884332147, 0.17690552478630617, 0.14279018289142842, 0.11886121095820856, 0.09345365566081765, 0.1909218723966133, 0.14724285474621635, 0.15337090552801202, 0.17699764762644155, 0.18214036040331427, 0.11221169784630525, 0.1738307037978144, 0.15501096873452347, 0.2670132877479501, 0.14408088864141755, 0.14131859523532453, 0.05390415685733119, 0.1285326602397081, 0.13955275510303067, 0.08911750907489147, 0.053027779621542814, 0.1470311857972858, 0.11697327772000465, 0.09972096237763739, 0.2084926677455452, 0.1950739349169286, 0.23248903278192512, 0.2219504995507391, 0.21369219233440273, 0.2033363839520843, 0.21772205376322762, 0.21947223839216734, 0.2038130642931686, 0.5418142571923248, 0.5715349798567688, 0.566306153379492, 0.5485678119399933, 0.5722668817937469, 0.5591402757218054, 0.5743573339213391, 0.5828282023792253, 0.5722065871164348, 0.11666433953108224, 0.12191263433733401, 0.11139237501135157, 0.12207774102857383, 0.14883396217191824, 0.1458835595343453, 0.12225882755378148, 0.2529681624990927, 0.10629139003186794, 0.22460128778038846, 0.3579847048510111, 0.3101993510848733, 0.26379436196001194, 0.38052211852504747, 0.30094712177300165, 0.2408862247416429, 0.2960275487005132, 0.15195401594644375, 0.38098176308097387, 0.3794163096733052, 0.37816472767583453, 0.37493577690797764, 0.3704251166591842, 0.3753909190764133, 0.3779285961801109, 0.40210295296163423, 0.3620210548756817, 0.29554911578099285, 0.30396476415195384, 0.3216392813225105, 0.302622995423631, 0.30385048279295657, 0.31224157570057265, 0.31449166426240094, 0.319339847669852, 0.30251875777998105, 0.2327900923555155, 0.21582617426830486, 0.22828135713221587, 0.21570212811727774, 0.22529775004146013, 0.23444901076418223, 0.23347341881177464, 0.21034337002569015, 0.2554020164624038, 0.20970708288714968, 0.2008656167170363, 0.43736074385625034, 0.22626484818198545, 0.2126009968965037, 0.20254009442281595, 0.20343779527603045, 0.21976731979189879, 0.1812775890274736, 0.1818641025670611, 0.18585327422378517, 0.7759918343498198, 0.19277173941302284, 0.19488516320695481, 0.16264452794463158, 0.7695269760076111, 0.16488617322867938, 0.8055525153563015, 0.7846525834302637, 0.20500907749803776, 0.7397912506852184, 0.7163037834967514, 0.725526771656576, 0.7133716928762615, 0.16572972072283465, 0.6898865075054132, 0.7093561515873469, 0.18054457633927146, 0.1905789633882018, 0.20666156379619793, 0.17711241838455993, 0.18210015354562026, 0.20901798103786706, 0.18263104734030844, 0.19011451317160077, 0.20031371357434224, 0.10179471963720554, 0.08695200091185684, 0.09527404220642643, 0.09368741906676281, 0.09143212884073892, 0.08949556664686242, 0.08700130650706528, 0.07833483776281269, 0.08756957134740628]}, "mutation_prompt": null}
{"id": "9409b395-60d5-4afb-9d2c-6e849d27b4b9", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 100\n        self.inertia_weight = 0.5\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.population_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        \n        for i in range(self.population_size):\n            score = func(particles[i])\n            personal_best_scores[i] = score\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coef * r1 * (personal_best_positions[i] - particles[i])\n                                 + self.social_coef * r2 * (global_best_position - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = np.random.choice(self.population_size, 3, replace=False)\n                while i in idxs:\n                    idxs = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = particles[idxs]\n                adaptive_mutation = self.mutation_factor * (1 - eval_count / self.budget)\n                mutant_vector = a + adaptive_mutation * (b - c)\n                trial_vector = np.copy(particles[i])\n                \n                crossover_mask = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover_mask] = mutant_vector[crossover_mask]\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_score = func(trial_vector)\n                eval_count += 1\n\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial_vector\n                    personal_best_scores[i] = trial_score\n\n                if trial_score < personal_best_scores[global_best_index]:\n                    global_best_position = trial_vector\n                    global_best_index = i\n\n        return global_best_position", "name": "EnhancedHybridPSODE", "description": "Enhanced HybridPSODE using adaptive mutation factors and dynamic velocities for improved convergence.", "configspace": "", "generation": 73, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "43138693-7d4a-40d3-9a8b-0a5af63f6ab5", "metadata": {"aucs": [0.6662416661548809, 0.6513623018132353, 0.6633375871038292, 0.6545229616175576, 0.6598521763290217, 0.6474942331665055, 0.6548421184499535, 0.6605922871738547, 0.6498376514717851, 0.3252265281491423, 0.3510259524679392, 0.3547799137549077, 0.33640688391667783, 0.3579326919492658, 0.3407071405262826, 0.33654008245099387, 0.30225059095684514, 0.28588814189514133, 0.13888218033040034, 0.13981789872150618, 0.13523826413724616, 0.13522623183099136, 0.1292161103513093, 0.10565333463443405, 0.13523519822897323, 0.14520141875006343, 0.1548767547731108, 0.10556802839667911, 0.11181783913715448, 0.1368273731403844, 0.10733898880726833, 0.1413152532399421, 0.09957327751337453, 0.11020018860334968, 0.10601090205277908, 0.1068701579604664, 0.8701107950519178, 0.9166887014360969, 0.8794648297326908, 0.9026539959793303, 0.8369619383304856, 0.8604145782515467, 0.9136974646365729, 0.9034019571919122, 0.9168048868124753, 0.41646521665402225, 0.4241346594772567, 0.41685719080547035, 0.40390160272271514, 0.4223263340599608, 0.4329914433198492, 0.41158512692677673, 0.45174629047723647, 0.4031325118483102, 0.7689625586478606, 0.7120792369613278, 0.6647638220352601, 0.7214056095517793, 0.7016038680258551, 0.7260738422829174, 0.7196359226545717, 0.6756751079011458, 0.7269586214774447, 0.2665472527943039, 0.34547332009356246, 0.3459350638919163, 0.3136391218037553, 0.30464081550628186, 0.26137387758303054, 0.3159145361358491, 0.3377514811778316, 0.29848543966482943, 0.33887163202728365, 0.35276602292079084, 0.35462593188132474, 0.3446172097067144, 0.3196751063196446, 0.3153739572147367, 0.315643516093868, 0.30481547769258843, 0.34182067210563605, 0.0850894595524353, 0.05542626847760912, 0.14420850781667816, 0.16014201884332147, 0.17690552478630617, 0.14279018289142842, 0.11886121095820856, 0.09345365566081765, 0.1909218723966133, 0.14724285474621635, 0.15337090552801202, 0.17699764762644155, 0.18214036040331427, 0.11221169784630525, 0.1738307037978144, 0.15501096873452347, 0.2670132877479501, 0.14408088864141755, 0.14131859523532453, 0.05390415685733119, 0.1285326602397081, 0.13955275510303067, 0.08911750907489147, 0.053027779621542814, 0.1470311857972858, 0.11697327772000465, 0.09972096237763739, 0.2084926677455452, 0.1950739349169286, 0.23248903278192512, 0.2219504995507391, 0.21369219233440273, 0.2033363839520843, 0.21772205376322762, 0.21947223839216734, 0.2038130642931686, 0.5418142571923248, 0.5715349798567688, 0.566306153379492, 0.5485678119399933, 0.5722668817937469, 0.5591402757218054, 0.5743573339213391, 0.5828282023792253, 0.5722065871164348, 0.11666433953108224, 0.12191263433733401, 0.11139237501135157, 0.12207774102857383, 0.14883396217191824, 0.1458835595343453, 0.12225882755378148, 0.2529681624990927, 0.10629139003186794, 0.22460128778038846, 0.3579847048510111, 0.3101993510848733, 0.26379436196001194, 0.38052211852504747, 0.30094712177300165, 0.2408862247416429, 0.2960275487005132, 0.15195401594644375, 0.38098176308097387, 0.3794163096733052, 0.37816472767583453, 0.37493577690797764, 0.3704251166591842, 0.3753909190764133, 0.3779285961801109, 0.40210295296163423, 0.3620210548756817, 0.29554911578099285, 0.30396476415195384, 0.3216392813225105, 0.302622995423631, 0.30385048279295657, 0.31224157570057265, 0.31449166426240094, 0.319339847669852, 0.30251875777998105, 0.2327900923555155, 0.21582617426830486, 0.22828135713221587, 0.21570212811727774, 0.22529775004146013, 0.23444901076418223, 0.23347341881177464, 0.21034337002569015, 0.2554020164624038, 0.20970708288714968, 0.2008656167170363, 0.43736074385625034, 0.22626484818198545, 0.2126009968965037, 0.20254009442281595, 0.20343779527603045, 0.21976731979189879, 0.1812775890274736, 0.1818641025670611, 0.18585327422378517, 0.7759918343498198, 0.19277173941302284, 0.19488516320695481, 0.16264452794463158, 0.7695269760076111, 0.16488617322867938, 0.8055525153563015, 0.7846525834302637, 0.20500907749803776, 0.7397912506852184, 0.7163037834967514, 0.725526771656576, 0.7133716928762615, 0.16572972072283465, 0.6898865075054132, 0.7093561515873469, 0.18054457633927146, 0.1905789633882018, 0.20666156379619793, 0.17711241838455993, 0.18210015354562026, 0.20901798103786706, 0.18263104734030844, 0.19011451317160077, 0.20031371357434224, 0.10179471963720554, 0.08695200091185684, 0.09527404220642643, 0.09368741906676281, 0.09143212884073892, 0.08949556664686242, 0.08700130650706528, 0.07833483776281269, 0.08756957134740628]}, "mutation_prompt": null}
{"id": "dbb237ef-31a3-471d-be0c-e8a01ae064fe", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 100\n        self.inertia_weight = 0.5\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.population_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        \n        for i in range(self.population_size):\n            score = func(particles[i])\n            personal_best_scores[i] = score\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coef * r1 * (personal_best_positions[i] - particles[i])\n                                 + self.social_coef * r2 * (global_best_position - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = np.random.choice(self.population_size, 3, replace=False)\n                while i in idxs:\n                    idxs = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = particles[idxs]\n                adaptive_mutation = self.mutation_factor * (1 - eval_count / self.budget)\n                mutant_vector = a + adaptive_mutation * (b - c)\n                trial_vector = np.copy(particles[i])\n                \n                crossover_mask = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover_mask] = mutant_vector[crossover_mask]\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_score = func(trial_vector)\n                eval_count += 1\n\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial_vector\n                    personal_best_scores[i] = trial_score\n\n                if trial_score < personal_best_scores[global_best_index]:\n                    global_best_position = trial_vector\n                    global_best_index = i\n\n        return global_best_position", "name": "EnhancedHybridPSODE", "description": "Enhanced HybridPSODE using adaptive mutation factors and dynamic velocities for improved convergence.", "configspace": "", "generation": 73, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "43138693-7d4a-40d3-9a8b-0a5af63f6ab5", "metadata": {"aucs": [0.6662416661548809, 0.6513623018132353, 0.6633375871038292, 0.6545229616175576, 0.6598521763290217, 0.6474942331665055, 0.6548421184499535, 0.6605922871738547, 0.6498376514717851, 0.3252265281491423, 0.3510259524679392, 0.3547799137549077, 0.33640688391667783, 0.3579326919492658, 0.3407071405262826, 0.33654008245099387, 0.30225059095684514, 0.28588814189514133, 0.13888218033040034, 0.13981789872150618, 0.13523826413724616, 0.13522623183099136, 0.1292161103513093, 0.10565333463443405, 0.13523519822897323, 0.14520141875006343, 0.1548767547731108, 0.10556802839667911, 0.11181783913715448, 0.1368273731403844, 0.10733898880726833, 0.1413152532399421, 0.09957327751337453, 0.11020018860334968, 0.10601090205277908, 0.1068701579604664, 0.8701107950519178, 0.9166887014360969, 0.8794648297326908, 0.9026539959793303, 0.8369619383304856, 0.8604145782515467, 0.9136974646365729, 0.9034019571919122, 0.9168048868124753, 0.41646521665402225, 0.4241346594772567, 0.41685719080547035, 0.40390160272271514, 0.4223263340599608, 0.4329914433198492, 0.41158512692677673, 0.45174629047723647, 0.4031325118483102, 0.7689625586478606, 0.7120792369613278, 0.6647638220352601, 0.7214056095517793, 0.7016038680258551, 0.7260738422829174, 0.7196359226545717, 0.6756751079011458, 0.7269586214774447, 0.2665472527943039, 0.34547332009356246, 0.3459350638919163, 0.3136391218037553, 0.30464081550628186, 0.26137387758303054, 0.3159145361358491, 0.3377514811778316, 0.29848543966482943, 0.33887163202728365, 0.35276602292079084, 0.35462593188132474, 0.3446172097067144, 0.3196751063196446, 0.3153739572147367, 0.315643516093868, 0.30481547769258843, 0.34182067210563605, 0.0850894595524353, 0.05542626847760912, 0.14420850781667816, 0.16014201884332147, 0.17690552478630617, 0.14279018289142842, 0.11886121095820856, 0.09345365566081765, 0.1909218723966133, 0.14724285474621635, 0.15337090552801202, 0.17699764762644155, 0.18214036040331427, 0.11221169784630525, 0.1738307037978144, 0.15501096873452347, 0.2670132877479501, 0.14408088864141755, 0.14131859523532453, 0.05390415685733119, 0.1285326602397081, 0.13955275510303067, 0.08911750907489147, 0.053027779621542814, 0.1470311857972858, 0.11697327772000465, 0.09972096237763739, 0.2084926677455452, 0.1950739349169286, 0.23248903278192512, 0.2219504995507391, 0.21369219233440273, 0.2033363839520843, 0.21772205376322762, 0.21947223839216734, 0.2038130642931686, 0.5418142571923248, 0.5715349798567688, 0.566306153379492, 0.5485678119399933, 0.5722668817937469, 0.5591402757218054, 0.5743573339213391, 0.5828282023792253, 0.5722065871164348, 0.11666433953108224, 0.12191263433733401, 0.11139237501135157, 0.12207774102857383, 0.14883396217191824, 0.1458835595343453, 0.12225882755378148, 0.2529681624990927, 0.10629139003186794, 0.22460128778038846, 0.3579847048510111, 0.3101993510848733, 0.26379436196001194, 0.38052211852504747, 0.30094712177300165, 0.2408862247416429, 0.2960275487005132, 0.15195401594644375, 0.38098176308097387, 0.3794163096733052, 0.37816472767583453, 0.37493577690797764, 0.3704251166591842, 0.3753909190764133, 0.3779285961801109, 0.40210295296163423, 0.3620210548756817, 0.29554911578099285, 0.30396476415195384, 0.3216392813225105, 0.302622995423631, 0.30385048279295657, 0.31224157570057265, 0.31449166426240094, 0.319339847669852, 0.30251875777998105, 0.2327900923555155, 0.21582617426830486, 0.22828135713221587, 0.21570212811727774, 0.22529775004146013, 0.23444901076418223, 0.23347341881177464, 0.21034337002569015, 0.2554020164624038, 0.20970708288714968, 0.2008656167170363, 0.43736074385625034, 0.22626484818198545, 0.2126009968965037, 0.20254009442281595, 0.20343779527603045, 0.21976731979189879, 0.1812775890274736, 0.1818641025670611, 0.18585327422378517, 0.7759918343498198, 0.19277173941302284, 0.19488516320695481, 0.16264452794463158, 0.7695269760076111, 0.16488617322867938, 0.8055525153563015, 0.7846525834302637, 0.20500907749803776, 0.7397912506852184, 0.7163037834967514, 0.725526771656576, 0.7133716928762615, 0.16572972072283465, 0.6898865075054132, 0.7093561515873469, 0.18054457633927146, 0.1905789633882018, 0.20666156379619793, 0.17711241838455993, 0.18210015354562026, 0.20901798103786706, 0.18263104734030844, 0.19011451317160077, 0.20031371357434224, 0.10179471963720554, 0.08695200091185684, 0.09527404220642643, 0.09368741906676281, 0.09143212884073892, 0.08949556664686242, 0.08700130650706528, 0.07833483776281269, 0.08756957134740628]}, "mutation_prompt": null}
{"id": "0094a1b5-a37f-4525-b357-af7e46179174", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 100\n        self.inertia_weight = 0.5\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.population_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        \n        for i in range(self.population_size):\n            score = func(particles[i])\n            personal_best_scores[i] = score\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coef * r1 * (personal_best_positions[i] - particles[i])\n                                 + self.social_coef * r2 * (global_best_position - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = np.random.choice(self.population_size, 3, replace=False)\n                while i in idxs:\n                    idxs = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = particles[idxs]\n                adaptive_mutation = self.mutation_factor * (1 - eval_count / self.budget)\n                mutant_vector = a + adaptive_mutation * (b - c)\n                trial_vector = np.copy(particles[i])\n                \n                crossover_mask = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover_mask] = mutant_vector[crossover_mask]\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_score = func(trial_vector)\n                eval_count += 1\n\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial_vector\n                    personal_best_scores[i] = trial_score\n\n                if trial_score < personal_best_scores[global_best_index]:\n                    global_best_position = trial_vector\n                    global_best_index = i\n\n        return global_best_position", "name": "EnhancedHybridPSODE", "description": "Enhanced HybridPSODE using adaptive mutation factors and dynamic velocities for improved convergence.", "configspace": "", "generation": 73, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "43138693-7d4a-40d3-9a8b-0a5af63f6ab5", "metadata": {"aucs": [0.6662416661548809, 0.6513623018132353, 0.6633375871038292, 0.6545229616175576, 0.6598521763290217, 0.6474942331665055, 0.6548421184499535, 0.6605922871738547, 0.6498376514717851, 0.3252265281491423, 0.3510259524679392, 0.3547799137549077, 0.33640688391667783, 0.3579326919492658, 0.3407071405262826, 0.33654008245099387, 0.30225059095684514, 0.28588814189514133, 0.13888218033040034, 0.13981789872150618, 0.13523826413724616, 0.13522623183099136, 0.1292161103513093, 0.10565333463443405, 0.13523519822897323, 0.14520141875006343, 0.1548767547731108, 0.10556802839667911, 0.11181783913715448, 0.1368273731403844, 0.10733898880726833, 0.1413152532399421, 0.09957327751337453, 0.11020018860334968, 0.10601090205277908, 0.1068701579604664, 0.8701107950519178, 0.9166887014360969, 0.8794648297326908, 0.9026539959793303, 0.8369619383304856, 0.8604145782515467, 0.9136974646365729, 0.9034019571919122, 0.9168048868124753, 0.41646521665402225, 0.4241346594772567, 0.41685719080547035, 0.40390160272271514, 0.4223263340599608, 0.4329914433198492, 0.41158512692677673, 0.45174629047723647, 0.4031325118483102, 0.7689625586478606, 0.7120792369613278, 0.6647638220352601, 0.7214056095517793, 0.7016038680258551, 0.7260738422829174, 0.7196359226545717, 0.6756751079011458, 0.7269586214774447, 0.2665472527943039, 0.34547332009356246, 0.3459350638919163, 0.3136391218037553, 0.30464081550628186, 0.26137387758303054, 0.3159145361358491, 0.3377514811778316, 0.29848543966482943, 0.33887163202728365, 0.35276602292079084, 0.35462593188132474, 0.3446172097067144, 0.3196751063196446, 0.3153739572147367, 0.315643516093868, 0.30481547769258843, 0.34182067210563605, 0.0850894595524353, 0.05542626847760912, 0.14420850781667816, 0.16014201884332147, 0.17690552478630617, 0.14279018289142842, 0.11886121095820856, 0.09345365566081765, 0.1909218723966133, 0.14724285474621635, 0.15337090552801202, 0.17699764762644155, 0.18214036040331427, 0.11221169784630525, 0.1738307037978144, 0.15501096873452347, 0.2670132877479501, 0.14408088864141755, 0.14131859523532453, 0.05390415685733119, 0.1285326602397081, 0.13955275510303067, 0.08911750907489147, 0.053027779621542814, 0.1470311857972858, 0.11697327772000465, 0.09972096237763739, 0.2084926677455452, 0.1950739349169286, 0.23248903278192512, 0.2219504995507391, 0.21369219233440273, 0.2033363839520843, 0.21772205376322762, 0.21947223839216734, 0.2038130642931686, 0.5418142571923248, 0.5715349798567688, 0.566306153379492, 0.5485678119399933, 0.5722668817937469, 0.5591402757218054, 0.5743573339213391, 0.5828282023792253, 0.5722065871164348, 0.11666433953108224, 0.12191263433733401, 0.11139237501135157, 0.12207774102857383, 0.14883396217191824, 0.1458835595343453, 0.12225882755378148, 0.2529681624990927, 0.10629139003186794, 0.22460128778038846, 0.3579847048510111, 0.3101993510848733, 0.26379436196001194, 0.38052211852504747, 0.30094712177300165, 0.2408862247416429, 0.2960275487005132, 0.15195401594644375, 0.38098176308097387, 0.3794163096733052, 0.37816472767583453, 0.37493577690797764, 0.3704251166591842, 0.3753909190764133, 0.3779285961801109, 0.40210295296163423, 0.3620210548756817, 0.29554911578099285, 0.30396476415195384, 0.3216392813225105, 0.302622995423631, 0.30385048279295657, 0.31224157570057265, 0.31449166426240094, 0.319339847669852, 0.30251875777998105, 0.2327900923555155, 0.21582617426830486, 0.22828135713221587, 0.21570212811727774, 0.22529775004146013, 0.23444901076418223, 0.23347341881177464, 0.21034337002569015, 0.2554020164624038, 0.20970708288714968, 0.2008656167170363, 0.43736074385625034, 0.22626484818198545, 0.2126009968965037, 0.20254009442281595, 0.20343779527603045, 0.21976731979189879, 0.1812775890274736, 0.1818641025670611, 0.18585327422378517, 0.7759918343498198, 0.19277173941302284, 0.19488516320695481, 0.16264452794463158, 0.7695269760076111, 0.16488617322867938, 0.8055525153563015, 0.7846525834302637, 0.20500907749803776, 0.7397912506852184, 0.7163037834967514, 0.725526771656576, 0.7133716928762615, 0.16572972072283465, 0.6898865075054132, 0.7093561515873469, 0.18054457633927146, 0.1905789633882018, 0.20666156379619793, 0.17711241838455993, 0.18210015354562026, 0.20901798103786706, 0.18263104734030844, 0.19011451317160077, 0.20031371357434224, 0.10179471963720554, 0.08695200091185684, 0.09527404220642643, 0.09368741906676281, 0.09143212884073892, 0.08949556664686242, 0.08700130650706528, 0.07833483776281269, 0.08756957134740628]}, "mutation_prompt": null}
{"id": "61010ddd-fbe9-4a01-bc70-fa28006d5ff0", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 100\n        self.inertia_weight = 0.5\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.population_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        \n        for i in range(self.population_size):\n            score = func(particles[i])\n            personal_best_scores[i] = score\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coef * r1 * (personal_best_positions[i] - particles[i])\n                                 + self.social_coef * r2 * (global_best_position - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = np.random.choice(self.population_size, 3, replace=False)\n                while i in idxs:\n                    idxs = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = particles[idxs]\n                adaptive_mutation = self.mutation_factor * (1 - eval_count / self.budget)\n                mutant_vector = a + adaptive_mutation * (b - c)\n                trial_vector = np.copy(particles[i])\n                \n                crossover_mask = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover_mask] = mutant_vector[crossover_mask]\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_score = func(trial_vector)\n                eval_count += 1\n\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial_vector\n                    personal_best_scores[i] = trial_score\n\n                if trial_score < personal_best_scores[global_best_index]:\n                    global_best_position = trial_vector\n                    global_best_index = i\n\n        return global_best_position", "name": "EnhancedHybridPSODE", "description": "Enhanced HybridPSODE using adaptive mutation factors and dynamic velocities for improved convergence.", "configspace": "", "generation": 73, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "43138693-7d4a-40d3-9a8b-0a5af63f6ab5", "metadata": {"aucs": [0.6662416661548809, 0.6513623018132353, 0.6633375871038292, 0.6545229616175576, 0.6598521763290217, 0.6474942331665055, 0.6548421184499535, 0.6605922871738547, 0.6498376514717851, 0.3252265281491423, 0.3510259524679392, 0.3547799137549077, 0.33640688391667783, 0.3579326919492658, 0.3407071405262826, 0.33654008245099387, 0.30225059095684514, 0.28588814189514133, 0.13888218033040034, 0.13981789872150618, 0.13523826413724616, 0.13522623183099136, 0.1292161103513093, 0.10565333463443405, 0.13523519822897323, 0.14520141875006343, 0.1548767547731108, 0.10556802839667911, 0.11181783913715448, 0.1368273731403844, 0.10733898880726833, 0.1413152532399421, 0.09957327751337453, 0.11020018860334968, 0.10601090205277908, 0.1068701579604664, 0.8701107950519178, 0.9166887014360969, 0.8794648297326908, 0.9026539959793303, 0.8369619383304856, 0.8604145782515467, 0.9136974646365729, 0.9034019571919122, 0.9168048868124753, 0.41646521665402225, 0.4241346594772567, 0.41685719080547035, 0.40390160272271514, 0.4223263340599608, 0.4329914433198492, 0.41158512692677673, 0.45174629047723647, 0.4031325118483102, 0.7689625586478606, 0.7120792369613278, 0.6647638220352601, 0.7214056095517793, 0.7016038680258551, 0.7260738422829174, 0.7196359226545717, 0.6756751079011458, 0.7269586214774447, 0.2665472527943039, 0.34547332009356246, 0.3459350638919163, 0.3136391218037553, 0.30464081550628186, 0.26137387758303054, 0.3159145361358491, 0.3377514811778316, 0.29848543966482943, 0.33887163202728365, 0.35276602292079084, 0.35462593188132474, 0.3446172097067144, 0.3196751063196446, 0.3153739572147367, 0.315643516093868, 0.30481547769258843, 0.34182067210563605, 0.0850894595524353, 0.05542626847760912, 0.14420850781667816, 0.16014201884332147, 0.17690552478630617, 0.14279018289142842, 0.11886121095820856, 0.09345365566081765, 0.1909218723966133, 0.14724285474621635, 0.15337090552801202, 0.17699764762644155, 0.18214036040331427, 0.11221169784630525, 0.1738307037978144, 0.15501096873452347, 0.2670132877479501, 0.14408088864141755, 0.14131859523532453, 0.05390415685733119, 0.1285326602397081, 0.13955275510303067, 0.08911750907489147, 0.053027779621542814, 0.1470311857972858, 0.11697327772000465, 0.09972096237763739, 0.2084926677455452, 0.1950739349169286, 0.23248903278192512, 0.2219504995507391, 0.21369219233440273, 0.2033363839520843, 0.21772205376322762, 0.21947223839216734, 0.2038130642931686, 0.5418142571923248, 0.5715349798567688, 0.566306153379492, 0.5485678119399933, 0.5722668817937469, 0.5591402757218054, 0.5743573339213391, 0.5828282023792253, 0.5722065871164348, 0.11666433953108224, 0.12191263433733401, 0.11139237501135157, 0.12207774102857383, 0.14883396217191824, 0.1458835595343453, 0.12225882755378148, 0.2529681624990927, 0.10629139003186794, 0.22460128778038846, 0.3579847048510111, 0.3101993510848733, 0.26379436196001194, 0.38052211852504747, 0.30094712177300165, 0.2408862247416429, 0.2960275487005132, 0.15195401594644375, 0.38098176308097387, 0.3794163096733052, 0.37816472767583453, 0.37493577690797764, 0.3704251166591842, 0.3753909190764133, 0.3779285961801109, 0.40210295296163423, 0.3620210548756817, 0.29554911578099285, 0.30396476415195384, 0.3216392813225105, 0.302622995423631, 0.30385048279295657, 0.31224157570057265, 0.31449166426240094, 0.319339847669852, 0.30251875777998105, 0.2327900923555155, 0.21582617426830486, 0.22828135713221587, 0.21570212811727774, 0.22529775004146013, 0.23444901076418223, 0.23347341881177464, 0.21034337002569015, 0.2554020164624038, 0.20970708288714968, 0.2008656167170363, 0.43736074385625034, 0.22626484818198545, 0.2126009968965037, 0.20254009442281595, 0.20343779527603045, 0.21976731979189879, 0.1812775890274736, 0.1818641025670611, 0.18585327422378517, 0.7759918343498198, 0.19277173941302284, 0.19488516320695481, 0.16264452794463158, 0.7695269760076111, 0.16488617322867938, 0.8055525153563015, 0.7846525834302637, 0.20500907749803776, 0.7397912506852184, 0.7163037834967514, 0.725526771656576, 0.7133716928762615, 0.16572972072283465, 0.6898865075054132, 0.7093561515873469, 0.18054457633927146, 0.1905789633882018, 0.20666156379619793, 0.17711241838455993, 0.18210015354562026, 0.20901798103786706, 0.18263104734030844, 0.19011451317160077, 0.20031371357434224, 0.10179471963720554, 0.08695200091185684, 0.09527404220642643, 0.09368741906676281, 0.09143212884073892, 0.08949556664686242, 0.08700130650706528, 0.07833483776281269, 0.08756957134740628]}, "mutation_prompt": null}
{"id": "c6d2b813-6fa9-4135-a102-375c94df4b7c", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 100\n        self.inertia_weight = 0.5\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.population_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        \n        for i in range(self.population_size):\n            score = func(particles[i])\n            personal_best_scores[i] = score\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coef * r1 * (personal_best_positions[i] - particles[i])\n                                 + self.social_coef * r2 * (global_best_position - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = np.random.choice(self.population_size, 3, replace=False)\n                while i in idxs:\n                    idxs = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = particles[idxs]\n                adaptive_mutation = self.mutation_factor * (1 - eval_count / self.budget)\n                mutant_vector = a + adaptive_mutation * (b - c)\n                trial_vector = np.copy(particles[i])\n                \n                crossover_mask = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover_mask] = mutant_vector[crossover_mask]\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_score = func(trial_vector)\n                eval_count += 1\n\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial_vector\n                    personal_best_scores[i] = trial_score\n\n                if trial_score < personal_best_scores[global_best_index]:\n                    global_best_position = trial_vector\n                    global_best_index = i\n\n        return global_best_position", "name": "EnhancedHybridPSODE", "description": "Enhanced HybridPSODE using adaptive mutation factors and dynamic velocities for improved convergence.", "configspace": "", "generation": 73, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "43138693-7d4a-40d3-9a8b-0a5af63f6ab5", "metadata": {"aucs": [0.6662416661548809, 0.6513623018132353, 0.6633375871038292, 0.6545229616175576, 0.6598521763290217, 0.6474942331665055, 0.6548421184499535, 0.6605922871738547, 0.6498376514717851, 0.3252265281491423, 0.3510259524679392, 0.3547799137549077, 0.33640688391667783, 0.3579326919492658, 0.3407071405262826, 0.33654008245099387, 0.30225059095684514, 0.28588814189514133, 0.13888218033040034, 0.13981789872150618, 0.13523826413724616, 0.13522623183099136, 0.1292161103513093, 0.10565333463443405, 0.13523519822897323, 0.14520141875006343, 0.1548767547731108, 0.10556802839667911, 0.11181783913715448, 0.1368273731403844, 0.10733898880726833, 0.1413152532399421, 0.09957327751337453, 0.11020018860334968, 0.10601090205277908, 0.1068701579604664, 0.8701107950519178, 0.9166887014360969, 0.8794648297326908, 0.9026539959793303, 0.8369619383304856, 0.8604145782515467, 0.9136974646365729, 0.9034019571919122, 0.9168048868124753, 0.41646521665402225, 0.4241346594772567, 0.41685719080547035, 0.40390160272271514, 0.4223263340599608, 0.4329914433198492, 0.41158512692677673, 0.45174629047723647, 0.4031325118483102, 0.7689625586478606, 0.7120792369613278, 0.6647638220352601, 0.7214056095517793, 0.7016038680258551, 0.7260738422829174, 0.7196359226545717, 0.6756751079011458, 0.7269586214774447, 0.2665472527943039, 0.34547332009356246, 0.3459350638919163, 0.3136391218037553, 0.30464081550628186, 0.26137387758303054, 0.3159145361358491, 0.3377514811778316, 0.29848543966482943, 0.33887163202728365, 0.35276602292079084, 0.35462593188132474, 0.3446172097067144, 0.3196751063196446, 0.3153739572147367, 0.315643516093868, 0.30481547769258843, 0.34182067210563605, 0.0850894595524353, 0.05542626847760912, 0.14420850781667816, 0.16014201884332147, 0.17690552478630617, 0.14279018289142842, 0.11886121095820856, 0.09345365566081765, 0.1909218723966133, 0.14724285474621635, 0.15337090552801202, 0.17699764762644155, 0.18214036040331427, 0.11221169784630525, 0.1738307037978144, 0.15501096873452347, 0.2670132877479501, 0.14408088864141755, 0.14131859523532453, 0.05390415685733119, 0.1285326602397081, 0.13955275510303067, 0.08911750907489147, 0.053027779621542814, 0.1470311857972858, 0.11697327772000465, 0.09972096237763739, 0.2084926677455452, 0.1950739349169286, 0.23248903278192512, 0.2219504995507391, 0.21369219233440273, 0.2033363839520843, 0.21772205376322762, 0.21947223839216734, 0.2038130642931686, 0.5418142571923248, 0.5715349798567688, 0.566306153379492, 0.5485678119399933, 0.5722668817937469, 0.5591402757218054, 0.5743573339213391, 0.5828282023792253, 0.5722065871164348, 0.11666433953108224, 0.12191263433733401, 0.11139237501135157, 0.12207774102857383, 0.14883396217191824, 0.1458835595343453, 0.12225882755378148, 0.2529681624990927, 0.10629139003186794, 0.22460128778038846, 0.3579847048510111, 0.3101993510848733, 0.26379436196001194, 0.38052211852504747, 0.30094712177300165, 0.2408862247416429, 0.2960275487005132, 0.15195401594644375, 0.38098176308097387, 0.3794163096733052, 0.37816472767583453, 0.37493577690797764, 0.3704251166591842, 0.3753909190764133, 0.3779285961801109, 0.40210295296163423, 0.3620210548756817, 0.29554911578099285, 0.30396476415195384, 0.3216392813225105, 0.302622995423631, 0.30385048279295657, 0.31224157570057265, 0.31449166426240094, 0.319339847669852, 0.30251875777998105, 0.2327900923555155, 0.21582617426830486, 0.22828135713221587, 0.21570212811727774, 0.22529775004146013, 0.23444901076418223, 0.23347341881177464, 0.21034337002569015, 0.2554020164624038, 0.20970708288714968, 0.2008656167170363, 0.43736074385625034, 0.22626484818198545, 0.2126009968965037, 0.20254009442281595, 0.20343779527603045, 0.21976731979189879, 0.1812775890274736, 0.1818641025670611, 0.18585327422378517, 0.7759918343498198, 0.19277173941302284, 0.19488516320695481, 0.16264452794463158, 0.7695269760076111, 0.16488617322867938, 0.8055525153563015, 0.7846525834302637, 0.20500907749803776, 0.7397912506852184, 0.7163037834967514, 0.725526771656576, 0.7133716928762615, 0.16572972072283465, 0.6898865075054132, 0.7093561515873469, 0.18054457633927146, 0.1905789633882018, 0.20666156379619793, 0.17711241838455993, 0.18210015354562026, 0.20901798103786706, 0.18263104734030844, 0.19011451317160077, 0.20031371357434224, 0.10179471963720554, 0.08695200091185684, 0.09527404220642643, 0.09368741906676281, 0.09143212884073892, 0.08949556664686242, 0.08700130650706528, 0.07833483776281269, 0.08756957134740628]}, "mutation_prompt": null}
{"id": "aca17289-53e5-4270-b377-daa00dcf58d2", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 100\n        self.inertia_weight = 0.5\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.population_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        \n        for i in range(self.population_size):\n            score = func(particles[i])\n            personal_best_scores[i] = score\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coef * r1 * (personal_best_positions[i] - particles[i])\n                                 + self.social_coef * r2 * (global_best_position - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = np.random.choice(self.population_size, 3, replace=False)\n                while i in idxs:\n                    idxs = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = particles[idxs]\n                adaptive_mutation = self.mutation_factor * (1 - eval_count / self.budget)\n                mutant_vector = a + adaptive_mutation * (b - c)\n                trial_vector = np.copy(particles[i])\n                \n                crossover_mask = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover_mask] = mutant_vector[crossover_mask]\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_score = func(trial_vector)\n                eval_count += 1\n\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial_vector\n                    personal_best_scores[i] = trial_score\n\n                if trial_score < personal_best_scores[global_best_index]:\n                    global_best_position = trial_vector\n                    global_best_index = i\n\n        return global_best_position", "name": "EnhancedHybridPSODE", "description": "Enhanced HybridPSODE using adaptive mutation factors and dynamic velocities for improved convergence.", "configspace": "", "generation": 73, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "43138693-7d4a-40d3-9a8b-0a5af63f6ab5", "metadata": {"aucs": [0.6662416661548809, 0.6513623018132353, 0.6633375871038292, 0.6545229616175576, 0.6598521763290217, 0.6474942331665055, 0.6548421184499535, 0.6605922871738547, 0.6498376514717851, 0.3252265281491423, 0.3510259524679392, 0.3547799137549077, 0.33640688391667783, 0.3579326919492658, 0.3407071405262826, 0.33654008245099387, 0.30225059095684514, 0.28588814189514133, 0.13888218033040034, 0.13981789872150618, 0.13523826413724616, 0.13522623183099136, 0.1292161103513093, 0.10565333463443405, 0.13523519822897323, 0.14520141875006343, 0.1548767547731108, 0.10556802839667911, 0.11181783913715448, 0.1368273731403844, 0.10733898880726833, 0.1413152532399421, 0.09957327751337453, 0.11020018860334968, 0.10601090205277908, 0.1068701579604664, 0.8701107950519178, 0.9166887014360969, 0.8794648297326908, 0.9026539959793303, 0.8369619383304856, 0.8604145782515467, 0.9136974646365729, 0.9034019571919122, 0.9168048868124753, 0.41646521665402225, 0.4241346594772567, 0.41685719080547035, 0.40390160272271514, 0.4223263340599608, 0.4329914433198492, 0.41158512692677673, 0.45174629047723647, 0.4031325118483102, 0.7689625586478606, 0.7120792369613278, 0.6647638220352601, 0.7214056095517793, 0.7016038680258551, 0.7260738422829174, 0.7196359226545717, 0.6756751079011458, 0.7269586214774447, 0.2665472527943039, 0.34547332009356246, 0.3459350638919163, 0.3136391218037553, 0.30464081550628186, 0.26137387758303054, 0.3159145361358491, 0.3377514811778316, 0.29848543966482943, 0.33887163202728365, 0.35276602292079084, 0.35462593188132474, 0.3446172097067144, 0.3196751063196446, 0.3153739572147367, 0.315643516093868, 0.30481547769258843, 0.34182067210563605, 0.0850894595524353, 0.05542626847760912, 0.14420850781667816, 0.16014201884332147, 0.17690552478630617, 0.14279018289142842, 0.11886121095820856, 0.09345365566081765, 0.1909218723966133, 0.14724285474621635, 0.15337090552801202, 0.17699764762644155, 0.18214036040331427, 0.11221169784630525, 0.1738307037978144, 0.15501096873452347, 0.2670132877479501, 0.14408088864141755, 0.14131859523532453, 0.05390415685733119, 0.1285326602397081, 0.13955275510303067, 0.08911750907489147, 0.053027779621542814, 0.1470311857972858, 0.11697327772000465, 0.09972096237763739, 0.2084926677455452, 0.1950739349169286, 0.23248903278192512, 0.2219504995507391, 0.21369219233440273, 0.2033363839520843, 0.21772205376322762, 0.21947223839216734, 0.2038130642931686, 0.5418142571923248, 0.5715349798567688, 0.566306153379492, 0.5485678119399933, 0.5722668817937469, 0.5591402757218054, 0.5743573339213391, 0.5828282023792253, 0.5722065871164348, 0.11666433953108224, 0.12191263433733401, 0.11139237501135157, 0.12207774102857383, 0.14883396217191824, 0.1458835595343453, 0.12225882755378148, 0.2529681624990927, 0.10629139003186794, 0.22460128778038846, 0.3579847048510111, 0.3101993510848733, 0.26379436196001194, 0.38052211852504747, 0.30094712177300165, 0.2408862247416429, 0.2960275487005132, 0.15195401594644375, 0.38098176308097387, 0.3794163096733052, 0.37816472767583453, 0.37493577690797764, 0.3704251166591842, 0.3753909190764133, 0.3779285961801109, 0.40210295296163423, 0.3620210548756817, 0.29554911578099285, 0.30396476415195384, 0.3216392813225105, 0.302622995423631, 0.30385048279295657, 0.31224157570057265, 0.31449166426240094, 0.319339847669852, 0.30251875777998105, 0.2327900923555155, 0.21582617426830486, 0.22828135713221587, 0.21570212811727774, 0.22529775004146013, 0.23444901076418223, 0.23347341881177464, 0.21034337002569015, 0.2554020164624038, 0.20970708288714968, 0.2008656167170363, 0.43736074385625034, 0.22626484818198545, 0.2126009968965037, 0.20254009442281595, 0.20343779527603045, 0.21976731979189879, 0.1812775890274736, 0.1818641025670611, 0.18585327422378517, 0.7759918343498198, 0.19277173941302284, 0.19488516320695481, 0.16264452794463158, 0.7695269760076111, 0.16488617322867938, 0.8055525153563015, 0.7846525834302637, 0.20500907749803776, 0.7397912506852184, 0.7163037834967514, 0.725526771656576, 0.7133716928762615, 0.16572972072283465, 0.6898865075054132, 0.7093561515873469, 0.18054457633927146, 0.1905789633882018, 0.20666156379619793, 0.17711241838455993, 0.18210015354562026, 0.20901798103786706, 0.18263104734030844, 0.19011451317160077, 0.20031371357434224, 0.10179471963720554, 0.08695200091185684, 0.09527404220642643, 0.09368741906676281, 0.09143212884073892, 0.08949556664686242, 0.08700130650706528, 0.07833483776281269, 0.08756957134740628]}, "mutation_prompt": null}
{"id": "567eefb6-d518-43cc-8cb5-6e1a20eedc7f", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 100\n        self.inertia_weight = 0.5\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.population_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        \n        for i in range(self.population_size):\n            score = func(particles[i])\n            personal_best_scores[i] = score\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coef * r1 * (personal_best_positions[i] - particles[i])\n                                 + self.social_coef * r2 * (global_best_position - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = np.random.choice(self.population_size, 3, replace=False)\n                while i in idxs:\n                    idxs = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = particles[idxs]\n                adaptive_mutation = self.mutation_factor * (1 - eval_count / self.budget)\n                mutant_vector = a + adaptive_mutation * (b - c)\n                trial_vector = np.copy(particles[i])\n                \n                crossover_mask = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover_mask] = mutant_vector[crossover_mask]\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_score = func(trial_vector)\n                eval_count += 1\n\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial_vector\n                    personal_best_scores[i] = trial_score\n\n                if trial_score < personal_best_scores[global_best_index]:\n                    global_best_position = trial_vector\n                    global_best_index = i\n\n        return global_best_position", "name": "EnhancedHybridPSODE", "description": "Enhanced HybridPSODE using adaptive mutation factors and dynamic velocities for improved convergence.", "configspace": "", "generation": 73, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "43138693-7d4a-40d3-9a8b-0a5af63f6ab5", "metadata": {"aucs": [0.6662416661548809, 0.6513623018132353, 0.6633375871038292, 0.6545229616175576, 0.6598521763290217, 0.6474942331665055, 0.6548421184499535, 0.6605922871738547, 0.6498376514717851, 0.3252265281491423, 0.3510259524679392, 0.3547799137549077, 0.33640688391667783, 0.3579326919492658, 0.3407071405262826, 0.33654008245099387, 0.30225059095684514, 0.28588814189514133, 0.13888218033040034, 0.13981789872150618, 0.13523826413724616, 0.13522623183099136, 0.1292161103513093, 0.10565333463443405, 0.13523519822897323, 0.14520141875006343, 0.1548767547731108, 0.10556802839667911, 0.11181783913715448, 0.1368273731403844, 0.10733898880726833, 0.1413152532399421, 0.09957327751337453, 0.11020018860334968, 0.10601090205277908, 0.1068701579604664, 0.8701107950519178, 0.9166887014360969, 0.8794648297326908, 0.9026539959793303, 0.8369619383304856, 0.8604145782515467, 0.9136974646365729, 0.9034019571919122, 0.9168048868124753, 0.41646521665402225, 0.4241346594772567, 0.41685719080547035, 0.40390160272271514, 0.4223263340599608, 0.4329914433198492, 0.41158512692677673, 0.45174629047723647, 0.4031325118483102, 0.7689625586478606, 0.7120792369613278, 0.6647638220352601, 0.7214056095517793, 0.7016038680258551, 0.7260738422829174, 0.7196359226545717, 0.6756751079011458, 0.7269586214774447, 0.2665472527943039, 0.34547332009356246, 0.3459350638919163, 0.3136391218037553, 0.30464081550628186, 0.26137387758303054, 0.3159145361358491, 0.3377514811778316, 0.29848543966482943, 0.33887163202728365, 0.35276602292079084, 0.35462593188132474, 0.3446172097067144, 0.3196751063196446, 0.3153739572147367, 0.315643516093868, 0.30481547769258843, 0.34182067210563605, 0.0850894595524353, 0.05542626847760912, 0.14420850781667816, 0.16014201884332147, 0.17690552478630617, 0.14279018289142842, 0.11886121095820856, 0.09345365566081765, 0.1909218723966133, 0.14724285474621635, 0.15337090552801202, 0.17699764762644155, 0.18214036040331427, 0.11221169784630525, 0.1738307037978144, 0.15501096873452347, 0.2670132877479501, 0.14408088864141755, 0.14131859523532453, 0.05390415685733119, 0.1285326602397081, 0.13955275510303067, 0.08911750907489147, 0.053027779621542814, 0.1470311857972858, 0.11697327772000465, 0.09972096237763739, 0.2084926677455452, 0.1950739349169286, 0.23248903278192512, 0.2219504995507391, 0.21369219233440273, 0.2033363839520843, 0.21772205376322762, 0.21947223839216734, 0.2038130642931686, 0.5418142571923248, 0.5715349798567688, 0.566306153379492, 0.5485678119399933, 0.5722668817937469, 0.5591402757218054, 0.5743573339213391, 0.5828282023792253, 0.5722065871164348, 0.11666433953108224, 0.12191263433733401, 0.11139237501135157, 0.12207774102857383, 0.14883396217191824, 0.1458835595343453, 0.12225882755378148, 0.2529681624990927, 0.10629139003186794, 0.22460128778038846, 0.3579847048510111, 0.3101993510848733, 0.26379436196001194, 0.38052211852504747, 0.30094712177300165, 0.2408862247416429, 0.2960275487005132, 0.15195401594644375, 0.38098176308097387, 0.3794163096733052, 0.37816472767583453, 0.37493577690797764, 0.3704251166591842, 0.3753909190764133, 0.3779285961801109, 0.40210295296163423, 0.3620210548756817, 0.29554911578099285, 0.30396476415195384, 0.3216392813225105, 0.302622995423631, 0.30385048279295657, 0.31224157570057265, 0.31449166426240094, 0.319339847669852, 0.30251875777998105, 0.2327900923555155, 0.21582617426830486, 0.22828135713221587, 0.21570212811727774, 0.22529775004146013, 0.23444901076418223, 0.23347341881177464, 0.21034337002569015, 0.2554020164624038, 0.20970708288714968, 0.2008656167170363, 0.43736074385625034, 0.22626484818198545, 0.2126009968965037, 0.20254009442281595, 0.20343779527603045, 0.21976731979189879, 0.1812775890274736, 0.1818641025670611, 0.18585327422378517, 0.7759918343498198, 0.19277173941302284, 0.19488516320695481, 0.16264452794463158, 0.7695269760076111, 0.16488617322867938, 0.8055525153563015, 0.7846525834302637, 0.20500907749803776, 0.7397912506852184, 0.7163037834967514, 0.725526771656576, 0.7133716928762615, 0.16572972072283465, 0.6898865075054132, 0.7093561515873469, 0.18054457633927146, 0.1905789633882018, 0.20666156379619793, 0.17711241838455993, 0.18210015354562026, 0.20901798103786706, 0.18263104734030844, 0.19011451317160077, 0.20031371357434224, 0.10179471963720554, 0.08695200091185684, 0.09527404220642643, 0.09368741906676281, 0.09143212884073892, 0.08949556664686242, 0.08700130650706528, 0.07833483776281269, 0.08756957134740628]}, "mutation_prompt": null}
{"id": "592d2831-134e-441d-b472-c3d45685f989", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 100\n        self.inertia_weight = 0.5\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.population_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        \n        for i in range(self.population_size):\n            score = func(particles[i])\n            personal_best_scores[i] = score\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coef * r1 * (personal_best_positions[i] - particles[i])\n                                 + self.social_coef * r2 * (global_best_position - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = np.random.choice(self.population_size, 3, replace=False)\n                while i in idxs:\n                    idxs = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = particles[idxs]\n                adaptive_mutation = self.mutation_factor * (1 - eval_count / self.budget)\n                mutant_vector = a + adaptive_mutation * (b - c)\n                trial_vector = np.copy(particles[i])\n                \n                crossover_mask = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover_mask] = mutant_vector[crossover_mask]\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_score = func(trial_vector)\n                eval_count += 1\n\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial_vector\n                    personal_best_scores[i] = trial_score\n\n                if trial_score < personal_best_scores[global_best_index]:\n                    global_best_position = trial_vector\n                    global_best_index = i\n\n        return global_best_position", "name": "EnhancedHybridPSODE", "description": "Enhanced HybridPSODE using adaptive mutation factors and dynamic velocities for improved convergence.", "configspace": "", "generation": 73, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "43138693-7d4a-40d3-9a8b-0a5af63f6ab5", "metadata": {"aucs": [0.6662416661548809, 0.6513623018132353, 0.6633375871038292, 0.6545229616175576, 0.6598521763290217, 0.6474942331665055, 0.6548421184499535, 0.6605922871738547, 0.6498376514717851, 0.3252265281491423, 0.3510259524679392, 0.3547799137549077, 0.33640688391667783, 0.3579326919492658, 0.3407071405262826, 0.33654008245099387, 0.30225059095684514, 0.28588814189514133, 0.13888218033040034, 0.13981789872150618, 0.13523826413724616, 0.13522623183099136, 0.1292161103513093, 0.10565333463443405, 0.13523519822897323, 0.14520141875006343, 0.1548767547731108, 0.10556802839667911, 0.11181783913715448, 0.1368273731403844, 0.10733898880726833, 0.1413152532399421, 0.09957327751337453, 0.11020018860334968, 0.10601090205277908, 0.1068701579604664, 0.8701107950519178, 0.9166887014360969, 0.8794648297326908, 0.9026539959793303, 0.8369619383304856, 0.8604145782515467, 0.9136974646365729, 0.9034019571919122, 0.9168048868124753, 0.41646521665402225, 0.4241346594772567, 0.41685719080547035, 0.40390160272271514, 0.4223263340599608, 0.4329914433198492, 0.41158512692677673, 0.45174629047723647, 0.4031325118483102, 0.7689625586478606, 0.7120792369613278, 0.6647638220352601, 0.7214056095517793, 0.7016038680258551, 0.7260738422829174, 0.7196359226545717, 0.6756751079011458, 0.7269586214774447, 0.2665472527943039, 0.34547332009356246, 0.3459350638919163, 0.3136391218037553, 0.30464081550628186, 0.26137387758303054, 0.3159145361358491, 0.3377514811778316, 0.29848543966482943, 0.33887163202728365, 0.35276602292079084, 0.35462593188132474, 0.3446172097067144, 0.3196751063196446, 0.3153739572147367, 0.315643516093868, 0.30481547769258843, 0.34182067210563605, 0.0850894595524353, 0.05542626847760912, 0.14420850781667816, 0.16014201884332147, 0.17690552478630617, 0.14279018289142842, 0.11886121095820856, 0.09345365566081765, 0.1909218723966133, 0.14724285474621635, 0.15337090552801202, 0.17699764762644155, 0.18214036040331427, 0.11221169784630525, 0.1738307037978144, 0.15501096873452347, 0.2670132877479501, 0.14408088864141755, 0.14131859523532453, 0.05390415685733119, 0.1285326602397081, 0.13955275510303067, 0.08911750907489147, 0.053027779621542814, 0.1470311857972858, 0.11697327772000465, 0.09972096237763739, 0.2084926677455452, 0.1950739349169286, 0.23248903278192512, 0.2219504995507391, 0.21369219233440273, 0.2033363839520843, 0.21772205376322762, 0.21947223839216734, 0.2038130642931686, 0.5418142571923248, 0.5715349798567688, 0.566306153379492, 0.5485678119399933, 0.5722668817937469, 0.5591402757218054, 0.5743573339213391, 0.5828282023792253, 0.5722065871164348, 0.11666433953108224, 0.12191263433733401, 0.11139237501135157, 0.12207774102857383, 0.14883396217191824, 0.1458835595343453, 0.12225882755378148, 0.2529681624990927, 0.10629139003186794, 0.22460128778038846, 0.3579847048510111, 0.3101993510848733, 0.26379436196001194, 0.38052211852504747, 0.30094712177300165, 0.2408862247416429, 0.2960275487005132, 0.15195401594644375, 0.38098176308097387, 0.3794163096733052, 0.37816472767583453, 0.37493577690797764, 0.3704251166591842, 0.3753909190764133, 0.3779285961801109, 0.40210295296163423, 0.3620210548756817, 0.29554911578099285, 0.30396476415195384, 0.3216392813225105, 0.302622995423631, 0.30385048279295657, 0.31224157570057265, 0.31449166426240094, 0.319339847669852, 0.30251875777998105, 0.2327900923555155, 0.21582617426830486, 0.22828135713221587, 0.21570212811727774, 0.22529775004146013, 0.23444901076418223, 0.23347341881177464, 0.21034337002569015, 0.2554020164624038, 0.20970708288714968, 0.2008656167170363, 0.43736074385625034, 0.22626484818198545, 0.2126009968965037, 0.20254009442281595, 0.20343779527603045, 0.21976731979189879, 0.1812775890274736, 0.1818641025670611, 0.18585327422378517, 0.7759918343498198, 0.19277173941302284, 0.19488516320695481, 0.16264452794463158, 0.7695269760076111, 0.16488617322867938, 0.8055525153563015, 0.7846525834302637, 0.20500907749803776, 0.7397912506852184, 0.7163037834967514, 0.725526771656576, 0.7133716928762615, 0.16572972072283465, 0.6898865075054132, 0.7093561515873469, 0.18054457633927146, 0.1905789633882018, 0.20666156379619793, 0.17711241838455993, 0.18210015354562026, 0.20901798103786706, 0.18263104734030844, 0.19011451317160077, 0.20031371357434224, 0.10179471963720554, 0.08695200091185684, 0.09527404220642643, 0.09368741906676281, 0.09143212884073892, 0.08949556664686242, 0.08700130650706528, 0.07833483776281269, 0.08756957134740628]}, "mutation_prompt": null}
{"id": "6e5ff85c-5ba0-4df1-967d-3cd88cf9e172", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 100\n        self.inertia_weight = 0.5\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.population_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        \n        for i in range(self.population_size):\n            score = func(particles[i])\n            personal_best_scores[i] = score\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coef * r1 * (personal_best_positions[i] - particles[i])\n                                 + self.social_coef * r2 * (global_best_position - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = np.random.choice(self.population_size, 3, replace=False)\n                while i in idxs:\n                    idxs = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = particles[idxs]\n                adaptive_mutation = self.mutation_factor * (1 - eval_count / self.budget)\n                mutant_vector = a + adaptive_mutation * (b - c)\n                trial_vector = np.copy(particles[i])\n                \n                crossover_mask = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover_mask] = mutant_vector[crossover_mask]\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_score = func(trial_vector)\n                eval_count += 1\n\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial_vector\n                    personal_best_scores[i] = trial_score\n\n                if trial_score < personal_best_scores[global_best_index]:\n                    global_best_position = trial_vector\n                    global_best_index = i\n\n        return global_best_position", "name": "EnhancedHybridPSODE", "description": "Enhanced HybridPSODE using adaptive mutation factors and dynamic velocities for improved convergence.", "configspace": "", "generation": 73, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "43138693-7d4a-40d3-9a8b-0a5af63f6ab5", "metadata": {"aucs": [0.6662416661548809, 0.6513623018132353, 0.6633375871038292, 0.6545229616175576, 0.6598521763290217, 0.6474942331665055, 0.6548421184499535, 0.6605922871738547, 0.6498376514717851, 0.3252265281491423, 0.3510259524679392, 0.3547799137549077, 0.33640688391667783, 0.3579326919492658, 0.3407071405262826, 0.33654008245099387, 0.30225059095684514, 0.28588814189514133, 0.13888218033040034, 0.13981789872150618, 0.13523826413724616, 0.13522623183099136, 0.1292161103513093, 0.10565333463443405, 0.13523519822897323, 0.14520141875006343, 0.1548767547731108, 0.10556802839667911, 0.11181783913715448, 0.1368273731403844, 0.10733898880726833, 0.1413152532399421, 0.09957327751337453, 0.11020018860334968, 0.10601090205277908, 0.1068701579604664, 0.8701107950519178, 0.9166887014360969, 0.8794648297326908, 0.9026539959793303, 0.8369619383304856, 0.8604145782515467, 0.9136974646365729, 0.9034019571919122, 0.9168048868124753, 0.41646521665402225, 0.4241346594772567, 0.41685719080547035, 0.40390160272271514, 0.4223263340599608, 0.4329914433198492, 0.41158512692677673, 0.45174629047723647, 0.4031325118483102, 0.7689625586478606, 0.7120792369613278, 0.6647638220352601, 0.7214056095517793, 0.7016038680258551, 0.7260738422829174, 0.7196359226545717, 0.6756751079011458, 0.7269586214774447, 0.2665472527943039, 0.34547332009356246, 0.3459350638919163, 0.3136391218037553, 0.30464081550628186, 0.26137387758303054, 0.3159145361358491, 0.3377514811778316, 0.29848543966482943, 0.33887163202728365, 0.35276602292079084, 0.35462593188132474, 0.3446172097067144, 0.3196751063196446, 0.3153739572147367, 0.315643516093868, 0.30481547769258843, 0.34182067210563605, 0.0850894595524353, 0.05542626847760912, 0.14420850781667816, 0.16014201884332147, 0.17690552478630617, 0.14279018289142842, 0.11886121095820856, 0.09345365566081765, 0.1909218723966133, 0.14724285474621635, 0.15337090552801202, 0.17699764762644155, 0.18214036040331427, 0.11221169784630525, 0.1738307037978144, 0.15501096873452347, 0.2670132877479501, 0.14408088864141755, 0.14131859523532453, 0.05390415685733119, 0.1285326602397081, 0.13955275510303067, 0.08911750907489147, 0.053027779621542814, 0.1470311857972858, 0.11697327772000465, 0.09972096237763739, 0.2084926677455452, 0.1950739349169286, 0.23248903278192512, 0.2219504995507391, 0.21369219233440273, 0.2033363839520843, 0.21772205376322762, 0.21947223839216734, 0.2038130642931686, 0.5418142571923248, 0.5715349798567688, 0.566306153379492, 0.5485678119399933, 0.5722668817937469, 0.5591402757218054, 0.5743573339213391, 0.5828282023792253, 0.5722065871164348, 0.11666433953108224, 0.12191263433733401, 0.11139237501135157, 0.12207774102857383, 0.14883396217191824, 0.1458835595343453, 0.12225882755378148, 0.2529681624990927, 0.10629139003186794, 0.22460128778038846, 0.3579847048510111, 0.3101993510848733, 0.26379436196001194, 0.38052211852504747, 0.30094712177300165, 0.2408862247416429, 0.2960275487005132, 0.15195401594644375, 0.38098176308097387, 0.3794163096733052, 0.37816472767583453, 0.37493577690797764, 0.3704251166591842, 0.3753909190764133, 0.3779285961801109, 0.40210295296163423, 0.3620210548756817, 0.29554911578099285, 0.30396476415195384, 0.3216392813225105, 0.302622995423631, 0.30385048279295657, 0.31224157570057265, 0.31449166426240094, 0.319339847669852, 0.30251875777998105, 0.2327900923555155, 0.21582617426830486, 0.22828135713221587, 0.21570212811727774, 0.22529775004146013, 0.23444901076418223, 0.23347341881177464, 0.21034337002569015, 0.2554020164624038, 0.20970708288714968, 0.2008656167170363, 0.43736074385625034, 0.22626484818198545, 0.2126009968965037, 0.20254009442281595, 0.20343779527603045, 0.21976731979189879, 0.1812775890274736, 0.1818641025670611, 0.18585327422378517, 0.7759918343498198, 0.19277173941302284, 0.19488516320695481, 0.16264452794463158, 0.7695269760076111, 0.16488617322867938, 0.8055525153563015, 0.7846525834302637, 0.20500907749803776, 0.7397912506852184, 0.7163037834967514, 0.725526771656576, 0.7133716928762615, 0.16572972072283465, 0.6898865075054132, 0.7093561515873469, 0.18054457633927146, 0.1905789633882018, 0.20666156379619793, 0.17711241838455993, 0.18210015354562026, 0.20901798103786706, 0.18263104734030844, 0.19011451317160077, 0.20031371357434224, 0.10179471963720554, 0.08695200091185684, 0.09527404220642643, 0.09368741906676281, 0.09143212884073892, 0.08949556664686242, 0.08700130650706528, 0.07833483776281269, 0.08756957134740628]}, "mutation_prompt": null}
{"id": "1732fe8d-b3f8-495e-908f-3378ed81504b", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 100\n        self.inertia_weight = 0.5\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.population_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        \n        for i in range(self.population_size):\n            score = func(particles[i])\n            personal_best_scores[i] = score\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coef * r1 * (personal_best_positions[i] - particles[i])\n                                 + self.social_coef * r2 * (global_best_position - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = np.random.choice(self.population_size, 3, replace=False)\n                while i in idxs:\n                    idxs = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = particles[idxs]\n                adaptive_mutation = self.mutation_factor * (1 - eval_count / self.budget)\n                mutant_vector = a + adaptive_mutation * (b - c)\n                trial_vector = np.copy(particles[i])\n                \n                crossover_mask = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover_mask] = mutant_vector[crossover_mask]\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_score = func(trial_vector)\n                eval_count += 1\n\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial_vector\n                    personal_best_scores[i] = trial_score\n\n                if trial_score < personal_best_scores[global_best_index]:\n                    global_best_position = trial_vector\n                    global_best_index = i\n\n        return global_best_position", "name": "EnhancedHybridPSODE", "description": "Enhanced HybridPSODE using adaptive mutation factors and dynamic velocities for improved convergence.", "configspace": "", "generation": 73, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "43138693-7d4a-40d3-9a8b-0a5af63f6ab5", "metadata": {"aucs": [0.6662416661548809, 0.6513623018132353, 0.6633375871038292, 0.6545229616175576, 0.6598521763290217, 0.6474942331665055, 0.6548421184499535, 0.6605922871738547, 0.6498376514717851, 0.3252265281491423, 0.3510259524679392, 0.3547799137549077, 0.33640688391667783, 0.3579326919492658, 0.3407071405262826, 0.33654008245099387, 0.30225059095684514, 0.28588814189514133, 0.13888218033040034, 0.13981789872150618, 0.13523826413724616, 0.13522623183099136, 0.1292161103513093, 0.10565333463443405, 0.13523519822897323, 0.14520141875006343, 0.1548767547731108, 0.10556802839667911, 0.11181783913715448, 0.1368273731403844, 0.10733898880726833, 0.1413152532399421, 0.09957327751337453, 0.11020018860334968, 0.10601090205277908, 0.1068701579604664, 0.8701107950519178, 0.9166887014360969, 0.8794648297326908, 0.9026539959793303, 0.8369619383304856, 0.8604145782515467, 0.9136974646365729, 0.9034019571919122, 0.9168048868124753, 0.41646521665402225, 0.4241346594772567, 0.41685719080547035, 0.40390160272271514, 0.4223263340599608, 0.4329914433198492, 0.41158512692677673, 0.45174629047723647, 0.4031325118483102, 0.7689625586478606, 0.7120792369613278, 0.6647638220352601, 0.7214056095517793, 0.7016038680258551, 0.7260738422829174, 0.7196359226545717, 0.6756751079011458, 0.7269586214774447, 0.2665472527943039, 0.34547332009356246, 0.3459350638919163, 0.3136391218037553, 0.30464081550628186, 0.26137387758303054, 0.3159145361358491, 0.3377514811778316, 0.29848543966482943, 0.33887163202728365, 0.35276602292079084, 0.35462593188132474, 0.3446172097067144, 0.3196751063196446, 0.3153739572147367, 0.315643516093868, 0.30481547769258843, 0.34182067210563605, 0.0850894595524353, 0.05542626847760912, 0.14420850781667816, 0.16014201884332147, 0.17690552478630617, 0.14279018289142842, 0.11886121095820856, 0.09345365566081765, 0.1909218723966133, 0.14724285474621635, 0.15337090552801202, 0.17699764762644155, 0.18214036040331427, 0.11221169784630525, 0.1738307037978144, 0.15501096873452347, 0.2670132877479501, 0.14408088864141755, 0.14131859523532453, 0.05390415685733119, 0.1285326602397081, 0.13955275510303067, 0.08911750907489147, 0.053027779621542814, 0.1470311857972858, 0.11697327772000465, 0.09972096237763739, 0.2084926677455452, 0.1950739349169286, 0.23248903278192512, 0.2219504995507391, 0.21369219233440273, 0.2033363839520843, 0.21772205376322762, 0.21947223839216734, 0.2038130642931686, 0.5418142571923248, 0.5715349798567688, 0.566306153379492, 0.5485678119399933, 0.5722668817937469, 0.5591402757218054, 0.5743573339213391, 0.5828282023792253, 0.5722065871164348, 0.11666433953108224, 0.12191263433733401, 0.11139237501135157, 0.12207774102857383, 0.14883396217191824, 0.1458835595343453, 0.12225882755378148, 0.2529681624990927, 0.10629139003186794, 0.22460128778038846, 0.3579847048510111, 0.3101993510848733, 0.26379436196001194, 0.38052211852504747, 0.30094712177300165, 0.2408862247416429, 0.2960275487005132, 0.15195401594644375, 0.38098176308097387, 0.3794163096733052, 0.37816472767583453, 0.37493577690797764, 0.3704251166591842, 0.3753909190764133, 0.3779285961801109, 0.40210295296163423, 0.3620210548756817, 0.29554911578099285, 0.30396476415195384, 0.3216392813225105, 0.302622995423631, 0.30385048279295657, 0.31224157570057265, 0.31449166426240094, 0.319339847669852, 0.30251875777998105, 0.2327900923555155, 0.21582617426830486, 0.22828135713221587, 0.21570212811727774, 0.22529775004146013, 0.23444901076418223, 0.23347341881177464, 0.21034337002569015, 0.2554020164624038, 0.20970708288714968, 0.2008656167170363, 0.43736074385625034, 0.22626484818198545, 0.2126009968965037, 0.20254009442281595, 0.20343779527603045, 0.21976731979189879, 0.1812775890274736, 0.1818641025670611, 0.18585327422378517, 0.7759918343498198, 0.19277173941302284, 0.19488516320695481, 0.16264452794463158, 0.7695269760076111, 0.16488617322867938, 0.8055525153563015, 0.7846525834302637, 0.20500907749803776, 0.7397912506852184, 0.7163037834967514, 0.725526771656576, 0.7133716928762615, 0.16572972072283465, 0.6898865075054132, 0.7093561515873469, 0.18054457633927146, 0.1905789633882018, 0.20666156379619793, 0.17711241838455993, 0.18210015354562026, 0.20901798103786706, 0.18263104734030844, 0.19011451317160077, 0.20031371357434224, 0.10179471963720554, 0.08695200091185684, 0.09527404220642643, 0.09368741906676281, 0.09143212884073892, 0.08949556664686242, 0.08700130650706528, 0.07833483776281269, 0.08756957134740628]}, "mutation_prompt": null}
{"id": "7eb2e71b-bbb6-4cd6-bd7f-d0f92c1a217b", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 100\n        self.inertia_weight = 0.5\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.population_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        \n        for i in range(self.population_size):\n            score = func(particles[i])\n            personal_best_scores[i] = score\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coef * r1 * (personal_best_positions[i] - particles[i])\n                                 + self.social_coef * r2 * (global_best_position - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = np.random.choice(self.population_size, 3, replace=False)\n                while i in idxs:\n                    idxs = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = particles[idxs]\n                adaptive_mutation = self.mutation_factor * (1 - eval_count / self.budget)\n                mutant_vector = a + adaptive_mutation * (b - c)\n                trial_vector = np.copy(particles[i])\n                \n                crossover_mask = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover_mask] = mutant_vector[crossover_mask]\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_score = func(trial_vector)\n                eval_count += 1\n\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial_vector\n                    personal_best_scores[i] = trial_score\n\n                if trial_score < personal_best_scores[global_best_index]:\n                    global_best_position = trial_vector\n                    global_best_index = i\n\n        return global_best_position", "name": "EnhancedHybridPSODE", "description": "Enhanced HybridPSODE using adaptive mutation factors and dynamic velocities for improved convergence.", "configspace": "", "generation": 73, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "43138693-7d4a-40d3-9a8b-0a5af63f6ab5", "metadata": {"aucs": [0.6662416661548809, 0.6513623018132353, 0.6633375871038292, 0.6545229616175576, 0.6598521763290217, 0.6474942331665055, 0.6548421184499535, 0.6605922871738547, 0.6498376514717851, 0.3252265281491423, 0.3510259524679392, 0.3547799137549077, 0.33640688391667783, 0.3579326919492658, 0.3407071405262826, 0.33654008245099387, 0.30225059095684514, 0.28588814189514133, 0.13888218033040034, 0.13981789872150618, 0.13523826413724616, 0.13522623183099136, 0.1292161103513093, 0.10565333463443405, 0.13523519822897323, 0.14520141875006343, 0.1548767547731108, 0.10556802839667911, 0.11181783913715448, 0.1368273731403844, 0.10733898880726833, 0.1413152532399421, 0.09957327751337453, 0.11020018860334968, 0.10601090205277908, 0.1068701579604664, 0.8701107950519178, 0.9166887014360969, 0.8794648297326908, 0.9026539959793303, 0.8369619383304856, 0.8604145782515467, 0.9136974646365729, 0.9034019571919122, 0.9168048868124753, 0.41646521665402225, 0.4241346594772567, 0.41685719080547035, 0.40390160272271514, 0.4223263340599608, 0.4329914433198492, 0.41158512692677673, 0.45174629047723647, 0.4031325118483102, 0.7689625586478606, 0.7120792369613278, 0.6647638220352601, 0.7214056095517793, 0.7016038680258551, 0.7260738422829174, 0.7196359226545717, 0.6756751079011458, 0.7269586214774447, 0.2665472527943039, 0.34547332009356246, 0.3459350638919163, 0.3136391218037553, 0.30464081550628186, 0.26137387758303054, 0.3159145361358491, 0.3377514811778316, 0.29848543966482943, 0.33887163202728365, 0.35276602292079084, 0.35462593188132474, 0.3446172097067144, 0.3196751063196446, 0.3153739572147367, 0.315643516093868, 0.30481547769258843, 0.34182067210563605, 0.0850894595524353, 0.05542626847760912, 0.14420850781667816, 0.16014201884332147, 0.17690552478630617, 0.14279018289142842, 0.11886121095820856, 0.09345365566081765, 0.1909218723966133, 0.14724285474621635, 0.15337090552801202, 0.17699764762644155, 0.18214036040331427, 0.11221169784630525, 0.1738307037978144, 0.15501096873452347, 0.2670132877479501, 0.14408088864141755, 0.14131859523532453, 0.05390415685733119, 0.1285326602397081, 0.13955275510303067, 0.08911750907489147, 0.053027779621542814, 0.1470311857972858, 0.11697327772000465, 0.09972096237763739, 0.2084926677455452, 0.1950739349169286, 0.23248903278192512, 0.2219504995507391, 0.21369219233440273, 0.2033363839520843, 0.21772205376322762, 0.21947223839216734, 0.2038130642931686, 0.5418142571923248, 0.5715349798567688, 0.566306153379492, 0.5485678119399933, 0.5722668817937469, 0.5591402757218054, 0.5743573339213391, 0.5828282023792253, 0.5722065871164348, 0.11666433953108224, 0.12191263433733401, 0.11139237501135157, 0.12207774102857383, 0.14883396217191824, 0.1458835595343453, 0.12225882755378148, 0.2529681624990927, 0.10629139003186794, 0.22460128778038846, 0.3579847048510111, 0.3101993510848733, 0.26379436196001194, 0.38052211852504747, 0.30094712177300165, 0.2408862247416429, 0.2960275487005132, 0.15195401594644375, 0.38098176308097387, 0.3794163096733052, 0.37816472767583453, 0.37493577690797764, 0.3704251166591842, 0.3753909190764133, 0.3779285961801109, 0.40210295296163423, 0.3620210548756817, 0.29554911578099285, 0.30396476415195384, 0.3216392813225105, 0.302622995423631, 0.30385048279295657, 0.31224157570057265, 0.31449166426240094, 0.319339847669852, 0.30251875777998105, 0.2327900923555155, 0.21582617426830486, 0.22828135713221587, 0.21570212811727774, 0.22529775004146013, 0.23444901076418223, 0.23347341881177464, 0.21034337002569015, 0.2554020164624038, 0.20970708288714968, 0.2008656167170363, 0.43736074385625034, 0.22626484818198545, 0.2126009968965037, 0.20254009442281595, 0.20343779527603045, 0.21976731979189879, 0.1812775890274736, 0.1818641025670611, 0.18585327422378517, 0.7759918343498198, 0.19277173941302284, 0.19488516320695481, 0.16264452794463158, 0.7695269760076111, 0.16488617322867938, 0.8055525153563015, 0.7846525834302637, 0.20500907749803776, 0.7397912506852184, 0.7163037834967514, 0.725526771656576, 0.7133716928762615, 0.16572972072283465, 0.6898865075054132, 0.7093561515873469, 0.18054457633927146, 0.1905789633882018, 0.20666156379619793, 0.17711241838455993, 0.18210015354562026, 0.20901798103786706, 0.18263104734030844, 0.19011451317160077, 0.20031371357434224, 0.10179471963720554, 0.08695200091185684, 0.09527404220642643, 0.09368741906676281, 0.09143212884073892, 0.08949556664686242, 0.08700130650706528, 0.07833483776281269, 0.08756957134740628]}, "mutation_prompt": null}
{"id": "474199e3-bc06-4752-ba9d-4f5edffb4933", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 100\n        self.inertia_weight = 0.5\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.population_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        \n        for i in range(self.population_size):\n            score = func(particles[i])\n            personal_best_scores[i] = score\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coef * r1 * (personal_best_positions[i] - particles[i])\n                                 + self.social_coef * r2 * (global_best_position - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = np.random.choice(self.population_size, 3, replace=False)\n                while i in idxs:\n                    idxs = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = particles[idxs]\n                adaptive_mutation = self.mutation_factor * (1 - eval_count / self.budget)\n                mutant_vector = a + adaptive_mutation * (b - c)\n                trial_vector = np.copy(particles[i])\n                \n                crossover_mask = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover_mask] = mutant_vector[crossover_mask]\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_score = func(trial_vector)\n                eval_count += 1\n\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial_vector\n                    personal_best_scores[i] = trial_score\n\n                if trial_score < personal_best_scores[global_best_index]:\n                    global_best_position = trial_vector\n                    global_best_index = i\n\n        return global_best_position", "name": "EnhancedHybridPSODE", "description": "Enhanced HybridPSODE using adaptive mutation factors and dynamic velocities for improved convergence.", "configspace": "", "generation": 73, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "43138693-7d4a-40d3-9a8b-0a5af63f6ab5", "metadata": {"aucs": [0.6662416661548809, 0.6513623018132353, 0.6633375871038292, 0.6545229616175576, 0.6598521763290217, 0.6474942331665055, 0.6548421184499535, 0.6605922871738547, 0.6498376514717851, 0.3252265281491423, 0.3510259524679392, 0.3547799137549077, 0.33640688391667783, 0.3579326919492658, 0.3407071405262826, 0.33654008245099387, 0.30225059095684514, 0.28588814189514133, 0.13888218033040034, 0.13981789872150618, 0.13523826413724616, 0.13522623183099136, 0.1292161103513093, 0.10565333463443405, 0.13523519822897323, 0.14520141875006343, 0.1548767547731108, 0.10556802839667911, 0.11181783913715448, 0.1368273731403844, 0.10733898880726833, 0.1413152532399421, 0.09957327751337453, 0.11020018860334968, 0.10601090205277908, 0.1068701579604664, 0.8701107950519178, 0.9166887014360969, 0.8794648297326908, 0.9026539959793303, 0.8369619383304856, 0.8604145782515467, 0.9136974646365729, 0.9034019571919122, 0.9168048868124753, 0.41646521665402225, 0.4241346594772567, 0.41685719080547035, 0.40390160272271514, 0.4223263340599608, 0.4329914433198492, 0.41158512692677673, 0.45174629047723647, 0.4031325118483102, 0.7689625586478606, 0.7120792369613278, 0.6647638220352601, 0.7214056095517793, 0.7016038680258551, 0.7260738422829174, 0.7196359226545717, 0.6756751079011458, 0.7269586214774447, 0.2665472527943039, 0.34547332009356246, 0.3459350638919163, 0.3136391218037553, 0.30464081550628186, 0.26137387758303054, 0.3159145361358491, 0.3377514811778316, 0.29848543966482943, 0.33887163202728365, 0.35276602292079084, 0.35462593188132474, 0.3446172097067144, 0.3196751063196446, 0.3153739572147367, 0.315643516093868, 0.30481547769258843, 0.34182067210563605, 0.0850894595524353, 0.05542626847760912, 0.14420850781667816, 0.16014201884332147, 0.17690552478630617, 0.14279018289142842, 0.11886121095820856, 0.09345365566081765, 0.1909218723966133, 0.14724285474621635, 0.15337090552801202, 0.17699764762644155, 0.18214036040331427, 0.11221169784630525, 0.1738307037978144, 0.15501096873452347, 0.2670132877479501, 0.14408088864141755, 0.14131859523532453, 0.05390415685733119, 0.1285326602397081, 0.13955275510303067, 0.08911750907489147, 0.053027779621542814, 0.1470311857972858, 0.11697327772000465, 0.09972096237763739, 0.2084926677455452, 0.1950739349169286, 0.23248903278192512, 0.2219504995507391, 0.21369219233440273, 0.2033363839520843, 0.21772205376322762, 0.21947223839216734, 0.2038130642931686, 0.5418142571923248, 0.5715349798567688, 0.566306153379492, 0.5485678119399933, 0.5722668817937469, 0.5591402757218054, 0.5743573339213391, 0.5828282023792253, 0.5722065871164348, 0.11666433953108224, 0.12191263433733401, 0.11139237501135157, 0.12207774102857383, 0.14883396217191824, 0.1458835595343453, 0.12225882755378148, 0.2529681624990927, 0.10629139003186794, 0.22460128778038846, 0.3579847048510111, 0.3101993510848733, 0.26379436196001194, 0.38052211852504747, 0.30094712177300165, 0.2408862247416429, 0.2960275487005132, 0.15195401594644375, 0.38098176308097387, 0.3794163096733052, 0.37816472767583453, 0.37493577690797764, 0.3704251166591842, 0.3753909190764133, 0.3779285961801109, 0.40210295296163423, 0.3620210548756817, 0.29554911578099285, 0.30396476415195384, 0.3216392813225105, 0.302622995423631, 0.30385048279295657, 0.31224157570057265, 0.31449166426240094, 0.319339847669852, 0.30251875777998105, 0.2327900923555155, 0.21582617426830486, 0.22828135713221587, 0.21570212811727774, 0.22529775004146013, 0.23444901076418223, 0.23347341881177464, 0.21034337002569015, 0.2554020164624038, 0.20970708288714968, 0.2008656167170363, 0.43736074385625034, 0.22626484818198545, 0.2126009968965037, 0.20254009442281595, 0.20343779527603045, 0.21976731979189879, 0.1812775890274736, 0.1818641025670611, 0.18585327422378517, 0.7759918343498198, 0.19277173941302284, 0.19488516320695481, 0.16264452794463158, 0.7695269760076111, 0.16488617322867938, 0.8055525153563015, 0.7846525834302637, 0.20500907749803776, 0.7397912506852184, 0.7163037834967514, 0.725526771656576, 0.7133716928762615, 0.16572972072283465, 0.6898865075054132, 0.7093561515873469, 0.18054457633927146, 0.1905789633882018, 0.20666156379619793, 0.17711241838455993, 0.18210015354562026, 0.20901798103786706, 0.18263104734030844, 0.19011451317160077, 0.20031371357434224, 0.10179471963720554, 0.08695200091185684, 0.09527404220642643, 0.09368741906676281, 0.09143212884073892, 0.08949556664686242, 0.08700130650706528, 0.07833483776281269, 0.08756957134740628]}, "mutation_prompt": null}
{"id": "e52fcc4c-398c-4712-aad7-bda748daaf72", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 100\n        self.inertia_weight = 0.5\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.population_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        \n        for i in range(self.population_size):\n            score = func(particles[i])\n            personal_best_scores[i] = score\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coef * r1 * (personal_best_positions[i] - particles[i])\n                                 + self.social_coef * r2 * (global_best_position - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = np.random.choice(self.population_size, 3, replace=False)\n                while i in idxs:\n                    idxs = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = particles[idxs]\n                adaptive_mutation = self.mutation_factor * (1 - eval_count / self.budget)\n                mutant_vector = a + adaptive_mutation * (b - c)\n                trial_vector = np.copy(particles[i])\n                \n                crossover_mask = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover_mask] = mutant_vector[crossover_mask]\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_score = func(trial_vector)\n                eval_count += 1\n\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial_vector\n                    personal_best_scores[i] = trial_score\n\n                if trial_score < personal_best_scores[global_best_index]:\n                    global_best_position = trial_vector\n                    global_best_index = i\n\n        return global_best_position", "name": "EnhancedHybridPSODE", "description": "Enhanced HybridPSODE using adaptive mutation factors and dynamic velocities for improved convergence.", "configspace": "", "generation": 73, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "43138693-7d4a-40d3-9a8b-0a5af63f6ab5", "metadata": {"aucs": [0.6662416661548809, 0.6513623018132353, 0.6633375871038292, 0.6545229616175576, 0.6598521763290217, 0.6474942331665055, 0.6548421184499535, 0.6605922871738547, 0.6498376514717851, 0.3252265281491423, 0.3510259524679392, 0.3547799137549077, 0.33640688391667783, 0.3579326919492658, 0.3407071405262826, 0.33654008245099387, 0.30225059095684514, 0.28588814189514133, 0.13888218033040034, 0.13981789872150618, 0.13523826413724616, 0.13522623183099136, 0.1292161103513093, 0.10565333463443405, 0.13523519822897323, 0.14520141875006343, 0.1548767547731108, 0.10556802839667911, 0.11181783913715448, 0.1368273731403844, 0.10733898880726833, 0.1413152532399421, 0.09957327751337453, 0.11020018860334968, 0.10601090205277908, 0.1068701579604664, 0.8701107950519178, 0.9166887014360969, 0.8794648297326908, 0.9026539959793303, 0.8369619383304856, 0.8604145782515467, 0.9136974646365729, 0.9034019571919122, 0.9168048868124753, 0.41646521665402225, 0.4241346594772567, 0.41685719080547035, 0.40390160272271514, 0.4223263340599608, 0.4329914433198492, 0.41158512692677673, 0.45174629047723647, 0.4031325118483102, 0.7689625586478606, 0.7120792369613278, 0.6647638220352601, 0.7214056095517793, 0.7016038680258551, 0.7260738422829174, 0.7196359226545717, 0.6756751079011458, 0.7269586214774447, 0.2665472527943039, 0.34547332009356246, 0.3459350638919163, 0.3136391218037553, 0.30464081550628186, 0.26137387758303054, 0.3159145361358491, 0.3377514811778316, 0.29848543966482943, 0.33887163202728365, 0.35276602292079084, 0.35462593188132474, 0.3446172097067144, 0.3196751063196446, 0.3153739572147367, 0.315643516093868, 0.30481547769258843, 0.34182067210563605, 0.0850894595524353, 0.05542626847760912, 0.14420850781667816, 0.16014201884332147, 0.17690552478630617, 0.14279018289142842, 0.11886121095820856, 0.09345365566081765, 0.1909218723966133, 0.14724285474621635, 0.15337090552801202, 0.17699764762644155, 0.18214036040331427, 0.11221169784630525, 0.1738307037978144, 0.15501096873452347, 0.2670132877479501, 0.14408088864141755, 0.14131859523532453, 0.05390415685733119, 0.1285326602397081, 0.13955275510303067, 0.08911750907489147, 0.053027779621542814, 0.1470311857972858, 0.11697327772000465, 0.09972096237763739, 0.2084926677455452, 0.1950739349169286, 0.23248903278192512, 0.2219504995507391, 0.21369219233440273, 0.2033363839520843, 0.21772205376322762, 0.21947223839216734, 0.2038130642931686, 0.5418142571923248, 0.5715349798567688, 0.566306153379492, 0.5485678119399933, 0.5722668817937469, 0.5591402757218054, 0.5743573339213391, 0.5828282023792253, 0.5722065871164348, 0.11666433953108224, 0.12191263433733401, 0.11139237501135157, 0.12207774102857383, 0.14883396217191824, 0.1458835595343453, 0.12225882755378148, 0.2529681624990927, 0.10629139003186794, 0.22460128778038846, 0.3579847048510111, 0.3101993510848733, 0.26379436196001194, 0.38052211852504747, 0.30094712177300165, 0.2408862247416429, 0.2960275487005132, 0.15195401594644375, 0.38098176308097387, 0.3794163096733052, 0.37816472767583453, 0.37493577690797764, 0.3704251166591842, 0.3753909190764133, 0.3779285961801109, 0.40210295296163423, 0.3620210548756817, 0.29554911578099285, 0.30396476415195384, 0.3216392813225105, 0.302622995423631, 0.30385048279295657, 0.31224157570057265, 0.31449166426240094, 0.319339847669852, 0.30251875777998105, 0.2327900923555155, 0.21582617426830486, 0.22828135713221587, 0.21570212811727774, 0.22529775004146013, 0.23444901076418223, 0.23347341881177464, 0.21034337002569015, 0.2554020164624038, 0.20970708288714968, 0.2008656167170363, 0.43736074385625034, 0.22626484818198545, 0.2126009968965037, 0.20254009442281595, 0.20343779527603045, 0.21976731979189879, 0.1812775890274736, 0.1818641025670611, 0.18585327422378517, 0.7759918343498198, 0.19277173941302284, 0.19488516320695481, 0.16264452794463158, 0.7695269760076111, 0.16488617322867938, 0.8055525153563015, 0.7846525834302637, 0.20500907749803776, 0.7397912506852184, 0.7163037834967514, 0.725526771656576, 0.7133716928762615, 0.16572972072283465, 0.6898865075054132, 0.7093561515873469, 0.18054457633927146, 0.1905789633882018, 0.20666156379619793, 0.17711241838455993, 0.18210015354562026, 0.20901798103786706, 0.18263104734030844, 0.19011451317160077, 0.20031371357434224, 0.10179471963720554, 0.08695200091185684, 0.09527404220642643, 0.09368741906676281, 0.09143212884073892, 0.08949556664686242, 0.08700130650706528, 0.07833483776281269, 0.08756957134740628]}, "mutation_prompt": null}
{"id": "e63e27ea-7f28-428c-8982-95fd784931f0", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 100\n        self.inertia_weight = 0.5\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.population_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        \n        for i in range(self.population_size):\n            score = func(particles[i])\n            personal_best_scores[i] = score\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coef * r1 * (personal_best_positions[i] - particles[i])\n                                 + self.social_coef * r2 * (global_best_position - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = np.random.choice(self.population_size, 3, replace=False)\n                while i in idxs:\n                    idxs = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = particles[idxs]\n                adaptive_mutation = self.mutation_factor * (1 - eval_count / self.budget)\n                mutant_vector = a + adaptive_mutation * (b - c)\n                trial_vector = np.copy(particles[i])\n                \n                crossover_mask = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover_mask] = mutant_vector[crossover_mask]\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_score = func(trial_vector)\n                eval_count += 1\n\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial_vector\n                    personal_best_scores[i] = trial_score\n\n                if trial_score < personal_best_scores[global_best_index]:\n                    global_best_position = trial_vector\n                    global_best_index = i\n\n        return global_best_position", "name": "EnhancedHybridPSODE", "description": "Enhanced HybridPSODE using adaptive mutation factors and dynamic velocities for improved convergence.", "configspace": "", "generation": 73, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "43138693-7d4a-40d3-9a8b-0a5af63f6ab5", "metadata": {"aucs": [0.6662416661548809, 0.6513623018132353, 0.6633375871038292, 0.6545229616175576, 0.6598521763290217, 0.6474942331665055, 0.6548421184499535, 0.6605922871738547, 0.6498376514717851, 0.3252265281491423, 0.3510259524679392, 0.3547799137549077, 0.33640688391667783, 0.3579326919492658, 0.3407071405262826, 0.33654008245099387, 0.30225059095684514, 0.28588814189514133, 0.13888218033040034, 0.13981789872150618, 0.13523826413724616, 0.13522623183099136, 0.1292161103513093, 0.10565333463443405, 0.13523519822897323, 0.14520141875006343, 0.1548767547731108, 0.10556802839667911, 0.11181783913715448, 0.1368273731403844, 0.10733898880726833, 0.1413152532399421, 0.09957327751337453, 0.11020018860334968, 0.10601090205277908, 0.1068701579604664, 0.8701107950519178, 0.9166887014360969, 0.8794648297326908, 0.9026539959793303, 0.8369619383304856, 0.8604145782515467, 0.9136974646365729, 0.9034019571919122, 0.9168048868124753, 0.41646521665402225, 0.4241346594772567, 0.41685719080547035, 0.40390160272271514, 0.4223263340599608, 0.4329914433198492, 0.41158512692677673, 0.45174629047723647, 0.4031325118483102, 0.7689625586478606, 0.7120792369613278, 0.6647638220352601, 0.7214056095517793, 0.7016038680258551, 0.7260738422829174, 0.7196359226545717, 0.6756751079011458, 0.7269586214774447, 0.2665472527943039, 0.34547332009356246, 0.3459350638919163, 0.3136391218037553, 0.30464081550628186, 0.26137387758303054, 0.3159145361358491, 0.3377514811778316, 0.29848543966482943, 0.33887163202728365, 0.35276602292079084, 0.35462593188132474, 0.3446172097067144, 0.3196751063196446, 0.3153739572147367, 0.315643516093868, 0.30481547769258843, 0.34182067210563605, 0.0850894595524353, 0.05542626847760912, 0.14420850781667816, 0.16014201884332147, 0.17690552478630617, 0.14279018289142842, 0.11886121095820856, 0.09345365566081765, 0.1909218723966133, 0.14724285474621635, 0.15337090552801202, 0.17699764762644155, 0.18214036040331427, 0.11221169784630525, 0.1738307037978144, 0.15501096873452347, 0.2670132877479501, 0.14408088864141755, 0.14131859523532453, 0.05390415685733119, 0.1285326602397081, 0.13955275510303067, 0.08911750907489147, 0.053027779621542814, 0.1470311857972858, 0.11697327772000465, 0.09972096237763739, 0.2084926677455452, 0.1950739349169286, 0.23248903278192512, 0.2219504995507391, 0.21369219233440273, 0.2033363839520843, 0.21772205376322762, 0.21947223839216734, 0.2038130642931686, 0.5418142571923248, 0.5715349798567688, 0.566306153379492, 0.5485678119399933, 0.5722668817937469, 0.5591402757218054, 0.5743573339213391, 0.5828282023792253, 0.5722065871164348, 0.11666433953108224, 0.12191263433733401, 0.11139237501135157, 0.12207774102857383, 0.14883396217191824, 0.1458835595343453, 0.12225882755378148, 0.2529681624990927, 0.10629139003186794, 0.22460128778038846, 0.3579847048510111, 0.3101993510848733, 0.26379436196001194, 0.38052211852504747, 0.30094712177300165, 0.2408862247416429, 0.2960275487005132, 0.15195401594644375, 0.38098176308097387, 0.3794163096733052, 0.37816472767583453, 0.37493577690797764, 0.3704251166591842, 0.3753909190764133, 0.3779285961801109, 0.40210295296163423, 0.3620210548756817, 0.29554911578099285, 0.30396476415195384, 0.3216392813225105, 0.302622995423631, 0.30385048279295657, 0.31224157570057265, 0.31449166426240094, 0.319339847669852, 0.30251875777998105, 0.2327900923555155, 0.21582617426830486, 0.22828135713221587, 0.21570212811727774, 0.22529775004146013, 0.23444901076418223, 0.23347341881177464, 0.21034337002569015, 0.2554020164624038, 0.20970708288714968, 0.2008656167170363, 0.43736074385625034, 0.22626484818198545, 0.2126009968965037, 0.20254009442281595, 0.20343779527603045, 0.21976731979189879, 0.1812775890274736, 0.1818641025670611, 0.18585327422378517, 0.7759918343498198, 0.19277173941302284, 0.19488516320695481, 0.16264452794463158, 0.7695269760076111, 0.16488617322867938, 0.8055525153563015, 0.7846525834302637, 0.20500907749803776, 0.7397912506852184, 0.7163037834967514, 0.725526771656576, 0.7133716928762615, 0.16572972072283465, 0.6898865075054132, 0.7093561515873469, 0.18054457633927146, 0.1905789633882018, 0.20666156379619793, 0.17711241838455993, 0.18210015354562026, 0.20901798103786706, 0.18263104734030844, 0.19011451317160077, 0.20031371357434224, 0.10179471963720554, 0.08695200091185684, 0.09527404220642643, 0.09368741906676281, 0.09143212884073892, 0.08949556664686242, 0.08700130650706528, 0.07833483776281269, 0.08756957134740628]}, "mutation_prompt": null}
{"id": "bc237388-9f33-4d4f-8276-495ac673fee2", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 100\n        self.inertia_weight = 0.5\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.population_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        \n        for i in range(self.population_size):\n            score = func(particles[i])\n            personal_best_scores[i] = score\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coef * r1 * (personal_best_positions[i] - particles[i])\n                                 + self.social_coef * r2 * (global_best_position - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = np.random.choice(self.population_size, 3, replace=False)\n                while i in idxs:\n                    idxs = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = particles[idxs]\n                adaptive_mutation = self.mutation_factor * (1 - eval_count / self.budget)\n                mutant_vector = a + adaptive_mutation * (b - c)\n                trial_vector = np.copy(particles[i])\n                \n                crossover_mask = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover_mask] = mutant_vector[crossover_mask]\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_score = func(trial_vector)\n                eval_count += 1\n\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial_vector\n                    personal_best_scores[i] = trial_score\n\n                if trial_score < personal_best_scores[global_best_index]:\n                    global_best_position = trial_vector\n                    global_best_index = i\n\n        return global_best_position", "name": "EnhancedHybridPSODE", "description": "Enhanced HybridPSODE using adaptive mutation factors and dynamic velocities for improved convergence.", "configspace": "", "generation": 73, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "43138693-7d4a-40d3-9a8b-0a5af63f6ab5", "metadata": {"aucs": [0.6662416661548809, 0.6513623018132353, 0.6633375871038292, 0.6545229616175576, 0.6598521763290217, 0.6474942331665055, 0.6548421184499535, 0.6605922871738547, 0.6498376514717851, 0.3252265281491423, 0.3510259524679392, 0.3547799137549077, 0.33640688391667783, 0.3579326919492658, 0.3407071405262826, 0.33654008245099387, 0.30225059095684514, 0.28588814189514133, 0.13888218033040034, 0.13981789872150618, 0.13523826413724616, 0.13522623183099136, 0.1292161103513093, 0.10565333463443405, 0.13523519822897323, 0.14520141875006343, 0.1548767547731108, 0.10556802839667911, 0.11181783913715448, 0.1368273731403844, 0.10733898880726833, 0.1413152532399421, 0.09957327751337453, 0.11020018860334968, 0.10601090205277908, 0.1068701579604664, 0.8701107950519178, 0.9166887014360969, 0.8794648297326908, 0.9026539959793303, 0.8369619383304856, 0.8604145782515467, 0.9136974646365729, 0.9034019571919122, 0.9168048868124753, 0.41646521665402225, 0.4241346594772567, 0.41685719080547035, 0.40390160272271514, 0.4223263340599608, 0.4329914433198492, 0.41158512692677673, 0.45174629047723647, 0.4031325118483102, 0.7689625586478606, 0.7120792369613278, 0.6647638220352601, 0.7214056095517793, 0.7016038680258551, 0.7260738422829174, 0.7196359226545717, 0.6756751079011458, 0.7269586214774447, 0.2665472527943039, 0.34547332009356246, 0.3459350638919163, 0.3136391218037553, 0.30464081550628186, 0.26137387758303054, 0.3159145361358491, 0.3377514811778316, 0.29848543966482943, 0.33887163202728365, 0.35276602292079084, 0.35462593188132474, 0.3446172097067144, 0.3196751063196446, 0.3153739572147367, 0.315643516093868, 0.30481547769258843, 0.34182067210563605, 0.0850894595524353, 0.05542626847760912, 0.14420850781667816, 0.16014201884332147, 0.17690552478630617, 0.14279018289142842, 0.11886121095820856, 0.09345365566081765, 0.1909218723966133, 0.14724285474621635, 0.15337090552801202, 0.17699764762644155, 0.18214036040331427, 0.11221169784630525, 0.1738307037978144, 0.15501096873452347, 0.2670132877479501, 0.14408088864141755, 0.14131859523532453, 0.05390415685733119, 0.1285326602397081, 0.13955275510303067, 0.08911750907489147, 0.053027779621542814, 0.1470311857972858, 0.11697327772000465, 0.09972096237763739, 0.2084926677455452, 0.1950739349169286, 0.23248903278192512, 0.2219504995507391, 0.21369219233440273, 0.2033363839520843, 0.21772205376322762, 0.21947223839216734, 0.2038130642931686, 0.5418142571923248, 0.5715349798567688, 0.566306153379492, 0.5485678119399933, 0.5722668817937469, 0.5591402757218054, 0.5743573339213391, 0.5828282023792253, 0.5722065871164348, 0.11666433953108224, 0.12191263433733401, 0.11139237501135157, 0.12207774102857383, 0.14883396217191824, 0.1458835595343453, 0.12225882755378148, 0.2529681624990927, 0.10629139003186794, 0.22460128778038846, 0.3579847048510111, 0.3101993510848733, 0.26379436196001194, 0.38052211852504747, 0.30094712177300165, 0.2408862247416429, 0.2960275487005132, 0.15195401594644375, 0.38098176308097387, 0.3794163096733052, 0.37816472767583453, 0.37493577690797764, 0.3704251166591842, 0.3753909190764133, 0.3779285961801109, 0.40210295296163423, 0.3620210548756817, 0.29554911578099285, 0.30396476415195384, 0.3216392813225105, 0.302622995423631, 0.30385048279295657, 0.31224157570057265, 0.31449166426240094, 0.319339847669852, 0.30251875777998105, 0.2327900923555155, 0.21582617426830486, 0.22828135713221587, 0.21570212811727774, 0.22529775004146013, 0.23444901076418223, 0.23347341881177464, 0.21034337002569015, 0.2554020164624038, 0.20970708288714968, 0.2008656167170363, 0.43736074385625034, 0.22626484818198545, 0.2126009968965037, 0.20254009442281595, 0.20343779527603045, 0.21976731979189879, 0.1812775890274736, 0.1818641025670611, 0.18585327422378517, 0.7759918343498198, 0.19277173941302284, 0.19488516320695481, 0.16264452794463158, 0.7695269760076111, 0.16488617322867938, 0.8055525153563015, 0.7846525834302637, 0.20500907749803776, 0.7397912506852184, 0.7163037834967514, 0.725526771656576, 0.7133716928762615, 0.16572972072283465, 0.6898865075054132, 0.7093561515873469, 0.18054457633927146, 0.1905789633882018, 0.20666156379619793, 0.17711241838455993, 0.18210015354562026, 0.20901798103786706, 0.18263104734030844, 0.19011451317160077, 0.20031371357434224, 0.10179471963720554, 0.08695200091185684, 0.09527404220642643, 0.09368741906676281, 0.09143212884073892, 0.08949556664686242, 0.08700130650706528, 0.07833483776281269, 0.08756957134740628]}, "mutation_prompt": null}
{"id": "23c00588-e187-43a6-b6f0-d3e8ad951e4a", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 100\n        self.inertia_weight = 0.5\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.population_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        \n        for i in range(self.population_size):\n            score = func(particles[i])\n            personal_best_scores[i] = score\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coef * r1 * (personal_best_positions[i] - particles[i])\n                                 + self.social_coef * r2 * (global_best_position - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = np.random.choice(self.population_size, 3, replace=False)\n                while i in idxs:\n                    idxs = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = particles[idxs]\n                adaptive_mutation = self.mutation_factor * (1 - eval_count / self.budget)\n                mutant_vector = a + adaptive_mutation * (b - c)\n                trial_vector = np.copy(particles[i])\n                \n                crossover_mask = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover_mask] = mutant_vector[crossover_mask]\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_score = func(trial_vector)\n                eval_count += 1\n\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial_vector\n                    personal_best_scores[i] = trial_score\n\n                if trial_score < personal_best_scores[global_best_index]:\n                    global_best_position = trial_vector\n                    global_best_index = i\n\n        return global_best_position", "name": "EnhancedHybridPSODE", "description": "Enhanced HybridPSODE using adaptive mutation factors and dynamic velocities for improved convergence.", "configspace": "", "generation": 73, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "43138693-7d4a-40d3-9a8b-0a5af63f6ab5", "metadata": {"aucs": [0.6662416661548809, 0.6513623018132353, 0.6633375871038292, 0.6545229616175576, 0.6598521763290217, 0.6474942331665055, 0.6548421184499535, 0.6605922871738547, 0.6498376514717851, 0.3252265281491423, 0.3510259524679392, 0.3547799137549077, 0.33640688391667783, 0.3579326919492658, 0.3407071405262826, 0.33654008245099387, 0.30225059095684514, 0.28588814189514133, 0.13888218033040034, 0.13981789872150618, 0.13523826413724616, 0.13522623183099136, 0.1292161103513093, 0.10565333463443405, 0.13523519822897323, 0.14520141875006343, 0.1548767547731108, 0.10556802839667911, 0.11181783913715448, 0.1368273731403844, 0.10733898880726833, 0.1413152532399421, 0.09957327751337453, 0.11020018860334968, 0.10601090205277908, 0.1068701579604664, 0.8701107950519178, 0.9166887014360969, 0.8794648297326908, 0.9026539959793303, 0.8369619383304856, 0.8604145782515467, 0.9136974646365729, 0.9034019571919122, 0.9168048868124753, 0.41646521665402225, 0.4241346594772567, 0.41685719080547035, 0.40390160272271514, 0.4223263340599608, 0.4329914433198492, 0.41158512692677673, 0.45174629047723647, 0.4031325118483102, 0.7689625586478606, 0.7120792369613278, 0.6647638220352601, 0.7214056095517793, 0.7016038680258551, 0.7260738422829174, 0.7196359226545717, 0.6756751079011458, 0.7269586214774447, 0.2665472527943039, 0.34547332009356246, 0.3459350638919163, 0.3136391218037553, 0.30464081550628186, 0.26137387758303054, 0.3159145361358491, 0.3377514811778316, 0.29848543966482943, 0.33887163202728365, 0.35276602292079084, 0.35462593188132474, 0.3446172097067144, 0.3196751063196446, 0.3153739572147367, 0.315643516093868, 0.30481547769258843, 0.34182067210563605, 0.0850894595524353, 0.05542626847760912, 0.14420850781667816, 0.16014201884332147, 0.17690552478630617, 0.14279018289142842, 0.11886121095820856, 0.09345365566081765, 0.1909218723966133, 0.14724285474621635, 0.15337090552801202, 0.17699764762644155, 0.18214036040331427, 0.11221169784630525, 0.1738307037978144, 0.15501096873452347, 0.2670132877479501, 0.14408088864141755, 0.14131859523532453, 0.05390415685733119, 0.1285326602397081, 0.13955275510303067, 0.08911750907489147, 0.053027779621542814, 0.1470311857972858, 0.11697327772000465, 0.09972096237763739, 0.2084926677455452, 0.1950739349169286, 0.23248903278192512, 0.2219504995507391, 0.21369219233440273, 0.2033363839520843, 0.21772205376322762, 0.21947223839216734, 0.2038130642931686, 0.5418142571923248, 0.5715349798567688, 0.566306153379492, 0.5485678119399933, 0.5722668817937469, 0.5591402757218054, 0.5743573339213391, 0.5828282023792253, 0.5722065871164348, 0.11666433953108224, 0.12191263433733401, 0.11139237501135157, 0.12207774102857383, 0.14883396217191824, 0.1458835595343453, 0.12225882755378148, 0.2529681624990927, 0.10629139003186794, 0.22460128778038846, 0.3579847048510111, 0.3101993510848733, 0.26379436196001194, 0.38052211852504747, 0.30094712177300165, 0.2408862247416429, 0.2960275487005132, 0.15195401594644375, 0.38098176308097387, 0.3794163096733052, 0.37816472767583453, 0.37493577690797764, 0.3704251166591842, 0.3753909190764133, 0.3779285961801109, 0.40210295296163423, 0.3620210548756817, 0.29554911578099285, 0.30396476415195384, 0.3216392813225105, 0.302622995423631, 0.30385048279295657, 0.31224157570057265, 0.31449166426240094, 0.319339847669852, 0.30251875777998105, 0.2327900923555155, 0.21582617426830486, 0.22828135713221587, 0.21570212811727774, 0.22529775004146013, 0.23444901076418223, 0.23347341881177464, 0.21034337002569015, 0.2554020164624038, 0.20970708288714968, 0.2008656167170363, 0.43736074385625034, 0.22626484818198545, 0.2126009968965037, 0.20254009442281595, 0.20343779527603045, 0.21976731979189879, 0.1812775890274736, 0.1818641025670611, 0.18585327422378517, 0.7759918343498198, 0.19277173941302284, 0.19488516320695481, 0.16264452794463158, 0.7695269760076111, 0.16488617322867938, 0.8055525153563015, 0.7846525834302637, 0.20500907749803776, 0.7397912506852184, 0.7163037834967514, 0.725526771656576, 0.7133716928762615, 0.16572972072283465, 0.6898865075054132, 0.7093561515873469, 0.18054457633927146, 0.1905789633882018, 0.20666156379619793, 0.17711241838455993, 0.18210015354562026, 0.20901798103786706, 0.18263104734030844, 0.19011451317160077, 0.20031371357434224, 0.10179471963720554, 0.08695200091185684, 0.09527404220642643, 0.09368741906676281, 0.09143212884073892, 0.08949556664686242, 0.08700130650706528, 0.07833483776281269, 0.08756957134740628]}, "mutation_prompt": null}
{"id": "28f8636f-b1fd-44e2-b227-c81936aadbc0", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 100\n        self.inertia_weight = 0.5\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.population_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        \n        for i in range(self.population_size):\n            score = func(particles[i])\n            personal_best_scores[i] = score\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coef * r1 * (personal_best_positions[i] - particles[i])\n                                 + self.social_coef * r2 * (global_best_position - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = np.random.choice(self.population_size, 3, replace=False)\n                while i in idxs:\n                    idxs = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = particles[idxs]\n                adaptive_mutation = self.mutation_factor * (1 - eval_count / self.budget)\n                mutant_vector = a + adaptive_mutation * (b - c)\n                trial_vector = np.copy(particles[i])\n                \n                crossover_mask = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover_mask] = mutant_vector[crossover_mask]\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_score = func(trial_vector)\n                eval_count += 1\n\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial_vector\n                    personal_best_scores[i] = trial_score\n\n                if trial_score < personal_best_scores[global_best_index]:\n                    global_best_position = trial_vector\n                    global_best_index = i\n\n        return global_best_position", "name": "EnhancedHybridPSODE", "description": "Enhanced HybridPSODE using adaptive mutation factors and dynamic velocities for improved convergence.", "configspace": "", "generation": 73, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "43138693-7d4a-40d3-9a8b-0a5af63f6ab5", "metadata": {"aucs": [0.6662416661548809, 0.6513623018132353, 0.6633375871038292, 0.6545229616175576, 0.6598521763290217, 0.6474942331665055, 0.6548421184499535, 0.6605922871738547, 0.6498376514717851, 0.3252265281491423, 0.3510259524679392, 0.3547799137549077, 0.33640688391667783, 0.3579326919492658, 0.3407071405262826, 0.33654008245099387, 0.30225059095684514, 0.28588814189514133, 0.13888218033040034, 0.13981789872150618, 0.13523826413724616, 0.13522623183099136, 0.1292161103513093, 0.10565333463443405, 0.13523519822897323, 0.14520141875006343, 0.1548767547731108, 0.10556802839667911, 0.11181783913715448, 0.1368273731403844, 0.10733898880726833, 0.1413152532399421, 0.09957327751337453, 0.11020018860334968, 0.10601090205277908, 0.1068701579604664, 0.8701107950519178, 0.9166887014360969, 0.8794648297326908, 0.9026539959793303, 0.8369619383304856, 0.8604145782515467, 0.9136974646365729, 0.9034019571919122, 0.9168048868124753, 0.41646521665402225, 0.4241346594772567, 0.41685719080547035, 0.40390160272271514, 0.4223263340599608, 0.4329914433198492, 0.41158512692677673, 0.45174629047723647, 0.4031325118483102, 0.7689625586478606, 0.7120792369613278, 0.6647638220352601, 0.7214056095517793, 0.7016038680258551, 0.7260738422829174, 0.7196359226545717, 0.6756751079011458, 0.7269586214774447, 0.2665472527943039, 0.34547332009356246, 0.3459350638919163, 0.3136391218037553, 0.30464081550628186, 0.26137387758303054, 0.3159145361358491, 0.3377514811778316, 0.29848543966482943, 0.33887163202728365, 0.35276602292079084, 0.35462593188132474, 0.3446172097067144, 0.3196751063196446, 0.3153739572147367, 0.315643516093868, 0.30481547769258843, 0.34182067210563605, 0.0850894595524353, 0.05542626847760912, 0.14420850781667816, 0.16014201884332147, 0.17690552478630617, 0.14279018289142842, 0.11886121095820856, 0.09345365566081765, 0.1909218723966133, 0.14724285474621635, 0.15337090552801202, 0.17699764762644155, 0.18214036040331427, 0.11221169784630525, 0.1738307037978144, 0.15501096873452347, 0.2670132877479501, 0.14408088864141755, 0.14131859523532453, 0.05390415685733119, 0.1285326602397081, 0.13955275510303067, 0.08911750907489147, 0.053027779621542814, 0.1470311857972858, 0.11697327772000465, 0.09972096237763739, 0.2084926677455452, 0.1950739349169286, 0.23248903278192512, 0.2219504995507391, 0.21369219233440273, 0.2033363839520843, 0.21772205376322762, 0.21947223839216734, 0.2038130642931686, 0.5418142571923248, 0.5715349798567688, 0.566306153379492, 0.5485678119399933, 0.5722668817937469, 0.5591402757218054, 0.5743573339213391, 0.5828282023792253, 0.5722065871164348, 0.11666433953108224, 0.12191263433733401, 0.11139237501135157, 0.12207774102857383, 0.14883396217191824, 0.1458835595343453, 0.12225882755378148, 0.2529681624990927, 0.10629139003186794, 0.22460128778038846, 0.3579847048510111, 0.3101993510848733, 0.26379436196001194, 0.38052211852504747, 0.30094712177300165, 0.2408862247416429, 0.2960275487005132, 0.15195401594644375, 0.38098176308097387, 0.3794163096733052, 0.37816472767583453, 0.37493577690797764, 0.3704251166591842, 0.3753909190764133, 0.3779285961801109, 0.40210295296163423, 0.3620210548756817, 0.29554911578099285, 0.30396476415195384, 0.3216392813225105, 0.302622995423631, 0.30385048279295657, 0.31224157570057265, 0.31449166426240094, 0.319339847669852, 0.30251875777998105, 0.2327900923555155, 0.21582617426830486, 0.22828135713221587, 0.21570212811727774, 0.22529775004146013, 0.23444901076418223, 0.23347341881177464, 0.21034337002569015, 0.2554020164624038, 0.20970708288714968, 0.2008656167170363, 0.43736074385625034, 0.22626484818198545, 0.2126009968965037, 0.20254009442281595, 0.20343779527603045, 0.21976731979189879, 0.1812775890274736, 0.1818641025670611, 0.18585327422378517, 0.7759918343498198, 0.19277173941302284, 0.19488516320695481, 0.16264452794463158, 0.7695269760076111, 0.16488617322867938, 0.8055525153563015, 0.7846525834302637, 0.20500907749803776, 0.7397912506852184, 0.7163037834967514, 0.725526771656576, 0.7133716928762615, 0.16572972072283465, 0.6898865075054132, 0.7093561515873469, 0.18054457633927146, 0.1905789633882018, 0.20666156379619793, 0.17711241838455993, 0.18210015354562026, 0.20901798103786706, 0.18263104734030844, 0.19011451317160077, 0.20031371357434224, 0.10179471963720554, 0.08695200091185684, 0.09527404220642643, 0.09368741906676281, 0.09143212884073892, 0.08949556664686242, 0.08700130650706528, 0.07833483776281269, 0.08756957134740628]}, "mutation_prompt": null}
{"id": "0f3cb5ff-33d8-48bc-85fe-1ce8315bc71f", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 100\n        self.inertia_weight = 0.5\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.population_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        \n        for i in range(self.population_size):\n            score = func(particles[i])\n            personal_best_scores[i] = score\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coef * r1 * (personal_best_positions[i] - particles[i])\n                                 + self.social_coef * r2 * (global_best_position - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = np.random.choice(self.population_size, 3, replace=False)\n                while i in idxs:\n                    idxs = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = particles[idxs]\n                adaptive_mutation = self.mutation_factor * (1 - eval_count / self.budget)\n                mutant_vector = a + adaptive_mutation * (b - c)\n                trial_vector = np.copy(particles[i])\n                \n                crossover_mask = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover_mask] = mutant_vector[crossover_mask]\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_score = func(trial_vector)\n                eval_count += 1\n\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial_vector\n                    personal_best_scores[i] = trial_score\n\n                if trial_score < personal_best_scores[global_best_index]:\n                    global_best_position = trial_vector\n                    global_best_index = i\n\n        return global_best_position", "name": "EnhancedHybridPSODE", "description": "Enhanced HybridPSODE using adaptive mutation factors and dynamic velocities for improved convergence.", "configspace": "", "generation": 73, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "43138693-7d4a-40d3-9a8b-0a5af63f6ab5", "metadata": {"aucs": [0.6662416661548809, 0.6513623018132353, 0.6633375871038292, 0.6545229616175576, 0.6598521763290217, 0.6474942331665055, 0.6548421184499535, 0.6605922871738547, 0.6498376514717851, 0.3252265281491423, 0.3510259524679392, 0.3547799137549077, 0.33640688391667783, 0.3579326919492658, 0.3407071405262826, 0.33654008245099387, 0.30225059095684514, 0.28588814189514133, 0.13888218033040034, 0.13981789872150618, 0.13523826413724616, 0.13522623183099136, 0.1292161103513093, 0.10565333463443405, 0.13523519822897323, 0.14520141875006343, 0.1548767547731108, 0.10556802839667911, 0.11181783913715448, 0.1368273731403844, 0.10733898880726833, 0.1413152532399421, 0.09957327751337453, 0.11020018860334968, 0.10601090205277908, 0.1068701579604664, 0.8701107950519178, 0.9166887014360969, 0.8794648297326908, 0.9026539959793303, 0.8369619383304856, 0.8604145782515467, 0.9136974646365729, 0.9034019571919122, 0.9168048868124753, 0.41646521665402225, 0.4241346594772567, 0.41685719080547035, 0.40390160272271514, 0.4223263340599608, 0.4329914433198492, 0.41158512692677673, 0.45174629047723647, 0.4031325118483102, 0.7689625586478606, 0.7120792369613278, 0.6647638220352601, 0.7214056095517793, 0.7016038680258551, 0.7260738422829174, 0.7196359226545717, 0.6756751079011458, 0.7269586214774447, 0.2665472527943039, 0.34547332009356246, 0.3459350638919163, 0.3136391218037553, 0.30464081550628186, 0.26137387758303054, 0.3159145361358491, 0.3377514811778316, 0.29848543966482943, 0.33887163202728365, 0.35276602292079084, 0.35462593188132474, 0.3446172097067144, 0.3196751063196446, 0.3153739572147367, 0.315643516093868, 0.30481547769258843, 0.34182067210563605, 0.0850894595524353, 0.05542626847760912, 0.14420850781667816, 0.16014201884332147, 0.17690552478630617, 0.14279018289142842, 0.11886121095820856, 0.09345365566081765, 0.1909218723966133, 0.14724285474621635, 0.15337090552801202, 0.17699764762644155, 0.18214036040331427, 0.11221169784630525, 0.1738307037978144, 0.15501096873452347, 0.2670132877479501, 0.14408088864141755, 0.14131859523532453, 0.05390415685733119, 0.1285326602397081, 0.13955275510303067, 0.08911750907489147, 0.053027779621542814, 0.1470311857972858, 0.11697327772000465, 0.09972096237763739, 0.2084926677455452, 0.1950739349169286, 0.23248903278192512, 0.2219504995507391, 0.21369219233440273, 0.2033363839520843, 0.21772205376322762, 0.21947223839216734, 0.2038130642931686, 0.5418142571923248, 0.5715349798567688, 0.566306153379492, 0.5485678119399933, 0.5722668817937469, 0.5591402757218054, 0.5743573339213391, 0.5828282023792253, 0.5722065871164348, 0.11666433953108224, 0.12191263433733401, 0.11139237501135157, 0.12207774102857383, 0.14883396217191824, 0.1458835595343453, 0.12225882755378148, 0.2529681624990927, 0.10629139003186794, 0.22460128778038846, 0.3579847048510111, 0.3101993510848733, 0.26379436196001194, 0.38052211852504747, 0.30094712177300165, 0.2408862247416429, 0.2960275487005132, 0.15195401594644375, 0.38098176308097387, 0.3794163096733052, 0.37816472767583453, 0.37493577690797764, 0.3704251166591842, 0.3753909190764133, 0.3779285961801109, 0.40210295296163423, 0.3620210548756817, 0.29554911578099285, 0.30396476415195384, 0.3216392813225105, 0.302622995423631, 0.30385048279295657, 0.31224157570057265, 0.31449166426240094, 0.319339847669852, 0.30251875777998105, 0.2327900923555155, 0.21582617426830486, 0.22828135713221587, 0.21570212811727774, 0.22529775004146013, 0.23444901076418223, 0.23347341881177464, 0.21034337002569015, 0.2554020164624038, 0.20970708288714968, 0.2008656167170363, 0.43736074385625034, 0.22626484818198545, 0.2126009968965037, 0.20254009442281595, 0.20343779527603045, 0.21976731979189879, 0.1812775890274736, 0.1818641025670611, 0.18585327422378517, 0.7759918343498198, 0.19277173941302284, 0.19488516320695481, 0.16264452794463158, 0.7695269760076111, 0.16488617322867938, 0.8055525153563015, 0.7846525834302637, 0.20500907749803776, 0.7397912506852184, 0.7163037834967514, 0.725526771656576, 0.7133716928762615, 0.16572972072283465, 0.6898865075054132, 0.7093561515873469, 0.18054457633927146, 0.1905789633882018, 0.20666156379619793, 0.17711241838455993, 0.18210015354562026, 0.20901798103786706, 0.18263104734030844, 0.19011451317160077, 0.20031371357434224, 0.10179471963720554, 0.08695200091185684, 0.09527404220642643, 0.09368741906676281, 0.09143212884073892, 0.08949556664686242, 0.08700130650706528, 0.07833483776281269, 0.08756957134740628]}, "mutation_prompt": null}
{"id": "24181fc2-6e58-4955-9684-3d875121394c", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 100\n        self.inertia_weight = 0.5\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.population_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        \n        for i in range(self.population_size):\n            score = func(particles[i])\n            personal_best_scores[i] = score\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coef * r1 * (personal_best_positions[i] - particles[i])\n                                 + self.social_coef * r2 * (global_best_position - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = np.random.choice(self.population_size, 3, replace=False)\n                while i in idxs:\n                    idxs = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = particles[idxs]\n                adaptive_mutation = self.mutation_factor * (1 - eval_count / self.budget)\n                mutant_vector = a + adaptive_mutation * (b - c)\n                trial_vector = np.copy(particles[i])\n                \n                crossover_mask = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover_mask] = mutant_vector[crossover_mask]\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_score = func(trial_vector)\n                eval_count += 1\n\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial_vector\n                    personal_best_scores[i] = trial_score\n\n                if trial_score < personal_best_scores[global_best_index]:\n                    global_best_position = trial_vector\n                    global_best_index = i\n\n        return global_best_position", "name": "EnhancedHybridPSODE", "description": "Enhanced HybridPSODE using adaptive mutation factors and dynamic velocities for improved convergence.", "configspace": "", "generation": 73, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "43138693-7d4a-40d3-9a8b-0a5af63f6ab5", "metadata": {"aucs": [0.6662416661548809, 0.6513623018132353, 0.6633375871038292, 0.6545229616175576, 0.6598521763290217, 0.6474942331665055, 0.6548421184499535, 0.6605922871738547, 0.6498376514717851, 0.3252265281491423, 0.3510259524679392, 0.3547799137549077, 0.33640688391667783, 0.3579326919492658, 0.3407071405262826, 0.33654008245099387, 0.30225059095684514, 0.28588814189514133, 0.13888218033040034, 0.13981789872150618, 0.13523826413724616, 0.13522623183099136, 0.1292161103513093, 0.10565333463443405, 0.13523519822897323, 0.14520141875006343, 0.1548767547731108, 0.10556802839667911, 0.11181783913715448, 0.1368273731403844, 0.10733898880726833, 0.1413152532399421, 0.09957327751337453, 0.11020018860334968, 0.10601090205277908, 0.1068701579604664, 0.8701107950519178, 0.9166887014360969, 0.8794648297326908, 0.9026539959793303, 0.8369619383304856, 0.8604145782515467, 0.9136974646365729, 0.9034019571919122, 0.9168048868124753, 0.41646521665402225, 0.4241346594772567, 0.41685719080547035, 0.40390160272271514, 0.4223263340599608, 0.4329914433198492, 0.41158512692677673, 0.45174629047723647, 0.4031325118483102, 0.7689625586478606, 0.7120792369613278, 0.6647638220352601, 0.7214056095517793, 0.7016038680258551, 0.7260738422829174, 0.7196359226545717, 0.6756751079011458, 0.7269586214774447, 0.2665472527943039, 0.34547332009356246, 0.3459350638919163, 0.3136391218037553, 0.30464081550628186, 0.26137387758303054, 0.3159145361358491, 0.3377514811778316, 0.29848543966482943, 0.33887163202728365, 0.35276602292079084, 0.35462593188132474, 0.3446172097067144, 0.3196751063196446, 0.3153739572147367, 0.315643516093868, 0.30481547769258843, 0.34182067210563605, 0.0850894595524353, 0.05542626847760912, 0.14420850781667816, 0.16014201884332147, 0.17690552478630617, 0.14279018289142842, 0.11886121095820856, 0.09345365566081765, 0.1909218723966133, 0.14724285474621635, 0.15337090552801202, 0.17699764762644155, 0.18214036040331427, 0.11221169784630525, 0.1738307037978144, 0.15501096873452347, 0.2670132877479501, 0.14408088864141755, 0.14131859523532453, 0.05390415685733119, 0.1285326602397081, 0.13955275510303067, 0.08911750907489147, 0.053027779621542814, 0.1470311857972858, 0.11697327772000465, 0.09972096237763739, 0.2084926677455452, 0.1950739349169286, 0.23248903278192512, 0.2219504995507391, 0.21369219233440273, 0.2033363839520843, 0.21772205376322762, 0.21947223839216734, 0.2038130642931686, 0.5418142571923248, 0.5715349798567688, 0.566306153379492, 0.5485678119399933, 0.5722668817937469, 0.5591402757218054, 0.5743573339213391, 0.5828282023792253, 0.5722065871164348, 0.11666433953108224, 0.12191263433733401, 0.11139237501135157, 0.12207774102857383, 0.14883396217191824, 0.1458835595343453, 0.12225882755378148, 0.2529681624990927, 0.10629139003186794, 0.22460128778038846, 0.3579847048510111, 0.3101993510848733, 0.26379436196001194, 0.38052211852504747, 0.30094712177300165, 0.2408862247416429, 0.2960275487005132, 0.15195401594644375, 0.38098176308097387, 0.3794163096733052, 0.37816472767583453, 0.37493577690797764, 0.3704251166591842, 0.3753909190764133, 0.3779285961801109, 0.40210295296163423, 0.3620210548756817, 0.29554911578099285, 0.30396476415195384, 0.3216392813225105, 0.302622995423631, 0.30385048279295657, 0.31224157570057265, 0.31449166426240094, 0.319339847669852, 0.30251875777998105, 0.2327900923555155, 0.21582617426830486, 0.22828135713221587, 0.21570212811727774, 0.22529775004146013, 0.23444901076418223, 0.23347341881177464, 0.21034337002569015, 0.2554020164624038, 0.20970708288714968, 0.2008656167170363, 0.43736074385625034, 0.22626484818198545, 0.2126009968965037, 0.20254009442281595, 0.20343779527603045, 0.21976731979189879, 0.1812775890274736, 0.1818641025670611, 0.18585327422378517, 0.7759918343498198, 0.19277173941302284, 0.19488516320695481, 0.16264452794463158, 0.7695269760076111, 0.16488617322867938, 0.8055525153563015, 0.7846525834302637, 0.20500907749803776, 0.7397912506852184, 0.7163037834967514, 0.725526771656576, 0.7133716928762615, 0.16572972072283465, 0.6898865075054132, 0.7093561515873469, 0.18054457633927146, 0.1905789633882018, 0.20666156379619793, 0.17711241838455993, 0.18210015354562026, 0.20901798103786706, 0.18263104734030844, 0.19011451317160077, 0.20031371357434224, 0.10179471963720554, 0.08695200091185684, 0.09527404220642643, 0.09368741906676281, 0.09143212884073892, 0.08949556664686242, 0.08700130650706528, 0.07833483776281269, 0.08756957134740628]}, "mutation_prompt": null}
{"id": "70e13299-51c1-4681-ae8b-93d228600ef6", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 100\n        self.inertia_weight = 0.5\n        self.cognitive_coef = 1.5\n        self.social_coef = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_prob = 0.9\n        self.vel_max = (self.upper_bound - self.lower_bound) * 0.1\n\n    def __call__(self, func):\n        particles = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-self.vel_max, self.vel_max, (self.population_size, self.dim))\n        personal_best_positions = np.copy(particles)\n        personal_best_scores = np.full(self.population_size, float('inf'))\n        \n        for i in range(self.population_size):\n            score = func(particles[i])\n            personal_best_scores[i] = score\n\n        global_best_index = np.argmin(personal_best_scores)\n        global_best_position = personal_best_positions[global_best_index]\n\n        eval_count = self.population_size\n\n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                r1, r2 = np.random.rand(2)\n                velocities[i] = (self.inertia_weight * velocities[i]\n                                 + self.cognitive_coef * r1 * (personal_best_positions[i] - particles[i])\n                                 + self.social_coef * r2 * (global_best_position - particles[i]))\n                velocities[i] = np.clip(velocities[i], -self.vel_max, self.vel_max)\n                particles[i] += velocities[i]\n                particles[i] = np.clip(particles[i], self.lower_bound, self.upper_bound)\n\n            for i in range(self.population_size):\n                if eval_count >= self.budget:\n                    break\n                idxs = np.random.choice(self.population_size, 3, replace=False)\n                while i in idxs:\n                    idxs = np.random.choice(self.population_size, 3, replace=False)\n                a, b, c = particles[idxs]\n                adaptive_mutation = self.mutation_factor * (1 - eval_count / self.budget)\n                mutant_vector = a + adaptive_mutation * (b - c)\n                trial_vector = np.copy(particles[i])\n                \n                crossover_mask = np.random.rand(self.dim) < self.crossover_prob\n                trial_vector[crossover_mask] = mutant_vector[crossover_mask]\n                trial_vector = np.clip(trial_vector, self.lower_bound, self.upper_bound)\n\n                trial_score = func(trial_vector)\n                eval_count += 1\n\n                if trial_score < personal_best_scores[i]:\n                    personal_best_positions[i] = trial_vector\n                    personal_best_scores[i] = trial_score\n\n                if trial_score < personal_best_scores[global_best_index]:\n                    global_best_position = trial_vector\n                    global_best_index = i\n\n        return global_best_position", "name": "EnhancedHybridPSODE", "description": "Enhanced HybridPSODE using adaptive mutation factors and dynamic velocities for improved convergence.", "configspace": "", "generation": 73, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "43138693-7d4a-40d3-9a8b-0a5af63f6ab5", "metadata": {"aucs": [0.6662416661548809, 0.6513623018132353, 0.6633375871038292, 0.6545229616175576, 0.6598521763290217, 0.6474942331665055, 0.6548421184499535, 0.6605922871738547, 0.6498376514717851, 0.3252265281491423, 0.3510259524679392, 0.3547799137549077, 0.33640688391667783, 0.3579326919492658, 0.3407071405262826, 0.33654008245099387, 0.30225059095684514, 0.28588814189514133, 0.13888218033040034, 0.13981789872150618, 0.13523826413724616, 0.13522623183099136, 0.1292161103513093, 0.10565333463443405, 0.13523519822897323, 0.14520141875006343, 0.1548767547731108, 0.10556802839667911, 0.11181783913715448, 0.1368273731403844, 0.10733898880726833, 0.1413152532399421, 0.09957327751337453, 0.11020018860334968, 0.10601090205277908, 0.1068701579604664, 0.8701107950519178, 0.9166887014360969, 0.8794648297326908, 0.9026539959793303, 0.8369619383304856, 0.8604145782515467, 0.9136974646365729, 0.9034019571919122, 0.9168048868124753, 0.41646521665402225, 0.4241346594772567, 0.41685719080547035, 0.40390160272271514, 0.4223263340599608, 0.4329914433198492, 0.41158512692677673, 0.45174629047723647, 0.4031325118483102, 0.7689625586478606, 0.7120792369613278, 0.6647638220352601, 0.7214056095517793, 0.7016038680258551, 0.7260738422829174, 0.7196359226545717, 0.6756751079011458, 0.7269586214774447, 0.2665472527943039, 0.34547332009356246, 0.3459350638919163, 0.3136391218037553, 0.30464081550628186, 0.26137387758303054, 0.3159145361358491, 0.3377514811778316, 0.29848543966482943, 0.33887163202728365, 0.35276602292079084, 0.35462593188132474, 0.3446172097067144, 0.3196751063196446, 0.3153739572147367, 0.315643516093868, 0.30481547769258843, 0.34182067210563605, 0.0850894595524353, 0.05542626847760912, 0.14420850781667816, 0.16014201884332147, 0.17690552478630617, 0.14279018289142842, 0.11886121095820856, 0.09345365566081765, 0.1909218723966133, 0.14724285474621635, 0.15337090552801202, 0.17699764762644155, 0.18214036040331427, 0.11221169784630525, 0.1738307037978144, 0.15501096873452347, 0.2670132877479501, 0.14408088864141755, 0.14131859523532453, 0.05390415685733119, 0.1285326602397081, 0.13955275510303067, 0.08911750907489147, 0.053027779621542814, 0.1470311857972858, 0.11697327772000465, 0.09972096237763739, 0.2084926677455452, 0.1950739349169286, 0.23248903278192512, 0.2219504995507391, 0.21369219233440273, 0.2033363839520843, 0.21772205376322762, 0.21947223839216734, 0.2038130642931686, 0.5418142571923248, 0.5715349798567688, 0.566306153379492, 0.5485678119399933, 0.5722668817937469, 0.5591402757218054, 0.5743573339213391, 0.5828282023792253, 0.5722065871164348, 0.11666433953108224, 0.12191263433733401, 0.11139237501135157, 0.12207774102857383, 0.14883396217191824, 0.1458835595343453, 0.12225882755378148, 0.2529681624990927, 0.10629139003186794, 0.22460128778038846, 0.3579847048510111, 0.3101993510848733, 0.26379436196001194, 0.38052211852504747, 0.30094712177300165, 0.2408862247416429, 0.2960275487005132, 0.15195401594644375, 0.38098176308097387, 0.3794163096733052, 0.37816472767583453, 0.37493577690797764, 0.3704251166591842, 0.3753909190764133, 0.3779285961801109, 0.40210295296163423, 0.3620210548756817, 0.29554911578099285, 0.30396476415195384, 0.3216392813225105, 0.302622995423631, 0.30385048279295657, 0.31224157570057265, 0.31449166426240094, 0.319339847669852, 0.30251875777998105, 0.2327900923555155, 0.21582617426830486, 0.22828135713221587, 0.21570212811727774, 0.22529775004146013, 0.23444901076418223, 0.23347341881177464, 0.21034337002569015, 0.2554020164624038, 0.20970708288714968, 0.2008656167170363, 0.43736074385625034, 0.22626484818198545, 0.2126009968965037, 0.20254009442281595, 0.20343779527603045, 0.21976731979189879, 0.1812775890274736, 0.1818641025670611, 0.18585327422378517, 0.7759918343498198, 0.19277173941302284, 0.19488516320695481, 0.16264452794463158, 0.7695269760076111, 0.16488617322867938, 0.8055525153563015, 0.7846525834302637, 0.20500907749803776, 0.7397912506852184, 0.7163037834967514, 0.725526771656576, 0.7133716928762615, 0.16572972072283465, 0.6898865075054132, 0.7093561515873469, 0.18054457633927146, 0.1905789633882018, 0.20666156379619793, 0.17711241838455993, 0.18210015354562026, 0.20901798103786706, 0.18263104734030844, 0.19011451317160077, 0.20031371357434224, 0.10179471963720554, 0.08695200091185684, 0.09527404220642643, 0.09368741906676281, 0.09143212884073892, 0.08949556664686242, 0.08700130650706528, 0.07833483776281269, 0.08756957134740628]}, "mutation_prompt": null}
