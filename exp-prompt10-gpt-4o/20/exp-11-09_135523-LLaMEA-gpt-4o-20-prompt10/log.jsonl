{"id": "939e35a5-affe-430e-ae99-a3c8f0184278", "solution": "import numpy as np\n\nclass HybridPSO_ADM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.num_particles = 20\n        self.w = 0.7  # Inertia weight\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.F = 0.8  # Differential mutation factor\n        self.CR = 0.9  # Crossover probability\n\n    def __call__(self, func):\n        # Initialize particles\n        positions = np.random.uniform(self.lb, self.ub, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.num_particles, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.num_particles, float('inf'))\n        global_best_position = np.zeros(self.dim)\n        global_best_score = float('inf')\n\n        eval_count = 0\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            scores = np.array([func(p) for p in positions])\n            eval_count += self.num_particles\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_scores[better_mask] = scores[better_mask]\n            personal_best_positions[better_mask] = positions[better_mask]\n\n            min_score_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[min_score_idx] < global_best_score:\n                global_best_score = personal_best_scores[min_score_idx]\n                global_best_position = personal_best_positions[min_score_idx]\n\n            # Update velocities and positions using PSO update rule\n            r1 = np.random.rand(self.num_particles, self.dim)\n            r2 = np.random.rand(self.num_particles, self.dim)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.lb, self.ub)\n\n            # Apply Adaptive Differential Mutation\n            for i in range(self.num_particles):\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(idxs, 3, replace=False)\n                    mutant = positions[a] + self.F * (positions[b] - positions[c])\n                    mutant = np.clip(mutant, self.lb, self.ub)\n                    \n                    if func(mutant) < scores[i]:\n                        positions[i] = mutant\n                        eval_count += 1\n                        if eval_count >= self.budget:\n                            break\n\n        return global_best_position", "name": "HybridPSO_ADM", "description": "A hybrid Particle Swarm Optimization with Adaptive Differential Mutation for robust exploration and exploitation.", "configspace": "", "generation": 0, "fitness": 0.2508841561656978, "feedback": "The algorithm HybridPSO_ADM got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.25.", "error": "", "parent_id": null, "metadata": {"aucs": [0.8242283017106482, 0.808128109099161, 0.8378048324712483, 0.8358297595510017, 0.8417231424903546, 0.8052523624617509, 0.841623118347171, 0.8167473242212671, 0.8325410589375288, 0.6219014049791101, 0.03985566558235365, 0.6313628725132222, 0.6273197622582776, 0.04723106368945895, 9.999999999998899e-05, 0.042142605414524414, 0.051371307004664746, 0.633073677159357, 0.07247575279357132, 0.10852918079876528, 0.1328513952617374, 0.10944131927103795, 0.14721768488067644, 0.12007035949661227, 0.4004916586817011, 0.11055097195811614, 0.11255054653182628, 0.14192258139659275, 0.1232491305093183, 0.121935437111379, 0.13320948230607432, 0.09694031654520097, 0.15076120687523453, 0.10530154853076623, 0.10939299822576976, 0.1024964437222099, 0.990958300467318, 0.9843533704601595, 0.989886463965656, 0.9895078121810806, 0.9845401776887608, 0.9807247868158292, 0.9874946135456972, 0.9846358166520475, 0.9875028690313286, 0.0593318213401719, 0.10894484381916825, 0.05993640938945188, 0.2913047361210691, 0.26875737258663257, 0.31261455111995706, 0.35770347880267406, 0.08761697134084223, 0.23794936412790657, 0.22178862142682465, 0.5401828255206294, 0.3641638030879233, 0.6601279040417576, 0.18999181582740066, 0.2780580751452971, 0.1271385519542393, 0.27353009319606236, 0.24919283426802785, 0.19774696686418414, 0.1960301605400474, 0.17903561811922586, 0.12634958121366835, 0.27940424176824796, 0.1974710539929826, 9.999999999998899e-05, 0.19693350843542345, 0.1955937037818677, 0.20080862565447155, 0.022354315200252883, 0.4201649728929888, 0.16871582214825576, 0.20060389531635903, 0.23520736428885403, 0.21467042209900833, 0.13241793448773298, 0.12763796536126848, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03143479375052993, 9.999999999998899e-05, 9.999999999998899e-05, 0.005906439657987872, 9.999999999998899e-05, 9.999999999998899e-05, 0.04485767840752919, 0.016940135359974517, 0.04122692044519827, 0.06616364115282469, 9.999999999998899e-05, 0.012165141472901264, 0.037508790222681054, 0.03586847537767879, 0.0358296770945874, 0.032554186450237776, 0.032895586957624956, 0.04552200645038307, 0.08768721050269834, 0.08869806412016878, 0.18171870870187445, 0.2028146005412732, 0.06820960382868158, 0.06721571995917097, 0.1968980340243769, 9.999999999998899e-05, 0.049396565057000075, 0.11397227158011936, 0.04758558994987072, 0.22551266126318747, 0.05592407143224809, 9.999999999998899e-05, 0.08082848236371465, 0.48523661007413565, 0.5133819768653076, 0.5315038917639033, 0.5746043510068257, 0.5673919232508343, 0.48462194372078526, 0.505728117046085, 0.5241165469191624, 0.521533808925413, 0.10638104981881302, 0.09576974676679095, 0.07798905890024799, 0.09793543202178079, 0.13796436531623402, 0.10655718594739605, 0.08163189569015572, 0.09839156747418243, 0.09911704608453764, 0.13887110639373335, 0.14945555811917444, 0.13714025629495485, 0.14718347304947854, 0.14897274738449973, 0.16360586537206567, 0.17529578797078482, 0.1980962966530262, 0.11472284498136998, 0.30917750736331295, 0.198003948248604, 0.2763664177344718, 0.22431018159080218, 0.35447827475414895, 0.36448829716618036, 0.27564288970971207, 0.47034816472811136, 0.3743933674676858, 0.20046295804831094, 0.22915813471951574, 0.1459468804570726, 0.22658454738784206, 0.21920616650146496, 0.14680010500070184, 0.19070629084350044, 0.27997999098182613, 0.28996275269344196, 0.1904577776223798, 0.18725823343571302, 0.19566417815444348, 0.17622042139849314, 0.16908374454092245, 0.1792037396426962, 0.18701251863350943, 0.17277013866471957, 0.20299112746862225, 0.1967544171851343, 0.2032919005959587, 0.2311580578493707, 0.21952743508608075, 0.20451172009617535, 0.1968271976582886, 0.20060554064557978, 0.18052961903529308, 0.18853835456650225, 0.16499930671398155, 0.8113790101093166, 0.12430893577281532, 0.8676589438255549, 0.19902162585920202, 0.13172035110328084, 0.09976883832198913, 0.1703460859728435, 0.15169474869548505, 0.3160044176007357, 0.16597342016740457, 0.4741327203414052, 0.2656261350980821, 0.22539841244281678, 0.21061426397435656, 0.18743263343064875, 0.15465009043463573, 0.5848713224818229, 0.17880362282680673, 0.16876819904854945, 0.19243942793198354, 0.17833025804478508, 0.18751870782895008, 0.17767125604455103, 0.18925076603194935, 0.18820937136086224, 0.18486284930181274, 0.07980132494193892, 0.08420016704374833, 0.07613021267907427, 0.07451781545844383, 0.0773350008163034, 0.08944113633487527, 0.06756183594679899, 0.0700297907776759, 0.07573740053600397]}, "mutation_prompt": null}
{"id": "3362a835-f1bf-4abe-aecb-5f5117f7839b", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_ADM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.num_particles = 30  # Increased number of particles for better sampling\n        self.w = 0.5  # Reduced inertia weight for quicker convergence\n        self.c1 = 2.0  # Increased cognitive component\n        self.c2 = 2.0  # Increased social component\n        self.F = 0.9  # Increased differential mutation factor\n        self.CR = 0.8  # Reduced crossover probability\n        self.adaptive_lr = 100  # Adaptive learning rate scale factor\n\n    def __call__(self, func):\n        # Initialize particles\n        positions = np.random.uniform(self.lb, self.ub, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.num_particles, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.num_particles, float('inf'))\n        global_best_position = np.zeros(self.dim)\n        global_best_score = float('inf')\n\n        eval_count = 0\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            scores = np.array([func(p) for p in positions])\n            eval_count += self.num_particles\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_scores[better_mask] = scores[better_mask]\n            personal_best_positions[better_mask] = positions[better_mask]\n\n            min_score_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[min_score_idx] < global_best_score:\n                global_best_score = personal_best_scores[min_score_idx]\n                global_best_position = personal_best_positions[min_score_idx]\n\n            # Update velocities and positions using PSO update rule\n            r1 = np.random.rand(self.num_particles, self.dim)\n            r2 = np.random.rand(self.num_particles, self.dim)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.lb, self.ub)\n\n            # Adaptive learning rate\n            adaptive_w = self.w / (1 + eval_count / self.adaptive_lr)\n            velocities *= adaptive_w\n\n            # Apply Adaptive Differential Mutation\n            for i in range(self.num_particles):\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(idxs, 3, replace=False)\n                    mutant = positions[a] + self.F * (positions[b] - positions[c])\n                    mutant = np.clip(mutant, self.lb, self.ub)\n                    \n                    if func(mutant) < scores[i]:\n                        positions[i] = mutant\n                        eval_count += 1\n                        if eval_count >= self.budget:\n                            break\n\n        return global_best_position", "name": "EnhancedHybridPSO_ADM", "description": "An enhanced hybrid algorithm combining Particle Swarm Optimization and Adaptive Differential Mutation with an adaptive learning rate for improved convergence speed.", "configspace": "", "generation": 1, "fitness": 0.27195288014967356, "feedback": "The algorithm EnhancedHybridPSO_ADM got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.27.", "error": "", "parent_id": "939e35a5-affe-430e-ae99-a3c8f0184278", "metadata": {"aucs": [0.9265985541450171, 0.930021374337553, 0.9298088801534755, 0.9162506721671881, 0.887752861872175, 0.8438031902143162, 0.9037926203371243, 0.8625018845874837, 0.9261314138704533, 0.8556935344731726, 0.7798816501132038, 9.999999999998899e-05, 0.8437669511971309, 0.8249269656699976, 0.8312058518424005, 0.8155857749445834, 0.7789052194597377, 0.8158357696086289, 0.0794970229994626, 0.09260779637074479, 0.12403204253586286, 0.06866060865752244, 0.1757162812712404, 0.13176580226674284, 0.14289034511966514, 0.1087505475132009, 0.12319281587418995, 0.10069147217694152, 0.14505395069553428, 0.14004216442083195, 0.09575232135593637, 0.13566863800637907, 0.14297628281264074, 0.14192709908204637, 0.09142062197419987, 0.0995047844864182, 0.9868752858210801, 0.9825416690057619, 0.9864212970543318, 0.9723493036252635, 0.9782079525384475, 0.977821923689258, 0.9871989850166887, 0.9901562607561323, 0.9785393960109932, 0.34726844999678375, 0.2610006562856605, 0.2397514179020861, 0.1535867432604886, 0.36747468298739894, 0.1490087097275955, 0.4349095449306386, 0.4631328234178185, 0.29090171161964673, 0.21304315060360957, 0.24594465204803184, 0.16768601024184993, 0.2150764552677853, 0.19395092919734247, 0.19174174566353241, 0.12592176843709457, 0.1610074474041414, 0.2309279343815004, 0.17995967587792694, 0.24251284975071608, 0.12746711970727997, 0.10095538631230794, 0.1883141399420757, 0.17958930023935027, 0.33489348890400883, 0.1637445250676166, 0.23108099377345515, 0.16738496569366967, 0.022532668855105076, 0.18441709143444662, 0.25205213747712374, 0.1333994411537327, 0.17928672654713884, 0.19783847548307598, 0.1043672732491312, 0.10627322737460432, 0.019232718753651734, 9.999999999998899e-05, 0.09002588296841973, 0.0003561973889243397, 0.04895820829589881, 9.999999999998899e-05, 0.07154030786000698, 9.999999999998899e-05, 0.05160593492564114, 0.06297837226228498, 0.04244183873345142, 0.07282402551956857, 0.05486602058399437, 0.0017191431200337393, 0.039031078195678526, 0.044713810083050864, 0.034489604447586086, 0.07519978312881426, 0.05204146929728226, 9.999999999998899e-05, 0.11497248794106363, 0.0905925784257976, 0.10087539279681701, 0.08288275216993912, 9.999999999998899e-05, 0.07666206466398306, 0.07756763110451326, 0.13308253636571676, 0.06796109677048057, 0.010911628927399719, 0.07169904524849302, 0.09613034446038327, 0.06514543864884659, 0.05772094965266783, 0.058171482916945405, 0.08417528799412999, 0.4964563847372354, 0.510574664420947, 0.49865333459043115, 0.5864301272647336, 0.5446703677276077, 0.5258852631948425, 0.5351676703797896, 0.4928685287388993, 0.5042058683338391, 0.07009075584509117, 0.10106371741336462, 0.13908329904552885, 0.08984611380371277, 0.0936788965391877, 0.09574509653926322, 0.11816006510898547, 0.07592987441132903, 0.07349497959165652, 0.1961678783695291, 0.18058773511712733, 0.16508504543457114, 0.1750972650082906, 0.25888545897575377, 0.1502553943628383, 0.36236283830842564, 0.20759835228858192, 0.1475532984630492, 0.2383916508638685, 0.22208039030898807, 0.19394671986791634, 0.21202114626014168, 0.2480686711252298, 0.231405812693235, 0.33995694016251754, 0.378567853286942, 0.38694568296118226, 0.14692370390889775, 0.2199980009681075, 0.2381035080559959, 0.27938137623425074, 0.20626820255513745, 0.22124238586283929, 0.21767502746451906, 0.16536817373731172, 0.1713155716712048, 0.19457547384214335, 0.14933357269559944, 0.20844912788394643, 0.2276626111143576, 0.182890822534176, 0.16417133327537836, 0.1785458823608771, 0.22486827602291193, 0.20122019521460022, 0.1898851221467579, 0.17502457752444567, 0.21772767805859627, 0.19708437958043312, 0.19454069793267126, 0.18250244574558494, 0.8218888118819387, 0.1899810265402968, 0.1875072873144471, 0.9088725950739578, 0.16946109565959155, 0.153815508482103, 0.7926964360653203, 0.20116335280585185, 0.20092542635811983, 0.12286086208731162, 0.16963360304914987, 0.21198225007848082, 0.8285179294611625, 0.15727168832876037, 0.21259096293722146, 0.21061266281095214, 0.34388140510937193, 0.21091980229443008, 0.2132832432166749, 0.10473143584887878, 0.19879342526329236, 0.19612433368186666, 0.19942905637063546, 0.17648098227465103, 0.18614944812401735, 0.1762862250871392, 0.1823413702755895, 0.17692955926035325, 0.18931660152638408, 0.18498991252953223, 0.07351193761902908, 0.07748250571637305, 0.08020577039579169, 0.07971240537052471, 0.08781610665165751, 0.07340011156839843, 0.09403007970681787, 0.0671621688390791, 0.07501616473055872]}, "mutation_prompt": null}
{"id": "26411996-b9af-4aea-9ff2-62a03af0c251", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_ADM_v2:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.num_particles = 35  # Slightly increased number of particles\n        self.initial_w = 0.7  # Higher initial inertia weight\n        self.final_w = 0.3  # Lower final inertia weight\n        self.c1 = 1.5  # Adjusted cognitive component\n        self.c2 = 2.5  # Increased social component\n        self.F = 0.8  # Slightly reduced differential mutation factor\n        self.CR = 0.9  # Increased crossover probability\n        self.adaptive_lr = 100  # Retained adaptive learning rate scale factor\n\n    def __call__(self, func):\n        # Initialize particles\n        positions = np.random.uniform(self.lb, self.ub, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.num_particles, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.num_particles, float('inf'))\n        global_best_position = np.zeros(self.dim)\n        global_best_score = float('inf')\n\n        eval_count = 0\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            scores = np.array([func(p) for p in positions])\n            eval_count += self.num_particles\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_scores[better_mask] = scores[better_mask]\n            personal_best_positions[better_mask] = positions[better_mask]\n\n            min_score_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[min_score_idx] < global_best_score:\n                global_best_score = personal_best_scores[min_score_idx]\n                global_best_position = personal_best_positions[min_score_idx]\n\n            # Compute dynamic inertia weight\n            w = self.initial_w - (self.initial_w - self.final_w) * (eval_count / self.budget)\n\n            # Update velocities and positions using PSO update rule\n            r1 = np.random.rand(self.num_particles, self.dim)\n            r2 = np.random.rand(self.num_particles, self.dim)\n            velocities = (w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.lb, self.ub)\n\n            # Adaptive Differential Mutation with dynamic F\n            for i in range(self.num_particles):\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(idxs, 3, replace=False)\n                    dynamic_F = self.F * (1 - eval_count / self.budget)\n                    mutant = positions[a] + dynamic_F * (positions[b] - positions[c])\n                    mutant = np.clip(mutant, self.lb, self.ub)\n\n                    mutant_score = func(mutant)\n                    eval_count += 1\n\n                    if mutant_score < scores[i]:\n                        positions[i] = mutant\n                        scores[i] = mutant_score\n\n                    if eval_count >= self.budget:\n                        break\n\n        return global_best_position", "name": "EnhancedHybridPSO_ADM_v2", "description": "A hybrid optimization approach combining PSO with Adaptive Differential Mutation and a dynamic strategy to adjust inertia and mutation rates for enhanced convergence.", "configspace": "", "generation": 2, "fitness": 0.18509343958088834, "feedback": "The algorithm EnhancedHybridPSO_ADM_v2 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.21.", "error": "", "parent_id": "3362a835-f1bf-4abe-aecb-5f5117f7839b", "metadata": {"aucs": [0.5761232020734822, 0.6165698886267855, 0.5965994909167918, 0.6140065395886128, 0.15674668266447167, 0.18725320415074442, 0.6085324004397197, 0.5929953256715828, 0.1826281198840114, 0.06136000001305619, 0.03151671196599859, 9.999999999998899e-05, 9.999999999998899e-05, 0.03180651283373026, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0033583481994424735, 0.12425244626815601, 0.10138485420555499, 0.088290110488079, 0.09566776005993272, 0.06027876896559481, 0.05999661499914111, 0.09501161542936609, 0.11702996745948091, 0.10087282866270875, 0.09284823221135263, 0.046116359072207125, 0.08284484028577299, 0.08932284133247703, 0.042567888542070276, 0.07863559436616052, 0.1059790303091126, 0.09665229333132574, 0.08787092100554095, 0.9843536835736957, 0.9800150531037025, 0.9866052449237805, 0.9841193615845597, 0.983820490210174, 0.982568217518919, 0.9896867777779333, 0.984736427073424, 0.982939048720439, 0.1442813864665442, 0.10827714856161053, 0.05540732866674103, 0.17290470397662616, 0.14309635030378753, 0.1193144168394592, 0.18546867520551358, 0.08713729801221948, 0.0809650550725628, 0.16693473163126926, 0.16339476230504735, 0.2131978969643934, 0.1930571300829792, 0.11505998948725904, 0.18300825349726002, 0.1646422881503915, 0.4111129882134025, 0.15249301138603932, 0.0811935248054717, 0.15038923992006326, 0.0815601989690693, 0.1226924734875835, 0.11043574486374963, 0.09405681831629686, 0.13734495815239967, 0.13927012174941078, 0.14544320208817374, 0.15382632517964034, 0.13435585416959206, 0.015816478275919144, 0.17285065885754358, 0.08647443169342661, 0.14499110813306793, 0.13276553791616064, 0.0880373085328161, 0.13712475333672425, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.049344849188664, 0.02325293949412266, 0.06862996011131162, 0.05969033824620562, 0.05504709096419336, 0.025498286833274375, 0.022638549235583172, 0.04520432766345073, 0.05078081112605104, 0.026728839895570178, 9.999999999998899e-05, 9.999999999998899e-05, 0.0928856579895484, 9.999999999998899e-05, 0.0417212737810434, 0.06506418194969132, 0.09967702628755215, 0.06009437987007549, 0.07729037754048063, 0.12163288541166872, 0.03531813734541045, 0.03796863682663698, 0.004193531827197505, 0.0814503886605702, 0.04473282247390198, 0.061867180299295055, 9.999999999998899e-05, 0.3911960789855441, 0.4070113159563713, 0.4292657908635007, 0.4556522824045438, 0.18144227527455137, 0.3734185537739445, 0.42649834906068795, 0.3889089358789032, 0.42416998433404285, 0.07792916023825092, 0.07786366681689905, 0.07204361118495528, 0.10332946293972678, 0.07292398238858, 0.09249414479952078, 0.09046065635871492, 0.0724091716660592, 0.07995373142160811, 0.10809426547655754, 0.1346695002805589, 0.16767423384610902, 0.15849238795643328, 0.23927007491090957, 0.1688736145992794, 0.20187927795655924, 0.12607954196982807, 0.196550105728458, 0.315557435612031, 0.19163094128277702, 0.22084922355150416, 0.2062494132645859, 0.1799456204525981, 0.2859241907560406, 0.26956447798948757, 0.2883948626561681, 0.25619115326530373, 0.20053690209616148, 0.154011426521367, 0.21151963619322356, 0.12339239821837733, 0.17360676751521098, 0.16238581290647636, 0.23037679803565903, 0.18795550332712752, 0.1800713815492767, 0.16152587842263144, 0.21545281343645428, 0.16681080731911402, 0.15784583132436514, 0.15404834761068398, 0.15452676677806942, 0.1908192568601369, 0.16793805820823948, 0.19392448257843398, 0.1740978736731157, 0.19619640065287303, 0.17885056532902477, 0.18809623599384218, 0.17749640277047296, 0.18246221487594705, 0.2218183193655373, 0.18360321350458642, 0.17644606368214522, 0.2548129731490564, 0.15621500912966713, 0.15168511030340925, 0.6754621657448474, 0.1939265815961051, 0.12696850659818515, 0.141386734512164, 0.16830730709393116, 0.44728680549879896, 0.21195149948555103, 0.16709211981655403, 0.1515038023455918, 0.18991374064970545, 0.20705776939231268, 0.19875080207341667, 0.1977476559238618, 0.20576820836401577, 0.19361394760883377, 0.18291857248834809, 0.1717501838138653, 0.17671134968799818, 0.1853666691368776, 0.1629526074219293, 0.2013211521678877, 0.17979995694462414, 0.1726504881692006, 0.18958358463512215, 0.06852337863530356, 0.06589977392729585, 0.06252710805581496, 0.05998710141376451, 0.05930160233023307, 0.06636848792975047, 0.07357214268293588, 0.07514620219670065, 0.06281588909726654]}, "mutation_prompt": null}
{"id": "45db4d39-9f2b-4b88-8a7f-d05981c98791", "solution": "import numpy as np\n\nclass RefinedHybridPSO_ADM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.num_particles = 35  # Slightly increased number of particles for diversity\n        self.w = 0.4  # Further reduced inertia weight for faster convergence\n        self.c1 = 2.2  # Enhanced cognitive component for increased individual search\n        self.c2 = 1.8  # Slightly reduced social component for less global dependence\n        self.F_min = 0.5  # Lower bound for differential mutation scale\n        self.F_max = 0.9  # Upper bound for differential mutation scale\n        self.CR = 0.9  # Increased crossover probability for more exploration\n        self.adaptive_lr = 150  # Adjusted adaptive learning rate scale factor\n\n    def __call__(self, func):\n        # Initialize particles\n        positions = np.random.uniform(self.lb, self.ub, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.num_particles, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.num_particles, float('inf'))\n        global_best_position = np.zeros(self.dim)\n        global_best_score = float('inf')\n\n        eval_count = 0\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            scores = np.array([func(p) for p in positions])\n            eval_count += self.num_particles\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_scores[better_mask] = scores[better_mask]\n            personal_best_positions[better_mask] = positions[better_mask]\n\n            min_score_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[min_score_idx] < global_best_score:\n                global_best_score = personal_best_scores[min_score_idx]\n                global_best_position = personal_best_positions[min_score_idx]\n\n            # Calculate diversity-based inertia weight\n            diversity = np.mean(np.std(positions, axis=0))\n            w_dynamic = self.w * (1 + diversity / self.dim)\n\n            # Update velocities and positions using PSO update rule\n            r1 = np.random.rand(self.num_particles, self.dim)\n            r2 = np.random.rand(self.num_particles, self.dim)\n            velocities = (w_dynamic * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.lb, self.ub)\n\n            # Adaptive differential mutation scale\n            F_dynamic = self.F_max - (self.F_max - self.F_min) * (eval_count / self.budget)\n\n            # Apply Adaptive Differential Mutation\n            for i in range(self.num_particles):\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(idxs, 3, replace=False)\n                    mutant = positions[a] + F_dynamic * (positions[b] - positions[c])\n                    mutant = np.clip(mutant, self.lb, self.ub)\n                    \n                    if func(mutant) < scores[i]:\n                        positions[i] = mutant\n                        eval_count += 1\n                        if eval_count >= self.budget:\n                            break\n\n        return global_best_position", "name": "RefinedHybridPSO_ADM", "description": "A refined hybrid algorithm incorporating dynamic swarm diversity control and adaptive differential mutation scale to enhance convergence speed.", "configspace": "", "generation": 3, "fitness": 0.22083551054971476, "feedback": "The algorithm RefinedHybridPSO_ADM got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.23.", "error": "", "parent_id": "3362a835-f1bf-4abe-aecb-5f5117f7839b", "metadata": {"aucs": [0.783137375225489, 0.7453837466637412, 0.8002026472649955, 0.8331175627037026, 0.1892780729870739, 0.8221444379735982, 0.8109381962587459, 0.8091446821843118, 0.811426297375089, 0.5097179741995363, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04819149871800332, 0.5358323230853931, 0.4665178716185556, 0.11540361549294353, 0.20059732464091617, 0.11291398686715581, 0.09663945636729587, 0.0965392719540048, 0.07507379965922445, 0.10489988586701315, 0.12497670071605893, 0.13368501266087018, 0.07888220932714773, 0.14654655678724793, 0.10531540114697491, 0.06625637580676924, 0.11824243638362064, 0.10218145640772636, 0.10425896914135846, 0.11061308715115703, 0.08377075455973404, 0.9838998855446914, 0.9828873741292243, 0.9833341831163788, 0.9793076257607827, 0.9813730679313933, 0.9704826526377704, 0.9846027039815844, 0.9767924612245541, 0.9837679518735758, 0.23704458550626772, 0.22488339628639242, 0.17840528906458708, 0.14460287570231156, 0.14570577828283204, 0.2148284979287115, 0.26151882377246327, 0.21144968463414426, 0.08423344459672555, 0.21334613459220786, 0.16169576903020555, 0.19423666984065158, 0.26802467055852963, 0.2106147287887361, 0.27423247994246736, 0.1186343730703815, 0.1829232469774411, 0.21016361143099593, 0.16480867169393731, 0.10842383015354318, 0.16860352089068387, 0.12027541740685233, 0.17528048400251173, 0.16841021050693294, 0.18077680049425193, 0.08474411713985686, 0.15476906796907408, 0.12545946937668118, 0.00924516263915065, 0.14674462256307852, 0.12693660576074894, 0.15153426691678795, 0.20648915256806055, 0.10372328300893674, 0.09785997401319801, 0.0938517882446891, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006572090228373573, 0.02972789070130133, 0.03125665735521166, 0.024175564103301572, 0.0700906434805536, 0.012615436004877467, 0.02436235850543067, 0.028893965411048494, 0.04817767240626525, 0.045310163044226304, 0.045149373215348176, 0.050328141816678884, 0.03248720559268181, 0.10609375156901546, 0.07963594127762441, 0.06977295830508612, 0.09105429517178709, 0.0885054358363343, 0.06469677746833169, 0.10721937057496767, 9.999999999998899e-05, 0.21161017336541732, 0.0064342187814953045, 9.999999999998899e-05, 0.1678110122375892, 0.047033174927062604, 0.05380354715829072, 0.08038968002752012, 0.4768928941744861, 0.4726651227221921, 0.4559540694274733, 0.5117917958357252, 0.4652877205084074, 0.47682846814345625, 0.45081049866951284, 0.47135380862781984, 0.5432817758659869, 0.09030120159820998, 0.09031592378702258, 0.08923118789644502, 0.10518275753608575, 0.0762750967075495, 0.08246335591856002, 0.07221267679752508, 0.09439682640202607, 0.08030408065855499, 0.16933671414309448, 0.14783393057089744, 0.14779043754601284, 0.1386933613435336, 0.1398388575860814, 0.17804192463745472, 0.21650349803952462, 0.1402412778358424, 0.16946579443132737, 0.2957598328145796, 0.21621887349860125, 0.26718500368225695, 0.23483951375223155, 0.24039793090571948, 0.297242300157201, 0.2023285385078758, 0.43960588895152897, 0.419770035150447, 0.2105593899142183, 0.22032298256476857, 0.290062597850934, 0.1452573976064757, 0.18853487701121163, 0.19224541715195986, 0.19451928346465475, 0.26240933223219587, 0.2427978993829658, 0.18835265651023836, 0.13379472665831094, 0.17297134516538049, 0.19867252443348593, 0.1832708251843752, 0.16577532215757107, 0.18390852565258597, 0.17000994184283336, 0.19980198346900602, 0.1998401649590964, 0.19294210968890757, 0.21521201962344472, 0.20063022341059644, 0.1887184656112011, 0.18207612425022834, 0.20928462159107108, 0.18582143422241437, 0.20481271668750223, 0.1958714499446954, 0.1630629253907151, 0.15335245388623842, 0.6452423867188241, 0.19743931101815893, 0.19755763617283384, 0.14199759087762143, 0.19878652932587404, 0.6507762948924666, 0.2599680121300447, 0.20175400576457048, 0.20381562929979513, 0.22562637529272145, 0.1687176382361817, 0.20848448053373891, 0.19865366793040795, 0.2038923244547125, 0.24102433675714674, 0.16886010288191955, 0.1786873058430397, 0.1889544137719541, 0.19151986111318497, 0.16318898280233385, 0.17871320689660675, 0.19272016672000614, 0.1841926606025478, 0.18585072611782938, 0.06707520112544718, 0.06911524248425316, 0.0695151354830239, 0.05740260274816977, 0.07296235827358721, 0.06533727816531987, 0.06216874257784277, 0.06708873380440183, 0.07438172825503009]}, "mutation_prompt": null}
{"id": "3198035c-cb20-42a5-880a-2c1c1a355c05", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_ADM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.num_particles = 30  # Increased number of particles for better sampling\n        self.w = 0.5  # Reduced inertia weight for quicker convergence\n        self.c1 = 2.0  # Increased cognitive component\n        self.c2 = 2.0  # Increased social component\n        self.F = 0.9  # Increased differential mutation factor\n        self.CR = 0.8  # Reduced crossover probability\n        self.adaptive_lr = 100  # Adaptive learning rate scale factor\n\n    def __call__(self, func):\n        # Initialize particles\n        positions = np.random.uniform(self.lb, self.ub, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.num_particles, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.num_particles, float('inf'))\n        global_best_position = np.zeros(self.dim)\n        global_best_score = float('inf')\n\n        eval_count = 0\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            scores = np.array([func(p) for p in positions])\n            eval_count += self.num_particles\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_scores[better_mask] = scores[better_mask]\n            personal_best_positions[better_mask] = positions[better_mask]\n\n            min_score_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[min_score_idx] < global_best_score:\n                global_best_score = personal_best_scores[min_score_idx]\n                global_best_position = personal_best_positions[min_score_idx]\n\n            # Update velocities and positions using PSO update rule\n            r1 = np.random.rand(self.num_particles, self.dim)\n            r2 = np.random.rand(self.num_particles, self.dim)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.lb, self.ub)\n\n            # Adaptive learning rate\n            adaptive_w = self.w / (1 + eval_count / self.adaptive_lr)\n            velocities *= adaptive_w\n\n            # Apply Adaptive Differential Mutation\n            for i in range(self.num_particles):\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(idxs, 3, replace=False)\n                    mutant = positions[a] + self.F * (positions[b] - positions[c])\n                    mutant = np.clip(mutant, self.lb, self.ub)\n                    \n                    if func(mutant) < scores[i]:\n                        positions[i] = mutant\n                        eval_count += 1\n                        if eval_count >= self.budget:\n                            break\n\n        return global_best_position", "name": "EnhancedHybridPSO_ADM", "description": "An enhanced hybrid algorithm combining Particle Swarm Optimization and Adaptive Differential Mutation with an adaptive learning rate for improved convergence speed.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3362a835-f1bf-4abe-aecb-5f5117f7839b", "metadata": {"aucs": [0.9265985541450171, 0.930021374337553, 0.9298088801534755, 0.9162506721671881, 0.887752861872175, 0.8438031902143162, 0.9037926203371243, 0.8625018845874837, 0.9261314138704533, 0.8556935344731726, 0.7798816501132038, 9.999999999998899e-05, 0.8437669511971309, 0.8249269656699976, 0.8312058518424005, 0.8155857749445834, 0.7789052194597377, 0.8158357696086289, 0.0794970229994626, 0.09260779637074479, 0.12403204253586286, 0.06866060865752244, 0.1757162812712404, 0.13176580226674284, 0.14289034511966514, 0.1087505475132009, 0.12319281587418995, 0.10069147217694152, 0.14505395069553428, 0.14004216442083195, 0.09575232135593637, 0.13566863800637907, 0.14297628281264074, 0.14192709908204637, 0.09142062197419987, 0.0995047844864182, 0.9868752858210801, 0.9825416690057619, 0.9864212970543318, 0.9723493036252635, 0.9782079525384475, 0.977821923689258, 0.9871989850166887, 0.9901562607561323, 0.9785393960109932, 0.34726844999678375, 0.2610006562856605, 0.2397514179020861, 0.1535867432604886, 0.36747468298739894, 0.1490087097275955, 0.4349095449306386, 0.4631328234178185, 0.29090171161964673, 0.21304315060360957, 0.24594465204803184, 0.16768601024184993, 0.2150764552677853, 0.19395092919734247, 0.19174174566353241, 0.12592176843709457, 0.1610074474041414, 0.2309279343815004, 0.17995967587792694, 0.24251284975071608, 0.12746711970727997, 0.10095538631230794, 0.1883141399420757, 0.17958930023935027, 0.33489348890400883, 0.1637445250676166, 0.23108099377345515, 0.16738496569366967, 0.022532668855105076, 0.18441709143444662, 0.25205213747712374, 0.1333994411537327, 0.17928672654713884, 0.19783847548307598, 0.1043672732491312, 0.10627322737460432, 0.019232718753651734, 9.999999999998899e-05, 0.09002588296841973, 0.0003561973889243397, 0.04895820829589881, 9.999999999998899e-05, 0.07154030786000698, 9.999999999998899e-05, 0.05160593492564114, 0.06297837226228498, 0.04244183873345142, 0.07282402551956857, 0.05486602058399437, 0.0017191431200337393, 0.039031078195678526, 0.044713810083050864, 0.034489604447586086, 0.07519978312881426, 0.05204146929728226, 9.999999999998899e-05, 0.11497248794106363, 0.0905925784257976, 0.10087539279681701, 0.08288275216993912, 9.999999999998899e-05, 0.07666206466398306, 0.07756763110451326, 0.13308253636571676, 0.06796109677048057, 0.010911628927399719, 0.07169904524849302, 0.09613034446038327, 0.06514543864884659, 0.05772094965266783, 0.058171482916945405, 0.08417528799412999, 0.4964563847372354, 0.510574664420947, 0.49865333459043115, 0.5864301272647336, 0.5446703677276077, 0.5258852631948425, 0.5351676703797896, 0.4928685287388993, 0.5042058683338391, 0.07009075584509117, 0.10106371741336462, 0.13908329904552885, 0.08984611380371277, 0.0936788965391877, 0.09574509653926322, 0.11816006510898547, 0.07592987441132903, 0.07349497959165652, 0.1961678783695291, 0.18058773511712733, 0.16508504543457114, 0.1750972650082906, 0.25888545897575377, 0.1502553943628383, 0.36236283830842564, 0.20759835228858192, 0.1475532984630492, 0.2383916508638685, 0.22208039030898807, 0.19394671986791634, 0.21202114626014168, 0.2480686711252298, 0.231405812693235, 0.33995694016251754, 0.378567853286942, 0.38694568296118226, 0.14692370390889775, 0.2199980009681075, 0.2381035080559959, 0.27938137623425074, 0.20626820255513745, 0.22124238586283929, 0.21767502746451906, 0.16536817373731172, 0.1713155716712048, 0.19457547384214335, 0.14933357269559944, 0.20844912788394643, 0.2276626111143576, 0.182890822534176, 0.16417133327537836, 0.1785458823608771, 0.22486827602291193, 0.20122019521460022, 0.1898851221467579, 0.17502457752444567, 0.21772767805859627, 0.19708437958043312, 0.19454069793267126, 0.18250244574558494, 0.8218888118819387, 0.1899810265402968, 0.1875072873144471, 0.9088725950739578, 0.16946109565959155, 0.153815508482103, 0.7926964360653203, 0.20116335280585185, 0.20092542635811983, 0.12286086208731162, 0.16963360304914987, 0.21198225007848082, 0.8285179294611625, 0.15727168832876037, 0.21259096293722146, 0.21061266281095214, 0.34388140510937193, 0.21091980229443008, 0.2132832432166749, 0.10473143584887878, 0.19879342526329236, 0.19612433368186666, 0.19942905637063546, 0.17648098227465103, 0.18614944812401735, 0.1762862250871392, 0.1823413702755895, 0.17692955926035325, 0.18931660152638408, 0.18498991252953223, 0.07351193761902908, 0.07748250571637305, 0.08020577039579169, 0.07971240537052471, 0.08781610665165751, 0.07340011156839843, 0.09403007970681787, 0.0671621688390791, 0.07501616473055872]}, "mutation_prompt": null}
{"id": "c7e492d6-00f4-45a6-bed6-e66beb7f79ce", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_ADM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.num_particles = 30  # Increased number of particles for better sampling\n        self.w = 0.5  # Reduced inertia weight for quicker convergence\n        self.c1 = 2.0  # Increased cognitive component\n        self.c2 = 2.0  # Increased social component\n        self.F = 0.9  # Increased differential mutation factor\n        self.CR = 0.8  # Reduced crossover probability\n        self.adaptive_lr = 100  # Adaptive learning rate scale factor\n\n    def __call__(self, func):\n        # Initialize particles\n        positions = np.random.uniform(self.lb, self.ub, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.num_particles, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.num_particles, float('inf'))\n        global_best_position = np.zeros(self.dim)\n        global_best_score = float('inf')\n\n        eval_count = 0\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            scores = np.array([func(p) for p in positions])\n            eval_count += self.num_particles\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_scores[better_mask] = scores[better_mask]\n            personal_best_positions[better_mask] = positions[better_mask]\n\n            min_score_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[min_score_idx] < global_best_score:\n                global_best_score = personal_best_scores[min_score_idx]\n                global_best_position = personal_best_positions[min_score_idx]\n\n            # Update velocities and positions using PSO update rule\n            r1 = np.random.rand(self.num_particles, self.dim)\n            r2 = np.random.rand(self.num_particles, self.dim)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.lb, self.ub)\n\n            # Adaptive learning rate\n            adaptive_w = self.w / (1 + eval_count / self.adaptive_lr)\n            velocities *= adaptive_w\n\n            # Apply Adaptive Differential Mutation\n            for i in range(self.num_particles):\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(idxs, 3, replace=False)\n                    mutant = positions[a] + self.F * (positions[b] - positions[c])\n                    mutant = np.clip(mutant, self.lb, self.ub)\n                    \n                    if func(mutant) < scores[i]:\n                        positions[i] = mutant\n                        eval_count += 1\n                        if eval_count >= self.budget:\n                            break\n\n        return global_best_position", "name": "EnhancedHybridPSO_ADM", "description": "An enhanced hybrid algorithm combining Particle Swarm Optimization and Adaptive Differential Mutation with an adaptive learning rate for improved convergence speed.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3362a835-f1bf-4abe-aecb-5f5117f7839b", "metadata": {"aucs": [0.9265985541450171, 0.930021374337553, 0.9298088801534755, 0.9162506721671881, 0.887752861872175, 0.8438031902143162, 0.9037926203371243, 0.8625018845874837, 0.9261314138704533, 0.8556935344731726, 0.7798816501132038, 9.999999999998899e-05, 0.8437669511971309, 0.8249269656699976, 0.8312058518424005, 0.8155857749445834, 0.7789052194597377, 0.8158357696086289, 0.0794970229994626, 0.09260779637074479, 0.12403204253586286, 0.06866060865752244, 0.1757162812712404, 0.13176580226674284, 0.14289034511966514, 0.1087505475132009, 0.12319281587418995, 0.10069147217694152, 0.14505395069553428, 0.14004216442083195, 0.09575232135593637, 0.13566863800637907, 0.14297628281264074, 0.14192709908204637, 0.09142062197419987, 0.0995047844864182, 0.9868752858210801, 0.9825416690057619, 0.9864212970543318, 0.9723493036252635, 0.9782079525384475, 0.977821923689258, 0.9871989850166887, 0.9901562607561323, 0.9785393960109932, 0.34726844999678375, 0.2610006562856605, 0.2397514179020861, 0.1535867432604886, 0.36747468298739894, 0.1490087097275955, 0.4349095449306386, 0.4631328234178185, 0.29090171161964673, 0.21304315060360957, 0.24594465204803184, 0.16768601024184993, 0.2150764552677853, 0.19395092919734247, 0.19174174566353241, 0.12592176843709457, 0.1610074474041414, 0.2309279343815004, 0.17995967587792694, 0.24251284975071608, 0.12746711970727997, 0.10095538631230794, 0.1883141399420757, 0.17958930023935027, 0.33489348890400883, 0.1637445250676166, 0.23108099377345515, 0.16738496569366967, 0.022532668855105076, 0.18441709143444662, 0.25205213747712374, 0.1333994411537327, 0.17928672654713884, 0.19783847548307598, 0.1043672732491312, 0.10627322737460432, 0.019232718753651734, 9.999999999998899e-05, 0.09002588296841973, 0.0003561973889243397, 0.04895820829589881, 9.999999999998899e-05, 0.07154030786000698, 9.999999999998899e-05, 0.05160593492564114, 0.06297837226228498, 0.04244183873345142, 0.07282402551956857, 0.05486602058399437, 0.0017191431200337393, 0.039031078195678526, 0.044713810083050864, 0.034489604447586086, 0.07519978312881426, 0.05204146929728226, 9.999999999998899e-05, 0.11497248794106363, 0.0905925784257976, 0.10087539279681701, 0.08288275216993912, 9.999999999998899e-05, 0.07666206466398306, 0.07756763110451326, 0.13308253636571676, 0.06796109677048057, 0.010911628927399719, 0.07169904524849302, 0.09613034446038327, 0.06514543864884659, 0.05772094965266783, 0.058171482916945405, 0.08417528799412999, 0.4964563847372354, 0.510574664420947, 0.49865333459043115, 0.5864301272647336, 0.5446703677276077, 0.5258852631948425, 0.5351676703797896, 0.4928685287388993, 0.5042058683338391, 0.07009075584509117, 0.10106371741336462, 0.13908329904552885, 0.08984611380371277, 0.0936788965391877, 0.09574509653926322, 0.11816006510898547, 0.07592987441132903, 0.07349497959165652, 0.1961678783695291, 0.18058773511712733, 0.16508504543457114, 0.1750972650082906, 0.25888545897575377, 0.1502553943628383, 0.36236283830842564, 0.20759835228858192, 0.1475532984630492, 0.2383916508638685, 0.22208039030898807, 0.19394671986791634, 0.21202114626014168, 0.2480686711252298, 0.231405812693235, 0.33995694016251754, 0.378567853286942, 0.38694568296118226, 0.14692370390889775, 0.2199980009681075, 0.2381035080559959, 0.27938137623425074, 0.20626820255513745, 0.22124238586283929, 0.21767502746451906, 0.16536817373731172, 0.1713155716712048, 0.19457547384214335, 0.14933357269559944, 0.20844912788394643, 0.2276626111143576, 0.182890822534176, 0.16417133327537836, 0.1785458823608771, 0.22486827602291193, 0.20122019521460022, 0.1898851221467579, 0.17502457752444567, 0.21772767805859627, 0.19708437958043312, 0.19454069793267126, 0.18250244574558494, 0.8218888118819387, 0.1899810265402968, 0.1875072873144471, 0.9088725950739578, 0.16946109565959155, 0.153815508482103, 0.7926964360653203, 0.20116335280585185, 0.20092542635811983, 0.12286086208731162, 0.16963360304914987, 0.21198225007848082, 0.8285179294611625, 0.15727168832876037, 0.21259096293722146, 0.21061266281095214, 0.34388140510937193, 0.21091980229443008, 0.2132832432166749, 0.10473143584887878, 0.19879342526329236, 0.19612433368186666, 0.19942905637063546, 0.17648098227465103, 0.18614944812401735, 0.1762862250871392, 0.1823413702755895, 0.17692955926035325, 0.18931660152638408, 0.18498991252953223, 0.07351193761902908, 0.07748250571637305, 0.08020577039579169, 0.07971240537052471, 0.08781610665165751, 0.07340011156839843, 0.09403007970681787, 0.0671621688390791, 0.07501616473055872]}, "mutation_prompt": null}
{"id": "7ce07a7d-7709-4afb-aa29-ea4855728deb", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_ADM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.num_particles = 30  # Increased number of particles for better sampling\n        self.w = 0.5  # Reduced inertia weight for quicker convergence\n        self.c1 = 2.0  # Increased cognitive component\n        self.c2 = 2.0  # Increased social component\n        self.F = 0.9  # Increased differential mutation factor\n        self.CR = 0.8  # Reduced crossover probability\n        self.adaptive_lr = 100  # Adaptive learning rate scale factor\n\n    def __call__(self, func):\n        # Initialize particles\n        positions = np.random.uniform(self.lb, self.ub, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.num_particles, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.num_particles, float('inf'))\n        global_best_position = np.zeros(self.dim)\n        global_best_score = float('inf')\n\n        eval_count = 0\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            scores = np.array([func(p) for p in positions])\n            eval_count += self.num_particles\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_scores[better_mask] = scores[better_mask]\n            personal_best_positions[better_mask] = positions[better_mask]\n\n            min_score_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[min_score_idx] < global_best_score:\n                global_best_score = personal_best_scores[min_score_idx]\n                global_best_position = personal_best_positions[min_score_idx]\n\n            # Update velocities and positions using PSO update rule\n            r1 = np.random.rand(self.num_particles, self.dim)\n            r2 = np.random.rand(self.num_particles, self.dim)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.lb, self.ub)\n\n            # Adaptive learning rate\n            adaptive_w = self.w / (1 + eval_count / self.adaptive_lr)\n            velocities *= adaptive_w\n\n            # Apply Adaptive Differential Mutation\n            for i in range(self.num_particles):\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(idxs, 3, replace=False)\n                    mutant = positions[a] + self.F * (positions[b] - positions[c])\n                    mutant = np.clip(mutant, self.lb, self.ub)\n                    \n                    if func(mutant) < scores[i]:\n                        positions[i] = mutant\n                        eval_count += 1\n                        if eval_count >= self.budget:\n                            break\n\n        return global_best_position", "name": "EnhancedHybridPSO_ADM", "description": "An enhanced hybrid algorithm combining Particle Swarm Optimization and Adaptive Differential Mutation with an adaptive learning rate for improved convergence speed.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3362a835-f1bf-4abe-aecb-5f5117f7839b", "metadata": {"aucs": [0.9265985541450171, 0.930021374337553, 0.9298088801534755, 0.9162506721671881, 0.887752861872175, 0.8438031902143162, 0.9037926203371243, 0.8625018845874837, 0.9261314138704533, 0.8556935344731726, 0.7798816501132038, 9.999999999998899e-05, 0.8437669511971309, 0.8249269656699976, 0.8312058518424005, 0.8155857749445834, 0.7789052194597377, 0.8158357696086289, 0.0794970229994626, 0.09260779637074479, 0.12403204253586286, 0.06866060865752244, 0.1757162812712404, 0.13176580226674284, 0.14289034511966514, 0.1087505475132009, 0.12319281587418995, 0.10069147217694152, 0.14505395069553428, 0.14004216442083195, 0.09575232135593637, 0.13566863800637907, 0.14297628281264074, 0.14192709908204637, 0.09142062197419987, 0.0995047844864182, 0.9868752858210801, 0.9825416690057619, 0.9864212970543318, 0.9723493036252635, 0.9782079525384475, 0.977821923689258, 0.9871989850166887, 0.9901562607561323, 0.9785393960109932, 0.34726844999678375, 0.2610006562856605, 0.2397514179020861, 0.1535867432604886, 0.36747468298739894, 0.1490087097275955, 0.4349095449306386, 0.4631328234178185, 0.29090171161964673, 0.21304315060360957, 0.24594465204803184, 0.16768601024184993, 0.2150764552677853, 0.19395092919734247, 0.19174174566353241, 0.12592176843709457, 0.1610074474041414, 0.2309279343815004, 0.17995967587792694, 0.24251284975071608, 0.12746711970727997, 0.10095538631230794, 0.1883141399420757, 0.17958930023935027, 0.33489348890400883, 0.1637445250676166, 0.23108099377345515, 0.16738496569366967, 0.022532668855105076, 0.18441709143444662, 0.25205213747712374, 0.1333994411537327, 0.17928672654713884, 0.19783847548307598, 0.1043672732491312, 0.10627322737460432, 0.019232718753651734, 9.999999999998899e-05, 0.09002588296841973, 0.0003561973889243397, 0.04895820829589881, 9.999999999998899e-05, 0.07154030786000698, 9.999999999998899e-05, 0.05160593492564114, 0.06297837226228498, 0.04244183873345142, 0.07282402551956857, 0.05486602058399437, 0.0017191431200337393, 0.039031078195678526, 0.044713810083050864, 0.034489604447586086, 0.07519978312881426, 0.05204146929728226, 9.999999999998899e-05, 0.11497248794106363, 0.0905925784257976, 0.10087539279681701, 0.08288275216993912, 9.999999999998899e-05, 0.07666206466398306, 0.07756763110451326, 0.13308253636571676, 0.06796109677048057, 0.010911628927399719, 0.07169904524849302, 0.09613034446038327, 0.06514543864884659, 0.05772094965266783, 0.058171482916945405, 0.08417528799412999, 0.4964563847372354, 0.510574664420947, 0.49865333459043115, 0.5864301272647336, 0.5446703677276077, 0.5258852631948425, 0.5351676703797896, 0.4928685287388993, 0.5042058683338391, 0.07009075584509117, 0.10106371741336462, 0.13908329904552885, 0.08984611380371277, 0.0936788965391877, 0.09574509653926322, 0.11816006510898547, 0.07592987441132903, 0.07349497959165652, 0.1961678783695291, 0.18058773511712733, 0.16508504543457114, 0.1750972650082906, 0.25888545897575377, 0.1502553943628383, 0.36236283830842564, 0.20759835228858192, 0.1475532984630492, 0.2383916508638685, 0.22208039030898807, 0.19394671986791634, 0.21202114626014168, 0.2480686711252298, 0.231405812693235, 0.33995694016251754, 0.378567853286942, 0.38694568296118226, 0.14692370390889775, 0.2199980009681075, 0.2381035080559959, 0.27938137623425074, 0.20626820255513745, 0.22124238586283929, 0.21767502746451906, 0.16536817373731172, 0.1713155716712048, 0.19457547384214335, 0.14933357269559944, 0.20844912788394643, 0.2276626111143576, 0.182890822534176, 0.16417133327537836, 0.1785458823608771, 0.22486827602291193, 0.20122019521460022, 0.1898851221467579, 0.17502457752444567, 0.21772767805859627, 0.19708437958043312, 0.19454069793267126, 0.18250244574558494, 0.8218888118819387, 0.1899810265402968, 0.1875072873144471, 0.9088725950739578, 0.16946109565959155, 0.153815508482103, 0.7926964360653203, 0.20116335280585185, 0.20092542635811983, 0.12286086208731162, 0.16963360304914987, 0.21198225007848082, 0.8285179294611625, 0.15727168832876037, 0.21259096293722146, 0.21061266281095214, 0.34388140510937193, 0.21091980229443008, 0.2132832432166749, 0.10473143584887878, 0.19879342526329236, 0.19612433368186666, 0.19942905637063546, 0.17648098227465103, 0.18614944812401735, 0.1762862250871392, 0.1823413702755895, 0.17692955926035325, 0.18931660152638408, 0.18498991252953223, 0.07351193761902908, 0.07748250571637305, 0.08020577039579169, 0.07971240537052471, 0.08781610665165751, 0.07340011156839843, 0.09403007970681787, 0.0671621688390791, 0.07501616473055872]}, "mutation_prompt": null}
{"id": "7dd99b68-5a10-48d3-82be-f5cd625c951a", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_ADM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.num_particles = 30  # Increased number of particles for better sampling\n        self.w = 0.5  # Reduced inertia weight for quicker convergence\n        self.c1 = 2.0  # Increased cognitive component\n        self.c2 = 2.0  # Increased social component\n        self.F = 0.9  # Increased differential mutation factor\n        self.CR = 0.8  # Reduced crossover probability\n        self.adaptive_lr = 100  # Adaptive learning rate scale factor\n\n    def __call__(self, func):\n        # Initialize particles\n        positions = np.random.uniform(self.lb, self.ub, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.num_particles, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.num_particles, float('inf'))\n        global_best_position = np.zeros(self.dim)\n        global_best_score = float('inf')\n\n        eval_count = 0\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            scores = np.array([func(p) for p in positions])\n            eval_count += self.num_particles\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_scores[better_mask] = scores[better_mask]\n            personal_best_positions[better_mask] = positions[better_mask]\n\n            min_score_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[min_score_idx] < global_best_score:\n                global_best_score = personal_best_scores[min_score_idx]\n                global_best_position = personal_best_positions[min_score_idx]\n\n            # Update velocities and positions using PSO update rule\n            r1 = np.random.rand(self.num_particles, self.dim)\n            r2 = np.random.rand(self.num_particles, self.dim)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.lb, self.ub)\n\n            # Adaptive learning rate\n            adaptive_w = self.w / (1 + eval_count / self.adaptive_lr)\n            velocities *= adaptive_w\n\n            # Apply Adaptive Differential Mutation\n            for i in range(self.num_particles):\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(idxs, 3, replace=False)\n                    mutant = positions[a] + self.F * (positions[b] - positions[c])\n                    mutant = np.clip(mutant, self.lb, self.ub)\n                    \n                    if func(mutant) < scores[i]:\n                        positions[i] = mutant\n                        eval_count += 1\n                        if eval_count >= self.budget:\n                            break\n\n        return global_best_position", "name": "EnhancedHybridPSO_ADM", "description": "An enhanced hybrid algorithm combining Particle Swarm Optimization and Adaptive Differential Mutation with an adaptive learning rate for improved convergence speed.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3362a835-f1bf-4abe-aecb-5f5117f7839b", "metadata": {"aucs": [0.9265985541450171, 0.930021374337553, 0.9298088801534755, 0.9162506721671881, 0.887752861872175, 0.8438031902143162, 0.9037926203371243, 0.8625018845874837, 0.9261314138704533, 0.8556935344731726, 0.7798816501132038, 9.999999999998899e-05, 0.8437669511971309, 0.8249269656699976, 0.8312058518424005, 0.8155857749445834, 0.7789052194597377, 0.8158357696086289, 0.0794970229994626, 0.09260779637074479, 0.12403204253586286, 0.06866060865752244, 0.1757162812712404, 0.13176580226674284, 0.14289034511966514, 0.1087505475132009, 0.12319281587418995, 0.10069147217694152, 0.14505395069553428, 0.14004216442083195, 0.09575232135593637, 0.13566863800637907, 0.14297628281264074, 0.14192709908204637, 0.09142062197419987, 0.0995047844864182, 0.9868752858210801, 0.9825416690057619, 0.9864212970543318, 0.9723493036252635, 0.9782079525384475, 0.977821923689258, 0.9871989850166887, 0.9901562607561323, 0.9785393960109932, 0.34726844999678375, 0.2610006562856605, 0.2397514179020861, 0.1535867432604886, 0.36747468298739894, 0.1490087097275955, 0.4349095449306386, 0.4631328234178185, 0.29090171161964673, 0.21304315060360957, 0.24594465204803184, 0.16768601024184993, 0.2150764552677853, 0.19395092919734247, 0.19174174566353241, 0.12592176843709457, 0.1610074474041414, 0.2309279343815004, 0.17995967587792694, 0.24251284975071608, 0.12746711970727997, 0.10095538631230794, 0.1883141399420757, 0.17958930023935027, 0.33489348890400883, 0.1637445250676166, 0.23108099377345515, 0.16738496569366967, 0.022532668855105076, 0.18441709143444662, 0.25205213747712374, 0.1333994411537327, 0.17928672654713884, 0.19783847548307598, 0.1043672732491312, 0.10627322737460432, 0.019232718753651734, 9.999999999998899e-05, 0.09002588296841973, 0.0003561973889243397, 0.04895820829589881, 9.999999999998899e-05, 0.07154030786000698, 9.999999999998899e-05, 0.05160593492564114, 0.06297837226228498, 0.04244183873345142, 0.07282402551956857, 0.05486602058399437, 0.0017191431200337393, 0.039031078195678526, 0.044713810083050864, 0.034489604447586086, 0.07519978312881426, 0.05204146929728226, 9.999999999998899e-05, 0.11497248794106363, 0.0905925784257976, 0.10087539279681701, 0.08288275216993912, 9.999999999998899e-05, 0.07666206466398306, 0.07756763110451326, 0.13308253636571676, 0.06796109677048057, 0.010911628927399719, 0.07169904524849302, 0.09613034446038327, 0.06514543864884659, 0.05772094965266783, 0.058171482916945405, 0.08417528799412999, 0.4964563847372354, 0.510574664420947, 0.49865333459043115, 0.5864301272647336, 0.5446703677276077, 0.5258852631948425, 0.5351676703797896, 0.4928685287388993, 0.5042058683338391, 0.07009075584509117, 0.10106371741336462, 0.13908329904552885, 0.08984611380371277, 0.0936788965391877, 0.09574509653926322, 0.11816006510898547, 0.07592987441132903, 0.07349497959165652, 0.1961678783695291, 0.18058773511712733, 0.16508504543457114, 0.1750972650082906, 0.25888545897575377, 0.1502553943628383, 0.36236283830842564, 0.20759835228858192, 0.1475532984630492, 0.2383916508638685, 0.22208039030898807, 0.19394671986791634, 0.21202114626014168, 0.2480686711252298, 0.231405812693235, 0.33995694016251754, 0.378567853286942, 0.38694568296118226, 0.14692370390889775, 0.2199980009681075, 0.2381035080559959, 0.27938137623425074, 0.20626820255513745, 0.22124238586283929, 0.21767502746451906, 0.16536817373731172, 0.1713155716712048, 0.19457547384214335, 0.14933357269559944, 0.20844912788394643, 0.2276626111143576, 0.182890822534176, 0.16417133327537836, 0.1785458823608771, 0.22486827602291193, 0.20122019521460022, 0.1898851221467579, 0.17502457752444567, 0.21772767805859627, 0.19708437958043312, 0.19454069793267126, 0.18250244574558494, 0.8218888118819387, 0.1899810265402968, 0.1875072873144471, 0.9088725950739578, 0.16946109565959155, 0.153815508482103, 0.7926964360653203, 0.20116335280585185, 0.20092542635811983, 0.12286086208731162, 0.16963360304914987, 0.21198225007848082, 0.8285179294611625, 0.15727168832876037, 0.21259096293722146, 0.21061266281095214, 0.34388140510937193, 0.21091980229443008, 0.2132832432166749, 0.10473143584887878, 0.19879342526329236, 0.19612433368186666, 0.19942905637063546, 0.17648098227465103, 0.18614944812401735, 0.1762862250871392, 0.1823413702755895, 0.17692955926035325, 0.18931660152638408, 0.18498991252953223, 0.07351193761902908, 0.07748250571637305, 0.08020577039579169, 0.07971240537052471, 0.08781610665165751, 0.07340011156839843, 0.09403007970681787, 0.0671621688390791, 0.07501616473055872]}, "mutation_prompt": null}
{"id": "353c7b47-817e-4475-a4c7-054c95dfae2d", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_ADM_Improved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.num_particles = 35  # Slightly increased number of particles for better exploration\n        self.w = 0.4  # Further reduced inertia weight for faster convergence\n        self.c1_initial = 1.5  # Dynamic cognitive component\n        self.c2_initial = 2.5  # Dynamic social component\n        self.F = 0.8  # Adjusted differential mutation factor\n        self.CR = 0.9  # Increased crossover probability for diversity\n        self.adaptive_lr = 150  # Modified adaptive learning rate scale factor\n        self.alpha = 0.99  # Decay factor for dynamic parameters\n\n    def __call__(self, func):\n        # Initialize particles\n        positions = np.random.uniform(self.lb, self.ub, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.num_particles, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.num_particles, float('inf'))\n        global_best_position = np.zeros(self.dim)\n        global_best_score = float('inf')\n\n        eval_count = 0\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            scores = np.array([func(p) for p in positions])\n            eval_count += self.num_particles\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_scores[better_mask] = scores[better_mask]\n            personal_best_positions[better_mask] = positions[better_mask]\n\n            min_score_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[min_score_idx] < global_best_score:\n                global_best_score = personal_best_scores[min_score_idx]\n                global_best_position = personal_best_positions[min_score_idx]\n\n            # Update velocities and positions using PSO update rule\n            r1 = np.random.rand(self.num_particles, self.dim)\n            r2 = np.random.rand(self.num_particles, self.dim)\n            c1 = self.c1_initial * (self.alpha ** (eval_count / self.budget))\n            c2 = self.c2_initial * (self.alpha ** (eval_count / self.budget))\n            velocities = (self.w * velocities +\n                          c1 * r1 * (personal_best_positions - positions) +\n                          c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.lb, self.ub)\n\n            # Adaptive learning rate\n            adaptive_w = self.w / (1 + eval_count / self.adaptive_lr)\n            velocities *= adaptive_w\n\n            # Improved Adaptive Differential Mutation\n            for i in range(self.num_particles):\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(idxs, 3, replace=False)\n                    mutant = positions[a] + self.F * (personal_best_positions[b] - personal_best_positions[c])\n                    mutant = np.clip(mutant, self.lb, self.ub)\n\n                    mutant_score = func(mutant)\n                    if mutant_score < scores[i]:\n                        positions[i] = mutant\n                        eval_count += 1\n                        if eval_count >= self.budget:\n                            break\n\n        return global_best_position", "name": "EnhancedHybridPSO_ADM_Improved", "description": "An adaptive hybrid optimization algorithm that enhances convergence speed by introducing dynamic parameter tuning and an improved mutation strategy.", "configspace": "", "generation": 8, "fitness": 0.2715847356396, "feedback": "The algorithm EnhancedHybridPSO_ADM_Improved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.25.", "error": "", "parent_id": "3362a835-f1bf-4abe-aecb-5f5117f7839b", "metadata": {"aucs": [0.9093623959864118, 0.8727862644464566, 0.8681707973122486, 0.8872105465256395, 0.8616788723316051, 0.8775928154262036, 0.8806052736663668, 0.8537245391577678, 0.8146769665866513, 0.0415052736153928, 9.999999999998899e-05, 0.04100955878072787, 0.7638239882819735, 9.999999999998899e-05, 0.7634924810716077, 0.05367673835047315, 0.004903992548838332, 0.7332938541242591, 0.15355854805746172, 0.11219934338894777, 0.1478175784950947, 0.10853175108258906, 0.13076635408869264, 0.13176094807073424, 0.14142071587765948, 0.14511263688988907, 0.13869304759843415, 0.14112263121335566, 0.1314051462114032, 0.08880628304584948, 0.143162626405966, 0.09203325377654548, 0.11209126727451746, 0.14868003378864958, 0.13450119867770138, 0.1221599437000015, 0.9845565388326104, 0.9844659014823625, 0.9785661251666395, 0.9793421393518762, 0.9786290404153675, 0.9786271375766876, 0.9824871708851493, 0.9626995818023548, 0.9883815776102851, 0.25534566369136413, 0.3183305175699711, 0.24883189011113083, 0.2534857826555421, 0.2811218354409982, 0.14721753243019975, 0.34216471623289957, 0.25718127609422403, 0.22379789389409288, 0.45259528214374434, 0.3553239791698255, 0.2145616172096052, 0.7069910290707362, 0.19799322507263872, 0.20562907003731223, 0.22701012666664822, 0.619595099232049, 0.16898391355932618, 0.2783829964968523, 0.129867597250669, 0.24723063327672057, 0.1286387548088347, 0.22355546827539974, 0.10634308041298024, 0.23221302121376275, 0.12885678185952054, 0.2566630388678476, 0.23945597563929688, 0.23683052050566944, 0.23496034177555736, 0.20476759310161508, 0.24033448942540359, 0.3372493617041189, 0.3012421623538357, 0.24100697079400457, 0.2507589473480861, 0.022335015872066433, 0.0036366674713667058, 0.02589326885398402, 9.999999999998899e-05, 9.999999999998899e-05, 0.021956452439293894, 0.00029620446696521086, 9.999999999998899e-05, 0.04015760327757811, 0.05412788415250813, 0.07868718937340002, 0.08769071677251927, 0.06253755732259891, 0.07229863526227454, 0.08571189098114462, 0.06283653043459048, 0.062598917664753, 0.06983540825607981, 9.999999999998899e-05, 0.0416127744612389, 0.04818973408140992, 0.13446223333068463, 0.09589151744887947, 0.20639936796834146, 0.09744606563446001, 0.09219303997494877, 0.10043642591710655, 0.23576107172488647, 0.1779567533133415, 0.04305858075679858, 0.14128621187068857, 0.006420373669507318, 0.15430776638212007, 0.07379274797051383, 0.08186312212182034, 0.12391357861954533, 0.4704430025299253, 0.5243408566835143, 0.5239638180380322, 0.5311831655580342, 0.534527783173194, 0.5701072763979316, 0.5813258320320827, 0.5095287076213417, 0.5603788637703897, 0.07810897226444413, 0.10380042535492462, 0.07761531697796165, 0.09799784072491091, 0.10193022160583931, 0.0973222586902932, 0.0990921289629283, 0.07926937245646881, 0.11325090822466044, 0.1788468620476681, 0.2902553645371133, 0.13688821790534966, 0.13749256783950026, 0.20709997876863118, 0.22681539347046187, 0.17638478633922772, 0.13322466482348572, 0.17947945069207927, 0.2331993211674832, 0.4083827866927936, 0.3362720233786015, 0.3786460245988855, 0.36548712998144406, 0.4498627933932442, 0.3435785016937193, 0.38554305905009223, 0.4184422792360165, 0.3650315792152423, 0.17975062101683192, 0.24762940042000658, 0.2224885709326525, 0.22639512477490908, 0.2350602334338292, 0.284676969598224, 0.2766796153726374, 0.2738174302727949, 0.18990466877891077, 0.17807156536439994, 0.18670205822104513, 0.1962076157046233, 0.18163748076240804, 0.17270172910534587, 0.18511419107850724, 0.1757858969940207, 0.19329501205300026, 0.19884624783436045, 0.23827439937041273, 0.19719390326849895, 0.23888179326545944, 0.18986343475578993, 0.19891346380396036, 0.2273297317938996, 0.6816218535853621, 0.2198008125391867, 0.1613576843305462, 0.1648140828061856, 0.6998553833279157, 0.7662059282257135, 0.20017247215945322, 0.14758818190271117, 0.8391384459341181, 0.16967709241122209, 0.21081878396449516, 0.592307887946875, 0.21144707603848956, 0.12668721697047058, 0.2779313468208551, 0.2260817300627942, 0.21187391080063012, 0.1889193712397178, 0.19877210568246806, 0.3950996235649379, 0.17763545132801284, 0.23461036187932605, 0.20001269063094218, 0.1868557557119055, 0.1697824421536459, 0.1789298904044877, 0.19041073142833675, 0.19656037434190343, 0.21197911007527703, 0.0778207699142307, 0.08503673403541656, 0.06532711984706496, 0.06710560426992163, 0.0766669873951259, 0.07553874781537218, 0.06738429590510897, 0.07882094724805067, 0.0615108273615349]}, "mutation_prompt": null}
{"id": "753d2842-ac34-4e5d-a565-f1f5e3c8a617", "solution": "import numpy as np\n\nclass RefinedHybridPSO_ADM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.num_particles = 40  # Increased for better exploration\n        self.w = 0.4  # Slightly reduced inertia for quicker response\n        self.c1 = 2.1  # Enhanced cognitive component for personal bests\n        self.c2 = 1.9  # Slightly reduced social component to balance global influence\n        self.F = 0.85  # Balanced mutation factor\n        self.CR = 0.9  # Increased crossover rate for diversity\n        self.adaptive_lr = 150  # Adjusted adaptive learning rate scale\n\n    def __call__(self, func):\n        # Initialize particles\n        positions = np.random.uniform(self.lb, self.ub, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-0.5, 0.5, (self.num_particles, self.dim))  # Reduced initial velocity\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.num_particles, float('inf'))\n        global_best_position = np.zeros(self.dim)\n        global_best_score = float('inf')\n\n        eval_count = 0\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            scores = np.array([func(p) for p in positions])\n            eval_count += self.num_particles\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_scores[better_mask] = scores[better_mask]\n            personal_best_positions[better_mask] = positions[better_mask]\n\n            min_score_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[min_score_idx] < global_best_score:\n                global_best_score = personal_best_scores[min_score_idx]\n                global_best_position = personal_best_positions[min_score_idx]\n\n            # Update velocities and positions using PSO update rule\n            r1 = np.random.rand(self.num_particles, self.dim)\n            r2 = np.random.rand(self.num_particles, self.dim)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.lb, self.ub)\n\n            # Dynamic adaptive learning rate\n            adaptive_w = self.w / (1 + (eval_count / self.adaptive_lr) ** 0.5)\n            velocities *= adaptive_w\n\n            # Apply Adaptive Differential Mutation\n            for i in range(self.num_particles):\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(idxs, 3, replace=False)\n                    mutant = positions[a] + self.F * (positions[b] - positions[c])\n                    mutant = np.clip(mutant, self.lb, self.ub)\n                    \n                    if func(mutant) < scores[i]:\n                        positions[i] = mutant\n                        eval_count += 1\n                        if eval_count >= self.budget:\n                            break\n\n        return global_best_position", "name": "RefinedHybridPSO_ADM", "description": "A refined hybrid algorithm leveraging particle diversity and dynamic mutation strategies for accelerated convergence.", "configspace": "", "generation": 9, "fitness": 0.2781483896132771, "feedback": "The algorithm RefinedHybridPSO_ADM got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.27.", "error": "", "parent_id": "3362a835-f1bf-4abe-aecb-5f5117f7839b", "metadata": {"aucs": [0.8988126408943755, 0.8819706935256056, 0.8831213255235694, 0.9033109390687944, 0.8896268606084307, 0.9080073456109357, 0.9000196799412868, 0.915621261543119, 0.9127429718859714, 0.6603116017804651, 0.7674842692618533, 9.999999999998899e-05, 0.7980392224394702, 0.8073075524078204, 0.8284728523396305, 0.7715878421119038, 0.8023491174011055, 0.7859086844173777, 0.14522935672952886, 0.0937648522423069, 0.11619140506030812, 0.11677886850215691, 0.1233889814096295, 0.11430415209320055, 0.1520417078699271, 0.15963107471542204, 0.16760624006368274, 0.12743206677679986, 0.09643238235321971, 0.15044012225209258, 0.09112244051762242, 0.11109451514516366, 0.1138596223057291, 0.15467749418672316, 0.1425526211260818, 0.09447586326514046, 0.9861048650007868, 0.9889350987722676, 0.973870407951016, 0.9768396299969591, 0.9711895628050016, 0.9582115963488881, 0.975723929280105, 0.9707800563906878, 0.9811210789069463, 0.19279225289862112, 0.3448034897790624, 0.31049969783756826, 0.15148910105895352, 0.3050979305408218, 0.14660364542643656, 0.27958575770701866, 0.08735951791106633, 0.40396456388315516, 0.36390526806434664, 0.16056539308880924, 0.29336346892859033, 0.2821439238241169, 0.20988743313425162, 0.21315394338099758, 0.6715203838697617, 0.22878059224495972, 0.21196527354650585, 0.17585553381980334, 0.12151973397208748, 0.19185581658201967, 0.17116493787996956, 0.18959103833806856, 0.1076068669271455, 0.2007813690258956, 0.11241520308284347, 0.1298672511085064, 0.21766642687898308, 0.22317399943837513, 0.18286610158898076, 0.13294223707548058, 0.19227431077884927, 0.23129233607038124, 0.22725421202561824, 0.10212834762912604, 0.21692962571845997, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00021279146187802578, 9.999999999998899e-05, 9.999999999998899e-05, 0.06258812320295015, 0.027070333436471583, 0.07163076769975851, 0.062327393653538454, 0.0006836913027818969, 0.008152422211663679, 0.05371534699344338, 0.05501654971977221, 0.04618563977703638, 0.05275771217416492, 0.04560962915810851, 0.2033034570841291, 0.15780529563466394, 0.09578561602408808, 0.1824422506413912, 0.13021054327466286, 0.14114064430785345, 0.08217754071146188, 0.15741775116540735, 0.11181771417122943, 0.4219816253792623, 0.006346298376759818, 0.041543218779170665, 0.09161773833951481, 0.18609326442798724, 0.07485931809043378, 0.11009815528970213, 0.5017483988292364, 0.5838320802821866, 0.541738788685295, 0.20906571632430193, 0.47154905536802905, 0.5070697676288104, 0.5903408845525275, 0.5325889693355734, 0.5201520404213892, 0.10727815914364514, 0.07866802106833604, 0.1453726973316709, 0.1125667837694393, 0.13755307679938655, 0.09728274954252614, 0.07435926038448648, 0.11682064307547702, 0.10682203869562923, 0.17002555354461923, 0.23555841033821212, 0.1622879805263885, 0.17727362414561754, 0.18615680669146129, 0.1641687290688375, 0.13770191882135152, 0.15094900568990632, 0.1960048396801236, 0.2765997490643285, 0.3643267758611576, 0.4433695775236077, 0.39938298134666417, 0.26526163383501244, 0.3771151279213475, 0.35659265726865896, 0.4523441365317995, 0.34688480908228836, 0.20189156742671377, 0.31935080943005545, 0.225371238476605, 0.17611147583488984, 0.2109920433718866, 0.1876797386079061, 0.2553071279774326, 0.2543643234303492, 0.1647784295334055, 0.20890662011628092, 0.16809696189760526, 0.1952871072040676, 0.1858290039929098, 0.18411699548995486, 0.19669114618194838, 0.18791971491032833, 0.17048105884585207, 0.23608271302854977, 0.1655502695430663, 0.16896793953868583, 0.17530896484655278, 0.25500272755572373, 0.21478029162776402, 0.1969598947594038, 0.18931555144369328, 0.2252853286461176, 0.20146171375705957, 0.6885010383805577, 0.19522804545079997, 0.1525840207758682, 0.900576556496698, 0.200727067098184, 0.11671131698091464, 0.14279198469313703, 0.16958997814337695, 0.9232946471538775, 0.5353969690402133, 0.21283081271419246, 0.15338136967356053, 0.37807835008532864, 0.2381502604592428, 0.15401004739847213, 0.10482826743435658, 0.10458866206289419, 0.512832217266671, 0.18027335622129836, 0.2075375901893216, 0.17415455641689714, 0.1749805843899509, 0.1921053320010765, 0.18086729253711797, 0.17849204805383723, 0.18090107712411152, 0.20088114153489323, 0.07621907285953022, 0.09290611279398087, 0.07378393237327996, 0.06844352012432098, 0.0711834216348377, 0.0736327888420224, 0.06244021525515053, 0.06312287614201362, 0.09066875062770707]}, "mutation_prompt": null}
{"id": "332ef0dd-f2d4-4f0c-bd60-5669b3014bd0", "solution": "import numpy as np\n\nclass RefinedHybridPSO_ADM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.num_particles = 40  # Increased for better exploration\n        self.w = 0.4  # Slightly reduced inertia for quicker response\n        self.c1 = 2.1  # Enhanced cognitive component for personal bests\n        self.c2 = 1.9  # Slightly reduced social component to balance global influence\n        self.F = 0.85  # Balanced mutation factor\n        self.CR = 0.9  # Increased crossover rate for diversity\n        self.adaptive_lr = 150  # Adjusted adaptive learning rate scale\n\n    def __call__(self, func):\n        # Initialize particles\n        positions = np.random.uniform(self.lb, self.ub, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-0.5, 0.5, (self.num_particles, self.dim))  # Reduced initial velocity\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.num_particles, float('inf'))\n        global_best_position = np.zeros(self.dim)\n        global_best_score = float('inf')\n\n        eval_count = 0\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            scores = np.array([func(p) for p in positions])\n            eval_count += self.num_particles\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_scores[better_mask] = scores[better_mask]\n            personal_best_positions[better_mask] = positions[better_mask]\n\n            min_score_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[min_score_idx] < global_best_score:\n                global_best_score = personal_best_scores[min_score_idx]\n                global_best_position = personal_best_positions[min_score_idx]\n\n            # Update velocities and positions using PSO update rule\n            r1 = np.random.rand(self.num_particles, self.dim)\n            r2 = np.random.rand(self.num_particles, self.dim)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.lb, self.ub)\n\n            # Dynamic adaptive learning rate\n            adaptive_w = self.w / (1 + (eval_count / self.adaptive_lr) ** 0.5)\n            velocities *= adaptive_w\n\n            # Apply Adaptive Differential Mutation\n            for i in range(self.num_particles):\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(idxs, 3, replace=False)\n                    mutant = positions[a] + self.F * (positions[b] - positions[c])\n                    mutant = np.clip(mutant, self.lb, self.ub)\n                    \n                    if func(mutant) < scores[i]:\n                        positions[i] = mutant\n                        eval_count += 1\n                        if eval_count >= self.budget:\n                            break\n\n        return global_best_position", "name": "RefinedHybridPSO_ADM", "description": "A refined hybrid algorithm leveraging particle diversity and dynamic mutation strategies for accelerated convergence.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "753d2842-ac34-4e5d-a565-f1f5e3c8a617", "metadata": {"aucs": [0.8988126408943755, 0.8819706935256056, 0.8831213255235694, 0.9033109390687944, 0.8896268606084307, 0.9080073456109357, 0.9000196799412868, 0.915621261543119, 0.9127429718859714, 0.6603116017804651, 0.7674842692618533, 9.999999999998899e-05, 0.7980392224394702, 0.8073075524078204, 0.8284728523396305, 0.7715878421119038, 0.8023491174011055, 0.7859086844173777, 0.14522935672952886, 0.0937648522423069, 0.11619140506030812, 0.11677886850215691, 0.1233889814096295, 0.11430415209320055, 0.1520417078699271, 0.15963107471542204, 0.16760624006368274, 0.12743206677679986, 0.09643238235321971, 0.15044012225209258, 0.09112244051762242, 0.11109451514516366, 0.1138596223057291, 0.15467749418672316, 0.1425526211260818, 0.09447586326514046, 0.9861048650007868, 0.9889350987722676, 0.973870407951016, 0.9768396299969591, 0.9711895628050016, 0.9582115963488881, 0.975723929280105, 0.9707800563906878, 0.9811210789069463, 0.19279225289862112, 0.3448034897790624, 0.31049969783756826, 0.15148910105895352, 0.3050979305408218, 0.14660364542643656, 0.27958575770701866, 0.08735951791106633, 0.40396456388315516, 0.36390526806434664, 0.16056539308880924, 0.29336346892859033, 0.2821439238241169, 0.20988743313425162, 0.21315394338099758, 0.6715203838697617, 0.22878059224495972, 0.21196527354650585, 0.17585553381980334, 0.12151973397208748, 0.19185581658201967, 0.17116493787996956, 0.18959103833806856, 0.1076068669271455, 0.2007813690258956, 0.11241520308284347, 0.1298672511085064, 0.21766642687898308, 0.22317399943837513, 0.18286610158898076, 0.13294223707548058, 0.19227431077884927, 0.23129233607038124, 0.22725421202561824, 0.10212834762912604, 0.21692962571845997, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00021279146187802578, 9.999999999998899e-05, 9.999999999998899e-05, 0.06258812320295015, 0.027070333436471583, 0.07163076769975851, 0.062327393653538454, 0.0006836913027818969, 0.008152422211663679, 0.05371534699344338, 0.05501654971977221, 0.04618563977703638, 0.05275771217416492, 0.04560962915810851, 0.2033034570841291, 0.15780529563466394, 0.09578561602408808, 0.1824422506413912, 0.13021054327466286, 0.14114064430785345, 0.08217754071146188, 0.15741775116540735, 0.11181771417122943, 0.4219816253792623, 0.006346298376759818, 0.041543218779170665, 0.09161773833951481, 0.18609326442798724, 0.07485931809043378, 0.11009815528970213, 0.5017483988292364, 0.5838320802821866, 0.541738788685295, 0.20906571632430193, 0.47154905536802905, 0.5070697676288104, 0.5903408845525275, 0.5325889693355734, 0.5201520404213892, 0.10727815914364514, 0.07866802106833604, 0.1453726973316709, 0.1125667837694393, 0.13755307679938655, 0.09728274954252614, 0.07435926038448648, 0.11682064307547702, 0.10682203869562923, 0.17002555354461923, 0.23555841033821212, 0.1622879805263885, 0.17727362414561754, 0.18615680669146129, 0.1641687290688375, 0.13770191882135152, 0.15094900568990632, 0.1960048396801236, 0.2765997490643285, 0.3643267758611576, 0.4433695775236077, 0.39938298134666417, 0.26526163383501244, 0.3771151279213475, 0.35659265726865896, 0.4523441365317995, 0.34688480908228836, 0.20189156742671377, 0.31935080943005545, 0.225371238476605, 0.17611147583488984, 0.2109920433718866, 0.1876797386079061, 0.2553071279774326, 0.2543643234303492, 0.1647784295334055, 0.20890662011628092, 0.16809696189760526, 0.1952871072040676, 0.1858290039929098, 0.18411699548995486, 0.19669114618194838, 0.18791971491032833, 0.17048105884585207, 0.23608271302854977, 0.1655502695430663, 0.16896793953868583, 0.17530896484655278, 0.25500272755572373, 0.21478029162776402, 0.1969598947594038, 0.18931555144369328, 0.2252853286461176, 0.20146171375705957, 0.6885010383805577, 0.19522804545079997, 0.1525840207758682, 0.900576556496698, 0.200727067098184, 0.11671131698091464, 0.14279198469313703, 0.16958997814337695, 0.9232946471538775, 0.5353969690402133, 0.21283081271419246, 0.15338136967356053, 0.37807835008532864, 0.2381502604592428, 0.15401004739847213, 0.10482826743435658, 0.10458866206289419, 0.512832217266671, 0.18027335622129836, 0.2075375901893216, 0.17415455641689714, 0.1749805843899509, 0.1921053320010765, 0.18086729253711797, 0.17849204805383723, 0.18090107712411152, 0.20088114153489323, 0.07621907285953022, 0.09290611279398087, 0.07378393237327996, 0.06844352012432098, 0.0711834216348377, 0.0736327888420224, 0.06244021525515053, 0.06312287614201362, 0.09066875062770707]}, "mutation_prompt": null}
{"id": "021702c7-935f-46d2-999a-6c055a4a62fa", "solution": "import numpy as np\n\nclass EnhancedPSO_AM_DM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.num_particles = 50  # Increased for broader exploration\n        self.w = 0.5  # Moderately increased inertia for better balance\n        self.c1 = 1.8  # Reduced cognitive component to prevent over-exploration\n        self.c2 = 2.0  # Adjusted social component for stronger global pull\n        self.F = 0.9  # Increased mutation factor for enhanced exploration\n        self.CR = 0.85  # Slightly reduced crossover rate for stability\n        self.adaptive_lr = 100  # Lowered adaptive learning rate scale for quick adaptability\n\n    def __call__(self, func):\n        # Initialize particles\n        positions = np.random.uniform(self.lb, self.ub, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-0.3, 0.3, (self.num_particles, self.dim))  # More controlled initial velocity\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.num_particles, float('inf'))\n        global_best_position = np.zeros(self.dim)\n        global_best_score = float('inf')\n\n        eval_count = 0\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            scores = np.array([func(p) for p in positions])\n            eval_count += self.num_particles\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_scores[better_mask] = scores[better_mask]\n            personal_best_positions[better_mask] = positions[better_mask]\n\n            min_score_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[min_score_idx] < global_best_score:\n                global_best_score = personal_best_scores[min_score_idx]\n                global_best_position = personal_best_positions[min_score_idx]\n\n            # Update velocities and positions using PSO update rule\n            r1 = np.random.rand(self.num_particles, self.dim)\n            r2 = np.random.rand(self.num_particles, self.dim)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.lb, self.ub)\n\n            # Dynamic adaptive learning rate\n            adaptive_w = self.w / (1 + (eval_count / self.adaptive_lr) ** 2)  # Faster decay for quicker adaptation\n            velocities *= adaptive_w\n\n            # Apply Adaptive Differential Mutation with memory\n            memory = np.copy(positions)\n            for i in range(self.num_particles):\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(idxs, 3, replace=False)\n                    mutant = memory[a] + self.F * (memory[b] - memory[c])\n                    mutant = np.clip(mutant, self.lb, self.ub)\n                    \n                    if func(mutant) < scores[i]:\n                        positions[i] = mutant\n                        eval_count += 1\n                        if eval_count >= self.budget:\n                            break\n\n        return global_best_position", "name": "EnhancedPSO_AM_DM", "description": "Enhanced Particle Swarm Optimization with Adaptive Memory and Differential Mutation for improved convergence speed.", "configspace": "", "generation": 11, "fitness": 0.2803633373502048, "feedback": "The algorithm EnhancedPSO_AM_DM got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.26.", "error": "", "parent_id": "753d2842-ac34-4e5d-a565-f1f5e3c8a617", "metadata": {"aucs": [0.8991107702294799, 0.8868062709984175, 0.8984245195490332, 0.8845722162842422, 0.8739448041060274, 0.8904339769126186, 0.875470099095862, 0.8848672897197617, 0.8712565971106417, 0.07498278737927544, 0.809463336808455, 0.7357325567109225, 0.7156863476926981, 0.799918832415608, 0.7566093493527262, 0.7869968289726248, 0.8099476325133912, 0.7540666471407842, 0.1173473767766372, 0.11384022185833764, 0.15853546281880682, 0.0969546642020398, 0.1784899677086994, 0.13021996825001336, 0.12086018390493314, 0.11488031163834567, 0.16125276113862708, 0.12319898746636393, 0.12874920318399652, 0.12187404141369629, 0.09197331484484295, 0.10638729121714585, 0.15521938939453594, 0.09322198682290705, 0.09681080936322362, 0.12437036082840913, 0.9789017664693714, 0.9748315240513319, 0.9847843772976147, 0.9604858545370603, 0.9632272178711118, 0.9757080694825266, 0.97757294417007, 0.9697162090155794, 0.9681524954700307, 0.35839726380098713, 0.3727958626292137, 0.059270592869377414, 0.15238166818451626, 0.3492931425133523, 0.33985330492444377, 0.12365693407879841, 0.4250855789123885, 0.34070110592547764, 0.22624899254573183, 0.22664959579220378, 0.2617003802273946, 0.27898297044366527, 0.21056765577445968, 0.20301184236572412, 0.1568899649647516, 0.2280525543468409, 0.8292987120427526, 0.19085891583107117, 0.1303449183357347, 0.13376901133094288, 0.12408119101284665, 0.16487456077731544, 0.13563383270528706, 0.17290314258425876, 0.20102295852496543, 0.16946679429544398, 0.13158668211101343, 0.1277182755064814, 0.133910855118751, 0.18651068352661548, 0.3133917340737611, 0.1543138340347514, 0.18956739079785034, 9.999999999998899e-05, 0.18039189171524428, 9.999999999998899e-05, 0.021534326950665483, 9.999999999998899e-05, 0.0006483706886881713, 0.0037105055967709966, 0.015713837363644734, 9.999999999998899e-05, 9.999999999998899e-05, 0.03257131867184049, 0.0932398224113653, 0.05918246352205647, 0.06240398480055831, 0.07614499179997747, 0.06798264466117399, 0.10041969348097335, 0.034830962611154814, 0.07102076051359496, 0.09315838760902517, 0.10220458709532287, 9.999999999998899e-05, 0.14842587968495335, 0.15684621057628922, 0.08939964278915535, 0.07881498906342199, 0.09818902108476779, 0.07152346302471868, 0.10157214810264781, 0.20144769753001524, 0.24094511121126394, 0.12243718213165233, 0.11537849627849861, 0.08394012381307403, 0.12611457267191706, 0.09354573014581524, 0.13603101203799706, 0.0817548811637211, 0.48227236850468636, 0.5352072152027907, 0.49045542293202216, 0.526712809396522, 0.5072355799901966, 0.5426878787446889, 0.5408449629609917, 0.5428954255401428, 0.5396266383290638, 0.10090671925364136, 0.08800936204696042, 0.14544220744618774, 0.09243384214161032, 0.0781524773515132, 0.07280091009720013, 0.13689330018155066, 0.0946886689015346, 0.14079939842443256, 0.219796151537351, 0.14205967692074428, 0.16637449544696536, 0.1909132935461625, 0.2156028891550279, 0.18771647528513935, 0.1790823104439596, 0.1752092507363725, 0.21322222415991166, 0.34869210402848894, 0.3751392056364592, 0.35854995771693565, 0.3692191740671632, 0.352265653103069, 0.2740696703067128, 0.43782181359328964, 0.3514134161103051, 0.40337541247407416, 0.2458256949328621, 0.1736373866449743, 0.29529241927182515, 0.28161016555087026, 0.19563475982697032, 0.23334863783707593, 0.17539973267845033, 0.2737939305721747, 0.2896077059556409, 0.19222454024229796, 0.20734617372125697, 0.19149853902527525, 0.18377888749448035, 0.18469711007250067, 0.17568071359584847, 0.19879963888586716, 0.1951771432199486, 0.21514247187080848, 0.16979431110868426, 0.22164386686139992, 0.20659400923138405, 0.19561962775305364, 0.22409428782731633, 0.22456399250188797, 0.22301005901035942, 0.21874726847207338, 0.20775895086418072, 0.17418862527224532, 0.1648787132831474, 0.15438123920379498, 0.8673133607573054, 0.1998830669533127, 0.19876644253007314, 0.1421771086096496, 0.15821757599289032, 0.8853006955184952, 0.5021930103343544, 0.21261992817393738, 0.07346357161747752, 0.5579466299432243, 0.40047178311256326, 0.29545146804570355, 0.10492215876783284, 0.2071084170382964, 0.41611027351561813, 0.19007214420605356, 0.18927021669267097, 0.18039559113699744, 0.19105992796724647, 0.20586076906549966, 0.19876258658157553, 0.18643565335268486, 0.20692054795510573, 0.1724429674174216, 0.09664773125607862, 0.06899494258397809, 0.07817797655732917, 0.08114755830802045, 0.0957020371865307, 0.06939321130495923, 0.09636510652579489, 0.08248436818768312, 0.07326783804537895]}, "mutation_prompt": null}
{"id": "97c0f226-07bd-4e7c-a3d5-c9da84590c28", "solution": "import numpy as np\n\nclass EnhancedPSO_AM_DM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.num_particles = 50  # Increased for broader exploration\n        self.w = 0.5  # Moderately increased inertia for better balance\n        self.c1 = 1.8  # Reduced cognitive component to prevent over-exploration\n        self.c2 = 2.0  # Adjusted social component for stronger global pull\n        self.F = 0.9  # Increased mutation factor for enhanced exploration\n        self.CR = 0.85  # Slightly reduced crossover rate for stability\n        self.adaptive_lr = 100  # Lowered adaptive learning rate scale for quick adaptability\n\n    def __call__(self, func):\n        # Initialize particles\n        positions = np.random.uniform(self.lb, self.ub, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-0.3, 0.3, (self.num_particles, self.dim))  # More controlled initial velocity\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.num_particles, float('inf'))\n        global_best_position = np.zeros(self.dim)\n        global_best_score = float('inf')\n\n        eval_count = 0\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            scores = np.array([func(p) for p in positions])\n            eval_count += self.num_particles\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_scores[better_mask] = scores[better_mask]\n            personal_best_positions[better_mask] = positions[better_mask]\n\n            min_score_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[min_score_idx] < global_best_score:\n                global_best_score = personal_best_scores[min_score_idx]\n                global_best_position = personal_best_positions[min_score_idx]\n\n            # Update velocities and positions using PSO update rule\n            r1 = np.random.rand(self.num_particles, self.dim)\n            r2 = np.random.rand(self.num_particles, self.dim)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.lb, self.ub)\n\n            # Dynamic adaptive learning rate\n            adaptive_w = self.w / (1 + (eval_count / self.adaptive_lr) ** 2)  # Faster decay for quicker adaptation\n            velocities *= adaptive_w\n\n            # Apply Adaptive Differential Mutation with memory\n            memory = np.copy(positions)\n            for i in range(self.num_particles):\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(idxs, 3, replace=False)\n                    mutant = memory[a] + self.F * (memory[b] - memory[c])\n                    mutant = np.clip(mutant, self.lb, self.ub)\n                    \n                    if func(mutant) < scores[i]:\n                        positions[i] = mutant\n                        eval_count += 1\n                        if eval_count >= self.budget:\n                            break\n\n        return global_best_position", "name": "EnhancedPSO_AM_DM", "description": "Enhanced Particle Swarm Optimization with Adaptive Memory and Differential Mutation for improved convergence speed.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "021702c7-935f-46d2-999a-6c055a4a62fa", "metadata": {"aucs": [0.8991107702294799, 0.8868062709984175, 0.8984245195490332, 0.8845722162842422, 0.8739448041060274, 0.8904339769126186, 0.875470099095862, 0.8848672897197617, 0.8712565971106417, 0.07498278737927544, 0.809463336808455, 0.7357325567109225, 0.7156863476926981, 0.799918832415608, 0.7566093493527262, 0.7869968289726248, 0.8099476325133912, 0.7540666471407842, 0.1173473767766372, 0.11384022185833764, 0.15853546281880682, 0.0969546642020398, 0.1784899677086994, 0.13021996825001336, 0.12086018390493314, 0.11488031163834567, 0.16125276113862708, 0.12319898746636393, 0.12874920318399652, 0.12187404141369629, 0.09197331484484295, 0.10638729121714585, 0.15521938939453594, 0.09322198682290705, 0.09681080936322362, 0.12437036082840913, 0.9789017664693714, 0.9748315240513319, 0.9847843772976147, 0.9604858545370603, 0.9632272178711118, 0.9757080694825266, 0.97757294417007, 0.9697162090155794, 0.9681524954700307, 0.35839726380098713, 0.3727958626292137, 0.059270592869377414, 0.15238166818451626, 0.3492931425133523, 0.33985330492444377, 0.12365693407879841, 0.4250855789123885, 0.34070110592547764, 0.22624899254573183, 0.22664959579220378, 0.2617003802273946, 0.27898297044366527, 0.21056765577445968, 0.20301184236572412, 0.1568899649647516, 0.2280525543468409, 0.8292987120427526, 0.19085891583107117, 0.1303449183357347, 0.13376901133094288, 0.12408119101284665, 0.16487456077731544, 0.13563383270528706, 0.17290314258425876, 0.20102295852496543, 0.16946679429544398, 0.13158668211101343, 0.1277182755064814, 0.133910855118751, 0.18651068352661548, 0.3133917340737611, 0.1543138340347514, 0.18956739079785034, 9.999999999998899e-05, 0.18039189171524428, 9.999999999998899e-05, 0.021534326950665483, 9.999999999998899e-05, 0.0006483706886881713, 0.0037105055967709966, 0.015713837363644734, 9.999999999998899e-05, 9.999999999998899e-05, 0.03257131867184049, 0.0932398224113653, 0.05918246352205647, 0.06240398480055831, 0.07614499179997747, 0.06798264466117399, 0.10041969348097335, 0.034830962611154814, 0.07102076051359496, 0.09315838760902517, 0.10220458709532287, 9.999999999998899e-05, 0.14842587968495335, 0.15684621057628922, 0.08939964278915535, 0.07881498906342199, 0.09818902108476779, 0.07152346302471868, 0.10157214810264781, 0.20144769753001524, 0.24094511121126394, 0.12243718213165233, 0.11537849627849861, 0.08394012381307403, 0.12611457267191706, 0.09354573014581524, 0.13603101203799706, 0.0817548811637211, 0.48227236850468636, 0.5352072152027907, 0.49045542293202216, 0.526712809396522, 0.5072355799901966, 0.5426878787446889, 0.5408449629609917, 0.5428954255401428, 0.5396266383290638, 0.10090671925364136, 0.08800936204696042, 0.14544220744618774, 0.09243384214161032, 0.0781524773515132, 0.07280091009720013, 0.13689330018155066, 0.0946886689015346, 0.14079939842443256, 0.219796151537351, 0.14205967692074428, 0.16637449544696536, 0.1909132935461625, 0.2156028891550279, 0.18771647528513935, 0.1790823104439596, 0.1752092507363725, 0.21322222415991166, 0.34869210402848894, 0.3751392056364592, 0.35854995771693565, 0.3692191740671632, 0.352265653103069, 0.2740696703067128, 0.43782181359328964, 0.3514134161103051, 0.40337541247407416, 0.2458256949328621, 0.1736373866449743, 0.29529241927182515, 0.28161016555087026, 0.19563475982697032, 0.23334863783707593, 0.17539973267845033, 0.2737939305721747, 0.2896077059556409, 0.19222454024229796, 0.20734617372125697, 0.19149853902527525, 0.18377888749448035, 0.18469711007250067, 0.17568071359584847, 0.19879963888586716, 0.1951771432199486, 0.21514247187080848, 0.16979431110868426, 0.22164386686139992, 0.20659400923138405, 0.19561962775305364, 0.22409428782731633, 0.22456399250188797, 0.22301005901035942, 0.21874726847207338, 0.20775895086418072, 0.17418862527224532, 0.1648787132831474, 0.15438123920379498, 0.8673133607573054, 0.1998830669533127, 0.19876644253007314, 0.1421771086096496, 0.15821757599289032, 0.8853006955184952, 0.5021930103343544, 0.21261992817393738, 0.07346357161747752, 0.5579466299432243, 0.40047178311256326, 0.29545146804570355, 0.10492215876783284, 0.2071084170382964, 0.41611027351561813, 0.19007214420605356, 0.18927021669267097, 0.18039559113699744, 0.19105992796724647, 0.20586076906549966, 0.19876258658157553, 0.18643565335268486, 0.20692054795510573, 0.1724429674174216, 0.09664773125607862, 0.06899494258397809, 0.07817797655732917, 0.08114755830802045, 0.0957020371865307, 0.06939321130495923, 0.09636510652579489, 0.08248436818768312, 0.07326783804537895]}, "mutation_prompt": null}
{"id": "1cc55ed5-59b5-4697-a081-5e7a1d727e15", "solution": "import numpy as np\n\nclass EnhancedPSO_AM_DM_v2:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.num_particles = 60  # Increased for wider exploration\n        self.w = 0.4  # Adjusted inertia for more responsiveness\n        self.c1 = 1.5  # Further reduced cognitive component\n        self.c2 = 2.5  # Enhanced social component for stronger attraction to global best\n        self.F = 0.8  # Modified mutation factor for balanced exploration\n        self.CR = 0.9  # Increased crossover rate for more frequent mutations\n        self.adaptive_lr = 80  # Further lowered adaptive learning rate scale\n\n    def __call__(self, func):\n        # Initialize particles\n        positions = np.random.uniform(self.lb, self.ub, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-0.2, 0.2, (self.num_particles, self.dim))  # Tighter initial velocity range\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.num_particles, float('inf'))\n        global_best_position = np.zeros(self.dim)\n        global_best_score = float('inf')\n\n        eval_count = 0\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            scores = np.array([func(p) for p in positions])\n            eval_count += self.num_particles\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_scores[better_mask] = scores[better_mask]\n            personal_best_positions[better_mask] = positions[better_mask]\n\n            min_score_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[min_score_idx] < global_best_score:\n                global_best_score = personal_best_scores[min_score_idx]\n                global_best_position = personal_best_positions[min_score_idx]\n\n            # Update velocities and positions using PSO update rule\n            r1 = np.random.rand(self.num_particles, self.dim)\n            r2 = np.random.rand(self.num_particles, self.dim)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.lb, self.ub)\n\n            # Dynamic adaptive learning rate\n            adaptive_w = self.w / (1 + (eval_count / self.adaptive_lr) ** 2)  # Similar decay for adaptability\n            velocities *= adaptive_w\n\n            # Apply Adaptive Differential Mutation with memory\n            memory = np.copy(personal_best_positions)  # Use personal bests for memory\n            for i in range(self.num_particles):\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(idxs, 3, replace=False)\n                    mutant = memory[a] + self.F * (memory[b] - memory[c])\n                    mutant = np.clip(mutant, self.lb, self.ub)\n                    \n                    mutant_score = func(mutant)\n                    eval_count += 1\n                    if mutant_score < scores[i]:\n                        positions[i] = mutant\n                        scores[i] = mutant_score\n\n                    if eval_count >= self.budget:\n                        break\n\n            # Update global best with the latest evaluations\n            current_best_idx = np.argmin(scores)\n            if scores[current_best_idx] < global_best_score:\n                global_best_score = scores[current_best_idx]\n                global_best_position = positions[current_best_idx]\n\n        return global_best_position", "name": "EnhancedPSO_AM_DM_v2", "description": "EnhancedPSO_AM_DM_v2: Further tuned Particle Swarm Optimization with diversified search mechanisms and adaptive strategies for accelerated convergence.", "configspace": "", "generation": 13, "fitness": 0.29204877379195326, "feedback": "The algorithm EnhancedPSO_AM_DM_v2 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.25.", "error": "", "parent_id": "021702c7-935f-46d2-999a-6c055a4a62fa", "metadata": {"aucs": [0.8161340860629157, 0.80919051623162, 0.7669892120701982, 0.8088996028919788, 0.7970807881361001, 0.8519588703384219, 0.8228317870059719, 0.7865040546595348, 0.8160425274941848, 0.6197923365966534, 0.6007961341374013, 9.999999999998899e-05, 9.999999999998899e-05, 0.6591949925278235, 0.623808006605693, 0.6006257811684124, 0.6471528809057273, 0.6020844231844962, 0.13988517866624972, 0.16874758130446132, 0.14484159733484814, 0.1353214472600226, 0.1394233679660314, 0.14775239835123666, 0.10105848161963926, 0.1044377264500308, 0.11041995006128114, 0.12199999060130307, 0.14024382298542748, 0.1092309119133168, 0.1300467995952762, 0.1625307102997473, 0.11929975682388572, 0.12205496652161951, 0.09920319200326977, 0.10486722191890707, 0.937862335867399, 0.9689196155284897, 0.9771063602334478, 0.9588229689909482, 0.9600118064097256, 0.9712694049138495, 0.9786619077346024, 0.978801248125971, 0.9705824090241166, 0.25718901336829714, 0.26353333739299833, 0.22319768069485912, 0.22461594862696466, 0.1433392611699359, 0.29172893499634833, 0.2614420582966509, 0.26184754882098826, 0.24888553984164996, 0.49983264127995763, 0.33700435243177684, 0.5619704225996021, 0.5713259366815935, 0.7028434223787735, 0.4130982012554234, 0.508321298848539, 0.5385234707000888, 0.5359920351743499, 0.18866131420456644, 0.09094793441445215, 0.20627853093125914, 0.10459812975043425, 0.1271497215276669, 0.098197121966761, 0.2621988858370914, 0.19480143204190536, 0.26150892485349575, 0.2766742327766408, 0.30833935725380657, 0.2272176976277438, 0.20497252790040998, 0.20879302341626793, 0.3008098595488009, 0.20947443731621684, 0.22405966177701753, 0.15898022368291365, 0.05434359493646357, 0.059582977722055896, 0.04721949510916712, 0.04712809556297848, 0.08424217288127889, 0.07797744302490406, 0.09942502278065202, 0.043986590891678, 0.0571350943874519, 0.1532109125395813, 0.1446409016677198, 0.16631755125405157, 0.1689851909549619, 0.14677170203297407, 0.1490124924279027, 0.17792001013590342, 0.1606679341558891, 0.20156340400541284, 0.07284598001077025, 0.03174558258206983, 0.04497286576334869, 0.0813903673993569, 0.16832080012123185, 0.17295960753760942, 0.09570802641826048, 0.08628093679716853, 0.06843412017131034, 0.1746520718023825, 0.17076876694227194, 0.14957407908319387, 0.1646705883479579, 0.24625886870763147, 0.1787231552424713, 0.05569548510372713, 0.2188966634740528, 0.16209018363916816, 0.5270880194529743, 0.526522683256869, 0.5060855546457195, 0.5543056357831772, 0.5624727552454217, 0.5615829783875357, 0.547060695339155, 0.5120624316074334, 0.5100850811467925, 0.0927245942703494, 0.08161204618291829, 0.1103520012131125, 0.09402854531349603, 0.07704491735603247, 0.10563120736993137, 0.09502377924001537, 0.08366726823434278, 0.06869772241764316, 0.13752547740220578, 0.2230254267601831, 0.12805657129176384, 0.17171932422879765, 0.14818559650877228, 0.16906039797121541, 0.17543920396971058, 0.14795282725031034, 0.19206777100681338, 0.35410597849660563, 0.3171379591277913, 0.39469702645469273, 0.3706915457006891, 0.33017506661804097, 0.3479512072251124, 0.3668088205169989, 0.39685760699374073, 0.4342607480314731, 0.2403915526228516, 0.2280784999765909, 0.30026607924397775, 0.2569012613219154, 0.25371523817784103, 0.20514464833000445, 0.26321457062475717, 0.2798699007773502, 0.18741567193988118, 0.19913937984458896, 0.16519023492687612, 0.18415821354715523, 0.20181315520246013, 0.17427924866549094, 0.19767092568252553, 0.22336300023912203, 0.1955192183512684, 0.20839043731270823, 0.19871336527449923, 0.18793939855026587, 0.18186328060566714, 0.2911493760804269, 0.2076612546547716, 0.22571989711658058, 0.23079754701306376, 0.21140798659406967, 0.18276401144409904, 0.19834520936306677, 0.703274162091293, 0.16709403768114828, 0.8161688444539704, 0.19668029690128086, 0.19524604389544697, 0.14173298950580704, 0.7953333485119631, 0.18396500995016718, 0.7132560282375375, 0.16754099513064835, 0.5257471838371672, 0.20318824434477045, 0.19887220357711755, 0.1520970433898814, 0.20909093921870003, 0.6165677764320037, 0.6750440057159541, 0.178339358223775, 0.18465797691227215, 0.18536006260014815, 0.18438646910467782, 0.2465591573762037, 0.18013120215515233, 0.19259750049804136, 0.21478024797847373, 0.18170698399475138, 0.07164602451664193, 0.08096083480412586, 0.06795538039746973, 0.0765488998816174, 0.0703266696528757, 0.06851012882146934, 0.06911960893396119, 0.06733217503355882, 0.08290625427662579]}, "mutation_prompt": null}
{"id": "5873885a-1095-4df1-9e61-312df8334664", "solution": "import numpy as np\n\nclass EnhancedPSO_AM_DM_v2:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.num_particles = 60  # Increased for wider exploration\n        self.w = 0.4  # Adjusted inertia for more responsiveness\n        self.c1 = 1.5  # Further reduced cognitive component\n        self.c2 = 2.5  # Enhanced social component for stronger attraction to global best\n        self.F = 0.8  # Modified mutation factor for balanced exploration\n        self.CR = 0.9  # Increased crossover rate for more frequent mutations\n        self.adaptive_lr = 80  # Further lowered adaptive learning rate scale\n\n    def __call__(self, func):\n        # Initialize particles\n        positions = np.random.uniform(self.lb, self.ub, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-0.2, 0.2, (self.num_particles, self.dim))  # Tighter initial velocity range\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.num_particles, float('inf'))\n        global_best_position = np.zeros(self.dim)\n        global_best_score = float('inf')\n\n        eval_count = 0\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            scores = np.array([func(p) for p in positions])\n            eval_count += self.num_particles\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_scores[better_mask] = scores[better_mask]\n            personal_best_positions[better_mask] = positions[better_mask]\n\n            min_score_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[min_score_idx] < global_best_score:\n                global_best_score = personal_best_scores[min_score_idx]\n                global_best_position = personal_best_positions[min_score_idx]\n\n            # Update velocities and positions using PSO update rule\n            r1 = np.random.rand(self.num_particles, self.dim)\n            r2 = np.random.rand(self.num_particles, self.dim)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.lb, self.ub)\n\n            # Dynamic adaptive learning rate\n            adaptive_w = self.w / (1 + (eval_count / self.adaptive_lr) ** 2)  # Similar decay for adaptability\n            velocities *= adaptive_w\n\n            # Apply Adaptive Differential Mutation with memory\n            memory = np.copy(personal_best_positions)  # Use personal bests for memory\n            for i in range(self.num_particles):\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(idxs, 3, replace=False)\n                    mutant = memory[a] + self.F * (memory[b] - memory[c])\n                    mutant = np.clip(mutant, self.lb, self.ub)\n                    \n                    mutant_score = func(mutant)\n                    eval_count += 1\n                    if mutant_score < scores[i]:\n                        positions[i] = mutant\n                        scores[i] = mutant_score\n\n                    if eval_count >= self.budget:\n                        break\n\n            # Update global best with the latest evaluations\n            current_best_idx = np.argmin(scores)\n            if scores[current_best_idx] < global_best_score:\n                global_best_score = scores[current_best_idx]\n                global_best_position = positions[current_best_idx]\n\n        return global_best_position", "name": "EnhancedPSO_AM_DM_v2", "description": "EnhancedPSO_AM_DM_v2: Further tuned Particle Swarm Optimization with diversified search mechanisms and adaptive strategies for accelerated convergence.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1cc55ed5-59b5-4697-a081-5e7a1d727e15", "metadata": {"aucs": [0.8161340860629157, 0.80919051623162, 0.7669892120701982, 0.8088996028919788, 0.7970807881361001, 0.8519588703384219, 0.8228317870059719, 0.7865040546595348, 0.8160425274941848, 0.6197923365966534, 0.6007961341374013, 9.999999999998899e-05, 9.999999999998899e-05, 0.6591949925278235, 0.623808006605693, 0.6006257811684124, 0.6471528809057273, 0.6020844231844962, 0.13988517866624972, 0.16874758130446132, 0.14484159733484814, 0.1353214472600226, 0.1394233679660314, 0.14775239835123666, 0.10105848161963926, 0.1044377264500308, 0.11041995006128114, 0.12199999060130307, 0.14024382298542748, 0.1092309119133168, 0.1300467995952762, 0.1625307102997473, 0.11929975682388572, 0.12205496652161951, 0.09920319200326977, 0.10486722191890707, 0.937862335867399, 0.9689196155284897, 0.9771063602334478, 0.9588229689909482, 0.9600118064097256, 0.9712694049138495, 0.9786619077346024, 0.978801248125971, 0.9705824090241166, 0.25718901336829714, 0.26353333739299833, 0.22319768069485912, 0.22461594862696466, 0.1433392611699359, 0.29172893499634833, 0.2614420582966509, 0.26184754882098826, 0.24888553984164996, 0.49983264127995763, 0.33700435243177684, 0.5619704225996021, 0.5713259366815935, 0.7028434223787735, 0.4130982012554234, 0.508321298848539, 0.5385234707000888, 0.5359920351743499, 0.18866131420456644, 0.09094793441445215, 0.20627853093125914, 0.10459812975043425, 0.1271497215276669, 0.098197121966761, 0.2621988858370914, 0.19480143204190536, 0.26150892485349575, 0.2766742327766408, 0.30833935725380657, 0.2272176976277438, 0.20497252790040998, 0.20879302341626793, 0.3008098595488009, 0.20947443731621684, 0.22405966177701753, 0.15898022368291365, 0.05434359493646357, 0.059582977722055896, 0.04721949510916712, 0.04712809556297848, 0.08424217288127889, 0.07797744302490406, 0.09942502278065202, 0.043986590891678, 0.0571350943874519, 0.1532109125395813, 0.1446409016677198, 0.16631755125405157, 0.1689851909549619, 0.14677170203297407, 0.1490124924279027, 0.17792001013590342, 0.1606679341558891, 0.20156340400541284, 0.07284598001077025, 0.03174558258206983, 0.04497286576334869, 0.0813903673993569, 0.16832080012123185, 0.17295960753760942, 0.09570802641826048, 0.08628093679716853, 0.06843412017131034, 0.1746520718023825, 0.17076876694227194, 0.14957407908319387, 0.1646705883479579, 0.24625886870763147, 0.1787231552424713, 0.05569548510372713, 0.2188966634740528, 0.16209018363916816, 0.5270880194529743, 0.526522683256869, 0.5060855546457195, 0.5543056357831772, 0.5624727552454217, 0.5615829783875357, 0.547060695339155, 0.5120624316074334, 0.5100850811467925, 0.0927245942703494, 0.08161204618291829, 0.1103520012131125, 0.09402854531349603, 0.07704491735603247, 0.10563120736993137, 0.09502377924001537, 0.08366726823434278, 0.06869772241764316, 0.13752547740220578, 0.2230254267601831, 0.12805657129176384, 0.17171932422879765, 0.14818559650877228, 0.16906039797121541, 0.17543920396971058, 0.14795282725031034, 0.19206777100681338, 0.35410597849660563, 0.3171379591277913, 0.39469702645469273, 0.3706915457006891, 0.33017506661804097, 0.3479512072251124, 0.3668088205169989, 0.39685760699374073, 0.4342607480314731, 0.2403915526228516, 0.2280784999765909, 0.30026607924397775, 0.2569012613219154, 0.25371523817784103, 0.20514464833000445, 0.26321457062475717, 0.2798699007773502, 0.18741567193988118, 0.19913937984458896, 0.16519023492687612, 0.18415821354715523, 0.20181315520246013, 0.17427924866549094, 0.19767092568252553, 0.22336300023912203, 0.1955192183512684, 0.20839043731270823, 0.19871336527449923, 0.18793939855026587, 0.18186328060566714, 0.2911493760804269, 0.2076612546547716, 0.22571989711658058, 0.23079754701306376, 0.21140798659406967, 0.18276401144409904, 0.19834520936306677, 0.703274162091293, 0.16709403768114828, 0.8161688444539704, 0.19668029690128086, 0.19524604389544697, 0.14173298950580704, 0.7953333485119631, 0.18396500995016718, 0.7132560282375375, 0.16754099513064835, 0.5257471838371672, 0.20318824434477045, 0.19887220357711755, 0.1520970433898814, 0.20909093921870003, 0.6165677764320037, 0.6750440057159541, 0.178339358223775, 0.18465797691227215, 0.18536006260014815, 0.18438646910467782, 0.2465591573762037, 0.18013120215515233, 0.19259750049804136, 0.21478024797847373, 0.18170698399475138, 0.07164602451664193, 0.08096083480412586, 0.06795538039746973, 0.0765488998816174, 0.0703266696528757, 0.06851012882146934, 0.06911960893396119, 0.06733217503355882, 0.08290625427662579]}, "mutation_prompt": null}
{"id": "5a3c2990-9775-4793-9561-5084db1de7b9", "solution": "import numpy as np\n\nclass EnhancedPSO_AM_DM_v2:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.num_particles = 60  # Increased for wider exploration\n        self.w = 0.4  # Adjusted inertia for more responsiveness\n        self.c1 = 1.5  # Further reduced cognitive component\n        self.c2 = 2.5  # Enhanced social component for stronger attraction to global best\n        self.F = 0.8  # Modified mutation factor for balanced exploration\n        self.CR = 0.9  # Increased crossover rate for more frequent mutations\n        self.adaptive_lr = 80  # Further lowered adaptive learning rate scale\n\n    def __call__(self, func):\n        # Initialize particles\n        positions = np.random.uniform(self.lb, self.ub, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-0.2, 0.2, (self.num_particles, self.dim))  # Tighter initial velocity range\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.num_particles, float('inf'))\n        global_best_position = np.zeros(self.dim)\n        global_best_score = float('inf')\n\n        eval_count = 0\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            scores = np.array([func(p) for p in positions])\n            eval_count += self.num_particles\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_scores[better_mask] = scores[better_mask]\n            personal_best_positions[better_mask] = positions[better_mask]\n\n            min_score_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[min_score_idx] < global_best_score:\n                global_best_score = personal_best_scores[min_score_idx]\n                global_best_position = personal_best_positions[min_score_idx]\n\n            # Update velocities and positions using PSO update rule\n            r1 = np.random.rand(self.num_particles, self.dim)\n            r2 = np.random.rand(self.num_particles, self.dim)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.lb, self.ub)\n\n            # Dynamic adaptive learning rate\n            adaptive_w = self.w / (1 + (eval_count / self.adaptive_lr) ** 2)  # Similar decay for adaptability\n            velocities *= adaptive_w\n\n            # Apply Adaptive Differential Mutation with memory\n            memory = np.copy(personal_best_positions)  # Use personal bests for memory\n            for i in range(self.num_particles):\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(idxs, 3, replace=False)\n                    mutant = memory[a] + self.F * (memory[b] - memory[c])\n                    mutant = np.clip(mutant, self.lb, self.ub)\n                    \n                    mutant_score = func(mutant)\n                    eval_count += 1\n                    if mutant_score < scores[i]:\n                        positions[i] = mutant\n                        scores[i] = mutant_score\n\n                    if eval_count >= self.budget:\n                        break\n\n            # Update global best with the latest evaluations\n            current_best_idx = np.argmin(scores)\n            if scores[current_best_idx] < global_best_score:\n                global_best_score = scores[current_best_idx]\n                global_best_position = positions[current_best_idx]\n\n        return global_best_position", "name": "EnhancedPSO_AM_DM_v2", "description": "EnhancedPSO_AM_DM_v2: Further tuned Particle Swarm Optimization with diversified search mechanisms and adaptive strategies for accelerated convergence.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1cc55ed5-59b5-4697-a081-5e7a1d727e15", "metadata": {"aucs": [0.8161340860629157, 0.80919051623162, 0.7669892120701982, 0.8088996028919788, 0.7970807881361001, 0.8519588703384219, 0.8228317870059719, 0.7865040546595348, 0.8160425274941848, 0.6197923365966534, 0.6007961341374013, 9.999999999998899e-05, 9.999999999998899e-05, 0.6591949925278235, 0.623808006605693, 0.6006257811684124, 0.6471528809057273, 0.6020844231844962, 0.13988517866624972, 0.16874758130446132, 0.14484159733484814, 0.1353214472600226, 0.1394233679660314, 0.14775239835123666, 0.10105848161963926, 0.1044377264500308, 0.11041995006128114, 0.12199999060130307, 0.14024382298542748, 0.1092309119133168, 0.1300467995952762, 0.1625307102997473, 0.11929975682388572, 0.12205496652161951, 0.09920319200326977, 0.10486722191890707, 0.937862335867399, 0.9689196155284897, 0.9771063602334478, 0.9588229689909482, 0.9600118064097256, 0.9712694049138495, 0.9786619077346024, 0.978801248125971, 0.9705824090241166, 0.25718901336829714, 0.26353333739299833, 0.22319768069485912, 0.22461594862696466, 0.1433392611699359, 0.29172893499634833, 0.2614420582966509, 0.26184754882098826, 0.24888553984164996, 0.49983264127995763, 0.33700435243177684, 0.5619704225996021, 0.5713259366815935, 0.7028434223787735, 0.4130982012554234, 0.508321298848539, 0.5385234707000888, 0.5359920351743499, 0.18866131420456644, 0.09094793441445215, 0.20627853093125914, 0.10459812975043425, 0.1271497215276669, 0.098197121966761, 0.2621988858370914, 0.19480143204190536, 0.26150892485349575, 0.2766742327766408, 0.30833935725380657, 0.2272176976277438, 0.20497252790040998, 0.20879302341626793, 0.3008098595488009, 0.20947443731621684, 0.22405966177701753, 0.15898022368291365, 0.05434359493646357, 0.059582977722055896, 0.04721949510916712, 0.04712809556297848, 0.08424217288127889, 0.07797744302490406, 0.09942502278065202, 0.043986590891678, 0.0571350943874519, 0.1532109125395813, 0.1446409016677198, 0.16631755125405157, 0.1689851909549619, 0.14677170203297407, 0.1490124924279027, 0.17792001013590342, 0.1606679341558891, 0.20156340400541284, 0.07284598001077025, 0.03174558258206983, 0.04497286576334869, 0.0813903673993569, 0.16832080012123185, 0.17295960753760942, 0.09570802641826048, 0.08628093679716853, 0.06843412017131034, 0.1746520718023825, 0.17076876694227194, 0.14957407908319387, 0.1646705883479579, 0.24625886870763147, 0.1787231552424713, 0.05569548510372713, 0.2188966634740528, 0.16209018363916816, 0.5270880194529743, 0.526522683256869, 0.5060855546457195, 0.5543056357831772, 0.5624727552454217, 0.5615829783875357, 0.547060695339155, 0.5120624316074334, 0.5100850811467925, 0.0927245942703494, 0.08161204618291829, 0.1103520012131125, 0.09402854531349603, 0.07704491735603247, 0.10563120736993137, 0.09502377924001537, 0.08366726823434278, 0.06869772241764316, 0.13752547740220578, 0.2230254267601831, 0.12805657129176384, 0.17171932422879765, 0.14818559650877228, 0.16906039797121541, 0.17543920396971058, 0.14795282725031034, 0.19206777100681338, 0.35410597849660563, 0.3171379591277913, 0.39469702645469273, 0.3706915457006891, 0.33017506661804097, 0.3479512072251124, 0.3668088205169989, 0.39685760699374073, 0.4342607480314731, 0.2403915526228516, 0.2280784999765909, 0.30026607924397775, 0.2569012613219154, 0.25371523817784103, 0.20514464833000445, 0.26321457062475717, 0.2798699007773502, 0.18741567193988118, 0.19913937984458896, 0.16519023492687612, 0.18415821354715523, 0.20181315520246013, 0.17427924866549094, 0.19767092568252553, 0.22336300023912203, 0.1955192183512684, 0.20839043731270823, 0.19871336527449923, 0.18793939855026587, 0.18186328060566714, 0.2911493760804269, 0.2076612546547716, 0.22571989711658058, 0.23079754701306376, 0.21140798659406967, 0.18276401144409904, 0.19834520936306677, 0.703274162091293, 0.16709403768114828, 0.8161688444539704, 0.19668029690128086, 0.19524604389544697, 0.14173298950580704, 0.7953333485119631, 0.18396500995016718, 0.7132560282375375, 0.16754099513064835, 0.5257471838371672, 0.20318824434477045, 0.19887220357711755, 0.1520970433898814, 0.20909093921870003, 0.6165677764320037, 0.6750440057159541, 0.178339358223775, 0.18465797691227215, 0.18536006260014815, 0.18438646910467782, 0.2465591573762037, 0.18013120215515233, 0.19259750049804136, 0.21478024797847373, 0.18170698399475138, 0.07164602451664193, 0.08096083480412586, 0.06795538039746973, 0.0765488998816174, 0.0703266696528757, 0.06851012882146934, 0.06911960893396119, 0.06733217503355882, 0.08290625427662579]}, "mutation_prompt": null}
{"id": "6fb22d01-d8ff-46c0-a6ef-2be900e179af", "solution": "import numpy as np\n\nclass EnhancedPSO_AM_DM_v2:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.num_particles = 60  # Increased for wider exploration\n        self.w = 0.4  # Adjusted inertia for more responsiveness\n        self.c1 = 1.5  # Further reduced cognitive component\n        self.c2 = 2.5  # Enhanced social component for stronger attraction to global best\n        self.F = 0.8  # Modified mutation factor for balanced exploration\n        self.CR = 0.9  # Increased crossover rate for more frequent mutations\n        self.adaptive_lr = 80  # Further lowered adaptive learning rate scale\n\n    def __call__(self, func):\n        # Initialize particles\n        positions = np.random.uniform(self.lb, self.ub, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-0.2, 0.2, (self.num_particles, self.dim))  # Tighter initial velocity range\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.num_particles, float('inf'))\n        global_best_position = np.zeros(self.dim)\n        global_best_score = float('inf')\n\n        eval_count = 0\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            scores = np.array([func(p) for p in positions])\n            eval_count += self.num_particles\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_scores[better_mask] = scores[better_mask]\n            personal_best_positions[better_mask] = positions[better_mask]\n\n            min_score_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[min_score_idx] < global_best_score:\n                global_best_score = personal_best_scores[min_score_idx]\n                global_best_position = personal_best_positions[min_score_idx]\n\n            # Update velocities and positions using PSO update rule\n            r1 = np.random.rand(self.num_particles, self.dim)\n            r2 = np.random.rand(self.num_particles, self.dim)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.lb, self.ub)\n\n            # Dynamic adaptive learning rate\n            adaptive_w = self.w / (1 + (eval_count / self.adaptive_lr) ** 2)  # Similar decay for adaptability\n            velocities *= adaptive_w\n\n            # Apply Adaptive Differential Mutation with memory\n            memory = np.copy(personal_best_positions)  # Use personal bests for memory\n            for i in range(self.num_particles):\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(idxs, 3, replace=False)\n                    mutant = memory[a] + self.F * (memory[b] - memory[c])\n                    mutant = np.clip(mutant, self.lb, self.ub)\n                    \n                    mutant_score = func(mutant)\n                    eval_count += 1\n                    if mutant_score < scores[i]:\n                        positions[i] = mutant\n                        scores[i] = mutant_score\n\n                    if eval_count >= self.budget:\n                        break\n\n            # Update global best with the latest evaluations\n            current_best_idx = np.argmin(scores)\n            if scores[current_best_idx] < global_best_score:\n                global_best_score = scores[current_best_idx]\n                global_best_position = positions[current_best_idx]\n\n        return global_best_position", "name": "EnhancedPSO_AM_DM_v2", "description": "EnhancedPSO_AM_DM_v2: Further tuned Particle Swarm Optimization with diversified search mechanisms and adaptive strategies for accelerated convergence.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1cc55ed5-59b5-4697-a081-5e7a1d727e15", "metadata": {"aucs": [0.8161340860629157, 0.80919051623162, 0.7669892120701982, 0.8088996028919788, 0.7970807881361001, 0.8519588703384219, 0.8228317870059719, 0.7865040546595348, 0.8160425274941848, 0.6197923365966534, 0.6007961341374013, 9.999999999998899e-05, 9.999999999998899e-05, 0.6591949925278235, 0.623808006605693, 0.6006257811684124, 0.6471528809057273, 0.6020844231844962, 0.13988517866624972, 0.16874758130446132, 0.14484159733484814, 0.1353214472600226, 0.1394233679660314, 0.14775239835123666, 0.10105848161963926, 0.1044377264500308, 0.11041995006128114, 0.12199999060130307, 0.14024382298542748, 0.1092309119133168, 0.1300467995952762, 0.1625307102997473, 0.11929975682388572, 0.12205496652161951, 0.09920319200326977, 0.10486722191890707, 0.937862335867399, 0.9689196155284897, 0.9771063602334478, 0.9588229689909482, 0.9600118064097256, 0.9712694049138495, 0.9786619077346024, 0.978801248125971, 0.9705824090241166, 0.25718901336829714, 0.26353333739299833, 0.22319768069485912, 0.22461594862696466, 0.1433392611699359, 0.29172893499634833, 0.2614420582966509, 0.26184754882098826, 0.24888553984164996, 0.49983264127995763, 0.33700435243177684, 0.5619704225996021, 0.5713259366815935, 0.7028434223787735, 0.4130982012554234, 0.508321298848539, 0.5385234707000888, 0.5359920351743499, 0.18866131420456644, 0.09094793441445215, 0.20627853093125914, 0.10459812975043425, 0.1271497215276669, 0.098197121966761, 0.2621988858370914, 0.19480143204190536, 0.26150892485349575, 0.2766742327766408, 0.30833935725380657, 0.2272176976277438, 0.20497252790040998, 0.20879302341626793, 0.3008098595488009, 0.20947443731621684, 0.22405966177701753, 0.15898022368291365, 0.05434359493646357, 0.059582977722055896, 0.04721949510916712, 0.04712809556297848, 0.08424217288127889, 0.07797744302490406, 0.09942502278065202, 0.043986590891678, 0.0571350943874519, 0.1532109125395813, 0.1446409016677198, 0.16631755125405157, 0.1689851909549619, 0.14677170203297407, 0.1490124924279027, 0.17792001013590342, 0.1606679341558891, 0.20156340400541284, 0.07284598001077025, 0.03174558258206983, 0.04497286576334869, 0.0813903673993569, 0.16832080012123185, 0.17295960753760942, 0.09570802641826048, 0.08628093679716853, 0.06843412017131034, 0.1746520718023825, 0.17076876694227194, 0.14957407908319387, 0.1646705883479579, 0.24625886870763147, 0.1787231552424713, 0.05569548510372713, 0.2188966634740528, 0.16209018363916816, 0.5270880194529743, 0.526522683256869, 0.5060855546457195, 0.5543056357831772, 0.5624727552454217, 0.5615829783875357, 0.547060695339155, 0.5120624316074334, 0.5100850811467925, 0.0927245942703494, 0.08161204618291829, 0.1103520012131125, 0.09402854531349603, 0.07704491735603247, 0.10563120736993137, 0.09502377924001537, 0.08366726823434278, 0.06869772241764316, 0.13752547740220578, 0.2230254267601831, 0.12805657129176384, 0.17171932422879765, 0.14818559650877228, 0.16906039797121541, 0.17543920396971058, 0.14795282725031034, 0.19206777100681338, 0.35410597849660563, 0.3171379591277913, 0.39469702645469273, 0.3706915457006891, 0.33017506661804097, 0.3479512072251124, 0.3668088205169989, 0.39685760699374073, 0.4342607480314731, 0.2403915526228516, 0.2280784999765909, 0.30026607924397775, 0.2569012613219154, 0.25371523817784103, 0.20514464833000445, 0.26321457062475717, 0.2798699007773502, 0.18741567193988118, 0.19913937984458896, 0.16519023492687612, 0.18415821354715523, 0.20181315520246013, 0.17427924866549094, 0.19767092568252553, 0.22336300023912203, 0.1955192183512684, 0.20839043731270823, 0.19871336527449923, 0.18793939855026587, 0.18186328060566714, 0.2911493760804269, 0.2076612546547716, 0.22571989711658058, 0.23079754701306376, 0.21140798659406967, 0.18276401144409904, 0.19834520936306677, 0.703274162091293, 0.16709403768114828, 0.8161688444539704, 0.19668029690128086, 0.19524604389544697, 0.14173298950580704, 0.7953333485119631, 0.18396500995016718, 0.7132560282375375, 0.16754099513064835, 0.5257471838371672, 0.20318824434477045, 0.19887220357711755, 0.1520970433898814, 0.20909093921870003, 0.6165677764320037, 0.6750440057159541, 0.178339358223775, 0.18465797691227215, 0.18536006260014815, 0.18438646910467782, 0.2465591573762037, 0.18013120215515233, 0.19259750049804136, 0.21478024797847373, 0.18170698399475138, 0.07164602451664193, 0.08096083480412586, 0.06795538039746973, 0.0765488998816174, 0.0703266696528757, 0.06851012882146934, 0.06911960893396119, 0.06733217503355882, 0.08290625427662579]}, "mutation_prompt": null}
{"id": "90dde8bb-1035-4445-b7ce-de68ba87f11d", "solution": "import numpy as np\n\nclass EnhancedPSO_AM_DM_v2:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.num_particles = 60  # Increased for wider exploration\n        self.w = 0.4  # Adjusted inertia for more responsiveness\n        self.c1 = 1.5  # Further reduced cognitive component\n        self.c2 = 2.5  # Enhanced social component for stronger attraction to global best\n        self.F = 0.8  # Modified mutation factor for balanced exploration\n        self.CR = 0.9  # Increased crossover rate for more frequent mutations\n        self.adaptive_lr = 80  # Further lowered adaptive learning rate scale\n\n    def __call__(self, func):\n        # Initialize particles\n        positions = np.random.uniform(self.lb, self.ub, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-0.2, 0.2, (self.num_particles, self.dim))  # Tighter initial velocity range\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.num_particles, float('inf'))\n        global_best_position = np.zeros(self.dim)\n        global_best_score = float('inf')\n\n        eval_count = 0\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            scores = np.array([func(p) for p in positions])\n            eval_count += self.num_particles\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_scores[better_mask] = scores[better_mask]\n            personal_best_positions[better_mask] = positions[better_mask]\n\n            min_score_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[min_score_idx] < global_best_score:\n                global_best_score = personal_best_scores[min_score_idx]\n                global_best_position = personal_best_positions[min_score_idx]\n\n            # Update velocities and positions using PSO update rule\n            r1 = np.random.rand(self.num_particles, self.dim)\n            r2 = np.random.rand(self.num_particles, self.dim)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.lb, self.ub)\n\n            # Dynamic adaptive learning rate\n            adaptive_w = self.w / (1 + (eval_count / self.adaptive_lr) ** 2)  # Similar decay for adaptability\n            velocities *= adaptive_w\n\n            # Apply Adaptive Differential Mutation with memory\n            memory = np.copy(personal_best_positions)  # Use personal bests for memory\n            for i in range(self.num_particles):\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(idxs, 3, replace=False)\n                    mutant = memory[a] + self.F * (memory[b] - memory[c])\n                    mutant = np.clip(mutant, self.lb, self.ub)\n                    \n                    mutant_score = func(mutant)\n                    eval_count += 1\n                    if mutant_score < scores[i]:\n                        positions[i] = mutant\n                        scores[i] = mutant_score\n\n                    if eval_count >= self.budget:\n                        break\n\n            # Update global best with the latest evaluations\n            current_best_idx = np.argmin(scores)\n            if scores[current_best_idx] < global_best_score:\n                global_best_score = scores[current_best_idx]\n                global_best_position = positions[current_best_idx]\n\n        return global_best_position", "name": "EnhancedPSO_AM_DM_v2", "description": "EnhancedPSO_AM_DM_v2: Further tuned Particle Swarm Optimization with diversified search mechanisms and adaptive strategies for accelerated convergence.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1cc55ed5-59b5-4697-a081-5e7a1d727e15", "metadata": {"aucs": [0.8161340860629157, 0.80919051623162, 0.7669892120701982, 0.8088996028919788, 0.7970807881361001, 0.8519588703384219, 0.8228317870059719, 0.7865040546595348, 0.8160425274941848, 0.6197923365966534, 0.6007961341374013, 9.999999999998899e-05, 9.999999999998899e-05, 0.6591949925278235, 0.623808006605693, 0.6006257811684124, 0.6471528809057273, 0.6020844231844962, 0.13988517866624972, 0.16874758130446132, 0.14484159733484814, 0.1353214472600226, 0.1394233679660314, 0.14775239835123666, 0.10105848161963926, 0.1044377264500308, 0.11041995006128114, 0.12199999060130307, 0.14024382298542748, 0.1092309119133168, 0.1300467995952762, 0.1625307102997473, 0.11929975682388572, 0.12205496652161951, 0.09920319200326977, 0.10486722191890707, 0.937862335867399, 0.9689196155284897, 0.9771063602334478, 0.9588229689909482, 0.9600118064097256, 0.9712694049138495, 0.9786619077346024, 0.978801248125971, 0.9705824090241166, 0.25718901336829714, 0.26353333739299833, 0.22319768069485912, 0.22461594862696466, 0.1433392611699359, 0.29172893499634833, 0.2614420582966509, 0.26184754882098826, 0.24888553984164996, 0.49983264127995763, 0.33700435243177684, 0.5619704225996021, 0.5713259366815935, 0.7028434223787735, 0.4130982012554234, 0.508321298848539, 0.5385234707000888, 0.5359920351743499, 0.18866131420456644, 0.09094793441445215, 0.20627853093125914, 0.10459812975043425, 0.1271497215276669, 0.098197121966761, 0.2621988858370914, 0.19480143204190536, 0.26150892485349575, 0.2766742327766408, 0.30833935725380657, 0.2272176976277438, 0.20497252790040998, 0.20879302341626793, 0.3008098595488009, 0.20947443731621684, 0.22405966177701753, 0.15898022368291365, 0.05434359493646357, 0.059582977722055896, 0.04721949510916712, 0.04712809556297848, 0.08424217288127889, 0.07797744302490406, 0.09942502278065202, 0.043986590891678, 0.0571350943874519, 0.1532109125395813, 0.1446409016677198, 0.16631755125405157, 0.1689851909549619, 0.14677170203297407, 0.1490124924279027, 0.17792001013590342, 0.1606679341558891, 0.20156340400541284, 0.07284598001077025, 0.03174558258206983, 0.04497286576334869, 0.0813903673993569, 0.16832080012123185, 0.17295960753760942, 0.09570802641826048, 0.08628093679716853, 0.06843412017131034, 0.1746520718023825, 0.17076876694227194, 0.14957407908319387, 0.1646705883479579, 0.24625886870763147, 0.1787231552424713, 0.05569548510372713, 0.2188966634740528, 0.16209018363916816, 0.5270880194529743, 0.526522683256869, 0.5060855546457195, 0.5543056357831772, 0.5624727552454217, 0.5615829783875357, 0.547060695339155, 0.5120624316074334, 0.5100850811467925, 0.0927245942703494, 0.08161204618291829, 0.1103520012131125, 0.09402854531349603, 0.07704491735603247, 0.10563120736993137, 0.09502377924001537, 0.08366726823434278, 0.06869772241764316, 0.13752547740220578, 0.2230254267601831, 0.12805657129176384, 0.17171932422879765, 0.14818559650877228, 0.16906039797121541, 0.17543920396971058, 0.14795282725031034, 0.19206777100681338, 0.35410597849660563, 0.3171379591277913, 0.39469702645469273, 0.3706915457006891, 0.33017506661804097, 0.3479512072251124, 0.3668088205169989, 0.39685760699374073, 0.4342607480314731, 0.2403915526228516, 0.2280784999765909, 0.30026607924397775, 0.2569012613219154, 0.25371523817784103, 0.20514464833000445, 0.26321457062475717, 0.2798699007773502, 0.18741567193988118, 0.19913937984458896, 0.16519023492687612, 0.18415821354715523, 0.20181315520246013, 0.17427924866549094, 0.19767092568252553, 0.22336300023912203, 0.1955192183512684, 0.20839043731270823, 0.19871336527449923, 0.18793939855026587, 0.18186328060566714, 0.2911493760804269, 0.2076612546547716, 0.22571989711658058, 0.23079754701306376, 0.21140798659406967, 0.18276401144409904, 0.19834520936306677, 0.703274162091293, 0.16709403768114828, 0.8161688444539704, 0.19668029690128086, 0.19524604389544697, 0.14173298950580704, 0.7953333485119631, 0.18396500995016718, 0.7132560282375375, 0.16754099513064835, 0.5257471838371672, 0.20318824434477045, 0.19887220357711755, 0.1520970433898814, 0.20909093921870003, 0.6165677764320037, 0.6750440057159541, 0.178339358223775, 0.18465797691227215, 0.18536006260014815, 0.18438646910467782, 0.2465591573762037, 0.18013120215515233, 0.19259750049804136, 0.21478024797847373, 0.18170698399475138, 0.07164602451664193, 0.08096083480412586, 0.06795538039746973, 0.0765488998816174, 0.0703266696528757, 0.06851012882146934, 0.06911960893396119, 0.06733217503355882, 0.08290625427662579]}, "mutation_prompt": null}
{"id": "1d6cffa3-42d8-4aa9-a059-23465df001b1", "solution": "import numpy as np\n\nclass EnhancedPSO_AM_DM_v2:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.num_particles = 60  # Increased for wider exploration\n        self.w = 0.4  # Adjusted inertia for more responsiveness\n        self.c1 = 1.5  # Further reduced cognitive component\n        self.c2 = 2.5  # Enhanced social component for stronger attraction to global best\n        self.F = 0.8  # Modified mutation factor for balanced exploration\n        self.CR = 0.9  # Increased crossover rate for more frequent mutations\n        self.adaptive_lr = 80  # Further lowered adaptive learning rate scale\n\n    def __call__(self, func):\n        # Initialize particles\n        positions = np.random.uniform(self.lb, self.ub, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-0.2, 0.2, (self.num_particles, self.dim))  # Tighter initial velocity range\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.num_particles, float('inf'))\n        global_best_position = np.zeros(self.dim)\n        global_best_score = float('inf')\n\n        eval_count = 0\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            scores = np.array([func(p) for p in positions])\n            eval_count += self.num_particles\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_scores[better_mask] = scores[better_mask]\n            personal_best_positions[better_mask] = positions[better_mask]\n\n            min_score_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[min_score_idx] < global_best_score:\n                global_best_score = personal_best_scores[min_score_idx]\n                global_best_position = personal_best_positions[min_score_idx]\n\n            # Update velocities and positions using PSO update rule\n            r1 = np.random.rand(self.num_particles, self.dim)\n            r2 = np.random.rand(self.num_particles, self.dim)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.lb, self.ub)\n\n            # Dynamic adaptive learning rate\n            adaptive_w = self.w / (1 + (eval_count / self.adaptive_lr) ** 2)  # Similar decay for adaptability\n            velocities *= adaptive_w\n\n            # Apply Adaptive Differential Mutation with memory\n            memory = np.copy(personal_best_positions)  # Use personal bests for memory\n            for i in range(self.num_particles):\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(idxs, 3, replace=False)\n                    mutant = memory[a] + self.F * (memory[b] - memory[c])\n                    mutant = np.clip(mutant, self.lb, self.ub)\n                    \n                    mutant_score = func(mutant)\n                    eval_count += 1\n                    if mutant_score < scores[i]:\n                        positions[i] = mutant\n                        scores[i] = mutant_score\n\n                    if eval_count >= self.budget:\n                        break\n\n            # Update global best with the latest evaluations\n            current_best_idx = np.argmin(scores)\n            if scores[current_best_idx] < global_best_score:\n                global_best_score = scores[current_best_idx]\n                global_best_position = positions[current_best_idx]\n\n        return global_best_position", "name": "EnhancedPSO_AM_DM_v2", "description": "EnhancedPSO_AM_DM_v2: Further tuned Particle Swarm Optimization with diversified search mechanisms and adaptive strategies for accelerated convergence.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1cc55ed5-59b5-4697-a081-5e7a1d727e15", "metadata": {"aucs": [0.8161340860629157, 0.80919051623162, 0.7669892120701982, 0.8088996028919788, 0.7970807881361001, 0.8519588703384219, 0.8228317870059719, 0.7865040546595348, 0.8160425274941848, 0.6197923365966534, 0.6007961341374013, 9.999999999998899e-05, 9.999999999998899e-05, 0.6591949925278235, 0.623808006605693, 0.6006257811684124, 0.6471528809057273, 0.6020844231844962, 0.13988517866624972, 0.16874758130446132, 0.14484159733484814, 0.1353214472600226, 0.1394233679660314, 0.14775239835123666, 0.10105848161963926, 0.1044377264500308, 0.11041995006128114, 0.12199999060130307, 0.14024382298542748, 0.1092309119133168, 0.1300467995952762, 0.1625307102997473, 0.11929975682388572, 0.12205496652161951, 0.09920319200326977, 0.10486722191890707, 0.937862335867399, 0.9689196155284897, 0.9771063602334478, 0.9588229689909482, 0.9600118064097256, 0.9712694049138495, 0.9786619077346024, 0.978801248125971, 0.9705824090241166, 0.25718901336829714, 0.26353333739299833, 0.22319768069485912, 0.22461594862696466, 0.1433392611699359, 0.29172893499634833, 0.2614420582966509, 0.26184754882098826, 0.24888553984164996, 0.49983264127995763, 0.33700435243177684, 0.5619704225996021, 0.5713259366815935, 0.7028434223787735, 0.4130982012554234, 0.508321298848539, 0.5385234707000888, 0.5359920351743499, 0.18866131420456644, 0.09094793441445215, 0.20627853093125914, 0.10459812975043425, 0.1271497215276669, 0.098197121966761, 0.2621988858370914, 0.19480143204190536, 0.26150892485349575, 0.2766742327766408, 0.30833935725380657, 0.2272176976277438, 0.20497252790040998, 0.20879302341626793, 0.3008098595488009, 0.20947443731621684, 0.22405966177701753, 0.15898022368291365, 0.05434359493646357, 0.059582977722055896, 0.04721949510916712, 0.04712809556297848, 0.08424217288127889, 0.07797744302490406, 0.09942502278065202, 0.043986590891678, 0.0571350943874519, 0.1532109125395813, 0.1446409016677198, 0.16631755125405157, 0.1689851909549619, 0.14677170203297407, 0.1490124924279027, 0.17792001013590342, 0.1606679341558891, 0.20156340400541284, 0.07284598001077025, 0.03174558258206983, 0.04497286576334869, 0.0813903673993569, 0.16832080012123185, 0.17295960753760942, 0.09570802641826048, 0.08628093679716853, 0.06843412017131034, 0.1746520718023825, 0.17076876694227194, 0.14957407908319387, 0.1646705883479579, 0.24625886870763147, 0.1787231552424713, 0.05569548510372713, 0.2188966634740528, 0.16209018363916816, 0.5270880194529743, 0.526522683256869, 0.5060855546457195, 0.5543056357831772, 0.5624727552454217, 0.5615829783875357, 0.547060695339155, 0.5120624316074334, 0.5100850811467925, 0.0927245942703494, 0.08161204618291829, 0.1103520012131125, 0.09402854531349603, 0.07704491735603247, 0.10563120736993137, 0.09502377924001537, 0.08366726823434278, 0.06869772241764316, 0.13752547740220578, 0.2230254267601831, 0.12805657129176384, 0.17171932422879765, 0.14818559650877228, 0.16906039797121541, 0.17543920396971058, 0.14795282725031034, 0.19206777100681338, 0.35410597849660563, 0.3171379591277913, 0.39469702645469273, 0.3706915457006891, 0.33017506661804097, 0.3479512072251124, 0.3668088205169989, 0.39685760699374073, 0.4342607480314731, 0.2403915526228516, 0.2280784999765909, 0.30026607924397775, 0.2569012613219154, 0.25371523817784103, 0.20514464833000445, 0.26321457062475717, 0.2798699007773502, 0.18741567193988118, 0.19913937984458896, 0.16519023492687612, 0.18415821354715523, 0.20181315520246013, 0.17427924866549094, 0.19767092568252553, 0.22336300023912203, 0.1955192183512684, 0.20839043731270823, 0.19871336527449923, 0.18793939855026587, 0.18186328060566714, 0.2911493760804269, 0.2076612546547716, 0.22571989711658058, 0.23079754701306376, 0.21140798659406967, 0.18276401144409904, 0.19834520936306677, 0.703274162091293, 0.16709403768114828, 0.8161688444539704, 0.19668029690128086, 0.19524604389544697, 0.14173298950580704, 0.7953333485119631, 0.18396500995016718, 0.7132560282375375, 0.16754099513064835, 0.5257471838371672, 0.20318824434477045, 0.19887220357711755, 0.1520970433898814, 0.20909093921870003, 0.6165677764320037, 0.6750440057159541, 0.178339358223775, 0.18465797691227215, 0.18536006260014815, 0.18438646910467782, 0.2465591573762037, 0.18013120215515233, 0.19259750049804136, 0.21478024797847373, 0.18170698399475138, 0.07164602451664193, 0.08096083480412586, 0.06795538039746973, 0.0765488998816174, 0.0703266696528757, 0.06851012882146934, 0.06911960893396119, 0.06733217503355882, 0.08290625427662579]}, "mutation_prompt": null}
{"id": "0a224313-3fd6-4c83-a829-a17c8f6713d5", "solution": "import numpy as np\n\nclass EnhancedPSO_AM_DM_v2:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.num_particles = 60  # Increased for wider exploration\n        self.w = 0.4  # Adjusted inertia for more responsiveness\n        self.c1 = 1.5  # Further reduced cognitive component\n        self.c2 = 2.5  # Enhanced social component for stronger attraction to global best\n        self.F = 0.8  # Modified mutation factor for balanced exploration\n        self.CR = 0.9  # Increased crossover rate for more frequent mutations\n        self.adaptive_lr = 80  # Further lowered adaptive learning rate scale\n\n    def __call__(self, func):\n        # Initialize particles\n        positions = np.random.uniform(self.lb, self.ub, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-0.2, 0.2, (self.num_particles, self.dim))  # Tighter initial velocity range\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.num_particles, float('inf'))\n        global_best_position = np.zeros(self.dim)\n        global_best_score = float('inf')\n\n        eval_count = 0\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            scores = np.array([func(p) for p in positions])\n            eval_count += self.num_particles\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_scores[better_mask] = scores[better_mask]\n            personal_best_positions[better_mask] = positions[better_mask]\n\n            min_score_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[min_score_idx] < global_best_score:\n                global_best_score = personal_best_scores[min_score_idx]\n                global_best_position = personal_best_positions[min_score_idx]\n\n            # Update velocities and positions using PSO update rule\n            r1 = np.random.rand(self.num_particles, self.dim)\n            r2 = np.random.rand(self.num_particles, self.dim)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.lb, self.ub)\n\n            # Dynamic adaptive learning rate\n            adaptive_w = self.w / (1 + (eval_count / self.adaptive_lr) ** 2)  # Similar decay for adaptability\n            velocities *= adaptive_w\n\n            # Apply Adaptive Differential Mutation with memory\n            memory = np.copy(personal_best_positions)  # Use personal bests for memory\n            for i in range(self.num_particles):\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(idxs, 3, replace=False)\n                    mutant = memory[a] + self.F * (memory[b] - memory[c])\n                    mutant = np.clip(mutant, self.lb, self.ub)\n                    \n                    mutant_score = func(mutant)\n                    eval_count += 1\n                    if mutant_score < scores[i]:\n                        positions[i] = mutant\n                        scores[i] = mutant_score\n\n                    if eval_count >= self.budget:\n                        break\n\n            # Update global best with the latest evaluations\n            current_best_idx = np.argmin(scores)\n            if scores[current_best_idx] < global_best_score:\n                global_best_score = scores[current_best_idx]\n                global_best_position = positions[current_best_idx]\n\n        return global_best_position", "name": "EnhancedPSO_AM_DM_v2", "description": "EnhancedPSO_AM_DM_v2: Further tuned Particle Swarm Optimization with diversified search mechanisms and adaptive strategies for accelerated convergence.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1cc55ed5-59b5-4697-a081-5e7a1d727e15", "metadata": {"aucs": [0.8161340860629157, 0.80919051623162, 0.7669892120701982, 0.8088996028919788, 0.7970807881361001, 0.8519588703384219, 0.8228317870059719, 0.7865040546595348, 0.8160425274941848, 0.6197923365966534, 0.6007961341374013, 9.999999999998899e-05, 9.999999999998899e-05, 0.6591949925278235, 0.623808006605693, 0.6006257811684124, 0.6471528809057273, 0.6020844231844962, 0.13988517866624972, 0.16874758130446132, 0.14484159733484814, 0.1353214472600226, 0.1394233679660314, 0.14775239835123666, 0.10105848161963926, 0.1044377264500308, 0.11041995006128114, 0.12199999060130307, 0.14024382298542748, 0.1092309119133168, 0.1300467995952762, 0.1625307102997473, 0.11929975682388572, 0.12205496652161951, 0.09920319200326977, 0.10486722191890707, 0.937862335867399, 0.9689196155284897, 0.9771063602334478, 0.9588229689909482, 0.9600118064097256, 0.9712694049138495, 0.9786619077346024, 0.978801248125971, 0.9705824090241166, 0.25718901336829714, 0.26353333739299833, 0.22319768069485912, 0.22461594862696466, 0.1433392611699359, 0.29172893499634833, 0.2614420582966509, 0.26184754882098826, 0.24888553984164996, 0.49983264127995763, 0.33700435243177684, 0.5619704225996021, 0.5713259366815935, 0.7028434223787735, 0.4130982012554234, 0.508321298848539, 0.5385234707000888, 0.5359920351743499, 0.18866131420456644, 0.09094793441445215, 0.20627853093125914, 0.10459812975043425, 0.1271497215276669, 0.098197121966761, 0.2621988858370914, 0.19480143204190536, 0.26150892485349575, 0.2766742327766408, 0.30833935725380657, 0.2272176976277438, 0.20497252790040998, 0.20879302341626793, 0.3008098595488009, 0.20947443731621684, 0.22405966177701753, 0.15898022368291365, 0.05434359493646357, 0.059582977722055896, 0.04721949510916712, 0.04712809556297848, 0.08424217288127889, 0.07797744302490406, 0.09942502278065202, 0.043986590891678, 0.0571350943874519, 0.1532109125395813, 0.1446409016677198, 0.16631755125405157, 0.1689851909549619, 0.14677170203297407, 0.1490124924279027, 0.17792001013590342, 0.1606679341558891, 0.20156340400541284, 0.07284598001077025, 0.03174558258206983, 0.04497286576334869, 0.0813903673993569, 0.16832080012123185, 0.17295960753760942, 0.09570802641826048, 0.08628093679716853, 0.06843412017131034, 0.1746520718023825, 0.17076876694227194, 0.14957407908319387, 0.1646705883479579, 0.24625886870763147, 0.1787231552424713, 0.05569548510372713, 0.2188966634740528, 0.16209018363916816, 0.5270880194529743, 0.526522683256869, 0.5060855546457195, 0.5543056357831772, 0.5624727552454217, 0.5615829783875357, 0.547060695339155, 0.5120624316074334, 0.5100850811467925, 0.0927245942703494, 0.08161204618291829, 0.1103520012131125, 0.09402854531349603, 0.07704491735603247, 0.10563120736993137, 0.09502377924001537, 0.08366726823434278, 0.06869772241764316, 0.13752547740220578, 0.2230254267601831, 0.12805657129176384, 0.17171932422879765, 0.14818559650877228, 0.16906039797121541, 0.17543920396971058, 0.14795282725031034, 0.19206777100681338, 0.35410597849660563, 0.3171379591277913, 0.39469702645469273, 0.3706915457006891, 0.33017506661804097, 0.3479512072251124, 0.3668088205169989, 0.39685760699374073, 0.4342607480314731, 0.2403915526228516, 0.2280784999765909, 0.30026607924397775, 0.2569012613219154, 0.25371523817784103, 0.20514464833000445, 0.26321457062475717, 0.2798699007773502, 0.18741567193988118, 0.19913937984458896, 0.16519023492687612, 0.18415821354715523, 0.20181315520246013, 0.17427924866549094, 0.19767092568252553, 0.22336300023912203, 0.1955192183512684, 0.20839043731270823, 0.19871336527449923, 0.18793939855026587, 0.18186328060566714, 0.2911493760804269, 0.2076612546547716, 0.22571989711658058, 0.23079754701306376, 0.21140798659406967, 0.18276401144409904, 0.19834520936306677, 0.703274162091293, 0.16709403768114828, 0.8161688444539704, 0.19668029690128086, 0.19524604389544697, 0.14173298950580704, 0.7953333485119631, 0.18396500995016718, 0.7132560282375375, 0.16754099513064835, 0.5257471838371672, 0.20318824434477045, 0.19887220357711755, 0.1520970433898814, 0.20909093921870003, 0.6165677764320037, 0.6750440057159541, 0.178339358223775, 0.18465797691227215, 0.18536006260014815, 0.18438646910467782, 0.2465591573762037, 0.18013120215515233, 0.19259750049804136, 0.21478024797847373, 0.18170698399475138, 0.07164602451664193, 0.08096083480412586, 0.06795538039746973, 0.0765488998816174, 0.0703266696528757, 0.06851012882146934, 0.06911960893396119, 0.06733217503355882, 0.08290625427662579]}, "mutation_prompt": null}
{"id": "c6d0e345-8c0a-4e41-8576-aa767711bed5", "solution": "import numpy as np\n\nclass HybridPSO_AQIM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.num_particles = 60\n        self.w = 0.5  # Increased inertia for maintaining exploration early on\n        self.c1 = 1.2  # Slightly reduced cognitive component for less oscillation\n        self.c2 = 2.8  # Further enhanced social component for stronger convergence\n        self.F = 0.9  # Increased mutation factor for more aggressive diversity\n        self.CR = 0.85  # Reduced crossover rate to balance mutation application\n        self.adaptive_lr = 100  # Slightly higher adaptive learning scale for gradual decay\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lb, self.ub, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-0.3, 0.3, (self.num_particles, self.dim))  # Wider initial velocity range\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.num_particles, float('inf'))\n        global_best_position = np.zeros(self.dim)\n        global_best_score = float('inf')\n\n        eval_count = 0\n\n        while eval_count < self.budget:\n            scores = np.array([func(p) for p in positions])\n            eval_count += self.num_particles\n\n            better_mask = scores < personal_best_scores\n            personal_best_scores[better_mask] = scores[better_mask]\n            personal_best_positions[better_mask] = positions[better_mask]\n\n            min_score_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[min_score_idx] < global_best_score:\n                global_best_score = personal_best_scores[min_score_idx]\n                global_best_position = personal_best_positions[min_score_idx]\n\n            r1 = np.random.rand(self.num_particles, self.dim)\n            r2 = np.random.rand(self.num_particles, self.dim)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.lb, self.ub)\n\n            adaptive_w = self.w / (1 + (eval_count / self.adaptive_lr))\n            velocities *= adaptive_w\n\n            memory = np.copy(personal_best_positions)\n            for i in range(self.num_particles):\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(idxs, 3, replace=False)\n                    mutant = memory[a] + self.F * (memory[b] - memory[c])\n                    mutant = np.clip(mutant, self.lb, self.ub)\n                    \n                    quantum_shift = np.random.normal(0, 0.1, self.dim)  # Quantum-inspired shift\n                    quantum_mutant = mutant + quantum_shift\n                    quantum_mutant = np.clip(quantum_mutant, self.lb, self.ub)\n\n                    mutant_score = func(quantum_mutant)\n                    eval_count += 1\n                    if mutant_score < scores[i]:\n                        positions[i] = quantum_mutant\n                        scores[i] = mutant_score\n\n                    if eval_count >= self.budget:\n                        break\n\n            current_best_idx = np.argmin(scores)\n            if scores[current_best_idx] < global_best_score:\n                global_best_score = scores[current_best_idx]\n                global_best_position = positions[current_best_idx]\n\n        return global_best_position", "name": "HybridPSO_AQIM", "description": "Hybrid PSO with Adaptive Quantum-Inspired Mutations for Enhanced Convergence in Black Box Optimization.", "configspace": "", "generation": 20, "fitness": 0.24607485715451702, "feedback": "The algorithm HybridPSO_AQIM got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.23.", "error": "", "parent_id": "1cc55ed5-59b5-4697-a081-5e7a1d727e15", "metadata": {"aucs": [0.7511952318042181, 0.738912883982364, 0.7567475996382349, 0.7386467041559328, 0.7740166020103361, 0.7183197866437311, 0.7089817193993408, 0.744907322028605, 0.7499858187314712, 0.0379101627053724, 0.43366106256166026, 0.4671777575774154, 0.42104136662885294, 0.5103424803695076, 0.32314835218744187, 0.41283402100546474, 0.4554017242978208, 0.04973721614822646, 0.1592842926080551, 0.13136621484315458, 0.09247378016301011, 0.0880750547583724, 0.11388556339381939, 0.08519080069521423, 0.07389620899875426, 0.1184265840876767, 0.13662832444252437, 0.10846672449964101, 0.10596039122128309, 0.12465947021408752, 0.10971305095306982, 0.10201231372923303, 0.0934344403446139, 0.10534582696812778, 0.09834685051590553, 0.09517923362605651, 0.9776632479004125, 0.9767317172133326, 0.9749823141867903, 0.9769776146510493, 0.9595110652011134, 0.975079321886096, 0.9698296543894454, 0.9800703982526049, 0.976893485601397, 0.20941493636924158, 0.2158758783342244, 0.20046802788563778, 0.17561894031023106, 0.2112737954967746, 0.20713695519094377, 0.22837360359852255, 0.1779086205742082, 0.20808232908540325, 0.343401139213106, 0.2793247742713777, 0.2748792780224587, 0.371099840276393, 0.30984252112679256, 0.32819874185610154, 0.2884919130920981, 0.2675857283687896, 0.2903737878890712, 0.14929320024897808, 0.1546913791478879, 0.1118817135571315, 0.1518197296081507, 0.20830209096037355, 0.13671605607642123, 0.12194068485968768, 0.15938616446629061, 0.155450647070559, 0.11912861433096711, 0.1152432690071935, 0.17990927713327276, 0.16346026501965938, 0.13335676150094455, 0.16907173437130063, 0.12652174639680214, 0.1480291759813317, 0.11789525373655219, 9.999999999998899e-05, 0.012876578381238346, 9.999999999998899e-05, 0.011364938483308884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012006238223717491, 0.00011264423458201556, 0.08560325851985728, 0.07651889430737213, 0.09285541648326234, 0.06409674660430009, 0.1773318900077162, 0.07378093797348195, 0.0747263786860276, 0.1463777907421414, 0.08638180023185393, 0.03941043400475697, 0.04926278882695356, 0.043232269402013856, 0.21242911391469643, 0.07298673016342905, 0.14068793907196775, 0.08389596915129982, 0.09837772646689735, 0.12012326166068199, 0.17022647880481911, 0.039415638605161285, 0.15575769754731972, 0.13555411132788486, 0.09708458751741234, 0.13999350903474805, 0.055464881647970254, 0.07699646931197368, 0.08064679025433452, 0.4373724769682227, 0.47241701027905303, 0.4484254591419219, 0.41024110961113625, 0.45220818443121846, 0.4311164612819606, 0.48694408381272847, 0.45596588689062634, 0.4380249598201924, 0.10814593611717138, 0.1063710949701222, 0.08644893944437193, 0.08379178417022581, 0.07206337868983959, 0.1331441367289382, 0.08263669923461725, 0.10753369474369268, 0.08614794279006, 0.17383779614126416, 0.199421466424633, 0.2552494517579005, 0.15933766697513696, 0.20561171629135633, 0.18970730104571942, 0.15988700692129154, 0.1705529093873609, 0.15870257189867387, 0.27045040811596477, 0.3191793646627541, 0.29398633808536656, 0.29271461985390423, 0.33493236933067017, 0.2758614637329543, 0.3105596851059509, 0.3279544120848772, 0.24794165413662517, 0.18356611682668433, 0.2104677805018711, 0.2548302520604011, 0.16738700997190503, 0.19334730569106673, 0.20302146048190783, 0.2401315639611823, 0.23780900238085922, 0.22852198399432133, 0.18774791217857167, 0.1660531403831954, 0.23983129858013952, 0.18386725529608472, 0.1745440256041787, 0.16367896567936369, 0.1738065786823465, 0.18972456607600774, 0.17017806677810854, 0.17915173108524507, 0.192960477695289, 0.18580470617721656, 0.21298564737472048, 0.20531292356187092, 0.18531987338634381, 0.21324131238074118, 0.18133264611581135, 0.18392043116858736, 0.7529300247857019, 0.1853162697966051, 0.3825967526882117, 0.7074827975981015, 0.19774675398169528, 0.19711645439559167, 0.17022131592947953, 0.17591681265993198, 0.8005771707582114, 0.458306422987638, 0.2081294474992048, 0.1958613590214041, 0.2028609666190755, 0.1575087486107566, 0.16234843481330352, 0.208682003782669, 0.12413457966805941, 0.4866078117725253, 0.1993034561079885, 0.17751546913788185, 0.18963233616161412, 0.18590558316499517, 0.19479111857621878, 0.22527791592655544, 0.20386879381330614, 0.1851604806215813, 0.1937426158108062, 0.07160955248041989, 0.07666486657317195, 0.06954694380305115, 0.07159710270315389, 0.07269792870042224, 0.0727763131455651, 0.05872704359547187, 0.07439079165263285, 0.06260498963125283]}, "mutation_prompt": null}
{"id": "8fc0ed12-35aa-40eb-adfa-c8a36b2b0b6b", "solution": "import numpy as np\n\nclass EnhancedPSO_AM_DM_v2:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.num_particles = 60  # Increased for wider exploration\n        self.w = 0.4  # Adjusted inertia for more responsiveness\n        self.c1 = 1.5  # Further reduced cognitive component\n        self.c2 = 2.5  # Enhanced social component for stronger attraction to global best\n        self.F = 0.8  # Modified mutation factor for balanced exploration\n        self.CR = 0.9  # Increased crossover rate for more frequent mutations\n        self.adaptive_lr = 80  # Further lowered adaptive learning rate scale\n\n    def __call__(self, func):\n        # Initialize particles\n        positions = np.random.uniform(self.lb, self.ub, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-0.2, 0.2, (self.num_particles, self.dim))  # Tighter initial velocity range\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.num_particles, float('inf'))\n        global_best_position = np.zeros(self.dim)\n        global_best_score = float('inf')\n\n        eval_count = 0\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            scores = np.array([func(p) for p in positions])\n            eval_count += self.num_particles\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_scores[better_mask] = scores[better_mask]\n            personal_best_positions[better_mask] = positions[better_mask]\n\n            min_score_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[min_score_idx] < global_best_score:\n                global_best_score = personal_best_scores[min_score_idx]\n                global_best_position = personal_best_positions[min_score_idx]\n\n            # Update velocities and positions using PSO update rule\n            r1 = np.random.rand(self.num_particles, self.dim)\n            r2 = np.random.rand(self.num_particles, self.dim)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.lb, self.ub)\n\n            # Dynamic adaptive learning rate\n            adaptive_w = self.w / (1 + (eval_count / self.adaptive_lr) ** 2)  # Similar decay for adaptability\n            velocities *= adaptive_w\n\n            # Apply Adaptive Differential Mutation with memory\n            memory = np.copy(personal_best_positions)  # Use personal bests for memory\n            for i in range(self.num_particles):\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(idxs, 3, replace=False)\n                    mutant = memory[a] + self.F * (memory[b] - memory[c])\n                    mutant = np.clip(mutant, self.lb, self.ub)\n                    \n                    mutant_score = func(mutant)\n                    eval_count += 1\n                    if mutant_score < scores[i]:\n                        positions[i] = mutant\n                        scores[i] = mutant_score\n\n                    if eval_count >= self.budget:\n                        break\n\n            # Update global best with the latest evaluations\n            current_best_idx = np.argmin(scores)\n            if scores[current_best_idx] < global_best_score:\n                global_best_score = scores[current_best_idx]\n                global_best_position = positions[current_best_idx]\n\n        return global_best_position", "name": "EnhancedPSO_AM_DM_v2", "description": "EnhancedPSO_AM_DM_v2: Further tuned Particle Swarm Optimization with diversified search mechanisms and adaptive strategies for accelerated convergence.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1cc55ed5-59b5-4697-a081-5e7a1d727e15", "metadata": {"aucs": [0.8161340860629157, 0.80919051623162, 0.7669892120701982, 0.8088996028919788, 0.7970807881361001, 0.8519588703384219, 0.8228317870059719, 0.7865040546595348, 0.8160425274941848, 0.6197923365966534, 0.6007961341374013, 9.999999999998899e-05, 9.999999999998899e-05, 0.6591949925278235, 0.623808006605693, 0.6006257811684124, 0.6471528809057273, 0.6020844231844962, 0.13988517866624972, 0.16874758130446132, 0.14484159733484814, 0.1353214472600226, 0.1394233679660314, 0.14775239835123666, 0.10105848161963926, 0.1044377264500308, 0.11041995006128114, 0.12199999060130307, 0.14024382298542748, 0.1092309119133168, 0.1300467995952762, 0.1625307102997473, 0.11929975682388572, 0.12205496652161951, 0.09920319200326977, 0.10486722191890707, 0.937862335867399, 0.9689196155284897, 0.9771063602334478, 0.9588229689909482, 0.9600118064097256, 0.9712694049138495, 0.9786619077346024, 0.978801248125971, 0.9705824090241166, 0.25718901336829714, 0.26353333739299833, 0.22319768069485912, 0.22461594862696466, 0.1433392611699359, 0.29172893499634833, 0.2614420582966509, 0.26184754882098826, 0.24888553984164996, 0.49983264127995763, 0.33700435243177684, 0.5619704225996021, 0.5713259366815935, 0.7028434223787735, 0.4130982012554234, 0.508321298848539, 0.5385234707000888, 0.5359920351743499, 0.18866131420456644, 0.09094793441445215, 0.20627853093125914, 0.10459812975043425, 0.1271497215276669, 0.098197121966761, 0.2621988858370914, 0.19480143204190536, 0.26150892485349575, 0.2766742327766408, 0.30833935725380657, 0.2272176976277438, 0.20497252790040998, 0.20879302341626793, 0.3008098595488009, 0.20947443731621684, 0.22405966177701753, 0.15898022368291365, 0.05434359493646357, 0.059582977722055896, 0.04721949510916712, 0.04712809556297848, 0.08424217288127889, 0.07797744302490406, 0.09942502278065202, 0.043986590891678, 0.0571350943874519, 0.1532109125395813, 0.1446409016677198, 0.16631755125405157, 0.1689851909549619, 0.14677170203297407, 0.1490124924279027, 0.17792001013590342, 0.1606679341558891, 0.20156340400541284, 0.07284598001077025, 0.03174558258206983, 0.04497286576334869, 0.0813903673993569, 0.16832080012123185, 0.17295960753760942, 0.09570802641826048, 0.08628093679716853, 0.06843412017131034, 0.1746520718023825, 0.17076876694227194, 0.14957407908319387, 0.1646705883479579, 0.24625886870763147, 0.1787231552424713, 0.05569548510372713, 0.2188966634740528, 0.16209018363916816, 0.5270880194529743, 0.526522683256869, 0.5060855546457195, 0.5543056357831772, 0.5624727552454217, 0.5615829783875357, 0.547060695339155, 0.5120624316074334, 0.5100850811467925, 0.0927245942703494, 0.08161204618291829, 0.1103520012131125, 0.09402854531349603, 0.07704491735603247, 0.10563120736993137, 0.09502377924001537, 0.08366726823434278, 0.06869772241764316, 0.13752547740220578, 0.2230254267601831, 0.12805657129176384, 0.17171932422879765, 0.14818559650877228, 0.16906039797121541, 0.17543920396971058, 0.14795282725031034, 0.19206777100681338, 0.35410597849660563, 0.3171379591277913, 0.39469702645469273, 0.3706915457006891, 0.33017506661804097, 0.3479512072251124, 0.3668088205169989, 0.39685760699374073, 0.4342607480314731, 0.2403915526228516, 0.2280784999765909, 0.30026607924397775, 0.2569012613219154, 0.25371523817784103, 0.20514464833000445, 0.26321457062475717, 0.2798699007773502, 0.18741567193988118, 0.19913937984458896, 0.16519023492687612, 0.18415821354715523, 0.20181315520246013, 0.17427924866549094, 0.19767092568252553, 0.22336300023912203, 0.1955192183512684, 0.20839043731270823, 0.19871336527449923, 0.18793939855026587, 0.18186328060566714, 0.2911493760804269, 0.2076612546547716, 0.22571989711658058, 0.23079754701306376, 0.21140798659406967, 0.18276401144409904, 0.19834520936306677, 0.703274162091293, 0.16709403768114828, 0.8161688444539704, 0.19668029690128086, 0.19524604389544697, 0.14173298950580704, 0.7953333485119631, 0.18396500995016718, 0.7132560282375375, 0.16754099513064835, 0.5257471838371672, 0.20318824434477045, 0.19887220357711755, 0.1520970433898814, 0.20909093921870003, 0.6165677764320037, 0.6750440057159541, 0.178339358223775, 0.18465797691227215, 0.18536006260014815, 0.18438646910467782, 0.2465591573762037, 0.18013120215515233, 0.19259750049804136, 0.21478024797847373, 0.18170698399475138, 0.07164602451664193, 0.08096083480412586, 0.06795538039746973, 0.0765488998816174, 0.0703266696528757, 0.06851012882146934, 0.06911960893396119, 0.06733217503355882, 0.08290625427662579]}, "mutation_prompt": null}
{"id": "53b54730-3155-4d2e-90e0-00573f772227", "solution": "import numpy as np\n\nclass EnhancedPSO_AM_DM_v2:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.num_particles = 60  # Increased for wider exploration\n        self.w = 0.4  # Adjusted inertia for more responsiveness\n        self.c1 = 1.5  # Further reduced cognitive component\n        self.c2 = 2.5  # Enhanced social component for stronger attraction to global best\n        self.F = 0.8  # Modified mutation factor for balanced exploration\n        self.CR = 0.9  # Increased crossover rate for more frequent mutations\n        self.adaptive_lr = 80  # Further lowered adaptive learning rate scale\n\n    def __call__(self, func):\n        # Initialize particles\n        positions = np.random.uniform(self.lb, self.ub, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-0.2, 0.2, (self.num_particles, self.dim))  # Tighter initial velocity range\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.num_particles, float('inf'))\n        global_best_position = np.zeros(self.dim)\n        global_best_score = float('inf')\n\n        eval_count = 0\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            scores = np.array([func(p) for p in positions])\n            eval_count += self.num_particles\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_scores[better_mask] = scores[better_mask]\n            personal_best_positions[better_mask] = positions[better_mask]\n\n            min_score_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[min_score_idx] < global_best_score:\n                global_best_score = personal_best_scores[min_score_idx]\n                global_best_position = personal_best_positions[min_score_idx]\n\n            # Update velocities and positions using PSO update rule\n            r1 = np.random.rand(self.num_particles, self.dim)\n            r2 = np.random.rand(self.num_particles, self.dim)\n            velocities = (self.w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.lb, self.ub)\n\n            # Dynamic adaptive learning rate\n            adaptive_w = self.w / (1 + (eval_count / self.adaptive_lr) ** 2)  # Similar decay for adaptability\n            velocities *= adaptive_w\n\n            # Apply Adaptive Differential Mutation with memory\n            memory = np.copy(personal_best_positions)  # Use personal bests for memory\n            for i in range(self.num_particles):\n                if np.random.rand() < self.CR:\n                    idxs = [idx for idx in range(self.num_particles) if idx != i]\n                    a, b, c = np.random.choice(idxs, 3, replace=False)\n                    mutant = memory[a] + self.F * (memory[b] - memory[c])\n                    mutant = np.clip(mutant, self.lb, self.ub)\n                    \n                    mutant_score = func(mutant)\n                    eval_count += 1\n                    if mutant_score < scores[i]:\n                        positions[i] = mutant\n                        scores[i] = mutant_score\n\n                    if eval_count >= self.budget:\n                        break\n\n            # Update global best with the latest evaluations\n            current_best_idx = np.argmin(scores)\n            if scores[current_best_idx] < global_best_score:\n                global_best_score = scores[current_best_idx]\n                global_best_position = positions[current_best_idx]\n\n        return global_best_position", "name": "EnhancedPSO_AM_DM_v2", "description": "EnhancedPSO_AM_DM_v2: Further tuned Particle Swarm Optimization with diversified search mechanisms and adaptive strategies for accelerated convergence.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "1cc55ed5-59b5-4697-a081-5e7a1d727e15", "metadata": {"aucs": [0.8161340860629157, 0.80919051623162, 0.7669892120701982, 0.8088996028919788, 0.7970807881361001, 0.8519588703384219, 0.8228317870059719, 0.7865040546595348, 0.8160425274941848, 0.6197923365966534, 0.6007961341374013, 9.999999999998899e-05, 9.999999999998899e-05, 0.6591949925278235, 0.623808006605693, 0.6006257811684124, 0.6471528809057273, 0.6020844231844962, 0.13988517866624972, 0.16874758130446132, 0.14484159733484814, 0.1353214472600226, 0.1394233679660314, 0.14775239835123666, 0.10105848161963926, 0.1044377264500308, 0.11041995006128114, 0.12199999060130307, 0.14024382298542748, 0.1092309119133168, 0.1300467995952762, 0.1625307102997473, 0.11929975682388572, 0.12205496652161951, 0.09920319200326977, 0.10486722191890707, 0.937862335867399, 0.9689196155284897, 0.9771063602334478, 0.9588229689909482, 0.9600118064097256, 0.9712694049138495, 0.9786619077346024, 0.978801248125971, 0.9705824090241166, 0.25718901336829714, 0.26353333739299833, 0.22319768069485912, 0.22461594862696466, 0.1433392611699359, 0.29172893499634833, 0.2614420582966509, 0.26184754882098826, 0.24888553984164996, 0.49983264127995763, 0.33700435243177684, 0.5619704225996021, 0.5713259366815935, 0.7028434223787735, 0.4130982012554234, 0.508321298848539, 0.5385234707000888, 0.5359920351743499, 0.18866131420456644, 0.09094793441445215, 0.20627853093125914, 0.10459812975043425, 0.1271497215276669, 0.098197121966761, 0.2621988858370914, 0.19480143204190536, 0.26150892485349575, 0.2766742327766408, 0.30833935725380657, 0.2272176976277438, 0.20497252790040998, 0.20879302341626793, 0.3008098595488009, 0.20947443731621684, 0.22405966177701753, 0.15898022368291365, 0.05434359493646357, 0.059582977722055896, 0.04721949510916712, 0.04712809556297848, 0.08424217288127889, 0.07797744302490406, 0.09942502278065202, 0.043986590891678, 0.0571350943874519, 0.1532109125395813, 0.1446409016677198, 0.16631755125405157, 0.1689851909549619, 0.14677170203297407, 0.1490124924279027, 0.17792001013590342, 0.1606679341558891, 0.20156340400541284, 0.07284598001077025, 0.03174558258206983, 0.04497286576334869, 0.0813903673993569, 0.16832080012123185, 0.17295960753760942, 0.09570802641826048, 0.08628093679716853, 0.06843412017131034, 0.1746520718023825, 0.17076876694227194, 0.14957407908319387, 0.1646705883479579, 0.24625886870763147, 0.1787231552424713, 0.05569548510372713, 0.2188966634740528, 0.16209018363916816, 0.5270880194529743, 0.526522683256869, 0.5060855546457195, 0.5543056357831772, 0.5624727552454217, 0.5615829783875357, 0.547060695339155, 0.5120624316074334, 0.5100850811467925, 0.0927245942703494, 0.08161204618291829, 0.1103520012131125, 0.09402854531349603, 0.07704491735603247, 0.10563120736993137, 0.09502377924001537, 0.08366726823434278, 0.06869772241764316, 0.13752547740220578, 0.2230254267601831, 0.12805657129176384, 0.17171932422879765, 0.14818559650877228, 0.16906039797121541, 0.17543920396971058, 0.14795282725031034, 0.19206777100681338, 0.35410597849660563, 0.3171379591277913, 0.39469702645469273, 0.3706915457006891, 0.33017506661804097, 0.3479512072251124, 0.3668088205169989, 0.39685760699374073, 0.4342607480314731, 0.2403915526228516, 0.2280784999765909, 0.30026607924397775, 0.2569012613219154, 0.25371523817784103, 0.20514464833000445, 0.26321457062475717, 0.2798699007773502, 0.18741567193988118, 0.19913937984458896, 0.16519023492687612, 0.18415821354715523, 0.20181315520246013, 0.17427924866549094, 0.19767092568252553, 0.22336300023912203, 0.1955192183512684, 0.20839043731270823, 0.19871336527449923, 0.18793939855026587, 0.18186328060566714, 0.2911493760804269, 0.2076612546547716, 0.22571989711658058, 0.23079754701306376, 0.21140798659406967, 0.18276401144409904, 0.19834520936306677, 0.703274162091293, 0.16709403768114828, 0.8161688444539704, 0.19668029690128086, 0.19524604389544697, 0.14173298950580704, 0.7953333485119631, 0.18396500995016718, 0.7132560282375375, 0.16754099513064835, 0.5257471838371672, 0.20318824434477045, 0.19887220357711755, 0.1520970433898814, 0.20909093921870003, 0.6165677764320037, 0.6750440057159541, 0.178339358223775, 0.18465797691227215, 0.18536006260014815, 0.18438646910467782, 0.2465591573762037, 0.18013120215515233, 0.19259750049804136, 0.21478024797847373, 0.18170698399475138, 0.07164602451664193, 0.08096083480412586, 0.06795538039746973, 0.0765488998816174, 0.0703266696528757, 0.06851012882146934, 0.06911960893396119, 0.06733217503355882, 0.08290625427662579]}, "mutation_prompt": null}
{"id": "d25d5f1e-cc7d-4d40-8e7f-8285333ebf78", "solution": "import numpy as np\n\nclass HybridPSO_GA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.num_particles = 50  # Slightly reduced for more focused search\n        self.w = 0.5  # Increased inertia for better exploration\n        self.c1 = 1.8  # Adaptive cognitive component for dynamic self-awareness\n        self.c2 = 2.0  # Reduced social component for balanced attraction\n        self.mutation_rate = 0.2  # Added mutation rate for genetic crossover\n        self.crossover_rate = 0.7  # Lower crossover rate for selective mutation\n\n    def __call__(self, func):\n        # Initialize particles\n        positions = np.random.uniform(self.lb, self.ub, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-0.2, 0.2, (self.num_particles, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.num_particles, float('inf'))\n        global_best_position = np.zeros(self.dim)\n        global_best_score = float('inf')\n\n        eval_count = 0\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            scores = np.array([func(p) for p in positions])\n            eval_count += self.num_particles\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_scores[better_mask] = scores[better_mask]\n            personal_best_positions[better_mask] = positions[better_mask]\n\n            min_score_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[min_score_idx] < global_best_score:\n                global_best_score = personal_best_scores[min_score_idx]\n                global_best_position = personal_best_positions[min_score_idx]\n\n            # Adaptive cognitive and social components\n            adaptive_c1 = self.c1 * np.exp(-eval_count / (0.5 * self.budget))\n            adaptive_c2 = self.c2 * (1 - np.exp(-eval_count / (0.5 * self.budget)))\n\n            # Update velocities and positions using hybrid PSO-GA update rule\n            r1 = np.random.rand(self.num_particles, self.dim)\n            r2 = np.random.rand(self.num_particles, self.dim)\n            velocities = (self.w * velocities +\n                          adaptive_c1 * r1 * (personal_best_positions - positions) +\n                          adaptive_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.lb, self.ub)\n\n            # Genetic Algorithm operations\n            for i in range(self.num_particles):\n                if np.random.rand() < self.crossover_rate:\n                    idxs = [idx for idx in range(self.num_particles) if idx != i]\n                    partner = positions[np.random.choice(idxs)]\n                    mask = np.random.rand(self.dim) < 0.5\n                    child = np.where(mask, positions[i], partner)\n\n                    if np.random.rand() < self.mutation_rate:\n                        mutation_idx = np.random.randint(self.dim)\n                        mutation_value = np.random.uniform(self.lb, self.ub)\n                        child[mutation_idx] = mutation_value\n\n                    child_score = func(child)\n                    eval_count += 1\n                    if child_score < scores[i]:\n                        positions[i] = child\n                        scores[i] = child_score\n\n                    if eval_count >= self.budget:\n                        break\n\n            # Update global best with the latest evaluations\n            current_best_idx = np.argmin(scores)\n            if scores[current_best_idx] < global_best_score:\n                global_best_score = scores[current_best_idx]\n                global_best_position = positions[current_best_idx]\n\n        return global_best_position", "name": "HybridPSO_GA", "description": "Hybrid PSO-GA Algorithm with Adaptive Cognitive and Mutation Strategies for Enhanced Convergence.", "configspace": "", "generation": 23, "fitness": 0.29750528014064304, "feedback": "The algorithm HybridPSO_GA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.24.", "error": "", "parent_id": "1cc55ed5-59b5-4697-a081-5e7a1d727e15", "metadata": {"aucs": [0.8603279696745655, 0.8262594945607524, 0.7478347835751068, 0.8535402677911377, 0.8445610479362768, 0.851177549426325, 0.8455805109691477, 0.8505323899831767, 0.8319260488012523, 0.7190976813395221, 0.478630247774239, 0.6870053843412952, 0.33254824212298395, 0.6626048137170797, 0.7261799005856253, 0.6789408471159499, 0.7067813845660214, 0.7216091077703575, 0.13474580224456545, 0.12921709064042675, 0.25831538943208776, 0.5616425366676595, 0.5469213432216131, 0.16260654740029512, 0.13656877204828322, 0.37149460718407545, 0.16373070355235653, 0.12841194073298523, 0.10055918061198266, 0.1307576826628818, 0.1381263501379988, 0.13094159130283167, 0.15408725963701653, 0.49085125317989087, 0.11854875450821079, 0.1385782587637997, 0.8816161916075317, 0.7986850141820524, 0.6203916946059134, 0.7428746527450987, 0.4772487831681833, 0.8479446649950289, 0.8292754424484935, 0.7999962317352589, 0.8558390131032875, 0.1969599705185927, 0.12771330855869423, 0.15047093789813915, 0.1989835008141202, 0.1416857527431703, 0.18348460089407936, 0.18320813867998187, 0.16325441179211408, 0.19147786950933388, 0.22209546326098784, 0.3414602506570079, 0.22940349669995508, 0.36733003413774046, 0.2707978390610206, 0.2640261404030195, 0.22229152215029757, 0.2220488385013215, 0.30918686572334353, 0.2918515965934029, 0.17094402840777134, 0.13186399866113518, 0.19168213661238542, 0.14422090029521117, 0.41418939674245736, 0.14225793412523413, 0.19953164133681767, 0.2653353422432725, 0.2992817881669012, 0.13561677187405663, 0.16207578382984944, 0.12363940965319054, 0.14203306158513063, 0.13194532787079516, 0.13162049131571762, 0.21585334156951586, 0.13683250863814067, 0.0020409620370839265, 0.005206484492384367, 9.999999999998899e-05, 0.005209685767228245, 0.10156018659578281, 9.999999999998899e-05, 0.11801334918978135, 9.999999999998899e-05, 0.030096095236678777, 0.12400364552553567, 0.12729691611884153, 0.13460268177424173, 0.05956341314565594, 0.10945085252773623, 0.11651827818116822, 0.1307986972210763, 0.16664227914834195, 0.09133475111263256, 0.12147955026307589, 0.06071638839964566, 0.13449849071897002, 0.11882808759619368, 0.13829940110909533, 0.12570118872012737, 0.15593576844198964, 0.25483280573655154, 0.08293816792403141, 0.19335481795964993, 0.4000905940869911, 0.1054619893373252, 0.06909962371112766, 0.09251239689844026, 0.20332633041969816, 0.16161378686232097, 0.1624716460099076, 0.07903236628691612, 0.590033821249873, 0.4304307662827651, 0.49968450317322466, 0.5220559369008834, 0.5216918516366722, 0.5483878369640809, 0.4848152803392838, 0.5094128734593245, 0.5267134333874554, 0.09580442479010509, 0.09279078610560632, 0.12543357259050136, 0.10584924683986041, 0.10840112145341996, 0.11229146340851492, 0.10068786046542644, 0.12249110645315486, 0.6696966974730306, 0.18353551249069655, 0.13904134200303653, 0.17363810868383567, 0.2858290989083999, 0.17999048985590016, 0.28790634938860193, 0.17502678769795288, 0.19301338732816653, 0.16876672736844156, 0.296460327385103, 0.37524129560054387, 0.2741528121575355, 0.24387720120713052, 0.3182518743675148, 0.3272133104185674, 0.23759923962929308, 0.5728405366995344, 0.24837770418055793, 0.21075982175066255, 0.213070846699969, 0.2262123671487719, 0.25521867429967526, 0.21343760878352525, 0.24668615390058057, 0.1922717237040813, 0.23610404387898787, 0.2107896571833402, 0.2747633571807081, 0.2153339661658874, 0.22761404447114775, 0.2305025900629536, 0.22157638151905446, 0.22688856856366446, 0.19714971371142243, 0.21578318401692453, 0.21233769021514248, 0.21936689141179944, 0.6925247239793222, 0.1878193089432092, 0.20965706635302017, 0.20964046879370402, 0.19076511316383316, 0.2192120575073886, 0.2025579957705529, 0.2289637850900661, 0.1834126306903644, 0.18393010194554804, 0.18390853404087615, 0.8409019193910222, 0.8060300356188095, 0.8161585280124171, 0.8660525970861999, 0.7498598894150248, 0.8466947030086699, 0.7744473512371988, 0.5066842254894763, 0.42289585476208535, 0.5832441950905389, 0.20089269408486377, 0.16556202460163016, 0.2105018066689629, 0.3761911458435, 0.28985406574107375, 0.19253833523364705, 0.1928568091039634, 0.1729606838336516, 0.1878885549093663, 0.18272129286370475, 0.17465956846959563, 0.17862133755135978, 0.2031413660157585, 0.1823630971207112, 0.0859447588286879, 0.08478705204606451, 0.08372882905403278, 0.09682549371732008, 0.10425558942101776, 0.14471364677033183, 0.10467751162555783, 0.08549849274303634, 0.086692791078679]}, "mutation_prompt": null}
{"id": "27d65dc3-2612-409e-8221-e31886cec6c6", "solution": "import numpy as np\n\nclass HybridPSO_GA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.num_particles = 50  # Slightly reduced for more focused search\n        self.w = 0.5  # Increased inertia for better exploration\n        self.c1 = 1.8  # Adaptive cognitive component for dynamic self-awareness\n        self.c2 = 2.0  # Reduced social component for balanced attraction\n        self.mutation_rate = 0.2  # Added mutation rate for genetic crossover\n        self.crossover_rate = 0.7  # Lower crossover rate for selective mutation\n\n    def __call__(self, func):\n        # Initialize particles\n        positions = np.random.uniform(self.lb, self.ub, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-0.2, 0.2, (self.num_particles, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.num_particles, float('inf'))\n        global_best_position = np.zeros(self.dim)\n        global_best_score = float('inf')\n\n        eval_count = 0\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            scores = np.array([func(p) for p in positions])\n            eval_count += self.num_particles\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_scores[better_mask] = scores[better_mask]\n            personal_best_positions[better_mask] = positions[better_mask]\n\n            min_score_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[min_score_idx] < global_best_score:\n                global_best_score = personal_best_scores[min_score_idx]\n                global_best_position = personal_best_positions[min_score_idx]\n\n            # Adaptive cognitive and social components\n            adaptive_c1 = self.c1 * np.exp(-eval_count / (0.5 * self.budget))\n            adaptive_c2 = self.c2 * (1 - np.exp(-eval_count / (0.5 * self.budget)))\n\n            # Update velocities and positions using hybrid PSO-GA update rule\n            r1 = np.random.rand(self.num_particles, self.dim)\n            r2 = np.random.rand(self.num_particles, self.dim)\n            velocities = (self.w * velocities +\n                          adaptive_c1 * r1 * (personal_best_positions - positions) +\n                          adaptive_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.lb, self.ub)\n\n            # Genetic Algorithm operations\n            for i in range(self.num_particles):\n                if np.random.rand() < self.crossover_rate:\n                    idxs = [idx for idx in range(self.num_particles) if idx != i]\n                    partner = positions[np.random.choice(idxs)]\n                    mask = np.random.rand(self.dim) < 0.5\n                    child = np.where(mask, positions[i], partner)\n\n                    if np.random.rand() < self.mutation_rate:\n                        mutation_idx = np.random.randint(self.dim)\n                        mutation_value = np.random.uniform(self.lb, self.ub)\n                        child[mutation_idx] = mutation_value\n\n                    child_score = func(child)\n                    eval_count += 1\n                    if child_score < scores[i]:\n                        positions[i] = child\n                        scores[i] = child_score\n\n                    if eval_count >= self.budget:\n                        break\n\n            # Update global best with the latest evaluations\n            current_best_idx = np.argmin(scores)\n            if scores[current_best_idx] < global_best_score:\n                global_best_score = scores[current_best_idx]\n                global_best_position = positions[current_best_idx]\n\n        return global_best_position", "name": "HybridPSO_GA", "description": "Hybrid PSO-GA Algorithm with Adaptive Cognitive and Mutation Strategies for Enhanced Convergence.", "configspace": "", "generation": 24, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d25d5f1e-cc7d-4d40-8e7f-8285333ebf78", "metadata": {"aucs": [0.8603279696745655, 0.8262594945607524, 0.7478347835751068, 0.8535402677911377, 0.8445610479362768, 0.851177549426325, 0.8455805109691477, 0.8505323899831767, 0.8319260488012523, 0.7190976813395221, 0.478630247774239, 0.6870053843412952, 0.33254824212298395, 0.6626048137170797, 0.7261799005856253, 0.6789408471159499, 0.7067813845660214, 0.7216091077703575, 0.13474580224456545, 0.12921709064042675, 0.25831538943208776, 0.5616425366676595, 0.5469213432216131, 0.16260654740029512, 0.13656877204828322, 0.37149460718407545, 0.16373070355235653, 0.12841194073298523, 0.10055918061198266, 0.1307576826628818, 0.1381263501379988, 0.13094159130283167, 0.15408725963701653, 0.49085125317989087, 0.11854875450821079, 0.1385782587637997, 0.8816161916075317, 0.7986850141820524, 0.6203916946059134, 0.7428746527450987, 0.4772487831681833, 0.8479446649950289, 0.8292754424484935, 0.7999962317352589, 0.8558390131032875, 0.1969599705185927, 0.12771330855869423, 0.15047093789813915, 0.1989835008141202, 0.1416857527431703, 0.18348460089407936, 0.18320813867998187, 0.16325441179211408, 0.19147786950933388, 0.22209546326098784, 0.3414602506570079, 0.22940349669995508, 0.36733003413774046, 0.2707978390610206, 0.2640261404030195, 0.22229152215029757, 0.2220488385013215, 0.30918686572334353, 0.2918515965934029, 0.17094402840777134, 0.13186399866113518, 0.19168213661238542, 0.14422090029521117, 0.41418939674245736, 0.14225793412523413, 0.19953164133681767, 0.2653353422432725, 0.2992817881669012, 0.13561677187405663, 0.16207578382984944, 0.12363940965319054, 0.14203306158513063, 0.13194532787079516, 0.13162049131571762, 0.21585334156951586, 0.13683250863814067, 0.0020409620370839265, 0.005206484492384367, 9.999999999998899e-05, 0.005209685767228245, 0.10156018659578281, 9.999999999998899e-05, 0.11801334918978135, 9.999999999998899e-05, 0.030096095236678777, 0.12400364552553567, 0.12729691611884153, 0.13460268177424173, 0.05956341314565594, 0.10945085252773623, 0.11651827818116822, 0.1307986972210763, 0.16664227914834195, 0.09133475111263256, 0.12147955026307589, 0.06071638839964566, 0.13449849071897002, 0.11882808759619368, 0.13829940110909533, 0.12570118872012737, 0.15593576844198964, 0.25483280573655154, 0.08293816792403141, 0.19335481795964993, 0.4000905940869911, 0.1054619893373252, 0.06909962371112766, 0.09251239689844026, 0.20332633041969816, 0.16161378686232097, 0.1624716460099076, 0.07903236628691612, 0.590033821249873, 0.4304307662827651, 0.49968450317322466, 0.5220559369008834, 0.5216918516366722, 0.5483878369640809, 0.4848152803392838, 0.5094128734593245, 0.5267134333874554, 0.09580442479010509, 0.09279078610560632, 0.12543357259050136, 0.10584924683986041, 0.10840112145341996, 0.11229146340851492, 0.10068786046542644, 0.12249110645315486, 0.6696966974730306, 0.18353551249069655, 0.13904134200303653, 0.17363810868383567, 0.2858290989083999, 0.17999048985590016, 0.28790634938860193, 0.17502678769795288, 0.19301338732816653, 0.16876672736844156, 0.296460327385103, 0.37524129560054387, 0.2741528121575355, 0.24387720120713052, 0.3182518743675148, 0.3272133104185674, 0.23759923962929308, 0.5728405366995344, 0.24837770418055793, 0.21075982175066255, 0.213070846699969, 0.2262123671487719, 0.25521867429967526, 0.21343760878352525, 0.24668615390058057, 0.1922717237040813, 0.23610404387898787, 0.2107896571833402, 0.2747633571807081, 0.2153339661658874, 0.22761404447114775, 0.2305025900629536, 0.22157638151905446, 0.22688856856366446, 0.19714971371142243, 0.21578318401692453, 0.21233769021514248, 0.21936689141179944, 0.6925247239793222, 0.1878193089432092, 0.20965706635302017, 0.20964046879370402, 0.19076511316383316, 0.2192120575073886, 0.2025579957705529, 0.2289637850900661, 0.1834126306903644, 0.18393010194554804, 0.18390853404087615, 0.8409019193910222, 0.8060300356188095, 0.8161585280124171, 0.8660525970861999, 0.7498598894150248, 0.8466947030086699, 0.7744473512371988, 0.5066842254894763, 0.42289585476208535, 0.5832441950905389, 0.20089269408486377, 0.16556202460163016, 0.2105018066689629, 0.3761911458435, 0.28985406574107375, 0.19253833523364705, 0.1928568091039634, 0.1729606838336516, 0.1878885549093663, 0.18272129286370475, 0.17465956846959563, 0.17862133755135978, 0.2031413660157585, 0.1823630971207112, 0.0859447588286879, 0.08478705204606451, 0.08372882905403278, 0.09682549371732008, 0.10425558942101776, 0.14471364677033183, 0.10467751162555783, 0.08549849274303634, 0.086692791078679]}, "mutation_prompt": null}
{"id": "0b13fe83-9f7e-4b47-93c1-473085ad11af", "solution": "import numpy as np\n\nclass HybridPSO_GA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.num_particles = 50  # Slightly reduced for more focused search\n        self.w = 0.5  # Increased inertia for better exploration\n        self.c1 = 1.8  # Adaptive cognitive component for dynamic self-awareness\n        self.c2 = 2.0  # Reduced social component for balanced attraction\n        self.mutation_rate = 0.2  # Added mutation rate for genetic crossover\n        self.crossover_rate = 0.7  # Lower crossover rate for selective mutation\n\n    def __call__(self, func):\n        # Initialize particles\n        positions = np.random.uniform(self.lb, self.ub, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-0.2, 0.2, (self.num_particles, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.num_particles, float('inf'))\n        global_best_position = np.zeros(self.dim)\n        global_best_score = float('inf')\n\n        eval_count = 0\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            scores = np.array([func(p) for p in positions])\n            eval_count += self.num_particles\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_scores[better_mask] = scores[better_mask]\n            personal_best_positions[better_mask] = positions[better_mask]\n\n            min_score_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[min_score_idx] < global_best_score:\n                global_best_score = personal_best_scores[min_score_idx]\n                global_best_position = personal_best_positions[min_score_idx]\n\n            # Adaptive cognitive and social components\n            adaptive_c1 = self.c1 * np.exp(-eval_count / (0.5 * self.budget))\n            adaptive_c2 = self.c2 * (1 - np.exp(-eval_count / (0.5 * self.budget)))\n\n            # Update velocities and positions using hybrid PSO-GA update rule\n            r1 = np.random.rand(self.num_particles, self.dim)\n            r2 = np.random.rand(self.num_particles, self.dim)\n            velocities = (self.w * velocities +\n                          adaptive_c1 * r1 * (personal_best_positions - positions) +\n                          adaptive_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.lb, self.ub)\n\n            # Genetic Algorithm operations\n            for i in range(self.num_particles):\n                if np.random.rand() < self.crossover_rate:\n                    idxs = [idx for idx in range(self.num_particles) if idx != i]\n                    partner = positions[np.random.choice(idxs)]\n                    mask = np.random.rand(self.dim) < 0.5\n                    child = np.where(mask, positions[i], partner)\n\n                    if np.random.rand() < self.mutation_rate:\n                        mutation_idx = np.random.randint(self.dim)\n                        mutation_value = np.random.uniform(self.lb, self.ub)\n                        child[mutation_idx] = mutation_value\n\n                    child_score = func(child)\n                    eval_count += 1\n                    if child_score < scores[i]:\n                        positions[i] = child\n                        scores[i] = child_score\n\n                    if eval_count >= self.budget:\n                        break\n\n            # Update global best with the latest evaluations\n            current_best_idx = np.argmin(scores)\n            if scores[current_best_idx] < global_best_score:\n                global_best_score = scores[current_best_idx]\n                global_best_position = positions[current_best_idx]\n\n        return global_best_position", "name": "HybridPSO_GA", "description": "Hybrid PSO-GA Algorithm with Adaptive Cognitive and Mutation Strategies for Enhanced Convergence.", "configspace": "", "generation": 24, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d25d5f1e-cc7d-4d40-8e7f-8285333ebf78", "metadata": {"aucs": [0.8603279696745655, 0.8262594945607524, 0.7478347835751068, 0.8535402677911377, 0.8445610479362768, 0.851177549426325, 0.8455805109691477, 0.8505323899831767, 0.8319260488012523, 0.7190976813395221, 0.478630247774239, 0.6870053843412952, 0.33254824212298395, 0.6626048137170797, 0.7261799005856253, 0.6789408471159499, 0.7067813845660214, 0.7216091077703575, 0.13474580224456545, 0.12921709064042675, 0.25831538943208776, 0.5616425366676595, 0.5469213432216131, 0.16260654740029512, 0.13656877204828322, 0.37149460718407545, 0.16373070355235653, 0.12841194073298523, 0.10055918061198266, 0.1307576826628818, 0.1381263501379988, 0.13094159130283167, 0.15408725963701653, 0.49085125317989087, 0.11854875450821079, 0.1385782587637997, 0.8816161916075317, 0.7986850141820524, 0.6203916946059134, 0.7428746527450987, 0.4772487831681833, 0.8479446649950289, 0.8292754424484935, 0.7999962317352589, 0.8558390131032875, 0.1969599705185927, 0.12771330855869423, 0.15047093789813915, 0.1989835008141202, 0.1416857527431703, 0.18348460089407936, 0.18320813867998187, 0.16325441179211408, 0.19147786950933388, 0.22209546326098784, 0.3414602506570079, 0.22940349669995508, 0.36733003413774046, 0.2707978390610206, 0.2640261404030195, 0.22229152215029757, 0.2220488385013215, 0.30918686572334353, 0.2918515965934029, 0.17094402840777134, 0.13186399866113518, 0.19168213661238542, 0.14422090029521117, 0.41418939674245736, 0.14225793412523413, 0.19953164133681767, 0.2653353422432725, 0.2992817881669012, 0.13561677187405663, 0.16207578382984944, 0.12363940965319054, 0.14203306158513063, 0.13194532787079516, 0.13162049131571762, 0.21585334156951586, 0.13683250863814067, 0.0020409620370839265, 0.005206484492384367, 9.999999999998899e-05, 0.005209685767228245, 0.10156018659578281, 9.999999999998899e-05, 0.11801334918978135, 9.999999999998899e-05, 0.030096095236678777, 0.12400364552553567, 0.12729691611884153, 0.13460268177424173, 0.05956341314565594, 0.10945085252773623, 0.11651827818116822, 0.1307986972210763, 0.16664227914834195, 0.09133475111263256, 0.12147955026307589, 0.06071638839964566, 0.13449849071897002, 0.11882808759619368, 0.13829940110909533, 0.12570118872012737, 0.15593576844198964, 0.25483280573655154, 0.08293816792403141, 0.19335481795964993, 0.4000905940869911, 0.1054619893373252, 0.06909962371112766, 0.09251239689844026, 0.20332633041969816, 0.16161378686232097, 0.1624716460099076, 0.07903236628691612, 0.590033821249873, 0.4304307662827651, 0.49968450317322466, 0.5220559369008834, 0.5216918516366722, 0.5483878369640809, 0.4848152803392838, 0.5094128734593245, 0.5267134333874554, 0.09580442479010509, 0.09279078610560632, 0.12543357259050136, 0.10584924683986041, 0.10840112145341996, 0.11229146340851492, 0.10068786046542644, 0.12249110645315486, 0.6696966974730306, 0.18353551249069655, 0.13904134200303653, 0.17363810868383567, 0.2858290989083999, 0.17999048985590016, 0.28790634938860193, 0.17502678769795288, 0.19301338732816653, 0.16876672736844156, 0.296460327385103, 0.37524129560054387, 0.2741528121575355, 0.24387720120713052, 0.3182518743675148, 0.3272133104185674, 0.23759923962929308, 0.5728405366995344, 0.24837770418055793, 0.21075982175066255, 0.213070846699969, 0.2262123671487719, 0.25521867429967526, 0.21343760878352525, 0.24668615390058057, 0.1922717237040813, 0.23610404387898787, 0.2107896571833402, 0.2747633571807081, 0.2153339661658874, 0.22761404447114775, 0.2305025900629536, 0.22157638151905446, 0.22688856856366446, 0.19714971371142243, 0.21578318401692453, 0.21233769021514248, 0.21936689141179944, 0.6925247239793222, 0.1878193089432092, 0.20965706635302017, 0.20964046879370402, 0.19076511316383316, 0.2192120575073886, 0.2025579957705529, 0.2289637850900661, 0.1834126306903644, 0.18393010194554804, 0.18390853404087615, 0.8409019193910222, 0.8060300356188095, 0.8161585280124171, 0.8660525970861999, 0.7498598894150248, 0.8466947030086699, 0.7744473512371988, 0.5066842254894763, 0.42289585476208535, 0.5832441950905389, 0.20089269408486377, 0.16556202460163016, 0.2105018066689629, 0.3761911458435, 0.28985406574107375, 0.19253833523364705, 0.1928568091039634, 0.1729606838336516, 0.1878885549093663, 0.18272129286370475, 0.17465956846959563, 0.17862133755135978, 0.2031413660157585, 0.1823630971207112, 0.0859447588286879, 0.08478705204606451, 0.08372882905403278, 0.09682549371732008, 0.10425558942101776, 0.14471364677033183, 0.10467751162555783, 0.08549849274303634, 0.086692791078679]}, "mutation_prompt": null}
{"id": "ef0d85fa-35fb-45af-bcd6-66ab7e334d11", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_GA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.init_particles = 60  # Increased initial swarm size for better exploration\n        self.final_particles = 20  # Reduced final swarm size for focused exploitation\n        self.w = 0.4  # Lower inertia for faster convergence\n        self.c1 = 2.0  # Increased cognitive component for more personal best emphasis\n        self.c2 = 1.5  # Reduced social component for less global influence\n        self.mutation_rate = 0.1  # Reduced mutation rate for more stable exploitation\n        self.crossover_rate = 0.6  # Slightly lower crossover rate\n\n    def __call__(self, func):\n        # Linearly reduce swarm size over time\n        num_particles = self.init_particles\n        positions = np.random.uniform(self.lb, self.ub, (num_particles, self.dim))\n        velocities = np.random.uniform(-0.2, 0.2, (num_particles, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(num_particles, float('inf'))\n        global_best_position = np.zeros(self.dim)\n        global_best_score = float('inf')\n\n        eval_count = 0\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            scores = np.array([func(p) for p in positions])\n            eval_count += num_particles\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_scores[better_mask] = scores[better_mask]\n            personal_best_positions[better_mask] = positions[better_mask]\n\n            min_score_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[min_score_idx] < global_best_score:\n                global_best_score = personal_best_scores[min_score_idx]\n                global_best_position = personal_best_positions[min_score_idx]\n\n            # Adaptive cognitive and social components\n            adaptive_c1 = self.c1 * np.exp(-eval_count / (0.5 * self.budget))\n            adaptive_c2 = self.c2 * (1 - np.exp(-eval_count / (0.5 * self.budget)))\n\n            # Update velocities and positions\n            r1 = np.random.rand(num_particles, self.dim)\n            r2 = np.random.rand(num_particles, self.dim)\n            velocities = (self.w * velocities +\n                          adaptive_c1 * r1 * (personal_best_positions - positions) +\n                          adaptive_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.lb, self.ub)\n\n            # Genetic Algorithm operations\n            for i in range(num_particles):\n                if np.random.rand() < self.crossover_rate:\n                    partner_idx = (i + np.random.randint(1, num_particles)) % num_particles\n                    partner = positions[partner_idx]\n                    mask = np.random.rand(self.dim) < 0.5\n                    child = np.where(mask, positions[i], partner)\n\n                    if np.random.rand() < self.mutation_rate:\n                        mutation_idx = np.random.randint(self.dim)\n                        mutation_value = np.random.uniform(self.lb, self.ub)\n                        child[mutation_idx] = mutation_value\n\n                    child_score = func(child)\n                    eval_count += 1\n                    if child_score < scores[i]:\n                        positions[i] = child\n                        scores[i] = child_score\n\n                    if eval_count >= self.budget:\n                        break\n\n            # Update global best with the latest evaluations\n            current_best_idx = np.argmin(scores)\n            if scores[current_best_idx] < global_best_score:\n                global_best_score = scores[current_best_idx]\n                global_best_position = positions[current_best_idx]\n\n            # Adjust swarm size\n            num_particles = int(self.init_particles - (self.init_particles - self.final_particles) * (eval_count / self.budget))\n            if num_particles < len(positions):\n                positions = positions[:num_particles]\n                velocities = velocities[:num_particles]\n                personal_best_positions = personal_best_positions[:num_particles]\n                personal_best_scores = personal_best_scores[:num_particles]\n\n        return global_best_position", "name": "EnhancedHybridPSO_GA", "description": "Enhanced Hybrid PSO-GA with Dynamic Swarm Size and Adaptive Mutation for Faster Convergence.", "configspace": "", "generation": 26, "fitness": 0.22586841235262714, "feedback": "The algorithm EnhancedHybridPSO_GA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.16.", "error": "", "parent_id": "d25d5f1e-cc7d-4d40-8e7f-8285333ebf78", "metadata": {"aucs": [0.76537341338454, 0.368048822395463, 0.849603566251937, 0.8359353305997843, 0.4522571842244367, 0.8429215931743284, 0.8315934222674138, 0.839730342512693, 0.617083788113528, 9.999999999998899e-05, 0.35119068144706367, 0.17083524712926723, 0.18186678411892365, 0.16148300508427238, 0.17345705867851302, 0.11343148291758676, 0.19579526055338836, 0.13764637184382467, 0.14044610230014787, 0.1570062661897067, 0.16821250395550746, 0.14581729782763142, 0.14803075419938727, 0.3529450648940816, 0.16761126408046345, 0.17243416940603273, 0.583604931868718, 0.13753149974533718, 0.1235522000246907, 0.10428524408403372, 0.1186415242295743, 0.11167336560061081, 0.16363162209107174, 0.1255161129595166, 0.12881506619372118, 0.13104203825446226, 0.1700096556221009, 0.17435594511343389, 0.21229774119881073, 0.1763512305270868, 0.1541315273641196, 0.13288679880446452, 0.17600491566166587, 0.16074959851350068, 0.14644290100215063, 0.1466388657755846, 0.10989737607243966, 0.16809175643219876, 0.21694762763000708, 0.1163473014913099, 0.1503209431810164, 0.10671756489715822, 0.0964541857930189, 0.23271170768780847, 0.36990855712832094, 0.331149015903233, 0.3144266031580457, 0.3201172031673235, 0.2656573224379565, 0.262217621774554, 0.16761552223854093, 0.22660999687257521, 0.2122766529223411, 0.10796208691686116, 0.09504404018151358, 0.1553550745521638, 0.17590988693602683, 0.22585824901471896, 0.1502910478373567, 0.1308296333283976, 0.23971886745515314, 0.12738884753568436, 0.15744033613389274, 0.11973808658612484, 0.14661124538671377, 0.1283714209611997, 0.11665097845587791, 0.12806853622871295, 0.12356195373575285, 0.12339374812022885, 0.12992740282043758, 0.03773875378713398, 9.999999999998899e-05, 9.999999999998899e-05, 0.08232270870491831, 0.03385507464005155, 0.07478762981800113, 0.05669667394825484, 9.999999999998899e-05, 0.053538893084537076, 0.2305818058092174, 0.06562809074749187, 0.13556306799908668, 0.07686862642897141, 0.0801657539023195, 0.07315453469614874, 0.15888512543070432, 0.1277358048034497, 0.11112885847165721, 0.17396051224864262, 0.003062392124550173, 0.18404279830290315, 0.12963435127071898, 0.5196210972655171, 0.20297408575952125, 0.20759108595774778, 0.17679152400646725, 0.12203894406977056, 0.14303641068167383, 0.1729620609674717, 0.038673445895035186, 0.07356571923273836, 0.0746283767338175, 0.1595907055674941, 0.16912692288413145, 0.22183201376232087, 0.11900658756962035, 0.3580956956001392, 0.3998857762408885, 0.39887100422207633, 0.5485419267009883, 0.43335632507459554, 0.4370297639753894, 0.4548641372369342, 0.4046145458171999, 0.35571896066597986, 0.1321832571318009, 0.16609928287043185, 0.13681229053331612, 0.12834515249276934, 0.08626473978306581, 0.12092818820158335, 0.12925616030950937, 0.13545002096166248, 0.10912802738723126, 0.19941462362799922, 0.19538152848180812, 0.13521883506088728, 0.16510706368663086, 0.15503656677342792, 0.1456765010303841, 0.24303883634032442, 0.14566347206285157, 0.2513379059576162, 0.3443237691568778, 0.29937996710054227, 0.2632336547242884, 0.37921946004828944, 0.33647076103455165, 0.4723253842388645, 0.4352102683286685, 0.48937807814972056, 0.23159777037072327, 0.2720197588416363, 0.23622923435631726, 0.19650634467546435, 0.266997130414672, 0.20108854392593867, 0.2757872344331086, 0.2302654800806231, 0.34535716027611063, 0.22574583780440083, 0.2072988239864919, 0.19584200437174992, 0.25066677989221386, 0.21970055112339038, 0.19181250753277346, 0.20491498941147535, 0.22599671097431406, 0.20280464499000028, 0.23909859370998687, 0.24047265084481984, 0.19382274047344827, 0.21585437413382347, 0.204187370288606, 0.24755224114450225, 0.19468340896702985, 0.20711837508800912, 0.6276029544460912, 0.17634974396116398, 0.17730866129435763, 0.18167681426110216, 0.18216394393237922, 0.5126413065648476, 0.5269486561410699, 0.4832046758763673, 0.6769985459626395, 0.4719773236554935, 0.7009354123657473, 0.37694904241769667, 0.38661990149069014, 0.3340444822698714, 0.4351304059374568, 0.20386554559998427, 0.20662272113607194, 0.1605053608811482, 0.35129726390433413, 0.3752841445117565, 0.18719298228078296, 0.1709834015101266, 0.17222505711534652, 0.17951138765281305, 0.17756153975999422, 0.18299936276080797, 0.1761758732766926, 0.1962974176595188, 0.1958516004535814, 0.08910984239394659, 0.09236127018045248, 0.09591920589507175, 0.09110628650657704, 0.10529308237891821, 0.0831393619562808, 0.08738435303885639, 0.08419922191410989, 0.09815732197106575]}, "mutation_prompt": null}
{"id": "79ea4548-d71d-4a26-96af-20bb47a0b2d7", "solution": "import numpy as np\n\nclass HybridPSO_GA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.num_particles = 50  # Slightly reduced for more focused search\n        self.w = 0.5  # Increased inertia for better exploration\n        self.c1 = 1.8  # Adaptive cognitive component for dynamic self-awareness\n        self.c2 = 2.0  # Reduced social component for balanced attraction\n        self.mutation_rate = 0.2  # Added mutation rate for genetic crossover\n        self.crossover_rate = 0.7  # Lower crossover rate for selective mutation\n\n    def __call__(self, func):\n        # Initialize particles\n        positions = np.random.uniform(self.lb, self.ub, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-0.2, 0.2, (self.num_particles, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.num_particles, float('inf'))\n        global_best_position = np.zeros(self.dim)\n        global_best_score = float('inf')\n\n        eval_count = 0\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            scores = np.array([func(p) for p in positions])\n            eval_count += self.num_particles\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_scores[better_mask] = scores[better_mask]\n            personal_best_positions[better_mask] = positions[better_mask]\n\n            min_score_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[min_score_idx] < global_best_score:\n                global_best_score = personal_best_scores[min_score_idx]\n                global_best_position = personal_best_positions[min_score_idx]\n\n            # Adaptive cognitive and social components\n            adaptive_c1 = self.c1 * np.exp(-eval_count / (0.5 * self.budget))\n            adaptive_c2 = self.c2 * (1 - np.exp(-eval_count / (0.5 * self.budget)))\n\n            # Update velocities and positions using hybrid PSO-GA update rule\n            r1 = np.random.rand(self.num_particles, self.dim)\n            r2 = np.random.rand(self.num_particles, self.dim)\n            velocities = (self.w * velocities +\n                          adaptive_c1 * r1 * (personal_best_positions - positions) +\n                          adaptive_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.lb, self.ub)\n\n            # Genetic Algorithm operations\n            for i in range(self.num_particles):\n                if np.random.rand() < self.crossover_rate:\n                    idxs = [idx for idx in range(self.num_particles) if idx != i]\n                    partner = positions[np.random.choice(idxs)]\n                    mask = np.random.rand(self.dim) < 0.5\n                    child = np.where(mask, positions[i], partner)\n\n                    if np.random.rand() < self.mutation_rate:\n                        mutation_idx = np.random.randint(self.dim)\n                        mutation_value = np.random.uniform(self.lb, self.ub)\n                        child[mutation_idx] = mutation_value\n\n                    child_score = func(child)\n                    eval_count += 1\n                    if child_score < scores[i]:\n                        positions[i] = child\n                        scores[i] = child_score\n\n                    if eval_count >= self.budget:\n                        break\n\n            # Update global best with the latest evaluations\n            current_best_idx = np.argmin(scores)\n            if scores[current_best_idx] < global_best_score:\n                global_best_score = scores[current_best_idx]\n                global_best_position = positions[current_best_idx]\n\n        return global_best_position", "name": "HybridPSO_GA", "description": "Hybrid PSO-GA Algorithm with Adaptive Cognitive and Mutation Strategies for Enhanced Convergence.", "configspace": "", "generation": 24, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d25d5f1e-cc7d-4d40-8e7f-8285333ebf78", "metadata": {"aucs": [0.8603279696745655, 0.8262594945607524, 0.7478347835751068, 0.8535402677911377, 0.8445610479362768, 0.851177549426325, 0.8455805109691477, 0.8505323899831767, 0.8319260488012523, 0.7190976813395221, 0.478630247774239, 0.6870053843412952, 0.33254824212298395, 0.6626048137170797, 0.7261799005856253, 0.6789408471159499, 0.7067813845660214, 0.7216091077703575, 0.13474580224456545, 0.12921709064042675, 0.25831538943208776, 0.5616425366676595, 0.5469213432216131, 0.16260654740029512, 0.13656877204828322, 0.37149460718407545, 0.16373070355235653, 0.12841194073298523, 0.10055918061198266, 0.1307576826628818, 0.1381263501379988, 0.13094159130283167, 0.15408725963701653, 0.49085125317989087, 0.11854875450821079, 0.1385782587637997, 0.8816161916075317, 0.7986850141820524, 0.6203916946059134, 0.7428746527450987, 0.4772487831681833, 0.8479446649950289, 0.8292754424484935, 0.7999962317352589, 0.8558390131032875, 0.1969599705185927, 0.12771330855869423, 0.15047093789813915, 0.1989835008141202, 0.1416857527431703, 0.18348460089407936, 0.18320813867998187, 0.16325441179211408, 0.19147786950933388, 0.22209546326098784, 0.3414602506570079, 0.22940349669995508, 0.36733003413774046, 0.2707978390610206, 0.2640261404030195, 0.22229152215029757, 0.2220488385013215, 0.30918686572334353, 0.2918515965934029, 0.17094402840777134, 0.13186399866113518, 0.19168213661238542, 0.14422090029521117, 0.41418939674245736, 0.14225793412523413, 0.19953164133681767, 0.2653353422432725, 0.2992817881669012, 0.13561677187405663, 0.16207578382984944, 0.12363940965319054, 0.14203306158513063, 0.13194532787079516, 0.13162049131571762, 0.21585334156951586, 0.13683250863814067, 0.0020409620370839265, 0.005206484492384367, 9.999999999998899e-05, 0.005209685767228245, 0.10156018659578281, 9.999999999998899e-05, 0.11801334918978135, 9.999999999998899e-05, 0.030096095236678777, 0.12400364552553567, 0.12729691611884153, 0.13460268177424173, 0.05956341314565594, 0.10945085252773623, 0.11651827818116822, 0.1307986972210763, 0.16664227914834195, 0.09133475111263256, 0.12147955026307589, 0.06071638839964566, 0.13449849071897002, 0.11882808759619368, 0.13829940110909533, 0.12570118872012737, 0.15593576844198964, 0.25483280573655154, 0.08293816792403141, 0.19335481795964993, 0.4000905940869911, 0.1054619893373252, 0.06909962371112766, 0.09251239689844026, 0.20332633041969816, 0.16161378686232097, 0.1624716460099076, 0.07903236628691612, 0.590033821249873, 0.4304307662827651, 0.49968450317322466, 0.5220559369008834, 0.5216918516366722, 0.5483878369640809, 0.4848152803392838, 0.5094128734593245, 0.5267134333874554, 0.09580442479010509, 0.09279078610560632, 0.12543357259050136, 0.10584924683986041, 0.10840112145341996, 0.11229146340851492, 0.10068786046542644, 0.12249110645315486, 0.6696966974730306, 0.18353551249069655, 0.13904134200303653, 0.17363810868383567, 0.2858290989083999, 0.17999048985590016, 0.28790634938860193, 0.17502678769795288, 0.19301338732816653, 0.16876672736844156, 0.296460327385103, 0.37524129560054387, 0.2741528121575355, 0.24387720120713052, 0.3182518743675148, 0.3272133104185674, 0.23759923962929308, 0.5728405366995344, 0.24837770418055793, 0.21075982175066255, 0.213070846699969, 0.2262123671487719, 0.25521867429967526, 0.21343760878352525, 0.24668615390058057, 0.1922717237040813, 0.23610404387898787, 0.2107896571833402, 0.2747633571807081, 0.2153339661658874, 0.22761404447114775, 0.2305025900629536, 0.22157638151905446, 0.22688856856366446, 0.19714971371142243, 0.21578318401692453, 0.21233769021514248, 0.21936689141179944, 0.6925247239793222, 0.1878193089432092, 0.20965706635302017, 0.20964046879370402, 0.19076511316383316, 0.2192120575073886, 0.2025579957705529, 0.2289637850900661, 0.1834126306903644, 0.18393010194554804, 0.18390853404087615, 0.8409019193910222, 0.8060300356188095, 0.8161585280124171, 0.8660525970861999, 0.7498598894150248, 0.8466947030086699, 0.7744473512371988, 0.5066842254894763, 0.42289585476208535, 0.5832441950905389, 0.20089269408486377, 0.16556202460163016, 0.2105018066689629, 0.3761911458435, 0.28985406574107375, 0.19253833523364705, 0.1928568091039634, 0.1729606838336516, 0.1878885549093663, 0.18272129286370475, 0.17465956846959563, 0.17862133755135978, 0.2031413660157585, 0.1823630971207112, 0.0859447588286879, 0.08478705204606451, 0.08372882905403278, 0.09682549371732008, 0.10425558942101776, 0.14471364677033183, 0.10467751162555783, 0.08549849274303634, 0.086692791078679]}, "mutation_prompt": null}
{"id": "71679915-b7d2-4246-a9b8-9b30791aa78f", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_GA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.num_particles = 40  # Reduced to focus on promising areas\n        self.w = 0.6  # Adjusted inertia for balance between exploration and exploitation\n        self.c1 = 1.5  # Adaptive cognitive component\n        self.c2 = 2.2  # Increased social component to enhance attraction to global best\n        self.mutation_rate = 0.25  # Increased mutation rate for diversity\n        self.crossover_rate = 0.6  # Adjusted crossover rate for improved exploitation\n\n    def __call__(self, func):\n        # Initialize particles\n        positions = np.random.uniform(self.lb, self.ub, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.num_particles, float('inf'))\n        global_best_position = np.zeros(self.dim)\n        global_best_score = float('inf')\n\n        eval_count = 0\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            scores = np.array([func(p) for p in positions])\n            eval_count += self.num_particles\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_scores[better_mask] = scores[better_mask]\n            personal_best_positions[better_mask] = positions[better_mask]\n\n            min_score_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[min_score_idx] < global_best_score:\n                global_best_score = personal_best_scores[min_score_idx]\n                global_best_position = personal_best_positions[min_score_idx]\n\n            # Adaptive cognitive and social components\n            adaptive_c1 = self.c1 * np.exp(-eval_count / (0.4 * self.budget))\n            adaptive_c2 = self.c2 * (1 - np.exp(-eval_count / (0.4 * self.budget)))\n\n            # Update velocities and positions using hybrid PSO-GA update rule\n            r1 = np.random.rand(self.num_particles, self.dim)\n            r2 = np.random.rand(self.num_particles, self.dim)\n            velocities = (self.w * velocities +\n                          adaptive_c1 * r1 * (personal_best_positions - positions) +\n                          adaptive_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.lb, self.ub)\n\n            # Genetic Algorithm operations\n            for i in range(self.num_particles):\n                if np.random.rand() < self.crossover_rate:\n                    idxs = [idx for idx in range(self.num_particles) if idx != i]\n                    partner = positions[np.random.choice(idxs)]\n                    mask = np.random.rand(self.dim) < 0.5\n                    child = np.where(mask, positions[i], partner)\n\n                    if np.random.rand() < self.mutation_rate:\n                        mutation_idx = np.random.randint(self.dim)\n                        mutation_value = np.random.uniform(self.lb, self.ub)\n                        child[mutation_idx] = mutation_value\n\n                    child_score = func(child)\n                    eval_count += 1\n                    if child_score < scores[i]:\n                        positions[i] = child\n                        scores[i] = child_score\n\n                    if eval_count >= self.budget:\n                        break\n\n            # Update global best with the latest evaluations\n            current_best_idx = np.argmin(scores)\n            if scores[current_best_idx] < global_best_score:\n                global_best_score = scores[current_best_idx]\n                global_best_position = positions[current_best_idx]\n\n        return global_best_position", "name": "EnhancedHybridPSO_GA", "description": "Enhanced Hybrid PSO-GA with Dynamic Population Refinement and Targeted Mutation for Accelerated Convergence.", "configspace": "", "generation": 28, "fitness": 0.3103820818275285, "feedback": "The algorithm EnhancedHybridPSO_GA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.25.", "error": "", "parent_id": "d25d5f1e-cc7d-4d40-8e7f-8285333ebf78", "metadata": {"aucs": [0.8709116999593831, 0.8723138723777221, 0.8768372615335654, 0.8617868929087722, 0.8732786663332638, 0.8700165787014595, 0.7565562986219209, 0.868539258880491, 0.8709766980904352, 0.7164359951709853, 0.7048047712591957, 0.4776950380186241, 0.3855705320648811, 0.6623877477389744, 0.7604071468026499, 0.2925765172942847, 0.6462031836272428, 0.19553392270172443, 0.17303437138306488, 0.2311803368732268, 0.13147514920023173, 0.14639486955092984, 0.35218672427787756, 0.35487832224036875, 0.14866342766770446, 0.32622137780232907, 0.17580831107043648, 0.1364785949220515, 0.13723180340024177, 0.1415672077043013, 0.1034515896336532, 0.18768357811791359, 0.11499926313848663, 0.14052555748747397, 0.1397271088896036, 0.14224280497807062, 0.8572855482713462, 0.8816167955365596, 0.8719308246693213, 0.9193998394786392, 0.914420324363186, 0.868569508913773, 0.9178142773244033, 0.8901375456634961, 0.9104234556450416, 0.44374478233240466, 0.7135385169264723, 0.28224185632107246, 0.6757261041085597, 0.5347767213601308, 0.6924610301299955, 0.2150090318021105, 0.5979667369466203, 0.46334160313151795, 0.3816440509835938, 0.8871688407181226, 0.2215335955350327, 0.2782753108644027, 0.20804701301111983, 0.21414455095505636, 0.17006784993710677, 0.14936435372393353, 0.8927547238016643, 0.12598746301048813, 0.27674670478297914, 0.13402205898302322, 0.1989156862933854, 0.1637406030113836, 0.15700652057774145, 0.3784850467672597, 0.20359559468799404, 0.15199652764569382, 0.19805528150264373, 0.12909579769588853, 0.20974198883930295, 0.13618812474127684, 0.1676843122643138, 0.21199600895034987, 0.1806227083724674, 0.18720342152943903, 0.14286907178205843, 0.011209799583482005, 0.05529339075019002, 9.999999999998899e-05, 0.10832408699422724, 0.04279531077019072, 9.999999999998899e-05, 0.05451701182477431, 0.06287221396818243, 0.011708930366438275, 0.11851476671790695, 0.13042357546193484, 0.08751705868258464, 0.0737520182321394, 0.0674670842998144, 0.07040643281963133, 0.12270959020209427, 0.1635158390187902, 0.11337901101866699, 9.999999999998899e-05, 0.12060053095909329, 0.15135623777850848, 0.1888409906988574, 0.21600226247055165, 0.12214764580372828, 0.1405721141220454, 0.23155685722371033, 0.2630130022138708, 0.1288308910254673, 0.34621738907919575, 0.27668944855796795, 0.07016384558757949, 0.11322576437915599, 0.07104408037199961, 0.20232014360368966, 0.17029684759892205, 0.1043090462902142, 0.5275849797575713, 0.4916609332810673, 0.5484482146725321, 0.6025381266452674, 0.5669340898622877, 0.540035744668264, 0.5335086626702187, 0.5645246800771313, 0.5675543526425648, 0.10220124270145459, 0.17235856712732534, 0.09015062051346068, 0.14918869038205118, 0.14833937478444825, 0.1265665437173411, 0.13741787062809396, 0.10950728317396385, 0.10727360923944129, 0.1522830180351078, 0.19161055363162882, 0.22403061555925252, 0.19664252516112934, 0.19353340288045007, 0.2143631657275058, 0.22899864457304753, 0.20507301754383522, 0.16376887897753145, 0.25889297875502104, 0.30324011541506257, 0.20595125965070904, 0.273450660627921, 0.5507256147127081, 0.33491973351863924, 0.2679250418098513, 0.2868145497806951, 0.5045353871494462, 0.2422052565907501, 0.27251688689126796, 0.22336131551185512, 0.2281901599841637, 0.1532587735635741, 0.23681089449201387, 0.17474848273382282, 0.28874861636043514, 0.26641830685633283, 0.2296548129849213, 0.22112564705591653, 0.4116295558833244, 0.27429704557205437, 0.25393708255507086, 0.20692391605978377, 0.2326379270132466, 0.19551239397576992, 0.2154097795892288, 0.22901002088179723, 0.18804644526911107, 0.18831793637834637, 0.19084701804057014, 0.2870924905379486, 0.19422011941911022, 0.1967708819138012, 0.22007520569987904, 0.20426687081246941, 0.17535235983947695, 0.1956085758016729, 0.18513856718686927, 0.853351435696617, 0.3560060671921448, 0.8757283763917089, 0.8553559198811277, 0.16919964030308454, 0.13442874366711544, 0.5821816685326726, 0.719751672453101, 0.46208413758601397, 0.7491859575447042, 0.20931336361852104, 0.20509540991197794, 0.3883684528344128, 0.499071632722356, 0.3318319362175811, 0.19639170561099495, 0.19765120753207144, 0.1974169342458848, 0.20355066541306377, 0.17175700260853521, 0.17872396251533595, 0.18059120011176089, 0.17875517461522827, 0.196857160154308, 0.1007064099381123, 0.0992299406111311, 0.09211341496887471, 0.08741383495575883, 0.07795395188648158, 0.15317868552169456, 0.07059919688751182, 0.08629132951339868, 0.0918739748027434]}, "mutation_prompt": null}
{"id": "5669ae7c-5cd9-4936-863d-cefbaa9afc42", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_GA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.num_particles = 40\n        self.w = 0.6\n        self.c1 = 1.8  # Slightly increased cognitive component for enhanced exploration\n        self.c2 = 2.0  # Slightly reduced social component to maintain balance\n        self.mutation_rate = 0.3  # Further increased mutation rate for higher diversity\n        self.crossover_rate = 0.7  # Further increased crossover rate for improved exploration\n        self.w_min = 0.3  # New parameter for dynamic inertia adjustment\n        self.w_max = 0.9  # New parameter for dynamic inertia adjustment\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lb, self.ub, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.num_particles, float('inf'))\n        global_best_position = np.zeros(self.dim)\n        global_best_score = float('inf')\n\n        secondary_best_position = np.zeros(self.dim)  # New secondary elite solution\n        secondary_best_score = float('inf')\n\n        eval_count = 0\n\n        while eval_count < self.budget:\n            scores = np.array([func(p) for p in positions])\n            eval_count += self.num_particles\n\n            better_mask = scores < personal_best_scores\n            personal_best_scores[better_mask] = scores[better_mask]\n            personal_best_positions[better_mask] = positions[better_mask]\n\n            min_score_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[min_score_idx] < global_best_score:\n                global_best_score = personal_best_scores[min_score_idx]\n                global_best_position = personal_best_positions[min_score_idx]\n\n            # Update secondary best\n            if personal_best_scores[min_score_idx] > global_best_score and personal_best_scores[min_score_idx] < secondary_best_score:\n                secondary_best_score = personal_best_scores[min_score_idx]\n                secondary_best_position = personal_best_positions[min_score_idx]\n\n            adaptive_c1 = self.c1 * np.exp(-eval_count / (0.3 * self.budget))\n            adaptive_c2 = self.c2 * (1 - np.exp(-eval_count / (0.3 * self.budget)))\n\n            # Dynamic inertia adjustment\n            self.w = self.w_min + (self.w_max - self.w_min) * (1 - eval_count / self.budget)\n\n            r1 = np.random.rand(self.num_particles, self.dim)\n            r2 = np.random.rand(self.num_particles, self.dim)\n            velocities = (self.w * velocities +\n                          adaptive_c1 * r1 * (personal_best_positions - positions) +\n                          adaptive_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.lb, self.ub)\n\n            for i in range(self.num_particles):\n                if np.random.rand() < self.crossover_rate:\n                    idxs = [idx for idx in range(self.num_particles) if idx != i]\n                    partner = positions[np.random.choice(idxs)]\n                    mask = np.random.rand(self.dim) < 0.5\n                    child = np.where(mask, positions[i], partner)\n\n                    if np.random.rand() < self.mutation_rate:\n                        mutation_idx = np.random.randint(self.dim)\n                        mutation_value = np.random.uniform(self.lb, self.ub)\n                        child[mutation_idx] = mutation_value\n\n                    child_score = func(child)\n                    eval_count += 1\n                    if child_score < scores[i]:\n                        positions[i] = child\n                        scores[i] = child_score\n\n                    if eval_count >= self.budget:\n                        break\n\n            current_best_idx = np.argmin(scores)\n            if scores[current_best_idx] < global_best_score:\n                global_best_score = scores[current_best_idx]\n                global_best_position = positions[current_best_idx]\n\n            # Use secondary elite for additional guidance\n            if scores[current_best_idx] > global_best_score and scores[current_best_idx] < secondary_best_score:\n                secondary_best_score = scores[current_best_idx]\n                secondary_best_position = positions[current_best_idx]\n\n            if eval_count >= self.budget:\n                break\n\n        return global_best_position", "name": "EnhancedHybridPSO_GA", "description": "Enhanced Hybrid PSO-GA with Dynamic Inertia Adjustment and Strategic Dual-Elite Guidance for Rapid Convergence.", "configspace": "", "generation": 29, "fitness": 0.26085850169455566, "feedback": "The algorithm EnhancedHybridPSO_GA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.24.", "error": "", "parent_id": "71679915-b7d2-4246-a9b8-9b30791aa78f", "metadata": {"aucs": [0.7862108456113774, 0.3955839580478092, 0.7943692040650117, 0.7764452429401832, 0.6935825026422296, 0.7593636330896111, 0.5409876951757775, 0.7066354999996922, 0.7185896388609725, 9.999999999998899e-05, 0.1368980747895252, 0.027961932004654022, 0.5166855201595668, 0.22784752511585316, 0.15543883633764977, 0.04116821010900462, 0.2655628567446867, 0.2968114963578423, 0.16194921098511983, 0.1389130042897213, 0.08529167921700576, 0.11690626879843913, 0.11980950205090901, 0.11431372786804173, 0.11859202410096936, 0.11647993096287901, 0.06740089759781165, 0.11950553536996633, 0.13946107750583092, 0.09449535273127552, 0.1068356473462474, 0.08394848445462944, 0.08907696001365184, 0.1187685723011731, 0.12068096183744781, 0.08065737889329472, 0.9360953332071889, 0.9422767795415253, 0.9215258621151035, 0.9290763595282953, 0.9471109649149925, 0.9243068470928475, 0.9376117338133876, 0.9295541841952735, 0.9387622913520365, 0.3179605892356704, 0.31218031233222043, 0.37832337044588005, 0.3017933131320847, 0.5862317011592402, 0.29892902923852716, 0.3479215522699427, 0.5809583135262235, 0.29074918401245387, 0.7940568448292218, 0.23232394207664053, 0.3145297130430005, 0.27506486555023135, 0.8262356433878774, 0.271046099908562, 0.34456137450509683, 0.22789256166988825, 0.39208872702977515, 0.11940563415808703, 0.19494867962322893, 0.22751426388900453, 0.11903034073214314, 0.1839178746452047, 0.20370958685596863, 0.18248097496079407, 0.1712138518884141, 0.2094912777751562, 0.20979669877748497, 0.20113073291985462, 0.16182087781781607, 0.15506287395053986, 0.18395041675143542, 0.1614938377264451, 0.2193547800865977, 0.21279947232767882, 0.21527781172256177, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06459978009508738, 9.999999999998899e-05, 0.046349891162563495, 0.005538800218060302, 9.999999999998899e-05, 0.08460769961925185, 0.09918291066321361, 0.08948184311930873, 0.07328537003524616, 0.053003033461120674, 0.06655691662931695, 0.12749996595161606, 0.11349739510919044, 0.0840776837986088, 0.04365296612543912, 9.999999999998899e-05, 9.999999999998899e-05, 0.11125207651302249, 9.999999999998899e-05, 0.11643720435445704, 9.999999999998899e-05, 9.999999999998899e-05, 0.0785776004066644, 0.08657126820545158, 0.0916939339594186, 0.0839846563472102, 0.22197258144537746, 0.07109156126292349, 0.1081201161495896, 0.07619356096072738, 0.2567701016114081, 0.15114822628587665, 0.49669936099079137, 0.35656786328289236, 0.4638359971693907, 0.5303283526124178, 0.5378770328746707, 0.48184771349437017, 0.42601089496533107, 0.518690998570389, 0.45737669563008654, 0.36151039017457365, 0.08891126877377187, 0.08042166577622434, 0.1122434607079611, 0.08877445440740506, 0.10346833525863364, 0.07580922982933791, 0.1011814244073761, 0.07342085994065439, 0.15178624819607522, 0.15704798679579945, 0.15664143582038503, 0.21217393628763548, 0.25513667820381414, 0.17786883437198908, 0.1981854157041445, 0.1565194491626435, 0.24886632348609006, 0.3207139273280736, 0.35997815457002935, 0.18498197564125696, 0.2710156132065865, 0.18835594945823309, 0.31641121529891136, 0.28949446635376586, 0.3813514471347854, 0.28017750643682027, 0.23376655128684565, 0.22391361505855123, 0.16715958203755943, 0.2049812816555845, 0.1769020027668292, 0.20671700512732816, 0.2073072817941296, 0.18154266192464152, 0.25698377558828656, 0.1865389074081112, 0.21305658216164858, 0.18575288453433703, 0.19723237354727952, 0.1973279660673567, 0.21063329592951074, 0.20657382417010295, 0.19767118368580994, 0.2114568641963115, 0.450025979426558, 0.184845367011648, 0.20199764304934098, 0.18614396673990818, 0.19845202775845883, 0.16644378384878378, 0.2096970420822759, 0.1967484470018267, 0.2059598766348859, 0.7640366765627489, 0.18275998276599714, 0.6160586487614323, 0.8280329635016094, 0.19820495214080902, 0.19594551435206764, 0.7930361363464132, 0.202458046707092, 0.8339594117997502, 0.6040451707713754, 0.1560023708079441, 0.5573658663388426, 0.20722833420401365, 0.16531910942015315, 0.2043341318391939, 0.6624925242001087, 0.1683647557414828, 0.16339095208530285, 0.1964559621878469, 0.18601917066434503, 0.19028751998696447, 0.19373869390735587, 0.1705400329364396, 0.19876012158894718, 0.1788874162055386, 0.16597751912325298, 0.18016406846376465, 0.09090504393296173, 0.08464253821572054, 0.07581488684471749, 0.08958444523953935, 0.07779403594659162, 0.08210574468367937, 0.08856320966868347, 0.09132799878957454, 0.1021745628869174]}, "mutation_prompt": null}
{"id": "75154b46-f875-4b82-aabb-beeaee42c72c", "solution": "import numpy as np\n\nclass AdaptiveHybridPSO_GA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.num_particles = 45  # Slightly increased particles for enhanced diversity\n        self.w = 0.5  # Lower inertia for quicker convergence\n        self.c1 = 1.4  # Dynamic cognitive component\n        self.c2 = 2.3  # Further increased social component\n        self.mutation_rate = 0.3  # Elevated mutation rate for exploration\n        self.crossover_rate = 0.65  # Optimized crossover rate for robust search\n        self.local_search_prob = 0.1  # Probability of performing local search\n\n    def __call__(self, func):\n        # Initialize particles\n        positions = np.random.uniform(self.lb, self.ub, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-0.2, 0.2, (self.num_particles, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.num_particles, float('inf'))\n        global_best_position = np.zeros(self.dim)\n        global_best_score = float('inf')\n\n        eval_count = 0\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            scores = np.array([func(p) for p in positions])\n            eval_count += self.num_particles\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_scores[better_mask] = scores[better_mask]\n            personal_best_positions[better_mask] = positions[better_mask]\n\n            min_score_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[min_score_idx] < global_best_score:\n                global_best_score = personal_best_scores[min_score_idx]\n                global_best_position = personal_best_positions[min_score_idx]\n\n            # Adaptive cognitive and social components with chaotic perturbation\n            adaptive_c1 = self.c1 * (1 - np.sin(0.1 * eval_count))\n            adaptive_c2 = self.c2 * (0.5 + 0.5 * np.cos(0.1 * eval_count))\n\n            # Update velocities and positions using hybrid PSO-GA update rule\n            r1 = np.random.rand(self.num_particles, self.dim)\n            r2 = np.random.rand(self.num_particles, self.dim)\n            velocities = (self.w * velocities +\n                          adaptive_c1 * r1 * (personal_best_positions - positions) +\n                          adaptive_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.lb, self.ub)\n\n            # Genetic Algorithm operations\n            for i in range(self.num_particles):\n                if np.random.rand() < self.crossover_rate:\n                    idxs = [idx for idx in range(self.num_particles) if idx != i]\n                    partner = positions[np.random.choice(idxs)]\n                    mask = np.random.rand(self.dim) < 0.6\n                    child = np.where(mask, positions[i], partner)\n\n                    if np.random.rand() < self.mutation_rate:\n                        mutation_idx = np.random.randint(self.dim)\n                        mutation_value = np.random.uniform(self.lb, self.ub)\n                        child[mutation_idx] = mutation_value\n\n                    child_score = func(child)\n                    eval_count += 1\n                    if child_score < scores[i]:\n                        positions[i] = child\n                        scores[i] = child_score\n\n                    if eval_count >= self.budget:\n                        break\n\n            # Local search for fine-tuning\n            if np.random.rand() < self.local_search_prob and eval_count < self.budget:\n                for j in range(self.dim):\n                    perturbed_position = np.copy(global_best_position)\n                    perturbation = np.random.uniform(-0.1, 0.1)\n                    perturbed_position[j] += perturbation\n                    perturbed_position = np.clip(perturbed_position, self.lb, self.ub)\n                    perturbed_score = func(perturbed_position)\n                    eval_count += 1\n                    if perturbed_score < global_best_score:\n                        global_best_score = perturbed_score\n                        global_best_position = perturbed_position\n\n            # Update global best with the latest evaluations\n            current_best_idx = np.argmin(scores)\n            if scores[current_best_idx] < global_best_score:\n                global_best_score = scores[current_best_idx]\n                global_best_position = positions[current_best_idx]\n\n        return global_best_position", "name": "AdaptiveHybridPSO_GA", "description": "Adaptive Hybrid PSO-GA with Enhanced Local Search and Chaotic Perturbations for Accelerated Convergence.", "configspace": "", "generation": 30, "fitness": 0.2722015765143906, "feedback": "The algorithm AdaptiveHybridPSO_GA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.24.", "error": "", "parent_id": "71679915-b7d2-4246-a9b8-9b30791aa78f", "metadata": {"aucs": [0.7468712268531714, 0.7629434829696434, 0.8376645905132398, 0.7413907428961426, 0.8105594424962272, 0.72709362717535, 0.6972151103735559, 0.8048738093772733, 0.7800148923722255, 0.42167929367987667, 0.36919734912325064, 0.13196018247068364, 0.5365286881180767, 0.3061562952204253, 0.3676929000125292, 0.5183537176379633, 0.5126529637605379, 0.5609994097475954, 0.06279598747447401, 0.13896521525679895, 0.10849985841394083, 0.2916433913786116, 0.11990817853417668, 0.10652108471210509, 0.24588760964358403, 0.06927851780219207, 0.0765909975197484, 0.12397599366381784, 0.06100168735409739, 0.1105499895563189, 0.03895334302508158, 0.2207110025286485, 0.20327812473466222, 0.13742891198106788, 0.1406302242356351, 0.15051937845625052, 0.9623484483313396, 0.9686445795787266, 0.962661336703187, 0.9560281474513266, 0.9762449344029382, 0.9483664434205701, 0.9730291192631639, 0.9760273133323735, 0.9504011516593383, 0.48487073942771497, 0.4617646733234868, 0.35745451084574975, 0.41660019932936543, 0.14871991203743362, 0.4740065007955272, 0.41742152353593165, 0.22506843032837098, 0.24059521389524807, 0.21878464989436341, 0.22946927810544426, 0.22625731427404538, 0.26543638308213924, 0.7759538494422777, 0.24828402207852462, 0.22122464809293874, 0.2551333339637354, 0.22565871709530405, 0.15506492376574876, 0.10870832216077109, 0.165824295238039, 0.221607850973342, 0.18594774679289794, 0.18640095885158248, 0.1742299907710012, 0.16533791022432776, 0.17080586145098986, 0.20169996280894753, 0.12352444843596955, 0.11849135048506632, 0.18316720840210088, 0.18525682075789363, 0.2509420920675519, 0.11797335299279732, 0.1249632030566028, 0.189222539338748, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02174017311396148, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06278280570588812, 0.061183061116679927, 0.03810397869381377, 0.09593006595505815, 0.09064208467522716, 0.04979294273871404, 0.028773441790177046, 0.025993359847370945, 0.14264636151481058, 0.061845628833165245, 0.18887646672073488, 0.1213763306427289, 0.11184475718557185, 0.08839317208035058, 0.06812753217994305, 0.06892003360855692, 0.0893964317674183, 0.07116130650657926, 0.06402802101735505, 0.012495996081958616, 0.22228799026979595, 0.25192903087585006, 0.0058012801222492305, 0.21583909913374355, 0.2255832920823062, 0.05499063515682778, 0.10183286891173071, 0.051791970839593526, 0.4661936323982382, 0.5533288792830091, 0.4780770725516018, 0.5431726933244605, 0.5008414589037056, 0.535284514839196, 0.5620641138749205, 0.5104720991403213, 0.5878266462853252, 0.08680378791310683, 0.07320639928270245, 0.08029937580649005, 0.07204324241728555, 0.100132563847392, 0.0895843902000315, 0.09275813930571186, 0.13752399143178196, 0.05523277093082779, 0.16930235236846514, 0.17926460148970058, 0.1520037858960026, 0.24194218354227726, 0.31052887109437366, 0.1540996609837202, 0.25111935434404653, 0.19501640629290762, 0.16681993244218996, 0.1841144513698939, 0.3366565669064695, 0.34802105353692236, 0.2877316014043334, 0.23283699605887154, 0.3290169699012262, 0.29214874761749987, 0.3781122672832504, 0.46867661191126453, 0.2874241038251244, 0.16865939979722966, 0.167267224954596, 0.22226616803282961, 0.21104404201685534, 0.2777652653967667, 0.24639313119856432, 0.23882865205084935, 0.21470308145354722, 0.19780240527756476, 0.1573775273284317, 0.18919325941422105, 0.20100925265520686, 0.18877676157936407, 0.21822808058731646, 0.21713142744289549, 0.20959877889089318, 0.17255243363087613, 0.2141550600637916, 0.20415413644142177, 0.19498890312805484, 0.19905887385493892, 0.23883352246674971, 0.2020761548598442, 0.6173773776054571, 0.18582391877769244, 0.21631487363443525, 0.7314387277440599, 0.1261915805564322, 0.15092648877639736, 0.8868349692054509, 0.20138300096074013, 0.1981286263337796, 0.8696069686407301, 0.16953747900409577, 0.20978747412827758, 0.45420144018517716, 0.21126758206716234, 0.12424068707134739, 0.6360607301556938, 0.15388655832891096, 0.15212980063948944, 0.10412622193697574, 0.731226961717527, 0.6638560643924436, 0.18792136870023124, 0.18587414974794914, 0.1735287528703675, 0.18617555217023252, 0.19186030419512212, 0.19513271323504033, 0.20215447129087638, 0.1948777849958938, 0.20181204566813526, 0.07858223679102794, 0.0929825008086973, 0.06521340787760821, 0.07345608030377893, 0.07746244866459584, 0.07772804592530358, 0.07887044361948758, 0.07665334160163728, 0.08793996175057073]}, "mutation_prompt": null}
{"id": "8f4af0ca-ef58-4c4c-bff5-426c9758029c", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_GA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.num_particles = 50  # Slightly increased population for diversity\n        self.w = 0.5  # Lower inertia to converge faster\n        self.c1 = 1.3  # Slightly reduced to balance cognitive influence\n        self.c2 = 2.5  # Increased social component for better exploitation\n        self.mutation_rate = 0.3  # Further increased mutation rate to maintain diversity\n        self.crossover_rate = 0.7  # Higher crossover for increased genetic diversity\n\n    def __call__(self, func):\n        # Initialize particles\n        positions = np.random.uniform(self.lb, self.ub, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.num_particles, float('inf'))\n        global_best_position = np.zeros(self.dim)\n        global_best_score = float('inf')\n\n        eval_count = 0\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            scores = np.array([func(p) for p in positions])\n            eval_count += self.num_particles\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_scores[better_mask] = scores[better_mask]\n            personal_best_positions[better_mask] = positions[better_mask]\n\n            min_score_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[min_score_idx] < global_best_score:\n                global_best_score = personal_best_scores[min_score_idx]\n                global_best_position = personal_best_positions[min_score_idx]\n\n            # Layered adaptive components\n            adaptive_w = self.w * (0.5 + 0.5 * np.cos(np.pi * eval_count / self.budget))\n            adaptive_c1 = self.c1 * np.exp(-eval_count / (0.5 * self.budget))\n            adaptive_c2 = self.c2 * (1 - np.exp(-eval_count / (0.5 * self.budget)))\n\n            # Update velocities and positions using hybrid PSO-GA update rule\n            r1 = np.random.rand(self.num_particles, self.dim)\n            r2 = np.random.rand(self.num_particles, self.dim)\n            velocities = (adaptive_w * velocities +\n                          adaptive_c1 * r1 * (personal_best_positions - positions) +\n                          adaptive_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.lb, self.ub)\n\n            # Genetic Algorithm operations\n            for i in range(self.num_particles):\n                if np.random.rand() < self.crossover_rate:\n                    idxs = [idx for idx in range(self.num_particles) if idx != i]\n                    partner = positions[np.random.choice(idxs)]\n                    mask = np.random.rand(self.dim) < 0.5\n                    child = np.where(mask, positions[i], partner)\n\n                    if np.random.rand() < self.mutation_rate:\n                        mutation_idx = np.random.randint(self.dim)\n                        mutation_value = np.random.uniform(self.lb, self.ub)\n                        child[mutation_idx] = mutation_value\n\n                    child_score = func(child)\n                    eval_count += 1\n                    if child_score < scores[i]:\n                        positions[i] = child\n                        scores[i] = child_score\n\n                    if eval_count >= self.budget:\n                        break\n\n            # Update global best with the latest evaluations\n            current_best_idx = np.argmin(scores)\n            if scores[current_best_idx] < global_best_score:\n                global_best_score = scores[current_best_idx]\n                global_best_position = positions[current_best_idx]\n\n        return global_best_position", "name": "EnhancedHybridPSO_GA", "description": "Enhanced Hybrid PSO-GA with Layered Adaptive Mechanisms for Improved Convergence Acceleration.", "configspace": "", "generation": 31, "fitness": 0.2888496484208171, "feedback": "The algorithm EnhancedHybridPSO_GA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.24.", "error": "", "parent_id": "71679915-b7d2-4246-a9b8-9b30791aa78f", "metadata": {"aucs": [0.8211205669615236, 0.5417215016115582, 0.8614153142127596, 0.8009459078524073, 0.8514326681611916, 0.869781941896461, 0.8498032187928541, 0.6722783545532942, 0.8497702108499396, 0.7340432874778489, 0.727584464370113, 0.5056673956645799, 0.7255659623315178, 0.3014424675687677, 0.7620365805918696, 0.6997237381659138, 0.7332956411818641, 0.7510184481465914, 0.7024992315138328, 0.4422239558057567, 0.3620193424904261, 0.16741146127174888, 0.16050516180158247, 0.22287101028089062, 0.44417290509724405, 0.13975472319209825, 0.29788444078956666, 0.13355503402148372, 0.1457785550544458, 0.120979886437528, 0.13999416918448582, 0.1423983552143, 0.13006275679076695, 0.12507488686311896, 0.14236573016747966, 0.12479801068877117, 0.6631659395656235, 0.8269118419088813, 0.4026052213646192, 0.8110604067902295, 0.8231213984344139, 0.7968848274519379, 0.8291280053996521, 0.8527976921358383, 0.8909562655531225, 0.21866066159977293, 0.2138932546108575, 0.21679956124909516, 0.21813856831417933, 0.11926970215501531, 0.24967258303344197, 0.1774472081789532, 0.18207879253457182, 0.2199416776559131, 0.8593622970820083, 0.3240778134757448, 0.20416193004255678, 0.27419745720601374, 0.8914359934213241, 0.8717111077279367, 0.23407396747411546, 0.21935382357812838, 0.21742717781399457, 0.2468687620928991, 0.20222697706713155, 0.1332261009947635, 0.1655448199856957, 0.22705969651204438, 0.13229348532518148, 0.17575007576426904, 0.12683209929064432, 0.18403856206940217, 0.17790730006817645, 0.2187518197346634, 0.38853771160807204, 0.17312451276247043, 0.1366909920463173, 0.13368486865759166, 0.24439489430499595, 0.14662449581895287, 0.08862554338465378, 0.007038595413788373, 0.08279388999169479, 9.999999999998899e-05, 0.039075566204553436, 0.06647016351314139, 9.999999999998899e-05, 0.02360892740221976, 9.999999999998899e-05, 0.12621621059322952, 0.13489518617042218, 0.08816388054264512, 0.14153455710909912, 0.04882510511410565, 0.10328137383220715, 0.0627767057973917, 0.13469298943590058, 0.12760985748717812, 0.10912420220602759, 0.1204738399194153, 0.09698436821502276, 0.12825603472007274, 0.07743927660715622, 0.10539959135401389, 0.1315052612771147, 0.12494427659802565, 0.23515838734021766, 0.10255186412261597, 0.17302746717378903, 0.2293162731338484, 0.1730599760413748, 0.07790467210057372, 0.16561366121947885, 0.07003466742693087, 0.1495634880157537, 0.14369272235302688, 0.23173745878443408, 0.5610018723188499, 0.4136590415655511, 0.46102565971772147, 0.46441551726881247, 0.3793898833082169, 0.4444915862357983, 0.47508445294565715, 0.48873139358681916, 0.568782951602331, 0.08421774885070321, 0.10992070954067512, 0.15236040781353788, 0.09607256416284893, 0.10844153695263836, 0.1094634251147314, 0.08265977225486754, 0.09205505465927566, 0.09049849173534441, 0.21103829079445036, 0.24159950853763534, 0.16113476390451686, 0.2794548077686, 0.18363163491182866, 0.19570555534027445, 0.21651123987717302, 0.1388332667179537, 0.18107362161663132, 0.2999291359967621, 0.38100193618504896, 0.35691205921800107, 0.2755262111192496, 0.3586980464345465, 0.29918121157847777, 0.3568950257437483, 0.5122961548486993, 0.26094319567046964, 0.2523446233423676, 0.22871636400796802, 0.21770506818691804, 0.26710969207665736, 0.1918368491150232, 0.21975489742719367, 0.22075771348582085, 0.21382568781217304, 0.30064997154986994, 0.24659884115703812, 0.190761138156207, 0.1839430998968863, 0.18303215280632334, 0.2416117560572959, 0.2480935375423905, 0.2504461044753302, 0.2264346366805049, 0.24422621139932776, 0.19108581574784023, 0.17587366692437068, 0.18514598240939095, 0.20551956891065182, 0.19870776628870912, 0.20410158106444476, 0.22107138436920093, 0.23457698236039337, 0.2038574407653424, 0.17509057576105658, 0.17585122537405296, 0.1808626668599812, 0.864290650759284, 0.6003900647393203, 0.8765587127025213, 0.1756205101278463, 0.15961364424166113, 0.8719630603017162, 0.34519278929004604, 0.45845477698367565, 0.44965482484934005, 0.14956738556291094, 0.2075608340058167, 0.20605466022159158, 0.2048061423638673, 0.37077982781315355, 0.16221682529841197, 0.1905131424087384, 0.20793723896716632, 0.1919893057211033, 0.1732511838004751, 0.18302169028825377, 0.20354381132634203, 0.18202023040533122, 0.1918976132609399, 0.2127503037856947, 0.10050205736821605, 0.0823721864864938, 0.10089611678389265, 0.08339792744987828, 0.09541044523850883, 0.09538575329627108, 0.08194855052186589, 0.09885427578295092, 0.0942911013151061]}, "mutation_prompt": null}
{"id": "78b1aa12-2adc-4386-bd87-002c7edd73d7", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_GA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.num_particles = 40  # Reduced to focus on promising areas\n        self.w = 0.6  # Adjusted inertia for balance between exploration and exploitation\n        self.c1 = 1.5  # Adaptive cognitive component\n        self.c2 = 2.2  # Increased social component to enhance attraction to global best\n        self.mutation_rate = 0.25  # Increased mutation rate for diversity\n        self.crossover_rate = 0.6  # Adjusted crossover rate for improved exploitation\n\n    def __call__(self, func):\n        # Initialize particles\n        positions = np.random.uniform(self.lb, self.ub, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.num_particles, float('inf'))\n        global_best_position = np.zeros(self.dim)\n        global_best_score = float('inf')\n\n        eval_count = 0\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            scores = np.array([func(p) for p in positions])\n            eval_count += self.num_particles\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_scores[better_mask] = scores[better_mask]\n            personal_best_positions[better_mask] = positions[better_mask]\n\n            min_score_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[min_score_idx] < global_best_score:\n                global_best_score = personal_best_scores[min_score_idx]\n                global_best_position = personal_best_positions[min_score_idx]\n\n            # Adaptive cognitive and social components\n            adaptive_c1 = self.c1 * np.exp(-eval_count / (0.4 * self.budget))\n            adaptive_c2 = self.c2 * (1 - np.exp(-eval_count / (0.4 * self.budget)))\n\n            # Update velocities and positions using hybrid PSO-GA update rule\n            r1 = np.random.rand(self.num_particles, self.dim)\n            r2 = np.random.rand(self.num_particles, self.dim)\n            velocities = (self.w * velocities +\n                          adaptive_c1 * r1 * (personal_best_positions - positions) +\n                          adaptive_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.lb, self.ub)\n\n            # Genetic Algorithm operations\n            for i in range(self.num_particles):\n                if np.random.rand() < self.crossover_rate:\n                    idxs = [idx for idx in range(self.num_particles) if idx != i]\n                    partner = positions[np.random.choice(idxs)]\n                    mask = np.random.rand(self.dim) < 0.5\n                    child = np.where(mask, positions[i], partner)\n\n                    if np.random.rand() < self.mutation_rate:\n                        mutation_idx = np.random.randint(self.dim)\n                        mutation_value = np.random.uniform(self.lb, self.ub)\n                        child[mutation_idx] = mutation_value\n\n                    child_score = func(child)\n                    eval_count += 1\n                    if child_score < scores[i]:\n                        positions[i] = child\n                        scores[i] = child_score\n\n                    if eval_count >= self.budget:\n                        break\n\n            # Update global best with the latest evaluations\n            current_best_idx = np.argmin(scores)\n            if scores[current_best_idx] < global_best_score:\n                global_best_score = scores[current_best_idx]\n                global_best_position = positions[current_best_idx]\n\n        return global_best_position", "name": "EnhancedHybridPSO_GA", "description": "Enhanced Hybrid PSO-GA with Dynamic Population Refinement and Targeted Mutation for Accelerated Convergence.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "71679915-b7d2-4246-a9b8-9b30791aa78f", "metadata": {"aucs": [0.8709116999593831, 0.8723138723777221, 0.8768372615335654, 0.8617868929087722, 0.8732786663332638, 0.8700165787014595, 0.7565562986219209, 0.868539258880491, 0.8709766980904352, 0.7164359951709853, 0.7048047712591957, 0.4776950380186241, 0.3855705320648811, 0.6623877477389744, 0.7604071468026499, 0.2925765172942847, 0.6462031836272428, 0.19553392270172443, 0.17303437138306488, 0.2311803368732268, 0.13147514920023173, 0.14639486955092984, 0.35218672427787756, 0.35487832224036875, 0.14866342766770446, 0.32622137780232907, 0.17580831107043648, 0.1364785949220515, 0.13723180340024177, 0.1415672077043013, 0.1034515896336532, 0.18768357811791359, 0.11499926313848663, 0.14052555748747397, 0.1397271088896036, 0.14224280497807062, 0.8572855482713462, 0.8816167955365596, 0.8719308246693213, 0.9193998394786392, 0.914420324363186, 0.868569508913773, 0.9178142773244033, 0.8901375456634961, 0.9104234556450416, 0.44374478233240466, 0.7135385169264723, 0.28224185632107246, 0.6757261041085597, 0.5347767213601308, 0.6924610301299955, 0.2150090318021105, 0.5979667369466203, 0.46334160313151795, 0.3816440509835938, 0.8871688407181226, 0.2215335955350327, 0.2782753108644027, 0.20804701301111983, 0.21414455095505636, 0.17006784993710677, 0.14936435372393353, 0.8927547238016643, 0.12598746301048813, 0.27674670478297914, 0.13402205898302322, 0.1989156862933854, 0.1637406030113836, 0.15700652057774145, 0.3784850467672597, 0.20359559468799404, 0.15199652764569382, 0.19805528150264373, 0.12909579769588853, 0.20974198883930295, 0.13618812474127684, 0.1676843122643138, 0.21199600895034987, 0.1806227083724674, 0.18720342152943903, 0.14286907178205843, 0.011209799583482005, 0.05529339075019002, 9.999999999998899e-05, 0.10832408699422724, 0.04279531077019072, 9.999999999998899e-05, 0.05451701182477431, 0.06287221396818243, 0.011708930366438275, 0.11851476671790695, 0.13042357546193484, 0.08751705868258464, 0.0737520182321394, 0.0674670842998144, 0.07040643281963133, 0.12270959020209427, 0.1635158390187902, 0.11337901101866699, 9.999999999998899e-05, 0.12060053095909329, 0.15135623777850848, 0.1888409906988574, 0.21600226247055165, 0.12214764580372828, 0.1405721141220454, 0.23155685722371033, 0.2630130022138708, 0.1288308910254673, 0.34621738907919575, 0.27668944855796795, 0.07016384558757949, 0.11322576437915599, 0.07104408037199961, 0.20232014360368966, 0.17029684759892205, 0.1043090462902142, 0.5275849797575713, 0.4916609332810673, 0.5484482146725321, 0.6025381266452674, 0.5669340898622877, 0.540035744668264, 0.5335086626702187, 0.5645246800771313, 0.5675543526425648, 0.10220124270145459, 0.17235856712732534, 0.09015062051346068, 0.14918869038205118, 0.14833937478444825, 0.1265665437173411, 0.13741787062809396, 0.10950728317396385, 0.10727360923944129, 0.1522830180351078, 0.19161055363162882, 0.22403061555925252, 0.19664252516112934, 0.19353340288045007, 0.2143631657275058, 0.22899864457304753, 0.20507301754383522, 0.16376887897753145, 0.25889297875502104, 0.30324011541506257, 0.20595125965070904, 0.273450660627921, 0.5507256147127081, 0.33491973351863924, 0.2679250418098513, 0.2868145497806951, 0.5045353871494462, 0.2422052565907501, 0.27251688689126796, 0.22336131551185512, 0.2281901599841637, 0.1532587735635741, 0.23681089449201387, 0.17474848273382282, 0.28874861636043514, 0.26641830685633283, 0.2296548129849213, 0.22112564705591653, 0.4116295558833244, 0.27429704557205437, 0.25393708255507086, 0.20692391605978377, 0.2326379270132466, 0.19551239397576992, 0.2154097795892288, 0.22901002088179723, 0.18804644526911107, 0.18831793637834637, 0.19084701804057014, 0.2870924905379486, 0.19422011941911022, 0.1967708819138012, 0.22007520569987904, 0.20426687081246941, 0.17535235983947695, 0.1956085758016729, 0.18513856718686927, 0.853351435696617, 0.3560060671921448, 0.8757283763917089, 0.8553559198811277, 0.16919964030308454, 0.13442874366711544, 0.5821816685326726, 0.719751672453101, 0.46208413758601397, 0.7491859575447042, 0.20931336361852104, 0.20509540991197794, 0.3883684528344128, 0.499071632722356, 0.3318319362175811, 0.19639170561099495, 0.19765120753207144, 0.1974169342458848, 0.20355066541306377, 0.17175700260853521, 0.17872396251533595, 0.18059120011176089, 0.17875517461522827, 0.196857160154308, 0.1007064099381123, 0.0992299406111311, 0.09211341496887471, 0.08741383495575883, 0.07795395188648158, 0.15317868552169456, 0.07059919688751182, 0.08629132951339868, 0.0918739748027434]}, "mutation_prompt": null}
{"id": "0e2ab172-298e-4ec5-a681-c7fe016207e8", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_GA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.num_particles = 40  # Reduced to focus on promising areas\n        self.w = 0.6  # Adjusted inertia for balance between exploration and exploitation\n        self.c1 = 1.5  # Adaptive cognitive component\n        self.c2 = 2.2  # Increased social component to enhance attraction to global best\n        self.mutation_rate = 0.25  # Increased mutation rate for diversity\n        self.crossover_rate = 0.6  # Adjusted crossover rate for improved exploitation\n\n    def __call__(self, func):\n        # Initialize particles\n        positions = np.random.uniform(self.lb, self.ub, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.num_particles, float('inf'))\n        global_best_position = np.zeros(self.dim)\n        global_best_score = float('inf')\n\n        eval_count = 0\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            scores = np.array([func(p) for p in positions])\n            eval_count += self.num_particles\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_scores[better_mask] = scores[better_mask]\n            personal_best_positions[better_mask] = positions[better_mask]\n\n            min_score_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[min_score_idx] < global_best_score:\n                global_best_score = personal_best_scores[min_score_idx]\n                global_best_position = personal_best_positions[min_score_idx]\n\n            # Adaptive cognitive and social components\n            adaptive_c1 = self.c1 * np.exp(-eval_count / (0.4 * self.budget))\n            adaptive_c2 = self.c2 * (1 - np.exp(-eval_count / (0.4 * self.budget)))\n\n            # Update velocities and positions using hybrid PSO-GA update rule\n            r1 = np.random.rand(self.num_particles, self.dim)\n            r2 = np.random.rand(self.num_particles, self.dim)\n            velocities = (self.w * velocities +\n                          adaptive_c1 * r1 * (personal_best_positions - positions) +\n                          adaptive_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.lb, self.ub)\n\n            # Genetic Algorithm operations\n            for i in range(self.num_particles):\n                if np.random.rand() < self.crossover_rate:\n                    idxs = [idx for idx in range(self.num_particles) if idx != i]\n                    partner = positions[np.random.choice(idxs)]\n                    mask = np.random.rand(self.dim) < 0.5\n                    child = np.where(mask, positions[i], partner)\n\n                    if np.random.rand() < self.mutation_rate:\n                        mutation_idx = np.random.randint(self.dim)\n                        mutation_value = np.random.uniform(self.lb, self.ub)\n                        child[mutation_idx] = mutation_value\n\n                    child_score = func(child)\n                    eval_count += 1\n                    if child_score < scores[i]:\n                        positions[i] = child\n                        scores[i] = child_score\n\n                    if eval_count >= self.budget:\n                        break\n\n            # Update global best with the latest evaluations\n            current_best_idx = np.argmin(scores)\n            if scores[current_best_idx] < global_best_score:\n                global_best_score = scores[current_best_idx]\n                global_best_position = positions[current_best_idx]\n\n        return global_best_position", "name": "EnhancedHybridPSO_GA", "description": "Enhanced Hybrid PSO-GA with Dynamic Population Refinement and Targeted Mutation for Accelerated Convergence.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "71679915-b7d2-4246-a9b8-9b30791aa78f", "metadata": {"aucs": [0.8709116999593831, 0.8723138723777221, 0.8768372615335654, 0.8617868929087722, 0.8732786663332638, 0.8700165787014595, 0.7565562986219209, 0.868539258880491, 0.8709766980904352, 0.7164359951709853, 0.7048047712591957, 0.4776950380186241, 0.3855705320648811, 0.6623877477389744, 0.7604071468026499, 0.2925765172942847, 0.6462031836272428, 0.19553392270172443, 0.17303437138306488, 0.2311803368732268, 0.13147514920023173, 0.14639486955092984, 0.35218672427787756, 0.35487832224036875, 0.14866342766770446, 0.32622137780232907, 0.17580831107043648, 0.1364785949220515, 0.13723180340024177, 0.1415672077043013, 0.1034515896336532, 0.18768357811791359, 0.11499926313848663, 0.14052555748747397, 0.1397271088896036, 0.14224280497807062, 0.8572855482713462, 0.8816167955365596, 0.8719308246693213, 0.9193998394786392, 0.914420324363186, 0.868569508913773, 0.9178142773244033, 0.8901375456634961, 0.9104234556450416, 0.44374478233240466, 0.7135385169264723, 0.28224185632107246, 0.6757261041085597, 0.5347767213601308, 0.6924610301299955, 0.2150090318021105, 0.5979667369466203, 0.46334160313151795, 0.3816440509835938, 0.8871688407181226, 0.2215335955350327, 0.2782753108644027, 0.20804701301111983, 0.21414455095505636, 0.17006784993710677, 0.14936435372393353, 0.8927547238016643, 0.12598746301048813, 0.27674670478297914, 0.13402205898302322, 0.1989156862933854, 0.1637406030113836, 0.15700652057774145, 0.3784850467672597, 0.20359559468799404, 0.15199652764569382, 0.19805528150264373, 0.12909579769588853, 0.20974198883930295, 0.13618812474127684, 0.1676843122643138, 0.21199600895034987, 0.1806227083724674, 0.18720342152943903, 0.14286907178205843, 0.011209799583482005, 0.05529339075019002, 9.999999999998899e-05, 0.10832408699422724, 0.04279531077019072, 9.999999999998899e-05, 0.05451701182477431, 0.06287221396818243, 0.011708930366438275, 0.11851476671790695, 0.13042357546193484, 0.08751705868258464, 0.0737520182321394, 0.0674670842998144, 0.07040643281963133, 0.12270959020209427, 0.1635158390187902, 0.11337901101866699, 9.999999999998899e-05, 0.12060053095909329, 0.15135623777850848, 0.1888409906988574, 0.21600226247055165, 0.12214764580372828, 0.1405721141220454, 0.23155685722371033, 0.2630130022138708, 0.1288308910254673, 0.34621738907919575, 0.27668944855796795, 0.07016384558757949, 0.11322576437915599, 0.07104408037199961, 0.20232014360368966, 0.17029684759892205, 0.1043090462902142, 0.5275849797575713, 0.4916609332810673, 0.5484482146725321, 0.6025381266452674, 0.5669340898622877, 0.540035744668264, 0.5335086626702187, 0.5645246800771313, 0.5675543526425648, 0.10220124270145459, 0.17235856712732534, 0.09015062051346068, 0.14918869038205118, 0.14833937478444825, 0.1265665437173411, 0.13741787062809396, 0.10950728317396385, 0.10727360923944129, 0.1522830180351078, 0.19161055363162882, 0.22403061555925252, 0.19664252516112934, 0.19353340288045007, 0.2143631657275058, 0.22899864457304753, 0.20507301754383522, 0.16376887897753145, 0.25889297875502104, 0.30324011541506257, 0.20595125965070904, 0.273450660627921, 0.5507256147127081, 0.33491973351863924, 0.2679250418098513, 0.2868145497806951, 0.5045353871494462, 0.2422052565907501, 0.27251688689126796, 0.22336131551185512, 0.2281901599841637, 0.1532587735635741, 0.23681089449201387, 0.17474848273382282, 0.28874861636043514, 0.26641830685633283, 0.2296548129849213, 0.22112564705591653, 0.4116295558833244, 0.27429704557205437, 0.25393708255507086, 0.20692391605978377, 0.2326379270132466, 0.19551239397576992, 0.2154097795892288, 0.22901002088179723, 0.18804644526911107, 0.18831793637834637, 0.19084701804057014, 0.2870924905379486, 0.19422011941911022, 0.1967708819138012, 0.22007520569987904, 0.20426687081246941, 0.17535235983947695, 0.1956085758016729, 0.18513856718686927, 0.853351435696617, 0.3560060671921448, 0.8757283763917089, 0.8553559198811277, 0.16919964030308454, 0.13442874366711544, 0.5821816685326726, 0.719751672453101, 0.46208413758601397, 0.7491859575447042, 0.20931336361852104, 0.20509540991197794, 0.3883684528344128, 0.499071632722356, 0.3318319362175811, 0.19639170561099495, 0.19765120753207144, 0.1974169342458848, 0.20355066541306377, 0.17175700260853521, 0.17872396251533595, 0.18059120011176089, 0.17875517461522827, 0.196857160154308, 0.1007064099381123, 0.0992299406111311, 0.09211341496887471, 0.08741383495575883, 0.07795395188648158, 0.15317868552169456, 0.07059919688751182, 0.08629132951339868, 0.0918739748027434]}, "mutation_prompt": null}
{"id": "e526c611-72c2-416a-bb7c-66c2168628be", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_GA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.num_particles = 40  # Reduced to focus on promising areas\n        self.w = 0.6  # Adjusted inertia for balance between exploration and exploitation\n        self.c1 = 1.5  # Adaptive cognitive component\n        self.c2 = 2.2  # Increased social component to enhance attraction to global best\n        self.mutation_rate = 0.25  # Increased mutation rate for diversity\n        self.crossover_rate = 0.6  # Adjusted crossover rate for improved exploitation\n\n    def __call__(self, func):\n        # Initialize particles\n        positions = np.random.uniform(self.lb, self.ub, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.num_particles, float('inf'))\n        global_best_position = np.zeros(self.dim)\n        global_best_score = float('inf')\n\n        eval_count = 0\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            scores = np.array([func(p) for p in positions])\n            eval_count += self.num_particles\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_scores[better_mask] = scores[better_mask]\n            personal_best_positions[better_mask] = positions[better_mask]\n\n            min_score_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[min_score_idx] < global_best_score:\n                global_best_score = personal_best_scores[min_score_idx]\n                global_best_position = personal_best_positions[min_score_idx]\n\n            # Adaptive cognitive and social components\n            adaptive_c1 = self.c1 * np.exp(-eval_count / (0.4 * self.budget))\n            adaptive_c2 = self.c2 * (1 - np.exp(-eval_count / (0.4 * self.budget)))\n\n            # Update velocities and positions using hybrid PSO-GA update rule\n            r1 = np.random.rand(self.num_particles, self.dim)\n            r2 = np.random.rand(self.num_particles, self.dim)\n            velocities = (self.w * velocities +\n                          adaptive_c1 * r1 * (personal_best_positions - positions) +\n                          adaptive_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.lb, self.ub)\n\n            # Genetic Algorithm operations\n            for i in range(self.num_particles):\n                if np.random.rand() < self.crossover_rate:\n                    idxs = [idx for idx in range(self.num_particles) if idx != i]\n                    partner = positions[np.random.choice(idxs)]\n                    mask = np.random.rand(self.dim) < 0.5\n                    child = np.where(mask, positions[i], partner)\n\n                    if np.random.rand() < self.mutation_rate:\n                        mutation_idx = np.random.randint(self.dim)\n                        mutation_value = np.random.uniform(self.lb, self.ub)\n                        child[mutation_idx] = mutation_value\n\n                    child_score = func(child)\n                    eval_count += 1\n                    if child_score < scores[i]:\n                        positions[i] = child\n                        scores[i] = child_score\n\n                    if eval_count >= self.budget:\n                        break\n\n            # Update global best with the latest evaluations\n            current_best_idx = np.argmin(scores)\n            if scores[current_best_idx] < global_best_score:\n                global_best_score = scores[current_best_idx]\n                global_best_position = positions[current_best_idx]\n\n        return global_best_position", "name": "EnhancedHybridPSO_GA", "description": "Enhanced Hybrid PSO-GA with Dynamic Population Refinement and Targeted Mutation for Accelerated Convergence.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "71679915-b7d2-4246-a9b8-9b30791aa78f", "metadata": {"aucs": [0.8709116999593831, 0.8723138723777221, 0.8768372615335654, 0.8617868929087722, 0.8732786663332638, 0.8700165787014595, 0.7565562986219209, 0.868539258880491, 0.8709766980904352, 0.7164359951709853, 0.7048047712591957, 0.4776950380186241, 0.3855705320648811, 0.6623877477389744, 0.7604071468026499, 0.2925765172942847, 0.6462031836272428, 0.19553392270172443, 0.17303437138306488, 0.2311803368732268, 0.13147514920023173, 0.14639486955092984, 0.35218672427787756, 0.35487832224036875, 0.14866342766770446, 0.32622137780232907, 0.17580831107043648, 0.1364785949220515, 0.13723180340024177, 0.1415672077043013, 0.1034515896336532, 0.18768357811791359, 0.11499926313848663, 0.14052555748747397, 0.1397271088896036, 0.14224280497807062, 0.8572855482713462, 0.8816167955365596, 0.8719308246693213, 0.9193998394786392, 0.914420324363186, 0.868569508913773, 0.9178142773244033, 0.8901375456634961, 0.9104234556450416, 0.44374478233240466, 0.7135385169264723, 0.28224185632107246, 0.6757261041085597, 0.5347767213601308, 0.6924610301299955, 0.2150090318021105, 0.5979667369466203, 0.46334160313151795, 0.3816440509835938, 0.8871688407181226, 0.2215335955350327, 0.2782753108644027, 0.20804701301111983, 0.21414455095505636, 0.17006784993710677, 0.14936435372393353, 0.8927547238016643, 0.12598746301048813, 0.27674670478297914, 0.13402205898302322, 0.1989156862933854, 0.1637406030113836, 0.15700652057774145, 0.3784850467672597, 0.20359559468799404, 0.15199652764569382, 0.19805528150264373, 0.12909579769588853, 0.20974198883930295, 0.13618812474127684, 0.1676843122643138, 0.21199600895034987, 0.1806227083724674, 0.18720342152943903, 0.14286907178205843, 0.011209799583482005, 0.05529339075019002, 9.999999999998899e-05, 0.10832408699422724, 0.04279531077019072, 9.999999999998899e-05, 0.05451701182477431, 0.06287221396818243, 0.011708930366438275, 0.11851476671790695, 0.13042357546193484, 0.08751705868258464, 0.0737520182321394, 0.0674670842998144, 0.07040643281963133, 0.12270959020209427, 0.1635158390187902, 0.11337901101866699, 9.999999999998899e-05, 0.12060053095909329, 0.15135623777850848, 0.1888409906988574, 0.21600226247055165, 0.12214764580372828, 0.1405721141220454, 0.23155685722371033, 0.2630130022138708, 0.1288308910254673, 0.34621738907919575, 0.27668944855796795, 0.07016384558757949, 0.11322576437915599, 0.07104408037199961, 0.20232014360368966, 0.17029684759892205, 0.1043090462902142, 0.5275849797575713, 0.4916609332810673, 0.5484482146725321, 0.6025381266452674, 0.5669340898622877, 0.540035744668264, 0.5335086626702187, 0.5645246800771313, 0.5675543526425648, 0.10220124270145459, 0.17235856712732534, 0.09015062051346068, 0.14918869038205118, 0.14833937478444825, 0.1265665437173411, 0.13741787062809396, 0.10950728317396385, 0.10727360923944129, 0.1522830180351078, 0.19161055363162882, 0.22403061555925252, 0.19664252516112934, 0.19353340288045007, 0.2143631657275058, 0.22899864457304753, 0.20507301754383522, 0.16376887897753145, 0.25889297875502104, 0.30324011541506257, 0.20595125965070904, 0.273450660627921, 0.5507256147127081, 0.33491973351863924, 0.2679250418098513, 0.2868145497806951, 0.5045353871494462, 0.2422052565907501, 0.27251688689126796, 0.22336131551185512, 0.2281901599841637, 0.1532587735635741, 0.23681089449201387, 0.17474848273382282, 0.28874861636043514, 0.26641830685633283, 0.2296548129849213, 0.22112564705591653, 0.4116295558833244, 0.27429704557205437, 0.25393708255507086, 0.20692391605978377, 0.2326379270132466, 0.19551239397576992, 0.2154097795892288, 0.22901002088179723, 0.18804644526911107, 0.18831793637834637, 0.19084701804057014, 0.2870924905379486, 0.19422011941911022, 0.1967708819138012, 0.22007520569987904, 0.20426687081246941, 0.17535235983947695, 0.1956085758016729, 0.18513856718686927, 0.853351435696617, 0.3560060671921448, 0.8757283763917089, 0.8553559198811277, 0.16919964030308454, 0.13442874366711544, 0.5821816685326726, 0.719751672453101, 0.46208413758601397, 0.7491859575447042, 0.20931336361852104, 0.20509540991197794, 0.3883684528344128, 0.499071632722356, 0.3318319362175811, 0.19639170561099495, 0.19765120753207144, 0.1974169342458848, 0.20355066541306377, 0.17175700260853521, 0.17872396251533595, 0.18059120011176089, 0.17875517461522827, 0.196857160154308, 0.1007064099381123, 0.0992299406111311, 0.09211341496887471, 0.08741383495575883, 0.07795395188648158, 0.15317868552169456, 0.07059919688751182, 0.08629132951339868, 0.0918739748027434]}, "mutation_prompt": null}
{"id": "c4e50f3f-5290-41e8-9b69-3258c7ad842f", "solution": "import numpy as np\n\nclass AdaptiveMPSO_GA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.num_particles = 50  # Slightly increased to exploit swarm intelligence\n        self.w = 0.5  # Lowered inertia for faster convergence\n        self.c1 = 1.7  # Modified cognitive component for balance\n        self.c2 = 2.5  # Enhanced social component for stronger convergence\n        self.mutation_rate = 0.3  # Further adjusted mutation rate for diversity\n        self.crossover_rate = 0.7  # Slightly increased crossover rate for better exploration\n        self.diversity_threshold = 0.1\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lb, self.ub, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.num_particles, float('inf'))\n        global_best_position = np.zeros(self.dim)\n        global_best_score = float('inf')\n\n        eval_count = 0\n\n        while eval_count < self.budget:\n            scores = np.array([func(p) for p in positions])\n            eval_count += self.num_particles\n\n            better_mask = scores < personal_best_scores\n            personal_best_scores[better_mask] = scores[better_mask]\n            personal_best_positions[better_mask] = positions[better_mask]\n\n            min_score_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[min_score_idx] < global_best_score:\n                global_best_score = personal_best_scores[min_score_idx]\n                global_best_position = personal_best_positions[min_score_idx]\n\n            adaptive_c1 = self.c1 * np.exp(-eval_count / (0.3 * self.budget))\n            adaptive_c2 = self.c2 * (1 - np.exp(-eval_count / (0.3 * self.budget)))\n\n            r1 = np.random.rand(self.num_particles, self.dim)\n            r2 = np.random.rand(self.num_particles, self.dim)\n            velocities = (self.w * velocities +\n                          adaptive_c1 * r1 * (personal_best_positions - positions) +\n                          adaptive_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.lb, self.ub)\n\n            for i in range(self.num_particles):\n                if np.random.rand() < self.crossover_rate:\n                    idxs = [idx for idx in range(self.num_particles) if idx != i]\n                    partner = positions[np.random.choice(idxs)]\n                    mask = np.random.rand(self.dim) < 0.5\n                    child = np.where(mask, positions[i], partner)\n\n                    if np.random.rand() < self.mutation_rate:\n                        mutation_idx = np.random.randint(self.dim)\n                        if np.std(positions, axis=0)[mutation_idx] < self.diversity_threshold:\n                            mutation_value = np.random.uniform(self.lb, self.ub)\n                            child[mutation_idx] = mutation_value\n\n                    child_score = func(child)\n                    eval_count += 1\n                    if child_score < scores[i]:\n                        positions[i] = child\n                        scores[i] = child_score\n\n                    if eval_count >= self.budget:\n                        break\n\n            current_best_idx = np.argmin(scores)\n            if scores[current_best_idx] < global_best_score:\n                global_best_score = scores[current_best_idx]\n                global_best_position = positions[current_best_idx]\n\n        return global_best_position", "name": "AdaptiveMPSO_GA", "description": "Adaptive MPSO-GA with Enhanced Diversity Maintenance and Dynamic Convergence Control for Improved Performance.", "configspace": "", "generation": 35, "fitness": 0.29434730485855476, "feedback": "The algorithm AdaptiveMPSO_GA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.24.", "error": "", "parent_id": "71679915-b7d2-4246-a9b8-9b30791aa78f", "metadata": {"aucs": [0.7341519413668696, 0.8525431000343268, 0.8454311395131752, 0.7536904825422263, 0.8568486688965331, 0.8639123969773576, 0.8376288322163561, 0.8696622869164709, 0.8514882658401406, 0.4140477661671089, 0.7137943062809544, 0.5699110710944928, 0.5807059360665764, 0.4876012361470372, 0.30659785242506443, 0.586778922560615, 0.5522423418584899, 0.44168286799170997, 0.23176899841679355, 0.09571715898640609, 0.1170317522731642, 0.27952230631430885, 0.21273730362797294, 0.18873694822493037, 0.1703351621869149, 0.16119336750712643, 0.3062909637434075, 0.11880874731350888, 0.11933794341410597, 0.13777406311130602, 0.12894040768303094, 0.13848603243586277, 0.1485589627783649, 0.15323624540882685, 0.12738705459826882, 0.09023074648128637, 0.7762884596547568, 0.8986439119546543, 0.8546730785619444, 0.8441469402388269, 0.8570181452616434, 0.8350036961082652, 0.872895203152695, 0.8503715747537146, 0.7677648788388678, 0.2833586019377844, 0.4765887612905201, 0.292560760242903, 0.5076898999565584, 0.38311531610540184, 0.40293726156092136, 0.5836413968719686, 0.18352206380532976, 0.2624222221366266, 0.8955653988213016, 0.23810724003612938, 0.16990608147240105, 0.35214181978218206, 0.3473851713350149, 0.26053625283379933, 0.1632347389036224, 0.312819669323512, 0.2331027000313204, 0.21450311292468938, 0.1646126556360079, 0.1597927857967546, 0.15963368285967117, 0.15967968193319648, 0.2743458133356129, 0.21989302551807222, 0.154639070942169, 0.1621507843334744, 0.19647379688249889, 0.1629834392722419, 0.12953890775120946, 0.12891967871396315, 0.18210618460459382, 0.14511119529711558, 0.16891017177528234, 0.1958962084138438, 0.12724843624145066, 0.10413638125425428, 0.05363186997605318, 0.04944554224524367, 0.07329889310873028, 0.053128176006252414, 0.006157633630589965, 0.08590325824846046, 0.0038300188593745066, 0.0003551312182302757, 0.10416722801444744, 0.0879287103243811, 0.18401017444888135, 0.06716805552541849, 0.05701932758111672, 0.07470662465819078, 0.057943148257145194, 0.06436153837050351, 0.21565980760893466, 0.13553511161620901, 0.30655387317093064, 0.3134110771388734, 0.020365097509647212, 0.3338224258996313, 0.09388161034272746, 0.09397391697871393, 0.006598696716513253, 0.3338589929903515, 0.2141528659862656, 0.10543074123730789, 0.15834724361658703, 0.046569460331482904, 0.08655148541555058, 0.17873897265964767, 0.11973764304138335, 0.09808216159029959, 0.3245945339213123, 0.5470701905528735, 0.5048031057686637, 0.5265337977391502, 0.5367009071924741, 0.5409508118862251, 0.5755906509611179, 0.6249565849389251, 0.342268077498571, 0.5666807586168123, 0.10699385429410102, 0.0861751654841868, 0.08481593795882725, 0.13895218402002374, 0.15467030549639493, 0.15265660257703295, 0.11194028255264454, 0.17045661457456518, 0.11573772217742795, 0.18614872662643844, 0.14926872736872943, 0.20876298718761088, 0.25179636688061635, 0.18293099567807392, 0.14790241752535205, 0.17373161426667794, 0.1300443886675735, 0.18620826357845222, 0.2100806461326522, 0.2738722816331882, 0.3643079113137033, 0.37593563633195304, 0.34217309923164174, 0.29149486178024187, 0.5580959051559413, 0.5929709397124254, 0.2444444974178197, 0.2566446233968269, 0.2380605094008722, 0.21957341551072185, 0.27177507752839625, 0.28010276832050973, 0.2065095760690695, 0.18868883555711957, 0.27440139244723805, 0.17576178747080262, 0.2812113752467089, 0.2249177046227343, 0.1959676947522988, 0.21802054917980762, 0.20631988157823966, 0.22929878033104123, 0.21780820107641397, 0.200541754028984, 0.23946691680196386, 0.2124353523376903, 0.221662042477343, 0.2174946287134495, 0.20767810360224936, 0.21538588965682537, 0.18785879155614404, 0.2158269652362932, 0.22268618873327828, 0.17410780965333816, 0.7921566227515716, 0.18173155239067607, 0.1257867247446791, 0.8806674132482709, 0.19592449068160822, 0.9008416916402558, 0.16907756759194437, 0.1361664324959575, 0.17475456281313595, 0.8241217477636986, 0.860376167162732, 0.5518781575287683, 0.5584860684586724, 0.5282882955847366, 0.16527776287897045, 0.10384345049686017, 0.666650937823795, 0.16306475348192617, 0.20695999235768592, 0.18448851265102817, 0.184661964278662, 0.1789313832081565, 0.18418084217334119, 0.18673501846270257, 0.1861922406975809, 0.19101483508340733, 0.1771220967160969, 0.09082959367062982, 0.10133839231254627, 0.09521926804179381, 0.06662283488089649, 0.08375855404699362, 0.08392988528472511, 0.06886031376010271, 0.10523107552510536, 0.09576532458739528]}, "mutation_prompt": null}
{"id": "f49ba2ec-c6f8-4076-bb1c-5086c80c1794", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_GA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.num_particles = 35  # Adjusted to focus on promising areas\n        self.w = 0.5  # Further adjusted inertia for refined balance\n        self.c1 = 1.6  # Slightly increased adaptive cognitive component\n        self.c2 = 2.1  # Adjusted social component for improved convergence\n        self.mutation_rate = 0.2  # Adjusted mutation rate for balanced diversity\n        self.crossover_rate = 0.7  # Higher crossover rate for exploitation\n        self.velocity_clamp = np.abs(self.ub - self.lb) * 0.1  # Introduced velocity clamping\n\n    def __call__(self, func):\n        # Initialize particles\n        positions = np.random.uniform(self.lb, self.ub, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.num_particles, float('inf'))\n        global_best_position = np.zeros(self.dim)\n        global_best_score = float('inf')\n\n        eval_count = 0\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            scores = np.array([func(p) for p in positions])\n            eval_count += self.num_particles\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_scores[better_mask] = scores[better_mask]\n            personal_best_positions[better_mask] = positions[better_mask]\n\n            min_score_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[min_score_idx] < global_best_score:\n                global_best_score = personal_best_scores[min_score_idx]\n                global_best_position = personal_best_positions[min_score_idx]\n\n            # Adaptive cognitive and social components\n            adaptive_c1 = self.c1 * np.exp(-eval_count / (0.5 * self.budget))\n            adaptive_c2 = self.c2 * (1 - np.exp(-eval_count / (0.5 * self.budget)))\n\n            # Update velocities and positions using hybrid PSO-GA update rule\n            r1 = np.random.rand(self.num_particles, self.dim)\n            r2 = np.random.rand(self.num_particles, self.dim)\n            velocities = (self.w * velocities +\n                          adaptive_c1 * r1 * (personal_best_positions - positions) +\n                          adaptive_c2 * r2 * (global_best_position - positions))\n            velocities = np.clip(velocities, -self.velocity_clamp, self.velocity_clamp)\n            positions += velocities\n            positions = np.clip(positions, self.lb, self.ub)\n\n            # Genetic Algorithm operations with adjusted crossover and mutation\n            for i in range(self.num_particles):\n                if np.random.rand() < self.crossover_rate:\n                    idxs = [idx for idx in range(self.num_particles) if idx != i]\n                    neighbor_idx = np.random.choice(idxs)\n                    partner = positions[neighbor_idx]\n                    mask = np.random.rand(self.dim) < 0.5\n                    child = np.where(mask, positions[i], partner)\n\n                    if np.random.rand() < self.mutation_rate:\n                        mutation_idx = np.random.randint(self.dim)\n                        mutation_value = np.random.uniform(self.lb, self.ub)\n                        child[mutation_idx] = mutation_value\n\n                    child_score = func(child)\n                    eval_count += 1\n                    if child_score < scores[i]:\n                        positions[i] = child\n                        scores[i] = child_score\n\n                    if eval_count >= self.budget:\n                        break\n\n            # Update global best with the latest evaluations\n            current_best_idx = np.argmin(scores)\n            if scores[current_best_idx] < global_best_score:\n                global_best_score = scores[current_best_idx]\n                global_best_position = positions[current_best_idx]\n\n        return global_best_position", "name": "EnhancedHybridPSO_GA", "description": "Enhanced Hybrid PSO-GA with Adaptive Neighborhood Learning and Dynamic Velocity Clamping for Superior Convergence Performance.", "configspace": "", "generation": 36, "fitness": 0.263256877071607, "feedback": "The algorithm EnhancedHybridPSO_GA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.20.", "error": "", "parent_id": "71679915-b7d2-4246-a9b8-9b30791aa78f", "metadata": {"aucs": [0.5479142257206375, 0.8733139519160813, 0.7470646421428483, 0.49708868349448765, 0.4908964973247153, 0.885111056990434, 0.530113656502047, 0.650303357821306, 0.8837967858500426, 0.7833329934059293, 0.7410808318590891, 0.1067457300502519, 0.7790944025423938, 0.7650655643369453, 0.21692193600141996, 0.7633605033512999, 0.25073753042658886, 0.4057495726498046, 0.1519153264908396, 0.15013864292125578, 0.16476777588636737, 0.268161744455672, 0.16252855253465637, 0.17040700718769908, 0.09483064042490075, 0.19107847583103854, 0.09175162588912189, 0.1018675840595259, 0.127194588161462, 0.12677727748671364, 0.12747048867233657, 0.12273245363135032, 0.15603101906284678, 0.13505741224290813, 0.13421832929042743, 0.08097461815213758, 0.2631126330245306, 0.3409114290413624, 0.7582403005349256, 0.6884547246382335, 0.2340942158207575, 0.759620250418968, 0.7194780170422049, 0.21775384973535916, 0.7614704114102562, 0.17856237771990435, 0.14004926295876685, 0.20498566747834357, 0.21605785066131256, 0.2432707485184925, 0.21819793148221867, 0.19864290602193235, 0.15748633771439524, 0.22988967700594176, 0.2519527269141032, 0.3130896045784809, 0.18204631176621655, 0.27342844515543807, 0.21041763355616971, 0.37127851032727877, 0.2279329840518356, 0.2930099186249706, 0.2309151224475613, 0.19735600083812255, 0.28896289224988103, 0.21943044135717304, 0.19125594628644194, 0.13283101419186083, 0.16347427567203454, 0.14281424219222827, 0.14922588924372848, 0.3110454353794465, 0.13007851490126554, 0.12693702970221965, 0.18208131869168587, 0.13033482714498745, 0.14059461345741076, 0.1363524828446081, 0.12513345113512786, 0.12718515588643253, 0.15830275868677213, 9.999999999998899e-05, 9.999999999998899e-05, 0.007033300014292032, 9.999999999998899e-05, 0.0692280007045436, 9.999999999998899e-05, 0.061264059820140604, 0.1410228763843867, 0.0010787510277752155, 0.11085285982516235, 0.18552752413877382, 0.1378981969001397, 0.06861407381104567, 0.04781357396724384, 0.08202340166108057, 0.11236613148218799, 0.104450700340048, 0.12471206097812215, 0.1798386128346947, 0.09569611159781233, 0.14616454151042002, 0.1528134760659925, 0.17358599329078095, 0.07629535184404035, 0.13978101065160575, 0.1849316511546888, 0.11754695158012651, 0.18502796401129185, 0.1308589465156068, 0.19795436495359608, 0.21817149998059326, 0.3815587135324662, 0.24541016677021288, 0.31775226747532737, 0.2813595260800428, 0.09904030036778855, 0.4827902467479802, 0.45200028664003256, 0.459362005792911, 0.4393814397353527, 0.4743474088943229, 0.336533150140633, 0.36385046359400264, 0.5042741639213788, 0.37261575530535274, 0.08466699834122204, 0.13485259792926607, 0.07432058702982924, 0.10034155530504563, 0.14734617996197052, 0.12941236852052718, 0.1121099764180371, 0.7055419266578731, 0.0945933843433977, 0.21058781300609708, 0.18026075557907129, 0.32151534276420835, 0.21034651016824424, 0.19015205272764957, 0.17976654229620437, 0.1870615604545358, 0.2147345695281777, 0.3036626384007033, 0.2240699807389105, 0.278060189417185, 0.26906506024299703, 0.30991791455100515, 0.29867519049605284, 0.37927830380574923, 0.26156707735141516, 0.4245212143073859, 0.21872915614955946, 0.18422724924797995, 0.23488367378832276, 0.21114438010851078, 0.26222062229319043, 0.29482868523855454, 0.21308479622219179, 0.21084956253288134, 0.21254098306462188, 0.2093368888562186, 0.26677597789108065, 0.22214104595235762, 0.22149705946464104, 0.2657142046590263, 0.21956359781878831, 0.21127316734903245, 0.23022587813700457, 0.2515313875055788, 0.21518629525114585, 0.18870574515102867, 0.2058083944296133, 0.23213954057753128, 0.24521930849857654, 0.24249002806191722, 0.20726155294191162, 0.2249910907826037, 0.19716607832346367, 0.1917341053613838, 0.813601958304412, 0.18464856274360075, 0.18445973557805195, 0.8358012229907429, 0.19628097955085022, 0.6670259870443671, 0.6185364159538957, 0.7640463292454353, 0.5173568886467141, 0.4903952862714027, 0.4830905037807397, 0.3636936532192284, 0.20608496507951646, 0.2077658957691083, 0.44063589243674806, 0.6900892452210353, 0.2763594718441895, 0.179720743538201, 0.1856269683621028, 0.18681395850672744, 0.17561509668416708, 0.18652694985319518, 0.18003046317720728, 0.22062181631569133, 0.19158652736683568, 0.18043273919265435, 0.2015146474105758, 0.08523527198664815, 0.0867845427211078, 0.12190645058371408, 0.0972179072078816, 0.09183852966714134, 0.07676436969118772, 0.09808121224804, 0.09560689936763933, 0.08741910858190605]}, "mutation_prompt": null}
{"id": "b2813ea2-5fdf-4f39-9456-2345bf67391f", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_GA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.num_particles = 40  # Reduced to focus on promising areas\n        self.w = 0.6  # Adjusted inertia for balance between exploration and exploitation\n        self.c1 = 1.5  # Adaptive cognitive component\n        self.c2 = 2.2  # Increased social component to enhance attraction to global best\n        self.mutation_rate = 0.25  # Increased mutation rate for diversity\n        self.crossover_rate = 0.6  # Adjusted crossover rate for improved exploitation\n\n    def __call__(self, func):\n        # Initialize particles\n        positions = np.random.uniform(self.lb, self.ub, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.num_particles, float('inf'))\n        global_best_position = np.zeros(self.dim)\n        global_best_score = float('inf')\n\n        eval_count = 0\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            scores = np.array([func(p) for p in positions])\n            eval_count += self.num_particles\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_scores[better_mask] = scores[better_mask]\n            personal_best_positions[better_mask] = positions[better_mask]\n\n            min_score_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[min_score_idx] < global_best_score:\n                global_best_score = personal_best_scores[min_score_idx]\n                global_best_position = personal_best_positions[min_score_idx]\n\n            # Adaptive cognitive and social components\n            adaptive_c1 = self.c1 * np.exp(-eval_count / (0.4 * self.budget))\n            adaptive_c2 = self.c2 * (1 - np.exp(-eval_count / (0.4 * self.budget)))\n\n            # Update velocities and positions using hybrid PSO-GA update rule\n            r1 = np.random.rand(self.num_particles, self.dim)\n            r2 = np.random.rand(self.num_particles, self.dim)\n            velocities = (self.w * velocities +\n                          adaptive_c1 * r1 * (personal_best_positions - positions) +\n                          adaptive_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.lb, self.ub)\n\n            # Genetic Algorithm operations\n            for i in range(self.num_particles):\n                if np.random.rand() < self.crossover_rate:\n                    idxs = [idx for idx in range(self.num_particles) if idx != i]\n                    partner = positions[np.random.choice(idxs)]\n                    mask = np.random.rand(self.dim) < 0.5\n                    child = np.where(mask, positions[i], partner)\n\n                    if np.random.rand() < self.mutation_rate:\n                        mutation_idx = np.random.randint(self.dim)\n                        mutation_value = np.random.uniform(self.lb, self.ub)\n                        child[mutation_idx] = mutation_value\n\n                    child_score = func(child)\n                    eval_count += 1\n                    if child_score < scores[i]:\n                        positions[i] = child\n                        scores[i] = child_score\n\n                    if eval_count >= self.budget:\n                        break\n\n            # Update global best with the latest evaluations\n            current_best_idx = np.argmin(scores)\n            if scores[current_best_idx] < global_best_score:\n                global_best_score = scores[current_best_idx]\n                global_best_position = positions[current_best_idx]\n\n        return global_best_position", "name": "EnhancedHybridPSO_GA", "description": "Enhanced Hybrid PSO-GA with Dynamic Population Refinement and Targeted Mutation for Accelerated Convergence.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "71679915-b7d2-4246-a9b8-9b30791aa78f", "metadata": {"aucs": [0.8709116999593831, 0.8723138723777221, 0.8768372615335654, 0.8617868929087722, 0.8732786663332638, 0.8700165787014595, 0.7565562986219209, 0.868539258880491, 0.8709766980904352, 0.7164359951709853, 0.7048047712591957, 0.4776950380186241, 0.3855705320648811, 0.6623877477389744, 0.7604071468026499, 0.2925765172942847, 0.6462031836272428, 0.19553392270172443, 0.17303437138306488, 0.2311803368732268, 0.13147514920023173, 0.14639486955092984, 0.35218672427787756, 0.35487832224036875, 0.14866342766770446, 0.32622137780232907, 0.17580831107043648, 0.1364785949220515, 0.13723180340024177, 0.1415672077043013, 0.1034515896336532, 0.18768357811791359, 0.11499926313848663, 0.14052555748747397, 0.1397271088896036, 0.14224280497807062, 0.8572855482713462, 0.8816167955365596, 0.8719308246693213, 0.9193998394786392, 0.914420324363186, 0.868569508913773, 0.9178142773244033, 0.8901375456634961, 0.9104234556450416, 0.44374478233240466, 0.7135385169264723, 0.28224185632107246, 0.6757261041085597, 0.5347767213601308, 0.6924610301299955, 0.2150090318021105, 0.5979667369466203, 0.46334160313151795, 0.3816440509835938, 0.8871688407181226, 0.2215335955350327, 0.2782753108644027, 0.20804701301111983, 0.21414455095505636, 0.17006784993710677, 0.14936435372393353, 0.8927547238016643, 0.12598746301048813, 0.27674670478297914, 0.13402205898302322, 0.1989156862933854, 0.1637406030113836, 0.15700652057774145, 0.3784850467672597, 0.20359559468799404, 0.15199652764569382, 0.19805528150264373, 0.12909579769588853, 0.20974198883930295, 0.13618812474127684, 0.1676843122643138, 0.21199600895034987, 0.1806227083724674, 0.18720342152943903, 0.14286907178205843, 0.011209799583482005, 0.05529339075019002, 9.999999999998899e-05, 0.10832408699422724, 0.04279531077019072, 9.999999999998899e-05, 0.05451701182477431, 0.06287221396818243, 0.011708930366438275, 0.11851476671790695, 0.13042357546193484, 0.08751705868258464, 0.0737520182321394, 0.0674670842998144, 0.07040643281963133, 0.12270959020209427, 0.1635158390187902, 0.11337901101866699, 9.999999999998899e-05, 0.12060053095909329, 0.15135623777850848, 0.1888409906988574, 0.21600226247055165, 0.12214764580372828, 0.1405721141220454, 0.23155685722371033, 0.2630130022138708, 0.1288308910254673, 0.34621738907919575, 0.27668944855796795, 0.07016384558757949, 0.11322576437915599, 0.07104408037199961, 0.20232014360368966, 0.17029684759892205, 0.1043090462902142, 0.5275849797575713, 0.4916609332810673, 0.5484482146725321, 0.6025381266452674, 0.5669340898622877, 0.540035744668264, 0.5335086626702187, 0.5645246800771313, 0.5675543526425648, 0.10220124270145459, 0.17235856712732534, 0.09015062051346068, 0.14918869038205118, 0.14833937478444825, 0.1265665437173411, 0.13741787062809396, 0.10950728317396385, 0.10727360923944129, 0.1522830180351078, 0.19161055363162882, 0.22403061555925252, 0.19664252516112934, 0.19353340288045007, 0.2143631657275058, 0.22899864457304753, 0.20507301754383522, 0.16376887897753145, 0.25889297875502104, 0.30324011541506257, 0.20595125965070904, 0.273450660627921, 0.5507256147127081, 0.33491973351863924, 0.2679250418098513, 0.2868145497806951, 0.5045353871494462, 0.2422052565907501, 0.27251688689126796, 0.22336131551185512, 0.2281901599841637, 0.1532587735635741, 0.23681089449201387, 0.17474848273382282, 0.28874861636043514, 0.26641830685633283, 0.2296548129849213, 0.22112564705591653, 0.4116295558833244, 0.27429704557205437, 0.25393708255507086, 0.20692391605978377, 0.2326379270132466, 0.19551239397576992, 0.2154097795892288, 0.22901002088179723, 0.18804644526911107, 0.18831793637834637, 0.19084701804057014, 0.2870924905379486, 0.19422011941911022, 0.1967708819138012, 0.22007520569987904, 0.20426687081246941, 0.17535235983947695, 0.1956085758016729, 0.18513856718686927, 0.853351435696617, 0.3560060671921448, 0.8757283763917089, 0.8553559198811277, 0.16919964030308454, 0.13442874366711544, 0.5821816685326726, 0.719751672453101, 0.46208413758601397, 0.7491859575447042, 0.20931336361852104, 0.20509540991197794, 0.3883684528344128, 0.499071632722356, 0.3318319362175811, 0.19639170561099495, 0.19765120753207144, 0.1974169342458848, 0.20355066541306377, 0.17175700260853521, 0.17872396251533595, 0.18059120011176089, 0.17875517461522827, 0.196857160154308, 0.1007064099381123, 0.0992299406111311, 0.09211341496887471, 0.08741383495575883, 0.07795395188648158, 0.15317868552169456, 0.07059919688751182, 0.08629132951339868, 0.0918739748027434]}, "mutation_prompt": null}
{"id": "2b5c6693-526e-4ea2-8adc-c759d4c3a55c", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_GA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.num_particles = 40  # Reduced to focus on promising areas\n        self.w = 0.6  # Adjusted inertia for balance between exploration and exploitation\n        self.c1 = 1.5  # Adaptive cognitive component\n        self.c2 = 2.2  # Increased social component to enhance attraction to global best\n        self.mutation_rate = 0.25  # Increased mutation rate for diversity\n        self.crossover_rate = 0.6  # Adjusted crossover rate for improved exploitation\n\n    def __call__(self, func):\n        # Initialize particles\n        positions = np.random.uniform(self.lb, self.ub, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.num_particles, float('inf'))\n        global_best_position = np.zeros(self.dim)\n        global_best_score = float('inf')\n\n        eval_count = 0\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            scores = np.array([func(p) for p in positions])\n            eval_count += self.num_particles\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_scores[better_mask] = scores[better_mask]\n            personal_best_positions[better_mask] = positions[better_mask]\n\n            min_score_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[min_score_idx] < global_best_score:\n                global_best_score = personal_best_scores[min_score_idx]\n                global_best_position = personal_best_positions[min_score_idx]\n\n            # Adaptive cognitive and social components\n            adaptive_c1 = self.c1 * np.exp(-eval_count / (0.4 * self.budget))\n            adaptive_c2 = self.c2 * (1 - np.exp(-eval_count / (0.4 * self.budget)))\n\n            # Update velocities and positions using hybrid PSO-GA update rule\n            r1 = np.random.rand(self.num_particles, self.dim)\n            r2 = np.random.rand(self.num_particles, self.dim)\n            velocities = (self.w * velocities +\n                          adaptive_c1 * r1 * (personal_best_positions - positions) +\n                          adaptive_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.lb, self.ub)\n\n            # Genetic Algorithm operations\n            for i in range(self.num_particles):\n                if np.random.rand() < self.crossover_rate:\n                    idxs = [idx for idx in range(self.num_particles) if idx != i]\n                    partner = positions[np.random.choice(idxs)]\n                    mask = np.random.rand(self.dim) < 0.5\n                    child = np.where(mask, positions[i], partner)\n\n                    if np.random.rand() < self.mutation_rate:\n                        mutation_idx = np.random.randint(self.dim)\n                        mutation_value = np.random.uniform(self.lb, self.ub)\n                        child[mutation_idx] = mutation_value\n\n                    child_score = func(child)\n                    eval_count += 1\n                    if child_score < scores[i]:\n                        positions[i] = child\n                        scores[i] = child_score\n\n                    if eval_count >= self.budget:\n                        break\n\n            # Update global best with the latest evaluations\n            current_best_idx = np.argmin(scores)\n            if scores[current_best_idx] < global_best_score:\n                global_best_score = scores[current_best_idx]\n                global_best_position = positions[current_best_idx]\n\n        return global_best_position", "name": "EnhancedHybridPSO_GA", "description": "Enhanced Hybrid PSO-GA with Dynamic Population Refinement and Targeted Mutation for Accelerated Convergence.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "71679915-b7d2-4246-a9b8-9b30791aa78f", "metadata": {"aucs": [0.8709116999593831, 0.8723138723777221, 0.8768372615335654, 0.8617868929087722, 0.8732786663332638, 0.8700165787014595, 0.7565562986219209, 0.868539258880491, 0.8709766980904352, 0.7164359951709853, 0.7048047712591957, 0.4776950380186241, 0.3855705320648811, 0.6623877477389744, 0.7604071468026499, 0.2925765172942847, 0.6462031836272428, 0.19553392270172443, 0.17303437138306488, 0.2311803368732268, 0.13147514920023173, 0.14639486955092984, 0.35218672427787756, 0.35487832224036875, 0.14866342766770446, 0.32622137780232907, 0.17580831107043648, 0.1364785949220515, 0.13723180340024177, 0.1415672077043013, 0.1034515896336532, 0.18768357811791359, 0.11499926313848663, 0.14052555748747397, 0.1397271088896036, 0.14224280497807062, 0.8572855482713462, 0.8816167955365596, 0.8719308246693213, 0.9193998394786392, 0.914420324363186, 0.868569508913773, 0.9178142773244033, 0.8901375456634961, 0.9104234556450416, 0.44374478233240466, 0.7135385169264723, 0.28224185632107246, 0.6757261041085597, 0.5347767213601308, 0.6924610301299955, 0.2150090318021105, 0.5979667369466203, 0.46334160313151795, 0.3816440509835938, 0.8871688407181226, 0.2215335955350327, 0.2782753108644027, 0.20804701301111983, 0.21414455095505636, 0.17006784993710677, 0.14936435372393353, 0.8927547238016643, 0.12598746301048813, 0.27674670478297914, 0.13402205898302322, 0.1989156862933854, 0.1637406030113836, 0.15700652057774145, 0.3784850467672597, 0.20359559468799404, 0.15199652764569382, 0.19805528150264373, 0.12909579769588853, 0.20974198883930295, 0.13618812474127684, 0.1676843122643138, 0.21199600895034987, 0.1806227083724674, 0.18720342152943903, 0.14286907178205843, 0.011209799583482005, 0.05529339075019002, 9.999999999998899e-05, 0.10832408699422724, 0.04279531077019072, 9.999999999998899e-05, 0.05451701182477431, 0.06287221396818243, 0.011708930366438275, 0.11851476671790695, 0.13042357546193484, 0.08751705868258464, 0.0737520182321394, 0.0674670842998144, 0.07040643281963133, 0.12270959020209427, 0.1635158390187902, 0.11337901101866699, 9.999999999998899e-05, 0.12060053095909329, 0.15135623777850848, 0.1888409906988574, 0.21600226247055165, 0.12214764580372828, 0.1405721141220454, 0.23155685722371033, 0.2630130022138708, 0.1288308910254673, 0.34621738907919575, 0.27668944855796795, 0.07016384558757949, 0.11322576437915599, 0.07104408037199961, 0.20232014360368966, 0.17029684759892205, 0.1043090462902142, 0.5275849797575713, 0.4916609332810673, 0.5484482146725321, 0.6025381266452674, 0.5669340898622877, 0.540035744668264, 0.5335086626702187, 0.5645246800771313, 0.5675543526425648, 0.10220124270145459, 0.17235856712732534, 0.09015062051346068, 0.14918869038205118, 0.14833937478444825, 0.1265665437173411, 0.13741787062809396, 0.10950728317396385, 0.10727360923944129, 0.1522830180351078, 0.19161055363162882, 0.22403061555925252, 0.19664252516112934, 0.19353340288045007, 0.2143631657275058, 0.22899864457304753, 0.20507301754383522, 0.16376887897753145, 0.25889297875502104, 0.30324011541506257, 0.20595125965070904, 0.273450660627921, 0.5507256147127081, 0.33491973351863924, 0.2679250418098513, 0.2868145497806951, 0.5045353871494462, 0.2422052565907501, 0.27251688689126796, 0.22336131551185512, 0.2281901599841637, 0.1532587735635741, 0.23681089449201387, 0.17474848273382282, 0.28874861636043514, 0.26641830685633283, 0.2296548129849213, 0.22112564705591653, 0.4116295558833244, 0.27429704557205437, 0.25393708255507086, 0.20692391605978377, 0.2326379270132466, 0.19551239397576992, 0.2154097795892288, 0.22901002088179723, 0.18804644526911107, 0.18831793637834637, 0.19084701804057014, 0.2870924905379486, 0.19422011941911022, 0.1967708819138012, 0.22007520569987904, 0.20426687081246941, 0.17535235983947695, 0.1956085758016729, 0.18513856718686927, 0.853351435696617, 0.3560060671921448, 0.8757283763917089, 0.8553559198811277, 0.16919964030308454, 0.13442874366711544, 0.5821816685326726, 0.719751672453101, 0.46208413758601397, 0.7491859575447042, 0.20931336361852104, 0.20509540991197794, 0.3883684528344128, 0.499071632722356, 0.3318319362175811, 0.19639170561099495, 0.19765120753207144, 0.1974169342458848, 0.20355066541306377, 0.17175700260853521, 0.17872396251533595, 0.18059120011176089, 0.17875517461522827, 0.196857160154308, 0.1007064099381123, 0.0992299406111311, 0.09211341496887471, 0.08741383495575883, 0.07795395188648158, 0.15317868552169456, 0.07059919688751182, 0.08629132951339868, 0.0918739748027434]}, "mutation_prompt": null}
{"id": "d545d0ab-b67d-478f-931f-fd1084ae57d2", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_GA_V2:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.num_particles = 35  # Reduced particle count for focused search\n        self.w_init = 0.7  # Initial inertia\n        self.w_final = 0.3  # Final inertia for accelerated convergence\n        self.c1 = 1.8  # Slightly increased cognitive component\n        self.c2 = 2.0  # Adjusted social component\n        self.mutation_rate = 0.2  # Lower mutation rate\n        self.crossover_rate = 0.7  # Increased crossover rate\n        \n    def __call__(self, func):\n        positions = np.random.uniform(self.lb, self.ub, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.num_particles, float('inf'))\n        global_best_position = np.zeros(self.dim)\n        global_best_score = float('inf')\n\n        eval_count = 0\n\n        while eval_count < self.budget:\n            scores = np.array([func(p) for p in positions])\n            eval_count += self.num_particles\n\n            better_mask = scores < personal_best_scores\n            personal_best_scores[better_mask] = scores[better_mask]\n            personal_best_positions[better_mask] = positions[better_mask]\n\n            min_score_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[min_score_idx] < global_best_score:\n                global_best_score = personal_best_scores[min_score_idx]\n                global_best_position = personal_best_positions[min_score_idx]\n\n            # Momentum adaptation\n            w = self.w_final + (self.w_init - self.w_final) * (1 - eval_count / self.budget)\n\n            adaptive_c1 = self.c1 * (1 - eval_count / self.budget)\n            adaptive_c2 = self.c2 * (eval_count / self.budget)\n\n            r1 = np.random.rand(self.num_particles, self.dim)\n            r2 = np.random.rand(self.num_particles, self.dim)\n            velocities = (w * velocities +\n                          adaptive_c1 * r1 * (personal_best_positions - positions) +\n                          adaptive_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.lb, self.ub)\n\n            for i in range(self.num_particles):\n                if np.random.rand() < self.crossover_rate:\n                    idxs = [idx for idx in range(self.num_particles) if idx != i]\n                    partner = positions[np.random.choice(idxs)]\n                    mask = np.random.rand(self.dim) < 0.5\n                    child = np.where(mask, positions[i], partner)\n\n                    if np.random.rand() < self.mutation_rate:\n                        mutation_idx = np.random.randint(self.dim)\n                        mutation_value = np.random.uniform(self.lb, self.ub)\n                        child[mutation_idx] = mutation_value\n\n                    child_score = func(child)\n                    eval_count += 1\n                    if child_score < scores[i]:\n                        positions[i] = child\n                        scores[i] = child_score\n\n                    if eval_count >= self.budget:\n                        break\n\n            current_best_idx = np.argmin(scores)\n            if scores[current_best_idx] < global_best_score:\n                global_best_score = scores[current_best_idx]\n                global_best_position = positions[current_best_idx]\n\n        return global_best_position", "name": "EnhancedHybridPSO_GA_V2", "description": "Hybrid Adaptive PSO-GA with Accelerated Convergence through Momentum Adaptation and Enhanced Selection Dynamics.", "configspace": "", "generation": 39, "fitness": 0.29204546040825885, "feedback": "The algorithm EnhancedHybridPSO_GA_V2 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.24.", "error": "", "parent_id": "71679915-b7d2-4246-a9b8-9b30791aa78f", "metadata": {"aucs": [0.8661879874349964, 0.8511035918553417, 0.854500197069456, 0.4337846486739628, 0.8462295941510594, 0.8554378899806168, 0.852735223800799, 0.8474124668598717, 0.44059324008671197, 0.7443745572444613, 0.755315029057607, 0.46527897837952104, 0.7364368359219697, 0.7300954487914786, 0.7502069360046745, 0.7400382382745445, 0.7616288995363856, 0.7362932328859415, 0.17441860826636857, 0.15442360941055777, 0.16061906868029963, 0.1587026337067451, 0.14608427928098722, 0.16701793606172555, 0.1452841349509637, 0.24073661142764968, 0.1546038191320731, 0.16250451051514625, 0.1240657842755607, 0.1269462202181426, 0.15767491755443297, 0.1123388906589673, 0.14129081271292832, 0.12902052158204913, 0.16031971711438742, 0.12794980620929874, 0.24405034422746852, 0.7804637585014638, 0.5718841497054945, 0.2658193097915721, 0.8920550636543219, 0.7578396135225962, 0.7329047043731833, 0.8774478382369173, 0.8062734028891316, 0.2801488011098483, 0.1871195921506862, 0.2592681878564552, 0.2160798084147314, 0.1688433249528225, 0.18506001217847634, 0.1369815224413412, 0.145643896383297, 0.5083583843870005, 0.2715032891996134, 0.2210792822788461, 0.2325525922786824, 0.8165402597746876, 0.2086938197578777, 0.356907875382947, 0.2099200309883429, 0.3421932735070329, 0.8534888765002907, 0.2015002330372272, 0.3534293681136259, 0.20781771128958482, 0.26053857482226916, 0.13197714235166236, 0.1444266860001191, 0.18446909583380122, 0.13453767246316617, 0.17194442522022513, 0.12671176108513194, 0.12130711427908514, 0.1660143137666179, 0.13644040423355241, 0.15451971678867327, 0.13030889941800483, 0.14437070662140483, 0.1291360950074637, 0.17293002972392646, 9.999999999998899e-05, 0.042782548251209085, 0.050179975117178977, 9.999999999998899e-05, 9.999999999998899e-05, 0.03802332718077017, 0.06479121745831484, 0.054273951102235096, 0.032280866506086414, 0.1387714952188004, 0.16827190172980677, 0.12418282757389165, 0.08406464179828088, 0.0358894497892448, 0.06522109353022953, 0.10457483394866052, 0.1704141421690425, 0.13169548773581607, 0.1573884437469686, 0.09081805068748439, 0.13562190176416078, 0.12320750651726031, 0.17099855457916724, 0.09288492824790062, 0.13072218060954588, 0.2994752202719798, 0.09889306004876397, 0.17927418426135788, 0.12166523790101857, 0.3331699294989734, 0.10681952816703177, 0.20189363147001516, 0.0722564364691829, 0.21540205870328888, 0.1381198873532934, 0.09013833973920138, 0.4893603793457052, 0.500700837045388, 0.6198472862220095, 0.5348878954275597, 0.5375928931701199, 0.5004476981540913, 0.47307486313652036, 0.5319108929145784, 0.5450204539776833, 0.11248610413129667, 0.08530622593191384, 0.0986983541383315, 0.08798062679205054, 0.13306461825462446, 0.10469500573824553, 0.13264269316767063, 0.10606997325805478, 0.09467031877331733, 0.14984124111904562, 0.18765717852036112, 0.13917176564354794, 0.13249636972418288, 0.16067181603563097, 0.2655485064979787, 0.24135129551676404, 0.23026616918197906, 0.13852908471090852, 0.2777375912597567, 0.3455659268639041, 0.2176996052343212, 0.39762973248649436, 0.2642246740376504, 0.45525436339805214, 0.4639201075693773, 0.4468599677757312, 0.32492340228363314, 0.1528400224281995, 0.19115646987152546, 0.23906997638548477, 0.19948347683136602, 0.2815618098040348, 0.2874091395822824, 0.25156389923899614, 0.22162423389137964, 0.2557772562335394, 0.20298375757862774, 0.20236588751878626, 0.21582290191320408, 0.2192285300082617, 0.23081922733542115, 0.19384041051068612, 0.20300558116286116, 0.19463034119935985, 0.21260907839030185, 0.2075816315153296, 0.20728941726925576, 0.3597872012685752, 0.19763167960960726, 0.2268527642081466, 0.19153454642822776, 0.18333693653536753, 0.2402469647081371, 0.4712109873214577, 0.7980622927856941, 0.7987022364555681, 0.18503157776679924, 0.8379270127473399, 0.7132568504088954, 0.8548901270825321, 0.49485458894144996, 0.8249523704530183, 0.5090670318536011, 0.7626103592179552, 0.15414143747878328, 0.42852363342810207, 0.20661358391128615, 0.2047812847086462, 0.5815095475309373, 0.15332355502943829, 0.3887295022545313, 0.20878303737311488, 0.1780773836147337, 0.19445626801729787, 0.18814647077386815, 0.19991846279065384, 0.18891780153608095, 0.1912794380464835, 0.17792526342412296, 0.2049922521255909, 0.2049818066735768, 0.09094114202217096, 0.09248118041337638, 0.09143714040072048, 0.08842008117017597, 0.07918875372843792, 0.09473382421965382, 0.08200238715077068, 0.0988884939366439, 0.0825785411104305]}, "mutation_prompt": null}
{"id": "c098db7d-7caa-4419-8ab1-7cf24a417ead", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_GA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.num_particles = 45  # Slightly increased particles for better exploration\n        self.w = 0.5  # Further reduced inertia for swifter convergence\n        self.c1 = 1.7  # Increased cognitive component for quicker personal learning\n        self.c2 = 2.0  # Decreased social component to balance exploration\n        self.mutation_rate = 0.3  # Higher mutation rate to maintain diversity\n        self.crossover_rate = 0.7  # Increased crossover rate for more exploitation\n\n    def __call__(self, func):\n        # Initialize particles\n        positions = np.random.uniform(self.lb, self.ub, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.num_particles, float('inf'))\n        global_best_position = np.zeros(self.dim)\n        global_best_score = float('inf')\n\n        eval_count = 0\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            scores = np.array([func(p) for p in positions])\n            eval_count += self.num_particles\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_scores[better_mask] = scores[better_mask]\n            personal_best_positions[better_mask] = positions[better_mask]\n\n            min_score_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[min_score_idx] < global_best_score:\n                global_best_score = personal_best_scores[min_score_idx]\n                global_best_position = personal_best_positions[min_score_idx]\n\n            # Adaptive cognitive and social components\n            adaptive_c1 = self.c1 * (1 - eval_count / self.budget)\n            adaptive_c2 = self.c2 * np.log1p(eval_count / (0.1 * self.budget))\n\n            # Update velocities and positions using hybrid PSO-GA update rule\n            r1 = np.random.rand(self.num_particles, self.dim)\n            r2 = np.random.rand(self.num_particles, self.dim)\n            velocities = (self.w * velocities +\n                          adaptive_c1 * r1 * (personal_best_positions - positions) +\n                          adaptive_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.lb, self.ub)\n\n            # Genetic Algorithm operations\n            for i in range(self.num_particles):\n                if np.random.rand() < self.crossover_rate:\n                    idxs = [idx for idx in range(self.num_particles) if idx != i]\n                    partner = positions[np.random.choice(idxs)]\n                    mask = np.random.rand(self.dim) < 0.5\n                    child = np.where(mask, positions[i], partner)\n\n                    if np.random.rand() < self.mutation_rate:\n                        mutation_idx = np.random.randint(self.dim)\n                        mutation_value = np.random.uniform(self.lb, self.ub)\n                        child[mutation_idx] = mutation_value\n\n                    child_score = func(child)\n                    eval_count += 1\n                    if child_score < scores[i]:\n                        positions[i] = child\n                        scores[i] = child_score\n\n                    if eval_count >= self.budget:\n                        break\n\n            # Update global best with the latest evaluations\n            current_best_idx = np.argmin(scores)\n            if scores[current_best_idx] < global_best_score:\n                global_best_score = scores[current_best_idx]\n                global_best_position = positions[current_best_idx]\n\n        return global_best_position", "name": "EnhancedHybridPSO_GA", "description": "Enhanced Hybrid PSO-GA with Adaptive Particle Swarm Dynamics and Genetic Operators for Improved Convergence.", "configspace": "", "generation": 40, "fitness": 0.2582843522889668, "feedback": "The algorithm EnhancedHybridPSO_GA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.23.", "error": "", "parent_id": "71679915-b7d2-4246-a9b8-9b30791aa78f", "metadata": {"aucs": [0.691433771005741, 0.6628414398137162, 0.7721685308879074, 0.719152177240362, 0.7442884953094188, 0.60433402631424, 0.8029013588641096, 0.792276470872253, 0.762984889405354, 0.23446701556940153, 0.16519732449312563, 0.22062278189245144, 0.30612116247786847, 0.1677137868803864, 0.3983231102965137, 0.24703604792830558, 0.23668778655455258, 0.26647233326346165, 0.15413977514022592, 0.12928911429643974, 0.12488855054513348, 0.11710573257634482, 0.09689976474683937, 0.13074651239311785, 0.12568396581015917, 0.17746870350344401, 0.1939247733633569, 0.1210002176466729, 0.12876099822659381, 0.0857746007393907, 0.12576273206449295, 0.09635153128431595, 0.09225507023518509, 0.1228916609985583, 0.11051488798480191, 0.11179241936767415, 0.9347396607489344, 0.9292845647286634, 0.928908324106563, 0.9341788112927527, 0.9219414961449108, 0.9340364403835157, 0.92971420550824, 0.9350999102839902, 0.9315878406009259, 0.4101833093009435, 0.392032276097939, 0.37992062689364836, 0.340219626063326, 0.3555066459215902, 0.3765709278528113, 0.26194208459789425, 0.4217241537251277, 0.39152504978434455, 0.2328124515550598, 0.7824070936565575, 0.21711522598154442, 0.35423671627793185, 0.2785454597937649, 0.2750902271455363, 0.23262374914935346, 0.21482577905894418, 0.23368726057196676, 0.18518748207463198, 0.17360312972664527, 0.17678519908929213, 0.15827880893529978, 0.17911142150134307, 0.1378054764237039, 0.20299872658323193, 0.21630503701437165, 0.1851707990368019, 0.19575987358633962, 0.16779535991348216, 0.18950678683777156, 0.12566610923878618, 0.18425221660293534, 0.19987323395228518, 0.18504426524622763, 0.19534620149851645, 0.15072435345608282, 9.999999999998899e-05, 0.014826826693054906, 0.033408429434217735, 0.07842671044746807, 9.999999999998899e-05, 0.04246731052091324, 0.004773095526701576, 9.999999999998899e-05, 9.999999999998899e-05, 0.1145197716138806, 0.09143241579007388, 0.12372045565643552, 0.08341057212063752, 0.051706611823787885, 0.038013886200024216, 0.09039048273289696, 0.07469771927046387, 0.0823177866849677, 9.999999999998899e-05, 0.10544114031110552, 0.0019410993351338668, 0.10089456583131884, 0.12230513755622474, 0.09317539649211226, 0.1257542964971624, 0.060913251494231324, 9.999999999998899e-05, 0.10768384283150068, 0.0699183442801472, 0.18962533243452107, 0.1723081173687766, 0.07038610763679187, 0.15009787162486865, 0.16381154190768688, 0.1727965575015814, 0.0812563714712593, 0.5055749416171074, 0.5452115320416269, 0.5097344037178917, 0.48874085191937877, 0.5051407367128963, 0.49321184907327065, 0.5575825635881382, 0.5120821113571632, 0.4979845921996434, 0.11019539328027461, 0.1013883164514442, 0.1211673637531896, 0.15945526919999797, 0.10376427939932986, 0.10495111074673946, 0.06525334258785587, 0.1178922106704049, 0.10249266273774615, 0.20303864086281342, 0.12374705206340963, 0.15440616590560663, 0.316524245970359, 0.2357152155762856, 0.15380819912543808, 0.22188058638162178, 0.23817140575756046, 0.17721751170582634, 0.35106886990626984, 0.2537074127433313, 0.4320210457462734, 0.34124163555891196, 0.3021532452040163, 0.3383517244136681, 0.2310812660971454, 0.3955493009899803, 0.3480424043736613, 0.22461606878781726, 0.20050740845130688, 0.2019371018108692, 0.24952363898552865, 0.21282030322294465, 0.20142578361881314, 0.24431813705829064, 0.22364502953330645, 0.1925244015596067, 0.18688658305904782, 0.192455073283049, 0.22108859154378002, 0.1928522826821103, 0.22284416433420695, 0.23594913889324753, 0.19446563406665718, 0.1942402803935448, 0.2439063732830613, 0.19283435085306988, 0.18579003314238585, 0.20356238364610457, 0.24287900006455354, 0.23730702443513896, 0.21818523287914882, 0.22594595286069574, 0.2267173338179086, 0.21548699145142192, 0.17313790679523955, 0.9012247724126188, 0.1862864636896142, 0.9188793960742926, 0.19876376481866342, 0.8802274734906048, 0.14140122062840887, 0.16722817826291592, 0.16595379978625058, 0.5013283649797137, 0.15602485756502937, 0.20841944320726635, 0.20950913531234605, 0.15225104449621918, 0.1529714375938891, 0.31690399642819045, 0.10585864778534615, 0.10406619719336663, 0.17977641029703173, 0.20274295985208524, 0.18014982096836651, 0.19733576372923123, 0.18806376349600296, 0.18382275559578898, 0.20998350461920656, 0.21352803622416094, 0.17933835113543606, 0.07342252008353967, 0.08375143049865186, 0.07707216312264864, 0.0771240503968118, 0.08196828617509522, 0.0747886510605098, 0.09436003701470275, 0.0699962572231092, 0.08452650822418728]}, "mutation_prompt": null}
{"id": "fd033934-32be-4eb8-90a6-89c77f642f3d", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_GA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.num_particles = 40  # Reduced to focus on promising areas\n        self.w = 0.6  # Adjusted inertia for balance between exploration and exploitation\n        self.c1 = 1.5  # Adaptive cognitive component\n        self.c2 = 2.2  # Increased social component to enhance attraction to global best\n        self.mutation_rate = 0.25  # Increased mutation rate for diversity\n        self.crossover_rate = 0.6  # Adjusted crossover rate for improved exploitation\n\n    def __call__(self, func):\n        # Initialize particles\n        positions = np.random.uniform(self.lb, self.ub, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.num_particles, float('inf'))\n        global_best_position = np.zeros(self.dim)\n        global_best_score = float('inf')\n\n        eval_count = 0\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            scores = np.array([func(p) for p in positions])\n            eval_count += self.num_particles\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_scores[better_mask] = scores[better_mask]\n            personal_best_positions[better_mask] = positions[better_mask]\n\n            min_score_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[min_score_idx] < global_best_score:\n                global_best_score = personal_best_scores[min_score_idx]\n                global_best_position = personal_best_positions[min_score_idx]\n\n            # Adaptive cognitive and social components\n            adaptive_c1 = self.c1 * np.exp(-eval_count / (0.4 * self.budget))\n            adaptive_c2 = self.c2 * (1 - np.exp(-eval_count / (0.4 * self.budget)))\n\n            # Update velocities and positions using hybrid PSO-GA update rule\n            r1 = np.random.rand(self.num_particles, self.dim)\n            r2 = np.random.rand(self.num_particles, self.dim)\n            velocities = (self.w * velocities +\n                          adaptive_c1 * r1 * (personal_best_positions - positions) +\n                          adaptive_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.lb, self.ub)\n\n            # Genetic Algorithm operations\n            for i in range(self.num_particles):\n                if np.random.rand() < self.crossover_rate:\n                    idxs = [idx for idx in range(self.num_particles) if idx != i]\n                    partner = positions[np.random.choice(idxs)]\n                    mask = np.random.rand(self.dim) < 0.5\n                    child = np.where(mask, positions[i], partner)\n\n                    if np.random.rand() < self.mutation_rate:\n                        mutation_idx = np.random.randint(self.dim)\n                        mutation_value = np.random.uniform(self.lb, self.ub)\n                        child[mutation_idx] = mutation_value\n\n                    child_score = func(child)\n                    eval_count += 1\n                    if child_score < scores[i]:\n                        positions[i] = child\n                        scores[i] = child_score\n\n                    if eval_count >= self.budget:\n                        break\n\n            # Update global best with the latest evaluations\n            current_best_idx = np.argmin(scores)\n            if scores[current_best_idx] < global_best_score:\n                global_best_score = scores[current_best_idx]\n                global_best_position = positions[current_best_idx]\n\n        return global_best_position", "name": "EnhancedHybridPSO_GA", "description": "Enhanced Hybrid PSO-GA with Dynamic Population Refinement and Targeted Mutation for Accelerated Convergence.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "71679915-b7d2-4246-a9b8-9b30791aa78f", "metadata": {"aucs": [0.8709116999593831, 0.8723138723777221, 0.8768372615335654, 0.8617868929087722, 0.8732786663332638, 0.8700165787014595, 0.7565562986219209, 0.868539258880491, 0.8709766980904352, 0.7164359951709853, 0.7048047712591957, 0.4776950380186241, 0.3855705320648811, 0.6623877477389744, 0.7604071468026499, 0.2925765172942847, 0.6462031836272428, 0.19553392270172443, 0.17303437138306488, 0.2311803368732268, 0.13147514920023173, 0.14639486955092984, 0.35218672427787756, 0.35487832224036875, 0.14866342766770446, 0.32622137780232907, 0.17580831107043648, 0.1364785949220515, 0.13723180340024177, 0.1415672077043013, 0.1034515896336532, 0.18768357811791359, 0.11499926313848663, 0.14052555748747397, 0.1397271088896036, 0.14224280497807062, 0.8572855482713462, 0.8816167955365596, 0.8719308246693213, 0.9193998394786392, 0.914420324363186, 0.868569508913773, 0.9178142773244033, 0.8901375456634961, 0.9104234556450416, 0.44374478233240466, 0.7135385169264723, 0.28224185632107246, 0.6757261041085597, 0.5347767213601308, 0.6924610301299955, 0.2150090318021105, 0.5979667369466203, 0.46334160313151795, 0.3816440509835938, 0.8871688407181226, 0.2215335955350327, 0.2782753108644027, 0.20804701301111983, 0.21414455095505636, 0.17006784993710677, 0.14936435372393353, 0.8927547238016643, 0.12598746301048813, 0.27674670478297914, 0.13402205898302322, 0.1989156862933854, 0.1637406030113836, 0.15700652057774145, 0.3784850467672597, 0.20359559468799404, 0.15199652764569382, 0.19805528150264373, 0.12909579769588853, 0.20974198883930295, 0.13618812474127684, 0.1676843122643138, 0.21199600895034987, 0.1806227083724674, 0.18720342152943903, 0.14286907178205843, 0.011209799583482005, 0.05529339075019002, 9.999999999998899e-05, 0.10832408699422724, 0.04279531077019072, 9.999999999998899e-05, 0.05451701182477431, 0.06287221396818243, 0.011708930366438275, 0.11851476671790695, 0.13042357546193484, 0.08751705868258464, 0.0737520182321394, 0.0674670842998144, 0.07040643281963133, 0.12270959020209427, 0.1635158390187902, 0.11337901101866699, 9.999999999998899e-05, 0.12060053095909329, 0.15135623777850848, 0.1888409906988574, 0.21600226247055165, 0.12214764580372828, 0.1405721141220454, 0.23155685722371033, 0.2630130022138708, 0.1288308910254673, 0.34621738907919575, 0.27668944855796795, 0.07016384558757949, 0.11322576437915599, 0.07104408037199961, 0.20232014360368966, 0.17029684759892205, 0.1043090462902142, 0.5275849797575713, 0.4916609332810673, 0.5484482146725321, 0.6025381266452674, 0.5669340898622877, 0.540035744668264, 0.5335086626702187, 0.5645246800771313, 0.5675543526425648, 0.10220124270145459, 0.17235856712732534, 0.09015062051346068, 0.14918869038205118, 0.14833937478444825, 0.1265665437173411, 0.13741787062809396, 0.10950728317396385, 0.10727360923944129, 0.1522830180351078, 0.19161055363162882, 0.22403061555925252, 0.19664252516112934, 0.19353340288045007, 0.2143631657275058, 0.22899864457304753, 0.20507301754383522, 0.16376887897753145, 0.25889297875502104, 0.30324011541506257, 0.20595125965070904, 0.273450660627921, 0.5507256147127081, 0.33491973351863924, 0.2679250418098513, 0.2868145497806951, 0.5045353871494462, 0.2422052565907501, 0.27251688689126796, 0.22336131551185512, 0.2281901599841637, 0.1532587735635741, 0.23681089449201387, 0.17474848273382282, 0.28874861636043514, 0.26641830685633283, 0.2296548129849213, 0.22112564705591653, 0.4116295558833244, 0.27429704557205437, 0.25393708255507086, 0.20692391605978377, 0.2326379270132466, 0.19551239397576992, 0.2154097795892288, 0.22901002088179723, 0.18804644526911107, 0.18831793637834637, 0.19084701804057014, 0.2870924905379486, 0.19422011941911022, 0.1967708819138012, 0.22007520569987904, 0.20426687081246941, 0.17535235983947695, 0.1956085758016729, 0.18513856718686927, 0.853351435696617, 0.3560060671921448, 0.8757283763917089, 0.8553559198811277, 0.16919964030308454, 0.13442874366711544, 0.5821816685326726, 0.719751672453101, 0.46208413758601397, 0.7491859575447042, 0.20931336361852104, 0.20509540991197794, 0.3883684528344128, 0.499071632722356, 0.3318319362175811, 0.19639170561099495, 0.19765120753207144, 0.1974169342458848, 0.20355066541306377, 0.17175700260853521, 0.17872396251533595, 0.18059120011176089, 0.17875517461522827, 0.196857160154308, 0.1007064099381123, 0.0992299406111311, 0.09211341496887471, 0.08741383495575883, 0.07795395188648158, 0.15317868552169456, 0.07059919688751182, 0.08629132951339868, 0.0918739748027434]}, "mutation_prompt": null}
{"id": "ae81285b-8fdc-45f5-bc75-6e4af7cdc789", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_GA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.num_particles = 40  # Reduced to focus on promising areas\n        self.w = 0.6  # Adjusted inertia for balance between exploration and exploitation\n        self.c1 = 1.5  # Adaptive cognitive component\n        self.c2 = 2.2  # Increased social component to enhance attraction to global best\n        self.mutation_rate = 0.25  # Increased mutation rate for diversity\n        self.crossover_rate = 0.6  # Adjusted crossover rate for improved exploitation\n\n    def __call__(self, func):\n        # Initialize particles\n        positions = np.random.uniform(self.lb, self.ub, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.num_particles, float('inf'))\n        global_best_position = np.zeros(self.dim)\n        global_best_score = float('inf')\n\n        eval_count = 0\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            scores = np.array([func(p) for p in positions])\n            eval_count += self.num_particles\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_scores[better_mask] = scores[better_mask]\n            personal_best_positions[better_mask] = positions[better_mask]\n\n            min_score_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[min_score_idx] < global_best_score:\n                global_best_score = personal_best_scores[min_score_idx]\n                global_best_position = personal_best_positions[min_score_idx]\n\n            # Adaptive cognitive and social components\n            adaptive_c1 = self.c1 * np.exp(-eval_count / (0.4 * self.budget))\n            adaptive_c2 = self.c2 * (1 - np.exp(-eval_count / (0.4 * self.budget)))\n\n            # Update velocities and positions using hybrid PSO-GA update rule\n            r1 = np.random.rand(self.num_particles, self.dim)\n            r2 = np.random.rand(self.num_particles, self.dim)\n            velocities = (self.w * velocities +\n                          adaptive_c1 * r1 * (personal_best_positions - positions) +\n                          adaptive_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.lb, self.ub)\n\n            # Genetic Algorithm operations\n            for i in range(self.num_particles):\n                if np.random.rand() < self.crossover_rate:\n                    idxs = [idx for idx in range(self.num_particles) if idx != i]\n                    partner = positions[np.random.choice(idxs)]\n                    mask = np.random.rand(self.dim) < 0.5\n                    child = np.where(mask, positions[i], partner)\n\n                    if np.random.rand() < self.mutation_rate:\n                        mutation_idx = np.random.randint(self.dim)\n                        mutation_value = np.random.uniform(self.lb, self.ub)\n                        child[mutation_idx] = mutation_value\n\n                    child_score = func(child)\n                    eval_count += 1\n                    if child_score < scores[i]:\n                        positions[i] = child\n                        scores[i] = child_score\n\n                    if eval_count >= self.budget:\n                        break\n\n            # Update global best with the latest evaluations\n            current_best_idx = np.argmin(scores)\n            if scores[current_best_idx] < global_best_score:\n                global_best_score = scores[current_best_idx]\n                global_best_position = positions[current_best_idx]\n\n        return global_best_position", "name": "EnhancedHybridPSO_GA", "description": "Enhanced Hybrid PSO-GA with Dynamic Population Refinement and Targeted Mutation for Accelerated Convergence.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "71679915-b7d2-4246-a9b8-9b30791aa78f", "metadata": {"aucs": [0.8709116999593831, 0.8723138723777221, 0.8768372615335654, 0.8617868929087722, 0.8732786663332638, 0.8700165787014595, 0.7565562986219209, 0.868539258880491, 0.8709766980904352, 0.7164359951709853, 0.7048047712591957, 0.4776950380186241, 0.3855705320648811, 0.6623877477389744, 0.7604071468026499, 0.2925765172942847, 0.6462031836272428, 0.19553392270172443, 0.17303437138306488, 0.2311803368732268, 0.13147514920023173, 0.14639486955092984, 0.35218672427787756, 0.35487832224036875, 0.14866342766770446, 0.32622137780232907, 0.17580831107043648, 0.1364785949220515, 0.13723180340024177, 0.1415672077043013, 0.1034515896336532, 0.18768357811791359, 0.11499926313848663, 0.14052555748747397, 0.1397271088896036, 0.14224280497807062, 0.8572855482713462, 0.8816167955365596, 0.8719308246693213, 0.9193998394786392, 0.914420324363186, 0.868569508913773, 0.9178142773244033, 0.8901375456634961, 0.9104234556450416, 0.44374478233240466, 0.7135385169264723, 0.28224185632107246, 0.6757261041085597, 0.5347767213601308, 0.6924610301299955, 0.2150090318021105, 0.5979667369466203, 0.46334160313151795, 0.3816440509835938, 0.8871688407181226, 0.2215335955350327, 0.2782753108644027, 0.20804701301111983, 0.21414455095505636, 0.17006784993710677, 0.14936435372393353, 0.8927547238016643, 0.12598746301048813, 0.27674670478297914, 0.13402205898302322, 0.1989156862933854, 0.1637406030113836, 0.15700652057774145, 0.3784850467672597, 0.20359559468799404, 0.15199652764569382, 0.19805528150264373, 0.12909579769588853, 0.20974198883930295, 0.13618812474127684, 0.1676843122643138, 0.21199600895034987, 0.1806227083724674, 0.18720342152943903, 0.14286907178205843, 0.011209799583482005, 0.05529339075019002, 9.999999999998899e-05, 0.10832408699422724, 0.04279531077019072, 9.999999999998899e-05, 0.05451701182477431, 0.06287221396818243, 0.011708930366438275, 0.11851476671790695, 0.13042357546193484, 0.08751705868258464, 0.0737520182321394, 0.0674670842998144, 0.07040643281963133, 0.12270959020209427, 0.1635158390187902, 0.11337901101866699, 9.999999999998899e-05, 0.12060053095909329, 0.15135623777850848, 0.1888409906988574, 0.21600226247055165, 0.12214764580372828, 0.1405721141220454, 0.23155685722371033, 0.2630130022138708, 0.1288308910254673, 0.34621738907919575, 0.27668944855796795, 0.07016384558757949, 0.11322576437915599, 0.07104408037199961, 0.20232014360368966, 0.17029684759892205, 0.1043090462902142, 0.5275849797575713, 0.4916609332810673, 0.5484482146725321, 0.6025381266452674, 0.5669340898622877, 0.540035744668264, 0.5335086626702187, 0.5645246800771313, 0.5675543526425648, 0.10220124270145459, 0.17235856712732534, 0.09015062051346068, 0.14918869038205118, 0.14833937478444825, 0.1265665437173411, 0.13741787062809396, 0.10950728317396385, 0.10727360923944129, 0.1522830180351078, 0.19161055363162882, 0.22403061555925252, 0.19664252516112934, 0.19353340288045007, 0.2143631657275058, 0.22899864457304753, 0.20507301754383522, 0.16376887897753145, 0.25889297875502104, 0.30324011541506257, 0.20595125965070904, 0.273450660627921, 0.5507256147127081, 0.33491973351863924, 0.2679250418098513, 0.2868145497806951, 0.5045353871494462, 0.2422052565907501, 0.27251688689126796, 0.22336131551185512, 0.2281901599841637, 0.1532587735635741, 0.23681089449201387, 0.17474848273382282, 0.28874861636043514, 0.26641830685633283, 0.2296548129849213, 0.22112564705591653, 0.4116295558833244, 0.27429704557205437, 0.25393708255507086, 0.20692391605978377, 0.2326379270132466, 0.19551239397576992, 0.2154097795892288, 0.22901002088179723, 0.18804644526911107, 0.18831793637834637, 0.19084701804057014, 0.2870924905379486, 0.19422011941911022, 0.1967708819138012, 0.22007520569987904, 0.20426687081246941, 0.17535235983947695, 0.1956085758016729, 0.18513856718686927, 0.853351435696617, 0.3560060671921448, 0.8757283763917089, 0.8553559198811277, 0.16919964030308454, 0.13442874366711544, 0.5821816685326726, 0.719751672453101, 0.46208413758601397, 0.7491859575447042, 0.20931336361852104, 0.20509540991197794, 0.3883684528344128, 0.499071632722356, 0.3318319362175811, 0.19639170561099495, 0.19765120753207144, 0.1974169342458848, 0.20355066541306377, 0.17175700260853521, 0.17872396251533595, 0.18059120011176089, 0.17875517461522827, 0.196857160154308, 0.1007064099381123, 0.0992299406111311, 0.09211341496887471, 0.08741383495575883, 0.07795395188648158, 0.15317868552169456, 0.07059919688751182, 0.08629132951339868, 0.0918739748027434]}, "mutation_prompt": null}
{"id": "a17ee768-79d7-47fd-ab52-b3ff1f5adb23", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_GA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.num_particles = 40  # Reduced to focus on promising areas\n        self.w = 0.6  # Adjusted inertia for balance between exploration and exploitation\n        self.c1 = 1.5  # Adaptive cognitive component\n        self.c2 = 2.2  # Increased social component to enhance attraction to global best\n        self.mutation_rate = 0.25  # Increased mutation rate for diversity\n        self.crossover_rate = 0.6  # Adjusted crossover rate for improved exploitation\n\n    def __call__(self, func):\n        # Initialize particles\n        positions = np.random.uniform(self.lb, self.ub, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.num_particles, float('inf'))\n        global_best_position = np.zeros(self.dim)\n        global_best_score = float('inf')\n\n        eval_count = 0\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            scores = np.array([func(p) for p in positions])\n            eval_count += self.num_particles\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_scores[better_mask] = scores[better_mask]\n            personal_best_positions[better_mask] = positions[better_mask]\n\n            min_score_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[min_score_idx] < global_best_score:\n                global_best_score = personal_best_scores[min_score_idx]\n                global_best_position = personal_best_positions[min_score_idx]\n\n            # Adaptive cognitive and social components\n            adaptive_c1 = self.c1 * np.exp(-eval_count / (0.4 * self.budget))\n            adaptive_c2 = self.c2 * (1 - np.exp(-eval_count / (0.4 * self.budget)))\n\n            # Update velocities and positions using hybrid PSO-GA update rule\n            r1 = np.random.rand(self.num_particles, self.dim)\n            r2 = np.random.rand(self.num_particles, self.dim)\n            velocities = (self.w * velocities +\n                          adaptive_c1 * r1 * (personal_best_positions - positions) +\n                          adaptive_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.lb, self.ub)\n\n            # Genetic Algorithm operations\n            for i in range(self.num_particles):\n                if np.random.rand() < self.crossover_rate:\n                    idxs = [idx for idx in range(self.num_particles) if idx != i]\n                    partner = positions[np.random.choice(idxs)]\n                    mask = np.random.rand(self.dim) < 0.5\n                    child = np.where(mask, positions[i], partner)\n\n                    if np.random.rand() < self.mutation_rate:\n                        mutation_idx = np.random.randint(self.dim)\n                        mutation_value = np.random.uniform(self.lb, self.ub)\n                        child[mutation_idx] = mutation_value\n\n                    child_score = func(child)\n                    eval_count += 1\n                    if child_score < scores[i]:\n                        positions[i] = child\n                        scores[i] = child_score\n\n                    if eval_count >= self.budget:\n                        break\n\n            # Update global best with the latest evaluations\n            current_best_idx = np.argmin(scores)\n            if scores[current_best_idx] < global_best_score:\n                global_best_score = scores[current_best_idx]\n                global_best_position = positions[current_best_idx]\n\n        return global_best_position", "name": "EnhancedHybridPSO_GA", "description": "Enhanced Hybrid PSO-GA with Dynamic Population Refinement and Targeted Mutation for Accelerated Convergence.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "71679915-b7d2-4246-a9b8-9b30791aa78f", "metadata": {"aucs": [0.8709116999593831, 0.8723138723777221, 0.8768372615335654, 0.8617868929087722, 0.8732786663332638, 0.8700165787014595, 0.7565562986219209, 0.868539258880491, 0.8709766980904352, 0.7164359951709853, 0.7048047712591957, 0.4776950380186241, 0.3855705320648811, 0.6623877477389744, 0.7604071468026499, 0.2925765172942847, 0.6462031836272428, 0.19553392270172443, 0.17303437138306488, 0.2311803368732268, 0.13147514920023173, 0.14639486955092984, 0.35218672427787756, 0.35487832224036875, 0.14866342766770446, 0.32622137780232907, 0.17580831107043648, 0.1364785949220515, 0.13723180340024177, 0.1415672077043013, 0.1034515896336532, 0.18768357811791359, 0.11499926313848663, 0.14052555748747397, 0.1397271088896036, 0.14224280497807062, 0.8572855482713462, 0.8816167955365596, 0.8719308246693213, 0.9193998394786392, 0.914420324363186, 0.868569508913773, 0.9178142773244033, 0.8901375456634961, 0.9104234556450416, 0.44374478233240466, 0.7135385169264723, 0.28224185632107246, 0.6757261041085597, 0.5347767213601308, 0.6924610301299955, 0.2150090318021105, 0.5979667369466203, 0.46334160313151795, 0.3816440509835938, 0.8871688407181226, 0.2215335955350327, 0.2782753108644027, 0.20804701301111983, 0.21414455095505636, 0.17006784993710677, 0.14936435372393353, 0.8927547238016643, 0.12598746301048813, 0.27674670478297914, 0.13402205898302322, 0.1989156862933854, 0.1637406030113836, 0.15700652057774145, 0.3784850467672597, 0.20359559468799404, 0.15199652764569382, 0.19805528150264373, 0.12909579769588853, 0.20974198883930295, 0.13618812474127684, 0.1676843122643138, 0.21199600895034987, 0.1806227083724674, 0.18720342152943903, 0.14286907178205843, 0.011209799583482005, 0.05529339075019002, 9.999999999998899e-05, 0.10832408699422724, 0.04279531077019072, 9.999999999998899e-05, 0.05451701182477431, 0.06287221396818243, 0.011708930366438275, 0.11851476671790695, 0.13042357546193484, 0.08751705868258464, 0.0737520182321394, 0.0674670842998144, 0.07040643281963133, 0.12270959020209427, 0.1635158390187902, 0.11337901101866699, 9.999999999998899e-05, 0.12060053095909329, 0.15135623777850848, 0.1888409906988574, 0.21600226247055165, 0.12214764580372828, 0.1405721141220454, 0.23155685722371033, 0.2630130022138708, 0.1288308910254673, 0.34621738907919575, 0.27668944855796795, 0.07016384558757949, 0.11322576437915599, 0.07104408037199961, 0.20232014360368966, 0.17029684759892205, 0.1043090462902142, 0.5275849797575713, 0.4916609332810673, 0.5484482146725321, 0.6025381266452674, 0.5669340898622877, 0.540035744668264, 0.5335086626702187, 0.5645246800771313, 0.5675543526425648, 0.10220124270145459, 0.17235856712732534, 0.09015062051346068, 0.14918869038205118, 0.14833937478444825, 0.1265665437173411, 0.13741787062809396, 0.10950728317396385, 0.10727360923944129, 0.1522830180351078, 0.19161055363162882, 0.22403061555925252, 0.19664252516112934, 0.19353340288045007, 0.2143631657275058, 0.22899864457304753, 0.20507301754383522, 0.16376887897753145, 0.25889297875502104, 0.30324011541506257, 0.20595125965070904, 0.273450660627921, 0.5507256147127081, 0.33491973351863924, 0.2679250418098513, 0.2868145497806951, 0.5045353871494462, 0.2422052565907501, 0.27251688689126796, 0.22336131551185512, 0.2281901599841637, 0.1532587735635741, 0.23681089449201387, 0.17474848273382282, 0.28874861636043514, 0.26641830685633283, 0.2296548129849213, 0.22112564705591653, 0.4116295558833244, 0.27429704557205437, 0.25393708255507086, 0.20692391605978377, 0.2326379270132466, 0.19551239397576992, 0.2154097795892288, 0.22901002088179723, 0.18804644526911107, 0.18831793637834637, 0.19084701804057014, 0.2870924905379486, 0.19422011941911022, 0.1967708819138012, 0.22007520569987904, 0.20426687081246941, 0.17535235983947695, 0.1956085758016729, 0.18513856718686927, 0.853351435696617, 0.3560060671921448, 0.8757283763917089, 0.8553559198811277, 0.16919964030308454, 0.13442874366711544, 0.5821816685326726, 0.719751672453101, 0.46208413758601397, 0.7491859575447042, 0.20931336361852104, 0.20509540991197794, 0.3883684528344128, 0.499071632722356, 0.3318319362175811, 0.19639170561099495, 0.19765120753207144, 0.1974169342458848, 0.20355066541306377, 0.17175700260853521, 0.17872396251533595, 0.18059120011176089, 0.17875517461522827, 0.196857160154308, 0.1007064099381123, 0.0992299406111311, 0.09211341496887471, 0.08741383495575883, 0.07795395188648158, 0.15317868552169456, 0.07059919688751182, 0.08629132951339868, 0.0918739748027434]}, "mutation_prompt": null}
{"id": "1b1c9f48-4eea-4608-b5b2-1b50793dedcf", "solution": "import numpy as np\n\nclass AdaptiveDynamicPSO_GA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.num_particles = 50  # Increased to enhance exploration\n        self.w = 0.5  # Lowered inertia for faster convergence\n        self.c1 = 1.8  # Increased cognitive component for individual learning\n        self.c2 = 2.0  # Adjusted social component for global attraction\n        self.mutation_rate = 0.3  # Further increased mutation rate for diversity\n        self.crossover_rate = 0.7  # Increased crossover rate to improve mixture of solutions\n\n    def __call__(self, func):\n        # Initialize particles\n        positions = np.random.uniform(self.lb, self.ub, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-0.2, 0.2, (self.num_particles, self.dim))  # Larger initial velocity range\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.num_particles, float('inf'))\n        global_best_position = np.zeros(self.dim)\n        global_best_score = float('inf')\n\n        eval_count = 0\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            scores = np.array([func(p) for p in positions])\n            eval_count += self.num_particles\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_scores[better_mask] = scores[better_mask]\n            personal_best_positions[better_mask] = positions[better_mask]\n\n            min_score_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[min_score_idx] < global_best_score:\n                global_best_score = personal_best_scores[min_score_idx]\n                global_best_position = personal_best_positions[min_score_idx]\n\n            # Adaptive cognitive and social components\n            cycle_factor = np.sin(np.pi * eval_count / self.budget)\n            adaptive_c1 = self.c1 * (0.5 + 0.5 * cycle_factor)\n            adaptive_c2 = self.c2 * (0.5 + 0.5 * (1 - cycle_factor))\n\n            # Update velocities and positions using hybrid PSO-GA update rule\n            r1 = np.random.rand(self.num_particles, self.dim)\n            r2 = np.random.rand(self.num_particles, self.dim)\n            velocities = (self.w * velocities +\n                          adaptive_c1 * r1 * (personal_best_positions - positions) +\n                          adaptive_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.lb, self.ub)\n\n            # Genetic Algorithm operations\n            for i in range(self.num_particles):\n                if np.random.rand() < self.crossover_rate:\n                    idxs = [idx for idx in range(self.num_particles) if idx != i]\n                    partner = positions[np.random.choice(idxs)]\n                    mask = np.random.rand(self.dim) < 0.6  # Higher probability of inheriting from current particle\n                    child = np.where(mask, positions[i], partner)\n\n                    if np.random.rand() < self.mutation_rate:\n                        mutation_idx = np.random.randint(self.dim)\n                        mutation_value = np.random.normal(0, 1)  # Gaussian mutation for subtle changes\n                        child[mutation_idx] = np.clip(child[mutation_idx] + mutation_value, self.lb, self.ub)\n\n                    child_score = func(child)\n                    eval_count += 1\n                    if child_score < scores[i]:\n                        positions[i] = child\n                        scores[i] = child_score\n\n                    if eval_count >= self.budget:\n                        break\n\n            # Update global best with the latest evaluations\n            current_best_idx = np.argmin(scores)\n            if scores[current_best_idx] < global_best_score:\n                global_best_score = scores[current_best_idx]\n                global_best_position = positions[current_best_idx]\n\n        return global_best_position", "name": "AdaptiveDynamicPSO_GA", "description": "Adaptive Dynamic Particle Swarm-GA with Improved Exploration-Exploitation Balance and Enhanced Mutation Strategy.", "configspace": "", "generation": 44, "fitness": 0.2761053234409566, "feedback": "The algorithm AdaptiveDynamicPSO_GA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.25.", "error": "", "parent_id": "71679915-b7d2-4246-a9b8-9b30791aa78f", "metadata": {"aucs": [0.8008250906658296, 0.7318303915246651, 0.7655892143732789, 0.817711553958578, 0.8141717765861921, 0.8180750381532934, 0.7957902044889851, 0.7931082731057011, 0.8083608286631927, 0.5533369662250417, 0.524643828846088, 0.6314769838878804, 0.6391618958691907, 0.6563093040022812, 0.5925744524300562, 0.6218115593356117, 0.6535701475694342, 0.34167881812562284, 0.14340898195465945, 0.11163371163472635, 0.42733676270661325, 0.12705342080620652, 0.14869699677041337, 0.221793720039007, 0.14165011032461883, 0.1700716991416552, 0.17447330200037303, 0.11462523590890739, 0.13337323172427173, 0.1306313260344697, 0.13186313965039553, 0.3574968366556427, 0.06683048334978725, 0.12481863668055171, 0.1257859390979731, 0.12182765803658657, 0.9860645874569873, 0.9652483378692311, 0.9803972957087843, 0.9546724959241493, 0.9711122620939912, 0.9790788349567209, 0.9794389476516018, 0.9812559515878145, 0.9735436461992888, 0.632440012177146, 0.4516695741053556, 0.5254087187057452, 0.546251556050496, 0.4956252709186957, 0.51952649710954, 0.5691525459428273, 0.5233544102045946, 0.5789197124591543, 0.2275840448963352, 0.8200224591626049, 0.16991611940003348, 0.21466957987835622, 0.2725867682110872, 0.18737183702543547, 0.15063802288130368, 0.2800581384311489, 0.21191475364436474, 0.19301127487719383, 0.037640794353981044, 0.1782732787796356, 0.12637568895338047, 0.12717401652432914, 0.1683948365210195, 0.16711844682179966, 0.1342547758481063, 0.18885915754631122, 0.18991927242723117, 0.12406060404963704, 0.14606954138875172, 0.1577318504897981, 0.2198211765838297, 0.18542425336605295, 0.1556980691488591, 0.12927034205904386, 0.16338128976600708, 9.999999999998899e-05, 0.022866797415859952, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019777914510433092, 0.00014581473556685154, 9.999999999998899e-05, 0.018063079998156373, 0.031390508817447316, 0.05363992866310652, 0.05292333216114309, 0.0029811849789083134, 0.02436131141228104, 0.024264325792366592, 0.04790343315118584, 0.035531217728289044, 0.0408974688525805, 0.02923096445294182, 0.046060657230400315, 0.19425771033134764, 0.10806658677794745, 0.06226253184141073, 0.08670503949632313, 0.0709691581354458, 0.08053069272842694, 0.023444237316494365, 0.04472393268678365, 0.0768776431685344, 0.1494128021299166, 0.08354452742656471, 0.09406081873373184, 0.07980524456972704, 0.08035600983450275, 0.09423688349923143, 0.49751919119632104, 0.5988656987216927, 0.5179420065394787, 0.5246653683545932, 0.5468159679977416, 0.371830681393966, 0.517309667073999, 0.4550630019768005, 0.5408728101128562, 0.08819198855337074, 0.07522975930486953, 0.0686950194421928, 0.08401312236409553, 0.09611275429378785, 0.10881209121016566, 0.1069729334087981, 0.06398254932363745, 0.08255581718729477, 0.39901756170196845, 0.18091492390665076, 0.18152253432209908, 0.2454885841527289, 0.5261186705720637, 0.20037383485632754, 0.24099224832584154, 0.3310764174137951, 0.2017543580611958, 0.24635708151989077, 0.2791511822143792, 0.3141545928237979, 0.19399125616733193, 0.20786107137246557, 0.33019905405480676, 0.2892120200836351, 0.35103113366433447, 0.2175970141754402, 0.20119379780741342, 0.22449676206672142, 0.18130017836107226, 0.17582813258478802, 0.18340931153107587, 0.21876164022918054, 0.37596031183140144, 0.26264292502702724, 0.265448518368695, 0.19560283031376147, 0.1784536613078992, 0.1916677880444494, 0.19324960998406482, 0.20571058696780298, 0.2075490230105359, 0.21216268576032593, 0.20360932381963925, 0.20439422479940972, 0.23136311349275107, 0.18261362997014052, 0.20664846009355453, 0.2120004129184644, 0.24347864766496718, 0.2129062867955327, 0.22401290573294808, 0.6715298188845358, 0.20352621475752153, 0.1750654350208013, 0.16537782608250928, 0.15418055296960287, 0.1672571307957973, 0.1981079275113402, 0.19573891207221195, 0.14174488267605811, 0.17145770034078012, 0.7080873914027344, 0.5225151720844237, 0.21134540335927443, 0.07333557962219128, 0.1656289444282738, 0.5336346253184661, 0.1549032291995761, 0.10372962644186934, 0.10418813002386562, 0.6667338289755411, 0.20776546235119897, 0.1752409615628452, 0.1831963515894489, 0.17430938950341313, 0.20471438591476376, 0.18669335020973699, 0.1881545545879285, 0.18390563965296935, 0.18642717465332814, 0.07751983512576976, 0.08026086618402806, 0.08365718679456824, 0.08390575409092271, 0.0811166939505239, 0.07242354080852764, 0.08724881305675969, 0.08634949279328719, 0.07735301305860409]}, "mutation_prompt": null}
{"id": "04456489-8cf7-4ebc-94ec-5bdb440d1ba3", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_GA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.num_particles = 40  # Reduced to focus on promising areas\n        self.w = 0.6  # Adjusted inertia for balance between exploration and exploitation\n        self.c1 = 1.5  # Adaptive cognitive component\n        self.c2 = 2.2  # Increased social component to enhance attraction to global best\n        self.mutation_rate = 0.25  # Increased mutation rate for diversity\n        self.crossover_rate = 0.6  # Adjusted crossover rate for improved exploitation\n\n    def __call__(self, func):\n        # Initialize particles\n        positions = np.random.uniform(self.lb, self.ub, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.num_particles, float('inf'))\n        global_best_position = np.zeros(self.dim)\n        global_best_score = float('inf')\n\n        eval_count = 0\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            scores = np.array([func(p) for p in positions])\n            eval_count += self.num_particles\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_scores[better_mask] = scores[better_mask]\n            personal_best_positions[better_mask] = positions[better_mask]\n\n            min_score_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[min_score_idx] < global_best_score:\n                global_best_score = personal_best_scores[min_score_idx]\n                global_best_position = personal_best_positions[min_score_idx]\n\n            # Adaptive cognitive and social components\n            adaptive_c1 = self.c1 * np.exp(-eval_count / (0.4 * self.budget))\n            adaptive_c2 = self.c2 * (1 - np.exp(-eval_count / (0.4 * self.budget)))\n\n            # Update velocities and positions using hybrid PSO-GA update rule\n            r1 = np.random.rand(self.num_particles, self.dim)\n            r2 = np.random.rand(self.num_particles, self.dim)\n            velocities = (self.w * velocities +\n                          adaptive_c1 * r1 * (personal_best_positions - positions) +\n                          adaptive_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.lb, self.ub)\n\n            # Genetic Algorithm operations\n            for i in range(self.num_particles):\n                if np.random.rand() < self.crossover_rate:\n                    idxs = [idx for idx in range(self.num_particles) if idx != i]\n                    partner = positions[np.random.choice(idxs)]\n                    mask = np.random.rand(self.dim) < 0.5\n                    child = np.where(mask, positions[i], partner)\n\n                    if np.random.rand() < self.mutation_rate:\n                        mutation_idx = np.random.randint(self.dim)\n                        mutation_value = np.random.uniform(self.lb, self.ub)\n                        child[mutation_idx] = mutation_value\n\n                    child_score = func(child)\n                    eval_count += 1\n                    if child_score < scores[i]:\n                        positions[i] = child\n                        scores[i] = child_score\n\n                    if eval_count >= self.budget:\n                        break\n\n            # Update global best with the latest evaluations\n            current_best_idx = np.argmin(scores)\n            if scores[current_best_idx] < global_best_score:\n                global_best_score = scores[current_best_idx]\n                global_best_position = positions[current_best_idx]\n\n        return global_best_position", "name": "EnhancedHybridPSO_GA", "description": "Enhanced Hybrid PSO-GA with Dynamic Population Refinement and Targeted Mutation for Accelerated Convergence.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "71679915-b7d2-4246-a9b8-9b30791aa78f", "metadata": {"aucs": [0.8709116999593831, 0.8723138723777221, 0.8768372615335654, 0.8617868929087722, 0.8732786663332638, 0.8700165787014595, 0.7565562986219209, 0.868539258880491, 0.8709766980904352, 0.7164359951709853, 0.7048047712591957, 0.4776950380186241, 0.3855705320648811, 0.6623877477389744, 0.7604071468026499, 0.2925765172942847, 0.6462031836272428, 0.19553392270172443, 0.17303437138306488, 0.2311803368732268, 0.13147514920023173, 0.14639486955092984, 0.35218672427787756, 0.35487832224036875, 0.14866342766770446, 0.32622137780232907, 0.17580831107043648, 0.1364785949220515, 0.13723180340024177, 0.1415672077043013, 0.1034515896336532, 0.18768357811791359, 0.11499926313848663, 0.14052555748747397, 0.1397271088896036, 0.14224280497807062, 0.8572855482713462, 0.8816167955365596, 0.8719308246693213, 0.9193998394786392, 0.914420324363186, 0.868569508913773, 0.9178142773244033, 0.8901375456634961, 0.9104234556450416, 0.44374478233240466, 0.7135385169264723, 0.28224185632107246, 0.6757261041085597, 0.5347767213601308, 0.6924610301299955, 0.2150090318021105, 0.5979667369466203, 0.46334160313151795, 0.3816440509835938, 0.8871688407181226, 0.2215335955350327, 0.2782753108644027, 0.20804701301111983, 0.21414455095505636, 0.17006784993710677, 0.14936435372393353, 0.8927547238016643, 0.12598746301048813, 0.27674670478297914, 0.13402205898302322, 0.1989156862933854, 0.1637406030113836, 0.15700652057774145, 0.3784850467672597, 0.20359559468799404, 0.15199652764569382, 0.19805528150264373, 0.12909579769588853, 0.20974198883930295, 0.13618812474127684, 0.1676843122643138, 0.21199600895034987, 0.1806227083724674, 0.18720342152943903, 0.14286907178205843, 0.011209799583482005, 0.05529339075019002, 9.999999999998899e-05, 0.10832408699422724, 0.04279531077019072, 9.999999999998899e-05, 0.05451701182477431, 0.06287221396818243, 0.011708930366438275, 0.11851476671790695, 0.13042357546193484, 0.08751705868258464, 0.0737520182321394, 0.0674670842998144, 0.07040643281963133, 0.12270959020209427, 0.1635158390187902, 0.11337901101866699, 9.999999999998899e-05, 0.12060053095909329, 0.15135623777850848, 0.1888409906988574, 0.21600226247055165, 0.12214764580372828, 0.1405721141220454, 0.23155685722371033, 0.2630130022138708, 0.1288308910254673, 0.34621738907919575, 0.27668944855796795, 0.07016384558757949, 0.11322576437915599, 0.07104408037199961, 0.20232014360368966, 0.17029684759892205, 0.1043090462902142, 0.5275849797575713, 0.4916609332810673, 0.5484482146725321, 0.6025381266452674, 0.5669340898622877, 0.540035744668264, 0.5335086626702187, 0.5645246800771313, 0.5675543526425648, 0.10220124270145459, 0.17235856712732534, 0.09015062051346068, 0.14918869038205118, 0.14833937478444825, 0.1265665437173411, 0.13741787062809396, 0.10950728317396385, 0.10727360923944129, 0.1522830180351078, 0.19161055363162882, 0.22403061555925252, 0.19664252516112934, 0.19353340288045007, 0.2143631657275058, 0.22899864457304753, 0.20507301754383522, 0.16376887897753145, 0.25889297875502104, 0.30324011541506257, 0.20595125965070904, 0.273450660627921, 0.5507256147127081, 0.33491973351863924, 0.2679250418098513, 0.2868145497806951, 0.5045353871494462, 0.2422052565907501, 0.27251688689126796, 0.22336131551185512, 0.2281901599841637, 0.1532587735635741, 0.23681089449201387, 0.17474848273382282, 0.28874861636043514, 0.26641830685633283, 0.2296548129849213, 0.22112564705591653, 0.4116295558833244, 0.27429704557205437, 0.25393708255507086, 0.20692391605978377, 0.2326379270132466, 0.19551239397576992, 0.2154097795892288, 0.22901002088179723, 0.18804644526911107, 0.18831793637834637, 0.19084701804057014, 0.2870924905379486, 0.19422011941911022, 0.1967708819138012, 0.22007520569987904, 0.20426687081246941, 0.17535235983947695, 0.1956085758016729, 0.18513856718686927, 0.853351435696617, 0.3560060671921448, 0.8757283763917089, 0.8553559198811277, 0.16919964030308454, 0.13442874366711544, 0.5821816685326726, 0.719751672453101, 0.46208413758601397, 0.7491859575447042, 0.20931336361852104, 0.20509540991197794, 0.3883684528344128, 0.499071632722356, 0.3318319362175811, 0.19639170561099495, 0.19765120753207144, 0.1974169342458848, 0.20355066541306377, 0.17175700260853521, 0.17872396251533595, 0.18059120011176089, 0.17875517461522827, 0.196857160154308, 0.1007064099381123, 0.0992299406111311, 0.09211341496887471, 0.08741383495575883, 0.07795395188648158, 0.15317868552169456, 0.07059919688751182, 0.08629132951339868, 0.0918739748027434]}, "mutation_prompt": null}
{"id": "9c20fc37-2375-4de2-a093-8c53b20c8a5f", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_GA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.num_particles = 40  # Reduced to focus on promising areas\n        self.w = 0.6  # Adjusted inertia for balance between exploration and exploitation\n        self.c1 = 1.5  # Adaptive cognitive component\n        self.c2 = 2.2  # Increased social component to enhance attraction to global best\n        self.mutation_rate = 0.25  # Increased mutation rate for diversity\n        self.crossover_rate = 0.6  # Adjusted crossover rate for improved exploitation\n\n    def __call__(self, func):\n        # Initialize particles\n        positions = np.random.uniform(self.lb, self.ub, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.num_particles, float('inf'))\n        global_best_position = np.zeros(self.dim)\n        global_best_score = float('inf')\n\n        eval_count = 0\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            scores = np.array([func(p) for p in positions])\n            eval_count += self.num_particles\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_scores[better_mask] = scores[better_mask]\n            personal_best_positions[better_mask] = positions[better_mask]\n\n            min_score_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[min_score_idx] < global_best_score:\n                global_best_score = personal_best_scores[min_score_idx]\n                global_best_position = personal_best_positions[min_score_idx]\n\n            # Adaptive cognitive and social components\n            adaptive_c1 = self.c1 * np.exp(-eval_count / (0.4 * self.budget))\n            adaptive_c2 = self.c2 * (1 - np.exp(-eval_count / (0.4 * self.budget)))\n\n            # Update velocities and positions using hybrid PSO-GA update rule\n            r1 = np.random.rand(self.num_particles, self.dim)\n            r2 = np.random.rand(self.num_particles, self.dim)\n            velocities = (self.w * velocities +\n                          adaptive_c1 * r1 * (personal_best_positions - positions) +\n                          adaptive_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.lb, self.ub)\n\n            # Genetic Algorithm operations\n            for i in range(self.num_particles):\n                if np.random.rand() < self.crossover_rate:\n                    idxs = [idx for idx in range(self.num_particles) if idx != i]\n                    partner = positions[np.random.choice(idxs)]\n                    mask = np.random.rand(self.dim) < 0.5\n                    child = np.where(mask, positions[i], partner)\n\n                    if np.random.rand() < self.mutation_rate:\n                        mutation_idx = np.random.randint(self.dim)\n                        mutation_value = np.random.uniform(self.lb, self.ub)\n                        child[mutation_idx] = mutation_value\n\n                    child_score = func(child)\n                    eval_count += 1\n                    if child_score < scores[i]:\n                        positions[i] = child\n                        scores[i] = child_score\n\n                    if eval_count >= self.budget:\n                        break\n\n            # Update global best with the latest evaluations\n            current_best_idx = np.argmin(scores)\n            if scores[current_best_idx] < global_best_score:\n                global_best_score = scores[current_best_idx]\n                global_best_position = positions[current_best_idx]\n\n        return global_best_position", "name": "EnhancedHybridPSO_GA", "description": "Enhanced Hybrid PSO-GA with Dynamic Population Refinement and Targeted Mutation for Accelerated Convergence.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "71679915-b7d2-4246-a9b8-9b30791aa78f", "metadata": {"aucs": [0.8709116999593831, 0.8723138723777221, 0.8768372615335654, 0.8617868929087722, 0.8732786663332638, 0.8700165787014595, 0.7565562986219209, 0.868539258880491, 0.8709766980904352, 0.7164359951709853, 0.7048047712591957, 0.4776950380186241, 0.3855705320648811, 0.6623877477389744, 0.7604071468026499, 0.2925765172942847, 0.6462031836272428, 0.19553392270172443, 0.17303437138306488, 0.2311803368732268, 0.13147514920023173, 0.14639486955092984, 0.35218672427787756, 0.35487832224036875, 0.14866342766770446, 0.32622137780232907, 0.17580831107043648, 0.1364785949220515, 0.13723180340024177, 0.1415672077043013, 0.1034515896336532, 0.18768357811791359, 0.11499926313848663, 0.14052555748747397, 0.1397271088896036, 0.14224280497807062, 0.8572855482713462, 0.8816167955365596, 0.8719308246693213, 0.9193998394786392, 0.914420324363186, 0.868569508913773, 0.9178142773244033, 0.8901375456634961, 0.9104234556450416, 0.44374478233240466, 0.7135385169264723, 0.28224185632107246, 0.6757261041085597, 0.5347767213601308, 0.6924610301299955, 0.2150090318021105, 0.5979667369466203, 0.46334160313151795, 0.3816440509835938, 0.8871688407181226, 0.2215335955350327, 0.2782753108644027, 0.20804701301111983, 0.21414455095505636, 0.17006784993710677, 0.14936435372393353, 0.8927547238016643, 0.12598746301048813, 0.27674670478297914, 0.13402205898302322, 0.1989156862933854, 0.1637406030113836, 0.15700652057774145, 0.3784850467672597, 0.20359559468799404, 0.15199652764569382, 0.19805528150264373, 0.12909579769588853, 0.20974198883930295, 0.13618812474127684, 0.1676843122643138, 0.21199600895034987, 0.1806227083724674, 0.18720342152943903, 0.14286907178205843, 0.011209799583482005, 0.05529339075019002, 9.999999999998899e-05, 0.10832408699422724, 0.04279531077019072, 9.999999999998899e-05, 0.05451701182477431, 0.06287221396818243, 0.011708930366438275, 0.11851476671790695, 0.13042357546193484, 0.08751705868258464, 0.0737520182321394, 0.0674670842998144, 0.07040643281963133, 0.12270959020209427, 0.1635158390187902, 0.11337901101866699, 9.999999999998899e-05, 0.12060053095909329, 0.15135623777850848, 0.1888409906988574, 0.21600226247055165, 0.12214764580372828, 0.1405721141220454, 0.23155685722371033, 0.2630130022138708, 0.1288308910254673, 0.34621738907919575, 0.27668944855796795, 0.07016384558757949, 0.11322576437915599, 0.07104408037199961, 0.20232014360368966, 0.17029684759892205, 0.1043090462902142, 0.5275849797575713, 0.4916609332810673, 0.5484482146725321, 0.6025381266452674, 0.5669340898622877, 0.540035744668264, 0.5335086626702187, 0.5645246800771313, 0.5675543526425648, 0.10220124270145459, 0.17235856712732534, 0.09015062051346068, 0.14918869038205118, 0.14833937478444825, 0.1265665437173411, 0.13741787062809396, 0.10950728317396385, 0.10727360923944129, 0.1522830180351078, 0.19161055363162882, 0.22403061555925252, 0.19664252516112934, 0.19353340288045007, 0.2143631657275058, 0.22899864457304753, 0.20507301754383522, 0.16376887897753145, 0.25889297875502104, 0.30324011541506257, 0.20595125965070904, 0.273450660627921, 0.5507256147127081, 0.33491973351863924, 0.2679250418098513, 0.2868145497806951, 0.5045353871494462, 0.2422052565907501, 0.27251688689126796, 0.22336131551185512, 0.2281901599841637, 0.1532587735635741, 0.23681089449201387, 0.17474848273382282, 0.28874861636043514, 0.26641830685633283, 0.2296548129849213, 0.22112564705591653, 0.4116295558833244, 0.27429704557205437, 0.25393708255507086, 0.20692391605978377, 0.2326379270132466, 0.19551239397576992, 0.2154097795892288, 0.22901002088179723, 0.18804644526911107, 0.18831793637834637, 0.19084701804057014, 0.2870924905379486, 0.19422011941911022, 0.1967708819138012, 0.22007520569987904, 0.20426687081246941, 0.17535235983947695, 0.1956085758016729, 0.18513856718686927, 0.853351435696617, 0.3560060671921448, 0.8757283763917089, 0.8553559198811277, 0.16919964030308454, 0.13442874366711544, 0.5821816685326726, 0.719751672453101, 0.46208413758601397, 0.7491859575447042, 0.20931336361852104, 0.20509540991197794, 0.3883684528344128, 0.499071632722356, 0.3318319362175811, 0.19639170561099495, 0.19765120753207144, 0.1974169342458848, 0.20355066541306377, 0.17175700260853521, 0.17872396251533595, 0.18059120011176089, 0.17875517461522827, 0.196857160154308, 0.1007064099381123, 0.0992299406111311, 0.09211341496887471, 0.08741383495575883, 0.07795395188648158, 0.15317868552169456, 0.07059919688751182, 0.08629132951339868, 0.0918739748027434]}, "mutation_prompt": null}
{"id": "b2d9b1fe-5a35-4883-9568-4d12ff3b4749", "solution": "import numpy as np\n\nclass SynergisticPSO_GA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.num_particles = 45  # Slight increase for robust search\n        self.w = 0.5  # Reduced inertia for faster convergence\n        self.c1 = 1.7  # Enhanced cognitive component for better local exploration\n        self.c2 = 2.0  # Slight reduction to balance global attraction\n        self.mutation_rate = 0.3  # Adaptive mutation rate for diversity\n        self.crossover_rate = 0.7  # Increased probability for exploration\n\n    def __call__(self, func):\n        # Initialize particles\n        positions = np.random.uniform(self.lb, self.ub, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.num_particles, float('inf'))\n        global_best_position = np.zeros(self.dim)\n        global_best_score = float('inf')\n\n        eval_count = 0\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            scores = np.array([func(p) for p in positions])\n            eval_count += self.num_particles\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_scores[better_mask] = scores[better_mask]\n            personal_best_positions[better_mask] = positions[better_mask]\n\n            min_score_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[min_score_idx] < global_best_score:\n                global_best_score = personal_best_scores[min_score_idx]\n                global_best_position = personal_best_positions[min_score_idx]\n\n            # Adaptive cognitive and social components\n            adaptive_c1 = self.c1 * (1 + 0.5 * np.sin(np.pi * eval_count / self.budget))\n            adaptive_c2 = self.c2 * np.cos(np.pi * eval_count / self.budget)\n\n            # Update velocities and positions using hybrid PSO-GA update rule\n            r1 = np.random.rand(self.num_particles, self.dim)\n            r2 = np.random.rand(self.num_particles, self.dim)\n            velocities = (self.w * velocities +\n                          adaptive_c1 * r1 * (personal_best_positions - positions) +\n                          adaptive_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.lb, self.ub)\n\n            # Genetic Algorithm operations\n            for i in range(self.num_particles):\n                if np.random.rand() < self.crossover_rate:\n                    idxs = [idx for idx in range(self.num_particles) if idx != i]\n                    partner = positions[np.random.choice(idxs)]\n                    child = np.mean([positions[i], partner], axis=0)\n\n                    if np.random.rand() < self.mutation_rate:\n                        mutation_mask = np.random.rand(self.dim) < (1 / self.dim)\n                        mutation_values = np.random.uniform(self.lb, self.ub, self.dim)\n                        child = np.where(mutation_mask, mutation_values, child)\n\n                    child_score = func(child)\n                    eval_count += 1\n                    if child_score < scores[i]:\n                        positions[i] = child\n                        scores[i] = child_score\n\n                    if eval_count >= self.budget:\n                        break\n\n            # Update global best with the latest evaluations\n            current_best_idx = np.argmin(scores)\n            if scores[current_best_idx] < global_best_score:\n                global_best_score = scores[current_best_idx]\n                global_best_position = positions[current_best_idx]\n\n        return global_best_position", "name": "SynergisticPSO_GA", "description": "Synergistic PSO-GA with Enhanced Learning and Adaptive Parametric Adjustments for Rapid Convergence.", "configspace": "", "generation": 47, "fitness": 0.25475111298815434, "feedback": "The algorithm SynergisticPSO_GA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.24.", "error": "", "parent_id": "71679915-b7d2-4246-a9b8-9b30791aa78f", "metadata": {"aucs": [0.7789412652579193, 0.7953058201072498, 0.32946300177412224, 0.8426295960369264, 0.8228054606745849, 0.5386442498038547, 0.8000570724924565, 0.4566168983478103, 0.8155263235795658, 0.46294952519259347, 0.31352232006684455, 0.3417681503484422, 0.20426206735979324, 0.5794515688039632, 0.5806402442628065, 0.5666419398022879, 0.5648159818195633, 0.23370757932052078, 0.12371108008041065, 0.1611580415984014, 0.0967603348386854, 0.13590413907592025, 0.09053344412439746, 0.1684287967707223, 0.12998670374165122, 0.10977299621295933, 0.08544321636115981, 0.13554749205872196, 0.12388062688116608, 0.08430682596414041, 0.09083414334636797, 0.11005475754458782, 0.09329172154571552, 0.10627318280509368, 0.09651004747375902, 0.09614153038913209, 0.9809386342275186, 0.9756716083044782, 0.9800307448889981, 0.9744999799709742, 0.9688601293498901, 0.9501351047289811, 0.9789512544581989, 0.9771006874152022, 0.9673861975648625, 0.4186093324307929, 0.2651642941665786, 0.389234194697477, 0.2864111174387617, 0.25882853998929445, 0.15053945037482008, 0.32323725200911435, 0.2962744171642583, 0.3376428811443919, 0.22929281385056322, 0.2234262980664502, 0.20614549675614047, 0.7378811278620275, 0.19221887308308105, 0.21279477162523475, 0.20114852893898127, 0.21420083782790622, 0.3534535332566774, 0.1836674460787947, 0.12439569593205524, 0.1575719121767536, 0.006363705723761104, 0.1503419270185279, 0.09918040633756808, 0.16001747994085713, 0.11990537262995349, 0.1744553226799802, 0.12849728655623238, 0.13702264364355032, 0.1108992857648714, 0.15623592535190056, 0.1343056884489986, 0.12264443345758302, 0.15243402544904494, 9.999999999998899e-05, 0.12622240893044034, 9.999999999998899e-05, 9.999999999998899e-05, 0.045133113851806406, 0.04180196331302344, 0.054248573136231104, 9.999999999998899e-05, 0.014330486925152597, 9.999999999998899e-05, 9.999999999998899e-05, 0.06146314232222683, 0.04474091937399516, 0.06181593301707433, 0.10674772124052667, 0.02328691838294583, 0.03351449795376937, 0.04512573737443437, 0.1132822824460975, 0.053938260525559945, 0.03474280251970174, 0.08424971373704793, 0.16230992986661563, 0.08885451911615705, 0.08244929650004273, 0.06778099331311571, 0.08999152224430584, 0.07810297895645812, 0.10620489589634141, 0.08966154661211145, 0.04676354822980322, 0.040302583702538475, 0.1416504471083121, 0.09282956881086646, 0.07032366587530814, 0.14672048229135148, 0.09418955927755601, 0.07311521666917375, 0.5293209023484593, 0.4701387272694052, 0.5053824279761767, 0.4621375736866006, 0.5048927103685927, 0.46296777098841424, 0.48423666743772487, 0.23460430232920848, 0.5141962920741502, 0.09878515241953123, 0.10172731195631801, 0.09345476604050673, 0.12108755439842867, 0.11339826495509808, 0.10054451534809783, 0.0777438301791914, 0.15133691660867665, 0.11469916602662089, 0.1794552291362299, 0.27413819184832255, 0.17065485089867904, 0.3193074608258166, 0.18475499280227714, 0.14241964888989966, 0.39069139543640685, 0.2150118211208022, 0.23836595952755246, 0.367498636165154, 0.19604382791855401, 0.26987652663063244, 0.2666240684596175, 0.22757307919820347, 0.30265907379468904, 0.2876592291951263, 0.3399522476297828, 0.31064463242678, 0.2624253683152312, 0.23737676518034745, 0.2536258094068665, 0.17036232340384816, 0.2316782534486439, 0.2630048916904738, 0.26164869971981075, 0.24985043391094575, 0.2912476215445521, 0.21314155541907454, 0.16903107792998673, 0.18116799923032378, 0.19200125925164224, 0.19751734892146477, 0.19867920293569852, 0.20717684268608816, 0.19677879128583387, 0.19180354036218927, 0.20102866135216724, 0.1918176389283789, 0.17830151539496641, 0.22900281475482342, 0.22927900080173136, 0.20825208833810538, 0.201311425211937, 0.22162152241703947, 0.18249636645625, 0.7474145158244695, 0.17258114424712845, 0.14354607652383733, 0.8757198337984764, 0.1988234625571974, 0.1999948906585597, 0.13879075191721435, 0.16986831888070697, 0.8361632418758166, 0.8823005891072294, 0.20975225619546556, 0.07591378728177078, 0.19916372852335473, 0.16086302010171183, 0.1657518923567417, 0.10383746706828256, 0.35684885943541744, 0.7213681243657784, 0.18871378473264144, 0.1821288652198686, 0.190989267283605, 0.17821786811888818, 0.18684935616246467, 0.18952706346221193, 0.19443163220635729, 0.18218979459328344, 0.1869376262267528, 0.08124471820016899, 0.08277348960564379, 0.0831642504457848, 0.06566365638899463, 0.07134121111593217, 0.07926724451210398, 0.07369225514511546, 0.08676221002716178, 0.07722957449458301]}, "mutation_prompt": null}
{"id": "786913cf-2659-4fae-be9c-d1108afd34ee", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_GA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.num_particles = 40  # Reduced to focus on promising areas\n        self.w = 0.6  # Adjusted inertia for balance between exploration and exploitation\n        self.c1 = 1.5  # Adaptive cognitive component\n        self.c2 = 2.2  # Increased social component to enhance attraction to global best\n        self.mutation_rate = 0.25  # Increased mutation rate for diversity\n        self.crossover_rate = 0.6  # Adjusted crossover rate for improved exploitation\n\n    def __call__(self, func):\n        # Initialize particles\n        positions = np.random.uniform(self.lb, self.ub, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.num_particles, float('inf'))\n        global_best_position = np.zeros(self.dim)\n        global_best_score = float('inf')\n\n        eval_count = 0\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            scores = np.array([func(p) for p in positions])\n            eval_count += self.num_particles\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_scores[better_mask] = scores[better_mask]\n            personal_best_positions[better_mask] = positions[better_mask]\n\n            min_score_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[min_score_idx] < global_best_score:\n                global_best_score = personal_best_scores[min_score_idx]\n                global_best_position = personal_best_positions[min_score_idx]\n\n            # Adaptive cognitive and social components\n            adaptive_c1 = self.c1 * np.exp(-eval_count / (0.4 * self.budget))\n            adaptive_c2 = self.c2 * (1 - np.exp(-eval_count / (0.4 * self.budget)))\n\n            # Update velocities and positions using hybrid PSO-GA update rule\n            r1 = np.random.rand(self.num_particles, self.dim)\n            r2 = np.random.rand(self.num_particles, self.dim)\n            velocities = (self.w * velocities +\n                          adaptive_c1 * r1 * (personal_best_positions - positions) +\n                          adaptive_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.lb, self.ub)\n\n            # Genetic Algorithm operations\n            for i in range(self.num_particles):\n                if np.random.rand() < self.crossover_rate:\n                    idxs = [idx for idx in range(self.num_particles) if idx != i]\n                    partner = positions[np.random.choice(idxs)]\n                    mask = np.random.rand(self.dim) < 0.5\n                    child = np.where(mask, positions[i], partner)\n\n                    if np.random.rand() < self.mutation_rate:\n                        mutation_idx = np.random.randint(self.dim)\n                        mutation_value = np.random.uniform(self.lb, self.ub)\n                        child[mutation_idx] = mutation_value\n\n                    child_score = func(child)\n                    eval_count += 1\n                    if child_score < scores[i]:\n                        positions[i] = child\n                        scores[i] = child_score\n\n                    if eval_count >= self.budget:\n                        break\n\n            # Update global best with the latest evaluations\n            current_best_idx = np.argmin(scores)\n            if scores[current_best_idx] < global_best_score:\n                global_best_score = scores[current_best_idx]\n                global_best_position = positions[current_best_idx]\n\n        return global_best_position", "name": "EnhancedHybridPSO_GA", "description": "Enhanced Hybrid PSO-GA with Dynamic Population Refinement and Targeted Mutation for Accelerated Convergence.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "71679915-b7d2-4246-a9b8-9b30791aa78f", "metadata": {"aucs": [0.8709116999593831, 0.8723138723777221, 0.8768372615335654, 0.8617868929087722, 0.8732786663332638, 0.8700165787014595, 0.7565562986219209, 0.868539258880491, 0.8709766980904352, 0.7164359951709853, 0.7048047712591957, 0.4776950380186241, 0.3855705320648811, 0.6623877477389744, 0.7604071468026499, 0.2925765172942847, 0.6462031836272428, 0.19553392270172443, 0.17303437138306488, 0.2311803368732268, 0.13147514920023173, 0.14639486955092984, 0.35218672427787756, 0.35487832224036875, 0.14866342766770446, 0.32622137780232907, 0.17580831107043648, 0.1364785949220515, 0.13723180340024177, 0.1415672077043013, 0.1034515896336532, 0.18768357811791359, 0.11499926313848663, 0.14052555748747397, 0.1397271088896036, 0.14224280497807062, 0.8572855482713462, 0.8816167955365596, 0.8719308246693213, 0.9193998394786392, 0.914420324363186, 0.868569508913773, 0.9178142773244033, 0.8901375456634961, 0.9104234556450416, 0.44374478233240466, 0.7135385169264723, 0.28224185632107246, 0.6757261041085597, 0.5347767213601308, 0.6924610301299955, 0.2150090318021105, 0.5979667369466203, 0.46334160313151795, 0.3816440509835938, 0.8871688407181226, 0.2215335955350327, 0.2782753108644027, 0.20804701301111983, 0.21414455095505636, 0.17006784993710677, 0.14936435372393353, 0.8927547238016643, 0.12598746301048813, 0.27674670478297914, 0.13402205898302322, 0.1989156862933854, 0.1637406030113836, 0.15700652057774145, 0.3784850467672597, 0.20359559468799404, 0.15199652764569382, 0.19805528150264373, 0.12909579769588853, 0.20974198883930295, 0.13618812474127684, 0.1676843122643138, 0.21199600895034987, 0.1806227083724674, 0.18720342152943903, 0.14286907178205843, 0.011209799583482005, 0.05529339075019002, 9.999999999998899e-05, 0.10832408699422724, 0.04279531077019072, 9.999999999998899e-05, 0.05451701182477431, 0.06287221396818243, 0.011708930366438275, 0.11851476671790695, 0.13042357546193484, 0.08751705868258464, 0.0737520182321394, 0.0674670842998144, 0.07040643281963133, 0.12270959020209427, 0.1635158390187902, 0.11337901101866699, 9.999999999998899e-05, 0.12060053095909329, 0.15135623777850848, 0.1888409906988574, 0.21600226247055165, 0.12214764580372828, 0.1405721141220454, 0.23155685722371033, 0.2630130022138708, 0.1288308910254673, 0.34621738907919575, 0.27668944855796795, 0.07016384558757949, 0.11322576437915599, 0.07104408037199961, 0.20232014360368966, 0.17029684759892205, 0.1043090462902142, 0.5275849797575713, 0.4916609332810673, 0.5484482146725321, 0.6025381266452674, 0.5669340898622877, 0.540035744668264, 0.5335086626702187, 0.5645246800771313, 0.5675543526425648, 0.10220124270145459, 0.17235856712732534, 0.09015062051346068, 0.14918869038205118, 0.14833937478444825, 0.1265665437173411, 0.13741787062809396, 0.10950728317396385, 0.10727360923944129, 0.1522830180351078, 0.19161055363162882, 0.22403061555925252, 0.19664252516112934, 0.19353340288045007, 0.2143631657275058, 0.22899864457304753, 0.20507301754383522, 0.16376887897753145, 0.25889297875502104, 0.30324011541506257, 0.20595125965070904, 0.273450660627921, 0.5507256147127081, 0.33491973351863924, 0.2679250418098513, 0.2868145497806951, 0.5045353871494462, 0.2422052565907501, 0.27251688689126796, 0.22336131551185512, 0.2281901599841637, 0.1532587735635741, 0.23681089449201387, 0.17474848273382282, 0.28874861636043514, 0.26641830685633283, 0.2296548129849213, 0.22112564705591653, 0.4116295558833244, 0.27429704557205437, 0.25393708255507086, 0.20692391605978377, 0.2326379270132466, 0.19551239397576992, 0.2154097795892288, 0.22901002088179723, 0.18804644526911107, 0.18831793637834637, 0.19084701804057014, 0.2870924905379486, 0.19422011941911022, 0.1967708819138012, 0.22007520569987904, 0.20426687081246941, 0.17535235983947695, 0.1956085758016729, 0.18513856718686927, 0.853351435696617, 0.3560060671921448, 0.8757283763917089, 0.8553559198811277, 0.16919964030308454, 0.13442874366711544, 0.5821816685326726, 0.719751672453101, 0.46208413758601397, 0.7491859575447042, 0.20931336361852104, 0.20509540991197794, 0.3883684528344128, 0.499071632722356, 0.3318319362175811, 0.19639170561099495, 0.19765120753207144, 0.1974169342458848, 0.20355066541306377, 0.17175700260853521, 0.17872396251533595, 0.18059120011176089, 0.17875517461522827, 0.196857160154308, 0.1007064099381123, 0.0992299406111311, 0.09211341496887471, 0.08741383495575883, 0.07795395188648158, 0.15317868552169456, 0.07059919688751182, 0.08629132951339868, 0.0918739748027434]}, "mutation_prompt": null}
{"id": "fdaa8936-dde2-4042-9815-b56bea104659", "solution": "import numpy as np\n\nclass EnhancedMultiPhaseAdaptivePSO_GA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.num_particles = 50  # Increased for better exploration\n        self.w = 0.5  # Lowered inertia to enhance convergence speed\n        self.c1 = 1.2  # Adaptive cognitive component\n        self.c2 = 2.5  # Further increased social component for stronger attraction\n        self.mutation_rate = 0.3  # Higher mutation for diversity\n        self.crossover_rate = 0.7  # Increased crossover rate for diversity\n\n    def __call__(self, func):\n        # Initialize particles\n        positions = np.random.uniform(self.lb, self.ub, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-0.2, 0.2, (self.num_particles, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.num_particles, float('inf'))\n        global_best_position = np.zeros(self.dim)\n        global_best_score = float('inf')\n\n        eval_count = 0\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            scores = np.array([func(p) for p in positions])\n            eval_count += self.num_particles\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_scores[better_mask] = scores[better_mask]\n            personal_best_positions[better_mask] = positions[better_mask]\n\n            min_score_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[min_score_idx] < global_best_score:\n                global_best_score = personal_best_scores[min_score_idx]\n                global_best_position = personal_best_positions[min_score_idx]\n\n            # Adaptive cognitive and social components\n            adaptive_c1 = self.c1 * np.exp(-eval_count / (0.5 * self.budget))\n            adaptive_c2 = self.c2 * (1 - np.exp(-eval_count / (0.5 * self.budget)))\n\n            # Update velocities and positions using hybrid PSO-GA update rule\n            r1 = np.random.rand(self.num_particles, self.dim)\n            r2 = np.random.rand(self.num_particles, self.dim)\n            velocities = (self.w * velocities +\n                          adaptive_c1 * r1 * (personal_best_positions - positions) +\n                          adaptive_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.lb, self.ub)\n\n            # Genetic Algorithm operations\n            for i in range(self.num_particles):\n                if np.random.rand() < self.crossover_rate:\n                    idxs = [idx for idx in range(self.num_particles) if idx != i]\n                    partner = positions[np.random.choice(idxs)]\n                    mask = np.random.rand(self.dim) < 0.5\n                    child = np.where(mask, positions[i], partner)\n\n                    if np.random.rand() < self.mutation_rate:\n                        mutation_idx = np.random.randint(self.dim)\n                        mutation_value = np.random.uniform(self.lb, self.ub)\n                        child[mutation_idx] = mutation_value\n\n                    child_score = func(child)\n                    eval_count += 1\n                    if child_score < scores[i]:\n                        positions[i] = child\n                        scores[i] = child_score\n\n                    if eval_count >= self.budget:\n                        break\n\n            # Update global best with the latest evaluations\n            current_best_idx = np.argmin(scores)\n            if scores[current_best_idx] < global_best_score:\n                global_best_score = scores[current_best_idx]\n                global_best_position = positions[current_best_idx]\n\n        return global_best_position", "name": "EnhancedMultiPhaseAdaptivePSO_GA", "description": "Enhanced Multi-Phase Adaptive PSO-GA with Dynamic Parameter Adjustment and Focused Exploration for Superior Convergence.", "configspace": "", "generation": 49, "fitness": 0.2866002465787041, "feedback": "The algorithm EnhancedMultiPhaseAdaptivePSO_GA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.23.", "error": "", "parent_id": "71679915-b7d2-4246-a9b8-9b30791aa78f", "metadata": {"aucs": [0.8330933083244709, 0.8451091747834855, 0.8462868294452016, 0.8587084536900055, 0.84195651740108, 0.8626275061939569, 0.7766770450403375, 0.8543860885997768, 0.8486234970759646, 0.7357461792567379, 0.7104528975821552, 0.5607872943396081, 0.5075387862709191, 0.646820841069798, 0.7238083265751258, 0.7128682900158179, 0.7290446500601022, 0.608187194547611, 0.38873128683878366, 0.4155039299655644, 0.17614042722530832, 0.3813247550162532, 0.1678109842885478, 0.2310588693116309, 0.32651531865263583, 0.13866767786828682, 0.18077406532617135, 0.14615790372783066, 0.12222468486466098, 0.1172390896349591, 0.13303041142240568, 0.1468962829983813, 0.12533794399025833, 0.13655713321436436, 0.19125684208327798, 0.13186426478411772, 0.8338818531488316, 0.7853991506364302, 0.7384549109334999, 0.8394712082146462, 0.8532393967682138, 0.8395569308141837, 0.8018883521020571, 0.8645686721350678, 0.8909336451199691, 0.2513515153292235, 0.23912373954528288, 0.24517120409877347, 0.2767369233227307, 0.10725415524131765, 0.27147236012073395, 0.23232729136007502, 0.23605641399231314, 0.2491973618393153, 0.2957574102821422, 0.35525665136661744, 0.22103787028119415, 0.27589745100505025, 0.34528156556865064, 0.2343332908194522, 0.17458711086488454, 0.1744914278999402, 0.21426824403597577, 0.2473022870298971, 0.1030037621566593, 0.11274176454880669, 0.17302536604889773, 0.22428438392950723, 0.13934487444148147, 0.18763412500790988, 0.16410965954384082, 0.19099818350402498, 0.16410305973091321, 0.24241932238061603, 0.12860105935251065, 0.15657541580937973, 0.1385216683587891, 0.1517836155403013, 0.20036406214509583, 0.16058091487568438, 0.09530557208490287, 9.999999999998899e-05, 0.07819770473468035, 0.05777078617007936, 0.11503356746038573, 0.0871663494949817, 0.045119456054948714, 0.07313443027972077, 9.999999999998899e-05, 0.1492556904330229, 0.12844366803687612, 0.0931528223654996, 0.1476270090280133, 0.09130366418679425, 0.0751694740808242, 0.0755538729402977, 0.07854052102392617, 0.12543411967362894, 0.15786634581186731, 0.12623922705997792, 0.13170953972931676, 0.1534370771320953, 0.07697661737318251, 0.10918875147396323, 0.14957431492718876, 0.13680430480131, 0.2727057528633643, 0.0749389846884162, 0.2758322466153982, 0.1857749428908636, 0.1840351596064821, 0.11336323035078455, 0.17796641617820186, 0.07372209443370781, 0.16528789920479536, 0.18614099014154406, 0.2361404960439739, 0.5097814977119193, 0.5821799161332736, 0.5100117357786663, 0.532171154960592, 0.5463980589997723, 0.5208032968299632, 0.4604666580481098, 0.5192410444703247, 0.5402491314353184, 0.07497345822726842, 0.15171896397488838, 0.10830776538318532, 0.1057988149697654, 0.11580997513696534, 0.09396821544402423, 0.1071582469833966, 0.13764611937428162, 0.13425014581228023, 0.17496600413065366, 0.22117549425112348, 0.17989706819670503, 0.1758654030479625, 0.2978499790419117, 0.18896381403045825, 0.1757220924721159, 0.15597906018052798, 0.2184240721122741, 0.27364825576756513, 0.31581730373081596, 0.25961081806559627, 0.27563762685160564, 0.385064255165656, 0.4560956933929061, 0.3409941474464998, 0.2797252345497385, 0.5655363378680653, 0.2644891397548519, 0.273722560742487, 0.3010403789475876, 0.2562596552925581, 0.20019175375471154, 0.2546495457339837, 0.21613664278619804, 0.23607765972500905, 0.23211617227221737, 0.2278524474567154, 0.2130435551413733, 0.2126258347998844, 0.19412853863326496, 0.2223036229070382, 0.22951876379200586, 0.26335543655905336, 0.23748596825519586, 0.25380558185790203, 0.19702073953803345, 0.17166058063276501, 0.19838194656207964, 0.19344112422222437, 0.5544460190200318, 0.20692883027428466, 0.24288148906929097, 0.18916612234884467, 0.1949472244208721, 0.17515475824094306, 0.1763371024562308, 0.15356383943977037, 0.8454628663694097, 0.19617159704552822, 0.7930017914855246, 0.17514215494365948, 0.16263959429280217, 0.8719808494258442, 0.3656908703140428, 0.1555233307031978, 0.4196613200004923, 0.14978737210223247, 0.20706775092151042, 0.2069088482484429, 0.2355446718815859, 0.4039852453845457, 0.16206729682010623, 0.17992766413504147, 0.19148496863580255, 0.19434485226005171, 0.18751152737922328, 0.17144559047246732, 0.17743011822883636, 0.17596827903857082, 0.19047076788430517, 0.20165196923973672, 0.07801947300227641, 0.09522112720227482, 0.13428481202387288, 0.09514531001872661, 0.09899699189132949, 0.08484474989080515, 0.09047243903202584, 0.091165293872704, 0.08567439012802314]}, "mutation_prompt": null}
{"id": "47951076-4a6d-4d0f-844f-5c99144b5935", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_GA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.num_particles = 40  # Reduced to focus on promising areas\n        self.w = 0.6  # Adjusted inertia for balance between exploration and exploitation\n        self.c1 = 1.5  # Adaptive cognitive component\n        self.c2 = 2.2  # Increased social component to enhance attraction to global best\n        self.mutation_rate = 0.25  # Increased mutation rate for diversity\n        self.crossover_rate = 0.6  # Adjusted crossover rate for improved exploitation\n\n    def __call__(self, func):\n        # Initialize particles\n        positions = np.random.uniform(self.lb, self.ub, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.num_particles, float('inf'))\n        global_best_position = np.zeros(self.dim)\n        global_best_score = float('inf')\n\n        eval_count = 0\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            scores = np.array([func(p) for p in positions])\n            eval_count += self.num_particles\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_scores[better_mask] = scores[better_mask]\n            personal_best_positions[better_mask] = positions[better_mask]\n\n            min_score_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[min_score_idx] < global_best_score:\n                global_best_score = personal_best_scores[min_score_idx]\n                global_best_position = personal_best_positions[min_score_idx]\n\n            # Adaptive cognitive and social components\n            adaptive_c1 = self.c1 * np.exp(-eval_count / (0.4 * self.budget))\n            adaptive_c2 = self.c2 * (1 - np.exp(-eval_count / (0.4 * self.budget)))\n\n            # Update velocities and positions using hybrid PSO-GA update rule\n            r1 = np.random.rand(self.num_particles, self.dim)\n            r2 = np.random.rand(self.num_particles, self.dim)\n            velocities = (self.w * velocities +\n                          adaptive_c1 * r1 * (personal_best_positions - positions) +\n                          adaptive_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.lb, self.ub)\n\n            # Genetic Algorithm operations\n            for i in range(self.num_particles):\n                if np.random.rand() < self.crossover_rate:\n                    idxs = [idx for idx in range(self.num_particles) if idx != i]\n                    partner = positions[np.random.choice(idxs)]\n                    mask = np.random.rand(self.dim) < 0.5\n                    child = np.where(mask, positions[i], partner)\n\n                    if np.random.rand() < self.mutation_rate:\n                        mutation_idx = np.random.randint(self.dim)\n                        mutation_value = np.random.uniform(self.lb, self.ub)\n                        child[mutation_idx] = mutation_value\n\n                    child_score = func(child)\n                    eval_count += 1\n                    if child_score < scores[i]:\n                        positions[i] = child\n                        scores[i] = child_score\n\n                    if eval_count >= self.budget:\n                        break\n\n            # Update global best with the latest evaluations\n            current_best_idx = np.argmin(scores)\n            if scores[current_best_idx] < global_best_score:\n                global_best_score = scores[current_best_idx]\n                global_best_position = positions[current_best_idx]\n\n        return global_best_position", "name": "EnhancedHybridPSO_GA", "description": "Enhanced Hybrid PSO-GA with Dynamic Population Refinement and Targeted Mutation for Accelerated Convergence.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "71679915-b7d2-4246-a9b8-9b30791aa78f", "metadata": {"aucs": [0.8709116999593831, 0.8723138723777221, 0.8768372615335654, 0.8617868929087722, 0.8732786663332638, 0.8700165787014595, 0.7565562986219209, 0.868539258880491, 0.8709766980904352, 0.7164359951709853, 0.7048047712591957, 0.4776950380186241, 0.3855705320648811, 0.6623877477389744, 0.7604071468026499, 0.2925765172942847, 0.6462031836272428, 0.19553392270172443, 0.17303437138306488, 0.2311803368732268, 0.13147514920023173, 0.14639486955092984, 0.35218672427787756, 0.35487832224036875, 0.14866342766770446, 0.32622137780232907, 0.17580831107043648, 0.1364785949220515, 0.13723180340024177, 0.1415672077043013, 0.1034515896336532, 0.18768357811791359, 0.11499926313848663, 0.14052555748747397, 0.1397271088896036, 0.14224280497807062, 0.8572855482713462, 0.8816167955365596, 0.8719308246693213, 0.9193998394786392, 0.914420324363186, 0.868569508913773, 0.9178142773244033, 0.8901375456634961, 0.9104234556450416, 0.44374478233240466, 0.7135385169264723, 0.28224185632107246, 0.6757261041085597, 0.5347767213601308, 0.6924610301299955, 0.2150090318021105, 0.5979667369466203, 0.46334160313151795, 0.3816440509835938, 0.8871688407181226, 0.2215335955350327, 0.2782753108644027, 0.20804701301111983, 0.21414455095505636, 0.17006784993710677, 0.14936435372393353, 0.8927547238016643, 0.12598746301048813, 0.27674670478297914, 0.13402205898302322, 0.1989156862933854, 0.1637406030113836, 0.15700652057774145, 0.3784850467672597, 0.20359559468799404, 0.15199652764569382, 0.19805528150264373, 0.12909579769588853, 0.20974198883930295, 0.13618812474127684, 0.1676843122643138, 0.21199600895034987, 0.1806227083724674, 0.18720342152943903, 0.14286907178205843, 0.011209799583482005, 0.05529339075019002, 9.999999999998899e-05, 0.10832408699422724, 0.04279531077019072, 9.999999999998899e-05, 0.05451701182477431, 0.06287221396818243, 0.011708930366438275, 0.11851476671790695, 0.13042357546193484, 0.08751705868258464, 0.0737520182321394, 0.0674670842998144, 0.07040643281963133, 0.12270959020209427, 0.1635158390187902, 0.11337901101866699, 9.999999999998899e-05, 0.12060053095909329, 0.15135623777850848, 0.1888409906988574, 0.21600226247055165, 0.12214764580372828, 0.1405721141220454, 0.23155685722371033, 0.2630130022138708, 0.1288308910254673, 0.34621738907919575, 0.27668944855796795, 0.07016384558757949, 0.11322576437915599, 0.07104408037199961, 0.20232014360368966, 0.17029684759892205, 0.1043090462902142, 0.5275849797575713, 0.4916609332810673, 0.5484482146725321, 0.6025381266452674, 0.5669340898622877, 0.540035744668264, 0.5335086626702187, 0.5645246800771313, 0.5675543526425648, 0.10220124270145459, 0.17235856712732534, 0.09015062051346068, 0.14918869038205118, 0.14833937478444825, 0.1265665437173411, 0.13741787062809396, 0.10950728317396385, 0.10727360923944129, 0.1522830180351078, 0.19161055363162882, 0.22403061555925252, 0.19664252516112934, 0.19353340288045007, 0.2143631657275058, 0.22899864457304753, 0.20507301754383522, 0.16376887897753145, 0.25889297875502104, 0.30324011541506257, 0.20595125965070904, 0.273450660627921, 0.5507256147127081, 0.33491973351863924, 0.2679250418098513, 0.2868145497806951, 0.5045353871494462, 0.2422052565907501, 0.27251688689126796, 0.22336131551185512, 0.2281901599841637, 0.1532587735635741, 0.23681089449201387, 0.17474848273382282, 0.28874861636043514, 0.26641830685633283, 0.2296548129849213, 0.22112564705591653, 0.4116295558833244, 0.27429704557205437, 0.25393708255507086, 0.20692391605978377, 0.2326379270132466, 0.19551239397576992, 0.2154097795892288, 0.22901002088179723, 0.18804644526911107, 0.18831793637834637, 0.19084701804057014, 0.2870924905379486, 0.19422011941911022, 0.1967708819138012, 0.22007520569987904, 0.20426687081246941, 0.17535235983947695, 0.1956085758016729, 0.18513856718686927, 0.853351435696617, 0.3560060671921448, 0.8757283763917089, 0.8553559198811277, 0.16919964030308454, 0.13442874366711544, 0.5821816685326726, 0.719751672453101, 0.46208413758601397, 0.7491859575447042, 0.20931336361852104, 0.20509540991197794, 0.3883684528344128, 0.499071632722356, 0.3318319362175811, 0.19639170561099495, 0.19765120753207144, 0.1974169342458848, 0.20355066541306377, 0.17175700260853521, 0.17872396251533595, 0.18059120011176089, 0.17875517461522827, 0.196857160154308, 0.1007064099381123, 0.0992299406111311, 0.09211341496887471, 0.08741383495575883, 0.07795395188648158, 0.15317868552169456, 0.07059919688751182, 0.08629132951339868, 0.0918739748027434]}, "mutation_prompt": null}
{"id": "3ab73aad-d880-4313-8932-c34db49c8c98", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_GA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.num_particles = 40  # Reduced to focus on promising areas\n        self.w = 0.6  # Adjusted inertia for balance between exploration and exploitation\n        self.c1 = 1.5  # Adaptive cognitive component\n        self.c2 = 2.2  # Increased social component to enhance attraction to global best\n        self.mutation_rate = 0.25  # Increased mutation rate for diversity\n        self.crossover_rate = 0.6  # Adjusted crossover rate for improved exploitation\n\n    def __call__(self, func):\n        # Initialize particles\n        positions = np.random.uniform(self.lb, self.ub, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.num_particles, float('inf'))\n        global_best_position = np.zeros(self.dim)\n        global_best_score = float('inf')\n\n        eval_count = 0\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            scores = np.array([func(p) for p in positions])\n            eval_count += self.num_particles\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_scores[better_mask] = scores[better_mask]\n            personal_best_positions[better_mask] = positions[better_mask]\n\n            min_score_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[min_score_idx] < global_best_score:\n                global_best_score = personal_best_scores[min_score_idx]\n                global_best_position = personal_best_positions[min_score_idx]\n\n            # Adaptive cognitive and social components\n            adaptive_c1 = self.c1 * np.exp(-eval_count / (0.4 * self.budget))\n            adaptive_c2 = self.c2 * (1 - np.exp(-eval_count / (0.4 * self.budget)))\n\n            # Update velocities and positions using hybrid PSO-GA update rule\n            r1 = np.random.rand(self.num_particles, self.dim)\n            r2 = np.random.rand(self.num_particles, self.dim)\n            velocities = (self.w * velocities +\n                          adaptive_c1 * r1 * (personal_best_positions - positions) +\n                          adaptive_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.lb, self.ub)\n\n            # Genetic Algorithm operations\n            for i in range(self.num_particles):\n                if np.random.rand() < self.crossover_rate:\n                    idxs = [idx for idx in range(self.num_particles) if idx != i]\n                    partner = positions[np.random.choice(idxs)]\n                    mask = np.random.rand(self.dim) < 0.5\n                    child = np.where(mask, positions[i], partner)\n\n                    if np.random.rand() < self.mutation_rate:\n                        mutation_idx = np.random.randint(self.dim)\n                        mutation_value = np.random.uniform(self.lb, self.ub)\n                        child[mutation_idx] = mutation_value\n\n                    child_score = func(child)\n                    eval_count += 1\n                    if child_score < scores[i]:\n                        positions[i] = child\n                        scores[i] = child_score\n\n                    if eval_count >= self.budget:\n                        break\n\n            # Update global best with the latest evaluations\n            current_best_idx = np.argmin(scores)\n            if scores[current_best_idx] < global_best_score:\n                global_best_score = scores[current_best_idx]\n                global_best_position = positions[current_best_idx]\n\n        return global_best_position", "name": "EnhancedHybridPSO_GA", "description": "Enhanced Hybrid PSO-GA with Dynamic Population Refinement and Targeted Mutation for Accelerated Convergence.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "71679915-b7d2-4246-a9b8-9b30791aa78f", "metadata": {"aucs": [0.8709116999593831, 0.8723138723777221, 0.8768372615335654, 0.8617868929087722, 0.8732786663332638, 0.8700165787014595, 0.7565562986219209, 0.868539258880491, 0.8709766980904352, 0.7164359951709853, 0.7048047712591957, 0.4776950380186241, 0.3855705320648811, 0.6623877477389744, 0.7604071468026499, 0.2925765172942847, 0.6462031836272428, 0.19553392270172443, 0.17303437138306488, 0.2311803368732268, 0.13147514920023173, 0.14639486955092984, 0.35218672427787756, 0.35487832224036875, 0.14866342766770446, 0.32622137780232907, 0.17580831107043648, 0.1364785949220515, 0.13723180340024177, 0.1415672077043013, 0.1034515896336532, 0.18768357811791359, 0.11499926313848663, 0.14052555748747397, 0.1397271088896036, 0.14224280497807062, 0.8572855482713462, 0.8816167955365596, 0.8719308246693213, 0.9193998394786392, 0.914420324363186, 0.868569508913773, 0.9178142773244033, 0.8901375456634961, 0.9104234556450416, 0.44374478233240466, 0.7135385169264723, 0.28224185632107246, 0.6757261041085597, 0.5347767213601308, 0.6924610301299955, 0.2150090318021105, 0.5979667369466203, 0.46334160313151795, 0.3816440509835938, 0.8871688407181226, 0.2215335955350327, 0.2782753108644027, 0.20804701301111983, 0.21414455095505636, 0.17006784993710677, 0.14936435372393353, 0.8927547238016643, 0.12598746301048813, 0.27674670478297914, 0.13402205898302322, 0.1989156862933854, 0.1637406030113836, 0.15700652057774145, 0.3784850467672597, 0.20359559468799404, 0.15199652764569382, 0.19805528150264373, 0.12909579769588853, 0.20974198883930295, 0.13618812474127684, 0.1676843122643138, 0.21199600895034987, 0.1806227083724674, 0.18720342152943903, 0.14286907178205843, 0.011209799583482005, 0.05529339075019002, 9.999999999998899e-05, 0.10832408699422724, 0.04279531077019072, 9.999999999998899e-05, 0.05451701182477431, 0.06287221396818243, 0.011708930366438275, 0.11851476671790695, 0.13042357546193484, 0.08751705868258464, 0.0737520182321394, 0.0674670842998144, 0.07040643281963133, 0.12270959020209427, 0.1635158390187902, 0.11337901101866699, 9.999999999998899e-05, 0.12060053095909329, 0.15135623777850848, 0.1888409906988574, 0.21600226247055165, 0.12214764580372828, 0.1405721141220454, 0.23155685722371033, 0.2630130022138708, 0.1288308910254673, 0.34621738907919575, 0.27668944855796795, 0.07016384558757949, 0.11322576437915599, 0.07104408037199961, 0.20232014360368966, 0.17029684759892205, 0.1043090462902142, 0.5275849797575713, 0.4916609332810673, 0.5484482146725321, 0.6025381266452674, 0.5669340898622877, 0.540035744668264, 0.5335086626702187, 0.5645246800771313, 0.5675543526425648, 0.10220124270145459, 0.17235856712732534, 0.09015062051346068, 0.14918869038205118, 0.14833937478444825, 0.1265665437173411, 0.13741787062809396, 0.10950728317396385, 0.10727360923944129, 0.1522830180351078, 0.19161055363162882, 0.22403061555925252, 0.19664252516112934, 0.19353340288045007, 0.2143631657275058, 0.22899864457304753, 0.20507301754383522, 0.16376887897753145, 0.25889297875502104, 0.30324011541506257, 0.20595125965070904, 0.273450660627921, 0.5507256147127081, 0.33491973351863924, 0.2679250418098513, 0.2868145497806951, 0.5045353871494462, 0.2422052565907501, 0.27251688689126796, 0.22336131551185512, 0.2281901599841637, 0.1532587735635741, 0.23681089449201387, 0.17474848273382282, 0.28874861636043514, 0.26641830685633283, 0.2296548129849213, 0.22112564705591653, 0.4116295558833244, 0.27429704557205437, 0.25393708255507086, 0.20692391605978377, 0.2326379270132466, 0.19551239397576992, 0.2154097795892288, 0.22901002088179723, 0.18804644526911107, 0.18831793637834637, 0.19084701804057014, 0.2870924905379486, 0.19422011941911022, 0.1967708819138012, 0.22007520569987904, 0.20426687081246941, 0.17535235983947695, 0.1956085758016729, 0.18513856718686927, 0.853351435696617, 0.3560060671921448, 0.8757283763917089, 0.8553559198811277, 0.16919964030308454, 0.13442874366711544, 0.5821816685326726, 0.719751672453101, 0.46208413758601397, 0.7491859575447042, 0.20931336361852104, 0.20509540991197794, 0.3883684528344128, 0.499071632722356, 0.3318319362175811, 0.19639170561099495, 0.19765120753207144, 0.1974169342458848, 0.20355066541306377, 0.17175700260853521, 0.17872396251533595, 0.18059120011176089, 0.17875517461522827, 0.196857160154308, 0.1007064099381123, 0.0992299406111311, 0.09211341496887471, 0.08741383495575883, 0.07795395188648158, 0.15317868552169456, 0.07059919688751182, 0.08629132951339868, 0.0918739748027434]}, "mutation_prompt": null}
{"id": "176d4335-30d2-4192-be05-61b21216b9b7", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_GA_Optimized:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.num_particles = 50  # Slightly increased for better coverage\n        self.w_max = 0.9  # Dynamic inertia starting value\n        self.w_min = 0.4  # Dynamic inertia ending value\n        self.c1 = 1.4  # Adjusted for balanced personal search\n        self.c2 = 2.4  # Increased for stronger global search\n        self.mutation_rate = 0.3  # Increased for maintaining diversity\n        self.crossover_rate = 0.65  # Slightly increased for better genetic mixing\n        self.learning_rate = 0.1  # Adaptive learning rate for mutation steps\n\n    def __call__(self, func):\n        # Initialize particles\n        positions = np.random.uniform(self.lb, self.ub, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.num_particles, float('inf'))\n        global_best_position = np.zeros(self.dim)\n        global_best_score = float('inf')\n\n        eval_count = 0\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            scores = np.array([func(p) for p in positions])\n            eval_count += self.num_particles\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_scores[better_mask] = scores[better_mask]\n            personal_best_positions[better_mask] = positions[better_mask]\n\n            min_score_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[min_score_idx] < global_best_score:\n                global_best_score = personal_best_scores[min_score_idx]\n                global_best_position = personal_best_positions[min_score_idx]\n\n            # Calculate dynamic inertia weight\n            inertia_weight = self.w_max - ((self.w_max - self.w_min) * (eval_count / self.budget))\n\n            # Update velocities and positions using PSO\n            r1 = np.random.rand(self.num_particles, self.dim)\n            r2 = np.random.rand(self.num_particles, self.dim)\n            velocities = (inertia_weight * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.lb, self.ub)\n\n            # Genetic Algorithm operations\n            for i in range(self.num_particles):\n                if np.random.rand() < self.crossover_rate:\n                    idxs = [idx for idx in range(self.num_particles) if idx != i]\n                    partner = positions[np.random.choice(idxs)]\n                    mask = np.random.rand(self.dim) < 0.5\n                    child = np.where(mask, positions[i], partner)\n\n                    if np.random.rand() < self.mutation_rate:\n                        mutation_idx = np.random.randint(self.dim)\n                        mutation_value = child[mutation_idx] + self.learning_rate * np.random.randn()\n                        child[mutation_idx] = np.clip(mutation_value, self.lb, self.ub)\n\n                    child_score = func(child)\n                    eval_count += 1\n                    if child_score < scores[i]:\n                        positions[i] = child\n                        scores[i] = child_score\n\n                    if eval_count >= self.budget:\n                        break\n\n            # Update global best with the latest evaluations\n            current_best_idx = np.argmin(scores)\n            if scores[current_best_idx] < global_best_score:\n                global_best_score = scores[current_best_idx]\n                global_best_position = positions[current_best_idx]\n\n        return global_best_position", "name": "EnhancedHybridPSO_GA_Optimized", "description": "Optimized Hybrid PSO-GA with Adaptive Inertia and Diversified Exploration for Enhanced Convergence Speed.", "configspace": "", "generation": 52, "fitness": 0.1294792475031963, "feedback": "The algorithm EnhancedHybridPSO_GA_Optimized got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.18.", "error": "", "parent_id": "71679915-b7d2-4246-a9b8-9b30791aa78f", "metadata": {"aucs": [0.29065251450751317, 0.35172664498508444, 0.2535398329308757, 0.1559478719244638, 0.23150640122520527, 0.2096994872603879, 0.13549319663923742, 0.12754758048190706, 0.28396777295187725, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013182929179250236, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05149220557172007, 0.04857401517441262, 0.03864268772846846, 0.08020294542162176, 0.07598928926265358, 0.05309632796830466, 0.06757385128982496, 0.054322020624611334, 0.04663803805691036, 0.03197582435042545, 0.03333379687012117, 0.028545161526727814, 0.043677700952956755, 0.03041227011207992, 0.037988492635367965, 0.031088671497934928, 0.05476392259867646, 0.00108708186650186, 0.9807348734480527, 0.9810455143166679, 0.9861536630294231, 0.10051983276763965, 0.9807771727107962, 0.9741524374691908, 0.9829053549425485, 0.9827717581361868, 0.9804596938929386, 0.15158163134608837, 0.04513591252608584, 0.04535170144628553, 0.07919782252853969, 0.10875805580461961, 0.08463496953770866, 0.06518528093519504, 0.09351197553575441, 0.038470246052142665, 0.14299312110372653, 0.16234535186543253, 0.06489974356063377, 0.1707196826207793, 0.17336246513175468, 0.14807448030045833, 0.10648686414248953, 0.11625708591359729, 0.14520262372540382, 0.002347783594965902, 0.039590710215988145, 0.09040794449047951, 0.06277222810332972, 0.06154957682760864, 9.999999999998899e-05, 0.040310165660461084, 9.999999999998899e-05, 9.999999999998899e-05, 0.05128187899909031, 0.04592343021707579, 0.08483871356433681, 0.11365839206252204, 0.07235623435637717, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05062683649060584, 0.006485977748857064, 0.05308385519362724, 0.0379532688239107, 9.999999999998899e-05, 0.06365203989648593, 0.002500628351876366, 0.029383102248053516, 0.016397424204642963, 0.005874442682224257, 9.999999999998899e-05, 0.0021411733003231515, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01938594634890456, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009576393944565997, 0.029066655772134076, 0.001108774522478262, 0.029555066917455575, 0.1497183282529131, 0.3164928188489644, 0.26475182164029054, 0.16532557043102114, 0.1902770075331317, 0.19821729704018476, 0.23585015372191698, 0.12596498452151195, 0.21731453085233865, 0.07224446450092548, 0.05215574893468056, 0.0480556618781246, 0.07989460183954089, 0.028610222296455157, 0.07489515351158593, 0.03433290068713957, 0.05884267727354586, 0.027461015790866794, 0.12801483965323546, 0.17031276577601662, 0.16830413808882527, 0.17157080196579522, 0.20672948492537935, 0.15594452133026204, 0.15784941642206196, 0.15119753595673868, 0.17680686614474272, 0.15819653209810514, 0.19144575242610817, 0.26852440062112515, 0.20611784520474186, 0.17862454821458829, 0.16345744124477746, 0.15499968068373982, 0.21325229994682682, 0.16235941276794952, 0.1312981197633033, 0.1642382126977061, 0.18049116258518294, 0.10047213704339353, 0.11564112054993125, 0.0999048886626509, 0.10097030239295346, 0.1878720896152507, 0.14180786182531668, 0.19988951606238559, 0.1178099273318125, 0.16072463424196792, 0.13624394022658615, 0.18656890771996337, 0.11452562159818402, 0.14444670428494988, 0.11986887460270224, 0.13713937401819454, 0.16011291176423315, 0.1508499399070824, 0.1666713432051221, 0.1582150072012639, 0.12490292381288548, 0.17840066778960806, 0.1621619137172463, 0.11530558895773724, 0.17946624687099721, 0.18611468393148756, 0.13600048230402395, 0.11440548935313932, 0.11594936117509858, 0.1780758205387769, 0.13042082753560758, 0.13273726701939226, 0.14510068990552227, 0.16639473004122596, 0.17892051588693125, 0.16498339762307956, 0.15345985585109978, 0.1193570092426145, 0.21494436852619925, 0.12433179796121463, 0.11773422288069846, 0.19603774719049283, 0.19769488161551885, 0.16860340607288038, 0.17484955324408002, 0.1678682631160484, 0.16786308473126843, 0.1891205518269139, 0.17078242210741879, 0.1871972824172653, 0.17767264433421992, 0.1873463978712674, 0.03711794178791428, 0.028546457138745818, 0.03946564633749472, 0.02793570577829707, 0.06243383227635235, 0.02907825096442007, 0.031943585401497554, 0.07187010165354857, 0.035259508650238414]}, "mutation_prompt": null}
{"id": "df35cbb1-3822-4e88-9112-dbc8f6de0179", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_GA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.num_particles = 35  # Modified to maintain focus with fewer particles\n        self.w = 0.5  # Further tuned inertia for balanced exploration-exploitation\n        self.c1 = 1.4  # Reduced cognitive component for global search emphasis\n        self.c2 = 2.5  # Enhanced social component to strengthen global convergence\n        self.mutation_rate = 0.2  # Dynamic mutation rate depending on budget usage\n        self.crossover_rate = 0.7  # Increased crossover rate for diversity emphasis\n        self.diversity_threshold = 0.1  # Threshold to trigger diversity enhancement\n\n    def __call__(self, func):\n        # Initialize particles\n        positions = np.random.uniform(self.lb, self.ub, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.num_particles, float('inf'))\n        global_best_position = np.zeros(self.dim)\n        global_best_score = float('inf')\n\n        eval_count = 0\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            scores = np.array([func(p) for p in positions])\n            eval_count += self.num_particles\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_scores[better_mask] = scores[better_mask]\n            personal_best_positions[better_mask] = positions[better_mask]\n\n            min_score_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[min_score_idx] < global_best_score:\n                global_best_score = personal_best_scores[min_score_idx]\n                global_best_position = personal_best_positions[min_score_idx]\n\n            # Adaptive cognitive and social components\n            adaptive_c1 = self.c1 * np.exp(-eval_count / (0.3 * self.budget))\n            adaptive_c2 = self.c2 * (1 - np.exp(-eval_count / (0.3 * self.budget)))\n\n            # Update velocities and positions using hybrid PSO-GA update rule\n            r1 = np.random.rand(self.num_particles, self.dim)\n            r2 = np.random.rand(self.num_particles, self.dim)\n            velocities = (self.w * velocities +\n                          adaptive_c1 * r1 * (personal_best_positions - positions) +\n                          adaptive_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.lb, self.ub)\n\n            # Genetic Algorithm operations with diversity enhancement\n            for i in range(self.num_particles):\n                if np.random.rand() < self.crossover_rate:\n                    idxs = [idx for idx in range(self.num_particles) if idx != i]\n                    partner = positions[np.random.choice(idxs)]\n                    mask = np.random.rand(self.dim) < 0.5\n                    child = np.where(mask, positions[i], partner)\n\n                    # Adaptive mutation rate\n                    mutation_effect = np.linalg.norm(child - positions[i]) / self.dim\n                    mutation_prob = max(self.mutation_rate * (1 - mutation_effect / self.diversity_threshold), 0.05)\n                    \n                    if np.random.rand() < mutation_prob:\n                        mutation_idx = np.random.randint(self.dim)\n                        mutation_value = np.random.uniform(self.lb, self.ub)\n                        child[mutation_idx] = mutation_value\n\n                    child_score = func(child)\n                    eval_count += 1\n                    if eval_count >= self.budget:\n                        break\n\n                    if child_score < scores[i]:\n                        positions[i] = child\n                        scores[i] = child_score\n\n            # Update global best with the latest evaluations\n            current_best_idx = np.argmin(scores)\n            if scores[current_best_idx] < global_best_score:\n                global_best_score = scores[current_best_idx]\n                global_best_position = positions[current_best_idx]\n\n        return global_best_position", "name": "EnhancedHybridPSO_GA", "description": "Enhanced Hybrid PSO-GA with Adaptive Mutation Strategy and Particle Diversity Preservation for Improved Convergence Speed.", "configspace": "", "generation": 53, "fitness": 0.27412138054505486, "feedback": "The algorithm EnhancedHybridPSO_GA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.23.", "error": "", "parent_id": "71679915-b7d2-4246-a9b8-9b30791aa78f", "metadata": {"aucs": [0.8773845852129583, 0.5263933690027331, 0.8964967847242338, 0.47576271875151777, 0.5630343634308367, 0.8950705970717869, 0.8719064080339051, 0.5572287728315108, 0.9028000610489679, 0.37104610907765856, 0.5946346789740906, 0.2801113661162481, 0.7664601870535953, 0.38599450185643425, 0.7755134231378148, 0.6607309844293532, 0.7923696869088055, 0.7237816274022388, 0.15433942516576793, 0.16945133465874607, 0.15774236282126242, 0.5240649295668527, 0.17164049303241424, 0.18008868066705508, 0.1366949299260667, 0.08070595201740038, 0.14252783256726342, 0.13125565437153164, 0.13865895427217634, 0.13299119607205134, 0.15041923995751094, 0.13794342344178645, 0.13451883670290665, 0.12106925256257195, 0.11650584258896657, 0.13238153941791664, 0.5750533576429, 0.7998204077382758, 0.8371835539082599, 0.9088075776719553, 0.8209906320896015, 0.8412986832544158, 0.9009404386153429, 0.8885094745352077, 0.8547454916289838, 0.26003876967017814, 0.17613064401957412, 0.2941625742043682, 0.32147993654683615, 0.22339504357434703, 0.45390945076426303, 0.20301349264135737, 0.18749854449901637, 0.22399155348634536, 0.35014906612683894, 0.20678544631767504, 0.13860498063705584, 0.33172283139479164, 0.3231575476568974, 0.276003932124273, 0.13811647025474139, 0.23164407442739043, 0.1793338840330604, 0.3446040944812041, 0.16585512006110237, 0.2195702019883613, 0.1552379930698391, 0.2671965130939642, 0.1392600826511814, 0.23386414781615272, 0.3433465855163441, 0.44137205421982095, 0.14840966738219663, 0.20774163993704908, 0.21088591810748814, 0.1371051612555617, 0.15376450017074872, 0.14127277464122212, 0.12981856262074798, 0.12728533740021175, 0.13311802795637073, 9.999999999998899e-05, 0.06336254518755013, 0.01288419537503227, 0.05927366027944814, 0.039694535588284285, 9.999999999998899e-05, 0.04675851143910692, 9.999999999998899e-05, 9.999999999998899e-05, 0.07950853933144286, 0.09228375390361288, 0.18852440382958346, 0.06611577068380925, 0.10010269987992504, 0.03018343791474032, 0.1278735589353881, 0.08623955892738722, 0.12046733734006809, 9.999999999998899e-05, 0.26155332957837796, 0.0680525758256133, 0.08563905856455056, 0.1107648105415705, 0.09345441837003798, 0.23940243677143236, 0.17168144076860514, 0.14302887634614236, 0.18669745956598516, 0.16547198270682673, 0.2077396996523282, 0.046193069670305564, 0.1818095414361195, 0.09047664210619644, 0.13967195176725822, 0.148349417374662, 0.11416954531229018, 0.5173928171061719, 0.4661555894530949, 0.4880385700256332, 0.4971334460791159, 0.5497311286005029, 0.4917344732777036, 0.5132022377602882, 0.5970758625298671, 0.5514872126610717, 0.08728031510578038, 0.16012803474065207, 0.0701992436716582, 0.1135209325729396, 0.18057561696930113, 0.0979257917532772, 0.08424811005045707, 0.13964979811287737, 0.0859580256403013, 0.17999671400088768, 0.1938240595718831, 0.39224511601427736, 0.17463256693007623, 0.12240924795486885, 0.21919609425469122, 0.1797013350672314, 0.250402537663027, 0.3066723802139736, 0.19074190057113172, 0.3416980957433642, 0.19255986073536868, 0.2965490844062286, 0.17848448342849643, 0.25117981222720565, 0.2828316602682631, 0.2645899894544511, 0.24303373229763625, 0.15366620939836717, 0.3289312502516374, 0.1505804065383345, 0.18763692771583385, 0.1916391119501054, 0.2807265780653502, 0.2223216425639899, 0.249487552980875, 0.17672065365715695, 0.18796389737868147, 0.21547540137571808, 0.21894397025545143, 0.1868109905904295, 0.18429158888087815, 0.24350724463108775, 0.22764909888524953, 0.2110470693463159, 0.20715762388497083, 0.16791266595337417, 0.18825090476091122, 0.20870235770667622, 0.19014539685816323, 0.1980149001303092, 0.21728358684348958, 0.212695827692703, 0.18814172198196855, 0.17367724369168736, 0.9201478748312417, 0.17499684058696607, 0.16426302905441226, 0.15783766073035999, 0.1985791094953595, 0.9005117205155125, 0.16584699947328718, 0.16785401287977142, 0.8931302861511978, 0.47917412739468923, 0.21166461049942886, 0.3873535991468209, 0.20641404485194204, 0.38566957093621057, 0.4103356853273422, 0.38247533382414567, 0.5232927559854863, 0.3261216233212988, 0.18986336001128368, 0.19007925668529957, 0.17495522073426495, 0.1952037261710704, 0.18892350335214492, 0.19451525209480902, 0.19957066678510793, 0.19303214636199972, 0.22093835756898672, 0.0826687320384204, 0.09517153429004976, 0.11004861514355235, 0.09212904858717719, 0.09992208018857651, 0.08770984416013672, 0.086731372335079, 0.09239620499339307, 0.09527757865942654]}, "mutation_prompt": null}
{"id": "08460f3e-b335-4537-bb90-81d241f0a579", "solution": "import numpy as np\n\nclass EnhancedAdaptiveHybridPSO_GA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.num_particles = 50  # Increased to enhance diversity and exploration\n        self.w = 0.5  # Lower inertia to promote faster convergence\n        self.c1 = 1.3  # Adjusted cognitive component\n        self.c2 = 2.5  # Further increased social component\n        self.mutation_rate = 0.3  # Dynamic mutation rate for enhanced exploration\n        self.crossover_rate = 0.7  # Higher to improve genetic diversity\n\n    def __call__(self, func):\n        # Initialize particles\n        positions = np.random.uniform(self.lb, self.ub, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.num_particles, float('inf'))\n        global_best_position = np.zeros(self.dim)\n        global_best_score = float('inf')\n\n        eval_count = 0\n        # Introducing multi-swarm dynamics\n        num_swarms = 2\n        swarm_indices = np.array_split(np.arange(self.num_particles), num_swarms)\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            scores = np.array([func(p) for p in positions])\n            eval_count += self.num_particles\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_scores[better_mask] = scores[better_mask]\n            personal_best_positions[better_mask] = positions[better_mask]\n\n            min_score_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[min_score_idx] < global_best_score:\n                global_best_score = personal_best_scores[min_score_idx]\n                global_best_position = personal_best_positions[min_score_idx]\n\n            # Adaptive cognitive and social components\n            adaptive_c1 = self.c1 * (1 - eval_count / self.budget)\n            adaptive_c2 = self.c2 * (eval_count / self.budget)\n\n            # Update velocities and positions using hybrid PSO-GA update rule\n            for swarm_idx in swarm_indices:\n                r1 = np.random.rand(len(swarm_idx), self.dim)\n                r2 = np.random.rand(len(swarm_idx), self.dim)\n                velocities[swarm_idx] = (self.w * velocities[swarm_idx] +\n                                         adaptive_c1 * r1 * (personal_best_positions[swarm_idx] - positions[swarm_idx]) +\n                                         adaptive_c2 * r2 * (global_best_position - positions[swarm_idx]))\n                positions[swarm_idx] += velocities[swarm_idx]\n                positions[swarm_idx] = np.clip(positions[swarm_idx], self.lb, self.ub)\n\n            # Genetic Algorithm operations\n            for i in range(self.num_particles):\n                if np.random.rand() < self.crossover_rate:\n                    idxs = [idx for idx in range(self.num_particles) if idx != i]\n                    partner = positions[np.random.choice(idxs)]\n                    mask = np.random.rand(self.dim) < 0.5\n                    child = np.where(mask, positions[i], partner)\n\n                    if np.random.rand() < self.mutation_rate:\n                        mutation_magnitude = np.random.normal(loc=0.0, scale=0.1)\n                        mutation_idx = np.random.randint(self.dim)\n                        child[mutation_idx] += mutation_magnitude\n                        child[mutation_idx] = np.clip(child[mutation_idx], self.lb, self.ub)\n\n                    child_score = func(child)\n                    eval_count += 1\n                    if child_score < scores[i]:\n                        positions[i] = child\n                        scores[i] = child_score\n\n                    if eval_count >= self.budget:\n                        break\n\n            # Update global best with the latest evaluations\n            current_best_idx = np.argmin(scores)\n            if scores[current_best_idx] < global_best_score:\n                global_best_score = scores[current_best_idx]\n                global_best_position = positions[current_best_idx]\n\n        return global_best_position", "name": "EnhancedAdaptiveHybridPSO_GA", "description": "Enhanced Adaptive Hybrid PSO-GA with Multi-Swarm Dynamics and Dynamic Mutation for Improved Convergence Speed.", "configspace": "", "generation": 54, "fitness": 0.2714884882316813, "feedback": "The algorithm EnhancedAdaptiveHybridPSO_GA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.21.", "error": "", "parent_id": "71679915-b7d2-4246-a9b8-9b30791aa78f", "metadata": {"aucs": [0.827640839792046, 0.8285631899728441, 0.8388512023150296, 0.8317515609891467, 0.8296733759899162, 0.8276592786660771, 0.8067916543592898, 0.8155229681183201, 0.8330615161993891, 0.5351940673165592, 0.32667006863347414, 0.14729074478385484, 0.4062238373513377, 0.23582833286671923, 0.24143365567821073, 0.7064627965309351, 0.6850543875215245, 0.1965968169190767, 0.14035227347272716, 0.12633976302475114, 0.14812950255235247, 0.14848187295463433, 0.17475277451121507, 0.17313036495783285, 0.129495629604514, 0.1328375470061608, 0.1292096619663169, 0.13298013381976037, 0.11371462736685845, 0.12715888435789635, 0.10727174594617539, 0.13372351676738436, 0.10759976287271988, 0.12730177691358568, 0.10787863940886577, 0.10217425194490137, 0.6069561284522946, 0.5952008421123514, 0.5512181066556714, 0.7433395560267337, 0.6629757241597349, 0.7356632846486318, 0.5759094598743038, 0.7136851281128194, 0.6195824119593503, 0.44139081637462063, 0.39625616666812213, 0.306065852615814, 0.15368096335495485, 0.3322866492804911, 0.3456188377238447, 0.43047717868340263, 0.25922913087791744, 0.2588665107945983, 0.22145289795074885, 0.23422769433794077, 0.22204629891559968, 0.36301433976470965, 0.853409487024076, 0.3363428484545612, 0.21094350695335407, 0.24064810273515036, 0.23209564505987923, 0.26052466802478325, 0.1149651965214703, 0.11846172130532395, 0.16915472285798094, 0.12022799199376055, 0.15953855720156862, 0.12111347568674469, 0.1209818391106654, 0.12300801252543592, 0.2784878679089323, 0.14196884849246783, 0.14858808339463847, 0.12363691119807751, 0.1539121535933169, 0.1496589786185979, 0.1522809053185874, 0.12002980934388818, 0.21541081496376335, 0.014573247860689142, 0.010385258068323355, 0.059349761675470236, 0.04034694531789518, 0.0805539066813914, 0.01063656619041009, 0.061206409247184124, 0.08279522218311774, 0.009189283418761574, 0.13086312624962448, 0.14437984740085685, 0.17544099136463864, 0.09312321983264515, 0.13756024082797635, 0.09434012137464465, 0.13886074449638142, 0.18625178847837698, 0.125498388762335, 0.22115310729215065, 0.09174391398634929, 0.10375574625569628, 0.08975209241428261, 0.2744397973078273, 0.10547197332359792, 0.21376677018558188, 0.09096306797019837, 0.15876573899659197, 0.134321046332176, 0.18624178866790542, 0.19946795659044347, 0.15586361656473202, 0.06620060352893653, 0.1641663561975989, 0.09954726555531046, 0.11343497564984795, 0.14267275371796972, 0.5077409367313618, 0.5032684862883998, 0.5340481216595414, 0.5575995613318052, 0.5124450826399625, 0.4797039266321461, 0.46848227343483173, 0.5153704569210178, 0.4738351092100481, 0.09414636914561814, 0.1255955571386801, 0.0815755608014086, 0.11408686422284153, 0.13406586849749424, 0.10832791654822782, 0.0893715945382022, 0.14209868960644056, 0.11640332332345027, 0.22808284577684446, 0.21188760401741424, 0.1721622600779339, 0.258142667022622, 0.498448397069416, 0.1711049097613686, 0.19261317812811107, 0.17545310066825603, 0.2300772035957005, 0.44395638653903136, 0.32288488971548013, 0.32101896165856336, 0.31747085016778653, 0.2590790695445391, 0.34970409800810787, 0.33111768351494264, 0.2784679063669957, 0.3183702097368397, 0.2020315501637484, 0.2567051056191939, 0.2221323901686466, 0.2230622309414455, 0.2265773399477704, 0.262719775334341, 0.1919672936997323, 0.2764916811075494, 0.22404891813223338, 0.20637031579949394, 0.1967086908588641, 0.2001963198661072, 0.21765515829783044, 0.23261644433961315, 0.21938970876843356, 0.23741546248269485, 0.2335550302441859, 0.18979340343811368, 0.19504692496869835, 0.19594209928408524, 0.2160671985988356, 0.18905800791794014, 0.18180150457559396, 0.1968673563388036, 0.18780627687517015, 0.19821840808430558, 0.18302801175712458, 0.1818519400683677, 0.1800090957413789, 0.8221051741566892, 0.8119038240074792, 0.1962565890789264, 0.7335762834815625, 0.12242203797586348, 0.6938541932660188, 0.6950828709965642, 0.3761040028254766, 0.2052901850720582, 0.36119150650538234, 0.6558643328653952, 0.5754120428175105, 0.163895155211898, 0.4187689294755865, 0.1621353872496617, 0.35168559155497026, 0.18332815359489552, 0.1832558361055976, 0.18090826310540453, 0.21822941588337552, 0.19588488903694024, 0.18962336288247184, 0.1806551316885765, 0.1865704324253692, 0.1964471679017562, 0.08804072959876919, 0.09017653037375184, 0.10301118125729769, 0.09299591214461089, 0.09734495172148616, 0.14677944499540752, 0.07428471177190354, 0.09524106214780692, 0.10542582035297188]}, "mutation_prompt": null}
{"id": "ff6ecafa-9694-49f9-8e42-f2fce021156f", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_GA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.num_particles = 40  # Reduced to focus on promising areas\n        self.w = 0.6  # Adjusted inertia for balance between exploration and exploitation\n        self.c1 = 1.5  # Adaptive cognitive component\n        self.c2 = 2.2  # Increased social component to enhance attraction to global best\n        self.mutation_rate = 0.25  # Increased mutation rate for diversity\n        self.crossover_rate = 0.6  # Adjusted crossover rate for improved exploitation\n\n    def __call__(self, func):\n        # Initialize particles\n        positions = np.random.uniform(self.lb, self.ub, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.num_particles, float('inf'))\n        global_best_position = np.zeros(self.dim)\n        global_best_score = float('inf')\n\n        eval_count = 0\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            scores = np.array([func(p) for p in positions])\n            eval_count += self.num_particles\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_scores[better_mask] = scores[better_mask]\n            personal_best_positions[better_mask] = positions[better_mask]\n\n            min_score_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[min_score_idx] < global_best_score:\n                global_best_score = personal_best_scores[min_score_idx]\n                global_best_position = personal_best_positions[min_score_idx]\n\n            # Adaptive cognitive and social components\n            adaptive_c1 = self.c1 * np.exp(-eval_count / (0.4 * self.budget))\n            adaptive_c2 = self.c2 * (1 - np.exp(-eval_count / (0.4 * self.budget)))\n\n            # Update velocities and positions using hybrid PSO-GA update rule\n            r1 = np.random.rand(self.num_particles, self.dim)\n            r2 = np.random.rand(self.num_particles, self.dim)\n            velocities = (self.w * velocities +\n                          adaptive_c1 * r1 * (personal_best_positions - positions) +\n                          adaptive_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.lb, self.ub)\n\n            # Genetic Algorithm operations\n            for i in range(self.num_particles):\n                if np.random.rand() < self.crossover_rate:\n                    idxs = [idx for idx in range(self.num_particles) if idx != i]\n                    partner = positions[np.random.choice(idxs)]\n                    mask = np.random.rand(self.dim) < 0.5\n                    child = np.where(mask, positions[i], partner)\n\n                    if np.random.rand() < self.mutation_rate:\n                        mutation_idx = np.random.randint(self.dim)\n                        mutation_value = np.random.uniform(self.lb, self.ub)\n                        child[mutation_idx] = mutation_value\n\n                    child_score = func(child)\n                    eval_count += 1\n                    if child_score < scores[i]:\n                        positions[i] = child\n                        scores[i] = child_score\n\n                    if eval_count >= self.budget:\n                        break\n\n            # Update global best with the latest evaluations\n            current_best_idx = np.argmin(scores)\n            if scores[current_best_idx] < global_best_score:\n                global_best_score = scores[current_best_idx]\n                global_best_position = positions[current_best_idx]\n\n        return global_best_position", "name": "EnhancedHybridPSO_GA", "description": "Enhanced Hybrid PSO-GA with Dynamic Population Refinement and Targeted Mutation for Accelerated Convergence.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "71679915-b7d2-4246-a9b8-9b30791aa78f", "metadata": {"aucs": [0.8709116999593831, 0.8723138723777221, 0.8768372615335654, 0.8617868929087722, 0.8732786663332638, 0.8700165787014595, 0.7565562986219209, 0.868539258880491, 0.8709766980904352, 0.7164359951709853, 0.7048047712591957, 0.4776950380186241, 0.3855705320648811, 0.6623877477389744, 0.7604071468026499, 0.2925765172942847, 0.6462031836272428, 0.19553392270172443, 0.17303437138306488, 0.2311803368732268, 0.13147514920023173, 0.14639486955092984, 0.35218672427787756, 0.35487832224036875, 0.14866342766770446, 0.32622137780232907, 0.17580831107043648, 0.1364785949220515, 0.13723180340024177, 0.1415672077043013, 0.1034515896336532, 0.18768357811791359, 0.11499926313848663, 0.14052555748747397, 0.1397271088896036, 0.14224280497807062, 0.8572855482713462, 0.8816167955365596, 0.8719308246693213, 0.9193998394786392, 0.914420324363186, 0.868569508913773, 0.9178142773244033, 0.8901375456634961, 0.9104234556450416, 0.44374478233240466, 0.7135385169264723, 0.28224185632107246, 0.6757261041085597, 0.5347767213601308, 0.6924610301299955, 0.2150090318021105, 0.5979667369466203, 0.46334160313151795, 0.3816440509835938, 0.8871688407181226, 0.2215335955350327, 0.2782753108644027, 0.20804701301111983, 0.21414455095505636, 0.17006784993710677, 0.14936435372393353, 0.8927547238016643, 0.12598746301048813, 0.27674670478297914, 0.13402205898302322, 0.1989156862933854, 0.1637406030113836, 0.15700652057774145, 0.3784850467672597, 0.20359559468799404, 0.15199652764569382, 0.19805528150264373, 0.12909579769588853, 0.20974198883930295, 0.13618812474127684, 0.1676843122643138, 0.21199600895034987, 0.1806227083724674, 0.18720342152943903, 0.14286907178205843, 0.011209799583482005, 0.05529339075019002, 9.999999999998899e-05, 0.10832408699422724, 0.04279531077019072, 9.999999999998899e-05, 0.05451701182477431, 0.06287221396818243, 0.011708930366438275, 0.11851476671790695, 0.13042357546193484, 0.08751705868258464, 0.0737520182321394, 0.0674670842998144, 0.07040643281963133, 0.12270959020209427, 0.1635158390187902, 0.11337901101866699, 9.999999999998899e-05, 0.12060053095909329, 0.15135623777850848, 0.1888409906988574, 0.21600226247055165, 0.12214764580372828, 0.1405721141220454, 0.23155685722371033, 0.2630130022138708, 0.1288308910254673, 0.34621738907919575, 0.27668944855796795, 0.07016384558757949, 0.11322576437915599, 0.07104408037199961, 0.20232014360368966, 0.17029684759892205, 0.1043090462902142, 0.5275849797575713, 0.4916609332810673, 0.5484482146725321, 0.6025381266452674, 0.5669340898622877, 0.540035744668264, 0.5335086626702187, 0.5645246800771313, 0.5675543526425648, 0.10220124270145459, 0.17235856712732534, 0.09015062051346068, 0.14918869038205118, 0.14833937478444825, 0.1265665437173411, 0.13741787062809396, 0.10950728317396385, 0.10727360923944129, 0.1522830180351078, 0.19161055363162882, 0.22403061555925252, 0.19664252516112934, 0.19353340288045007, 0.2143631657275058, 0.22899864457304753, 0.20507301754383522, 0.16376887897753145, 0.25889297875502104, 0.30324011541506257, 0.20595125965070904, 0.273450660627921, 0.5507256147127081, 0.33491973351863924, 0.2679250418098513, 0.2868145497806951, 0.5045353871494462, 0.2422052565907501, 0.27251688689126796, 0.22336131551185512, 0.2281901599841637, 0.1532587735635741, 0.23681089449201387, 0.17474848273382282, 0.28874861636043514, 0.26641830685633283, 0.2296548129849213, 0.22112564705591653, 0.4116295558833244, 0.27429704557205437, 0.25393708255507086, 0.20692391605978377, 0.2326379270132466, 0.19551239397576992, 0.2154097795892288, 0.22901002088179723, 0.18804644526911107, 0.18831793637834637, 0.19084701804057014, 0.2870924905379486, 0.19422011941911022, 0.1967708819138012, 0.22007520569987904, 0.20426687081246941, 0.17535235983947695, 0.1956085758016729, 0.18513856718686927, 0.853351435696617, 0.3560060671921448, 0.8757283763917089, 0.8553559198811277, 0.16919964030308454, 0.13442874366711544, 0.5821816685326726, 0.719751672453101, 0.46208413758601397, 0.7491859575447042, 0.20931336361852104, 0.20509540991197794, 0.3883684528344128, 0.499071632722356, 0.3318319362175811, 0.19639170561099495, 0.19765120753207144, 0.1974169342458848, 0.20355066541306377, 0.17175700260853521, 0.17872396251533595, 0.18059120011176089, 0.17875517461522827, 0.196857160154308, 0.1007064099381123, 0.0992299406111311, 0.09211341496887471, 0.08741383495575883, 0.07795395188648158, 0.15317868552169456, 0.07059919688751182, 0.08629132951339868, 0.0918739748027434]}, "mutation_prompt": null}
{"id": "21302138-1b12-4eb3-a316-e2299d317b49", "solution": "import numpy as np\n\nclass EnhancedDynamicPSO_GA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.num_particles = 45  # Slight increase in particles for diversity\n        self.w_init = 0.7  # Initial inertia weight\n        self.w_final = 0.4  # Final inertia weight\n        self.c1 = 1.6  # Adaptive cognitive component\n        self.c2 = 2.4  # Enhanced social component\n        self.mutation_rate = 0.2  # Moderately reduced mutation rate\n        self.crossover_rate = 0.7  # Slightly increased crossover rate\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lb, self.ub, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.num_particles, float('inf'))\n        global_best_position = np.zeros(self.dim)\n        global_best_score = float('inf')\n\n        eval_count = 0\n\n        while eval_count < self.budget:\n            scores = np.array([func(p) for p in positions])\n            eval_count += self.num_particles\n\n            better_mask = scores < personal_best_scores\n            personal_best_scores[better_mask] = scores[better_mask]\n            personal_best_positions[better_mask] = positions[better_mask]\n\n            min_score_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[min_score_idx] < global_best_score:\n                global_best_score = personal_best_scores[min_score_idx]\n                global_best_position = personal_best_positions[min_score_idx]\n\n            adaptive_c1 = self.c1 * np.exp(-eval_count / (0.5 * self.budget))\n            adaptive_c2 = self.c2 * (1 - np.exp(-eval_count / (0.5 * self.budget)))\n            w = self.w_final + (self.w_init - self.w_final) * ((self.budget - eval_count) / self.budget)\n\n            r1 = np.random.rand(self.num_particles, self.dim)\n            r2 = np.random.rand(self.num_particles, self.dim)\n            velocities = (w * velocities +\n                          adaptive_c1 * r1 * (personal_best_positions - positions) +\n                          adaptive_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.lb, self.ub)\n\n            for i in range(self.num_particles):\n                if np.random.rand() < self.crossover_rate:\n                    idxs = [idx for idx in range(self.num_particles) if idx != i]\n                    partners = positions[np.random.choice(idxs, 2, replace=False)]\n                    mask = np.random.rand(2, self.dim) < 0.5\n                    child = np.where(mask[0], positions[i], partners[0])\n                    child = np.where(mask[1], child, partners[1])\n\n                    if np.random.rand() < self.mutation_rate:\n                        mutation_idx = np.random.randint(self.dim)\n                        mutation_value = np.random.uniform(self.lb, self.ub)\n                        child[mutation_idx] = mutation_value\n\n                    child_score = func(child)\n                    eval_count += 1\n                    if child_score < scores[i]:\n                        positions[i] = child\n                        scores[i] = child_score\n\n                    if eval_count >= self.budget:\n                        break\n\n            current_best_idx = np.argmin(scores)\n            if scores[current_best_idx] < global_best_score:\n                global_best_score = scores[current_best_idx]\n                global_best_position = positions[current_best_idx]\n\n        return global_best_position", "name": "EnhancedDynamicPSO_GA", "description": "Enhanced Dynamic PSO-GA with Adaptive Momentum and Multi-parent Crossover for Speedier Convergence.", "configspace": "", "generation": 56, "fitness": 0.30541930431053904, "feedback": "The algorithm EnhancedDynamicPSO_GA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.25.", "error": "", "parent_id": "71679915-b7d2-4246-a9b8-9b30791aa78f", "metadata": {"aucs": [0.8131149669204091, 0.8243462868319885, 0.8599565340913828, 0.8450160920087834, 0.859529178294413, 0.7111939809566605, 0.764970476769412, 0.8413118262620152, 0.6786106847443759, 0.6838437984663466, 0.6723448813212015, 0.6524970414257898, 0.5805329331623341, 0.6663100806385664, 0.7000192095072884, 0.3843082764634921, 0.6892750968023447, 0.6910134104946519, 0.16126464776290117, 0.16963167693998948, 0.11144322996703682, 0.17318982672817052, 0.13797681686680685, 0.2113809207892432, 0.16624774850244006, 0.1595216830877162, 0.11272590431003648, 0.14249956086269466, 0.09470679909551127, 0.1301102461088105, 0.130160184947253, 0.11940199650520322, 0.13438848480994114, 0.1387428305269114, 0.06542519917404677, 0.1298060607156829, 0.9058482991572586, 0.9306377465726305, 0.8998688996369465, 0.9037410516180413, 0.9000811199536725, 0.9028116110391022, 0.9038984719770942, 0.9211595852162954, 0.8839954151036605, 0.6202737444770192, 0.38645338514332717, 0.6761492120603909, 0.5808125027598456, 0.6176996594109024, 0.6609039996685175, 0.5595068138140504, 0.6340197374893219, 0.6863115511000533, 0.21923206543470974, 0.22430742133156967, 0.22286042804528283, 0.2759017032893807, 0.8643929715342676, 0.2642376541982283, 0.17633295563625784, 0.2318255631609325, 0.2290187122442111, 0.1531441477533736, 0.1852649801100279, 0.19373782845457843, 0.178327906352727, 0.25663079016105206, 0.1963016030454996, 0.2348404026450729, 0.1626261063230351, 0.23175223888048335, 0.16629542361689942, 0.14623823811912984, 0.16750315083142975, 0.1474304988372247, 0.14504905091526887, 0.16599180875716424, 0.16963349612897904, 0.15106645575348399, 0.12476793646254447, 0.0006936039961552565, 0.04030487901965063, 0.024150760646130087, 0.1271660260551527, 0.07972108519410848, 0.02257154102649639, 9.999999999998899e-05, 9.999999999998899e-05, 0.0049114603511892785, 0.09074794081362103, 0.08108114049077575, 0.09699489806796158, 0.06821300943141684, 0.0727836650881234, 0.054215735452853964, 0.1222220020877991, 0.20119124400989286, 0.0752295322563652, 0.19755000960967595, 0.08962280830239866, 0.05097663813730868, 0.09636733427607946, 0.18245746996001522, 0.131032916563126, 0.0988592217514862, 0.08652196278809865, 0.07097242789393476, 0.15045245914347616, 0.2237032635712326, 0.23561454013315675, 0.1682574689093138, 0.08533039487295069, 0.34635727774295233, 0.19637011873710497, 0.16398433867210827, 0.19562245399040468, 0.53989907238252, 0.5981578066225792, 0.5428672536195376, 0.5103470824899224, 0.5548938205247747, 0.4954306108050466, 0.5428065143565435, 0.5594844701032649, 0.5827297559122968, 0.11613082306540168, 0.13040556579830642, 0.1672367238513336, 0.14485782231061417, 0.11264868137984307, 0.10749157865513459, 0.12030622137967006, 0.11998979909671215, 0.09339950390617435, 0.2583837739181617, 0.23474989833390836, 0.1439638858819784, 0.21219780147749934, 0.2324493003306447, 0.159766622327571, 0.17127365514264037, 0.25288428861732204, 0.2144311977887423, 0.27234603548943526, 0.3936261867087173, 0.33739142897085017, 0.24890067471356492, 0.3666983647879186, 0.36022523646189064, 0.3850947032150782, 0.6473192394073763, 0.2700083245991999, 0.17059473194003472, 0.25932443023092533, 0.44295516759269826, 0.2128675376081577, 0.24364489122508304, 0.2481261455983208, 0.3315952673402668, 0.3396828649973188, 0.18615584270995866, 0.21064201282915496, 0.2049687248640506, 0.21335749705045615, 0.2227457361244387, 0.2012603266800248, 0.20807621137389376, 0.23281879262497807, 0.22979500704051747, 0.24413272043787237, 0.18770136368800117, 0.19530289982002447, 0.21792098910251267, 0.18853670376866594, 0.1876006744244595, 0.19267677330348731, 0.18006287765470774, 0.573678390634179, 0.189648713710885, 0.15862342825278497, 0.20240138904013882, 0.18551522192410808, 0.888281919285796, 0.19819788928554694, 0.19706560682568175, 0.841383644247037, 0.1354822253570066, 0.14537625091966366, 0.7728611914893084, 0.7726940150191886, 0.3695119813297266, 0.16647536840253963, 0.20556717634117472, 0.15348010854407312, 0.39500189176775446, 0.7317868264426074, 0.47056769901743956, 0.18362607047737445, 0.19614740741615677, 0.1930377697102169, 0.19701651037604317, 0.1722226964682705, 0.17692028016403927, 0.1795914737582438, 0.1834569843994044, 0.18242135040356244, 0.08349241749133085, 0.10911119507992861, 0.07264499107140387, 0.10969571915972554, 0.10010824485339742, 0.08092030275152462, 0.08819620176076148, 0.08267709948726965, 0.07418761782364058]}, "mutation_prompt": null}
{"id": "63a3a215-e83d-4a41-ae91-385d6fb0adea", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_GA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.num_particles = 35  # Slightly reduced population for focused search\n        self.w = 0.5  # Lower inertia to quickly react to changes \n        self.c1 = 1.7  # Increased cognitive component for personal exploration\n        self.c2 = 2.0  # Reduced social component to balance influence\n        self.mutation_rate = 0.3  # Enhanced mutation for diversity\n        self.crossover_rate = 0.65  # Slightly increased for more exploration\n\n    def __call__(self, func):\n        # Initialize particles\n        positions = np.random.uniform(self.lb, self.ub, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.num_particles, float('inf'))\n        global_best_position = np.zeros(self.dim)\n        global_best_score = float('inf')\n\n        eval_count = 0\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            scores = np.array([func(p) for p in positions])\n            eval_count += self.num_particles\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_scores[better_mask] = scores[better_mask]\n            personal_best_positions[better_mask] = positions[better_mask]\n\n            min_score_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[min_score_idx] < global_best_score:\n                global_best_score = personal_best_scores[min_score_idx]\n                global_best_position = personal_best_positions[min_score_idx]\n\n            # Adaptive cognitive and social components\n            adaptive_c1 = self.c1 * np.exp(-eval_count / (0.3 * self.budget))\n            adaptive_c2 = self.c2 * (1 - np.exp(-eval_count / (0.5 * self.budget)))\n\n            # Update velocities and positions using improved PSO-GA update rule\n            r1 = np.random.rand(self.num_particles, self.dim)\n            r2 = np.random.rand(self.num_particles, self.dim)\n            velocities = (self.w * velocities +\n                          adaptive_c1 * r1 * (personal_best_positions - positions) +\n                          adaptive_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.lb, self.ub)\n\n            # Genetic Algorithm operations with progressive mutation scaling\n            for i in range(self.num_particles):\n                if np.random.rand() < self.crossover_rate:\n                    neighbors = np.random.choice(self.num_particles, 3, replace=False)\n                    idxs = [idx for idx in neighbors if idx != i]\n                    partner = positions[np.random.choice(idxs)]\n                    mask = np.random.rand(self.dim) < 0.5\n                    child = np.where(mask, positions[i], partner)\n\n                    if np.random.rand() < self.mutation_rate:\n                        mutation_idx = np.random.randint(self.dim)\n                        mutation_value = np.random.uniform(self.lb, self.ub)\n                        mutation_factor = np.random.normal(loc=0, scale=0.1)\n                        child[mutation_idx] += mutation_factor * (mutation_value - child[mutation_idx])\n\n                    child = np.clip(child, self.lb, self.ub)\n                    child_score = func(child)\n                    eval_count += 1\n                    if child_score < scores[i]:\n                        positions[i] = child\n                        scores[i] = child_score\n\n                    if eval_count >= self.budget:\n                        break\n\n            # Update global best with the latest evaluations\n            current_best_idx = np.argmin(scores)\n            if scores[current_best_idx] < global_best_score:\n                global_best_score = scores[current_best_idx]\n                global_best_position = positions[current_best_idx]\n\n        return global_best_position", "name": "EnhancedHybridPSO_GA", "description": "Enhanced Hybrid PSO-GA with Adaptive Neighborhood Influence and Progressive Mutation Scaling for Improved Convergence.", "configspace": "", "generation": 57, "fitness": 0.2822429403992129, "feedback": "The algorithm EnhancedHybridPSO_GA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.22.", "error": "", "parent_id": "71679915-b7d2-4246-a9b8-9b30791aa78f", "metadata": {"aucs": [0.7744626268826487, 0.8612864439795936, 0.8579134639722718, 0.7619142425338554, 0.7078158872589294, 0.6954301230616267, 0.8741841964318255, 0.6793595519497022, 0.8034973018006442, 0.7971506522997484, 0.3470893381835596, 0.2349638561712728, 0.7467230071472315, 0.2563429867824043, 0.3443275759422145, 0.26455114117269773, 0.3025706758017962, 0.45109471135438817, 0.5001385365112021, 0.1724493469635625, 0.1702027984534783, 0.6061031197662673, 0.1606480383737524, 0.23092809736767828, 0.16476696547510705, 0.22673124609323714, 0.14666210598457696, 0.14076406632414784, 0.15288761291620379, 0.14161687378372956, 0.11514236064863204, 0.12806859487658007, 0.10434367142247336, 0.13560566926970097, 0.1134391097513775, 0.25909557613250755, 0.8483408248534917, 0.7614813110510141, 0.8217633060024815, 0.7996861148564312, 0.7264604601480633, 0.8229055871018953, 0.8816783264580774, 0.7991167422212977, 0.7943434558300871, 0.31201609174923584, 0.2913610052661323, 0.3452479135382627, 0.2831104971543589, 0.1447251606940232, 0.2230712861075963, 0.2385641698877996, 0.3105966904084274, 0.32069820543065675, 0.22318206855048928, 0.3367013420539521, 0.1378442425043127, 0.3503006400423182, 0.3750269230652026, 0.27998945352484306, 0.3273835199514634, 0.2288027941044679, 0.1736446840359429, 0.12893368543105777, 0.0006929513110884855, 0.14413119522709328, 0.25475786448111815, 0.2797198546129569, 0.1892748603173241, 0.15293202895299385, 0.12696085875509056, 0.1460901640180302, 0.14752111713720495, 0.153846184522775, 0.15891029811898594, 0.13175040933993243, 0.15895450217333584, 0.15016676684121044, 0.17619136003445723, 0.17020341236708114, 0.1276785849729667, 9.999999999998899e-05, 0.00040983067722921707, 9.999999999998899e-05, 0.19000680427046723, 0.011758676936935997, 0.050586979175192726, 0.020504507091823276, 9.999999999998899e-05, 9.999999999998899e-05, 0.12288418932485001, 0.16587567582796092, 0.12121138979163948, 0.07947500443523059, 0.046488392461132566, 0.09968050610434165, 0.13672655269192324, 0.09844208319590142, 0.1252345525781653, 0.06726506195625603, 0.20407634625205306, 0.18859698437490802, 0.09151658821732822, 0.17619895150141218, 0.13837042240162267, 0.2071066432248052, 0.08653900103341383, 0.32685189565814676, 0.12093261625625151, 0.33578673824428784, 0.25898367438455105, 0.48257311085271637, 0.3200139005157575, 0.08573024120704975, 0.14519897411229143, 0.20853871019623282, 0.08278025365500763, 0.5091822065547528, 0.38244946796259616, 0.45272828604182036, 0.4341445254296603, 0.39492788602994067, 0.4095388643438035, 0.43763366946733473, 0.4270592319874914, 0.49744381091480483, 0.11151594576060397, 0.1471459190075426, 0.12071150933170027, 0.13338171641012464, 0.150755038332112, 0.1137823295323962, 0.13068936267311415, 0.11670819042220049, 0.1094774628109979, 0.1757004680159222, 0.13714845343285176, 0.25131091581534415, 0.33733734139665006, 0.1687504395373981, 0.19063767842783208, 0.23817617551704573, 0.2383686250055126, 0.19795176744596332, 0.2573727796945815, 0.5330481661719171, 0.25965851681333385, 0.30392526511005313, 0.344611206744072, 0.3026181688850378, 0.2626075752387359, 0.3753993096423631, 0.21903828332176833, 0.12291144609062032, 0.21591981928408333, 0.20892272316877702, 0.23096947312591187, 0.27573327735397735, 0.2326941713644638, 0.23869697034613124, 0.3075611226681415, 0.17500702552795633, 0.2557625830808785, 0.24256518916312642, 0.23844277811786307, 0.27812895503145807, 0.27394361323664185, 0.26943826506099, 0.22280125332634992, 0.2357499264657522, 0.23701155272792263, 0.2469021017324895, 0.19258819001561345, 0.214593242172485, 0.2047461020303536, 0.2201226301522795, 0.22335644257551124, 0.6037778597076471, 0.22057244369242557, 0.19587020489855844, 0.202927166267848, 0.1855523320805329, 0.1852554184915135, 0.19604137573665759, 0.8856726842221407, 0.9045705385011803, 0.8858967875100106, 0.8030247988069925, 0.16478041011328182, 0.607253787312794, 0.5836435959350774, 0.45636717570154106, 0.5039177442514948, 0.1662550733247634, 0.19799649772087546, 0.1018176646953316, 0.44101634357617936, 0.26689150330134204, 0.19870105964145068, 0.19230400126147962, 0.21031731631942008, 0.17842554176633785, 0.17899195503355514, 0.19246460406100618, 0.22105141681372342, 0.1991242780734227, 0.2371985688272399, 0.08313303174057096, 0.09845278964134063, 0.07943434087367518, 0.0831455872536222, 0.09588182467147799, 0.08349801134477042, 0.08388510379567304, 0.07211913943681048, 0.09596399012251533]}, "mutation_prompt": null}
{"id": "69e1a432-b507-46c4-96fc-287cd6d17136", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_GA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.num_particles = 50  # Increase particles for better exploration\n        self.w = 0.5  # Reduced inertia for faster convergence\n        self.c1 = 2.0  # Increased cognitive component for stronger personal best pull\n        self.c2 = 2.0  # Balanced social component for global best attraction\n        self.mutation_rate = 0.3  # Enhanced mutation rate for diversity\n        self.crossover_rate = 0.7  # Elevated crossover rate for genetic diversity\n\n    def __call__(self, func):\n        # Initialize particles\n        positions = np.random.uniform(self.lb, self.ub, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.num_particles, float('inf'))\n        global_best_position = np.zeros(self.dim)\n        global_best_score = float('inf')\n\n        eval_count = 0\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            scores = np.array([func(p) for p in positions])\n            eval_count += self.num_particles\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_scores[better_mask] = scores[better_mask]\n            personal_best_positions[better_mask] = positions[better_mask]\n\n            min_score_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[min_score_idx] < global_best_score:\n                global_best_score = personal_best_scores[min_score_idx]\n                global_best_position = personal_best_positions[min_score_idx]\n\n            # Adaptive cognitive and social components\n            diversity_factor = np.std(positions, axis=0) / (self.ub - self.lb)\n            adaptive_c1 = self.c1 * (1 + diversity_factor.mean())\n            adaptive_c2 = self.c2 * (1 - diversity_factor.mean())\n\n            # Update velocities and positions using enhanced PSO-GA update rule\n            r1 = np.random.rand(self.num_particles, self.dim)\n            r2 = np.random.rand(self.num_particles, self.dim)\n            velocities = (self.w * velocities +\n                          adaptive_c1 * r1 * (personal_best_positions - positions) +\n                          adaptive_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.lb, self.ub)\n\n            # Genetic Algorithm operations with adaptive memory\n            for i in range(self.num_particles):\n                if np.random.rand() < self.crossover_rate:\n                    idxs = [idx for idx in range(self.num_particles) if idx != i]\n                    partner = positions[np.random.choice(idxs)]\n                    mask = np.random.rand(self.dim) < 0.5\n                    child = np.where(mask, positions[i], partner)\n\n                    if np.random.rand() < self.mutation_rate:\n                        mutation_idx = np.random.randint(self.dim)\n                        mutation_value = np.random.uniform(self.lb, self.ub)\n                        child[mutation_idx] = mutation_value\n\n                    child_score = func(child)\n                    eval_count += 1\n                    if child_score < scores[i]:\n                        positions[i] = child\n                        scores[i] = child_score\n\n                    if eval_count >= self.budget:\n                        break\n\n            # Update global best with the latest evaluations\n            current_best_idx = np.argmin(scores)\n            if scores[current_best_idx] < global_best_score:\n                global_best_score = scores[current_best_idx]\n                global_best_position = positions[current_best_idx]\n\n        return global_best_position", "name": "EnhancedHybridPSO_GA", "description": "Enhanced PSO-GA with Proactive Diversity Control and Adaptive Memory for Improved Convergence Speed.", "configspace": "", "generation": 58, "fitness": 0.21951489334792582, "feedback": "The algorithm EnhancedHybridPSO_GA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.22.", "error": "", "parent_id": "71679915-b7d2-4246-a9b8-9b30791aa78f", "metadata": {"aucs": [0.7355142183749069, 0.7376632925679178, 0.6201308294734293, 0.6922298780331718, 0.6926716983991736, 0.6825269120134283, 0.724658310410109, 0.6242347085466986, 0.4904174247288824, 0.12025772574842031, 0.4549518029469275, 0.11773281421239268, 0.05834998412780368, 0.42643212099453953, 0.2535101417606568, 0.19283866442376185, 0.30688843380811426, 0.3278316097479749, 0.1432627953103942, 0.0804981656526863, 0.12394412781892628, 0.09774879828164484, 0.08505509770944086, 0.08641911515703271, 0.13115405593611906, 0.10667758675493055, 0.05957541568451796, 0.10603310068987648, 0.10909112461890069, 0.08779461321870963, 0.07917514052132923, 0.090779061410863, 0.08300093675215103, 0.06751149557017211, 0.10561719573130923, 0.2579126319508456, 0.9790721879741782, 0.964498743862552, 0.9720753197895049, 0.9644621922760077, 0.9647729606924041, 0.972402230003556, 0.9708709596301833, 0.9790900668128484, 0.9789097601637243, 0.17231398543506438, 0.2560349202383895, 0.1975377406647736, 0.1402045391503327, 0.22847840480991943, 0.14193320489413785, 0.13399069524752882, 0.214928682098961, 0.22166672631644013, 0.2237578069675381, 0.1713187183949747, 0.24095050154219189, 0.18509985489062764, 0.18370609023287576, 0.2555552854499271, 0.24743030914985975, 0.3328294497489014, 0.19249541928404978, 0.12821974468637454, 0.13920853773126762, 0.17203344058111414, 0.09548674080454622, 0.11033951669518138, 0.20002422659312802, 0.10902198946572539, 0.10639268558234294, 0.15384627620337232, 0.04302862017221909, 0.10403492620331267, 0.11236869006882277, 0.17617897320732123, 0.11913041899411114, 0.16713238243105966, 0.18804926493799068, 0.027281546177939542, 0.157819802070974, 9.999999999998899e-05, 0.0007347544564320074, 9.999999999998899e-05, 0.00019650622078715152, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026094531032772483, 0.04697459185716213, 0.0568378369891438, 0.03638353370562841, 0.0671957297277318, 0.008313707425841699, 0.01032598156958442, 0.059711535631629564, 0.0539685543299846, 0.02572026164031127, 0.020595497394889528, 0.034463818252987055, 9.999999999998899e-05, 0.07192046645336381, 0.01050651012856163, 9.999999999998899e-05, 0.07376904067206469, 0.03650454895580202, 0.039757520087175036, 0.20640531580853116, 0.08576011263458239, 0.05049076189632962, 0.008151130732005685, 0.03565821404907743, 0.006289351745572991, 0.07815828274403192, 0.18945357612055203, 0.014269707977509483, 0.4346247866453876, 0.4297091074674797, 0.44591467655048667, 0.44626797496396353, 0.5114801266428972, 0.5129137839703581, 0.4589351748690067, 0.46348950996822735, 0.4658488794665204, 0.07778006415022665, 0.07128290861847308, 0.08228721459911026, 0.08420652777606485, 0.10810348445028173, 0.10091678220634892, 0.08302925764272173, 0.06107665595526124, 0.11039858051306806, 0.1546025528308803, 0.20405526828121223, 0.15018008655280246, 0.2087241175506882, 0.23677147740711835, 0.1570464889092107, 0.1785215281678616, 0.21292922126440694, 0.17790230477359015, 0.26434889719989807, 0.23342536414881165, 0.3283320401466082, 0.2402947906483025, 0.39066468685813127, 0.29055395060696654, 0.3510695585886766, 0.25618561149633856, 0.22081318749818235, 0.18247332037860486, 0.1485987657774498, 0.19311541090504702, 0.15695943485049157, 0.1730573846179082, 0.25871823971314845, 0.21266843453165973, 0.21288876422429326, 0.1357324687956778, 0.16966552318481154, 0.1629875949123798, 0.1805263215660987, 0.21525350959916023, 0.17205371317402407, 0.15108291662685425, 0.2062464899237919, 0.15379775972272924, 0.19079693512416818, 0.1803129046006059, 0.18788447847969159, 0.20735784859385165, 0.21183900921366017, 0.23370427265675675, 0.16857597858178652, 0.18656168335227608, 0.20756743983087111, 0.1898161940187204, 0.7280578596176939, 0.1643762823925048, 0.15240998632254799, 0.8118128380855101, 0.19862682789824015, 0.19510115438467135, 0.14223095431744825, 0.1585743561286974, 0.21053629839321353, 0.3464173451214507, 0.20964530278407856, 0.19816366191903456, 0.1955438763345777, 0.29428838181770733, 0.1471896515978045, 0.10440275350724992, 0.10460510767085074, 0.1870973471908164, 0.17266381421371024, 0.18176551187452983, 0.18728058410865944, 0.16845917289811674, 0.18961118610331973, 0.20966533752080485, 0.18601983220171203, 0.17480396912868368, 0.17617531105180717, 0.08545913853758158, 0.06998663604006672, 0.06847335824742773, 0.07665274008967571, 0.07262308058411504, 0.06468730138241785, 0.06496736299111272, 0.07267596639678087, 0.07775030029880858]}, "mutation_prompt": null}
{"id": "f529d53b-8365-4f20-b387-3cf0dde87c4a", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_GA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.num_particles = 40  # Reduced to focus on promising areas\n        self.w = 0.6  # Adjusted inertia for balance between exploration and exploitation\n        self.c1 = 1.5  # Adaptive cognitive component\n        self.c2 = 2.2  # Increased social component to enhance attraction to global best\n        self.mutation_rate = 0.25  # Increased mutation rate for diversity\n        self.crossover_rate = 0.6  # Adjusted crossover rate for improved exploitation\n\n    def __call__(self, func):\n        # Initialize particles\n        positions = np.random.uniform(self.lb, self.ub, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.num_particles, float('inf'))\n        global_best_position = np.zeros(self.dim)\n        global_best_score = float('inf')\n\n        eval_count = 0\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            scores = np.array([func(p) for p in positions])\n            eval_count += self.num_particles\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_scores[better_mask] = scores[better_mask]\n            personal_best_positions[better_mask] = positions[better_mask]\n\n            min_score_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[min_score_idx] < global_best_score:\n                global_best_score = personal_best_scores[min_score_idx]\n                global_best_position = personal_best_positions[min_score_idx]\n\n            # Adaptive cognitive and social components\n            adaptive_c1 = self.c1 * np.exp(-eval_count / (0.4 * self.budget))\n            adaptive_c2 = self.c2 * (1 - np.exp(-eval_count / (0.4 * self.budget)))\n\n            # Update velocities and positions using hybrid PSO-GA update rule\n            r1 = np.random.rand(self.num_particles, self.dim)\n            r2 = np.random.rand(self.num_particles, self.dim)\n            velocities = (self.w * velocities +\n                          adaptive_c1 * r1 * (personal_best_positions - positions) +\n                          adaptive_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.lb, self.ub)\n\n            # Genetic Algorithm operations\n            for i in range(self.num_particles):\n                if np.random.rand() < self.crossover_rate:\n                    idxs = [idx for idx in range(self.num_particles) if idx != i]\n                    partner = positions[np.random.choice(idxs)]\n                    mask = np.random.rand(self.dim) < 0.5\n                    child = np.where(mask, positions[i], partner)\n\n                    if np.random.rand() < self.mutation_rate:\n                        mutation_idx = np.random.randint(self.dim)\n                        mutation_value = np.random.uniform(self.lb, self.ub)\n                        child[mutation_idx] = mutation_value\n\n                    child_score = func(child)\n                    eval_count += 1\n                    if child_score < scores[i]:\n                        positions[i] = child\n                        scores[i] = child_score\n\n                    if eval_count >= self.budget:\n                        break\n\n            # Update global best with the latest evaluations\n            current_best_idx = np.argmin(scores)\n            if scores[current_best_idx] < global_best_score:\n                global_best_score = scores[current_best_idx]\n                global_best_position = positions[current_best_idx]\n\n        return global_best_position", "name": "EnhancedHybridPSO_GA", "description": "Enhanced Hybrid PSO-GA with Dynamic Population Refinement and Targeted Mutation for Accelerated Convergence.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "71679915-b7d2-4246-a9b8-9b30791aa78f", "metadata": {"aucs": [0.8709116999593831, 0.8723138723777221, 0.8768372615335654, 0.8617868929087722, 0.8732786663332638, 0.8700165787014595, 0.7565562986219209, 0.868539258880491, 0.8709766980904352, 0.7164359951709853, 0.7048047712591957, 0.4776950380186241, 0.3855705320648811, 0.6623877477389744, 0.7604071468026499, 0.2925765172942847, 0.6462031836272428, 0.19553392270172443, 0.17303437138306488, 0.2311803368732268, 0.13147514920023173, 0.14639486955092984, 0.35218672427787756, 0.35487832224036875, 0.14866342766770446, 0.32622137780232907, 0.17580831107043648, 0.1364785949220515, 0.13723180340024177, 0.1415672077043013, 0.1034515896336532, 0.18768357811791359, 0.11499926313848663, 0.14052555748747397, 0.1397271088896036, 0.14224280497807062, 0.8572855482713462, 0.8816167955365596, 0.8719308246693213, 0.9193998394786392, 0.914420324363186, 0.868569508913773, 0.9178142773244033, 0.8901375456634961, 0.9104234556450416, 0.44374478233240466, 0.7135385169264723, 0.28224185632107246, 0.6757261041085597, 0.5347767213601308, 0.6924610301299955, 0.2150090318021105, 0.5979667369466203, 0.46334160313151795, 0.3816440509835938, 0.8871688407181226, 0.2215335955350327, 0.2782753108644027, 0.20804701301111983, 0.21414455095505636, 0.17006784993710677, 0.14936435372393353, 0.8927547238016643, 0.12598746301048813, 0.27674670478297914, 0.13402205898302322, 0.1989156862933854, 0.1637406030113836, 0.15700652057774145, 0.3784850467672597, 0.20359559468799404, 0.15199652764569382, 0.19805528150264373, 0.12909579769588853, 0.20974198883930295, 0.13618812474127684, 0.1676843122643138, 0.21199600895034987, 0.1806227083724674, 0.18720342152943903, 0.14286907178205843, 0.011209799583482005, 0.05529339075019002, 9.999999999998899e-05, 0.10832408699422724, 0.04279531077019072, 9.999999999998899e-05, 0.05451701182477431, 0.06287221396818243, 0.011708930366438275, 0.11851476671790695, 0.13042357546193484, 0.08751705868258464, 0.0737520182321394, 0.0674670842998144, 0.07040643281963133, 0.12270959020209427, 0.1635158390187902, 0.11337901101866699, 9.999999999998899e-05, 0.12060053095909329, 0.15135623777850848, 0.1888409906988574, 0.21600226247055165, 0.12214764580372828, 0.1405721141220454, 0.23155685722371033, 0.2630130022138708, 0.1288308910254673, 0.34621738907919575, 0.27668944855796795, 0.07016384558757949, 0.11322576437915599, 0.07104408037199961, 0.20232014360368966, 0.17029684759892205, 0.1043090462902142, 0.5275849797575713, 0.4916609332810673, 0.5484482146725321, 0.6025381266452674, 0.5669340898622877, 0.540035744668264, 0.5335086626702187, 0.5645246800771313, 0.5675543526425648, 0.10220124270145459, 0.17235856712732534, 0.09015062051346068, 0.14918869038205118, 0.14833937478444825, 0.1265665437173411, 0.13741787062809396, 0.10950728317396385, 0.10727360923944129, 0.1522830180351078, 0.19161055363162882, 0.22403061555925252, 0.19664252516112934, 0.19353340288045007, 0.2143631657275058, 0.22899864457304753, 0.20507301754383522, 0.16376887897753145, 0.25889297875502104, 0.30324011541506257, 0.20595125965070904, 0.273450660627921, 0.5507256147127081, 0.33491973351863924, 0.2679250418098513, 0.2868145497806951, 0.5045353871494462, 0.2422052565907501, 0.27251688689126796, 0.22336131551185512, 0.2281901599841637, 0.1532587735635741, 0.23681089449201387, 0.17474848273382282, 0.28874861636043514, 0.26641830685633283, 0.2296548129849213, 0.22112564705591653, 0.4116295558833244, 0.27429704557205437, 0.25393708255507086, 0.20692391605978377, 0.2326379270132466, 0.19551239397576992, 0.2154097795892288, 0.22901002088179723, 0.18804644526911107, 0.18831793637834637, 0.19084701804057014, 0.2870924905379486, 0.19422011941911022, 0.1967708819138012, 0.22007520569987904, 0.20426687081246941, 0.17535235983947695, 0.1956085758016729, 0.18513856718686927, 0.853351435696617, 0.3560060671921448, 0.8757283763917089, 0.8553559198811277, 0.16919964030308454, 0.13442874366711544, 0.5821816685326726, 0.719751672453101, 0.46208413758601397, 0.7491859575447042, 0.20931336361852104, 0.20509540991197794, 0.3883684528344128, 0.499071632722356, 0.3318319362175811, 0.19639170561099495, 0.19765120753207144, 0.1974169342458848, 0.20355066541306377, 0.17175700260853521, 0.17872396251533595, 0.18059120011176089, 0.17875517461522827, 0.196857160154308, 0.1007064099381123, 0.0992299406111311, 0.09211341496887471, 0.08741383495575883, 0.07795395188648158, 0.15317868552169456, 0.07059919688751182, 0.08629132951339868, 0.0918739748027434]}, "mutation_prompt": null}
{"id": "4c7ace7b-95a0-4ab3-b43a-e014849a2395", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_GA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.num_particles = 40  # Reduced to focus on promising areas\n        self.w = 0.6  # Adjusted inertia for balance between exploration and exploitation\n        self.c1 = 1.5  # Adaptive cognitive component\n        self.c2 = 2.2  # Increased social component to enhance attraction to global best\n        self.mutation_rate = 0.25  # Increased mutation rate for diversity\n        self.crossover_rate = 0.6  # Adjusted crossover rate for improved exploitation\n\n    def __call__(self, func):\n        # Initialize particles\n        positions = np.random.uniform(self.lb, self.ub, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.num_particles, float('inf'))\n        global_best_position = np.zeros(self.dim)\n        global_best_score = float('inf')\n\n        eval_count = 0\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            scores = np.array([func(p) for p in positions])\n            eval_count += self.num_particles\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_scores[better_mask] = scores[better_mask]\n            personal_best_positions[better_mask] = positions[better_mask]\n\n            min_score_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[min_score_idx] < global_best_score:\n                global_best_score = personal_best_scores[min_score_idx]\n                global_best_position = personal_best_positions[min_score_idx]\n\n            # Adaptive cognitive and social components\n            adaptive_c1 = self.c1 * np.exp(-eval_count / (0.4 * self.budget))\n            adaptive_c2 = self.c2 * (1 - np.exp(-eval_count / (0.4 * self.budget)))\n\n            # Update velocities and positions using hybrid PSO-GA update rule\n            r1 = np.random.rand(self.num_particles, self.dim)\n            r2 = np.random.rand(self.num_particles, self.dim)\n            velocities = (self.w * velocities +\n                          adaptive_c1 * r1 * (personal_best_positions - positions) +\n                          adaptive_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.lb, self.ub)\n\n            # Genetic Algorithm operations\n            for i in range(self.num_particles):\n                if np.random.rand() < self.crossover_rate:\n                    idxs = [idx for idx in range(self.num_particles) if idx != i]\n                    partner = positions[np.random.choice(idxs)]\n                    mask = np.random.rand(self.dim) < 0.5\n                    child = np.where(mask, positions[i], partner)\n\n                    if np.random.rand() < self.mutation_rate:\n                        mutation_idx = np.random.randint(self.dim)\n                        mutation_value = np.random.uniform(self.lb, self.ub)\n                        child[mutation_idx] = mutation_value\n\n                    child_score = func(child)\n                    eval_count += 1\n                    if child_score < scores[i]:\n                        positions[i] = child\n                        scores[i] = child_score\n\n                    if eval_count >= self.budget:\n                        break\n\n            # Update global best with the latest evaluations\n            current_best_idx = np.argmin(scores)\n            if scores[current_best_idx] < global_best_score:\n                global_best_score = scores[current_best_idx]\n                global_best_position = positions[current_best_idx]\n\n        return global_best_position", "name": "EnhancedHybridPSO_GA", "description": "Enhanced Hybrid PSO-GA with Dynamic Population Refinement and Targeted Mutation for Accelerated Convergence.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "71679915-b7d2-4246-a9b8-9b30791aa78f", "metadata": {"aucs": [0.8709116999593831, 0.8723138723777221, 0.8768372615335654, 0.8617868929087722, 0.8732786663332638, 0.8700165787014595, 0.7565562986219209, 0.868539258880491, 0.8709766980904352, 0.7164359951709853, 0.7048047712591957, 0.4776950380186241, 0.3855705320648811, 0.6623877477389744, 0.7604071468026499, 0.2925765172942847, 0.6462031836272428, 0.19553392270172443, 0.17303437138306488, 0.2311803368732268, 0.13147514920023173, 0.14639486955092984, 0.35218672427787756, 0.35487832224036875, 0.14866342766770446, 0.32622137780232907, 0.17580831107043648, 0.1364785949220515, 0.13723180340024177, 0.1415672077043013, 0.1034515896336532, 0.18768357811791359, 0.11499926313848663, 0.14052555748747397, 0.1397271088896036, 0.14224280497807062, 0.8572855482713462, 0.8816167955365596, 0.8719308246693213, 0.9193998394786392, 0.914420324363186, 0.868569508913773, 0.9178142773244033, 0.8901375456634961, 0.9104234556450416, 0.44374478233240466, 0.7135385169264723, 0.28224185632107246, 0.6757261041085597, 0.5347767213601308, 0.6924610301299955, 0.2150090318021105, 0.5979667369466203, 0.46334160313151795, 0.3816440509835938, 0.8871688407181226, 0.2215335955350327, 0.2782753108644027, 0.20804701301111983, 0.21414455095505636, 0.17006784993710677, 0.14936435372393353, 0.8927547238016643, 0.12598746301048813, 0.27674670478297914, 0.13402205898302322, 0.1989156862933854, 0.1637406030113836, 0.15700652057774145, 0.3784850467672597, 0.20359559468799404, 0.15199652764569382, 0.19805528150264373, 0.12909579769588853, 0.20974198883930295, 0.13618812474127684, 0.1676843122643138, 0.21199600895034987, 0.1806227083724674, 0.18720342152943903, 0.14286907178205843, 0.011209799583482005, 0.05529339075019002, 9.999999999998899e-05, 0.10832408699422724, 0.04279531077019072, 9.999999999998899e-05, 0.05451701182477431, 0.06287221396818243, 0.011708930366438275, 0.11851476671790695, 0.13042357546193484, 0.08751705868258464, 0.0737520182321394, 0.0674670842998144, 0.07040643281963133, 0.12270959020209427, 0.1635158390187902, 0.11337901101866699, 9.999999999998899e-05, 0.12060053095909329, 0.15135623777850848, 0.1888409906988574, 0.21600226247055165, 0.12214764580372828, 0.1405721141220454, 0.23155685722371033, 0.2630130022138708, 0.1288308910254673, 0.34621738907919575, 0.27668944855796795, 0.07016384558757949, 0.11322576437915599, 0.07104408037199961, 0.20232014360368966, 0.17029684759892205, 0.1043090462902142, 0.5275849797575713, 0.4916609332810673, 0.5484482146725321, 0.6025381266452674, 0.5669340898622877, 0.540035744668264, 0.5335086626702187, 0.5645246800771313, 0.5675543526425648, 0.10220124270145459, 0.17235856712732534, 0.09015062051346068, 0.14918869038205118, 0.14833937478444825, 0.1265665437173411, 0.13741787062809396, 0.10950728317396385, 0.10727360923944129, 0.1522830180351078, 0.19161055363162882, 0.22403061555925252, 0.19664252516112934, 0.19353340288045007, 0.2143631657275058, 0.22899864457304753, 0.20507301754383522, 0.16376887897753145, 0.25889297875502104, 0.30324011541506257, 0.20595125965070904, 0.273450660627921, 0.5507256147127081, 0.33491973351863924, 0.2679250418098513, 0.2868145497806951, 0.5045353871494462, 0.2422052565907501, 0.27251688689126796, 0.22336131551185512, 0.2281901599841637, 0.1532587735635741, 0.23681089449201387, 0.17474848273382282, 0.28874861636043514, 0.26641830685633283, 0.2296548129849213, 0.22112564705591653, 0.4116295558833244, 0.27429704557205437, 0.25393708255507086, 0.20692391605978377, 0.2326379270132466, 0.19551239397576992, 0.2154097795892288, 0.22901002088179723, 0.18804644526911107, 0.18831793637834637, 0.19084701804057014, 0.2870924905379486, 0.19422011941911022, 0.1967708819138012, 0.22007520569987904, 0.20426687081246941, 0.17535235983947695, 0.1956085758016729, 0.18513856718686927, 0.853351435696617, 0.3560060671921448, 0.8757283763917089, 0.8553559198811277, 0.16919964030308454, 0.13442874366711544, 0.5821816685326726, 0.719751672453101, 0.46208413758601397, 0.7491859575447042, 0.20931336361852104, 0.20509540991197794, 0.3883684528344128, 0.499071632722356, 0.3318319362175811, 0.19639170561099495, 0.19765120753207144, 0.1974169342458848, 0.20355066541306377, 0.17175700260853521, 0.17872396251533595, 0.18059120011176089, 0.17875517461522827, 0.196857160154308, 0.1007064099381123, 0.0992299406111311, 0.09211341496887471, 0.08741383495575883, 0.07795395188648158, 0.15317868552169456, 0.07059919688751182, 0.08629132951339868, 0.0918739748027434]}, "mutation_prompt": null}
{"id": "43d0a03c-1c2b-48b7-a66a-25b0bab3e006", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_GA_VNS:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.num_particles = 35  # Slightly reduced to focus evaluations\n        self.w = 0.5  # Reduced inertia for quicker convergence\n        self.c1 = 1.4  # Fine-tuned cognitive component\n        self.c2 = 2.5  # Further increased social component for global exploration\n        self.mutation_rate = 0.3  # Higher mutation rate for maintaining diversity\n        self.crossover_rate = 0.7  # Increased crossover rate for better exploitation\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lb, self.ub, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.num_particles, float('inf'))\n        global_best_position = np.zeros(self.dim)\n        global_best_score = float('inf')\n\n        eval_count = 0\n\n        while eval_count < self.budget:\n            scores = np.array([func(p) for p in positions])\n            eval_count += self.num_particles\n\n            better_mask = scores < personal_best_scores\n            personal_best_scores[better_mask] = scores[better_mask]\n            personal_best_positions[better_mask] = positions[better_mask]\n\n            min_score_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[min_score_idx] < global_best_score:\n                global_best_score = personal_best_scores[min_score_idx]\n                global_best_position = personal_best_positions[min_score_idx]\n\n            adaptive_c1 = self.c1 * np.exp(-eval_count / (0.2 * self.budget))\n            adaptive_c2 = self.c2 * (1 - np.exp(-eval_count / (0.2 * self.budget)))\n\n            r1 = np.random.rand(self.num_particles, self.dim)\n            r2 = np.random.rand(self.num_particles, self.dim)\n            velocities = (self.w * velocities +\n                          adaptive_c1 * r1 * (personal_best_positions - positions) +\n                          adaptive_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.lb, self.ub)\n\n            for i in range(self.num_particles):\n                if np.random.rand() < self.crossover_rate:\n                    idxs = [idx for idx in range(self.num_particles) if idx != i]\n                    partner = positions[np.random.choice(idxs)]\n                    mask = np.random.rand(self.dim) < 0.5\n                    child = np.where(mask, positions[i], partner)\n\n                    if np.random.rand() < self.mutation_rate:\n                        mutation_idx = np.random.randint(self.dim)\n                        mutation_step = np.random.uniform(-0.5, 0.5)\n                        child[mutation_idx] += mutation_step\n                        child = np.clip(child, self.lb, self.ub)\n\n                    child_score = func(child)\n                    eval_count += 1\n                    if child_score < scores[i]:\n                        positions[i] = child\n                        scores[i] = child_score\n\n                    # Apply Variable Neighborhood Search\n                    if np.random.rand() < 0.1:\n                        neighbor = child + np.random.normal(0, 0.1, self.dim)\n                        neighbor = np.clip(neighbor, self.lb, self.ub)\n                        neighbor_score = func(neighbor)\n                        eval_count += 1\n                        if neighbor_score < child_score:\n                            positions[i] = neighbor\n                            scores[i] = neighbor_score\n\n                    if eval_count >= self.budget:\n                        break\n\n            current_best_idx = np.argmin(scores)\n            if scores[current_best_idx] < global_best_score:\n                global_best_score = scores[current_best_idx]\n                global_best_position = positions[current_best_idx]\n\n        return global_best_position", "name": "EnhancedHybridPSO_GA_VNS", "description": "Improved Enhanced Hybrid PSO-GA with Variable Neighborhood Search and Adaptive Mutation for Faster Convergence.", "configspace": "", "generation": 61, "fitness": 0.2898137316531042, "feedback": "The algorithm EnhancedHybridPSO_GA_VNS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.25.", "error": "", "parent_id": "71679915-b7d2-4246-a9b8-9b30791aa78f", "metadata": {"aucs": [0.7150127297414826, 0.656398120556255, 0.8949307002183992, 0.8812490014145932, 0.877774618225992, 0.8973664381663633, 0.7954743601145792, 0.6178980001552129, 0.6684233830704192, 0.6299936084215609, 0.29854076790945905, 0.6526322082343208, 9.999999999998899e-05, 0.6561320143011651, 0.5858444164868355, 0.3483506175604624, 0.42159626200814726, 0.703901592346109, 0.13705461646771822, 0.1412593005114613, 0.158613687435334, 0.11246536865592394, 0.16480201101112069, 0.07152353464622752, 0.12183859428857324, 0.15414599685635344, 0.098860556427675, 0.1556368863572547, 0.10779366711955485, 0.17194942955791537, 0.1041346561633234, 0.11334667733711834, 0.10582311238081166, 0.13361934133107078, 0.08830340858586261, 0.11392213958604247, 0.8658159595092727, 0.8543455396965738, 0.8825240397390105, 0.8653679771164556, 0.8775755218029382, 0.8475965185181225, 0.8756579260252103, 0.8791924087559138, 0.9390214437769051, 0.735113595721333, 0.668046363943587, 0.5757313390264702, 0.7199635038781211, 0.6365139896662646, 0.7206789452623656, 0.5130114753685866, 0.45260746697195486, 0.640167625596874, 0.394092640272117, 0.2264850965329157, 0.15568803324380553, 0.2789728235137927, 0.21158891688328207, 0.19416911129053083, 0.14946339895784388, 0.29527269589389904, 0.23403458268326272, 0.10867287009452997, 0.12310271552584506, 0.205632199713913, 0.169782946802428, 0.13085550872896967, 0.3191419428086111, 0.20618522406964657, 0.12707795491925356, 0.18849707023285733, 0.1428347526910888, 0.18800662804436696, 0.13203767740182626, 0.19013023524736306, 0.1288074623865656, 0.18490958753102138, 0.21261170314326405, 0.22613594172597418, 0.19199875272129474, 0.013764686053083675, 0.009671348775723843, 0.004799181261770591, 0.052907995634409954, 0.0677069368305363, 0.056558803162887084, 0.00923140985270643, 9.999999999998899e-05, 0.11654468658741135, 0.13891639386519783, 0.16501689364258854, 0.13187824625005118, 0.07538755061168578, 0.018809638002451723, 0.06366517322863563, 0.072999856542865, 0.1425417885588377, 0.11241116832230946, 9.999999999998899e-05, 0.08705290650083475, 0.17772682504573245, 0.07817032338614138, 0.0837812213139918, 0.1089726710144987, 0.0373421767183294, 9.999999999998899e-05, 0.08676911280965138, 0.16690152857852703, 0.148868510142929, 0.11327977181699467, 0.015667226597189443, 0.1373436205423021, 0.16039350830228527, 0.09989323595211697, 0.17996925465302083, 0.0822633341981438, 0.5094580576677294, 0.5156057114758434, 0.4658057780884718, 0.6010483768764655, 0.5747385850173476, 0.5603724608255103, 0.5801353901344211, 0.37253192847448124, 0.5910083084772411, 0.09885931439975015, 0.07273551964178604, 0.08956306270188275, 0.1459784028463067, 0.11375331715591097, 0.12214813827934212, 0.11705284034077446, 0.12065387401435146, 0.14226016183807855, 0.14128250770204198, 0.23089623271060944, 0.5368295773306091, 0.2560445901148264, 0.19987552897505745, 0.177414929825641, 0.18168488912086755, 0.1672514570521071, 0.2724005734798519, 0.2974376721185453, 0.2798625865737039, 0.1789557236387027, 0.2964029728967128, 0.3250100919928125, 0.34159003027853496, 0.3704808465175028, 0.3807785281628716, 0.23165132681244738, 0.13589851382468787, 0.21271564009402932, 0.26334338478987707, 0.28968768947344237, 0.1600416496034308, 0.2264695070475855, 0.23698771132414487, 0.25572412224748764, 0.20105203026982776, 0.18698674229473466, 0.24680130484224916, 0.20567856948199048, 0.23712845414672157, 0.22175396722915364, 0.21443927896540071, 0.22418057727063745, 0.17566656949032344, 0.241787160327125, 0.1903803758931727, 0.18532357654484344, 0.24818818021107414, 0.19368859651612902, 0.22239681151949042, 0.1802793292596907, 0.1799786958766848, 0.22479419088367059, 0.1645587999259791, 0.12573864175483962, 0.12214583518481281, 0.15742934495569338, 0.9034735140492116, 0.9008326163976492, 0.19784096818003605, 0.36290731846858293, 0.16648923922964354, 0.16588831558254424, 0.7320569519994437, 0.2128814448260833, 0.8596784767240935, 0.8677802082904629, 0.2058912815200683, 0.7244233464689895, 0.6556138373945477, 0.10368251455435207, 0.6805860873877624, 0.2145694514364771, 0.1850485210218461, 0.18938938586337883, 0.1898260121018942, 0.21521609070239578, 0.21039307243002792, 0.20599456098400504, 0.18817417420024873, 0.19143134316839872, 0.10647401051121486, 0.0981032884413231, 0.08426533619745002, 0.10577776004769623, 0.08940832955379796, 0.07243783299562534, 0.10783356907972208, 0.08470664151293239, 0.090547069097764]}, "mutation_prompt": null}
{"id": "6ad9f0b0-9075-4ad1-b651-c5c979b2f3ed", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_GA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.num_particles = 35  # Adjusted for more focused search\n        self.w = 0.5  # Lower inertia to encourage faster convergence\n        self.c1 = 1.7  # Slightly increased cognitive component\n        self.c2 = 2.0  # Reduced social component for balance\n        self.mutation_rate = 0.3  # Higher mutation rate for increased diversity\n        self.crossover_rate = 0.7  # Increased crossover rate for exploration\n\n    def __call__(self, func):\n        # Initialize particles\n        positions = np.random.uniform(self.lb, self.ub, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-0.05, 0.05, (self.num_particles, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.num_particles, float('inf'))\n        global_best_position = np.zeros(self.dim)\n        global_best_score = float('inf')\n\n        eval_count = 0\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            scores = np.array([func(p) for p in positions])\n            eval_count += self.num_particles\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_scores[better_mask] = scores[better_mask]\n            personal_best_positions[better_mask] = positions[better_mask]\n\n            min_score_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[min_score_idx] < global_best_score:\n                global_best_score = personal_best_scores[min_score_idx]\n                global_best_position = personal_best_positions[min_score_idx]\n\n            # Adaptive cognitive and social components\n            adaptive_c1 = self.c1 * (1 - (eval_count / self.budget))\n            adaptive_c2 = self.c2 * (eval_count / self.budget)\n\n            # Update velocities and positions using hybrid PSO-GA update rule\n            r1 = np.random.rand(self.num_particles, self.dim)\n            r2 = np.random.rand(self.num_particles, self.dim)\n            velocities = (self.w * velocities +\n                          adaptive_c1 * r1 * (personal_best_positions - positions) +\n                          adaptive_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.lb, self.ub)\n\n            # Periodically shrink search space\n            if eval_count % (self.budget // 5) == 0:\n                mid_points = (positions + global_best_position) / 2\n                positions = np.clip(mid_points, self.lb, self.ub)\n\n            # Genetic Algorithm operations\n            for i in range(self.num_particles):\n                if np.random.rand() < self.crossover_rate:\n                    idxs = [idx for idx in range(self.num_particles) if idx != i]\n                    partner = positions[np.random.choice(idxs)]\n                    mask = np.random.rand(self.dim) < 0.5\n                    child = np.where(mask, positions[i], partner)\n\n                    if np.random.rand() < self.mutation_rate:\n                        mutation_idx = np.random.randint(self.dim)\n                        mutation_value = np.random.uniform(self.lb, self.ub)\n                        child[mutation_idx] = mutation_value\n\n                    child_score = func(child)\n                    eval_count += 1\n                    if child_score < scores[i]:\n                        positions[i] = child\n                        scores[i] = child_score\n\n                    if eval_count >= self.budget:\n                        break\n\n            # Update global best with the latest evaluations\n            current_best_idx = np.argmin(scores)\n            if scores[current_best_idx] < global_best_score:\n                global_best_score = scores[current_best_idx]\n                global_best_position = positions[current_best_idx]\n\n        return global_best_position", "name": "EnhancedHybridPSO_GA", "description": "Enhanced Hybrid PSO-GA with Adaptive Search Space Shrinking and Diversity Reinforcement for Faster Convergence.", "configspace": "", "generation": 62, "fitness": 0.2462690977850691, "feedback": "The algorithm EnhancedHybridPSO_GA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.18.", "error": "", "parent_id": "71679915-b7d2-4246-a9b8-9b30791aa78f", "metadata": {"aucs": [0.5703604206737551, 0.5730763422631956, 0.8609379388856105, 0.43754914773262754, 0.5266612968088624, 0.4169927321241452, 0.41802018823772735, 0.8516616976653089, 0.8582841285719958, 0.3942469138307886, 0.250574075828336, 0.4918857055486303, 0.23319014476996625, 0.155831359085156, 0.24354586136898293, 0.24517323637117439, 0.7357817283608792, 0.14627311621448025, 0.1717690244539123, 0.36093210241545415, 0.18624460501390927, 0.5838322244287488, 0.32153649847140575, 0.21872319681604635, 0.1350007455803709, 0.337386685575387, 0.12606201321149169, 0.12474325463951608, 0.14994770437803873, 0.13503911767831578, 0.14565545116018186, 0.14690627746162932, 0.11952328847024729, 0.12766080865774487, 0.1408796104489165, 0.1023174401242477, 0.21041102507839649, 0.30715787031917297, 0.1953122255414883, 0.23598280862768006, 0.23660430239730645, 0.23576890915458704, 0.3094518006510534, 0.23875857491160957, 0.37182911153224996, 0.13996368874946963, 0.19993192975074914, 0.18972733379376228, 0.2468589493466059, 0.14230437334279245, 0.21747042229098779, 0.15800586752890522, 0.16630688143012262, 0.15677663831706412, 0.36633276115763935, 0.21929899374132178, 0.21166771952600505, 0.36178858889253995, 0.8584725383111119, 0.87599959005048, 0.2109634571107295, 0.8470564105597911, 0.1849632566286452, 0.24933243603002986, 0.15259758407169888, 0.17448794405487955, 0.1041181809108288, 0.21333433802204338, 0.13167935499770844, 0.1238650759635177, 0.1833754300537186, 0.15385024862468066, 0.1745492250569156, 0.12504324328514482, 0.16357176743050927, 0.12169326920115231, 0.16160081120034597, 0.15769931501834367, 0.12572621250787774, 0.13094807560652622, 0.2080981463404723, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06073620488161047, 0.014747960847626973, 0.058543086468069494, 0.0022762877299099538, 0.06023630850822226, 0.1572742865623621, 0.08759230483408142, 0.16476756892795197, 0.13239425588190679, 0.05721164755764241, 0.06404797772666604, 0.19406440825776494, 0.16699253499974298, 0.13692470128728162, 0.0001959362428155531, 0.1285010105796951, 0.12403355878820166, 0.10634702779406269, 0.16536855354424185, 0.10417950481786431, 0.04293554959985191, 0.18123615295482964, 0.11601348335864514, 0.09044089340460415, 0.038012107938523165, 0.04321202319398376, 0.06509693865956656, 0.11066639372117881, 0.10197208332691698, 0.07177194006961896, 0.10908246153809686, 0.07743299860800545, 0.3830712817075034, 0.42202516768169607, 0.411330258656057, 0.48356138466329146, 0.32063031604644077, 0.5214809306121531, 0.40164020284227686, 0.3931664665664726, 0.41384385916168565, 0.15137954816954302, 0.14928539994047896, 0.10870245729409711, 0.14645547064241693, 0.12578948932165113, 0.10216888735299912, 0.09149240711795303, 0.1382328041330767, 0.09340533942304774, 0.13662520783487175, 0.18643238000574125, 0.23391714016314114, 0.2551976490049357, 0.24924800558547444, 0.1626212838413822, 0.19002869133535694, 0.243922363855272, 0.306162823150423, 0.2905939834543123, 0.2971433318288318, 0.17730715619664084, 0.4507063105376705, 0.2293692047891307, 0.23142228396820919, 0.30742485679251963, 0.33318831363787027, 0.22794863373945695, 0.2488080993286398, 0.23140473770893588, 0.2300288438282313, 0.30556644762640195, 0.20338914434155964, 0.2538793676689397, 0.41643811121384566, 0.302274860407885, 0.2517142461073729, 0.21145261260078163, 0.20115644836882762, 0.20347921770255528, 0.21967675081875981, 0.2128210224190571, 0.22780493394809676, 0.1832185031339505, 0.20254330308916668, 0.20112240968233075, 0.1956590861145312, 0.2162640133764704, 0.19531611942265914, 0.20686267499746402, 0.6788729823974258, 0.20592041174687625, 0.24673521363076378, 0.18447255779726124, 0.7336422319415861, 0.18235415475894168, 0.45554764586855623, 0.19700862565976618, 0.8319528888405621, 0.5562674416320299, 0.588216690577376, 0.705944352453836, 0.5220575969677987, 0.3843673130663723, 0.4644825724183954, 0.3076991997847107, 0.39772541746866563, 0.6981274460659994, 0.2046272373536212, 0.5175304141978676, 0.22068268774481303, 0.489427300852991, 0.29677842901794316, 0.19436420496857199, 0.18372949754316814, 0.20752226588013722, 0.18310235077076054, 0.19732020948182305, 0.1880960777444145, 0.1916160698011936, 0.18684793021068946, 0.17733449340670027, 0.10483323184269577, 0.10096992186469578, 0.12777407279044584, 0.08686870379583611, 0.09734994773449201, 0.13109978984029602, 0.08126204851174224, 0.0893264651290332, 0.07681385999613954]}, "mutation_prompt": null}
{"id": "2c9424bf-2aff-420c-94da-4c5b85f4a3c4", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_GA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.num_particles = 40\n        self.w = 0.7  # Increased inertia to encourage exploration\n        self.c1 = 1.7  # Slightly increased cognitive component for better personal best attraction\n        self.c2 = 2.0  # Balanced social component\n        self.mutation_rate = 0.2  # Lowered mutation rate for more stable convergence\n        self.crossover_rate = 0.65  # Increased crossover rate for enhanced exploitation\n        self.velocity_clamp = 0.1  # Dynamic velocity clamping\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lb, self.ub, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.num_particles, float('inf'))\n        global_best_position = np.zeros(self.dim)\n        global_best_score = float('inf')\n\n        eval_count = 0\n\n        while eval_count < self.budget:\n            scores = np.array([func(p) for p in positions])\n            eval_count += self.num_particles\n\n            better_mask = scores < personal_best_scores\n            personal_best_scores[better_mask] = scores[better_mask]\n            personal_best_positions[better_mask] = positions[better_mask]\n\n            min_score_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[min_score_idx] < global_best_score:\n                global_best_score = personal_best_scores[min_score_idx]\n                global_best_position = personal_best_positions[min_score_idx]\n\n            dynamic_c1 = self.c1 * (1 - eval_count / self.budget)\n            dynamic_c2 = self.c2 * (eval_count / self.budget)\n\n            r1 = np.random.rand(self.num_particles, self.dim)\n            r2 = np.random.rand(self.num_particles, self.dim)\n            velocities = (self.w * velocities +\n                          dynamic_c1 * r1 * (personal_best_positions - positions) +\n                          dynamic_c2 * r2 * (global_best_position - positions))\n            velocities = np.clip(velocities, -self.velocity_clamp, self.velocity_clamp)\n            positions += velocities\n            positions = np.clip(positions, self.lb, self.ub)\n\n            for i in range(self.num_particles):\n                if np.random.rand() < self.crossover_rate:\n                    idxs = [idx for idx in range(self.num_particles) if idx != i]\n                    partner = positions[np.random.choice(idxs)]\n                    mask = np.random.rand(self.dim) < 0.5\n                    child = np.where(mask, positions[i], partner)\n\n                    if np.random.rand() < self.mutation_rate:\n                        mutation_idx = np.random.randint(self.dim)\n                        mutation_value = np.random.uniform(self.lb, self.ub)\n                        child[mutation_idx] = mutation_value\n\n                    child_score = func(child)\n                    eval_count += 1\n                    if child_score < scores[i]:\n                        positions[i] = child\n                        scores[i] = child_score\n\n                    if eval_count >= self.budget:\n                        break\n\n            current_best_idx = np.argmin(scores)\n            if scores[current_best_idx] < global_best_score:\n                global_best_score = scores[current_best_idx]\n                global_best_position = positions[current_best_idx]\n\n        return global_best_position", "name": "EnhancedHybridPSO_GA", "description": "Enhanced Hybrid PSO-GA with Adaptive Learning Rate and Dynamic Velocity Clamping for Rapid Convergence.", "configspace": "", "generation": 63, "fitness": 0.28411258183139115, "feedback": "The algorithm EnhancedHybridPSO_GA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.22.", "error": "", "parent_id": "71679915-b7d2-4246-a9b8-9b30791aa78f", "metadata": {"aucs": [0.8447999161153252, 0.7758386227155092, 0.8125397957489465, 0.8080585119002989, 0.7606375576791774, 0.8272624382927759, 0.8319664403094857, 0.8326009778330224, 0.8017946020899879, 0.7133097189464332, 0.6717758466648854, 0.5955453744368184, 0.5453523811073118, 0.6241438749447068, 0.6843658824890784, 0.6258341171168804, 0.571663109360838, 0.6826352932336553, 0.1335317505112995, 0.29755564848919225, 0.11490428835773514, 0.19383427162635614, 0.21049073423636278, 0.45333183743980576, 0.1470595739429662, 0.2564920678610719, 0.17701010725919764, 0.1400221376557087, 0.11613592590428545, 0.1256667498718511, 0.14578967326993075, 0.12753267489491715, 0.13994286632351616, 0.10924802052845939, 0.12272248577744393, 0.11202519109225029, 0.7030860268122763, 0.7088140388234707, 0.6855120562901181, 0.717161460346389, 0.6526255523854029, 0.643178745597468, 0.5621015674182595, 0.673883828769074, 0.7191174517304036, 0.2397098356703834, 0.24905576669161134, 0.22332515879159387, 0.20063638436460307, 0.21284782921456358, 0.21813163468305086, 0.39187980699973246, 0.23593341389377764, 0.29915532873553785, 0.35271286794692114, 0.3317919816763596, 0.20591447540900154, 0.27075962666119835, 0.2106801486536235, 0.722834429276739, 0.16171626571968278, 0.22005161997961153, 0.2226946541476763, 0.3184109139432414, 0.17926079849537657, 0.20072964392538362, 0.1384901873936124, 0.21180147972350583, 0.21087260999649704, 0.19235820634275447, 0.16544050317501202, 0.1447987919831104, 0.20828700362914387, 0.14678500858776788, 0.1899290327034049, 0.11929475980603876, 0.2047226386468144, 0.12767497550863605, 0.13809122891154801, 0.12274240910119627, 0.12869757170129126, 0.046251645045271794, 9.999999999998899e-05, 0.0665138800444951, 9.999999999998899e-05, 0.03194090639429614, 9.999999999998899e-05, 0.03864615583042763, 9.999999999998899e-05, 0.20885897624225258, 0.19943951626575618, 0.13305756750332132, 0.12037826480092206, 0.11091821485552733, 0.0988739142809898, 0.11516375600190953, 0.16612452993686855, 0.18073375453391693, 0.11928104906673476, 0.12977750164056812, 0.12678783168320895, 0.12086497085545467, 0.09373554123433137, 0.10257686143989253, 0.2970306526224261, 0.18653900700317572, 0.15838056787653298, 0.1566122352178163, 0.12059629847489373, 0.19054428795967115, 0.1851601615704963, 0.1270484533633286, 0.3129215161161868, 0.06408311206955108, 0.18353624822645054, 0.12112063899921321, 0.14328981949039477, 0.5248287564435632, 0.5170306134282061, 0.5078927663061045, 0.5089301645049971, 0.46081806560299354, 0.5120350387472518, 0.5661341986249653, 0.5358097380072615, 0.5327155369601073, 0.12300819774904104, 0.1500362783571373, 0.10401569170058156, 0.13211263862937517, 0.0954957119264116, 0.1091540878148084, 0.11037082611670834, 0.12316769512580106, 0.13048257775276884, 0.22638406760553376, 0.30507766981737905, 0.16591876468427147, 0.19953952472222858, 0.21410843569434224, 0.2738403026011519, 0.16847356616151776, 0.2037611394433052, 0.1936541503814767, 0.2144123143657264, 0.22155599517564895, 0.21033274237222932, 0.4221978116801264, 0.21809454083328306, 0.4141040887904194, 0.21427708464694806, 0.3398797514049243, 0.21794738139185066, 0.21132425818446432, 0.24917497344050576, 0.1460748087630216, 0.2760534757271904, 0.21476352254504583, 0.24329099906407925, 0.15168698084669707, 0.23995197800633683, 0.26422322200641635, 0.20676204533532805, 0.2077263708713195, 0.20481202316619262, 0.20524513160550595, 0.21485818357276298, 0.221997067130963, 0.20390545770192792, 0.20740917982548102, 0.21315316598998468, 0.18548580340175158, 0.20341911402317525, 0.20848637240819512, 0.21075479153368637, 0.17240721990726215, 0.18410385361037973, 0.20633443459101952, 0.44538681999591423, 0.22538087603356816, 0.1782633205769404, 0.7508151326353516, 0.17779240622141168, 0.7909874295796328, 0.19399702240753836, 0.81632904486117, 0.841036098175838, 0.7421638239168228, 0.33440069291301655, 0.48046734965545845, 0.2078929886556793, 0.1966144264133377, 0.6379419233114345, 0.2004567518086262, 0.3138225001670548, 0.19623052761746718, 0.565716089366996, 0.33220901888566046, 0.18565922419954928, 0.18270997479941087, 0.18571231242324937, 0.1925751369408535, 0.18191202414277008, 0.19633831719539208, 0.195795981022459, 0.20842789070550427, 0.18611081550664976, 0.09557715228228736, 0.08805908807051621, 0.09043701312148733, 0.0753567362195523, 0.07963943309760102, 0.12225428006046168, 0.10358452576592914, 0.09019000962235246, 0.08476314543976837]}, "mutation_prompt": null}
{"id": "cc13ddd0-114b-41a1-8eab-6e8d4e181c87", "solution": "import numpy as np\n\nclass AdaptiveGeneticVarianceHybrid:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.num_particles = 35  # Slightly reduced number of particles\n        self.w = 0.5  # Lower inertia for quicker convergence\n        self.c1 = 1.4  # Enhanced adaptive learning rates\n        self.c2 = 2.4  # More emphasis on social attraction\n        self.mutation_rate = 0.3  # Higher mutation rate for increased diversity\n        self.crossover_rate = 0.65  # Slightly increased crossover rate\n\n    def __call__(self, func):\n        # Initialize particles\n        positions = np.random.uniform(self.lb, self.ub, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-0.05, 0.05, (self.num_particles, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.num_particles, float('inf'))\n        global_best_position = np.zeros(self.dim)\n        global_best_score = float('inf')\n\n        eval_count = 0\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            scores = np.array([func(p) for p in positions])\n            eval_count += self.num_particles\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_scores[better_mask] = scores[better_mask]\n            personal_best_positions[better_mask] = positions[better_mask]\n\n            min_score_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[min_score_idx] < global_best_score:\n                global_best_score = personal_best_scores[min_score_idx]\n                global_best_position = personal_best_positions[min_score_idx]\n\n            # Adaptive cognitive and social components\n            adaptive_c1 = self.c1 * np.exp(-eval_count / (0.3 * self.budget))\n            adaptive_c2 = self.c2 * (1 - np.exp(-eval_count / (0.3 * self.budget)))\n\n            # Update velocities and positions using hybrid PSO-GA update rule\n            r1 = np.random.rand(self.num_particles, self.dim)\n            r2 = np.random.rand(self.num_particles, self.dim)\n            velocities = (self.w * velocities +\n                          adaptive_c1 * r1 * (personal_best_positions - positions) +\n                          adaptive_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.lb, self.ub)\n\n            # Genetic Algorithm operations\n            for i in range(self.num_particles):\n                if np.random.rand() < self.crossover_rate:\n                    idxs = [idx for idx in range(self.num_particles) if idx != i]\n                    partner = positions[np.random.choice(idxs)]\n                    mask = np.random.rand(self.dim) < 0.5\n                    child = np.where(mask, positions[i], partner)\n\n                    if np.random.rand() < self.mutation_rate:\n                        mutation_idx = np.random.randint(self.dim)\n                        mutation_value = np.random.uniform(self.lb, self.ub)\n                        child[mutation_idx] = mutation_value\n\n                    child_score = func(child)\n                    eval_count += 1\n                    if child_score < scores[i]:\n                        positions[i] = child\n                        scores[i] = child_score\n\n                    if eval_count >= self.budget:\n                        break\n\n            # Update global best with the latest evaluations\n            current_best_idx = np.argmin(scores)\n            if scores[current_best_idx] < global_best_score:\n                global_best_score = scores[current_best_idx]\n                global_best_position = positions[current_best_idx]\n\n        return global_best_position", "name": "AdaptiveGeneticVarianceHybrid", "description": "Adaptive Genetic Variance Hybrid Optimization (AGVHO) with Enhanced Diversity and Dynamic Learning Rates for Rapid Convergence.", "configspace": "", "generation": 64, "fitness": 0.2941916566886448, "feedback": "The algorithm AdaptiveGeneticVarianceHybrid got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.25.", "error": "", "parent_id": "71679915-b7d2-4246-a9b8-9b30791aa78f", "metadata": {"aucs": [0.8904558212762328, 0.8854566684880293, 0.8864997187417514, 0.6102521323071923, 0.8645089575249534, 0.8880504101979325, 0.8121437681273481, 0.9031664206235386, 0.890834033897096, 0.7897543230244165, 0.6426949127535744, 0.7486720374525975, 0.7198410181328435, 0.7483606000949121, 0.789366249756599, 0.751167412301462, 0.8130292616437986, 0.5697070655157694, 0.101445548702775, 0.3162973598560307, 0.17935610484745557, 0.6104639931681939, 0.28313119016297683, 0.246418462162304, 0.21586363773735517, 0.17582594283208075, 0.4182098649267103, 0.14584897003143726, 0.10076855897289994, 0.13405352987438013, 0.1483304201490353, 0.07672352408592009, 0.16009671253620184, 0.1333439215122293, 0.13079790253894685, 0.14102537641444124, 0.8994811137472427, 0.9285148334526461, 0.7620026849617169, 0.9170571358656151, 0.9368476245433228, 0.8595466818092516, 0.9207757593680181, 0.6948783148941085, 0.8910753417083763, 0.20224844297069755, 0.1911158650420478, 0.14297352956185838, 0.24032564702358683, 0.21417324894372558, 0.25345495141010255, 0.3389739613758608, 0.25909688330705316, 0.20806810147077393, 0.224235045050992, 0.2240063229595568, 0.15877772779537824, 0.27834556369213137, 0.3504438617685859, 0.3263344761123109, 0.17499013345491388, 0.3029373114777705, 0.23231800490273125, 0.12397300100250175, 0.1327665291675405, 0.14198744959204157, 0.19952753483915442, 0.16448759446227867, 0.15512804429646454, 0.15421031880182778, 0.20767888147819336, 0.1668713456806168, 0.15425360263751486, 0.1279246196085202, 0.16078985225167286, 0.27076088966435086, 0.13741936936504662, 0.1796702182405574, 0.20657960057998737, 0.13184518483254337, 0.11314338287794312, 0.08857101111259857, 9.999999999998899e-05, 0.015334533471437872, 0.06502157084617033, 0.06307866665034578, 0.008524873819951595, 0.044892169097421886, 9.999999999998899e-05, 9.999999999998899e-05, 0.09628804781376132, 0.072527380801515, 0.17264708002353113, 0.07419378494097473, 0.0547261242291428, 0.02556224041483457, 0.14550158304680338, 0.08209565491804827, 0.055754317079335536, 0.29571178950740185, 0.3676055994186078, 0.16600619155710306, 0.19326025701899485, 0.16307384969624383, 0.11485360658915778, 0.33488759622909514, 0.19910413012889305, 0.11612480550605109, 0.1273583265151561, 0.3479007217576656, 0.1684674514333383, 0.10937874427706773, 0.17101325380568055, 0.08905257624035312, 0.09083671415274785, 0.19279289528185217, 0.08640009692005246, 0.5064691121752658, 0.4490079282887134, 0.5061552569938468, 0.5358191620573882, 0.36192808977573043, 0.44970503173587717, 0.47056833441141055, 0.5226646920072255, 0.5363110184964193, 0.1215131141609962, 0.13918881590826404, 0.09390947702129615, 0.08289437208912931, 0.09122307953964104, 0.1553506130019674, 0.0911526790051761, 0.10904753287285018, 0.08294808554987099, 0.14847498018070915, 0.23212608227481502, 0.2125494568408598, 0.16678550747933618, 0.23407144598635332, 0.19708714790523463, 0.1903626576049956, 0.22546764214962867, 0.15974111123899837, 0.22980344902089123, 0.17539785650937378, 0.1821335307914277, 0.2639682192401974, 0.29412152761059984, 0.2859428910080656, 0.2646567475959868, 0.288490114781194, 0.432461507377083, 0.27206842479475934, 0.24022261408353263, 0.1718506608483218, 0.23198416895179375, 0.20919552150043874, 0.26414894062634686, 0.31856131054490666, 0.37060334280137697, 0.21449698955256813, 0.2071496744816964, 0.21499354954882333, 0.23676006012853168, 0.22537841345691267, 0.2364596725003848, 0.22691906135667317, 0.20018965193448268, 0.24831700992374828, 0.2535268005469724, 0.17898090651399923, 0.1831387522375718, 0.2368135688497145, 0.18688738397125537, 0.22601090716538708, 0.19650829790006097, 0.15456931593436307, 0.18322833513401937, 0.16753154296250683, 0.15855860005316535, 0.18369319379167848, 0.1851317785886314, 0.8824195086175788, 0.19876844912205704, 0.9110110980036692, 0.8723606782069412, 0.16755608155009993, 0.9006868114221434, 0.8498942399108842, 0.15439354960274343, 0.3427689885634475, 0.12728036375775265, 0.16630578091065107, 0.9038269440172433, 0.343454689392353, 0.33427919778088366, 0.3392239367421047, 0.18678477758352918, 0.1840129669481837, 0.17715605167329018, 0.1878094293678323, 0.20729415411310115, 0.20009239077483632, 0.19041297026882442, 0.21620182254253106, 0.18834476595876248, 0.08156427190516968, 0.09441547207162948, 0.10696150994644904, 0.09771515299417621, 0.09577089349341039, 0.08559188043405297, 0.11333611860846671, 0.10235275838478197, 0.07914795398435492]}, "mutation_prompt": null}
{"id": "d28f687a-7152-403c-b1ca-47f45835688d", "solution": "import numpy as np\n\nclass SwarmInspiredMemeticAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.num_particles = 35  # Adjusted for efficient search\n        self.w = 0.5  # Reduced inertia to prioritize exploitation\n        self.c1 = 1.8  # Enhanced cognitive component\n        self.c2 = 2.0  # Moderate social component\n        self.mutation_rate = 0.28  # Fine-tuned mutation rate for diversification\n        self.crossover_rate = 0.7  # Increased crossover rate to boost exploitation\n\n    def __call__(self, func):\n        # Initialize particles\n        positions = np.random.uniform(self.lb, self.ub, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.num_particles, float('inf'))\n        global_best_position = np.zeros(self.dim)\n        global_best_score = float('inf')\n\n        eval_count = 0\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            scores = np.array([func(p) for p in positions])\n            eval_count += self.num_particles\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_scores[better_mask] = scores[better_mask]\n            personal_best_positions[better_mask] = positions[better_mask]\n\n            min_score_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[min_score_idx] < global_best_score:\n                global_best_score = personal_best_scores[min_score_idx]\n                global_best_position = personal_best_positions[min_score_idx]\n\n            # Dynamic cognitive and social components\n            dynamic_c1 = self.c1 * np.exp(-eval_count / (0.3 * self.budget))\n            dynamic_c2 = self.c2 * (1 - np.exp(-eval_count / (0.3 * self.budget)))\n\n            # Update velocities and positions using enhanced PSO-GA update rule\n            r1 = np.random.rand(self.num_particles, self.dim)\n            r2 = np.random.rand(self.num_particles, self.dim)\n            velocities = (self.w * velocities +\n                          dynamic_c1 * r1 * (personal_best_positions - positions) +\n                          dynamic_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.lb, self.ub)\n\n            # Enhanced Genetic Algorithm operations\n            for i in range(self.num_particles):\n                if np.random.rand() < self.crossover_rate:\n                    idxs = [idx for idx in range(self.num_particles) if idx != i]\n                    partner = positions[np.random.choice(idxs)]\n                    mask = np.random.rand(self.dim) < 0.5\n                    child = np.where(mask, positions[i], partner)\n\n                    # Adaptive mutation for intensified search\n                    if np.random.rand() < self.mutation_rate:\n                        mutation_idx = np.random.randint(self.dim)\n                        perturbation = np.random.normal(0, 0.1)\n                        child[mutation_idx] = np.clip(child[mutation_idx] + perturbation, self.lb, self.ub)\n\n                    child_score = func(child)\n                    eval_count += 1\n                    if child_score < scores[i]:\n                        positions[i] = child\n                        scores[i] = child_score\n\n                    if eval_count >= self.budget:\n                        break\n\n            # Update global best with the latest evaluations\n            current_best_idx = np.argmin(scores)\n            if scores[current_best_idx] < global_best_score:\n                global_best_score = scores[current_best_idx]\n                global_best_position = positions[current_best_idx]\n\n        return global_best_position", "name": "SwarmInspiredMemeticAlgorithm", "description": "A novel Swarm-Inspired Memetic Algorithm combining Dynamic Particle Evolution and Adaptive Genetic Operators for Enhanced Global Search.", "configspace": "", "generation": 65, "fitness": 0.28088360251832906, "feedback": "The algorithm SwarmInspiredMemeticAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.23.", "error": "", "parent_id": "71679915-b7d2-4246-a9b8-9b30791aa78f", "metadata": {"aucs": [0.8943045652907925, 0.8842368833470027, 0.8948939903469532, 0.684131247880319, 0.883288079226582, 0.6803911796500257, 0.8613411522803208, 0.8931109704443991, 0.8877726554799946, 0.25563358156047, 0.3789512996125124, 0.7678097609169731, 0.24156510643186524, 0.28886191659684324, 0.3715332767919116, 0.3284577222537318, 0.33674397967631753, 0.10057320052180763, 0.15442525738276547, 0.11577337226280837, 0.16934671837213078, 0.15567466717841894, 0.10949100198829709, 0.1402863930885231, 0.13385511233341763, 0.11334700399277864, 0.14957403771558042, 0.10851130660087527, 0.09365856840351172, 0.0969951932619737, 0.10008626237890528, 0.10370035247634257, 0.10456538061434617, 0.09235264922752362, 0.12844019363451065, 0.12501962745716932, 0.7327063467777276, 0.699008072234593, 0.7231841367432177, 0.7450736056331982, 0.5922704360774016, 0.6644235509754164, 0.7162218158520044, 0.6816856716928441, 0.8574142653305198, 0.654663788696956, 0.34187517193296224, 0.3076128523386209, 0.2609085431445345, 0.21382138652524696, 0.3734541376212678, 0.4443522005408772, 0.40312113395910476, 0.3723259798971248, 0.298017799485649, 0.22619134459441226, 0.1379969613081683, 0.2776060634318849, 0.19381731260837176, 0.19305519027803297, 0.2318011708816814, 0.1761371585931707, 0.3708219257847327, 0.19146611252317147, 0.13014868562771265, 0.14605399145494735, 0.22998958012375192, 0.1282275213945674, 0.15650153040423087, 0.18912055440876985, 0.12556953312393293, 0.16107504887850888, 0.18470455538373476, 0.14958988358832392, 0.17581527493294102, 0.15240727861171577, 0.1704864709052254, 0.1769375203101634, 0.13264990956381228, 0.14088086691568047, 0.15404356209571246, 9.999999999998899e-05, 0.0608149397141875, 0.01450036448053238, 9.999999999998899e-05, 0.13399242214936458, 0.0031779991102742766, 9.999999999998899e-05, 0.010790555234774013, 9.999999999998899e-05, 0.20888566103873396, 0.10687662911962492, 0.14436111758620407, 0.13193960980835695, 0.06728415171281044, 0.1643726014593727, 0.06736224712321981, 0.11462829225459514, 0.13053578600031668, 0.15431960927677468, 0.1001174092831314, 0.3588483208111205, 0.1196003080430712, 0.29342616552528566, 0.11588056618349907, 0.26317358040423655, 0.20526657861739817, 0.12463301211585853, 0.12437317190447172, 0.35185040318081995, 0.207100763442983, 0.19983844306641918, 0.12329732217074874, 0.2011394126983328, 0.08096108367417143, 0.21716878438123854, 0.10422591643718171, 0.4800415140633931, 0.5071062078620128, 0.5546939337423957, 0.4935832740913454, 0.6016261924427553, 0.4827460237855449, 0.5726263962949827, 0.5781358644413139, 0.5319418221469423, 0.09269294103573666, 0.12093253051226327, 0.07737202686955258, 0.18320380647932266, 0.08288909652765375, 0.1330313444486514, 0.15361694499582568, 0.10437680254270876, 0.09685471529141809, 0.21625328900987084, 0.3138887902738947, 0.2500400780404053, 0.14038123227743782, 0.12794516857182514, 0.1506138458791254, 0.15009015741254605, 0.16067805802557344, 0.177311972237565, 0.29312387013250396, 0.18359725026305418, 0.20638548032301218, 0.32528583009089385, 0.36494803265425924, 0.32327297297814195, 0.266512358021346, 0.5015234036219747, 0.296721667306436, 0.2481905563893011, 0.22254632919749784, 0.17214722581268638, 0.20631757082298086, 0.22907938097320946, 0.2293188537825156, 0.17347319977882703, 0.32025622957414834, 0.1732653916981055, 0.20668959651182117, 0.21730637766324878, 0.2472636037402267, 0.23095625717294277, 0.2208670444249301, 0.27402288154695664, 0.20214276185104496, 0.19733371133594257, 0.2052368576580348, 0.1999318690940196, 0.17828048663805907, 0.18152544215730504, 0.18649437036483163, 0.17740904995049445, 0.1906287178689553, 0.8091781377419056, 0.21354486666832662, 0.17917098899725947, 0.7949254363930544, 0.774650431615495, 0.8668257249567594, 0.738715106268071, 0.19618270074664934, 0.19543841232769965, 0.7683387467275319, 0.16067774482728236, 0.8263927473671862, 0.6770338935131148, 0.6024840073678834, 0.7011166837013234, 0.5319474471633998, 0.20862131186392618, 0.21065822896139985, 0.5071220109928687, 0.16656301940815865, 0.16009447947276567, 0.20324062701654688, 0.19877469492561273, 0.22007630078996332, 0.20240056588282773, 0.20867180459539725, 0.17437290214289658, 0.2163904673965097, 0.1910784598240508, 0.19304234359833594, 0.0922775236116975, 0.10459642927811341, 0.10090143873686264, 0.08965713675493026, 0.09605066489932401, 0.08881146680987162, 0.10087849720655762, 0.10113757055277861, 0.09300566427853862]}, "mutation_prompt": null}
{"id": "5dedfb09-0234-47c7-af3d-4d9e865df025", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_GA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.num_particles = 30  # Optimized number of particles for efficiency\n        self.w = 0.5  # Further reduced inertia for faster convergence\n        self.c1 = 1.6  # Slightly increased adaptive cognitive component\n        self.c2 = 2.4  # Increased social component for enhanced guidance\n        self.mutation_rate = 0.3  # Further increased mutation rate for diversity\n        self.crossover_rate = 0.65  # Fine-tuned crossover for better exploration\n\n    def __call__(self, func):\n        # Initialize particles\n        positions = np.random.uniform(self.lb, self.ub, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.num_particles, float('inf'))\n        global_best_position = np.zeros(self.dim)\n        global_best_score = float('inf')\n\n        eval_count = 0\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            scores = np.array([func(p) for p in positions])\n            eval_count += self.num_particles\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_scores[better_mask] = scores[better_mask]\n            personal_best_positions[better_mask] = positions[better_mask]\n\n            min_score_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[min_score_idx] < global_best_score:\n                global_best_score = personal_best_scores[min_score_idx]\n                global_best_position = personal_best_positions[min_score_idx]\n\n            # Adaptive cognitive and social components\n            adaptive_c1 = self.c1 * np.exp(-eval_count / (0.3 * self.budget))\n            adaptive_c2 = self.c2 * (1 - np.exp(-eval_count / (0.3 * self.budget)))\n\n            # Update velocities and positions using hybrid PSO-GA update rule\n            r1 = np.random.rand(self.num_particles, self.dim)\n            r2 = np.random.rand(self.num_particles, self.dim)\n            velocities = (self.w * velocities +\n                          adaptive_c1 * r1 * (personal_best_positions - positions) +\n                          adaptive_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.lb, self.ub)\n\n            # Genetic Algorithm operations\n            for i in range(self.num_particles):\n                if np.random.rand() < self.crossover_rate:\n                    idxs = [idx for idx in range(self.num_particles) if idx != i]\n                    partner = positions[np.random.choice(idxs)]\n                    mask = np.random.rand(self.dim) < 0.5\n                    child = np.where(mask, positions[i], partner)\n\n                    if np.random.rand() < self.mutation_rate:\n                        mutation_idx = np.random.randint(self.dim)\n                        mutation_value = positions[i][mutation_idx] + np.random.uniform(-0.5, 0.5)\n                        child[mutation_idx] = np.clip(mutation_value, self.lb, self.ub)\n\n                    child_score = func(child)\n                    eval_count += 1\n                    if child_score < scores[i]:\n                        positions[i] = child\n                        scores[i] = child_score\n\n                    if eval_count >= self.budget:\n                        break\n\n            # Update global best with the latest evaluations\n            current_best_idx = np.argmin(scores)\n            if scores[current_best_idx] < global_best_score:\n                global_best_score = scores[current_best_idx]\n                global_best_position = positions[current_best_idx]\n\n        return global_best_position", "name": "EnhancedHybridPSO_GA", "description": "Enhanced Adaptive Hybrid PSO-GA with Dynamic Local Search and Intelligent Mutation for Faster Convergence.", "configspace": "", "generation": 66, "fitness": 0.27737748249959476, "feedback": "The algorithm EnhancedHybridPSO_GA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.23.", "error": "", "parent_id": "71679915-b7d2-4246-a9b8-9b30791aa78f", "metadata": {"aucs": [0.5819813210062581, 0.8975253897173516, 0.8597616410479527, 0.9054536908264814, 0.9130913549814559, 0.894467559667389, 0.8903555913316084, 0.906139644116457, 0.7758198725613228, 0.7224411076229715, 0.4553333160104407, 0.487113462402867, 0.712441409957294, 0.35513077941444715, 0.5289538303294705, 0.24676783148523562, 0.1055389678882106, 0.2925838861120831, 0.09340272452340992, 0.15334386044662873, 0.15265669730624198, 0.16099973658071154, 0.13867520806412104, 0.15711898811043845, 0.13100239455329388, 0.11949648523573886, 0.17286375640669882, 0.11587954265662193, 0.15157133439276949, 0.11263027549567795, 0.08948608679153058, 0.0779354100891736, 0.10811402177424023, 0.11633180393173026, 0.11027926111298403, 0.11062815739734178, 0.8272597086777288, 0.8148608381264755, 0.7277091820227313, 0.8568336923066208, 0.8089928872342893, 0.7275828956737274, 0.8535357458615046, 0.8014006125315885, 0.8502175258654904, 0.3965827800005024, 0.34998001031872594, 0.5532459018762865, 0.40304840392636765, 0.40307254693314176, 0.22758996913209628, 0.3691718243867115, 0.3020900532877243, 0.5406487409034565, 0.8917654787643573, 0.2059752996099331, 0.1392933496763793, 0.27921179010359476, 0.19165911649629308, 0.2770340516610218, 0.12529204693698426, 0.23067029043336074, 0.23517182100990586, 0.40093913154750116, 0.17081559135405588, 0.14323051392576003, 0.35032928876445735, 0.14202543653796107, 0.14583230702530747, 0.4073633604222021, 0.13193545404390838, 0.1572731398551468, 0.1292191310363967, 0.1273726475956246, 0.27245365461020576, 0.14125457799094288, 0.14609036815182586, 0.13447780902973683, 0.16971038536768868, 0.17899714580144388, 0.1889171329544327, 0.09358407893736498, 0.0012859710999740814, 0.0697396799204888, 0.019644961317959897, 0.09521998395970332, 0.05091023713931808, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1771730647240336, 0.07603059936702217, 0.16815116157856314, 0.07583720629177026, 0.046001461647212416, 0.05977848947169495, 0.10690119381181118, 0.10491538503221276, 0.08500115868448443, 0.20370065187858788, 0.34354274908853755, 0.20190275579242345, 0.0826270869363116, 0.13405461882599834, 0.10406627748599162, 0.2521521434981603, 0.1946194790710133, 0.07500068316248565, 0.09154949868188611, 0.18547595658420335, 0.10784894514435361, 0.0873822316918007, 0.10196970949864792, 0.15638664184799522, 0.27229051644820224, 0.18663187503644818, 0.0836289684372703, 0.43651646264358046, 0.5169833449048753, 0.4405616732828501, 0.45586328278712607, 0.4629968291131037, 0.338770331316641, 0.5535232038846379, 0.4329868081535625, 0.6276967846195549, 0.08870885720403421, 0.1421761379762596, 0.10999961230485511, 0.11483859181888167, 0.1152363253805665, 0.09369100479199766, 0.1417753745859529, 0.10385942558838435, 0.15750456371209798, 0.22884531984429124, 0.23578905369550118, 0.18841325598360614, 0.21597960346376133, 0.25052435807488227, 0.1673111779314178, 0.19948003834636296, 0.26735136042372576, 0.3031035746580196, 0.22064428686252013, 0.33944530247209825, 0.21490826895266157, 0.36789019181259197, 0.36448686028629074, 0.30666504567383746, 0.2186676473540572, 0.5391229841098042, 0.2666683858278547, 0.14061453478596064, 0.18905382906203116, 0.13559883832775943, 0.3186613101726058, 0.17803969481830595, 0.3429659238641145, 0.18212973338329352, 0.22041691858647205, 0.18433251286299823, 0.21973811283080258, 0.28554167588948887, 0.21495364215641666, 0.2137268671070779, 0.19555856399713334, 0.19963184314152194, 0.253212661546139, 0.22451369199925464, 0.199831712370111, 0.19119600593795627, 0.18006098199804277, 0.18373646897475004, 0.1813745665964377, 0.1950587825264335, 0.20440391312702844, 0.19368998843778262, 0.22240001570340595, 0.2084249965101621, 0.19769810189912862, 0.8744555478048499, 0.18405601305944308, 0.1878189197340191, 0.19979334071726174, 0.8959886623271103, 0.17640392526818838, 0.16911816045430184, 0.15753091266036479, 0.8314912309806965, 0.5390980559521563, 0.4398889235738187, 0.43165780142937693, 0.49801094406048896, 0.5054816094007606, 0.16859232015241798, 0.10323180788038067, 0.10301619840613185, 0.18947492199817018, 0.19486343753930147, 0.18277993990857244, 0.18759916736402926, 0.18122290368920224, 0.19978534408900728, 0.17702379053068562, 0.23464646569432812, 0.18964437133311995, 0.0795097501878379, 0.10281036702282176, 0.10408000030289, 0.08390662624509682, 0.08020471714585586, 0.09206248363184155, 0.08219954025982656, 0.07990657551987224, 0.09387476191921029]}, "mutation_prompt": null}
{"id": "5b391806-40cc-4936-9e45-ad0de7c5dcf0", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_GA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.num_particles = 40\n        self.w = 0.5  # Increased inertia to enhance exploration\n        self.c1 = 1.7  # Increased cognitive component for personal best attraction\n        self.c2 = 2.0  # Adjusted social component for balance\n        self.mutation_rate = 0.3  # Further increased mutation for diversity\n        self.crossover_rate = 0.7  # Enhanced crossover rate for exploration\n        self.memory_decay = 0.9  # Decay factor for adaptive memory\n\n    def __call__(self, func):\n        # Initialize particles\n        positions = np.random.uniform(self.lb, self.ub, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.num_particles, float('inf'))\n        global_best_position = np.zeros(self.dim)\n        global_best_score = float('inf')\n        adaptive_memory = np.zeros(self.dim)  # Added adaptive memory\n\n        eval_count = 0\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            scores = np.array([func(p) for p in positions])\n            eval_count += self.num_particles\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_scores[better_mask] = scores[better_mask]\n            personal_best_positions[better_mask] = positions[better_mask]\n\n            min_score_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[min_score_idx] < global_best_score:\n                global_best_score = personal_best_scores[min_score_idx]\n                global_best_position = personal_best_positions[min_score_idx]\n\n            # Update adaptive memory\n            adaptive_memory = self.memory_decay * adaptive_memory + (1 - self.memory_decay) * global_best_position\n\n            # Adaptive cognitive and social components with memory influence\n            adaptive_c1 = self.c1 * (1 - eval_count / self.budget)\n            adaptive_c2 = self.c2 * (eval_count / self.budget)\n\n            # Update velocities and positions using hybrid PSO-GA update rule\n            r1 = np.random.rand(self.num_particles, self.dim)\n            r2 = np.random.rand(self.num_particles, self.dim)\n            velocities = (self.w * velocities +\n                          adaptive_c1 * r1 * (personal_best_positions - positions) +\n                          adaptive_c2 * r2 * (adaptive_memory - positions))\n            positions += velocities\n            positions = np.clip(positions, self.lb, self.ub)\n\n            # Genetic Algorithm operations\n            for i in range(self.num_particles):\n                if np.random.rand() < self.crossover_rate:\n                    idxs = [idx for idx in range(self.num_particles) if idx != i]\n                    partner = positions[np.random.choice(idxs)]\n                    mask = np.random.rand(self.dim) < 0.5\n                    child = np.where(mask, positions[i], partner)\n\n                    if np.random.rand() < self.mutation_rate:\n                        mutation_idx = np.random.randint(self.dim)\n                        mutation_value = np.random.uniform(self.lb, self.ub)\n                        child[mutation_idx] = mutation_value\n\n                    child_score = func(child)\n                    eval_count += 1\n                    if child_score < scores[i]:\n                        positions[i] = child\n                        scores[i] = child_score\n\n                    if eval_count >= self.budget:\n                        break\n\n            # Update global best with the latest evaluations\n            current_best_idx = np.argmin(scores)\n            if scores[current_best_idx] < global_best_score:\n                global_best_score = scores[current_best_idx]\n                global_best_position = positions[current_best_idx]\n\n        return global_best_position", "name": "EnhancedHybridPSO_GA", "description": "Enhanced Hybrid PSO-GA with Adaptive Memory and Contextual Learning for Improved Convergence.", "configspace": "", "generation": 67, "fitness": 0.15842893536044342, "feedback": "The algorithm EnhancedHybridPSO_GA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.10.", "error": "", "parent_id": "71679915-b7d2-4246-a9b8-9b30791aa78f", "metadata": {"aucs": [0.3456406511147564, 0.3200536783180895, 0.35525986034439305, 0.2913861836949547, 0.34164183767069867, 0.31323516003169005, 0.2850885403842386, 0.3172740994261761, 0.3081906448814402, 0.034097422146731726, 0.00048354914569803675, 0.030002793194291888, 0.026684356186674973, 0.018369272404031523, 0.020006425285823748, 0.06718483888859905, 0.00011108558673478264, 0.06811949709897402, 0.14126902678519526, 0.2005622394989729, 0.09957372466448011, 0.12662755390226288, 0.10341171241842584, 0.09720375875859677, 0.12614065194301716, 0.1149040097302173, 0.1371315092229235, 0.08850092118818498, 0.10004201536537816, 0.09425570306902442, 0.11815937413226418, 0.0871353842084811, 0.08766403019922142, 0.09033688263863138, 0.08289815868484329, 0.09841777068575808, 0.10912534385512573, 0.11323316159225472, 0.11004108096182985, 0.1178052411828805, 0.11367057618103138, 0.10736391238158671, 0.1298115759893459, 0.11234500634914424, 0.11952903763527667, 0.0983622665042494, 0.11152249681720516, 0.11687399533905118, 0.11905817507338146, 0.11134345929911238, 0.11202167768093607, 0.1164826171541159, 0.15331875759067715, 0.17434228498311, 0.287101654223746, 0.2246798285111299, 0.19515238054141715, 0.3377907994660835, 0.26271534169245525, 0.30077167191524945, 0.17096357676247664, 0.16879267040452417, 0.16669139646899223, 0.12184757521964384, 0.16623215633378585, 0.15492889426886214, 0.13236119566597337, 0.06932974513405521, 0.17689732297524075, 0.12196145705519845, 0.09104307068841411, 0.13848874164081748, 0.13644886847715643, 0.12028391954140971, 0.12386973013073621, 0.11784129242214036, 0.10437569932810342, 0.1195744066562916, 0.14994298499725423, 0.1071495266699245, 0.11565664002110776, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00293338826129641, 0.10007116721785592, 9.999999999998899e-05, 0.048815918685324644, 9.999999999998899e-05, 9.999999999998899e-05, 0.19046697650308442, 0.15498776768138, 0.10689862819000884, 0.08970653705026144, 0.04925258084196771, 0.10038024407186952, 0.14745919784023243, 0.1119009538039274, 0.14219331823437864, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014840815560887899, 0.06345744521606755, 0.03368130279092241, 0.048774507601502926, 0.08782959872322194, 0.05752060779401835, 0.040039265251741396, 0.04343465105388622, 0.0618823188851898, 0.3418151942211881, 0.30663644571028204, 0.2848334726199304, 0.31917981295696085, 0.2759371385147267, 0.2732065782839289, 0.42156085696301115, 0.4040313442529283, 0.3125396280968653, 0.07803702041349536, 0.10268574083230486, 0.09791331019586103, 0.09839633092020017, 0.0949203829968861, 0.13754044305324764, 0.1080442148060955, 0.12056258635808992, 0.10777865386048613, 0.1275625065713728, 0.2145466243312084, 0.155892697757944, 0.2042615208185381, 0.18383942223417482, 0.25716284847116255, 0.20739293359743483, 0.12962044697680142, 0.17630701364838552, 0.20687277840531737, 0.2315631202817714, 0.230793083038206, 0.2315440938148644, 0.25288936072928336, 0.23041268568929718, 0.22990540532470427, 0.30838951441462514, 0.22691195163376532, 0.18252719028621844, 0.24607665624433972, 0.18245662310884114, 0.20305475037502985, 0.2298942010615167, 0.20243174384593743, 0.19571402561420004, 0.20926442821319613, 0.18723350348014456, 0.2141008234211974, 0.2129279153816418, 0.20585041981705687, 0.24119315180067147, 0.21309360110815478, 0.20389006267205678, 0.21717860432496505, 0.19116145688074115, 0.22300882979750092, 0.19356671888302102, 0.20279297700511656, 0.18645809663012225, 0.17445708668855608, 0.18117991409790368, 0.20716502096970413, 0.17743892325055133, 0.1901703557717117, 0.1883725357507947, 0.24573648628393974, 0.17593829523880944, 0.1643655005349679, 0.4903437449617559, 0.3724136193253865, 0.35889030928337984, 0.41812824660443526, 0.14986476574724517, 0.5989100792299467, 0.28037402943189005, 0.5790897148390426, 0.2980659910123308, 0.25648712872107093, 0.19085787028961398, 0.13469280908732695, 0.13699486951396334, 0.1666854269642728, 0.20992355512279415, 0.18854549868633796, 0.1699930871749571, 0.192683020888201, 0.20938372617297363, 0.17518788443801114, 0.19224278662943994, 0.19321047649659118, 0.1892077096854745, 0.1883839944852136, 0.0906544243861035, 0.07829309493947623, 0.08352587613261697, 0.07796492708142744, 0.08333048236106244, 0.08602518669435921, 0.09377116042096045, 0.08519887228289413, 0.09690387948986268]}, "mutation_prompt": null}
{"id": "28e93eb6-0bd4-43d1-ac7c-9578c1dac0d9", "solution": "import numpy as np\n\nclass EnhancedAdaptivePSO_GA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.num_particles = 35  # Slightly reduced to focus more on promising areas\n        self.w = 0.5  # Adjusted inertia for better convergence\n        self.c1 = self.c2 = 1.7  # Unified and adaptive cognitive and social components\n        self.mutation_rate = 0.3  # Enhanced mutation rate for diversity\n        self.crossover_rate = 0.7  # Increased crossover rate for better exploration\n\n    def __call__(self, func):\n        # Initialize particles\n        positions = np.random.uniform(self.lb, self.ub, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.num_particles, float('inf'))\n        global_best_position = np.zeros(self.dim)\n        global_best_score = float('inf')\n\n        eval_count = 0\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            scores = np.array([func(p) for p in positions])\n            eval_count += self.num_particles\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_scores[better_mask] = scores[better_mask]\n            personal_best_positions[better_mask] = positions[better_mask]\n\n            min_score_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[min_score_idx] < global_best_score:\n                global_best_score = personal_best_scores[min_score_idx]\n                global_best_position = personal_best_positions[min_score_idx]\n\n            # Dynamic learning coefficients based on current progress\n            adaptive_c1 = self.c1 * (0.5 + 0.5 * np.cos(np.pi * eval_count / self.budget))\n            adaptive_c2 = self.c2 * (0.5 + 0.5 * np.sin(np.pi * eval_count / self.budget))\n\n            # Update velocities and positions\n            r1 = np.random.rand(self.num_particles, self.dim)\n            r2 = np.random.rand(self.num_particles, self.dim)\n            velocities = (self.w * velocities +\n                          adaptive_c1 * r1 * (personal_best_positions - positions) +\n                          adaptive_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.lb, self.ub)\n\n            # Genetic Algorithm operations\n            for i in range(self.num_particles):\n                if np.random.rand() < self.crossover_rate:\n                    idxs = [idx for idx in range(self.num_particles) if idx != i]\n                    partner = positions[np.random.choice(idxs)]\n                    mask = np.random.rand(self.dim) < 0.5\n                    child = np.where(mask, positions[i], partner)\n\n                    if np.random.rand() < self.mutation_rate:\n                        mutation_dim = np.random.choice(range(self.dim), size=2, replace=False)\n                        mutation_values = np.random.uniform(self.lb, self.ub, size=2)\n                        child[mutation_dim] = mutation_values\n\n                    child_score = func(child)\n                    eval_count += 1\n                    if child_score < scores[i]:\n                        positions[i] = child\n                        scores[i] = child_score\n\n                    if eval_count >= self.budget:\n                        break\n\n            # Update global best with the latest evaluations\n            current_best_idx = np.argmin(scores)\n            if scores[current_best_idx] < global_best_score:\n                global_best_score = scores[current_best_idx]\n                global_best_position = positions[current_best_idx]\n\n        return global_best_position", "name": "EnhancedAdaptivePSO_GA", "description": "Enhanced Adaptive PSO-GA with Dynamic Learning Coefficients and Intelligent Mutation for Faster Convergence.", "configspace": "", "generation": 68, "fitness": 0.30136624225067987, "feedback": "The algorithm EnhancedAdaptivePSO_GA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.27.", "error": "", "parent_id": "71679915-b7d2-4246-a9b8-9b30791aa78f", "metadata": {"aucs": [0.8829630753886166, 0.8817557085157757, 0.890369960545357, 0.882945166325675, 0.819199141769337, 0.896310839184203, 0.8920563536241013, 0.8510209935498417, 0.8903220742876832, 0.6331627182296248, 0.6940332521386312, 0.5758638308175479, 0.7084235925651862, 0.7752814010774645, 0.36233037170165316, 0.7030919434516968, 0.766152416285192, 0.7011456634821607, 0.35398835516544136, 0.12397719799242735, 0.11313024736728061, 0.15442869866090692, 0.14954136544179797, 0.13861371783200027, 0.12916008959987035, 0.1380926056616648, 0.18104406158473763, 0.1264406711472058, 0.15274258552784192, 0.12850782610231437, 0.10630358269584739, 0.13598396508141597, 0.11739728387296822, 0.13861936094053617, 0.13103109652877554, 0.11216445243322992, 0.9504319355661188, 0.9747554312115001, 0.949200920332016, 0.9448358202669617, 0.9558433272434957, 0.9590657584601113, 0.9698477505696517, 0.9473292284059142, 0.949336142240247, 0.6780206641648212, 0.7054123048471735, 0.21093578390365642, 0.687743228826438, 0.15040649521625105, 0.5783389904655309, 0.6478303240992702, 0.45286151117641305, 0.7209116051352096, 0.22857560334258353, 0.1558567557434346, 0.21518469093246118, 0.1843602203530299, 0.2776857717009523, 0.2794345556318847, 0.16385079346427667, 0.1491505670065808, 0.17832163654492927, 0.2459231111416953, 0.12593770651113811, 0.15951343632179016, 0.17648048519827608, 0.17407745351501636, 0.16842621614591646, 0.2387925709872455, 0.12614554247826348, 0.12817457943718835, 0.17579678209910887, 0.1301432847233427, 0.13017264747675017, 0.1422076720043789, 0.132366770465704, 0.1995015703729357, 0.21217886489509208, 0.10985011037040626, 0.12393552785401629, 0.011357627077317578, 0.04014027508837459, 0.0655477697074317, 0.06731271578887466, 0.05380167490284182, 0.020447617636315085, 9.999999999998899e-05, 9.999999999998899e-05, 0.04537106464691465, 0.08240774505090942, 0.025107888745156348, 0.07387716402489308, 0.11629732177579155, 0.016779532024803867, 0.03194461603007748, 0.12445502944606746, 0.05319359925095901, 0.07215837234639255, 0.21892699007027694, 0.12263693977870238, 0.13819910835630944, 0.147958340143311, 0.15248221770445602, 0.07939041614532305, 0.25902457912985666, 0.14015424702333623, 0.15312668809841068, 0.09428706703511402, 0.11650545048617844, 0.11881924014468481, 0.06999519583728508, 0.10172044711050188, 0.1488964372984748, 0.3277086378600125, 0.09867308336197733, 0.08398675520358534, 0.5374314079359148, 0.5427930889607739, 0.5321618592317109, 0.5579400415176021, 0.5835763217397298, 0.5372034204509866, 0.5725488042861338, 0.5498455144668253, 0.5878365943025237, 0.08288964171334756, 0.11635301132300468, 0.08707982165061057, 0.1103926947958962, 0.09242426212509958, 0.1144664702124748, 0.12666825382279534, 0.0992843818922875, 0.13665495909588332, 0.24177703069390077, 0.1779059276996432, 0.1976781808908583, 0.4105871299572271, 0.27119323808023843, 0.4258031737245296, 0.43418379176170996, 0.186558635897496, 0.1614262716924908, 0.29051037628373555, 0.4591550671228657, 0.22685437653919338, 0.33563042103272167, 0.23705935012986457, 0.30628962008693106, 0.5148419225700183, 0.18540780118139566, 0.46996882789372363, 0.23010964278059065, 0.2898396123626277, 0.1829179204419482, 0.24550294295837616, 0.22079891882873937, 0.2777443833749872, 0.2738703241973066, 0.28033305314045165, 0.36944227190571133, 0.21638144492815392, 0.27521968660054186, 0.2007215835920665, 0.20069017506025832, 0.2068054025966003, 0.2043963730823959, 0.2182852099336534, 0.23475614557939561, 0.2228974659740276, 0.19915993866686543, 0.20383736937734132, 0.18571106852996722, 0.22449867169857873, 0.20674281780442905, 0.18506281683373837, 0.2037419546323216, 0.21102983377426654, 0.25215320046290113, 0.2041376460576545, 0.18753406527095617, 0.15311255808652657, 0.9283168286179468, 0.7356522353121522, 0.20005486063979816, 0.1424670542055354, 0.17018150721034675, 0.9088718716859177, 0.2114501203493353, 0.2118365916270889, 0.7399115067379, 0.5392282838517806, 0.1677379358113389, 0.21091058683129393, 0.10500708673993198, 0.16705952976271332, 0.861758392640243, 0.19798741030710643, 0.16976728318057432, 0.1955235745846433, 0.18245591314591125, 0.17921840518384013, 0.18017512886473885, 0.17597903538869208, 0.1796470854297797, 0.1796494898838511, 0.10958480504429258, 0.089415725397059, 0.097796632853693, 0.09547035064072973, 0.085220478998277, 0.08718293125824894, 0.07295637672338795, 0.0834159245135977, 0.08976152167347629]}, "mutation_prompt": null}
{"id": "086bd0bb-22f1-4479-99a6-6f598c1e76b0", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_GA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.num_particles = 40  # Reduced to focus on promising areas\n        self.w = 0.6  # Adjusted inertia for balance between exploration and exploitation\n        self.c1 = 1.5  # Adaptive cognitive component\n        self.c2 = 2.2  # Increased social component to enhance attraction to global best\n        self.mutation_rate = 0.25  # Increased mutation rate for diversity\n        self.crossover_rate = 0.6  # Adjusted crossover rate for improved exploitation\n\n    def __call__(self, func):\n        # Initialize particles\n        positions = np.random.uniform(self.lb, self.ub, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.num_particles, float('inf'))\n        global_best_position = np.zeros(self.dim)\n        global_best_score = float('inf')\n\n        eval_count = 0\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            scores = np.array([func(p) for p in positions])\n            eval_count += self.num_particles\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_scores[better_mask] = scores[better_mask]\n            personal_best_positions[better_mask] = positions[better_mask]\n\n            min_score_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[min_score_idx] < global_best_score:\n                global_best_score = personal_best_scores[min_score_idx]\n                global_best_position = personal_best_positions[min_score_idx]\n\n            # Adaptive cognitive and social components\n            adaptive_c1 = self.c1 * np.exp(-eval_count / (0.4 * self.budget))\n            adaptive_c2 = self.c2 * (1 - np.exp(-eval_count / (0.4 * self.budget)))\n\n            # Update velocities and positions using hybrid PSO-GA update rule\n            r1 = np.random.rand(self.num_particles, self.dim)\n            r2 = np.random.rand(self.num_particles, self.dim)\n            velocities = (self.w * velocities +\n                          adaptive_c1 * r1 * (personal_best_positions - positions) +\n                          adaptive_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.lb, self.ub)\n\n            # Genetic Algorithm operations\n            for i in range(self.num_particles):\n                if np.random.rand() < self.crossover_rate:\n                    idxs = [idx for idx in range(self.num_particles) if idx != i]\n                    partner = positions[np.random.choice(idxs)]\n                    mask = np.random.rand(self.dim) < 0.5\n                    child = np.where(mask, positions[i], partner)\n\n                    if np.random.rand() < self.mutation_rate:\n                        mutation_idx = np.random.randint(self.dim)\n                        mutation_value = np.random.uniform(self.lb, self.ub)\n                        child[mutation_idx] = mutation_value\n\n                    child_score = func(child)\n                    eval_count += 1\n                    if child_score < scores[i]:\n                        positions[i] = child\n                        scores[i] = child_score\n\n                    if eval_count >= self.budget:\n                        break\n\n            # Update global best with the latest evaluations\n            current_best_idx = np.argmin(scores)\n            if scores[current_best_idx] < global_best_score:\n                global_best_score = scores[current_best_idx]\n                global_best_position = positions[current_best_idx]\n\n        return global_best_position", "name": "EnhancedHybridPSO_GA", "description": "Enhanced Hybrid PSO-GA with Dynamic Population Refinement and Targeted Mutation for Accelerated Convergence.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "71679915-b7d2-4246-a9b8-9b30791aa78f", "metadata": {"aucs": [0.8709116999593831, 0.8723138723777221, 0.8768372615335654, 0.8617868929087722, 0.8732786663332638, 0.8700165787014595, 0.7565562986219209, 0.868539258880491, 0.8709766980904352, 0.7164359951709853, 0.7048047712591957, 0.4776950380186241, 0.3855705320648811, 0.6623877477389744, 0.7604071468026499, 0.2925765172942847, 0.6462031836272428, 0.19553392270172443, 0.17303437138306488, 0.2311803368732268, 0.13147514920023173, 0.14639486955092984, 0.35218672427787756, 0.35487832224036875, 0.14866342766770446, 0.32622137780232907, 0.17580831107043648, 0.1364785949220515, 0.13723180340024177, 0.1415672077043013, 0.1034515896336532, 0.18768357811791359, 0.11499926313848663, 0.14052555748747397, 0.1397271088896036, 0.14224280497807062, 0.8572855482713462, 0.8816167955365596, 0.8719308246693213, 0.9193998394786392, 0.914420324363186, 0.868569508913773, 0.9178142773244033, 0.8901375456634961, 0.9104234556450416, 0.44374478233240466, 0.7135385169264723, 0.28224185632107246, 0.6757261041085597, 0.5347767213601308, 0.6924610301299955, 0.2150090318021105, 0.5979667369466203, 0.46334160313151795, 0.3816440509835938, 0.8871688407181226, 0.2215335955350327, 0.2782753108644027, 0.20804701301111983, 0.21414455095505636, 0.17006784993710677, 0.14936435372393353, 0.8927547238016643, 0.12598746301048813, 0.27674670478297914, 0.13402205898302322, 0.1989156862933854, 0.1637406030113836, 0.15700652057774145, 0.3784850467672597, 0.20359559468799404, 0.15199652764569382, 0.19805528150264373, 0.12909579769588853, 0.20974198883930295, 0.13618812474127684, 0.1676843122643138, 0.21199600895034987, 0.1806227083724674, 0.18720342152943903, 0.14286907178205843, 0.011209799583482005, 0.05529339075019002, 9.999999999998899e-05, 0.10832408699422724, 0.04279531077019072, 9.999999999998899e-05, 0.05451701182477431, 0.06287221396818243, 0.011708930366438275, 0.11851476671790695, 0.13042357546193484, 0.08751705868258464, 0.0737520182321394, 0.0674670842998144, 0.07040643281963133, 0.12270959020209427, 0.1635158390187902, 0.11337901101866699, 9.999999999998899e-05, 0.12060053095909329, 0.15135623777850848, 0.1888409906988574, 0.21600226247055165, 0.12214764580372828, 0.1405721141220454, 0.23155685722371033, 0.2630130022138708, 0.1288308910254673, 0.34621738907919575, 0.27668944855796795, 0.07016384558757949, 0.11322576437915599, 0.07104408037199961, 0.20232014360368966, 0.17029684759892205, 0.1043090462902142, 0.5275849797575713, 0.4916609332810673, 0.5484482146725321, 0.6025381266452674, 0.5669340898622877, 0.540035744668264, 0.5335086626702187, 0.5645246800771313, 0.5675543526425648, 0.10220124270145459, 0.17235856712732534, 0.09015062051346068, 0.14918869038205118, 0.14833937478444825, 0.1265665437173411, 0.13741787062809396, 0.10950728317396385, 0.10727360923944129, 0.1522830180351078, 0.19161055363162882, 0.22403061555925252, 0.19664252516112934, 0.19353340288045007, 0.2143631657275058, 0.22899864457304753, 0.20507301754383522, 0.16376887897753145, 0.25889297875502104, 0.30324011541506257, 0.20595125965070904, 0.273450660627921, 0.5507256147127081, 0.33491973351863924, 0.2679250418098513, 0.2868145497806951, 0.5045353871494462, 0.2422052565907501, 0.27251688689126796, 0.22336131551185512, 0.2281901599841637, 0.1532587735635741, 0.23681089449201387, 0.17474848273382282, 0.28874861636043514, 0.26641830685633283, 0.2296548129849213, 0.22112564705591653, 0.4116295558833244, 0.27429704557205437, 0.25393708255507086, 0.20692391605978377, 0.2326379270132466, 0.19551239397576992, 0.2154097795892288, 0.22901002088179723, 0.18804644526911107, 0.18831793637834637, 0.19084701804057014, 0.2870924905379486, 0.19422011941911022, 0.1967708819138012, 0.22007520569987904, 0.20426687081246941, 0.17535235983947695, 0.1956085758016729, 0.18513856718686927, 0.853351435696617, 0.3560060671921448, 0.8757283763917089, 0.8553559198811277, 0.16919964030308454, 0.13442874366711544, 0.5821816685326726, 0.719751672453101, 0.46208413758601397, 0.7491859575447042, 0.20931336361852104, 0.20509540991197794, 0.3883684528344128, 0.499071632722356, 0.3318319362175811, 0.19639170561099495, 0.19765120753207144, 0.1974169342458848, 0.20355066541306377, 0.17175700260853521, 0.17872396251533595, 0.18059120011176089, 0.17875517461522827, 0.196857160154308, 0.1007064099381123, 0.0992299406111311, 0.09211341496887471, 0.08741383495575883, 0.07795395188648158, 0.15317868552169456, 0.07059919688751182, 0.08629132951339868, 0.0918739748027434]}, "mutation_prompt": null}
{"id": "c48bb0d5-ebbb-43f4-8bfb-ca84189466ef", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_GA_Refined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.num_particles = 50  # Increased particles to enhance exploration\n        self.initial_w = 0.9  # Adaptive inertia starts higher for exploration\n        self.final_w = 0.4  # Lower inertia towards end for exploitation\n        self.c1 = 1.7  # Slightly higher cognitive component for better personal search\n        self.c2 = 2.0  # Balanced social component\n        self.mutation_rate = 0.3  # Dual mutation strategy with increased rate\n        self.crossover_rate = 0.7  # Higher crossover rate for diverse offspring\n\n    def __call__(self, func):\n        # Initialize particles\n        positions = np.random.uniform(self.lb, self.ub, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.num_particles, float('inf'))\n        global_best_position = np.zeros(self.dim)\n        global_best_score = float('inf')\n\n        eval_count = 0\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            scores = np.array([func(p) for p in positions])\n            eval_count += self.num_particles\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_scores[better_mask] = scores[better_mask]\n            personal_best_positions[better_mask] = positions[better_mask]\n\n            min_score_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[min_score_idx] < global_best_score:\n                global_best_score = personal_best_scores[min_score_idx]\n                global_best_position = personal_best_positions[min_score_idx]\n\n            # Adaptive inertia weight\n            w = self.final_w + (self.initial_w - self.final_w) * ((self.budget - eval_count) / self.budget)\n\n            # Adaptive cognitive and social components\n            adaptive_c1 = self.c1 * np.exp(-eval_count / (0.3 * self.budget))\n            adaptive_c2 = self.c2 * (1 - np.exp(-eval_count / (0.3 * self.budget)))\n\n            # Update velocities and positions using hybrid PSO-GA update rule\n            r1 = np.random.rand(self.num_particles, self.dim)\n            r2 = np.random.rand(self.num_particles, self.dim)\n            velocities = (w * velocities +\n                          adaptive_c1 * r1 * (personal_best_positions - positions) +\n                          adaptive_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.lb, self.ub)\n\n            # Genetic Algorithm operations\n            for i in range(self.num_particles):\n                if np.random.rand() < self.crossover_rate:\n                    idxs = [idx for idx in range(self.num_particles) if idx != i]\n                    partner = positions[np.random.choice(idxs)]\n                    mask = np.random.rand(self.dim) < 0.6\n                    child = np.where(mask, positions[i], partner)\n\n                    if np.random.rand() < self.mutation_rate:\n                        mutation_idx1 = np.random.randint(self.dim)\n                        mutation_value1 = np.random.uniform(self.lb, self.ub)\n                        child[mutation_idx1] = mutation_value1\n\n                        if np.random.rand() < 0.1:  # Secondary mutation for additional diversity\n                            mutation_idx2 = np.random.randint(self.dim)\n                            mutation_value2 = np.random.uniform(self.lb, self.ub)\n                            child[mutation_idx2] = mutation_value2\n\n                    child_score = func(child)\n                    eval_count += 1\n                    if child_score < scores[i]:\n                        positions[i] = child\n                        scores[i] = child_score\n\n                    if eval_count >= self.budget:\n                        break\n\n            # Update global best with the latest evaluations\n            current_best_idx = np.argmin(scores)\n            if scores[current_best_idx] < global_best_score:\n                global_best_score = scores[current_best_idx]\n                global_best_position = positions[current_best_idx]\n\n        return global_best_position", "name": "EnhancedHybridPSO_GA_Refined", "description": "A refined Enhanced Hybrid PSO-GA with Adaptive Inertia and Dual Mutation Strategy for Rapid Convergence.", "configspace": "", "generation": 70, "fitness": 0.2411550525702146, "feedback": "The algorithm EnhancedHybridPSO_GA_Refined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.22.", "error": "", "parent_id": "71679915-b7d2-4246-a9b8-9b30791aa78f", "metadata": {"aucs": [0.5100532480033715, 0.4337334471584052, 0.36108324631036726, 0.6805740595307656, 0.7075675548020063, 0.7031519631568535, 0.5154818514430717, 0.3142803530056846, 0.5702594798491774, 0.253393234664826, 0.0064552665331839565, 0.14504988195352653, 0.3010561490476067, 0.08118717527438057, 0.04874907289206709, 0.313617813529699, 0.23222117505745055, 0.19216782599200422, 0.08941916836775343, 0.14006509905168552, 0.1509116060768969, 0.1330352213922248, 0.135858005259876, 0.15004699637036023, 0.05846237902307716, 0.13860589941073742, 0.20946386615717427, 0.08994806078043804, 0.09045352566086895, 0.09101677595639557, 0.09306429975661545, 0.10514529970002173, 0.09296083761995744, 0.1530086256660279, 0.08251650989326353, 0.10865329496691689, 0.9263382252133402, 0.924822545465904, 0.9325811944929517, 0.9175404271494263, 0.9118020900589489, 0.9259586890663407, 0.9278426306574017, 0.9263485389192742, 0.9245420528645626, 0.33700369327079793, 0.23704609153207434, 0.5075235706024126, 0.42055691600050304, 0.2212868173307776, 0.460624940083168, 0.3073540230820152, 0.3398904702596316, 0.3640071298778216, 0.22374124641995985, 0.36905756897559994, 0.21810201787091277, 0.35537442071939074, 0.2081058199806689, 0.25752298530827733, 0.22717873186294224, 0.2320920879519941, 0.37193010774845714, 0.16293312202607868, 0.08904301728032094, 0.13033798769708393, 0.08296327436747486, 0.18765902260082545, 0.16619861120330093, 0.12310436193428065, 0.18755849364768595, 0.19478481280259108, 0.18881783591324064, 0.12076541765940418, 0.16617437528235224, 0.23760830868825222, 0.12113682490915467, 0.18026241512292895, 0.22465933762835588, 0.21476711033009244, 0.16181488703590907, 9.999999999998899e-05, 0.02376792324779986, 9.999999999998899e-05, 0.07071607408432523, 0.015411846004026675, 0.02315957688628023, 0.03240034344170739, 9.999999999998899e-05, 9.999999999998899e-05, 0.11517460910428601, 0.12479561281363927, 0.1346615909128328, 0.08976614909258718, 0.0065491445617417154, 0.07015797642567545, 0.09700054516608247, 0.14682295415094782, 0.06397359435282435, 0.015803176519397444, 0.05985014876059036, 9.999999999998899e-05, 0.006264492580072556, 9.999999999998899e-05, 0.0985671138303107, 9.999999999998899e-05, 0.06714203358496562, 9.999999999998899e-05, 0.1229777593172412, 0.07000621365245352, 0.0777195372373759, 0.07789286511927662, 0.10908584818505407, 0.07342905735183936, 0.04567342380504502, 0.10430593516004627, 0.07590736863570013, 0.37930413558365395, 0.42686996850390535, 0.3872779914774298, 0.4655047067224789, 0.4257309231088241, 0.4599443250677224, 0.5388345990454997, 0.3777145663491409, 0.566625214212282, 0.10276951722102035, 0.09758003581068897, 0.06307154262565218, 0.09021914076511806, 0.0859833751645358, 0.11879602158321234, 0.10843788215062045, 0.06881375185489413, 0.10712580862787435, 0.1629024008840121, 0.1390566543983658, 0.19690192686777708, 0.1618754674627607, 0.24857768107738742, 0.14139083443677192, 0.17496097948740008, 0.1441965853954451, 0.18156373624234745, 0.2333117716911779, 0.22811526854843533, 0.27787276349565304, 0.24174265023448493, 0.24154951839946548, 0.4140136218201709, 0.20525339612374127, 0.28672743857608396, 0.2449288415063442, 0.13762447130530853, 0.23769063791178902, 0.24118238326354435, 0.21811277648159844, 0.21401548417760363, 0.187013930050428, 0.32913826021699266, 0.24939844023463242, 0.21542332183816515, 0.2667751985304275, 0.1707671331851276, 0.1944450437235944, 0.21240804017305215, 0.17848523853653875, 0.23755847582489542, 0.2296785695825403, 0.20860074763645176, 0.19239585740713006, 0.2133285282484506, 0.24428605087803112, 0.193992262523776, 0.1700587205450511, 0.1763363124536632, 0.20274206025135877, 0.18181060650634506, 0.20708865306478375, 0.21188983908462855, 0.7349428375300541, 0.18161675195603366, 0.18281385167759767, 0.8304462472345496, 0.40274048227852255, 0.6106484842514539, 0.13996707301186728, 0.3736385869564567, 0.16545903267678153, 0.16823037767307358, 0.15349400519882017, 0.7137811270426199, 0.16607846820592276, 0.2062699053188206, 0.7960717047832392, 0.6427298019798386, 0.7180848974627088, 0.602071318125728, 0.18015783997181478, 0.1670029260888095, 0.17412858664218278, 0.18031929308284156, 0.18119854669357338, 0.18937548183573227, 0.1892881907793359, 0.18713169585481282, 0.17313202174280928, 0.0689641408486894, 0.09124259585877847, 0.09296007372542592, 0.08906315018204403, 0.08524728704492668, 0.07070601940648447, 0.07762662309617119, 0.08562442964767214, 0.08017998094812029]}, "mutation_prompt": null}
{"id": "9aec432a-c860-44b7-a382-877f895a97de", "solution": "import numpy as np\n\nclass AdvancedHybridPSO_GA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.num_particles = 45  # Slightly increased to enhance exploration\n        self.w = 0.5  # Lower inertia for faster convergence\n        self.c1 = 1.8  # Adaptive cognitive component increased for individual learning\n        self.c2 = 2.0  # Reduced social component to balance local and global search\n        self.mutation_rate = 0.3  # Higher mutation rate to prevent stagnation\n        self.crossover_rate = 0.55  # Adjusted crossover rate for exploration-exploitation balance\n        self.learning_acceleration = 1.25  # New parameter for dynamic learning\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lb, self.ub, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.num_particles, float('inf'))\n        global_best_position = np.zeros(self.dim)\n        global_best_score = float('inf')\n\n        eval_count = 0\n\n        while eval_count < self.budget:\n            scores = np.array([func(p) for p in positions])\n            eval_count += self.num_particles\n\n            better_mask = scores < personal_best_scores\n            personal_best_scores[better_mask] = scores[better_mask]\n            personal_best_positions[better_mask] = positions[better_mask]\n\n            min_score_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[min_score_idx] < global_best_score:\n                global_best_score = personal_best_scores[min_score_idx]\n                global_best_position = personal_best_positions[min_score_idx]\n\n            adaptive_c1 = self.c1 * np.exp(-eval_count / (0.5 * self.budget))\n            adaptive_c2 = self.c2 * (1 - np.exp(-eval_count / (0.5 * self.budget)))\n\n            r1 = np.random.rand(self.num_particles, self.dim)\n            r2 = np.random.rand(self.num_particles, self.dim)\n            velocities = (self.w * velocities +\n                          adaptive_c1 * r1 * (personal_best_positions - positions) +\n                          adaptive_c2 * r2 * (global_best_position - positions) +\n                          self.learning_acceleration * (global_best_position - personal_best_positions))\n            positions += velocities\n            positions = np.clip(positions, self.lb, self.ub)\n\n            for i in range(self.num_particles):\n                if np.random.rand() < self.crossover_rate:\n                    idxs = [idx for idx in range(self.num_particles) if idx != i]\n                    partner = positions[np.random.choice(idxs)]\n                    mask = np.random.rand(self.dim) < 0.5\n                    child = np.where(mask, positions[i], partner)\n\n                    if np.random.rand() < self.mutation_rate:\n                        mutation_idx = np.random.randint(self.dim)\n                        mutation_value = np.random.uniform(self.lb, self.ub)\n                        child[mutation_idx] = mutation_value\n\n                    child_score = func(child)\n                    eval_count += 1\n                    if child_score < scores[i]:\n                        positions[i] = child\n                        scores[i] = child_score\n\n                    if eval_count >= self.budget:\n                        break\n\n            current_best_idx = np.argmin(scores)\n            if scores[current_best_idx] < global_best_score:\n                global_best_score = scores[current_best_idx]\n                global_best_position = positions[current_best_idx]\n\n        return global_best_position", "name": "AdvancedHybridPSO_GA", "description": "An Advanced Hybrid PSO-GA with Dynamic Learning Acceleration and Adaptive Mutation for Faster Convergence.", "configspace": "", "generation": 71, "fitness": 0.1642923556115116, "feedback": "The algorithm AdvancedHybridPSO_GA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.21.", "error": "", "parent_id": "71679915-b7d2-4246-a9b8-9b30791aa78f", "metadata": {"aucs": [0.19001541984042936, 0.26795254063276774, 0.4910289930022015, 0.21194015422358636, 0.24220626091383235, 0.5508419223582215, 0.755405023226644, 0.3735988318843809, 0.36319938892234394, 0.020751051945724575, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043525036275246065, 9.999999999998899e-05, 0.009786959786654004, 0.09019121529198748, 0.25509531255737483, 0.056996548918696655, 0.06826212637639839, 0.048371449901813524, 0.06388572420349503, 0.05879080377635637, 0.04624736145530117, 0.09030240762834296, 0.07440566798815584, 0.11628724594829531, 0.029896501904359107, 0.06516408427021048, 0.04915182802073814, 0.12623039179178974, 0.007673571148689606, 0.018585319295075564, 0.08847268892392202, 0.09974921976480888, 0.09496993113656682, 0.9830716600646411, 0.9778096596065755, 0.983250328760839, 0.9713395726621576, 0.9723756433939889, 0.9662335881553983, 0.975410382701971, 0.9838753575336583, 0.9788001686262762, 0.1483924323951915, 0.06428326493520076, 0.026071267430860634, 0.14364943698750998, 0.1755014954328068, 0.11909899706914984, 0.0760647145626352, 0.08418600424054401, 0.13072128515881287, 0.11525514931938763, 0.17211988099429731, 0.16774488444194158, 0.1982755663100203, 0.18102437686137707, 0.1417885601621054, 0.11092499860188787, 0.12594143891447107, 0.21610260015978644, 9.999999999998899e-05, 0.1138224088679155, 9.999999999998899e-05, 0.09815125622155851, 0.11829311067535053, 0.10702105847445453, 0.11112851211973152, 0.11117244770234991, 0.11187566760367318, 0.1652109486895451, 0.013460432045083182, 0.00549503313392119, 0.029600658570214544, 9.999999999998899e-05, 0.15573897596599307, 0.03208680897796912, 0.08341662642156533, 0.07960876967637687, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.049363014193402166, 0.024824340457337724, 0.06090029557651455, 0.06210583227708577, 9.999999999998899e-05, 9.999999999998899e-05, 0.03721550574831456, 0.029086772356076818, 0.023087380200058405, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0931197554346358, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07022458496120143, 0.007570470798099471, 9.999999999998899e-05, 0.002754927067765811, 0.016653357728078855, 0.04876759048425994, 0.04097607247228463, 0.03258612500932068, 0.4025295928155038, 0.22281026573631435, 0.3298358404265641, 0.22438229835363732, 0.4705572692083416, 0.5475475665967531, 0.36177634114422363, 0.4390719121366886, 0.2366342698527596, 0.09353375793049945, 0.08879078432933452, 0.06359276522212509, 0.08633103455605162, 0.049097714047994345, 0.08442148878103539, 0.054516427744771834, 0.07443144353247444, 0.05203647480109197, 0.16520788898801242, 0.14803764719941936, 0.22832220031246908, 0.1556605256864081, 0.16982711702494324, 0.1266051350117985, 0.14195493671158166, 0.13636902010090945, 0.20345153935011762, 0.1355238381135161, 0.1266123950534216, 0.3836177170139906, 0.1449164771463346, 0.1687740998026367, 0.1390903016552042, 0.1339944055601392, 0.19252007837291063, 0.15217531238997073, 0.0782425464824057, 0.08343871586171536, 0.12327234270437404, 0.12840037683794203, 0.10842726535650271, 0.27038490827296213, 0.09552126273048123, 0.1760978419350493, 0.1201287739697422, 0.17899964065936658, 0.1271808546015687, 0.18048743755634822, 0.16162244281096205, 0.11178215646588519, 0.13940364730140464, 0.19833751192961435, 0.1837201983664174, 0.20688602989558735, 0.16096077097488926, 0.16476196115363761, 0.14706000652552953, 0.2343407974110241, 0.15785547977991032, 0.1788159037470154, 0.09325804847244012, 9.999999999998899e-05, 0.21563792170049423, 0.2372572342941811, 0.1656231989572865, 0.1511567065745537, 0.8605270614125877, 0.19404570600256676, 0.16451454927555986, 0.14127622217371116, 0.16917077373543143, 0.3382322350149616, 0.5157428821794234, 0.2096749443019137, 0.07345495882077469, 0.2022503641205673, 0.14037959933205535, 0.10711651943669709, 0.10341599905936216, 0.09608020162085062, 0.21849607235499746, 0.18326519056482282, 0.20602706309768648, 0.18160142560631276, 0.17156180371276586, 0.17554720542643176, 0.18767597951717496, 0.19341900506089338, 0.18031354357417861, 0.19530698308921512, 0.06973181188917266, 0.021736327033064717, 0.0804184097163192, 0.06839725104404482, 0.03663013119305447, 0.06341484317836943, 0.0784745440007899, 0.08605646132417899, 0.06306043946928241]}, "mutation_prompt": null}
{"id": "a2288a84-29f4-4270-8031-979ea164762c", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_GA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.num_particles = 40  # Reduced to focus on promising areas\n        self.w = 0.6  # Adjusted inertia for balance between exploration and exploitation\n        self.c1 = 1.5  # Adaptive cognitive component\n        self.c2 = 2.2  # Increased social component to enhance attraction to global best\n        self.mutation_rate = 0.25  # Increased mutation rate for diversity\n        self.crossover_rate = 0.6  # Adjusted crossover rate for improved exploitation\n\n    def __call__(self, func):\n        # Initialize particles\n        positions = np.random.uniform(self.lb, self.ub, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.num_particles, float('inf'))\n        global_best_position = np.zeros(self.dim)\n        global_best_score = float('inf')\n\n        eval_count = 0\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            scores = np.array([func(p) for p in positions])\n            eval_count += self.num_particles\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_scores[better_mask] = scores[better_mask]\n            personal_best_positions[better_mask] = positions[better_mask]\n\n            min_score_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[min_score_idx] < global_best_score:\n                global_best_score = personal_best_scores[min_score_idx]\n                global_best_position = personal_best_positions[min_score_idx]\n\n            # Adaptive cognitive and social components\n            adaptive_c1 = self.c1 * np.exp(-eval_count / (0.4 * self.budget))\n            adaptive_c2 = self.c2 * (1 - np.exp(-eval_count / (0.4 * self.budget)))\n\n            # Update velocities and positions using hybrid PSO-GA update rule\n            r1 = np.random.rand(self.num_particles, self.dim)\n            r2 = np.random.rand(self.num_particles, self.dim)\n            velocities = (self.w * velocities +\n                          adaptive_c1 * r1 * (personal_best_positions - positions) +\n                          adaptive_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.lb, self.ub)\n\n            # Genetic Algorithm operations\n            for i in range(self.num_particles):\n                if np.random.rand() < self.crossover_rate:\n                    idxs = [idx for idx in range(self.num_particles) if idx != i]\n                    partner = positions[np.random.choice(idxs)]\n                    mask = np.random.rand(self.dim) < 0.5\n                    child = np.where(mask, positions[i], partner)\n\n                    if np.random.rand() < self.mutation_rate:\n                        mutation_idx = np.random.randint(self.dim)\n                        mutation_value = np.random.uniform(self.lb, self.ub)\n                        child[mutation_idx] = mutation_value\n\n                    child_score = func(child)\n                    eval_count += 1\n                    if child_score < scores[i]:\n                        positions[i] = child\n                        scores[i] = child_score\n\n                    if eval_count >= self.budget:\n                        break\n\n            # Update global best with the latest evaluations\n            current_best_idx = np.argmin(scores)\n            if scores[current_best_idx] < global_best_score:\n                global_best_score = scores[current_best_idx]\n                global_best_position = positions[current_best_idx]\n\n        return global_best_position", "name": "EnhancedHybridPSO_GA", "description": "Enhanced Hybrid PSO-GA with Dynamic Population Refinement and Targeted Mutation for Accelerated Convergence.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "71679915-b7d2-4246-a9b8-9b30791aa78f", "metadata": {"aucs": [0.8709116999593831, 0.8723138723777221, 0.8768372615335654, 0.8617868929087722, 0.8732786663332638, 0.8700165787014595, 0.7565562986219209, 0.868539258880491, 0.8709766980904352, 0.7164359951709853, 0.7048047712591957, 0.4776950380186241, 0.3855705320648811, 0.6623877477389744, 0.7604071468026499, 0.2925765172942847, 0.6462031836272428, 0.19553392270172443, 0.17303437138306488, 0.2311803368732268, 0.13147514920023173, 0.14639486955092984, 0.35218672427787756, 0.35487832224036875, 0.14866342766770446, 0.32622137780232907, 0.17580831107043648, 0.1364785949220515, 0.13723180340024177, 0.1415672077043013, 0.1034515896336532, 0.18768357811791359, 0.11499926313848663, 0.14052555748747397, 0.1397271088896036, 0.14224280497807062, 0.8572855482713462, 0.8816167955365596, 0.8719308246693213, 0.9193998394786392, 0.914420324363186, 0.868569508913773, 0.9178142773244033, 0.8901375456634961, 0.9104234556450416, 0.44374478233240466, 0.7135385169264723, 0.28224185632107246, 0.6757261041085597, 0.5347767213601308, 0.6924610301299955, 0.2150090318021105, 0.5979667369466203, 0.46334160313151795, 0.3816440509835938, 0.8871688407181226, 0.2215335955350327, 0.2782753108644027, 0.20804701301111983, 0.21414455095505636, 0.17006784993710677, 0.14936435372393353, 0.8927547238016643, 0.12598746301048813, 0.27674670478297914, 0.13402205898302322, 0.1989156862933854, 0.1637406030113836, 0.15700652057774145, 0.3784850467672597, 0.20359559468799404, 0.15199652764569382, 0.19805528150264373, 0.12909579769588853, 0.20974198883930295, 0.13618812474127684, 0.1676843122643138, 0.21199600895034987, 0.1806227083724674, 0.18720342152943903, 0.14286907178205843, 0.011209799583482005, 0.05529339075019002, 9.999999999998899e-05, 0.10832408699422724, 0.04279531077019072, 9.999999999998899e-05, 0.05451701182477431, 0.06287221396818243, 0.011708930366438275, 0.11851476671790695, 0.13042357546193484, 0.08751705868258464, 0.0737520182321394, 0.0674670842998144, 0.07040643281963133, 0.12270959020209427, 0.1635158390187902, 0.11337901101866699, 9.999999999998899e-05, 0.12060053095909329, 0.15135623777850848, 0.1888409906988574, 0.21600226247055165, 0.12214764580372828, 0.1405721141220454, 0.23155685722371033, 0.2630130022138708, 0.1288308910254673, 0.34621738907919575, 0.27668944855796795, 0.07016384558757949, 0.11322576437915599, 0.07104408037199961, 0.20232014360368966, 0.17029684759892205, 0.1043090462902142, 0.5275849797575713, 0.4916609332810673, 0.5484482146725321, 0.6025381266452674, 0.5669340898622877, 0.540035744668264, 0.5335086626702187, 0.5645246800771313, 0.5675543526425648, 0.10220124270145459, 0.17235856712732534, 0.09015062051346068, 0.14918869038205118, 0.14833937478444825, 0.1265665437173411, 0.13741787062809396, 0.10950728317396385, 0.10727360923944129, 0.1522830180351078, 0.19161055363162882, 0.22403061555925252, 0.19664252516112934, 0.19353340288045007, 0.2143631657275058, 0.22899864457304753, 0.20507301754383522, 0.16376887897753145, 0.25889297875502104, 0.30324011541506257, 0.20595125965070904, 0.273450660627921, 0.5507256147127081, 0.33491973351863924, 0.2679250418098513, 0.2868145497806951, 0.5045353871494462, 0.2422052565907501, 0.27251688689126796, 0.22336131551185512, 0.2281901599841637, 0.1532587735635741, 0.23681089449201387, 0.17474848273382282, 0.28874861636043514, 0.26641830685633283, 0.2296548129849213, 0.22112564705591653, 0.4116295558833244, 0.27429704557205437, 0.25393708255507086, 0.20692391605978377, 0.2326379270132466, 0.19551239397576992, 0.2154097795892288, 0.22901002088179723, 0.18804644526911107, 0.18831793637834637, 0.19084701804057014, 0.2870924905379486, 0.19422011941911022, 0.1967708819138012, 0.22007520569987904, 0.20426687081246941, 0.17535235983947695, 0.1956085758016729, 0.18513856718686927, 0.853351435696617, 0.3560060671921448, 0.8757283763917089, 0.8553559198811277, 0.16919964030308454, 0.13442874366711544, 0.5821816685326726, 0.719751672453101, 0.46208413758601397, 0.7491859575447042, 0.20931336361852104, 0.20509540991197794, 0.3883684528344128, 0.499071632722356, 0.3318319362175811, 0.19639170561099495, 0.19765120753207144, 0.1974169342458848, 0.20355066541306377, 0.17175700260853521, 0.17872396251533595, 0.18059120011176089, 0.17875517461522827, 0.196857160154308, 0.1007064099381123, 0.0992299406111311, 0.09211341496887471, 0.08741383495575883, 0.07795395188648158, 0.15317868552169456, 0.07059919688751182, 0.08629132951339868, 0.0918739748027434]}, "mutation_prompt": null}
{"id": "2a50c528-3691-449d-af04-824ee9c4f9a7", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_GA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.num_particles = 50  # Increased to explore more search areas\n        self.w = 0.5  # Reduced inertia for quicker convergence\n        self.c1 = 1.7  # Enhanced cognitive component for adaptability\n        self.c2 = 2.0  # Balanced social component for global best attraction\n        self.mutation_rate = 0.2  # Decreased mutation rate to focus on promising areas\n        self.crossover_rate = 0.7  # Increased crossover rate for better exploitation\n\n    def __call__(self, func):\n        # Initialize particles\n        positions = np.random.uniform(self.lb, self.ub, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-0.2, 0.2, (self.num_particles, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.num_particles, float('inf'))\n        global_best_position = np.zeros(self.dim)\n        global_best_score = float('inf')\n\n        eval_count = 0\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            scores = np.array([func(p) for p in positions])\n            eval_count += self.num_particles\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_scores[better_mask] = scores[better_mask]\n            personal_best_positions[better_mask] = positions[better_mask]\n\n            min_score_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[min_score_idx] < global_best_score:\n                global_best_score = personal_best_scores[min_score_idx]\n                global_best_position = personal_best_positions[min_score_idx]\n\n            # Adaptive cognitive and social components\n            adaptive_c1 = self.c1 * (1 - eval_count / self.budget)\n            adaptive_c2 = self.c2 * np.log1p(eval_count / (0.5 * self.budget))\n\n            # Update velocities and positions using hybrid PSO-GA update rule\n            r1 = np.random.rand(self.num_particles, self.dim)\n            r2 = np.random.rand(self.num_particles, self.dim)\n            velocities = (self.w * velocities +\n                          adaptive_c1 * r1 * (personal_best_positions - positions) +\n                          adaptive_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.lb, self.ub)\n\n            # Genetic Algorithm operations\n            for i in range(self.num_particles):\n                if np.random.rand() < self.crossover_rate:\n                    idxs = [idx for idx in range(self.num_particles) if idx != i]\n                    partner = positions[np.random.choice(idxs)]\n                    mask = np.random.rand(self.dim) < 0.5\n                    child = np.where(mask, positions[i], partner)\n\n                    if np.random.rand() < self.mutation_rate:\n                        mutation_idx = np.random.randint(self.dim)\n                        mutation_value = np.random.uniform(self.lb, self.ub)\n                        child[mutation_idx] = mutation_value\n\n                    child_score = func(child)\n                    eval_count += 1\n                    if child_score < scores[i]:\n                        positions[i] = child\n                        scores[i] = child_score\n\n                    if eval_count >= self.budget:\n                        break\n\n            # Update global best with the latest evaluations\n            current_best_idx = np.argmin(scores)\n            if scores[current_best_idx] < global_best_score:\n                global_best_score = scores[current_best_idx]\n                global_best_position = positions[current_best_idx]\n\n        return global_best_position", "name": "EnhancedHybridPSO_GA", "description": "Enhanced Hybrid PSO-GA leveraging Adaptive Population Dynamics and Strategic Selection Pressure for Improved Convergence.", "configspace": "", "generation": 73, "fitness": 0.29777876932072167, "feedback": "The algorithm EnhancedHybridPSO_GA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.24.", "error": "", "parent_id": "71679915-b7d2-4246-a9b8-9b30791aa78f", "metadata": {"aucs": [0.8220114161358846, 0.8269264609699931, 0.8483801960457471, 0.8525236958252056, 0.8471259557559567, 0.5161150490317812, 0.8383248001161407, 0.8489463709063867, 0.8340164739793021, 0.6889868196601112, 0.46392443467376865, 0.44974854990383606, 0.6503149844889424, 0.6839905315101101, 0.7207335744060871, 0.49504794964647647, 0.713745019513824, 0.7225024287594182, 0.14231347408952733, 0.19333632431980985, 0.1478228013853593, 0.14557514955857898, 0.14343813624911073, 0.1618962617920603, 0.1443960535770844, 0.17561903244219723, 0.14496851408948497, 0.1378748927292066, 0.11658315980645506, 0.13648785894715199, 0.13948991587628812, 0.14289518352169073, 0.10599581291763138, 0.32040825352385593, 0.13756801437772048, 0.14209177015754026, 0.8816270054944012, 0.8081932655321915, 0.6236925826515082, 0.7609640717489629, 0.5250425698111595, 0.8480601240602091, 0.8293502294927995, 0.800492590736231, 0.8559283739727301, 0.205545281784989, 0.13572220907401766, 0.13698292696727876, 0.19003415026341464, 0.13162833511527006, 0.1390429904809729, 0.2017379367315173, 0.18793204321720725, 0.19988278741648124, 0.2464636790802197, 0.33585318313500667, 0.3642949822597119, 0.2721630152256447, 0.3205329228136189, 0.2641958637526075, 0.1625695899875509, 0.22796991679114353, 0.8588494277391859, 0.3002770946171539, 0.16742111411893768, 0.13808046952138597, 0.20093105121731647, 0.14541452228117546, 0.46429506027932144, 0.14374486986313117, 0.19495805303192504, 0.19684706581730582, 0.34984791511259195, 0.13515989030799336, 0.15331091689417553, 0.12384606036701973, 0.14224130300548876, 0.13349003148638916, 0.1306046488053757, 0.21204729998108418, 0.13532595455356755, 0.002110185036328094, 0.06589786932880759, 0.07211282727512403, 0.056903374165150344, 0.1122081318800896, 0.0038000973356620005, 0.11680343204317045, 9.999999999998899e-05, 0.02741151997909219, 0.11889675648463804, 0.1262883294873285, 0.1939857520605872, 0.049046091487180976, 0.1201407589478054, 0.14481033057363513, 0.1263226397111834, 0.15169921006977316, 0.10847904729701308, 0.12436963128481582, 0.05962348884250568, 0.13352888969977883, 0.11607217826810179, 0.14414662315714577, 0.12509398802410088, 0.15867620974773877, 0.24510201369887685, 9.999999999998899e-05, 0.19182214135928322, 0.24436403579297716, 0.11941425678576234, 0.0688642415356342, 0.0920676073741995, 0.2388237348143889, 0.16195139079147014, 0.16676596444749792, 0.07913322740203499, 0.5474486858049568, 0.4809100125359219, 0.48926570915060497, 0.5742877731131667, 0.5023415024550293, 0.5162843820456567, 0.4732981678890742, 0.4272161830265334, 0.561347562771922, 0.12487018635684222, 0.09276451651020212, 0.12520335535132288, 0.10693813547114006, 0.10291738359610314, 0.11995683274176294, 0.11751643271148515, 0.10555546174103003, 0.12104918185339009, 0.14271912210600057, 0.2038645288468438, 0.23310101371979963, 0.18296158044041877, 0.17173702263203627, 0.29628496282050343, 0.15614718980703568, 0.17854398757627843, 0.17159135532424918, 0.3606003142723494, 0.279899877499307, 0.35916199993071796, 0.29017063339597493, 0.374457015415642, 0.33654179766540837, 0.2263468801317423, 0.5585888841222932, 0.4579618520597588, 0.21292629235095362, 0.2904893727523865, 0.3079698339010841, 0.3000465696284301, 0.2255144463086578, 0.2607363643034508, 0.23346273437098564, 0.22677868014658964, 0.2203592944470476, 0.24044479956353826, 0.24008913293193657, 0.2146968798196348, 0.21101916608242088, 0.18161157300345432, 0.18816964224192756, 0.2303980079330743, 0.2250733381483827, 0.21286681928794426, 0.19670438645286847, 0.24317081877917146, 0.19093207175546445, 0.21040591314492463, 0.20943968866408258, 0.19079355530204734, 0.7207942906159501, 0.20442028977569449, 0.21183183051864019, 0.1834272599986284, 0.1838774742656718, 0.1841091362992221, 0.840796716050175, 0.7996885356208616, 0.7932336250564411, 0.8701674549338045, 0.7728200639556793, 0.8691457406959984, 0.7052565811648004, 0.48794812352607564, 0.4707766158286768, 0.7400323739562482, 0.19998560277157318, 0.7412512276176768, 0.21784758006218596, 0.671049572856513, 0.28672312046682735, 0.1852916292409602, 0.17920163182042392, 0.18189514205297097, 0.18218673484547354, 0.1763018213030655, 0.17679099545367793, 0.17563344448881613, 0.2281096286666081, 0.18023511410997695, 0.08733707360534393, 0.10740071072626212, 0.09625685308390819, 0.09126890978007884, 0.07585990191216463, 0.10583405736915485, 0.07913901588386019, 0.07738210904144238, 0.09329864616541106]}, "mutation_prompt": null}
{"id": "bdbb9051-0760-44fa-a61a-16d0dd07f40c", "solution": "import numpy as np\n\nclass AdaptiveHybridPSO_GA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.num_particles = 50  # Increased to enhance exploration\n        self.w = 0.5  # Reduced inertia for more responsive movement\n        self.c1 = 1.2  # Reduced cognitive component for less local search\n        self.c2 = 2.5  # Further increased social component for better global convergence\n        self.mutation_rate = 0.3  # Further increased mutation rate to introduce more diversity\n        self.crossover_rate = 0.7  # Increased crossover rate for better genetic mixing\n\n    def __call__(self, func):\n        # Initialize particles\n        positions = np.random.uniform(self.lb, self.ub, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.num_particles, float('inf'))\n        global_best_position = np.zeros(self.dim)\n        global_best_score = float('inf')\n\n        eval_count = 0\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            scores = np.array([func(p) for p in positions])\n            eval_count += self.num_particles\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_scores[better_mask] = scores[better_mask]\n            personal_best_positions[better_mask] = positions[better_mask]\n\n            min_score_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[min_score_idx] < global_best_score:\n                global_best_score = personal_best_scores[min_score_idx]\n                global_best_position = personal_best_positions[min_score_idx]\n\n            # Dynamic parameter adjustments\n            dynamic_w = self.w * (0.5 + 0.5 * (eval_count / self.budget))\n            dynamic_c1 = self.c1 * (0.5 + 0.5 * (1 - eval_count / self.budget))\n            dynamic_c2 = self.c2 * (0.5 + 0.5 * (eval_count / self.budget))\n\n            # Update velocities and positions using adaptive PSO-GA update rule\n            r1 = np.random.rand(self.num_particles, self.dim)\n            r2 = np.random.rand(self.num_particles, self.dim)\n            velocities = (dynamic_w * velocities +\n                          dynamic_c1 * r1 * (personal_best_positions - positions) +\n                          dynamic_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.lb, self.ub)\n\n            # Genetic Algorithm operations\n            for i in range(self.num_particles):\n                if np.random.rand() < self.crossover_rate:\n                    idxs = np.arange(self.num_particles) != i\n                    partner = positions[np.random.choice(np.where(idxs)[0])]\n                    mask = np.random.rand(self.dim) < 0.5\n                    child = np.where(mask, positions[i], partner)\n\n                    if np.random.rand() < self.mutation_rate:\n                        mutation_idx = np.random.randint(self.dim)\n                        mutation_value = np.random.uniform(self.lb, self.ub)\n                        child[mutation_idx] = mutation_value\n\n                    child_score = func(child)\n                    eval_count += 1\n                    if child_score < scores[i]:\n                        positions[i] = child\n                        scores[i] = child_score\n\n                    if eval_count >= self.budget:\n                        break\n\n            # Update global best with the latest evaluations\n            current_best_idx = np.argmin(scores)\n            if scores[current_best_idx] < global_best_score:\n                global_best_score = scores[current_best_idx]\n                global_best_position = positions[current_best_idx]\n\n        return global_best_position", "name": "AdaptiveHybridPSO_GA", "description": "Adaptive Hybrid PSO-GA with Enhanced Diversity and Exploitation Control for Faster Convergence.", "configspace": "", "generation": 74, "fitness": 0.2908177224777196, "feedback": "The algorithm AdaptiveHybridPSO_GA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.26.", "error": "", "parent_id": "71679915-b7d2-4246-a9b8-9b30791aa78f", "metadata": {"aucs": [0.9093327902686547, 0.8957536204231719, 0.9088697835638031, 0.5554962390214173, 0.8950201954118171, 0.9093610042948238, 0.8914725660070634, 0.8809085065879056, 0.9011549061362236, 0.7825403664225026, 0.784044036804128, 0.7804491486979714, 0.8056306847578896, 0.8002860741507993, 0.7794560614559835, 0.7801937858343944, 0.5766166935434591, 0.7935427461325653, 0.26650434583531935, 0.1725600551045301, 0.1776110901034994, 0.1737378291142977, 0.5829147435139801, 0.2294632458038458, 0.14514339013154876, 0.14516977911596896, 0.17619353607182076, 0.15119410130343858, 0.21382248545556326, 0.17945242172424747, 0.13832151548896576, 0.14504164039071488, 0.1417415543068955, 0.16050656756601367, 0.16529342500082278, 0.38269453722417446, 0.9571302763108888, 0.9356576413228102, 0.9577989876852893, 0.9384702988226007, 0.9398154314713147, 0.9550972065319546, 0.9504986196374666, 0.9276741753152394, 0.957106240174982, 0.7810704947272702, 0.25751155535590464, 0.19940514452876779, 0.27859870363081496, 0.21413495685419848, 0.4667627789546519, 0.23706886215907053, 0.15692269767609346, 0.508690927505708, 0.16630212004737133, 0.3429212555417487, 0.22812422280172673, 0.2715103314820171, 0.21414005557794458, 0.3858796434399403, 0.2199888501343572, 0.23563796082264388, 0.21931414946966366, 0.2796357551425036, 0.1459881863294239, 0.13163307126638923, 0.12905616274961595, 0.14655542773531394, 0.2097605018674923, 0.2847203673008786, 0.6625636463977744, 0.15278404990148609, 0.12892751874092334, 0.19150250549362846, 0.1484659462260557, 0.12935794404584267, 0.137290220632304, 0.1710649213174814, 0.12015096381754009, 9.999999999998899e-05, 0.12568951903673098, 9.999999999998899e-05, 0.12592917929690284, 0.0015302049821978025, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.024014971684605424, 9.999999999998899e-05, 0.11417808485068637, 0.19651865859233408, 0.05852712316398956, 0.08725023147156297, 0.06483366485890896, 0.021103900279039634, 0.026667647712834475, 0.0321111462685969, 0.06562667411375256, 0.03599972205296875, 0.07699723327980412, 0.12455993048634739, 0.14211988848671664, 0.07972359661055584, 0.10121647269354361, 0.5574690621124607, 0.09753749866131078, 0.17233092914753867, 9.999999999998899e-05, 0.11665211404412168, 0.10108972109594072, 0.08475618505040383, 0.0940266648773892, 0.12583086366833263, 0.033749481319357844, 0.12996501456983756, 0.13883899981531234, 0.08409155970111715, 0.508007992927713, 0.4662073190795786, 0.4963201339175838, 0.5034318874856679, 0.6009904840678686, 0.4290515147360857, 0.5514997522007117, 0.6517995080162315, 0.46133797667806364, 0.07710555219029325, 0.06291734929217241, 0.09216247617402828, 0.14652758796688814, 0.09479825858787849, 0.11769937314722956, 0.09179847811188868, 0.11691590800529816, 0.1437490154574521, 0.1620466704608725, 0.30891053100467347, 0.203748010773804, 0.4169728345750866, 0.21172396096256074, 0.264471824429111, 0.18488052652589926, 0.26745831511467955, 0.1926756884021923, 0.19383830523057566, 0.27990985952566605, 0.2039950762252044, 0.19310809573017063, 0.19613754370147984, 0.2789977141739396, 0.3081325258121559, 0.5435461246783642, 0.29109455386759, 0.24612726294693765, 0.3443736372592684, 0.311493583607215, 0.15684906514774177, 0.23340552190493669, 0.2790242038508777, 0.26176495239480324, 0.1997187821502373, 0.26290987694208945, 0.20989430985277657, 0.2476481288977609, 0.22553716556779047, 0.1944779462453058, 0.2790647766271763, 0.2298432828461574, 0.2440475536873129, 0.20235648771103198, 0.25731821212614236, 0.2335003149993452, 0.25286021292852956, 0.21719634863965398, 0.8255884438392154, 0.24032942495291754, 0.2029577971434262, 0.20842330856085456, 0.21868576596575662, 0.20206454688004827, 0.15027054554285346, 0.12661152414527388, 0.15401067746557473, 0.9406726726987608, 0.20089571038211096, 0.19947821421036627, 0.1873390861547698, 0.1540068889852888, 0.16782139976240174, 0.6925467009712498, 0.2092780235528241, 0.07358078679342306, 0.2578285459128754, 0.25370688542405495, 0.1345225986727553, 0.10486442454676581, 0.10493746612135946, 0.229144776441082, 0.17893406876340345, 0.18877754165904903, 0.19195805444525538, 0.176144397999212, 0.19294874948176333, 0.1819576571750806, 0.19379769663530355, 0.17434018281794583, 0.20327313114667944, 0.1062055553645499, 0.08512803157143045, 0.07862061206718352, 0.08213919180931917, 0.08725440455894118, 0.10245164494953862, 0.09459992608761292, 0.06913592498106158, 0.09419251927583339]}, "mutation_prompt": null}
{"id": "61101191-03a8-4fad-8255-f21e63b7d05b", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_GA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.num_particles = 40  # Reduced to focus on promising areas\n        self.w = 0.6  # Adjusted inertia for balance between exploration and exploitation\n        self.c1 = 1.5  # Adaptive cognitive component\n        self.c2 = 2.2  # Increased social component to enhance attraction to global best\n        self.mutation_rate = 0.25  # Increased mutation rate for diversity\n        self.crossover_rate = 0.6  # Adjusted crossover rate for improved exploitation\n\n    def __call__(self, func):\n        # Initialize particles\n        positions = np.random.uniform(self.lb, self.ub, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.num_particles, float('inf'))\n        global_best_position = np.zeros(self.dim)\n        global_best_score = float('inf')\n\n        eval_count = 0\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            scores = np.array([func(p) for p in positions])\n            eval_count += self.num_particles\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_scores[better_mask] = scores[better_mask]\n            personal_best_positions[better_mask] = positions[better_mask]\n\n            min_score_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[min_score_idx] < global_best_score:\n                global_best_score = personal_best_scores[min_score_idx]\n                global_best_position = personal_best_positions[min_score_idx]\n\n            # Adaptive cognitive and social components\n            adaptive_c1 = self.c1 * np.exp(-eval_count / (0.4 * self.budget))\n            adaptive_c2 = self.c2 * (1 - np.exp(-eval_count / (0.4 * self.budget)))\n\n            # Update velocities and positions using hybrid PSO-GA update rule\n            r1 = np.random.rand(self.num_particles, self.dim)\n            r2 = np.random.rand(self.num_particles, self.dim)\n            velocities = (self.w * velocities +\n                          adaptive_c1 * r1 * (personal_best_positions - positions) +\n                          adaptive_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.lb, self.ub)\n\n            # Genetic Algorithm operations\n            for i in range(self.num_particles):\n                if np.random.rand() < self.crossover_rate:\n                    idxs = [idx for idx in range(self.num_particles) if idx != i]\n                    partner = positions[np.random.choice(idxs)]\n                    mask = np.random.rand(self.dim) < 0.5\n                    child = np.where(mask, positions[i], partner)\n\n                    if np.random.rand() < self.mutation_rate:\n                        mutation_idx = np.random.randint(self.dim)\n                        mutation_value = np.random.uniform(self.lb, self.ub)\n                        child[mutation_idx] = mutation_value\n\n                    child_score = func(child)\n                    eval_count += 1\n                    if child_score < scores[i]:\n                        positions[i] = child\n                        scores[i] = child_score\n\n                    if eval_count >= self.budget:\n                        break\n\n            # Update global best with the latest evaluations\n            current_best_idx = np.argmin(scores)\n            if scores[current_best_idx] < global_best_score:\n                global_best_score = scores[current_best_idx]\n                global_best_position = positions[current_best_idx]\n\n        return global_best_position", "name": "EnhancedHybridPSO_GA", "description": "Enhanced Hybrid PSO-GA with Dynamic Population Refinement and Targeted Mutation for Accelerated Convergence.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "71679915-b7d2-4246-a9b8-9b30791aa78f", "metadata": {"aucs": [0.8709116999593831, 0.8723138723777221, 0.8768372615335654, 0.8617868929087722, 0.8732786663332638, 0.8700165787014595, 0.7565562986219209, 0.868539258880491, 0.8709766980904352, 0.7164359951709853, 0.7048047712591957, 0.4776950380186241, 0.3855705320648811, 0.6623877477389744, 0.7604071468026499, 0.2925765172942847, 0.6462031836272428, 0.19553392270172443, 0.17303437138306488, 0.2311803368732268, 0.13147514920023173, 0.14639486955092984, 0.35218672427787756, 0.35487832224036875, 0.14866342766770446, 0.32622137780232907, 0.17580831107043648, 0.1364785949220515, 0.13723180340024177, 0.1415672077043013, 0.1034515896336532, 0.18768357811791359, 0.11499926313848663, 0.14052555748747397, 0.1397271088896036, 0.14224280497807062, 0.8572855482713462, 0.8816167955365596, 0.8719308246693213, 0.9193998394786392, 0.914420324363186, 0.868569508913773, 0.9178142773244033, 0.8901375456634961, 0.9104234556450416, 0.44374478233240466, 0.7135385169264723, 0.28224185632107246, 0.6757261041085597, 0.5347767213601308, 0.6924610301299955, 0.2150090318021105, 0.5979667369466203, 0.46334160313151795, 0.3816440509835938, 0.8871688407181226, 0.2215335955350327, 0.2782753108644027, 0.20804701301111983, 0.21414455095505636, 0.17006784993710677, 0.14936435372393353, 0.8927547238016643, 0.12598746301048813, 0.27674670478297914, 0.13402205898302322, 0.1989156862933854, 0.1637406030113836, 0.15700652057774145, 0.3784850467672597, 0.20359559468799404, 0.15199652764569382, 0.19805528150264373, 0.12909579769588853, 0.20974198883930295, 0.13618812474127684, 0.1676843122643138, 0.21199600895034987, 0.1806227083724674, 0.18720342152943903, 0.14286907178205843, 0.011209799583482005, 0.05529339075019002, 9.999999999998899e-05, 0.10832408699422724, 0.04279531077019072, 9.999999999998899e-05, 0.05451701182477431, 0.06287221396818243, 0.011708930366438275, 0.11851476671790695, 0.13042357546193484, 0.08751705868258464, 0.0737520182321394, 0.0674670842998144, 0.07040643281963133, 0.12270959020209427, 0.1635158390187902, 0.11337901101866699, 9.999999999998899e-05, 0.12060053095909329, 0.15135623777850848, 0.1888409906988574, 0.21600226247055165, 0.12214764580372828, 0.1405721141220454, 0.23155685722371033, 0.2630130022138708, 0.1288308910254673, 0.34621738907919575, 0.27668944855796795, 0.07016384558757949, 0.11322576437915599, 0.07104408037199961, 0.20232014360368966, 0.17029684759892205, 0.1043090462902142, 0.5275849797575713, 0.4916609332810673, 0.5484482146725321, 0.6025381266452674, 0.5669340898622877, 0.540035744668264, 0.5335086626702187, 0.5645246800771313, 0.5675543526425648, 0.10220124270145459, 0.17235856712732534, 0.09015062051346068, 0.14918869038205118, 0.14833937478444825, 0.1265665437173411, 0.13741787062809396, 0.10950728317396385, 0.10727360923944129, 0.1522830180351078, 0.19161055363162882, 0.22403061555925252, 0.19664252516112934, 0.19353340288045007, 0.2143631657275058, 0.22899864457304753, 0.20507301754383522, 0.16376887897753145, 0.25889297875502104, 0.30324011541506257, 0.20595125965070904, 0.273450660627921, 0.5507256147127081, 0.33491973351863924, 0.2679250418098513, 0.2868145497806951, 0.5045353871494462, 0.2422052565907501, 0.27251688689126796, 0.22336131551185512, 0.2281901599841637, 0.1532587735635741, 0.23681089449201387, 0.17474848273382282, 0.28874861636043514, 0.26641830685633283, 0.2296548129849213, 0.22112564705591653, 0.4116295558833244, 0.27429704557205437, 0.25393708255507086, 0.20692391605978377, 0.2326379270132466, 0.19551239397576992, 0.2154097795892288, 0.22901002088179723, 0.18804644526911107, 0.18831793637834637, 0.19084701804057014, 0.2870924905379486, 0.19422011941911022, 0.1967708819138012, 0.22007520569987904, 0.20426687081246941, 0.17535235983947695, 0.1956085758016729, 0.18513856718686927, 0.853351435696617, 0.3560060671921448, 0.8757283763917089, 0.8553559198811277, 0.16919964030308454, 0.13442874366711544, 0.5821816685326726, 0.719751672453101, 0.46208413758601397, 0.7491859575447042, 0.20931336361852104, 0.20509540991197794, 0.3883684528344128, 0.499071632722356, 0.3318319362175811, 0.19639170561099495, 0.19765120753207144, 0.1974169342458848, 0.20355066541306377, 0.17175700260853521, 0.17872396251533595, 0.18059120011176089, 0.17875517461522827, 0.196857160154308, 0.1007064099381123, 0.0992299406111311, 0.09211341496887471, 0.08741383495575883, 0.07795395188648158, 0.15317868552169456, 0.07059919688751182, 0.08629132951339868, 0.0918739748027434]}, "mutation_prompt": null}
{"id": "ef36cf99-8827-40a4-b40c-c0a16a7008e9", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_GA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.num_particles = 40  # Reduced to focus on promising areas\n        self.w = 0.6  # Adjusted inertia for balance between exploration and exploitation\n        self.c1 = 1.5  # Adaptive cognitive component\n        self.c2 = 2.2  # Increased social component to enhance attraction to global best\n        self.mutation_rate = 0.25  # Increased mutation rate for diversity\n        self.crossover_rate = 0.6  # Adjusted crossover rate for improved exploitation\n\n    def __call__(self, func):\n        # Initialize particles\n        positions = np.random.uniform(self.lb, self.ub, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.num_particles, float('inf'))\n        global_best_position = np.zeros(self.dim)\n        global_best_score = float('inf')\n\n        eval_count = 0\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            scores = np.array([func(p) for p in positions])\n            eval_count += self.num_particles\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_scores[better_mask] = scores[better_mask]\n            personal_best_positions[better_mask] = positions[better_mask]\n\n            min_score_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[min_score_idx] < global_best_score:\n                global_best_score = personal_best_scores[min_score_idx]\n                global_best_position = personal_best_positions[min_score_idx]\n\n            # Adaptive cognitive and social components\n            adaptive_c1 = self.c1 * np.exp(-eval_count / (0.4 * self.budget))\n            adaptive_c2 = self.c2 * (1 - np.exp(-eval_count / (0.4 * self.budget)))\n\n            # Update velocities and positions using hybrid PSO-GA update rule\n            r1 = np.random.rand(self.num_particles, self.dim)\n            r2 = np.random.rand(self.num_particles, self.dim)\n            velocities = (self.w * velocities +\n                          adaptive_c1 * r1 * (personal_best_positions - positions) +\n                          adaptive_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.lb, self.ub)\n\n            # Genetic Algorithm operations\n            for i in range(self.num_particles):\n                if np.random.rand() < self.crossover_rate:\n                    idxs = [idx for idx in range(self.num_particles) if idx != i]\n                    partner = positions[np.random.choice(idxs)]\n                    mask = np.random.rand(self.dim) < 0.5\n                    child = np.where(mask, positions[i], partner)\n\n                    if np.random.rand() < self.mutation_rate:\n                        mutation_idx = np.random.randint(self.dim)\n                        mutation_value = np.random.uniform(self.lb, self.ub)\n                        child[mutation_idx] = mutation_value\n\n                    child_score = func(child)\n                    eval_count += 1\n                    if child_score < scores[i]:\n                        positions[i] = child\n                        scores[i] = child_score\n\n                    if eval_count >= self.budget:\n                        break\n\n            # Update global best with the latest evaluations\n            current_best_idx = np.argmin(scores)\n            if scores[current_best_idx] < global_best_score:\n                global_best_score = scores[current_best_idx]\n                global_best_position = positions[current_best_idx]\n\n        return global_best_position", "name": "EnhancedHybridPSO_GA", "description": "Enhanced Hybrid PSO-GA with Dynamic Population Refinement and Targeted Mutation for Accelerated Convergence.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "71679915-b7d2-4246-a9b8-9b30791aa78f", "metadata": {"aucs": [0.8709116999593831, 0.8723138723777221, 0.8768372615335654, 0.8617868929087722, 0.8732786663332638, 0.8700165787014595, 0.7565562986219209, 0.868539258880491, 0.8709766980904352, 0.7164359951709853, 0.7048047712591957, 0.4776950380186241, 0.3855705320648811, 0.6623877477389744, 0.7604071468026499, 0.2925765172942847, 0.6462031836272428, 0.19553392270172443, 0.17303437138306488, 0.2311803368732268, 0.13147514920023173, 0.14639486955092984, 0.35218672427787756, 0.35487832224036875, 0.14866342766770446, 0.32622137780232907, 0.17580831107043648, 0.1364785949220515, 0.13723180340024177, 0.1415672077043013, 0.1034515896336532, 0.18768357811791359, 0.11499926313848663, 0.14052555748747397, 0.1397271088896036, 0.14224280497807062, 0.8572855482713462, 0.8816167955365596, 0.8719308246693213, 0.9193998394786392, 0.914420324363186, 0.868569508913773, 0.9178142773244033, 0.8901375456634961, 0.9104234556450416, 0.44374478233240466, 0.7135385169264723, 0.28224185632107246, 0.6757261041085597, 0.5347767213601308, 0.6924610301299955, 0.2150090318021105, 0.5979667369466203, 0.46334160313151795, 0.3816440509835938, 0.8871688407181226, 0.2215335955350327, 0.2782753108644027, 0.20804701301111983, 0.21414455095505636, 0.17006784993710677, 0.14936435372393353, 0.8927547238016643, 0.12598746301048813, 0.27674670478297914, 0.13402205898302322, 0.1989156862933854, 0.1637406030113836, 0.15700652057774145, 0.3784850467672597, 0.20359559468799404, 0.15199652764569382, 0.19805528150264373, 0.12909579769588853, 0.20974198883930295, 0.13618812474127684, 0.1676843122643138, 0.21199600895034987, 0.1806227083724674, 0.18720342152943903, 0.14286907178205843, 0.011209799583482005, 0.05529339075019002, 9.999999999998899e-05, 0.10832408699422724, 0.04279531077019072, 9.999999999998899e-05, 0.05451701182477431, 0.06287221396818243, 0.011708930366438275, 0.11851476671790695, 0.13042357546193484, 0.08751705868258464, 0.0737520182321394, 0.0674670842998144, 0.07040643281963133, 0.12270959020209427, 0.1635158390187902, 0.11337901101866699, 9.999999999998899e-05, 0.12060053095909329, 0.15135623777850848, 0.1888409906988574, 0.21600226247055165, 0.12214764580372828, 0.1405721141220454, 0.23155685722371033, 0.2630130022138708, 0.1288308910254673, 0.34621738907919575, 0.27668944855796795, 0.07016384558757949, 0.11322576437915599, 0.07104408037199961, 0.20232014360368966, 0.17029684759892205, 0.1043090462902142, 0.5275849797575713, 0.4916609332810673, 0.5484482146725321, 0.6025381266452674, 0.5669340898622877, 0.540035744668264, 0.5335086626702187, 0.5645246800771313, 0.5675543526425648, 0.10220124270145459, 0.17235856712732534, 0.09015062051346068, 0.14918869038205118, 0.14833937478444825, 0.1265665437173411, 0.13741787062809396, 0.10950728317396385, 0.10727360923944129, 0.1522830180351078, 0.19161055363162882, 0.22403061555925252, 0.19664252516112934, 0.19353340288045007, 0.2143631657275058, 0.22899864457304753, 0.20507301754383522, 0.16376887897753145, 0.25889297875502104, 0.30324011541506257, 0.20595125965070904, 0.273450660627921, 0.5507256147127081, 0.33491973351863924, 0.2679250418098513, 0.2868145497806951, 0.5045353871494462, 0.2422052565907501, 0.27251688689126796, 0.22336131551185512, 0.2281901599841637, 0.1532587735635741, 0.23681089449201387, 0.17474848273382282, 0.28874861636043514, 0.26641830685633283, 0.2296548129849213, 0.22112564705591653, 0.4116295558833244, 0.27429704557205437, 0.25393708255507086, 0.20692391605978377, 0.2326379270132466, 0.19551239397576992, 0.2154097795892288, 0.22901002088179723, 0.18804644526911107, 0.18831793637834637, 0.19084701804057014, 0.2870924905379486, 0.19422011941911022, 0.1967708819138012, 0.22007520569987904, 0.20426687081246941, 0.17535235983947695, 0.1956085758016729, 0.18513856718686927, 0.853351435696617, 0.3560060671921448, 0.8757283763917089, 0.8553559198811277, 0.16919964030308454, 0.13442874366711544, 0.5821816685326726, 0.719751672453101, 0.46208413758601397, 0.7491859575447042, 0.20931336361852104, 0.20509540991197794, 0.3883684528344128, 0.499071632722356, 0.3318319362175811, 0.19639170561099495, 0.19765120753207144, 0.1974169342458848, 0.20355066541306377, 0.17175700260853521, 0.17872396251533595, 0.18059120011176089, 0.17875517461522827, 0.196857160154308, 0.1007064099381123, 0.0992299406111311, 0.09211341496887471, 0.08741383495575883, 0.07795395188648158, 0.15317868552169456, 0.07059919688751182, 0.08629132951339868, 0.0918739748027434]}, "mutation_prompt": null}
{"id": "0e6082f9-aa02-4dca-919a-785448aaaf2b", "solution": "import numpy as np\n\nclass EnhancedAdaptiveHybridPSO_GA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.num_particles = 50  # Slightly increased population for better exploration\n        self.initial_w = 0.7  # Start with higher inertia and adaptively decrease\n        self.final_w = 0.4  # Lower final inertia to enhance exploitation\n        self.c1 = 2.0  # Adaptive cognitive component for individual exploration\n        self.c2 = 2.4  # Increased social component for improved convergence\n        self.mutation_rate = 0.2  # Balanced mutation rate for diversity\n        self.crossover_rate = 0.7  # Higher crossover rate for better gene mixing\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lb, self.ub, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.num_particles, float('inf'))\n        global_best_position = np.zeros(self.dim)\n        global_best_score = float('inf')\n\n        eval_count = 0\n\n        while eval_count < self.budget:\n            scores = np.array([func(p) for p in positions])\n            eval_count += self.num_particles\n\n            better_mask = scores < personal_best_scores\n            personal_best_scores[better_mask] = scores[better_mask]\n            personal_best_positions[better_mask] = positions[better_mask]\n\n            min_score_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[min_score_idx] < global_best_score:\n                global_best_score = personal_best_scores[min_score_idx]\n                global_best_position = personal_best_positions[min_score_idx]\n\n            # Dynamic inertia weight adaptation\n            w = self.final_w + (self.initial_w - self.final_w) * ((self.budget - eval_count) / self.budget)\n\n            adaptive_c1 = self.c1 * np.exp(-eval_count / (0.3 * self.budget))  # Faster decay\n            adaptive_c2 = self.c2 * (1 - np.exp(-eval_count / (0.3 * self.budget)))  # Faster rise\n\n            r1 = np.random.rand(self.num_particles, self.dim)\n            r2 = np.random.rand(self.num_particles, self.dim)\n            velocities = (w * velocities +\n                          adaptive_c1 * r1 * (personal_best_positions - positions) +\n                          adaptive_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.lb, self.ub)\n\n            for i in range(self.num_particles):\n                if np.random.rand() < self.crossover_rate:\n                    idxs = [idx for idx in range(self.num_particles) if idx != i]\n                    partner = positions[np.random.choice(idxs)]\n                    mask = np.random.rand(self.dim) < 0.5\n                    child = np.where(mask, positions[i], partner)\n\n                    if np.random.rand() < self.mutation_rate:\n                        mutation_idx = np.random.randint(self.dim)\n                        mutation_value = np.random.uniform(self.lb, self.ub)\n                        child[mutation_idx] = mutation_value\n\n                    child_score = func(child)\n                    eval_count += 1\n                    if child_score < scores[i]:\n                        positions[i] = child\n                        scores[i] = child_score\n\n                    if eval_count >= self.budget:\n                        break\n\n            current_best_idx = np.argmin(scores)\n            if scores[current_best_idx] < global_best_score:\n                global_best_score = scores[current_best_idx]\n                global_best_position = positions[current_best_idx]\n\n        return global_best_position", "name": "EnhancedAdaptiveHybridPSO_GA", "description": "Enhanced Adaptive Hybrid PSO-GA with Dynamic Strategy Tuning for Improved Convergence Speed.", "configspace": "", "generation": 77, "fitness": 0.29344636239163474, "feedback": "The algorithm EnhancedAdaptiveHybridPSO_GA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.24.", "error": "", "parent_id": "71679915-b7d2-4246-a9b8-9b30791aa78f", "metadata": {"aucs": [0.805219897940108, 0.8209912767774729, 0.8244168107246539, 0.6922899201566869, 0.5322532680316863, 0.595999105462816, 0.641746612203888, 0.4864514763993163, 0.7830668707471464, 0.611137280703214, 0.20153337183793718, 0.3943948308050018, 0.2107120904071096, 0.5658832499332771, 0.16284452944034233, 0.24905016383653278, 0.11895578807019103, 0.24804045066705072, 0.07588117883572687, 0.14826846711318709, 0.20311872838097367, 0.15047367719896043, 0.10893914198043053, 0.14929663395125337, 0.11364588427490685, 0.13215619076942442, 0.09361942918261923, 0.11332167429084561, 0.13410860566227312, 0.10269002561089768, 0.13234272700987781, 0.134450043058429, 0.12673016102174084, 0.0938453877840808, 0.13091113027380308, 0.16374721833161, 0.9276828199532472, 0.9170822519203955, 0.8722921591808311, 0.8953346116360202, 0.894935876853513, 0.8965522157772667, 0.9232818433206168, 0.9035936142760428, 0.9183468741752808, 0.6099342396561802, 0.5910897271641249, 0.27456890299904757, 0.5153260705430891, 0.2810460600582323, 0.6348382870460152, 0.5399950459235393, 0.61064537195056, 0.42391441225913906, 0.34921662749905924, 0.21606527390500618, 0.22451509736123554, 0.8354401566025558, 0.2698696787632804, 0.8310122575851775, 0.2267751507497926, 0.22990509816344873, 0.3877114147855587, 0.28859207623049465, 0.14365714531291252, 0.1683402866188084, 0.1848356895452764, 0.18615388536007227, 0.19410491498167526, 0.1485208439880511, 0.18220653731829972, 0.19044202995886095, 0.1260137278467386, 0.18232003304563127, 0.1847726224760443, 0.20799836941791117, 0.18835291951407462, 0.19968224788345934, 0.12793081657790117, 0.2132515443618852, 0.22330548685609497, 0.07126682164604115, 0.07708990645604208, 0.0583469359768074, 0.03231967386345569, 0.024929243111252664, 9.999999999998899e-05, 0.02994284233552158, 9.999999999998899e-05, 0.025313821677114934, 0.19507442689839183, 0.07392438217629349, 0.17719853132897478, 0.07220879014570492, 0.05975011031471733, 0.051719627566966686, 0.18739198029724857, 0.14389880717994197, 0.12772311074338782, 0.06665648027509019, 9.999999999998899e-05, 0.17467635219701338, 0.11005336138051369, 0.17367519595400516, 0.08398395183946539, 0.10526849765956903, 0.19944229633965327, 0.06227905912377263, 0.2452260677373279, 0.10711614099927502, 0.11767650822364573, 0.0540787884110705, 0.252337983717843, 0.19928885156767295, 0.14941891334312585, 0.11894411412205608, 0.0771232066420956, 0.5564380586624087, 0.4364956524713649, 0.5293342137966885, 0.5890810697677183, 0.5355384710476262, 0.5026487237866559, 0.5760596535742987, 0.39216914431226, 0.5242530397073119, 0.12468815584891657, 0.10103041606341412, 0.09843254736885176, 0.10922960838901341, 0.10380403711435304, 0.11652332209914507, 0.15207927422194867, 0.12838769729717947, 0.09914203197663496, 0.2882629486497289, 0.19346373679616968, 0.16723289009532671, 0.2731061031171289, 0.1860401078509032, 0.28157246312488704, 0.1882983174749544, 0.3744715922123061, 0.1990193083898807, 0.3135169522411081, 0.3030329753747797, 0.47242083406222557, 0.3768200680201359, 0.4070343878811614, 0.3177741170766979, 0.3545415328361341, 0.428218434658195, 0.3773514526458339, 0.2923947949860759, 0.3432680095653098, 0.29875745634886197, 0.28452927691547114, 0.25061773966782286, 0.25724191236462235, 0.20535442340679022, 0.3691199432971639, 0.26155401712541204, 0.22929629196748746, 0.20892307944551025, 0.15920856593384836, 0.23759869926248545, 0.23979524929982898, 0.2639670404901876, 0.19703233522982877, 0.24143568171849827, 0.20134119082024693, 0.18685248087938067, 0.3135279127467331, 0.18382318556873778, 0.19572343061340314, 0.19966084148950425, 0.18586381184697276, 0.2362440907948249, 0.1998440859315047, 0.1729720874367343, 0.17417127475724192, 0.18390378949065544, 0.18491858120145954, 0.8568647302916031, 0.19773286449109995, 0.8497723697538746, 0.8412067459096284, 0.6111175802172071, 0.8504940602670745, 0.7988154651795629, 0.38211283364740223, 0.5976489566335499, 0.7296731010302522, 0.2076034264272677, 0.16577080847776815, 0.3047074273735776, 0.16313772404298765, 0.7060000262512376, 0.18810154588822703, 0.17607374185990832, 0.19585089079258078, 0.1770608585428326, 0.19578246659589083, 0.1903269293429013, 0.1794216234612902, 0.19548127715243668, 0.18830431112098456, 0.09552538674828315, 0.07675592497322892, 0.07615989884774188, 0.09657322788247069, 0.09359847051804626, 0.08123322370100572, 0.09084004731954542, 0.09937188824716736, 0.08920942545954402]}, "mutation_prompt": null}
{"id": "cc9e9e07-47ae-49ee-b217-2cd3c95a1ae6", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_GA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.num_particles = 40\n        self.w = 0.5  # Reduced inertia for faster convergence\n        self.c1 = 1.7  # Adaptive learning factor adjusted for faster local search\n        self.c2 = 2.0  # Balanced social component to maintain stable convergence\n        self.mutation_rate = 0.3  # Enhanced mutation rate for increased diversity\n        self.crossover_rate = 0.7  # Higher crossover rate to enhance exploitation\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lb, self.ub, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-0.2, 0.2, (self.num_particles, self.dim))  # Increased initial velocity range\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.num_particles, float('inf'))\n        global_best_position = np.zeros(self.dim)\n        global_best_score = float('inf')\n\n        eval_count = 0\n        previously_best_score = float('inf')\n\n        while eval_count < self.budget:\n            scores = np.array([func(p) for p in positions])\n            eval_count += self.num_particles\n\n            better_mask = scores < personal_best_scores\n            personal_best_scores[better_mask] = scores[better_mask]\n            personal_best_positions[better_mask] = positions[better_mask]\n\n            min_score_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[min_score_idx] < global_best_score:\n                global_best_score = personal_best_scores[min_score_idx]\n                global_best_position = personal_best_positions[min_score_idx]\n\n            if global_best_score < previously_best_score:\n                self.w *= 0.98  # Dynamic inertia reduction on improvement\n                previously_best_score = global_best_score\n\n            adaptive_c1 = self.c1 * np.exp(-eval_count / (0.3 * self.budget))\n            adaptive_c2 = self.c2 * (1 - np.exp(-eval_count / (0.3 * self.budget)))\n\n            r1 = np.random.rand(self.num_particles, self.dim)\n            r2 = np.random.rand(self.num_particles, self.dim)\n            velocities = (self.w * velocities +\n                          adaptive_c1 * r1 * (personal_best_positions - positions) +\n                          adaptive_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.lb, self.ub)\n\n            for i in range(self.num_particles):\n                if np.random.rand() < self.crossover_rate:\n                    idxs = [idx for idx in range(self.num_particles) if idx != i]\n                    partner = positions[np.random.choice(idxs)]\n                    mask = np.random.rand(self.dim) < 0.5\n                    child = np.where(mask, positions[i], partner)\n\n                    if np.random.rand() < self.mutation_rate:\n                        mutation_idx = np.random.randint(self.dim)\n                        mutation_value = np.random.uniform(self.lb, self.ub)\n                        child[mutation_idx] = mutation_value\n\n                    child_score = func(child)\n                    eval_count += 1\n                    if child_score < scores[i]:\n                        positions[i] = child\n                        scores[i] = child_score\n\n                    if eval_count >= self.budget:\n                        break\n\n            current_best_idx = np.argmin(scores)\n            if scores[current_best_idx] < global_best_score:\n                global_best_score = scores[current_best_idx]\n                global_best_position = positions[current_best_idx]\n\n        return global_best_position", "name": "EnhancedHybridPSO_GA", "description": "EnhancedHybridPSO_GA with Adaptive Learning Factor and Intelligent Particle Initialization for Superior Convergence Acceleration.", "configspace": "", "generation": 78, "fitness": 0.22971011974385636, "feedback": "The algorithm EnhancedHybridPSO_GA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.16.", "error": "", "parent_id": "71679915-b7d2-4246-a9b8-9b30791aa78f", "metadata": {"aucs": [0.7010012254560164, 0.5143922553690057, 0.7253513409253807, 0.46897723408184055, 0.633307735842687, 0.4785805080176251, 0.5330702937685711, 0.6464940948822295, 0.5534004240901915, 0.583623195684347, 0.019576501977748517, 0.41053209093475584, 0.2515912646364371, 0.1327496107600109, 0.3240250122126842, 0.7547033372562943, 0.32906828794339094, 0.14586069654541733, 0.25902324954949585, 0.40988242720826396, 0.25452748036406514, 0.44936827208975993, 0.15835561443988644, 0.34484415283272196, 0.1756727203476821, 0.09085616982508127, 0.31272488223190265, 0.12452307286153741, 0.14701743087139785, 0.12750314172500277, 0.1361616797951326, 0.13827132786133167, 0.15425935553355752, 0.13796011781868778, 0.20401609159344936, 0.14734107572030064, 0.33364953387497664, 0.22477018311429497, 0.19631644127928372, 0.4203376916131325, 0.27723781819817406, 0.261469376878103, 0.27242069623213494, 0.20537506130488914, 0.3476462495458561, 0.16440791364758456, 0.1995780876457529, 0.17350669195666957, 0.18058847891137886, 0.22134644339830278, 0.157720513441713, 0.18692616062857947, 0.12792437652538624, 0.21008462020374907, 0.38931047610479663, 0.16884568187449245, 0.14592573889787452, 0.27724070433016124, 0.2756575982834488, 0.2720627384878129, 0.20466728083829255, 0.17237001812807362, 0.6888017980070456, 0.27288769005645785, 0.4281625103229133, 0.17008036064249976, 0.12569101481205602, 0.17558014857789817, 0.19906693162765632, 0.128838812896224, 0.3354065285780422, 0.12405916646031312, 0.1339074955530004, 0.1261286641428907, 0.13603798062490935, 0.12455256719377028, 0.13750689456403142, 0.13309888726698682, 0.12928712399992603, 0.13472420623196957, 0.12555267144094773, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.031076337880906246, 9.999999999998899e-05, 9.999999999998899e-05, 0.015495299579700972, 0.0006127084564304663, 9.999999999998899e-05, 0.11536237383479842, 0.08903787208748726, 0.12779038236825002, 0.053162305005875155, 0.054182668857835736, 0.04464828334170812, 0.18276746148973078, 0.14239716748108622, 0.12057347452943579, 0.23141540529447713, 0.11872918538240718, 0.10330480717055812, 0.16021955900880147, 0.10694649596586736, 0.1530049524900896, 0.3174450511220023, 9.999999999998899e-05, 0.11398816911804055, 0.13124234470249863, 0.025076978939245764, 0.06574934751073414, 0.07565435043749225, 0.16636693394977098, 0.05664127419757936, 0.08361985036151343, 0.07310955606752212, 0.13027941903412887, 0.4145356679321178, 0.388989116180926, 0.39711850810772986, 0.376756196023027, 0.39426039118780587, 0.42593391417699467, 0.4303154523084901, 0.35000582214474185, 0.35631309414527923, 0.12802990936018888, 0.11438261208740663, 0.09223089472142365, 0.15971276793737366, 0.0945201606618935, 0.10884400199435129, 0.07022540965164537, 0.11685023698444097, 0.10583958484261202, 0.16795412863824255, 0.1722997999663468, 0.2977624989396721, 0.14430151152713566, 0.22249648295132585, 0.2279150501204753, 0.1708571361884622, 0.22333624138299724, 0.18311837261717323, 0.29135481488186865, 0.36294433285565286, 0.1844783589259802, 0.35057950749692457, 0.22523614053214436, 0.2429254617031612, 0.23589871311754962, 0.27741729882367283, 0.2387574013838636, 0.25263552077484097, 0.25054327566777024, 0.1712642920556562, 0.25300659756299504, 0.279379541027562, 0.2672441504936208, 0.29605765550639196, 0.232001388118927, 0.21041707549773103, 0.2136123725452661, 0.21116275505419457, 0.22877210147083527, 0.2606258291886687, 0.27848457905730684, 0.19241041275333293, 0.21778455578421785, 0.23875138499887427, 0.22882750535662122, 0.19110079826299176, 0.2166971217823631, 0.2251384057528163, 0.20737518320273318, 0.20482450709280609, 0.20607615119050204, 0.24657900518121445, 0.4024705337217944, 0.4975391446694052, 0.8136847355505156, 0.1839737341141635, 0.4884303904314482, 0.9144779368300887, 0.19852040265280535, 0.785989457945138, 0.16616706266301484, 0.43209699598691764, 0.603456118565801, 0.592563467251732, 0.15555706505502598, 0.2972598065113834, 0.20427766351063192, 0.20423561288695502, 0.149996976164684, 0.09284004085182018, 0.16777011553843224, 0.16460385964604374, 0.20935726587504244, 0.18885326782684564, 0.18391176995108804, 0.21217137989432877, 0.20171235669305976, 0.18605748686866597, 0.19087289252656636, 0.17849750686356547, 0.1987473778023655, 0.09522219975022395, 0.08746386153307972, 0.08863295299819562, 0.09258940647000835, 0.10469895057309098, 0.11654356741513472, 0.08637553422016098, 0.09576236678862227, 0.0927640251294779]}, "mutation_prompt": null}
{"id": "7e81df9c-9565-42a1-9b19-5d70a4a3090f", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_GA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.num_particles = 50  # Slightly increased number of particles for better diversity\n        self.w = 0.5  # Lower inertia to encourage faster convergence\n        self.c1 = 2.0  # Increased cognitive component for stronger local search\n        self.c2 = 2.0  # Balanced social component\n        self.mutation_rate = 0.2  # Reduced mutation rate to maintain stability\n        self.crossover_rate = 0.7  # Increased crossover rate for better exploration\n\n    def __call__(self, func):\n        # Initialize particles\n        positions = np.random.uniform(self.lb, self.ub, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.num_particles, float('inf'))\n        global_best_position = np.zeros(self.dim)\n        global_best_score = float('inf')\n        \n        cluster_centers = positions[:5]  # Initial clusters from first few particles\n\n        eval_count = 0\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            scores = np.array([func(p) for p in positions])\n            eval_count += self.num_particles\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_scores[better_mask] = scores[better_mask]\n            personal_best_positions[better_mask] = positions[better_mask]\n\n            min_score_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[min_score_idx] < global_best_score:\n                global_best_score = personal_best_scores[min_score_idx]\n                global_best_position = personal_best_positions[min_score_idx]\n\n            # Adaptive parameters based on iteration\n            dynamic_w = self.w * (1 - eval_count / self.budget)\n            dynamic_c1 = self.c1 * (1 - eval_count / self.budget)\n            dynamic_c2 = self.c2 * eval_count / self.budget\n\n            # Update velocities and positions using hybrid PSO-GA update rule\n            r1 = np.random.rand(self.num_particles, self.dim)\n            r2 = np.random.rand(self.num_particles, self.dim)\n            velocities = (dynamic_w * velocities +\n                          dynamic_c1 * r1 * (personal_best_positions - positions) +\n                          dynamic_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.lb, self.ub)\n\n            # Genetic Algorithm operations with clustering influence\n            for i in range(self.num_particles):\n                if np.random.rand() < self.crossover_rate:\n                    partner = cluster_centers[np.random.choice(len(cluster_centers))]\n                    mask = np.random.rand(self.dim) < 0.5\n                    child = np.where(mask, positions[i], partner)\n\n                    if np.random.rand() < self.mutation_rate:\n                        mutation_idx = np.random.randint(self.dim)\n                        mutation_value = np.random.uniform(self.lb, self.ub)\n                        child[mutation_idx] = mutation_value\n\n                    child_score = func(child)\n                    eval_count += 1\n                    if child_score < scores[i]:\n                        positions[i] = child\n                        scores[i] = child_score\n\n                    if eval_count >= self.budget:\n                        break\n\n            # Update cluster centers periodically\n            if eval_count % (self.num_particles * 5) == 0:\n                cluster_centers = positions[np.argsort(scores)[:5]]\n\n            # Update global best with the latest evaluations\n            current_best_idx = np.argmin(scores)\n            if scores[current_best_idx] < global_best_score:\n                global_best_score = scores[current_best_idx]\n                global_best_position = positions[current_best_idx]\n\n        return global_best_position", "name": "EnhancedHybridPSO_GA", "description": "Enhanced Hybrid PSO-GA with Adaptive Learning Rates and Population Clustering for Improved Convergence Speed.", "configspace": "", "generation": 79, "fitness": 0.179640323567413, "feedback": "The algorithm EnhancedHybridPSO_GA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.12.", "error": "", "parent_id": "71679915-b7d2-4246-a9b8-9b30791aa78f", "metadata": {"aucs": [0.2965877426045448, 0.5199302206252077, 0.3678413060567335, 0.3290306124888651, 0.31226437760524595, 0.6076477405475187, 0.2689969692878049, 0.36792013255162104, 0.28644263810178994, 0.20066178047338967, 0.05354480926788274, 9.999999999998899e-05, 0.15112932798578038, 0.18450509597033538, 0.026898120649955337, 0.06397651823358752, 0.025967463644557265, 0.202265253917565, 0.14204447525516406, 0.10065352798128713, 0.154107851822062, 0.13515963248525964, 0.10096457471845044, 0.10211934336653972, 0.11303262878206188, 0.15738393778616633, 0.13297948854082164, 0.09933899029001536, 0.07872303202715614, 0.09253452021806863, 0.10300897592494507, 0.08077437198207826, 0.11129937060070005, 0.11543771514258094, 0.08943362107203867, 0.0862216822353552, 0.16346444518010506, 0.11056497908309171, 0.12529028005667098, 0.12974685561231158, 0.1232146808665977, 0.10948409142323523, 0.1264795923949772, 0.11667775967579475, 0.09350030369205109, 0.17797844210620128, 0.11009442281816195, 0.12055077421050753, 0.16688432705698653, 0.08652421811395328, 0.10999710547090358, 0.16580910124542347, 0.16093699722379462, 0.14392579723423282, 0.218997698147253, 0.21260029861436613, 0.3341704517140828, 0.3102740893951135, 0.6454019649194838, 0.20706577121580416, 0.1465995595020424, 0.21892239795404644, 0.11917873850234428, 0.16682544883412953, 0.21573872941959937, 0.14591209169651176, 0.18443352433837334, 0.1420935321341662, 0.12913550859133505, 0.23188393917767314, 0.13116245151574835, 0.07707866830663246, 0.16783514925236143, 0.13629983071808216, 0.11900648930976132, 0.09842960687875535, 0.12878240578659084, 0.14956764047566518, 0.1619612328401996, 0.12726371046098006, 0.1321302933553552, 0.18909290251731015, 0.004532194522054334, 9.999999999998899e-05, 0.0435718223033853, 0.06689546659803769, 9.999999999998899e-05, 0.003686255570230279, 9.999999999998899e-05, 0.03918400263353472, 0.1348384632316385, 0.1682944324035247, 0.13280916729321746, 0.07042706209783067, 0.09549303617683746, 0.07178023824320356, 0.15376443930693717, 0.16009681741519166, 0.11698786504298386, 9.999999999998899e-05, 9.999999999998899e-05, 0.2721658677197102, 9.999999999998899e-05, 0.010911110973585325, 0.07688003410261623, 9.999999999998899e-05, 9.999999999998899e-05, 0.0858561688447157, 0.023230074386947464, 0.055354024121136214, 0.1882081427682527, 0.0009743357271696507, 0.09481568882123137, 0.06921969649951731, 0.0875681934484317, 0.03538658236619863, 0.03684627017872322, 0.33212027849352865, 0.31152568937426395, 0.3133727545043187, 0.31589953798853, 0.31621666970270257, 0.3848259808041702, 0.30009377422777406, 0.3452236259324203, 0.2742270267817981, 0.10902072697990606, 0.11328750177333224, 0.09770793064344618, 0.07312777764009604, 0.14353351370023915, 0.14167021212484054, 0.11342282863934083, 0.11535569734537854, 0.11991361943345036, 0.15259998324354385, 0.1669140838489911, 0.18136915114946006, 0.19676549561218504, 0.1617393215316979, 0.23397697918930638, 0.16513460316185524, 0.1433355614768398, 0.16650582885962617, 0.324216314636642, 0.30188815962852944, 0.2919044825440801, 0.22375221272244794, 0.24710259835311899, 0.28752123162470267, 0.2975022747984384, 0.23738537426903472, 0.2833582423565898, 0.1490144617848751, 0.22716120578009658, 0.2513264932541157, 0.27152712883631613, 0.25060811938441807, 0.26266933942349513, 0.16406891693768122, 0.20573008243210955, 0.19701269304703095, 0.2433883688944627, 0.19134923139511906, 0.2554473734484145, 0.1977647762576723, 0.20249915859952483, 0.24866362811997578, 0.20778308557201752, 0.1779367612320948, 0.23704464957348792, 0.18928794071892519, 0.16789442907449215, 0.2046597731013624, 0.17938407595479877, 0.17855944273610636, 0.18517172810403348, 0.19290834937451795, 0.18543443808878723, 0.2220070456762524, 0.38730326145603544, 0.17313350883921685, 0.36536774425045093, 0.5736827943394771, 0.5902520856010952, 0.41474825516672365, 0.5075341343000288, 0.7055041731959508, 0.1650302904653641, 0.576415436075314, 0.3073322798316518, 0.19368924803736653, 0.3421250135993128, 0.16110977550091155, 0.18937203292467308, 0.16026622434544024, 0.38019437845132154, 0.2998851812280423, 0.1863512190198343, 0.19117907252428246, 0.18731622187500796, 0.17679501014685717, 0.18146064064562428, 0.22527976130519056, 0.1718312777541452, 0.19223150986126647, 0.18147733015136502, 0.08099179979393434, 0.08433704163547262, 0.12852084148970877, 0.10251358757921336, 0.08421795874072469, 0.1038270257343562, 0.07891363750998792, 0.08354522903476014, 0.08828156417353783]}, "mutation_prompt": null}
{"id": "e83de800-dd3f-483b-9298-25a9f850e624", "solution": "import numpy as np\n\nclass AdaptiveQuantumHybridPSO_GA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.num_particles = 36  # Slightly reduced to focus on quality\n        self.w = 0.5  # Reduced inertia for quicker convergence\n        self.c1 = 1.8  # Increased for enhanced cognitive focus early on\n        self.c2 = 2.0  # Slight decrease to balance with c1\n        self.mutation_rate = 0.2  # Maintained for diversity\n        self.crossover_rate = 0.65  # Increased for better exploration\n        self.quantum_factor = 0.02  # New factor for quantum perturbation\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lb, self.ub, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.num_particles, float('inf'))\n        global_best_position = np.zeros(self.dim)\n        global_best_score = float('inf')\n\n        eval_count = 0\n\n        while eval_count < self.budget:\n            scores = np.array([func(p) for p in positions])\n            eval_count += self.num_particles\n\n            better_mask = scores < personal_best_scores\n            personal_best_scores[better_mask] = scores[better_mask]\n            personal_best_positions[better_mask] = positions[better_mask]\n\n            min_score_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[min_score_idx] < global_best_score:\n                global_best_score = personal_best_scores[min_score_idx]\n                global_best_position = personal_best_positions[min_score_idx]\n\n            adaptive_c1 = self.c1 * (1 - eval_count / self.budget)\n            adaptive_c2 = self.c2 * (eval_count / self.budget)\n\n            r1 = np.random.rand(self.num_particles, self.dim)\n            r2 = np.random.rand(self.num_particles, self.dim)\n            velocities = (self.w * velocities +\n                          adaptive_c1 * r1 * (personal_best_positions - positions) +\n                          adaptive_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.lb, self.ub)\n\n            if np.random.rand() < self.quantum_factor:\n                quantum_perturbation = np.random.uniform(self.lb, self.ub, (self.num_particles, self.dim))\n                positions = positions + quantum_perturbation\n                positions = np.clip(positions, self.lb, self.ub)\n\n            for i in range(self.num_particles):\n                if np.random.rand() < self.crossover_rate:\n                    idxs = [idx for idx in range(self.num_particles) if idx != i]\n                    partner = positions[np.random.choice(idxs)]\n                    mask = np.random.rand(self.dim) < 0.5\n                    child = np.where(mask, positions[i], partner)\n\n                    if np.random.rand() < self.mutation_rate:\n                        mutation_idx = np.random.randint(self.dim)\n                        mutation_value = np.random.uniform(self.lb, self.ub)\n                        child[mutation_idx] = mutation_value\n\n                    child_score = func(child)\n                    eval_count += 1\n                    if child_score < scores[i]:\n                        positions[i] = child\n                        scores[i] = child_score\n\n                    if eval_count >= self.budget:\n                        break\n\n            current_best_idx = np.argmin(scores)\n            if scores[current_best_idx] < global_best_score:\n                global_best_score = scores[current_best_idx]\n                global_best_position = positions[current_best_idx]\n\n        return global_best_position", "name": "AdaptiveQuantumHybridPSO_GA", "description": "Adaptive Quantum-Inspired Hybrid PSO-GA with Dynamic Parameter Scaling to Enhance Convergence.", "configspace": "", "generation": 80, "fitness": 0.25756599256318546, "feedback": "The algorithm AdaptiveQuantumHybridPSO_GA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.18.", "error": "", "parent_id": "71679915-b7d2-4246-a9b8-9b30791aa78f", "metadata": {"aucs": [0.47292626918512737, 0.43108416930183036, 0.4063338851511561, 0.5590891283526903, 0.4094203145505064, 0.518467854728917, 0.8594645965072167, 0.6559632423576838, 0.7231113918189211, 0.34545798427472973, 0.3313212760237766, 0.4332389091076385, 0.20548263789934085, 0.12783552579262447, 0.4132628786961223, 0.303109458436453, 0.4268765611881812, 0.06042665875662501, 0.40341900589514224, 0.16058115203979084, 0.11684633400993494, 0.151184352879699, 0.1479339659148855, 0.40495587379417175, 0.16596230509898413, 0.12560708358645356, 0.129315768536293, 0.1374157523823416, 0.12010571983493612, 0.0994813415743303, 0.11995808774181738, 0.11430190666169981, 0.11897389900898503, 0.14380053728551012, 0.1453659796810267, 0.13606387127792807, 0.2537039538923981, 0.38573811847121664, 0.8900870423819671, 0.29585786855015217, 0.42283579095848767, 0.8503715285397714, 0.269150752718463, 0.4016619336662286, 0.8416098002640792, 0.18024020303944122, 0.16571335480053473, 0.4687870769807574, 0.2571334828660786, 0.14050037164347073, 0.38947950961610456, 0.22912567609710022, 0.1382452507171078, 0.4128467858521294, 0.23938230965284668, 0.21926886480225716, 0.3140791141608894, 0.267147731169745, 0.8354611215159782, 0.3537412583021222, 0.17108762420710077, 0.22505764706330833, 0.8496163801840716, 0.1259542180469898, 0.23688600428808515, 0.31737965783609656, 0.34732656238730053, 0.1563813263192867, 0.14518331462884693, 0.3724107437075128, 0.5308703056544506, 0.150250708441646, 0.29486343503428236, 0.13187772760853989, 0.17029368759575814, 0.13151480037260443, 0.14777045789053922, 0.14661934809931443, 0.15659318863034444, 0.12708194098454972, 0.15115215626306022, 9.999999999998899e-05, 9.999999999998899e-05, 0.01893380849474835, 0.0712179475087632, 0.05706150249169861, 0.008226278271410425, 0.03324677216158145, 0.001264598292007535, 0.11591467271987843, 0.17229307679512207, 0.13509567659256516, 0.10430731825475481, 0.0707130611922705, 0.07201277371355552, 0.08728038391015158, 0.16080904080117286, 0.14856389538338322, 0.10819354242616186, 0.1343785362730392, 0.29736934912491064, 0.10158216547534171, 0.09228035450398842, 0.14301550455197742, 0.11285357485817571, 9.999999999998899e-05, 0.17765807526378308, 0.06730690282444285, 0.1918995244595607, 0.21826348407527485, 0.1355590619972341, 0.13123964506000774, 0.1584246505662843, 0.2849708156774383, 0.08930338504519875, 0.1260155270045703, 0.33217652271524645, 0.4146116919865215, 0.4008318928161191, 0.4726196304631618, 0.34074437170941774, 0.5659746528265639, 0.515694840110787, 0.3895724435463097, 0.4819486224886347, 0.481629672463165, 0.11701929301436054, 0.12124621364399513, 0.12467562555474065, 0.08702599936434585, 0.09728425533329266, 0.13427676248812292, 0.13658693314385106, 0.1407155439476241, 0.12516760995510556, 0.1420893597742383, 0.17371109734489454, 0.13586170055888125, 0.27296518144408166, 0.1762582450427571, 0.18381743136484185, 0.20697155025203795, 0.1958647766633439, 0.2085899856506841, 0.26822258369230323, 0.24705588714476168, 0.3030137206069846, 0.27385084061467346, 0.2945104722266425, 0.4097717544743922, 0.33143356969300053, 0.346252454013643, 0.47091137025047936, 0.2385308262207022, 0.2720204504206275, 0.23916267786952916, 0.2736689464086972, 0.2601830663347737, 0.20055533382388357, 0.2334385472181164, 0.19493665258226134, 0.19630883328499327, 0.2143193886114486, 0.2059221237090374, 0.21343794535421756, 0.2115241562782102, 0.24442042607069903, 0.19525203786297807, 0.24160996644536203, 0.21579311384679156, 0.21745943414876445, 0.21663789002884704, 0.19527540257087017, 0.18429600312888716, 0.23099132903745845, 0.214786872242417, 0.17915092453656944, 0.18819844313340084, 0.21356579446850643, 0.2188613556342438, 0.7845114290048402, 0.16503646457684884, 0.8002488252499365, 0.5723907905019199, 0.7305837329076053, 0.7829428961649694, 0.46476850946694925, 0.5277015780013468, 0.16491530200697868, 0.3667758149935435, 0.31413061382975493, 0.627133639644329, 0.3753555743566557, 0.20016297719380383, 0.5208810637807707, 0.332179511434612, 0.3752641485946975, 0.1969839803233212, 0.1742249274279034, 0.18807606902326068, 0.1861255683482359, 0.19348180327417686, 0.18807795630183088, 0.1775109075274156, 0.1804273337829776, 0.2019920613546602, 0.18692205700671571, 0.11574969568328819, 0.12180107000936424, 0.09079555907840586, 0.08480713752162283, 0.09818441710050052, 0.08455931593691568, 0.08740632076725285, 0.08769812867413618, 0.09314399213326907]}, "mutation_prompt": null}
{"id": "ad39a316-1d7a-4f55-a49c-83aa37be821b", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_GA_Adaptive:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.num_particles = 50  # Slightly increased population for better diversity\n        self.w_initial = 0.7  # Start with higher inertia, linearly decreasing\n        self.w_final = 0.3\n        self.c1 = 1.2  # Rebalanced cognitive component\n        self.c2 = 2.5  # Enhanced social component for stronger convergence\n        self.mutation_rate = 0.3  # Increased mutation for exploration\n        self.crossover_rate = 0.7  # Improved crossover rate for better exploitation\n\n    def __call__(self, func):\n        # Initialize particles\n        positions = np.random.uniform(self.lb, self.ub, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.num_particles, float('inf'))\n        global_best_position = np.zeros(self.dim)\n        global_best_score = float('inf')\n\n        eval_count = 0\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            scores = np.array([func(p) for p in positions])\n            eval_count += self.num_particles\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_scores[better_mask] = scores[better_mask]\n            personal_best_positions[better_mask] = positions[better_mask]\n\n            min_score_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[min_score_idx] < global_best_score:\n                global_best_score = personal_best_scores[min_score_idx]\n                global_best_position = personal_best_positions[min_score_idx]\n\n            # Adaptive inertia weight\n            w = self.w_initial - ((self.w_initial - self.w_final) * eval_count / self.budget)\n\n            # Update velocities and positions using hybrid PSO-GA update rule\n            r1 = np.random.rand(self.num_particles, self.dim)\n            r2 = np.random.rand(self.num_particles, self.dim)\n            velocities = (w * velocities +\n                          self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.lb, self.ub)\n\n            # Genetic Algorithm operations with enhanced selection\n            for i in range(self.num_particles):\n                if np.random.rand() < self.crossover_rate:\n                    idxs = np.random.choice(self.num_particles, 2, replace=False)\n                    partner1, partner2 = positions[idxs]\n                    mask = np.random.rand(self.dim) < 0.5\n                    child = np.where(mask, partner1, partner2)\n\n                    if np.random.rand() < self.mutation_rate:\n                        mutation_idx = np.random.randint(self.dim)\n                        mutation_value = np.random.uniform(self.lb, self.ub)\n                        child[mutation_idx] = mutation_value\n\n                    child_score = func(child)\n                    eval_count += 1\n                    if child_score < scores[i]:\n                        positions[i] = child\n                        scores[i] = child_score\n\n                    if eval_count >= self.budget:\n                        break\n\n            # Update global best with the latest evaluations\n            current_best_idx = np.argmin(scores)\n            if scores[current_best_idx] < global_best_score:\n                global_best_score = scores[current_best_idx]\n                global_best_position = positions[current_best_idx]\n\n        return global_best_position", "name": "EnhancedHybridPSO_GA_Adaptive", "description": "Hybrid PSO-GA with Adaptive Swarm Dynamics and Enhanced Selection for Accelerated Convergence.", "configspace": "", "generation": 81, "fitness": 0.15261708438755117, "feedback": "The algorithm EnhancedHybridPSO_GA_Adaptive got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.20.", "error": "", "parent_id": "71679915-b7d2-4246-a9b8-9b30791aa78f", "metadata": {"aucs": [0.3413147710161254, 0.24627540582252183, 0.24771324675277673, 0.15300221685032522, 0.41810260957211176, 0.4636984399310824, 0.16957005702458972, 0.3528674561733265, 0.1468414828760477, 9.999999999998899e-05, 9.999999999998899e-05, 0.005765785842019255, 0.0012433665705097185, 9.999999999998899e-05, 9.999999999998899e-05, 0.02334382079026165, 0.11198413838181098, 9.999999999998899e-05, 0.06088802851289743, 0.02039037185352266, 0.07607757584223307, 0.05151403909288055, 0.08586636927564595, 0.08639644561295468, 0.10110796142232559, 0.06742784764883314, 0.08103201232949597, 0.04134081341377749, 0.04686764366304175, 0.05346105302625748, 0.038574626224837316, 0.029988743892038427, 0.02292906883893031, 0.07281935183051824, 0.049276143263321526, 0.043207151592035586, 0.98627152349881, 0.9796534709195412, 0.9870793931855417, 0.9712834509054975, 0.9808420488796719, 0.9723122116381452, 0.9794907122063105, 0.9869308511968468, 0.9796426404016874, 0.1717289104298132, 0.09690624859049402, 0.05696910596841276, 0.1223963878255887, 0.11717556525181005, 0.12969384926105287, 0.06652188016700655, 0.16566923288728563, 0.13574203350179648, 0.17060377752250788, 0.27604707654236793, 0.14384451064034676, 0.1698595800949152, 0.1957010161849635, 0.19520395264247004, 0.10850158911778585, 0.10797034130535432, 0.13514493432273122, 0.05845902470610653, 0.01205339624076529, 0.09056479983051391, 0.03715800694938354, 9.999999999998899e-05, 0.07759883326727068, 0.07475302727524558, 0.014072841152222515, 0.0002976993743082357, 0.08921675994481537, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037592631957568123, 9.999999999998899e-05, 0.00196349130681428, 0.07185745880350736, 0.06975356749421258, 0.06101356576763706, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013293969906569503, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004522808089142516, 0.06130948329337804, 0.0037670727091027034, 0.022500753972048315, 0.038566420352125874, 0.0008247013717472829, 0.026626284589666316, 0.03132457951454326, 0.021861798955439382, 0.020238812553386554, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026470817968594074, 0.03058833376896486, 0.019095185752107335, 9.999999999998899e-05, 9.999999999998899e-05, 0.0487864406801668, 0.0058050460158408645, 0.004619924121844976, 0.0005530736055953112, 0.030029692741332825, 0.12495819115180051, 0.019026849818389757, 0.045466397598942554, 0.03375330590450376, 0.03204748345356079, 0.23904805007291574, 0.34255129664217276, 0.3052748019169591, 0.36030662083579845, 0.4158986454742055, 0.27367958056605257, 0.22319920122588466, 0.2264030272059323, 0.25814237163715725, 0.06133798751250519, 0.047618629497190534, 0.08803399178999516, 0.0721849975100115, 0.05408255150836683, 0.07133996258222453, 0.04576703046475561, 0.05343590484147587, 0.03846978061677675, 0.1226596364118917, 0.1571020138450071, 0.17099989463248044, 0.1728454279242002, 0.18264954543210066, 0.25992698190532393, 0.24927757729204403, 0.1405887974533402, 0.1493301473396632, 0.221521729290306, 0.17989804477512972, 0.21043853444713045, 0.21429088766258308, 0.1781770070037455, 0.22578055530922736, 0.15475663100944603, 0.19494277801224447, 0.2333566531299046, 0.1610309783254812, 0.14217381766213166, 0.14213632807332, 0.12394349245607605, 0.09392101198361924, 0.15682406223396972, 0.15029757011399347, 0.19731490874795798, 0.14308723881813534, 0.16610357878399096, 0.1589144948673038, 0.16730053936324019, 0.17346243658090077, 0.1742256223294737, 0.18604107901351896, 0.20268707874831426, 0.16714128944432083, 0.14098697417386596, 0.1698625150333366, 0.08034194841203202, 0.16029434074622473, 0.15580049044263578, 0.1677555140838729, 0.17287708577466365, 0.13883837184044145, 0.14678875755359422, 0.19576844765108958, 0.4513705164397376, 0.3628722637195195, 0.1522085745036884, 0.16859075438448146, 0.15584877352170856, 0.1282742478542105, 0.14007978632987672, 0.15034961247154954, 0.2802055970031039, 0.1727082607477639, 0.16735278126902509, 0.1595959743808909, 0.10609856813923157, 0.29106009439517566, 0.1244012807654552, 0.18360662256698135, 0.196188263735804, 0.17712727990020993, 0.19465234878342919, 0.1693284219152369, 0.17012386133798374, 0.19715725556674002, 0.18321613545690585, 0.18073137179064414, 0.18830803059512868, 0.1825401401993737, 0.17946152327331688, 0.05201865318071508, 0.06503871452339971, 0.05604096766352251, 0.05132291223813956, 0.05463480950246835, 0.058041137981871715, 0.07385159350952075, 0.043359778909796254, 0.03555256789563066]}, "mutation_prompt": null}
{"id": "9ac60edc-eb97-4001-8363-b2393374cc48", "solution": "import numpy as np\n\nclass AdaptiveHybridPSO_GA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.num_particles = 35  # Reduced to concentrate on elite regions\n        self.w = 0.7  # Adaptive inertia for dynamic balance\n        self.c1 = 1.7  # Sharpened cognitive component\n        self.c2 = 2.0  # Moderated social component for convergence control\n        self.mutation_rate = 0.2  # Slightly reduced mutation rate\n        self.crossover_rate = 0.7  # Raised crossover rate for better search\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lb, self.ub, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.num_particles, float('inf'))\n        global_best_position = np.zeros(self.dim)\n        global_best_score = float('inf')\n\n        eval_count = 0\n\n        while eval_count < self.budget:\n            scores = np.array([func(p) for p in positions])\n            eval_count += self.num_particles\n\n            better_mask = scores < personal_best_scores\n            personal_best_scores[better_mask] = scores[better_mask]\n            personal_best_positions[better_mask] = positions[better_mask]\n\n            min_score_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[min_score_idx] < global_best_score:\n                global_best_score = personal_best_scores[min_score_idx]\n                global_best_position = personal_best_positions[min_score_idx]\n\n            adaptive_w = self.w * (0.5 * (1 + np.tanh(10 * (0.5 - eval_count / self.budget))))\n            adaptive_c1 = self.c1 * (1 - np.exp(-5 * eval_count / self.budget))\n            adaptive_c2 = self.c2 * np.exp(-5 * (1 - eval_count / self.budget))\n\n            r1 = np.random.rand(self.num_particles, self.dim)\n            r2 = np.random.rand(self.num_particles, self.dim)\n            velocities = (adaptive_w * velocities +\n                          adaptive_c1 * r1 * (personal_best_positions - positions) +\n                          adaptive_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.lb, self.ub)\n\n            for i in range(self.num_particles):\n                if np.random.rand() < self.crossover_rate:\n                    idxs = [idx for idx in range(self.num_particles) if idx != i]\n                    partner = positions[np.random.choice(idxs)]\n                    mask = np.random.rand(self.dim) < 0.5\n                    child = np.where(mask, positions[i], partner)\n\n                    if np.random.rand() < self.mutation_rate:\n                        mutation_idx = np.random.randint(self.dim)\n                        mutation_value = global_best_position[mutation_idx] + \\\n                                         np.random.normal(0, 0.1)\n                        child[mutation_idx] = np.clip(mutation_value, self.lb, self.ub)\n\n                    child_score = func(child)\n                    eval_count += 1\n                    if child_score < scores[i]:\n                        positions[i] = child\n                        scores[i] = child_score\n\n                    if eval_count >= self.budget:\n                        break\n\n            current_best_idx = np.argmin(scores)\n            if scores[current_best_idx] < global_best_score:\n                global_best_score = scores[current_best_idx]\n                global_best_position = positions[current_best_idx]\n\n        return global_best_position", "name": "AdaptiveHybridPSO_GA", "description": "Adaptive Hybrid PSO-GA with Enhanced Exploration-Exploitation Balance and Memory-Driven Learning for Rapid Convergence.", "configspace": "", "generation": 82, "fitness": 0.22714558252787972, "feedback": "The algorithm AdaptiveHybridPSO_GA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.16.", "error": "", "parent_id": "71679915-b7d2-4246-a9b8-9b30791aa78f", "metadata": {"aucs": [0.5764807875299307, 0.5631179381372233, 0.6565691988825784, 0.549941000876455, 0.7194012628541483, 0.6570849561584117, 0.6246537217435645, 0.6154523110101751, 0.7040358945851999, 0.3850143815486413, 0.11229567366411086, 0.09749269086925594, 0.22534528801866527, 0.36907110166592816, 0.17698933438912812, 0.18984951717438925, 0.19875422505179563, 0.15511566702915902, 0.14753715808063794, 0.15882182635184638, 0.15548483124107026, 0.1481868333850449, 0.1473123904097554, 0.16640884222080565, 0.1630660307731805, 0.11800784663208574, 0.1378499779241834, 0.1385526399382193, 0.1252913409968256, 0.13479436454506066, 0.11201542625117034, 0.15821156394723113, 0.17607335661357082, 0.10593734271749977, 0.1262071569160369, 0.12625859742004852, 0.5909119376167977, 0.7731213423620296, 0.40099657509346465, 0.7944578967416853, 0.6510064849541819, 0.2781152729873071, 0.6966991760774196, 0.7068528801400015, 0.3859745961178098, 0.232947438405823, 0.1782203819149326, 0.10091367981678434, 0.20318542550246776, 0.23834604967717965, 0.15104817322717157, 0.1156587045691011, 0.11190905948016239, 0.19019196573659425, 0.25248980021747014, 0.19302333646357217, 0.19058155993918013, 0.18664963239797294, 0.2429882395419002, 0.20252635483041104, 0.2134126056852318, 0.32242436850838985, 0.36539808097063353, 0.19910275350620021, 0.13696998800869786, 0.27529332250507, 0.15450475145110576, 0.145792766724833, 0.12194329870492149, 0.14486438229024357, 0.117531567954403, 0.26770634259293036, 0.13972183937498484, 0.13634953501631986, 0.20212071206845317, 0.09237555064440162, 0.11473745513575773, 0.12558042064855712, 0.14945556445940789, 0.09507555378854904, 0.12213046429819774, 9.999999999998899e-05, 0.01729671914693609, 9.999999999998899e-05, 0.06308705798618719, 9.999999999998899e-05, 0.08526633241840575, 0.019018258388770692, 9.999999999998899e-05, 0.08609661491785014, 0.12713059487331924, 0.0862382185730014, 0.14280651534592181, 0.12928687353620916, 0.09420023476550743, 0.10407426069360048, 0.15617322373490572, 0.09934428468282386, 0.1283160157186678, 0.32393837242425516, 0.0565888692665214, 0.20644947832656957, 0.07330202921378715, 0.13283778199953244, 0.08821774228435575, 0.28680006520860646, 0.11711390135936328, 0.06435986018760964, 0.09832936380980006, 0.094675411371136, 0.11078030474314837, 0.1305057705432413, 0.06816080658102674, 0.2460774749799488, 0.16642475896231712, 0.1056688150546321, 0.06957808804660448, 0.33105904752107873, 0.374777751722826, 0.40328268857638216, 0.41273761381486707, 0.43531431651160934, 0.5360114039219745, 0.3481199715443295, 0.4079239232538272, 0.4313046330769563, 0.10774217685060394, 0.11315355746823774, 0.0587834710927686, 0.09872365188331556, 0.08703465629639373, 0.14734737335238401, 0.09892719046561183, 0.1558945405507538, 0.11342535165615775, 0.24948430382648745, 0.18319674954140952, 0.1771509437664498, 0.2350316040772492, 0.17087768421312233, 0.2551587972300543, 0.15252761670583026, 0.18220755508752495, 0.2021925545281421, 0.3340568850559925, 0.26777699225287255, 0.30716983339719417, 0.35277792825350107, 0.2480780332463991, 0.3359085381594811, 0.21508892531889656, 0.4278578988775391, 0.23875235233751013, 0.1942579475916858, 0.2109792316907425, 0.19712457125490523, 0.1829624779942437, 0.2484187268099094, 0.24837695898729795, 0.20549396241726403, 0.24597499557821534, 0.2140975076711008, 0.20130218306386538, 0.2153412673839975, 0.2121924859571107, 0.1992910626107951, 0.20661367333465663, 0.22944038774450892, 0.20829424638573935, 0.19089596029255862, 0.2288214098655692, 0.16339300145126312, 0.2064264991925061, 0.223643981952519, 0.20737745110992378, 0.19970960932592474, 0.1907416370957028, 0.1988397939178056, 0.18949123077854624, 0.21205283044573775, 0.17926606345921137, 0.3246207955416569, 0.2976768288003263, 0.5165066070740152, 0.19246213087304398, 0.6755329550581511, 0.15181589598526424, 0.16105450465037807, 0.4247774446107381, 0.3235202248209419, 0.2018134531624849, 0.2559021033922948, 0.6496508280863574, 0.3791291083094597, 0.3145707764796656, 0.2740643634249733, 0.502699515571879, 0.32435459656000654, 0.18107023979990045, 0.17697477481480128, 0.1922018966400877, 0.178892621478559, 0.19779499725651117, 0.17711197827457692, 0.18262143407438913, 0.19726872443933274, 0.17917807206808756, 0.11669824804374673, 0.08565782903777908, 0.08535791594276976, 0.08038609962035004, 0.09652359053925486, 0.07872434502003578, 0.0904832643017105, 0.08501368586094793, 0.09112044076218828]}, "mutation_prompt": null}
{"id": "7707dd91-0f7f-494e-a193-4fdc8b2d524b", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_GA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.num_particles = 40  # Reduced to focus on promising areas\n        self.w = 0.6  # Adjusted inertia for balance between exploration and exploitation\n        self.c1 = 1.5  # Adaptive cognitive component\n        self.c2 = 2.2  # Increased social component to enhance attraction to global best\n        self.mutation_rate = 0.25  # Increased mutation rate for diversity\n        self.crossover_rate = 0.6  # Adjusted crossover rate for improved exploitation\n\n    def __call__(self, func):\n        # Initialize particles\n        positions = np.random.uniform(self.lb, self.ub, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.num_particles, float('inf'))\n        global_best_position = np.zeros(self.dim)\n        global_best_score = float('inf')\n\n        eval_count = 0\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            scores = np.array([func(p) for p in positions])\n            eval_count += self.num_particles\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_scores[better_mask] = scores[better_mask]\n            personal_best_positions[better_mask] = positions[better_mask]\n\n            min_score_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[min_score_idx] < global_best_score:\n                global_best_score = personal_best_scores[min_score_idx]\n                global_best_position = personal_best_positions[min_score_idx]\n\n            # Adaptive cognitive and social components\n            adaptive_c1 = self.c1 * np.exp(-eval_count / (0.4 * self.budget))\n            adaptive_c2 = self.c2 * (1 - np.exp(-eval_count / (0.4 * self.budget)))\n\n            # Update velocities and positions using hybrid PSO-GA update rule\n            r1 = np.random.rand(self.num_particles, self.dim)\n            r2 = np.random.rand(self.num_particles, self.dim)\n            velocities = (self.w * velocities +\n                          adaptive_c1 * r1 * (personal_best_positions - positions) +\n                          adaptive_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.lb, self.ub)\n\n            # Genetic Algorithm operations\n            for i in range(self.num_particles):\n                if np.random.rand() < self.crossover_rate:\n                    idxs = [idx for idx in range(self.num_particles) if idx != i]\n                    partner = positions[np.random.choice(idxs)]\n                    mask = np.random.rand(self.dim) < 0.5\n                    child = np.where(mask, positions[i], partner)\n\n                    if np.random.rand() < self.mutation_rate:\n                        mutation_idx = np.random.randint(self.dim)\n                        mutation_value = np.random.uniform(self.lb, self.ub)\n                        child[mutation_idx] = mutation_value\n\n                    child_score = func(child)\n                    eval_count += 1\n                    if child_score < scores[i]:\n                        positions[i] = child\n                        scores[i] = child_score\n\n                    if eval_count >= self.budget:\n                        break\n\n            # Update global best with the latest evaluations\n            current_best_idx = np.argmin(scores)\n            if scores[current_best_idx] < global_best_score:\n                global_best_score = scores[current_best_idx]\n                global_best_position = positions[current_best_idx]\n\n        return global_best_position", "name": "EnhancedHybridPSO_GA", "description": "Enhanced Hybrid PSO-GA with Dynamic Population Refinement and Targeted Mutation for Accelerated Convergence.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "71679915-b7d2-4246-a9b8-9b30791aa78f", "metadata": {"aucs": [0.8709116999593831, 0.8723138723777221, 0.8768372615335654, 0.8617868929087722, 0.8732786663332638, 0.8700165787014595, 0.7565562986219209, 0.868539258880491, 0.8709766980904352, 0.7164359951709853, 0.7048047712591957, 0.4776950380186241, 0.3855705320648811, 0.6623877477389744, 0.7604071468026499, 0.2925765172942847, 0.6462031836272428, 0.19553392270172443, 0.17303437138306488, 0.2311803368732268, 0.13147514920023173, 0.14639486955092984, 0.35218672427787756, 0.35487832224036875, 0.14866342766770446, 0.32622137780232907, 0.17580831107043648, 0.1364785949220515, 0.13723180340024177, 0.1415672077043013, 0.1034515896336532, 0.18768357811791359, 0.11499926313848663, 0.14052555748747397, 0.1397271088896036, 0.14224280497807062, 0.8572855482713462, 0.8816167955365596, 0.8719308246693213, 0.9193998394786392, 0.914420324363186, 0.868569508913773, 0.9178142773244033, 0.8901375456634961, 0.9104234556450416, 0.44374478233240466, 0.7135385169264723, 0.28224185632107246, 0.6757261041085597, 0.5347767213601308, 0.6924610301299955, 0.2150090318021105, 0.5979667369466203, 0.46334160313151795, 0.3816440509835938, 0.8871688407181226, 0.2215335955350327, 0.2782753108644027, 0.20804701301111983, 0.21414455095505636, 0.17006784993710677, 0.14936435372393353, 0.8927547238016643, 0.12598746301048813, 0.27674670478297914, 0.13402205898302322, 0.1989156862933854, 0.1637406030113836, 0.15700652057774145, 0.3784850467672597, 0.20359559468799404, 0.15199652764569382, 0.19805528150264373, 0.12909579769588853, 0.20974198883930295, 0.13618812474127684, 0.1676843122643138, 0.21199600895034987, 0.1806227083724674, 0.18720342152943903, 0.14286907178205843, 0.011209799583482005, 0.05529339075019002, 9.999999999998899e-05, 0.10832408699422724, 0.04279531077019072, 9.999999999998899e-05, 0.05451701182477431, 0.06287221396818243, 0.011708930366438275, 0.11851476671790695, 0.13042357546193484, 0.08751705868258464, 0.0737520182321394, 0.0674670842998144, 0.07040643281963133, 0.12270959020209427, 0.1635158390187902, 0.11337901101866699, 9.999999999998899e-05, 0.12060053095909329, 0.15135623777850848, 0.1888409906988574, 0.21600226247055165, 0.12214764580372828, 0.1405721141220454, 0.23155685722371033, 0.2630130022138708, 0.1288308910254673, 0.34621738907919575, 0.27668944855796795, 0.07016384558757949, 0.11322576437915599, 0.07104408037199961, 0.20232014360368966, 0.17029684759892205, 0.1043090462902142, 0.5275849797575713, 0.4916609332810673, 0.5484482146725321, 0.6025381266452674, 0.5669340898622877, 0.540035744668264, 0.5335086626702187, 0.5645246800771313, 0.5675543526425648, 0.10220124270145459, 0.17235856712732534, 0.09015062051346068, 0.14918869038205118, 0.14833937478444825, 0.1265665437173411, 0.13741787062809396, 0.10950728317396385, 0.10727360923944129, 0.1522830180351078, 0.19161055363162882, 0.22403061555925252, 0.19664252516112934, 0.19353340288045007, 0.2143631657275058, 0.22899864457304753, 0.20507301754383522, 0.16376887897753145, 0.25889297875502104, 0.30324011541506257, 0.20595125965070904, 0.273450660627921, 0.5507256147127081, 0.33491973351863924, 0.2679250418098513, 0.2868145497806951, 0.5045353871494462, 0.2422052565907501, 0.27251688689126796, 0.22336131551185512, 0.2281901599841637, 0.1532587735635741, 0.23681089449201387, 0.17474848273382282, 0.28874861636043514, 0.26641830685633283, 0.2296548129849213, 0.22112564705591653, 0.4116295558833244, 0.27429704557205437, 0.25393708255507086, 0.20692391605978377, 0.2326379270132466, 0.19551239397576992, 0.2154097795892288, 0.22901002088179723, 0.18804644526911107, 0.18831793637834637, 0.19084701804057014, 0.2870924905379486, 0.19422011941911022, 0.1967708819138012, 0.22007520569987904, 0.20426687081246941, 0.17535235983947695, 0.1956085758016729, 0.18513856718686927, 0.853351435696617, 0.3560060671921448, 0.8757283763917089, 0.8553559198811277, 0.16919964030308454, 0.13442874366711544, 0.5821816685326726, 0.719751672453101, 0.46208413758601397, 0.7491859575447042, 0.20931336361852104, 0.20509540991197794, 0.3883684528344128, 0.499071632722356, 0.3318319362175811, 0.19639170561099495, 0.19765120753207144, 0.1974169342458848, 0.20355066541306377, 0.17175700260853521, 0.17872396251533595, 0.18059120011176089, 0.17875517461522827, 0.196857160154308, 0.1007064099381123, 0.0992299406111311, 0.09211341496887471, 0.08741383495575883, 0.07795395188648158, 0.15317868552169456, 0.07059919688751182, 0.08629132951339868, 0.0918739748027434]}, "mutation_prompt": null}
{"id": "eac0a945-cb10-4077-b7aa-c2ad78216b7e", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_GA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.num_particles = 40  # Reduced to focus on promising areas\n        self.w = 0.6  # Adjusted inertia for balance between exploration and exploitation\n        self.c1 = 1.5  # Adaptive cognitive component\n        self.c2 = 2.2  # Increased social component to enhance attraction to global best\n        self.mutation_rate = 0.25  # Increased mutation rate for diversity\n        self.crossover_rate = 0.6  # Adjusted crossover rate for improved exploitation\n\n    def __call__(self, func):\n        # Initialize particles\n        positions = np.random.uniform(self.lb, self.ub, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.num_particles, float('inf'))\n        global_best_position = np.zeros(self.dim)\n        global_best_score = float('inf')\n\n        eval_count = 0\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            scores = np.array([func(p) for p in positions])\n            eval_count += self.num_particles\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_scores[better_mask] = scores[better_mask]\n            personal_best_positions[better_mask] = positions[better_mask]\n\n            min_score_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[min_score_idx] < global_best_score:\n                global_best_score = personal_best_scores[min_score_idx]\n                global_best_position = personal_best_positions[min_score_idx]\n\n            # Adaptive cognitive and social components\n            adaptive_c1 = self.c1 * np.exp(-eval_count / (0.4 * self.budget))\n            adaptive_c2 = self.c2 * (1 - np.exp(-eval_count / (0.4 * self.budget)))\n\n            # Update velocities and positions using hybrid PSO-GA update rule\n            r1 = np.random.rand(self.num_particles, self.dim)\n            r2 = np.random.rand(self.num_particles, self.dim)\n            velocities = (self.w * velocities +\n                          adaptive_c1 * r1 * (personal_best_positions - positions) +\n                          adaptive_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.lb, self.ub)\n\n            # Genetic Algorithm operations\n            for i in range(self.num_particles):\n                if np.random.rand() < self.crossover_rate:\n                    idxs = [idx for idx in range(self.num_particles) if idx != i]\n                    partner = positions[np.random.choice(idxs)]\n                    mask = np.random.rand(self.dim) < 0.5\n                    child = np.where(mask, positions[i], partner)\n\n                    if np.random.rand() < self.mutation_rate:\n                        mutation_idx = np.random.randint(self.dim)\n                        mutation_value = np.random.uniform(self.lb, self.ub)\n                        child[mutation_idx] = mutation_value\n\n                    child_score = func(child)\n                    eval_count += 1\n                    if child_score < scores[i]:\n                        positions[i] = child\n                        scores[i] = child_score\n\n                    if eval_count >= self.budget:\n                        break\n\n            # Update global best with the latest evaluations\n            current_best_idx = np.argmin(scores)\n            if scores[current_best_idx] < global_best_score:\n                global_best_score = scores[current_best_idx]\n                global_best_position = positions[current_best_idx]\n\n        return global_best_position", "name": "EnhancedHybridPSO_GA", "description": "Enhanced Hybrid PSO-GA with Dynamic Population Refinement and Targeted Mutation for Accelerated Convergence.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "71679915-b7d2-4246-a9b8-9b30791aa78f", "metadata": {"aucs": [0.8709116999593831, 0.8723138723777221, 0.8768372615335654, 0.8617868929087722, 0.8732786663332638, 0.8700165787014595, 0.7565562986219209, 0.868539258880491, 0.8709766980904352, 0.7164359951709853, 0.7048047712591957, 0.4776950380186241, 0.3855705320648811, 0.6623877477389744, 0.7604071468026499, 0.2925765172942847, 0.6462031836272428, 0.19553392270172443, 0.17303437138306488, 0.2311803368732268, 0.13147514920023173, 0.14639486955092984, 0.35218672427787756, 0.35487832224036875, 0.14866342766770446, 0.32622137780232907, 0.17580831107043648, 0.1364785949220515, 0.13723180340024177, 0.1415672077043013, 0.1034515896336532, 0.18768357811791359, 0.11499926313848663, 0.14052555748747397, 0.1397271088896036, 0.14224280497807062, 0.8572855482713462, 0.8816167955365596, 0.8719308246693213, 0.9193998394786392, 0.914420324363186, 0.868569508913773, 0.9178142773244033, 0.8901375456634961, 0.9104234556450416, 0.44374478233240466, 0.7135385169264723, 0.28224185632107246, 0.6757261041085597, 0.5347767213601308, 0.6924610301299955, 0.2150090318021105, 0.5979667369466203, 0.46334160313151795, 0.3816440509835938, 0.8871688407181226, 0.2215335955350327, 0.2782753108644027, 0.20804701301111983, 0.21414455095505636, 0.17006784993710677, 0.14936435372393353, 0.8927547238016643, 0.12598746301048813, 0.27674670478297914, 0.13402205898302322, 0.1989156862933854, 0.1637406030113836, 0.15700652057774145, 0.3784850467672597, 0.20359559468799404, 0.15199652764569382, 0.19805528150264373, 0.12909579769588853, 0.20974198883930295, 0.13618812474127684, 0.1676843122643138, 0.21199600895034987, 0.1806227083724674, 0.18720342152943903, 0.14286907178205843, 0.011209799583482005, 0.05529339075019002, 9.999999999998899e-05, 0.10832408699422724, 0.04279531077019072, 9.999999999998899e-05, 0.05451701182477431, 0.06287221396818243, 0.011708930366438275, 0.11851476671790695, 0.13042357546193484, 0.08751705868258464, 0.0737520182321394, 0.0674670842998144, 0.07040643281963133, 0.12270959020209427, 0.1635158390187902, 0.11337901101866699, 9.999999999998899e-05, 0.12060053095909329, 0.15135623777850848, 0.1888409906988574, 0.21600226247055165, 0.12214764580372828, 0.1405721141220454, 0.23155685722371033, 0.2630130022138708, 0.1288308910254673, 0.34621738907919575, 0.27668944855796795, 0.07016384558757949, 0.11322576437915599, 0.07104408037199961, 0.20232014360368966, 0.17029684759892205, 0.1043090462902142, 0.5275849797575713, 0.4916609332810673, 0.5484482146725321, 0.6025381266452674, 0.5669340898622877, 0.540035744668264, 0.5335086626702187, 0.5645246800771313, 0.5675543526425648, 0.10220124270145459, 0.17235856712732534, 0.09015062051346068, 0.14918869038205118, 0.14833937478444825, 0.1265665437173411, 0.13741787062809396, 0.10950728317396385, 0.10727360923944129, 0.1522830180351078, 0.19161055363162882, 0.22403061555925252, 0.19664252516112934, 0.19353340288045007, 0.2143631657275058, 0.22899864457304753, 0.20507301754383522, 0.16376887897753145, 0.25889297875502104, 0.30324011541506257, 0.20595125965070904, 0.273450660627921, 0.5507256147127081, 0.33491973351863924, 0.2679250418098513, 0.2868145497806951, 0.5045353871494462, 0.2422052565907501, 0.27251688689126796, 0.22336131551185512, 0.2281901599841637, 0.1532587735635741, 0.23681089449201387, 0.17474848273382282, 0.28874861636043514, 0.26641830685633283, 0.2296548129849213, 0.22112564705591653, 0.4116295558833244, 0.27429704557205437, 0.25393708255507086, 0.20692391605978377, 0.2326379270132466, 0.19551239397576992, 0.2154097795892288, 0.22901002088179723, 0.18804644526911107, 0.18831793637834637, 0.19084701804057014, 0.2870924905379486, 0.19422011941911022, 0.1967708819138012, 0.22007520569987904, 0.20426687081246941, 0.17535235983947695, 0.1956085758016729, 0.18513856718686927, 0.853351435696617, 0.3560060671921448, 0.8757283763917089, 0.8553559198811277, 0.16919964030308454, 0.13442874366711544, 0.5821816685326726, 0.719751672453101, 0.46208413758601397, 0.7491859575447042, 0.20931336361852104, 0.20509540991197794, 0.3883684528344128, 0.499071632722356, 0.3318319362175811, 0.19639170561099495, 0.19765120753207144, 0.1974169342458848, 0.20355066541306377, 0.17175700260853521, 0.17872396251533595, 0.18059120011176089, 0.17875517461522827, 0.196857160154308, 0.1007064099381123, 0.0992299406111311, 0.09211341496887471, 0.08741383495575883, 0.07795395188648158, 0.15317868552169456, 0.07059919688751182, 0.08629132951339868, 0.0918739748027434]}, "mutation_prompt": null}
{"id": "7f89ee11-6093-4fd2-b53b-158ce5a71a4c", "solution": "import numpy as np\n\nclass DynamicAdaptivePSO_GA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.num_particles = 50  # Increased to explore more of the space initially\n        self.w = 0.5  # Reduced inertia to emphasize exploitation as convergence nears\n        self.c1 = 1.7  # Slightly increased cognitive component for adaptive personal learning\n        self.c2 = 2.0  # Adjusted social component for balanced attraction to global best\n        self.mutation_rate = 0.3  # Further increased mutation rate for exploration\n        self.crossover_rate = 0.7  # Increased crossover rate to intensify exploitation\n\n    def __call__(self, func):\n        # Initialize particles\n        positions = np.random.uniform(self.lb, self.ub, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.num_particles, float('inf'))\n        global_best_position = np.zeros(self.dim)\n        global_best_score = float('inf')\n\n        eval_count = 0\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            scores = np.array([func(p) for p in positions])\n            eval_count += self.num_particles\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_scores[better_mask] = scores[better_mask]\n            personal_best_positions[better_mask] = positions[better_mask]\n\n            min_score_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[min_score_idx] < global_best_score:\n                global_best_score = personal_best_scores[min_score_idx]\n                global_best_position = personal_best_positions[min_score_idx]\n\n            # Adaptive cognitive and social components\n            adaptive_c1 = self.c1 * np.exp(-eval_count / (0.3 * self.budget))\n            adaptive_c2 = self.c2 * (1 - np.exp(-eval_count / (0.3 * self.budget)))\n\n            # Update velocities and positions using hybrid PSO-GA update rule\n            r1 = np.random.rand(self.num_particles, self.dim)\n            r2 = np.random.rand(self.num_particles, self.dim)\n            velocities = (self.w * velocities +\n                          adaptive_c1 * r1 * (personal_best_positions - positions) +\n                          adaptive_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.lb, self.ub)\n\n            # Genetic Algorithm operations\n            for i in range(self.num_particles):\n                if np.random.rand() < self.crossover_rate:\n                    idxs = [idx for idx in range(self.num_particles) if idx != i]\n                    partner = positions[np.random.choice(idxs)]\n                    mask = np.random.rand(self.dim) < 0.5\n                    child = np.where(mask, positions[i], partner)\n\n                    if np.random.rand() < self.mutation_rate:\n                        mutation_size = np.random.uniform(0, 1) * 0.1  # Dynamic mutation size\n                        mutation_idx = np.random.randint(self.dim)\n                        mutation_value = positions[i, mutation_idx] + np.random.randn() * mutation_size\n                        child[mutation_idx] = np.clip(mutation_value, self.lb, self.ub)\n\n                    child_score = func(child)\n                    eval_count += 1\n                    if child_score < scores[i]:\n                        positions[i] = child\n                        scores[i] = child_score\n\n                    if eval_count >= self.budget:\n                        break\n\n            # Update global best with the latest evaluations\n            current_best_idx = np.argmin(scores)\n            if scores[current_best_idx] < global_best_score:\n                global_best_score = scores[current_best_idx]\n                global_best_position = positions[current_best_idx]\n\n        return global_best_position", "name": "DynamicAdaptivePSO_GA", "description": "Dynamic Adaptive PSO-GA with Enhanced Mutation and Crossover Mechanisms for Faster Convergence.", "configspace": "", "generation": 85, "fitness": 0.2769703673407179, "feedback": "The algorithm DynamicAdaptivePSO_GA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.21.", "error": "", "parent_id": "71679915-b7d2-4246-a9b8-9b30791aa78f", "metadata": {"aucs": [0.8588859754044719, 0.7455162005175389, 0.853721484949746, 0.8256800556525321, 0.8617665106351006, 0.780132450331397, 0.8554092169486277, 0.8596427907689872, 0.8513908867826718, 0.5834562644152766, 0.44900882275581044, 0.5035494631094507, 0.5996357664088943, 0.6046161200202376, 0.4802568322644012, 0.6072499402413406, 0.43825492560800117, 0.4222140708219695, 0.11142896888461384, 0.14097275636848516, 0.12553686698725253, 0.1503569633971652, 0.12617560760016566, 0.09829264944746263, 0.12387063377123508, 0.11584577495137749, 0.14112804747233898, 0.1119493161335855, 0.09017483343495691, 0.09504661660852054, 0.09762955227802927, 0.07630704001978461, 0.08764729439779717, 0.14611315483662402, 0.10542926269403885, 0.10030437769770817, 0.6489586337117661, 0.6419135053019858, 0.6507633370100033, 0.6448454169306912, 0.6829486385901917, 0.6153706823912732, 0.6416599246766823, 0.5617107207798613, 0.724520043614871, 0.23942153438155855, 0.5049402494852376, 0.6091471712013314, 0.49047968188300306, 0.34391528876182487, 0.3242324018930822, 0.3290101213162602, 0.26284513785445107, 0.5134254326585843, 0.2862302186421499, 0.3718289807512146, 0.33965018418845905, 0.2723800242327594, 0.21588708726513406, 0.17890593803275245, 0.17453400940025798, 0.14800134457884961, 0.2312521673643475, 0.2332204706499963, 0.1473799266398772, 0.237913885104871, 0.15713530833245037, 0.154355009292105, 0.22598847313658943, 0.23069952298018248, 0.12684873561502952, 0.19339200334074413, 0.20122873254120388, 0.16033414601972418, 0.204560575340073, 0.1615395194423922, 0.15502228260469197, 0.15689705886196514, 0.21024179733829196, 0.17201969639017844, 0.17622094473473948, 0.003431384837942808, 0.05221959188903269, 9.999999999998899e-05, 0.02204605698998441, 0.04971346524785203, 0.027595928278070225, 0.08533407696133277, 9.999999999998899e-05, 0.007660614840680702, 0.07306923676120636, 0.061108713164718886, 0.14912557224922462, 0.0693802377492937, 0.08823873854797692, 0.035178116301948115, 0.08382646679914929, 0.055718724400073194, 0.09406582000892794, 0.2189590650538371, 0.20971098207103334, 0.16648622352460274, 0.09474603391905945, 0.2024279914039444, 0.1307379823097241, 0.1046003370650398, 0.29590225134590353, 0.2197708278318974, 0.17616760395943387, 0.21425366193770845, 0.1806334246308512, 0.08582809490539711, 0.23801595404066633, 0.15889146921375918, 0.0861719088041547, 0.13436838490005398, 0.12848969236476082, 0.5496567393204308, 0.426760662115658, 0.5467796508297093, 0.5365087539711786, 0.5680274081936751, 0.49538982088421357, 0.5478089001623004, 0.5471237914510935, 0.4876062904027566, 0.07220471442477172, 0.11274820414623432, 0.09263244263151316, 0.12910179483554496, 0.1465777453484678, 0.1408939372758956, 0.08222526716118284, 0.17438344730377753, 0.08596705487392542, 0.383357670390592, 0.16103344830111588, 0.16970007216833471, 0.20537918922441778, 0.3443394526199609, 0.24145512616122267, 0.21636860560314763, 0.36911046268327075, 0.20982914276296516, 0.25941170604072283, 0.3731715749548836, 0.36328709483276866, 0.3411083970070712, 0.4351200539471468, 0.4415856616600312, 0.2535865776802593, 0.3313730583834563, 0.3723830052270649, 0.3044584223950354, 0.29279887383546543, 0.21801815169105365, 0.2223407526865624, 0.271728949455032, 0.22652653227887487, 0.15423604372248012, 0.28538615758820396, 0.21382613007734652, 0.2200449257808884, 0.22313335614688445, 0.22091453667009864, 0.21459416476705373, 0.23975256177792148, 0.22261554249342352, 0.2119856773307046, 0.19059158836338652, 0.23309656738853146, 0.22171607346684408, 0.1842297623112077, 0.20516430662736307, 0.1721426401417171, 0.18932988157705688, 0.19191300118304944, 0.18089372232007972, 0.19201778174984074, 0.19600955754977145, 0.159734091027131, 0.18416816156770377, 0.18299062246742337, 0.1965460811733306, 0.19676411066492805, 0.8811458048321905, 0.82054107178237, 0.759537900677039, 0.16480940376817887, 0.450996883733484, 0.7293287469567735, 0.5742978686537672, 0.16349880376600212, 0.1666449032801709, 0.1641763804667684, 0.10369511775887552, 0.5767144775637529, 0.4192114898084336, 0.21485424056307378, 0.19525379954719446, 0.17962132530952568, 0.1809837271317173, 0.18981205963319236, 0.17916898714414053, 0.17505923390443046, 0.2395958719500889, 0.21434155946819755, 0.0927848648984203, 0.1079564447148228, 0.08876890718445507, 0.08331684541251438, 0.10360663293558081, 0.09387403799252048, 0.10642412834825032, 0.09470034403069605, 0.09476373493075374]}, "mutation_prompt": null}
{"id": "7103bbdb-0e94-40a1-a985-bdfdf9bc853e", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_GA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.num_particles = 40  # Reduced to focus on promising areas\n        self.w = 0.6  # Adjusted inertia for balance between exploration and exploitation\n        self.c1 = 1.5  # Adaptive cognitive component\n        self.c2 = 2.2  # Increased social component to enhance attraction to global best\n        self.mutation_rate = 0.25  # Increased mutation rate for diversity\n        self.crossover_rate = 0.6  # Adjusted crossover rate for improved exploitation\n\n    def __call__(self, func):\n        # Initialize particles\n        positions = np.random.uniform(self.lb, self.ub, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.num_particles, float('inf'))\n        global_best_position = np.zeros(self.dim)\n        global_best_score = float('inf')\n\n        eval_count = 0\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            scores = np.array([func(p) for p in positions])\n            eval_count += self.num_particles\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_scores[better_mask] = scores[better_mask]\n            personal_best_positions[better_mask] = positions[better_mask]\n\n            min_score_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[min_score_idx] < global_best_score:\n                global_best_score = personal_best_scores[min_score_idx]\n                global_best_position = personal_best_positions[min_score_idx]\n\n            # Adaptive cognitive and social components\n            adaptive_c1 = self.c1 * np.exp(-eval_count / (0.4 * self.budget))\n            adaptive_c2 = self.c2 * (1 - np.exp(-eval_count / (0.4 * self.budget)))\n\n            # Update velocities and positions using hybrid PSO-GA update rule\n            r1 = np.random.rand(self.num_particles, self.dim)\n            r2 = np.random.rand(self.num_particles, self.dim)\n            velocities = (self.w * velocities +\n                          adaptive_c1 * r1 * (personal_best_positions - positions) +\n                          adaptive_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.lb, self.ub)\n\n            # Genetic Algorithm operations\n            for i in range(self.num_particles):\n                if np.random.rand() < self.crossover_rate:\n                    idxs = [idx for idx in range(self.num_particles) if idx != i]\n                    partner = positions[np.random.choice(idxs)]\n                    mask = np.random.rand(self.dim) < 0.5\n                    child = np.where(mask, positions[i], partner)\n\n                    if np.random.rand() < self.mutation_rate:\n                        mutation_idx = np.random.randint(self.dim)\n                        mutation_value = np.random.uniform(self.lb, self.ub)\n                        child[mutation_idx] = mutation_value\n\n                    child_score = func(child)\n                    eval_count += 1\n                    if child_score < scores[i]:\n                        positions[i] = child\n                        scores[i] = child_score\n\n                    if eval_count >= self.budget:\n                        break\n\n            # Update global best with the latest evaluations\n            current_best_idx = np.argmin(scores)\n            if scores[current_best_idx] < global_best_score:\n                global_best_score = scores[current_best_idx]\n                global_best_position = positions[current_best_idx]\n\n        return global_best_position", "name": "EnhancedHybridPSO_GA", "description": "Enhanced Hybrid PSO-GA with Dynamic Population Refinement and Targeted Mutation for Accelerated Convergence.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "71679915-b7d2-4246-a9b8-9b30791aa78f", "metadata": {"aucs": [0.8709116999593831, 0.8723138723777221, 0.8768372615335654, 0.8617868929087722, 0.8732786663332638, 0.8700165787014595, 0.7565562986219209, 0.868539258880491, 0.8709766980904352, 0.7164359951709853, 0.7048047712591957, 0.4776950380186241, 0.3855705320648811, 0.6623877477389744, 0.7604071468026499, 0.2925765172942847, 0.6462031836272428, 0.19553392270172443, 0.17303437138306488, 0.2311803368732268, 0.13147514920023173, 0.14639486955092984, 0.35218672427787756, 0.35487832224036875, 0.14866342766770446, 0.32622137780232907, 0.17580831107043648, 0.1364785949220515, 0.13723180340024177, 0.1415672077043013, 0.1034515896336532, 0.18768357811791359, 0.11499926313848663, 0.14052555748747397, 0.1397271088896036, 0.14224280497807062, 0.8572855482713462, 0.8816167955365596, 0.8719308246693213, 0.9193998394786392, 0.914420324363186, 0.868569508913773, 0.9178142773244033, 0.8901375456634961, 0.9104234556450416, 0.44374478233240466, 0.7135385169264723, 0.28224185632107246, 0.6757261041085597, 0.5347767213601308, 0.6924610301299955, 0.2150090318021105, 0.5979667369466203, 0.46334160313151795, 0.3816440509835938, 0.8871688407181226, 0.2215335955350327, 0.2782753108644027, 0.20804701301111983, 0.21414455095505636, 0.17006784993710677, 0.14936435372393353, 0.8927547238016643, 0.12598746301048813, 0.27674670478297914, 0.13402205898302322, 0.1989156862933854, 0.1637406030113836, 0.15700652057774145, 0.3784850467672597, 0.20359559468799404, 0.15199652764569382, 0.19805528150264373, 0.12909579769588853, 0.20974198883930295, 0.13618812474127684, 0.1676843122643138, 0.21199600895034987, 0.1806227083724674, 0.18720342152943903, 0.14286907178205843, 0.011209799583482005, 0.05529339075019002, 9.999999999998899e-05, 0.10832408699422724, 0.04279531077019072, 9.999999999998899e-05, 0.05451701182477431, 0.06287221396818243, 0.011708930366438275, 0.11851476671790695, 0.13042357546193484, 0.08751705868258464, 0.0737520182321394, 0.0674670842998144, 0.07040643281963133, 0.12270959020209427, 0.1635158390187902, 0.11337901101866699, 9.999999999998899e-05, 0.12060053095909329, 0.15135623777850848, 0.1888409906988574, 0.21600226247055165, 0.12214764580372828, 0.1405721141220454, 0.23155685722371033, 0.2630130022138708, 0.1288308910254673, 0.34621738907919575, 0.27668944855796795, 0.07016384558757949, 0.11322576437915599, 0.07104408037199961, 0.20232014360368966, 0.17029684759892205, 0.1043090462902142, 0.5275849797575713, 0.4916609332810673, 0.5484482146725321, 0.6025381266452674, 0.5669340898622877, 0.540035744668264, 0.5335086626702187, 0.5645246800771313, 0.5675543526425648, 0.10220124270145459, 0.17235856712732534, 0.09015062051346068, 0.14918869038205118, 0.14833937478444825, 0.1265665437173411, 0.13741787062809396, 0.10950728317396385, 0.10727360923944129, 0.1522830180351078, 0.19161055363162882, 0.22403061555925252, 0.19664252516112934, 0.19353340288045007, 0.2143631657275058, 0.22899864457304753, 0.20507301754383522, 0.16376887897753145, 0.25889297875502104, 0.30324011541506257, 0.20595125965070904, 0.273450660627921, 0.5507256147127081, 0.33491973351863924, 0.2679250418098513, 0.2868145497806951, 0.5045353871494462, 0.2422052565907501, 0.27251688689126796, 0.22336131551185512, 0.2281901599841637, 0.1532587735635741, 0.23681089449201387, 0.17474848273382282, 0.28874861636043514, 0.26641830685633283, 0.2296548129849213, 0.22112564705591653, 0.4116295558833244, 0.27429704557205437, 0.25393708255507086, 0.20692391605978377, 0.2326379270132466, 0.19551239397576992, 0.2154097795892288, 0.22901002088179723, 0.18804644526911107, 0.18831793637834637, 0.19084701804057014, 0.2870924905379486, 0.19422011941911022, 0.1967708819138012, 0.22007520569987904, 0.20426687081246941, 0.17535235983947695, 0.1956085758016729, 0.18513856718686927, 0.853351435696617, 0.3560060671921448, 0.8757283763917089, 0.8553559198811277, 0.16919964030308454, 0.13442874366711544, 0.5821816685326726, 0.719751672453101, 0.46208413758601397, 0.7491859575447042, 0.20931336361852104, 0.20509540991197794, 0.3883684528344128, 0.499071632722356, 0.3318319362175811, 0.19639170561099495, 0.19765120753207144, 0.1974169342458848, 0.20355066541306377, 0.17175700260853521, 0.17872396251533595, 0.18059120011176089, 0.17875517461522827, 0.196857160154308, 0.1007064099381123, 0.0992299406111311, 0.09211341496887471, 0.08741383495575883, 0.07795395188648158, 0.15317868552169456, 0.07059919688751182, 0.08629132951339868, 0.0918739748027434]}, "mutation_prompt": null}
{"id": "a0099958-e27b-4624-b429-55f44822e2bc", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_GA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.num_particles = 35  # Slightly reduced number to focus budget\n        self.w_max = 0.9  # Dynamic inertia\n        self.w_min = 0.4\n        self.c1 = 1.7  # Slightly increased cognitive component\n        self.c2 = 2.0  # Balanced social component\n        self.mutation_rate = 0.2  # Reduced to focus more on exploitation\n        self.crossover_rate = 0.7  # Slightly increased for genetic diversity\n\n    def __call__(self, func):\n        # Initialize particles\n        positions = np.random.uniform(self.lb, self.ub, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.num_particles, float('inf'))\n        global_best_position = np.zeros(self.dim)\n        global_best_score = float('inf')\n\n        eval_count = 0\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            scores = np.array([func(p) for p in positions])\n            eval_count += self.num_particles\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_scores[better_mask] = scores[better_mask]\n            personal_best_positions[better_mask] = positions[better_mask]\n\n            min_score_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[min_score_idx] < global_best_score:\n                global_best_score = personal_best_scores[min_score_idx]\n                global_best_position = personal_best_positions[min_score_idx]\n\n            # Adaptive inertia weight\n            w = self.w_max - (self.w_max - self.w_min) * (eval_count / self.budget)\n\n            # Adaptive cognitive and social components\n            adaptive_c1 = self.c1 * np.exp(-eval_count / (0.5 * self.budget))\n            adaptive_c2 = self.c2 * (1 - np.exp(-eval_count / (0.4 * self.budget)))\n\n            # Update velocities and positions\n            r1 = np.random.rand(self.num_particles, self.dim)\n            r2 = np.random.rand(self.num_particles, self.dim)\n            velocities = (w * velocities +\n                          adaptive_c1 * r1 * (personal_best_positions - positions) +\n                          adaptive_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.lb, self.ub)\n\n            # Genetic Algorithm operations with differential mutation\n            for i in range(self.num_particles):\n                if np.random.rand() < self.crossover_rate:\n                    idxs = np.random.choice(self.num_particles, 3, replace=False)\n                    a, b, c = positions[idxs]\n                    mutation_factor = np.random.uniform(0.5, 1.0)\n                    donor_vector = a + mutation_factor * (b - c)\n                    donor_vector = np.clip(donor_vector, self.lb, self.ub)\n\n                    mask = np.random.rand(self.dim) < 0.5\n                    child = np.where(mask, positions[i], donor_vector)\n\n                    if np.random.rand() < self.mutation_rate:\n                        mutation_idx = np.random.randint(self.dim)\n                        mutation_value = np.random.uniform(self.lb, self.ub)\n                        child[mutation_idx] = mutation_value\n\n                    child_score = func(child)\n                    eval_count += 1\n                    if child_score < scores[i]:\n                        positions[i] = child\n                        scores[i] = child_score\n\n                    if eval_count >= self.budget:\n                        break\n\n            # Update global best with the latest evaluations\n            current_best_idx = np.argmin(scores)\n            if scores[current_best_idx] < global_best_score:\n                global_best_score = scores[current_best_idx]\n                global_best_position = positions[current_best_idx]\n\n        return global_best_position", "name": "EnhancedHybridPSO_GA", "description": "Enhanced Hybrid PSO-GA with Adaptive Inertia and Differential Mutation for Improved Convergence Speed.", "configspace": "", "generation": 87, "fitness": 0.2785718135475339, "feedback": "The algorithm EnhancedHybridPSO_GA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.23.", "error": "", "parent_id": "71679915-b7d2-4246-a9b8-9b30791aa78f", "metadata": {"aucs": [0.46939142041084847, 0.7546358630102441, 0.7987651940848313, 0.7877178923574248, 0.748695802518337, 0.7765743398292856, 0.5544457102021454, 0.7723684516888356, 0.7953053807159872, 0.13302672369435675, 0.0308423186991873, 0.0429982138620153, 0.5452710496167227, 0.5541436330489403, 9.999999999998899e-05, 0.5393912385391154, 0.5716557798656936, 0.10537717429915427, 0.14546205381073762, 0.1291176185268036, 0.12315943028329202, 0.18093894980966352, 0.09628074849058066, 0.3128862095192392, 0.13010331687366838, 0.1156827694116086, 0.13802159757890642, 0.1379648239290593, 0.09117165705131991, 0.11228385643748717, 0.13915604744949128, 0.13589559219205438, 0.12021558461762383, 0.1284851799782578, 0.12021007456044552, 0.1577014569515961, 0.9314542843592319, 0.9463793910166874, 0.9478633189929043, 0.9511830920392081, 0.941435034672136, 0.9490246712330572, 0.9371547107468131, 0.9416042474765336, 0.9438487261514884, 0.4838616442416869, 0.48910676253652496, 0.43570158077328835, 0.47285968828930236, 0.3853800616684805, 0.35586559785281047, 0.48619903634629036, 0.5303677407691842, 0.4609469401731434, 0.3123191762501446, 0.6821896237872201, 0.5845564284171358, 0.34776093043403944, 0.3437014257119485, 0.27200226806618577, 0.2386713149163563, 0.23788318709097067, 0.22665592780880273, 0.18713754077096678, 0.19566259649027307, 0.1987167745533317, 0.196651861736294, 0.17823932716823987, 0.21708683995895373, 0.1892079043774859, 0.29887420521273655, 0.1874044534399132, 0.21748330295031204, 0.12765460441528087, 0.12566566278668523, 0.2200331760411376, 0.2234280052012133, 0.2295491653107179, 0.22514145384094186, 0.19299475150221468, 0.12824168209052556, 0.03928704590633425, 9.999999999998899e-05, 9.999999999998899e-05, 0.042259483356617444, 0.06819383416137992, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.059997387495766996, 0.11300181674782639, 0.11138686678363685, 0.15201317669071301, 0.08587454341902445, 0.09033089879064593, 0.054368369287366325, 0.16664016106885138, 0.15883545930178555, 0.07298145069453477, 0.1353238495534217, 0.04916799264011429, 0.17042991400598895, 0.0649568057599319, 0.06340565763678463, 0.12020700020000163, 0.14824314112612536, 0.1109786869768995, 0.06280705465904435, 0.1874711404444045, 0.16593011928337165, 0.10525520226562546, 0.10613065929474674, 0.28762897989045644, 0.1194923568768167, 0.07711808682919141, 0.13401887645938237, 0.07476339507226715, 0.4908554945097787, 0.5156795457875647, 0.41014829805099284, 0.5026407046504701, 0.5152411248909055, 0.5611904650343655, 0.4597167990509805, 0.553437778333727, 0.5281245329625431, 0.12479645105456205, 0.1181063356653883, 0.08520956432802795, 0.08022206702456047, 0.1050944967493358, 0.12749710026218652, 0.11261699863835439, 0.09840097445815754, 0.1256893059286598, 0.2225930392386697, 0.1467603092214298, 0.18485033739705437, 0.18108310788330428, 0.14196079404461415, 0.268450567724138, 0.19013725534615955, 0.15060419472690778, 0.23875544424442674, 0.3099779029412739, 0.26935738873376947, 0.38854545785298134, 0.34893123641210844, 0.3195211300746229, 0.36710547146404304, 0.4649275373080378, 0.437025481500125, 0.4088941705272232, 0.26353771639392487, 0.22507971705384644, 0.2671279709678125, 0.3165831675122762, 0.1890299614487203, 0.2444720400808198, 0.20396128619604714, 0.29765227435669683, 0.19905708736433048, 0.19805557992271183, 0.2015306084542694, 0.18806586638916556, 0.18791389301959593, 0.2071809274258848, 0.1993831885256564, 0.2064393636904026, 0.1841359339818206, 0.23449976002507722, 0.18582055968917954, 0.20365167217554148, 0.23987081880011596, 0.19797511388838707, 0.168079989046381, 0.19918358730375574, 0.17792939651836637, 0.18024374659936315, 0.4321007883712509, 0.17164258042225733, 0.1778269706333514, 0.18480847447509352, 0.16643941809637797, 0.19803960291484768, 0.19572010645899618, 0.801221540589992, 0.7458229075134567, 0.16323413671362508, 0.6627567070000432, 0.20658347680827704, 0.46383652974599066, 0.20869713348379038, 0.20464118053810165, 0.49585901499355756, 0.6995159879663132, 0.535985256527781, 0.6395467071797112, 0.18236339640414623, 0.17502044524535176, 0.2099127713563591, 0.17490438135867248, 0.19875527590353026, 0.1953860513592437, 0.18188865376466656, 0.18184474769084935, 0.1950275155708704, 0.08483330288131097, 0.08825192707299756, 0.08674215684557984, 0.09580153833728822, 0.08255763933911131, 0.06870695145448535, 0.07956919951201802, 0.07765197529083201, 0.06781249933277644]}, "mutation_prompt": null}
{"id": "1594fc5a-cf71-4744-bb46-7801f2976a61", "solution": "import numpy as np\n\nclass AugmentedHybridPSO_GA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.num_particles = 45  # Slightly increased to explore more effectively\n        self.w = 0.5  # Fine-tuned inertia to improve exploration-exploitation balance\n        self.c1 = 1.7  # Enhanced cognitive component for better personal best tracking\n        self.c2 = 2.0  # Adjusted social component for more robust global best attraction\n        self.mutation_rate = 0.3  # Further increased mutation rate for enhanced diversity\n        self.crossover_rate = 0.5  # Lowered to focus on refining existing solutions\n\n    def __call__(self, func):\n        # Initialize particles\n        positions = np.random.uniform(self.lb, self.ub, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.num_particles, float('inf'))\n        global_best_position = np.zeros(self.dim)\n        global_best_score = float('inf')\n\n        eval_count = 0\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            scores = np.array([func(p) for p in positions])\n            eval_count += self.num_particles\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_scores[better_mask] = scores[better_mask]\n            personal_best_positions[better_mask] = positions[better_mask]\n\n            min_score_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[min_score_idx] < global_best_score:\n                global_best_score = personal_best_scores[min_score_idx]\n                global_best_position = personal_best_positions[min_score_idx]\n\n            # Adaptive cognitive and social components with dynamic adjustment\n            adaptive_c1 = self.c1 * np.exp(-eval_count / (0.5 * self.budget))\n            adaptive_c2 = self.c2 * (1 - np.exp(-eval_count / (0.5 * self.budget)))\n\n            # Update velocities and positions using enhanced hybrid PSO-GA update rule\n            r1 = np.random.rand(self.num_particles, self.dim)\n            r2 = np.random.rand(self.num_particles, self.dim)\n            velocities = (self.w * velocities +\n                          adaptive_c1 * r1 * (personal_best_positions - positions) +\n                          adaptive_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.lb, self.ub)\n\n            # Genetic Algorithm operations with improved diversity management\n            for i in range(self.num_particles):\n                if np.random.rand() < self.crossover_rate:\n                    idxs = [idx for idx in range(self.num_particles) if idx != i]\n                    partner = positions[np.random.choice(idxs)]\n                    mask = np.random.rand(self.dim) < 0.6  # Increased crossover depth\n                    child = np.where(mask, positions[i], partner)\n\n                    if np.random.rand() < self.mutation_rate:\n                        mutation_indices = np.random.choice(self.dim, size=2, replace=False)\n                        mutation_values = np.random.uniform(self.lb, self.ub, size=2)\n                        child[mutation_indices] = mutation_values\n\n                    child_score = func(child)\n                    eval_count += 1\n                    if child_score < scores[i]:\n                        positions[i] = child\n                        scores[i] = child_score\n\n                    if eval_count >= self.budget:\n                        break\n\n            # Update global best with the latest evaluations\n            current_best_idx = np.argmin(scores)\n            if scores[current_best_idx] < global_best_score:\n                global_best_score = scores[current_best_idx]\n                global_best_position = positions[current_best_idx]\n\n        return global_best_position", "name": "AugmentedHybridPSO_GA", "description": "Augmented Hybrid PSO-GA with Adaptive Dynamic Population and Multi-Stage Exploration-Exploitation Balancing for Enhanced Convergence.", "configspace": "", "generation": 88, "fitness": 0.24234172766162396, "feedback": "The algorithm AugmentedHybridPSO_GA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.19.", "error": "", "parent_id": "71679915-b7d2-4246-a9b8-9b30791aa78f", "metadata": {"aucs": [0.8437468019826162, 0.8674944088288937, 0.8603969490353235, 0.4165725622827352, 0.6086146335448839, 0.8618611377032454, 0.8451456949818437, 0.8455725194047047, 0.8587278652673096, 0.4485941113310976, 0.32172998867917, 0.40175383044891455, 0.26679712586222804, 0.7345532040207662, 0.7302776561085897, 0.24932489341954522, 0.3220072213421922, 0.7707180984250173, 0.1759067433860717, 0.1398008538955915, 0.11786404346468737, 0.14798545154805032, 0.1478801655275891, 0.1253204789157144, 0.1562921453586943, 0.1252655357389736, 0.10999961651040846, 0.10537487489850117, 0.1333327757886924, 0.1377906394906997, 0.1379365567514289, 0.11627897710738966, 0.0800478290722364, 0.1344539960974358, 0.10513068288714444, 0.09456327955612209, 0.306547337002929, 0.2831845993328682, 0.16421362873304146, 0.14676435905615215, 0.31165505991776077, 0.8288033697562336, 0.1835099270783639, 0.1992977877209846, 0.31664097470925556, 0.14252780399175813, 0.12541980757861815, 0.13050805782668362, 0.1597649485531243, 0.11231546921011815, 0.13345676661718264, 0.0900181124165812, 0.14502613741964832, 0.12465516619655448, 0.22299800237889944, 0.3062371933767005, 0.22110689276105455, 0.34561223719815837, 0.8861063169687938, 0.26799054620924945, 0.17178114739467565, 0.18160651091449653, 0.3193193351698894, 0.15855650373400554, 0.12556057897031025, 0.20065008772122905, 0.25395722167038726, 0.12747764305739417, 0.321133567722519, 0.1398714201959741, 0.15152679016960624, 0.19512391597429946, 0.12330982873775354, 0.14597896455736614, 0.14411982223437025, 0.12410599048231308, 0.12399719673509557, 0.1285850031101634, 0.13728170054250366, 0.13542743709523497, 0.21453457859921565, 0.05742440232422685, 0.012933726025606829, 9.999999999998899e-05, 9.999999999998899e-05, 0.014900833236043964, 0.0415326822809462, 0.05565465138097969, 9.999999999998899e-05, 0.06843260990358979, 0.1544286873780315, 0.2071505411639205, 0.12655613764256413, 0.06810470668659441, 0.027216117079403968, 0.0830818055324285, 0.1383625556169984, 0.10221552458891292, 0.12080970848439665, 0.18724964341426809, 0.12342270655949583, 0.2685881430579271, 0.08652773354048027, 0.14624616006529978, 0.0975103138555451, 0.20193679606585202, 0.2604685154123375, 0.10941784805790777, 0.08672516586774559, 0.1655861165968201, 0.28321174101978397, 0.21997959165317515, 0.1071933199119407, 0.04674826154818579, 0.07799911626992928, 0.1460276417933516, 0.0876116382286316, 0.5125177734024109, 0.3869034710449628, 0.5032907339645982, 0.47372018669504345, 0.3337983886735165, 0.5636011623528174, 0.6120957448198465, 0.42638193401199675, 0.5108297077536657, 0.10399150439659366, 0.07150743640710666, 0.07409246705806238, 0.0859851625058311, 0.13662371838350096, 0.1498191785665518, 0.11049174602033696, 0.17191843474507063, 0.12600026670836484, 0.19913343858974253, 0.18802028012067162, 0.1636699115681438, 0.15138487950475188, 0.14574444984592005, 0.19192087302961214, 0.1600806540705778, 0.17315515551381178, 0.18357215258033688, 0.2354804972681187, 0.22381299644501074, 0.31286641719988173, 0.2673940176175259, 0.292920201670843, 0.2985864224531779, 0.3593088889500998, 0.29371790395708264, 0.380860247943568, 0.25070718333838504, 0.17792855062756807, 0.25825195375057475, 0.20598336189372524, 0.33988420318845425, 0.17743224319248607, 0.21803687831694407, 0.264787714414531, 0.20767811055974394, 0.21692858277826188, 0.2409414029954836, 0.25611489029653745, 0.21238306186657552, 0.23697352625489698, 0.2303322371735429, 0.20481825355685324, 0.22581448161799722, 0.20099656057933446, 0.17488198335083238, 0.18678897396501548, 0.17915350773338012, 0.18423408497921379, 0.23536880886862233, 0.17941054495335107, 0.19490733606372046, 0.19228372214507894, 0.20054354218141168, 0.18341497557756592, 0.17413876720187094, 0.18044565597421147, 0.8685627412371859, 0.20124849387001031, 0.571954805844169, 0.6525767748072896, 0.7652022786773177, 0.5168263839484293, 0.39288623180590876, 0.2071058427075606, 0.5158824418046193, 0.5482637054783274, 0.1628942782760403, 0.20527288243962338, 0.3242459343105001, 0.35031381916325377, 0.24736999790214764, 0.19134412553331015, 0.1729551728512071, 0.19694804285852296, 0.1895364085213591, 0.1823502136193883, 0.1724108670323249, 0.18305985361965071, 0.1897746077505006, 0.182297325001184, 0.08931561984873859, 0.10222619156668211, 0.13079813374694582, 0.1023817780990095, 0.10051591114868863, 0.08620043190292603, 0.084900582984205, 0.07850837299872859, 0.1079851806123504]}, "mutation_prompt": null}
{"id": "1a5a4274-0abb-4b68-b144-9ca6565c5492", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_GA_Improved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.num_particles = 45  # Slightly increased to enhance diversity\n        self.w = 0.5  # Lowered inertia to encourage faster convergence\n        self.c1_initial = 1.8  # Higher initial cognitive component\n        self.c2_initial = 2.4  # Higher initial social component\n        self.mutation_rate = 0.2  # Reduced mutation rate for stability\n        self.crossover_rate = 0.5  # Adjusted for balanced exploration/exploitation\n\n    def __call__(self, func):\n        # Initialize particles\n        positions = np.random.uniform(self.lb, self.ub, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.num_particles, float('inf'))\n        global_best_position = np.zeros(self.dim)\n        global_best_score = float('inf')\n\n        eval_count = 0\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            scores = np.array([func(p) for p in positions])\n            eval_count += self.num_particles\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_scores[better_mask] = scores[better_mask]\n            personal_best_positions[better_mask] = positions[better_mask]\n\n            min_score_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[min_score_idx] < global_best_score:\n                global_best_score = personal_best_scores[min_score_idx]\n                global_best_position = personal_best_positions[min_score_idx]\n\n            # Adaptive cognitive and social components\n            adaptive_c1 = self.c1_initial * (1 - eval_count / self.budget)\n            adaptive_c2 = self.c2_initial * (eval_count / self.budget)\n\n            # Update velocities and positions using enhanced PSO-GA update rule\n            r1 = np.random.rand(self.num_particles, self.dim)\n            r2 = np.random.rand(self.num_particles, self.dim)\n            velocities = (self.w * velocities +\n                          adaptive_c1 * r1 * (personal_best_positions - positions) +\n                          adaptive_c2 * r2 * (global_best_position - positions))\n            # Neighborhood influence\n            neighbors = (np.roll(positions, 1, axis=0) + np.roll(positions, -1, axis=0)) / 2\n            velocities += 0.1 * (neighbors - positions)\n\n            positions += velocities\n            positions = np.clip(positions, self.lb, self.ub)\n\n            # Genetic Algorithm operations\n            for i in range(self.num_particles):\n                if np.random.rand() < self.crossover_rate:\n                    idxs = [idx for idx in range(self.num_particles) if idx != i]\n                    partner = positions[np.random.choice(idxs)]\n                    mask = np.random.rand(self.dim) < 0.5\n                    child = np.where(mask, positions[i], partner)\n\n                    if np.random.rand() < self.mutation_rate:\n                        mutation_idx = np.random.randint(self.dim)\n                        mutation_value = np.random.uniform(self.lb, self.ub)\n                        child[mutation_idx] = mutation_value\n\n                    child_score = func(child)\n                    eval_count += 1\n                    if child_score < scores[i]:\n                        positions[i] = child\n                        scores[i] = child_score\n\n                    if eval_count >= self.budget:\n                        break\n\n            # Update global best with the latest evaluations\n            current_best_idx = np.argmin(scores)\n            if scores[current_best_idx] < global_best_score:\n                global_best_score = scores[current_best_idx]\n                global_best_position = positions[current_best_idx]\n\n        return global_best_position", "name": "EnhancedHybridPSO_GA_Improved", "description": "A High-Speed Hybrid PSO-GA with Enhanced Adaptive Parameters and Neighborhood Influence to Boost Convergence Efficiency.", "configspace": "", "generation": 89, "fitness": 0.2044820631121892, "feedback": "The algorithm EnhancedHybridPSO_GA_Improved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.15.", "error": "", "parent_id": "71679915-b7d2-4246-a9b8-9b30791aa78f", "metadata": {"aucs": [0.4922493683204524, 0.5180760824601592, 0.4825617915966669, 0.32889662546383447, 0.4560922198757885, 0.3248680239046874, 0.3446866725517993, 0.4331880055493138, 0.366631945228695, 0.7437743066399397, 0.3076197858678411, 0.44613173686587415, 0.2734123175508756, 0.24218029701814325, 0.18532761621083904, 0.3572529263644907, 0.1358314760043159, 0.3446304626190241, 0.13010451501767695, 0.1677224791710774, 0.15610389959807758, 0.15771769842811245, 0.1177383364310326, 0.14130291072183754, 0.12140504274714825, 0.14551650120745474, 0.1639074367631287, 0.09231160345212341, 0.10262338716266617, 0.09267456228840931, 0.13745313123292868, 0.10734727952458711, 0.08455119658644539, 0.1178632257560146, 0.09697880453271757, 0.13077028422635173, 0.3575518435434376, 0.24626934794189614, 0.5121745869542209, 0.37325786803145466, 0.2833189594914566, 0.5601084296693795, 0.27221949053216665, 0.23190130583230262, 0.4040489496376285, 0.1348442950635843, 0.148632368410205, 0.10059269812617366, 0.15125787123195045, 0.1297504175948303, 0.1656314575257426, 0.13909381808153598, 0.12388411071569938, 0.10264487356548402, 0.16738950789454177, 0.22592878083747214, 0.1702939549966671, 0.25415769791597664, 0.33717762916499794, 0.1741162926210691, 0.2064669453036424, 0.1509436174253428, 0.17356467179473878, 0.229033342301997, 0.17247665329333906, 0.13091586799356225, 0.10806956554656355, 0.1326499860133079, 0.21316794241676285, 0.21897531719912555, 0.13844506468561935, 0.23216940022405697, 0.1273380101657431, 0.1803599240121112, 0.12435245038066822, 0.1262958787249474, 0.1499388594943557, 0.1264587333760444, 0.14499009757935233, 0.13617650763262845, 0.18626672727229288, 9.999999999998899e-05, 9.999999999998899e-05, 0.005298942699588083, 0.015240933711572868, 0.04950336257270227, 9.999999999998899e-05, 0.005980113213758909, 9.999999999998899e-05, 0.013529336747467258, 0.2096449596858988, 0.15163034460420843, 0.09438270990461128, 0.0964538397514132, 0.0703716290611206, 0.060688438994597305, 0.1280231949194025, 0.11415381052517493, 0.1242731205471882, 0.0046409905056858936, 0.0036496440606320624, 0.13802222500632977, 0.052193126430258086, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07888851926654206, 0.05260817370103632, 0.11137019100101275, 0.04863521276581051, 0.05949856618197713, 0.0740264178236999, 0.053428555829575286, 0.04936219173165701, 0.14372895389336715, 0.36514636130099465, 0.39613056536104674, 0.4006656943383181, 0.33399306235172477, 0.2962434819605513, 0.2849099940482144, 0.3835507625342208, 0.36616558392749976, 0.4380127833234836, 0.056113944582729, 0.07480516720193264, 0.12388897571899304, 0.12549107760309197, 0.11252200019518455, 0.12196906887029324, 0.08217357697782557, 0.1359770407130454, 0.10997677884660062, 0.31649362334225517, 0.17865078617948948, 0.157065778816184, 0.17799458780565003, 0.30106839277239683, 0.14117780209795816, 0.16041168241859594, 0.1398543613230253, 0.1880530837279205, 0.1816876414904114, 0.30556995483240224, 0.23782866642844613, 0.4012902373487426, 0.32804924266970026, 0.29489654003767896, 0.23388696460927072, 0.2975557155275177, 0.17119019771810784, 0.1886327203318201, 0.36955254481080646, 0.21010567265529467, 0.2052580071529504, 0.31049807267286145, 0.3108923103957866, 0.16063776514714523, 0.1945826231974892, 0.14685130687153491, 0.20447683188947896, 0.2086854789042304, 0.2266119288186993, 0.24435203079043544, 0.21655017512388197, 0.22329341257890367, 0.2145113389291312, 0.25933382648761694, 0.23720560589539497, 0.17383903524849498, 0.19002340297803122, 0.2018284754056916, 0.195000426899, 0.185513733600004, 0.20280420537693122, 0.1728451409609324, 0.18886520970942133, 0.18837946935305783, 0.18206765749647325, 0.18658632003995024, 0.18028506314091264, 0.8061655314794167, 0.19527463514950316, 0.6851477534973375, 0.7891956796033961, 0.16395956719282312, 0.6513150230873332, 0.584234476624081, 0.4861368784837382, 0.35553167742215697, 0.7111711870528463, 0.20353491259970324, 0.19007957916197815, 0.33079890047760196, 0.2994944655733863, 0.16686316146060998, 0.20478691961837936, 0.18179370422674057, 0.1924502150246521, 0.18054118404846065, 0.1863559682477266, 0.1786863855138472, 0.18746747650051399, 0.17603748097631122, 0.17163522839139533, 0.10535600713057536, 0.08722085329637286, 0.0908704180297063, 0.11430456861576055, 0.08910499424948115, 0.11469597192062808, 0.08044537651044559, 0.08921405241053948, 0.08479084849865337]}, "mutation_prompt": null}
{"id": "d38b8584-a2d1-49b7-b898-699a60dd509f", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_GA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.num_particles = 40  # Reduced to focus on promising areas\n        self.w = 0.6  # Adjusted inertia for balance between exploration and exploitation\n        self.c1 = 1.5  # Adaptive cognitive component\n        self.c2 = 2.2  # Increased social component to enhance attraction to global best\n        self.mutation_rate = 0.25  # Increased mutation rate for diversity\n        self.crossover_rate = 0.6  # Adjusted crossover rate for improved exploitation\n\n    def __call__(self, func):\n        # Initialize particles\n        positions = np.random.uniform(self.lb, self.ub, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.num_particles, float('inf'))\n        global_best_position = np.zeros(self.dim)\n        global_best_score = float('inf')\n\n        eval_count = 0\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            scores = np.array([func(p) for p in positions])\n            eval_count += self.num_particles\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_scores[better_mask] = scores[better_mask]\n            personal_best_positions[better_mask] = positions[better_mask]\n\n            min_score_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[min_score_idx] < global_best_score:\n                global_best_score = personal_best_scores[min_score_idx]\n                global_best_position = personal_best_positions[min_score_idx]\n\n            # Adaptive cognitive and social components\n            adaptive_c1 = self.c1 * np.exp(-eval_count / (0.4 * self.budget))\n            adaptive_c2 = self.c2 * (1 - np.exp(-eval_count / (0.4 * self.budget)))\n\n            # Update velocities and positions using hybrid PSO-GA update rule\n            r1 = np.random.rand(self.num_particles, self.dim)\n            r2 = np.random.rand(self.num_particles, self.dim)\n            velocities = (self.w * velocities +\n                          adaptive_c1 * r1 * (personal_best_positions - positions) +\n                          adaptive_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.lb, self.ub)\n\n            # Genetic Algorithm operations\n            for i in range(self.num_particles):\n                if np.random.rand() < self.crossover_rate:\n                    idxs = [idx for idx in range(self.num_particles) if idx != i]\n                    partner = positions[np.random.choice(idxs)]\n                    mask = np.random.rand(self.dim) < 0.5\n                    child = np.where(mask, positions[i], partner)\n\n                    if np.random.rand() < self.mutation_rate:\n                        mutation_idx = np.random.randint(self.dim)\n                        mutation_value = np.random.uniform(self.lb, self.ub)\n                        child[mutation_idx] = mutation_value\n\n                    child_score = func(child)\n                    eval_count += 1\n                    if child_score < scores[i]:\n                        positions[i] = child\n                        scores[i] = child_score\n\n                    if eval_count >= self.budget:\n                        break\n\n            # Update global best with the latest evaluations\n            current_best_idx = np.argmin(scores)\n            if scores[current_best_idx] < global_best_score:\n                global_best_score = scores[current_best_idx]\n                global_best_position = positions[current_best_idx]\n\n        return global_best_position", "name": "EnhancedHybridPSO_GA", "description": "Enhanced Hybrid PSO-GA with Dynamic Population Refinement and Targeted Mutation for Accelerated Convergence.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "71679915-b7d2-4246-a9b8-9b30791aa78f", "metadata": {"aucs": [0.8709116999593831, 0.8723138723777221, 0.8768372615335654, 0.8617868929087722, 0.8732786663332638, 0.8700165787014595, 0.7565562986219209, 0.868539258880491, 0.8709766980904352, 0.7164359951709853, 0.7048047712591957, 0.4776950380186241, 0.3855705320648811, 0.6623877477389744, 0.7604071468026499, 0.2925765172942847, 0.6462031836272428, 0.19553392270172443, 0.17303437138306488, 0.2311803368732268, 0.13147514920023173, 0.14639486955092984, 0.35218672427787756, 0.35487832224036875, 0.14866342766770446, 0.32622137780232907, 0.17580831107043648, 0.1364785949220515, 0.13723180340024177, 0.1415672077043013, 0.1034515896336532, 0.18768357811791359, 0.11499926313848663, 0.14052555748747397, 0.1397271088896036, 0.14224280497807062, 0.8572855482713462, 0.8816167955365596, 0.8719308246693213, 0.9193998394786392, 0.914420324363186, 0.868569508913773, 0.9178142773244033, 0.8901375456634961, 0.9104234556450416, 0.44374478233240466, 0.7135385169264723, 0.28224185632107246, 0.6757261041085597, 0.5347767213601308, 0.6924610301299955, 0.2150090318021105, 0.5979667369466203, 0.46334160313151795, 0.3816440509835938, 0.8871688407181226, 0.2215335955350327, 0.2782753108644027, 0.20804701301111983, 0.21414455095505636, 0.17006784993710677, 0.14936435372393353, 0.8927547238016643, 0.12598746301048813, 0.27674670478297914, 0.13402205898302322, 0.1989156862933854, 0.1637406030113836, 0.15700652057774145, 0.3784850467672597, 0.20359559468799404, 0.15199652764569382, 0.19805528150264373, 0.12909579769588853, 0.20974198883930295, 0.13618812474127684, 0.1676843122643138, 0.21199600895034987, 0.1806227083724674, 0.18720342152943903, 0.14286907178205843, 0.011209799583482005, 0.05529339075019002, 9.999999999998899e-05, 0.10832408699422724, 0.04279531077019072, 9.999999999998899e-05, 0.05451701182477431, 0.06287221396818243, 0.011708930366438275, 0.11851476671790695, 0.13042357546193484, 0.08751705868258464, 0.0737520182321394, 0.0674670842998144, 0.07040643281963133, 0.12270959020209427, 0.1635158390187902, 0.11337901101866699, 9.999999999998899e-05, 0.12060053095909329, 0.15135623777850848, 0.1888409906988574, 0.21600226247055165, 0.12214764580372828, 0.1405721141220454, 0.23155685722371033, 0.2630130022138708, 0.1288308910254673, 0.34621738907919575, 0.27668944855796795, 0.07016384558757949, 0.11322576437915599, 0.07104408037199961, 0.20232014360368966, 0.17029684759892205, 0.1043090462902142, 0.5275849797575713, 0.4916609332810673, 0.5484482146725321, 0.6025381266452674, 0.5669340898622877, 0.540035744668264, 0.5335086626702187, 0.5645246800771313, 0.5675543526425648, 0.10220124270145459, 0.17235856712732534, 0.09015062051346068, 0.14918869038205118, 0.14833937478444825, 0.1265665437173411, 0.13741787062809396, 0.10950728317396385, 0.10727360923944129, 0.1522830180351078, 0.19161055363162882, 0.22403061555925252, 0.19664252516112934, 0.19353340288045007, 0.2143631657275058, 0.22899864457304753, 0.20507301754383522, 0.16376887897753145, 0.25889297875502104, 0.30324011541506257, 0.20595125965070904, 0.273450660627921, 0.5507256147127081, 0.33491973351863924, 0.2679250418098513, 0.2868145497806951, 0.5045353871494462, 0.2422052565907501, 0.27251688689126796, 0.22336131551185512, 0.2281901599841637, 0.1532587735635741, 0.23681089449201387, 0.17474848273382282, 0.28874861636043514, 0.26641830685633283, 0.2296548129849213, 0.22112564705591653, 0.4116295558833244, 0.27429704557205437, 0.25393708255507086, 0.20692391605978377, 0.2326379270132466, 0.19551239397576992, 0.2154097795892288, 0.22901002088179723, 0.18804644526911107, 0.18831793637834637, 0.19084701804057014, 0.2870924905379486, 0.19422011941911022, 0.1967708819138012, 0.22007520569987904, 0.20426687081246941, 0.17535235983947695, 0.1956085758016729, 0.18513856718686927, 0.853351435696617, 0.3560060671921448, 0.8757283763917089, 0.8553559198811277, 0.16919964030308454, 0.13442874366711544, 0.5821816685326726, 0.719751672453101, 0.46208413758601397, 0.7491859575447042, 0.20931336361852104, 0.20509540991197794, 0.3883684528344128, 0.499071632722356, 0.3318319362175811, 0.19639170561099495, 0.19765120753207144, 0.1974169342458848, 0.20355066541306377, 0.17175700260853521, 0.17872396251533595, 0.18059120011176089, 0.17875517461522827, 0.196857160154308, 0.1007064099381123, 0.0992299406111311, 0.09211341496887471, 0.08741383495575883, 0.07795395188648158, 0.15317868552169456, 0.07059919688751182, 0.08629132951339868, 0.0918739748027434]}, "mutation_prompt": null}
{"id": "0fdfb382-f52e-4e25-9e05-b03e6e974816", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_GA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.num_particles = 40  # Reduced to focus on promising areas\n        self.w = 0.6  # Adjusted inertia for balance between exploration and exploitation\n        self.c1 = 1.5  # Adaptive cognitive component\n        self.c2 = 2.2  # Increased social component to enhance attraction to global best\n        self.mutation_rate = 0.25  # Increased mutation rate for diversity\n        self.crossover_rate = 0.6  # Adjusted crossover rate for improved exploitation\n\n    def __call__(self, func):\n        # Initialize particles\n        positions = np.random.uniform(self.lb, self.ub, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.num_particles, float('inf'))\n        global_best_position = np.zeros(self.dim)\n        global_best_score = float('inf')\n\n        eval_count = 0\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            scores = np.array([func(p) for p in positions])\n            eval_count += self.num_particles\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_scores[better_mask] = scores[better_mask]\n            personal_best_positions[better_mask] = positions[better_mask]\n\n            min_score_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[min_score_idx] < global_best_score:\n                global_best_score = personal_best_scores[min_score_idx]\n                global_best_position = personal_best_positions[min_score_idx]\n\n            # Adaptive cognitive and social components\n            adaptive_c1 = self.c1 * np.exp(-eval_count / (0.4 * self.budget))\n            adaptive_c2 = self.c2 * (1 - np.exp(-eval_count / (0.4 * self.budget)))\n\n            # Update velocities and positions using hybrid PSO-GA update rule\n            r1 = np.random.rand(self.num_particles, self.dim)\n            r2 = np.random.rand(self.num_particles, self.dim)\n            velocities = (self.w * velocities +\n                          adaptive_c1 * r1 * (personal_best_positions - positions) +\n                          adaptive_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.lb, self.ub)\n\n            # Genetic Algorithm operations\n            for i in range(self.num_particles):\n                if np.random.rand() < self.crossover_rate:\n                    idxs = [idx for idx in range(self.num_particles) if idx != i]\n                    partner = positions[np.random.choice(idxs)]\n                    mask = np.random.rand(self.dim) < 0.5\n                    child = np.where(mask, positions[i], partner)\n\n                    if np.random.rand() < self.mutation_rate:\n                        mutation_idx = np.random.randint(self.dim)\n                        mutation_value = np.random.uniform(self.lb, self.ub)\n                        child[mutation_idx] = mutation_value\n\n                    child_score = func(child)\n                    eval_count += 1\n                    if child_score < scores[i]:\n                        positions[i] = child\n                        scores[i] = child_score\n\n                    if eval_count >= self.budget:\n                        break\n\n            # Update global best with the latest evaluations\n            current_best_idx = np.argmin(scores)\n            if scores[current_best_idx] < global_best_score:\n                global_best_score = scores[current_best_idx]\n                global_best_position = positions[current_best_idx]\n\n        return global_best_position", "name": "EnhancedHybridPSO_GA", "description": "Enhanced Hybrid PSO-GA with Dynamic Population Refinement and Targeted Mutation for Accelerated Convergence.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "71679915-b7d2-4246-a9b8-9b30791aa78f", "metadata": {"aucs": [0.8709116999593831, 0.8723138723777221, 0.8768372615335654, 0.8617868929087722, 0.8732786663332638, 0.8700165787014595, 0.7565562986219209, 0.868539258880491, 0.8709766980904352, 0.7164359951709853, 0.7048047712591957, 0.4776950380186241, 0.3855705320648811, 0.6623877477389744, 0.7604071468026499, 0.2925765172942847, 0.6462031836272428, 0.19553392270172443, 0.17303437138306488, 0.2311803368732268, 0.13147514920023173, 0.14639486955092984, 0.35218672427787756, 0.35487832224036875, 0.14866342766770446, 0.32622137780232907, 0.17580831107043648, 0.1364785949220515, 0.13723180340024177, 0.1415672077043013, 0.1034515896336532, 0.18768357811791359, 0.11499926313848663, 0.14052555748747397, 0.1397271088896036, 0.14224280497807062, 0.8572855482713462, 0.8816167955365596, 0.8719308246693213, 0.9193998394786392, 0.914420324363186, 0.868569508913773, 0.9178142773244033, 0.8901375456634961, 0.9104234556450416, 0.44374478233240466, 0.7135385169264723, 0.28224185632107246, 0.6757261041085597, 0.5347767213601308, 0.6924610301299955, 0.2150090318021105, 0.5979667369466203, 0.46334160313151795, 0.3816440509835938, 0.8871688407181226, 0.2215335955350327, 0.2782753108644027, 0.20804701301111983, 0.21414455095505636, 0.17006784993710677, 0.14936435372393353, 0.8927547238016643, 0.12598746301048813, 0.27674670478297914, 0.13402205898302322, 0.1989156862933854, 0.1637406030113836, 0.15700652057774145, 0.3784850467672597, 0.20359559468799404, 0.15199652764569382, 0.19805528150264373, 0.12909579769588853, 0.20974198883930295, 0.13618812474127684, 0.1676843122643138, 0.21199600895034987, 0.1806227083724674, 0.18720342152943903, 0.14286907178205843, 0.011209799583482005, 0.05529339075019002, 9.999999999998899e-05, 0.10832408699422724, 0.04279531077019072, 9.999999999998899e-05, 0.05451701182477431, 0.06287221396818243, 0.011708930366438275, 0.11851476671790695, 0.13042357546193484, 0.08751705868258464, 0.0737520182321394, 0.0674670842998144, 0.07040643281963133, 0.12270959020209427, 0.1635158390187902, 0.11337901101866699, 9.999999999998899e-05, 0.12060053095909329, 0.15135623777850848, 0.1888409906988574, 0.21600226247055165, 0.12214764580372828, 0.1405721141220454, 0.23155685722371033, 0.2630130022138708, 0.1288308910254673, 0.34621738907919575, 0.27668944855796795, 0.07016384558757949, 0.11322576437915599, 0.07104408037199961, 0.20232014360368966, 0.17029684759892205, 0.1043090462902142, 0.5275849797575713, 0.4916609332810673, 0.5484482146725321, 0.6025381266452674, 0.5669340898622877, 0.540035744668264, 0.5335086626702187, 0.5645246800771313, 0.5675543526425648, 0.10220124270145459, 0.17235856712732534, 0.09015062051346068, 0.14918869038205118, 0.14833937478444825, 0.1265665437173411, 0.13741787062809396, 0.10950728317396385, 0.10727360923944129, 0.1522830180351078, 0.19161055363162882, 0.22403061555925252, 0.19664252516112934, 0.19353340288045007, 0.2143631657275058, 0.22899864457304753, 0.20507301754383522, 0.16376887897753145, 0.25889297875502104, 0.30324011541506257, 0.20595125965070904, 0.273450660627921, 0.5507256147127081, 0.33491973351863924, 0.2679250418098513, 0.2868145497806951, 0.5045353871494462, 0.2422052565907501, 0.27251688689126796, 0.22336131551185512, 0.2281901599841637, 0.1532587735635741, 0.23681089449201387, 0.17474848273382282, 0.28874861636043514, 0.26641830685633283, 0.2296548129849213, 0.22112564705591653, 0.4116295558833244, 0.27429704557205437, 0.25393708255507086, 0.20692391605978377, 0.2326379270132466, 0.19551239397576992, 0.2154097795892288, 0.22901002088179723, 0.18804644526911107, 0.18831793637834637, 0.19084701804057014, 0.2870924905379486, 0.19422011941911022, 0.1967708819138012, 0.22007520569987904, 0.20426687081246941, 0.17535235983947695, 0.1956085758016729, 0.18513856718686927, 0.853351435696617, 0.3560060671921448, 0.8757283763917089, 0.8553559198811277, 0.16919964030308454, 0.13442874366711544, 0.5821816685326726, 0.719751672453101, 0.46208413758601397, 0.7491859575447042, 0.20931336361852104, 0.20509540991197794, 0.3883684528344128, 0.499071632722356, 0.3318319362175811, 0.19639170561099495, 0.19765120753207144, 0.1974169342458848, 0.20355066541306377, 0.17175700260853521, 0.17872396251533595, 0.18059120011176089, 0.17875517461522827, 0.196857160154308, 0.1007064099381123, 0.0992299406111311, 0.09211341496887471, 0.08741383495575883, 0.07795395188648158, 0.15317868552169456, 0.07059919688751182, 0.08629132951339868, 0.0918739748027434]}, "mutation_prompt": null}
{"id": "a0aa27d0-5d29-4280-8172-50f601fe7580", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_GA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.num_particles = 40\n        self.w = 0.5  # Adjusted inertia for better convergence\n        self.c1_initial = 1.8  # Increase initial cognitive component\n        self.c2_initial = 2.0  # Slightly reduce initial social component\n        self.mutation_rate = 0.2  # Reduce mutation rate for more stability\n        self.crossover_rate = 0.7  # Increase crossover rate for faster exploration\n        self.decay_factor = 0.99  # Introduce decay factor for inertia weight\n\n    def __call__(self, func):\n        positions = np.random.uniform(self.lb, self.ub, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.num_particles, float('inf'))\n        global_best_position = np.zeros(self.dim)\n        global_best_score = float('inf')\n\n        eval_count = 0\n\n        while eval_count < self.budget:\n            scores = np.array([func(p) for p in positions])\n            eval_count += self.num_particles\n\n            better_mask = scores < personal_best_scores\n            personal_best_scores[better_mask] = scores[better_mask]\n            personal_best_positions[better_mask] = positions[better_mask]\n\n            min_score_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[min_score_idx] < global_best_score:\n                global_best_score = personal_best_scores[min_score_idx]\n                global_best_position = personal_best_positions[min_score_idx]\n\n            adaptive_c1 = self.c1_initial * (1 - (eval_count / self.budget))\n            adaptive_c2 = self.c2_initial * (eval_count / self.budget)\n            self.w *= self.decay_factor  # Decay inertia weight\n\n            r1 = np.random.rand(self.num_particles, self.dim)\n            r2 = np.random.rand(self.num_particles, self.dim)\n            velocities = (self.w * velocities +\n                          adaptive_c1 * r1 * (personal_best_positions - positions) +\n                          adaptive_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.lb, self.ub)\n\n            for i in range(self.num_particles):\n                if np.random.rand() < self.crossover_rate:\n                    idxs = [idx for idx in range(self.num_particles) if idx != i]\n                    partner = positions[np.random.choice(idxs)]\n                    mask = np.random.rand(self.dim) < 0.5\n                    child = np.where(mask, positions[i], partner)\n\n                    if np.random.rand() < self.mutation_rate:\n                        mutation_idx = np.random.randint(self.dim)\n                        mutation_value = np.random.uniform(self.lb, self.ub)\n                        child[mutation_idx] = mutation_value\n\n                    child_score = func(child)\n                    eval_count += 1\n                    if child_score < scores[i]:\n                        positions[i] = child\n                        scores[i] = child_score\n\n                    if eval_count >= self.budget:\n                        break\n\n            current_best_idx = np.argmin(scores)\n            if scores[current_best_idx] < global_best_score:\n                global_best_score = scores[current_best_idx]\n                global_best_position = positions[current_best_idx]\n\n        return global_best_position", "name": "EnhancedHybridPSO_GA", "description": "Enhanced Hybrid PSO-GA with Adaptive Learning Rates and Diversified Exploration for Improved Convergence.", "configspace": "", "generation": 92, "fitness": 0.21433727349420584, "feedback": "The algorithm EnhancedHybridPSO_GA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.14.", "error": "", "parent_id": "71679915-b7d2-4246-a9b8-9b30791aa78f", "metadata": {"aucs": [0.6121324041386453, 0.3849948122331709, 0.5012721543846177, 0.39479558424600214, 0.4569169970092831, 0.5106434193608815, 0.4217283131935917, 0.42080663265729656, 0.8320468507352274, 0.15152661333720885, 0.2672207068017268, 9.999999999998899e-05, 0.1255088440425821, 0.20469807007158014, 0.16821042852200319, 0.49353554795524646, 0.29236584459704795, 0.1507450053355095, 0.3165255789852869, 0.44493751720360275, 0.15059386816256826, 0.16539772719672763, 0.1225328251999066, 0.16155105275171977, 0.14897445816173516, 0.3346267397870001, 0.2565656733282443, 0.15223532419761887, 0.13522143970564593, 0.1355433103354753, 0.13952266210278963, 0.11399567676490585, 0.1333186493801033, 0.10450955264600015, 0.11169426140815031, 0.12160831752925227, 0.21770294354325193, 0.16127303381723213, 0.18074349820239, 0.2147513373458353, 0.19551964470013194, 0.16690359840298863, 0.18140083068127622, 0.16990268896166394, 0.19740344176217683, 0.161140055013265, 0.11665107489537441, 0.18058640887412036, 0.14974602968219752, 0.14160420810855923, 0.2021637397613969, 0.19961689312821784, 0.1119148885155904, 0.14734431002986115, 0.8332565263599252, 0.28288834867520574, 0.18614511658441124, 0.26895304379820284, 0.3580181400952266, 0.20502390707075502, 0.2100128336391628, 0.22382391404223367, 0.19031582567537908, 0.17882265739177527, 0.17459718079686715, 0.11012067197370834, 0.16811996096674864, 0.48162907291950385, 0.21641000981487946, 0.13700951972173936, 0.1251753772318016, 0.1656520549023608, 0.2111643221328543, 0.12227699354463273, 0.12070853394803238, 0.11905565221867598, 0.22798697419466596, 0.1343754064279412, 0.1429481654996847, 0.12562967960758198, 0.12773142732927079, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13113156996267006, 9.999999999998899e-05, 0.0715658951562067, 0.08284093835892947, 9.999999999998899e-05, 0.07615447988479263, 0.18705614842951102, 0.16995548577949282, 0.1283254118334165, 0.07333255542988804, 0.13958003866479374, 0.1871155389811433, 0.14185519657136936, 0.13456078570372865, 0.1606283227203983, 9.999999999998899e-05, 0.15386289481109894, 0.2710041383252513, 0.10890338307134573, 9.999999999998899e-05, 0.0864853463215628, 0.13232451666001221, 0.013615762621566496, 0.11221773878308217, 0.12319487553407349, 0.183696689721926, 0.07043717652224346, 0.10398743854190229, 0.0567759102008476, 0.18820082487431833, 0.19919760247124507, 0.19053662738837762, 0.09830789048126976, 0.4051486420160455, 0.4090091526919942, 0.39029720382572364, 0.39670776353320747, 0.3998217247704262, 0.4888429811407262, 0.3565317483576368, 0.49593603023755717, 0.326433407522026, 0.10440882250947447, 0.13322097192442017, 0.08649256270569838, 0.1304350126068986, 0.10147410245693134, 0.1674175485024363, 0.12178070756296366, 0.12040898716697335, 0.1312016992260373, 0.19696316545665482, 0.19164803900030591, 0.16074517930787136, 0.13294789942499297, 0.1649973198803507, 0.1597064086823291, 0.15737693281556442, 0.175997383656316, 0.21684531235841364, 0.3309960733412901, 0.2754574518920343, 0.22719309569077473, 0.2735147196404917, 0.21843239736736575, 0.31611325871975027, 0.2400389931086977, 0.29277298623444026, 0.2559875532075202, 0.19785662261677084, 0.2601626007142571, 0.14936693260948197, 0.21929078342604602, 0.24831788641895702, 0.22465380000746404, 0.2511209977782094, 0.1777026275933371, 0.19547736314342357, 0.24876986001865065, 0.18637106199172626, 0.23198534306186003, 0.20366874878057661, 0.23204899892178932, 0.20815206223736538, 0.20848966445928474, 0.20065844718170966, 0.21609335788200246, 0.2320660005721369, 0.19129942294072255, 0.19912853584536994, 0.24062013739473564, 0.3520537455097176, 0.21295258410270101, 0.2636735289412263, 0.23416095687252358, 0.1873042462359905, 0.37477766279274216, 0.4938490887526016, 0.18124623215119295, 0.6579745051191295, 0.39429451022376616, 0.46023274139143433, 0.47889960577043544, 0.16075069854931112, 0.5780889763510723, 0.35094732002216333, 0.4237558230926891, 0.42244985153828674, 0.345618378670168, 0.20147338929253433, 0.4652269065491179, 0.24482966695587427, 0.16408768401544294, 0.28844533492531277, 0.17554022282035275, 0.18264980149506327, 0.18002085877080864, 0.17652767816099202, 0.2095330515449989, 0.2189744707376713, 0.19060092993966404, 0.17539027086809034, 0.17736124866312297, 0.10679782119557968, 0.1020720548258951, 0.08719411124510956, 0.09403892244476608, 0.08341416544402147, 0.09771828579120323, 0.08878234272718222, 0.08931666617962442, 0.08684625066709084]}, "mutation_prompt": null}
{"id": "9437b7fa-2505-4516-99d6-66d345eb970c", "solution": "import numpy as np\n\nclass EnhancedHybridPSO_GA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.num_particles = 40  # Reduced to focus on promising areas\n        self.w = 0.6  # Adjusted inertia for balance between exploration and exploitation\n        self.c1 = 1.5  # Adaptive cognitive component\n        self.c2 = 2.2  # Increased social component to enhance attraction to global best\n        self.mutation_rate = 0.25  # Increased mutation rate for diversity\n        self.crossover_rate = 0.6  # Adjusted crossover rate for improved exploitation\n\n    def __call__(self, func):\n        # Initialize particles\n        positions = np.random.uniform(self.lb, self.ub, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-0.1, 0.1, (self.num_particles, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.num_particles, float('inf'))\n        global_best_position = np.zeros(self.dim)\n        global_best_score = float('inf')\n\n        eval_count = 0\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            scores = np.array([func(p) for p in positions])\n            eval_count += self.num_particles\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_scores[better_mask] = scores[better_mask]\n            personal_best_positions[better_mask] = positions[better_mask]\n\n            min_score_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[min_score_idx] < global_best_score:\n                global_best_score = personal_best_scores[min_score_idx]\n                global_best_position = personal_best_positions[min_score_idx]\n\n            # Adaptive cognitive and social components\n            adaptive_c1 = self.c1 * np.exp(-eval_count / (0.4 * self.budget))\n            adaptive_c2 = self.c2 * (1 - np.exp(-eval_count / (0.4 * self.budget)))\n\n            # Update velocities and positions using hybrid PSO-GA update rule\n            r1 = np.random.rand(self.num_particles, self.dim)\n            r2 = np.random.rand(self.num_particles, self.dim)\n            velocities = (self.w * velocities +\n                          adaptive_c1 * r1 * (personal_best_positions - positions) +\n                          adaptive_c2 * r2 * (global_best_position - positions))\n            positions += velocities\n            positions = np.clip(positions, self.lb, self.ub)\n\n            # Genetic Algorithm operations\n            for i in range(self.num_particles):\n                if np.random.rand() < self.crossover_rate:\n                    idxs = [idx for idx in range(self.num_particles) if idx != i]\n                    partner = positions[np.random.choice(idxs)]\n                    mask = np.random.rand(self.dim) < 0.5\n                    child = np.where(mask, positions[i], partner)\n\n                    if np.random.rand() < self.mutation_rate:\n                        mutation_idx = np.random.randint(self.dim)\n                        mutation_value = np.random.uniform(self.lb, self.ub)\n                        child[mutation_idx] = mutation_value\n\n                    child_score = func(child)\n                    eval_count += 1\n                    if child_score < scores[i]:\n                        positions[i] = child\n                        scores[i] = child_score\n\n                    if eval_count >= self.budget:\n                        break\n\n            # Update global best with the latest evaluations\n            current_best_idx = np.argmin(scores)\n            if scores[current_best_idx] < global_best_score:\n                global_best_score = scores[current_best_idx]\n                global_best_position = positions[current_best_idx]\n\n        return global_best_position", "name": "EnhancedHybridPSO_GA", "description": "Enhanced Hybrid PSO-GA with Dynamic Population Refinement and Targeted Mutation for Accelerated Convergence.", "configspace": "", "generation": 29, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "71679915-b7d2-4246-a9b8-9b30791aa78f", "metadata": {"aucs": [0.8709116999593831, 0.8723138723777221, 0.8768372615335654, 0.8617868929087722, 0.8732786663332638, 0.8700165787014595, 0.7565562986219209, 0.868539258880491, 0.8709766980904352, 0.7164359951709853, 0.7048047712591957, 0.4776950380186241, 0.3855705320648811, 0.6623877477389744, 0.7604071468026499, 0.2925765172942847, 0.6462031836272428, 0.19553392270172443, 0.17303437138306488, 0.2311803368732268, 0.13147514920023173, 0.14639486955092984, 0.35218672427787756, 0.35487832224036875, 0.14866342766770446, 0.32622137780232907, 0.17580831107043648, 0.1364785949220515, 0.13723180340024177, 0.1415672077043013, 0.1034515896336532, 0.18768357811791359, 0.11499926313848663, 0.14052555748747397, 0.1397271088896036, 0.14224280497807062, 0.8572855482713462, 0.8816167955365596, 0.8719308246693213, 0.9193998394786392, 0.914420324363186, 0.868569508913773, 0.9178142773244033, 0.8901375456634961, 0.9104234556450416, 0.44374478233240466, 0.7135385169264723, 0.28224185632107246, 0.6757261041085597, 0.5347767213601308, 0.6924610301299955, 0.2150090318021105, 0.5979667369466203, 0.46334160313151795, 0.3816440509835938, 0.8871688407181226, 0.2215335955350327, 0.2782753108644027, 0.20804701301111983, 0.21414455095505636, 0.17006784993710677, 0.14936435372393353, 0.8927547238016643, 0.12598746301048813, 0.27674670478297914, 0.13402205898302322, 0.1989156862933854, 0.1637406030113836, 0.15700652057774145, 0.3784850467672597, 0.20359559468799404, 0.15199652764569382, 0.19805528150264373, 0.12909579769588853, 0.20974198883930295, 0.13618812474127684, 0.1676843122643138, 0.21199600895034987, 0.1806227083724674, 0.18720342152943903, 0.14286907178205843, 0.011209799583482005, 0.05529339075019002, 9.999999999998899e-05, 0.10832408699422724, 0.04279531077019072, 9.999999999998899e-05, 0.05451701182477431, 0.06287221396818243, 0.011708930366438275, 0.11851476671790695, 0.13042357546193484, 0.08751705868258464, 0.0737520182321394, 0.0674670842998144, 0.07040643281963133, 0.12270959020209427, 0.1635158390187902, 0.11337901101866699, 9.999999999998899e-05, 0.12060053095909329, 0.15135623777850848, 0.1888409906988574, 0.21600226247055165, 0.12214764580372828, 0.1405721141220454, 0.23155685722371033, 0.2630130022138708, 0.1288308910254673, 0.34621738907919575, 0.27668944855796795, 0.07016384558757949, 0.11322576437915599, 0.07104408037199961, 0.20232014360368966, 0.17029684759892205, 0.1043090462902142, 0.5275849797575713, 0.4916609332810673, 0.5484482146725321, 0.6025381266452674, 0.5669340898622877, 0.540035744668264, 0.5335086626702187, 0.5645246800771313, 0.5675543526425648, 0.10220124270145459, 0.17235856712732534, 0.09015062051346068, 0.14918869038205118, 0.14833937478444825, 0.1265665437173411, 0.13741787062809396, 0.10950728317396385, 0.10727360923944129, 0.1522830180351078, 0.19161055363162882, 0.22403061555925252, 0.19664252516112934, 0.19353340288045007, 0.2143631657275058, 0.22899864457304753, 0.20507301754383522, 0.16376887897753145, 0.25889297875502104, 0.30324011541506257, 0.20595125965070904, 0.273450660627921, 0.5507256147127081, 0.33491973351863924, 0.2679250418098513, 0.2868145497806951, 0.5045353871494462, 0.2422052565907501, 0.27251688689126796, 0.22336131551185512, 0.2281901599841637, 0.1532587735635741, 0.23681089449201387, 0.17474848273382282, 0.28874861636043514, 0.26641830685633283, 0.2296548129849213, 0.22112564705591653, 0.4116295558833244, 0.27429704557205437, 0.25393708255507086, 0.20692391605978377, 0.2326379270132466, 0.19551239397576992, 0.2154097795892288, 0.22901002088179723, 0.18804644526911107, 0.18831793637834637, 0.19084701804057014, 0.2870924905379486, 0.19422011941911022, 0.1967708819138012, 0.22007520569987904, 0.20426687081246941, 0.17535235983947695, 0.1956085758016729, 0.18513856718686927, 0.853351435696617, 0.3560060671921448, 0.8757283763917089, 0.8553559198811277, 0.16919964030308454, 0.13442874366711544, 0.5821816685326726, 0.719751672453101, 0.46208413758601397, 0.7491859575447042, 0.20931336361852104, 0.20509540991197794, 0.3883684528344128, 0.499071632722356, 0.3318319362175811, 0.19639170561099495, 0.19765120753207144, 0.1974169342458848, 0.20355066541306377, 0.17175700260853521, 0.17872396251533595, 0.18059120011176089, 0.17875517461522827, 0.196857160154308, 0.1007064099381123, 0.0992299406111311, 0.09211341496887471, 0.08741383495575883, 0.07795395188648158, 0.15317868552169456, 0.07059919688751182, 0.08629132951339868, 0.0918739748027434]}, "mutation_prompt": null}
{"id": "169a1a9e-6064-4987-9739-35cbdbea720d", "solution": "import numpy as np\n\nclass AdaptiveMultiStrategyPSO_GA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.num_particles = 35  # Slightly reduced particle count for focused exploration\n        self.w = 0.7  # Adjusted inertia for better convergence balance\n        self.c1 = 1.3  # Refined cognitive component for adaptive learning\n        self.c2 = 2.0  # Slightly reduced social component for controlled attraction\n        self.mutation_rate = 0.3  # Further increased mutation rate for diversity\n        self.crossover_rate = 0.65  # Adjusted crossover rate for enhanced exploration\n\n    def __call__(self, func):\n        # Initialize particles\n        positions = np.random.uniform(self.lb, self.ub, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-0.2, 0.2, (self.num_particles, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.num_particles, float('inf'))\n        global_best_position = np.zeros(self.dim)\n        global_best_score = float('inf')\n\n        eval_count = 0\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            scores = np.array([func(p) for p in positions])\n            eval_count += self.num_particles\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_scores[better_mask] = scores[better_mask]\n            personal_best_positions[better_mask] = positions[better_mask]\n\n            min_score_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[min_score_idx] < global_best_score:\n                global_best_score = personal_best_scores[min_score_idx]\n                global_best_position = personal_best_positions[min_score_idx]\n\n            # Adaptive cognitive and social components\n            adaptive_c1 = self.c1 * np.exp(-eval_count / (0.5 * self.budget))\n            adaptive_c2 = self.c2 * (1 - np.exp(-eval_count / (0.5 * self.budget)))\n\n            # Update velocities and positions using enhanced PSO-GA update rule\n            r1 = np.random.rand(self.num_particles, self.dim)\n            r2 = np.random.rand(self.num_particles, self.dim)\n            velocities = (self.w * velocities +\n                          adaptive_c1 * r1 * (personal_best_positions - positions) +\n                          adaptive_c2 * r2 * (global_best_position - positions))\n            velocities = np.clip(velocities, -0.4, 0.4)  # Enhanced velocity control\n            positions += velocities\n            positions = np.clip(positions, self.lb, self.ub)\n\n            # Genetic Algorithm operations with mutation strategy\n            for i in range(self.num_particles):\n                if np.random.rand() < self.crossover_rate:\n                    idxs = [idx for idx in range(self.num_particles) if idx != i]\n                    partner = positions[np.random.choice(idxs)]\n                    mask = np.random.rand(self.dim) < 0.5\n                    child = np.where(mask, positions[i], partner)\n\n                    if np.random.rand() < self.mutation_rate:\n                        mutation_idx = np.random.randint(self.dim)\n                        mutation_value = np.random.uniform(self.lb, self.ub)\n                        child[mutation_idx] = mutation_value\n\n                    child_score = func(child)\n                    eval_count += 1\n                    if child_score < scores[i]:\n                        positions[i] = child\n                        scores[i] = child_score\n\n                    if eval_count >= self.budget:\n                        break\n\n            # Update global best with the latest evaluations\n            current_best_idx = np.argmin(scores)\n            if scores[current_best_idx] < global_best_score:\n                global_best_score = scores[current_best_idx]\n                global_best_position = positions[current_best_idx]\n\n        return global_best_position", "name": "AdaptiveMultiStrategyPSO_GA", "description": "Adaptive Multi-strategy PSO-GA with Enhanced Velocity Update and Dynamic Mutation for Improved Convergence.", "configspace": "", "generation": 94, "fitness": 0.31544537830089153, "feedback": "The algorithm AdaptiveMultiStrategyPSO_GA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.26.", "error": "", "parent_id": "71679915-b7d2-4246-a9b8-9b30791aa78f", "metadata": {"aucs": [0.8532980634403733, 0.8515548496121921, 0.8688097571017265, 0.8071721686742714, 0.853157119178079, 0.8307354241796217, 0.8286757400144759, 0.8549927290286653, 0.843781321529528, 0.6527660062281768, 0.6406005960588572, 0.5040697881708076, 0.675041275421356, 0.6827444218264302, 0.6201685162795976, 0.6220168502451284, 0.7247255467421136, 0.6783808397022812, 0.1565810303004782, 0.2873007505724975, 0.10311380457419039, 0.15133503723616049, 0.1674912238137305, 0.17083269460224215, 0.2140167083530713, 0.1905192823585259, 0.13548009758131307, 0.15138099164000474, 0.1579722867412171, 0.12350880778225493, 0.1389472265811169, 0.1228760268290191, 0.12316068198457253, 0.1721926532850654, 0.1429982836385012, 0.0967884700275563, 0.9074551804006845, 0.905961037469736, 0.8840420750513517, 0.8586149949092341, 0.9242520859143005, 0.8624343683529359, 0.898795976572739, 0.8715998814645303, 0.8888937716065612, 0.646494404917513, 0.40071584012797823, 0.5054828554325781, 0.27198689814123433, 0.4828349451111783, 0.6759996411022748, 0.4125488774613192, 0.5030156299399278, 0.37765470791286326, 0.8492199323323099, 0.20373335258261527, 0.2196293545996647, 0.3528556993923567, 0.34488621590179713, 0.2692635346692994, 0.2285976207204342, 0.22859776682520871, 0.29153238668513226, 0.1750175972022171, 0.263818542508499, 0.147684888049738, 0.2020258492646544, 0.16461490993618388, 0.16690495813846795, 0.1795895765456842, 0.16277650570526225, 0.17147440561954463, 0.18921760442098512, 0.19998043397189713, 0.12874787814760524, 0.2448860162017873, 0.12659436970309512, 0.17202064070631606, 0.20155502437732475, 0.17547286683543695, 0.11233432090365025, 0.024910594844975487, 9.999999999998899e-05, 0.08852659128023277, 0.10747811779023864, 9.999999999998899e-05, 0.08005938363532172, 0.03930742917701591, 9.999999999998899e-05, 9.999999999998899e-05, 0.18890529982058046, 0.11208876766759135, 0.16488634871356012, 0.0852915093812906, 0.09017811240006945, 0.028776588848462015, 0.1653972729646832, 0.11615287536181518, 0.10871306709393014, 0.27422337340980263, 0.15187361787862574, 0.2161589089811391, 0.13917885837853627, 0.10646464334029337, 0.08979913134927842, 0.20840940684458176, 0.09885471837371373, 0.10234120402039659, 0.21634664289431726, 0.20709902584498607, 0.23588696255137298, 0.12024078586470055, 0.12908588624068418, 0.09741239397388124, 0.08327591273104429, 0.2084706951795683, 0.08008170998489528, 0.5473547210117865, 0.6600076450054875, 0.5399051842662417, 0.6362055471477032, 0.4979905022049751, 0.5373207624165965, 0.5796048565828218, 0.5707303719891272, 0.569358926525704, 0.1264351209982595, 0.1286474572596089, 0.1078338761027835, 0.136150220493921, 0.11225875859470502, 0.14951166543430883, 0.08270695569383257, 0.13858855007467974, 0.15180670225434845, 0.4255678218974619, 0.19697818572563897, 0.2351288639873368, 0.19658975753906993, 0.27931079117807345, 0.17043656493014392, 0.17928483182189703, 0.1455878834721014, 0.22132643956332365, 0.31682495982163705, 0.26383340041609704, 0.22327480199025163, 0.3877012777902762, 0.3662726334174585, 0.3512772747255991, 0.3603302471639287, 0.23421529438116506, 0.2354636234610723, 0.2579433712306646, 0.2235590716358823, 0.21678344427998386, 0.19736701168173532, 0.2127298284472634, 0.23960002738745811, 0.26371123914294836, 0.2546717040566199, 0.3323160682128825, 0.21935577282548124, 0.23502477514789366, 0.2228823863414916, 0.2281817416587082, 0.23280224058711918, 0.20711589412403975, 0.22565259173970775, 0.22330944846500655, 0.19798593394239294, 0.21861223582463107, 0.19178906644687088, 0.19446981769038174, 0.2016165783201188, 0.18411453488897123, 0.22393709653709004, 0.21036098793117664, 0.20689084313011674, 0.24480656074258345, 0.16638762813588237, 0.8427522613076992, 0.18424504514902684, 0.8845994552222765, 0.1968371147581489, 0.9035492163595454, 0.8338980342223921, 0.8780927503468552, 0.8212642039492313, 0.8241908518283327, 0.15573390005925014, 0.7846068891737246, 0.127331223110827, 0.1642867210699902, 0.779628971267873, 0.1103997182592662, 0.8253096305919537, 0.16378261310194664, 0.19139349468751043, 0.1726028213733547, 0.18894302056787815, 0.1875749011136867, 0.21206370479930958, 0.19085284485467557, 0.19087420936555366, 0.19668797232905721, 0.19783485770638443, 0.09594539097677679, 0.08965404102023711, 0.08146117327552715, 0.09335062624193435, 0.08526040507651544, 0.08803484967763542, 0.09161508630385473, 0.09220913436011324, 0.09625586959680654]}, "mutation_prompt": null}
{"id": "0ad69e6b-1e0f-47ba-bb7a-3d543405f486", "solution": "import numpy as np\n\nclass AdaptiveMultiStrategyPSO_GA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.num_particles = 35  # Slightly reduced particle count for focused exploration\n        self.w = 0.7  # Adjusted inertia for better convergence balance\n        self.c1 = 1.3  # Refined cognitive component for adaptive learning\n        self.c2 = 2.0  # Slightly reduced social component for controlled attraction\n        self.mutation_rate = 0.3  # Further increased mutation rate for diversity\n        self.crossover_rate = 0.65  # Adjusted crossover rate for enhanced exploration\n\n    def __call__(self, func):\n        # Initialize particles\n        positions = np.random.uniform(self.lb, self.ub, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-0.2, 0.2, (self.num_particles, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.num_particles, float('inf'))\n        global_best_position = np.zeros(self.dim)\n        global_best_score = float('inf')\n\n        eval_count = 0\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            scores = np.array([func(p) for p in positions])\n            eval_count += self.num_particles\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_scores[better_mask] = scores[better_mask]\n            personal_best_positions[better_mask] = positions[better_mask]\n\n            min_score_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[min_score_idx] < global_best_score:\n                global_best_score = personal_best_scores[min_score_idx]\n                global_best_position = personal_best_positions[min_score_idx]\n\n            # Adaptive cognitive and social components\n            adaptive_c1 = self.c1 * np.exp(-eval_count / (0.5 * self.budget))\n            adaptive_c2 = self.c2 * (1 - np.exp(-eval_count / (0.5 * self.budget)))\n\n            # Update velocities and positions using enhanced PSO-GA update rule\n            r1 = np.random.rand(self.num_particles, self.dim)\n            r2 = np.random.rand(self.num_particles, self.dim)\n            velocities = (self.w * velocities +\n                          adaptive_c1 * r1 * (personal_best_positions - positions) +\n                          adaptive_c2 * r2 * (global_best_position - positions))\n            velocities = np.clip(velocities, -0.4, 0.4)  # Enhanced velocity control\n            positions += velocities\n            positions = np.clip(positions, self.lb, self.ub)\n\n            # Genetic Algorithm operations with mutation strategy\n            for i in range(self.num_particles):\n                if np.random.rand() < self.crossover_rate:\n                    idxs = [idx for idx in range(self.num_particles) if idx != i]\n                    partner = positions[np.random.choice(idxs)]\n                    mask = np.random.rand(self.dim) < 0.5\n                    child = np.where(mask, positions[i], partner)\n\n                    if np.random.rand() < self.mutation_rate:\n                        mutation_idx = np.random.randint(self.dim)\n                        mutation_value = np.random.uniform(self.lb, self.ub)\n                        child[mutation_idx] = mutation_value\n\n                    child_score = func(child)\n                    eval_count += 1\n                    if child_score < scores[i]:\n                        positions[i] = child\n                        scores[i] = child_score\n\n                    if eval_count >= self.budget:\n                        break\n\n            # Update global best with the latest evaluations\n            current_best_idx = np.argmin(scores)\n            if scores[current_best_idx] < global_best_score:\n                global_best_score = scores[current_best_idx]\n                global_best_position = positions[current_best_idx]\n\n        return global_best_position", "name": "AdaptiveMultiStrategyPSO_GA", "description": "Adaptive Multi-strategy PSO-GA with Enhanced Velocity Update and Dynamic Mutation for Improved Convergence.", "configspace": "", "generation": 95, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "169a1a9e-6064-4987-9739-35cbdbea720d", "metadata": {"aucs": [0.8532980634403733, 0.8515548496121921, 0.8688097571017265, 0.8071721686742714, 0.853157119178079, 0.8307354241796217, 0.8286757400144759, 0.8549927290286653, 0.843781321529528, 0.6527660062281768, 0.6406005960588572, 0.5040697881708076, 0.675041275421356, 0.6827444218264302, 0.6201685162795976, 0.6220168502451284, 0.7247255467421136, 0.6783808397022812, 0.1565810303004782, 0.2873007505724975, 0.10311380457419039, 0.15133503723616049, 0.1674912238137305, 0.17083269460224215, 0.2140167083530713, 0.1905192823585259, 0.13548009758131307, 0.15138099164000474, 0.1579722867412171, 0.12350880778225493, 0.1389472265811169, 0.1228760268290191, 0.12316068198457253, 0.1721926532850654, 0.1429982836385012, 0.0967884700275563, 0.9074551804006845, 0.905961037469736, 0.8840420750513517, 0.8586149949092341, 0.9242520859143005, 0.8624343683529359, 0.898795976572739, 0.8715998814645303, 0.8888937716065612, 0.646494404917513, 0.40071584012797823, 0.5054828554325781, 0.27198689814123433, 0.4828349451111783, 0.6759996411022748, 0.4125488774613192, 0.5030156299399278, 0.37765470791286326, 0.8492199323323099, 0.20373335258261527, 0.2196293545996647, 0.3528556993923567, 0.34488621590179713, 0.2692635346692994, 0.2285976207204342, 0.22859776682520871, 0.29153238668513226, 0.1750175972022171, 0.263818542508499, 0.147684888049738, 0.2020258492646544, 0.16461490993618388, 0.16690495813846795, 0.1795895765456842, 0.16277650570526225, 0.17147440561954463, 0.18921760442098512, 0.19998043397189713, 0.12874787814760524, 0.2448860162017873, 0.12659436970309512, 0.17202064070631606, 0.20155502437732475, 0.17547286683543695, 0.11233432090365025, 0.024910594844975487, 9.999999999998899e-05, 0.08852659128023277, 0.10747811779023864, 9.999999999998899e-05, 0.08005938363532172, 0.03930742917701591, 9.999999999998899e-05, 9.999999999998899e-05, 0.18890529982058046, 0.11208876766759135, 0.16488634871356012, 0.0852915093812906, 0.09017811240006945, 0.028776588848462015, 0.1653972729646832, 0.11615287536181518, 0.10871306709393014, 0.27422337340980263, 0.15187361787862574, 0.2161589089811391, 0.13917885837853627, 0.10646464334029337, 0.08979913134927842, 0.20840940684458176, 0.09885471837371373, 0.10234120402039659, 0.21634664289431726, 0.20709902584498607, 0.23588696255137298, 0.12024078586470055, 0.12908588624068418, 0.09741239397388124, 0.08327591273104429, 0.2084706951795683, 0.08008170998489528, 0.5473547210117865, 0.6600076450054875, 0.5399051842662417, 0.6362055471477032, 0.4979905022049751, 0.5373207624165965, 0.5796048565828218, 0.5707303719891272, 0.569358926525704, 0.1264351209982595, 0.1286474572596089, 0.1078338761027835, 0.136150220493921, 0.11225875859470502, 0.14951166543430883, 0.08270695569383257, 0.13858855007467974, 0.15180670225434845, 0.4255678218974619, 0.19697818572563897, 0.2351288639873368, 0.19658975753906993, 0.27931079117807345, 0.17043656493014392, 0.17928483182189703, 0.1455878834721014, 0.22132643956332365, 0.31682495982163705, 0.26383340041609704, 0.22327480199025163, 0.3877012777902762, 0.3662726334174585, 0.3512772747255991, 0.3603302471639287, 0.23421529438116506, 0.2354636234610723, 0.2579433712306646, 0.2235590716358823, 0.21678344427998386, 0.19736701168173532, 0.2127298284472634, 0.23960002738745811, 0.26371123914294836, 0.2546717040566199, 0.3323160682128825, 0.21935577282548124, 0.23502477514789366, 0.2228823863414916, 0.2281817416587082, 0.23280224058711918, 0.20711589412403975, 0.22565259173970775, 0.22330944846500655, 0.19798593394239294, 0.21861223582463107, 0.19178906644687088, 0.19446981769038174, 0.2016165783201188, 0.18411453488897123, 0.22393709653709004, 0.21036098793117664, 0.20689084313011674, 0.24480656074258345, 0.16638762813588237, 0.8427522613076992, 0.18424504514902684, 0.8845994552222765, 0.1968371147581489, 0.9035492163595454, 0.8338980342223921, 0.8780927503468552, 0.8212642039492313, 0.8241908518283327, 0.15573390005925014, 0.7846068891737246, 0.127331223110827, 0.1642867210699902, 0.779628971267873, 0.1103997182592662, 0.8253096305919537, 0.16378261310194664, 0.19139349468751043, 0.1726028213733547, 0.18894302056787815, 0.1875749011136867, 0.21206370479930958, 0.19085284485467557, 0.19087420936555366, 0.19668797232905721, 0.19783485770638443, 0.09594539097677679, 0.08965404102023711, 0.08146117327552715, 0.09335062624193435, 0.08526040507651544, 0.08803484967763542, 0.09161508630385473, 0.09220913436011324, 0.09625586959680654]}, "mutation_prompt": null}
{"id": "710d4e17-d165-497b-8663-9afe75910627", "solution": "import numpy as np\n\nclass AdaptiveMultiStrategyPSO_GA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.num_particles = 35  # Slightly reduced particle count for focused exploration\n        self.w = 0.7  # Adjusted inertia for better convergence balance\n        self.c1 = 1.3  # Refined cognitive component for adaptive learning\n        self.c2 = 2.0  # Slightly reduced social component for controlled attraction\n        self.mutation_rate = 0.3  # Further increased mutation rate for diversity\n        self.crossover_rate = 0.65  # Adjusted crossover rate for enhanced exploration\n\n    def __call__(self, func):\n        # Initialize particles\n        positions = np.random.uniform(self.lb, self.ub, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-0.2, 0.2, (self.num_particles, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.num_particles, float('inf'))\n        global_best_position = np.zeros(self.dim)\n        global_best_score = float('inf')\n\n        eval_count = 0\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            scores = np.array([func(p) for p in positions])\n            eval_count += self.num_particles\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_scores[better_mask] = scores[better_mask]\n            personal_best_positions[better_mask] = positions[better_mask]\n\n            min_score_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[min_score_idx] < global_best_score:\n                global_best_score = personal_best_scores[min_score_idx]\n                global_best_position = personal_best_positions[min_score_idx]\n\n            # Adaptive cognitive and social components\n            adaptive_c1 = self.c1 * np.exp(-eval_count / (0.5 * self.budget))\n            adaptive_c2 = self.c2 * (1 - np.exp(-eval_count / (0.5 * self.budget)))\n\n            # Update velocities and positions using enhanced PSO-GA update rule\n            r1 = np.random.rand(self.num_particles, self.dim)\n            r2 = np.random.rand(self.num_particles, self.dim)\n            velocities = (self.w * velocities +\n                          adaptive_c1 * r1 * (personal_best_positions - positions) +\n                          adaptive_c2 * r2 * (global_best_position - positions))\n            velocities = np.clip(velocities, -0.4, 0.4)  # Enhanced velocity control\n            positions += velocities\n            positions = np.clip(positions, self.lb, self.ub)\n\n            # Genetic Algorithm operations with mutation strategy\n            for i in range(self.num_particles):\n                if np.random.rand() < self.crossover_rate:\n                    idxs = [idx for idx in range(self.num_particles) if idx != i]\n                    partner = positions[np.random.choice(idxs)]\n                    mask = np.random.rand(self.dim) < 0.5\n                    child = np.where(mask, positions[i], partner)\n\n                    if np.random.rand() < self.mutation_rate:\n                        mutation_idx = np.random.randint(self.dim)\n                        mutation_value = np.random.uniform(self.lb, self.ub)\n                        child[mutation_idx] = mutation_value\n\n                    child_score = func(child)\n                    eval_count += 1\n                    if child_score < scores[i]:\n                        positions[i] = child\n                        scores[i] = child_score\n\n                    if eval_count >= self.budget:\n                        break\n\n            # Update global best with the latest evaluations\n            current_best_idx = np.argmin(scores)\n            if scores[current_best_idx] < global_best_score:\n                global_best_score = scores[current_best_idx]\n                global_best_position = positions[current_best_idx]\n\n        return global_best_position", "name": "AdaptiveMultiStrategyPSO_GA", "description": "Adaptive Multi-strategy PSO-GA with Enhanced Velocity Update and Dynamic Mutation for Improved Convergence.", "configspace": "", "generation": 95, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "169a1a9e-6064-4987-9739-35cbdbea720d", "metadata": {"aucs": [0.8532980634403733, 0.8515548496121921, 0.8688097571017265, 0.8071721686742714, 0.853157119178079, 0.8307354241796217, 0.8286757400144759, 0.8549927290286653, 0.843781321529528, 0.6527660062281768, 0.6406005960588572, 0.5040697881708076, 0.675041275421356, 0.6827444218264302, 0.6201685162795976, 0.6220168502451284, 0.7247255467421136, 0.6783808397022812, 0.1565810303004782, 0.2873007505724975, 0.10311380457419039, 0.15133503723616049, 0.1674912238137305, 0.17083269460224215, 0.2140167083530713, 0.1905192823585259, 0.13548009758131307, 0.15138099164000474, 0.1579722867412171, 0.12350880778225493, 0.1389472265811169, 0.1228760268290191, 0.12316068198457253, 0.1721926532850654, 0.1429982836385012, 0.0967884700275563, 0.9074551804006845, 0.905961037469736, 0.8840420750513517, 0.8586149949092341, 0.9242520859143005, 0.8624343683529359, 0.898795976572739, 0.8715998814645303, 0.8888937716065612, 0.646494404917513, 0.40071584012797823, 0.5054828554325781, 0.27198689814123433, 0.4828349451111783, 0.6759996411022748, 0.4125488774613192, 0.5030156299399278, 0.37765470791286326, 0.8492199323323099, 0.20373335258261527, 0.2196293545996647, 0.3528556993923567, 0.34488621590179713, 0.2692635346692994, 0.2285976207204342, 0.22859776682520871, 0.29153238668513226, 0.1750175972022171, 0.263818542508499, 0.147684888049738, 0.2020258492646544, 0.16461490993618388, 0.16690495813846795, 0.1795895765456842, 0.16277650570526225, 0.17147440561954463, 0.18921760442098512, 0.19998043397189713, 0.12874787814760524, 0.2448860162017873, 0.12659436970309512, 0.17202064070631606, 0.20155502437732475, 0.17547286683543695, 0.11233432090365025, 0.024910594844975487, 9.999999999998899e-05, 0.08852659128023277, 0.10747811779023864, 9.999999999998899e-05, 0.08005938363532172, 0.03930742917701591, 9.999999999998899e-05, 9.999999999998899e-05, 0.18890529982058046, 0.11208876766759135, 0.16488634871356012, 0.0852915093812906, 0.09017811240006945, 0.028776588848462015, 0.1653972729646832, 0.11615287536181518, 0.10871306709393014, 0.27422337340980263, 0.15187361787862574, 0.2161589089811391, 0.13917885837853627, 0.10646464334029337, 0.08979913134927842, 0.20840940684458176, 0.09885471837371373, 0.10234120402039659, 0.21634664289431726, 0.20709902584498607, 0.23588696255137298, 0.12024078586470055, 0.12908588624068418, 0.09741239397388124, 0.08327591273104429, 0.2084706951795683, 0.08008170998489528, 0.5473547210117865, 0.6600076450054875, 0.5399051842662417, 0.6362055471477032, 0.4979905022049751, 0.5373207624165965, 0.5796048565828218, 0.5707303719891272, 0.569358926525704, 0.1264351209982595, 0.1286474572596089, 0.1078338761027835, 0.136150220493921, 0.11225875859470502, 0.14951166543430883, 0.08270695569383257, 0.13858855007467974, 0.15180670225434845, 0.4255678218974619, 0.19697818572563897, 0.2351288639873368, 0.19658975753906993, 0.27931079117807345, 0.17043656493014392, 0.17928483182189703, 0.1455878834721014, 0.22132643956332365, 0.31682495982163705, 0.26383340041609704, 0.22327480199025163, 0.3877012777902762, 0.3662726334174585, 0.3512772747255991, 0.3603302471639287, 0.23421529438116506, 0.2354636234610723, 0.2579433712306646, 0.2235590716358823, 0.21678344427998386, 0.19736701168173532, 0.2127298284472634, 0.23960002738745811, 0.26371123914294836, 0.2546717040566199, 0.3323160682128825, 0.21935577282548124, 0.23502477514789366, 0.2228823863414916, 0.2281817416587082, 0.23280224058711918, 0.20711589412403975, 0.22565259173970775, 0.22330944846500655, 0.19798593394239294, 0.21861223582463107, 0.19178906644687088, 0.19446981769038174, 0.2016165783201188, 0.18411453488897123, 0.22393709653709004, 0.21036098793117664, 0.20689084313011674, 0.24480656074258345, 0.16638762813588237, 0.8427522613076992, 0.18424504514902684, 0.8845994552222765, 0.1968371147581489, 0.9035492163595454, 0.8338980342223921, 0.8780927503468552, 0.8212642039492313, 0.8241908518283327, 0.15573390005925014, 0.7846068891737246, 0.127331223110827, 0.1642867210699902, 0.779628971267873, 0.1103997182592662, 0.8253096305919537, 0.16378261310194664, 0.19139349468751043, 0.1726028213733547, 0.18894302056787815, 0.1875749011136867, 0.21206370479930958, 0.19085284485467557, 0.19087420936555366, 0.19668797232905721, 0.19783485770638443, 0.09594539097677679, 0.08965404102023711, 0.08146117327552715, 0.09335062624193435, 0.08526040507651544, 0.08803484967763542, 0.09161508630385473, 0.09220913436011324, 0.09625586959680654]}, "mutation_prompt": null}
{"id": "d58e1812-929b-4dd0-bf58-8c79055a2ee1", "solution": "import numpy as np\n\nclass EnhancedPSOGA_AccelPop:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.num_particles = 30  # Reduced initial particle count for faster initial convergence\n        self.w = 0.6  # Lower inertia for quicker response to environmental changes\n        self.c1 = 1.5  # Increased cognitive component for more aggressive personal best tracking\n        self.c2 = 1.8  # Slightly reduced social component for balanced attraction\n        self.mutation_rate = 0.35  # Increased mutation rate for enhanced exploration\n        self.crossover_rate = 0.7  # Higher crossover rate for more frequent diversity\n        self.resize_factor = 0.9  # Dynamic resizing of the population size to focus resources\n\n    def __call__(self, func):\n        # Initialize particles and auxiliary variables\n        positions = np.random.uniform(self.lb, self.ub, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-0.3, 0.3, (self.num_particles, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.num_particles, float('inf'))\n        global_best_position = np.zeros(self.dim)\n        global_best_score = float('inf')\n\n        eval_count = 0\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            scores = np.array([func(p) for p in positions])\n            eval_count += len(positions)\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_scores[better_mask] = scores[better_mask]\n            personal_best_positions[better_mask] = positions[better_mask]\n\n            min_score_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[min_score_idx] < global_best_score:\n                global_best_score = personal_best_scores[min_score_idx]\n                global_best_position = personal_best_positions[min_score_idx]\n\n            # Dynamic adjustments of cognitive and social components\n            adaptive_c1 = self.c1 * (1 + np.sin(eval_count / self.budget * np.pi))\n            adaptive_c2 = self.c2 * (1 + np.cos(eval_count / self.budget * np.pi))\n\n            # Update velocities and positions using enhanced PSO-GA update rule\n            r1 = np.random.rand(len(positions), self.dim)\n            r2 = np.random.rand(len(positions), self.dim)\n            velocities = (self.w * velocities +\n                          adaptive_c1 * r1 * (personal_best_positions - positions) +\n                          adaptive_c2 * r2 * (global_best_position - positions))\n            velocities = np.clip(velocities, -0.4, 0.4)\n            positions += velocities\n            positions = np.clip(positions, self.lb, self.ub)\n\n            # Genetic Algorithm operations with mutation strategy\n            for i in range(len(positions)):\n                if np.random.rand() < self.crossover_rate:\n                    idxs = [idx for idx in range(len(positions)) if idx != i]\n                    partner = positions[np.random.choice(idxs)]\n                    mask = np.random.rand(self.dim) < 0.5\n                    child = np.where(mask, positions[i], partner)\n\n                    if np.random.rand() < self.mutation_rate:\n                        mutation_idx = np.random.randint(self.dim)\n                        mutation_value = np.random.uniform(self.lb, self.ub)\n                        child[mutation_idx] = mutation_value\n\n                    child_score = func(child)\n                    eval_count += 1\n                    if child_score < scores[i]:\n                        positions[i] = child\n                        scores[i] = child_score\n\n                    if eval_count >= self.budget:\n                        break\n\n            # Update global best with the latest evaluations\n            current_best_idx = np.argmin(scores)\n            if scores[current_best_idx] < global_best_score:\n                global_best_score = scores[current_best_idx]\n                global_best_position = positions[current_best_idx]\n\n            # Dynamic population resizing\n            if eval_count % (self.budget // 10) == 0 and eval_count < self.budget * 0.9:\n                new_size = int(len(positions) * self.resize_factor)\n                if new_size > 5:\n                    sorted_indices = np.argsort(scores)\n                    positions = positions[sorted_indices[:new_size]]\n                    velocities = velocities[sorted_indices[:new_size]]\n                    personal_best_positions = personal_best_positions[sorted_indices[:new_size]]\n                    personal_best_scores = personal_best_scores[sorted_indices[:new_size]]\n\n        return global_best_position", "name": "EnhancedPSOGA_AccelPop", "description": "Enhanced PSO-GA with Acceleration Coefficient Tuning and Dynamic Population Resizing for Faster Convergence.", "configspace": "", "generation": 97, "fitness": 0.24619364546733144, "feedback": "The algorithm EnhancedPSOGA_AccelPop got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.21.", "error": "", "parent_id": "169a1a9e-6064-4987-9739-35cbdbea720d", "metadata": {"aucs": [0.5937699685118962, 0.5177452491851501, 0.6107151042271382, 0.5192216061249522, 0.5343635702920475, 0.5188009374042724, 0.5637533657755414, 0.511438535581431, 0.5566673447363613, 0.11760249143427115, 0.11274208072457836, 0.14681375175046996, 0.19311979441100524, 0.2026427332317302, 0.2556701573215575, 0.08204278597729786, 0.1374132221506199, 0.17817239298511212, 0.10870975236988689, 0.13735614198644108, 0.11268465972943509, 0.12612415683810618, 0.14652892848027355, 0.10730894593439022, 0.10965443489206972, 0.13027639923635892, 0.12937126236086383, 0.10677768643525509, 0.08521622674140439, 0.08888515223777083, 0.11058083471319824, 0.0905925965702179, 0.09989960920017416, 0.10170232457913098, 0.10111960864578617, 0.0855450641772455, 0.8830468185813197, 0.9101799343405005, 0.9039428685834876, 0.9238085280812034, 0.922318316268329, 0.9086045255748109, 0.91683415020375, 0.9180088643372641, 0.9031136676726108, 0.341161018570207, 0.3049574610429727, 0.34793894153253124, 0.32836289165382426, 0.29478649573297344, 0.3158165046754109, 0.3408825817028903, 0.3295367433236501, 0.32951295147639226, 0.43233823482264955, 0.1390148563543111, 0.22083106505822336, 0.5396268065890863, 0.40744599311232055, 0.25241597235136437, 0.23041348459630517, 0.23178893746246199, 0.5158992396667815, 0.14664912109890016, 0.16384483892547375, 0.14586962162855832, 0.17949452662039944, 0.18051521937802284, 0.22525064741627565, 0.2687988911253295, 0.1624155032534511, 0.17335674569949844, 0.17639531260585517, 0.13098836420872884, 0.18606460981051154, 0.1503296229802048, 0.14291221056723424, 0.1278679693528788, 0.1862925263876788, 0.17148327298236488, 0.18153393382711525, 0.025979599330388736, 0.035123297653492536, 0.08089533450968356, 0.041102758326941324, 0.011826549380930751, 0.017310362340542285, 0.004876691884473261, 9.999999999998899e-05, 0.02615827021277417, 0.22035034827158473, 0.10587645667826895, 0.11731319792163064, 0.06423214182622417, 0.015136098081521054, 0.030267639580493833, 0.16714329709016273, 0.170245630376185, 0.10037523259888126, 0.023537878430837544, 0.010694139788485324, 0.048705275706701134, 0.011107597646407341, 0.01903805182338003, 0.04547806912793062, 0.04368899919030722, 0.031036439531892945, 0.026653133944127494, 0.13980562499140747, 0.05956171045876868, 0.16018004763313398, 0.09302834716982855, 0.07273045396046673, 0.08587839503951022, 0.12394929403981603, 0.1365738294358061, 0.0714522900515554, 0.42743954809221885, 0.4440193493864466, 0.46454418054060287, 0.428808535850949, 0.41451232348481215, 0.4168987511484965, 0.43004372664254076, 0.441099688336152, 0.45887945877455694, 0.10393857120798566, 0.12393721437118255, 0.08720067940002207, 0.11044929684908766, 0.09661229018143114, 0.1391311484635135, 0.1595970123275734, 0.10730644214140739, 0.12445460966077482, 0.24910074832863494, 0.2254560991510408, 0.310872188819017, 0.19115287386967184, 0.3172877514352721, 0.24726542227045134, 0.23083345000998035, 0.21364813727264365, 0.3107416494497647, 0.2511674611356358, 0.26738507200899975, 0.21947984503013318, 0.30764643589457874, 0.24521924564511943, 0.30353592264314844, 0.22491735845139627, 0.3143261089538598, 0.3041982105273494, 0.22388888706767873, 0.2140665690850143, 0.19250180136729445, 0.24828817988882634, 0.1703275043927719, 0.23158073326320305, 0.20124854085379995, 0.25413775012576056, 0.1915672736632188, 0.23098593547553126, 0.21814582253934633, 0.2187127117718215, 0.21295103933792914, 0.20758090754252723, 0.2295257017175435, 0.20753410103304415, 0.2230851992262406, 0.2010124223512625, 0.2899537996509963, 0.19944464112543692, 0.18511319731450093, 0.1992630021030426, 0.1918210276103297, 0.20072812579815114, 0.27316489622698426, 0.18585207876339915, 0.19288185152630066, 0.8552272226722857, 0.17542117258007672, 0.19821402624683937, 0.755455153625499, 0.20048788256941075, 0.19995413404014672, 0.15352267061892366, 0.7115562296256809, 0.744729053118955, 0.5676588043677443, 0.15651142144363162, 0.5112764452965024, 0.4247289257561814, 0.1687050563534851, 0.20906978437532575, 0.5173923948364466, 0.6058091574198072, 0.09412065786604018, 0.16748842100722128, 0.184490896182532, 0.1771137631732549, 0.18647164090362545, 0.18865619481027973, 0.18749061269739298, 0.1851303051776959, 0.17381459014444167, 0.18546949224461395, 0.0948729350976033, 0.08547975349430581, 0.08977601936272983, 0.090666187234131, 0.09268560839347906, 0.08412551957408831, 0.09431529718346443, 0.0889123159620967, 0.10146501468515379]}, "mutation_prompt": null}
{"id": "35adf76a-ee2d-4e24-9afe-ba220b7b2ad7", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDualStrategyPSO_GA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.num_particles = 30  # Reduced for faster evaluation\n        self.w = 0.5  # Lower inertia for rapid convergence\n        self.c1 = 1.2  # Adjusted for focused cognitive search\n        self.c2 = 2.2  # Increased for stronger social component\n        self.mutation_rate = 0.35  # Enhanced mutation rate for diversity\n        self.crossover_rate = 0.7  # More crossover for exploration\n\n    def __call__(self, func):\n        # Initialize particles\n        positions = np.random.uniform(self.lb, self.ub, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-0.3, 0.3, (self.num_particles, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.num_particles, float('inf'))\n        global_best_position = np.zeros(self.dim)\n        global_best_score = float('inf')\n\n        eval_count = 0\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            scores = np.array([func(p) for p in positions])\n            eval_count += self.num_particles\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_scores[better_mask] = scores[better_mask]\n            personal_best_positions[better_mask] = positions[better_mask]\n\n            min_score_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[min_score_idx] < global_best_score:\n                global_best_score = personal_best_scores[min_score_idx]\n                global_best_position = personal_best_positions[min_score_idx]\n\n            # Adaptive cognitive and social components\n            adaptive_c1 = self.c1 * np.exp(-eval_count / (0.4 * self.budget))\n            adaptive_c2 = self.c2 * (1 - np.exp(-eval_count / (0.4 * self.budget)))\n\n            # Update velocities and positions using enhanced PSO update rule\n            r1 = np.random.rand(self.num_particles, self.dim)\n            r2 = np.random.rand(self.num_particles, self.dim)\n            velocities = (self.w * velocities +\n                          adaptive_c1 * r1 * (personal_best_positions - positions) +\n                          adaptive_c2 * r2 * (global_best_position - positions))\n            velocities = np.clip(velocities, -0.5, 0.5)  # Enhanced velocity control\n            positions += velocities\n            positions = np.clip(positions, self.lb, self.ub)\n\n            # Genetic Algorithm operations with improved mutation strategy\n            for i in range(self.num_particles):\n                if np.random.rand() < self.crossover_rate:\n                    idxs = [idx for idx in range(self.num_particles) if idx != i]\n                    partner = positions[np.random.choice(idxs)]\n                    mask = np.random.rand(self.dim) < 0.5\n                    child = np.where(mask, positions[i], partner)\n\n                    if np.random.rand() < self.mutation_rate:\n                        mutation_idxs = np.random.choice(self.dim, 2, replace=False)\n                        mutation_values = np.random.uniform(self.lb, self.ub, 2)\n                        child[mutation_idxs] = mutation_values\n\n                    child_score = func(child)\n                    eval_count += 1\n                    if child_score < scores[i]:\n                        positions[i] = child\n                        scores[i] = child_score\n\n                    if eval_count >= self.budget:\n                        break\n\n            # Update global best with the latest evaluations\n            current_best_idx = np.argmin(scores)\n            if scores[current_best_idx] < global_best_score:\n                global_best_score = scores[current_best_idx]\n                global_best_position = positions[current_best_idx]\n\n        return global_best_position", "name": "EnhancedAdaptiveDualStrategyPSO_GA", "description": "Enhanced Adaptive Dual-Strategy PSO-GA with Improved Exploration-Exploitation Balance and Optimized Mutation for Speedy Convergence.", "configspace": "", "generation": 98, "fitness": 0.22403499191545712, "feedback": "The algorithm EnhancedAdaptiveDualStrategyPSO_GA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.17.", "error": "", "parent_id": "169a1a9e-6064-4987-9739-35cbdbea720d", "metadata": {"aucs": [0.8928603689012709, 0.8841981053370656, 0.41798362166376757, 0.498137435441959, 0.5473811476002045, 0.41059777790302365, 0.3724406255492889, 0.4513039123654412, 0.9036942379255081, 0.31252372106076687, 0.27754565422154776, 0.269887634944448, 0.806976528241437, 0.25117128398255795, 0.24096994493050683, 0.13673797610691485, 0.34072336560703376, 0.4824478305636898, 0.16020492420519672, 0.13550566450282875, 0.1314805333658956, 0.11347615066793826, 0.104281956549102, 0.18528643893843633, 0.1594157920189616, 0.17940389043203886, 0.12859732209345998, 0.11505068910316762, 0.0780529499705046, 0.10220564247552033, 0.12609584150827124, 0.09407210541598376, 0.11632436444767391, 0.0939348142041303, 0.11158045161917995, 0.12402074461203594, 0.3031620608787895, 0.7464066774148947, 0.4791053305812579, 0.22349074754034604, 0.6717016173459707, 0.47859418972785484, 0.20036210731157633, 0.3802867009969655, 0.719025835310301, 0.14498873096812315, 0.09500959464134318, 0.11922374540492331, 0.19582708875302757, 0.20193752077189409, 0.1803340962257689, 0.12717114408910313, 0.13880762792365386, 0.20134159005123864, 0.1857645000051753, 0.14116777759996457, 0.13804831837955356, 0.27654332638608836, 0.27600956979423785, 0.13610047558100136, 0.17743283170988655, 0.23138339681491116, 0.19681160318277846, 0.1446433027688685, 0.11203220751367082, 0.10016137424902916, 0.13091560173346684, 0.14052615959829529, 0.30063480242471874, 0.13340238175312058, 0.1342456211231955, 0.13358835051911977, 0.1338104190961642, 0.12491182826514502, 0.1262559484738648, 0.14668553991335298, 0.16931292550638377, 0.12855841301139026, 0.13080410282575472, 0.12455783583374302, 0.13754257711759676, 0.04061396329478972, 0.14360498180025316, 9.999999999998899e-05, 9.999999999998899e-05, 0.018724723342358085, 9.999999999998899e-05, 0.05080196860513242, 9.999999999998899e-05, 0.0022450798617250634, 0.1349860484950648, 0.13221057558819682, 0.17831369586230417, 0.08531892098091953, 0.038701696250737716, 0.05450778268990275, 0.16067822049585845, 0.08801570234487754, 0.11082032906928507, 9.999999999998899e-05, 0.12982134965395198, 0.03566197974728491, 0.0998679653906569, 0.10586739729334327, 9.999999999998899e-05, 0.15206025026877978, 0.23339932648849748, 0.15528861334534527, 0.24466228053935146, 0.3437871377311831, 0.07631441721805676, 0.28975498623584006, 0.25666048712621137, 0.12936076899283777, 0.1670168652319749, 0.058076282079888686, 0.14431238348145925, 0.45335051149424166, 0.4229860578083984, 0.4499683794433448, 0.38000499164404644, 0.47456294321912096, 0.42445494988683263, 0.4366364572092972, 0.4060382685429359, 0.3281181114537354, 0.11191050145261272, 0.11008029320219592, 0.10545221902188828, 0.11208049979738133, 0.09064772188314707, 0.13895375800382626, 0.1381845845495745, 0.1556788017482963, 0.13697878143806808, 0.15868014298359545, 0.24106170226580514, 0.2558103628063385, 0.22648109004971706, 0.2523319465896814, 0.1699098569301385, 0.2594777967103218, 0.205452981594332, 0.1985062250755728, 0.20827035594967602, 0.28703768898265436, 0.23221617655014493, 0.3552496491933912, 0.34611823672835296, 0.3311314219283419, 0.23781951470745066, 0.390723518715123, 0.21419753789056206, 0.21459001434636893, 0.1564976304998854, 0.18691544837710328, 0.26401075317465983, 0.24676990036856727, 0.18563566781624719, 0.202983778160701, 0.2638805234701532, 0.18412681155539412, 0.232633702102786, 0.22227344208926947, 0.2041126259499244, 0.23623526739207945, 0.21993263166372234, 0.23162912899915078, 0.1906061338235252, 0.19865073671651268, 0.20751091817641587, 0.1873782875186374, 0.18952564901973845, 0.18928749710758197, 0.20663103750100986, 0.20649332819876287, 0.17999663104370178, 0.20789078683666273, 0.19746550587994616, 0.19837504616059543, 0.17162741287438787, 0.7171357776452629, 0.18531314082987993, 0.6668086221307461, 0.1987278234961436, 0.9176151621339601, 0.16352818135978253, 0.49249614134061726, 0.20155261084398635, 0.31600962114570563, 0.5307435992002425, 0.1823948891132221, 0.20913407070411727, 0.20116542263007586, 0.19191529442016897, 0.22503738958405706, 0.3387671618151967, 0.3253163141821508, 0.19663698363241744, 0.18407268379217845, 0.17922741899858063, 0.2053479151634211, 0.19813708809325037, 0.19138001339419808, 0.18711516708838039, 0.18579697886587687, 0.19585264518714596, 0.09831006275488885, 0.0847792902618909, 0.08819639181504535, 0.10073462099997055, 0.0923351179864057, 0.09130182994372882, 0.08797915743763174, 0.09758409514627797, 0.09562401122815822]}, "mutation_prompt": null}
{"id": "53efba34-9d4f-4c82-83db-0fdf2f1fd535", "solution": "import numpy as np\n\nclass AdaptiveMultiStrategyPSO_GA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lb = -5.0\n        self.ub = 5.0\n        self.num_particles = 35  # Slightly reduced particle count for focused exploration\n        self.w = 0.7  # Adjusted inertia for better convergence balance\n        self.c1 = 1.3  # Refined cognitive component for adaptive learning\n        self.c2 = 2.0  # Slightly reduced social component for controlled attraction\n        self.mutation_rate = 0.3  # Further increased mutation rate for diversity\n        self.crossover_rate = 0.65  # Adjusted crossover rate for enhanced exploration\n\n    def __call__(self, func):\n        # Initialize particles\n        positions = np.random.uniform(self.lb, self.ub, (self.num_particles, self.dim))\n        velocities = np.random.uniform(-0.2, 0.2, (self.num_particles, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.full(self.num_particles, float('inf'))\n        global_best_position = np.zeros(self.dim)\n        global_best_score = float('inf')\n\n        eval_count = 0\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            scores = np.array([func(p) for p in positions])\n            eval_count += self.num_particles\n\n            # Update personal and global bests\n            better_mask = scores < personal_best_scores\n            personal_best_scores[better_mask] = scores[better_mask]\n            personal_best_positions[better_mask] = positions[better_mask]\n\n            min_score_idx = np.argmin(personal_best_scores)\n            if personal_best_scores[min_score_idx] < global_best_score:\n                global_best_score = personal_best_scores[min_score_idx]\n                global_best_position = personal_best_positions[min_score_idx]\n\n            # Adaptive cognitive and social components\n            adaptive_c1 = self.c1 * np.exp(-eval_count / (0.5 * self.budget))\n            adaptive_c2 = self.c2 * (1 - np.exp(-eval_count / (0.5 * self.budget)))\n\n            # Update velocities and positions using enhanced PSO-GA update rule\n            r1 = np.random.rand(self.num_particles, self.dim)\n            r2 = np.random.rand(self.num_particles, self.dim)\n            velocities = (self.w * velocities +\n                          adaptive_c1 * r1 * (personal_best_positions - positions) +\n                          adaptive_c2 * r2 * (global_best_position - positions))\n            velocities = np.clip(velocities, -0.4, 0.4)  # Enhanced velocity control\n            positions += velocities\n            positions = np.clip(positions, self.lb, self.ub)\n\n            # Genetic Algorithm operations with mutation strategy\n            for i in range(self.num_particles):\n                if np.random.rand() < self.crossover_rate:\n                    idxs = [idx for idx in range(self.num_particles) if idx != i]\n                    partner = positions[np.random.choice(idxs)]\n                    mask = np.random.rand(self.dim) < 0.5\n                    child = np.where(mask, positions[i], partner)\n\n                    if np.random.rand() < self.mutation_rate:\n                        mutation_idx = np.random.randint(self.dim)\n                        mutation_value = np.random.uniform(self.lb, self.ub)\n                        child[mutation_idx] = mutation_value\n\n                    child_score = func(child)\n                    eval_count += 1\n                    if child_score < scores[i]:\n                        positions[i] = child\n                        scores[i] = child_score\n\n                    if eval_count >= self.budget:\n                        break\n\n            # Update global best with the latest evaluations\n            current_best_idx = np.argmin(scores)\n            if scores[current_best_idx] < global_best_score:\n                global_best_score = scores[current_best_idx]\n                global_best_position = positions[current_best_idx]\n\n        return global_best_position", "name": "AdaptiveMultiStrategyPSO_GA", "description": "Adaptive Multi-strategy PSO-GA with Enhanced Velocity Update and Dynamic Mutation for Improved Convergence.", "configspace": "", "generation": 95, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "169a1a9e-6064-4987-9739-35cbdbea720d", "metadata": {"aucs": [0.8532980634403733, 0.8515548496121921, 0.8688097571017265, 0.8071721686742714, 0.853157119178079, 0.8307354241796217, 0.8286757400144759, 0.8549927290286653, 0.843781321529528, 0.6527660062281768, 0.6406005960588572, 0.5040697881708076, 0.675041275421356, 0.6827444218264302, 0.6201685162795976, 0.6220168502451284, 0.7247255467421136, 0.6783808397022812, 0.1565810303004782, 0.2873007505724975, 0.10311380457419039, 0.15133503723616049, 0.1674912238137305, 0.17083269460224215, 0.2140167083530713, 0.1905192823585259, 0.13548009758131307, 0.15138099164000474, 0.1579722867412171, 0.12350880778225493, 0.1389472265811169, 0.1228760268290191, 0.12316068198457253, 0.1721926532850654, 0.1429982836385012, 0.0967884700275563, 0.9074551804006845, 0.905961037469736, 0.8840420750513517, 0.8586149949092341, 0.9242520859143005, 0.8624343683529359, 0.898795976572739, 0.8715998814645303, 0.8888937716065612, 0.646494404917513, 0.40071584012797823, 0.5054828554325781, 0.27198689814123433, 0.4828349451111783, 0.6759996411022748, 0.4125488774613192, 0.5030156299399278, 0.37765470791286326, 0.8492199323323099, 0.20373335258261527, 0.2196293545996647, 0.3528556993923567, 0.34488621590179713, 0.2692635346692994, 0.2285976207204342, 0.22859776682520871, 0.29153238668513226, 0.1750175972022171, 0.263818542508499, 0.147684888049738, 0.2020258492646544, 0.16461490993618388, 0.16690495813846795, 0.1795895765456842, 0.16277650570526225, 0.17147440561954463, 0.18921760442098512, 0.19998043397189713, 0.12874787814760524, 0.2448860162017873, 0.12659436970309512, 0.17202064070631606, 0.20155502437732475, 0.17547286683543695, 0.11233432090365025, 0.024910594844975487, 9.999999999998899e-05, 0.08852659128023277, 0.10747811779023864, 9.999999999998899e-05, 0.08005938363532172, 0.03930742917701591, 9.999999999998899e-05, 9.999999999998899e-05, 0.18890529982058046, 0.11208876766759135, 0.16488634871356012, 0.0852915093812906, 0.09017811240006945, 0.028776588848462015, 0.1653972729646832, 0.11615287536181518, 0.10871306709393014, 0.27422337340980263, 0.15187361787862574, 0.2161589089811391, 0.13917885837853627, 0.10646464334029337, 0.08979913134927842, 0.20840940684458176, 0.09885471837371373, 0.10234120402039659, 0.21634664289431726, 0.20709902584498607, 0.23588696255137298, 0.12024078586470055, 0.12908588624068418, 0.09741239397388124, 0.08327591273104429, 0.2084706951795683, 0.08008170998489528, 0.5473547210117865, 0.6600076450054875, 0.5399051842662417, 0.6362055471477032, 0.4979905022049751, 0.5373207624165965, 0.5796048565828218, 0.5707303719891272, 0.569358926525704, 0.1264351209982595, 0.1286474572596089, 0.1078338761027835, 0.136150220493921, 0.11225875859470502, 0.14951166543430883, 0.08270695569383257, 0.13858855007467974, 0.15180670225434845, 0.4255678218974619, 0.19697818572563897, 0.2351288639873368, 0.19658975753906993, 0.27931079117807345, 0.17043656493014392, 0.17928483182189703, 0.1455878834721014, 0.22132643956332365, 0.31682495982163705, 0.26383340041609704, 0.22327480199025163, 0.3877012777902762, 0.3662726334174585, 0.3512772747255991, 0.3603302471639287, 0.23421529438116506, 0.2354636234610723, 0.2579433712306646, 0.2235590716358823, 0.21678344427998386, 0.19736701168173532, 0.2127298284472634, 0.23960002738745811, 0.26371123914294836, 0.2546717040566199, 0.3323160682128825, 0.21935577282548124, 0.23502477514789366, 0.2228823863414916, 0.2281817416587082, 0.23280224058711918, 0.20711589412403975, 0.22565259173970775, 0.22330944846500655, 0.19798593394239294, 0.21861223582463107, 0.19178906644687088, 0.19446981769038174, 0.2016165783201188, 0.18411453488897123, 0.22393709653709004, 0.21036098793117664, 0.20689084313011674, 0.24480656074258345, 0.16638762813588237, 0.8427522613076992, 0.18424504514902684, 0.8845994552222765, 0.1968371147581489, 0.9035492163595454, 0.8338980342223921, 0.8780927503468552, 0.8212642039492313, 0.8241908518283327, 0.15573390005925014, 0.7846068891737246, 0.127331223110827, 0.1642867210699902, 0.779628971267873, 0.1103997182592662, 0.8253096305919537, 0.16378261310194664, 0.19139349468751043, 0.1726028213733547, 0.18894302056787815, 0.1875749011136867, 0.21206370479930958, 0.19085284485467557, 0.19087420936555366, 0.19668797232905721, 0.19783485770638443, 0.09594539097677679, 0.08965404102023711, 0.08146117327552715, 0.09335062624193435, 0.08526040507651544, 0.08803484967763542, 0.09161508630385473, 0.09220913436011324, 0.09625586959680654]}, "mutation_prompt": null}
