{"id": "6ca94746-c4a4-4516-b6f1-dabd456b8fa3", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        evals = self.population_size\n\n        while evals < self.budget:\n            for i in range(self.population_size):\n                idxs = list(range(self.population_size))\n                idxs.remove(i)\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                \n                if evals >= self.budget:\n                    break\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Differential Evolution with Adaptive Mutation for Global and Local Search Balance", "configspace": "", "generation": 0, "fitness": 0.2672962129117718, "feedback": "The algorithm AdaptiveDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.21.", "error": "", "parent_id": null, "metadata": {"aucs": [0.6085051492144853, 0.6085051492144853, 0.6085051492144853, 0.6477860782039992, 0.6477860782039992, 0.6477860782039992, 0.6482058957232064, 0.6482058957232064, 0.6482058957232064, 0.3967970210119639, 0.3967970210119639, 0.3967970210119639, 0.418997132399916, 0.418997132399916, 0.418997132399916, 0.3917527025473978, 0.3917527025473978, 0.3917527025473978, 0.08946476887152477, 0.08946476887152477, 0.08946476887152477, 0.08277369343696805, 0.08277369343696805, 0.08277369343696805, 0.09177631224331528, 0.09177631224331528, 0.09177631224331528, 0.087875928785205, 0.087875928785205, 0.087875928785205, 0.08281536553662405, 0.08281536553662405, 0.08281536553662405, 0.08752627286148962, 0.08752627286148962, 0.08752627286148962, 0.9518291332223363, 0.9518291332223363, 0.9518291332223363, 0.9230756530222763, 0.9230756530222763, 0.9230756530222763, 0.9216358770308949, 0.9216358770308949, 0.9216358770308949, 0.273803429069872, 0.273803429069872, 0.273803429069872, 0.27612679724777944, 0.27612679724777944, 0.27612679724777944, 0.31470550726402946, 0.31470550726402946, 0.31470550726402946, 0.44840824418965053, 0.44840824418965053, 0.44840824418965053, 0.5510617432433971, 0.5510617432433971, 0.5510617432433971, 0.6099985477960679, 0.6099985477960679, 0.6099985477960679, 0.21528901315585025, 0.21528901315585025, 0.21528901315585025, 0.2352063216011523, 0.2352063216011523, 0.2352063216011523, 0.21268113459000082, 0.21268113459000082, 0.21268113459000082, 0.24586394163657832, 0.24586394163657832, 0.24586394163657832, 0.19421800442004056, 0.19421800442004056, 0.19421800442004056, 0.17520615311911514, 0.17520615311911514, 0.17520615311911514, 0.12306680557736094, 0.12306680557736094, 0.12306680557736094, 0.14982362507823688, 0.14982362507823688, 0.14982362507823688, 0.11918403924381149, 0.11918403924381149, 0.11918403924381149, 0.2630022185136861, 0.2630022185136861, 0.2630022185136861, 0.22145494718506042, 0.22145494718506042, 0.22145494718506042, 0.26874623883545057, 0.26874623883545057, 0.26874623883545057, 0.017648032426149207, 0.017648032426149207, 0.017648032426149207, 0.033456304643037726, 0.033456304643037726, 0.033456304643037726, 0.03880897299464814, 0.03880897299464814, 0.03880897299464814, 0.1510452189739554, 0.1510452189739554, 0.1510452189739554, 0.16908364218105998, 0.16908364218105998, 0.16908364218105998, 0.15108806188041013, 0.15108806188041013, 0.15108806188041013, 0.4734569121052816, 0.4734569121052816, 0.4734569121052816, 0.4771669508406322, 0.4771669508406322, 0.4771669508406322, 0.48642307522762585, 0.48642307522762585, 0.48642307522762585, 0.08047406847429861, 0.08047406847429861, 0.08047406847429861, 0.09481160157979607, 0.09481160157979607, 0.09481160157979607, 0.0775949942190911, 0.0775949942190911, 0.0775949942190911, 0.1519278721633589, 0.1519278721633589, 0.1519278721633589, 0.18554126733024956, 0.18554126733024956, 0.18554126733024956, 0.24152357802480262, 0.24152357802480262, 0.24152357802480262, 0.27279425599326135, 0.27279425599326135, 0.27279425599326135, 0.2336067783960316, 0.2336067783960316, 0.2336067783960316, 0.27173594987932437, 0.27173594987932437, 0.27173594987932437, 0.19473767269872078, 0.19473767269872078, 0.19473767269872078, 0.20501337371514416, 0.20501337371514416, 0.20501337371514416, 0.21452506517621694, 0.21452506517621694, 0.21452506517621694, 0.16838353882325696, 0.16838353882325696, 0.16838353882325696, 0.1856489512496834, 0.1856489512496834, 0.1856489512496834, 0.1947532708976576, 0.1947532708976576, 0.1947532708976576, 0.18175260802548643, 0.18175260802548643, 0.18175260802548643, 0.17578918787036524, 0.17578918787036524, 0.17578918787036524, 0.1798340340100103, 0.1798340340100103, 0.1798340340100103, 0.29687119999587386, 0.29687119999587386, 0.29687119999587386, 0.18034687444605257, 0.18034687444605257, 0.18034687444605257, 0.1858378495495545, 0.1858378495495545, 0.1858378495495545, 0.6030549787840663, 0.6030549787840663, 0.6030549787840663, 0.3743331617842738, 0.3743331617842738, 0.3743331617842738, 0.20293392812114575, 0.20293392812114575, 0.20293392812114575, 0.1782650809956161, 0.1782650809956161, 0.1782650809956161, 0.19276599508537073, 0.19276599508537073, 0.19276599508537073, 0.1879698192558883, 0.1879698192558883, 0.1879698192558883, 0.06697855271682984, 0.06697855271682984, 0.06697855271682984, 0.06802111336510186, 0.06802111336510186, 0.06802111336510186, 0.07065983986949576, 0.07065983986949576, 0.07065983986949576]}, "mutation_prompt": null}
{"id": "7dc4cb48-9749-473e-b461-e93cc63d7fc5", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        evals = self.population_size\n\n        while evals < self.budget:\n            for i in range(self.population_size):\n                idxs = list(range(self.population_size))\n                idxs.remove(i)\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                \n                if evals >= self.budget:\n                    break\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Differential Evolution with Adaptive Mutation for Global and Local Search Balance", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6ca94746-c4a4-4516-b6f1-dabd456b8fa3", "metadata": {"aucs": [0.6085051492144853, 0.6085051492144853, 0.6085051492144853, 0.6477860782039992, 0.6477860782039992, 0.6477860782039992, 0.6482058957232064, 0.6482058957232064, 0.6482058957232064, 0.3967970210119639, 0.3967970210119639, 0.3967970210119639, 0.418997132399916, 0.418997132399916, 0.418997132399916, 0.3917527025473978, 0.3917527025473978, 0.3917527025473978, 0.08946476887152477, 0.08946476887152477, 0.08946476887152477, 0.08277369343696805, 0.08277369343696805, 0.08277369343696805, 0.09177631224331528, 0.09177631224331528, 0.09177631224331528, 0.087875928785205, 0.087875928785205, 0.087875928785205, 0.08281536553662405, 0.08281536553662405, 0.08281536553662405, 0.08752627286148962, 0.08752627286148962, 0.08752627286148962, 0.9518291332223363, 0.9518291332223363, 0.9518291332223363, 0.9230756530222763, 0.9230756530222763, 0.9230756530222763, 0.9216358770308949, 0.9216358770308949, 0.9216358770308949, 0.273803429069872, 0.273803429069872, 0.273803429069872, 0.27612679724777944, 0.27612679724777944, 0.27612679724777944, 0.31470550726402946, 0.31470550726402946, 0.31470550726402946, 0.44840824418965053, 0.44840824418965053, 0.44840824418965053, 0.5510617432433971, 0.5510617432433971, 0.5510617432433971, 0.6099985477960679, 0.6099985477960679, 0.6099985477960679, 0.21528901315585025, 0.21528901315585025, 0.21528901315585025, 0.2352063216011523, 0.2352063216011523, 0.2352063216011523, 0.21268113459000082, 0.21268113459000082, 0.21268113459000082, 0.24586394163657832, 0.24586394163657832, 0.24586394163657832, 0.19421800442004056, 0.19421800442004056, 0.19421800442004056, 0.17520615311911514, 0.17520615311911514, 0.17520615311911514, 0.12306680557736094, 0.12306680557736094, 0.12306680557736094, 0.14982362507823688, 0.14982362507823688, 0.14982362507823688, 0.11918403924381149, 0.11918403924381149, 0.11918403924381149, 0.2630022185136861, 0.2630022185136861, 0.2630022185136861, 0.22145494718506042, 0.22145494718506042, 0.22145494718506042, 0.26874623883545057, 0.26874623883545057, 0.26874623883545057, 0.017648032426149207, 0.017648032426149207, 0.017648032426149207, 0.033456304643037726, 0.033456304643037726, 0.033456304643037726, 0.03880897299464814, 0.03880897299464814, 0.03880897299464814, 0.1510452189739554, 0.1510452189739554, 0.1510452189739554, 0.16908364218105998, 0.16908364218105998, 0.16908364218105998, 0.15108806188041013, 0.15108806188041013, 0.15108806188041013, 0.4734569121052816, 0.4734569121052816, 0.4734569121052816, 0.4771669508406322, 0.4771669508406322, 0.4771669508406322, 0.48642307522762585, 0.48642307522762585, 0.48642307522762585, 0.08047406847429861, 0.08047406847429861, 0.08047406847429861, 0.09481160157979607, 0.09481160157979607, 0.09481160157979607, 0.0775949942190911, 0.0775949942190911, 0.0775949942190911, 0.1519278721633589, 0.1519278721633589, 0.1519278721633589, 0.18554126733024956, 0.18554126733024956, 0.18554126733024956, 0.24152357802480262, 0.24152357802480262, 0.24152357802480262, 0.27279425599326135, 0.27279425599326135, 0.27279425599326135, 0.2336067783960316, 0.2336067783960316, 0.2336067783960316, 0.27173594987932437, 0.27173594987932437, 0.27173594987932437, 0.19473767269872078, 0.19473767269872078, 0.19473767269872078, 0.20501337371514416, 0.20501337371514416, 0.20501337371514416, 0.21452506517621694, 0.21452506517621694, 0.21452506517621694, 0.16838353882325696, 0.16838353882325696, 0.16838353882325696, 0.1856489512496834, 0.1856489512496834, 0.1856489512496834, 0.1947532708976576, 0.1947532708976576, 0.1947532708976576, 0.18175260802548643, 0.18175260802548643, 0.18175260802548643, 0.17578918787036524, 0.17578918787036524, 0.17578918787036524, 0.1798340340100103, 0.1798340340100103, 0.1798340340100103, 0.29687119999587386, 0.29687119999587386, 0.29687119999587386, 0.18034687444605257, 0.18034687444605257, 0.18034687444605257, 0.1858378495495545, 0.1858378495495545, 0.1858378495495545, 0.6030549787840663, 0.6030549787840663, 0.6030549787840663, 0.3743331617842738, 0.3743331617842738, 0.3743331617842738, 0.20293392812114575, 0.20293392812114575, 0.20293392812114575, 0.1782650809956161, 0.1782650809956161, 0.1782650809956161, 0.19276599508537073, 0.19276599508537073, 0.19276599508537073, 0.1879698192558883, 0.1879698192558883, 0.1879698192558883, 0.06697855271682984, 0.06697855271682984, 0.06697855271682984, 0.06802111336510186, 0.06802111336510186, 0.06802111336510186, 0.07065983986949576, 0.07065983986949576, 0.07065983986949576]}, "mutation_prompt": null}
{"id": "74a725ce-1d5c-4ae5-b124-0908d3a75861", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.population_size_decay_rate = 0.95\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        evals = population_size\n\n        while evals < self.budget:\n            reduced_population = int(population_size * self.population_size_decay_rate)\n            for i in range(reduced_population):\n                idxs = list(range(population_size))\n                idxs.remove(i)\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n\n                if evals >= self.budget:\n                    break\n\n            best_indices = np.argsort(fitness)[:reduced_population]\n            population = population[best_indices]\n            fitness = fitness[best_indices]\n            population_size = reduced_population\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Stochastic Population Reduction for Enhanced Convergence.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "An exception occurred: ValueError(\"Cannot take a larger sample than population when 'replace=False'\").", "error": "ValueError(\"Cannot take a larger sample than population when 'replace=False'\")", "parent_id": "6ca94746-c4a4-4516-b6f1-dabd456b8fa3", "metadata": {}, "mutation_prompt": null}
{"id": "5b1c4392-8798-48c0-8f62-573e2f6b951e", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        evals = self.population_size\n\n        while evals < self.budget:\n            for i in range(self.population_size):\n                idxs = list(range(self.population_size))\n                idxs.remove(i)\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                \n                if evals >= self.budget:\n                    break\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Differential Evolution with Adaptive Mutation for Global and Local Search Balance", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6ca94746-c4a4-4516-b6f1-dabd456b8fa3", "metadata": {"aucs": [0.6085051492144853, 0.6085051492144853, 0.6085051492144853, 0.6477860782039992, 0.6477860782039992, 0.6477860782039992, 0.6482058957232064, 0.6482058957232064, 0.6482058957232064, 0.3967970210119639, 0.3967970210119639, 0.3967970210119639, 0.418997132399916, 0.418997132399916, 0.418997132399916, 0.3917527025473978, 0.3917527025473978, 0.3917527025473978, 0.08946476887152477, 0.08946476887152477, 0.08946476887152477, 0.08277369343696805, 0.08277369343696805, 0.08277369343696805, 0.09177631224331528, 0.09177631224331528, 0.09177631224331528, 0.087875928785205, 0.087875928785205, 0.087875928785205, 0.08281536553662405, 0.08281536553662405, 0.08281536553662405, 0.08752627286148962, 0.08752627286148962, 0.08752627286148962, 0.9518291332223363, 0.9518291332223363, 0.9518291332223363, 0.9230756530222763, 0.9230756530222763, 0.9230756530222763, 0.9216358770308949, 0.9216358770308949, 0.9216358770308949, 0.273803429069872, 0.273803429069872, 0.273803429069872, 0.27612679724777944, 0.27612679724777944, 0.27612679724777944, 0.31470550726402946, 0.31470550726402946, 0.31470550726402946, 0.44840824418965053, 0.44840824418965053, 0.44840824418965053, 0.5510617432433971, 0.5510617432433971, 0.5510617432433971, 0.6099985477960679, 0.6099985477960679, 0.6099985477960679, 0.21528901315585025, 0.21528901315585025, 0.21528901315585025, 0.2352063216011523, 0.2352063216011523, 0.2352063216011523, 0.21268113459000082, 0.21268113459000082, 0.21268113459000082, 0.24586394163657832, 0.24586394163657832, 0.24586394163657832, 0.19421800442004056, 0.19421800442004056, 0.19421800442004056, 0.17520615311911514, 0.17520615311911514, 0.17520615311911514, 0.12306680557736094, 0.12306680557736094, 0.12306680557736094, 0.14982362507823688, 0.14982362507823688, 0.14982362507823688, 0.11918403924381149, 0.11918403924381149, 0.11918403924381149, 0.2630022185136861, 0.2630022185136861, 0.2630022185136861, 0.22145494718506042, 0.22145494718506042, 0.22145494718506042, 0.26874623883545057, 0.26874623883545057, 0.26874623883545057, 0.017648032426149207, 0.017648032426149207, 0.017648032426149207, 0.033456304643037726, 0.033456304643037726, 0.033456304643037726, 0.03880897299464814, 0.03880897299464814, 0.03880897299464814, 0.1510452189739554, 0.1510452189739554, 0.1510452189739554, 0.16908364218105998, 0.16908364218105998, 0.16908364218105998, 0.15108806188041013, 0.15108806188041013, 0.15108806188041013, 0.4734569121052816, 0.4734569121052816, 0.4734569121052816, 0.4771669508406322, 0.4771669508406322, 0.4771669508406322, 0.48642307522762585, 0.48642307522762585, 0.48642307522762585, 0.08047406847429861, 0.08047406847429861, 0.08047406847429861, 0.09481160157979607, 0.09481160157979607, 0.09481160157979607, 0.0775949942190911, 0.0775949942190911, 0.0775949942190911, 0.1519278721633589, 0.1519278721633589, 0.1519278721633589, 0.18554126733024956, 0.18554126733024956, 0.18554126733024956, 0.24152357802480262, 0.24152357802480262, 0.24152357802480262, 0.27279425599326135, 0.27279425599326135, 0.27279425599326135, 0.2336067783960316, 0.2336067783960316, 0.2336067783960316, 0.27173594987932437, 0.27173594987932437, 0.27173594987932437, 0.19473767269872078, 0.19473767269872078, 0.19473767269872078, 0.20501337371514416, 0.20501337371514416, 0.20501337371514416, 0.21452506517621694, 0.21452506517621694, 0.21452506517621694, 0.16838353882325696, 0.16838353882325696, 0.16838353882325696, 0.1856489512496834, 0.1856489512496834, 0.1856489512496834, 0.1947532708976576, 0.1947532708976576, 0.1947532708976576, 0.18175260802548643, 0.18175260802548643, 0.18175260802548643, 0.17578918787036524, 0.17578918787036524, 0.17578918787036524, 0.1798340340100103, 0.1798340340100103, 0.1798340340100103, 0.29687119999587386, 0.29687119999587386, 0.29687119999587386, 0.18034687444605257, 0.18034687444605257, 0.18034687444605257, 0.1858378495495545, 0.1858378495495545, 0.1858378495495545, 0.6030549787840663, 0.6030549787840663, 0.6030549787840663, 0.3743331617842738, 0.3743331617842738, 0.3743331617842738, 0.20293392812114575, 0.20293392812114575, 0.20293392812114575, 0.1782650809956161, 0.1782650809956161, 0.1782650809956161, 0.19276599508537073, 0.19276599508537073, 0.19276599508537073, 0.1879698192558883, 0.1879698192558883, 0.1879698192558883, 0.06697855271682984, 0.06697855271682984, 0.06697855271682984, 0.06802111336510186, 0.06802111336510186, 0.06802111336510186, 0.07065983986949576, 0.07065983986949576, 0.07065983986949576]}, "mutation_prompt": null}
{"id": "d0f8f33d-339b-4798-80f9-3743f9c41229", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        evals = self.population_size\n\n        while evals < self.budget:\n            for i in range(self.population_size):\n                idxs = list(range(self.population_size))\n                idxs.remove(i)\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                \n                if evals >= self.budget:\n                    break\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Differential Evolution with Adaptive Mutation for Global and Local Search Balance", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6ca94746-c4a4-4516-b6f1-dabd456b8fa3", "metadata": {"aucs": [0.6085051492144853, 0.6085051492144853, 0.6085051492144853, 0.6477860782039992, 0.6477860782039992, 0.6477860782039992, 0.6482058957232064, 0.6482058957232064, 0.6482058957232064, 0.3967970210119639, 0.3967970210119639, 0.3967970210119639, 0.418997132399916, 0.418997132399916, 0.418997132399916, 0.3917527025473978, 0.3917527025473978, 0.3917527025473978, 0.08946476887152477, 0.08946476887152477, 0.08946476887152477, 0.08277369343696805, 0.08277369343696805, 0.08277369343696805, 0.09177631224331528, 0.09177631224331528, 0.09177631224331528, 0.087875928785205, 0.087875928785205, 0.087875928785205, 0.08281536553662405, 0.08281536553662405, 0.08281536553662405, 0.08752627286148962, 0.08752627286148962, 0.08752627286148962, 0.9518291332223363, 0.9518291332223363, 0.9518291332223363, 0.9230756530222763, 0.9230756530222763, 0.9230756530222763, 0.9216358770308949, 0.9216358770308949, 0.9216358770308949, 0.273803429069872, 0.273803429069872, 0.273803429069872, 0.27612679724777944, 0.27612679724777944, 0.27612679724777944, 0.31470550726402946, 0.31470550726402946, 0.31470550726402946, 0.44840824418965053, 0.44840824418965053, 0.44840824418965053, 0.5510617432433971, 0.5510617432433971, 0.5510617432433971, 0.6099985477960679, 0.6099985477960679, 0.6099985477960679, 0.21528901315585025, 0.21528901315585025, 0.21528901315585025, 0.2352063216011523, 0.2352063216011523, 0.2352063216011523, 0.21268113459000082, 0.21268113459000082, 0.21268113459000082, 0.24586394163657832, 0.24586394163657832, 0.24586394163657832, 0.19421800442004056, 0.19421800442004056, 0.19421800442004056, 0.17520615311911514, 0.17520615311911514, 0.17520615311911514, 0.12306680557736094, 0.12306680557736094, 0.12306680557736094, 0.14982362507823688, 0.14982362507823688, 0.14982362507823688, 0.11918403924381149, 0.11918403924381149, 0.11918403924381149, 0.2630022185136861, 0.2630022185136861, 0.2630022185136861, 0.22145494718506042, 0.22145494718506042, 0.22145494718506042, 0.26874623883545057, 0.26874623883545057, 0.26874623883545057, 0.017648032426149207, 0.017648032426149207, 0.017648032426149207, 0.033456304643037726, 0.033456304643037726, 0.033456304643037726, 0.03880897299464814, 0.03880897299464814, 0.03880897299464814, 0.1510452189739554, 0.1510452189739554, 0.1510452189739554, 0.16908364218105998, 0.16908364218105998, 0.16908364218105998, 0.15108806188041013, 0.15108806188041013, 0.15108806188041013, 0.4734569121052816, 0.4734569121052816, 0.4734569121052816, 0.4771669508406322, 0.4771669508406322, 0.4771669508406322, 0.48642307522762585, 0.48642307522762585, 0.48642307522762585, 0.08047406847429861, 0.08047406847429861, 0.08047406847429861, 0.09481160157979607, 0.09481160157979607, 0.09481160157979607, 0.0775949942190911, 0.0775949942190911, 0.0775949942190911, 0.1519278721633589, 0.1519278721633589, 0.1519278721633589, 0.18554126733024956, 0.18554126733024956, 0.18554126733024956, 0.24152357802480262, 0.24152357802480262, 0.24152357802480262, 0.27279425599326135, 0.27279425599326135, 0.27279425599326135, 0.2336067783960316, 0.2336067783960316, 0.2336067783960316, 0.27173594987932437, 0.27173594987932437, 0.27173594987932437, 0.19473767269872078, 0.19473767269872078, 0.19473767269872078, 0.20501337371514416, 0.20501337371514416, 0.20501337371514416, 0.21452506517621694, 0.21452506517621694, 0.21452506517621694, 0.16838353882325696, 0.16838353882325696, 0.16838353882325696, 0.1856489512496834, 0.1856489512496834, 0.1856489512496834, 0.1947532708976576, 0.1947532708976576, 0.1947532708976576, 0.18175260802548643, 0.18175260802548643, 0.18175260802548643, 0.17578918787036524, 0.17578918787036524, 0.17578918787036524, 0.1798340340100103, 0.1798340340100103, 0.1798340340100103, 0.29687119999587386, 0.29687119999587386, 0.29687119999587386, 0.18034687444605257, 0.18034687444605257, 0.18034687444605257, 0.1858378495495545, 0.1858378495495545, 0.1858378495495545, 0.6030549787840663, 0.6030549787840663, 0.6030549787840663, 0.3743331617842738, 0.3743331617842738, 0.3743331617842738, 0.20293392812114575, 0.20293392812114575, 0.20293392812114575, 0.1782650809956161, 0.1782650809956161, 0.1782650809956161, 0.19276599508537073, 0.19276599508537073, 0.19276599508537073, 0.1879698192558883, 0.1879698192558883, 0.1879698192558883, 0.06697855271682984, 0.06697855271682984, 0.06697855271682984, 0.06802111336510186, 0.06802111336510186, 0.06802111336510186, 0.07065983986949576, 0.07065983986949576, 0.07065983986949576]}, "mutation_prompt": null}
{"id": "bbffaf94-a140-40cb-ad28-172caa066d44", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        evals = self.population_size\n\n        while evals < self.budget:\n            for i in range(self.population_size):\n                idxs = list(range(self.population_size))\n                idxs.remove(i)\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                \n                if evals >= self.budget:\n                    break\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Differential Evolution with Adaptive Mutation for Global and Local Search Balance", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6ca94746-c4a4-4516-b6f1-dabd456b8fa3", "metadata": {"aucs": [0.6085051492144853, 0.6085051492144853, 0.6085051492144853, 0.6477860782039992, 0.6477860782039992, 0.6477860782039992, 0.6482058957232064, 0.6482058957232064, 0.6482058957232064, 0.3967970210119639, 0.3967970210119639, 0.3967970210119639, 0.418997132399916, 0.418997132399916, 0.418997132399916, 0.3917527025473978, 0.3917527025473978, 0.3917527025473978, 0.08946476887152477, 0.08946476887152477, 0.08946476887152477, 0.08277369343696805, 0.08277369343696805, 0.08277369343696805, 0.09177631224331528, 0.09177631224331528, 0.09177631224331528, 0.087875928785205, 0.087875928785205, 0.087875928785205, 0.08281536553662405, 0.08281536553662405, 0.08281536553662405, 0.08752627286148962, 0.08752627286148962, 0.08752627286148962, 0.9518291332223363, 0.9518291332223363, 0.9518291332223363, 0.9230756530222763, 0.9230756530222763, 0.9230756530222763, 0.9216358770308949, 0.9216358770308949, 0.9216358770308949, 0.273803429069872, 0.273803429069872, 0.273803429069872, 0.27612679724777944, 0.27612679724777944, 0.27612679724777944, 0.31470550726402946, 0.31470550726402946, 0.31470550726402946, 0.44840824418965053, 0.44840824418965053, 0.44840824418965053, 0.5510617432433971, 0.5510617432433971, 0.5510617432433971, 0.6099985477960679, 0.6099985477960679, 0.6099985477960679, 0.21528901315585025, 0.21528901315585025, 0.21528901315585025, 0.2352063216011523, 0.2352063216011523, 0.2352063216011523, 0.21268113459000082, 0.21268113459000082, 0.21268113459000082, 0.24586394163657832, 0.24586394163657832, 0.24586394163657832, 0.19421800442004056, 0.19421800442004056, 0.19421800442004056, 0.17520615311911514, 0.17520615311911514, 0.17520615311911514, 0.12306680557736094, 0.12306680557736094, 0.12306680557736094, 0.14982362507823688, 0.14982362507823688, 0.14982362507823688, 0.11918403924381149, 0.11918403924381149, 0.11918403924381149, 0.2630022185136861, 0.2630022185136861, 0.2630022185136861, 0.22145494718506042, 0.22145494718506042, 0.22145494718506042, 0.26874623883545057, 0.26874623883545057, 0.26874623883545057, 0.017648032426149207, 0.017648032426149207, 0.017648032426149207, 0.033456304643037726, 0.033456304643037726, 0.033456304643037726, 0.03880897299464814, 0.03880897299464814, 0.03880897299464814, 0.1510452189739554, 0.1510452189739554, 0.1510452189739554, 0.16908364218105998, 0.16908364218105998, 0.16908364218105998, 0.15108806188041013, 0.15108806188041013, 0.15108806188041013, 0.4734569121052816, 0.4734569121052816, 0.4734569121052816, 0.4771669508406322, 0.4771669508406322, 0.4771669508406322, 0.48642307522762585, 0.48642307522762585, 0.48642307522762585, 0.08047406847429861, 0.08047406847429861, 0.08047406847429861, 0.09481160157979607, 0.09481160157979607, 0.09481160157979607, 0.0775949942190911, 0.0775949942190911, 0.0775949942190911, 0.1519278721633589, 0.1519278721633589, 0.1519278721633589, 0.18554126733024956, 0.18554126733024956, 0.18554126733024956, 0.24152357802480262, 0.24152357802480262, 0.24152357802480262, 0.27279425599326135, 0.27279425599326135, 0.27279425599326135, 0.2336067783960316, 0.2336067783960316, 0.2336067783960316, 0.27173594987932437, 0.27173594987932437, 0.27173594987932437, 0.19473767269872078, 0.19473767269872078, 0.19473767269872078, 0.20501337371514416, 0.20501337371514416, 0.20501337371514416, 0.21452506517621694, 0.21452506517621694, 0.21452506517621694, 0.16838353882325696, 0.16838353882325696, 0.16838353882325696, 0.1856489512496834, 0.1856489512496834, 0.1856489512496834, 0.1947532708976576, 0.1947532708976576, 0.1947532708976576, 0.18175260802548643, 0.18175260802548643, 0.18175260802548643, 0.17578918787036524, 0.17578918787036524, 0.17578918787036524, 0.1798340340100103, 0.1798340340100103, 0.1798340340100103, 0.29687119999587386, 0.29687119999587386, 0.29687119999587386, 0.18034687444605257, 0.18034687444605257, 0.18034687444605257, 0.1858378495495545, 0.1858378495495545, 0.1858378495495545, 0.6030549787840663, 0.6030549787840663, 0.6030549787840663, 0.3743331617842738, 0.3743331617842738, 0.3743331617842738, 0.20293392812114575, 0.20293392812114575, 0.20293392812114575, 0.1782650809956161, 0.1782650809956161, 0.1782650809956161, 0.19276599508537073, 0.19276599508537073, 0.19276599508537073, 0.1879698192558883, 0.1879698192558883, 0.1879698192558883, 0.06697855271682984, 0.06697855271682984, 0.06697855271682984, 0.06802111336510186, 0.06802111336510186, 0.06802111336510186, 0.07065983986949576, 0.07065983986949576, 0.07065983986949576]}, "mutation_prompt": null}
{"id": "6ea8c4be-490a-4fdc-b401-6f176be8aabc", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        evals = self.population_size\n\n        while evals < self.budget:\n            for i in range(self.population_size):\n                idxs = list(range(self.population_size))\n                idxs.remove(i)\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                \n                if evals >= self.budget:\n                    break\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Differential Evolution with Adaptive Mutation for Global and Local Search Balance", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6ca94746-c4a4-4516-b6f1-dabd456b8fa3", "metadata": {"aucs": [0.6085051492144853, 0.6085051492144853, 0.6085051492144853, 0.6477860782039992, 0.6477860782039992, 0.6477860782039992, 0.6482058957232064, 0.6482058957232064, 0.6482058957232064, 0.3967970210119639, 0.3967970210119639, 0.3967970210119639, 0.418997132399916, 0.418997132399916, 0.418997132399916, 0.3917527025473978, 0.3917527025473978, 0.3917527025473978, 0.08946476887152477, 0.08946476887152477, 0.08946476887152477, 0.08277369343696805, 0.08277369343696805, 0.08277369343696805, 0.09177631224331528, 0.09177631224331528, 0.09177631224331528, 0.087875928785205, 0.087875928785205, 0.087875928785205, 0.08281536553662405, 0.08281536553662405, 0.08281536553662405, 0.08752627286148962, 0.08752627286148962, 0.08752627286148962, 0.9518291332223363, 0.9518291332223363, 0.9518291332223363, 0.9230756530222763, 0.9230756530222763, 0.9230756530222763, 0.9216358770308949, 0.9216358770308949, 0.9216358770308949, 0.273803429069872, 0.273803429069872, 0.273803429069872, 0.27612679724777944, 0.27612679724777944, 0.27612679724777944, 0.31470550726402946, 0.31470550726402946, 0.31470550726402946, 0.44840824418965053, 0.44840824418965053, 0.44840824418965053, 0.5510617432433971, 0.5510617432433971, 0.5510617432433971, 0.6099985477960679, 0.6099985477960679, 0.6099985477960679, 0.21528901315585025, 0.21528901315585025, 0.21528901315585025, 0.2352063216011523, 0.2352063216011523, 0.2352063216011523, 0.21268113459000082, 0.21268113459000082, 0.21268113459000082, 0.24586394163657832, 0.24586394163657832, 0.24586394163657832, 0.19421800442004056, 0.19421800442004056, 0.19421800442004056, 0.17520615311911514, 0.17520615311911514, 0.17520615311911514, 0.12306680557736094, 0.12306680557736094, 0.12306680557736094, 0.14982362507823688, 0.14982362507823688, 0.14982362507823688, 0.11918403924381149, 0.11918403924381149, 0.11918403924381149, 0.2630022185136861, 0.2630022185136861, 0.2630022185136861, 0.22145494718506042, 0.22145494718506042, 0.22145494718506042, 0.26874623883545057, 0.26874623883545057, 0.26874623883545057, 0.017648032426149207, 0.017648032426149207, 0.017648032426149207, 0.033456304643037726, 0.033456304643037726, 0.033456304643037726, 0.03880897299464814, 0.03880897299464814, 0.03880897299464814, 0.1510452189739554, 0.1510452189739554, 0.1510452189739554, 0.16908364218105998, 0.16908364218105998, 0.16908364218105998, 0.15108806188041013, 0.15108806188041013, 0.15108806188041013, 0.4734569121052816, 0.4734569121052816, 0.4734569121052816, 0.4771669508406322, 0.4771669508406322, 0.4771669508406322, 0.48642307522762585, 0.48642307522762585, 0.48642307522762585, 0.08047406847429861, 0.08047406847429861, 0.08047406847429861, 0.09481160157979607, 0.09481160157979607, 0.09481160157979607, 0.0775949942190911, 0.0775949942190911, 0.0775949942190911, 0.1519278721633589, 0.1519278721633589, 0.1519278721633589, 0.18554126733024956, 0.18554126733024956, 0.18554126733024956, 0.24152357802480262, 0.24152357802480262, 0.24152357802480262, 0.27279425599326135, 0.27279425599326135, 0.27279425599326135, 0.2336067783960316, 0.2336067783960316, 0.2336067783960316, 0.27173594987932437, 0.27173594987932437, 0.27173594987932437, 0.19473767269872078, 0.19473767269872078, 0.19473767269872078, 0.20501337371514416, 0.20501337371514416, 0.20501337371514416, 0.21452506517621694, 0.21452506517621694, 0.21452506517621694, 0.16838353882325696, 0.16838353882325696, 0.16838353882325696, 0.1856489512496834, 0.1856489512496834, 0.1856489512496834, 0.1947532708976576, 0.1947532708976576, 0.1947532708976576, 0.18175260802548643, 0.18175260802548643, 0.18175260802548643, 0.17578918787036524, 0.17578918787036524, 0.17578918787036524, 0.1798340340100103, 0.1798340340100103, 0.1798340340100103, 0.29687119999587386, 0.29687119999587386, 0.29687119999587386, 0.18034687444605257, 0.18034687444605257, 0.18034687444605257, 0.1858378495495545, 0.1858378495495545, 0.1858378495495545, 0.6030549787840663, 0.6030549787840663, 0.6030549787840663, 0.3743331617842738, 0.3743331617842738, 0.3743331617842738, 0.20293392812114575, 0.20293392812114575, 0.20293392812114575, 0.1782650809956161, 0.1782650809956161, 0.1782650809956161, 0.19276599508537073, 0.19276599508537073, 0.19276599508537073, 0.1879698192558883, 0.1879698192558883, 0.1879698192558883, 0.06697855271682984, 0.06697855271682984, 0.06697855271682984, 0.06802111336510186, 0.06802111336510186, 0.06802111336510186, 0.07065983986949576, 0.07065983986949576, 0.07065983986949576]}, "mutation_prompt": null}
{"id": "60b55924-08cb-4dd6-b648-056970cea0a4", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        evals = self.population_size\n\n        while evals < self.budget:\n            for i in range(self.population_size):\n                idxs = list(range(self.population_size))\n                idxs.remove(i)\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                \n                if evals >= self.budget:\n                    break\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Differential Evolution with Adaptive Mutation for Global and Local Search Balance", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6ca94746-c4a4-4516-b6f1-dabd456b8fa3", "metadata": {"aucs": [0.6085051492144853, 0.6085051492144853, 0.6085051492144853, 0.6477860782039992, 0.6477860782039992, 0.6477860782039992, 0.6482058957232064, 0.6482058957232064, 0.6482058957232064, 0.3967970210119639, 0.3967970210119639, 0.3967970210119639, 0.418997132399916, 0.418997132399916, 0.418997132399916, 0.3917527025473978, 0.3917527025473978, 0.3917527025473978, 0.08946476887152477, 0.08946476887152477, 0.08946476887152477, 0.08277369343696805, 0.08277369343696805, 0.08277369343696805, 0.09177631224331528, 0.09177631224331528, 0.09177631224331528, 0.087875928785205, 0.087875928785205, 0.087875928785205, 0.08281536553662405, 0.08281536553662405, 0.08281536553662405, 0.08752627286148962, 0.08752627286148962, 0.08752627286148962, 0.9518291332223363, 0.9518291332223363, 0.9518291332223363, 0.9230756530222763, 0.9230756530222763, 0.9230756530222763, 0.9216358770308949, 0.9216358770308949, 0.9216358770308949, 0.273803429069872, 0.273803429069872, 0.273803429069872, 0.27612679724777944, 0.27612679724777944, 0.27612679724777944, 0.31470550726402946, 0.31470550726402946, 0.31470550726402946, 0.44840824418965053, 0.44840824418965053, 0.44840824418965053, 0.5510617432433971, 0.5510617432433971, 0.5510617432433971, 0.6099985477960679, 0.6099985477960679, 0.6099985477960679, 0.21528901315585025, 0.21528901315585025, 0.21528901315585025, 0.2352063216011523, 0.2352063216011523, 0.2352063216011523, 0.21268113459000082, 0.21268113459000082, 0.21268113459000082, 0.24586394163657832, 0.24586394163657832, 0.24586394163657832, 0.19421800442004056, 0.19421800442004056, 0.19421800442004056, 0.17520615311911514, 0.17520615311911514, 0.17520615311911514, 0.12306680557736094, 0.12306680557736094, 0.12306680557736094, 0.14982362507823688, 0.14982362507823688, 0.14982362507823688, 0.11918403924381149, 0.11918403924381149, 0.11918403924381149, 0.2630022185136861, 0.2630022185136861, 0.2630022185136861, 0.22145494718506042, 0.22145494718506042, 0.22145494718506042, 0.26874623883545057, 0.26874623883545057, 0.26874623883545057, 0.017648032426149207, 0.017648032426149207, 0.017648032426149207, 0.033456304643037726, 0.033456304643037726, 0.033456304643037726, 0.03880897299464814, 0.03880897299464814, 0.03880897299464814, 0.1510452189739554, 0.1510452189739554, 0.1510452189739554, 0.16908364218105998, 0.16908364218105998, 0.16908364218105998, 0.15108806188041013, 0.15108806188041013, 0.15108806188041013, 0.4734569121052816, 0.4734569121052816, 0.4734569121052816, 0.4771669508406322, 0.4771669508406322, 0.4771669508406322, 0.48642307522762585, 0.48642307522762585, 0.48642307522762585, 0.08047406847429861, 0.08047406847429861, 0.08047406847429861, 0.09481160157979607, 0.09481160157979607, 0.09481160157979607, 0.0775949942190911, 0.0775949942190911, 0.0775949942190911, 0.1519278721633589, 0.1519278721633589, 0.1519278721633589, 0.18554126733024956, 0.18554126733024956, 0.18554126733024956, 0.24152357802480262, 0.24152357802480262, 0.24152357802480262, 0.27279425599326135, 0.27279425599326135, 0.27279425599326135, 0.2336067783960316, 0.2336067783960316, 0.2336067783960316, 0.27173594987932437, 0.27173594987932437, 0.27173594987932437, 0.19473767269872078, 0.19473767269872078, 0.19473767269872078, 0.20501337371514416, 0.20501337371514416, 0.20501337371514416, 0.21452506517621694, 0.21452506517621694, 0.21452506517621694, 0.16838353882325696, 0.16838353882325696, 0.16838353882325696, 0.1856489512496834, 0.1856489512496834, 0.1856489512496834, 0.1947532708976576, 0.1947532708976576, 0.1947532708976576, 0.18175260802548643, 0.18175260802548643, 0.18175260802548643, 0.17578918787036524, 0.17578918787036524, 0.17578918787036524, 0.1798340340100103, 0.1798340340100103, 0.1798340340100103, 0.29687119999587386, 0.29687119999587386, 0.29687119999587386, 0.18034687444605257, 0.18034687444605257, 0.18034687444605257, 0.1858378495495545, 0.1858378495495545, 0.1858378495495545, 0.6030549787840663, 0.6030549787840663, 0.6030549787840663, 0.3743331617842738, 0.3743331617842738, 0.3743331617842738, 0.20293392812114575, 0.20293392812114575, 0.20293392812114575, 0.1782650809956161, 0.1782650809956161, 0.1782650809956161, 0.19276599508537073, 0.19276599508537073, 0.19276599508537073, 0.1879698192558883, 0.1879698192558883, 0.1879698192558883, 0.06697855271682984, 0.06697855271682984, 0.06697855271682984, 0.06802111336510186, 0.06802111336510186, 0.06802111336510186, 0.07065983986949576, 0.07065983986949576, 0.07065983986949576]}, "mutation_prompt": null}
{"id": "e4d46da1-8276-4f5d-ae36-0b945b12219b", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        evals = self.population_size\n\n        while evals < self.budget:\n            for i in range(self.population_size):\n                idxs = list(range(self.population_size))\n                idxs.remove(i)\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                \n                if evals >= self.budget:\n                    break\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Differential Evolution with Adaptive Mutation for Global and Local Search Balance", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6ca94746-c4a4-4516-b6f1-dabd456b8fa3", "metadata": {"aucs": [0.6085051492144853, 0.6085051492144853, 0.6085051492144853, 0.6477860782039992, 0.6477860782039992, 0.6477860782039992, 0.6482058957232064, 0.6482058957232064, 0.6482058957232064, 0.3967970210119639, 0.3967970210119639, 0.3967970210119639, 0.418997132399916, 0.418997132399916, 0.418997132399916, 0.3917527025473978, 0.3917527025473978, 0.3917527025473978, 0.08946476887152477, 0.08946476887152477, 0.08946476887152477, 0.08277369343696805, 0.08277369343696805, 0.08277369343696805, 0.09177631224331528, 0.09177631224331528, 0.09177631224331528, 0.087875928785205, 0.087875928785205, 0.087875928785205, 0.08281536553662405, 0.08281536553662405, 0.08281536553662405, 0.08752627286148962, 0.08752627286148962, 0.08752627286148962, 0.9518291332223363, 0.9518291332223363, 0.9518291332223363, 0.9230756530222763, 0.9230756530222763, 0.9230756530222763, 0.9216358770308949, 0.9216358770308949, 0.9216358770308949, 0.273803429069872, 0.273803429069872, 0.273803429069872, 0.27612679724777944, 0.27612679724777944, 0.27612679724777944, 0.31470550726402946, 0.31470550726402946, 0.31470550726402946, 0.44840824418965053, 0.44840824418965053, 0.44840824418965053, 0.5510617432433971, 0.5510617432433971, 0.5510617432433971, 0.6099985477960679, 0.6099985477960679, 0.6099985477960679, 0.21528901315585025, 0.21528901315585025, 0.21528901315585025, 0.2352063216011523, 0.2352063216011523, 0.2352063216011523, 0.21268113459000082, 0.21268113459000082, 0.21268113459000082, 0.24586394163657832, 0.24586394163657832, 0.24586394163657832, 0.19421800442004056, 0.19421800442004056, 0.19421800442004056, 0.17520615311911514, 0.17520615311911514, 0.17520615311911514, 0.12306680557736094, 0.12306680557736094, 0.12306680557736094, 0.14982362507823688, 0.14982362507823688, 0.14982362507823688, 0.11918403924381149, 0.11918403924381149, 0.11918403924381149, 0.2630022185136861, 0.2630022185136861, 0.2630022185136861, 0.22145494718506042, 0.22145494718506042, 0.22145494718506042, 0.26874623883545057, 0.26874623883545057, 0.26874623883545057, 0.017648032426149207, 0.017648032426149207, 0.017648032426149207, 0.033456304643037726, 0.033456304643037726, 0.033456304643037726, 0.03880897299464814, 0.03880897299464814, 0.03880897299464814, 0.1510452189739554, 0.1510452189739554, 0.1510452189739554, 0.16908364218105998, 0.16908364218105998, 0.16908364218105998, 0.15108806188041013, 0.15108806188041013, 0.15108806188041013, 0.4734569121052816, 0.4734569121052816, 0.4734569121052816, 0.4771669508406322, 0.4771669508406322, 0.4771669508406322, 0.48642307522762585, 0.48642307522762585, 0.48642307522762585, 0.08047406847429861, 0.08047406847429861, 0.08047406847429861, 0.09481160157979607, 0.09481160157979607, 0.09481160157979607, 0.0775949942190911, 0.0775949942190911, 0.0775949942190911, 0.1519278721633589, 0.1519278721633589, 0.1519278721633589, 0.18554126733024956, 0.18554126733024956, 0.18554126733024956, 0.24152357802480262, 0.24152357802480262, 0.24152357802480262, 0.27279425599326135, 0.27279425599326135, 0.27279425599326135, 0.2336067783960316, 0.2336067783960316, 0.2336067783960316, 0.27173594987932437, 0.27173594987932437, 0.27173594987932437, 0.19473767269872078, 0.19473767269872078, 0.19473767269872078, 0.20501337371514416, 0.20501337371514416, 0.20501337371514416, 0.21452506517621694, 0.21452506517621694, 0.21452506517621694, 0.16838353882325696, 0.16838353882325696, 0.16838353882325696, 0.1856489512496834, 0.1856489512496834, 0.1856489512496834, 0.1947532708976576, 0.1947532708976576, 0.1947532708976576, 0.18175260802548643, 0.18175260802548643, 0.18175260802548643, 0.17578918787036524, 0.17578918787036524, 0.17578918787036524, 0.1798340340100103, 0.1798340340100103, 0.1798340340100103, 0.29687119999587386, 0.29687119999587386, 0.29687119999587386, 0.18034687444605257, 0.18034687444605257, 0.18034687444605257, 0.1858378495495545, 0.1858378495495545, 0.1858378495495545, 0.6030549787840663, 0.6030549787840663, 0.6030549787840663, 0.3743331617842738, 0.3743331617842738, 0.3743331617842738, 0.20293392812114575, 0.20293392812114575, 0.20293392812114575, 0.1782650809956161, 0.1782650809956161, 0.1782650809956161, 0.19276599508537073, 0.19276599508537073, 0.19276599508537073, 0.1879698192558883, 0.1879698192558883, 0.1879698192558883, 0.06697855271682984, 0.06697855271682984, 0.06697855271682984, 0.06802111336510186, 0.06802111336510186, 0.06802111336510186, 0.07065983986949576, 0.07065983986949576, 0.07065983986949576]}, "mutation_prompt": null}
{"id": "fda6519d-fca9-4afb-b717-543594359de0", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.elite_fraction = 0.1  # Fraction of elite individuals to retain\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        evals = self.population_size\n\n        while evals < self.budget:\n            elite_count = max(1, int(self.elite_fraction * self.population_size))\n            elite_indices = np.argsort(fitness)[:elite_count]\n            next_generation = np.copy(population[elite_indices])\n\n            for i in range(self.population_size):\n                if i < elite_count:\n                    continue\n                idxs = list(set(range(self.population_size)) - {i})\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                local_crossover_rate = self.crossover_rate * (1 - (evals / self.budget))\n                trial = np.where(np.random.rand(self.dim) < local_crossover_rate, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    next_generation = np.vstack((next_generation, trial))\n                    fitness[i] = trial_fitness\n                else:\n                    next_generation = np.vstack((next_generation, population[i]))\n\n                if evals >= self.budget:\n                    break\n\n            population = next_generation[:self.population_size]\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Elite Retention and Adaptive Crossover for Enhanced Convergence.", "configspace": "", "generation": 9, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('index 47 is out of bounds for axis 0 with size 10').", "error": "IndexError('index 47 is out of bounds for axis 0 with size 10')", "parent_id": "6ca94746-c4a4-4516-b6f1-dabd456b8fa3", "metadata": {}, "mutation_prompt": null}
{"id": "558aeec0-efe5-4f5c-9162-825cde7c42e9", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        evals = self.population_size\n\n        while evals < self.budget:\n            for i in range(self.population_size):\n                idxs = list(range(self.population_size))\n                idxs.remove(i)\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                \n                if evals >= self.budget:\n                    break\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Differential Evolution with Adaptive Mutation for Global and Local Search Balance", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6ca94746-c4a4-4516-b6f1-dabd456b8fa3", "metadata": {"aucs": [0.6085051492144853, 0.6085051492144853, 0.6085051492144853, 0.6477860782039992, 0.6477860782039992, 0.6477860782039992, 0.6482058957232064, 0.6482058957232064, 0.6482058957232064, 0.3967970210119639, 0.3967970210119639, 0.3967970210119639, 0.418997132399916, 0.418997132399916, 0.418997132399916, 0.3917527025473978, 0.3917527025473978, 0.3917527025473978, 0.08946476887152477, 0.08946476887152477, 0.08946476887152477, 0.08277369343696805, 0.08277369343696805, 0.08277369343696805, 0.09177631224331528, 0.09177631224331528, 0.09177631224331528, 0.087875928785205, 0.087875928785205, 0.087875928785205, 0.08281536553662405, 0.08281536553662405, 0.08281536553662405, 0.08752627286148962, 0.08752627286148962, 0.08752627286148962, 0.9518291332223363, 0.9518291332223363, 0.9518291332223363, 0.9230756530222763, 0.9230756530222763, 0.9230756530222763, 0.9216358770308949, 0.9216358770308949, 0.9216358770308949, 0.273803429069872, 0.273803429069872, 0.273803429069872, 0.27612679724777944, 0.27612679724777944, 0.27612679724777944, 0.31470550726402946, 0.31470550726402946, 0.31470550726402946, 0.44840824418965053, 0.44840824418965053, 0.44840824418965053, 0.5510617432433971, 0.5510617432433971, 0.5510617432433971, 0.6099985477960679, 0.6099985477960679, 0.6099985477960679, 0.21528901315585025, 0.21528901315585025, 0.21528901315585025, 0.2352063216011523, 0.2352063216011523, 0.2352063216011523, 0.21268113459000082, 0.21268113459000082, 0.21268113459000082, 0.24586394163657832, 0.24586394163657832, 0.24586394163657832, 0.19421800442004056, 0.19421800442004056, 0.19421800442004056, 0.17520615311911514, 0.17520615311911514, 0.17520615311911514, 0.12306680557736094, 0.12306680557736094, 0.12306680557736094, 0.14982362507823688, 0.14982362507823688, 0.14982362507823688, 0.11918403924381149, 0.11918403924381149, 0.11918403924381149, 0.2630022185136861, 0.2630022185136861, 0.2630022185136861, 0.22145494718506042, 0.22145494718506042, 0.22145494718506042, 0.26874623883545057, 0.26874623883545057, 0.26874623883545057, 0.017648032426149207, 0.017648032426149207, 0.017648032426149207, 0.033456304643037726, 0.033456304643037726, 0.033456304643037726, 0.03880897299464814, 0.03880897299464814, 0.03880897299464814, 0.1510452189739554, 0.1510452189739554, 0.1510452189739554, 0.16908364218105998, 0.16908364218105998, 0.16908364218105998, 0.15108806188041013, 0.15108806188041013, 0.15108806188041013, 0.4734569121052816, 0.4734569121052816, 0.4734569121052816, 0.4771669508406322, 0.4771669508406322, 0.4771669508406322, 0.48642307522762585, 0.48642307522762585, 0.48642307522762585, 0.08047406847429861, 0.08047406847429861, 0.08047406847429861, 0.09481160157979607, 0.09481160157979607, 0.09481160157979607, 0.0775949942190911, 0.0775949942190911, 0.0775949942190911, 0.1519278721633589, 0.1519278721633589, 0.1519278721633589, 0.18554126733024956, 0.18554126733024956, 0.18554126733024956, 0.24152357802480262, 0.24152357802480262, 0.24152357802480262, 0.27279425599326135, 0.27279425599326135, 0.27279425599326135, 0.2336067783960316, 0.2336067783960316, 0.2336067783960316, 0.27173594987932437, 0.27173594987932437, 0.27173594987932437, 0.19473767269872078, 0.19473767269872078, 0.19473767269872078, 0.20501337371514416, 0.20501337371514416, 0.20501337371514416, 0.21452506517621694, 0.21452506517621694, 0.21452506517621694, 0.16838353882325696, 0.16838353882325696, 0.16838353882325696, 0.1856489512496834, 0.1856489512496834, 0.1856489512496834, 0.1947532708976576, 0.1947532708976576, 0.1947532708976576, 0.18175260802548643, 0.18175260802548643, 0.18175260802548643, 0.17578918787036524, 0.17578918787036524, 0.17578918787036524, 0.1798340340100103, 0.1798340340100103, 0.1798340340100103, 0.29687119999587386, 0.29687119999587386, 0.29687119999587386, 0.18034687444605257, 0.18034687444605257, 0.18034687444605257, 0.1858378495495545, 0.1858378495495545, 0.1858378495495545, 0.6030549787840663, 0.6030549787840663, 0.6030549787840663, 0.3743331617842738, 0.3743331617842738, 0.3743331617842738, 0.20293392812114575, 0.20293392812114575, 0.20293392812114575, 0.1782650809956161, 0.1782650809956161, 0.1782650809956161, 0.19276599508537073, 0.19276599508537073, 0.19276599508537073, 0.1879698192558883, 0.1879698192558883, 0.1879698192558883, 0.06697855271682984, 0.06697855271682984, 0.06697855271682984, 0.06802111336510186, 0.06802111336510186, 0.06802111336510186, 0.07065983986949576, 0.07065983986949576, 0.07065983986949576]}, "mutation_prompt": null}
{"id": "4d4042e3-37eb-49f0-b56a-50b091b70005", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        evals = self.population_size\n\n        while evals < self.budget:\n            for i in range(self.population_size):\n                idxs = list(range(self.population_size))\n                idxs.remove(i)\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                \n                if evals >= self.budget:\n                    break\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Differential Evolution with Adaptive Mutation for Global and Local Search Balance", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6ca94746-c4a4-4516-b6f1-dabd456b8fa3", "metadata": {"aucs": [0.6085051492144853, 0.6085051492144853, 0.6085051492144853, 0.6477860782039992, 0.6477860782039992, 0.6477860782039992, 0.6482058957232064, 0.6482058957232064, 0.6482058957232064, 0.3967970210119639, 0.3967970210119639, 0.3967970210119639, 0.418997132399916, 0.418997132399916, 0.418997132399916, 0.3917527025473978, 0.3917527025473978, 0.3917527025473978, 0.08946476887152477, 0.08946476887152477, 0.08946476887152477, 0.08277369343696805, 0.08277369343696805, 0.08277369343696805, 0.09177631224331528, 0.09177631224331528, 0.09177631224331528, 0.087875928785205, 0.087875928785205, 0.087875928785205, 0.08281536553662405, 0.08281536553662405, 0.08281536553662405, 0.08752627286148962, 0.08752627286148962, 0.08752627286148962, 0.9518291332223363, 0.9518291332223363, 0.9518291332223363, 0.9230756530222763, 0.9230756530222763, 0.9230756530222763, 0.9216358770308949, 0.9216358770308949, 0.9216358770308949, 0.273803429069872, 0.273803429069872, 0.273803429069872, 0.27612679724777944, 0.27612679724777944, 0.27612679724777944, 0.31470550726402946, 0.31470550726402946, 0.31470550726402946, 0.44840824418965053, 0.44840824418965053, 0.44840824418965053, 0.5510617432433971, 0.5510617432433971, 0.5510617432433971, 0.6099985477960679, 0.6099985477960679, 0.6099985477960679, 0.21528901315585025, 0.21528901315585025, 0.21528901315585025, 0.2352063216011523, 0.2352063216011523, 0.2352063216011523, 0.21268113459000082, 0.21268113459000082, 0.21268113459000082, 0.24586394163657832, 0.24586394163657832, 0.24586394163657832, 0.19421800442004056, 0.19421800442004056, 0.19421800442004056, 0.17520615311911514, 0.17520615311911514, 0.17520615311911514, 0.12306680557736094, 0.12306680557736094, 0.12306680557736094, 0.14982362507823688, 0.14982362507823688, 0.14982362507823688, 0.11918403924381149, 0.11918403924381149, 0.11918403924381149, 0.2630022185136861, 0.2630022185136861, 0.2630022185136861, 0.22145494718506042, 0.22145494718506042, 0.22145494718506042, 0.26874623883545057, 0.26874623883545057, 0.26874623883545057, 0.017648032426149207, 0.017648032426149207, 0.017648032426149207, 0.033456304643037726, 0.033456304643037726, 0.033456304643037726, 0.03880897299464814, 0.03880897299464814, 0.03880897299464814, 0.1510452189739554, 0.1510452189739554, 0.1510452189739554, 0.16908364218105998, 0.16908364218105998, 0.16908364218105998, 0.15108806188041013, 0.15108806188041013, 0.15108806188041013, 0.4734569121052816, 0.4734569121052816, 0.4734569121052816, 0.4771669508406322, 0.4771669508406322, 0.4771669508406322, 0.48642307522762585, 0.48642307522762585, 0.48642307522762585, 0.08047406847429861, 0.08047406847429861, 0.08047406847429861, 0.09481160157979607, 0.09481160157979607, 0.09481160157979607, 0.0775949942190911, 0.0775949942190911, 0.0775949942190911, 0.1519278721633589, 0.1519278721633589, 0.1519278721633589, 0.18554126733024956, 0.18554126733024956, 0.18554126733024956, 0.24152357802480262, 0.24152357802480262, 0.24152357802480262, 0.27279425599326135, 0.27279425599326135, 0.27279425599326135, 0.2336067783960316, 0.2336067783960316, 0.2336067783960316, 0.27173594987932437, 0.27173594987932437, 0.27173594987932437, 0.19473767269872078, 0.19473767269872078, 0.19473767269872078, 0.20501337371514416, 0.20501337371514416, 0.20501337371514416, 0.21452506517621694, 0.21452506517621694, 0.21452506517621694, 0.16838353882325696, 0.16838353882325696, 0.16838353882325696, 0.1856489512496834, 0.1856489512496834, 0.1856489512496834, 0.1947532708976576, 0.1947532708976576, 0.1947532708976576, 0.18175260802548643, 0.18175260802548643, 0.18175260802548643, 0.17578918787036524, 0.17578918787036524, 0.17578918787036524, 0.1798340340100103, 0.1798340340100103, 0.1798340340100103, 0.29687119999587386, 0.29687119999587386, 0.29687119999587386, 0.18034687444605257, 0.18034687444605257, 0.18034687444605257, 0.1858378495495545, 0.1858378495495545, 0.1858378495495545, 0.6030549787840663, 0.6030549787840663, 0.6030549787840663, 0.3743331617842738, 0.3743331617842738, 0.3743331617842738, 0.20293392812114575, 0.20293392812114575, 0.20293392812114575, 0.1782650809956161, 0.1782650809956161, 0.1782650809956161, 0.19276599508537073, 0.19276599508537073, 0.19276599508537073, 0.1879698192558883, 0.1879698192558883, 0.1879698192558883, 0.06697855271682984, 0.06697855271682984, 0.06697855271682984, 0.06802111336510186, 0.06802111336510186, 0.06802111336510186, 0.07065983986949576, 0.07065983986949576, 0.07065983986949576]}, "mutation_prompt": null}
{"id": "c97c6790-66dc-47b0-b911-8e5672daa9e5", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        evals = self.population_size\n\n        while evals < self.budget:\n            for i in range(self.population_size):\n                idxs = list(range(self.population_size))\n                idxs.remove(i)\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                \n                if evals >= self.budget:\n                    break\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Differential Evolution with Adaptive Mutation for Global and Local Search Balance", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6ca94746-c4a4-4516-b6f1-dabd456b8fa3", "metadata": {"aucs": [0.6085051492144853, 0.6085051492144853, 0.6085051492144853, 0.6477860782039992, 0.6477860782039992, 0.6477860782039992, 0.6482058957232064, 0.6482058957232064, 0.6482058957232064, 0.3967970210119639, 0.3967970210119639, 0.3967970210119639, 0.418997132399916, 0.418997132399916, 0.418997132399916, 0.3917527025473978, 0.3917527025473978, 0.3917527025473978, 0.08946476887152477, 0.08946476887152477, 0.08946476887152477, 0.08277369343696805, 0.08277369343696805, 0.08277369343696805, 0.09177631224331528, 0.09177631224331528, 0.09177631224331528, 0.087875928785205, 0.087875928785205, 0.087875928785205, 0.08281536553662405, 0.08281536553662405, 0.08281536553662405, 0.08752627286148962, 0.08752627286148962, 0.08752627286148962, 0.9518291332223363, 0.9518291332223363, 0.9518291332223363, 0.9230756530222763, 0.9230756530222763, 0.9230756530222763, 0.9216358770308949, 0.9216358770308949, 0.9216358770308949, 0.273803429069872, 0.273803429069872, 0.273803429069872, 0.27612679724777944, 0.27612679724777944, 0.27612679724777944, 0.31470550726402946, 0.31470550726402946, 0.31470550726402946, 0.44840824418965053, 0.44840824418965053, 0.44840824418965053, 0.5510617432433971, 0.5510617432433971, 0.5510617432433971, 0.6099985477960679, 0.6099985477960679, 0.6099985477960679, 0.21528901315585025, 0.21528901315585025, 0.21528901315585025, 0.2352063216011523, 0.2352063216011523, 0.2352063216011523, 0.21268113459000082, 0.21268113459000082, 0.21268113459000082, 0.24586394163657832, 0.24586394163657832, 0.24586394163657832, 0.19421800442004056, 0.19421800442004056, 0.19421800442004056, 0.17520615311911514, 0.17520615311911514, 0.17520615311911514, 0.12306680557736094, 0.12306680557736094, 0.12306680557736094, 0.14982362507823688, 0.14982362507823688, 0.14982362507823688, 0.11918403924381149, 0.11918403924381149, 0.11918403924381149, 0.2630022185136861, 0.2630022185136861, 0.2630022185136861, 0.22145494718506042, 0.22145494718506042, 0.22145494718506042, 0.26874623883545057, 0.26874623883545057, 0.26874623883545057, 0.017648032426149207, 0.017648032426149207, 0.017648032426149207, 0.033456304643037726, 0.033456304643037726, 0.033456304643037726, 0.03880897299464814, 0.03880897299464814, 0.03880897299464814, 0.1510452189739554, 0.1510452189739554, 0.1510452189739554, 0.16908364218105998, 0.16908364218105998, 0.16908364218105998, 0.15108806188041013, 0.15108806188041013, 0.15108806188041013, 0.4734569121052816, 0.4734569121052816, 0.4734569121052816, 0.4771669508406322, 0.4771669508406322, 0.4771669508406322, 0.48642307522762585, 0.48642307522762585, 0.48642307522762585, 0.08047406847429861, 0.08047406847429861, 0.08047406847429861, 0.09481160157979607, 0.09481160157979607, 0.09481160157979607, 0.0775949942190911, 0.0775949942190911, 0.0775949942190911, 0.1519278721633589, 0.1519278721633589, 0.1519278721633589, 0.18554126733024956, 0.18554126733024956, 0.18554126733024956, 0.24152357802480262, 0.24152357802480262, 0.24152357802480262, 0.27279425599326135, 0.27279425599326135, 0.27279425599326135, 0.2336067783960316, 0.2336067783960316, 0.2336067783960316, 0.27173594987932437, 0.27173594987932437, 0.27173594987932437, 0.19473767269872078, 0.19473767269872078, 0.19473767269872078, 0.20501337371514416, 0.20501337371514416, 0.20501337371514416, 0.21452506517621694, 0.21452506517621694, 0.21452506517621694, 0.16838353882325696, 0.16838353882325696, 0.16838353882325696, 0.1856489512496834, 0.1856489512496834, 0.1856489512496834, 0.1947532708976576, 0.1947532708976576, 0.1947532708976576, 0.18175260802548643, 0.18175260802548643, 0.18175260802548643, 0.17578918787036524, 0.17578918787036524, 0.17578918787036524, 0.1798340340100103, 0.1798340340100103, 0.1798340340100103, 0.29687119999587386, 0.29687119999587386, 0.29687119999587386, 0.18034687444605257, 0.18034687444605257, 0.18034687444605257, 0.1858378495495545, 0.1858378495495545, 0.1858378495495545, 0.6030549787840663, 0.6030549787840663, 0.6030549787840663, 0.3743331617842738, 0.3743331617842738, 0.3743331617842738, 0.20293392812114575, 0.20293392812114575, 0.20293392812114575, 0.1782650809956161, 0.1782650809956161, 0.1782650809956161, 0.19276599508537073, 0.19276599508537073, 0.19276599508537073, 0.1879698192558883, 0.1879698192558883, 0.1879698192558883, 0.06697855271682984, 0.06697855271682984, 0.06697855271682984, 0.06802111336510186, 0.06802111336510186, 0.06802111336510186, 0.07065983986949576, 0.07065983986949576, 0.07065983986949576]}, "mutation_prompt": null}
{"id": "fa5a7496-bfde-4272-9b70-f2325ee1fa66", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        evals = self.population_size\n\n        while evals < self.budget:\n            for i in range(self.population_size):\n                idxs = list(range(self.population_size))\n                idxs.remove(i)\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                \n                if evals >= self.budget:\n                    break\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Differential Evolution with Adaptive Mutation for Global and Local Search Balance", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6ca94746-c4a4-4516-b6f1-dabd456b8fa3", "metadata": {"aucs": [0.6085051492144853, 0.6085051492144853, 0.6085051492144853, 0.6477860782039992, 0.6477860782039992, 0.6477860782039992, 0.6482058957232064, 0.6482058957232064, 0.6482058957232064, 0.3967970210119639, 0.3967970210119639, 0.3967970210119639, 0.418997132399916, 0.418997132399916, 0.418997132399916, 0.3917527025473978, 0.3917527025473978, 0.3917527025473978, 0.08946476887152477, 0.08946476887152477, 0.08946476887152477, 0.08277369343696805, 0.08277369343696805, 0.08277369343696805, 0.09177631224331528, 0.09177631224331528, 0.09177631224331528, 0.087875928785205, 0.087875928785205, 0.087875928785205, 0.08281536553662405, 0.08281536553662405, 0.08281536553662405, 0.08752627286148962, 0.08752627286148962, 0.08752627286148962, 0.9518291332223363, 0.9518291332223363, 0.9518291332223363, 0.9230756530222763, 0.9230756530222763, 0.9230756530222763, 0.9216358770308949, 0.9216358770308949, 0.9216358770308949, 0.273803429069872, 0.273803429069872, 0.273803429069872, 0.27612679724777944, 0.27612679724777944, 0.27612679724777944, 0.31470550726402946, 0.31470550726402946, 0.31470550726402946, 0.44840824418965053, 0.44840824418965053, 0.44840824418965053, 0.5510617432433971, 0.5510617432433971, 0.5510617432433971, 0.6099985477960679, 0.6099985477960679, 0.6099985477960679, 0.21528901315585025, 0.21528901315585025, 0.21528901315585025, 0.2352063216011523, 0.2352063216011523, 0.2352063216011523, 0.21268113459000082, 0.21268113459000082, 0.21268113459000082, 0.24586394163657832, 0.24586394163657832, 0.24586394163657832, 0.19421800442004056, 0.19421800442004056, 0.19421800442004056, 0.17520615311911514, 0.17520615311911514, 0.17520615311911514, 0.12306680557736094, 0.12306680557736094, 0.12306680557736094, 0.14982362507823688, 0.14982362507823688, 0.14982362507823688, 0.11918403924381149, 0.11918403924381149, 0.11918403924381149, 0.2630022185136861, 0.2630022185136861, 0.2630022185136861, 0.22145494718506042, 0.22145494718506042, 0.22145494718506042, 0.26874623883545057, 0.26874623883545057, 0.26874623883545057, 0.017648032426149207, 0.017648032426149207, 0.017648032426149207, 0.033456304643037726, 0.033456304643037726, 0.033456304643037726, 0.03880897299464814, 0.03880897299464814, 0.03880897299464814, 0.1510452189739554, 0.1510452189739554, 0.1510452189739554, 0.16908364218105998, 0.16908364218105998, 0.16908364218105998, 0.15108806188041013, 0.15108806188041013, 0.15108806188041013, 0.4734569121052816, 0.4734569121052816, 0.4734569121052816, 0.4771669508406322, 0.4771669508406322, 0.4771669508406322, 0.48642307522762585, 0.48642307522762585, 0.48642307522762585, 0.08047406847429861, 0.08047406847429861, 0.08047406847429861, 0.09481160157979607, 0.09481160157979607, 0.09481160157979607, 0.0775949942190911, 0.0775949942190911, 0.0775949942190911, 0.1519278721633589, 0.1519278721633589, 0.1519278721633589, 0.18554126733024956, 0.18554126733024956, 0.18554126733024956, 0.24152357802480262, 0.24152357802480262, 0.24152357802480262, 0.27279425599326135, 0.27279425599326135, 0.27279425599326135, 0.2336067783960316, 0.2336067783960316, 0.2336067783960316, 0.27173594987932437, 0.27173594987932437, 0.27173594987932437, 0.19473767269872078, 0.19473767269872078, 0.19473767269872078, 0.20501337371514416, 0.20501337371514416, 0.20501337371514416, 0.21452506517621694, 0.21452506517621694, 0.21452506517621694, 0.16838353882325696, 0.16838353882325696, 0.16838353882325696, 0.1856489512496834, 0.1856489512496834, 0.1856489512496834, 0.1947532708976576, 0.1947532708976576, 0.1947532708976576, 0.18175260802548643, 0.18175260802548643, 0.18175260802548643, 0.17578918787036524, 0.17578918787036524, 0.17578918787036524, 0.1798340340100103, 0.1798340340100103, 0.1798340340100103, 0.29687119999587386, 0.29687119999587386, 0.29687119999587386, 0.18034687444605257, 0.18034687444605257, 0.18034687444605257, 0.1858378495495545, 0.1858378495495545, 0.1858378495495545, 0.6030549787840663, 0.6030549787840663, 0.6030549787840663, 0.3743331617842738, 0.3743331617842738, 0.3743331617842738, 0.20293392812114575, 0.20293392812114575, 0.20293392812114575, 0.1782650809956161, 0.1782650809956161, 0.1782650809956161, 0.19276599508537073, 0.19276599508537073, 0.19276599508537073, 0.1879698192558883, 0.1879698192558883, 0.1879698192558883, 0.06697855271682984, 0.06697855271682984, 0.06697855271682984, 0.06802111336510186, 0.06802111336510186, 0.06802111336510186, 0.07065983986949576, 0.07065983986949576, 0.07065983986949576]}, "mutation_prompt": null}
{"id": "43c61281-7f5c-4647-8211-3881faba72d9", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        evals = self.population_size\n\n        while evals < self.budget:\n            for i in range(self.population_size):\n                idxs = list(range(self.population_size))\n                idxs.remove(i)\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                \n                if evals >= self.budget:\n                    break\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Differential Evolution with Adaptive Mutation for Global and Local Search Balance", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6ca94746-c4a4-4516-b6f1-dabd456b8fa3", "metadata": {"aucs": [0.6085051492144853, 0.6085051492144853, 0.6085051492144853, 0.6477860782039992, 0.6477860782039992, 0.6477860782039992, 0.6482058957232064, 0.6482058957232064, 0.6482058957232064, 0.3967970210119639, 0.3967970210119639, 0.3967970210119639, 0.418997132399916, 0.418997132399916, 0.418997132399916, 0.3917527025473978, 0.3917527025473978, 0.3917527025473978, 0.08946476887152477, 0.08946476887152477, 0.08946476887152477, 0.08277369343696805, 0.08277369343696805, 0.08277369343696805, 0.09177631224331528, 0.09177631224331528, 0.09177631224331528, 0.087875928785205, 0.087875928785205, 0.087875928785205, 0.08281536553662405, 0.08281536553662405, 0.08281536553662405, 0.08752627286148962, 0.08752627286148962, 0.08752627286148962, 0.9518291332223363, 0.9518291332223363, 0.9518291332223363, 0.9230756530222763, 0.9230756530222763, 0.9230756530222763, 0.9216358770308949, 0.9216358770308949, 0.9216358770308949, 0.273803429069872, 0.273803429069872, 0.273803429069872, 0.27612679724777944, 0.27612679724777944, 0.27612679724777944, 0.31470550726402946, 0.31470550726402946, 0.31470550726402946, 0.44840824418965053, 0.44840824418965053, 0.44840824418965053, 0.5510617432433971, 0.5510617432433971, 0.5510617432433971, 0.6099985477960679, 0.6099985477960679, 0.6099985477960679, 0.21528901315585025, 0.21528901315585025, 0.21528901315585025, 0.2352063216011523, 0.2352063216011523, 0.2352063216011523, 0.21268113459000082, 0.21268113459000082, 0.21268113459000082, 0.24586394163657832, 0.24586394163657832, 0.24586394163657832, 0.19421800442004056, 0.19421800442004056, 0.19421800442004056, 0.17520615311911514, 0.17520615311911514, 0.17520615311911514, 0.12306680557736094, 0.12306680557736094, 0.12306680557736094, 0.14982362507823688, 0.14982362507823688, 0.14982362507823688, 0.11918403924381149, 0.11918403924381149, 0.11918403924381149, 0.2630022185136861, 0.2630022185136861, 0.2630022185136861, 0.22145494718506042, 0.22145494718506042, 0.22145494718506042, 0.26874623883545057, 0.26874623883545057, 0.26874623883545057, 0.017648032426149207, 0.017648032426149207, 0.017648032426149207, 0.033456304643037726, 0.033456304643037726, 0.033456304643037726, 0.03880897299464814, 0.03880897299464814, 0.03880897299464814, 0.1510452189739554, 0.1510452189739554, 0.1510452189739554, 0.16908364218105998, 0.16908364218105998, 0.16908364218105998, 0.15108806188041013, 0.15108806188041013, 0.15108806188041013, 0.4734569121052816, 0.4734569121052816, 0.4734569121052816, 0.4771669508406322, 0.4771669508406322, 0.4771669508406322, 0.48642307522762585, 0.48642307522762585, 0.48642307522762585, 0.08047406847429861, 0.08047406847429861, 0.08047406847429861, 0.09481160157979607, 0.09481160157979607, 0.09481160157979607, 0.0775949942190911, 0.0775949942190911, 0.0775949942190911, 0.1519278721633589, 0.1519278721633589, 0.1519278721633589, 0.18554126733024956, 0.18554126733024956, 0.18554126733024956, 0.24152357802480262, 0.24152357802480262, 0.24152357802480262, 0.27279425599326135, 0.27279425599326135, 0.27279425599326135, 0.2336067783960316, 0.2336067783960316, 0.2336067783960316, 0.27173594987932437, 0.27173594987932437, 0.27173594987932437, 0.19473767269872078, 0.19473767269872078, 0.19473767269872078, 0.20501337371514416, 0.20501337371514416, 0.20501337371514416, 0.21452506517621694, 0.21452506517621694, 0.21452506517621694, 0.16838353882325696, 0.16838353882325696, 0.16838353882325696, 0.1856489512496834, 0.1856489512496834, 0.1856489512496834, 0.1947532708976576, 0.1947532708976576, 0.1947532708976576, 0.18175260802548643, 0.18175260802548643, 0.18175260802548643, 0.17578918787036524, 0.17578918787036524, 0.17578918787036524, 0.1798340340100103, 0.1798340340100103, 0.1798340340100103, 0.29687119999587386, 0.29687119999587386, 0.29687119999587386, 0.18034687444605257, 0.18034687444605257, 0.18034687444605257, 0.1858378495495545, 0.1858378495495545, 0.1858378495495545, 0.6030549787840663, 0.6030549787840663, 0.6030549787840663, 0.3743331617842738, 0.3743331617842738, 0.3743331617842738, 0.20293392812114575, 0.20293392812114575, 0.20293392812114575, 0.1782650809956161, 0.1782650809956161, 0.1782650809956161, 0.19276599508537073, 0.19276599508537073, 0.19276599508537073, 0.1879698192558883, 0.1879698192558883, 0.1879698192558883, 0.06697855271682984, 0.06697855271682984, 0.06697855271682984, 0.06802111336510186, 0.06802111336510186, 0.06802111336510186, 0.07065983986949576, 0.07065983986949576, 0.07065983986949576]}, "mutation_prompt": null}
{"id": "06bec69a-8f4d-4d88-9149-11edd2ff2bbf", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        evals = self.population_size\n\n        while evals < self.budget:\n            for i in range(self.population_size):\n                idxs = list(range(self.population_size))\n                idxs.remove(i)\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                \n                if evals >= self.budget:\n                    break\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Differential Evolution with Adaptive Mutation for Global and Local Search Balance", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6ca94746-c4a4-4516-b6f1-dabd456b8fa3", "metadata": {"aucs": [0.6085051492144853, 0.6085051492144853, 0.6085051492144853, 0.6477860782039992, 0.6477860782039992, 0.6477860782039992, 0.6482058957232064, 0.6482058957232064, 0.6482058957232064, 0.3967970210119639, 0.3967970210119639, 0.3967970210119639, 0.418997132399916, 0.418997132399916, 0.418997132399916, 0.3917527025473978, 0.3917527025473978, 0.3917527025473978, 0.08946476887152477, 0.08946476887152477, 0.08946476887152477, 0.08277369343696805, 0.08277369343696805, 0.08277369343696805, 0.09177631224331528, 0.09177631224331528, 0.09177631224331528, 0.087875928785205, 0.087875928785205, 0.087875928785205, 0.08281536553662405, 0.08281536553662405, 0.08281536553662405, 0.08752627286148962, 0.08752627286148962, 0.08752627286148962, 0.9518291332223363, 0.9518291332223363, 0.9518291332223363, 0.9230756530222763, 0.9230756530222763, 0.9230756530222763, 0.9216358770308949, 0.9216358770308949, 0.9216358770308949, 0.273803429069872, 0.273803429069872, 0.273803429069872, 0.27612679724777944, 0.27612679724777944, 0.27612679724777944, 0.31470550726402946, 0.31470550726402946, 0.31470550726402946, 0.44840824418965053, 0.44840824418965053, 0.44840824418965053, 0.5510617432433971, 0.5510617432433971, 0.5510617432433971, 0.6099985477960679, 0.6099985477960679, 0.6099985477960679, 0.21528901315585025, 0.21528901315585025, 0.21528901315585025, 0.2352063216011523, 0.2352063216011523, 0.2352063216011523, 0.21268113459000082, 0.21268113459000082, 0.21268113459000082, 0.24586394163657832, 0.24586394163657832, 0.24586394163657832, 0.19421800442004056, 0.19421800442004056, 0.19421800442004056, 0.17520615311911514, 0.17520615311911514, 0.17520615311911514, 0.12306680557736094, 0.12306680557736094, 0.12306680557736094, 0.14982362507823688, 0.14982362507823688, 0.14982362507823688, 0.11918403924381149, 0.11918403924381149, 0.11918403924381149, 0.2630022185136861, 0.2630022185136861, 0.2630022185136861, 0.22145494718506042, 0.22145494718506042, 0.22145494718506042, 0.26874623883545057, 0.26874623883545057, 0.26874623883545057, 0.017648032426149207, 0.017648032426149207, 0.017648032426149207, 0.033456304643037726, 0.033456304643037726, 0.033456304643037726, 0.03880897299464814, 0.03880897299464814, 0.03880897299464814, 0.1510452189739554, 0.1510452189739554, 0.1510452189739554, 0.16908364218105998, 0.16908364218105998, 0.16908364218105998, 0.15108806188041013, 0.15108806188041013, 0.15108806188041013, 0.4734569121052816, 0.4734569121052816, 0.4734569121052816, 0.4771669508406322, 0.4771669508406322, 0.4771669508406322, 0.48642307522762585, 0.48642307522762585, 0.48642307522762585, 0.08047406847429861, 0.08047406847429861, 0.08047406847429861, 0.09481160157979607, 0.09481160157979607, 0.09481160157979607, 0.0775949942190911, 0.0775949942190911, 0.0775949942190911, 0.1519278721633589, 0.1519278721633589, 0.1519278721633589, 0.18554126733024956, 0.18554126733024956, 0.18554126733024956, 0.24152357802480262, 0.24152357802480262, 0.24152357802480262, 0.27279425599326135, 0.27279425599326135, 0.27279425599326135, 0.2336067783960316, 0.2336067783960316, 0.2336067783960316, 0.27173594987932437, 0.27173594987932437, 0.27173594987932437, 0.19473767269872078, 0.19473767269872078, 0.19473767269872078, 0.20501337371514416, 0.20501337371514416, 0.20501337371514416, 0.21452506517621694, 0.21452506517621694, 0.21452506517621694, 0.16838353882325696, 0.16838353882325696, 0.16838353882325696, 0.1856489512496834, 0.1856489512496834, 0.1856489512496834, 0.1947532708976576, 0.1947532708976576, 0.1947532708976576, 0.18175260802548643, 0.18175260802548643, 0.18175260802548643, 0.17578918787036524, 0.17578918787036524, 0.17578918787036524, 0.1798340340100103, 0.1798340340100103, 0.1798340340100103, 0.29687119999587386, 0.29687119999587386, 0.29687119999587386, 0.18034687444605257, 0.18034687444605257, 0.18034687444605257, 0.1858378495495545, 0.1858378495495545, 0.1858378495495545, 0.6030549787840663, 0.6030549787840663, 0.6030549787840663, 0.3743331617842738, 0.3743331617842738, 0.3743331617842738, 0.20293392812114575, 0.20293392812114575, 0.20293392812114575, 0.1782650809956161, 0.1782650809956161, 0.1782650809956161, 0.19276599508537073, 0.19276599508537073, 0.19276599508537073, 0.1879698192558883, 0.1879698192558883, 0.1879698192558883, 0.06697855271682984, 0.06697855271682984, 0.06697855271682984, 0.06802111336510186, 0.06802111336510186, 0.06802111336510186, 0.07065983986949576, 0.07065983986949576, 0.07065983986949576]}, "mutation_prompt": null}
{"id": "c2ee499a-6b3a-41e4-921b-bd0ca982f917", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        evals = self.population_size\n\n        while evals < self.budget:\n            for i in range(self.population_size):\n                idxs = list(range(self.population_size))\n                idxs.remove(i)\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                \n                if evals >= self.budget:\n                    break\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Differential Evolution with Adaptive Mutation for Global and Local Search Balance", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6ca94746-c4a4-4516-b6f1-dabd456b8fa3", "metadata": {"aucs": [0.6085051492144853, 0.6085051492144853, 0.6085051492144853, 0.6477860782039992, 0.6477860782039992, 0.6477860782039992, 0.6482058957232064, 0.6482058957232064, 0.6482058957232064, 0.3967970210119639, 0.3967970210119639, 0.3967970210119639, 0.418997132399916, 0.418997132399916, 0.418997132399916, 0.3917527025473978, 0.3917527025473978, 0.3917527025473978, 0.08946476887152477, 0.08946476887152477, 0.08946476887152477, 0.08277369343696805, 0.08277369343696805, 0.08277369343696805, 0.09177631224331528, 0.09177631224331528, 0.09177631224331528, 0.087875928785205, 0.087875928785205, 0.087875928785205, 0.08281536553662405, 0.08281536553662405, 0.08281536553662405, 0.08752627286148962, 0.08752627286148962, 0.08752627286148962, 0.9518291332223363, 0.9518291332223363, 0.9518291332223363, 0.9230756530222763, 0.9230756530222763, 0.9230756530222763, 0.9216358770308949, 0.9216358770308949, 0.9216358770308949, 0.273803429069872, 0.273803429069872, 0.273803429069872, 0.27612679724777944, 0.27612679724777944, 0.27612679724777944, 0.31470550726402946, 0.31470550726402946, 0.31470550726402946, 0.44840824418965053, 0.44840824418965053, 0.44840824418965053, 0.5510617432433971, 0.5510617432433971, 0.5510617432433971, 0.6099985477960679, 0.6099985477960679, 0.6099985477960679, 0.21528901315585025, 0.21528901315585025, 0.21528901315585025, 0.2352063216011523, 0.2352063216011523, 0.2352063216011523, 0.21268113459000082, 0.21268113459000082, 0.21268113459000082, 0.24586394163657832, 0.24586394163657832, 0.24586394163657832, 0.19421800442004056, 0.19421800442004056, 0.19421800442004056, 0.17520615311911514, 0.17520615311911514, 0.17520615311911514, 0.12306680557736094, 0.12306680557736094, 0.12306680557736094, 0.14982362507823688, 0.14982362507823688, 0.14982362507823688, 0.11918403924381149, 0.11918403924381149, 0.11918403924381149, 0.2630022185136861, 0.2630022185136861, 0.2630022185136861, 0.22145494718506042, 0.22145494718506042, 0.22145494718506042, 0.26874623883545057, 0.26874623883545057, 0.26874623883545057, 0.017648032426149207, 0.017648032426149207, 0.017648032426149207, 0.033456304643037726, 0.033456304643037726, 0.033456304643037726, 0.03880897299464814, 0.03880897299464814, 0.03880897299464814, 0.1510452189739554, 0.1510452189739554, 0.1510452189739554, 0.16908364218105998, 0.16908364218105998, 0.16908364218105998, 0.15108806188041013, 0.15108806188041013, 0.15108806188041013, 0.4734569121052816, 0.4734569121052816, 0.4734569121052816, 0.4771669508406322, 0.4771669508406322, 0.4771669508406322, 0.48642307522762585, 0.48642307522762585, 0.48642307522762585, 0.08047406847429861, 0.08047406847429861, 0.08047406847429861, 0.09481160157979607, 0.09481160157979607, 0.09481160157979607, 0.0775949942190911, 0.0775949942190911, 0.0775949942190911, 0.1519278721633589, 0.1519278721633589, 0.1519278721633589, 0.18554126733024956, 0.18554126733024956, 0.18554126733024956, 0.24152357802480262, 0.24152357802480262, 0.24152357802480262, 0.27279425599326135, 0.27279425599326135, 0.27279425599326135, 0.2336067783960316, 0.2336067783960316, 0.2336067783960316, 0.27173594987932437, 0.27173594987932437, 0.27173594987932437, 0.19473767269872078, 0.19473767269872078, 0.19473767269872078, 0.20501337371514416, 0.20501337371514416, 0.20501337371514416, 0.21452506517621694, 0.21452506517621694, 0.21452506517621694, 0.16838353882325696, 0.16838353882325696, 0.16838353882325696, 0.1856489512496834, 0.1856489512496834, 0.1856489512496834, 0.1947532708976576, 0.1947532708976576, 0.1947532708976576, 0.18175260802548643, 0.18175260802548643, 0.18175260802548643, 0.17578918787036524, 0.17578918787036524, 0.17578918787036524, 0.1798340340100103, 0.1798340340100103, 0.1798340340100103, 0.29687119999587386, 0.29687119999587386, 0.29687119999587386, 0.18034687444605257, 0.18034687444605257, 0.18034687444605257, 0.1858378495495545, 0.1858378495495545, 0.1858378495495545, 0.6030549787840663, 0.6030549787840663, 0.6030549787840663, 0.3743331617842738, 0.3743331617842738, 0.3743331617842738, 0.20293392812114575, 0.20293392812114575, 0.20293392812114575, 0.1782650809956161, 0.1782650809956161, 0.1782650809956161, 0.19276599508537073, 0.19276599508537073, 0.19276599508537073, 0.1879698192558883, 0.1879698192558883, 0.1879698192558883, 0.06697855271682984, 0.06697855271682984, 0.06697855271682984, 0.06802111336510186, 0.06802111336510186, 0.06802111336510186, 0.07065983986949576, 0.07065983986949576, 0.07065983986949576]}, "mutation_prompt": null}
{"id": "db1c3aa3-cdd9-47d6-a5a0-76e04de8488e", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        evals = self.population_size\n\n        while evals < self.budget:\n            for i in range(self.population_size):\n                idxs = list(range(self.population_size))\n                idxs.remove(i)\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                \n                if evals >= self.budget:\n                    break\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Differential Evolution with Adaptive Mutation for Global and Local Search Balance", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6ca94746-c4a4-4516-b6f1-dabd456b8fa3", "metadata": {"aucs": [0.6085051492144853, 0.6085051492144853, 0.6085051492144853, 0.6477860782039992, 0.6477860782039992, 0.6477860782039992, 0.6482058957232064, 0.6482058957232064, 0.6482058957232064, 0.3967970210119639, 0.3967970210119639, 0.3967970210119639, 0.418997132399916, 0.418997132399916, 0.418997132399916, 0.3917527025473978, 0.3917527025473978, 0.3917527025473978, 0.08946476887152477, 0.08946476887152477, 0.08946476887152477, 0.08277369343696805, 0.08277369343696805, 0.08277369343696805, 0.09177631224331528, 0.09177631224331528, 0.09177631224331528, 0.087875928785205, 0.087875928785205, 0.087875928785205, 0.08281536553662405, 0.08281536553662405, 0.08281536553662405, 0.08752627286148962, 0.08752627286148962, 0.08752627286148962, 0.9518291332223363, 0.9518291332223363, 0.9518291332223363, 0.9230756530222763, 0.9230756530222763, 0.9230756530222763, 0.9216358770308949, 0.9216358770308949, 0.9216358770308949, 0.273803429069872, 0.273803429069872, 0.273803429069872, 0.27612679724777944, 0.27612679724777944, 0.27612679724777944, 0.31470550726402946, 0.31470550726402946, 0.31470550726402946, 0.44840824418965053, 0.44840824418965053, 0.44840824418965053, 0.5510617432433971, 0.5510617432433971, 0.5510617432433971, 0.6099985477960679, 0.6099985477960679, 0.6099985477960679, 0.21528901315585025, 0.21528901315585025, 0.21528901315585025, 0.2352063216011523, 0.2352063216011523, 0.2352063216011523, 0.21268113459000082, 0.21268113459000082, 0.21268113459000082, 0.24586394163657832, 0.24586394163657832, 0.24586394163657832, 0.19421800442004056, 0.19421800442004056, 0.19421800442004056, 0.17520615311911514, 0.17520615311911514, 0.17520615311911514, 0.12306680557736094, 0.12306680557736094, 0.12306680557736094, 0.14982362507823688, 0.14982362507823688, 0.14982362507823688, 0.11918403924381149, 0.11918403924381149, 0.11918403924381149, 0.2630022185136861, 0.2630022185136861, 0.2630022185136861, 0.22145494718506042, 0.22145494718506042, 0.22145494718506042, 0.26874623883545057, 0.26874623883545057, 0.26874623883545057, 0.017648032426149207, 0.017648032426149207, 0.017648032426149207, 0.033456304643037726, 0.033456304643037726, 0.033456304643037726, 0.03880897299464814, 0.03880897299464814, 0.03880897299464814, 0.1510452189739554, 0.1510452189739554, 0.1510452189739554, 0.16908364218105998, 0.16908364218105998, 0.16908364218105998, 0.15108806188041013, 0.15108806188041013, 0.15108806188041013, 0.4734569121052816, 0.4734569121052816, 0.4734569121052816, 0.4771669508406322, 0.4771669508406322, 0.4771669508406322, 0.48642307522762585, 0.48642307522762585, 0.48642307522762585, 0.08047406847429861, 0.08047406847429861, 0.08047406847429861, 0.09481160157979607, 0.09481160157979607, 0.09481160157979607, 0.0775949942190911, 0.0775949942190911, 0.0775949942190911, 0.1519278721633589, 0.1519278721633589, 0.1519278721633589, 0.18554126733024956, 0.18554126733024956, 0.18554126733024956, 0.24152357802480262, 0.24152357802480262, 0.24152357802480262, 0.27279425599326135, 0.27279425599326135, 0.27279425599326135, 0.2336067783960316, 0.2336067783960316, 0.2336067783960316, 0.27173594987932437, 0.27173594987932437, 0.27173594987932437, 0.19473767269872078, 0.19473767269872078, 0.19473767269872078, 0.20501337371514416, 0.20501337371514416, 0.20501337371514416, 0.21452506517621694, 0.21452506517621694, 0.21452506517621694, 0.16838353882325696, 0.16838353882325696, 0.16838353882325696, 0.1856489512496834, 0.1856489512496834, 0.1856489512496834, 0.1947532708976576, 0.1947532708976576, 0.1947532708976576, 0.18175260802548643, 0.18175260802548643, 0.18175260802548643, 0.17578918787036524, 0.17578918787036524, 0.17578918787036524, 0.1798340340100103, 0.1798340340100103, 0.1798340340100103, 0.29687119999587386, 0.29687119999587386, 0.29687119999587386, 0.18034687444605257, 0.18034687444605257, 0.18034687444605257, 0.1858378495495545, 0.1858378495495545, 0.1858378495495545, 0.6030549787840663, 0.6030549787840663, 0.6030549787840663, 0.3743331617842738, 0.3743331617842738, 0.3743331617842738, 0.20293392812114575, 0.20293392812114575, 0.20293392812114575, 0.1782650809956161, 0.1782650809956161, 0.1782650809956161, 0.19276599508537073, 0.19276599508537073, 0.19276599508537073, 0.1879698192558883, 0.1879698192558883, 0.1879698192558883, 0.06697855271682984, 0.06697855271682984, 0.06697855271682984, 0.06802111336510186, 0.06802111336510186, 0.06802111336510186, 0.07065983986949576, 0.07065983986949576, 0.07065983986949576]}, "mutation_prompt": null}
{"id": "b7d4030b-d6e5-48e5-ad28-4381c99671ac", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        evals = self.population_size\n\n        while evals < self.budget:\n            for i in range(self.population_size):\n                idxs = list(range(self.population_size))\n                idxs.remove(i)\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                \n                if evals >= self.budget:\n                    break\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Differential Evolution with Adaptive Mutation for Global and Local Search Balance", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6ca94746-c4a4-4516-b6f1-dabd456b8fa3", "metadata": {"aucs": [0.6085051492144853, 0.6085051492144853, 0.6085051492144853, 0.6477860782039992, 0.6477860782039992, 0.6477860782039992, 0.6482058957232064, 0.6482058957232064, 0.6482058957232064, 0.3967970210119639, 0.3967970210119639, 0.3967970210119639, 0.418997132399916, 0.418997132399916, 0.418997132399916, 0.3917527025473978, 0.3917527025473978, 0.3917527025473978, 0.08946476887152477, 0.08946476887152477, 0.08946476887152477, 0.08277369343696805, 0.08277369343696805, 0.08277369343696805, 0.09177631224331528, 0.09177631224331528, 0.09177631224331528, 0.087875928785205, 0.087875928785205, 0.087875928785205, 0.08281536553662405, 0.08281536553662405, 0.08281536553662405, 0.08752627286148962, 0.08752627286148962, 0.08752627286148962, 0.9518291332223363, 0.9518291332223363, 0.9518291332223363, 0.9230756530222763, 0.9230756530222763, 0.9230756530222763, 0.9216358770308949, 0.9216358770308949, 0.9216358770308949, 0.273803429069872, 0.273803429069872, 0.273803429069872, 0.27612679724777944, 0.27612679724777944, 0.27612679724777944, 0.31470550726402946, 0.31470550726402946, 0.31470550726402946, 0.44840824418965053, 0.44840824418965053, 0.44840824418965053, 0.5510617432433971, 0.5510617432433971, 0.5510617432433971, 0.6099985477960679, 0.6099985477960679, 0.6099985477960679, 0.21528901315585025, 0.21528901315585025, 0.21528901315585025, 0.2352063216011523, 0.2352063216011523, 0.2352063216011523, 0.21268113459000082, 0.21268113459000082, 0.21268113459000082, 0.24586394163657832, 0.24586394163657832, 0.24586394163657832, 0.19421800442004056, 0.19421800442004056, 0.19421800442004056, 0.17520615311911514, 0.17520615311911514, 0.17520615311911514, 0.12306680557736094, 0.12306680557736094, 0.12306680557736094, 0.14982362507823688, 0.14982362507823688, 0.14982362507823688, 0.11918403924381149, 0.11918403924381149, 0.11918403924381149, 0.2630022185136861, 0.2630022185136861, 0.2630022185136861, 0.22145494718506042, 0.22145494718506042, 0.22145494718506042, 0.26874623883545057, 0.26874623883545057, 0.26874623883545057, 0.017648032426149207, 0.017648032426149207, 0.017648032426149207, 0.033456304643037726, 0.033456304643037726, 0.033456304643037726, 0.03880897299464814, 0.03880897299464814, 0.03880897299464814, 0.1510452189739554, 0.1510452189739554, 0.1510452189739554, 0.16908364218105998, 0.16908364218105998, 0.16908364218105998, 0.15108806188041013, 0.15108806188041013, 0.15108806188041013, 0.4734569121052816, 0.4734569121052816, 0.4734569121052816, 0.4771669508406322, 0.4771669508406322, 0.4771669508406322, 0.48642307522762585, 0.48642307522762585, 0.48642307522762585, 0.08047406847429861, 0.08047406847429861, 0.08047406847429861, 0.09481160157979607, 0.09481160157979607, 0.09481160157979607, 0.0775949942190911, 0.0775949942190911, 0.0775949942190911, 0.1519278721633589, 0.1519278721633589, 0.1519278721633589, 0.18554126733024956, 0.18554126733024956, 0.18554126733024956, 0.24152357802480262, 0.24152357802480262, 0.24152357802480262, 0.27279425599326135, 0.27279425599326135, 0.27279425599326135, 0.2336067783960316, 0.2336067783960316, 0.2336067783960316, 0.27173594987932437, 0.27173594987932437, 0.27173594987932437, 0.19473767269872078, 0.19473767269872078, 0.19473767269872078, 0.20501337371514416, 0.20501337371514416, 0.20501337371514416, 0.21452506517621694, 0.21452506517621694, 0.21452506517621694, 0.16838353882325696, 0.16838353882325696, 0.16838353882325696, 0.1856489512496834, 0.1856489512496834, 0.1856489512496834, 0.1947532708976576, 0.1947532708976576, 0.1947532708976576, 0.18175260802548643, 0.18175260802548643, 0.18175260802548643, 0.17578918787036524, 0.17578918787036524, 0.17578918787036524, 0.1798340340100103, 0.1798340340100103, 0.1798340340100103, 0.29687119999587386, 0.29687119999587386, 0.29687119999587386, 0.18034687444605257, 0.18034687444605257, 0.18034687444605257, 0.1858378495495545, 0.1858378495495545, 0.1858378495495545, 0.6030549787840663, 0.6030549787840663, 0.6030549787840663, 0.3743331617842738, 0.3743331617842738, 0.3743331617842738, 0.20293392812114575, 0.20293392812114575, 0.20293392812114575, 0.1782650809956161, 0.1782650809956161, 0.1782650809956161, 0.19276599508537073, 0.19276599508537073, 0.19276599508537073, 0.1879698192558883, 0.1879698192558883, 0.1879698192558883, 0.06697855271682984, 0.06697855271682984, 0.06697855271682984, 0.06802111336510186, 0.06802111336510186, 0.06802111336510186, 0.07065983986949576, 0.07065983986949576, 0.07065983986949576]}, "mutation_prompt": null}
{"id": "c03ee7cf-09cb-47ac-880a-543d27f2070f", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        evals = self.population_size\n\n        while evals < self.budget:\n            for i in range(self.population_size):\n                idxs = list(range(self.population_size))\n                idxs.remove(i)\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                \n                if evals >= self.budget:\n                    break\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Differential Evolution with Adaptive Mutation for Global and Local Search Balance", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6ca94746-c4a4-4516-b6f1-dabd456b8fa3", "metadata": {"aucs": [0.6085051492144853, 0.6085051492144853, 0.6085051492144853, 0.6477860782039992, 0.6477860782039992, 0.6477860782039992, 0.6482058957232064, 0.6482058957232064, 0.6482058957232064, 0.3967970210119639, 0.3967970210119639, 0.3967970210119639, 0.418997132399916, 0.418997132399916, 0.418997132399916, 0.3917527025473978, 0.3917527025473978, 0.3917527025473978, 0.08946476887152477, 0.08946476887152477, 0.08946476887152477, 0.08277369343696805, 0.08277369343696805, 0.08277369343696805, 0.09177631224331528, 0.09177631224331528, 0.09177631224331528, 0.087875928785205, 0.087875928785205, 0.087875928785205, 0.08281536553662405, 0.08281536553662405, 0.08281536553662405, 0.08752627286148962, 0.08752627286148962, 0.08752627286148962, 0.9518291332223363, 0.9518291332223363, 0.9518291332223363, 0.9230756530222763, 0.9230756530222763, 0.9230756530222763, 0.9216358770308949, 0.9216358770308949, 0.9216358770308949, 0.273803429069872, 0.273803429069872, 0.273803429069872, 0.27612679724777944, 0.27612679724777944, 0.27612679724777944, 0.31470550726402946, 0.31470550726402946, 0.31470550726402946, 0.44840824418965053, 0.44840824418965053, 0.44840824418965053, 0.5510617432433971, 0.5510617432433971, 0.5510617432433971, 0.6099985477960679, 0.6099985477960679, 0.6099985477960679, 0.21528901315585025, 0.21528901315585025, 0.21528901315585025, 0.2352063216011523, 0.2352063216011523, 0.2352063216011523, 0.21268113459000082, 0.21268113459000082, 0.21268113459000082, 0.24586394163657832, 0.24586394163657832, 0.24586394163657832, 0.19421800442004056, 0.19421800442004056, 0.19421800442004056, 0.17520615311911514, 0.17520615311911514, 0.17520615311911514, 0.12306680557736094, 0.12306680557736094, 0.12306680557736094, 0.14982362507823688, 0.14982362507823688, 0.14982362507823688, 0.11918403924381149, 0.11918403924381149, 0.11918403924381149, 0.2630022185136861, 0.2630022185136861, 0.2630022185136861, 0.22145494718506042, 0.22145494718506042, 0.22145494718506042, 0.26874623883545057, 0.26874623883545057, 0.26874623883545057, 0.017648032426149207, 0.017648032426149207, 0.017648032426149207, 0.033456304643037726, 0.033456304643037726, 0.033456304643037726, 0.03880897299464814, 0.03880897299464814, 0.03880897299464814, 0.1510452189739554, 0.1510452189739554, 0.1510452189739554, 0.16908364218105998, 0.16908364218105998, 0.16908364218105998, 0.15108806188041013, 0.15108806188041013, 0.15108806188041013, 0.4734569121052816, 0.4734569121052816, 0.4734569121052816, 0.4771669508406322, 0.4771669508406322, 0.4771669508406322, 0.48642307522762585, 0.48642307522762585, 0.48642307522762585, 0.08047406847429861, 0.08047406847429861, 0.08047406847429861, 0.09481160157979607, 0.09481160157979607, 0.09481160157979607, 0.0775949942190911, 0.0775949942190911, 0.0775949942190911, 0.1519278721633589, 0.1519278721633589, 0.1519278721633589, 0.18554126733024956, 0.18554126733024956, 0.18554126733024956, 0.24152357802480262, 0.24152357802480262, 0.24152357802480262, 0.27279425599326135, 0.27279425599326135, 0.27279425599326135, 0.2336067783960316, 0.2336067783960316, 0.2336067783960316, 0.27173594987932437, 0.27173594987932437, 0.27173594987932437, 0.19473767269872078, 0.19473767269872078, 0.19473767269872078, 0.20501337371514416, 0.20501337371514416, 0.20501337371514416, 0.21452506517621694, 0.21452506517621694, 0.21452506517621694, 0.16838353882325696, 0.16838353882325696, 0.16838353882325696, 0.1856489512496834, 0.1856489512496834, 0.1856489512496834, 0.1947532708976576, 0.1947532708976576, 0.1947532708976576, 0.18175260802548643, 0.18175260802548643, 0.18175260802548643, 0.17578918787036524, 0.17578918787036524, 0.17578918787036524, 0.1798340340100103, 0.1798340340100103, 0.1798340340100103, 0.29687119999587386, 0.29687119999587386, 0.29687119999587386, 0.18034687444605257, 0.18034687444605257, 0.18034687444605257, 0.1858378495495545, 0.1858378495495545, 0.1858378495495545, 0.6030549787840663, 0.6030549787840663, 0.6030549787840663, 0.3743331617842738, 0.3743331617842738, 0.3743331617842738, 0.20293392812114575, 0.20293392812114575, 0.20293392812114575, 0.1782650809956161, 0.1782650809956161, 0.1782650809956161, 0.19276599508537073, 0.19276599508537073, 0.19276599508537073, 0.1879698192558883, 0.1879698192558883, 0.1879698192558883, 0.06697855271682984, 0.06697855271682984, 0.06697855271682984, 0.06802111336510186, 0.06802111336510186, 0.06802111336510186, 0.07065983986949576, 0.07065983986949576, 0.07065983986949576]}, "mutation_prompt": null}
{"id": "09a41cb0-442d-4b67-a7ff-c3e8e7caddf6", "solution": "import numpy as np\n\nclass ImprovedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        # Dynamic mutation factor and crossover rate\n        self.mutation_factor = 0.5\n        self.crossover_rate = 0.7\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        evals = self.population_size\n\n        # Diversity preservation parameters\n        min_diversity_threshold = 1e-5\n        max_generation_stagnation = 5\n        stagnation_counter = 0\n        last_best_fitness = np.inf\n\n        while evals < self.budget:\n            for i in range(self.population_size):\n                # Adjust mutation factor and crossover rate dynamically\n                self.mutation_factor = 0.5 + 0.3 * (1 - evals / self.budget)\n                self.crossover_rate = 0.7 + 0.2 * (1 - evals / self.budget)\n                \n                idxs = list(range(self.population_size))\n                idxs.remove(i)\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n\n                if evals >= self.budget:\n                    break\n            \n            # Check diversity to prevent stagnation\n            current_best_fitness = np.min(fitness)\n            if current_best_fitness >= last_best_fitness - min_diversity_threshold:\n                stagnation_counter += 1\n            else:\n                stagnation_counter = 0\n\n            if stagnation_counter >= max_generation_stagnation:\n                # Reinitialize a portion of the population to explore new areas\n                replace_count = self.population_size // 5\n                reinit_indices = np.random.choice(self.population_size, replace_count, replace=False)\n                for idx in reinit_indices:\n                    population[idx] = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                    fitness[idx] = func(population[idx])\n                    evals += 1\n            \n            last_best_fitness = current_best_fitness\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "ImprovedAdaptiveDifferentialEvolution", "description": "Adaptive Differential Evolution with Dynamic Parameter Adjustment and Diversity Preservation Strategy to Enhance Convergence.", "configspace": "", "generation": 20, "fitness": 0.16965988544059038, "feedback": "The algorithm ImprovedAdaptiveDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.19.", "error": "", "parent_id": "6ca94746-c4a4-4516-b6f1-dabd456b8fa3", "metadata": {"aucs": [0.31199976572400645, 0.31199976572400645, 0.31199976572400645, 0.47909386743095117, 0.47909386743095117, 0.47909386743095117, 0.42508120249127035, 0.42508120249127035, 0.42508120249127035, 0.2062540852663305, 0.2062540852663305, 0.2062540852663305, 0.07088851122453632, 0.07088851122453632, 0.07088851122453632, 0.13706032606435403, 0.13706032606435403, 0.13706032606435403, 0.07479483090140526, 0.07479483090140526, 0.07479483090140526, 0.07750721359234847, 0.07750721359234847, 0.07750721359234847, 0.0729902565470939, 0.0729902565470939, 0.0729902565470939, 0.06345541684968248, 0.06345541684968248, 0.06345541684968248, 0.08370684247674576, 0.08370684247674576, 0.08370684247674576, 0.05988386771843346, 0.05988386771843346, 0.05988386771843346, 0.9355152670883398, 0.9355152670883398, 0.9355152670883398, 0.9395217383248161, 0.9395217383248161, 0.9395217383248161, 0.9573596386458505, 0.9573596386458505, 0.9573596386458505, 0.12071432026077367, 0.12071432026077367, 0.12071432026077367, 0.14000917527986456, 0.14000917527986456, 0.14000917527986456, 0.10889822609129951, 0.10889822609129951, 0.10889822609129951, 0.17626619756978312, 0.17626619756978312, 0.17626619756978312, 0.23624854762531822, 0.23624854762531822, 0.23624854762531822, 0.2072408729016012, 0.2072408729016012, 0.2072408729016012, 0.12186729585910616, 0.12186729585910616, 0.12186729585910616, 0.09114525853133215, 0.09114525853133215, 0.09114525853133215, 0.09278197335153249, 0.09278197335153249, 0.09278197335153249, 0.0912271205734565, 0.0912271205734565, 0.0912271205734565, 0.05542740692858916, 0.05542740692858916, 0.05542740692858916, 0.05403383536374862, 0.05403383536374862, 0.05403383536374862, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1086454963031982, 0.1086454963031982, 0.1086454963031982, 0.06645512386959107, 0.06645512386959107, 0.06645512386959107, 0.05617335964475079, 0.05617335964475079, 0.05617335964475079, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04561209490690321, 0.04561209490690321, 0.04561209490690321, 0.07423618832159373, 0.07423618832159373, 0.07423618832159373, 0.03870346459316276, 0.03870346459316276, 0.03870346459316276, 0.3486813344497791, 0.3486813344497791, 0.3486813344497791, 0.3382015482113615, 0.3382015482113615, 0.3382015482113615, 0.2918891572479644, 0.2918891572479644, 0.2918891572479644, 0.08697645666491116, 0.08697645666491116, 0.08697645666491116, 0.08407766900960123, 0.08407766900960123, 0.08407766900960123, 0.06827720568481821, 0.06827720568481821, 0.06827720568481821, 0.15323665690939325, 0.15323665690939325, 0.15323665690939325, 0.14036285607760324, 0.14036285607760324, 0.14036285607760324, 0.12961705246083222, 0.12961705246083222, 0.12961705246083222, 0.20792820164820658, 0.20792820164820658, 0.20792820164820658, 0.18702774262903787, 0.18702774262903787, 0.18702774262903787, 0.1996904256361529, 0.1996904256361529, 0.1996904256361529, 0.14070179524168203, 0.14070179524168203, 0.14070179524168203, 0.13302731749762187, 0.13302731749762187, 0.13302731749762187, 0.14184485818986037, 0.14184485818986037, 0.14184485818986037, 0.16427119755840558, 0.16427119755840558, 0.16427119755840558, 0.1682955450261734, 0.1682955450261734, 0.1682955450261734, 0.1881141650742314, 0.1881141650742314, 0.1881141650742314, 0.16157875139638433, 0.16157875139638433, 0.16157875139638433, 0.16013293523530792, 0.16013293523530792, 0.16013293523530792, 0.16529308942118037, 0.16529308942118037, 0.16529308942118037, 0.17154408954447498, 0.17154408954447498, 0.17154408954447498, 0.16442664834311405, 0.16442664834311405, 0.16442664834311405, 0.15935317085717982, 0.15935317085717982, 0.15935317085717982, 0.19502499966653986, 0.19502499966653986, 0.19502499966653986, 0.14380578057985294, 0.14380578057985294, 0.14380578057985294, 0.20332000206921208, 0.20332000206921208, 0.20332000206921208, 0.17881894385039143, 0.17881894385039143, 0.17881894385039143, 0.18227627222395637, 0.18227627222395637, 0.18227627222395637, 0.18080630621272542, 0.18080630621272542, 0.18080630621272542, 0.07076467113596596, 0.07076467113596596, 0.07076467113596596, 0.06268290485788164, 0.06268290485788164, 0.06268290485788164, 0.06206321278893667, 0.06206321278893667, 0.06206321278893667]}, "mutation_prompt": null}
{"id": "4a89f403-db68-42d2-a1ba-aa4084f7ef3e", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = max(4, 5 * dim)  # Reduced initial size for faster convergence\n        self.mutation_factor = 0.8\n        self.initial_crossover_rate = 0.9\n        self.dynamic_population = True\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        evals = self.initial_population_size\n        crossover_rate = self.initial_crossover_rate\n\n        while evals < self.budget:\n            new_population = []\n            for i in range(len(population)):\n                idxs = list(range(len(population)))\n                idxs.remove(i)\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.where(np.random.rand(self.dim) < crossover_rate, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    new_population.append(trial)\n                else:\n                    new_population.append(population[i])\n\n                if evals >= self.budget:\n                    break\n\n            # Dynamic crossover rate adjustment\n            crossover_rate = self.initial_crossover_rate * (1 - evals / self.budget)\n            if self.dynamic_population and len(new_population) > 2:\n                # Reduce population size as evaluations increase to focus search\n                population = np.array(new_population[::2])\n            else:\n                population = np.array(new_population)\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "EnhancedDifferentialEvolution", "description": "Enhanced Differential Evolution with Dynamic Population and Adaptive Crossover for Improved Convergence.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "An exception occurred: ValueError(\"Cannot take a larger sample than population when 'replace=False'\").", "error": "ValueError(\"Cannot take a larger sample than population when 'replace=False'\")", "parent_id": "6ca94746-c4a4-4516-b6f1-dabd456b8fa3", "metadata": {}, "mutation_prompt": null}
{"id": "5ca0aed4-ef64-44ac-b5d2-0c5790aefc3c", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        evals = self.population_size\n\n        while evals < self.budget:\n            for i in range(self.population_size):\n                idxs = list(range(self.population_size))\n                idxs.remove(i)\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                \n                if evals >= self.budget:\n                    break\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "AdaptiveDifferentialEvolution", "description": "Differential Evolution with Adaptive Mutation for Global and Local Search Balance", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6ca94746-c4a4-4516-b6f1-dabd456b8fa3", "metadata": {"aucs": [0.6085051492144853, 0.6085051492144853, 0.6085051492144853, 0.6477860782039992, 0.6477860782039992, 0.6477860782039992, 0.6482058957232064, 0.6482058957232064, 0.6482058957232064, 0.3967970210119639, 0.3967970210119639, 0.3967970210119639, 0.418997132399916, 0.418997132399916, 0.418997132399916, 0.3917527025473978, 0.3917527025473978, 0.3917527025473978, 0.08946476887152477, 0.08946476887152477, 0.08946476887152477, 0.08277369343696805, 0.08277369343696805, 0.08277369343696805, 0.09177631224331528, 0.09177631224331528, 0.09177631224331528, 0.087875928785205, 0.087875928785205, 0.087875928785205, 0.08281536553662405, 0.08281536553662405, 0.08281536553662405, 0.08752627286148962, 0.08752627286148962, 0.08752627286148962, 0.9518291332223363, 0.9518291332223363, 0.9518291332223363, 0.9230756530222763, 0.9230756530222763, 0.9230756530222763, 0.9216358770308949, 0.9216358770308949, 0.9216358770308949, 0.273803429069872, 0.273803429069872, 0.273803429069872, 0.27612679724777944, 0.27612679724777944, 0.27612679724777944, 0.31470550726402946, 0.31470550726402946, 0.31470550726402946, 0.44840824418965053, 0.44840824418965053, 0.44840824418965053, 0.5510617432433971, 0.5510617432433971, 0.5510617432433971, 0.6099985477960679, 0.6099985477960679, 0.6099985477960679, 0.21528901315585025, 0.21528901315585025, 0.21528901315585025, 0.2352063216011523, 0.2352063216011523, 0.2352063216011523, 0.21268113459000082, 0.21268113459000082, 0.21268113459000082, 0.24586394163657832, 0.24586394163657832, 0.24586394163657832, 0.19421800442004056, 0.19421800442004056, 0.19421800442004056, 0.17520615311911514, 0.17520615311911514, 0.17520615311911514, 0.12306680557736094, 0.12306680557736094, 0.12306680557736094, 0.14982362507823688, 0.14982362507823688, 0.14982362507823688, 0.11918403924381149, 0.11918403924381149, 0.11918403924381149, 0.2630022185136861, 0.2630022185136861, 0.2630022185136861, 0.22145494718506042, 0.22145494718506042, 0.22145494718506042, 0.26874623883545057, 0.26874623883545057, 0.26874623883545057, 0.017648032426149207, 0.017648032426149207, 0.017648032426149207, 0.033456304643037726, 0.033456304643037726, 0.033456304643037726, 0.03880897299464814, 0.03880897299464814, 0.03880897299464814, 0.1510452189739554, 0.1510452189739554, 0.1510452189739554, 0.16908364218105998, 0.16908364218105998, 0.16908364218105998, 0.15108806188041013, 0.15108806188041013, 0.15108806188041013, 0.4734569121052816, 0.4734569121052816, 0.4734569121052816, 0.4771669508406322, 0.4771669508406322, 0.4771669508406322, 0.48642307522762585, 0.48642307522762585, 0.48642307522762585, 0.08047406847429861, 0.08047406847429861, 0.08047406847429861, 0.09481160157979607, 0.09481160157979607, 0.09481160157979607, 0.0775949942190911, 0.0775949942190911, 0.0775949942190911, 0.1519278721633589, 0.1519278721633589, 0.1519278721633589, 0.18554126733024956, 0.18554126733024956, 0.18554126733024956, 0.24152357802480262, 0.24152357802480262, 0.24152357802480262, 0.27279425599326135, 0.27279425599326135, 0.27279425599326135, 0.2336067783960316, 0.2336067783960316, 0.2336067783960316, 0.27173594987932437, 0.27173594987932437, 0.27173594987932437, 0.19473767269872078, 0.19473767269872078, 0.19473767269872078, 0.20501337371514416, 0.20501337371514416, 0.20501337371514416, 0.21452506517621694, 0.21452506517621694, 0.21452506517621694, 0.16838353882325696, 0.16838353882325696, 0.16838353882325696, 0.1856489512496834, 0.1856489512496834, 0.1856489512496834, 0.1947532708976576, 0.1947532708976576, 0.1947532708976576, 0.18175260802548643, 0.18175260802548643, 0.18175260802548643, 0.17578918787036524, 0.17578918787036524, 0.17578918787036524, 0.1798340340100103, 0.1798340340100103, 0.1798340340100103, 0.29687119999587386, 0.29687119999587386, 0.29687119999587386, 0.18034687444605257, 0.18034687444605257, 0.18034687444605257, 0.1858378495495545, 0.1858378495495545, 0.1858378495495545, 0.6030549787840663, 0.6030549787840663, 0.6030549787840663, 0.3743331617842738, 0.3743331617842738, 0.3743331617842738, 0.20293392812114575, 0.20293392812114575, 0.20293392812114575, 0.1782650809956161, 0.1782650809956161, 0.1782650809956161, 0.19276599508537073, 0.19276599508537073, 0.19276599508537073, 0.1879698192558883, 0.1879698192558883, 0.1879698192558883, 0.06697855271682984, 0.06697855271682984, 0.06697855271682984, 0.06802111336510186, 0.06802111336510186, 0.06802111336510186, 0.07065983986949576, 0.07065983986949576, 0.07065983986949576]}, "mutation_prompt": null}
{"id": "d1112af1-4034-4ce4-9891-8dcc1c9ed792", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12 * dim  # Slightly increased population size\n        self.initial_mutation_factor = 0.9  # Adjusted mutation factor\n        self.crossover_rate = 0.8  # Slightly reduced crossover rate\n        self.mutation_decay = 0.99  # Introduced decay for mutation factor\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        evals = self.population_size\n        mutation_factor = self.initial_mutation_factor\n\n        while evals < self.budget:\n            for i in range(self.population_size):\n                idxs = list(range(self.population_size))\n                idxs.remove(i)\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(a + mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n\n                if evals >= self.budget:\n                    break\n\n            mutation_factor *= self.mutation_decay  # Apply decay to mutation factor\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with Dynamic Parameter Adjustment for Improved Convergence Speed.", "configspace": "", "generation": 23, "fitness": 0.2832672512506519, "feedback": "The algorithm EnhancedAdaptiveDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.22.", "error": "", "parent_id": "6ca94746-c4a4-4516-b6f1-dabd456b8fa3", "metadata": {"aucs": [0.6969985460682535, 0.6969985460682535, 0.6969985460682535, 0.7086080684215486, 0.7086080684215486, 0.7086080684215486, 0.7168904152412697, 0.7168904152412697, 0.7168904152412697, 0.5490493868289036, 0.5490493868289036, 0.5490493868289036, 0.5551320490042886, 0.5551320490042886, 0.5551320490042886, 0.5422491229852082, 0.5422491229852082, 0.5422491229852082, 0.12064145139043381, 0.12064145139043381, 0.12064145139043381, 0.11128871233687165, 0.11128871233687165, 0.11128871233687165, 0.10340696647763414, 0.10340696647763414, 0.10340696647763414, 0.09628604454820522, 0.09628604454820522, 0.09628604454820522, 0.10104806195676341, 0.10104806195676341, 0.10104806195676341, 0.12165400157921036, 0.12165400157921036, 0.12165400157921036, 0.9490181760338906, 0.9490181760338906, 0.9490181760338906, 0.9782733486354914, 0.9782733486354914, 0.9782733486354914, 0.9474975824398824, 0.9474975824398824, 0.9474975824398824, 0.351346889274466, 0.351346889274466, 0.351346889274466, 0.31115368418544964, 0.31115368418544964, 0.31115368418544964, 0.2973857698695934, 0.2973857698695934, 0.2973857698695934, 0.5528651436099479, 0.5528651436099479, 0.5528651436099479, 0.5669136426308841, 0.5669136426308841, 0.5669136426308841, 0.5914210796464217, 0.5914210796464217, 0.5914210796464217, 0.1794537926561165, 0.1794537926561165, 0.1794537926561165, 0.16166906383817337, 0.16166906383817337, 0.16166906383817337, 0.13795387394883385, 0.13795387394883385, 0.13795387394883385, 0.07727101457557861, 0.07727101457557861, 0.07727101457557861, 0.13046071290658778, 0.13046071290658778, 0.13046071290658778, 0.20117502392133024, 0.20117502392133024, 0.20117502392133024, 0.09690477937788733, 0.09690477937788733, 0.09690477937788733, 0.12554679314617445, 0.12554679314617445, 0.12554679314617445, 0.12132873294364599, 0.12132873294364599, 0.12132873294364599, 0.2253527669286477, 0.2253527669286477, 0.2253527669286477, 0.24048312190382015, 0.24048312190382015, 0.24048312190382015, 0.2614366579342966, 0.2614366579342966, 0.2614366579342966, 0.05481908613288522, 0.05481908613288522, 0.05481908613288522, 0.05263189466430851, 0.05263189466430851, 0.05263189466430851, 0.058119848405522534, 0.058119848405522534, 0.058119848405522534, 0.1688675387577956, 0.1688675387577956, 0.1688675387577956, 0.19772640569640487, 0.19772640569640487, 0.19772640569640487, 0.18164909442330446, 0.18164909442330446, 0.18164909442330446, 0.5062472735084944, 0.5062472735084944, 0.5062472735084944, 0.5498625427404396, 0.5498625427404396, 0.5498625427404396, 0.5279376861730626, 0.5279376861730626, 0.5279376861730626, 0.10528025497482052, 0.10528025497482052, 0.10528025497482052, 0.09473795732513479, 0.09473795732513479, 0.09473795732513479, 0.09839242414299965, 0.09839242414299965, 0.09839242414299965, 0.14854116188317634, 0.14854116188317634, 0.14854116188317634, 0.16627381494807236, 0.16627381494807236, 0.16627381494807236, 0.13292307098549083, 0.13292307098549083, 0.13292307098549083, 0.3493191863380636, 0.3493191863380636, 0.3493191863380636, 0.35041568390217437, 0.35041568390217437, 0.35041568390217437, 0.3732861432454352, 0.3732861432454352, 0.3732861432454352, 0.2337272169761847, 0.2337272169761847, 0.2337272169761847, 0.24823802287029917, 0.24823802287029917, 0.24823802287029917, 0.2765433614125077, 0.2765433614125077, 0.2765433614125077, 0.18657272588830454, 0.18657272588830454, 0.18657272588830454, 0.1878470438501617, 0.1878470438501617, 0.1878470438501617, 0.18563483760981803, 0.18563483760981803, 0.18563483760981803, 0.24682457963897708, 0.24682457963897708, 0.24682457963897708, 0.20412237040606263, 0.20412237040606263, 0.20412237040606263, 0.18243152540132024, 0.18243152540132024, 0.18243152540132024, 0.205087174411971, 0.205087174411971, 0.205087174411971, 0.46314378479229856, 0.46314378479229856, 0.46314378479229856, 0.3567618599865394, 0.3567618599865394, 0.3567618599865394, 0.17528494783108306, 0.17528494783108306, 0.17528494783108306, 0.1875760599946913, 0.1875760599946913, 0.1875760599946913, 0.1972531313123348, 0.1972531313123348, 0.1972531313123348, 0.18153481436206476, 0.18153481436206476, 0.18153481436206476, 0.19970263109197361, 0.19970263109197361, 0.19970263109197361, 0.19302540097712872, 0.19302540097712872, 0.19302540097712872, 0.0671245939772167, 0.0671245939772167, 0.0671245939772167, 0.09176327410935303, 0.09176327410935303, 0.09176327410935303, 0.07984718765334897, 0.07984718765334897, 0.07984718765334897]}, "mutation_prompt": null}
{"id": "f11e23a0-0365-4aa9-b0b3-bb6112aa9a5d", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12 * dim  # Slightly increased population size\n        self.initial_mutation_factor = 0.9  # Adjusted mutation factor\n        self.crossover_rate = 0.8  # Slightly reduced crossover rate\n        self.mutation_decay = 0.99  # Introduced decay for mutation factor\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        evals = self.population_size\n        mutation_factor = self.initial_mutation_factor\n\n        while evals < self.budget:\n            for i in range(self.population_size):\n                idxs = list(range(self.population_size))\n                idxs.remove(i)\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(a + mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n\n                if evals >= self.budget:\n                    break\n\n            mutation_factor *= self.mutation_decay  # Apply decay to mutation factor\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with Dynamic Parameter Adjustment for Improved Convergence Speed.", "configspace": "", "generation": 24, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d1112af1-4034-4ce4-9891-8dcc1c9ed792", "metadata": {"aucs": [0.6969985460682535, 0.6969985460682535, 0.6969985460682535, 0.7086080684215486, 0.7086080684215486, 0.7086080684215486, 0.7168904152412697, 0.7168904152412697, 0.7168904152412697, 0.5490493868289036, 0.5490493868289036, 0.5490493868289036, 0.5551320490042886, 0.5551320490042886, 0.5551320490042886, 0.5422491229852082, 0.5422491229852082, 0.5422491229852082, 0.12064145139043381, 0.12064145139043381, 0.12064145139043381, 0.11128871233687165, 0.11128871233687165, 0.11128871233687165, 0.10340696647763414, 0.10340696647763414, 0.10340696647763414, 0.09628604454820522, 0.09628604454820522, 0.09628604454820522, 0.10104806195676341, 0.10104806195676341, 0.10104806195676341, 0.12165400157921036, 0.12165400157921036, 0.12165400157921036, 0.9490181760338906, 0.9490181760338906, 0.9490181760338906, 0.9782733486354914, 0.9782733486354914, 0.9782733486354914, 0.9474975824398824, 0.9474975824398824, 0.9474975824398824, 0.351346889274466, 0.351346889274466, 0.351346889274466, 0.31115368418544964, 0.31115368418544964, 0.31115368418544964, 0.2973857698695934, 0.2973857698695934, 0.2973857698695934, 0.5528651436099479, 0.5528651436099479, 0.5528651436099479, 0.5669136426308841, 0.5669136426308841, 0.5669136426308841, 0.5914210796464217, 0.5914210796464217, 0.5914210796464217, 0.1794537926561165, 0.1794537926561165, 0.1794537926561165, 0.16166906383817337, 0.16166906383817337, 0.16166906383817337, 0.13795387394883385, 0.13795387394883385, 0.13795387394883385, 0.07727101457557861, 0.07727101457557861, 0.07727101457557861, 0.13046071290658778, 0.13046071290658778, 0.13046071290658778, 0.20117502392133024, 0.20117502392133024, 0.20117502392133024, 0.09690477937788733, 0.09690477937788733, 0.09690477937788733, 0.12554679314617445, 0.12554679314617445, 0.12554679314617445, 0.12132873294364599, 0.12132873294364599, 0.12132873294364599, 0.2253527669286477, 0.2253527669286477, 0.2253527669286477, 0.24048312190382015, 0.24048312190382015, 0.24048312190382015, 0.2614366579342966, 0.2614366579342966, 0.2614366579342966, 0.05481908613288522, 0.05481908613288522, 0.05481908613288522, 0.05263189466430851, 0.05263189466430851, 0.05263189466430851, 0.058119848405522534, 0.058119848405522534, 0.058119848405522534, 0.1688675387577956, 0.1688675387577956, 0.1688675387577956, 0.19772640569640487, 0.19772640569640487, 0.19772640569640487, 0.18164909442330446, 0.18164909442330446, 0.18164909442330446, 0.5062472735084944, 0.5062472735084944, 0.5062472735084944, 0.5498625427404396, 0.5498625427404396, 0.5498625427404396, 0.5279376861730626, 0.5279376861730626, 0.5279376861730626, 0.10528025497482052, 0.10528025497482052, 0.10528025497482052, 0.09473795732513479, 0.09473795732513479, 0.09473795732513479, 0.09839242414299965, 0.09839242414299965, 0.09839242414299965, 0.14854116188317634, 0.14854116188317634, 0.14854116188317634, 0.16627381494807236, 0.16627381494807236, 0.16627381494807236, 0.13292307098549083, 0.13292307098549083, 0.13292307098549083, 0.3493191863380636, 0.3493191863380636, 0.3493191863380636, 0.35041568390217437, 0.35041568390217437, 0.35041568390217437, 0.3732861432454352, 0.3732861432454352, 0.3732861432454352, 0.2337272169761847, 0.2337272169761847, 0.2337272169761847, 0.24823802287029917, 0.24823802287029917, 0.24823802287029917, 0.2765433614125077, 0.2765433614125077, 0.2765433614125077, 0.18657272588830454, 0.18657272588830454, 0.18657272588830454, 0.1878470438501617, 0.1878470438501617, 0.1878470438501617, 0.18563483760981803, 0.18563483760981803, 0.18563483760981803, 0.24682457963897708, 0.24682457963897708, 0.24682457963897708, 0.20412237040606263, 0.20412237040606263, 0.20412237040606263, 0.18243152540132024, 0.18243152540132024, 0.18243152540132024, 0.205087174411971, 0.205087174411971, 0.205087174411971, 0.46314378479229856, 0.46314378479229856, 0.46314378479229856, 0.3567618599865394, 0.3567618599865394, 0.3567618599865394, 0.17528494783108306, 0.17528494783108306, 0.17528494783108306, 0.1875760599946913, 0.1875760599946913, 0.1875760599946913, 0.1972531313123348, 0.1972531313123348, 0.1972531313123348, 0.18153481436206476, 0.18153481436206476, 0.18153481436206476, 0.19970263109197361, 0.19970263109197361, 0.19970263109197361, 0.19302540097712872, 0.19302540097712872, 0.19302540097712872, 0.0671245939772167, 0.0671245939772167, 0.0671245939772167, 0.09176327410935303, 0.09176327410935303, 0.09176327410935303, 0.07984718765334897, 0.07984718765334897, 0.07984718765334897]}, "mutation_prompt": null}
{"id": "04e0a708-ac95-4638-9de3-f651f6225d95", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12 * dim  # Slightly increased population size\n        self.initial_mutation_factor = 0.9  # Adjusted mutation factor\n        self.crossover_rate = 0.8  # Slightly reduced crossover rate\n        self.mutation_decay = 0.99  # Introduced decay for mutation factor\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        evals = self.population_size\n        mutation_factor = self.initial_mutation_factor\n\n        while evals < self.budget:\n            for i in range(self.population_size):\n                idxs = list(range(self.population_size))\n                idxs.remove(i)\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(a + mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n\n                if evals >= self.budget:\n                    break\n\n            mutation_factor *= self.mutation_decay  # Apply decay to mutation factor\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with Dynamic Parameter Adjustment for Improved Convergence Speed.", "configspace": "", "generation": 24, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d1112af1-4034-4ce4-9891-8dcc1c9ed792", "metadata": {"aucs": [0.6969985460682535, 0.6969985460682535, 0.6969985460682535, 0.7086080684215486, 0.7086080684215486, 0.7086080684215486, 0.7168904152412697, 0.7168904152412697, 0.7168904152412697, 0.5490493868289036, 0.5490493868289036, 0.5490493868289036, 0.5551320490042886, 0.5551320490042886, 0.5551320490042886, 0.5422491229852082, 0.5422491229852082, 0.5422491229852082, 0.12064145139043381, 0.12064145139043381, 0.12064145139043381, 0.11128871233687165, 0.11128871233687165, 0.11128871233687165, 0.10340696647763414, 0.10340696647763414, 0.10340696647763414, 0.09628604454820522, 0.09628604454820522, 0.09628604454820522, 0.10104806195676341, 0.10104806195676341, 0.10104806195676341, 0.12165400157921036, 0.12165400157921036, 0.12165400157921036, 0.9490181760338906, 0.9490181760338906, 0.9490181760338906, 0.9782733486354914, 0.9782733486354914, 0.9782733486354914, 0.9474975824398824, 0.9474975824398824, 0.9474975824398824, 0.351346889274466, 0.351346889274466, 0.351346889274466, 0.31115368418544964, 0.31115368418544964, 0.31115368418544964, 0.2973857698695934, 0.2973857698695934, 0.2973857698695934, 0.5528651436099479, 0.5528651436099479, 0.5528651436099479, 0.5669136426308841, 0.5669136426308841, 0.5669136426308841, 0.5914210796464217, 0.5914210796464217, 0.5914210796464217, 0.1794537926561165, 0.1794537926561165, 0.1794537926561165, 0.16166906383817337, 0.16166906383817337, 0.16166906383817337, 0.13795387394883385, 0.13795387394883385, 0.13795387394883385, 0.07727101457557861, 0.07727101457557861, 0.07727101457557861, 0.13046071290658778, 0.13046071290658778, 0.13046071290658778, 0.20117502392133024, 0.20117502392133024, 0.20117502392133024, 0.09690477937788733, 0.09690477937788733, 0.09690477937788733, 0.12554679314617445, 0.12554679314617445, 0.12554679314617445, 0.12132873294364599, 0.12132873294364599, 0.12132873294364599, 0.2253527669286477, 0.2253527669286477, 0.2253527669286477, 0.24048312190382015, 0.24048312190382015, 0.24048312190382015, 0.2614366579342966, 0.2614366579342966, 0.2614366579342966, 0.05481908613288522, 0.05481908613288522, 0.05481908613288522, 0.05263189466430851, 0.05263189466430851, 0.05263189466430851, 0.058119848405522534, 0.058119848405522534, 0.058119848405522534, 0.1688675387577956, 0.1688675387577956, 0.1688675387577956, 0.19772640569640487, 0.19772640569640487, 0.19772640569640487, 0.18164909442330446, 0.18164909442330446, 0.18164909442330446, 0.5062472735084944, 0.5062472735084944, 0.5062472735084944, 0.5498625427404396, 0.5498625427404396, 0.5498625427404396, 0.5279376861730626, 0.5279376861730626, 0.5279376861730626, 0.10528025497482052, 0.10528025497482052, 0.10528025497482052, 0.09473795732513479, 0.09473795732513479, 0.09473795732513479, 0.09839242414299965, 0.09839242414299965, 0.09839242414299965, 0.14854116188317634, 0.14854116188317634, 0.14854116188317634, 0.16627381494807236, 0.16627381494807236, 0.16627381494807236, 0.13292307098549083, 0.13292307098549083, 0.13292307098549083, 0.3493191863380636, 0.3493191863380636, 0.3493191863380636, 0.35041568390217437, 0.35041568390217437, 0.35041568390217437, 0.3732861432454352, 0.3732861432454352, 0.3732861432454352, 0.2337272169761847, 0.2337272169761847, 0.2337272169761847, 0.24823802287029917, 0.24823802287029917, 0.24823802287029917, 0.2765433614125077, 0.2765433614125077, 0.2765433614125077, 0.18657272588830454, 0.18657272588830454, 0.18657272588830454, 0.1878470438501617, 0.1878470438501617, 0.1878470438501617, 0.18563483760981803, 0.18563483760981803, 0.18563483760981803, 0.24682457963897708, 0.24682457963897708, 0.24682457963897708, 0.20412237040606263, 0.20412237040606263, 0.20412237040606263, 0.18243152540132024, 0.18243152540132024, 0.18243152540132024, 0.205087174411971, 0.205087174411971, 0.205087174411971, 0.46314378479229856, 0.46314378479229856, 0.46314378479229856, 0.3567618599865394, 0.3567618599865394, 0.3567618599865394, 0.17528494783108306, 0.17528494783108306, 0.17528494783108306, 0.1875760599946913, 0.1875760599946913, 0.1875760599946913, 0.1972531313123348, 0.1972531313123348, 0.1972531313123348, 0.18153481436206476, 0.18153481436206476, 0.18153481436206476, 0.19970263109197361, 0.19970263109197361, 0.19970263109197361, 0.19302540097712872, 0.19302540097712872, 0.19302540097712872, 0.0671245939772167, 0.0671245939772167, 0.0671245939772167, 0.09176327410935303, 0.09176327410935303, 0.09176327410935303, 0.07984718765334897, 0.07984718765334897, 0.07984718765334897]}, "mutation_prompt": null}
{"id": "43b61c13-3f1b-4a0a-9088-2de20beb5a58", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12 * dim  # Slightly increased population size\n        self.initial_mutation_factor = 0.9  # Adjusted mutation factor\n        self.crossover_rate = 0.8  # Slightly reduced crossover rate\n        self.mutation_decay = 0.99  # Introduced decay for mutation factor\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        evals = self.population_size\n        mutation_factor = self.initial_mutation_factor\n\n        while evals < self.budget:\n            for i in range(self.population_size):\n                idxs = list(range(self.population_size))\n                idxs.remove(i)\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(a + mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n\n                if evals >= self.budget:\n                    break\n\n            mutation_factor *= self.mutation_decay  # Apply decay to mutation factor\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with Dynamic Parameter Adjustment for Improved Convergence Speed.", "configspace": "", "generation": 24, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d1112af1-4034-4ce4-9891-8dcc1c9ed792", "metadata": {"aucs": [0.6969985460682535, 0.6969985460682535, 0.6969985460682535, 0.7086080684215486, 0.7086080684215486, 0.7086080684215486, 0.7168904152412697, 0.7168904152412697, 0.7168904152412697, 0.5490493868289036, 0.5490493868289036, 0.5490493868289036, 0.5551320490042886, 0.5551320490042886, 0.5551320490042886, 0.5422491229852082, 0.5422491229852082, 0.5422491229852082, 0.12064145139043381, 0.12064145139043381, 0.12064145139043381, 0.11128871233687165, 0.11128871233687165, 0.11128871233687165, 0.10340696647763414, 0.10340696647763414, 0.10340696647763414, 0.09628604454820522, 0.09628604454820522, 0.09628604454820522, 0.10104806195676341, 0.10104806195676341, 0.10104806195676341, 0.12165400157921036, 0.12165400157921036, 0.12165400157921036, 0.9490181760338906, 0.9490181760338906, 0.9490181760338906, 0.9782733486354914, 0.9782733486354914, 0.9782733486354914, 0.9474975824398824, 0.9474975824398824, 0.9474975824398824, 0.351346889274466, 0.351346889274466, 0.351346889274466, 0.31115368418544964, 0.31115368418544964, 0.31115368418544964, 0.2973857698695934, 0.2973857698695934, 0.2973857698695934, 0.5528651436099479, 0.5528651436099479, 0.5528651436099479, 0.5669136426308841, 0.5669136426308841, 0.5669136426308841, 0.5914210796464217, 0.5914210796464217, 0.5914210796464217, 0.1794537926561165, 0.1794537926561165, 0.1794537926561165, 0.16166906383817337, 0.16166906383817337, 0.16166906383817337, 0.13795387394883385, 0.13795387394883385, 0.13795387394883385, 0.07727101457557861, 0.07727101457557861, 0.07727101457557861, 0.13046071290658778, 0.13046071290658778, 0.13046071290658778, 0.20117502392133024, 0.20117502392133024, 0.20117502392133024, 0.09690477937788733, 0.09690477937788733, 0.09690477937788733, 0.12554679314617445, 0.12554679314617445, 0.12554679314617445, 0.12132873294364599, 0.12132873294364599, 0.12132873294364599, 0.2253527669286477, 0.2253527669286477, 0.2253527669286477, 0.24048312190382015, 0.24048312190382015, 0.24048312190382015, 0.2614366579342966, 0.2614366579342966, 0.2614366579342966, 0.05481908613288522, 0.05481908613288522, 0.05481908613288522, 0.05263189466430851, 0.05263189466430851, 0.05263189466430851, 0.058119848405522534, 0.058119848405522534, 0.058119848405522534, 0.1688675387577956, 0.1688675387577956, 0.1688675387577956, 0.19772640569640487, 0.19772640569640487, 0.19772640569640487, 0.18164909442330446, 0.18164909442330446, 0.18164909442330446, 0.5062472735084944, 0.5062472735084944, 0.5062472735084944, 0.5498625427404396, 0.5498625427404396, 0.5498625427404396, 0.5279376861730626, 0.5279376861730626, 0.5279376861730626, 0.10528025497482052, 0.10528025497482052, 0.10528025497482052, 0.09473795732513479, 0.09473795732513479, 0.09473795732513479, 0.09839242414299965, 0.09839242414299965, 0.09839242414299965, 0.14854116188317634, 0.14854116188317634, 0.14854116188317634, 0.16627381494807236, 0.16627381494807236, 0.16627381494807236, 0.13292307098549083, 0.13292307098549083, 0.13292307098549083, 0.3493191863380636, 0.3493191863380636, 0.3493191863380636, 0.35041568390217437, 0.35041568390217437, 0.35041568390217437, 0.3732861432454352, 0.3732861432454352, 0.3732861432454352, 0.2337272169761847, 0.2337272169761847, 0.2337272169761847, 0.24823802287029917, 0.24823802287029917, 0.24823802287029917, 0.2765433614125077, 0.2765433614125077, 0.2765433614125077, 0.18657272588830454, 0.18657272588830454, 0.18657272588830454, 0.1878470438501617, 0.1878470438501617, 0.1878470438501617, 0.18563483760981803, 0.18563483760981803, 0.18563483760981803, 0.24682457963897708, 0.24682457963897708, 0.24682457963897708, 0.20412237040606263, 0.20412237040606263, 0.20412237040606263, 0.18243152540132024, 0.18243152540132024, 0.18243152540132024, 0.205087174411971, 0.205087174411971, 0.205087174411971, 0.46314378479229856, 0.46314378479229856, 0.46314378479229856, 0.3567618599865394, 0.3567618599865394, 0.3567618599865394, 0.17528494783108306, 0.17528494783108306, 0.17528494783108306, 0.1875760599946913, 0.1875760599946913, 0.1875760599946913, 0.1972531313123348, 0.1972531313123348, 0.1972531313123348, 0.18153481436206476, 0.18153481436206476, 0.18153481436206476, 0.19970263109197361, 0.19970263109197361, 0.19970263109197361, 0.19302540097712872, 0.19302540097712872, 0.19302540097712872, 0.0671245939772167, 0.0671245939772167, 0.0671245939772167, 0.09176327410935303, 0.09176327410935303, 0.09176327410935303, 0.07984718765334897, 0.07984718765334897, 0.07984718765334897]}, "mutation_prompt": null}
{"id": "2226c0e2-2002-4c8a-80b4-5d7687b8af73", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12 * dim  # Slightly increased population size\n        self.initial_mutation_factor = 0.9  # Adjusted mutation factor\n        self.crossover_rate = 0.8  # Slightly reduced crossover rate\n        self.mutation_decay = 0.99  # Introduced decay for mutation factor\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        evals = self.population_size\n        mutation_factor = self.initial_mutation_factor\n\n        while evals < self.budget:\n            for i in range(self.population_size):\n                idxs = list(range(self.population_size))\n                idxs.remove(i)\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(a + mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n\n                if evals >= self.budget:\n                    break\n\n            mutation_factor *= self.mutation_decay  # Apply decay to mutation factor\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with Dynamic Parameter Adjustment for Improved Convergence Speed.", "configspace": "", "generation": 24, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d1112af1-4034-4ce4-9891-8dcc1c9ed792", "metadata": {"aucs": [0.6969985460682535, 0.6969985460682535, 0.6969985460682535, 0.7086080684215486, 0.7086080684215486, 0.7086080684215486, 0.7168904152412697, 0.7168904152412697, 0.7168904152412697, 0.5490493868289036, 0.5490493868289036, 0.5490493868289036, 0.5551320490042886, 0.5551320490042886, 0.5551320490042886, 0.5422491229852082, 0.5422491229852082, 0.5422491229852082, 0.12064145139043381, 0.12064145139043381, 0.12064145139043381, 0.11128871233687165, 0.11128871233687165, 0.11128871233687165, 0.10340696647763414, 0.10340696647763414, 0.10340696647763414, 0.09628604454820522, 0.09628604454820522, 0.09628604454820522, 0.10104806195676341, 0.10104806195676341, 0.10104806195676341, 0.12165400157921036, 0.12165400157921036, 0.12165400157921036, 0.9490181760338906, 0.9490181760338906, 0.9490181760338906, 0.9782733486354914, 0.9782733486354914, 0.9782733486354914, 0.9474975824398824, 0.9474975824398824, 0.9474975824398824, 0.351346889274466, 0.351346889274466, 0.351346889274466, 0.31115368418544964, 0.31115368418544964, 0.31115368418544964, 0.2973857698695934, 0.2973857698695934, 0.2973857698695934, 0.5528651436099479, 0.5528651436099479, 0.5528651436099479, 0.5669136426308841, 0.5669136426308841, 0.5669136426308841, 0.5914210796464217, 0.5914210796464217, 0.5914210796464217, 0.1794537926561165, 0.1794537926561165, 0.1794537926561165, 0.16166906383817337, 0.16166906383817337, 0.16166906383817337, 0.13795387394883385, 0.13795387394883385, 0.13795387394883385, 0.07727101457557861, 0.07727101457557861, 0.07727101457557861, 0.13046071290658778, 0.13046071290658778, 0.13046071290658778, 0.20117502392133024, 0.20117502392133024, 0.20117502392133024, 0.09690477937788733, 0.09690477937788733, 0.09690477937788733, 0.12554679314617445, 0.12554679314617445, 0.12554679314617445, 0.12132873294364599, 0.12132873294364599, 0.12132873294364599, 0.2253527669286477, 0.2253527669286477, 0.2253527669286477, 0.24048312190382015, 0.24048312190382015, 0.24048312190382015, 0.2614366579342966, 0.2614366579342966, 0.2614366579342966, 0.05481908613288522, 0.05481908613288522, 0.05481908613288522, 0.05263189466430851, 0.05263189466430851, 0.05263189466430851, 0.058119848405522534, 0.058119848405522534, 0.058119848405522534, 0.1688675387577956, 0.1688675387577956, 0.1688675387577956, 0.19772640569640487, 0.19772640569640487, 0.19772640569640487, 0.18164909442330446, 0.18164909442330446, 0.18164909442330446, 0.5062472735084944, 0.5062472735084944, 0.5062472735084944, 0.5498625427404396, 0.5498625427404396, 0.5498625427404396, 0.5279376861730626, 0.5279376861730626, 0.5279376861730626, 0.10528025497482052, 0.10528025497482052, 0.10528025497482052, 0.09473795732513479, 0.09473795732513479, 0.09473795732513479, 0.09839242414299965, 0.09839242414299965, 0.09839242414299965, 0.14854116188317634, 0.14854116188317634, 0.14854116188317634, 0.16627381494807236, 0.16627381494807236, 0.16627381494807236, 0.13292307098549083, 0.13292307098549083, 0.13292307098549083, 0.3493191863380636, 0.3493191863380636, 0.3493191863380636, 0.35041568390217437, 0.35041568390217437, 0.35041568390217437, 0.3732861432454352, 0.3732861432454352, 0.3732861432454352, 0.2337272169761847, 0.2337272169761847, 0.2337272169761847, 0.24823802287029917, 0.24823802287029917, 0.24823802287029917, 0.2765433614125077, 0.2765433614125077, 0.2765433614125077, 0.18657272588830454, 0.18657272588830454, 0.18657272588830454, 0.1878470438501617, 0.1878470438501617, 0.1878470438501617, 0.18563483760981803, 0.18563483760981803, 0.18563483760981803, 0.24682457963897708, 0.24682457963897708, 0.24682457963897708, 0.20412237040606263, 0.20412237040606263, 0.20412237040606263, 0.18243152540132024, 0.18243152540132024, 0.18243152540132024, 0.205087174411971, 0.205087174411971, 0.205087174411971, 0.46314378479229856, 0.46314378479229856, 0.46314378479229856, 0.3567618599865394, 0.3567618599865394, 0.3567618599865394, 0.17528494783108306, 0.17528494783108306, 0.17528494783108306, 0.1875760599946913, 0.1875760599946913, 0.1875760599946913, 0.1972531313123348, 0.1972531313123348, 0.1972531313123348, 0.18153481436206476, 0.18153481436206476, 0.18153481436206476, 0.19970263109197361, 0.19970263109197361, 0.19970263109197361, 0.19302540097712872, 0.19302540097712872, 0.19302540097712872, 0.0671245939772167, 0.0671245939772167, 0.0671245939772167, 0.09176327410935303, 0.09176327410935303, 0.09176327410935303, 0.07984718765334897, 0.07984718765334897, 0.07984718765334897]}, "mutation_prompt": null}
{"id": "c423b9b3-724a-4781-a4ca-632461cdd934", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12 * dim  # Slightly increased population size\n        self.initial_mutation_factor = 0.9  # Adjusted mutation factor\n        self.crossover_rate = 0.8  # Slightly reduced crossover rate\n        self.mutation_decay = 0.99  # Introduced decay for mutation factor\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        evals = self.population_size\n        mutation_factor = self.initial_mutation_factor\n\n        while evals < self.budget:\n            for i in range(self.population_size):\n                idxs = list(range(self.population_size))\n                idxs.remove(i)\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(a + mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n\n                if evals >= self.budget:\n                    break\n\n            mutation_factor *= self.mutation_decay  # Apply decay to mutation factor\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with Dynamic Parameter Adjustment for Improved Convergence Speed.", "configspace": "", "generation": 24, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d1112af1-4034-4ce4-9891-8dcc1c9ed792", "metadata": {"aucs": [0.6969985460682535, 0.6969985460682535, 0.6969985460682535, 0.7086080684215486, 0.7086080684215486, 0.7086080684215486, 0.7168904152412697, 0.7168904152412697, 0.7168904152412697, 0.5490493868289036, 0.5490493868289036, 0.5490493868289036, 0.5551320490042886, 0.5551320490042886, 0.5551320490042886, 0.5422491229852082, 0.5422491229852082, 0.5422491229852082, 0.12064145139043381, 0.12064145139043381, 0.12064145139043381, 0.11128871233687165, 0.11128871233687165, 0.11128871233687165, 0.10340696647763414, 0.10340696647763414, 0.10340696647763414, 0.09628604454820522, 0.09628604454820522, 0.09628604454820522, 0.10104806195676341, 0.10104806195676341, 0.10104806195676341, 0.12165400157921036, 0.12165400157921036, 0.12165400157921036, 0.9490181760338906, 0.9490181760338906, 0.9490181760338906, 0.9782733486354914, 0.9782733486354914, 0.9782733486354914, 0.9474975824398824, 0.9474975824398824, 0.9474975824398824, 0.351346889274466, 0.351346889274466, 0.351346889274466, 0.31115368418544964, 0.31115368418544964, 0.31115368418544964, 0.2973857698695934, 0.2973857698695934, 0.2973857698695934, 0.5528651436099479, 0.5528651436099479, 0.5528651436099479, 0.5669136426308841, 0.5669136426308841, 0.5669136426308841, 0.5914210796464217, 0.5914210796464217, 0.5914210796464217, 0.1794537926561165, 0.1794537926561165, 0.1794537926561165, 0.16166906383817337, 0.16166906383817337, 0.16166906383817337, 0.13795387394883385, 0.13795387394883385, 0.13795387394883385, 0.07727101457557861, 0.07727101457557861, 0.07727101457557861, 0.13046071290658778, 0.13046071290658778, 0.13046071290658778, 0.20117502392133024, 0.20117502392133024, 0.20117502392133024, 0.09690477937788733, 0.09690477937788733, 0.09690477937788733, 0.12554679314617445, 0.12554679314617445, 0.12554679314617445, 0.12132873294364599, 0.12132873294364599, 0.12132873294364599, 0.2253527669286477, 0.2253527669286477, 0.2253527669286477, 0.24048312190382015, 0.24048312190382015, 0.24048312190382015, 0.2614366579342966, 0.2614366579342966, 0.2614366579342966, 0.05481908613288522, 0.05481908613288522, 0.05481908613288522, 0.05263189466430851, 0.05263189466430851, 0.05263189466430851, 0.058119848405522534, 0.058119848405522534, 0.058119848405522534, 0.1688675387577956, 0.1688675387577956, 0.1688675387577956, 0.19772640569640487, 0.19772640569640487, 0.19772640569640487, 0.18164909442330446, 0.18164909442330446, 0.18164909442330446, 0.5062472735084944, 0.5062472735084944, 0.5062472735084944, 0.5498625427404396, 0.5498625427404396, 0.5498625427404396, 0.5279376861730626, 0.5279376861730626, 0.5279376861730626, 0.10528025497482052, 0.10528025497482052, 0.10528025497482052, 0.09473795732513479, 0.09473795732513479, 0.09473795732513479, 0.09839242414299965, 0.09839242414299965, 0.09839242414299965, 0.14854116188317634, 0.14854116188317634, 0.14854116188317634, 0.16627381494807236, 0.16627381494807236, 0.16627381494807236, 0.13292307098549083, 0.13292307098549083, 0.13292307098549083, 0.3493191863380636, 0.3493191863380636, 0.3493191863380636, 0.35041568390217437, 0.35041568390217437, 0.35041568390217437, 0.3732861432454352, 0.3732861432454352, 0.3732861432454352, 0.2337272169761847, 0.2337272169761847, 0.2337272169761847, 0.24823802287029917, 0.24823802287029917, 0.24823802287029917, 0.2765433614125077, 0.2765433614125077, 0.2765433614125077, 0.18657272588830454, 0.18657272588830454, 0.18657272588830454, 0.1878470438501617, 0.1878470438501617, 0.1878470438501617, 0.18563483760981803, 0.18563483760981803, 0.18563483760981803, 0.24682457963897708, 0.24682457963897708, 0.24682457963897708, 0.20412237040606263, 0.20412237040606263, 0.20412237040606263, 0.18243152540132024, 0.18243152540132024, 0.18243152540132024, 0.205087174411971, 0.205087174411971, 0.205087174411971, 0.46314378479229856, 0.46314378479229856, 0.46314378479229856, 0.3567618599865394, 0.3567618599865394, 0.3567618599865394, 0.17528494783108306, 0.17528494783108306, 0.17528494783108306, 0.1875760599946913, 0.1875760599946913, 0.1875760599946913, 0.1972531313123348, 0.1972531313123348, 0.1972531313123348, 0.18153481436206476, 0.18153481436206476, 0.18153481436206476, 0.19970263109197361, 0.19970263109197361, 0.19970263109197361, 0.19302540097712872, 0.19302540097712872, 0.19302540097712872, 0.0671245939772167, 0.0671245939772167, 0.0671245939772167, 0.09176327410935303, 0.09176327410935303, 0.09176327410935303, 0.07984718765334897, 0.07984718765334897, 0.07984718765334897]}, "mutation_prompt": null}
{"id": "fc778fe4-5ff8-4562-a5b6-999d42d91a05", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12 * dim  # Slightly increased population size\n        self.initial_mutation_factor = 0.9  # Adjusted mutation factor\n        self.crossover_rate = 0.8  # Slightly reduced crossover rate\n        self.mutation_decay = 0.99  # Introduced decay for mutation factor\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        evals = self.population_size\n        mutation_factor = self.initial_mutation_factor\n\n        while evals < self.budget:\n            for i in range(self.population_size):\n                idxs = list(range(self.population_size))\n                idxs.remove(i)\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(a + mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n\n                if evals >= self.budget:\n                    break\n\n            mutation_factor *= self.mutation_decay  # Apply decay to mutation factor\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with Dynamic Parameter Adjustment for Improved Convergence Speed.", "configspace": "", "generation": 24, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d1112af1-4034-4ce4-9891-8dcc1c9ed792", "metadata": {"aucs": [0.6969985460682535, 0.6969985460682535, 0.6969985460682535, 0.7086080684215486, 0.7086080684215486, 0.7086080684215486, 0.7168904152412697, 0.7168904152412697, 0.7168904152412697, 0.5490493868289036, 0.5490493868289036, 0.5490493868289036, 0.5551320490042886, 0.5551320490042886, 0.5551320490042886, 0.5422491229852082, 0.5422491229852082, 0.5422491229852082, 0.12064145139043381, 0.12064145139043381, 0.12064145139043381, 0.11128871233687165, 0.11128871233687165, 0.11128871233687165, 0.10340696647763414, 0.10340696647763414, 0.10340696647763414, 0.09628604454820522, 0.09628604454820522, 0.09628604454820522, 0.10104806195676341, 0.10104806195676341, 0.10104806195676341, 0.12165400157921036, 0.12165400157921036, 0.12165400157921036, 0.9490181760338906, 0.9490181760338906, 0.9490181760338906, 0.9782733486354914, 0.9782733486354914, 0.9782733486354914, 0.9474975824398824, 0.9474975824398824, 0.9474975824398824, 0.351346889274466, 0.351346889274466, 0.351346889274466, 0.31115368418544964, 0.31115368418544964, 0.31115368418544964, 0.2973857698695934, 0.2973857698695934, 0.2973857698695934, 0.5528651436099479, 0.5528651436099479, 0.5528651436099479, 0.5669136426308841, 0.5669136426308841, 0.5669136426308841, 0.5914210796464217, 0.5914210796464217, 0.5914210796464217, 0.1794537926561165, 0.1794537926561165, 0.1794537926561165, 0.16166906383817337, 0.16166906383817337, 0.16166906383817337, 0.13795387394883385, 0.13795387394883385, 0.13795387394883385, 0.07727101457557861, 0.07727101457557861, 0.07727101457557861, 0.13046071290658778, 0.13046071290658778, 0.13046071290658778, 0.20117502392133024, 0.20117502392133024, 0.20117502392133024, 0.09690477937788733, 0.09690477937788733, 0.09690477937788733, 0.12554679314617445, 0.12554679314617445, 0.12554679314617445, 0.12132873294364599, 0.12132873294364599, 0.12132873294364599, 0.2253527669286477, 0.2253527669286477, 0.2253527669286477, 0.24048312190382015, 0.24048312190382015, 0.24048312190382015, 0.2614366579342966, 0.2614366579342966, 0.2614366579342966, 0.05481908613288522, 0.05481908613288522, 0.05481908613288522, 0.05263189466430851, 0.05263189466430851, 0.05263189466430851, 0.058119848405522534, 0.058119848405522534, 0.058119848405522534, 0.1688675387577956, 0.1688675387577956, 0.1688675387577956, 0.19772640569640487, 0.19772640569640487, 0.19772640569640487, 0.18164909442330446, 0.18164909442330446, 0.18164909442330446, 0.5062472735084944, 0.5062472735084944, 0.5062472735084944, 0.5498625427404396, 0.5498625427404396, 0.5498625427404396, 0.5279376861730626, 0.5279376861730626, 0.5279376861730626, 0.10528025497482052, 0.10528025497482052, 0.10528025497482052, 0.09473795732513479, 0.09473795732513479, 0.09473795732513479, 0.09839242414299965, 0.09839242414299965, 0.09839242414299965, 0.14854116188317634, 0.14854116188317634, 0.14854116188317634, 0.16627381494807236, 0.16627381494807236, 0.16627381494807236, 0.13292307098549083, 0.13292307098549083, 0.13292307098549083, 0.3493191863380636, 0.3493191863380636, 0.3493191863380636, 0.35041568390217437, 0.35041568390217437, 0.35041568390217437, 0.3732861432454352, 0.3732861432454352, 0.3732861432454352, 0.2337272169761847, 0.2337272169761847, 0.2337272169761847, 0.24823802287029917, 0.24823802287029917, 0.24823802287029917, 0.2765433614125077, 0.2765433614125077, 0.2765433614125077, 0.18657272588830454, 0.18657272588830454, 0.18657272588830454, 0.1878470438501617, 0.1878470438501617, 0.1878470438501617, 0.18563483760981803, 0.18563483760981803, 0.18563483760981803, 0.24682457963897708, 0.24682457963897708, 0.24682457963897708, 0.20412237040606263, 0.20412237040606263, 0.20412237040606263, 0.18243152540132024, 0.18243152540132024, 0.18243152540132024, 0.205087174411971, 0.205087174411971, 0.205087174411971, 0.46314378479229856, 0.46314378479229856, 0.46314378479229856, 0.3567618599865394, 0.3567618599865394, 0.3567618599865394, 0.17528494783108306, 0.17528494783108306, 0.17528494783108306, 0.1875760599946913, 0.1875760599946913, 0.1875760599946913, 0.1972531313123348, 0.1972531313123348, 0.1972531313123348, 0.18153481436206476, 0.18153481436206476, 0.18153481436206476, 0.19970263109197361, 0.19970263109197361, 0.19970263109197361, 0.19302540097712872, 0.19302540097712872, 0.19302540097712872, 0.0671245939772167, 0.0671245939772167, 0.0671245939772167, 0.09176327410935303, 0.09176327410935303, 0.09176327410935303, 0.07984718765334897, 0.07984718765334897, 0.07984718765334897]}, "mutation_prompt": null}
{"id": "19a6715d-5357-437c-baae-b433af2da200", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12 * dim  # Slightly increased population size\n        self.initial_mutation_factor = 0.9  # Adjusted mutation factor\n        self.crossover_rate = 0.8  # Slightly reduced crossover rate\n        self.mutation_decay = 0.99  # Introduced decay for mutation factor\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        evals = self.population_size\n        mutation_factor = self.initial_mutation_factor\n\n        while evals < self.budget:\n            for i in range(self.population_size):\n                idxs = list(range(self.population_size))\n                idxs.remove(i)\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(a + mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n\n                if evals >= self.budget:\n                    break\n\n            mutation_factor *= self.mutation_decay  # Apply decay to mutation factor\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with Dynamic Parameter Adjustment for Improved Convergence Speed.", "configspace": "", "generation": 24, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d1112af1-4034-4ce4-9891-8dcc1c9ed792", "metadata": {"aucs": [0.6969985460682535, 0.6969985460682535, 0.6969985460682535, 0.7086080684215486, 0.7086080684215486, 0.7086080684215486, 0.7168904152412697, 0.7168904152412697, 0.7168904152412697, 0.5490493868289036, 0.5490493868289036, 0.5490493868289036, 0.5551320490042886, 0.5551320490042886, 0.5551320490042886, 0.5422491229852082, 0.5422491229852082, 0.5422491229852082, 0.12064145139043381, 0.12064145139043381, 0.12064145139043381, 0.11128871233687165, 0.11128871233687165, 0.11128871233687165, 0.10340696647763414, 0.10340696647763414, 0.10340696647763414, 0.09628604454820522, 0.09628604454820522, 0.09628604454820522, 0.10104806195676341, 0.10104806195676341, 0.10104806195676341, 0.12165400157921036, 0.12165400157921036, 0.12165400157921036, 0.9490181760338906, 0.9490181760338906, 0.9490181760338906, 0.9782733486354914, 0.9782733486354914, 0.9782733486354914, 0.9474975824398824, 0.9474975824398824, 0.9474975824398824, 0.351346889274466, 0.351346889274466, 0.351346889274466, 0.31115368418544964, 0.31115368418544964, 0.31115368418544964, 0.2973857698695934, 0.2973857698695934, 0.2973857698695934, 0.5528651436099479, 0.5528651436099479, 0.5528651436099479, 0.5669136426308841, 0.5669136426308841, 0.5669136426308841, 0.5914210796464217, 0.5914210796464217, 0.5914210796464217, 0.1794537926561165, 0.1794537926561165, 0.1794537926561165, 0.16166906383817337, 0.16166906383817337, 0.16166906383817337, 0.13795387394883385, 0.13795387394883385, 0.13795387394883385, 0.07727101457557861, 0.07727101457557861, 0.07727101457557861, 0.13046071290658778, 0.13046071290658778, 0.13046071290658778, 0.20117502392133024, 0.20117502392133024, 0.20117502392133024, 0.09690477937788733, 0.09690477937788733, 0.09690477937788733, 0.12554679314617445, 0.12554679314617445, 0.12554679314617445, 0.12132873294364599, 0.12132873294364599, 0.12132873294364599, 0.2253527669286477, 0.2253527669286477, 0.2253527669286477, 0.24048312190382015, 0.24048312190382015, 0.24048312190382015, 0.2614366579342966, 0.2614366579342966, 0.2614366579342966, 0.05481908613288522, 0.05481908613288522, 0.05481908613288522, 0.05263189466430851, 0.05263189466430851, 0.05263189466430851, 0.058119848405522534, 0.058119848405522534, 0.058119848405522534, 0.1688675387577956, 0.1688675387577956, 0.1688675387577956, 0.19772640569640487, 0.19772640569640487, 0.19772640569640487, 0.18164909442330446, 0.18164909442330446, 0.18164909442330446, 0.5062472735084944, 0.5062472735084944, 0.5062472735084944, 0.5498625427404396, 0.5498625427404396, 0.5498625427404396, 0.5279376861730626, 0.5279376861730626, 0.5279376861730626, 0.10528025497482052, 0.10528025497482052, 0.10528025497482052, 0.09473795732513479, 0.09473795732513479, 0.09473795732513479, 0.09839242414299965, 0.09839242414299965, 0.09839242414299965, 0.14854116188317634, 0.14854116188317634, 0.14854116188317634, 0.16627381494807236, 0.16627381494807236, 0.16627381494807236, 0.13292307098549083, 0.13292307098549083, 0.13292307098549083, 0.3493191863380636, 0.3493191863380636, 0.3493191863380636, 0.35041568390217437, 0.35041568390217437, 0.35041568390217437, 0.3732861432454352, 0.3732861432454352, 0.3732861432454352, 0.2337272169761847, 0.2337272169761847, 0.2337272169761847, 0.24823802287029917, 0.24823802287029917, 0.24823802287029917, 0.2765433614125077, 0.2765433614125077, 0.2765433614125077, 0.18657272588830454, 0.18657272588830454, 0.18657272588830454, 0.1878470438501617, 0.1878470438501617, 0.1878470438501617, 0.18563483760981803, 0.18563483760981803, 0.18563483760981803, 0.24682457963897708, 0.24682457963897708, 0.24682457963897708, 0.20412237040606263, 0.20412237040606263, 0.20412237040606263, 0.18243152540132024, 0.18243152540132024, 0.18243152540132024, 0.205087174411971, 0.205087174411971, 0.205087174411971, 0.46314378479229856, 0.46314378479229856, 0.46314378479229856, 0.3567618599865394, 0.3567618599865394, 0.3567618599865394, 0.17528494783108306, 0.17528494783108306, 0.17528494783108306, 0.1875760599946913, 0.1875760599946913, 0.1875760599946913, 0.1972531313123348, 0.1972531313123348, 0.1972531313123348, 0.18153481436206476, 0.18153481436206476, 0.18153481436206476, 0.19970263109197361, 0.19970263109197361, 0.19970263109197361, 0.19302540097712872, 0.19302540097712872, 0.19302540097712872, 0.0671245939772167, 0.0671245939772167, 0.0671245939772167, 0.09176327410935303, 0.09176327410935303, 0.09176327410935303, 0.07984718765334897, 0.07984718765334897, 0.07984718765334897]}, "mutation_prompt": null}
{"id": "b66cd394-74d3-4e16-81a2-6e99f5f78625", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12 * dim  # Slightly increased population size\n        self.initial_mutation_factor = 0.9  # Adjusted mutation factor\n        self.crossover_rate = 0.8  # Slightly reduced crossover rate\n        self.mutation_decay = 0.99  # Introduced decay for mutation factor\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        evals = self.population_size\n        mutation_factor = self.initial_mutation_factor\n\n        while evals < self.budget:\n            for i in range(self.population_size):\n                idxs = list(range(self.population_size))\n                idxs.remove(i)\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(a + mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n\n                if evals >= self.budget:\n                    break\n\n            mutation_factor *= self.mutation_decay  # Apply decay to mutation factor\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with Dynamic Parameter Adjustment for Improved Convergence Speed.", "configspace": "", "generation": 24, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d1112af1-4034-4ce4-9891-8dcc1c9ed792", "metadata": {"aucs": [0.6969985460682535, 0.6969985460682535, 0.6969985460682535, 0.7086080684215486, 0.7086080684215486, 0.7086080684215486, 0.7168904152412697, 0.7168904152412697, 0.7168904152412697, 0.5490493868289036, 0.5490493868289036, 0.5490493868289036, 0.5551320490042886, 0.5551320490042886, 0.5551320490042886, 0.5422491229852082, 0.5422491229852082, 0.5422491229852082, 0.12064145139043381, 0.12064145139043381, 0.12064145139043381, 0.11128871233687165, 0.11128871233687165, 0.11128871233687165, 0.10340696647763414, 0.10340696647763414, 0.10340696647763414, 0.09628604454820522, 0.09628604454820522, 0.09628604454820522, 0.10104806195676341, 0.10104806195676341, 0.10104806195676341, 0.12165400157921036, 0.12165400157921036, 0.12165400157921036, 0.9490181760338906, 0.9490181760338906, 0.9490181760338906, 0.9782733486354914, 0.9782733486354914, 0.9782733486354914, 0.9474975824398824, 0.9474975824398824, 0.9474975824398824, 0.351346889274466, 0.351346889274466, 0.351346889274466, 0.31115368418544964, 0.31115368418544964, 0.31115368418544964, 0.2973857698695934, 0.2973857698695934, 0.2973857698695934, 0.5528651436099479, 0.5528651436099479, 0.5528651436099479, 0.5669136426308841, 0.5669136426308841, 0.5669136426308841, 0.5914210796464217, 0.5914210796464217, 0.5914210796464217, 0.1794537926561165, 0.1794537926561165, 0.1794537926561165, 0.16166906383817337, 0.16166906383817337, 0.16166906383817337, 0.13795387394883385, 0.13795387394883385, 0.13795387394883385, 0.07727101457557861, 0.07727101457557861, 0.07727101457557861, 0.13046071290658778, 0.13046071290658778, 0.13046071290658778, 0.20117502392133024, 0.20117502392133024, 0.20117502392133024, 0.09690477937788733, 0.09690477937788733, 0.09690477937788733, 0.12554679314617445, 0.12554679314617445, 0.12554679314617445, 0.12132873294364599, 0.12132873294364599, 0.12132873294364599, 0.2253527669286477, 0.2253527669286477, 0.2253527669286477, 0.24048312190382015, 0.24048312190382015, 0.24048312190382015, 0.2614366579342966, 0.2614366579342966, 0.2614366579342966, 0.05481908613288522, 0.05481908613288522, 0.05481908613288522, 0.05263189466430851, 0.05263189466430851, 0.05263189466430851, 0.058119848405522534, 0.058119848405522534, 0.058119848405522534, 0.1688675387577956, 0.1688675387577956, 0.1688675387577956, 0.19772640569640487, 0.19772640569640487, 0.19772640569640487, 0.18164909442330446, 0.18164909442330446, 0.18164909442330446, 0.5062472735084944, 0.5062472735084944, 0.5062472735084944, 0.5498625427404396, 0.5498625427404396, 0.5498625427404396, 0.5279376861730626, 0.5279376861730626, 0.5279376861730626, 0.10528025497482052, 0.10528025497482052, 0.10528025497482052, 0.09473795732513479, 0.09473795732513479, 0.09473795732513479, 0.09839242414299965, 0.09839242414299965, 0.09839242414299965, 0.14854116188317634, 0.14854116188317634, 0.14854116188317634, 0.16627381494807236, 0.16627381494807236, 0.16627381494807236, 0.13292307098549083, 0.13292307098549083, 0.13292307098549083, 0.3493191863380636, 0.3493191863380636, 0.3493191863380636, 0.35041568390217437, 0.35041568390217437, 0.35041568390217437, 0.3732861432454352, 0.3732861432454352, 0.3732861432454352, 0.2337272169761847, 0.2337272169761847, 0.2337272169761847, 0.24823802287029917, 0.24823802287029917, 0.24823802287029917, 0.2765433614125077, 0.2765433614125077, 0.2765433614125077, 0.18657272588830454, 0.18657272588830454, 0.18657272588830454, 0.1878470438501617, 0.1878470438501617, 0.1878470438501617, 0.18563483760981803, 0.18563483760981803, 0.18563483760981803, 0.24682457963897708, 0.24682457963897708, 0.24682457963897708, 0.20412237040606263, 0.20412237040606263, 0.20412237040606263, 0.18243152540132024, 0.18243152540132024, 0.18243152540132024, 0.205087174411971, 0.205087174411971, 0.205087174411971, 0.46314378479229856, 0.46314378479229856, 0.46314378479229856, 0.3567618599865394, 0.3567618599865394, 0.3567618599865394, 0.17528494783108306, 0.17528494783108306, 0.17528494783108306, 0.1875760599946913, 0.1875760599946913, 0.1875760599946913, 0.1972531313123348, 0.1972531313123348, 0.1972531313123348, 0.18153481436206476, 0.18153481436206476, 0.18153481436206476, 0.19970263109197361, 0.19970263109197361, 0.19970263109197361, 0.19302540097712872, 0.19302540097712872, 0.19302540097712872, 0.0671245939772167, 0.0671245939772167, 0.0671245939772167, 0.09176327410935303, 0.09176327410935303, 0.09176327410935303, 0.07984718765334897, 0.07984718765334897, 0.07984718765334897]}, "mutation_prompt": null}
{"id": "d77d501f-26ad-4fcb-be06-d5c248d9da80", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12 * dim  # Slightly increased population size\n        self.initial_mutation_factor = 0.9  # Adjusted mutation factor\n        self.crossover_rate = 0.8  # Slightly reduced crossover rate\n        self.mutation_decay = 0.99  # Introduced decay for mutation factor\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        evals = self.population_size\n        mutation_factor = self.initial_mutation_factor\n\n        while evals < self.budget:\n            for i in range(self.population_size):\n                idxs = list(range(self.population_size))\n                idxs.remove(i)\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(a + mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n\n                if evals >= self.budget:\n                    break\n\n            mutation_factor *= self.mutation_decay  # Apply decay to mutation factor\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with Dynamic Parameter Adjustment for Improved Convergence Speed.", "configspace": "", "generation": 24, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d1112af1-4034-4ce4-9891-8dcc1c9ed792", "metadata": {"aucs": [0.6969985460682535, 0.6969985460682535, 0.6969985460682535, 0.7086080684215486, 0.7086080684215486, 0.7086080684215486, 0.7168904152412697, 0.7168904152412697, 0.7168904152412697, 0.5490493868289036, 0.5490493868289036, 0.5490493868289036, 0.5551320490042886, 0.5551320490042886, 0.5551320490042886, 0.5422491229852082, 0.5422491229852082, 0.5422491229852082, 0.12064145139043381, 0.12064145139043381, 0.12064145139043381, 0.11128871233687165, 0.11128871233687165, 0.11128871233687165, 0.10340696647763414, 0.10340696647763414, 0.10340696647763414, 0.09628604454820522, 0.09628604454820522, 0.09628604454820522, 0.10104806195676341, 0.10104806195676341, 0.10104806195676341, 0.12165400157921036, 0.12165400157921036, 0.12165400157921036, 0.9490181760338906, 0.9490181760338906, 0.9490181760338906, 0.9782733486354914, 0.9782733486354914, 0.9782733486354914, 0.9474975824398824, 0.9474975824398824, 0.9474975824398824, 0.351346889274466, 0.351346889274466, 0.351346889274466, 0.31115368418544964, 0.31115368418544964, 0.31115368418544964, 0.2973857698695934, 0.2973857698695934, 0.2973857698695934, 0.5528651436099479, 0.5528651436099479, 0.5528651436099479, 0.5669136426308841, 0.5669136426308841, 0.5669136426308841, 0.5914210796464217, 0.5914210796464217, 0.5914210796464217, 0.1794537926561165, 0.1794537926561165, 0.1794537926561165, 0.16166906383817337, 0.16166906383817337, 0.16166906383817337, 0.13795387394883385, 0.13795387394883385, 0.13795387394883385, 0.07727101457557861, 0.07727101457557861, 0.07727101457557861, 0.13046071290658778, 0.13046071290658778, 0.13046071290658778, 0.20117502392133024, 0.20117502392133024, 0.20117502392133024, 0.09690477937788733, 0.09690477937788733, 0.09690477937788733, 0.12554679314617445, 0.12554679314617445, 0.12554679314617445, 0.12132873294364599, 0.12132873294364599, 0.12132873294364599, 0.2253527669286477, 0.2253527669286477, 0.2253527669286477, 0.24048312190382015, 0.24048312190382015, 0.24048312190382015, 0.2614366579342966, 0.2614366579342966, 0.2614366579342966, 0.05481908613288522, 0.05481908613288522, 0.05481908613288522, 0.05263189466430851, 0.05263189466430851, 0.05263189466430851, 0.058119848405522534, 0.058119848405522534, 0.058119848405522534, 0.1688675387577956, 0.1688675387577956, 0.1688675387577956, 0.19772640569640487, 0.19772640569640487, 0.19772640569640487, 0.18164909442330446, 0.18164909442330446, 0.18164909442330446, 0.5062472735084944, 0.5062472735084944, 0.5062472735084944, 0.5498625427404396, 0.5498625427404396, 0.5498625427404396, 0.5279376861730626, 0.5279376861730626, 0.5279376861730626, 0.10528025497482052, 0.10528025497482052, 0.10528025497482052, 0.09473795732513479, 0.09473795732513479, 0.09473795732513479, 0.09839242414299965, 0.09839242414299965, 0.09839242414299965, 0.14854116188317634, 0.14854116188317634, 0.14854116188317634, 0.16627381494807236, 0.16627381494807236, 0.16627381494807236, 0.13292307098549083, 0.13292307098549083, 0.13292307098549083, 0.3493191863380636, 0.3493191863380636, 0.3493191863380636, 0.35041568390217437, 0.35041568390217437, 0.35041568390217437, 0.3732861432454352, 0.3732861432454352, 0.3732861432454352, 0.2337272169761847, 0.2337272169761847, 0.2337272169761847, 0.24823802287029917, 0.24823802287029917, 0.24823802287029917, 0.2765433614125077, 0.2765433614125077, 0.2765433614125077, 0.18657272588830454, 0.18657272588830454, 0.18657272588830454, 0.1878470438501617, 0.1878470438501617, 0.1878470438501617, 0.18563483760981803, 0.18563483760981803, 0.18563483760981803, 0.24682457963897708, 0.24682457963897708, 0.24682457963897708, 0.20412237040606263, 0.20412237040606263, 0.20412237040606263, 0.18243152540132024, 0.18243152540132024, 0.18243152540132024, 0.205087174411971, 0.205087174411971, 0.205087174411971, 0.46314378479229856, 0.46314378479229856, 0.46314378479229856, 0.3567618599865394, 0.3567618599865394, 0.3567618599865394, 0.17528494783108306, 0.17528494783108306, 0.17528494783108306, 0.1875760599946913, 0.1875760599946913, 0.1875760599946913, 0.1972531313123348, 0.1972531313123348, 0.1972531313123348, 0.18153481436206476, 0.18153481436206476, 0.18153481436206476, 0.19970263109197361, 0.19970263109197361, 0.19970263109197361, 0.19302540097712872, 0.19302540097712872, 0.19302540097712872, 0.0671245939772167, 0.0671245939772167, 0.0671245939772167, 0.09176327410935303, 0.09176327410935303, 0.09176327410935303, 0.07984718765334897, 0.07984718765334897, 0.07984718765334897]}, "mutation_prompt": null}
{"id": "f4f28335-31c6-448d-af48-f5d288cb20d5", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12 * dim  # Slightly increased population size\n        self.initial_mutation_factor = 0.9  # Adjusted mutation factor\n        self.crossover_rate = 0.8  # Slightly reduced crossover rate\n        self.mutation_decay = 0.99  # Introduced decay for mutation factor\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        evals = self.population_size\n        mutation_factor = self.initial_mutation_factor\n\n        while evals < self.budget:\n            for i in range(self.population_size):\n                idxs = list(range(self.population_size))\n                idxs.remove(i)\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(a + mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n\n                if evals >= self.budget:\n                    break\n\n            mutation_factor *= self.mutation_decay  # Apply decay to mutation factor\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with Dynamic Parameter Adjustment for Improved Convergence Speed.", "configspace": "", "generation": 24, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d1112af1-4034-4ce4-9891-8dcc1c9ed792", "metadata": {"aucs": [0.6969985460682535, 0.6969985460682535, 0.6969985460682535, 0.7086080684215486, 0.7086080684215486, 0.7086080684215486, 0.7168904152412697, 0.7168904152412697, 0.7168904152412697, 0.5490493868289036, 0.5490493868289036, 0.5490493868289036, 0.5551320490042886, 0.5551320490042886, 0.5551320490042886, 0.5422491229852082, 0.5422491229852082, 0.5422491229852082, 0.12064145139043381, 0.12064145139043381, 0.12064145139043381, 0.11128871233687165, 0.11128871233687165, 0.11128871233687165, 0.10340696647763414, 0.10340696647763414, 0.10340696647763414, 0.09628604454820522, 0.09628604454820522, 0.09628604454820522, 0.10104806195676341, 0.10104806195676341, 0.10104806195676341, 0.12165400157921036, 0.12165400157921036, 0.12165400157921036, 0.9490181760338906, 0.9490181760338906, 0.9490181760338906, 0.9782733486354914, 0.9782733486354914, 0.9782733486354914, 0.9474975824398824, 0.9474975824398824, 0.9474975824398824, 0.351346889274466, 0.351346889274466, 0.351346889274466, 0.31115368418544964, 0.31115368418544964, 0.31115368418544964, 0.2973857698695934, 0.2973857698695934, 0.2973857698695934, 0.5528651436099479, 0.5528651436099479, 0.5528651436099479, 0.5669136426308841, 0.5669136426308841, 0.5669136426308841, 0.5914210796464217, 0.5914210796464217, 0.5914210796464217, 0.1794537926561165, 0.1794537926561165, 0.1794537926561165, 0.16166906383817337, 0.16166906383817337, 0.16166906383817337, 0.13795387394883385, 0.13795387394883385, 0.13795387394883385, 0.07727101457557861, 0.07727101457557861, 0.07727101457557861, 0.13046071290658778, 0.13046071290658778, 0.13046071290658778, 0.20117502392133024, 0.20117502392133024, 0.20117502392133024, 0.09690477937788733, 0.09690477937788733, 0.09690477937788733, 0.12554679314617445, 0.12554679314617445, 0.12554679314617445, 0.12132873294364599, 0.12132873294364599, 0.12132873294364599, 0.2253527669286477, 0.2253527669286477, 0.2253527669286477, 0.24048312190382015, 0.24048312190382015, 0.24048312190382015, 0.2614366579342966, 0.2614366579342966, 0.2614366579342966, 0.05481908613288522, 0.05481908613288522, 0.05481908613288522, 0.05263189466430851, 0.05263189466430851, 0.05263189466430851, 0.058119848405522534, 0.058119848405522534, 0.058119848405522534, 0.1688675387577956, 0.1688675387577956, 0.1688675387577956, 0.19772640569640487, 0.19772640569640487, 0.19772640569640487, 0.18164909442330446, 0.18164909442330446, 0.18164909442330446, 0.5062472735084944, 0.5062472735084944, 0.5062472735084944, 0.5498625427404396, 0.5498625427404396, 0.5498625427404396, 0.5279376861730626, 0.5279376861730626, 0.5279376861730626, 0.10528025497482052, 0.10528025497482052, 0.10528025497482052, 0.09473795732513479, 0.09473795732513479, 0.09473795732513479, 0.09839242414299965, 0.09839242414299965, 0.09839242414299965, 0.14854116188317634, 0.14854116188317634, 0.14854116188317634, 0.16627381494807236, 0.16627381494807236, 0.16627381494807236, 0.13292307098549083, 0.13292307098549083, 0.13292307098549083, 0.3493191863380636, 0.3493191863380636, 0.3493191863380636, 0.35041568390217437, 0.35041568390217437, 0.35041568390217437, 0.3732861432454352, 0.3732861432454352, 0.3732861432454352, 0.2337272169761847, 0.2337272169761847, 0.2337272169761847, 0.24823802287029917, 0.24823802287029917, 0.24823802287029917, 0.2765433614125077, 0.2765433614125077, 0.2765433614125077, 0.18657272588830454, 0.18657272588830454, 0.18657272588830454, 0.1878470438501617, 0.1878470438501617, 0.1878470438501617, 0.18563483760981803, 0.18563483760981803, 0.18563483760981803, 0.24682457963897708, 0.24682457963897708, 0.24682457963897708, 0.20412237040606263, 0.20412237040606263, 0.20412237040606263, 0.18243152540132024, 0.18243152540132024, 0.18243152540132024, 0.205087174411971, 0.205087174411971, 0.205087174411971, 0.46314378479229856, 0.46314378479229856, 0.46314378479229856, 0.3567618599865394, 0.3567618599865394, 0.3567618599865394, 0.17528494783108306, 0.17528494783108306, 0.17528494783108306, 0.1875760599946913, 0.1875760599946913, 0.1875760599946913, 0.1972531313123348, 0.1972531313123348, 0.1972531313123348, 0.18153481436206476, 0.18153481436206476, 0.18153481436206476, 0.19970263109197361, 0.19970263109197361, 0.19970263109197361, 0.19302540097712872, 0.19302540097712872, 0.19302540097712872, 0.0671245939772167, 0.0671245939772167, 0.0671245939772167, 0.09176327410935303, 0.09176327410935303, 0.09176327410935303, 0.07984718765334897, 0.07984718765334897, 0.07984718765334897]}, "mutation_prompt": null}
{"id": "2f2b132a-2e4f-46a7-802e-fc9df581b58f", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12 * dim  # Slightly increased population size\n        self.initial_mutation_factor = 0.9  # Adjusted mutation factor\n        self.crossover_rate = 0.8  # Slightly reduced crossover rate\n        self.mutation_decay = 0.99  # Introduced decay for mutation factor\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        evals = self.population_size\n        mutation_factor = self.initial_mutation_factor\n\n        while evals < self.budget:\n            for i in range(self.population_size):\n                idxs = list(range(self.population_size))\n                idxs.remove(i)\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(a + mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n\n                if evals >= self.budget:\n                    break\n\n            mutation_factor *= self.mutation_decay  # Apply decay to mutation factor\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with Dynamic Parameter Adjustment for Improved Convergence Speed.", "configspace": "", "generation": 24, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d1112af1-4034-4ce4-9891-8dcc1c9ed792", "metadata": {"aucs": [0.6969985460682535, 0.6969985460682535, 0.6969985460682535, 0.7086080684215486, 0.7086080684215486, 0.7086080684215486, 0.7168904152412697, 0.7168904152412697, 0.7168904152412697, 0.5490493868289036, 0.5490493868289036, 0.5490493868289036, 0.5551320490042886, 0.5551320490042886, 0.5551320490042886, 0.5422491229852082, 0.5422491229852082, 0.5422491229852082, 0.12064145139043381, 0.12064145139043381, 0.12064145139043381, 0.11128871233687165, 0.11128871233687165, 0.11128871233687165, 0.10340696647763414, 0.10340696647763414, 0.10340696647763414, 0.09628604454820522, 0.09628604454820522, 0.09628604454820522, 0.10104806195676341, 0.10104806195676341, 0.10104806195676341, 0.12165400157921036, 0.12165400157921036, 0.12165400157921036, 0.9490181760338906, 0.9490181760338906, 0.9490181760338906, 0.9782733486354914, 0.9782733486354914, 0.9782733486354914, 0.9474975824398824, 0.9474975824398824, 0.9474975824398824, 0.351346889274466, 0.351346889274466, 0.351346889274466, 0.31115368418544964, 0.31115368418544964, 0.31115368418544964, 0.2973857698695934, 0.2973857698695934, 0.2973857698695934, 0.5528651436099479, 0.5528651436099479, 0.5528651436099479, 0.5669136426308841, 0.5669136426308841, 0.5669136426308841, 0.5914210796464217, 0.5914210796464217, 0.5914210796464217, 0.1794537926561165, 0.1794537926561165, 0.1794537926561165, 0.16166906383817337, 0.16166906383817337, 0.16166906383817337, 0.13795387394883385, 0.13795387394883385, 0.13795387394883385, 0.07727101457557861, 0.07727101457557861, 0.07727101457557861, 0.13046071290658778, 0.13046071290658778, 0.13046071290658778, 0.20117502392133024, 0.20117502392133024, 0.20117502392133024, 0.09690477937788733, 0.09690477937788733, 0.09690477937788733, 0.12554679314617445, 0.12554679314617445, 0.12554679314617445, 0.12132873294364599, 0.12132873294364599, 0.12132873294364599, 0.2253527669286477, 0.2253527669286477, 0.2253527669286477, 0.24048312190382015, 0.24048312190382015, 0.24048312190382015, 0.2614366579342966, 0.2614366579342966, 0.2614366579342966, 0.05481908613288522, 0.05481908613288522, 0.05481908613288522, 0.05263189466430851, 0.05263189466430851, 0.05263189466430851, 0.058119848405522534, 0.058119848405522534, 0.058119848405522534, 0.1688675387577956, 0.1688675387577956, 0.1688675387577956, 0.19772640569640487, 0.19772640569640487, 0.19772640569640487, 0.18164909442330446, 0.18164909442330446, 0.18164909442330446, 0.5062472735084944, 0.5062472735084944, 0.5062472735084944, 0.5498625427404396, 0.5498625427404396, 0.5498625427404396, 0.5279376861730626, 0.5279376861730626, 0.5279376861730626, 0.10528025497482052, 0.10528025497482052, 0.10528025497482052, 0.09473795732513479, 0.09473795732513479, 0.09473795732513479, 0.09839242414299965, 0.09839242414299965, 0.09839242414299965, 0.14854116188317634, 0.14854116188317634, 0.14854116188317634, 0.16627381494807236, 0.16627381494807236, 0.16627381494807236, 0.13292307098549083, 0.13292307098549083, 0.13292307098549083, 0.3493191863380636, 0.3493191863380636, 0.3493191863380636, 0.35041568390217437, 0.35041568390217437, 0.35041568390217437, 0.3732861432454352, 0.3732861432454352, 0.3732861432454352, 0.2337272169761847, 0.2337272169761847, 0.2337272169761847, 0.24823802287029917, 0.24823802287029917, 0.24823802287029917, 0.2765433614125077, 0.2765433614125077, 0.2765433614125077, 0.18657272588830454, 0.18657272588830454, 0.18657272588830454, 0.1878470438501617, 0.1878470438501617, 0.1878470438501617, 0.18563483760981803, 0.18563483760981803, 0.18563483760981803, 0.24682457963897708, 0.24682457963897708, 0.24682457963897708, 0.20412237040606263, 0.20412237040606263, 0.20412237040606263, 0.18243152540132024, 0.18243152540132024, 0.18243152540132024, 0.205087174411971, 0.205087174411971, 0.205087174411971, 0.46314378479229856, 0.46314378479229856, 0.46314378479229856, 0.3567618599865394, 0.3567618599865394, 0.3567618599865394, 0.17528494783108306, 0.17528494783108306, 0.17528494783108306, 0.1875760599946913, 0.1875760599946913, 0.1875760599946913, 0.1972531313123348, 0.1972531313123348, 0.1972531313123348, 0.18153481436206476, 0.18153481436206476, 0.18153481436206476, 0.19970263109197361, 0.19970263109197361, 0.19970263109197361, 0.19302540097712872, 0.19302540097712872, 0.19302540097712872, 0.0671245939772167, 0.0671245939772167, 0.0671245939772167, 0.09176327410935303, 0.09176327410935303, 0.09176327410935303, 0.07984718765334897, 0.07984718765334897, 0.07984718765334897]}, "mutation_prompt": null}
{"id": "0c4be3f5-c65b-4b6c-8e7a-83d6753c1380", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12 * dim  # Slightly increased population size\n        self.initial_mutation_factor = 0.9  # Adjusted mutation factor\n        self.crossover_rate = 0.8  # Slightly reduced crossover rate\n        self.mutation_decay = 0.99  # Introduced decay for mutation factor\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        evals = self.population_size\n        mutation_factor = self.initial_mutation_factor\n\n        while evals < self.budget:\n            for i in range(self.population_size):\n                idxs = list(range(self.population_size))\n                idxs.remove(i)\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(a + mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n\n                if evals >= self.budget:\n                    break\n\n            mutation_factor *= self.mutation_decay  # Apply decay to mutation factor\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with Dynamic Parameter Adjustment for Improved Convergence Speed.", "configspace": "", "generation": 24, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d1112af1-4034-4ce4-9891-8dcc1c9ed792", "metadata": {"aucs": [0.6969985460682535, 0.6969985460682535, 0.6969985460682535, 0.7086080684215486, 0.7086080684215486, 0.7086080684215486, 0.7168904152412697, 0.7168904152412697, 0.7168904152412697, 0.5490493868289036, 0.5490493868289036, 0.5490493868289036, 0.5551320490042886, 0.5551320490042886, 0.5551320490042886, 0.5422491229852082, 0.5422491229852082, 0.5422491229852082, 0.12064145139043381, 0.12064145139043381, 0.12064145139043381, 0.11128871233687165, 0.11128871233687165, 0.11128871233687165, 0.10340696647763414, 0.10340696647763414, 0.10340696647763414, 0.09628604454820522, 0.09628604454820522, 0.09628604454820522, 0.10104806195676341, 0.10104806195676341, 0.10104806195676341, 0.12165400157921036, 0.12165400157921036, 0.12165400157921036, 0.9490181760338906, 0.9490181760338906, 0.9490181760338906, 0.9782733486354914, 0.9782733486354914, 0.9782733486354914, 0.9474975824398824, 0.9474975824398824, 0.9474975824398824, 0.351346889274466, 0.351346889274466, 0.351346889274466, 0.31115368418544964, 0.31115368418544964, 0.31115368418544964, 0.2973857698695934, 0.2973857698695934, 0.2973857698695934, 0.5528651436099479, 0.5528651436099479, 0.5528651436099479, 0.5669136426308841, 0.5669136426308841, 0.5669136426308841, 0.5914210796464217, 0.5914210796464217, 0.5914210796464217, 0.1794537926561165, 0.1794537926561165, 0.1794537926561165, 0.16166906383817337, 0.16166906383817337, 0.16166906383817337, 0.13795387394883385, 0.13795387394883385, 0.13795387394883385, 0.07727101457557861, 0.07727101457557861, 0.07727101457557861, 0.13046071290658778, 0.13046071290658778, 0.13046071290658778, 0.20117502392133024, 0.20117502392133024, 0.20117502392133024, 0.09690477937788733, 0.09690477937788733, 0.09690477937788733, 0.12554679314617445, 0.12554679314617445, 0.12554679314617445, 0.12132873294364599, 0.12132873294364599, 0.12132873294364599, 0.2253527669286477, 0.2253527669286477, 0.2253527669286477, 0.24048312190382015, 0.24048312190382015, 0.24048312190382015, 0.2614366579342966, 0.2614366579342966, 0.2614366579342966, 0.05481908613288522, 0.05481908613288522, 0.05481908613288522, 0.05263189466430851, 0.05263189466430851, 0.05263189466430851, 0.058119848405522534, 0.058119848405522534, 0.058119848405522534, 0.1688675387577956, 0.1688675387577956, 0.1688675387577956, 0.19772640569640487, 0.19772640569640487, 0.19772640569640487, 0.18164909442330446, 0.18164909442330446, 0.18164909442330446, 0.5062472735084944, 0.5062472735084944, 0.5062472735084944, 0.5498625427404396, 0.5498625427404396, 0.5498625427404396, 0.5279376861730626, 0.5279376861730626, 0.5279376861730626, 0.10528025497482052, 0.10528025497482052, 0.10528025497482052, 0.09473795732513479, 0.09473795732513479, 0.09473795732513479, 0.09839242414299965, 0.09839242414299965, 0.09839242414299965, 0.14854116188317634, 0.14854116188317634, 0.14854116188317634, 0.16627381494807236, 0.16627381494807236, 0.16627381494807236, 0.13292307098549083, 0.13292307098549083, 0.13292307098549083, 0.3493191863380636, 0.3493191863380636, 0.3493191863380636, 0.35041568390217437, 0.35041568390217437, 0.35041568390217437, 0.3732861432454352, 0.3732861432454352, 0.3732861432454352, 0.2337272169761847, 0.2337272169761847, 0.2337272169761847, 0.24823802287029917, 0.24823802287029917, 0.24823802287029917, 0.2765433614125077, 0.2765433614125077, 0.2765433614125077, 0.18657272588830454, 0.18657272588830454, 0.18657272588830454, 0.1878470438501617, 0.1878470438501617, 0.1878470438501617, 0.18563483760981803, 0.18563483760981803, 0.18563483760981803, 0.24682457963897708, 0.24682457963897708, 0.24682457963897708, 0.20412237040606263, 0.20412237040606263, 0.20412237040606263, 0.18243152540132024, 0.18243152540132024, 0.18243152540132024, 0.205087174411971, 0.205087174411971, 0.205087174411971, 0.46314378479229856, 0.46314378479229856, 0.46314378479229856, 0.3567618599865394, 0.3567618599865394, 0.3567618599865394, 0.17528494783108306, 0.17528494783108306, 0.17528494783108306, 0.1875760599946913, 0.1875760599946913, 0.1875760599946913, 0.1972531313123348, 0.1972531313123348, 0.1972531313123348, 0.18153481436206476, 0.18153481436206476, 0.18153481436206476, 0.19970263109197361, 0.19970263109197361, 0.19970263109197361, 0.19302540097712872, 0.19302540097712872, 0.19302540097712872, 0.0671245939772167, 0.0671245939772167, 0.0671245939772167, 0.09176327410935303, 0.09176327410935303, 0.09176327410935303, 0.07984718765334897, 0.07984718765334897, 0.07984718765334897]}, "mutation_prompt": null}
{"id": "c0cdc825-5898-4f2e-9fb2-144f5ee46d46", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12 * dim  # Slightly increased population size\n        self.initial_mutation_factor = 0.9  # Adjusted mutation factor\n        self.crossover_rate = 0.8  # Slightly reduced crossover rate\n        self.mutation_decay = 0.99  # Introduced decay for mutation factor\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        evals = self.population_size\n        mutation_factor = self.initial_mutation_factor\n\n        while evals < self.budget:\n            for i in range(self.population_size):\n                idxs = list(range(self.population_size))\n                idxs.remove(i)\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(a + mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n\n                if evals >= self.budget:\n                    break\n\n            mutation_factor *= self.mutation_decay  # Apply decay to mutation factor\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with Dynamic Parameter Adjustment for Improved Convergence Speed.", "configspace": "", "generation": 24, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d1112af1-4034-4ce4-9891-8dcc1c9ed792", "metadata": {"aucs": [0.6969985460682535, 0.6969985460682535, 0.6969985460682535, 0.7086080684215486, 0.7086080684215486, 0.7086080684215486, 0.7168904152412697, 0.7168904152412697, 0.7168904152412697, 0.5490493868289036, 0.5490493868289036, 0.5490493868289036, 0.5551320490042886, 0.5551320490042886, 0.5551320490042886, 0.5422491229852082, 0.5422491229852082, 0.5422491229852082, 0.12064145139043381, 0.12064145139043381, 0.12064145139043381, 0.11128871233687165, 0.11128871233687165, 0.11128871233687165, 0.10340696647763414, 0.10340696647763414, 0.10340696647763414, 0.09628604454820522, 0.09628604454820522, 0.09628604454820522, 0.10104806195676341, 0.10104806195676341, 0.10104806195676341, 0.12165400157921036, 0.12165400157921036, 0.12165400157921036, 0.9490181760338906, 0.9490181760338906, 0.9490181760338906, 0.9782733486354914, 0.9782733486354914, 0.9782733486354914, 0.9474975824398824, 0.9474975824398824, 0.9474975824398824, 0.351346889274466, 0.351346889274466, 0.351346889274466, 0.31115368418544964, 0.31115368418544964, 0.31115368418544964, 0.2973857698695934, 0.2973857698695934, 0.2973857698695934, 0.5528651436099479, 0.5528651436099479, 0.5528651436099479, 0.5669136426308841, 0.5669136426308841, 0.5669136426308841, 0.5914210796464217, 0.5914210796464217, 0.5914210796464217, 0.1794537926561165, 0.1794537926561165, 0.1794537926561165, 0.16166906383817337, 0.16166906383817337, 0.16166906383817337, 0.13795387394883385, 0.13795387394883385, 0.13795387394883385, 0.07727101457557861, 0.07727101457557861, 0.07727101457557861, 0.13046071290658778, 0.13046071290658778, 0.13046071290658778, 0.20117502392133024, 0.20117502392133024, 0.20117502392133024, 0.09690477937788733, 0.09690477937788733, 0.09690477937788733, 0.12554679314617445, 0.12554679314617445, 0.12554679314617445, 0.12132873294364599, 0.12132873294364599, 0.12132873294364599, 0.2253527669286477, 0.2253527669286477, 0.2253527669286477, 0.24048312190382015, 0.24048312190382015, 0.24048312190382015, 0.2614366579342966, 0.2614366579342966, 0.2614366579342966, 0.05481908613288522, 0.05481908613288522, 0.05481908613288522, 0.05263189466430851, 0.05263189466430851, 0.05263189466430851, 0.058119848405522534, 0.058119848405522534, 0.058119848405522534, 0.1688675387577956, 0.1688675387577956, 0.1688675387577956, 0.19772640569640487, 0.19772640569640487, 0.19772640569640487, 0.18164909442330446, 0.18164909442330446, 0.18164909442330446, 0.5062472735084944, 0.5062472735084944, 0.5062472735084944, 0.5498625427404396, 0.5498625427404396, 0.5498625427404396, 0.5279376861730626, 0.5279376861730626, 0.5279376861730626, 0.10528025497482052, 0.10528025497482052, 0.10528025497482052, 0.09473795732513479, 0.09473795732513479, 0.09473795732513479, 0.09839242414299965, 0.09839242414299965, 0.09839242414299965, 0.14854116188317634, 0.14854116188317634, 0.14854116188317634, 0.16627381494807236, 0.16627381494807236, 0.16627381494807236, 0.13292307098549083, 0.13292307098549083, 0.13292307098549083, 0.3493191863380636, 0.3493191863380636, 0.3493191863380636, 0.35041568390217437, 0.35041568390217437, 0.35041568390217437, 0.3732861432454352, 0.3732861432454352, 0.3732861432454352, 0.2337272169761847, 0.2337272169761847, 0.2337272169761847, 0.24823802287029917, 0.24823802287029917, 0.24823802287029917, 0.2765433614125077, 0.2765433614125077, 0.2765433614125077, 0.18657272588830454, 0.18657272588830454, 0.18657272588830454, 0.1878470438501617, 0.1878470438501617, 0.1878470438501617, 0.18563483760981803, 0.18563483760981803, 0.18563483760981803, 0.24682457963897708, 0.24682457963897708, 0.24682457963897708, 0.20412237040606263, 0.20412237040606263, 0.20412237040606263, 0.18243152540132024, 0.18243152540132024, 0.18243152540132024, 0.205087174411971, 0.205087174411971, 0.205087174411971, 0.46314378479229856, 0.46314378479229856, 0.46314378479229856, 0.3567618599865394, 0.3567618599865394, 0.3567618599865394, 0.17528494783108306, 0.17528494783108306, 0.17528494783108306, 0.1875760599946913, 0.1875760599946913, 0.1875760599946913, 0.1972531313123348, 0.1972531313123348, 0.1972531313123348, 0.18153481436206476, 0.18153481436206476, 0.18153481436206476, 0.19970263109197361, 0.19970263109197361, 0.19970263109197361, 0.19302540097712872, 0.19302540097712872, 0.19302540097712872, 0.0671245939772167, 0.0671245939772167, 0.0671245939772167, 0.09176327410935303, 0.09176327410935303, 0.09176327410935303, 0.07984718765334897, 0.07984718765334897, 0.07984718765334897]}, "mutation_prompt": null}
{"id": "2af497cf-e06e-431b-9c92-d401e30aee80", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12 * dim  # Slightly increased population size\n        self.initial_mutation_factor = 0.9  # Adjusted mutation factor\n        self.crossover_rate = 0.8  # Slightly reduced crossover rate\n        self.mutation_decay = 0.99  # Introduced decay for mutation factor\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        evals = self.population_size\n        mutation_factor = self.initial_mutation_factor\n\n        while evals < self.budget:\n            for i in range(self.population_size):\n                idxs = list(range(self.population_size))\n                idxs.remove(i)\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(a + mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n\n                if evals >= self.budget:\n                    break\n\n            mutation_factor *= self.mutation_decay  # Apply decay to mutation factor\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with Dynamic Parameter Adjustment for Improved Convergence Speed.", "configspace": "", "generation": 24, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d1112af1-4034-4ce4-9891-8dcc1c9ed792", "metadata": {"aucs": [0.6969985460682535, 0.6969985460682535, 0.6969985460682535, 0.7086080684215486, 0.7086080684215486, 0.7086080684215486, 0.7168904152412697, 0.7168904152412697, 0.7168904152412697, 0.5490493868289036, 0.5490493868289036, 0.5490493868289036, 0.5551320490042886, 0.5551320490042886, 0.5551320490042886, 0.5422491229852082, 0.5422491229852082, 0.5422491229852082, 0.12064145139043381, 0.12064145139043381, 0.12064145139043381, 0.11128871233687165, 0.11128871233687165, 0.11128871233687165, 0.10340696647763414, 0.10340696647763414, 0.10340696647763414, 0.09628604454820522, 0.09628604454820522, 0.09628604454820522, 0.10104806195676341, 0.10104806195676341, 0.10104806195676341, 0.12165400157921036, 0.12165400157921036, 0.12165400157921036, 0.9490181760338906, 0.9490181760338906, 0.9490181760338906, 0.9782733486354914, 0.9782733486354914, 0.9782733486354914, 0.9474975824398824, 0.9474975824398824, 0.9474975824398824, 0.351346889274466, 0.351346889274466, 0.351346889274466, 0.31115368418544964, 0.31115368418544964, 0.31115368418544964, 0.2973857698695934, 0.2973857698695934, 0.2973857698695934, 0.5528651436099479, 0.5528651436099479, 0.5528651436099479, 0.5669136426308841, 0.5669136426308841, 0.5669136426308841, 0.5914210796464217, 0.5914210796464217, 0.5914210796464217, 0.1794537926561165, 0.1794537926561165, 0.1794537926561165, 0.16166906383817337, 0.16166906383817337, 0.16166906383817337, 0.13795387394883385, 0.13795387394883385, 0.13795387394883385, 0.07727101457557861, 0.07727101457557861, 0.07727101457557861, 0.13046071290658778, 0.13046071290658778, 0.13046071290658778, 0.20117502392133024, 0.20117502392133024, 0.20117502392133024, 0.09690477937788733, 0.09690477937788733, 0.09690477937788733, 0.12554679314617445, 0.12554679314617445, 0.12554679314617445, 0.12132873294364599, 0.12132873294364599, 0.12132873294364599, 0.2253527669286477, 0.2253527669286477, 0.2253527669286477, 0.24048312190382015, 0.24048312190382015, 0.24048312190382015, 0.2614366579342966, 0.2614366579342966, 0.2614366579342966, 0.05481908613288522, 0.05481908613288522, 0.05481908613288522, 0.05263189466430851, 0.05263189466430851, 0.05263189466430851, 0.058119848405522534, 0.058119848405522534, 0.058119848405522534, 0.1688675387577956, 0.1688675387577956, 0.1688675387577956, 0.19772640569640487, 0.19772640569640487, 0.19772640569640487, 0.18164909442330446, 0.18164909442330446, 0.18164909442330446, 0.5062472735084944, 0.5062472735084944, 0.5062472735084944, 0.5498625427404396, 0.5498625427404396, 0.5498625427404396, 0.5279376861730626, 0.5279376861730626, 0.5279376861730626, 0.10528025497482052, 0.10528025497482052, 0.10528025497482052, 0.09473795732513479, 0.09473795732513479, 0.09473795732513479, 0.09839242414299965, 0.09839242414299965, 0.09839242414299965, 0.14854116188317634, 0.14854116188317634, 0.14854116188317634, 0.16627381494807236, 0.16627381494807236, 0.16627381494807236, 0.13292307098549083, 0.13292307098549083, 0.13292307098549083, 0.3493191863380636, 0.3493191863380636, 0.3493191863380636, 0.35041568390217437, 0.35041568390217437, 0.35041568390217437, 0.3732861432454352, 0.3732861432454352, 0.3732861432454352, 0.2337272169761847, 0.2337272169761847, 0.2337272169761847, 0.24823802287029917, 0.24823802287029917, 0.24823802287029917, 0.2765433614125077, 0.2765433614125077, 0.2765433614125077, 0.18657272588830454, 0.18657272588830454, 0.18657272588830454, 0.1878470438501617, 0.1878470438501617, 0.1878470438501617, 0.18563483760981803, 0.18563483760981803, 0.18563483760981803, 0.24682457963897708, 0.24682457963897708, 0.24682457963897708, 0.20412237040606263, 0.20412237040606263, 0.20412237040606263, 0.18243152540132024, 0.18243152540132024, 0.18243152540132024, 0.205087174411971, 0.205087174411971, 0.205087174411971, 0.46314378479229856, 0.46314378479229856, 0.46314378479229856, 0.3567618599865394, 0.3567618599865394, 0.3567618599865394, 0.17528494783108306, 0.17528494783108306, 0.17528494783108306, 0.1875760599946913, 0.1875760599946913, 0.1875760599946913, 0.1972531313123348, 0.1972531313123348, 0.1972531313123348, 0.18153481436206476, 0.18153481436206476, 0.18153481436206476, 0.19970263109197361, 0.19970263109197361, 0.19970263109197361, 0.19302540097712872, 0.19302540097712872, 0.19302540097712872, 0.0671245939772167, 0.0671245939772167, 0.0671245939772167, 0.09176327410935303, 0.09176327410935303, 0.09176327410935303, 0.07984718765334897, 0.07984718765334897, 0.07984718765334897]}, "mutation_prompt": null}
{"id": "ff8af0c4-2f7f-4b59-bc32-2dcef367b9ad", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12 * dim  # Slightly increased population size\n        self.initial_mutation_factor = 0.9  # Adjusted mutation factor\n        self.crossover_rate = 0.8  # Slightly reduced crossover rate\n        self.mutation_decay = 0.99  # Introduced decay for mutation factor\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        evals = self.population_size\n        mutation_factor = self.initial_mutation_factor\n\n        while evals < self.budget:\n            for i in range(self.population_size):\n                idxs = list(range(self.population_size))\n                idxs.remove(i)\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(a + mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n\n                if evals >= self.budget:\n                    break\n\n            mutation_factor *= self.mutation_decay  # Apply decay to mutation factor\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with Dynamic Parameter Adjustment for Improved Convergence Speed.", "configspace": "", "generation": 24, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d1112af1-4034-4ce4-9891-8dcc1c9ed792", "metadata": {"aucs": [0.6969985460682535, 0.6969985460682535, 0.6969985460682535, 0.7086080684215486, 0.7086080684215486, 0.7086080684215486, 0.7168904152412697, 0.7168904152412697, 0.7168904152412697, 0.5490493868289036, 0.5490493868289036, 0.5490493868289036, 0.5551320490042886, 0.5551320490042886, 0.5551320490042886, 0.5422491229852082, 0.5422491229852082, 0.5422491229852082, 0.12064145139043381, 0.12064145139043381, 0.12064145139043381, 0.11128871233687165, 0.11128871233687165, 0.11128871233687165, 0.10340696647763414, 0.10340696647763414, 0.10340696647763414, 0.09628604454820522, 0.09628604454820522, 0.09628604454820522, 0.10104806195676341, 0.10104806195676341, 0.10104806195676341, 0.12165400157921036, 0.12165400157921036, 0.12165400157921036, 0.9490181760338906, 0.9490181760338906, 0.9490181760338906, 0.9782733486354914, 0.9782733486354914, 0.9782733486354914, 0.9474975824398824, 0.9474975824398824, 0.9474975824398824, 0.351346889274466, 0.351346889274466, 0.351346889274466, 0.31115368418544964, 0.31115368418544964, 0.31115368418544964, 0.2973857698695934, 0.2973857698695934, 0.2973857698695934, 0.5528651436099479, 0.5528651436099479, 0.5528651436099479, 0.5669136426308841, 0.5669136426308841, 0.5669136426308841, 0.5914210796464217, 0.5914210796464217, 0.5914210796464217, 0.1794537926561165, 0.1794537926561165, 0.1794537926561165, 0.16166906383817337, 0.16166906383817337, 0.16166906383817337, 0.13795387394883385, 0.13795387394883385, 0.13795387394883385, 0.07727101457557861, 0.07727101457557861, 0.07727101457557861, 0.13046071290658778, 0.13046071290658778, 0.13046071290658778, 0.20117502392133024, 0.20117502392133024, 0.20117502392133024, 0.09690477937788733, 0.09690477937788733, 0.09690477937788733, 0.12554679314617445, 0.12554679314617445, 0.12554679314617445, 0.12132873294364599, 0.12132873294364599, 0.12132873294364599, 0.2253527669286477, 0.2253527669286477, 0.2253527669286477, 0.24048312190382015, 0.24048312190382015, 0.24048312190382015, 0.2614366579342966, 0.2614366579342966, 0.2614366579342966, 0.05481908613288522, 0.05481908613288522, 0.05481908613288522, 0.05263189466430851, 0.05263189466430851, 0.05263189466430851, 0.058119848405522534, 0.058119848405522534, 0.058119848405522534, 0.1688675387577956, 0.1688675387577956, 0.1688675387577956, 0.19772640569640487, 0.19772640569640487, 0.19772640569640487, 0.18164909442330446, 0.18164909442330446, 0.18164909442330446, 0.5062472735084944, 0.5062472735084944, 0.5062472735084944, 0.5498625427404396, 0.5498625427404396, 0.5498625427404396, 0.5279376861730626, 0.5279376861730626, 0.5279376861730626, 0.10528025497482052, 0.10528025497482052, 0.10528025497482052, 0.09473795732513479, 0.09473795732513479, 0.09473795732513479, 0.09839242414299965, 0.09839242414299965, 0.09839242414299965, 0.14854116188317634, 0.14854116188317634, 0.14854116188317634, 0.16627381494807236, 0.16627381494807236, 0.16627381494807236, 0.13292307098549083, 0.13292307098549083, 0.13292307098549083, 0.3493191863380636, 0.3493191863380636, 0.3493191863380636, 0.35041568390217437, 0.35041568390217437, 0.35041568390217437, 0.3732861432454352, 0.3732861432454352, 0.3732861432454352, 0.2337272169761847, 0.2337272169761847, 0.2337272169761847, 0.24823802287029917, 0.24823802287029917, 0.24823802287029917, 0.2765433614125077, 0.2765433614125077, 0.2765433614125077, 0.18657272588830454, 0.18657272588830454, 0.18657272588830454, 0.1878470438501617, 0.1878470438501617, 0.1878470438501617, 0.18563483760981803, 0.18563483760981803, 0.18563483760981803, 0.24682457963897708, 0.24682457963897708, 0.24682457963897708, 0.20412237040606263, 0.20412237040606263, 0.20412237040606263, 0.18243152540132024, 0.18243152540132024, 0.18243152540132024, 0.205087174411971, 0.205087174411971, 0.205087174411971, 0.46314378479229856, 0.46314378479229856, 0.46314378479229856, 0.3567618599865394, 0.3567618599865394, 0.3567618599865394, 0.17528494783108306, 0.17528494783108306, 0.17528494783108306, 0.1875760599946913, 0.1875760599946913, 0.1875760599946913, 0.1972531313123348, 0.1972531313123348, 0.1972531313123348, 0.18153481436206476, 0.18153481436206476, 0.18153481436206476, 0.19970263109197361, 0.19970263109197361, 0.19970263109197361, 0.19302540097712872, 0.19302540097712872, 0.19302540097712872, 0.0671245939772167, 0.0671245939772167, 0.0671245939772167, 0.09176327410935303, 0.09176327410935303, 0.09176327410935303, 0.07984718765334897, 0.07984718765334897, 0.07984718765334897]}, "mutation_prompt": null}
{"id": "72b9afb1-8e68-4f0d-8bb6-710461e763d4", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12 * dim  # Slightly increased population size\n        self.initial_mutation_factor = 0.9  # Adjusted mutation factor\n        self.crossover_rate = 0.8  # Slightly reduced crossover rate\n        self.mutation_decay = 0.99  # Introduced decay for mutation factor\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        evals = self.population_size\n        mutation_factor = self.initial_mutation_factor\n\n        while evals < self.budget:\n            for i in range(self.population_size):\n                idxs = list(range(self.population_size))\n                idxs.remove(i)\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(a + mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n\n                if evals >= self.budget:\n                    break\n\n            mutation_factor *= self.mutation_decay  # Apply decay to mutation factor\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with Dynamic Parameter Adjustment for Improved Convergence Speed.", "configspace": "", "generation": 24, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d1112af1-4034-4ce4-9891-8dcc1c9ed792", "metadata": {"aucs": [0.6969985460682535, 0.6969985460682535, 0.6969985460682535, 0.7086080684215486, 0.7086080684215486, 0.7086080684215486, 0.7168904152412697, 0.7168904152412697, 0.7168904152412697, 0.5490493868289036, 0.5490493868289036, 0.5490493868289036, 0.5551320490042886, 0.5551320490042886, 0.5551320490042886, 0.5422491229852082, 0.5422491229852082, 0.5422491229852082, 0.12064145139043381, 0.12064145139043381, 0.12064145139043381, 0.11128871233687165, 0.11128871233687165, 0.11128871233687165, 0.10340696647763414, 0.10340696647763414, 0.10340696647763414, 0.09628604454820522, 0.09628604454820522, 0.09628604454820522, 0.10104806195676341, 0.10104806195676341, 0.10104806195676341, 0.12165400157921036, 0.12165400157921036, 0.12165400157921036, 0.9490181760338906, 0.9490181760338906, 0.9490181760338906, 0.9782733486354914, 0.9782733486354914, 0.9782733486354914, 0.9474975824398824, 0.9474975824398824, 0.9474975824398824, 0.351346889274466, 0.351346889274466, 0.351346889274466, 0.31115368418544964, 0.31115368418544964, 0.31115368418544964, 0.2973857698695934, 0.2973857698695934, 0.2973857698695934, 0.5528651436099479, 0.5528651436099479, 0.5528651436099479, 0.5669136426308841, 0.5669136426308841, 0.5669136426308841, 0.5914210796464217, 0.5914210796464217, 0.5914210796464217, 0.1794537926561165, 0.1794537926561165, 0.1794537926561165, 0.16166906383817337, 0.16166906383817337, 0.16166906383817337, 0.13795387394883385, 0.13795387394883385, 0.13795387394883385, 0.07727101457557861, 0.07727101457557861, 0.07727101457557861, 0.13046071290658778, 0.13046071290658778, 0.13046071290658778, 0.20117502392133024, 0.20117502392133024, 0.20117502392133024, 0.09690477937788733, 0.09690477937788733, 0.09690477937788733, 0.12554679314617445, 0.12554679314617445, 0.12554679314617445, 0.12132873294364599, 0.12132873294364599, 0.12132873294364599, 0.2253527669286477, 0.2253527669286477, 0.2253527669286477, 0.24048312190382015, 0.24048312190382015, 0.24048312190382015, 0.2614366579342966, 0.2614366579342966, 0.2614366579342966, 0.05481908613288522, 0.05481908613288522, 0.05481908613288522, 0.05263189466430851, 0.05263189466430851, 0.05263189466430851, 0.058119848405522534, 0.058119848405522534, 0.058119848405522534, 0.1688675387577956, 0.1688675387577956, 0.1688675387577956, 0.19772640569640487, 0.19772640569640487, 0.19772640569640487, 0.18164909442330446, 0.18164909442330446, 0.18164909442330446, 0.5062472735084944, 0.5062472735084944, 0.5062472735084944, 0.5498625427404396, 0.5498625427404396, 0.5498625427404396, 0.5279376861730626, 0.5279376861730626, 0.5279376861730626, 0.10528025497482052, 0.10528025497482052, 0.10528025497482052, 0.09473795732513479, 0.09473795732513479, 0.09473795732513479, 0.09839242414299965, 0.09839242414299965, 0.09839242414299965, 0.14854116188317634, 0.14854116188317634, 0.14854116188317634, 0.16627381494807236, 0.16627381494807236, 0.16627381494807236, 0.13292307098549083, 0.13292307098549083, 0.13292307098549083, 0.3493191863380636, 0.3493191863380636, 0.3493191863380636, 0.35041568390217437, 0.35041568390217437, 0.35041568390217437, 0.3732861432454352, 0.3732861432454352, 0.3732861432454352, 0.2337272169761847, 0.2337272169761847, 0.2337272169761847, 0.24823802287029917, 0.24823802287029917, 0.24823802287029917, 0.2765433614125077, 0.2765433614125077, 0.2765433614125077, 0.18657272588830454, 0.18657272588830454, 0.18657272588830454, 0.1878470438501617, 0.1878470438501617, 0.1878470438501617, 0.18563483760981803, 0.18563483760981803, 0.18563483760981803, 0.24682457963897708, 0.24682457963897708, 0.24682457963897708, 0.20412237040606263, 0.20412237040606263, 0.20412237040606263, 0.18243152540132024, 0.18243152540132024, 0.18243152540132024, 0.205087174411971, 0.205087174411971, 0.205087174411971, 0.46314378479229856, 0.46314378479229856, 0.46314378479229856, 0.3567618599865394, 0.3567618599865394, 0.3567618599865394, 0.17528494783108306, 0.17528494783108306, 0.17528494783108306, 0.1875760599946913, 0.1875760599946913, 0.1875760599946913, 0.1972531313123348, 0.1972531313123348, 0.1972531313123348, 0.18153481436206476, 0.18153481436206476, 0.18153481436206476, 0.19970263109197361, 0.19970263109197361, 0.19970263109197361, 0.19302540097712872, 0.19302540097712872, 0.19302540097712872, 0.0671245939772167, 0.0671245939772167, 0.0671245939772167, 0.09176327410935303, 0.09176327410935303, 0.09176327410935303, 0.07984718765334897, 0.07984718765334897, 0.07984718765334897]}, "mutation_prompt": null}
{"id": "6af33146-69a9-4f91-9a8d-b4361c1fbe88", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12 * dim  # Slightly increased population size\n        self.initial_mutation_factor = 0.9  # Adjusted mutation factor\n        self.crossover_rate = 0.8  # Slightly reduced crossover rate\n        self.mutation_decay = 0.99  # Introduced decay for mutation factor\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        evals = self.population_size\n        mutation_factor = self.initial_mutation_factor\n\n        while evals < self.budget:\n            for i in range(self.population_size):\n                idxs = list(range(self.population_size))\n                idxs.remove(i)\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(a + mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n\n                if evals >= self.budget:\n                    break\n\n            mutation_factor *= self.mutation_decay  # Apply decay to mutation factor\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with Dynamic Parameter Adjustment for Improved Convergence Speed.", "configspace": "", "generation": 24, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d1112af1-4034-4ce4-9891-8dcc1c9ed792", "metadata": {"aucs": [0.6969985460682535, 0.6969985460682535, 0.6969985460682535, 0.7086080684215486, 0.7086080684215486, 0.7086080684215486, 0.7168904152412697, 0.7168904152412697, 0.7168904152412697, 0.5490493868289036, 0.5490493868289036, 0.5490493868289036, 0.5551320490042886, 0.5551320490042886, 0.5551320490042886, 0.5422491229852082, 0.5422491229852082, 0.5422491229852082, 0.12064145139043381, 0.12064145139043381, 0.12064145139043381, 0.11128871233687165, 0.11128871233687165, 0.11128871233687165, 0.10340696647763414, 0.10340696647763414, 0.10340696647763414, 0.09628604454820522, 0.09628604454820522, 0.09628604454820522, 0.10104806195676341, 0.10104806195676341, 0.10104806195676341, 0.12165400157921036, 0.12165400157921036, 0.12165400157921036, 0.9490181760338906, 0.9490181760338906, 0.9490181760338906, 0.9782733486354914, 0.9782733486354914, 0.9782733486354914, 0.9474975824398824, 0.9474975824398824, 0.9474975824398824, 0.351346889274466, 0.351346889274466, 0.351346889274466, 0.31115368418544964, 0.31115368418544964, 0.31115368418544964, 0.2973857698695934, 0.2973857698695934, 0.2973857698695934, 0.5528651436099479, 0.5528651436099479, 0.5528651436099479, 0.5669136426308841, 0.5669136426308841, 0.5669136426308841, 0.5914210796464217, 0.5914210796464217, 0.5914210796464217, 0.1794537926561165, 0.1794537926561165, 0.1794537926561165, 0.16166906383817337, 0.16166906383817337, 0.16166906383817337, 0.13795387394883385, 0.13795387394883385, 0.13795387394883385, 0.07727101457557861, 0.07727101457557861, 0.07727101457557861, 0.13046071290658778, 0.13046071290658778, 0.13046071290658778, 0.20117502392133024, 0.20117502392133024, 0.20117502392133024, 0.09690477937788733, 0.09690477937788733, 0.09690477937788733, 0.12554679314617445, 0.12554679314617445, 0.12554679314617445, 0.12132873294364599, 0.12132873294364599, 0.12132873294364599, 0.2253527669286477, 0.2253527669286477, 0.2253527669286477, 0.24048312190382015, 0.24048312190382015, 0.24048312190382015, 0.2614366579342966, 0.2614366579342966, 0.2614366579342966, 0.05481908613288522, 0.05481908613288522, 0.05481908613288522, 0.05263189466430851, 0.05263189466430851, 0.05263189466430851, 0.058119848405522534, 0.058119848405522534, 0.058119848405522534, 0.1688675387577956, 0.1688675387577956, 0.1688675387577956, 0.19772640569640487, 0.19772640569640487, 0.19772640569640487, 0.18164909442330446, 0.18164909442330446, 0.18164909442330446, 0.5062472735084944, 0.5062472735084944, 0.5062472735084944, 0.5498625427404396, 0.5498625427404396, 0.5498625427404396, 0.5279376861730626, 0.5279376861730626, 0.5279376861730626, 0.10528025497482052, 0.10528025497482052, 0.10528025497482052, 0.09473795732513479, 0.09473795732513479, 0.09473795732513479, 0.09839242414299965, 0.09839242414299965, 0.09839242414299965, 0.14854116188317634, 0.14854116188317634, 0.14854116188317634, 0.16627381494807236, 0.16627381494807236, 0.16627381494807236, 0.13292307098549083, 0.13292307098549083, 0.13292307098549083, 0.3493191863380636, 0.3493191863380636, 0.3493191863380636, 0.35041568390217437, 0.35041568390217437, 0.35041568390217437, 0.3732861432454352, 0.3732861432454352, 0.3732861432454352, 0.2337272169761847, 0.2337272169761847, 0.2337272169761847, 0.24823802287029917, 0.24823802287029917, 0.24823802287029917, 0.2765433614125077, 0.2765433614125077, 0.2765433614125077, 0.18657272588830454, 0.18657272588830454, 0.18657272588830454, 0.1878470438501617, 0.1878470438501617, 0.1878470438501617, 0.18563483760981803, 0.18563483760981803, 0.18563483760981803, 0.24682457963897708, 0.24682457963897708, 0.24682457963897708, 0.20412237040606263, 0.20412237040606263, 0.20412237040606263, 0.18243152540132024, 0.18243152540132024, 0.18243152540132024, 0.205087174411971, 0.205087174411971, 0.205087174411971, 0.46314378479229856, 0.46314378479229856, 0.46314378479229856, 0.3567618599865394, 0.3567618599865394, 0.3567618599865394, 0.17528494783108306, 0.17528494783108306, 0.17528494783108306, 0.1875760599946913, 0.1875760599946913, 0.1875760599946913, 0.1972531313123348, 0.1972531313123348, 0.1972531313123348, 0.18153481436206476, 0.18153481436206476, 0.18153481436206476, 0.19970263109197361, 0.19970263109197361, 0.19970263109197361, 0.19302540097712872, 0.19302540097712872, 0.19302540097712872, 0.0671245939772167, 0.0671245939772167, 0.0671245939772167, 0.09176327410935303, 0.09176327410935303, 0.09176327410935303, 0.07984718765334897, 0.07984718765334897, 0.07984718765334897]}, "mutation_prompt": null}
{"id": "86af4385-7ea0-4a03-a5b1-e1cd879bb4d9", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12 * dim  # Slightly increased population size\n        self.initial_mutation_factor = 0.9  # Adjusted mutation factor\n        self.crossover_rate = 0.8  # Slightly reduced crossover rate\n        self.mutation_decay = 0.99  # Introduced decay for mutation factor\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        evals = self.population_size\n        mutation_factor = self.initial_mutation_factor\n\n        while evals < self.budget:\n            for i in range(self.population_size):\n                idxs = list(range(self.population_size))\n                idxs.remove(i)\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(a + mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n\n                if evals >= self.budget:\n                    break\n\n            mutation_factor *= self.mutation_decay  # Apply decay to mutation factor\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with Dynamic Parameter Adjustment for Improved Convergence Speed.", "configspace": "", "generation": 24, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d1112af1-4034-4ce4-9891-8dcc1c9ed792", "metadata": {"aucs": [0.6969985460682535, 0.6969985460682535, 0.6969985460682535, 0.7086080684215486, 0.7086080684215486, 0.7086080684215486, 0.7168904152412697, 0.7168904152412697, 0.7168904152412697, 0.5490493868289036, 0.5490493868289036, 0.5490493868289036, 0.5551320490042886, 0.5551320490042886, 0.5551320490042886, 0.5422491229852082, 0.5422491229852082, 0.5422491229852082, 0.12064145139043381, 0.12064145139043381, 0.12064145139043381, 0.11128871233687165, 0.11128871233687165, 0.11128871233687165, 0.10340696647763414, 0.10340696647763414, 0.10340696647763414, 0.09628604454820522, 0.09628604454820522, 0.09628604454820522, 0.10104806195676341, 0.10104806195676341, 0.10104806195676341, 0.12165400157921036, 0.12165400157921036, 0.12165400157921036, 0.9490181760338906, 0.9490181760338906, 0.9490181760338906, 0.9782733486354914, 0.9782733486354914, 0.9782733486354914, 0.9474975824398824, 0.9474975824398824, 0.9474975824398824, 0.351346889274466, 0.351346889274466, 0.351346889274466, 0.31115368418544964, 0.31115368418544964, 0.31115368418544964, 0.2973857698695934, 0.2973857698695934, 0.2973857698695934, 0.5528651436099479, 0.5528651436099479, 0.5528651436099479, 0.5669136426308841, 0.5669136426308841, 0.5669136426308841, 0.5914210796464217, 0.5914210796464217, 0.5914210796464217, 0.1794537926561165, 0.1794537926561165, 0.1794537926561165, 0.16166906383817337, 0.16166906383817337, 0.16166906383817337, 0.13795387394883385, 0.13795387394883385, 0.13795387394883385, 0.07727101457557861, 0.07727101457557861, 0.07727101457557861, 0.13046071290658778, 0.13046071290658778, 0.13046071290658778, 0.20117502392133024, 0.20117502392133024, 0.20117502392133024, 0.09690477937788733, 0.09690477937788733, 0.09690477937788733, 0.12554679314617445, 0.12554679314617445, 0.12554679314617445, 0.12132873294364599, 0.12132873294364599, 0.12132873294364599, 0.2253527669286477, 0.2253527669286477, 0.2253527669286477, 0.24048312190382015, 0.24048312190382015, 0.24048312190382015, 0.2614366579342966, 0.2614366579342966, 0.2614366579342966, 0.05481908613288522, 0.05481908613288522, 0.05481908613288522, 0.05263189466430851, 0.05263189466430851, 0.05263189466430851, 0.058119848405522534, 0.058119848405522534, 0.058119848405522534, 0.1688675387577956, 0.1688675387577956, 0.1688675387577956, 0.19772640569640487, 0.19772640569640487, 0.19772640569640487, 0.18164909442330446, 0.18164909442330446, 0.18164909442330446, 0.5062472735084944, 0.5062472735084944, 0.5062472735084944, 0.5498625427404396, 0.5498625427404396, 0.5498625427404396, 0.5279376861730626, 0.5279376861730626, 0.5279376861730626, 0.10528025497482052, 0.10528025497482052, 0.10528025497482052, 0.09473795732513479, 0.09473795732513479, 0.09473795732513479, 0.09839242414299965, 0.09839242414299965, 0.09839242414299965, 0.14854116188317634, 0.14854116188317634, 0.14854116188317634, 0.16627381494807236, 0.16627381494807236, 0.16627381494807236, 0.13292307098549083, 0.13292307098549083, 0.13292307098549083, 0.3493191863380636, 0.3493191863380636, 0.3493191863380636, 0.35041568390217437, 0.35041568390217437, 0.35041568390217437, 0.3732861432454352, 0.3732861432454352, 0.3732861432454352, 0.2337272169761847, 0.2337272169761847, 0.2337272169761847, 0.24823802287029917, 0.24823802287029917, 0.24823802287029917, 0.2765433614125077, 0.2765433614125077, 0.2765433614125077, 0.18657272588830454, 0.18657272588830454, 0.18657272588830454, 0.1878470438501617, 0.1878470438501617, 0.1878470438501617, 0.18563483760981803, 0.18563483760981803, 0.18563483760981803, 0.24682457963897708, 0.24682457963897708, 0.24682457963897708, 0.20412237040606263, 0.20412237040606263, 0.20412237040606263, 0.18243152540132024, 0.18243152540132024, 0.18243152540132024, 0.205087174411971, 0.205087174411971, 0.205087174411971, 0.46314378479229856, 0.46314378479229856, 0.46314378479229856, 0.3567618599865394, 0.3567618599865394, 0.3567618599865394, 0.17528494783108306, 0.17528494783108306, 0.17528494783108306, 0.1875760599946913, 0.1875760599946913, 0.1875760599946913, 0.1972531313123348, 0.1972531313123348, 0.1972531313123348, 0.18153481436206476, 0.18153481436206476, 0.18153481436206476, 0.19970263109197361, 0.19970263109197361, 0.19970263109197361, 0.19302540097712872, 0.19302540097712872, 0.19302540097712872, 0.0671245939772167, 0.0671245939772167, 0.0671245939772167, 0.09176327410935303, 0.09176327410935303, 0.09176327410935303, 0.07984718765334897, 0.07984718765334897, 0.07984718765334897]}, "mutation_prompt": null}
{"id": "6a50184e-ba33-49f9-96ed-7010ad68f2bf", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12 * dim  # Slightly increased population size\n        self.initial_mutation_factor = 0.9  # Adjusted mutation factor\n        self.crossover_rate = 0.8  # Slightly reduced crossover rate\n        self.mutation_decay = 0.99  # Introduced decay for mutation factor\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        evals = self.population_size\n        mutation_factor = self.initial_mutation_factor\n\n        while evals < self.budget:\n            for i in range(self.population_size):\n                idxs = list(range(self.population_size))\n                idxs.remove(i)\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(a + mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n\n                if evals >= self.budget:\n                    break\n\n            mutation_factor *= self.mutation_decay  # Apply decay to mutation factor\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with Dynamic Parameter Adjustment for Improved Convergence Speed.", "configspace": "", "generation": 24, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d1112af1-4034-4ce4-9891-8dcc1c9ed792", "metadata": {"aucs": [0.6969985460682535, 0.6969985460682535, 0.6969985460682535, 0.7086080684215486, 0.7086080684215486, 0.7086080684215486, 0.7168904152412697, 0.7168904152412697, 0.7168904152412697, 0.5490493868289036, 0.5490493868289036, 0.5490493868289036, 0.5551320490042886, 0.5551320490042886, 0.5551320490042886, 0.5422491229852082, 0.5422491229852082, 0.5422491229852082, 0.12064145139043381, 0.12064145139043381, 0.12064145139043381, 0.11128871233687165, 0.11128871233687165, 0.11128871233687165, 0.10340696647763414, 0.10340696647763414, 0.10340696647763414, 0.09628604454820522, 0.09628604454820522, 0.09628604454820522, 0.10104806195676341, 0.10104806195676341, 0.10104806195676341, 0.12165400157921036, 0.12165400157921036, 0.12165400157921036, 0.9490181760338906, 0.9490181760338906, 0.9490181760338906, 0.9782733486354914, 0.9782733486354914, 0.9782733486354914, 0.9474975824398824, 0.9474975824398824, 0.9474975824398824, 0.351346889274466, 0.351346889274466, 0.351346889274466, 0.31115368418544964, 0.31115368418544964, 0.31115368418544964, 0.2973857698695934, 0.2973857698695934, 0.2973857698695934, 0.5528651436099479, 0.5528651436099479, 0.5528651436099479, 0.5669136426308841, 0.5669136426308841, 0.5669136426308841, 0.5914210796464217, 0.5914210796464217, 0.5914210796464217, 0.1794537926561165, 0.1794537926561165, 0.1794537926561165, 0.16166906383817337, 0.16166906383817337, 0.16166906383817337, 0.13795387394883385, 0.13795387394883385, 0.13795387394883385, 0.07727101457557861, 0.07727101457557861, 0.07727101457557861, 0.13046071290658778, 0.13046071290658778, 0.13046071290658778, 0.20117502392133024, 0.20117502392133024, 0.20117502392133024, 0.09690477937788733, 0.09690477937788733, 0.09690477937788733, 0.12554679314617445, 0.12554679314617445, 0.12554679314617445, 0.12132873294364599, 0.12132873294364599, 0.12132873294364599, 0.2253527669286477, 0.2253527669286477, 0.2253527669286477, 0.24048312190382015, 0.24048312190382015, 0.24048312190382015, 0.2614366579342966, 0.2614366579342966, 0.2614366579342966, 0.05481908613288522, 0.05481908613288522, 0.05481908613288522, 0.05263189466430851, 0.05263189466430851, 0.05263189466430851, 0.058119848405522534, 0.058119848405522534, 0.058119848405522534, 0.1688675387577956, 0.1688675387577956, 0.1688675387577956, 0.19772640569640487, 0.19772640569640487, 0.19772640569640487, 0.18164909442330446, 0.18164909442330446, 0.18164909442330446, 0.5062472735084944, 0.5062472735084944, 0.5062472735084944, 0.5498625427404396, 0.5498625427404396, 0.5498625427404396, 0.5279376861730626, 0.5279376861730626, 0.5279376861730626, 0.10528025497482052, 0.10528025497482052, 0.10528025497482052, 0.09473795732513479, 0.09473795732513479, 0.09473795732513479, 0.09839242414299965, 0.09839242414299965, 0.09839242414299965, 0.14854116188317634, 0.14854116188317634, 0.14854116188317634, 0.16627381494807236, 0.16627381494807236, 0.16627381494807236, 0.13292307098549083, 0.13292307098549083, 0.13292307098549083, 0.3493191863380636, 0.3493191863380636, 0.3493191863380636, 0.35041568390217437, 0.35041568390217437, 0.35041568390217437, 0.3732861432454352, 0.3732861432454352, 0.3732861432454352, 0.2337272169761847, 0.2337272169761847, 0.2337272169761847, 0.24823802287029917, 0.24823802287029917, 0.24823802287029917, 0.2765433614125077, 0.2765433614125077, 0.2765433614125077, 0.18657272588830454, 0.18657272588830454, 0.18657272588830454, 0.1878470438501617, 0.1878470438501617, 0.1878470438501617, 0.18563483760981803, 0.18563483760981803, 0.18563483760981803, 0.24682457963897708, 0.24682457963897708, 0.24682457963897708, 0.20412237040606263, 0.20412237040606263, 0.20412237040606263, 0.18243152540132024, 0.18243152540132024, 0.18243152540132024, 0.205087174411971, 0.205087174411971, 0.205087174411971, 0.46314378479229856, 0.46314378479229856, 0.46314378479229856, 0.3567618599865394, 0.3567618599865394, 0.3567618599865394, 0.17528494783108306, 0.17528494783108306, 0.17528494783108306, 0.1875760599946913, 0.1875760599946913, 0.1875760599946913, 0.1972531313123348, 0.1972531313123348, 0.1972531313123348, 0.18153481436206476, 0.18153481436206476, 0.18153481436206476, 0.19970263109197361, 0.19970263109197361, 0.19970263109197361, 0.19302540097712872, 0.19302540097712872, 0.19302540097712872, 0.0671245939772167, 0.0671245939772167, 0.0671245939772167, 0.09176327410935303, 0.09176327410935303, 0.09176327410935303, 0.07984718765334897, 0.07984718765334897, 0.07984718765334897]}, "mutation_prompt": null}
{"id": "68965b49-7223-49ac-a48a-e9098e39b09b", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12 * dim  # Slightly increased population size\n        self.initial_mutation_factor = 0.9  # Adjusted mutation factor\n        self.crossover_rate = 0.8  # Slightly reduced crossover rate\n        self.mutation_decay = 0.99  # Introduced decay for mutation factor\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        evals = self.population_size\n        mutation_factor = self.initial_mutation_factor\n\n        while evals < self.budget:\n            for i in range(self.population_size):\n                idxs = list(range(self.population_size))\n                idxs.remove(i)\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(a + mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n\n                if evals >= self.budget:\n                    break\n\n            mutation_factor *= self.mutation_decay  # Apply decay to mutation factor\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with Dynamic Parameter Adjustment for Improved Convergence Speed.", "configspace": "", "generation": 24, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d1112af1-4034-4ce4-9891-8dcc1c9ed792", "metadata": {"aucs": [0.6969985460682535, 0.6969985460682535, 0.6969985460682535, 0.7086080684215486, 0.7086080684215486, 0.7086080684215486, 0.7168904152412697, 0.7168904152412697, 0.7168904152412697, 0.5490493868289036, 0.5490493868289036, 0.5490493868289036, 0.5551320490042886, 0.5551320490042886, 0.5551320490042886, 0.5422491229852082, 0.5422491229852082, 0.5422491229852082, 0.12064145139043381, 0.12064145139043381, 0.12064145139043381, 0.11128871233687165, 0.11128871233687165, 0.11128871233687165, 0.10340696647763414, 0.10340696647763414, 0.10340696647763414, 0.09628604454820522, 0.09628604454820522, 0.09628604454820522, 0.10104806195676341, 0.10104806195676341, 0.10104806195676341, 0.12165400157921036, 0.12165400157921036, 0.12165400157921036, 0.9490181760338906, 0.9490181760338906, 0.9490181760338906, 0.9782733486354914, 0.9782733486354914, 0.9782733486354914, 0.9474975824398824, 0.9474975824398824, 0.9474975824398824, 0.351346889274466, 0.351346889274466, 0.351346889274466, 0.31115368418544964, 0.31115368418544964, 0.31115368418544964, 0.2973857698695934, 0.2973857698695934, 0.2973857698695934, 0.5528651436099479, 0.5528651436099479, 0.5528651436099479, 0.5669136426308841, 0.5669136426308841, 0.5669136426308841, 0.5914210796464217, 0.5914210796464217, 0.5914210796464217, 0.1794537926561165, 0.1794537926561165, 0.1794537926561165, 0.16166906383817337, 0.16166906383817337, 0.16166906383817337, 0.13795387394883385, 0.13795387394883385, 0.13795387394883385, 0.07727101457557861, 0.07727101457557861, 0.07727101457557861, 0.13046071290658778, 0.13046071290658778, 0.13046071290658778, 0.20117502392133024, 0.20117502392133024, 0.20117502392133024, 0.09690477937788733, 0.09690477937788733, 0.09690477937788733, 0.12554679314617445, 0.12554679314617445, 0.12554679314617445, 0.12132873294364599, 0.12132873294364599, 0.12132873294364599, 0.2253527669286477, 0.2253527669286477, 0.2253527669286477, 0.24048312190382015, 0.24048312190382015, 0.24048312190382015, 0.2614366579342966, 0.2614366579342966, 0.2614366579342966, 0.05481908613288522, 0.05481908613288522, 0.05481908613288522, 0.05263189466430851, 0.05263189466430851, 0.05263189466430851, 0.058119848405522534, 0.058119848405522534, 0.058119848405522534, 0.1688675387577956, 0.1688675387577956, 0.1688675387577956, 0.19772640569640487, 0.19772640569640487, 0.19772640569640487, 0.18164909442330446, 0.18164909442330446, 0.18164909442330446, 0.5062472735084944, 0.5062472735084944, 0.5062472735084944, 0.5498625427404396, 0.5498625427404396, 0.5498625427404396, 0.5279376861730626, 0.5279376861730626, 0.5279376861730626, 0.10528025497482052, 0.10528025497482052, 0.10528025497482052, 0.09473795732513479, 0.09473795732513479, 0.09473795732513479, 0.09839242414299965, 0.09839242414299965, 0.09839242414299965, 0.14854116188317634, 0.14854116188317634, 0.14854116188317634, 0.16627381494807236, 0.16627381494807236, 0.16627381494807236, 0.13292307098549083, 0.13292307098549083, 0.13292307098549083, 0.3493191863380636, 0.3493191863380636, 0.3493191863380636, 0.35041568390217437, 0.35041568390217437, 0.35041568390217437, 0.3732861432454352, 0.3732861432454352, 0.3732861432454352, 0.2337272169761847, 0.2337272169761847, 0.2337272169761847, 0.24823802287029917, 0.24823802287029917, 0.24823802287029917, 0.2765433614125077, 0.2765433614125077, 0.2765433614125077, 0.18657272588830454, 0.18657272588830454, 0.18657272588830454, 0.1878470438501617, 0.1878470438501617, 0.1878470438501617, 0.18563483760981803, 0.18563483760981803, 0.18563483760981803, 0.24682457963897708, 0.24682457963897708, 0.24682457963897708, 0.20412237040606263, 0.20412237040606263, 0.20412237040606263, 0.18243152540132024, 0.18243152540132024, 0.18243152540132024, 0.205087174411971, 0.205087174411971, 0.205087174411971, 0.46314378479229856, 0.46314378479229856, 0.46314378479229856, 0.3567618599865394, 0.3567618599865394, 0.3567618599865394, 0.17528494783108306, 0.17528494783108306, 0.17528494783108306, 0.1875760599946913, 0.1875760599946913, 0.1875760599946913, 0.1972531313123348, 0.1972531313123348, 0.1972531313123348, 0.18153481436206476, 0.18153481436206476, 0.18153481436206476, 0.19970263109197361, 0.19970263109197361, 0.19970263109197361, 0.19302540097712872, 0.19302540097712872, 0.19302540097712872, 0.0671245939772167, 0.0671245939772167, 0.0671245939772167, 0.09176327410935303, 0.09176327410935303, 0.09176327410935303, 0.07984718765334897, 0.07984718765334897, 0.07984718765334897]}, "mutation_prompt": null}
{"id": "ef85b8f7-3dcb-42ad-8a5c-007cbc369eca", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12 * dim  # Slightly increased population size\n        self.initial_mutation_factor = 0.9  # Adjusted mutation factor\n        self.crossover_rate = 0.8  # Slightly reduced crossover rate\n        self.mutation_decay = 0.99  # Introduced decay for mutation factor\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        evals = self.population_size\n        mutation_factor = self.initial_mutation_factor\n\n        while evals < self.budget:\n            for i in range(self.population_size):\n                idxs = list(range(self.population_size))\n                idxs.remove(i)\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(a + mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n\n                if evals >= self.budget:\n                    break\n\n            mutation_factor *= self.mutation_decay  # Apply decay to mutation factor\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with Dynamic Parameter Adjustment for Improved Convergence Speed.", "configspace": "", "generation": 24, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d1112af1-4034-4ce4-9891-8dcc1c9ed792", "metadata": {"aucs": [0.6969985460682535, 0.6969985460682535, 0.6969985460682535, 0.7086080684215486, 0.7086080684215486, 0.7086080684215486, 0.7168904152412697, 0.7168904152412697, 0.7168904152412697, 0.5490493868289036, 0.5490493868289036, 0.5490493868289036, 0.5551320490042886, 0.5551320490042886, 0.5551320490042886, 0.5422491229852082, 0.5422491229852082, 0.5422491229852082, 0.12064145139043381, 0.12064145139043381, 0.12064145139043381, 0.11128871233687165, 0.11128871233687165, 0.11128871233687165, 0.10340696647763414, 0.10340696647763414, 0.10340696647763414, 0.09628604454820522, 0.09628604454820522, 0.09628604454820522, 0.10104806195676341, 0.10104806195676341, 0.10104806195676341, 0.12165400157921036, 0.12165400157921036, 0.12165400157921036, 0.9490181760338906, 0.9490181760338906, 0.9490181760338906, 0.9782733486354914, 0.9782733486354914, 0.9782733486354914, 0.9474975824398824, 0.9474975824398824, 0.9474975824398824, 0.351346889274466, 0.351346889274466, 0.351346889274466, 0.31115368418544964, 0.31115368418544964, 0.31115368418544964, 0.2973857698695934, 0.2973857698695934, 0.2973857698695934, 0.5528651436099479, 0.5528651436099479, 0.5528651436099479, 0.5669136426308841, 0.5669136426308841, 0.5669136426308841, 0.5914210796464217, 0.5914210796464217, 0.5914210796464217, 0.1794537926561165, 0.1794537926561165, 0.1794537926561165, 0.16166906383817337, 0.16166906383817337, 0.16166906383817337, 0.13795387394883385, 0.13795387394883385, 0.13795387394883385, 0.07727101457557861, 0.07727101457557861, 0.07727101457557861, 0.13046071290658778, 0.13046071290658778, 0.13046071290658778, 0.20117502392133024, 0.20117502392133024, 0.20117502392133024, 0.09690477937788733, 0.09690477937788733, 0.09690477937788733, 0.12554679314617445, 0.12554679314617445, 0.12554679314617445, 0.12132873294364599, 0.12132873294364599, 0.12132873294364599, 0.2253527669286477, 0.2253527669286477, 0.2253527669286477, 0.24048312190382015, 0.24048312190382015, 0.24048312190382015, 0.2614366579342966, 0.2614366579342966, 0.2614366579342966, 0.05481908613288522, 0.05481908613288522, 0.05481908613288522, 0.05263189466430851, 0.05263189466430851, 0.05263189466430851, 0.058119848405522534, 0.058119848405522534, 0.058119848405522534, 0.1688675387577956, 0.1688675387577956, 0.1688675387577956, 0.19772640569640487, 0.19772640569640487, 0.19772640569640487, 0.18164909442330446, 0.18164909442330446, 0.18164909442330446, 0.5062472735084944, 0.5062472735084944, 0.5062472735084944, 0.5498625427404396, 0.5498625427404396, 0.5498625427404396, 0.5279376861730626, 0.5279376861730626, 0.5279376861730626, 0.10528025497482052, 0.10528025497482052, 0.10528025497482052, 0.09473795732513479, 0.09473795732513479, 0.09473795732513479, 0.09839242414299965, 0.09839242414299965, 0.09839242414299965, 0.14854116188317634, 0.14854116188317634, 0.14854116188317634, 0.16627381494807236, 0.16627381494807236, 0.16627381494807236, 0.13292307098549083, 0.13292307098549083, 0.13292307098549083, 0.3493191863380636, 0.3493191863380636, 0.3493191863380636, 0.35041568390217437, 0.35041568390217437, 0.35041568390217437, 0.3732861432454352, 0.3732861432454352, 0.3732861432454352, 0.2337272169761847, 0.2337272169761847, 0.2337272169761847, 0.24823802287029917, 0.24823802287029917, 0.24823802287029917, 0.2765433614125077, 0.2765433614125077, 0.2765433614125077, 0.18657272588830454, 0.18657272588830454, 0.18657272588830454, 0.1878470438501617, 0.1878470438501617, 0.1878470438501617, 0.18563483760981803, 0.18563483760981803, 0.18563483760981803, 0.24682457963897708, 0.24682457963897708, 0.24682457963897708, 0.20412237040606263, 0.20412237040606263, 0.20412237040606263, 0.18243152540132024, 0.18243152540132024, 0.18243152540132024, 0.205087174411971, 0.205087174411971, 0.205087174411971, 0.46314378479229856, 0.46314378479229856, 0.46314378479229856, 0.3567618599865394, 0.3567618599865394, 0.3567618599865394, 0.17528494783108306, 0.17528494783108306, 0.17528494783108306, 0.1875760599946913, 0.1875760599946913, 0.1875760599946913, 0.1972531313123348, 0.1972531313123348, 0.1972531313123348, 0.18153481436206476, 0.18153481436206476, 0.18153481436206476, 0.19970263109197361, 0.19970263109197361, 0.19970263109197361, 0.19302540097712872, 0.19302540097712872, 0.19302540097712872, 0.0671245939772167, 0.0671245939772167, 0.0671245939772167, 0.09176327410935303, 0.09176327410935303, 0.09176327410935303, 0.07984718765334897, 0.07984718765334897, 0.07984718765334897]}, "mutation_prompt": null}
{"id": "0220f1da-12f3-4d8c-9800-317bba09af8f", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12 * dim  # Slightly increased population size\n        self.initial_mutation_factor = 0.9  # Adjusted mutation factor\n        self.crossover_rate = 0.8  # Slightly reduced crossover rate\n        self.mutation_decay = 0.99  # Introduced decay for mutation factor\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        evals = self.population_size\n        mutation_factor = self.initial_mutation_factor\n\n        while evals < self.budget:\n            for i in range(self.population_size):\n                idxs = list(range(self.population_size))\n                idxs.remove(i)\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(a + mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n\n                if evals >= self.budget:\n                    break\n\n            mutation_factor *= self.mutation_decay  # Apply decay to mutation factor\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with Dynamic Parameter Adjustment for Improved Convergence Speed.", "configspace": "", "generation": 24, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d1112af1-4034-4ce4-9891-8dcc1c9ed792", "metadata": {"aucs": [0.6969985460682535, 0.6969985460682535, 0.6969985460682535, 0.7086080684215486, 0.7086080684215486, 0.7086080684215486, 0.7168904152412697, 0.7168904152412697, 0.7168904152412697, 0.5490493868289036, 0.5490493868289036, 0.5490493868289036, 0.5551320490042886, 0.5551320490042886, 0.5551320490042886, 0.5422491229852082, 0.5422491229852082, 0.5422491229852082, 0.12064145139043381, 0.12064145139043381, 0.12064145139043381, 0.11128871233687165, 0.11128871233687165, 0.11128871233687165, 0.10340696647763414, 0.10340696647763414, 0.10340696647763414, 0.09628604454820522, 0.09628604454820522, 0.09628604454820522, 0.10104806195676341, 0.10104806195676341, 0.10104806195676341, 0.12165400157921036, 0.12165400157921036, 0.12165400157921036, 0.9490181760338906, 0.9490181760338906, 0.9490181760338906, 0.9782733486354914, 0.9782733486354914, 0.9782733486354914, 0.9474975824398824, 0.9474975824398824, 0.9474975824398824, 0.351346889274466, 0.351346889274466, 0.351346889274466, 0.31115368418544964, 0.31115368418544964, 0.31115368418544964, 0.2973857698695934, 0.2973857698695934, 0.2973857698695934, 0.5528651436099479, 0.5528651436099479, 0.5528651436099479, 0.5669136426308841, 0.5669136426308841, 0.5669136426308841, 0.5914210796464217, 0.5914210796464217, 0.5914210796464217, 0.1794537926561165, 0.1794537926561165, 0.1794537926561165, 0.16166906383817337, 0.16166906383817337, 0.16166906383817337, 0.13795387394883385, 0.13795387394883385, 0.13795387394883385, 0.07727101457557861, 0.07727101457557861, 0.07727101457557861, 0.13046071290658778, 0.13046071290658778, 0.13046071290658778, 0.20117502392133024, 0.20117502392133024, 0.20117502392133024, 0.09690477937788733, 0.09690477937788733, 0.09690477937788733, 0.12554679314617445, 0.12554679314617445, 0.12554679314617445, 0.12132873294364599, 0.12132873294364599, 0.12132873294364599, 0.2253527669286477, 0.2253527669286477, 0.2253527669286477, 0.24048312190382015, 0.24048312190382015, 0.24048312190382015, 0.2614366579342966, 0.2614366579342966, 0.2614366579342966, 0.05481908613288522, 0.05481908613288522, 0.05481908613288522, 0.05263189466430851, 0.05263189466430851, 0.05263189466430851, 0.058119848405522534, 0.058119848405522534, 0.058119848405522534, 0.1688675387577956, 0.1688675387577956, 0.1688675387577956, 0.19772640569640487, 0.19772640569640487, 0.19772640569640487, 0.18164909442330446, 0.18164909442330446, 0.18164909442330446, 0.5062472735084944, 0.5062472735084944, 0.5062472735084944, 0.5498625427404396, 0.5498625427404396, 0.5498625427404396, 0.5279376861730626, 0.5279376861730626, 0.5279376861730626, 0.10528025497482052, 0.10528025497482052, 0.10528025497482052, 0.09473795732513479, 0.09473795732513479, 0.09473795732513479, 0.09839242414299965, 0.09839242414299965, 0.09839242414299965, 0.14854116188317634, 0.14854116188317634, 0.14854116188317634, 0.16627381494807236, 0.16627381494807236, 0.16627381494807236, 0.13292307098549083, 0.13292307098549083, 0.13292307098549083, 0.3493191863380636, 0.3493191863380636, 0.3493191863380636, 0.35041568390217437, 0.35041568390217437, 0.35041568390217437, 0.3732861432454352, 0.3732861432454352, 0.3732861432454352, 0.2337272169761847, 0.2337272169761847, 0.2337272169761847, 0.24823802287029917, 0.24823802287029917, 0.24823802287029917, 0.2765433614125077, 0.2765433614125077, 0.2765433614125077, 0.18657272588830454, 0.18657272588830454, 0.18657272588830454, 0.1878470438501617, 0.1878470438501617, 0.1878470438501617, 0.18563483760981803, 0.18563483760981803, 0.18563483760981803, 0.24682457963897708, 0.24682457963897708, 0.24682457963897708, 0.20412237040606263, 0.20412237040606263, 0.20412237040606263, 0.18243152540132024, 0.18243152540132024, 0.18243152540132024, 0.205087174411971, 0.205087174411971, 0.205087174411971, 0.46314378479229856, 0.46314378479229856, 0.46314378479229856, 0.3567618599865394, 0.3567618599865394, 0.3567618599865394, 0.17528494783108306, 0.17528494783108306, 0.17528494783108306, 0.1875760599946913, 0.1875760599946913, 0.1875760599946913, 0.1972531313123348, 0.1972531313123348, 0.1972531313123348, 0.18153481436206476, 0.18153481436206476, 0.18153481436206476, 0.19970263109197361, 0.19970263109197361, 0.19970263109197361, 0.19302540097712872, 0.19302540097712872, 0.19302540097712872, 0.0671245939772167, 0.0671245939772167, 0.0671245939772167, 0.09176327410935303, 0.09176327410935303, 0.09176327410935303, 0.07984718765334897, 0.07984718765334897, 0.07984718765334897]}, "mutation_prompt": null}
{"id": "033bc227-cbf0-4f12-b10e-754202011c22", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12 * dim  # Slightly increased population size\n        self.initial_mutation_factor = 0.9  # Adjusted mutation factor\n        self.crossover_rate = 0.8  # Slightly reduced crossover rate\n        self.mutation_decay = 0.99  # Introduced decay for mutation factor\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        evals = self.population_size\n        mutation_factor = self.initial_mutation_factor\n\n        while evals < self.budget:\n            for i in range(self.population_size):\n                idxs = list(range(self.population_size))\n                idxs.remove(i)\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(a + mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n\n                if evals >= self.budget:\n                    break\n\n            mutation_factor *= self.mutation_decay  # Apply decay to mutation factor\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with Dynamic Parameter Adjustment for Improved Convergence Speed.", "configspace": "", "generation": 24, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d1112af1-4034-4ce4-9891-8dcc1c9ed792", "metadata": {"aucs": [0.6969985460682535, 0.6969985460682535, 0.6969985460682535, 0.7086080684215486, 0.7086080684215486, 0.7086080684215486, 0.7168904152412697, 0.7168904152412697, 0.7168904152412697, 0.5490493868289036, 0.5490493868289036, 0.5490493868289036, 0.5551320490042886, 0.5551320490042886, 0.5551320490042886, 0.5422491229852082, 0.5422491229852082, 0.5422491229852082, 0.12064145139043381, 0.12064145139043381, 0.12064145139043381, 0.11128871233687165, 0.11128871233687165, 0.11128871233687165, 0.10340696647763414, 0.10340696647763414, 0.10340696647763414, 0.09628604454820522, 0.09628604454820522, 0.09628604454820522, 0.10104806195676341, 0.10104806195676341, 0.10104806195676341, 0.12165400157921036, 0.12165400157921036, 0.12165400157921036, 0.9490181760338906, 0.9490181760338906, 0.9490181760338906, 0.9782733486354914, 0.9782733486354914, 0.9782733486354914, 0.9474975824398824, 0.9474975824398824, 0.9474975824398824, 0.351346889274466, 0.351346889274466, 0.351346889274466, 0.31115368418544964, 0.31115368418544964, 0.31115368418544964, 0.2973857698695934, 0.2973857698695934, 0.2973857698695934, 0.5528651436099479, 0.5528651436099479, 0.5528651436099479, 0.5669136426308841, 0.5669136426308841, 0.5669136426308841, 0.5914210796464217, 0.5914210796464217, 0.5914210796464217, 0.1794537926561165, 0.1794537926561165, 0.1794537926561165, 0.16166906383817337, 0.16166906383817337, 0.16166906383817337, 0.13795387394883385, 0.13795387394883385, 0.13795387394883385, 0.07727101457557861, 0.07727101457557861, 0.07727101457557861, 0.13046071290658778, 0.13046071290658778, 0.13046071290658778, 0.20117502392133024, 0.20117502392133024, 0.20117502392133024, 0.09690477937788733, 0.09690477937788733, 0.09690477937788733, 0.12554679314617445, 0.12554679314617445, 0.12554679314617445, 0.12132873294364599, 0.12132873294364599, 0.12132873294364599, 0.2253527669286477, 0.2253527669286477, 0.2253527669286477, 0.24048312190382015, 0.24048312190382015, 0.24048312190382015, 0.2614366579342966, 0.2614366579342966, 0.2614366579342966, 0.05481908613288522, 0.05481908613288522, 0.05481908613288522, 0.05263189466430851, 0.05263189466430851, 0.05263189466430851, 0.058119848405522534, 0.058119848405522534, 0.058119848405522534, 0.1688675387577956, 0.1688675387577956, 0.1688675387577956, 0.19772640569640487, 0.19772640569640487, 0.19772640569640487, 0.18164909442330446, 0.18164909442330446, 0.18164909442330446, 0.5062472735084944, 0.5062472735084944, 0.5062472735084944, 0.5498625427404396, 0.5498625427404396, 0.5498625427404396, 0.5279376861730626, 0.5279376861730626, 0.5279376861730626, 0.10528025497482052, 0.10528025497482052, 0.10528025497482052, 0.09473795732513479, 0.09473795732513479, 0.09473795732513479, 0.09839242414299965, 0.09839242414299965, 0.09839242414299965, 0.14854116188317634, 0.14854116188317634, 0.14854116188317634, 0.16627381494807236, 0.16627381494807236, 0.16627381494807236, 0.13292307098549083, 0.13292307098549083, 0.13292307098549083, 0.3493191863380636, 0.3493191863380636, 0.3493191863380636, 0.35041568390217437, 0.35041568390217437, 0.35041568390217437, 0.3732861432454352, 0.3732861432454352, 0.3732861432454352, 0.2337272169761847, 0.2337272169761847, 0.2337272169761847, 0.24823802287029917, 0.24823802287029917, 0.24823802287029917, 0.2765433614125077, 0.2765433614125077, 0.2765433614125077, 0.18657272588830454, 0.18657272588830454, 0.18657272588830454, 0.1878470438501617, 0.1878470438501617, 0.1878470438501617, 0.18563483760981803, 0.18563483760981803, 0.18563483760981803, 0.24682457963897708, 0.24682457963897708, 0.24682457963897708, 0.20412237040606263, 0.20412237040606263, 0.20412237040606263, 0.18243152540132024, 0.18243152540132024, 0.18243152540132024, 0.205087174411971, 0.205087174411971, 0.205087174411971, 0.46314378479229856, 0.46314378479229856, 0.46314378479229856, 0.3567618599865394, 0.3567618599865394, 0.3567618599865394, 0.17528494783108306, 0.17528494783108306, 0.17528494783108306, 0.1875760599946913, 0.1875760599946913, 0.1875760599946913, 0.1972531313123348, 0.1972531313123348, 0.1972531313123348, 0.18153481436206476, 0.18153481436206476, 0.18153481436206476, 0.19970263109197361, 0.19970263109197361, 0.19970263109197361, 0.19302540097712872, 0.19302540097712872, 0.19302540097712872, 0.0671245939772167, 0.0671245939772167, 0.0671245939772167, 0.09176327410935303, 0.09176327410935303, 0.09176327410935303, 0.07984718765334897, 0.07984718765334897, 0.07984718765334897]}, "mutation_prompt": null}
{"id": "fa80ae83-2fbd-4fe8-a946-6cf7e18dda60", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12 * dim  # Slightly increased population size\n        self.initial_mutation_factor = 0.9  # Adjusted mutation factor\n        self.crossover_rate = 0.8  # Slightly reduced crossover rate\n        self.mutation_decay = 0.99  # Introduced decay for mutation factor\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        evals = self.population_size\n        mutation_factor = self.initial_mutation_factor\n\n        while evals < self.budget:\n            for i in range(self.population_size):\n                idxs = list(range(self.population_size))\n                idxs.remove(i)\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(a + mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n\n                if evals >= self.budget:\n                    break\n\n            mutation_factor *= self.mutation_decay  # Apply decay to mutation factor\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with Dynamic Parameter Adjustment for Improved Convergence Speed.", "configspace": "", "generation": 24, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d1112af1-4034-4ce4-9891-8dcc1c9ed792", "metadata": {"aucs": [0.6969985460682535, 0.6969985460682535, 0.6969985460682535, 0.7086080684215486, 0.7086080684215486, 0.7086080684215486, 0.7168904152412697, 0.7168904152412697, 0.7168904152412697, 0.5490493868289036, 0.5490493868289036, 0.5490493868289036, 0.5551320490042886, 0.5551320490042886, 0.5551320490042886, 0.5422491229852082, 0.5422491229852082, 0.5422491229852082, 0.12064145139043381, 0.12064145139043381, 0.12064145139043381, 0.11128871233687165, 0.11128871233687165, 0.11128871233687165, 0.10340696647763414, 0.10340696647763414, 0.10340696647763414, 0.09628604454820522, 0.09628604454820522, 0.09628604454820522, 0.10104806195676341, 0.10104806195676341, 0.10104806195676341, 0.12165400157921036, 0.12165400157921036, 0.12165400157921036, 0.9490181760338906, 0.9490181760338906, 0.9490181760338906, 0.9782733486354914, 0.9782733486354914, 0.9782733486354914, 0.9474975824398824, 0.9474975824398824, 0.9474975824398824, 0.351346889274466, 0.351346889274466, 0.351346889274466, 0.31115368418544964, 0.31115368418544964, 0.31115368418544964, 0.2973857698695934, 0.2973857698695934, 0.2973857698695934, 0.5528651436099479, 0.5528651436099479, 0.5528651436099479, 0.5669136426308841, 0.5669136426308841, 0.5669136426308841, 0.5914210796464217, 0.5914210796464217, 0.5914210796464217, 0.1794537926561165, 0.1794537926561165, 0.1794537926561165, 0.16166906383817337, 0.16166906383817337, 0.16166906383817337, 0.13795387394883385, 0.13795387394883385, 0.13795387394883385, 0.07727101457557861, 0.07727101457557861, 0.07727101457557861, 0.13046071290658778, 0.13046071290658778, 0.13046071290658778, 0.20117502392133024, 0.20117502392133024, 0.20117502392133024, 0.09690477937788733, 0.09690477937788733, 0.09690477937788733, 0.12554679314617445, 0.12554679314617445, 0.12554679314617445, 0.12132873294364599, 0.12132873294364599, 0.12132873294364599, 0.2253527669286477, 0.2253527669286477, 0.2253527669286477, 0.24048312190382015, 0.24048312190382015, 0.24048312190382015, 0.2614366579342966, 0.2614366579342966, 0.2614366579342966, 0.05481908613288522, 0.05481908613288522, 0.05481908613288522, 0.05263189466430851, 0.05263189466430851, 0.05263189466430851, 0.058119848405522534, 0.058119848405522534, 0.058119848405522534, 0.1688675387577956, 0.1688675387577956, 0.1688675387577956, 0.19772640569640487, 0.19772640569640487, 0.19772640569640487, 0.18164909442330446, 0.18164909442330446, 0.18164909442330446, 0.5062472735084944, 0.5062472735084944, 0.5062472735084944, 0.5498625427404396, 0.5498625427404396, 0.5498625427404396, 0.5279376861730626, 0.5279376861730626, 0.5279376861730626, 0.10528025497482052, 0.10528025497482052, 0.10528025497482052, 0.09473795732513479, 0.09473795732513479, 0.09473795732513479, 0.09839242414299965, 0.09839242414299965, 0.09839242414299965, 0.14854116188317634, 0.14854116188317634, 0.14854116188317634, 0.16627381494807236, 0.16627381494807236, 0.16627381494807236, 0.13292307098549083, 0.13292307098549083, 0.13292307098549083, 0.3493191863380636, 0.3493191863380636, 0.3493191863380636, 0.35041568390217437, 0.35041568390217437, 0.35041568390217437, 0.3732861432454352, 0.3732861432454352, 0.3732861432454352, 0.2337272169761847, 0.2337272169761847, 0.2337272169761847, 0.24823802287029917, 0.24823802287029917, 0.24823802287029917, 0.2765433614125077, 0.2765433614125077, 0.2765433614125077, 0.18657272588830454, 0.18657272588830454, 0.18657272588830454, 0.1878470438501617, 0.1878470438501617, 0.1878470438501617, 0.18563483760981803, 0.18563483760981803, 0.18563483760981803, 0.24682457963897708, 0.24682457963897708, 0.24682457963897708, 0.20412237040606263, 0.20412237040606263, 0.20412237040606263, 0.18243152540132024, 0.18243152540132024, 0.18243152540132024, 0.205087174411971, 0.205087174411971, 0.205087174411971, 0.46314378479229856, 0.46314378479229856, 0.46314378479229856, 0.3567618599865394, 0.3567618599865394, 0.3567618599865394, 0.17528494783108306, 0.17528494783108306, 0.17528494783108306, 0.1875760599946913, 0.1875760599946913, 0.1875760599946913, 0.1972531313123348, 0.1972531313123348, 0.1972531313123348, 0.18153481436206476, 0.18153481436206476, 0.18153481436206476, 0.19970263109197361, 0.19970263109197361, 0.19970263109197361, 0.19302540097712872, 0.19302540097712872, 0.19302540097712872, 0.0671245939772167, 0.0671245939772167, 0.0671245939772167, 0.09176327410935303, 0.09176327410935303, 0.09176327410935303, 0.07984718765334897, 0.07984718765334897, 0.07984718765334897]}, "mutation_prompt": null}
{"id": "7d632a85-a52e-4a65-8b11-f54a7112f876", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12 * dim  # Slightly increased population size\n        self.initial_mutation_factor = 0.9  # Adjusted mutation factor\n        self.crossover_rate = 0.8  # Slightly reduced crossover rate\n        self.mutation_decay = 0.99  # Introduced decay for mutation factor\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        evals = self.population_size\n        mutation_factor = self.initial_mutation_factor\n\n        while evals < self.budget:\n            for i in range(self.population_size):\n                idxs = list(range(self.population_size))\n                idxs.remove(i)\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(a + mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n\n                if evals >= self.budget:\n                    break\n\n            mutation_factor *= self.mutation_decay  # Apply decay to mutation factor\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with Dynamic Parameter Adjustment for Improved Convergence Speed.", "configspace": "", "generation": 24, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d1112af1-4034-4ce4-9891-8dcc1c9ed792", "metadata": {"aucs": [0.6969985460682535, 0.6969985460682535, 0.6969985460682535, 0.7086080684215486, 0.7086080684215486, 0.7086080684215486, 0.7168904152412697, 0.7168904152412697, 0.7168904152412697, 0.5490493868289036, 0.5490493868289036, 0.5490493868289036, 0.5551320490042886, 0.5551320490042886, 0.5551320490042886, 0.5422491229852082, 0.5422491229852082, 0.5422491229852082, 0.12064145139043381, 0.12064145139043381, 0.12064145139043381, 0.11128871233687165, 0.11128871233687165, 0.11128871233687165, 0.10340696647763414, 0.10340696647763414, 0.10340696647763414, 0.09628604454820522, 0.09628604454820522, 0.09628604454820522, 0.10104806195676341, 0.10104806195676341, 0.10104806195676341, 0.12165400157921036, 0.12165400157921036, 0.12165400157921036, 0.9490181760338906, 0.9490181760338906, 0.9490181760338906, 0.9782733486354914, 0.9782733486354914, 0.9782733486354914, 0.9474975824398824, 0.9474975824398824, 0.9474975824398824, 0.351346889274466, 0.351346889274466, 0.351346889274466, 0.31115368418544964, 0.31115368418544964, 0.31115368418544964, 0.2973857698695934, 0.2973857698695934, 0.2973857698695934, 0.5528651436099479, 0.5528651436099479, 0.5528651436099479, 0.5669136426308841, 0.5669136426308841, 0.5669136426308841, 0.5914210796464217, 0.5914210796464217, 0.5914210796464217, 0.1794537926561165, 0.1794537926561165, 0.1794537926561165, 0.16166906383817337, 0.16166906383817337, 0.16166906383817337, 0.13795387394883385, 0.13795387394883385, 0.13795387394883385, 0.07727101457557861, 0.07727101457557861, 0.07727101457557861, 0.13046071290658778, 0.13046071290658778, 0.13046071290658778, 0.20117502392133024, 0.20117502392133024, 0.20117502392133024, 0.09690477937788733, 0.09690477937788733, 0.09690477937788733, 0.12554679314617445, 0.12554679314617445, 0.12554679314617445, 0.12132873294364599, 0.12132873294364599, 0.12132873294364599, 0.2253527669286477, 0.2253527669286477, 0.2253527669286477, 0.24048312190382015, 0.24048312190382015, 0.24048312190382015, 0.2614366579342966, 0.2614366579342966, 0.2614366579342966, 0.05481908613288522, 0.05481908613288522, 0.05481908613288522, 0.05263189466430851, 0.05263189466430851, 0.05263189466430851, 0.058119848405522534, 0.058119848405522534, 0.058119848405522534, 0.1688675387577956, 0.1688675387577956, 0.1688675387577956, 0.19772640569640487, 0.19772640569640487, 0.19772640569640487, 0.18164909442330446, 0.18164909442330446, 0.18164909442330446, 0.5062472735084944, 0.5062472735084944, 0.5062472735084944, 0.5498625427404396, 0.5498625427404396, 0.5498625427404396, 0.5279376861730626, 0.5279376861730626, 0.5279376861730626, 0.10528025497482052, 0.10528025497482052, 0.10528025497482052, 0.09473795732513479, 0.09473795732513479, 0.09473795732513479, 0.09839242414299965, 0.09839242414299965, 0.09839242414299965, 0.14854116188317634, 0.14854116188317634, 0.14854116188317634, 0.16627381494807236, 0.16627381494807236, 0.16627381494807236, 0.13292307098549083, 0.13292307098549083, 0.13292307098549083, 0.3493191863380636, 0.3493191863380636, 0.3493191863380636, 0.35041568390217437, 0.35041568390217437, 0.35041568390217437, 0.3732861432454352, 0.3732861432454352, 0.3732861432454352, 0.2337272169761847, 0.2337272169761847, 0.2337272169761847, 0.24823802287029917, 0.24823802287029917, 0.24823802287029917, 0.2765433614125077, 0.2765433614125077, 0.2765433614125077, 0.18657272588830454, 0.18657272588830454, 0.18657272588830454, 0.1878470438501617, 0.1878470438501617, 0.1878470438501617, 0.18563483760981803, 0.18563483760981803, 0.18563483760981803, 0.24682457963897708, 0.24682457963897708, 0.24682457963897708, 0.20412237040606263, 0.20412237040606263, 0.20412237040606263, 0.18243152540132024, 0.18243152540132024, 0.18243152540132024, 0.205087174411971, 0.205087174411971, 0.205087174411971, 0.46314378479229856, 0.46314378479229856, 0.46314378479229856, 0.3567618599865394, 0.3567618599865394, 0.3567618599865394, 0.17528494783108306, 0.17528494783108306, 0.17528494783108306, 0.1875760599946913, 0.1875760599946913, 0.1875760599946913, 0.1972531313123348, 0.1972531313123348, 0.1972531313123348, 0.18153481436206476, 0.18153481436206476, 0.18153481436206476, 0.19970263109197361, 0.19970263109197361, 0.19970263109197361, 0.19302540097712872, 0.19302540097712872, 0.19302540097712872, 0.0671245939772167, 0.0671245939772167, 0.0671245939772167, 0.09176327410935303, 0.09176327410935303, 0.09176327410935303, 0.07984718765334897, 0.07984718765334897, 0.07984718765334897]}, "mutation_prompt": null}
{"id": "fcc725fa-8a52-4f83-9c72-6c9758a10956", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12 * dim  # Slightly increased population size\n        self.initial_mutation_factor = 0.9  # Adjusted mutation factor\n        self.crossover_rate = 0.8  # Slightly reduced crossover rate\n        self.mutation_decay = 0.99  # Introduced decay for mutation factor\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        evals = self.population_size\n        mutation_factor = self.initial_mutation_factor\n\n        while evals < self.budget:\n            for i in range(self.population_size):\n                idxs = list(range(self.population_size))\n                idxs.remove(i)\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(a + mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n\n                if evals >= self.budget:\n                    break\n\n            mutation_factor *= self.mutation_decay  # Apply decay to mutation factor\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with Dynamic Parameter Adjustment for Improved Convergence Speed.", "configspace": "", "generation": 24, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d1112af1-4034-4ce4-9891-8dcc1c9ed792", "metadata": {"aucs": [0.6969985460682535, 0.6969985460682535, 0.6969985460682535, 0.7086080684215486, 0.7086080684215486, 0.7086080684215486, 0.7168904152412697, 0.7168904152412697, 0.7168904152412697, 0.5490493868289036, 0.5490493868289036, 0.5490493868289036, 0.5551320490042886, 0.5551320490042886, 0.5551320490042886, 0.5422491229852082, 0.5422491229852082, 0.5422491229852082, 0.12064145139043381, 0.12064145139043381, 0.12064145139043381, 0.11128871233687165, 0.11128871233687165, 0.11128871233687165, 0.10340696647763414, 0.10340696647763414, 0.10340696647763414, 0.09628604454820522, 0.09628604454820522, 0.09628604454820522, 0.10104806195676341, 0.10104806195676341, 0.10104806195676341, 0.12165400157921036, 0.12165400157921036, 0.12165400157921036, 0.9490181760338906, 0.9490181760338906, 0.9490181760338906, 0.9782733486354914, 0.9782733486354914, 0.9782733486354914, 0.9474975824398824, 0.9474975824398824, 0.9474975824398824, 0.351346889274466, 0.351346889274466, 0.351346889274466, 0.31115368418544964, 0.31115368418544964, 0.31115368418544964, 0.2973857698695934, 0.2973857698695934, 0.2973857698695934, 0.5528651436099479, 0.5528651436099479, 0.5528651436099479, 0.5669136426308841, 0.5669136426308841, 0.5669136426308841, 0.5914210796464217, 0.5914210796464217, 0.5914210796464217, 0.1794537926561165, 0.1794537926561165, 0.1794537926561165, 0.16166906383817337, 0.16166906383817337, 0.16166906383817337, 0.13795387394883385, 0.13795387394883385, 0.13795387394883385, 0.07727101457557861, 0.07727101457557861, 0.07727101457557861, 0.13046071290658778, 0.13046071290658778, 0.13046071290658778, 0.20117502392133024, 0.20117502392133024, 0.20117502392133024, 0.09690477937788733, 0.09690477937788733, 0.09690477937788733, 0.12554679314617445, 0.12554679314617445, 0.12554679314617445, 0.12132873294364599, 0.12132873294364599, 0.12132873294364599, 0.2253527669286477, 0.2253527669286477, 0.2253527669286477, 0.24048312190382015, 0.24048312190382015, 0.24048312190382015, 0.2614366579342966, 0.2614366579342966, 0.2614366579342966, 0.05481908613288522, 0.05481908613288522, 0.05481908613288522, 0.05263189466430851, 0.05263189466430851, 0.05263189466430851, 0.058119848405522534, 0.058119848405522534, 0.058119848405522534, 0.1688675387577956, 0.1688675387577956, 0.1688675387577956, 0.19772640569640487, 0.19772640569640487, 0.19772640569640487, 0.18164909442330446, 0.18164909442330446, 0.18164909442330446, 0.5062472735084944, 0.5062472735084944, 0.5062472735084944, 0.5498625427404396, 0.5498625427404396, 0.5498625427404396, 0.5279376861730626, 0.5279376861730626, 0.5279376861730626, 0.10528025497482052, 0.10528025497482052, 0.10528025497482052, 0.09473795732513479, 0.09473795732513479, 0.09473795732513479, 0.09839242414299965, 0.09839242414299965, 0.09839242414299965, 0.14854116188317634, 0.14854116188317634, 0.14854116188317634, 0.16627381494807236, 0.16627381494807236, 0.16627381494807236, 0.13292307098549083, 0.13292307098549083, 0.13292307098549083, 0.3493191863380636, 0.3493191863380636, 0.3493191863380636, 0.35041568390217437, 0.35041568390217437, 0.35041568390217437, 0.3732861432454352, 0.3732861432454352, 0.3732861432454352, 0.2337272169761847, 0.2337272169761847, 0.2337272169761847, 0.24823802287029917, 0.24823802287029917, 0.24823802287029917, 0.2765433614125077, 0.2765433614125077, 0.2765433614125077, 0.18657272588830454, 0.18657272588830454, 0.18657272588830454, 0.1878470438501617, 0.1878470438501617, 0.1878470438501617, 0.18563483760981803, 0.18563483760981803, 0.18563483760981803, 0.24682457963897708, 0.24682457963897708, 0.24682457963897708, 0.20412237040606263, 0.20412237040606263, 0.20412237040606263, 0.18243152540132024, 0.18243152540132024, 0.18243152540132024, 0.205087174411971, 0.205087174411971, 0.205087174411971, 0.46314378479229856, 0.46314378479229856, 0.46314378479229856, 0.3567618599865394, 0.3567618599865394, 0.3567618599865394, 0.17528494783108306, 0.17528494783108306, 0.17528494783108306, 0.1875760599946913, 0.1875760599946913, 0.1875760599946913, 0.1972531313123348, 0.1972531313123348, 0.1972531313123348, 0.18153481436206476, 0.18153481436206476, 0.18153481436206476, 0.19970263109197361, 0.19970263109197361, 0.19970263109197361, 0.19302540097712872, 0.19302540097712872, 0.19302540097712872, 0.0671245939772167, 0.0671245939772167, 0.0671245939772167, 0.09176327410935303, 0.09176327410935303, 0.09176327410935303, 0.07984718765334897, 0.07984718765334897, 0.07984718765334897]}, "mutation_prompt": null}
{"id": "bfdfeb1d-8259-4b01-9ba0-4e0145c3918c", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12 * dim  # Slightly increased population size\n        self.initial_mutation_factor = 0.9  # Adjusted mutation factor\n        self.crossover_rate = 0.8  # Slightly reduced crossover rate\n        self.mutation_decay = 0.99  # Introduced decay for mutation factor\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        evals = self.population_size\n        mutation_factor = self.initial_mutation_factor\n\n        while evals < self.budget:\n            for i in range(self.population_size):\n                idxs = list(range(self.population_size))\n                idxs.remove(i)\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(a + mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n\n                if evals >= self.budget:\n                    break\n\n            mutation_factor *= self.mutation_decay  # Apply decay to mutation factor\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with Dynamic Parameter Adjustment for Improved Convergence Speed.", "configspace": "", "generation": 24, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d1112af1-4034-4ce4-9891-8dcc1c9ed792", "metadata": {"aucs": [0.6969985460682535, 0.6969985460682535, 0.6969985460682535, 0.7086080684215486, 0.7086080684215486, 0.7086080684215486, 0.7168904152412697, 0.7168904152412697, 0.7168904152412697, 0.5490493868289036, 0.5490493868289036, 0.5490493868289036, 0.5551320490042886, 0.5551320490042886, 0.5551320490042886, 0.5422491229852082, 0.5422491229852082, 0.5422491229852082, 0.12064145139043381, 0.12064145139043381, 0.12064145139043381, 0.11128871233687165, 0.11128871233687165, 0.11128871233687165, 0.10340696647763414, 0.10340696647763414, 0.10340696647763414, 0.09628604454820522, 0.09628604454820522, 0.09628604454820522, 0.10104806195676341, 0.10104806195676341, 0.10104806195676341, 0.12165400157921036, 0.12165400157921036, 0.12165400157921036, 0.9490181760338906, 0.9490181760338906, 0.9490181760338906, 0.9782733486354914, 0.9782733486354914, 0.9782733486354914, 0.9474975824398824, 0.9474975824398824, 0.9474975824398824, 0.351346889274466, 0.351346889274466, 0.351346889274466, 0.31115368418544964, 0.31115368418544964, 0.31115368418544964, 0.2973857698695934, 0.2973857698695934, 0.2973857698695934, 0.5528651436099479, 0.5528651436099479, 0.5528651436099479, 0.5669136426308841, 0.5669136426308841, 0.5669136426308841, 0.5914210796464217, 0.5914210796464217, 0.5914210796464217, 0.1794537926561165, 0.1794537926561165, 0.1794537926561165, 0.16166906383817337, 0.16166906383817337, 0.16166906383817337, 0.13795387394883385, 0.13795387394883385, 0.13795387394883385, 0.07727101457557861, 0.07727101457557861, 0.07727101457557861, 0.13046071290658778, 0.13046071290658778, 0.13046071290658778, 0.20117502392133024, 0.20117502392133024, 0.20117502392133024, 0.09690477937788733, 0.09690477937788733, 0.09690477937788733, 0.12554679314617445, 0.12554679314617445, 0.12554679314617445, 0.12132873294364599, 0.12132873294364599, 0.12132873294364599, 0.2253527669286477, 0.2253527669286477, 0.2253527669286477, 0.24048312190382015, 0.24048312190382015, 0.24048312190382015, 0.2614366579342966, 0.2614366579342966, 0.2614366579342966, 0.05481908613288522, 0.05481908613288522, 0.05481908613288522, 0.05263189466430851, 0.05263189466430851, 0.05263189466430851, 0.058119848405522534, 0.058119848405522534, 0.058119848405522534, 0.1688675387577956, 0.1688675387577956, 0.1688675387577956, 0.19772640569640487, 0.19772640569640487, 0.19772640569640487, 0.18164909442330446, 0.18164909442330446, 0.18164909442330446, 0.5062472735084944, 0.5062472735084944, 0.5062472735084944, 0.5498625427404396, 0.5498625427404396, 0.5498625427404396, 0.5279376861730626, 0.5279376861730626, 0.5279376861730626, 0.10528025497482052, 0.10528025497482052, 0.10528025497482052, 0.09473795732513479, 0.09473795732513479, 0.09473795732513479, 0.09839242414299965, 0.09839242414299965, 0.09839242414299965, 0.14854116188317634, 0.14854116188317634, 0.14854116188317634, 0.16627381494807236, 0.16627381494807236, 0.16627381494807236, 0.13292307098549083, 0.13292307098549083, 0.13292307098549083, 0.3493191863380636, 0.3493191863380636, 0.3493191863380636, 0.35041568390217437, 0.35041568390217437, 0.35041568390217437, 0.3732861432454352, 0.3732861432454352, 0.3732861432454352, 0.2337272169761847, 0.2337272169761847, 0.2337272169761847, 0.24823802287029917, 0.24823802287029917, 0.24823802287029917, 0.2765433614125077, 0.2765433614125077, 0.2765433614125077, 0.18657272588830454, 0.18657272588830454, 0.18657272588830454, 0.1878470438501617, 0.1878470438501617, 0.1878470438501617, 0.18563483760981803, 0.18563483760981803, 0.18563483760981803, 0.24682457963897708, 0.24682457963897708, 0.24682457963897708, 0.20412237040606263, 0.20412237040606263, 0.20412237040606263, 0.18243152540132024, 0.18243152540132024, 0.18243152540132024, 0.205087174411971, 0.205087174411971, 0.205087174411971, 0.46314378479229856, 0.46314378479229856, 0.46314378479229856, 0.3567618599865394, 0.3567618599865394, 0.3567618599865394, 0.17528494783108306, 0.17528494783108306, 0.17528494783108306, 0.1875760599946913, 0.1875760599946913, 0.1875760599946913, 0.1972531313123348, 0.1972531313123348, 0.1972531313123348, 0.18153481436206476, 0.18153481436206476, 0.18153481436206476, 0.19970263109197361, 0.19970263109197361, 0.19970263109197361, 0.19302540097712872, 0.19302540097712872, 0.19302540097712872, 0.0671245939772167, 0.0671245939772167, 0.0671245939772167, 0.09176327410935303, 0.09176327410935303, 0.09176327410935303, 0.07984718765334897, 0.07984718765334897, 0.07984718765334897]}, "mutation_prompt": null}
{"id": "e65e1273-8752-4a49-b789-19f16e2c0264", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12 * dim  # Slightly increased population size\n        self.initial_mutation_factor = 0.9  # Adjusted mutation factor\n        self.crossover_rate = 0.8  # Slightly reduced crossover rate\n        self.mutation_decay = 0.99  # Introduced decay for mutation factor\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        evals = self.population_size\n        mutation_factor = self.initial_mutation_factor\n\n        while evals < self.budget:\n            for i in range(self.population_size):\n                idxs = list(range(self.population_size))\n                idxs.remove(i)\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(a + mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n\n                if evals >= self.budget:\n                    break\n\n            mutation_factor *= self.mutation_decay  # Apply decay to mutation factor\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with Dynamic Parameter Adjustment for Improved Convergence Speed.", "configspace": "", "generation": 24, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d1112af1-4034-4ce4-9891-8dcc1c9ed792", "metadata": {"aucs": [0.6969985460682535, 0.6969985460682535, 0.6969985460682535, 0.7086080684215486, 0.7086080684215486, 0.7086080684215486, 0.7168904152412697, 0.7168904152412697, 0.7168904152412697, 0.5490493868289036, 0.5490493868289036, 0.5490493868289036, 0.5551320490042886, 0.5551320490042886, 0.5551320490042886, 0.5422491229852082, 0.5422491229852082, 0.5422491229852082, 0.12064145139043381, 0.12064145139043381, 0.12064145139043381, 0.11128871233687165, 0.11128871233687165, 0.11128871233687165, 0.10340696647763414, 0.10340696647763414, 0.10340696647763414, 0.09628604454820522, 0.09628604454820522, 0.09628604454820522, 0.10104806195676341, 0.10104806195676341, 0.10104806195676341, 0.12165400157921036, 0.12165400157921036, 0.12165400157921036, 0.9490181760338906, 0.9490181760338906, 0.9490181760338906, 0.9782733486354914, 0.9782733486354914, 0.9782733486354914, 0.9474975824398824, 0.9474975824398824, 0.9474975824398824, 0.351346889274466, 0.351346889274466, 0.351346889274466, 0.31115368418544964, 0.31115368418544964, 0.31115368418544964, 0.2973857698695934, 0.2973857698695934, 0.2973857698695934, 0.5528651436099479, 0.5528651436099479, 0.5528651436099479, 0.5669136426308841, 0.5669136426308841, 0.5669136426308841, 0.5914210796464217, 0.5914210796464217, 0.5914210796464217, 0.1794537926561165, 0.1794537926561165, 0.1794537926561165, 0.16166906383817337, 0.16166906383817337, 0.16166906383817337, 0.13795387394883385, 0.13795387394883385, 0.13795387394883385, 0.07727101457557861, 0.07727101457557861, 0.07727101457557861, 0.13046071290658778, 0.13046071290658778, 0.13046071290658778, 0.20117502392133024, 0.20117502392133024, 0.20117502392133024, 0.09690477937788733, 0.09690477937788733, 0.09690477937788733, 0.12554679314617445, 0.12554679314617445, 0.12554679314617445, 0.12132873294364599, 0.12132873294364599, 0.12132873294364599, 0.2253527669286477, 0.2253527669286477, 0.2253527669286477, 0.24048312190382015, 0.24048312190382015, 0.24048312190382015, 0.2614366579342966, 0.2614366579342966, 0.2614366579342966, 0.05481908613288522, 0.05481908613288522, 0.05481908613288522, 0.05263189466430851, 0.05263189466430851, 0.05263189466430851, 0.058119848405522534, 0.058119848405522534, 0.058119848405522534, 0.1688675387577956, 0.1688675387577956, 0.1688675387577956, 0.19772640569640487, 0.19772640569640487, 0.19772640569640487, 0.18164909442330446, 0.18164909442330446, 0.18164909442330446, 0.5062472735084944, 0.5062472735084944, 0.5062472735084944, 0.5498625427404396, 0.5498625427404396, 0.5498625427404396, 0.5279376861730626, 0.5279376861730626, 0.5279376861730626, 0.10528025497482052, 0.10528025497482052, 0.10528025497482052, 0.09473795732513479, 0.09473795732513479, 0.09473795732513479, 0.09839242414299965, 0.09839242414299965, 0.09839242414299965, 0.14854116188317634, 0.14854116188317634, 0.14854116188317634, 0.16627381494807236, 0.16627381494807236, 0.16627381494807236, 0.13292307098549083, 0.13292307098549083, 0.13292307098549083, 0.3493191863380636, 0.3493191863380636, 0.3493191863380636, 0.35041568390217437, 0.35041568390217437, 0.35041568390217437, 0.3732861432454352, 0.3732861432454352, 0.3732861432454352, 0.2337272169761847, 0.2337272169761847, 0.2337272169761847, 0.24823802287029917, 0.24823802287029917, 0.24823802287029917, 0.2765433614125077, 0.2765433614125077, 0.2765433614125077, 0.18657272588830454, 0.18657272588830454, 0.18657272588830454, 0.1878470438501617, 0.1878470438501617, 0.1878470438501617, 0.18563483760981803, 0.18563483760981803, 0.18563483760981803, 0.24682457963897708, 0.24682457963897708, 0.24682457963897708, 0.20412237040606263, 0.20412237040606263, 0.20412237040606263, 0.18243152540132024, 0.18243152540132024, 0.18243152540132024, 0.205087174411971, 0.205087174411971, 0.205087174411971, 0.46314378479229856, 0.46314378479229856, 0.46314378479229856, 0.3567618599865394, 0.3567618599865394, 0.3567618599865394, 0.17528494783108306, 0.17528494783108306, 0.17528494783108306, 0.1875760599946913, 0.1875760599946913, 0.1875760599946913, 0.1972531313123348, 0.1972531313123348, 0.1972531313123348, 0.18153481436206476, 0.18153481436206476, 0.18153481436206476, 0.19970263109197361, 0.19970263109197361, 0.19970263109197361, 0.19302540097712872, 0.19302540097712872, 0.19302540097712872, 0.0671245939772167, 0.0671245939772167, 0.0671245939772167, 0.09176327410935303, 0.09176327410935303, 0.09176327410935303, 0.07984718765334897, 0.07984718765334897, 0.07984718765334897]}, "mutation_prompt": null}
{"id": "af5cda17-b739-4e8c-9e05-9041698c5a3e", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12 * dim  # Slightly increased population size\n        self.initial_mutation_factor = 0.9  # Adjusted mutation factor\n        self.crossover_rate = 0.8  # Slightly reduced crossover rate\n        self.mutation_decay = 0.99  # Introduced decay for mutation factor\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        evals = self.population_size\n        mutation_factor = self.initial_mutation_factor\n\n        while evals < self.budget:\n            for i in range(self.population_size):\n                idxs = list(range(self.population_size))\n                idxs.remove(i)\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(a + mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n\n                if evals >= self.budget:\n                    break\n\n            mutation_factor *= self.mutation_decay  # Apply decay to mutation factor\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with Dynamic Parameter Adjustment for Improved Convergence Speed.", "configspace": "", "generation": 24, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d1112af1-4034-4ce4-9891-8dcc1c9ed792", "metadata": {"aucs": [0.6969985460682535, 0.6969985460682535, 0.6969985460682535, 0.7086080684215486, 0.7086080684215486, 0.7086080684215486, 0.7168904152412697, 0.7168904152412697, 0.7168904152412697, 0.5490493868289036, 0.5490493868289036, 0.5490493868289036, 0.5551320490042886, 0.5551320490042886, 0.5551320490042886, 0.5422491229852082, 0.5422491229852082, 0.5422491229852082, 0.12064145139043381, 0.12064145139043381, 0.12064145139043381, 0.11128871233687165, 0.11128871233687165, 0.11128871233687165, 0.10340696647763414, 0.10340696647763414, 0.10340696647763414, 0.09628604454820522, 0.09628604454820522, 0.09628604454820522, 0.10104806195676341, 0.10104806195676341, 0.10104806195676341, 0.12165400157921036, 0.12165400157921036, 0.12165400157921036, 0.9490181760338906, 0.9490181760338906, 0.9490181760338906, 0.9782733486354914, 0.9782733486354914, 0.9782733486354914, 0.9474975824398824, 0.9474975824398824, 0.9474975824398824, 0.351346889274466, 0.351346889274466, 0.351346889274466, 0.31115368418544964, 0.31115368418544964, 0.31115368418544964, 0.2973857698695934, 0.2973857698695934, 0.2973857698695934, 0.5528651436099479, 0.5528651436099479, 0.5528651436099479, 0.5669136426308841, 0.5669136426308841, 0.5669136426308841, 0.5914210796464217, 0.5914210796464217, 0.5914210796464217, 0.1794537926561165, 0.1794537926561165, 0.1794537926561165, 0.16166906383817337, 0.16166906383817337, 0.16166906383817337, 0.13795387394883385, 0.13795387394883385, 0.13795387394883385, 0.07727101457557861, 0.07727101457557861, 0.07727101457557861, 0.13046071290658778, 0.13046071290658778, 0.13046071290658778, 0.20117502392133024, 0.20117502392133024, 0.20117502392133024, 0.09690477937788733, 0.09690477937788733, 0.09690477937788733, 0.12554679314617445, 0.12554679314617445, 0.12554679314617445, 0.12132873294364599, 0.12132873294364599, 0.12132873294364599, 0.2253527669286477, 0.2253527669286477, 0.2253527669286477, 0.24048312190382015, 0.24048312190382015, 0.24048312190382015, 0.2614366579342966, 0.2614366579342966, 0.2614366579342966, 0.05481908613288522, 0.05481908613288522, 0.05481908613288522, 0.05263189466430851, 0.05263189466430851, 0.05263189466430851, 0.058119848405522534, 0.058119848405522534, 0.058119848405522534, 0.1688675387577956, 0.1688675387577956, 0.1688675387577956, 0.19772640569640487, 0.19772640569640487, 0.19772640569640487, 0.18164909442330446, 0.18164909442330446, 0.18164909442330446, 0.5062472735084944, 0.5062472735084944, 0.5062472735084944, 0.5498625427404396, 0.5498625427404396, 0.5498625427404396, 0.5279376861730626, 0.5279376861730626, 0.5279376861730626, 0.10528025497482052, 0.10528025497482052, 0.10528025497482052, 0.09473795732513479, 0.09473795732513479, 0.09473795732513479, 0.09839242414299965, 0.09839242414299965, 0.09839242414299965, 0.14854116188317634, 0.14854116188317634, 0.14854116188317634, 0.16627381494807236, 0.16627381494807236, 0.16627381494807236, 0.13292307098549083, 0.13292307098549083, 0.13292307098549083, 0.3493191863380636, 0.3493191863380636, 0.3493191863380636, 0.35041568390217437, 0.35041568390217437, 0.35041568390217437, 0.3732861432454352, 0.3732861432454352, 0.3732861432454352, 0.2337272169761847, 0.2337272169761847, 0.2337272169761847, 0.24823802287029917, 0.24823802287029917, 0.24823802287029917, 0.2765433614125077, 0.2765433614125077, 0.2765433614125077, 0.18657272588830454, 0.18657272588830454, 0.18657272588830454, 0.1878470438501617, 0.1878470438501617, 0.1878470438501617, 0.18563483760981803, 0.18563483760981803, 0.18563483760981803, 0.24682457963897708, 0.24682457963897708, 0.24682457963897708, 0.20412237040606263, 0.20412237040606263, 0.20412237040606263, 0.18243152540132024, 0.18243152540132024, 0.18243152540132024, 0.205087174411971, 0.205087174411971, 0.205087174411971, 0.46314378479229856, 0.46314378479229856, 0.46314378479229856, 0.3567618599865394, 0.3567618599865394, 0.3567618599865394, 0.17528494783108306, 0.17528494783108306, 0.17528494783108306, 0.1875760599946913, 0.1875760599946913, 0.1875760599946913, 0.1972531313123348, 0.1972531313123348, 0.1972531313123348, 0.18153481436206476, 0.18153481436206476, 0.18153481436206476, 0.19970263109197361, 0.19970263109197361, 0.19970263109197361, 0.19302540097712872, 0.19302540097712872, 0.19302540097712872, 0.0671245939772167, 0.0671245939772167, 0.0671245939772167, 0.09176327410935303, 0.09176327410935303, 0.09176327410935303, 0.07984718765334897, 0.07984718765334897, 0.07984718765334897]}, "mutation_prompt": null}
{"id": "ce710bf4-2f72-400d-a3c4-2d43014e92eb", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12 * dim  # Slightly increased population size\n        self.initial_mutation_factor = 0.9  # Adjusted mutation factor\n        self.crossover_rate = 0.8  # Slightly reduced crossover rate\n        self.mutation_decay = 0.99  # Introduced decay for mutation factor\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        evals = self.population_size\n        mutation_factor = self.initial_mutation_factor\n\n        while evals < self.budget:\n            for i in range(self.population_size):\n                idxs = list(range(self.population_size))\n                idxs.remove(i)\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(a + mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n\n                if evals >= self.budget:\n                    break\n\n            mutation_factor *= self.mutation_decay  # Apply decay to mutation factor\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with Dynamic Parameter Adjustment for Improved Convergence Speed.", "configspace": "", "generation": 24, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d1112af1-4034-4ce4-9891-8dcc1c9ed792", "metadata": {"aucs": [0.6969985460682535, 0.6969985460682535, 0.6969985460682535, 0.7086080684215486, 0.7086080684215486, 0.7086080684215486, 0.7168904152412697, 0.7168904152412697, 0.7168904152412697, 0.5490493868289036, 0.5490493868289036, 0.5490493868289036, 0.5551320490042886, 0.5551320490042886, 0.5551320490042886, 0.5422491229852082, 0.5422491229852082, 0.5422491229852082, 0.12064145139043381, 0.12064145139043381, 0.12064145139043381, 0.11128871233687165, 0.11128871233687165, 0.11128871233687165, 0.10340696647763414, 0.10340696647763414, 0.10340696647763414, 0.09628604454820522, 0.09628604454820522, 0.09628604454820522, 0.10104806195676341, 0.10104806195676341, 0.10104806195676341, 0.12165400157921036, 0.12165400157921036, 0.12165400157921036, 0.9490181760338906, 0.9490181760338906, 0.9490181760338906, 0.9782733486354914, 0.9782733486354914, 0.9782733486354914, 0.9474975824398824, 0.9474975824398824, 0.9474975824398824, 0.351346889274466, 0.351346889274466, 0.351346889274466, 0.31115368418544964, 0.31115368418544964, 0.31115368418544964, 0.2973857698695934, 0.2973857698695934, 0.2973857698695934, 0.5528651436099479, 0.5528651436099479, 0.5528651436099479, 0.5669136426308841, 0.5669136426308841, 0.5669136426308841, 0.5914210796464217, 0.5914210796464217, 0.5914210796464217, 0.1794537926561165, 0.1794537926561165, 0.1794537926561165, 0.16166906383817337, 0.16166906383817337, 0.16166906383817337, 0.13795387394883385, 0.13795387394883385, 0.13795387394883385, 0.07727101457557861, 0.07727101457557861, 0.07727101457557861, 0.13046071290658778, 0.13046071290658778, 0.13046071290658778, 0.20117502392133024, 0.20117502392133024, 0.20117502392133024, 0.09690477937788733, 0.09690477937788733, 0.09690477937788733, 0.12554679314617445, 0.12554679314617445, 0.12554679314617445, 0.12132873294364599, 0.12132873294364599, 0.12132873294364599, 0.2253527669286477, 0.2253527669286477, 0.2253527669286477, 0.24048312190382015, 0.24048312190382015, 0.24048312190382015, 0.2614366579342966, 0.2614366579342966, 0.2614366579342966, 0.05481908613288522, 0.05481908613288522, 0.05481908613288522, 0.05263189466430851, 0.05263189466430851, 0.05263189466430851, 0.058119848405522534, 0.058119848405522534, 0.058119848405522534, 0.1688675387577956, 0.1688675387577956, 0.1688675387577956, 0.19772640569640487, 0.19772640569640487, 0.19772640569640487, 0.18164909442330446, 0.18164909442330446, 0.18164909442330446, 0.5062472735084944, 0.5062472735084944, 0.5062472735084944, 0.5498625427404396, 0.5498625427404396, 0.5498625427404396, 0.5279376861730626, 0.5279376861730626, 0.5279376861730626, 0.10528025497482052, 0.10528025497482052, 0.10528025497482052, 0.09473795732513479, 0.09473795732513479, 0.09473795732513479, 0.09839242414299965, 0.09839242414299965, 0.09839242414299965, 0.14854116188317634, 0.14854116188317634, 0.14854116188317634, 0.16627381494807236, 0.16627381494807236, 0.16627381494807236, 0.13292307098549083, 0.13292307098549083, 0.13292307098549083, 0.3493191863380636, 0.3493191863380636, 0.3493191863380636, 0.35041568390217437, 0.35041568390217437, 0.35041568390217437, 0.3732861432454352, 0.3732861432454352, 0.3732861432454352, 0.2337272169761847, 0.2337272169761847, 0.2337272169761847, 0.24823802287029917, 0.24823802287029917, 0.24823802287029917, 0.2765433614125077, 0.2765433614125077, 0.2765433614125077, 0.18657272588830454, 0.18657272588830454, 0.18657272588830454, 0.1878470438501617, 0.1878470438501617, 0.1878470438501617, 0.18563483760981803, 0.18563483760981803, 0.18563483760981803, 0.24682457963897708, 0.24682457963897708, 0.24682457963897708, 0.20412237040606263, 0.20412237040606263, 0.20412237040606263, 0.18243152540132024, 0.18243152540132024, 0.18243152540132024, 0.205087174411971, 0.205087174411971, 0.205087174411971, 0.46314378479229856, 0.46314378479229856, 0.46314378479229856, 0.3567618599865394, 0.3567618599865394, 0.3567618599865394, 0.17528494783108306, 0.17528494783108306, 0.17528494783108306, 0.1875760599946913, 0.1875760599946913, 0.1875760599946913, 0.1972531313123348, 0.1972531313123348, 0.1972531313123348, 0.18153481436206476, 0.18153481436206476, 0.18153481436206476, 0.19970263109197361, 0.19970263109197361, 0.19970263109197361, 0.19302540097712872, 0.19302540097712872, 0.19302540097712872, 0.0671245939772167, 0.0671245939772167, 0.0671245939772167, 0.09176327410935303, 0.09176327410935303, 0.09176327410935303, 0.07984718765334897, 0.07984718765334897, 0.07984718765334897]}, "mutation_prompt": null}
{"id": "29dce8bf-0119-436e-b28b-9dfd3c49eac8", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12 * dim  # Slightly increased population size\n        self.initial_mutation_factor = 0.9  # Adjusted mutation factor\n        self.crossover_rate = 0.8  # Slightly reduced crossover rate\n        self.mutation_decay = 0.99  # Introduced decay for mutation factor\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        evals = self.population_size\n        mutation_factor = self.initial_mutation_factor\n\n        while evals < self.budget:\n            for i in range(self.population_size):\n                idxs = list(range(self.population_size))\n                idxs.remove(i)\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(a + mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n\n                if evals >= self.budget:\n                    break\n\n            mutation_factor *= self.mutation_decay  # Apply decay to mutation factor\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with Dynamic Parameter Adjustment for Improved Convergence Speed.", "configspace": "", "generation": 24, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d1112af1-4034-4ce4-9891-8dcc1c9ed792", "metadata": {"aucs": [0.6969985460682535, 0.6969985460682535, 0.6969985460682535, 0.7086080684215486, 0.7086080684215486, 0.7086080684215486, 0.7168904152412697, 0.7168904152412697, 0.7168904152412697, 0.5490493868289036, 0.5490493868289036, 0.5490493868289036, 0.5551320490042886, 0.5551320490042886, 0.5551320490042886, 0.5422491229852082, 0.5422491229852082, 0.5422491229852082, 0.12064145139043381, 0.12064145139043381, 0.12064145139043381, 0.11128871233687165, 0.11128871233687165, 0.11128871233687165, 0.10340696647763414, 0.10340696647763414, 0.10340696647763414, 0.09628604454820522, 0.09628604454820522, 0.09628604454820522, 0.10104806195676341, 0.10104806195676341, 0.10104806195676341, 0.12165400157921036, 0.12165400157921036, 0.12165400157921036, 0.9490181760338906, 0.9490181760338906, 0.9490181760338906, 0.9782733486354914, 0.9782733486354914, 0.9782733486354914, 0.9474975824398824, 0.9474975824398824, 0.9474975824398824, 0.351346889274466, 0.351346889274466, 0.351346889274466, 0.31115368418544964, 0.31115368418544964, 0.31115368418544964, 0.2973857698695934, 0.2973857698695934, 0.2973857698695934, 0.5528651436099479, 0.5528651436099479, 0.5528651436099479, 0.5669136426308841, 0.5669136426308841, 0.5669136426308841, 0.5914210796464217, 0.5914210796464217, 0.5914210796464217, 0.1794537926561165, 0.1794537926561165, 0.1794537926561165, 0.16166906383817337, 0.16166906383817337, 0.16166906383817337, 0.13795387394883385, 0.13795387394883385, 0.13795387394883385, 0.07727101457557861, 0.07727101457557861, 0.07727101457557861, 0.13046071290658778, 0.13046071290658778, 0.13046071290658778, 0.20117502392133024, 0.20117502392133024, 0.20117502392133024, 0.09690477937788733, 0.09690477937788733, 0.09690477937788733, 0.12554679314617445, 0.12554679314617445, 0.12554679314617445, 0.12132873294364599, 0.12132873294364599, 0.12132873294364599, 0.2253527669286477, 0.2253527669286477, 0.2253527669286477, 0.24048312190382015, 0.24048312190382015, 0.24048312190382015, 0.2614366579342966, 0.2614366579342966, 0.2614366579342966, 0.05481908613288522, 0.05481908613288522, 0.05481908613288522, 0.05263189466430851, 0.05263189466430851, 0.05263189466430851, 0.058119848405522534, 0.058119848405522534, 0.058119848405522534, 0.1688675387577956, 0.1688675387577956, 0.1688675387577956, 0.19772640569640487, 0.19772640569640487, 0.19772640569640487, 0.18164909442330446, 0.18164909442330446, 0.18164909442330446, 0.5062472735084944, 0.5062472735084944, 0.5062472735084944, 0.5498625427404396, 0.5498625427404396, 0.5498625427404396, 0.5279376861730626, 0.5279376861730626, 0.5279376861730626, 0.10528025497482052, 0.10528025497482052, 0.10528025497482052, 0.09473795732513479, 0.09473795732513479, 0.09473795732513479, 0.09839242414299965, 0.09839242414299965, 0.09839242414299965, 0.14854116188317634, 0.14854116188317634, 0.14854116188317634, 0.16627381494807236, 0.16627381494807236, 0.16627381494807236, 0.13292307098549083, 0.13292307098549083, 0.13292307098549083, 0.3493191863380636, 0.3493191863380636, 0.3493191863380636, 0.35041568390217437, 0.35041568390217437, 0.35041568390217437, 0.3732861432454352, 0.3732861432454352, 0.3732861432454352, 0.2337272169761847, 0.2337272169761847, 0.2337272169761847, 0.24823802287029917, 0.24823802287029917, 0.24823802287029917, 0.2765433614125077, 0.2765433614125077, 0.2765433614125077, 0.18657272588830454, 0.18657272588830454, 0.18657272588830454, 0.1878470438501617, 0.1878470438501617, 0.1878470438501617, 0.18563483760981803, 0.18563483760981803, 0.18563483760981803, 0.24682457963897708, 0.24682457963897708, 0.24682457963897708, 0.20412237040606263, 0.20412237040606263, 0.20412237040606263, 0.18243152540132024, 0.18243152540132024, 0.18243152540132024, 0.205087174411971, 0.205087174411971, 0.205087174411971, 0.46314378479229856, 0.46314378479229856, 0.46314378479229856, 0.3567618599865394, 0.3567618599865394, 0.3567618599865394, 0.17528494783108306, 0.17528494783108306, 0.17528494783108306, 0.1875760599946913, 0.1875760599946913, 0.1875760599946913, 0.1972531313123348, 0.1972531313123348, 0.1972531313123348, 0.18153481436206476, 0.18153481436206476, 0.18153481436206476, 0.19970263109197361, 0.19970263109197361, 0.19970263109197361, 0.19302540097712872, 0.19302540097712872, 0.19302540097712872, 0.0671245939772167, 0.0671245939772167, 0.0671245939772167, 0.09176327410935303, 0.09176327410935303, 0.09176327410935303, 0.07984718765334897, 0.07984718765334897, 0.07984718765334897]}, "mutation_prompt": null}
{"id": "96c24afb-7bfb-4698-a38e-38e7e50edbab", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12 * dim  # Slightly increased population size\n        self.initial_mutation_factor = 0.9  # Adjusted mutation factor\n        self.crossover_rate = 0.8  # Slightly reduced crossover rate\n        self.mutation_decay = 0.99  # Introduced decay for mutation factor\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        evals = self.population_size\n        mutation_factor = self.initial_mutation_factor\n\n        while evals < self.budget:\n            for i in range(self.population_size):\n                idxs = list(range(self.population_size))\n                idxs.remove(i)\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(a + mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n\n                if evals >= self.budget:\n                    break\n\n            mutation_factor *= self.mutation_decay  # Apply decay to mutation factor\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with Dynamic Parameter Adjustment for Improved Convergence Speed.", "configspace": "", "generation": 24, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d1112af1-4034-4ce4-9891-8dcc1c9ed792", "metadata": {"aucs": [0.6969985460682535, 0.6969985460682535, 0.6969985460682535, 0.7086080684215486, 0.7086080684215486, 0.7086080684215486, 0.7168904152412697, 0.7168904152412697, 0.7168904152412697, 0.5490493868289036, 0.5490493868289036, 0.5490493868289036, 0.5551320490042886, 0.5551320490042886, 0.5551320490042886, 0.5422491229852082, 0.5422491229852082, 0.5422491229852082, 0.12064145139043381, 0.12064145139043381, 0.12064145139043381, 0.11128871233687165, 0.11128871233687165, 0.11128871233687165, 0.10340696647763414, 0.10340696647763414, 0.10340696647763414, 0.09628604454820522, 0.09628604454820522, 0.09628604454820522, 0.10104806195676341, 0.10104806195676341, 0.10104806195676341, 0.12165400157921036, 0.12165400157921036, 0.12165400157921036, 0.9490181760338906, 0.9490181760338906, 0.9490181760338906, 0.9782733486354914, 0.9782733486354914, 0.9782733486354914, 0.9474975824398824, 0.9474975824398824, 0.9474975824398824, 0.351346889274466, 0.351346889274466, 0.351346889274466, 0.31115368418544964, 0.31115368418544964, 0.31115368418544964, 0.2973857698695934, 0.2973857698695934, 0.2973857698695934, 0.5528651436099479, 0.5528651436099479, 0.5528651436099479, 0.5669136426308841, 0.5669136426308841, 0.5669136426308841, 0.5914210796464217, 0.5914210796464217, 0.5914210796464217, 0.1794537926561165, 0.1794537926561165, 0.1794537926561165, 0.16166906383817337, 0.16166906383817337, 0.16166906383817337, 0.13795387394883385, 0.13795387394883385, 0.13795387394883385, 0.07727101457557861, 0.07727101457557861, 0.07727101457557861, 0.13046071290658778, 0.13046071290658778, 0.13046071290658778, 0.20117502392133024, 0.20117502392133024, 0.20117502392133024, 0.09690477937788733, 0.09690477937788733, 0.09690477937788733, 0.12554679314617445, 0.12554679314617445, 0.12554679314617445, 0.12132873294364599, 0.12132873294364599, 0.12132873294364599, 0.2253527669286477, 0.2253527669286477, 0.2253527669286477, 0.24048312190382015, 0.24048312190382015, 0.24048312190382015, 0.2614366579342966, 0.2614366579342966, 0.2614366579342966, 0.05481908613288522, 0.05481908613288522, 0.05481908613288522, 0.05263189466430851, 0.05263189466430851, 0.05263189466430851, 0.058119848405522534, 0.058119848405522534, 0.058119848405522534, 0.1688675387577956, 0.1688675387577956, 0.1688675387577956, 0.19772640569640487, 0.19772640569640487, 0.19772640569640487, 0.18164909442330446, 0.18164909442330446, 0.18164909442330446, 0.5062472735084944, 0.5062472735084944, 0.5062472735084944, 0.5498625427404396, 0.5498625427404396, 0.5498625427404396, 0.5279376861730626, 0.5279376861730626, 0.5279376861730626, 0.10528025497482052, 0.10528025497482052, 0.10528025497482052, 0.09473795732513479, 0.09473795732513479, 0.09473795732513479, 0.09839242414299965, 0.09839242414299965, 0.09839242414299965, 0.14854116188317634, 0.14854116188317634, 0.14854116188317634, 0.16627381494807236, 0.16627381494807236, 0.16627381494807236, 0.13292307098549083, 0.13292307098549083, 0.13292307098549083, 0.3493191863380636, 0.3493191863380636, 0.3493191863380636, 0.35041568390217437, 0.35041568390217437, 0.35041568390217437, 0.3732861432454352, 0.3732861432454352, 0.3732861432454352, 0.2337272169761847, 0.2337272169761847, 0.2337272169761847, 0.24823802287029917, 0.24823802287029917, 0.24823802287029917, 0.2765433614125077, 0.2765433614125077, 0.2765433614125077, 0.18657272588830454, 0.18657272588830454, 0.18657272588830454, 0.1878470438501617, 0.1878470438501617, 0.1878470438501617, 0.18563483760981803, 0.18563483760981803, 0.18563483760981803, 0.24682457963897708, 0.24682457963897708, 0.24682457963897708, 0.20412237040606263, 0.20412237040606263, 0.20412237040606263, 0.18243152540132024, 0.18243152540132024, 0.18243152540132024, 0.205087174411971, 0.205087174411971, 0.205087174411971, 0.46314378479229856, 0.46314378479229856, 0.46314378479229856, 0.3567618599865394, 0.3567618599865394, 0.3567618599865394, 0.17528494783108306, 0.17528494783108306, 0.17528494783108306, 0.1875760599946913, 0.1875760599946913, 0.1875760599946913, 0.1972531313123348, 0.1972531313123348, 0.1972531313123348, 0.18153481436206476, 0.18153481436206476, 0.18153481436206476, 0.19970263109197361, 0.19970263109197361, 0.19970263109197361, 0.19302540097712872, 0.19302540097712872, 0.19302540097712872, 0.0671245939772167, 0.0671245939772167, 0.0671245939772167, 0.09176327410935303, 0.09176327410935303, 0.09176327410935303, 0.07984718765334897, 0.07984718765334897, 0.07984718765334897]}, "mutation_prompt": null}
{"id": "b217f92c-453a-40a4-b219-57457df35128", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12 * dim  # Slightly increased population size\n        self.initial_mutation_factor = 0.9  # Adjusted mutation factor\n        self.crossover_rate = 0.8  # Slightly reduced crossover rate\n        self.mutation_decay = 0.99  # Introduced decay for mutation factor\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        evals = self.population_size\n        mutation_factor = self.initial_mutation_factor\n\n        while evals < self.budget:\n            for i in range(self.population_size):\n                idxs = list(range(self.population_size))\n                idxs.remove(i)\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(a + mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n\n                if evals >= self.budget:\n                    break\n\n            mutation_factor *= self.mutation_decay  # Apply decay to mutation factor\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with Dynamic Parameter Adjustment for Improved Convergence Speed.", "configspace": "", "generation": 24, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d1112af1-4034-4ce4-9891-8dcc1c9ed792", "metadata": {"aucs": [0.6969985460682535, 0.6969985460682535, 0.6969985460682535, 0.7086080684215486, 0.7086080684215486, 0.7086080684215486, 0.7168904152412697, 0.7168904152412697, 0.7168904152412697, 0.5490493868289036, 0.5490493868289036, 0.5490493868289036, 0.5551320490042886, 0.5551320490042886, 0.5551320490042886, 0.5422491229852082, 0.5422491229852082, 0.5422491229852082, 0.12064145139043381, 0.12064145139043381, 0.12064145139043381, 0.11128871233687165, 0.11128871233687165, 0.11128871233687165, 0.10340696647763414, 0.10340696647763414, 0.10340696647763414, 0.09628604454820522, 0.09628604454820522, 0.09628604454820522, 0.10104806195676341, 0.10104806195676341, 0.10104806195676341, 0.12165400157921036, 0.12165400157921036, 0.12165400157921036, 0.9490181760338906, 0.9490181760338906, 0.9490181760338906, 0.9782733486354914, 0.9782733486354914, 0.9782733486354914, 0.9474975824398824, 0.9474975824398824, 0.9474975824398824, 0.351346889274466, 0.351346889274466, 0.351346889274466, 0.31115368418544964, 0.31115368418544964, 0.31115368418544964, 0.2973857698695934, 0.2973857698695934, 0.2973857698695934, 0.5528651436099479, 0.5528651436099479, 0.5528651436099479, 0.5669136426308841, 0.5669136426308841, 0.5669136426308841, 0.5914210796464217, 0.5914210796464217, 0.5914210796464217, 0.1794537926561165, 0.1794537926561165, 0.1794537926561165, 0.16166906383817337, 0.16166906383817337, 0.16166906383817337, 0.13795387394883385, 0.13795387394883385, 0.13795387394883385, 0.07727101457557861, 0.07727101457557861, 0.07727101457557861, 0.13046071290658778, 0.13046071290658778, 0.13046071290658778, 0.20117502392133024, 0.20117502392133024, 0.20117502392133024, 0.09690477937788733, 0.09690477937788733, 0.09690477937788733, 0.12554679314617445, 0.12554679314617445, 0.12554679314617445, 0.12132873294364599, 0.12132873294364599, 0.12132873294364599, 0.2253527669286477, 0.2253527669286477, 0.2253527669286477, 0.24048312190382015, 0.24048312190382015, 0.24048312190382015, 0.2614366579342966, 0.2614366579342966, 0.2614366579342966, 0.05481908613288522, 0.05481908613288522, 0.05481908613288522, 0.05263189466430851, 0.05263189466430851, 0.05263189466430851, 0.058119848405522534, 0.058119848405522534, 0.058119848405522534, 0.1688675387577956, 0.1688675387577956, 0.1688675387577956, 0.19772640569640487, 0.19772640569640487, 0.19772640569640487, 0.18164909442330446, 0.18164909442330446, 0.18164909442330446, 0.5062472735084944, 0.5062472735084944, 0.5062472735084944, 0.5498625427404396, 0.5498625427404396, 0.5498625427404396, 0.5279376861730626, 0.5279376861730626, 0.5279376861730626, 0.10528025497482052, 0.10528025497482052, 0.10528025497482052, 0.09473795732513479, 0.09473795732513479, 0.09473795732513479, 0.09839242414299965, 0.09839242414299965, 0.09839242414299965, 0.14854116188317634, 0.14854116188317634, 0.14854116188317634, 0.16627381494807236, 0.16627381494807236, 0.16627381494807236, 0.13292307098549083, 0.13292307098549083, 0.13292307098549083, 0.3493191863380636, 0.3493191863380636, 0.3493191863380636, 0.35041568390217437, 0.35041568390217437, 0.35041568390217437, 0.3732861432454352, 0.3732861432454352, 0.3732861432454352, 0.2337272169761847, 0.2337272169761847, 0.2337272169761847, 0.24823802287029917, 0.24823802287029917, 0.24823802287029917, 0.2765433614125077, 0.2765433614125077, 0.2765433614125077, 0.18657272588830454, 0.18657272588830454, 0.18657272588830454, 0.1878470438501617, 0.1878470438501617, 0.1878470438501617, 0.18563483760981803, 0.18563483760981803, 0.18563483760981803, 0.24682457963897708, 0.24682457963897708, 0.24682457963897708, 0.20412237040606263, 0.20412237040606263, 0.20412237040606263, 0.18243152540132024, 0.18243152540132024, 0.18243152540132024, 0.205087174411971, 0.205087174411971, 0.205087174411971, 0.46314378479229856, 0.46314378479229856, 0.46314378479229856, 0.3567618599865394, 0.3567618599865394, 0.3567618599865394, 0.17528494783108306, 0.17528494783108306, 0.17528494783108306, 0.1875760599946913, 0.1875760599946913, 0.1875760599946913, 0.1972531313123348, 0.1972531313123348, 0.1972531313123348, 0.18153481436206476, 0.18153481436206476, 0.18153481436206476, 0.19970263109197361, 0.19970263109197361, 0.19970263109197361, 0.19302540097712872, 0.19302540097712872, 0.19302540097712872, 0.0671245939772167, 0.0671245939772167, 0.0671245939772167, 0.09176327410935303, 0.09176327410935303, 0.09176327410935303, 0.07984718765334897, 0.07984718765334897, 0.07984718765334897]}, "mutation_prompt": null}
{"id": "f7f75a7a-4f2e-429d-b1db-8e63bfc27b81", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12 * dim  # Slightly increased population size\n        self.initial_mutation_factor = 0.9  # Adjusted mutation factor\n        self.crossover_rate = 0.8  # Slightly reduced crossover rate\n        self.mutation_decay = 0.99  # Introduced decay for mutation factor\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        evals = self.population_size\n        mutation_factor = self.initial_mutation_factor\n\n        while evals < self.budget:\n            for i in range(self.population_size):\n                idxs = list(range(self.population_size))\n                idxs.remove(i)\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(a + mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n\n                if evals >= self.budget:\n                    break\n\n            mutation_factor *= self.mutation_decay  # Apply decay to mutation factor\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with Dynamic Parameter Adjustment for Improved Convergence Speed.", "configspace": "", "generation": 24, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d1112af1-4034-4ce4-9891-8dcc1c9ed792", "metadata": {"aucs": [0.6969985460682535, 0.6969985460682535, 0.6969985460682535, 0.7086080684215486, 0.7086080684215486, 0.7086080684215486, 0.7168904152412697, 0.7168904152412697, 0.7168904152412697, 0.5490493868289036, 0.5490493868289036, 0.5490493868289036, 0.5551320490042886, 0.5551320490042886, 0.5551320490042886, 0.5422491229852082, 0.5422491229852082, 0.5422491229852082, 0.12064145139043381, 0.12064145139043381, 0.12064145139043381, 0.11128871233687165, 0.11128871233687165, 0.11128871233687165, 0.10340696647763414, 0.10340696647763414, 0.10340696647763414, 0.09628604454820522, 0.09628604454820522, 0.09628604454820522, 0.10104806195676341, 0.10104806195676341, 0.10104806195676341, 0.12165400157921036, 0.12165400157921036, 0.12165400157921036, 0.9490181760338906, 0.9490181760338906, 0.9490181760338906, 0.9782733486354914, 0.9782733486354914, 0.9782733486354914, 0.9474975824398824, 0.9474975824398824, 0.9474975824398824, 0.351346889274466, 0.351346889274466, 0.351346889274466, 0.31115368418544964, 0.31115368418544964, 0.31115368418544964, 0.2973857698695934, 0.2973857698695934, 0.2973857698695934, 0.5528651436099479, 0.5528651436099479, 0.5528651436099479, 0.5669136426308841, 0.5669136426308841, 0.5669136426308841, 0.5914210796464217, 0.5914210796464217, 0.5914210796464217, 0.1794537926561165, 0.1794537926561165, 0.1794537926561165, 0.16166906383817337, 0.16166906383817337, 0.16166906383817337, 0.13795387394883385, 0.13795387394883385, 0.13795387394883385, 0.07727101457557861, 0.07727101457557861, 0.07727101457557861, 0.13046071290658778, 0.13046071290658778, 0.13046071290658778, 0.20117502392133024, 0.20117502392133024, 0.20117502392133024, 0.09690477937788733, 0.09690477937788733, 0.09690477937788733, 0.12554679314617445, 0.12554679314617445, 0.12554679314617445, 0.12132873294364599, 0.12132873294364599, 0.12132873294364599, 0.2253527669286477, 0.2253527669286477, 0.2253527669286477, 0.24048312190382015, 0.24048312190382015, 0.24048312190382015, 0.2614366579342966, 0.2614366579342966, 0.2614366579342966, 0.05481908613288522, 0.05481908613288522, 0.05481908613288522, 0.05263189466430851, 0.05263189466430851, 0.05263189466430851, 0.058119848405522534, 0.058119848405522534, 0.058119848405522534, 0.1688675387577956, 0.1688675387577956, 0.1688675387577956, 0.19772640569640487, 0.19772640569640487, 0.19772640569640487, 0.18164909442330446, 0.18164909442330446, 0.18164909442330446, 0.5062472735084944, 0.5062472735084944, 0.5062472735084944, 0.5498625427404396, 0.5498625427404396, 0.5498625427404396, 0.5279376861730626, 0.5279376861730626, 0.5279376861730626, 0.10528025497482052, 0.10528025497482052, 0.10528025497482052, 0.09473795732513479, 0.09473795732513479, 0.09473795732513479, 0.09839242414299965, 0.09839242414299965, 0.09839242414299965, 0.14854116188317634, 0.14854116188317634, 0.14854116188317634, 0.16627381494807236, 0.16627381494807236, 0.16627381494807236, 0.13292307098549083, 0.13292307098549083, 0.13292307098549083, 0.3493191863380636, 0.3493191863380636, 0.3493191863380636, 0.35041568390217437, 0.35041568390217437, 0.35041568390217437, 0.3732861432454352, 0.3732861432454352, 0.3732861432454352, 0.2337272169761847, 0.2337272169761847, 0.2337272169761847, 0.24823802287029917, 0.24823802287029917, 0.24823802287029917, 0.2765433614125077, 0.2765433614125077, 0.2765433614125077, 0.18657272588830454, 0.18657272588830454, 0.18657272588830454, 0.1878470438501617, 0.1878470438501617, 0.1878470438501617, 0.18563483760981803, 0.18563483760981803, 0.18563483760981803, 0.24682457963897708, 0.24682457963897708, 0.24682457963897708, 0.20412237040606263, 0.20412237040606263, 0.20412237040606263, 0.18243152540132024, 0.18243152540132024, 0.18243152540132024, 0.205087174411971, 0.205087174411971, 0.205087174411971, 0.46314378479229856, 0.46314378479229856, 0.46314378479229856, 0.3567618599865394, 0.3567618599865394, 0.3567618599865394, 0.17528494783108306, 0.17528494783108306, 0.17528494783108306, 0.1875760599946913, 0.1875760599946913, 0.1875760599946913, 0.1972531313123348, 0.1972531313123348, 0.1972531313123348, 0.18153481436206476, 0.18153481436206476, 0.18153481436206476, 0.19970263109197361, 0.19970263109197361, 0.19970263109197361, 0.19302540097712872, 0.19302540097712872, 0.19302540097712872, 0.0671245939772167, 0.0671245939772167, 0.0671245939772167, 0.09176327410935303, 0.09176327410935303, 0.09176327410935303, 0.07984718765334897, 0.07984718765334897, 0.07984718765334897]}, "mutation_prompt": null}
{"id": "3bf2593d-1cfc-4a57-a2bc-a3e8d2fedbfb", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12 * dim  # Slightly increased population size\n        self.initial_mutation_factor = 0.9  # Adjusted mutation factor\n        self.crossover_rate = 0.8  # Slightly reduced crossover rate\n        self.mutation_decay = 0.99  # Introduced decay for mutation factor\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        evals = self.population_size\n        mutation_factor = self.initial_mutation_factor\n\n        while evals < self.budget:\n            for i in range(self.population_size):\n                idxs = list(range(self.population_size))\n                idxs.remove(i)\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(a + mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n\n                if evals >= self.budget:\n                    break\n\n            mutation_factor *= self.mutation_decay  # Apply decay to mutation factor\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with Dynamic Parameter Adjustment for Improved Convergence Speed.", "configspace": "", "generation": 24, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d1112af1-4034-4ce4-9891-8dcc1c9ed792", "metadata": {"aucs": [0.6969985460682535, 0.6969985460682535, 0.6969985460682535, 0.7086080684215486, 0.7086080684215486, 0.7086080684215486, 0.7168904152412697, 0.7168904152412697, 0.7168904152412697, 0.5490493868289036, 0.5490493868289036, 0.5490493868289036, 0.5551320490042886, 0.5551320490042886, 0.5551320490042886, 0.5422491229852082, 0.5422491229852082, 0.5422491229852082, 0.12064145139043381, 0.12064145139043381, 0.12064145139043381, 0.11128871233687165, 0.11128871233687165, 0.11128871233687165, 0.10340696647763414, 0.10340696647763414, 0.10340696647763414, 0.09628604454820522, 0.09628604454820522, 0.09628604454820522, 0.10104806195676341, 0.10104806195676341, 0.10104806195676341, 0.12165400157921036, 0.12165400157921036, 0.12165400157921036, 0.9490181760338906, 0.9490181760338906, 0.9490181760338906, 0.9782733486354914, 0.9782733486354914, 0.9782733486354914, 0.9474975824398824, 0.9474975824398824, 0.9474975824398824, 0.351346889274466, 0.351346889274466, 0.351346889274466, 0.31115368418544964, 0.31115368418544964, 0.31115368418544964, 0.2973857698695934, 0.2973857698695934, 0.2973857698695934, 0.5528651436099479, 0.5528651436099479, 0.5528651436099479, 0.5669136426308841, 0.5669136426308841, 0.5669136426308841, 0.5914210796464217, 0.5914210796464217, 0.5914210796464217, 0.1794537926561165, 0.1794537926561165, 0.1794537926561165, 0.16166906383817337, 0.16166906383817337, 0.16166906383817337, 0.13795387394883385, 0.13795387394883385, 0.13795387394883385, 0.07727101457557861, 0.07727101457557861, 0.07727101457557861, 0.13046071290658778, 0.13046071290658778, 0.13046071290658778, 0.20117502392133024, 0.20117502392133024, 0.20117502392133024, 0.09690477937788733, 0.09690477937788733, 0.09690477937788733, 0.12554679314617445, 0.12554679314617445, 0.12554679314617445, 0.12132873294364599, 0.12132873294364599, 0.12132873294364599, 0.2253527669286477, 0.2253527669286477, 0.2253527669286477, 0.24048312190382015, 0.24048312190382015, 0.24048312190382015, 0.2614366579342966, 0.2614366579342966, 0.2614366579342966, 0.05481908613288522, 0.05481908613288522, 0.05481908613288522, 0.05263189466430851, 0.05263189466430851, 0.05263189466430851, 0.058119848405522534, 0.058119848405522534, 0.058119848405522534, 0.1688675387577956, 0.1688675387577956, 0.1688675387577956, 0.19772640569640487, 0.19772640569640487, 0.19772640569640487, 0.18164909442330446, 0.18164909442330446, 0.18164909442330446, 0.5062472735084944, 0.5062472735084944, 0.5062472735084944, 0.5498625427404396, 0.5498625427404396, 0.5498625427404396, 0.5279376861730626, 0.5279376861730626, 0.5279376861730626, 0.10528025497482052, 0.10528025497482052, 0.10528025497482052, 0.09473795732513479, 0.09473795732513479, 0.09473795732513479, 0.09839242414299965, 0.09839242414299965, 0.09839242414299965, 0.14854116188317634, 0.14854116188317634, 0.14854116188317634, 0.16627381494807236, 0.16627381494807236, 0.16627381494807236, 0.13292307098549083, 0.13292307098549083, 0.13292307098549083, 0.3493191863380636, 0.3493191863380636, 0.3493191863380636, 0.35041568390217437, 0.35041568390217437, 0.35041568390217437, 0.3732861432454352, 0.3732861432454352, 0.3732861432454352, 0.2337272169761847, 0.2337272169761847, 0.2337272169761847, 0.24823802287029917, 0.24823802287029917, 0.24823802287029917, 0.2765433614125077, 0.2765433614125077, 0.2765433614125077, 0.18657272588830454, 0.18657272588830454, 0.18657272588830454, 0.1878470438501617, 0.1878470438501617, 0.1878470438501617, 0.18563483760981803, 0.18563483760981803, 0.18563483760981803, 0.24682457963897708, 0.24682457963897708, 0.24682457963897708, 0.20412237040606263, 0.20412237040606263, 0.20412237040606263, 0.18243152540132024, 0.18243152540132024, 0.18243152540132024, 0.205087174411971, 0.205087174411971, 0.205087174411971, 0.46314378479229856, 0.46314378479229856, 0.46314378479229856, 0.3567618599865394, 0.3567618599865394, 0.3567618599865394, 0.17528494783108306, 0.17528494783108306, 0.17528494783108306, 0.1875760599946913, 0.1875760599946913, 0.1875760599946913, 0.1972531313123348, 0.1972531313123348, 0.1972531313123348, 0.18153481436206476, 0.18153481436206476, 0.18153481436206476, 0.19970263109197361, 0.19970263109197361, 0.19970263109197361, 0.19302540097712872, 0.19302540097712872, 0.19302540097712872, 0.0671245939772167, 0.0671245939772167, 0.0671245939772167, 0.09176327410935303, 0.09176327410935303, 0.09176327410935303, 0.07984718765334897, 0.07984718765334897, 0.07984718765334897]}, "mutation_prompt": null}
{"id": "dd02cee4-6740-4901-b832-ac18b3a2e70b", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12 * dim  # Slightly increased population size\n        self.initial_mutation_factor = 0.9  # Adjusted mutation factor\n        self.crossover_rate = 0.8  # Slightly reduced crossover rate\n        self.mutation_decay = 0.99  # Introduced decay for mutation factor\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        evals = self.population_size\n        mutation_factor = self.initial_mutation_factor\n\n        while evals < self.budget:\n            for i in range(self.population_size):\n                idxs = list(range(self.population_size))\n                idxs.remove(i)\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(a + mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n\n                if evals >= self.budget:\n                    break\n\n            mutation_factor *= self.mutation_decay  # Apply decay to mutation factor\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with Dynamic Parameter Adjustment for Improved Convergence Speed.", "configspace": "", "generation": 24, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d1112af1-4034-4ce4-9891-8dcc1c9ed792", "metadata": {"aucs": [0.6969985460682535, 0.6969985460682535, 0.6969985460682535, 0.7086080684215486, 0.7086080684215486, 0.7086080684215486, 0.7168904152412697, 0.7168904152412697, 0.7168904152412697, 0.5490493868289036, 0.5490493868289036, 0.5490493868289036, 0.5551320490042886, 0.5551320490042886, 0.5551320490042886, 0.5422491229852082, 0.5422491229852082, 0.5422491229852082, 0.12064145139043381, 0.12064145139043381, 0.12064145139043381, 0.11128871233687165, 0.11128871233687165, 0.11128871233687165, 0.10340696647763414, 0.10340696647763414, 0.10340696647763414, 0.09628604454820522, 0.09628604454820522, 0.09628604454820522, 0.10104806195676341, 0.10104806195676341, 0.10104806195676341, 0.12165400157921036, 0.12165400157921036, 0.12165400157921036, 0.9490181760338906, 0.9490181760338906, 0.9490181760338906, 0.9782733486354914, 0.9782733486354914, 0.9782733486354914, 0.9474975824398824, 0.9474975824398824, 0.9474975824398824, 0.351346889274466, 0.351346889274466, 0.351346889274466, 0.31115368418544964, 0.31115368418544964, 0.31115368418544964, 0.2973857698695934, 0.2973857698695934, 0.2973857698695934, 0.5528651436099479, 0.5528651436099479, 0.5528651436099479, 0.5669136426308841, 0.5669136426308841, 0.5669136426308841, 0.5914210796464217, 0.5914210796464217, 0.5914210796464217, 0.1794537926561165, 0.1794537926561165, 0.1794537926561165, 0.16166906383817337, 0.16166906383817337, 0.16166906383817337, 0.13795387394883385, 0.13795387394883385, 0.13795387394883385, 0.07727101457557861, 0.07727101457557861, 0.07727101457557861, 0.13046071290658778, 0.13046071290658778, 0.13046071290658778, 0.20117502392133024, 0.20117502392133024, 0.20117502392133024, 0.09690477937788733, 0.09690477937788733, 0.09690477937788733, 0.12554679314617445, 0.12554679314617445, 0.12554679314617445, 0.12132873294364599, 0.12132873294364599, 0.12132873294364599, 0.2253527669286477, 0.2253527669286477, 0.2253527669286477, 0.24048312190382015, 0.24048312190382015, 0.24048312190382015, 0.2614366579342966, 0.2614366579342966, 0.2614366579342966, 0.05481908613288522, 0.05481908613288522, 0.05481908613288522, 0.05263189466430851, 0.05263189466430851, 0.05263189466430851, 0.058119848405522534, 0.058119848405522534, 0.058119848405522534, 0.1688675387577956, 0.1688675387577956, 0.1688675387577956, 0.19772640569640487, 0.19772640569640487, 0.19772640569640487, 0.18164909442330446, 0.18164909442330446, 0.18164909442330446, 0.5062472735084944, 0.5062472735084944, 0.5062472735084944, 0.5498625427404396, 0.5498625427404396, 0.5498625427404396, 0.5279376861730626, 0.5279376861730626, 0.5279376861730626, 0.10528025497482052, 0.10528025497482052, 0.10528025497482052, 0.09473795732513479, 0.09473795732513479, 0.09473795732513479, 0.09839242414299965, 0.09839242414299965, 0.09839242414299965, 0.14854116188317634, 0.14854116188317634, 0.14854116188317634, 0.16627381494807236, 0.16627381494807236, 0.16627381494807236, 0.13292307098549083, 0.13292307098549083, 0.13292307098549083, 0.3493191863380636, 0.3493191863380636, 0.3493191863380636, 0.35041568390217437, 0.35041568390217437, 0.35041568390217437, 0.3732861432454352, 0.3732861432454352, 0.3732861432454352, 0.2337272169761847, 0.2337272169761847, 0.2337272169761847, 0.24823802287029917, 0.24823802287029917, 0.24823802287029917, 0.2765433614125077, 0.2765433614125077, 0.2765433614125077, 0.18657272588830454, 0.18657272588830454, 0.18657272588830454, 0.1878470438501617, 0.1878470438501617, 0.1878470438501617, 0.18563483760981803, 0.18563483760981803, 0.18563483760981803, 0.24682457963897708, 0.24682457963897708, 0.24682457963897708, 0.20412237040606263, 0.20412237040606263, 0.20412237040606263, 0.18243152540132024, 0.18243152540132024, 0.18243152540132024, 0.205087174411971, 0.205087174411971, 0.205087174411971, 0.46314378479229856, 0.46314378479229856, 0.46314378479229856, 0.3567618599865394, 0.3567618599865394, 0.3567618599865394, 0.17528494783108306, 0.17528494783108306, 0.17528494783108306, 0.1875760599946913, 0.1875760599946913, 0.1875760599946913, 0.1972531313123348, 0.1972531313123348, 0.1972531313123348, 0.18153481436206476, 0.18153481436206476, 0.18153481436206476, 0.19970263109197361, 0.19970263109197361, 0.19970263109197361, 0.19302540097712872, 0.19302540097712872, 0.19302540097712872, 0.0671245939772167, 0.0671245939772167, 0.0671245939772167, 0.09176327410935303, 0.09176327410935303, 0.09176327410935303, 0.07984718765334897, 0.07984718765334897, 0.07984718765334897]}, "mutation_prompt": null}
{"id": "586dcfa9-7308-4773-8c38-8c4216a02fc0", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12 * dim  # Slightly increased population size\n        self.initial_mutation_factor = 0.9  # Adjusted mutation factor\n        self.crossover_rate = 0.8  # Slightly reduced crossover rate\n        self.mutation_decay = 0.99  # Introduced decay for mutation factor\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        evals = self.population_size\n        mutation_factor = self.initial_mutation_factor\n\n        while evals < self.budget:\n            for i in range(self.population_size):\n                idxs = list(range(self.population_size))\n                idxs.remove(i)\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(a + mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n\n                if evals >= self.budget:\n                    break\n\n            mutation_factor *= self.mutation_decay  # Apply decay to mutation factor\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with Dynamic Parameter Adjustment for Improved Convergence Speed.", "configspace": "", "generation": 24, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d1112af1-4034-4ce4-9891-8dcc1c9ed792", "metadata": {"aucs": [0.6969985460682535, 0.6969985460682535, 0.6969985460682535, 0.7086080684215486, 0.7086080684215486, 0.7086080684215486, 0.7168904152412697, 0.7168904152412697, 0.7168904152412697, 0.5490493868289036, 0.5490493868289036, 0.5490493868289036, 0.5551320490042886, 0.5551320490042886, 0.5551320490042886, 0.5422491229852082, 0.5422491229852082, 0.5422491229852082, 0.12064145139043381, 0.12064145139043381, 0.12064145139043381, 0.11128871233687165, 0.11128871233687165, 0.11128871233687165, 0.10340696647763414, 0.10340696647763414, 0.10340696647763414, 0.09628604454820522, 0.09628604454820522, 0.09628604454820522, 0.10104806195676341, 0.10104806195676341, 0.10104806195676341, 0.12165400157921036, 0.12165400157921036, 0.12165400157921036, 0.9490181760338906, 0.9490181760338906, 0.9490181760338906, 0.9782733486354914, 0.9782733486354914, 0.9782733486354914, 0.9474975824398824, 0.9474975824398824, 0.9474975824398824, 0.351346889274466, 0.351346889274466, 0.351346889274466, 0.31115368418544964, 0.31115368418544964, 0.31115368418544964, 0.2973857698695934, 0.2973857698695934, 0.2973857698695934, 0.5528651436099479, 0.5528651436099479, 0.5528651436099479, 0.5669136426308841, 0.5669136426308841, 0.5669136426308841, 0.5914210796464217, 0.5914210796464217, 0.5914210796464217, 0.1794537926561165, 0.1794537926561165, 0.1794537926561165, 0.16166906383817337, 0.16166906383817337, 0.16166906383817337, 0.13795387394883385, 0.13795387394883385, 0.13795387394883385, 0.07727101457557861, 0.07727101457557861, 0.07727101457557861, 0.13046071290658778, 0.13046071290658778, 0.13046071290658778, 0.20117502392133024, 0.20117502392133024, 0.20117502392133024, 0.09690477937788733, 0.09690477937788733, 0.09690477937788733, 0.12554679314617445, 0.12554679314617445, 0.12554679314617445, 0.12132873294364599, 0.12132873294364599, 0.12132873294364599, 0.2253527669286477, 0.2253527669286477, 0.2253527669286477, 0.24048312190382015, 0.24048312190382015, 0.24048312190382015, 0.2614366579342966, 0.2614366579342966, 0.2614366579342966, 0.05481908613288522, 0.05481908613288522, 0.05481908613288522, 0.05263189466430851, 0.05263189466430851, 0.05263189466430851, 0.058119848405522534, 0.058119848405522534, 0.058119848405522534, 0.1688675387577956, 0.1688675387577956, 0.1688675387577956, 0.19772640569640487, 0.19772640569640487, 0.19772640569640487, 0.18164909442330446, 0.18164909442330446, 0.18164909442330446, 0.5062472735084944, 0.5062472735084944, 0.5062472735084944, 0.5498625427404396, 0.5498625427404396, 0.5498625427404396, 0.5279376861730626, 0.5279376861730626, 0.5279376861730626, 0.10528025497482052, 0.10528025497482052, 0.10528025497482052, 0.09473795732513479, 0.09473795732513479, 0.09473795732513479, 0.09839242414299965, 0.09839242414299965, 0.09839242414299965, 0.14854116188317634, 0.14854116188317634, 0.14854116188317634, 0.16627381494807236, 0.16627381494807236, 0.16627381494807236, 0.13292307098549083, 0.13292307098549083, 0.13292307098549083, 0.3493191863380636, 0.3493191863380636, 0.3493191863380636, 0.35041568390217437, 0.35041568390217437, 0.35041568390217437, 0.3732861432454352, 0.3732861432454352, 0.3732861432454352, 0.2337272169761847, 0.2337272169761847, 0.2337272169761847, 0.24823802287029917, 0.24823802287029917, 0.24823802287029917, 0.2765433614125077, 0.2765433614125077, 0.2765433614125077, 0.18657272588830454, 0.18657272588830454, 0.18657272588830454, 0.1878470438501617, 0.1878470438501617, 0.1878470438501617, 0.18563483760981803, 0.18563483760981803, 0.18563483760981803, 0.24682457963897708, 0.24682457963897708, 0.24682457963897708, 0.20412237040606263, 0.20412237040606263, 0.20412237040606263, 0.18243152540132024, 0.18243152540132024, 0.18243152540132024, 0.205087174411971, 0.205087174411971, 0.205087174411971, 0.46314378479229856, 0.46314378479229856, 0.46314378479229856, 0.3567618599865394, 0.3567618599865394, 0.3567618599865394, 0.17528494783108306, 0.17528494783108306, 0.17528494783108306, 0.1875760599946913, 0.1875760599946913, 0.1875760599946913, 0.1972531313123348, 0.1972531313123348, 0.1972531313123348, 0.18153481436206476, 0.18153481436206476, 0.18153481436206476, 0.19970263109197361, 0.19970263109197361, 0.19970263109197361, 0.19302540097712872, 0.19302540097712872, 0.19302540097712872, 0.0671245939772167, 0.0671245939772167, 0.0671245939772167, 0.09176327410935303, 0.09176327410935303, 0.09176327410935303, 0.07984718765334897, 0.07984718765334897, 0.07984718765334897]}, "mutation_prompt": null}
{"id": "851f2832-aecf-4653-b4a3-e8210a59c181", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12 * dim  # Slightly increased population size\n        self.initial_mutation_factor = 0.9  # Adjusted mutation factor\n        self.crossover_rate = 0.8  # Slightly reduced crossover rate\n        self.mutation_decay = 0.99  # Introduced decay for mutation factor\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        evals = self.population_size\n        mutation_factor = self.initial_mutation_factor\n\n        while evals < self.budget:\n            for i in range(self.population_size):\n                idxs = list(range(self.population_size))\n                idxs.remove(i)\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(a + mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n\n                if evals >= self.budget:\n                    break\n\n            mutation_factor *= self.mutation_decay  # Apply decay to mutation factor\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with Dynamic Parameter Adjustment for Improved Convergence Speed.", "configspace": "", "generation": 24, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d1112af1-4034-4ce4-9891-8dcc1c9ed792", "metadata": {"aucs": [0.6969985460682535, 0.6969985460682535, 0.6969985460682535, 0.7086080684215486, 0.7086080684215486, 0.7086080684215486, 0.7168904152412697, 0.7168904152412697, 0.7168904152412697, 0.5490493868289036, 0.5490493868289036, 0.5490493868289036, 0.5551320490042886, 0.5551320490042886, 0.5551320490042886, 0.5422491229852082, 0.5422491229852082, 0.5422491229852082, 0.12064145139043381, 0.12064145139043381, 0.12064145139043381, 0.11128871233687165, 0.11128871233687165, 0.11128871233687165, 0.10340696647763414, 0.10340696647763414, 0.10340696647763414, 0.09628604454820522, 0.09628604454820522, 0.09628604454820522, 0.10104806195676341, 0.10104806195676341, 0.10104806195676341, 0.12165400157921036, 0.12165400157921036, 0.12165400157921036, 0.9490181760338906, 0.9490181760338906, 0.9490181760338906, 0.9782733486354914, 0.9782733486354914, 0.9782733486354914, 0.9474975824398824, 0.9474975824398824, 0.9474975824398824, 0.351346889274466, 0.351346889274466, 0.351346889274466, 0.31115368418544964, 0.31115368418544964, 0.31115368418544964, 0.2973857698695934, 0.2973857698695934, 0.2973857698695934, 0.5528651436099479, 0.5528651436099479, 0.5528651436099479, 0.5669136426308841, 0.5669136426308841, 0.5669136426308841, 0.5914210796464217, 0.5914210796464217, 0.5914210796464217, 0.1794537926561165, 0.1794537926561165, 0.1794537926561165, 0.16166906383817337, 0.16166906383817337, 0.16166906383817337, 0.13795387394883385, 0.13795387394883385, 0.13795387394883385, 0.07727101457557861, 0.07727101457557861, 0.07727101457557861, 0.13046071290658778, 0.13046071290658778, 0.13046071290658778, 0.20117502392133024, 0.20117502392133024, 0.20117502392133024, 0.09690477937788733, 0.09690477937788733, 0.09690477937788733, 0.12554679314617445, 0.12554679314617445, 0.12554679314617445, 0.12132873294364599, 0.12132873294364599, 0.12132873294364599, 0.2253527669286477, 0.2253527669286477, 0.2253527669286477, 0.24048312190382015, 0.24048312190382015, 0.24048312190382015, 0.2614366579342966, 0.2614366579342966, 0.2614366579342966, 0.05481908613288522, 0.05481908613288522, 0.05481908613288522, 0.05263189466430851, 0.05263189466430851, 0.05263189466430851, 0.058119848405522534, 0.058119848405522534, 0.058119848405522534, 0.1688675387577956, 0.1688675387577956, 0.1688675387577956, 0.19772640569640487, 0.19772640569640487, 0.19772640569640487, 0.18164909442330446, 0.18164909442330446, 0.18164909442330446, 0.5062472735084944, 0.5062472735084944, 0.5062472735084944, 0.5498625427404396, 0.5498625427404396, 0.5498625427404396, 0.5279376861730626, 0.5279376861730626, 0.5279376861730626, 0.10528025497482052, 0.10528025497482052, 0.10528025497482052, 0.09473795732513479, 0.09473795732513479, 0.09473795732513479, 0.09839242414299965, 0.09839242414299965, 0.09839242414299965, 0.14854116188317634, 0.14854116188317634, 0.14854116188317634, 0.16627381494807236, 0.16627381494807236, 0.16627381494807236, 0.13292307098549083, 0.13292307098549083, 0.13292307098549083, 0.3493191863380636, 0.3493191863380636, 0.3493191863380636, 0.35041568390217437, 0.35041568390217437, 0.35041568390217437, 0.3732861432454352, 0.3732861432454352, 0.3732861432454352, 0.2337272169761847, 0.2337272169761847, 0.2337272169761847, 0.24823802287029917, 0.24823802287029917, 0.24823802287029917, 0.2765433614125077, 0.2765433614125077, 0.2765433614125077, 0.18657272588830454, 0.18657272588830454, 0.18657272588830454, 0.1878470438501617, 0.1878470438501617, 0.1878470438501617, 0.18563483760981803, 0.18563483760981803, 0.18563483760981803, 0.24682457963897708, 0.24682457963897708, 0.24682457963897708, 0.20412237040606263, 0.20412237040606263, 0.20412237040606263, 0.18243152540132024, 0.18243152540132024, 0.18243152540132024, 0.205087174411971, 0.205087174411971, 0.205087174411971, 0.46314378479229856, 0.46314378479229856, 0.46314378479229856, 0.3567618599865394, 0.3567618599865394, 0.3567618599865394, 0.17528494783108306, 0.17528494783108306, 0.17528494783108306, 0.1875760599946913, 0.1875760599946913, 0.1875760599946913, 0.1972531313123348, 0.1972531313123348, 0.1972531313123348, 0.18153481436206476, 0.18153481436206476, 0.18153481436206476, 0.19970263109197361, 0.19970263109197361, 0.19970263109197361, 0.19302540097712872, 0.19302540097712872, 0.19302540097712872, 0.0671245939772167, 0.0671245939772167, 0.0671245939772167, 0.09176327410935303, 0.09176327410935303, 0.09176327410935303, 0.07984718765334897, 0.07984718765334897, 0.07984718765334897]}, "mutation_prompt": null}
{"id": "c5fe7d40-bfa2-44ed-87a6-3c07e5114019", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12 * dim  # Slightly increased population size\n        self.initial_mutation_factor = 0.9  # Adjusted mutation factor\n        self.crossover_rate = 0.8  # Slightly reduced crossover rate\n        self.mutation_decay = 0.99  # Introduced decay for mutation factor\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        evals = self.population_size\n        mutation_factor = self.initial_mutation_factor\n\n        while evals < self.budget:\n            for i in range(self.population_size):\n                idxs = list(range(self.population_size))\n                idxs.remove(i)\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(a + mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n\n                if evals >= self.budget:\n                    break\n\n            mutation_factor *= self.mutation_decay  # Apply decay to mutation factor\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with Dynamic Parameter Adjustment for Improved Convergence Speed.", "configspace": "", "generation": 24, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d1112af1-4034-4ce4-9891-8dcc1c9ed792", "metadata": {"aucs": [0.6969985460682535, 0.6969985460682535, 0.6969985460682535, 0.7086080684215486, 0.7086080684215486, 0.7086080684215486, 0.7168904152412697, 0.7168904152412697, 0.7168904152412697, 0.5490493868289036, 0.5490493868289036, 0.5490493868289036, 0.5551320490042886, 0.5551320490042886, 0.5551320490042886, 0.5422491229852082, 0.5422491229852082, 0.5422491229852082, 0.12064145139043381, 0.12064145139043381, 0.12064145139043381, 0.11128871233687165, 0.11128871233687165, 0.11128871233687165, 0.10340696647763414, 0.10340696647763414, 0.10340696647763414, 0.09628604454820522, 0.09628604454820522, 0.09628604454820522, 0.10104806195676341, 0.10104806195676341, 0.10104806195676341, 0.12165400157921036, 0.12165400157921036, 0.12165400157921036, 0.9490181760338906, 0.9490181760338906, 0.9490181760338906, 0.9782733486354914, 0.9782733486354914, 0.9782733486354914, 0.9474975824398824, 0.9474975824398824, 0.9474975824398824, 0.351346889274466, 0.351346889274466, 0.351346889274466, 0.31115368418544964, 0.31115368418544964, 0.31115368418544964, 0.2973857698695934, 0.2973857698695934, 0.2973857698695934, 0.5528651436099479, 0.5528651436099479, 0.5528651436099479, 0.5669136426308841, 0.5669136426308841, 0.5669136426308841, 0.5914210796464217, 0.5914210796464217, 0.5914210796464217, 0.1794537926561165, 0.1794537926561165, 0.1794537926561165, 0.16166906383817337, 0.16166906383817337, 0.16166906383817337, 0.13795387394883385, 0.13795387394883385, 0.13795387394883385, 0.07727101457557861, 0.07727101457557861, 0.07727101457557861, 0.13046071290658778, 0.13046071290658778, 0.13046071290658778, 0.20117502392133024, 0.20117502392133024, 0.20117502392133024, 0.09690477937788733, 0.09690477937788733, 0.09690477937788733, 0.12554679314617445, 0.12554679314617445, 0.12554679314617445, 0.12132873294364599, 0.12132873294364599, 0.12132873294364599, 0.2253527669286477, 0.2253527669286477, 0.2253527669286477, 0.24048312190382015, 0.24048312190382015, 0.24048312190382015, 0.2614366579342966, 0.2614366579342966, 0.2614366579342966, 0.05481908613288522, 0.05481908613288522, 0.05481908613288522, 0.05263189466430851, 0.05263189466430851, 0.05263189466430851, 0.058119848405522534, 0.058119848405522534, 0.058119848405522534, 0.1688675387577956, 0.1688675387577956, 0.1688675387577956, 0.19772640569640487, 0.19772640569640487, 0.19772640569640487, 0.18164909442330446, 0.18164909442330446, 0.18164909442330446, 0.5062472735084944, 0.5062472735084944, 0.5062472735084944, 0.5498625427404396, 0.5498625427404396, 0.5498625427404396, 0.5279376861730626, 0.5279376861730626, 0.5279376861730626, 0.10528025497482052, 0.10528025497482052, 0.10528025497482052, 0.09473795732513479, 0.09473795732513479, 0.09473795732513479, 0.09839242414299965, 0.09839242414299965, 0.09839242414299965, 0.14854116188317634, 0.14854116188317634, 0.14854116188317634, 0.16627381494807236, 0.16627381494807236, 0.16627381494807236, 0.13292307098549083, 0.13292307098549083, 0.13292307098549083, 0.3493191863380636, 0.3493191863380636, 0.3493191863380636, 0.35041568390217437, 0.35041568390217437, 0.35041568390217437, 0.3732861432454352, 0.3732861432454352, 0.3732861432454352, 0.2337272169761847, 0.2337272169761847, 0.2337272169761847, 0.24823802287029917, 0.24823802287029917, 0.24823802287029917, 0.2765433614125077, 0.2765433614125077, 0.2765433614125077, 0.18657272588830454, 0.18657272588830454, 0.18657272588830454, 0.1878470438501617, 0.1878470438501617, 0.1878470438501617, 0.18563483760981803, 0.18563483760981803, 0.18563483760981803, 0.24682457963897708, 0.24682457963897708, 0.24682457963897708, 0.20412237040606263, 0.20412237040606263, 0.20412237040606263, 0.18243152540132024, 0.18243152540132024, 0.18243152540132024, 0.205087174411971, 0.205087174411971, 0.205087174411971, 0.46314378479229856, 0.46314378479229856, 0.46314378479229856, 0.3567618599865394, 0.3567618599865394, 0.3567618599865394, 0.17528494783108306, 0.17528494783108306, 0.17528494783108306, 0.1875760599946913, 0.1875760599946913, 0.1875760599946913, 0.1972531313123348, 0.1972531313123348, 0.1972531313123348, 0.18153481436206476, 0.18153481436206476, 0.18153481436206476, 0.19970263109197361, 0.19970263109197361, 0.19970263109197361, 0.19302540097712872, 0.19302540097712872, 0.19302540097712872, 0.0671245939772167, 0.0671245939772167, 0.0671245939772167, 0.09176327410935303, 0.09176327410935303, 0.09176327410935303, 0.07984718765334897, 0.07984718765334897, 0.07984718765334897]}, "mutation_prompt": null}
{"id": "d1889eae-0d53-4ba8-84e7-010c41457b00", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12 * dim  # Slightly increased population size\n        self.initial_mutation_factor = 0.9  # Adjusted mutation factor\n        self.crossover_rate = 0.8  # Slightly reduced crossover rate\n        self.mutation_decay = 0.99  # Introduced decay for mutation factor\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        evals = self.population_size\n        mutation_factor = self.initial_mutation_factor\n\n        while evals < self.budget:\n            for i in range(self.population_size):\n                idxs = list(range(self.population_size))\n                idxs.remove(i)\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(a + mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n\n                if evals >= self.budget:\n                    break\n\n            mutation_factor *= self.mutation_decay  # Apply decay to mutation factor\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with Dynamic Parameter Adjustment for Improved Convergence Speed.", "configspace": "", "generation": 24, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d1112af1-4034-4ce4-9891-8dcc1c9ed792", "metadata": {"aucs": [0.6969985460682535, 0.6969985460682535, 0.6969985460682535, 0.7086080684215486, 0.7086080684215486, 0.7086080684215486, 0.7168904152412697, 0.7168904152412697, 0.7168904152412697, 0.5490493868289036, 0.5490493868289036, 0.5490493868289036, 0.5551320490042886, 0.5551320490042886, 0.5551320490042886, 0.5422491229852082, 0.5422491229852082, 0.5422491229852082, 0.12064145139043381, 0.12064145139043381, 0.12064145139043381, 0.11128871233687165, 0.11128871233687165, 0.11128871233687165, 0.10340696647763414, 0.10340696647763414, 0.10340696647763414, 0.09628604454820522, 0.09628604454820522, 0.09628604454820522, 0.10104806195676341, 0.10104806195676341, 0.10104806195676341, 0.12165400157921036, 0.12165400157921036, 0.12165400157921036, 0.9490181760338906, 0.9490181760338906, 0.9490181760338906, 0.9782733486354914, 0.9782733486354914, 0.9782733486354914, 0.9474975824398824, 0.9474975824398824, 0.9474975824398824, 0.351346889274466, 0.351346889274466, 0.351346889274466, 0.31115368418544964, 0.31115368418544964, 0.31115368418544964, 0.2973857698695934, 0.2973857698695934, 0.2973857698695934, 0.5528651436099479, 0.5528651436099479, 0.5528651436099479, 0.5669136426308841, 0.5669136426308841, 0.5669136426308841, 0.5914210796464217, 0.5914210796464217, 0.5914210796464217, 0.1794537926561165, 0.1794537926561165, 0.1794537926561165, 0.16166906383817337, 0.16166906383817337, 0.16166906383817337, 0.13795387394883385, 0.13795387394883385, 0.13795387394883385, 0.07727101457557861, 0.07727101457557861, 0.07727101457557861, 0.13046071290658778, 0.13046071290658778, 0.13046071290658778, 0.20117502392133024, 0.20117502392133024, 0.20117502392133024, 0.09690477937788733, 0.09690477937788733, 0.09690477937788733, 0.12554679314617445, 0.12554679314617445, 0.12554679314617445, 0.12132873294364599, 0.12132873294364599, 0.12132873294364599, 0.2253527669286477, 0.2253527669286477, 0.2253527669286477, 0.24048312190382015, 0.24048312190382015, 0.24048312190382015, 0.2614366579342966, 0.2614366579342966, 0.2614366579342966, 0.05481908613288522, 0.05481908613288522, 0.05481908613288522, 0.05263189466430851, 0.05263189466430851, 0.05263189466430851, 0.058119848405522534, 0.058119848405522534, 0.058119848405522534, 0.1688675387577956, 0.1688675387577956, 0.1688675387577956, 0.19772640569640487, 0.19772640569640487, 0.19772640569640487, 0.18164909442330446, 0.18164909442330446, 0.18164909442330446, 0.5062472735084944, 0.5062472735084944, 0.5062472735084944, 0.5498625427404396, 0.5498625427404396, 0.5498625427404396, 0.5279376861730626, 0.5279376861730626, 0.5279376861730626, 0.10528025497482052, 0.10528025497482052, 0.10528025497482052, 0.09473795732513479, 0.09473795732513479, 0.09473795732513479, 0.09839242414299965, 0.09839242414299965, 0.09839242414299965, 0.14854116188317634, 0.14854116188317634, 0.14854116188317634, 0.16627381494807236, 0.16627381494807236, 0.16627381494807236, 0.13292307098549083, 0.13292307098549083, 0.13292307098549083, 0.3493191863380636, 0.3493191863380636, 0.3493191863380636, 0.35041568390217437, 0.35041568390217437, 0.35041568390217437, 0.3732861432454352, 0.3732861432454352, 0.3732861432454352, 0.2337272169761847, 0.2337272169761847, 0.2337272169761847, 0.24823802287029917, 0.24823802287029917, 0.24823802287029917, 0.2765433614125077, 0.2765433614125077, 0.2765433614125077, 0.18657272588830454, 0.18657272588830454, 0.18657272588830454, 0.1878470438501617, 0.1878470438501617, 0.1878470438501617, 0.18563483760981803, 0.18563483760981803, 0.18563483760981803, 0.24682457963897708, 0.24682457963897708, 0.24682457963897708, 0.20412237040606263, 0.20412237040606263, 0.20412237040606263, 0.18243152540132024, 0.18243152540132024, 0.18243152540132024, 0.205087174411971, 0.205087174411971, 0.205087174411971, 0.46314378479229856, 0.46314378479229856, 0.46314378479229856, 0.3567618599865394, 0.3567618599865394, 0.3567618599865394, 0.17528494783108306, 0.17528494783108306, 0.17528494783108306, 0.1875760599946913, 0.1875760599946913, 0.1875760599946913, 0.1972531313123348, 0.1972531313123348, 0.1972531313123348, 0.18153481436206476, 0.18153481436206476, 0.18153481436206476, 0.19970263109197361, 0.19970263109197361, 0.19970263109197361, 0.19302540097712872, 0.19302540097712872, 0.19302540097712872, 0.0671245939772167, 0.0671245939772167, 0.0671245939772167, 0.09176327410935303, 0.09176327410935303, 0.09176327410935303, 0.07984718765334897, 0.07984718765334897, 0.07984718765334897]}, "mutation_prompt": null}
{"id": "b7df5738-e239-453b-932f-2ae32e017b36", "solution": "import numpy as np\n\nclass SelfAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim  # Slightly reduced population size for faster convergence\n        self.initial_mutation_factor = 0.8  # Adjusted initial mutation factor for exploration\n        self.crossover_rate = 0.9  # Increased crossover rate for diversity\n        self.mutation_decay = 0.98  # Optimized decay for mutation factor\n        self.split_factor = 0.5  # Subpopulation split factor\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        evals = self.population_size\n        mutation_factor = self.initial_mutation_factor\n\n        while evals < self.budget:\n            subpop_size = int(self.population_size * self.split_factor)\n            for i in range(self.population_size):\n                idxs = list(range(self.population_size))\n                idxs.remove(i)\n                sample_size = subpop_size if np.random.rand() < 0.5 else self.population_size  # Dynamic subpopulation\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(a + mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n\n                if evals >= self.budget:\n                    break\n\n            mutation_factor *= self.mutation_decay  # Apply decay to mutation factor\n            if evals % (self.population_size // 2) == 0:  # Adapt learning rate dynamically\n                self.crossover_rate = 0.7 + 0.3 * np.random.rand()\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "SelfAdaptiveDifferentialEvolution", "description": "Introduced Self-Adaptive Differential Evolution with Dynamic Subpopulation Strategies and Adaptive Learning Rates for Enhanced Convergence.", "configspace": "", "generation": 64, "fitness": 0.33085219912568015, "feedback": "The algorithm SelfAdaptiveDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.25.", "error": "", "parent_id": "d1112af1-4034-4ce4-9891-8dcc1c9ed792", "metadata": {"aucs": [0.8028974999397684, 0.8028974999397684, 0.8028974999397684, 0.820162767335356, 0.820162767335356, 0.820162767335356, 0.8268158805027072, 0.8268158805027072, 0.8268158805027072, 0.6912682274538304, 0.6912682274538304, 0.6912682274538304, 0.5844808858752991, 0.5844808858752991, 0.5844808858752991, 0.6828452545688112, 0.6828452545688112, 0.6828452545688112, 0.2069948826304837, 0.2069948826304837, 0.2069948826304837, 0.25479576379989277, 0.25479576379989277, 0.25479576379989277, 0.3096555827229023, 0.3096555827229023, 0.3096555827229023, 0.16803182716129272, 0.16803182716129272, 0.16803182716129272, 0.2125972816080981, 0.2125972816080981, 0.2125972816080981, 0.13420800187083226, 0.13420800187083226, 0.13420800187083226, 0.9543543436153276, 0.9543543436153276, 0.9543543436153276, 0.9635622803614148, 0.9635622803614148, 0.9635622803614148, 0.9785171936615114, 0.9785171936615114, 0.9785171936615114, 0.22746277654182945, 0.22746277654182945, 0.22746277654182945, 0.18213375266531762, 0.18213375266531762, 0.18213375266531762, 0.3027151787666107, 0.3027151787666107, 0.3027151787666107, 0.7746545356265845, 0.7746545356265845, 0.7746545356265845, 0.7911711620707444, 0.7911711620707444, 0.7911711620707444, 0.7824307938694764, 0.7824307938694764, 0.7824307938694764, 0.16018975197729757, 0.16018975197729757, 0.16018975197729757, 0.29362630482925267, 0.29362630482925267, 0.29362630482925267, 0.1862258566090128, 0.1862258566090128, 0.1862258566090128, 0.12864263117106134, 0.12864263117106134, 0.12864263117106134, 0.16862340955315136, 0.16862340955315136, 0.16862340955315136, 0.13688738049704718, 0.13688738049704718, 0.13688738049704718, 0.057365535640381715, 0.057365535640381715, 0.057365535640381715, 0.1599719382778796, 0.1599719382778796, 0.1599719382778796, 0.09815978182277196, 0.09815978182277196, 0.09815978182277196, 0.32809732531911995, 0.32809732531911995, 0.32809732531911995, 0.15989542789680122, 0.15989542789680122, 0.15989542789680122, 0.39450358933421326, 0.39450358933421326, 0.39450358933421326, 0.07182819095400772, 0.07182819095400772, 0.07182819095400772, 0.21867696509157653, 0.21867696509157653, 0.21867696509157653, 0.12758638820913926, 0.12758638820913926, 0.12758638820913926, 0.20600531668127853, 0.20600531668127853, 0.20600531668127853, 0.24645502611711, 0.24645502611711, 0.24645502611711, 0.20271892435046202, 0.20271892435046202, 0.20271892435046202, 0.6010154351823194, 0.6010154351823194, 0.6010154351823194, 0.6173710628607691, 0.6173710628607691, 0.6173710628607691, 0.5525078307042829, 0.5525078307042829, 0.5525078307042829, 0.1220394034446799, 0.1220394034446799, 0.1220394034446799, 0.11876724744881773, 0.11876724744881773, 0.11876724744881773, 0.16418442071346084, 0.16418442071346084, 0.16418442071346084, 0.19307450728368347, 0.19307450728368347, 0.19307450728368347, 0.1564303088932516, 0.1564303088932516, 0.1564303088932516, 0.16070566581260937, 0.16070566581260937, 0.16070566581260937, 0.4104016892617022, 0.4104016892617022, 0.4104016892617022, 0.44735681110297965, 0.44735681110297965, 0.44735681110297965, 0.5117808824782959, 0.5117808824782959, 0.5117808824782959, 0.29691328184405497, 0.29691328184405497, 0.29691328184405497, 0.34080395958329524, 0.34080395958329524, 0.34080395958329524, 0.3056440310160867, 0.3056440310160867, 0.3056440310160867, 0.20509343921024492, 0.20509343921024492, 0.20509343921024492, 0.22041205601336689, 0.22041205601336689, 0.22041205601336689, 0.20323679804723838, 0.20323679804723838, 0.20323679804723838, 0.20667532748988104, 0.20667532748988104, 0.20667532748988104, 0.19966699706438262, 0.19966699706438262, 0.19966699706438262, 0.2858116053381321, 0.2858116053381321, 0.2858116053381321, 0.16301391266713094, 0.16301391266713094, 0.16301391266713094, 0.7239730569828753, 0.7239730569828753, 0.7239730569828753, 0.18129467615580674, 0.18129467615580674, 0.18129467615580674, 0.28515658620773476, 0.28515658620773476, 0.28515658620773476, 0.1935435239197778, 0.1935435239197778, 0.1935435239197778, 0.1467211704148913, 0.1467211704148913, 0.1467211704148913, 0.18991866161784787, 0.18991866161784787, 0.18991866161784787, 0.16535842938777856, 0.16535842938777856, 0.16535842938777856, 0.19316296124109922, 0.19316296124109922, 0.19316296124109922, 0.08535354931102046, 0.08535354931102046, 0.08535354931102046, 0.08660617035399687, 0.08660617035399687, 0.08660617035399687, 0.09014726101582149, 0.09014726101582149, 0.09014726101582149]}, "mutation_prompt": null}
{"id": "b34e7bcf-bc3e-4d95-99e3-355cf4b9632a", "solution": "import numpy as np\n\nclass SelfAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim  # Slightly reduced population size for faster convergence\n        self.initial_mutation_factor = 0.8  # Adjusted initial mutation factor for exploration\n        self.crossover_rate = 0.9  # Increased crossover rate for diversity\n        self.mutation_decay = 0.98  # Optimized decay for mutation factor\n        self.split_factor = 0.5  # Subpopulation split factor\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        evals = self.population_size\n        mutation_factor = self.initial_mutation_factor\n\n        while evals < self.budget:\n            subpop_size = int(self.population_size * self.split_factor)\n            for i in range(self.population_size):\n                idxs = list(range(self.population_size))\n                idxs.remove(i)\n                sample_size = subpop_size if np.random.rand() < 0.5 else self.population_size  # Dynamic subpopulation\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(a + mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n\n                if evals >= self.budget:\n                    break\n\n            mutation_factor *= self.mutation_decay  # Apply decay to mutation factor\n            if evals % (self.population_size // 2) == 0:  # Adapt learning rate dynamically\n                self.crossover_rate = 0.7 + 0.3 * np.random.rand()\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "SelfAdaptiveDifferentialEvolution", "description": "Introduced Self-Adaptive Differential Evolution with Dynamic Subpopulation Strategies and Adaptive Learning Rates for Enhanced Convergence.", "configspace": "", "generation": 65, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b7df5738-e239-453b-932f-2ae32e017b36", "metadata": {"aucs": [0.8028974999397684, 0.8028974999397684, 0.8028974999397684, 0.820162767335356, 0.820162767335356, 0.820162767335356, 0.8268158805027072, 0.8268158805027072, 0.8268158805027072, 0.6912682274538304, 0.6912682274538304, 0.6912682274538304, 0.5844808858752991, 0.5844808858752991, 0.5844808858752991, 0.6828452545688112, 0.6828452545688112, 0.6828452545688112, 0.2069948826304837, 0.2069948826304837, 0.2069948826304837, 0.25479576379989277, 0.25479576379989277, 0.25479576379989277, 0.3096555827229023, 0.3096555827229023, 0.3096555827229023, 0.16803182716129272, 0.16803182716129272, 0.16803182716129272, 0.2125972816080981, 0.2125972816080981, 0.2125972816080981, 0.13420800187083226, 0.13420800187083226, 0.13420800187083226, 0.9543543436153276, 0.9543543436153276, 0.9543543436153276, 0.9635622803614148, 0.9635622803614148, 0.9635622803614148, 0.9785171936615114, 0.9785171936615114, 0.9785171936615114, 0.22746277654182945, 0.22746277654182945, 0.22746277654182945, 0.18213375266531762, 0.18213375266531762, 0.18213375266531762, 0.3027151787666107, 0.3027151787666107, 0.3027151787666107, 0.7746545356265845, 0.7746545356265845, 0.7746545356265845, 0.7911711620707444, 0.7911711620707444, 0.7911711620707444, 0.7824307938694764, 0.7824307938694764, 0.7824307938694764, 0.16018975197729757, 0.16018975197729757, 0.16018975197729757, 0.29362630482925267, 0.29362630482925267, 0.29362630482925267, 0.1862258566090128, 0.1862258566090128, 0.1862258566090128, 0.12864263117106134, 0.12864263117106134, 0.12864263117106134, 0.16862340955315136, 0.16862340955315136, 0.16862340955315136, 0.13688738049704718, 0.13688738049704718, 0.13688738049704718, 0.057365535640381715, 0.057365535640381715, 0.057365535640381715, 0.1599719382778796, 0.1599719382778796, 0.1599719382778796, 0.09815978182277196, 0.09815978182277196, 0.09815978182277196, 0.32809732531911995, 0.32809732531911995, 0.32809732531911995, 0.15989542789680122, 0.15989542789680122, 0.15989542789680122, 0.39450358933421326, 0.39450358933421326, 0.39450358933421326, 0.07182819095400772, 0.07182819095400772, 0.07182819095400772, 0.21867696509157653, 0.21867696509157653, 0.21867696509157653, 0.12758638820913926, 0.12758638820913926, 0.12758638820913926, 0.20600531668127853, 0.20600531668127853, 0.20600531668127853, 0.24645502611711, 0.24645502611711, 0.24645502611711, 0.20271892435046202, 0.20271892435046202, 0.20271892435046202, 0.6010154351823194, 0.6010154351823194, 0.6010154351823194, 0.6173710628607691, 0.6173710628607691, 0.6173710628607691, 0.5525078307042829, 0.5525078307042829, 0.5525078307042829, 0.1220394034446799, 0.1220394034446799, 0.1220394034446799, 0.11876724744881773, 0.11876724744881773, 0.11876724744881773, 0.16418442071346084, 0.16418442071346084, 0.16418442071346084, 0.19307450728368347, 0.19307450728368347, 0.19307450728368347, 0.1564303088932516, 0.1564303088932516, 0.1564303088932516, 0.16070566581260937, 0.16070566581260937, 0.16070566581260937, 0.4104016892617022, 0.4104016892617022, 0.4104016892617022, 0.44735681110297965, 0.44735681110297965, 0.44735681110297965, 0.5117808824782959, 0.5117808824782959, 0.5117808824782959, 0.29691328184405497, 0.29691328184405497, 0.29691328184405497, 0.34080395958329524, 0.34080395958329524, 0.34080395958329524, 0.3056440310160867, 0.3056440310160867, 0.3056440310160867, 0.20509343921024492, 0.20509343921024492, 0.20509343921024492, 0.22041205601336689, 0.22041205601336689, 0.22041205601336689, 0.20323679804723838, 0.20323679804723838, 0.20323679804723838, 0.20667532748988104, 0.20667532748988104, 0.20667532748988104, 0.19966699706438262, 0.19966699706438262, 0.19966699706438262, 0.2858116053381321, 0.2858116053381321, 0.2858116053381321, 0.16301391266713094, 0.16301391266713094, 0.16301391266713094, 0.7239730569828753, 0.7239730569828753, 0.7239730569828753, 0.18129467615580674, 0.18129467615580674, 0.18129467615580674, 0.28515658620773476, 0.28515658620773476, 0.28515658620773476, 0.1935435239197778, 0.1935435239197778, 0.1935435239197778, 0.1467211704148913, 0.1467211704148913, 0.1467211704148913, 0.18991866161784787, 0.18991866161784787, 0.18991866161784787, 0.16535842938777856, 0.16535842938777856, 0.16535842938777856, 0.19316296124109922, 0.19316296124109922, 0.19316296124109922, 0.08535354931102046, 0.08535354931102046, 0.08535354931102046, 0.08660617035399687, 0.08660617035399687, 0.08660617035399687, 0.09014726101582149, 0.09014726101582149, 0.09014726101582149]}, "mutation_prompt": null}
{"id": "c3f2b74a-713d-4c0f-a947-8b650b590e13", "solution": "import numpy as np\n\nclass SelfAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim  # Slightly reduced population size for faster convergence\n        self.initial_mutation_factor = 0.8  # Adjusted initial mutation factor for exploration\n        self.crossover_rate = 0.9  # Increased crossover rate for diversity\n        self.mutation_decay = 0.98  # Optimized decay for mutation factor\n        self.split_factor = 0.5  # Subpopulation split factor\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        evals = self.population_size\n        mutation_factor = self.initial_mutation_factor\n\n        while evals < self.budget:\n            subpop_size = int(self.population_size * self.split_factor)\n            for i in range(self.population_size):\n                idxs = list(range(self.population_size))\n                idxs.remove(i)\n                sample_size = subpop_size if np.random.rand() < 0.5 else self.population_size  # Dynamic subpopulation\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(a + mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n\n                if evals >= self.budget:\n                    break\n\n            mutation_factor *= self.mutation_decay  # Apply decay to mutation factor\n            if evals % (self.population_size // 2) == 0:  # Adapt learning rate dynamically\n                self.crossover_rate = 0.7 + 0.3 * np.random.rand()\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "SelfAdaptiveDifferentialEvolution", "description": "Introduced Self-Adaptive Differential Evolution with Dynamic Subpopulation Strategies and Adaptive Learning Rates for Enhanced Convergence.", "configspace": "", "generation": 65, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b7df5738-e239-453b-932f-2ae32e017b36", "metadata": {"aucs": [0.8028974999397684, 0.8028974999397684, 0.8028974999397684, 0.820162767335356, 0.820162767335356, 0.820162767335356, 0.8268158805027072, 0.8268158805027072, 0.8268158805027072, 0.6912682274538304, 0.6912682274538304, 0.6912682274538304, 0.5844808858752991, 0.5844808858752991, 0.5844808858752991, 0.6828452545688112, 0.6828452545688112, 0.6828452545688112, 0.2069948826304837, 0.2069948826304837, 0.2069948826304837, 0.25479576379989277, 0.25479576379989277, 0.25479576379989277, 0.3096555827229023, 0.3096555827229023, 0.3096555827229023, 0.16803182716129272, 0.16803182716129272, 0.16803182716129272, 0.2125972816080981, 0.2125972816080981, 0.2125972816080981, 0.13420800187083226, 0.13420800187083226, 0.13420800187083226, 0.9543543436153276, 0.9543543436153276, 0.9543543436153276, 0.9635622803614148, 0.9635622803614148, 0.9635622803614148, 0.9785171936615114, 0.9785171936615114, 0.9785171936615114, 0.22746277654182945, 0.22746277654182945, 0.22746277654182945, 0.18213375266531762, 0.18213375266531762, 0.18213375266531762, 0.3027151787666107, 0.3027151787666107, 0.3027151787666107, 0.7746545356265845, 0.7746545356265845, 0.7746545356265845, 0.7911711620707444, 0.7911711620707444, 0.7911711620707444, 0.7824307938694764, 0.7824307938694764, 0.7824307938694764, 0.16018975197729757, 0.16018975197729757, 0.16018975197729757, 0.29362630482925267, 0.29362630482925267, 0.29362630482925267, 0.1862258566090128, 0.1862258566090128, 0.1862258566090128, 0.12864263117106134, 0.12864263117106134, 0.12864263117106134, 0.16862340955315136, 0.16862340955315136, 0.16862340955315136, 0.13688738049704718, 0.13688738049704718, 0.13688738049704718, 0.057365535640381715, 0.057365535640381715, 0.057365535640381715, 0.1599719382778796, 0.1599719382778796, 0.1599719382778796, 0.09815978182277196, 0.09815978182277196, 0.09815978182277196, 0.32809732531911995, 0.32809732531911995, 0.32809732531911995, 0.15989542789680122, 0.15989542789680122, 0.15989542789680122, 0.39450358933421326, 0.39450358933421326, 0.39450358933421326, 0.07182819095400772, 0.07182819095400772, 0.07182819095400772, 0.21867696509157653, 0.21867696509157653, 0.21867696509157653, 0.12758638820913926, 0.12758638820913926, 0.12758638820913926, 0.20600531668127853, 0.20600531668127853, 0.20600531668127853, 0.24645502611711, 0.24645502611711, 0.24645502611711, 0.20271892435046202, 0.20271892435046202, 0.20271892435046202, 0.6010154351823194, 0.6010154351823194, 0.6010154351823194, 0.6173710628607691, 0.6173710628607691, 0.6173710628607691, 0.5525078307042829, 0.5525078307042829, 0.5525078307042829, 0.1220394034446799, 0.1220394034446799, 0.1220394034446799, 0.11876724744881773, 0.11876724744881773, 0.11876724744881773, 0.16418442071346084, 0.16418442071346084, 0.16418442071346084, 0.19307450728368347, 0.19307450728368347, 0.19307450728368347, 0.1564303088932516, 0.1564303088932516, 0.1564303088932516, 0.16070566581260937, 0.16070566581260937, 0.16070566581260937, 0.4104016892617022, 0.4104016892617022, 0.4104016892617022, 0.44735681110297965, 0.44735681110297965, 0.44735681110297965, 0.5117808824782959, 0.5117808824782959, 0.5117808824782959, 0.29691328184405497, 0.29691328184405497, 0.29691328184405497, 0.34080395958329524, 0.34080395958329524, 0.34080395958329524, 0.3056440310160867, 0.3056440310160867, 0.3056440310160867, 0.20509343921024492, 0.20509343921024492, 0.20509343921024492, 0.22041205601336689, 0.22041205601336689, 0.22041205601336689, 0.20323679804723838, 0.20323679804723838, 0.20323679804723838, 0.20667532748988104, 0.20667532748988104, 0.20667532748988104, 0.19966699706438262, 0.19966699706438262, 0.19966699706438262, 0.2858116053381321, 0.2858116053381321, 0.2858116053381321, 0.16301391266713094, 0.16301391266713094, 0.16301391266713094, 0.7239730569828753, 0.7239730569828753, 0.7239730569828753, 0.18129467615580674, 0.18129467615580674, 0.18129467615580674, 0.28515658620773476, 0.28515658620773476, 0.28515658620773476, 0.1935435239197778, 0.1935435239197778, 0.1935435239197778, 0.1467211704148913, 0.1467211704148913, 0.1467211704148913, 0.18991866161784787, 0.18991866161784787, 0.18991866161784787, 0.16535842938777856, 0.16535842938777856, 0.16535842938777856, 0.19316296124109922, 0.19316296124109922, 0.19316296124109922, 0.08535354931102046, 0.08535354931102046, 0.08535354931102046, 0.08660617035399687, 0.08660617035399687, 0.08660617035399687, 0.09014726101582149, 0.09014726101582149, 0.09014726101582149]}, "mutation_prompt": null}
{"id": "099154dd-2e00-4065-9c60-781f3e52ff8e", "solution": "import numpy as np\n\nclass SelfAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim  # Slightly reduced population size for faster convergence\n        self.initial_mutation_factor = 0.8  # Adjusted initial mutation factor for exploration\n        self.crossover_rate = 0.9  # Increased crossover rate for diversity\n        self.mutation_decay = 0.98  # Optimized decay for mutation factor\n        self.split_factor = 0.5  # Subpopulation split factor\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        evals = self.population_size\n        mutation_factor = self.initial_mutation_factor\n\n        while evals < self.budget:\n            subpop_size = int(self.population_size * self.split_factor)\n            for i in range(self.population_size):\n                idxs = list(range(self.population_size))\n                idxs.remove(i)\n                sample_size = subpop_size if np.random.rand() < 0.5 else self.population_size  # Dynamic subpopulation\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(a + mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n\n                if evals >= self.budget:\n                    break\n\n            mutation_factor *= self.mutation_decay  # Apply decay to mutation factor\n            if evals % (self.population_size // 2) == 0:  # Adapt learning rate dynamically\n                self.crossover_rate = 0.7 + 0.3 * np.random.rand()\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "SelfAdaptiveDifferentialEvolution", "description": "Introduced Self-Adaptive Differential Evolution with Dynamic Subpopulation Strategies and Adaptive Learning Rates for Enhanced Convergence.", "configspace": "", "generation": 65, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b7df5738-e239-453b-932f-2ae32e017b36", "metadata": {"aucs": [0.8028974999397684, 0.8028974999397684, 0.8028974999397684, 0.820162767335356, 0.820162767335356, 0.820162767335356, 0.8268158805027072, 0.8268158805027072, 0.8268158805027072, 0.6912682274538304, 0.6912682274538304, 0.6912682274538304, 0.5844808858752991, 0.5844808858752991, 0.5844808858752991, 0.6828452545688112, 0.6828452545688112, 0.6828452545688112, 0.2069948826304837, 0.2069948826304837, 0.2069948826304837, 0.25479576379989277, 0.25479576379989277, 0.25479576379989277, 0.3096555827229023, 0.3096555827229023, 0.3096555827229023, 0.16803182716129272, 0.16803182716129272, 0.16803182716129272, 0.2125972816080981, 0.2125972816080981, 0.2125972816080981, 0.13420800187083226, 0.13420800187083226, 0.13420800187083226, 0.9543543436153276, 0.9543543436153276, 0.9543543436153276, 0.9635622803614148, 0.9635622803614148, 0.9635622803614148, 0.9785171936615114, 0.9785171936615114, 0.9785171936615114, 0.22746277654182945, 0.22746277654182945, 0.22746277654182945, 0.18213375266531762, 0.18213375266531762, 0.18213375266531762, 0.3027151787666107, 0.3027151787666107, 0.3027151787666107, 0.7746545356265845, 0.7746545356265845, 0.7746545356265845, 0.7911711620707444, 0.7911711620707444, 0.7911711620707444, 0.7824307938694764, 0.7824307938694764, 0.7824307938694764, 0.16018975197729757, 0.16018975197729757, 0.16018975197729757, 0.29362630482925267, 0.29362630482925267, 0.29362630482925267, 0.1862258566090128, 0.1862258566090128, 0.1862258566090128, 0.12864263117106134, 0.12864263117106134, 0.12864263117106134, 0.16862340955315136, 0.16862340955315136, 0.16862340955315136, 0.13688738049704718, 0.13688738049704718, 0.13688738049704718, 0.057365535640381715, 0.057365535640381715, 0.057365535640381715, 0.1599719382778796, 0.1599719382778796, 0.1599719382778796, 0.09815978182277196, 0.09815978182277196, 0.09815978182277196, 0.32809732531911995, 0.32809732531911995, 0.32809732531911995, 0.15989542789680122, 0.15989542789680122, 0.15989542789680122, 0.39450358933421326, 0.39450358933421326, 0.39450358933421326, 0.07182819095400772, 0.07182819095400772, 0.07182819095400772, 0.21867696509157653, 0.21867696509157653, 0.21867696509157653, 0.12758638820913926, 0.12758638820913926, 0.12758638820913926, 0.20600531668127853, 0.20600531668127853, 0.20600531668127853, 0.24645502611711, 0.24645502611711, 0.24645502611711, 0.20271892435046202, 0.20271892435046202, 0.20271892435046202, 0.6010154351823194, 0.6010154351823194, 0.6010154351823194, 0.6173710628607691, 0.6173710628607691, 0.6173710628607691, 0.5525078307042829, 0.5525078307042829, 0.5525078307042829, 0.1220394034446799, 0.1220394034446799, 0.1220394034446799, 0.11876724744881773, 0.11876724744881773, 0.11876724744881773, 0.16418442071346084, 0.16418442071346084, 0.16418442071346084, 0.19307450728368347, 0.19307450728368347, 0.19307450728368347, 0.1564303088932516, 0.1564303088932516, 0.1564303088932516, 0.16070566581260937, 0.16070566581260937, 0.16070566581260937, 0.4104016892617022, 0.4104016892617022, 0.4104016892617022, 0.44735681110297965, 0.44735681110297965, 0.44735681110297965, 0.5117808824782959, 0.5117808824782959, 0.5117808824782959, 0.29691328184405497, 0.29691328184405497, 0.29691328184405497, 0.34080395958329524, 0.34080395958329524, 0.34080395958329524, 0.3056440310160867, 0.3056440310160867, 0.3056440310160867, 0.20509343921024492, 0.20509343921024492, 0.20509343921024492, 0.22041205601336689, 0.22041205601336689, 0.22041205601336689, 0.20323679804723838, 0.20323679804723838, 0.20323679804723838, 0.20667532748988104, 0.20667532748988104, 0.20667532748988104, 0.19966699706438262, 0.19966699706438262, 0.19966699706438262, 0.2858116053381321, 0.2858116053381321, 0.2858116053381321, 0.16301391266713094, 0.16301391266713094, 0.16301391266713094, 0.7239730569828753, 0.7239730569828753, 0.7239730569828753, 0.18129467615580674, 0.18129467615580674, 0.18129467615580674, 0.28515658620773476, 0.28515658620773476, 0.28515658620773476, 0.1935435239197778, 0.1935435239197778, 0.1935435239197778, 0.1467211704148913, 0.1467211704148913, 0.1467211704148913, 0.18991866161784787, 0.18991866161784787, 0.18991866161784787, 0.16535842938777856, 0.16535842938777856, 0.16535842938777856, 0.19316296124109922, 0.19316296124109922, 0.19316296124109922, 0.08535354931102046, 0.08535354931102046, 0.08535354931102046, 0.08660617035399687, 0.08660617035399687, 0.08660617035399687, 0.09014726101582149, 0.09014726101582149, 0.09014726101582149]}, "mutation_prompt": null}
{"id": "2a42287d-bf12-46d1-a8af-8a2d2b9af4fa", "solution": "import numpy as np\n\nclass SelfAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim  # Slightly reduced population size for faster convergence\n        self.initial_mutation_factor = 0.8  # Adjusted initial mutation factor for exploration\n        self.crossover_rate = 0.9  # Increased crossover rate for diversity\n        self.mutation_decay = 0.98  # Optimized decay for mutation factor\n        self.split_factor = 0.5  # Subpopulation split factor\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        evals = self.population_size\n        mutation_factor = self.initial_mutation_factor\n\n        while evals < self.budget:\n            subpop_size = int(self.population_size * self.split_factor)\n            for i in range(self.population_size):\n                idxs = list(range(self.population_size))\n                idxs.remove(i)\n                sample_size = subpop_size if np.random.rand() < 0.5 else self.population_size  # Dynamic subpopulation\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(a + mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n\n                if evals >= self.budget:\n                    break\n\n            mutation_factor *= self.mutation_decay  # Apply decay to mutation factor\n            if evals % (self.population_size // 2) == 0:  # Adapt learning rate dynamically\n                self.crossover_rate = 0.7 + 0.3 * np.random.rand()\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "SelfAdaptiveDifferentialEvolution", "description": "Introduced Self-Adaptive Differential Evolution with Dynamic Subpopulation Strategies and Adaptive Learning Rates for Enhanced Convergence.", "configspace": "", "generation": 65, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b7df5738-e239-453b-932f-2ae32e017b36", "metadata": {"aucs": [0.8028974999397684, 0.8028974999397684, 0.8028974999397684, 0.820162767335356, 0.820162767335356, 0.820162767335356, 0.8268158805027072, 0.8268158805027072, 0.8268158805027072, 0.6912682274538304, 0.6912682274538304, 0.6912682274538304, 0.5844808858752991, 0.5844808858752991, 0.5844808858752991, 0.6828452545688112, 0.6828452545688112, 0.6828452545688112, 0.2069948826304837, 0.2069948826304837, 0.2069948826304837, 0.25479576379989277, 0.25479576379989277, 0.25479576379989277, 0.3096555827229023, 0.3096555827229023, 0.3096555827229023, 0.16803182716129272, 0.16803182716129272, 0.16803182716129272, 0.2125972816080981, 0.2125972816080981, 0.2125972816080981, 0.13420800187083226, 0.13420800187083226, 0.13420800187083226, 0.9543543436153276, 0.9543543436153276, 0.9543543436153276, 0.9635622803614148, 0.9635622803614148, 0.9635622803614148, 0.9785171936615114, 0.9785171936615114, 0.9785171936615114, 0.22746277654182945, 0.22746277654182945, 0.22746277654182945, 0.18213375266531762, 0.18213375266531762, 0.18213375266531762, 0.3027151787666107, 0.3027151787666107, 0.3027151787666107, 0.7746545356265845, 0.7746545356265845, 0.7746545356265845, 0.7911711620707444, 0.7911711620707444, 0.7911711620707444, 0.7824307938694764, 0.7824307938694764, 0.7824307938694764, 0.16018975197729757, 0.16018975197729757, 0.16018975197729757, 0.29362630482925267, 0.29362630482925267, 0.29362630482925267, 0.1862258566090128, 0.1862258566090128, 0.1862258566090128, 0.12864263117106134, 0.12864263117106134, 0.12864263117106134, 0.16862340955315136, 0.16862340955315136, 0.16862340955315136, 0.13688738049704718, 0.13688738049704718, 0.13688738049704718, 0.057365535640381715, 0.057365535640381715, 0.057365535640381715, 0.1599719382778796, 0.1599719382778796, 0.1599719382778796, 0.09815978182277196, 0.09815978182277196, 0.09815978182277196, 0.32809732531911995, 0.32809732531911995, 0.32809732531911995, 0.15989542789680122, 0.15989542789680122, 0.15989542789680122, 0.39450358933421326, 0.39450358933421326, 0.39450358933421326, 0.07182819095400772, 0.07182819095400772, 0.07182819095400772, 0.21867696509157653, 0.21867696509157653, 0.21867696509157653, 0.12758638820913926, 0.12758638820913926, 0.12758638820913926, 0.20600531668127853, 0.20600531668127853, 0.20600531668127853, 0.24645502611711, 0.24645502611711, 0.24645502611711, 0.20271892435046202, 0.20271892435046202, 0.20271892435046202, 0.6010154351823194, 0.6010154351823194, 0.6010154351823194, 0.6173710628607691, 0.6173710628607691, 0.6173710628607691, 0.5525078307042829, 0.5525078307042829, 0.5525078307042829, 0.1220394034446799, 0.1220394034446799, 0.1220394034446799, 0.11876724744881773, 0.11876724744881773, 0.11876724744881773, 0.16418442071346084, 0.16418442071346084, 0.16418442071346084, 0.19307450728368347, 0.19307450728368347, 0.19307450728368347, 0.1564303088932516, 0.1564303088932516, 0.1564303088932516, 0.16070566581260937, 0.16070566581260937, 0.16070566581260937, 0.4104016892617022, 0.4104016892617022, 0.4104016892617022, 0.44735681110297965, 0.44735681110297965, 0.44735681110297965, 0.5117808824782959, 0.5117808824782959, 0.5117808824782959, 0.29691328184405497, 0.29691328184405497, 0.29691328184405497, 0.34080395958329524, 0.34080395958329524, 0.34080395958329524, 0.3056440310160867, 0.3056440310160867, 0.3056440310160867, 0.20509343921024492, 0.20509343921024492, 0.20509343921024492, 0.22041205601336689, 0.22041205601336689, 0.22041205601336689, 0.20323679804723838, 0.20323679804723838, 0.20323679804723838, 0.20667532748988104, 0.20667532748988104, 0.20667532748988104, 0.19966699706438262, 0.19966699706438262, 0.19966699706438262, 0.2858116053381321, 0.2858116053381321, 0.2858116053381321, 0.16301391266713094, 0.16301391266713094, 0.16301391266713094, 0.7239730569828753, 0.7239730569828753, 0.7239730569828753, 0.18129467615580674, 0.18129467615580674, 0.18129467615580674, 0.28515658620773476, 0.28515658620773476, 0.28515658620773476, 0.1935435239197778, 0.1935435239197778, 0.1935435239197778, 0.1467211704148913, 0.1467211704148913, 0.1467211704148913, 0.18991866161784787, 0.18991866161784787, 0.18991866161784787, 0.16535842938777856, 0.16535842938777856, 0.16535842938777856, 0.19316296124109922, 0.19316296124109922, 0.19316296124109922, 0.08535354931102046, 0.08535354931102046, 0.08535354931102046, 0.08660617035399687, 0.08660617035399687, 0.08660617035399687, 0.09014726101582149, 0.09014726101582149, 0.09014726101582149]}, "mutation_prompt": null}
{"id": "e8caea14-862d-4449-a909-0f6b6d6c3592", "solution": "import numpy as np\n\nclass SelfAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim  # Slightly reduced population size for faster convergence\n        self.initial_mutation_factor = 0.8  # Adjusted initial mutation factor for exploration\n        self.crossover_rate = 0.9  # Increased crossover rate for diversity\n        self.mutation_decay = 0.98  # Optimized decay for mutation factor\n        self.split_factor = 0.5  # Subpopulation split factor\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        evals = self.population_size\n        mutation_factor = self.initial_mutation_factor\n\n        while evals < self.budget:\n            subpop_size = int(self.population_size * self.split_factor)\n            for i in range(self.population_size):\n                idxs = list(range(self.population_size))\n                idxs.remove(i)\n                sample_size = subpop_size if np.random.rand() < 0.5 else self.population_size  # Dynamic subpopulation\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(a + mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n\n                if evals >= self.budget:\n                    break\n\n            mutation_factor *= self.mutation_decay  # Apply decay to mutation factor\n            if evals % (self.population_size // 2) == 0:  # Adapt learning rate dynamically\n                self.crossover_rate = 0.7 + 0.3 * np.random.rand()\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "SelfAdaptiveDifferentialEvolution", "description": "Introduced Self-Adaptive Differential Evolution with Dynamic Subpopulation Strategies and Adaptive Learning Rates for Enhanced Convergence.", "configspace": "", "generation": 65, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b7df5738-e239-453b-932f-2ae32e017b36", "metadata": {"aucs": [0.8028974999397684, 0.8028974999397684, 0.8028974999397684, 0.820162767335356, 0.820162767335356, 0.820162767335356, 0.8268158805027072, 0.8268158805027072, 0.8268158805027072, 0.6912682274538304, 0.6912682274538304, 0.6912682274538304, 0.5844808858752991, 0.5844808858752991, 0.5844808858752991, 0.6828452545688112, 0.6828452545688112, 0.6828452545688112, 0.2069948826304837, 0.2069948826304837, 0.2069948826304837, 0.25479576379989277, 0.25479576379989277, 0.25479576379989277, 0.3096555827229023, 0.3096555827229023, 0.3096555827229023, 0.16803182716129272, 0.16803182716129272, 0.16803182716129272, 0.2125972816080981, 0.2125972816080981, 0.2125972816080981, 0.13420800187083226, 0.13420800187083226, 0.13420800187083226, 0.9543543436153276, 0.9543543436153276, 0.9543543436153276, 0.9635622803614148, 0.9635622803614148, 0.9635622803614148, 0.9785171936615114, 0.9785171936615114, 0.9785171936615114, 0.22746277654182945, 0.22746277654182945, 0.22746277654182945, 0.18213375266531762, 0.18213375266531762, 0.18213375266531762, 0.3027151787666107, 0.3027151787666107, 0.3027151787666107, 0.7746545356265845, 0.7746545356265845, 0.7746545356265845, 0.7911711620707444, 0.7911711620707444, 0.7911711620707444, 0.7824307938694764, 0.7824307938694764, 0.7824307938694764, 0.16018975197729757, 0.16018975197729757, 0.16018975197729757, 0.29362630482925267, 0.29362630482925267, 0.29362630482925267, 0.1862258566090128, 0.1862258566090128, 0.1862258566090128, 0.12864263117106134, 0.12864263117106134, 0.12864263117106134, 0.16862340955315136, 0.16862340955315136, 0.16862340955315136, 0.13688738049704718, 0.13688738049704718, 0.13688738049704718, 0.057365535640381715, 0.057365535640381715, 0.057365535640381715, 0.1599719382778796, 0.1599719382778796, 0.1599719382778796, 0.09815978182277196, 0.09815978182277196, 0.09815978182277196, 0.32809732531911995, 0.32809732531911995, 0.32809732531911995, 0.15989542789680122, 0.15989542789680122, 0.15989542789680122, 0.39450358933421326, 0.39450358933421326, 0.39450358933421326, 0.07182819095400772, 0.07182819095400772, 0.07182819095400772, 0.21867696509157653, 0.21867696509157653, 0.21867696509157653, 0.12758638820913926, 0.12758638820913926, 0.12758638820913926, 0.20600531668127853, 0.20600531668127853, 0.20600531668127853, 0.24645502611711, 0.24645502611711, 0.24645502611711, 0.20271892435046202, 0.20271892435046202, 0.20271892435046202, 0.6010154351823194, 0.6010154351823194, 0.6010154351823194, 0.6173710628607691, 0.6173710628607691, 0.6173710628607691, 0.5525078307042829, 0.5525078307042829, 0.5525078307042829, 0.1220394034446799, 0.1220394034446799, 0.1220394034446799, 0.11876724744881773, 0.11876724744881773, 0.11876724744881773, 0.16418442071346084, 0.16418442071346084, 0.16418442071346084, 0.19307450728368347, 0.19307450728368347, 0.19307450728368347, 0.1564303088932516, 0.1564303088932516, 0.1564303088932516, 0.16070566581260937, 0.16070566581260937, 0.16070566581260937, 0.4104016892617022, 0.4104016892617022, 0.4104016892617022, 0.44735681110297965, 0.44735681110297965, 0.44735681110297965, 0.5117808824782959, 0.5117808824782959, 0.5117808824782959, 0.29691328184405497, 0.29691328184405497, 0.29691328184405497, 0.34080395958329524, 0.34080395958329524, 0.34080395958329524, 0.3056440310160867, 0.3056440310160867, 0.3056440310160867, 0.20509343921024492, 0.20509343921024492, 0.20509343921024492, 0.22041205601336689, 0.22041205601336689, 0.22041205601336689, 0.20323679804723838, 0.20323679804723838, 0.20323679804723838, 0.20667532748988104, 0.20667532748988104, 0.20667532748988104, 0.19966699706438262, 0.19966699706438262, 0.19966699706438262, 0.2858116053381321, 0.2858116053381321, 0.2858116053381321, 0.16301391266713094, 0.16301391266713094, 0.16301391266713094, 0.7239730569828753, 0.7239730569828753, 0.7239730569828753, 0.18129467615580674, 0.18129467615580674, 0.18129467615580674, 0.28515658620773476, 0.28515658620773476, 0.28515658620773476, 0.1935435239197778, 0.1935435239197778, 0.1935435239197778, 0.1467211704148913, 0.1467211704148913, 0.1467211704148913, 0.18991866161784787, 0.18991866161784787, 0.18991866161784787, 0.16535842938777856, 0.16535842938777856, 0.16535842938777856, 0.19316296124109922, 0.19316296124109922, 0.19316296124109922, 0.08535354931102046, 0.08535354931102046, 0.08535354931102046, 0.08660617035399687, 0.08660617035399687, 0.08660617035399687, 0.09014726101582149, 0.09014726101582149, 0.09014726101582149]}, "mutation_prompt": null}
{"id": "944bc61c-3608-418e-82ea-0620e6363eea", "solution": "import numpy as np\n\nclass SelfAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim  # Slightly reduced population size for faster convergence\n        self.initial_mutation_factor = 0.8  # Adjusted initial mutation factor for exploration\n        self.crossover_rate = 0.9  # Increased crossover rate for diversity\n        self.mutation_decay = 0.98  # Optimized decay for mutation factor\n        self.split_factor = 0.5  # Subpopulation split factor\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        evals = self.population_size\n        mutation_factor = self.initial_mutation_factor\n\n        while evals < self.budget:\n            subpop_size = int(self.population_size * self.split_factor)\n            for i in range(self.population_size):\n                idxs = list(range(self.population_size))\n                idxs.remove(i)\n                sample_size = subpop_size if np.random.rand() < 0.5 else self.population_size  # Dynamic subpopulation\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(a + mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n\n                if evals >= self.budget:\n                    break\n\n            mutation_factor *= self.mutation_decay  # Apply decay to mutation factor\n            if evals % (self.population_size // 2) == 0:  # Adapt learning rate dynamically\n                self.crossover_rate = 0.7 + 0.3 * np.random.rand()\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "SelfAdaptiveDifferentialEvolution", "description": "Introduced Self-Adaptive Differential Evolution with Dynamic Subpopulation Strategies and Adaptive Learning Rates for Enhanced Convergence.", "configspace": "", "generation": 65, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b7df5738-e239-453b-932f-2ae32e017b36", "metadata": {"aucs": [0.8028974999397684, 0.8028974999397684, 0.8028974999397684, 0.820162767335356, 0.820162767335356, 0.820162767335356, 0.8268158805027072, 0.8268158805027072, 0.8268158805027072, 0.6912682274538304, 0.6912682274538304, 0.6912682274538304, 0.5844808858752991, 0.5844808858752991, 0.5844808858752991, 0.6828452545688112, 0.6828452545688112, 0.6828452545688112, 0.2069948826304837, 0.2069948826304837, 0.2069948826304837, 0.25479576379989277, 0.25479576379989277, 0.25479576379989277, 0.3096555827229023, 0.3096555827229023, 0.3096555827229023, 0.16803182716129272, 0.16803182716129272, 0.16803182716129272, 0.2125972816080981, 0.2125972816080981, 0.2125972816080981, 0.13420800187083226, 0.13420800187083226, 0.13420800187083226, 0.9543543436153276, 0.9543543436153276, 0.9543543436153276, 0.9635622803614148, 0.9635622803614148, 0.9635622803614148, 0.9785171936615114, 0.9785171936615114, 0.9785171936615114, 0.22746277654182945, 0.22746277654182945, 0.22746277654182945, 0.18213375266531762, 0.18213375266531762, 0.18213375266531762, 0.3027151787666107, 0.3027151787666107, 0.3027151787666107, 0.7746545356265845, 0.7746545356265845, 0.7746545356265845, 0.7911711620707444, 0.7911711620707444, 0.7911711620707444, 0.7824307938694764, 0.7824307938694764, 0.7824307938694764, 0.16018975197729757, 0.16018975197729757, 0.16018975197729757, 0.29362630482925267, 0.29362630482925267, 0.29362630482925267, 0.1862258566090128, 0.1862258566090128, 0.1862258566090128, 0.12864263117106134, 0.12864263117106134, 0.12864263117106134, 0.16862340955315136, 0.16862340955315136, 0.16862340955315136, 0.13688738049704718, 0.13688738049704718, 0.13688738049704718, 0.057365535640381715, 0.057365535640381715, 0.057365535640381715, 0.1599719382778796, 0.1599719382778796, 0.1599719382778796, 0.09815978182277196, 0.09815978182277196, 0.09815978182277196, 0.32809732531911995, 0.32809732531911995, 0.32809732531911995, 0.15989542789680122, 0.15989542789680122, 0.15989542789680122, 0.39450358933421326, 0.39450358933421326, 0.39450358933421326, 0.07182819095400772, 0.07182819095400772, 0.07182819095400772, 0.21867696509157653, 0.21867696509157653, 0.21867696509157653, 0.12758638820913926, 0.12758638820913926, 0.12758638820913926, 0.20600531668127853, 0.20600531668127853, 0.20600531668127853, 0.24645502611711, 0.24645502611711, 0.24645502611711, 0.20271892435046202, 0.20271892435046202, 0.20271892435046202, 0.6010154351823194, 0.6010154351823194, 0.6010154351823194, 0.6173710628607691, 0.6173710628607691, 0.6173710628607691, 0.5525078307042829, 0.5525078307042829, 0.5525078307042829, 0.1220394034446799, 0.1220394034446799, 0.1220394034446799, 0.11876724744881773, 0.11876724744881773, 0.11876724744881773, 0.16418442071346084, 0.16418442071346084, 0.16418442071346084, 0.19307450728368347, 0.19307450728368347, 0.19307450728368347, 0.1564303088932516, 0.1564303088932516, 0.1564303088932516, 0.16070566581260937, 0.16070566581260937, 0.16070566581260937, 0.4104016892617022, 0.4104016892617022, 0.4104016892617022, 0.44735681110297965, 0.44735681110297965, 0.44735681110297965, 0.5117808824782959, 0.5117808824782959, 0.5117808824782959, 0.29691328184405497, 0.29691328184405497, 0.29691328184405497, 0.34080395958329524, 0.34080395958329524, 0.34080395958329524, 0.3056440310160867, 0.3056440310160867, 0.3056440310160867, 0.20509343921024492, 0.20509343921024492, 0.20509343921024492, 0.22041205601336689, 0.22041205601336689, 0.22041205601336689, 0.20323679804723838, 0.20323679804723838, 0.20323679804723838, 0.20667532748988104, 0.20667532748988104, 0.20667532748988104, 0.19966699706438262, 0.19966699706438262, 0.19966699706438262, 0.2858116053381321, 0.2858116053381321, 0.2858116053381321, 0.16301391266713094, 0.16301391266713094, 0.16301391266713094, 0.7239730569828753, 0.7239730569828753, 0.7239730569828753, 0.18129467615580674, 0.18129467615580674, 0.18129467615580674, 0.28515658620773476, 0.28515658620773476, 0.28515658620773476, 0.1935435239197778, 0.1935435239197778, 0.1935435239197778, 0.1467211704148913, 0.1467211704148913, 0.1467211704148913, 0.18991866161784787, 0.18991866161784787, 0.18991866161784787, 0.16535842938777856, 0.16535842938777856, 0.16535842938777856, 0.19316296124109922, 0.19316296124109922, 0.19316296124109922, 0.08535354931102046, 0.08535354931102046, 0.08535354931102046, 0.08660617035399687, 0.08660617035399687, 0.08660617035399687, 0.09014726101582149, 0.09014726101582149, 0.09014726101582149]}, "mutation_prompt": null}
{"id": "6d4c3983-04ef-4e62-b61e-ba3b029e375b", "solution": "import numpy as np\n\nclass SelfAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim  # Slightly reduced population size for faster convergence\n        self.initial_mutation_factor = 0.8  # Adjusted initial mutation factor for exploration\n        self.crossover_rate = 0.9  # Increased crossover rate for diversity\n        self.mutation_decay = 0.98  # Optimized decay for mutation factor\n        self.split_factor = 0.5  # Subpopulation split factor\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        evals = self.population_size\n        mutation_factor = self.initial_mutation_factor\n\n        while evals < self.budget:\n            subpop_size = int(self.population_size * self.split_factor)\n            for i in range(self.population_size):\n                idxs = list(range(self.population_size))\n                idxs.remove(i)\n                sample_size = subpop_size if np.random.rand() < 0.5 else self.population_size  # Dynamic subpopulation\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(a + mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n\n                if evals >= self.budget:\n                    break\n\n            mutation_factor *= self.mutation_decay  # Apply decay to mutation factor\n            if evals % (self.population_size // 2) == 0:  # Adapt learning rate dynamically\n                self.crossover_rate = 0.7 + 0.3 * np.random.rand()\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "SelfAdaptiveDifferentialEvolution", "description": "Introduced Self-Adaptive Differential Evolution with Dynamic Subpopulation Strategies and Adaptive Learning Rates for Enhanced Convergence.", "configspace": "", "generation": 65, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b7df5738-e239-453b-932f-2ae32e017b36", "metadata": {"aucs": [0.8028974999397684, 0.8028974999397684, 0.8028974999397684, 0.820162767335356, 0.820162767335356, 0.820162767335356, 0.8268158805027072, 0.8268158805027072, 0.8268158805027072, 0.6912682274538304, 0.6912682274538304, 0.6912682274538304, 0.5844808858752991, 0.5844808858752991, 0.5844808858752991, 0.6828452545688112, 0.6828452545688112, 0.6828452545688112, 0.2069948826304837, 0.2069948826304837, 0.2069948826304837, 0.25479576379989277, 0.25479576379989277, 0.25479576379989277, 0.3096555827229023, 0.3096555827229023, 0.3096555827229023, 0.16803182716129272, 0.16803182716129272, 0.16803182716129272, 0.2125972816080981, 0.2125972816080981, 0.2125972816080981, 0.13420800187083226, 0.13420800187083226, 0.13420800187083226, 0.9543543436153276, 0.9543543436153276, 0.9543543436153276, 0.9635622803614148, 0.9635622803614148, 0.9635622803614148, 0.9785171936615114, 0.9785171936615114, 0.9785171936615114, 0.22746277654182945, 0.22746277654182945, 0.22746277654182945, 0.18213375266531762, 0.18213375266531762, 0.18213375266531762, 0.3027151787666107, 0.3027151787666107, 0.3027151787666107, 0.7746545356265845, 0.7746545356265845, 0.7746545356265845, 0.7911711620707444, 0.7911711620707444, 0.7911711620707444, 0.7824307938694764, 0.7824307938694764, 0.7824307938694764, 0.16018975197729757, 0.16018975197729757, 0.16018975197729757, 0.29362630482925267, 0.29362630482925267, 0.29362630482925267, 0.1862258566090128, 0.1862258566090128, 0.1862258566090128, 0.12864263117106134, 0.12864263117106134, 0.12864263117106134, 0.16862340955315136, 0.16862340955315136, 0.16862340955315136, 0.13688738049704718, 0.13688738049704718, 0.13688738049704718, 0.057365535640381715, 0.057365535640381715, 0.057365535640381715, 0.1599719382778796, 0.1599719382778796, 0.1599719382778796, 0.09815978182277196, 0.09815978182277196, 0.09815978182277196, 0.32809732531911995, 0.32809732531911995, 0.32809732531911995, 0.15989542789680122, 0.15989542789680122, 0.15989542789680122, 0.39450358933421326, 0.39450358933421326, 0.39450358933421326, 0.07182819095400772, 0.07182819095400772, 0.07182819095400772, 0.21867696509157653, 0.21867696509157653, 0.21867696509157653, 0.12758638820913926, 0.12758638820913926, 0.12758638820913926, 0.20600531668127853, 0.20600531668127853, 0.20600531668127853, 0.24645502611711, 0.24645502611711, 0.24645502611711, 0.20271892435046202, 0.20271892435046202, 0.20271892435046202, 0.6010154351823194, 0.6010154351823194, 0.6010154351823194, 0.6173710628607691, 0.6173710628607691, 0.6173710628607691, 0.5525078307042829, 0.5525078307042829, 0.5525078307042829, 0.1220394034446799, 0.1220394034446799, 0.1220394034446799, 0.11876724744881773, 0.11876724744881773, 0.11876724744881773, 0.16418442071346084, 0.16418442071346084, 0.16418442071346084, 0.19307450728368347, 0.19307450728368347, 0.19307450728368347, 0.1564303088932516, 0.1564303088932516, 0.1564303088932516, 0.16070566581260937, 0.16070566581260937, 0.16070566581260937, 0.4104016892617022, 0.4104016892617022, 0.4104016892617022, 0.44735681110297965, 0.44735681110297965, 0.44735681110297965, 0.5117808824782959, 0.5117808824782959, 0.5117808824782959, 0.29691328184405497, 0.29691328184405497, 0.29691328184405497, 0.34080395958329524, 0.34080395958329524, 0.34080395958329524, 0.3056440310160867, 0.3056440310160867, 0.3056440310160867, 0.20509343921024492, 0.20509343921024492, 0.20509343921024492, 0.22041205601336689, 0.22041205601336689, 0.22041205601336689, 0.20323679804723838, 0.20323679804723838, 0.20323679804723838, 0.20667532748988104, 0.20667532748988104, 0.20667532748988104, 0.19966699706438262, 0.19966699706438262, 0.19966699706438262, 0.2858116053381321, 0.2858116053381321, 0.2858116053381321, 0.16301391266713094, 0.16301391266713094, 0.16301391266713094, 0.7239730569828753, 0.7239730569828753, 0.7239730569828753, 0.18129467615580674, 0.18129467615580674, 0.18129467615580674, 0.28515658620773476, 0.28515658620773476, 0.28515658620773476, 0.1935435239197778, 0.1935435239197778, 0.1935435239197778, 0.1467211704148913, 0.1467211704148913, 0.1467211704148913, 0.18991866161784787, 0.18991866161784787, 0.18991866161784787, 0.16535842938777856, 0.16535842938777856, 0.16535842938777856, 0.19316296124109922, 0.19316296124109922, 0.19316296124109922, 0.08535354931102046, 0.08535354931102046, 0.08535354931102046, 0.08660617035399687, 0.08660617035399687, 0.08660617035399687, 0.09014726101582149, 0.09014726101582149, 0.09014726101582149]}, "mutation_prompt": null}
{"id": "c3257278-295a-47f5-b7c0-c9479db2ece5", "solution": "import numpy as np\n\nclass SelfAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim  # Slightly reduced population size for faster convergence\n        self.initial_mutation_factor = 0.8  # Adjusted initial mutation factor for exploration\n        self.crossover_rate = 0.9  # Increased crossover rate for diversity\n        self.mutation_decay = 0.98  # Optimized decay for mutation factor\n        self.split_factor = 0.5  # Subpopulation split factor\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        evals = self.population_size\n        mutation_factor = self.initial_mutation_factor\n\n        while evals < self.budget:\n            subpop_size = int(self.population_size * self.split_factor)\n            for i in range(self.population_size):\n                idxs = list(range(self.population_size))\n                idxs.remove(i)\n                sample_size = subpop_size if np.random.rand() < 0.5 else self.population_size  # Dynamic subpopulation\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(a + mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n\n                if evals >= self.budget:\n                    break\n\n            mutation_factor *= self.mutation_decay  # Apply decay to mutation factor\n            if evals % (self.population_size // 2) == 0:  # Adapt learning rate dynamically\n                self.crossover_rate = 0.7 + 0.3 * np.random.rand()\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "SelfAdaptiveDifferentialEvolution", "description": "Introduced Self-Adaptive Differential Evolution with Dynamic Subpopulation Strategies and Adaptive Learning Rates for Enhanced Convergence.", "configspace": "", "generation": 65, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b7df5738-e239-453b-932f-2ae32e017b36", "metadata": {"aucs": [0.8028974999397684, 0.8028974999397684, 0.8028974999397684, 0.820162767335356, 0.820162767335356, 0.820162767335356, 0.8268158805027072, 0.8268158805027072, 0.8268158805027072, 0.6912682274538304, 0.6912682274538304, 0.6912682274538304, 0.5844808858752991, 0.5844808858752991, 0.5844808858752991, 0.6828452545688112, 0.6828452545688112, 0.6828452545688112, 0.2069948826304837, 0.2069948826304837, 0.2069948826304837, 0.25479576379989277, 0.25479576379989277, 0.25479576379989277, 0.3096555827229023, 0.3096555827229023, 0.3096555827229023, 0.16803182716129272, 0.16803182716129272, 0.16803182716129272, 0.2125972816080981, 0.2125972816080981, 0.2125972816080981, 0.13420800187083226, 0.13420800187083226, 0.13420800187083226, 0.9543543436153276, 0.9543543436153276, 0.9543543436153276, 0.9635622803614148, 0.9635622803614148, 0.9635622803614148, 0.9785171936615114, 0.9785171936615114, 0.9785171936615114, 0.22746277654182945, 0.22746277654182945, 0.22746277654182945, 0.18213375266531762, 0.18213375266531762, 0.18213375266531762, 0.3027151787666107, 0.3027151787666107, 0.3027151787666107, 0.7746545356265845, 0.7746545356265845, 0.7746545356265845, 0.7911711620707444, 0.7911711620707444, 0.7911711620707444, 0.7824307938694764, 0.7824307938694764, 0.7824307938694764, 0.16018975197729757, 0.16018975197729757, 0.16018975197729757, 0.29362630482925267, 0.29362630482925267, 0.29362630482925267, 0.1862258566090128, 0.1862258566090128, 0.1862258566090128, 0.12864263117106134, 0.12864263117106134, 0.12864263117106134, 0.16862340955315136, 0.16862340955315136, 0.16862340955315136, 0.13688738049704718, 0.13688738049704718, 0.13688738049704718, 0.057365535640381715, 0.057365535640381715, 0.057365535640381715, 0.1599719382778796, 0.1599719382778796, 0.1599719382778796, 0.09815978182277196, 0.09815978182277196, 0.09815978182277196, 0.32809732531911995, 0.32809732531911995, 0.32809732531911995, 0.15989542789680122, 0.15989542789680122, 0.15989542789680122, 0.39450358933421326, 0.39450358933421326, 0.39450358933421326, 0.07182819095400772, 0.07182819095400772, 0.07182819095400772, 0.21867696509157653, 0.21867696509157653, 0.21867696509157653, 0.12758638820913926, 0.12758638820913926, 0.12758638820913926, 0.20600531668127853, 0.20600531668127853, 0.20600531668127853, 0.24645502611711, 0.24645502611711, 0.24645502611711, 0.20271892435046202, 0.20271892435046202, 0.20271892435046202, 0.6010154351823194, 0.6010154351823194, 0.6010154351823194, 0.6173710628607691, 0.6173710628607691, 0.6173710628607691, 0.5525078307042829, 0.5525078307042829, 0.5525078307042829, 0.1220394034446799, 0.1220394034446799, 0.1220394034446799, 0.11876724744881773, 0.11876724744881773, 0.11876724744881773, 0.16418442071346084, 0.16418442071346084, 0.16418442071346084, 0.19307450728368347, 0.19307450728368347, 0.19307450728368347, 0.1564303088932516, 0.1564303088932516, 0.1564303088932516, 0.16070566581260937, 0.16070566581260937, 0.16070566581260937, 0.4104016892617022, 0.4104016892617022, 0.4104016892617022, 0.44735681110297965, 0.44735681110297965, 0.44735681110297965, 0.5117808824782959, 0.5117808824782959, 0.5117808824782959, 0.29691328184405497, 0.29691328184405497, 0.29691328184405497, 0.34080395958329524, 0.34080395958329524, 0.34080395958329524, 0.3056440310160867, 0.3056440310160867, 0.3056440310160867, 0.20509343921024492, 0.20509343921024492, 0.20509343921024492, 0.22041205601336689, 0.22041205601336689, 0.22041205601336689, 0.20323679804723838, 0.20323679804723838, 0.20323679804723838, 0.20667532748988104, 0.20667532748988104, 0.20667532748988104, 0.19966699706438262, 0.19966699706438262, 0.19966699706438262, 0.2858116053381321, 0.2858116053381321, 0.2858116053381321, 0.16301391266713094, 0.16301391266713094, 0.16301391266713094, 0.7239730569828753, 0.7239730569828753, 0.7239730569828753, 0.18129467615580674, 0.18129467615580674, 0.18129467615580674, 0.28515658620773476, 0.28515658620773476, 0.28515658620773476, 0.1935435239197778, 0.1935435239197778, 0.1935435239197778, 0.1467211704148913, 0.1467211704148913, 0.1467211704148913, 0.18991866161784787, 0.18991866161784787, 0.18991866161784787, 0.16535842938777856, 0.16535842938777856, 0.16535842938777856, 0.19316296124109922, 0.19316296124109922, 0.19316296124109922, 0.08535354931102046, 0.08535354931102046, 0.08535354931102046, 0.08660617035399687, 0.08660617035399687, 0.08660617035399687, 0.09014726101582149, 0.09014726101582149, 0.09014726101582149]}, "mutation_prompt": null}
{"id": "7b8c04aa-5e60-4ef6-ab63-401c8ab8a069", "solution": "import numpy as np\n\nclass SelfAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim  # Slightly reduced population size for faster convergence\n        self.initial_mutation_factor = 0.8  # Adjusted initial mutation factor for exploration\n        self.crossover_rate = 0.9  # Increased crossover rate for diversity\n        self.mutation_decay = 0.98  # Optimized decay for mutation factor\n        self.split_factor = 0.5  # Subpopulation split factor\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        evals = self.population_size\n        mutation_factor = self.initial_mutation_factor\n\n        while evals < self.budget:\n            subpop_size = int(self.population_size * self.split_factor)\n            for i in range(self.population_size):\n                idxs = list(range(self.population_size))\n                idxs.remove(i)\n                sample_size = subpop_size if np.random.rand() < 0.5 else self.population_size  # Dynamic subpopulation\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(a + mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n\n                if evals >= self.budget:\n                    break\n\n            mutation_factor *= self.mutation_decay  # Apply decay to mutation factor\n            if evals % (self.population_size // 2) == 0:  # Adapt learning rate dynamically\n                self.crossover_rate = 0.7 + 0.3 * np.random.rand()\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "SelfAdaptiveDifferentialEvolution", "description": "Introduced Self-Adaptive Differential Evolution with Dynamic Subpopulation Strategies and Adaptive Learning Rates for Enhanced Convergence.", "configspace": "", "generation": 65, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b7df5738-e239-453b-932f-2ae32e017b36", "metadata": {"aucs": [0.8028974999397684, 0.8028974999397684, 0.8028974999397684, 0.820162767335356, 0.820162767335356, 0.820162767335356, 0.8268158805027072, 0.8268158805027072, 0.8268158805027072, 0.6912682274538304, 0.6912682274538304, 0.6912682274538304, 0.5844808858752991, 0.5844808858752991, 0.5844808858752991, 0.6828452545688112, 0.6828452545688112, 0.6828452545688112, 0.2069948826304837, 0.2069948826304837, 0.2069948826304837, 0.25479576379989277, 0.25479576379989277, 0.25479576379989277, 0.3096555827229023, 0.3096555827229023, 0.3096555827229023, 0.16803182716129272, 0.16803182716129272, 0.16803182716129272, 0.2125972816080981, 0.2125972816080981, 0.2125972816080981, 0.13420800187083226, 0.13420800187083226, 0.13420800187083226, 0.9543543436153276, 0.9543543436153276, 0.9543543436153276, 0.9635622803614148, 0.9635622803614148, 0.9635622803614148, 0.9785171936615114, 0.9785171936615114, 0.9785171936615114, 0.22746277654182945, 0.22746277654182945, 0.22746277654182945, 0.18213375266531762, 0.18213375266531762, 0.18213375266531762, 0.3027151787666107, 0.3027151787666107, 0.3027151787666107, 0.7746545356265845, 0.7746545356265845, 0.7746545356265845, 0.7911711620707444, 0.7911711620707444, 0.7911711620707444, 0.7824307938694764, 0.7824307938694764, 0.7824307938694764, 0.16018975197729757, 0.16018975197729757, 0.16018975197729757, 0.29362630482925267, 0.29362630482925267, 0.29362630482925267, 0.1862258566090128, 0.1862258566090128, 0.1862258566090128, 0.12864263117106134, 0.12864263117106134, 0.12864263117106134, 0.16862340955315136, 0.16862340955315136, 0.16862340955315136, 0.13688738049704718, 0.13688738049704718, 0.13688738049704718, 0.057365535640381715, 0.057365535640381715, 0.057365535640381715, 0.1599719382778796, 0.1599719382778796, 0.1599719382778796, 0.09815978182277196, 0.09815978182277196, 0.09815978182277196, 0.32809732531911995, 0.32809732531911995, 0.32809732531911995, 0.15989542789680122, 0.15989542789680122, 0.15989542789680122, 0.39450358933421326, 0.39450358933421326, 0.39450358933421326, 0.07182819095400772, 0.07182819095400772, 0.07182819095400772, 0.21867696509157653, 0.21867696509157653, 0.21867696509157653, 0.12758638820913926, 0.12758638820913926, 0.12758638820913926, 0.20600531668127853, 0.20600531668127853, 0.20600531668127853, 0.24645502611711, 0.24645502611711, 0.24645502611711, 0.20271892435046202, 0.20271892435046202, 0.20271892435046202, 0.6010154351823194, 0.6010154351823194, 0.6010154351823194, 0.6173710628607691, 0.6173710628607691, 0.6173710628607691, 0.5525078307042829, 0.5525078307042829, 0.5525078307042829, 0.1220394034446799, 0.1220394034446799, 0.1220394034446799, 0.11876724744881773, 0.11876724744881773, 0.11876724744881773, 0.16418442071346084, 0.16418442071346084, 0.16418442071346084, 0.19307450728368347, 0.19307450728368347, 0.19307450728368347, 0.1564303088932516, 0.1564303088932516, 0.1564303088932516, 0.16070566581260937, 0.16070566581260937, 0.16070566581260937, 0.4104016892617022, 0.4104016892617022, 0.4104016892617022, 0.44735681110297965, 0.44735681110297965, 0.44735681110297965, 0.5117808824782959, 0.5117808824782959, 0.5117808824782959, 0.29691328184405497, 0.29691328184405497, 0.29691328184405497, 0.34080395958329524, 0.34080395958329524, 0.34080395958329524, 0.3056440310160867, 0.3056440310160867, 0.3056440310160867, 0.20509343921024492, 0.20509343921024492, 0.20509343921024492, 0.22041205601336689, 0.22041205601336689, 0.22041205601336689, 0.20323679804723838, 0.20323679804723838, 0.20323679804723838, 0.20667532748988104, 0.20667532748988104, 0.20667532748988104, 0.19966699706438262, 0.19966699706438262, 0.19966699706438262, 0.2858116053381321, 0.2858116053381321, 0.2858116053381321, 0.16301391266713094, 0.16301391266713094, 0.16301391266713094, 0.7239730569828753, 0.7239730569828753, 0.7239730569828753, 0.18129467615580674, 0.18129467615580674, 0.18129467615580674, 0.28515658620773476, 0.28515658620773476, 0.28515658620773476, 0.1935435239197778, 0.1935435239197778, 0.1935435239197778, 0.1467211704148913, 0.1467211704148913, 0.1467211704148913, 0.18991866161784787, 0.18991866161784787, 0.18991866161784787, 0.16535842938777856, 0.16535842938777856, 0.16535842938777856, 0.19316296124109922, 0.19316296124109922, 0.19316296124109922, 0.08535354931102046, 0.08535354931102046, 0.08535354931102046, 0.08660617035399687, 0.08660617035399687, 0.08660617035399687, 0.09014726101582149, 0.09014726101582149, 0.09014726101582149]}, "mutation_prompt": null}
{"id": "ed8e3e7e-80e7-4555-bada-96be32e20ef9", "solution": "import numpy as np\n\nclass SelfAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim  # Slightly reduced population size for faster convergence\n        self.initial_mutation_factor = 0.8  # Adjusted initial mutation factor for exploration\n        self.crossover_rate = 0.9  # Increased crossover rate for diversity\n        self.mutation_decay = 0.98  # Optimized decay for mutation factor\n        self.split_factor = 0.5  # Subpopulation split factor\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        evals = self.population_size\n        mutation_factor = self.initial_mutation_factor\n\n        while evals < self.budget:\n            subpop_size = int(self.population_size * self.split_factor)\n            for i in range(self.population_size):\n                idxs = list(range(self.population_size))\n                idxs.remove(i)\n                sample_size = subpop_size if np.random.rand() < 0.5 else self.population_size  # Dynamic subpopulation\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(a + mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n\n                if evals >= self.budget:\n                    break\n\n            mutation_factor *= self.mutation_decay  # Apply decay to mutation factor\n            if evals % (self.population_size // 2) == 0:  # Adapt learning rate dynamically\n                self.crossover_rate = 0.7 + 0.3 * np.random.rand()\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "SelfAdaptiveDifferentialEvolution", "description": "Introduced Self-Adaptive Differential Evolution with Dynamic Subpopulation Strategies and Adaptive Learning Rates for Enhanced Convergence.", "configspace": "", "generation": 65, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b7df5738-e239-453b-932f-2ae32e017b36", "metadata": {"aucs": [0.8028974999397684, 0.8028974999397684, 0.8028974999397684, 0.820162767335356, 0.820162767335356, 0.820162767335356, 0.8268158805027072, 0.8268158805027072, 0.8268158805027072, 0.6912682274538304, 0.6912682274538304, 0.6912682274538304, 0.5844808858752991, 0.5844808858752991, 0.5844808858752991, 0.6828452545688112, 0.6828452545688112, 0.6828452545688112, 0.2069948826304837, 0.2069948826304837, 0.2069948826304837, 0.25479576379989277, 0.25479576379989277, 0.25479576379989277, 0.3096555827229023, 0.3096555827229023, 0.3096555827229023, 0.16803182716129272, 0.16803182716129272, 0.16803182716129272, 0.2125972816080981, 0.2125972816080981, 0.2125972816080981, 0.13420800187083226, 0.13420800187083226, 0.13420800187083226, 0.9543543436153276, 0.9543543436153276, 0.9543543436153276, 0.9635622803614148, 0.9635622803614148, 0.9635622803614148, 0.9785171936615114, 0.9785171936615114, 0.9785171936615114, 0.22746277654182945, 0.22746277654182945, 0.22746277654182945, 0.18213375266531762, 0.18213375266531762, 0.18213375266531762, 0.3027151787666107, 0.3027151787666107, 0.3027151787666107, 0.7746545356265845, 0.7746545356265845, 0.7746545356265845, 0.7911711620707444, 0.7911711620707444, 0.7911711620707444, 0.7824307938694764, 0.7824307938694764, 0.7824307938694764, 0.16018975197729757, 0.16018975197729757, 0.16018975197729757, 0.29362630482925267, 0.29362630482925267, 0.29362630482925267, 0.1862258566090128, 0.1862258566090128, 0.1862258566090128, 0.12864263117106134, 0.12864263117106134, 0.12864263117106134, 0.16862340955315136, 0.16862340955315136, 0.16862340955315136, 0.13688738049704718, 0.13688738049704718, 0.13688738049704718, 0.057365535640381715, 0.057365535640381715, 0.057365535640381715, 0.1599719382778796, 0.1599719382778796, 0.1599719382778796, 0.09815978182277196, 0.09815978182277196, 0.09815978182277196, 0.32809732531911995, 0.32809732531911995, 0.32809732531911995, 0.15989542789680122, 0.15989542789680122, 0.15989542789680122, 0.39450358933421326, 0.39450358933421326, 0.39450358933421326, 0.07182819095400772, 0.07182819095400772, 0.07182819095400772, 0.21867696509157653, 0.21867696509157653, 0.21867696509157653, 0.12758638820913926, 0.12758638820913926, 0.12758638820913926, 0.20600531668127853, 0.20600531668127853, 0.20600531668127853, 0.24645502611711, 0.24645502611711, 0.24645502611711, 0.20271892435046202, 0.20271892435046202, 0.20271892435046202, 0.6010154351823194, 0.6010154351823194, 0.6010154351823194, 0.6173710628607691, 0.6173710628607691, 0.6173710628607691, 0.5525078307042829, 0.5525078307042829, 0.5525078307042829, 0.1220394034446799, 0.1220394034446799, 0.1220394034446799, 0.11876724744881773, 0.11876724744881773, 0.11876724744881773, 0.16418442071346084, 0.16418442071346084, 0.16418442071346084, 0.19307450728368347, 0.19307450728368347, 0.19307450728368347, 0.1564303088932516, 0.1564303088932516, 0.1564303088932516, 0.16070566581260937, 0.16070566581260937, 0.16070566581260937, 0.4104016892617022, 0.4104016892617022, 0.4104016892617022, 0.44735681110297965, 0.44735681110297965, 0.44735681110297965, 0.5117808824782959, 0.5117808824782959, 0.5117808824782959, 0.29691328184405497, 0.29691328184405497, 0.29691328184405497, 0.34080395958329524, 0.34080395958329524, 0.34080395958329524, 0.3056440310160867, 0.3056440310160867, 0.3056440310160867, 0.20509343921024492, 0.20509343921024492, 0.20509343921024492, 0.22041205601336689, 0.22041205601336689, 0.22041205601336689, 0.20323679804723838, 0.20323679804723838, 0.20323679804723838, 0.20667532748988104, 0.20667532748988104, 0.20667532748988104, 0.19966699706438262, 0.19966699706438262, 0.19966699706438262, 0.2858116053381321, 0.2858116053381321, 0.2858116053381321, 0.16301391266713094, 0.16301391266713094, 0.16301391266713094, 0.7239730569828753, 0.7239730569828753, 0.7239730569828753, 0.18129467615580674, 0.18129467615580674, 0.18129467615580674, 0.28515658620773476, 0.28515658620773476, 0.28515658620773476, 0.1935435239197778, 0.1935435239197778, 0.1935435239197778, 0.1467211704148913, 0.1467211704148913, 0.1467211704148913, 0.18991866161784787, 0.18991866161784787, 0.18991866161784787, 0.16535842938777856, 0.16535842938777856, 0.16535842938777856, 0.19316296124109922, 0.19316296124109922, 0.19316296124109922, 0.08535354931102046, 0.08535354931102046, 0.08535354931102046, 0.08660617035399687, 0.08660617035399687, 0.08660617035399687, 0.09014726101582149, 0.09014726101582149, 0.09014726101582149]}, "mutation_prompt": null}
{"id": "111287c9-fd93-4aee-b8af-201ac0bb09d9", "solution": "import numpy as np\n\nclass SelfAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim  # Slightly reduced population size for faster convergence\n        self.initial_mutation_factor = 0.8  # Adjusted initial mutation factor for exploration\n        self.crossover_rate = 0.9  # Increased crossover rate for diversity\n        self.mutation_decay = 0.98  # Optimized decay for mutation factor\n        self.split_factor = 0.5  # Subpopulation split factor\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        evals = self.population_size\n        mutation_factor = self.initial_mutation_factor\n\n        while evals < self.budget:\n            subpop_size = int(self.population_size * self.split_factor)\n            for i in range(self.population_size):\n                idxs = list(range(self.population_size))\n                idxs.remove(i)\n                sample_size = subpop_size if np.random.rand() < 0.5 else self.population_size  # Dynamic subpopulation\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(a + mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n\n                if evals >= self.budget:\n                    break\n\n            mutation_factor *= self.mutation_decay  # Apply decay to mutation factor\n            if evals % (self.population_size // 2) == 0:  # Adapt learning rate dynamically\n                self.crossover_rate = 0.7 + 0.3 * np.random.rand()\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "SelfAdaptiveDifferentialEvolution", "description": "Introduced Self-Adaptive Differential Evolution with Dynamic Subpopulation Strategies and Adaptive Learning Rates for Enhanced Convergence.", "configspace": "", "generation": 65, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b7df5738-e239-453b-932f-2ae32e017b36", "metadata": {"aucs": [0.8028974999397684, 0.8028974999397684, 0.8028974999397684, 0.820162767335356, 0.820162767335356, 0.820162767335356, 0.8268158805027072, 0.8268158805027072, 0.8268158805027072, 0.6912682274538304, 0.6912682274538304, 0.6912682274538304, 0.5844808858752991, 0.5844808858752991, 0.5844808858752991, 0.6828452545688112, 0.6828452545688112, 0.6828452545688112, 0.2069948826304837, 0.2069948826304837, 0.2069948826304837, 0.25479576379989277, 0.25479576379989277, 0.25479576379989277, 0.3096555827229023, 0.3096555827229023, 0.3096555827229023, 0.16803182716129272, 0.16803182716129272, 0.16803182716129272, 0.2125972816080981, 0.2125972816080981, 0.2125972816080981, 0.13420800187083226, 0.13420800187083226, 0.13420800187083226, 0.9543543436153276, 0.9543543436153276, 0.9543543436153276, 0.9635622803614148, 0.9635622803614148, 0.9635622803614148, 0.9785171936615114, 0.9785171936615114, 0.9785171936615114, 0.22746277654182945, 0.22746277654182945, 0.22746277654182945, 0.18213375266531762, 0.18213375266531762, 0.18213375266531762, 0.3027151787666107, 0.3027151787666107, 0.3027151787666107, 0.7746545356265845, 0.7746545356265845, 0.7746545356265845, 0.7911711620707444, 0.7911711620707444, 0.7911711620707444, 0.7824307938694764, 0.7824307938694764, 0.7824307938694764, 0.16018975197729757, 0.16018975197729757, 0.16018975197729757, 0.29362630482925267, 0.29362630482925267, 0.29362630482925267, 0.1862258566090128, 0.1862258566090128, 0.1862258566090128, 0.12864263117106134, 0.12864263117106134, 0.12864263117106134, 0.16862340955315136, 0.16862340955315136, 0.16862340955315136, 0.13688738049704718, 0.13688738049704718, 0.13688738049704718, 0.057365535640381715, 0.057365535640381715, 0.057365535640381715, 0.1599719382778796, 0.1599719382778796, 0.1599719382778796, 0.09815978182277196, 0.09815978182277196, 0.09815978182277196, 0.32809732531911995, 0.32809732531911995, 0.32809732531911995, 0.15989542789680122, 0.15989542789680122, 0.15989542789680122, 0.39450358933421326, 0.39450358933421326, 0.39450358933421326, 0.07182819095400772, 0.07182819095400772, 0.07182819095400772, 0.21867696509157653, 0.21867696509157653, 0.21867696509157653, 0.12758638820913926, 0.12758638820913926, 0.12758638820913926, 0.20600531668127853, 0.20600531668127853, 0.20600531668127853, 0.24645502611711, 0.24645502611711, 0.24645502611711, 0.20271892435046202, 0.20271892435046202, 0.20271892435046202, 0.6010154351823194, 0.6010154351823194, 0.6010154351823194, 0.6173710628607691, 0.6173710628607691, 0.6173710628607691, 0.5525078307042829, 0.5525078307042829, 0.5525078307042829, 0.1220394034446799, 0.1220394034446799, 0.1220394034446799, 0.11876724744881773, 0.11876724744881773, 0.11876724744881773, 0.16418442071346084, 0.16418442071346084, 0.16418442071346084, 0.19307450728368347, 0.19307450728368347, 0.19307450728368347, 0.1564303088932516, 0.1564303088932516, 0.1564303088932516, 0.16070566581260937, 0.16070566581260937, 0.16070566581260937, 0.4104016892617022, 0.4104016892617022, 0.4104016892617022, 0.44735681110297965, 0.44735681110297965, 0.44735681110297965, 0.5117808824782959, 0.5117808824782959, 0.5117808824782959, 0.29691328184405497, 0.29691328184405497, 0.29691328184405497, 0.34080395958329524, 0.34080395958329524, 0.34080395958329524, 0.3056440310160867, 0.3056440310160867, 0.3056440310160867, 0.20509343921024492, 0.20509343921024492, 0.20509343921024492, 0.22041205601336689, 0.22041205601336689, 0.22041205601336689, 0.20323679804723838, 0.20323679804723838, 0.20323679804723838, 0.20667532748988104, 0.20667532748988104, 0.20667532748988104, 0.19966699706438262, 0.19966699706438262, 0.19966699706438262, 0.2858116053381321, 0.2858116053381321, 0.2858116053381321, 0.16301391266713094, 0.16301391266713094, 0.16301391266713094, 0.7239730569828753, 0.7239730569828753, 0.7239730569828753, 0.18129467615580674, 0.18129467615580674, 0.18129467615580674, 0.28515658620773476, 0.28515658620773476, 0.28515658620773476, 0.1935435239197778, 0.1935435239197778, 0.1935435239197778, 0.1467211704148913, 0.1467211704148913, 0.1467211704148913, 0.18991866161784787, 0.18991866161784787, 0.18991866161784787, 0.16535842938777856, 0.16535842938777856, 0.16535842938777856, 0.19316296124109922, 0.19316296124109922, 0.19316296124109922, 0.08535354931102046, 0.08535354931102046, 0.08535354931102046, 0.08660617035399687, 0.08660617035399687, 0.08660617035399687, 0.09014726101582149, 0.09014726101582149, 0.09014726101582149]}, "mutation_prompt": null}
{"id": "3dbff5e3-2c80-4ae7-8cea-53c91e41b93d", "solution": "import numpy as np\n\nclass SelfAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim  # Slightly reduced population size for faster convergence\n        self.initial_mutation_factor = 0.8  # Adjusted initial mutation factor for exploration\n        self.crossover_rate = 0.9  # Increased crossover rate for diversity\n        self.mutation_decay = 0.98  # Optimized decay for mutation factor\n        self.split_factor = 0.5  # Subpopulation split factor\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        evals = self.population_size\n        mutation_factor = self.initial_mutation_factor\n\n        while evals < self.budget:\n            subpop_size = int(self.population_size * self.split_factor)\n            for i in range(self.population_size):\n                idxs = list(range(self.population_size))\n                idxs.remove(i)\n                sample_size = subpop_size if np.random.rand() < 0.5 else self.population_size  # Dynamic subpopulation\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(a + mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n\n                if evals >= self.budget:\n                    break\n\n            mutation_factor *= self.mutation_decay  # Apply decay to mutation factor\n            if evals % (self.population_size // 2) == 0:  # Adapt learning rate dynamically\n                self.crossover_rate = 0.7 + 0.3 * np.random.rand()\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "SelfAdaptiveDifferentialEvolution", "description": "Introduced Self-Adaptive Differential Evolution with Dynamic Subpopulation Strategies and Adaptive Learning Rates for Enhanced Convergence.", "configspace": "", "generation": 65, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b7df5738-e239-453b-932f-2ae32e017b36", "metadata": {"aucs": [0.8028974999397684, 0.8028974999397684, 0.8028974999397684, 0.820162767335356, 0.820162767335356, 0.820162767335356, 0.8268158805027072, 0.8268158805027072, 0.8268158805027072, 0.6912682274538304, 0.6912682274538304, 0.6912682274538304, 0.5844808858752991, 0.5844808858752991, 0.5844808858752991, 0.6828452545688112, 0.6828452545688112, 0.6828452545688112, 0.2069948826304837, 0.2069948826304837, 0.2069948826304837, 0.25479576379989277, 0.25479576379989277, 0.25479576379989277, 0.3096555827229023, 0.3096555827229023, 0.3096555827229023, 0.16803182716129272, 0.16803182716129272, 0.16803182716129272, 0.2125972816080981, 0.2125972816080981, 0.2125972816080981, 0.13420800187083226, 0.13420800187083226, 0.13420800187083226, 0.9543543436153276, 0.9543543436153276, 0.9543543436153276, 0.9635622803614148, 0.9635622803614148, 0.9635622803614148, 0.9785171936615114, 0.9785171936615114, 0.9785171936615114, 0.22746277654182945, 0.22746277654182945, 0.22746277654182945, 0.18213375266531762, 0.18213375266531762, 0.18213375266531762, 0.3027151787666107, 0.3027151787666107, 0.3027151787666107, 0.7746545356265845, 0.7746545356265845, 0.7746545356265845, 0.7911711620707444, 0.7911711620707444, 0.7911711620707444, 0.7824307938694764, 0.7824307938694764, 0.7824307938694764, 0.16018975197729757, 0.16018975197729757, 0.16018975197729757, 0.29362630482925267, 0.29362630482925267, 0.29362630482925267, 0.1862258566090128, 0.1862258566090128, 0.1862258566090128, 0.12864263117106134, 0.12864263117106134, 0.12864263117106134, 0.16862340955315136, 0.16862340955315136, 0.16862340955315136, 0.13688738049704718, 0.13688738049704718, 0.13688738049704718, 0.057365535640381715, 0.057365535640381715, 0.057365535640381715, 0.1599719382778796, 0.1599719382778796, 0.1599719382778796, 0.09815978182277196, 0.09815978182277196, 0.09815978182277196, 0.32809732531911995, 0.32809732531911995, 0.32809732531911995, 0.15989542789680122, 0.15989542789680122, 0.15989542789680122, 0.39450358933421326, 0.39450358933421326, 0.39450358933421326, 0.07182819095400772, 0.07182819095400772, 0.07182819095400772, 0.21867696509157653, 0.21867696509157653, 0.21867696509157653, 0.12758638820913926, 0.12758638820913926, 0.12758638820913926, 0.20600531668127853, 0.20600531668127853, 0.20600531668127853, 0.24645502611711, 0.24645502611711, 0.24645502611711, 0.20271892435046202, 0.20271892435046202, 0.20271892435046202, 0.6010154351823194, 0.6010154351823194, 0.6010154351823194, 0.6173710628607691, 0.6173710628607691, 0.6173710628607691, 0.5525078307042829, 0.5525078307042829, 0.5525078307042829, 0.1220394034446799, 0.1220394034446799, 0.1220394034446799, 0.11876724744881773, 0.11876724744881773, 0.11876724744881773, 0.16418442071346084, 0.16418442071346084, 0.16418442071346084, 0.19307450728368347, 0.19307450728368347, 0.19307450728368347, 0.1564303088932516, 0.1564303088932516, 0.1564303088932516, 0.16070566581260937, 0.16070566581260937, 0.16070566581260937, 0.4104016892617022, 0.4104016892617022, 0.4104016892617022, 0.44735681110297965, 0.44735681110297965, 0.44735681110297965, 0.5117808824782959, 0.5117808824782959, 0.5117808824782959, 0.29691328184405497, 0.29691328184405497, 0.29691328184405497, 0.34080395958329524, 0.34080395958329524, 0.34080395958329524, 0.3056440310160867, 0.3056440310160867, 0.3056440310160867, 0.20509343921024492, 0.20509343921024492, 0.20509343921024492, 0.22041205601336689, 0.22041205601336689, 0.22041205601336689, 0.20323679804723838, 0.20323679804723838, 0.20323679804723838, 0.20667532748988104, 0.20667532748988104, 0.20667532748988104, 0.19966699706438262, 0.19966699706438262, 0.19966699706438262, 0.2858116053381321, 0.2858116053381321, 0.2858116053381321, 0.16301391266713094, 0.16301391266713094, 0.16301391266713094, 0.7239730569828753, 0.7239730569828753, 0.7239730569828753, 0.18129467615580674, 0.18129467615580674, 0.18129467615580674, 0.28515658620773476, 0.28515658620773476, 0.28515658620773476, 0.1935435239197778, 0.1935435239197778, 0.1935435239197778, 0.1467211704148913, 0.1467211704148913, 0.1467211704148913, 0.18991866161784787, 0.18991866161784787, 0.18991866161784787, 0.16535842938777856, 0.16535842938777856, 0.16535842938777856, 0.19316296124109922, 0.19316296124109922, 0.19316296124109922, 0.08535354931102046, 0.08535354931102046, 0.08535354931102046, 0.08660617035399687, 0.08660617035399687, 0.08660617035399687, 0.09014726101582149, 0.09014726101582149, 0.09014726101582149]}, "mutation_prompt": null}
{"id": "253fd211-896b-47fd-af5d-69756cd9451d", "solution": "import numpy as np\n\nclass SelfAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim  # Slightly reduced population size for faster convergence\n        self.initial_mutation_factor = 0.8  # Adjusted initial mutation factor for exploration\n        self.crossover_rate = 0.9  # Increased crossover rate for diversity\n        self.mutation_decay = 0.98  # Optimized decay for mutation factor\n        self.split_factor = 0.5  # Subpopulation split factor\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        evals = self.population_size\n        mutation_factor = self.initial_mutation_factor\n\n        while evals < self.budget:\n            subpop_size = int(self.population_size * self.split_factor)\n            for i in range(self.population_size):\n                idxs = list(range(self.population_size))\n                idxs.remove(i)\n                sample_size = subpop_size if np.random.rand() < 0.5 else self.population_size  # Dynamic subpopulation\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(a + mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n\n                if evals >= self.budget:\n                    break\n\n            mutation_factor *= self.mutation_decay  # Apply decay to mutation factor\n            if evals % (self.population_size // 2) == 0:  # Adapt learning rate dynamically\n                self.crossover_rate = 0.7 + 0.3 * np.random.rand()\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "SelfAdaptiveDifferentialEvolution", "description": "Introduced Self-Adaptive Differential Evolution with Dynamic Subpopulation Strategies and Adaptive Learning Rates for Enhanced Convergence.", "configspace": "", "generation": 65, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b7df5738-e239-453b-932f-2ae32e017b36", "metadata": {"aucs": [0.8028974999397684, 0.8028974999397684, 0.8028974999397684, 0.820162767335356, 0.820162767335356, 0.820162767335356, 0.8268158805027072, 0.8268158805027072, 0.8268158805027072, 0.6912682274538304, 0.6912682274538304, 0.6912682274538304, 0.5844808858752991, 0.5844808858752991, 0.5844808858752991, 0.6828452545688112, 0.6828452545688112, 0.6828452545688112, 0.2069948826304837, 0.2069948826304837, 0.2069948826304837, 0.25479576379989277, 0.25479576379989277, 0.25479576379989277, 0.3096555827229023, 0.3096555827229023, 0.3096555827229023, 0.16803182716129272, 0.16803182716129272, 0.16803182716129272, 0.2125972816080981, 0.2125972816080981, 0.2125972816080981, 0.13420800187083226, 0.13420800187083226, 0.13420800187083226, 0.9543543436153276, 0.9543543436153276, 0.9543543436153276, 0.9635622803614148, 0.9635622803614148, 0.9635622803614148, 0.9785171936615114, 0.9785171936615114, 0.9785171936615114, 0.22746277654182945, 0.22746277654182945, 0.22746277654182945, 0.18213375266531762, 0.18213375266531762, 0.18213375266531762, 0.3027151787666107, 0.3027151787666107, 0.3027151787666107, 0.7746545356265845, 0.7746545356265845, 0.7746545356265845, 0.7911711620707444, 0.7911711620707444, 0.7911711620707444, 0.7824307938694764, 0.7824307938694764, 0.7824307938694764, 0.16018975197729757, 0.16018975197729757, 0.16018975197729757, 0.29362630482925267, 0.29362630482925267, 0.29362630482925267, 0.1862258566090128, 0.1862258566090128, 0.1862258566090128, 0.12864263117106134, 0.12864263117106134, 0.12864263117106134, 0.16862340955315136, 0.16862340955315136, 0.16862340955315136, 0.13688738049704718, 0.13688738049704718, 0.13688738049704718, 0.057365535640381715, 0.057365535640381715, 0.057365535640381715, 0.1599719382778796, 0.1599719382778796, 0.1599719382778796, 0.09815978182277196, 0.09815978182277196, 0.09815978182277196, 0.32809732531911995, 0.32809732531911995, 0.32809732531911995, 0.15989542789680122, 0.15989542789680122, 0.15989542789680122, 0.39450358933421326, 0.39450358933421326, 0.39450358933421326, 0.07182819095400772, 0.07182819095400772, 0.07182819095400772, 0.21867696509157653, 0.21867696509157653, 0.21867696509157653, 0.12758638820913926, 0.12758638820913926, 0.12758638820913926, 0.20600531668127853, 0.20600531668127853, 0.20600531668127853, 0.24645502611711, 0.24645502611711, 0.24645502611711, 0.20271892435046202, 0.20271892435046202, 0.20271892435046202, 0.6010154351823194, 0.6010154351823194, 0.6010154351823194, 0.6173710628607691, 0.6173710628607691, 0.6173710628607691, 0.5525078307042829, 0.5525078307042829, 0.5525078307042829, 0.1220394034446799, 0.1220394034446799, 0.1220394034446799, 0.11876724744881773, 0.11876724744881773, 0.11876724744881773, 0.16418442071346084, 0.16418442071346084, 0.16418442071346084, 0.19307450728368347, 0.19307450728368347, 0.19307450728368347, 0.1564303088932516, 0.1564303088932516, 0.1564303088932516, 0.16070566581260937, 0.16070566581260937, 0.16070566581260937, 0.4104016892617022, 0.4104016892617022, 0.4104016892617022, 0.44735681110297965, 0.44735681110297965, 0.44735681110297965, 0.5117808824782959, 0.5117808824782959, 0.5117808824782959, 0.29691328184405497, 0.29691328184405497, 0.29691328184405497, 0.34080395958329524, 0.34080395958329524, 0.34080395958329524, 0.3056440310160867, 0.3056440310160867, 0.3056440310160867, 0.20509343921024492, 0.20509343921024492, 0.20509343921024492, 0.22041205601336689, 0.22041205601336689, 0.22041205601336689, 0.20323679804723838, 0.20323679804723838, 0.20323679804723838, 0.20667532748988104, 0.20667532748988104, 0.20667532748988104, 0.19966699706438262, 0.19966699706438262, 0.19966699706438262, 0.2858116053381321, 0.2858116053381321, 0.2858116053381321, 0.16301391266713094, 0.16301391266713094, 0.16301391266713094, 0.7239730569828753, 0.7239730569828753, 0.7239730569828753, 0.18129467615580674, 0.18129467615580674, 0.18129467615580674, 0.28515658620773476, 0.28515658620773476, 0.28515658620773476, 0.1935435239197778, 0.1935435239197778, 0.1935435239197778, 0.1467211704148913, 0.1467211704148913, 0.1467211704148913, 0.18991866161784787, 0.18991866161784787, 0.18991866161784787, 0.16535842938777856, 0.16535842938777856, 0.16535842938777856, 0.19316296124109922, 0.19316296124109922, 0.19316296124109922, 0.08535354931102046, 0.08535354931102046, 0.08535354931102046, 0.08660617035399687, 0.08660617035399687, 0.08660617035399687, 0.09014726101582149, 0.09014726101582149, 0.09014726101582149]}, "mutation_prompt": null}
{"id": "7995ba22-d736-49c6-9925-9b64a2b6f9e6", "solution": "import numpy as np\n\nclass SelfAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim  # Slightly reduced population size for faster convergence\n        self.initial_mutation_factor = 0.8  # Adjusted initial mutation factor for exploration\n        self.crossover_rate = 0.9  # Increased crossover rate for diversity\n        self.mutation_decay = 0.98  # Optimized decay for mutation factor\n        self.split_factor = 0.5  # Subpopulation split factor\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        evals = self.population_size\n        mutation_factor = self.initial_mutation_factor\n\n        while evals < self.budget:\n            subpop_size = int(self.population_size * self.split_factor)\n            for i in range(self.population_size):\n                idxs = list(range(self.population_size))\n                idxs.remove(i)\n                sample_size = subpop_size if np.random.rand() < 0.5 else self.population_size  # Dynamic subpopulation\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(a + mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n\n                if evals >= self.budget:\n                    break\n\n            mutation_factor *= self.mutation_decay  # Apply decay to mutation factor\n            if evals % (self.population_size // 2) == 0:  # Adapt learning rate dynamically\n                self.crossover_rate = 0.7 + 0.3 * np.random.rand()\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "SelfAdaptiveDifferentialEvolution", "description": "Introduced Self-Adaptive Differential Evolution with Dynamic Subpopulation Strategies and Adaptive Learning Rates for Enhanced Convergence.", "configspace": "", "generation": 65, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b7df5738-e239-453b-932f-2ae32e017b36", "metadata": {"aucs": [0.8028974999397684, 0.8028974999397684, 0.8028974999397684, 0.820162767335356, 0.820162767335356, 0.820162767335356, 0.8268158805027072, 0.8268158805027072, 0.8268158805027072, 0.6912682274538304, 0.6912682274538304, 0.6912682274538304, 0.5844808858752991, 0.5844808858752991, 0.5844808858752991, 0.6828452545688112, 0.6828452545688112, 0.6828452545688112, 0.2069948826304837, 0.2069948826304837, 0.2069948826304837, 0.25479576379989277, 0.25479576379989277, 0.25479576379989277, 0.3096555827229023, 0.3096555827229023, 0.3096555827229023, 0.16803182716129272, 0.16803182716129272, 0.16803182716129272, 0.2125972816080981, 0.2125972816080981, 0.2125972816080981, 0.13420800187083226, 0.13420800187083226, 0.13420800187083226, 0.9543543436153276, 0.9543543436153276, 0.9543543436153276, 0.9635622803614148, 0.9635622803614148, 0.9635622803614148, 0.9785171936615114, 0.9785171936615114, 0.9785171936615114, 0.22746277654182945, 0.22746277654182945, 0.22746277654182945, 0.18213375266531762, 0.18213375266531762, 0.18213375266531762, 0.3027151787666107, 0.3027151787666107, 0.3027151787666107, 0.7746545356265845, 0.7746545356265845, 0.7746545356265845, 0.7911711620707444, 0.7911711620707444, 0.7911711620707444, 0.7824307938694764, 0.7824307938694764, 0.7824307938694764, 0.16018975197729757, 0.16018975197729757, 0.16018975197729757, 0.29362630482925267, 0.29362630482925267, 0.29362630482925267, 0.1862258566090128, 0.1862258566090128, 0.1862258566090128, 0.12864263117106134, 0.12864263117106134, 0.12864263117106134, 0.16862340955315136, 0.16862340955315136, 0.16862340955315136, 0.13688738049704718, 0.13688738049704718, 0.13688738049704718, 0.057365535640381715, 0.057365535640381715, 0.057365535640381715, 0.1599719382778796, 0.1599719382778796, 0.1599719382778796, 0.09815978182277196, 0.09815978182277196, 0.09815978182277196, 0.32809732531911995, 0.32809732531911995, 0.32809732531911995, 0.15989542789680122, 0.15989542789680122, 0.15989542789680122, 0.39450358933421326, 0.39450358933421326, 0.39450358933421326, 0.07182819095400772, 0.07182819095400772, 0.07182819095400772, 0.21867696509157653, 0.21867696509157653, 0.21867696509157653, 0.12758638820913926, 0.12758638820913926, 0.12758638820913926, 0.20600531668127853, 0.20600531668127853, 0.20600531668127853, 0.24645502611711, 0.24645502611711, 0.24645502611711, 0.20271892435046202, 0.20271892435046202, 0.20271892435046202, 0.6010154351823194, 0.6010154351823194, 0.6010154351823194, 0.6173710628607691, 0.6173710628607691, 0.6173710628607691, 0.5525078307042829, 0.5525078307042829, 0.5525078307042829, 0.1220394034446799, 0.1220394034446799, 0.1220394034446799, 0.11876724744881773, 0.11876724744881773, 0.11876724744881773, 0.16418442071346084, 0.16418442071346084, 0.16418442071346084, 0.19307450728368347, 0.19307450728368347, 0.19307450728368347, 0.1564303088932516, 0.1564303088932516, 0.1564303088932516, 0.16070566581260937, 0.16070566581260937, 0.16070566581260937, 0.4104016892617022, 0.4104016892617022, 0.4104016892617022, 0.44735681110297965, 0.44735681110297965, 0.44735681110297965, 0.5117808824782959, 0.5117808824782959, 0.5117808824782959, 0.29691328184405497, 0.29691328184405497, 0.29691328184405497, 0.34080395958329524, 0.34080395958329524, 0.34080395958329524, 0.3056440310160867, 0.3056440310160867, 0.3056440310160867, 0.20509343921024492, 0.20509343921024492, 0.20509343921024492, 0.22041205601336689, 0.22041205601336689, 0.22041205601336689, 0.20323679804723838, 0.20323679804723838, 0.20323679804723838, 0.20667532748988104, 0.20667532748988104, 0.20667532748988104, 0.19966699706438262, 0.19966699706438262, 0.19966699706438262, 0.2858116053381321, 0.2858116053381321, 0.2858116053381321, 0.16301391266713094, 0.16301391266713094, 0.16301391266713094, 0.7239730569828753, 0.7239730569828753, 0.7239730569828753, 0.18129467615580674, 0.18129467615580674, 0.18129467615580674, 0.28515658620773476, 0.28515658620773476, 0.28515658620773476, 0.1935435239197778, 0.1935435239197778, 0.1935435239197778, 0.1467211704148913, 0.1467211704148913, 0.1467211704148913, 0.18991866161784787, 0.18991866161784787, 0.18991866161784787, 0.16535842938777856, 0.16535842938777856, 0.16535842938777856, 0.19316296124109922, 0.19316296124109922, 0.19316296124109922, 0.08535354931102046, 0.08535354931102046, 0.08535354931102046, 0.08660617035399687, 0.08660617035399687, 0.08660617035399687, 0.09014726101582149, 0.09014726101582149, 0.09014726101582149]}, "mutation_prompt": null}
{"id": "3b4d0c64-fa8c-436b-a886-d5255f33cba1", "solution": "import numpy as np\n\nclass SelfAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim  # Slightly reduced population size for faster convergence\n        self.initial_mutation_factor = 0.8  # Adjusted initial mutation factor for exploration\n        self.crossover_rate = 0.9  # Increased crossover rate for diversity\n        self.mutation_decay = 0.98  # Optimized decay for mutation factor\n        self.split_factor = 0.5  # Subpopulation split factor\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        evals = self.population_size\n        mutation_factor = self.initial_mutation_factor\n\n        while evals < self.budget:\n            subpop_size = int(self.population_size * self.split_factor)\n            for i in range(self.population_size):\n                idxs = list(range(self.population_size))\n                idxs.remove(i)\n                sample_size = subpop_size if np.random.rand() < 0.5 else self.population_size  # Dynamic subpopulation\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(a + mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n\n                if evals >= self.budget:\n                    break\n\n            mutation_factor *= self.mutation_decay  # Apply decay to mutation factor\n            if evals % (self.population_size // 2) == 0:  # Adapt learning rate dynamically\n                self.crossover_rate = 0.7 + 0.3 * np.random.rand()\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "SelfAdaptiveDifferentialEvolution", "description": "Introduced Self-Adaptive Differential Evolution with Dynamic Subpopulation Strategies and Adaptive Learning Rates for Enhanced Convergence.", "configspace": "", "generation": 65, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b7df5738-e239-453b-932f-2ae32e017b36", "metadata": {"aucs": [0.8028974999397684, 0.8028974999397684, 0.8028974999397684, 0.820162767335356, 0.820162767335356, 0.820162767335356, 0.8268158805027072, 0.8268158805027072, 0.8268158805027072, 0.6912682274538304, 0.6912682274538304, 0.6912682274538304, 0.5844808858752991, 0.5844808858752991, 0.5844808858752991, 0.6828452545688112, 0.6828452545688112, 0.6828452545688112, 0.2069948826304837, 0.2069948826304837, 0.2069948826304837, 0.25479576379989277, 0.25479576379989277, 0.25479576379989277, 0.3096555827229023, 0.3096555827229023, 0.3096555827229023, 0.16803182716129272, 0.16803182716129272, 0.16803182716129272, 0.2125972816080981, 0.2125972816080981, 0.2125972816080981, 0.13420800187083226, 0.13420800187083226, 0.13420800187083226, 0.9543543436153276, 0.9543543436153276, 0.9543543436153276, 0.9635622803614148, 0.9635622803614148, 0.9635622803614148, 0.9785171936615114, 0.9785171936615114, 0.9785171936615114, 0.22746277654182945, 0.22746277654182945, 0.22746277654182945, 0.18213375266531762, 0.18213375266531762, 0.18213375266531762, 0.3027151787666107, 0.3027151787666107, 0.3027151787666107, 0.7746545356265845, 0.7746545356265845, 0.7746545356265845, 0.7911711620707444, 0.7911711620707444, 0.7911711620707444, 0.7824307938694764, 0.7824307938694764, 0.7824307938694764, 0.16018975197729757, 0.16018975197729757, 0.16018975197729757, 0.29362630482925267, 0.29362630482925267, 0.29362630482925267, 0.1862258566090128, 0.1862258566090128, 0.1862258566090128, 0.12864263117106134, 0.12864263117106134, 0.12864263117106134, 0.16862340955315136, 0.16862340955315136, 0.16862340955315136, 0.13688738049704718, 0.13688738049704718, 0.13688738049704718, 0.057365535640381715, 0.057365535640381715, 0.057365535640381715, 0.1599719382778796, 0.1599719382778796, 0.1599719382778796, 0.09815978182277196, 0.09815978182277196, 0.09815978182277196, 0.32809732531911995, 0.32809732531911995, 0.32809732531911995, 0.15989542789680122, 0.15989542789680122, 0.15989542789680122, 0.39450358933421326, 0.39450358933421326, 0.39450358933421326, 0.07182819095400772, 0.07182819095400772, 0.07182819095400772, 0.21867696509157653, 0.21867696509157653, 0.21867696509157653, 0.12758638820913926, 0.12758638820913926, 0.12758638820913926, 0.20600531668127853, 0.20600531668127853, 0.20600531668127853, 0.24645502611711, 0.24645502611711, 0.24645502611711, 0.20271892435046202, 0.20271892435046202, 0.20271892435046202, 0.6010154351823194, 0.6010154351823194, 0.6010154351823194, 0.6173710628607691, 0.6173710628607691, 0.6173710628607691, 0.5525078307042829, 0.5525078307042829, 0.5525078307042829, 0.1220394034446799, 0.1220394034446799, 0.1220394034446799, 0.11876724744881773, 0.11876724744881773, 0.11876724744881773, 0.16418442071346084, 0.16418442071346084, 0.16418442071346084, 0.19307450728368347, 0.19307450728368347, 0.19307450728368347, 0.1564303088932516, 0.1564303088932516, 0.1564303088932516, 0.16070566581260937, 0.16070566581260937, 0.16070566581260937, 0.4104016892617022, 0.4104016892617022, 0.4104016892617022, 0.44735681110297965, 0.44735681110297965, 0.44735681110297965, 0.5117808824782959, 0.5117808824782959, 0.5117808824782959, 0.29691328184405497, 0.29691328184405497, 0.29691328184405497, 0.34080395958329524, 0.34080395958329524, 0.34080395958329524, 0.3056440310160867, 0.3056440310160867, 0.3056440310160867, 0.20509343921024492, 0.20509343921024492, 0.20509343921024492, 0.22041205601336689, 0.22041205601336689, 0.22041205601336689, 0.20323679804723838, 0.20323679804723838, 0.20323679804723838, 0.20667532748988104, 0.20667532748988104, 0.20667532748988104, 0.19966699706438262, 0.19966699706438262, 0.19966699706438262, 0.2858116053381321, 0.2858116053381321, 0.2858116053381321, 0.16301391266713094, 0.16301391266713094, 0.16301391266713094, 0.7239730569828753, 0.7239730569828753, 0.7239730569828753, 0.18129467615580674, 0.18129467615580674, 0.18129467615580674, 0.28515658620773476, 0.28515658620773476, 0.28515658620773476, 0.1935435239197778, 0.1935435239197778, 0.1935435239197778, 0.1467211704148913, 0.1467211704148913, 0.1467211704148913, 0.18991866161784787, 0.18991866161784787, 0.18991866161784787, 0.16535842938777856, 0.16535842938777856, 0.16535842938777856, 0.19316296124109922, 0.19316296124109922, 0.19316296124109922, 0.08535354931102046, 0.08535354931102046, 0.08535354931102046, 0.08660617035399687, 0.08660617035399687, 0.08660617035399687, 0.09014726101582149, 0.09014726101582149, 0.09014726101582149]}, "mutation_prompt": null}
{"id": "9e951f15-37d8-41a2-9ceb-822b0b7387ef", "solution": "import numpy as np\n\nclass SelfAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim  # Slightly reduced population size for faster convergence\n        self.initial_mutation_factor = 0.8  # Adjusted initial mutation factor for exploration\n        self.crossover_rate = 0.9  # Increased crossover rate for diversity\n        self.mutation_decay = 0.98  # Optimized decay for mutation factor\n        self.split_factor = 0.5  # Subpopulation split factor\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        evals = self.population_size\n        mutation_factor = self.initial_mutation_factor\n\n        while evals < self.budget:\n            subpop_size = int(self.population_size * self.split_factor)\n            for i in range(self.population_size):\n                idxs = list(range(self.population_size))\n                idxs.remove(i)\n                sample_size = subpop_size if np.random.rand() < 0.5 else self.population_size  # Dynamic subpopulation\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(a + mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n\n                if evals >= self.budget:\n                    break\n\n            mutation_factor *= self.mutation_decay  # Apply decay to mutation factor\n            if evals % (self.population_size // 2) == 0:  # Adapt learning rate dynamically\n                self.crossover_rate = 0.7 + 0.3 * np.random.rand()\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "SelfAdaptiveDifferentialEvolution", "description": "Introduced Self-Adaptive Differential Evolution with Dynamic Subpopulation Strategies and Adaptive Learning Rates for Enhanced Convergence.", "configspace": "", "generation": 65, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b7df5738-e239-453b-932f-2ae32e017b36", "metadata": {"aucs": [0.8028974999397684, 0.8028974999397684, 0.8028974999397684, 0.820162767335356, 0.820162767335356, 0.820162767335356, 0.8268158805027072, 0.8268158805027072, 0.8268158805027072, 0.6912682274538304, 0.6912682274538304, 0.6912682274538304, 0.5844808858752991, 0.5844808858752991, 0.5844808858752991, 0.6828452545688112, 0.6828452545688112, 0.6828452545688112, 0.2069948826304837, 0.2069948826304837, 0.2069948826304837, 0.25479576379989277, 0.25479576379989277, 0.25479576379989277, 0.3096555827229023, 0.3096555827229023, 0.3096555827229023, 0.16803182716129272, 0.16803182716129272, 0.16803182716129272, 0.2125972816080981, 0.2125972816080981, 0.2125972816080981, 0.13420800187083226, 0.13420800187083226, 0.13420800187083226, 0.9543543436153276, 0.9543543436153276, 0.9543543436153276, 0.9635622803614148, 0.9635622803614148, 0.9635622803614148, 0.9785171936615114, 0.9785171936615114, 0.9785171936615114, 0.22746277654182945, 0.22746277654182945, 0.22746277654182945, 0.18213375266531762, 0.18213375266531762, 0.18213375266531762, 0.3027151787666107, 0.3027151787666107, 0.3027151787666107, 0.7746545356265845, 0.7746545356265845, 0.7746545356265845, 0.7911711620707444, 0.7911711620707444, 0.7911711620707444, 0.7824307938694764, 0.7824307938694764, 0.7824307938694764, 0.16018975197729757, 0.16018975197729757, 0.16018975197729757, 0.29362630482925267, 0.29362630482925267, 0.29362630482925267, 0.1862258566090128, 0.1862258566090128, 0.1862258566090128, 0.12864263117106134, 0.12864263117106134, 0.12864263117106134, 0.16862340955315136, 0.16862340955315136, 0.16862340955315136, 0.13688738049704718, 0.13688738049704718, 0.13688738049704718, 0.057365535640381715, 0.057365535640381715, 0.057365535640381715, 0.1599719382778796, 0.1599719382778796, 0.1599719382778796, 0.09815978182277196, 0.09815978182277196, 0.09815978182277196, 0.32809732531911995, 0.32809732531911995, 0.32809732531911995, 0.15989542789680122, 0.15989542789680122, 0.15989542789680122, 0.39450358933421326, 0.39450358933421326, 0.39450358933421326, 0.07182819095400772, 0.07182819095400772, 0.07182819095400772, 0.21867696509157653, 0.21867696509157653, 0.21867696509157653, 0.12758638820913926, 0.12758638820913926, 0.12758638820913926, 0.20600531668127853, 0.20600531668127853, 0.20600531668127853, 0.24645502611711, 0.24645502611711, 0.24645502611711, 0.20271892435046202, 0.20271892435046202, 0.20271892435046202, 0.6010154351823194, 0.6010154351823194, 0.6010154351823194, 0.6173710628607691, 0.6173710628607691, 0.6173710628607691, 0.5525078307042829, 0.5525078307042829, 0.5525078307042829, 0.1220394034446799, 0.1220394034446799, 0.1220394034446799, 0.11876724744881773, 0.11876724744881773, 0.11876724744881773, 0.16418442071346084, 0.16418442071346084, 0.16418442071346084, 0.19307450728368347, 0.19307450728368347, 0.19307450728368347, 0.1564303088932516, 0.1564303088932516, 0.1564303088932516, 0.16070566581260937, 0.16070566581260937, 0.16070566581260937, 0.4104016892617022, 0.4104016892617022, 0.4104016892617022, 0.44735681110297965, 0.44735681110297965, 0.44735681110297965, 0.5117808824782959, 0.5117808824782959, 0.5117808824782959, 0.29691328184405497, 0.29691328184405497, 0.29691328184405497, 0.34080395958329524, 0.34080395958329524, 0.34080395958329524, 0.3056440310160867, 0.3056440310160867, 0.3056440310160867, 0.20509343921024492, 0.20509343921024492, 0.20509343921024492, 0.22041205601336689, 0.22041205601336689, 0.22041205601336689, 0.20323679804723838, 0.20323679804723838, 0.20323679804723838, 0.20667532748988104, 0.20667532748988104, 0.20667532748988104, 0.19966699706438262, 0.19966699706438262, 0.19966699706438262, 0.2858116053381321, 0.2858116053381321, 0.2858116053381321, 0.16301391266713094, 0.16301391266713094, 0.16301391266713094, 0.7239730569828753, 0.7239730569828753, 0.7239730569828753, 0.18129467615580674, 0.18129467615580674, 0.18129467615580674, 0.28515658620773476, 0.28515658620773476, 0.28515658620773476, 0.1935435239197778, 0.1935435239197778, 0.1935435239197778, 0.1467211704148913, 0.1467211704148913, 0.1467211704148913, 0.18991866161784787, 0.18991866161784787, 0.18991866161784787, 0.16535842938777856, 0.16535842938777856, 0.16535842938777856, 0.19316296124109922, 0.19316296124109922, 0.19316296124109922, 0.08535354931102046, 0.08535354931102046, 0.08535354931102046, 0.08660617035399687, 0.08660617035399687, 0.08660617035399687, 0.09014726101582149, 0.09014726101582149, 0.09014726101582149]}, "mutation_prompt": null}
{"id": "392f1813-713b-41dc-999b-d3bad5a4e572", "solution": "import numpy as np\n\nclass SelfAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim  # Slightly reduced population size for faster convergence\n        self.initial_mutation_factor = 0.8  # Adjusted initial mutation factor for exploration\n        self.crossover_rate = 0.9  # Increased crossover rate for diversity\n        self.mutation_decay = 0.98  # Optimized decay for mutation factor\n        self.split_factor = 0.5  # Subpopulation split factor\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        evals = self.population_size\n        mutation_factor = self.initial_mutation_factor\n\n        while evals < self.budget:\n            subpop_size = int(self.population_size * self.split_factor)\n            for i in range(self.population_size):\n                idxs = list(range(self.population_size))\n                idxs.remove(i)\n                sample_size = subpop_size if np.random.rand() < 0.5 else self.population_size  # Dynamic subpopulation\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(a + mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n\n                if evals >= self.budget:\n                    break\n\n            mutation_factor *= self.mutation_decay  # Apply decay to mutation factor\n            if evals % (self.population_size // 2) == 0:  # Adapt learning rate dynamically\n                self.crossover_rate = 0.7 + 0.3 * np.random.rand()\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "SelfAdaptiveDifferentialEvolution", "description": "Introduced Self-Adaptive Differential Evolution with Dynamic Subpopulation Strategies and Adaptive Learning Rates for Enhanced Convergence.", "configspace": "", "generation": 65, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b7df5738-e239-453b-932f-2ae32e017b36", "metadata": {"aucs": [0.8028974999397684, 0.8028974999397684, 0.8028974999397684, 0.820162767335356, 0.820162767335356, 0.820162767335356, 0.8268158805027072, 0.8268158805027072, 0.8268158805027072, 0.6912682274538304, 0.6912682274538304, 0.6912682274538304, 0.5844808858752991, 0.5844808858752991, 0.5844808858752991, 0.6828452545688112, 0.6828452545688112, 0.6828452545688112, 0.2069948826304837, 0.2069948826304837, 0.2069948826304837, 0.25479576379989277, 0.25479576379989277, 0.25479576379989277, 0.3096555827229023, 0.3096555827229023, 0.3096555827229023, 0.16803182716129272, 0.16803182716129272, 0.16803182716129272, 0.2125972816080981, 0.2125972816080981, 0.2125972816080981, 0.13420800187083226, 0.13420800187083226, 0.13420800187083226, 0.9543543436153276, 0.9543543436153276, 0.9543543436153276, 0.9635622803614148, 0.9635622803614148, 0.9635622803614148, 0.9785171936615114, 0.9785171936615114, 0.9785171936615114, 0.22746277654182945, 0.22746277654182945, 0.22746277654182945, 0.18213375266531762, 0.18213375266531762, 0.18213375266531762, 0.3027151787666107, 0.3027151787666107, 0.3027151787666107, 0.7746545356265845, 0.7746545356265845, 0.7746545356265845, 0.7911711620707444, 0.7911711620707444, 0.7911711620707444, 0.7824307938694764, 0.7824307938694764, 0.7824307938694764, 0.16018975197729757, 0.16018975197729757, 0.16018975197729757, 0.29362630482925267, 0.29362630482925267, 0.29362630482925267, 0.1862258566090128, 0.1862258566090128, 0.1862258566090128, 0.12864263117106134, 0.12864263117106134, 0.12864263117106134, 0.16862340955315136, 0.16862340955315136, 0.16862340955315136, 0.13688738049704718, 0.13688738049704718, 0.13688738049704718, 0.057365535640381715, 0.057365535640381715, 0.057365535640381715, 0.1599719382778796, 0.1599719382778796, 0.1599719382778796, 0.09815978182277196, 0.09815978182277196, 0.09815978182277196, 0.32809732531911995, 0.32809732531911995, 0.32809732531911995, 0.15989542789680122, 0.15989542789680122, 0.15989542789680122, 0.39450358933421326, 0.39450358933421326, 0.39450358933421326, 0.07182819095400772, 0.07182819095400772, 0.07182819095400772, 0.21867696509157653, 0.21867696509157653, 0.21867696509157653, 0.12758638820913926, 0.12758638820913926, 0.12758638820913926, 0.20600531668127853, 0.20600531668127853, 0.20600531668127853, 0.24645502611711, 0.24645502611711, 0.24645502611711, 0.20271892435046202, 0.20271892435046202, 0.20271892435046202, 0.6010154351823194, 0.6010154351823194, 0.6010154351823194, 0.6173710628607691, 0.6173710628607691, 0.6173710628607691, 0.5525078307042829, 0.5525078307042829, 0.5525078307042829, 0.1220394034446799, 0.1220394034446799, 0.1220394034446799, 0.11876724744881773, 0.11876724744881773, 0.11876724744881773, 0.16418442071346084, 0.16418442071346084, 0.16418442071346084, 0.19307450728368347, 0.19307450728368347, 0.19307450728368347, 0.1564303088932516, 0.1564303088932516, 0.1564303088932516, 0.16070566581260937, 0.16070566581260937, 0.16070566581260937, 0.4104016892617022, 0.4104016892617022, 0.4104016892617022, 0.44735681110297965, 0.44735681110297965, 0.44735681110297965, 0.5117808824782959, 0.5117808824782959, 0.5117808824782959, 0.29691328184405497, 0.29691328184405497, 0.29691328184405497, 0.34080395958329524, 0.34080395958329524, 0.34080395958329524, 0.3056440310160867, 0.3056440310160867, 0.3056440310160867, 0.20509343921024492, 0.20509343921024492, 0.20509343921024492, 0.22041205601336689, 0.22041205601336689, 0.22041205601336689, 0.20323679804723838, 0.20323679804723838, 0.20323679804723838, 0.20667532748988104, 0.20667532748988104, 0.20667532748988104, 0.19966699706438262, 0.19966699706438262, 0.19966699706438262, 0.2858116053381321, 0.2858116053381321, 0.2858116053381321, 0.16301391266713094, 0.16301391266713094, 0.16301391266713094, 0.7239730569828753, 0.7239730569828753, 0.7239730569828753, 0.18129467615580674, 0.18129467615580674, 0.18129467615580674, 0.28515658620773476, 0.28515658620773476, 0.28515658620773476, 0.1935435239197778, 0.1935435239197778, 0.1935435239197778, 0.1467211704148913, 0.1467211704148913, 0.1467211704148913, 0.18991866161784787, 0.18991866161784787, 0.18991866161784787, 0.16535842938777856, 0.16535842938777856, 0.16535842938777856, 0.19316296124109922, 0.19316296124109922, 0.19316296124109922, 0.08535354931102046, 0.08535354931102046, 0.08535354931102046, 0.08660617035399687, 0.08660617035399687, 0.08660617035399687, 0.09014726101582149, 0.09014726101582149, 0.09014726101582149]}, "mutation_prompt": null}
{"id": "a7290c81-89d3-4638-9c2e-98ec4221617c", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12 * dim  # Increased population size for diversity\n        self.initial_mutation_factor = 0.6  # Lower initial mutation factor for exploitation\n        self.crossover_rate = 0.7  # Lower crossover rate to retain strong individuals\n        self.mutation_decay = 0.95  # Slower decay for sustained exploration\n        self.split_factor = 0.6  # Increased subpopulation split for stability\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        evals = self.population_size\n        mutation_factor = self.initial_mutation_factor\n        adaptive_crossover_rate = self.crossover_rate\n\n        while evals < self.budget:\n            subpop_size = int(self.population_size * self.split_factor)\n            for i in range(self.population_size):\n                idxs = list(range(self.population_size))\n                idxs.remove(i)\n                sample_size = subpop_size if np.random.rand() < 0.5 else self.population_size  # Dynamic subpopulation\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(a + mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.where(np.random.rand(self.dim) < adaptive_crossover_rate, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                    adaptive_crossover_rate = min(1.0, adaptive_crossover_rate + 0.05)  # Increase crossover rate if successful\n                else:\n                    adaptive_crossover_rate = max(0.1, adaptive_crossover_rate - 0.02)  # Decrease crossover rate if not successful\n\n                if evals >= self.budget:\n                    break\n\n            mutation_factor *= self.mutation_decay  # Apply decay to mutation factor\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "EnhancedDifferentialEvolution", "description": "Enhanced Self-Adaptive Differential Evolution with Dynamic Exploration-Exploitation Balance through Adaptive Mutation and Crossover Strategies.", "configspace": "", "generation": 82, "fitness": 0.17014617612137237, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.11.", "error": "", "parent_id": "b7df5738-e239-453b-932f-2ae32e017b36", "metadata": {"aucs": [0.4206819707125923, 0.4206819707125923, 0.4206819707125923, 0.45100281680219223, 0.45100281680219223, 0.45100281680219223, 0.4034239530011001, 0.4034239530011001, 0.4034239530011001, 0.09030555912810445, 0.09030555912810445, 0.09030555912810445, 0.18929153771282947, 0.18929153771282947, 0.18929153771282947, 0.12584216682071003, 0.12584216682071003, 0.12584216682071003, 0.19820552577542816, 0.19820552577542816, 0.19820552577542816, 0.214033122996807, 0.214033122996807, 0.214033122996807, 0.21240141601431073, 0.21240141601431073, 0.21240141601431073, 0.24933439734385243, 0.24933439734385243, 0.24933439734385243, 0.14661653848859513, 0.14661653848859513, 0.14661653848859513, 0.2173261193920839, 0.2173261193920839, 0.2173261193920839, 0.3188314182809421, 0.3188314182809421, 0.3188314182809421, 0.16932253617379922, 0.16932253617379922, 0.16932253617379922, 0.19857286726289902, 0.19857286726289902, 0.19857286726289902, 0.11936627801247301, 0.11936627801247301, 0.11936627801247301, 0.10606066344929443, 0.10606066344929443, 0.10606066344929443, 0.12513858569673653, 0.12513858569673653, 0.12513858569673653, 0.16521732700179292, 0.16521732700179292, 0.16521732700179292, 0.21917457277397412, 0.21917457277397412, 0.21917457277397412, 0.20294481975360135, 0.20294481975360135, 0.20294481975360135, 0.12976678949846032, 0.12976678949846032, 0.12976678949846032, 0.1529583418511502, 0.1529583418511502, 0.1529583418511502, 0.1305529030733007, 0.1305529030733007, 0.1305529030733007, 0.0763937526170988, 0.0763937526170988, 0.0763937526170988, 0.12422171962248774, 0.12422171962248774, 0.12422171962248774, 0.14409951395175835, 0.14409951395175835, 0.14409951395175835, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.054595505762812135, 0.054595505762812135, 0.054595505762812135, 0.019399506796039856, 0.019399506796039856, 0.019399506796039856, 0.057803393104799206, 0.057803393104799206, 0.057803393104799206, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08037814368109297, 0.08037814368109297, 0.08037814368109297, 0.12411829610842373, 0.12411829610842373, 0.12411829610842373, 0.1289655009567532, 0.1289655009567532, 0.1289655009567532, 0.41981217748167843, 0.41981217748167843, 0.41981217748167843, 0.41290237420931997, 0.41290237420931997, 0.41290237420931997, 0.49044728696657225, 0.49044728696657225, 0.49044728696657225, 0.079813456652435, 0.079813456652435, 0.079813456652435, 0.10462148849576092, 0.10462148849576092, 0.10462148849576092, 0.08997455139529065, 0.08997455139529065, 0.08997455139529065, 0.1746774243442697, 0.1746774243442697, 0.1746774243442697, 0.17793216847737625, 0.17793216847737625, 0.17793216847737625, 0.13147340202181312, 0.13147340202181312, 0.13147340202181312, 0.2461472690477623, 0.2461472690477623, 0.2461472690477623, 0.19100902238877293, 0.19100902238877293, 0.19100902238877293, 0.2603562330924897, 0.2603562330924897, 0.2603562330924897, 0.1371856874710129, 0.1371856874710129, 0.1371856874710129, 0.14698330245690283, 0.14698330245690283, 0.14698330245690283, 0.16495499992867113, 0.16495499992867113, 0.16495499992867113, 0.20560305001400625, 0.20560305001400625, 0.20560305001400625, 0.18467316844545223, 0.18467316844545223, 0.18467316844545223, 0.17744207738109763, 0.17744207738109763, 0.17744207738109763, 0.3058375561817219, 0.3058375561817219, 0.3058375561817219, 0.19321441024876174, 0.19321441024876174, 0.19321441024876174, 0.19861058015540967, 0.19861058015540967, 0.19861058015540967, 0.15622882836979368, 0.15622882836979368, 0.15622882836979368, 0.36130740940297223, 0.36130740940297223, 0.36130740940297223, 0.19790943452415366, 0.19790943452415366, 0.19790943452415366, 0.1797131853952083, 0.1797131853952083, 0.1797131853952083, 0.1909035721200435, 0.1909035721200435, 0.1909035721200435, 0.16061738262051695, 0.16061738262051695, 0.16061738262051695, 0.1776024618117228, 0.1776024618117228, 0.1776024618117228, 0.1647832750539323, 0.1647832750539323, 0.1647832750539323, 0.2008760010205478, 0.2008760010205478, 0.2008760010205478, 0.07128392148869367, 0.07128392148869367, 0.07128392148869367, 0.060246516311202813, 0.060246516311202813, 0.060246516311202813, 0.06843344614515012, 0.06843344614515012, 0.06843344614515012]}, "mutation_prompt": null}
{"id": "bde7c872-4547-4647-88c1-72d207a2e6e9", "solution": "import numpy as np\n\nclass EnhancedSelfAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 8 * dim  # Further reduced population for rapid convergence\n        self.initial_mutation_factor = 0.9  # Increased initial mutation factor for better exploration\n        self.crossover_rate = 0.85  # Adjusted crossover rate for improved selection\n        self.mutation_decay = 0.95  # More aggressive decay for mutation factor\n        self.split_factor = 0.4  # Adjusted subpopulation split factor\n        self.dynamic_pop_resize = True  # Flag for dynamic population resizing\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        evals = self.population_size\n        mutation_factor = self.initial_mutation_factor\n\n        while evals < self.budget:\n            subpop_size = int(self.population_size * self.split_factor)\n            for i in range(self.population_size):\n                idxs = list(range(self.population_size))\n                idxs.remove(i)\n                sample_size = subpop_size if np.random.rand() < 0.5 else self.population_size\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(a + mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n                elif np.random.rand() < 0.1:  # Greedy selection pressure\n                    population[i] = trial  # Occasionally accept worse solutions\n\n                if evals >= self.budget:\n                    break\n\n            mutation_factor *= self.mutation_decay\n            if evals % (self.population_size // 2) == 0:\n                self.crossover_rate = 0.7 + 0.3 * np.random.rand()\n\n            if self.dynamic_pop_resize and evals % (self.budget // 4) == 0 and evals < self.budget // 2:\n                self.population_size = int(self.population_size * 0.8)  # Reduce population size adaptively\n                population = population[:self.population_size]\n                fitness = fitness[:self.population_size]\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "EnhancedSelfAdaptiveDifferentialEvolution", "description": "Enhanced Self-Adaptive Differential Evolution with Adaptive Population Resizing and Greedy Selection for Accelerated Convergence.", "configspace": "", "generation": 83, "fitness": 0.2270366867139746, "feedback": "The algorithm EnhancedSelfAdaptiveDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.20.", "error": "", "parent_id": "b7df5738-e239-453b-932f-2ae32e017b36", "metadata": {"aucs": [0.537750413488851, 0.537750413488851, 0.537750413488851, 0.6377085159992979, 0.6377085159992979, 0.6377085159992979, 0.4431275958861305, 0.4431275958861305, 0.4431275958861305, 0.11755489313945944, 0.11755489313945944, 0.11755489313945944, 0.3295762818135315, 0.3295762818135315, 0.3295762818135315, 0.10864253298854287, 0.10864253298854287, 0.10864253298854287, 0.17192092146453342, 0.17192092146453342, 0.17192092146453342, 0.10978085576159469, 0.10978085576159469, 0.10978085576159469, 0.14830397243499682, 0.14830397243499682, 0.14830397243499682, 0.120647444893895, 0.120647444893895, 0.120647444893895, 0.12595694115508416, 0.12595694115508416, 0.12595694115508416, 0.13008802081336923, 0.13008802081336923, 0.13008802081336923, 0.963138418364901, 0.963138418364901, 0.963138418364901, 0.9559557465718128, 0.9559557465718128, 0.9559557465718128, 0.9686346420003557, 0.9686346420003557, 0.9686346420003557, 0.1111836560682139, 0.1111836560682139, 0.1111836560682139, 0.10950210575107722, 0.10950210575107722, 0.10950210575107722, 0.11313540282595691, 0.11313540282595691, 0.11313540282595691, 0.31394792873951494, 0.31394792873951494, 0.31394792873951494, 0.22546980306494602, 0.22546980306494602, 0.22546980306494602, 0.3469831454672676, 0.3469831454672676, 0.3469831454672676, 0.1419175838836183, 0.1419175838836183, 0.1419175838836183, 0.15459303795570034, 0.15459303795570034, 0.15459303795570034, 0.1390134899500285, 0.1390134899500285, 0.1390134899500285, 0.05956302988701523, 0.05956302988701523, 0.05956302988701523, 0.14243810086476683, 0.14243810086476683, 0.14243810086476683, 0.14805768283176457, 0.14805768283176457, 0.14805768283176457, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03142144701483229, 0.03142144701483229, 0.03142144701483229, 0.09506989892165674, 0.09506989892165674, 0.09506989892165674, 0.07301882072157473, 0.07301882072157473, 0.07301882072157473, 0.10359300893040291, 0.10359300893040291, 0.10359300893040291, 0.021683643306994793, 0.021683643306994793, 0.021683643306994793, 0.1366683779410065, 0.1366683779410065, 0.1366683779410065, 0.1833920317459341, 0.1833920317459341, 0.1833920317459341, 0.1034558292059925, 0.1034558292059925, 0.1034558292059925, 0.14656633497237037, 0.14656633497237037, 0.14656633497237037, 0.15264648487092913, 0.15264648487092913, 0.15264648487092913, 0.44965731718021185, 0.44965731718021185, 0.44965731718021185, 0.4427464321719673, 0.4427464321719673, 0.4427464321719673, 0.4432407405700687, 0.4432407405700687, 0.4432407405700687, 0.10905512672909867, 0.10905512672909867, 0.10905512672909867, 0.13239508716030646, 0.13239508716030646, 0.13239508716030646, 0.12382697562062894, 0.12382697562062894, 0.12382697562062894, 0.18788404614356358, 0.18788404614356358, 0.18788404614356358, 0.1794506229764078, 0.1794506229764078, 0.1794506229764078, 0.19895547727053342, 0.19895547727053342, 0.19895547727053342, 0.30452602856267375, 0.30452602856267375, 0.30452602856267375, 0.328035694661453, 0.328035694661453, 0.328035694661453, 0.2935223684420718, 0.2935223684420718, 0.2935223684420718, 0.24480061962906585, 0.24480061962906585, 0.24480061962906585, 0.21697846301636936, 0.21697846301636936, 0.21697846301636936, 0.1663806167644759, 0.1663806167644759, 0.1663806167644759, 0.23141128434223213, 0.23141128434223213, 0.23141128434223213, 0.21009703667457302, 0.21009703667457302, 0.21009703667457302, 0.20663971393346914, 0.20663971393346914, 0.20663971393346914, 0.20807234857039025, 0.20807234857039025, 0.20807234857039025, 0.21431945369667227, 0.21431945369667227, 0.21431945369667227, 0.21220028090184928, 0.21220028090184928, 0.21220028090184928, 0.4366858001332674, 0.4366858001332674, 0.4366858001332674, 0.1957459550938816, 0.1957459550938816, 0.1957459550938816, 0.16883410650693387, 0.16883410650693387, 0.16883410650693387, 0.16369001941449768, 0.16369001941449768, 0.16369001941449768, 0.31132619147315943, 0.31132619147315943, 0.31132619147315943, 0.198904215680891, 0.198904215680891, 0.198904215680891, 0.191909457855025, 0.191909457855025, 0.191909457855025, 0.19691272372107027, 0.19691272372107027, 0.19691272372107027, 0.20088640129784308, 0.20088640129784308, 0.20088640129784308, 0.08349422905117188, 0.08349422905117188, 0.08349422905117188, 0.07213418417513873, 0.07213418417513873, 0.07213418417513873, 0.09961438228729058, 0.09961438228729058, 0.09961438228729058]}, "mutation_prompt": null}
{"id": "c02c2799-4184-416b-90a3-876bdf40a273", "solution": "import numpy as np\n\nclass SelfAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim  # Slightly reduced population size for faster convergence\n        self.initial_mutation_factor = 0.8  # Adjusted initial mutation factor for exploration\n        self.crossover_rate = 0.9  # Increased crossover rate for diversity\n        self.mutation_decay = 0.98  # Optimized decay for mutation factor\n        self.split_factor = 0.5  # Subpopulation split factor\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        evals = self.population_size\n        mutation_factor = self.initial_mutation_factor\n\n        while evals < self.budget:\n            subpop_size = int(self.population_size * self.split_factor)\n            for i in range(self.population_size):\n                idxs = list(range(self.population_size))\n                idxs.remove(i)\n                sample_size = subpop_size if np.random.rand() < 0.5 else self.population_size  # Dynamic subpopulation\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(a + mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n\n                if evals >= self.budget:\n                    break\n\n            mutation_factor *= self.mutation_decay  # Apply decay to mutation factor\n            if evals % (self.population_size // 2) == 0:  # Adapt learning rate dynamically\n                self.crossover_rate = 0.7 + 0.3 * np.random.rand()\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "SelfAdaptiveDifferentialEvolution", "description": "Introduced Self-Adaptive Differential Evolution with Dynamic Subpopulation Strategies and Adaptive Learning Rates for Enhanced Convergence.", "configspace": "", "generation": 65, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b7df5738-e239-453b-932f-2ae32e017b36", "metadata": {"aucs": [0.8028974999397684, 0.8028974999397684, 0.8028974999397684, 0.820162767335356, 0.820162767335356, 0.820162767335356, 0.8268158805027072, 0.8268158805027072, 0.8268158805027072, 0.6912682274538304, 0.6912682274538304, 0.6912682274538304, 0.5844808858752991, 0.5844808858752991, 0.5844808858752991, 0.6828452545688112, 0.6828452545688112, 0.6828452545688112, 0.2069948826304837, 0.2069948826304837, 0.2069948826304837, 0.25479576379989277, 0.25479576379989277, 0.25479576379989277, 0.3096555827229023, 0.3096555827229023, 0.3096555827229023, 0.16803182716129272, 0.16803182716129272, 0.16803182716129272, 0.2125972816080981, 0.2125972816080981, 0.2125972816080981, 0.13420800187083226, 0.13420800187083226, 0.13420800187083226, 0.9543543436153276, 0.9543543436153276, 0.9543543436153276, 0.9635622803614148, 0.9635622803614148, 0.9635622803614148, 0.9785171936615114, 0.9785171936615114, 0.9785171936615114, 0.22746277654182945, 0.22746277654182945, 0.22746277654182945, 0.18213375266531762, 0.18213375266531762, 0.18213375266531762, 0.3027151787666107, 0.3027151787666107, 0.3027151787666107, 0.7746545356265845, 0.7746545356265845, 0.7746545356265845, 0.7911711620707444, 0.7911711620707444, 0.7911711620707444, 0.7824307938694764, 0.7824307938694764, 0.7824307938694764, 0.16018975197729757, 0.16018975197729757, 0.16018975197729757, 0.29362630482925267, 0.29362630482925267, 0.29362630482925267, 0.1862258566090128, 0.1862258566090128, 0.1862258566090128, 0.12864263117106134, 0.12864263117106134, 0.12864263117106134, 0.16862340955315136, 0.16862340955315136, 0.16862340955315136, 0.13688738049704718, 0.13688738049704718, 0.13688738049704718, 0.057365535640381715, 0.057365535640381715, 0.057365535640381715, 0.1599719382778796, 0.1599719382778796, 0.1599719382778796, 0.09815978182277196, 0.09815978182277196, 0.09815978182277196, 0.32809732531911995, 0.32809732531911995, 0.32809732531911995, 0.15989542789680122, 0.15989542789680122, 0.15989542789680122, 0.39450358933421326, 0.39450358933421326, 0.39450358933421326, 0.07182819095400772, 0.07182819095400772, 0.07182819095400772, 0.21867696509157653, 0.21867696509157653, 0.21867696509157653, 0.12758638820913926, 0.12758638820913926, 0.12758638820913926, 0.20600531668127853, 0.20600531668127853, 0.20600531668127853, 0.24645502611711, 0.24645502611711, 0.24645502611711, 0.20271892435046202, 0.20271892435046202, 0.20271892435046202, 0.6010154351823194, 0.6010154351823194, 0.6010154351823194, 0.6173710628607691, 0.6173710628607691, 0.6173710628607691, 0.5525078307042829, 0.5525078307042829, 0.5525078307042829, 0.1220394034446799, 0.1220394034446799, 0.1220394034446799, 0.11876724744881773, 0.11876724744881773, 0.11876724744881773, 0.16418442071346084, 0.16418442071346084, 0.16418442071346084, 0.19307450728368347, 0.19307450728368347, 0.19307450728368347, 0.1564303088932516, 0.1564303088932516, 0.1564303088932516, 0.16070566581260937, 0.16070566581260937, 0.16070566581260937, 0.4104016892617022, 0.4104016892617022, 0.4104016892617022, 0.44735681110297965, 0.44735681110297965, 0.44735681110297965, 0.5117808824782959, 0.5117808824782959, 0.5117808824782959, 0.29691328184405497, 0.29691328184405497, 0.29691328184405497, 0.34080395958329524, 0.34080395958329524, 0.34080395958329524, 0.3056440310160867, 0.3056440310160867, 0.3056440310160867, 0.20509343921024492, 0.20509343921024492, 0.20509343921024492, 0.22041205601336689, 0.22041205601336689, 0.22041205601336689, 0.20323679804723838, 0.20323679804723838, 0.20323679804723838, 0.20667532748988104, 0.20667532748988104, 0.20667532748988104, 0.19966699706438262, 0.19966699706438262, 0.19966699706438262, 0.2858116053381321, 0.2858116053381321, 0.2858116053381321, 0.16301391266713094, 0.16301391266713094, 0.16301391266713094, 0.7239730569828753, 0.7239730569828753, 0.7239730569828753, 0.18129467615580674, 0.18129467615580674, 0.18129467615580674, 0.28515658620773476, 0.28515658620773476, 0.28515658620773476, 0.1935435239197778, 0.1935435239197778, 0.1935435239197778, 0.1467211704148913, 0.1467211704148913, 0.1467211704148913, 0.18991866161784787, 0.18991866161784787, 0.18991866161784787, 0.16535842938777856, 0.16535842938777856, 0.16535842938777856, 0.19316296124109922, 0.19316296124109922, 0.19316296124109922, 0.08535354931102046, 0.08535354931102046, 0.08535354931102046, 0.08660617035399687, 0.08660617035399687, 0.08660617035399687, 0.09014726101582149, 0.09014726101582149, 0.09014726101582149]}, "mutation_prompt": null}
{"id": "bfdc5d3d-2598-410d-8d5f-a78928f1c989", "solution": "import numpy as np\n\nclass SelfAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim  # Slightly reduced population size for faster convergence\n        self.initial_mutation_factor = 0.8  # Adjusted initial mutation factor for exploration\n        self.crossover_rate = 0.9  # Increased crossover rate for diversity\n        self.mutation_decay = 0.98  # Optimized decay for mutation factor\n        self.split_factor = 0.5  # Subpopulation split factor\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        evals = self.population_size\n        mutation_factor = self.initial_mutation_factor\n\n        while evals < self.budget:\n            subpop_size = int(self.population_size * self.split_factor)\n            for i in range(self.population_size):\n                idxs = list(range(self.population_size))\n                idxs.remove(i)\n                sample_size = subpop_size if np.random.rand() < 0.5 else self.population_size  # Dynamic subpopulation\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(a + mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n\n                if evals >= self.budget:\n                    break\n\n            mutation_factor *= self.mutation_decay  # Apply decay to mutation factor\n            if evals % (self.population_size // 2) == 0:  # Adapt learning rate dynamically\n                self.crossover_rate = 0.7 + 0.3 * np.random.rand()\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "SelfAdaptiveDifferentialEvolution", "description": "Introduced Self-Adaptive Differential Evolution with Dynamic Subpopulation Strategies and Adaptive Learning Rates for Enhanced Convergence.", "configspace": "", "generation": 65, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b7df5738-e239-453b-932f-2ae32e017b36", "metadata": {"aucs": [0.8028974999397684, 0.8028974999397684, 0.8028974999397684, 0.820162767335356, 0.820162767335356, 0.820162767335356, 0.8268158805027072, 0.8268158805027072, 0.8268158805027072, 0.6912682274538304, 0.6912682274538304, 0.6912682274538304, 0.5844808858752991, 0.5844808858752991, 0.5844808858752991, 0.6828452545688112, 0.6828452545688112, 0.6828452545688112, 0.2069948826304837, 0.2069948826304837, 0.2069948826304837, 0.25479576379989277, 0.25479576379989277, 0.25479576379989277, 0.3096555827229023, 0.3096555827229023, 0.3096555827229023, 0.16803182716129272, 0.16803182716129272, 0.16803182716129272, 0.2125972816080981, 0.2125972816080981, 0.2125972816080981, 0.13420800187083226, 0.13420800187083226, 0.13420800187083226, 0.9543543436153276, 0.9543543436153276, 0.9543543436153276, 0.9635622803614148, 0.9635622803614148, 0.9635622803614148, 0.9785171936615114, 0.9785171936615114, 0.9785171936615114, 0.22746277654182945, 0.22746277654182945, 0.22746277654182945, 0.18213375266531762, 0.18213375266531762, 0.18213375266531762, 0.3027151787666107, 0.3027151787666107, 0.3027151787666107, 0.7746545356265845, 0.7746545356265845, 0.7746545356265845, 0.7911711620707444, 0.7911711620707444, 0.7911711620707444, 0.7824307938694764, 0.7824307938694764, 0.7824307938694764, 0.16018975197729757, 0.16018975197729757, 0.16018975197729757, 0.29362630482925267, 0.29362630482925267, 0.29362630482925267, 0.1862258566090128, 0.1862258566090128, 0.1862258566090128, 0.12864263117106134, 0.12864263117106134, 0.12864263117106134, 0.16862340955315136, 0.16862340955315136, 0.16862340955315136, 0.13688738049704718, 0.13688738049704718, 0.13688738049704718, 0.057365535640381715, 0.057365535640381715, 0.057365535640381715, 0.1599719382778796, 0.1599719382778796, 0.1599719382778796, 0.09815978182277196, 0.09815978182277196, 0.09815978182277196, 0.32809732531911995, 0.32809732531911995, 0.32809732531911995, 0.15989542789680122, 0.15989542789680122, 0.15989542789680122, 0.39450358933421326, 0.39450358933421326, 0.39450358933421326, 0.07182819095400772, 0.07182819095400772, 0.07182819095400772, 0.21867696509157653, 0.21867696509157653, 0.21867696509157653, 0.12758638820913926, 0.12758638820913926, 0.12758638820913926, 0.20600531668127853, 0.20600531668127853, 0.20600531668127853, 0.24645502611711, 0.24645502611711, 0.24645502611711, 0.20271892435046202, 0.20271892435046202, 0.20271892435046202, 0.6010154351823194, 0.6010154351823194, 0.6010154351823194, 0.6173710628607691, 0.6173710628607691, 0.6173710628607691, 0.5525078307042829, 0.5525078307042829, 0.5525078307042829, 0.1220394034446799, 0.1220394034446799, 0.1220394034446799, 0.11876724744881773, 0.11876724744881773, 0.11876724744881773, 0.16418442071346084, 0.16418442071346084, 0.16418442071346084, 0.19307450728368347, 0.19307450728368347, 0.19307450728368347, 0.1564303088932516, 0.1564303088932516, 0.1564303088932516, 0.16070566581260937, 0.16070566581260937, 0.16070566581260937, 0.4104016892617022, 0.4104016892617022, 0.4104016892617022, 0.44735681110297965, 0.44735681110297965, 0.44735681110297965, 0.5117808824782959, 0.5117808824782959, 0.5117808824782959, 0.29691328184405497, 0.29691328184405497, 0.29691328184405497, 0.34080395958329524, 0.34080395958329524, 0.34080395958329524, 0.3056440310160867, 0.3056440310160867, 0.3056440310160867, 0.20509343921024492, 0.20509343921024492, 0.20509343921024492, 0.22041205601336689, 0.22041205601336689, 0.22041205601336689, 0.20323679804723838, 0.20323679804723838, 0.20323679804723838, 0.20667532748988104, 0.20667532748988104, 0.20667532748988104, 0.19966699706438262, 0.19966699706438262, 0.19966699706438262, 0.2858116053381321, 0.2858116053381321, 0.2858116053381321, 0.16301391266713094, 0.16301391266713094, 0.16301391266713094, 0.7239730569828753, 0.7239730569828753, 0.7239730569828753, 0.18129467615580674, 0.18129467615580674, 0.18129467615580674, 0.28515658620773476, 0.28515658620773476, 0.28515658620773476, 0.1935435239197778, 0.1935435239197778, 0.1935435239197778, 0.1467211704148913, 0.1467211704148913, 0.1467211704148913, 0.18991866161784787, 0.18991866161784787, 0.18991866161784787, 0.16535842938777856, 0.16535842938777856, 0.16535842938777856, 0.19316296124109922, 0.19316296124109922, 0.19316296124109922, 0.08535354931102046, 0.08535354931102046, 0.08535354931102046, 0.08660617035399687, 0.08660617035399687, 0.08660617035399687, 0.09014726101582149, 0.09014726101582149, 0.09014726101582149]}, "mutation_prompt": null}
{"id": "dd67e97d-654d-4e3c-92a6-d791fcc24a49", "solution": "import numpy as np\n\nclass SelfAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim  # Slightly reduced population size for faster convergence\n        self.initial_mutation_factor = 0.8  # Adjusted initial mutation factor for exploration\n        self.crossover_rate = 0.9  # Increased crossover rate for diversity\n        self.mutation_decay = 0.98  # Optimized decay for mutation factor\n        self.split_factor = 0.5  # Subpopulation split factor\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        evals = self.population_size\n        mutation_factor = self.initial_mutation_factor\n\n        while evals < self.budget:\n            subpop_size = int(self.population_size * self.split_factor)\n            for i in range(self.population_size):\n                idxs = list(range(self.population_size))\n                idxs.remove(i)\n                sample_size = subpop_size if np.random.rand() < 0.5 else self.population_size  # Dynamic subpopulation\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(a + mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n\n                if evals >= self.budget:\n                    break\n\n            mutation_factor *= self.mutation_decay  # Apply decay to mutation factor\n            if evals % (self.population_size // 2) == 0:  # Adapt learning rate dynamically\n                self.crossover_rate = 0.7 + 0.3 * np.random.rand()\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "SelfAdaptiveDifferentialEvolution", "description": "Introduced Self-Adaptive Differential Evolution with Dynamic Subpopulation Strategies and Adaptive Learning Rates for Enhanced Convergence.", "configspace": "", "generation": 65, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b7df5738-e239-453b-932f-2ae32e017b36", "metadata": {"aucs": [0.8028974999397684, 0.8028974999397684, 0.8028974999397684, 0.820162767335356, 0.820162767335356, 0.820162767335356, 0.8268158805027072, 0.8268158805027072, 0.8268158805027072, 0.6912682274538304, 0.6912682274538304, 0.6912682274538304, 0.5844808858752991, 0.5844808858752991, 0.5844808858752991, 0.6828452545688112, 0.6828452545688112, 0.6828452545688112, 0.2069948826304837, 0.2069948826304837, 0.2069948826304837, 0.25479576379989277, 0.25479576379989277, 0.25479576379989277, 0.3096555827229023, 0.3096555827229023, 0.3096555827229023, 0.16803182716129272, 0.16803182716129272, 0.16803182716129272, 0.2125972816080981, 0.2125972816080981, 0.2125972816080981, 0.13420800187083226, 0.13420800187083226, 0.13420800187083226, 0.9543543436153276, 0.9543543436153276, 0.9543543436153276, 0.9635622803614148, 0.9635622803614148, 0.9635622803614148, 0.9785171936615114, 0.9785171936615114, 0.9785171936615114, 0.22746277654182945, 0.22746277654182945, 0.22746277654182945, 0.18213375266531762, 0.18213375266531762, 0.18213375266531762, 0.3027151787666107, 0.3027151787666107, 0.3027151787666107, 0.7746545356265845, 0.7746545356265845, 0.7746545356265845, 0.7911711620707444, 0.7911711620707444, 0.7911711620707444, 0.7824307938694764, 0.7824307938694764, 0.7824307938694764, 0.16018975197729757, 0.16018975197729757, 0.16018975197729757, 0.29362630482925267, 0.29362630482925267, 0.29362630482925267, 0.1862258566090128, 0.1862258566090128, 0.1862258566090128, 0.12864263117106134, 0.12864263117106134, 0.12864263117106134, 0.16862340955315136, 0.16862340955315136, 0.16862340955315136, 0.13688738049704718, 0.13688738049704718, 0.13688738049704718, 0.057365535640381715, 0.057365535640381715, 0.057365535640381715, 0.1599719382778796, 0.1599719382778796, 0.1599719382778796, 0.09815978182277196, 0.09815978182277196, 0.09815978182277196, 0.32809732531911995, 0.32809732531911995, 0.32809732531911995, 0.15989542789680122, 0.15989542789680122, 0.15989542789680122, 0.39450358933421326, 0.39450358933421326, 0.39450358933421326, 0.07182819095400772, 0.07182819095400772, 0.07182819095400772, 0.21867696509157653, 0.21867696509157653, 0.21867696509157653, 0.12758638820913926, 0.12758638820913926, 0.12758638820913926, 0.20600531668127853, 0.20600531668127853, 0.20600531668127853, 0.24645502611711, 0.24645502611711, 0.24645502611711, 0.20271892435046202, 0.20271892435046202, 0.20271892435046202, 0.6010154351823194, 0.6010154351823194, 0.6010154351823194, 0.6173710628607691, 0.6173710628607691, 0.6173710628607691, 0.5525078307042829, 0.5525078307042829, 0.5525078307042829, 0.1220394034446799, 0.1220394034446799, 0.1220394034446799, 0.11876724744881773, 0.11876724744881773, 0.11876724744881773, 0.16418442071346084, 0.16418442071346084, 0.16418442071346084, 0.19307450728368347, 0.19307450728368347, 0.19307450728368347, 0.1564303088932516, 0.1564303088932516, 0.1564303088932516, 0.16070566581260937, 0.16070566581260937, 0.16070566581260937, 0.4104016892617022, 0.4104016892617022, 0.4104016892617022, 0.44735681110297965, 0.44735681110297965, 0.44735681110297965, 0.5117808824782959, 0.5117808824782959, 0.5117808824782959, 0.29691328184405497, 0.29691328184405497, 0.29691328184405497, 0.34080395958329524, 0.34080395958329524, 0.34080395958329524, 0.3056440310160867, 0.3056440310160867, 0.3056440310160867, 0.20509343921024492, 0.20509343921024492, 0.20509343921024492, 0.22041205601336689, 0.22041205601336689, 0.22041205601336689, 0.20323679804723838, 0.20323679804723838, 0.20323679804723838, 0.20667532748988104, 0.20667532748988104, 0.20667532748988104, 0.19966699706438262, 0.19966699706438262, 0.19966699706438262, 0.2858116053381321, 0.2858116053381321, 0.2858116053381321, 0.16301391266713094, 0.16301391266713094, 0.16301391266713094, 0.7239730569828753, 0.7239730569828753, 0.7239730569828753, 0.18129467615580674, 0.18129467615580674, 0.18129467615580674, 0.28515658620773476, 0.28515658620773476, 0.28515658620773476, 0.1935435239197778, 0.1935435239197778, 0.1935435239197778, 0.1467211704148913, 0.1467211704148913, 0.1467211704148913, 0.18991866161784787, 0.18991866161784787, 0.18991866161784787, 0.16535842938777856, 0.16535842938777856, 0.16535842938777856, 0.19316296124109922, 0.19316296124109922, 0.19316296124109922, 0.08535354931102046, 0.08535354931102046, 0.08535354931102046, 0.08660617035399687, 0.08660617035399687, 0.08660617035399687, 0.09014726101582149, 0.09014726101582149, 0.09014726101582149]}, "mutation_prompt": null}
{"id": "6a593001-3d35-4f16-8b00-4068babfd356", "solution": "import numpy as np\n\nclass SelfAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim  # Slightly reduced population size for faster convergence\n        self.initial_mutation_factor = 0.8  # Adjusted initial mutation factor for exploration\n        self.crossover_rate = 0.9  # Increased crossover rate for diversity\n        self.mutation_decay = 0.98  # Optimized decay for mutation factor\n        self.split_factor = 0.5  # Subpopulation split factor\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        evals = self.population_size\n        mutation_factor = self.initial_mutation_factor\n\n        while evals < self.budget:\n            subpop_size = int(self.population_size * self.split_factor)\n            for i in range(self.population_size):\n                idxs = list(range(self.population_size))\n                idxs.remove(i)\n                sample_size = subpop_size if np.random.rand() < 0.5 else self.population_size  # Dynamic subpopulation\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(a + mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n\n                if evals >= self.budget:\n                    break\n\n            mutation_factor *= self.mutation_decay  # Apply decay to mutation factor\n            if evals % (self.population_size // 2) == 0:  # Adapt learning rate dynamically\n                self.crossover_rate = 0.7 + 0.3 * np.random.rand()\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "SelfAdaptiveDifferentialEvolution", "description": "Introduced Self-Adaptive Differential Evolution with Dynamic Subpopulation Strategies and Adaptive Learning Rates for Enhanced Convergence.", "configspace": "", "generation": 65, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b7df5738-e239-453b-932f-2ae32e017b36", "metadata": {"aucs": [0.8028974999397684, 0.8028974999397684, 0.8028974999397684, 0.820162767335356, 0.820162767335356, 0.820162767335356, 0.8268158805027072, 0.8268158805027072, 0.8268158805027072, 0.6912682274538304, 0.6912682274538304, 0.6912682274538304, 0.5844808858752991, 0.5844808858752991, 0.5844808858752991, 0.6828452545688112, 0.6828452545688112, 0.6828452545688112, 0.2069948826304837, 0.2069948826304837, 0.2069948826304837, 0.25479576379989277, 0.25479576379989277, 0.25479576379989277, 0.3096555827229023, 0.3096555827229023, 0.3096555827229023, 0.16803182716129272, 0.16803182716129272, 0.16803182716129272, 0.2125972816080981, 0.2125972816080981, 0.2125972816080981, 0.13420800187083226, 0.13420800187083226, 0.13420800187083226, 0.9543543436153276, 0.9543543436153276, 0.9543543436153276, 0.9635622803614148, 0.9635622803614148, 0.9635622803614148, 0.9785171936615114, 0.9785171936615114, 0.9785171936615114, 0.22746277654182945, 0.22746277654182945, 0.22746277654182945, 0.18213375266531762, 0.18213375266531762, 0.18213375266531762, 0.3027151787666107, 0.3027151787666107, 0.3027151787666107, 0.7746545356265845, 0.7746545356265845, 0.7746545356265845, 0.7911711620707444, 0.7911711620707444, 0.7911711620707444, 0.7824307938694764, 0.7824307938694764, 0.7824307938694764, 0.16018975197729757, 0.16018975197729757, 0.16018975197729757, 0.29362630482925267, 0.29362630482925267, 0.29362630482925267, 0.1862258566090128, 0.1862258566090128, 0.1862258566090128, 0.12864263117106134, 0.12864263117106134, 0.12864263117106134, 0.16862340955315136, 0.16862340955315136, 0.16862340955315136, 0.13688738049704718, 0.13688738049704718, 0.13688738049704718, 0.057365535640381715, 0.057365535640381715, 0.057365535640381715, 0.1599719382778796, 0.1599719382778796, 0.1599719382778796, 0.09815978182277196, 0.09815978182277196, 0.09815978182277196, 0.32809732531911995, 0.32809732531911995, 0.32809732531911995, 0.15989542789680122, 0.15989542789680122, 0.15989542789680122, 0.39450358933421326, 0.39450358933421326, 0.39450358933421326, 0.07182819095400772, 0.07182819095400772, 0.07182819095400772, 0.21867696509157653, 0.21867696509157653, 0.21867696509157653, 0.12758638820913926, 0.12758638820913926, 0.12758638820913926, 0.20600531668127853, 0.20600531668127853, 0.20600531668127853, 0.24645502611711, 0.24645502611711, 0.24645502611711, 0.20271892435046202, 0.20271892435046202, 0.20271892435046202, 0.6010154351823194, 0.6010154351823194, 0.6010154351823194, 0.6173710628607691, 0.6173710628607691, 0.6173710628607691, 0.5525078307042829, 0.5525078307042829, 0.5525078307042829, 0.1220394034446799, 0.1220394034446799, 0.1220394034446799, 0.11876724744881773, 0.11876724744881773, 0.11876724744881773, 0.16418442071346084, 0.16418442071346084, 0.16418442071346084, 0.19307450728368347, 0.19307450728368347, 0.19307450728368347, 0.1564303088932516, 0.1564303088932516, 0.1564303088932516, 0.16070566581260937, 0.16070566581260937, 0.16070566581260937, 0.4104016892617022, 0.4104016892617022, 0.4104016892617022, 0.44735681110297965, 0.44735681110297965, 0.44735681110297965, 0.5117808824782959, 0.5117808824782959, 0.5117808824782959, 0.29691328184405497, 0.29691328184405497, 0.29691328184405497, 0.34080395958329524, 0.34080395958329524, 0.34080395958329524, 0.3056440310160867, 0.3056440310160867, 0.3056440310160867, 0.20509343921024492, 0.20509343921024492, 0.20509343921024492, 0.22041205601336689, 0.22041205601336689, 0.22041205601336689, 0.20323679804723838, 0.20323679804723838, 0.20323679804723838, 0.20667532748988104, 0.20667532748988104, 0.20667532748988104, 0.19966699706438262, 0.19966699706438262, 0.19966699706438262, 0.2858116053381321, 0.2858116053381321, 0.2858116053381321, 0.16301391266713094, 0.16301391266713094, 0.16301391266713094, 0.7239730569828753, 0.7239730569828753, 0.7239730569828753, 0.18129467615580674, 0.18129467615580674, 0.18129467615580674, 0.28515658620773476, 0.28515658620773476, 0.28515658620773476, 0.1935435239197778, 0.1935435239197778, 0.1935435239197778, 0.1467211704148913, 0.1467211704148913, 0.1467211704148913, 0.18991866161784787, 0.18991866161784787, 0.18991866161784787, 0.16535842938777856, 0.16535842938777856, 0.16535842938777856, 0.19316296124109922, 0.19316296124109922, 0.19316296124109922, 0.08535354931102046, 0.08535354931102046, 0.08535354931102046, 0.08660617035399687, 0.08660617035399687, 0.08660617035399687, 0.09014726101582149, 0.09014726101582149, 0.09014726101582149]}, "mutation_prompt": null}
{"id": "ee0548a8-93c6-42f7-9973-b06568426f08", "solution": "import numpy as np\n\nclass SelfAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim  # Slightly reduced population size for faster convergence\n        self.initial_mutation_factor = 0.8  # Adjusted initial mutation factor for exploration\n        self.crossover_rate = 0.9  # Increased crossover rate for diversity\n        self.mutation_decay = 0.98  # Optimized decay for mutation factor\n        self.split_factor = 0.5  # Subpopulation split factor\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        evals = self.population_size\n        mutation_factor = self.initial_mutation_factor\n\n        while evals < self.budget:\n            subpop_size = int(self.population_size * self.split_factor)\n            for i in range(self.population_size):\n                idxs = list(range(self.population_size))\n                idxs.remove(i)\n                sample_size = subpop_size if np.random.rand() < 0.5 else self.population_size  # Dynamic subpopulation\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(a + mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n\n                if evals >= self.budget:\n                    break\n\n            mutation_factor *= self.mutation_decay  # Apply decay to mutation factor\n            if evals % (self.population_size // 2) == 0:  # Adapt learning rate dynamically\n                self.crossover_rate = 0.7 + 0.3 * np.random.rand()\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "SelfAdaptiveDifferentialEvolution", "description": "Introduced Self-Adaptive Differential Evolution with Dynamic Subpopulation Strategies and Adaptive Learning Rates for Enhanced Convergence.", "configspace": "", "generation": 65, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b7df5738-e239-453b-932f-2ae32e017b36", "metadata": {"aucs": [0.8028974999397684, 0.8028974999397684, 0.8028974999397684, 0.820162767335356, 0.820162767335356, 0.820162767335356, 0.8268158805027072, 0.8268158805027072, 0.8268158805027072, 0.6912682274538304, 0.6912682274538304, 0.6912682274538304, 0.5844808858752991, 0.5844808858752991, 0.5844808858752991, 0.6828452545688112, 0.6828452545688112, 0.6828452545688112, 0.2069948826304837, 0.2069948826304837, 0.2069948826304837, 0.25479576379989277, 0.25479576379989277, 0.25479576379989277, 0.3096555827229023, 0.3096555827229023, 0.3096555827229023, 0.16803182716129272, 0.16803182716129272, 0.16803182716129272, 0.2125972816080981, 0.2125972816080981, 0.2125972816080981, 0.13420800187083226, 0.13420800187083226, 0.13420800187083226, 0.9543543436153276, 0.9543543436153276, 0.9543543436153276, 0.9635622803614148, 0.9635622803614148, 0.9635622803614148, 0.9785171936615114, 0.9785171936615114, 0.9785171936615114, 0.22746277654182945, 0.22746277654182945, 0.22746277654182945, 0.18213375266531762, 0.18213375266531762, 0.18213375266531762, 0.3027151787666107, 0.3027151787666107, 0.3027151787666107, 0.7746545356265845, 0.7746545356265845, 0.7746545356265845, 0.7911711620707444, 0.7911711620707444, 0.7911711620707444, 0.7824307938694764, 0.7824307938694764, 0.7824307938694764, 0.16018975197729757, 0.16018975197729757, 0.16018975197729757, 0.29362630482925267, 0.29362630482925267, 0.29362630482925267, 0.1862258566090128, 0.1862258566090128, 0.1862258566090128, 0.12864263117106134, 0.12864263117106134, 0.12864263117106134, 0.16862340955315136, 0.16862340955315136, 0.16862340955315136, 0.13688738049704718, 0.13688738049704718, 0.13688738049704718, 0.057365535640381715, 0.057365535640381715, 0.057365535640381715, 0.1599719382778796, 0.1599719382778796, 0.1599719382778796, 0.09815978182277196, 0.09815978182277196, 0.09815978182277196, 0.32809732531911995, 0.32809732531911995, 0.32809732531911995, 0.15989542789680122, 0.15989542789680122, 0.15989542789680122, 0.39450358933421326, 0.39450358933421326, 0.39450358933421326, 0.07182819095400772, 0.07182819095400772, 0.07182819095400772, 0.21867696509157653, 0.21867696509157653, 0.21867696509157653, 0.12758638820913926, 0.12758638820913926, 0.12758638820913926, 0.20600531668127853, 0.20600531668127853, 0.20600531668127853, 0.24645502611711, 0.24645502611711, 0.24645502611711, 0.20271892435046202, 0.20271892435046202, 0.20271892435046202, 0.6010154351823194, 0.6010154351823194, 0.6010154351823194, 0.6173710628607691, 0.6173710628607691, 0.6173710628607691, 0.5525078307042829, 0.5525078307042829, 0.5525078307042829, 0.1220394034446799, 0.1220394034446799, 0.1220394034446799, 0.11876724744881773, 0.11876724744881773, 0.11876724744881773, 0.16418442071346084, 0.16418442071346084, 0.16418442071346084, 0.19307450728368347, 0.19307450728368347, 0.19307450728368347, 0.1564303088932516, 0.1564303088932516, 0.1564303088932516, 0.16070566581260937, 0.16070566581260937, 0.16070566581260937, 0.4104016892617022, 0.4104016892617022, 0.4104016892617022, 0.44735681110297965, 0.44735681110297965, 0.44735681110297965, 0.5117808824782959, 0.5117808824782959, 0.5117808824782959, 0.29691328184405497, 0.29691328184405497, 0.29691328184405497, 0.34080395958329524, 0.34080395958329524, 0.34080395958329524, 0.3056440310160867, 0.3056440310160867, 0.3056440310160867, 0.20509343921024492, 0.20509343921024492, 0.20509343921024492, 0.22041205601336689, 0.22041205601336689, 0.22041205601336689, 0.20323679804723838, 0.20323679804723838, 0.20323679804723838, 0.20667532748988104, 0.20667532748988104, 0.20667532748988104, 0.19966699706438262, 0.19966699706438262, 0.19966699706438262, 0.2858116053381321, 0.2858116053381321, 0.2858116053381321, 0.16301391266713094, 0.16301391266713094, 0.16301391266713094, 0.7239730569828753, 0.7239730569828753, 0.7239730569828753, 0.18129467615580674, 0.18129467615580674, 0.18129467615580674, 0.28515658620773476, 0.28515658620773476, 0.28515658620773476, 0.1935435239197778, 0.1935435239197778, 0.1935435239197778, 0.1467211704148913, 0.1467211704148913, 0.1467211704148913, 0.18991866161784787, 0.18991866161784787, 0.18991866161784787, 0.16535842938777856, 0.16535842938777856, 0.16535842938777856, 0.19316296124109922, 0.19316296124109922, 0.19316296124109922, 0.08535354931102046, 0.08535354931102046, 0.08535354931102046, 0.08660617035399687, 0.08660617035399687, 0.08660617035399687, 0.09014726101582149, 0.09014726101582149, 0.09014726101582149]}, "mutation_prompt": null}
{"id": "9fb536ea-6668-44e5-9ca7-9ef1d1dae217", "solution": "import numpy as np\n\nclass SelfAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim  # Slightly reduced population size for faster convergence\n        self.initial_mutation_factor = 0.8  # Adjusted initial mutation factor for exploration\n        self.crossover_rate = 0.9  # Increased crossover rate for diversity\n        self.mutation_decay = 0.98  # Optimized decay for mutation factor\n        self.split_factor = 0.5  # Subpopulation split factor\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        evals = self.population_size\n        mutation_factor = self.initial_mutation_factor\n\n        while evals < self.budget:\n            subpop_size = int(self.population_size * self.split_factor)\n            for i in range(self.population_size):\n                idxs = list(range(self.population_size))\n                idxs.remove(i)\n                sample_size = subpop_size if np.random.rand() < 0.5 else self.population_size  # Dynamic subpopulation\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(a + mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n\n                if evals >= self.budget:\n                    break\n\n            mutation_factor *= self.mutation_decay  # Apply decay to mutation factor\n            if evals % (self.population_size // 2) == 0:  # Adapt learning rate dynamically\n                self.crossover_rate = 0.7 + 0.3 * np.random.rand()\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "SelfAdaptiveDifferentialEvolution", "description": "Introduced Self-Adaptive Differential Evolution with Dynamic Subpopulation Strategies and Adaptive Learning Rates for Enhanced Convergence.", "configspace": "", "generation": 65, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b7df5738-e239-453b-932f-2ae32e017b36", "metadata": {"aucs": [0.8028974999397684, 0.8028974999397684, 0.8028974999397684, 0.820162767335356, 0.820162767335356, 0.820162767335356, 0.8268158805027072, 0.8268158805027072, 0.8268158805027072, 0.6912682274538304, 0.6912682274538304, 0.6912682274538304, 0.5844808858752991, 0.5844808858752991, 0.5844808858752991, 0.6828452545688112, 0.6828452545688112, 0.6828452545688112, 0.2069948826304837, 0.2069948826304837, 0.2069948826304837, 0.25479576379989277, 0.25479576379989277, 0.25479576379989277, 0.3096555827229023, 0.3096555827229023, 0.3096555827229023, 0.16803182716129272, 0.16803182716129272, 0.16803182716129272, 0.2125972816080981, 0.2125972816080981, 0.2125972816080981, 0.13420800187083226, 0.13420800187083226, 0.13420800187083226, 0.9543543436153276, 0.9543543436153276, 0.9543543436153276, 0.9635622803614148, 0.9635622803614148, 0.9635622803614148, 0.9785171936615114, 0.9785171936615114, 0.9785171936615114, 0.22746277654182945, 0.22746277654182945, 0.22746277654182945, 0.18213375266531762, 0.18213375266531762, 0.18213375266531762, 0.3027151787666107, 0.3027151787666107, 0.3027151787666107, 0.7746545356265845, 0.7746545356265845, 0.7746545356265845, 0.7911711620707444, 0.7911711620707444, 0.7911711620707444, 0.7824307938694764, 0.7824307938694764, 0.7824307938694764, 0.16018975197729757, 0.16018975197729757, 0.16018975197729757, 0.29362630482925267, 0.29362630482925267, 0.29362630482925267, 0.1862258566090128, 0.1862258566090128, 0.1862258566090128, 0.12864263117106134, 0.12864263117106134, 0.12864263117106134, 0.16862340955315136, 0.16862340955315136, 0.16862340955315136, 0.13688738049704718, 0.13688738049704718, 0.13688738049704718, 0.057365535640381715, 0.057365535640381715, 0.057365535640381715, 0.1599719382778796, 0.1599719382778796, 0.1599719382778796, 0.09815978182277196, 0.09815978182277196, 0.09815978182277196, 0.32809732531911995, 0.32809732531911995, 0.32809732531911995, 0.15989542789680122, 0.15989542789680122, 0.15989542789680122, 0.39450358933421326, 0.39450358933421326, 0.39450358933421326, 0.07182819095400772, 0.07182819095400772, 0.07182819095400772, 0.21867696509157653, 0.21867696509157653, 0.21867696509157653, 0.12758638820913926, 0.12758638820913926, 0.12758638820913926, 0.20600531668127853, 0.20600531668127853, 0.20600531668127853, 0.24645502611711, 0.24645502611711, 0.24645502611711, 0.20271892435046202, 0.20271892435046202, 0.20271892435046202, 0.6010154351823194, 0.6010154351823194, 0.6010154351823194, 0.6173710628607691, 0.6173710628607691, 0.6173710628607691, 0.5525078307042829, 0.5525078307042829, 0.5525078307042829, 0.1220394034446799, 0.1220394034446799, 0.1220394034446799, 0.11876724744881773, 0.11876724744881773, 0.11876724744881773, 0.16418442071346084, 0.16418442071346084, 0.16418442071346084, 0.19307450728368347, 0.19307450728368347, 0.19307450728368347, 0.1564303088932516, 0.1564303088932516, 0.1564303088932516, 0.16070566581260937, 0.16070566581260937, 0.16070566581260937, 0.4104016892617022, 0.4104016892617022, 0.4104016892617022, 0.44735681110297965, 0.44735681110297965, 0.44735681110297965, 0.5117808824782959, 0.5117808824782959, 0.5117808824782959, 0.29691328184405497, 0.29691328184405497, 0.29691328184405497, 0.34080395958329524, 0.34080395958329524, 0.34080395958329524, 0.3056440310160867, 0.3056440310160867, 0.3056440310160867, 0.20509343921024492, 0.20509343921024492, 0.20509343921024492, 0.22041205601336689, 0.22041205601336689, 0.22041205601336689, 0.20323679804723838, 0.20323679804723838, 0.20323679804723838, 0.20667532748988104, 0.20667532748988104, 0.20667532748988104, 0.19966699706438262, 0.19966699706438262, 0.19966699706438262, 0.2858116053381321, 0.2858116053381321, 0.2858116053381321, 0.16301391266713094, 0.16301391266713094, 0.16301391266713094, 0.7239730569828753, 0.7239730569828753, 0.7239730569828753, 0.18129467615580674, 0.18129467615580674, 0.18129467615580674, 0.28515658620773476, 0.28515658620773476, 0.28515658620773476, 0.1935435239197778, 0.1935435239197778, 0.1935435239197778, 0.1467211704148913, 0.1467211704148913, 0.1467211704148913, 0.18991866161784787, 0.18991866161784787, 0.18991866161784787, 0.16535842938777856, 0.16535842938777856, 0.16535842938777856, 0.19316296124109922, 0.19316296124109922, 0.19316296124109922, 0.08535354931102046, 0.08535354931102046, 0.08535354931102046, 0.08660617035399687, 0.08660617035399687, 0.08660617035399687, 0.09014726101582149, 0.09014726101582149, 0.09014726101582149]}, "mutation_prompt": null}
{"id": "f110e133-4105-41c9-9197-6484e0986cdc", "solution": "import numpy as np\n\nclass SelfAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim  # Slightly reduced population size for faster convergence\n        self.initial_mutation_factor = 0.8  # Adjusted initial mutation factor for exploration\n        self.crossover_rate = 0.9  # Increased crossover rate for diversity\n        self.mutation_decay = 0.98  # Optimized decay for mutation factor\n        self.split_factor = 0.5  # Subpopulation split factor\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        evals = self.population_size\n        mutation_factor = self.initial_mutation_factor\n\n        while evals < self.budget:\n            subpop_size = int(self.population_size * self.split_factor)\n            for i in range(self.population_size):\n                idxs = list(range(self.population_size))\n                idxs.remove(i)\n                sample_size = subpop_size if np.random.rand() < 0.5 else self.population_size  # Dynamic subpopulation\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(a + mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n\n                if evals >= self.budget:\n                    break\n\n            mutation_factor *= self.mutation_decay  # Apply decay to mutation factor\n            if evals % (self.population_size // 2) == 0:  # Adapt learning rate dynamically\n                self.crossover_rate = 0.7 + 0.3 * np.random.rand()\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "SelfAdaptiveDifferentialEvolution", "description": "Introduced Self-Adaptive Differential Evolution with Dynamic Subpopulation Strategies and Adaptive Learning Rates for Enhanced Convergence.", "configspace": "", "generation": 65, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b7df5738-e239-453b-932f-2ae32e017b36", "metadata": {"aucs": [0.8028974999397684, 0.8028974999397684, 0.8028974999397684, 0.820162767335356, 0.820162767335356, 0.820162767335356, 0.8268158805027072, 0.8268158805027072, 0.8268158805027072, 0.6912682274538304, 0.6912682274538304, 0.6912682274538304, 0.5844808858752991, 0.5844808858752991, 0.5844808858752991, 0.6828452545688112, 0.6828452545688112, 0.6828452545688112, 0.2069948826304837, 0.2069948826304837, 0.2069948826304837, 0.25479576379989277, 0.25479576379989277, 0.25479576379989277, 0.3096555827229023, 0.3096555827229023, 0.3096555827229023, 0.16803182716129272, 0.16803182716129272, 0.16803182716129272, 0.2125972816080981, 0.2125972816080981, 0.2125972816080981, 0.13420800187083226, 0.13420800187083226, 0.13420800187083226, 0.9543543436153276, 0.9543543436153276, 0.9543543436153276, 0.9635622803614148, 0.9635622803614148, 0.9635622803614148, 0.9785171936615114, 0.9785171936615114, 0.9785171936615114, 0.22746277654182945, 0.22746277654182945, 0.22746277654182945, 0.18213375266531762, 0.18213375266531762, 0.18213375266531762, 0.3027151787666107, 0.3027151787666107, 0.3027151787666107, 0.7746545356265845, 0.7746545356265845, 0.7746545356265845, 0.7911711620707444, 0.7911711620707444, 0.7911711620707444, 0.7824307938694764, 0.7824307938694764, 0.7824307938694764, 0.16018975197729757, 0.16018975197729757, 0.16018975197729757, 0.29362630482925267, 0.29362630482925267, 0.29362630482925267, 0.1862258566090128, 0.1862258566090128, 0.1862258566090128, 0.12864263117106134, 0.12864263117106134, 0.12864263117106134, 0.16862340955315136, 0.16862340955315136, 0.16862340955315136, 0.13688738049704718, 0.13688738049704718, 0.13688738049704718, 0.057365535640381715, 0.057365535640381715, 0.057365535640381715, 0.1599719382778796, 0.1599719382778796, 0.1599719382778796, 0.09815978182277196, 0.09815978182277196, 0.09815978182277196, 0.32809732531911995, 0.32809732531911995, 0.32809732531911995, 0.15989542789680122, 0.15989542789680122, 0.15989542789680122, 0.39450358933421326, 0.39450358933421326, 0.39450358933421326, 0.07182819095400772, 0.07182819095400772, 0.07182819095400772, 0.21867696509157653, 0.21867696509157653, 0.21867696509157653, 0.12758638820913926, 0.12758638820913926, 0.12758638820913926, 0.20600531668127853, 0.20600531668127853, 0.20600531668127853, 0.24645502611711, 0.24645502611711, 0.24645502611711, 0.20271892435046202, 0.20271892435046202, 0.20271892435046202, 0.6010154351823194, 0.6010154351823194, 0.6010154351823194, 0.6173710628607691, 0.6173710628607691, 0.6173710628607691, 0.5525078307042829, 0.5525078307042829, 0.5525078307042829, 0.1220394034446799, 0.1220394034446799, 0.1220394034446799, 0.11876724744881773, 0.11876724744881773, 0.11876724744881773, 0.16418442071346084, 0.16418442071346084, 0.16418442071346084, 0.19307450728368347, 0.19307450728368347, 0.19307450728368347, 0.1564303088932516, 0.1564303088932516, 0.1564303088932516, 0.16070566581260937, 0.16070566581260937, 0.16070566581260937, 0.4104016892617022, 0.4104016892617022, 0.4104016892617022, 0.44735681110297965, 0.44735681110297965, 0.44735681110297965, 0.5117808824782959, 0.5117808824782959, 0.5117808824782959, 0.29691328184405497, 0.29691328184405497, 0.29691328184405497, 0.34080395958329524, 0.34080395958329524, 0.34080395958329524, 0.3056440310160867, 0.3056440310160867, 0.3056440310160867, 0.20509343921024492, 0.20509343921024492, 0.20509343921024492, 0.22041205601336689, 0.22041205601336689, 0.22041205601336689, 0.20323679804723838, 0.20323679804723838, 0.20323679804723838, 0.20667532748988104, 0.20667532748988104, 0.20667532748988104, 0.19966699706438262, 0.19966699706438262, 0.19966699706438262, 0.2858116053381321, 0.2858116053381321, 0.2858116053381321, 0.16301391266713094, 0.16301391266713094, 0.16301391266713094, 0.7239730569828753, 0.7239730569828753, 0.7239730569828753, 0.18129467615580674, 0.18129467615580674, 0.18129467615580674, 0.28515658620773476, 0.28515658620773476, 0.28515658620773476, 0.1935435239197778, 0.1935435239197778, 0.1935435239197778, 0.1467211704148913, 0.1467211704148913, 0.1467211704148913, 0.18991866161784787, 0.18991866161784787, 0.18991866161784787, 0.16535842938777856, 0.16535842938777856, 0.16535842938777856, 0.19316296124109922, 0.19316296124109922, 0.19316296124109922, 0.08535354931102046, 0.08535354931102046, 0.08535354931102046, 0.08660617035399687, 0.08660617035399687, 0.08660617035399687, 0.09014726101582149, 0.09014726101582149, 0.09014726101582149]}, "mutation_prompt": null}
{"id": "f46aabe9-eab7-4b72-af1c-e4ef7d26fe8f", "solution": "import numpy as np\n\nclass SelfAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim  # Slightly reduced population size for faster convergence\n        self.initial_mutation_factor = 0.8  # Adjusted initial mutation factor for exploration\n        self.crossover_rate = 0.9  # Increased crossover rate for diversity\n        self.mutation_decay = 0.98  # Optimized decay for mutation factor\n        self.split_factor = 0.5  # Subpopulation split factor\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        evals = self.population_size\n        mutation_factor = self.initial_mutation_factor\n\n        while evals < self.budget:\n            subpop_size = int(self.population_size * self.split_factor)\n            for i in range(self.population_size):\n                idxs = list(range(self.population_size))\n                idxs.remove(i)\n                sample_size = subpop_size if np.random.rand() < 0.5 else self.population_size  # Dynamic subpopulation\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(a + mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n\n                if evals >= self.budget:\n                    break\n\n            mutation_factor *= self.mutation_decay  # Apply decay to mutation factor\n            if evals % (self.population_size // 2) == 0:  # Adapt learning rate dynamically\n                self.crossover_rate = 0.7 + 0.3 * np.random.rand()\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "SelfAdaptiveDifferentialEvolution", "description": "Introduced Self-Adaptive Differential Evolution with Dynamic Subpopulation Strategies and Adaptive Learning Rates for Enhanced Convergence.", "configspace": "", "generation": 65, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b7df5738-e239-453b-932f-2ae32e017b36", "metadata": {"aucs": [0.8028974999397684, 0.8028974999397684, 0.8028974999397684, 0.820162767335356, 0.820162767335356, 0.820162767335356, 0.8268158805027072, 0.8268158805027072, 0.8268158805027072, 0.6912682274538304, 0.6912682274538304, 0.6912682274538304, 0.5844808858752991, 0.5844808858752991, 0.5844808858752991, 0.6828452545688112, 0.6828452545688112, 0.6828452545688112, 0.2069948826304837, 0.2069948826304837, 0.2069948826304837, 0.25479576379989277, 0.25479576379989277, 0.25479576379989277, 0.3096555827229023, 0.3096555827229023, 0.3096555827229023, 0.16803182716129272, 0.16803182716129272, 0.16803182716129272, 0.2125972816080981, 0.2125972816080981, 0.2125972816080981, 0.13420800187083226, 0.13420800187083226, 0.13420800187083226, 0.9543543436153276, 0.9543543436153276, 0.9543543436153276, 0.9635622803614148, 0.9635622803614148, 0.9635622803614148, 0.9785171936615114, 0.9785171936615114, 0.9785171936615114, 0.22746277654182945, 0.22746277654182945, 0.22746277654182945, 0.18213375266531762, 0.18213375266531762, 0.18213375266531762, 0.3027151787666107, 0.3027151787666107, 0.3027151787666107, 0.7746545356265845, 0.7746545356265845, 0.7746545356265845, 0.7911711620707444, 0.7911711620707444, 0.7911711620707444, 0.7824307938694764, 0.7824307938694764, 0.7824307938694764, 0.16018975197729757, 0.16018975197729757, 0.16018975197729757, 0.29362630482925267, 0.29362630482925267, 0.29362630482925267, 0.1862258566090128, 0.1862258566090128, 0.1862258566090128, 0.12864263117106134, 0.12864263117106134, 0.12864263117106134, 0.16862340955315136, 0.16862340955315136, 0.16862340955315136, 0.13688738049704718, 0.13688738049704718, 0.13688738049704718, 0.057365535640381715, 0.057365535640381715, 0.057365535640381715, 0.1599719382778796, 0.1599719382778796, 0.1599719382778796, 0.09815978182277196, 0.09815978182277196, 0.09815978182277196, 0.32809732531911995, 0.32809732531911995, 0.32809732531911995, 0.15989542789680122, 0.15989542789680122, 0.15989542789680122, 0.39450358933421326, 0.39450358933421326, 0.39450358933421326, 0.07182819095400772, 0.07182819095400772, 0.07182819095400772, 0.21867696509157653, 0.21867696509157653, 0.21867696509157653, 0.12758638820913926, 0.12758638820913926, 0.12758638820913926, 0.20600531668127853, 0.20600531668127853, 0.20600531668127853, 0.24645502611711, 0.24645502611711, 0.24645502611711, 0.20271892435046202, 0.20271892435046202, 0.20271892435046202, 0.6010154351823194, 0.6010154351823194, 0.6010154351823194, 0.6173710628607691, 0.6173710628607691, 0.6173710628607691, 0.5525078307042829, 0.5525078307042829, 0.5525078307042829, 0.1220394034446799, 0.1220394034446799, 0.1220394034446799, 0.11876724744881773, 0.11876724744881773, 0.11876724744881773, 0.16418442071346084, 0.16418442071346084, 0.16418442071346084, 0.19307450728368347, 0.19307450728368347, 0.19307450728368347, 0.1564303088932516, 0.1564303088932516, 0.1564303088932516, 0.16070566581260937, 0.16070566581260937, 0.16070566581260937, 0.4104016892617022, 0.4104016892617022, 0.4104016892617022, 0.44735681110297965, 0.44735681110297965, 0.44735681110297965, 0.5117808824782959, 0.5117808824782959, 0.5117808824782959, 0.29691328184405497, 0.29691328184405497, 0.29691328184405497, 0.34080395958329524, 0.34080395958329524, 0.34080395958329524, 0.3056440310160867, 0.3056440310160867, 0.3056440310160867, 0.20509343921024492, 0.20509343921024492, 0.20509343921024492, 0.22041205601336689, 0.22041205601336689, 0.22041205601336689, 0.20323679804723838, 0.20323679804723838, 0.20323679804723838, 0.20667532748988104, 0.20667532748988104, 0.20667532748988104, 0.19966699706438262, 0.19966699706438262, 0.19966699706438262, 0.2858116053381321, 0.2858116053381321, 0.2858116053381321, 0.16301391266713094, 0.16301391266713094, 0.16301391266713094, 0.7239730569828753, 0.7239730569828753, 0.7239730569828753, 0.18129467615580674, 0.18129467615580674, 0.18129467615580674, 0.28515658620773476, 0.28515658620773476, 0.28515658620773476, 0.1935435239197778, 0.1935435239197778, 0.1935435239197778, 0.1467211704148913, 0.1467211704148913, 0.1467211704148913, 0.18991866161784787, 0.18991866161784787, 0.18991866161784787, 0.16535842938777856, 0.16535842938777856, 0.16535842938777856, 0.19316296124109922, 0.19316296124109922, 0.19316296124109922, 0.08535354931102046, 0.08535354931102046, 0.08535354931102046, 0.08660617035399687, 0.08660617035399687, 0.08660617035399687, 0.09014726101582149, 0.09014726101582149, 0.09014726101582149]}, "mutation_prompt": null}
{"id": "52f216c9-4ab3-4c01-a337-55e935152d21", "solution": "import numpy as np\n\nclass SelfAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim  # Slightly reduced population size for faster convergence\n        self.initial_mutation_factor = 0.8  # Adjusted initial mutation factor for exploration\n        self.crossover_rate = 0.9  # Increased crossover rate for diversity\n        self.mutation_decay = 0.98  # Optimized decay for mutation factor\n        self.split_factor = 0.5  # Subpopulation split factor\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        evals = self.population_size\n        mutation_factor = self.initial_mutation_factor\n\n        while evals < self.budget:\n            subpop_size = int(self.population_size * self.split_factor)\n            for i in range(self.population_size):\n                idxs = list(range(self.population_size))\n                idxs.remove(i)\n                sample_size = subpop_size if np.random.rand() < 0.5 else self.population_size  # Dynamic subpopulation\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(a + mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n\n                if evals >= self.budget:\n                    break\n\n            mutation_factor *= self.mutation_decay  # Apply decay to mutation factor\n            if evals % (self.population_size // 2) == 0:  # Adapt learning rate dynamically\n                self.crossover_rate = 0.7 + 0.3 * np.random.rand()\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "SelfAdaptiveDifferentialEvolution", "description": "Introduced Self-Adaptive Differential Evolution with Dynamic Subpopulation Strategies and Adaptive Learning Rates for Enhanced Convergence.", "configspace": "", "generation": 65, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b7df5738-e239-453b-932f-2ae32e017b36", "metadata": {"aucs": [0.8028974999397684, 0.8028974999397684, 0.8028974999397684, 0.820162767335356, 0.820162767335356, 0.820162767335356, 0.8268158805027072, 0.8268158805027072, 0.8268158805027072, 0.6912682274538304, 0.6912682274538304, 0.6912682274538304, 0.5844808858752991, 0.5844808858752991, 0.5844808858752991, 0.6828452545688112, 0.6828452545688112, 0.6828452545688112, 0.2069948826304837, 0.2069948826304837, 0.2069948826304837, 0.25479576379989277, 0.25479576379989277, 0.25479576379989277, 0.3096555827229023, 0.3096555827229023, 0.3096555827229023, 0.16803182716129272, 0.16803182716129272, 0.16803182716129272, 0.2125972816080981, 0.2125972816080981, 0.2125972816080981, 0.13420800187083226, 0.13420800187083226, 0.13420800187083226, 0.9543543436153276, 0.9543543436153276, 0.9543543436153276, 0.9635622803614148, 0.9635622803614148, 0.9635622803614148, 0.9785171936615114, 0.9785171936615114, 0.9785171936615114, 0.22746277654182945, 0.22746277654182945, 0.22746277654182945, 0.18213375266531762, 0.18213375266531762, 0.18213375266531762, 0.3027151787666107, 0.3027151787666107, 0.3027151787666107, 0.7746545356265845, 0.7746545356265845, 0.7746545356265845, 0.7911711620707444, 0.7911711620707444, 0.7911711620707444, 0.7824307938694764, 0.7824307938694764, 0.7824307938694764, 0.16018975197729757, 0.16018975197729757, 0.16018975197729757, 0.29362630482925267, 0.29362630482925267, 0.29362630482925267, 0.1862258566090128, 0.1862258566090128, 0.1862258566090128, 0.12864263117106134, 0.12864263117106134, 0.12864263117106134, 0.16862340955315136, 0.16862340955315136, 0.16862340955315136, 0.13688738049704718, 0.13688738049704718, 0.13688738049704718, 0.057365535640381715, 0.057365535640381715, 0.057365535640381715, 0.1599719382778796, 0.1599719382778796, 0.1599719382778796, 0.09815978182277196, 0.09815978182277196, 0.09815978182277196, 0.32809732531911995, 0.32809732531911995, 0.32809732531911995, 0.15989542789680122, 0.15989542789680122, 0.15989542789680122, 0.39450358933421326, 0.39450358933421326, 0.39450358933421326, 0.07182819095400772, 0.07182819095400772, 0.07182819095400772, 0.21867696509157653, 0.21867696509157653, 0.21867696509157653, 0.12758638820913926, 0.12758638820913926, 0.12758638820913926, 0.20600531668127853, 0.20600531668127853, 0.20600531668127853, 0.24645502611711, 0.24645502611711, 0.24645502611711, 0.20271892435046202, 0.20271892435046202, 0.20271892435046202, 0.6010154351823194, 0.6010154351823194, 0.6010154351823194, 0.6173710628607691, 0.6173710628607691, 0.6173710628607691, 0.5525078307042829, 0.5525078307042829, 0.5525078307042829, 0.1220394034446799, 0.1220394034446799, 0.1220394034446799, 0.11876724744881773, 0.11876724744881773, 0.11876724744881773, 0.16418442071346084, 0.16418442071346084, 0.16418442071346084, 0.19307450728368347, 0.19307450728368347, 0.19307450728368347, 0.1564303088932516, 0.1564303088932516, 0.1564303088932516, 0.16070566581260937, 0.16070566581260937, 0.16070566581260937, 0.4104016892617022, 0.4104016892617022, 0.4104016892617022, 0.44735681110297965, 0.44735681110297965, 0.44735681110297965, 0.5117808824782959, 0.5117808824782959, 0.5117808824782959, 0.29691328184405497, 0.29691328184405497, 0.29691328184405497, 0.34080395958329524, 0.34080395958329524, 0.34080395958329524, 0.3056440310160867, 0.3056440310160867, 0.3056440310160867, 0.20509343921024492, 0.20509343921024492, 0.20509343921024492, 0.22041205601336689, 0.22041205601336689, 0.22041205601336689, 0.20323679804723838, 0.20323679804723838, 0.20323679804723838, 0.20667532748988104, 0.20667532748988104, 0.20667532748988104, 0.19966699706438262, 0.19966699706438262, 0.19966699706438262, 0.2858116053381321, 0.2858116053381321, 0.2858116053381321, 0.16301391266713094, 0.16301391266713094, 0.16301391266713094, 0.7239730569828753, 0.7239730569828753, 0.7239730569828753, 0.18129467615580674, 0.18129467615580674, 0.18129467615580674, 0.28515658620773476, 0.28515658620773476, 0.28515658620773476, 0.1935435239197778, 0.1935435239197778, 0.1935435239197778, 0.1467211704148913, 0.1467211704148913, 0.1467211704148913, 0.18991866161784787, 0.18991866161784787, 0.18991866161784787, 0.16535842938777856, 0.16535842938777856, 0.16535842938777856, 0.19316296124109922, 0.19316296124109922, 0.19316296124109922, 0.08535354931102046, 0.08535354931102046, 0.08535354931102046, 0.08660617035399687, 0.08660617035399687, 0.08660617035399687, 0.09014726101582149, 0.09014726101582149, 0.09014726101582149]}, "mutation_prompt": null}
{"id": "a8db3358-58b8-4a19-b383-ff297653c6db", "solution": "import numpy as np\n\nclass SelfAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim  # Slightly reduced population size for faster convergence\n        self.initial_mutation_factor = 0.8  # Adjusted initial mutation factor for exploration\n        self.crossover_rate = 0.9  # Increased crossover rate for diversity\n        self.mutation_decay = 0.98  # Optimized decay for mutation factor\n        self.split_factor = 0.5  # Subpopulation split factor\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        evals = self.population_size\n        mutation_factor = self.initial_mutation_factor\n\n        while evals < self.budget:\n            subpop_size = int(self.population_size * self.split_factor)\n            for i in range(self.population_size):\n                idxs = list(range(self.population_size))\n                idxs.remove(i)\n                sample_size = subpop_size if np.random.rand() < 0.5 else self.population_size  # Dynamic subpopulation\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(a + mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n\n                if evals >= self.budget:\n                    break\n\n            mutation_factor *= self.mutation_decay  # Apply decay to mutation factor\n            if evals % (self.population_size // 2) == 0:  # Adapt learning rate dynamically\n                self.crossover_rate = 0.7 + 0.3 * np.random.rand()\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "SelfAdaptiveDifferentialEvolution", "description": "Introduced Self-Adaptive Differential Evolution with Dynamic Subpopulation Strategies and Adaptive Learning Rates for Enhanced Convergence.", "configspace": "", "generation": 65, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b7df5738-e239-453b-932f-2ae32e017b36", "metadata": {"aucs": [0.8028974999397684, 0.8028974999397684, 0.8028974999397684, 0.820162767335356, 0.820162767335356, 0.820162767335356, 0.8268158805027072, 0.8268158805027072, 0.8268158805027072, 0.6912682274538304, 0.6912682274538304, 0.6912682274538304, 0.5844808858752991, 0.5844808858752991, 0.5844808858752991, 0.6828452545688112, 0.6828452545688112, 0.6828452545688112, 0.2069948826304837, 0.2069948826304837, 0.2069948826304837, 0.25479576379989277, 0.25479576379989277, 0.25479576379989277, 0.3096555827229023, 0.3096555827229023, 0.3096555827229023, 0.16803182716129272, 0.16803182716129272, 0.16803182716129272, 0.2125972816080981, 0.2125972816080981, 0.2125972816080981, 0.13420800187083226, 0.13420800187083226, 0.13420800187083226, 0.9543543436153276, 0.9543543436153276, 0.9543543436153276, 0.9635622803614148, 0.9635622803614148, 0.9635622803614148, 0.9785171936615114, 0.9785171936615114, 0.9785171936615114, 0.22746277654182945, 0.22746277654182945, 0.22746277654182945, 0.18213375266531762, 0.18213375266531762, 0.18213375266531762, 0.3027151787666107, 0.3027151787666107, 0.3027151787666107, 0.7746545356265845, 0.7746545356265845, 0.7746545356265845, 0.7911711620707444, 0.7911711620707444, 0.7911711620707444, 0.7824307938694764, 0.7824307938694764, 0.7824307938694764, 0.16018975197729757, 0.16018975197729757, 0.16018975197729757, 0.29362630482925267, 0.29362630482925267, 0.29362630482925267, 0.1862258566090128, 0.1862258566090128, 0.1862258566090128, 0.12864263117106134, 0.12864263117106134, 0.12864263117106134, 0.16862340955315136, 0.16862340955315136, 0.16862340955315136, 0.13688738049704718, 0.13688738049704718, 0.13688738049704718, 0.057365535640381715, 0.057365535640381715, 0.057365535640381715, 0.1599719382778796, 0.1599719382778796, 0.1599719382778796, 0.09815978182277196, 0.09815978182277196, 0.09815978182277196, 0.32809732531911995, 0.32809732531911995, 0.32809732531911995, 0.15989542789680122, 0.15989542789680122, 0.15989542789680122, 0.39450358933421326, 0.39450358933421326, 0.39450358933421326, 0.07182819095400772, 0.07182819095400772, 0.07182819095400772, 0.21867696509157653, 0.21867696509157653, 0.21867696509157653, 0.12758638820913926, 0.12758638820913926, 0.12758638820913926, 0.20600531668127853, 0.20600531668127853, 0.20600531668127853, 0.24645502611711, 0.24645502611711, 0.24645502611711, 0.20271892435046202, 0.20271892435046202, 0.20271892435046202, 0.6010154351823194, 0.6010154351823194, 0.6010154351823194, 0.6173710628607691, 0.6173710628607691, 0.6173710628607691, 0.5525078307042829, 0.5525078307042829, 0.5525078307042829, 0.1220394034446799, 0.1220394034446799, 0.1220394034446799, 0.11876724744881773, 0.11876724744881773, 0.11876724744881773, 0.16418442071346084, 0.16418442071346084, 0.16418442071346084, 0.19307450728368347, 0.19307450728368347, 0.19307450728368347, 0.1564303088932516, 0.1564303088932516, 0.1564303088932516, 0.16070566581260937, 0.16070566581260937, 0.16070566581260937, 0.4104016892617022, 0.4104016892617022, 0.4104016892617022, 0.44735681110297965, 0.44735681110297965, 0.44735681110297965, 0.5117808824782959, 0.5117808824782959, 0.5117808824782959, 0.29691328184405497, 0.29691328184405497, 0.29691328184405497, 0.34080395958329524, 0.34080395958329524, 0.34080395958329524, 0.3056440310160867, 0.3056440310160867, 0.3056440310160867, 0.20509343921024492, 0.20509343921024492, 0.20509343921024492, 0.22041205601336689, 0.22041205601336689, 0.22041205601336689, 0.20323679804723838, 0.20323679804723838, 0.20323679804723838, 0.20667532748988104, 0.20667532748988104, 0.20667532748988104, 0.19966699706438262, 0.19966699706438262, 0.19966699706438262, 0.2858116053381321, 0.2858116053381321, 0.2858116053381321, 0.16301391266713094, 0.16301391266713094, 0.16301391266713094, 0.7239730569828753, 0.7239730569828753, 0.7239730569828753, 0.18129467615580674, 0.18129467615580674, 0.18129467615580674, 0.28515658620773476, 0.28515658620773476, 0.28515658620773476, 0.1935435239197778, 0.1935435239197778, 0.1935435239197778, 0.1467211704148913, 0.1467211704148913, 0.1467211704148913, 0.18991866161784787, 0.18991866161784787, 0.18991866161784787, 0.16535842938777856, 0.16535842938777856, 0.16535842938777856, 0.19316296124109922, 0.19316296124109922, 0.19316296124109922, 0.08535354931102046, 0.08535354931102046, 0.08535354931102046, 0.08660617035399687, 0.08660617035399687, 0.08660617035399687, 0.09014726101582149, 0.09014726101582149, 0.09014726101582149]}, "mutation_prompt": null}
{"id": "5b923ad9-baed-4c26-b596-e0a1de1d4e19", "solution": "import numpy as np\n\nclass SelfAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim  # Slightly reduced population size for faster convergence\n        self.initial_mutation_factor = 0.8  # Adjusted initial mutation factor for exploration\n        self.crossover_rate = 0.9  # Increased crossover rate for diversity\n        self.mutation_decay = 0.98  # Optimized decay for mutation factor\n        self.split_factor = 0.5  # Subpopulation split factor\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        evals = self.population_size\n        mutation_factor = self.initial_mutation_factor\n\n        while evals < self.budget:\n            subpop_size = int(self.population_size * self.split_factor)\n            for i in range(self.population_size):\n                idxs = list(range(self.population_size))\n                idxs.remove(i)\n                sample_size = subpop_size if np.random.rand() < 0.5 else self.population_size  # Dynamic subpopulation\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(a + mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n\n                if evals >= self.budget:\n                    break\n\n            mutation_factor *= self.mutation_decay  # Apply decay to mutation factor\n            if evals % (self.population_size // 2) == 0:  # Adapt learning rate dynamically\n                self.crossover_rate = 0.7 + 0.3 * np.random.rand()\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "SelfAdaptiveDifferentialEvolution", "description": "Introduced Self-Adaptive Differential Evolution with Dynamic Subpopulation Strategies and Adaptive Learning Rates for Enhanced Convergence.", "configspace": "", "generation": 65, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b7df5738-e239-453b-932f-2ae32e017b36", "metadata": {"aucs": [0.8028974999397684, 0.8028974999397684, 0.8028974999397684, 0.820162767335356, 0.820162767335356, 0.820162767335356, 0.8268158805027072, 0.8268158805027072, 0.8268158805027072, 0.6912682274538304, 0.6912682274538304, 0.6912682274538304, 0.5844808858752991, 0.5844808858752991, 0.5844808858752991, 0.6828452545688112, 0.6828452545688112, 0.6828452545688112, 0.2069948826304837, 0.2069948826304837, 0.2069948826304837, 0.25479576379989277, 0.25479576379989277, 0.25479576379989277, 0.3096555827229023, 0.3096555827229023, 0.3096555827229023, 0.16803182716129272, 0.16803182716129272, 0.16803182716129272, 0.2125972816080981, 0.2125972816080981, 0.2125972816080981, 0.13420800187083226, 0.13420800187083226, 0.13420800187083226, 0.9543543436153276, 0.9543543436153276, 0.9543543436153276, 0.9635622803614148, 0.9635622803614148, 0.9635622803614148, 0.9785171936615114, 0.9785171936615114, 0.9785171936615114, 0.22746277654182945, 0.22746277654182945, 0.22746277654182945, 0.18213375266531762, 0.18213375266531762, 0.18213375266531762, 0.3027151787666107, 0.3027151787666107, 0.3027151787666107, 0.7746545356265845, 0.7746545356265845, 0.7746545356265845, 0.7911711620707444, 0.7911711620707444, 0.7911711620707444, 0.7824307938694764, 0.7824307938694764, 0.7824307938694764, 0.16018975197729757, 0.16018975197729757, 0.16018975197729757, 0.29362630482925267, 0.29362630482925267, 0.29362630482925267, 0.1862258566090128, 0.1862258566090128, 0.1862258566090128, 0.12864263117106134, 0.12864263117106134, 0.12864263117106134, 0.16862340955315136, 0.16862340955315136, 0.16862340955315136, 0.13688738049704718, 0.13688738049704718, 0.13688738049704718, 0.057365535640381715, 0.057365535640381715, 0.057365535640381715, 0.1599719382778796, 0.1599719382778796, 0.1599719382778796, 0.09815978182277196, 0.09815978182277196, 0.09815978182277196, 0.32809732531911995, 0.32809732531911995, 0.32809732531911995, 0.15989542789680122, 0.15989542789680122, 0.15989542789680122, 0.39450358933421326, 0.39450358933421326, 0.39450358933421326, 0.07182819095400772, 0.07182819095400772, 0.07182819095400772, 0.21867696509157653, 0.21867696509157653, 0.21867696509157653, 0.12758638820913926, 0.12758638820913926, 0.12758638820913926, 0.20600531668127853, 0.20600531668127853, 0.20600531668127853, 0.24645502611711, 0.24645502611711, 0.24645502611711, 0.20271892435046202, 0.20271892435046202, 0.20271892435046202, 0.6010154351823194, 0.6010154351823194, 0.6010154351823194, 0.6173710628607691, 0.6173710628607691, 0.6173710628607691, 0.5525078307042829, 0.5525078307042829, 0.5525078307042829, 0.1220394034446799, 0.1220394034446799, 0.1220394034446799, 0.11876724744881773, 0.11876724744881773, 0.11876724744881773, 0.16418442071346084, 0.16418442071346084, 0.16418442071346084, 0.19307450728368347, 0.19307450728368347, 0.19307450728368347, 0.1564303088932516, 0.1564303088932516, 0.1564303088932516, 0.16070566581260937, 0.16070566581260937, 0.16070566581260937, 0.4104016892617022, 0.4104016892617022, 0.4104016892617022, 0.44735681110297965, 0.44735681110297965, 0.44735681110297965, 0.5117808824782959, 0.5117808824782959, 0.5117808824782959, 0.29691328184405497, 0.29691328184405497, 0.29691328184405497, 0.34080395958329524, 0.34080395958329524, 0.34080395958329524, 0.3056440310160867, 0.3056440310160867, 0.3056440310160867, 0.20509343921024492, 0.20509343921024492, 0.20509343921024492, 0.22041205601336689, 0.22041205601336689, 0.22041205601336689, 0.20323679804723838, 0.20323679804723838, 0.20323679804723838, 0.20667532748988104, 0.20667532748988104, 0.20667532748988104, 0.19966699706438262, 0.19966699706438262, 0.19966699706438262, 0.2858116053381321, 0.2858116053381321, 0.2858116053381321, 0.16301391266713094, 0.16301391266713094, 0.16301391266713094, 0.7239730569828753, 0.7239730569828753, 0.7239730569828753, 0.18129467615580674, 0.18129467615580674, 0.18129467615580674, 0.28515658620773476, 0.28515658620773476, 0.28515658620773476, 0.1935435239197778, 0.1935435239197778, 0.1935435239197778, 0.1467211704148913, 0.1467211704148913, 0.1467211704148913, 0.18991866161784787, 0.18991866161784787, 0.18991866161784787, 0.16535842938777856, 0.16535842938777856, 0.16535842938777856, 0.19316296124109922, 0.19316296124109922, 0.19316296124109922, 0.08535354931102046, 0.08535354931102046, 0.08535354931102046, 0.08660617035399687, 0.08660617035399687, 0.08660617035399687, 0.09014726101582149, 0.09014726101582149, 0.09014726101582149]}, "mutation_prompt": null}
{"id": "642a9295-6f4f-4900-807f-207c1d09ad0a", "solution": "import numpy as np\n\nclass SelfAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim  # Slightly reduced population size for faster convergence\n        self.initial_mutation_factor = 0.8  # Adjusted initial mutation factor for exploration\n        self.crossover_rate = 0.9  # Increased crossover rate for diversity\n        self.mutation_decay = 0.98  # Optimized decay for mutation factor\n        self.split_factor = 0.5  # Subpopulation split factor\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        evals = self.population_size\n        mutation_factor = self.initial_mutation_factor\n\n        while evals < self.budget:\n            subpop_size = int(self.population_size * self.split_factor)\n            for i in range(self.population_size):\n                idxs = list(range(self.population_size))\n                idxs.remove(i)\n                sample_size = subpop_size if np.random.rand() < 0.5 else self.population_size  # Dynamic subpopulation\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(a + mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n\n                if evals >= self.budget:\n                    break\n\n            mutation_factor *= self.mutation_decay  # Apply decay to mutation factor\n            if evals % (self.population_size // 2) == 0:  # Adapt learning rate dynamically\n                self.crossover_rate = 0.7 + 0.3 * np.random.rand()\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "SelfAdaptiveDifferentialEvolution", "description": "Introduced Self-Adaptive Differential Evolution with Dynamic Subpopulation Strategies and Adaptive Learning Rates for Enhanced Convergence.", "configspace": "", "generation": 65, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b7df5738-e239-453b-932f-2ae32e017b36", "metadata": {"aucs": [0.8028974999397684, 0.8028974999397684, 0.8028974999397684, 0.820162767335356, 0.820162767335356, 0.820162767335356, 0.8268158805027072, 0.8268158805027072, 0.8268158805027072, 0.6912682274538304, 0.6912682274538304, 0.6912682274538304, 0.5844808858752991, 0.5844808858752991, 0.5844808858752991, 0.6828452545688112, 0.6828452545688112, 0.6828452545688112, 0.2069948826304837, 0.2069948826304837, 0.2069948826304837, 0.25479576379989277, 0.25479576379989277, 0.25479576379989277, 0.3096555827229023, 0.3096555827229023, 0.3096555827229023, 0.16803182716129272, 0.16803182716129272, 0.16803182716129272, 0.2125972816080981, 0.2125972816080981, 0.2125972816080981, 0.13420800187083226, 0.13420800187083226, 0.13420800187083226, 0.9543543436153276, 0.9543543436153276, 0.9543543436153276, 0.9635622803614148, 0.9635622803614148, 0.9635622803614148, 0.9785171936615114, 0.9785171936615114, 0.9785171936615114, 0.22746277654182945, 0.22746277654182945, 0.22746277654182945, 0.18213375266531762, 0.18213375266531762, 0.18213375266531762, 0.3027151787666107, 0.3027151787666107, 0.3027151787666107, 0.7746545356265845, 0.7746545356265845, 0.7746545356265845, 0.7911711620707444, 0.7911711620707444, 0.7911711620707444, 0.7824307938694764, 0.7824307938694764, 0.7824307938694764, 0.16018975197729757, 0.16018975197729757, 0.16018975197729757, 0.29362630482925267, 0.29362630482925267, 0.29362630482925267, 0.1862258566090128, 0.1862258566090128, 0.1862258566090128, 0.12864263117106134, 0.12864263117106134, 0.12864263117106134, 0.16862340955315136, 0.16862340955315136, 0.16862340955315136, 0.13688738049704718, 0.13688738049704718, 0.13688738049704718, 0.057365535640381715, 0.057365535640381715, 0.057365535640381715, 0.1599719382778796, 0.1599719382778796, 0.1599719382778796, 0.09815978182277196, 0.09815978182277196, 0.09815978182277196, 0.32809732531911995, 0.32809732531911995, 0.32809732531911995, 0.15989542789680122, 0.15989542789680122, 0.15989542789680122, 0.39450358933421326, 0.39450358933421326, 0.39450358933421326, 0.07182819095400772, 0.07182819095400772, 0.07182819095400772, 0.21867696509157653, 0.21867696509157653, 0.21867696509157653, 0.12758638820913926, 0.12758638820913926, 0.12758638820913926, 0.20600531668127853, 0.20600531668127853, 0.20600531668127853, 0.24645502611711, 0.24645502611711, 0.24645502611711, 0.20271892435046202, 0.20271892435046202, 0.20271892435046202, 0.6010154351823194, 0.6010154351823194, 0.6010154351823194, 0.6173710628607691, 0.6173710628607691, 0.6173710628607691, 0.5525078307042829, 0.5525078307042829, 0.5525078307042829, 0.1220394034446799, 0.1220394034446799, 0.1220394034446799, 0.11876724744881773, 0.11876724744881773, 0.11876724744881773, 0.16418442071346084, 0.16418442071346084, 0.16418442071346084, 0.19307450728368347, 0.19307450728368347, 0.19307450728368347, 0.1564303088932516, 0.1564303088932516, 0.1564303088932516, 0.16070566581260937, 0.16070566581260937, 0.16070566581260937, 0.4104016892617022, 0.4104016892617022, 0.4104016892617022, 0.44735681110297965, 0.44735681110297965, 0.44735681110297965, 0.5117808824782959, 0.5117808824782959, 0.5117808824782959, 0.29691328184405497, 0.29691328184405497, 0.29691328184405497, 0.34080395958329524, 0.34080395958329524, 0.34080395958329524, 0.3056440310160867, 0.3056440310160867, 0.3056440310160867, 0.20509343921024492, 0.20509343921024492, 0.20509343921024492, 0.22041205601336689, 0.22041205601336689, 0.22041205601336689, 0.20323679804723838, 0.20323679804723838, 0.20323679804723838, 0.20667532748988104, 0.20667532748988104, 0.20667532748988104, 0.19966699706438262, 0.19966699706438262, 0.19966699706438262, 0.2858116053381321, 0.2858116053381321, 0.2858116053381321, 0.16301391266713094, 0.16301391266713094, 0.16301391266713094, 0.7239730569828753, 0.7239730569828753, 0.7239730569828753, 0.18129467615580674, 0.18129467615580674, 0.18129467615580674, 0.28515658620773476, 0.28515658620773476, 0.28515658620773476, 0.1935435239197778, 0.1935435239197778, 0.1935435239197778, 0.1467211704148913, 0.1467211704148913, 0.1467211704148913, 0.18991866161784787, 0.18991866161784787, 0.18991866161784787, 0.16535842938777856, 0.16535842938777856, 0.16535842938777856, 0.19316296124109922, 0.19316296124109922, 0.19316296124109922, 0.08535354931102046, 0.08535354931102046, 0.08535354931102046, 0.08660617035399687, 0.08660617035399687, 0.08660617035399687, 0.09014726101582149, 0.09014726101582149, 0.09014726101582149]}, "mutation_prompt": null}
{"id": "69015de6-37dc-456d-9af8-a1e342c9145f", "solution": "import numpy as np\n\nclass EnhancedSelfAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 8 * dim  # Reduced population size for faster convergence\n        self.initial_mutation_factor = 0.9  # Increased initial mutation factor for better exploration\n        self.crossover_rate = 0.85  # Slightly reduced crossover rate for enhanced exploitation\n        self.mutation_decay = 0.90  # Increased decay for more aggressive convergence\n        self.split_factor = 0.6  # Increased subpopulation split factor\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        evals = self.population_size\n        mutation_factor = self.initial_mutation_factor\n        stagnation_counter = 0\n        best_fitness = np.min(fitness)\n\n        while evals < self.budget:\n            subpop_size = int(self.population_size * self.split_factor)\n            for i in range(self.population_size):\n                idxs = list(range(self.population_size))\n                idxs.remove(i)\n                sample_size = subpop_size if np.random.rand() < 0.6 else self.population_size  # More dynamic subpopulation\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(a + mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n\n                if evals >= self.budget:\n                    break\n\n            new_best_fitness = np.min(fitness)\n            if new_best_fitness < best_fitness:\n                best_fitness = new_best_fitness\n                stagnation_counter = 0\n            else:\n                stagnation_counter += 1\n\n            if stagnation_counter > self.population_size // 3:\n                mutation_factor *= 1.05  # Adaptively increase mutation factor in stagnation\n                stagnation_counter = 0\n\n            mutation_factor *= self.mutation_decay  # Apply decay to mutation factor\n            if evals % (self.population_size // 2) == 0:  # Adapt learning rate dynamically\n                self.crossover_rate = 0.75 + 0.25 * np.random.rand()\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "EnhancedSelfAdaptiveDifferentialEvolution", "description": "Enhanced Self-Adaptive Differential Evolution with Adaptive Population Dynamics and Stochastic Variation for Rapid Convergence.", "configspace": "", "generation": 96, "fitness": 0.20419606057900822, "feedback": "The algorithm EnhancedSelfAdaptiveDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.17.", "error": "", "parent_id": "b7df5738-e239-453b-932f-2ae32e017b36", "metadata": {"aucs": [0.5433463057934951, 0.5433463057934951, 0.5433463057934951, 0.5197390329665726, 0.5197390329665726, 0.5197390329665726, 0.3787271019259346, 0.3787271019259346, 0.3787271019259346, 0.11807153620767408, 0.11807153620767408, 0.11807153620767408, 0.06838399981512866, 0.06838399981512866, 0.06838399981512866, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.18286698644328347, 0.18286698644328347, 0.18286698644328347, 0.1624727567822054, 0.1624727567822054, 0.1624727567822054, 0.15665043505780663, 0.15665043505780663, 0.15665043505780663, 0.11364090741959554, 0.11364090741959554, 0.11364090741959554, 0.12174300984587971, 0.12174300984587971, 0.12174300984587971, 0.1391089633782756, 0.1391089633782756, 0.1391089633782756, 0.902556940310274, 0.902556940310274, 0.902556940310274, 0.9553755115032466, 0.9553755115032466, 0.9553755115032466, 0.5719724225747578, 0.5719724225747578, 0.5719724225747578, 0.11762918814687584, 0.11762918814687584, 0.11762918814687584, 0.08616206240088742, 0.08616206240088742, 0.08616206240088742, 0.09769296327975296, 0.09769296327975296, 0.09769296327975296, 0.22374179574930508, 0.22374179574930508, 0.22374179574930508, 0.3551385157333923, 0.3551385157333923, 0.3551385157333923, 0.23074599715316335, 0.23074599715316335, 0.23074599715316335, 0.14634076605739954, 0.14634076605739954, 0.14634076605739954, 0.0448435374554258, 0.0448435374554258, 0.0448435374554258, 0.14971121431870704, 0.14971121431870704, 0.14971121431870704, 0.08271046456012698, 0.08271046456012698, 0.08271046456012698, 0.16095132063071216, 0.16095132063071216, 0.16095132063071216, 0.11988480689965308, 0.11988480689965308, 0.11988480689965308, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.059473683597600524, 0.059473683597600524, 0.059473683597600524, 0.11925846715293842, 0.11925846715293842, 0.11925846715293842, 0.12738164956646036, 0.12738164956646036, 0.12738164956646036, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15798870657922615, 0.15798870657922615, 0.15798870657922615, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09849361369870491, 0.09849361369870491, 0.09849361369870491, 0.10888918305893114, 0.10888918305893114, 0.10888918305893114, 0.09726005689496453, 0.09726005689496453, 0.09726005689496453, 0.465928764649004, 0.465928764649004, 0.465928764649004, 0.3676651448329823, 0.3676651448329823, 0.3676651448329823, 0.3845828033500369, 0.3845828033500369, 0.3845828033500369, 0.12018682309013817, 0.12018682309013817, 0.12018682309013817, 0.13991533897506836, 0.13991533897506836, 0.13991533897506836, 0.1418864232352668, 0.1418864232352668, 0.1418864232352668, 0.16943801863705543, 0.16943801863705543, 0.16943801863705543, 0.184587166022673, 0.184587166022673, 0.184587166022673, 0.1944916235339783, 0.1944916235339783, 0.1944916235339783, 0.2576702924583829, 0.2576702924583829, 0.2576702924583829, 0.2623778987423372, 0.2623778987423372, 0.2623778987423372, 0.2746150572378846, 0.2746150572378846, 0.2746150572378846, 0.18640432124383766, 0.18640432124383766, 0.18640432124383766, 0.29271171216386416, 0.29271171216386416, 0.29271171216386416, 0.1882415630149128, 0.1882415630149128, 0.1882415630149128, 0.2753091714047523, 0.2753091714047523, 0.2753091714047523, 0.2448052446087602, 0.2448052446087602, 0.2448052446087602, 0.21965557380920342, 0.21965557380920342, 0.21965557380920342, 0.2589799651953234, 0.2589799651953234, 0.2589799651953234, 0.22149715420179794, 0.22149715420179794, 0.22149715420179794, 0.2004281657751681, 0.2004281657751681, 0.2004281657751681, 0.15195775405594236, 0.15195775405594236, 0.15195775405594236, 0.2460791386078398, 0.2460791386078398, 0.2460791386078398, 0.19454838753696335, 0.19454838753696335, 0.19454838753696335, 0.1632683671249633, 0.1632683671249633, 0.1632683671249633, 0.21741043371637947, 0.21741043371637947, 0.21741043371637947, 0.21067387450989428, 0.21067387450989428, 0.21067387450989428, 0.22944592534763675, 0.22944592534763675, 0.22944592534763675, 0.20495247128295657, 0.20495247128295657, 0.20495247128295657, 0.23730914080111154, 0.23730914080111154, 0.23730914080111154, 0.0970671243338862, 0.0970671243338862, 0.0970671243338862, 0.09824503547217645, 0.09824503547217645, 0.09824503547217645, 0.08022657975805436, 0.08022657975805436, 0.08022657975805436]}, "mutation_prompt": null}
{"id": "f3122343-77b1-418e-b7b1-905ec83cf0d6", "solution": "import numpy as np\n\nclass SelfAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim  # Slightly reduced population size for faster convergence\n        self.initial_mutation_factor = 0.8  # Adjusted initial mutation factor for exploration\n        self.crossover_rate = 0.9  # Increased crossover rate for diversity\n        self.mutation_decay = 0.98  # Optimized decay for mutation factor\n        self.split_factor = 0.5  # Subpopulation split factor\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        evals = self.population_size\n        mutation_factor = self.initial_mutation_factor\n\n        while evals < self.budget:\n            subpop_size = int(self.population_size * self.split_factor)\n            for i in range(self.population_size):\n                idxs = list(range(self.population_size))\n                idxs.remove(i)\n                sample_size = subpop_size if np.random.rand() < 0.5 else self.population_size  # Dynamic subpopulation\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(a + mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n\n                if evals >= self.budget:\n                    break\n\n            mutation_factor *= self.mutation_decay  # Apply decay to mutation factor\n            if evals % (self.population_size // 2) == 0:  # Adapt learning rate dynamically\n                self.crossover_rate = 0.7 + 0.3 * np.random.rand()\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "SelfAdaptiveDifferentialEvolution", "description": "Introduced Self-Adaptive Differential Evolution with Dynamic Subpopulation Strategies and Adaptive Learning Rates for Enhanced Convergence.", "configspace": "", "generation": 65, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b7df5738-e239-453b-932f-2ae32e017b36", "metadata": {"aucs": [0.8028974999397684, 0.8028974999397684, 0.8028974999397684, 0.820162767335356, 0.820162767335356, 0.820162767335356, 0.8268158805027072, 0.8268158805027072, 0.8268158805027072, 0.6912682274538304, 0.6912682274538304, 0.6912682274538304, 0.5844808858752991, 0.5844808858752991, 0.5844808858752991, 0.6828452545688112, 0.6828452545688112, 0.6828452545688112, 0.2069948826304837, 0.2069948826304837, 0.2069948826304837, 0.25479576379989277, 0.25479576379989277, 0.25479576379989277, 0.3096555827229023, 0.3096555827229023, 0.3096555827229023, 0.16803182716129272, 0.16803182716129272, 0.16803182716129272, 0.2125972816080981, 0.2125972816080981, 0.2125972816080981, 0.13420800187083226, 0.13420800187083226, 0.13420800187083226, 0.9543543436153276, 0.9543543436153276, 0.9543543436153276, 0.9635622803614148, 0.9635622803614148, 0.9635622803614148, 0.9785171936615114, 0.9785171936615114, 0.9785171936615114, 0.22746277654182945, 0.22746277654182945, 0.22746277654182945, 0.18213375266531762, 0.18213375266531762, 0.18213375266531762, 0.3027151787666107, 0.3027151787666107, 0.3027151787666107, 0.7746545356265845, 0.7746545356265845, 0.7746545356265845, 0.7911711620707444, 0.7911711620707444, 0.7911711620707444, 0.7824307938694764, 0.7824307938694764, 0.7824307938694764, 0.16018975197729757, 0.16018975197729757, 0.16018975197729757, 0.29362630482925267, 0.29362630482925267, 0.29362630482925267, 0.1862258566090128, 0.1862258566090128, 0.1862258566090128, 0.12864263117106134, 0.12864263117106134, 0.12864263117106134, 0.16862340955315136, 0.16862340955315136, 0.16862340955315136, 0.13688738049704718, 0.13688738049704718, 0.13688738049704718, 0.057365535640381715, 0.057365535640381715, 0.057365535640381715, 0.1599719382778796, 0.1599719382778796, 0.1599719382778796, 0.09815978182277196, 0.09815978182277196, 0.09815978182277196, 0.32809732531911995, 0.32809732531911995, 0.32809732531911995, 0.15989542789680122, 0.15989542789680122, 0.15989542789680122, 0.39450358933421326, 0.39450358933421326, 0.39450358933421326, 0.07182819095400772, 0.07182819095400772, 0.07182819095400772, 0.21867696509157653, 0.21867696509157653, 0.21867696509157653, 0.12758638820913926, 0.12758638820913926, 0.12758638820913926, 0.20600531668127853, 0.20600531668127853, 0.20600531668127853, 0.24645502611711, 0.24645502611711, 0.24645502611711, 0.20271892435046202, 0.20271892435046202, 0.20271892435046202, 0.6010154351823194, 0.6010154351823194, 0.6010154351823194, 0.6173710628607691, 0.6173710628607691, 0.6173710628607691, 0.5525078307042829, 0.5525078307042829, 0.5525078307042829, 0.1220394034446799, 0.1220394034446799, 0.1220394034446799, 0.11876724744881773, 0.11876724744881773, 0.11876724744881773, 0.16418442071346084, 0.16418442071346084, 0.16418442071346084, 0.19307450728368347, 0.19307450728368347, 0.19307450728368347, 0.1564303088932516, 0.1564303088932516, 0.1564303088932516, 0.16070566581260937, 0.16070566581260937, 0.16070566581260937, 0.4104016892617022, 0.4104016892617022, 0.4104016892617022, 0.44735681110297965, 0.44735681110297965, 0.44735681110297965, 0.5117808824782959, 0.5117808824782959, 0.5117808824782959, 0.29691328184405497, 0.29691328184405497, 0.29691328184405497, 0.34080395958329524, 0.34080395958329524, 0.34080395958329524, 0.3056440310160867, 0.3056440310160867, 0.3056440310160867, 0.20509343921024492, 0.20509343921024492, 0.20509343921024492, 0.22041205601336689, 0.22041205601336689, 0.22041205601336689, 0.20323679804723838, 0.20323679804723838, 0.20323679804723838, 0.20667532748988104, 0.20667532748988104, 0.20667532748988104, 0.19966699706438262, 0.19966699706438262, 0.19966699706438262, 0.2858116053381321, 0.2858116053381321, 0.2858116053381321, 0.16301391266713094, 0.16301391266713094, 0.16301391266713094, 0.7239730569828753, 0.7239730569828753, 0.7239730569828753, 0.18129467615580674, 0.18129467615580674, 0.18129467615580674, 0.28515658620773476, 0.28515658620773476, 0.28515658620773476, 0.1935435239197778, 0.1935435239197778, 0.1935435239197778, 0.1467211704148913, 0.1467211704148913, 0.1467211704148913, 0.18991866161784787, 0.18991866161784787, 0.18991866161784787, 0.16535842938777856, 0.16535842938777856, 0.16535842938777856, 0.19316296124109922, 0.19316296124109922, 0.19316296124109922, 0.08535354931102046, 0.08535354931102046, 0.08535354931102046, 0.08660617035399687, 0.08660617035399687, 0.08660617035399687, 0.09014726101582149, 0.09014726101582149, 0.09014726101582149]}, "mutation_prompt": null}
{"id": "9221789c-b0c1-4ac5-9b2e-579f8e7399ca", "solution": "import numpy as np\n\nclass SelfAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim  # Slightly reduced population size for faster convergence\n        self.initial_mutation_factor = 0.8  # Adjusted initial mutation factor for exploration\n        self.crossover_rate = 0.9  # Increased crossover rate for diversity\n        self.mutation_decay = 0.98  # Optimized decay for mutation factor\n        self.split_factor = 0.5  # Subpopulation split factor\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        evals = self.population_size\n        mutation_factor = self.initial_mutation_factor\n\n        while evals < self.budget:\n            subpop_size = int(self.population_size * self.split_factor)\n            for i in range(self.population_size):\n                idxs = list(range(self.population_size))\n                idxs.remove(i)\n                sample_size = subpop_size if np.random.rand() < 0.5 else self.population_size  # Dynamic subpopulation\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(a + mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n\n                if evals >= self.budget:\n                    break\n\n            mutation_factor *= self.mutation_decay  # Apply decay to mutation factor\n            if evals % (self.population_size // 2) == 0:  # Adapt learning rate dynamically\n                self.crossover_rate = 0.7 + 0.3 * np.random.rand()\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "SelfAdaptiveDifferentialEvolution", "description": "Introduced Self-Adaptive Differential Evolution with Dynamic Subpopulation Strategies and Adaptive Learning Rates for Enhanced Convergence.", "configspace": "", "generation": 65, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b7df5738-e239-453b-932f-2ae32e017b36", "metadata": {"aucs": [0.8028974999397684, 0.8028974999397684, 0.8028974999397684, 0.820162767335356, 0.820162767335356, 0.820162767335356, 0.8268158805027072, 0.8268158805027072, 0.8268158805027072, 0.6912682274538304, 0.6912682274538304, 0.6912682274538304, 0.5844808858752991, 0.5844808858752991, 0.5844808858752991, 0.6828452545688112, 0.6828452545688112, 0.6828452545688112, 0.2069948826304837, 0.2069948826304837, 0.2069948826304837, 0.25479576379989277, 0.25479576379989277, 0.25479576379989277, 0.3096555827229023, 0.3096555827229023, 0.3096555827229023, 0.16803182716129272, 0.16803182716129272, 0.16803182716129272, 0.2125972816080981, 0.2125972816080981, 0.2125972816080981, 0.13420800187083226, 0.13420800187083226, 0.13420800187083226, 0.9543543436153276, 0.9543543436153276, 0.9543543436153276, 0.9635622803614148, 0.9635622803614148, 0.9635622803614148, 0.9785171936615114, 0.9785171936615114, 0.9785171936615114, 0.22746277654182945, 0.22746277654182945, 0.22746277654182945, 0.18213375266531762, 0.18213375266531762, 0.18213375266531762, 0.3027151787666107, 0.3027151787666107, 0.3027151787666107, 0.7746545356265845, 0.7746545356265845, 0.7746545356265845, 0.7911711620707444, 0.7911711620707444, 0.7911711620707444, 0.7824307938694764, 0.7824307938694764, 0.7824307938694764, 0.16018975197729757, 0.16018975197729757, 0.16018975197729757, 0.29362630482925267, 0.29362630482925267, 0.29362630482925267, 0.1862258566090128, 0.1862258566090128, 0.1862258566090128, 0.12864263117106134, 0.12864263117106134, 0.12864263117106134, 0.16862340955315136, 0.16862340955315136, 0.16862340955315136, 0.13688738049704718, 0.13688738049704718, 0.13688738049704718, 0.057365535640381715, 0.057365535640381715, 0.057365535640381715, 0.1599719382778796, 0.1599719382778796, 0.1599719382778796, 0.09815978182277196, 0.09815978182277196, 0.09815978182277196, 0.32809732531911995, 0.32809732531911995, 0.32809732531911995, 0.15989542789680122, 0.15989542789680122, 0.15989542789680122, 0.39450358933421326, 0.39450358933421326, 0.39450358933421326, 0.07182819095400772, 0.07182819095400772, 0.07182819095400772, 0.21867696509157653, 0.21867696509157653, 0.21867696509157653, 0.12758638820913926, 0.12758638820913926, 0.12758638820913926, 0.20600531668127853, 0.20600531668127853, 0.20600531668127853, 0.24645502611711, 0.24645502611711, 0.24645502611711, 0.20271892435046202, 0.20271892435046202, 0.20271892435046202, 0.6010154351823194, 0.6010154351823194, 0.6010154351823194, 0.6173710628607691, 0.6173710628607691, 0.6173710628607691, 0.5525078307042829, 0.5525078307042829, 0.5525078307042829, 0.1220394034446799, 0.1220394034446799, 0.1220394034446799, 0.11876724744881773, 0.11876724744881773, 0.11876724744881773, 0.16418442071346084, 0.16418442071346084, 0.16418442071346084, 0.19307450728368347, 0.19307450728368347, 0.19307450728368347, 0.1564303088932516, 0.1564303088932516, 0.1564303088932516, 0.16070566581260937, 0.16070566581260937, 0.16070566581260937, 0.4104016892617022, 0.4104016892617022, 0.4104016892617022, 0.44735681110297965, 0.44735681110297965, 0.44735681110297965, 0.5117808824782959, 0.5117808824782959, 0.5117808824782959, 0.29691328184405497, 0.29691328184405497, 0.29691328184405497, 0.34080395958329524, 0.34080395958329524, 0.34080395958329524, 0.3056440310160867, 0.3056440310160867, 0.3056440310160867, 0.20509343921024492, 0.20509343921024492, 0.20509343921024492, 0.22041205601336689, 0.22041205601336689, 0.22041205601336689, 0.20323679804723838, 0.20323679804723838, 0.20323679804723838, 0.20667532748988104, 0.20667532748988104, 0.20667532748988104, 0.19966699706438262, 0.19966699706438262, 0.19966699706438262, 0.2858116053381321, 0.2858116053381321, 0.2858116053381321, 0.16301391266713094, 0.16301391266713094, 0.16301391266713094, 0.7239730569828753, 0.7239730569828753, 0.7239730569828753, 0.18129467615580674, 0.18129467615580674, 0.18129467615580674, 0.28515658620773476, 0.28515658620773476, 0.28515658620773476, 0.1935435239197778, 0.1935435239197778, 0.1935435239197778, 0.1467211704148913, 0.1467211704148913, 0.1467211704148913, 0.18991866161784787, 0.18991866161784787, 0.18991866161784787, 0.16535842938777856, 0.16535842938777856, 0.16535842938777856, 0.19316296124109922, 0.19316296124109922, 0.19316296124109922, 0.08535354931102046, 0.08535354931102046, 0.08535354931102046, 0.08660617035399687, 0.08660617035399687, 0.08660617035399687, 0.09014726101582149, 0.09014726101582149, 0.09014726101582149]}, "mutation_prompt": null}
{"id": "462370d0-6c68-4180-921f-b259b6e3ccd5", "solution": "import numpy as np\n\nclass SelfAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim  # Slightly reduced population size for faster convergence\n        self.initial_mutation_factor = 0.8  # Adjusted initial mutation factor for exploration\n        self.crossover_rate = 0.9  # Increased crossover rate for diversity\n        self.mutation_decay = 0.98  # Optimized decay for mutation factor\n        self.split_factor = 0.5  # Subpopulation split factor\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.array([func(individual) for individual in population])\n        evals = self.population_size\n        mutation_factor = self.initial_mutation_factor\n\n        while evals < self.budget:\n            subpop_size = int(self.population_size * self.split_factor)\n            for i in range(self.population_size):\n                idxs = list(range(self.population_size))\n                idxs.remove(i)\n                sample_size = subpop_size if np.random.rand() < 0.5 else self.population_size  # Dynamic subpopulation\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                \n                mutant = np.clip(a + mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    fitness[i] = trial_fitness\n                    population[i] = trial\n\n                if evals >= self.budget:\n                    break\n\n            mutation_factor *= self.mutation_decay  # Apply decay to mutation factor\n            if evals % (self.population_size // 2) == 0:  # Adapt learning rate dynamically\n                self.crossover_rate = 0.7 + 0.3 * np.random.rand()\n\n        best_index = np.argmin(fitness)\n        return population[best_index]", "name": "SelfAdaptiveDifferentialEvolution", "description": "Introduced Self-Adaptive Differential Evolution with Dynamic Subpopulation Strategies and Adaptive Learning Rates for Enhanced Convergence.", "configspace": "", "generation": 65, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "b7df5738-e239-453b-932f-2ae32e017b36", "metadata": {"aucs": [0.8028974999397684, 0.8028974999397684, 0.8028974999397684, 0.820162767335356, 0.820162767335356, 0.820162767335356, 0.8268158805027072, 0.8268158805027072, 0.8268158805027072, 0.6912682274538304, 0.6912682274538304, 0.6912682274538304, 0.5844808858752991, 0.5844808858752991, 0.5844808858752991, 0.6828452545688112, 0.6828452545688112, 0.6828452545688112, 0.2069948826304837, 0.2069948826304837, 0.2069948826304837, 0.25479576379989277, 0.25479576379989277, 0.25479576379989277, 0.3096555827229023, 0.3096555827229023, 0.3096555827229023, 0.16803182716129272, 0.16803182716129272, 0.16803182716129272, 0.2125972816080981, 0.2125972816080981, 0.2125972816080981, 0.13420800187083226, 0.13420800187083226, 0.13420800187083226, 0.9543543436153276, 0.9543543436153276, 0.9543543436153276, 0.9635622803614148, 0.9635622803614148, 0.9635622803614148, 0.9785171936615114, 0.9785171936615114, 0.9785171936615114, 0.22746277654182945, 0.22746277654182945, 0.22746277654182945, 0.18213375266531762, 0.18213375266531762, 0.18213375266531762, 0.3027151787666107, 0.3027151787666107, 0.3027151787666107, 0.7746545356265845, 0.7746545356265845, 0.7746545356265845, 0.7911711620707444, 0.7911711620707444, 0.7911711620707444, 0.7824307938694764, 0.7824307938694764, 0.7824307938694764, 0.16018975197729757, 0.16018975197729757, 0.16018975197729757, 0.29362630482925267, 0.29362630482925267, 0.29362630482925267, 0.1862258566090128, 0.1862258566090128, 0.1862258566090128, 0.12864263117106134, 0.12864263117106134, 0.12864263117106134, 0.16862340955315136, 0.16862340955315136, 0.16862340955315136, 0.13688738049704718, 0.13688738049704718, 0.13688738049704718, 0.057365535640381715, 0.057365535640381715, 0.057365535640381715, 0.1599719382778796, 0.1599719382778796, 0.1599719382778796, 0.09815978182277196, 0.09815978182277196, 0.09815978182277196, 0.32809732531911995, 0.32809732531911995, 0.32809732531911995, 0.15989542789680122, 0.15989542789680122, 0.15989542789680122, 0.39450358933421326, 0.39450358933421326, 0.39450358933421326, 0.07182819095400772, 0.07182819095400772, 0.07182819095400772, 0.21867696509157653, 0.21867696509157653, 0.21867696509157653, 0.12758638820913926, 0.12758638820913926, 0.12758638820913926, 0.20600531668127853, 0.20600531668127853, 0.20600531668127853, 0.24645502611711, 0.24645502611711, 0.24645502611711, 0.20271892435046202, 0.20271892435046202, 0.20271892435046202, 0.6010154351823194, 0.6010154351823194, 0.6010154351823194, 0.6173710628607691, 0.6173710628607691, 0.6173710628607691, 0.5525078307042829, 0.5525078307042829, 0.5525078307042829, 0.1220394034446799, 0.1220394034446799, 0.1220394034446799, 0.11876724744881773, 0.11876724744881773, 0.11876724744881773, 0.16418442071346084, 0.16418442071346084, 0.16418442071346084, 0.19307450728368347, 0.19307450728368347, 0.19307450728368347, 0.1564303088932516, 0.1564303088932516, 0.1564303088932516, 0.16070566581260937, 0.16070566581260937, 0.16070566581260937, 0.4104016892617022, 0.4104016892617022, 0.4104016892617022, 0.44735681110297965, 0.44735681110297965, 0.44735681110297965, 0.5117808824782959, 0.5117808824782959, 0.5117808824782959, 0.29691328184405497, 0.29691328184405497, 0.29691328184405497, 0.34080395958329524, 0.34080395958329524, 0.34080395958329524, 0.3056440310160867, 0.3056440310160867, 0.3056440310160867, 0.20509343921024492, 0.20509343921024492, 0.20509343921024492, 0.22041205601336689, 0.22041205601336689, 0.22041205601336689, 0.20323679804723838, 0.20323679804723838, 0.20323679804723838, 0.20667532748988104, 0.20667532748988104, 0.20667532748988104, 0.19966699706438262, 0.19966699706438262, 0.19966699706438262, 0.2858116053381321, 0.2858116053381321, 0.2858116053381321, 0.16301391266713094, 0.16301391266713094, 0.16301391266713094, 0.7239730569828753, 0.7239730569828753, 0.7239730569828753, 0.18129467615580674, 0.18129467615580674, 0.18129467615580674, 0.28515658620773476, 0.28515658620773476, 0.28515658620773476, 0.1935435239197778, 0.1935435239197778, 0.1935435239197778, 0.1467211704148913, 0.1467211704148913, 0.1467211704148913, 0.18991866161784787, 0.18991866161784787, 0.18991866161784787, 0.16535842938777856, 0.16535842938777856, 0.16535842938777856, 0.19316296124109922, 0.19316296124109922, 0.19316296124109922, 0.08535354931102046, 0.08535354931102046, 0.08535354931102046, 0.08660617035399687, 0.08660617035399687, 0.08660617035399687, 0.09014726101582149, 0.09014726101582149, 0.09014726101582149]}, "mutation_prompt": null}
