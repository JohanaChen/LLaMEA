{"id": "9cebabb0-7c93-4e01-9cee-381d5fd74bba", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_f = 0.5\n        self.crossover_prob = 0.7\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim)\n        )\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        \n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                if self.used_budget >= self.budget:\n                    break\n\n                # Mutation and recombination\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_f * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial[cross_points] = mutant[cross_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.used_budget += 1\n                if trial_fitness < self.fitness[i]:\n                    self.fitness[i] = trial_fitness\n                    self.population[i] = trial\n\n            # Adaptation of mutation factor and crossover probability\n            self.mutation_f = 0.5 + 0.3 * np.random.rand()\n            self.crossover_prob = 0.5 + 0.4 * np.random.rand()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.used_budget >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1", "name": "AdaptiveDifferentialEvolution", "description": "An Adaptive Differential Evolution algorithm with a self-adjusting mutation factor and crossover probability tailored to efficiently explore and exploit the search space within the given budget.", "configspace": "", "generation": 0, "fitness": 0.2795010862956205, "feedback": "The algorithm AdaptiveDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.23.", "error": "", "parent_id": null, "metadata": {"aucs": [0.7644142862716081, 0.7671809050587396, 0.737971556935571, 0.7422455071440246, 0.7705954529930635, 0.7545153578348972, 0.7585997065068077, 0.7444014550464816, 0.7461742754999867, 0.5539100370693213, 0.5551661858971104, 0.5606767089216882, 0.559804860619314, 0.5394102010187714, 0.556735462222953, 0.5785251459516807, 0.5817556914152859, 0.5350922342601507, 0.13594390797111777, 0.14421147620040742, 0.13861358371938093, 0.14056799364169326, 0.13785585060951322, 0.1344667184126802, 0.16862826631738348, 0.1269614395398716, 0.13515176704697351, 0.12122794405198534, 0.12064140931989331, 0.12585427163312635, 0.11390745322328732, 0.1218492267364063, 0.10735154375733769, 0.11772657207556148, 0.11177626870208857, 0.12022359396146698, 0.9382511363254415, 0.9427002108554231, 0.9335298663510166, 0.9735453086833011, 0.9716724136429433, 0.9510382502908014, 0.9634134672229929, 0.9509589054801365, 0.9258879750336196, 0.2963791292304956, 0.32607291918920844, 0.36484938363919706, 0.3262104676375993, 0.32465852091151126, 0.32465336200686346, 0.33381108541601656, 0.34086328296956137, 0.35605197137861777, 0.4542326726466578, 0.5555839117178606, 0.5053550816875391, 0.45887264988842447, 0.5045472732389553, 0.5296867999547756, 0.579596105085834, 0.5933961224794162, 0.5987588044811909, 0.1838580403232083, 0.1746057898362433, 0.17911223619277084, 0.16222751363107035, 0.17302382875130573, 0.17996925277629439, 0.22816962292579168, 0.18423513850407613, 0.2074746251382471, 0.16143197707130807, 0.15098694404433421, 0.21002179566758916, 0.19305281593268042, 0.17126167286996186, 0.23108076069981476, 0.19888529199317573, 0.19465007612959506, 0.1826021114432851, 0.049137266734769924, 0.031088929893848816, 0.05945272253322331, 0.058017326718979856, 0.04187527596284524, 0.03519237211421711, 0.04540294836638892, 0.04804060691149514, 0.042774932211246286, 0.19944824819237916, 0.1801953684052533, 0.1726500050827231, 0.17061687347305055, 0.1407363080209969, 0.1107473905037526, 0.20020326485882733, 0.18110809496973657, 0.21689327417210658, 0.029045123761236247, 0.015015118057649102, 0.027791509091652955, 0.018463076581958227, 0.021479965149182267, 0.0352875654242909, 0.01688348345491575, 0.05264788049125457, 0.006790080741961302, 0.13410750128315208, 0.14082228123084728, 0.1286826505601565, 0.16095746035321135, 0.14176484841386994, 0.14926576090853472, 0.12099174623266062, 0.13845917383336803, 0.1544740545003862, 0.5041103371121642, 0.5003683398925691, 0.5109118766042894, 0.49353757560809797, 0.5118567887021535, 0.49939397504199623, 0.5162563835784112, 0.5168166434408181, 0.4972806137867748, 0.08588604018763057, 0.08293976783777068, 0.10130892182534246, 0.11721304752522388, 0.10549256817287567, 0.0937535367883422, 0.10395445870516673, 0.09478192856601797, 0.08534580473787468, 0.14873911109669302, 0.12653784969602344, 0.18573360768424696, 0.12400802979016967, 0.18502724360352996, 0.1314235451066761, 0.13505600147580243, 0.12402370232236193, 0.13564560281981208, 0.29022750735611713, 0.3044802878753713, 0.30000966281081964, 0.302536689087643, 0.30441486685118624, 0.320786600748328, 0.31554633266151644, 0.36395005973384165, 0.3281158566423371, 0.21505199196744507, 0.22603225458241438, 0.2178590126798896, 0.2296570133306408, 0.20350712494095524, 0.21039600806774061, 0.22595219941500067, 0.24129688522205006, 0.2333159320559235, 0.19072083666292383, 0.20821936427256482, 0.20527023901097086, 0.17956964654039476, 0.18409420855504943, 0.18138623590725933, 0.20894670161571838, 0.19434095151137465, 0.18798056722540424, 0.21356979852828128, 0.19230667835766435, 0.18943656260047392, 0.19680472812312444, 0.1978882347590989, 0.1864657715545165, 0.21727413487312963, 0.1929179418522996, 0.18776885536766752, 0.6209546266293047, 0.2001113218749856, 0.16719808983100137, 0.40323787614698037, 0.393932382758689, 0.496463122715313, 0.24974187123140779, 0.23723661334401147, 0.2900605462367206, 0.19216258589169644, 0.43446158717075867, 0.49647968125537323, 0.18810400436749986, 0.25819018556056517, 0.18903329453079543, 0.19963567267242788, 0.49695849370327627, 0.19957278285013103, 0.18952249184701553, 0.16959883270673182, 0.17195826515896973, 0.17456133383789896, 0.17894991818874717, 0.2001632955887278, 0.18076833067032516, 0.1801919496025436, 0.17673423108327346, 0.07331777488590141, 0.07597371139676268, 0.07550242018461994, 0.0686966889608247, 0.07783629560363059, 0.06965068769223492, 0.0774147146677513, 0.08273303369044538, 0.0717535021007989]}, "mutation_prompt": null}
{"id": "47c864fa-424f-49ea-8756-322fd36c3bf3", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_f = 0.5\n        self.crossover_prob = 0.7\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim)\n        )\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        \n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                if self.used_budget >= self.budget:\n                    break\n\n                # Mutation and recombination\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_f * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial[cross_points] = mutant[cross_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.used_budget += 1\n                if trial_fitness < self.fitness[i]:\n                    self.fitness[i] = trial_fitness\n                    self.population[i] = trial\n\n            # Adaptation of mutation factor and crossover probability\n            self.mutation_f = 0.5 + 0.3 * np.random.rand()\n            self.crossover_prob = 0.5 + 0.4 * np.random.rand()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.used_budget >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1", "name": "AdaptiveDifferentialEvolution", "description": "An Adaptive Differential Evolution algorithm with a self-adjusting mutation factor and crossover probability tailored to efficiently explore and exploit the search space within the given budget.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9cebabb0-7c93-4e01-9cee-381d5fd74bba", "metadata": {"aucs": [0.7644142862716081, 0.7671809050587396, 0.737971556935571, 0.7422455071440246, 0.7705954529930635, 0.7545153578348972, 0.7585997065068077, 0.7444014550464816, 0.7461742754999867, 0.5539100370693213, 0.5551661858971104, 0.5606767089216882, 0.559804860619314, 0.5394102010187714, 0.556735462222953, 0.5785251459516807, 0.5817556914152859, 0.5350922342601507, 0.13594390797111777, 0.14421147620040742, 0.13861358371938093, 0.14056799364169326, 0.13785585060951322, 0.1344667184126802, 0.16862826631738348, 0.1269614395398716, 0.13515176704697351, 0.12122794405198534, 0.12064140931989331, 0.12585427163312635, 0.11390745322328732, 0.1218492267364063, 0.10735154375733769, 0.11772657207556148, 0.11177626870208857, 0.12022359396146698, 0.9382511363254415, 0.9427002108554231, 0.9335298663510166, 0.9735453086833011, 0.9716724136429433, 0.9510382502908014, 0.9634134672229929, 0.9509589054801365, 0.9258879750336196, 0.2963791292304956, 0.32607291918920844, 0.36484938363919706, 0.3262104676375993, 0.32465852091151126, 0.32465336200686346, 0.33381108541601656, 0.34086328296956137, 0.35605197137861777, 0.4542326726466578, 0.5555839117178606, 0.5053550816875391, 0.45887264988842447, 0.5045472732389553, 0.5296867999547756, 0.579596105085834, 0.5933961224794162, 0.5987588044811909, 0.1838580403232083, 0.1746057898362433, 0.17911223619277084, 0.16222751363107035, 0.17302382875130573, 0.17996925277629439, 0.22816962292579168, 0.18423513850407613, 0.2074746251382471, 0.16143197707130807, 0.15098694404433421, 0.21002179566758916, 0.19305281593268042, 0.17126167286996186, 0.23108076069981476, 0.19888529199317573, 0.19465007612959506, 0.1826021114432851, 0.049137266734769924, 0.031088929893848816, 0.05945272253322331, 0.058017326718979856, 0.04187527596284524, 0.03519237211421711, 0.04540294836638892, 0.04804060691149514, 0.042774932211246286, 0.19944824819237916, 0.1801953684052533, 0.1726500050827231, 0.17061687347305055, 0.1407363080209969, 0.1107473905037526, 0.20020326485882733, 0.18110809496973657, 0.21689327417210658, 0.029045123761236247, 0.015015118057649102, 0.027791509091652955, 0.018463076581958227, 0.021479965149182267, 0.0352875654242909, 0.01688348345491575, 0.05264788049125457, 0.006790080741961302, 0.13410750128315208, 0.14082228123084728, 0.1286826505601565, 0.16095746035321135, 0.14176484841386994, 0.14926576090853472, 0.12099174623266062, 0.13845917383336803, 0.1544740545003862, 0.5041103371121642, 0.5003683398925691, 0.5109118766042894, 0.49353757560809797, 0.5118567887021535, 0.49939397504199623, 0.5162563835784112, 0.5168166434408181, 0.4972806137867748, 0.08588604018763057, 0.08293976783777068, 0.10130892182534246, 0.11721304752522388, 0.10549256817287567, 0.0937535367883422, 0.10395445870516673, 0.09478192856601797, 0.08534580473787468, 0.14873911109669302, 0.12653784969602344, 0.18573360768424696, 0.12400802979016967, 0.18502724360352996, 0.1314235451066761, 0.13505600147580243, 0.12402370232236193, 0.13564560281981208, 0.29022750735611713, 0.3044802878753713, 0.30000966281081964, 0.302536689087643, 0.30441486685118624, 0.320786600748328, 0.31554633266151644, 0.36395005973384165, 0.3281158566423371, 0.21505199196744507, 0.22603225458241438, 0.2178590126798896, 0.2296570133306408, 0.20350712494095524, 0.21039600806774061, 0.22595219941500067, 0.24129688522205006, 0.2333159320559235, 0.19072083666292383, 0.20821936427256482, 0.20527023901097086, 0.17956964654039476, 0.18409420855504943, 0.18138623590725933, 0.20894670161571838, 0.19434095151137465, 0.18798056722540424, 0.21356979852828128, 0.19230667835766435, 0.18943656260047392, 0.19680472812312444, 0.1978882347590989, 0.1864657715545165, 0.21727413487312963, 0.1929179418522996, 0.18776885536766752, 0.6209546266293047, 0.2001113218749856, 0.16719808983100137, 0.40323787614698037, 0.393932382758689, 0.496463122715313, 0.24974187123140779, 0.23723661334401147, 0.2900605462367206, 0.19216258589169644, 0.43446158717075867, 0.49647968125537323, 0.18810400436749986, 0.25819018556056517, 0.18903329453079543, 0.19963567267242788, 0.49695849370327627, 0.19957278285013103, 0.18952249184701553, 0.16959883270673182, 0.17195826515896973, 0.17456133383789896, 0.17894991818874717, 0.2001632955887278, 0.18076833067032516, 0.1801919496025436, 0.17673423108327346, 0.07331777488590141, 0.07597371139676268, 0.07550242018461994, 0.0686966889608247, 0.07783629560363059, 0.06965068769223492, 0.0774147146677513, 0.08273303369044538, 0.0717535021007989]}, "mutation_prompt": null}
{"id": "e14fbfad-df7b-451b-ba94-6bb38d613c51", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_f = 0.5\n        self.crossover_prob = 0.7\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim)\n        )\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        \n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                if self.used_budget >= self.budget:\n                    break\n\n                # Mutation and recombination\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_f * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial[cross_points] = mutant[cross_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.used_budget += 1\n                if trial_fitness < self.fitness[i]:\n                    self.fitness[i] = trial_fitness\n                    self.population[i] = trial\n\n            # Adaptation of mutation factor and crossover probability\n            self.mutation_f = 0.5 + 0.3 * np.random.rand()\n            self.crossover_prob = 0.5 + 0.4 * np.random.rand()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.used_budget >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1", "name": "AdaptiveDifferentialEvolution", "description": "An Adaptive Differential Evolution algorithm with a self-adjusting mutation factor and crossover probability tailored to efficiently explore and exploit the search space within the given budget.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9cebabb0-7c93-4e01-9cee-381d5fd74bba", "metadata": {"aucs": [0.7644142862716081, 0.7671809050587396, 0.737971556935571, 0.7422455071440246, 0.7705954529930635, 0.7545153578348972, 0.7585997065068077, 0.7444014550464816, 0.7461742754999867, 0.5539100370693213, 0.5551661858971104, 0.5606767089216882, 0.559804860619314, 0.5394102010187714, 0.556735462222953, 0.5785251459516807, 0.5817556914152859, 0.5350922342601507, 0.13594390797111777, 0.14421147620040742, 0.13861358371938093, 0.14056799364169326, 0.13785585060951322, 0.1344667184126802, 0.16862826631738348, 0.1269614395398716, 0.13515176704697351, 0.12122794405198534, 0.12064140931989331, 0.12585427163312635, 0.11390745322328732, 0.1218492267364063, 0.10735154375733769, 0.11772657207556148, 0.11177626870208857, 0.12022359396146698, 0.9382511363254415, 0.9427002108554231, 0.9335298663510166, 0.9735453086833011, 0.9716724136429433, 0.9510382502908014, 0.9634134672229929, 0.9509589054801365, 0.9258879750336196, 0.2963791292304956, 0.32607291918920844, 0.36484938363919706, 0.3262104676375993, 0.32465852091151126, 0.32465336200686346, 0.33381108541601656, 0.34086328296956137, 0.35605197137861777, 0.4542326726466578, 0.5555839117178606, 0.5053550816875391, 0.45887264988842447, 0.5045472732389553, 0.5296867999547756, 0.579596105085834, 0.5933961224794162, 0.5987588044811909, 0.1838580403232083, 0.1746057898362433, 0.17911223619277084, 0.16222751363107035, 0.17302382875130573, 0.17996925277629439, 0.22816962292579168, 0.18423513850407613, 0.2074746251382471, 0.16143197707130807, 0.15098694404433421, 0.21002179566758916, 0.19305281593268042, 0.17126167286996186, 0.23108076069981476, 0.19888529199317573, 0.19465007612959506, 0.1826021114432851, 0.049137266734769924, 0.031088929893848816, 0.05945272253322331, 0.058017326718979856, 0.04187527596284524, 0.03519237211421711, 0.04540294836638892, 0.04804060691149514, 0.042774932211246286, 0.19944824819237916, 0.1801953684052533, 0.1726500050827231, 0.17061687347305055, 0.1407363080209969, 0.1107473905037526, 0.20020326485882733, 0.18110809496973657, 0.21689327417210658, 0.029045123761236247, 0.015015118057649102, 0.027791509091652955, 0.018463076581958227, 0.021479965149182267, 0.0352875654242909, 0.01688348345491575, 0.05264788049125457, 0.006790080741961302, 0.13410750128315208, 0.14082228123084728, 0.1286826505601565, 0.16095746035321135, 0.14176484841386994, 0.14926576090853472, 0.12099174623266062, 0.13845917383336803, 0.1544740545003862, 0.5041103371121642, 0.5003683398925691, 0.5109118766042894, 0.49353757560809797, 0.5118567887021535, 0.49939397504199623, 0.5162563835784112, 0.5168166434408181, 0.4972806137867748, 0.08588604018763057, 0.08293976783777068, 0.10130892182534246, 0.11721304752522388, 0.10549256817287567, 0.0937535367883422, 0.10395445870516673, 0.09478192856601797, 0.08534580473787468, 0.14873911109669302, 0.12653784969602344, 0.18573360768424696, 0.12400802979016967, 0.18502724360352996, 0.1314235451066761, 0.13505600147580243, 0.12402370232236193, 0.13564560281981208, 0.29022750735611713, 0.3044802878753713, 0.30000966281081964, 0.302536689087643, 0.30441486685118624, 0.320786600748328, 0.31554633266151644, 0.36395005973384165, 0.3281158566423371, 0.21505199196744507, 0.22603225458241438, 0.2178590126798896, 0.2296570133306408, 0.20350712494095524, 0.21039600806774061, 0.22595219941500067, 0.24129688522205006, 0.2333159320559235, 0.19072083666292383, 0.20821936427256482, 0.20527023901097086, 0.17956964654039476, 0.18409420855504943, 0.18138623590725933, 0.20894670161571838, 0.19434095151137465, 0.18798056722540424, 0.21356979852828128, 0.19230667835766435, 0.18943656260047392, 0.19680472812312444, 0.1978882347590989, 0.1864657715545165, 0.21727413487312963, 0.1929179418522996, 0.18776885536766752, 0.6209546266293047, 0.2001113218749856, 0.16719808983100137, 0.40323787614698037, 0.393932382758689, 0.496463122715313, 0.24974187123140779, 0.23723661334401147, 0.2900605462367206, 0.19216258589169644, 0.43446158717075867, 0.49647968125537323, 0.18810400436749986, 0.25819018556056517, 0.18903329453079543, 0.19963567267242788, 0.49695849370327627, 0.19957278285013103, 0.18952249184701553, 0.16959883270673182, 0.17195826515896973, 0.17456133383789896, 0.17894991818874717, 0.2001632955887278, 0.18076833067032516, 0.1801919496025436, 0.17673423108327346, 0.07331777488590141, 0.07597371139676268, 0.07550242018461994, 0.0686966889608247, 0.07783629560363059, 0.06965068769223492, 0.0774147146677513, 0.08273303369044538, 0.0717535021007989]}, "mutation_prompt": null}
{"id": "4bca9e41-fc63-4a8f-a7dc-814e180b3ee7", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_f = 0.5\n        self.crossover_prob = 0.7\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim)\n        )\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        \n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                if self.used_budget >= self.budget:\n                    break\n\n                # Mutation and recombination\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_f * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial[cross_points] = mutant[cross_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.used_budget += 1\n                if trial_fitness < self.fitness[i]:\n                    self.fitness[i] = trial_fitness\n                    self.population[i] = trial\n\n            # Adaptation of mutation factor and crossover probability\n            self.mutation_f = 0.5 + 0.3 * np.random.rand()\n            self.crossover_prob = 0.5 + 0.4 * np.random.rand()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.used_budget >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1", "name": "AdaptiveDifferentialEvolution", "description": "An Adaptive Differential Evolution algorithm with a self-adjusting mutation factor and crossover probability tailored to efficiently explore and exploit the search space within the given budget.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9cebabb0-7c93-4e01-9cee-381d5fd74bba", "metadata": {"aucs": [0.7644142862716081, 0.7671809050587396, 0.737971556935571, 0.7422455071440246, 0.7705954529930635, 0.7545153578348972, 0.7585997065068077, 0.7444014550464816, 0.7461742754999867, 0.5539100370693213, 0.5551661858971104, 0.5606767089216882, 0.559804860619314, 0.5394102010187714, 0.556735462222953, 0.5785251459516807, 0.5817556914152859, 0.5350922342601507, 0.13594390797111777, 0.14421147620040742, 0.13861358371938093, 0.14056799364169326, 0.13785585060951322, 0.1344667184126802, 0.16862826631738348, 0.1269614395398716, 0.13515176704697351, 0.12122794405198534, 0.12064140931989331, 0.12585427163312635, 0.11390745322328732, 0.1218492267364063, 0.10735154375733769, 0.11772657207556148, 0.11177626870208857, 0.12022359396146698, 0.9382511363254415, 0.9427002108554231, 0.9335298663510166, 0.9735453086833011, 0.9716724136429433, 0.9510382502908014, 0.9634134672229929, 0.9509589054801365, 0.9258879750336196, 0.2963791292304956, 0.32607291918920844, 0.36484938363919706, 0.3262104676375993, 0.32465852091151126, 0.32465336200686346, 0.33381108541601656, 0.34086328296956137, 0.35605197137861777, 0.4542326726466578, 0.5555839117178606, 0.5053550816875391, 0.45887264988842447, 0.5045472732389553, 0.5296867999547756, 0.579596105085834, 0.5933961224794162, 0.5987588044811909, 0.1838580403232083, 0.1746057898362433, 0.17911223619277084, 0.16222751363107035, 0.17302382875130573, 0.17996925277629439, 0.22816962292579168, 0.18423513850407613, 0.2074746251382471, 0.16143197707130807, 0.15098694404433421, 0.21002179566758916, 0.19305281593268042, 0.17126167286996186, 0.23108076069981476, 0.19888529199317573, 0.19465007612959506, 0.1826021114432851, 0.049137266734769924, 0.031088929893848816, 0.05945272253322331, 0.058017326718979856, 0.04187527596284524, 0.03519237211421711, 0.04540294836638892, 0.04804060691149514, 0.042774932211246286, 0.19944824819237916, 0.1801953684052533, 0.1726500050827231, 0.17061687347305055, 0.1407363080209969, 0.1107473905037526, 0.20020326485882733, 0.18110809496973657, 0.21689327417210658, 0.029045123761236247, 0.015015118057649102, 0.027791509091652955, 0.018463076581958227, 0.021479965149182267, 0.0352875654242909, 0.01688348345491575, 0.05264788049125457, 0.006790080741961302, 0.13410750128315208, 0.14082228123084728, 0.1286826505601565, 0.16095746035321135, 0.14176484841386994, 0.14926576090853472, 0.12099174623266062, 0.13845917383336803, 0.1544740545003862, 0.5041103371121642, 0.5003683398925691, 0.5109118766042894, 0.49353757560809797, 0.5118567887021535, 0.49939397504199623, 0.5162563835784112, 0.5168166434408181, 0.4972806137867748, 0.08588604018763057, 0.08293976783777068, 0.10130892182534246, 0.11721304752522388, 0.10549256817287567, 0.0937535367883422, 0.10395445870516673, 0.09478192856601797, 0.08534580473787468, 0.14873911109669302, 0.12653784969602344, 0.18573360768424696, 0.12400802979016967, 0.18502724360352996, 0.1314235451066761, 0.13505600147580243, 0.12402370232236193, 0.13564560281981208, 0.29022750735611713, 0.3044802878753713, 0.30000966281081964, 0.302536689087643, 0.30441486685118624, 0.320786600748328, 0.31554633266151644, 0.36395005973384165, 0.3281158566423371, 0.21505199196744507, 0.22603225458241438, 0.2178590126798896, 0.2296570133306408, 0.20350712494095524, 0.21039600806774061, 0.22595219941500067, 0.24129688522205006, 0.2333159320559235, 0.19072083666292383, 0.20821936427256482, 0.20527023901097086, 0.17956964654039476, 0.18409420855504943, 0.18138623590725933, 0.20894670161571838, 0.19434095151137465, 0.18798056722540424, 0.21356979852828128, 0.19230667835766435, 0.18943656260047392, 0.19680472812312444, 0.1978882347590989, 0.1864657715545165, 0.21727413487312963, 0.1929179418522996, 0.18776885536766752, 0.6209546266293047, 0.2001113218749856, 0.16719808983100137, 0.40323787614698037, 0.393932382758689, 0.496463122715313, 0.24974187123140779, 0.23723661334401147, 0.2900605462367206, 0.19216258589169644, 0.43446158717075867, 0.49647968125537323, 0.18810400436749986, 0.25819018556056517, 0.18903329453079543, 0.19963567267242788, 0.49695849370327627, 0.19957278285013103, 0.18952249184701553, 0.16959883270673182, 0.17195826515896973, 0.17456133383789896, 0.17894991818874717, 0.2001632955887278, 0.18076833067032516, 0.1801919496025436, 0.17673423108327346, 0.07331777488590141, 0.07597371139676268, 0.07550242018461994, 0.0686966889608247, 0.07783629560363059, 0.06965068769223492, 0.0774147146677513, 0.08273303369044538, 0.0717535021007989]}, "mutation_prompt": null}
{"id": "caeee4fb-32b0-4c71-b8f5-a78a5f10530a", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_f = 0.5\n        self.crossover_prob = 0.7\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim)\n        )\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        \n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                if self.used_budget >= self.budget:\n                    break\n\n                # Mutation and recombination\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_f * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial[cross_points] = mutant[cross_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.used_budget += 1\n                if trial_fitness < self.fitness[i]:\n                    self.fitness[i] = trial_fitness\n                    self.population[i] = trial\n\n            # Adaptation of mutation factor and crossover probability\n            self.mutation_f = 0.5 + 0.3 * np.random.rand()\n            self.crossover_prob = 0.5 + 0.4 * np.random.rand()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.used_budget >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1", "name": "AdaptiveDifferentialEvolution", "description": "An Adaptive Differential Evolution algorithm with a self-adjusting mutation factor and crossover probability tailored to efficiently explore and exploit the search space within the given budget.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9cebabb0-7c93-4e01-9cee-381d5fd74bba", "metadata": {"aucs": [0.7644142862716081, 0.7671809050587396, 0.737971556935571, 0.7422455071440246, 0.7705954529930635, 0.7545153578348972, 0.7585997065068077, 0.7444014550464816, 0.7461742754999867, 0.5539100370693213, 0.5551661858971104, 0.5606767089216882, 0.559804860619314, 0.5394102010187714, 0.556735462222953, 0.5785251459516807, 0.5817556914152859, 0.5350922342601507, 0.13594390797111777, 0.14421147620040742, 0.13861358371938093, 0.14056799364169326, 0.13785585060951322, 0.1344667184126802, 0.16862826631738348, 0.1269614395398716, 0.13515176704697351, 0.12122794405198534, 0.12064140931989331, 0.12585427163312635, 0.11390745322328732, 0.1218492267364063, 0.10735154375733769, 0.11772657207556148, 0.11177626870208857, 0.12022359396146698, 0.9382511363254415, 0.9427002108554231, 0.9335298663510166, 0.9735453086833011, 0.9716724136429433, 0.9510382502908014, 0.9634134672229929, 0.9509589054801365, 0.9258879750336196, 0.2963791292304956, 0.32607291918920844, 0.36484938363919706, 0.3262104676375993, 0.32465852091151126, 0.32465336200686346, 0.33381108541601656, 0.34086328296956137, 0.35605197137861777, 0.4542326726466578, 0.5555839117178606, 0.5053550816875391, 0.45887264988842447, 0.5045472732389553, 0.5296867999547756, 0.579596105085834, 0.5933961224794162, 0.5987588044811909, 0.1838580403232083, 0.1746057898362433, 0.17911223619277084, 0.16222751363107035, 0.17302382875130573, 0.17996925277629439, 0.22816962292579168, 0.18423513850407613, 0.2074746251382471, 0.16143197707130807, 0.15098694404433421, 0.21002179566758916, 0.19305281593268042, 0.17126167286996186, 0.23108076069981476, 0.19888529199317573, 0.19465007612959506, 0.1826021114432851, 0.049137266734769924, 0.031088929893848816, 0.05945272253322331, 0.058017326718979856, 0.04187527596284524, 0.03519237211421711, 0.04540294836638892, 0.04804060691149514, 0.042774932211246286, 0.19944824819237916, 0.1801953684052533, 0.1726500050827231, 0.17061687347305055, 0.1407363080209969, 0.1107473905037526, 0.20020326485882733, 0.18110809496973657, 0.21689327417210658, 0.029045123761236247, 0.015015118057649102, 0.027791509091652955, 0.018463076581958227, 0.021479965149182267, 0.0352875654242909, 0.01688348345491575, 0.05264788049125457, 0.006790080741961302, 0.13410750128315208, 0.14082228123084728, 0.1286826505601565, 0.16095746035321135, 0.14176484841386994, 0.14926576090853472, 0.12099174623266062, 0.13845917383336803, 0.1544740545003862, 0.5041103371121642, 0.5003683398925691, 0.5109118766042894, 0.49353757560809797, 0.5118567887021535, 0.49939397504199623, 0.5162563835784112, 0.5168166434408181, 0.4972806137867748, 0.08588604018763057, 0.08293976783777068, 0.10130892182534246, 0.11721304752522388, 0.10549256817287567, 0.0937535367883422, 0.10395445870516673, 0.09478192856601797, 0.08534580473787468, 0.14873911109669302, 0.12653784969602344, 0.18573360768424696, 0.12400802979016967, 0.18502724360352996, 0.1314235451066761, 0.13505600147580243, 0.12402370232236193, 0.13564560281981208, 0.29022750735611713, 0.3044802878753713, 0.30000966281081964, 0.302536689087643, 0.30441486685118624, 0.320786600748328, 0.31554633266151644, 0.36395005973384165, 0.3281158566423371, 0.21505199196744507, 0.22603225458241438, 0.2178590126798896, 0.2296570133306408, 0.20350712494095524, 0.21039600806774061, 0.22595219941500067, 0.24129688522205006, 0.2333159320559235, 0.19072083666292383, 0.20821936427256482, 0.20527023901097086, 0.17956964654039476, 0.18409420855504943, 0.18138623590725933, 0.20894670161571838, 0.19434095151137465, 0.18798056722540424, 0.21356979852828128, 0.19230667835766435, 0.18943656260047392, 0.19680472812312444, 0.1978882347590989, 0.1864657715545165, 0.21727413487312963, 0.1929179418522996, 0.18776885536766752, 0.6209546266293047, 0.2001113218749856, 0.16719808983100137, 0.40323787614698037, 0.393932382758689, 0.496463122715313, 0.24974187123140779, 0.23723661334401147, 0.2900605462367206, 0.19216258589169644, 0.43446158717075867, 0.49647968125537323, 0.18810400436749986, 0.25819018556056517, 0.18903329453079543, 0.19963567267242788, 0.49695849370327627, 0.19957278285013103, 0.18952249184701553, 0.16959883270673182, 0.17195826515896973, 0.17456133383789896, 0.17894991818874717, 0.2001632955887278, 0.18076833067032516, 0.1801919496025436, 0.17673423108327346, 0.07331777488590141, 0.07597371139676268, 0.07550242018461994, 0.0686966889608247, 0.07783629560363059, 0.06965068769223492, 0.0774147146677513, 0.08273303369044538, 0.0717535021007989]}, "mutation_prompt": null}
{"id": "4972a341-13aa-4ffe-872a-2eb93403b6b5", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_f = 0.5\n        self.crossover_prob = 0.7\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim)\n        )\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        \n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                if self.used_budget >= self.budget:\n                    break\n\n                # Mutation and recombination\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_f * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial[cross_points] = mutant[cross_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.used_budget += 1\n                if trial_fitness < self.fitness[i]:\n                    self.fitness[i] = trial_fitness\n                    self.population[i] = trial\n\n            # Adaptation of mutation factor and crossover probability\n            self.mutation_f = 0.5 + 0.3 * np.random.rand()\n            self.crossover_prob = 0.5 + 0.4 * np.random.rand()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.used_budget >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1", "name": "AdaptiveDifferentialEvolution", "description": "An Adaptive Differential Evolution algorithm with a self-adjusting mutation factor and crossover probability tailored to efficiently explore and exploit the search space within the given budget.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9cebabb0-7c93-4e01-9cee-381d5fd74bba", "metadata": {"aucs": [0.7644142862716081, 0.7671809050587396, 0.737971556935571, 0.7422455071440246, 0.7705954529930635, 0.7545153578348972, 0.7585997065068077, 0.7444014550464816, 0.7461742754999867, 0.5539100370693213, 0.5551661858971104, 0.5606767089216882, 0.559804860619314, 0.5394102010187714, 0.556735462222953, 0.5785251459516807, 0.5817556914152859, 0.5350922342601507, 0.13594390797111777, 0.14421147620040742, 0.13861358371938093, 0.14056799364169326, 0.13785585060951322, 0.1344667184126802, 0.16862826631738348, 0.1269614395398716, 0.13515176704697351, 0.12122794405198534, 0.12064140931989331, 0.12585427163312635, 0.11390745322328732, 0.1218492267364063, 0.10735154375733769, 0.11772657207556148, 0.11177626870208857, 0.12022359396146698, 0.9382511363254415, 0.9427002108554231, 0.9335298663510166, 0.9735453086833011, 0.9716724136429433, 0.9510382502908014, 0.9634134672229929, 0.9509589054801365, 0.9258879750336196, 0.2963791292304956, 0.32607291918920844, 0.36484938363919706, 0.3262104676375993, 0.32465852091151126, 0.32465336200686346, 0.33381108541601656, 0.34086328296956137, 0.35605197137861777, 0.4542326726466578, 0.5555839117178606, 0.5053550816875391, 0.45887264988842447, 0.5045472732389553, 0.5296867999547756, 0.579596105085834, 0.5933961224794162, 0.5987588044811909, 0.1838580403232083, 0.1746057898362433, 0.17911223619277084, 0.16222751363107035, 0.17302382875130573, 0.17996925277629439, 0.22816962292579168, 0.18423513850407613, 0.2074746251382471, 0.16143197707130807, 0.15098694404433421, 0.21002179566758916, 0.19305281593268042, 0.17126167286996186, 0.23108076069981476, 0.19888529199317573, 0.19465007612959506, 0.1826021114432851, 0.049137266734769924, 0.031088929893848816, 0.05945272253322331, 0.058017326718979856, 0.04187527596284524, 0.03519237211421711, 0.04540294836638892, 0.04804060691149514, 0.042774932211246286, 0.19944824819237916, 0.1801953684052533, 0.1726500050827231, 0.17061687347305055, 0.1407363080209969, 0.1107473905037526, 0.20020326485882733, 0.18110809496973657, 0.21689327417210658, 0.029045123761236247, 0.015015118057649102, 0.027791509091652955, 0.018463076581958227, 0.021479965149182267, 0.0352875654242909, 0.01688348345491575, 0.05264788049125457, 0.006790080741961302, 0.13410750128315208, 0.14082228123084728, 0.1286826505601565, 0.16095746035321135, 0.14176484841386994, 0.14926576090853472, 0.12099174623266062, 0.13845917383336803, 0.1544740545003862, 0.5041103371121642, 0.5003683398925691, 0.5109118766042894, 0.49353757560809797, 0.5118567887021535, 0.49939397504199623, 0.5162563835784112, 0.5168166434408181, 0.4972806137867748, 0.08588604018763057, 0.08293976783777068, 0.10130892182534246, 0.11721304752522388, 0.10549256817287567, 0.0937535367883422, 0.10395445870516673, 0.09478192856601797, 0.08534580473787468, 0.14873911109669302, 0.12653784969602344, 0.18573360768424696, 0.12400802979016967, 0.18502724360352996, 0.1314235451066761, 0.13505600147580243, 0.12402370232236193, 0.13564560281981208, 0.29022750735611713, 0.3044802878753713, 0.30000966281081964, 0.302536689087643, 0.30441486685118624, 0.320786600748328, 0.31554633266151644, 0.36395005973384165, 0.3281158566423371, 0.21505199196744507, 0.22603225458241438, 0.2178590126798896, 0.2296570133306408, 0.20350712494095524, 0.21039600806774061, 0.22595219941500067, 0.24129688522205006, 0.2333159320559235, 0.19072083666292383, 0.20821936427256482, 0.20527023901097086, 0.17956964654039476, 0.18409420855504943, 0.18138623590725933, 0.20894670161571838, 0.19434095151137465, 0.18798056722540424, 0.21356979852828128, 0.19230667835766435, 0.18943656260047392, 0.19680472812312444, 0.1978882347590989, 0.1864657715545165, 0.21727413487312963, 0.1929179418522996, 0.18776885536766752, 0.6209546266293047, 0.2001113218749856, 0.16719808983100137, 0.40323787614698037, 0.393932382758689, 0.496463122715313, 0.24974187123140779, 0.23723661334401147, 0.2900605462367206, 0.19216258589169644, 0.43446158717075867, 0.49647968125537323, 0.18810400436749986, 0.25819018556056517, 0.18903329453079543, 0.19963567267242788, 0.49695849370327627, 0.19957278285013103, 0.18952249184701553, 0.16959883270673182, 0.17195826515896973, 0.17456133383789896, 0.17894991818874717, 0.2001632955887278, 0.18076833067032516, 0.1801919496025436, 0.17673423108327346, 0.07331777488590141, 0.07597371139676268, 0.07550242018461994, 0.0686966889608247, 0.07783629560363059, 0.06965068769223492, 0.0774147146677513, 0.08273303369044538, 0.0717535021007989]}, "mutation_prompt": null}
{"id": "5a8eb658-40d5-4e71-8197-0c9d4a071c52", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 12 * dim  # Slightly increased population size\n        self.mutation_f = 0.5\n        self.crossover_prob = 0.7\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim)\n        )\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        \n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                if self.used_budget >= self.budget:\n                    break\n\n                # Mutation and recombination\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_f * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial[cross_points] = mutant[cross_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.used_budget += 1\n                if trial_fitness < self.fitness[i]:\n                    self.fitness[i] = trial_fitness\n                    self.population[i] = trial\n\n            # Adaptation of mutation factor and crossover probability\n            self.mutation_f = 0.5 + 0.3 * (np.mean(self.fitness) - np.min(self.fitness)) / (np.max(self.fitness) - np.min(self.fitness) + 1e-9)\n            self.crossover_prob = 0.5 + 0.4 * np.random.rand()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.used_budget >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1", "name": "AdaptiveDifferentialEvolution", "description": "Minor enhancements in population dynamics and adaptive strategies to improve convergence speed while maintaining exploration-exploitation balance.", "configspace": "", "generation": 6, "fitness": 0.26741038570940784, "feedback": "The algorithm AdaptiveDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.22.", "error": "", "parent_id": "9cebabb0-7c93-4e01-9cee-381d5fd74bba", "metadata": {"aucs": [0.7390143408040635, 0.7332664928146613, 0.7236322793039099, 0.7201528314082112, 0.7294233446617788, 0.7095930423778666, 0.7013254094133569, 0.7365101208911217, 0.6878290201665072, 0.4864765952157636, 0.5134126660268215, 0.4951002136678039, 0.5182742792813902, 0.5114159240974936, 0.5327000108340261, 0.5165934286737321, 0.5222914021083855, 0.49792179271545023, 0.13429358872001373, 0.11222313480070589, 0.1070935223191829, 0.12241339472718593, 0.15125043569897456, 0.11387251553838706, 0.13178237379973612, 0.11761735223257441, 0.11664000108303318, 0.10907392287790807, 0.1091911064595017, 0.09911353070278839, 0.11841817180700509, 0.10938936156658985, 0.10851555954582959, 0.11417166596594774, 0.10865465121806961, 0.10787583513582466, 0.9307847314245579, 0.9335361408611745, 0.933721362013357, 0.9465534804284453, 0.9470974312080103, 0.9450296014095237, 0.9448601683485963, 0.9166324759959219, 0.9396261608070412, 0.2877220611545481, 0.30571487304472544, 0.28882606652427034, 0.30333790247468473, 0.30468783853933923, 0.31401645496829644, 0.3172864509026655, 0.322098597966617, 0.3261512120637925, 0.4652644354691754, 0.4149679564406141, 0.5349948581055654, 0.4229847330957518, 0.6475905639622321, 0.5707162471783618, 0.5127628136015205, 0.5377554858576348, 0.5444279210765968, 0.1674423143596372, 0.16475212338673595, 0.1603830505302134, 0.15814544099113592, 0.18228872120856265, 0.18037915312741848, 0.16647929448438314, 0.17429597585383672, 0.16425855577764037, 0.1628609391131315, 0.11064944480981953, 0.1644186201106137, 0.17544363772229377, 0.1792676026087514, 0.1737552470628012, 0.16862736530671396, 0.16471562093598602, 0.20146703139586297, 0.053276226305819185, 0.07907614094745563, 0.05000750696323175, 0.0560083162042625, 0.07027087130073395, 0.05977506051963177, 0.047904399577995305, 0.06498038797489825, 0.06352449994726872, 0.18903961771228128, 0.18511577514283495, 0.14962274789655572, 0.1574544937745994, 0.16736360041233478, 0.1782361186180137, 0.18730140004928375, 0.23284490739524555, 0.20298266411212584, 0.018439391377112813, 0.01830782495045913, 0.006952148576693462, 0.008700926055640434, 0.018137003992797496, 0.012867783350782203, 0.06095918194980254, 0.03417163900454001, 0.050837426228400595, 0.11733724266000167, 0.13244233778271552, 0.10861103099210834, 0.1302836144623779, 0.13634563562832758, 0.12559492344902723, 0.10933831617526613, 0.14454529579710418, 0.10747244078068163, 0.49089367334636613, 0.4760771249436476, 0.47975707981866267, 0.4966815703283268, 0.4929444161569527, 0.5121489448108946, 0.48385234080086525, 0.4802407244094502, 0.5055841766254192, 0.10259790038224403, 0.09680104144463109, 0.09441812107847147, 0.09697154143554143, 0.08970096471506606, 0.08928912577259529, 0.09367213970650123, 0.09749750086295494, 0.08949395882887479, 0.16730473659622114, 0.13390802184733241, 0.1570304522250241, 0.14641098560231225, 0.14323798469582727, 0.15622367774496493, 0.14951065269994612, 0.16802689253231984, 0.1353752060258856, 0.2809828502891816, 0.28664204684749794, 0.282979608844543, 0.2575926633790415, 0.2780016212073676, 0.2842509538028678, 0.3027557385688865, 0.31044241836004627, 0.3100943846595794, 0.18874717007632147, 0.20248349232779927, 0.21448877503428865, 0.1926323399513855, 0.19615405694293442, 0.20233269226583817, 0.2318657903323711, 0.23098682300334739, 0.20843300179167268, 0.1737043375860592, 0.1826437424409656, 0.19454567131676237, 0.1862929782216789, 0.1864140469957185, 0.21232380215665014, 0.19156435934016425, 0.19779298583279548, 0.18812528313304733, 0.1857021306706108, 0.18615182866115176, 0.18631920829712267, 0.18820885640349283, 0.19115325528326998, 0.18873716224654347, 0.19399986414716885, 0.19084072035780864, 0.2006206409012513, 0.16491630997108153, 0.4209154239559494, 0.5404138368122373, 0.4506556782252553, 0.2719788242060365, 0.39606612995079404, 0.48529986440536255, 0.31885805918664745, 0.21891930043835606, 0.39069993555093285, 0.18384828716955193, 0.19108371472402763, 0.27581474766166936, 0.1871617961551123, 0.19530148165262295, 0.2020031347797211, 0.20084999152210858, 0.20751587148038697, 0.1829027585676709, 0.176934782334631, 0.18199076734215025, 0.1998240832607283, 0.1950420721908629, 0.19841252781168472, 0.18656748095575193, 0.17989904249543565, 0.18845124285155967, 0.06821668696182259, 0.07352522457544364, 0.07228225390981335, 0.07795636559421348, 0.07231431600721971, 0.08472519043100923, 0.08105996140747174, 0.0753774128183402, 0.06877011831532476]}, "mutation_prompt": null}
{"id": "686e5765-66bd-4023-bb8f-797cd3285c74", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 10 * dim\n        self.population_size = self.initial_population_size\n        self.mutation_f = 0.5\n        self.crossover_prob = 0.7\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim)\n        )\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        \n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                if self.used_budget >= self.budget:\n                    break\n\n                # Mutation and recombination\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_f * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial[cross_points] = mutant[cross_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.used_budget += 1\n                if trial_fitness < self.fitness[i]:\n                    self.fitness[i] = trial_fitness\n                    self.population[i] = trial\n\n            # Adaptive mechanisms\n            if self.used_budget > self.budget * 0.5 and self.population_size > self.dim:\n                self.population_size = int(self.initial_population_size / 2)\n\n            # Adaptation of mutation factor and crossover probability\n            self.mutation_f = 0.5 + 0.3 * np.random.rand()\n            self.crossover_prob = 0.5 + 0.4 * np.random.rand()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.used_budget >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1", "name": "AdaptiveDifferentialEvolution", "description": "An Adaptive Differential Evolution algorithm enhanced with dynamic population size adjustment and a more sophisticated crossover strategy to improve convergence speed.", "configspace": "", "generation": 7, "fitness": 0.3068389578740777, "feedback": "The algorithm AdaptiveDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.23.", "error": "", "parent_id": "9cebabb0-7c93-4e01-9cee-381d5fd74bba", "metadata": {"aucs": [0.7649530760233154, 0.7672203135695314, 0.7425091083534923, 0.7466124230890963, 0.7704599926457998, 0.7545584238429436, 0.7607524557865303, 0.7452759414992235, 0.7480973398464614, 0.5862065060770814, 0.5825938692348882, 0.5860768603755706, 0.5884050674615322, 0.5674125077060967, 0.5826435901385849, 0.5951042015179475, 0.6032313272244649, 0.5731672465217614, 0.25194592521131665, 0.1676756158856184, 0.26291580523412994, 0.2600503255878519, 0.17959807225069402, 0.2335825331252055, 0.2426249825633744, 0.3098139619975633, 0.2238814093442566, 0.16512111046391276, 0.21525969008541834, 0.19464188362095924, 0.12433287421253714, 0.16938508364746163, 0.18976455925568758, 0.13245017086615973, 0.1914663153843057, 0.1874239908218731, 0.9382511363254415, 0.9427002108554231, 0.9335298663510166, 0.9735453086833011, 0.9716724136429433, 0.9510382502908014, 0.9634134672229929, 0.9509589054801365, 0.9258879750336196, 0.3488179661700227, 0.3938629525946634, 0.4347726549811002, 0.4192564353073116, 0.389892254250635, 0.39604469148062593, 0.42641372566848945, 0.4198347262636978, 0.4153207613767891, 0.4290968639230195, 0.5501128315873807, 0.5279342473536783, 0.5823625292882533, 0.5890925402731175, 0.5613742528251338, 0.5809233736272427, 0.5916647914898385, 0.5784694622656943, 0.21674247876611485, 0.18909305362696527, 0.1798032830302967, 0.15696316364485352, 0.1794543951235008, 0.18877119059253666, 0.3004394879386265, 0.2183158139879512, 0.2014575293460571, 0.16751679858993596, 0.1567386612593329, 0.21409862242562416, 0.24158310574334418, 0.2001879571817049, 0.2491357919562368, 0.23606130039657836, 0.2138807332293885, 0.19371853333011013, 0.10317564745716923, 0.08467517496480015, 0.09389911343643675, 0.09573396864087969, 0.07486365299407793, 0.0442967807760688, 0.12878722553210498, 0.0964958657847026, 0.07909484892663587, 0.23590099351112526, 0.20216297112133585, 0.20882497179331172, 0.21456010145039728, 0.20432566242871153, 0.12994546971771215, 0.2511321390500115, 0.2046752316748388, 0.2556081827349247, 0.04524643133393491, 0.03069074890312329, 0.06178105905539266, 0.0699604123885581, 0.04415075947763236, 0.03450183732339096, 0.05304536553524963, 0.08212001961877358, 0.02319607651683253, 0.1588741206119405, 0.16554565624524453, 0.1504714197556989, 0.18339339349809358, 0.15915080336276188, 0.17621457723474965, 0.15410642103848982, 0.14627687511898313, 0.1591600706554931, 0.5436354200512152, 0.5341545209678712, 0.5241850698803925, 0.5599272364565837, 0.5259057857779712, 0.5062025183429466, 0.5395204763904666, 0.5365040376452355, 0.5278764559093689, 0.08535298729770857, 0.09148956013510867, 0.10171053662853569, 0.11574511432253998, 0.10563633885824852, 0.11188308205140507, 0.115776251817583, 0.10097361304176866, 0.09042796994295366, 0.14880949890428163, 0.1325934670430281, 0.19583144394655738, 0.12493560537378257, 0.18502724360352996, 0.12882282471558337, 0.13515223906191365, 0.12827721213156107, 0.14236695678275868, 0.3122690889056031, 0.34125131901950245, 0.3189119476463479, 0.31728298209870665, 0.3414408983994017, 0.33979007787767723, 0.3514442661665945, 0.39367957216627925, 0.369656070988143, 0.23198347831140986, 0.22829913043231886, 0.22921597609444966, 0.251120787788886, 0.24167393698168704, 0.20746485258928837, 0.2437880398264347, 0.25592442959305695, 0.26947644647958024, 0.19400567801085455, 0.19406769423076453, 0.19319049200276806, 0.18174325807884217, 0.18412799391645007, 0.19045283601534158, 0.20894670161571838, 0.19400842451017297, 0.1879639634757112, 0.20264811447264242, 0.19211000342460982, 0.19149845884701777, 0.25017257320491837, 0.22831263511238342, 0.22036662728925271, 0.28072120067988604, 0.28244680866028127, 0.20812711488349644, 0.6408741955124668, 0.19353118249237478, 0.16675563759331347, 0.4976859760084008, 0.4892049175611233, 0.5434692771636185, 0.29479481011032405, 0.358640379822735, 0.35862456986207325, 0.192162745419158, 0.487149173780581, 0.5463893453837013, 0.43940400451011496, 0.2755967916157974, 0.18925599111268154, 0.19963567301018081, 0.5414709206077926, 0.19957285232578448, 0.18952249184701553, 0.17765474681583415, 0.17378881812013147, 0.17786551162129505, 0.17920587662617038, 0.2001632955887278, 0.18076833067032516, 0.1801919496025436, 0.1761995299275586, 0.07741636929535567, 0.0830005357116641, 0.07952662108109276, 0.07459185689412862, 0.07674689102508525, 0.06884074856563571, 0.07857791403614434, 0.08405295860230999, 0.0731095590764087]}, "mutation_prompt": null}
{"id": "7ebd097b-a20b-4108-a080-3518e262b1e8", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 10 * dim\n        self.population_size = self.initial_population_size\n        self.mutation_f = 0.5\n        self.crossover_prob = 0.7\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim)\n        )\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        \n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                if self.used_budget >= self.budget:\n                    break\n\n                # Mutation and recombination\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_f * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial[cross_points] = mutant[cross_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.used_budget += 1\n                if trial_fitness < self.fitness[i]:\n                    self.fitness[i] = trial_fitness\n                    self.population[i] = trial\n\n            # Adaptive mechanisms\n            if self.used_budget > self.budget * 0.5 and self.population_size > self.dim:\n                self.population_size = int(self.initial_population_size / 2)\n\n            # Adaptation of mutation factor and crossover probability\n            self.mutation_f = 0.5 + 0.3 * np.random.rand()\n            self.crossover_prob = 0.5 + 0.4 * np.random.rand()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.used_budget >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1", "name": "AdaptiveDifferentialEvolution", "description": "An Adaptive Differential Evolution algorithm enhanced with dynamic population size adjustment and a more sophisticated crossover strategy to improve convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "686e5765-66bd-4023-bb8f-797cd3285c74", "metadata": {"aucs": [0.7649530760233154, 0.7672203135695314, 0.7425091083534923, 0.7466124230890963, 0.7704599926457998, 0.7545584238429436, 0.7607524557865303, 0.7452759414992235, 0.7480973398464614, 0.5862065060770814, 0.5825938692348882, 0.5860768603755706, 0.5884050674615322, 0.5674125077060967, 0.5826435901385849, 0.5951042015179475, 0.6032313272244649, 0.5731672465217614, 0.25194592521131665, 0.1676756158856184, 0.26291580523412994, 0.2600503255878519, 0.17959807225069402, 0.2335825331252055, 0.2426249825633744, 0.3098139619975633, 0.2238814093442566, 0.16512111046391276, 0.21525969008541834, 0.19464188362095924, 0.12433287421253714, 0.16938508364746163, 0.18976455925568758, 0.13245017086615973, 0.1914663153843057, 0.1874239908218731, 0.9382511363254415, 0.9427002108554231, 0.9335298663510166, 0.9735453086833011, 0.9716724136429433, 0.9510382502908014, 0.9634134672229929, 0.9509589054801365, 0.9258879750336196, 0.3488179661700227, 0.3938629525946634, 0.4347726549811002, 0.4192564353073116, 0.389892254250635, 0.39604469148062593, 0.42641372566848945, 0.4198347262636978, 0.4153207613767891, 0.4290968639230195, 0.5501128315873807, 0.5279342473536783, 0.5823625292882533, 0.5890925402731175, 0.5613742528251338, 0.5809233736272427, 0.5916647914898385, 0.5784694622656943, 0.21674247876611485, 0.18909305362696527, 0.1798032830302967, 0.15696316364485352, 0.1794543951235008, 0.18877119059253666, 0.3004394879386265, 0.2183158139879512, 0.2014575293460571, 0.16751679858993596, 0.1567386612593329, 0.21409862242562416, 0.24158310574334418, 0.2001879571817049, 0.2491357919562368, 0.23606130039657836, 0.2138807332293885, 0.19371853333011013, 0.10317564745716923, 0.08467517496480015, 0.09389911343643675, 0.09573396864087969, 0.07486365299407793, 0.0442967807760688, 0.12878722553210498, 0.0964958657847026, 0.07909484892663587, 0.23590099351112526, 0.20216297112133585, 0.20882497179331172, 0.21456010145039728, 0.20432566242871153, 0.12994546971771215, 0.2511321390500115, 0.2046752316748388, 0.2556081827349247, 0.04524643133393491, 0.03069074890312329, 0.06178105905539266, 0.0699604123885581, 0.04415075947763236, 0.03450183732339096, 0.05304536553524963, 0.08212001961877358, 0.02319607651683253, 0.1588741206119405, 0.16554565624524453, 0.1504714197556989, 0.18339339349809358, 0.15915080336276188, 0.17621457723474965, 0.15410642103848982, 0.14627687511898313, 0.1591600706554931, 0.5436354200512152, 0.5341545209678712, 0.5241850698803925, 0.5599272364565837, 0.5259057857779712, 0.5062025183429466, 0.5395204763904666, 0.5365040376452355, 0.5278764559093689, 0.08535298729770857, 0.09148956013510867, 0.10171053662853569, 0.11574511432253998, 0.10563633885824852, 0.11188308205140507, 0.115776251817583, 0.10097361304176866, 0.09042796994295366, 0.14880949890428163, 0.1325934670430281, 0.19583144394655738, 0.12493560537378257, 0.18502724360352996, 0.12882282471558337, 0.13515223906191365, 0.12827721213156107, 0.14236695678275868, 0.3122690889056031, 0.34125131901950245, 0.3189119476463479, 0.31728298209870665, 0.3414408983994017, 0.33979007787767723, 0.3514442661665945, 0.39367957216627925, 0.369656070988143, 0.23198347831140986, 0.22829913043231886, 0.22921597609444966, 0.251120787788886, 0.24167393698168704, 0.20746485258928837, 0.2437880398264347, 0.25592442959305695, 0.26947644647958024, 0.19400567801085455, 0.19406769423076453, 0.19319049200276806, 0.18174325807884217, 0.18412799391645007, 0.19045283601534158, 0.20894670161571838, 0.19400842451017297, 0.1879639634757112, 0.20264811447264242, 0.19211000342460982, 0.19149845884701777, 0.25017257320491837, 0.22831263511238342, 0.22036662728925271, 0.28072120067988604, 0.28244680866028127, 0.20812711488349644, 0.6408741955124668, 0.19353118249237478, 0.16675563759331347, 0.4976859760084008, 0.4892049175611233, 0.5434692771636185, 0.29479481011032405, 0.358640379822735, 0.35862456986207325, 0.192162745419158, 0.487149173780581, 0.5463893453837013, 0.43940400451011496, 0.2755967916157974, 0.18925599111268154, 0.19963567301018081, 0.5414709206077926, 0.19957285232578448, 0.18952249184701553, 0.17765474681583415, 0.17378881812013147, 0.17786551162129505, 0.17920587662617038, 0.2001632955887278, 0.18076833067032516, 0.1801919496025436, 0.1761995299275586, 0.07741636929535567, 0.0830005357116641, 0.07952662108109276, 0.07459185689412862, 0.07674689102508525, 0.06884074856563571, 0.07857791403614434, 0.08405295860230999, 0.0731095590764087]}, "mutation_prompt": null}
{"id": "933c0e5e-b3f4-41dd-a799-859c09a942cc", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 10 * dim\n        self.population_size = self.initial_population_size\n        self.mutation_f = 0.5\n        self.crossover_prob = 0.7\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim)\n        )\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        \n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                if self.used_budget >= self.budget:\n                    break\n\n                # Mutation and recombination\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_f * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial[cross_points] = mutant[cross_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.used_budget += 1\n                if trial_fitness < self.fitness[i]:\n                    self.fitness[i] = trial_fitness\n                    self.population[i] = trial\n\n            # Adaptive mechanisms\n            if self.used_budget > self.budget * 0.5 and self.population_size > self.dim:\n                self.population_size = int(self.initial_population_size / 2)\n\n            # Adaptation of mutation factor and crossover probability\n            self.mutation_f = 0.5 + 0.3 * np.random.rand()\n            self.crossover_prob = 0.5 + 0.4 * np.random.rand()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.used_budget >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1", "name": "AdaptiveDifferentialEvolution", "description": "An Adaptive Differential Evolution algorithm enhanced with dynamic population size adjustment and a more sophisticated crossover strategy to improve convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "686e5765-66bd-4023-bb8f-797cd3285c74", "metadata": {"aucs": [0.7649530760233154, 0.7672203135695314, 0.7425091083534923, 0.7466124230890963, 0.7704599926457998, 0.7545584238429436, 0.7607524557865303, 0.7452759414992235, 0.7480973398464614, 0.5862065060770814, 0.5825938692348882, 0.5860768603755706, 0.5884050674615322, 0.5674125077060967, 0.5826435901385849, 0.5951042015179475, 0.6032313272244649, 0.5731672465217614, 0.25194592521131665, 0.1676756158856184, 0.26291580523412994, 0.2600503255878519, 0.17959807225069402, 0.2335825331252055, 0.2426249825633744, 0.3098139619975633, 0.2238814093442566, 0.16512111046391276, 0.21525969008541834, 0.19464188362095924, 0.12433287421253714, 0.16938508364746163, 0.18976455925568758, 0.13245017086615973, 0.1914663153843057, 0.1874239908218731, 0.9382511363254415, 0.9427002108554231, 0.9335298663510166, 0.9735453086833011, 0.9716724136429433, 0.9510382502908014, 0.9634134672229929, 0.9509589054801365, 0.9258879750336196, 0.3488179661700227, 0.3938629525946634, 0.4347726549811002, 0.4192564353073116, 0.389892254250635, 0.39604469148062593, 0.42641372566848945, 0.4198347262636978, 0.4153207613767891, 0.4290968639230195, 0.5501128315873807, 0.5279342473536783, 0.5823625292882533, 0.5890925402731175, 0.5613742528251338, 0.5809233736272427, 0.5916647914898385, 0.5784694622656943, 0.21674247876611485, 0.18909305362696527, 0.1798032830302967, 0.15696316364485352, 0.1794543951235008, 0.18877119059253666, 0.3004394879386265, 0.2183158139879512, 0.2014575293460571, 0.16751679858993596, 0.1567386612593329, 0.21409862242562416, 0.24158310574334418, 0.2001879571817049, 0.2491357919562368, 0.23606130039657836, 0.2138807332293885, 0.19371853333011013, 0.10317564745716923, 0.08467517496480015, 0.09389911343643675, 0.09573396864087969, 0.07486365299407793, 0.0442967807760688, 0.12878722553210498, 0.0964958657847026, 0.07909484892663587, 0.23590099351112526, 0.20216297112133585, 0.20882497179331172, 0.21456010145039728, 0.20432566242871153, 0.12994546971771215, 0.2511321390500115, 0.2046752316748388, 0.2556081827349247, 0.04524643133393491, 0.03069074890312329, 0.06178105905539266, 0.0699604123885581, 0.04415075947763236, 0.03450183732339096, 0.05304536553524963, 0.08212001961877358, 0.02319607651683253, 0.1588741206119405, 0.16554565624524453, 0.1504714197556989, 0.18339339349809358, 0.15915080336276188, 0.17621457723474965, 0.15410642103848982, 0.14627687511898313, 0.1591600706554931, 0.5436354200512152, 0.5341545209678712, 0.5241850698803925, 0.5599272364565837, 0.5259057857779712, 0.5062025183429466, 0.5395204763904666, 0.5365040376452355, 0.5278764559093689, 0.08535298729770857, 0.09148956013510867, 0.10171053662853569, 0.11574511432253998, 0.10563633885824852, 0.11188308205140507, 0.115776251817583, 0.10097361304176866, 0.09042796994295366, 0.14880949890428163, 0.1325934670430281, 0.19583144394655738, 0.12493560537378257, 0.18502724360352996, 0.12882282471558337, 0.13515223906191365, 0.12827721213156107, 0.14236695678275868, 0.3122690889056031, 0.34125131901950245, 0.3189119476463479, 0.31728298209870665, 0.3414408983994017, 0.33979007787767723, 0.3514442661665945, 0.39367957216627925, 0.369656070988143, 0.23198347831140986, 0.22829913043231886, 0.22921597609444966, 0.251120787788886, 0.24167393698168704, 0.20746485258928837, 0.2437880398264347, 0.25592442959305695, 0.26947644647958024, 0.19400567801085455, 0.19406769423076453, 0.19319049200276806, 0.18174325807884217, 0.18412799391645007, 0.19045283601534158, 0.20894670161571838, 0.19400842451017297, 0.1879639634757112, 0.20264811447264242, 0.19211000342460982, 0.19149845884701777, 0.25017257320491837, 0.22831263511238342, 0.22036662728925271, 0.28072120067988604, 0.28244680866028127, 0.20812711488349644, 0.6408741955124668, 0.19353118249237478, 0.16675563759331347, 0.4976859760084008, 0.4892049175611233, 0.5434692771636185, 0.29479481011032405, 0.358640379822735, 0.35862456986207325, 0.192162745419158, 0.487149173780581, 0.5463893453837013, 0.43940400451011496, 0.2755967916157974, 0.18925599111268154, 0.19963567301018081, 0.5414709206077926, 0.19957285232578448, 0.18952249184701553, 0.17765474681583415, 0.17378881812013147, 0.17786551162129505, 0.17920587662617038, 0.2001632955887278, 0.18076833067032516, 0.1801919496025436, 0.1761995299275586, 0.07741636929535567, 0.0830005357116641, 0.07952662108109276, 0.07459185689412862, 0.07674689102508525, 0.06884074856563571, 0.07857791403614434, 0.08405295860230999, 0.0731095590764087]}, "mutation_prompt": null}
{"id": "23bb8bdd-cffb-432d-9caa-0149dd71a5f3", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 10 * dim\n        self.population_size = self.initial_population_size\n        self.mutation_f = 0.5\n        self.crossover_prob = 0.7\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim)\n        )\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        \n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                if self.used_budget >= self.budget:\n                    break\n\n                # Mutation and recombination\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_f * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial[cross_points] = mutant[cross_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.used_budget += 1\n                if trial_fitness < self.fitness[i]:\n                    self.fitness[i] = trial_fitness\n                    self.population[i] = trial\n\n            # Adaptive mechanisms\n            if self.used_budget > self.budget * 0.5 and self.population_size > self.dim:\n                self.population_size = int(self.initial_population_size / 2)\n\n            # Adaptation of mutation factor and crossover probability\n            self.mutation_f = 0.5 + 0.3 * np.random.rand()\n            self.crossover_prob = 0.5 + 0.4 * np.random.rand()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.used_budget >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1", "name": "AdaptiveDifferentialEvolution", "description": "An Adaptive Differential Evolution algorithm enhanced with dynamic population size adjustment and a more sophisticated crossover strategy to improve convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "686e5765-66bd-4023-bb8f-797cd3285c74", "metadata": {"aucs": [0.7649530760233154, 0.7672203135695314, 0.7425091083534923, 0.7466124230890963, 0.7704599926457998, 0.7545584238429436, 0.7607524557865303, 0.7452759414992235, 0.7480973398464614, 0.5862065060770814, 0.5825938692348882, 0.5860768603755706, 0.5884050674615322, 0.5674125077060967, 0.5826435901385849, 0.5951042015179475, 0.6032313272244649, 0.5731672465217614, 0.25194592521131665, 0.1676756158856184, 0.26291580523412994, 0.2600503255878519, 0.17959807225069402, 0.2335825331252055, 0.2426249825633744, 0.3098139619975633, 0.2238814093442566, 0.16512111046391276, 0.21525969008541834, 0.19464188362095924, 0.12433287421253714, 0.16938508364746163, 0.18976455925568758, 0.13245017086615973, 0.1914663153843057, 0.1874239908218731, 0.9382511363254415, 0.9427002108554231, 0.9335298663510166, 0.9735453086833011, 0.9716724136429433, 0.9510382502908014, 0.9634134672229929, 0.9509589054801365, 0.9258879750336196, 0.3488179661700227, 0.3938629525946634, 0.4347726549811002, 0.4192564353073116, 0.389892254250635, 0.39604469148062593, 0.42641372566848945, 0.4198347262636978, 0.4153207613767891, 0.4290968639230195, 0.5501128315873807, 0.5279342473536783, 0.5823625292882533, 0.5890925402731175, 0.5613742528251338, 0.5809233736272427, 0.5916647914898385, 0.5784694622656943, 0.21674247876611485, 0.18909305362696527, 0.1798032830302967, 0.15696316364485352, 0.1794543951235008, 0.18877119059253666, 0.3004394879386265, 0.2183158139879512, 0.2014575293460571, 0.16751679858993596, 0.1567386612593329, 0.21409862242562416, 0.24158310574334418, 0.2001879571817049, 0.2491357919562368, 0.23606130039657836, 0.2138807332293885, 0.19371853333011013, 0.10317564745716923, 0.08467517496480015, 0.09389911343643675, 0.09573396864087969, 0.07486365299407793, 0.0442967807760688, 0.12878722553210498, 0.0964958657847026, 0.07909484892663587, 0.23590099351112526, 0.20216297112133585, 0.20882497179331172, 0.21456010145039728, 0.20432566242871153, 0.12994546971771215, 0.2511321390500115, 0.2046752316748388, 0.2556081827349247, 0.04524643133393491, 0.03069074890312329, 0.06178105905539266, 0.0699604123885581, 0.04415075947763236, 0.03450183732339096, 0.05304536553524963, 0.08212001961877358, 0.02319607651683253, 0.1588741206119405, 0.16554565624524453, 0.1504714197556989, 0.18339339349809358, 0.15915080336276188, 0.17621457723474965, 0.15410642103848982, 0.14627687511898313, 0.1591600706554931, 0.5436354200512152, 0.5341545209678712, 0.5241850698803925, 0.5599272364565837, 0.5259057857779712, 0.5062025183429466, 0.5395204763904666, 0.5365040376452355, 0.5278764559093689, 0.08535298729770857, 0.09148956013510867, 0.10171053662853569, 0.11574511432253998, 0.10563633885824852, 0.11188308205140507, 0.115776251817583, 0.10097361304176866, 0.09042796994295366, 0.14880949890428163, 0.1325934670430281, 0.19583144394655738, 0.12493560537378257, 0.18502724360352996, 0.12882282471558337, 0.13515223906191365, 0.12827721213156107, 0.14236695678275868, 0.3122690889056031, 0.34125131901950245, 0.3189119476463479, 0.31728298209870665, 0.3414408983994017, 0.33979007787767723, 0.3514442661665945, 0.39367957216627925, 0.369656070988143, 0.23198347831140986, 0.22829913043231886, 0.22921597609444966, 0.251120787788886, 0.24167393698168704, 0.20746485258928837, 0.2437880398264347, 0.25592442959305695, 0.26947644647958024, 0.19400567801085455, 0.19406769423076453, 0.19319049200276806, 0.18174325807884217, 0.18412799391645007, 0.19045283601534158, 0.20894670161571838, 0.19400842451017297, 0.1879639634757112, 0.20264811447264242, 0.19211000342460982, 0.19149845884701777, 0.25017257320491837, 0.22831263511238342, 0.22036662728925271, 0.28072120067988604, 0.28244680866028127, 0.20812711488349644, 0.6408741955124668, 0.19353118249237478, 0.16675563759331347, 0.4976859760084008, 0.4892049175611233, 0.5434692771636185, 0.29479481011032405, 0.358640379822735, 0.35862456986207325, 0.192162745419158, 0.487149173780581, 0.5463893453837013, 0.43940400451011496, 0.2755967916157974, 0.18925599111268154, 0.19963567301018081, 0.5414709206077926, 0.19957285232578448, 0.18952249184701553, 0.17765474681583415, 0.17378881812013147, 0.17786551162129505, 0.17920587662617038, 0.2001632955887278, 0.18076833067032516, 0.1801919496025436, 0.1761995299275586, 0.07741636929535567, 0.0830005357116641, 0.07952662108109276, 0.07459185689412862, 0.07674689102508525, 0.06884074856563571, 0.07857791403614434, 0.08405295860230999, 0.0731095590764087]}, "mutation_prompt": null}
{"id": "e598e457-67c3-443b-80dd-d6018e4df9e3", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 10 * dim\n        self.population_size = self.initial_population_size\n        self.mutation_f = 0.5\n        self.crossover_prob = 0.7\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim)\n        )\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        \n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                if self.used_budget >= self.budget:\n                    break\n\n                # Mutation and recombination\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_f * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial[cross_points] = mutant[cross_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.used_budget += 1\n                if trial_fitness < self.fitness[i]:\n                    self.fitness[i] = trial_fitness\n                    self.population[i] = trial\n\n            # Adaptive mechanisms\n            if self.used_budget > self.budget * 0.5 and self.population_size > self.dim:\n                self.population_size = int(self.initial_population_size / 2)\n\n            # Adaptation of mutation factor and crossover probability\n            self.mutation_f = 0.5 + 0.3 * np.random.rand()\n            self.crossover_prob = 0.5 + 0.4 * np.random.rand()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.used_budget >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1", "name": "AdaptiveDifferentialEvolution", "description": "An Adaptive Differential Evolution algorithm enhanced with dynamic population size adjustment and a more sophisticated crossover strategy to improve convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "686e5765-66bd-4023-bb8f-797cd3285c74", "metadata": {"aucs": [0.7649530760233154, 0.7672203135695314, 0.7425091083534923, 0.7466124230890963, 0.7704599926457998, 0.7545584238429436, 0.7607524557865303, 0.7452759414992235, 0.7480973398464614, 0.5862065060770814, 0.5825938692348882, 0.5860768603755706, 0.5884050674615322, 0.5674125077060967, 0.5826435901385849, 0.5951042015179475, 0.6032313272244649, 0.5731672465217614, 0.25194592521131665, 0.1676756158856184, 0.26291580523412994, 0.2600503255878519, 0.17959807225069402, 0.2335825331252055, 0.2426249825633744, 0.3098139619975633, 0.2238814093442566, 0.16512111046391276, 0.21525969008541834, 0.19464188362095924, 0.12433287421253714, 0.16938508364746163, 0.18976455925568758, 0.13245017086615973, 0.1914663153843057, 0.1874239908218731, 0.9382511363254415, 0.9427002108554231, 0.9335298663510166, 0.9735453086833011, 0.9716724136429433, 0.9510382502908014, 0.9634134672229929, 0.9509589054801365, 0.9258879750336196, 0.3488179661700227, 0.3938629525946634, 0.4347726549811002, 0.4192564353073116, 0.389892254250635, 0.39604469148062593, 0.42641372566848945, 0.4198347262636978, 0.4153207613767891, 0.4290968639230195, 0.5501128315873807, 0.5279342473536783, 0.5823625292882533, 0.5890925402731175, 0.5613742528251338, 0.5809233736272427, 0.5916647914898385, 0.5784694622656943, 0.21674247876611485, 0.18909305362696527, 0.1798032830302967, 0.15696316364485352, 0.1794543951235008, 0.18877119059253666, 0.3004394879386265, 0.2183158139879512, 0.2014575293460571, 0.16751679858993596, 0.1567386612593329, 0.21409862242562416, 0.24158310574334418, 0.2001879571817049, 0.2491357919562368, 0.23606130039657836, 0.2138807332293885, 0.19371853333011013, 0.10317564745716923, 0.08467517496480015, 0.09389911343643675, 0.09573396864087969, 0.07486365299407793, 0.0442967807760688, 0.12878722553210498, 0.0964958657847026, 0.07909484892663587, 0.23590099351112526, 0.20216297112133585, 0.20882497179331172, 0.21456010145039728, 0.20432566242871153, 0.12994546971771215, 0.2511321390500115, 0.2046752316748388, 0.2556081827349247, 0.04524643133393491, 0.03069074890312329, 0.06178105905539266, 0.0699604123885581, 0.04415075947763236, 0.03450183732339096, 0.05304536553524963, 0.08212001961877358, 0.02319607651683253, 0.1588741206119405, 0.16554565624524453, 0.1504714197556989, 0.18339339349809358, 0.15915080336276188, 0.17621457723474965, 0.15410642103848982, 0.14627687511898313, 0.1591600706554931, 0.5436354200512152, 0.5341545209678712, 0.5241850698803925, 0.5599272364565837, 0.5259057857779712, 0.5062025183429466, 0.5395204763904666, 0.5365040376452355, 0.5278764559093689, 0.08535298729770857, 0.09148956013510867, 0.10171053662853569, 0.11574511432253998, 0.10563633885824852, 0.11188308205140507, 0.115776251817583, 0.10097361304176866, 0.09042796994295366, 0.14880949890428163, 0.1325934670430281, 0.19583144394655738, 0.12493560537378257, 0.18502724360352996, 0.12882282471558337, 0.13515223906191365, 0.12827721213156107, 0.14236695678275868, 0.3122690889056031, 0.34125131901950245, 0.3189119476463479, 0.31728298209870665, 0.3414408983994017, 0.33979007787767723, 0.3514442661665945, 0.39367957216627925, 0.369656070988143, 0.23198347831140986, 0.22829913043231886, 0.22921597609444966, 0.251120787788886, 0.24167393698168704, 0.20746485258928837, 0.2437880398264347, 0.25592442959305695, 0.26947644647958024, 0.19400567801085455, 0.19406769423076453, 0.19319049200276806, 0.18174325807884217, 0.18412799391645007, 0.19045283601534158, 0.20894670161571838, 0.19400842451017297, 0.1879639634757112, 0.20264811447264242, 0.19211000342460982, 0.19149845884701777, 0.25017257320491837, 0.22831263511238342, 0.22036662728925271, 0.28072120067988604, 0.28244680866028127, 0.20812711488349644, 0.6408741955124668, 0.19353118249237478, 0.16675563759331347, 0.4976859760084008, 0.4892049175611233, 0.5434692771636185, 0.29479481011032405, 0.358640379822735, 0.35862456986207325, 0.192162745419158, 0.487149173780581, 0.5463893453837013, 0.43940400451011496, 0.2755967916157974, 0.18925599111268154, 0.19963567301018081, 0.5414709206077926, 0.19957285232578448, 0.18952249184701553, 0.17765474681583415, 0.17378881812013147, 0.17786551162129505, 0.17920587662617038, 0.2001632955887278, 0.18076833067032516, 0.1801919496025436, 0.1761995299275586, 0.07741636929535567, 0.0830005357116641, 0.07952662108109276, 0.07459185689412862, 0.07674689102508525, 0.06884074856563571, 0.07857791403614434, 0.08405295860230999, 0.0731095590764087]}, "mutation_prompt": null}
{"id": "e43fa6ea-a58e-4806-b16d-f4195d17b7e9", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 10 * dim\n        self.population_size = self.initial_population_size\n        self.mutation_f = 0.5\n        self.crossover_prob = 0.7\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim)\n        )\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        \n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                if self.used_budget >= self.budget:\n                    break\n\n                # Mutation and recombination\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_f * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial[cross_points] = mutant[cross_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.used_budget += 1\n                if trial_fitness < self.fitness[i]:\n                    self.fitness[i] = trial_fitness\n                    self.population[i] = trial\n\n            # Adaptive mechanisms\n            if self.used_budget > self.budget * 0.5 and self.population_size > self.dim:\n                self.population_size = int(self.initial_population_size / 2)\n\n            # Adaptation of mutation factor and crossover probability\n            self.mutation_f = 0.5 + 0.3 * np.random.rand()\n            self.crossover_prob = 0.5 + 0.4 * np.random.rand()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.used_budget >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1", "name": "AdaptiveDifferentialEvolution", "description": "An Adaptive Differential Evolution algorithm enhanced with dynamic population size adjustment and a more sophisticated crossover strategy to improve convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "686e5765-66bd-4023-bb8f-797cd3285c74", "metadata": {"aucs": [0.7649530760233154, 0.7672203135695314, 0.7425091083534923, 0.7466124230890963, 0.7704599926457998, 0.7545584238429436, 0.7607524557865303, 0.7452759414992235, 0.7480973398464614, 0.5862065060770814, 0.5825938692348882, 0.5860768603755706, 0.5884050674615322, 0.5674125077060967, 0.5826435901385849, 0.5951042015179475, 0.6032313272244649, 0.5731672465217614, 0.25194592521131665, 0.1676756158856184, 0.26291580523412994, 0.2600503255878519, 0.17959807225069402, 0.2335825331252055, 0.2426249825633744, 0.3098139619975633, 0.2238814093442566, 0.16512111046391276, 0.21525969008541834, 0.19464188362095924, 0.12433287421253714, 0.16938508364746163, 0.18976455925568758, 0.13245017086615973, 0.1914663153843057, 0.1874239908218731, 0.9382511363254415, 0.9427002108554231, 0.9335298663510166, 0.9735453086833011, 0.9716724136429433, 0.9510382502908014, 0.9634134672229929, 0.9509589054801365, 0.9258879750336196, 0.3488179661700227, 0.3938629525946634, 0.4347726549811002, 0.4192564353073116, 0.389892254250635, 0.39604469148062593, 0.42641372566848945, 0.4198347262636978, 0.4153207613767891, 0.4290968639230195, 0.5501128315873807, 0.5279342473536783, 0.5823625292882533, 0.5890925402731175, 0.5613742528251338, 0.5809233736272427, 0.5916647914898385, 0.5784694622656943, 0.21674247876611485, 0.18909305362696527, 0.1798032830302967, 0.15696316364485352, 0.1794543951235008, 0.18877119059253666, 0.3004394879386265, 0.2183158139879512, 0.2014575293460571, 0.16751679858993596, 0.1567386612593329, 0.21409862242562416, 0.24158310574334418, 0.2001879571817049, 0.2491357919562368, 0.23606130039657836, 0.2138807332293885, 0.19371853333011013, 0.10317564745716923, 0.08467517496480015, 0.09389911343643675, 0.09573396864087969, 0.07486365299407793, 0.0442967807760688, 0.12878722553210498, 0.0964958657847026, 0.07909484892663587, 0.23590099351112526, 0.20216297112133585, 0.20882497179331172, 0.21456010145039728, 0.20432566242871153, 0.12994546971771215, 0.2511321390500115, 0.2046752316748388, 0.2556081827349247, 0.04524643133393491, 0.03069074890312329, 0.06178105905539266, 0.0699604123885581, 0.04415075947763236, 0.03450183732339096, 0.05304536553524963, 0.08212001961877358, 0.02319607651683253, 0.1588741206119405, 0.16554565624524453, 0.1504714197556989, 0.18339339349809358, 0.15915080336276188, 0.17621457723474965, 0.15410642103848982, 0.14627687511898313, 0.1591600706554931, 0.5436354200512152, 0.5341545209678712, 0.5241850698803925, 0.5599272364565837, 0.5259057857779712, 0.5062025183429466, 0.5395204763904666, 0.5365040376452355, 0.5278764559093689, 0.08535298729770857, 0.09148956013510867, 0.10171053662853569, 0.11574511432253998, 0.10563633885824852, 0.11188308205140507, 0.115776251817583, 0.10097361304176866, 0.09042796994295366, 0.14880949890428163, 0.1325934670430281, 0.19583144394655738, 0.12493560537378257, 0.18502724360352996, 0.12882282471558337, 0.13515223906191365, 0.12827721213156107, 0.14236695678275868, 0.3122690889056031, 0.34125131901950245, 0.3189119476463479, 0.31728298209870665, 0.3414408983994017, 0.33979007787767723, 0.3514442661665945, 0.39367957216627925, 0.369656070988143, 0.23198347831140986, 0.22829913043231886, 0.22921597609444966, 0.251120787788886, 0.24167393698168704, 0.20746485258928837, 0.2437880398264347, 0.25592442959305695, 0.26947644647958024, 0.19400567801085455, 0.19406769423076453, 0.19319049200276806, 0.18174325807884217, 0.18412799391645007, 0.19045283601534158, 0.20894670161571838, 0.19400842451017297, 0.1879639634757112, 0.20264811447264242, 0.19211000342460982, 0.19149845884701777, 0.25017257320491837, 0.22831263511238342, 0.22036662728925271, 0.28072120067988604, 0.28244680866028127, 0.20812711488349644, 0.6408741955124668, 0.19353118249237478, 0.16675563759331347, 0.4976859760084008, 0.4892049175611233, 0.5434692771636185, 0.29479481011032405, 0.358640379822735, 0.35862456986207325, 0.192162745419158, 0.487149173780581, 0.5463893453837013, 0.43940400451011496, 0.2755967916157974, 0.18925599111268154, 0.19963567301018081, 0.5414709206077926, 0.19957285232578448, 0.18952249184701553, 0.17765474681583415, 0.17378881812013147, 0.17786551162129505, 0.17920587662617038, 0.2001632955887278, 0.18076833067032516, 0.1801919496025436, 0.1761995299275586, 0.07741636929535567, 0.0830005357116641, 0.07952662108109276, 0.07459185689412862, 0.07674689102508525, 0.06884074856563571, 0.07857791403614434, 0.08405295860230999, 0.0731095590764087]}, "mutation_prompt": null}
{"id": "a8490391-477f-4534-999d-1e3cb3aebc19", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 10 * dim\n        self.population_size = self.initial_population_size\n        self.mutation_f = 0.5\n        self.crossover_prob = 0.7\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim)\n        )\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        \n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                if self.used_budget >= self.budget:\n                    break\n\n                # Mutation and recombination\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_f * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial[cross_points] = mutant[cross_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.used_budget += 1\n                if trial_fitness < self.fitness[i]:\n                    self.fitness[i] = trial_fitness\n                    self.population[i] = trial\n\n            # Adaptive mechanisms\n            if self.used_budget > self.budget * 0.5 and self.population_size > self.dim:\n                self.population_size = int(self.initial_population_size / 2)\n\n            # Adaptation of mutation factor and crossover probability\n            self.mutation_f = 0.5 + 0.3 * np.random.rand()\n            self.crossover_prob = 0.5 + 0.4 * np.random.rand()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.used_budget >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1", "name": "AdaptiveDifferentialEvolution", "description": "An Adaptive Differential Evolution algorithm enhanced with dynamic population size adjustment and a more sophisticated crossover strategy to improve convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "686e5765-66bd-4023-bb8f-797cd3285c74", "metadata": {"aucs": [0.7649530760233154, 0.7672203135695314, 0.7425091083534923, 0.7466124230890963, 0.7704599926457998, 0.7545584238429436, 0.7607524557865303, 0.7452759414992235, 0.7480973398464614, 0.5862065060770814, 0.5825938692348882, 0.5860768603755706, 0.5884050674615322, 0.5674125077060967, 0.5826435901385849, 0.5951042015179475, 0.6032313272244649, 0.5731672465217614, 0.25194592521131665, 0.1676756158856184, 0.26291580523412994, 0.2600503255878519, 0.17959807225069402, 0.2335825331252055, 0.2426249825633744, 0.3098139619975633, 0.2238814093442566, 0.16512111046391276, 0.21525969008541834, 0.19464188362095924, 0.12433287421253714, 0.16938508364746163, 0.18976455925568758, 0.13245017086615973, 0.1914663153843057, 0.1874239908218731, 0.9382511363254415, 0.9427002108554231, 0.9335298663510166, 0.9735453086833011, 0.9716724136429433, 0.9510382502908014, 0.9634134672229929, 0.9509589054801365, 0.9258879750336196, 0.3488179661700227, 0.3938629525946634, 0.4347726549811002, 0.4192564353073116, 0.389892254250635, 0.39604469148062593, 0.42641372566848945, 0.4198347262636978, 0.4153207613767891, 0.4290968639230195, 0.5501128315873807, 0.5279342473536783, 0.5823625292882533, 0.5890925402731175, 0.5613742528251338, 0.5809233736272427, 0.5916647914898385, 0.5784694622656943, 0.21674247876611485, 0.18909305362696527, 0.1798032830302967, 0.15696316364485352, 0.1794543951235008, 0.18877119059253666, 0.3004394879386265, 0.2183158139879512, 0.2014575293460571, 0.16751679858993596, 0.1567386612593329, 0.21409862242562416, 0.24158310574334418, 0.2001879571817049, 0.2491357919562368, 0.23606130039657836, 0.2138807332293885, 0.19371853333011013, 0.10317564745716923, 0.08467517496480015, 0.09389911343643675, 0.09573396864087969, 0.07486365299407793, 0.0442967807760688, 0.12878722553210498, 0.0964958657847026, 0.07909484892663587, 0.23590099351112526, 0.20216297112133585, 0.20882497179331172, 0.21456010145039728, 0.20432566242871153, 0.12994546971771215, 0.2511321390500115, 0.2046752316748388, 0.2556081827349247, 0.04524643133393491, 0.03069074890312329, 0.06178105905539266, 0.0699604123885581, 0.04415075947763236, 0.03450183732339096, 0.05304536553524963, 0.08212001961877358, 0.02319607651683253, 0.1588741206119405, 0.16554565624524453, 0.1504714197556989, 0.18339339349809358, 0.15915080336276188, 0.17621457723474965, 0.15410642103848982, 0.14627687511898313, 0.1591600706554931, 0.5436354200512152, 0.5341545209678712, 0.5241850698803925, 0.5599272364565837, 0.5259057857779712, 0.5062025183429466, 0.5395204763904666, 0.5365040376452355, 0.5278764559093689, 0.08535298729770857, 0.09148956013510867, 0.10171053662853569, 0.11574511432253998, 0.10563633885824852, 0.11188308205140507, 0.115776251817583, 0.10097361304176866, 0.09042796994295366, 0.14880949890428163, 0.1325934670430281, 0.19583144394655738, 0.12493560537378257, 0.18502724360352996, 0.12882282471558337, 0.13515223906191365, 0.12827721213156107, 0.14236695678275868, 0.3122690889056031, 0.34125131901950245, 0.3189119476463479, 0.31728298209870665, 0.3414408983994017, 0.33979007787767723, 0.3514442661665945, 0.39367957216627925, 0.369656070988143, 0.23198347831140986, 0.22829913043231886, 0.22921597609444966, 0.251120787788886, 0.24167393698168704, 0.20746485258928837, 0.2437880398264347, 0.25592442959305695, 0.26947644647958024, 0.19400567801085455, 0.19406769423076453, 0.19319049200276806, 0.18174325807884217, 0.18412799391645007, 0.19045283601534158, 0.20894670161571838, 0.19400842451017297, 0.1879639634757112, 0.20264811447264242, 0.19211000342460982, 0.19149845884701777, 0.25017257320491837, 0.22831263511238342, 0.22036662728925271, 0.28072120067988604, 0.28244680866028127, 0.20812711488349644, 0.6408741955124668, 0.19353118249237478, 0.16675563759331347, 0.4976859760084008, 0.4892049175611233, 0.5434692771636185, 0.29479481011032405, 0.358640379822735, 0.35862456986207325, 0.192162745419158, 0.487149173780581, 0.5463893453837013, 0.43940400451011496, 0.2755967916157974, 0.18925599111268154, 0.19963567301018081, 0.5414709206077926, 0.19957285232578448, 0.18952249184701553, 0.17765474681583415, 0.17378881812013147, 0.17786551162129505, 0.17920587662617038, 0.2001632955887278, 0.18076833067032516, 0.1801919496025436, 0.1761995299275586, 0.07741636929535567, 0.0830005357116641, 0.07952662108109276, 0.07459185689412862, 0.07674689102508525, 0.06884074856563571, 0.07857791403614434, 0.08405295860230999, 0.0731095590764087]}, "mutation_prompt": null}
{"id": "d6ff0a6b-c9b8-44f0-b39c-567b19591c3e", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 10 * dim\n        self.population_size = self.initial_population_size\n        self.mutation_f = 0.5\n        self.crossover_prob = 0.7\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim)\n        )\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        \n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                if self.used_budget >= self.budget:\n                    break\n\n                # Mutation and recombination\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_f * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial[cross_points] = mutant[cross_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.used_budget += 1\n                if trial_fitness < self.fitness[i]:\n                    self.fitness[i] = trial_fitness\n                    self.population[i] = trial\n\n            # Adaptive mechanisms\n            if self.used_budget > self.budget * 0.5 and self.population_size > self.dim:\n                self.population_size = int(self.initial_population_size / 2)\n\n            # Adaptation of mutation factor and crossover probability\n            self.mutation_f = 0.5 + 0.3 * np.random.rand()\n            self.crossover_prob = 0.5 + 0.4 * np.random.rand()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.used_budget >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1", "name": "AdaptiveDifferentialEvolution", "description": "An Adaptive Differential Evolution algorithm enhanced with dynamic population size adjustment and a more sophisticated crossover strategy to improve convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "686e5765-66bd-4023-bb8f-797cd3285c74", "metadata": {"aucs": [0.7649530760233154, 0.7672203135695314, 0.7425091083534923, 0.7466124230890963, 0.7704599926457998, 0.7545584238429436, 0.7607524557865303, 0.7452759414992235, 0.7480973398464614, 0.5862065060770814, 0.5825938692348882, 0.5860768603755706, 0.5884050674615322, 0.5674125077060967, 0.5826435901385849, 0.5951042015179475, 0.6032313272244649, 0.5731672465217614, 0.25194592521131665, 0.1676756158856184, 0.26291580523412994, 0.2600503255878519, 0.17959807225069402, 0.2335825331252055, 0.2426249825633744, 0.3098139619975633, 0.2238814093442566, 0.16512111046391276, 0.21525969008541834, 0.19464188362095924, 0.12433287421253714, 0.16938508364746163, 0.18976455925568758, 0.13245017086615973, 0.1914663153843057, 0.1874239908218731, 0.9382511363254415, 0.9427002108554231, 0.9335298663510166, 0.9735453086833011, 0.9716724136429433, 0.9510382502908014, 0.9634134672229929, 0.9509589054801365, 0.9258879750336196, 0.3488179661700227, 0.3938629525946634, 0.4347726549811002, 0.4192564353073116, 0.389892254250635, 0.39604469148062593, 0.42641372566848945, 0.4198347262636978, 0.4153207613767891, 0.4290968639230195, 0.5501128315873807, 0.5279342473536783, 0.5823625292882533, 0.5890925402731175, 0.5613742528251338, 0.5809233736272427, 0.5916647914898385, 0.5784694622656943, 0.21674247876611485, 0.18909305362696527, 0.1798032830302967, 0.15696316364485352, 0.1794543951235008, 0.18877119059253666, 0.3004394879386265, 0.2183158139879512, 0.2014575293460571, 0.16751679858993596, 0.1567386612593329, 0.21409862242562416, 0.24158310574334418, 0.2001879571817049, 0.2491357919562368, 0.23606130039657836, 0.2138807332293885, 0.19371853333011013, 0.10317564745716923, 0.08467517496480015, 0.09389911343643675, 0.09573396864087969, 0.07486365299407793, 0.0442967807760688, 0.12878722553210498, 0.0964958657847026, 0.07909484892663587, 0.23590099351112526, 0.20216297112133585, 0.20882497179331172, 0.21456010145039728, 0.20432566242871153, 0.12994546971771215, 0.2511321390500115, 0.2046752316748388, 0.2556081827349247, 0.04524643133393491, 0.03069074890312329, 0.06178105905539266, 0.0699604123885581, 0.04415075947763236, 0.03450183732339096, 0.05304536553524963, 0.08212001961877358, 0.02319607651683253, 0.1588741206119405, 0.16554565624524453, 0.1504714197556989, 0.18339339349809358, 0.15915080336276188, 0.17621457723474965, 0.15410642103848982, 0.14627687511898313, 0.1591600706554931, 0.5436354200512152, 0.5341545209678712, 0.5241850698803925, 0.5599272364565837, 0.5259057857779712, 0.5062025183429466, 0.5395204763904666, 0.5365040376452355, 0.5278764559093689, 0.08535298729770857, 0.09148956013510867, 0.10171053662853569, 0.11574511432253998, 0.10563633885824852, 0.11188308205140507, 0.115776251817583, 0.10097361304176866, 0.09042796994295366, 0.14880949890428163, 0.1325934670430281, 0.19583144394655738, 0.12493560537378257, 0.18502724360352996, 0.12882282471558337, 0.13515223906191365, 0.12827721213156107, 0.14236695678275868, 0.3122690889056031, 0.34125131901950245, 0.3189119476463479, 0.31728298209870665, 0.3414408983994017, 0.33979007787767723, 0.3514442661665945, 0.39367957216627925, 0.369656070988143, 0.23198347831140986, 0.22829913043231886, 0.22921597609444966, 0.251120787788886, 0.24167393698168704, 0.20746485258928837, 0.2437880398264347, 0.25592442959305695, 0.26947644647958024, 0.19400567801085455, 0.19406769423076453, 0.19319049200276806, 0.18174325807884217, 0.18412799391645007, 0.19045283601534158, 0.20894670161571838, 0.19400842451017297, 0.1879639634757112, 0.20264811447264242, 0.19211000342460982, 0.19149845884701777, 0.25017257320491837, 0.22831263511238342, 0.22036662728925271, 0.28072120067988604, 0.28244680866028127, 0.20812711488349644, 0.6408741955124668, 0.19353118249237478, 0.16675563759331347, 0.4976859760084008, 0.4892049175611233, 0.5434692771636185, 0.29479481011032405, 0.358640379822735, 0.35862456986207325, 0.192162745419158, 0.487149173780581, 0.5463893453837013, 0.43940400451011496, 0.2755967916157974, 0.18925599111268154, 0.19963567301018081, 0.5414709206077926, 0.19957285232578448, 0.18952249184701553, 0.17765474681583415, 0.17378881812013147, 0.17786551162129505, 0.17920587662617038, 0.2001632955887278, 0.18076833067032516, 0.1801919496025436, 0.1761995299275586, 0.07741636929535567, 0.0830005357116641, 0.07952662108109276, 0.07459185689412862, 0.07674689102508525, 0.06884074856563571, 0.07857791403614434, 0.08405295860230999, 0.0731095590764087]}, "mutation_prompt": null}
{"id": "a34d1ad2-04ae-4d39-ac47-fb27af6d6d84", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 10 * dim\n        self.population_size = self.initial_population_size\n        self.mutation_f = 0.5\n        self.crossover_prob = 0.7\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim)\n        )\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        \n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                if self.used_budget >= self.budget:\n                    break\n\n                # Mutation and recombination\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_f * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial[cross_points] = mutant[cross_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.used_budget += 1\n                if trial_fitness < self.fitness[i]:\n                    self.fitness[i] = trial_fitness\n                    self.population[i] = trial\n\n            # Adaptive mechanisms\n            if self.used_budget > self.budget * 0.5 and self.population_size > self.dim:\n                self.population_size = int(self.initial_population_size / 2)\n\n            # Adaptation of mutation factor and crossover probability\n            self.mutation_f = 0.5 + 0.3 * np.random.rand()\n            self.crossover_prob = 0.5 + 0.4 * np.random.rand()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.used_budget >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1", "name": "AdaptiveDifferentialEvolution", "description": "An Adaptive Differential Evolution algorithm enhanced with dynamic population size adjustment and a more sophisticated crossover strategy to improve convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "686e5765-66bd-4023-bb8f-797cd3285c74", "metadata": {"aucs": [0.7649530760233154, 0.7672203135695314, 0.7425091083534923, 0.7466124230890963, 0.7704599926457998, 0.7545584238429436, 0.7607524557865303, 0.7452759414992235, 0.7480973398464614, 0.5862065060770814, 0.5825938692348882, 0.5860768603755706, 0.5884050674615322, 0.5674125077060967, 0.5826435901385849, 0.5951042015179475, 0.6032313272244649, 0.5731672465217614, 0.25194592521131665, 0.1676756158856184, 0.26291580523412994, 0.2600503255878519, 0.17959807225069402, 0.2335825331252055, 0.2426249825633744, 0.3098139619975633, 0.2238814093442566, 0.16512111046391276, 0.21525969008541834, 0.19464188362095924, 0.12433287421253714, 0.16938508364746163, 0.18976455925568758, 0.13245017086615973, 0.1914663153843057, 0.1874239908218731, 0.9382511363254415, 0.9427002108554231, 0.9335298663510166, 0.9735453086833011, 0.9716724136429433, 0.9510382502908014, 0.9634134672229929, 0.9509589054801365, 0.9258879750336196, 0.3488179661700227, 0.3938629525946634, 0.4347726549811002, 0.4192564353073116, 0.389892254250635, 0.39604469148062593, 0.42641372566848945, 0.4198347262636978, 0.4153207613767891, 0.4290968639230195, 0.5501128315873807, 0.5279342473536783, 0.5823625292882533, 0.5890925402731175, 0.5613742528251338, 0.5809233736272427, 0.5916647914898385, 0.5784694622656943, 0.21674247876611485, 0.18909305362696527, 0.1798032830302967, 0.15696316364485352, 0.1794543951235008, 0.18877119059253666, 0.3004394879386265, 0.2183158139879512, 0.2014575293460571, 0.16751679858993596, 0.1567386612593329, 0.21409862242562416, 0.24158310574334418, 0.2001879571817049, 0.2491357919562368, 0.23606130039657836, 0.2138807332293885, 0.19371853333011013, 0.10317564745716923, 0.08467517496480015, 0.09389911343643675, 0.09573396864087969, 0.07486365299407793, 0.0442967807760688, 0.12878722553210498, 0.0964958657847026, 0.07909484892663587, 0.23590099351112526, 0.20216297112133585, 0.20882497179331172, 0.21456010145039728, 0.20432566242871153, 0.12994546971771215, 0.2511321390500115, 0.2046752316748388, 0.2556081827349247, 0.04524643133393491, 0.03069074890312329, 0.06178105905539266, 0.0699604123885581, 0.04415075947763236, 0.03450183732339096, 0.05304536553524963, 0.08212001961877358, 0.02319607651683253, 0.1588741206119405, 0.16554565624524453, 0.1504714197556989, 0.18339339349809358, 0.15915080336276188, 0.17621457723474965, 0.15410642103848982, 0.14627687511898313, 0.1591600706554931, 0.5436354200512152, 0.5341545209678712, 0.5241850698803925, 0.5599272364565837, 0.5259057857779712, 0.5062025183429466, 0.5395204763904666, 0.5365040376452355, 0.5278764559093689, 0.08535298729770857, 0.09148956013510867, 0.10171053662853569, 0.11574511432253998, 0.10563633885824852, 0.11188308205140507, 0.115776251817583, 0.10097361304176866, 0.09042796994295366, 0.14880949890428163, 0.1325934670430281, 0.19583144394655738, 0.12493560537378257, 0.18502724360352996, 0.12882282471558337, 0.13515223906191365, 0.12827721213156107, 0.14236695678275868, 0.3122690889056031, 0.34125131901950245, 0.3189119476463479, 0.31728298209870665, 0.3414408983994017, 0.33979007787767723, 0.3514442661665945, 0.39367957216627925, 0.369656070988143, 0.23198347831140986, 0.22829913043231886, 0.22921597609444966, 0.251120787788886, 0.24167393698168704, 0.20746485258928837, 0.2437880398264347, 0.25592442959305695, 0.26947644647958024, 0.19400567801085455, 0.19406769423076453, 0.19319049200276806, 0.18174325807884217, 0.18412799391645007, 0.19045283601534158, 0.20894670161571838, 0.19400842451017297, 0.1879639634757112, 0.20264811447264242, 0.19211000342460982, 0.19149845884701777, 0.25017257320491837, 0.22831263511238342, 0.22036662728925271, 0.28072120067988604, 0.28244680866028127, 0.20812711488349644, 0.6408741955124668, 0.19353118249237478, 0.16675563759331347, 0.4976859760084008, 0.4892049175611233, 0.5434692771636185, 0.29479481011032405, 0.358640379822735, 0.35862456986207325, 0.192162745419158, 0.487149173780581, 0.5463893453837013, 0.43940400451011496, 0.2755967916157974, 0.18925599111268154, 0.19963567301018081, 0.5414709206077926, 0.19957285232578448, 0.18952249184701553, 0.17765474681583415, 0.17378881812013147, 0.17786551162129505, 0.17920587662617038, 0.2001632955887278, 0.18076833067032516, 0.1801919496025436, 0.1761995299275586, 0.07741636929535567, 0.0830005357116641, 0.07952662108109276, 0.07459185689412862, 0.07674689102508525, 0.06884074856563571, 0.07857791403614434, 0.08405295860230999, 0.0731095590764087]}, "mutation_prompt": null}
{"id": "e455baa8-18ba-41b5-a8ba-01a945c290b2", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 10 * dim\n        self.population_size = self.initial_population_size\n        self.mutation_f = 0.5\n        self.crossover_prob = 0.7\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim)\n        )\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        \n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                if self.used_budget >= self.budget:\n                    break\n\n                # Mutation and recombination\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_f * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial[cross_points] = mutant[cross_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.used_budget += 1\n                if trial_fitness < self.fitness[i]:\n                    self.fitness[i] = trial_fitness\n                    self.population[i] = trial\n\n            # Adaptive mechanisms\n            if self.used_budget > self.budget * 0.5 and self.population_size > self.dim:\n                self.population_size = int(self.initial_population_size / 2)\n\n            # Adaptation of mutation factor and crossover probability\n            self.mutation_f = 0.5 + 0.3 * np.random.rand()\n            self.crossover_prob = 0.5 + 0.4 * np.random.rand()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.used_budget >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1", "name": "AdaptiveDifferentialEvolution", "description": "An Adaptive Differential Evolution algorithm enhanced with dynamic population size adjustment and a more sophisticated crossover strategy to improve convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "686e5765-66bd-4023-bb8f-797cd3285c74", "metadata": {"aucs": [0.7649530760233154, 0.7672203135695314, 0.7425091083534923, 0.7466124230890963, 0.7704599926457998, 0.7545584238429436, 0.7607524557865303, 0.7452759414992235, 0.7480973398464614, 0.5862065060770814, 0.5825938692348882, 0.5860768603755706, 0.5884050674615322, 0.5674125077060967, 0.5826435901385849, 0.5951042015179475, 0.6032313272244649, 0.5731672465217614, 0.25194592521131665, 0.1676756158856184, 0.26291580523412994, 0.2600503255878519, 0.17959807225069402, 0.2335825331252055, 0.2426249825633744, 0.3098139619975633, 0.2238814093442566, 0.16512111046391276, 0.21525969008541834, 0.19464188362095924, 0.12433287421253714, 0.16938508364746163, 0.18976455925568758, 0.13245017086615973, 0.1914663153843057, 0.1874239908218731, 0.9382511363254415, 0.9427002108554231, 0.9335298663510166, 0.9735453086833011, 0.9716724136429433, 0.9510382502908014, 0.9634134672229929, 0.9509589054801365, 0.9258879750336196, 0.3488179661700227, 0.3938629525946634, 0.4347726549811002, 0.4192564353073116, 0.389892254250635, 0.39604469148062593, 0.42641372566848945, 0.4198347262636978, 0.4153207613767891, 0.4290968639230195, 0.5501128315873807, 0.5279342473536783, 0.5823625292882533, 0.5890925402731175, 0.5613742528251338, 0.5809233736272427, 0.5916647914898385, 0.5784694622656943, 0.21674247876611485, 0.18909305362696527, 0.1798032830302967, 0.15696316364485352, 0.1794543951235008, 0.18877119059253666, 0.3004394879386265, 0.2183158139879512, 0.2014575293460571, 0.16751679858993596, 0.1567386612593329, 0.21409862242562416, 0.24158310574334418, 0.2001879571817049, 0.2491357919562368, 0.23606130039657836, 0.2138807332293885, 0.19371853333011013, 0.10317564745716923, 0.08467517496480015, 0.09389911343643675, 0.09573396864087969, 0.07486365299407793, 0.0442967807760688, 0.12878722553210498, 0.0964958657847026, 0.07909484892663587, 0.23590099351112526, 0.20216297112133585, 0.20882497179331172, 0.21456010145039728, 0.20432566242871153, 0.12994546971771215, 0.2511321390500115, 0.2046752316748388, 0.2556081827349247, 0.04524643133393491, 0.03069074890312329, 0.06178105905539266, 0.0699604123885581, 0.04415075947763236, 0.03450183732339096, 0.05304536553524963, 0.08212001961877358, 0.02319607651683253, 0.1588741206119405, 0.16554565624524453, 0.1504714197556989, 0.18339339349809358, 0.15915080336276188, 0.17621457723474965, 0.15410642103848982, 0.14627687511898313, 0.1591600706554931, 0.5436354200512152, 0.5341545209678712, 0.5241850698803925, 0.5599272364565837, 0.5259057857779712, 0.5062025183429466, 0.5395204763904666, 0.5365040376452355, 0.5278764559093689, 0.08535298729770857, 0.09148956013510867, 0.10171053662853569, 0.11574511432253998, 0.10563633885824852, 0.11188308205140507, 0.115776251817583, 0.10097361304176866, 0.09042796994295366, 0.14880949890428163, 0.1325934670430281, 0.19583144394655738, 0.12493560537378257, 0.18502724360352996, 0.12882282471558337, 0.13515223906191365, 0.12827721213156107, 0.14236695678275868, 0.3122690889056031, 0.34125131901950245, 0.3189119476463479, 0.31728298209870665, 0.3414408983994017, 0.33979007787767723, 0.3514442661665945, 0.39367957216627925, 0.369656070988143, 0.23198347831140986, 0.22829913043231886, 0.22921597609444966, 0.251120787788886, 0.24167393698168704, 0.20746485258928837, 0.2437880398264347, 0.25592442959305695, 0.26947644647958024, 0.19400567801085455, 0.19406769423076453, 0.19319049200276806, 0.18174325807884217, 0.18412799391645007, 0.19045283601534158, 0.20894670161571838, 0.19400842451017297, 0.1879639634757112, 0.20264811447264242, 0.19211000342460982, 0.19149845884701777, 0.25017257320491837, 0.22831263511238342, 0.22036662728925271, 0.28072120067988604, 0.28244680866028127, 0.20812711488349644, 0.6408741955124668, 0.19353118249237478, 0.16675563759331347, 0.4976859760084008, 0.4892049175611233, 0.5434692771636185, 0.29479481011032405, 0.358640379822735, 0.35862456986207325, 0.192162745419158, 0.487149173780581, 0.5463893453837013, 0.43940400451011496, 0.2755967916157974, 0.18925599111268154, 0.19963567301018081, 0.5414709206077926, 0.19957285232578448, 0.18952249184701553, 0.17765474681583415, 0.17378881812013147, 0.17786551162129505, 0.17920587662617038, 0.2001632955887278, 0.18076833067032516, 0.1801919496025436, 0.1761995299275586, 0.07741636929535567, 0.0830005357116641, 0.07952662108109276, 0.07459185689412862, 0.07674689102508525, 0.06884074856563571, 0.07857791403614434, 0.08405295860230999, 0.0731095590764087]}, "mutation_prompt": null}
{"id": "d06285f9-cb47-4a53-ac1f-2e42d11ab64f", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 10 * dim\n        self.population_size = self.initial_population_size\n        self.mutation_f = 0.5\n        self.crossover_prob = 0.7\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim)\n        )\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        \n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                if self.used_budget >= self.budget:\n                    break\n\n                # Mutation and recombination\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_f * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial[cross_points] = mutant[cross_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.used_budget += 1\n                if trial_fitness < self.fitness[i]:\n                    self.fitness[i] = trial_fitness\n                    self.population[i] = trial\n\n            # Adaptive mechanisms\n            if self.used_budget > self.budget * 0.5 and self.population_size > self.dim:\n                self.population_size = int(self.initial_population_size / 2)\n\n            # Adaptation of mutation factor and crossover probability\n            self.mutation_f = 0.5 + 0.3 * np.random.rand()\n            self.crossover_prob = 0.5 + 0.4 * np.random.rand()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.used_budget >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1", "name": "AdaptiveDifferentialEvolution", "description": "An Adaptive Differential Evolution algorithm enhanced with dynamic population size adjustment and a more sophisticated crossover strategy to improve convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "686e5765-66bd-4023-bb8f-797cd3285c74", "metadata": {"aucs": [0.7649530760233154, 0.7672203135695314, 0.7425091083534923, 0.7466124230890963, 0.7704599926457998, 0.7545584238429436, 0.7607524557865303, 0.7452759414992235, 0.7480973398464614, 0.5862065060770814, 0.5825938692348882, 0.5860768603755706, 0.5884050674615322, 0.5674125077060967, 0.5826435901385849, 0.5951042015179475, 0.6032313272244649, 0.5731672465217614, 0.25194592521131665, 0.1676756158856184, 0.26291580523412994, 0.2600503255878519, 0.17959807225069402, 0.2335825331252055, 0.2426249825633744, 0.3098139619975633, 0.2238814093442566, 0.16512111046391276, 0.21525969008541834, 0.19464188362095924, 0.12433287421253714, 0.16938508364746163, 0.18976455925568758, 0.13245017086615973, 0.1914663153843057, 0.1874239908218731, 0.9382511363254415, 0.9427002108554231, 0.9335298663510166, 0.9735453086833011, 0.9716724136429433, 0.9510382502908014, 0.9634134672229929, 0.9509589054801365, 0.9258879750336196, 0.3488179661700227, 0.3938629525946634, 0.4347726549811002, 0.4192564353073116, 0.389892254250635, 0.39604469148062593, 0.42641372566848945, 0.4198347262636978, 0.4153207613767891, 0.4290968639230195, 0.5501128315873807, 0.5279342473536783, 0.5823625292882533, 0.5890925402731175, 0.5613742528251338, 0.5809233736272427, 0.5916647914898385, 0.5784694622656943, 0.21674247876611485, 0.18909305362696527, 0.1798032830302967, 0.15696316364485352, 0.1794543951235008, 0.18877119059253666, 0.3004394879386265, 0.2183158139879512, 0.2014575293460571, 0.16751679858993596, 0.1567386612593329, 0.21409862242562416, 0.24158310574334418, 0.2001879571817049, 0.2491357919562368, 0.23606130039657836, 0.2138807332293885, 0.19371853333011013, 0.10317564745716923, 0.08467517496480015, 0.09389911343643675, 0.09573396864087969, 0.07486365299407793, 0.0442967807760688, 0.12878722553210498, 0.0964958657847026, 0.07909484892663587, 0.23590099351112526, 0.20216297112133585, 0.20882497179331172, 0.21456010145039728, 0.20432566242871153, 0.12994546971771215, 0.2511321390500115, 0.2046752316748388, 0.2556081827349247, 0.04524643133393491, 0.03069074890312329, 0.06178105905539266, 0.0699604123885581, 0.04415075947763236, 0.03450183732339096, 0.05304536553524963, 0.08212001961877358, 0.02319607651683253, 0.1588741206119405, 0.16554565624524453, 0.1504714197556989, 0.18339339349809358, 0.15915080336276188, 0.17621457723474965, 0.15410642103848982, 0.14627687511898313, 0.1591600706554931, 0.5436354200512152, 0.5341545209678712, 0.5241850698803925, 0.5599272364565837, 0.5259057857779712, 0.5062025183429466, 0.5395204763904666, 0.5365040376452355, 0.5278764559093689, 0.08535298729770857, 0.09148956013510867, 0.10171053662853569, 0.11574511432253998, 0.10563633885824852, 0.11188308205140507, 0.115776251817583, 0.10097361304176866, 0.09042796994295366, 0.14880949890428163, 0.1325934670430281, 0.19583144394655738, 0.12493560537378257, 0.18502724360352996, 0.12882282471558337, 0.13515223906191365, 0.12827721213156107, 0.14236695678275868, 0.3122690889056031, 0.34125131901950245, 0.3189119476463479, 0.31728298209870665, 0.3414408983994017, 0.33979007787767723, 0.3514442661665945, 0.39367957216627925, 0.369656070988143, 0.23198347831140986, 0.22829913043231886, 0.22921597609444966, 0.251120787788886, 0.24167393698168704, 0.20746485258928837, 0.2437880398264347, 0.25592442959305695, 0.26947644647958024, 0.19400567801085455, 0.19406769423076453, 0.19319049200276806, 0.18174325807884217, 0.18412799391645007, 0.19045283601534158, 0.20894670161571838, 0.19400842451017297, 0.1879639634757112, 0.20264811447264242, 0.19211000342460982, 0.19149845884701777, 0.25017257320491837, 0.22831263511238342, 0.22036662728925271, 0.28072120067988604, 0.28244680866028127, 0.20812711488349644, 0.6408741955124668, 0.19353118249237478, 0.16675563759331347, 0.4976859760084008, 0.4892049175611233, 0.5434692771636185, 0.29479481011032405, 0.358640379822735, 0.35862456986207325, 0.192162745419158, 0.487149173780581, 0.5463893453837013, 0.43940400451011496, 0.2755967916157974, 0.18925599111268154, 0.19963567301018081, 0.5414709206077926, 0.19957285232578448, 0.18952249184701553, 0.17765474681583415, 0.17378881812013147, 0.17786551162129505, 0.17920587662617038, 0.2001632955887278, 0.18076833067032516, 0.1801919496025436, 0.1761995299275586, 0.07741636929535567, 0.0830005357116641, 0.07952662108109276, 0.07459185689412862, 0.07674689102508525, 0.06884074856563571, 0.07857791403614434, 0.08405295860230999, 0.0731095590764087]}, "mutation_prompt": null}
{"id": "3f1f842c-ab8e-4127-a4e9-c4bc5b406793", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 10 * dim\n        self.population_size = self.initial_population_size\n        self.mutation_f = 0.5\n        self.crossover_prob = 0.7\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim)\n        )\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        \n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                if self.used_budget >= self.budget:\n                    break\n\n                # Mutation and recombination\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_f * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial[cross_points] = mutant[cross_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.used_budget += 1\n                if trial_fitness < self.fitness[i]:\n                    self.fitness[i] = trial_fitness\n                    self.population[i] = trial\n\n            # Adaptive mechanisms\n            if self.used_budget > self.budget * 0.5 and self.population_size > self.dim:\n                self.population_size = int(self.initial_population_size / 2)\n\n            # Adaptation of mutation factor and crossover probability\n            self.mutation_f = 0.5 + 0.3 * np.random.rand()\n            self.crossover_prob = 0.5 + 0.4 * np.random.rand()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.used_budget >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1", "name": "AdaptiveDifferentialEvolution", "description": "An Adaptive Differential Evolution algorithm enhanced with dynamic population size adjustment and a more sophisticated crossover strategy to improve convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "686e5765-66bd-4023-bb8f-797cd3285c74", "metadata": {"aucs": [0.7649530760233154, 0.7672203135695314, 0.7425091083534923, 0.7466124230890963, 0.7704599926457998, 0.7545584238429436, 0.7607524557865303, 0.7452759414992235, 0.7480973398464614, 0.5862065060770814, 0.5825938692348882, 0.5860768603755706, 0.5884050674615322, 0.5674125077060967, 0.5826435901385849, 0.5951042015179475, 0.6032313272244649, 0.5731672465217614, 0.25194592521131665, 0.1676756158856184, 0.26291580523412994, 0.2600503255878519, 0.17959807225069402, 0.2335825331252055, 0.2426249825633744, 0.3098139619975633, 0.2238814093442566, 0.16512111046391276, 0.21525969008541834, 0.19464188362095924, 0.12433287421253714, 0.16938508364746163, 0.18976455925568758, 0.13245017086615973, 0.1914663153843057, 0.1874239908218731, 0.9382511363254415, 0.9427002108554231, 0.9335298663510166, 0.9735453086833011, 0.9716724136429433, 0.9510382502908014, 0.9634134672229929, 0.9509589054801365, 0.9258879750336196, 0.3488179661700227, 0.3938629525946634, 0.4347726549811002, 0.4192564353073116, 0.389892254250635, 0.39604469148062593, 0.42641372566848945, 0.4198347262636978, 0.4153207613767891, 0.4290968639230195, 0.5501128315873807, 0.5279342473536783, 0.5823625292882533, 0.5890925402731175, 0.5613742528251338, 0.5809233736272427, 0.5916647914898385, 0.5784694622656943, 0.21674247876611485, 0.18909305362696527, 0.1798032830302967, 0.15696316364485352, 0.1794543951235008, 0.18877119059253666, 0.3004394879386265, 0.2183158139879512, 0.2014575293460571, 0.16751679858993596, 0.1567386612593329, 0.21409862242562416, 0.24158310574334418, 0.2001879571817049, 0.2491357919562368, 0.23606130039657836, 0.2138807332293885, 0.19371853333011013, 0.10317564745716923, 0.08467517496480015, 0.09389911343643675, 0.09573396864087969, 0.07486365299407793, 0.0442967807760688, 0.12878722553210498, 0.0964958657847026, 0.07909484892663587, 0.23590099351112526, 0.20216297112133585, 0.20882497179331172, 0.21456010145039728, 0.20432566242871153, 0.12994546971771215, 0.2511321390500115, 0.2046752316748388, 0.2556081827349247, 0.04524643133393491, 0.03069074890312329, 0.06178105905539266, 0.0699604123885581, 0.04415075947763236, 0.03450183732339096, 0.05304536553524963, 0.08212001961877358, 0.02319607651683253, 0.1588741206119405, 0.16554565624524453, 0.1504714197556989, 0.18339339349809358, 0.15915080336276188, 0.17621457723474965, 0.15410642103848982, 0.14627687511898313, 0.1591600706554931, 0.5436354200512152, 0.5341545209678712, 0.5241850698803925, 0.5599272364565837, 0.5259057857779712, 0.5062025183429466, 0.5395204763904666, 0.5365040376452355, 0.5278764559093689, 0.08535298729770857, 0.09148956013510867, 0.10171053662853569, 0.11574511432253998, 0.10563633885824852, 0.11188308205140507, 0.115776251817583, 0.10097361304176866, 0.09042796994295366, 0.14880949890428163, 0.1325934670430281, 0.19583144394655738, 0.12493560537378257, 0.18502724360352996, 0.12882282471558337, 0.13515223906191365, 0.12827721213156107, 0.14236695678275868, 0.3122690889056031, 0.34125131901950245, 0.3189119476463479, 0.31728298209870665, 0.3414408983994017, 0.33979007787767723, 0.3514442661665945, 0.39367957216627925, 0.369656070988143, 0.23198347831140986, 0.22829913043231886, 0.22921597609444966, 0.251120787788886, 0.24167393698168704, 0.20746485258928837, 0.2437880398264347, 0.25592442959305695, 0.26947644647958024, 0.19400567801085455, 0.19406769423076453, 0.19319049200276806, 0.18174325807884217, 0.18412799391645007, 0.19045283601534158, 0.20894670161571838, 0.19400842451017297, 0.1879639634757112, 0.20264811447264242, 0.19211000342460982, 0.19149845884701777, 0.25017257320491837, 0.22831263511238342, 0.22036662728925271, 0.28072120067988604, 0.28244680866028127, 0.20812711488349644, 0.6408741955124668, 0.19353118249237478, 0.16675563759331347, 0.4976859760084008, 0.4892049175611233, 0.5434692771636185, 0.29479481011032405, 0.358640379822735, 0.35862456986207325, 0.192162745419158, 0.487149173780581, 0.5463893453837013, 0.43940400451011496, 0.2755967916157974, 0.18925599111268154, 0.19963567301018081, 0.5414709206077926, 0.19957285232578448, 0.18952249184701553, 0.17765474681583415, 0.17378881812013147, 0.17786551162129505, 0.17920587662617038, 0.2001632955887278, 0.18076833067032516, 0.1801919496025436, 0.1761995299275586, 0.07741636929535567, 0.0830005357116641, 0.07952662108109276, 0.07459185689412862, 0.07674689102508525, 0.06884074856563571, 0.07857791403614434, 0.08405295860230999, 0.0731095590764087]}, "mutation_prompt": null}
{"id": "94cfab1f-07ae-4747-b846-54be19397d99", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 10 * dim\n        self.population_size = self.initial_population_size\n        self.mutation_f = 0.5\n        self.crossover_prob = 0.7\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim)\n        )\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        \n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                if self.used_budget >= self.budget:\n                    break\n\n                # Mutation and recombination\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_f * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial[cross_points] = mutant[cross_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.used_budget += 1\n                if trial_fitness < self.fitness[i]:\n                    self.fitness[i] = trial_fitness\n                    self.population[i] = trial\n\n            # Adaptive mechanisms\n            if self.used_budget > self.budget * 0.5 and self.population_size > self.dim:\n                self.population_size = int(self.initial_population_size / 2)\n\n            # Adaptation of mutation factor and crossover probability\n            self.mutation_f = 0.5 + 0.3 * np.random.rand()\n            self.crossover_prob = 0.5 + 0.4 * np.random.rand()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.used_budget >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1", "name": "AdaptiveDifferentialEvolution", "description": "An Adaptive Differential Evolution algorithm enhanced with dynamic population size adjustment and a more sophisticated crossover strategy to improve convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "686e5765-66bd-4023-bb8f-797cd3285c74", "metadata": {"aucs": [0.7649530760233154, 0.7672203135695314, 0.7425091083534923, 0.7466124230890963, 0.7704599926457998, 0.7545584238429436, 0.7607524557865303, 0.7452759414992235, 0.7480973398464614, 0.5862065060770814, 0.5825938692348882, 0.5860768603755706, 0.5884050674615322, 0.5674125077060967, 0.5826435901385849, 0.5951042015179475, 0.6032313272244649, 0.5731672465217614, 0.25194592521131665, 0.1676756158856184, 0.26291580523412994, 0.2600503255878519, 0.17959807225069402, 0.2335825331252055, 0.2426249825633744, 0.3098139619975633, 0.2238814093442566, 0.16512111046391276, 0.21525969008541834, 0.19464188362095924, 0.12433287421253714, 0.16938508364746163, 0.18976455925568758, 0.13245017086615973, 0.1914663153843057, 0.1874239908218731, 0.9382511363254415, 0.9427002108554231, 0.9335298663510166, 0.9735453086833011, 0.9716724136429433, 0.9510382502908014, 0.9634134672229929, 0.9509589054801365, 0.9258879750336196, 0.3488179661700227, 0.3938629525946634, 0.4347726549811002, 0.4192564353073116, 0.389892254250635, 0.39604469148062593, 0.42641372566848945, 0.4198347262636978, 0.4153207613767891, 0.4290968639230195, 0.5501128315873807, 0.5279342473536783, 0.5823625292882533, 0.5890925402731175, 0.5613742528251338, 0.5809233736272427, 0.5916647914898385, 0.5784694622656943, 0.21674247876611485, 0.18909305362696527, 0.1798032830302967, 0.15696316364485352, 0.1794543951235008, 0.18877119059253666, 0.3004394879386265, 0.2183158139879512, 0.2014575293460571, 0.16751679858993596, 0.1567386612593329, 0.21409862242562416, 0.24158310574334418, 0.2001879571817049, 0.2491357919562368, 0.23606130039657836, 0.2138807332293885, 0.19371853333011013, 0.10317564745716923, 0.08467517496480015, 0.09389911343643675, 0.09573396864087969, 0.07486365299407793, 0.0442967807760688, 0.12878722553210498, 0.0964958657847026, 0.07909484892663587, 0.23590099351112526, 0.20216297112133585, 0.20882497179331172, 0.21456010145039728, 0.20432566242871153, 0.12994546971771215, 0.2511321390500115, 0.2046752316748388, 0.2556081827349247, 0.04524643133393491, 0.03069074890312329, 0.06178105905539266, 0.0699604123885581, 0.04415075947763236, 0.03450183732339096, 0.05304536553524963, 0.08212001961877358, 0.02319607651683253, 0.1588741206119405, 0.16554565624524453, 0.1504714197556989, 0.18339339349809358, 0.15915080336276188, 0.17621457723474965, 0.15410642103848982, 0.14627687511898313, 0.1591600706554931, 0.5436354200512152, 0.5341545209678712, 0.5241850698803925, 0.5599272364565837, 0.5259057857779712, 0.5062025183429466, 0.5395204763904666, 0.5365040376452355, 0.5278764559093689, 0.08535298729770857, 0.09148956013510867, 0.10171053662853569, 0.11574511432253998, 0.10563633885824852, 0.11188308205140507, 0.115776251817583, 0.10097361304176866, 0.09042796994295366, 0.14880949890428163, 0.1325934670430281, 0.19583144394655738, 0.12493560537378257, 0.18502724360352996, 0.12882282471558337, 0.13515223906191365, 0.12827721213156107, 0.14236695678275868, 0.3122690889056031, 0.34125131901950245, 0.3189119476463479, 0.31728298209870665, 0.3414408983994017, 0.33979007787767723, 0.3514442661665945, 0.39367957216627925, 0.369656070988143, 0.23198347831140986, 0.22829913043231886, 0.22921597609444966, 0.251120787788886, 0.24167393698168704, 0.20746485258928837, 0.2437880398264347, 0.25592442959305695, 0.26947644647958024, 0.19400567801085455, 0.19406769423076453, 0.19319049200276806, 0.18174325807884217, 0.18412799391645007, 0.19045283601534158, 0.20894670161571838, 0.19400842451017297, 0.1879639634757112, 0.20264811447264242, 0.19211000342460982, 0.19149845884701777, 0.25017257320491837, 0.22831263511238342, 0.22036662728925271, 0.28072120067988604, 0.28244680866028127, 0.20812711488349644, 0.6408741955124668, 0.19353118249237478, 0.16675563759331347, 0.4976859760084008, 0.4892049175611233, 0.5434692771636185, 0.29479481011032405, 0.358640379822735, 0.35862456986207325, 0.192162745419158, 0.487149173780581, 0.5463893453837013, 0.43940400451011496, 0.2755967916157974, 0.18925599111268154, 0.19963567301018081, 0.5414709206077926, 0.19957285232578448, 0.18952249184701553, 0.17765474681583415, 0.17378881812013147, 0.17786551162129505, 0.17920587662617038, 0.2001632955887278, 0.18076833067032516, 0.1801919496025436, 0.1761995299275586, 0.07741636929535567, 0.0830005357116641, 0.07952662108109276, 0.07459185689412862, 0.07674689102508525, 0.06884074856563571, 0.07857791403614434, 0.08405295860230999, 0.0731095590764087]}, "mutation_prompt": null}
{"id": "3c3e2481-9f60-434b-aa69-f347f2b836d2", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 10 * dim\n        self.population_size = self.initial_population_size\n        self.mutation_f = 0.5\n        self.crossover_prob = 0.7\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim)\n        )\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        \n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                if self.used_budget >= self.budget:\n                    break\n\n                # Mutation and recombination\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_f * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial[cross_points] = mutant[cross_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.used_budget += 1\n                if trial_fitness < self.fitness[i]:\n                    self.fitness[i] = trial_fitness\n                    self.population[i] = trial\n\n            # Adaptive mechanisms\n            if self.used_budget > self.budget * 0.5 and self.population_size > self.dim:\n                self.population_size = int(self.initial_population_size / 2)\n\n            # Adaptation of mutation factor and crossover probability\n            self.mutation_f = 0.5 + 0.3 * np.random.rand()\n            self.crossover_prob = 0.5 + 0.4 * np.random.rand()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.used_budget >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1", "name": "AdaptiveDifferentialEvolution", "description": "An Adaptive Differential Evolution algorithm enhanced with dynamic population size adjustment and a more sophisticated crossover strategy to improve convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "686e5765-66bd-4023-bb8f-797cd3285c74", "metadata": {"aucs": [0.7649530760233154, 0.7672203135695314, 0.7425091083534923, 0.7466124230890963, 0.7704599926457998, 0.7545584238429436, 0.7607524557865303, 0.7452759414992235, 0.7480973398464614, 0.5862065060770814, 0.5825938692348882, 0.5860768603755706, 0.5884050674615322, 0.5674125077060967, 0.5826435901385849, 0.5951042015179475, 0.6032313272244649, 0.5731672465217614, 0.25194592521131665, 0.1676756158856184, 0.26291580523412994, 0.2600503255878519, 0.17959807225069402, 0.2335825331252055, 0.2426249825633744, 0.3098139619975633, 0.2238814093442566, 0.16512111046391276, 0.21525969008541834, 0.19464188362095924, 0.12433287421253714, 0.16938508364746163, 0.18976455925568758, 0.13245017086615973, 0.1914663153843057, 0.1874239908218731, 0.9382511363254415, 0.9427002108554231, 0.9335298663510166, 0.9735453086833011, 0.9716724136429433, 0.9510382502908014, 0.9634134672229929, 0.9509589054801365, 0.9258879750336196, 0.3488179661700227, 0.3938629525946634, 0.4347726549811002, 0.4192564353073116, 0.389892254250635, 0.39604469148062593, 0.42641372566848945, 0.4198347262636978, 0.4153207613767891, 0.4290968639230195, 0.5501128315873807, 0.5279342473536783, 0.5823625292882533, 0.5890925402731175, 0.5613742528251338, 0.5809233736272427, 0.5916647914898385, 0.5784694622656943, 0.21674247876611485, 0.18909305362696527, 0.1798032830302967, 0.15696316364485352, 0.1794543951235008, 0.18877119059253666, 0.3004394879386265, 0.2183158139879512, 0.2014575293460571, 0.16751679858993596, 0.1567386612593329, 0.21409862242562416, 0.24158310574334418, 0.2001879571817049, 0.2491357919562368, 0.23606130039657836, 0.2138807332293885, 0.19371853333011013, 0.10317564745716923, 0.08467517496480015, 0.09389911343643675, 0.09573396864087969, 0.07486365299407793, 0.0442967807760688, 0.12878722553210498, 0.0964958657847026, 0.07909484892663587, 0.23590099351112526, 0.20216297112133585, 0.20882497179331172, 0.21456010145039728, 0.20432566242871153, 0.12994546971771215, 0.2511321390500115, 0.2046752316748388, 0.2556081827349247, 0.04524643133393491, 0.03069074890312329, 0.06178105905539266, 0.0699604123885581, 0.04415075947763236, 0.03450183732339096, 0.05304536553524963, 0.08212001961877358, 0.02319607651683253, 0.1588741206119405, 0.16554565624524453, 0.1504714197556989, 0.18339339349809358, 0.15915080336276188, 0.17621457723474965, 0.15410642103848982, 0.14627687511898313, 0.1591600706554931, 0.5436354200512152, 0.5341545209678712, 0.5241850698803925, 0.5599272364565837, 0.5259057857779712, 0.5062025183429466, 0.5395204763904666, 0.5365040376452355, 0.5278764559093689, 0.08535298729770857, 0.09148956013510867, 0.10171053662853569, 0.11574511432253998, 0.10563633885824852, 0.11188308205140507, 0.115776251817583, 0.10097361304176866, 0.09042796994295366, 0.14880949890428163, 0.1325934670430281, 0.19583144394655738, 0.12493560537378257, 0.18502724360352996, 0.12882282471558337, 0.13515223906191365, 0.12827721213156107, 0.14236695678275868, 0.3122690889056031, 0.34125131901950245, 0.3189119476463479, 0.31728298209870665, 0.3414408983994017, 0.33979007787767723, 0.3514442661665945, 0.39367957216627925, 0.369656070988143, 0.23198347831140986, 0.22829913043231886, 0.22921597609444966, 0.251120787788886, 0.24167393698168704, 0.20746485258928837, 0.2437880398264347, 0.25592442959305695, 0.26947644647958024, 0.19400567801085455, 0.19406769423076453, 0.19319049200276806, 0.18174325807884217, 0.18412799391645007, 0.19045283601534158, 0.20894670161571838, 0.19400842451017297, 0.1879639634757112, 0.20264811447264242, 0.19211000342460982, 0.19149845884701777, 0.25017257320491837, 0.22831263511238342, 0.22036662728925271, 0.28072120067988604, 0.28244680866028127, 0.20812711488349644, 0.6408741955124668, 0.19353118249237478, 0.16675563759331347, 0.4976859760084008, 0.4892049175611233, 0.5434692771636185, 0.29479481011032405, 0.358640379822735, 0.35862456986207325, 0.192162745419158, 0.487149173780581, 0.5463893453837013, 0.43940400451011496, 0.2755967916157974, 0.18925599111268154, 0.19963567301018081, 0.5414709206077926, 0.19957285232578448, 0.18952249184701553, 0.17765474681583415, 0.17378881812013147, 0.17786551162129505, 0.17920587662617038, 0.2001632955887278, 0.18076833067032516, 0.1801919496025436, 0.1761995299275586, 0.07741636929535567, 0.0830005357116641, 0.07952662108109276, 0.07459185689412862, 0.07674689102508525, 0.06884074856563571, 0.07857791403614434, 0.08405295860230999, 0.0731095590764087]}, "mutation_prompt": null}
{"id": "bed65ab7-e9d5-46f9-98b8-f8cf6e9eec41", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 10 * dim\n        self.population_size = self.initial_population_size\n        self.mutation_f = 0.5\n        self.crossover_prob = 0.7\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim)\n        )\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        \n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                if self.used_budget >= self.budget:\n                    break\n\n                # Mutation and recombination\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_f * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial[cross_points] = mutant[cross_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.used_budget += 1\n                if trial_fitness < self.fitness[i]:\n                    self.fitness[i] = trial_fitness\n                    self.population[i] = trial\n\n            # Adaptive mechanisms\n            if self.used_budget > self.budget * 0.5 and self.population_size > self.dim:\n                self.population_size = int(self.initial_population_size / 2)\n\n            # Adaptation of mutation factor and crossover probability\n            self.mutation_f = 0.5 + 0.3 * np.random.rand()\n            self.crossover_prob = 0.5 + 0.4 * np.random.rand()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.used_budget >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1", "name": "AdaptiveDifferentialEvolution", "description": "An Adaptive Differential Evolution algorithm enhanced with dynamic population size adjustment and a more sophisticated crossover strategy to improve convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "686e5765-66bd-4023-bb8f-797cd3285c74", "metadata": {"aucs": [0.7649530760233154, 0.7672203135695314, 0.7425091083534923, 0.7466124230890963, 0.7704599926457998, 0.7545584238429436, 0.7607524557865303, 0.7452759414992235, 0.7480973398464614, 0.5862065060770814, 0.5825938692348882, 0.5860768603755706, 0.5884050674615322, 0.5674125077060967, 0.5826435901385849, 0.5951042015179475, 0.6032313272244649, 0.5731672465217614, 0.25194592521131665, 0.1676756158856184, 0.26291580523412994, 0.2600503255878519, 0.17959807225069402, 0.2335825331252055, 0.2426249825633744, 0.3098139619975633, 0.2238814093442566, 0.16512111046391276, 0.21525969008541834, 0.19464188362095924, 0.12433287421253714, 0.16938508364746163, 0.18976455925568758, 0.13245017086615973, 0.1914663153843057, 0.1874239908218731, 0.9382511363254415, 0.9427002108554231, 0.9335298663510166, 0.9735453086833011, 0.9716724136429433, 0.9510382502908014, 0.9634134672229929, 0.9509589054801365, 0.9258879750336196, 0.3488179661700227, 0.3938629525946634, 0.4347726549811002, 0.4192564353073116, 0.389892254250635, 0.39604469148062593, 0.42641372566848945, 0.4198347262636978, 0.4153207613767891, 0.4290968639230195, 0.5501128315873807, 0.5279342473536783, 0.5823625292882533, 0.5890925402731175, 0.5613742528251338, 0.5809233736272427, 0.5916647914898385, 0.5784694622656943, 0.21674247876611485, 0.18909305362696527, 0.1798032830302967, 0.15696316364485352, 0.1794543951235008, 0.18877119059253666, 0.3004394879386265, 0.2183158139879512, 0.2014575293460571, 0.16751679858993596, 0.1567386612593329, 0.21409862242562416, 0.24158310574334418, 0.2001879571817049, 0.2491357919562368, 0.23606130039657836, 0.2138807332293885, 0.19371853333011013, 0.10317564745716923, 0.08467517496480015, 0.09389911343643675, 0.09573396864087969, 0.07486365299407793, 0.0442967807760688, 0.12878722553210498, 0.0964958657847026, 0.07909484892663587, 0.23590099351112526, 0.20216297112133585, 0.20882497179331172, 0.21456010145039728, 0.20432566242871153, 0.12994546971771215, 0.2511321390500115, 0.2046752316748388, 0.2556081827349247, 0.04524643133393491, 0.03069074890312329, 0.06178105905539266, 0.0699604123885581, 0.04415075947763236, 0.03450183732339096, 0.05304536553524963, 0.08212001961877358, 0.02319607651683253, 0.1588741206119405, 0.16554565624524453, 0.1504714197556989, 0.18339339349809358, 0.15915080336276188, 0.17621457723474965, 0.15410642103848982, 0.14627687511898313, 0.1591600706554931, 0.5436354200512152, 0.5341545209678712, 0.5241850698803925, 0.5599272364565837, 0.5259057857779712, 0.5062025183429466, 0.5395204763904666, 0.5365040376452355, 0.5278764559093689, 0.08535298729770857, 0.09148956013510867, 0.10171053662853569, 0.11574511432253998, 0.10563633885824852, 0.11188308205140507, 0.115776251817583, 0.10097361304176866, 0.09042796994295366, 0.14880949890428163, 0.1325934670430281, 0.19583144394655738, 0.12493560537378257, 0.18502724360352996, 0.12882282471558337, 0.13515223906191365, 0.12827721213156107, 0.14236695678275868, 0.3122690889056031, 0.34125131901950245, 0.3189119476463479, 0.31728298209870665, 0.3414408983994017, 0.33979007787767723, 0.3514442661665945, 0.39367957216627925, 0.369656070988143, 0.23198347831140986, 0.22829913043231886, 0.22921597609444966, 0.251120787788886, 0.24167393698168704, 0.20746485258928837, 0.2437880398264347, 0.25592442959305695, 0.26947644647958024, 0.19400567801085455, 0.19406769423076453, 0.19319049200276806, 0.18174325807884217, 0.18412799391645007, 0.19045283601534158, 0.20894670161571838, 0.19400842451017297, 0.1879639634757112, 0.20264811447264242, 0.19211000342460982, 0.19149845884701777, 0.25017257320491837, 0.22831263511238342, 0.22036662728925271, 0.28072120067988604, 0.28244680866028127, 0.20812711488349644, 0.6408741955124668, 0.19353118249237478, 0.16675563759331347, 0.4976859760084008, 0.4892049175611233, 0.5434692771636185, 0.29479481011032405, 0.358640379822735, 0.35862456986207325, 0.192162745419158, 0.487149173780581, 0.5463893453837013, 0.43940400451011496, 0.2755967916157974, 0.18925599111268154, 0.19963567301018081, 0.5414709206077926, 0.19957285232578448, 0.18952249184701553, 0.17765474681583415, 0.17378881812013147, 0.17786551162129505, 0.17920587662617038, 0.2001632955887278, 0.18076833067032516, 0.1801919496025436, 0.1761995299275586, 0.07741636929535567, 0.0830005357116641, 0.07952662108109276, 0.07459185689412862, 0.07674689102508525, 0.06884074856563571, 0.07857791403614434, 0.08405295860230999, 0.0731095590764087]}, "mutation_prompt": null}
{"id": "872c8525-c198-4836-ad8f-a121657918b6", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 10 * dim\n        self.population_size = self.initial_population_size\n        self.mutation_f = 0.5\n        self.crossover_prob = 0.7\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim)\n        )\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        \n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                if self.used_budget >= self.budget:\n                    break\n\n                # Mutation and recombination\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_f * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial[cross_points] = mutant[cross_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.used_budget += 1\n                if trial_fitness < self.fitness[i]:\n                    self.fitness[i] = trial_fitness\n                    self.population[i] = trial\n\n            # Adaptive mechanisms\n            if self.used_budget > self.budget * 0.5 and self.population_size > self.dim:\n                self.population_size = int(self.initial_population_size / 2)\n\n            # Adaptation of mutation factor and crossover probability\n            self.mutation_f = 0.5 + 0.3 * np.random.rand()\n            self.crossover_prob = 0.5 + 0.4 * np.random.rand()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.used_budget >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1", "name": "AdaptiveDifferentialEvolution", "description": "An Adaptive Differential Evolution algorithm enhanced with dynamic population size adjustment and a more sophisticated crossover strategy to improve convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "686e5765-66bd-4023-bb8f-797cd3285c74", "metadata": {"aucs": [0.7649530760233154, 0.7672203135695314, 0.7425091083534923, 0.7466124230890963, 0.7704599926457998, 0.7545584238429436, 0.7607524557865303, 0.7452759414992235, 0.7480973398464614, 0.5862065060770814, 0.5825938692348882, 0.5860768603755706, 0.5884050674615322, 0.5674125077060967, 0.5826435901385849, 0.5951042015179475, 0.6032313272244649, 0.5731672465217614, 0.25194592521131665, 0.1676756158856184, 0.26291580523412994, 0.2600503255878519, 0.17959807225069402, 0.2335825331252055, 0.2426249825633744, 0.3098139619975633, 0.2238814093442566, 0.16512111046391276, 0.21525969008541834, 0.19464188362095924, 0.12433287421253714, 0.16938508364746163, 0.18976455925568758, 0.13245017086615973, 0.1914663153843057, 0.1874239908218731, 0.9382511363254415, 0.9427002108554231, 0.9335298663510166, 0.9735453086833011, 0.9716724136429433, 0.9510382502908014, 0.9634134672229929, 0.9509589054801365, 0.9258879750336196, 0.3488179661700227, 0.3938629525946634, 0.4347726549811002, 0.4192564353073116, 0.389892254250635, 0.39604469148062593, 0.42641372566848945, 0.4198347262636978, 0.4153207613767891, 0.4290968639230195, 0.5501128315873807, 0.5279342473536783, 0.5823625292882533, 0.5890925402731175, 0.5613742528251338, 0.5809233736272427, 0.5916647914898385, 0.5784694622656943, 0.21674247876611485, 0.18909305362696527, 0.1798032830302967, 0.15696316364485352, 0.1794543951235008, 0.18877119059253666, 0.3004394879386265, 0.2183158139879512, 0.2014575293460571, 0.16751679858993596, 0.1567386612593329, 0.21409862242562416, 0.24158310574334418, 0.2001879571817049, 0.2491357919562368, 0.23606130039657836, 0.2138807332293885, 0.19371853333011013, 0.10317564745716923, 0.08467517496480015, 0.09389911343643675, 0.09573396864087969, 0.07486365299407793, 0.0442967807760688, 0.12878722553210498, 0.0964958657847026, 0.07909484892663587, 0.23590099351112526, 0.20216297112133585, 0.20882497179331172, 0.21456010145039728, 0.20432566242871153, 0.12994546971771215, 0.2511321390500115, 0.2046752316748388, 0.2556081827349247, 0.04524643133393491, 0.03069074890312329, 0.06178105905539266, 0.0699604123885581, 0.04415075947763236, 0.03450183732339096, 0.05304536553524963, 0.08212001961877358, 0.02319607651683253, 0.1588741206119405, 0.16554565624524453, 0.1504714197556989, 0.18339339349809358, 0.15915080336276188, 0.17621457723474965, 0.15410642103848982, 0.14627687511898313, 0.1591600706554931, 0.5436354200512152, 0.5341545209678712, 0.5241850698803925, 0.5599272364565837, 0.5259057857779712, 0.5062025183429466, 0.5395204763904666, 0.5365040376452355, 0.5278764559093689, 0.08535298729770857, 0.09148956013510867, 0.10171053662853569, 0.11574511432253998, 0.10563633885824852, 0.11188308205140507, 0.115776251817583, 0.10097361304176866, 0.09042796994295366, 0.14880949890428163, 0.1325934670430281, 0.19583144394655738, 0.12493560537378257, 0.18502724360352996, 0.12882282471558337, 0.13515223906191365, 0.12827721213156107, 0.14236695678275868, 0.3122690889056031, 0.34125131901950245, 0.3189119476463479, 0.31728298209870665, 0.3414408983994017, 0.33979007787767723, 0.3514442661665945, 0.39367957216627925, 0.369656070988143, 0.23198347831140986, 0.22829913043231886, 0.22921597609444966, 0.251120787788886, 0.24167393698168704, 0.20746485258928837, 0.2437880398264347, 0.25592442959305695, 0.26947644647958024, 0.19400567801085455, 0.19406769423076453, 0.19319049200276806, 0.18174325807884217, 0.18412799391645007, 0.19045283601534158, 0.20894670161571838, 0.19400842451017297, 0.1879639634757112, 0.20264811447264242, 0.19211000342460982, 0.19149845884701777, 0.25017257320491837, 0.22831263511238342, 0.22036662728925271, 0.28072120067988604, 0.28244680866028127, 0.20812711488349644, 0.6408741955124668, 0.19353118249237478, 0.16675563759331347, 0.4976859760084008, 0.4892049175611233, 0.5434692771636185, 0.29479481011032405, 0.358640379822735, 0.35862456986207325, 0.192162745419158, 0.487149173780581, 0.5463893453837013, 0.43940400451011496, 0.2755967916157974, 0.18925599111268154, 0.19963567301018081, 0.5414709206077926, 0.19957285232578448, 0.18952249184701553, 0.17765474681583415, 0.17378881812013147, 0.17786551162129505, 0.17920587662617038, 0.2001632955887278, 0.18076833067032516, 0.1801919496025436, 0.1761995299275586, 0.07741636929535567, 0.0830005357116641, 0.07952662108109276, 0.07459185689412862, 0.07674689102508525, 0.06884074856563571, 0.07857791403614434, 0.08405295860230999, 0.0731095590764087]}, "mutation_prompt": null}
{"id": "caea97d4-8ffd-4b78-a963-4f78425e4a17", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 10 * dim\n        self.population_size = self.initial_population_size\n        self.mutation_f = 0.5\n        self.crossover_prob = 0.7\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim)\n        )\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        \n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                if self.used_budget >= self.budget:\n                    break\n\n                # Mutation and recombination\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_f * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial[cross_points] = mutant[cross_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.used_budget += 1\n                if trial_fitness < self.fitness[i]:\n                    self.fitness[i] = trial_fitness\n                    self.population[i] = trial\n\n            # Adaptive mechanisms\n            if self.used_budget > self.budget * 0.5 and self.population_size > self.dim:\n                self.population_size = int(self.initial_population_size / 2)\n\n            # Adaptation of mutation factor and crossover probability\n            self.mutation_f = 0.5 + 0.3 * np.random.rand()\n            self.crossover_prob = 0.5 + 0.4 * np.random.rand()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.used_budget >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1", "name": "AdaptiveDifferentialEvolution", "description": "An Adaptive Differential Evolution algorithm enhanced with dynamic population size adjustment and a more sophisticated crossover strategy to improve convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "686e5765-66bd-4023-bb8f-797cd3285c74", "metadata": {"aucs": [0.7649530760233154, 0.7672203135695314, 0.7425091083534923, 0.7466124230890963, 0.7704599926457998, 0.7545584238429436, 0.7607524557865303, 0.7452759414992235, 0.7480973398464614, 0.5862065060770814, 0.5825938692348882, 0.5860768603755706, 0.5884050674615322, 0.5674125077060967, 0.5826435901385849, 0.5951042015179475, 0.6032313272244649, 0.5731672465217614, 0.25194592521131665, 0.1676756158856184, 0.26291580523412994, 0.2600503255878519, 0.17959807225069402, 0.2335825331252055, 0.2426249825633744, 0.3098139619975633, 0.2238814093442566, 0.16512111046391276, 0.21525969008541834, 0.19464188362095924, 0.12433287421253714, 0.16938508364746163, 0.18976455925568758, 0.13245017086615973, 0.1914663153843057, 0.1874239908218731, 0.9382511363254415, 0.9427002108554231, 0.9335298663510166, 0.9735453086833011, 0.9716724136429433, 0.9510382502908014, 0.9634134672229929, 0.9509589054801365, 0.9258879750336196, 0.3488179661700227, 0.3938629525946634, 0.4347726549811002, 0.4192564353073116, 0.389892254250635, 0.39604469148062593, 0.42641372566848945, 0.4198347262636978, 0.4153207613767891, 0.4290968639230195, 0.5501128315873807, 0.5279342473536783, 0.5823625292882533, 0.5890925402731175, 0.5613742528251338, 0.5809233736272427, 0.5916647914898385, 0.5784694622656943, 0.21674247876611485, 0.18909305362696527, 0.1798032830302967, 0.15696316364485352, 0.1794543951235008, 0.18877119059253666, 0.3004394879386265, 0.2183158139879512, 0.2014575293460571, 0.16751679858993596, 0.1567386612593329, 0.21409862242562416, 0.24158310574334418, 0.2001879571817049, 0.2491357919562368, 0.23606130039657836, 0.2138807332293885, 0.19371853333011013, 0.10317564745716923, 0.08467517496480015, 0.09389911343643675, 0.09573396864087969, 0.07486365299407793, 0.0442967807760688, 0.12878722553210498, 0.0964958657847026, 0.07909484892663587, 0.23590099351112526, 0.20216297112133585, 0.20882497179331172, 0.21456010145039728, 0.20432566242871153, 0.12994546971771215, 0.2511321390500115, 0.2046752316748388, 0.2556081827349247, 0.04524643133393491, 0.03069074890312329, 0.06178105905539266, 0.0699604123885581, 0.04415075947763236, 0.03450183732339096, 0.05304536553524963, 0.08212001961877358, 0.02319607651683253, 0.1588741206119405, 0.16554565624524453, 0.1504714197556989, 0.18339339349809358, 0.15915080336276188, 0.17621457723474965, 0.15410642103848982, 0.14627687511898313, 0.1591600706554931, 0.5436354200512152, 0.5341545209678712, 0.5241850698803925, 0.5599272364565837, 0.5259057857779712, 0.5062025183429466, 0.5395204763904666, 0.5365040376452355, 0.5278764559093689, 0.08535298729770857, 0.09148956013510867, 0.10171053662853569, 0.11574511432253998, 0.10563633885824852, 0.11188308205140507, 0.115776251817583, 0.10097361304176866, 0.09042796994295366, 0.14880949890428163, 0.1325934670430281, 0.19583144394655738, 0.12493560537378257, 0.18502724360352996, 0.12882282471558337, 0.13515223906191365, 0.12827721213156107, 0.14236695678275868, 0.3122690889056031, 0.34125131901950245, 0.3189119476463479, 0.31728298209870665, 0.3414408983994017, 0.33979007787767723, 0.3514442661665945, 0.39367957216627925, 0.369656070988143, 0.23198347831140986, 0.22829913043231886, 0.22921597609444966, 0.251120787788886, 0.24167393698168704, 0.20746485258928837, 0.2437880398264347, 0.25592442959305695, 0.26947644647958024, 0.19400567801085455, 0.19406769423076453, 0.19319049200276806, 0.18174325807884217, 0.18412799391645007, 0.19045283601534158, 0.20894670161571838, 0.19400842451017297, 0.1879639634757112, 0.20264811447264242, 0.19211000342460982, 0.19149845884701777, 0.25017257320491837, 0.22831263511238342, 0.22036662728925271, 0.28072120067988604, 0.28244680866028127, 0.20812711488349644, 0.6408741955124668, 0.19353118249237478, 0.16675563759331347, 0.4976859760084008, 0.4892049175611233, 0.5434692771636185, 0.29479481011032405, 0.358640379822735, 0.35862456986207325, 0.192162745419158, 0.487149173780581, 0.5463893453837013, 0.43940400451011496, 0.2755967916157974, 0.18925599111268154, 0.19963567301018081, 0.5414709206077926, 0.19957285232578448, 0.18952249184701553, 0.17765474681583415, 0.17378881812013147, 0.17786551162129505, 0.17920587662617038, 0.2001632955887278, 0.18076833067032516, 0.1801919496025436, 0.1761995299275586, 0.07741636929535567, 0.0830005357116641, 0.07952662108109276, 0.07459185689412862, 0.07674689102508525, 0.06884074856563571, 0.07857791403614434, 0.08405295860230999, 0.0731095590764087]}, "mutation_prompt": null}
{"id": "0d4ca1a9-912a-4814-a1d6-e84a2983eda5", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 10 * dim\n        self.population_size = self.initial_population_size\n        self.mutation_f = 0.5\n        self.crossover_prob = 0.7\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim)\n        )\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        \n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                if self.used_budget >= self.budget:\n                    break\n\n                # Mutation and recombination\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_f * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial[cross_points] = mutant[cross_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.used_budget += 1\n                if trial_fitness < self.fitness[i]:\n                    self.fitness[i] = trial_fitness\n                    self.population[i] = trial\n\n            # Adaptive mechanisms\n            if self.used_budget > self.budget * 0.5 and self.population_size > self.dim:\n                self.population_size = int(self.initial_population_size / 2)\n\n            # Adaptation of mutation factor and crossover probability\n            self.mutation_f = 0.5 + 0.3 * np.random.rand()\n            self.crossover_prob = 0.5 + 0.4 * np.random.rand()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.used_budget >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1", "name": "AdaptiveDifferentialEvolution", "description": "An Adaptive Differential Evolution algorithm enhanced with dynamic population size adjustment and a more sophisticated crossover strategy to improve convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "686e5765-66bd-4023-bb8f-797cd3285c74", "metadata": {"aucs": [0.7649530760233154, 0.7672203135695314, 0.7425091083534923, 0.7466124230890963, 0.7704599926457998, 0.7545584238429436, 0.7607524557865303, 0.7452759414992235, 0.7480973398464614, 0.5862065060770814, 0.5825938692348882, 0.5860768603755706, 0.5884050674615322, 0.5674125077060967, 0.5826435901385849, 0.5951042015179475, 0.6032313272244649, 0.5731672465217614, 0.25194592521131665, 0.1676756158856184, 0.26291580523412994, 0.2600503255878519, 0.17959807225069402, 0.2335825331252055, 0.2426249825633744, 0.3098139619975633, 0.2238814093442566, 0.16512111046391276, 0.21525969008541834, 0.19464188362095924, 0.12433287421253714, 0.16938508364746163, 0.18976455925568758, 0.13245017086615973, 0.1914663153843057, 0.1874239908218731, 0.9382511363254415, 0.9427002108554231, 0.9335298663510166, 0.9735453086833011, 0.9716724136429433, 0.9510382502908014, 0.9634134672229929, 0.9509589054801365, 0.9258879750336196, 0.3488179661700227, 0.3938629525946634, 0.4347726549811002, 0.4192564353073116, 0.389892254250635, 0.39604469148062593, 0.42641372566848945, 0.4198347262636978, 0.4153207613767891, 0.4290968639230195, 0.5501128315873807, 0.5279342473536783, 0.5823625292882533, 0.5890925402731175, 0.5613742528251338, 0.5809233736272427, 0.5916647914898385, 0.5784694622656943, 0.21674247876611485, 0.18909305362696527, 0.1798032830302967, 0.15696316364485352, 0.1794543951235008, 0.18877119059253666, 0.3004394879386265, 0.2183158139879512, 0.2014575293460571, 0.16751679858993596, 0.1567386612593329, 0.21409862242562416, 0.24158310574334418, 0.2001879571817049, 0.2491357919562368, 0.23606130039657836, 0.2138807332293885, 0.19371853333011013, 0.10317564745716923, 0.08467517496480015, 0.09389911343643675, 0.09573396864087969, 0.07486365299407793, 0.0442967807760688, 0.12878722553210498, 0.0964958657847026, 0.07909484892663587, 0.23590099351112526, 0.20216297112133585, 0.20882497179331172, 0.21456010145039728, 0.20432566242871153, 0.12994546971771215, 0.2511321390500115, 0.2046752316748388, 0.2556081827349247, 0.04524643133393491, 0.03069074890312329, 0.06178105905539266, 0.0699604123885581, 0.04415075947763236, 0.03450183732339096, 0.05304536553524963, 0.08212001961877358, 0.02319607651683253, 0.1588741206119405, 0.16554565624524453, 0.1504714197556989, 0.18339339349809358, 0.15915080336276188, 0.17621457723474965, 0.15410642103848982, 0.14627687511898313, 0.1591600706554931, 0.5436354200512152, 0.5341545209678712, 0.5241850698803925, 0.5599272364565837, 0.5259057857779712, 0.5062025183429466, 0.5395204763904666, 0.5365040376452355, 0.5278764559093689, 0.08535298729770857, 0.09148956013510867, 0.10171053662853569, 0.11574511432253998, 0.10563633885824852, 0.11188308205140507, 0.115776251817583, 0.10097361304176866, 0.09042796994295366, 0.14880949890428163, 0.1325934670430281, 0.19583144394655738, 0.12493560537378257, 0.18502724360352996, 0.12882282471558337, 0.13515223906191365, 0.12827721213156107, 0.14236695678275868, 0.3122690889056031, 0.34125131901950245, 0.3189119476463479, 0.31728298209870665, 0.3414408983994017, 0.33979007787767723, 0.3514442661665945, 0.39367957216627925, 0.369656070988143, 0.23198347831140986, 0.22829913043231886, 0.22921597609444966, 0.251120787788886, 0.24167393698168704, 0.20746485258928837, 0.2437880398264347, 0.25592442959305695, 0.26947644647958024, 0.19400567801085455, 0.19406769423076453, 0.19319049200276806, 0.18174325807884217, 0.18412799391645007, 0.19045283601534158, 0.20894670161571838, 0.19400842451017297, 0.1879639634757112, 0.20264811447264242, 0.19211000342460982, 0.19149845884701777, 0.25017257320491837, 0.22831263511238342, 0.22036662728925271, 0.28072120067988604, 0.28244680866028127, 0.20812711488349644, 0.6408741955124668, 0.19353118249237478, 0.16675563759331347, 0.4976859760084008, 0.4892049175611233, 0.5434692771636185, 0.29479481011032405, 0.358640379822735, 0.35862456986207325, 0.192162745419158, 0.487149173780581, 0.5463893453837013, 0.43940400451011496, 0.2755967916157974, 0.18925599111268154, 0.19963567301018081, 0.5414709206077926, 0.19957285232578448, 0.18952249184701553, 0.17765474681583415, 0.17378881812013147, 0.17786551162129505, 0.17920587662617038, 0.2001632955887278, 0.18076833067032516, 0.1801919496025436, 0.1761995299275586, 0.07741636929535567, 0.0830005357116641, 0.07952662108109276, 0.07459185689412862, 0.07674689102508525, 0.06884074856563571, 0.07857791403614434, 0.08405295860230999, 0.0731095590764087]}, "mutation_prompt": null}
{"id": "58668871-fc02-4e15-bde1-339f78c05a48", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 10 * dim\n        self.population_size = self.initial_population_size\n        self.mutation_f = 0.5\n        self.crossover_prob = 0.7\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim)\n        )\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        \n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                if self.used_budget >= self.budget:\n                    break\n\n                # Mutation and recombination\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_f * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial[cross_points] = mutant[cross_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.used_budget += 1\n                if trial_fitness < self.fitness[i]:\n                    self.fitness[i] = trial_fitness\n                    self.population[i] = trial\n\n            # Adaptive mechanisms\n            if self.used_budget > self.budget * 0.5 and self.population_size > self.dim:\n                self.population_size = int(self.initial_population_size / 2)\n\n            # Adaptation of mutation factor and crossover probability\n            self.mutation_f = 0.5 + 0.3 * np.random.rand()\n            self.crossover_prob = 0.5 + 0.4 * np.random.rand()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.used_budget >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1", "name": "AdaptiveDifferentialEvolution", "description": "An Adaptive Differential Evolution algorithm enhanced with dynamic population size adjustment and a more sophisticated crossover strategy to improve convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "686e5765-66bd-4023-bb8f-797cd3285c74", "metadata": {"aucs": [0.7649530760233154, 0.7672203135695314, 0.7425091083534923, 0.7466124230890963, 0.7704599926457998, 0.7545584238429436, 0.7607524557865303, 0.7452759414992235, 0.7480973398464614, 0.5862065060770814, 0.5825938692348882, 0.5860768603755706, 0.5884050674615322, 0.5674125077060967, 0.5826435901385849, 0.5951042015179475, 0.6032313272244649, 0.5731672465217614, 0.25194592521131665, 0.1676756158856184, 0.26291580523412994, 0.2600503255878519, 0.17959807225069402, 0.2335825331252055, 0.2426249825633744, 0.3098139619975633, 0.2238814093442566, 0.16512111046391276, 0.21525969008541834, 0.19464188362095924, 0.12433287421253714, 0.16938508364746163, 0.18976455925568758, 0.13245017086615973, 0.1914663153843057, 0.1874239908218731, 0.9382511363254415, 0.9427002108554231, 0.9335298663510166, 0.9735453086833011, 0.9716724136429433, 0.9510382502908014, 0.9634134672229929, 0.9509589054801365, 0.9258879750336196, 0.3488179661700227, 0.3938629525946634, 0.4347726549811002, 0.4192564353073116, 0.389892254250635, 0.39604469148062593, 0.42641372566848945, 0.4198347262636978, 0.4153207613767891, 0.4290968639230195, 0.5501128315873807, 0.5279342473536783, 0.5823625292882533, 0.5890925402731175, 0.5613742528251338, 0.5809233736272427, 0.5916647914898385, 0.5784694622656943, 0.21674247876611485, 0.18909305362696527, 0.1798032830302967, 0.15696316364485352, 0.1794543951235008, 0.18877119059253666, 0.3004394879386265, 0.2183158139879512, 0.2014575293460571, 0.16751679858993596, 0.1567386612593329, 0.21409862242562416, 0.24158310574334418, 0.2001879571817049, 0.2491357919562368, 0.23606130039657836, 0.2138807332293885, 0.19371853333011013, 0.10317564745716923, 0.08467517496480015, 0.09389911343643675, 0.09573396864087969, 0.07486365299407793, 0.0442967807760688, 0.12878722553210498, 0.0964958657847026, 0.07909484892663587, 0.23590099351112526, 0.20216297112133585, 0.20882497179331172, 0.21456010145039728, 0.20432566242871153, 0.12994546971771215, 0.2511321390500115, 0.2046752316748388, 0.2556081827349247, 0.04524643133393491, 0.03069074890312329, 0.06178105905539266, 0.0699604123885581, 0.04415075947763236, 0.03450183732339096, 0.05304536553524963, 0.08212001961877358, 0.02319607651683253, 0.1588741206119405, 0.16554565624524453, 0.1504714197556989, 0.18339339349809358, 0.15915080336276188, 0.17621457723474965, 0.15410642103848982, 0.14627687511898313, 0.1591600706554931, 0.5436354200512152, 0.5341545209678712, 0.5241850698803925, 0.5599272364565837, 0.5259057857779712, 0.5062025183429466, 0.5395204763904666, 0.5365040376452355, 0.5278764559093689, 0.08535298729770857, 0.09148956013510867, 0.10171053662853569, 0.11574511432253998, 0.10563633885824852, 0.11188308205140507, 0.115776251817583, 0.10097361304176866, 0.09042796994295366, 0.14880949890428163, 0.1325934670430281, 0.19583144394655738, 0.12493560537378257, 0.18502724360352996, 0.12882282471558337, 0.13515223906191365, 0.12827721213156107, 0.14236695678275868, 0.3122690889056031, 0.34125131901950245, 0.3189119476463479, 0.31728298209870665, 0.3414408983994017, 0.33979007787767723, 0.3514442661665945, 0.39367957216627925, 0.369656070988143, 0.23198347831140986, 0.22829913043231886, 0.22921597609444966, 0.251120787788886, 0.24167393698168704, 0.20746485258928837, 0.2437880398264347, 0.25592442959305695, 0.26947644647958024, 0.19400567801085455, 0.19406769423076453, 0.19319049200276806, 0.18174325807884217, 0.18412799391645007, 0.19045283601534158, 0.20894670161571838, 0.19400842451017297, 0.1879639634757112, 0.20264811447264242, 0.19211000342460982, 0.19149845884701777, 0.25017257320491837, 0.22831263511238342, 0.22036662728925271, 0.28072120067988604, 0.28244680866028127, 0.20812711488349644, 0.6408741955124668, 0.19353118249237478, 0.16675563759331347, 0.4976859760084008, 0.4892049175611233, 0.5434692771636185, 0.29479481011032405, 0.358640379822735, 0.35862456986207325, 0.192162745419158, 0.487149173780581, 0.5463893453837013, 0.43940400451011496, 0.2755967916157974, 0.18925599111268154, 0.19963567301018081, 0.5414709206077926, 0.19957285232578448, 0.18952249184701553, 0.17765474681583415, 0.17378881812013147, 0.17786551162129505, 0.17920587662617038, 0.2001632955887278, 0.18076833067032516, 0.1801919496025436, 0.1761995299275586, 0.07741636929535567, 0.0830005357116641, 0.07952662108109276, 0.07459185689412862, 0.07674689102508525, 0.06884074856563571, 0.07857791403614434, 0.08405295860230999, 0.0731095590764087]}, "mutation_prompt": null}
{"id": "d7bcec45-a2ea-4aee-94b4-e27c37efccf9", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 10 * dim\n        self.population_size = self.initial_population_size\n        self.mutation_f = 0.5\n        self.crossover_prob = 0.7\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim)\n        )\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        \n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                if self.used_budget >= self.budget:\n                    break\n\n                # Mutation and recombination\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_f * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial[cross_points] = mutant[cross_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.used_budget += 1\n                if trial_fitness < self.fitness[i]:\n                    self.fitness[i] = trial_fitness\n                    self.population[i] = trial\n\n            # Adaptive mechanisms\n            if self.used_budget > self.budget * 0.5 and self.population_size > self.dim:\n                self.population_size = int(self.initial_population_size / 2)\n\n            # Adaptation of mutation factor and crossover probability\n            self.mutation_f = 0.5 + 0.3 * np.random.rand()\n            self.crossover_prob = 0.5 + 0.4 * np.random.rand()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.used_budget >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1", "name": "AdaptiveDifferentialEvolution", "description": "An Adaptive Differential Evolution algorithm enhanced with dynamic population size adjustment and a more sophisticated crossover strategy to improve convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "686e5765-66bd-4023-bb8f-797cd3285c74", "metadata": {"aucs": [0.7649530760233154, 0.7672203135695314, 0.7425091083534923, 0.7466124230890963, 0.7704599926457998, 0.7545584238429436, 0.7607524557865303, 0.7452759414992235, 0.7480973398464614, 0.5862065060770814, 0.5825938692348882, 0.5860768603755706, 0.5884050674615322, 0.5674125077060967, 0.5826435901385849, 0.5951042015179475, 0.6032313272244649, 0.5731672465217614, 0.25194592521131665, 0.1676756158856184, 0.26291580523412994, 0.2600503255878519, 0.17959807225069402, 0.2335825331252055, 0.2426249825633744, 0.3098139619975633, 0.2238814093442566, 0.16512111046391276, 0.21525969008541834, 0.19464188362095924, 0.12433287421253714, 0.16938508364746163, 0.18976455925568758, 0.13245017086615973, 0.1914663153843057, 0.1874239908218731, 0.9382511363254415, 0.9427002108554231, 0.9335298663510166, 0.9735453086833011, 0.9716724136429433, 0.9510382502908014, 0.9634134672229929, 0.9509589054801365, 0.9258879750336196, 0.3488179661700227, 0.3938629525946634, 0.4347726549811002, 0.4192564353073116, 0.389892254250635, 0.39604469148062593, 0.42641372566848945, 0.4198347262636978, 0.4153207613767891, 0.4290968639230195, 0.5501128315873807, 0.5279342473536783, 0.5823625292882533, 0.5890925402731175, 0.5613742528251338, 0.5809233736272427, 0.5916647914898385, 0.5784694622656943, 0.21674247876611485, 0.18909305362696527, 0.1798032830302967, 0.15696316364485352, 0.1794543951235008, 0.18877119059253666, 0.3004394879386265, 0.2183158139879512, 0.2014575293460571, 0.16751679858993596, 0.1567386612593329, 0.21409862242562416, 0.24158310574334418, 0.2001879571817049, 0.2491357919562368, 0.23606130039657836, 0.2138807332293885, 0.19371853333011013, 0.10317564745716923, 0.08467517496480015, 0.09389911343643675, 0.09573396864087969, 0.07486365299407793, 0.0442967807760688, 0.12878722553210498, 0.0964958657847026, 0.07909484892663587, 0.23590099351112526, 0.20216297112133585, 0.20882497179331172, 0.21456010145039728, 0.20432566242871153, 0.12994546971771215, 0.2511321390500115, 0.2046752316748388, 0.2556081827349247, 0.04524643133393491, 0.03069074890312329, 0.06178105905539266, 0.0699604123885581, 0.04415075947763236, 0.03450183732339096, 0.05304536553524963, 0.08212001961877358, 0.02319607651683253, 0.1588741206119405, 0.16554565624524453, 0.1504714197556989, 0.18339339349809358, 0.15915080336276188, 0.17621457723474965, 0.15410642103848982, 0.14627687511898313, 0.1591600706554931, 0.5436354200512152, 0.5341545209678712, 0.5241850698803925, 0.5599272364565837, 0.5259057857779712, 0.5062025183429466, 0.5395204763904666, 0.5365040376452355, 0.5278764559093689, 0.08535298729770857, 0.09148956013510867, 0.10171053662853569, 0.11574511432253998, 0.10563633885824852, 0.11188308205140507, 0.115776251817583, 0.10097361304176866, 0.09042796994295366, 0.14880949890428163, 0.1325934670430281, 0.19583144394655738, 0.12493560537378257, 0.18502724360352996, 0.12882282471558337, 0.13515223906191365, 0.12827721213156107, 0.14236695678275868, 0.3122690889056031, 0.34125131901950245, 0.3189119476463479, 0.31728298209870665, 0.3414408983994017, 0.33979007787767723, 0.3514442661665945, 0.39367957216627925, 0.369656070988143, 0.23198347831140986, 0.22829913043231886, 0.22921597609444966, 0.251120787788886, 0.24167393698168704, 0.20746485258928837, 0.2437880398264347, 0.25592442959305695, 0.26947644647958024, 0.19400567801085455, 0.19406769423076453, 0.19319049200276806, 0.18174325807884217, 0.18412799391645007, 0.19045283601534158, 0.20894670161571838, 0.19400842451017297, 0.1879639634757112, 0.20264811447264242, 0.19211000342460982, 0.19149845884701777, 0.25017257320491837, 0.22831263511238342, 0.22036662728925271, 0.28072120067988604, 0.28244680866028127, 0.20812711488349644, 0.6408741955124668, 0.19353118249237478, 0.16675563759331347, 0.4976859760084008, 0.4892049175611233, 0.5434692771636185, 0.29479481011032405, 0.358640379822735, 0.35862456986207325, 0.192162745419158, 0.487149173780581, 0.5463893453837013, 0.43940400451011496, 0.2755967916157974, 0.18925599111268154, 0.19963567301018081, 0.5414709206077926, 0.19957285232578448, 0.18952249184701553, 0.17765474681583415, 0.17378881812013147, 0.17786551162129505, 0.17920587662617038, 0.2001632955887278, 0.18076833067032516, 0.1801919496025436, 0.1761995299275586, 0.07741636929535567, 0.0830005357116641, 0.07952662108109276, 0.07459185689412862, 0.07674689102508525, 0.06884074856563571, 0.07857791403614434, 0.08405295860230999, 0.0731095590764087]}, "mutation_prompt": null}
{"id": "1151ec96-8426-419a-8a22-41fb0ec53e3c", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 10 * dim\n        self.population_size = self.initial_population_size\n        self.mutation_f = 0.5\n        self.crossover_prob = 0.7\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim)\n        )\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        \n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                if self.used_budget >= self.budget:\n                    break\n\n                # Mutation and recombination\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_f * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial[cross_points] = mutant[cross_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.used_budget += 1\n                if trial_fitness < self.fitness[i]:\n                    self.fitness[i] = trial_fitness\n                    self.population[i] = trial\n\n            # Adaptive mechanisms\n            if self.used_budget > self.budget * 0.5 and self.population_size > self.dim:\n                self.population_size = int(self.initial_population_size / 2)\n\n            # Adaptation of mutation factor and crossover probability\n            self.mutation_f = 0.5 + 0.3 * np.random.rand()\n            self.crossover_prob = 0.5 + 0.4 * np.random.rand()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.used_budget >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1", "name": "AdaptiveDifferentialEvolution", "description": "An Adaptive Differential Evolution algorithm enhanced with dynamic population size adjustment and a more sophisticated crossover strategy to improve convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "686e5765-66bd-4023-bb8f-797cd3285c74", "metadata": {"aucs": [0.7649530760233154, 0.7672203135695314, 0.7425091083534923, 0.7466124230890963, 0.7704599926457998, 0.7545584238429436, 0.7607524557865303, 0.7452759414992235, 0.7480973398464614, 0.5862065060770814, 0.5825938692348882, 0.5860768603755706, 0.5884050674615322, 0.5674125077060967, 0.5826435901385849, 0.5951042015179475, 0.6032313272244649, 0.5731672465217614, 0.25194592521131665, 0.1676756158856184, 0.26291580523412994, 0.2600503255878519, 0.17959807225069402, 0.2335825331252055, 0.2426249825633744, 0.3098139619975633, 0.2238814093442566, 0.16512111046391276, 0.21525969008541834, 0.19464188362095924, 0.12433287421253714, 0.16938508364746163, 0.18976455925568758, 0.13245017086615973, 0.1914663153843057, 0.1874239908218731, 0.9382511363254415, 0.9427002108554231, 0.9335298663510166, 0.9735453086833011, 0.9716724136429433, 0.9510382502908014, 0.9634134672229929, 0.9509589054801365, 0.9258879750336196, 0.3488179661700227, 0.3938629525946634, 0.4347726549811002, 0.4192564353073116, 0.389892254250635, 0.39604469148062593, 0.42641372566848945, 0.4198347262636978, 0.4153207613767891, 0.4290968639230195, 0.5501128315873807, 0.5279342473536783, 0.5823625292882533, 0.5890925402731175, 0.5613742528251338, 0.5809233736272427, 0.5916647914898385, 0.5784694622656943, 0.21674247876611485, 0.18909305362696527, 0.1798032830302967, 0.15696316364485352, 0.1794543951235008, 0.18877119059253666, 0.3004394879386265, 0.2183158139879512, 0.2014575293460571, 0.16751679858993596, 0.1567386612593329, 0.21409862242562416, 0.24158310574334418, 0.2001879571817049, 0.2491357919562368, 0.23606130039657836, 0.2138807332293885, 0.19371853333011013, 0.10317564745716923, 0.08467517496480015, 0.09389911343643675, 0.09573396864087969, 0.07486365299407793, 0.0442967807760688, 0.12878722553210498, 0.0964958657847026, 0.07909484892663587, 0.23590099351112526, 0.20216297112133585, 0.20882497179331172, 0.21456010145039728, 0.20432566242871153, 0.12994546971771215, 0.2511321390500115, 0.2046752316748388, 0.2556081827349247, 0.04524643133393491, 0.03069074890312329, 0.06178105905539266, 0.0699604123885581, 0.04415075947763236, 0.03450183732339096, 0.05304536553524963, 0.08212001961877358, 0.02319607651683253, 0.1588741206119405, 0.16554565624524453, 0.1504714197556989, 0.18339339349809358, 0.15915080336276188, 0.17621457723474965, 0.15410642103848982, 0.14627687511898313, 0.1591600706554931, 0.5436354200512152, 0.5341545209678712, 0.5241850698803925, 0.5599272364565837, 0.5259057857779712, 0.5062025183429466, 0.5395204763904666, 0.5365040376452355, 0.5278764559093689, 0.08535298729770857, 0.09148956013510867, 0.10171053662853569, 0.11574511432253998, 0.10563633885824852, 0.11188308205140507, 0.115776251817583, 0.10097361304176866, 0.09042796994295366, 0.14880949890428163, 0.1325934670430281, 0.19583144394655738, 0.12493560537378257, 0.18502724360352996, 0.12882282471558337, 0.13515223906191365, 0.12827721213156107, 0.14236695678275868, 0.3122690889056031, 0.34125131901950245, 0.3189119476463479, 0.31728298209870665, 0.3414408983994017, 0.33979007787767723, 0.3514442661665945, 0.39367957216627925, 0.369656070988143, 0.23198347831140986, 0.22829913043231886, 0.22921597609444966, 0.251120787788886, 0.24167393698168704, 0.20746485258928837, 0.2437880398264347, 0.25592442959305695, 0.26947644647958024, 0.19400567801085455, 0.19406769423076453, 0.19319049200276806, 0.18174325807884217, 0.18412799391645007, 0.19045283601534158, 0.20894670161571838, 0.19400842451017297, 0.1879639634757112, 0.20264811447264242, 0.19211000342460982, 0.19149845884701777, 0.25017257320491837, 0.22831263511238342, 0.22036662728925271, 0.28072120067988604, 0.28244680866028127, 0.20812711488349644, 0.6408741955124668, 0.19353118249237478, 0.16675563759331347, 0.4976859760084008, 0.4892049175611233, 0.5434692771636185, 0.29479481011032405, 0.358640379822735, 0.35862456986207325, 0.192162745419158, 0.487149173780581, 0.5463893453837013, 0.43940400451011496, 0.2755967916157974, 0.18925599111268154, 0.19963567301018081, 0.5414709206077926, 0.19957285232578448, 0.18952249184701553, 0.17765474681583415, 0.17378881812013147, 0.17786551162129505, 0.17920587662617038, 0.2001632955887278, 0.18076833067032516, 0.1801919496025436, 0.1761995299275586, 0.07741636929535567, 0.0830005357116641, 0.07952662108109276, 0.07459185689412862, 0.07674689102508525, 0.06884074856563571, 0.07857791403614434, 0.08405295860230999, 0.0731095590764087]}, "mutation_prompt": null}
{"id": "6e51ea80-58b1-4582-80e7-3d69078ae324", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 10 * dim\n        self.population_size = self.initial_population_size\n        self.mutation_f = 0.5\n        self.crossover_prob = 0.7\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim)\n        )\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        \n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                if self.used_budget >= self.budget:\n                    break\n\n                # Mutation and recombination\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_f * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial[cross_points] = mutant[cross_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.used_budget += 1\n                if trial_fitness < self.fitness[i]:\n                    self.fitness[i] = trial_fitness\n                    self.population[i] = trial\n\n            # Adaptive mechanisms\n            if self.used_budget > self.budget * 0.5 and self.population_size > self.dim:\n                self.population_size = int(self.initial_population_size / 2)\n\n            # Adaptation of mutation factor and crossover probability\n            self.mutation_f = 0.5 + 0.3 * np.random.rand()\n            self.crossover_prob = 0.5 + 0.4 * np.random.rand()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.used_budget >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1", "name": "AdaptiveDifferentialEvolution", "description": "An Adaptive Differential Evolution algorithm enhanced with dynamic population size adjustment and a more sophisticated crossover strategy to improve convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "686e5765-66bd-4023-bb8f-797cd3285c74", "metadata": {"aucs": [0.7649530760233154, 0.7672203135695314, 0.7425091083534923, 0.7466124230890963, 0.7704599926457998, 0.7545584238429436, 0.7607524557865303, 0.7452759414992235, 0.7480973398464614, 0.5862065060770814, 0.5825938692348882, 0.5860768603755706, 0.5884050674615322, 0.5674125077060967, 0.5826435901385849, 0.5951042015179475, 0.6032313272244649, 0.5731672465217614, 0.25194592521131665, 0.1676756158856184, 0.26291580523412994, 0.2600503255878519, 0.17959807225069402, 0.2335825331252055, 0.2426249825633744, 0.3098139619975633, 0.2238814093442566, 0.16512111046391276, 0.21525969008541834, 0.19464188362095924, 0.12433287421253714, 0.16938508364746163, 0.18976455925568758, 0.13245017086615973, 0.1914663153843057, 0.1874239908218731, 0.9382511363254415, 0.9427002108554231, 0.9335298663510166, 0.9735453086833011, 0.9716724136429433, 0.9510382502908014, 0.9634134672229929, 0.9509589054801365, 0.9258879750336196, 0.3488179661700227, 0.3938629525946634, 0.4347726549811002, 0.4192564353073116, 0.389892254250635, 0.39604469148062593, 0.42641372566848945, 0.4198347262636978, 0.4153207613767891, 0.4290968639230195, 0.5501128315873807, 0.5279342473536783, 0.5823625292882533, 0.5890925402731175, 0.5613742528251338, 0.5809233736272427, 0.5916647914898385, 0.5784694622656943, 0.21674247876611485, 0.18909305362696527, 0.1798032830302967, 0.15696316364485352, 0.1794543951235008, 0.18877119059253666, 0.3004394879386265, 0.2183158139879512, 0.2014575293460571, 0.16751679858993596, 0.1567386612593329, 0.21409862242562416, 0.24158310574334418, 0.2001879571817049, 0.2491357919562368, 0.23606130039657836, 0.2138807332293885, 0.19371853333011013, 0.10317564745716923, 0.08467517496480015, 0.09389911343643675, 0.09573396864087969, 0.07486365299407793, 0.0442967807760688, 0.12878722553210498, 0.0964958657847026, 0.07909484892663587, 0.23590099351112526, 0.20216297112133585, 0.20882497179331172, 0.21456010145039728, 0.20432566242871153, 0.12994546971771215, 0.2511321390500115, 0.2046752316748388, 0.2556081827349247, 0.04524643133393491, 0.03069074890312329, 0.06178105905539266, 0.0699604123885581, 0.04415075947763236, 0.03450183732339096, 0.05304536553524963, 0.08212001961877358, 0.02319607651683253, 0.1588741206119405, 0.16554565624524453, 0.1504714197556989, 0.18339339349809358, 0.15915080336276188, 0.17621457723474965, 0.15410642103848982, 0.14627687511898313, 0.1591600706554931, 0.5436354200512152, 0.5341545209678712, 0.5241850698803925, 0.5599272364565837, 0.5259057857779712, 0.5062025183429466, 0.5395204763904666, 0.5365040376452355, 0.5278764559093689, 0.08535298729770857, 0.09148956013510867, 0.10171053662853569, 0.11574511432253998, 0.10563633885824852, 0.11188308205140507, 0.115776251817583, 0.10097361304176866, 0.09042796994295366, 0.14880949890428163, 0.1325934670430281, 0.19583144394655738, 0.12493560537378257, 0.18502724360352996, 0.12882282471558337, 0.13515223906191365, 0.12827721213156107, 0.14236695678275868, 0.3122690889056031, 0.34125131901950245, 0.3189119476463479, 0.31728298209870665, 0.3414408983994017, 0.33979007787767723, 0.3514442661665945, 0.39367957216627925, 0.369656070988143, 0.23198347831140986, 0.22829913043231886, 0.22921597609444966, 0.251120787788886, 0.24167393698168704, 0.20746485258928837, 0.2437880398264347, 0.25592442959305695, 0.26947644647958024, 0.19400567801085455, 0.19406769423076453, 0.19319049200276806, 0.18174325807884217, 0.18412799391645007, 0.19045283601534158, 0.20894670161571838, 0.19400842451017297, 0.1879639634757112, 0.20264811447264242, 0.19211000342460982, 0.19149845884701777, 0.25017257320491837, 0.22831263511238342, 0.22036662728925271, 0.28072120067988604, 0.28244680866028127, 0.20812711488349644, 0.6408741955124668, 0.19353118249237478, 0.16675563759331347, 0.4976859760084008, 0.4892049175611233, 0.5434692771636185, 0.29479481011032405, 0.358640379822735, 0.35862456986207325, 0.192162745419158, 0.487149173780581, 0.5463893453837013, 0.43940400451011496, 0.2755967916157974, 0.18925599111268154, 0.19963567301018081, 0.5414709206077926, 0.19957285232578448, 0.18952249184701553, 0.17765474681583415, 0.17378881812013147, 0.17786551162129505, 0.17920587662617038, 0.2001632955887278, 0.18076833067032516, 0.1801919496025436, 0.1761995299275586, 0.07741636929535567, 0.0830005357116641, 0.07952662108109276, 0.07459185689412862, 0.07674689102508525, 0.06884074856563571, 0.07857791403614434, 0.08405295860230999, 0.0731095590764087]}, "mutation_prompt": null}
{"id": "8bc629cf-cc30-477f-9d85-47964b1a192a", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 10 * dim\n        self.population_size = self.initial_population_size\n        self.mutation_f = 0.5\n        self.crossover_prob = 0.7\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim)\n        )\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        \n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                if self.used_budget >= self.budget:\n                    break\n\n                # Mutation and recombination\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_f * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial[cross_points] = mutant[cross_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.used_budget += 1\n                if trial_fitness < self.fitness[i]:\n                    self.fitness[i] = trial_fitness\n                    self.population[i] = trial\n\n            # Adaptive mechanisms\n            if self.used_budget > self.budget * 0.5 and self.population_size > self.dim:\n                self.population_size = int(self.initial_population_size / 2)\n\n            # Adaptation of mutation factor and crossover probability\n            self.mutation_f = 0.5 + 0.3 * np.random.rand()\n            self.crossover_prob = 0.5 + 0.4 * np.random.rand()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.used_budget >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1", "name": "AdaptiveDifferentialEvolution", "description": "An Adaptive Differential Evolution algorithm enhanced with dynamic population size adjustment and a more sophisticated crossover strategy to improve convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "686e5765-66bd-4023-bb8f-797cd3285c74", "metadata": {"aucs": [0.7649530760233154, 0.7672203135695314, 0.7425091083534923, 0.7466124230890963, 0.7704599926457998, 0.7545584238429436, 0.7607524557865303, 0.7452759414992235, 0.7480973398464614, 0.5862065060770814, 0.5825938692348882, 0.5860768603755706, 0.5884050674615322, 0.5674125077060967, 0.5826435901385849, 0.5951042015179475, 0.6032313272244649, 0.5731672465217614, 0.25194592521131665, 0.1676756158856184, 0.26291580523412994, 0.2600503255878519, 0.17959807225069402, 0.2335825331252055, 0.2426249825633744, 0.3098139619975633, 0.2238814093442566, 0.16512111046391276, 0.21525969008541834, 0.19464188362095924, 0.12433287421253714, 0.16938508364746163, 0.18976455925568758, 0.13245017086615973, 0.1914663153843057, 0.1874239908218731, 0.9382511363254415, 0.9427002108554231, 0.9335298663510166, 0.9735453086833011, 0.9716724136429433, 0.9510382502908014, 0.9634134672229929, 0.9509589054801365, 0.9258879750336196, 0.3488179661700227, 0.3938629525946634, 0.4347726549811002, 0.4192564353073116, 0.389892254250635, 0.39604469148062593, 0.42641372566848945, 0.4198347262636978, 0.4153207613767891, 0.4290968639230195, 0.5501128315873807, 0.5279342473536783, 0.5823625292882533, 0.5890925402731175, 0.5613742528251338, 0.5809233736272427, 0.5916647914898385, 0.5784694622656943, 0.21674247876611485, 0.18909305362696527, 0.1798032830302967, 0.15696316364485352, 0.1794543951235008, 0.18877119059253666, 0.3004394879386265, 0.2183158139879512, 0.2014575293460571, 0.16751679858993596, 0.1567386612593329, 0.21409862242562416, 0.24158310574334418, 0.2001879571817049, 0.2491357919562368, 0.23606130039657836, 0.2138807332293885, 0.19371853333011013, 0.10317564745716923, 0.08467517496480015, 0.09389911343643675, 0.09573396864087969, 0.07486365299407793, 0.0442967807760688, 0.12878722553210498, 0.0964958657847026, 0.07909484892663587, 0.23590099351112526, 0.20216297112133585, 0.20882497179331172, 0.21456010145039728, 0.20432566242871153, 0.12994546971771215, 0.2511321390500115, 0.2046752316748388, 0.2556081827349247, 0.04524643133393491, 0.03069074890312329, 0.06178105905539266, 0.0699604123885581, 0.04415075947763236, 0.03450183732339096, 0.05304536553524963, 0.08212001961877358, 0.02319607651683253, 0.1588741206119405, 0.16554565624524453, 0.1504714197556989, 0.18339339349809358, 0.15915080336276188, 0.17621457723474965, 0.15410642103848982, 0.14627687511898313, 0.1591600706554931, 0.5436354200512152, 0.5341545209678712, 0.5241850698803925, 0.5599272364565837, 0.5259057857779712, 0.5062025183429466, 0.5395204763904666, 0.5365040376452355, 0.5278764559093689, 0.08535298729770857, 0.09148956013510867, 0.10171053662853569, 0.11574511432253998, 0.10563633885824852, 0.11188308205140507, 0.115776251817583, 0.10097361304176866, 0.09042796994295366, 0.14880949890428163, 0.1325934670430281, 0.19583144394655738, 0.12493560537378257, 0.18502724360352996, 0.12882282471558337, 0.13515223906191365, 0.12827721213156107, 0.14236695678275868, 0.3122690889056031, 0.34125131901950245, 0.3189119476463479, 0.31728298209870665, 0.3414408983994017, 0.33979007787767723, 0.3514442661665945, 0.39367957216627925, 0.369656070988143, 0.23198347831140986, 0.22829913043231886, 0.22921597609444966, 0.251120787788886, 0.24167393698168704, 0.20746485258928837, 0.2437880398264347, 0.25592442959305695, 0.26947644647958024, 0.19400567801085455, 0.19406769423076453, 0.19319049200276806, 0.18174325807884217, 0.18412799391645007, 0.19045283601534158, 0.20894670161571838, 0.19400842451017297, 0.1879639634757112, 0.20264811447264242, 0.19211000342460982, 0.19149845884701777, 0.25017257320491837, 0.22831263511238342, 0.22036662728925271, 0.28072120067988604, 0.28244680866028127, 0.20812711488349644, 0.6408741955124668, 0.19353118249237478, 0.16675563759331347, 0.4976859760084008, 0.4892049175611233, 0.5434692771636185, 0.29479481011032405, 0.358640379822735, 0.35862456986207325, 0.192162745419158, 0.487149173780581, 0.5463893453837013, 0.43940400451011496, 0.2755967916157974, 0.18925599111268154, 0.19963567301018081, 0.5414709206077926, 0.19957285232578448, 0.18952249184701553, 0.17765474681583415, 0.17378881812013147, 0.17786551162129505, 0.17920587662617038, 0.2001632955887278, 0.18076833067032516, 0.1801919496025436, 0.1761995299275586, 0.07741636929535567, 0.0830005357116641, 0.07952662108109276, 0.07459185689412862, 0.07674689102508525, 0.06884074856563571, 0.07857791403614434, 0.08405295860230999, 0.0731095590764087]}, "mutation_prompt": null}
{"id": "57056310-843a-445f-ac64-76ab0fff0f32", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 10 * dim\n        self.population_size = self.initial_population_size\n        self.mutation_f = 0.5\n        self.crossover_prob = 0.7\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim)\n        )\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        \n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                if self.used_budget >= self.budget:\n                    break\n\n                # Mutation and recombination\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_f * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial[cross_points] = mutant[cross_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.used_budget += 1\n                if trial_fitness < self.fitness[i]:\n                    self.fitness[i] = trial_fitness\n                    self.population[i] = trial\n\n            # Adaptive mechanisms\n            if self.used_budget > self.budget * 0.5 and self.population_size > self.dim:\n                self.population_size = int(self.initial_population_size / 2)\n\n            # Adaptation of mutation factor and crossover probability\n            self.mutation_f = 0.5 + 0.3 * np.random.rand()\n            self.crossover_prob = 0.5 + 0.4 * np.random.rand()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.used_budget >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1", "name": "AdaptiveDifferentialEvolution", "description": "An Adaptive Differential Evolution algorithm enhanced with dynamic population size adjustment and a more sophisticated crossover strategy to improve convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "686e5765-66bd-4023-bb8f-797cd3285c74", "metadata": {"aucs": [0.7649530760233154, 0.7672203135695314, 0.7425091083534923, 0.7466124230890963, 0.7704599926457998, 0.7545584238429436, 0.7607524557865303, 0.7452759414992235, 0.7480973398464614, 0.5862065060770814, 0.5825938692348882, 0.5860768603755706, 0.5884050674615322, 0.5674125077060967, 0.5826435901385849, 0.5951042015179475, 0.6032313272244649, 0.5731672465217614, 0.25194592521131665, 0.1676756158856184, 0.26291580523412994, 0.2600503255878519, 0.17959807225069402, 0.2335825331252055, 0.2426249825633744, 0.3098139619975633, 0.2238814093442566, 0.16512111046391276, 0.21525969008541834, 0.19464188362095924, 0.12433287421253714, 0.16938508364746163, 0.18976455925568758, 0.13245017086615973, 0.1914663153843057, 0.1874239908218731, 0.9382511363254415, 0.9427002108554231, 0.9335298663510166, 0.9735453086833011, 0.9716724136429433, 0.9510382502908014, 0.9634134672229929, 0.9509589054801365, 0.9258879750336196, 0.3488179661700227, 0.3938629525946634, 0.4347726549811002, 0.4192564353073116, 0.389892254250635, 0.39604469148062593, 0.42641372566848945, 0.4198347262636978, 0.4153207613767891, 0.4290968639230195, 0.5501128315873807, 0.5279342473536783, 0.5823625292882533, 0.5890925402731175, 0.5613742528251338, 0.5809233736272427, 0.5916647914898385, 0.5784694622656943, 0.21674247876611485, 0.18909305362696527, 0.1798032830302967, 0.15696316364485352, 0.1794543951235008, 0.18877119059253666, 0.3004394879386265, 0.2183158139879512, 0.2014575293460571, 0.16751679858993596, 0.1567386612593329, 0.21409862242562416, 0.24158310574334418, 0.2001879571817049, 0.2491357919562368, 0.23606130039657836, 0.2138807332293885, 0.19371853333011013, 0.10317564745716923, 0.08467517496480015, 0.09389911343643675, 0.09573396864087969, 0.07486365299407793, 0.0442967807760688, 0.12878722553210498, 0.0964958657847026, 0.07909484892663587, 0.23590099351112526, 0.20216297112133585, 0.20882497179331172, 0.21456010145039728, 0.20432566242871153, 0.12994546971771215, 0.2511321390500115, 0.2046752316748388, 0.2556081827349247, 0.04524643133393491, 0.03069074890312329, 0.06178105905539266, 0.0699604123885581, 0.04415075947763236, 0.03450183732339096, 0.05304536553524963, 0.08212001961877358, 0.02319607651683253, 0.1588741206119405, 0.16554565624524453, 0.1504714197556989, 0.18339339349809358, 0.15915080336276188, 0.17621457723474965, 0.15410642103848982, 0.14627687511898313, 0.1591600706554931, 0.5436354200512152, 0.5341545209678712, 0.5241850698803925, 0.5599272364565837, 0.5259057857779712, 0.5062025183429466, 0.5395204763904666, 0.5365040376452355, 0.5278764559093689, 0.08535298729770857, 0.09148956013510867, 0.10171053662853569, 0.11574511432253998, 0.10563633885824852, 0.11188308205140507, 0.115776251817583, 0.10097361304176866, 0.09042796994295366, 0.14880949890428163, 0.1325934670430281, 0.19583144394655738, 0.12493560537378257, 0.18502724360352996, 0.12882282471558337, 0.13515223906191365, 0.12827721213156107, 0.14236695678275868, 0.3122690889056031, 0.34125131901950245, 0.3189119476463479, 0.31728298209870665, 0.3414408983994017, 0.33979007787767723, 0.3514442661665945, 0.39367957216627925, 0.369656070988143, 0.23198347831140986, 0.22829913043231886, 0.22921597609444966, 0.251120787788886, 0.24167393698168704, 0.20746485258928837, 0.2437880398264347, 0.25592442959305695, 0.26947644647958024, 0.19400567801085455, 0.19406769423076453, 0.19319049200276806, 0.18174325807884217, 0.18412799391645007, 0.19045283601534158, 0.20894670161571838, 0.19400842451017297, 0.1879639634757112, 0.20264811447264242, 0.19211000342460982, 0.19149845884701777, 0.25017257320491837, 0.22831263511238342, 0.22036662728925271, 0.28072120067988604, 0.28244680866028127, 0.20812711488349644, 0.6408741955124668, 0.19353118249237478, 0.16675563759331347, 0.4976859760084008, 0.4892049175611233, 0.5434692771636185, 0.29479481011032405, 0.358640379822735, 0.35862456986207325, 0.192162745419158, 0.487149173780581, 0.5463893453837013, 0.43940400451011496, 0.2755967916157974, 0.18925599111268154, 0.19963567301018081, 0.5414709206077926, 0.19957285232578448, 0.18952249184701553, 0.17765474681583415, 0.17378881812013147, 0.17786551162129505, 0.17920587662617038, 0.2001632955887278, 0.18076833067032516, 0.1801919496025436, 0.1761995299275586, 0.07741636929535567, 0.0830005357116641, 0.07952662108109276, 0.07459185689412862, 0.07674689102508525, 0.06884074856563571, 0.07857791403614434, 0.08405295860230999, 0.0731095590764087]}, "mutation_prompt": null}
{"id": "c5748b7f-dd1a-4437-89a8-d26708493005", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 10 * dim\n        self.population_size = self.initial_population_size\n        self.mutation_f = 0.5\n        self.crossover_prob = 0.7\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim)\n        )\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        \n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                if self.used_budget >= self.budget:\n                    break\n\n                # Mutation and recombination\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_f * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial[cross_points] = mutant[cross_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.used_budget += 1\n                if trial_fitness < self.fitness[i]:\n                    self.fitness[i] = trial_fitness\n                    self.population[i] = trial\n\n            # Adaptive mechanisms\n            if self.used_budget > self.budget * 0.5 and self.population_size > self.dim:\n                self.population_size = int(self.initial_population_size / 2)\n\n            # Adaptation of mutation factor and crossover probability\n            self.mutation_f = 0.5 + 0.3 * np.random.rand()\n            self.crossover_prob = 0.5 + 0.4 * np.random.rand()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.used_budget >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1", "name": "AdaptiveDifferentialEvolution", "description": "An Adaptive Differential Evolution algorithm enhanced with dynamic population size adjustment and a more sophisticated crossover strategy to improve convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "686e5765-66bd-4023-bb8f-797cd3285c74", "metadata": {"aucs": [0.7649530760233154, 0.7672203135695314, 0.7425091083534923, 0.7466124230890963, 0.7704599926457998, 0.7545584238429436, 0.7607524557865303, 0.7452759414992235, 0.7480973398464614, 0.5862065060770814, 0.5825938692348882, 0.5860768603755706, 0.5884050674615322, 0.5674125077060967, 0.5826435901385849, 0.5951042015179475, 0.6032313272244649, 0.5731672465217614, 0.25194592521131665, 0.1676756158856184, 0.26291580523412994, 0.2600503255878519, 0.17959807225069402, 0.2335825331252055, 0.2426249825633744, 0.3098139619975633, 0.2238814093442566, 0.16512111046391276, 0.21525969008541834, 0.19464188362095924, 0.12433287421253714, 0.16938508364746163, 0.18976455925568758, 0.13245017086615973, 0.1914663153843057, 0.1874239908218731, 0.9382511363254415, 0.9427002108554231, 0.9335298663510166, 0.9735453086833011, 0.9716724136429433, 0.9510382502908014, 0.9634134672229929, 0.9509589054801365, 0.9258879750336196, 0.3488179661700227, 0.3938629525946634, 0.4347726549811002, 0.4192564353073116, 0.389892254250635, 0.39604469148062593, 0.42641372566848945, 0.4198347262636978, 0.4153207613767891, 0.4290968639230195, 0.5501128315873807, 0.5279342473536783, 0.5823625292882533, 0.5890925402731175, 0.5613742528251338, 0.5809233736272427, 0.5916647914898385, 0.5784694622656943, 0.21674247876611485, 0.18909305362696527, 0.1798032830302967, 0.15696316364485352, 0.1794543951235008, 0.18877119059253666, 0.3004394879386265, 0.2183158139879512, 0.2014575293460571, 0.16751679858993596, 0.1567386612593329, 0.21409862242562416, 0.24158310574334418, 0.2001879571817049, 0.2491357919562368, 0.23606130039657836, 0.2138807332293885, 0.19371853333011013, 0.10317564745716923, 0.08467517496480015, 0.09389911343643675, 0.09573396864087969, 0.07486365299407793, 0.0442967807760688, 0.12878722553210498, 0.0964958657847026, 0.07909484892663587, 0.23590099351112526, 0.20216297112133585, 0.20882497179331172, 0.21456010145039728, 0.20432566242871153, 0.12994546971771215, 0.2511321390500115, 0.2046752316748388, 0.2556081827349247, 0.04524643133393491, 0.03069074890312329, 0.06178105905539266, 0.0699604123885581, 0.04415075947763236, 0.03450183732339096, 0.05304536553524963, 0.08212001961877358, 0.02319607651683253, 0.1588741206119405, 0.16554565624524453, 0.1504714197556989, 0.18339339349809358, 0.15915080336276188, 0.17621457723474965, 0.15410642103848982, 0.14627687511898313, 0.1591600706554931, 0.5436354200512152, 0.5341545209678712, 0.5241850698803925, 0.5599272364565837, 0.5259057857779712, 0.5062025183429466, 0.5395204763904666, 0.5365040376452355, 0.5278764559093689, 0.08535298729770857, 0.09148956013510867, 0.10171053662853569, 0.11574511432253998, 0.10563633885824852, 0.11188308205140507, 0.115776251817583, 0.10097361304176866, 0.09042796994295366, 0.14880949890428163, 0.1325934670430281, 0.19583144394655738, 0.12493560537378257, 0.18502724360352996, 0.12882282471558337, 0.13515223906191365, 0.12827721213156107, 0.14236695678275868, 0.3122690889056031, 0.34125131901950245, 0.3189119476463479, 0.31728298209870665, 0.3414408983994017, 0.33979007787767723, 0.3514442661665945, 0.39367957216627925, 0.369656070988143, 0.23198347831140986, 0.22829913043231886, 0.22921597609444966, 0.251120787788886, 0.24167393698168704, 0.20746485258928837, 0.2437880398264347, 0.25592442959305695, 0.26947644647958024, 0.19400567801085455, 0.19406769423076453, 0.19319049200276806, 0.18174325807884217, 0.18412799391645007, 0.19045283601534158, 0.20894670161571838, 0.19400842451017297, 0.1879639634757112, 0.20264811447264242, 0.19211000342460982, 0.19149845884701777, 0.25017257320491837, 0.22831263511238342, 0.22036662728925271, 0.28072120067988604, 0.28244680866028127, 0.20812711488349644, 0.6408741955124668, 0.19353118249237478, 0.16675563759331347, 0.4976859760084008, 0.4892049175611233, 0.5434692771636185, 0.29479481011032405, 0.358640379822735, 0.35862456986207325, 0.192162745419158, 0.487149173780581, 0.5463893453837013, 0.43940400451011496, 0.2755967916157974, 0.18925599111268154, 0.19963567301018081, 0.5414709206077926, 0.19957285232578448, 0.18952249184701553, 0.17765474681583415, 0.17378881812013147, 0.17786551162129505, 0.17920587662617038, 0.2001632955887278, 0.18076833067032516, 0.1801919496025436, 0.1761995299275586, 0.07741636929535567, 0.0830005357116641, 0.07952662108109276, 0.07459185689412862, 0.07674689102508525, 0.06884074856563571, 0.07857791403614434, 0.08405295860230999, 0.0731095590764087]}, "mutation_prompt": null}
{"id": "d090d52c-8093-4edd-afcc-2bff1f2fee83", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 10 * dim\n        self.population_size = self.initial_population_size\n        self.mutation_f = 0.5\n        self.crossover_prob = 0.7\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim)\n        )\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        \n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                if self.used_budget >= self.budget:\n                    break\n\n                # Mutation and recombination\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_f * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial[cross_points] = mutant[cross_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.used_budget += 1\n                if trial_fitness < self.fitness[i]:\n                    self.fitness[i] = trial_fitness\n                    self.population[i] = trial\n\n            # Adaptive mechanisms\n            if self.used_budget > self.budget * 0.5 and self.population_size > self.dim:\n                self.population_size = int(self.initial_population_size / 2)\n\n            # Adaptation of mutation factor and crossover probability\n            self.mutation_f = 0.5 + 0.3 * np.random.rand()\n            self.crossover_prob = 0.5 + 0.4 * np.random.rand()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.used_budget >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1", "name": "AdaptiveDifferentialEvolution", "description": "An Adaptive Differential Evolution algorithm enhanced with dynamic population size adjustment and a more sophisticated crossover strategy to improve convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "686e5765-66bd-4023-bb8f-797cd3285c74", "metadata": {"aucs": [0.7649530760233154, 0.7672203135695314, 0.7425091083534923, 0.7466124230890963, 0.7704599926457998, 0.7545584238429436, 0.7607524557865303, 0.7452759414992235, 0.7480973398464614, 0.5862065060770814, 0.5825938692348882, 0.5860768603755706, 0.5884050674615322, 0.5674125077060967, 0.5826435901385849, 0.5951042015179475, 0.6032313272244649, 0.5731672465217614, 0.25194592521131665, 0.1676756158856184, 0.26291580523412994, 0.2600503255878519, 0.17959807225069402, 0.2335825331252055, 0.2426249825633744, 0.3098139619975633, 0.2238814093442566, 0.16512111046391276, 0.21525969008541834, 0.19464188362095924, 0.12433287421253714, 0.16938508364746163, 0.18976455925568758, 0.13245017086615973, 0.1914663153843057, 0.1874239908218731, 0.9382511363254415, 0.9427002108554231, 0.9335298663510166, 0.9735453086833011, 0.9716724136429433, 0.9510382502908014, 0.9634134672229929, 0.9509589054801365, 0.9258879750336196, 0.3488179661700227, 0.3938629525946634, 0.4347726549811002, 0.4192564353073116, 0.389892254250635, 0.39604469148062593, 0.42641372566848945, 0.4198347262636978, 0.4153207613767891, 0.4290968639230195, 0.5501128315873807, 0.5279342473536783, 0.5823625292882533, 0.5890925402731175, 0.5613742528251338, 0.5809233736272427, 0.5916647914898385, 0.5784694622656943, 0.21674247876611485, 0.18909305362696527, 0.1798032830302967, 0.15696316364485352, 0.1794543951235008, 0.18877119059253666, 0.3004394879386265, 0.2183158139879512, 0.2014575293460571, 0.16751679858993596, 0.1567386612593329, 0.21409862242562416, 0.24158310574334418, 0.2001879571817049, 0.2491357919562368, 0.23606130039657836, 0.2138807332293885, 0.19371853333011013, 0.10317564745716923, 0.08467517496480015, 0.09389911343643675, 0.09573396864087969, 0.07486365299407793, 0.0442967807760688, 0.12878722553210498, 0.0964958657847026, 0.07909484892663587, 0.23590099351112526, 0.20216297112133585, 0.20882497179331172, 0.21456010145039728, 0.20432566242871153, 0.12994546971771215, 0.2511321390500115, 0.2046752316748388, 0.2556081827349247, 0.04524643133393491, 0.03069074890312329, 0.06178105905539266, 0.0699604123885581, 0.04415075947763236, 0.03450183732339096, 0.05304536553524963, 0.08212001961877358, 0.02319607651683253, 0.1588741206119405, 0.16554565624524453, 0.1504714197556989, 0.18339339349809358, 0.15915080336276188, 0.17621457723474965, 0.15410642103848982, 0.14627687511898313, 0.1591600706554931, 0.5436354200512152, 0.5341545209678712, 0.5241850698803925, 0.5599272364565837, 0.5259057857779712, 0.5062025183429466, 0.5395204763904666, 0.5365040376452355, 0.5278764559093689, 0.08535298729770857, 0.09148956013510867, 0.10171053662853569, 0.11574511432253998, 0.10563633885824852, 0.11188308205140507, 0.115776251817583, 0.10097361304176866, 0.09042796994295366, 0.14880949890428163, 0.1325934670430281, 0.19583144394655738, 0.12493560537378257, 0.18502724360352996, 0.12882282471558337, 0.13515223906191365, 0.12827721213156107, 0.14236695678275868, 0.3122690889056031, 0.34125131901950245, 0.3189119476463479, 0.31728298209870665, 0.3414408983994017, 0.33979007787767723, 0.3514442661665945, 0.39367957216627925, 0.369656070988143, 0.23198347831140986, 0.22829913043231886, 0.22921597609444966, 0.251120787788886, 0.24167393698168704, 0.20746485258928837, 0.2437880398264347, 0.25592442959305695, 0.26947644647958024, 0.19400567801085455, 0.19406769423076453, 0.19319049200276806, 0.18174325807884217, 0.18412799391645007, 0.19045283601534158, 0.20894670161571838, 0.19400842451017297, 0.1879639634757112, 0.20264811447264242, 0.19211000342460982, 0.19149845884701777, 0.25017257320491837, 0.22831263511238342, 0.22036662728925271, 0.28072120067988604, 0.28244680866028127, 0.20812711488349644, 0.6408741955124668, 0.19353118249237478, 0.16675563759331347, 0.4976859760084008, 0.4892049175611233, 0.5434692771636185, 0.29479481011032405, 0.358640379822735, 0.35862456986207325, 0.192162745419158, 0.487149173780581, 0.5463893453837013, 0.43940400451011496, 0.2755967916157974, 0.18925599111268154, 0.19963567301018081, 0.5414709206077926, 0.19957285232578448, 0.18952249184701553, 0.17765474681583415, 0.17378881812013147, 0.17786551162129505, 0.17920587662617038, 0.2001632955887278, 0.18076833067032516, 0.1801919496025436, 0.1761995299275586, 0.07741636929535567, 0.0830005357116641, 0.07952662108109276, 0.07459185689412862, 0.07674689102508525, 0.06884074856563571, 0.07857791403614434, 0.08405295860230999, 0.0731095590764087]}, "mutation_prompt": null}
{"id": "6fa2bdb3-fab7-4659-a560-8ebf634dc4cc", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 10 * dim\n        self.population_size = self.initial_population_size\n        self.mutation_f = 0.5\n        self.crossover_prob = 0.7\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim)\n        )\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        \n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                if self.used_budget >= self.budget:\n                    break\n\n                # Mutation and recombination\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_f * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial[cross_points] = mutant[cross_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.used_budget += 1\n                if trial_fitness < self.fitness[i]:\n                    self.fitness[i] = trial_fitness\n                    self.population[i] = trial\n\n            # Adaptive mechanisms\n            if self.used_budget > self.budget * 0.5 and self.population_size > self.dim:\n                self.population_size = int(self.initial_population_size / 2)\n\n            # Adaptation of mutation factor and crossover probability\n            self.mutation_f = 0.5 + 0.3 * np.random.rand()\n            self.crossover_prob = 0.5 + 0.4 * np.random.rand()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.used_budget >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1", "name": "AdaptiveDifferentialEvolution", "description": "An Adaptive Differential Evolution algorithm enhanced with dynamic population size adjustment and a more sophisticated crossover strategy to improve convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "686e5765-66bd-4023-bb8f-797cd3285c74", "metadata": {"aucs": [0.7649530760233154, 0.7672203135695314, 0.7425091083534923, 0.7466124230890963, 0.7704599926457998, 0.7545584238429436, 0.7607524557865303, 0.7452759414992235, 0.7480973398464614, 0.5862065060770814, 0.5825938692348882, 0.5860768603755706, 0.5884050674615322, 0.5674125077060967, 0.5826435901385849, 0.5951042015179475, 0.6032313272244649, 0.5731672465217614, 0.25194592521131665, 0.1676756158856184, 0.26291580523412994, 0.2600503255878519, 0.17959807225069402, 0.2335825331252055, 0.2426249825633744, 0.3098139619975633, 0.2238814093442566, 0.16512111046391276, 0.21525969008541834, 0.19464188362095924, 0.12433287421253714, 0.16938508364746163, 0.18976455925568758, 0.13245017086615973, 0.1914663153843057, 0.1874239908218731, 0.9382511363254415, 0.9427002108554231, 0.9335298663510166, 0.9735453086833011, 0.9716724136429433, 0.9510382502908014, 0.9634134672229929, 0.9509589054801365, 0.9258879750336196, 0.3488179661700227, 0.3938629525946634, 0.4347726549811002, 0.4192564353073116, 0.389892254250635, 0.39604469148062593, 0.42641372566848945, 0.4198347262636978, 0.4153207613767891, 0.4290968639230195, 0.5501128315873807, 0.5279342473536783, 0.5823625292882533, 0.5890925402731175, 0.5613742528251338, 0.5809233736272427, 0.5916647914898385, 0.5784694622656943, 0.21674247876611485, 0.18909305362696527, 0.1798032830302967, 0.15696316364485352, 0.1794543951235008, 0.18877119059253666, 0.3004394879386265, 0.2183158139879512, 0.2014575293460571, 0.16751679858993596, 0.1567386612593329, 0.21409862242562416, 0.24158310574334418, 0.2001879571817049, 0.2491357919562368, 0.23606130039657836, 0.2138807332293885, 0.19371853333011013, 0.10317564745716923, 0.08467517496480015, 0.09389911343643675, 0.09573396864087969, 0.07486365299407793, 0.0442967807760688, 0.12878722553210498, 0.0964958657847026, 0.07909484892663587, 0.23590099351112526, 0.20216297112133585, 0.20882497179331172, 0.21456010145039728, 0.20432566242871153, 0.12994546971771215, 0.2511321390500115, 0.2046752316748388, 0.2556081827349247, 0.04524643133393491, 0.03069074890312329, 0.06178105905539266, 0.0699604123885581, 0.04415075947763236, 0.03450183732339096, 0.05304536553524963, 0.08212001961877358, 0.02319607651683253, 0.1588741206119405, 0.16554565624524453, 0.1504714197556989, 0.18339339349809358, 0.15915080336276188, 0.17621457723474965, 0.15410642103848982, 0.14627687511898313, 0.1591600706554931, 0.5436354200512152, 0.5341545209678712, 0.5241850698803925, 0.5599272364565837, 0.5259057857779712, 0.5062025183429466, 0.5395204763904666, 0.5365040376452355, 0.5278764559093689, 0.08535298729770857, 0.09148956013510867, 0.10171053662853569, 0.11574511432253998, 0.10563633885824852, 0.11188308205140507, 0.115776251817583, 0.10097361304176866, 0.09042796994295366, 0.14880949890428163, 0.1325934670430281, 0.19583144394655738, 0.12493560537378257, 0.18502724360352996, 0.12882282471558337, 0.13515223906191365, 0.12827721213156107, 0.14236695678275868, 0.3122690889056031, 0.34125131901950245, 0.3189119476463479, 0.31728298209870665, 0.3414408983994017, 0.33979007787767723, 0.3514442661665945, 0.39367957216627925, 0.369656070988143, 0.23198347831140986, 0.22829913043231886, 0.22921597609444966, 0.251120787788886, 0.24167393698168704, 0.20746485258928837, 0.2437880398264347, 0.25592442959305695, 0.26947644647958024, 0.19400567801085455, 0.19406769423076453, 0.19319049200276806, 0.18174325807884217, 0.18412799391645007, 0.19045283601534158, 0.20894670161571838, 0.19400842451017297, 0.1879639634757112, 0.20264811447264242, 0.19211000342460982, 0.19149845884701777, 0.25017257320491837, 0.22831263511238342, 0.22036662728925271, 0.28072120067988604, 0.28244680866028127, 0.20812711488349644, 0.6408741955124668, 0.19353118249237478, 0.16675563759331347, 0.4976859760084008, 0.4892049175611233, 0.5434692771636185, 0.29479481011032405, 0.358640379822735, 0.35862456986207325, 0.192162745419158, 0.487149173780581, 0.5463893453837013, 0.43940400451011496, 0.2755967916157974, 0.18925599111268154, 0.19963567301018081, 0.5414709206077926, 0.19957285232578448, 0.18952249184701553, 0.17765474681583415, 0.17378881812013147, 0.17786551162129505, 0.17920587662617038, 0.2001632955887278, 0.18076833067032516, 0.1801919496025436, 0.1761995299275586, 0.07741636929535567, 0.0830005357116641, 0.07952662108109276, 0.07459185689412862, 0.07674689102508525, 0.06884074856563571, 0.07857791403614434, 0.08405295860230999, 0.0731095590764087]}, "mutation_prompt": null}
{"id": "2d90a2eb-8e70-421f-a415-0a1f6e6d8f81", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 10 * dim\n        self.population_size = self.initial_population_size\n        self.mutation_f = 0.5\n        self.crossover_prob = 0.7\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim)\n        )\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        \n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                if self.used_budget >= self.budget:\n                    break\n\n                # Mutation and recombination\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_f * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial[cross_points] = mutant[cross_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.used_budget += 1\n                if trial_fitness < self.fitness[i]:\n                    self.fitness[i] = trial_fitness\n                    self.population[i] = trial\n\n            # Adaptive mechanisms\n            if self.used_budget > self.budget * 0.5 and self.population_size > self.dim:\n                self.population_size = int(self.initial_population_size / 2)\n\n            # Adaptation of mutation factor and crossover probability\n            self.mutation_f = 0.5 + 0.3 * np.random.rand()\n            self.crossover_prob = 0.5 + 0.4 * np.random.rand()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.used_budget >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1", "name": "AdaptiveDifferentialEvolution", "description": "An Adaptive Differential Evolution algorithm enhanced with dynamic population size adjustment and a more sophisticated crossover strategy to improve convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "686e5765-66bd-4023-bb8f-797cd3285c74", "metadata": {"aucs": [0.7649530760233154, 0.7672203135695314, 0.7425091083534923, 0.7466124230890963, 0.7704599926457998, 0.7545584238429436, 0.7607524557865303, 0.7452759414992235, 0.7480973398464614, 0.5862065060770814, 0.5825938692348882, 0.5860768603755706, 0.5884050674615322, 0.5674125077060967, 0.5826435901385849, 0.5951042015179475, 0.6032313272244649, 0.5731672465217614, 0.25194592521131665, 0.1676756158856184, 0.26291580523412994, 0.2600503255878519, 0.17959807225069402, 0.2335825331252055, 0.2426249825633744, 0.3098139619975633, 0.2238814093442566, 0.16512111046391276, 0.21525969008541834, 0.19464188362095924, 0.12433287421253714, 0.16938508364746163, 0.18976455925568758, 0.13245017086615973, 0.1914663153843057, 0.1874239908218731, 0.9382511363254415, 0.9427002108554231, 0.9335298663510166, 0.9735453086833011, 0.9716724136429433, 0.9510382502908014, 0.9634134672229929, 0.9509589054801365, 0.9258879750336196, 0.3488179661700227, 0.3938629525946634, 0.4347726549811002, 0.4192564353073116, 0.389892254250635, 0.39604469148062593, 0.42641372566848945, 0.4198347262636978, 0.4153207613767891, 0.4290968639230195, 0.5501128315873807, 0.5279342473536783, 0.5823625292882533, 0.5890925402731175, 0.5613742528251338, 0.5809233736272427, 0.5916647914898385, 0.5784694622656943, 0.21674247876611485, 0.18909305362696527, 0.1798032830302967, 0.15696316364485352, 0.1794543951235008, 0.18877119059253666, 0.3004394879386265, 0.2183158139879512, 0.2014575293460571, 0.16751679858993596, 0.1567386612593329, 0.21409862242562416, 0.24158310574334418, 0.2001879571817049, 0.2491357919562368, 0.23606130039657836, 0.2138807332293885, 0.19371853333011013, 0.10317564745716923, 0.08467517496480015, 0.09389911343643675, 0.09573396864087969, 0.07486365299407793, 0.0442967807760688, 0.12878722553210498, 0.0964958657847026, 0.07909484892663587, 0.23590099351112526, 0.20216297112133585, 0.20882497179331172, 0.21456010145039728, 0.20432566242871153, 0.12994546971771215, 0.2511321390500115, 0.2046752316748388, 0.2556081827349247, 0.04524643133393491, 0.03069074890312329, 0.06178105905539266, 0.0699604123885581, 0.04415075947763236, 0.03450183732339096, 0.05304536553524963, 0.08212001961877358, 0.02319607651683253, 0.1588741206119405, 0.16554565624524453, 0.1504714197556989, 0.18339339349809358, 0.15915080336276188, 0.17621457723474965, 0.15410642103848982, 0.14627687511898313, 0.1591600706554931, 0.5436354200512152, 0.5341545209678712, 0.5241850698803925, 0.5599272364565837, 0.5259057857779712, 0.5062025183429466, 0.5395204763904666, 0.5365040376452355, 0.5278764559093689, 0.08535298729770857, 0.09148956013510867, 0.10171053662853569, 0.11574511432253998, 0.10563633885824852, 0.11188308205140507, 0.115776251817583, 0.10097361304176866, 0.09042796994295366, 0.14880949890428163, 0.1325934670430281, 0.19583144394655738, 0.12493560537378257, 0.18502724360352996, 0.12882282471558337, 0.13515223906191365, 0.12827721213156107, 0.14236695678275868, 0.3122690889056031, 0.34125131901950245, 0.3189119476463479, 0.31728298209870665, 0.3414408983994017, 0.33979007787767723, 0.3514442661665945, 0.39367957216627925, 0.369656070988143, 0.23198347831140986, 0.22829913043231886, 0.22921597609444966, 0.251120787788886, 0.24167393698168704, 0.20746485258928837, 0.2437880398264347, 0.25592442959305695, 0.26947644647958024, 0.19400567801085455, 0.19406769423076453, 0.19319049200276806, 0.18174325807884217, 0.18412799391645007, 0.19045283601534158, 0.20894670161571838, 0.19400842451017297, 0.1879639634757112, 0.20264811447264242, 0.19211000342460982, 0.19149845884701777, 0.25017257320491837, 0.22831263511238342, 0.22036662728925271, 0.28072120067988604, 0.28244680866028127, 0.20812711488349644, 0.6408741955124668, 0.19353118249237478, 0.16675563759331347, 0.4976859760084008, 0.4892049175611233, 0.5434692771636185, 0.29479481011032405, 0.358640379822735, 0.35862456986207325, 0.192162745419158, 0.487149173780581, 0.5463893453837013, 0.43940400451011496, 0.2755967916157974, 0.18925599111268154, 0.19963567301018081, 0.5414709206077926, 0.19957285232578448, 0.18952249184701553, 0.17765474681583415, 0.17378881812013147, 0.17786551162129505, 0.17920587662617038, 0.2001632955887278, 0.18076833067032516, 0.1801919496025436, 0.1761995299275586, 0.07741636929535567, 0.0830005357116641, 0.07952662108109276, 0.07459185689412862, 0.07674689102508525, 0.06884074856563571, 0.07857791403614434, 0.08405295860230999, 0.0731095590764087]}, "mutation_prompt": null}
{"id": "e33004de-c1dc-47ee-aced-d616de355569", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 10 * dim\n        self.population_size = self.initial_population_size\n        self.mutation_f = 0.5\n        self.crossover_prob = 0.7\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim)\n        )\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        \n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                if self.used_budget >= self.budget:\n                    break\n\n                # Mutation and recombination\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_f * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial[cross_points] = mutant[cross_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.used_budget += 1\n                if trial_fitness < self.fitness[i]:\n                    self.fitness[i] = trial_fitness\n                    self.population[i] = trial\n\n            # Adaptive mechanisms\n            if self.used_budget > self.budget * 0.5 and self.population_size > self.dim:\n                self.population_size = int(self.initial_population_size / 2)\n\n            # Adaptation of mutation factor and crossover probability\n            self.mutation_f = 0.5 + 0.3 * np.random.rand()\n            self.crossover_prob = 0.5 + 0.4 * np.random.rand()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.used_budget >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1", "name": "AdaptiveDifferentialEvolution", "description": "An Adaptive Differential Evolution algorithm enhanced with dynamic population size adjustment and a more sophisticated crossover strategy to improve convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "686e5765-66bd-4023-bb8f-797cd3285c74", "metadata": {"aucs": [0.7649530760233154, 0.7672203135695314, 0.7425091083534923, 0.7466124230890963, 0.7704599926457998, 0.7545584238429436, 0.7607524557865303, 0.7452759414992235, 0.7480973398464614, 0.5862065060770814, 0.5825938692348882, 0.5860768603755706, 0.5884050674615322, 0.5674125077060967, 0.5826435901385849, 0.5951042015179475, 0.6032313272244649, 0.5731672465217614, 0.25194592521131665, 0.1676756158856184, 0.26291580523412994, 0.2600503255878519, 0.17959807225069402, 0.2335825331252055, 0.2426249825633744, 0.3098139619975633, 0.2238814093442566, 0.16512111046391276, 0.21525969008541834, 0.19464188362095924, 0.12433287421253714, 0.16938508364746163, 0.18976455925568758, 0.13245017086615973, 0.1914663153843057, 0.1874239908218731, 0.9382511363254415, 0.9427002108554231, 0.9335298663510166, 0.9735453086833011, 0.9716724136429433, 0.9510382502908014, 0.9634134672229929, 0.9509589054801365, 0.9258879750336196, 0.3488179661700227, 0.3938629525946634, 0.4347726549811002, 0.4192564353073116, 0.389892254250635, 0.39604469148062593, 0.42641372566848945, 0.4198347262636978, 0.4153207613767891, 0.4290968639230195, 0.5501128315873807, 0.5279342473536783, 0.5823625292882533, 0.5890925402731175, 0.5613742528251338, 0.5809233736272427, 0.5916647914898385, 0.5784694622656943, 0.21674247876611485, 0.18909305362696527, 0.1798032830302967, 0.15696316364485352, 0.1794543951235008, 0.18877119059253666, 0.3004394879386265, 0.2183158139879512, 0.2014575293460571, 0.16751679858993596, 0.1567386612593329, 0.21409862242562416, 0.24158310574334418, 0.2001879571817049, 0.2491357919562368, 0.23606130039657836, 0.2138807332293885, 0.19371853333011013, 0.10317564745716923, 0.08467517496480015, 0.09389911343643675, 0.09573396864087969, 0.07486365299407793, 0.0442967807760688, 0.12878722553210498, 0.0964958657847026, 0.07909484892663587, 0.23590099351112526, 0.20216297112133585, 0.20882497179331172, 0.21456010145039728, 0.20432566242871153, 0.12994546971771215, 0.2511321390500115, 0.2046752316748388, 0.2556081827349247, 0.04524643133393491, 0.03069074890312329, 0.06178105905539266, 0.0699604123885581, 0.04415075947763236, 0.03450183732339096, 0.05304536553524963, 0.08212001961877358, 0.02319607651683253, 0.1588741206119405, 0.16554565624524453, 0.1504714197556989, 0.18339339349809358, 0.15915080336276188, 0.17621457723474965, 0.15410642103848982, 0.14627687511898313, 0.1591600706554931, 0.5436354200512152, 0.5341545209678712, 0.5241850698803925, 0.5599272364565837, 0.5259057857779712, 0.5062025183429466, 0.5395204763904666, 0.5365040376452355, 0.5278764559093689, 0.08535298729770857, 0.09148956013510867, 0.10171053662853569, 0.11574511432253998, 0.10563633885824852, 0.11188308205140507, 0.115776251817583, 0.10097361304176866, 0.09042796994295366, 0.14880949890428163, 0.1325934670430281, 0.19583144394655738, 0.12493560537378257, 0.18502724360352996, 0.12882282471558337, 0.13515223906191365, 0.12827721213156107, 0.14236695678275868, 0.3122690889056031, 0.34125131901950245, 0.3189119476463479, 0.31728298209870665, 0.3414408983994017, 0.33979007787767723, 0.3514442661665945, 0.39367957216627925, 0.369656070988143, 0.23198347831140986, 0.22829913043231886, 0.22921597609444966, 0.251120787788886, 0.24167393698168704, 0.20746485258928837, 0.2437880398264347, 0.25592442959305695, 0.26947644647958024, 0.19400567801085455, 0.19406769423076453, 0.19319049200276806, 0.18174325807884217, 0.18412799391645007, 0.19045283601534158, 0.20894670161571838, 0.19400842451017297, 0.1879639634757112, 0.20264811447264242, 0.19211000342460982, 0.19149845884701777, 0.25017257320491837, 0.22831263511238342, 0.22036662728925271, 0.28072120067988604, 0.28244680866028127, 0.20812711488349644, 0.6408741955124668, 0.19353118249237478, 0.16675563759331347, 0.4976859760084008, 0.4892049175611233, 0.5434692771636185, 0.29479481011032405, 0.358640379822735, 0.35862456986207325, 0.192162745419158, 0.487149173780581, 0.5463893453837013, 0.43940400451011496, 0.2755967916157974, 0.18925599111268154, 0.19963567301018081, 0.5414709206077926, 0.19957285232578448, 0.18952249184701553, 0.17765474681583415, 0.17378881812013147, 0.17786551162129505, 0.17920587662617038, 0.2001632955887278, 0.18076833067032516, 0.1801919496025436, 0.1761995299275586, 0.07741636929535567, 0.0830005357116641, 0.07952662108109276, 0.07459185689412862, 0.07674689102508525, 0.06884074856563571, 0.07857791403614434, 0.08405295860230999, 0.0731095590764087]}, "mutation_prompt": null}
{"id": "acbad95a-1fa7-47bc-bb9b-706aefa97fb3", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 10 * dim\n        self.population_size = self.initial_population_size\n        self.mutation_f = 0.5\n        self.crossover_prob = 0.7\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim)\n        )\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        \n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                if self.used_budget >= self.budget:\n                    break\n\n                # Mutation and recombination\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_f * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial[cross_points] = mutant[cross_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.used_budget += 1\n                if trial_fitness < self.fitness[i]:\n                    self.fitness[i] = trial_fitness\n                    self.population[i] = trial\n\n            # Adaptive mechanisms\n            if self.used_budget > self.budget * 0.5 and self.population_size > self.dim:\n                self.population_size = int(self.initial_population_size / 2)\n\n            # Adaptation of mutation factor and crossover probability\n            self.mutation_f = 0.5 + 0.3 * np.random.rand()\n            self.crossover_prob = 0.5 + 0.4 * np.random.rand()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.used_budget >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1", "name": "AdaptiveDifferentialEvolution", "description": "An Adaptive Differential Evolution algorithm enhanced with dynamic population size adjustment and a more sophisticated crossover strategy to improve convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "686e5765-66bd-4023-bb8f-797cd3285c74", "metadata": {"aucs": [0.7649530760233154, 0.7672203135695314, 0.7425091083534923, 0.7466124230890963, 0.7704599926457998, 0.7545584238429436, 0.7607524557865303, 0.7452759414992235, 0.7480973398464614, 0.5862065060770814, 0.5825938692348882, 0.5860768603755706, 0.5884050674615322, 0.5674125077060967, 0.5826435901385849, 0.5951042015179475, 0.6032313272244649, 0.5731672465217614, 0.25194592521131665, 0.1676756158856184, 0.26291580523412994, 0.2600503255878519, 0.17959807225069402, 0.2335825331252055, 0.2426249825633744, 0.3098139619975633, 0.2238814093442566, 0.16512111046391276, 0.21525969008541834, 0.19464188362095924, 0.12433287421253714, 0.16938508364746163, 0.18976455925568758, 0.13245017086615973, 0.1914663153843057, 0.1874239908218731, 0.9382511363254415, 0.9427002108554231, 0.9335298663510166, 0.9735453086833011, 0.9716724136429433, 0.9510382502908014, 0.9634134672229929, 0.9509589054801365, 0.9258879750336196, 0.3488179661700227, 0.3938629525946634, 0.4347726549811002, 0.4192564353073116, 0.389892254250635, 0.39604469148062593, 0.42641372566848945, 0.4198347262636978, 0.4153207613767891, 0.4290968639230195, 0.5501128315873807, 0.5279342473536783, 0.5823625292882533, 0.5890925402731175, 0.5613742528251338, 0.5809233736272427, 0.5916647914898385, 0.5784694622656943, 0.21674247876611485, 0.18909305362696527, 0.1798032830302967, 0.15696316364485352, 0.1794543951235008, 0.18877119059253666, 0.3004394879386265, 0.2183158139879512, 0.2014575293460571, 0.16751679858993596, 0.1567386612593329, 0.21409862242562416, 0.24158310574334418, 0.2001879571817049, 0.2491357919562368, 0.23606130039657836, 0.2138807332293885, 0.19371853333011013, 0.10317564745716923, 0.08467517496480015, 0.09389911343643675, 0.09573396864087969, 0.07486365299407793, 0.0442967807760688, 0.12878722553210498, 0.0964958657847026, 0.07909484892663587, 0.23590099351112526, 0.20216297112133585, 0.20882497179331172, 0.21456010145039728, 0.20432566242871153, 0.12994546971771215, 0.2511321390500115, 0.2046752316748388, 0.2556081827349247, 0.04524643133393491, 0.03069074890312329, 0.06178105905539266, 0.0699604123885581, 0.04415075947763236, 0.03450183732339096, 0.05304536553524963, 0.08212001961877358, 0.02319607651683253, 0.1588741206119405, 0.16554565624524453, 0.1504714197556989, 0.18339339349809358, 0.15915080336276188, 0.17621457723474965, 0.15410642103848982, 0.14627687511898313, 0.1591600706554931, 0.5436354200512152, 0.5341545209678712, 0.5241850698803925, 0.5599272364565837, 0.5259057857779712, 0.5062025183429466, 0.5395204763904666, 0.5365040376452355, 0.5278764559093689, 0.08535298729770857, 0.09148956013510867, 0.10171053662853569, 0.11574511432253998, 0.10563633885824852, 0.11188308205140507, 0.115776251817583, 0.10097361304176866, 0.09042796994295366, 0.14880949890428163, 0.1325934670430281, 0.19583144394655738, 0.12493560537378257, 0.18502724360352996, 0.12882282471558337, 0.13515223906191365, 0.12827721213156107, 0.14236695678275868, 0.3122690889056031, 0.34125131901950245, 0.3189119476463479, 0.31728298209870665, 0.3414408983994017, 0.33979007787767723, 0.3514442661665945, 0.39367957216627925, 0.369656070988143, 0.23198347831140986, 0.22829913043231886, 0.22921597609444966, 0.251120787788886, 0.24167393698168704, 0.20746485258928837, 0.2437880398264347, 0.25592442959305695, 0.26947644647958024, 0.19400567801085455, 0.19406769423076453, 0.19319049200276806, 0.18174325807884217, 0.18412799391645007, 0.19045283601534158, 0.20894670161571838, 0.19400842451017297, 0.1879639634757112, 0.20264811447264242, 0.19211000342460982, 0.19149845884701777, 0.25017257320491837, 0.22831263511238342, 0.22036662728925271, 0.28072120067988604, 0.28244680866028127, 0.20812711488349644, 0.6408741955124668, 0.19353118249237478, 0.16675563759331347, 0.4976859760084008, 0.4892049175611233, 0.5434692771636185, 0.29479481011032405, 0.358640379822735, 0.35862456986207325, 0.192162745419158, 0.487149173780581, 0.5463893453837013, 0.43940400451011496, 0.2755967916157974, 0.18925599111268154, 0.19963567301018081, 0.5414709206077926, 0.19957285232578448, 0.18952249184701553, 0.17765474681583415, 0.17378881812013147, 0.17786551162129505, 0.17920587662617038, 0.2001632955887278, 0.18076833067032516, 0.1801919496025436, 0.1761995299275586, 0.07741636929535567, 0.0830005357116641, 0.07952662108109276, 0.07459185689412862, 0.07674689102508525, 0.06884074856563571, 0.07857791403614434, 0.08405295860230999, 0.0731095590764087]}, "mutation_prompt": null}
{"id": "ceb3a73e-3684-4b90-9309-0c01493c3c08", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 10 * dim\n        self.population_size = self.initial_population_size\n        self.mutation_f = 0.5\n        self.crossover_prob = 0.7\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim)\n        )\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        \n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                if self.used_budget >= self.budget:\n                    break\n\n                # Mutation and recombination\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_f * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial[cross_points] = mutant[cross_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.used_budget += 1\n                if trial_fitness < self.fitness[i]:\n                    self.fitness[i] = trial_fitness\n                    self.population[i] = trial\n\n            # Adaptive mechanisms\n            if self.used_budget > self.budget * 0.5 and self.population_size > self.dim:\n                self.population_size = int(self.initial_population_size / 2)\n\n            # Adaptation of mutation factor and crossover probability\n            self.mutation_f = 0.5 + 0.3 * np.random.rand()\n            self.crossover_prob = 0.5 + 0.4 * np.random.rand()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.used_budget >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1", "name": "AdaptiveDifferentialEvolution", "description": "An Adaptive Differential Evolution algorithm enhanced with dynamic population size adjustment and a more sophisticated crossover strategy to improve convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "686e5765-66bd-4023-bb8f-797cd3285c74", "metadata": {"aucs": [0.7649530760233154, 0.7672203135695314, 0.7425091083534923, 0.7466124230890963, 0.7704599926457998, 0.7545584238429436, 0.7607524557865303, 0.7452759414992235, 0.7480973398464614, 0.5862065060770814, 0.5825938692348882, 0.5860768603755706, 0.5884050674615322, 0.5674125077060967, 0.5826435901385849, 0.5951042015179475, 0.6032313272244649, 0.5731672465217614, 0.25194592521131665, 0.1676756158856184, 0.26291580523412994, 0.2600503255878519, 0.17959807225069402, 0.2335825331252055, 0.2426249825633744, 0.3098139619975633, 0.2238814093442566, 0.16512111046391276, 0.21525969008541834, 0.19464188362095924, 0.12433287421253714, 0.16938508364746163, 0.18976455925568758, 0.13245017086615973, 0.1914663153843057, 0.1874239908218731, 0.9382511363254415, 0.9427002108554231, 0.9335298663510166, 0.9735453086833011, 0.9716724136429433, 0.9510382502908014, 0.9634134672229929, 0.9509589054801365, 0.9258879750336196, 0.3488179661700227, 0.3938629525946634, 0.4347726549811002, 0.4192564353073116, 0.389892254250635, 0.39604469148062593, 0.42641372566848945, 0.4198347262636978, 0.4153207613767891, 0.4290968639230195, 0.5501128315873807, 0.5279342473536783, 0.5823625292882533, 0.5890925402731175, 0.5613742528251338, 0.5809233736272427, 0.5916647914898385, 0.5784694622656943, 0.21674247876611485, 0.18909305362696527, 0.1798032830302967, 0.15696316364485352, 0.1794543951235008, 0.18877119059253666, 0.3004394879386265, 0.2183158139879512, 0.2014575293460571, 0.16751679858993596, 0.1567386612593329, 0.21409862242562416, 0.24158310574334418, 0.2001879571817049, 0.2491357919562368, 0.23606130039657836, 0.2138807332293885, 0.19371853333011013, 0.10317564745716923, 0.08467517496480015, 0.09389911343643675, 0.09573396864087969, 0.07486365299407793, 0.0442967807760688, 0.12878722553210498, 0.0964958657847026, 0.07909484892663587, 0.23590099351112526, 0.20216297112133585, 0.20882497179331172, 0.21456010145039728, 0.20432566242871153, 0.12994546971771215, 0.2511321390500115, 0.2046752316748388, 0.2556081827349247, 0.04524643133393491, 0.03069074890312329, 0.06178105905539266, 0.0699604123885581, 0.04415075947763236, 0.03450183732339096, 0.05304536553524963, 0.08212001961877358, 0.02319607651683253, 0.1588741206119405, 0.16554565624524453, 0.1504714197556989, 0.18339339349809358, 0.15915080336276188, 0.17621457723474965, 0.15410642103848982, 0.14627687511898313, 0.1591600706554931, 0.5436354200512152, 0.5341545209678712, 0.5241850698803925, 0.5599272364565837, 0.5259057857779712, 0.5062025183429466, 0.5395204763904666, 0.5365040376452355, 0.5278764559093689, 0.08535298729770857, 0.09148956013510867, 0.10171053662853569, 0.11574511432253998, 0.10563633885824852, 0.11188308205140507, 0.115776251817583, 0.10097361304176866, 0.09042796994295366, 0.14880949890428163, 0.1325934670430281, 0.19583144394655738, 0.12493560537378257, 0.18502724360352996, 0.12882282471558337, 0.13515223906191365, 0.12827721213156107, 0.14236695678275868, 0.3122690889056031, 0.34125131901950245, 0.3189119476463479, 0.31728298209870665, 0.3414408983994017, 0.33979007787767723, 0.3514442661665945, 0.39367957216627925, 0.369656070988143, 0.23198347831140986, 0.22829913043231886, 0.22921597609444966, 0.251120787788886, 0.24167393698168704, 0.20746485258928837, 0.2437880398264347, 0.25592442959305695, 0.26947644647958024, 0.19400567801085455, 0.19406769423076453, 0.19319049200276806, 0.18174325807884217, 0.18412799391645007, 0.19045283601534158, 0.20894670161571838, 0.19400842451017297, 0.1879639634757112, 0.20264811447264242, 0.19211000342460982, 0.19149845884701777, 0.25017257320491837, 0.22831263511238342, 0.22036662728925271, 0.28072120067988604, 0.28244680866028127, 0.20812711488349644, 0.6408741955124668, 0.19353118249237478, 0.16675563759331347, 0.4976859760084008, 0.4892049175611233, 0.5434692771636185, 0.29479481011032405, 0.358640379822735, 0.35862456986207325, 0.192162745419158, 0.487149173780581, 0.5463893453837013, 0.43940400451011496, 0.2755967916157974, 0.18925599111268154, 0.19963567301018081, 0.5414709206077926, 0.19957285232578448, 0.18952249184701553, 0.17765474681583415, 0.17378881812013147, 0.17786551162129505, 0.17920587662617038, 0.2001632955887278, 0.18076833067032516, 0.1801919496025436, 0.1761995299275586, 0.07741636929535567, 0.0830005357116641, 0.07952662108109276, 0.07459185689412862, 0.07674689102508525, 0.06884074856563571, 0.07857791403614434, 0.08405295860230999, 0.0731095590764087]}, "mutation_prompt": null}
{"id": "8411d771-b98f-466d-b615-b7b14d10e254", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 10 * dim\n        self.population_size = self.initial_population_size\n        self.mutation_f = 0.5\n        self.crossover_prob = 0.7\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim)\n        )\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        \n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                if self.used_budget >= self.budget:\n                    break\n\n                # Mutation and recombination\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_f * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial[cross_points] = mutant[cross_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.used_budget += 1\n                if trial_fitness < self.fitness[i]:\n                    self.fitness[i] = trial_fitness\n                    self.population[i] = trial\n\n            # Adaptive mechanisms\n            if self.used_budget > self.budget * 0.5 and self.population_size > self.dim:\n                self.population_size = int(self.initial_population_size / 2)\n\n            # Adaptation of mutation factor and crossover probability\n            self.mutation_f = 0.5 + 0.3 * np.random.rand()\n            self.crossover_prob = 0.5 + 0.4 * np.random.rand()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.used_budget >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1", "name": "AdaptiveDifferentialEvolution", "description": "An Adaptive Differential Evolution algorithm enhanced with dynamic population size adjustment and a more sophisticated crossover strategy to improve convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "686e5765-66bd-4023-bb8f-797cd3285c74", "metadata": {"aucs": [0.7649530760233154, 0.7672203135695314, 0.7425091083534923, 0.7466124230890963, 0.7704599926457998, 0.7545584238429436, 0.7607524557865303, 0.7452759414992235, 0.7480973398464614, 0.5862065060770814, 0.5825938692348882, 0.5860768603755706, 0.5884050674615322, 0.5674125077060967, 0.5826435901385849, 0.5951042015179475, 0.6032313272244649, 0.5731672465217614, 0.25194592521131665, 0.1676756158856184, 0.26291580523412994, 0.2600503255878519, 0.17959807225069402, 0.2335825331252055, 0.2426249825633744, 0.3098139619975633, 0.2238814093442566, 0.16512111046391276, 0.21525969008541834, 0.19464188362095924, 0.12433287421253714, 0.16938508364746163, 0.18976455925568758, 0.13245017086615973, 0.1914663153843057, 0.1874239908218731, 0.9382511363254415, 0.9427002108554231, 0.9335298663510166, 0.9735453086833011, 0.9716724136429433, 0.9510382502908014, 0.9634134672229929, 0.9509589054801365, 0.9258879750336196, 0.3488179661700227, 0.3938629525946634, 0.4347726549811002, 0.4192564353073116, 0.389892254250635, 0.39604469148062593, 0.42641372566848945, 0.4198347262636978, 0.4153207613767891, 0.4290968639230195, 0.5501128315873807, 0.5279342473536783, 0.5823625292882533, 0.5890925402731175, 0.5613742528251338, 0.5809233736272427, 0.5916647914898385, 0.5784694622656943, 0.21674247876611485, 0.18909305362696527, 0.1798032830302967, 0.15696316364485352, 0.1794543951235008, 0.18877119059253666, 0.3004394879386265, 0.2183158139879512, 0.2014575293460571, 0.16751679858993596, 0.1567386612593329, 0.21409862242562416, 0.24158310574334418, 0.2001879571817049, 0.2491357919562368, 0.23606130039657836, 0.2138807332293885, 0.19371853333011013, 0.10317564745716923, 0.08467517496480015, 0.09389911343643675, 0.09573396864087969, 0.07486365299407793, 0.0442967807760688, 0.12878722553210498, 0.0964958657847026, 0.07909484892663587, 0.23590099351112526, 0.20216297112133585, 0.20882497179331172, 0.21456010145039728, 0.20432566242871153, 0.12994546971771215, 0.2511321390500115, 0.2046752316748388, 0.2556081827349247, 0.04524643133393491, 0.03069074890312329, 0.06178105905539266, 0.0699604123885581, 0.04415075947763236, 0.03450183732339096, 0.05304536553524963, 0.08212001961877358, 0.02319607651683253, 0.1588741206119405, 0.16554565624524453, 0.1504714197556989, 0.18339339349809358, 0.15915080336276188, 0.17621457723474965, 0.15410642103848982, 0.14627687511898313, 0.1591600706554931, 0.5436354200512152, 0.5341545209678712, 0.5241850698803925, 0.5599272364565837, 0.5259057857779712, 0.5062025183429466, 0.5395204763904666, 0.5365040376452355, 0.5278764559093689, 0.08535298729770857, 0.09148956013510867, 0.10171053662853569, 0.11574511432253998, 0.10563633885824852, 0.11188308205140507, 0.115776251817583, 0.10097361304176866, 0.09042796994295366, 0.14880949890428163, 0.1325934670430281, 0.19583144394655738, 0.12493560537378257, 0.18502724360352996, 0.12882282471558337, 0.13515223906191365, 0.12827721213156107, 0.14236695678275868, 0.3122690889056031, 0.34125131901950245, 0.3189119476463479, 0.31728298209870665, 0.3414408983994017, 0.33979007787767723, 0.3514442661665945, 0.39367957216627925, 0.369656070988143, 0.23198347831140986, 0.22829913043231886, 0.22921597609444966, 0.251120787788886, 0.24167393698168704, 0.20746485258928837, 0.2437880398264347, 0.25592442959305695, 0.26947644647958024, 0.19400567801085455, 0.19406769423076453, 0.19319049200276806, 0.18174325807884217, 0.18412799391645007, 0.19045283601534158, 0.20894670161571838, 0.19400842451017297, 0.1879639634757112, 0.20264811447264242, 0.19211000342460982, 0.19149845884701777, 0.25017257320491837, 0.22831263511238342, 0.22036662728925271, 0.28072120067988604, 0.28244680866028127, 0.20812711488349644, 0.6408741955124668, 0.19353118249237478, 0.16675563759331347, 0.4976859760084008, 0.4892049175611233, 0.5434692771636185, 0.29479481011032405, 0.358640379822735, 0.35862456986207325, 0.192162745419158, 0.487149173780581, 0.5463893453837013, 0.43940400451011496, 0.2755967916157974, 0.18925599111268154, 0.19963567301018081, 0.5414709206077926, 0.19957285232578448, 0.18952249184701553, 0.17765474681583415, 0.17378881812013147, 0.17786551162129505, 0.17920587662617038, 0.2001632955887278, 0.18076833067032516, 0.1801919496025436, 0.1761995299275586, 0.07741636929535567, 0.0830005357116641, 0.07952662108109276, 0.07459185689412862, 0.07674689102508525, 0.06884074856563571, 0.07857791403614434, 0.08405295860230999, 0.0731095590764087]}, "mutation_prompt": null}
{"id": "61d93506-e36e-40ca-826d-498286e7ebee", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 10 * dim\n        self.population_size = self.initial_population_size\n        self.mutation_f = 0.5\n        self.crossover_prob = 0.7\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim)\n        )\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        \n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                if self.used_budget >= self.budget:\n                    break\n\n                # Mutation and recombination\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_f * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial[cross_points] = mutant[cross_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.used_budget += 1\n                if trial_fitness < self.fitness[i]:\n                    self.fitness[i] = trial_fitness\n                    self.population[i] = trial\n\n            # Adaptive mechanisms\n            if self.used_budget > self.budget * 0.5 and self.population_size > self.dim:\n                self.population_size = int(self.initial_population_size / 2)\n\n            # Adaptation of mutation factor and crossover probability\n            self.mutation_f = 0.5 + 0.3 * np.random.rand()\n            self.crossover_prob = 0.5 + 0.4 * np.random.rand()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.used_budget >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1", "name": "AdaptiveDifferentialEvolution", "description": "An Adaptive Differential Evolution algorithm enhanced with dynamic population size adjustment and a more sophisticated crossover strategy to improve convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "686e5765-66bd-4023-bb8f-797cd3285c74", "metadata": {"aucs": [0.7649530760233154, 0.7672203135695314, 0.7425091083534923, 0.7466124230890963, 0.7704599926457998, 0.7545584238429436, 0.7607524557865303, 0.7452759414992235, 0.7480973398464614, 0.5862065060770814, 0.5825938692348882, 0.5860768603755706, 0.5884050674615322, 0.5674125077060967, 0.5826435901385849, 0.5951042015179475, 0.6032313272244649, 0.5731672465217614, 0.25194592521131665, 0.1676756158856184, 0.26291580523412994, 0.2600503255878519, 0.17959807225069402, 0.2335825331252055, 0.2426249825633744, 0.3098139619975633, 0.2238814093442566, 0.16512111046391276, 0.21525969008541834, 0.19464188362095924, 0.12433287421253714, 0.16938508364746163, 0.18976455925568758, 0.13245017086615973, 0.1914663153843057, 0.1874239908218731, 0.9382511363254415, 0.9427002108554231, 0.9335298663510166, 0.9735453086833011, 0.9716724136429433, 0.9510382502908014, 0.9634134672229929, 0.9509589054801365, 0.9258879750336196, 0.3488179661700227, 0.3938629525946634, 0.4347726549811002, 0.4192564353073116, 0.389892254250635, 0.39604469148062593, 0.42641372566848945, 0.4198347262636978, 0.4153207613767891, 0.4290968639230195, 0.5501128315873807, 0.5279342473536783, 0.5823625292882533, 0.5890925402731175, 0.5613742528251338, 0.5809233736272427, 0.5916647914898385, 0.5784694622656943, 0.21674247876611485, 0.18909305362696527, 0.1798032830302967, 0.15696316364485352, 0.1794543951235008, 0.18877119059253666, 0.3004394879386265, 0.2183158139879512, 0.2014575293460571, 0.16751679858993596, 0.1567386612593329, 0.21409862242562416, 0.24158310574334418, 0.2001879571817049, 0.2491357919562368, 0.23606130039657836, 0.2138807332293885, 0.19371853333011013, 0.10317564745716923, 0.08467517496480015, 0.09389911343643675, 0.09573396864087969, 0.07486365299407793, 0.0442967807760688, 0.12878722553210498, 0.0964958657847026, 0.07909484892663587, 0.23590099351112526, 0.20216297112133585, 0.20882497179331172, 0.21456010145039728, 0.20432566242871153, 0.12994546971771215, 0.2511321390500115, 0.2046752316748388, 0.2556081827349247, 0.04524643133393491, 0.03069074890312329, 0.06178105905539266, 0.0699604123885581, 0.04415075947763236, 0.03450183732339096, 0.05304536553524963, 0.08212001961877358, 0.02319607651683253, 0.1588741206119405, 0.16554565624524453, 0.1504714197556989, 0.18339339349809358, 0.15915080336276188, 0.17621457723474965, 0.15410642103848982, 0.14627687511898313, 0.1591600706554931, 0.5436354200512152, 0.5341545209678712, 0.5241850698803925, 0.5599272364565837, 0.5259057857779712, 0.5062025183429466, 0.5395204763904666, 0.5365040376452355, 0.5278764559093689, 0.08535298729770857, 0.09148956013510867, 0.10171053662853569, 0.11574511432253998, 0.10563633885824852, 0.11188308205140507, 0.115776251817583, 0.10097361304176866, 0.09042796994295366, 0.14880949890428163, 0.1325934670430281, 0.19583144394655738, 0.12493560537378257, 0.18502724360352996, 0.12882282471558337, 0.13515223906191365, 0.12827721213156107, 0.14236695678275868, 0.3122690889056031, 0.34125131901950245, 0.3189119476463479, 0.31728298209870665, 0.3414408983994017, 0.33979007787767723, 0.3514442661665945, 0.39367957216627925, 0.369656070988143, 0.23198347831140986, 0.22829913043231886, 0.22921597609444966, 0.251120787788886, 0.24167393698168704, 0.20746485258928837, 0.2437880398264347, 0.25592442959305695, 0.26947644647958024, 0.19400567801085455, 0.19406769423076453, 0.19319049200276806, 0.18174325807884217, 0.18412799391645007, 0.19045283601534158, 0.20894670161571838, 0.19400842451017297, 0.1879639634757112, 0.20264811447264242, 0.19211000342460982, 0.19149845884701777, 0.25017257320491837, 0.22831263511238342, 0.22036662728925271, 0.28072120067988604, 0.28244680866028127, 0.20812711488349644, 0.6408741955124668, 0.19353118249237478, 0.16675563759331347, 0.4976859760084008, 0.4892049175611233, 0.5434692771636185, 0.29479481011032405, 0.358640379822735, 0.35862456986207325, 0.192162745419158, 0.487149173780581, 0.5463893453837013, 0.43940400451011496, 0.2755967916157974, 0.18925599111268154, 0.19963567301018081, 0.5414709206077926, 0.19957285232578448, 0.18952249184701553, 0.17765474681583415, 0.17378881812013147, 0.17786551162129505, 0.17920587662617038, 0.2001632955887278, 0.18076833067032516, 0.1801919496025436, 0.1761995299275586, 0.07741636929535567, 0.0830005357116641, 0.07952662108109276, 0.07459185689412862, 0.07674689102508525, 0.06884074856563571, 0.07857791403614434, 0.08405295860230999, 0.0731095590764087]}, "mutation_prompt": null}
{"id": "dc966697-80e8-442f-b6d8-0f7bb58973f9", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 10 * dim\n        self.population_size = self.initial_population_size\n        self.mutation_f = 0.5\n        self.crossover_prob = 0.7\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim)\n        )\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        \n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                if self.used_budget >= self.budget:\n                    break\n\n                # Mutation and recombination\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_f * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial[cross_points] = mutant[cross_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.used_budget += 1\n                if trial_fitness < self.fitness[i]:\n                    self.fitness[i] = trial_fitness\n                    self.population[i] = trial\n\n            # Adaptive mechanisms\n            if self.used_budget > self.budget * 0.5 and self.population_size > self.dim:\n                self.population_size = int(self.initial_population_size / 2)\n\n            # Adaptation of mutation factor and crossover probability\n            self.mutation_f = 0.5 + 0.3 * np.random.rand()\n            self.crossover_prob = 0.5 + 0.4 * np.random.rand()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.used_budget >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1", "name": "AdaptiveDifferentialEvolution", "description": "An Adaptive Differential Evolution algorithm enhanced with dynamic population size adjustment and a more sophisticated crossover strategy to improve convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "686e5765-66bd-4023-bb8f-797cd3285c74", "metadata": {"aucs": [0.7649530760233154, 0.7672203135695314, 0.7425091083534923, 0.7466124230890963, 0.7704599926457998, 0.7545584238429436, 0.7607524557865303, 0.7452759414992235, 0.7480973398464614, 0.5862065060770814, 0.5825938692348882, 0.5860768603755706, 0.5884050674615322, 0.5674125077060967, 0.5826435901385849, 0.5951042015179475, 0.6032313272244649, 0.5731672465217614, 0.25194592521131665, 0.1676756158856184, 0.26291580523412994, 0.2600503255878519, 0.17959807225069402, 0.2335825331252055, 0.2426249825633744, 0.3098139619975633, 0.2238814093442566, 0.16512111046391276, 0.21525969008541834, 0.19464188362095924, 0.12433287421253714, 0.16938508364746163, 0.18976455925568758, 0.13245017086615973, 0.1914663153843057, 0.1874239908218731, 0.9382511363254415, 0.9427002108554231, 0.9335298663510166, 0.9735453086833011, 0.9716724136429433, 0.9510382502908014, 0.9634134672229929, 0.9509589054801365, 0.9258879750336196, 0.3488179661700227, 0.3938629525946634, 0.4347726549811002, 0.4192564353073116, 0.389892254250635, 0.39604469148062593, 0.42641372566848945, 0.4198347262636978, 0.4153207613767891, 0.4290968639230195, 0.5501128315873807, 0.5279342473536783, 0.5823625292882533, 0.5890925402731175, 0.5613742528251338, 0.5809233736272427, 0.5916647914898385, 0.5784694622656943, 0.21674247876611485, 0.18909305362696527, 0.1798032830302967, 0.15696316364485352, 0.1794543951235008, 0.18877119059253666, 0.3004394879386265, 0.2183158139879512, 0.2014575293460571, 0.16751679858993596, 0.1567386612593329, 0.21409862242562416, 0.24158310574334418, 0.2001879571817049, 0.2491357919562368, 0.23606130039657836, 0.2138807332293885, 0.19371853333011013, 0.10317564745716923, 0.08467517496480015, 0.09389911343643675, 0.09573396864087969, 0.07486365299407793, 0.0442967807760688, 0.12878722553210498, 0.0964958657847026, 0.07909484892663587, 0.23590099351112526, 0.20216297112133585, 0.20882497179331172, 0.21456010145039728, 0.20432566242871153, 0.12994546971771215, 0.2511321390500115, 0.2046752316748388, 0.2556081827349247, 0.04524643133393491, 0.03069074890312329, 0.06178105905539266, 0.0699604123885581, 0.04415075947763236, 0.03450183732339096, 0.05304536553524963, 0.08212001961877358, 0.02319607651683253, 0.1588741206119405, 0.16554565624524453, 0.1504714197556989, 0.18339339349809358, 0.15915080336276188, 0.17621457723474965, 0.15410642103848982, 0.14627687511898313, 0.1591600706554931, 0.5436354200512152, 0.5341545209678712, 0.5241850698803925, 0.5599272364565837, 0.5259057857779712, 0.5062025183429466, 0.5395204763904666, 0.5365040376452355, 0.5278764559093689, 0.08535298729770857, 0.09148956013510867, 0.10171053662853569, 0.11574511432253998, 0.10563633885824852, 0.11188308205140507, 0.115776251817583, 0.10097361304176866, 0.09042796994295366, 0.14880949890428163, 0.1325934670430281, 0.19583144394655738, 0.12493560537378257, 0.18502724360352996, 0.12882282471558337, 0.13515223906191365, 0.12827721213156107, 0.14236695678275868, 0.3122690889056031, 0.34125131901950245, 0.3189119476463479, 0.31728298209870665, 0.3414408983994017, 0.33979007787767723, 0.3514442661665945, 0.39367957216627925, 0.369656070988143, 0.23198347831140986, 0.22829913043231886, 0.22921597609444966, 0.251120787788886, 0.24167393698168704, 0.20746485258928837, 0.2437880398264347, 0.25592442959305695, 0.26947644647958024, 0.19400567801085455, 0.19406769423076453, 0.19319049200276806, 0.18174325807884217, 0.18412799391645007, 0.19045283601534158, 0.20894670161571838, 0.19400842451017297, 0.1879639634757112, 0.20264811447264242, 0.19211000342460982, 0.19149845884701777, 0.25017257320491837, 0.22831263511238342, 0.22036662728925271, 0.28072120067988604, 0.28244680866028127, 0.20812711488349644, 0.6408741955124668, 0.19353118249237478, 0.16675563759331347, 0.4976859760084008, 0.4892049175611233, 0.5434692771636185, 0.29479481011032405, 0.358640379822735, 0.35862456986207325, 0.192162745419158, 0.487149173780581, 0.5463893453837013, 0.43940400451011496, 0.2755967916157974, 0.18925599111268154, 0.19963567301018081, 0.5414709206077926, 0.19957285232578448, 0.18952249184701553, 0.17765474681583415, 0.17378881812013147, 0.17786551162129505, 0.17920587662617038, 0.2001632955887278, 0.18076833067032516, 0.1801919496025436, 0.1761995299275586, 0.07741636929535567, 0.0830005357116641, 0.07952662108109276, 0.07459185689412862, 0.07674689102508525, 0.06884074856563571, 0.07857791403614434, 0.08405295860230999, 0.0731095590764087]}, "mutation_prompt": null}
{"id": "1cd77891-7823-49c1-9f48-0929be134296", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 10 * dim\n        self.population_size = self.initial_population_size\n        self.mutation_f = 0.5\n        self.crossover_prob = 0.7\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim)\n        )\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        \n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                if self.used_budget >= self.budget:\n                    break\n\n                # Mutation and recombination\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_f * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial[cross_points] = mutant[cross_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.used_budget += 1\n                if trial_fitness < self.fitness[i]:\n                    self.fitness[i] = trial_fitness\n                    self.population[i] = trial\n\n            # Adaptive mechanisms\n            if self.used_budget > self.budget * 0.5 and self.population_size > self.dim:\n                self.population_size = int(self.initial_population_size / 2)\n\n            # Adaptation of mutation factor and crossover probability\n            self.mutation_f = 0.5 + 0.3 * np.random.rand()\n            self.crossover_prob = 0.5 + 0.4 * np.random.rand()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.used_budget >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1", "name": "AdaptiveDifferentialEvolution", "description": "An Adaptive Differential Evolution algorithm enhanced with dynamic population size adjustment and a more sophisticated crossover strategy to improve convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "686e5765-66bd-4023-bb8f-797cd3285c74", "metadata": {"aucs": [0.7649530760233154, 0.7672203135695314, 0.7425091083534923, 0.7466124230890963, 0.7704599926457998, 0.7545584238429436, 0.7607524557865303, 0.7452759414992235, 0.7480973398464614, 0.5862065060770814, 0.5825938692348882, 0.5860768603755706, 0.5884050674615322, 0.5674125077060967, 0.5826435901385849, 0.5951042015179475, 0.6032313272244649, 0.5731672465217614, 0.25194592521131665, 0.1676756158856184, 0.26291580523412994, 0.2600503255878519, 0.17959807225069402, 0.2335825331252055, 0.2426249825633744, 0.3098139619975633, 0.2238814093442566, 0.16512111046391276, 0.21525969008541834, 0.19464188362095924, 0.12433287421253714, 0.16938508364746163, 0.18976455925568758, 0.13245017086615973, 0.1914663153843057, 0.1874239908218731, 0.9382511363254415, 0.9427002108554231, 0.9335298663510166, 0.9735453086833011, 0.9716724136429433, 0.9510382502908014, 0.9634134672229929, 0.9509589054801365, 0.9258879750336196, 0.3488179661700227, 0.3938629525946634, 0.4347726549811002, 0.4192564353073116, 0.389892254250635, 0.39604469148062593, 0.42641372566848945, 0.4198347262636978, 0.4153207613767891, 0.4290968639230195, 0.5501128315873807, 0.5279342473536783, 0.5823625292882533, 0.5890925402731175, 0.5613742528251338, 0.5809233736272427, 0.5916647914898385, 0.5784694622656943, 0.21674247876611485, 0.18909305362696527, 0.1798032830302967, 0.15696316364485352, 0.1794543951235008, 0.18877119059253666, 0.3004394879386265, 0.2183158139879512, 0.2014575293460571, 0.16751679858993596, 0.1567386612593329, 0.21409862242562416, 0.24158310574334418, 0.2001879571817049, 0.2491357919562368, 0.23606130039657836, 0.2138807332293885, 0.19371853333011013, 0.10317564745716923, 0.08467517496480015, 0.09389911343643675, 0.09573396864087969, 0.07486365299407793, 0.0442967807760688, 0.12878722553210498, 0.0964958657847026, 0.07909484892663587, 0.23590099351112526, 0.20216297112133585, 0.20882497179331172, 0.21456010145039728, 0.20432566242871153, 0.12994546971771215, 0.2511321390500115, 0.2046752316748388, 0.2556081827349247, 0.04524643133393491, 0.03069074890312329, 0.06178105905539266, 0.0699604123885581, 0.04415075947763236, 0.03450183732339096, 0.05304536553524963, 0.08212001961877358, 0.02319607651683253, 0.1588741206119405, 0.16554565624524453, 0.1504714197556989, 0.18339339349809358, 0.15915080336276188, 0.17621457723474965, 0.15410642103848982, 0.14627687511898313, 0.1591600706554931, 0.5436354200512152, 0.5341545209678712, 0.5241850698803925, 0.5599272364565837, 0.5259057857779712, 0.5062025183429466, 0.5395204763904666, 0.5365040376452355, 0.5278764559093689, 0.08535298729770857, 0.09148956013510867, 0.10171053662853569, 0.11574511432253998, 0.10563633885824852, 0.11188308205140507, 0.115776251817583, 0.10097361304176866, 0.09042796994295366, 0.14880949890428163, 0.1325934670430281, 0.19583144394655738, 0.12493560537378257, 0.18502724360352996, 0.12882282471558337, 0.13515223906191365, 0.12827721213156107, 0.14236695678275868, 0.3122690889056031, 0.34125131901950245, 0.3189119476463479, 0.31728298209870665, 0.3414408983994017, 0.33979007787767723, 0.3514442661665945, 0.39367957216627925, 0.369656070988143, 0.23198347831140986, 0.22829913043231886, 0.22921597609444966, 0.251120787788886, 0.24167393698168704, 0.20746485258928837, 0.2437880398264347, 0.25592442959305695, 0.26947644647958024, 0.19400567801085455, 0.19406769423076453, 0.19319049200276806, 0.18174325807884217, 0.18412799391645007, 0.19045283601534158, 0.20894670161571838, 0.19400842451017297, 0.1879639634757112, 0.20264811447264242, 0.19211000342460982, 0.19149845884701777, 0.25017257320491837, 0.22831263511238342, 0.22036662728925271, 0.28072120067988604, 0.28244680866028127, 0.20812711488349644, 0.6408741955124668, 0.19353118249237478, 0.16675563759331347, 0.4976859760084008, 0.4892049175611233, 0.5434692771636185, 0.29479481011032405, 0.358640379822735, 0.35862456986207325, 0.192162745419158, 0.487149173780581, 0.5463893453837013, 0.43940400451011496, 0.2755967916157974, 0.18925599111268154, 0.19963567301018081, 0.5414709206077926, 0.19957285232578448, 0.18952249184701553, 0.17765474681583415, 0.17378881812013147, 0.17786551162129505, 0.17920587662617038, 0.2001632955887278, 0.18076833067032516, 0.1801919496025436, 0.1761995299275586, 0.07741636929535567, 0.0830005357116641, 0.07952662108109276, 0.07459185689412862, 0.07674689102508525, 0.06884074856563571, 0.07857791403614434, 0.08405295860230999, 0.0731095590764087]}, "mutation_prompt": null}
{"id": "d7a7ef40-8718-4cc1-9632-a6a272d2953c", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 10 * dim\n        self.population_size = self.initial_population_size\n        self.mutation_f = 0.5\n        self.crossover_prob = 0.7\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim)\n        )\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        \n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                if self.used_budget >= self.budget:\n                    break\n\n                # Mutation and recombination\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_f * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial[cross_points] = mutant[cross_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.used_budget += 1\n                if trial_fitness < self.fitness[i]:\n                    self.fitness[i] = trial_fitness\n                    self.population[i] = trial\n\n            # Adaptive mechanisms\n            if self.used_budget > self.budget * 0.5 and self.population_size > self.dim:\n                self.population_size = int(self.initial_population_size / 2)\n\n            # Adaptation of mutation factor and crossover probability\n            self.mutation_f = 0.5 + 0.3 * np.random.rand()\n            self.crossover_prob = 0.5 + 0.4 * np.random.rand()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.used_budget >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1", "name": "AdaptiveDifferentialEvolution", "description": "An Adaptive Differential Evolution algorithm enhanced with dynamic population size adjustment and a more sophisticated crossover strategy to improve convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "686e5765-66bd-4023-bb8f-797cd3285c74", "metadata": {"aucs": [0.7649530760233154, 0.7672203135695314, 0.7425091083534923, 0.7466124230890963, 0.7704599926457998, 0.7545584238429436, 0.7607524557865303, 0.7452759414992235, 0.7480973398464614, 0.5862065060770814, 0.5825938692348882, 0.5860768603755706, 0.5884050674615322, 0.5674125077060967, 0.5826435901385849, 0.5951042015179475, 0.6032313272244649, 0.5731672465217614, 0.25194592521131665, 0.1676756158856184, 0.26291580523412994, 0.2600503255878519, 0.17959807225069402, 0.2335825331252055, 0.2426249825633744, 0.3098139619975633, 0.2238814093442566, 0.16512111046391276, 0.21525969008541834, 0.19464188362095924, 0.12433287421253714, 0.16938508364746163, 0.18976455925568758, 0.13245017086615973, 0.1914663153843057, 0.1874239908218731, 0.9382511363254415, 0.9427002108554231, 0.9335298663510166, 0.9735453086833011, 0.9716724136429433, 0.9510382502908014, 0.9634134672229929, 0.9509589054801365, 0.9258879750336196, 0.3488179661700227, 0.3938629525946634, 0.4347726549811002, 0.4192564353073116, 0.389892254250635, 0.39604469148062593, 0.42641372566848945, 0.4198347262636978, 0.4153207613767891, 0.4290968639230195, 0.5501128315873807, 0.5279342473536783, 0.5823625292882533, 0.5890925402731175, 0.5613742528251338, 0.5809233736272427, 0.5916647914898385, 0.5784694622656943, 0.21674247876611485, 0.18909305362696527, 0.1798032830302967, 0.15696316364485352, 0.1794543951235008, 0.18877119059253666, 0.3004394879386265, 0.2183158139879512, 0.2014575293460571, 0.16751679858993596, 0.1567386612593329, 0.21409862242562416, 0.24158310574334418, 0.2001879571817049, 0.2491357919562368, 0.23606130039657836, 0.2138807332293885, 0.19371853333011013, 0.10317564745716923, 0.08467517496480015, 0.09389911343643675, 0.09573396864087969, 0.07486365299407793, 0.0442967807760688, 0.12878722553210498, 0.0964958657847026, 0.07909484892663587, 0.23590099351112526, 0.20216297112133585, 0.20882497179331172, 0.21456010145039728, 0.20432566242871153, 0.12994546971771215, 0.2511321390500115, 0.2046752316748388, 0.2556081827349247, 0.04524643133393491, 0.03069074890312329, 0.06178105905539266, 0.0699604123885581, 0.04415075947763236, 0.03450183732339096, 0.05304536553524963, 0.08212001961877358, 0.02319607651683253, 0.1588741206119405, 0.16554565624524453, 0.1504714197556989, 0.18339339349809358, 0.15915080336276188, 0.17621457723474965, 0.15410642103848982, 0.14627687511898313, 0.1591600706554931, 0.5436354200512152, 0.5341545209678712, 0.5241850698803925, 0.5599272364565837, 0.5259057857779712, 0.5062025183429466, 0.5395204763904666, 0.5365040376452355, 0.5278764559093689, 0.08535298729770857, 0.09148956013510867, 0.10171053662853569, 0.11574511432253998, 0.10563633885824852, 0.11188308205140507, 0.115776251817583, 0.10097361304176866, 0.09042796994295366, 0.14880949890428163, 0.1325934670430281, 0.19583144394655738, 0.12493560537378257, 0.18502724360352996, 0.12882282471558337, 0.13515223906191365, 0.12827721213156107, 0.14236695678275868, 0.3122690889056031, 0.34125131901950245, 0.3189119476463479, 0.31728298209870665, 0.3414408983994017, 0.33979007787767723, 0.3514442661665945, 0.39367957216627925, 0.369656070988143, 0.23198347831140986, 0.22829913043231886, 0.22921597609444966, 0.251120787788886, 0.24167393698168704, 0.20746485258928837, 0.2437880398264347, 0.25592442959305695, 0.26947644647958024, 0.19400567801085455, 0.19406769423076453, 0.19319049200276806, 0.18174325807884217, 0.18412799391645007, 0.19045283601534158, 0.20894670161571838, 0.19400842451017297, 0.1879639634757112, 0.20264811447264242, 0.19211000342460982, 0.19149845884701777, 0.25017257320491837, 0.22831263511238342, 0.22036662728925271, 0.28072120067988604, 0.28244680866028127, 0.20812711488349644, 0.6408741955124668, 0.19353118249237478, 0.16675563759331347, 0.4976859760084008, 0.4892049175611233, 0.5434692771636185, 0.29479481011032405, 0.358640379822735, 0.35862456986207325, 0.192162745419158, 0.487149173780581, 0.5463893453837013, 0.43940400451011496, 0.2755967916157974, 0.18925599111268154, 0.19963567301018081, 0.5414709206077926, 0.19957285232578448, 0.18952249184701553, 0.17765474681583415, 0.17378881812013147, 0.17786551162129505, 0.17920587662617038, 0.2001632955887278, 0.18076833067032516, 0.1801919496025436, 0.1761995299275586, 0.07741636929535567, 0.0830005357116641, 0.07952662108109276, 0.07459185689412862, 0.07674689102508525, 0.06884074856563571, 0.07857791403614434, 0.08405295860230999, 0.0731095590764087]}, "mutation_prompt": null}
{"id": "e0ee49ba-d182-47d4-931a-bd94ad3aa278", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 10 * dim\n        self.population_size = self.initial_population_size\n        self.mutation_f = 0.5\n        self.crossover_prob = 0.7\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim)\n        )\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        \n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                if self.used_budget >= self.budget:\n                    break\n\n                # Mutation and recombination\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_f * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial[cross_points] = mutant[cross_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.used_budget += 1\n                if trial_fitness < self.fitness[i]:\n                    self.fitness[i] = trial_fitness\n                    self.population[i] = trial\n\n            # Adaptive mechanisms\n            if self.used_budget > self.budget * 0.5 and self.population_size > self.dim:\n                self.population_size = int(self.initial_population_size / 2)\n\n            # Adaptation of mutation factor and crossover probability\n            self.mutation_f = 0.5 + 0.3 * np.random.rand()\n            self.crossover_prob = 0.5 + 0.4 * np.random.rand()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.used_budget >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1", "name": "AdaptiveDifferentialEvolution", "description": "An Adaptive Differential Evolution algorithm enhanced with dynamic population size adjustment and a more sophisticated crossover strategy to improve convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "686e5765-66bd-4023-bb8f-797cd3285c74", "metadata": {"aucs": [0.7649530760233154, 0.7672203135695314, 0.7425091083534923, 0.7466124230890963, 0.7704599926457998, 0.7545584238429436, 0.7607524557865303, 0.7452759414992235, 0.7480973398464614, 0.5862065060770814, 0.5825938692348882, 0.5860768603755706, 0.5884050674615322, 0.5674125077060967, 0.5826435901385849, 0.5951042015179475, 0.6032313272244649, 0.5731672465217614, 0.25194592521131665, 0.1676756158856184, 0.26291580523412994, 0.2600503255878519, 0.17959807225069402, 0.2335825331252055, 0.2426249825633744, 0.3098139619975633, 0.2238814093442566, 0.16512111046391276, 0.21525969008541834, 0.19464188362095924, 0.12433287421253714, 0.16938508364746163, 0.18976455925568758, 0.13245017086615973, 0.1914663153843057, 0.1874239908218731, 0.9382511363254415, 0.9427002108554231, 0.9335298663510166, 0.9735453086833011, 0.9716724136429433, 0.9510382502908014, 0.9634134672229929, 0.9509589054801365, 0.9258879750336196, 0.3488179661700227, 0.3938629525946634, 0.4347726549811002, 0.4192564353073116, 0.389892254250635, 0.39604469148062593, 0.42641372566848945, 0.4198347262636978, 0.4153207613767891, 0.4290968639230195, 0.5501128315873807, 0.5279342473536783, 0.5823625292882533, 0.5890925402731175, 0.5613742528251338, 0.5809233736272427, 0.5916647914898385, 0.5784694622656943, 0.21674247876611485, 0.18909305362696527, 0.1798032830302967, 0.15696316364485352, 0.1794543951235008, 0.18877119059253666, 0.3004394879386265, 0.2183158139879512, 0.2014575293460571, 0.16751679858993596, 0.1567386612593329, 0.21409862242562416, 0.24158310574334418, 0.2001879571817049, 0.2491357919562368, 0.23606130039657836, 0.2138807332293885, 0.19371853333011013, 0.10317564745716923, 0.08467517496480015, 0.09389911343643675, 0.09573396864087969, 0.07486365299407793, 0.0442967807760688, 0.12878722553210498, 0.0964958657847026, 0.07909484892663587, 0.23590099351112526, 0.20216297112133585, 0.20882497179331172, 0.21456010145039728, 0.20432566242871153, 0.12994546971771215, 0.2511321390500115, 0.2046752316748388, 0.2556081827349247, 0.04524643133393491, 0.03069074890312329, 0.06178105905539266, 0.0699604123885581, 0.04415075947763236, 0.03450183732339096, 0.05304536553524963, 0.08212001961877358, 0.02319607651683253, 0.1588741206119405, 0.16554565624524453, 0.1504714197556989, 0.18339339349809358, 0.15915080336276188, 0.17621457723474965, 0.15410642103848982, 0.14627687511898313, 0.1591600706554931, 0.5436354200512152, 0.5341545209678712, 0.5241850698803925, 0.5599272364565837, 0.5259057857779712, 0.5062025183429466, 0.5395204763904666, 0.5365040376452355, 0.5278764559093689, 0.08535298729770857, 0.09148956013510867, 0.10171053662853569, 0.11574511432253998, 0.10563633885824852, 0.11188308205140507, 0.115776251817583, 0.10097361304176866, 0.09042796994295366, 0.14880949890428163, 0.1325934670430281, 0.19583144394655738, 0.12493560537378257, 0.18502724360352996, 0.12882282471558337, 0.13515223906191365, 0.12827721213156107, 0.14236695678275868, 0.3122690889056031, 0.34125131901950245, 0.3189119476463479, 0.31728298209870665, 0.3414408983994017, 0.33979007787767723, 0.3514442661665945, 0.39367957216627925, 0.369656070988143, 0.23198347831140986, 0.22829913043231886, 0.22921597609444966, 0.251120787788886, 0.24167393698168704, 0.20746485258928837, 0.2437880398264347, 0.25592442959305695, 0.26947644647958024, 0.19400567801085455, 0.19406769423076453, 0.19319049200276806, 0.18174325807884217, 0.18412799391645007, 0.19045283601534158, 0.20894670161571838, 0.19400842451017297, 0.1879639634757112, 0.20264811447264242, 0.19211000342460982, 0.19149845884701777, 0.25017257320491837, 0.22831263511238342, 0.22036662728925271, 0.28072120067988604, 0.28244680866028127, 0.20812711488349644, 0.6408741955124668, 0.19353118249237478, 0.16675563759331347, 0.4976859760084008, 0.4892049175611233, 0.5434692771636185, 0.29479481011032405, 0.358640379822735, 0.35862456986207325, 0.192162745419158, 0.487149173780581, 0.5463893453837013, 0.43940400451011496, 0.2755967916157974, 0.18925599111268154, 0.19963567301018081, 0.5414709206077926, 0.19957285232578448, 0.18952249184701553, 0.17765474681583415, 0.17378881812013147, 0.17786551162129505, 0.17920587662617038, 0.2001632955887278, 0.18076833067032516, 0.1801919496025436, 0.1761995299275586, 0.07741636929535567, 0.0830005357116641, 0.07952662108109276, 0.07459185689412862, 0.07674689102508525, 0.06884074856563571, 0.07857791403614434, 0.08405295860230999, 0.0731095590764087]}, "mutation_prompt": null}
{"id": "67db0bd8-dec7-4db3-9203-ef2c9b9d1cb4", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 10 * dim\n        self.population_size = self.initial_population_size\n        self.mutation_f = 0.5\n        self.crossover_prob = 0.7\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim)\n        )\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        \n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                if self.used_budget >= self.budget:\n                    break\n\n                # Mutation and recombination\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_f * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial[cross_points] = mutant[cross_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.used_budget += 1\n                if trial_fitness < self.fitness[i]:\n                    self.fitness[i] = trial_fitness\n                    self.population[i] = trial\n\n            # Adaptive mechanisms\n            if self.used_budget > self.budget * 0.5 and self.population_size > self.dim:\n                self.population_size = int(self.initial_population_size / 2)\n\n            # Adaptation of mutation factor and crossover probability\n            self.mutation_f = 0.5 + 0.3 * np.random.rand()\n            self.crossover_prob = 0.5 + 0.4 * np.random.rand()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.used_budget >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1", "name": "AdaptiveDifferentialEvolution", "description": "An Adaptive Differential Evolution algorithm enhanced with dynamic population size adjustment and a more sophisticated crossover strategy to improve convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "686e5765-66bd-4023-bb8f-797cd3285c74", "metadata": {"aucs": [0.7649530760233154, 0.7672203135695314, 0.7425091083534923, 0.7466124230890963, 0.7704599926457998, 0.7545584238429436, 0.7607524557865303, 0.7452759414992235, 0.7480973398464614, 0.5862065060770814, 0.5825938692348882, 0.5860768603755706, 0.5884050674615322, 0.5674125077060967, 0.5826435901385849, 0.5951042015179475, 0.6032313272244649, 0.5731672465217614, 0.25194592521131665, 0.1676756158856184, 0.26291580523412994, 0.2600503255878519, 0.17959807225069402, 0.2335825331252055, 0.2426249825633744, 0.3098139619975633, 0.2238814093442566, 0.16512111046391276, 0.21525969008541834, 0.19464188362095924, 0.12433287421253714, 0.16938508364746163, 0.18976455925568758, 0.13245017086615973, 0.1914663153843057, 0.1874239908218731, 0.9382511363254415, 0.9427002108554231, 0.9335298663510166, 0.9735453086833011, 0.9716724136429433, 0.9510382502908014, 0.9634134672229929, 0.9509589054801365, 0.9258879750336196, 0.3488179661700227, 0.3938629525946634, 0.4347726549811002, 0.4192564353073116, 0.389892254250635, 0.39604469148062593, 0.42641372566848945, 0.4198347262636978, 0.4153207613767891, 0.4290968639230195, 0.5501128315873807, 0.5279342473536783, 0.5823625292882533, 0.5890925402731175, 0.5613742528251338, 0.5809233736272427, 0.5916647914898385, 0.5784694622656943, 0.21674247876611485, 0.18909305362696527, 0.1798032830302967, 0.15696316364485352, 0.1794543951235008, 0.18877119059253666, 0.3004394879386265, 0.2183158139879512, 0.2014575293460571, 0.16751679858993596, 0.1567386612593329, 0.21409862242562416, 0.24158310574334418, 0.2001879571817049, 0.2491357919562368, 0.23606130039657836, 0.2138807332293885, 0.19371853333011013, 0.10317564745716923, 0.08467517496480015, 0.09389911343643675, 0.09573396864087969, 0.07486365299407793, 0.0442967807760688, 0.12878722553210498, 0.0964958657847026, 0.07909484892663587, 0.23590099351112526, 0.20216297112133585, 0.20882497179331172, 0.21456010145039728, 0.20432566242871153, 0.12994546971771215, 0.2511321390500115, 0.2046752316748388, 0.2556081827349247, 0.04524643133393491, 0.03069074890312329, 0.06178105905539266, 0.0699604123885581, 0.04415075947763236, 0.03450183732339096, 0.05304536553524963, 0.08212001961877358, 0.02319607651683253, 0.1588741206119405, 0.16554565624524453, 0.1504714197556989, 0.18339339349809358, 0.15915080336276188, 0.17621457723474965, 0.15410642103848982, 0.14627687511898313, 0.1591600706554931, 0.5436354200512152, 0.5341545209678712, 0.5241850698803925, 0.5599272364565837, 0.5259057857779712, 0.5062025183429466, 0.5395204763904666, 0.5365040376452355, 0.5278764559093689, 0.08535298729770857, 0.09148956013510867, 0.10171053662853569, 0.11574511432253998, 0.10563633885824852, 0.11188308205140507, 0.115776251817583, 0.10097361304176866, 0.09042796994295366, 0.14880949890428163, 0.1325934670430281, 0.19583144394655738, 0.12493560537378257, 0.18502724360352996, 0.12882282471558337, 0.13515223906191365, 0.12827721213156107, 0.14236695678275868, 0.3122690889056031, 0.34125131901950245, 0.3189119476463479, 0.31728298209870665, 0.3414408983994017, 0.33979007787767723, 0.3514442661665945, 0.39367957216627925, 0.369656070988143, 0.23198347831140986, 0.22829913043231886, 0.22921597609444966, 0.251120787788886, 0.24167393698168704, 0.20746485258928837, 0.2437880398264347, 0.25592442959305695, 0.26947644647958024, 0.19400567801085455, 0.19406769423076453, 0.19319049200276806, 0.18174325807884217, 0.18412799391645007, 0.19045283601534158, 0.20894670161571838, 0.19400842451017297, 0.1879639634757112, 0.20264811447264242, 0.19211000342460982, 0.19149845884701777, 0.25017257320491837, 0.22831263511238342, 0.22036662728925271, 0.28072120067988604, 0.28244680866028127, 0.20812711488349644, 0.6408741955124668, 0.19353118249237478, 0.16675563759331347, 0.4976859760084008, 0.4892049175611233, 0.5434692771636185, 0.29479481011032405, 0.358640379822735, 0.35862456986207325, 0.192162745419158, 0.487149173780581, 0.5463893453837013, 0.43940400451011496, 0.2755967916157974, 0.18925599111268154, 0.19963567301018081, 0.5414709206077926, 0.19957285232578448, 0.18952249184701553, 0.17765474681583415, 0.17378881812013147, 0.17786551162129505, 0.17920587662617038, 0.2001632955887278, 0.18076833067032516, 0.1801919496025436, 0.1761995299275586, 0.07741636929535567, 0.0830005357116641, 0.07952662108109276, 0.07459185689412862, 0.07674689102508525, 0.06884074856563571, 0.07857791403614434, 0.08405295860230999, 0.0731095590764087]}, "mutation_prompt": null}
{"id": "256ad20d-be23-4443-9ec4-f92adf6c2e87", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 10 * dim\n        self.population_size = self.initial_population_size\n        self.mutation_f = 0.5\n        self.crossover_prob = 0.7\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim)\n        )\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        \n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                if self.used_budget >= self.budget:\n                    break\n\n                # Mutation and recombination\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_f * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial[cross_points] = mutant[cross_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.used_budget += 1\n                if trial_fitness < self.fitness[i]:\n                    self.fitness[i] = trial_fitness\n                    self.population[i] = trial\n\n            # Adaptive mechanisms\n            if self.used_budget > self.budget * 0.5 and self.population_size > self.dim:\n                self.population_size = int(self.initial_population_size / 2)\n\n            # Adaptation of mutation factor and crossover probability\n            self.mutation_f = 0.5 + 0.3 * np.random.rand()\n            self.crossover_prob = 0.5 + 0.4 * np.random.rand()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.used_budget >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1", "name": "AdaptiveDifferentialEvolution", "description": "An Adaptive Differential Evolution algorithm enhanced with dynamic population size adjustment and a more sophisticated crossover strategy to improve convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "686e5765-66bd-4023-bb8f-797cd3285c74", "metadata": {"aucs": [0.7649530760233154, 0.7672203135695314, 0.7425091083534923, 0.7466124230890963, 0.7704599926457998, 0.7545584238429436, 0.7607524557865303, 0.7452759414992235, 0.7480973398464614, 0.5862065060770814, 0.5825938692348882, 0.5860768603755706, 0.5884050674615322, 0.5674125077060967, 0.5826435901385849, 0.5951042015179475, 0.6032313272244649, 0.5731672465217614, 0.25194592521131665, 0.1676756158856184, 0.26291580523412994, 0.2600503255878519, 0.17959807225069402, 0.2335825331252055, 0.2426249825633744, 0.3098139619975633, 0.2238814093442566, 0.16512111046391276, 0.21525969008541834, 0.19464188362095924, 0.12433287421253714, 0.16938508364746163, 0.18976455925568758, 0.13245017086615973, 0.1914663153843057, 0.1874239908218731, 0.9382511363254415, 0.9427002108554231, 0.9335298663510166, 0.9735453086833011, 0.9716724136429433, 0.9510382502908014, 0.9634134672229929, 0.9509589054801365, 0.9258879750336196, 0.3488179661700227, 0.3938629525946634, 0.4347726549811002, 0.4192564353073116, 0.389892254250635, 0.39604469148062593, 0.42641372566848945, 0.4198347262636978, 0.4153207613767891, 0.4290968639230195, 0.5501128315873807, 0.5279342473536783, 0.5823625292882533, 0.5890925402731175, 0.5613742528251338, 0.5809233736272427, 0.5916647914898385, 0.5784694622656943, 0.21674247876611485, 0.18909305362696527, 0.1798032830302967, 0.15696316364485352, 0.1794543951235008, 0.18877119059253666, 0.3004394879386265, 0.2183158139879512, 0.2014575293460571, 0.16751679858993596, 0.1567386612593329, 0.21409862242562416, 0.24158310574334418, 0.2001879571817049, 0.2491357919562368, 0.23606130039657836, 0.2138807332293885, 0.19371853333011013, 0.10317564745716923, 0.08467517496480015, 0.09389911343643675, 0.09573396864087969, 0.07486365299407793, 0.0442967807760688, 0.12878722553210498, 0.0964958657847026, 0.07909484892663587, 0.23590099351112526, 0.20216297112133585, 0.20882497179331172, 0.21456010145039728, 0.20432566242871153, 0.12994546971771215, 0.2511321390500115, 0.2046752316748388, 0.2556081827349247, 0.04524643133393491, 0.03069074890312329, 0.06178105905539266, 0.0699604123885581, 0.04415075947763236, 0.03450183732339096, 0.05304536553524963, 0.08212001961877358, 0.02319607651683253, 0.1588741206119405, 0.16554565624524453, 0.1504714197556989, 0.18339339349809358, 0.15915080336276188, 0.17621457723474965, 0.15410642103848982, 0.14627687511898313, 0.1591600706554931, 0.5436354200512152, 0.5341545209678712, 0.5241850698803925, 0.5599272364565837, 0.5259057857779712, 0.5062025183429466, 0.5395204763904666, 0.5365040376452355, 0.5278764559093689, 0.08535298729770857, 0.09148956013510867, 0.10171053662853569, 0.11574511432253998, 0.10563633885824852, 0.11188308205140507, 0.115776251817583, 0.10097361304176866, 0.09042796994295366, 0.14880949890428163, 0.1325934670430281, 0.19583144394655738, 0.12493560537378257, 0.18502724360352996, 0.12882282471558337, 0.13515223906191365, 0.12827721213156107, 0.14236695678275868, 0.3122690889056031, 0.34125131901950245, 0.3189119476463479, 0.31728298209870665, 0.3414408983994017, 0.33979007787767723, 0.3514442661665945, 0.39367957216627925, 0.369656070988143, 0.23198347831140986, 0.22829913043231886, 0.22921597609444966, 0.251120787788886, 0.24167393698168704, 0.20746485258928837, 0.2437880398264347, 0.25592442959305695, 0.26947644647958024, 0.19400567801085455, 0.19406769423076453, 0.19319049200276806, 0.18174325807884217, 0.18412799391645007, 0.19045283601534158, 0.20894670161571838, 0.19400842451017297, 0.1879639634757112, 0.20264811447264242, 0.19211000342460982, 0.19149845884701777, 0.25017257320491837, 0.22831263511238342, 0.22036662728925271, 0.28072120067988604, 0.28244680866028127, 0.20812711488349644, 0.6408741955124668, 0.19353118249237478, 0.16675563759331347, 0.4976859760084008, 0.4892049175611233, 0.5434692771636185, 0.29479481011032405, 0.358640379822735, 0.35862456986207325, 0.192162745419158, 0.487149173780581, 0.5463893453837013, 0.43940400451011496, 0.2755967916157974, 0.18925599111268154, 0.19963567301018081, 0.5414709206077926, 0.19957285232578448, 0.18952249184701553, 0.17765474681583415, 0.17378881812013147, 0.17786551162129505, 0.17920587662617038, 0.2001632955887278, 0.18076833067032516, 0.1801919496025436, 0.1761995299275586, 0.07741636929535567, 0.0830005357116641, 0.07952662108109276, 0.07459185689412862, 0.07674689102508525, 0.06884074856563571, 0.07857791403614434, 0.08405295860230999, 0.0731095590764087]}, "mutation_prompt": null}
{"id": "4f476601-2750-48ab-8517-3eb91b8d6f02", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 10 * dim\n        self.population_size = self.initial_population_size\n        self.mutation_f = 0.5\n        self.crossover_prob = 0.7\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim)\n        )\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        \n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                if self.used_budget >= self.budget:\n                    break\n\n                # Mutation and recombination\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_f * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial[cross_points] = mutant[cross_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.used_budget += 1\n                if trial_fitness < self.fitness[i]:\n                    self.fitness[i] = trial_fitness\n                    self.population[i] = trial\n\n            # Adaptive mechanisms\n            if self.used_budget > self.budget * 0.5 and self.population_size > self.dim:\n                self.population_size = int(self.initial_population_size / 2)\n\n            # Adaptation of mutation factor and crossover probability\n            self.mutation_f = 0.5 + 0.3 * np.random.rand()\n            self.crossover_prob = 0.5 + 0.4 * np.random.rand()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.used_budget >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1", "name": "AdaptiveDifferentialEvolution", "description": "An Adaptive Differential Evolution algorithm enhanced with dynamic population size adjustment and a more sophisticated crossover strategy to improve convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "686e5765-66bd-4023-bb8f-797cd3285c74", "metadata": {"aucs": [0.7649530760233154, 0.7672203135695314, 0.7425091083534923, 0.7466124230890963, 0.7704599926457998, 0.7545584238429436, 0.7607524557865303, 0.7452759414992235, 0.7480973398464614, 0.5862065060770814, 0.5825938692348882, 0.5860768603755706, 0.5884050674615322, 0.5674125077060967, 0.5826435901385849, 0.5951042015179475, 0.6032313272244649, 0.5731672465217614, 0.25194592521131665, 0.1676756158856184, 0.26291580523412994, 0.2600503255878519, 0.17959807225069402, 0.2335825331252055, 0.2426249825633744, 0.3098139619975633, 0.2238814093442566, 0.16512111046391276, 0.21525969008541834, 0.19464188362095924, 0.12433287421253714, 0.16938508364746163, 0.18976455925568758, 0.13245017086615973, 0.1914663153843057, 0.1874239908218731, 0.9382511363254415, 0.9427002108554231, 0.9335298663510166, 0.9735453086833011, 0.9716724136429433, 0.9510382502908014, 0.9634134672229929, 0.9509589054801365, 0.9258879750336196, 0.3488179661700227, 0.3938629525946634, 0.4347726549811002, 0.4192564353073116, 0.389892254250635, 0.39604469148062593, 0.42641372566848945, 0.4198347262636978, 0.4153207613767891, 0.4290968639230195, 0.5501128315873807, 0.5279342473536783, 0.5823625292882533, 0.5890925402731175, 0.5613742528251338, 0.5809233736272427, 0.5916647914898385, 0.5784694622656943, 0.21674247876611485, 0.18909305362696527, 0.1798032830302967, 0.15696316364485352, 0.1794543951235008, 0.18877119059253666, 0.3004394879386265, 0.2183158139879512, 0.2014575293460571, 0.16751679858993596, 0.1567386612593329, 0.21409862242562416, 0.24158310574334418, 0.2001879571817049, 0.2491357919562368, 0.23606130039657836, 0.2138807332293885, 0.19371853333011013, 0.10317564745716923, 0.08467517496480015, 0.09389911343643675, 0.09573396864087969, 0.07486365299407793, 0.0442967807760688, 0.12878722553210498, 0.0964958657847026, 0.07909484892663587, 0.23590099351112526, 0.20216297112133585, 0.20882497179331172, 0.21456010145039728, 0.20432566242871153, 0.12994546971771215, 0.2511321390500115, 0.2046752316748388, 0.2556081827349247, 0.04524643133393491, 0.03069074890312329, 0.06178105905539266, 0.0699604123885581, 0.04415075947763236, 0.03450183732339096, 0.05304536553524963, 0.08212001961877358, 0.02319607651683253, 0.1588741206119405, 0.16554565624524453, 0.1504714197556989, 0.18339339349809358, 0.15915080336276188, 0.17621457723474965, 0.15410642103848982, 0.14627687511898313, 0.1591600706554931, 0.5436354200512152, 0.5341545209678712, 0.5241850698803925, 0.5599272364565837, 0.5259057857779712, 0.5062025183429466, 0.5395204763904666, 0.5365040376452355, 0.5278764559093689, 0.08535298729770857, 0.09148956013510867, 0.10171053662853569, 0.11574511432253998, 0.10563633885824852, 0.11188308205140507, 0.115776251817583, 0.10097361304176866, 0.09042796994295366, 0.14880949890428163, 0.1325934670430281, 0.19583144394655738, 0.12493560537378257, 0.18502724360352996, 0.12882282471558337, 0.13515223906191365, 0.12827721213156107, 0.14236695678275868, 0.3122690889056031, 0.34125131901950245, 0.3189119476463479, 0.31728298209870665, 0.3414408983994017, 0.33979007787767723, 0.3514442661665945, 0.39367957216627925, 0.369656070988143, 0.23198347831140986, 0.22829913043231886, 0.22921597609444966, 0.251120787788886, 0.24167393698168704, 0.20746485258928837, 0.2437880398264347, 0.25592442959305695, 0.26947644647958024, 0.19400567801085455, 0.19406769423076453, 0.19319049200276806, 0.18174325807884217, 0.18412799391645007, 0.19045283601534158, 0.20894670161571838, 0.19400842451017297, 0.1879639634757112, 0.20264811447264242, 0.19211000342460982, 0.19149845884701777, 0.25017257320491837, 0.22831263511238342, 0.22036662728925271, 0.28072120067988604, 0.28244680866028127, 0.20812711488349644, 0.6408741955124668, 0.19353118249237478, 0.16675563759331347, 0.4976859760084008, 0.4892049175611233, 0.5434692771636185, 0.29479481011032405, 0.358640379822735, 0.35862456986207325, 0.192162745419158, 0.487149173780581, 0.5463893453837013, 0.43940400451011496, 0.2755967916157974, 0.18925599111268154, 0.19963567301018081, 0.5414709206077926, 0.19957285232578448, 0.18952249184701553, 0.17765474681583415, 0.17378881812013147, 0.17786551162129505, 0.17920587662617038, 0.2001632955887278, 0.18076833067032516, 0.1801919496025436, 0.1761995299275586, 0.07741636929535567, 0.0830005357116641, 0.07952662108109276, 0.07459185689412862, 0.07674689102508525, 0.06884074856563571, 0.07857791403614434, 0.08405295860230999, 0.0731095590764087]}, "mutation_prompt": null}
{"id": "fdfdefe6-d00a-43e7-88dc-5f6f34405b68", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 10 * dim\n        self.population_size = self.initial_population_size\n        self.mutation_f = 0.5\n        self.crossover_prob = 0.7\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim)\n        )\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        \n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                if self.used_budget >= self.budget:\n                    break\n\n                # Mutation and recombination\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_f * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial[cross_points] = mutant[cross_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.used_budget += 1\n                if trial_fitness < self.fitness[i]:\n                    self.fitness[i] = trial_fitness\n                    self.population[i] = trial\n\n            # Adaptive mechanisms\n            if self.used_budget > self.budget * 0.5 and self.population_size > self.dim:\n                self.population_size = int(self.initial_population_size / 2)\n\n            # Adaptation of mutation factor and crossover probability\n            self.mutation_f = 0.5 + 0.3 * np.random.rand()\n            self.crossover_prob = 0.5 + 0.4 * np.random.rand()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.used_budget >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1", "name": "AdaptiveDifferentialEvolution", "description": "An Adaptive Differential Evolution algorithm enhanced with dynamic population size adjustment and a more sophisticated crossover strategy to improve convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "686e5765-66bd-4023-bb8f-797cd3285c74", "metadata": {"aucs": [0.7649530760233154, 0.7672203135695314, 0.7425091083534923, 0.7466124230890963, 0.7704599926457998, 0.7545584238429436, 0.7607524557865303, 0.7452759414992235, 0.7480973398464614, 0.5862065060770814, 0.5825938692348882, 0.5860768603755706, 0.5884050674615322, 0.5674125077060967, 0.5826435901385849, 0.5951042015179475, 0.6032313272244649, 0.5731672465217614, 0.25194592521131665, 0.1676756158856184, 0.26291580523412994, 0.2600503255878519, 0.17959807225069402, 0.2335825331252055, 0.2426249825633744, 0.3098139619975633, 0.2238814093442566, 0.16512111046391276, 0.21525969008541834, 0.19464188362095924, 0.12433287421253714, 0.16938508364746163, 0.18976455925568758, 0.13245017086615973, 0.1914663153843057, 0.1874239908218731, 0.9382511363254415, 0.9427002108554231, 0.9335298663510166, 0.9735453086833011, 0.9716724136429433, 0.9510382502908014, 0.9634134672229929, 0.9509589054801365, 0.9258879750336196, 0.3488179661700227, 0.3938629525946634, 0.4347726549811002, 0.4192564353073116, 0.389892254250635, 0.39604469148062593, 0.42641372566848945, 0.4198347262636978, 0.4153207613767891, 0.4290968639230195, 0.5501128315873807, 0.5279342473536783, 0.5823625292882533, 0.5890925402731175, 0.5613742528251338, 0.5809233736272427, 0.5916647914898385, 0.5784694622656943, 0.21674247876611485, 0.18909305362696527, 0.1798032830302967, 0.15696316364485352, 0.1794543951235008, 0.18877119059253666, 0.3004394879386265, 0.2183158139879512, 0.2014575293460571, 0.16751679858993596, 0.1567386612593329, 0.21409862242562416, 0.24158310574334418, 0.2001879571817049, 0.2491357919562368, 0.23606130039657836, 0.2138807332293885, 0.19371853333011013, 0.10317564745716923, 0.08467517496480015, 0.09389911343643675, 0.09573396864087969, 0.07486365299407793, 0.0442967807760688, 0.12878722553210498, 0.0964958657847026, 0.07909484892663587, 0.23590099351112526, 0.20216297112133585, 0.20882497179331172, 0.21456010145039728, 0.20432566242871153, 0.12994546971771215, 0.2511321390500115, 0.2046752316748388, 0.2556081827349247, 0.04524643133393491, 0.03069074890312329, 0.06178105905539266, 0.0699604123885581, 0.04415075947763236, 0.03450183732339096, 0.05304536553524963, 0.08212001961877358, 0.02319607651683253, 0.1588741206119405, 0.16554565624524453, 0.1504714197556989, 0.18339339349809358, 0.15915080336276188, 0.17621457723474965, 0.15410642103848982, 0.14627687511898313, 0.1591600706554931, 0.5436354200512152, 0.5341545209678712, 0.5241850698803925, 0.5599272364565837, 0.5259057857779712, 0.5062025183429466, 0.5395204763904666, 0.5365040376452355, 0.5278764559093689, 0.08535298729770857, 0.09148956013510867, 0.10171053662853569, 0.11574511432253998, 0.10563633885824852, 0.11188308205140507, 0.115776251817583, 0.10097361304176866, 0.09042796994295366, 0.14880949890428163, 0.1325934670430281, 0.19583144394655738, 0.12493560537378257, 0.18502724360352996, 0.12882282471558337, 0.13515223906191365, 0.12827721213156107, 0.14236695678275868, 0.3122690889056031, 0.34125131901950245, 0.3189119476463479, 0.31728298209870665, 0.3414408983994017, 0.33979007787767723, 0.3514442661665945, 0.39367957216627925, 0.369656070988143, 0.23198347831140986, 0.22829913043231886, 0.22921597609444966, 0.251120787788886, 0.24167393698168704, 0.20746485258928837, 0.2437880398264347, 0.25592442959305695, 0.26947644647958024, 0.19400567801085455, 0.19406769423076453, 0.19319049200276806, 0.18174325807884217, 0.18412799391645007, 0.19045283601534158, 0.20894670161571838, 0.19400842451017297, 0.1879639634757112, 0.20264811447264242, 0.19211000342460982, 0.19149845884701777, 0.25017257320491837, 0.22831263511238342, 0.22036662728925271, 0.28072120067988604, 0.28244680866028127, 0.20812711488349644, 0.6408741955124668, 0.19353118249237478, 0.16675563759331347, 0.4976859760084008, 0.4892049175611233, 0.5434692771636185, 0.29479481011032405, 0.358640379822735, 0.35862456986207325, 0.192162745419158, 0.487149173780581, 0.5463893453837013, 0.43940400451011496, 0.2755967916157974, 0.18925599111268154, 0.19963567301018081, 0.5414709206077926, 0.19957285232578448, 0.18952249184701553, 0.17765474681583415, 0.17378881812013147, 0.17786551162129505, 0.17920587662617038, 0.2001632955887278, 0.18076833067032516, 0.1801919496025436, 0.1761995299275586, 0.07741636929535567, 0.0830005357116641, 0.07952662108109276, 0.07459185689412862, 0.07674689102508525, 0.06884074856563571, 0.07857791403614434, 0.08405295860230999, 0.0731095590764087]}, "mutation_prompt": null}
{"id": "2ae0c37f-4350-4c74-9ff1-98dd3e286327", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 10 * dim\n        self.population_size = self.initial_population_size\n        self.mutation_f = 0.5\n        self.crossover_prob = 0.7\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim)\n        )\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        \n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                if self.used_budget >= self.budget:\n                    break\n\n                # Mutation and recombination\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_f * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial[cross_points] = mutant[cross_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.used_budget += 1\n                if trial_fitness < self.fitness[i]:\n                    self.fitness[i] = trial_fitness\n                    self.population[i] = trial\n\n            # Adaptive mechanisms\n            if self.used_budget > self.budget * 0.5 and self.population_size > self.dim:\n                self.population_size = int(self.initial_population_size / 2)\n\n            # Adaptation of mutation factor and crossover probability\n            self.mutation_f = 0.5 + 0.3 * np.random.rand()\n            self.crossover_prob = 0.5 + 0.4 * np.random.rand()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.used_budget >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1", "name": "AdaptiveDifferentialEvolution", "description": "An Adaptive Differential Evolution algorithm enhanced with dynamic population size adjustment and a more sophisticated crossover strategy to improve convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "686e5765-66bd-4023-bb8f-797cd3285c74", "metadata": {"aucs": [0.7649530760233154, 0.7672203135695314, 0.7425091083534923, 0.7466124230890963, 0.7704599926457998, 0.7545584238429436, 0.7607524557865303, 0.7452759414992235, 0.7480973398464614, 0.5862065060770814, 0.5825938692348882, 0.5860768603755706, 0.5884050674615322, 0.5674125077060967, 0.5826435901385849, 0.5951042015179475, 0.6032313272244649, 0.5731672465217614, 0.25194592521131665, 0.1676756158856184, 0.26291580523412994, 0.2600503255878519, 0.17959807225069402, 0.2335825331252055, 0.2426249825633744, 0.3098139619975633, 0.2238814093442566, 0.16512111046391276, 0.21525969008541834, 0.19464188362095924, 0.12433287421253714, 0.16938508364746163, 0.18976455925568758, 0.13245017086615973, 0.1914663153843057, 0.1874239908218731, 0.9382511363254415, 0.9427002108554231, 0.9335298663510166, 0.9735453086833011, 0.9716724136429433, 0.9510382502908014, 0.9634134672229929, 0.9509589054801365, 0.9258879750336196, 0.3488179661700227, 0.3938629525946634, 0.4347726549811002, 0.4192564353073116, 0.389892254250635, 0.39604469148062593, 0.42641372566848945, 0.4198347262636978, 0.4153207613767891, 0.4290968639230195, 0.5501128315873807, 0.5279342473536783, 0.5823625292882533, 0.5890925402731175, 0.5613742528251338, 0.5809233736272427, 0.5916647914898385, 0.5784694622656943, 0.21674247876611485, 0.18909305362696527, 0.1798032830302967, 0.15696316364485352, 0.1794543951235008, 0.18877119059253666, 0.3004394879386265, 0.2183158139879512, 0.2014575293460571, 0.16751679858993596, 0.1567386612593329, 0.21409862242562416, 0.24158310574334418, 0.2001879571817049, 0.2491357919562368, 0.23606130039657836, 0.2138807332293885, 0.19371853333011013, 0.10317564745716923, 0.08467517496480015, 0.09389911343643675, 0.09573396864087969, 0.07486365299407793, 0.0442967807760688, 0.12878722553210498, 0.0964958657847026, 0.07909484892663587, 0.23590099351112526, 0.20216297112133585, 0.20882497179331172, 0.21456010145039728, 0.20432566242871153, 0.12994546971771215, 0.2511321390500115, 0.2046752316748388, 0.2556081827349247, 0.04524643133393491, 0.03069074890312329, 0.06178105905539266, 0.0699604123885581, 0.04415075947763236, 0.03450183732339096, 0.05304536553524963, 0.08212001961877358, 0.02319607651683253, 0.1588741206119405, 0.16554565624524453, 0.1504714197556989, 0.18339339349809358, 0.15915080336276188, 0.17621457723474965, 0.15410642103848982, 0.14627687511898313, 0.1591600706554931, 0.5436354200512152, 0.5341545209678712, 0.5241850698803925, 0.5599272364565837, 0.5259057857779712, 0.5062025183429466, 0.5395204763904666, 0.5365040376452355, 0.5278764559093689, 0.08535298729770857, 0.09148956013510867, 0.10171053662853569, 0.11574511432253998, 0.10563633885824852, 0.11188308205140507, 0.115776251817583, 0.10097361304176866, 0.09042796994295366, 0.14880949890428163, 0.1325934670430281, 0.19583144394655738, 0.12493560537378257, 0.18502724360352996, 0.12882282471558337, 0.13515223906191365, 0.12827721213156107, 0.14236695678275868, 0.3122690889056031, 0.34125131901950245, 0.3189119476463479, 0.31728298209870665, 0.3414408983994017, 0.33979007787767723, 0.3514442661665945, 0.39367957216627925, 0.369656070988143, 0.23198347831140986, 0.22829913043231886, 0.22921597609444966, 0.251120787788886, 0.24167393698168704, 0.20746485258928837, 0.2437880398264347, 0.25592442959305695, 0.26947644647958024, 0.19400567801085455, 0.19406769423076453, 0.19319049200276806, 0.18174325807884217, 0.18412799391645007, 0.19045283601534158, 0.20894670161571838, 0.19400842451017297, 0.1879639634757112, 0.20264811447264242, 0.19211000342460982, 0.19149845884701777, 0.25017257320491837, 0.22831263511238342, 0.22036662728925271, 0.28072120067988604, 0.28244680866028127, 0.20812711488349644, 0.6408741955124668, 0.19353118249237478, 0.16675563759331347, 0.4976859760084008, 0.4892049175611233, 0.5434692771636185, 0.29479481011032405, 0.358640379822735, 0.35862456986207325, 0.192162745419158, 0.487149173780581, 0.5463893453837013, 0.43940400451011496, 0.2755967916157974, 0.18925599111268154, 0.19963567301018081, 0.5414709206077926, 0.19957285232578448, 0.18952249184701553, 0.17765474681583415, 0.17378881812013147, 0.17786551162129505, 0.17920587662617038, 0.2001632955887278, 0.18076833067032516, 0.1801919496025436, 0.1761995299275586, 0.07741636929535567, 0.0830005357116641, 0.07952662108109276, 0.07459185689412862, 0.07674689102508525, 0.06884074856563571, 0.07857791403614434, 0.08405295860230999, 0.0731095590764087]}, "mutation_prompt": null}
{"id": "1b5bdf3b-90c4-478f-95ec-23e70acf4ac9", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 10 * dim\n        self.population_size = self.initial_population_size\n        self.mutation_f = 0.5\n        self.crossover_prob = 0.7\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim)\n        )\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        \n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                if self.used_budget >= self.budget:\n                    break\n\n                # Mutation and recombination\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_f * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial[cross_points] = mutant[cross_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.used_budget += 1\n                if trial_fitness < self.fitness[i]:\n                    self.fitness[i] = trial_fitness\n                    self.population[i] = trial\n\n            # Adaptive mechanisms\n            if self.used_budget > self.budget * 0.5 and self.population_size > self.dim:\n                self.population_size = int(self.initial_population_size / 2)\n\n            # Adaptation of mutation factor and crossover probability\n            self.mutation_f = 0.5 + 0.3 * np.random.rand()\n            self.crossover_prob = 0.5 + 0.4 * np.random.rand()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.used_budget >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1", "name": "AdaptiveDifferentialEvolution", "description": "An Adaptive Differential Evolution algorithm enhanced with dynamic population size adjustment and a more sophisticated crossover strategy to improve convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "686e5765-66bd-4023-bb8f-797cd3285c74", "metadata": {"aucs": [0.7649530760233154, 0.7672203135695314, 0.7425091083534923, 0.7466124230890963, 0.7704599926457998, 0.7545584238429436, 0.7607524557865303, 0.7452759414992235, 0.7480973398464614, 0.5862065060770814, 0.5825938692348882, 0.5860768603755706, 0.5884050674615322, 0.5674125077060967, 0.5826435901385849, 0.5951042015179475, 0.6032313272244649, 0.5731672465217614, 0.25194592521131665, 0.1676756158856184, 0.26291580523412994, 0.2600503255878519, 0.17959807225069402, 0.2335825331252055, 0.2426249825633744, 0.3098139619975633, 0.2238814093442566, 0.16512111046391276, 0.21525969008541834, 0.19464188362095924, 0.12433287421253714, 0.16938508364746163, 0.18976455925568758, 0.13245017086615973, 0.1914663153843057, 0.1874239908218731, 0.9382511363254415, 0.9427002108554231, 0.9335298663510166, 0.9735453086833011, 0.9716724136429433, 0.9510382502908014, 0.9634134672229929, 0.9509589054801365, 0.9258879750336196, 0.3488179661700227, 0.3938629525946634, 0.4347726549811002, 0.4192564353073116, 0.389892254250635, 0.39604469148062593, 0.42641372566848945, 0.4198347262636978, 0.4153207613767891, 0.4290968639230195, 0.5501128315873807, 0.5279342473536783, 0.5823625292882533, 0.5890925402731175, 0.5613742528251338, 0.5809233736272427, 0.5916647914898385, 0.5784694622656943, 0.21674247876611485, 0.18909305362696527, 0.1798032830302967, 0.15696316364485352, 0.1794543951235008, 0.18877119059253666, 0.3004394879386265, 0.2183158139879512, 0.2014575293460571, 0.16751679858993596, 0.1567386612593329, 0.21409862242562416, 0.24158310574334418, 0.2001879571817049, 0.2491357919562368, 0.23606130039657836, 0.2138807332293885, 0.19371853333011013, 0.10317564745716923, 0.08467517496480015, 0.09389911343643675, 0.09573396864087969, 0.07486365299407793, 0.0442967807760688, 0.12878722553210498, 0.0964958657847026, 0.07909484892663587, 0.23590099351112526, 0.20216297112133585, 0.20882497179331172, 0.21456010145039728, 0.20432566242871153, 0.12994546971771215, 0.2511321390500115, 0.2046752316748388, 0.2556081827349247, 0.04524643133393491, 0.03069074890312329, 0.06178105905539266, 0.0699604123885581, 0.04415075947763236, 0.03450183732339096, 0.05304536553524963, 0.08212001961877358, 0.02319607651683253, 0.1588741206119405, 0.16554565624524453, 0.1504714197556989, 0.18339339349809358, 0.15915080336276188, 0.17621457723474965, 0.15410642103848982, 0.14627687511898313, 0.1591600706554931, 0.5436354200512152, 0.5341545209678712, 0.5241850698803925, 0.5599272364565837, 0.5259057857779712, 0.5062025183429466, 0.5395204763904666, 0.5365040376452355, 0.5278764559093689, 0.08535298729770857, 0.09148956013510867, 0.10171053662853569, 0.11574511432253998, 0.10563633885824852, 0.11188308205140507, 0.115776251817583, 0.10097361304176866, 0.09042796994295366, 0.14880949890428163, 0.1325934670430281, 0.19583144394655738, 0.12493560537378257, 0.18502724360352996, 0.12882282471558337, 0.13515223906191365, 0.12827721213156107, 0.14236695678275868, 0.3122690889056031, 0.34125131901950245, 0.3189119476463479, 0.31728298209870665, 0.3414408983994017, 0.33979007787767723, 0.3514442661665945, 0.39367957216627925, 0.369656070988143, 0.23198347831140986, 0.22829913043231886, 0.22921597609444966, 0.251120787788886, 0.24167393698168704, 0.20746485258928837, 0.2437880398264347, 0.25592442959305695, 0.26947644647958024, 0.19400567801085455, 0.19406769423076453, 0.19319049200276806, 0.18174325807884217, 0.18412799391645007, 0.19045283601534158, 0.20894670161571838, 0.19400842451017297, 0.1879639634757112, 0.20264811447264242, 0.19211000342460982, 0.19149845884701777, 0.25017257320491837, 0.22831263511238342, 0.22036662728925271, 0.28072120067988604, 0.28244680866028127, 0.20812711488349644, 0.6408741955124668, 0.19353118249237478, 0.16675563759331347, 0.4976859760084008, 0.4892049175611233, 0.5434692771636185, 0.29479481011032405, 0.358640379822735, 0.35862456986207325, 0.192162745419158, 0.487149173780581, 0.5463893453837013, 0.43940400451011496, 0.2755967916157974, 0.18925599111268154, 0.19963567301018081, 0.5414709206077926, 0.19957285232578448, 0.18952249184701553, 0.17765474681583415, 0.17378881812013147, 0.17786551162129505, 0.17920587662617038, 0.2001632955887278, 0.18076833067032516, 0.1801919496025436, 0.1761995299275586, 0.07741636929535567, 0.0830005357116641, 0.07952662108109276, 0.07459185689412862, 0.07674689102508525, 0.06884074856563571, 0.07857791403614434, 0.08405295860230999, 0.0731095590764087]}, "mutation_prompt": null}
{"id": "3a0334b9-b4d0-41fe-a9d8-701608ac804e", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 10 * dim\n        self.population_size = self.initial_population_size\n        self.mutation_f = 0.5\n        self.crossover_prob = 0.7\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim)\n        )\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        \n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                if self.used_budget >= self.budget:\n                    break\n\n                # Mutation and recombination\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_f * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial[cross_points] = mutant[cross_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.used_budget += 1\n                if trial_fitness < self.fitness[i]:\n                    self.fitness[i] = trial_fitness\n                    self.population[i] = trial\n\n            # Adaptive mechanisms\n            if self.used_budget > self.budget * 0.5 and self.population_size > self.dim:\n                self.population_size = int(self.initial_population_size / 2)\n\n            # Adaptation of mutation factor and crossover probability\n            self.mutation_f = 0.5 + 0.3 * np.random.rand()\n            self.crossover_prob = 0.5 + 0.4 * np.random.rand()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.used_budget >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1", "name": "AdaptiveDifferentialEvolution", "description": "An Adaptive Differential Evolution algorithm enhanced with dynamic population size adjustment and a more sophisticated crossover strategy to improve convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "686e5765-66bd-4023-bb8f-797cd3285c74", "metadata": {"aucs": [0.7649530760233154, 0.7672203135695314, 0.7425091083534923, 0.7466124230890963, 0.7704599926457998, 0.7545584238429436, 0.7607524557865303, 0.7452759414992235, 0.7480973398464614, 0.5862065060770814, 0.5825938692348882, 0.5860768603755706, 0.5884050674615322, 0.5674125077060967, 0.5826435901385849, 0.5951042015179475, 0.6032313272244649, 0.5731672465217614, 0.25194592521131665, 0.1676756158856184, 0.26291580523412994, 0.2600503255878519, 0.17959807225069402, 0.2335825331252055, 0.2426249825633744, 0.3098139619975633, 0.2238814093442566, 0.16512111046391276, 0.21525969008541834, 0.19464188362095924, 0.12433287421253714, 0.16938508364746163, 0.18976455925568758, 0.13245017086615973, 0.1914663153843057, 0.1874239908218731, 0.9382511363254415, 0.9427002108554231, 0.9335298663510166, 0.9735453086833011, 0.9716724136429433, 0.9510382502908014, 0.9634134672229929, 0.9509589054801365, 0.9258879750336196, 0.3488179661700227, 0.3938629525946634, 0.4347726549811002, 0.4192564353073116, 0.389892254250635, 0.39604469148062593, 0.42641372566848945, 0.4198347262636978, 0.4153207613767891, 0.4290968639230195, 0.5501128315873807, 0.5279342473536783, 0.5823625292882533, 0.5890925402731175, 0.5613742528251338, 0.5809233736272427, 0.5916647914898385, 0.5784694622656943, 0.21674247876611485, 0.18909305362696527, 0.1798032830302967, 0.15696316364485352, 0.1794543951235008, 0.18877119059253666, 0.3004394879386265, 0.2183158139879512, 0.2014575293460571, 0.16751679858993596, 0.1567386612593329, 0.21409862242562416, 0.24158310574334418, 0.2001879571817049, 0.2491357919562368, 0.23606130039657836, 0.2138807332293885, 0.19371853333011013, 0.10317564745716923, 0.08467517496480015, 0.09389911343643675, 0.09573396864087969, 0.07486365299407793, 0.0442967807760688, 0.12878722553210498, 0.0964958657847026, 0.07909484892663587, 0.23590099351112526, 0.20216297112133585, 0.20882497179331172, 0.21456010145039728, 0.20432566242871153, 0.12994546971771215, 0.2511321390500115, 0.2046752316748388, 0.2556081827349247, 0.04524643133393491, 0.03069074890312329, 0.06178105905539266, 0.0699604123885581, 0.04415075947763236, 0.03450183732339096, 0.05304536553524963, 0.08212001961877358, 0.02319607651683253, 0.1588741206119405, 0.16554565624524453, 0.1504714197556989, 0.18339339349809358, 0.15915080336276188, 0.17621457723474965, 0.15410642103848982, 0.14627687511898313, 0.1591600706554931, 0.5436354200512152, 0.5341545209678712, 0.5241850698803925, 0.5599272364565837, 0.5259057857779712, 0.5062025183429466, 0.5395204763904666, 0.5365040376452355, 0.5278764559093689, 0.08535298729770857, 0.09148956013510867, 0.10171053662853569, 0.11574511432253998, 0.10563633885824852, 0.11188308205140507, 0.115776251817583, 0.10097361304176866, 0.09042796994295366, 0.14880949890428163, 0.1325934670430281, 0.19583144394655738, 0.12493560537378257, 0.18502724360352996, 0.12882282471558337, 0.13515223906191365, 0.12827721213156107, 0.14236695678275868, 0.3122690889056031, 0.34125131901950245, 0.3189119476463479, 0.31728298209870665, 0.3414408983994017, 0.33979007787767723, 0.3514442661665945, 0.39367957216627925, 0.369656070988143, 0.23198347831140986, 0.22829913043231886, 0.22921597609444966, 0.251120787788886, 0.24167393698168704, 0.20746485258928837, 0.2437880398264347, 0.25592442959305695, 0.26947644647958024, 0.19400567801085455, 0.19406769423076453, 0.19319049200276806, 0.18174325807884217, 0.18412799391645007, 0.19045283601534158, 0.20894670161571838, 0.19400842451017297, 0.1879639634757112, 0.20264811447264242, 0.19211000342460982, 0.19149845884701777, 0.25017257320491837, 0.22831263511238342, 0.22036662728925271, 0.28072120067988604, 0.28244680866028127, 0.20812711488349644, 0.6408741955124668, 0.19353118249237478, 0.16675563759331347, 0.4976859760084008, 0.4892049175611233, 0.5434692771636185, 0.29479481011032405, 0.358640379822735, 0.35862456986207325, 0.192162745419158, 0.487149173780581, 0.5463893453837013, 0.43940400451011496, 0.2755967916157974, 0.18925599111268154, 0.19963567301018081, 0.5414709206077926, 0.19957285232578448, 0.18952249184701553, 0.17765474681583415, 0.17378881812013147, 0.17786551162129505, 0.17920587662617038, 0.2001632955887278, 0.18076833067032516, 0.1801919496025436, 0.1761995299275586, 0.07741636929535567, 0.0830005357116641, 0.07952662108109276, 0.07459185689412862, 0.07674689102508525, 0.06884074856563571, 0.07857791403614434, 0.08405295860230999, 0.0731095590764087]}, "mutation_prompt": null}
{"id": "1cb2bffc-71f5-4da6-a3b3-084d66a954c9", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 10 * dim\n        self.population_size = self.initial_population_size\n        self.mutation_f = 0.5\n        self.crossover_prob = 0.7\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim)\n        )\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        \n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                if self.used_budget >= self.budget:\n                    break\n\n                # Mutation and recombination\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_f * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial[cross_points] = mutant[cross_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.used_budget += 1\n                if trial_fitness < self.fitness[i]:\n                    self.fitness[i] = trial_fitness\n                    self.population[i] = trial\n\n            # Adaptive mechanisms\n            if self.used_budget > self.budget * 0.5 and self.population_size > self.dim:\n                self.population_size = int(self.initial_population_size / 2)\n\n            # Adaptation of mutation factor and crossover probability\n            self.mutation_f = 0.5 + 0.3 * np.random.rand()\n            self.crossover_prob = 0.5 + 0.4 * np.random.rand()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.used_budget >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1", "name": "AdaptiveDifferentialEvolution", "description": "An Adaptive Differential Evolution algorithm enhanced with dynamic population size adjustment and a more sophisticated crossover strategy to improve convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "686e5765-66bd-4023-bb8f-797cd3285c74", "metadata": {"aucs": [0.7649530760233154, 0.7672203135695314, 0.7425091083534923, 0.7466124230890963, 0.7704599926457998, 0.7545584238429436, 0.7607524557865303, 0.7452759414992235, 0.7480973398464614, 0.5862065060770814, 0.5825938692348882, 0.5860768603755706, 0.5884050674615322, 0.5674125077060967, 0.5826435901385849, 0.5951042015179475, 0.6032313272244649, 0.5731672465217614, 0.25194592521131665, 0.1676756158856184, 0.26291580523412994, 0.2600503255878519, 0.17959807225069402, 0.2335825331252055, 0.2426249825633744, 0.3098139619975633, 0.2238814093442566, 0.16512111046391276, 0.21525969008541834, 0.19464188362095924, 0.12433287421253714, 0.16938508364746163, 0.18976455925568758, 0.13245017086615973, 0.1914663153843057, 0.1874239908218731, 0.9382511363254415, 0.9427002108554231, 0.9335298663510166, 0.9735453086833011, 0.9716724136429433, 0.9510382502908014, 0.9634134672229929, 0.9509589054801365, 0.9258879750336196, 0.3488179661700227, 0.3938629525946634, 0.4347726549811002, 0.4192564353073116, 0.389892254250635, 0.39604469148062593, 0.42641372566848945, 0.4198347262636978, 0.4153207613767891, 0.4290968639230195, 0.5501128315873807, 0.5279342473536783, 0.5823625292882533, 0.5890925402731175, 0.5613742528251338, 0.5809233736272427, 0.5916647914898385, 0.5784694622656943, 0.21674247876611485, 0.18909305362696527, 0.1798032830302967, 0.15696316364485352, 0.1794543951235008, 0.18877119059253666, 0.3004394879386265, 0.2183158139879512, 0.2014575293460571, 0.16751679858993596, 0.1567386612593329, 0.21409862242562416, 0.24158310574334418, 0.2001879571817049, 0.2491357919562368, 0.23606130039657836, 0.2138807332293885, 0.19371853333011013, 0.10317564745716923, 0.08467517496480015, 0.09389911343643675, 0.09573396864087969, 0.07486365299407793, 0.0442967807760688, 0.12878722553210498, 0.0964958657847026, 0.07909484892663587, 0.23590099351112526, 0.20216297112133585, 0.20882497179331172, 0.21456010145039728, 0.20432566242871153, 0.12994546971771215, 0.2511321390500115, 0.2046752316748388, 0.2556081827349247, 0.04524643133393491, 0.03069074890312329, 0.06178105905539266, 0.0699604123885581, 0.04415075947763236, 0.03450183732339096, 0.05304536553524963, 0.08212001961877358, 0.02319607651683253, 0.1588741206119405, 0.16554565624524453, 0.1504714197556989, 0.18339339349809358, 0.15915080336276188, 0.17621457723474965, 0.15410642103848982, 0.14627687511898313, 0.1591600706554931, 0.5436354200512152, 0.5341545209678712, 0.5241850698803925, 0.5599272364565837, 0.5259057857779712, 0.5062025183429466, 0.5395204763904666, 0.5365040376452355, 0.5278764559093689, 0.08535298729770857, 0.09148956013510867, 0.10171053662853569, 0.11574511432253998, 0.10563633885824852, 0.11188308205140507, 0.115776251817583, 0.10097361304176866, 0.09042796994295366, 0.14880949890428163, 0.1325934670430281, 0.19583144394655738, 0.12493560537378257, 0.18502724360352996, 0.12882282471558337, 0.13515223906191365, 0.12827721213156107, 0.14236695678275868, 0.3122690889056031, 0.34125131901950245, 0.3189119476463479, 0.31728298209870665, 0.3414408983994017, 0.33979007787767723, 0.3514442661665945, 0.39367957216627925, 0.369656070988143, 0.23198347831140986, 0.22829913043231886, 0.22921597609444966, 0.251120787788886, 0.24167393698168704, 0.20746485258928837, 0.2437880398264347, 0.25592442959305695, 0.26947644647958024, 0.19400567801085455, 0.19406769423076453, 0.19319049200276806, 0.18174325807884217, 0.18412799391645007, 0.19045283601534158, 0.20894670161571838, 0.19400842451017297, 0.1879639634757112, 0.20264811447264242, 0.19211000342460982, 0.19149845884701777, 0.25017257320491837, 0.22831263511238342, 0.22036662728925271, 0.28072120067988604, 0.28244680866028127, 0.20812711488349644, 0.6408741955124668, 0.19353118249237478, 0.16675563759331347, 0.4976859760084008, 0.4892049175611233, 0.5434692771636185, 0.29479481011032405, 0.358640379822735, 0.35862456986207325, 0.192162745419158, 0.487149173780581, 0.5463893453837013, 0.43940400451011496, 0.2755967916157974, 0.18925599111268154, 0.19963567301018081, 0.5414709206077926, 0.19957285232578448, 0.18952249184701553, 0.17765474681583415, 0.17378881812013147, 0.17786551162129505, 0.17920587662617038, 0.2001632955887278, 0.18076833067032516, 0.1801919496025436, 0.1761995299275586, 0.07741636929535567, 0.0830005357116641, 0.07952662108109276, 0.07459185689412862, 0.07674689102508525, 0.06884074856563571, 0.07857791403614434, 0.08405295860230999, 0.0731095590764087]}, "mutation_prompt": null}
{"id": "53f2ddfc-c428-4153-9a9e-954f7b4ca749", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 10 * dim\n        self.population_size = self.initial_population_size\n        self.mutation_f = 0.5\n        self.crossover_prob = 0.7\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim)\n        )\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        \n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                if self.used_budget >= self.budget:\n                    break\n\n                # Mutation and recombination\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_f * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial[cross_points] = mutant[cross_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.used_budget += 1\n                if trial_fitness < self.fitness[i]:\n                    self.fitness[i] = trial_fitness\n                    self.population[i] = trial\n\n            # Adaptive mechanisms\n            if self.used_budget > self.budget * 0.5 and self.population_size > self.dim:\n                self.population_size = int(self.initial_population_size / 2)\n\n            # Adaptation of mutation factor and crossover probability\n            self.mutation_f = 0.5 + 0.3 * np.random.rand()\n            self.crossover_prob = 0.5 + 0.4 * np.random.rand()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.used_budget >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1", "name": "AdaptiveDifferentialEvolution", "description": "An Adaptive Differential Evolution algorithm enhanced with dynamic population size adjustment and a more sophisticated crossover strategy to improve convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "686e5765-66bd-4023-bb8f-797cd3285c74", "metadata": {"aucs": [0.7649530760233154, 0.7672203135695314, 0.7425091083534923, 0.7466124230890963, 0.7704599926457998, 0.7545584238429436, 0.7607524557865303, 0.7452759414992235, 0.7480973398464614, 0.5862065060770814, 0.5825938692348882, 0.5860768603755706, 0.5884050674615322, 0.5674125077060967, 0.5826435901385849, 0.5951042015179475, 0.6032313272244649, 0.5731672465217614, 0.25194592521131665, 0.1676756158856184, 0.26291580523412994, 0.2600503255878519, 0.17959807225069402, 0.2335825331252055, 0.2426249825633744, 0.3098139619975633, 0.2238814093442566, 0.16512111046391276, 0.21525969008541834, 0.19464188362095924, 0.12433287421253714, 0.16938508364746163, 0.18976455925568758, 0.13245017086615973, 0.1914663153843057, 0.1874239908218731, 0.9382511363254415, 0.9427002108554231, 0.9335298663510166, 0.9735453086833011, 0.9716724136429433, 0.9510382502908014, 0.9634134672229929, 0.9509589054801365, 0.9258879750336196, 0.3488179661700227, 0.3938629525946634, 0.4347726549811002, 0.4192564353073116, 0.389892254250635, 0.39604469148062593, 0.42641372566848945, 0.4198347262636978, 0.4153207613767891, 0.4290968639230195, 0.5501128315873807, 0.5279342473536783, 0.5823625292882533, 0.5890925402731175, 0.5613742528251338, 0.5809233736272427, 0.5916647914898385, 0.5784694622656943, 0.21674247876611485, 0.18909305362696527, 0.1798032830302967, 0.15696316364485352, 0.1794543951235008, 0.18877119059253666, 0.3004394879386265, 0.2183158139879512, 0.2014575293460571, 0.16751679858993596, 0.1567386612593329, 0.21409862242562416, 0.24158310574334418, 0.2001879571817049, 0.2491357919562368, 0.23606130039657836, 0.2138807332293885, 0.19371853333011013, 0.10317564745716923, 0.08467517496480015, 0.09389911343643675, 0.09573396864087969, 0.07486365299407793, 0.0442967807760688, 0.12878722553210498, 0.0964958657847026, 0.07909484892663587, 0.23590099351112526, 0.20216297112133585, 0.20882497179331172, 0.21456010145039728, 0.20432566242871153, 0.12994546971771215, 0.2511321390500115, 0.2046752316748388, 0.2556081827349247, 0.04524643133393491, 0.03069074890312329, 0.06178105905539266, 0.0699604123885581, 0.04415075947763236, 0.03450183732339096, 0.05304536553524963, 0.08212001961877358, 0.02319607651683253, 0.1588741206119405, 0.16554565624524453, 0.1504714197556989, 0.18339339349809358, 0.15915080336276188, 0.17621457723474965, 0.15410642103848982, 0.14627687511898313, 0.1591600706554931, 0.5436354200512152, 0.5341545209678712, 0.5241850698803925, 0.5599272364565837, 0.5259057857779712, 0.5062025183429466, 0.5395204763904666, 0.5365040376452355, 0.5278764559093689, 0.08535298729770857, 0.09148956013510867, 0.10171053662853569, 0.11574511432253998, 0.10563633885824852, 0.11188308205140507, 0.115776251817583, 0.10097361304176866, 0.09042796994295366, 0.14880949890428163, 0.1325934670430281, 0.19583144394655738, 0.12493560537378257, 0.18502724360352996, 0.12882282471558337, 0.13515223906191365, 0.12827721213156107, 0.14236695678275868, 0.3122690889056031, 0.34125131901950245, 0.3189119476463479, 0.31728298209870665, 0.3414408983994017, 0.33979007787767723, 0.3514442661665945, 0.39367957216627925, 0.369656070988143, 0.23198347831140986, 0.22829913043231886, 0.22921597609444966, 0.251120787788886, 0.24167393698168704, 0.20746485258928837, 0.2437880398264347, 0.25592442959305695, 0.26947644647958024, 0.19400567801085455, 0.19406769423076453, 0.19319049200276806, 0.18174325807884217, 0.18412799391645007, 0.19045283601534158, 0.20894670161571838, 0.19400842451017297, 0.1879639634757112, 0.20264811447264242, 0.19211000342460982, 0.19149845884701777, 0.25017257320491837, 0.22831263511238342, 0.22036662728925271, 0.28072120067988604, 0.28244680866028127, 0.20812711488349644, 0.6408741955124668, 0.19353118249237478, 0.16675563759331347, 0.4976859760084008, 0.4892049175611233, 0.5434692771636185, 0.29479481011032405, 0.358640379822735, 0.35862456986207325, 0.192162745419158, 0.487149173780581, 0.5463893453837013, 0.43940400451011496, 0.2755967916157974, 0.18925599111268154, 0.19963567301018081, 0.5414709206077926, 0.19957285232578448, 0.18952249184701553, 0.17765474681583415, 0.17378881812013147, 0.17786551162129505, 0.17920587662617038, 0.2001632955887278, 0.18076833067032516, 0.1801919496025436, 0.1761995299275586, 0.07741636929535567, 0.0830005357116641, 0.07952662108109276, 0.07459185689412862, 0.07674689102508525, 0.06884074856563571, 0.07857791403614434, 0.08405295860230999, 0.0731095590764087]}, "mutation_prompt": null}
{"id": "a8136110-d692-43ea-b60c-7cdd5bd667cc", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 10 * dim\n        self.population_size = self.initial_population_size\n        self.mutation_f = 0.5\n        self.crossover_prob = 0.7\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim)\n        )\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        \n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                if self.used_budget >= self.budget:\n                    break\n\n                # Mutation and recombination\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_f * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial[cross_points] = mutant[cross_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.used_budget += 1\n                if trial_fitness < self.fitness[i]:\n                    self.fitness[i] = trial_fitness\n                    self.population[i] = trial\n\n            # Adaptive mechanisms\n            if self.used_budget > self.budget * 0.5 and self.population_size > self.dim:\n                self.population_size = int(self.initial_population_size / 2)\n\n            # Adaptation of mutation factor and crossover probability\n            self.mutation_f = 0.5 + 0.3 * np.random.rand()\n            self.crossover_prob = 0.5 + 0.4 * np.random.rand()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.used_budget >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1", "name": "AdaptiveDifferentialEvolution", "description": "An Adaptive Differential Evolution algorithm enhanced with dynamic population size adjustment and a more sophisticated crossover strategy to improve convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "686e5765-66bd-4023-bb8f-797cd3285c74", "metadata": {"aucs": [0.7649530760233154, 0.7672203135695314, 0.7425091083534923, 0.7466124230890963, 0.7704599926457998, 0.7545584238429436, 0.7607524557865303, 0.7452759414992235, 0.7480973398464614, 0.5862065060770814, 0.5825938692348882, 0.5860768603755706, 0.5884050674615322, 0.5674125077060967, 0.5826435901385849, 0.5951042015179475, 0.6032313272244649, 0.5731672465217614, 0.25194592521131665, 0.1676756158856184, 0.26291580523412994, 0.2600503255878519, 0.17959807225069402, 0.2335825331252055, 0.2426249825633744, 0.3098139619975633, 0.2238814093442566, 0.16512111046391276, 0.21525969008541834, 0.19464188362095924, 0.12433287421253714, 0.16938508364746163, 0.18976455925568758, 0.13245017086615973, 0.1914663153843057, 0.1874239908218731, 0.9382511363254415, 0.9427002108554231, 0.9335298663510166, 0.9735453086833011, 0.9716724136429433, 0.9510382502908014, 0.9634134672229929, 0.9509589054801365, 0.9258879750336196, 0.3488179661700227, 0.3938629525946634, 0.4347726549811002, 0.4192564353073116, 0.389892254250635, 0.39604469148062593, 0.42641372566848945, 0.4198347262636978, 0.4153207613767891, 0.4290968639230195, 0.5501128315873807, 0.5279342473536783, 0.5823625292882533, 0.5890925402731175, 0.5613742528251338, 0.5809233736272427, 0.5916647914898385, 0.5784694622656943, 0.21674247876611485, 0.18909305362696527, 0.1798032830302967, 0.15696316364485352, 0.1794543951235008, 0.18877119059253666, 0.3004394879386265, 0.2183158139879512, 0.2014575293460571, 0.16751679858993596, 0.1567386612593329, 0.21409862242562416, 0.24158310574334418, 0.2001879571817049, 0.2491357919562368, 0.23606130039657836, 0.2138807332293885, 0.19371853333011013, 0.10317564745716923, 0.08467517496480015, 0.09389911343643675, 0.09573396864087969, 0.07486365299407793, 0.0442967807760688, 0.12878722553210498, 0.0964958657847026, 0.07909484892663587, 0.23590099351112526, 0.20216297112133585, 0.20882497179331172, 0.21456010145039728, 0.20432566242871153, 0.12994546971771215, 0.2511321390500115, 0.2046752316748388, 0.2556081827349247, 0.04524643133393491, 0.03069074890312329, 0.06178105905539266, 0.0699604123885581, 0.04415075947763236, 0.03450183732339096, 0.05304536553524963, 0.08212001961877358, 0.02319607651683253, 0.1588741206119405, 0.16554565624524453, 0.1504714197556989, 0.18339339349809358, 0.15915080336276188, 0.17621457723474965, 0.15410642103848982, 0.14627687511898313, 0.1591600706554931, 0.5436354200512152, 0.5341545209678712, 0.5241850698803925, 0.5599272364565837, 0.5259057857779712, 0.5062025183429466, 0.5395204763904666, 0.5365040376452355, 0.5278764559093689, 0.08535298729770857, 0.09148956013510867, 0.10171053662853569, 0.11574511432253998, 0.10563633885824852, 0.11188308205140507, 0.115776251817583, 0.10097361304176866, 0.09042796994295366, 0.14880949890428163, 0.1325934670430281, 0.19583144394655738, 0.12493560537378257, 0.18502724360352996, 0.12882282471558337, 0.13515223906191365, 0.12827721213156107, 0.14236695678275868, 0.3122690889056031, 0.34125131901950245, 0.3189119476463479, 0.31728298209870665, 0.3414408983994017, 0.33979007787767723, 0.3514442661665945, 0.39367957216627925, 0.369656070988143, 0.23198347831140986, 0.22829913043231886, 0.22921597609444966, 0.251120787788886, 0.24167393698168704, 0.20746485258928837, 0.2437880398264347, 0.25592442959305695, 0.26947644647958024, 0.19400567801085455, 0.19406769423076453, 0.19319049200276806, 0.18174325807884217, 0.18412799391645007, 0.19045283601534158, 0.20894670161571838, 0.19400842451017297, 0.1879639634757112, 0.20264811447264242, 0.19211000342460982, 0.19149845884701777, 0.25017257320491837, 0.22831263511238342, 0.22036662728925271, 0.28072120067988604, 0.28244680866028127, 0.20812711488349644, 0.6408741955124668, 0.19353118249237478, 0.16675563759331347, 0.4976859760084008, 0.4892049175611233, 0.5434692771636185, 0.29479481011032405, 0.358640379822735, 0.35862456986207325, 0.192162745419158, 0.487149173780581, 0.5463893453837013, 0.43940400451011496, 0.2755967916157974, 0.18925599111268154, 0.19963567301018081, 0.5414709206077926, 0.19957285232578448, 0.18952249184701553, 0.17765474681583415, 0.17378881812013147, 0.17786551162129505, 0.17920587662617038, 0.2001632955887278, 0.18076833067032516, 0.1801919496025436, 0.1761995299275586, 0.07741636929535567, 0.0830005357116641, 0.07952662108109276, 0.07459185689412862, 0.07674689102508525, 0.06884074856563571, 0.07857791403614434, 0.08405295860230999, 0.0731095590764087]}, "mutation_prompt": null}
{"id": "412553c6-b5e3-453f-ba67-8888cdd031cf", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 10 * dim\n        self.population_size = self.initial_population_size\n        self.mutation_f = 0.5\n        self.crossover_prob = 0.7\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim)\n        )\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n        self.convergence_threshold = 1e-5  # New: Threshold for convergence checking\n        self.convergence_count = 0  # New: Counter to track convergence\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        \n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                if self.used_budget >= self.budget:\n                    break\n\n                # Mutation and recombination\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_f * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial[cross_points] = mutant[cross_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.used_budget += 1\n                if trial_fitness < self.fitness[i]:\n                    self.fitness[i] = trial_fitness\n                    self.population[i] = trial\n                    self.convergence_count += 1  # New: Increment on improvement\n\n            # Adaptive mechanisms\n            if self.used_budget > self.budget * 0.5 and self.population_size > self.dim:\n                self.population_size = int(self.initial_population_size / 2)\n            \n            # Adaptation of mutation factor and crossover probability\n            if self.convergence_count > 5:  # New: Adjust based on recent improvements\n                self.mutation_f *= 0.9\n                self.crossover_prob = 0.5 + 0.3 * np.random.rand()\n                self.convergence_count = 0  # Reset count\n\n            self.mutation_f = 0.5 + 0.3 * np.random.rand()\n            self.crossover_prob = 0.5 + 0.3 * np.random.rand()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.used_budget >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1", "name": "EnhancedDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with dynamic parameter tuning based on early convergence indicators for improved search efficiency.", "configspace": "", "generation": 54, "fitness": 0.28434599952525047, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.23.", "error": "", "parent_id": "686e5765-66bd-4023-bb8f-797cd3285c74", "metadata": {"aucs": [0.7593844491933246, 0.7603185163683133, 0.7566049173600704, 0.7437066688850124, 0.7701966751087311, 0.7660880654545824, 0.7661072256117675, 0.7592251849892312, 0.7603094044126332, 0.5736296985786258, 0.577933071775138, 0.5891017735352768, 0.5810176071894881, 0.5743265751826341, 0.5939311551530777, 0.5822201014818368, 0.5687889507402146, 0.5946359743870617, 0.3720516624933615, 0.3385892346677467, 0.24014924516704328, 0.23804105129209907, 0.18857477948553947, 0.210837043744864, 0.2375301868506694, 0.3827382118063243, 0.24148330681420438, 0.22659223967722442, 0.2547869644499833, 0.12936988463350096, 0.23569429417222298, 0.23054704781177415, 0.17138370697041794, 0.2513434705013641, 0.1484841865518336, 0.20486820114886872, 0.9375362624384264, 0.9512515127397118, 0.958547829087465, 0.9463418548962115, 0.9464376568240664, 0.9268053425519078, 0.9491921558310997, 0.9510494541745156, 0.9430533160556954, 0.40578147088288063, 0.34573572084031834, 0.3664720935299126, 0.35943022664644464, 0.3806387445383763, 0.3841655130355741, 0.35126126011465864, 0.3604039415002177, 0.3699983501684595, 0.4753747489964034, 0.4767750996610398, 0.475897475592459, 0.457334257327521, 0.43682366671203465, 0.47628406399217416, 0.543612967761864, 0.5004285970850367, 0.4914469920277853, 0.1518607742584589, 0.17484349744338656, 0.20923288742800894, 0.18310480324973, 0.19507622989740026, 0.14492277495471517, 0.15513962595785047, 0.17756530995868036, 0.18039011166936414, 0.2023687551878255, 0.17623328117359982, 0.13204241173423958, 0.18698252014033, 0.1717672273450651, 0.16670657346178508, 0.18765887873322085, 0.18972658070924908, 0.1554096681010818, 0.03460569419054571, 0.020892694310447046, 0.030537914956587198, 0.06455144852688921, 0.019248178869607502, 0.03782253646950007, 0.01553455601055631, 0.030771598812874945, 0.045302750114963763, 0.1502705560532408, 0.12230097975472132, 0.13619029737974286, 0.1543973394983421, 0.13445025598825466, 0.08936439696765242, 0.17806656365816143, 0.17978783086325545, 0.13795943343504058, 0.010170361391105498, 0.01311778011977327, 0.01255287093591373, 0.009623776961996788, 0.01657685907975115, 0.02731122615799364, 0.0516306491900701, 0.041474793325071424, 0.031803988474782274, 0.13665386218276143, 0.13510610087815078, 0.10642944363118712, 0.13783568727013296, 0.1580907984883657, 0.17032285706144035, 0.13394154078305642, 0.1328510709834656, 0.11952273236514843, 0.5111429965940917, 0.4879409627764556, 0.502085704186179, 0.5002513318988138, 0.5182094322665352, 0.5239690908357424, 0.5178884049748442, 0.49695993132771565, 0.5234485034241871, 0.09823861620265484, 0.09990211808586724, 0.09319679447225027, 0.10072665494232091, 0.09387096788201454, 0.08698403681835787, 0.08486763592087321, 0.09751073867024551, 0.08255321639738666, 0.13806165575167484, 0.12253887658681506, 0.13534114334498715, 0.13165174401801227, 0.17795959186891264, 0.1587503873070777, 0.14072290252782182, 0.13268451272714576, 0.1387789016650608, 0.3109256159640741, 0.31278315060695805, 0.2961425108999429, 0.32687040131508205, 0.33331060058842177, 0.3274106011003032, 0.33921574799110765, 0.3778129591984092, 0.3518457405209874, 0.20898249753797515, 0.19557620661017394, 0.2077261197424024, 0.2051001500135824, 0.20239305812672825, 0.20055496698949027, 0.22260610790708046, 0.2582558885251618, 0.23719839360982686, 0.19984981987186778, 0.18726870695015718, 0.1846309165140172, 0.20323245681783753, 0.18994924233187138, 0.19212493531548858, 0.19134672926129292, 0.17767135139891865, 0.19072572505480467, 0.1899323832554033, 0.2783066497811667, 0.205077105477811, 0.2315867649606741, 0.20766424318347554, 0.23815428484339296, 0.19279470688792189, 0.22442227968848028, 0.18652652574177997, 0.45792491749425, 0.36581373427843145, 0.21266352615175887, 0.5933399391886609, 0.24881607560580532, 0.36565658243123633, 0.168513209612703, 0.29779198653527017, 0.17950683075420437, 0.2344092934962787, 0.19321021665756144, 0.3947958553541149, 0.19663835016751907, 0.3281370000949507, 0.2315874029174423, 0.20458780691763756, 0.19287110480725866, 0.20426992136957467, 0.1841053233849579, 0.17835513514064583, 0.1795201722256088, 0.1940093033917344, 0.18057141673254629, 0.18710106716183805, 0.17547410372515826, 0.18084778830545345, 0.1853260317618951, 0.07877973228088886, 0.07634091071207583, 0.07748733421982634, 0.07110002557380335, 0.08026144437461502, 0.06968567671366743, 0.08908824169818474, 0.08347888957348515, 0.07768250338208038]}, "mutation_prompt": null}
{"id": "7e72b198-8b90-4787-9e49-1cf10509060e", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 10 * dim\n        self.population_size = self.initial_population_size\n        self.mutation_f = 0.5\n        self.crossover_prob = 0.7\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim)\n        )\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        \n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                if self.used_budget >= self.budget:\n                    break\n\n                # Mutation and recombination\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_f * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial[cross_points] = mutant[cross_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.used_budget += 1\n                if trial_fitness < self.fitness[i]:\n                    self.fitness[i] = trial_fitness\n                    self.population[i] = trial\n\n            # Adaptive mechanisms\n            if self.used_budget > self.budget * 0.5 and self.population_size > self.dim:\n                self.population_size = int(self.initial_population_size / 2)\n\n            # Adaptation of mutation factor and crossover probability\n            self.mutation_f = 0.5 + 0.3 * np.random.rand()\n            self.crossover_prob = 0.5 + 0.4 * np.random.rand()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.used_budget >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1", "name": "AdaptiveDifferentialEvolution", "description": "An Adaptive Differential Evolution algorithm enhanced with dynamic population size adjustment and a more sophisticated crossover strategy to improve convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "686e5765-66bd-4023-bb8f-797cd3285c74", "metadata": {"aucs": [0.7649530760233154, 0.7672203135695314, 0.7425091083534923, 0.7466124230890963, 0.7704599926457998, 0.7545584238429436, 0.7607524557865303, 0.7452759414992235, 0.7480973398464614, 0.5862065060770814, 0.5825938692348882, 0.5860768603755706, 0.5884050674615322, 0.5674125077060967, 0.5826435901385849, 0.5951042015179475, 0.6032313272244649, 0.5731672465217614, 0.25194592521131665, 0.1676756158856184, 0.26291580523412994, 0.2600503255878519, 0.17959807225069402, 0.2335825331252055, 0.2426249825633744, 0.3098139619975633, 0.2238814093442566, 0.16512111046391276, 0.21525969008541834, 0.19464188362095924, 0.12433287421253714, 0.16938508364746163, 0.18976455925568758, 0.13245017086615973, 0.1914663153843057, 0.1874239908218731, 0.9382511363254415, 0.9427002108554231, 0.9335298663510166, 0.9735453086833011, 0.9716724136429433, 0.9510382502908014, 0.9634134672229929, 0.9509589054801365, 0.9258879750336196, 0.3488179661700227, 0.3938629525946634, 0.4347726549811002, 0.4192564353073116, 0.389892254250635, 0.39604469148062593, 0.42641372566848945, 0.4198347262636978, 0.4153207613767891, 0.4290968639230195, 0.5501128315873807, 0.5279342473536783, 0.5823625292882533, 0.5890925402731175, 0.5613742528251338, 0.5809233736272427, 0.5916647914898385, 0.5784694622656943, 0.21674247876611485, 0.18909305362696527, 0.1798032830302967, 0.15696316364485352, 0.1794543951235008, 0.18877119059253666, 0.3004394879386265, 0.2183158139879512, 0.2014575293460571, 0.16751679858993596, 0.1567386612593329, 0.21409862242562416, 0.24158310574334418, 0.2001879571817049, 0.2491357919562368, 0.23606130039657836, 0.2138807332293885, 0.19371853333011013, 0.10317564745716923, 0.08467517496480015, 0.09389911343643675, 0.09573396864087969, 0.07486365299407793, 0.0442967807760688, 0.12878722553210498, 0.0964958657847026, 0.07909484892663587, 0.23590099351112526, 0.20216297112133585, 0.20882497179331172, 0.21456010145039728, 0.20432566242871153, 0.12994546971771215, 0.2511321390500115, 0.2046752316748388, 0.2556081827349247, 0.04524643133393491, 0.03069074890312329, 0.06178105905539266, 0.0699604123885581, 0.04415075947763236, 0.03450183732339096, 0.05304536553524963, 0.08212001961877358, 0.02319607651683253, 0.1588741206119405, 0.16554565624524453, 0.1504714197556989, 0.18339339349809358, 0.15915080336276188, 0.17621457723474965, 0.15410642103848982, 0.14627687511898313, 0.1591600706554931, 0.5436354200512152, 0.5341545209678712, 0.5241850698803925, 0.5599272364565837, 0.5259057857779712, 0.5062025183429466, 0.5395204763904666, 0.5365040376452355, 0.5278764559093689, 0.08535298729770857, 0.09148956013510867, 0.10171053662853569, 0.11574511432253998, 0.10563633885824852, 0.11188308205140507, 0.115776251817583, 0.10097361304176866, 0.09042796994295366, 0.14880949890428163, 0.1325934670430281, 0.19583144394655738, 0.12493560537378257, 0.18502724360352996, 0.12882282471558337, 0.13515223906191365, 0.12827721213156107, 0.14236695678275868, 0.3122690889056031, 0.34125131901950245, 0.3189119476463479, 0.31728298209870665, 0.3414408983994017, 0.33979007787767723, 0.3514442661665945, 0.39367957216627925, 0.369656070988143, 0.23198347831140986, 0.22829913043231886, 0.22921597609444966, 0.251120787788886, 0.24167393698168704, 0.20746485258928837, 0.2437880398264347, 0.25592442959305695, 0.26947644647958024, 0.19400567801085455, 0.19406769423076453, 0.19319049200276806, 0.18174325807884217, 0.18412799391645007, 0.19045283601534158, 0.20894670161571838, 0.19400842451017297, 0.1879639634757112, 0.20264811447264242, 0.19211000342460982, 0.19149845884701777, 0.25017257320491837, 0.22831263511238342, 0.22036662728925271, 0.28072120067988604, 0.28244680866028127, 0.20812711488349644, 0.6408741955124668, 0.19353118249237478, 0.16675563759331347, 0.4976859760084008, 0.4892049175611233, 0.5434692771636185, 0.29479481011032405, 0.358640379822735, 0.35862456986207325, 0.192162745419158, 0.487149173780581, 0.5463893453837013, 0.43940400451011496, 0.2755967916157974, 0.18925599111268154, 0.19963567301018081, 0.5414709206077926, 0.19957285232578448, 0.18952249184701553, 0.17765474681583415, 0.17378881812013147, 0.17786551162129505, 0.17920587662617038, 0.2001632955887278, 0.18076833067032516, 0.1801919496025436, 0.1761995299275586, 0.07741636929535567, 0.0830005357116641, 0.07952662108109276, 0.07459185689412862, 0.07674689102508525, 0.06884074856563571, 0.07857791403614434, 0.08405295860230999, 0.0731095590764087]}, "mutation_prompt": null}
{"id": "d7736d7b-d00e-4b86-b66a-b764f9e8d26a", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 10 * dim\n        self.population_size = self.initial_population_size\n        self.mutation_f = 0.5\n        self.crossover_prob = 0.7\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim)\n        )\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        \n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                if self.used_budget >= self.budget:\n                    break\n\n                # Mutation and recombination\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_f * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial[cross_points] = mutant[cross_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.used_budget += 1\n                if trial_fitness < self.fitness[i]:\n                    self.fitness[i] = trial_fitness\n                    self.population[i] = trial\n\n            # Adaptive mechanisms\n            if self.used_budget > self.budget * 0.5 and self.population_size > self.dim:\n                self.population_size = int(self.initial_population_size / 2)\n\n            # Adaptation of mutation factor and crossover probability\n            self.mutation_f = 0.5 + 0.3 * np.random.rand()\n            self.crossover_prob = 0.5 + 0.4 * np.random.rand()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.used_budget >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1", "name": "AdaptiveDifferentialEvolution", "description": "An Adaptive Differential Evolution algorithm enhanced with dynamic population size adjustment and a more sophisticated crossover strategy to improve convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "686e5765-66bd-4023-bb8f-797cd3285c74", "metadata": {"aucs": [0.7649530760233154, 0.7672203135695314, 0.7425091083534923, 0.7466124230890963, 0.7704599926457998, 0.7545584238429436, 0.7607524557865303, 0.7452759414992235, 0.7480973398464614, 0.5862065060770814, 0.5825938692348882, 0.5860768603755706, 0.5884050674615322, 0.5674125077060967, 0.5826435901385849, 0.5951042015179475, 0.6032313272244649, 0.5731672465217614, 0.25194592521131665, 0.1676756158856184, 0.26291580523412994, 0.2600503255878519, 0.17959807225069402, 0.2335825331252055, 0.2426249825633744, 0.3098139619975633, 0.2238814093442566, 0.16512111046391276, 0.21525969008541834, 0.19464188362095924, 0.12433287421253714, 0.16938508364746163, 0.18976455925568758, 0.13245017086615973, 0.1914663153843057, 0.1874239908218731, 0.9382511363254415, 0.9427002108554231, 0.9335298663510166, 0.9735453086833011, 0.9716724136429433, 0.9510382502908014, 0.9634134672229929, 0.9509589054801365, 0.9258879750336196, 0.3488179661700227, 0.3938629525946634, 0.4347726549811002, 0.4192564353073116, 0.389892254250635, 0.39604469148062593, 0.42641372566848945, 0.4198347262636978, 0.4153207613767891, 0.4290968639230195, 0.5501128315873807, 0.5279342473536783, 0.5823625292882533, 0.5890925402731175, 0.5613742528251338, 0.5809233736272427, 0.5916647914898385, 0.5784694622656943, 0.21674247876611485, 0.18909305362696527, 0.1798032830302967, 0.15696316364485352, 0.1794543951235008, 0.18877119059253666, 0.3004394879386265, 0.2183158139879512, 0.2014575293460571, 0.16751679858993596, 0.1567386612593329, 0.21409862242562416, 0.24158310574334418, 0.2001879571817049, 0.2491357919562368, 0.23606130039657836, 0.2138807332293885, 0.19371853333011013, 0.10317564745716923, 0.08467517496480015, 0.09389911343643675, 0.09573396864087969, 0.07486365299407793, 0.0442967807760688, 0.12878722553210498, 0.0964958657847026, 0.07909484892663587, 0.23590099351112526, 0.20216297112133585, 0.20882497179331172, 0.21456010145039728, 0.20432566242871153, 0.12994546971771215, 0.2511321390500115, 0.2046752316748388, 0.2556081827349247, 0.04524643133393491, 0.03069074890312329, 0.06178105905539266, 0.0699604123885581, 0.04415075947763236, 0.03450183732339096, 0.05304536553524963, 0.08212001961877358, 0.02319607651683253, 0.1588741206119405, 0.16554565624524453, 0.1504714197556989, 0.18339339349809358, 0.15915080336276188, 0.17621457723474965, 0.15410642103848982, 0.14627687511898313, 0.1591600706554931, 0.5436354200512152, 0.5341545209678712, 0.5241850698803925, 0.5599272364565837, 0.5259057857779712, 0.5062025183429466, 0.5395204763904666, 0.5365040376452355, 0.5278764559093689, 0.08535298729770857, 0.09148956013510867, 0.10171053662853569, 0.11574511432253998, 0.10563633885824852, 0.11188308205140507, 0.115776251817583, 0.10097361304176866, 0.09042796994295366, 0.14880949890428163, 0.1325934670430281, 0.19583144394655738, 0.12493560537378257, 0.18502724360352996, 0.12882282471558337, 0.13515223906191365, 0.12827721213156107, 0.14236695678275868, 0.3122690889056031, 0.34125131901950245, 0.3189119476463479, 0.31728298209870665, 0.3414408983994017, 0.33979007787767723, 0.3514442661665945, 0.39367957216627925, 0.369656070988143, 0.23198347831140986, 0.22829913043231886, 0.22921597609444966, 0.251120787788886, 0.24167393698168704, 0.20746485258928837, 0.2437880398264347, 0.25592442959305695, 0.26947644647958024, 0.19400567801085455, 0.19406769423076453, 0.19319049200276806, 0.18174325807884217, 0.18412799391645007, 0.19045283601534158, 0.20894670161571838, 0.19400842451017297, 0.1879639634757112, 0.20264811447264242, 0.19211000342460982, 0.19149845884701777, 0.25017257320491837, 0.22831263511238342, 0.22036662728925271, 0.28072120067988604, 0.28244680866028127, 0.20812711488349644, 0.6408741955124668, 0.19353118249237478, 0.16675563759331347, 0.4976859760084008, 0.4892049175611233, 0.5434692771636185, 0.29479481011032405, 0.358640379822735, 0.35862456986207325, 0.192162745419158, 0.487149173780581, 0.5463893453837013, 0.43940400451011496, 0.2755967916157974, 0.18925599111268154, 0.19963567301018081, 0.5414709206077926, 0.19957285232578448, 0.18952249184701553, 0.17765474681583415, 0.17378881812013147, 0.17786551162129505, 0.17920587662617038, 0.2001632955887278, 0.18076833067032516, 0.1801919496025436, 0.1761995299275586, 0.07741636929535567, 0.0830005357116641, 0.07952662108109276, 0.07459185689412862, 0.07674689102508525, 0.06884074856563571, 0.07857791403614434, 0.08405295860230999, 0.0731095590764087]}, "mutation_prompt": null}
{"id": "3b217168-fb7f-4b99-ab52-837ab8e9c614", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 10 * dim\n        self.population_size = self.initial_population_size\n        self.mutation_f = 0.5\n        self.crossover_prob = 0.7\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim)\n        )\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        \n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                if self.used_budget >= self.budget:\n                    break\n\n                # Mutation and recombination\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_f * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial[cross_points] = mutant[cross_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.used_budget += 1\n                if trial_fitness < self.fitness[i]:\n                    self.fitness[i] = trial_fitness\n                    self.population[i] = trial\n\n            # Adaptive mechanisms\n            if self.used_budget > self.budget * 0.5 and self.population_size > self.dim:\n                self.population_size = int(self.initial_population_size / 2)\n\n            # Adaptation of mutation factor and crossover probability\n            self.mutation_f = 0.5 + 0.3 * np.random.rand()\n            self.crossover_prob = 0.5 + 0.4 * np.random.rand()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.used_budget >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1", "name": "AdaptiveDifferentialEvolution", "description": "An Adaptive Differential Evolution algorithm enhanced with dynamic population size adjustment and a more sophisticated crossover strategy to improve convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "686e5765-66bd-4023-bb8f-797cd3285c74", "metadata": {"aucs": [0.7649530760233154, 0.7672203135695314, 0.7425091083534923, 0.7466124230890963, 0.7704599926457998, 0.7545584238429436, 0.7607524557865303, 0.7452759414992235, 0.7480973398464614, 0.5862065060770814, 0.5825938692348882, 0.5860768603755706, 0.5884050674615322, 0.5674125077060967, 0.5826435901385849, 0.5951042015179475, 0.6032313272244649, 0.5731672465217614, 0.25194592521131665, 0.1676756158856184, 0.26291580523412994, 0.2600503255878519, 0.17959807225069402, 0.2335825331252055, 0.2426249825633744, 0.3098139619975633, 0.2238814093442566, 0.16512111046391276, 0.21525969008541834, 0.19464188362095924, 0.12433287421253714, 0.16938508364746163, 0.18976455925568758, 0.13245017086615973, 0.1914663153843057, 0.1874239908218731, 0.9382511363254415, 0.9427002108554231, 0.9335298663510166, 0.9735453086833011, 0.9716724136429433, 0.9510382502908014, 0.9634134672229929, 0.9509589054801365, 0.9258879750336196, 0.3488179661700227, 0.3938629525946634, 0.4347726549811002, 0.4192564353073116, 0.389892254250635, 0.39604469148062593, 0.42641372566848945, 0.4198347262636978, 0.4153207613767891, 0.4290968639230195, 0.5501128315873807, 0.5279342473536783, 0.5823625292882533, 0.5890925402731175, 0.5613742528251338, 0.5809233736272427, 0.5916647914898385, 0.5784694622656943, 0.21674247876611485, 0.18909305362696527, 0.1798032830302967, 0.15696316364485352, 0.1794543951235008, 0.18877119059253666, 0.3004394879386265, 0.2183158139879512, 0.2014575293460571, 0.16751679858993596, 0.1567386612593329, 0.21409862242562416, 0.24158310574334418, 0.2001879571817049, 0.2491357919562368, 0.23606130039657836, 0.2138807332293885, 0.19371853333011013, 0.10317564745716923, 0.08467517496480015, 0.09389911343643675, 0.09573396864087969, 0.07486365299407793, 0.0442967807760688, 0.12878722553210498, 0.0964958657847026, 0.07909484892663587, 0.23590099351112526, 0.20216297112133585, 0.20882497179331172, 0.21456010145039728, 0.20432566242871153, 0.12994546971771215, 0.2511321390500115, 0.2046752316748388, 0.2556081827349247, 0.04524643133393491, 0.03069074890312329, 0.06178105905539266, 0.0699604123885581, 0.04415075947763236, 0.03450183732339096, 0.05304536553524963, 0.08212001961877358, 0.02319607651683253, 0.1588741206119405, 0.16554565624524453, 0.1504714197556989, 0.18339339349809358, 0.15915080336276188, 0.17621457723474965, 0.15410642103848982, 0.14627687511898313, 0.1591600706554931, 0.5436354200512152, 0.5341545209678712, 0.5241850698803925, 0.5599272364565837, 0.5259057857779712, 0.5062025183429466, 0.5395204763904666, 0.5365040376452355, 0.5278764559093689, 0.08535298729770857, 0.09148956013510867, 0.10171053662853569, 0.11574511432253998, 0.10563633885824852, 0.11188308205140507, 0.115776251817583, 0.10097361304176866, 0.09042796994295366, 0.14880949890428163, 0.1325934670430281, 0.19583144394655738, 0.12493560537378257, 0.18502724360352996, 0.12882282471558337, 0.13515223906191365, 0.12827721213156107, 0.14236695678275868, 0.3122690889056031, 0.34125131901950245, 0.3189119476463479, 0.31728298209870665, 0.3414408983994017, 0.33979007787767723, 0.3514442661665945, 0.39367957216627925, 0.369656070988143, 0.23198347831140986, 0.22829913043231886, 0.22921597609444966, 0.251120787788886, 0.24167393698168704, 0.20746485258928837, 0.2437880398264347, 0.25592442959305695, 0.26947644647958024, 0.19400567801085455, 0.19406769423076453, 0.19319049200276806, 0.18174325807884217, 0.18412799391645007, 0.19045283601534158, 0.20894670161571838, 0.19400842451017297, 0.1879639634757112, 0.20264811447264242, 0.19211000342460982, 0.19149845884701777, 0.25017257320491837, 0.22831263511238342, 0.22036662728925271, 0.28072120067988604, 0.28244680866028127, 0.20812711488349644, 0.6408741955124668, 0.19353118249237478, 0.16675563759331347, 0.4976859760084008, 0.4892049175611233, 0.5434692771636185, 0.29479481011032405, 0.358640379822735, 0.35862456986207325, 0.192162745419158, 0.487149173780581, 0.5463893453837013, 0.43940400451011496, 0.2755967916157974, 0.18925599111268154, 0.19963567301018081, 0.5414709206077926, 0.19957285232578448, 0.18952249184701553, 0.17765474681583415, 0.17378881812013147, 0.17786551162129505, 0.17920587662617038, 0.2001632955887278, 0.18076833067032516, 0.1801919496025436, 0.1761995299275586, 0.07741636929535567, 0.0830005357116641, 0.07952662108109276, 0.07459185689412862, 0.07674689102508525, 0.06884074856563571, 0.07857791403614434, 0.08405295860230999, 0.0731095590764087]}, "mutation_prompt": null}
{"id": "e762944f-5a2a-4e62-aa0d-9b23879303b4", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 10 * dim\n        self.population_size = self.initial_population_size\n        self.mutation_f = 0.5\n        self.crossover_prob = 0.7\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim)\n        )\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        \n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                if self.used_budget >= self.budget:\n                    break\n\n                # Mutation and recombination\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_f * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial[cross_points] = mutant[cross_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.used_budget += 1\n                if trial_fitness < self.fitness[i]:\n                    self.fitness[i] = trial_fitness\n                    self.population[i] = trial\n\n            # Adaptive mechanisms\n            if self.used_budget > self.budget * 0.5 and self.population_size > self.dim:\n                self.population_size = int(self.initial_population_size / 2)\n\n            # Adaptation of mutation factor and crossover probability\n            self.mutation_f = 0.5 + 0.3 * np.random.rand()\n            self.crossover_prob = 0.5 + 0.4 * np.random.rand()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.used_budget >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1", "name": "AdaptiveDifferentialEvolution", "description": "An Adaptive Differential Evolution algorithm enhanced with dynamic population size adjustment and a more sophisticated crossover strategy to improve convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "686e5765-66bd-4023-bb8f-797cd3285c74", "metadata": {"aucs": [0.7649530760233154, 0.7672203135695314, 0.7425091083534923, 0.7466124230890963, 0.7704599926457998, 0.7545584238429436, 0.7607524557865303, 0.7452759414992235, 0.7480973398464614, 0.5862065060770814, 0.5825938692348882, 0.5860768603755706, 0.5884050674615322, 0.5674125077060967, 0.5826435901385849, 0.5951042015179475, 0.6032313272244649, 0.5731672465217614, 0.25194592521131665, 0.1676756158856184, 0.26291580523412994, 0.2600503255878519, 0.17959807225069402, 0.2335825331252055, 0.2426249825633744, 0.3098139619975633, 0.2238814093442566, 0.16512111046391276, 0.21525969008541834, 0.19464188362095924, 0.12433287421253714, 0.16938508364746163, 0.18976455925568758, 0.13245017086615973, 0.1914663153843057, 0.1874239908218731, 0.9382511363254415, 0.9427002108554231, 0.9335298663510166, 0.9735453086833011, 0.9716724136429433, 0.9510382502908014, 0.9634134672229929, 0.9509589054801365, 0.9258879750336196, 0.3488179661700227, 0.3938629525946634, 0.4347726549811002, 0.4192564353073116, 0.389892254250635, 0.39604469148062593, 0.42641372566848945, 0.4198347262636978, 0.4153207613767891, 0.4290968639230195, 0.5501128315873807, 0.5279342473536783, 0.5823625292882533, 0.5890925402731175, 0.5613742528251338, 0.5809233736272427, 0.5916647914898385, 0.5784694622656943, 0.21674247876611485, 0.18909305362696527, 0.1798032830302967, 0.15696316364485352, 0.1794543951235008, 0.18877119059253666, 0.3004394879386265, 0.2183158139879512, 0.2014575293460571, 0.16751679858993596, 0.1567386612593329, 0.21409862242562416, 0.24158310574334418, 0.2001879571817049, 0.2491357919562368, 0.23606130039657836, 0.2138807332293885, 0.19371853333011013, 0.10317564745716923, 0.08467517496480015, 0.09389911343643675, 0.09573396864087969, 0.07486365299407793, 0.0442967807760688, 0.12878722553210498, 0.0964958657847026, 0.07909484892663587, 0.23590099351112526, 0.20216297112133585, 0.20882497179331172, 0.21456010145039728, 0.20432566242871153, 0.12994546971771215, 0.2511321390500115, 0.2046752316748388, 0.2556081827349247, 0.04524643133393491, 0.03069074890312329, 0.06178105905539266, 0.0699604123885581, 0.04415075947763236, 0.03450183732339096, 0.05304536553524963, 0.08212001961877358, 0.02319607651683253, 0.1588741206119405, 0.16554565624524453, 0.1504714197556989, 0.18339339349809358, 0.15915080336276188, 0.17621457723474965, 0.15410642103848982, 0.14627687511898313, 0.1591600706554931, 0.5436354200512152, 0.5341545209678712, 0.5241850698803925, 0.5599272364565837, 0.5259057857779712, 0.5062025183429466, 0.5395204763904666, 0.5365040376452355, 0.5278764559093689, 0.08535298729770857, 0.09148956013510867, 0.10171053662853569, 0.11574511432253998, 0.10563633885824852, 0.11188308205140507, 0.115776251817583, 0.10097361304176866, 0.09042796994295366, 0.14880949890428163, 0.1325934670430281, 0.19583144394655738, 0.12493560537378257, 0.18502724360352996, 0.12882282471558337, 0.13515223906191365, 0.12827721213156107, 0.14236695678275868, 0.3122690889056031, 0.34125131901950245, 0.3189119476463479, 0.31728298209870665, 0.3414408983994017, 0.33979007787767723, 0.3514442661665945, 0.39367957216627925, 0.369656070988143, 0.23198347831140986, 0.22829913043231886, 0.22921597609444966, 0.251120787788886, 0.24167393698168704, 0.20746485258928837, 0.2437880398264347, 0.25592442959305695, 0.26947644647958024, 0.19400567801085455, 0.19406769423076453, 0.19319049200276806, 0.18174325807884217, 0.18412799391645007, 0.19045283601534158, 0.20894670161571838, 0.19400842451017297, 0.1879639634757112, 0.20264811447264242, 0.19211000342460982, 0.19149845884701777, 0.25017257320491837, 0.22831263511238342, 0.22036662728925271, 0.28072120067988604, 0.28244680866028127, 0.20812711488349644, 0.6408741955124668, 0.19353118249237478, 0.16675563759331347, 0.4976859760084008, 0.4892049175611233, 0.5434692771636185, 0.29479481011032405, 0.358640379822735, 0.35862456986207325, 0.192162745419158, 0.487149173780581, 0.5463893453837013, 0.43940400451011496, 0.2755967916157974, 0.18925599111268154, 0.19963567301018081, 0.5414709206077926, 0.19957285232578448, 0.18952249184701553, 0.17765474681583415, 0.17378881812013147, 0.17786551162129505, 0.17920587662617038, 0.2001632955887278, 0.18076833067032516, 0.1801919496025436, 0.1761995299275586, 0.07741636929535567, 0.0830005357116641, 0.07952662108109276, 0.07459185689412862, 0.07674689102508525, 0.06884074856563571, 0.07857791403614434, 0.08405295860230999, 0.0731095590764087]}, "mutation_prompt": null}
{"id": "5e6ab165-3450-4aa8-9cdd-d0a47252f2e0", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 10 * dim\n        self.population_size = self.initial_population_size\n        self.mutation_f = 0.5\n        self.crossover_prob = 0.7\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim)\n        )\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        \n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                if self.used_budget >= self.budget:\n                    break\n\n                # Mutation and recombination\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_f * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial[cross_points] = mutant[cross_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.used_budget += 1\n                if trial_fitness < self.fitness[i]:\n                    self.fitness[i] = trial_fitness\n                    self.population[i] = trial\n\n            # Adaptive mechanisms\n            if self.used_budget > self.budget * 0.5 and self.population_size > self.dim:\n                self.population_size = int(self.initial_population_size / 2)\n\n            # Adaptation of mutation factor and crossover probability\n            self.mutation_f = 0.5 + 0.3 * np.random.rand()\n            self.crossover_prob = 0.5 + 0.4 * np.random.rand()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.used_budget >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1", "name": "AdaptiveDifferentialEvolution", "description": "An Adaptive Differential Evolution algorithm enhanced with dynamic population size adjustment and a more sophisticated crossover strategy to improve convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "686e5765-66bd-4023-bb8f-797cd3285c74", "metadata": {"aucs": [0.7649530760233154, 0.7672203135695314, 0.7425091083534923, 0.7466124230890963, 0.7704599926457998, 0.7545584238429436, 0.7607524557865303, 0.7452759414992235, 0.7480973398464614, 0.5862065060770814, 0.5825938692348882, 0.5860768603755706, 0.5884050674615322, 0.5674125077060967, 0.5826435901385849, 0.5951042015179475, 0.6032313272244649, 0.5731672465217614, 0.25194592521131665, 0.1676756158856184, 0.26291580523412994, 0.2600503255878519, 0.17959807225069402, 0.2335825331252055, 0.2426249825633744, 0.3098139619975633, 0.2238814093442566, 0.16512111046391276, 0.21525969008541834, 0.19464188362095924, 0.12433287421253714, 0.16938508364746163, 0.18976455925568758, 0.13245017086615973, 0.1914663153843057, 0.1874239908218731, 0.9382511363254415, 0.9427002108554231, 0.9335298663510166, 0.9735453086833011, 0.9716724136429433, 0.9510382502908014, 0.9634134672229929, 0.9509589054801365, 0.9258879750336196, 0.3488179661700227, 0.3938629525946634, 0.4347726549811002, 0.4192564353073116, 0.389892254250635, 0.39604469148062593, 0.42641372566848945, 0.4198347262636978, 0.4153207613767891, 0.4290968639230195, 0.5501128315873807, 0.5279342473536783, 0.5823625292882533, 0.5890925402731175, 0.5613742528251338, 0.5809233736272427, 0.5916647914898385, 0.5784694622656943, 0.21674247876611485, 0.18909305362696527, 0.1798032830302967, 0.15696316364485352, 0.1794543951235008, 0.18877119059253666, 0.3004394879386265, 0.2183158139879512, 0.2014575293460571, 0.16751679858993596, 0.1567386612593329, 0.21409862242562416, 0.24158310574334418, 0.2001879571817049, 0.2491357919562368, 0.23606130039657836, 0.2138807332293885, 0.19371853333011013, 0.10317564745716923, 0.08467517496480015, 0.09389911343643675, 0.09573396864087969, 0.07486365299407793, 0.0442967807760688, 0.12878722553210498, 0.0964958657847026, 0.07909484892663587, 0.23590099351112526, 0.20216297112133585, 0.20882497179331172, 0.21456010145039728, 0.20432566242871153, 0.12994546971771215, 0.2511321390500115, 0.2046752316748388, 0.2556081827349247, 0.04524643133393491, 0.03069074890312329, 0.06178105905539266, 0.0699604123885581, 0.04415075947763236, 0.03450183732339096, 0.05304536553524963, 0.08212001961877358, 0.02319607651683253, 0.1588741206119405, 0.16554565624524453, 0.1504714197556989, 0.18339339349809358, 0.15915080336276188, 0.17621457723474965, 0.15410642103848982, 0.14627687511898313, 0.1591600706554931, 0.5436354200512152, 0.5341545209678712, 0.5241850698803925, 0.5599272364565837, 0.5259057857779712, 0.5062025183429466, 0.5395204763904666, 0.5365040376452355, 0.5278764559093689, 0.08535298729770857, 0.09148956013510867, 0.10171053662853569, 0.11574511432253998, 0.10563633885824852, 0.11188308205140507, 0.115776251817583, 0.10097361304176866, 0.09042796994295366, 0.14880949890428163, 0.1325934670430281, 0.19583144394655738, 0.12493560537378257, 0.18502724360352996, 0.12882282471558337, 0.13515223906191365, 0.12827721213156107, 0.14236695678275868, 0.3122690889056031, 0.34125131901950245, 0.3189119476463479, 0.31728298209870665, 0.3414408983994017, 0.33979007787767723, 0.3514442661665945, 0.39367957216627925, 0.369656070988143, 0.23198347831140986, 0.22829913043231886, 0.22921597609444966, 0.251120787788886, 0.24167393698168704, 0.20746485258928837, 0.2437880398264347, 0.25592442959305695, 0.26947644647958024, 0.19400567801085455, 0.19406769423076453, 0.19319049200276806, 0.18174325807884217, 0.18412799391645007, 0.19045283601534158, 0.20894670161571838, 0.19400842451017297, 0.1879639634757112, 0.20264811447264242, 0.19211000342460982, 0.19149845884701777, 0.25017257320491837, 0.22831263511238342, 0.22036662728925271, 0.28072120067988604, 0.28244680866028127, 0.20812711488349644, 0.6408741955124668, 0.19353118249237478, 0.16675563759331347, 0.4976859760084008, 0.4892049175611233, 0.5434692771636185, 0.29479481011032405, 0.358640379822735, 0.35862456986207325, 0.192162745419158, 0.487149173780581, 0.5463893453837013, 0.43940400451011496, 0.2755967916157974, 0.18925599111268154, 0.19963567301018081, 0.5414709206077926, 0.19957285232578448, 0.18952249184701553, 0.17765474681583415, 0.17378881812013147, 0.17786551162129505, 0.17920587662617038, 0.2001632955887278, 0.18076833067032516, 0.1801919496025436, 0.1761995299275586, 0.07741636929535567, 0.0830005357116641, 0.07952662108109276, 0.07459185689412862, 0.07674689102508525, 0.06884074856563571, 0.07857791403614434, 0.08405295860230999, 0.0731095590764087]}, "mutation_prompt": null}
{"id": "c93e7588-b4c8-4a8c-8f0c-2ddc1928a711", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 10 * dim\n        self.population_size = self.initial_population_size\n        self.mutation_f = 0.5\n        self.crossover_prob = 0.7\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim)\n        )\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        \n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                if self.used_budget >= self.budget:\n                    break\n\n                # Mutation and recombination\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_f * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial[cross_points] = mutant[cross_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.used_budget += 1\n                if trial_fitness < self.fitness[i]:\n                    self.fitness[i] = trial_fitness\n                    self.population[i] = trial\n\n            # Adaptive mechanisms\n            if self.used_budget > self.budget * 0.5 and self.population_size > self.dim:\n                self.population_size = int(self.initial_population_size / 2)\n\n            # Adaptation of mutation factor and crossover probability\n            self.mutation_f = 0.5 + 0.3 * np.random.rand()\n            self.crossover_prob = 0.5 + 0.4 * np.random.rand()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.used_budget >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1", "name": "AdaptiveDifferentialEvolution", "description": "An Adaptive Differential Evolution algorithm enhanced with dynamic population size adjustment and a more sophisticated crossover strategy to improve convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "686e5765-66bd-4023-bb8f-797cd3285c74", "metadata": {"aucs": [0.7649530760233154, 0.7672203135695314, 0.7425091083534923, 0.7466124230890963, 0.7704599926457998, 0.7545584238429436, 0.7607524557865303, 0.7452759414992235, 0.7480973398464614, 0.5862065060770814, 0.5825938692348882, 0.5860768603755706, 0.5884050674615322, 0.5674125077060967, 0.5826435901385849, 0.5951042015179475, 0.6032313272244649, 0.5731672465217614, 0.25194592521131665, 0.1676756158856184, 0.26291580523412994, 0.2600503255878519, 0.17959807225069402, 0.2335825331252055, 0.2426249825633744, 0.3098139619975633, 0.2238814093442566, 0.16512111046391276, 0.21525969008541834, 0.19464188362095924, 0.12433287421253714, 0.16938508364746163, 0.18976455925568758, 0.13245017086615973, 0.1914663153843057, 0.1874239908218731, 0.9382511363254415, 0.9427002108554231, 0.9335298663510166, 0.9735453086833011, 0.9716724136429433, 0.9510382502908014, 0.9634134672229929, 0.9509589054801365, 0.9258879750336196, 0.3488179661700227, 0.3938629525946634, 0.4347726549811002, 0.4192564353073116, 0.389892254250635, 0.39604469148062593, 0.42641372566848945, 0.4198347262636978, 0.4153207613767891, 0.4290968639230195, 0.5501128315873807, 0.5279342473536783, 0.5823625292882533, 0.5890925402731175, 0.5613742528251338, 0.5809233736272427, 0.5916647914898385, 0.5784694622656943, 0.21674247876611485, 0.18909305362696527, 0.1798032830302967, 0.15696316364485352, 0.1794543951235008, 0.18877119059253666, 0.3004394879386265, 0.2183158139879512, 0.2014575293460571, 0.16751679858993596, 0.1567386612593329, 0.21409862242562416, 0.24158310574334418, 0.2001879571817049, 0.2491357919562368, 0.23606130039657836, 0.2138807332293885, 0.19371853333011013, 0.10317564745716923, 0.08467517496480015, 0.09389911343643675, 0.09573396864087969, 0.07486365299407793, 0.0442967807760688, 0.12878722553210498, 0.0964958657847026, 0.07909484892663587, 0.23590099351112526, 0.20216297112133585, 0.20882497179331172, 0.21456010145039728, 0.20432566242871153, 0.12994546971771215, 0.2511321390500115, 0.2046752316748388, 0.2556081827349247, 0.04524643133393491, 0.03069074890312329, 0.06178105905539266, 0.0699604123885581, 0.04415075947763236, 0.03450183732339096, 0.05304536553524963, 0.08212001961877358, 0.02319607651683253, 0.1588741206119405, 0.16554565624524453, 0.1504714197556989, 0.18339339349809358, 0.15915080336276188, 0.17621457723474965, 0.15410642103848982, 0.14627687511898313, 0.1591600706554931, 0.5436354200512152, 0.5341545209678712, 0.5241850698803925, 0.5599272364565837, 0.5259057857779712, 0.5062025183429466, 0.5395204763904666, 0.5365040376452355, 0.5278764559093689, 0.08535298729770857, 0.09148956013510867, 0.10171053662853569, 0.11574511432253998, 0.10563633885824852, 0.11188308205140507, 0.115776251817583, 0.10097361304176866, 0.09042796994295366, 0.14880949890428163, 0.1325934670430281, 0.19583144394655738, 0.12493560537378257, 0.18502724360352996, 0.12882282471558337, 0.13515223906191365, 0.12827721213156107, 0.14236695678275868, 0.3122690889056031, 0.34125131901950245, 0.3189119476463479, 0.31728298209870665, 0.3414408983994017, 0.33979007787767723, 0.3514442661665945, 0.39367957216627925, 0.369656070988143, 0.23198347831140986, 0.22829913043231886, 0.22921597609444966, 0.251120787788886, 0.24167393698168704, 0.20746485258928837, 0.2437880398264347, 0.25592442959305695, 0.26947644647958024, 0.19400567801085455, 0.19406769423076453, 0.19319049200276806, 0.18174325807884217, 0.18412799391645007, 0.19045283601534158, 0.20894670161571838, 0.19400842451017297, 0.1879639634757112, 0.20264811447264242, 0.19211000342460982, 0.19149845884701777, 0.25017257320491837, 0.22831263511238342, 0.22036662728925271, 0.28072120067988604, 0.28244680866028127, 0.20812711488349644, 0.6408741955124668, 0.19353118249237478, 0.16675563759331347, 0.4976859760084008, 0.4892049175611233, 0.5434692771636185, 0.29479481011032405, 0.358640379822735, 0.35862456986207325, 0.192162745419158, 0.487149173780581, 0.5463893453837013, 0.43940400451011496, 0.2755967916157974, 0.18925599111268154, 0.19963567301018081, 0.5414709206077926, 0.19957285232578448, 0.18952249184701553, 0.17765474681583415, 0.17378881812013147, 0.17786551162129505, 0.17920587662617038, 0.2001632955887278, 0.18076833067032516, 0.1801919496025436, 0.1761995299275586, 0.07741636929535567, 0.0830005357116641, 0.07952662108109276, 0.07459185689412862, 0.07674689102508525, 0.06884074856563571, 0.07857791403614434, 0.08405295860230999, 0.0731095590764087]}, "mutation_prompt": null}
{"id": "9388f7f3-9f00-4387-b1fb-2737170b256c", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 10 * dim\n        self.population_size = self.initial_population_size\n        self.mutation_f = 0.5\n        self.crossover_prob = 0.7\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim)\n        )\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        \n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                if self.used_budget >= self.budget:\n                    break\n\n                # Mutation and recombination\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_f * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial[cross_points] = mutant[cross_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.used_budget += 1\n                if trial_fitness < self.fitness[i]:\n                    self.fitness[i] = trial_fitness\n                    self.population[i] = trial\n\n            # Adaptive mechanisms\n            if self.used_budget > self.budget * 0.5 and self.population_size > self.dim:\n                self.population_size = int(self.initial_population_size / 2)\n\n            # Adaptation of mutation factor and crossover probability\n            self.mutation_f = 0.5 + 0.3 * np.random.rand()\n            self.crossover_prob = 0.5 + 0.4 * np.random.rand()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.used_budget >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1", "name": "AdaptiveDifferentialEvolution", "description": "An Adaptive Differential Evolution algorithm enhanced with dynamic population size adjustment and a more sophisticated crossover strategy to improve convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "686e5765-66bd-4023-bb8f-797cd3285c74", "metadata": {"aucs": [0.7649530760233154, 0.7672203135695314, 0.7425091083534923, 0.7466124230890963, 0.7704599926457998, 0.7545584238429436, 0.7607524557865303, 0.7452759414992235, 0.7480973398464614, 0.5862065060770814, 0.5825938692348882, 0.5860768603755706, 0.5884050674615322, 0.5674125077060967, 0.5826435901385849, 0.5951042015179475, 0.6032313272244649, 0.5731672465217614, 0.25194592521131665, 0.1676756158856184, 0.26291580523412994, 0.2600503255878519, 0.17959807225069402, 0.2335825331252055, 0.2426249825633744, 0.3098139619975633, 0.2238814093442566, 0.16512111046391276, 0.21525969008541834, 0.19464188362095924, 0.12433287421253714, 0.16938508364746163, 0.18976455925568758, 0.13245017086615973, 0.1914663153843057, 0.1874239908218731, 0.9382511363254415, 0.9427002108554231, 0.9335298663510166, 0.9735453086833011, 0.9716724136429433, 0.9510382502908014, 0.9634134672229929, 0.9509589054801365, 0.9258879750336196, 0.3488179661700227, 0.3938629525946634, 0.4347726549811002, 0.4192564353073116, 0.389892254250635, 0.39604469148062593, 0.42641372566848945, 0.4198347262636978, 0.4153207613767891, 0.4290968639230195, 0.5501128315873807, 0.5279342473536783, 0.5823625292882533, 0.5890925402731175, 0.5613742528251338, 0.5809233736272427, 0.5916647914898385, 0.5784694622656943, 0.21674247876611485, 0.18909305362696527, 0.1798032830302967, 0.15696316364485352, 0.1794543951235008, 0.18877119059253666, 0.3004394879386265, 0.2183158139879512, 0.2014575293460571, 0.16751679858993596, 0.1567386612593329, 0.21409862242562416, 0.24158310574334418, 0.2001879571817049, 0.2491357919562368, 0.23606130039657836, 0.2138807332293885, 0.19371853333011013, 0.10317564745716923, 0.08467517496480015, 0.09389911343643675, 0.09573396864087969, 0.07486365299407793, 0.0442967807760688, 0.12878722553210498, 0.0964958657847026, 0.07909484892663587, 0.23590099351112526, 0.20216297112133585, 0.20882497179331172, 0.21456010145039728, 0.20432566242871153, 0.12994546971771215, 0.2511321390500115, 0.2046752316748388, 0.2556081827349247, 0.04524643133393491, 0.03069074890312329, 0.06178105905539266, 0.0699604123885581, 0.04415075947763236, 0.03450183732339096, 0.05304536553524963, 0.08212001961877358, 0.02319607651683253, 0.1588741206119405, 0.16554565624524453, 0.1504714197556989, 0.18339339349809358, 0.15915080336276188, 0.17621457723474965, 0.15410642103848982, 0.14627687511898313, 0.1591600706554931, 0.5436354200512152, 0.5341545209678712, 0.5241850698803925, 0.5599272364565837, 0.5259057857779712, 0.5062025183429466, 0.5395204763904666, 0.5365040376452355, 0.5278764559093689, 0.08535298729770857, 0.09148956013510867, 0.10171053662853569, 0.11574511432253998, 0.10563633885824852, 0.11188308205140507, 0.115776251817583, 0.10097361304176866, 0.09042796994295366, 0.14880949890428163, 0.1325934670430281, 0.19583144394655738, 0.12493560537378257, 0.18502724360352996, 0.12882282471558337, 0.13515223906191365, 0.12827721213156107, 0.14236695678275868, 0.3122690889056031, 0.34125131901950245, 0.3189119476463479, 0.31728298209870665, 0.3414408983994017, 0.33979007787767723, 0.3514442661665945, 0.39367957216627925, 0.369656070988143, 0.23198347831140986, 0.22829913043231886, 0.22921597609444966, 0.251120787788886, 0.24167393698168704, 0.20746485258928837, 0.2437880398264347, 0.25592442959305695, 0.26947644647958024, 0.19400567801085455, 0.19406769423076453, 0.19319049200276806, 0.18174325807884217, 0.18412799391645007, 0.19045283601534158, 0.20894670161571838, 0.19400842451017297, 0.1879639634757112, 0.20264811447264242, 0.19211000342460982, 0.19149845884701777, 0.25017257320491837, 0.22831263511238342, 0.22036662728925271, 0.28072120067988604, 0.28244680866028127, 0.20812711488349644, 0.6408741955124668, 0.19353118249237478, 0.16675563759331347, 0.4976859760084008, 0.4892049175611233, 0.5434692771636185, 0.29479481011032405, 0.358640379822735, 0.35862456986207325, 0.192162745419158, 0.487149173780581, 0.5463893453837013, 0.43940400451011496, 0.2755967916157974, 0.18925599111268154, 0.19963567301018081, 0.5414709206077926, 0.19957285232578448, 0.18952249184701553, 0.17765474681583415, 0.17378881812013147, 0.17786551162129505, 0.17920587662617038, 0.2001632955887278, 0.18076833067032516, 0.1801919496025436, 0.1761995299275586, 0.07741636929535567, 0.0830005357116641, 0.07952662108109276, 0.07459185689412862, 0.07674689102508525, 0.06884074856563571, 0.07857791403614434, 0.08405295860230999, 0.0731095590764087]}, "mutation_prompt": null}
{"id": "5438fe88-361e-4b14-b525-1a4e22ab2689", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 10 * dim\n        self.population_size = self.initial_population_size\n        self.mutation_f = 0.5\n        self.crossover_prob = 0.7\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim)\n        )\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        \n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                if self.used_budget >= self.budget:\n                    break\n\n                # Mutation and recombination\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_f * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial[cross_points] = mutant[cross_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.used_budget += 1\n                if trial_fitness < self.fitness[i]:\n                    self.fitness[i] = trial_fitness\n                    self.population[i] = trial\n\n            # Adaptive mechanisms\n            if self.used_budget > self.budget * 0.5 and self.population_size > self.dim:\n                self.population_size = int(self.initial_population_size / 2)\n\n            # Adaptation of mutation factor and crossover probability\n            self.mutation_f = 0.5 + 0.3 * np.random.rand()\n            self.crossover_prob = 0.5 + 0.4 * np.random.rand()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.used_budget >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1", "name": "AdaptiveDifferentialEvolution", "description": "An Adaptive Differential Evolution algorithm enhanced with dynamic population size adjustment and a more sophisticated crossover strategy to improve convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "686e5765-66bd-4023-bb8f-797cd3285c74", "metadata": {"aucs": [0.7649530760233154, 0.7672203135695314, 0.7425091083534923, 0.7466124230890963, 0.7704599926457998, 0.7545584238429436, 0.7607524557865303, 0.7452759414992235, 0.7480973398464614, 0.5862065060770814, 0.5825938692348882, 0.5860768603755706, 0.5884050674615322, 0.5674125077060967, 0.5826435901385849, 0.5951042015179475, 0.6032313272244649, 0.5731672465217614, 0.25194592521131665, 0.1676756158856184, 0.26291580523412994, 0.2600503255878519, 0.17959807225069402, 0.2335825331252055, 0.2426249825633744, 0.3098139619975633, 0.2238814093442566, 0.16512111046391276, 0.21525969008541834, 0.19464188362095924, 0.12433287421253714, 0.16938508364746163, 0.18976455925568758, 0.13245017086615973, 0.1914663153843057, 0.1874239908218731, 0.9382511363254415, 0.9427002108554231, 0.9335298663510166, 0.9735453086833011, 0.9716724136429433, 0.9510382502908014, 0.9634134672229929, 0.9509589054801365, 0.9258879750336196, 0.3488179661700227, 0.3938629525946634, 0.4347726549811002, 0.4192564353073116, 0.389892254250635, 0.39604469148062593, 0.42641372566848945, 0.4198347262636978, 0.4153207613767891, 0.4290968639230195, 0.5501128315873807, 0.5279342473536783, 0.5823625292882533, 0.5890925402731175, 0.5613742528251338, 0.5809233736272427, 0.5916647914898385, 0.5784694622656943, 0.21674247876611485, 0.18909305362696527, 0.1798032830302967, 0.15696316364485352, 0.1794543951235008, 0.18877119059253666, 0.3004394879386265, 0.2183158139879512, 0.2014575293460571, 0.16751679858993596, 0.1567386612593329, 0.21409862242562416, 0.24158310574334418, 0.2001879571817049, 0.2491357919562368, 0.23606130039657836, 0.2138807332293885, 0.19371853333011013, 0.10317564745716923, 0.08467517496480015, 0.09389911343643675, 0.09573396864087969, 0.07486365299407793, 0.0442967807760688, 0.12878722553210498, 0.0964958657847026, 0.07909484892663587, 0.23590099351112526, 0.20216297112133585, 0.20882497179331172, 0.21456010145039728, 0.20432566242871153, 0.12994546971771215, 0.2511321390500115, 0.2046752316748388, 0.2556081827349247, 0.04524643133393491, 0.03069074890312329, 0.06178105905539266, 0.0699604123885581, 0.04415075947763236, 0.03450183732339096, 0.05304536553524963, 0.08212001961877358, 0.02319607651683253, 0.1588741206119405, 0.16554565624524453, 0.1504714197556989, 0.18339339349809358, 0.15915080336276188, 0.17621457723474965, 0.15410642103848982, 0.14627687511898313, 0.1591600706554931, 0.5436354200512152, 0.5341545209678712, 0.5241850698803925, 0.5599272364565837, 0.5259057857779712, 0.5062025183429466, 0.5395204763904666, 0.5365040376452355, 0.5278764559093689, 0.08535298729770857, 0.09148956013510867, 0.10171053662853569, 0.11574511432253998, 0.10563633885824852, 0.11188308205140507, 0.115776251817583, 0.10097361304176866, 0.09042796994295366, 0.14880949890428163, 0.1325934670430281, 0.19583144394655738, 0.12493560537378257, 0.18502724360352996, 0.12882282471558337, 0.13515223906191365, 0.12827721213156107, 0.14236695678275868, 0.3122690889056031, 0.34125131901950245, 0.3189119476463479, 0.31728298209870665, 0.3414408983994017, 0.33979007787767723, 0.3514442661665945, 0.39367957216627925, 0.369656070988143, 0.23198347831140986, 0.22829913043231886, 0.22921597609444966, 0.251120787788886, 0.24167393698168704, 0.20746485258928837, 0.2437880398264347, 0.25592442959305695, 0.26947644647958024, 0.19400567801085455, 0.19406769423076453, 0.19319049200276806, 0.18174325807884217, 0.18412799391645007, 0.19045283601534158, 0.20894670161571838, 0.19400842451017297, 0.1879639634757112, 0.20264811447264242, 0.19211000342460982, 0.19149845884701777, 0.25017257320491837, 0.22831263511238342, 0.22036662728925271, 0.28072120067988604, 0.28244680866028127, 0.20812711488349644, 0.6408741955124668, 0.19353118249237478, 0.16675563759331347, 0.4976859760084008, 0.4892049175611233, 0.5434692771636185, 0.29479481011032405, 0.358640379822735, 0.35862456986207325, 0.192162745419158, 0.487149173780581, 0.5463893453837013, 0.43940400451011496, 0.2755967916157974, 0.18925599111268154, 0.19963567301018081, 0.5414709206077926, 0.19957285232578448, 0.18952249184701553, 0.17765474681583415, 0.17378881812013147, 0.17786551162129505, 0.17920587662617038, 0.2001632955887278, 0.18076833067032516, 0.1801919496025436, 0.1761995299275586, 0.07741636929535567, 0.0830005357116641, 0.07952662108109276, 0.07459185689412862, 0.07674689102508525, 0.06884074856563571, 0.07857791403614434, 0.08405295860230999, 0.0731095590764087]}, "mutation_prompt": null}
{"id": "63b83a80-adbf-42f4-bccf-7e6f31fb4aaf", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 10 * dim\n        self.population_size = self.initial_population_size\n        self.mutation_f = 0.5\n        self.crossover_prob = 0.7\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim)\n        )\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        \n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                if self.used_budget >= self.budget:\n                    break\n\n                # Mutation and recombination\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_f * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial[cross_points] = mutant[cross_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.used_budget += 1\n                if trial_fitness < self.fitness[i]:\n                    self.fitness[i] = trial_fitness\n                    self.population[i] = trial\n\n            # Adaptive mechanisms\n            if self.used_budget > self.budget * 0.5 and self.population_size > self.dim:\n                self.population_size = int(self.initial_population_size / 2)\n\n            # Adaptation of mutation factor and crossover probability\n            self.mutation_f = 0.5 + 0.3 * np.random.rand()\n            self.crossover_prob = 0.5 + 0.4 * np.random.rand()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.used_budget >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1", "name": "AdaptiveDifferentialEvolution", "description": "An Adaptive Differential Evolution algorithm enhanced with dynamic population size adjustment and a more sophisticated crossover strategy to improve convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "686e5765-66bd-4023-bb8f-797cd3285c74", "metadata": {"aucs": [0.7649530760233154, 0.7672203135695314, 0.7425091083534923, 0.7466124230890963, 0.7704599926457998, 0.7545584238429436, 0.7607524557865303, 0.7452759414992235, 0.7480973398464614, 0.5862065060770814, 0.5825938692348882, 0.5860768603755706, 0.5884050674615322, 0.5674125077060967, 0.5826435901385849, 0.5951042015179475, 0.6032313272244649, 0.5731672465217614, 0.25194592521131665, 0.1676756158856184, 0.26291580523412994, 0.2600503255878519, 0.17959807225069402, 0.2335825331252055, 0.2426249825633744, 0.3098139619975633, 0.2238814093442566, 0.16512111046391276, 0.21525969008541834, 0.19464188362095924, 0.12433287421253714, 0.16938508364746163, 0.18976455925568758, 0.13245017086615973, 0.1914663153843057, 0.1874239908218731, 0.9382511363254415, 0.9427002108554231, 0.9335298663510166, 0.9735453086833011, 0.9716724136429433, 0.9510382502908014, 0.9634134672229929, 0.9509589054801365, 0.9258879750336196, 0.3488179661700227, 0.3938629525946634, 0.4347726549811002, 0.4192564353073116, 0.389892254250635, 0.39604469148062593, 0.42641372566848945, 0.4198347262636978, 0.4153207613767891, 0.4290968639230195, 0.5501128315873807, 0.5279342473536783, 0.5823625292882533, 0.5890925402731175, 0.5613742528251338, 0.5809233736272427, 0.5916647914898385, 0.5784694622656943, 0.21674247876611485, 0.18909305362696527, 0.1798032830302967, 0.15696316364485352, 0.1794543951235008, 0.18877119059253666, 0.3004394879386265, 0.2183158139879512, 0.2014575293460571, 0.16751679858993596, 0.1567386612593329, 0.21409862242562416, 0.24158310574334418, 0.2001879571817049, 0.2491357919562368, 0.23606130039657836, 0.2138807332293885, 0.19371853333011013, 0.10317564745716923, 0.08467517496480015, 0.09389911343643675, 0.09573396864087969, 0.07486365299407793, 0.0442967807760688, 0.12878722553210498, 0.0964958657847026, 0.07909484892663587, 0.23590099351112526, 0.20216297112133585, 0.20882497179331172, 0.21456010145039728, 0.20432566242871153, 0.12994546971771215, 0.2511321390500115, 0.2046752316748388, 0.2556081827349247, 0.04524643133393491, 0.03069074890312329, 0.06178105905539266, 0.0699604123885581, 0.04415075947763236, 0.03450183732339096, 0.05304536553524963, 0.08212001961877358, 0.02319607651683253, 0.1588741206119405, 0.16554565624524453, 0.1504714197556989, 0.18339339349809358, 0.15915080336276188, 0.17621457723474965, 0.15410642103848982, 0.14627687511898313, 0.1591600706554931, 0.5436354200512152, 0.5341545209678712, 0.5241850698803925, 0.5599272364565837, 0.5259057857779712, 0.5062025183429466, 0.5395204763904666, 0.5365040376452355, 0.5278764559093689, 0.08535298729770857, 0.09148956013510867, 0.10171053662853569, 0.11574511432253998, 0.10563633885824852, 0.11188308205140507, 0.115776251817583, 0.10097361304176866, 0.09042796994295366, 0.14880949890428163, 0.1325934670430281, 0.19583144394655738, 0.12493560537378257, 0.18502724360352996, 0.12882282471558337, 0.13515223906191365, 0.12827721213156107, 0.14236695678275868, 0.3122690889056031, 0.34125131901950245, 0.3189119476463479, 0.31728298209870665, 0.3414408983994017, 0.33979007787767723, 0.3514442661665945, 0.39367957216627925, 0.369656070988143, 0.23198347831140986, 0.22829913043231886, 0.22921597609444966, 0.251120787788886, 0.24167393698168704, 0.20746485258928837, 0.2437880398264347, 0.25592442959305695, 0.26947644647958024, 0.19400567801085455, 0.19406769423076453, 0.19319049200276806, 0.18174325807884217, 0.18412799391645007, 0.19045283601534158, 0.20894670161571838, 0.19400842451017297, 0.1879639634757112, 0.20264811447264242, 0.19211000342460982, 0.19149845884701777, 0.25017257320491837, 0.22831263511238342, 0.22036662728925271, 0.28072120067988604, 0.28244680866028127, 0.20812711488349644, 0.6408741955124668, 0.19353118249237478, 0.16675563759331347, 0.4976859760084008, 0.4892049175611233, 0.5434692771636185, 0.29479481011032405, 0.358640379822735, 0.35862456986207325, 0.192162745419158, 0.487149173780581, 0.5463893453837013, 0.43940400451011496, 0.2755967916157974, 0.18925599111268154, 0.19963567301018081, 0.5414709206077926, 0.19957285232578448, 0.18952249184701553, 0.17765474681583415, 0.17378881812013147, 0.17786551162129505, 0.17920587662617038, 0.2001632955887278, 0.18076833067032516, 0.1801919496025436, 0.1761995299275586, 0.07741636929535567, 0.0830005357116641, 0.07952662108109276, 0.07459185689412862, 0.07674689102508525, 0.06884074856563571, 0.07857791403614434, 0.08405295860230999, 0.0731095590764087]}, "mutation_prompt": null}
{"id": "466f658c-d6ce-42eb-9f77-7f1a266ce272", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 10 * dim\n        self.population_size = self.initial_population_size\n        self.mutation_f = 0.5\n        self.crossover_prob = 0.7\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim)\n        )\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        \n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                if self.used_budget >= self.budget:\n                    break\n\n                # Mutation and recombination\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_f * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial[cross_points] = mutant[cross_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.used_budget += 1\n                if trial_fitness < self.fitness[i]:\n                    self.fitness[i] = trial_fitness\n                    self.population[i] = trial\n\n            # Adaptive mechanisms\n            if self.used_budget > self.budget * 0.5 and self.population_size > self.dim:\n                self.population_size = int(self.initial_population_size / 2)\n\n            # Adaptation of mutation factor and crossover probability\n            self.mutation_f = 0.5 + 0.3 * np.random.rand()\n            self.crossover_prob = 0.5 + 0.4 * np.random.rand()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.used_budget >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1", "name": "AdaptiveDifferentialEvolution", "description": "An Adaptive Differential Evolution algorithm enhanced with dynamic population size adjustment and a more sophisticated crossover strategy to improve convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "686e5765-66bd-4023-bb8f-797cd3285c74", "metadata": {"aucs": [0.7649530760233154, 0.7672203135695314, 0.7425091083534923, 0.7466124230890963, 0.7704599926457998, 0.7545584238429436, 0.7607524557865303, 0.7452759414992235, 0.7480973398464614, 0.5862065060770814, 0.5825938692348882, 0.5860768603755706, 0.5884050674615322, 0.5674125077060967, 0.5826435901385849, 0.5951042015179475, 0.6032313272244649, 0.5731672465217614, 0.25194592521131665, 0.1676756158856184, 0.26291580523412994, 0.2600503255878519, 0.17959807225069402, 0.2335825331252055, 0.2426249825633744, 0.3098139619975633, 0.2238814093442566, 0.16512111046391276, 0.21525969008541834, 0.19464188362095924, 0.12433287421253714, 0.16938508364746163, 0.18976455925568758, 0.13245017086615973, 0.1914663153843057, 0.1874239908218731, 0.9382511363254415, 0.9427002108554231, 0.9335298663510166, 0.9735453086833011, 0.9716724136429433, 0.9510382502908014, 0.9634134672229929, 0.9509589054801365, 0.9258879750336196, 0.3488179661700227, 0.3938629525946634, 0.4347726549811002, 0.4192564353073116, 0.389892254250635, 0.39604469148062593, 0.42641372566848945, 0.4198347262636978, 0.4153207613767891, 0.4290968639230195, 0.5501128315873807, 0.5279342473536783, 0.5823625292882533, 0.5890925402731175, 0.5613742528251338, 0.5809233736272427, 0.5916647914898385, 0.5784694622656943, 0.21674247876611485, 0.18909305362696527, 0.1798032830302967, 0.15696316364485352, 0.1794543951235008, 0.18877119059253666, 0.3004394879386265, 0.2183158139879512, 0.2014575293460571, 0.16751679858993596, 0.1567386612593329, 0.21409862242562416, 0.24158310574334418, 0.2001879571817049, 0.2491357919562368, 0.23606130039657836, 0.2138807332293885, 0.19371853333011013, 0.10317564745716923, 0.08467517496480015, 0.09389911343643675, 0.09573396864087969, 0.07486365299407793, 0.0442967807760688, 0.12878722553210498, 0.0964958657847026, 0.07909484892663587, 0.23590099351112526, 0.20216297112133585, 0.20882497179331172, 0.21456010145039728, 0.20432566242871153, 0.12994546971771215, 0.2511321390500115, 0.2046752316748388, 0.2556081827349247, 0.04524643133393491, 0.03069074890312329, 0.06178105905539266, 0.0699604123885581, 0.04415075947763236, 0.03450183732339096, 0.05304536553524963, 0.08212001961877358, 0.02319607651683253, 0.1588741206119405, 0.16554565624524453, 0.1504714197556989, 0.18339339349809358, 0.15915080336276188, 0.17621457723474965, 0.15410642103848982, 0.14627687511898313, 0.1591600706554931, 0.5436354200512152, 0.5341545209678712, 0.5241850698803925, 0.5599272364565837, 0.5259057857779712, 0.5062025183429466, 0.5395204763904666, 0.5365040376452355, 0.5278764559093689, 0.08535298729770857, 0.09148956013510867, 0.10171053662853569, 0.11574511432253998, 0.10563633885824852, 0.11188308205140507, 0.115776251817583, 0.10097361304176866, 0.09042796994295366, 0.14880949890428163, 0.1325934670430281, 0.19583144394655738, 0.12493560537378257, 0.18502724360352996, 0.12882282471558337, 0.13515223906191365, 0.12827721213156107, 0.14236695678275868, 0.3122690889056031, 0.34125131901950245, 0.3189119476463479, 0.31728298209870665, 0.3414408983994017, 0.33979007787767723, 0.3514442661665945, 0.39367957216627925, 0.369656070988143, 0.23198347831140986, 0.22829913043231886, 0.22921597609444966, 0.251120787788886, 0.24167393698168704, 0.20746485258928837, 0.2437880398264347, 0.25592442959305695, 0.26947644647958024, 0.19400567801085455, 0.19406769423076453, 0.19319049200276806, 0.18174325807884217, 0.18412799391645007, 0.19045283601534158, 0.20894670161571838, 0.19400842451017297, 0.1879639634757112, 0.20264811447264242, 0.19211000342460982, 0.19149845884701777, 0.25017257320491837, 0.22831263511238342, 0.22036662728925271, 0.28072120067988604, 0.28244680866028127, 0.20812711488349644, 0.6408741955124668, 0.19353118249237478, 0.16675563759331347, 0.4976859760084008, 0.4892049175611233, 0.5434692771636185, 0.29479481011032405, 0.358640379822735, 0.35862456986207325, 0.192162745419158, 0.487149173780581, 0.5463893453837013, 0.43940400451011496, 0.2755967916157974, 0.18925599111268154, 0.19963567301018081, 0.5414709206077926, 0.19957285232578448, 0.18952249184701553, 0.17765474681583415, 0.17378881812013147, 0.17786551162129505, 0.17920587662617038, 0.2001632955887278, 0.18076833067032516, 0.1801919496025436, 0.1761995299275586, 0.07741636929535567, 0.0830005357116641, 0.07952662108109276, 0.07459185689412862, 0.07674689102508525, 0.06884074856563571, 0.07857791403614434, 0.08405295860230999, 0.0731095590764087]}, "mutation_prompt": null}
{"id": "0e850367-f1a2-481f-8083-7ac9cef57f9c", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 10 * dim\n        self.population_size = self.initial_population_size\n        self.mutation_f = 0.5\n        self.crossover_prob = 0.7\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim)\n        )\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        \n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                if self.used_budget >= self.budget:\n                    break\n\n                # Mutation and recombination\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_f * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial[cross_points] = mutant[cross_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.used_budget += 1\n                if trial_fitness < self.fitness[i]:\n                    self.fitness[i] = trial_fitness\n                    self.population[i] = trial\n\n            # Adaptive mechanisms\n            if self.used_budget > self.budget * 0.5 and self.population_size > self.dim:\n                self.population_size = int(self.initial_population_size / 2)\n\n            # Adaptation of mutation factor and crossover probability\n            self.mutation_f = 0.5 + 0.3 * np.random.rand()\n            self.crossover_prob = 0.5 + 0.4 * np.random.rand()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.used_budget >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1", "name": "AdaptiveDifferentialEvolution", "description": "An Adaptive Differential Evolution algorithm enhanced with dynamic population size adjustment and a more sophisticated crossover strategy to improve convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "686e5765-66bd-4023-bb8f-797cd3285c74", "metadata": {"aucs": [0.7649530760233154, 0.7672203135695314, 0.7425091083534923, 0.7466124230890963, 0.7704599926457998, 0.7545584238429436, 0.7607524557865303, 0.7452759414992235, 0.7480973398464614, 0.5862065060770814, 0.5825938692348882, 0.5860768603755706, 0.5884050674615322, 0.5674125077060967, 0.5826435901385849, 0.5951042015179475, 0.6032313272244649, 0.5731672465217614, 0.25194592521131665, 0.1676756158856184, 0.26291580523412994, 0.2600503255878519, 0.17959807225069402, 0.2335825331252055, 0.2426249825633744, 0.3098139619975633, 0.2238814093442566, 0.16512111046391276, 0.21525969008541834, 0.19464188362095924, 0.12433287421253714, 0.16938508364746163, 0.18976455925568758, 0.13245017086615973, 0.1914663153843057, 0.1874239908218731, 0.9382511363254415, 0.9427002108554231, 0.9335298663510166, 0.9735453086833011, 0.9716724136429433, 0.9510382502908014, 0.9634134672229929, 0.9509589054801365, 0.9258879750336196, 0.3488179661700227, 0.3938629525946634, 0.4347726549811002, 0.4192564353073116, 0.389892254250635, 0.39604469148062593, 0.42641372566848945, 0.4198347262636978, 0.4153207613767891, 0.4290968639230195, 0.5501128315873807, 0.5279342473536783, 0.5823625292882533, 0.5890925402731175, 0.5613742528251338, 0.5809233736272427, 0.5916647914898385, 0.5784694622656943, 0.21674247876611485, 0.18909305362696527, 0.1798032830302967, 0.15696316364485352, 0.1794543951235008, 0.18877119059253666, 0.3004394879386265, 0.2183158139879512, 0.2014575293460571, 0.16751679858993596, 0.1567386612593329, 0.21409862242562416, 0.24158310574334418, 0.2001879571817049, 0.2491357919562368, 0.23606130039657836, 0.2138807332293885, 0.19371853333011013, 0.10317564745716923, 0.08467517496480015, 0.09389911343643675, 0.09573396864087969, 0.07486365299407793, 0.0442967807760688, 0.12878722553210498, 0.0964958657847026, 0.07909484892663587, 0.23590099351112526, 0.20216297112133585, 0.20882497179331172, 0.21456010145039728, 0.20432566242871153, 0.12994546971771215, 0.2511321390500115, 0.2046752316748388, 0.2556081827349247, 0.04524643133393491, 0.03069074890312329, 0.06178105905539266, 0.0699604123885581, 0.04415075947763236, 0.03450183732339096, 0.05304536553524963, 0.08212001961877358, 0.02319607651683253, 0.1588741206119405, 0.16554565624524453, 0.1504714197556989, 0.18339339349809358, 0.15915080336276188, 0.17621457723474965, 0.15410642103848982, 0.14627687511898313, 0.1591600706554931, 0.5436354200512152, 0.5341545209678712, 0.5241850698803925, 0.5599272364565837, 0.5259057857779712, 0.5062025183429466, 0.5395204763904666, 0.5365040376452355, 0.5278764559093689, 0.08535298729770857, 0.09148956013510867, 0.10171053662853569, 0.11574511432253998, 0.10563633885824852, 0.11188308205140507, 0.115776251817583, 0.10097361304176866, 0.09042796994295366, 0.14880949890428163, 0.1325934670430281, 0.19583144394655738, 0.12493560537378257, 0.18502724360352996, 0.12882282471558337, 0.13515223906191365, 0.12827721213156107, 0.14236695678275868, 0.3122690889056031, 0.34125131901950245, 0.3189119476463479, 0.31728298209870665, 0.3414408983994017, 0.33979007787767723, 0.3514442661665945, 0.39367957216627925, 0.369656070988143, 0.23198347831140986, 0.22829913043231886, 0.22921597609444966, 0.251120787788886, 0.24167393698168704, 0.20746485258928837, 0.2437880398264347, 0.25592442959305695, 0.26947644647958024, 0.19400567801085455, 0.19406769423076453, 0.19319049200276806, 0.18174325807884217, 0.18412799391645007, 0.19045283601534158, 0.20894670161571838, 0.19400842451017297, 0.1879639634757112, 0.20264811447264242, 0.19211000342460982, 0.19149845884701777, 0.25017257320491837, 0.22831263511238342, 0.22036662728925271, 0.28072120067988604, 0.28244680866028127, 0.20812711488349644, 0.6408741955124668, 0.19353118249237478, 0.16675563759331347, 0.4976859760084008, 0.4892049175611233, 0.5434692771636185, 0.29479481011032405, 0.358640379822735, 0.35862456986207325, 0.192162745419158, 0.487149173780581, 0.5463893453837013, 0.43940400451011496, 0.2755967916157974, 0.18925599111268154, 0.19963567301018081, 0.5414709206077926, 0.19957285232578448, 0.18952249184701553, 0.17765474681583415, 0.17378881812013147, 0.17786551162129505, 0.17920587662617038, 0.2001632955887278, 0.18076833067032516, 0.1801919496025436, 0.1761995299275586, 0.07741636929535567, 0.0830005357116641, 0.07952662108109276, 0.07459185689412862, 0.07674689102508525, 0.06884074856563571, 0.07857791403614434, 0.08405295860230999, 0.0731095590764087]}, "mutation_prompt": null}
{"id": "00fc7995-b41d-403f-bbe8-662cd4f8902e", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 10 * dim\n        self.population_size = self.initial_population_size\n        self.mutation_f = 0.5\n        self.crossover_prob = 0.7\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim)\n        )\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        \n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                if self.used_budget >= self.budget:\n                    break\n\n                # Mutation and recombination\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_f * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial[cross_points] = mutant[cross_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.used_budget += 1\n                if trial_fitness < self.fitness[i]:\n                    self.fitness[i] = trial_fitness\n                    self.population[i] = trial\n\n            # Adaptive mechanisms\n            if self.used_budget > self.budget * 0.5 and self.population_size > self.dim:\n                self.population_size = int(self.initial_population_size / 2)\n\n            # Adaptation of mutation factor and crossover probability\n            self.mutation_f = 0.5 + 0.3 * np.random.rand()\n            self.crossover_prob = 0.5 + 0.4 * np.random.rand()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.used_budget >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1", "name": "AdaptiveDifferentialEvolution", "description": "An Adaptive Differential Evolution algorithm enhanced with dynamic population size adjustment and a more sophisticated crossover strategy to improve convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "686e5765-66bd-4023-bb8f-797cd3285c74", "metadata": {"aucs": [0.7649530760233154, 0.7672203135695314, 0.7425091083534923, 0.7466124230890963, 0.7704599926457998, 0.7545584238429436, 0.7607524557865303, 0.7452759414992235, 0.7480973398464614, 0.5862065060770814, 0.5825938692348882, 0.5860768603755706, 0.5884050674615322, 0.5674125077060967, 0.5826435901385849, 0.5951042015179475, 0.6032313272244649, 0.5731672465217614, 0.25194592521131665, 0.1676756158856184, 0.26291580523412994, 0.2600503255878519, 0.17959807225069402, 0.2335825331252055, 0.2426249825633744, 0.3098139619975633, 0.2238814093442566, 0.16512111046391276, 0.21525969008541834, 0.19464188362095924, 0.12433287421253714, 0.16938508364746163, 0.18976455925568758, 0.13245017086615973, 0.1914663153843057, 0.1874239908218731, 0.9382511363254415, 0.9427002108554231, 0.9335298663510166, 0.9735453086833011, 0.9716724136429433, 0.9510382502908014, 0.9634134672229929, 0.9509589054801365, 0.9258879750336196, 0.3488179661700227, 0.3938629525946634, 0.4347726549811002, 0.4192564353073116, 0.389892254250635, 0.39604469148062593, 0.42641372566848945, 0.4198347262636978, 0.4153207613767891, 0.4290968639230195, 0.5501128315873807, 0.5279342473536783, 0.5823625292882533, 0.5890925402731175, 0.5613742528251338, 0.5809233736272427, 0.5916647914898385, 0.5784694622656943, 0.21674247876611485, 0.18909305362696527, 0.1798032830302967, 0.15696316364485352, 0.1794543951235008, 0.18877119059253666, 0.3004394879386265, 0.2183158139879512, 0.2014575293460571, 0.16751679858993596, 0.1567386612593329, 0.21409862242562416, 0.24158310574334418, 0.2001879571817049, 0.2491357919562368, 0.23606130039657836, 0.2138807332293885, 0.19371853333011013, 0.10317564745716923, 0.08467517496480015, 0.09389911343643675, 0.09573396864087969, 0.07486365299407793, 0.0442967807760688, 0.12878722553210498, 0.0964958657847026, 0.07909484892663587, 0.23590099351112526, 0.20216297112133585, 0.20882497179331172, 0.21456010145039728, 0.20432566242871153, 0.12994546971771215, 0.2511321390500115, 0.2046752316748388, 0.2556081827349247, 0.04524643133393491, 0.03069074890312329, 0.06178105905539266, 0.0699604123885581, 0.04415075947763236, 0.03450183732339096, 0.05304536553524963, 0.08212001961877358, 0.02319607651683253, 0.1588741206119405, 0.16554565624524453, 0.1504714197556989, 0.18339339349809358, 0.15915080336276188, 0.17621457723474965, 0.15410642103848982, 0.14627687511898313, 0.1591600706554931, 0.5436354200512152, 0.5341545209678712, 0.5241850698803925, 0.5599272364565837, 0.5259057857779712, 0.5062025183429466, 0.5395204763904666, 0.5365040376452355, 0.5278764559093689, 0.08535298729770857, 0.09148956013510867, 0.10171053662853569, 0.11574511432253998, 0.10563633885824852, 0.11188308205140507, 0.115776251817583, 0.10097361304176866, 0.09042796994295366, 0.14880949890428163, 0.1325934670430281, 0.19583144394655738, 0.12493560537378257, 0.18502724360352996, 0.12882282471558337, 0.13515223906191365, 0.12827721213156107, 0.14236695678275868, 0.3122690889056031, 0.34125131901950245, 0.3189119476463479, 0.31728298209870665, 0.3414408983994017, 0.33979007787767723, 0.3514442661665945, 0.39367957216627925, 0.369656070988143, 0.23198347831140986, 0.22829913043231886, 0.22921597609444966, 0.251120787788886, 0.24167393698168704, 0.20746485258928837, 0.2437880398264347, 0.25592442959305695, 0.26947644647958024, 0.19400567801085455, 0.19406769423076453, 0.19319049200276806, 0.18174325807884217, 0.18412799391645007, 0.19045283601534158, 0.20894670161571838, 0.19400842451017297, 0.1879639634757112, 0.20264811447264242, 0.19211000342460982, 0.19149845884701777, 0.25017257320491837, 0.22831263511238342, 0.22036662728925271, 0.28072120067988604, 0.28244680866028127, 0.20812711488349644, 0.6408741955124668, 0.19353118249237478, 0.16675563759331347, 0.4976859760084008, 0.4892049175611233, 0.5434692771636185, 0.29479481011032405, 0.358640379822735, 0.35862456986207325, 0.192162745419158, 0.487149173780581, 0.5463893453837013, 0.43940400451011496, 0.2755967916157974, 0.18925599111268154, 0.19963567301018081, 0.5414709206077926, 0.19957285232578448, 0.18952249184701553, 0.17765474681583415, 0.17378881812013147, 0.17786551162129505, 0.17920587662617038, 0.2001632955887278, 0.18076833067032516, 0.1801919496025436, 0.1761995299275586, 0.07741636929535567, 0.0830005357116641, 0.07952662108109276, 0.07459185689412862, 0.07674689102508525, 0.06884074856563571, 0.07857791403614434, 0.08405295860230999, 0.0731095590764087]}, "mutation_prompt": null}
{"id": "44de7f54-c477-4279-8067-27e95df18dc9", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 10 * dim\n        self.population_size = self.initial_population_size\n        self.mutation_f = 0.5\n        self.crossover_prob = 0.7\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim)\n        )\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        \n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                if self.used_budget >= self.budget:\n                    break\n\n                # Mutation and recombination\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_f * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial[cross_points] = mutant[cross_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.used_budget += 1\n                if trial_fitness < self.fitness[i]:\n                    self.fitness[i] = trial_fitness\n                    self.population[i] = trial\n\n            # Adaptive mechanisms\n            if self.used_budget > self.budget * 0.5 and self.population_size > self.dim:\n                self.population_size = int(self.initial_population_size / 2)\n\n            # Adaptation of mutation factor and crossover probability\n            self.mutation_f = 0.5 + 0.3 * np.random.rand()\n            self.crossover_prob = 0.5 + 0.4 * np.random.rand()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.used_budget >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1", "name": "AdaptiveDifferentialEvolution", "description": "An Adaptive Differential Evolution algorithm enhanced with dynamic population size adjustment and a more sophisticated crossover strategy to improve convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "686e5765-66bd-4023-bb8f-797cd3285c74", "metadata": {"aucs": [0.7649530760233154, 0.7672203135695314, 0.7425091083534923, 0.7466124230890963, 0.7704599926457998, 0.7545584238429436, 0.7607524557865303, 0.7452759414992235, 0.7480973398464614, 0.5862065060770814, 0.5825938692348882, 0.5860768603755706, 0.5884050674615322, 0.5674125077060967, 0.5826435901385849, 0.5951042015179475, 0.6032313272244649, 0.5731672465217614, 0.25194592521131665, 0.1676756158856184, 0.26291580523412994, 0.2600503255878519, 0.17959807225069402, 0.2335825331252055, 0.2426249825633744, 0.3098139619975633, 0.2238814093442566, 0.16512111046391276, 0.21525969008541834, 0.19464188362095924, 0.12433287421253714, 0.16938508364746163, 0.18976455925568758, 0.13245017086615973, 0.1914663153843057, 0.1874239908218731, 0.9382511363254415, 0.9427002108554231, 0.9335298663510166, 0.9735453086833011, 0.9716724136429433, 0.9510382502908014, 0.9634134672229929, 0.9509589054801365, 0.9258879750336196, 0.3488179661700227, 0.3938629525946634, 0.4347726549811002, 0.4192564353073116, 0.389892254250635, 0.39604469148062593, 0.42641372566848945, 0.4198347262636978, 0.4153207613767891, 0.4290968639230195, 0.5501128315873807, 0.5279342473536783, 0.5823625292882533, 0.5890925402731175, 0.5613742528251338, 0.5809233736272427, 0.5916647914898385, 0.5784694622656943, 0.21674247876611485, 0.18909305362696527, 0.1798032830302967, 0.15696316364485352, 0.1794543951235008, 0.18877119059253666, 0.3004394879386265, 0.2183158139879512, 0.2014575293460571, 0.16751679858993596, 0.1567386612593329, 0.21409862242562416, 0.24158310574334418, 0.2001879571817049, 0.2491357919562368, 0.23606130039657836, 0.2138807332293885, 0.19371853333011013, 0.10317564745716923, 0.08467517496480015, 0.09389911343643675, 0.09573396864087969, 0.07486365299407793, 0.0442967807760688, 0.12878722553210498, 0.0964958657847026, 0.07909484892663587, 0.23590099351112526, 0.20216297112133585, 0.20882497179331172, 0.21456010145039728, 0.20432566242871153, 0.12994546971771215, 0.2511321390500115, 0.2046752316748388, 0.2556081827349247, 0.04524643133393491, 0.03069074890312329, 0.06178105905539266, 0.0699604123885581, 0.04415075947763236, 0.03450183732339096, 0.05304536553524963, 0.08212001961877358, 0.02319607651683253, 0.1588741206119405, 0.16554565624524453, 0.1504714197556989, 0.18339339349809358, 0.15915080336276188, 0.17621457723474965, 0.15410642103848982, 0.14627687511898313, 0.1591600706554931, 0.5436354200512152, 0.5341545209678712, 0.5241850698803925, 0.5599272364565837, 0.5259057857779712, 0.5062025183429466, 0.5395204763904666, 0.5365040376452355, 0.5278764559093689, 0.08535298729770857, 0.09148956013510867, 0.10171053662853569, 0.11574511432253998, 0.10563633885824852, 0.11188308205140507, 0.115776251817583, 0.10097361304176866, 0.09042796994295366, 0.14880949890428163, 0.1325934670430281, 0.19583144394655738, 0.12493560537378257, 0.18502724360352996, 0.12882282471558337, 0.13515223906191365, 0.12827721213156107, 0.14236695678275868, 0.3122690889056031, 0.34125131901950245, 0.3189119476463479, 0.31728298209870665, 0.3414408983994017, 0.33979007787767723, 0.3514442661665945, 0.39367957216627925, 0.369656070988143, 0.23198347831140986, 0.22829913043231886, 0.22921597609444966, 0.251120787788886, 0.24167393698168704, 0.20746485258928837, 0.2437880398264347, 0.25592442959305695, 0.26947644647958024, 0.19400567801085455, 0.19406769423076453, 0.19319049200276806, 0.18174325807884217, 0.18412799391645007, 0.19045283601534158, 0.20894670161571838, 0.19400842451017297, 0.1879639634757112, 0.20264811447264242, 0.19211000342460982, 0.19149845884701777, 0.25017257320491837, 0.22831263511238342, 0.22036662728925271, 0.28072120067988604, 0.28244680866028127, 0.20812711488349644, 0.6408741955124668, 0.19353118249237478, 0.16675563759331347, 0.4976859760084008, 0.4892049175611233, 0.5434692771636185, 0.29479481011032405, 0.358640379822735, 0.35862456986207325, 0.192162745419158, 0.487149173780581, 0.5463893453837013, 0.43940400451011496, 0.2755967916157974, 0.18925599111268154, 0.19963567301018081, 0.5414709206077926, 0.19957285232578448, 0.18952249184701553, 0.17765474681583415, 0.17378881812013147, 0.17786551162129505, 0.17920587662617038, 0.2001632955887278, 0.18076833067032516, 0.1801919496025436, 0.1761995299275586, 0.07741636929535567, 0.0830005357116641, 0.07952662108109276, 0.07459185689412862, 0.07674689102508525, 0.06884074856563571, 0.07857791403614434, 0.08405295860230999, 0.0731095590764087]}, "mutation_prompt": null}
{"id": "2296b761-bebe-406e-9349-0fb31f307fae", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 10 * dim\n        self.population_size = self.initial_population_size\n        self.mutation_f = 0.5\n        self.crossover_prob = 0.7\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim)\n        )\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        \n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                if self.used_budget >= self.budget:\n                    break\n\n                # Mutation and recombination\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_f * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial[cross_points] = mutant[cross_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.used_budget += 1\n                if trial_fitness < self.fitness[i]:\n                    self.fitness[i] = trial_fitness\n                    self.population[i] = trial\n\n            # Adaptive mechanisms\n            if self.used_budget > self.budget * 0.5 and self.population_size > self.dim:\n                self.population_size = int(self.initial_population_size / 2)\n\n            # Adaptation of mutation factor and crossover probability\n            self.mutation_f = 0.5 + 0.3 * np.random.rand()\n            self.crossover_prob = 0.5 + 0.4 * np.random.rand()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.used_budget >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1", "name": "AdaptiveDifferentialEvolution", "description": "An Adaptive Differential Evolution algorithm enhanced with dynamic population size adjustment and a more sophisticated crossover strategy to improve convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "686e5765-66bd-4023-bb8f-797cd3285c74", "metadata": {"aucs": [0.7649530760233154, 0.7672203135695314, 0.7425091083534923, 0.7466124230890963, 0.7704599926457998, 0.7545584238429436, 0.7607524557865303, 0.7452759414992235, 0.7480973398464614, 0.5862065060770814, 0.5825938692348882, 0.5860768603755706, 0.5884050674615322, 0.5674125077060967, 0.5826435901385849, 0.5951042015179475, 0.6032313272244649, 0.5731672465217614, 0.25194592521131665, 0.1676756158856184, 0.26291580523412994, 0.2600503255878519, 0.17959807225069402, 0.2335825331252055, 0.2426249825633744, 0.3098139619975633, 0.2238814093442566, 0.16512111046391276, 0.21525969008541834, 0.19464188362095924, 0.12433287421253714, 0.16938508364746163, 0.18976455925568758, 0.13245017086615973, 0.1914663153843057, 0.1874239908218731, 0.9382511363254415, 0.9427002108554231, 0.9335298663510166, 0.9735453086833011, 0.9716724136429433, 0.9510382502908014, 0.9634134672229929, 0.9509589054801365, 0.9258879750336196, 0.3488179661700227, 0.3938629525946634, 0.4347726549811002, 0.4192564353073116, 0.389892254250635, 0.39604469148062593, 0.42641372566848945, 0.4198347262636978, 0.4153207613767891, 0.4290968639230195, 0.5501128315873807, 0.5279342473536783, 0.5823625292882533, 0.5890925402731175, 0.5613742528251338, 0.5809233736272427, 0.5916647914898385, 0.5784694622656943, 0.21674247876611485, 0.18909305362696527, 0.1798032830302967, 0.15696316364485352, 0.1794543951235008, 0.18877119059253666, 0.3004394879386265, 0.2183158139879512, 0.2014575293460571, 0.16751679858993596, 0.1567386612593329, 0.21409862242562416, 0.24158310574334418, 0.2001879571817049, 0.2491357919562368, 0.23606130039657836, 0.2138807332293885, 0.19371853333011013, 0.10317564745716923, 0.08467517496480015, 0.09389911343643675, 0.09573396864087969, 0.07486365299407793, 0.0442967807760688, 0.12878722553210498, 0.0964958657847026, 0.07909484892663587, 0.23590099351112526, 0.20216297112133585, 0.20882497179331172, 0.21456010145039728, 0.20432566242871153, 0.12994546971771215, 0.2511321390500115, 0.2046752316748388, 0.2556081827349247, 0.04524643133393491, 0.03069074890312329, 0.06178105905539266, 0.0699604123885581, 0.04415075947763236, 0.03450183732339096, 0.05304536553524963, 0.08212001961877358, 0.02319607651683253, 0.1588741206119405, 0.16554565624524453, 0.1504714197556989, 0.18339339349809358, 0.15915080336276188, 0.17621457723474965, 0.15410642103848982, 0.14627687511898313, 0.1591600706554931, 0.5436354200512152, 0.5341545209678712, 0.5241850698803925, 0.5599272364565837, 0.5259057857779712, 0.5062025183429466, 0.5395204763904666, 0.5365040376452355, 0.5278764559093689, 0.08535298729770857, 0.09148956013510867, 0.10171053662853569, 0.11574511432253998, 0.10563633885824852, 0.11188308205140507, 0.115776251817583, 0.10097361304176866, 0.09042796994295366, 0.14880949890428163, 0.1325934670430281, 0.19583144394655738, 0.12493560537378257, 0.18502724360352996, 0.12882282471558337, 0.13515223906191365, 0.12827721213156107, 0.14236695678275868, 0.3122690889056031, 0.34125131901950245, 0.3189119476463479, 0.31728298209870665, 0.3414408983994017, 0.33979007787767723, 0.3514442661665945, 0.39367957216627925, 0.369656070988143, 0.23198347831140986, 0.22829913043231886, 0.22921597609444966, 0.251120787788886, 0.24167393698168704, 0.20746485258928837, 0.2437880398264347, 0.25592442959305695, 0.26947644647958024, 0.19400567801085455, 0.19406769423076453, 0.19319049200276806, 0.18174325807884217, 0.18412799391645007, 0.19045283601534158, 0.20894670161571838, 0.19400842451017297, 0.1879639634757112, 0.20264811447264242, 0.19211000342460982, 0.19149845884701777, 0.25017257320491837, 0.22831263511238342, 0.22036662728925271, 0.28072120067988604, 0.28244680866028127, 0.20812711488349644, 0.6408741955124668, 0.19353118249237478, 0.16675563759331347, 0.4976859760084008, 0.4892049175611233, 0.5434692771636185, 0.29479481011032405, 0.358640379822735, 0.35862456986207325, 0.192162745419158, 0.487149173780581, 0.5463893453837013, 0.43940400451011496, 0.2755967916157974, 0.18925599111268154, 0.19963567301018081, 0.5414709206077926, 0.19957285232578448, 0.18952249184701553, 0.17765474681583415, 0.17378881812013147, 0.17786551162129505, 0.17920587662617038, 0.2001632955887278, 0.18076833067032516, 0.1801919496025436, 0.1761995299275586, 0.07741636929535567, 0.0830005357116641, 0.07952662108109276, 0.07459185689412862, 0.07674689102508525, 0.06884074856563571, 0.07857791403614434, 0.08405295860230999, 0.0731095590764087]}, "mutation_prompt": null}
{"id": "c9a7fc8d-80fb-4421-b34e-52c4543ecbe5", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 10 * dim\n        self.population_size = self.initial_population_size\n        self.mutation_f = 0.5\n        self.crossover_prob = 0.7\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim)\n        )\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        \n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                if self.used_budget >= self.budget:\n                    break\n\n                # Mutation and recombination\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_f * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial[cross_points] = mutant[cross_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.used_budget += 1\n                if trial_fitness < self.fitness[i]:\n                    self.fitness[i] = trial_fitness\n                    self.population[i] = trial\n\n            # Adaptive mechanisms\n            if self.used_budget > self.budget * 0.5 and self.population_size > self.dim:\n                self.population_size = int(self.initial_population_size / 2)\n\n            # Adaptation of mutation factor and crossover probability\n            self.mutation_f = 0.5 + 0.3 * np.random.rand()\n            self.crossover_prob = 0.5 + 0.4 * np.random.rand()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.used_budget >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1", "name": "AdaptiveDifferentialEvolution", "description": "An Adaptive Differential Evolution algorithm enhanced with dynamic population size adjustment and a more sophisticated crossover strategy to improve convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "686e5765-66bd-4023-bb8f-797cd3285c74", "metadata": {"aucs": [0.7649530760233154, 0.7672203135695314, 0.7425091083534923, 0.7466124230890963, 0.7704599926457998, 0.7545584238429436, 0.7607524557865303, 0.7452759414992235, 0.7480973398464614, 0.5862065060770814, 0.5825938692348882, 0.5860768603755706, 0.5884050674615322, 0.5674125077060967, 0.5826435901385849, 0.5951042015179475, 0.6032313272244649, 0.5731672465217614, 0.25194592521131665, 0.1676756158856184, 0.26291580523412994, 0.2600503255878519, 0.17959807225069402, 0.2335825331252055, 0.2426249825633744, 0.3098139619975633, 0.2238814093442566, 0.16512111046391276, 0.21525969008541834, 0.19464188362095924, 0.12433287421253714, 0.16938508364746163, 0.18976455925568758, 0.13245017086615973, 0.1914663153843057, 0.1874239908218731, 0.9382511363254415, 0.9427002108554231, 0.9335298663510166, 0.9735453086833011, 0.9716724136429433, 0.9510382502908014, 0.9634134672229929, 0.9509589054801365, 0.9258879750336196, 0.3488179661700227, 0.3938629525946634, 0.4347726549811002, 0.4192564353073116, 0.389892254250635, 0.39604469148062593, 0.42641372566848945, 0.4198347262636978, 0.4153207613767891, 0.4290968639230195, 0.5501128315873807, 0.5279342473536783, 0.5823625292882533, 0.5890925402731175, 0.5613742528251338, 0.5809233736272427, 0.5916647914898385, 0.5784694622656943, 0.21674247876611485, 0.18909305362696527, 0.1798032830302967, 0.15696316364485352, 0.1794543951235008, 0.18877119059253666, 0.3004394879386265, 0.2183158139879512, 0.2014575293460571, 0.16751679858993596, 0.1567386612593329, 0.21409862242562416, 0.24158310574334418, 0.2001879571817049, 0.2491357919562368, 0.23606130039657836, 0.2138807332293885, 0.19371853333011013, 0.10317564745716923, 0.08467517496480015, 0.09389911343643675, 0.09573396864087969, 0.07486365299407793, 0.0442967807760688, 0.12878722553210498, 0.0964958657847026, 0.07909484892663587, 0.23590099351112526, 0.20216297112133585, 0.20882497179331172, 0.21456010145039728, 0.20432566242871153, 0.12994546971771215, 0.2511321390500115, 0.2046752316748388, 0.2556081827349247, 0.04524643133393491, 0.03069074890312329, 0.06178105905539266, 0.0699604123885581, 0.04415075947763236, 0.03450183732339096, 0.05304536553524963, 0.08212001961877358, 0.02319607651683253, 0.1588741206119405, 0.16554565624524453, 0.1504714197556989, 0.18339339349809358, 0.15915080336276188, 0.17621457723474965, 0.15410642103848982, 0.14627687511898313, 0.1591600706554931, 0.5436354200512152, 0.5341545209678712, 0.5241850698803925, 0.5599272364565837, 0.5259057857779712, 0.5062025183429466, 0.5395204763904666, 0.5365040376452355, 0.5278764559093689, 0.08535298729770857, 0.09148956013510867, 0.10171053662853569, 0.11574511432253998, 0.10563633885824852, 0.11188308205140507, 0.115776251817583, 0.10097361304176866, 0.09042796994295366, 0.14880949890428163, 0.1325934670430281, 0.19583144394655738, 0.12493560537378257, 0.18502724360352996, 0.12882282471558337, 0.13515223906191365, 0.12827721213156107, 0.14236695678275868, 0.3122690889056031, 0.34125131901950245, 0.3189119476463479, 0.31728298209870665, 0.3414408983994017, 0.33979007787767723, 0.3514442661665945, 0.39367957216627925, 0.369656070988143, 0.23198347831140986, 0.22829913043231886, 0.22921597609444966, 0.251120787788886, 0.24167393698168704, 0.20746485258928837, 0.2437880398264347, 0.25592442959305695, 0.26947644647958024, 0.19400567801085455, 0.19406769423076453, 0.19319049200276806, 0.18174325807884217, 0.18412799391645007, 0.19045283601534158, 0.20894670161571838, 0.19400842451017297, 0.1879639634757112, 0.20264811447264242, 0.19211000342460982, 0.19149845884701777, 0.25017257320491837, 0.22831263511238342, 0.22036662728925271, 0.28072120067988604, 0.28244680866028127, 0.20812711488349644, 0.6408741955124668, 0.19353118249237478, 0.16675563759331347, 0.4976859760084008, 0.4892049175611233, 0.5434692771636185, 0.29479481011032405, 0.358640379822735, 0.35862456986207325, 0.192162745419158, 0.487149173780581, 0.5463893453837013, 0.43940400451011496, 0.2755967916157974, 0.18925599111268154, 0.19963567301018081, 0.5414709206077926, 0.19957285232578448, 0.18952249184701553, 0.17765474681583415, 0.17378881812013147, 0.17786551162129505, 0.17920587662617038, 0.2001632955887278, 0.18076833067032516, 0.1801919496025436, 0.1761995299275586, 0.07741636929535567, 0.0830005357116641, 0.07952662108109276, 0.07459185689412862, 0.07674689102508525, 0.06884074856563571, 0.07857791403614434, 0.08405295860230999, 0.0731095590764087]}, "mutation_prompt": null}
{"id": "35867250-dcda-4839-ae40-ea9a2f513502", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 10 * dim\n        self.population_size = self.initial_population_size\n        self.mutation_f = 0.5\n        self.crossover_prob = 0.7\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim)\n        )\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        \n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                if self.used_budget >= self.budget:\n                    break\n\n                # Mutation and recombination\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_f * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial[cross_points] = mutant[cross_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.used_budget += 1\n                if trial_fitness < self.fitness[i]:\n                    self.fitness[i] = trial_fitness\n                    self.population[i] = trial\n\n            # Adaptive mechanisms\n            if self.used_budget > self.budget * 0.5 and self.population_size > self.dim:\n                self.population_size = int(self.initial_population_size / 2)\n\n            # Adaptation of mutation factor and crossover probability\n            self.mutation_f = 0.5 + 0.3 * np.random.rand()\n            self.crossover_prob = 0.5 + 0.4 * np.random.rand()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.used_budget >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1", "name": "AdaptiveDifferentialEvolution", "description": "An Adaptive Differential Evolution algorithm enhanced with dynamic population size adjustment and a more sophisticated crossover strategy to improve convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "686e5765-66bd-4023-bb8f-797cd3285c74", "metadata": {"aucs": [0.7649530760233154, 0.7672203135695314, 0.7425091083534923, 0.7466124230890963, 0.7704599926457998, 0.7545584238429436, 0.7607524557865303, 0.7452759414992235, 0.7480973398464614, 0.5862065060770814, 0.5825938692348882, 0.5860768603755706, 0.5884050674615322, 0.5674125077060967, 0.5826435901385849, 0.5951042015179475, 0.6032313272244649, 0.5731672465217614, 0.25194592521131665, 0.1676756158856184, 0.26291580523412994, 0.2600503255878519, 0.17959807225069402, 0.2335825331252055, 0.2426249825633744, 0.3098139619975633, 0.2238814093442566, 0.16512111046391276, 0.21525969008541834, 0.19464188362095924, 0.12433287421253714, 0.16938508364746163, 0.18976455925568758, 0.13245017086615973, 0.1914663153843057, 0.1874239908218731, 0.9382511363254415, 0.9427002108554231, 0.9335298663510166, 0.9735453086833011, 0.9716724136429433, 0.9510382502908014, 0.9634134672229929, 0.9509589054801365, 0.9258879750336196, 0.3488179661700227, 0.3938629525946634, 0.4347726549811002, 0.4192564353073116, 0.389892254250635, 0.39604469148062593, 0.42641372566848945, 0.4198347262636978, 0.4153207613767891, 0.4290968639230195, 0.5501128315873807, 0.5279342473536783, 0.5823625292882533, 0.5890925402731175, 0.5613742528251338, 0.5809233736272427, 0.5916647914898385, 0.5784694622656943, 0.21674247876611485, 0.18909305362696527, 0.1798032830302967, 0.15696316364485352, 0.1794543951235008, 0.18877119059253666, 0.3004394879386265, 0.2183158139879512, 0.2014575293460571, 0.16751679858993596, 0.1567386612593329, 0.21409862242562416, 0.24158310574334418, 0.2001879571817049, 0.2491357919562368, 0.23606130039657836, 0.2138807332293885, 0.19371853333011013, 0.10317564745716923, 0.08467517496480015, 0.09389911343643675, 0.09573396864087969, 0.07486365299407793, 0.0442967807760688, 0.12878722553210498, 0.0964958657847026, 0.07909484892663587, 0.23590099351112526, 0.20216297112133585, 0.20882497179331172, 0.21456010145039728, 0.20432566242871153, 0.12994546971771215, 0.2511321390500115, 0.2046752316748388, 0.2556081827349247, 0.04524643133393491, 0.03069074890312329, 0.06178105905539266, 0.0699604123885581, 0.04415075947763236, 0.03450183732339096, 0.05304536553524963, 0.08212001961877358, 0.02319607651683253, 0.1588741206119405, 0.16554565624524453, 0.1504714197556989, 0.18339339349809358, 0.15915080336276188, 0.17621457723474965, 0.15410642103848982, 0.14627687511898313, 0.1591600706554931, 0.5436354200512152, 0.5341545209678712, 0.5241850698803925, 0.5599272364565837, 0.5259057857779712, 0.5062025183429466, 0.5395204763904666, 0.5365040376452355, 0.5278764559093689, 0.08535298729770857, 0.09148956013510867, 0.10171053662853569, 0.11574511432253998, 0.10563633885824852, 0.11188308205140507, 0.115776251817583, 0.10097361304176866, 0.09042796994295366, 0.14880949890428163, 0.1325934670430281, 0.19583144394655738, 0.12493560537378257, 0.18502724360352996, 0.12882282471558337, 0.13515223906191365, 0.12827721213156107, 0.14236695678275868, 0.3122690889056031, 0.34125131901950245, 0.3189119476463479, 0.31728298209870665, 0.3414408983994017, 0.33979007787767723, 0.3514442661665945, 0.39367957216627925, 0.369656070988143, 0.23198347831140986, 0.22829913043231886, 0.22921597609444966, 0.251120787788886, 0.24167393698168704, 0.20746485258928837, 0.2437880398264347, 0.25592442959305695, 0.26947644647958024, 0.19400567801085455, 0.19406769423076453, 0.19319049200276806, 0.18174325807884217, 0.18412799391645007, 0.19045283601534158, 0.20894670161571838, 0.19400842451017297, 0.1879639634757112, 0.20264811447264242, 0.19211000342460982, 0.19149845884701777, 0.25017257320491837, 0.22831263511238342, 0.22036662728925271, 0.28072120067988604, 0.28244680866028127, 0.20812711488349644, 0.6408741955124668, 0.19353118249237478, 0.16675563759331347, 0.4976859760084008, 0.4892049175611233, 0.5434692771636185, 0.29479481011032405, 0.358640379822735, 0.35862456986207325, 0.192162745419158, 0.487149173780581, 0.5463893453837013, 0.43940400451011496, 0.2755967916157974, 0.18925599111268154, 0.19963567301018081, 0.5414709206077926, 0.19957285232578448, 0.18952249184701553, 0.17765474681583415, 0.17378881812013147, 0.17786551162129505, 0.17920587662617038, 0.2001632955887278, 0.18076833067032516, 0.1801919496025436, 0.1761995299275586, 0.07741636929535567, 0.0830005357116641, 0.07952662108109276, 0.07459185689412862, 0.07674689102508525, 0.06884074856563571, 0.07857791403614434, 0.08405295860230999, 0.0731095590764087]}, "mutation_prompt": null}
{"id": "f5282576-dc95-4b25-a27d-599240e40313", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 10 * dim\n        self.population_size = self.initial_population_size\n        self.mutation_f = 0.5\n        self.crossover_prob = 0.7\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim)\n        )\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        \n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                if self.used_budget >= self.budget:\n                    break\n\n                # Mutation and recombination\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_f * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial[cross_points] = mutant[cross_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.used_budget += 1\n                if trial_fitness < self.fitness[i]:\n                    self.fitness[i] = trial_fitness\n                    self.population[i] = trial\n\n            # Adaptive mechanisms\n            if self.used_budget > self.budget * 0.5 and self.population_size > self.dim:\n                self.population_size = int(self.initial_population_size / 2)\n\n            # Adaptation of mutation factor and crossover probability\n            self.mutation_f = 0.5 + 0.3 * np.random.rand()\n            self.crossover_prob = 0.5 + 0.4 * np.random.rand()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.used_budget >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1", "name": "AdaptiveDifferentialEvolution", "description": "An Adaptive Differential Evolution algorithm enhanced with dynamic population size adjustment and a more sophisticated crossover strategy to improve convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "686e5765-66bd-4023-bb8f-797cd3285c74", "metadata": {"aucs": [0.7649530760233154, 0.7672203135695314, 0.7425091083534923, 0.7466124230890963, 0.7704599926457998, 0.7545584238429436, 0.7607524557865303, 0.7452759414992235, 0.7480973398464614, 0.5862065060770814, 0.5825938692348882, 0.5860768603755706, 0.5884050674615322, 0.5674125077060967, 0.5826435901385849, 0.5951042015179475, 0.6032313272244649, 0.5731672465217614, 0.25194592521131665, 0.1676756158856184, 0.26291580523412994, 0.2600503255878519, 0.17959807225069402, 0.2335825331252055, 0.2426249825633744, 0.3098139619975633, 0.2238814093442566, 0.16512111046391276, 0.21525969008541834, 0.19464188362095924, 0.12433287421253714, 0.16938508364746163, 0.18976455925568758, 0.13245017086615973, 0.1914663153843057, 0.1874239908218731, 0.9382511363254415, 0.9427002108554231, 0.9335298663510166, 0.9735453086833011, 0.9716724136429433, 0.9510382502908014, 0.9634134672229929, 0.9509589054801365, 0.9258879750336196, 0.3488179661700227, 0.3938629525946634, 0.4347726549811002, 0.4192564353073116, 0.389892254250635, 0.39604469148062593, 0.42641372566848945, 0.4198347262636978, 0.4153207613767891, 0.4290968639230195, 0.5501128315873807, 0.5279342473536783, 0.5823625292882533, 0.5890925402731175, 0.5613742528251338, 0.5809233736272427, 0.5916647914898385, 0.5784694622656943, 0.21674247876611485, 0.18909305362696527, 0.1798032830302967, 0.15696316364485352, 0.1794543951235008, 0.18877119059253666, 0.3004394879386265, 0.2183158139879512, 0.2014575293460571, 0.16751679858993596, 0.1567386612593329, 0.21409862242562416, 0.24158310574334418, 0.2001879571817049, 0.2491357919562368, 0.23606130039657836, 0.2138807332293885, 0.19371853333011013, 0.10317564745716923, 0.08467517496480015, 0.09389911343643675, 0.09573396864087969, 0.07486365299407793, 0.0442967807760688, 0.12878722553210498, 0.0964958657847026, 0.07909484892663587, 0.23590099351112526, 0.20216297112133585, 0.20882497179331172, 0.21456010145039728, 0.20432566242871153, 0.12994546971771215, 0.2511321390500115, 0.2046752316748388, 0.2556081827349247, 0.04524643133393491, 0.03069074890312329, 0.06178105905539266, 0.0699604123885581, 0.04415075947763236, 0.03450183732339096, 0.05304536553524963, 0.08212001961877358, 0.02319607651683253, 0.1588741206119405, 0.16554565624524453, 0.1504714197556989, 0.18339339349809358, 0.15915080336276188, 0.17621457723474965, 0.15410642103848982, 0.14627687511898313, 0.1591600706554931, 0.5436354200512152, 0.5341545209678712, 0.5241850698803925, 0.5599272364565837, 0.5259057857779712, 0.5062025183429466, 0.5395204763904666, 0.5365040376452355, 0.5278764559093689, 0.08535298729770857, 0.09148956013510867, 0.10171053662853569, 0.11574511432253998, 0.10563633885824852, 0.11188308205140507, 0.115776251817583, 0.10097361304176866, 0.09042796994295366, 0.14880949890428163, 0.1325934670430281, 0.19583144394655738, 0.12493560537378257, 0.18502724360352996, 0.12882282471558337, 0.13515223906191365, 0.12827721213156107, 0.14236695678275868, 0.3122690889056031, 0.34125131901950245, 0.3189119476463479, 0.31728298209870665, 0.3414408983994017, 0.33979007787767723, 0.3514442661665945, 0.39367957216627925, 0.369656070988143, 0.23198347831140986, 0.22829913043231886, 0.22921597609444966, 0.251120787788886, 0.24167393698168704, 0.20746485258928837, 0.2437880398264347, 0.25592442959305695, 0.26947644647958024, 0.19400567801085455, 0.19406769423076453, 0.19319049200276806, 0.18174325807884217, 0.18412799391645007, 0.19045283601534158, 0.20894670161571838, 0.19400842451017297, 0.1879639634757112, 0.20264811447264242, 0.19211000342460982, 0.19149845884701777, 0.25017257320491837, 0.22831263511238342, 0.22036662728925271, 0.28072120067988604, 0.28244680866028127, 0.20812711488349644, 0.6408741955124668, 0.19353118249237478, 0.16675563759331347, 0.4976859760084008, 0.4892049175611233, 0.5434692771636185, 0.29479481011032405, 0.358640379822735, 0.35862456986207325, 0.192162745419158, 0.487149173780581, 0.5463893453837013, 0.43940400451011496, 0.2755967916157974, 0.18925599111268154, 0.19963567301018081, 0.5414709206077926, 0.19957285232578448, 0.18952249184701553, 0.17765474681583415, 0.17378881812013147, 0.17786551162129505, 0.17920587662617038, 0.2001632955887278, 0.18076833067032516, 0.1801919496025436, 0.1761995299275586, 0.07741636929535567, 0.0830005357116641, 0.07952662108109276, 0.07459185689412862, 0.07674689102508525, 0.06884074856563571, 0.07857791403614434, 0.08405295860230999, 0.0731095590764087]}, "mutation_prompt": null}
{"id": "e20e531d-c456-457c-90e1-f32d2a80e726", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 10 * dim\n        self.population_size = self.initial_population_size\n        self.mutation_f = 0.5\n        self.crossover_prob = 0.7\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim)\n        )\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        \n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                if self.used_budget >= self.budget:\n                    break\n\n                # Mutation and recombination\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_f * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial[cross_points] = mutant[cross_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.used_budget += 1\n                if trial_fitness < self.fitness[i]:\n                    self.fitness[i] = trial_fitness\n                    self.population[i] = trial\n\n            # Adaptive mechanisms\n            if self.used_budget > self.budget * 0.5 and self.population_size > self.dim:\n                self.population_size = int(self.initial_population_size / 2)\n\n            # Adaptation of mutation factor and crossover probability\n            self.mutation_f = 0.5 + 0.3 * np.random.rand()\n            self.crossover_prob = 0.5 + 0.4 * np.random.rand()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.used_budget >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1", "name": "AdaptiveDifferentialEvolution", "description": "An Adaptive Differential Evolution algorithm enhanced with dynamic population size adjustment and a more sophisticated crossover strategy to improve convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "686e5765-66bd-4023-bb8f-797cd3285c74", "metadata": {"aucs": [0.7649530760233154, 0.7672203135695314, 0.7425091083534923, 0.7466124230890963, 0.7704599926457998, 0.7545584238429436, 0.7607524557865303, 0.7452759414992235, 0.7480973398464614, 0.5862065060770814, 0.5825938692348882, 0.5860768603755706, 0.5884050674615322, 0.5674125077060967, 0.5826435901385849, 0.5951042015179475, 0.6032313272244649, 0.5731672465217614, 0.25194592521131665, 0.1676756158856184, 0.26291580523412994, 0.2600503255878519, 0.17959807225069402, 0.2335825331252055, 0.2426249825633744, 0.3098139619975633, 0.2238814093442566, 0.16512111046391276, 0.21525969008541834, 0.19464188362095924, 0.12433287421253714, 0.16938508364746163, 0.18976455925568758, 0.13245017086615973, 0.1914663153843057, 0.1874239908218731, 0.9382511363254415, 0.9427002108554231, 0.9335298663510166, 0.9735453086833011, 0.9716724136429433, 0.9510382502908014, 0.9634134672229929, 0.9509589054801365, 0.9258879750336196, 0.3488179661700227, 0.3938629525946634, 0.4347726549811002, 0.4192564353073116, 0.389892254250635, 0.39604469148062593, 0.42641372566848945, 0.4198347262636978, 0.4153207613767891, 0.4290968639230195, 0.5501128315873807, 0.5279342473536783, 0.5823625292882533, 0.5890925402731175, 0.5613742528251338, 0.5809233736272427, 0.5916647914898385, 0.5784694622656943, 0.21674247876611485, 0.18909305362696527, 0.1798032830302967, 0.15696316364485352, 0.1794543951235008, 0.18877119059253666, 0.3004394879386265, 0.2183158139879512, 0.2014575293460571, 0.16751679858993596, 0.1567386612593329, 0.21409862242562416, 0.24158310574334418, 0.2001879571817049, 0.2491357919562368, 0.23606130039657836, 0.2138807332293885, 0.19371853333011013, 0.10317564745716923, 0.08467517496480015, 0.09389911343643675, 0.09573396864087969, 0.07486365299407793, 0.0442967807760688, 0.12878722553210498, 0.0964958657847026, 0.07909484892663587, 0.23590099351112526, 0.20216297112133585, 0.20882497179331172, 0.21456010145039728, 0.20432566242871153, 0.12994546971771215, 0.2511321390500115, 0.2046752316748388, 0.2556081827349247, 0.04524643133393491, 0.03069074890312329, 0.06178105905539266, 0.0699604123885581, 0.04415075947763236, 0.03450183732339096, 0.05304536553524963, 0.08212001961877358, 0.02319607651683253, 0.1588741206119405, 0.16554565624524453, 0.1504714197556989, 0.18339339349809358, 0.15915080336276188, 0.17621457723474965, 0.15410642103848982, 0.14627687511898313, 0.1591600706554931, 0.5436354200512152, 0.5341545209678712, 0.5241850698803925, 0.5599272364565837, 0.5259057857779712, 0.5062025183429466, 0.5395204763904666, 0.5365040376452355, 0.5278764559093689, 0.08535298729770857, 0.09148956013510867, 0.10171053662853569, 0.11574511432253998, 0.10563633885824852, 0.11188308205140507, 0.115776251817583, 0.10097361304176866, 0.09042796994295366, 0.14880949890428163, 0.1325934670430281, 0.19583144394655738, 0.12493560537378257, 0.18502724360352996, 0.12882282471558337, 0.13515223906191365, 0.12827721213156107, 0.14236695678275868, 0.3122690889056031, 0.34125131901950245, 0.3189119476463479, 0.31728298209870665, 0.3414408983994017, 0.33979007787767723, 0.3514442661665945, 0.39367957216627925, 0.369656070988143, 0.23198347831140986, 0.22829913043231886, 0.22921597609444966, 0.251120787788886, 0.24167393698168704, 0.20746485258928837, 0.2437880398264347, 0.25592442959305695, 0.26947644647958024, 0.19400567801085455, 0.19406769423076453, 0.19319049200276806, 0.18174325807884217, 0.18412799391645007, 0.19045283601534158, 0.20894670161571838, 0.19400842451017297, 0.1879639634757112, 0.20264811447264242, 0.19211000342460982, 0.19149845884701777, 0.25017257320491837, 0.22831263511238342, 0.22036662728925271, 0.28072120067988604, 0.28244680866028127, 0.20812711488349644, 0.6408741955124668, 0.19353118249237478, 0.16675563759331347, 0.4976859760084008, 0.4892049175611233, 0.5434692771636185, 0.29479481011032405, 0.358640379822735, 0.35862456986207325, 0.192162745419158, 0.487149173780581, 0.5463893453837013, 0.43940400451011496, 0.2755967916157974, 0.18925599111268154, 0.19963567301018081, 0.5414709206077926, 0.19957285232578448, 0.18952249184701553, 0.17765474681583415, 0.17378881812013147, 0.17786551162129505, 0.17920587662617038, 0.2001632955887278, 0.18076833067032516, 0.1801919496025436, 0.1761995299275586, 0.07741636929535567, 0.0830005357116641, 0.07952662108109276, 0.07459185689412862, 0.07674689102508525, 0.06884074856563571, 0.07857791403614434, 0.08405295860230999, 0.0731095590764087]}, "mutation_prompt": null}
{"id": "781f6b68-509c-4f5e-ab49-f74ef6ec8f2e", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 10 * dim\n        self.population_size = self.initial_population_size\n        self.mutation_f = 0.5\n        self.crossover_prob = 0.7\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim)\n        )\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        \n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                if self.used_budget >= self.budget:\n                    break\n\n                # Mutation and recombination\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_f * (b - c), self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial[cross_points] = mutant[cross_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.used_budget += 1\n                if trial_fitness < self.fitness[i]:\n                    self.fitness[i] = trial_fitness\n                    self.population[i] = trial\n\n            # Adaptive mechanisms\n            if self.used_budget > self.budget * 0.5 and self.population_size > self.dim:\n                self.population_size = int(self.initial_population_size / 2)\n\n            # Adaptation of mutation factor and crossover probability\n            self.mutation_f = 0.5 + 0.3 * np.random.rand()\n            self.crossover_prob = 0.5 + 0.4 * np.random.rand()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.used_budget >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1", "name": "AdaptiveDifferentialEvolution", "description": "An Adaptive Differential Evolution algorithm enhanced with dynamic population size adjustment and a more sophisticated crossover strategy to improve convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "686e5765-66bd-4023-bb8f-797cd3285c74", "metadata": {"aucs": [0.7649530760233154, 0.7672203135695314, 0.7425091083534923, 0.7466124230890963, 0.7704599926457998, 0.7545584238429436, 0.7607524557865303, 0.7452759414992235, 0.7480973398464614, 0.5862065060770814, 0.5825938692348882, 0.5860768603755706, 0.5884050674615322, 0.5674125077060967, 0.5826435901385849, 0.5951042015179475, 0.6032313272244649, 0.5731672465217614, 0.25194592521131665, 0.1676756158856184, 0.26291580523412994, 0.2600503255878519, 0.17959807225069402, 0.2335825331252055, 0.2426249825633744, 0.3098139619975633, 0.2238814093442566, 0.16512111046391276, 0.21525969008541834, 0.19464188362095924, 0.12433287421253714, 0.16938508364746163, 0.18976455925568758, 0.13245017086615973, 0.1914663153843057, 0.1874239908218731, 0.9382511363254415, 0.9427002108554231, 0.9335298663510166, 0.9735453086833011, 0.9716724136429433, 0.9510382502908014, 0.9634134672229929, 0.9509589054801365, 0.9258879750336196, 0.3488179661700227, 0.3938629525946634, 0.4347726549811002, 0.4192564353073116, 0.389892254250635, 0.39604469148062593, 0.42641372566848945, 0.4198347262636978, 0.4153207613767891, 0.4290968639230195, 0.5501128315873807, 0.5279342473536783, 0.5823625292882533, 0.5890925402731175, 0.5613742528251338, 0.5809233736272427, 0.5916647914898385, 0.5784694622656943, 0.21674247876611485, 0.18909305362696527, 0.1798032830302967, 0.15696316364485352, 0.1794543951235008, 0.18877119059253666, 0.3004394879386265, 0.2183158139879512, 0.2014575293460571, 0.16751679858993596, 0.1567386612593329, 0.21409862242562416, 0.24158310574334418, 0.2001879571817049, 0.2491357919562368, 0.23606130039657836, 0.2138807332293885, 0.19371853333011013, 0.10317564745716923, 0.08467517496480015, 0.09389911343643675, 0.09573396864087969, 0.07486365299407793, 0.0442967807760688, 0.12878722553210498, 0.0964958657847026, 0.07909484892663587, 0.23590099351112526, 0.20216297112133585, 0.20882497179331172, 0.21456010145039728, 0.20432566242871153, 0.12994546971771215, 0.2511321390500115, 0.2046752316748388, 0.2556081827349247, 0.04524643133393491, 0.03069074890312329, 0.06178105905539266, 0.0699604123885581, 0.04415075947763236, 0.03450183732339096, 0.05304536553524963, 0.08212001961877358, 0.02319607651683253, 0.1588741206119405, 0.16554565624524453, 0.1504714197556989, 0.18339339349809358, 0.15915080336276188, 0.17621457723474965, 0.15410642103848982, 0.14627687511898313, 0.1591600706554931, 0.5436354200512152, 0.5341545209678712, 0.5241850698803925, 0.5599272364565837, 0.5259057857779712, 0.5062025183429466, 0.5395204763904666, 0.5365040376452355, 0.5278764559093689, 0.08535298729770857, 0.09148956013510867, 0.10171053662853569, 0.11574511432253998, 0.10563633885824852, 0.11188308205140507, 0.115776251817583, 0.10097361304176866, 0.09042796994295366, 0.14880949890428163, 0.1325934670430281, 0.19583144394655738, 0.12493560537378257, 0.18502724360352996, 0.12882282471558337, 0.13515223906191365, 0.12827721213156107, 0.14236695678275868, 0.3122690889056031, 0.34125131901950245, 0.3189119476463479, 0.31728298209870665, 0.3414408983994017, 0.33979007787767723, 0.3514442661665945, 0.39367957216627925, 0.369656070988143, 0.23198347831140986, 0.22829913043231886, 0.22921597609444966, 0.251120787788886, 0.24167393698168704, 0.20746485258928837, 0.2437880398264347, 0.25592442959305695, 0.26947644647958024, 0.19400567801085455, 0.19406769423076453, 0.19319049200276806, 0.18174325807884217, 0.18412799391645007, 0.19045283601534158, 0.20894670161571838, 0.19400842451017297, 0.1879639634757112, 0.20264811447264242, 0.19211000342460982, 0.19149845884701777, 0.25017257320491837, 0.22831263511238342, 0.22036662728925271, 0.28072120067988604, 0.28244680866028127, 0.20812711488349644, 0.6408741955124668, 0.19353118249237478, 0.16675563759331347, 0.4976859760084008, 0.4892049175611233, 0.5434692771636185, 0.29479481011032405, 0.358640379822735, 0.35862456986207325, 0.192162745419158, 0.487149173780581, 0.5463893453837013, 0.43940400451011496, 0.2755967916157974, 0.18925599111268154, 0.19963567301018081, 0.5414709206077926, 0.19957285232578448, 0.18952249184701553, 0.17765474681583415, 0.17378881812013147, 0.17786551162129505, 0.17920587662617038, 0.2001632955887278, 0.18076833067032516, 0.1801919496025436, 0.1761995299275586, 0.07741636929535567, 0.0830005357116641, 0.07952662108109276, 0.07459185689412862, 0.07674689102508525, 0.06884074856563571, 0.07857791403614434, 0.08405295860230999, 0.0731095590764087]}, "mutation_prompt": null}
{"id": "124e3e19-ced6-4119-8a48-f7cfd8013700", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 10 * dim\n        self.population_size = self.initial_population_size\n        self.mutation_f = 0.5\n        self.crossover_prob = 0.7\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim)\n        )\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n        self.best_fitness = np.inf\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        \n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                if self.used_budget >= self.budget:\n                    break\n\n                # Mutation strategy with best individual influence\n                best_idx = np.argmin(self.fitness)\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_f * (b - c) + 0.5 * (self.population[best_idx] - a), \n                                 self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial[cross_points] = mutant[cross_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.used_budget += 1\n                if trial_fitness < self.fitness[i]:\n                    self.fitness[i] = trial_fitness\n                    self.population[i] = trial\n\n            # Adaptive mechanisms based on improvement\n            if self.used_budget > self.budget * 0.5 and self.population_size > self.dim:\n                self.population_size = int(self.initial_population_size / 2)\n\n            # Adaptive mutation factor and crossover probability based on improvement\n            current_best = np.min(self.fitness)\n            if current_best < self.best_fitness:\n                self.best_fitness = current_best\n                self.mutation_f = 0.4 + 0.3 * np.random.rand()\n                self.crossover_prob = 0.6 + 0.3 * np.random.rand()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.used_budget >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1", "name": "AdaptiveDifferentialEvolution", "description": "Improved Adaptive Differential Evolution with enhanced mutation strategies and dynamic adaptation of crossover based on past performance to speed up convergence.", "configspace": "", "generation": 74, "fitness": 0.46579548218935113, "feedback": "The algorithm AdaptiveDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.47 with standard deviation 0.28.", "error": "", "parent_id": "686e5765-66bd-4023-bb8f-797cd3285c74", "metadata": {"aucs": [0.8965749757029403, 0.9073667439280245, 0.9052190551643833, 0.8963154813750772, 0.9115615988291847, 0.9000165099269524, 0.9024157376224583, 0.9058782596811673, 0.9060712043547842, 0.8221117102244355, 0.8232384282547296, 0.8096833176378289, 0.803630990814496, 0.8227746737397528, 0.8222458013364699, 0.8112386132053878, 0.8346180171212291, 0.8369087678479824, 0.41198716561255155, 0.5920978069091614, 0.15015965449107405, 0.1748088639911879, 0.15609506022632758, 0.5325033924613658, 0.15627668286079388, 0.4585054294896507, 0.5946415392896547, 0.13622423146287088, 0.1377802431242371, 0.11916070993571737, 0.1146250479460772, 0.14392700532004632, 0.1460130224673596, 0.16198822006143287, 0.6014540953984114, 0.11356813867785209, 0.9329384344433713, 0.9770196181087624, 0.9487994985704654, 0.9513907462862684, 0.964472822577042, 0.9704904651377332, 0.9130385898269285, 0.9699402578061713, 0.9337352387093611, 0.723527843105046, 0.7147726255764233, 0.74267325283519, 0.7402440081693826, 0.7446231934830108, 0.7358515596633222, 0.7096059214455226, 0.7023277357463633, 0.7625048085249216, 0.8469928395624954, 0.8594484863610297, 0.8670179155790334, 0.8548121932813011, 0.8726578471672252, 0.8834351999718991, 0.1768674548432837, 0.9178367551250045, 0.8952240417843911, 0.3830611252157946, 0.5542722690358917, 0.5491701666837667, 0.5507687889648047, 0.13128795069705235, 0.5345615511088906, 0.5148246875804936, 0.501018183037441, 0.4979932285544143, 0.5186298466863517, 0.5080368213946709, 0.4101800469460729, 0.5586339402166425, 0.482268888063793, 0.5673202093857974, 0.20360130360109907, 0.5699763866453263, 0.1937130415492876, 0.4052110696329665, 0.33425731644476897, 0.41890910306894247, 0.499381703208448, 0.380234767684378, 0.37984180219470387, 0.3478875890865665, 0.38585036543104767, 0.4386187142076037, 0.6001574776656289, 0.5569836282401737, 0.5178058119729314, 0.5773145482732891, 0.43572732190804264, 0.5071609662853969, 0.43771385285432574, 0.5779364817882446, 0.5501802509647131, 0.19479435622098062, 0.1059266877099011, 0.2060197071548987, 0.21423146860070696, 0.3116690804764005, 0.37205791991231396, 0.2029316448586126, 0.1488389185105714, 0.12232539547338306, 0.3664727219911077, 0.396578428661433, 0.3625789417794797, 0.36894953698275235, 0.4675407692164947, 0.40816883484227406, 0.33608481306165416, 0.4118782158865578, 0.387910633029219, 0.7653011464421587, 0.7922187309475326, 0.7838298050783412, 0.767189419966823, 0.7322246394440209, 0.7565448302696057, 0.763137151876868, 0.8078232226699613, 0.8090520368682215, 0.13270367602842525, 0.1199860802868623, 0.13557527333499364, 0.14773371975135885, 0.10777868324032769, 0.14837745438243277, 0.12365226330677415, 0.15199037545283756, 0.275100615566482, 0.35548844791768297, 0.1688636577287601, 0.15038647130898464, 0.4538466592432503, 0.1638989838590329, 0.18633195911568923, 0.21056434767497745, 0.130794441937786, 0.3212053086738913, 0.6574400137469547, 0.5516481548561369, 0.6994142267571096, 0.651911608348646, 0.6964614765028034, 0.6427065285404141, 0.5800127977645871, 0.6529228372415743, 0.6695008541446409, 0.2643452718665247, 0.32077069426619487, 0.44889683990275375, 0.5046748678287407, 0.5072097324054746, 0.3820533754063403, 0.24931838540637163, 0.48384867699912304, 0.556847305582799, 0.22681312307346424, 0.20786198838790892, 0.24235703779322848, 0.21676804886252954, 0.21917944308842796, 0.19208166382115965, 0.21252456885143078, 0.21687665234359133, 0.2065317892185924, 0.6628210814329853, 0.2404728513753751, 0.22090439765844472, 0.2458899265059462, 0.22193855609648316, 0.23887562560367137, 0.19790876416534298, 0.21718592929880476, 0.24406198411825586, 0.18654496231322404, 0.8650647806738097, 0.18545382887365747, 0.817112834833382, 0.19962244405543128, 0.19968517744039782, 0.1423794693616357, 0.8255331455221171, 0.9032090214449877, 0.8537479499529251, 0.7721504230103967, 0.9057296124065435, 0.20991897012730665, 0.7330049243811074, 0.16651946891955172, 0.718935587863314, 0.1536427337493962, 0.2111974155572326, 0.1942613808684891, 0.1698971362184335, 0.17961493671673145, 0.18360970088053385, 0.1858344198418206, 0.19427693142099056, 0.1816477659993212, 0.18973541132574867, 0.18121078093143672, 0.09179724251052523, 0.08963233911414203, 0.0873914724565581, 0.09171449380316465, 0.08534139512533334, 0.0863578598649547, 0.08369610318356713, 0.08344411635456983, 0.09288660332767262]}, "mutation_prompt": null}
{"id": "6a7c8c52-1816-491f-a757-da190054b76a", "solution": "import numpy as np\n\nclass OptimizedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 10 * dim\n        self.population_size = self.initial_population_size\n        self.mutation_f = 0.5\n        self.crossover_prob = 0.75  # Adjusted for increased exploration\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim)\n        )\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n        self.best_fitness = np.inf\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        \n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                if self.used_budget >= self.budget:\n                    break\n\n                # Mutation strategy with best individual influence\n                best_idx = np.argmin(self.fitness)\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_f * (b - c) + 0.5 * (self.population[best_idx] - a), \n                                 self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial[cross_points] = mutant[cross_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.used_budget += 1\n                if trial_fitness < self.fitness[i]:\n                    self.fitness[i] = trial_fitness\n                    self.population[i] = trial\n\n            # Adaptive mechanisms based on improvement\n            if self.used_budget > self.budget * 0.5 and self.population_size > self.dim * 0.8:  # More gradual reduction\n                self.population_size = int(self.population_size * 0.9)  # Gradual reduction in population size\n\n            # Adaptive mutation factor and crossover probability based on improvement\n            current_best = np.min(self.fitness)\n            if current_best < self.best_fitness:\n                self.best_fitness = current_best\n                self.mutation_f = 0.45 + 0.25 * np.random.rand()  # More varied mutation factor\n                self.crossover_prob = 0.65 + 0.25 * np.random.rand()  # Adjusted range for crossover probability\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.used_budget >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1", "name": "OptimizedDifferentialEvolution", "description": "Optimized Adaptive Differential Evolution with enhanced dynamic population resizing and fine-tuned mutation strategies for faster convergence.", "configspace": "", "generation": 75, "fitness": 0.4533660855132552, "feedback": "The algorithm OptimizedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.45 with standard deviation 0.29.", "error": "", "parent_id": "124e3e19-ced6-4119-8a48-f7cfd8013700", "metadata": {"aucs": [0.8833386632181979, 0.909157846292289, 0.9119173848636732, 0.8941888396333996, 0.8991973647918551, 0.9085212074883796, 0.8952986003945157, 0.9040268899800784, 0.9097426976269276, 0.7940496832357187, 0.8241659993139409, 0.8164888935963767, 0.8034661923411478, 0.8145282717303822, 0.8072549205460073, 0.8043911077402248, 0.8109020623384742, 0.809055032559287, 0.14976648174174967, 0.15752415208038506, 0.1642294812125792, 0.12824287277232893, 0.16800889829635612, 0.16555714331690963, 0.6075814680955494, 0.14622956884979543, 0.15501731411860653, 0.1728802140321215, 0.11839645725160353, 0.13118051795081065, 0.15271593966426733, 0.17039860319290545, 0.16242173506562263, 0.15589319097104815, 0.12003843102807099, 0.3102546827769037, 0.9610168372616904, 0.9818848437373611, 0.9607432671922804, 0.9420830664801885, 0.9697258894252055, 0.9460081504916575, 0.9696656986924779, 0.9653111330686139, 0.9544582435250597, 0.7510807579162126, 0.7495297618431489, 0.73675633561653, 0.68809806319898, 0.7433522436025047, 0.7364095558331352, 0.6654852868341713, 0.7065452569091843, 0.7406807212815718, 0.8859116082325337, 0.8381790735676353, 0.8292285773813224, 0.8568936089251414, 0.8688149400252785, 0.8870500099978057, 0.23119982066760425, 0.8813926050302527, 0.8538661203445431, 0.37965855364773715, 0.5267202626642127, 0.5864336072556422, 0.34659430855550943, 0.33118151923554684, 0.1304935808773212, 0.43427549084096484, 0.13272280479298337, 0.4824261552333625, 0.4670486728781077, 0.13350909617144513, 0.3823434653951263, 0.46755476075587166, 0.2684073498140651, 0.49205503041897314, 0.48738783148536335, 0.13194070041198536, 0.4557931833709945, 0.33070182393369607, 0.43176097359419874, 0.34189252224730815, 0.28079348898363987, 0.3040508479373272, 0.2889261007452535, 0.3783553671423586, 0.21246830172491848, 0.46766903684769545, 0.39631481910638644, 0.48628877812130944, 0.5217405294797943, 0.4307697071498552, 0.318418241913313, 0.4152541214097589, 0.5441296579905546, 0.4606087555742189, 0.5051928307909326, 0.1373439393867193, 0.17380923116488323, 0.11646503462330182, 0.30298720598777995, 0.17296197294405213, 0.3000204624606656, 0.27164951166131057, 0.13974880417196078, 0.32501164055686327, 0.37764447144639135, 0.39901494811896754, 0.33372500299378427, 0.3552922951031282, 0.381972945469789, 0.39944381424239195, 0.379701628549143, 0.3629294268109716, 0.3574729057136746, 0.8220450395117718, 0.7621043780510709, 0.769776385976971, 0.7401757336894875, 0.755529012420516, 0.7788261940205183, 0.7827701482290033, 0.7649596922168976, 0.7921724321797055, 0.1181007306294588, 0.12166877964161593, 0.11713568972234623, 0.1261534782969469, 0.11987870164314207, 0.11659621502915452, 0.12280901575790015, 0.10982497222121257, 0.10164316128487116, 0.12077614865566189, 0.14145320745508283, 0.16783433461227037, 0.13585024941799329, 0.1503943989277141, 0.15005515929424107, 0.1484715659350988, 0.22867259883556623, 0.1761328191761522, 0.49192928233138133, 0.5543411215598927, 0.5148433947139339, 0.5534468949517176, 0.5621164796277611, 0.5556025724452525, 0.6585070292169317, 0.5612448211167562, 0.6077747567693648, 0.41678994993422236, 0.3488686468751582, 0.41732999494636225, 0.3791170365824815, 0.3603624903614764, 0.3678894599859637, 0.41397444644335435, 0.4343824572867153, 0.46843287329984573, 0.21005315048293882, 0.19889727366731658, 0.1916318034143295, 0.19821143423450172, 0.2107014211381898, 0.2102112634726666, 0.24071333100416337, 0.19465016632764243, 0.23152045472025484, 0.19948328538919347, 0.19523272388078883, 0.7384253845411974, 0.5568361835588398, 0.21768636048856604, 0.2213649641983957, 0.6680978611647752, 0.29917393418701377, 0.20574956399360744, 0.8974979079430851, 0.866568028775067, 0.7666169695898538, 0.8778969143575553, 0.8472722482843016, 0.8871471011541092, 0.848943068393017, 0.17206572702474732, 0.8946217793119159, 0.8631505745228226, 0.21105791059033707, 0.9018217113990937, 0.8093045421140712, 0.1671938074204805, 0.16816809577953595, 0.8549716770814679, 0.8550171935668925, 0.21112911319089, 0.19450768907844218, 0.18109896735441966, 0.19166224114630226, 0.18632901007060554, 0.1715103134558933, 0.1831477356659923, 0.1890621516717309, 0.19029857081551793, 0.1841791709183367, 0.08842169062857241, 0.08827247446260766, 0.08970556173541044, 0.09144240670539971, 0.0898960527118896, 0.09047212738695254, 0.08418743117626293, 0.07885470129045447, 0.07969948584966713]}, "mutation_prompt": null}
{"id": "3e100d13-e657-4e35-82db-deb2b4066362", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 10 * dim\n        self.population_size = self.initial_population_size\n        self.mutation_f = 0.5\n        self.crossover_prob = 0.7\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim)\n        )\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n        self.best_fitness = np.inf\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        \n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                if self.used_budget >= self.budget:\n                    break\n\n                # Mutation strategy with best individual influence\n                best_idx = np.argmin(self.fitness)\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_f * (b - c) + 0.5 * (self.population[best_idx] - a), \n                                 self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial[cross_points] = mutant[cross_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.used_budget += 1\n                if trial_fitness < self.fitness[i]:\n                    self.fitness[i] = trial_fitness\n                    self.population[i] = trial\n\n            # Adaptive mechanisms based on improvement\n            if self.used_budget > self.budget * 0.5 and self.population_size > self.dim:\n                self.population_size = int(self.initial_population_size / 2)\n\n            # Adaptive mutation factor and crossover probability based on improvement\n            current_best = np.min(self.fitness)\n            if current_best < self.best_fitness:\n                self.best_fitness = current_best\n                self.mutation_f = 0.4 + 0.3 * np.random.rand()\n                self.crossover_prob = 0.6 + 0.3 * np.random.rand()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.used_budget >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1", "name": "AdaptiveDifferentialEvolution", "description": "Improved Adaptive Differential Evolution with enhanced mutation strategies and dynamic adaptation of crossover based on past performance to speed up convergence.", "configspace": "", "generation": 75, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "124e3e19-ced6-4119-8a48-f7cfd8013700", "metadata": {"aucs": [0.8965749757029403, 0.9073667439280245, 0.9052190551643833, 0.8963154813750772, 0.9115615988291847, 0.9000165099269524, 0.9024157376224583, 0.9058782596811673, 0.9060712043547842, 0.8221117102244355, 0.8232384282547296, 0.8096833176378289, 0.803630990814496, 0.8227746737397528, 0.8222458013364699, 0.8112386132053878, 0.8346180171212291, 0.8369087678479824, 0.41198716561255155, 0.5920978069091614, 0.15015965449107405, 0.1748088639911879, 0.15609506022632758, 0.5325033924613658, 0.15627668286079388, 0.4585054294896507, 0.5946415392896547, 0.13622423146287088, 0.1377802431242371, 0.11916070993571737, 0.1146250479460772, 0.14392700532004632, 0.1460130224673596, 0.16198822006143287, 0.6014540953984114, 0.11356813867785209, 0.9329384344433713, 0.9770196181087624, 0.9487994985704654, 0.9513907462862684, 0.964472822577042, 0.9704904651377332, 0.9130385898269285, 0.9699402578061713, 0.9337352387093611, 0.723527843105046, 0.7147726255764233, 0.74267325283519, 0.7402440081693826, 0.7446231934830108, 0.7358515596633222, 0.7096059214455226, 0.7023277357463633, 0.7625048085249216, 0.8469928395624954, 0.8594484863610297, 0.8670179155790334, 0.8548121932813011, 0.8726578471672252, 0.8834351999718991, 0.1768674548432837, 0.9178367551250045, 0.8952240417843911, 0.3830611252157946, 0.5542722690358917, 0.5491701666837667, 0.5507687889648047, 0.13128795069705235, 0.5345615511088906, 0.5148246875804936, 0.501018183037441, 0.4979932285544143, 0.5186298466863517, 0.5080368213946709, 0.4101800469460729, 0.5586339402166425, 0.482268888063793, 0.5673202093857974, 0.20360130360109907, 0.5699763866453263, 0.1937130415492876, 0.4052110696329665, 0.33425731644476897, 0.41890910306894247, 0.499381703208448, 0.380234767684378, 0.37984180219470387, 0.3478875890865665, 0.38585036543104767, 0.4386187142076037, 0.6001574776656289, 0.5569836282401737, 0.5178058119729314, 0.5773145482732891, 0.43572732190804264, 0.5071609662853969, 0.43771385285432574, 0.5779364817882446, 0.5501802509647131, 0.19479435622098062, 0.1059266877099011, 0.2060197071548987, 0.21423146860070696, 0.3116690804764005, 0.37205791991231396, 0.2029316448586126, 0.1488389185105714, 0.12232539547338306, 0.3664727219911077, 0.396578428661433, 0.3625789417794797, 0.36894953698275235, 0.4675407692164947, 0.40816883484227406, 0.33608481306165416, 0.4118782158865578, 0.387910633029219, 0.7653011464421587, 0.7922187309475326, 0.7838298050783412, 0.767189419966823, 0.7322246394440209, 0.7565448302696057, 0.763137151876868, 0.8078232226699613, 0.8090520368682215, 0.13270367602842525, 0.1199860802868623, 0.13557527333499364, 0.14773371975135885, 0.10777868324032769, 0.14837745438243277, 0.12365226330677415, 0.15199037545283756, 0.275100615566482, 0.35548844791768297, 0.1688636577287601, 0.15038647130898464, 0.4538466592432503, 0.1638989838590329, 0.18633195911568923, 0.21056434767497745, 0.130794441937786, 0.3212053086738913, 0.6574400137469547, 0.5516481548561369, 0.6994142267571096, 0.651911608348646, 0.6964614765028034, 0.6427065285404141, 0.5800127977645871, 0.6529228372415743, 0.6695008541446409, 0.2643452718665247, 0.32077069426619487, 0.44889683990275375, 0.5046748678287407, 0.5072097324054746, 0.3820533754063403, 0.24931838540637163, 0.48384867699912304, 0.556847305582799, 0.22681312307346424, 0.20786198838790892, 0.24235703779322848, 0.21676804886252954, 0.21917944308842796, 0.19208166382115965, 0.21252456885143078, 0.21687665234359133, 0.2065317892185924, 0.6628210814329853, 0.2404728513753751, 0.22090439765844472, 0.2458899265059462, 0.22193855609648316, 0.23887562560367137, 0.19790876416534298, 0.21718592929880476, 0.24406198411825586, 0.18654496231322404, 0.8650647806738097, 0.18545382887365747, 0.817112834833382, 0.19962244405543128, 0.19968517744039782, 0.1423794693616357, 0.8255331455221171, 0.9032090214449877, 0.8537479499529251, 0.7721504230103967, 0.9057296124065435, 0.20991897012730665, 0.7330049243811074, 0.16651946891955172, 0.718935587863314, 0.1536427337493962, 0.2111974155572326, 0.1942613808684891, 0.1698971362184335, 0.17961493671673145, 0.18360970088053385, 0.1858344198418206, 0.19427693142099056, 0.1816477659993212, 0.18973541132574867, 0.18121078093143672, 0.09179724251052523, 0.08963233911414203, 0.0873914724565581, 0.09171449380316465, 0.08534139512533334, 0.0863578598649547, 0.08369610318356713, 0.08344411635456983, 0.09288660332767262]}, "mutation_prompt": null}
{"id": "ec2c5ae4-43e2-439c-a1d5-295763f4992c", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 10 * dim\n        self.population_size = self.initial_population_size\n        self.mutation_f = 0.5\n        self.crossover_prob = 0.7\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim)\n        )\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n        self.best_fitness = np.inf\n        self.dynamic_dim = dim\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        \n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                if self.used_budget >= self.budget:\n                    break\n\n                # Mutation strategy with best individual influence\n                best_idx = np.argmin(self.fitness)\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_f * (b - c) + 0.5 * (self.population[best_idx] - a), \n                                 self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial[cross_points] = mutant[cross_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.used_budget += 1\n                if trial_fitness < self.fitness[i]:\n                    self.fitness[i] = trial_fitness\n                    self.population[i] = trial\n\n            # Adaptive mechanisms based on improvement\n            if self.used_budget > self.budget * 0.5 and self.population_size > self.dim:\n                self.population_size = int(self.initial_population_size / 2)\n\n            # Adaptive mutation factor and crossover probability based on improvement\n            current_best = np.min(self.fitness)\n            if current_best < self.best_fitness:\n                self.best_fitness = current_best\n                self.mutation_f = 0.4 + 0.3 * np.random.rand()\n                self.crossover_prob = 0.6 + 0.3 * np.random.rand()\n                \n            # Periodic dimensional reduction to focus local search\n            if self.used_budget % (self.budget // 10) == 0 and self.dynamic_dim > 2:\n                self.dynamic_dim = max(2, self.dynamic_dim - 1)\n                self.population = self.population[:, :self.dynamic_dim]\n                self.fitness = self.fitness[:self.dynamic_dim]\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.used_budget >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1", "name": "AdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with periodic dimensional reduction to intensify local search and adaptive mutation control.", "configspace": "", "generation": 77, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('boolean index did not match indexed array along dimension 0; dimension is 4 but corresponding boolean dimension is 5').", "error": "IndexError('boolean index did not match indexed array along dimension 0; dimension is 4 but corresponding boolean dimension is 5')", "parent_id": "124e3e19-ced6-4119-8a48-f7cfd8013700", "metadata": {}, "mutation_prompt": null}
{"id": "2b72b4fa-6857-431d-972a-34c5e060fecc", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 10 * dim\n        self.population_size = self.initial_population_size\n        self.mutation_f = 0.5\n        self.crossover_prob = 0.7\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim)\n        )\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n        self.best_fitness = np.inf\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        \n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                if self.used_budget >= self.budget:\n                    break\n\n                # Mutation strategy with best individual influence\n                best_idx = np.argmin(self.fitness)\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                scale = np.random.uniform(0.4, 0.6)  # Dynamic scaling factor\n                mutant = np.clip(a + scale * (b - c) + 0.5 * (self.population[best_idx] - a), \n                                 self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial[cross_points] = mutant[cross_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.used_budget += 1\n                if trial_fitness < self.fitness[i]:\n                    self.fitness[i] = trial_fitness\n                    self.population[i] = trial\n\n            # Adaptive mechanisms based on improvement\n            if self.used_budget > self.budget * 0.4 and self.population_size > self.dim:\n                self.population_size = int(self.initial_population_size * 0.75)\n\n            # Adaptive mutation factor and crossover probability based on improvement\n            current_best = np.min(self.fitness)\n            if current_best < self.best_fitness:\n                self.best_fitness = current_best\n                self.mutation_f = np.random.uniform(0.4, 0.9)  # Broaden range\n                self.crossover_prob = np.random.uniform(0.6, 0.9)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.used_budget >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1", "name": "AdaptiveDifferentialEvolution", "description": "Enhance convergence speed by incorporating dynamic population resizing and adaptive random scaling for mutation and crossover.", "configspace": "", "generation": 78, "fitness": 0.46570010757840163, "feedback": "The algorithm AdaptiveDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.47 with standard deviation 0.29.", "error": "", "parent_id": "124e3e19-ced6-4119-8a48-f7cfd8013700", "metadata": {"aucs": [0.9079431583474755, 0.9153292381973501, 0.9169512320152217, 0.911286571311721, 0.9167559154433272, 0.9176219087592226, 0.9123510144981529, 0.9163825340758633, 0.9215187366485945, 0.8132608458654486, 0.835128127491664, 0.8335196753867122, 0.8471830714625378, 0.8398293905140426, 0.8404050242432616, 0.8198421564200467, 0.8295306030136026, 0.8229325753445956, 0.5991336014369323, 0.14948057314528473, 0.16608966680178472, 0.6818885940195465, 0.6144290885917192, 0.6873311095809647, 0.6541772506695973, 0.5685590998748643, 0.6144619048632132, 0.11369941352260082, 0.11829051974157212, 0.15439115772044465, 0.1536886136943394, 0.1391556050343119, 0.1528976127436763, 0.15047912914723094, 0.13857585676444173, 0.15325544469560004, 0.9641275846036683, 0.9051824982519845, 0.9233816584686996, 0.9633343661696652, 0.9550739014554541, 0.9554367316150862, 0.9617948252539568, 0.955797941511989, 0.9398992100218907, 0.7393037235636188, 0.7529721020432313, 0.7555401662555736, 0.7653769968908174, 0.7656434228909917, 0.7742963639392237, 0.7352449397567561, 0.7483112361423667, 0.76977295375251, 0.8544028470019581, 0.8526250588700288, 0.8625542114451765, 0.8455401804709652, 0.9130489405935144, 0.925222957990617, 0.8708804469188637, 0.8895085307704016, 0.8889882596144026, 0.17615618186502346, 0.3958001072049717, 0.5152318242712409, 0.34066172284834517, 0.5794039320491087, 0.5090533528298157, 0.1310182553978022, 0.5562259951670118, 0.541157130392742, 0.45307355514140113, 0.5548452731968923, 0.4441166274982057, 0.583095639488453, 0.4940395740614717, 0.5078765992057315, 0.13258399031164514, 0.6469647410058195, 0.2082390874175999, 0.4747409295876843, 0.5283068125826949, 0.4491699309433155, 0.5068914990122801, 0.2148796613703554, 0.19831947250915527, 0.3232675115190905, 0.4046749992474158, 0.40242099529241493, 0.5627218687619646, 0.5134043908202754, 0.5499694877752989, 0.45634639389495946, 0.5086166902097391, 0.4902127639963447, 0.6239685452221411, 0.5451750473801782, 0.6098919200119983, 0.12393690758064335, 0.13991455285157195, 0.05030428575221335, 0.18820815959623083, 0.11068317752015355, 0.1331217667110146, 0.21190792234337774, 0.11619307009073365, 0.0999388770873082, 0.29528100954767855, 0.3269825072521002, 0.381127408278388, 0.4602838619446611, 0.31789387921344614, 0.47400250325784465, 0.27736784070231846, 0.38725911065406504, 0.34805031315143165, 0.7598622269730697, 0.75044149152388, 0.7961478918205311, 0.783223416668571, 0.8172221307123485, 0.8180744468365436, 0.7840126782441003, 0.8002457045909767, 0.8042691745360849, 0.41094760982623835, 0.12162050099414734, 0.12970696453646247, 0.12855998346663733, 0.49919697946859753, 0.16260208277560706, 0.10657951827496348, 0.5077344657767742, 0.14503502234991006, 0.15380844669258442, 0.14961282565605782, 0.15352995479085874, 0.1602918313341941, 0.6043945338558776, 0.35892471523623115, 0.33593836735803684, 0.1649021498355533, 0.36420200685764825, 0.6989067739840256, 0.6911847965781988, 0.7354442449165812, 0.5502490455276068, 0.48798342750038737, 0.6675009250567435, 0.7514280653466695, 0.7430717010409746, 0.5900714753777201, 0.4869375192662475, 0.26303807945880076, 0.3043448540609567, 0.3726383330821196, 0.48390580438926967, 0.5597389997244648, 0.6170651014383841, 0.55272805586536, 0.4516022278056263, 0.1989717132754647, 0.23557346644085497, 0.2370746208309189, 0.24213177149056608, 0.20032561307822438, 0.21889577662980164, 0.210267396739809, 0.22024668125611113, 0.23873775645158468, 0.1901426314586826, 0.7141131409010701, 0.24116877577024132, 0.619689391383709, 0.2426534858727698, 0.20850778801515957, 0.21655856885650349, 0.24297335771395046, 0.20225271603800898, 0.16270621342275426, 0.1865294477146986, 0.1842806765676669, 0.18598654038336193, 0.19896172082615904, 0.198871637799659, 0.17547924580910568, 0.1745281379913982, 0.17649711249721256, 0.8580435521149951, 0.21062699091722936, 0.8881165435721999, 0.8854709114330843, 0.21148841131107343, 0.15349683278273174, 0.16615857164186287, 0.8080855120348405, 0.10392475009591995, 0.18300316930376426, 0.1677279006401654, 0.18246190658427808, 0.18405658236118205, 0.1864779181374624, 0.1767902083574212, 0.19050601323846594, 0.1884203824130971, 0.17967049734303508, 0.09756832244460167, 0.09657444084524525, 0.08387631763271997, 0.08519149758478228, 0.08900382103019278, 0.09679803997922154, 0.09182079260003562, 0.09830343139642062, 0.08851024213450842]}, "mutation_prompt": null}
{"id": "d5158e3b-c7b0-4c99-8942-9ad7a5232970", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 10 * dim\n        self.population_size = self.initial_population_size\n        self.mutation_f = 0.5\n        self.crossover_prob = 0.7\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim)\n        )\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n        self.best_fitness = np.inf\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        \n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                if self.used_budget >= self.budget:\n                    break\n\n                # Mutation strategy with best individual influence\n                best_idx = np.argmin(self.fitness)\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_f * (b - c) + 0.5 * (self.population[best_idx] - a), \n                                 self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial[cross_points] = mutant[cross_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.used_budget += 1\n                if trial_fitness < self.fitness[i]:\n                    self.fitness[i] = trial_fitness\n                    self.population[i] = trial\n\n            # Adaptive mechanisms based on improvement\n            if self.used_budget > self.budget * 0.5 and self.population_size > self.dim:\n                self.population_size = int(self.initial_population_size / 2)\n\n            # Adaptive mutation factor and crossover probability based on improvement\n            current_best = np.min(self.fitness)\n            if current_best < self.best_fitness:\n                self.best_fitness = current_best\n                self.mutation_f = 0.4 + 0.3 * np.random.rand()\n                self.crossover_prob = 0.6 + 0.3 * np.random.rand()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.used_budget >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1", "name": "AdaptiveDifferentialEvolution", "description": "Improved Adaptive Differential Evolution with enhanced mutation strategies and dynamic adaptation of crossover based on past performance to speed up convergence.", "configspace": "", "generation": 75, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "124e3e19-ced6-4119-8a48-f7cfd8013700", "metadata": {"aucs": [0.8965749757029403, 0.9073667439280245, 0.9052190551643833, 0.8963154813750772, 0.9115615988291847, 0.9000165099269524, 0.9024157376224583, 0.9058782596811673, 0.9060712043547842, 0.8221117102244355, 0.8232384282547296, 0.8096833176378289, 0.803630990814496, 0.8227746737397528, 0.8222458013364699, 0.8112386132053878, 0.8346180171212291, 0.8369087678479824, 0.41198716561255155, 0.5920978069091614, 0.15015965449107405, 0.1748088639911879, 0.15609506022632758, 0.5325033924613658, 0.15627668286079388, 0.4585054294896507, 0.5946415392896547, 0.13622423146287088, 0.1377802431242371, 0.11916070993571737, 0.1146250479460772, 0.14392700532004632, 0.1460130224673596, 0.16198822006143287, 0.6014540953984114, 0.11356813867785209, 0.9329384344433713, 0.9770196181087624, 0.9487994985704654, 0.9513907462862684, 0.964472822577042, 0.9704904651377332, 0.9130385898269285, 0.9699402578061713, 0.9337352387093611, 0.723527843105046, 0.7147726255764233, 0.74267325283519, 0.7402440081693826, 0.7446231934830108, 0.7358515596633222, 0.7096059214455226, 0.7023277357463633, 0.7625048085249216, 0.8469928395624954, 0.8594484863610297, 0.8670179155790334, 0.8548121932813011, 0.8726578471672252, 0.8834351999718991, 0.1768674548432837, 0.9178367551250045, 0.8952240417843911, 0.3830611252157946, 0.5542722690358917, 0.5491701666837667, 0.5507687889648047, 0.13128795069705235, 0.5345615511088906, 0.5148246875804936, 0.501018183037441, 0.4979932285544143, 0.5186298466863517, 0.5080368213946709, 0.4101800469460729, 0.5586339402166425, 0.482268888063793, 0.5673202093857974, 0.20360130360109907, 0.5699763866453263, 0.1937130415492876, 0.4052110696329665, 0.33425731644476897, 0.41890910306894247, 0.499381703208448, 0.380234767684378, 0.37984180219470387, 0.3478875890865665, 0.38585036543104767, 0.4386187142076037, 0.6001574776656289, 0.5569836282401737, 0.5178058119729314, 0.5773145482732891, 0.43572732190804264, 0.5071609662853969, 0.43771385285432574, 0.5779364817882446, 0.5501802509647131, 0.19479435622098062, 0.1059266877099011, 0.2060197071548987, 0.21423146860070696, 0.3116690804764005, 0.37205791991231396, 0.2029316448586126, 0.1488389185105714, 0.12232539547338306, 0.3664727219911077, 0.396578428661433, 0.3625789417794797, 0.36894953698275235, 0.4675407692164947, 0.40816883484227406, 0.33608481306165416, 0.4118782158865578, 0.387910633029219, 0.7653011464421587, 0.7922187309475326, 0.7838298050783412, 0.767189419966823, 0.7322246394440209, 0.7565448302696057, 0.763137151876868, 0.8078232226699613, 0.8090520368682215, 0.13270367602842525, 0.1199860802868623, 0.13557527333499364, 0.14773371975135885, 0.10777868324032769, 0.14837745438243277, 0.12365226330677415, 0.15199037545283756, 0.275100615566482, 0.35548844791768297, 0.1688636577287601, 0.15038647130898464, 0.4538466592432503, 0.1638989838590329, 0.18633195911568923, 0.21056434767497745, 0.130794441937786, 0.3212053086738913, 0.6574400137469547, 0.5516481548561369, 0.6994142267571096, 0.651911608348646, 0.6964614765028034, 0.6427065285404141, 0.5800127977645871, 0.6529228372415743, 0.6695008541446409, 0.2643452718665247, 0.32077069426619487, 0.44889683990275375, 0.5046748678287407, 0.5072097324054746, 0.3820533754063403, 0.24931838540637163, 0.48384867699912304, 0.556847305582799, 0.22681312307346424, 0.20786198838790892, 0.24235703779322848, 0.21676804886252954, 0.21917944308842796, 0.19208166382115965, 0.21252456885143078, 0.21687665234359133, 0.2065317892185924, 0.6628210814329853, 0.2404728513753751, 0.22090439765844472, 0.2458899265059462, 0.22193855609648316, 0.23887562560367137, 0.19790876416534298, 0.21718592929880476, 0.24406198411825586, 0.18654496231322404, 0.8650647806738097, 0.18545382887365747, 0.817112834833382, 0.19962244405543128, 0.19968517744039782, 0.1423794693616357, 0.8255331455221171, 0.9032090214449877, 0.8537479499529251, 0.7721504230103967, 0.9057296124065435, 0.20991897012730665, 0.7330049243811074, 0.16651946891955172, 0.718935587863314, 0.1536427337493962, 0.2111974155572326, 0.1942613808684891, 0.1698971362184335, 0.17961493671673145, 0.18360970088053385, 0.1858344198418206, 0.19427693142099056, 0.1816477659993212, 0.18973541132574867, 0.18121078093143672, 0.09179724251052523, 0.08963233911414203, 0.0873914724565581, 0.09171449380316465, 0.08534139512533334, 0.0863578598649547, 0.08369610318356713, 0.08344411635456983, 0.09288660332767262]}, "mutation_prompt": null}
{"id": "5e0ccc36-d796-4726-b361-f4f6b864e63a", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 10 * dim\n        self.population_size = self.initial_population_size\n        self.mutation_f = 0.5\n        self.crossover_prob = 0.7\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim)\n        )\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n        self.best_fitness = np.inf\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        \n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                if self.used_budget >= self.budget:\n                    break\n\n                # Mutation strategy with best individual influence\n                best_idx = np.argmin(self.fitness)\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                # Adjusted dynamic scaling factor\n                mutant = np.clip(a + self.mutation_f * (b - c) + 0.5 * np.random.rand() * (self.population[best_idx] - a), \n                                 self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial[cross_points] = mutant[cross_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.used_budget += 1\n                if trial_fitness < self.fitness[i]:\n                    self.fitness[i] = trial_fitness\n                    self.population[i] = trial\n\n            # Adaptive mechanisms based on improvement\n            if self.used_budget > self.budget * 0.5 and self.population_size > self.dim:\n                self.population_size = int(self.initial_population_size / 2)\n\n            # Adaptive mutation factor and crossover probability based on improvement\n            current_best = np.min(self.fitness)\n            if current_best < self.best_fitness:\n                self.best_fitness = current_best\n                # Slightly diversified random scaling\n                self.mutation_f = 0.4 + 0.4 * np.random.rand()\n                self.crossover_prob = 0.6 + 0.3 * np.random.rand()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.used_budget >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with dynamic scaling factor adjustment and improved diversity retention to enhance convergence.", "configspace": "", "generation": 80, "fitness": 0.39252521518899114, "feedback": "The algorithm EnhancedAdaptiveDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.39 with standard deviation 0.25.", "error": "", "parent_id": "124e3e19-ced6-4119-8a48-f7cfd8013700", "metadata": {"aucs": [0.8576600834179738, 0.8366299456506936, 0.8418421881475184, 0.8459818196306028, 0.846175648746061, 0.8386666398268566, 0.8654948215278045, 0.8358981771980027, 0.8289859815018764, 0.7271500979665886, 0.7338166366274046, 0.7692840471825991, 0.6900024595717547, 0.7255881718023526, 0.7226999149985138, 0.7153087520038619, 0.6990425521119239, 0.7006986356329162, 0.15363682477591212, 0.12237987137865292, 0.3904832937927081, 0.31264554142924883, 0.3970671230838637, 0.4577665394267766, 0.23227338821182164, 0.35426833194501317, 0.31473389421399356, 0.1346036651207434, 0.14163675272496434, 0.13196078983153403, 0.13530651641847358, 0.15313871538907242, 0.1265195420598657, 0.1324957381949503, 0.26896844443988477, 0.12917390979944543, 0.9374298520279405, 0.9481013723256968, 0.9147033176796272, 0.957313813260619, 0.9590413965158165, 0.9328320216023593, 0.9559084727129231, 0.9322143544711208, 0.9748738616628787, 0.6249518433007848, 0.6158008979034648, 0.5851746863274098, 0.6219349663075588, 0.6289555085748282, 0.602075581105686, 0.6061009476096295, 0.6269783537364498, 0.5832681190873021, 0.6456946976824223, 0.6592576307090425, 0.6893164416330512, 0.7518540843245367, 0.7175610932793359, 0.7501760317852844, 0.7033858269469893, 0.7590986119980225, 0.7635639202234501, 0.24300974101876405, 0.4096281264106393, 0.37551706431255394, 0.3270145903042647, 0.34333878514810456, 0.3326927655435965, 0.317644945052472, 0.3347704126053749, 0.2721392019639589, 0.32004733918909645, 0.3681515281568195, 0.2596088617870853, 0.36045297510094265, 0.3070482321261888, 0.32161869593143033, 0.4005713414645462, 0.27517656494357, 0.40605692418541106, 0.24862182913030406, 0.13234608763404299, 0.169231810151117, 0.2459202665659963, 0.19696092990930314, 0.18121541953708498, 0.21171305681183417, 0.20332037574180795, 0.22812621013114276, 0.38250600659886513, 0.29514532320012843, 0.3275629467625669, 0.3252613718930015, 0.2995202453587207, 0.28914828921901004, 0.3812119011554119, 0.3785357686821955, 0.3285289632784174, 0.10299155299073848, 0.07469890989422279, 0.07635534434627533, 0.2844920580906256, 0.15966399733742187, 0.1254792753714835, 0.1475307216236441, 0.0952490421845108, 0.19081005527714912, 0.25143354356348513, 0.21448638406766085, 0.25236922070028545, 0.27570865757163443, 0.28889664714883323, 0.3192168796971686, 0.30822993039804303, 0.2658421443710568, 0.24969256988818178, 0.7107309104206487, 0.6587396684588397, 0.6636385068500352, 0.6767756891650302, 0.6310736903203311, 0.651431749060714, 0.692032419038044, 0.6612795425385004, 0.6881944895337233, 0.12287078777192906, 0.10365152348436368, 0.09355929519150286, 0.11090822060800787, 0.1000266559499371, 0.0944232885516727, 0.11590422194167371, 0.11286983215443724, 0.10502074441042719, 0.14285849725188893, 0.13784573186240956, 0.12285197955391935, 0.14018215363265352, 0.15482191403868806, 0.14827860438160678, 0.14744544325964215, 0.13905445304117658, 0.13926603234740054, 0.4771666933076437, 0.48758044852316973, 0.45976716803314943, 0.4477823036545606, 0.4815443119111723, 0.44336340616972714, 0.530667979286822, 0.5437602429367103, 0.5527839990316905, 0.3210786947669044, 0.2718156844723275, 0.27165097017468975, 0.3770841407055876, 0.34162016939399487, 0.2610363744981059, 0.3714871141691022, 0.36475860165068374, 0.34150123270222843, 0.20207204571146098, 0.2006221149558456, 0.21217560285284975, 0.18448624273054592, 0.19587962503562262, 0.20060149145399997, 0.2249375626207416, 0.20192082458584004, 0.2123445959710455, 0.21568778401326638, 0.5687446259769219, 0.42368828335856645, 0.5357215395279524, 0.3685958680738487, 0.38449542067180464, 0.2882846515912144, 0.4155469578836354, 0.4877395931690286, 0.17806384715264667, 0.7256685924196209, 0.5217061949309155, 0.7636031776350044, 0.19718711949666234, 0.694606684493219, 0.6477312070429935, 0.6682555791858262, 0.7577140322000357, 0.6831614513210431, 0.5252311153477691, 0.6963183870219297, 0.1666056643290854, 0.2062172487589009, 0.15042216384043727, 0.1611477622321621, 0.20966800777195693, 0.20562060842477814, 0.17818513195488417, 0.1888984665626604, 0.17596511094503842, 0.1867778930483074, 0.18218028610703152, 0.174389101236191, 0.1985706467299706, 0.1756070635183682, 0.17840099578093582, 0.0760034829746854, 0.08485246781272837, 0.07641591599584063, 0.09251977020697999, 0.083623815239662, 0.0821644446294918, 0.08367293803165177, 0.08711618330933857, 0.08537852063701867]}, "mutation_prompt": null}
{"id": "39c7fb2b-b312-4d74-bc86-1731c4088c8b", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 10 * dim\n        self.population_size = self.initial_population_size\n        self.mutation_f = 0.5\n        self.crossover_prob = 0.7\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim)\n        )\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n        self.best_fitness = np.inf\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        \n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                if self.used_budget >= self.budget:\n                    break\n\n                # Enhanced mutation strategy with dynamic influence\n                best_idx = np.argmin(self.fitness)\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                noise_factor = np.random.uniform(0.4, 0.6)  # Added variability in mutation\n                mutant = np.clip(a + self.mutation_f * (b - c) + noise_factor * (self.population[best_idx] - a), \n                                 self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial[cross_points] = mutant[cross_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.used_budget += 1\n                if trial_fitness < self.fitness[i]:\n                    self.fitness[i] = trial_fitness\n                    self.population[i] = trial\n\n            # Further adaptive population size reduction\n            if self.used_budget > self.budget * 0.4 and self.population_size > self.dim:\n                self.population_size = max(int(self.population_size * 0.8), self.dim)\n\n            # Adaptive mutation factor and crossover probability based on improvement\n            current_best = np.min(self.fitness)\n            if current_best < self.best_fitness:\n                self.best_fitness = current_best\n                self.mutation_f = 0.4 + 0.3 * np.random.rand()\n                self.crossover_prob = 0.6 + 0.3 * np.random.rand()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.used_budget >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1", "name": "AdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with dynamic population size adjustment and improved exploration through variable mutation strategies.", "configspace": "", "generation": 81, "fitness": 0.4013447644621497, "feedback": "The algorithm AdaptiveDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.40 with standard deviation 0.28.", "error": "", "parent_id": "124e3e19-ced6-4119-8a48-f7cfd8013700", "metadata": {"aucs": [0.9123542337110667, 0.89255092829343, 0.8933122389336684, 0.8970796322486304, 0.9019414505044564, 0.900282622069412, 0.9026474190913785, 0.8931848926308141, 0.890354739546571, 0.8189371720823021, 0.8109745211717997, 0.8216833906594587, 0.8210821251269063, 0.8287678923548756, 0.8064624985620371, 0.8254439052157453, 0.808546982669115, 0.8104260608243765, 0.1808955918980526, 0.16969296011041002, 0.14472768730907115, 0.15103628658319945, 0.1573206097907658, 0.14424842550376982, 0.32530556042134284, 0.5824649680005086, 0.1577175108781823, 0.15897369801268035, 0.15229287612908027, 0.134399416849732, 0.15065202088286367, 0.13072853257166295, 0.16462414503568357, 0.13846354871616373, 0.11232300760524627, 0.14714425499323502, 0.9477024842204269, 0.9502887479657679, 0.9579874354330606, 0.9472145961822683, 0.9723321164123407, 0.9689208773110042, 0.9458531898276424, 0.9202322584113994, 0.957273513597748, 0.7112008246965417, 0.6669766725617169, 0.6244312974060471, 0.5455728375580076, 0.5194402844184185, 0.5866528381994394, 0.5704031691847358, 0.6876764713576322, 0.713169835106414, 0.8067387470578504, 0.8510005079513006, 0.844977579326469, 0.8744174812942145, 0.8715841618218055, 0.20828005807030137, 0.8770882376029608, 0.8182176231708214, 0.8359343871781754, 0.3488143556396158, 0.13033460094457883, 0.2171621944662563, 0.3037988337388915, 0.4986029338617153, 0.28244335731688475, 0.23216126604235432, 0.18518733889817707, 0.41288986736859146, 0.30982050905379654, 0.26982826187237197, 0.25650538196497985, 0.2379726765289072, 0.13192426688884684, 0.2987349150217643, 0.2877340472991896, 0.3241027875290451, 0.26473616983564174, 0.160853895835121, 0.2127540869275073, 0.12832462837504832, 0.15092909878148053, 0.19314332497362707, 0.1956696923758754, 0.12495851522969192, 0.2534224240150039, 0.21250955563238194, 0.29821152538330276, 0.3344109538980037, 0.3037902821419243, 0.24586812384299328, 0.30502806807567173, 0.2578198465450734, 0.4565805092457855, 0.3622915378345679, 0.3428327484537178, 0.09897962513370062, 0.31095483840810967, 0.27489772272398794, 0.10399780172029294, 0.09834294284547596, 0.08160365288484395, 0.22792267188951632, 0.15719200078297668, 0.10268497173060875, 0.3082590171430164, 0.3250583259450094, 0.2414290286529006, 0.31980561525044593, 0.3694484018800186, 0.33668239366312824, 0.24720139951910136, 0.33514340222303796, 0.2776183273610793, 0.6694971089812944, 0.6799143467573567, 0.6940511156809577, 0.6845136213755763, 0.6693099746347061, 0.6874525986182853, 0.6845312895596742, 0.6949860608165206, 0.7107253595000442, 0.1109388714481927, 0.12648684514398467, 0.1422084017148778, 0.1484340040582538, 0.11882502893328106, 0.11365811988014574, 0.11271207149239293, 0.13348737235175145, 0.12112723159958683, 0.14972293016239346, 0.23912764897985994, 0.20199667132863697, 0.17285121718842178, 0.2274317879914246, 0.14107049751172285, 0.15008020006796197, 0.1467660189075949, 0.16578159218115596, 0.5412031972804238, 0.47969956714338746, 0.4667446222672943, 0.49763183670877165, 0.5026468886441746, 0.46457590746512223, 0.5580781595950631, 0.6043284154485157, 0.5749724918273961, 0.33516988166742745, 0.36389206069997004, 0.37204623253905966, 0.3436148469470015, 0.37186230425822864, 0.341528604729324, 0.35974555210207404, 0.3666269994365047, 0.37739610193089124, 0.24076963006431173, 0.20490344461748322, 0.22169343178949807, 0.22242088044045016, 0.2406721337587393, 0.2370161497101928, 0.21223199365555045, 0.22778999060609773, 0.2422544070818985, 0.21992815662474452, 0.21426599200974428, 0.7319998435111091, 0.20997016423157688, 0.23038666923599604, 0.2157152980656999, 0.19951673141360093, 0.2679878197700645, 0.24495767953288383, 0.8817091010256676, 0.8602147499610026, 0.15252885076959488, 0.18612411661614647, 0.1999580868080313, 0.8848129069902246, 0.8280903597021918, 0.16080974332022835, 0.7877795417827679, 0.8693568480053815, 0.2101843492786427, 0.8439942760504304, 0.8198869003733618, 0.21087624907368407, 0.1681958336263153, 0.7596470125056283, 0.10464280180044838, 0.165385077718185, 0.17386043187407507, 0.17611659528706536, 0.21954164581080782, 0.18283969180793802, 0.19495054327722627, 0.17232964389338645, 0.1759079723420065, 0.17639856396446196, 0.18993159949550986, 0.09275294248850419, 0.10874909979912739, 0.08994141190007976, 0.09991667018228112, 0.09839353933438522, 0.10075205135837262, 0.08943817675508892, 0.09255678448115434, 0.08797611878074152]}, "mutation_prompt": null}
{"id": "4e9c3f2f-5145-4009-8383-e7031e07c2d3", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 10 * dim\n        self.population_size = self.initial_population_size\n        self.mutation_f = 0.5\n        self.crossover_prob = 0.7\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim)\n        )\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n        self.best_fitness = np.inf\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        \n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                if self.used_budget >= self.budget:\n                    break\n\n                # Mutation strategy with best individual influence\n                best_idx = np.argmin(self.fitness)\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_f * (b - c) + 0.5 * (self.population[best_idx] - a), \n                                 self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial[cross_points] = mutant[cross_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.used_budget += 1\n                if trial_fitness < self.fitness[i]:\n                    self.fitness[i] = trial_fitness\n                    self.population[i] = trial\n\n            # Adaptive mechanisms based on improvement\n            if self.used_budget > self.budget * 0.5 and self.population_size > self.dim:\n                self.population_size = int(self.initial_population_size / 2)\n\n            # Adaptive mutation factor and crossover probability based on improvement\n            current_best = np.min(self.fitness)\n            if current_best < self.best_fitness:\n                self.best_fitness = current_best\n                self.mutation_f = 0.4 + 0.3 * np.random.rand()\n                self.crossover_prob = 0.6 + 0.3 * np.random.rand()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.used_budget >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1", "name": "AdaptiveDifferentialEvolution", "description": "Improved Adaptive Differential Evolution with enhanced mutation strategies and dynamic adaptation of crossover based on past performance to speed up convergence.", "configspace": "", "generation": 75, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "124e3e19-ced6-4119-8a48-f7cfd8013700", "metadata": {"aucs": [0.8965749757029403, 0.9073667439280245, 0.9052190551643833, 0.8963154813750772, 0.9115615988291847, 0.9000165099269524, 0.9024157376224583, 0.9058782596811673, 0.9060712043547842, 0.8221117102244355, 0.8232384282547296, 0.8096833176378289, 0.803630990814496, 0.8227746737397528, 0.8222458013364699, 0.8112386132053878, 0.8346180171212291, 0.8369087678479824, 0.41198716561255155, 0.5920978069091614, 0.15015965449107405, 0.1748088639911879, 0.15609506022632758, 0.5325033924613658, 0.15627668286079388, 0.4585054294896507, 0.5946415392896547, 0.13622423146287088, 0.1377802431242371, 0.11916070993571737, 0.1146250479460772, 0.14392700532004632, 0.1460130224673596, 0.16198822006143287, 0.6014540953984114, 0.11356813867785209, 0.9329384344433713, 0.9770196181087624, 0.9487994985704654, 0.9513907462862684, 0.964472822577042, 0.9704904651377332, 0.9130385898269285, 0.9699402578061713, 0.9337352387093611, 0.723527843105046, 0.7147726255764233, 0.74267325283519, 0.7402440081693826, 0.7446231934830108, 0.7358515596633222, 0.7096059214455226, 0.7023277357463633, 0.7625048085249216, 0.8469928395624954, 0.8594484863610297, 0.8670179155790334, 0.8548121932813011, 0.8726578471672252, 0.8834351999718991, 0.1768674548432837, 0.9178367551250045, 0.8952240417843911, 0.3830611252157946, 0.5542722690358917, 0.5491701666837667, 0.5507687889648047, 0.13128795069705235, 0.5345615511088906, 0.5148246875804936, 0.501018183037441, 0.4979932285544143, 0.5186298466863517, 0.5080368213946709, 0.4101800469460729, 0.5586339402166425, 0.482268888063793, 0.5673202093857974, 0.20360130360109907, 0.5699763866453263, 0.1937130415492876, 0.4052110696329665, 0.33425731644476897, 0.41890910306894247, 0.499381703208448, 0.380234767684378, 0.37984180219470387, 0.3478875890865665, 0.38585036543104767, 0.4386187142076037, 0.6001574776656289, 0.5569836282401737, 0.5178058119729314, 0.5773145482732891, 0.43572732190804264, 0.5071609662853969, 0.43771385285432574, 0.5779364817882446, 0.5501802509647131, 0.19479435622098062, 0.1059266877099011, 0.2060197071548987, 0.21423146860070696, 0.3116690804764005, 0.37205791991231396, 0.2029316448586126, 0.1488389185105714, 0.12232539547338306, 0.3664727219911077, 0.396578428661433, 0.3625789417794797, 0.36894953698275235, 0.4675407692164947, 0.40816883484227406, 0.33608481306165416, 0.4118782158865578, 0.387910633029219, 0.7653011464421587, 0.7922187309475326, 0.7838298050783412, 0.767189419966823, 0.7322246394440209, 0.7565448302696057, 0.763137151876868, 0.8078232226699613, 0.8090520368682215, 0.13270367602842525, 0.1199860802868623, 0.13557527333499364, 0.14773371975135885, 0.10777868324032769, 0.14837745438243277, 0.12365226330677415, 0.15199037545283756, 0.275100615566482, 0.35548844791768297, 0.1688636577287601, 0.15038647130898464, 0.4538466592432503, 0.1638989838590329, 0.18633195911568923, 0.21056434767497745, 0.130794441937786, 0.3212053086738913, 0.6574400137469547, 0.5516481548561369, 0.6994142267571096, 0.651911608348646, 0.6964614765028034, 0.6427065285404141, 0.5800127977645871, 0.6529228372415743, 0.6695008541446409, 0.2643452718665247, 0.32077069426619487, 0.44889683990275375, 0.5046748678287407, 0.5072097324054746, 0.3820533754063403, 0.24931838540637163, 0.48384867699912304, 0.556847305582799, 0.22681312307346424, 0.20786198838790892, 0.24235703779322848, 0.21676804886252954, 0.21917944308842796, 0.19208166382115965, 0.21252456885143078, 0.21687665234359133, 0.2065317892185924, 0.6628210814329853, 0.2404728513753751, 0.22090439765844472, 0.2458899265059462, 0.22193855609648316, 0.23887562560367137, 0.19790876416534298, 0.21718592929880476, 0.24406198411825586, 0.18654496231322404, 0.8650647806738097, 0.18545382887365747, 0.817112834833382, 0.19962244405543128, 0.19968517744039782, 0.1423794693616357, 0.8255331455221171, 0.9032090214449877, 0.8537479499529251, 0.7721504230103967, 0.9057296124065435, 0.20991897012730665, 0.7330049243811074, 0.16651946891955172, 0.718935587863314, 0.1536427337493962, 0.2111974155572326, 0.1942613808684891, 0.1698971362184335, 0.17961493671673145, 0.18360970088053385, 0.1858344198418206, 0.19427693142099056, 0.1816477659993212, 0.18973541132574867, 0.18121078093143672, 0.09179724251052523, 0.08963233911414203, 0.0873914724565581, 0.09171449380316465, 0.08534139512533334, 0.0863578598649547, 0.08369610318356713, 0.08344411635456983, 0.09288660332767262]}, "mutation_prompt": null}
{"id": "5910a9e5-c63b-4e97-8101-fd1de6ba227c", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 10 * dim\n        self.population_size = self.initial_population_size\n        self.mutation_f = 0.5\n        self.crossover_prob = 0.7\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim)\n        )\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n        self.best_fitness = np.inf\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        \n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                if self.used_budget >= self.budget:\n                    break\n\n                # Mutation strategy with best individual influence\n                best_idx = np.argmin(self.fitness)\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                \n                # Using dynamic mutation variance based on the current budget usage\n                mutation_variance = 0.1 * (1 - self.used_budget / self.budget)\n                mutant = np.clip(a + self.mutation_f * (b - c) + mutation_variance * (self.population[best_idx] - a), \n                                 self.lower_bound, self.upper_bound)\n                \n                trial = np.copy(self.population[i])\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial[cross_points] = mutant[cross_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.used_budget += 1\n                if trial_fitness < self.fitness[i]:\n                    self.fitness[i] = trial_fitness\n                    self.population[i] = trial\n\n            # Adaptive mechanisms based on improvement\n            current_best = np.min(self.fitness)\n            if self.used_budget > self.budget * 0.5 and self.population_size > self.dim:\n                self.population_size = int(self.initial_population_size / 2)\n\n            # Adaptive mutation factor and crossover probability based on improvement\n            if current_best < self.best_fitness:\n                self.best_fitness = current_best\n                self.mutation_f = 0.4 + 0.3 * np.random.rand()\n                self.crossover_prob = 0.65 + 0.25 * np.random.rand()  # Adjusted range for faster convergence\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.used_budget >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1", "name": "AdaptiveDifferentialEvolution", "description": "Enhanced Differential Evolution with adaptive mutation variance and dynamic crossover rate adjustment based on convergence trends for improved convergence speed.", "configspace": "", "generation": 83, "fitness": 0.3643764083812514, "feedback": "The algorithm AdaptiveDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.36 with standard deviation 0.25.", "error": "", "parent_id": "124e3e19-ced6-4119-8a48-f7cfd8013700", "metadata": {"aucs": [0.8130724649726391, 0.818672915089332, 0.8381843616715267, 0.8280428840139503, 0.8192438057232453, 0.8246930410234848, 0.8302817832141505, 0.8182623401957116, 0.8243882965506191, 0.6580413217370298, 0.6673376342615798, 0.692763664689307, 0.6754548145784303, 0.7007502270730637, 0.6578388887772264, 0.6498163503680805, 0.6657168963680564, 0.6751825761121035, 0.16774445218391265, 0.19879902240175173, 0.17477311761004288, 0.36007120951079474, 0.2207373339358517, 0.14094259281788013, 0.252479340302062, 0.30704150184757695, 0.21379854587601, 0.13409567047246163, 0.1223880089568975, 0.11965986013296004, 0.12983328596760124, 0.1454062712886638, 0.12030691387132575, 0.1518571138439786, 0.13439926270780123, 0.1425355562080498, 0.9477219095195524, 0.9131699247654859, 0.9203293062314435, 0.9125215592267037, 0.9238749631143836, 0.9254097990090866, 0.9320483085262531, 0.9639533103167702, 0.9097512309879358, 0.5707869355295807, 0.5365999604336606, 0.5323935069157852, 0.557340829588892, 0.49764681011835743, 0.5499614877723151, 0.5557485538789546, 0.5588173840582336, 0.5567759414414499, 0.6246629593598415, 0.7174352631128531, 0.6890305561265354, 0.6731092707839321, 0.7531393064254631, 0.5932338150098986, 0.6817611502938931, 0.7270453019669578, 0.6858509585270296, 0.21536398343407104, 0.24348094540545062, 0.23454998331973742, 0.2054641381649961, 0.18246663875637492, 0.17039536518079546, 0.2526642363671465, 0.19174562786505112, 0.2472492187253741, 0.21111705761227695, 0.24825598265207438, 0.25407048621259765, 0.2259550337954115, 0.35993255853762274, 0.17851364561339123, 0.32733977160143324, 0.28982786995805376, 0.2005705471006084, 0.20731270161357207, 0.15404359337098705, 0.19967132782353259, 0.20601207675138755, 0.15311084898107752, 0.21151883666236604, 0.2013461169236863, 0.21902139873351345, 0.23404140727489453, 0.2964839371475787, 0.3265079435803231, 0.3117588836896732, 0.32776288343687054, 0.3175237693682157, 0.3814609720431891, 0.37105279516363066, 0.4586174077731815, 0.4168253968325697, 0.05368128683394757, 0.0816198673758981, 0.05919003070659967, 0.1259508007673421, 0.1381652916524967, 0.1288875626450584, 0.12509206853083066, 0.09829011521591713, 0.13073081906691586, 0.2605643757441417, 0.22403046054357323, 0.24279064293708896, 0.26368565525391663, 0.2506326087245966, 0.2755052962940725, 0.22973533757993658, 0.23379584408677845, 0.21909558102153537, 0.6708770804960822, 0.6190907620191985, 0.6170842196483066, 0.6365953028332709, 0.6771564350332229, 0.627701374839563, 0.6240722247775644, 0.6227469128262411, 0.6462970433214271, 0.1140853800554783, 0.1004023649138076, 0.10580927259159323, 0.11515146006467569, 0.09225138157543766, 0.10294186834785923, 0.09572540071732216, 0.12391223829640152, 0.10212107325700814, 0.17589587311767008, 0.12271005006426783, 0.15054819691838983, 0.14672363981316172, 0.13916215480004923, 0.14550391392874318, 0.14857069009982993, 0.1360562253630997, 0.13621262516280153, 0.45948623439859093, 0.3898293272883583, 0.4307274142993902, 0.4052562521803652, 0.42798312920433557, 0.46039246428515446, 0.47083554069323175, 0.4688348866066534, 0.46153972366983953, 0.3201097459274539, 0.28780842435074794, 0.3145446632612703, 0.31267964359729117, 0.28198899536180677, 0.30114728086316056, 0.301960662729963, 0.3228978691490163, 0.3092899829310718, 0.18218427601823073, 0.2094193091690255, 0.19275064387716534, 0.21088184106276198, 0.20849581946125295, 0.200613442179019, 0.19177525648841176, 0.2105787722709127, 0.24464833427570054, 0.36570275758499593, 0.32467350976450193, 0.35967251325431904, 0.4609015660052175, 0.4850845104335011, 0.42833779987243936, 0.40098756290741333, 0.19759067780183492, 0.35349555043623493, 0.759922673906068, 0.730935055358845, 0.5870573174296609, 0.1941261484273339, 0.6759351535771669, 0.6598324810524012, 0.18180188783003337, 0.6799727166191127, 0.5003362043524298, 0.16562285410219157, 0.20115616451311968, 0.4778945754039633, 0.20330065566033695, 0.6428040490843671, 0.6358883733530732, 0.20712779915628898, 0.15130212343763105, 0.20793767251616646, 0.18452923134889365, 0.18186758449030394, 0.2095477760127078, 0.18084708680626482, 0.18448321182980143, 0.17544731445562578, 0.18204683439644398, 0.19685907394082303, 0.18329501091424938, 0.07652481381674048, 0.07541506020869726, 0.08135382508195088, 0.08124093661160425, 0.08454621210120894, 0.07852410686195599, 0.09251499607502589, 0.07437733772738009, 0.08920568149756203]}, "mutation_prompt": null}
{"id": "8042072e-c719-4c43-bf4a-58eb7c595bc6", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 10 * dim\n        self.population_size = self.initial_population_size\n        self.mutation_f = 0.5\n        self.crossover_prob = 0.7\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim)\n        )\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n        self.best_fitness = np.inf\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        \n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                if self.used_budget >= self.budget:\n                    break\n\n                # Mutation strategy with best individual influence\n                best_idx = np.argmin(self.fitness)\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_f * (b - c) + 0.5 * (self.population[best_idx] - a), \n                                 self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial[cross_points] = mutant[cross_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.used_budget += 1\n                if trial_fitness < self.fitness[i]:\n                    self.fitness[i] = trial_fitness\n                    self.population[i] = trial\n\n            # Adaptive mechanisms based on improvement\n            if self.used_budget > self.budget * 0.5 and self.population_size > self.dim:\n                self.population_size = int(self.initial_population_size / 2)\n\n            # Adaptive mutation factor and crossover probability based on improvement\n            current_best = np.min(self.fitness)\n            if current_best < self.best_fitness:\n                self.best_fitness = current_best\n                self.mutation_f = 0.4 + 0.3 * np.random.rand()\n                self.crossover_prob = 0.6 + 0.3 * np.random.rand()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.used_budget >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1", "name": "AdaptiveDifferentialEvolution", "description": "Improved Adaptive Differential Evolution with enhanced mutation strategies and dynamic adaptation of crossover based on past performance to speed up convergence.", "configspace": "", "generation": 75, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "124e3e19-ced6-4119-8a48-f7cfd8013700", "metadata": {"aucs": [0.8965749757029403, 0.9073667439280245, 0.9052190551643833, 0.8963154813750772, 0.9115615988291847, 0.9000165099269524, 0.9024157376224583, 0.9058782596811673, 0.9060712043547842, 0.8221117102244355, 0.8232384282547296, 0.8096833176378289, 0.803630990814496, 0.8227746737397528, 0.8222458013364699, 0.8112386132053878, 0.8346180171212291, 0.8369087678479824, 0.41198716561255155, 0.5920978069091614, 0.15015965449107405, 0.1748088639911879, 0.15609506022632758, 0.5325033924613658, 0.15627668286079388, 0.4585054294896507, 0.5946415392896547, 0.13622423146287088, 0.1377802431242371, 0.11916070993571737, 0.1146250479460772, 0.14392700532004632, 0.1460130224673596, 0.16198822006143287, 0.6014540953984114, 0.11356813867785209, 0.9329384344433713, 0.9770196181087624, 0.9487994985704654, 0.9513907462862684, 0.964472822577042, 0.9704904651377332, 0.9130385898269285, 0.9699402578061713, 0.9337352387093611, 0.723527843105046, 0.7147726255764233, 0.74267325283519, 0.7402440081693826, 0.7446231934830108, 0.7358515596633222, 0.7096059214455226, 0.7023277357463633, 0.7625048085249216, 0.8469928395624954, 0.8594484863610297, 0.8670179155790334, 0.8548121932813011, 0.8726578471672252, 0.8834351999718991, 0.1768674548432837, 0.9178367551250045, 0.8952240417843911, 0.3830611252157946, 0.5542722690358917, 0.5491701666837667, 0.5507687889648047, 0.13128795069705235, 0.5345615511088906, 0.5148246875804936, 0.501018183037441, 0.4979932285544143, 0.5186298466863517, 0.5080368213946709, 0.4101800469460729, 0.5586339402166425, 0.482268888063793, 0.5673202093857974, 0.20360130360109907, 0.5699763866453263, 0.1937130415492876, 0.4052110696329665, 0.33425731644476897, 0.41890910306894247, 0.499381703208448, 0.380234767684378, 0.37984180219470387, 0.3478875890865665, 0.38585036543104767, 0.4386187142076037, 0.6001574776656289, 0.5569836282401737, 0.5178058119729314, 0.5773145482732891, 0.43572732190804264, 0.5071609662853969, 0.43771385285432574, 0.5779364817882446, 0.5501802509647131, 0.19479435622098062, 0.1059266877099011, 0.2060197071548987, 0.21423146860070696, 0.3116690804764005, 0.37205791991231396, 0.2029316448586126, 0.1488389185105714, 0.12232539547338306, 0.3664727219911077, 0.396578428661433, 0.3625789417794797, 0.36894953698275235, 0.4675407692164947, 0.40816883484227406, 0.33608481306165416, 0.4118782158865578, 0.387910633029219, 0.7653011464421587, 0.7922187309475326, 0.7838298050783412, 0.767189419966823, 0.7322246394440209, 0.7565448302696057, 0.763137151876868, 0.8078232226699613, 0.8090520368682215, 0.13270367602842525, 0.1199860802868623, 0.13557527333499364, 0.14773371975135885, 0.10777868324032769, 0.14837745438243277, 0.12365226330677415, 0.15199037545283756, 0.275100615566482, 0.35548844791768297, 0.1688636577287601, 0.15038647130898464, 0.4538466592432503, 0.1638989838590329, 0.18633195911568923, 0.21056434767497745, 0.130794441937786, 0.3212053086738913, 0.6574400137469547, 0.5516481548561369, 0.6994142267571096, 0.651911608348646, 0.6964614765028034, 0.6427065285404141, 0.5800127977645871, 0.6529228372415743, 0.6695008541446409, 0.2643452718665247, 0.32077069426619487, 0.44889683990275375, 0.5046748678287407, 0.5072097324054746, 0.3820533754063403, 0.24931838540637163, 0.48384867699912304, 0.556847305582799, 0.22681312307346424, 0.20786198838790892, 0.24235703779322848, 0.21676804886252954, 0.21917944308842796, 0.19208166382115965, 0.21252456885143078, 0.21687665234359133, 0.2065317892185924, 0.6628210814329853, 0.2404728513753751, 0.22090439765844472, 0.2458899265059462, 0.22193855609648316, 0.23887562560367137, 0.19790876416534298, 0.21718592929880476, 0.24406198411825586, 0.18654496231322404, 0.8650647806738097, 0.18545382887365747, 0.817112834833382, 0.19962244405543128, 0.19968517744039782, 0.1423794693616357, 0.8255331455221171, 0.9032090214449877, 0.8537479499529251, 0.7721504230103967, 0.9057296124065435, 0.20991897012730665, 0.7330049243811074, 0.16651946891955172, 0.718935587863314, 0.1536427337493962, 0.2111974155572326, 0.1942613808684891, 0.1698971362184335, 0.17961493671673145, 0.18360970088053385, 0.1858344198418206, 0.19427693142099056, 0.1816477659993212, 0.18973541132574867, 0.18121078093143672, 0.09179724251052523, 0.08963233911414203, 0.0873914724565581, 0.09171449380316465, 0.08534139512533334, 0.0863578598649547, 0.08369610318356713, 0.08344411635456983, 0.09288660332767262]}, "mutation_prompt": null}
{"id": "4e5e05c7-aba0-45ba-9d7f-33e3e128b5d3", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 10 * dim\n        self.population_size = self.initial_population_size\n        self.mutation_f = 0.5\n        self.crossover_prob = 0.7\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim)\n        )\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n        self.best_fitness = np.inf\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        \n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                if self.used_budget >= self.budget:\n                    break\n\n                # Mutation strategy with best individual influence\n                best_idx = np.argmin(self.fitness)\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_f * (b - c) + 0.5 * (self.population[best_idx] - a), \n                                 self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial[cross_points] = mutant[cross_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.used_budget += 1\n                if trial_fitness < self.fitness[i]:\n                    self.fitness[i] = trial_fitness\n                    self.population[i] = trial\n\n            # Adaptive mechanisms based on improvement\n            if self.used_budget > self.budget * 0.5 and self.population_size > self.dim:\n                self.population_size = int(self.initial_population_size / 2)\n\n            # Adaptive mutation factor and crossover probability based on improvement\n            current_best = np.min(self.fitness)\n            if current_best < self.best_fitness:\n                self.best_fitness = current_best\n                self.mutation_f = 0.4 + 0.3 * np.random.rand()\n                self.crossover_prob = 0.6 + 0.3 * np.random.rand()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.used_budget >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1", "name": "AdaptiveDifferentialEvolution", "description": "Improved Adaptive Differential Evolution with enhanced mutation strategies and dynamic adaptation of crossover based on past performance to speed up convergence.", "configspace": "", "generation": 75, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "124e3e19-ced6-4119-8a48-f7cfd8013700", "metadata": {"aucs": [0.8965749757029403, 0.9073667439280245, 0.9052190551643833, 0.8963154813750772, 0.9115615988291847, 0.9000165099269524, 0.9024157376224583, 0.9058782596811673, 0.9060712043547842, 0.8221117102244355, 0.8232384282547296, 0.8096833176378289, 0.803630990814496, 0.8227746737397528, 0.8222458013364699, 0.8112386132053878, 0.8346180171212291, 0.8369087678479824, 0.41198716561255155, 0.5920978069091614, 0.15015965449107405, 0.1748088639911879, 0.15609506022632758, 0.5325033924613658, 0.15627668286079388, 0.4585054294896507, 0.5946415392896547, 0.13622423146287088, 0.1377802431242371, 0.11916070993571737, 0.1146250479460772, 0.14392700532004632, 0.1460130224673596, 0.16198822006143287, 0.6014540953984114, 0.11356813867785209, 0.9329384344433713, 0.9770196181087624, 0.9487994985704654, 0.9513907462862684, 0.964472822577042, 0.9704904651377332, 0.9130385898269285, 0.9699402578061713, 0.9337352387093611, 0.723527843105046, 0.7147726255764233, 0.74267325283519, 0.7402440081693826, 0.7446231934830108, 0.7358515596633222, 0.7096059214455226, 0.7023277357463633, 0.7625048085249216, 0.8469928395624954, 0.8594484863610297, 0.8670179155790334, 0.8548121932813011, 0.8726578471672252, 0.8834351999718991, 0.1768674548432837, 0.9178367551250045, 0.8952240417843911, 0.3830611252157946, 0.5542722690358917, 0.5491701666837667, 0.5507687889648047, 0.13128795069705235, 0.5345615511088906, 0.5148246875804936, 0.501018183037441, 0.4979932285544143, 0.5186298466863517, 0.5080368213946709, 0.4101800469460729, 0.5586339402166425, 0.482268888063793, 0.5673202093857974, 0.20360130360109907, 0.5699763866453263, 0.1937130415492876, 0.4052110696329665, 0.33425731644476897, 0.41890910306894247, 0.499381703208448, 0.380234767684378, 0.37984180219470387, 0.3478875890865665, 0.38585036543104767, 0.4386187142076037, 0.6001574776656289, 0.5569836282401737, 0.5178058119729314, 0.5773145482732891, 0.43572732190804264, 0.5071609662853969, 0.43771385285432574, 0.5779364817882446, 0.5501802509647131, 0.19479435622098062, 0.1059266877099011, 0.2060197071548987, 0.21423146860070696, 0.3116690804764005, 0.37205791991231396, 0.2029316448586126, 0.1488389185105714, 0.12232539547338306, 0.3664727219911077, 0.396578428661433, 0.3625789417794797, 0.36894953698275235, 0.4675407692164947, 0.40816883484227406, 0.33608481306165416, 0.4118782158865578, 0.387910633029219, 0.7653011464421587, 0.7922187309475326, 0.7838298050783412, 0.767189419966823, 0.7322246394440209, 0.7565448302696057, 0.763137151876868, 0.8078232226699613, 0.8090520368682215, 0.13270367602842525, 0.1199860802868623, 0.13557527333499364, 0.14773371975135885, 0.10777868324032769, 0.14837745438243277, 0.12365226330677415, 0.15199037545283756, 0.275100615566482, 0.35548844791768297, 0.1688636577287601, 0.15038647130898464, 0.4538466592432503, 0.1638989838590329, 0.18633195911568923, 0.21056434767497745, 0.130794441937786, 0.3212053086738913, 0.6574400137469547, 0.5516481548561369, 0.6994142267571096, 0.651911608348646, 0.6964614765028034, 0.6427065285404141, 0.5800127977645871, 0.6529228372415743, 0.6695008541446409, 0.2643452718665247, 0.32077069426619487, 0.44889683990275375, 0.5046748678287407, 0.5072097324054746, 0.3820533754063403, 0.24931838540637163, 0.48384867699912304, 0.556847305582799, 0.22681312307346424, 0.20786198838790892, 0.24235703779322848, 0.21676804886252954, 0.21917944308842796, 0.19208166382115965, 0.21252456885143078, 0.21687665234359133, 0.2065317892185924, 0.6628210814329853, 0.2404728513753751, 0.22090439765844472, 0.2458899265059462, 0.22193855609648316, 0.23887562560367137, 0.19790876416534298, 0.21718592929880476, 0.24406198411825586, 0.18654496231322404, 0.8650647806738097, 0.18545382887365747, 0.817112834833382, 0.19962244405543128, 0.19968517744039782, 0.1423794693616357, 0.8255331455221171, 0.9032090214449877, 0.8537479499529251, 0.7721504230103967, 0.9057296124065435, 0.20991897012730665, 0.7330049243811074, 0.16651946891955172, 0.718935587863314, 0.1536427337493962, 0.2111974155572326, 0.1942613808684891, 0.1698971362184335, 0.17961493671673145, 0.18360970088053385, 0.1858344198418206, 0.19427693142099056, 0.1816477659993212, 0.18973541132574867, 0.18121078093143672, 0.09179724251052523, 0.08963233911414203, 0.0873914724565581, 0.09171449380316465, 0.08534139512533334, 0.0863578598649547, 0.08369610318356713, 0.08344411635456983, 0.09288660332767262]}, "mutation_prompt": null}
{"id": "7595db56-863c-4040-88ee-3df18abdbc8e", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 10 * dim\n        self.population_size = self.initial_population_size\n        self.mutation_f = 0.5\n        self.crossover_prob = 0.7\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim)\n        )\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n        self.best_fitness = np.inf\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        \n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                if self.used_budget >= self.budget:\n                    break\n\n                # Mutation strategy with best individual influence\n                best_idx = np.argmin(self.fitness)\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_f * (b - c) + 0.5 * (self.population[best_idx] - a), \n                                 self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial[cross_points] = mutant[cross_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.used_budget += 1\n                if trial_fitness < self.fitness[i]:\n                    self.fitness[i] = trial_fitness\n                    self.population[i] = trial\n\n            # Adaptive mechanisms based on improvement\n            if self.used_budget > self.budget * 0.5 and self.population_size > self.dim:\n                self.population_size = int(self.initial_population_size / 2)\n\n            # Adaptive mutation factor and crossover probability based on improvement\n            current_best = np.min(self.fitness)\n            if current_best < self.best_fitness:\n                self.best_fitness = current_best\n                self.mutation_f = 0.4 + 0.3 * np.random.rand()\n                self.crossover_prob = 0.6 + 0.3 * np.random.rand()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.used_budget >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1", "name": "AdaptiveDifferentialEvolution", "description": "Improved Adaptive Differential Evolution with enhanced mutation strategies and dynamic adaptation of crossover based on past performance to speed up convergence.", "configspace": "", "generation": 75, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "124e3e19-ced6-4119-8a48-f7cfd8013700", "metadata": {"aucs": [0.8965749757029403, 0.9073667439280245, 0.9052190551643833, 0.8963154813750772, 0.9115615988291847, 0.9000165099269524, 0.9024157376224583, 0.9058782596811673, 0.9060712043547842, 0.8221117102244355, 0.8232384282547296, 0.8096833176378289, 0.803630990814496, 0.8227746737397528, 0.8222458013364699, 0.8112386132053878, 0.8346180171212291, 0.8369087678479824, 0.41198716561255155, 0.5920978069091614, 0.15015965449107405, 0.1748088639911879, 0.15609506022632758, 0.5325033924613658, 0.15627668286079388, 0.4585054294896507, 0.5946415392896547, 0.13622423146287088, 0.1377802431242371, 0.11916070993571737, 0.1146250479460772, 0.14392700532004632, 0.1460130224673596, 0.16198822006143287, 0.6014540953984114, 0.11356813867785209, 0.9329384344433713, 0.9770196181087624, 0.9487994985704654, 0.9513907462862684, 0.964472822577042, 0.9704904651377332, 0.9130385898269285, 0.9699402578061713, 0.9337352387093611, 0.723527843105046, 0.7147726255764233, 0.74267325283519, 0.7402440081693826, 0.7446231934830108, 0.7358515596633222, 0.7096059214455226, 0.7023277357463633, 0.7625048085249216, 0.8469928395624954, 0.8594484863610297, 0.8670179155790334, 0.8548121932813011, 0.8726578471672252, 0.8834351999718991, 0.1768674548432837, 0.9178367551250045, 0.8952240417843911, 0.3830611252157946, 0.5542722690358917, 0.5491701666837667, 0.5507687889648047, 0.13128795069705235, 0.5345615511088906, 0.5148246875804936, 0.501018183037441, 0.4979932285544143, 0.5186298466863517, 0.5080368213946709, 0.4101800469460729, 0.5586339402166425, 0.482268888063793, 0.5673202093857974, 0.20360130360109907, 0.5699763866453263, 0.1937130415492876, 0.4052110696329665, 0.33425731644476897, 0.41890910306894247, 0.499381703208448, 0.380234767684378, 0.37984180219470387, 0.3478875890865665, 0.38585036543104767, 0.4386187142076037, 0.6001574776656289, 0.5569836282401737, 0.5178058119729314, 0.5773145482732891, 0.43572732190804264, 0.5071609662853969, 0.43771385285432574, 0.5779364817882446, 0.5501802509647131, 0.19479435622098062, 0.1059266877099011, 0.2060197071548987, 0.21423146860070696, 0.3116690804764005, 0.37205791991231396, 0.2029316448586126, 0.1488389185105714, 0.12232539547338306, 0.3664727219911077, 0.396578428661433, 0.3625789417794797, 0.36894953698275235, 0.4675407692164947, 0.40816883484227406, 0.33608481306165416, 0.4118782158865578, 0.387910633029219, 0.7653011464421587, 0.7922187309475326, 0.7838298050783412, 0.767189419966823, 0.7322246394440209, 0.7565448302696057, 0.763137151876868, 0.8078232226699613, 0.8090520368682215, 0.13270367602842525, 0.1199860802868623, 0.13557527333499364, 0.14773371975135885, 0.10777868324032769, 0.14837745438243277, 0.12365226330677415, 0.15199037545283756, 0.275100615566482, 0.35548844791768297, 0.1688636577287601, 0.15038647130898464, 0.4538466592432503, 0.1638989838590329, 0.18633195911568923, 0.21056434767497745, 0.130794441937786, 0.3212053086738913, 0.6574400137469547, 0.5516481548561369, 0.6994142267571096, 0.651911608348646, 0.6964614765028034, 0.6427065285404141, 0.5800127977645871, 0.6529228372415743, 0.6695008541446409, 0.2643452718665247, 0.32077069426619487, 0.44889683990275375, 0.5046748678287407, 0.5072097324054746, 0.3820533754063403, 0.24931838540637163, 0.48384867699912304, 0.556847305582799, 0.22681312307346424, 0.20786198838790892, 0.24235703779322848, 0.21676804886252954, 0.21917944308842796, 0.19208166382115965, 0.21252456885143078, 0.21687665234359133, 0.2065317892185924, 0.6628210814329853, 0.2404728513753751, 0.22090439765844472, 0.2458899265059462, 0.22193855609648316, 0.23887562560367137, 0.19790876416534298, 0.21718592929880476, 0.24406198411825586, 0.18654496231322404, 0.8650647806738097, 0.18545382887365747, 0.817112834833382, 0.19962244405543128, 0.19968517744039782, 0.1423794693616357, 0.8255331455221171, 0.9032090214449877, 0.8537479499529251, 0.7721504230103967, 0.9057296124065435, 0.20991897012730665, 0.7330049243811074, 0.16651946891955172, 0.718935587863314, 0.1536427337493962, 0.2111974155572326, 0.1942613808684891, 0.1698971362184335, 0.17961493671673145, 0.18360970088053385, 0.1858344198418206, 0.19427693142099056, 0.1816477659993212, 0.18973541132574867, 0.18121078093143672, 0.09179724251052523, 0.08963233911414203, 0.0873914724565581, 0.09171449380316465, 0.08534139512533334, 0.0863578598649547, 0.08369610318356713, 0.08344411635456983, 0.09288660332767262]}, "mutation_prompt": null}
{"id": "27146796-107c-43be-a1bd-e6e5ce3d8568", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 10 * dim\n        self.population_size = self.initial_population_size\n        self.mutation_f = 0.5\n        self.crossover_prob = 0.7\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim)\n        )\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n        self.best_fitness = np.inf\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        \n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                if self.used_budget >= self.budget:\n                    break\n\n                # Mutation strategy with best individual influence\n                best_idx = np.argmin(self.fitness)\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_f * (b - c) + 0.5 * (self.population[best_idx] - a), \n                                 self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial[cross_points] = mutant[cross_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.used_budget += 1\n                if trial_fitness < self.fitness[i]:\n                    self.fitness[i] = trial_fitness\n                    self.population[i] = trial\n\n            # Adaptive mechanisms based on improvement\n            if self.used_budget > self.budget * 0.5 and self.population_size > self.dim:\n                self.population_size = int(self.initial_population_size / 2)\n\n            # Adaptive mutation factor and crossover probability based on improvement\n            current_best = np.min(self.fitness)\n            if current_best < self.best_fitness:\n                self.best_fitness = current_best\n                self.mutation_f = 0.4 + 0.3 * np.random.rand()\n                self.crossover_prob = 0.6 + 0.3 * np.random.rand()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.used_budget >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1", "name": "AdaptiveDifferentialEvolution", "description": "Improved Adaptive Differential Evolution with enhanced mutation strategies and dynamic adaptation of crossover based on past performance to speed up convergence.", "configspace": "", "generation": 75, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "124e3e19-ced6-4119-8a48-f7cfd8013700", "metadata": {"aucs": [0.8965749757029403, 0.9073667439280245, 0.9052190551643833, 0.8963154813750772, 0.9115615988291847, 0.9000165099269524, 0.9024157376224583, 0.9058782596811673, 0.9060712043547842, 0.8221117102244355, 0.8232384282547296, 0.8096833176378289, 0.803630990814496, 0.8227746737397528, 0.8222458013364699, 0.8112386132053878, 0.8346180171212291, 0.8369087678479824, 0.41198716561255155, 0.5920978069091614, 0.15015965449107405, 0.1748088639911879, 0.15609506022632758, 0.5325033924613658, 0.15627668286079388, 0.4585054294896507, 0.5946415392896547, 0.13622423146287088, 0.1377802431242371, 0.11916070993571737, 0.1146250479460772, 0.14392700532004632, 0.1460130224673596, 0.16198822006143287, 0.6014540953984114, 0.11356813867785209, 0.9329384344433713, 0.9770196181087624, 0.9487994985704654, 0.9513907462862684, 0.964472822577042, 0.9704904651377332, 0.9130385898269285, 0.9699402578061713, 0.9337352387093611, 0.723527843105046, 0.7147726255764233, 0.74267325283519, 0.7402440081693826, 0.7446231934830108, 0.7358515596633222, 0.7096059214455226, 0.7023277357463633, 0.7625048085249216, 0.8469928395624954, 0.8594484863610297, 0.8670179155790334, 0.8548121932813011, 0.8726578471672252, 0.8834351999718991, 0.1768674548432837, 0.9178367551250045, 0.8952240417843911, 0.3830611252157946, 0.5542722690358917, 0.5491701666837667, 0.5507687889648047, 0.13128795069705235, 0.5345615511088906, 0.5148246875804936, 0.501018183037441, 0.4979932285544143, 0.5186298466863517, 0.5080368213946709, 0.4101800469460729, 0.5586339402166425, 0.482268888063793, 0.5673202093857974, 0.20360130360109907, 0.5699763866453263, 0.1937130415492876, 0.4052110696329665, 0.33425731644476897, 0.41890910306894247, 0.499381703208448, 0.380234767684378, 0.37984180219470387, 0.3478875890865665, 0.38585036543104767, 0.4386187142076037, 0.6001574776656289, 0.5569836282401737, 0.5178058119729314, 0.5773145482732891, 0.43572732190804264, 0.5071609662853969, 0.43771385285432574, 0.5779364817882446, 0.5501802509647131, 0.19479435622098062, 0.1059266877099011, 0.2060197071548987, 0.21423146860070696, 0.3116690804764005, 0.37205791991231396, 0.2029316448586126, 0.1488389185105714, 0.12232539547338306, 0.3664727219911077, 0.396578428661433, 0.3625789417794797, 0.36894953698275235, 0.4675407692164947, 0.40816883484227406, 0.33608481306165416, 0.4118782158865578, 0.387910633029219, 0.7653011464421587, 0.7922187309475326, 0.7838298050783412, 0.767189419966823, 0.7322246394440209, 0.7565448302696057, 0.763137151876868, 0.8078232226699613, 0.8090520368682215, 0.13270367602842525, 0.1199860802868623, 0.13557527333499364, 0.14773371975135885, 0.10777868324032769, 0.14837745438243277, 0.12365226330677415, 0.15199037545283756, 0.275100615566482, 0.35548844791768297, 0.1688636577287601, 0.15038647130898464, 0.4538466592432503, 0.1638989838590329, 0.18633195911568923, 0.21056434767497745, 0.130794441937786, 0.3212053086738913, 0.6574400137469547, 0.5516481548561369, 0.6994142267571096, 0.651911608348646, 0.6964614765028034, 0.6427065285404141, 0.5800127977645871, 0.6529228372415743, 0.6695008541446409, 0.2643452718665247, 0.32077069426619487, 0.44889683990275375, 0.5046748678287407, 0.5072097324054746, 0.3820533754063403, 0.24931838540637163, 0.48384867699912304, 0.556847305582799, 0.22681312307346424, 0.20786198838790892, 0.24235703779322848, 0.21676804886252954, 0.21917944308842796, 0.19208166382115965, 0.21252456885143078, 0.21687665234359133, 0.2065317892185924, 0.6628210814329853, 0.2404728513753751, 0.22090439765844472, 0.2458899265059462, 0.22193855609648316, 0.23887562560367137, 0.19790876416534298, 0.21718592929880476, 0.24406198411825586, 0.18654496231322404, 0.8650647806738097, 0.18545382887365747, 0.817112834833382, 0.19962244405543128, 0.19968517744039782, 0.1423794693616357, 0.8255331455221171, 0.9032090214449877, 0.8537479499529251, 0.7721504230103967, 0.9057296124065435, 0.20991897012730665, 0.7330049243811074, 0.16651946891955172, 0.718935587863314, 0.1536427337493962, 0.2111974155572326, 0.1942613808684891, 0.1698971362184335, 0.17961493671673145, 0.18360970088053385, 0.1858344198418206, 0.19427693142099056, 0.1816477659993212, 0.18973541132574867, 0.18121078093143672, 0.09179724251052523, 0.08963233911414203, 0.0873914724565581, 0.09171449380316465, 0.08534139512533334, 0.0863578598649547, 0.08369610318356713, 0.08344411635456983, 0.09288660332767262]}, "mutation_prompt": null}
{"id": "c52ad205-4d35-48d2-9b37-6225f0bb8b3c", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 10 * dim\n        self.population_size = self.initial_population_size\n        self.mutation_f = 0.5\n        self.crossover_prob = 0.7\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim)\n        )\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n        self.best_fitness = np.inf\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        \n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                if self.used_budget >= self.budget:\n                    break\n\n                # Mutation strategy with best individual influence\n                best_idx = np.argmin(self.fitness)\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                scaling_factor = 1.0 + 0.1 * np.random.rand()  # Dynamic mutation scaling\n                mutant = np.clip(a + self.mutation_f * (b - c) * scaling_factor + 0.5 * (self.population[best_idx] - a), \n                                 self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial[cross_points] = mutant[cross_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.used_budget += 1\n                if trial_fitness < self.fitness[i]:\n                    self.fitness[i] = trial_fitness\n                    self.population[i] = trial\n\n            # Adaptive mechanisms based on improvement\n            if self.used_budget > self.budget * 0.6:  # Earlier population reduction\n                self.population_size = max(int(self.population_size * 0.9), self.dim)\n\n            # Adaptive mutation factor and crossover probability based on improvement\n            current_best = np.min(self.fitness)\n            if current_best < self.best_fitness:\n                self.best_fitness = current_best\n                self.mutation_f = 0.4 + 0.3 * np.random.rand()\n                self.crossover_prob = 0.6 + 0.3 * np.random.rand()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.used_budget >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with dynamic mutation scaling and adaptive population reduction to improve convergence speed.", "configspace": "", "generation": 88, "fitness": 0.44203197044910597, "feedback": "The algorithm EnhancedAdaptiveDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.44 with standard deviation 0.28.", "error": "", "parent_id": "124e3e19-ced6-4119-8a48-f7cfd8013700", "metadata": {"aucs": [0.898654201364621, 0.8823568187530504, 0.8885342171362292, 0.897745380133311, 0.8922976349881783, 0.8889265745630032, 0.8934163733218268, 0.8898813907025726, 0.8959966674572413, 0.80013785783466, 0.7867619513274853, 0.7919227952430041, 0.7951377037782132, 0.7864530486429444, 0.8081805818085237, 0.810040316256543, 0.7941596539878126, 0.775297555471935, 0.548035813218539, 0.24224518278521634, 0.5590288826759947, 0.4652028572324385, 0.24960828857108486, 0.5346714803486406, 0.1673457320786258, 0.5275784569588305, 0.6021442799743435, 0.19681284528558196, 0.1333090713156, 0.15367738279010668, 0.1370026485310767, 0.11675312289981699, 0.12268190312580829, 0.14761816156785768, 0.14979886313395452, 0.13900376324882435, 0.962948375140776, 0.9417211800873728, 0.9669083449689911, 0.9445395727028989, 0.973252195532656, 0.9696939204385422, 0.9594663107567465, 0.9713218572435044, 0.9587996959739522, 0.6862338500414731, 0.6805176460607604, 0.7121400836433165, 0.7218661023511517, 0.6449047065879838, 0.6740961873257587, 0.6978402975155725, 0.6105820622086988, 0.6642562610440484, 0.8502596373244475, 0.7591335110752269, 0.802013099468122, 0.8886626089017023, 0.828785971598559, 0.2727543402098914, 0.8042172171191307, 0.8332450072671488, 0.8373029539112132, 0.60322268409319, 0.4643192006465273, 0.5115694718216051, 0.13066861352449455, 0.35995959623659235, 0.4570201696204895, 0.4368924037253008, 0.38338931687257116, 0.3608316021428123, 0.39552051910253916, 0.3770680459590572, 0.5104867309126186, 0.5056337701193925, 0.13224216287356516, 0.37734852215586967, 0.3573312633825544, 0.4895048727429253, 0.2726641842832791, 0.35251302363788606, 0.3031511661653583, 0.21680468534650754, 0.22087556974084932, 0.38800938955123243, 0.3217963300600444, 0.41530536014236197, 0.23600839279507313, 0.3268330570228821, 0.5126515634851805, 0.35116613505233063, 0.501803331156663, 0.32586249641065523, 0.32590692787235787, 0.4521553395365717, 0.4914217421056405, 0.4128103922950358, 0.4406813217027722, 0.05122504193314159, 0.16210103876396476, 0.08603096686356182, 0.2416386671881986, 0.1245688567809542, 0.17848652703072043, 0.1247491280653068, 0.257139863627431, 0.1695284112433625, 0.3026960179794501, 0.30817199072135737, 0.2977507477700715, 0.3299711387446914, 0.341633835843126, 0.36069910356957846, 0.3949531815413747, 0.2845939020448206, 0.33950625056824324, 0.7034829099006454, 0.7739676971066108, 0.7281351129894174, 0.6920032354283997, 0.7165465846128334, 0.734880035856975, 0.7625862793301389, 0.6973596965104624, 0.7575706519752169, 0.13603176952772378, 0.13910268992800956, 0.10076292658468355, 0.12880007577681263, 0.09952381994585446, 0.1099677615935376, 0.13583602833587427, 0.1412539883836451, 0.12052530774016779, 0.14391899907086136, 0.18836467634028808, 0.1459712222370534, 0.15279487113206558, 0.13498984502835976, 0.203269077800187, 0.18769495961591698, 0.1581564164926207, 0.13865781375800013, 0.5080618321657611, 0.4675632358089521, 0.4989452023924986, 0.6054530357543915, 0.5209407856658932, 0.5810178426695086, 0.6425715149829063, 0.6295721024057264, 0.5784638796735078, 0.42101765484166276, 0.32190493324979474, 0.45684165220845085, 0.379140731847584, 0.31215661340705214, 0.381471969224807, 0.2090086258324112, 0.4591715806304867, 0.40315341284929473, 0.23745058952801057, 0.22357923473187358, 0.20928004288939628, 0.20612495364428574, 0.24114013943091928, 0.2046027431918932, 0.20398520030647593, 0.21078226598453975, 0.19499596712215017, 0.2245833754272829, 0.23615801554182758, 0.7112676896629635, 0.23221389172725782, 0.5654842387929266, 0.23873610781138088, 0.21621920950360785, 0.639522020885164, 0.6937035964279452, 0.1769900955152922, 0.8812274505613158, 0.15191678897601602, 0.8291756239576822, 0.1993720304982638, 0.8827115865603627, 0.8322775961065014, 0.788968372472535, 0.8105011273776519, 0.8765910372330264, 0.21009606639222422, 0.7420690870972787, 0.8189124415726418, 0.211093370841257, 0.16727538516755536, 0.2096427391434631, 0.7836982824327292, 0.14837365272913117, 0.21360124431963046, 0.17707127122817934, 0.1983514026051928, 0.17141931767107088, 0.1836303501689711, 0.17845366714404376, 0.18752576312932856, 0.1964851855895281, 0.1960133112240735, 0.08261996888989165, 0.11070612450926909, 0.08724407179851823, 0.09038025456024623, 0.09022087322290351, 0.08059664269195022, 0.08261517061615609, 0.08897906045661852, 0.0809023817361374]}, "mutation_prompt": null}
{"id": "0221e3b3-481c-41a5-85f5-e5f4829a5801", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 10 * dim\n        self.population_size = self.initial_population_size\n        self.mutation_f = 0.5\n        self.crossover_prob = 0.7\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim)\n        )\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n        self.best_fitness = np.inf\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        \n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                if self.used_budget >= self.budget:\n                    break\n\n                # Mutation strategy with best individual influence\n                best_idx = np.argmin(self.fitness)\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_f * (b - c) + 0.5 * (self.population[best_idx] - a), \n                                 self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial[cross_points] = mutant[cross_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.used_budget += 1\n                if trial_fitness < self.fitness[i]:\n                    self.fitness[i] = trial_fitness\n                    self.population[i] = trial\n\n            # Adaptive mechanisms based on improvement\n            if self.used_budget > self.budget * 0.5 and self.population_size > self.dim:\n                self.population_size = int(self.initial_population_size / 2)\n\n            # Adaptive mutation factor and crossover probability based on improvement\n            current_best = np.min(self.fitness)\n            if current_best < self.best_fitness:\n                self.best_fitness = current_best\n                self.mutation_f = 0.4 + 0.3 * np.random.rand()\n                self.crossover_prob = 0.6 + 0.3 * np.random.rand()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.used_budget >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1", "name": "AdaptiveDifferentialEvolution", "description": "Improved Adaptive Differential Evolution with enhanced mutation strategies and dynamic adaptation of crossover based on past performance to speed up convergence.", "configspace": "", "generation": 75, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "124e3e19-ced6-4119-8a48-f7cfd8013700", "metadata": {"aucs": [0.8965749757029403, 0.9073667439280245, 0.9052190551643833, 0.8963154813750772, 0.9115615988291847, 0.9000165099269524, 0.9024157376224583, 0.9058782596811673, 0.9060712043547842, 0.8221117102244355, 0.8232384282547296, 0.8096833176378289, 0.803630990814496, 0.8227746737397528, 0.8222458013364699, 0.8112386132053878, 0.8346180171212291, 0.8369087678479824, 0.41198716561255155, 0.5920978069091614, 0.15015965449107405, 0.1748088639911879, 0.15609506022632758, 0.5325033924613658, 0.15627668286079388, 0.4585054294896507, 0.5946415392896547, 0.13622423146287088, 0.1377802431242371, 0.11916070993571737, 0.1146250479460772, 0.14392700532004632, 0.1460130224673596, 0.16198822006143287, 0.6014540953984114, 0.11356813867785209, 0.9329384344433713, 0.9770196181087624, 0.9487994985704654, 0.9513907462862684, 0.964472822577042, 0.9704904651377332, 0.9130385898269285, 0.9699402578061713, 0.9337352387093611, 0.723527843105046, 0.7147726255764233, 0.74267325283519, 0.7402440081693826, 0.7446231934830108, 0.7358515596633222, 0.7096059214455226, 0.7023277357463633, 0.7625048085249216, 0.8469928395624954, 0.8594484863610297, 0.8670179155790334, 0.8548121932813011, 0.8726578471672252, 0.8834351999718991, 0.1768674548432837, 0.9178367551250045, 0.8952240417843911, 0.3830611252157946, 0.5542722690358917, 0.5491701666837667, 0.5507687889648047, 0.13128795069705235, 0.5345615511088906, 0.5148246875804936, 0.501018183037441, 0.4979932285544143, 0.5186298466863517, 0.5080368213946709, 0.4101800469460729, 0.5586339402166425, 0.482268888063793, 0.5673202093857974, 0.20360130360109907, 0.5699763866453263, 0.1937130415492876, 0.4052110696329665, 0.33425731644476897, 0.41890910306894247, 0.499381703208448, 0.380234767684378, 0.37984180219470387, 0.3478875890865665, 0.38585036543104767, 0.4386187142076037, 0.6001574776656289, 0.5569836282401737, 0.5178058119729314, 0.5773145482732891, 0.43572732190804264, 0.5071609662853969, 0.43771385285432574, 0.5779364817882446, 0.5501802509647131, 0.19479435622098062, 0.1059266877099011, 0.2060197071548987, 0.21423146860070696, 0.3116690804764005, 0.37205791991231396, 0.2029316448586126, 0.1488389185105714, 0.12232539547338306, 0.3664727219911077, 0.396578428661433, 0.3625789417794797, 0.36894953698275235, 0.4675407692164947, 0.40816883484227406, 0.33608481306165416, 0.4118782158865578, 0.387910633029219, 0.7653011464421587, 0.7922187309475326, 0.7838298050783412, 0.767189419966823, 0.7322246394440209, 0.7565448302696057, 0.763137151876868, 0.8078232226699613, 0.8090520368682215, 0.13270367602842525, 0.1199860802868623, 0.13557527333499364, 0.14773371975135885, 0.10777868324032769, 0.14837745438243277, 0.12365226330677415, 0.15199037545283756, 0.275100615566482, 0.35548844791768297, 0.1688636577287601, 0.15038647130898464, 0.4538466592432503, 0.1638989838590329, 0.18633195911568923, 0.21056434767497745, 0.130794441937786, 0.3212053086738913, 0.6574400137469547, 0.5516481548561369, 0.6994142267571096, 0.651911608348646, 0.6964614765028034, 0.6427065285404141, 0.5800127977645871, 0.6529228372415743, 0.6695008541446409, 0.2643452718665247, 0.32077069426619487, 0.44889683990275375, 0.5046748678287407, 0.5072097324054746, 0.3820533754063403, 0.24931838540637163, 0.48384867699912304, 0.556847305582799, 0.22681312307346424, 0.20786198838790892, 0.24235703779322848, 0.21676804886252954, 0.21917944308842796, 0.19208166382115965, 0.21252456885143078, 0.21687665234359133, 0.2065317892185924, 0.6628210814329853, 0.2404728513753751, 0.22090439765844472, 0.2458899265059462, 0.22193855609648316, 0.23887562560367137, 0.19790876416534298, 0.21718592929880476, 0.24406198411825586, 0.18654496231322404, 0.8650647806738097, 0.18545382887365747, 0.817112834833382, 0.19962244405543128, 0.19968517744039782, 0.1423794693616357, 0.8255331455221171, 0.9032090214449877, 0.8537479499529251, 0.7721504230103967, 0.9057296124065435, 0.20991897012730665, 0.7330049243811074, 0.16651946891955172, 0.718935587863314, 0.1536427337493962, 0.2111974155572326, 0.1942613808684891, 0.1698971362184335, 0.17961493671673145, 0.18360970088053385, 0.1858344198418206, 0.19427693142099056, 0.1816477659993212, 0.18973541132574867, 0.18121078093143672, 0.09179724251052523, 0.08963233911414203, 0.0873914724565581, 0.09171449380316465, 0.08534139512533334, 0.0863578598649547, 0.08369610318356713, 0.08344411635456983, 0.09288660332767262]}, "mutation_prompt": null}
{"id": "28e6a4e3-4b2c-43c2-8201-cbecc20be76a", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 10 * dim\n        self.population_size = self.initial_population_size\n        self.mutation_f = 0.5\n        self.crossover_prob = 0.7\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim)\n        )\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n        self.best_fitness = np.inf\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        \n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                if self.used_budget >= self.budget:\n                    break\n\n                # Mutation strategy with best individual influence\n                best_idx = np.argmin(self.fitness)\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_f * (b - c) + 0.5 * (self.population[best_idx] - a), \n                                 self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial[cross_points] = mutant[cross_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.used_budget += 1\n                if trial_fitness < self.fitness[i]:\n                    self.fitness[i] = trial_fitness\n                    self.population[i] = trial\n\n            # Adaptive mechanisms based on improvement\n            if self.used_budget > self.budget * 0.5 and self.population_size > self.dim:\n                self.population_size = int(self.initial_population_size / 2)\n\n            # Adaptive mutation factor and crossover probability based on improvement\n            current_best = np.min(self.fitness)\n            if current_best < self.best_fitness:\n                self.best_fitness = current_best\n                self.mutation_f = 0.4 + 0.3 * np.random.rand()\n                self.crossover_prob = 0.6 + 0.3 * np.random.rand()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.used_budget >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1", "name": "AdaptiveDifferentialEvolution", "description": "Improved Adaptive Differential Evolution with enhanced mutation strategies and dynamic adaptation of crossover based on past performance to speed up convergence.", "configspace": "", "generation": 75, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "124e3e19-ced6-4119-8a48-f7cfd8013700", "metadata": {"aucs": [0.8965749757029403, 0.9073667439280245, 0.9052190551643833, 0.8963154813750772, 0.9115615988291847, 0.9000165099269524, 0.9024157376224583, 0.9058782596811673, 0.9060712043547842, 0.8221117102244355, 0.8232384282547296, 0.8096833176378289, 0.803630990814496, 0.8227746737397528, 0.8222458013364699, 0.8112386132053878, 0.8346180171212291, 0.8369087678479824, 0.41198716561255155, 0.5920978069091614, 0.15015965449107405, 0.1748088639911879, 0.15609506022632758, 0.5325033924613658, 0.15627668286079388, 0.4585054294896507, 0.5946415392896547, 0.13622423146287088, 0.1377802431242371, 0.11916070993571737, 0.1146250479460772, 0.14392700532004632, 0.1460130224673596, 0.16198822006143287, 0.6014540953984114, 0.11356813867785209, 0.9329384344433713, 0.9770196181087624, 0.9487994985704654, 0.9513907462862684, 0.964472822577042, 0.9704904651377332, 0.9130385898269285, 0.9699402578061713, 0.9337352387093611, 0.723527843105046, 0.7147726255764233, 0.74267325283519, 0.7402440081693826, 0.7446231934830108, 0.7358515596633222, 0.7096059214455226, 0.7023277357463633, 0.7625048085249216, 0.8469928395624954, 0.8594484863610297, 0.8670179155790334, 0.8548121932813011, 0.8726578471672252, 0.8834351999718991, 0.1768674548432837, 0.9178367551250045, 0.8952240417843911, 0.3830611252157946, 0.5542722690358917, 0.5491701666837667, 0.5507687889648047, 0.13128795069705235, 0.5345615511088906, 0.5148246875804936, 0.501018183037441, 0.4979932285544143, 0.5186298466863517, 0.5080368213946709, 0.4101800469460729, 0.5586339402166425, 0.482268888063793, 0.5673202093857974, 0.20360130360109907, 0.5699763866453263, 0.1937130415492876, 0.4052110696329665, 0.33425731644476897, 0.41890910306894247, 0.499381703208448, 0.380234767684378, 0.37984180219470387, 0.3478875890865665, 0.38585036543104767, 0.4386187142076037, 0.6001574776656289, 0.5569836282401737, 0.5178058119729314, 0.5773145482732891, 0.43572732190804264, 0.5071609662853969, 0.43771385285432574, 0.5779364817882446, 0.5501802509647131, 0.19479435622098062, 0.1059266877099011, 0.2060197071548987, 0.21423146860070696, 0.3116690804764005, 0.37205791991231396, 0.2029316448586126, 0.1488389185105714, 0.12232539547338306, 0.3664727219911077, 0.396578428661433, 0.3625789417794797, 0.36894953698275235, 0.4675407692164947, 0.40816883484227406, 0.33608481306165416, 0.4118782158865578, 0.387910633029219, 0.7653011464421587, 0.7922187309475326, 0.7838298050783412, 0.767189419966823, 0.7322246394440209, 0.7565448302696057, 0.763137151876868, 0.8078232226699613, 0.8090520368682215, 0.13270367602842525, 0.1199860802868623, 0.13557527333499364, 0.14773371975135885, 0.10777868324032769, 0.14837745438243277, 0.12365226330677415, 0.15199037545283756, 0.275100615566482, 0.35548844791768297, 0.1688636577287601, 0.15038647130898464, 0.4538466592432503, 0.1638989838590329, 0.18633195911568923, 0.21056434767497745, 0.130794441937786, 0.3212053086738913, 0.6574400137469547, 0.5516481548561369, 0.6994142267571096, 0.651911608348646, 0.6964614765028034, 0.6427065285404141, 0.5800127977645871, 0.6529228372415743, 0.6695008541446409, 0.2643452718665247, 0.32077069426619487, 0.44889683990275375, 0.5046748678287407, 0.5072097324054746, 0.3820533754063403, 0.24931838540637163, 0.48384867699912304, 0.556847305582799, 0.22681312307346424, 0.20786198838790892, 0.24235703779322848, 0.21676804886252954, 0.21917944308842796, 0.19208166382115965, 0.21252456885143078, 0.21687665234359133, 0.2065317892185924, 0.6628210814329853, 0.2404728513753751, 0.22090439765844472, 0.2458899265059462, 0.22193855609648316, 0.23887562560367137, 0.19790876416534298, 0.21718592929880476, 0.24406198411825586, 0.18654496231322404, 0.8650647806738097, 0.18545382887365747, 0.817112834833382, 0.19962244405543128, 0.19968517744039782, 0.1423794693616357, 0.8255331455221171, 0.9032090214449877, 0.8537479499529251, 0.7721504230103967, 0.9057296124065435, 0.20991897012730665, 0.7330049243811074, 0.16651946891955172, 0.718935587863314, 0.1536427337493962, 0.2111974155572326, 0.1942613808684891, 0.1698971362184335, 0.17961493671673145, 0.18360970088053385, 0.1858344198418206, 0.19427693142099056, 0.1816477659993212, 0.18973541132574867, 0.18121078093143672, 0.09179724251052523, 0.08963233911414203, 0.0873914724565581, 0.09171449380316465, 0.08534139512533334, 0.0863578598649547, 0.08369610318356713, 0.08344411635456983, 0.09288660332767262]}, "mutation_prompt": null}
{"id": "1e293bb9-0ad4-4f90-8f94-ffd8379ceb27", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 10 * dim\n        self.population_size = self.initial_population_size\n        self.mutation_f = 0.5\n        self.crossover_prob = 0.7\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim)\n        )\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n        self.best_fitness = np.inf\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        \n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                if self.used_budget >= self.budget:\n                    break\n\n                # Mutation strategy with best individual influence\n                best_idx = np.argmin(self.fitness)\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_f * (b - c) + 0.5 * (self.population[best_idx] - a), \n                                 self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial[cross_points] = mutant[cross_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.used_budget += 1\n                if trial_fitness < self.fitness[i]:\n                    self.fitness[i] = trial_fitness\n                    self.population[i] = trial\n\n            # Adaptive mechanisms based on improvement\n            if self.used_budget > self.budget * 0.5 and self.population_size > self.dim:\n                self.population_size = int(self.initial_population_size / 2)\n\n            # Adaptive mutation factor and crossover probability based on improvement\n            current_best = np.min(self.fitness)\n            if current_best < self.best_fitness:\n                self.best_fitness = current_best\n                self.mutation_f = 0.4 + 0.3 * np.random.rand()\n                self.crossover_prob = 0.6 + 0.3 * np.random.rand()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.used_budget >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1", "name": "AdaptiveDifferentialEvolution", "description": "Improved Adaptive Differential Evolution with enhanced mutation strategies and dynamic adaptation of crossover based on past performance to speed up convergence.", "configspace": "", "generation": 75, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "124e3e19-ced6-4119-8a48-f7cfd8013700", "metadata": {"aucs": [0.8965749757029403, 0.9073667439280245, 0.9052190551643833, 0.8963154813750772, 0.9115615988291847, 0.9000165099269524, 0.9024157376224583, 0.9058782596811673, 0.9060712043547842, 0.8221117102244355, 0.8232384282547296, 0.8096833176378289, 0.803630990814496, 0.8227746737397528, 0.8222458013364699, 0.8112386132053878, 0.8346180171212291, 0.8369087678479824, 0.41198716561255155, 0.5920978069091614, 0.15015965449107405, 0.1748088639911879, 0.15609506022632758, 0.5325033924613658, 0.15627668286079388, 0.4585054294896507, 0.5946415392896547, 0.13622423146287088, 0.1377802431242371, 0.11916070993571737, 0.1146250479460772, 0.14392700532004632, 0.1460130224673596, 0.16198822006143287, 0.6014540953984114, 0.11356813867785209, 0.9329384344433713, 0.9770196181087624, 0.9487994985704654, 0.9513907462862684, 0.964472822577042, 0.9704904651377332, 0.9130385898269285, 0.9699402578061713, 0.9337352387093611, 0.723527843105046, 0.7147726255764233, 0.74267325283519, 0.7402440081693826, 0.7446231934830108, 0.7358515596633222, 0.7096059214455226, 0.7023277357463633, 0.7625048085249216, 0.8469928395624954, 0.8594484863610297, 0.8670179155790334, 0.8548121932813011, 0.8726578471672252, 0.8834351999718991, 0.1768674548432837, 0.9178367551250045, 0.8952240417843911, 0.3830611252157946, 0.5542722690358917, 0.5491701666837667, 0.5507687889648047, 0.13128795069705235, 0.5345615511088906, 0.5148246875804936, 0.501018183037441, 0.4979932285544143, 0.5186298466863517, 0.5080368213946709, 0.4101800469460729, 0.5586339402166425, 0.482268888063793, 0.5673202093857974, 0.20360130360109907, 0.5699763866453263, 0.1937130415492876, 0.4052110696329665, 0.33425731644476897, 0.41890910306894247, 0.499381703208448, 0.380234767684378, 0.37984180219470387, 0.3478875890865665, 0.38585036543104767, 0.4386187142076037, 0.6001574776656289, 0.5569836282401737, 0.5178058119729314, 0.5773145482732891, 0.43572732190804264, 0.5071609662853969, 0.43771385285432574, 0.5779364817882446, 0.5501802509647131, 0.19479435622098062, 0.1059266877099011, 0.2060197071548987, 0.21423146860070696, 0.3116690804764005, 0.37205791991231396, 0.2029316448586126, 0.1488389185105714, 0.12232539547338306, 0.3664727219911077, 0.396578428661433, 0.3625789417794797, 0.36894953698275235, 0.4675407692164947, 0.40816883484227406, 0.33608481306165416, 0.4118782158865578, 0.387910633029219, 0.7653011464421587, 0.7922187309475326, 0.7838298050783412, 0.767189419966823, 0.7322246394440209, 0.7565448302696057, 0.763137151876868, 0.8078232226699613, 0.8090520368682215, 0.13270367602842525, 0.1199860802868623, 0.13557527333499364, 0.14773371975135885, 0.10777868324032769, 0.14837745438243277, 0.12365226330677415, 0.15199037545283756, 0.275100615566482, 0.35548844791768297, 0.1688636577287601, 0.15038647130898464, 0.4538466592432503, 0.1638989838590329, 0.18633195911568923, 0.21056434767497745, 0.130794441937786, 0.3212053086738913, 0.6574400137469547, 0.5516481548561369, 0.6994142267571096, 0.651911608348646, 0.6964614765028034, 0.6427065285404141, 0.5800127977645871, 0.6529228372415743, 0.6695008541446409, 0.2643452718665247, 0.32077069426619487, 0.44889683990275375, 0.5046748678287407, 0.5072097324054746, 0.3820533754063403, 0.24931838540637163, 0.48384867699912304, 0.556847305582799, 0.22681312307346424, 0.20786198838790892, 0.24235703779322848, 0.21676804886252954, 0.21917944308842796, 0.19208166382115965, 0.21252456885143078, 0.21687665234359133, 0.2065317892185924, 0.6628210814329853, 0.2404728513753751, 0.22090439765844472, 0.2458899265059462, 0.22193855609648316, 0.23887562560367137, 0.19790876416534298, 0.21718592929880476, 0.24406198411825586, 0.18654496231322404, 0.8650647806738097, 0.18545382887365747, 0.817112834833382, 0.19962244405543128, 0.19968517744039782, 0.1423794693616357, 0.8255331455221171, 0.9032090214449877, 0.8537479499529251, 0.7721504230103967, 0.9057296124065435, 0.20991897012730665, 0.7330049243811074, 0.16651946891955172, 0.718935587863314, 0.1536427337493962, 0.2111974155572326, 0.1942613808684891, 0.1698971362184335, 0.17961493671673145, 0.18360970088053385, 0.1858344198418206, 0.19427693142099056, 0.1816477659993212, 0.18973541132574867, 0.18121078093143672, 0.09179724251052523, 0.08963233911414203, 0.0873914724565581, 0.09171449380316465, 0.08534139512533334, 0.0863578598649547, 0.08369610318356713, 0.08344411635456983, 0.09288660332767262]}, "mutation_prompt": null}
{"id": "76436300-cc28-47d0-982d-9c33b508a2b0", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 10 * dim\n        self.population_size = self.initial_population_size\n        self.mutation_f = 0.5\n        self.crossover_prob = 0.7\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim)\n        )\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n        self.best_fitness = np.inf\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        \n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                if self.used_budget >= self.budget:\n                    break\n\n                # Mutation strategy with best individual influence\n                best_idx = np.argmin(self.fitness)\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_f * (b - c) + 0.5 * (self.population[best_idx] - a), \n                                 self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial[cross_points] = mutant[cross_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.used_budget += 1\n                if trial_fitness < self.fitness[i]:\n                    self.fitness[i] = trial_fitness\n                    self.population[i] = trial\n\n            # Adaptive mechanisms based on improvement\n            if self.used_budget > self.budget * 0.5 and self.population_size > self.dim:\n                self.population_size = int(self.initial_population_size / 2)\n\n            # Adaptive mutation factor and crossover probability based on improvement\n            current_best = np.min(self.fitness)\n            if current_best < self.best_fitness:\n                self.best_fitness = current_best\n                self.mutation_f = 0.4 + 0.3 * np.random.rand()\n                self.crossover_prob = 0.6 + 0.3 * np.random.rand()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.used_budget >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1", "name": "AdaptiveDifferentialEvolution", "description": "Improved Adaptive Differential Evolution with enhanced mutation strategies and dynamic adaptation of crossover based on past performance to speed up convergence.", "configspace": "", "generation": 75, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "124e3e19-ced6-4119-8a48-f7cfd8013700", "metadata": {"aucs": [0.8965749757029403, 0.9073667439280245, 0.9052190551643833, 0.8963154813750772, 0.9115615988291847, 0.9000165099269524, 0.9024157376224583, 0.9058782596811673, 0.9060712043547842, 0.8221117102244355, 0.8232384282547296, 0.8096833176378289, 0.803630990814496, 0.8227746737397528, 0.8222458013364699, 0.8112386132053878, 0.8346180171212291, 0.8369087678479824, 0.41198716561255155, 0.5920978069091614, 0.15015965449107405, 0.1748088639911879, 0.15609506022632758, 0.5325033924613658, 0.15627668286079388, 0.4585054294896507, 0.5946415392896547, 0.13622423146287088, 0.1377802431242371, 0.11916070993571737, 0.1146250479460772, 0.14392700532004632, 0.1460130224673596, 0.16198822006143287, 0.6014540953984114, 0.11356813867785209, 0.9329384344433713, 0.9770196181087624, 0.9487994985704654, 0.9513907462862684, 0.964472822577042, 0.9704904651377332, 0.9130385898269285, 0.9699402578061713, 0.9337352387093611, 0.723527843105046, 0.7147726255764233, 0.74267325283519, 0.7402440081693826, 0.7446231934830108, 0.7358515596633222, 0.7096059214455226, 0.7023277357463633, 0.7625048085249216, 0.8469928395624954, 0.8594484863610297, 0.8670179155790334, 0.8548121932813011, 0.8726578471672252, 0.8834351999718991, 0.1768674548432837, 0.9178367551250045, 0.8952240417843911, 0.3830611252157946, 0.5542722690358917, 0.5491701666837667, 0.5507687889648047, 0.13128795069705235, 0.5345615511088906, 0.5148246875804936, 0.501018183037441, 0.4979932285544143, 0.5186298466863517, 0.5080368213946709, 0.4101800469460729, 0.5586339402166425, 0.482268888063793, 0.5673202093857974, 0.20360130360109907, 0.5699763866453263, 0.1937130415492876, 0.4052110696329665, 0.33425731644476897, 0.41890910306894247, 0.499381703208448, 0.380234767684378, 0.37984180219470387, 0.3478875890865665, 0.38585036543104767, 0.4386187142076037, 0.6001574776656289, 0.5569836282401737, 0.5178058119729314, 0.5773145482732891, 0.43572732190804264, 0.5071609662853969, 0.43771385285432574, 0.5779364817882446, 0.5501802509647131, 0.19479435622098062, 0.1059266877099011, 0.2060197071548987, 0.21423146860070696, 0.3116690804764005, 0.37205791991231396, 0.2029316448586126, 0.1488389185105714, 0.12232539547338306, 0.3664727219911077, 0.396578428661433, 0.3625789417794797, 0.36894953698275235, 0.4675407692164947, 0.40816883484227406, 0.33608481306165416, 0.4118782158865578, 0.387910633029219, 0.7653011464421587, 0.7922187309475326, 0.7838298050783412, 0.767189419966823, 0.7322246394440209, 0.7565448302696057, 0.763137151876868, 0.8078232226699613, 0.8090520368682215, 0.13270367602842525, 0.1199860802868623, 0.13557527333499364, 0.14773371975135885, 0.10777868324032769, 0.14837745438243277, 0.12365226330677415, 0.15199037545283756, 0.275100615566482, 0.35548844791768297, 0.1688636577287601, 0.15038647130898464, 0.4538466592432503, 0.1638989838590329, 0.18633195911568923, 0.21056434767497745, 0.130794441937786, 0.3212053086738913, 0.6574400137469547, 0.5516481548561369, 0.6994142267571096, 0.651911608348646, 0.6964614765028034, 0.6427065285404141, 0.5800127977645871, 0.6529228372415743, 0.6695008541446409, 0.2643452718665247, 0.32077069426619487, 0.44889683990275375, 0.5046748678287407, 0.5072097324054746, 0.3820533754063403, 0.24931838540637163, 0.48384867699912304, 0.556847305582799, 0.22681312307346424, 0.20786198838790892, 0.24235703779322848, 0.21676804886252954, 0.21917944308842796, 0.19208166382115965, 0.21252456885143078, 0.21687665234359133, 0.2065317892185924, 0.6628210814329853, 0.2404728513753751, 0.22090439765844472, 0.2458899265059462, 0.22193855609648316, 0.23887562560367137, 0.19790876416534298, 0.21718592929880476, 0.24406198411825586, 0.18654496231322404, 0.8650647806738097, 0.18545382887365747, 0.817112834833382, 0.19962244405543128, 0.19968517744039782, 0.1423794693616357, 0.8255331455221171, 0.9032090214449877, 0.8537479499529251, 0.7721504230103967, 0.9057296124065435, 0.20991897012730665, 0.7330049243811074, 0.16651946891955172, 0.718935587863314, 0.1536427337493962, 0.2111974155572326, 0.1942613808684891, 0.1698971362184335, 0.17961493671673145, 0.18360970088053385, 0.1858344198418206, 0.19427693142099056, 0.1816477659993212, 0.18973541132574867, 0.18121078093143672, 0.09179724251052523, 0.08963233911414203, 0.0873914724565581, 0.09171449380316465, 0.08534139512533334, 0.0863578598649547, 0.08369610318356713, 0.08344411635456983, 0.09288660332767262]}, "mutation_prompt": null}
{"id": "9bd3c7cd-c0bb-441e-a927-dcc8de2be80d", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 10 * dim\n        self.population_size = self.initial_population_size\n        self.mutation_f = 0.5\n        self.crossover_prob = 0.7\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim)\n        )\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n        self.best_fitness = np.inf\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        \n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                if self.used_budget >= self.budget:\n                    break\n\n                # Mutation strategy with best individual influence\n                best_idx = np.argmin(self.fitness)\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_f * (b - c) + 0.5 * (self.population[best_idx] - a), \n                                 self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial[cross_points] = mutant[cross_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.used_budget += 1\n                if trial_fitness < self.fitness[i]:\n                    self.fitness[i] = trial_fitness\n                    self.population[i] = trial\n\n            # Adaptive mechanisms based on improvement\n            if self.used_budget > self.budget * 0.5 and self.population_size > self.dim:\n                self.population_size = int(self.initial_population_size / 2)\n\n            # Adaptive mutation factor and crossover probability based on improvement\n            current_best = np.min(self.fitness)\n            if current_best < self.best_fitness:\n                self.best_fitness = current_best\n                self.mutation_f = 0.4 + 0.3 * np.random.rand()\n                self.crossover_prob = 0.6 + 0.3 * np.random.rand()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.used_budget >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1", "name": "AdaptiveDifferentialEvolution", "description": "Improved Adaptive Differential Evolution with enhanced mutation strategies and dynamic adaptation of crossover based on past performance to speed up convergence.", "configspace": "", "generation": 75, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "124e3e19-ced6-4119-8a48-f7cfd8013700", "metadata": {"aucs": [0.8965749757029403, 0.9073667439280245, 0.9052190551643833, 0.8963154813750772, 0.9115615988291847, 0.9000165099269524, 0.9024157376224583, 0.9058782596811673, 0.9060712043547842, 0.8221117102244355, 0.8232384282547296, 0.8096833176378289, 0.803630990814496, 0.8227746737397528, 0.8222458013364699, 0.8112386132053878, 0.8346180171212291, 0.8369087678479824, 0.41198716561255155, 0.5920978069091614, 0.15015965449107405, 0.1748088639911879, 0.15609506022632758, 0.5325033924613658, 0.15627668286079388, 0.4585054294896507, 0.5946415392896547, 0.13622423146287088, 0.1377802431242371, 0.11916070993571737, 0.1146250479460772, 0.14392700532004632, 0.1460130224673596, 0.16198822006143287, 0.6014540953984114, 0.11356813867785209, 0.9329384344433713, 0.9770196181087624, 0.9487994985704654, 0.9513907462862684, 0.964472822577042, 0.9704904651377332, 0.9130385898269285, 0.9699402578061713, 0.9337352387093611, 0.723527843105046, 0.7147726255764233, 0.74267325283519, 0.7402440081693826, 0.7446231934830108, 0.7358515596633222, 0.7096059214455226, 0.7023277357463633, 0.7625048085249216, 0.8469928395624954, 0.8594484863610297, 0.8670179155790334, 0.8548121932813011, 0.8726578471672252, 0.8834351999718991, 0.1768674548432837, 0.9178367551250045, 0.8952240417843911, 0.3830611252157946, 0.5542722690358917, 0.5491701666837667, 0.5507687889648047, 0.13128795069705235, 0.5345615511088906, 0.5148246875804936, 0.501018183037441, 0.4979932285544143, 0.5186298466863517, 0.5080368213946709, 0.4101800469460729, 0.5586339402166425, 0.482268888063793, 0.5673202093857974, 0.20360130360109907, 0.5699763866453263, 0.1937130415492876, 0.4052110696329665, 0.33425731644476897, 0.41890910306894247, 0.499381703208448, 0.380234767684378, 0.37984180219470387, 0.3478875890865665, 0.38585036543104767, 0.4386187142076037, 0.6001574776656289, 0.5569836282401737, 0.5178058119729314, 0.5773145482732891, 0.43572732190804264, 0.5071609662853969, 0.43771385285432574, 0.5779364817882446, 0.5501802509647131, 0.19479435622098062, 0.1059266877099011, 0.2060197071548987, 0.21423146860070696, 0.3116690804764005, 0.37205791991231396, 0.2029316448586126, 0.1488389185105714, 0.12232539547338306, 0.3664727219911077, 0.396578428661433, 0.3625789417794797, 0.36894953698275235, 0.4675407692164947, 0.40816883484227406, 0.33608481306165416, 0.4118782158865578, 0.387910633029219, 0.7653011464421587, 0.7922187309475326, 0.7838298050783412, 0.767189419966823, 0.7322246394440209, 0.7565448302696057, 0.763137151876868, 0.8078232226699613, 0.8090520368682215, 0.13270367602842525, 0.1199860802868623, 0.13557527333499364, 0.14773371975135885, 0.10777868324032769, 0.14837745438243277, 0.12365226330677415, 0.15199037545283756, 0.275100615566482, 0.35548844791768297, 0.1688636577287601, 0.15038647130898464, 0.4538466592432503, 0.1638989838590329, 0.18633195911568923, 0.21056434767497745, 0.130794441937786, 0.3212053086738913, 0.6574400137469547, 0.5516481548561369, 0.6994142267571096, 0.651911608348646, 0.6964614765028034, 0.6427065285404141, 0.5800127977645871, 0.6529228372415743, 0.6695008541446409, 0.2643452718665247, 0.32077069426619487, 0.44889683990275375, 0.5046748678287407, 0.5072097324054746, 0.3820533754063403, 0.24931838540637163, 0.48384867699912304, 0.556847305582799, 0.22681312307346424, 0.20786198838790892, 0.24235703779322848, 0.21676804886252954, 0.21917944308842796, 0.19208166382115965, 0.21252456885143078, 0.21687665234359133, 0.2065317892185924, 0.6628210814329853, 0.2404728513753751, 0.22090439765844472, 0.2458899265059462, 0.22193855609648316, 0.23887562560367137, 0.19790876416534298, 0.21718592929880476, 0.24406198411825586, 0.18654496231322404, 0.8650647806738097, 0.18545382887365747, 0.817112834833382, 0.19962244405543128, 0.19968517744039782, 0.1423794693616357, 0.8255331455221171, 0.9032090214449877, 0.8537479499529251, 0.7721504230103967, 0.9057296124065435, 0.20991897012730665, 0.7330049243811074, 0.16651946891955172, 0.718935587863314, 0.1536427337493962, 0.2111974155572326, 0.1942613808684891, 0.1698971362184335, 0.17961493671673145, 0.18360970088053385, 0.1858344198418206, 0.19427693142099056, 0.1816477659993212, 0.18973541132574867, 0.18121078093143672, 0.09179724251052523, 0.08963233911414203, 0.0873914724565581, 0.09171449380316465, 0.08534139512533334, 0.0863578598649547, 0.08369610318356713, 0.08344411635456983, 0.09288660332767262]}, "mutation_prompt": null}
{"id": "217f1b42-757d-4aae-bb75-0d25717e19ee", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 10 * dim\n        self.population_size = self.initial_population_size\n        self.mutation_f = 0.5\n        self.crossover_prob = 0.7\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim)\n        )\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n        self.best_fitness = np.inf\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        \n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                if self.used_budget >= self.budget:\n                    break\n\n                # Mutation strategy with best individual influence\n                best_idx = np.argmin(self.fitness)\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_f * (b - c) + 0.5 * (self.population[best_idx] - a), \n                                 self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial[cross_points] = mutant[cross_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.used_budget += 1\n                if trial_fitness < self.fitness[i]:\n                    self.fitness[i] = trial_fitness\n                    self.population[i] = trial\n\n            # Adaptive mechanisms based on improvement\n            if self.used_budget > self.budget * 0.5 and self.population_size > self.dim:\n                self.population_size = int(self.initial_population_size / 2)\n\n            # Adaptive mutation factor and crossover probability based on improvement\n            current_best = np.min(self.fitness)\n            if current_best < self.best_fitness:\n                self.best_fitness = current_best\n                self.mutation_f = 0.4 + 0.3 * np.random.rand()\n                self.crossover_prob = 0.6 + 0.3 * np.random.rand()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.used_budget >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1", "name": "AdaptiveDifferentialEvolution", "description": "Improved Adaptive Differential Evolution with enhanced mutation strategies and dynamic adaptation of crossover based on past performance to speed up convergence.", "configspace": "", "generation": 75, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "124e3e19-ced6-4119-8a48-f7cfd8013700", "metadata": {"aucs": [0.8965749757029403, 0.9073667439280245, 0.9052190551643833, 0.8963154813750772, 0.9115615988291847, 0.9000165099269524, 0.9024157376224583, 0.9058782596811673, 0.9060712043547842, 0.8221117102244355, 0.8232384282547296, 0.8096833176378289, 0.803630990814496, 0.8227746737397528, 0.8222458013364699, 0.8112386132053878, 0.8346180171212291, 0.8369087678479824, 0.41198716561255155, 0.5920978069091614, 0.15015965449107405, 0.1748088639911879, 0.15609506022632758, 0.5325033924613658, 0.15627668286079388, 0.4585054294896507, 0.5946415392896547, 0.13622423146287088, 0.1377802431242371, 0.11916070993571737, 0.1146250479460772, 0.14392700532004632, 0.1460130224673596, 0.16198822006143287, 0.6014540953984114, 0.11356813867785209, 0.9329384344433713, 0.9770196181087624, 0.9487994985704654, 0.9513907462862684, 0.964472822577042, 0.9704904651377332, 0.9130385898269285, 0.9699402578061713, 0.9337352387093611, 0.723527843105046, 0.7147726255764233, 0.74267325283519, 0.7402440081693826, 0.7446231934830108, 0.7358515596633222, 0.7096059214455226, 0.7023277357463633, 0.7625048085249216, 0.8469928395624954, 0.8594484863610297, 0.8670179155790334, 0.8548121932813011, 0.8726578471672252, 0.8834351999718991, 0.1768674548432837, 0.9178367551250045, 0.8952240417843911, 0.3830611252157946, 0.5542722690358917, 0.5491701666837667, 0.5507687889648047, 0.13128795069705235, 0.5345615511088906, 0.5148246875804936, 0.501018183037441, 0.4979932285544143, 0.5186298466863517, 0.5080368213946709, 0.4101800469460729, 0.5586339402166425, 0.482268888063793, 0.5673202093857974, 0.20360130360109907, 0.5699763866453263, 0.1937130415492876, 0.4052110696329665, 0.33425731644476897, 0.41890910306894247, 0.499381703208448, 0.380234767684378, 0.37984180219470387, 0.3478875890865665, 0.38585036543104767, 0.4386187142076037, 0.6001574776656289, 0.5569836282401737, 0.5178058119729314, 0.5773145482732891, 0.43572732190804264, 0.5071609662853969, 0.43771385285432574, 0.5779364817882446, 0.5501802509647131, 0.19479435622098062, 0.1059266877099011, 0.2060197071548987, 0.21423146860070696, 0.3116690804764005, 0.37205791991231396, 0.2029316448586126, 0.1488389185105714, 0.12232539547338306, 0.3664727219911077, 0.396578428661433, 0.3625789417794797, 0.36894953698275235, 0.4675407692164947, 0.40816883484227406, 0.33608481306165416, 0.4118782158865578, 0.387910633029219, 0.7653011464421587, 0.7922187309475326, 0.7838298050783412, 0.767189419966823, 0.7322246394440209, 0.7565448302696057, 0.763137151876868, 0.8078232226699613, 0.8090520368682215, 0.13270367602842525, 0.1199860802868623, 0.13557527333499364, 0.14773371975135885, 0.10777868324032769, 0.14837745438243277, 0.12365226330677415, 0.15199037545283756, 0.275100615566482, 0.35548844791768297, 0.1688636577287601, 0.15038647130898464, 0.4538466592432503, 0.1638989838590329, 0.18633195911568923, 0.21056434767497745, 0.130794441937786, 0.3212053086738913, 0.6574400137469547, 0.5516481548561369, 0.6994142267571096, 0.651911608348646, 0.6964614765028034, 0.6427065285404141, 0.5800127977645871, 0.6529228372415743, 0.6695008541446409, 0.2643452718665247, 0.32077069426619487, 0.44889683990275375, 0.5046748678287407, 0.5072097324054746, 0.3820533754063403, 0.24931838540637163, 0.48384867699912304, 0.556847305582799, 0.22681312307346424, 0.20786198838790892, 0.24235703779322848, 0.21676804886252954, 0.21917944308842796, 0.19208166382115965, 0.21252456885143078, 0.21687665234359133, 0.2065317892185924, 0.6628210814329853, 0.2404728513753751, 0.22090439765844472, 0.2458899265059462, 0.22193855609648316, 0.23887562560367137, 0.19790876416534298, 0.21718592929880476, 0.24406198411825586, 0.18654496231322404, 0.8650647806738097, 0.18545382887365747, 0.817112834833382, 0.19962244405543128, 0.19968517744039782, 0.1423794693616357, 0.8255331455221171, 0.9032090214449877, 0.8537479499529251, 0.7721504230103967, 0.9057296124065435, 0.20991897012730665, 0.7330049243811074, 0.16651946891955172, 0.718935587863314, 0.1536427337493962, 0.2111974155572326, 0.1942613808684891, 0.1698971362184335, 0.17961493671673145, 0.18360970088053385, 0.1858344198418206, 0.19427693142099056, 0.1816477659993212, 0.18973541132574867, 0.18121078093143672, 0.09179724251052523, 0.08963233911414203, 0.0873914724565581, 0.09171449380316465, 0.08534139512533334, 0.0863578598649547, 0.08369610318356713, 0.08344411635456983, 0.09288660332767262]}, "mutation_prompt": null}
{"id": "5d41d054-c6eb-495b-bb28-06b91545da75", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 10 * dim\n        self.population_size = self.initial_population_size\n        self.mutation_f = 0.5\n        self.crossover_prob = 0.7\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim)\n        )\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n        self.best_fitness = np.inf\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        \n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                if self.used_budget >= self.budget:\n                    break\n\n                # Mutation strategy with best individual influence\n                best_idx = np.argmin(self.fitness)\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_f * (b - c) + 0.5 * (self.population[best_idx] - a), \n                                 self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial[cross_points] = mutant[cross_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.used_budget += 1\n                if trial_fitness < self.fitness[i]:\n                    self.fitness[i] = trial_fitness\n                    self.population[i] = trial\n\n            # Adaptive mechanisms based on improvement\n            if self.used_budget > self.budget * 0.5 and self.population_size > self.dim:\n                self.population_size = int(self.initial_population_size / 2)\n\n            # Adaptive mutation factor and crossover probability based on improvement\n            current_best = np.min(self.fitness)\n            if current_best < self.best_fitness:\n                self.best_fitness = current_best\n                self.mutation_f = 0.4 + 0.3 * np.random.rand()\n                self.crossover_prob = 0.6 + 0.3 * np.random.rand()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.used_budget >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1", "name": "AdaptiveDifferentialEvolution", "description": "Improved Adaptive Differential Evolution with enhanced mutation strategies and dynamic adaptation of crossover based on past performance to speed up convergence.", "configspace": "", "generation": 75, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "124e3e19-ced6-4119-8a48-f7cfd8013700", "metadata": {"aucs": [0.8965749757029403, 0.9073667439280245, 0.9052190551643833, 0.8963154813750772, 0.9115615988291847, 0.9000165099269524, 0.9024157376224583, 0.9058782596811673, 0.9060712043547842, 0.8221117102244355, 0.8232384282547296, 0.8096833176378289, 0.803630990814496, 0.8227746737397528, 0.8222458013364699, 0.8112386132053878, 0.8346180171212291, 0.8369087678479824, 0.41198716561255155, 0.5920978069091614, 0.15015965449107405, 0.1748088639911879, 0.15609506022632758, 0.5325033924613658, 0.15627668286079388, 0.4585054294896507, 0.5946415392896547, 0.13622423146287088, 0.1377802431242371, 0.11916070993571737, 0.1146250479460772, 0.14392700532004632, 0.1460130224673596, 0.16198822006143287, 0.6014540953984114, 0.11356813867785209, 0.9329384344433713, 0.9770196181087624, 0.9487994985704654, 0.9513907462862684, 0.964472822577042, 0.9704904651377332, 0.9130385898269285, 0.9699402578061713, 0.9337352387093611, 0.723527843105046, 0.7147726255764233, 0.74267325283519, 0.7402440081693826, 0.7446231934830108, 0.7358515596633222, 0.7096059214455226, 0.7023277357463633, 0.7625048085249216, 0.8469928395624954, 0.8594484863610297, 0.8670179155790334, 0.8548121932813011, 0.8726578471672252, 0.8834351999718991, 0.1768674548432837, 0.9178367551250045, 0.8952240417843911, 0.3830611252157946, 0.5542722690358917, 0.5491701666837667, 0.5507687889648047, 0.13128795069705235, 0.5345615511088906, 0.5148246875804936, 0.501018183037441, 0.4979932285544143, 0.5186298466863517, 0.5080368213946709, 0.4101800469460729, 0.5586339402166425, 0.482268888063793, 0.5673202093857974, 0.20360130360109907, 0.5699763866453263, 0.1937130415492876, 0.4052110696329665, 0.33425731644476897, 0.41890910306894247, 0.499381703208448, 0.380234767684378, 0.37984180219470387, 0.3478875890865665, 0.38585036543104767, 0.4386187142076037, 0.6001574776656289, 0.5569836282401737, 0.5178058119729314, 0.5773145482732891, 0.43572732190804264, 0.5071609662853969, 0.43771385285432574, 0.5779364817882446, 0.5501802509647131, 0.19479435622098062, 0.1059266877099011, 0.2060197071548987, 0.21423146860070696, 0.3116690804764005, 0.37205791991231396, 0.2029316448586126, 0.1488389185105714, 0.12232539547338306, 0.3664727219911077, 0.396578428661433, 0.3625789417794797, 0.36894953698275235, 0.4675407692164947, 0.40816883484227406, 0.33608481306165416, 0.4118782158865578, 0.387910633029219, 0.7653011464421587, 0.7922187309475326, 0.7838298050783412, 0.767189419966823, 0.7322246394440209, 0.7565448302696057, 0.763137151876868, 0.8078232226699613, 0.8090520368682215, 0.13270367602842525, 0.1199860802868623, 0.13557527333499364, 0.14773371975135885, 0.10777868324032769, 0.14837745438243277, 0.12365226330677415, 0.15199037545283756, 0.275100615566482, 0.35548844791768297, 0.1688636577287601, 0.15038647130898464, 0.4538466592432503, 0.1638989838590329, 0.18633195911568923, 0.21056434767497745, 0.130794441937786, 0.3212053086738913, 0.6574400137469547, 0.5516481548561369, 0.6994142267571096, 0.651911608348646, 0.6964614765028034, 0.6427065285404141, 0.5800127977645871, 0.6529228372415743, 0.6695008541446409, 0.2643452718665247, 0.32077069426619487, 0.44889683990275375, 0.5046748678287407, 0.5072097324054746, 0.3820533754063403, 0.24931838540637163, 0.48384867699912304, 0.556847305582799, 0.22681312307346424, 0.20786198838790892, 0.24235703779322848, 0.21676804886252954, 0.21917944308842796, 0.19208166382115965, 0.21252456885143078, 0.21687665234359133, 0.2065317892185924, 0.6628210814329853, 0.2404728513753751, 0.22090439765844472, 0.2458899265059462, 0.22193855609648316, 0.23887562560367137, 0.19790876416534298, 0.21718592929880476, 0.24406198411825586, 0.18654496231322404, 0.8650647806738097, 0.18545382887365747, 0.817112834833382, 0.19962244405543128, 0.19968517744039782, 0.1423794693616357, 0.8255331455221171, 0.9032090214449877, 0.8537479499529251, 0.7721504230103967, 0.9057296124065435, 0.20991897012730665, 0.7330049243811074, 0.16651946891955172, 0.718935587863314, 0.1536427337493962, 0.2111974155572326, 0.1942613808684891, 0.1698971362184335, 0.17961493671673145, 0.18360970088053385, 0.1858344198418206, 0.19427693142099056, 0.1816477659993212, 0.18973541132574867, 0.18121078093143672, 0.09179724251052523, 0.08963233911414203, 0.0873914724565581, 0.09171449380316465, 0.08534139512533334, 0.0863578598649547, 0.08369610318356713, 0.08344411635456983, 0.09288660332767262]}, "mutation_prompt": null}
{"id": "460e7aa8-ae9c-45b2-90cd-0d145edab5ff", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 10 * dim\n        self.population_size = self.initial_population_size\n        self.mutation_f = 0.5\n        self.crossover_prob = 0.7\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim)\n        )\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n        self.best_fitness = np.inf\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        \n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                if self.used_budget >= self.budget:\n                    break\n\n                # Mutation strategy with best individual influence\n                best_idx = np.argmin(self.fitness)\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_f * (b - c) + 0.5 * (self.population[best_idx] - a), \n                                 self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial[cross_points] = mutant[cross_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.used_budget += 1\n                if trial_fitness < self.fitness[i]:\n                    self.fitness[i] = trial_fitness\n                    self.population[i] = trial\n\n            # Adaptive mechanisms based on improvement\n            if self.used_budget > self.budget * 0.5 and self.population_size > self.dim:\n                self.population_size = int(self.initial_population_size / 2)\n\n            # Adaptive mutation factor and crossover probability based on improvement\n            current_best = np.min(self.fitness)\n            if current_best < self.best_fitness:\n                self.best_fitness = current_best\n                self.mutation_f = 0.4 + 0.3 * np.random.rand()\n                self.crossover_prob = 0.6 + 0.3 * np.random.rand()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.used_budget >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1", "name": "AdaptiveDifferentialEvolution", "description": "Improved Adaptive Differential Evolution with enhanced mutation strategies and dynamic adaptation of crossover based on past performance to speed up convergence.", "configspace": "", "generation": 75, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "124e3e19-ced6-4119-8a48-f7cfd8013700", "metadata": {"aucs": [0.8965749757029403, 0.9073667439280245, 0.9052190551643833, 0.8963154813750772, 0.9115615988291847, 0.9000165099269524, 0.9024157376224583, 0.9058782596811673, 0.9060712043547842, 0.8221117102244355, 0.8232384282547296, 0.8096833176378289, 0.803630990814496, 0.8227746737397528, 0.8222458013364699, 0.8112386132053878, 0.8346180171212291, 0.8369087678479824, 0.41198716561255155, 0.5920978069091614, 0.15015965449107405, 0.1748088639911879, 0.15609506022632758, 0.5325033924613658, 0.15627668286079388, 0.4585054294896507, 0.5946415392896547, 0.13622423146287088, 0.1377802431242371, 0.11916070993571737, 0.1146250479460772, 0.14392700532004632, 0.1460130224673596, 0.16198822006143287, 0.6014540953984114, 0.11356813867785209, 0.9329384344433713, 0.9770196181087624, 0.9487994985704654, 0.9513907462862684, 0.964472822577042, 0.9704904651377332, 0.9130385898269285, 0.9699402578061713, 0.9337352387093611, 0.723527843105046, 0.7147726255764233, 0.74267325283519, 0.7402440081693826, 0.7446231934830108, 0.7358515596633222, 0.7096059214455226, 0.7023277357463633, 0.7625048085249216, 0.8469928395624954, 0.8594484863610297, 0.8670179155790334, 0.8548121932813011, 0.8726578471672252, 0.8834351999718991, 0.1768674548432837, 0.9178367551250045, 0.8952240417843911, 0.3830611252157946, 0.5542722690358917, 0.5491701666837667, 0.5507687889648047, 0.13128795069705235, 0.5345615511088906, 0.5148246875804936, 0.501018183037441, 0.4979932285544143, 0.5186298466863517, 0.5080368213946709, 0.4101800469460729, 0.5586339402166425, 0.482268888063793, 0.5673202093857974, 0.20360130360109907, 0.5699763866453263, 0.1937130415492876, 0.4052110696329665, 0.33425731644476897, 0.41890910306894247, 0.499381703208448, 0.380234767684378, 0.37984180219470387, 0.3478875890865665, 0.38585036543104767, 0.4386187142076037, 0.6001574776656289, 0.5569836282401737, 0.5178058119729314, 0.5773145482732891, 0.43572732190804264, 0.5071609662853969, 0.43771385285432574, 0.5779364817882446, 0.5501802509647131, 0.19479435622098062, 0.1059266877099011, 0.2060197071548987, 0.21423146860070696, 0.3116690804764005, 0.37205791991231396, 0.2029316448586126, 0.1488389185105714, 0.12232539547338306, 0.3664727219911077, 0.396578428661433, 0.3625789417794797, 0.36894953698275235, 0.4675407692164947, 0.40816883484227406, 0.33608481306165416, 0.4118782158865578, 0.387910633029219, 0.7653011464421587, 0.7922187309475326, 0.7838298050783412, 0.767189419966823, 0.7322246394440209, 0.7565448302696057, 0.763137151876868, 0.8078232226699613, 0.8090520368682215, 0.13270367602842525, 0.1199860802868623, 0.13557527333499364, 0.14773371975135885, 0.10777868324032769, 0.14837745438243277, 0.12365226330677415, 0.15199037545283756, 0.275100615566482, 0.35548844791768297, 0.1688636577287601, 0.15038647130898464, 0.4538466592432503, 0.1638989838590329, 0.18633195911568923, 0.21056434767497745, 0.130794441937786, 0.3212053086738913, 0.6574400137469547, 0.5516481548561369, 0.6994142267571096, 0.651911608348646, 0.6964614765028034, 0.6427065285404141, 0.5800127977645871, 0.6529228372415743, 0.6695008541446409, 0.2643452718665247, 0.32077069426619487, 0.44889683990275375, 0.5046748678287407, 0.5072097324054746, 0.3820533754063403, 0.24931838540637163, 0.48384867699912304, 0.556847305582799, 0.22681312307346424, 0.20786198838790892, 0.24235703779322848, 0.21676804886252954, 0.21917944308842796, 0.19208166382115965, 0.21252456885143078, 0.21687665234359133, 0.2065317892185924, 0.6628210814329853, 0.2404728513753751, 0.22090439765844472, 0.2458899265059462, 0.22193855609648316, 0.23887562560367137, 0.19790876416534298, 0.21718592929880476, 0.24406198411825586, 0.18654496231322404, 0.8650647806738097, 0.18545382887365747, 0.817112834833382, 0.19962244405543128, 0.19968517744039782, 0.1423794693616357, 0.8255331455221171, 0.9032090214449877, 0.8537479499529251, 0.7721504230103967, 0.9057296124065435, 0.20991897012730665, 0.7330049243811074, 0.16651946891955172, 0.718935587863314, 0.1536427337493962, 0.2111974155572326, 0.1942613808684891, 0.1698971362184335, 0.17961493671673145, 0.18360970088053385, 0.1858344198418206, 0.19427693142099056, 0.1816477659993212, 0.18973541132574867, 0.18121078093143672, 0.09179724251052523, 0.08963233911414203, 0.0873914724565581, 0.09171449380316465, 0.08534139512533334, 0.0863578598649547, 0.08369610318356713, 0.08344411635456983, 0.09288660332767262]}, "mutation_prompt": null}
{"id": "812adef5-6867-4af3-85c6-7b092a4d12be", "solution": "import numpy as np\n\nclass EnhancedAdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 10 * dim\n        self.population_size = self.initial_population_size\n        self.mutation_f_min = 0.4\n        self.mutation_f_max = 0.9\n        self.crossover_prob = 0.7\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim)\n        )\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n        self.best_fitness = np.inf\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        \n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                if self.used_budget >= self.budget:\n                    break\n\n                # Dynamic mutation strategy with diversity preservation\n                best_idx = np.argmin(self.fitness)\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mutation_f = self.mutation_f_min + (self.mutation_f_max - self.mutation_f_min) * (1 - self.used_budget / self.budget)\n                mutant = np.clip(a + mutation_f * (b - c) + 0.5 * (self.population[best_idx] - a), \n                                 self.lower_bound, self.upper_bound)\n                trial = np.copy(self.population[i])\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial[cross_points] = mutant[cross_points]\n\n                # Selection\n                trial_fitness = func(trial)\n                self.used_budget += 1\n                if trial_fitness < self.fitness[i]:\n                    self.fitness[i] = trial_fitness\n                    self.population[i] = trial\n\n            # Adaptive mechanisms based on improvement\n            if self.used_budget > self.budget * 0.5 and self.population_size > self.dim:\n                self.population_size = int(self.initial_population_size / 2)\n\n            # Improved mutation factor and crossover probability based on diversity\n            current_best = np.min(self.fitness)\n            if current_best < self.best_fitness:\n                self.best_fitness = current_best\n                diversity = np.mean(np.std(self.population, axis=0))\n                self.mutation_f_min = 0.3 + 0.2 * (diversity > 0.1)\n                self.crossover_prob = 0.6 + 0.3 * np.random.rand()\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.used_budget >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1", "name": "EnhancedAdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with dynamic scaling factor and diversity-preserving mechanisms for improved convergence speed.", "configspace": "", "generation": 97, "fitness": 0.37287753382968564, "feedback": "The algorithm EnhancedAdaptiveDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.37 with standard deviation 0.24.", "error": "", "parent_id": "124e3e19-ced6-4119-8a48-f7cfd8013700", "metadata": {"aucs": [0.7831019890419315, 0.7779445368555293, 0.7874305758983344, 0.8017400465280085, 0.798232069200818, 0.8019664158989055, 0.7838380867874732, 0.8044348479702048, 0.7949890601868334, 0.6579177273298686, 0.6530566408464459, 0.6713523568085493, 0.6546704591628894, 0.6539309015944768, 0.6678292108091612, 0.6553812497401077, 0.6692352711761214, 0.6772660610771558, 0.3105163776907238, 0.1244876258663804, 0.3913770875662451, 0.3321002581301783, 0.27208911116162293, 0.12516351573747253, 0.2977608380860154, 0.3482979522930487, 0.1346633585417123, 0.11699159383887692, 0.12668070005986753, 0.25048630158782115, 0.1411389969085456, 0.1324081003818144, 0.09963992452701753, 0.1073070475007778, 0.12092005604454348, 0.20149217191603808, 0.9632037654641178, 0.9849856137220679, 0.9634576657502376, 0.9698919407108891, 0.9803252993419819, 0.9578963235423233, 0.9778176716133449, 0.9768073754423463, 0.9713523158458806, 0.5163043642996379, 0.5238831537727393, 0.5637199618594889, 0.5666437500019184, 0.5473426663417621, 0.5628092507427858, 0.5495816280816337, 0.5712288868183389, 0.5630742023295109, 0.6660367109153191, 0.6120485736292427, 0.6147999212219338, 0.6993459257830066, 0.6964832381806064, 0.6638686555370965, 0.6803377556392145, 0.6485887087675136, 0.6408806799145794, 0.41701521824042276, 0.33942659466162106, 0.487980270540206, 0.344566695688999, 0.38975275127907927, 0.5000804939740568, 0.4054676278272943, 0.3846000249508664, 0.4270541404965271, 0.16739749468287812, 0.18235001289903607, 0.3125701750598222, 0.4200739660116152, 0.44178175709446854, 0.4201628597343726, 0.43729340222818713, 0.3716255966211187, 0.32977161743019456, 0.19835132960286872, 0.27727669814899514, 0.11768168364809739, 0.22193664861674567, 0.2255787041747409, 0.28257221026219637, 0.07284606762825241, 0.17762535423386738, 0.12085057002712496, 0.3225302890118693, 0.30297146700987154, 0.3128864147180783, 0.30093680996493977, 0.4038905028126224, 0.26875198250094623, 0.4423879028731903, 0.4233557985555476, 0.46773984505178434, 0.06192095548428367, 0.06427004453411878, 0.12778626711518004, 0.18580955778094, 0.15676834123695937, 0.0812938906140116, 0.10034179666499454, 0.08827682327258135, 0.09864787857231017, 0.3012853334351253, 0.1952526565386341, 0.21562446990925244, 0.27056439696929924, 0.29117783107993145, 0.3690923883195334, 0.2561310439808062, 0.2688781801724509, 0.23836926571729022, 0.6440818226995488, 0.6287874950799663, 0.6611815530271155, 0.6171465311451307, 0.6683384788590243, 0.6607143190324288, 0.650191141158395, 0.6761736871461523, 0.6634639999912872, 0.1125676881161457, 0.09331549870796785, 0.11420537281804022, 0.09496535986909638, 0.09238181499933884, 0.10303761398320055, 0.08674667013205162, 0.11543422324458841, 0.09035191399719111, 0.13277334243585315, 0.17116704252493686, 0.12842985343828606, 0.14822691327743032, 0.1373467928890606, 0.16919166230704163, 0.14591762479694115, 0.1546855431846883, 0.13629802304096006, 0.4293582996889581, 0.43667132390267205, 0.46402440975758086, 0.4846434053223523, 0.4404236783347887, 0.4813946776244611, 0.45475253193614473, 0.5562598123001655, 0.43596357290890475, 0.30379930509482134, 0.298549875449277, 0.30781807014183316, 0.2671676061205964, 0.2705533660463343, 0.2901337785979964, 0.31093824785193425, 0.3650829926152308, 0.32034679922526643, 0.19911426152853162, 0.18773330952011125, 0.200583124726336, 0.2086260262000479, 0.186638116112548, 0.18705053449407394, 0.19159419077181727, 0.1852367682825854, 0.1809680039917566, 0.5036702914919506, 0.3477822169365904, 0.3964579430155757, 0.41567187269417927, 0.19398515475231493, 0.19672335272607355, 0.38266287991854375, 0.2795481094325052, 0.18796371196619366, 0.703857333381728, 0.14763216492690867, 0.1496429581560491, 0.6952408053645869, 0.5921133964554537, 0.6273955495298207, 0.18259251068171978, 0.6079655803679493, 0.19922562336976546, 0.6118867683826446, 0.19276468433497007, 0.5011040821956911, 0.5689258345454729, 0.19877804885615158, 0.4778196873612528, 0.20598679020496113, 0.2058748620122276, 0.2113460916450166, 0.17899014628361587, 0.17587194304963671, 0.17811017647089555, 0.18894478169854168, 0.1970688379678902, 0.18559175685464047, 0.201636013035828, 0.17477352339164665, 0.19709170230975914, 0.07752810855029946, 0.07282749567482605, 0.07710373366415402, 0.07804982782926995, 0.07518556534766918, 0.07694206869517606, 0.07376880661482466, 0.08009844900101748, 0.07361136593587092]}, "mutation_prompt": null}
{"id": "a06d1943-e636-4d32-a0cb-247c5e3e4f7d", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 10 * dim\n        self.population_size = self.initial_population_size\n        self.mutation_f = 0.6  # Adjusted for improved initial search diversity\n        self.crossover_prob = 0.8  # Slightly increased to enhance diversity\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim)\n        )\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n        self.best_fitness = np.inf\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        stagnation_counter = 0\n        \n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                if self.used_budget >= self.budget:\n                    break\n\n                best_idx = np.argmin(self.fitness)\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mu = self.mutation_f * (b - c) + 0.5 * (self.population[best_idx] - a)\n                mutant = np.clip(a + mu, self.lower_bound, self.upper_bound)\n                \n                trial = np.copy(self.population[i])\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial[cross_points] = mutant[cross_points]\n\n                trial_fitness = func(trial)\n                self.used_budget += 1\n                if trial_fitness < self.fitness[i]:\n                    self.fitness[i] = trial_fitness\n                    self.population[i] = trial\n                    stagnation_counter = 0  # Reset counter on improvement\n                else:\n                    stagnation_counter += 1\n\n            if stagnation_counter > self.population_size * 2:\n                self.crossover_prob = 0.9\n                self.mutation_f *= 1.1\n                stagnation_counter = 0\n\n            if self.used_budget > self.budget * 0.6 and self.population_size > self.dim:\n                self.population_size = int(self.initial_population_size * 0.7)\n                self.population = self.population[:self.population_size]\n                self.fitness = self.fitness[:self.population_size]\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.used_budget >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1", "name": "AdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with refined adaptive parameters and dynamic population resizing for faster convergence.", "configspace": "", "generation": 98, "fitness": 0.47946493905975945, "feedback": "The algorithm AdaptiveDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.48 with standard deviation 0.29.", "error": "", "parent_id": "124e3e19-ced6-4119-8a48-f7cfd8013700", "metadata": {"aucs": [0.8909044048505436, 0.899726913343251, 0.8916333217676242, 0.8869411094192947, 0.8956202239300135, 0.8911627859529918, 0.8951643223065499, 0.9005543156020679, 0.8916004719052066, 0.8041504695931685, 0.7857424722946698, 0.7968583635854357, 0.8006968085685787, 0.8058899282893178, 0.7937364705541343, 0.8067677145061313, 0.8122916250719582, 0.8142387753950424, 0.1590548299080512, 0.47073756112071363, 0.4161027941360985, 0.13658407644636394, 0.12262663227974846, 0.11917889546217741, 0.11577132810932855, 0.13473218607344895, 0.1246392197477526, 0.15121838890033035, 0.11341047906489055, 0.1455064123788785, 0.13181706321183428, 0.14998884233207632, 0.14283639082154753, 0.09424033630800022, 0.13955420896916437, 0.13359956380587268, 0.9438732628939884, 0.9766270876698934, 0.9599362435056487, 0.9552328742974494, 0.9385599915493026, 0.9641071762640445, 0.9678445668134229, 0.9502393426207396, 0.9503781428661167, 0.6878042784820226, 0.7053434448930713, 0.7208321118133922, 0.701432105491655, 0.705182204022176, 0.7487539482898103, 0.6974475793609953, 0.7055765318546204, 0.7052064447170154, 0.8535547459856122, 0.8356466483631887, 0.8499606649329695, 0.8496159745247467, 0.8698913111288137, 0.8510266749743407, 0.8616375909853515, 0.8412059366028195, 0.8630223229379657, 0.5421271752459409, 0.6437918276383423, 0.5912891482115998, 0.6781711200157398, 0.5598082859404068, 0.5831154711525506, 0.6316402557423664, 0.5810705545741262, 0.5491752034881765, 0.5891638691485266, 0.567658007398971, 0.6023107168939257, 0.5951633300133998, 0.5586172808234319, 0.6119548458564215, 0.6333338914529909, 0.5657424476337787, 0.5674994935144155, 0.4897850070850983, 0.5621266454789023, 0.5058312639043703, 0.5155113674387992, 0.5073202735619295, 0.5079951117961385, 0.5018717876149311, 0.3684549509255648, 0.5074200805867842, 0.6447989577240436, 0.6172649045625616, 0.6275842632934019, 0.6012539071562264, 0.560562734962123, 0.621907859183154, 0.632456979696606, 0.6815300594858062, 0.6366683728914939, 0.284740551811846, 0.10359149952250357, 0.09975977296880922, 0.4413189160903652, 0.43796955976343954, 0.3498070485147666, 0.2661761051023964, 0.13267500128611587, 0.24115125543867688, 0.44674914818696465, 0.431718972621296, 0.44437191953858224, 0.46831280350951887, 0.4596278115543959, 0.49190014064703036, 0.4168169263146426, 0.4030803686339449, 0.4398985127101487, 0.8063124134159823, 0.8112589833602555, 0.8096300645283301, 0.7969300363813401, 0.7973374731194504, 0.8088511764408938, 0.8057693923180919, 0.8013669373165446, 0.8094647240656743, 0.10325358596972078, 0.09373983946326547, 0.09771426383832982, 0.12045358650333526, 0.11579700216010391, 0.10732221651884088, 0.09246565354385061, 0.12113627507555358, 0.12562458267406618, 0.14385782439873074, 0.14773948862116926, 0.15000357988296564, 0.14566031334302953, 0.14772576908609736, 0.1659339054973087, 0.13107739083889847, 0.1593596593505583, 0.13631079372292643, 0.6241091605100177, 0.6287723546565851, 0.5988196552593199, 0.5876387606386733, 0.5534900126574177, 0.5937826946390093, 0.6758121228506091, 0.6946477194182055, 0.6605958511594962, 0.43267871212955666, 0.4402955817990575, 0.43418705820778647, 0.44747520273258545, 0.4670527315629851, 0.4551007804091328, 0.4820504579928201, 0.4394873920764909, 0.49896491738643256, 0.21260485378088, 0.2079699799573752, 0.19833075318621007, 0.21028893189754616, 0.1876220470819734, 0.19421134473706703, 0.20953581637857266, 0.20646841557349938, 0.20898037372335143, 0.24021204370873195, 0.22839257811066915, 0.21235250234396474, 0.23212923439033695, 0.23976331907197468, 0.2423145251579234, 0.21478869132182088, 0.23707300858990932, 0.20390513282176137, 0.164356735853588, 0.18430565405297417, 0.1543890701611903, 0.8620340503826815, 0.870067768654295, 0.8817541651000638, 0.8484448751425551, 0.8717647311460113, 0.8487378404759427, 0.8488828968219412, 0.2119864653956538, 0.8665999979654458, 0.8440014065110197, 0.16633631724683196, 0.2111541418494658, 0.10446447610540965, 0.8405283922081852, 0.21163256989339063, 0.17888287597538743, 0.1759805739421103, 0.17308826688191514, 0.16776268524110183, 0.1867429531781727, 0.18807302119588654, 0.18646556850156548, 0.16936827565095025, 0.17699638669544926, 0.07822404785368475, 0.08406519350834418, 0.08439172139144246, 0.09087487182814169, 0.09013329270404535, 0.08685049074366746, 0.08511186464625375, 0.09061425833760872, 0.09849460414868227]}, "mutation_prompt": null}
{"id": "aa730026-35d0-407b-9bad-a82f1bddab22", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 10 * dim\n        self.population_size = self.initial_population_size\n        self.mutation_f = 0.6  # Adjusted for improved initial search diversity\n        self.crossover_prob = 0.8  # Slightly increased to enhance diversity\n        self.population = np.random.uniform(\n            self.lower_bound, self.upper_bound, (self.population_size, dim)\n        )\n        self.fitness = np.full(self.population_size, np.inf)\n        self.used_budget = 0\n        self.best_fitness = np.inf\n\n    def __call__(self, func):\n        self.evaluate_population(func)\n        stagnation_counter = 0\n        \n        while self.used_budget < self.budget:\n            for i in range(self.population_size):\n                if self.used_budget >= self.budget:\n                    break\n\n                best_idx = np.argmin(self.fitness)\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = self.population[np.random.choice(idxs, 3, replace=False)]\n                mu = self.mutation_f * (b - c) + 0.5 * (self.population[best_idx] - a)\n                mutant = np.clip(a + mu, self.lower_bound, self.upper_bound)\n                \n                trial = np.copy(self.population[i])\n                cross_points = np.random.rand(self.dim) < self.crossover_prob\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial[cross_points] = mutant[cross_points]\n\n                trial_fitness = func(trial)\n                self.used_budget += 1\n                if trial_fitness < self.fitness[i]:\n                    self.fitness[i] = trial_fitness\n                    self.population[i] = trial\n                    stagnation_counter = 0  # Reset counter on improvement\n                else:\n                    stagnation_counter += 1\n\n            if stagnation_counter > self.population_size * 2:\n                self.crossover_prob = 0.9\n                self.mutation_f *= 1.1\n                stagnation_counter = 0\n\n            if self.used_budget > self.budget * 0.6 and self.population_size > self.dim:\n                self.population_size = int(self.initial_population_size * 0.7)\n                self.population = self.population[:self.population_size]\n                self.fitness = self.fitness[:self.population_size]\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx]\n\n    def evaluate_population(self, func):\n        for i in range(self.population_size):\n            if self.used_budget >= self.budget:\n                break\n            self.fitness[i] = func(self.population[i])\n            self.used_budget += 1", "name": "AdaptiveDifferentialEvolution", "description": "Enhanced Adaptive Differential Evolution with refined adaptive parameters and dynamic population resizing for faster convergence.", "configspace": "", "generation": 99, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a06d1943-e636-4d32-a0cb-247c5e3e4f7d", "metadata": {"aucs": [0.8909044048505436, 0.899726913343251, 0.8916333217676242, 0.8869411094192947, 0.8956202239300135, 0.8911627859529918, 0.8951643223065499, 0.9005543156020679, 0.8916004719052066, 0.8041504695931685, 0.7857424722946698, 0.7968583635854357, 0.8006968085685787, 0.8058899282893178, 0.7937364705541343, 0.8067677145061313, 0.8122916250719582, 0.8142387753950424, 0.1590548299080512, 0.47073756112071363, 0.4161027941360985, 0.13658407644636394, 0.12262663227974846, 0.11917889546217741, 0.11577132810932855, 0.13473218607344895, 0.1246392197477526, 0.15121838890033035, 0.11341047906489055, 0.1455064123788785, 0.13181706321183428, 0.14998884233207632, 0.14283639082154753, 0.09424033630800022, 0.13955420896916437, 0.13359956380587268, 0.9438732628939884, 0.9766270876698934, 0.9599362435056487, 0.9552328742974494, 0.9385599915493026, 0.9641071762640445, 0.9678445668134229, 0.9502393426207396, 0.9503781428661167, 0.6878042784820226, 0.7053434448930713, 0.7208321118133922, 0.701432105491655, 0.705182204022176, 0.7487539482898103, 0.6974475793609953, 0.7055765318546204, 0.7052064447170154, 0.8535547459856122, 0.8356466483631887, 0.8499606649329695, 0.8496159745247467, 0.8698913111288137, 0.8510266749743407, 0.8616375909853515, 0.8412059366028195, 0.8630223229379657, 0.5421271752459409, 0.6437918276383423, 0.5912891482115998, 0.6781711200157398, 0.5598082859404068, 0.5831154711525506, 0.6316402557423664, 0.5810705545741262, 0.5491752034881765, 0.5891638691485266, 0.567658007398971, 0.6023107168939257, 0.5951633300133998, 0.5586172808234319, 0.6119548458564215, 0.6333338914529909, 0.5657424476337787, 0.5674994935144155, 0.4897850070850983, 0.5621266454789023, 0.5058312639043703, 0.5155113674387992, 0.5073202735619295, 0.5079951117961385, 0.5018717876149311, 0.3684549509255648, 0.5074200805867842, 0.6447989577240436, 0.6172649045625616, 0.6275842632934019, 0.6012539071562264, 0.560562734962123, 0.621907859183154, 0.632456979696606, 0.6815300594858062, 0.6366683728914939, 0.284740551811846, 0.10359149952250357, 0.09975977296880922, 0.4413189160903652, 0.43796955976343954, 0.3498070485147666, 0.2661761051023964, 0.13267500128611587, 0.24115125543867688, 0.44674914818696465, 0.431718972621296, 0.44437191953858224, 0.46831280350951887, 0.4596278115543959, 0.49190014064703036, 0.4168169263146426, 0.4030803686339449, 0.4398985127101487, 0.8063124134159823, 0.8112589833602555, 0.8096300645283301, 0.7969300363813401, 0.7973374731194504, 0.8088511764408938, 0.8057693923180919, 0.8013669373165446, 0.8094647240656743, 0.10325358596972078, 0.09373983946326547, 0.09771426383832982, 0.12045358650333526, 0.11579700216010391, 0.10732221651884088, 0.09246565354385061, 0.12113627507555358, 0.12562458267406618, 0.14385782439873074, 0.14773948862116926, 0.15000357988296564, 0.14566031334302953, 0.14772576908609736, 0.1659339054973087, 0.13107739083889847, 0.1593596593505583, 0.13631079372292643, 0.6241091605100177, 0.6287723546565851, 0.5988196552593199, 0.5876387606386733, 0.5534900126574177, 0.5937826946390093, 0.6758121228506091, 0.6946477194182055, 0.6605958511594962, 0.43267871212955666, 0.4402955817990575, 0.43418705820778647, 0.44747520273258545, 0.4670527315629851, 0.4551007804091328, 0.4820504579928201, 0.4394873920764909, 0.49896491738643256, 0.21260485378088, 0.2079699799573752, 0.19833075318621007, 0.21028893189754616, 0.1876220470819734, 0.19421134473706703, 0.20953581637857266, 0.20646841557349938, 0.20898037372335143, 0.24021204370873195, 0.22839257811066915, 0.21235250234396474, 0.23212923439033695, 0.23976331907197468, 0.2423145251579234, 0.21478869132182088, 0.23707300858990932, 0.20390513282176137, 0.164356735853588, 0.18430565405297417, 0.1543890701611903, 0.8620340503826815, 0.870067768654295, 0.8817541651000638, 0.8484448751425551, 0.8717647311460113, 0.8487378404759427, 0.8488828968219412, 0.2119864653956538, 0.8665999979654458, 0.8440014065110197, 0.16633631724683196, 0.2111541418494658, 0.10446447610540965, 0.8405283922081852, 0.21163256989339063, 0.17888287597538743, 0.1759805739421103, 0.17308826688191514, 0.16776268524110183, 0.1867429531781727, 0.18807302119588654, 0.18646556850156548, 0.16936827565095025, 0.17699638669544926, 0.07822404785368475, 0.08406519350834418, 0.08439172139144246, 0.09087487182814169, 0.09013329270404535, 0.08685049074366746, 0.08511186464625375, 0.09061425833760872, 0.09849460414868227]}, "mutation_prompt": null}
